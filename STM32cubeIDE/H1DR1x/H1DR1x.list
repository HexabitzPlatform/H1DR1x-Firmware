
H1DR1x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b4  08017770  08017770  00027770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a924  0801a924  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  0801a924  0801a924  0002a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a92c  0801a92c  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a92c  0801a92c  0002a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a934  0801a934  0002a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .myBufBlock   00000008  20000000  0801a938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  0801a940  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006bb8  20000a78  0801b3b0  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20007630  0801b3b0  00037630  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054724  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000098c1  00000000  00000000  000851c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b2e7  00000000  00000000  0008ea85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a70  00000000  00000000  000a9d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002ea0  00000000  00000000  000ab7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000177f8  00000000  00000000  000ae680  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a441  00000000  00000000  000c5e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d02b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006318  00000000  00000000  000d0334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017758 	.word	0x08017758

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08017758 	.word	0x08017758

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017e58 	.word	0x08017e58
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017e98 	.word	0x08017e98
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017ed8 	.word	0x08017ed8
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2a:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d2c:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2e:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d035      	beq.n	8002da0 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d36:	d02c      	beq.n	8002d92 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <LoadROtopology+0x94>)
 8002d3a:	b2f6      	uxtb	r6, r6
 8002d3c:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <LoadROtopology+0x98>)
 8002d40:	7013      	strb	r3, [r2, #0]
 8002d42:	466b      	mov	r3, sp
 8002d44:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d46:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	469c      	mov	ip, r3
 8002d4e:	4d1c      	ldr	r5, [pc, #112]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d50:	4663      	mov	r3, ip
 8002d52:	700b      	strb	r3, [r1, #0]
 8002d54:	780b      	ldrb	r3, [r1, #0]
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d814      	bhi.n	8002d84 <LoadROtopology+0x60>
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d5e:	18c0      	adds	r0, r0, r3
 8002d60:	0040      	lsls	r0, r0, #1
 8002d62:	18c0      	adds	r0, r0, r3
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <LoadROtopology+0x8c>)
 8002d66:	18d7      	adds	r7, r2, r3
 8002d68:	780b      	ldrb	r3, [r1, #0]
 8002d6a:	883f      	ldrh	r7, [r7, #0]
 8002d6c:	18c3      	adds	r3, r0, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d72:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d74:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	700b      	strb	r3, [r1, #0]
 8002d7c:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d7e:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d9ef      	bls.n	8002d64 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002d84:	3401      	adds	r4, #1
 8002d86:	b2e4      	uxtb	r4, r4
 8002d88:	42b4      	cmp	r4, r6
 8002d8a:	d9e1      	bls.n	8002d50 <LoadROtopology+0x2c>
 8002d8c:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002d92:	2101      	movs	r1, #1
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002d96:	2601      	movs	r6, #1
			N =1;
 8002d98:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <LoadROtopology+0x98>)
 8002d9c:	7013      	strb	r3, [r2, #0]
 8002d9e:	e7d0      	b.n	8002d42 <LoadROtopology+0x1e>
		N =1;
 8002da0:	2201      	movs	r2, #1
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002da4:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002da6:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da8:	2200      	movs	r2, #0
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LoadROtopology+0x98>)
 8002dac:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002dae:	e7ee      	b.n	8002d8e <LoadROtopology+0x6a>
 8002db0:	0801d800 	.word	0x0801d800
 8002db4:	0000ffff 	.word	0x0000ffff
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	20000a98 	.word	0x20000a98
 8002dc0:	20000f0c 	.word	0x20000f0c

08002dc4 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	46c6      	mov	lr, r8
 8002dc8:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dca:	4e0f      	ldr	r6, [pc, #60]	; (8002e08 <LoadEEportsDir+0x44>)
 8002dcc:	7833      	ldrb	r3, [r6, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002dd2:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	4f0c      	ldr	r7, [pc, #48]	; (8002e0c <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dda:	1e61      	subs	r1, r4, #1
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	1c65      	adds	r5, r4, #1
 8002de0:	1879      	adds	r1, r7, r1
 8002de2:	b2a8      	uxth	r0, r5
 8002de4:	f004 fd2c 	bl	8007840 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002de8:	2c19      	cmp	r4, #25
 8002dea:	d901      	bls.n	8002df0 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002dec:	230a      	movs	r3, #10
 8002dee:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002df0:	7833      	ldrb	r3, [r6, #0]
 8002df2:	b2ec      	uxtb	r4, r5
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d2f0      	bcs.n	8002dda <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002df8:	4640      	mov	r0, r8
 8002dfa:	bc04      	pop	{r2}
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	4698      	mov	r8, r3
 8002e04:	e7f8      	b.n	8002df8 <LoadEEportsDir+0x34>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	20007588 	.word	0x20007588

08002e10 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	464e      	mov	r6, r9
 8002e14:	46de      	mov	lr, fp
 8002e16:	4657      	mov	r7, sl
 8002e18:	4645      	mov	r5, r8
 8002e1a:	b5e0      	push	{r5, r6, r7, lr}
 8002e1c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e1e:	466b      	mov	r3, sp
 8002e20:	1d9e      	adds	r6, r3, #6
 8002e22:	2300      	movs	r3, #0
 8002e24:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e26:	4698      	mov	r8, r3
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e2a:	241c      	movs	r4, #28
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <LoadEEalias+0x7c>)
 8002e30:	469b      	mov	fp, r3
 8002e32:	4643      	mov	r3, r8
 8002e34:	009f      	lsls	r7, r3, #2
 8002e36:	18fd      	adds	r5, r7, r3
 8002e38:	1d63      	adds	r3, r4, #5
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	006d      	lsls	r5, r5, #1
 8002e40:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e42:	0020      	movs	r0, r4
 8002e44:	0031      	movs	r1, r6
 8002e46:	f004 fcfb 	bl	8007840 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e4a:	8833      	ldrh	r3, [r6, #0]
 8002e4c:	3401      	adds	r4, #1
 8002e4e:	706b      	strb	r3, [r5, #1]
 8002e50:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	702b      	strb	r3, [r5, #0]
 8002e56:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e58:	454c      	cmp	r4, r9
 8002e5a:	d1f2      	bne.n	8002e42 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4447      	add	r7, r8
 8002e60:	007f      	lsls	r7, r7, #1
 8002e62:	4457      	add	r7, sl
 8002e64:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e66:	4643      	mov	r3, r8
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	465b      	mov	r3, fp
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4543      	cmp	r3, r8
 8002e74:	d2dd      	bcs.n	8002e32 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bc3c      	pop	{r2, r3, r4, r5}
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	46ab      	mov	fp, r5
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000dfc 	.word	0x20000dfc
 8002e8c:	20000008 	.word	0x20000008

08002e90 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	4646      	mov	r6, r8
 8002e94:	46d6      	mov	lr, sl
 8002e96:	464f      	mov	r7, r9
 8002e98:	b5c0      	push	{r6, r7, lr}
 8002e9a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e9c:	466b      	mov	r3, sp
 8002e9e:	1d9e      	adds	r6, r3, #6
 8002ea0:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002ea2:	4c22      	ldr	r4, [pc, #136]	; (8002f2c <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002ea4:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002ea6:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002ea8:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <LoadEEgroup+0x94>
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <LoadEEgroup+0xa0>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	1d1f      	adds	r7, r3, #4
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	0049      	lsls	r1, r1, #1
 8002eba:	30cb      	adds	r0, #203	; 0xcb
 8002ebc:	1879      	adds	r1, r7, r1
 8002ebe:	b280      	uxth	r0, r0
		add++;
 8002ec0:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ec2:	f004 fcbd 	bl	8007840 <EE_ReadVariable>
		add++;
 8002ec6:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b2e9      	uxtb	r1, r5
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d8f2      	bhi.n	8002eb6 <LoadEEgroup+0x26>
 8002ed0:	2338      	movs	r3, #56	; 0x38
 8002ed2:	002c      	movs	r4, r5
 8002ed4:	35cb      	adds	r5, #203	; 0xcb
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	b2ab      	uxth	r3, r5
 8002eda:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002edc:	2300      	movs	r3, #0
 8002ede:	469a      	mov	sl, r3
 8002ee0:	3499      	adds	r4, #153	; 0x99
 8002ee2:	44e1      	add	r9, ip
 8002ee4:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002ee6:	464d      	mov	r5, r9
 8002ee8:	1d67      	adds	r7, r4, #5
 8002eea:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002eec:	0020      	movs	r0, r4
 8002eee:	0031      	movs	r1, r6
 8002ef0:	f004 fca6 	bl	8007840 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002ef4:	8833      	ldrh	r3, [r6, #0]
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	706b      	strb	r3, [r5, #1]
 8002efa:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f02:	42bc      	cmp	r4, r7
 8002f04:	d1f2      	bne.n	8002eec <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f06:	464b      	mov	r3, r9
 8002f08:	4652      	mov	r2, sl
 8002f0a:	725a      	strb	r2, [r3, #9]
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	469c      	mov	ip, r3
 8002f10:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f12:	45a0      	cmp	r8, r4
 8002f14:	d1e7      	bne.n	8002ee6 <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	b002      	add	sp, #8
 8002f1a:	bc1c      	pop	{r2, r3, r4}
 8002f1c:	4690      	mov	r8, r2
 8002f1e:	4699      	mov	r9, r3
 8002f20:	46a2      	mov	sl, r4
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <LoadEEgroup+0xa0>)
 8002f26:	4699      	mov	r9, r3
 8002f28:	e7d2      	b.n	8002ed0 <LoadEEgroup+0x40>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	20000a98 	.word	0x20000a98

08002f34 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	46ce      	mov	lr, r9
 8002f38:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f3a:	260e      	movs	r6, #14
 8002f3c:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f42:	ac03      	add	r4, sp, #12
 8002f44:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f46:	0021      	movs	r1, r4
 8002f48:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f4a:	8023      	strh	r3, [r4, #0]
 8002f4c:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f4e:	f004 fc77 	bl	8007840 <EE_ReadVariable>
	uint8_t direction =0;
 8002f52:	2700      	movs	r7, #0
	if(!status1){
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d100      	bne.n	8002f5a <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002f58:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	20e5      	movs	r0, #229	; 0xe5
 8002f5e:	f004 fc6f 	bl	8007840 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f62:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f64:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f66:	20e6      	movs	r0, #230	; 0xe6
 8002f68:	f004 fc6a 	bl	8007840 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f6c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f6e:	4305      	orrs	r5, r0
 8002f70:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f72:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d104      	bne.n	8002f82 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f78:	8823      	ldrh	r3, [r4, #0]
 8002f7a:	8832      	ldrh	r2, [r6, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4698      	mov	r8, r3
 8002f80:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f82:	0021      	movs	r1, r4
 8002f84:	20e7      	movs	r0, #231	; 0xe7
 8002f86:	f004 fc5b 	bl	8007840 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8a:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8e:	20e8      	movs	r0, #232	; 0xe8
 8002f90:	f004 fc56 	bl	8007840 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f94:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f96:	4305      	orrs	r5, r0
 8002f98:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f9a:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	d104      	bne.n	8002faa <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fa0:	8823      	ldrh	r3, [r4, #0]
 8002fa2:	8832      	ldrh	r2, [r6, #0]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e9      	movs	r0, #233	; 0xe9
 8002fae:	f004 fc47 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d030      	beq.n	8003018 <LoadEEstreams+0xe4>
 8002fb6:	4d26      	ldr	r5, [pc, #152]	; (8003050 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fb8:	0021      	movs	r1, r4
 8002fba:	20ea      	movs	r0, #234	; 0xea
 8002fbc:	f004 fc40 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d103      	bne.n	8002fcc <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8002fc4:	8823      	ldrh	r3, [r4, #0]
 8002fc6:	0a1a      	lsrs	r2, r3, #8
 8002fc8:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8002fca:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002fcc:	0021      	movs	r1, r4
 8002fce:	20eb      	movs	r0, #235	; 0xeb
 8002fd0:	f004 fc36 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d105      	bne.n	8002fe4 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8002fd8:	2220      	movs	r2, #32
 8002fda:	8823      	ldrh	r3, [r4, #0]
 8002fdc:	0a19      	lsrs	r1, r3, #8
 8002fde:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002fe4:	7f2b      	ldrb	r3, [r5, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LoadEEstreams+0xbc>
 8002fea:	7f6a      	ldrb	r2, [r5, #29]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d120      	bne.n	8003032 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002ff0:	7fab      	ldrb	r3, [r5, #30]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LoadEEstreams+0xc8>
 8002ff6:	7fea      	ldrb	r2, [r5, #31]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d121      	bne.n	8003040 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	5ceb      	ldrb	r3, [r5, r3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <LoadEEstreams+0xd8>
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	5caa      	ldrb	r2, [r5, r2]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d10b      	bne.n	8003024 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 800300c:	2000      	movs	r0, #0
 800300e:	b005      	add	sp, #20
 8003010:	bc0c      	pop	{r2, r3}
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 8003018:	8823      	ldrh	r3, [r4, #0]
 800301a:	4d0d      	ldr	r5, [pc, #52]	; (8003050 <LoadEEstreams+0x11c>)
 800301c:	0a1a      	lsrs	r2, r3, #8
 800301e:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003020:	776b      	strb	r3, [r5, #29]
 8003022:	e7c9      	b.n	8002fb8 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	4641      	mov	r1, r8
 8003028:	464a      	mov	r2, r9
 800302a:	0038      	movs	r0, r7
 800302c:	f006 f9ba 	bl	80093a4 <SetupDMAStreams>
 8003030:	e7ec      	b.n	800300c <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003032:	9200      	str	r2, [sp, #0]
 8003034:	4641      	mov	r1, r8
 8003036:	464a      	mov	r2, r9
 8003038:	0038      	movs	r0, r7
 800303a:	f006 f9b3 	bl	80093a4 <SetupDMAStreams>
 800303e:	e7d7      	b.n	8002ff0 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	4641      	mov	r1, r8
 8003044:	464a      	mov	r2, r9
 8003046:	0038      	movs	r0, r7
 8003048:	f006 f9ac 	bl	80093a4 <SetupDMAStreams>
 800304c:	e7d6      	b.n	8002ffc <LoadEEstreams+0xc8>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000b18 	.word	0x20000b18

08003054 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003054:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800305a:	ac01      	add	r4, sp, #4
 800305c:	0021      	movs	r1, r4
 800305e:	0040      	lsls	r0, r0, #1
 8003060:	f004 fbee 	bl	8007840 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003064:	2800      	cmp	r0, #0
 8003066:	d15d      	bne.n	8003124 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003068:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 800306a:	8823      	ldrh	r3, [r4, #0]
 800306c:	4d54      	ldr	r5, [pc, #336]	; (80031c0 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800306e:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 8003070:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003072:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003078:	f004 fbe2 	bl	8007840 <EE_ReadVariable>

	if(!status1){
 800307c:	2800      	cmp	r0, #0
 800307e:	d15e      	bne.n	800313e <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003080:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003082:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003084:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003086:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003088:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308a:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800308c:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308e:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003090:	f004 fbd6 	bl	8007840 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 8003094:	4d4b      	ldr	r5, [pc, #300]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003096:	2800      	cmp	r0, #0
 8003098:	d15e      	bne.n	8003158 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309a:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 800309c:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309e:	0021      	movs	r1, r4
 80030a0:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 80030a2:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030a4:	f004 fbcc 	bl	8007840 <EE_ReadVariable>
	if(!status1)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d15f      	bne.n	800316c <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030ac:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 80030ae:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b0:	0021      	movs	r1, r4
 80030b2:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 80030b4:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b6:	f004 fbc3 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d160      	bne.n	8003180 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030be:	8823      	ldrh	r3, [r4, #0]
 80030c0:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030c6:	208c      	movs	r0, #140	; 0x8c
 80030c8:	0021      	movs	r1, r4
 80030ca:	0040      	lsls	r0, r0, #1
 80030cc:	f004 fbb8 	bl	8007840 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d0:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030d2:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d4:	201a      	movs	r0, #26
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f004 fbb1 	bl	8007840 <EE_ReadVariable>
	if(!status1 && !status2){
 80030de:	4306      	orrs	r6, r0
 80030e0:	b2b6      	uxth	r6, r6
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d15f      	bne.n	80031a6 <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80030e6:	466b      	mov	r3, sp
 80030e8:	88db      	ldrh	r3, [r3, #6]
 80030ea:	8822      	ldrh	r2, [r4, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80030f2:	208d      	movs	r0, #141	; 0x8d
 80030f4:	0021      	movs	r1, r4
 80030f6:	0040      	lsls	r0, r0, #1
 80030f8:	f004 fba2 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003100:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003102:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003104:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 8003106:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003108:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800310e:	f004 fb97 	bl	8007840 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003112:	2800      	cmp	r0, #0
 8003114:	d044      	beq.n	80031a0 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003116:	2326      	movs	r3, #38	; 0x26
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <LoadEEparams+0x174>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 800311e:	2000      	movs	r0, #0
 8003120:	b002      	add	sp, #8
 8003122:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003124:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <LoadEEparams+0x174>)
 8003128:	4d25      	ldr	r5, [pc, #148]	; (80031c0 <LoadEEparams+0x16c>)
 800312a:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800312c:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 800312e:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003130:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003132:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003134:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003136:	f004 fb83 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 800313a:	2800      	cmp	r0, #0
 800313c:	d0a0      	beq.n	8003080 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800313e:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003142:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003144:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003146:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003148:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800314a:	895b      	ldrh	r3, [r3, #10]
 800314c:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800314e:	f004 fb77 	bl	8007840 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 8003152:	4d1c      	ldr	r5, [pc, #112]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003154:	2800      	cmp	r0, #0
 8003156:	d0a0      	beq.n	800309a <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003158:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800315c:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315e:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003160:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003162:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003164:	f004 fb6c 	bl	8007840 <EE_ReadVariable>
	if(!status1)
 8003168:	2800      	cmp	r0, #0
 800316a:	d09f      	beq.n	80030ac <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800316c:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003170:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003172:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003174:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003176:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003178:	f004 fb62 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d09e      	beq.n	80030be <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <LoadEEparams+0x174>)
 8003182:	7c1a      	ldrb	r2, [r3, #16]
 8003184:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003186:	7c5b      	ldrb	r3, [r3, #17]
 8003188:	716b      	strb	r3, [r5, #5]
 800318a:	e79c      	b.n	80030c6 <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 800318c:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800318e:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003194:	0021      	movs	r1, r4
 8003196:	30ff      	adds	r0, #255	; 0xff
 8003198:	f004 fb52 	bl	8007840 <EE_ReadVariable>
	if(!status1){
 800319c:	2800      	cmp	r0, #0
 800319e:	d1ba      	bne.n	8003116 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031a0:	8823      	ldrh	r3, [r4, #0]
 80031a2:	76ab      	strb	r3, [r5, #26]
 80031a4:	e7bb      	b.n	800311e <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 80031a6:	2322      	movs	r3, #34	; 0x22
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <LoadEEparams+0x178>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031b0:	23e1      	movs	r3, #225	; 0xe1
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	60ab      	str	r3, [r5, #8]
 80031b6:	e79c      	b.n	80030f2 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <LoadEEparams+0x174>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60ab      	str	r3, [r5, #8]
 80031be:	e798      	b.n	80030f2 <LoadEEparams+0x9e>
 80031c0:	20007028 	.word	0x20007028
 80031c4:	200070a8 	.word	0x200070a8
 80031c8:	20000008 	.word	0x20000008
 80031cc:	20000b18 	.word	0x20000b18

080031d0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	46de      	mov	lr, fp
 80031d4:	4657      	mov	r7, sl
 80031d6:	464e      	mov	r6, r9
 80031d8:	4645      	mov	r5, r8
 80031da:	b5e0      	push	{r5, r6, r7, lr}
 80031dc:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031de:	ab02      	add	r3, sp, #8
 80031e0:	469c      	mov	ip, r3
 80031e2:	261e      	movs	r6, #30
 80031e4:	2300      	movs	r3, #0
 80031e6:	4466      	add	r6, ip
 80031e8:	8033      	strh	r3, [r6, #0]
 80031ea:	330f      	adds	r3, #15
 80031ec:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031ee:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 80031f0:	2501      	movs	r5, #1
 80031f2:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031f4:	469b      	mov	fp, r3
 80031f6:	e004      	b.n	8003202 <LoadEEbuttons+0x32>
 80031f8:	3404      	adds	r4, #4
 80031fa:	3501      	adds	r5, #1
 80031fc:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80031fe:	2d08      	cmp	r5, #8
 8003200:	d05e      	beq.n	80032c0 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003202:	0031      	movs	r1, r6
 8003204:	0020      	movs	r0, r4
 8003206:	f004 fb1b 	bl	8007840 <EE_ReadVariable>
 800320a:	b2eb      	uxtb	r3, r5
 800320c:	1e07      	subs	r7, r0, #0
 800320e:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003210:	d1f2      	bne.n	80031f8 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003212:	8832      	ldrh	r2, [r6, #0]
 8003214:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003216:	0919      	lsrs	r1, r3, #4
 8003218:	42a9      	cmp	r1, r5
 800321a:	d1ed      	bne.n	80031f8 <LoadEEbuttons+0x28>
 800321c:	4651      	mov	r1, sl
 800321e:	400b      	ands	r3, r1
 8003220:	d0ea      	beq.n	80031f8 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003222:	482b      	ldr	r0, [pc, #172]	; (80032d0 <LoadEEbuttons+0x100>)
 8003224:	00e9      	lsls	r1, r5, #3
 8003226:	4680      	mov	r8, r0
 8003228:	1949      	adds	r1, r1, r5
 800322a:	4488      	add	r8, r1
 800322c:	4641      	mov	r1, r8
 800322e:	00a8      	lsls	r0, r5, #2
 8003230:	704b      	strb	r3, [r1, #1]
 8003232:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0018      	movs	r0, r3
 8003236:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 8003238:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800323a:	b280      	uxth	r0, r0
 800323c:	0031      	movs	r1, r6
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	f004 fafe 	bl	8007840 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003244:	4641      	mov	r1, r8
 8003246:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003248:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324a:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324c:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003250:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003252:	b280      	uxth	r0, r0
 8003254:	0031      	movs	r1, r6
 8003256:	f004 faf3 	bl	8007840 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800325a:	4641      	mov	r1, r8
 800325c:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800325e:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003260:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003262:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003264:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003266:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003268:	b280      	uxth	r0, r0
 800326a:	0031      	movs	r1, r6
 800326c:	f004 fae8 	bl	8007840 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003270:	4641      	mov	r1, r8
 8003272:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003276:	0a1a      	lsrs	r2, r3, #8
 8003278:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800327a:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 800327c:	4649      	mov	r1, r9
 800327e:	f005 f8c1 	bl	8008404 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003282:	4643      	mov	r3, r8
 8003284:	4658      	mov	r0, fp
 8003286:	7a19      	ldrb	r1, [r3, #8]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	104a      	asrs	r2, r1, #1
 800328c:	4002      	ands	r2, r0
 800328e:	4001      	ands	r1, r0
 8003290:	4640      	mov	r0, r8
 8003292:	9705      	str	r7, [sp, #20]
 8003294:	79c0      	ldrb	r0, [r0, #7]
 8003296:	3404      	adds	r4, #4
 8003298:	9004      	str	r0, [sp, #16]
 800329a:	4640      	mov	r0, r8
 800329c:	7980      	ldrb	r0, [r0, #6]
 800329e:	3501      	adds	r5, #1
 80032a0:	9003      	str	r0, [sp, #12]
 80032a2:	4640      	mov	r0, r8
 80032a4:	7940      	ldrb	r0, [r0, #5]
 80032a6:	b2a4      	uxth	r4, r4
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	4640      	mov	r0, r8
 80032ac:	7900      	ldrb	r0, [r0, #4]
 80032ae:	9001      	str	r0, [sp, #4]
 80032b0:	4640      	mov	r0, r8
 80032b2:	78c0      	ldrb	r0, [r0, #3]
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	4648      	mov	r0, r9
 80032b8:	f005 f9ae 	bl	8008618 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80032bc:	2d08      	cmp	r5, #8
 80032be:	d1a0      	bne.n	8003202 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 80032c0:	2000      	movs	r0, #0
 80032c2:	b00b      	add	sp, #44	; 0x2c
 80032c4:	bc3c      	pop	{r2, r3, r4, r5}
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	46ab      	mov	fp, r5
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	2000191c 	.word	0x2000191c

080032d4 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4645      	mov	r5, r8
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032de:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 80032e0:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032e2:	f00f fc23 	bl	8012b2c <malloc>
 80032e6:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 80032e8:	d065      	beq.n	80033b6 <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ea:	4c3b      	ldr	r4, [pc, #236]	; (80033d8 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 80032ec:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ee:	7822      	ldrb	r2, [r4, #0]
 80032f0:	2afe      	cmp	r2, #254	; 0xfe
 80032f2:	d156      	bne.n	80033a2 <LoadROsnippets+0xce>
 80032f4:	1c6b      	adds	r3, r5, #1
 80032f6:	4698      	mov	r8, r3
 80032f8:	2364      	movs	r3, #100	; 0x64
 80032fa:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <LoadROsnippets+0x108>)
 80032fe:	4e38      	ldr	r6, [pc, #224]	; (80033e0 <LoadROsnippets+0x10c>)
 8003300:	469b      	mov	fp, r3
 8003302:	44b1      	add	r9, r6
 8003304:	0020      	movs	r0, r4
 8003306:	46a2      	mov	sl, r4
 8003308:	3014      	adds	r0, #20
 800330a:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800330c:	7822      	ldrb	r2, [r4, #0]
 800330e:	550a      	strb	r2, [r1, r4]
 8003310:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003312:	4284      	cmp	r4, r0
 8003314:	d1fa      	bne.n	800330c <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003316:	2214      	movs	r2, #20
 8003318:	4641      	mov	r1, r8
 800331a:	0030      	movs	r0, r6
 800331c:	f00f fe53 	bl	8012fc6 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003320:	2100      	movs	r1, #0
 8003322:	2214      	movs	r2, #20
 8003324:	0028      	movs	r0, r5
 8003326:	f00f fe57 	bl	8012fd8 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800332a:	7821      	ldrb	r1, [r4, #0]
 800332c:	1c8b      	adds	r3, r1, #2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d942      	bls.n	80033ba <LoadROsnippets+0xe6>
 8003334:	4657      	mov	r7, sl
 8003336:	0028      	movs	r0, r5
 8003338:	3746      	adds	r7, #70	; 0x46
		i =0;
 800333a:	2300      	movs	r3, #0
 800333c:	e002      	b.n	8003344 <LoadROsnippets+0x70>
 800333e:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003340:	42a7      	cmp	r7, r4
 8003342:	d034      	beq.n	80033ae <LoadROsnippets+0xda>
			++currentAdd;
 8003344:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003346:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003348:	7821      	ldrb	r1, [r4, #0]
			++i;
 800334a:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800334c:	1c8a      	adds	r2, r1, #2
 800334e:	b2d2      	uxtb	r2, r2
			++i;
 8003350:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003352:	2a01      	cmp	r2, #1
 8003354:	d8f3      	bhi.n	800333e <LoadROsnippets+0x6a>
 8003356:	469a      	mov	sl, r3
 8003358:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 800335a:	5caa      	ldrb	r2, [r5, r2]
 800335c:	2a00      	cmp	r2, #0
 800335e:	d002      	beq.n	8003366 <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 8003366:	4650      	mov	r0, sl
 8003368:	f00f fbe0 	bl	8012b2c <malloc>
 800336c:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 800336e:	2800      	cmp	r0, #0
 8003370:	d028      	beq.n	80033c4 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003372:	4652      	mov	r2, sl
 8003374:	0029      	movs	r1, r5
 8003376:	f00f fe26 	bl	8012fc6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800337a:	465b      	mov	r3, fp
 800337c:	465a      	mov	r2, fp
 800337e:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003380:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003382:	3301      	adds	r3, #1
 8003384:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003386:	0028      	movs	r0, r5
 8003388:	4652      	mov	r2, sl
 800338a:	f00f fe25 	bl	8012fd8 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800338e:	7823      	ldrb	r3, [r4, #0]
 8003390:	2bfe      	cmp	r3, #254	; 0xfe
 8003392:	d102      	bne.n	800339a <LoadROsnippets+0xc6>
 8003394:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003396:	45b1      	cmp	r9, r6
 8003398:	d1b4      	bne.n	8003304 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 800339a:	0028      	movs	r0, r5
 800339c:	f00f fbd0 	bl	8012b40 <free>
	return BOS_OK;
 80033a0:	2000      	movs	r0, #0
}
 80033a2:	bc3c      	pop	{r2, r3, r4, r5}
 80033a4:	4690      	mov	r8, r2
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	46ab      	mov	fp, r5
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	2332      	movs	r3, #50	; 0x32
 80033b0:	2231      	movs	r2, #49	; 0x31
 80033b2:	469a      	mov	sl, r3
 80033b4:	e7d1      	b.n	800335a <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 80033b6:	20fb      	movs	r0, #251	; 0xfb
 80033b8:	e7f3      	b.n	80033a2 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ba:	2201      	movs	r2, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	4252      	negs	r2, r2
 80033c0:	469a      	mov	sl, r3
 80033c2:	e7ca      	b.n	800335a <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033c4:	2214      	movs	r2, #20
 80033c6:	2100      	movs	r1, #0
 80033c8:	0030      	movs	r0, r6
 80033ca:	f00f fe05 	bl	8012fd8 <memset>
			free(snipBuffer);
 80033ce:	0028      	movs	r0, r5
 80033d0:	f00f fbb6 	bl	8012b40 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033d4:	200e      	movs	r0, #14
 80033d6:	e7e4      	b.n	80033a2 <LoadROsnippets+0xce>
 80033d8:	0801dc00 	.word	0x0801dc00
 80033dc:	20001180 	.word	0x20001180
 80033e0:	200070c4 	.word	0x200070c4

080033e4 <LoadEEvars>:
void LoadEEvars(void){
 80033e4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033e6:	f7ff fc9d 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033ea:	f7ff fceb 	bl	8002dc4 <LoadEEportsDir>
	LoadEEalias();
 80033ee:	f7ff fd0f 	bl	8002e10 <LoadEEalias>
	LoadEEgroup();
 80033f2:	f7ff fd4d 	bl	8002e90 <LoadEEgroup>
	LoadEEstreams();
 80033f6:	f7ff fd9d 	bl	8002f34 <LoadEEstreams>
	LoadEEparams();
 80033fa:	f7ff fe2b 	bl	8003054 <LoadEEparams>
	LoadEEbuttons();
 80033fe:	f7ff fee7 	bl	80031d0 <LoadEEbuttons>
	LoadROsnippets();
 8003402:	f7ff ff67 	bl	80032d4 <LoadROsnippets>
}
 8003406:	bd10      	pop	{r4, pc}

08003408 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	46c6      	mov	lr, r8
 800340c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800340e:	4e10      	ldr	r6, [pc, #64]	; (8003450 <SaveEEportsDir+0x48>)
 8003410:	7833      	ldrb	r3, [r6, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8003416:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003418:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800341a:	4698      	mov	r8, r3
 800341c:	4f0d      	ldr	r7, [pc, #52]	; (8003454 <SaveEEportsDir+0x4c>)
 800341e:	e007      	b.n	8003430 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003420:	2c19      	cmp	r4, #25
 8003422:	d901      	bls.n	8003428 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003424:	230a      	movs	r3, #10
 8003426:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003428:	7833      	ldrb	r3, [r6, #0]
 800342a:	b2ec      	uxtb	r4, r5
 800342c:	42a3      	cmp	r3, r4
 800342e:	d30b      	bcc.n	8003448 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003430:	1e63      	subs	r3, r4, #1
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	5af9      	ldrh	r1, [r7, r3]
 8003436:	1c65      	adds	r5, r4, #1
 8003438:	2900      	cmp	r1, #0
 800343a:	d0f1      	beq.n	8003420 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800343c:	b2a8      	uxth	r0, r5
 800343e:	f004 fa2f 	bl	80078a0 <EE_WriteVariable>
 8003442:	e7ed      	b.n	8003420 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	4698      	mov	r8, r3
	}
	
	return result;
}
 8003448:	4640      	mov	r0, r8
 800344a:	bc04      	pop	{r2}
 800344c:	4690      	mov	r8, r2
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	20000008 	.word	0x20000008
 8003454:	20007588 	.word	0x20007588

08003458 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 800345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345c:	4646      	mov	r6, r8
 800345e:	46d6      	mov	lr, sl
 8003460:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 8003462:	4698      	mov	r8, r3
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 8003466:	b5c0      	push	{r6, r7, lr}
 8003468:	4699      	mov	r9, r3
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800346c:	2600      	movs	r6, #0
 800346e:	469a      	mov	sl, r3
 8003470:	e005      	b.n	800347e <SaveEEalias+0x26>
 8003472:	4653      	mov	r3, sl
 8003474:	3601      	adds	r6, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2f6      	uxtb	r6, r6
 800347a:	42b3      	cmp	r3, r6
 800347c:	d325      	bcc.n	80034ca <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 800347e:	464b      	mov	r3, r9
 8003480:	00b4      	lsls	r4, r6, #2
 8003482:	19a4      	adds	r4, r4, r6
 8003484:	0064      	lsls	r4, r4, #1
 8003486:	5d1b      	ldrb	r3, [r3, r4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f2      	beq.n	8003472 <SaveEEalias+0x1a>
 800348c:	4645      	mov	r5, r8
 800348e:	4647      	mov	r7, r8
 8003490:	351c      	adds	r5, #28
 8003492:	3721      	adds	r7, #33	; 0x21
 8003494:	444c      	add	r4, r9
 8003496:	b2ad      	uxth	r5, r5
 8003498:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800349a:	7861      	ldrb	r1, [r4, #1]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	0028      	movs	r0, r5
 80034a2:	3501      	adds	r5, #1
 80034a4:	b289      	uxth	r1, r1
 80034a6:	b2ad      	uxth	r5, r5
 80034a8:	f004 f9fa 	bl	80078a0 <EE_WriteVariable>
 80034ac:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bd      	cmp	r5, r7
 80034b0:	d001      	beq.n	80034b6 <SaveEEalias+0x5e>
 80034b2:	7823      	ldrb	r3, [r4, #0]
 80034b4:	e7f1      	b.n	800349a <SaveEEalias+0x42>
 80034b6:	4643      	mov	r3, r8
 80034b8:	3305      	adds	r3, #5
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034be:	4653      	mov	r3, sl
 80034c0:	3601      	adds	r6, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2f6      	uxtb	r6, r6
 80034c6:	42b3      	cmp	r3, r6
 80034c8:	d2d9      	bcs.n	800347e <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	bc1c      	pop	{r2, r3, r4}
 80034ce:	4690      	mov	r8, r2
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000dfc 	.word	0x20000dfc
 80034dc:	20000008 	.word	0x20000008

080034e0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	46de      	mov	lr, fp
 80034e4:	4657      	mov	r7, sl
 80034e6:	464e      	mov	r6, r9
 80034e8:	4645      	mov	r5, r8
 80034ea:	468b      	mov	fp, r1
 80034ec:	b5e0      	push	{r5, r6, r7, lr}
 80034ee:	001e      	movs	r6, r3
 80034f0:	ab0a      	add	r3, sp, #40	; 0x28
 80034f2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034f4:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034f6:	469a      	mov	sl, r3
 80034f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034fa:	781d      	ldrb	r5, [r3, #0]
 80034fc:	ab0c      	add	r3, sp, #48	; 0x30
 80034fe:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003500:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003502:	4698      	mov	r8, r3
 8003504:	ab0d      	add	r3, sp, #52	; 0x34
 8003506:	781c      	ldrb	r4, [r3, #0]
 8003508:	ab0e      	add	r3, sp, #56	; 0x38
 800350a:	4691      	mov	r9, r2
 800350c:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800350e:	f004 f9c7 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003512:	465b      	mov	r3, fp
 8003514:	0a19      	lsrs	r1, r3, #8
 8003516:	b289      	uxth	r1, r1
 8003518:	20e5      	movs	r0, #229	; 0xe5
 800351a:	f004 f9c1 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800351e:	465b      	mov	r3, fp
 8003520:	20e6      	movs	r0, #230	; 0xe6
 8003522:	b299      	uxth	r1, r3
 8003524:	f004 f9bc 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003528:	464b      	mov	r3, r9
 800352a:	0a19      	lsrs	r1, r3, #8
 800352c:	b289      	uxth	r1, r1
 800352e:	20e7      	movs	r0, #231	; 0xe7
 8003530:	f004 f9b6 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003534:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003536:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003538:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800353a:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800353c:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800353e:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003540:	f004 f9ae 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003544:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003546:	b2b1      	uxth	r1, r6
 8003548:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800354a:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800354c:	f004 f9a8 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003550:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003552:	b2a9      	uxth	r1, r5
 8003554:	20ea      	movs	r0, #234	; 0xea
 8003556:	f004 f9a3 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800355a:	b2a1      	uxth	r1, r4
 800355c:	20eb      	movs	r0, #235	; 0xeb
 800355e:	f004 f99f 	bl	80078a0 <EE_WriteVariable>
	
	return result;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bc3c      	pop	{r2, r3, r4, r5}
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	46ab      	mov	fp, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003570 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003570:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 8003572:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003574:	4c1e      	ldr	r4, [pc, #120]	; (80035f0 <SaveEEparams+0x80>)
 8003576:	0040      	lsls	r0, r0, #1
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	7821      	ldrb	r1, [r4, #0]
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	4319      	orrs	r1, r3
 8003580:	f004 f98e 	bl	80078a0 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003584:	208e      	movs	r0, #142	; 0x8e
 8003586:	7921      	ldrb	r1, [r4, #4]
 8003588:	88e3      	ldrh	r3, [r4, #6]
 800358a:	03c9      	lsls	r1, r1, #15
 800358c:	4319      	orrs	r1, r3
 800358e:	b289      	uxth	r1, r1
 8003590:	0040      	lsls	r0, r0, #1
 8003592:	f004 f985 	bl	80078a0 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003596:	2016      	movs	r0, #22
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <SaveEEparams+0x84>)
 800359a:	30ff      	adds	r0, #255	; 0xff
 800359c:	8821      	ldrh	r1, [r4, #0]
 800359e:	f004 f97f 	bl	80078a0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035a2:	208b      	movs	r0, #139	; 0x8b
 80035a4:	8861      	ldrh	r1, [r4, #2]
 80035a6:	0040      	lsls	r0, r0, #1
 80035a8:	f004 f97a 	bl	80078a0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035ac:	2018      	movs	r0, #24
 80035ae:	7963      	ldrb	r3, [r4, #5]
 80035b0:	7b21      	ldrb	r1, [r4, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4319      	orrs	r1, r3
 80035b6:	30ff      	adds	r0, #255	; 0xff
 80035b8:	f004 f972 	bl	80078a0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035bc:	208c      	movs	r0, #140	; 0x8c
 80035be:	8921      	ldrh	r1, [r4, #8]
 80035c0:	0040      	lsls	r0, r0, #1
 80035c2:	f004 f96d 	bl	80078a0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035c6:	201a      	movs	r0, #26
 80035c8:	8961      	ldrh	r1, [r4, #10]
 80035ca:	30ff      	adds	r0, #255	; 0xff
 80035cc:	f004 f968 	bl	80078a0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035d0:	208d      	movs	r0, #141	; 0x8d
 80035d2:	7b63      	ldrb	r3, [r4, #13]
 80035d4:	7921      	ldrb	r1, [r4, #4]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4319      	orrs	r1, r3
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	f004 f960 	bl	80078a0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035e0:	201c      	movs	r0, #28
 80035e2:	7ea1      	ldrb	r1, [r4, #26]
 80035e4:	30ff      	adds	r0, #255	; 0xff
 80035e6:	f004 f95b 	bl	80078a0 <EE_WriteVariable>
	
	return result;
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20007028 	.word	0x20007028
 80035f4:	200070a8 	.word	0x200070a8

080035f8 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035fc:	4f12      	ldr	r7, [pc, #72]	; (8003648 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 80035fe:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	2100      	movs	r1, #0
 8003604:	0038      	movs	r0, r7
 8003606:	f00f fce7 	bl	8012fd8 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800360a:	4e10      	ldr	r6, [pc, #64]	; (800364c <ClearEEportsDir+0x54>)
 800360c:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800360e:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003614:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003616:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003618:	4698      	mov	r8, r3
 800361a:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800361c:	2c19      	cmp	r4, #25
 800361e:	d901      	bls.n	8003624 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003620:	230a      	movs	r3, #10
 8003622:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003624:	7833      	ldrb	r3, [r6, #0]
 8003626:	b2ec      	uxtb	r4, r5
 8003628:	42a3      	cmp	r3, r4
 800362a:	d309      	bcc.n	8003640 <ClearEEportsDir+0x48>
 800362c:	1e63      	subs	r3, r4, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003632:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003634:	2900      	cmp	r1, #0
 8003636:	d0f1      	beq.n	800361c <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003638:	b2a8      	uxth	r0, r5
 800363a:	f004 f931 	bl	80078a0 <EE_WriteVariable>
 800363e:	e7ed      	b.n	800361c <ClearEEportsDir+0x24>
	}
	
	return result;
}
 8003640:	4640      	mov	r0, r8
 8003642:	bc04      	pop	{r2}
 8003644:	4690      	mov	r8, r2
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	20007588 	.word	0x20007588
 800364c:	20000008 	.word	0x20000008

08003650 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003650:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003652:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003654:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 8003656:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003658:	ad03      	add	r5, sp, #12
 800365a:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800365c:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	002a      	movs	r2, r5
 8003662:	ab06      	add	r3, sp, #24
 8003664:	a905      	add	r1, sp, #20
 8003666:	2001      	movs	r0, #1
 8003668:	f009 f998 	bl	800c99c <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800366c:	aa04      	add	r2, sp, #16
 800366e:	ab08      	add	r3, sp, #32
 8003670:	a907      	add	r1, sp, #28
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	2002      	movs	r0, #2
 8003676:	f009 f991 	bl	800c99c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003680:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003682:	a909      	add	r1, sp, #36	; 0x24
 8003684:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800368a:	f00d fae5 	bl	8010c58 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800368e:	2302      	movs	r3, #2
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003692:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003694:	a909      	add	r1, sp, #36	; 0x24
 8003696:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003698:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369a:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800369c:	f00d fadc 	bl	8010c58 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9805      	ldr	r0, [sp, #20]
 80036a6:	f00d fc77 	bl	8010f98 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fd4a 	bl	800d144 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9808      	ldr	r0, [sp, #32]
 80036b4:	f00d fc6a 	bl	8010f8c <HAL_GPIO_ReadPin>
 80036b8:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036ba:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c0:	8829      	ldrh	r1, [r5, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	f00d fc67 	bl	8010f98 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036ca:	2005      	movs	r0, #5
 80036cc:	f009 fd3a 	bl	800d144 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d0:	8821      	ldrh	r1, [r4, #0]
 80036d2:	9808      	ldr	r0, [sp, #32]
 80036d4:	f00d fc5a 	bl	8010f8c <HAL_GPIO_ReadPin>
 80036d8:	3801      	subs	r0, #1
 80036da:	4243      	negs	r3, r0
 80036dc:	4158      	adcs	r0, r3
			return 1;
 80036de:	b2c0      	uxtb	r0, r0
}
 80036e0:	b00e      	add	sp, #56	; 0x38
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036e4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036e6:	f009 ff75 	bl	800d5d4 <GetUart>
	
	huart->Init.BaudRate =57600;
 80036ea:	23e1      	movs	r3, #225	; 0xe1
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036f6:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 80036f8:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 80036fe:	f00f f847 	bl	8012790 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003702:	2120      	movs	r1, #32
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)

08003710 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003712:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	f7fc fcf5 	bl	8000104 <strcmp>
 800371a:	4243      	negs	r3, r0
 800371c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800371e:	b2c0      	uxtb	r0, r0
 8003720:	bd10      	pop	{r4, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	20000094 	.word	0x20000094

08003728 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46de      	mov	lr, fp
 800372c:	4657      	mov	r7, sl
 800372e:	464e      	mov	r6, r9
 8003730:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003732:	4923      	ldr	r1, [pc, #140]	; (80037c0 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003734:	b5e0      	push	{r5, r6, r7, lr}
 8003736:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003738:	f7fc fce4 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 800373e:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003740:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 8003744:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 8003746:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 800374a:	4f21      	ldr	r7, [pc, #132]	; (80037d0 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 800374c:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800374e:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <IsMathOperator+0xac>)
 8003750:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 8003752:	2e00      	cmp	r6, #0
 8003754:	d028      	beq.n	80037a8 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 8003756:	0039      	movs	r1, r7
 8003758:	0020      	movs	r0, r4
 800375a:	f7fc fcd3 	bl	8000104 <strcmp>
 800375e:	2800      	cmp	r0, #0
 8003760:	d024      	beq.n	80037ac <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 8003762:	4641      	mov	r1, r8
 8003764:	0020      	movs	r0, r4
 8003766:	f7fc fccd 	bl	8000104 <strcmp>
 800376a:	2800      	cmp	r0, #0
 800376c:	d020      	beq.n	80037b0 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 800376e:	4649      	mov	r1, r9
 8003770:	0020      	movs	r0, r4
 8003772:	f7fc fcc7 	bl	8000104 <strcmp>
 8003776:	2800      	cmp	r0, #0
 8003778:	d01c      	beq.n	80037b4 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 800377a:	4651      	mov	r1, sl
 800377c:	0020      	movs	r0, r4
 800377e:	f7fc fcc1 	bl	8000104 <strcmp>
 8003782:	2800      	cmp	r0, #0
 8003784:	d018      	beq.n	80037b8 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 8003786:	4659      	mov	r1, fp
 8003788:	0020      	movs	r0, r4
 800378a:	f7fc fcbb 	bl	8000104 <strcmp>
 800378e:	2800      	cmp	r0, #0
 8003790:	d014      	beq.n	80037bc <IsMathOperator+0x94>
 8003792:	3d01      	subs	r5, #1
 8003794:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003796:	2d00      	cmp	r5, #0
 8003798:	d1db      	bne.n	8003752 <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800379a:	2000      	movs	r0, #0
}
 800379c:	bc3c      	pop	{r2, r3, r4, r5}
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	46a2      	mov	sl, r4
 80037a4:	46ab      	mov	fp, r5
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037a8:	2001      	movs	r0, #1
 80037aa:	e7f7      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER;
 80037ac:	2002      	movs	r0, #2
 80037ae:	e7f5      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e7f3      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037b4:	2004      	movs	r0, #4
 80037b6:	e7f1      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037b8:	2005      	movs	r0, #5
 80037ba:	e7ef      	b.n	800379c <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037bc:	2006      	movs	r0, #6
 80037be:	e7ed      	b.n	800379c <IsMathOperator+0x74>
 80037c0:	08017f18 	.word	0x08017f18
 80037c4:	08017f20 	.word	0x08017f20
 80037c8:	08017f24 	.word	0x08017f24
 80037cc:	08017f28 	.word	0x08017f28
 80037d0:	08017f1c 	.word	0x08017f1c
 80037d4:	08017f2c 	.word	0x08017f2c

080037d8 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037dc:	4e12      	ldr	r6, [pc, #72]	; (8003828 <ExploreNeighbors+0x50>)
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 80037e0:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e2:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037e4:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037e6:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e8:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 80037ea:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037ec:	b082      	sub	sp, #8
		if(port != ignore){
 80037ee:	42a7      	cmp	r7, r4
 80037f0:	d011      	beq.n	8003816 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037f2:	4643      	mov	r3, r8
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 80037fa:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037fc:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037fe:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003800:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003802:	2200      	movs	r2, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	3307      	adds	r3, #7
 800380a:	0020      	movs	r0, r4
 800380c:	f005 febe 	bl	800958c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003810:	200a      	movs	r0, #10
 8003812:	f009 ffa3 	bl	800d75c <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003816:	3401      	adds	r4, #1
 8003818:	b2e4      	uxtb	r4, r4
 800381a:	2c07      	cmp	r4, #7
 800381c:	d1e7      	bne.n	80037ee <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800381e:	2000      	movs	r0, #0
 8003820:	b002      	add	sp, #8
 8003822:	bc04      	pop	{r2}
 8003824:	4690      	mov	r8, r2
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	20000b18 	.word	0x20000b18
 800382c:	20000008 	.word	0x20000008

08003830 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	4657      	mov	r7, sl
 8003834:	464e      	mov	r6, r9
 8003836:	4645      	mov	r5, r8
 8003838:	46de      	mov	lr, fp
 800383a:	b5e0      	push	{r5, r6, r7, lr}
 800383c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800383e:	466a      	mov	r2, sp
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003842:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003844:	781d      	ldrb	r5, [r3, #0]
 8003846:	1deb      	adds	r3, r5, #7
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	469d      	mov	sp, r3
 8003850:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003852:	2d00      	cmp	r5, #0
 8003854:	d00c      	beq.n	8003870 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003856:	2100      	movs	r1, #0
 8003858:	1e6c      	subs	r4, r5, #1
 800385a:	4a46      	ldr	r2, [pc, #280]	; (8003974 <FindBroadcastRoutes+0x144>)
 800385c:	b2e4      	uxtb	r4, r4
 800385e:	3401      	adds	r4, #1
 8003860:	3254      	adds	r2, #84	; 0x54
 8003862:	446c      	add	r4, sp
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003868:	8011      	strh	r1, [r2, #0]
 800386a:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 800386c:	42a3      	cmp	r3, r4
 800386e:	d1f9      	bne.n	8003864 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003870:	2301      	movs	r3, #1
 8003872:	2216      	movs	r2, #22
 8003874:	3801      	subs	r0, #1
 8003876:	5433      	strb	r3, [r6, r0]
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <FindBroadcastRoutes+0x148>)
 800387a:	4342      	muls	r2, r0
 800387c:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <FindBroadcastRoutes+0x144>)
 8003880:	0040      	lsls	r0, r0, #1
 8003882:	1818      	adds	r0, r3, r0
 8003884:	2301      	movs	r3, #1
 8003886:	3202      	adds	r2, #2
 8003888:	4462      	add	r2, ip
 800388a:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 800388c:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 800388e:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003890:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003892:	469a      	mov	sl, r3
 8003894:	46b3      	mov	fp, r6
 8003896:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003898:	8813      	ldrh	r3, [r2, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800389e:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038a0:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038a2:	46a8      	mov	r8, r5
 80038a4:	4665      	mov	r5, ip
 80038a6:	408d      	lsls	r5, r1
 80038a8:	46a9      	mov	r9, r5
 80038aa:	4645      	mov	r5, r8
 80038ac:	464e      	mov	r6, r9
 80038ae:	4335      	orrs	r5, r6
 80038b0:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038b2:	4655      	mov	r5, sl
 80038b4:	445b      	add	r3, fp
 80038b6:	3b01      	subs	r3, #1
 80038b8:	701d      	strb	r5, [r3, #0]
 80038ba:	3101      	adds	r1, #1
 80038bc:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80038be:	2906      	cmp	r1, #6
 80038c0:	d1ea      	bne.n	8003898 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c2:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 80038c4:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c6:	4692      	mov	sl, r2
 80038c8:	465e      	mov	r6, fp
	++level;												// Move one level
 80038ca:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <FindBroadcastRoutes+0x144>)
 80038ce:	687d      	ldr	r5, [r7, #4]
 80038d0:	449a      	add	sl, r3
 80038d2:	4653      	mov	r3, sl
 80038d4:	46a8      	mov	r8, r5
 80038d6:	465d      	mov	r5, fp
 80038d8:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038da:	4643      	mov	r3, r8
		++level;											// Move one level
 80038dc:	3501      	adds	r5, #1
 80038de:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03b      	beq.n	800395c <FindBroadcastRoutes+0x12c>
 80038e4:	1e6b      	subs	r3, r5, #1
 80038e6:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 80038e8:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ea:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038ec:	469c      	mov	ip, r3
 80038ee:	46ab      	mov	fp, r5
 80038f0:	e003      	b.n	80038fa <FindBroadcastRoutes+0xca>
 80038f2:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038f4:	b2d3      	uxtb	r3, r2
 80038f6:	4598      	cmp	r8, r3
 80038f8:	d92c      	bls.n	8003954 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038fa:	5cb3      	ldrb	r3, [r6, r2]
 80038fc:	454b      	cmp	r3, r9
 80038fe:	d1f8      	bne.n	80038f2 <FindBroadcastRoutes+0xc2>
 8003900:	2116      	movs	r1, #22
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <FindBroadcastRoutes+0x14c>)
 8003904:	4351      	muls	r1, r2
 8003906:	469a      	mov	sl, r3
 8003908:	2000      	movs	r0, #0
 800390a:	4451      	add	r1, sl
 800390c:	46e2      	mov	sl, ip
 800390e:	4694      	mov	ip, r2
 8003910:	0055      	lsls	r5, r2, #1
 8003912:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003914:	880b      	ldrh	r3, [r1, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <FindBroadcastRoutes+0x110>
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	3b01      	subs	r3, #1
 800391e:	5cf2      	ldrb	r2, [r6, r3]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d10d      	bne.n	8003940 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003924:	683c      	ldr	r4, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	5b15      	ldrh	r5, [r2, r4]
 800392a:	2201      	movs	r2, #1
 800392c:	4082      	lsls	r2, r0
 800392e:	4315      	orrs	r5, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003934:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003936:	465a      	mov	r2, fp
						++untaged;
 8003938:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 800393a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800393c:	b2e3      	uxtb	r3, r4
 800393e:	469a      	mov	sl, r3
 8003940:	3001      	adds	r0, #1
 8003942:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003944:	2806      	cmp	r0, #6
 8003946:	d1e5      	bne.n	8003914 <FindBroadcastRoutes+0xe4>
 8003948:	4662      	mov	r2, ip
 800394a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800394c:	b2d3      	uxtb	r3, r2
 800394e:	46d4      	mov	ip, sl
 8003950:	4598      	cmp	r8, r3
 8003952:	d8d2      	bhi.n	80038fa <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003954:	4663      	mov	r3, ip
 8003956:	465d      	mov	r5, fp
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1be      	bne.n	80038da <FindBroadcastRoutes+0xaa>
	
	return result;
}
 800395c:	2000      	movs	r0, #0
 800395e:	46bd      	mov	sp, r7
 8003960:	b003      	add	sp, #12
 8003962:	bc3c      	pop	{r2, r3, r4, r5}
 8003964:	4690      	mov	r8, r2
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	46ab      	mov	fp, r5
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000008 	.word	0x20000008
 8003974:	20000b18 	.word	0x20000b18
 8003978:	20000f0c 	.word	0x20000f0c
 800397c:	20000f0e 	.word	0x20000f0e

08003980 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	46de      	mov	lr, fp
 8003984:	464e      	mov	r6, r9
 8003986:	4645      	mov	r5, r8
 8003988:	4657      	mov	r7, sl
 800398a:	b5e0      	push	{r5, r6, r7, lr}
 800398c:	b091      	sub	sp, #68	; 0x44
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 800398e:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003990:	0005      	movs	r5, r0
 8003992:	000e      	movs	r6, r1
 8003994:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003996:	2232      	movs	r2, #50	; 0x32
 8003998:	2100      	movs	r1, #0
 800399a:	0020      	movs	r0, r4
 800399c:	f00f fb1c 	bl	8012fd8 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 80039a0:	221a      	movs	r2, #26
 80039a2:	2100      	movs	r1, #0
 80039a4:	4862      	ldr	r0, [pc, #392]	; (8003b30 <FindRoute+0x1b0>)
 80039a6:	f00f fb17 	bl	8012fd8 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039aa:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039ac:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039ae:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <FindRoute+0x1b4>)
 80039b0:	1e6a      	subs	r2, r5, #1
 80039b2:	469c      	mov	ip, r3
 80039b4:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039b6:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039b8:	7219      	strb	r1, [r3, #8]
 80039ba:	2316      	movs	r3, #22
 80039bc:	4353      	muls	r3, r2
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <FindRoute+0x1b8>)
 80039c0:	3302      	adds	r3, #2
 80039c2:	4693      	mov	fp, r2
 80039c4:	445b      	add	r3, fp
 80039c6:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039c8:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 80039ca:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039cc:	b2b1      	uxth	r1, r6
 80039ce:	8813      	ldrh	r3, [r2, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <FindRoute+0x5c>
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d100      	bne.n	80039dc <FindRoute+0x5c>
 80039da:	e099      	b.n	8003b10 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 80039dc:	3001      	adds	r0, #1
 80039de:	3202      	adds	r2, #2
 80039e0:	2807      	cmp	r0, #7
 80039e2:	d1f4      	bne.n	80039ce <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 80039e4:	4b55      	ldr	r3, [pc, #340]	; (8003b3c <FindRoute+0x1bc>)
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d100      	bne.n	80039f0 <FindRoute+0x70>
 80039ee:	e09a      	b.n	8003b26 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039f0:	2208      	movs	r2, #8
 80039f2:	4462      	add	r2, ip
 80039f4:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039f6:	2200      	movs	r2, #0
 80039f8:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039fa:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039fc:	4692      	mov	sl, r2
 80039fe:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a00:	429d      	cmp	r5, r3
 8003a02:	d005      	beq.n	8003a10 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a04:	4640      	mov	r0, r8
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	18b2      	adds	r2, r6, r2
 8003a0e:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003a10:	3301      	adds	r3, #1
 8003a12:	428b      	cmp	r3, r1
 8003a14:	ddf4      	ble.n	8003a00 <FindRoute+0x80>
 8003a16:	2308      	movs	r3, #8
 8003a18:	4463      	add	r3, ip
	uint8_t u =0;
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003a1e:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003a20:	2300      	movs	r3, #0
		temp &=Q[i];
 8003a22:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003a24:	3301      	adds	r3, #1
		temp &=Q[i];
 8003a26:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	dbfa      	blt.n	8003a22 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d000      	beq.n	8003a32 <FindRoute+0xb2>
 8003a30:	e07c      	b.n	8003b2c <FindRoute+0x1ac>
 8003a32:	4663      	mov	r3, ip
 8003a34:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003a36:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003a38:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d000      	beq.n	8003a40 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003a3e:	20ff      	movs	r0, #255	; 0xff
 8003a40:	2500      	movs	r5, #0
 8003a42:	2300      	movs	r3, #0
 8003a44:	e001      	b.n	8003a4a <FindRoute+0xca>
 8003a46:	4642      	mov	r2, r8
 8003a48:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003a4a:	4290      	cmp	r0, r2
 8003a4c:	d904      	bls.n	8003a58 <FindRoute+0xd8>
 8003a4e:	5ce6      	ldrb	r6, [r4, r3]
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d101      	bne.n	8003a58 <FindRoute+0xd8>
			index =i;
 8003a54:	0010      	movs	r0, r2
 8003a56:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003a58:	3301      	adds	r3, #1
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	dbf3      	blt.n	8003a46 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	3501      	adds	r5, #1
		if(u == desID){
 8003a60:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a62:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003a64:	429d      	cmp	r5, r3
 8003a66:	d023      	beq.n	8003ab0 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003a68:	2301      	movs	r3, #1
 8003a6a:	1e6f      	subs	r7, r5, #1
 8003a6c:	55e3      	strb	r3, [r4, r7]
 8003a6e:	2316      	movs	r3, #22
 8003a70:	465e      	mov	r6, fp
 8003a72:	437b      	muls	r3, r7
 8003a74:	360e      	adds	r6, #14
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	445a      	add	r2, fp
 8003a7a:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7c:	4467      	add	r7, ip
 8003a7e:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a80:	8813      	ldrh	r3, [r2, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003a86:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	5ce0      	ldrb	r0, [r4, r3]
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d109      	bne.n	8003aa6 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a92:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a94:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a96:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a98:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a9a:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a9c:	4281      	cmp	r1, r0
 8003a9e:	d902      	bls.n	8003aa6 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003aa0:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003aa2:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003aa4:	545d      	strb	r5, [r3, r1]
 8003aa6:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003aa8:	42b2      	cmp	r2, r6
 8003aaa:	d1e9      	bne.n	8003a80 <FindRoute+0x100>
 8003aac:	9900      	ldr	r1, [sp, #0]
 8003aae:	e7b6      	b.n	8003a1e <FindRoute+0x9e>
 8003ab0:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	4463      	add	r3, ip
 8003ab6:	5c9a      	ldrb	r2, [r3, r2]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d101      	bne.n	8003ac2 <FindRoute+0x142>
 8003abe:	e00b      	b.n	8003ad8 <FindRoute+0x158>
 8003ac0:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <FindRoute+0x1b0>)
 8003ac4:	1c58      	adds	r0, r3, #1
 8003ac6:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ac8:	4663      	mov	r3, ip
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	3323      	adds	r3, #35	; 0x23
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003ad2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d1f3      	bne.n	8003ac0 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003ad8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ada:	464c      	mov	r4, r9
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	4463      	add	r3, ip
 8003ae0:	8822      	ldrh	r2, [r4, #0]
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d008      	beq.n	8003af8 <FindRoute+0x178>
 8003ae6:	4d12      	ldr	r5, [pc, #72]	; (8003b30 <FindRoute+0x1b0>)
 8003ae8:	79d9      	ldrb	r1, [r3, #7]
 8003aea:	46ac      	mov	ip, r5
 8003aec:	4461      	add	r1, ip
 8003aee:	3901      	subs	r1, #1
 8003af0:	7809      	ldrb	r1, [r1, #0]
 8003af2:	08d2      	lsrs	r2, r2, #3
 8003af4:	4291      	cmp	r1, r2
 8003af6:	d014      	beq.n	8003b22 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003af8:	3001      	adds	r0, #1
 8003afa:	3402      	adds	r4, #2
 8003afc:	2807      	cmp	r0, #7
 8003afe:	d1ef      	bne.n	8003ae0 <FindRoute+0x160>
	return 0;
 8003b00:	2000      	movs	r0, #0
}
 8003b02:	b011      	add	sp, #68	; 0x44
 8003b04:	bc3c      	pop	{r2, r3, r4, r5}
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	46ab      	mov	fp, r5
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	000b      	movs	r3, r1
 8003b16:	4463      	add	r3, ip
 8003b18:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <FindRoute+0x1b0>)
			return col;
 8003b1c:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003b1e:	7019      	strb	r1, [r3, #0]
			return col;
 8003b20:	e7ef      	b.n	8003b02 <FindRoute+0x182>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e7ed      	b.n	8003b02 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003b26:	425b      	negs	r3, r3
 8003b28:	2500      	movs	r5, #0
 8003b2a:	e7c2      	b.n	8003ab2 <FindRoute+0x132>
 8003b2c:	1e6b      	subs	r3, r5, #1
 8003b2e:	e7c0      	b.n	8003ab2 <FindRoute+0x132>
 8003b30:	200071bc 	.word	0x200071bc
 8003b34:	20000b98 	.word	0x20000b98
 8003b38:	20000f0c 	.word	0x20000f0c
 8003b3c:	20000008 	.word	0x20000008

08003b40 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	4657      	mov	r7, sl
 8003b44:	464e      	mov	r6, r9
 8003b46:	46de      	mov	lr, fp
 8003b48:	4645      	mov	r5, r8
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 8003b4e:	4c3d      	ldr	r4, [pc, #244]	; (8003c44 <remoteBootloaderUpdate+0x104>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b50:	b085      	sub	sp, #20
 8003b52:	4682      	mov	sl, r0
	myOutport =FindRoute(myID,dst);
 8003b54:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b56:	4688      	mov	r8, r1
 8003b58:	0017      	movs	r7, r2
	myOutport =FindRoute(myID,dst);
 8003b5a:	f7ff ff11 	bl	8003980 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b5e:	464b      	mov	r3, r9
	myOutport =FindRoute(myID,dst);
 8003b60:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d126      	bne.n	8003bb4 <remoteBootloaderUpdate+0x74>
		if(NumberOfHops(dst)== 1)
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <remoteBootloaderUpdate+0x108>)
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	4443      	add	r3, r8
 8003b6c:	79da      	ldrb	r2, [r3, #7]
 8003b6e:	2a01      	cmp	r2, #1
 8003b70:	d04e      	beq.n	8003c10 <remoteBootloaderUpdate+0xd0>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <remoteBootloaderUpdate+0x10c>)
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	3b01      	subs	r3, #1
 8003b78:	781d      	ldrb	r5, [r3, #0]
	if(src == myID){
 8003b7a:	458a      	cmp	sl, r1
 8003b7c:	d120      	bne.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003b7e:	f009 fef9 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
 8003b82:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <remoteBootloaderUpdate+0x110>)
 8003b86:	4642      	mov	r2, r8
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	4658      	mov	r0, fp
 8003b8c:	f00f fc1e 	bl	80133cc <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <remoteBootloaderUpdate+0x114>)
 8003b92:	4658      	mov	r0, fp
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	f00f fc39 	bl	801340c <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003b9a:	4658      	mov	r0, fp
 8003b9c:	f7fc fabc 	bl	8000118 <strlen>
 8003ba0:	2332      	movs	r3, #50	; 0x32
 8003ba2:	b282      	uxth	r2, r0
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	0038      	movs	r0, r7
 8003ba8:	f009 fcbe 	bl	800d528 <writePxITMutex>
		Delay_ms(100);
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	f00b fd59 	bl	800f664 <HAL_Delay>
 8003bb2:	e005      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003bb4:	7825      	ldrb	r5, [r4, #0]
 8003bb6:	4545      	cmp	r5, r8
 8003bb8:	d026      	beq.n	8003c08 <remoteBootloaderUpdate+0xc8>
	if(src == myID){
 8003bba:	4555      	cmp	r5, sl
 8003bbc:	d02c      	beq.n	8003c18 <remoteBootloaderUpdate+0xd8>
	uint8_t myOutport =0, lastModule =0;
 8003bbe:	2500      	movs	r5, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003bc0:	0038      	movs	r0, r7
 8003bc2:	f7ff fd8f 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003bc6:	0030      	movs	r0, r6
 8003bc8:	f7ff fd8c 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	42a9      	cmp	r1, r5
 8003bd0:	d012      	beq.n	8003bf8 <remoteBootloaderUpdate+0xb8>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	0032      	movs	r2, r6
 8003be2:	000b      	movs	r3, r1
 8003be4:	0038      	movs	r0, r7
 8003be6:	f005 ff55 	bl	8009a94 <StartScastDMAStream>
}
 8003bea:	b005      	add	sp, #20
 8003bec:	bc3c      	pop	{r2, r3, r4, r5}
 8003bee:	4690      	mov	r8, r2
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	46ab      	mov	fp, r5
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f009 fceb 	bl	800d5d4 <GetUart>
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f009 fcf4 	bl	800d5ec <SwapUartPins>
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	e7e4      	b.n	8003bd2 <remoteBootloaderUpdate+0x92>
	if(src == myID){
 8003c08:	4555      	cmp	r5, sl
 8003c0a:	d016      	beq.n	8003c3a <remoteBootloaderUpdate+0xfa>
 8003c0c:	464e      	mov	r6, r9
 8003c0e:	e7d7      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
 8003c10:	458a      	cmp	sl, r1
 8003c12:	d00d      	beq.n	8003c30 <remoteBootloaderUpdate+0xf0>
 8003c14:	000d      	movs	r5, r1
 8003c16:	e7d3      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c18:	f009 feac 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
	uint8_t myOutport =0, lastModule =0;
 8003c1c:	2500      	movs	r5, #0
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c1e:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <remoteBootloaderUpdate+0x118>)
 8003c22:	4642      	mov	r2, r8
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	4658      	mov	r0, fp
 8003c28:	464b      	mov	r3, r9
 8003c2a:	f00f fbcf 	bl	80133cc <sprintf>
 8003c2e:	e7af      	b.n	8003b90 <remoteBootloaderUpdate+0x50>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c30:	f009 fea0 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
 8003c34:	4655      	mov	r5, sl
 8003c36:	4683      	mov	fp, r0
 8003c38:	e7a4      	b.n	8003b84 <remoteBootloaderUpdate+0x44>
 8003c3a:	f009 fe9b 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
 8003c3e:	464e      	mov	r6, r9
 8003c40:	4683      	mov	fp, r0
 8003c42:	e7ed      	b.n	8003c20 <remoteBootloaderUpdate+0xe0>
 8003c44:	20000a98 	.word	0x20000a98
 8003c48:	20000b98 	.word	0x20000b98
 8003c4c:	200071bc 	.word	0x200071bc
 8003c50:	20000090 	.word	0x20000090
 8003c54:	20000088 	.word	0x20000088
 8003c58:	2000008c 	.word	0x2000008c

08003c5c <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003c62:	4645      	mov	r5, r8
 8003c64:	464e      	mov	r6, r9
 8003c66:	46de      	mov	lr, fp
 8003c68:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c6a:	3440      	adds	r4, #64	; 0x40
 8003c6c:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003c6e:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c70:	4698      	mov	r8, r3
 8003c72:	4b58      	ldr	r3, [pc, #352]	; (8003dd4 <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003c74:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c76:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c78:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c7a:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c7c:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003c7e:	b085      	sub	sp, #20
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c84:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c86:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c88:	0021      	movs	r1, r4
 8003c8a:	2332      	movs	r3, #50	; 0x32
 8003c8c:	9500      	str	r5, [sp, #0]
 8003c8e:	2211      	movs	r2, #17
 8003c90:	0038      	movs	r0, r7
 8003c92:	f009 fc17 	bl	800d4c4 <writePxMutex>
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <DisplayTopology+0x17c>)
 8003c98:	2601      	movs	r6, #1
 8003c9a:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c9c:	0032      	movs	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f00f fb93 	bl	80133cc <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f7fc fa36 	bl	8000118 <strlen>
 8003cac:	3601      	adds	r6, #1
 8003cae:	b282      	uxth	r2, r0
 8003cb0:	9500      	str	r5, [sp, #0]
 8003cb2:	2332      	movs	r3, #50	; 0x32
 8003cb4:	0021      	movs	r1, r4
 8003cb6:	0038      	movs	r0, r7
 8003cb8:	f009 fc04 	bl	800d4c4 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cbc:	2e07      	cmp	r6, #7
 8003cbe:	d1ed      	bne.n	8003c9c <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cc0:	2332      	movs	r3, #50	; 0x32
 8003cc2:	9500      	str	r5, [sp, #0]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4945      	ldr	r1, [pc, #276]	; (8003ddc <DisplayTopology+0x180>)
 8003cc8:	0038      	movs	r0, r7
 8003cca:	f009 fbfb 	bl	800d4c4 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cce:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <DisplayTopology+0x184>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d06c      	beq.n	8003db0 <DisplayTopology+0x154>
 8003cd6:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <DisplayTopology+0x188>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cd8:	4645      	mov	r5, r8
 8003cda:	469b      	mov	fp, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cdc:	2301      	movs	r3, #1
 8003cde:	425b      	negs	r3, r3
 8003ce0:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <DisplayTopology+0x18c>)
	for(uint8_t row =0; row < N; row++){
 8003ce4:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce6:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"%d\t",0);
 8003ce8:	4b40      	ldr	r3, [pc, #256]	; (8003dec <DisplayTopology+0x190>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cea:	3540      	adds	r5, #64	; 0x40
				sprintf(pcUserMessage,"%d\t",0);
 8003cec:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cee:	1c63      	adds	r3, r4, #1
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	493f      	ldr	r1, [pc, #252]	; (8003df0 <DisplayTopology+0x194>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	f00f fb68 	bl	80133cc <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f7fc fa0b 	bl	8000118 <strlen>
 8003d02:	4643      	mov	r3, r8
 8003d04:	b282      	uxth	r2, r0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	0029      	movs	r1, r5
 8003d0a:	2332      	movs	r3, #50	; 0x32
 8003d0c:	0038      	movs	r0, r7
 8003d0e:	f009 fbd9 	bl	800d4c4 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d12:	2316      	movs	r3, #22
 8003d14:	435c      	muls	r4, r3
 8003d16:	465b      	mov	r3, fp
 8003d18:	5b1b      	ldrh	r3, [r3, r4]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	0059      	lsls	r1, r3, #1
 8003d1e:	18c9      	adds	r1, r1, r3
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <DisplayTopology+0x198>)
 8003d22:	0049      	lsls	r1, r1, #1
 8003d24:	469c      	mov	ip, r3
 8003d26:	0028      	movs	r0, r5
 8003d28:	4461      	add	r1, ip
 8003d2a:	f00f fba4 	bl	8013476 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d2e:	4643      	mov	r3, r8
 8003d30:	2205      	movs	r2, #5
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	0029      	movs	r1, r5
 8003d36:	2332      	movs	r3, #50	; 0x32
 8003d38:	0038      	movs	r0, r7
 8003d3a:	f009 fbc3 	bl	800d4c4 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d3e:	4643      	mov	r3, r8
 8003d40:	2201      	movs	r2, #1
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	492c      	ldr	r1, [pc, #176]	; (8003df8 <DisplayTopology+0x19c>)
 8003d46:	2332      	movs	r3, #50	; 0x32
 8003d48:	0038      	movs	r0, r7
 8003d4a:	f009 fbbb 	bl	800d4c4 <writePxMutex>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	1ca6      	adds	r6, r4, #2
 8003d52:	330e      	adds	r3, #14
 8003d54:	445e      	add	r6, fp
 8003d56:	191c      	adds	r4, r3, r4
 8003d58:	e011      	b.n	8003d7e <DisplayTopology+0x122>
				sprintf(pcUserMessage,"%d\t",0);
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	f00f fb35 	bl	80133cc <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d62:	0028      	movs	r0, r5
 8003d64:	f7fc f9d8 	bl	8000118 <strlen>
 8003d68:	4643      	mov	r3, r8
 8003d6a:	b282      	uxth	r2, r0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	0029      	movs	r1, r5
 8003d70:	2332      	movs	r3, #50	; 0x32
 8003d72:	0038      	movs	r0, r7
 8003d74:	3602      	adds	r6, #2
 8003d76:	f009 fba5 	bl	800d4c4 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d00a      	beq.n	8003d94 <DisplayTopology+0x138>
			if(!array[row][col])
 8003d7e:	8832      	ldrh	r2, [r6, #0]
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d0ea      	beq.n	8003d5a <DisplayTopology+0xfe>
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d84:	2307      	movs	r3, #7
 8003d86:	4651      	mov	r1, sl
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0028      	movs	r0, r5
 8003d8c:	08d2      	lsrs	r2, r2, #3
 8003d8e:	f00f fb1d 	bl	80133cc <sprintf>
 8003d92:	e7e6      	b.n	8003d62 <DisplayTopology+0x106>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d94:	4643      	mov	r3, r8
 8003d96:	2202      	movs	r2, #2
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4918      	ldr	r1, [pc, #96]	; (8003dfc <DisplayTopology+0x1a0>)
 8003d9c:	2332      	movs	r3, #50	; 0x32
 8003d9e:	0038      	movs	r0, r7
 8003da0:	f009 fb90 	bl	800d4c4 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003da4:	466b      	mov	r3, sp
 8003da6:	7b1c      	ldrb	r4, [r3, #12]
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <DisplayTopology+0x184>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d89e      	bhi.n	8003cee <DisplayTopology+0x92>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003db0:	2301      	movs	r3, #1
 8003db2:	425b      	negs	r3, r3
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	3333      	adds	r3, #51	; 0x33
 8003dba:	4911      	ldr	r1, [pc, #68]	; (8003e00 <DisplayTopology+0x1a4>)
 8003dbc:	0038      	movs	r0, r7
 8003dbe:	f009 fb81 	bl	800d4c4 <writePxMutex>
}
 8003dc2:	b005      	add	sp, #20
 8003dc4:	bc3c      	pop	{r2, r3, r4, r5}
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	46a2      	mov	sl, r4
 8003dcc:	46ab      	mov	fp, r5
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	20000b98 	.word	0x20000b98
 8003dd4:	08017f30 	.word	0x08017f30
 8003dd8:	08017f44 	.word	0x08017f44
 8003ddc:	08018bb8 	.word	0x08018bb8
 8003de0:	20000008 	.word	0x20000008
 8003de4:	20000f0c 	.word	0x20000f0c
 8003de8:	08017f5c 	.word	0x08017f5c
 8003dec:	08017f58 	.word	0x08017f58
 8003df0:	08017f4c 	.word	0x08017f4c
 8003df4:	0801781c 	.word	0x0801781c
 8003df8:	08017f40 	.word	0x08017f40
 8003dfc:	08018068 	.word	0x08018068
 8003e00:	080195cc 	.word	0x080195cc

08003e04 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	4645      	mov	r5, r8
 8003e08:	46de      	mov	lr, fp
 8003e0a:	4657      	mov	r7, sl
 8003e0c:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e0e:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e10:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e12:	3140      	adds	r1, #64	; 0x40
 8003e14:	000a      	movs	r2, r1
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e18:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e1a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e1c:	c231      	stmia	r2!, {r0, r4, r5}
 8003e1e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e20:	c231      	stmia	r2!, {r0, r4, r5}
 8003e22:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e24:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e26:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e28:	2301      	movs	r3, #1
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	221b      	movs	r2, #27
 8003e30:	3333      	adds	r3, #51	; 0x33
 8003e32:	4650      	mov	r0, sl
 8003e34:	f009 fb46 	bl	800d4c4 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d035      	beq.n	8003eac <DisplayPortsDir+0xa8>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4699      	mov	r9, r3
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <DisplayPortsDir+0xe8>)
 8003e46:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <DisplayPortsDir+0xec>)
 8003e4a:	469b      	mov	fp, r3
 8003e4c:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e4e:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e50:	4f23      	ldr	r7, [pc, #140]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003e52:	1e5d      	subs	r5, r3, #1
 8003e54:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003e56:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e58:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e5a:	3740      	adds	r7, #64	; 0x40
 8003e5c:	e002      	b.n	8003e64 <DisplayPortsDir+0x60>
 8003e5e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e60:	2c0a      	cmp	r4, #10
 8003e62:	d01b      	beq.n	8003e9c <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e64:	0031      	movs	r1, r6
 8003e66:	4642      	mov	r2, r8
 8003e68:	4119      	asrs	r1, r3
 8003e6a:	5b52      	ldrh	r2, [r2, r5]
 8003e6c:	1c5c      	adds	r4, r3, #1
 8003e6e:	4211      	tst	r1, r2
 8003e70:	d0f5      	beq.n	8003e5e <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e72:	0023      	movs	r3, r4
 8003e74:	464a      	mov	r2, r9
 8003e76:	4659      	mov	r1, fp
 8003e78:	0038      	movs	r0, r7
 8003e7a:	f00f faa7 	bl	80133cc <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e7e:	0038      	movs	r0, r7
 8003e80:	f7fc f94a 	bl	8000118 <strlen>
 8003e84:	2301      	movs	r3, #1
 8003e86:	425b      	negs	r3, r3
 8003e88:	b282      	uxth	r2, r0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	0039      	movs	r1, r7
 8003e8e:	3333      	adds	r3, #51	; 0x33
 8003e90:	4650      	mov	r0, sl
 8003e92:	f009 fb17 	bl	800d4c4 <writePxMutex>
 8003e96:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e98:	2c0a      	cmp	r4, #10
 8003e9a:	d1e3      	bne.n	8003e64 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	454b      	cmp	r3, r9
 8003eaa:	d2cf      	bcs.n	8003e4c <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003eac:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <DisplayPortsDir+0xf0>)
 8003eb0:	3140      	adds	r1, #64	; 0x40
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eb6:	c231      	stmia	r2!, {r0, r4, r5}
 8003eb8:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eba:	c231      	stmia	r2!, {r0, r4, r5}
 8003ebc:	cb11      	ldmia	r3!, {r0, r4}
 8003ebe:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	221f      	movs	r2, #31
 8003ec8:	3333      	adds	r3, #51	; 0x33
 8003eca:	4650      	mov	r0, sl
 8003ecc:	f009 fafa 	bl	800d4c4 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ed4:	4690      	mov	r8, r2
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	46a2      	mov	sl, r4
 8003eda:	46ab      	mov	fp, r5
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000b98 	.word	0x20000b98
 8003ee4:	08017f64 	.word	0x08017f64
 8003ee8:	20000008 	.word	0x20000008
 8003eec:	20007588 	.word	0x20007588
 8003ef0:	08017f80 	.word	0x08017f80
 8003ef4:	08017f94 	.word	0x08017f94

08003ef8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	46de      	mov	lr, fp
 8003efc:	464e      	mov	r6, r9
 8003efe:	4645      	mov	r5, r8
 8003f00:	4657      	mov	r7, sl
 8003f02:	b5e0      	push	{r5, r6, r7, lr}
 8003f04:	b085      	sub	sp, #20
 8003f06:	9002      	str	r0, [sp, #8]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f08:	f009 fd34 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f0c:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f0e:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f10:	4d97      	ldr	r5, [pc, #604]	; (8004170 <DisplayModuleStatus+0x278>)
	strcpy((char* )pcOutputString,"");
 8003f12:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f14:	4b97      	ldr	r3, [pc, #604]	; (8004174 <DisplayModuleStatus+0x27c>)
 8003f16:	3540      	adds	r5, #64	; 0x40
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	4997      	ldr	r1, [pc, #604]	; (8004178 <DisplayModuleStatus+0x280>)
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	469a      	mov	sl, r3
 8003f20:	f00f fa54 	bl	80133cc <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f24:	0029      	movs	r1, r5
 8003f26:	0020      	movs	r0, r4
 8003f28:	f00f fa70 	bl	801340c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <DisplayModuleStatus+0x284>)
 8003f2e:	4994      	ldr	r1, [pc, #592]	; (8004180 <DisplayModuleStatus+0x288>)
 8003f30:	7c1a      	ldrb	r2, [r3, #16]
 8003f32:	0028      	movs	r0, r5
 8003f34:	4698      	mov	r8, r3
 8003f36:	f00f fa49 	bl	80133cc <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f3a:	0029      	movs	r1, r5
 8003f3c:	0020      	movs	r0, r4
 8003f3e:	f00f fa65 	bl	801340c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f42:	2305      	movs	r3, #5
 8003f44:	2200      	movs	r2, #0
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	498e      	ldr	r1, [pc, #568]	; (8004184 <DisplayModuleStatus+0x28c>)
 8003f4a:	3b03      	subs	r3, #3
 8003f4c:	0028      	movs	r0, r5
 8003f4e:	f00f fa3d 	bl	80133cc <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f52:	0029      	movs	r1, r5
 8003f54:	0020      	movs	r0, r4
 8003f56:	f00f fa59 	bl	801340c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f5a:	4a8b      	ldr	r2, [pc, #556]	; (8004188 <DisplayModuleStatus+0x290>)
 8003f5c:	498b      	ldr	r1, [pc, #556]	; (800418c <DisplayModuleStatus+0x294>)
 8003f5e:	0028      	movs	r0, r5
 8003f60:	f00f fa34 	bl	80133cc <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f64:	0029      	movs	r1, r5
 8003f66:	0020      	movs	r0, r4
 8003f68:	f00f fa50 	bl	801340c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f6c:	4a88      	ldr	r2, [pc, #544]	; (8004190 <DisplayModuleStatus+0x298>)
 8003f6e:	4989      	ldr	r1, [pc, #548]	; (8004194 <DisplayModuleStatus+0x29c>)
 8003f70:	0028      	movs	r0, r5
 8003f72:	f00f fa2b 	bl	80133cc <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f76:	0029      	movs	r1, r5
 8003f78:	0020      	movs	r0, r4
 8003f7a:	f00f fa47 	bl	801340c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f7e:	002a      	movs	r2, r5
 8003f80:	4b85      	ldr	r3, [pc, #532]	; (8004198 <DisplayModuleStatus+0x2a0>)
 8003f82:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f84:	c243      	stmia	r2!, {r0, r1, r6}
 8003f86:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8e:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f90:	8091      	strh	r1, [r2, #4]
 8003f92:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f94:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f96:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f98:	f00f fa38 	bl	801340c <strcat>
 8003f9c:	4b7f      	ldr	r3, [pc, #508]	; (800419c <DisplayModuleStatus+0x2a4>)
 8003f9e:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003fa0:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <DisplayModuleStatus+0x2a8>)
 8003fa2:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8003fa4:	0032      	movs	r2, r6
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	0028      	movs	r0, r5
 8003faa:	f00f fa0f 	bl	80133cc <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fae:	0029      	movs	r1, r5
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f00f fa2b 	bl	801340c <strcat>
		switch(portStatus[i]){
 8003fb6:	4643      	mov	r3, r8
 8003fb8:	3314      	adds	r3, #20
 8003fba:	5cf3      	ldrb	r3, [r6, r3]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d80b      	bhi.n	8003fd8 <DisplayModuleStatus+0xe0>
 8003fc0:	465a      	mov	r2, fp
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	58d3      	ldr	r3, [r2, r3]
 8003fc6:	469f      	mov	pc, r3
				break;
			case STREAM:
				sprintf(pcUserMessage,"Streaming\n\r");
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fc8:	002a      	movs	r2, r5
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <DisplayModuleStatus+0x2ac>)
 8003fcc:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fce:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd0:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fd2:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	8013      	strh	r3, [r2, #0]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fd8:	0029      	movs	r1, r5
 8003fda:	0020      	movs	r0, r4
 8003fdc:	3601      	adds	r6, #1
 8003fde:	f00f fa15 	bl	801340c <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003fe2:	2e07      	cmp	r6, #7
 8003fe4:	d1de      	bne.n	8003fa4 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fe6:	002a      	movs	r2, r5
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003fea:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fec:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fee:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff2:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f00f fa08 	bl	801340c <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <DisplayModuleStatus+0x2b4>)
 8003ffe:	4e6c      	ldr	r6, [pc, #432]	; (80041b0 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004000:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004002:	469b      	mov	fp, r3
 8004004:	e01d      	b.n	8004042 <DisplayModuleStatus+0x14a>
 8004006:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004008:	f007 fb7a 	bl	800b700 <GetPort>
 800400c:	465a      	mov	r2, fp
 800400e:	00ab      	lsls	r3, r5, #2
 8004010:	3b04      	subs	r3, #4
 8004012:	0004      	movs	r4, r0
 8004014:	58d0      	ldr	r0, [r2, r3]
 8004016:	f007 fb73 	bl	800b700 <GetPort>
 800401a:	2340      	movs	r3, #64	; 0x40
 800401c:	4699      	mov	r9, r3
 800401e:	4b54      	ldr	r3, [pc, #336]	; (8004170 <DisplayModuleStatus+0x278>)
 8004020:	002a      	movs	r2, r5
 8004022:	469c      	mov	ip, r3
 8004024:	44e1      	add	r9, ip
 8004026:	9000      	str	r0, [sp, #0]
 8004028:	0023      	movs	r3, r4
 800402a:	4962      	ldr	r1, [pc, #392]	; (80041b4 <DisplayModuleStatus+0x2bc>)
 800402c:	4648      	mov	r0, r9
 800402e:	f00f f9cd 	bl	80133cc <sprintf>
 8004032:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004034:	4649      	mov	r1, r9
 8004036:	4640      	mov	r0, r8
 8004038:	f00f f9e8 	bl	801340c <strcat>
 800403c:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403e:	2d07      	cmp	r5, #7
 8004040:	d011      	beq.n	8004066 <DisplayModuleStatus+0x16e>
		if(streamDMA[i - 1].Instance == 0){
 8004042:	6833      	ldr	r3, [r6, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1de      	bne.n	8004006 <DisplayModuleStatus+0x10e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004048:	4c49      	ldr	r4, [pc, #292]	; (8004170 <DisplayModuleStatus+0x278>)
 800404a:	002a      	movs	r2, r5
 800404c:	3440      	adds	r4, #64	; 0x40
 800404e:	495a      	ldr	r1, [pc, #360]	; (80041b8 <DisplayModuleStatus+0x2c0>)
 8004050:	0020      	movs	r0, r4
 8004052:	f00f f9bb 	bl	80133cc <sprintf>
 8004056:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004058:	0021      	movs	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f00f f9d6 	bl	801340c <strcat>
 8004060:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004062:	2d07      	cmp	r5, #7
 8004064:	d1ed      	bne.n	8004042 <DisplayModuleStatus+0x14a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004066:	4640      	mov	r0, r8
 8004068:	f7fc f856 	bl	8000118 <strlen>
 800406c:	4644      	mov	r4, r8
 800406e:	0005      	movs	r5, r0
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
	temp =strlen((char* )pcOutputString);
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004070:	2680      	movs	r6, #128	; 0x80
	strcat((char* )pcOutputString,"\n\r");
 8004072:	4b52      	ldr	r3, [pc, #328]	; (80041bc <DisplayModuleStatus+0x2c4>)
 8004074:	2202      	movs	r2, #2
 8004076:	0019      	movs	r1, r3
 8004078:	1820      	adds	r0, r4, r0
 800407a:	4699      	mov	r9, r3
 800407c:	f00e ffa3 	bl	8012fc6 <memcpy>
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004080:	1ca8      	adds	r0, r5, #2
 8004082:	221d      	movs	r2, #29
 8004084:	1820      	adds	r0, r4, r0
 8004086:	494e      	ldr	r1, [pc, #312]	; (80041c0 <DisplayModuleStatus+0x2c8>)
 8004088:	f00e ff9d 	bl	8012fc6 <memcpy>
 800408c:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <DisplayModuleStatus+0x2cc>)
		{
			sprintf(pcUserMessage,"P%d ",p);
 800408e:	4f38      	ldr	r7, [pc, #224]	; (8004170 <DisplayModuleStatus+0x278>)
 8004090:	4698      	mov	r8, r3
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <DisplayModuleStatus+0x2d0>)
	temp =strlen((char* )pcOutputString);
 8004094:	351e      	adds	r5, #30
 8004096:	9503      	str	r5, [sp, #12]
 8004098:	2200      	movs	r2, #0
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409a:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 800409c:	469b      	mov	fp, r3
 800409e:	3740      	adds	r7, #64	; 0x40
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1b0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d016      	beq.n	80040d6 <DisplayModuleStatus+0x1de>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a8:	4653      	mov	r3, sl
 80040aa:	4641      	mov	r1, r8
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	1c55      	adds	r5, r2, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	5acb      	ldrh	r3, [r1, r3]
 80040b6:	0031      	movs	r1, r6
 80040b8:	4111      	asrs	r1, r2
 80040ba:	4219      	tst	r1, r3
 80040bc:	d0f1      	beq.n	80040a2 <DisplayModuleStatus+0x1aa>
			sprintf(pcUserMessage,"P%d ",p);
 80040be:	002a      	movs	r2, r5
 80040c0:	4659      	mov	r1, fp
 80040c2:	0038      	movs	r0, r7
 80040c4:	f00f f982 	bl	80133cc <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c8:	0039      	movs	r1, r7
 80040ca:	0020      	movs	r0, r4
 80040cc:	f00f f99e 	bl	801340c <strcat>
 80040d0:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040d2:	2d06      	cmp	r5, #6
 80040d4:	d1e8      	bne.n	80040a8 <DisplayModuleStatus+0x1b0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d6:	0020      	movs	r0, r4
 80040d8:	f7fc f81e 	bl	8000118 <strlen>
 80040dc:	466b      	mov	r3, sp
 80040de:	899b      	ldrh	r3, [r3, #12]
 80040e0:	0005      	movs	r5, r0
 80040e2:	1820      	adds	r0, r4, r0
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	d03c      	beq.n	8004162 <DisplayModuleStatus+0x26a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e8:	2203      	movs	r2, #3
 80040ea:	4649      	mov	r1, r9
 80040ec:	f00e ff6b 	bl	8012fc6 <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b02      	ldr	r3, [sp, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80040f6:	0020      	movs	r0, r4
 80040f8:	f7fc f80e 	bl	8000118 <strlen>
 80040fc:	2301      	movs	r3, #1
 80040fe:	425b      	negs	r3, r3
 8004100:	b282      	uxth	r2, r0
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	0021      	movs	r1, r4
 8004106:	3333      	adds	r3, #51	; 0x33
 8004108:	9802      	ldr	r0, [sp, #8]
 800410a:	f009 f9db 	bl	800d4c4 <writePxMutex>
	
}
 800410e:	b005      	add	sp, #20
 8004110:	bc3c      	pop	{r2, r3, r4, r5}
 8004112:	4690      	mov	r8, r2
 8004114:	4699      	mov	r9, r3
 8004116:	46a2      	mov	sl, r4
 8004118:	46ab      	mov	fp, r5
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 800411c:	002a      	movs	r2, r5
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <DisplayModuleStatus+0x2d4>)
 8004120:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004122:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004124:	e758      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004126:	002a      	movs	r2, r5
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <DisplayModuleStatus+0x2d8>)
 800412a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800412c:	c283      	stmia	r2!, {r0, r1, r7}
 800412e:	cb03      	ldmia	r3!, {r0, r1}
 8004130:	c203      	stmia	r2!, {r0, r1}
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	7013      	strb	r3, [r2, #0]
				break;
 8004136:	e74f      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004138:	002b      	movs	r3, r5
 800413a:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <DisplayModuleStatus+0x2dc>)
 800413c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800413e:	c383      	stmia	r3!, {r0, r1, r7}
 8004140:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004142:	c383      	stmia	r3!, {r0, r1, r7}
 8004144:	6811      	ldr	r1, [r2, #0]
 8004146:	6019      	str	r1, [r3, #0]
 8004148:	8891      	ldrh	r1, [r2, #4]
 800414a:	8099      	strh	r1, [r3, #4]
 800414c:	7992      	ldrb	r2, [r2, #6]
 800414e:	719a      	strb	r2, [r3, #6]
				break;
 8004150:	e742      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Free\n\r");
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <DisplayModuleStatus+0x2e0>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	602a      	str	r2, [r5, #0]
 8004158:	889a      	ldrh	r2, [r3, #4]
 800415a:	80aa      	strh	r2, [r5, #4]
 800415c:	799b      	ldrb	r3, [r3, #6]
 800415e:	71ab      	strb	r3, [r5, #6]
				break;
 8004160:	e73a      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
		strcat((char* )pcOutputString,"None");
 8004162:	2205      	movs	r2, #5
 8004164:	491d      	ldr	r1, [pc, #116]	; (80041dc <DisplayModuleStatus+0x2e4>)
 8004166:	f00e ff2e 	bl	8012fc6 <memcpy>
 800416a:	1d28      	adds	r0, r5, #4
 800416c:	1820      	adds	r0, r4, r0
 800416e:	e7bb      	b.n	80040e8 <DisplayModuleStatus+0x1f0>
 8004170:	20000b98 	.word	0x20000b98
 8004174:	20000a98 	.word	0x20000a98
 8004178:	08017fb4 	.word	0x08017fb4
 800417c:	20000c18 	.word	0x20000c18
 8004180:	08017fd0 	.word	0x08017fd0
 8004184:	08017fec 	.word	0x08017fec
 8004188:	0801800c 	.word	0x0801800c
 800418c:	08018018 	.word	0x08018018
 8004190:	08018030 	.word	0x08018030
 8004194:	0801803c 	.word	0x0801803c
 8004198:	08018058 	.word	0x08018058
 800419c:	0801806c 	.word	0x0801806c
 80041a0:	08017770 	.word	0x08017770
 80041a4:	080180a0 	.word	0x080180a0
 80041a8:	080180dc 	.word	0x080180dc
 80041ac:	2000132c 	.word	0x2000132c
 80041b0:	20001e78 	.word	0x20001e78
 80041b4:	08018110 	.word	0x08018110
 80041b8:	080180f4 	.word	0x080180f4
 80041bc:	08018068 	.word	0x08018068
 80041c0:	08018140 	.word	0x08018140
 80041c4:	20007588 	.word	0x20007588
 80041c8:	08018160 	.word	0x08018160
 80041cc:	08018094 	.word	0x08018094
 80041d0:	0801807c 	.word	0x0801807c
 80041d4:	080180bc 	.word	0x080180bc
 80041d8:	08018074 	.word	0x08018074
 80041dc:	08018168 	.word	0x08018168

080041e0 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041e4:	4929      	ldr	r1, [pc, #164]	; (800428c <GetID+0xac>)
int16_t GetID(char *string){
 80041e6:	b500      	push	{lr}
 80041e8:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 80041ea:	f7fb ff8b 	bl	8000104 <strcmp>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d02c      	beq.n	800424c <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 80041f2:	4927      	ldr	r1, [pc, #156]	; (8004290 <GetID+0xb0>)
 80041f4:	0030      	movs	r0, r6
 80041f6:	f7fb ff85 	bl	8000104 <strcmp>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d02b      	beq.n	8004256 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041fe:	7833      	ldrb	r3, [r6, #0]
 8004200:	4698      	mov	r8, r3
 8004202:	2b23      	cmp	r3, #35	; 0x23
 8004204:	d030      	beq.n	8004268 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004206:	4b23      	ldr	r3, [pc, #140]	; (8004294 <GetID+0xb4>)
 8004208:	781f      	ldrb	r7, [r3, #0]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d00f      	beq.n	800422e <GetID+0x4e>
 800420e:	2400      	movs	r4, #0
 8004210:	4d21      	ldr	r5, [pc, #132]	; (8004298 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004212:	0029      	movs	r1, r5
 8004214:	0030      	movs	r0, r6
 8004216:	f7fb ff75 	bl	8000104 <strcmp>
 800421a:	2800      	cmp	r0, #0
 800421c:	d102      	bne.n	8004224 <GetID+0x44>
 800421e:	4643      	mov	r3, r8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11a      	bne.n	800425a <GetID+0x7a>
		for(i =0; i < N; i++){
 8004224:	3401      	adds	r4, #1
 8004226:	b2e4      	uxtb	r4, r4
 8004228:	350a      	adds	r5, #10
 800422a:	42a7      	cmp	r7, r4
 800422c:	d1f1      	bne.n	8004212 <GetID+0x32>
 800422e:	2400      	movs	r4, #0
 8004230:	4d1a      	ldr	r5, [pc, #104]	; (800429c <GetID+0xbc>)
 8004232:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004234:	0029      	movs	r1, r5
 8004236:	0030      	movs	r0, r6
 8004238:	f7fb ff64 	bl	8000104 <strcmp>
 800423c:	2800      	cmp	r0, #0
 800423e:	d00e      	beq.n	800425e <GetID+0x7e>
 8004240:	3401      	adds	r4, #1
 8004242:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004244:	2c0a      	cmp	r4, #10
 8004246:	d1f5      	bne.n	8004234 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	e001      	b.n	8004250 <GetID+0x70>
		return myID;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <GetID+0xbc>)
 800424e:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 8004250:	bc04      	pop	{r2}
 8004252:	4690      	mov	r8, r2
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 8004256:	20ff      	movs	r0, #255	; 0xff
 8004258:	e7fa      	b.n	8004250 <GetID+0x70>
				return (i);
 800425a:	b220      	sxth	r0, r4
 800425c:	e7f8      	b.n	8004250 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 800425e:	20fe      	movs	r0, #254	; 0xfe
 8004260:	0224      	lsls	r4, r4, #8
 8004262:	4320      	orrs	r0, r4
 8004264:	b200      	sxth	r0, r0
 8004266:	e7f3      	b.n	8004250 <GetID+0x70>
		id =atol(string + 1);
 8004268:	1c70      	adds	r0, r6, #1
 800426a:	f00e fbec 	bl	8012a46 <atol>
 800426e:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <GetID+0x9c>
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <GetID+0xb4>)
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d204      	bcs.n	8004286 <GetID+0xa6>
		else if(id == myID)
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <GetID+0xbc>)
			return BOS_ERR_WrongID;
 800427e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d1e4      	bne.n	8004250 <GetID+0x70>
			return myID;
 8004286:	b218      	sxth	r0, r3
 8004288:	e7e2      	b.n	8004250 <GetID+0x70>
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	08018170 	.word	0x08018170
 8004290:	08018174 	.word	0x08018174
 8004294:	20000008 	.word	0x20000008
 8004298:	20000dfc 	.word	0x20000dfc
 800429c:	20000a98 	.word	0x20000a98

080042a0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	46c6      	mov	lr, r8
 80042a4:	4c2c      	ldr	r4, [pc, #176]	; (8004358 <NameModule+0xb8>)
 80042a6:	0007      	movs	r7, r0
 80042a8:	0026      	movs	r6, r4
 80042aa:	000d      	movs	r5, r1
 80042ac:	b500      	push	{lr}
 80042ae:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042b0:	0021      	movs	r1, r4
 80042b2:	0028      	movs	r0, r5
 80042b4:	f7fb ff26 	bl	8000104 <strcmp>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d040      	beq.n	800433e <NameModule+0x9e>
 80042bc:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d1f6      	bne.n	80042b0 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <NameModule+0xbc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d914      	bls.n	80042f4 <NameModule+0x54>
 80042ca:	4c25      	ldr	r4, [pc, #148]	; (8004360 <NameModule+0xc0>)
 80042cc:	009e      	lsls	r6, r3, #2
 80042ce:	18f6      	adds	r6, r6, r3
 80042d0:	0023      	movs	r3, r4
 80042d2:	0076      	lsls	r6, r6, #1
 80042d4:	3b0a      	subs	r3, #10
 80042d6:	18f6      	adds	r6, r6, r3
 80042d8:	e002      	b.n	80042e0 <NameModule+0x40>
 80042da:	340a      	adds	r4, #10
 80042dc:	42b4      	cmp	r4, r6
 80042de:	d009      	beq.n	80042f4 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 80042e0:	0021      	movs	r1, r4
 80042e2:	0028      	movs	r0, r5
 80042e4:	f7fb ff0e 	bl	8000104 <strcmp>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1f6      	bne.n	80042da <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 80042ec:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 80042ee:	bc04      	pop	{r2}
 80042f0:	4690      	mov	r8, r2
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	4e1b      	ldr	r6, [pc, #108]	; (8004364 <NameModule+0xc4>)
 80042f6:	0034      	movs	r4, r6
 80042f8:	369c      	adds	r6, #156	; 0x9c
 80042fa:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 80042fc:	0021      	movs	r1, r4
 80042fe:	0028      	movs	r0, r5
 8004300:	f7fb ff00 	bl	8000104 <strcmp>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0f1      	beq.n	80042ec <NameModule+0x4c>
 8004308:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800430a:	42a6      	cmp	r6, r4
 800430c:	d1f6      	bne.n	80042fc <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <NameModule+0xc8>)
 8004310:	4c16      	ldr	r4, [pc, #88]	; (800436c <NameModule+0xcc>)
 8004312:	4698      	mov	r8, r3
 8004314:	61dc      	str	r4, [r3, #28]
 8004316:	e004      	b.n	8004322 <NameModule+0x82>
 8004318:	4643      	mov	r3, r8
 800431a:	6864      	ldr	r4, [r4, #4]
 800431c:	61dc      	str	r4, [r3, #28]
 800431e:	2c00      	cmp	r4, #0
 8004320:	d00f      	beq.n	8004342 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004326:	0030      	movs	r0, r6
 8004328:	f7fb fef6 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800432c:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800432e:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004330:	0028      	movs	r0, r5
 8004332:	f00f f88f 	bl	8013454 <strncmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	d1ee      	bne.n	8004318 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800433a:	2008      	movs	r0, #8
 800433c:	e7d7      	b.n	80042ee <NameModule+0x4e>
			return BOS_ERR_Keyword;
 800433e:	2006      	movs	r0, #6
 8004340:	e7d5      	b.n	80042ee <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 8004342:	00b8      	lsls	r0, r7, #2
 8004344:	19c0      	adds	r0, r0, r7
 8004346:	4f0a      	ldr	r7, [pc, #40]	; (8004370 <NameModule+0xd0>)
 8004348:	0040      	lsls	r0, r0, #1
 800434a:	0029      	movs	r1, r5
 800434c:	19c0      	adds	r0, r0, r7
 800434e:	f00f f879 	bl	8013444 <strcpy>
	result =SaveEEalias();
 8004352:	f7ff f881 	bl	8003458 <SaveEEalias>
	return result;
 8004356:	e7ca      	b.n	80042ee <NameModule+0x4e>
 8004358:	080177cc 	.word	0x080177cc
 800435c:	20000008 	.word	0x20000008
 8004360:	20000e06 	.word	0x20000e06
 8004364:	20000a98 	.word	0x20000a98
 8004368:	20000c18 	.word	0x20000c18
 800436c:	200000b8 	.word	0x200000b8
 8004370:	20000dfc 	.word	0x20000dfc

08004374 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	464f      	mov	r7, r9
 8004378:	4646      	mov	r6, r8
 800437a:	46d6      	mov	lr, sl
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <AddModuleToGroup+0x104>)
 800437e:	b5c0      	push	{r6, r7, lr}
 8004380:	001f      	movs	r7, r3
 8004382:	3738      	adds	r7, #56	; 0x38
 8004384:	4680      	mov	r8, r0
 8004386:	000e      	movs	r6, r1
 8004388:	4699      	mov	r9, r3
 800438a:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800438c:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800438e:	0021      	movs	r1, r4
 8004390:	0030      	movs	r0, r6
 8004392:	f7fb feb7 	bl	8000104 <strcmp>
 8004396:	2800      	cmp	r0, #0
 8004398:	d02a      	beq.n	80043f0 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 800439a:	3501      	adds	r5, #1
 800439c:	340a      	adds	r4, #10
 800439e:	2d0a      	cmp	r5, #10
 80043a0:	d1f5      	bne.n	800438e <AddModuleToGroup+0x1a>
 80043a2:	4c36      	ldr	r4, [pc, #216]	; (800447c <AddModuleToGroup+0x108>)
 80043a4:	0025      	movs	r5, r4
 80043a6:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043a8:	0021      	movs	r1, r4
 80043aa:	0030      	movs	r0, r6
 80043ac:	f7fb feaa 	bl	8000104 <strcmp>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d051      	beq.n	8004458 <AddModuleToGroup+0xe4>
 80043b4:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043b6:	42a5      	cmp	r5, r4
 80043b8:	d1f6      	bne.n	80043a8 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <AddModuleToGroup+0x10c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d920      	bls.n	8004404 <AddModuleToGroup+0x90>
 80043c2:	4c30      	ldr	r4, [pc, #192]	; (8004484 <AddModuleToGroup+0x110>)
 80043c4:	009d      	lsls	r5, r3, #2
 80043c6:	18ed      	adds	r5, r5, r3
 80043c8:	0023      	movs	r3, r4
 80043ca:	006d      	lsls	r5, r5, #1
 80043cc:	3b0a      	subs	r3, #10
 80043ce:	18ed      	adds	r5, r5, r3
 80043d0:	e002      	b.n	80043d8 <AddModuleToGroup+0x64>
 80043d2:	340a      	adds	r4, #10
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d015      	beq.n	8004404 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 80043d8:	0021      	movs	r1, r4
 80043da:	0030      	movs	r0, r6
 80043dc:	f7fb fe92 	bl	8000104 <strcmp>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d1f6      	bne.n	80043d2 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 80043e4:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80043e6:	bc1c      	pop	{r2, r3, r4}
 80043e8:	4690      	mov	r8, r2
 80043ea:	4699      	mov	r9, r3
 80043ec:	46a2      	mov	sl, r4
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 80043f0:	2201      	movs	r2, #1
 80043f2:	4647      	mov	r7, r8
 80043f4:	40aa      	lsls	r2, r5
 80043f6:	3f01      	subs	r7, #1
 80043f8:	007f      	lsls	r7, r7, #1
 80043fa:	444f      	add	r7, r9
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	80bb      	strh	r3, [r7, #4]
			return result;
 8004402:	e7f0      	b.n	80043e6 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004404:	4b20      	ldr	r3, [pc, #128]	; (8004488 <AddModuleToGroup+0x114>)
 8004406:	4c21      	ldr	r4, [pc, #132]	; (800448c <AddModuleToGroup+0x118>)
 8004408:	469a      	mov	sl, r3
 800440a:	621c      	str	r4, [r3, #32]
 800440c:	e004      	b.n	8004418 <AddModuleToGroup+0xa4>
 800440e:	4653      	mov	r3, sl
 8004410:	6864      	ldr	r4, [r4, #4]
 8004412:	621c      	str	r4, [r3, #32]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d00d      	beq.n	8004434 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800441c:	0028      	movs	r0, r5
 800441e:	f7fb fe7b 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004422:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004424:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004426:	0030      	movs	r0, r6
 8004428:	f00f f814 	bl	8013454 <strncmp>
 800442c:	2800      	cmp	r0, #0
 800442e:	d1ee      	bne.n	800440e <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004430:	2008      	movs	r0, #8
 8004432:	e7d8      	b.n	80043e6 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004434:	783b      	ldrb	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800443a:	3401      	adds	r4, #1
 800443c:	370a      	adds	r7, #10
 800443e:	2c0a      	cmp	r4, #10
 8004440:	d1f8      	bne.n	8004434 <AddModuleToGroup+0xc0>
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 8004446:	4647      	mov	r7, r8
 8004448:	3f01      	subs	r7, #1
 800444a:	007f      	lsls	r7, r7, #1
 800444c:	444f      	add	r7, r9
 800444e:	88ba      	ldrh	r2, [r7, #4]
	return result;
 8004450:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004452:	4313      	orrs	r3, r2
 8004454:	80bb      	strh	r3, [r7, #4]
	return result;
 8004456:	e7c6      	b.n	80043e6 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 8004458:	2006      	movs	r0, #6
 800445a:	e7c4      	b.n	80043e6 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 800445c:	464b      	mov	r3, r9
 800445e:	00a0      	lsls	r0, r4, #2
 8004460:	1900      	adds	r0, r0, r4
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	1818      	adds	r0, r3, r0
 8004468:	0031      	movs	r1, r6
 800446a:	f00e ffeb 	bl	8013444 <strcpy>
 800446e:	2301      	movs	r3, #1
 8004470:	40a3      	lsls	r3, r4
 8004472:	b21b      	sxth	r3, r3
			break;
 8004474:	e7e7      	b.n	8004446 <AddModuleToGroup+0xd2>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000a98 	.word	0x20000a98
 800447c:	080177cc 	.word	0x080177cc
 8004480:	20000008 	.word	0x20000008
 8004484:	20000e06 	.word	0x20000e06
 8004488:	20000c18 	.word	0x20000c18
 800448c:	200000b8 	.word	0x200000b8

08004490 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	4657      	mov	r7, sl
 8004494:	46de      	mov	lr, fp
 8004496:	464e      	mov	r6, r9
 8004498:	4645      	mov	r5, r8
 800449a:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <ReadPortsDir+0xb4>)
BOS_Status ReadPortsDir(void){
 800449e:	b083      	sub	sp, #12
	for(uint8_t i =1; i <= N; i++){
 80044a0:	469a      	mov	sl, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d04a      	beq.n	800453e <ReadPortsDir+0xae>
	BOS_Status result =BOS_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <ReadPortsDir+0xb8>)
	for(uint8_t i =1; i <= N; i++){
 80044ae:	2501      	movs	r5, #1
 80044b0:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <ReadPortsDir+0xbc>)
 80044b4:	4699      	mov	r9, r3
			if(responseStatus != BOS_OK){
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <ReadPortsDir+0xc0>)
 80044b8:	469b      	mov	fp, r3
 80044ba:	e014      	b.n	80044e6 <ReadPortsDir+0x56>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044bc:	2200      	movs	r2, #0
 80044be:	2113      	movs	r1, #19
 80044c0:	0028      	movs	r0, r5
 80044c2:	f005 fac3 	bl	8009a4c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f008 fe3c 	bl	800d144 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044cc:	2324      	movs	r3, #36	; 0x24
 80044ce:	465a      	mov	r2, fp
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <ReadPortsDir+0x4a>
				result =BOS_ERR_NoResponse;
 80044d6:	2302      	movs	r3, #2
 80044d8:	9301      	str	r3, [sp, #4]
	for(uint8_t i =1; i <= N; i++){
 80044da:	4653      	mov	r3, sl
 80044dc:	3501      	adds	r5, #1
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2ed      	uxtb	r5, r5
 80044e2:	42ab      	cmp	r3, r5
 80044e4:	d323      	bcc.n	800452e <ReadPortsDir+0x9e>
		if(i != myID){
 80044e6:	4643      	mov	r3, r8
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	d1e6      	bne.n	80044bc <ReadPortsDir+0x2c>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044ee:	2780      	movs	r7, #128	; 0x80
 80044f0:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f2:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044f4:	023f      	lsls	r7, r7, #8
 80044f6:	0020      	movs	r0, r4
 80044f8:	f009 f86c 	bl	800d5d4 <GetUart>
 80044fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044fe:	42bb      	cmp	r3, r7
 8004500:	d10a      	bne.n	8004518 <ReadPortsDir+0x88>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004502:	0039      	movs	r1, r7
 8004504:	4643      	mov	r3, r8
 8004506:	464a      	mov	r2, r9
 8004508:	4131      	asrs	r1, r6
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	5a9a      	ldrh	r2, [r3, r2]
 8004512:	430a      	orrs	r2, r1
 8004514:	4649      	mov	r1, r9
 8004516:	525a      	strh	r2, [r3, r1]
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004518:	3401      	adds	r4, #1
 800451a:	b2e4      	uxtb	r4, r4
 800451c:	3601      	adds	r6, #1
 800451e:	2c07      	cmp	r4, #7
 8004520:	d1e9      	bne.n	80044f6 <ReadPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 8004522:	4653      	mov	r3, sl
 8004524:	3501      	adds	r5, #1
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2ed      	uxtb	r5, r5
 800452a:	42ab      	cmp	r3, r5
 800452c:	d2db      	bcs.n	80044e6 <ReadPortsDir+0x56>
			}
		}
	}
	
	return result;
}
 800452e:	9801      	ldr	r0, [sp, #4]
 8004530:	b003      	add	sp, #12
 8004532:	bc3c      	pop	{r2, r3, r4, r5}
 8004534:	4690      	mov	r8, r2
 8004536:	4699      	mov	r9, r3
 8004538:	46a2      	mov	sl, r4
 800453a:	46ab      	mov	fp, r5
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	e7f4      	b.n	800452e <ReadPortsDir+0x9e>
 8004544:	20000008 	.word	0x20000008
 8004548:	20000a98 	.word	0x20000a98
 800454c:	20007588 	.word	0x20007588
 8004550:	20000c18 	.word	0x20000c18

08004554 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004558:	2680      	movs	r6, #128	; 0x80
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <UpdateMyPortsDir+0x5c>)
BOS_Status UpdateMyPortsDir(void){
 800455c:	b500      	push	{lr}
 800455e:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004560:	2401      	movs	r4, #1
 8004562:	4698      	mov	r8, r3
 8004564:	4f13      	ldr	r7, [pc, #76]	; (80045b4 <UpdateMyPortsDir+0x60>)
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004566:	0236      	lsls	r6, r6, #8
 8004568:	e009      	b.n	800457e <UpdateMyPortsDir+0x2a>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800456a:	3401      	adds	r4, #1
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
 800456c:	f009 f832 	bl	800d5d4 <GetUart>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004570:	b2e4      	uxtb	r4, r4
			SwapUartPins(GetUart(p),NORMAL);
 8004572:	2100      	movs	r1, #0
 8004574:	f009 f83a 	bl	800d5ec <SwapUartPins>
 8004578:	3501      	adds	r5, #1
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800457a:	2c07      	cmp	r4, #7
 800457c:	d013      	beq.n	80045a6 <UpdateMyPortsDir+0x52>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800457e:	4642      	mov	r2, r8
 8004580:	783b      	ldrb	r3, [r7, #0]
			SwapUartPins(GetUart(p),NORMAL);
 8004582:	0020      	movs	r0, r4
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004584:	3b01      	subs	r3, #1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	5ad3      	ldrh	r3, [r2, r3]
 800458a:	0032      	movs	r2, r6
 800458c:	412a      	asrs	r2, r5
 800458e:	421a      	tst	r2, r3
 8004590:	d0eb      	beq.n	800456a <UpdateMyPortsDir+0x16>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004592:	3401      	adds	r4, #1
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004594:	f009 f81e 	bl	800d5d4 <GetUart>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004598:	b2e4      	uxtb	r4, r4
			SwapUartPins(GetUart(p),REVERSED);
 800459a:	2101      	movs	r1, #1
 800459c:	f009 f826 	bl	800d5ec <SwapUartPins>
 80045a0:	3501      	adds	r5, #1
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1eb      	bne.n	800457e <UpdateMyPortsDir+0x2a>
		}
	}
	
	return result;
}
 80045a6:	2000      	movs	r0, #0
 80045a8:	bc04      	pop	{r2}
 80045aa:	4690      	mov	r8, r2
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20007588 	.word	0x20007588
 80045b4:	20000a98 	.word	0x20000a98

080045b8 <BOS_Init>:
void BOS_Init(void){
 80045b8:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80045ba:	f008 fc77 	bl	800ceac <RTC_Init>
	GetTimeDate();
 80045be:	f008 fd1b 	bl	800cff8 <GetTimeDate>
	EE_Init();
 80045c2:	f003 fa53 	bl	8007a6c <EE_Init>
	GPIO_Init();
 80045c6:	f008 f993 	bl	800c8f0 <GPIO_Init>
	DMA_Init();
 80045ca:	f007 f929 	bl	800b820 <DMA_Init>
	TIM_USEC_Init();
 80045ce:	f008 fd45 	bl	800d05c <TIM_USEC_Init>
	CRC_Init();
 80045d2:	f008 f94d 	bl	800c870 <CRC_Init>
	TIM_MSEC_Init();
 80045d6:	f008 fd73 	bl	800d0c0 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80045da:	f008 fa4d 	bl	800ca78 <IsFactoryReset>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d15e      	bne.n	80046a0 <BOS_Init+0xe8>
	if(IsLowerCLIbaud()){
 80045e2:	f7ff f835 	bl	8003650 <IsLowerCLIbaud>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d04f      	beq.n	800468a <BOS_Init+0xd2>
		CLI_LOW_Baudrate_Flag =1;
 80045ea:	2322      	movs	r3, #34	; 0x22
 80045ec:	2101      	movs	r1, #1
 80045ee:	4a36      	ldr	r2, [pc, #216]	; (80046c8 <BOS_Init+0x110>)
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045f0:	2032      	movs	r0, #50	; 0x32
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045f2:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 80045f4:	54d1      	strb	r1, [r2, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045f6:	f008 fda5 	bl	800d144 <StartMilliDelay>
		Module_Peripheral_Init();
 80045fa:	f007 f867 	bl	800b6cc <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045fe:	21e1      	movs	r1, #225	; 0xe1
 8004600:	4d32      	ldr	r5, [pc, #200]	; (80046cc <BOS_Init+0x114>)
			UpdateBaudrate(port,BOS.clibaudrate);
 8004602:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004604:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004606:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004608:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800460a:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 800460c:	f008 ffd0 	bl	800d5b0 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004610:	2c07      	cmp	r4, #7
 8004612:	d007      	beq.n	8004624 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004614:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004616:	3401      	adds	r4, #1
 8004618:	68a9      	ldr	r1, [r5, #8]
 800461a:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 800461c:	f008 ffc8 	bl	800d5b0 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004620:	2c07      	cmp	r4, #7
 8004622:	d1f7      	bne.n	8004614 <BOS_Init+0x5c>
	LoadEEvars();
 8004624:	f7fe fede 	bl	80033e4 <LoadEEvars>
	UpdateMyPortsDir();
 8004628:	f7ff ff94 	bl	8004554 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 800462c:	f007 fdb0 	bl	800c190 <SetupMessagingRxDMAs>
		IND_ON();
 8004630:	2180      	movs	r1, #128	; 0x80
	if(myID == 0) /* Native module */
 8004632:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <BOS_Init+0x118>)
		IND_ON();
 8004634:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8004636:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8004638:	01c9      	lsls	r1, r1, #7
 800463a:	4826      	ldr	r0, [pc, #152]	; (80046d4 <BOS_Init+0x11c>)
	if(myID == 0) /* Native module */
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02a      	beq.n	8004696 <BOS_Init+0xde>
		IND_ON();
 8004640:	f00c fcaa 	bl	8010f98 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004644:	20fa      	movs	r0, #250	; 0xfa
 8004646:	0040      	lsls	r0, r0, #1
 8004648:	f008 fd7c 	bl	800d144 <StartMilliDelay>
		IND_OFF();
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	2200      	movs	r2, #0
 8004650:	01c9      	lsls	r1, r1, #7
 8004652:	4820      	ldr	r0, [pc, #128]	; (80046d4 <BOS_Init+0x11c>)
 8004654:	f00c fca0 	bl	8010f98 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004658:	2064      	movs	r0, #100	; 0x64
 800465a:	f008 fd73 	bl	800d144 <StartMilliDelay>
		IND_ON();
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	481c      	ldr	r0, [pc, #112]	; (80046d4 <BOS_Init+0x11c>)
 8004662:	2201      	movs	r2, #1
 8004664:	01c9      	lsls	r1, r1, #7
 8004666:	f00c fc97 	bl	8010f98 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800466a:	2064      	movs	r0, #100	; 0x64
 800466c:	f008 fd6a 	bl	800d144 <StartMilliDelay>
		IND_OFF();
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	2200      	movs	r2, #0
 8004674:	01c9      	lsls	r1, r1, #7
 8004676:	4817      	ldr	r0, [pc, #92]	; (80046d4 <BOS_Init+0x11c>)
 8004678:	f00c fc8e 	bl	8010f98 <HAL_GPIO_WritePin>
	ResetUartORE();
 800467c:	f003 f866 	bl	800774c <ResetUartORE>
	BOS_initialized =1;
 8004680:	2325      	movs	r3, #37	; 0x25
 8004682:	2101      	movs	r1, #1
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <BOS_Init+0x120>)
 8004686:	54d1      	strb	r1, [r2, r3]
}
 8004688:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800468a:	2032      	movs	r0, #50	; 0x32
 800468c:	f008 fd5a 	bl	800d144 <StartMilliDelay>
		Module_Peripheral_Init();
 8004690:	f007 f81c 	bl	800b6cc <Module_Peripheral_Init>
 8004694:	e7c6      	b.n	8004624 <BOS_Init+0x6c>
		IND_ON();
 8004696:	f00c fc7f 	bl	8010f98 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800469a:	20fa      	movs	r0, #250	; 0xfa
 800469c:	0040      	lsls	r0, r0, #1
 800469e:	e7e5      	b.n	800466c <BOS_Init+0xb4>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80046a0:	4c0e      	ldr	r4, [pc, #56]	; (80046dc <BOS_Init+0x124>)
 80046a2:	4d0f      	ldr	r5, [pc, #60]	; (80046e0 <BOS_Init+0x128>)
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	42ab      	cmp	r3, r5
 80046a8:	d004      	beq.n	80046b4 <BOS_Init+0xfc>
		if(EE_Format() == HAL_OK){
 80046aa:	f003 f98f 	bl	80079cc <EE_Format>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d100      	bne.n	80046b4 <BOS_Init+0xfc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80046b2:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046b4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <BOS_Init+0x12c>)
 80046ba:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <BOS_Init+0x130>)
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	e7fd      	b.n	80046c2 <BOS_Init+0x10a>
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20000b18 	.word	0x20000b18
 80046cc:	200070a8 	.word	0x200070a8
 80046d0:	20000a98 	.word	0x20000a98
 80046d4:	48000400 	.word	0x48000400
 80046d8:	20000c18 	.word	0x20000c18
 80046dc:	20007ff0 	.word	0x20007ff0
 80046e0:	beefdead 	.word	0xbeefdead
 80046e4:	e000ed00 	.word	0xe000ed00
 80046e8:	05fa0004 	.word	0x05fa0004

080046ec <Module_Init>:
void Module_Init(void){
 80046ec:	b510      	push	{r4, lr}
	HAL_Init();
 80046ee:	f00a ff9b 	bl	800f628 <HAL_Init>
	SystemClock_Config();
 80046f2:	f006 fe85 	bl	800b400 <SystemClock_Config>
	BOS_Init();
 80046f6:	f7ff ff5f 	bl	80045b8 <BOS_Init>
	MX_FREERTOS_Init();
 80046fa:	f003 fb0f 	bl	8007d1c <MX_FREERTOS_Init>
	osKernelStart();
 80046fe:	f009 f827 	bl	800d750 <osKernelStart>
}
 8004702:	bd10      	pop	{r4, pc}

08004704 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004706:	4645      	mov	r5, r8
 8004708:	4657      	mov	r7, sl
 800470a:	464e      	mov	r6, r9
 800470c:	46de      	mov	lr, fp
 800470e:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004710:	4f82      	ldr	r7, [pc, #520]	; (800491c <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004712:	b083      	sub	sp, #12
 8004714:	ac0c      	add	r4, sp, #48	; 0x30
 8004716:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 8004718:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800471a:	9001      	str	r0, [sp, #4]
 800471c:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 800471e:	46a8      	mov	r8, r5
	if(timeout)
 8004720:	2e00      	cmp	r6, #0
 8004722:	d059      	beq.n	80047d8 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004724:	2520      	movs	r5, #32
 8004726:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 8004728:	4265      	negs	r5, r4
 800472a:	416c      	adcs	r4, r5
 800472c:	2501      	movs	r5, #1
 800472e:	2022      	movs	r0, #34	; 0x22
 8004730:	4264      	negs	r4, r4
 8004732:	43ac      	bics	r4, r5
 8004734:	46a3      	mov	fp, r4
 8004736:	4684      	mov	ip, r0
 8004738:	b2d5      	uxtb	r5, r2
 800473a:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 800473c:	4d78      	ldr	r5, [pc, #480]	; (8004920 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 800473e:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004740:	42aa      	cmp	r2, r5
 8004742:	d829      	bhi.n	8004798 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004744:	2224      	movs	r2, #36	; 0x24
 8004746:	464c      	mov	r4, r9
 8004748:	4d76      	ldr	r5, [pc, #472]	; (8004924 <WriteToRemote+0x220>)
 800474a:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 800474c:	002a      	movs	r2, r5
 800474e:	3224      	adds	r2, #36	; 0x24
 8004750:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004752:	2b08      	cmp	r3, #8
 8004754:	d814      	bhi.n	8004780 <WriteToRemote+0x7c>
 8004756:	4a74      	ldr	r2, [pc, #464]	; (8004928 <WriteToRemote+0x224>)
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	58d3      	ldr	r3, [r2, r3]
 800475c:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800475e:	680b      	ldr	r3, [r1, #0]
 8004760:	3524      	adds	r5, #36	; 0x24
 8004762:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004764:	680b      	ldr	r3, [r1, #0]
 8004766:	121b      	asrs	r3, r3, #8
 8004768:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800476a:	680b      	ldr	r3, [r1, #0]
 800476c:	141b      	asrs	r3, r3, #16
 800476e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004774:	220a      	movs	r2, #10
 8004776:	4659      	mov	r1, fp
 8004778:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800477a:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 800477c:	f005 f966 	bl	8009a4c <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004780:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004782:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004784:	703b      	strb	r3, [r7, #0]
	if(timeout){
 8004786:	2e00      	cmp	r6, #0
 8004788:	d128      	bne.n	80047dc <WriteToRemote+0xd8>
}
 800478a:	b003      	add	sp, #12
 800478c:	bc3c      	pop	{r2, r3, r4, r5}
 800478e:	4690      	mov	r8, r2
 8004790:	4699      	mov	r9, r3
 8004792:	46a2      	mov	sl, r4
 8004794:	46ab      	mov	fp, r5
 8004796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 8004798:	2024      	movs	r0, #36	; 0x24
 800479a:	4684      	mov	ip, r0
 800479c:	2000      	movs	r0, #0
 800479e:	4682      	mov	sl, r0
 80047a0:	4660      	mov	r0, ip
 80047a2:	4654      	mov	r4, sl
 80047a4:	4d5f      	ldr	r5, [pc, #380]	; (8004924 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 80047a6:	44ac      	add	ip, r5
		messageParams[0] =0;
 80047a8:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 80047aa:	4660      	mov	r0, ip
 80047ac:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047ae:	0e10      	lsrs	r0, r2, #24
 80047b0:	4682      	mov	sl, r0
 80047b2:	4660      	mov	r0, ip
 80047b4:	4654      	mov	r4, sl
 80047b6:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047b8:	0c10      	lsrs	r0, r2, #16
 80047ba:	4682      	mov	sl, r0
 80047bc:	4660      	mov	r0, ip
 80047be:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047c0:	0a12      	lsrs	r2, r2, #8
 80047c2:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047c4:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80047c6:	4662      	mov	r2, ip
 80047c8:	4648      	mov	r0, r9
 80047ca:	7150      	strb	r0, [r2, #5]
		switch(format){
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d8d7      	bhi.n	8004780 <WriteToRemote+0x7c>
 80047d0:	4a56      	ldr	r2, [pc, #344]	; (800492c <WriteToRemote+0x228>)
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	58d3      	ldr	r3, [r2, r3]
 80047d6:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80047d8:	703e      	strb	r6, [r7, #0]
 80047da:	e7a5      	b.n	8004728 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80047dc:	f00a ff3c 	bl	800f658 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047e0:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80047e2:	0007      	movs	r7, r0
 80047e4:	4d52      	ldr	r5, [pc, #328]	; (8004930 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047e6:	5d28      	ldrb	r0, [r5, r4]
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d0ce      	beq.n	800478a <WriteToRemote+0x86>
 80047ec:	f00a ff34 	bl	800f658 <HAL_GetTick>
 80047f0:	1bc0      	subs	r0, r0, r7
 80047f2:	42b0      	cmp	r0, r6
 80047f4:	d3f7      	bcc.n	80047e6 <WriteToRemote+0xe2>
 80047f6:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80047f8:	e7c7      	b.n	800478a <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80047fa:	780b      	ldrb	r3, [r1, #0]
 80047fc:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80047fe:	2203      	movs	r2, #3
 8004800:	2120      	movs	r1, #32
 8004802:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004804:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004806:	f005 f921 	bl	8009a4c <SendMessageToModule>
				break;
 800480a:	e7b9      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 800480c:	780b      	ldrb	r3, [r1, #0]
 800480e:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004810:	2207      	movs	r2, #7
 8004812:	4659      	mov	r1, fp
 8004814:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004816:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004818:	f005 f918 	bl	8009a4c <SendMessageToModule>
				break;
 800481c:	e7b0      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 800481e:	680b      	ldr	r3, [r1, #0]
 8004820:	3524      	adds	r5, #36	; 0x24
 8004822:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004824:	680b      	ldr	r3, [r1, #0]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800482a:	680b      	ldr	r3, [r1, #0]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004830:	680b      	ldr	r3, [r1, #0]
 8004832:	0e1b      	lsrs	r3, r3, #24
 8004834:	e79e      	b.n	8004774 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 8004836:	780b      	ldrb	r3, [r1, #0]
 8004838:	3524      	adds	r5, #36	; 0x24
 800483a:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 800483c:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800483e:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004840:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004842:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004844:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004846:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004848:	78cb      	ldrb	r3, [r1, #3]
 800484a:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 800484c:	790b      	ldrb	r3, [r1, #4]
 800484e:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004850:	794b      	ldrb	r3, [r1, #5]
 8004852:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004854:	798b      	ldrb	r3, [r1, #6]
 8004856:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004858:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800485a:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800485c:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800485e:	f005 f8f5 	bl	8009a4c <SendMessageToModule>
				break;
 8004862:	e78d      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004864:	780b      	ldrb	r3, [r1, #0]
 8004866:	3524      	adds	r5, #36	; 0x24
 8004868:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800486a:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 800486c:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800486e:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004870:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004872:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004874:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004876:	78cb      	ldrb	r3, [r1, #3]
 8004878:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800487a:	790b      	ldrb	r3, [r1, #4]
 800487c:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800487e:	794b      	ldrb	r3, [r1, #5]
 8004880:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004882:	798b      	ldrb	r3, [r1, #6]
 8004884:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004886:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 8004888:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800488a:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 800488c:	f005 f8de 	bl	8009a4c <SendMessageToModule>
				break;
 8004890:	e776      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004892:	880b      	ldrh	r3, [r1, #0]
 8004894:	3524      	adds	r5, #36	; 0x24
 8004896:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004898:	880b      	ldrh	r3, [r1, #0]
 800489a:	b21b      	sxth	r3, r3
 800489c:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 800489e:	2208      	movs	r2, #8
 80048a0:	4659      	mov	r1, fp
 80048a2:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048a4:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 80048a6:	f005 f8d1 	bl	8009a4c <SendMessageToModule>
				break;
 80048aa:	e769      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048ac:	880b      	ldrh	r3, [r1, #0]
 80048ae:	3524      	adds	r5, #36	; 0x24
 80048b0:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048b2:	880b      	ldrh	r3, [r1, #0]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	e7f2      	b.n	800489e <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048b8:	680b      	ldr	r3, [r1, #0]
 80048ba:	3524      	adds	r5, #36	; 0x24
 80048bc:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048be:	680b      	ldr	r3, [r1, #0]
 80048c0:	121b      	asrs	r3, r3, #8
 80048c2:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048c4:	680b      	ldr	r3, [r1, #0]
 80048c6:	141b      	asrs	r3, r3, #16
 80048c8:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048ca:	680b      	ldr	r3, [r1, #0]
 80048cc:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048ce:	2206      	movs	r2, #6
 80048d0:	2120      	movs	r1, #32
 80048d2:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048d4:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048d6:	f005 f8b9 	bl	8009a4c <SendMessageToModule>
				break;
 80048da:	e751      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	3524      	adds	r5, #36	; 0x24
 80048e0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048e2:	680b      	ldr	r3, [r1, #0]
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80048e8:	680b      	ldr	r3, [r1, #0]
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80048ee:	680b      	ldr	r3, [r1, #0]
 80048f0:	0e1b      	lsrs	r3, r3, #24
 80048f2:	e7ec      	b.n	80048ce <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80048f4:	880b      	ldrh	r3, [r1, #0]
 80048f6:	3524      	adds	r5, #36	; 0x24
 80048f8:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048fa:	880b      	ldrh	r3, [r1, #0]
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004900:	2204      	movs	r2, #4
 8004902:	2120      	movs	r1, #32
 8004904:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004906:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004908:	f005 f8a0 	bl	8009a4c <SendMessageToModule>
				break;
 800490c:	e738      	b.n	8004780 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 800490e:	880b      	ldrh	r3, [r1, #0]
 8004910:	3524      	adds	r5, #36	; 0x24
 8004912:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004914:	880b      	ldrh	r3, [r1, #0]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	e7f2      	b.n	8004900 <WriteToRemote+0x1fc>
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	20007028 	.word	0x20007028
 8004920:	07ffffff 	.word	0x07ffffff
 8004924:	20000b18 	.word	0x20000b18
 8004928:	08017784 	.word	0x08017784
 800492c:	080177a8 	.word	0x080177a8
 8004930:	20000c18 	.word	0x20000c18

08004934 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004934:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004936:	2101      	movs	r1, #1
char* GetDateString(void){
 8004938:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 800493a:	201e      	movs	r0, #30
 800493c:	f00e f88a 	bl	8012a54 <calloc>
 8004940:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004942:	4809      	ldr	r0, [pc, #36]	; (8004968 <GetDateString+0x34>)
 8004944:	4909      	ldr	r1, [pc, #36]	; (800496c <GetDateString+0x38>)
 8004946:	7d02      	ldrb	r2, [r0, #20]
 8004948:	8b05      	ldrh	r5, [r0, #24]
 800494a:	7d83      	ldrb	r3, [r0, #22]
 800494c:	3a01      	subs	r2, #1
 800494e:	9501      	str	r5, [sp, #4]
 8004950:	7d40      	ldrb	r0, [r0, #21]
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	188a      	adds	r2, r1, r2
 8004956:	9000      	str	r0, [sp, #0]
 8004958:	6912      	ldr	r2, [r2, #16]
 800495a:	312c      	adds	r1, #44	; 0x2c
 800495c:	0020      	movs	r0, r4
 800495e:	f00e fd35 	bl	80133cc <sprintf>
	return buffer;
}
 8004962:	0020      	movs	r0, r4
 8004964:	b003      	add	sp, #12
 8004966:	bd30      	pop	{r4, r5, pc}
 8004968:	200070a8 	.word	0x200070a8
 800496c:	080177cc 	.word	0x080177cc

08004970 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004970:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004974:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004976:	7819      	ldrb	r1, [r3, #0]
 8004978:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800497a:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800497c:	9303      	str	r3, [sp, #12]
 800497e:	3b02      	subs	r3, #2
 8004980:	9302      	str	r3, [sp, #8]
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	3303      	adds	r3, #3
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	000b      	movs	r3, r1
 800498a:	f005 f883 	bl	8009a94 <StartScastDMAStream>
}
 800498e:	b005      	add	sp, #20
 8004990:	bd00      	pop	{pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	20000a98 	.word	0x20000a98

08004998 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004998:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800499a:	b530      	push	{r4, r5, lr}
 800499c:	0004      	movs	r4, r0
 800499e:	000d      	movs	r5, r1
 80049a0:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	9303      	str	r3, [sp, #12]
 80049a6:	9302      	str	r3, [sp, #8]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2100      	movs	r1, #0
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7fe fd95 	bl	80034e0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049b6:	1e60      	subs	r0, r4, #1
 80049b8:	00c3      	lsls	r3, r0, #3
 80049ba:	4912      	ldr	r1, [pc, #72]	; (8004a04 <Unbridge+0x6c>)
 80049bc:	1a1b      	subs	r3, r3, r0
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	585b      	ldr	r3, [r3, r1]
 80049c2:	1e6a      	subs	r2, r5, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <Unbridge+0x56>
 80049c8:	00d3      	lsls	r3, r2, #3
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80049d0:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80049d6:	f002 fe15 	bl	8007604 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049da:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049dc:	b007      	add	sp, #28
 80049de:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80049e0:	f002 fe10 	bl	8007604 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049e4:	0028      	movs	r0, r5
 80049e6:	f002 fe0d 	bl	8007604 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049ea:	2000      	movs	r0, #0
 80049ec:	e7f6      	b.n	80049dc <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80049ee:	00d3      	lsls	r3, r2, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	585b      	ldr	r3, [r3, r1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80049fa:	0028      	movs	r0, r5
 80049fc:	e7eb      	b.n	80049d6 <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 80049fe:	2068      	movs	r0, #104	; 0x68
 8004a00:	e7ec      	b.n	80049dc <Unbridge+0x44>
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	20001e78 	.word	0x20001e78

08004a08 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0a:	46d6      	mov	lr, sl
 8004a0c:	4646      	mov	r6, r8
 8004a0e:	464f      	mov	r7, r9
 8004a10:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a12:	4e27      	ldr	r6, [pc, #156]	; (8004ab0 <AddSnippet.part.0+0xa8>)
 8004a14:	4d27      	ldr	r5, [pc, #156]	; (8004ab4 <AddSnippet.part.0+0xac>)
 8004a16:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a18:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	009c      	lsls	r4, r3, #2
 8004a1e:	18e4      	adds	r4, r4, r3
 8004a20:	00a4      	lsls	r4, r4, #2
 8004a22:	192c      	adds	r4, r5, r4
 8004a24:	68e3      	ldr	r3, [r4, #12]
 8004a26:	469a      	mov	sl, r3
 8004a28:	f7fb fb76 	bl	8000118 <strlen>
 8004a2c:	4653      	mov	r3, sl
 8004a2e:	4681      	mov	r9, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d02e      	beq.n	8004a92 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a34:	4650      	mov	r0, sl
 8004a36:	f7fb fb6f 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a3e:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a40:	1809      	adds	r1, r1, r0
 8004a42:	4650      	mov	r0, sl
 8004a44:	f00e fafa 	bl	801303c <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a48:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a4a:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0093      	lsls	r3, r2, #2
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	18eb      	adds	r3, r5, r3
 8004a56:	68d8      	ldr	r0, [r3, #12]
 8004a58:	1c7a      	adds	r2, r7, #1
 8004a5a:	1880      	adds	r0, r0, r2
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	f00e fcf1 	bl	8013444 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004a62:	7832      	ldrb	r2, [r6, #0]
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0093      	lsls	r3, r2, #2
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	2213      	movs	r2, #19
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18eb      	adds	r3, r5, r3
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	55da      	strb	r2, [r3, r7]
 8004a74:	7833      	ldrb	r3, [r6, #0]
 8004a76:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004a78:	0098      	lsls	r0, r3, #2
 8004a7a:	18c0      	adds	r0, r0, r3
 8004a7c:	0080      	lsls	r0, r0, #2
 8004a7e:	1828      	adds	r0, r5, r0
 8004a80:	68c3      	ldr	r3, [r0, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004a86:	2000      	movs	r0, #0
}
 8004a88:	bc1c      	pop	{r2, r3, r4}
 8004a8a:	4690      	mov	r8, r2
 8004a8c:	4699      	mov	r9, r3
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a92:	3001      	adds	r0, #1
 8004a94:	f00e f84a 	bl	8012b2c <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004a98:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a9a:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004a9c:	f00e fcd2 	bl	8013444 <strcpy>
 8004aa0:	e7f1      	b.n	8004a86 <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004aa2:	2214      	movs	r2, #20
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f00e fa97 	bl	8012fd8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004aaa:	200e      	movs	r0, #14
 8004aac:	e7ec      	b.n	8004a88 <AddSnippet.part.0+0x80>
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	20001180 	.word	0x20001180
 8004ab4:	200070c4 	.word	0x200070c4

08004ab8 <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004ab8:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004aba:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004abc:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	d00d      	beq.n	8004ade <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004ac2:	2603      	movs	r6, #3
 8004ac4:	f00e f824 	bl	8012b10 <__locale_ctype_ptr>
 8004ac8:	1900      	adds	r0, r0, r4
 8004aca:	7842      	ldrb	r2, [r0, #1]
 8004acc:	4032      	ands	r2, r6
 8004ace:	2a01      	cmp	r2, #1
 8004ad0:	d100      	bne.n	8004ad4 <StringToLowerCase+0x1c>
 8004ad2:	3420      	adds	r4, #32
 8004ad4:	702c      	strb	r4, [r5, #0]
 8004ad6:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004ad8:	782c      	ldrb	r4, [r5, #0]
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	d1f2      	bne.n	8004ac4 <StringToLowerCase+0xc>
}
 8004ade:	bd70      	pop	{r4, r5, r6, pc}

08004ae0 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	4657      	mov	r7, sl
 8004ae4:	464e      	mov	r6, r9
 8004ae6:	46de      	mov	lr, fp
 8004ae8:	4645      	mov	r5, r8
 8004aea:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004aec:	4ed8      	ldr	r6, [pc, #864]	; (8004e50 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004aee:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af0:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004af2:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af4:	2c05      	cmp	r4, #5
 8004af6:	d067      	beq.n	8004bc8 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004af8:	00a3      	lsls	r3, r4, #2
 8004afa:	4dd6      	ldr	r5, [pc, #856]	; (8004e54 <ParseSnippetCondition+0x374>)
 8004afc:	1918      	adds	r0, r3, r4
 8004afe:	0080      	lsls	r0, r0, #2
 8004b00:	469a      	mov	sl, r3
 8004b02:	182b      	adds	r3, r5, r0
 8004b04:	4699      	mov	r9, r3
 8004b06:	2300      	movs	r3, #0
 8004b08:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b0a:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b0c:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b0e:	1828      	adds	r0, r5, r0
 8004b10:	2204      	movs	r2, #4
 8004b12:	2100      	movs	r1, #0
 8004b14:	f00e fa60 	bl	8012fd8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004b18:	783b      	ldrb	r3, [r7, #0]
 8004b1a:	2b62      	cmp	r3, #98	; 0x62
 8004b1c:	d102      	bne.n	8004b24 <ParseSnippetCondition+0x44>
 8004b1e:	78bb      	ldrb	r3, [r7, #2]
 8004b20:	2b2e      	cmp	r3, #46	; 0x2e
 8004b22:	d057      	beq.n	8004bd4 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004b24:	1d33      	adds	r3, r6, #4
 8004b26:	4698      	mov	r8, r3
 8004b28:	0018      	movs	r0, r3
 8004b2a:	0039      	movs	r1, r7
 8004b2c:	f00e fc8a 	bl	8013444 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004b30:	4cc9      	ldr	r4, [pc, #804]	; (8004e58 <ParseSnippetCondition+0x378>)
 8004b32:	4640      	mov	r0, r8
 8004b34:	0021      	movs	r1, r4
 8004b36:	f00f fb05 	bl	8014144 <strtok>
		secondPart =strtok( NULL," ");
 8004b3a:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004b3c:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f00f fb00 	bl	8014144 <strtok>
		thirdPart =strtok( NULL," ");
 8004b44:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004b46:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f00f fafb 	bl	8014144 <strtok>
 8004b4e:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	d02f      	beq.n	8004bb4 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004b54:	0038      	movs	r0, r7
 8004b56:	f7fe fddb 	bl	8003710 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b5a:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004b5c:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b5e:	d036      	beq.n	8004bce <ParseSnippetCondition+0xee>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d024      	beq.n	8004bae <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b64:	2c00      	cmp	r4, #0
 8004b66:	d025      	beq.n	8004bb4 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004b68:	0020      	movs	r0, r4
 8004b6a:	f7fe fdd1 	bl	8003710 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d06b      	beq.n	8004c4a <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b72:	2204      	movs	r2, #4
 8004b74:	7833      	ldrb	r3, [r6, #0]
 8004b76:	009c      	lsls	r4, r3, #2
 8004b78:	4699      	mov	r9, r3
 8004b7a:	18e3      	adds	r3, r4, r3
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b80:	18eb      	adds	r3, r5, r3
 8004b82:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b84:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b86:	4640      	mov	r0, r8
 8004b88:	f7fe fdce 	bl	8003728 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b8c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b8e:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b90:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b92:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b94:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b96:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b98:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9a:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b9c:	18ed      	adds	r5, r5, r3
 8004b9e:	786b      	ldrb	r3, [r5, #1]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004ba4:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004baa:	4698      	mov	r8, r3
 8004bac:	e004      	b.n	8004bb8 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004bae:	2c00      	cmp	r4, #0
 8004bb0:	d100      	bne.n	8004bb4 <ParseSnippetCondition+0xd4>
 8004bb2:	e07f      	b.n	8004cb4 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004bb4:	2367      	movs	r3, #103	; 0x67
 8004bb6:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bb8:	4640      	mov	r0, r8
 8004bba:	b00b      	add	sp, #44	; 0x2c
 8004bbc:	bc3c      	pop	{r2, r3, r4, r5}
 8004bbe:	4690      	mov	r8, r2
 8004bc0:	4699      	mov	r9, r3
 8004bc2:	46a2      	mov	sl, r4
 8004bc4:	46ab      	mov	fp, r5
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004bc8:	230e      	movs	r3, #14
 8004bca:	4698      	mov	r8, r3
 8004bcc:	e7f4      	b.n	8004bb8 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1c8      	bne.n	8004b64 <ParseSnippetCondition+0x84>
 8004bd2:	e7ef      	b.n	8004bb4 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	3b30      	subs	r3, #48	; 0x30
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004be0:	465b      	mov	r3, fp
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d8e8      	bhi.n	8004bb8 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004be6:	4649      	mov	r1, r9
 8004be8:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004bea:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bec:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bee:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004bf0:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bf2:	2207      	movs	r2, #7
 8004bf4:	4999      	ldr	r1, [pc, #612]	; (8004e5c <ParseSnippetCondition+0x37c>)
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	9307      	str	r3, [sp, #28]
 8004bfa:	f00e fc2b 	bl	8013454 <strncmp>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d03d      	beq.n	8004c7e <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004c02:	220e      	movs	r2, #14
 8004c04:	4996      	ldr	r1, [pc, #600]	; (8004e60 <ParseSnippetCondition+0x380>)
 8004c06:	9807      	ldr	r0, [sp, #28]
 8004c08:	f00e fc24 	bl	8013454 <strncmp>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d15e      	bne.n	8004cce <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004c10:	2306      	movs	r3, #6
 8004c12:	464a      	mov	r2, r9
 8004c14:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c16:	465b      	mov	r3, fp
 8004c18:	00da      	lsls	r2, r3, #3
 8004c1a:	4b92      	ldr	r3, [pc, #584]	; (8004e64 <ParseSnippetCondition+0x384>)
 8004c1c:	445a      	add	r2, fp
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	7a1b      	ldrb	r3, [r3, #8]
 8004c22:	079b      	lsls	r3, r3, #30
 8004c24:	d40e      	bmi.n	8004c44 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c26:	2301      	movs	r3, #1
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	4643      	mov	r3, r8
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	9303      	str	r3, [sp, #12]
 8004c32:	9302      	str	r3, [sp, #8]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4658      	mov	r0, fp
 8004c3e:	f003 fceb 	bl	8008618 <SetButtonEvents>
 8004c42:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c44:	3401      	adds	r4, #1
 8004c46:	7034      	strb	r4, [r6, #0]
 8004c48:	e7b6      	b.n	8004bb8 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c4a:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004c4c:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c4e:	0093      	lsls	r3, r2, #2
 8004c50:	189b      	adds	r3, r3, r2
 8004c52:	2203      	movs	r2, #3
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c58:	18eb      	adds	r3, r5, r3
 8004c5a:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004c5c:	f00d fee8 	bl	8012a30 <atof>
 8004c60:	f7fd ffb2 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c64:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004c66:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c68:	009c      	lsls	r4, r3, #2
 8004c6a:	18e0      	adds	r0, r4, r3
 8004c6c:	0080      	lsls	r0, r0, #2
 8004c6e:	3006      	adds	r0, #6
 8004c70:	1828      	adds	r0, r5, r0
 8004c72:	2204      	movs	r2, #4
 8004c74:	a909      	add	r1, sp, #36	; 0x24
 8004c76:	4699      	mov	r9, r3
 8004c78:	f00e f9a5 	bl	8012fc6 <memcpy>
 8004c7c:	e783      	b.n	8004b86 <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004c7e:	2305      	movs	r3, #5
 8004c80:	4649      	mov	r1, r9
 8004c82:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c84:	4659      	mov	r1, fp
 8004c86:	4b77      	ldr	r3, [pc, #476]	; (8004e64 <ParseSnippetCondition+0x384>)
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	445a      	add	r2, fp
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	2201      	movs	r2, #1
 8004c90:	7a1b      	ldrb	r3, [r3, #8]
 8004c92:	421a      	tst	r2, r3
 8004c94:	d1d6      	bne.n	8004c44 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c96:	2301      	movs	r3, #1
 8004c98:	9305      	str	r3, [sp, #20]
 8004c9a:	4643      	mov	r3, r8
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	9302      	str	r3, [sp, #8]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	4658      	mov	r0, fp
 8004cac:	f003 fcb4 	bl	8008618 <SetButtonEvents>
 8004cb0:	7834      	ldrb	r4, [r6, #0]
 8004cb2:	e7c7      	b.n	8004c44 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	7832      	ldrb	r2, [r6, #0]
 8004cb8:	0093      	lsls	r3, r2, #2
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cc0:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004cc2:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cc4:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cc6:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cc8:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004cca:	4698      	mov	r8, r3
 8004ccc:	e774      	b.n	8004bb8 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004cce:	220c      	movs	r2, #12
 8004cd0:	4965      	ldr	r1, [pc, #404]	; (8004e68 <ParseSnippetCondition+0x388>)
 8004cd2:	9807      	ldr	r0, [sp, #28]
 8004cd4:	f00e fbbe 	bl	8013454 <strncmp>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d131      	bne.n	8004d40 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004cdc:	465b      	mov	r3, fp
 8004cde:	00da      	lsls	r2, r3, #3
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <ParseSnippetCondition+0x384>)
 8004ce2:	445a      	add	r2, fp
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	789a      	ldrb	r2, [r3, #2]
 8004ce8:	2a00      	cmp	r2, #0
 8004cea:	d063      	beq.n	8004db4 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004cec:	78da      	ldrb	r2, [r3, #3]
 8004cee:	2a00      	cmp	r2, #0
 8004cf0:	d07d      	beq.n	8004dee <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cf2:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004cf4:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cf6:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1a3      	bne.n	8004c44 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004cfc:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004cfe:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d00:	4453      	add	r3, sl
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	18eb      	adds	r3, r5, r3
 8004d06:	3a01      	subs	r2, #1
 8004d08:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d0a:	300f      	adds	r0, #15
 8004d0c:	f00d fe95 	bl	8012a3a <atoi>
 8004d10:	7832      	ldrb	r2, [r6, #0]
 8004d12:	b2c0      	uxtb	r0, r0
 8004d14:	0093      	lsls	r3, r2, #2
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d1c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d1e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d20:	9305      	str	r3, [sp, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	2200      	movs	r2, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	9304      	str	r3, [sp, #16]
 8004d2a:	9303      	str	r3, [sp, #12]
 8004d2c:	9302      	str	r3, [sp, #8]
 8004d2e:	9001      	str	r0, [sp, #4]
 8004d30:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d32:	4658      	mov	r0, fp
 8004d34:	f003 fc70 	bl	8008618 <SetButtonEvents>
					status =BOS_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	7834      	ldrb	r4, [r6, #0]
 8004d3c:	4698      	mov	r8, r3
 8004d3e:	e781      	b.n	8004c44 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d40:	220d      	movs	r2, #13
 8004d42:	494a      	ldr	r1, [pc, #296]	; (8004e6c <ParseSnippetCondition+0x38c>)
 8004d44:	9807      	ldr	r0, [sp, #28]
 8004d46:	f00e fb85 	bl	8013454 <strncmp>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d000      	beq.n	8004d50 <ParseSnippetCondition+0x270>
 8004d4e:	e779      	b.n	8004c44 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004d50:	465b      	mov	r3, fp
 8004d52:	4a44      	ldr	r2, [pc, #272]	; (8004e64 <ParseSnippetCondition+0x384>)
 8004d54:	00d9      	lsls	r1, r3, #3
 8004d56:	18cb      	adds	r3, r1, r3
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	7958      	ldrb	r0, [r3, #5]
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d05e      	beq.n	8004e1e <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004d60:	799b      	ldrb	r3, [r3, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d100      	bne.n	8004d68 <ParseSnippetCondition+0x288>
 8004d66:	e083      	b.n	8004e70 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004d68:	4459      	add	r1, fp
 8004d6a:	1852      	adds	r2, r2, r1
 8004d6c:	79d3      	ldrb	r3, [r2, #7]
 8004d6e:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d70:	230d      	movs	r3, #13
 8004d72:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004d74:	464b      	mov	r3, r9
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d000      	beq.n	8004d7c <ParseSnippetCondition+0x29c>
 8004d7a:	e763      	b.n	8004c44 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d7c:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d7e:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d80:	4698      	mov	r8, r3
 8004d82:	435c      	muls	r4, r3
 8004d84:	3b06      	subs	r3, #6
 8004d86:	192c      	adds	r4, r5, r4
 8004d88:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d8a:	3010      	adds	r0, #16
 8004d8c:	f00d fe55 	bl	8012a3a <atoi>
 8004d90:	4642      	mov	r2, r8
 8004d92:	7833      	ldrb	r3, [r6, #0]
 8004d94:	b2c0      	uxtb	r0, r0
 8004d96:	4353      	muls	r3, r2
 8004d98:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d9a:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d9c:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	464b      	mov	r3, r9
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9004      	str	r0, [sp, #16]
 8004dae:	001a      	movs	r2, r3
 8004db0:	0019      	movs	r1, r3
 8004db2:	e7be      	b.n	8004d32 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004db4:	2309      	movs	r3, #9
 8004db6:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004db8:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dba:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dbc:	300f      	adds	r0, #15
 8004dbe:	f00d fe3c 	bl	8012a3a <atoi>
 8004dc2:	7831      	ldrb	r1, [r6, #0]
 8004dc4:	b2c3      	uxtb	r3, r0
 8004dc6:	008a      	lsls	r2, r1, #2
 8004dc8:	1852      	adds	r2, r2, r1
 8004dca:	0092      	lsls	r2, r2, #2
 8004dcc:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dce:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd0:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dd2:	9205      	str	r2, [sp, #20]
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	9204      	str	r2, [sp, #16]
 8004dd8:	9203      	str	r2, [sp, #12]
 8004dda:	9202      	str	r2, [sp, #8]
 8004ddc:	9201      	str	r2, [sp, #4]
 8004dde:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004de0:	2200      	movs	r2, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	4658      	mov	r0, fp
 8004de6:	f003 fc17 	bl	8008618 <SetButtonEvents>
 8004dea:	7834      	ldrb	r4, [r6, #0]
 8004dec:	e72a      	b.n	8004c44 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004dee:	230a      	movs	r3, #10
 8004df0:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004df2:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004df4:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004df6:	300f      	adds	r0, #15
 8004df8:	f00d fe1f 	bl	8012a3a <atoi>
 8004dfc:	7832      	ldrb	r2, [r6, #0]
 8004dfe:	b2c0      	uxtb	r0, r0
 8004e00:	0093      	lsls	r3, r2, #2
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e08:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0a:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	4643      	mov	r3, r8
 8004e10:	9000      	str	r0, [sp, #0]
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	9302      	str	r3, [sp, #8]
 8004e18:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e7e0      	b.n	8004de0 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e1e:	230c      	movs	r3, #12
 8004e20:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e22:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e24:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e26:	3010      	adds	r0, #16
 8004e28:	f00d fe07 	bl	8012a3a <atoi>
 8004e2c:	7832      	ldrb	r2, [r6, #0]
 8004e2e:	b2c0      	uxtb	r0, r0
 8004e30:	0093      	lsls	r3, r2, #2
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e38:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3a:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e3c:	9305      	str	r3, [sp, #20]
 8004e3e:	4643      	mov	r3, r8
 8004e40:	9002      	str	r0, [sp, #8]
 8004e42:	9304      	str	r3, [sp, #16]
 8004e44:	9303      	str	r3, [sp, #12]
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e7c8      	b.n	8004de0 <ParseSnippetCondition+0x300>
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	20001180 	.word	0x20001180
 8004e54:	200070c4 	.word	0x200070c4
 8004e58:	08018070 	.word	0x08018070
 8004e5c:	08018bec 	.word	0x08018bec
 8004e60:	080183c0 	.word	0x080183c0
 8004e64:	2000191c 	.word	0x2000191c
 8004e68:	080183d0 	.word	0x080183d0
 8004e6c:	080183e0 	.word	0x080183e0
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e70:	0023      	movs	r3, r4
 8004e72:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e74:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e76:	4453      	add	r3, sl
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	18eb      	adds	r3, r5, r3
 8004e7c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e7e:	3010      	adds	r0, #16
 8004e80:	f00d fddb 	bl	8012a3a <atoi>
 8004e84:	7832      	ldrb	r2, [r6, #0]
 8004e86:	b2c0      	uxtb	r0, r0
 8004e88:	0093      	lsls	r3, r2, #2
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e90:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e92:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9003      	str	r0, [sp, #12]
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	9302      	str	r3, [sp, #8]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	e744      	b.n	8004d32 <ParseSnippetCondition+0x252>

08004ea8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	46de      	mov	lr, fp
 8004eac:	4657      	mov	r7, sl
 8004eae:	4645      	mov	r5, r8
 8004eb0:	464e      	mov	r6, r9
 8004eb2:	468a      	mov	sl, r1
 8004eb4:	b5e0      	push	{r5, r6, r7, lr}
 8004eb6:	b08b      	sub	sp, #44	; 0x2c
 8004eb8:	9002      	str	r0, [sp, #8]
 8004eba:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	2209      	movs	r2, #9
 8004ec0:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ec2:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004ec4:	f00e f888 	bl	8012fd8 <memset>
 8004ec8:	4bcd      	ldr	r3, [pc, #820]	; (8005200 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004eca:	4656      	mov	r6, sl
 8004ecc:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ece:	4bcd      	ldr	r3, [pc, #820]	; (8005204 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004ed0:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ed2:	469b      	mov	fp, r3
 8004ed4:	e02d      	b.n	8004f32 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	49cb      	ldr	r1, [pc, #812]	; (8005208 <CLI_CommandParser+0x360>)
 8004eda:	0028      	movs	r0, r5
 8004edc:	f00e faba 	bl	8013454 <strncmp>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d057      	beq.n	8004f94 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004ee4:	2f02      	cmp	r7, #2
 8004ee6:	d100      	bne.n	8004eea <CLI_CommandParser+0x42>
 8004ee8:	e0d2      	b.n	8005090 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004eea:	212e      	movs	r1, #46	; 0x2e
 8004eec:	0028      	movs	r0, r5
 8004eee:	f00e fa9b 	bl	8013428 <strchr>
 8004ef2:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ef4:	d007      	beq.n	8004f06 <CLI_CommandParser+0x5e>
 8004ef6:	3803      	subs	r0, #3
 8004ef8:	2203      	movs	r2, #3
 8004efa:	4659      	mov	r1, fp
 8004efc:	f00e faaa 	bl	8013454 <strncmp>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d000      	beq.n	8004f06 <CLI_CommandParser+0x5e>
 8004f04:	e079      	b.n	8004ffa <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f06:	2299      	movs	r2, #153	; 0x99
 8004f08:	0021      	movs	r1, r4
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	0028      	movs	r0, r5
 8004f0e:	f008 fcb9 	bl	800d884 <FreeRTOS_CLIProcessCommand>
 8004f12:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f14:	7823      	ldrb	r3, [r4, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d139      	bne.n	8004f8e <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f1a:	0020      	movs	r0, r4
 8004f1c:	f7fb f8fc 	bl	8000118 <strlen>
 8004f20:	2100      	movs	r1, #0
 8004f22:	0002      	movs	r2, r0
 8004f24:	0020      	movs	r0, r4
 8004f26:	f00e f857 	bl	8012fd8 <memset>
	} while(xReturned != pdFALSE);
 8004f2a:	4653      	mov	r3, sl
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d100      	bne.n	8004f32 <CLI_CommandParser+0x8a>
 8004f30:	e1d0      	b.n	80052d4 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004f32:	0028      	movs	r0, r5
 8004f34:	f7ff fdc0 	bl	8004ab8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004f38:	2336      	movs	r3, #54	; 0x36
 8004f3a:	4699      	mov	r9, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	464a      	mov	r2, r9
 8004f40:	5c9f      	ldrb	r7, [r3, r2]
 8004f42:	2f00      	cmp	r7, #0
 8004f44:	d1c7      	bne.n	8004ed6 <CLI_CommandParser+0x2e>
 8004f46:	3a33      	subs	r2, #51	; 0x33
 8004f48:	49b0      	ldr	r1, [pc, #704]	; (800520c <CLI_CommandParser+0x364>)
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	f00e fa82 	bl	8013454 <strncmp>
 8004f50:	1e07      	subs	r7, r0, #0
 8004f52:	d1ca      	bne.n	8004eea <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f54:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004f56:	f7ff fdc3 	bl	8004ae0 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d000      	beq.n	8004f60 <CLI_CommandParser+0xb8>
 8004f5e:	e09f      	b.n	80050a0 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004f60:	2302      	movs	r3, #2
 8004f62:	4642      	mov	r2, r8
 8004f64:	4649      	mov	r1, r9
 8004f66:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004f68:	330b      	adds	r3, #11
 8004f6a:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	d027      	beq.n	8004fc0 <CLI_CommandParser+0x118>
 8004f70:	2300      	movs	r3, #0
 8004f72:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f74:	0020      	movs	r0, r4
 8004f76:	f7fb f8cf 	bl	8000118 <strlen>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	425b      	negs	r3, r3
 8004f7e:	b282      	uxth	r2, r0
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	0021      	movs	r1, r4
 8004f84:	3333      	adds	r3, #51	; 0x33
 8004f86:	9802      	ldr	r0, [sp, #8]
 8004f88:	f008 fa9c 	bl	800d4c4 <writePxMutex>
 8004f8c:	e7c5      	b.n	8004f1a <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d0c3      	beq.n	8004f1a <CLI_CommandParser+0x72>
 8004f92:	e7ef      	b.n	8004f74 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004f94:	4643      	mov	r3, r8
 8004f96:	464a      	mov	r2, r9
 8004f98:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004f9a:	781a      	ldrb	r2, [r3, #0]
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	0093      	lsls	r3, r2, #2
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	4a9b      	ldr	r2, [pc, #620]	; (8005210 <CLI_CommandParser+0x368>)
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	18d3      	adds	r3, r2, r3
 8004fa8:	2201      	movs	r2, #1
 8004faa:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fac:	f006 fa80 	bl	800b4b0 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004fb0:	2241      	movs	r2, #65	; 0x41
 8004fb2:	4998      	ldr	r1, [pc, #608]	; (8005214 <CLI_CommandParser+0x36c>)
 8004fb4:	0020      	movs	r0, r4
 8004fb6:	f00e f806 	bl	8012fc6 <memcpy>
 8004fba:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1d5      	bne.n	8004f6c <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fc0:	0020      	movs	r0, r4
 8004fc2:	f7fb f8a9 	bl	8000118 <strlen>
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	0002      	movs	r2, r0
 8004fca:	0020      	movs	r0, r4
 8004fcc:	46b2      	mov	sl, r6
 8004fce:	f00e f803 	bl	8012fd8 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004fd2:	2209      	movs	r2, #9
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	a807      	add	r0, sp, #28
 8004fd8:	f00d fffe 	bl	8012fd8 <memset>
	if(!recordSnippet && enableOutput)
 8004fdc:	2336      	movs	r3, #54	; 0x36
 8004fde:	4642      	mov	r2, r8
 8004fe0:	5cd3      	ldrb	r3, [r2, r3]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <CLI_CommandParser+0x144>
 8004fe6:	4653      	mov	r3, sl
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d16a      	bne.n	80050c2 <CLI_CommandParser+0x21a>
}
 8004fec:	b00b      	add	sp, #44	; 0x2c
 8004fee:	bc3c      	pop	{r2, r3, r4, r5}
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	4699      	mov	r9, r3
 8004ff4:	46a2      	mov	sl, r4
 8004ff6:	46ab      	mov	fp, r5
 8004ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ffa:	f00d fd89 	bl	8012b10 <__locale_ctype_ptr>
 8004ffe:	787b      	ldrb	r3, [r7, #1]
 8005000:	18c0      	adds	r0, r0, r3
 8005002:	7843      	ldrb	r3, [r0, #1]
 8005004:	075b      	lsls	r3, r3, #29
 8005006:	d500      	bpl.n	800500a <CLI_CommandParser+0x162>
 8005008:	e77d      	b.n	8004f06 <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 800500a:	1b7a      	subs	r2, r7, r5
 800500c:	0029      	movs	r1, r5
 800500e:	a807      	add	r0, sp, #28
 8005010:	f00e fa31 	bl	8013476 <strncpy>
				id =GetID(idString);
 8005014:	a807      	add	r0, sp, #28
 8005016:	f7ff f8e3 	bl	80041e0 <GetID>
				if(id == myID){
 800501a:	4b7f      	ldr	r3, [pc, #508]	; (8005218 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 800501c:	9003      	str	r0, [sp, #12]
				if(id == myID){
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4298      	cmp	r0, r3
 8005024:	d057      	beq.n	80050d6 <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	2b64      	cmp	r3, #100	; 0x64
 800502a:	d100      	bne.n	800502e <CLI_CommandParser+0x186>
 800502c:	e0da      	b.n	80051e4 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	2b66      	cmp	r3, #102	; 0x66
 8005032:	d100      	bne.n	8005036 <CLI_CommandParser+0x18e>
 8005034:	e0dd      	b.n	80051f2 <CLI_CommandParser+0x34a>
 8005036:	1c7b      	adds	r3, r7, #1
 8005038:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	2bff      	cmp	r3, #255	; 0xff
 800503e:	d100      	bne.n	8005042 <CLI_CommandParser+0x19a>
 8005040:	e08b      	b.n	800515a <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8005042:	466b      	mov	r3, sp
 8005044:	7b1b      	ldrb	r3, [r3, #12]
 8005046:	4699      	mov	r9, r3
 8005048:	2bfe      	cmp	r3, #254	; 0xfe
 800504a:	d100      	bne.n	800504e <CLI_CommandParser+0x1a6>
 800504c:	e102      	b.n	8005254 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 800504e:	2206      	movs	r2, #6
 8005050:	4972      	ldr	r1, [pc, #456]	; (800521c <CLI_CommandParser+0x374>)
 8005052:	9804      	ldr	r0, [sp, #16]
 8005054:	f00e f9fe 	bl	8013454 <strncmp>
 8005058:	2800      	cmp	r0, #0
 800505a:	d144      	bne.n	80050e6 <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800505c:	4b70      	ldr	r3, [pc, #448]	; (8005220 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 800505e:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005060:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005062:	2119      	movs	r1, #25
 8005064:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005066:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8005068:	f004 fcf0 	bl	8009a4c <SendMessageToModule>
						osDelay(100);
 800506c:	2064      	movs	r0, #100	; 0x64
 800506e:	f008 fb75 	bl	800d75c <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8005072:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <CLI_CommandParser+0x37c>)
 8005074:	4649      	mov	r1, r9
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	4b67      	ldr	r3, [pc, #412]	; (8005218 <CLI_CommandParser+0x370>)
 800507a:	7818      	ldrb	r0, [r3, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	f7fe fd5f 	bl	8003b40 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005082:	4653      	mov	r3, sl
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b60      	cmp	r3, #96	; 0x60
 8005088:	d100      	bne.n	800508c <CLI_CommandParser+0x1e4>
 800508a:	e095      	b.n	80051b8 <CLI_CommandParser+0x310>
 800508c:	7823      	ldrb	r3, [r4, #0]
 800508e:	e795      	b.n	8004fbc <CLI_CommandParser+0x114>
 8005090:	0028      	movs	r0, r5
 8005092:	f7ff fcb9 	bl	8004a08 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8005096:	2800      	cmp	r0, #0
 8005098:	d10c      	bne.n	80050b4 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 800509a:	230d      	movs	r3, #13
 800509c:	7023      	strb	r3, [r4, #0]
 800509e:	e765      	b.n	8004f6c <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050a0:	2252      	movs	r2, #82	; 0x52
 80050a2:	4961      	ldr	r1, [pc, #388]	; (8005228 <CLI_CommandParser+0x380>)
 80050a4:	0020      	movs	r0, r4
 80050a6:	f00d ff8e 	bl	8012fc6 <memcpy>
				recordSnippet =0;
 80050aa:	4643      	mov	r3, r8
 80050ac:	464a      	mov	r2, r9
 80050ae:	549f      	strb	r7, [r3, r2]
 80050b0:	7823      	ldrb	r3, [r4, #0]
 80050b2:	e783      	b.n	8004fbc <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050b4:	2252      	movs	r2, #82	; 0x52
 80050b6:	495c      	ldr	r1, [pc, #368]	; (8005228 <CLI_CommandParser+0x380>)
 80050b8:	0020      	movs	r0, r4
 80050ba:	f00d ff84 	bl	8012fc6 <memcpy>
 80050be:	7823      	ldrb	r3, [r4, #0]
 80050c0:	e77c      	b.n	8004fbc <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050c2:	2301      	movs	r3, #1
 80050c4:	425b      	negs	r3, r3
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2238      	movs	r2, #56	; 0x38
 80050ca:	3333      	adds	r3, #51	; 0x33
 80050cc:	4957      	ldr	r1, [pc, #348]	; (800522c <CLI_CommandParser+0x384>)
 80050ce:	9802      	ldr	r0, [sp, #8]
 80050d0:	f008 f9f8 	bl	800d4c4 <writePxMutex>
}
 80050d4:	e78a      	b.n	8004fec <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050d6:	2299      	movs	r2, #153	; 0x99
 80050d8:	1c78      	adds	r0, r7, #1
 80050da:	0092      	lsls	r2, r2, #2
 80050dc:	0021      	movs	r1, r4
 80050de:	f008 fbd1 	bl	800d884 <FreeRTOS_CLIProcessCommand>
 80050e2:	4682      	mov	sl, r0
 80050e4:	e716      	b.n	8004f14 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050e6:	0028      	movs	r0, r5
 80050e8:	f7fb f816 	bl	8000118 <strlen>
 80050ec:	0007      	movs	r7, r0
 80050ee:	a807      	add	r0, sp, #28
 80050f0:	f7fb f812 	bl	8000118 <strlen>
 80050f4:	4682      	mov	sl, r0
 80050f6:	1e7a      	subs	r2, r7, #1
 80050f8:	1a12      	subs	r2, r2, r0
 80050fa:	9904      	ldr	r1, [sp, #16]
 80050fc:	484c      	ldr	r0, [pc, #304]	; (8005230 <CLI_CommandParser+0x388>)
 80050fe:	f00e f9ba 	bl	8013476 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005102:	0028      	movs	r0, r5
 8005104:	f7fb f808 	bl	8000118 <strlen>
 8005108:	4653      	mov	r3, sl
 800510a:	3801      	subs	r0, #1
 800510c:	1ac2      	subs	r2, r0, r3
 800510e:	b292      	uxth	r2, r2
 8005110:	2117      	movs	r1, #23
 8005112:	4648      	mov	r0, r9
 8005114:	f004 fc9a 	bl	8009a4c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005118:	9a03      	ldr	r2, [sp, #12]
 800511a:	4946      	ldr	r1, [pc, #280]	; (8005234 <CLI_CommandParser+0x38c>)
 800511c:	0020      	movs	r0, r4
 800511e:	f00e f955 	bl	80133cc <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005122:	7823      	ldrb	r3, [r4, #0]
 8005124:	0020      	movs	r0, r4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <CLI_CommandParser+0x29e>
 800512a:	f7fa fff5 	bl	8000118 <strlen>
 800512e:	0002      	movs	r2, r0
 8005130:	2e00      	cmp	r6, #0
 8005132:	d00b      	beq.n	800514c <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005134:	2301      	movs	r3, #1
 8005136:	b282      	uxth	r2, r0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	0021      	movs	r1, r4
 800513c:	3331      	adds	r3, #49	; 0x31
 800513e:	9802      	ldr	r0, [sp, #8]
 8005140:	f008 f9c0 	bl	800d4c4 <writePxMutex>
 8005144:	0020      	movs	r0, r4
 8005146:	f7fa ffe7 	bl	8000118 <strlen>
 800514a:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800514c:	2100      	movs	r1, #0
 800514e:	0020      	movs	r0, r4
 8005150:	f00d ff42 	bl	8012fd8 <memset>
 8005154:	4b32      	ldr	r3, [pc, #200]	; (8005220 <CLI_CommandParser+0x378>)
 8005156:	469a      	mov	sl, r3
 8005158:	e793      	b.n	8005082 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800515a:	221a      	movs	r2, #26
 800515c:	2100      	movs	r1, #0
 800515e:	4836      	ldr	r0, [pc, #216]	; (8005238 <CLI_CommandParser+0x390>)
 8005160:	f00d ff3a 	bl	8012fd8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005164:	0028      	movs	r0, r5
 8005166:	f7fa ffd7 	bl	8000118 <strlen>
 800516a:	0007      	movs	r7, r0
 800516c:	a807      	add	r0, sp, #28
 800516e:	f7fa ffd3 	bl	8000118 <strlen>
 8005172:	4681      	mov	r9, r0
 8005174:	3f01      	subs	r7, #1
 8005176:	1a3a      	subs	r2, r7, r0
 8005178:	9f04      	ldr	r7, [sp, #16]
 800517a:	482d      	ldr	r0, [pc, #180]	; (8005230 <CLI_CommandParser+0x388>)
 800517c:	0039      	movs	r1, r7
 800517e:	f00e f97a 	bl	8013476 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005182:	0028      	movs	r0, r5
 8005184:	f7fa ffc8 	bl	8000118 <strlen>
 8005188:	464b      	mov	r3, r9
 800518a:	1ac3      	subs	r3, r0, r3
 800518c:	b29b      	uxth	r3, r3
 800518e:	2217      	movs	r2, #23
 8005190:	21ff      	movs	r1, #255	; 0xff
 8005192:	9805      	ldr	r0, [sp, #20]
 8005194:	f004 fc14 	bl	80099c0 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005198:	2299      	movs	r2, #153	; 0x99
 800519a:	0021      	movs	r1, r4
 800519c:	0092      	lsls	r2, r2, #2
 800519e:	0038      	movs	r0, r7
 80051a0:	f008 fb70 	bl	800d884 <FreeRTOS_CLIProcessCommand>
 80051a4:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80051a6:	0020      	movs	r0, r4
 80051a8:	f7fa ffb6 	bl	8000118 <strlen>
 80051ac:	221d      	movs	r2, #29
 80051ae:	1820      	adds	r0, r4, r0
 80051b0:	4922      	ldr	r1, [pc, #136]	; (800523c <CLI_CommandParser+0x394>)
 80051b2:	f00d ff08 	bl	8012fc6 <memcpy>
 80051b6:	e6ad      	b.n	8004f14 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051b8:	21fa      	movs	r1, #250	; 0xfa
 80051ba:	2001      	movs	r0, #1
 80051bc:	0089      	lsls	r1, r1, #2
 80051be:	f009 fe3f 	bl	800ee40 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <CLI_CommandParser+0x398>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d100      	bne.n	80051cc <CLI_CommandParser+0x324>
 80051ca:	e75f      	b.n	800508c <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051ce:	491e      	ldr	r1, [pc, #120]	; (8005248 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 80051d0:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d2:	0020      	movs	r0, r4
							++timedoutMsg;
 80051d4:	3301      	adds	r3, #1
 80051d6:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	0022      	movs	r2, r4
 80051dc:	f00e f8f6 	bl	80133cc <sprintf>
 80051e0:	7823      	ldrb	r3, [r4, #0]
 80051e2:	e6eb      	b.n	8004fbc <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051e4:	2227      	movs	r2, #39	; 0x27
 80051e6:	4919      	ldr	r1, [pc, #100]	; (800524c <CLI_CommandParser+0x3a4>)
 80051e8:	0020      	movs	r0, r4
 80051ea:	f00d feec 	bl	8012fc6 <memcpy>
 80051ee:	7823      	ldrb	r3, [r4, #0]
 80051f0:	e6e4      	b.n	8004fbc <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 80051f2:	2225      	movs	r2, #37	; 0x25
 80051f4:	4916      	ldr	r1, [pc, #88]	; (8005250 <CLI_CommandParser+0x3a8>)
 80051f6:	0020      	movs	r0, r4
 80051f8:	f00d fee5 	bl	8012fc6 <memcpy>
 80051fc:	7823      	ldrb	r3, [r4, #0]
 80051fe:	e6dd      	b.n	8004fbc <CLI_CommandParser+0x114>
 8005200:	20001180 	.word	0x20001180
 8005204:	08018494 	.word	0x08018494
 8005208:	08018448 	.word	0x08018448
 800520c:	080183f0 	.word	0x080183f0
 8005210:	200070c4 	.word	0x200070c4
 8005214:	08018450 	.word	0x08018450
 8005218:	20000a98 	.word	0x20000a98
 800521c:	08018534 	.word	0x08018534
 8005220:	20007028 	.word	0x20007028
 8005224:	20000c28 	.word	0x20000c28
 8005228:	080183f4 	.word	0x080183f4
 800522c:	08018580 	.word	0x08018580
 8005230:	20000b3c 	.word	0x20000b3c
 8005234:	0801853c 	.word	0x0801853c
 8005238:	20000de0 	.word	0x20000de0
 800523c:	080184e8 	.word	0x080184e8
 8005240:	20000c3c 	.word	0x20000c3c
 8005244:	20001bce 	.word	0x20001bce
 8005248:	08018560 	.word	0x08018560
 800524c:	08018498 	.word	0x08018498
 8005250:	080184c0 	.word	0x080184c0
					group =id >> 8;
 8005254:	4640      	mov	r0, r8
 8005256:	2237      	movs	r2, #55	; 0x37
 8005258:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800525a:	2100      	movs	r1, #0
					group =id >> 8;
 800525c:	121f      	asrs	r7, r3, #8
 800525e:	b2fb      	uxtb	r3, r7
 8005260:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005262:	3a1d      	subs	r2, #29
 8005264:	481c      	ldr	r0, [pc, #112]	; (80052d8 <CLI_CommandParser+0x430>)
					group =id >> 8;
 8005266:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005268:	f00d feb6 	bl	8012fd8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800526c:	0028      	movs	r0, r5
 800526e:	f7fa ff53 	bl	8000118 <strlen>
 8005272:	0007      	movs	r7, r0
 8005274:	a807      	add	r0, sp, #28
 8005276:	f7fa ff4f 	bl	8000118 <strlen>
 800527a:	4681      	mov	r9, r0
 800527c:	3f01      	subs	r7, #1
 800527e:	1a3a      	subs	r2, r7, r0
 8005280:	9904      	ldr	r1, [sp, #16]
 8005282:	4816      	ldr	r0, [pc, #88]	; (80052dc <CLI_CommandParser+0x434>)
 8005284:	f00e f8f7 	bl	8013476 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005288:	0028      	movs	r0, r5
 800528a:	f7fa ff45 	bl	8000118 <strlen>
 800528e:	464f      	mov	r7, r9
 8005290:	1bc3      	subs	r3, r0, r7
 8005292:	b29b      	uxth	r3, r3
 8005294:	2217      	movs	r2, #23
 8005296:	9903      	ldr	r1, [sp, #12]
 8005298:	9805      	ldr	r0, [sp, #20]
 800529a:	f004 fb91 	bl	80099c0 <BroadcastMessage>
					if(InGroup(myID,group))
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <CLI_CommandParser+0x438>)
 80052a0:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <CLI_CommandParser+0x43c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	4641      	mov	r1, r8
 80052a6:	3b01      	subs	r3, #1
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	5a9b      	ldrh	r3, [r3, r2]
 80052ac:	2237      	movs	r2, #55	; 0x37
 80052ae:	5c8a      	ldrb	r2, [r1, r2]
 80052b0:	4113      	asrs	r3, r2
 80052b2:	07db      	lsls	r3, r3, #31
 80052b4:	d406      	bmi.n	80052c4 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80052b6:	ab07      	add	r3, sp, #28
 80052b8:	0022      	movs	r2, r4
 80052ba:	490b      	ldr	r1, [pc, #44]	; (80052e8 <CLI_CommandParser+0x440>)
 80052bc:	0020      	movs	r0, r4
 80052be:	f00e f885 	bl	80133cc <sprintf>
 80052c2:	e627      	b.n	8004f14 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052c4:	2299      	movs	r2, #153	; 0x99
 80052c6:	0021      	movs	r1, r4
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	9804      	ldr	r0, [sp, #16]
 80052cc:	f008 fada 	bl	800d884 <FreeRTOS_CLIProcessCommand>
 80052d0:	4682      	mov	sl, r0
 80052d2:	e7f0      	b.n	80052b6 <CLI_CommandParser+0x40e>
 80052d4:	46b2      	mov	sl, r6
 80052d6:	e67c      	b.n	8004fd2 <CLI_CommandParser+0x12a>
 80052d8:	20000de0 	.word	0x20000de0
 80052dc:	20000b3c 	.word	0x20000b3c
 80052e0:	20000a98 	.word	0x20000a98
 80052e4:	20000a9c 	.word	0x20000a9c
 80052e8:	08018508 	.word	0x08018508

080052ec <prvCLITask>:
void prvCLITask(void *pvParameters){
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	46de      	mov	lr, fp
 80052f0:	4657      	mov	r7, sl
 80052f2:	464e      	mov	r6, r9
 80052f4:	4645      	mov	r5, r8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80052f6:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80052f8:	2300      	movs	r3, #0
void prvCLITask(void *pvParameters){
 80052fa:	b5e0      	push	{r5, r6, r7, lr}
 80052fc:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80052fe:	aa02      	add	r2, sp, #8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005300:	4249      	negs	r1, r1
 8005302:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005304:	73d3      	strb	r3, [r2, #15]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005306:	f009 fd9b 	bl	800ee40 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800530a:	f008 fb33 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800530e:	23e1      	movs	r3, #225	; 0xe1
 8005310:	4a62      	ldr	r2, [pc, #392]	; (800549c <prvCLITask+0x1b0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005312:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005314:	6892      	ldr	r2, [r2, #8]
 8005316:	031b      	lsls	r3, r3, #12
 8005318:	429a      	cmp	r2, r3
 800531a:	d011      	beq.n	8005340 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800531c:	2501      	movs	r5, #1
 800531e:	4b60      	ldr	r3, [pc, #384]	; (80054a0 <prvCLITask+0x1b4>)
 8005320:	7819      	ldrb	r1, [r3, #0]
 8005322:	9302      	str	r3, [sp, #8]
			if(port != PcPort)
 8005324:	428d      	cmp	r5, r1
 8005326:	d006      	beq.n	8005336 <prvCLITask+0x4a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005328:	21e1      	movs	r1, #225	; 0xe1
 800532a:	0028      	movs	r0, r5
 800532c:	0309      	lsls	r1, r1, #12
 800532e:	f008 f93f 	bl	800d5b0 <UpdateBaudrate>
 8005332:	9b02      	ldr	r3, [sp, #8]
 8005334:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005336:	3501      	adds	r5, #1
 8005338:	b2ed      	uxtb	r5, r5
 800533a:	2d07      	cmp	r5, #7
 800533c:	d1f2      	bne.n	8005324 <prvCLITask+0x38>
 800533e:	e002      	b.n	8005346 <prvCLITask+0x5a>
 8005340:	4b57      	ldr	r3, [pc, #348]	; (80054a0 <prvCLITask+0x1b4>)
 8005342:	7819      	ldrb	r1, [r3, #0]
 8005344:	9302      	str	r3, [sp, #8]
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005346:	4b57      	ldr	r3, [pc, #348]	; (80054a4 <prvCLITask+0x1b8>)
 8005348:	4d57      	ldr	r5, [pc, #348]	; (80054a8 <prvCLITask+0x1bc>)
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	3538      	adds	r5, #56	; 0x38
 800534e:	0053      	lsls	r3, r2, #1
 8005350:	189b      	adds	r3, r3, r2
 8005352:	4a56      	ldr	r2, [pc, #344]	; (80054ac <prvCLITask+0x1c0>)
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	189b      	adds	r3, r3, r2
 8005358:	4a55      	ldr	r2, [pc, #340]	; (80054b0 <prvCLITask+0x1c4>)
 800535a:	0028      	movs	r0, r5
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	9100      	str	r1, [sp, #0]
 8005360:	4954      	ldr	r1, [pc, #336]	; (80054b4 <prvCLITask+0x1c8>)
 8005362:	f00e f833 	bl	80133cc <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005366:	22a4      	movs	r2, #164	; 0xa4
 8005368:	9c02      	ldr	r4, [sp, #8]
 800536a:	230a      	movs	r3, #10
 800536c:	0092      	lsls	r2, r2, #2
 800536e:	4952      	ldr	r1, [pc, #328]	; (80054b8 <prvCLITask+0x1cc>)
 8005370:	7820      	ldrb	r0, [r4, #0]
 8005372:	f008 f8d9 	bl	800d528 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005376:	0028      	movs	r0, r5
 8005378:	f7fa fece 	bl	8000118 <strlen>
 800537c:	230a      	movs	r3, #10
 800537e:	b282      	uxth	r2, r0
 8005380:	0029      	movs	r1, r5
 8005382:	7820      	ldrb	r0, [r4, #0]
 8005384:	f008 f8d0 	bl	800d528 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005388:	2300      	movs	r3, #0
 800538a:	4a4c      	ldr	r2, [pc, #304]	; (80054bc <prvCLITask+0x1d0>)
				UARTRxBuf[PcPort - 1][chr] =0;
 800538c:	2600      	movs	r6, #0
 800538e:	4690      	mov	r8, r2
 8005390:	4699      	mov	r9, r3
 8005392:	4d4b      	ldr	r5, [pc, #300]	; (80054c0 <prvCLITask+0x1d4>)
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005394:	9b02      	ldr	r3, [sp, #8]
 8005396:	781f      	ldrb	r7, [r3, #0]
 8005398:	1e7c      	subs	r4, r7, #1
 800539a:	5d28      	ldrb	r0, [r5, r4]
 800539c:	b283      	uxth	r3, r0
 800539e:	2bbf      	cmp	r3, #191	; 0xbf
 80053a0:	d81d      	bhi.n	80053de <prvCLITask+0xf2>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053a2:	0062      	lsls	r2, r4, #1
 80053a4:	1911      	adds	r1, r2, r4
 80053a6:	0189      	lsls	r1, r1, #6
 80053a8:	4441      	add	r1, r8
 80053aa:	4692      	mov	sl, r2
 80053ac:	5c0a      	ldrb	r2, [r1, r0]
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d10d      	bne.n	80053ce <prvCLITask+0xe2>
 80053b2:	1c4a      	adds	r2, r1, #1
 80053b4:	4693      	mov	fp, r2
			if(chr == MSG_RX_BUF_SIZE - 1){
 80053b6:	2bbf      	cmp	r3, #191	; 0xbf
 80053b8:	d135      	bne.n	8005426 <prvCLITask+0x13a>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053ba:	465b      	mov	r3, fp
 80053bc:	781a      	ldrb	r2, [r3, #0]
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80053be:	552e      	strb	r6, [r5, r4]
			if(UARTRxBuf[PcPort - 1][chr]){
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	d160      	bne.n	8005486 <prvCLITask+0x19a>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80053c4:	2302      	movs	r3, #2
			if(UARTRxBuf[PcPort - 1][chr]){
 80053c6:	5cca      	ldrb	r2, [r1, r3]
 80053c8:	0018      	movs	r0, r3
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d0f3      	beq.n	80053b6 <prvCLITask+0xca>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80053ce:	a902      	add	r1, sp, #8
 80053d0:	73ca      	strb	r2, [r1, #15]
				UARTRxBuf[PcPort - 1][chr] =0;
 80053d2:	4652      	mov	r2, sl
 80053d4:	1912      	adds	r2, r2, r4
 80053d6:	0192      	lsls	r2, r2, #6
 80053d8:	4442      	add	r2, r8
 80053da:	5416      	strb	r6, [r2, r0]
				UARTRxBufIndex[PcPort - 1] =chr;
 80053dc:	552b      	strb	r3, [r5, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80053de:	a802      	add	r0, sp, #8
 80053e0:	4684      	mov	ip, r0
 80053e2:	210f      	movs	r1, #15
 80053e4:	230a      	movs	r3, #10
 80053e6:	2201      	movs	r2, #1
 80053e8:	4461      	add	r1, ip
 80053ea:	0038      	movs	r0, r7
 80053ec:	f008 f89c 	bl	800d528 <writePxITMutex>
		if(cRxedChar == '\r'){
 80053f0:	ab02      	add	r3, sp, #8
 80053f2:	7bdb      	ldrb	r3, [r3, #15]
 80053f4:	2b0d      	cmp	r3, #13
 80053f6:	d026      	beq.n	8005446 <prvCLITask+0x15a>
			if(cRxedChar == '\n'){
 80053f8:	2b0a      	cmp	r3, #10
 80053fa:	d011      	beq.n	8005420 <prvCLITask+0x134>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d015      	beq.n	800542c <prvCLITask+0x140>
 8005400:	2b7f      	cmp	r3, #127	; 0x7f
 8005402:	d013      	beq.n	800542c <prvCLITask+0x140>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005404:	001a      	movs	r2, r3
 8005406:	3a20      	subs	r2, #32
 8005408:	2a5e      	cmp	r2, #94	; 0x5e
 800540a:	d809      	bhi.n	8005420 <prvCLITask+0x134>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 800540c:	464a      	mov	r2, r9
 800540e:	2a31      	cmp	r2, #49	; 0x31
 8005410:	dc06      	bgt.n	8005420 <prvCLITask+0x134>
						cInputIndex++;
 8005412:	464c      	mov	r4, r9
						cInputString[cInputIndex] =cRxedChar;
 8005414:	4a2b      	ldr	r2, [pc, #172]	; (80054c4 <prvCLITask+0x1d8>)
						cInputIndex++;
 8005416:	3401      	adds	r4, #1
						cInputString[cInputIndex] =cRxedChar;
 8005418:	444a      	add	r2, r9
 800541a:	7513      	strb	r3, [r2, #20]
						cInputIndex++;
 800541c:	b263      	sxtb	r3, r4
 800541e:	4699      	mov	r9, r3
		taskYIELD();
 8005420:	f009 ffc8 	bl	800f3b4 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005424:	e7b6      	b.n	8005394 <prvCLITask+0xa8>
 8005426:	3301      	adds	r3, #1
 8005428:	b29b      	uxth	r3, r3
 800542a:	e7cc      	b.n	80053c6 <prvCLITask+0xda>
				if(cInputIndex > 0){
 800542c:	464b      	mov	r3, r9
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f6      	beq.n	8005420 <prvCLITask+0x134>
					cInputIndex--;
 8005432:	464c      	mov	r4, r9
 8005434:	3c01      	subs	r4, #1
 8005436:	b2e3      	uxtb	r3, r4
 8005438:	b25a      	sxtb	r2, r3
 800543a:	4691      	mov	r9, r2
					cInputString[cInputIndex] ='\0';
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <prvCLITask+0x1d8>)
 800543e:	4694      	mov	ip, r2
 8005440:	4463      	add	r3, ip
 8005442:	751e      	strb	r6, [r3, #20]
 8005444:	e7ec      	b.n	8005420 <prvCLITask+0x134>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005446:	9b02      	ldr	r3, [sp, #8]
 8005448:	2202      	movs	r2, #2
 800544a:	7818      	ldrb	r0, [r3, #0]
 800544c:	491e      	ldr	r1, [pc, #120]	; (80054c8 <prvCLITask+0x1dc>)
 800544e:	230a      	movs	r3, #10
 8005450:	f008 f86a 	bl	800d528 <writePxITMutex>
			if(cInputIndex == 0){
 8005454:	464b      	mov	r3, r9
 8005456:	2b00      	cmp	r3, #0
 8005458:	d018      	beq.n	800548c <prvCLITask+0x1a0>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800545a:	4c1a      	ldr	r4, [pc, #104]	; (80054c4 <prvCLITask+0x1d8>)
 800545c:	9b02      	ldr	r3, [sp, #8]
 800545e:	3414      	adds	r4, #20
 8005460:	7818      	ldrb	r0, [r3, #0]
 8005462:	0022      	movs	r2, r4
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	2101      	movs	r1, #1
 8005468:	f7ff fd1e 	bl	8004ea8 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800546c:	480e      	ldr	r0, [pc, #56]	; (80054a8 <prvCLITask+0x1bc>)
 800546e:	0021      	movs	r1, r4
 8005470:	3060      	adds	r0, #96	; 0x60
 8005472:	f00d ffe7 	bl	8013444 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005476:	2232      	movs	r2, #50	; 0x32
 8005478:	2100      	movs	r1, #0
 800547a:	0020      	movs	r0, r4
 800547c:	f00d fdac 	bl	8012fd8 <memset>
			cInputIndex =0;
 8005480:	2300      	movs	r3, #0
 8005482:	4699      	mov	r9, r3
 8005484:	e7cc      	b.n	8005420 <prvCLITask+0x134>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005486:	2001      	movs	r0, #1
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005488:	2301      	movs	r3, #1
 800548a:	e7a0      	b.n	80053ce <prvCLITask+0xe2>
				strcpy((char* )cInputString,(char* )cLastInputString);
 800548c:	4906      	ldr	r1, [pc, #24]	; (80054a8 <prvCLITask+0x1bc>)
 800548e:	480d      	ldr	r0, [pc, #52]	; (80054c4 <prvCLITask+0x1d8>)
 8005490:	3160      	adds	r1, #96	; 0x60
 8005492:	3014      	adds	r0, #20
 8005494:	f00d ffd6 	bl	8013444 <strcpy>
 8005498:	e7df      	b.n	800545a <prvCLITask+0x16e>
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	200070a8 	.word	0x200070a8
 80054a0:	20000c28 	.word	0x20000c28
 80054a4:	20000030 	.word	0x20000030
 80054a8:	20001180 	.word	0x20001180
 80054ac:	0801781c 	.word	0x0801781c
 80054b0:	20000a98 	.word	0x20000a98
 80054b4:	080185bc 	.word	0x080185bc
 80054b8:	080185e8 	.word	0x080185e8
 80054bc:	2000138c 	.word	0x2000138c
 80054c0:	2000134c 	.word	0x2000134c
 80054c4:	20001200 	.word	0x20001200
 80054c8:	08019dd8 	.word	0x08019dd8

080054cc <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054d0:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054d2:	781a      	ldrb	r2, [r3, #0]
 80054d4:	3a01      	subs	r2, #1
 80054d6:	0093      	lsls	r3, r2, #2
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <ParseSnippetCommand+0x70>)
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	18d3      	adds	r3, r2, r3
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054e6:	4e16      	ldr	r6, [pc, #88]	; (8005540 <ParseSnippetCommand+0x74>)
 80054e8:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	d016      	beq.n	800551c <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80054ee:	782b      	ldrb	r3, [r5, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00e      	beq.n	8005512 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80054f4:	2113      	movs	r1, #19
 80054f6:	0028      	movs	r0, r5
 80054f8:	f00d ff96 	bl	8013428 <strchr>
 80054fc:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80054fe:	d010      	beq.n	8005522 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005500:	1b42      	subs	r2, r0, r5
 8005502:	0029      	movs	r1, r5
 8005504:	0020      	movs	r0, r4
 8005506:	f00d ffb6 	bl	8013476 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800550a:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 800550c:	3701      	adds	r7, #1
 800550e:	64b7      	str	r7, [r6, #72]	; 0x48
}
 8005510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005512:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 8005514:	2000      	movs	r0, #0
 8005516:	e7fb      	b.n	8005510 <ParseSnippetCommand+0x44>
		return false;
 8005518:	2000      	movs	r0, #0
 800551a:	e7f9      	b.n	8005510 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 800551c:	64b0      	str	r0, [r6, #72]	; 0x48
 800551e:	0005      	movs	r5, r0
 8005520:	e7e5      	b.n	80054ee <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 8005522:	0029      	movs	r1, r5
 8005524:	0020      	movs	r0, r4
 8005526:	f00d ff8d 	bl	8013444 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 800552a:	0020      	movs	r0, r4
 800552c:	f7fa fdf4 	bl	8000118 <strlen>
 8005530:	182d      	adds	r5, r5, r0
 8005532:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 8005534:	2001      	movs	r0, #1
 8005536:	e7eb      	b.n	8005510 <ParseSnippetCommand+0x44>
 8005538:	20001180 	.word	0x20001180
 800553c:	200070c4 	.word	0x200070c4
 8005540:	20001200 	.word	0x20001200

08005544 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005544:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 8005546:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 8005548:	1818      	adds	r0, r3, r0
 800554a:	492e      	ldr	r1, [pc, #184]	; (8005604 <CheckSnippetCondition+0xc0>)
 800554c:	0080      	lsls	r0, r0, #2
 800554e:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005550:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005552:	2b01      	cmp	r3, #1
 8005554:	d020      	beq.n	8005598 <CheckSnippetCondition+0x54>
 8005556:	2b03      	cmp	r3, #3
 8005558:	d11b      	bne.n	8005592 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800555a:	180c      	adds	r4, r1, r0
 800555c:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800555e:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005560:	3a01      	subs	r2, #1
 8005562:	0053      	lsls	r3, r2, #1
 8005564:	189b      	adds	r3, r3, r2
 8005566:	4a28      	ldr	r2, [pc, #160]	; (8005608 <CheckSnippetCondition+0xc4>)
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800556c:	1841      	adds	r1, r0, r1
 800556e:	2204      	movs	r2, #4
 8005570:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005572:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005574:	f00d fd27 	bl	8012fc6 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005578:	7863      	ldrb	r3, [r4, #1]
 800557a:	2b06      	cmp	r3, #6
 800557c:	d809      	bhi.n	8005592 <CheckSnippetCondition+0x4e>
 800557e:	4a23      	ldr	r2, [pc, #140]	; (800560c <CheckSnippetCondition+0xc8>)
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	58d3      	ldr	r3, [r2, r3]
 8005584:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005586:	1c29      	adds	r1, r5, #0
 8005588:	9801      	ldr	r0, [sp, #4]
 800558a:	f7fa ffbb 	bl	8000504 <__aeabi_fcmpgt>
 800558e:	2800      	cmp	r0, #0
 8005590:	d114      	bne.n	80055bc <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005592:	2000      	movs	r0, #0
}
 8005594:	b003      	add	sp, #12
 8005596:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005598:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800559a:	7882      	ldrb	r2, [r0, #2]
 800559c:	78c0      	ldrb	r0, [r0, #3]
 800559e:	00d3      	lsls	r3, r2, #3
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <CheckSnippetCondition+0xcc>)
 80055a4:	5c9b      	ldrb	r3, [r3, r2]
 80055a6:	1a18      	subs	r0, r3, r0
 80055a8:	4243      	negs	r3, r0
 80055aa:	4158      	adcs	r0, r3
 80055ac:	b2c0      	uxtb	r0, r0
 80055ae:	e7f1      	b.n	8005594 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 80055b0:	1c29      	adds	r1, r5, #0
 80055b2:	9801      	ldr	r0, [sp, #4]
 80055b4:	f7fa ff8c 	bl	80004d0 <__aeabi_fcmpeq>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d1ea      	bne.n	8005592 <CheckSnippetCondition+0x4e>
 80055bc:	2100      	movs	r1, #0
 80055be:	1c28      	adds	r0, r5, #0
 80055c0:	f7fa ff86 	bl	80004d0 <__aeabi_fcmpeq>
 80055c4:	4243      	negs	r3, r0
 80055c6:	4158      	adcs	r0, r3
 80055c8:	e7e4      	b.n	8005594 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 80055ca:	1c29      	adds	r1, r5, #0
 80055cc:	9801      	ldr	r0, [sp, #4]
 80055ce:	f7fa ff7f 	bl	80004d0 <__aeabi_fcmpeq>
 80055d2:	1e43      	subs	r3, r0, #1
 80055d4:	4198      	sbcs	r0, r3
 80055d6:	e7dd      	b.n	8005594 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80055d8:	1c29      	adds	r1, r5, #0
 80055da:	9801      	ldr	r0, [sp, #4]
 80055dc:	f7fa ff7e 	bl	80004dc <__aeabi_fcmplt>
 80055e0:	1e43      	subs	r3, r0, #1
 80055e2:	4198      	sbcs	r0, r3
 80055e4:	e7d6      	b.n	8005594 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80055e6:	1c29      	adds	r1, r5, #0
 80055e8:	9801      	ldr	r0, [sp, #4]
 80055ea:	f7fa ff81 	bl	80004f0 <__aeabi_fcmple>
 80055ee:	1e43      	subs	r3, r0, #1
 80055f0:	4198      	sbcs	r0, r3
 80055f2:	e7cf      	b.n	8005594 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80055f4:	1c29      	adds	r1, r5, #0
 80055f6:	9801      	ldr	r0, [sp, #4]
 80055f8:	f7fa ff8e 	bl	8000518 <__aeabi_fcmpge>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d1dd      	bne.n	80055bc <CheckSnippetCondition+0x78>
 8005600:	e7c7      	b.n	8005592 <CheckSnippetCondition+0x4e>
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	200070c4 	.word	0x200070c4
 8005608:	20000094 	.word	0x20000094
 800560c:	080178b4 	.word	0x080178b4
 8005610:	2000191c 	.word	0x2000191c

08005614 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	46de      	mov	lr, fp
 8005618:	464e      	mov	r6, r9
 800561a:	4645      	mov	r5, r8
 800561c:	4657      	mov	r7, sl
 800561e:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005620:	f008 f9a8 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005626:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 8005628:	4698      	mov	r8, r3
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d039      	beq.n	80056a4 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005630:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <ExecuteSnippet+0xa4>)
 8005632:	4f22      	ldr	r7, [pc, #136]	; (80056bc <ExecuteSnippet+0xa8>)
 8005634:	469b      	mov	fp, r3
 8005636:	2320      	movs	r3, #32
 8005638:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800563a:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <ExecuteSnippet+0xac>)
 800563c:	4d21      	ldr	r5, [pc, #132]	; (80056c4 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 800563e:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005640:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005642:	4699      	mov	r9, r3
 8005644:	e006      	b.n	8005654 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005646:	4643      	mov	r3, r8
 8005648:	3401      	adds	r4, #1
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b2a4      	uxth	r4, r4
 800564e:	3514      	adds	r5, #20
 8005650:	42a3      	cmp	r3, r4
 8005652:	d927      	bls.n	80056a4 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005654:	7c2b      	ldrb	r3, [r5, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f5      	beq.n	8005646 <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800565a:	b2e0      	uxtb	r0, r4
 800565c:	f7ff ff72 	bl	8005544 <CheckSnippetCondition>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f0      	beq.n	8005646 <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005664:	465b      	mov	r3, fp
 8005666:	4652      	mov	r2, sl
 8005668:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800566a:	e00e      	b.n	800568a <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800566c:	464b      	mov	r3, r9
 800566e:	003a      	movs	r2, r7
 8005670:	7818      	ldrb	r0, [r3, #0]
 8005672:	2100      	movs	r1, #0
 8005674:	0033      	movs	r3, r6
 8005676:	f7ff fc17 	bl	8004ea8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800567a:	0030      	movs	r0, r6
 800567c:	f7fa fd4c 	bl	8000118 <strlen>
 8005680:	2100      	movs	r1, #0
 8005682:	0002      	movs	r2, r0
 8005684:	0030      	movs	r0, r6
 8005686:	f00d fca7 	bl	8012fd8 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800568a:	0039      	movs	r1, r7
 800568c:	68e8      	ldr	r0, [r5, #12]
 800568e:	f7ff ff1d 	bl	80054cc <ParseSnippetCommand>
 8005692:	2800      	cmp	r0, #0
 8005694:	d1ea      	bne.n	800566c <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005696:	4643      	mov	r3, r8
 8005698:	3401      	adds	r4, #1
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b2a4      	uxth	r4, r4
 800569e:	3514      	adds	r5, #20
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d8d7      	bhi.n	8005654 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	bc3c      	pop	{r2, r3, r4, r5}
 80056a8:	4690      	mov	r8, r2
 80056aa:	4699      	mov	r9, r3
 80056ac:	46a2      	mov	sl, r4
 80056ae:	46ab      	mov	fp, r5
 80056b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	20001180 	.word	0x20001180
 80056b8:	20007028 	.word	0x20007028
 80056bc:	20001200 	.word	0x20001200
 80056c0:	20000c28 	.word	0x20000c28
 80056c4:	200070c4 	.word	0x200070c4

080056c8 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80056c8:	2000      	movs	r0, #0
 80056ca:	4770      	bx	lr

080056cc <setBaudrateCommand>:

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80056cc:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056ce:	b570      	push	{r4, r5, r6, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	0004      	movs	r4, r0
 80056d4:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056d6:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 80056d8:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80056da:	2800      	cmp	r0, #0
 80056dc:	d017      	beq.n	800570e <setBaudrateCommand+0x42>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056de:	466a      	mov	r2, sp
 80056e0:	2101      	movs	r1, #1
 80056e2:	0028      	movs	r0, r5
 80056e4:	f008 f94a 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80056e8:	2300      	movs	r3, #0
 80056ea:	56c3      	ldrsb	r3, [r0, r3]
 80056ec:	2b70      	cmp	r3, #112	; 0x70
 80056ee:	d010      	beq.n	8005712 <setBaudrateCommand+0x46>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056f0:	aa01      	add	r2, sp, #4
 80056f2:	2102      	movs	r1, #2
 80056f4:	0028      	movs	r0, r5
 80056f6:	f008 f941 	bl	800d97c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056fa:	f00d f9a4 	bl	8012a46 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80056fe:	2213      	movs	r2, #19
 8005700:	4910      	ldr	r1, [pc, #64]	; (8005744 <setBaudrateCommand+0x78>)
 8005702:	0020      	movs	r0, r4
 8005704:	f00d fc5f 	bl	8012fc6 <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005708:	2000      	movs	r0, #0
 800570a:	b002      	add	sp, #8
 800570c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800570e:	b672      	cpsid	i
 8005710:	e7fe      	b.n	8005710 <setBaudrateCommand+0x44>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005712:	3001      	adds	r0, #1
 8005714:	f00d f997 	bl	8012a46 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005718:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800571a:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800571c:	2102      	movs	r1, #2
 800571e:	0028      	movs	r0, r5
 8005720:	f008 f92c 	bl	800d97c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005724:	f00d f98f 	bl	8012a46 <atol>
 8005728:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800572a:	b2f0      	uxtb	r0, r6
 800572c:	0029      	movs	r1, r5
 800572e:	f007 ff3f 	bl	800d5b0 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005732:	23ff      	movs	r3, #255	; 0xff
 8005734:	002a      	movs	r2, r5
 8005736:	4033      	ands	r3, r6
 8005738:	4903      	ldr	r1, [pc, #12]	; (8005748 <setBaudrateCommand+0x7c>)
 800573a:	0020      	movs	r0, r4
 800573c:	f00d fe46 	bl	80133cc <sprintf>
 8005740:	e7e2      	b.n	8005708 <setBaudrateCommand+0x3c>
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	080188a4 	.word	0x080188a4
 8005748:	0801887c 	.word	0x0801887c

0800574c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800574c:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800574e:	2800      	cmp	r0, #0
 8005750:	d101      	bne.n	8005756 <flashsizeCommand+0xa>
 8005752:	b672      	cpsid	i
 8005754:	e7fe      	b.n	8005754 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005756:	4b03      	ldr	r3, [pc, #12]	; (8005764 <flashsizeCommand+0x18>)
 8005758:	4903      	ldr	r1, [pc, #12]	; (8005768 <flashsizeCommand+0x1c>)
 800575a:	881a      	ldrh	r2, [r3, #0]
 800575c:	f00d fe36 	bl	80133cc <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005760:	2000      	movs	r0, #0
 8005762:	bd10      	pop	{r4, pc}
 8005764:	1ffff7cc 	.word	0x1ffff7cc
 8005768:	080188b8 	.word	0x080188b8

0800576c <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 800576c:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800576e:	b510      	push	{r4, lr}
 8005770:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 8005772:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005774:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005776:	0004      	movs	r4, r0
	float ADC_Value_CLI =0;
 8005778:	9301      	str	r3, [sp, #4]
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800577a:	0010      	movs	r0, r2
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800577c:	2c00      	cmp	r4, #0
 800577e:	d00f      	beq.n	80057a0 <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005780:	466a      	mov	r2, sp
 8005782:	2101      	movs	r1, #1
 8005784:	f008 f8fa 	bl	800d97c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005788:	7803      	ldrb	r3, [r0, #0]
 800578a:	3b32      	subs	r3, #50	; 0x32
 800578c:	2b01      	cmp	r3, #1
 800578e:	d909      	bls.n	80057a4 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005790:	2215      	movs	r2, #21
 8005792:	490c      	ldr	r1, [pc, #48]	; (80057c4 <GetReadPrecentageCommand+0x58>)
 8005794:	0020      	movs	r0, r4
 8005796:	f00d fc16 	bl	8012fc6 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800579a:	2000      	movs	r0, #0
 800579c:	b002      	add	sp, #8
 800579e:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80057a0:	b672      	cpsid	i
 80057a2:	e7fe      	b.n	80057a2 <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80057a4:	f00d f94f 	bl	8012a46 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80057a8:	a901      	add	r1, sp, #4
 80057aa:	b2c0      	uxtb	r0, r0
 80057ac:	f003 f97a 	bl	8008aa4 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80057b0:	9801      	ldr	r0, [sp, #4]
 80057b2:	f7fd f9b7 	bl	8002b24 <__aeabi_f2d>
 80057b6:	0002      	movs	r2, r0
 80057b8:	000b      	movs	r3, r1
 80057ba:	0020      	movs	r0, r4
 80057bc:	4902      	ldr	r1, [pc, #8]	; (80057c8 <GetReadPrecentageCommand+0x5c>)
 80057be:	f00d fe05 	bl	80133cc <sprintf>
 80057c2:	e7ea      	b.n	800579a <GetReadPrecentageCommand+0x2e>
 80057c4:	080188fc 	.word	0x080188fc
 80057c8:	080188d8 	.word	0x080188d8

080057cc <ReadVrefCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057cc:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057ce:	b510      	push	{r4, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80057d8:	d101      	bne.n	80057de <ReadVrefCommand+0x12>
 80057da:	b672      	cpsid	i
 80057dc:	e7fe      	b.n	80057dc <ReadVrefCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80057de:	a901      	add	r1, sp, #4
 80057e0:	4668      	mov	r0, sp
 80057e2:	f003 f891 	bl	8008908 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057e6:	4669      	mov	r1, sp
 80057e8:	0020      	movs	r0, r4
 80057ea:	f00d fe2b 	bl	8013444 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80057ee:	9801      	ldr	r0, [sp, #4]
 80057f0:	f7fd f998 	bl	8002b24 <__aeabi_f2d>
 80057f4:	0002      	movs	r2, r0
 80057f6:	000b      	movs	r3, r1
 80057f8:	0020      	movs	r0, r4
 80057fa:	4903      	ldr	r1, [pc, #12]	; (8005808 <ReadVrefCommand+0x3c>)
 80057fc:	f00d fde6 	bl	80133cc <sprintf>
}
 8005800:	2000      	movs	r0, #0
 8005802:	b002      	add	sp, #8
 8005804:	bd10      	pop	{r4, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	08018914 	.word	0x08018914

0800580c <ReadTempCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800580c:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800580e:	b510      	push	{r4, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005818:	d101      	bne.n	800581e <ReadTempCommand+0x12>
 800581a:	b672      	cpsid	i
 800581c:	e7fe      	b.n	800581c <ReadTempCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800581e:	a901      	add	r1, sp, #4
 8005820:	4668      	mov	r0, sp
 8005822:	f003 f871 	bl	8008908 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005826:	4669      	mov	r1, sp
 8005828:	0020      	movs	r0, r4
 800582a:	f00d fe0b 	bl	8013444 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 800582e:	9800      	ldr	r0, [sp, #0]
 8005830:	f7fd f978 	bl	8002b24 <__aeabi_f2d>
 8005834:	0002      	movs	r2, r0
 8005836:	000b      	movs	r3, r1
 8005838:	0020      	movs	r0, r4
 800583a:	4903      	ldr	r1, [pc, #12]	; (8005848 <ReadTempCommand+0x3c>)
 800583c:	f00d fdc6 	bl	80133cc <sprintf>
}
 8005840:	2000      	movs	r0, #0
 8005842:	b002      	add	sp, #8
 8005844:	bd10      	pop	{r4, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	0801893c 	.word	0x0801893c

0800584c <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 800584c:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800584e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005850:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005852:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005854:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005856:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005858:	0004      	movs	r4, r0
 800585a:	0016      	movs	r6, r2
	float ADC_Value_CLI =0;
 800585c:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 800585e:	2800      	cmp	r0, #0
 8005860:	d017      	beq.n	8005892 <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005862:	aa01      	add	r2, sp, #4
 8005864:	2101      	movs	r1, #1
 8005866:	0030      	movs	r0, r6
 8005868:	f008 f888 	bl	800d97c <FreeRTOS_CLIGetParameter>
 800586c:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800586e:	aa02      	add	r2, sp, #8
 8005870:	2102      	movs	r1, #2
 8005872:	0030      	movs	r0, r6
 8005874:	f008 f882 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005878:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800587a:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800587c:	3b32      	subs	r3, #50	; 0x32
 800587e:	2b01      	cmp	r3, #1
 8005880:	d909      	bls.n	8005896 <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005882:	2215      	movs	r2, #21
 8005884:	491a      	ldr	r1, [pc, #104]	; (80058f0 <ADCReadCommand+0xa4>)
 8005886:	0020      	movs	r0, r4
 8005888:	f00d fb9d 	bl	8012fc6 <memcpy>
}
 800588c:	2000      	movs	r0, #0
 800588e:	b005      	add	sp, #20
 8005890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005892:	b672      	cpsid	i
 8005894:	e7fe      	b.n	8005894 <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005896:	0028      	movs	r0, r5
 8005898:	f00d f8d5 	bl	8012a46 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800589c:	4e15      	ldr	r6, [pc, #84]	; (80058f4 <ADCReadCommand+0xa8>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800589e:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80058a0:	0031      	movs	r1, r6
 80058a2:	0038      	movs	r0, r7
 80058a4:	f7fa fc2e 	bl	8000104 <strcmp>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d005      	beq.n	80058b8 <ADCReadCommand+0x6c>
 80058ac:	4912      	ldr	r1, [pc, #72]	; (80058f8 <ADCReadCommand+0xac>)
 80058ae:	0038      	movs	r0, r7
 80058b0:	f7fa fc28 	bl	8000104 <strcmp>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d115      	bne.n	80058e4 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 80058b8:	0031      	movs	r1, r6
 80058ba:	0028      	movs	r0, r5
 80058bc:	f003 f9e0 	bl	8008c80 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80058c0:	aa03      	add	r2, sp, #12
 80058c2:	0031      	movs	r1, r6
 80058c4:	0028      	movs	r0, r5
 80058c6:	f003 fa27 	bl	8008d18 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80058ca:	a903      	add	r1, sp, #12
 80058cc:	0020      	movs	r0, r4
 80058ce:	f00d fdb9 	bl	8013444 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80058d2:	9803      	ldr	r0, [sp, #12]
 80058d4:	f7fa fe74 	bl	80005c0 <__aeabi_f2uiz>
 80058d8:	4908      	ldr	r1, [pc, #32]	; (80058fc <ADCReadCommand+0xb0>)
 80058da:	b282      	uxth	r2, r0
 80058dc:	0020      	movs	r0, r4
 80058de:	f00d fd75 	bl	80133cc <sprintf>
 80058e2:	e7d3      	b.n	800588c <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058e4:	2212      	movs	r2, #18
 80058e6:	4906      	ldr	r1, [pc, #24]	; (8005900 <ADCReadCommand+0xb4>)
 80058e8:	0020      	movs	r0, r4
 80058ea:	f00d fb6c 	bl	8012fc6 <memcpy>
 80058ee:	e7cd      	b.n	800588c <ADCReadCommand+0x40>
 80058f0:	080188fc 	.word	0x080188fc
 80058f4:	08018960 	.word	0x08018960
 80058f8:	08018964 	.word	0x08018964
 80058fc:	0801896c 	.word	0x0801896c
 8005900:	0801897c 	.word	0x0801897c

08005904 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	4645      	mov	r5, r8
 8005908:	46de      	mov	lr, fp
 800590a:	4657      	mov	r7, sl
 800590c:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 800590e:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005910:	b5e0      	push	{r5, r6, r7, lr}
 8005912:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005914:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005916:	4b5f      	ldr	r3, [pc, #380]	; (8005a94 <testportCommand+0x190>)
 8005918:	ad02      	add	r5, sp, #8
 800591a:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800591c:	0004      	movs	r4, r0
	char WriteVaule[1] ="H";
 800591e:	702b      	strb	r3, [r5, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005920:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005922:	2c00      	cmp	r4, #0
 8005924:	d100      	bne.n	8005928 <testportCommand+0x24>
 8005926:	e074      	b.n	8005a12 <testportCommand+0x10e>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005928:	2101      	movs	r1, #1
 800592a:	aa03      	add	r2, sp, #12
 800592c:	f008 f826 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005930:	4959      	ldr	r1, [pc, #356]	; (8005a98 <testportCommand+0x194>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005932:	0006      	movs	r6, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005934:	f7fa fbe6 	bl	8000104 <strcmp>
 8005938:	2800      	cmp	r0, #0
 800593a:	d159      	bne.n	80059f0 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800593c:	2701      	movs	r7, #1
 800593e:	4e57      	ldr	r6, [pc, #348]	; (8005a9c <testportCommand+0x198>)
 8005940:	4b57      	ldr	r3, [pc, #348]	; (8005aa0 <testportCommand+0x19c>)
 8005942:	7832      	ldrb	r2, [r6, #0]
 8005944:	189b      	adds	r3, r3, r2
 8005946:	3b01      	subs	r3, #1
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4698      	mov	r8, r3
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800594c:	4b55      	ldr	r3, [pc, #340]	; (8005aa4 <testportCommand+0x1a0>)
 800594e:	469b      	mov	fp, r3
 8005950:	b2fb      	uxtb	r3, r7
 8005952:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <testportCommand+0x64>
 8005958:	3701      	adds	r7, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800595a:	2f07      	cmp	r7, #7
 800595c:	d051      	beq.n	8005a02 <testportCommand+0xfe>
 800595e:	7832      	ldrb	r2, [r6, #0]
 8005960:	b2fb      	uxtb	r3, r7
 8005962:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005964:	429a      	cmp	r2, r3
 8005966:	d0f7      	beq.n	8005958 <testportCommand+0x54>
				WriteVaule[0] =rand();
 8005968:	f00d fb4e 	bl	8013008 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 800596c:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 800596e:	7028      	strb	r0, [r5, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005970:	2201      	movs	r2, #1
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	0029      	movs	r1, r5
 8005976:	4699      	mov	r9, r3
 8005978:	4650      	mov	r0, sl
 800597a:	3b5a      	subs	r3, #90	; 0x5a
 800597c:	f007 fda2 	bl	800d4c4 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005980:	4650      	mov	r0, sl
 8005982:	f007 fe27 	bl	800d5d4 <GetUart>
 8005986:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005988:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800598a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 800598c:	b2db      	uxtb	r3, r3
 800598e:	429a      	cmp	r2, r3
 8005990:	d041      	beq.n	8005a16 <testportCommand+0x112>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005992:	003a      	movs	r2, r7
 8005994:	4944      	ldr	r1, [pc, #272]	; (8005aa8 <testportCommand+0x1a4>)
 8005996:	0020      	movs	r0, r4
 8005998:	f00d fd18 	bl	80133cc <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800599c:	0020      	movs	r0, r4
 800599e:	f7fa fbbb 	bl	8000118 <strlen>
 80059a2:	464b      	mov	r3, r9
 80059a4:	b282      	uxth	r2, r0
 80059a6:	0021      	movs	r1, r4
 80059a8:	7830      	ldrb	r0, [r6, #0]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	230a      	movs	r3, #10
 80059ae:	f007 fd89 	bl	800d4c4 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80059b2:	2254      	movs	r2, #84	; 0x54
 80059b4:	493d      	ldr	r1, [pc, #244]	; (8005aac <testportCommand+0x1a8>)
 80059b6:	0020      	movs	r0, r4
 80059b8:	f00d fb05 	bl	8012fc6 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059bc:	2364      	movs	r3, #100	; 0x64
 80059be:	7830      	ldrb	r0, [r6, #0]
 80059c0:	2253      	movs	r2, #83	; 0x53
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	0021      	movs	r1, r4
 80059c6:	3b5a      	subs	r3, #90	; 0x5a
 80059c8:	f007 fd7c 	bl	800d4c4 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059cc:	2301      	movs	r3, #1
 80059ce:	469c      	mov	ip, r3
 80059d0:	44e0      	add	r8, ip
 80059d2:	e002      	b.n	80059da <testportCommand+0xd6>
					Delay_ms(1);
 80059d4:	2001      	movs	r0, #1
 80059d6:	f009 fe45 	bl	800f664 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059da:	7832      	ldrb	r2, [r6, #0]
 80059dc:	3a01      	subs	r2, #1
 80059de:	0053      	lsls	r3, r2, #1
 80059e0:	189b      	adds	r3, r3, r2
 80059e2:	4642      	mov	r2, r8
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	445b      	add	r3, fp
 80059e8:	5c9b      	ldrb	r3, [r3, r2]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f2      	beq.n	80059d4 <testportCommand+0xd0>
 80059ee:	e7b3      	b.n	8005958 <testportCommand+0x54>
	else if(pcParameterString1[0] == 'p'){
 80059f0:	2300      	movs	r3, #0
 80059f2:	56f3      	ldrsb	r3, [r6, r3]
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d01f      	beq.n	8005a38 <testportCommand+0x134>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059f8:	220f      	movs	r2, #15
 80059fa:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <testportCommand+0x1ac>)
 80059fc:	0020      	movs	r0, r4
 80059fe:	f00d fae2 	bl	8012fc6 <memcpy>
}
 8005a02:	2000      	movs	r0, #0
 8005a04:	b005      	add	sp, #20
 8005a06:	bc3c      	pop	{r2, r3, r4, r5}
 8005a08:	4690      	mov	r8, r2
 8005a0a:	4699      	mov	r9, r3
 8005a0c:	46a2      	mov	sl, r4
 8005a0e:	46ab      	mov	fp, r5
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005a12:	b672      	cpsid	i
 8005a14:	e7fe      	b.n	8005a14 <testportCommand+0x110>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005a16:	003a      	movs	r2, r7
 8005a18:	4926      	ldr	r1, [pc, #152]	; (8005ab4 <testportCommand+0x1b0>)
 8005a1a:	0020      	movs	r0, r4
 8005a1c:	f00d fcd6 	bl	80133cc <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a20:	0020      	movs	r0, r4
 8005a22:	f7fa fb79 	bl	8000118 <strlen>
 8005a26:	464b      	mov	r3, r9
 8005a28:	b282      	uxth	r2, r0
 8005a2a:	0021      	movs	r1, r4
 8005a2c:	7830      	ldrb	r0, [r6, #0]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	3b5a      	subs	r3, #90	; 0x5a
 8005a32:	f007 fd47 	bl	800d4c4 <writePxMutex>
 8005a36:	e7bc      	b.n	80059b2 <testportCommand+0xae>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a38:	1c70      	adds	r0, r6, #1
 8005a3a:	f00d f804 	bl	8012a46 <atol>
 8005a3e:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a40:	1e7b      	subs	r3, r7, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a42:	0006      	movs	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a44:	2b05      	cmp	r3, #5
 8005a46:	d905      	bls.n	8005a54 <testportCommand+0x150>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005a48:	221b      	movs	r2, #27
 8005a4a:	491b      	ldr	r1, [pc, #108]	; (8005ab8 <testportCommand+0x1b4>)
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	f00d faba 	bl	8012fc6 <memcpy>
 8005a52:	e7d6      	b.n	8005a02 <testportCommand+0xfe>
				WriteVaule[0] =rand();
 8005a54:	f00d fad8 	bl	8013008 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a58:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005a5a:	7028      	strb	r0, [r5, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	0029      	movs	r1, r5
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	0038      	movs	r0, r7
 8005a64:	3b32      	subs	r3, #50	; 0x32
 8005a66:	f007 fd2d 	bl	800d4c4 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a6a:	0038      	movs	r0, r7
 8005a6c:	f007 fdb2 	bl	800d5d4 <GetUart>
 8005a70:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005a72:	7829      	ldrb	r1, [r5, #0]
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a76:	b2f2      	uxtb	r2, r6
			if(WriteVaule[0] == ReadValue[0])
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d004      	beq.n	8005a88 <testportCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a7e:	490a      	ldr	r1, [pc, #40]	; (8005aa8 <testportCommand+0x1a4>)
 8005a80:	0020      	movs	r0, r4
 8005a82:	f00d fca3 	bl	80133cc <sprintf>
 8005a86:	e7bc      	b.n	8005a02 <testportCommand+0xfe>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005a88:	490a      	ldr	r1, [pc, #40]	; (8005ab4 <testportCommand+0x1b0>)
 8005a8a:	0020      	movs	r0, r4
 8005a8c:	f00d fc9e 	bl	80133cc <sprintf>
 8005a90:	e7b7      	b.n	8005a02 <testportCommand+0xfe>
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	08017b2c 	.word	0x08017b2c
 8005a98:	08018174 	.word	0x08018174
 8005a9c:	20000c28 	.word	0x20000c28
 8005aa0:	2000134c 	.word	0x2000134c
 8005aa4:	2000138c 	.word	0x2000138c
 8005aa8:	080189ac 	.word	0x080189ac
 8005aac:	080189c0 	.word	0x080189c0
 8005ab0:	08018a30 	.word	0x08018a30
 8005ab4:	08018990 	.word	0x08018990
 8005ab8:	08018a14 	.word	0x08018a14

08005abc <unbridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005abc:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	0004      	movs	r4, r0
 8005ac4:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d019      	beq.n	8005b02 <unbridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ace:	466a      	mov	r2, sp
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	0028      	movs	r0, r5
 8005ad4:	f007 ff52 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005ad8:	2300      	movs	r3, #0
 8005ada:	56c3      	ldrsb	r3, [r0, r3]
 8005adc:	2b70      	cmp	r3, #112	; 0x70
 8005ade:	d012      	beq.n	8005b06 <unbridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ae0:	aa01      	add	r2, sp, #4
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	0028      	movs	r0, r5
 8005ae6:	f007 ff49 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005aea:	2300      	movs	r3, #0
 8005aec:	56c3      	ldrsb	r3, [r0, r3]
 8005aee:	2b70      	cmp	r3, #112	; 0x70
 8005af0:	d029      	beq.n	8005b46 <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005af2:	220f      	movs	r2, #15
 8005af4:	491a      	ldr	r1, [pc, #104]	; (8005b60 <unbridgeCommand+0xa4>)
 8005af6:	0020      	movs	r0, r4
 8005af8:	f00d fa65 	bl	8012fc6 <memcpy>
}
 8005afc:	2000      	movs	r0, #0
 8005afe:	b003      	add	sp, #12
 8005b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005b02:	b672      	cpsid	i
 8005b04:	e7fe      	b.n	8005b04 <unbridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b06:	3001      	adds	r0, #1
 8005b08:	f00c ff9d 	bl	8012a46 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b0c:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b0e:	0006      	movs	r6, r0
 8005b10:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b12:	2102      	movs	r1, #2
 8005b14:	0028      	movs	r0, r5
 8005b16:	f007 ff31 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	56c3      	ldrsb	r3, [r0, r3]
 8005b1e:	2b70      	cmp	r3, #112	; 0x70
 8005b20:	d1e7      	bne.n	8005af2 <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b22:	3001      	adds	r0, #1
 8005b24:	f00c ff8f 	bl	8012a46 <atol>
 8005b28:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005b2a:	b2c1      	uxtb	r1, r0
 8005b2c:	0038      	movs	r0, r7
 8005b2e:	f7fe ff33 	bl	8004998 <Unbridge>
	if(result == BOS_OK)
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d00b      	beq.n	8005b4e <unbridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005b36:	2867      	cmp	r0, #103	; 0x67
 8005b38:	d0db      	beq.n	8005af2 <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005b3a:	2219      	movs	r2, #25
 8005b3c:	4909      	ldr	r1, [pc, #36]	; (8005b64 <unbridgeCommand+0xa8>)
 8005b3e:	0020      	movs	r0, r4
 8005b40:	f00d fa41 	bl	8012fc6 <memcpy>
	return pdFALSE;
 8005b44:	e7da      	b.n	8005afc <unbridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b46:	3001      	adds	r0, #1
 8005b48:	f00c ff7d 	bl	8012a46 <atol>
 8005b4c:	e7d1      	b.n	8005af2 <unbridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b4e:	22ff      	movs	r2, #255	; 0xff
 8005b50:	002b      	movs	r3, r5
 8005b52:	4905      	ldr	r1, [pc, #20]	; (8005b68 <unbridgeCommand+0xac>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	0020      	movs	r0, r4
 8005b58:	4032      	ands	r2, r6
 8005b5a:	f00d fc37 	bl	80133cc <sprintf>
 8005b5e:	e7cd      	b.n	8005afc <unbridgeCommand+0x40>
 8005b60:	08018a30 	.word	0x08018a30
 8005b64:	08018a60 	.word	0x08018a60
 8005b68:	08018a40 	.word	0x08018a40

08005b6c <bridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b6c:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b70:	b083      	sub	sp, #12
 8005b72:	0004      	movs	r4, r0
 8005b74:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d019      	beq.n	8005bb2 <bridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b7e:	466a      	mov	r2, sp
 8005b80:	2101      	movs	r1, #1
 8005b82:	0028      	movs	r0, r5
 8005b84:	f007 fefa 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b88:	2300      	movs	r3, #0
 8005b8a:	56c3      	ldrsb	r3, [r0, r3]
 8005b8c:	2b70      	cmp	r3, #112	; 0x70
 8005b8e:	d012      	beq.n	8005bb6 <bridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b90:	aa01      	add	r2, sp, #4
 8005b92:	2102      	movs	r1, #2
 8005b94:	0028      	movs	r0, r5
 8005b96:	f007 fef1 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	56c3      	ldrsb	r3, [r0, r3]
 8005b9e:	2b70      	cmp	r3, #112	; 0x70
 8005ba0:	d029      	beq.n	8005bf6 <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	491a      	ldr	r1, [pc, #104]	; (8005c10 <bridgeCommand+0xa4>)
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f00d fa0d 	bl	8012fc6 <memcpy>
}
 8005bac:	2000      	movs	r0, #0
 8005bae:	b003      	add	sp, #12
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005bb2:	b672      	cpsid	i
 8005bb4:	e7fe      	b.n	8005bb4 <bridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f00c ff45 	bl	8012a46 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bbc:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bbe:	0006      	movs	r6, r0
 8005bc0:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	0028      	movs	r0, r5
 8005bc6:	f007 fed9 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bca:	2300      	movs	r3, #0
 8005bcc:	56c3      	ldrsb	r3, [r0, r3]
 8005bce:	2b70      	cmp	r3, #112	; 0x70
 8005bd0:	d1e7      	bne.n	8005ba2 <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f00c ff37 	bl	8012a46 <atol>
 8005bd8:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005bda:	b2c1      	uxtb	r1, r0
 8005bdc:	0038      	movs	r0, r7
 8005bde:	f7fe fec7 	bl	8004970 <Bridge>
	if(result == BOS_OK)
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d00b      	beq.n	8005bfe <bridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005be6:	2867      	cmp	r0, #103	; 0x67
 8005be8:	d0db      	beq.n	8005ba2 <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005bea:	2217      	movs	r2, #23
 8005bec:	4909      	ldr	r1, [pc, #36]	; (8005c14 <bridgeCommand+0xa8>)
 8005bee:	0020      	movs	r0, r4
 8005bf0:	f00d f9e9 	bl	8012fc6 <memcpy>
	return pdFALSE;
 8005bf4:	e7da      	b.n	8005bac <bridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f00c ff25 	bl	8012a46 <atol>
 8005bfc:	e7d1      	b.n	8005ba2 <bridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	002b      	movs	r3, r5
 8005c02:	4905      	ldr	r1, [pc, #20]	; (8005c18 <bridgeCommand+0xac>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0020      	movs	r0, r4
 8005c08:	4032      	ands	r2, r6
 8005c0a:	f00d fbdf 	bl	80133cc <sprintf>
 8005c0e:	e7cd      	b.n	8005bac <bridgeCommand+0x40>
 8005c10:	08018a30 	.word	0x08018a30
 8005c14:	08018aa0 	.word	0x08018aa0
 8005c18:	08018a7c 	.word	0x08018a7c

08005c1c <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1e:	464e      	mov	r6, r9
 8005c20:	4645      	mov	r5, r8
 8005c22:	46de      	mov	lr, fp
 8005c24:	4680      	mov	r8, r0
 8005c26:	4657      	mov	r7, sl
	configASSERT(pcWriteBuffer);
 8005c28:	4643      	mov	r3, r8
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c2a:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005c2c:	2600      	movs	r6, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c2e:	b083      	sub	sp, #12
 8005c30:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c32:	9601      	str	r6, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01a      	beq.n	8005c6e <delSnipCommand+0x52>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c38:	aa01      	add	r2, sp, #4
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	f007 fe9e 	bl	800d97c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c40:	f00c fefb 	bl	8012a3a <atoi>
 8005c44:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	d004      	beq.n	8005c54 <delSnipCommand+0x38>
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <delSnipCommand+0xdc>)
 8005c4c:	4699      	mov	r9, r3
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d20e      	bcs.n	8005c72 <delSnipCommand+0x56>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c54:	2223      	movs	r2, #35	; 0x23
 8005c56:	4929      	ldr	r1, [pc, #164]	; (8005cfc <delSnipCommand+0xe0>)
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f00d f9b4 	bl	8012fc6 <memcpy>
}
 8005c5e:	2000      	movs	r0, #0
 8005c60:	b003      	add	sp, #12
 8005c62:	bc3c      	pop	{r2, r3, r4, r5}
 8005c64:	4690      	mov	r8, r2
 8005c66:	4699      	mov	r9, r3
 8005c68:	46a2      	mov	sl, r4
 8005c6a:	46ab      	mov	fp, r5
 8005c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005c6e:	b672      	cpsid	i
 8005c70:	e7fe      	b.n	8005c70 <delSnipCommand+0x54>
		snippets[index - 1].cond.conditionType =0;
 8005c72:	2714      	movs	r7, #20
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <delSnipCommand+0xe4>)
 8005c76:	b2c3      	uxtb	r3, r0
 8005c78:	4692      	mov	sl, r2
 8005c7a:	469b      	mov	fp, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	437b      	muls	r3, r7
 8005c80:	189d      	adds	r5, r3, r2
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c82:	3302      	adds	r3, #2
 8005c84:	4453      	add	r3, sl
 8005c86:	0018      	movs	r0, r3
		snippets[index - 1].cond.conditionType =0;
 8005c88:	802e      	strh	r6, [r5, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f00d f9a3 	bl	8012fd8 <memset>
		snippets[index - 1].state = false;
 8005c92:	742e      	strb	r6, [r5, #16]
		free(snippets[index - 1].cmd);
 8005c94:	68e8      	ldr	r0, [r5, #12]
 8005c96:	f00c ff53 	bl	8012b40 <free>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c9a:	464b      	mov	r3, r9
		snippets[index - 1].cmd = NULL;
 8005c9c:	60ee      	str	r6, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c9e:	781e      	ldrb	r6, [r3, #0]
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d91d      	bls.n	8005ce0 <delSnipCommand+0xc4>
 8005ca4:	465d      	mov	r5, fp
 8005ca6:	4653      	mov	r3, sl
 8005ca8:	3e01      	subs	r6, #1
 8005caa:	1b34      	subs	r4, r6, r4
 8005cac:	b2e4      	uxtb	r4, r4
 8005cae:	445c      	add	r4, fp
 8005cb0:	437d      	muls	r5, r7
 8005cb2:	437c      	muls	r4, r7
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	4455      	add	r5, sl
 8005cb8:	18e4      	adds	r4, r4, r3
 8005cba:	e002      	b.n	8005cc2 <delSnipCommand+0xa6>
 8005cbc:	3514      	adds	r5, #20
 8005cbe:	42a5      	cmp	r5, r4
 8005cc0:	d00f      	beq.n	8005ce2 <delSnipCommand+0xc6>
			if(snippets[s].cond.conditionType){
 8005cc2:	782b      	ldrb	r3, [r5, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f9      	beq.n	8005cbc <delSnipCommand+0xa0>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005cc8:	0028      	movs	r0, r5
 8005cca:	003a      	movs	r2, r7
 8005ccc:	0029      	movs	r1, r5
 8005cce:	3814      	subs	r0, #20
 8005cd0:	f00d f979 	bl	8012fc6 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005cd4:	003a      	movs	r2, r7
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	0028      	movs	r0, r5
 8005cda:	f00d f97d 	bl	8012fd8 <memset>
 8005cde:	e7ed      	b.n	8005cbc <delSnipCommand+0xa0>
 8005ce0:	3e01      	subs	r6, #1
		--numOfRecordedSnippets;
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005ce6:	f005 fbe3 	bl	800b4b0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005cea:	2236      	movs	r2, #54	; 0x36
 8005cec:	4905      	ldr	r1, [pc, #20]	; (8005d04 <delSnipCommand+0xe8>)
 8005cee:	4640      	mov	r0, r8
 8005cf0:	f00d f969 	bl	8012fc6 <memcpy>
 8005cf4:	e7b3      	b.n	8005c5e <delSnipCommand+0x42>
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	20001180 	.word	0x20001180
 8005cfc:	08018af0 	.word	0x08018af0
 8005d00:	200070c4 	.word	0x200070c4
 8005d04:	08018ab8 	.word	0x08018ab8

08005d08 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d08:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005d0a:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d10:	9501      	str	r5, [sp, #4]
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d12:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d14:	2c00      	cmp	r4, #0
 8005d16:	d014      	beq.n	8005d42 <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d18:	aa01      	add	r2, sp, #4
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	f007 fe2e 	bl	800d97c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d20:	f00c fe8b 	bl	8012a3a <atoi>
 8005d24:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <pauseSnipCommand+0x2a>
 8005d2a:	4a0e      	ldr	r2, [pc, #56]	; (8005d64 <pauseSnipCommand+0x5c>)
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d209      	bcs.n	8005d46 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d32:	2223      	movs	r2, #35	; 0x23
 8005d34:	490c      	ldr	r1, [pc, #48]	; (8005d68 <pauseSnipCommand+0x60>)
 8005d36:	0020      	movs	r0, r4
 8005d38:	f00d f945 	bl	8012fc6 <memcpy>
}
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	b003      	add	sp, #12
 8005d40:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8005d42:	b672      	cpsid	i
 8005d44:	e7fe      	b.n	8005d44 <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8005d46:	2314      	movs	r3, #20
 8005d48:	b2c0      	uxtb	r0, r0
 8005d4a:	3801      	subs	r0, #1
 8005d4c:	4343      	muls	r3, r0
 8005d4e:	4807      	ldr	r0, [pc, #28]	; (8005d6c <pauseSnipCommand+0x64>)
 8005d50:	18c0      	adds	r0, r0, r3
 8005d52:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005d54:	f005 fbac 	bl	800b4b0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d58:	2235      	movs	r2, #53	; 0x35
 8005d5a:	4905      	ldr	r1, [pc, #20]	; (8005d70 <pauseSnipCommand+0x68>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00d f932 	bl	8012fc6 <memcpy>
 8005d62:	e7eb      	b.n	8005d3c <pauseSnipCommand+0x34>
 8005d64:	20001180 	.word	0x20001180
 8005d68:	08018af0 	.word	0x08018af0
 8005d6c:	200070c4 	.word	0x200070c4
 8005d70:	08018b14 	.word	0x08018b14

08005d74 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005d74:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d76:	b510      	push	{r4, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d7c:	9301      	str	r3, [sp, #4]
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d7e:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d80:	2c00      	cmp	r4, #0
 8005d82:	d014      	beq.n	8005dae <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d84:	aa01      	add	r2, sp, #4
 8005d86:	2101      	movs	r1, #1
 8005d88:	f007 fdf8 	bl	800d97c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d8c:	f00c fe55 	bl	8012a3a <atoi>
 8005d90:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <actSnipCommand+0x2a>
 8005d96:	4a0f      	ldr	r2, [pc, #60]	; (8005dd4 <actSnipCommand+0x60>)
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d209      	bcs.n	8005db2 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d9e:	2223      	movs	r2, #35	; 0x23
 8005da0:	490d      	ldr	r1, [pc, #52]	; (8005dd8 <actSnipCommand+0x64>)
 8005da2:	0020      	movs	r0, r4
 8005da4:	f00d f90f 	bl	8012fc6 <memcpy>
}
 8005da8:	2000      	movs	r0, #0
 8005daa:	b002      	add	sp, #8
 8005dac:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005dae:	b672      	cpsid	i
 8005db0:	e7fe      	b.n	8005db0 <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8005db2:	2314      	movs	r3, #20
 8005db4:	b2c0      	uxtb	r0, r0
 8005db6:	3801      	subs	r0, #1
 8005db8:	4343      	muls	r3, r0
 8005dba:	4808      	ldr	r0, [pc, #32]	; (8005ddc <actSnipCommand+0x68>)
 8005dbc:	18c0      	adds	r0, r0, r3
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005dc2:	f005 fb75 	bl	800b4b0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005dc6:	2238      	movs	r2, #56	; 0x38
 8005dc8:	4905      	ldr	r1, [pc, #20]	; (8005de0 <actSnipCommand+0x6c>)
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f00d f8fb 	bl	8012fc6 <memcpy>
 8005dd0:	e7ea      	b.n	8005da8 <actSnipCommand+0x34>
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	20001180 	.word	0x20001180
 8005dd8:	08018af0 	.word	0x08018af0
 8005ddc:	200070c4 	.word	0x200070c4
 8005de0:	08018b4c 	.word	0x08018b4c

08005de4 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de6:	464e      	mov	r6, r9
 8005de8:	4645      	mov	r5, r8
 8005dea:	46de      	mov	lr, fp
 8005dec:	4657      	mov	r7, sl
 8005dee:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005df0:	4b70      	ldr	r3, [pc, #448]	; (8005fb4 <snipCommand+0x1d0>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005df2:	b08d      	sub	sp, #52	; 0x34
	char status[2][7] ={"Paused", "Active"};
 8005df4:	4699      	mov	r9, r3
 8005df6:	aa08      	add	r2, sp, #32
 8005df8:	3304      	adds	r3, #4
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dfa:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005dfc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005dfe:	c223      	stmia	r2!, {r0, r1, r5}
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	d100      	bne.n	8005e0a <snipCommand+0x26>
 8005e08:	e0a2      	b.n	8005f50 <snipCommand+0x16c>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005e0a:	4b6b      	ldr	r3, [pc, #428]	; (8005fb8 <snipCommand+0x1d4>)
 8005e0c:	2237      	movs	r2, #55	; 0x37
 8005e0e:	7818      	ldrb	r0, [r3, #0]
 8005e10:	2301      	movs	r3, #1
 8005e12:	425b      	negs	r3, r3
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	4969      	ldr	r1, [pc, #420]	; (8005fbc <snipCommand+0x1d8>)
 8005e18:	3333      	adds	r3, #51	; 0x33
 8005e1a:	f007 fb53 	bl	800d4c4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e1e:	4b68      	ldr	r3, [pc, #416]	; (8005fc0 <snipCommand+0x1dc>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d041      	beq.n	8005eaa <snipCommand+0xc6>
 8005e26:	2500      	movs	r5, #0
 8005e28:	4e66      	ldr	r6, [pc, #408]	; (8005fc4 <snipCommand+0x1e0>)
 8005e2a:	4f67      	ldr	r7, [pc, #412]	; (8005fc8 <snipCommand+0x1e4>)
 8005e2c:	1c6b      	adds	r3, r5, #1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	469a      	mov	sl, r3
		if(snippets[s].cond.conditionType)
 8005e32:	00ab      	lsls	r3, r5, #2
 8005e34:	9305      	str	r3, [sp, #20]
 8005e36:	195b      	adds	r3, r3, r5
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4698      	mov	r8, r3
 8005e3c:	5cf3      	ldrb	r3, [r6, r3]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d140      	bne.n	8005ec4 <snipCommand+0xe0>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e42:	9b05      	ldr	r3, [sp, #20]
 8005e44:	469c      	mov	ip, r3
 8005e46:	4465      	add	r5, ip
 8005e48:	00ad      	lsls	r5, r5, #2
 8005e4a:	1975      	adds	r5, r6, r5
 8005e4c:	e00d      	b.n	8005e6a <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005e4e:	0022      	movs	r2, r4
 8005e50:	495e      	ldr	r1, [pc, #376]	; (8005fcc <snipCommand+0x1e8>)
 8005e52:	003b      	movs	r3, r7
 8005e54:	0020      	movs	r0, r4
 8005e56:	f00d fab9 	bl	80133cc <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005e5a:	0038      	movs	r0, r7
 8005e5c:	f7fa f95c 	bl	8000118 <strlen>
 8005e60:	2100      	movs	r1, #0
 8005e62:	0002      	movs	r2, r0
 8005e64:	0038      	movs	r0, r7
 8005e66:	f00d f8b7 	bl	8012fd8 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e6a:	0039      	movs	r1, r7
 8005e6c:	68e8      	ldr	r0, [r5, #12]
 8005e6e:	f7ff fb2d 	bl	80054cc <ParseSnippetCommand>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d1eb      	bne.n	8005e4e <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e76:	0020      	movs	r0, r4
 8005e78:	f7fa f94e 	bl	8000118 <strlen>
 8005e7c:	0005      	movs	r5, r0
 8005e7e:	220c      	movs	r2, #12
 8005e80:	4953      	ldr	r1, [pc, #332]	; (8005fd0 <snipCommand+0x1ec>)
 8005e82:	1820      	adds	r0, r4, r0
 8005e84:	f00d f89f 	bl	8012fc6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e88:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <snipCommand+0x1d4>)
 8005e8a:	002a      	movs	r2, r5
 8005e8c:	7818      	ldrb	r0, [r3, #0]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	320b      	adds	r2, #11
 8005e92:	425b      	negs	r3, r3
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	b292      	uxth	r2, r2
 8005e98:	3333      	adds	r3, #51	; 0x33
 8005e9a:	0021      	movs	r1, r4
 8005e9c:	f007 fb12 	bl	800d4c4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005ea0:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <snipCommand+0x1dc>)
 8005ea2:	4655      	mov	r5, sl
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	4553      	cmp	r3, sl
 8005ea8:	d8c0      	bhi.n	8005e2c <snipCommand+0x48>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005eaa:	22b5      	movs	r2, #181	; 0xb5
 8005eac:	4949      	ldr	r1, [pc, #292]	; (8005fd4 <snipCommand+0x1f0>)
 8005eae:	0020      	movs	r0, r4
 8005eb0:	f00d f889 	bl	8012fc6 <memcpy>
}
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	b00d      	add	sp, #52	; 0x34
 8005eb8:	bc3c      	pop	{r2, r3, r4, r5}
 8005eba:	4690      	mov	r8, r2
 8005ebc:	4699      	mov	r9, r3
 8005ebe:	46a2      	mov	sl, r4
 8005ec0:	46ab      	mov	fp, r5
 8005ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005ec4:	46b3      	mov	fp, r6
 8005ec6:	44c3      	add	fp, r8
 8005ec8:	465b      	mov	r3, fp
 8005eca:	7c1a      	ldrb	r2, [r3, #16]
 8005ecc:	4942      	ldr	r1, [pc, #264]	; (8005fd8 <snipCommand+0x1f4>)
 8005ece:	00d3      	lsls	r3, r2, #3
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	aa08      	add	r2, sp, #32
 8005ed4:	4694      	mov	ip, r2
 8005ed6:	0020      	movs	r0, r4
 8005ed8:	4463      	add	r3, ip
 8005eda:	4652      	mov	r2, sl
 8005edc:	f00d fa76 	bl	80133cc <sprintf>
		switch(snippets[s].cond.conditionType){
 8005ee0:	4643      	mov	r3, r8
 8005ee2:	5cf3      	ldrb	r3, [r6, r3]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d027      	beq.n	8005f38 <snipCommand+0x154>
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d1aa      	bne.n	8005e42 <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005eec:	4641      	mov	r1, r8
 8005eee:	3106      	adds	r1, #6
 8005ef0:	1871      	adds	r1, r6, r1
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	a807      	add	r0, sp, #28
 8005ef6:	f00d f866 	bl	8012fc6 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005efa:	465b      	mov	r3, fp
 8005efc:	78da      	ldrb	r2, [r3, #3]
 8005efe:	9807      	ldr	r0, [sp, #28]
 8005f00:	3a01      	subs	r2, #1
 8005f02:	0053      	lsls	r3, r2, #1
 8005f04:	189b      	adds	r3, r3, r2
 8005f06:	4a35      	ldr	r2, [pc, #212]	; (8005fdc <snipCommand+0x1f8>)
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	18d3      	adds	r3, r2, r3
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4698      	mov	r8, r3
 8005f10:	f7fc fe08 	bl	8002b24 <__aeabi_f2d>
 8005f14:	465b      	mov	r3, fp
 8005f16:	464a      	mov	r2, r9
 8005f18:	9002      	str	r0, [sp, #8]
 8005f1a:	9103      	str	r1, [sp, #12]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	3214      	adds	r2, #20
 8005f20:	3b01      	subs	r3, #1
 8005f22:	0059      	lsls	r1, r3, #1
 8005f24:	18cb      	adds	r3, r1, r3
 8005f26:	18d3      	adds	r3, r2, r3
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	0022      	movs	r2, r4
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	492c      	ldr	r1, [pc, #176]	; (8005fe0 <snipCommand+0x1fc>)
 8005f30:	0020      	movs	r0, r4
 8005f32:	f00d fa4b 	bl	80133cc <sprintf>
				break;
 8005f36:	e784      	b.n	8005e42 <snipCommand+0x5e>
 8005f38:	465b      	mov	r3, fp
 8005f3a:	68da      	ldr	r2, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005f3c:	78db      	ldrb	r3, [r3, #3]
 8005f3e:	3b05      	subs	r3, #5
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b09      	cmp	r3, #9
 8005f44:	d900      	bls.n	8005f48 <snipCommand+0x164>
 8005f46:	e77c      	b.n	8005e42 <snipCommand+0x5e>
 8005f48:	4926      	ldr	r1, [pc, #152]	; (8005fe4 <snipCommand+0x200>)
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	58cb      	ldr	r3, [r1, r3]
 8005f4e:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8005f50:	b672      	cpsid	i
 8005f52:	e7fe      	b.n	8005f52 <snipCommand+0x16e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f54:	2314      	movs	r3, #20
 8005f56:	436b      	muls	r3, r5
 8005f58:	18f3      	adds	r3, r6, r3
 8005f5a:	789b      	ldrb	r3, [r3, #2]
 8005f5c:	4922      	ldr	r1, [pc, #136]	; (8005fe8 <snipCommand+0x204>)
 8005f5e:	9200      	str	r2, [sp, #0]
 8005f60:	0020      	movs	r0, r4
 8005f62:	0022      	movs	r2, r4
 8005f64:	f00d fa32 	bl	80133cc <sprintf>
						break;
 8005f68:	e76b      	b.n	8005e42 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f6a:	2114      	movs	r1, #20
 8005f6c:	4369      	muls	r1, r5
 8005f6e:	1871      	adds	r1, r6, r1
 8005f70:	788b      	ldrb	r3, [r1, #2]
 8005f72:	9201      	str	r2, [sp, #4]
 8005f74:	790a      	ldrb	r2, [r1, #4]
 8005f76:	0020      	movs	r0, r4
 8005f78:	9200      	str	r2, [sp, #0]
 8005f7a:	491c      	ldr	r1, [pc, #112]	; (8005fec <snipCommand+0x208>)
 8005f7c:	0022      	movs	r2, r4
 8005f7e:	f00d fa25 	bl	80133cc <sprintf>
						break;
 8005f82:	e75e      	b.n	8005e42 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f84:	2114      	movs	r1, #20
 8005f86:	4369      	muls	r1, r5
 8005f88:	1871      	adds	r1, r6, r1
 8005f8a:	788b      	ldrb	r3, [r1, #2]
 8005f8c:	9201      	str	r2, [sp, #4]
 8005f8e:	790a      	ldrb	r2, [r1, #4]
 8005f90:	0020      	movs	r0, r4
 8005f92:	9200      	str	r2, [sp, #0]
 8005f94:	4916      	ldr	r1, [pc, #88]	; (8005ff0 <snipCommand+0x20c>)
 8005f96:	0022      	movs	r2, r4
 8005f98:	f00d fa18 	bl	80133cc <sprintf>
						break;
 8005f9c:	e751      	b.n	8005e42 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f9e:	2314      	movs	r3, #20
 8005fa0:	436b      	muls	r3, r5
 8005fa2:	18f3      	adds	r3, r6, r3
 8005fa4:	789b      	ldrb	r3, [r3, #2]
 8005fa6:	4913      	ldr	r1, [pc, #76]	; (8005ff4 <snipCommand+0x210>)
 8005fa8:	9200      	str	r2, [sp, #0]
 8005faa:	0020      	movs	r0, r4
 8005fac:	0022      	movs	r2, r4
 8005fae:	f00d fa0d 	bl	80133cc <sprintf>
						break;
 8005fb2:	e746      	b.n	8005e42 <snipCommand+0x5e>
 8005fb4:	08017b2c 	.word	0x08017b2c
 8005fb8:	20000c28 	.word	0x20000c28
 8005fbc:	08018b84 	.word	0x08018b84
 8005fc0:	20001180 	.word	0x20001180
 8005fc4:	200070c4 	.word	0x200070c4
 8005fc8:	20001280 	.word	0x20001280
 8005fcc:	08018c38 	.word	0x08018c38
 8005fd0:	08018c40 	.word	0x08018c40
 8005fd4:	08018c4c 	.word	0x08018c4c
 8005fd8:	08018bbc 	.word	0x08018bbc
 8005fdc:	20000094 	.word	0x20000094
 8005fe0:	08018c28 	.word	0x08018c28
 8005fe4:	080178d0 	.word	0x080178d0
 8005fe8:	08018bc8 	.word	0x08018bc8
 8005fec:	08018c0c 	.word	0x08018c0c
 8005ff0:	08018bf4 	.word	0x08018bf4
 8005ff4:	08018bdc 	.word	0x08018bdc

08005ff8 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005ffc:	d00c      	beq.n	8006018 <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 8005ffe:	f009 fb45 	bl	800f68c <HAL_GetDEVID>
	switch(dev){
 8006002:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <idcodeCommand+0x80>)
 8006004:	0403      	lsls	r3, r0, #16
 8006006:	4694      	mov	ip, r2
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	4463      	add	r3, ip
 800600c:	2b08      	cmp	r3, #8
 800600e:	d805      	bhi.n	800601c <idcodeCommand+0x24>
 8006010:	4a1a      	ldr	r2, [pc, #104]	; (800607c <idcodeCommand+0x84>)
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	58d3      	ldr	r3, [r2, r3]
 8006016:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8006018:	b672      	cpsid	i
 800601a:	e7fe      	b.n	800601a <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 800601c:	4a18      	ldr	r2, [pc, #96]	; (8006080 <idcodeCommand+0x88>)
 800601e:	4919      	ldr	r1, [pc, #100]	; (8006084 <idcodeCommand+0x8c>)
 8006020:	0020      	movs	r0, r4
 8006022:	f00d f9d3 	bl	80133cc <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8006026:	f009 fb2b 	bl	800f680 <HAL_GetREVID>
 800602a:	0022      	movs	r2, r4
 800602c:	0b03      	lsrs	r3, r0, #12
 800602e:	4916      	ldr	r1, [pc, #88]	; (8006088 <idcodeCommand+0x90>)
 8006030:	0020      	movs	r0, r4
 8006032:	f00d f9cb 	bl	80133cc <sprintf>
}
 8006036:	2000      	movs	r0, #0
 8006038:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 800603a:	4a14      	ldr	r2, [pc, #80]	; (800608c <idcodeCommand+0x94>)
 800603c:	4911      	ldr	r1, [pc, #68]	; (8006084 <idcodeCommand+0x8c>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00d f9c4 	bl	80133cc <sprintf>
			break;
 8006044:	e7ef      	b.n	8006026 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <idcodeCommand+0x98>)
 8006048:	490e      	ldr	r1, [pc, #56]	; (8006084 <idcodeCommand+0x8c>)
 800604a:	0020      	movs	r0, r4
 800604c:	f00d f9be 	bl	80133cc <sprintf>
			break;
 8006050:	e7e9      	b.n	8006026 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006052:	4a10      	ldr	r2, [pc, #64]	; (8006094 <idcodeCommand+0x9c>)
 8006054:	490b      	ldr	r1, [pc, #44]	; (8006084 <idcodeCommand+0x8c>)
 8006056:	0020      	movs	r0, r4
 8006058:	f00d f9b8 	bl	80133cc <sprintf>
			break;
 800605c:	e7e3      	b.n	8006026 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 800605e:	4a0e      	ldr	r2, [pc, #56]	; (8006098 <idcodeCommand+0xa0>)
 8006060:	4908      	ldr	r1, [pc, #32]	; (8006084 <idcodeCommand+0x8c>)
 8006062:	0020      	movs	r0, r4
 8006064:	f00d f9b2 	bl	80133cc <sprintf>
			break;
 8006068:	e7dd      	b.n	8006026 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800606a:	4a0c      	ldr	r2, [pc, #48]	; (800609c <idcodeCommand+0xa4>)
 800606c:	4905      	ldr	r1, [pc, #20]	; (8006084 <idcodeCommand+0x8c>)
 800606e:	0020      	movs	r0, r4
 8006070:	f00d f9ac 	bl	80133cc <sprintf>
			break;
 8006074:	e7d7      	b.n	8006026 <idcodeCommand+0x2e>
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	fffffbc0 	.word	0xfffffbc0
 800607c:	080178f8 	.word	0x080178f8
 8006080:	08018d54 	.word	0x08018d54
 8006084:	08018d10 	.word	0x08018d10
 8006088:	08018d5c 	.word	0x08018d5c
 800608c:	08018d3c 	.word	0x08018d3c
 8006090:	08018d24 	.word	0x08018d24
 8006094:	08018d04 	.word	0x08018d04
 8006098:	08018d48 	.word	0x08018d48
 800609c:	08018d30 	.word	0x08018d30

080060a0 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060a0:	b510      	push	{r4, lr}
 80060a2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80060a4:	d101      	bne.n	80060aa <dateCommand+0xa>
 80060a6:	b672      	cpsid	i
 80060a8:	e7fe      	b.n	80060a8 <dateCommand+0x8>
	GetTimeDate();
 80060aa:	f006 ffa5 	bl	800cff8 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80060ae:	f7fe fc41 	bl	8004934 <GetDateString>
 80060b2:	4903      	ldr	r1, [pc, #12]	; (80060c0 <dateCommand+0x20>)
 80060b4:	0002      	movs	r2, r0
 80060b6:	0020      	movs	r0, r4
 80060b8:	f00d f988 	bl	80133cc <sprintf>
}
 80060bc:	2000      	movs	r0, #0
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	08018d74 	.word	0x08018d74

080060c4 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	46ce      	mov	lr, r9
 80060c8:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060ca:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b083      	sub	sp, #12
 80060d0:	0004      	movs	r4, r0
 80060d2:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80060d8:	2800      	cmp	r0, #0
 80060da:	d023      	beq.n	8006124 <getCommand+0x60>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060dc:	466a      	mov	r2, sp
 80060de:	2101      	movs	r1, #1
 80060e0:	0028      	movs	r0, r5
 80060e2:	f007 fc4b 	bl	800d97c <FreeRTOS_CLIGetParameter>
 80060e6:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <getCommand+0x1d4>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060e8:	2204      	movs	r2, #4
 80060ea:	496c      	ldr	r1, [pc, #432]	; (800629c <getCommand+0x1d8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060ec:	0007      	movs	r7, r0
 80060ee:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f0:	f00d f9b0 	bl	8013454 <strncmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d117      	bne.n	8006128 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80060f8:	9b00      	ldr	r3, [sp, #0]
 80060fa:	1d3e      	adds	r6, r7, #4
 80060fc:	1f1d      	subs	r5, r3, #4
 80060fe:	002a      	movs	r2, r5
 8006100:	4967      	ldr	r1, [pc, #412]	; (80062a0 <getCommand+0x1dc>)
 8006102:	0030      	movs	r0, r6
 8006104:	f00d f9a6 	bl	8013454 <strncmp>
 8006108:	2800      	cmp	r0, #0
 800610a:	d125      	bne.n	8006158 <getCommand+0x94>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 800610c:	4b65      	ldr	r3, [pc, #404]	; (80062a4 <getCommand+0x1e0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b60      	cmp	r3, #96	; 0x60
 8006112:	d01b      	beq.n	800614c <getCommand+0x88>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006114:	2b20      	cmp	r3, #32
 8006116:	d12c      	bne.n	8006172 <getCommand+0xae>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006118:	4a63      	ldr	r2, [pc, #396]	; (80062a8 <getCommand+0x1e4>)
 800611a:	4964      	ldr	r1, [pc, #400]	; (80062ac <getCommand+0x1e8>)
 800611c:	0020      	movs	r0, r4
 800611e:	f00d f955 	bl	80133cc <sprintf>
 8006122:	e00d      	b.n	8006140 <getCommand+0x7c>
	configASSERT(pcWriteBuffer);
 8006124:	b672      	cpsid	i
 8006126:	e7fe      	b.n	8006126 <getCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006128:	2205      	movs	r2, #5
 800612a:	4961      	ldr	r1, [pc, #388]	; (80062b0 <getCommand+0x1ec>)
 800612c:	0038      	movs	r0, r7
 800612e:	f00d f991 	bl	8013454 <strncmp>
 8006132:	2800      	cmp	r0, #0
 8006134:	d025      	beq.n	8006182 <getCommand+0xbe>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006136:	2213      	movs	r2, #19
 8006138:	495e      	ldr	r1, [pc, #376]	; (80062b4 <getCommand+0x1f0>)
 800613a:	0020      	movs	r0, r4
 800613c:	f00c ff43 	bl	8012fc6 <memcpy>
}
 8006140:	2000      	movs	r0, #0
 8006142:	b003      	add	sp, #12
 8006144:	bc0c      	pop	{r2, r3}
 8006146:	4690      	mov	r8, r2
 8006148:	4699      	mov	r9, r3
 800614a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800614c:	4a5a      	ldr	r2, [pc, #360]	; (80062b8 <getCommand+0x1f4>)
 800614e:	4957      	ldr	r1, [pc, #348]	; (80062ac <getCommand+0x1e8>)
 8006150:	0020      	movs	r0, r4
 8006152:	f00d f93b 	bl	80133cc <sprintf>
 8006156:	e7f3      	b.n	8006140 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006158:	002a      	movs	r2, r5
 800615a:	4958      	ldr	r1, [pc, #352]	; (80062bc <getCommand+0x1f8>)
 800615c:	0030      	movs	r0, r6
 800615e:	f00d f979 	bl	8013454 <strncmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	d14a      	bne.n	80061fc <getCommand+0x138>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006166:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <getCommand+0x1e0>)
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d0ee      	beq.n	800614c <getCommand+0x88>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 800616e:	2b01      	cmp	r3, #1
 8006170:	d0d2      	beq.n	8006118 <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03c      	beq.n	80061f0 <getCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006176:	003a      	movs	r2, r7
 8006178:	4951      	ldr	r1, [pc, #324]	; (80062c0 <getCommand+0x1fc>)
 800617a:	0020      	movs	r0, r4
 800617c:	f00d f926 	bl	80133cc <sprintf>
 8006180:	e7de      	b.n	8006140 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006182:	0028      	movs	r0, r5
 8006184:	aa01      	add	r2, sp, #4
 8006186:	2102      	movs	r1, #2
 8006188:	f007 fbf8 	bl	800d97c <FreeRTOS_CLIGetParameter>
 800618c:	2600      	movs	r6, #0
 800618e:	0005      	movs	r5, r0
 8006190:	4f4c      	ldr	r7, [pc, #304]	; (80062c4 <getCommand+0x200>)
 8006192:	e003      	b.n	800619c <getCommand+0xd8>
 8006194:	3601      	adds	r6, #1
 8006196:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8006198:	2e0a      	cmp	r6, #10
 800619a:	d05a      	beq.n	8006252 <getCommand+0x18e>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800619c:	0039      	movs	r1, r7
 800619e:	0028      	movs	r0, r5
 80061a0:	f7f9 ffb0 	bl	8000104 <strcmp>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d1f5      	bne.n	8006194 <getCommand+0xd0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80061a8:	002a      	movs	r2, r5
 80061aa:	4947      	ldr	r1, [pc, #284]	; (80062c8 <getCommand+0x204>)
 80061ac:	0020      	movs	r0, r4
 80061ae:	f00d f90d 	bl	80133cc <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80061b2:	4f46      	ldr	r7, [pc, #280]	; (80062cc <getCommand+0x208>)
 80061b4:	783b      	ldrb	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0c2      	beq.n	8006140 <getCommand+0x7c>
 80061ba:	2501      	movs	r5, #1
 80061bc:	002b      	movs	r3, r5
 80061be:	40b3      	lsls	r3, r6
 80061c0:	4698      	mov	r8, r3
 80061c2:	4b43      	ldr	r3, [pc, #268]	; (80062d0 <getCommand+0x20c>)
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061c4:	4e43      	ldr	r6, [pc, #268]	; (80062d4 <getCommand+0x210>)
 80061c6:	4699      	mov	r9, r3
 80061c8:	e004      	b.n	80061d4 <getCommand+0x110>
			for(j =1; j <= N; j++)						// N modules
 80061ca:	3501      	adds	r5, #1
 80061cc:	783b      	ldrb	r3, [r7, #0]
 80061ce:	b2ed      	uxtb	r5, r5
 80061d0:	42ab      	cmp	r3, r5
 80061d2:	d3b5      	bcc.n	8006140 <getCommand+0x7c>
				if(InGroup(j,i)){
 80061d4:	464a      	mov	r2, r9
 80061d6:	1e6b      	subs	r3, r5, #1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	5ad3      	ldrh	r3, [r2, r3]
 80061dc:	4642      	mov	r2, r8
 80061de:	421a      	tst	r2, r3
 80061e0:	d0f3      	beq.n	80061ca <getCommand+0x106>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061e2:	002b      	movs	r3, r5
 80061e4:	0022      	movs	r2, r4
 80061e6:	0031      	movs	r1, r6
 80061e8:	0020      	movs	r0, r4
 80061ea:	f00d f8ef 	bl	80133cc <sprintf>
 80061ee:	e7ec      	b.n	80061ca <getCommand+0x106>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80061f0:	4a39      	ldr	r2, [pc, #228]	; (80062d8 <getCommand+0x214>)
 80061f2:	492e      	ldr	r1, [pc, #184]	; (80062ac <getCommand+0x1e8>)
 80061f4:	0020      	movs	r0, r4
 80061f6:	f00d f8e9 	bl	80133cc <sprintf>
 80061fa:	e7a1      	b.n	8006140 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80061fc:	002a      	movs	r2, r5
 80061fe:	4937      	ldr	r1, [pc, #220]	; (80062dc <getCommand+0x218>)
 8006200:	0030      	movs	r0, r6
 8006202:	f00d f927 	bl	8013454 <strncmp>
 8006206:	2800      	cmp	r0, #0
 8006208:	d037      	beq.n	800627a <getCommand+0x1b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800620a:	002a      	movs	r2, r5
 800620c:	4934      	ldr	r1, [pc, #208]	; (80062e0 <getCommand+0x21c>)
 800620e:	0030      	movs	r0, r6
 8006210:	f00d f920 	bl	8013454 <strncmp>
 8006214:	2800      	cmp	r0, #0
 8006216:	d029      	beq.n	800626c <getCommand+0x1a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006218:	002a      	movs	r2, r5
 800621a:	4932      	ldr	r1, [pc, #200]	; (80062e4 <getCommand+0x220>)
 800621c:	0030      	movs	r0, r6
 800621e:	f00d f919 	bl	8013454 <strncmp>
 8006222:	2800      	cmp	r0, #0
 8006224:	d030      	beq.n	8006288 <getCommand+0x1c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006226:	002a      	movs	r2, r5
 8006228:	492f      	ldr	r1, [pc, #188]	; (80062e8 <getCommand+0x224>)
 800622a:	0030      	movs	r0, r6
 800622c:	f00d f912 	bl	8013454 <strncmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	d014      	beq.n	800625e <getCommand+0x19a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006234:	002a      	movs	r2, r5
 8006236:	492d      	ldr	r1, [pc, #180]	; (80062ec <getCommand+0x228>)
 8006238:	0030      	movs	r0, r6
 800623a:	f00d f90b 	bl	8013454 <strncmp>
 800623e:	2800      	cmp	r0, #0
 8006240:	d000      	beq.n	8006244 <getCommand+0x180>
 8006242:	e778      	b.n	8006136 <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006244:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <getCommand+0x22c>)
 8006246:	492b      	ldr	r1, [pc, #172]	; (80062f4 <getCommand+0x230>)
 8006248:	795a      	ldrb	r2, [r3, #5]
 800624a:	0020      	movs	r0, r4
 800624c:	f00d f8be 	bl	80133cc <sprintf>
 8006250:	e776      	b.n	8006140 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006252:	002a      	movs	r2, r5
 8006254:	4928      	ldr	r1, [pc, #160]	; (80062f8 <getCommand+0x234>)
 8006256:	0020      	movs	r0, r4
 8006258:	f00d f8b8 	bl	80133cc <sprintf>
			return pdFALSE;
 800625c:	e770      	b.n	8006140 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <getCommand+0x22c>)
 8006260:	4924      	ldr	r1, [pc, #144]	; (80062f4 <getCommand+0x230>)
 8006262:	791a      	ldrb	r2, [r3, #4]
 8006264:	0020      	movs	r0, r4
 8006266:	f00d f8b1 	bl	80133cc <sprintf>
 800626a:	e769      	b.n	8006140 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <getCommand+0x22c>)
 800626e:	4921      	ldr	r1, [pc, #132]	; (80062f4 <getCommand+0x230>)
 8006270:	881a      	ldrh	r2, [r3, #0]
 8006272:	0020      	movs	r0, r4
 8006274:	f00d f8aa 	bl	80133cc <sprintf>
 8006278:	e762      	b.n	8006140 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800627a:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <getCommand+0x22c>)
 800627c:	491d      	ldr	r1, [pc, #116]	; (80062f4 <getCommand+0x230>)
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	0020      	movs	r0, r4
 8006282:	f00d f8a3 	bl	80133cc <sprintf>
 8006286:	e75b      	b.n	8006140 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006288:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <getCommand+0x22c>)
 800628a:	491a      	ldr	r1, [pc, #104]	; (80062f4 <getCommand+0x230>)
 800628c:	885a      	ldrh	r2, [r3, #2]
 800628e:	0020      	movs	r0, r4
 8006290:	f00d f89c 	bl	80133cc <sprintf>
 8006294:	e754      	b.n	8006140 <getCommand+0x7c>
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	20001280 	.word	0x20001280
 800629c:	08018d8c 	.word	0x08018d8c
 80062a0:	08018d94 	.word	0x08018d94
 80062a4:	20007028 	.word	0x20007028
 80062a8:	08018da0 	.word	0x08018da0
 80062ac:	08018050 	.word	0x08018050
 80062b0:	08018e04 	.word	0x08018e04
 80062b4:	08018e14 	.word	0x08018e14
 80062b8:	08018174 	.word	0x08018174
 80062bc:	08018dac 	.word	0x08018dac
 80062c0:	08018e28 	.word	0x08018e28
 80062c4:	20000ad0 	.word	0x20000ad0
 80062c8:	08018e64 	.word	0x08018e64
 80062cc:	20000008 	.word	0x20000008
 80062d0:	20000a9c 	.word	0x20000a9c
 80062d4:	08018e0c 	.word	0x08018e0c
 80062d8:	08018da4 	.word	0x08018da4
 80062dc:	08018db4 	.word	0x08018db4
 80062e0:	08018dc0 	.word	0x08018dc0
 80062e4:	08018dcc 	.word	0x08018dcc
 80062e8:	08018ddc 	.word	0x08018ddc
 80062ec:	08018df0 	.word	0x08018df0
 80062f0:	200070a8 	.word	0x200070a8
 80062f4:	08018558 	.word	0x08018558
 80062f8:	08018e48 	.word	0x08018e48

080062fc <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80062fc:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062fe:	b570      	push	{r4, r5, r6, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006304:	9301      	str	r3, [sp, #4]
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006306:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006308:	2c00      	cmp	r4, #0
 800630a:	d02c      	beq.n	8006366 <defaultCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800630c:	aa01      	add	r2, sp, #4
 800630e:	2101      	movs	r1, #1
 8006310:	f007 fb34 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006314:	9e01      	ldr	r6, [sp, #4]
 8006316:	4920      	ldr	r1, [pc, #128]	; (8006398 <defaultCommand+0x9c>)
 8006318:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800631a:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800631c:	f00d f89a 	bl	8013454 <strncmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	d022      	beq.n	800636a <defaultCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006324:	0032      	movs	r2, r6
 8006326:	491d      	ldr	r1, [pc, #116]	; (800639c <defaultCommand+0xa0>)
 8006328:	0028      	movs	r0, r5
 800632a:	f00d f893 	bl	8013454 <strncmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	d12c      	bne.n	800638c <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006332:	2116      	movs	r1, #22
 8006334:	2200      	movs	r2, #0
 8006336:	20ff      	movs	r0, #255	; 0xff
 8006338:	f003 fb88 	bl	8009a4c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800633c:	2202      	movs	r2, #2
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <defaultCommand+0xa4>)
		osDelay(100);
 8006340:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006342:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006344:	f007 fa0a 	bl	800d75c <osDelay>
		ClearEEportsDir();
 8006348:	f7fd f956 	bl	80035f8 <ClearEEportsDir>
		ClearROtopology();
 800634c:	f005 f9a8 	bl	800b6a0 <ClearROtopology>
		osDelay(100);
 8006350:	2064      	movs	r0, #100	; 0x64
 8006352:	f007 fa03 	bl	800d75c <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	4912      	ldr	r1, [pc, #72]	; (80063a4 <defaultCommand+0xa8>)
 800635a:	0020      	movs	r0, r4
 800635c:	f00c fe33 	bl	8012fc6 <memcpy>
}
 8006360:	2000      	movs	r0, #0
 8006362:	b002      	add	sp, #8
 8006364:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8006366:	b672      	cpsid	i
 8006368:	e7fe      	b.n	8006368 <defaultCommand+0x6c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800636a:	490f      	ldr	r1, [pc, #60]	; (80063a8 <defaultCommand+0xac>)
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <defaultCommand+0xb0>)
 800636e:	000a      	movs	r2, r1
 8006370:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006372:	c223      	stmia	r2!, {r0, r1, r5}
 8006374:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006376:	c223      	stmia	r2!, {r0, r1, r5}
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 800637c:	f7fd f8f8 	bl	8003570 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006380:	2227      	movs	r2, #39	; 0x27
 8006382:	490b      	ldr	r1, [pc, #44]	; (80063b0 <defaultCommand+0xb4>)
 8006384:	0020      	movs	r0, r4
 8006386:	f00c fe1e 	bl	8012fc6 <memcpy>
 800638a:	e7e9      	b.n	8006360 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800638c:	220f      	movs	r2, #15
 800638e:	4909      	ldr	r1, [pc, #36]	; (80063b4 <defaultCommand+0xb8>)
 8006390:	0020      	movs	r0, r4
 8006392:	f00c fe18 	bl	8012fc6 <memcpy>
 8006396:	e7e3      	b.n	8006360 <defaultCommand+0x64>
 8006398:	08018e78 	.word	0x08018e78
 800639c:	08018ea8 	.word	0x08018ea8
 80063a0:	2000117e 	.word	0x2000117e
 80063a4:	08018ec0 	.word	0x08018ec0
 80063a8:	200070a8 	.word	0x200070a8
 80063ac:	20000014 	.word	0x20000014
 80063b0:	08018e80 	.word	0x08018e80
 80063b4:	08018eb0 	.word	0x08018eb0

080063b8 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ba:	4657      	mov	r7, sl
 80063bc:	46de      	mov	lr, fp
 80063be:	464e      	mov	r6, r9
 80063c0:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063c2:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063c4:	b5e0      	push	{r5, r6, r7, lr}
 80063c6:	b08f      	sub	sp, #60	; 0x3c
 80063c8:	0007      	movs	r7, r0
 80063ca:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063cc:	9309      	str	r3, [sp, #36]	; 0x24
 80063ce:	930a      	str	r3, [sp, #40]	; 0x28
 80063d0:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063d2:	930c      	str	r3, [sp, #48]	; 0x30
 80063d4:	930d      	str	r3, [sp, #52]	; 0x34
	configASSERT(pcWriteBuffer);
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d029      	beq.n	800642e <setCommand+0x76>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063da:	aa09      	add	r2, sp, #36	; 0x24
 80063dc:	2101      	movs	r1, #1
 80063de:	0020      	movs	r0, r4
 80063e0:	f007 facc 	bl	800d97c <FreeRTOS_CLIGetParameter>
 80063e4:	4dbf      	ldr	r5, [pc, #764]	; (80066e4 <setCommand+0x32c>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063e6:	2204      	movs	r2, #4
 80063e8:	49bf      	ldr	r1, [pc, #764]	; (80066e8 <setCommand+0x330>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063ea:	4681      	mov	r9, r0
 80063ec:	63a8      	str	r0, [r5, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063ee:	f00d f831 	bl	8013454 <strncmp>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d01d      	beq.n	8006432 <setCommand+0x7a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80063f6:	2204      	movs	r2, #4
 80063f8:	49bc      	ldr	r1, [pc, #752]	; (80066ec <setCommand+0x334>)
 80063fa:	4648      	mov	r0, r9
 80063fc:	f00d f82a 	bl	8013454 <strncmp>
 8006400:	2800      	cmp	r0, #0
 8006402:	d100      	bne.n	8006406 <setCommand+0x4e>
 8006404:	e0ed      	b.n	80065e2 <setCommand+0x22a>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006406:	2204      	movs	r2, #4
 8006408:	49b9      	ldr	r1, [pc, #740]	; (80066f0 <setCommand+0x338>)
 800640a:	4648      	mov	r0, r9
 800640c:	f00d f822 	bl	8013454 <strncmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	d04b      	beq.n	80064ac <setCommand+0xf4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006414:	2213      	movs	r2, #19
 8006416:	49b7      	ldr	r1, [pc, #732]	; (80066f4 <setCommand+0x33c>)
 8006418:	0038      	movs	r0, r7
 800641a:	f00c fdd4 	bl	8012fc6 <memcpy>
}
 800641e:	2000      	movs	r0, #0
 8006420:	b00f      	add	sp, #60	; 0x3c
 8006422:	bc3c      	pop	{r2, r3, r4, r5}
 8006424:	4690      	mov	r8, r2
 8006426:	4699      	mov	r9, r3
 8006428:	46a2      	mov	sl, r4
 800642a:	46ab      	mov	fp, r5
 800642c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800642e:	b672      	cpsid	i
 8006430:	e7fe      	b.n	8006430 <setCommand+0x78>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006432:	aa0a      	add	r2, sp, #40	; 0x28
 8006434:	2102      	movs	r1, #2
 8006436:	0020      	movs	r0, r4
 8006438:	f007 faa0 	bl	800d97c <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800643c:	6bab      	ldr	r3, [r5, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800643e:	0004      	movs	r4, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006440:	1d1e      	adds	r6, r3, #4
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006444:	63e8      	str	r0, [r5, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006446:	3b04      	subs	r3, #4
 8006448:	4698      	mov	r8, r3
 800644a:	4bab      	ldr	r3, [pc, #684]	; (80066f8 <setCommand+0x340>)
 800644c:	4642      	mov	r2, r8
 800644e:	0019      	movs	r1, r3
 8006450:	0030      	movs	r0, r6
 8006452:	4699      	mov	r9, r3
 8006454:	f00c fffe 	bl	8013454 <strncmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	d000      	beq.n	800645e <setCommand+0xa6>
 800645c:	e269      	b.n	8006932 <setCommand+0x57a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800645e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006460:	49a6      	ldr	r1, [pc, #664]	; (80066fc <setCommand+0x344>)
 8006462:	0032      	movs	r2, r6
 8006464:	0020      	movs	r0, r4
 8006466:	f00c fff5 	bl	8013454 <strncmp>
 800646a:	2800      	cmp	r0, #0
 800646c:	d100      	bne.n	8006470 <setCommand+0xb8>
 800646e:	e25d      	b.n	800692c <setCommand+0x574>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006470:	0032      	movs	r2, r6
 8006472:	49a3      	ldr	r1, [pc, #652]	; (8006700 <setCommand+0x348>)
 8006474:	0020      	movs	r0, r4
 8006476:	f00c ffed 	bl	8013454 <strncmp>
 800647a:	2800      	cmp	r0, #0
 800647c:	d100      	bne.n	8006480 <setCommand+0xc8>
 800647e:	e252      	b.n	8006926 <setCommand+0x56e>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006480:	0032      	movs	r2, r6
 8006482:	49a0      	ldr	r1, [pc, #640]	; (8006704 <setCommand+0x34c>)
 8006484:	0020      	movs	r0, r4
 8006486:	f00c ffe5 	bl	8013454 <strncmp>
 800648a:	2800      	cmp	r0, #0
 800648c:	d100      	bne.n	8006490 <setCommand+0xd8>
 800648e:	e23f      	b.n	8006910 <setCommand+0x558>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006490:	0032      	movs	r2, r6
 8006492:	499d      	ldr	r1, [pc, #628]	; (8006708 <setCommand+0x350>)
 8006494:	0020      	movs	r0, r4
 8006496:	f00c ffdd 	bl	8013454 <strncmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	d100      	bne.n	80064a0 <setCommand+0xe8>
 800649e:	e0fd      	b.n	800669c <setCommand+0x2e4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80064a0:	220f      	movs	r2, #15
 80064a2:	499a      	ldr	r1, [pc, #616]	; (800670c <setCommand+0x354>)
 80064a4:	0038      	movs	r0, r7
 80064a6:	f00c fd8e 	bl	8012fc6 <memcpy>
 80064aa:	e7b8      	b.n	800641e <setCommand+0x66>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064ac:	aa0a      	add	r2, sp, #40	; 0x28
 80064ae:	2102      	movs	r1, #2
 80064b0:	0020      	movs	r0, r4
 80064b2:	f007 fa63 	bl	800d97c <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064b6:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064b8:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064ba:	2103      	movs	r1, #3
 80064bc:	0020      	movs	r0, r4
 80064be:	f007 fa5d 	bl	800d97c <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064c2:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064c4:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064c6:	2104      	movs	r1, #4
 80064c8:	0020      	movs	r0, r4
 80064ca:	f007 fa57 	bl	800d97c <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064ce:	aa0d      	add	r2, sp, #52	; 0x34
 80064d0:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064d2:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064d4:	0020      	movs	r0, r4
 80064d6:	f007 fa51 	bl	800d97c <FreeRTOS_CLIGetParameter>
 80064da:	64a8      	str	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064dc:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80064de:	f00c faac 	bl	8012a3a <atoi>
 80064e2:	b2c3      	uxtb	r3, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064e4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064e6:	469b      	mov	fp, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064e8:	f00c faa7 	bl	8012a3a <atoi>
 80064ec:	b283      	uxth	r3, r0
 80064ee:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80064f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80064f2:	2206      	movs	r2, #6
 80064f4:	4986      	ldr	r1, [pc, #536]	; (8006710 <setCommand+0x358>)
 80064f6:	0018      	movs	r0, r3
 80064f8:	4698      	mov	r8, r3
 80064fa:	f00c ffab 	bl	8013454 <strncmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d100      	bne.n	8006504 <setCommand+0x14c>
 8006502:	e201      	b.n	8006908 <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006504:	2207      	movs	r2, #7
 8006506:	4983      	ldr	r1, [pc, #524]	; (8006714 <setCommand+0x35c>)
 8006508:	4640      	mov	r0, r8
 800650a:	f00c ffa3 	bl	8013454 <strncmp>
 800650e:	4b82      	ldr	r3, [pc, #520]	; (8006718 <setCommand+0x360>)
 8006510:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006512:	9006      	str	r0, [sp, #24]
 8006514:	0019      	movs	r1, r3
 8006516:	2207      	movs	r2, #7
 8006518:	0020      	movs	r0, r4
 800651a:	469a      	mov	sl, r3
 800651c:	f00c ff9a 	bl	8013454 <strncmp>
 8006520:	9b06      	ldr	r3, [sp, #24]
 8006522:	9007      	str	r0, [sp, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d100      	bne.n	800652a <setCommand+0x172>
 8006528:	e1ec      	b.n	8006904 <setCommand+0x54c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800652a:	2209      	movs	r2, #9
 800652c:	497b      	ldr	r1, [pc, #492]	; (800671c <setCommand+0x364>)
 800652e:	4640      	mov	r0, r8
 8006530:	f00c ff90 	bl	8013454 <strncmp>
 8006534:	2800      	cmp	r0, #0
 8006536:	d100      	bne.n	800653a <setCommand+0x182>
 8006538:	e1e2      	b.n	8006900 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800653a:	2208      	movs	r2, #8
 800653c:	4978      	ldr	r1, [pc, #480]	; (8006720 <setCommand+0x368>)
 800653e:	4640      	mov	r0, r8
 8006540:	f00c ff88 	bl	8013454 <strncmp>
 8006544:	2800      	cmp	r0, #0
 8006546:	d100      	bne.n	800654a <setCommand+0x192>
 8006548:	e1d8      	b.n	80068fc <setCommand+0x544>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800654a:	2206      	movs	r2, #6
 800654c:	4975      	ldr	r1, [pc, #468]	; (8006724 <setCommand+0x36c>)
 800654e:	4640      	mov	r0, r8
 8006550:	f00c ff80 	bl	8013454 <strncmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	d100      	bne.n	800655a <setCommand+0x1a2>
 8006558:	e1ce      	b.n	80068f8 <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800655a:	2208      	movs	r2, #8
 800655c:	4972      	ldr	r1, [pc, #456]	; (8006728 <setCommand+0x370>)
 800655e:	4640      	mov	r0, r8
 8006560:	f00c ff78 	bl	8013454 <strncmp>
 8006564:	2800      	cmp	r0, #0
 8006566:	d100      	bne.n	800656a <setCommand+0x1b2>
 8006568:	e1c4      	b.n	80068f4 <setCommand+0x53c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800656a:	2206      	movs	r2, #6
 800656c:	496f      	ldr	r1, [pc, #444]	; (800672c <setCommand+0x374>)
 800656e:	4640      	mov	r0, r8
 8006570:	f00c ff70 	bl	8013454 <strncmp>
 8006574:	2800      	cmp	r0, #0
 8006576:	d000      	beq.n	800657a <setCommand+0x1c2>
 8006578:	e0ea      	b.n	8006750 <setCommand+0x398>
			temp81 =SUNDAY;
 800657a:	2607      	movs	r6, #7
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800657c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800657e:	2207      	movs	r2, #7
 8006580:	4651      	mov	r1, sl
 8006582:	0020      	movs	r0, r4
 8006584:	f00c ff66 	bl	8013454 <strncmp>
 8006588:	2800      	cmp	r0, #0
 800658a:	d000      	beq.n	800658e <setCommand+0x1d6>
 800658c:	e098      	b.n	80066c0 <setCommand+0x308>
			temp82 =JANUARY;
 800658e:	2401      	movs	r4, #1
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006590:	465b      	mov	r3, fp
 8006592:	3b01      	subs	r3, #1
 8006594:	2b1e      	cmp	r3, #30
 8006596:	d883      	bhi.n	80064a0 <setCommand+0xe8>
 8006598:	4b65      	ldr	r3, [pc, #404]	; (8006730 <setCommand+0x378>)
 800659a:	444b      	add	r3, r9
 800659c:	2b64      	cmp	r3, #100	; 0x64
 800659e:	d900      	bls.n	80065a2 <setCommand+0x1ea>
 80065a0:	e77e      	b.n	80064a0 <setCommand+0xe8>
				GetTimeDate();
 80065a2:	f006 fd29 	bl	800cff8 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80065a6:	220c      	movs	r2, #12
 80065a8:	4b62      	ldr	r3, [pc, #392]	; (8006734 <setCommand+0x37c>)
 80065aa:	4659      	mov	r1, fp
 80065ac:	569a      	ldrsb	r2, [r3, r2]
 80065ae:	0020      	movs	r0, r4
 80065b0:	9204      	str	r2, [sp, #16]
 80065b2:	7cda      	ldrb	r2, [r3, #19]
 80065b4:	9203      	str	r2, [sp, #12]
 80065b6:	7c9a      	ldrb	r2, [r3, #18]
 80065b8:	9202      	str	r2, [sp, #8]
 80065ba:	7c5a      	ldrb	r2, [r3, #17]
 80065bc:	9201      	str	r2, [sp, #4]
 80065be:	7c1b      	ldrb	r3, [r3, #16]
 80065c0:	464a      	mov	r2, r9
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	0033      	movs	r3, r6
 80065c6:	f006 fcbd 	bl	800cf44 <BOS_CalendarConfig>
 80065ca:	4680      	mov	r8, r0
	if(result == BOS_OK){
 80065cc:	4643      	mov	r3, r8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d06c      	beq.n	80066ac <setCommand+0x2f4>
	else if(result == BOS_ERR_WrongParam)
 80065d2:	4643      	mov	r3, r8
 80065d4:	2b67      	cmp	r3, #103	; 0x67
 80065d6:	d100      	bne.n	80065da <setCommand+0x222>
 80065d8:	e71c      	b.n	8006414 <setCommand+0x5c>
	else if(result == BOS_ERR_WrongValue)
 80065da:	2b68      	cmp	r3, #104	; 0x68
 80065dc:	d000      	beq.n	80065e0 <setCommand+0x228>
 80065de:	e71e      	b.n	800641e <setCommand+0x66>
 80065e0:	e75e      	b.n	80064a0 <setCommand+0xe8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065e2:	aa0a      	add	r2, sp, #40	; 0x28
 80065e4:	2102      	movs	r1, #2
 80065e6:	0020      	movs	r0, r4
 80065e8:	f007 f9c8 	bl	800d97c <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065ec:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065ee:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065f0:	2103      	movs	r1, #3
 80065f2:	0020      	movs	r0, r4
 80065f4:	f007 f9c2 	bl	800d97c <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065f8:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065fa:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065fc:	2104      	movs	r1, #4
 80065fe:	0020      	movs	r0, r4
 8006600:	f007 f9bc 	bl	800d97c <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006604:	aa0d      	add	r2, sp, #52	; 0x34
 8006606:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006608:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800660a:	0020      	movs	r0, r4
 800660c:	f007 f9b6 	bl	800d97c <FreeRTOS_CLIGetParameter>
 8006610:	64a8      	str	r0, [r5, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006612:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8006614:	f00c fa11 	bl	8012a3a <atoi>
 8006618:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800661a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800661c:	f00c fa0d 	bl	8012a3a <atoi>
 8006620:	b2c3      	uxtb	r3, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006622:	6c68      	ldr	r0, [r5, #68]	; 0x44
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006624:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006626:	f00c fa08 	bl	8012a3a <atoi>
		if(pcParameterString5 != NULL){
 800662a:	6cac      	ldr	r4, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800662c:	b2c3      	uxtb	r3, r0
 800662e:	469a      	mov	sl, r3
		if(pcParameterString5 != NULL){
 8006630:	2c00      	cmp	r4, #0
 8006632:	d010      	beq.n	8006656 <setCommand+0x29e>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006634:	2202      	movs	r2, #2
 8006636:	4940      	ldr	r1, [pc, #256]	; (8006738 <setCommand+0x380>)
 8006638:	0020      	movs	r0, r4
 800663a:	f00c ff0b 	bl	8013454 <strncmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	d029      	beq.n	8006696 <setCommand+0x2de>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006642:	2202      	movs	r2, #2
 8006644:	493d      	ldr	r1, [pc, #244]	; (800673c <setCommand+0x384>)
 8006646:	0020      	movs	r0, r4
 8006648:	f00c ff04 	bl	8013454 <strncmp>
 800664c:	2800      	cmp	r0, #0
 800664e:	d000      	beq.n	8006652 <setCommand+0x29a>
 8006650:	e726      	b.n	80064a0 <setCommand+0xe8>
				temp84 =RTC_PM;
 8006652:	2302      	movs	r3, #2
 8006654:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006656:	2e17      	cmp	r6, #23
 8006658:	d900      	bls.n	800665c <setCommand+0x2a4>
 800665a:	e721      	b.n	80064a0 <setCommand+0xe8>
 800665c:	464b      	mov	r3, r9
 800665e:	2b3b      	cmp	r3, #59	; 0x3b
 8006660:	d900      	bls.n	8006664 <setCommand+0x2ac>
 8006662:	e71d      	b.n	80064a0 <setCommand+0xe8>
 8006664:	4653      	mov	r3, sl
 8006666:	2b3b      	cmp	r3, #59	; 0x3b
 8006668:	d900      	bls.n	800666c <setCommand+0x2b4>
 800666a:	e719      	b.n	80064a0 <setCommand+0xe8>
				GetTimeDate();
 800666c:	f006 fcc4 	bl	800cff8 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006670:	4c30      	ldr	r4, [pc, #192]	; (8006734 <setCommand+0x37c>)
 8006672:	7d23      	ldrb	r3, [r4, #20]
 8006674:	8b22      	ldrh	r2, [r4, #24]
 8006676:	7d61      	ldrb	r1, [r4, #21]
 8006678:	7da0      	ldrb	r0, [r4, #22]
 800667a:	7b24      	ldrb	r4, [r4, #12]
 800667c:	9602      	str	r6, [sp, #8]
 800667e:	b264      	sxtb	r4, r4
 8006680:	9404      	str	r4, [sp, #16]
 8006682:	4644      	mov	r4, r8
 8006684:	9403      	str	r4, [sp, #12]
 8006686:	464c      	mov	r4, r9
 8006688:	9401      	str	r4, [sp, #4]
 800668a:	4654      	mov	r4, sl
 800668c:	9400      	str	r4, [sp, #0]
 800668e:	f006 fc59 	bl	800cf44 <BOS_CalendarConfig>
 8006692:	4680      	mov	r8, r0
 8006694:	e79a      	b.n	80065cc <setCommand+0x214>
				temp84 =RTC_AM;
 8006696:	2301      	movs	r3, #1
 8006698:	4698      	mov	r8, r3
 800669a:	e7dc      	b.n	8006656 <setCommand+0x29e>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <setCommand+0x388>)
 800669e:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a0:	208a      	movs	r0, #138	; 0x8a
 80066a2:	7859      	ldrb	r1, [r3, #1]
 80066a4:	0040      	lsls	r0, r0, #1
 80066a6:	0209      	lsls	r1, r1, #8
 80066a8:	f001 f8fa 	bl	80078a0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066ac:	2300      	movs	r3, #0
 80066ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066b0:	6baa      	ldr	r2, [r5, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066b2:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066b4:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80066b8:	4922      	ldr	r1, [pc, #136]	; (8006744 <setCommand+0x38c>)
 80066ba:	f00c fe87 	bl	80133cc <sprintf>
	return pdFALSE;
 80066be:	e6ae      	b.n	800641e <setCommand+0x66>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066c0:	2202      	movs	r2, #2
 80066c2:	4921      	ldr	r1, [pc, #132]	; (8006748 <setCommand+0x390>)
 80066c4:	0020      	movs	r0, r4
 80066c6:	f00c fec5 	bl	8013454 <strncmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d100      	bne.n	80066d0 <setCommand+0x318>
 80066ce:	e75e      	b.n	800658e <setCommand+0x1d6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80066d0:	2208      	movs	r2, #8
 80066d2:	491e      	ldr	r1, [pc, #120]	; (800674c <setCommand+0x394>)
 80066d4:	0020      	movs	r0, r4
 80066d6:	f00c febd 	bl	8013454 <strncmp>
 80066da:	2800      	cmp	r0, #0
 80066dc:	d000      	beq.n	80066e0 <setCommand+0x328>
 80066de:	e0fe      	b.n	80068de <setCommand+0x526>
			temp82 =FEBRUARY;
 80066e0:	2402      	movs	r4, #2
 80066e2:	e755      	b.n	8006590 <setCommand+0x1d8>
 80066e4:	20001280 	.word	0x20001280
 80066e8:	08018d8c 	.word	0x08018d8c
 80066ec:	08019004 	.word	0x08019004
 80066f0:	08019014 	.word	0x08019014
 80066f4:	08018e14 	.word	0x08018e14
 80066f8:	08018d94 	.word	0x08018d94
 80066fc:	08018174 	.word	0x08018174
 8006700:	08018f00 	.word	0x08018f00
 8006704:	08018f08 	.word	0x08018f08
 8006708:	08018da4 	.word	0x08018da4
 800670c:	08018eb0 	.word	0x08018eb0
 8006710:	0801901c 	.word	0x0801901c
 8006714:	08019024 	.word	0x08019024
 8006718:	0801902c 	.word	0x0801902c
 800671c:	08019034 	.word	0x08019034
 8006720:	08019040 	.word	0x08019040
 8006724:	0801904c 	.word	0x0801904c
 8006728:	08019054 	.word	0x08019054
 800672c:	08019060 	.word	0x08019060
 8006730:	fffff830 	.word	0xfffff830
 8006734:	200070a8 	.word	0x200070a8
 8006738:	0801900c 	.word	0x0801900c
 800673c:	08019010 	.word	0x08019010
 8006740:	20007028 	.word	0x20007028
 8006744:	08018f0c 	.word	0x08018f0c
 8006748:	080190e8 	.word	0x080190e8
 800674c:	080190ec 	.word	0x080190ec
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006750:	9b07      	ldr	r3, [sp, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d100      	bne.n	8006758 <setCommand+0x3a0>
 8006756:	e6a3      	b.n	80064a0 <setCommand+0xe8>
 8006758:	2202      	movs	r2, #2
 800675a:	49c7      	ldr	r1, [pc, #796]	; (8006a78 <setCommand+0x6c0>)
 800675c:	0020      	movs	r0, r4
 800675e:	f00c fe79 	bl	8013454 <strncmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d100      	bne.n	8006768 <setCommand+0x3b0>
 8006766:	e69b      	b.n	80064a0 <setCommand+0xe8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006768:	2208      	movs	r2, #8
 800676a:	49c4      	ldr	r1, [pc, #784]	; (8006a7c <setCommand+0x6c4>)
 800676c:	0020      	movs	r0, r4
 800676e:	f00c fe71 	bl	8013454 <strncmp>
 8006772:	2800      	cmp	r0, #0
 8006774:	d100      	bne.n	8006778 <setCommand+0x3c0>
 8006776:	e693      	b.n	80064a0 <setCommand+0xe8>
 8006778:	2202      	movs	r2, #2
 800677a:	49c1      	ldr	r1, [pc, #772]	; (8006a80 <setCommand+0x6c8>)
 800677c:	0020      	movs	r0, r4
 800677e:	f00c fe69 	bl	8013454 <strncmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	d100      	bne.n	8006788 <setCommand+0x3d0>
 8006786:	e68b      	b.n	80064a0 <setCommand+0xe8>
			result =BOS_ERR_WrongValue;
 8006788:	2368      	movs	r3, #104	; 0x68
 800678a:	4698      	mov	r8, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800678c:	2205      	movs	r2, #5
 800678e:	49bd      	ldr	r1, [pc, #756]	; (8006a84 <setCommand+0x6cc>)
 8006790:	0020      	movs	r0, r4
 8006792:	f00c fe5f 	bl	8013454 <strncmp>
 8006796:	2800      	cmp	r0, #0
 8006798:	d100      	bne.n	800679c <setCommand+0x3e4>
 800679a:	e09e      	b.n	80068da <setCommand+0x522>
 800679c:	2202      	movs	r2, #2
 800679e:	49ba      	ldr	r1, [pc, #744]	; (8006a88 <setCommand+0x6d0>)
 80067a0:	0020      	movs	r0, r4
 80067a2:	f00c fe57 	bl	8013454 <strncmp>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d100      	bne.n	80067ac <setCommand+0x3f4>
 80067aa:	e096      	b.n	80068da <setCommand+0x522>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80067ac:	2205      	movs	r2, #5
 80067ae:	49b7      	ldr	r1, [pc, #732]	; (8006a8c <setCommand+0x6d4>)
 80067b0:	0020      	movs	r0, r4
 80067b2:	f00c fe4f 	bl	8013454 <strncmp>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d100      	bne.n	80067bc <setCommand+0x404>
 80067ba:	e08c      	b.n	80068d6 <setCommand+0x51e>
 80067bc:	2202      	movs	r2, #2
 80067be:	49b4      	ldr	r1, [pc, #720]	; (8006a90 <setCommand+0x6d8>)
 80067c0:	0020      	movs	r0, r4
 80067c2:	f00c fe47 	bl	8013454 <strncmp>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d100      	bne.n	80067cc <setCommand+0x414>
 80067ca:	e084      	b.n	80068d6 <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80067cc:	2203      	movs	r2, #3
 80067ce:	49b1      	ldr	r1, [pc, #708]	; (8006a94 <setCommand+0x6dc>)
 80067d0:	0020      	movs	r0, r4
 80067d2:	f00c fe3f 	bl	8013454 <strncmp>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d07b      	beq.n	80068d2 <setCommand+0x51a>
 80067da:	2202      	movs	r2, #2
 80067dc:	49ae      	ldr	r1, [pc, #696]	; (8006a98 <setCommand+0x6e0>)
 80067de:	0020      	movs	r0, r4
 80067e0:	f00c fe38 	bl	8013454 <strncmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d074      	beq.n	80068d2 <setCommand+0x51a>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067e8:	2204      	movs	r2, #4
 80067ea:	49ac      	ldr	r1, [pc, #688]	; (8006a9c <setCommand+0x6e4>)
 80067ec:	0020      	movs	r0, r4
 80067ee:	f00c fe31 	bl	8013454 <strncmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d06b      	beq.n	80068ce <setCommand+0x516>
 80067f6:	2202      	movs	r2, #2
 80067f8:	49a9      	ldr	r1, [pc, #676]	; (8006aa0 <setCommand+0x6e8>)
 80067fa:	0020      	movs	r0, r4
 80067fc:	f00c fe2a 	bl	8013454 <strncmp>
 8006800:	2800      	cmp	r0, #0
 8006802:	d064      	beq.n	80068ce <setCommand+0x516>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006804:	2204      	movs	r2, #4
 8006806:	49a7      	ldr	r1, [pc, #668]	; (8006aa4 <setCommand+0x6ec>)
 8006808:	0020      	movs	r0, r4
 800680a:	f00c fe23 	bl	8013454 <strncmp>
 800680e:	2800      	cmp	r0, #0
 8006810:	d05b      	beq.n	80068ca <setCommand+0x512>
 8006812:	2202      	movs	r2, #2
 8006814:	49a4      	ldr	r1, [pc, #656]	; (8006aa8 <setCommand+0x6f0>)
 8006816:	0020      	movs	r0, r4
 8006818:	f00c fe1c 	bl	8013454 <strncmp>
 800681c:	2800      	cmp	r0, #0
 800681e:	d054      	beq.n	80068ca <setCommand+0x512>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006820:	2205      	movs	r2, #5
 8006822:	49a2      	ldr	r1, [pc, #648]	; (8006aac <setCommand+0x6f4>)
 8006824:	0020      	movs	r0, r4
 8006826:	f00c fe15 	bl	8013454 <strncmp>
 800682a:	2800      	cmp	r0, #0
 800682c:	d04b      	beq.n	80068c6 <setCommand+0x50e>
 800682e:	2202      	movs	r2, #2
 8006830:	499f      	ldr	r1, [pc, #636]	; (8006ab0 <setCommand+0x6f8>)
 8006832:	0020      	movs	r0, r4
 8006834:	f00c fe0e 	bl	8013454 <strncmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	d044      	beq.n	80068c6 <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 800683c:	2209      	movs	r2, #9
 800683e:	499d      	ldr	r1, [pc, #628]	; (8006ab4 <setCommand+0x6fc>)
 8006840:	0020      	movs	r0, r4
 8006842:	f00c fe07 	bl	8013454 <strncmp>
 8006846:	2800      	cmp	r0, #0
 8006848:	d03b      	beq.n	80068c2 <setCommand+0x50a>
 800684a:	2202      	movs	r2, #2
 800684c:	499a      	ldr	r1, [pc, #616]	; (8006ab8 <setCommand+0x700>)
 800684e:	0020      	movs	r0, r4
 8006850:	f00c fe00 	bl	8013454 <strncmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	d034      	beq.n	80068c2 <setCommand+0x50a>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006858:	2207      	movs	r2, #7
 800685a:	4998      	ldr	r1, [pc, #608]	; (8006abc <setCommand+0x704>)
 800685c:	0020      	movs	r0, r4
 800685e:	f00c fdf9 	bl	8013454 <strncmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	d02b      	beq.n	80068be <setCommand+0x506>
 8006866:	2202      	movs	r2, #2
 8006868:	4995      	ldr	r1, [pc, #596]	; (8006ac0 <setCommand+0x708>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00c fdf2 	bl	8013454 <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d024      	beq.n	80068be <setCommand+0x506>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006874:	2208      	movs	r2, #8
 8006876:	4993      	ldr	r1, [pc, #588]	; (8006ac4 <setCommand+0x70c>)
 8006878:	0020      	movs	r0, r4
 800687a:	f00c fdeb 	bl	8013454 <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d01b      	beq.n	80068ba <setCommand+0x502>
 8006882:	2202      	movs	r2, #2
 8006884:	4990      	ldr	r1, [pc, #576]	; (8006ac8 <setCommand+0x710>)
 8006886:	0020      	movs	r0, r4
 8006888:	f00c fde4 	bl	8013454 <strncmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	d014      	beq.n	80068ba <setCommand+0x502>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006890:	2208      	movs	r2, #8
 8006892:	498e      	ldr	r1, [pc, #568]	; (8006acc <setCommand+0x714>)
 8006894:	0020      	movs	r0, r4
 8006896:	f00c fddd 	bl	8013454 <strncmp>
 800689a:	2800      	cmp	r0, #0
 800689c:	d007      	beq.n	80068ae <setCommand+0x4f6>
 800689e:	2202      	movs	r2, #2
 80068a0:	498b      	ldr	r1, [pc, #556]	; (8006ad0 <setCommand+0x718>)
 80068a2:	0020      	movs	r0, r4
 80068a4:	f00c fdd6 	bl	8013454 <strncmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d000      	beq.n	80068ae <setCommand+0x4f6>
 80068ac:	e5f8      	b.n	80064a0 <setCommand+0xe8>
			temp82 =DECEMBER;
 80068ae:	240c      	movs	r4, #12
		if(result == BOS_OK){
 80068b0:	4643      	mov	r3, r8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d000      	beq.n	80068b8 <setCommand+0x500>
 80068b6:	e68c      	b.n	80065d2 <setCommand+0x21a>
 80068b8:	e66a      	b.n	8006590 <setCommand+0x1d8>
			temp82 =NOVEMBER;
 80068ba:	240b      	movs	r4, #11
 80068bc:	e7f8      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =OCTOBER;
 80068be:	240a      	movs	r4, #10
 80068c0:	e7f6      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =SEPTEMBER;
 80068c2:	2409      	movs	r4, #9
 80068c4:	e7f4      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =AUGUST;
 80068c6:	2408      	movs	r4, #8
 80068c8:	e7f2      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =JULY;
 80068ca:	2407      	movs	r4, #7
 80068cc:	e7f0      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =JUNE;
 80068ce:	2406      	movs	r4, #6
 80068d0:	e7ee      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =MAY;
 80068d2:	2405      	movs	r4, #5
 80068d4:	e7ec      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =APRIL;
 80068d6:	2404      	movs	r4, #4
 80068d8:	e7ea      	b.n	80068b0 <setCommand+0x4f8>
			temp82 =MARCH;
 80068da:	2403      	movs	r4, #3
 80068dc:	e7e8      	b.n	80068b0 <setCommand+0x4f8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80068de:	2202      	movs	r2, #2
 80068e0:	4967      	ldr	r1, [pc, #412]	; (8006a80 <setCommand+0x6c8>)
 80068e2:	0020      	movs	r0, r4
 80068e4:	f00c fdb6 	bl	8013454 <strncmp>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d100      	bne.n	80068ee <setCommand+0x536>
 80068ec:	e6f8      	b.n	80066e0 <setCommand+0x328>
 80068ee:	2300      	movs	r3, #0
 80068f0:	4698      	mov	r8, r3
 80068f2:	e74b      	b.n	800678c <setCommand+0x3d4>
			temp81 =SATURDAY;
 80068f4:	2606      	movs	r6, #6
 80068f6:	e641      	b.n	800657c <setCommand+0x1c4>
			temp81 =FRIDAY;
 80068f8:	2605      	movs	r6, #5
 80068fa:	e63f      	b.n	800657c <setCommand+0x1c4>
			temp81 =THURSDAY;
 80068fc:	2604      	movs	r6, #4
 80068fe:	e63d      	b.n	800657c <setCommand+0x1c4>
			temp81 =WEDNESDAY;
 8006900:	2603      	movs	r6, #3
 8006902:	e63b      	b.n	800657c <setCommand+0x1c4>
			temp81 =TUESDAY;
 8006904:	2602      	movs	r6, #2
 8006906:	e639      	b.n	800657c <setCommand+0x1c4>
 8006908:	4b72      	ldr	r3, [pc, #456]	; (8006ad4 <setCommand+0x71c>)
			temp81 =MONDAY;
 800690a:	2601      	movs	r6, #1
 800690c:	469a      	mov	sl, r3
 800690e:	e635      	b.n	800657c <setCommand+0x1c4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006910:	2140      	movs	r1, #64	; 0x40
 8006912:	4b71      	ldr	r3, [pc, #452]	; (8006ad8 <setCommand+0x720>)
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006914:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	3015      	adds	r0, #21
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	4319      	orrs	r1, r3
 800691e:	30ff      	adds	r0, #255	; 0xff
 8006920:	f000 ffbe 	bl	80078a0 <EE_WriteVariable>
 8006924:	e6c2      	b.n	80066ac <setCommand+0x2f4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006926:	4b6c      	ldr	r3, [pc, #432]	; (8006ad8 <setCommand+0x720>)
 8006928:	2120      	movs	r1, #32
 800692a:	e7f3      	b.n	8006914 <setCommand+0x55c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800692c:	4b6a      	ldr	r3, [pc, #424]	; (8006ad8 <setCommand+0x720>)
 800692e:	2160      	movs	r1, #96	; 0x60
 8006930:	e7f0      	b.n	8006914 <setCommand+0x55c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006932:	4642      	mov	r2, r8
 8006934:	4969      	ldr	r1, [pc, #420]	; (8006adc <setCommand+0x724>)
 8006936:	0030      	movs	r0, r6
 8006938:	f00c fd8c 	bl	8013454 <strncmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	d127      	bne.n	8006990 <setCommand+0x5d8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006940:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006942:	4967      	ldr	r1, [pc, #412]	; (8006ae0 <setCommand+0x728>)
 8006944:	0032      	movs	r2, r6
 8006946:	0020      	movs	r0, r4
 8006948:	f00c fd84 	bl	8013454 <strncmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	d100      	bne.n	8006952 <setCommand+0x59a>
 8006950:	e10b      	b.n	8006b6a <setCommand+0x7b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006952:	0032      	movs	r2, r6
 8006954:	4963      	ldr	r1, [pc, #396]	; (8006ae4 <setCommand+0x72c>)
 8006956:	0020      	movs	r0, r4
 8006958:	f00c fd7c 	bl	8013454 <strncmp>
 800695c:	2800      	cmp	r0, #0
 800695e:	d100      	bne.n	8006962 <setCommand+0x5aa>
 8006960:	e0f7      	b.n	8006b52 <setCommand+0x79a>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006962:	0032      	movs	r2, r6
 8006964:	4649      	mov	r1, r9
 8006966:	0020      	movs	r0, r4
 8006968:	f00c fd74 	bl	8013454 <strncmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	d048      	beq.n	8006a02 <setCommand+0x64a>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006970:	0032      	movs	r2, r6
 8006972:	495d      	ldr	r1, [pc, #372]	; (8006ae8 <setCommand+0x730>)
 8006974:	0020      	movs	r0, r4
 8006976:	f00c fd6d 	bl	8013454 <strncmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	d000      	beq.n	8006980 <setCommand+0x5c8>
 800697e:	e58f      	b.n	80064a0 <setCommand+0xe8>
				BOSMessaging.trace =TRACE_NONE;
 8006980:	4b55      	ldr	r3, [pc, #340]	; (8006ad8 <setCommand+0x720>)
 8006982:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006984:	3015      	adds	r0, #21
 8006986:	7819      	ldrb	r1, [r3, #0]
 8006988:	30ff      	adds	r0, #255	; 0xff
 800698a:	f000 ff89 	bl	80078a0 <EE_WriteVariable>
 800698e:	e68d      	b.n	80066ac <setCommand+0x2f4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006990:	4642      	mov	r2, r8
 8006992:	4956      	ldr	r1, [pc, #344]	; (8006aec <setCommand+0x734>)
 8006994:	0030      	movs	r0, r6
 8006996:	f00c fd5d 	bl	8013454 <strncmp>
 800699a:	4681      	mov	r9, r0
 800699c:	2800      	cmp	r0, #0
 800699e:	d100      	bne.n	80069a2 <setCommand+0x5ea>
 80069a0:	e0b0      	b.n	8006b04 <setCommand+0x74c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80069a2:	4642      	mov	r2, r8
 80069a4:	4952      	ldr	r1, [pc, #328]	; (8006af0 <setCommand+0x738>)
 80069a6:	0030      	movs	r0, r6
 80069a8:	f00c fd54 	bl	8013454 <strncmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d055      	beq.n	8006a5c <setCommand+0x6a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80069b0:	4642      	mov	r2, r8
 80069b2:	4950      	ldr	r1, [pc, #320]	; (8006af4 <setCommand+0x73c>)
 80069b4:	0030      	movs	r0, r6
 80069b6:	f00c fd4d 	bl	8013454 <strncmp>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d040      	beq.n	8006a40 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80069be:	4642      	mov	r2, r8
 80069c0:	494d      	ldr	r1, [pc, #308]	; (8006af8 <setCommand+0x740>)
 80069c2:	0030      	movs	r0, r6
 80069c4:	f00c fd46 	bl	8013454 <strncmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d026      	beq.n	8006a1a <setCommand+0x662>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80069cc:	4642      	mov	r2, r8
 80069ce:	494b      	ldr	r1, [pc, #300]	; (8006afc <setCommand+0x744>)
 80069d0:	0030      	movs	r0, r6
 80069d2:	f00c fd3f 	bl	8013454 <strncmp>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d000      	beq.n	80069dc <setCommand+0x624>
 80069da:	e51b      	b.n	8006414 <setCommand+0x5c>
			temp16 =atoi((const char* )pcParameterString2);
 80069dc:	0020      	movs	r0, r4
 80069de:	f00c f82c 	bl	8012a3a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069e2:	1e43      	subs	r3, r0, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2bfe      	cmp	r3, #254	; 0xfe
 80069e8:	d900      	bls.n	80069ec <setCommand+0x634>
 80069ea:	e559      	b.n	80064a0 <setCommand+0xe8>
				BOS.buttons.maxInterClickTime =temp16;
 80069ec:	4b44      	ldr	r3, [pc, #272]	; (8006b00 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069ee:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80069f0:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f2:	0200      	lsls	r0, r0, #8
 80069f4:	4301      	orrs	r1, r0
 80069f6:	2018      	movs	r0, #24
 80069f8:	b289      	uxth	r1, r1
 80069fa:	30ff      	adds	r0, #255	; 0xff
 80069fc:	f000 ff50 	bl	80078a0 <EE_WriteVariable>
 8006a00:	e654      	b.n	80066ac <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a02:	2202      	movs	r2, #2
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a04:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a06:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <setCommand+0x720>)
 8006a08:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	0089      	lsls	r1, r1, #2
 8006a0e:	3015      	adds	r0, #21
 8006a10:	4319      	orrs	r1, r3
 8006a12:	30ff      	adds	r0, #255	; 0xff
 8006a14:	f000 ff44 	bl	80078a0 <EE_WriteVariable>
 8006a18:	e648      	b.n	80066ac <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a1a:	0020      	movs	r0, r4
 8006a1c:	f00c f80d 	bl	8012a3a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a20:	1e43      	subs	r3, r0, #1
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2bfe      	cmp	r3, #254	; 0xfe
 8006a26:	d900      	bls.n	8006a2a <setCommand+0x672>
 8006a28:	e53a      	b.n	80064a0 <setCommand+0xe8>
				BOS.buttons.minInterClickTime =temp16;
 8006a2a:	4b35      	ldr	r3, [pc, #212]	; (8006b00 <setCommand+0x748>)
 8006a2c:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a2e:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006a30:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a32:	0209      	lsls	r1, r1, #8
 8006a34:	4301      	orrs	r1, r0
 8006a36:	2018      	movs	r0, #24
 8006a38:	30ff      	adds	r0, #255	; 0xff
 8006a3a:	f000 ff31 	bl	80078a0 <EE_WriteVariable>
 8006a3e:	e635      	b.n	80066ac <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a40:	0020      	movs	r0, r4
 8006a42:	f00b fffa 	bl	8012a3a <atoi>
 8006a46:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d100      	bne.n	8006a4e <setCommand+0x696>
 8006a4c:	e528      	b.n	80064a0 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a4e:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006a50:	4b2b      	ldr	r3, [pc, #172]	; (8006b00 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a52:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006a54:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a56:	f000 ff23 	bl	80078a0 <EE_WriteVariable>
 8006a5a:	e627      	b.n	80066ac <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	f00b ffec 	bl	8012a3a <atoi>
 8006a62:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d100      	bne.n	8006a6a <setCommand+0x6b2>
 8006a68:	e51a      	b.n	80064a0 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a6a:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006a6c:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a6e:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006a70:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a72:	f000 ff15 	bl	80078a0 <EE_WriteVariable>
 8006a76:	e619      	b.n	80066ac <setCommand+0x2f4>
 8006a78:	080190e8 	.word	0x080190e8
 8006a7c:	080190ec 	.word	0x080190ec
 8006a80:	080190f8 	.word	0x080190f8
 8006a84:	08019068 	.word	0x08019068
 8006a88:	08019070 	.word	0x08019070
 8006a8c:	08019074 	.word	0x08019074
 8006a90:	0801907c 	.word	0x0801907c
 8006a94:	08019080 	.word	0x08019080
 8006a98:	08019084 	.word	0x08019084
 8006a9c:	08019088 	.word	0x08019088
 8006aa0:	08019090 	.word	0x08019090
 8006aa4:	08019094 	.word	0x08019094
 8006aa8:	0801909c 	.word	0x0801909c
 8006aac:	080190a0 	.word	0x080190a0
 8006ab0:	080190a8 	.word	0x080190a8
 8006ab4:	080190ac 	.word	0x080190ac
 8006ab8:	080190b8 	.word	0x080190b8
 8006abc:	080190bc 	.word	0x080190bc
 8006ac0:	080190c4 	.word	0x080190c4
 8006ac4:	080190c8 	.word	0x080190c8
 8006ac8:	080190d4 	.word	0x080190d4
 8006acc:	080190d8 	.word	0x080190d8
 8006ad0:	080190e4 	.word	0x080190e4
 8006ad4:	0801902c 	.word	0x0801902c
 8006ad8:	20007028 	.word	0x20007028
 8006adc:	08018dac 	.word	0x08018dac
 8006ae0:	08018174 	.word	0x08018174
 8006ae4:	08018f00 	.word	0x08018f00
 8006ae8:	08018da4 	.word	0x08018da4
 8006aec:	08018db4 	.word	0x08018db4
 8006af0:	08018dc0 	.word	0x08018dc0
 8006af4:	08018dcc 	.word	0x08018dcc
 8006af8:	08018ddc 	.word	0x08018ddc
 8006afc:	08018df0 	.word	0x08018df0
 8006b00:	200070a8 	.word	0x200070a8
			temp2 =atoi((const char* )pcParameterString2);
 8006b04:	0020      	movs	r0, r4
 8006b06:	f00b ff98 	bl	8012a3a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006b0a:	23e1      	movs	r3, #225	; 0xe1
 8006b0c:	031b      	lsls	r3, r3, #12
 8006b0e:	4298      	cmp	r0, r3
 8006b10:	d900      	bls.n	8006b14 <setCommand+0x75c>
 8006b12:	e4c5      	b.n	80064a0 <setCommand+0xe8>
				BOS.clibaudrate =temp2;
 8006b14:	4c18      	ldr	r4, [pc, #96]	; (8006b78 <setCommand+0x7c0>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b16:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006b18:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b1a:	208c      	movs	r0, #140	; 0x8c
 8006b1c:	0040      	lsls	r0, r0, #1
 8006b1e:	f000 febf 	bl	80078a0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006b22:	201a      	movs	r0, #26
 8006b24:	68a1      	ldr	r1, [r4, #8]
 8006b26:	30ff      	adds	r0, #255	; 0xff
 8006b28:	0c09      	lsrs	r1, r1, #16
 8006b2a:	f000 feb9 	bl	80078a0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b2e:	4649      	mov	r1, r9
 8006b30:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b34:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b36:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b3a:	4910      	ldr	r1, [pc, #64]	; (8006b7c <setCommand+0x7c4>)
 8006b3c:	f00c fc46 	bl	80133cc <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006b40:	490f      	ldr	r1, [pc, #60]	; (8006b80 <setCommand+0x7c8>)
 8006b42:	0038      	movs	r0, r7
 8006b44:	f00c fc62 	bl	801340c <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <setCommand+0x7cc>)
 8006b4a:	0038      	movs	r0, r7
 8006b4c:	f00c fc5e 	bl	801340c <strcat>
 8006b50:	e465      	b.n	800641e <setCommand+0x66>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b52:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b54:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b58:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b5a:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	3015      	adds	r0, #21
 8006b60:	4319      	orrs	r1, r3
 8006b62:	30ff      	adds	r0, #255	; 0xff
 8006b64:	f000 fe9c 	bl	80078a0 <EE_WriteVariable>
 8006b68:	e5a0      	b.n	80066ac <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_BOTH;
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b6e:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006b70:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	e74a      	b.n	8006a0c <setCommand+0x654>
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	200070a8 	.word	0x200070a8
 8006b7c:	08018f0c 	.word	0x08018f0c
 8006b80:	08018f20 	.word	0x08018f20
 8006b84:	08018f50 	.word	0x08018f50
 8006b88:	20007028 	.word	0x20007028

08006b8c <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006b8c:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b8e:	b530      	push	{r4, r5, lr}
 8006b90:	b083      	sub	sp, #12
 8006b92:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006b94:	9301      	str	r3, [sp, #4]
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b96:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	d010      	beq.n	8006bbe <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b9c:	aa01      	add	r2, sp, #4
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	f006 feec 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006ba8:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006baa:	2b70      	cmp	r3, #112	; 0x70
 8006bac:	d009      	beq.n	8006bc2 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006bae:	0020      	movs	r0, r4
 8006bb0:	f001 fca2 	bl	80084f8 <RemovePortButton>
	if(result == BOS_OK){
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d009      	beq.n	8006bcc <removebuttonCommand+0x40>
}
 8006bb8:	2000      	movs	r0, #0
 8006bba:	b003      	add	sp, #12
 8006bbc:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006bbe:	b672      	cpsid	i
 8006bc0:	e7fe      	b.n	8006bc0 <removebuttonCommand+0x34>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f00b ff3f 	bl	8012a46 <atol>
 8006bc8:	b2c4      	uxtb	r4, r0
 8006bca:	e7f0      	b.n	8006bae <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006bcc:	0023      	movs	r3, r4
 8006bce:	0022      	movs	r2, r4
 8006bd0:	4902      	ldr	r1, [pc, #8]	; (8006bdc <removebuttonCommand+0x50>)
 8006bd2:	0028      	movs	r0, r5
 8006bd4:	f00c fbfa 	bl	80133cc <sprintf>
 8006bd8:	e7ee      	b.n	8006bb8 <removebuttonCommand+0x2c>
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	080190fc 	.word	0x080190fc

08006be0 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	46ce      	mov	lr, r9
 8006be4:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006be6:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b085      	sub	sp, #20
 8006bec:	1e06      	subs	r6, r0, #0
 8006bee:	4691      	mov	r9, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bf0:	9302      	str	r3, [sp, #8]
 8006bf2:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8006bf4:	d036      	beq.n	8006c64 <addbuttonCommand+0x84>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bf6:	aa02      	add	r2, sp, #8
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4648      	mov	r0, r9
 8006bfc:	f006 febe 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c00:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c02:	4f25      	ldr	r7, [pc, #148]	; (8006c98 <addbuttonCommand+0xb8>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c04:	001a      	movs	r2, r3
 8006c06:	4925      	ldr	r1, [pc, #148]	; (8006c9c <addbuttonCommand+0xbc>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c08:	0005      	movs	r5, r0
 8006c0a:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c0c:	4698      	mov	r8, r3
 8006c0e:	f00c fc21 	bl	8013454 <strncmp>
		type =MOMENTARY_NO;
 8006c12:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d00f      	beq.n	8006c38 <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c18:	4642      	mov	r2, r8
 8006c1a:	4921      	ldr	r1, [pc, #132]	; (8006ca0 <addbuttonCommand+0xc0>)
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	f00c fc19 	bl	8013454 <strncmp>
		type =MOMENTARY_NC;
 8006c22:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d007      	beq.n	8006c38 <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c28:	4642      	mov	r2, r8
 8006c2a:	491e      	ldr	r1, [pc, #120]	; (8006ca4 <addbuttonCommand+0xc4>)
 8006c2c:	0028      	movs	r0, r5
 8006c2e:	f00c fc11 	bl	8013454 <strncmp>
		type =ONOFF_NO;
 8006c32:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d117      	bne.n	8006c68 <addbuttonCommand+0x88>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c38:	aa03      	add	r2, sp, #12
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f006 fe9d 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c42:	2300      	movs	r3, #0
 8006c44:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c46:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8006c48:	2b70      	cmp	r3, #112	; 0x70
 8006c4a:	d020      	beq.n	8006c8e <addbuttonCommand+0xae>
	result =AddPortButton(type,port);
 8006c4c:	0029      	movs	r1, r5
 8006c4e:	0020      	movs	r0, r4
 8006c50:	f001 fbd8 	bl	8008404 <AddPortButton>
	if(result == BOS_OK){
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d010      	beq.n	8006c7a <addbuttonCommand+0x9a>
}
 8006c58:	2000      	movs	r0, #0
 8006c5a:	b005      	add	sp, #20
 8006c5c:	bc0c      	pop	{r2, r3}
 8006c5e:	4690      	mov	r8, r2
 8006c60:	4699      	mov	r9, r3
 8006c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006c64:	b672      	cpsid	i
 8006c66:	e7fe      	b.n	8006c66 <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c68:	4642      	mov	r2, r8
 8006c6a:	490f      	ldr	r1, [pc, #60]	; (8006ca8 <addbuttonCommand+0xc8>)
 8006c6c:	0028      	movs	r0, r5
 8006c6e:	f00c fbf1 	bl	8013454 <strncmp>
		type =ONOFF_NC;
 8006c72:	4244      	negs	r4, r0
 8006c74:	4144      	adcs	r4, r0
 8006c76:	00a4      	lsls	r4, r4, #2
 8006c78:	e7de      	b.n	8006c38 <addbuttonCommand+0x58>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c7c:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c7e:	490b      	ldr	r1, [pc, #44]	; (8006cac <addbuttonCommand+0xcc>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c80:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c82:	9500      	str	r5, [sp, #0]
 8006c84:	002b      	movs	r3, r5
 8006c86:	0030      	movs	r0, r6
 8006c88:	f00c fba0 	bl	80133cc <sprintf>
 8006c8c:	e7e4      	b.n	8006c58 <addbuttonCommand+0x78>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f00b fed9 	bl	8012a46 <atol>
 8006c94:	b2c5      	uxtb	r5, r0
 8006c96:	e7d9      	b.n	8006c4c <addbuttonCommand+0x6c>
 8006c98:	20001280 	.word	0x20001280
 8006c9c:	08019124 	.word	0x08019124
 8006ca0:	08019134 	.word	0x08019134
 8006ca4:	08019144 	.word	0x08019144
 8006ca8:	08019150 	.word	0x08019150
 8006cac:	0801915c 	.word	0x0801915c

08006cb0 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	46de      	mov	lr, fp
 8006cb4:	4645      	mov	r5, r8
 8006cb6:	4657      	mov	r7, sl
 8006cb8:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cba:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cbc:	b5e0      	push	{r5, r6, r7, lr}
 8006cbe:	b09b      	sub	sp, #108	; 0x6c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cc0:	af11      	add	r7, sp, #68	; 0x44
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc2:	0004      	movs	r4, r0
 8006cc4:	9009      	str	r0, [sp, #36]	; 0x24
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cc6:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc8:	0015      	movs	r5, r2
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cca:	0038      	movs	r0, r7
 8006ccc:	220a      	movs	r2, #10
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd2:	930c      	str	r3, [sp, #48]	; 0x30
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8006cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8006cd8:	930f      	str	r3, [sp, #60]	; 0x3c
	portBASE_TYPE xParameterStringLength7 =0;
 8006cda:	9310      	str	r3, [sp, #64]	; 0x40
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cdc:	f00c f97c 	bl	8012fd8 <memset>
 8006ce0:	ab14      	add	r3, sp, #80	; 0x50
 8006ce2:	220a      	movs	r2, #10
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	4698      	mov	r8, r3
 8006cea:	f00c f975 	bl	8012fd8 <memset>
 8006cee:	ab17      	add	r3, sp, #92	; 0x5c
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f00c f96f 	bl	8012fd8 <memset>
	configASSERT(pcWriteBuffer);
 8006cfa:	2c00      	cmp	r4, #0
 8006cfc:	d100      	bne.n	8006d00 <scastCommand+0x50>
 8006cfe:	e07d      	b.n	8006dfc <scastCommand+0x14c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d00:	aa0a      	add	r2, sp, #40	; 0x28
 8006d02:	2101      	movs	r1, #1
 8006d04:	0028      	movs	r0, r5
 8006d06:	f006 fe39 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d0e:	2600      	movs	r6, #0
	if(pcParameterString1[0] == 'P'){
 8006d10:	2b50      	cmp	r3, #80	; 0x50
 8006d12:	d100      	bne.n	8006d16 <scastCommand+0x66>
 8006d14:	e074      	b.n	8006e00 <scastCommand+0x150>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d16:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d18:	2102      	movs	r1, #2
 8006d1a:	0028      	movs	r0, r5
 8006d1c:	f006 fe2e 	bl	800d97c <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d22:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d24:	0038      	movs	r0, r7
 8006d26:	f00c fba6 	bl	8013476 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006d2a:	0038      	movs	r0, r7
 8006d2c:	f7fd fa58 	bl	80041e0 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d30:	aa0c      	add	r2, sp, #48	; 0x30
	srcM =(uint8_t )GetID(par1);
 8006d32:	b2c3      	uxtb	r3, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d34:	2103      	movs	r1, #3
 8006d36:	0028      	movs	r0, r5
	srcM =(uint8_t )GetID(par1);
 8006d38:	9307      	str	r3, [sp, #28]
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d3a:	f006 fe1f 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d3e:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d40:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006d42:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d44:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006d46:	2b70      	cmp	r3, #112	; 0x70
 8006d48:	d06e      	beq.n	8006e28 <scastCommand+0x178>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d4a:	aa0d      	add	r2, sp, #52	; 0x34
 8006d4c:	2104      	movs	r1, #4
 8006d4e:	0028      	movs	r0, r5
 8006d50:	f006 fe14 	bl	800d97c <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d56:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d58:	4640      	mov	r0, r8
 8006d5a:	f00c fb8c 	bl	8013476 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7fd fa3e 	bl	80041e0 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d64:	aa0e      	add	r2, sp, #56	; 0x38
	dstM =(uint8_t )GetID(par2);
 8006d66:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d68:	2105      	movs	r1, #5
 8006d6a:	0028      	movs	r0, r5
	dstM =(uint8_t )GetID(par2);
 8006d6c:	9308      	str	r3, [sp, #32]
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d6e:	f006 fe05 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d74:	492f      	ldr	r1, [pc, #188]	; (8006e34 <scastCommand+0x184>)
 8006d76:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d78:	4681      	mov	r9, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d7a:	469a      	mov	sl, r3
 8006d7c:	f00c fb6a 	bl	8013454 <strncmp>
		direction =FORWARD;
 8006d80:	2400      	movs	r4, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d00f      	beq.n	8006da6 <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d86:	4652      	mov	r2, sl
 8006d88:	492b      	ldr	r1, [pc, #172]	; (8006e38 <scastCommand+0x188>)
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f00c fb62 	bl	8013454 <strncmp>
		direction =BACKWARD;
 8006d90:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d007      	beq.n	8006da6 <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d96:	4652      	mov	r2, sl
 8006d98:	4928      	ldr	r1, [pc, #160]	; (8006e3c <scastCommand+0x18c>)
 8006d9a:	4648      	mov	r0, r9
 8006d9c:	f00c fb5a 	bl	8013454 <strncmp>
		direction =BIDIRECTIONAL;
 8006da0:	4244      	negs	r4, r0
 8006da2:	4144      	adcs	r4, r0
 8006da4:	0064      	lsls	r4, r4, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006da6:	4649      	mov	r1, r9
 8006da8:	4652      	mov	r2, sl
 8006daa:	a817      	add	r0, sp, #92	; 0x5c
 8006dac:	f00c fb63 	bl	8013476 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006db0:	aa0f      	add	r2, sp, #60	; 0x3c
 8006db2:	2106      	movs	r1, #6
 8006db4:	0028      	movs	r0, r5
 8006db6:	f006 fde1 	bl	800d97c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dba:	f00b fe44 	bl	8012a46 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dbe:	aa10      	add	r2, sp, #64	; 0x40
 8006dc0:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dc2:	4681      	mov	r9, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dc4:	0028      	movs	r0, r5
 8006dc6:	f006 fdd9 	bl	800d97c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dca:	f00b fe3c 	bl	8012a46 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	464b      	mov	r3, r9
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dd4:	0005      	movs	r5, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dd6:	9002      	str	r0, [sp, #8]
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	9400      	str	r4, [sp, #0]
 8006ddc:	9b08      	ldr	r3, [sp, #32]
 8006dde:	465a      	mov	r2, fp
 8006de0:	9907      	ldr	r1, [sp, #28]
 8006de2:	0030      	movs	r0, r6
 8006de4:	f002 fe56 	bl	8009a94 <StartScastDMAStream>
	if(result == BOS_OK){
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d00e      	beq.n	8006e0a <scastCommand+0x15a>
}
 8006dec:	2000      	movs	r0, #0
 8006dee:	b01b      	add	sp, #108	; 0x6c
 8006df0:	bc3c      	pop	{r2, r3, r4, r5}
 8006df2:	4690      	mov	r8, r2
 8006df4:	4699      	mov	r9, r3
 8006df6:	46a2      	mov	sl, r4
 8006df8:	46ab      	mov	fp, r5
 8006dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006dfc:	b672      	cpsid	i
 8006dfe:	e7fe      	b.n	8006dfe <scastCommand+0x14e>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e00:	3001      	adds	r0, #1
 8006e02:	f00b fe20 	bl	8012a46 <atol>
 8006e06:	b2c6      	uxtb	r6, r0
 8006e08:	e785      	b.n	8006d16 <scastCommand+0x66>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	9303      	str	r3, [sp, #12]
 8006e0e:	4643      	mov	r3, r8
 8006e10:	9302      	str	r3, [sp, #8]
 8006e12:	465b      	mov	r3, fp
 8006e14:	9504      	str	r5, [sp, #16]
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	9700      	str	r7, [sp, #0]
 8006e1a:	0033      	movs	r3, r6
 8006e1c:	aa17      	add	r2, sp, #92	; 0x5c
 8006e1e:	4908      	ldr	r1, [pc, #32]	; (8006e40 <scastCommand+0x190>)
 8006e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e22:	f00c fad3 	bl	80133cc <sprintf>
 8006e26:	e7e1      	b.n	8006dec <scastCommand+0x13c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f00b fe0c 	bl	8012a46 <atol>
 8006e2e:	b2c3      	uxtb	r3, r0
 8006e30:	469b      	mov	fp, r3
 8006e32:	e78a      	b.n	8006d4a <scastCommand+0x9a>
 8006e34:	08019190 	.word	0x08019190
 8006e38:	08019198 	.word	0x08019198
 8006e3c:	080191a4 	.word	0x080191a4
 8006e40:	080191b4 	.word	0x080191b4

08006e44 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e46:	0004      	movs	r4, r0
 8006e48:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d041      	beq.n	8006ed2 <infoCommand+0x8e>
	if(N > 1)
 8006e4e:	4d22      	ldr	r5, [pc, #136]	; (8006ed8 <infoCommand+0x94>)
	BOS_Status result =BOS_OK;
 8006e50:	2700      	movs	r7, #0
	if(N > 1)
 8006e52:	782a      	ldrb	r2, [r5, #0]
 8006e54:	2a01      	cmp	r2, #1
 8006e56:	d903      	bls.n	8006e60 <infoCommand+0x1c>
		result =ReadPortsDir();
 8006e58:	f7fd fb1a 	bl	8004490 <ReadPortsDir>
 8006e5c:	0007      	movs	r7, r0
 8006e5e:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e60:	491e      	ldr	r1, [pc, #120]	; (8006edc <infoCommand+0x98>)
 8006e62:	0020      	movs	r0, r4
 8006e64:	f00c fab2 	bl	80133cc <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e68:	2601      	movs	r6, #1
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	f7f9 f954 	bl	8000118 <strlen>
 8006e70:	4d1b      	ldr	r5, [pc, #108]	; (8006ee0 <infoCommand+0x9c>)
 8006e72:	4276      	negs	r6, r6
 8006e74:	b282      	uxth	r2, r0
 8006e76:	2332      	movs	r3, #50	; 0x32
 8006e78:	7828      	ldrb	r0, [r5, #0]
 8006e7a:	0021      	movs	r1, r4
 8006e7c:	9600      	str	r6, [sp, #0]
 8006e7e:	f006 fb21 	bl	800d4c4 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e82:	2213      	movs	r2, #19
 8006e84:	4917      	ldr	r1, [pc, #92]	; (8006ee4 <infoCommand+0xa0>)
 8006e86:	0020      	movs	r0, r4
 8006e88:	f00c f89d 	bl	8012fc6 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e8c:	7828      	ldrb	r0, [r5, #0]
 8006e8e:	2332      	movs	r3, #50	; 0x32
 8006e90:	2212      	movs	r2, #18
 8006e92:	0021      	movs	r1, r4
 8006e94:	9600      	str	r6, [sp, #0]
 8006e96:	f006 fb15 	bl	800d4c4 <writePxMutex>
	DisplayTopology(PcPort);
 8006e9a:	7828      	ldrb	r0, [r5, #0]
 8006e9c:	f7fc fede 	bl	8003c5c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006ea0:	7828      	ldrb	r0, [r5, #0]
 8006ea2:	f7fc ffaf 	bl	8003e04 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006ea6:	2f02      	cmp	r7, #2
 8006ea8:	d10b      	bne.n	8006ec2 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006eaa:	2244      	movs	r2, #68	; 0x44
 8006eac:	490e      	ldr	r1, [pc, #56]	; (8006ee8 <infoCommand+0xa4>)
 8006eae:	0020      	movs	r0, r4
 8006eb0:	f00c f889 	bl	8012fc6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006eb4:	7828      	ldrb	r0, [r5, #0]
 8006eb6:	2332      	movs	r3, #50	; 0x32
 8006eb8:	9600      	str	r6, [sp, #0]
 8006eba:	2243      	movs	r2, #67	; 0x43
 8006ebc:	0021      	movs	r1, r4
 8006ebe:	f006 fb01 	bl	800d4c4 <writePxMutex>
	sprintf((char* )pcWriteBuffer," ");
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	4909      	ldr	r1, [pc, #36]	; (8006eec <infoCommand+0xa8>)
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	f00c f87d 	bl	8012fc6 <memcpy>
}
 8006ecc:	2000      	movs	r0, #0
 8006ece:	b003      	add	sp, #12
 8006ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ed2:	b672      	cpsid	i
 8006ed4:	e7fe      	b.n	8006ed4 <infoCommand+0x90>
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	20000008 	.word	0x20000008
 8006edc:	0801923c 	.word	0x0801923c
 8006ee0:	20000c28 	.word	0x20000c28
 8006ee4:	08019258 	.word	0x08019258
 8006ee8:	0801926c 	.word	0x0801926c
 8006eec:	08018070 	.word	0x08018070

08006ef0 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ef0:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d101      	bne.n	8006efa <statusCommand+0xa>
 8006ef6:	b672      	cpsid	i
 8006ef8:	e7fe      	b.n	8006ef8 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006efa:	2000      	movs	r0, #0
 8006efc:	f7fc fffc 	bl	8003ef8 <DisplayModuleStatus>
}
 8006f00:	2000      	movs	r0, #0
 8006f02:	bd10      	pop	{r4, pc}

08006f04 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f06:	464e      	mov	r6, r9
 8006f08:	46de      	mov	lr, fp
 8006f0a:	4645      	mov	r5, r8
 8006f0c:	4657      	mov	r7, sl
 8006f0e:	b5e0      	push	{r5, r6, r7, lr}
 8006f10:	b08f      	sub	sp, #60	; 0x3c
	char module[MaxLengthOfAlias + 30] ={0};
 8006f12:	ae04      	add	r6, sp, #16
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f14:	0005      	movs	r5, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006f16:	2100      	movs	r1, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f18:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006f1a:	0030      	movs	r0, r6
 8006f1c:	2227      	movs	r2, #39	; 0x27
 8006f1e:	f00c f85b 	bl	8012fd8 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006f22:	220a      	movs	r2, #10
 8006f24:	2100      	movs	r1, #0
 8006f26:	a801      	add	r0, sp, #4
 8006f28:	f00c f856 	bl	8012fd8 <memset>
	configASSERT(pcWriteBuffer);
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	d063      	beq.n	8006ff8 <groupCommand+0xf4>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f30:	4c54      	ldr	r4, [pc, #336]	; (8007084 <groupCommand+0x180>)
 8006f32:	2101      	movs	r1, #1
 8006f34:	0022      	movs	r2, r4
 8006f36:	4648      	mov	r0, r9
 8006f38:	3250      	adds	r2, #80	; 0x50
 8006f3a:	f006 fd1f 	bl	800d97c <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f3e:	6d22      	ldr	r2, [r4, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f40:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f42:	a801      	add	r0, sp, #4
 8006f44:	f00c fa97 	bl	8013476 <strncpy>
 8006f48:	2364      	movs	r3, #100	; 0x64
 8006f4a:	4698      	mov	r8, r3
 8006f4c:	4f4e      	ldr	r7, [pc, #312]	; (8007088 <groupCommand+0x184>)
 8006f4e:	44b8      	add	r8, r7
		if(!strcmp(alias,groupAlias[i])){
 8006f50:	0039      	movs	r1, r7
 8006f52:	a801      	add	r0, sp, #4
 8006f54:	f7f9 f8d6 	bl	8000104 <strcmp>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d04a      	beq.n	8006ff2 <groupCommand+0xee>
 8006f5c:	370a      	adds	r7, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f5e:	45b8      	cmp	r8, r7
 8006f60:	d1f6      	bne.n	8006f50 <groupCommand+0x4c>
	type =1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	469a      	mov	sl, r3
	count =2;
 8006f66:	2302      	movs	r3, #2
 8006f68:	2754      	movs	r7, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4947      	ldr	r1, [pc, #284]	; (800708c <groupCommand+0x188>)
 8006f6e:	0028      	movs	r0, r5
	count =2;
 8006f70:	55e3      	strb	r3, [r4, r7]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f72:	f00c f828 	bl	8012fc6 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f76:	0022      	movs	r2, r4
 8006f78:	2102      	movs	r1, #2
 8006f7a:	3258      	adds	r2, #88	; 0x58
 8006f7c:	4648      	mov	r0, r9
 8006f7e:	f006 fcfd 	bl	800d97c <FreeRTOS_CLIGetParameter>
 8006f82:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d039      	beq.n	8006ffc <groupCommand+0xf8>
		module[xParameterStringLength] ='\0';
 8006f88:	2300      	movs	r3, #0
 8006f8a:	469b      	mov	fp, r3
		if(count > 2)
 8006f8c:	3354      	adds	r3, #84	; 0x54
 8006f8e:	4698      	mov	r8, r3
 8006f90:	e00f      	b.n	8006fb2 <groupCommand+0xae>
		strcat((char* )pcWriteBuffer,module);
 8006f92:	0031      	movs	r1, r6
 8006f94:	0028      	movs	r0, r5
 8006f96:	f00c fa39 	bl	801340c <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f9a:	0022      	movs	r2, r4
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	1c79      	adds	r1, r7, #1
 8006fa0:	b249      	sxtb	r1, r1
 8006fa2:	3258      	adds	r2, #88	; 0x58
 8006fa4:	4648      	mov	r0, r9
 8006fa6:	54e1      	strb	r1, [r4, r3]
 8006fa8:	f006 fce8 	bl	800d97c <FreeRTOS_CLIGetParameter>
 8006fac:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d03c      	beq.n	800702c <groupCommand+0x128>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006fb2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8006fb4:	0001      	movs	r1, r0
 8006fb6:	003a      	movs	r2, r7
 8006fb8:	0030      	movs	r0, r6
 8006fba:	f00c fa5c 	bl	8013476 <strncpy>
		module[xParameterStringLength] ='\0';
 8006fbe:	465b      	mov	r3, fp
		modID =GetID(module);
 8006fc0:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006fc2:	55f3      	strb	r3, [r6, r7]
		modID =GetID(module);
 8006fc4:	f7fd f90c 	bl	80041e0 <GetID>
		if(modID < 0)
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	db49      	blt.n	8007060 <groupCommand+0x15c>
		result =AddModuleToGroup(modID,alias);
 8006fcc:	b2c0      	uxtb	r0, r0
 8006fce:	a901      	add	r1, sp, #4
 8006fd0:	f7fd f9d0 	bl	8004374 <AddModuleToGroup>
		if(result != BOS_OK)
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d133      	bne.n	8007040 <groupCommand+0x13c>
		if(count > 2)
 8006fd8:	4643      	mov	r3, r8
 8006fda:	56e7      	ldrsb	r7, [r4, r3]
 8006fdc:	2f02      	cmp	r7, #2
 8006fde:	ddd8      	ble.n	8006f92 <groupCommand+0x8e>
			strcat((char* )pcWriteBuffer,", ");
 8006fe0:	0028      	movs	r0, r5
 8006fe2:	f7f9 f899 	bl	8000118 <strlen>
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	1828      	adds	r0, r5, r0
 8006fea:	4929      	ldr	r1, [pc, #164]	; (8007090 <groupCommand+0x18c>)
 8006fec:	f00b ffeb 	bl	8012fc6 <memcpy>
 8006ff0:	e7cf      	b.n	8006f92 <groupCommand+0x8e>
			type =0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	469a      	mov	sl, r3
 8006ff6:	e7b6      	b.n	8006f66 <groupCommand+0x62>
	configASSERT(pcWriteBuffer);
 8006ff8:	b672      	cpsid	i
 8006ffa:	e7fe      	b.n	8006ffa <groupCommand+0xf6>
	else if(count == 2)
 8006ffc:	57e3      	ldrsb	r3, [r4, r7]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d018      	beq.n	8007034 <groupCommand+0x130>
	else if(result == BOS_OK && type){
 8007002:	4653      	mov	r3, sl
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007004:	aa01      	add	r2, sp, #4
 8007006:	4923      	ldr	r1, [pc, #140]	; (8007094 <groupCommand+0x190>)
	else if(result == BOS_OK && type){
 8007008:	2b00      	cmp	r3, #0
 800700a:	d100      	bne.n	800700e <groupCommand+0x10a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 800700c:	4922      	ldr	r1, [pc, #136]	; (8007098 <groupCommand+0x194>)
 800700e:	0030      	movs	r0, r6
 8007010:	f00c f9dc 	bl	80133cc <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007014:	0031      	movs	r1, r6
 8007016:	0028      	movs	r0, r5
 8007018:	f00c f9f8 	bl	801340c <strcat>
}
 800701c:	2000      	movs	r0, #0
 800701e:	b00f      	add	sp, #60	; 0x3c
 8007020:	bc3c      	pop	{r2, r3, r4, r5}
 8007022:	4690      	mov	r8, r2
 8007024:	4699      	mov	r9, r3
 8007026:	46a2      	mov	sl, r4
 8007028:	46ab      	mov	fp, r5
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 800702c:	4643      	mov	r3, r8
 800702e:	56e3      	ldrsb	r3, [r4, r3]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d1e6      	bne.n	8007002 <groupCommand+0xfe>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007034:	aa01      	add	r2, sp, #4
 8007036:	4919      	ldr	r1, [pc, #100]	; (800709c <groupCommand+0x198>)
 8007038:	0028      	movs	r0, r5
 800703a:	f00c f9c7 	bl	80133cc <sprintf>
 800703e:	e7ed      	b.n	800701c <groupCommand+0x118>
	else if(count == 2)
 8007040:	2354      	movs	r3, #84	; 0x54
 8007042:	56e3      	ldrsb	r3, [r4, r3]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d0f5      	beq.n	8007034 <groupCommand+0x130>
	else if(result == BOS_ERR_Keyword)
 8007048:	2806      	cmp	r0, #6
 800704a:	d015      	beq.n	8007078 <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 800704c:	2807      	cmp	r0, #7
 800704e:	d00d      	beq.n	800706c <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8007050:	2808      	cmp	r0, #8
 8007052:	d1e3      	bne.n	800701c <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007054:	aa01      	add	r2, sp, #4
 8007056:	4912      	ldr	r1, [pc, #72]	; (80070a0 <groupCommand+0x19c>)
 8007058:	0028      	movs	r0, r5
 800705a:	f00c f9b7 	bl	80133cc <sprintf>
 800705e:	e7dd      	b.n	800701c <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007060:	0032      	movs	r2, r6
 8007062:	4910      	ldr	r1, [pc, #64]	; (80070a4 <groupCommand+0x1a0>)
 8007064:	0028      	movs	r0, r5
 8007066:	f00c f9b1 	bl	80133cc <sprintf>
	return pdFALSE;
 800706a:	e7d7      	b.n	800701c <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 800706c:	aa01      	add	r2, sp, #4
 800706e:	490e      	ldr	r1, [pc, #56]	; (80070a8 <groupCommand+0x1a4>)
 8007070:	0028      	movs	r0, r5
 8007072:	f00c f9ab 	bl	80133cc <sprintf>
 8007076:	e7d1      	b.n	800701c <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007078:	aa01      	add	r2, sp, #4
 800707a:	490c      	ldr	r1, [pc, #48]	; (80070ac <groupCommand+0x1a8>)
 800707c:	0028      	movs	r0, r5
 800707e:	f00c f9a5 	bl	80133cc <sprintf>
 8007082:	e7cb      	b.n	800701c <groupCommand+0x118>
 8007084:	20001280 	.word	0x20001280
 8007088:	20000ad0 	.word	0x20000ad0
 800708c:	080192b0 	.word	0x080192b0
 8007090:	080192bc 	.word	0x080192bc
 8007094:	080192ec 	.word	0x080192ec
 8007098:	08019308 	.word	0x08019308
 800709c:	080192c0 	.word	0x080192c0
 80070a0:	0801939c 	.word	0x0801939c
 80070a4:	080193dc 	.word	0x080193dc
 80070a8:	08019368 	.word	0x08019368
 80070ac:	08019328 	.word	0x08019328

080070b0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	0005      	movs	r5, r0
 80070b4:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	d01a      	beq.n	80070f0 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070ba:	4c1b      	ldr	r4, [pc, #108]	; (8007128 <nameCommand+0x78>)
 80070bc:	2101      	movs	r1, #1
 80070be:	0022      	movs	r2, r4
 80070c0:	3260      	adds	r2, #96	; 0x60
 80070c2:	f006 fc5b 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070c8:	0001      	movs	r1, r0
 80070ca:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	dd01      	ble.n	80070d4 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070d0:	2300      	movs	r3, #0
 80070d2:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070d4:	4e15      	ldr	r6, [pc, #84]	; (800712c <nameCommand+0x7c>)
 80070d6:	7830      	ldrb	r0, [r6, #0]
 80070d8:	f7fd f8e2 	bl	80042a0 <NameModule>
	if(result == BOS_OK)
 80070dc:	2800      	cmp	r0, #0
 80070de:	d009      	beq.n	80070f4 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070e0:	2806      	cmp	r0, #6
 80070e2:	d01a      	beq.n	800711a <nameCommand+0x6a>
	else if(result == BOS_ERR_ExistingAlias)
 80070e4:	2807      	cmp	r0, #7
 80070e6:	d012      	beq.n	800710e <nameCommand+0x5e>
	else if(result == BOS_ERR_ExistingCmd)
 80070e8:	2808      	cmp	r0, #8
 80070ea:	d00a      	beq.n	8007102 <nameCommand+0x52>
}
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80070f0:	b672      	cpsid	i
 80070f2:	e7fe      	b.n	80070f2 <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070f4:	7832      	ldrb	r2, [r6, #0]
 80070f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070f8:	490d      	ldr	r1, [pc, #52]	; (8007130 <nameCommand+0x80>)
 80070fa:	0028      	movs	r0, r5
 80070fc:	f00c f966 	bl	80133cc <sprintf>
 8007100:	e7f4      	b.n	80070ec <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007104:	490b      	ldr	r1, [pc, #44]	; (8007134 <nameCommand+0x84>)
 8007106:	0028      	movs	r0, r5
 8007108:	f00c f960 	bl	80133cc <sprintf>
 800710c:	e7ee      	b.n	80070ec <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 800710e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007110:	4909      	ldr	r1, [pc, #36]	; (8007138 <nameCommand+0x88>)
 8007112:	0028      	movs	r0, r5
 8007114:	f00c f95a 	bl	80133cc <sprintf>
 8007118:	e7e8      	b.n	80070ec <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800711a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <nameCommand+0x8c>)
 800711e:	0028      	movs	r0, r5
 8007120:	f00c f954 	bl	80133cc <sprintf>
 8007124:	e7e2      	b.n	80070ec <nameCommand+0x3c>
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	20001280 	.word	0x20001280
 800712c:	20000a98 	.word	0x20000a98
 8007130:	08019400 	.word	0x08019400
 8007134:	0801939c 	.word	0x0801939c
 8007138:	08019368 	.word	0x08019368
 800713c:	08019328 	.word	0x08019328

08007140 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007142:	46c6      	mov	lr, r8
 8007144:	b500      	push	{lr}
 8007146:	0005      	movs	r5, r0
 8007148:	b082      	sub	sp, #8
 800714a:	4690      	mov	r8, r2
	configASSERT(pcWriteBuffer);
 800714c:	2800      	cmp	r0, #0
 800714e:	d018      	beq.n	8007182 <bootloaderUpdateCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007150:	4c4d      	ldr	r4, [pc, #308]	; (8007288 <bootloaderUpdateCommand+0x148>)
 8007152:	2101      	movs	r1, #1
 8007154:	0022      	movs	r2, r4
 8007156:	4640      	mov	r0, r8
 8007158:	3268      	adds	r2, #104	; 0x68
 800715a:	f006 fc0f 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 800715e:	2800      	cmp	r0, #0
 8007160:	d048      	beq.n	80071f4 <bootloaderUpdateCommand+0xb4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007162:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007164:	4949      	ldr	r1, [pc, #292]	; (800728c <bootloaderUpdateCommand+0x14c>)
 8007166:	f00c f975 	bl	8013454 <strncmp>
 800716a:	2800      	cmp	r0, #0
 800716c:	d00b      	beq.n	8007186 <bootloaderUpdateCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800716e:	220f      	movs	r2, #15
 8007170:	4947      	ldr	r1, [pc, #284]	; (8007290 <bootloaderUpdateCommand+0x150>)
 8007172:	0028      	movs	r0, r5
 8007174:	f00b ff27 	bl	8012fc6 <memcpy>
}
 8007178:	2000      	movs	r0, #0
 800717a:	b002      	add	sp, #8
 800717c:	bc04      	pop	{r2}
 800717e:	4690      	mov	r8, r2
 8007180:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007182:	b672      	cpsid	i
 8007184:	e7fe      	b.n	8007184 <bootloaderUpdateCommand+0x44>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007186:	0022      	movs	r2, r4
 8007188:	2102      	movs	r1, #2
 800718a:	326c      	adds	r2, #108	; 0x6c
 800718c:	4640      	mov	r0, r8
 800718e:	f006 fbf5 	bl	800d97c <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007192:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007194:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007196:	3274      	adds	r2, #116	; 0x74
 8007198:	2103      	movs	r1, #3
 800719a:	4640      	mov	r0, r8
 800719c:	f006 fbee 	bl	800d97c <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 80071a0:	2200      	movs	r2, #0
				result =BOS_ERR_WrongValue;
 80071a2:	2168      	movs	r1, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80071a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071a6:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80071a8:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80071aa:	4688      	mov	r8, r1
			if(pcParameterString2[0] == '#'){
 80071ac:	2a23      	cmp	r2, #35	; 0x23
 80071ae:	d062      	beq.n	8007276 <bootloaderUpdateCommand+0x136>
			if(pcParameterString3[0] == 'p'){
 80071b0:	2300      	movs	r3, #0
 80071b2:	56c3      	ldrsb	r3, [r0, r3]
 80071b4:	2b70      	cmp	r3, #112	; 0x70
 80071b6:	d059      	beq.n	800726c <bootloaderUpdateCommand+0x12c>
				result =BOS_ERR_WrongValue;
 80071b8:	2368      	movs	r3, #104	; 0x68
 80071ba:	4698      	mov	r8, r3
			if(module != myID){
 80071bc:	4c35      	ldr	r4, [pc, #212]	; (8007294 <bootloaderUpdateCommand+0x154>)
 80071be:	7823      	ldrb	r3, [r4, #0]
 80071c0:	42bb      	cmp	r3, r7
 80071c2:	d041      	beq.n	8007248 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071c4:	2200      	movs	r2, #0
 80071c6:	4b34      	ldr	r3, [pc, #208]	; (8007298 <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071c8:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071ca:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071cc:	4b33      	ldr	r3, [pc, #204]	; (800729c <bootloaderUpdateCommand+0x15c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071ce:	3201      	adds	r2, #1
 80071d0:	0038      	movs	r0, r7
				messageParams[0] =port;
 80071d2:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071d4:	f002 fc3a 	bl	8009a4c <SendMessageToModule>
				osDelay(100);
 80071d8:	2064      	movs	r0, #100	; 0x64
 80071da:	f006 fabf 	bl	800d75c <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80071de:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <bootloaderUpdateCommand+0x160>)
 80071e0:	7820      	ldrb	r0, [r4, #0]
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	0039      	movs	r1, r7
 80071e6:	0033      	movs	r3, r6
 80071e8:	f7fc fcaa 	bl	8003b40 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071ec:	4643      	mov	r3, r8
 80071ee:	2b68      	cmp	r3, #104	; 0x68
 80071f0:	d1c2      	bne.n	8007178 <bootloaderUpdateCommand+0x38>
 80071f2:	e7bc      	b.n	800716e <bootloaderUpdateCommand+0x2e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <bootloaderUpdateCommand+0x154>)
 80071f6:	492b      	ldr	r1, [pc, #172]	; (80072a4 <bootloaderUpdateCommand+0x164>)
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	0028      	movs	r0, r5
 80071fc:	f00c f8e6 	bl	80133cc <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007200:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <bootloaderUpdateCommand+0x168>)
 8007202:	0028      	movs	r0, r5
 8007204:	6819      	ldr	r1, [r3, #0]
 8007206:	f00c f901 	bl	801340c <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800720a:	0028      	movs	r0, r5
 800720c:	f7f8 ff84 	bl	8000118 <strlen>
 8007210:	4b23      	ldr	r3, [pc, #140]	; (80072a0 <bootloaderUpdateCommand+0x160>)
 8007212:	b282      	uxth	r2, r0
 8007214:	7818      	ldrb	r0, [r3, #0]
 8007216:	2301      	movs	r3, #1
 8007218:	425b      	negs	r3, r3
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	0029      	movs	r1, r5
 800721e:	3333      	adds	r3, #51	; 0x33
 8007220:	f006 f950 	bl	800d4c4 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007224:	4b21      	ldr	r3, [pc, #132]	; (80072ac <bootloaderUpdateCommand+0x16c>)
 8007226:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8007228:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800722a:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 800722c:	2201      	movs	r2, #1
 800722e:	4b21      	ldr	r3, [pc, #132]	; (80072b4 <bootloaderUpdateCommand+0x174>)
 8007230:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007232:	f006 fa93 	bl	800d75c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <bootloaderUpdateCommand+0x178>)
 800723c:	4a1f      	ldr	r2, [pc, #124]	; (80072bc <bootloaderUpdateCommand+0x17c>)
 800723e:	60da      	str	r2, [r3, #12]
 8007240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007244:	46c0      	nop			; (mov r8, r8)
 8007246:	e7fd      	b.n	8007244 <bootloaderUpdateCommand+0x104>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007248:	2100      	movs	r1, #0
 800724a:	2319      	movs	r3, #25
 800724c:	9100      	str	r1, [sp, #0]
 800724e:	000a      	movs	r2, r1
 8007250:	0030      	movs	r0, r6
 8007252:	f002 f99b 	bl	800958c <SendMessageFromPort>
				osDelay(100);
 8007256:	2064      	movs	r0, #100	; 0x64
 8007258:	f006 fa80 	bl	800d75c <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800725c:	7820      	ldrb	r0, [r4, #0]
 800725e:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <bootloaderUpdateCommand+0x160>)
 8007260:	0001      	movs	r1, r0
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	0033      	movs	r3, r6
 8007266:	f7fc fc6b 	bl	8003b40 <remoteBootloaderUpdate>
 800726a:	e7bf      	b.n	80071ec <bootloaderUpdateCommand+0xac>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800726c:	3001      	adds	r0, #1
 800726e:	f00b fbea 	bl	8012a46 <atol>
 8007272:	b2c6      	uxtb	r6, r0
 8007274:	e7a2      	b.n	80071bc <bootloaderUpdateCommand+0x7c>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007276:	1c58      	adds	r0, r3, #1
 8007278:	f00b fbe5 	bl	8012a46 <atol>
	BOS_Status result =BOS_OK;
 800727c:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800727e:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8007280:	4698      	mov	r8, r3
 8007282:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007284:	e794      	b.n	80071b0 <bootloaderUpdateCommand+0x70>
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20001280 	.word	0x20001280
 800728c:	08019438 	.word	0x08019438
 8007290:	08018eb0 	.word	0x08018eb0
 8007294:	20000a98 	.word	0x20000a98
 8007298:	20007028 	.word	0x20007028
 800729c:	20000b3c 	.word	0x20000b3c
 80072a0:	20000c28 	.word	0x20000c28
 80072a4:	08019418 	.word	0x08019418
 80072a8:	20000084 	.word	0x20000084
 80072ac:	20007ff0 	.word	0x20007ff0
 80072b0:	deadbeef 	.word	0xdeadbeef
 80072b4:	2000117e 	.word	0x2000117e
 80072b8:	e000ed00 	.word	0xe000ed00
 80072bc:	05fa0004 	.word	0x05fa0004

080072c0 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072c0:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d01d      	beq.n	8007302 <pingCommand+0x42>
	if(!moduleAlias[myID][0])
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <pingCommand+0x50>)
 80072c8:	4912      	ldr	r1, [pc, #72]	; (8007314 <pingCommand+0x54>)
 80072ca:	781a      	ldrb	r2, [r3, #0]
 80072cc:	0093      	lsls	r3, r2, #2
 80072ce:	189b      	adds	r3, r3, r2
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	5c5c      	ldrb	r4, [r3, r1]
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d016      	beq.n	8007306 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072d8:	185b      	adds	r3, r3, r1
 80072da:	490f      	ldr	r1, [pc, #60]	; (8007318 <pingCommand+0x58>)
 80072dc:	f00c f876 	bl	80133cc <sprintf>
	RTOS_IND_blink(200);
 80072e0:	2180      	movs	r1, #128	; 0x80
 80072e2:	2201      	movs	r2, #1
 80072e4:	01c9      	lsls	r1, r1, #7
 80072e6:	480d      	ldr	r0, [pc, #52]	; (800731c <pingCommand+0x5c>)
 80072e8:	f009 fe56 	bl	8010f98 <HAL_GPIO_WritePin>
 80072ec:	20c8      	movs	r0, #200	; 0xc8
 80072ee:	f006 fa35 	bl	800d75c <osDelay>
 80072f2:	2180      	movs	r1, #128	; 0x80
 80072f4:	2200      	movs	r2, #0
 80072f6:	01c9      	lsls	r1, r1, #7
 80072f8:	4808      	ldr	r0, [pc, #32]	; (800731c <pingCommand+0x5c>)
 80072fa:	f009 fe4d 	bl	8010f98 <HAL_GPIO_WritePin>
}
 80072fe:	2000      	movs	r0, #0
 8007300:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007302:	b672      	cpsid	i
 8007304:	e7fe      	b.n	8007304 <pingCommand+0x44>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007306:	4906      	ldr	r1, [pc, #24]	; (8007320 <pingCommand+0x60>)
 8007308:	f00c f860 	bl	80133cc <sprintf>
 800730c:	e7e8      	b.n	80072e0 <pingCommand+0x20>
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	20000a98 	.word	0x20000a98
 8007314:	20000dfc 	.word	0x20000dfc
 8007318:	08019450 	.word	0x08019450
 800731c:	48000400 	.word	0x48000400
 8007320:	0801943c 	.word	0x0801943c

08007324 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007324:	b510      	push	{r4, lr}
 8007326:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007328:	d101      	bne.n	800732e <prvRunTimeStatsCommand+0xa>
 800732a:	b672      	cpsid	i
 800732c:	e7fe      	b.n	800732c <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 800732e:	2241      	movs	r2, #65	; 0x41
 8007330:	4904      	ldr	r1, [pc, #16]	; (8007344 <prvRunTimeStatsCommand+0x20>)
 8007332:	f00b fe48 	bl	8012fc6 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007336:	0020      	movs	r0, r4
 8007338:	3040      	adds	r0, #64	; 0x40
 800733a:	f007 fd19 	bl	800ed70 <vTaskGetRunTimeStats>
}
 800733e:	2000      	movs	r0, #0
 8007340:	bd10      	pop	{r4, pc}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	0801946c 	.word	0x0801946c

08007348 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007348:	b510      	push	{r4, lr}
 800734a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800734c:	d101      	bne.n	8007352 <prvTaskStatsCommand+0xa>
 800734e:	b672      	cpsid	i
 8007350:	e7fe      	b.n	8007350 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007352:	2250      	movs	r2, #80	; 0x50
 8007354:	4904      	ldr	r1, [pc, #16]	; (8007368 <prvTaskStatsCommand+0x20>)
 8007356:	f00b fe36 	bl	8012fc6 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800735a:	0020      	movs	r0, r4
 800735c:	304f      	adds	r0, #79	; 0x4f
 800735e:	f007 fcad 	bl	800ecbc <vTaskList>
}
 8007362:	2000      	movs	r0, #0
 8007364:	bd10      	pop	{r4, pc}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	080194b0 	.word	0x080194b0

0800736c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007370:	d023      	beq.n	80073ba <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8007372:	220e      	movs	r2, #14
 8007374:	4912      	ldr	r1, [pc, #72]	; (80073c0 <uuidCommand+0x54>)
 8007376:	f00b fe26 	bl	8012fc6 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 800737a:	4d12      	ldr	r5, [pc, #72]	; (80073c4 <uuidCommand+0x58>)
 800737c:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <uuidCommand+0x5c>)
 800737e:	0029      	movs	r1, r5
 8007380:	0022      	movs	r2, r4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	0020      	movs	r0, r4
 8007386:	f00c f821 	bl	80133cc <sprintf>
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <uuidCommand+0x60>)
 800738c:	0029      	movs	r1, r5
 800738e:	0022      	movs	r2, r4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	0020      	movs	r0, r4
 8007394:	f00c f81a 	bl	80133cc <sprintf>
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <uuidCommand+0x64>)
 800739a:	0029      	movs	r1, r5
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	0022      	movs	r2, r4
 80073a0:	0020      	movs	r0, r4
 80073a2:	f00c f813 	bl	80133cc <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 80073a6:	0020      	movs	r0, r4
 80073a8:	f7f8 feb6 	bl	8000118 <strlen>
 80073ac:	2203      	movs	r2, #3
 80073ae:	1820      	adds	r0, r4, r0
 80073b0:	4908      	ldr	r1, [pc, #32]	; (80073d4 <uuidCommand+0x68>)
 80073b2:	f00b fe08 	bl	8012fc6 <memcpy>
}
 80073b6:	2000      	movs	r0, #0
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80073ba:	b672      	cpsid	i
 80073bc:	e7fe      	b.n	80073bc <uuidCommand+0x50>
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	08019500 	.word	0x08019500
 80073c4:	08019510 	.word	0x08019510
 80073c8:	1ffff7ac 	.word	0x1ffff7ac
 80073cc:	1ffff7b0 	.word	0x1ffff7b0
 80073d0:	1ffff7b4 	.word	0x1ffff7b4
 80073d4:	08019dd8 	.word	0x08019dd8

080073d8 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073d8:	b510      	push	{r4, lr}
 80073da:	0004      	movs	r4, r0
 80073dc:	b084      	sub	sp, #16
	configASSERT(pcWriteBuffer);
 80073de:	2800      	cmp	r0, #0
 80073e0:	d00a      	beq.n	80073f8 <timeCommand+0x20>
	GetTimeDate();
 80073e2:	f005 fe09 	bl	800cff8 <GetTimeDate>
	if(BOS.hourformat == 24)
 80073e6:	4916      	ldr	r1, [pc, #88]	; (8007440 <timeCommand+0x68>)
 80073e8:	7b4b      	ldrb	r3, [r1, #13]
 80073ea:	2b18      	cmp	r3, #24
 80073ec:	d006      	beq.n	80073fc <timeCommand+0x24>
	else if(BOS.hourformat == 12){
 80073ee:	2b0c      	cmp	r3, #12
 80073f0:	d00f      	beq.n	8007412 <timeCommand+0x3a>
}
 80073f2:	2000      	movs	r0, #0
 80073f4:	b004      	add	sp, #16
 80073f6:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80073f8:	b672      	cpsid	i
 80073fa:	e7fe      	b.n	80073fa <timeCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 80073fc:	89c8      	ldrh	r0, [r1, #14]
 80073fe:	7c4b      	ldrb	r3, [r1, #17]
 8007400:	7c8a      	ldrb	r2, [r1, #18]
 8007402:	9001      	str	r0, [sp, #4]
 8007404:	7c09      	ldrb	r1, [r1, #16]
 8007406:	0020      	movs	r0, r4
 8007408:	9100      	str	r1, [sp, #0]
 800740a:	490e      	ldr	r1, [pc, #56]	; (8007444 <timeCommand+0x6c>)
 800740c:	f00b ffde 	bl	80133cc <sprintf>
 8007410:	e7ef      	b.n	80073f2 <timeCommand+0x1a>
		if(BOS.time.ampm == RTC_AM)
 8007412:	7ccb      	ldrb	r3, [r1, #19]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d00e      	beq.n	8007436 <timeCommand+0x5e>
		else if(BOS.time.ampm == RTC_PM)
 8007418:	2b02      	cmp	r3, #2
 800741a:	d1ea      	bne.n	80073f2 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800741c:	7c4b      	ldrb	r3, [r1, #17]
 800741e:	7c8a      	ldrb	r2, [r1, #18]
 8007420:	4809      	ldr	r0, [pc, #36]	; (8007448 <timeCommand+0x70>)
 8007422:	9002      	str	r0, [sp, #8]
 8007424:	89c8      	ldrh	r0, [r1, #14]
 8007426:	9001      	str	r0, [sp, #4]
 8007428:	7c09      	ldrb	r1, [r1, #16]
 800742a:	0020      	movs	r0, r4
 800742c:	9100      	str	r1, [sp, #0]
 800742e:	4907      	ldr	r1, [pc, #28]	; (800744c <timeCommand+0x74>)
 8007430:	f00b ffcc 	bl	80133cc <sprintf>
 8007434:	e7dd      	b.n	80073f2 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8007436:	7c4b      	ldrb	r3, [r1, #17]
 8007438:	7c8a      	ldrb	r2, [r1, #18]
 800743a:	4805      	ldr	r0, [pc, #20]	; (8007450 <timeCommand+0x78>)
 800743c:	e7f1      	b.n	8007422 <timeCommand+0x4a>
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	200070a8 	.word	0x200070a8
 8007444:	08019518 	.word	0x08019518
 8007448:	08019570 	.word	0x08019570
 800744c:	08019540 	.word	0x08019540
 8007450:	0801956c 	.word	0x0801956c

08007454 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007454:	2800      	cmp	r0, #0
 8007456:	d008      	beq.n	800746a <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <resetCommand+0x1c>)
 800745e:	4a05      	ldr	r2, [pc, #20]	; (8007474 <resetCommand+0x20>)
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	e7fd      	b.n	8007466 <resetCommand+0x12>
 800746a:	b672      	cpsid	i
 800746c:	e7fe      	b.n	800746c <resetCommand+0x18>
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	e000ed00 	.word	0xe000ed00
 8007474:	05fa0004 	.word	0x05fa0004

08007478 <RegisterUserCLICommands>:
}
 8007478:	4770      	bx	lr
 800747a:	46c0      	nop			; (mov r8, r8)

0800747c <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 800747c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800747e:	4c45      	ldr	r4, [pc, #276]	; (8007594 <vRegisterCLICommands+0x118>)
 8007480:	0020      	movs	r0, r4
 8007482:	f006 f9e3 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007486:	0020      	movs	r0, r4
 8007488:	3010      	adds	r0, #16
 800748a:	f006 f9df 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800748e:	0020      	movs	r0, r4
 8007490:	3020      	adds	r0, #32
 8007492:	f006 f9db 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007496:	0020      	movs	r0, r4
 8007498:	3030      	adds	r0, #48	; 0x30
 800749a:	f006 f9d7 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 800749e:	0020      	movs	r0, r4
 80074a0:	3040      	adds	r0, #64	; 0x40
 80074a2:	f006 f9d3 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80074a6:	0020      	movs	r0, r4
 80074a8:	3050      	adds	r0, #80	; 0x50
 80074aa:	f006 f9cf 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80074ae:	0020      	movs	r0, r4
 80074b0:	3060      	adds	r0, #96	; 0x60
 80074b2:	f006 f9cb 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80074b6:	0020      	movs	r0, r4
 80074b8:	3070      	adds	r0, #112	; 0x70
 80074ba:	f006 f9c7 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80074be:	4c36      	ldr	r4, [pc, #216]	; (8007598 <vRegisterCLICommands+0x11c>)
 80074c0:	0020      	movs	r0, r4
 80074c2:	f006 f9c3 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80074c6:	0020      	movs	r0, r4
 80074c8:	3010      	adds	r0, #16
 80074ca:	f006 f9bf 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80074ce:	0020      	movs	r0, r4
 80074d0:	3020      	adds	r0, #32
 80074d2:	f006 f9bb 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80074d6:	0020      	movs	r0, r4
 80074d8:	3030      	adds	r0, #48	; 0x30
 80074da:	f006 f9b7 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80074de:	0020      	movs	r0, r4
 80074e0:	3040      	adds	r0, #64	; 0x40
 80074e2:	f006 f9b3 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80074e6:	0020      	movs	r0, r4
 80074e8:	3050      	adds	r0, #80	; 0x50
 80074ea:	f006 f9af 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80074ee:	0020      	movs	r0, r4
 80074f0:	3060      	adds	r0, #96	; 0x60
 80074f2:	f006 f9ab 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80074f6:	0020      	movs	r0, r4
 80074f8:	3070      	adds	r0, #112	; 0x70
 80074fa:	f006 f9a7 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80074fe:	4c27      	ldr	r4, [pc, #156]	; (800759c <vRegisterCLICommands+0x120>)
 8007500:	0020      	movs	r0, r4
 8007502:	f006 f9a3 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007506:	0020      	movs	r0, r4
 8007508:	3010      	adds	r0, #16
 800750a:	f006 f99f 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800750e:	0020      	movs	r0, r4
 8007510:	3020      	adds	r0, #32
 8007512:	f006 f99b 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007516:	0020      	movs	r0, r4
 8007518:	3030      	adds	r0, #48	; 0x30
 800751a:	f006 f997 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800751e:	0020      	movs	r0, r4
 8007520:	3040      	adds	r0, #64	; 0x40
 8007522:	f006 f993 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007526:	0020      	movs	r0, r4
 8007528:	3050      	adds	r0, #80	; 0x50
 800752a:	f006 f98f 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800752e:	0020      	movs	r0, r4
 8007530:	3060      	adds	r0, #96	; 0x60
 8007532:	f006 f98b 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007536:	0020      	movs	r0, r4
 8007538:	3070      	adds	r0, #112	; 0x70
 800753a:	f006 f987 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800753e:	4c18      	ldr	r4, [pc, #96]	; (80075a0 <vRegisterCLICommands+0x124>)
 8007540:	0020      	movs	r0, r4
 8007542:	f006 f983 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007546:	0020      	movs	r0, r4
 8007548:	3010      	adds	r0, #16
 800754a:	f006 f97f 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800754e:	0020      	movs	r0, r4
 8007550:	3020      	adds	r0, #32
 8007552:	f006 f97b 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007556:	0020      	movs	r0, r4
 8007558:	3030      	adds	r0, #48	; 0x30
 800755a:	f006 f977 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800755e:	0020      	movs	r0, r4
 8007560:	3040      	adds	r0, #64	; 0x40
 8007562:	f006 f973 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007566:	0020      	movs	r0, r4
 8007568:	3050      	adds	r0, #80	; 0x50
 800756a:	f006 f96f 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800756e:	0020      	movs	r0, r4
 8007570:	3060      	adds	r0, #96	; 0x60
 8007572:	f006 f96b 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007576:	0020      	movs	r0, r4
 8007578:	3070      	adds	r0, #112	; 0x70
 800757a:	f006 f967 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800757e:	4809      	ldr	r0, [pc, #36]	; (80075a4 <vRegisterCLICommands+0x128>)
 8007580:	f006 f964 	bl	800d84c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007584:	2223      	movs	r2, #35	; 0x23
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <vRegisterCLICommands+0x12c>)
 8007588:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800758a:	f004 f8b7 	bl	800b6fc <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800758e:	f7ff ff73 	bl	8007478 <RegisterUserCLICommands>
}
 8007592:	bd10      	pop	{r4, pc}
 8007594:	0801791c 	.word	0x0801791c
 8007598:	0801799c 	.word	0x0801799c
 800759c:	08017a1c 	.word	0x08017a1c
 80075a0:	08017a9c 	.word	0x08017a9c
 80075a4:	08017b1c 	.word	0x08017b1c
 80075a8:	20007024 	.word	0x20007024

080075ac <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80075ac:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80075ae:	1e44      	subs	r4, r0, #1
 80075b0:	00e5      	lsls	r5, r4, #3
 80075b2:	4e07      	ldr	r6, [pc, #28]	; (80075d0 <StopStreamDMA+0x24>)
 80075b4:	1b2d      	subs	r5, r5, r4
 80075b6:	00ed      	lsls	r5, r5, #3
 80075b8:	19a8      	adds	r0, r5, r6
	
	HAL_DMA_Abort(hDMA);
 80075ba:	f008 fd43 	bl	8010044 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075be:	2300      	movs	r3, #0
 80075c0:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] =0;
 80075c2:	4804      	ldr	r0, [pc, #16]	; (80075d4 <StopStreamDMA+0x28>)
 80075c4:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR =0;
 80075c6:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80075c8:	5023      	str	r3, [r4, r0]
	dmaStreamTotal[port - 1] =0;
 80075ca:	1904      	adds	r4, r0, r4
 80075cc:	61a3      	str	r3, [r4, #24]
	
}
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	20001e78 	.word	0x20001e78
 80075d4:	200012fc 	.word	0x200012fc

080075d8 <SwitchMsgDMAToStream>:
	hDMA =&msgRxDMA[port - 1];
 80075d8:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 80075de:	4d07      	ldr	r5, [pc, #28]	; (80075fc <SwitchMsgDMAToStream+0x24>)
 80075e0:	1a24      	subs	r4, r4, r0
 80075e2:	00e4      	lsls	r4, r4, #3
 80075e4:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 80075e6:	f008 fd2d 	bl	8010044 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	5961      	ldr	r1, [r4, r5]
	
	// Stop the messaging DMA
	StopMsgDMA(port);
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075ee:	4804      	ldr	r0, [pc, #16]	; (8007600 <SwitchMsgDMAToStream+0x28>)
	hDMA->Instance->CNDTR =0;
 80075f0:	604b      	str	r3, [r1, #4]
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075f2:	1820      	adds	r0, r4, r0
 80075f4:	f004 fa04 	bl	800ba00 <DMA_STREAM_CH_Init>
}
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	20002070 	.word	0x20002070
 8007600:	20001e78 	.word	0x20001e78

08007604 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	46d6      	mov	lr, sl
 8007608:	464f      	mov	r7, r9
 800760a:	4646      	mov	r6, r8
 800760c:	b5c0      	push	{r6, r7, lr}
	hDMA =&streamDMA[port - 1];
 800760e:	1e46      	subs	r6, r0, #1
 8007610:	00f4      	lsls	r4, r6, #3
 8007612:	4f15      	ldr	r7, [pc, #84]	; (8007668 <SwitchStreamDMAToMsg+0x64>)
 8007614:	1ba4      	subs	r4, r4, r6
 8007616:	00e4      	lsls	r4, r4, #3
 8007618:	19e3      	adds	r3, r4, r7
void SwitchStreamDMAToMsg(uint8_t port){
 800761a:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 800761c:	0018      	movs	r0, r3
	hDMA =&streamDMA[port - 1];
 800761e:	4699      	mov	r9, r3
	HAL_DMA_Abort(hDMA);
 8007620:	f008 fd10 	bl	8010044 <HAL_DMA_Abort>
	// Stop the streaming DMA
	StopStreamDMA(port);
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <SwitchStreamDMAToMsg+0x68>)
	hDMA->Instance->CNDTR =0;
 8007626:	2500      	movs	r5, #0
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007628:	469a      	mov	sl, r3
	hDMA->Instance->CNDTR =0;
 800762a:	59e1      	ldr	r1, [r4, r7]
	dmaStreamCount[port - 1] =0;
 800762c:	4a10      	ldr	r2, [pc, #64]	; (8007670 <SwitchStreamDMAToMsg+0x6c>)
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800762e:	44a2      	add	sl, r4
	dmaStreamCount[port - 1] =0;
 8007630:	00b6      	lsls	r6, r6, #2
	hDMA->Instance->CNDTR =0;
 8007632:	604d      	str	r5, [r1, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007634:	4650      	mov	r0, sl
	dmaStreamCount[port - 1] =0;
 8007636:	50b5      	str	r5, [r6, r2]
	dmaStreamTotal[port - 1] =0;
 8007638:	1996      	adds	r6, r2, r6
 800763a:	61b5      	str	r5, [r6, #24]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800763c:	f004 f9ce 	bl	800b9dc <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007640:	464b      	mov	r3, r9
 8007642:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007644:	f004 f85c 	bl	800b700 <GetPort>
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <SwitchStreamDMAToMsg+0x70>)
	streamDMA[port - 1].Instance =0;
 800764a:	51e5      	str	r5, [r4, r7]
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 800764c:	541d      	strb	r5, [r3, r0]
	dmaStreamDst[port - 1] =0;
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800764e:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] =0;
 8007650:	6335      	str	r5, [r6, #48]	; 0x30
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007652:	f005 ffbf 	bl	800d5d4 <GetUart>
 8007656:	4651      	mov	r1, sl
 8007658:	f004 fd80 	bl	800c15c <DMA_MSG_RX_Setup>
	
}
 800765c:	bc1c      	pop	{r2, r3, r4}
 800765e:	4690      	mov	r8, r2
 8007660:	4699      	mov	r9, r3
 8007662:	46a2      	mov	sl, r4
 8007664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	20001e78 	.word	0x20001e78
 800766c:	20002070 	.word	0x20002070
 8007670:	200012fc 	.word	0x200012fc
 8007674:	20000c2c 	.word	0x20000c2c

08007678 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767a:	46c6      	mov	lr, r8
 800767c:	b500      	push	{lr}
 800767e:	0005      	movs	r5, r0
 8007680:	000f      	movs	r7, r1
 8007682:	4690      	mov	r8, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007684:	f004 f83c 	bl	800b700 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007688:	4e0e      	ldr	r6, [pc, #56]	; (80076c4 <StartDMAstream+0x4c>)
	uint8_t srcPort =GetPort(huartSrc);
 800768a:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800768c:	5c33      	ldrb	r3, [r6, r0]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d902      	bls.n	8007698 <StartDMAstream+0x20>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007692:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007694:	2b03      	cmp	r3, #3
 8007696:	d111      	bne.n	80076bc <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 8007698:	0020      	movs	r0, r4
 800769a:	f7ff ff9d 	bl	80075d8 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 800769e:	4a0a      	ldr	r2, [pc, #40]	; (80076c8 <StartDMAstream+0x50>)
 80076a0:	1e63      	subs	r3, r4, #1
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	18d1      	adds	r1, r2, r3
 80076a6:	630f      	str	r7, [r1, #48]	; 0x30
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80076a8:	2102      	movs	r1, #2
 80076aa:	5531      	strb	r1, [r6, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80076ac:	2100      	movs	r1, #0
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076ae:	0028      	movs	r0, r5
	dmaStreamCount[srcPort - 1] =0;
 80076b0:	5099      	str	r1, [r3, r2]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076b2:	4642      	mov	r2, r8
 80076b4:	0039      	movs	r1, r7
 80076b6:	f004 fdb7 	bl	800c228 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80076ba:	2000      	movs	r0, #0
}
 80076bc:	bc04      	pop	{r2}
 80076be:	4690      	mov	r8, r2
 80076c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	20000c2c 	.word	0x20000c2c
 80076c8:	200012fc 	.word	0x200012fc

080076cc <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	46ce      	mov	lr, r9
 80076d0:	4647      	mov	r7, r8
 80076d2:	b580      	push	{r7, lr}
	if(portStatus[port] != STREAM){
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <DMA_IRQHandler+0x70>)
 80076d6:	1e45      	subs	r5, r0, #1
 80076d8:	00ee      	lsls	r6, r5, #3
 80076da:	5c12      	ldrb	r2, [r2, r0]
 80076dc:	1b73      	subs	r3, r6, r5
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	2a02      	cmp	r2, #2
 80076e2:	d007      	beq.n	80076f4 <DMA_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80076e4:	4816      	ldr	r0, [pc, #88]	; (8007740 <DMA_IRQHandler+0x74>)
 80076e6:	1818      	adds	r0, r3, r0
 80076e8:	f008 fcd4 	bl	8010094 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80076ec:	bc0c      	pop	{r2, r3}
 80076ee:	4690      	mov	r8, r2
 80076f0:	4699      	mov	r9, r3
 80076f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <DMA_IRQHandler+0x78>)
		if(dmaStreamTotal[port - 1])
 80076f6:	00af      	lsls	r7, r5, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076f8:	4691      	mov	r9, r2
 80076fa:	444b      	add	r3, r9
 80076fc:	0018      	movs	r0, r3
 80076fe:	001c      	movs	r4, r3
 8007700:	f008 fcc8 	bl	8010094 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <DMA_IRQHandler+0x7c>)
 8007706:	4698      	mov	r8, r3
 8007708:	19db      	adds	r3, r3, r7
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	2a00      	cmp	r2, #0
 800770e:	d006      	beq.n	800771e <DMA_IRQHandler+0x52>
			++dmaStreamCount[port - 1];
 8007710:	4643      	mov	r3, r8
 8007712:	4641      	mov	r1, r8
 8007714:	59db      	ldr	r3, [r3, r7]
 8007716:	3301      	adds	r3, #1
 8007718:	51cb      	str	r3, [r1, r7]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800771a:	429a      	cmp	r2, r3
 800771c:	d8e6      	bhi.n	80076ec <DMA_IRQHandler+0x20>
	HAL_DMA_Abort(hDMA);
 800771e:	0020      	movs	r0, r4
 8007720:	f008 fc90 	bl	8010044 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007724:	464b      	mov	r3, r9
 8007726:	1b75      	subs	r5, r6, r5
 8007728:	00ed      	lsls	r5, r5, #3
 800772a:	595a      	ldr	r2, [r3, r5]
 800772c:	2300      	movs	r3, #0
 800772e:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007730:	4642      	mov	r2, r8
 8007732:	51d3      	str	r3, [r2, r7]
	dmaStreamTotal[port - 1] =0;
 8007734:	4447      	add	r7, r8
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	e7d8      	b.n	80076ec <DMA_IRQHandler+0x20>
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	20000c2c 	.word	0x20000c2c
 8007740:	20002070 	.word	0x20002070
 8007744:	20001e78 	.word	0x20001e78
 8007748:	200012fc 	.word	0x200012fc

0800774c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800774c:	4b08      	ldr	r3, [pc, #32]	; (8007770 <ResetUartORE+0x24>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	2308      	movs	r3, #8
 8007752:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007754:	4a07      	ldr	r2, [pc, #28]	; (8007774 <ResetUartORE+0x28>)
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800775a:	4a07      	ldr	r2, [pc, #28]	; (8007778 <ResetUartORE+0x2c>)
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007760:	4a06      	ldr	r2, [pc, #24]	; (800777c <ResetUartORE+0x30>)
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007766:	4a06      	ldr	r2, [pc, #24]	; (8007780 <ResetUartORE+0x34>)
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	6213      	str	r3, [r2, #32]
#endif
}
 800776c:	4770      	bx	lr
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	200072c0 	.word	0x200072c0
 8007774:	20007420 	.word	0x20007420
 8007778:	200071dc 	.word	0x200071dc
 800777c:	20007250 	.word	0x20007250
 8007780:	2000733c 	.word	0x2000733c

08007784 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	000d      	movs	r5, r1
 8007788:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800778a:	4c25      	ldr	r4, [pc, #148]	; (8007820 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800778c:	f009 f922 	bl	80109d4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007790:	4924      	ldr	r1, [pc, #144]	; (8007824 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007792:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007794:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007796:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007798:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800779a:	2b00      	cmp	r3, #0
 800779c:	d105      	bne.n	80077aa <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800779e:	4b22      	ldr	r3, [pc, #136]	; (8007828 <EE_VerifyPageFullWriteVariable+0xa4>)
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d007      	beq.n	80077b4 <EE_VerifyPageFullWriteVariable+0x30>
 80077a4:	4a21      	ldr	r2, [pc, #132]	; (800782c <EE_VerifyPageFullWriteVariable+0xa8>)
 80077a6:	0023      	movs	r3, r4
 80077a8:	e007      	b.n	80077ba <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	d122      	bne.n	80077f4 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <EE_VerifyPageFullWriteVariable+0xa4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d0f7      	beq.n	80077a4 <EE_VerifyPageFullWriteVariable+0x20>
 80077b4:	000c      	movs	r4, r1
 80077b6:	000b      	movs	r3, r1
 80077b8:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	d103      	bne.n	80077c8 <EE_VerifyPageFullWriteVariable+0x44>
 80077c0:	e009      	b.n	80077d6 <EE_VerifyPageFullWriteVariable+0x52>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	d006      	beq.n	80077d6 <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80077c8:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80077ca:	42a2      	cmp	r2, r4
 80077cc:	d8f9      	bhi.n	80077c2 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 80077ce:	f009 f913 	bl	80109f8 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80077d2:	2080      	movs	r0, #128	; 0x80
}
 80077d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80077d6:	002a      	movs	r2, r5
 80077d8:	2300      	movs	r3, #0
 80077da:	0021      	movs	r1, r4
 80077dc:	2001      	movs	r0, #1
 80077de:	f009 f959 	bl	8010a94 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80077e2:	4814      	ldr	r0, [pc, #80]	; (8007834 <EE_VerifyPageFullWriteVariable+0xb0>)
 80077e4:	f009 f912 	bl	8010a0c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d005      	beq.n	80077f8 <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <EE_VerifyPageFullWriteVariable+0xb4>)
 80077ee:	69d8      	ldr	r0, [r3, #28]
 80077f0:	b280      	uxth	r0, r0
 80077f2:	e7ef      	b.n	80077d4 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 80077f4:	20ab      	movs	r0, #171	; 0xab
 80077f6:	e7ed      	b.n	80077d4 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077f8:	2701      	movs	r7, #1
 80077fa:	4d10      	ldr	r5, [pc, #64]	; (800783c <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 80077fc:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077fe:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007800:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007802:	43bb      	bics	r3, r7
 8007804:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007806:	2001      	movs	r0, #1
 8007808:	2300      	movs	r3, #0
 800780a:	f009 f943 	bl	8010a94 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800780e:	4809      	ldr	r0, [pc, #36]	; (8007834 <EE_VerifyPageFullWriteVariable+0xb0>)
 8007810:	f009 f8fc 	bl	8010a0c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007814:	2800      	cmp	r0, #0
 8007816:	d1e9      	bne.n	80077ec <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007818:	692b      	ldr	r3, [r5, #16]
 800781a:	43bb      	bics	r3, r7
 800781c:	612b      	str	r3, [r5, #16]
 800781e:	e7e5      	b.n	80077ec <EE_VerifyPageFullWriteVariable+0x68>
 8007820:	0801f000 	.word	0x0801f000
 8007824:	0801e000 	.word	0x0801e000
 8007828:	0000eeee 	.word	0x0000eeee
 800782c:	0801fffe 	.word	0x0801fffe
 8007830:	0801effe 	.word	0x0801effe
 8007834:	0000c350 	.word	0x0000c350
 8007838:	20007600 	.word	0x20007600
 800783c:	40022000 	.word	0x40022000

08007840 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007842:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007844:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007846:	4b11      	ldr	r3, [pc, #68]	; (800788c <EE_ReadVariable+0x4c>)
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800784c:	2a00      	cmp	r2, #0
 800784e:	d005      	beq.n	800785c <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 8007850:	2b00      	cmp	r3, #0
 8007852:	d117      	bne.n	8007884 <EE_ReadVariable+0x44>
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <EE_ReadVariable+0x50>)
 8007856:	4c0f      	ldr	r4, [pc, #60]	; (8007894 <EE_ReadVariable+0x54>)
 8007858:	001a      	movs	r2, r3
 800785a:	e002      	b.n	8007862 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800785c:	4b0e      	ldr	r3, [pc, #56]	; (8007898 <EE_ReadVariable+0x58>)
 800785e:	4c0f      	ldr	r4, [pc, #60]	; (800789c <EE_ReadVariable+0x5c>)
 8007860:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 8007862:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 8007864:	4290      	cmp	r0, r2
 8007866:	d103      	bne.n	8007870 <EE_ReadVariable+0x30>
 8007868:	e007      	b.n	800787a <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800786a:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800786c:	4282      	cmp	r2, r0
 800786e:	d004      	beq.n	800787a <EE_ReadVariable+0x3a>
			Address =Address - 4;
 8007870:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007872:	42a3      	cmp	r3, r4
 8007874:	d8f9      	bhi.n	800786a <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007876:	2001      	movs	r0, #1
}
 8007878:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800787a:	3b02      	subs	r3, #2
 800787c:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800787e:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007880:	800b      	strh	r3, [r1, #0]
			break;
 8007882:	e7f9      	b.n	8007878 <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 8007884:	20ab      	movs	r0, #171	; 0xab
 8007886:	e7f7      	b.n	8007878 <EE_ReadVariable+0x38>
 8007888:	0801e000 	.word	0x0801e000
 800788c:	0801f000 	.word	0x0801f000
 8007890:	0801fffe 	.word	0x0801fffe
 8007894:	0801f002 	.word	0x0801f002
 8007898:	0801effe 	.word	0x0801effe
 800789c:	0801e002 	.word	0x0801e002

080078a0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80078a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a2:	46d6      	mov	lr, sl
 80078a4:	4646      	mov	r6, r8
 80078a6:	464f      	mov	r7, r9
 80078a8:	000c      	movs	r4, r1
 80078aa:	b5c0      	push	{r6, r7, lr}
 80078ac:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 80078ae:	f009 f891 	bl	80109d4 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80078b2:	0021      	movs	r1, r4
 80078b4:	0030      	movs	r0, r6
 80078b6:	f7ff ff65 	bl	8007784 <EE_VerifyPageFullWriteVariable>
 80078ba:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 80078bc:	2880      	cmp	r0, #128	; 0x80
 80078be:	d007      	beq.n	80078d0 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 80078c0:	f009 f89a 	bl	80109f8 <HAL_FLASH_Lock>
}
 80078c4:	0028      	movs	r0, r5
 80078c6:	bc1c      	pop	{r2, r3, r4}
 80078c8:	4690      	mov	r8, r2
 80078ca:	4699      	mov	r9, r3
 80078cc:	46a2      	mov	sl, r4
 80078ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 80078d0:	f009 f880 	bl	80109d4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078d4:	4935      	ldr	r1, [pc, #212]	; (80079ac <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078d6:	4a36      	ldr	r2, [pc, #216]	; (80079b0 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078d8:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078da:	8813      	ldrh	r3, [r2, #0]
 80078dc:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80078de:	2800      	cmp	r0, #0
 80078e0:	d013      	beq.n	800790a <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 80078e2:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1eb      	bne.n	80078c0 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 80078e8:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 80078ea:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 80078ec:	4a31      	ldr	r2, [pc, #196]	; (80079b4 <EE_WriteVariable+0x114>)
 80078ee:	2300      	movs	r3, #0
 80078f0:	4641      	mov	r1, r8
 80078f2:	2001      	movs	r0, #1
 80078f4:	f009 f8ce 	bl	8010a94 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078f8:	482f      	ldr	r0, [pc, #188]	; (80079b8 <EE_WriteVariable+0x118>)
 80078fa:	f009 f887 	bl	8010a0c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078fe:	2800      	cmp	r0, #0
 8007900:	d006      	beq.n	8007910 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 8007902:	4b2e      	ldr	r3, [pc, #184]	; (80079bc <EE_WriteVariable+0x11c>)
 8007904:	69dd      	ldr	r5, [r3, #28]
 8007906:	b2ad      	uxth	r5, r5
 8007908:	e7da      	b.n	80078c0 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800790a:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800790c:	4690      	mov	r8, r2
 800790e:	e7ed      	b.n	80078ec <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007910:	2101      	movs	r1, #1
 8007912:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007914:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007916:	6913      	ldr	r3, [r2, #16]
 8007918:	438b      	bics	r3, r1
 800791a:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800791c:	0021      	movs	r1, r4
 800791e:	f7ff ff31 	bl	8007784 <EE_VerifyPageFullWriteVariable>
 8007922:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 8007924:	d1cc      	bne.n	80078c0 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <EE_WriteVariable+0x124>)
 8007928:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800792a:	4f27      	ldr	r7, [pc, #156]	; (80079c8 <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800792c:	469a      	mov	sl, r3
 800792e:	e003      	b.n	8007938 <EE_WriteVariable+0x98>
 8007930:	3401      	adds	r4, #1
 8007932:	b2a4      	uxth	r4, r4
 8007934:	4554      	cmp	r4, sl
 8007936:	d00f      	beq.n	8007958 <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007938:	42a6      	cmp	r6, r4
 800793a:	d0f9      	beq.n	8007930 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800793c:	0039      	movs	r1, r7
 800793e:	0020      	movs	r0, r4
 8007940:	f7ff ff7e 	bl	8007840 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007944:	2801      	cmp	r0, #1
 8007946:	d0f3      	beq.n	8007930 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007948:	8839      	ldrh	r1, [r7, #0]
 800794a:	0020      	movs	r0, r4
 800794c:	f7ff ff1a 	bl	8007784 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007950:	2800      	cmp	r0, #0
 8007952:	d0ed      	beq.n	8007930 <EE_WriteVariable+0x90>
 8007954:	0005      	movs	r5, r0
 8007956:	e7b3      	b.n	80078c0 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 8007958:	4648      	mov	r0, r9
 800795a:	f009 f96b 	bl	8010c34 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800795e:	4816      	ldr	r0, [pc, #88]	; (80079b8 <EE_WriteVariable+0x118>)
 8007960:	f009 f854 	bl	8010a0c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007964:	2800      	cmp	r0, #0
 8007966:	d1cc      	bne.n	8007902 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007968:	2080      	movs	r0, #128	; 0x80
 800796a:	0100      	lsls	r0, r0, #4
 800796c:	4448      	add	r0, r9
 800796e:	f009 f961 	bl	8010c34 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007972:	4811      	ldr	r0, [pc, #68]	; (80079b8 <EE_WriteVariable+0x118>)
 8007974:	f009 f84a 	bl	8010a0c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007978:	2800      	cmp	r0, #0
 800797a:	d1c2      	bne.n	8007902 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800797c:	2202      	movs	r2, #2
 800797e:	4c10      	ldr	r4, [pc, #64]	; (80079c0 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007980:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007982:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007984:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007986:	4393      	bics	r3, r2
 8007988:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	f009 f881 	bl	8010a94 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007992:	4809      	ldr	r0, [pc, #36]	; (80079b8 <EE_WriteVariable+0x118>)
 8007994:	f009 f83a 	bl	8010a0c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007998:	2800      	cmp	r0, #0
 800799a:	d1b2      	bne.n	8007902 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800799c:	2201      	movs	r2, #1
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	4393      	bics	r3, r2
 80079a2:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 80079a4:	f009 f828 	bl	80109f8 <HAL_FLASH_Lock>
 80079a8:	e78a      	b.n	80078c0 <EE_WriteVariable+0x20>
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	0801e000 	.word	0x0801e000
 80079b0:	0801f000 	.word	0x0801f000
 80079b4:	0000eeee 	.word	0x0000eeee
 80079b8:	0000c350 	.word	0x0000c350
 80079bc:	20007600 	.word	0x20007600
 80079c0:	40022000 	.word	0x40022000
 80079c4:	00000401 	.word	0x00000401
 80079c8:	2000180c 	.word	0x2000180c

080079cc <EE_Format>:
uint16_t EE_Format(void){
 80079cc:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 80079ce:	f009 f801 	bl	80109d4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80079d2:	481f      	ldr	r0, [pc, #124]	; (8007a50 <EE_Format+0x84>)
 80079d4:	f009 f92e 	bl	8010c34 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079d8:	481e      	ldr	r0, [pc, #120]	; (8007a54 <EE_Format+0x88>)
 80079da:	f009 f817 	bl	8010a0c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079de:	2800      	cmp	r0, #0
 80079e0:	d003      	beq.n	80079ea <EE_Format+0x1e>
			return pFlash.ErrorCode;
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <EE_Format+0x8c>)
 80079e4:	69d8      	ldr	r0, [r3, #28]
 80079e6:	b280      	uxth	r0, r0
}
 80079e8:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079ea:	481c      	ldr	r0, [pc, #112]	; (8007a5c <EE_Format+0x90>)
 80079ec:	f009 f922 	bl	8010c34 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079f0:	4818      	ldr	r0, [pc, #96]	; (8007a54 <EE_Format+0x88>)
 80079f2:	f009 f80b 	bl	8010a0c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d1f3      	bne.n	80079e2 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079fa:	2202      	movs	r2, #2
 80079fc:	4c18      	ldr	r4, [pc, #96]	; (8007a60 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80079fe:	4914      	ldr	r1, [pc, #80]	; (8007a50 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a00:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a02:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a04:	4393      	bics	r3, r2
 8007a06:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f009 f842 	bl	8010a94 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a10:	4810      	ldr	r0, [pc, #64]	; (8007a54 <EE_Format+0x88>)
 8007a12:	f008 fffb 	bl	8010a0c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d1e3      	bne.n	80079e2 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a1a:	2501      	movs	r5, #1
 8007a1c:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a1e:	4811      	ldr	r0, [pc, #68]	; (8007a64 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a20:	43ab      	bics	r3, r5
 8007a22:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a24:	f009 f906 	bl	8010c34 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a28:	480a      	ldr	r0, [pc, #40]	; (8007a54 <EE_Format+0x88>)
 8007a2a:	f008 ffef 	bl	8010a0c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d1d7      	bne.n	80079e2 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <EE_Format+0x9c>)
 8007a34:	f009 f8fe 	bl	8010c34 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a38:	4806      	ldr	r0, [pc, #24]	; (8007a54 <EE_Format+0x88>)
 8007a3a:	f008 ffe7 	bl	8010a0c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d1cf      	bne.n	80079e2 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	43ab      	bics	r3, r5
 8007a46:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 8007a48:	f008 ffd6 	bl	80109f8 <HAL_FLASH_Lock>
	return FlashStatus;
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e7cb      	b.n	80079e8 <EE_Format+0x1c>
 8007a50:	0801e000 	.word	0x0801e000
 8007a54:	0000c350 	.word	0x0000c350
 8007a58:	20007600 	.word	0x20007600
 8007a5c:	0801e800 	.word	0x0801e800
 8007a60:	40022000 	.word	0x40022000
 8007a64:	0801f000 	.word	0x0801f000
 8007a68:	0801f800 	.word	0x0801f800

08007a6c <EE_Init>:
uint16_t EE_Init(void){
 8007a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6e:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a70:	4c9d      	ldr	r4, [pc, #628]	; (8007ce8 <EE_Init+0x27c>)
uint16_t EE_Init(void){
 8007a72:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a74:	4d9d      	ldr	r5, [pc, #628]	; (8007cec <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 8007a76:	f008 ffad 	bl	80109d4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a7a:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 8007a7c:	499c      	ldr	r1, [pc, #624]	; (8007cf0 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a7e:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a80:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a82:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a84:	428b      	cmp	r3, r1
 8007a86:	d100      	bne.n	8007a8a <EE_Init+0x1e>
 8007a88:	e06f      	b.n	8007b6a <EE_Init+0xfe>
 8007a8a:	489a      	ldr	r0, [pc, #616]	; (8007cf4 <EE_Init+0x288>)
 8007a8c:	4283      	cmp	r3, r0
 8007a8e:	d05c      	beq.n	8007b4a <EE_Init+0xde>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <EE_Init+0x46>
			FlashStatus =EE_Format();
 8007a94:	f7ff ff9a 	bl	80079cc <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a98:	4897      	ldr	r0, [pc, #604]	; (8007cf8 <EE_Init+0x28c>)
 8007a9a:	f008 ffb7 	bl	8010a0c <FLASH_WaitForLastOperation>
 8007a9e:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	d102      	bne.n	8007aaa <EE_Init+0x3e>
	HAL_FLASH_Lock();
 8007aa4:	f008 ffa8 	bl	80109f8 <HAL_FLASH_Lock>
	return HAL_OK;
 8007aa8:	2500      	movs	r5, #0
}
 8007aaa:	0028      	movs	r0, r5
 8007aac:	bc04      	pop	{r2}
 8007aae:	4690      	mov	r8, r2
 8007ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	d0ee      	beq.n	8007a94 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007ab6:	4282      	cmp	r2, r0
 8007ab8:	d100      	bne.n	8007abc <EE_Init+0x50>
 8007aba:	e103      	b.n	8007cc4 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007abc:	4b8f      	ldr	r3, [pc, #572]	; (8007cfc <EE_Init+0x290>)
	int16_t x =-1;
 8007abe:	2601      	movs	r6, #1
 8007ac0:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ac2:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ac4:	4f8e      	ldr	r7, [pc, #568]	; (8007d00 <EE_Init+0x294>)
	int16_t x =-1;
 8007ac6:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ac8:	883b      	ldrh	r3, [r7, #0]
 8007aca:	b2a5      	uxth	r5, r4
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	d100      	bne.n	8007ad2 <EE_Init+0x66>
						x =VarIdx;
 8007ad0:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007ad2:	42b4      	cmp	r4, r6
 8007ad4:	d010      	beq.n	8007af8 <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ad6:	4641      	mov	r1, r8
 8007ad8:	0028      	movs	r0, r5
 8007ada:	f7ff feb1 	bl	8007840 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007ade:	2801      	cmp	r0, #1
 8007ae0:	d00a      	beq.n	8007af8 <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ae2:	4643      	mov	r3, r8
 8007ae4:	0028      	movs	r0, r5
 8007ae6:	8819      	ldrh	r1, [r3, #0]
 8007ae8:	f7ff fe4c 	bl	8007784 <EE_VerifyPageFullWriteVariable>
 8007aec:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aee:	4882      	ldr	r0, [pc, #520]	; (8007cf8 <EE_Init+0x28c>)
 8007af0:	f008 ff8c 	bl	8010a0c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d1d8      	bne.n	8007aaa <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007af8:	4b82      	ldr	r3, [pc, #520]	; (8007d04 <EE_Init+0x298>)
 8007afa:	3401      	adds	r4, #1
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d1e3      	bne.n	8007ac8 <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007b00:	2200      	movs	r2, #0
 8007b02:	2300      	movs	r3, #0
 8007b04:	4979      	ldr	r1, [pc, #484]	; (8007cec <EE_Init+0x280>)
 8007b06:	2001      	movs	r0, #1
 8007b08:	f008 ffc4 	bl	8010a94 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b0c:	487a      	ldr	r0, [pc, #488]	; (8007cf8 <EE_Init+0x28c>)
 8007b0e:	f008 ff7d 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d125      	bne.n	8007b62 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b16:	2201      	movs	r2, #1
 8007b18:	4c7b      	ldr	r4, [pc, #492]	; (8007d08 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b1a:	4873      	ldr	r0, [pc, #460]	; (8007ce8 <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	4393      	bics	r3, r2
 8007b20:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b22:	f009 f887 	bl	8010c34 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b26:	4874      	ldr	r0, [pc, #464]	; (8007cf8 <EE_Init+0x28c>)
 8007b28:	f008 ff70 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d118      	bne.n	8007b62 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b30:	4876      	ldr	r0, [pc, #472]	; (8007d0c <EE_Init+0x2a0>)
 8007b32:	f009 f87f 	bl	8010c34 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b36:	4870      	ldr	r0, [pc, #448]	; (8007cf8 <EE_Init+0x28c>)
 8007b38:	f008 ff68 	bl	8010a0c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d110      	bne.n	8007b62 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b40:	2202      	movs	r2, #2
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	4393      	bics	r3, r2
 8007b46:	6123      	str	r3, [r4, #16]
 8007b48:	e7ac      	b.n	8007aa4 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	d07b      	beq.n	8007c46 <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007b4e:	428a      	cmp	r2, r1
 8007b50:	d100      	bne.n	8007b54 <EE_Init+0xe8>
 8007b52:	e08f      	b.n	8007c74 <EE_Init+0x208>
				FlashStatus =EE_Format();
 8007b54:	f7ff ff3a 	bl	80079cc <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b58:	4867      	ldr	r0, [pc, #412]	; (8007cf8 <EE_Init+0x28c>)
 8007b5a:	f008 ff57 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0a0      	beq.n	8007aa4 <EE_Init+0x38>
						return pFlash.ErrorCode;
 8007b62:	4b6b      	ldr	r3, [pc, #428]	; (8007d10 <EE_Init+0x2a4>)
 8007b64:	69dd      	ldr	r5, [r3, #28]
 8007b66:	b2ad      	uxth	r5, r5
 8007b68:	e79f      	b.n	8007aaa <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b6a:	2a00      	cmp	r2, #0
 8007b6c:	d143      	bne.n	8007bf6 <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b6e:	4b63      	ldr	r3, [pc, #396]	; (8007cfc <EE_Init+0x290>)
	int16_t x =-1;
 8007b70:	2601      	movs	r6, #1
 8007b72:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b74:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b76:	4f67      	ldr	r7, [pc, #412]	; (8007d14 <EE_Init+0x2a8>)
	int16_t x =-1;
 8007b78:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b7a:	883b      	ldrh	r3, [r7, #0]
 8007b7c:	b2a5      	uxth	r5, r4
 8007b7e:	42ab      	cmp	r3, r5
 8007b80:	d100      	bne.n	8007b84 <EE_Init+0x118>
						x =VarIdx;
 8007b82:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007b84:	42b4      	cmp	r4, r6
 8007b86:	d011      	beq.n	8007bac <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b88:	4641      	mov	r1, r8
 8007b8a:	0028      	movs	r0, r5
 8007b8c:	f7ff fe58 	bl	8007840 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b90:	2801      	cmp	r0, #1
 8007b92:	d00b      	beq.n	8007bac <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b94:	4643      	mov	r3, r8
 8007b96:	0028      	movs	r0, r5
 8007b98:	8819      	ldrh	r1, [r3, #0]
 8007b9a:	f7ff fdf3 	bl	8007784 <EE_VerifyPageFullWriteVariable>
 8007b9e:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ba0:	4855      	ldr	r0, [pc, #340]	; (8007cf8 <EE_Init+0x28c>)
 8007ba2:	f008 ff33 	bl	8010a0c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d000      	beq.n	8007bac <EE_Init+0x140>
 8007baa:	e77e      	b.n	8007aaa <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007bac:	4b55      	ldr	r3, [pc, #340]	; (8007d04 <EE_Init+0x298>)
 8007bae:	3401      	adds	r4, #1
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	d1e2      	bne.n	8007b7a <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	494b      	ldr	r1, [pc, #300]	; (8007ce8 <EE_Init+0x27c>)
 8007bba:	2001      	movs	r0, #1
 8007bbc:	f008 ff6a 	bl	8010a94 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bc0:	484d      	ldr	r0, [pc, #308]	; (8007cf8 <EE_Init+0x28c>)
 8007bc2:	f008 ff23 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d1cb      	bne.n	8007b62 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4c4e      	ldr	r4, [pc, #312]	; (8007d08 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bce:	4847      	ldr	r0, [pc, #284]	; (8007cec <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	4393      	bics	r3, r2
 8007bd4:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd6:	f009 f82d 	bl	8010c34 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bda:	4847      	ldr	r0, [pc, #284]	; (8007cf8 <EE_Init+0x28c>)
 8007bdc:	f008 ff16 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d1be      	bne.n	8007b62 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007be4:	484c      	ldr	r0, [pc, #304]	; (8007d18 <EE_Init+0x2ac>)
 8007be6:	f009 f825 	bl	8010c34 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bea:	4843      	ldr	r0, [pc, #268]	; (8007cf8 <EE_Init+0x28c>)
 8007bec:	f008 ff0e 	bl	8010a0c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d0a5      	beq.n	8007b40 <EE_Init+0xd4>
 8007bf4:	e7b5      	b.n	8007b62 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bf6:	4b3f      	ldr	r3, [pc, #252]	; (8007cf4 <EE_Init+0x288>)
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d1ab      	bne.n	8007b54 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bfc:	0028      	movs	r0, r5
 8007bfe:	f009 f819 	bl	8010c34 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c02:	483d      	ldr	r0, [pc, #244]	; (8007cf8 <EE_Init+0x28c>)
 8007c04:	f008 ff02 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d1aa      	bne.n	8007b62 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c0c:	4842      	ldr	r0, [pc, #264]	; (8007d18 <EE_Init+0x2ac>)
 8007c0e:	f009 f811 	bl	8010c34 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c12:	4839      	ldr	r0, [pc, #228]	; (8007cf8 <EE_Init+0x28c>)
 8007c14:	f008 fefa 	bl	8010a0c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d1a2      	bne.n	8007b62 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	4d3a      	ldr	r5, [pc, #232]	; (8007d08 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c20:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c22:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c24:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c26:	4393      	bics	r3, r2
 8007c28:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f008 ff31 	bl	8010a94 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c32:	4831      	ldr	r0, [pc, #196]	; (8007cf8 <EE_Init+0x28c>)
 8007c34:	f008 feea 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d192      	bne.n	8007b62 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	692b      	ldr	r3, [r5, #16]
 8007c40:	4393      	bics	r3, r2
 8007c42:	612b      	str	r3, [r5, #16]
 8007c44:	e72e      	b.n	8007aa4 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c46:	0020      	movs	r0, r4
 8007c48:	f008 fff4 	bl	8010c34 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c4c:	482a      	ldr	r0, [pc, #168]	; (8007cf8 <EE_Init+0x28c>)
 8007c4e:	f008 fedd 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d185      	bne.n	8007b62 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c56:	482d      	ldr	r0, [pc, #180]	; (8007d0c <EE_Init+0x2a0>)
 8007c58:	f008 ffec 	bl	8010c34 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c5c:	4826      	ldr	r0, [pc, #152]	; (8007cf8 <EE_Init+0x28c>)
 8007c5e:	f008 fed5 	bl	8010a0c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d000      	beq.n	8007c68 <EE_Init+0x1fc>
 8007c66:	e77c      	b.n	8007b62 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c68:	2102      	movs	r1, #2
 8007c6a:	4a27      	ldr	r2, [pc, #156]	; (8007d08 <EE_Init+0x29c>)
 8007c6c:	6913      	ldr	r3, [r2, #16]
 8007c6e:	438b      	bics	r3, r1
 8007c70:	6113      	str	r3, [r2, #16]
 8007c72:	e717      	b.n	8007aa4 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c74:	0020      	movs	r0, r4
 8007c76:	f008 ffdd 	bl	8010c34 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c7a:	481f      	ldr	r0, [pc, #124]	; (8007cf8 <EE_Init+0x28c>)
 8007c7c:	f008 fec6 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d000      	beq.n	8007c86 <EE_Init+0x21a>
 8007c84:	e76d      	b.n	8007b62 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c86:	4821      	ldr	r0, [pc, #132]	; (8007d0c <EE_Init+0x2a0>)
 8007c88:	f008 ffd4 	bl	8010c34 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c8c:	481a      	ldr	r0, [pc, #104]	; (8007cf8 <EE_Init+0x28c>)
 8007c8e:	f008 febd 	bl	8010a0c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d000      	beq.n	8007c98 <EE_Init+0x22c>
 8007c96:	e764      	b.n	8007b62 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c98:	2202      	movs	r2, #2
 8007c9a:	4c1b      	ldr	r4, [pc, #108]	; (8007d08 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007c9c:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c9e:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ca0:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ca2:	4393      	bics	r3, r2
 8007ca4:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f008 fef3 	bl	8010a94 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cae:	4812      	ldr	r0, [pc, #72]	; (8007cf8 <EE_Init+0x28c>)
 8007cb0:	f008 feac 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d000      	beq.n	8007cba <EE_Init+0x24e>
 8007cb8:	e753      	b.n	8007b62 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007cba:	2201      	movs	r2, #1
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	4393      	bics	r3, r2
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	e6ef      	b.n	8007aa4 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cc4:	0028      	movs	r0, r5
 8007cc6:	f008 ffb5 	bl	8010c34 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cca:	480b      	ldr	r0, [pc, #44]	; (8007cf8 <EE_Init+0x28c>)
 8007ccc:	f008 fe9e 	bl	8010a0c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d000      	beq.n	8007cd6 <EE_Init+0x26a>
 8007cd4:	e745      	b.n	8007b62 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cd6:	4810      	ldr	r0, [pc, #64]	; (8007d18 <EE_Init+0x2ac>)
 8007cd8:	f008 ffac 	bl	8010c34 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cdc:	4806      	ldr	r0, [pc, #24]	; (8007cf8 <EE_Init+0x28c>)
 8007cde:	f008 fe95 	bl	8010a0c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0c0      	beq.n	8007c68 <EE_Init+0x1fc>
 8007ce6:	e73c      	b.n	8007b62 <EE_Init+0xf6>
 8007ce8:	0801e000 	.word	0x0801e000
 8007cec:	0801f000 	.word	0x0801f000
 8007cf0:	0000eeee 	.word	0x0000eeee
 8007cf4:	0000ffff 	.word	0x0000ffff
 8007cf8:	0000c350 	.word	0x0000c350
 8007cfc:	2000180c 	.word	0x2000180c
 8007d00:	0801f006 	.word	0x0801f006
 8007d04:	00000401 	.word	0x00000401
 8007d08:	40022000 	.word	0x40022000
 8007d0c:	0801e800 	.word	0x0801e800
 8007d10:	20007600 	.word	0x20007600
 8007d14:	0801e006 	.word	0x0801e006
 8007d18:	0801f800 	.word	0x0801f800

08007d1c <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1e:	46c6      	mov	lr, r8
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d20:	26a0      	movs	r6, #160	; 0xa0
 8007d22:	2400      	movs	r4, #0
 8007d24:	2703      	movs	r7, #3
void MX_FREERTOS_Init(void){
 8007d26:	b500      	push	{lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d28:	4d66      	ldr	r5, [pc, #408]	; (8007ec4 <MX_FREERTOS_Init+0x1a8>)
void MX_FREERTOS_Init(void){
 8007d2a:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d2c:	0076      	lsls	r6, r6, #1
 8007d2e:	9501      	str	r5, [sp, #4]
 8007d30:	9700      	str	r7, [sp, #0]
 8007d32:	0032      	movs	r2, r6
 8007d34:	9403      	str	r4, [sp, #12]
 8007d36:	9402      	str	r4, [sp, #8]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4963      	ldr	r1, [pc, #396]	; (8007ec8 <MX_FREERTOS_Init+0x1ac>)
 8007d3c:	4863      	ldr	r0, [pc, #396]	; (8007ecc <MX_FREERTOS_Init+0x1b0>)
 8007d3e:	f006 fc15 	bl	800e56c <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007d42:	1d2b      	adds	r3, r5, #4
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	9700      	str	r7, [sp, #0]
 8007d48:	0032      	movs	r2, r6
 8007d4a:	9403      	str	r4, [sp, #12]
 8007d4c:	9402      	str	r4, [sp, #8]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	495f      	ldr	r1, [pc, #380]	; (8007ed0 <MX_FREERTOS_Init+0x1b4>)
 8007d52:	4860      	ldr	r0, [pc, #384]	; (8007ed4 <MX_FREERTOS_Init+0x1b8>)
 8007d54:	f006 fc0a 	bl	800e56c <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007d58:	002b      	movs	r3, r5
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	0032      	movs	r2, r6
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	9700      	str	r7, [sp, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	495c      	ldr	r1, [pc, #368]	; (8007ed8 <MX_FREERTOS_Init+0x1bc>)
 8007d66:	9403      	str	r4, [sp, #12]
 8007d68:	9402      	str	r4, [sp, #8]
 8007d6a:	485c      	ldr	r0, [pc, #368]	; (8007edc <MX_FREERTOS_Init+0x1c0>)
 8007d6c:	f006 fbfe 	bl	800e56c <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007d70:	f7ff fb84 	bl	800747c <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007d74:	002b      	movs	r3, r5
 8007d76:	330c      	adds	r3, #12
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	9700      	str	r7, [sp, #0]
 8007d7c:	0032      	movs	r2, r6
 8007d7e:	9403      	str	r4, [sp, #12]
 8007d80:	9402      	str	r4, [sp, #8]
 8007d82:	2300      	movs	r3, #0
 8007d84:	4956      	ldr	r1, [pc, #344]	; (8007ee0 <MX_FREERTOS_Init+0x1c4>)
 8007d86:	4857      	ldr	r0, [pc, #348]	; (8007ee4 <MX_FREERTOS_Init+0x1c8>)
 8007d88:	f006 fbf0 	bl	800e56c <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007d8c:	002b      	movs	r3, r5
 8007d8e:	3310      	adds	r3, #16
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	2304      	movs	r3, #4
 8007d94:	4f54      	ldr	r7, [pc, #336]	; (8007ee8 <MX_FREERTOS_Init+0x1cc>)
 8007d96:	4698      	mov	r8, r3
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	0032      	movs	r2, r6
 8007d9c:	9403      	str	r4, [sp, #12]
 8007d9e:	9402      	str	r4, [sp, #8]
 8007da0:	3b03      	subs	r3, #3
 8007da2:	4952      	ldr	r1, [pc, #328]	; (8007eec <MX_FREERTOS_Init+0x1d0>)
 8007da4:	0038      	movs	r0, r7
 8007da6:	f006 fbe1 	bl	800e56c <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007daa:	002b      	movs	r3, r5
 8007dac:	3314      	adds	r3, #20
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	4643      	mov	r3, r8
 8007db2:	0032      	movs	r2, r6
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	9403      	str	r4, [sp, #12]
 8007db8:	9402      	str	r4, [sp, #8]
 8007dba:	3b02      	subs	r3, #2
 8007dbc:	494c      	ldr	r1, [pc, #304]	; (8007ef0 <MX_FREERTOS_Init+0x1d4>)
 8007dbe:	0038      	movs	r0, r7
 8007dc0:	f006 fbd4 	bl	800e56c <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007dc4:	002b      	movs	r3, r5
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	4643      	mov	r3, r8
 8007dcc:	0032      	movs	r2, r6
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	9403      	str	r4, [sp, #12]
 8007dd2:	9402      	str	r4, [sp, #8]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	4947      	ldr	r1, [pc, #284]	; (8007ef4 <MX_FREERTOS_Init+0x1d8>)
 8007dd8:	0038      	movs	r0, r7
 8007dda:	f006 fbc7 	bl	800e56c <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007dde:	002b      	movs	r3, r5
 8007de0:	331c      	adds	r3, #28
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	4643      	mov	r3, r8
 8007de6:	0032      	movs	r2, r6
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	9403      	str	r4, [sp, #12]
 8007dec:	9402      	str	r4, [sp, #8]
 8007dee:	4942      	ldr	r1, [pc, #264]	; (8007ef8 <MX_FREERTOS_Init+0x1dc>)
 8007df0:	0038      	movs	r0, r7
 8007df2:	f006 fbbb 	bl	800e56c <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007df6:	002b      	movs	r3, r5
 8007df8:	3320      	adds	r3, #32
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	4643      	mov	r3, r8
 8007dfe:	0032      	movs	r2, r6
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	9403      	str	r4, [sp, #12]
 8007e04:	9402      	str	r4, [sp, #8]
 8007e06:	3301      	adds	r3, #1
 8007e08:	493c      	ldr	r1, [pc, #240]	; (8007efc <MX_FREERTOS_Init+0x1e0>)
 8007e0a:	0038      	movs	r0, r7
 8007e0c:	f006 fbae 	bl	800e56c <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007e10:	4643      	mov	r3, r8
 8007e12:	3524      	adds	r5, #36	; 0x24
 8007e14:	0032      	movs	r2, r6
 8007e16:	9501      	str	r5, [sp, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	9403      	str	r4, [sp, #12]
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	9402      	str	r4, [sp, #8]
 8007e20:	4937      	ldr	r1, [pc, #220]	; (8007f00 <MX_FREERTOS_Init+0x1e4>)
 8007e22:	0038      	movs	r0, r7
 8007e24:	f006 fba2 	bl	800e56c <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e28:	2101      	movs	r1, #1
 8007e2a:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 8007e2c:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e2e:	f005 fcc1 	bl	800d7b4 <osSemaphoreCreate>
 8007e32:	4e34      	ldr	r6, [pc, #208]	; (8007f04 <MX_FREERTOS_Init+0x1e8>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e34:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e36:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e38:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8007e3a:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e3c:	f005 fcba 	bl	800d7b4 <osSemaphoreCreate>
 8007e40:	4d31      	ldr	r5, [pc, #196]	; (8007f08 <MX_FREERTOS_Init+0x1ec>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e42:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e44:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e46:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8007e48:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e4a:	f005 fcb3 	bl	800d7b4 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e4e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e50:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e52:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007e54:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e56:	f005 fcad 	bl	800d7b4 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e5a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e5c:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e5e:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007e60:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e62:	f005 fca7 	bl	800d7b4 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e66:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e68:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e6a:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007e6c:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e6e:	f005 fca1 	bl	800d7b4 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e72:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e74:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e76:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007e78:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e7a:	f005 fc9b 	bl	800d7b4 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e7e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e80:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e82:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007e84:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e86:	f005 fc95 	bl	800d7b4 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e8a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e8c:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e8e:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007e90:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e92:	f005 fc8f 	bl	800d7b4 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e96:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e98:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e9a:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007e9c:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e9e:	f005 fc89 	bl	800d7b4 <osSemaphoreCreate>
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007ea2:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ea4:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007ea6:	a80e      	add	r0, sp, #56	; 0x38
	osSemaphoreDef(SemaphoreP11);
 8007ea8:	940e      	str	r4, [sp, #56]	; 0x38
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eaa:	f005 fc83 	bl	800d7b4 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eae:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eb0:	61b0      	str	r0, [r6, #24]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eb2:	a80f      	add	r0, sp, #60	; 0x3c
	osSemaphoreDef(SemaphoreP12);
 8007eb4:	940f      	str	r4, [sp, #60]	; 0x3c
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eb6:	f005 fc7d 	bl	800d7b4 <osSemaphoreCreate>
 8007eba:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007ebc:	b010      	add	sp, #64	; 0x40
 8007ebe:	bc04      	pop	{r2}
 8007ec0:	4690      	mov	r8, r2
 8007ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec4:	20001810 	.word	0x20001810
 8007ec8:	0801a468 	.word	0x0801a468
 8007ecc:	0800830d 	.word	0x0800830d
 8007ed0:	0801a474 	.word	0x0801a474
 8007ed4:	08009c0d 	.word	0x08009c0d
 8007ed8:	0801a480 	.word	0x0801a480
 8007edc:	08012a2d 	.word	0x08012a2d
 8007ee0:	0801a48c 	.word	0x0801a48c
 8007ee4:	080052ed 	.word	0x080052ed
 8007ee8:	08009ffd 	.word	0x08009ffd
 8007eec:	0801a494 	.word	0x0801a494
 8007ef0:	0801a4a0 	.word	0x0801a4a0
 8007ef4:	0801a4ac 	.word	0x0801a4ac
 8007ef8:	0801a4b8 	.word	0x0801a4b8
 8007efc:	0801a4c4 	.word	0x0801a4c4
 8007f00:	0801a4d0 	.word	0x0801a4d0
 8007f04:	2000714c 	.word	0x2000714c
 8007f08:	2000712c 	.word	0x2000712c

08007f0c <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0e:	46de      	mov	lr, fp
 8007f10:	4657      	mov	r7, sl
 8007f12:	464e      	mov	r6, r9
 8007f14:	4645      	mov	r5, r8
 8007f16:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007f18:	4bd4      	ldr	r3, [pc, #848]	; (800826c <ExecuteMonitor+0x360>)
{
 8007f1a:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 8007f1c:	469b      	mov	fp, r3
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d006      	beq.n	8007f32 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, MSG_RX_BUF_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007f24:	b005      	add	sp, #20
 8007f26:	bc3c      	pop	{r2, r3, r4, r5}
 8007f28:	4690      	mov	r8, r2
 8007f2a:	4699      	mov	r9, r3
 8007f2c:	46a2      	mov	sl, r4
 8007f2e:	46ab      	mov	fp, r5
 8007f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	465a      	mov	r2, fp
 8007f36:	6013      	str	r3, [r2, #0]
	flag=0;
 8007f38:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 8007f3a:	3320      	adds	r3, #32
 8007f3c:	7153      	strb	r3, [r2, #5]
 8007f3e:	4bcc      	ldr	r3, [pc, #816]	; (8008270 <ExecuteMonitor+0x364>)
 8007f40:	4ecc      	ldr	r6, [pc, #816]	; (8008274 <ExecuteMonitor+0x368>)
 8007f42:	4699      	mov	r9, r3
 8007f44:	4bcc      	ldr	r3, [pc, #816]	; (8008278 <ExecuteMonitor+0x36c>)
 8007f46:	4dcd      	ldr	r5, [pc, #820]	; (800827c <ExecuteMonitor+0x370>)
 8007f48:	469a      	mov	sl, r3
 8007f4a:	4ccd      	ldr	r4, [pc, #820]	; (8008280 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4bcd      	ldr	r3, [pc, #820]	; (8008284 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 8007f50:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 8007f52:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f54:	2320      	movs	r3, #32
 8007f56:	4698      	mov	r8, r3
 8007f58:	e004      	b.n	8007f64 <ExecuteMonitor+0x58>
 8007f5a:	2a01      	cmp	r2, #1
 8007f5c:	d04c      	beq.n	8007ff8 <ExecuteMonitor+0xec>
 8007f5e:	2a02      	cmp	r2, #2
 8007f60:	d100      	bne.n	8007f64 <ExecuteMonitor+0x58>
 8007f62:	e0a8      	b.n	80080b6 <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 8007f64:	464b      	mov	r3, r9
		            	    Delay_us(100);
 8007f66:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007f68:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 8007f6a:	f005 f8d9 	bl	800d120 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007f6e:	465b      	mov	r3, fp
 8007f70:	464a      	mov	r2, r9
 8007f72:	795b      	ldrb	r3, [r3, #5]
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d00b      	beq.n	8007f92 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007f7a:	4ac2      	ldr	r2, [pc, #776]	; (8008284 <ExecuteMonitor+0x378>)
 8007f7c:	48c1      	ldr	r0, [pc, #772]	; (8008284 <ExecuteMonitor+0x378>)
 8007f7e:	7812      	ldrb	r2, [r2, #0]
 8007f80:	1c51      	adds	r1, r2, #1
 8007f82:	7001      	strb	r1, [r0, #0]
 8007f84:	2128      	movs	r1, #40	; 0x28
 8007f86:	4452      	add	r2, sl
 8007f88:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 8007f8a:	464a      	mov	r2, r9
 8007f8c:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007f8e:	465a      	mov	r2, fp
 8007f90:	7157      	strb	r7, [r2, #5]
 8007f92:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f94:	4641      	mov	r1, r8
 8007f96:	7912      	ldrb	r2, [r2, #4]
 8007f98:	438b      	bics	r3, r1
 8007f9a:	d1de      	bne.n	8007f5a <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	d129      	bne.n	8007ff4 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007fa0:	4bb8      	ldr	r3, [pc, #736]	; (8008284 <ExecuteMonitor+0x378>)
 8007fa2:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007fa4:	4653      	mov	r3, sl
 8007fa6:	3228      	adds	r2, #40	; 0x28
 8007fa8:	5c9b      	ldrb	r3, [r3, r2]
 8007faa:	2b5b      	cmp	r3, #91	; 0x5b
 8007fac:	d100      	bne.n	8007fb0 <ExecuteMonitor+0xa4>
 8007fae:	e0eb      	b.n	8008188 <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007fb0:	2b23      	cmp	r3, #35	; 0x23
 8007fb2:	d100      	bne.n	8007fb6 <ExecuteMonitor+0xaa>
 8007fb4:	e141      	b.n	800823a <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007fb6:	2b3d      	cmp	r3, #61	; 0x3d
 8007fb8:	d100      	bne.n	8007fbc <ExecuteMonitor+0xb0>
 8007fba:	e175      	b.n	80082a8 <ExecuteMonitor+0x39c>
 8007fbc:	233c      	movs	r3, #60	; 0x3c
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fc2:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007fc4:	4bb0      	ldr	r3, [pc, #704]	; (8008288 <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fc6:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007fc8:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fca:	3050      	adds	r0, #80	; 0x50
 8007fcc:	1bcf      	subs	r7, r1, r7
 8007fce:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007fd0:	4657      	mov	r7, sl
 8007fd2:	373c      	adds	r7, #60	; 0x3c
 8007fd4:	0039      	movs	r1, r7
 8007fd6:	220f      	movs	r2, #15
 8007fd8:	f00a fff5 	bl	8012fc6 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007fdc:	4650      	mov	r0, sl
 8007fde:	2214      	movs	r2, #20
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	3028      	adds	r0, #40	; 0x28
 8007fe4:	f00a fff8 	bl	8012fd8 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007fe8:	2214      	movs	r2, #20
 8007fea:	2100      	movs	r1, #0
 8007fec:	0038      	movs	r0, r7
 8007fee:	f00a fff3 	bl	8012fd8 <memset>
 8007ff2:	e7ab      	b.n	8007f4c <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007ff4:	2a01      	cmp	r2, #1
 8007ff6:	d15b      	bne.n	80080b0 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007ff8:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007ffa:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007ffc:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 8007ffe:	4ba3      	ldr	r3, [pc, #652]	; (800828c <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8008000:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8008002:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8008004:	4ba2      	ldr	r3, [pc, #648]	; (8008290 <ExecuteMonitor+0x384>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d02e      	beq.n	800806a <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800800c:	2250      	movs	r2, #80	; 0x50
		           while(counter != numCommandParameters)
 800800e:	2100      	movs	r1, #0
 8008010:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008012:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 8008014:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008016:	0010      	movs	r0, r2
 8008018:	2720      	movs	r7, #32
 800801a:	001a      	movs	r2, r3
 800801c:	0003      	movs	r3, r0
 800801e:	e002      	b.n	8008026 <ExecuteMonitor+0x11a>
 8008020:	4b9a      	ldr	r3, [pc, #616]	; (800828c <ExecuteMonitor+0x380>)
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008026:	1c58      	adds	r0, r3, #1
 8008028:	7028      	strb	r0, [r5, #0]
 800802a:	1c48      	adds	r0, r1, #1
 800802c:	7030      	strb	r0, [r6, #0]
 800802e:	0110      	lsls	r0, r2, #4
 8008030:	1a82      	subs	r2, r0, r2
 8008032:	4452      	add	r2, sl
 8008034:	18d2      	adds	r2, r2, r3
 8008036:	4643      	mov	r3, r8
 8008038:	5cd3      	ldrb	r3, [r2, r3]
 800803a:	2248      	movs	r2, #72	; 0x48
 800803c:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 800803e:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008040:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 8008042:	f007 fb0f 	bl	800f664 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008046:	7831      	ldrb	r1, [r6, #0]
 8008048:	1863      	adds	r3, r4, r1
 800804a:	3347      	adds	r3, #71	; 0x47
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	43bb      	bics	r3, r7
 8008050:	d1e6      	bne.n	8008020 <ExecuteMonitor+0x114>
		                   counter++;
 8008052:	4b8e      	ldr	r3, [pc, #568]	; (800828c <ExecuteMonitor+0x380>)
 8008054:	4a8d      	ldr	r2, [pc, #564]	; (800828c <ExecuteMonitor+0x380>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	3301      	adds	r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 800805e:	2201      	movs	r2, #1
 8008060:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 8008062:	4a8b      	ldr	r2, [pc, #556]	; (8008290 <ExecuteMonitor+0x384>)
 8008064:	7812      	ldrb	r2, [r2, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d1d4      	bne.n	8008014 <ExecuteMonitor+0x108>
		          		   flag=0;
 800806a:	2300      	movs	r3, #0
 800806c:	465a      	mov	r2, fp
 800806e:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8008070:	4a86      	ldr	r2, [pc, #536]	; (800828c <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008072:	2748      	movs	r7, #72	; 0x48
		          		   counter=0;
 8008074:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<MSG_RX_BUF_SIZE;Monitor_index++)
 8008076:	4a87      	ldr	r2, [pc, #540]	; (8008294 <ExecuteMonitor+0x388>)
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800807c:	4a86      	ldr	r2, [pc, #536]	; (8008298 <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 800807e:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008080:	18d2      	adds	r2, r2, r3
 8008082:	18e3      	adds	r3, r4, r3
 8008084:	5ddb      	ldrb	r3, [r3, r7]
 8008086:	3281      	adds	r2, #129	; 0x81
 8008088:	32ff      	adds	r2, #255	; 0xff
 800808a:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 800808c:	f007 faea 	bl	800f664 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<MSG_RX_BUF_SIZE;Monitor_index++)
 8008090:	4b80      	ldr	r3, [pc, #512]	; (8008294 <ExecuteMonitor+0x388>)
 8008092:	4a80      	ldr	r2, [pc, #512]	; (8008294 <ExecuteMonitor+0x388>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	7013      	strb	r3, [r2, #0]
 800809c:	2bbf      	cmp	r3, #191	; 0xbf
 800809e:	d9ed      	bls.n	800807c <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, MSG_RX_BUF_SIZE);
 80080a0:	0020      	movs	r0, r4
 80080a2:	22c0      	movs	r2, #192	; 0xc0
 80080a4:	3048      	adds	r0, #72	; 0x48
 80080a6:	2100      	movs	r1, #0
 80080a8:	f00a ff96 	bl	8012fd8 <memset>
 80080ac:	465b      	mov	r3, fp
 80080ae:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 80080b0:	2a02      	cmp	r2, #2
 80080b2:	d000      	beq.n	80080b6 <ExecuteMonitor+0x1aa>
 80080b4:	e74a      	b.n	8007f4c <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 80080b6:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 80080b8:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 80080ba:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 80080bc:	4b73      	ldr	r3, [pc, #460]	; (800828c <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 80080be:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 80080c0:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 80080c2:	4b73      	ldr	r3, [pc, #460]	; (8008290 <ExecuteMonitor+0x384>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d033      	beq.n	8008132 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080ca:	2250      	movs	r2, #80	; 0x50
   		           while(counter != numCommandParameters)
 80080cc:	2100      	movs	r1, #0
 80080ce:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080d0:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 80080d2:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80080d4:	0010      	movs	r0, r2
 80080d6:	2720      	movs	r7, #32
 80080d8:	001a      	movs	r2, r3
 80080da:	0003      	movs	r3, r0
 80080dc:	e001      	b.n	80080e2 <ExecuteMonitor+0x1d6>
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080e2:	1c58      	adds	r0, r3, #1
 80080e4:	7028      	strb	r0, [r5, #0]
 80080e6:	1c48      	adds	r0, r1, #1
 80080e8:	7030      	strb	r0, [r6, #0]
 80080ea:	0110      	lsls	r0, r2, #4
 80080ec:	1a82      	subs	r2, r0, r2
 80080ee:	4452      	add	r2, sl
 80080f0:	18d2      	adds	r2, r2, r3
 80080f2:	4643      	mov	r3, r8
 80080f4:	5cd3      	ldrb	r3, [r2, r3]
 80080f6:	2248      	movs	r2, #72	; 0x48
 80080f8:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 80080fa:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080fc:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 80080fe:	f007 fab1 	bl	800f664 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008102:	7831      	ldrb	r1, [r6, #0]
 8008104:	1863      	adds	r3, r4, r1
 8008106:	3347      	adds	r3, #71	; 0x47
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	4b60      	ldr	r3, [pc, #384]	; (800828c <ExecuteMonitor+0x380>)
 800810c:	43ba      	bics	r2, r7
 800810e:	d1e6      	bne.n	80080de <ExecuteMonitor+0x1d2>
   		             counter++;
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	485e      	ldr	r0, [pc, #376]	; (800828c <ExecuteMonitor+0x380>)
 8008114:	3301      	adds	r3, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 800811a:	2001      	movs	r0, #1
 800811c:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 800811e:	485c      	ldr	r0, [pc, #368]	; (8008290 <ExecuteMonitor+0x384>)
 8008120:	7800      	ldrb	r0, [r0, #0]
 8008122:	4298      	cmp	r0, r3
 8008124:	d1d5      	bne.n	80080d2 <ExecuteMonitor+0x1c6>
 8008126:	465b      	mov	r3, fp
		            counter=0;
 8008128:	4958      	ldr	r1, [pc, #352]	; (800828c <ExecuteMonitor+0x380>)
 800812a:	791b      	ldrb	r3, [r3, #4]
 800812c:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01e      	beq.n	8008170 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008132:	2748      	movs	r7, #72	; 0x48
  	          		 for( Monitor_index=0;Monitor_index<MSG_RX_BUF_SIZE;Monitor_index++)
 8008134:	2200      	movs	r2, #0
 8008136:	4b57      	ldr	r3, [pc, #348]	; (8008294 <ExecuteMonitor+0x388>)
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800813c:	4a56      	ldr	r2, [pc, #344]	; (8008298 <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 800813e:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008140:	18d2      	adds	r2, r2, r3
 8008142:	18e3      	adds	r3, r4, r3
 8008144:	5ddb      	ldrb	r3, [r3, r7]
 8008146:	3281      	adds	r2, #129	; 0x81
 8008148:	32ff      	adds	r2, #255	; 0xff
 800814a:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 800814c:	f004 ffe8 	bl	800d120 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<MSG_RX_BUF_SIZE;Monitor_index++)
 8008150:	4b50      	ldr	r3, [pc, #320]	; (8008294 <ExecuteMonitor+0x388>)
 8008152:	4a50      	ldr	r2, [pc, #320]	; (8008294 <ExecuteMonitor+0x388>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	b2db      	uxtb	r3, r3
 800815a:	7013      	strb	r3, [r2, #0]
 800815c:	2bbf      	cmp	r3, #191	; 0xbf
 800815e:	d9ed      	bls.n	800813c <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 8008160:	465b      	mov	r3, fp
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	f007 fa7e 	bl	800f664 <HAL_Delay>
                  while(flag != NonActive)
 8008168:	465b      	mov	r3, fp
 800816a:	791b      	ldrb	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e1      	bne.n	8008134 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, MSG_RX_BUF_SIZE);
 8008170:	0020      	movs	r0, r4
 8008172:	22c0      	movs	r2, #192	; 0xc0
 8008174:	2100      	movs	r1, #0
 8008176:	3048      	adds	r0, #72	; 0x48
 8008178:	f00a ff2e 	bl	8012fd8 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800817c:	22c0      	movs	r2, #192	; 0xc0
 800817e:	2100      	movs	r1, #0
 8008180:	4846      	ldr	r0, [pc, #280]	; (800829c <ExecuteMonitor+0x390>)
 8008182:	f00a ff29 	bl	8012fd8 <memset>
 8008186:	e6e1      	b.n	8007f4c <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 8008188:	4a3e      	ldr	r2, [pc, #248]	; (8008284 <ExecuteMonitor+0x378>)
 800818a:	3b5a      	subs	r3, #90	; 0x5a
 800818c:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 800818e:	4b44      	ldr	r3, [pc, #272]	; (80082a0 <ExecuteMonitor+0x394>)
 8008190:	210a      	movs	r1, #10
 8008192:	781f      	ldrb	r7, [r3, #0]
 8008194:	4653      	mov	r3, sl
 8008196:	9701      	str	r7, [sp, #4]
 8008198:	3328      	adds	r3, #40	; 0x28
 800819a:	7858      	ldrb	r0, [r3, #1]
 800819c:	f7f8 f85e 	bl	800025c <__aeabi_uidivmod>
 80081a0:	2303      	movs	r3, #3
 80081a2:	b2c9      	uxtb	r1, r1
 80081a4:	4698      	mov	r8, r3
 80081a6:	42b9      	cmp	r1, r7
 80081a8:	d101      	bne.n	80081ae <ExecuteMonitor+0x2a2>
 80081aa:	e0a1      	b.n	80082f0 <ExecuteMonitor+0x3e4>
 80081ac:	46b8      	mov	r8, r7
 80081ae:	4643      	mov	r3, r8
 80081b0:	1c9f      	adds	r7, r3, #2
 80081b2:	4653      	mov	r3, sl
 80081b4:	2228      	movs	r2, #40	; 0x28
 80081b6:	4443      	add	r3, r8
 80081b8:	5c98      	ldrb	r0, [r3, r2]
 80081ba:	210a      	movs	r1, #10
 80081bc:	f7f8 f84e 	bl	800025c <__aeabi_uidivmod>
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	b2c9      	uxtb	r1, r1
 80081c4:	b2ff      	uxtb	r7, r7
 80081c6:	4299      	cmp	r1, r3
 80081c8:	d1f0      	bne.n	80081ac <ExecuteMonitor+0x2a0>
 80081ca:	4643      	mov	r3, r8
 80081cc:	46b8      	mov	r8, r7
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 80081d6:	4a2b      	ldr	r2, [pc, #172]	; (8008284 <ExecuteMonitor+0x378>)
 80081d8:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081da:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 80081dc:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081de:	2228      	movs	r2, #40	; 0x28
 80081e0:	5c9b      	ldrb	r3, [r3, r2]
 80081e2:	210a      	movs	r1, #10
 80081e4:	0018      	movs	r0, r3
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	f7f8 f838 	bl	800025c <__aeabi_uidivmod>
 80081ec:	233c      	movs	r3, #60	; 0x3c
 80081ee:	4652      	mov	r2, sl
 80081f0:	b2cf      	uxtb	r7, r1
 80081f2:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	2b5d      	cmp	r3, #93	; 0x5d
 80081f8:	d00d      	beq.n	8008216 <ExecuteMonitor+0x30a>
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	3301      	adds	r3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	e000      	b.n	8008204 <ExecuteMonitor+0x2f8>
 8008202:	0013      	movs	r3, r2
 8008204:	2128      	movs	r1, #40	; 0x28
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	4453      	add	r3, sl
 800820a:	5c5b      	ldrb	r3, [r3, r1]
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	2b5d      	cmp	r3, #93	; 0x5d
 8008210:	d1f7      	bne.n	8008202 <ExecuteMonitor+0x2f6>
 8008212:	4690      	mov	r8, r2
 8008214:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 8008216:	4642      	mov	r2, r8
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800821a:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 800821c:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800821e:	2301      	movs	r3, #1
 8008220:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008222:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8008224:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008226:	9b02      	ldr	r3, [sp, #8]
 8008228:	2214      	movs	r2, #20
 800822a:	469c      	mov	ip, r3
 800822c:	3128      	adds	r1, #40	; 0x28
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	4461      	add	r1, ip
 8008232:	303d      	adds	r0, #61	; 0x3d
 8008234:	f00a fec7 	bl	8012fc6 <memcpy>
 8008238:	e6c3      	b.n	8007fc2 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800823a:	4653      	mov	r3, sl
 800823c:	3328      	adds	r3, #40	; 0x28
 800823e:	7858      	ldrb	r0, [r3, #1]
 8008240:	210a      	movs	r1, #10
 8008242:	f7f8 f80b 	bl	800025c <__aeabi_uidivmod>
 8008246:	4652      	mov	r2, sl
 8008248:	233c      	movs	r3, #60	; 0x3c
 800824a:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800824c:	4650      	mov	r0, sl
 800824e:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8008250:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 8008252:	4a0c      	ldr	r2, [pc, #48]	; (8008284 <ExecuteMonitor+0x378>)
 8008254:	3b3a      	subs	r3, #58	; 0x3a
 8008256:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 8008258:	4a12      	ldr	r2, [pc, #72]	; (80082a4 <ExecuteMonitor+0x398>)
 800825a:	3b01      	subs	r3, #1
 800825c:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800825e:	312a      	adds	r1, #42	; 0x2a
 8008260:	2212      	movs	r2, #18
 8008262:	303d      	adds	r0, #61	; 0x3d
 8008264:	f00a feaf 	bl	8012fc6 <memcpy>
 8008268:	e6ab      	b.n	8007fc2 <ExecuteMonitor+0xb6>
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	20000000 	.word	0x20000000
 8008270:	20007128 	.word	0x20007128
 8008274:	2000716c 	.word	0x2000716c
 8008278:	20001810 	.word	0x20001810
 800827c:	20007169 	.word	0x20007169
 8008280:	20001890 	.word	0x20001890
 8008284:	20007149 	.word	0x20007149
 8008288:	2000716b 	.word	0x2000716b
 800828c:	2000714a 	.word	0x2000714a
 8008290:	20007168 	.word	0x20007168
 8008294:	20007129 	.word	0x20007129
 8008298:	2000138c 	.word	0x2000138c
 800829c:	2000150c 	.word	0x2000150c
 80082a0:	2000716a 	.word	0x2000716a
 80082a4:	20007148 	.word	0x20007148
                	    digitTheCommand=nonProcessingParameter[1]%10;
 80082a8:	4657      	mov	r7, sl
 80082aa:	3728      	adds	r7, #40	; 0x28
 80082ac:	7878      	ldrb	r0, [r7, #1]
 80082ae:	210a      	movs	r1, #10
 80082b0:	f7f7 ffd4 	bl	800025c <__aeabi_uidivmod>
 80082b4:	4b11      	ldr	r3, [pc, #68]	; (80082fc <ExecuteMonitor+0x3f0>)
 80082b6:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 80082b8:	78b8      	ldrb	r0, [r7, #2]
 80082ba:	210a      	movs	r1, #10
 80082bc:	f7f7 ffce 	bl	800025c <__aeabi_uidivmod>
 80082c0:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <ExecuteMonitor+0x3f4>)
 80082c2:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80082c4:	78f8      	ldrb	r0, [r7, #3]
 80082c6:	210a      	movs	r1, #10
 80082c8:	f7f7 ffc8 	bl	800025c <__aeabi_uidivmod>
 80082cc:	4652      	mov	r2, sl
 80082ce:	233c      	movs	r3, #60	; 0x3c
 80082d0:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082d2:	4650      	mov	r0, sl
 80082d4:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80082d6:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 80082d8:	4a0a      	ldr	r2, [pc, #40]	; (8008304 <ExecuteMonitor+0x3f8>)
 80082da:	3b38      	subs	r3, #56	; 0x38
 80082dc:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 80082de:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <ExecuteMonitor+0x3fc>)
 80082e0:	3b03      	subs	r3, #3
 80082e2:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082e4:	312c      	adds	r1, #44	; 0x2c
 80082e6:	2210      	movs	r2, #16
 80082e8:	303d      	adds	r0, #61	; 0x3d
 80082ea:	f00a fe6c 	bl	8012fc6 <memcpy>
 80082ee:	e668      	b.n	8007fc2 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80082f0:	2202      	movs	r2, #2
 80082f2:	9302      	str	r3, [sp, #8]
 80082f4:	9201      	str	r2, [sp, #4]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	e76d      	b.n	80081d6 <ExecuteMonitor+0x2ca>
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	2000716a 	.word	0x2000716a
 8008300:	20007168 	.word	0x20007168
 8008304:	20007149 	.word	0x20007149
 8008308:	20007148 	.word	0x20007148

0800830c <StartDefaultTask>:
void StartDefaultTask(void *argument){
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	4c1c      	ldr	r4, [pc, #112]	; (8008380 <StartDefaultTask+0x74>)
 8008310:	4d1c      	ldr	r5, [pc, #112]	; (8008384 <StartDefaultTask+0x78>)
 8008312:	4e1d      	ldr	r6, [pc, #116]	; (8008388 <StartDefaultTask+0x7c>)
 8008314:	e00f      	b.n	8008336 <StartDefaultTask+0x2a>
		switch(indMode){
 8008316:	2b03      	cmp	r3, #3
 8008318:	d022      	beq.n	8008360 <StartDefaultTask+0x54>
 800831a:	2b01      	cmp	r3, #1
 800831c:	d028      	beq.n	8008370 <StartDefaultTask+0x64>
		CheckAttachedButtons();
 800831e:	f000 fd8f 	bl	8008e40 <CheckAttachedButtons>
		ExecuteSnippet();
 8008322:	f7fd f977 	bl	8005614 <ExecuteSnippet>
		ExecuteMonitor();
 8008326:	f7ff fdf1 	bl	8007f0c <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800832a:	782b      	ldrb	r3, [r5, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d100      	bne.n	8008332 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8008330:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 8008332:	f007 f83f 	bl	800f3b4 <vPortYield>
		switch(indMode){
 8008336:	7823      	ldrb	r3, [r4, #0]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d1ec      	bne.n	8008316 <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 800833c:	2180      	movs	r1, #128	; 0x80
 800833e:	4813      	ldr	r0, [pc, #76]	; (800838c <StartDefaultTask+0x80>)
 8008340:	2201      	movs	r2, #1
 8008342:	01c9      	lsls	r1, r1, #7
 8008344:	f008 fe28 	bl	8010f98 <HAL_GPIO_WritePin>
 8008348:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 800834a:	f005 fa07 	bl	800d75c <osDelay>
 800834e:	2180      	movs	r1, #128	; 0x80
 8008350:	2200      	movs	r2, #0
 8008352:	01c9      	lsls	r1, r1, #7
 8008354:	480d      	ldr	r0, [pc, #52]	; (800838c <StartDefaultTask+0x80>)
 8008356:	f008 fe1f 	bl	8010f98 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800835a:	2300      	movs	r3, #0
 800835c:	7023      	strb	r3, [r4, #0]
				break;
 800835e:	e7de      	b.n	800831e <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8008360:	2180      	movs	r1, #128	; 0x80
 8008362:	480a      	ldr	r0, [pc, #40]	; (800838c <StartDefaultTask+0x80>)
 8008364:	2201      	movs	r2, #1
 8008366:	01c9      	lsls	r1, r1, #7
 8008368:	f008 fe16 	bl	8010f98 <HAL_GPIO_WritePin>
 800836c:	201e      	movs	r0, #30
 800836e:	e7ec      	b.n	800834a <StartDefaultTask+0x3e>
				RTOS_IND_blink(200);
 8008370:	2180      	movs	r1, #128	; 0x80
 8008372:	4806      	ldr	r0, [pc, #24]	; (800838c <StartDefaultTask+0x80>)
 8008374:	2201      	movs	r2, #1
 8008376:	01c9      	lsls	r1, r1, #7
 8008378:	f008 fe0e 	bl	8010f98 <HAL_GPIO_WritePin>
 800837c:	20c8      	movs	r0, #200	; 0xc8
 800837e:	e7e4      	b.n	800834a <StartDefaultTask+0x3e>
 8008380:	2000117e 	.word	0x2000117e
 8008384:	200019cc 	.word	0x200019cc
 8008388:	200019c0 	.word	0x200019c0
 800838c:	48000400 	.word	0x48000400

08008390 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8008392:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	4904      	ldr	r1, [pc, #16]	; (80083a8 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008398:	f7f7 feda 	bl	8000150 <__udivsi3>
 800839c:	4b03      	ldr	r3, [pc, #12]	; (80083ac <vMainConfigureTimerForRunTimeStats+0x1c>)
 800839e:	6098      	str	r0, [r3, #8]
}
 80083a0:	bd10      	pop	{r4, pc}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	200000b0 	.word	0x200000b0
 80083a8:	00002710 	.word	0x00002710
 80083ac:	20001910 	.word	0x20001910

080083b0 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083b0:	21fa      	movs	r1, #250	; 0xfa
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 80083b4:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	0089      	lsls	r1, r1, #2
 80083ba:	f7f7 fec9 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083be:	4c0d      	ldr	r4, [pc, #52]	; (80083f4 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083c0:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083c2:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80083c4:	f006 f97c 	bl	800e6c0 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80083c8:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <ulMainGetRunTimeCounterValue+0x48>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	015b      	lsls	r3, r3, #5
 80083ce:	d50c      	bpl.n	80083ea <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083d0:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 80083d2:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083d4:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083d6:	4b09      	ldr	r3, [pc, #36]	; (80083fc <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 80083d8:	0084      	lsls	r4, r0, #2
 80083da:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083dc:	6899      	ldr	r1, [r3, #8]
 80083de:	0028      	movs	r0, r5
 80083e0:	f7f7 feb6 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 80083e4:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083e6:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083ea:	1bad      	subs	r5, r5, r6
 80083ec:	e7f3      	b.n	80083d6 <ulMainGetRunTimeCounterValue+0x26>
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	200000b0 	.word	0x200000b0
 80083f4:	e000e018 	.word	0xe000e018
 80083f8:	e000ed04 	.word	0xe000ed04
 80083fc:	20001910 	.word	0x20001910

08008400 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 8008400:	4770      	bx	lr
 8008402:	46c0      	nop			; (mov r8, r8)

08008404 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008404:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008406:	4d37      	ldr	r5, [pc, #220]	; (80084e4 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008408:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800840a:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800840c:	0006      	movs	r6, r0
 800840e:	000c      	movs	r4, r1
	if (BOS_initialized) {
 8008410:	2b00      	cmp	r3, #0
 8008412:	d152      	bne.n	80084ba <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 8008414:	2204      	movs	r2, #4
 8008416:	4b34      	ldr	r3, [pc, #208]	; (80084e8 <AddPortButton+0xe4>)
 8008418:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800841a:	250e      	movs	r5, #14
 800841c:	af04      	add	r7, sp, #16
 800841e:	446d      	add	r5, sp
 8008420:	002a      	movs	r2, r5
 8008422:	ab06      	add	r3, sp, #24
 8008424:	a905      	add	r1, sp, #20
 8008426:	9700      	str	r7, [sp, #0]
 8008428:	0020      	movs	r0, r4
 800842a:	f004 fab7 	bl	800c99c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800842e:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008430:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 8008432:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008434:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8008436:	a907      	add	r1, sp, #28
 8008438:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800843a:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843c:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800843e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8008440:	f008 fc0a 	bl	8010c58 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008444:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 8008446:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 8008448:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800844a:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800844c:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800844e:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008450:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 8008452:	f008 fc01 	bl	8010c58 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 8008456:	00e2      	lsls	r2, r4, #3
 8008458:	4b24      	ldr	r3, [pc, #144]	; (80084ec <AddPortButton+0xe8>)
 800845a:	1912      	adds	r2, r2, r4
 800845c:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800845e:	0025      	movs	r5, r4
	button[port].type = buttonType;
 8008460:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008462:	2312      	movs	r3, #18
 8008464:	353a      	adds	r5, #58	; 0x3a
 8008466:	00ad      	lsls	r5, r5, #2
 8008468:	446b      	add	r3, sp
 800846a:	0019      	movs	r1, r3
 800846c:	0028      	movs	r0, r5
 800846e:	f7ff f9e7 	bl	8007840 <EE_ReadVariable>
	if (!res)											// This variable exists
 8008472:	2800      	cmp	r0, #0
 8008474:	d109      	bne.n	800848a <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 8008476:	466b      	mov	r3, sp
 8008478:	8a5b      	ldrh	r3, [r3, #18]
 800847a:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800847c:	091a      	lsrs	r2, r3, #4
 800847e:	42a2      	cmp	r2, r4
 8008480:	d103      	bne.n	800848a <AddPortButton+0x86>
 8008482:	220f      	movs	r2, #15
 8008484:	4013      	ands	r3, r2
 8008486:	42b3      	cmp	r3, r6
 8008488:	d014      	beq.n	80084b4 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800848a:	466b      	mov	r3, sp
 800848c:	0324      	lsls	r4, r4, #12
 800848e:	0231      	lsls	r1, r6, #8
 8008490:	4321      	orrs	r1, r4
 8008492:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008494:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 8008496:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008498:	f7ff fa02 	bl	80078a0 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800849c:	2100      	movs	r1, #0
 800849e:	1c68      	adds	r0, r5, #1
 80084a0:	f7ff f9fe 	bl	80078a0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 80084a4:	2100      	movs	r1, #0
 80084a6:	1ca8      	adds	r0, r5, #2
 80084a8:	f7ff f9fa 	bl	80078a0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 80084ac:	1ce8      	adds	r0, r5, #3
 80084ae:	2100      	movs	r1, #0
 80084b0:	f7ff f9f6 	bl	80078a0 <EE_WriteVariable>
	}

	return result;
}
 80084b4:	2000      	movs	r0, #0
 80084b6:	b00d      	add	sp, #52	; 0x34
 80084b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80084ba:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <AddPortButton+0xec>)
 80084bc:	008f      	lsls	r7, r1, #2
 80084be:	58f8      	ldr	r0, [r7, r3]
 80084c0:	f005 f9b8 	bl	800d834 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80084c4:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <AddPortButton+0xf0>)
 80084c6:	58f8      	ldr	r0, [r7, r3]
 80084c8:	f005 f9b4 	bl	800d834 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 80084cc:	2104      	movs	r1, #4
 80084ce:	4a06      	ldr	r2, [pc, #24]	; (80084e8 <AddPortButton+0xe4>)
 80084d0:	782b      	ldrb	r3, [r5, #0]
 80084d2:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0a0      	beq.n	800841a <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 80084d8:	0020      	movs	r0, r4
 80084da:	f005 f87b 	bl	800d5d4 <GetUart>
 80084de:	f009 fd8b 	bl	8011ff8 <HAL_UART_DeInit>
 80084e2:	e79a      	b.n	800841a <AddPortButton+0x16>
 80084e4:	20000c3d 	.word	0x20000c3d
 80084e8:	20000c2c 	.word	0x20000c2c
 80084ec:	2000191c 	.word	0x2000191c
 80084f0:	2000714c 	.word	0x2000714c
 80084f4:	2000712c 	.word	0x2000712c

080084f8 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	483b      	ldr	r0, [pc, #236]	; (80085ec <RemovePortButton+0xf4>)
 8008500:	00e9      	lsls	r1, r5, #3
 8008502:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008504:	002c      	movs	r4, r5
	button[port].type = NONE;
 8008506:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 8008508:	b082      	sub	sp, #8
	button[port].state = NONE;
 800850a:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800850c:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800850e:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 8008510:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 8008512:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 8008514:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 8008516:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 8008518:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800851a:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800851c:	466b      	mov	r3, sp
 800851e:	343a      	adds	r4, #58	; 0x3a
 8008520:	00a4      	lsls	r4, r4, #2
 8008522:	1d99      	adds	r1, r3, #6
 8008524:	0020      	movs	r0, r4
 8008526:	f7ff f98b 	bl	8007840 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800852a:	2800      	cmp	r0, #0
 800852c:	d02b      	beq.n	8008586 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800852e:	0028      	movs	r0, r5
 8008530:	f005 f850 	bl	800d5d4 <GetUart>

	if (huart->Instance == USART1) {
 8008534:	4a2e      	ldr	r2, [pc, #184]	; (80085f0 <RemovePortButton+0xf8>)
 8008536:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 8008538:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800853a:	4293      	cmp	r3, r2
 800853c:	d03b      	beq.n	80085b6 <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800853e:	4a2d      	ldr	r2, [pc, #180]	; (80085f4 <RemovePortButton+0xfc>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d040      	beq.n	80085c6 <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 8008544:	4a2c      	ldr	r2, [pc, #176]	; (80085f8 <RemovePortButton+0x100>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d041      	beq.n	80085ce <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800854a:	4a2c      	ldr	r2, [pc, #176]	; (80085fc <RemovePortButton+0x104>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d044      	beq.n	80085da <RemovePortButton+0xe2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 8008550:	4a2b      	ldr	r2, [pc, #172]	; (8008600 <RemovePortButton+0x108>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d033      	beq.n	80085be <RemovePortButton+0xc6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 8008556:	4a2b      	ldr	r2, [pc, #172]	; (8008604 <RemovePortButton+0x10c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d042      	beq.n	80085e2 <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800855c:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <RemovePortButton+0x110>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d039      	beq.n	80085d6 <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 8008562:	4a2a      	ldr	r2, [pc, #168]	; (800860c <RemovePortButton+0x114>)
 8008564:	4694      	mov	ip, r2
 8008566:	4463      	add	r3, ip
 8008568:	1e5c      	subs	r4, r3, #1
 800856a:	41a3      	sbcs	r3, r4
 800856c:	425c      	negs	r4, r3
 800856e:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008570:	2200      	movs	r2, #0
 8008572:	4b27      	ldr	r3, [pc, #156]	; (8008610 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008574:	4927      	ldr	r1, [pc, #156]	; (8008614 <RemovePortButton+0x11c>)
	portStatus[port] = FREE;
 8008576:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008578:	0030      	movs	r0, r6
 800857a:	3201      	adds	r2, #1
 800857c:	f009 fd8a 	bl	8012094 <HAL_UART_Receive_IT>

	return result;
}
 8008580:	0020      	movs	r0, r4
 8008582:	b002      	add	sp, #8
 8008584:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 8008586:	2100      	movs	r1, #0
 8008588:	0020      	movs	r0, r4
 800858a:	f7ff f989 	bl	80078a0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800858e:	2100      	movs	r1, #0
 8008590:	1c60      	adds	r0, r4, #1
 8008592:	f7ff f985 	bl	80078a0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008596:	2100      	movs	r1, #0
 8008598:	1ca0      	adds	r0, r4, #2
 800859a:	f7ff f981 	bl	80078a0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800859e:	2100      	movs	r1, #0
 80085a0:	1ce0      	adds	r0, r4, #3
 80085a2:	f7ff f97d 	bl	80078a0 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 80085a6:	0028      	movs	r0, r5
 80085a8:	f005 f814 	bl	800d5d4 <GetUart>
	if (huart->Instance == USART1) {
 80085ac:	4a10      	ldr	r2, [pc, #64]	; (80085f0 <RemovePortButton+0xf8>)
 80085ae:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 80085b0:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d1c3      	bne.n	800853e <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 80085b6:	f004 fdf3 	bl	800d1a0 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 80085ba:	2400      	movs	r4, #0
 80085bc:	e7d8      	b.n	8008570 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 80085be:	f004 fe41 	bl	800d244 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 80085c2:	2400      	movs	r4, #0
 80085c4:	e7d4      	b.n	8008570 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 80085c6:	f004 fdf5 	bl	800d1b4 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 80085ca:	2400      	movs	r4, #0
 80085cc:	e7d0      	b.n	8008570 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 80085ce:	f004 fe09 	bl	800d1e4 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 80085d2:	2400      	movs	r4, #0
 80085d4:	e7cc      	b.n	8008570 <RemovePortButton+0x78>
 80085d6:	2400      	movs	r4, #0
 80085d8:	e7ca      	b.n	8008570 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 80085da:	f004 fe1b 	bl	800d214 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 80085de:	2400      	movs	r4, #0
 80085e0:	e7c6      	b.n	8008570 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80085e2:	f004 fe47 	bl	800d274 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 80085e6:	2400      	movs	r4, #0
 80085e8:	e7c2      	b.n	8008570 <RemovePortButton+0x78>
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	2000191c 	.word	0x2000191c
 80085f0:	40013800 	.word	0x40013800
 80085f4:	40004400 	.word	0x40004400
 80085f8:	40004800 	.word	0x40004800
 80085fc:	40004c00 	.word	0x40004c00
 8008600:	40005000 	.word	0x40005000
 8008604:	40011400 	.word	0x40011400
 8008608:	40011800 	.word	0x40011800
 800860c:	bffee400 	.word	0xbffee400
 8008610:	20000c2c 	.word	0x20000c2c
 8008614:	20000c4d 	.word	0x20000c4d

08008618 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 8008618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861a:	464e      	mov	r6, r9
 800861c:	4645      	mov	r5, r8
 800861e:	46de      	mov	lr, fp
 8008620:	4657      	mov	r7, sl
 8008622:	b5e0      	push	{r5, r6, r7, lr}
 8008624:	b087      	sub	sp, #28
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	ab10      	add	r3, sp, #64	; 0x40
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	0005      	movs	r5, r0
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	ab11      	add	r3, sp, #68	; 0x44
 8008632:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 8008634:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab12      	add	r3, sp, #72	; 0x48
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	469a      	mov	sl, r3
 800863e:	ab13      	add	r3, sp, #76	; 0x4c
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	4699      	mov	r9, r3
 8008644:	ab14      	add	r3, sp, #80	; 0x50
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	469b      	mov	fp, r3
 800864a:	ab15      	add	r3, sp, #84	; 0x54
 800864c:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800864e:	4b80      	ldr	r3, [pc, #512]	; (8008850 <SetButtonEvents+0x238>)
 8008650:	4698      	mov	r8, r3
 8008652:	1963      	adds	r3, r4, r5
 8008654:	4443      	add	r3, r8
 8008656:	785e      	ldrb	r6, [r3, #1]
 8008658:	2e00      	cmp	r6, #0
 800865a:	d050      	beq.n	80086fe <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800865c:	9e01      	ldr	r6, [sp, #4]
 800865e:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 8008660:	9e02      	ldr	r6, [sp, #8]
 8008662:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 8008664:	9e03      	ldr	r6, [sp, #12]
 8008666:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008668:	4656      	mov	r6, sl
 800866a:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800866c:	464e      	mov	r6, r9
 800866e:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 8008670:	465e      	mov	r6, fp
 8008672:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 8008674:	2801      	cmp	r0, #1
 8008676:	d04b      	beq.n	8008710 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8008678:	2800      	cmp	r0, #0
 800867a:	d000      	beq.n	800867e <SetButtonEvents+0x66>
 800867c:	e076      	b.n	800876c <SetButtonEvents+0x154>
 800867e:	2900      	cmp	r1, #0
 8008680:	d000      	beq.n	8008684 <SetButtonEvents+0x6c>
 8008682:	e0bf      	b.n	8008804 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 8008684:	2601      	movs	r6, #1
 8008686:	7a19      	ldrb	r1, [r3, #8]
 8008688:	43b1      	bics	r1, r6
 800868a:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800868c:	2a00      	cmp	r2, #0
 800868e:	d142      	bne.n	8008716 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 8008690:	2302      	movs	r3, #2
 8008692:	4399      	bics	r1, r3
 8008694:	1963      	adds	r3, r4, r5
 8008696:	4443      	add	r3, r8
 8008698:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d143      	bne.n	8008728 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80086a0:	2304      	movs	r3, #4
 80086a2:	4399      	bics	r1, r3
 80086a4:	1963      	adds	r3, r4, r5
 80086a6:	4443      	add	r3, r8
 80086a8:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 80086aa:	9b02      	ldr	r3, [sp, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d144      	bne.n	800873a <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80086b0:	2308      	movs	r3, #8
 80086b2:	4399      	bics	r1, r3
 80086b4:	1963      	adds	r3, r4, r5
 80086b6:	4443      	add	r3, r8
 80086b8:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d145      	bne.n	800874c <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80086c0:	2310      	movs	r3, #16
 80086c2:	000a      	movs	r2, r1
 80086c4:	439a      	bics	r2, r3
 80086c6:	1963      	adds	r3, r4, r5
 80086c8:	4443      	add	r3, r8
 80086ca:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 80086cc:	4653      	mov	r3, sl
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d100      	bne.n	80086d4 <SetButtonEvents+0xbc>
 80086d2:	e09c      	b.n	800880e <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086d4:	2120      	movs	r1, #32
 80086d6:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80086d8:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086da:	1963      	adds	r3, r4, r5
 80086dc:	4443      	add	r3, r8
 80086de:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	d100      	bne.n	80086e6 <SetButtonEvents+0xce>
 80086e4:	e09d      	b.n	8008822 <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80086e6:	2240      	movs	r2, #64	; 0x40
 80086e8:	430a      	orrs	r2, r1
 80086ea:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 80086ec:	465b      	mov	r3, fp
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d136      	bne.n	8008760 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80086f2:	217f      	movs	r1, #127	; 0x7f
 80086f4:	1963      	adds	r3, r4, r5
 80086f6:	4443      	add	r3, r8
 80086f8:	4011      	ands	r1, r2
 80086fa:	7219      	strb	r1, [r3, #8]
 80086fc:	e036      	b.n	800876c <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80086fe:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 8008700:	0020      	movs	r0, r4
 8008702:	b007      	add	sp, #28
 8008704:	bc3c      	pop	{r2, r3, r4, r5}
 8008706:	4690      	mov	r8, r2
 8008708:	4699      	mov	r9, r3
 800870a:	46a2      	mov	sl, r4
 800870c:	46ab      	mov	fp, r5
 800870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008710:	7a19      	ldrb	r1, [r3, #8]
 8008712:	2301      	movs	r3, #1
 8008714:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008716:	2202      	movs	r2, #2
 8008718:	1963      	adds	r3, r4, r5
 800871a:	4443      	add	r3, r8
 800871c:	4311      	orrs	r1, r2
 800871e:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008720:	2801      	cmp	r0, #1
 8008722:	d000      	beq.n	8008726 <SetButtonEvents+0x10e>
 8008724:	e08c      	b.n	8008840 <SetButtonEvents+0x228>
 8008726:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008728:	2204      	movs	r2, #4
 800872a:	1963      	adds	r3, r4, r5
 800872c:	4443      	add	r3, r8
 800872e:	4311      	orrs	r1, r2
 8008730:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008732:	2801      	cmp	r0, #1
 8008734:	d000      	beq.n	8008738 <SetButtonEvents+0x120>
 8008736:	e07f      	b.n	8008838 <SetButtonEvents+0x220>
 8008738:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800873a:	2208      	movs	r2, #8
 800873c:	1963      	adds	r3, r4, r5
 800873e:	4443      	add	r3, r8
 8008740:	4311      	orrs	r1, r2
 8008742:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008744:	2801      	cmp	r0, #1
 8008746:	d000      	beq.n	800874a <SetButtonEvents+0x132>
 8008748:	e07e      	b.n	8008848 <SetButtonEvents+0x230>
 800874a:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800874c:	2210      	movs	r2, #16
 800874e:	1963      	adds	r3, r4, r5
 8008750:	4443      	add	r3, r8
 8008752:	4311      	orrs	r1, r2
 8008754:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008756:	2801      	cmp	r0, #1
 8008758:	d16a      	bne.n	8008830 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800875a:	2260      	movs	r2, #96	; 0x60
 800875c:	b2c9      	uxtb	r1, r1
 800875e:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008760:	2180      	movs	r1, #128	; 0x80
 8008762:	1963      	adds	r3, r4, r5
 8008764:	4249      	negs	r1, r1
 8008766:	4443      	add	r3, r8
 8008768:	4311      	orrs	r1, r2
 800876a:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800876c:	002e      	movs	r6, r5
 800876e:	ab04      	add	r3, sp, #16
 8008770:	363a      	adds	r6, #58	; 0x3a
 8008772:	00b6      	lsls	r6, r6, #2
 8008774:	1d9f      	adds	r7, r3, #6
 8008776:	0039      	movs	r1, r7
 8008778:	0030      	movs	r0, r6
 800877a:	f7ff f861 	bl	8007840 <EE_ReadVariable>
	if (!res)											// This variable exists
 800877e:	2800      	cmp	r0, #0
 8008780:	d1bd      	bne.n	80086fe <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 8008782:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 8008784:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 8008786:	4444      	add	r4, r8
 8008788:	7a22      	ldrb	r2, [r4, #8]
 800878a:	b2d9      	uxtb	r1, r3
 800878c:	4291      	cmp	r1, r2
 800878e:	d006      	beq.n	800879e <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008790:	0a19      	lsrs	r1, r3, #8
 8008792:	0209      	lsls	r1, r1, #8
 8008794:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008796:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008798:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800879a:	f7ff f881 	bl	80078a0 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800879e:	1c74      	adds	r4, r6, #1
 80087a0:	0039      	movs	r1, r7
 80087a2:	0020      	movs	r0, r4
 80087a4:	f7ff f84c 	bl	8007840 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 80087a8:	4652      	mov	r2, sl
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	0219      	lsls	r1, r3, #8
 80087ae:	883b      	ldrh	r3, [r7, #0]
 80087b0:	430a      	orrs	r2, r1
		if (temp16
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d003      	beq.n	80087be <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 80087b6:	b291      	uxth	r1, r2
 80087b8:	0020      	movs	r0, r4
 80087ba:	f7ff f871 	bl	80078a0 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 80087be:	1cb4      	adds	r4, r6, #2
 80087c0:	0039      	movs	r1, r7
 80087c2:	0020      	movs	r0, r4
 80087c4:	f7ff f83c 	bl	8007840 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 80087c8:	464a      	mov	r2, r9
 80087ca:	9b02      	ldr	r3, [sp, #8]
 80087cc:	0219      	lsls	r1, r3, #8
 80087ce:	883b      	ldrh	r3, [r7, #0]
 80087d0:	430a      	orrs	r2, r1
		if (temp16
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 80087d6:	b291      	uxth	r1, r2
 80087d8:	0020      	movs	r0, r4
 80087da:	f7ff f861 	bl	80078a0 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 80087de:	3603      	adds	r6, #3
 80087e0:	0039      	movs	r1, r7
 80087e2:	0030      	movs	r0, r6
 80087e4:	f7ff f82c 	bl	8007840 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80087e8:	465a      	mov	r2, fp
 80087ea:	9b03      	ldr	r3, [sp, #12]
	return result;
 80087ec:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80087ee:	0219      	lsls	r1, r3, #8
 80087f0:	883b      	ldrh	r3, [r7, #0]
 80087f2:	430a      	orrs	r2, r1
		if (temp16
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d100      	bne.n	80087fa <SetButtonEvents+0x1e2>
 80087f8:	e782      	b.n	8008700 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 80087fa:	b291      	uxth	r1, r2
 80087fc:	0030      	movs	r0, r6
 80087fe:	f7ff f84f 	bl	80078a0 <EE_WriteVariable>
 8008802:	e77d      	b.n	8008700 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008804:	2601      	movs	r6, #1
 8008806:	7a19      	ldrb	r1, [r3, #8]
 8008808:	4331      	orrs	r1, r6
 800880a:	7219      	strb	r1, [r3, #8]
 800880c:	e73e      	b.n	800868c <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800880e:	2320      	movs	r3, #32
 8008810:	439a      	bics	r2, r3
 8008812:	1963      	adds	r3, r4, r5
 8008814:	4443      	add	r3, r8
 8008816:	0011      	movs	r1, r2
 8008818:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800881a:	464a      	mov	r2, r9
 800881c:	2a00      	cmp	r2, #0
 800881e:	d000      	beq.n	8008822 <SetButtonEvents+0x20a>
 8008820:	e761      	b.n	80086e6 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	000a      	movs	r2, r1
 8008826:	439a      	bics	r2, r3
 8008828:	1963      	adds	r3, r4, r5
 800882a:	4443      	add	r3, r8
 800882c:	721a      	strb	r2, [r3, #8]
 800882e:	e75d      	b.n	80086ec <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008830:	2800      	cmp	r0, #0
 8008832:	d19b      	bne.n	800876c <SetButtonEvents+0x154>
 8008834:	7a1a      	ldrb	r2, [r3, #8]
 8008836:	e749      	b.n	80086cc <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008838:	2800      	cmp	r0, #0
 800883a:	d197      	bne.n	800876c <SetButtonEvents+0x154>
 800883c:	7a19      	ldrb	r1, [r3, #8]
 800883e:	e734      	b.n	80086aa <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008840:	2800      	cmp	r0, #0
 8008842:	d193      	bne.n	800876c <SetButtonEvents+0x154>
 8008844:	7a19      	ldrb	r1, [r3, #8]
 8008846:	e728      	b.n	800869a <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8008848:	2800      	cmp	r0, #0
 800884a:	d18f      	bne.n	800876c <SetButtonEvents+0x154>
 800884c:	7a19      	ldrb	r1, [r3, #8]
 800884e:	e734      	b.n	80086ba <SetButtonEvents+0xa2>
 8008850:	2000191c 	.word	0x2000191c

08008854 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 8008854:	4811      	ldr	r0, [pc, #68]	; (800889c <MX_ADC_Init+0x48>)
 8008856:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 8008858:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800885a:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800885c:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800885e:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008860:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008862:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008864:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008866:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008868:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800886a:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800886c:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800886e:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008870:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008872:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008874:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008876:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008878:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800887a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800887c:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800887e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008880:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008882:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8008884:	f006 ffc8 	bl	800f818 <HAL_ADC_Init>
 8008888:	2800      	cmp	r0, #0
 800888a:	d002      	beq.n	8008892 <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800888c:	2064      	movs	r0, #100	; 0x64
 800888e:	f006 fee9 	bl	800f664 <HAL_Delay>
	ADC_flag = 1;
 8008892:	2378      	movs	r3, #120	; 0x78
 8008894:	2101      	movs	r1, #1
 8008896:	4a03      	ldr	r2, [pc, #12]	; (80088a4 <MX_ADC_Init+0x50>)
 8008898:	54d1      	strb	r1, [r2, r3]
}
 800889a:	bd10      	pop	{r4, pc}
 800889c:	20007170 	.word	0x20007170
 80088a0:	40012400 	.word	0x40012400
 80088a4:	2000191c 	.word	0x2000191c

080088a8 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 80088a8:	b510      	push	{r4, lr}
 80088aa:	0004      	movs	r4, r0
 80088ac:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80088ae:	2214      	movs	r2, #20
 80088b0:	2100      	movs	r1, #0
 80088b2:	a803      	add	r0, sp, #12
 80088b4:	f00a fb90 	bl	8012fd8 <memset>
	if (adcHandle->Instance == ADC1) {
 80088b8:	4b11      	ldr	r3, [pc, #68]	; (8008900 <HAL_ADC_MspInit+0x58>)
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d001      	beq.n	80088c4 <HAL_ADC_MspInit+0x1c>
}
 80088c0:	b008      	add	sp, #32
 80088c2:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088c4:	2080      	movs	r0, #128	; 0x80
 80088c6:	4b0f      	ldr	r3, [pc, #60]	; (8008904 <HAL_ADC_MspInit+0x5c>)
 80088c8:	0080      	lsls	r0, r0, #2
 80088ca:	6999      	ldr	r1, [r3, #24]
 80088cc:	4301      	orrs	r1, r0
 80088ce:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088d0:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088d2:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088d4:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088d6:	4002      	ands	r2, r0
 80088d8:	9201      	str	r2, [sp, #4]
 80088da:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088dc:	695a      	ldr	r2, [r3, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088de:	2090      	movs	r0, #144	; 0x90
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088e0:	430a      	orrs	r2, r1
 80088e2:	615a      	str	r2, [r3, #20]
 80088e4:	695b      	ldr	r3, [r3, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088e6:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088e8:	400b      	ands	r3, r1
 80088ea:	9302      	str	r3, [sp, #8]
 80088ec:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80088ee:	233c      	movs	r3, #60	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088f0:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80088f2:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088f4:	3b39      	subs	r3, #57	; 0x39
 80088f6:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088f8:	f008 f9ae 	bl	8010c58 <HAL_GPIO_Init>
}
 80088fc:	e7e0      	b.n	80088c0 <HAL_ADC_MspInit+0x18>
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	40012400 	.word	0x40012400
 8008904:	40021000 	.word	0x40021000

08008908 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	46ce      	mov	lr, r9
 800890c:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800890e:	2378      	movs	r3, #120	; 0x78
void ReadTempAndVref(float *temp, float *Vref) {
 8008910:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 8008912:	4c57      	ldr	r4, [pc, #348]	; (8008a70 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp, float *Vref) {
 8008914:	0007      	movs	r7, r0
	if (0 == ADC_flag)
 8008916:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 8008918:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800891a:	2b00      	cmp	r3, #0
 800891c:	d100      	bne.n	8008920 <ReadTempAndVref+0x18>
 800891e:	e0a4      	b.n	8008a6a <ReadTempAndVref+0x162>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008920:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008922:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008924:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008926:	0152      	lsls	r2, r2, #5
 8008928:	3370      	adds	r3, #112	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800892a:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800892c:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800892e:	2201      	movs	r2, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008930:	4d50      	ldr	r5, [pc, #320]	; (8008a74 <ReadTempAndVref+0x16c>)
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008932:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008934:	317c      	adds	r1, #124	; 0x7c
 8008936:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008938:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800893a:	f007 f8c5 	bl	800fac8 <HAL_ADC_ConfigChannel>
 800893e:	2800      	cmp	r0, #0
 8008940:	d000      	beq.n	8008944 <ReadTempAndVref+0x3c>
 8008942:	e08e      	b.n	8008a62 <ReadTempAndVref+0x15a>
	HAL_ADC_Start(&hadc);
 8008944:	0028      	movs	r0, r5
 8008946:	f007 f809 	bl	800f95c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800894a:	2164      	movs	r1, #100	; 0x64
 800894c:	0028      	movs	r0, r5
 800894e:	f007 f851 	bl	800f9f4 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 8008952:	0028      	movs	r0, r5
 8008954:	f007 f8b2 	bl	800fabc <HAL_ADC_GetValue>
 8008958:	4e47      	ldr	r6, [pc, #284]	; (8008a78 <ReadTempAndVref+0x170>)
 800895a:	8130      	strh	r0, [r6, #8]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800895c:	0400      	lsls	r0, r0, #16
 800895e:	0c00      	lsrs	r0, r0, #16
 8008960:	f7fa f874 	bl	8002a4c <__aeabi_i2d>
 8008964:	4a45      	ldr	r2, [pc, #276]	; (8008a7c <ReadTempAndVref+0x174>)
 8008966:	4b46      	ldr	r3, [pc, #280]	; (8008a80 <ReadTempAndVref+0x178>)
 8008968:	f7f9 fa64 	bl	8001e34 <__aeabi_dmul>
 800896c:	2200      	movs	r2, #0
 800896e:	4b45      	ldr	r3, [pc, #276]	; (8008a84 <ReadTempAndVref+0x17c>)
 8008970:	f7f8 fe56 	bl	8001620 <__aeabi_ddiv>
 8008974:	4a44      	ldr	r2, [pc, #272]	; (8008a88 <ReadTempAndVref+0x180>)
 8008976:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <ReadTempAndVref+0x184>)
 8008978:	f7f9 fcce 	bl	8002318 <__aeabi_dsub>
 800897c:	4a44      	ldr	r2, [pc, #272]	; (8008a90 <ReadTempAndVref+0x188>)
 800897e:	4b45      	ldr	r3, [pc, #276]	; (8008a94 <ReadTempAndVref+0x18c>)
 8008980:	f7f8 fe4e 	bl	8001620 <__aeabi_ddiv>
 8008984:	2200      	movs	r2, #0
 8008986:	4b44      	ldr	r3, [pc, #272]	; (8008a98 <ReadTempAndVref+0x190>)
 8008988:	f7f8 fb2e 	bl	8000fe8 <__aeabi_dadd>
 800898c:	f7fa f91c 	bl	8002bc8 <__aeabi_d2f>
 8008990:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 8008992:	0028      	movs	r0, r5
 8008994:	f007 f80e 	bl	800f9b4 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008998:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_NONE;
 800899a:	4a40      	ldr	r2, [pc, #256]	; (8008a9c <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800899c:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800899e:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 80089a0:	3370      	adds	r3, #112	; 0x70
 80089a2:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089a4:	2201      	movs	r2, #1
 80089a6:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089a8:	317c      	adds	r1, #124	; 0x7c
 80089aa:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ac:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089ae:	f007 f88b 	bl	800fac8 <HAL_ADC_ConfigChannel>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d151      	bne.n	8008a5a <ReadTempAndVref+0x152>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089b6:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089b8:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089ba:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089bc:	0152      	lsls	r2, r2, #5
 80089be:	336f      	adds	r3, #111	; 0x6f
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089c0:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089c2:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80089c4:	2205      	movs	r2, #5
 80089c6:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089c8:	317c      	adds	r1, #124	; 0x7c
 80089ca:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80089cc:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089ce:	f007 f87b 	bl	800fac8 <HAL_ADC_ConfigChannel>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d13d      	bne.n	8008a52 <ReadTempAndVref+0x14a>
	HAL_ADC_Start(&hadc);
 80089d6:	0028      	movs	r0, r5
 80089d8:	f006 ffc0 	bl	800f95c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80089dc:	2164      	movs	r1, #100	; 0x64
 80089de:	0028      	movs	r0, r5
 80089e0:	f007 f808 	bl	800f9f4 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 80089e4:	0028      	movs	r0, r5
 80089e6:	f007 f869 	bl	800fabc <HAL_ADC_GetValue>
 80089ea:	4680      	mov	r8, r0
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089ec:	4b2c      	ldr	r3, [pc, #176]	; (8008aa0 <ReadTempAndVref+0x198>)
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 80089ee:	8170      	strh	r0, [r6, #10]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089f0:	8818      	ldrh	r0, [r3, #0]
 80089f2:	f7fa f82b 	bl	8002a4c <__aeabi_i2d>
 80089f6:	4a21      	ldr	r2, [pc, #132]	; (8008a7c <ReadTempAndVref+0x174>)
 80089f8:	4b21      	ldr	r3, [pc, #132]	; (8008a80 <ReadTempAndVref+0x178>)
 80089fa:	f7f9 fa1b 	bl	8001e34 <__aeabi_dmul>
 80089fe:	4643      	mov	r3, r8
 8008a00:	0006      	movs	r6, r0
 8008a02:	0418      	lsls	r0, r3, #16
 8008a04:	0c00      	lsrs	r0, r0, #16
 8008a06:	000f      	movs	r7, r1
 8008a08:	f7fa f820 	bl	8002a4c <__aeabi_i2d>
 8008a0c:	0002      	movs	r2, r0
 8008a0e:	000b      	movs	r3, r1
 8008a10:	0030      	movs	r0, r6
 8008a12:	0039      	movs	r1, r7
 8008a14:	f7f8 fe04 	bl	8001620 <__aeabi_ddiv>
 8008a18:	f7fa f8d6 	bl	8002bc8 <__aeabi_d2f>
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8008a20:	0028      	movs	r0, r5
 8008a22:	f006 ffc7 	bl	800f9b4 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008a26:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_NONE;
 8008a28:	4a1c      	ldr	r2, [pc, #112]	; (8008a9c <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008a2a:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a2c:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 8008a2e:	336f      	adds	r3, #111	; 0x6f
 8008a30:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a32:	2201      	movs	r2, #1
 8008a34:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a36:	317c      	adds	r1, #124	; 0x7c
 8008a38:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a3a:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a3c:	f007 f844 	bl	800fac8 <HAL_ADC_ConfigChannel>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d002      	beq.n	8008a4a <ReadTempAndVref+0x142>
	HAL_Delay(100);
 8008a44:	2064      	movs	r0, #100	; 0x64
 8008a46:	f006 fe0d 	bl	800f664 <HAL_Delay>
}
 8008a4a:	bc0c      	pop	{r2, r3}
 8008a4c:	4690      	mov	r8, r2
 8008a4e:	4699      	mov	r9, r3
 8008a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 8008a52:	2064      	movs	r0, #100	; 0x64
 8008a54:	f006 fe06 	bl	800f664 <HAL_Delay>
 8008a58:	e7bd      	b.n	80089d6 <ReadTempAndVref+0xce>
 8008a5a:	2064      	movs	r0, #100	; 0x64
 8008a5c:	f006 fe02 	bl	800f664 <HAL_Delay>
 8008a60:	e7a9      	b.n	80089b6 <ReadTempAndVref+0xae>
 8008a62:	2064      	movs	r0, #100	; 0x64
 8008a64:	f006 fdfe 	bl	800f664 <HAL_Delay>
 8008a68:	e76c      	b.n	8008944 <ReadTempAndVref+0x3c>
		MX_ADC_Init();
 8008a6a:	f7ff fef3 	bl	8008854 <MX_ADC_Init>
 8008a6e:	e757      	b.n	8008920 <ReadTempAndVref+0x18>
 8008a70:	2000191c 	.word	0x2000191c
 8008a74:	20007170 	.word	0x20007170
 8008a78:	2000199c 	.word	0x2000199c
 8008a7c:	66666666 	.word	0x66666666
 8008a80:	400a6666 	.word	0x400a6666
 8008a84:	40affe00 	.word	0x40affe00
 8008a88:	28f5c28f 	.word	0x28f5c28f
 8008a8c:	3ff68f5c 	.word	0x3ff68f5c
 8008a90:	33333333 	.word	0x33333333
 8008a94:	40113333 	.word	0x40113333
 8008a98:	40390000 	.word	0x40390000
 8008a9c:	00001001 	.word	0x00001001
 8008aa0:	1ffff7ba 	.word	0x1ffff7ba

08008aa4 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 8008aa6:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	0006      	movs	r6, r0
 8008aac:	000f      	movs	r7, r1
	if (port == 2 || port == 3) {
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d901      	bls.n	8008ab6 <GetReadPrecentage+0x12>
}
 8008ab2:	b007      	add	sp, #28
 8008ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 8008ab6:	2378      	movs	r3, #120	; 0x78
 8008ab8:	4c4e      	ldr	r4, [pc, #312]	; (8008bf4 <GetReadPrecentage+0x150>)
 8008aba:	5ce3      	ldrb	r3, [r4, r3]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d06a      	beq.n	8008b96 <GetReadPrecentage+0xf2>
 8008ac0:	4d4d      	ldr	r5, [pc, #308]	; (8008bf8 <GetReadPrecentage+0x154>)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008ac2:	2090      	movs	r0, #144	; 0x90
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	2110      	movs	r1, #16
 8008ac8:	05c0      	lsls	r0, r0, #23
 8008aca:	f008 fa65 	bl	8010f98 <HAL_GPIO_WritePin>
		Channel = Get_channel(GetUart(port), "bottom");
 8008ace:	0030      	movs	r0, r6
 8008ad0:	f004 fd80 	bl	800d5d4 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008ad4:	4a49      	ldr	r2, [pc, #292]	; (8008bfc <GetReadPrecentage+0x158>)
 8008ad6:	6803      	ldr	r3, [r0, #0]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d07d      	beq.n	8008bd8 <GetReadPrecentage+0x134>
	else if (huart->Instance == USART6 && side == "top")
 8008adc:	4a48      	ldr	r2, [pc, #288]	; (8008c00 <GetReadPrecentage+0x15c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d04e      	beq.n	8008b80 <GetReadPrecentage+0xdc>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	001a      	movs	r2, r3
		Channel = Get_channel(GetUart(port), "bottom");
 8008ae6:	4e47      	ldr	r6, [pc, #284]	; (8008c04 <GetReadPrecentage+0x160>)
		sConfig.Channel = Channel;
 8008ae8:	67e2      	str	r2, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008aea:	2280      	movs	r2, #128	; 0x80
		Channel = Get_channel(GetUart(port), "bottom");
 8008aec:	7333      	strb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008aee:	2380      	movs	r3, #128	; 0x80
 8008af0:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008af2:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008af4:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008af6:	2201      	movs	r2, #1
 8008af8:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008afa:	317c      	adds	r1, #124	; 0x7c
 8008afc:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008afe:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b00:	f006 ffe2 	bl	800fac8 <HAL_ADC_ConfigChannel>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d142      	bne.n	8008b8e <GetReadPrecentage+0xea>
		HAL_ADC_Start(&hadc);
 8008b08:	0028      	movs	r0, r5
 8008b0a:	f006 ff27 	bl	800f95c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008b0e:	2164      	movs	r1, #100	; 0x64
 8008b10:	0028      	movs	r0, r5
 8008b12:	f006 ff6f 	bl	800f9f4 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 8008b16:	0028      	movs	r0, r5
 8008b18:	f006 ffd0 	bl	800fabc <HAL_ADC_GetValue>
 8008b1c:	f7f8 fa24 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 8008b20:	f7fa f800 	bl	8002b24 <__aeabi_f2d>
 8008b24:	4a38      	ldr	r2, [pc, #224]	; (8008c08 <GetReadPrecentage+0x164>)
 8008b26:	4b39      	ldr	r3, [pc, #228]	; (8008c0c <GetReadPrecentage+0x168>)
 8008b28:	f7f9 f984 	bl	8001e34 <__aeabi_dmul>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4b38      	ldr	r3, [pc, #224]	; (8008c10 <GetReadPrecentage+0x16c>)
 8008b30:	f7f8 fd76 	bl	8001620 <__aeabi_ddiv>
 8008b34:	f7fa f848 	bl	8002bc8 <__aeabi_d2f>
		current = (100 * percentage) / 3.3;
 8008b38:	4936      	ldr	r1, [pc, #216]	; (8008c14 <GetReadPrecentage+0x170>)
		percentage = 3.3 * percentage / 4095;
 8008b3a:	6130      	str	r0, [r6, #16]
		current = (100 * percentage) / 3.3;
 8008b3c:	f7f7 fefe 	bl	800093c <__aeabi_fmul>
 8008b40:	f7f9 fff0 	bl	8002b24 <__aeabi_f2d>
 8008b44:	4a30      	ldr	r2, [pc, #192]	; (8008c08 <GetReadPrecentage+0x164>)
 8008b46:	4b31      	ldr	r3, [pc, #196]	; (8008c0c <GetReadPrecentage+0x168>)
 8008b48:	f7f8 fd6a 	bl	8001620 <__aeabi_ddiv>
 8008b4c:	f7fa f83c 	bl	8002bc8 <__aeabi_d2f>
 8008b50:	6170      	str	r0, [r6, #20]
		*precentageValue = current;
 8008b52:	6038      	str	r0, [r7, #0]
		HAL_ADC_Stop(&hadc);
 8008b54:	0028      	movs	r0, r5
 8008b56:	f006 ff2d 	bl	800f9b4 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008b5a:	7b33      	ldrb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_NONE;
 8008b5c:	4a2e      	ldr	r2, [pc, #184]	; (8008c18 <GetReadPrecentage+0x174>)
		sConfig.Channel = Channel;
 8008b5e:	67e3      	str	r3, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 8008b60:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b62:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_NONE;
 8008b64:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b66:	2201      	movs	r2, #1
 8008b68:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b6a:	317c      	adds	r1, #124	; 0x7c
 8008b6c:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b6e:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b70:	f006 ffaa 	bl	800fac8 <HAL_ADC_ConfigChannel>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d09c      	beq.n	8008ab2 <GetReadPrecentage+0xe>
	HAL_Delay(100);
 8008b78:	2064      	movs	r0, #100	; 0x64
 8008b7a:	f006 fd73 	bl	800f664 <HAL_Delay>
 8008b7e:	e798      	b.n	8008ab2 <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 8008b80:	4a26      	ldr	r2, [pc, #152]	; (8008c1c <GetReadPrecentage+0x178>)
 8008b82:	4b27      	ldr	r3, [pc, #156]	; (8008c20 <GetReadPrecentage+0x17c>)
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d031      	beq.n	8008bec <GetReadPrecentage+0x148>
 8008b88:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 8008b8a:	2305      	movs	r3, #5
 8008b8c:	e7ab      	b.n	8008ae6 <GetReadPrecentage+0x42>
	HAL_Delay(100);
 8008b8e:	2064      	movs	r0, #100	; 0x64
 8008b90:	f006 fd68 	bl	800f664 <HAL_Delay>
 8008b94:	e7b8      	b.n	8008b08 <GetReadPrecentage+0x64>
			MX_ADC_Init();
 8008b96:	f7ff fe5d 	bl	8008854 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008b9a:	0030      	movs	r0, r6
 8008b9c:	f004 fd1a 	bl	800d5d4 <GetUart>
 8008ba0:	f009 fa2a 	bl	8011ff8 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008ba4:	2090      	movs	r0, #144	; 0x90
 8008ba6:	2110      	movs	r1, #16
 8008ba8:	05c0      	lsls	r0, r0, #23
 8008baa:	f008 f951 	bl	8010e50 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008bae:	4d12      	ldr	r5, [pc, #72]	; (8008bf8 <GetReadPrecentage+0x154>)
 8008bb0:	0028      	movs	r0, r5
 8008bb2:	f007 f819 	bl	800fbe8 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008bb6:	2310      	movs	r3, #16
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb8:	2090      	movs	r0, #144	; 0x90
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008bba:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bbc:	3b0f      	subs	r3, #15
 8008bbe:	9302      	str	r3, [sp, #8]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bc0:	a901      	add	r1, sp, #4
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008bc2:	3302      	adds	r3, #2
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bc4:	05c0      	lsls	r0, r0, #23
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008bc6:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bc8:	f008 f846 	bl	8010c58 <HAL_GPIO_Init>
			portStatus[port - 1] = CUSTOM;
 8008bcc:	2206      	movs	r2, #6
 8008bce:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <GetReadPrecentage+0x180>)
 8008bd0:	199b      	adds	r3, r3, r6
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e774      	b.n	8008ac2 <GetReadPrecentage+0x1e>
	if (huart->Instance == USART2 && side == "top")
 8008bd8:	4a10      	ldr	r2, [pc, #64]	; (8008c1c <GetReadPrecentage+0x178>)
 8008bda:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <GetReadPrecentage+0x17c>)
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d002      	beq.n	8008be6 <GetReadPrecentage+0x142>
 8008be0:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e77f      	b.n	8008ae6 <GetReadPrecentage+0x42>
	if (huart->Instance == USART2 && side == "top")
 8008be6:	2202      	movs	r2, #2
		return ADC_CHANNEL_2;
 8008be8:	2302      	movs	r3, #2
 8008bea:	e77c      	b.n	8008ae6 <GetReadPrecentage+0x42>
	else if (huart->Instance == USART6 && side == "top")
 8008bec:	2204      	movs	r2, #4
		return ADC_CHANNEL_4;
 8008bee:	2304      	movs	r3, #4
 8008bf0:	e779      	b.n	8008ae6 <GetReadPrecentage+0x42>
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	2000191c 	.word	0x2000191c
 8008bf8:	20007170 	.word	0x20007170
 8008bfc:	40004400 	.word	0x40004400
 8008c00:	40011400 	.word	0x40011400
 8008c04:	2000199c 	.word	0x2000199c
 8008c08:	66666666 	.word	0x66666666
 8008c0c:	400a6666 	.word	0x400a6666
 8008c10:	40affe00 	.word	0x40affe00
 8008c14:	42c80000 	.word	0x42c80000
 8008c18:	00001001 	.word	0x00001001
 8008c1c:	08018964 	.word	0x08018964
 8008c20:	08018960 	.word	0x08018960
 8008c24:	20000c2c 	.word	0x20000c2c

08008c28 <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008c28:	2802      	cmp	r0, #2
 8008c2a:	d00e      	beq.n	8008c4a <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008c2c:	2803      	cmp	r0, #3
 8008c2e:	d002      	beq.n	8008c36 <Get_Rank+0xe>
 8008c30:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <Get_Rank+0x4c>)
 8008c32:	7e18      	ldrb	r0, [r3, #24]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 8008c34:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <Get_Rank+0x50>)
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d016      	beq.n	8008c6a <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <Get_Rank+0x54>)
 8008c3e:	4299      	cmp	r1, r3
 8008c40:	d1f6      	bne.n	8008c30 <Get_Rank+0x8>
		Rank_t = 3;
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <Get_Rank+0x4c>)
 8008c44:	7618      	strb	r0, [r3, #24]
 8008c46:	2003      	movs	r0, #3
 8008c48:	e7f4      	b.n	8008c34 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	; (8008c78 <Get_Rank+0x50>)
 8008c4c:	4299      	cmp	r1, r3
 8008c4e:	d007      	beq.n	8008c60 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <Get_Rank+0x54>)
 8008c52:	4299      	cmp	r1, r3
 8008c54:	d1ec      	bne.n	8008c30 <Get_Rank+0x8>
		Rank_t = 1;
 8008c56:	2201      	movs	r2, #1
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <Get_Rank+0x4c>)
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	761a      	strb	r2, [r3, #24]
 8008c5e:	e7e9      	b.n	8008c34 <Get_Rank+0xc>
		Rank_t = 0;
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <Get_Rank+0x4c>)
 8008c64:	2000      	movs	r0, #0
 8008c66:	761a      	strb	r2, [r3, #24]
 8008c68:	e7e4      	b.n	8008c34 <Get_Rank+0xc>
		Rank_t = 2;
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <Get_Rank+0x4c>)
 8008c6e:	3801      	subs	r0, #1
 8008c70:	761a      	strb	r2, [r3, #24]
 8008c72:	e7df      	b.n	8008c34 <Get_Rank+0xc>
 8008c74:	2000199c 	.word	0x2000199c
 8008c78:	08018960 	.word	0x08018960
 8008c7c:	08018964 	.word	0x08018964

08008c80 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 8008c82:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008c84:	0004      	movs	r4, r0
 8008c86:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d900      	bls.n	8008c8e <ADCSelectChannel+0xe>
}
 8008c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008c8e:	f004 fca1 	bl	800d5d4 <GetUart>
 8008c92:	f009 f9b1 	bl	8011ff8 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008c96:	2206      	movs	r2, #6
 8008c98:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <ADCSelectChannel+0x7c>)
		Channel = Get_channel(GetUart(ADC_port), side);
 8008c9a:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 8008c9c:	191b      	adds	r3, r3, r4
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008ca2:	f004 fc97 	bl	800d5d4 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008ca6:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <ADCSelectChannel+0x80>)
 8008ca8:	6803      	ldr	r3, [r0, #0]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d011      	beq.n	8008cd2 <ADCSelectChannel+0x52>
	else if (huart->Instance == USART6 && side == "top")
 8008cae:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <ADCSelectChannel+0x84>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d016      	beq.n	8008ce2 <ADCSelectChannel+0x62>
		Channel = Get_channel(GetUart(ADC_port), side);
 8008cb4:	4e14      	ldr	r6, [pc, #80]	; (8008d08 <ADCSelectChannel+0x88>)
		Rank_t = Get_Rank(ADC_port, side);
 8008cb6:	0029      	movs	r1, r5
 8008cb8:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 8008cba:	7337      	strb	r7, [r6, #12]
		Rank_t = Get_Rank(ADC_port, side);
 8008cbc:	f7ff ffb4 	bl	8008c28 <Get_Rank>
		if (ADC_flag == 0)
 8008cc0:	2378      	movs	r3, #120	; 0x78
 8008cc2:	4a12      	ldr	r2, [pc, #72]	; (8008d0c <ADCSelectChannel+0x8c>)
		Rank_t = Get_Rank(ADC_port, side);
 8008cc4:	7630      	strb	r0, [r6, #24]
		if (ADC_flag == 0)
 8008cc6:	5cd3      	ldrb	r3, [r2, r3]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1df      	bne.n	8008c8c <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008ccc:	f7ff fdc2 	bl	8008854 <MX_ADC_Init>
}
 8008cd0:	e7dc      	b.n	8008c8c <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <ADCSelectChannel+0x90>)
 8008cd4:	429d      	cmp	r5, r3
 8008cd6:	d00e      	beq.n	8008cf6 <ADCSelectChannel+0x76>
	else if (huart->Instance == USART2 && side == "bottom")
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <ADCSelectChannel+0x94>)
 8008cda:	429d      	cmp	r5, r3
 8008cdc:	d1ea      	bne.n	8008cb4 <ADCSelectChannel+0x34>
		return ADC_CHANNEL_3;
 8008cde:	2703      	movs	r7, #3
 8008ce0:	e7e8      	b.n	8008cb4 <ADCSelectChannel+0x34>
	else if (huart->Instance == USART6 && side == "top")
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <ADCSelectChannel+0x90>)
 8008ce4:	429d      	cmp	r5, r3
 8008ce6:	d004      	beq.n	8008cf2 <ADCSelectChannel+0x72>
	else if (huart->Instance == USART6 && side == "bottom")
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <ADCSelectChannel+0x94>)
 8008cea:	429d      	cmp	r5, r3
 8008cec:	d1e2      	bne.n	8008cb4 <ADCSelectChannel+0x34>
		return ADC_CHANNEL_5;
 8008cee:	2705      	movs	r7, #5
 8008cf0:	e7e0      	b.n	8008cb4 <ADCSelectChannel+0x34>
		return ADC_CHANNEL_4;
 8008cf2:	2704      	movs	r7, #4
 8008cf4:	e7de      	b.n	8008cb4 <ADCSelectChannel+0x34>
		return ADC_CHANNEL_2;
 8008cf6:	2702      	movs	r7, #2
 8008cf8:	e7dc      	b.n	8008cb4 <ADCSelectChannel+0x34>
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	20000c2c 	.word	0x20000c2c
 8008d00:	40004400 	.word	0x40004400
 8008d04:	40011400 	.word	0x40011400
 8008d08:	2000199c 	.word	0x2000199c
 8008d0c:	2000191c 	.word	0x2000191c
 8008d10:	08018960 	.word	0x08018960
 8008d14:	08018964 	.word	0x08018964

08008d18 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	4647      	mov	r7, r8
 8008d1c:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 8008d1e:	2378      	movs	r3, #120	; 0x78
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d20:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 8008d22:	4d3a      	ldr	r5, [pc, #232]	; (8008e0c <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d24:	4680      	mov	r8, r0
	if (ADC_flag == 1) {
 8008d26:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d28:	000f      	movs	r7, r1
 8008d2a:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d00b      	beq.n	8008d48 <ReadADCChannel+0x30>
 8008d30:	4c37      	ldr	r4, [pc, #220]	; (8008e10 <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008d32:	7e23      	ldrb	r3, [r4, #24]
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	18e4      	adds	r4, r4, r3
 8008d38:	8ba0      	ldrh	r0, [r4, #28]
 8008d3a:	f7f8 f915 	bl	8000f68 <__aeabi_ui2f>
 8008d3e:	6030      	str	r0, [r6, #0]
}
 8008d40:	bc0c      	pop	{r2, r3}
 8008d42:	4690      	mov	r8, r2
 8008d44:	4699      	mov	r9, r3
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 8008d48:	f004 fc44 	bl	800d5d4 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008d4c:	4a31      	ldr	r2, [pc, #196]	; (8008e14 <ReadADCChannel+0xfc>)
 8008d4e:	6803      	ldr	r3, [r0, #0]
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d03f      	beq.n	8008dd4 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 8008d54:	4a30      	ldr	r2, [pc, #192]	; (8008e18 <ReadADCChannel+0x100>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d049      	beq.n	8008dee <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	4c2c      	ldr	r4, [pc, #176]	; (8008e10 <ReadADCChannel+0xf8>)
		Rank_t = Get_Rank(Port, side);
 8008d5e:	0039      	movs	r1, r7
 8008d60:	4640      	mov	r0, r8
		Channel = Get_channel(GetUart(Port), side);
 8008d62:	7323      	strb	r3, [r4, #12]
		Rank_t = Get_Rank(Port, side);
 8008d64:	f7ff ff60 	bl	8008c28 <Get_Rank>
		sConfig.Channel = Channel;
 8008d68:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d6a:	2280      	movs	r2, #128	; 0x80
		sConfig.Channel = Channel;
 8008d6c:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d6e:	2380      	movs	r3, #128	; 0x80
 8008d70:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d72:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d74:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d76:	2203      	movs	r2, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d78:	4f28      	ldr	r7, [pc, #160]	; (8008e1c <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 8008d7a:	7620      	strb	r0, [r4, #24]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d7c:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d7e:	317c      	adds	r1, #124	; 0x7c
 8008d80:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d82:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d84:	f006 fea0 	bl	800fac8 <HAL_ADC_ConfigChannel>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d12c      	bne.n	8008de6 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 8008d8c:	0038      	movs	r0, r7
 8008d8e:	f006 fde5 	bl	800f95c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008d92:	2164      	movs	r1, #100	; 0x64
 8008d94:	0038      	movs	r0, r7
 8008d96:	f006 fe2d 	bl	800f9f4 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 8008d9a:	0038      	movs	r0, r7
 8008d9c:	f006 fe8e 	bl	800fabc <HAL_ADC_GetValue>
 8008da0:	7e23      	ldrb	r3, [r4, #24]
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	18e3      	adds	r3, r4, r3
 8008da6:	8398      	strh	r0, [r3, #28]
		HAL_ADC_Stop(&hadc);
 8008da8:	0038      	movs	r0, r7
 8008daa:	f006 fe03 	bl	800f9b4 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008dae:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_NONE;
 8008db0:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <ReadADCChannel+0x108>)
		sConfig.Channel = Channel;
 8008db2:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 8008db4:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008db6:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_NONE;
 8008db8:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dba:	2203      	movs	r2, #3
 8008dbc:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dbe:	317c      	adds	r1, #124	; 0x7c
 8008dc0:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dc2:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dc4:	f006 fe80 	bl	800fac8 <HAL_ADC_ConfigChannel>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d0b2      	beq.n	8008d32 <ReadADCChannel+0x1a>
	HAL_Delay(100);
 8008dcc:	2064      	movs	r0, #100	; 0x64
 8008dce:	f006 fc49 	bl	800f664 <HAL_Delay>
 8008dd2:	e7ae      	b.n	8008d32 <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 8008dd4:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <ReadADCChannel+0x10c>)
 8008dd6:	429f      	cmp	r7, r3
 8008dd8:	d012      	beq.n	8008e00 <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 8008dda:	4b13      	ldr	r3, [pc, #76]	; (8008e28 <ReadADCChannel+0x110>)
 8008ddc:	429f      	cmp	r7, r3
 8008dde:	d1bc      	bne.n	8008d5a <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 8008de0:	2303      	movs	r3, #3
 8008de2:	4699      	mov	r9, r3
 8008de4:	e7b9      	b.n	8008d5a <ReadADCChannel+0x42>
	HAL_Delay(100);
 8008de6:	2064      	movs	r0, #100	; 0x64
 8008de8:	f006 fc3c 	bl	800f664 <HAL_Delay>
 8008dec:	e7ce      	b.n	8008d8c <ReadADCChannel+0x74>
	else if (huart->Instance == USART6 && side == "top")
 8008dee:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <ReadADCChannel+0x10c>)
 8008df0:	429f      	cmp	r7, r3
 8008df2:	d008      	beq.n	8008e06 <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 8008df4:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <ReadADCChannel+0x110>)
 8008df6:	429f      	cmp	r7, r3
 8008df8:	d1af      	bne.n	8008d5a <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 8008dfa:	2305      	movs	r3, #5
 8008dfc:	4699      	mov	r9, r3
 8008dfe:	e7ac      	b.n	8008d5a <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 8008e00:	2302      	movs	r3, #2
 8008e02:	4699      	mov	r9, r3
 8008e04:	e7a9      	b.n	8008d5a <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 8008e06:	2304      	movs	r3, #4
 8008e08:	4699      	mov	r9, r3
 8008e0a:	e7a6      	b.n	8008d5a <ReadADCChannel+0x42>
 8008e0c:	2000191c 	.word	0x2000191c
 8008e10:	2000199c 	.word	0x2000199c
 8008e14:	40004400 	.word	0x40004400
 8008e18:	40011400 	.word	0x40011400
 8008e1c:	20007170 	.word	0x20007170
 8008e20:	00001001 	.word	0x00001001
 8008e24:	08018960 	.word	0x08018960
 8008e28:	08018964 	.word	0x08018964

08008e2c <buttonReleasedCallback>:
 8008e2c:	4770      	bx	lr
 8008e2e:	46c0      	nop			; (mov r8, r8)

08008e30 <buttonClickedCallback>:
 8008e30:	4770      	bx	lr
 8008e32:	46c0      	nop			; (mov r8, r8)

08008e34 <buttonDblClickedCallback>:
 8008e34:	4770      	bx	lr
 8008e36:	46c0      	nop			; (mov r8, r8)

08008e38 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8008e38:	4770      	bx	lr
 8008e3a:	46c0      	nop			; (mov r8, r8)

08008e3c <buttonReleasedForYCallback>:
 8008e3c:	4770      	bx	lr
 8008e3e:	46c0      	nop			; (mov r8, r8)

08008e40 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008e40:	4bc2      	ldr	r3, [pc, #776]	; (800914c <CheckAttachedButtons+0x30c>)
 8008e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e44:	4645      	mov	r5, r8
 8008e46:	001c      	movs	r4, r3
 8008e48:	4698      	mov	r8, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e4a:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 8008e4c:	46de      	mov	lr, fp
 8008e4e:	464e      	mov	r6, r9
 8008e50:	4657      	mov	r7, sl
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e52:	469b      	mov	fp, r3
void CheckAttachedButtons(void) {
 8008e54:	b5e0      	push	{r5, r6, r7, lr}
 8008e56:	b08d      	sub	sp, #52	; 0x34
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e58:	9306      	str	r3, [sp, #24]
			if (delayButtonStateReset == false)
 8008e5a:	4bbd      	ldr	r3, [pc, #756]	; (8009150 <CheckAttachedButtons+0x310>)
void CheckAttachedButtons(void) {
 8008e5c:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 8008e5e:	4699      	mov	r9, r3
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8008e60:	465b      	mov	r3, fp
 8008e62:	3409      	adds	r4, #9
 8008e64:	9305      	str	r3, [sp, #20]
 8008e66:	b2eb      	uxtb	r3, r5
 8008e68:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 8008e6a:	7863      	ldrb	r3, [r4, #1]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d100      	bne.n	8008e72 <CheckAttachedButtons+0x32>
 8008e70:	e0ec      	b.n	800904c <CheckAttachedButtons+0x20c>
			if (delayButtonStateReset == false)
 8008e72:	2324      	movs	r3, #36	; 0x24
 8008e74:	464a      	mov	r2, r9
 8008e76:	5cd3      	ldrb	r3, [r2, r3]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d100      	bne.n	8008e7e <CheckAttachedButtons+0x3e>
				button[i].state = NONE;
 8008e7c:	7023      	strb	r3, [r4, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008e7e:	ab06      	add	r3, sp, #24
 8008e80:	469c      	mov	ip, r3
 8008e82:	270e      	movs	r7, #14
 8008e84:	ae09      	add	r6, sp, #36	; 0x24
 8008e86:	4467      	add	r7, ip
 8008e88:	ab0b      	add	r3, sp, #44	; 0x2c
 8008e8a:	0032      	movs	r2, r6
 8008e8c:	a90a      	add	r1, sp, #40	; 0x28
 8008e8e:	9700      	str	r7, [sp, #0]
 8008e90:	4650      	mov	r0, sl
 8008e92:	f003 fd83 	bl	800c99c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008e96:	8831      	ldrh	r1, [r6, #0]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e9c:	f008 f87c 	bl	8010f98 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008ea0:	200a      	movs	r0, #10
 8008ea2:	f004 f93d 	bl	800d120 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 8008ea6:	8839      	ldrh	r1, [r7, #0]
 8008ea8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008eaa:	f008 f86f 	bl	8010f8c <HAL_GPIO_ReadPin>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d100      	bne.n	8008eb4 <CheckAttachedButtons+0x74>
 8008eb2:	e122      	b.n	80090fa <CheckAttachedButtons+0x2ba>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008eb4:	8831      	ldrh	r1, [r6, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eba:	f008 f86d 	bl	8010f98 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 8008ebe:	7863      	ldrb	r3, [r4, #1]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d100      	bne.n	8008ec6 <CheckAttachedButtons+0x86>
 8008ec4:	e0d0      	b.n	8009068 <CheckAttachedButtons+0x228>
 8008ec6:	d800      	bhi.n	8008eca <CheckAttachedButtons+0x8a>
 8008ec8:	e0cc      	b.n	8009064 <CheckAttachedButtons+0x224>
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d100      	bne.n	8008ed0 <CheckAttachedButtons+0x90>
 8008ece:	e14d      	b.n	800916c <CheckAttachedButtons+0x32c>
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d000      	beq.n	8008ed6 <CheckAttachedButtons+0x96>
 8008ed4:	e11f      	b.n	8009116 <CheckAttachedButtons+0x2d6>
 8008ed6:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 8008ed8:	9e05      	ldr	r6, [sp, #20]
 8008eda:	00aa      	lsls	r2, r5, #2
 8008edc:	3140      	adds	r1, #64	; 0x40
 8008ede:	588b      	ldr	r3, [r1, r2]
 8008ee0:	2e01      	cmp	r6, #1
 8008ee2:	d100      	bne.n	8008ee6 <CheckAttachedButtons+0xa6>
 8008ee4:	e14d      	b.n	8009182 <CheckAttachedButtons+0x342>
				else if (connected == GPIO_PIN_RESET)
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	d100      	bne.n	8008eec <CheckAttachedButtons+0xac>
 8008eea:	e233      	b.n	8009354 <CheckAttachedButtons+0x514>
			if (state == CLOSED || state == ON) {
 8008eec:	9906      	ldr	r1, [sp, #24]
 8008eee:	2904      	cmp	r1, #4
 8008ef0:	d100      	bne.n	8008ef4 <CheckAttachedButtons+0xb4>
 8008ef2:	e118      	b.n	8009126 <CheckAttachedButtons+0x2e6>
 8008ef4:	9906      	ldr	r1, [sp, #24]
 8008ef6:	2902      	cmp	r1, #2
 8008ef8:	d100      	bne.n	8008efc <CheckAttachedButtons+0xbc>
 8008efa:	e114      	b.n	8009126 <CheckAttachedButtons+0x2e6>
			if (state == OPEN || state == OFF) {
 8008efc:	9906      	ldr	r1, [sp, #24]
 8008efe:	2903      	cmp	r1, #3
 8008f00:	d003      	beq.n	8008f0a <CheckAttachedButtons+0xca>
 8008f02:	4894      	ldr	r0, [pc, #592]	; (8009154 <CheckAttachedButtons+0x314>)
 8008f04:	9004      	str	r0, [sp, #16]
 8008f06:	2901      	cmp	r1, #1
 8008f08:	d116      	bne.n	8008f38 <CheckAttachedButtons+0xf8>
				if (releaseCounter[i] < 0xFFFF)
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	305c      	adds	r0, #92	; 0x5c
 8008f0e:	5881      	ldr	r1, [r0, r2]
 8008f10:	4e91      	ldr	r6, [pc, #580]	; (8009158 <CheckAttachedButtons+0x318>)
 8008f12:	42b1      	cmp	r1, r6
 8008f14:	d900      	bls.n	8008f18 <CheckAttachedButtons+0xd8>
 8008f16:	e0bc      	b.n	8009092 <CheckAttachedButtons+0x252>
					++releaseCounter[i];		// Advance the debounce counter
 8008f18:	3101      	adds	r1, #1
 8008f1a:	5081      	str	r1, [r0, r2]
 8008f1c:	488d      	ldr	r0, [pc, #564]	; (8009154 <CheckAttachedButtons+0x314>)
				if (clicked == 2
 8008f1e:	272f      	movs	r7, #47	; 0x2f
 8008f20:	9004      	str	r0, [sp, #16]
 8008f22:	7946      	ldrb	r6, [r0, #5]
 8008f24:	4648      	mov	r0, r9
 8008f26:	498d      	ldr	r1, [pc, #564]	; (800915c <CheckAttachedButtons+0x31c>)
 8008f28:	5dc7      	ldrb	r7, [r0, r7]
 8008f2a:	5c69      	ldrb	r1, [r5, r1]
 8008f2c:	2f02      	cmp	r7, #2
 8008f2e:	d100      	bne.n	8008f32 <CheckAttachedButtons+0xf2>
 8008f30:	e103      	b.n	800913a <CheckAttachedButtons+0x2fa>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8008f32:	42b1      	cmp	r1, r6
 8008f34:	d900      	bls.n	8008f38 <CheckAttachedButtons+0xf8>
 8008f36:	e102      	b.n	800913e <CheckAttachedButtons+0x2fe>
 8008f38:	4646      	mov	r6, r8
			if (pressCounter[i] < BOS.buttons.debounce) {
 8008f3a:	9904      	ldr	r1, [sp, #16]
 8008f3c:	365c      	adds	r6, #92	; 0x5c
 8008f3e:	58b0      	ldr	r0, [r6, r2]
 8008f40:	8809      	ldrh	r1, [r1, #0]
 8008f42:	9003      	str	r0, [sp, #12]
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d84d      	bhi.n	8008fe4 <CheckAttachedButtons+0x1a4>
				if (pressCounter[i] == BOS.buttons.debounce) {
 8008f48:	d105      	bne.n	8008f56 <CheckAttachedButtons+0x116>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8008f4a:	2707      	movs	r7, #7
 8008f4c:	7027      	strb	r7, [r4, #0]
					++pressCounter[i];
 8008f4e:	4647      	mov	r7, r8
 8008f50:	3301      	adds	r3, #1
 8008f52:	3740      	adds	r7, #64	; 0x40
 8008f54:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008f56:	9803      	ldr	r0, [sp, #12]
 8008f58:	4281      	cmp	r1, r0
 8008f5a:	d205      	bcs.n	8008f68 <CheckAttachedButtons+0x128>
					releaseCounter[i] = 0;
 8008f5c:	4646      	mov	r6, r8
 8008f5e:	2700      	movs	r7, #0
 8008f60:	2000      	movs	r0, #0
 8008f62:	365c      	adds	r6, #92	; 0x5c
 8008f64:	50b7      	str	r7, [r6, r2]
 8008f66:	9003      	str	r0, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 8008f68:	9804      	ldr	r0, [sp, #16]
 8008f6a:	8840      	ldrh	r0, [r0, #2]
 8008f6c:	9007      	str	r0, [sp, #28]
 8008f6e:	4298      	cmp	r0, r3
 8008f70:	d204      	bcs.n	8008f7c <CheckAttachedButtons+0x13c>
						&& pressCounter[i] < 500) {
 8008f72:	20f4      	movs	r0, #244	; 0xf4
 8008f74:	30ff      	adds	r0, #255	; 0xff
 8008f76:	4283      	cmp	r3, r0
 8008f78:	d800      	bhi.n	8008f7c <CheckAttachedButtons+0x13c>
 8008f7a:	e10c      	b.n	8009196 <CheckAttachedButtons+0x356>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8008f7c:	4878      	ldr	r0, [pc, #480]	; (8009160 <CheckAttachedButtons+0x320>)
 8008f7e:	4684      	mov	ip, r0
 8008f80:	4878      	ldr	r0, [pc, #480]	; (8009164 <CheckAttachedButtons+0x324>)
 8008f82:	449c      	add	ip, r3
 8008f84:	4584      	cmp	ip, r0
 8008f86:	d82d      	bhi.n	8008fe4 <CheckAttachedButtons+0x1a4>
					if (clicked)
 8008f88:	202f      	movs	r0, #47	; 0x2f
 8008f8a:	4684      	mov	ip, r0
 8008f8c:	4648      	mov	r0, r9
 8008f8e:	4667      	mov	r7, ip
 8008f90:	5dc0      	ldrb	r0, [r0, r7]
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d002      	beq.n	8008f9c <CheckAttachedButtons+0x15c>
						clicked = 0;						// Cannot be a click
 8008f96:	4648      	mov	r0, r9
 8008f98:	2600      	movs	r6, #0
 8008f9a:	55c6      	strb	r6, [r0, r7]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8008f9c:	78a0      	ldrb	r0, [r4, #2]
	t1 *= 1000;
 8008f9e:	0147      	lsls	r7, r0, #5
 8008fa0:	1a3f      	subs	r7, r7, r0
 8008fa2:	00bf      	lsls	r7, r7, #2
 8008fa4:	4683      	mov	fp, r0
 8008fa6:	46bc      	mov	ip, r7
 8008fa8:	44dc      	add	ip, fp
 8008faa:	4660      	mov	r0, ip
 8008fac:	00c0      	lsls	r0, r0, #3
	if (pressCounter[port] == t1) {
 8008fae:	4298      	cmp	r0, r3
 8008fb0:	d100      	bne.n	8008fb4 <CheckAttachedButtons+0x174>
 8008fb2:	e169      	b.n	8009288 <CheckAttachedButtons+0x448>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8008fb4:	78e0      	ldrb	r0, [r4, #3]
	t2 *= 1000;
 8008fb6:	0147      	lsls	r7, r0, #5
 8008fb8:	1a3f      	subs	r7, r7, r0
 8008fba:	00bf      	lsls	r7, r7, #2
 8008fbc:	4683      	mov	fp, r0
 8008fbe:	46bc      	mov	ip, r7
 8008fc0:	44dc      	add	ip, fp
 8008fc2:	4660      	mov	r0, ip
 8008fc4:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t2) {
 8008fc6:	4298      	cmp	r0, r3
 8008fc8:	d100      	bne.n	8008fcc <CheckAttachedButtons+0x18c>
 8008fca:	e175      	b.n	80092b8 <CheckAttachedButtons+0x478>
			t3 = button[port].pressedX3Sec;
 8008fcc:	7920      	ldrb	r0, [r4, #4]
	t3 *= 1000;
 8008fce:	0146      	lsls	r6, r0, #5
 8008fd0:	1a36      	subs	r6, r6, r0
 8008fd2:	00b6      	lsls	r6, r6, #2
 8008fd4:	4683      	mov	fp, r0
 8008fd6:	46b4      	mov	ip, r6
 8008fd8:	44dc      	add	ip, fp
 8008fda:	4660      	mov	r0, ip
 8008fdc:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t3) {
 8008fde:	4298      	cmp	r0, r3
 8008fe0:	d100      	bne.n	8008fe4 <CheckAttachedButtons+0x1a4>
 8008fe2:	e169      	b.n	80092b8 <CheckAttachedButtons+0x478>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	d822      	bhi.n	8009030 <CheckAttachedButtons+0x1f0>
 8008fea:	4643      	mov	r3, r8
 8008fec:	9804      	ldr	r0, [sp, #16]
 8008fee:	3340      	adds	r3, #64	; 0x40
 8008ff0:	8840      	ldrh	r0, [r0, #2]
 8008ff2:	589b      	ldr	r3, [r3, r2]
 8008ff4:	9007      	str	r0, [sp, #28]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 8008ff6:	9803      	ldr	r0, [sp, #12]
 8008ff8:	4281      	cmp	r1, r0
 8008ffa:	d100      	bne.n	8008ffe <CheckAttachedButtons+0x1be>
 8008ffc:	e0c4      	b.n	8009188 <CheckAttachedButtons+0x348>
 8008ffe:	4640      	mov	r0, r8
 8009000:	305c      	adds	r0, #92	; 0x5c
 8009002:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8009004:	4299      	cmp	r1, r3
 8009006:	d203      	bcs.n	8009010 <CheckAttachedButtons+0x1d0>
					pressCounter[i] = 0;
 8009008:	4643      	mov	r3, r8
 800900a:	2100      	movs	r1, #0
 800900c:	3340      	adds	r3, #64	; 0x40
 800900e:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 8009010:	9b07      	ldr	r3, [sp, #28]
 8009012:	4283      	cmp	r3, r0
 8009014:	d240      	bcs.n	8009098 <CheckAttachedButtons+0x258>
						&& releaseCounter[i] < 500) {
 8009016:	23f4      	movs	r3, #244	; 0xf4
 8009018:	33ff      	adds	r3, #255	; 0xff
 800901a:	4298      	cmp	r0, r3
 800901c:	d83c      	bhi.n	8009098 <CheckAttachedButtons+0x258>
					if (clicked == 1) {
 800901e:	222f      	movs	r2, #47	; 0x2f
 8009020:	464b      	mov	r3, r9
 8009022:	5c9b      	ldrb	r3, [r3, r2]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d100      	bne.n	800902a <CheckAttachedButtons+0x1ea>
 8009028:	e15e      	b.n	80092e8 <CheckAttachedButtons+0x4a8>
					} else if (clicked == 3) {
 800902a:	2b03      	cmp	r3, #3
 800902c:	d100      	bne.n	8009030 <CheckAttachedButtons+0x1f0>
 800902e:	e115      	b.n	800925c <CheckAttachedButtons+0x41c>
			switch (button[i].state) {
 8009030:	7823      	ldrb	r3, [r4, #0]
 8009032:	3b05      	subs	r3, #5
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b09      	cmp	r3, #9
 8009038:	d808      	bhi.n	800904c <CheckAttachedButtons+0x20c>
 800903a:	4a4b      	ldr	r2, [pc, #300]	; (8009168 <CheckAttachedButtons+0x328>)
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	58d3      	ldr	r3, [r2, r3]
 8009040:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 8009042:	4650      	mov	r0, sl
 8009044:	f7ff f9dc 	bl	8008400 <buttonPressedCallback>
				button[i].state = NONE;
 8009048:	2300      	movs	r3, #0
 800904a:	7023      	strb	r3, [r4, #0]
 800904c:	3501      	adds	r5, #1
 800904e:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8009050:	2d07      	cmp	r5, #7
 8009052:	d000      	beq.n	8009056 <CheckAttachedButtons+0x216>
 8009054:	e707      	b.n	8008e66 <CheckAttachedButtons+0x26>
}
 8009056:	b00d      	add	sp, #52	; 0x34
 8009058:	bc3c      	pop	{r2, r3, r4, r5}
 800905a:	4690      	mov	r8, r2
 800905c:	4699      	mov	r9, r3
 800905e:	46a2      	mov	sl, r4
 8009060:	46ab      	mov	fp, r5
 8009062:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 8009064:	2b01      	cmp	r3, #1
 8009066:	d156      	bne.n	8009116 <CheckAttachedButtons+0x2d6>
 8009068:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800906a:	9805      	ldr	r0, [sp, #20]
 800906c:	00aa      	lsls	r2, r5, #2
 800906e:	3140      	adds	r1, #64	; 0x40
 8009070:	588b      	ldr	r3, [r1, r2]
 8009072:	2801      	cmp	r0, #1
 8009074:	d100      	bne.n	8009078 <CheckAttachedButtons+0x238>
 8009076:	e161      	b.n	800933c <CheckAttachedButtons+0x4fc>
				else if (connected == GPIO_PIN_RESET)
 8009078:	9905      	ldr	r1, [sp, #20]
 800907a:	2900      	cmp	r1, #0
 800907c:	d000      	beq.n	8009080 <CheckAttachedButtons+0x240>
 800907e:	e735      	b.n	8008eec <CheckAttachedButtons+0xac>
				if (releaseCounter[i] < 0xFFFF)
 8009080:	4640      	mov	r0, r8
 8009082:	2103      	movs	r1, #3
 8009084:	305c      	adds	r0, #92	; 0x5c
 8009086:	9106      	str	r1, [sp, #24]
 8009088:	4e33      	ldr	r6, [pc, #204]	; (8009158 <CheckAttachedButtons+0x318>)
 800908a:	5881      	ldr	r1, [r0, r2]
 800908c:	42b1      	cmp	r1, r6
 800908e:	d800      	bhi.n	8009092 <CheckAttachedButtons+0x252>
 8009090:	e742      	b.n	8008f18 <CheckAttachedButtons+0xd8>
					releaseCounter[i] = 0;		// Reset debounce counter
 8009092:	2100      	movs	r1, #0
 8009094:	5081      	str	r1, [r0, r2]
 8009096:	e741      	b.n	8008f1c <CheckAttachedButtons+0xdc>
				} else if (releaseCounter[i] >= 500
 8009098:	0003      	movs	r3, r0
 800909a:	4a32      	ldr	r2, [pc, #200]	; (8009164 <CheckAttachedButtons+0x324>)
 800909c:	3bf5      	subs	r3, #245	; 0xf5
 800909e:	3bff      	subs	r3, #255	; 0xff
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d8c5      	bhi.n	8009030 <CheckAttachedButtons+0x1f0>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 80090a4:	7961      	ldrb	r1, [r4, #5]
	t1 *= 1000;
 80090a6:	014b      	lsls	r3, r1, #5
 80090a8:	1a5b      	subs	r3, r3, r1
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	185b      	adds	r3, r3, r1
 80090ae:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 80090b0:	4283      	cmp	r3, r0
 80090b2:	d100      	bne.n	80090b6 <CheckAttachedButtons+0x276>
 80090b4:	e12e      	b.n	8009314 <CheckAttachedButtons+0x4d4>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 80090b6:	79a1      	ldrb	r1, [r4, #6]
	t2 *= 1000;
 80090b8:	014b      	lsls	r3, r1, #5
 80090ba:	1a5b      	subs	r3, r3, r1
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	185b      	adds	r3, r3, r1
 80090c0:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 80090c2:	4283      	cmp	r3, r0
 80090c4:	d007      	beq.n	80090d6 <CheckAttachedButtons+0x296>
			t3 = button[port].releasedY3Sec;
 80090c6:	79e1      	ldrb	r1, [r4, #7]
	t3 *= 1000;
 80090c8:	014b      	lsls	r3, r1, #5
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	185b      	adds	r3, r3, r1
 80090d0:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 80090d2:	4283      	cmp	r3, r0
 80090d4:	d1ac      	bne.n	8009030 <CheckAttachedButtons+0x1f0>
		button[port].state = RELEASED_FOR_Y2_SEC;
 80090d6:	230d      	movs	r3, #13
 80090d8:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 80090da:	2324      	movs	r3, #36	; 0x24
 80090dc:	464a      	mov	r2, r9
 80090de:	5cd2      	ldrb	r2, [r2, r3]
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	d1b3      	bne.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 80090e4:	7a22      	ldrb	r2, [r4, #8]
 80090e6:	0652      	lsls	r2, r2, #25
 80090e8:	d5b0      	bpl.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 80090ea:	4649      	mov	r1, r9
 80090ec:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 80090ee:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80090f0:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 80090f2:	2102      	movs	r1, #2
 80090f4:	f7ff fea2 	bl	8008e3c <buttonReleasedForYCallback>
 80090f8:	e7a8      	b.n	800904c <CheckAttachedButtons+0x20c>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 80090fa:	8831      	ldrh	r1, [r6, #0]
 80090fc:	2201      	movs	r2, #1
 80090fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009100:	f007 ff4a 	bl	8010f98 <HAL_GPIO_WritePin>
				Delay_us(10);
 8009104:	200a      	movs	r0, #10
 8009106:	f004 f80b 	bl	800d120 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800910a:	8839      	ldrh	r1, [r7, #0]
 800910c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800910e:	f007 ff3d 	bl	8010f8c <HAL_GPIO_ReadPin>
 8009112:	9005      	str	r0, [sp, #20]
 8009114:	e6ce      	b.n	8008eb4 <CheckAttachedButtons+0x74>
 8009116:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 8009118:	9906      	ldr	r1, [sp, #24]
 800911a:	3340      	adds	r3, #64	; 0x40
 800911c:	00aa      	lsls	r2, r5, #2
 800911e:	589b      	ldr	r3, [r3, r2]
 8009120:	2904      	cmp	r1, #4
 8009122:	d000      	beq.n	8009126 <CheckAttachedButtons+0x2e6>
 8009124:	e6e6      	b.n	8008ef4 <CheckAttachedButtons+0xb4>
				if (pressCounter[i] < 0xFFFF)
 8009126:	490c      	ldr	r1, [pc, #48]	; (8009158 <CheckAttachedButtons+0x318>)
 8009128:	428b      	cmp	r3, r1
 800912a:	d84f      	bhi.n	80091cc <CheckAttachedButtons+0x38c>
					++pressCounter[i];			// Advance the debounce counter
 800912c:	4641      	mov	r1, r8
 800912e:	3301      	adds	r3, #1
 8009130:	3140      	adds	r1, #64	; 0x40
 8009132:	508b      	str	r3, [r1, r2]
 8009134:	4907      	ldr	r1, [pc, #28]	; (8009154 <CheckAttachedButtons+0x314>)
 8009136:	9104      	str	r1, [sp, #16]
 8009138:	e6fe      	b.n	8008f38 <CheckAttachedButtons+0xf8>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800913a:	42b1      	cmp	r1, r6
 800913c:	d94e      	bls.n	80091dc <CheckAttachedButtons+0x39c>
					clicked = 0;
 800913e:	2100      	movs	r1, #0
 8009140:	4648      	mov	r0, r9
 8009142:	262f      	movs	r6, #47	; 0x2f
 8009144:	5581      	strb	r1, [r0, r6]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8009146:	4805      	ldr	r0, [pc, #20]	; (800915c <CheckAttachedButtons+0x31c>)
 8009148:	5429      	strb	r1, [r5, r0]
 800914a:	e6f5      	b.n	8008f38 <CheckAttachedButtons+0xf8>
 800914c:	2000191c 	.word	0x2000191c
 8009150:	2000199c 	.word	0x2000199c
 8009154:	200070a8 	.word	0x200070a8
 8009158:	0000fffe 	.word	0x0000fffe
 800915c:	200019c4 	.word	0x200019c4
 8009160:	fffffe0c 	.word	0xfffffe0c
 8009164:	0000fe0a 	.word	0x0000fe0a
 8009168:	08017b54 	.word	0x08017b54
 800916c:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800916e:	9805      	ldr	r0, [sp, #20]
 8009170:	00aa      	lsls	r2, r5, #2
 8009172:	3140      	adds	r1, #64	; 0x40
 8009174:	588b      	ldr	r3, [r1, r2]
 8009176:	2801      	cmp	r0, #1
 8009178:	d063      	beq.n	8009242 <CheckAttachedButtons+0x402>
				else if (connected == GPIO_PIN_RESET)
 800917a:	9905      	ldr	r1, [sp, #20]
 800917c:	2900      	cmp	r1, #0
 800917e:	d000      	beq.n	8009182 <CheckAttachedButtons+0x342>
 8009180:	e6b4      	b.n	8008eec <CheckAttachedButtons+0xac>
					state = OFF;
 8009182:	2101      	movs	r1, #1
 8009184:	9106      	str	r1, [sp, #24]
 8009186:	e6c0      	b.n	8008f0a <CheckAttachedButtons+0xca>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009188:	2008      	movs	r0, #8
					++releaseCounter[i];
 800918a:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800918c:	7020      	strb	r0, [r4, #0]
					++releaseCounter[i];
 800918e:	365c      	adds	r6, #92	; 0x5c
 8009190:	1c48      	adds	r0, r1, #1
 8009192:	50b0      	str	r0, [r6, r2]
 8009194:	e736      	b.n	8009004 <CheckAttachedButtons+0x1c4>
					if (clicked == 0)
 8009196:	232f      	movs	r3, #47	; 0x2f
 8009198:	4648      	mov	r0, r9
 800919a:	5cc7      	ldrb	r7, [r0, r3]
 800919c:	2f00      	cmp	r7, #0
 800919e:	d100      	bne.n	80091a2 <CheckAttachedButtons+0x362>
 80091a0:	e0e3      	b.n	800936a <CheckAttachedButtons+0x52a>
					else if (clicked == 2) {
 80091a2:	2f02      	cmp	r7, #2
 80091a4:	d000      	beq.n	80091a8 <CheckAttachedButtons+0x368>
 80091a6:	e71d      	b.n	8008fe4 <CheckAttachedButtons+0x1a4>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 80091a8:	4875      	ldr	r0, [pc, #468]	; (8009380 <CheckAttachedButtons+0x540>)
 80091aa:	9e04      	ldr	r6, [sp, #16]
 80091ac:	5c2f      	ldrb	r7, [r5, r0]
 80091ae:	7930      	ldrb	r0, [r6, #4]
 80091b0:	42b8      	cmp	r0, r7
 80091b2:	d300      	bcc.n	80091b6 <CheckAttachedButtons+0x376>
 80091b4:	e716      	b.n	8008fe4 <CheckAttachedButtons+0x1a4>
								&& dblCounter[i]
 80091b6:	7970      	ldrb	r0, [r6, #5]
 80091b8:	42b8      	cmp	r0, r7
 80091ba:	d800      	bhi.n	80091be <CheckAttachedButtons+0x37e>
 80091bc:	e712      	b.n	8008fe4 <CheckAttachedButtons+0x1a4>
							clicked = 3;	// Record a possible double click
 80091be:	4648      	mov	r0, r9
 80091c0:	2703      	movs	r7, #3
 80091c2:	54c7      	strb	r7, [r0, r3]
							dblCounter[i] = 0;	// Reset the inter-click counter
 80091c4:	2300      	movs	r3, #0
 80091c6:	486e      	ldr	r0, [pc, #440]	; (8009380 <CheckAttachedButtons+0x540>)
 80091c8:	542b      	strb	r3, [r5, r0]
 80091ca:	e70b      	b.n	8008fe4 <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 80091cc:	4643      	mov	r3, r8
 80091ce:	2100      	movs	r1, #0
 80091d0:	3340      	adds	r3, #64	; 0x40
 80091d2:	5099      	str	r1, [r3, r2]
 80091d4:	496b      	ldr	r1, [pc, #428]	; (8009384 <CheckAttachedButtons+0x544>)
 80091d6:	2300      	movs	r3, #0
 80091d8:	9104      	str	r1, [sp, #16]
 80091da:	e6ad      	b.n	8008f38 <CheckAttachedButtons+0xf8>
					++dblCounter[i];
 80091dc:	4868      	ldr	r0, [pc, #416]	; (8009380 <CheckAttachedButtons+0x540>)
 80091de:	3101      	adds	r1, #1
 80091e0:	5429      	strb	r1, [r5, r0]
 80091e2:	e6a9      	b.n	8008f38 <CheckAttachedButtons+0xf8>
				if (!delayButtonStateReset
 80091e4:	2324      	movs	r3, #36	; 0x24
 80091e6:	464a      	mov	r2, r9
 80091e8:	5cd2      	ldrb	r2, [r2, r3]
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d000      	beq.n	80091f0 <CheckAttachedButtons+0x3b0>
 80091ee:	e72d      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 80091f0:	7a22      	ldrb	r2, [r4, #8]
 80091f2:	2a7f      	cmp	r2, #127	; 0x7f
 80091f4:	d800      	bhi.n	80091f8 <CheckAttachedButtons+0x3b8>
 80091f6:	e729      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 80091f8:	4649      	mov	r1, r9
 80091fa:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 80091fc:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80091fe:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 8009200:	2103      	movs	r1, #3
 8009202:	f7ff fe1b 	bl	8008e3c <buttonReleasedForYCallback>
 8009206:	e721      	b.n	800904c <CheckAttachedButtons+0x20c>
				if (!delayButtonStateReset
 8009208:	2324      	movs	r3, #36	; 0x24
 800920a:	464a      	mov	r2, r9
 800920c:	5cd2      	ldrb	r2, [r2, r3]
 800920e:	2a00      	cmp	r2, #0
 8009210:	d000      	beq.n	8009214 <CheckAttachedButtons+0x3d4>
 8009212:	e71b      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8009214:	7a22      	ldrb	r2, [r4, #8]
 8009216:	06d2      	lsls	r2, r2, #27
 8009218:	d400      	bmi.n	800921c <CheckAttachedButtons+0x3dc>
 800921a:	e717      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800921c:	4649      	mov	r1, r9
 800921e:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 8009220:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009222:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 8009224:	2103      	movs	r1, #3
 8009226:	f7ff fe07 	bl	8008e38 <buttonPressedForXCallback>
 800922a:	e70f      	b.n	800904c <CheckAttachedButtons+0x20c>
				buttonReleasedCallback(i);
 800922c:	4650      	mov	r0, sl
 800922e:	f7ff fdfd 	bl	8008e2c <buttonReleasedCallback>
				button[i].state = NONE;
 8009232:	2300      	movs	r3, #0
 8009234:	3501      	adds	r5, #1
 8009236:	7023      	strb	r3, [r4, #0]
 8009238:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800923a:	2d07      	cmp	r5, #7
 800923c:	d000      	beq.n	8009240 <CheckAttachedButtons+0x400>
 800923e:	e612      	b.n	8008e66 <CheckAttachedButtons+0x26>
 8009240:	e709      	b.n	8009056 <CheckAttachedButtons+0x216>
				if (pressCounter[i] < 0xFFFF)
 8009242:	4851      	ldr	r0, [pc, #324]	; (8009388 <CheckAttachedButtons+0x548>)
 8009244:	4283      	cmp	r3, r0
 8009246:	d900      	bls.n	800924a <CheckAttachedButtons+0x40a>
 8009248:	e092      	b.n	8009370 <CheckAttachedButtons+0x530>
					state = ON;
 800924a:	2102      	movs	r1, #2
 800924c:	9106      	str	r1, [sp, #24]
					++pressCounter[i];			// Advance the debounce counter
 800924e:	4641      	mov	r1, r8
 8009250:	3301      	adds	r3, #1
 8009252:	3140      	adds	r1, #64	; 0x40
 8009254:	508b      	str	r3, [r1, r2]
 8009256:	494b      	ldr	r1, [pc, #300]	; (8009384 <CheckAttachedButtons+0x544>)
 8009258:	9104      	str	r1, [sp, #16]
 800925a:	e66d      	b.n	8008f38 <CheckAttachedButtons+0xf8>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800925c:	3303      	adds	r3, #3
 800925e:	7023      	strb	r3, [r4, #0]
						clicked = 0;			// Prepare for a single click
 8009260:	4649      	mov	r1, r9
 8009262:	2300      	movs	r3, #0
 8009264:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 8009266:	2324      	movs	r3, #36	; 0x24
 8009268:	464a      	mov	r2, r9
 800926a:	5cd2      	ldrb	r2, [r2, r3]
 800926c:	2a00      	cmp	r2, #0
 800926e:	d000      	beq.n	8009272 <CheckAttachedButtons+0x432>
 8009270:	e6ec      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 8009272:	7a22      	ldrb	r2, [r4, #8]
 8009274:	0792      	lsls	r2, r2, #30
 8009276:	d400      	bmi.n	800927a <CheckAttachedButtons+0x43a>
 8009278:	e6e8      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800927a:	2201      	movs	r2, #1
 800927c:	4649      	mov	r1, r9
					buttonDblClickedCallback(i);
 800927e:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009280:	54ca      	strb	r2, [r1, r3]
					buttonDblClickedCallback(i);
 8009282:	f7ff fdd7 	bl	8008e34 <buttonDblClickedCallback>
 8009286:	e6e1      	b.n	800904c <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X1_SEC;
 8009288:	2009      	movs	r0, #9
 800928a:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800928c:	9803      	ldr	r0, [sp, #12]
 800928e:	4281      	cmp	r1, r0
 8009290:	d800      	bhi.n	8009294 <CheckAttachedButtons+0x454>
 8009292:	e6b0      	b.n	8008ff6 <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 8009294:	2324      	movs	r3, #36	; 0x24
 8009296:	464a      	mov	r2, r9
 8009298:	5cd2      	ldrb	r2, [r2, r3]
 800929a:	2a00      	cmp	r2, #0
 800929c:	d000      	beq.n	80092a0 <CheckAttachedButtons+0x460>
 800929e:	e6d5      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 80092a0:	7a22      	ldrb	r2, [r4, #8]
 80092a2:	0752      	lsls	r2, r2, #29
 80092a4:	d400      	bmi.n	80092a8 <CheckAttachedButtons+0x468>
 80092a6:	e6d1      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 80092a8:	4649      	mov	r1, r9
 80092aa:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 80092ac:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80092ae:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 80092b0:	2101      	movs	r1, #1
 80092b2:	f7ff fdc1 	bl	8008e38 <buttonPressedForXCallback>
 80092b6:	e6c9      	b.n	800904c <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X2_SEC;
 80092b8:	200a      	movs	r0, #10
 80092ba:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 80092bc:	9803      	ldr	r0, [sp, #12]
 80092be:	4281      	cmp	r1, r0
 80092c0:	d800      	bhi.n	80092c4 <CheckAttachedButtons+0x484>
 80092c2:	e698      	b.n	8008ff6 <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 80092c4:	2324      	movs	r3, #36	; 0x24
 80092c6:	464a      	mov	r2, r9
 80092c8:	5cd2      	ldrb	r2, [r2, r3]
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	d000      	beq.n	80092d0 <CheckAttachedButtons+0x490>
 80092ce:	e6bd      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 80092d0:	7a22      	ldrb	r2, [r4, #8]
 80092d2:	0712      	lsls	r2, r2, #28
 80092d4:	d400      	bmi.n	80092d8 <CheckAttachedButtons+0x498>
 80092d6:	e6b9      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 80092d8:	4649      	mov	r1, r9
 80092da:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 80092dc:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80092de:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 80092e0:	2102      	movs	r1, #2
 80092e2:	f7ff fda9 	bl	8008e38 <buttonPressedForXCallback>
 80092e6:	e6b1      	b.n	800904c <CheckAttachedButtons+0x20c>
						clicked = 2;			// Prepare for a double click
 80092e8:	4649      	mov	r1, r9
						button[i].state = CLICKED;// Record a single button click event
 80092ea:	3304      	adds	r3, #4
 80092ec:	7023      	strb	r3, [r4, #0]
						clicked = 2;			// Prepare for a double click
 80092ee:	3b03      	subs	r3, #3
 80092f0:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 80092f2:	2324      	movs	r3, #36	; 0x24
 80092f4:	464a      	mov	r2, r9
 80092f6:	5cd2      	ldrb	r2, [r2, r3]
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	d000      	beq.n	80092fe <CheckAttachedButtons+0x4be>
 80092fc:	e6a6      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 80092fe:	7a21      	ldrb	r1, [r4, #8]
 8009300:	3201      	adds	r2, #1
 8009302:	420a      	tst	r2, r1
 8009304:	d100      	bne.n	8009308 <CheckAttachedButtons+0x4c8>
 8009306:	e6a1      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009308:	4649      	mov	r1, r9
					buttonClickedCallback(i);
 800930a:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800930c:	54ca      	strb	r2, [r1, r3]
					buttonClickedCallback(i);
 800930e:	f7ff fd8f 	bl	8008e30 <buttonClickedCallback>
 8009312:	e69b      	b.n	800904c <CheckAttachedButtons+0x20c>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8009314:	230c      	movs	r3, #12
 8009316:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 8009318:	2324      	movs	r3, #36	; 0x24
 800931a:	464a      	mov	r2, r9
 800931c:	5cd2      	ldrb	r2, [r2, r3]
 800931e:	2a00      	cmp	r2, #0
 8009320:	d000      	beq.n	8009324 <CheckAttachedButtons+0x4e4>
 8009322:	e693      	b.n	800904c <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 8009324:	7a22      	ldrb	r2, [r4, #8]
 8009326:	0692      	lsls	r2, r2, #26
 8009328:	d400      	bmi.n	800932c <CheckAttachedButtons+0x4ec>
 800932a:	e68f      	b.n	800904c <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800932c:	4649      	mov	r1, r9
 800932e:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 8009330:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009332:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 8009334:	2101      	movs	r1, #1
 8009336:	f7ff fd81 	bl	8008e3c <buttonReleasedForYCallback>
 800933a:	e687      	b.n	800904c <CheckAttachedButtons+0x20c>
				if (pressCounter[i] < 0xFFFF)
 800933c:	4812      	ldr	r0, [pc, #72]	; (8009388 <CheckAttachedButtons+0x548>)
 800933e:	4283      	cmp	r3, r0
 8009340:	d806      	bhi.n	8009350 <CheckAttachedButtons+0x510>
					++pressCounter[i];			// Advance the debounce counter
 8009342:	3301      	adds	r3, #1
					pressCounter[i] = 0;			// Reset debounce counter
 8009344:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 8009346:	2104      	movs	r1, #4
 8009348:	9106      	str	r1, [sp, #24]
 800934a:	490e      	ldr	r1, [pc, #56]	; (8009384 <CheckAttachedButtons+0x544>)
 800934c:	9104      	str	r1, [sp, #16]
 800934e:	e5f3      	b.n	8008f38 <CheckAttachedButtons+0xf8>
					pressCounter[i] = 0;			// Reset debounce counter
 8009350:	2300      	movs	r3, #0
 8009352:	e7f7      	b.n	8009344 <CheckAttachedButtons+0x504>
				if (pressCounter[i] < 0xFFFF)
 8009354:	480c      	ldr	r0, [pc, #48]	; (8009388 <CheckAttachedButtons+0x548>)
 8009356:	4283      	cmp	r3, r0
 8009358:	d800      	bhi.n	800935c <CheckAttachedButtons+0x51c>
 800935a:	e776      	b.n	800924a <CheckAttachedButtons+0x40a>
					pressCounter[i] = 0;			// Reset debounce counter
 800935c:	508e      	str	r6, [r1, r2]
					state = ON;
 800935e:	2102      	movs	r1, #2
 8009360:	9106      	str	r1, [sp, #24]
 8009362:	4908      	ldr	r1, [pc, #32]	; (8009384 <CheckAttachedButtons+0x544>)
					pressCounter[i] = 0;			// Reset debounce counter
 8009364:	2300      	movs	r3, #0
 8009366:	9104      	str	r1, [sp, #16]
 8009368:	e5e6      	b.n	8008f38 <CheckAttachedButtons+0xf8>
						clicked = 1;		// Record a possible single click
 800936a:	3701      	adds	r7, #1
 800936c:	54c7      	strb	r7, [r0, r3]
 800936e:	e639      	b.n	8008fe4 <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 8009370:	2300      	movs	r3, #0
 8009372:	508b      	str	r3, [r1, r2]
 8009374:	2102      	movs	r1, #2
 8009376:	9106      	str	r1, [sp, #24]
 8009378:	4902      	ldr	r1, [pc, #8]	; (8009384 <CheckAttachedButtons+0x544>)
 800937a:	9104      	str	r1, [sp, #16]
 800937c:	e5dc      	b.n	8008f38 <CheckAttachedButtons+0xf8>
 800937e:	46c0      	nop			; (mov r8, r8)
 8009380:	200019c4 	.word	0x200019c4
 8009384:	200070a8 	.word	0x200070a8
 8009388:	0000fffe 	.word	0x0000fffe

0800938c <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 800938c:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800938e:	f005 ffaf 	bl	800f2f0 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8009392:	b2c4      	uxtb	r4, r0
 8009394:	0020      	movs	r0, r4
 8009396:	f7fe f909 	bl	80075ac <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800939a:	0020      	movs	r0, r4
 800939c:	f7fe f932 	bl	8007604 <SwitchStreamDMAToMsg>
}
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)

080093a4 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80093a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a6:	46ce      	mov	lr, r9
 80093a8:	4647      	mov	r7, r8
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b085      	sub	sp, #20
 80093ae:	0015      	movs	r5, r2
 80093b0:	466a      	mov	r2, sp
 80093b2:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80093b4:	aa0c      	add	r2, sp, #48	; 0x30
 80093b6:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80093b8:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d06b      	beq.n	8009496 <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d051      	beq.n	8009466 <SetupDMAStreams+0xc2>
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	d04f      	beq.n	8009466 <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d06a      	beq.n	80094a0 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 80093ca:	2801      	cmp	r0, #1
 80093cc:	d052      	beq.n	8009474 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 80093ce:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80093d0:	2802      	cmp	r0, #2
 80093d2:	d149      	bne.n	8009468 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80093d4:	0018      	movs	r0, r3
 80093d6:	f004 f8fd 	bl	800d5d4 <GetUart>
 80093da:	ab0c      	add	r3, sp, #48	; 0x30
 80093dc:	0004      	movs	r4, r0
 80093de:	7818      	ldrb	r0, [r3, #0]
 80093e0:	f004 f8f8 	bl	800d5d4 <GetUart>
 80093e4:	2201      	movs	r2, #1
 80093e6:	0001      	movs	r1, r0
 80093e8:	0020      	movs	r0, r4
 80093ea:	f7fe f945 	bl	8007678 <StartDMAstream>
 80093ee:	2817      	cmp	r0, #23
 80093f0:	d04f      	beq.n	8009492 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80093f2:	21fa      	movs	r1, #250	; 0xfa
 80093f4:	0168      	lsls	r0, r5, #5
 80093f6:	1b40      	subs	r0, r0, r5
 80093f8:	0080      	lsls	r0, r0, #2
 80093fa:	1940      	adds	r0, r0, r5
 80093fc:	0089      	lsls	r1, r1, #2
 80093fe:	00c0      	lsls	r0, r0, #3
 8009400:	f7f6 fea6 	bl	8000150 <__udivsi3>
 8009404:	4b49      	ldr	r3, [pc, #292]	; (800952c <SetupDMAStreams+0x188>)
 8009406:	4d4a      	ldr	r5, [pc, #296]	; (8009530 <SetupDMAStreams+0x18c>)
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	4698      	mov	r8, r3
 800940c:	230f      	movs	r3, #15
 800940e:	0001      	movs	r1, r0
 8009410:	2200      	movs	r2, #0
 8009412:	446b      	add	r3, sp
 8009414:	0007      	movs	r7, r0
 8009416:	0028      	movs	r0, r5
 8009418:	f005 fe12 	bl	800f040 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800941c:	466b      	mov	r3, sp
 800941e:	7bdb      	ldrb	r3, [r3, #15]
 8009420:	4c44      	ldr	r4, [pc, #272]	; (8009534 <SetupDMAStreams+0x190>)
 8009422:	3b01      	subs	r3, #1
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009428:	ab0c      	add	r3, sp, #48	; 0x30
 800942a:	7818      	ldrb	r0, [r3, #0]
 800942c:	f004 f8d2 	bl	800d5d4 <GetUart>
 8009430:	466b      	mov	r3, sp
 8009432:	4681      	mov	r9, r0
 8009434:	7bd8      	ldrb	r0, [r3, #15]
 8009436:	f004 f8cd 	bl	800d5d4 <GetUart>
 800943a:	2201      	movs	r2, #1
 800943c:	0001      	movs	r1, r0
 800943e:	4648      	mov	r0, r9
 8009440:	f7fe f91a 	bl	8007678 <StartDMAstream>
 8009444:	2817      	cmp	r0, #23
 8009446:	d024      	beq.n	8009492 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009448:	4643      	mov	r3, r8
 800944a:	0028      	movs	r0, r5
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	ab0c      	add	r3, sp, #48	; 0x30
 8009452:	0039      	movs	r1, r7
 8009454:	f005 fdf4 	bl	800f040 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8009458:	ab0c      	add	r3, sp, #48	; 0x30
 800945a:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800945c:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 800945e:	3b01      	subs	r3, #1
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	511e      	str	r6, [r3, r4]
 8009464:	e044      	b.n	80094f0 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8009466:	2467      	movs	r4, #103	; 0x67
}
 8009468:	0020      	movs	r0, r4
 800946a:	b005      	add	sp, #20
 800946c:	bc0c      	pop	{r2, r3}
 800946e:	4690      	mov	r8, r2
 8009470:	4699      	mov	r9, r3
 8009472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009474:	0010      	movs	r0, r2
 8009476:	f004 f8ad 	bl	800d5d4 <GetUart>
 800947a:	466b      	mov	r3, sp
 800947c:	0004      	movs	r4, r0
 800947e:	7bd8      	ldrb	r0, [r3, #15]
 8009480:	f004 f8a8 	bl	800d5d4 <GetUart>
 8009484:	2201      	movs	r2, #1
 8009486:	0001      	movs	r1, r0
 8009488:	0020      	movs	r0, r4
 800948a:	f7fe f8f5 	bl	8007678 <StartDMAstream>
 800948e:	2817      	cmp	r0, #23
 8009490:	d13d      	bne.n	800950e <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8009492:	2417      	movs	r4, #23
 8009494:	e7e8      	b.n	8009468 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8009496:	2102      	movs	r1, #2
 8009498:	4a27      	ldr	r2, [pc, #156]	; (8009538 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 800949a:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 800949c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800949e:	e7e3      	b.n	8009468 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80094a0:	0018      	movs	r0, r3
 80094a2:	f004 f897 	bl	800d5d4 <GetUart>
 80094a6:	ab0c      	add	r3, sp, #48	; 0x30
 80094a8:	0004      	movs	r4, r0
 80094aa:	7818      	ldrb	r0, [r3, #0]
 80094ac:	f004 f892 	bl	800d5d4 <GetUart>
 80094b0:	2201      	movs	r2, #1
 80094b2:	0001      	movs	r1, r0
 80094b4:	0020      	movs	r0, r4
 80094b6:	f7fe f8df 	bl	8007678 <StartDMAstream>
 80094ba:	2817      	cmp	r0, #23
 80094bc:	d0e9      	beq.n	8009492 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80094be:	21fa      	movs	r1, #250	; 0xfa
 80094c0:	0168      	lsls	r0, r5, #5
 80094c2:	1b40      	subs	r0, r0, r5
 80094c4:	0080      	lsls	r0, r0, #2
 80094c6:	1940      	adds	r0, r0, r5
 80094c8:	0089      	lsls	r1, r1, #2
 80094ca:	00c0      	lsls	r0, r0, #3
 80094cc:	f7f6 fe40 	bl	8000150 <__udivsi3>
 80094d0:	4b16      	ldr	r3, [pc, #88]	; (800952c <SetupDMAStreams+0x188>)
 80094d2:	0001      	movs	r1, r0
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	230f      	movs	r3, #15
 80094d8:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094da:	2200      	movs	r2, #0
 80094dc:	4814      	ldr	r0, [pc, #80]	; (8009530 <SetupDMAStreams+0x18c>)
 80094de:	f005 fdaf 	bl	800f040 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80094e2:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094e4:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 80094e6:	7bdb      	ldrb	r3, [r3, #15]
 80094e8:	4a12      	ldr	r2, [pc, #72]	; (8009534 <SetupDMAStreams+0x190>)
 80094ea:	3b01      	subs	r3, #1
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 80094f0:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 80094f2:	2d00      	cmp	r5, #0
 80094f4:	d0b8      	beq.n	8009468 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80094f6:	f005 f8dd 	bl	800e6b4 <xTaskGetTickCount>
 80094fa:	2301      	movs	r3, #1
 80094fc:	425b      	negs	r3, r3
 80094fe:	0002      	movs	r2, r0
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	2101      	movs	r1, #1
 8009504:	2300      	movs	r3, #0
 8009506:	0028      	movs	r0, r5
 8009508:	f005 fdba 	bl	800f080 <xTimerGenericCommand>
 800950c:	e7ac      	b.n	8009468 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800950e:	21fa      	movs	r1, #250	; 0xfa
 8009510:	0168      	lsls	r0, r5, #5
 8009512:	1b40      	subs	r0, r0, r5
 8009514:	0080      	lsls	r0, r0, #2
 8009516:	1940      	adds	r0, r0, r5
 8009518:	0089      	lsls	r1, r1, #2
 800951a:	00c0      	lsls	r0, r0, #3
 800951c:	f7f6 fe18 	bl	8000150 <__udivsi3>
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <SetupDMAStreams+0x188>)
 8009522:	0001      	movs	r1, r0
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	ab0c      	add	r3, sp, #48	; 0x30
 8009528:	e7d7      	b.n	80094da <SetupDMAStreams+0x136>
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	0800938d 	.word	0x0800938d
 8009530:	0801a4dc 	.word	0x0801a4dc
 8009534:	20001314 	.word	0x20001314
 8009538:	20000c2c 	.word	0x20000c2c

0800953c <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 800953c:	b510      	push	{r4, lr}
	switch(port){
 800953e:	2806      	cmp	r0, #6
 8009540:	d80a      	bhi.n	8009558 <NotifyMessagingTask+0x1c>
 8009542:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <NotifyMessagingTask+0x34>)
 8009544:	0080      	lsls	r0, r0, #2
 8009546:	581b      	ldr	r3, [r3, r0]
 8009548:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P6
		case P6:
			xTaskNotifyGive(P6MsgTaskHandle)
 800954a:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <NotifyMessagingTask+0x38>)
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	2202      	movs	r2, #2
 8009550:	2300      	movs	r3, #0
 8009552:	2100      	movs	r1, #0
 8009554:	f005 fcb4 	bl	800eec0 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009558:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 800955a:	4b07      	ldr	r3, [pc, #28]	; (8009578 <NotifyMessagingTask+0x3c>)
 800955c:	e7f6      	b.n	800954c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 800955e:	4b07      	ldr	r3, [pc, #28]	; (800957c <NotifyMessagingTask+0x40>)
 8009560:	e7f4      	b.n	800954c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009562:	4b07      	ldr	r3, [pc, #28]	; (8009580 <NotifyMessagingTask+0x44>)
 8009564:	e7f2      	b.n	800954c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <NotifyMessagingTask+0x48>)
 8009568:	e7f0      	b.n	800954c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P5MsgTaskHandle)
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <NotifyMessagingTask+0x4c>)
 800956c:	e7ee      	b.n	800954c <NotifyMessagingTask+0x10>
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	08017b7c 	.word	0x08017b7c
 8009574:	20001834 	.word	0x20001834
 8009578:	20001820 	.word	0x20001820
 800957c:	20001824 	.word	0x20001824
 8009580:	20001828 	.word	0x20001828
 8009584:	2000182c 	.word	0x2000182c
 8009588:	20001830 	.word	0x20001830

0800958c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	ac06      	add	r4, sp, #24
 8009592:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009594:	0004      	movs	r4, r0
 8009596:	4314      	orrs	r4, r2
 8009598:	d011      	beq.n	80095be <SendMessageFromPort+0x32>
 800959a:	2800      	cmp	r0, #0
 800959c:	d10b      	bne.n	80095b6 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800959e:	1c96      	adds	r6, r2, #2
 80095a0:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 80095a2:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80095a4:	2e01      	cmp	r6, #1
 80095a6:	d803      	bhi.n	80095b0 <SendMessageFromPort+0x24>
 80095a8:	9500      	str	r5, [sp, #0]
 80095aa:	f000 f80b 	bl	80095c4 <SendMessageFromPort.part.0>
 80095ae:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 80095b0:	0020      	movs	r0, r4
 80095b2:	b002      	add	sp, #8
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d0f6      	beq.n	80095a8 <SendMessageFromPort+0x1c>
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	d1f4      	bne.n	80095a8 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 80095be:	2467      	movs	r4, #103	; 0x67
 80095c0:	e7f6      	b.n	80095b0 <SendMessageFromPort+0x24>
 80095c2:	46c0      	nop			; (mov r8, r8)

080095c4 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c6:	46de      	mov	lr, fp
 80095c8:	464e      	mov	r6, r9
 80095ca:	4645      	mov	r5, r8
 80095cc:	4657      	mov	r7, sl
 80095ce:	b5e0      	push	{r5, r6, r7, lr}
 80095d0:	b087      	sub	sp, #28
 80095d2:	0005      	movs	r5, r0
 80095d4:	9003      	str	r0, [sp, #12]
 80095d6:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 80095d8:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80095da:	ab10      	add	r3, sp, #64	; 0x40
 80095dc:	4689      	mov	r9, r1
 80095de:	4690      	mov	r8, r2
 80095e0:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 80095e2:	f004 ffd7 	bl	800e594 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80095e6:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 80095e8:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80095ea:	2000      	movs	r0, #0
 80095ec:	f004 ffe2 	bl	800e5b4 <vTaskPrioritySet>
	message[0] ='H';
 80095f0:	2348      	movs	r3, #72	; 0x48
 80095f2:	4cd2      	ldr	r4, [pc, #840]	; (800993c <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095f4:	464a      	mov	r2, r9
	message[0] ='H';
 80095f6:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 80095f8:	3312      	adds	r3, #18
 80095fa:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095fc:	002b      	movs	r3, r5
 80095fe:	4313      	orrs	r3, r2
 8009600:	d000      	beq.n	8009604 <SendMessageFromPort.part.0+0x40>
 8009602:	e094      	b.n	800972e <SendMessageFromPort.part.0+0x16a>
 8009604:	4643      	mov	r3, r8
 8009606:	1c9f      	adds	r7, r3, #2
 8009608:	b2ff      	uxtb	r7, r7
 800960a:	2f01      	cmp	r7, #1
 800960c:	d800      	bhi.n	8009610 <SendMessageFromPort.part.0+0x4c>
 800960e:	e095      	b.n	800973c <SendMessageFromPort.part.0+0x178>
 8009610:	465b      	mov	r3, fp
 8009612:	2b00      	cmp	r3, #0
 8009614:	d100      	bne.n	8009618 <SendMessageFromPort.part.0+0x54>
 8009616:	e091      	b.n	800973c <SendMessageFromPort.part.0+0x178>
			src =myID;
 8009618:	4bc9      	ldr	r3, [pc, #804]	; (8009940 <SendMessageFromPort.part.0+0x37c>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	4699      	mov	r9, r3
		message[2] =length;
 800961e:	2300      	movs	r3, #0
 8009620:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8009622:	4643      	mov	r3, r8
 8009624:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8009626:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009628:	4ac6      	ldr	r2, [pc, #792]	; (8009944 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 800962a:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 800962c:	7913      	ldrb	r3, [r2, #4]
 800962e:	7851      	ldrb	r1, [r2, #1]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	0089      	lsls	r1, r1, #2
 8009636:	430b      	orrs	r3, r1
 8009638:	4313      	orrs	r3, r2
		if(code > 0xFF)
 800963a:	22ff      	movs	r2, #255	; 0xff
 800963c:	455a      	cmp	r2, fp
 800963e:	4192      	sbcs	r2, r2
 8009640:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009642:	0052      	lsls	r2, r2, #1
 8009644:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8009646:	465a      	mov	r2, fp
 8009648:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 800964a:	2200      	movs	r2, #0
 800964c:	4692      	mov	sl, r2
 800964e:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009650:	b2db      	uxtb	r3, r3
 8009652:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8009654:	2aff      	cmp	r2, #255	; 0xff
 8009656:	d903      	bls.n	8009660 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009658:	0a12      	lsrs	r2, r2, #8
 800965a:	71e2      	strb	r2, [r4, #7]
			++shift;
 800965c:	2201      	movs	r2, #1
 800965e:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009660:	2e2e      	cmp	r6, #46	; 0x2e
 8009662:	d800      	bhi.n	8009666 <SendMessageFromPort.part.0+0xa2>
 8009664:	e157      	b.n	8009916 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8009666:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009668:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 800966a:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 800966c:	4db6      	ldr	r5, [pc, #728]	; (8009948 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 800966e:	4313      	orrs	r3, r2
 8009670:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8009672:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009674:	2e2d      	cmp	r6, #45	; 0x2d
 8009676:	d900      	bls.n	800967a <SendMessageFromPort.part.0+0xb6>
 8009678:	e136      	b.n	80098e8 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800967a:	237f      	movs	r3, #127	; 0x7f
 800967c:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800967e:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009680:	4013      	ands	r3, r2
 8009682:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009684:	4653      	mov	r3, sl
 8009686:	1dd8      	adds	r0, r3, #7
 8009688:	4bb0      	ldr	r3, [pc, #704]	; (800994c <SendMessageFromPort.part.0+0x388>)
 800968a:	1820      	adds	r0, r4, r0
 800968c:	18c9      	adds	r1, r1, r3
 800968e:	0032      	movs	r2, r6
 8009690:	f009 fc99 	bl	8012fc6 <memcpy>
					ptrShift =0;
 8009694:	2300      	movs	r3, #0
 8009696:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8009698:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 800969a:	4653      	mov	r3, sl
 800969c:	1d1d      	adds	r5, r3, #4
 800969e:	19ad      	adds	r5, r5, r6
 80096a0:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 80096a2:	4bab      	ldr	r3, [pc, #684]	; (8009950 <SendMessageFromPort.part.0+0x38c>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d03d      	beq.n	8009726 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 80096aa:	4baa      	ldr	r3, [pc, #680]	; (8009954 <SendMessageFromPort.part.0+0x390>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2bff      	cmp	r3, #255	; 0xff
 80096b0:	d100      	bne.n	80096b4 <SendMessageFromPort.part.0+0xf0>
 80096b2:	e106      	b.n	80098c2 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096b4:	4aa8      	ldr	r2, [pc, #672]	; (8009958 <SendMessageFromPort.part.0+0x394>)
 80096b6:	7817      	ldrb	r7, [r2, #0]
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	d100      	bne.n	80096be <SendMessageFromPort.part.0+0xfa>
 80096bc:	e139      	b.n	8009932 <SendMessageFromPort.part.0+0x36e>
 80096be:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096c0:	0021      	movs	r1, r4
 80096c2:	409a      	lsls	r2, r3
 80096c4:	4451      	add	r1, sl
 80096c6:	4694      	mov	ip, r2
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 80096cc:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096ce:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096d0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096d2:	46ac      	mov	ip, r5
 80096d4:	000d      	movs	r5, r1
 80096d6:	48a1      	ldr	r0, [pc, #644]	; (800995c <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 80096d8:	8801      	ldrh	r1, [r0, #0]
 80096da:	420f      	tst	r7, r1
 80096dc:	d009      	beq.n	80096f2 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 80096de:	3201      	adds	r2, #1
 80096e0:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80096e2:	1991      	adds	r1, r2, r6
 80096e4:	292c      	cmp	r1, #44	; 0x2c
 80096e6:	dd00      	ble.n	80096ea <SendMessageFromPort.part.0+0x126>
 80096e8:	e0fc      	b.n	80098e4 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096ea:	9905      	ldr	r1, [sp, #20]
 80096ec:	1889      	adds	r1, r1, r2
 80096ee:	1989      	adds	r1, r1, r6
 80096f0:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096f2:	3301      	adds	r3, #1
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3002      	adds	r0, #2
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	d9ed      	bls.n	80096d8 <SendMessageFromPort.part.0+0x114>
 80096fc:	4665      	mov	r5, ip
 80096fe:	0010      	movs	r0, r2
 8009700:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8009702:	4653      	mov	r3, sl
 8009704:	3307      	adds	r3, #7
 8009706:	199e      	adds	r6, r3, r6
 8009708:	1836      	adds	r6, r6, r0
 800970a:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 800970c:	292b      	cmp	r1, #43	; 0x2b
 800970e:	dd00      	ble.n	8009712 <SendMessageFromPort.part.0+0x14e>
 8009710:	e0e8      	b.n	80098e4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009712:	4993      	ldr	r1, [pc, #588]	; (8009960 <SendMessageFromPort.part.0+0x39c>)
 8009714:	3502      	adds	r5, #2
 8009716:	780b      	ldrb	r3, [r1, #0]
 8009718:	19a6      	adds	r6, r4, r6
 800971a:	3301      	adds	r3, #1
 800971c:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800971e:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009720:	700b      	strb	r3, [r1, #0]
 8009722:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009724:	b2ed      	uxtb	r5, r5
 8009726:	4647      	mov	r7, r8
 8009728:	3702      	adds	r7, #2
 800972a:	b2ff      	uxtb	r7, r7
 800972c:	e012      	b.n	8009754 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800972e:	465b      	mov	r3, fp
 8009730:	2b00      	cmp	r3, #0
 8009732:	d000      	beq.n	8009736 <SendMessageFromPort.part.0+0x172>
 8009734:	e0af      	b.n	8009896 <SendMessageFromPort.part.0+0x2d2>
 8009736:	4647      	mov	r7, r8
 8009738:	3702      	adds	r7, #2
 800973a:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 800973c:	3e01      	subs	r6, #1
 800973e:	4b89      	ldr	r3, [pc, #548]	; (8009964 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009740:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8009742:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009744:	1b89      	subs	r1, r1, r6
 8009746:	4e88      	ldr	r6, [pc, #544]	; (8009968 <SendMessageFromPort.part.0+0x3a4>)
 8009748:	00c9      	lsls	r1, r1, #3
 800974a:	1989      	adds	r1, r1, r6
 800974c:	002a      	movs	r2, r5
 800974e:	4887      	ldr	r0, [pc, #540]	; (800996c <SendMessageFromPort.part.0+0x3a8>)
 8009750:	f009 fc39 	bl	8012fc6 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8009754:	1ceb      	adds	r3, r5, #3
 8009756:	469a      	mov	sl, r3
 8009758:	4e85      	ldr	r6, [pc, #532]	; (8009970 <SendMessageFromPort.part.0+0x3ac>)
 800975a:	001a      	movs	r2, r3
 800975c:	0021      	movs	r1, r4
 800975e:	0030      	movs	r0, r6
	message[2] =length;
 8009760:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009762:	f009 fc30 	bl	8012fc6 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009766:	b2ab      	uxth	r3, r5
 8009768:	4651      	mov	r1, sl
 800976a:	0030      	movs	r0, r6
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	f003 f8a1 	bl	800c8b4 <CalculateCRC8>
 8009772:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009774:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009776:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009778:	2100      	movs	r1, #0
 800977a:	0030      	movs	r0, r6
 800977c:	f009 fc2c 	bl	8012fd8 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009780:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009782:	2f01      	cmp	r7, #1
 8009784:	d94a      	bls.n	800981c <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009786:	3b2c      	subs	r3, #44	; 0x2c
 8009788:	2b01      	cmp	r3, #1
 800978a:	d800      	bhi.n	800978e <SendMessageFromPort.part.0+0x1ca>
 800978c:	e08d      	b.n	80098aa <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800978e:	4b6d      	ldr	r3, [pc, #436]	; (8009944 <SendMessageFromPort.part.0+0x380>)
 8009790:	4698      	mov	r8, r3
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d100      	bne.n	800979a <SendMessageFromPort.part.0+0x1d6>
 8009798:	e08f      	b.n	80098ba <SendMessageFromPort.part.0+0x2f6>
 800979a:	9e05      	ldr	r6, [sp, #20]
 800979c:	4f75      	ldr	r7, [pc, #468]	; (8009974 <SendMessageFromPort.part.0+0x3b0>)
 800979e:	4b76      	ldr	r3, [pc, #472]	; (8009978 <SendMessageFromPort.part.0+0x3b4>)
 80097a0:	3604      	adds	r6, #4
 80097a2:	46ba      	mov	sl, r7
 80097a4:	b2b6      	uxth	r6, r6
 80097a6:	2500      	movs	r5, #0
 80097a8:	4699      	mov	r9, r3
 80097aa:	9f03      	ldr	r7, [sp, #12]
 80097ac:	e005      	b.n	80097ba <SendMessageFromPort.part.0+0x1f6>
 80097ae:	4643      	mov	r3, r8
 80097b0:	3501      	adds	r5, #1
 80097b2:	88db      	ldrh	r3, [r3, #6]
 80097b4:	b2ed      	uxtb	r5, r5
 80097b6:	42ab      	cmp	r3, r5
 80097b8:	d91c      	bls.n	80097f4 <SendMessageFromPort.part.0+0x230>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097ba:	2332      	movs	r3, #50	; 0x32
 80097bc:	0032      	movs	r2, r6
 80097be:	0021      	movs	r1, r4
 80097c0:	0038      	movs	r0, r7
 80097c2:	f003 fed1 	bl	800d568 <writePxDMAMutex>
				osDelay(200);
 80097c6:	20c8      	movs	r0, #200	; 0xc8
 80097c8:	f003 ffc8 	bl	800d75c <osDelay>
				if(ACK_FLAG == true)
 80097cc:	464b      	mov	r3, r9
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10f      	bne.n	80097f4 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 80097d4:	4653      	mov	r3, sl
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0e8      	beq.n	80097ae <SendMessageFromPort.part.0+0x1ea>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097dc:	2332      	movs	r3, #50	; 0x32
 80097de:	0032      	movs	r2, r6
 80097e0:	0021      	movs	r1, r4
 80097e2:	0038      	movs	r0, r7
 80097e4:	f003 fec0 	bl	800d568 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80097e8:	4643      	mov	r3, r8
 80097ea:	3501      	adds	r5, #1
 80097ec:	88db      	ldrh	r3, [r3, #6]
 80097ee:	b2ed      	uxtb	r5, r5
 80097f0:	42ab      	cmp	r3, r5
 80097f2:	d8e2      	bhi.n	80097ba <SendMessageFromPort.part.0+0x1f6>
 80097f4:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 80097f6:	2300      	movs	r3, #0
 80097f8:	464a      	mov	r2, r9
 80097fa:	703b      	strb	r3, [r7, #0]
 80097fc:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 80097fe:	2000      	movs	r0, #0
 8009800:	9904      	ldr	r1, [sp, #16]
 8009802:	f004 fed7 	bl	800e5b4 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8009806:	2202      	movs	r2, #2
	return result;
 8009808:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 800980a:	4b5c      	ldr	r3, [pc, #368]	; (800997c <SendMessageFromPort.part.0+0x3b8>)
 800980c:	701a      	strb	r2, [r3, #0]
}
 800980e:	b007      	add	sp, #28
 8009810:	bc3c      	pop	{r2, r3, r4, r5}
 8009812:	4690      	mov	r8, r2
 8009814:	4699      	mov	r9, r3
 8009816:	46a2      	mov	sl, r4
 8009818:	46ab      	mov	fp, r5
 800981a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800981c:	2b00      	cmp	r3, #0
 800981e:	d03e      	beq.n	800989e <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8009820:	4648      	mov	r0, r9
 8009822:	f7fa f805 	bl	8003830 <FindBroadcastRoutes>
 8009826:	2300      	movs	r3, #0
 8009828:	4698      	mov	r8, r3
 800982a:	4b45      	ldr	r3, [pc, #276]	; (8009940 <SendMessageFromPort.part.0+0x37c>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800982c:	9e05      	ldr	r6, [sp, #20]
 800982e:	4699      	mov	r9, r3
 8009830:	4b53      	ldr	r3, [pc, #332]	; (8009980 <SendMessageFromPort.part.0+0x3bc>)
 8009832:	3604      	adds	r6, #4
 8009834:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009836:	2301      	movs	r3, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009838:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800983a:	469a      	mov	sl, r3
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800983c:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800983e:	2501      	movs	r5, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009840:	4646      	mov	r6, r8
 8009842:	4f4c      	ldr	r7, [pc, #304]	; (8009974 <SendMessageFromPort.part.0+0x3b0>)
 8009844:	4698      	mov	r8, r3
 8009846:	e009      	b.n	800985c <SendMessageFromPort.part.0+0x298>
			rejected_FLAG=false;
 8009848:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800984a:	3501      	adds	r5, #1
			Delay_us(10);
 800984c:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800984e:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8009850:	703b      	strb	r3, [r7, #0]
 8009852:	3601      	adds	r6, #1
			Delay_us(10);
 8009854:	f003 fc64 	bl	800d120 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009858:	2d07      	cmp	r5, #7
 800985a:	d0d0      	beq.n	80097fe <SendMessageFromPort.part.0+0x23a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800985c:	464b      	mov	r3, r9
 800985e:	465a      	mov	r2, fp
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	3b01      	subs	r3, #1
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	5ad3      	ldrh	r3, [r2, r3]
 8009868:	4652      	mov	r2, sl
 800986a:	4133      	asrs	r3, r6
 800986c:	421a      	tst	r2, r3
 800986e:	d0eb      	beq.n	8009848 <SendMessageFromPort.part.0+0x284>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009870:	2332      	movs	r3, #50	; 0x32
 8009872:	4642      	mov	r2, r8
 8009874:	0021      	movs	r1, r4
 8009876:	0028      	movs	r0, r5
 8009878:	f003 fe76 	bl	800d568 <writePxDMAMutex>
				osDelay(200);
 800987c:	20c8      	movs	r0, #200	; 0xc8
 800987e:	f003 ff6d 	bl	800d75c <osDelay>
				if(rejected_FLAG == true)
 8009882:	783b      	ldrb	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0df      	beq.n	8009848 <SendMessageFromPort.part.0+0x284>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009888:	2332      	movs	r3, #50	; 0x32
 800988a:	4642      	mov	r2, r8
 800988c:	0021      	movs	r1, r4
 800988e:	9803      	ldr	r0, [sp, #12]
 8009890:	f003 fe6a 	bl	800d568 <writePxDMAMutex>
 8009894:	e7d8      	b.n	8009848 <SendMessageFromPort.part.0+0x284>
		if(src == 0)
 8009896:	2a00      	cmp	r2, #0
 8009898:	d000      	beq.n	800989c <SendMessageFromPort.part.0+0x2d8>
 800989a:	e6c0      	b.n	800961e <SendMessageFromPort.part.0+0x5a>
 800989c:	e6bc      	b.n	8009618 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800989e:	464b      	mov	r3, r9
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1bd      	bne.n	8009820 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 80098a4:	7923      	ldrb	r3, [r4, #4]
 80098a6:	4699      	mov	r9, r3
 80098a8:	e7ba      	b.n	8009820 <SendMessageFromPort.part.0+0x25c>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 80098aa:	9a05      	ldr	r2, [sp, #20]
 80098ac:	2332      	movs	r3, #50	; 0x32
 80098ae:	3204      	adds	r2, #4
 80098b0:	b292      	uxth	r2, r2
 80098b2:	0021      	movs	r1, r4
 80098b4:	9803      	ldr	r0, [sp, #12]
 80098b6:	f003 fe57 	bl	800d568 <writePxDMAMutex>
 80098ba:	4b2f      	ldr	r3, [pc, #188]	; (8009978 <SendMessageFromPort.part.0+0x3b4>)
 80098bc:	4f2d      	ldr	r7, [pc, #180]	; (8009974 <SendMessageFromPort.part.0+0x3b0>)
 80098be:	4699      	mov	r9, r3
 80098c0:	e799      	b.n	80097f6 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80098c2:	2e2c      	cmp	r6, #44	; 0x2c
 80098c4:	d80e      	bhi.n	80098e4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 80098c6:	4a26      	ldr	r2, [pc, #152]	; (8009960 <SendMessageFromPort.part.0+0x39c>)
 80098c8:	4647      	mov	r7, r8
 80098ca:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80098cc:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 80098ce:	3301      	adds	r3, #1
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	7013      	strb	r3, [r2, #0]
 80098d4:	4652      	mov	r2, sl
 80098d6:	18a2      	adds	r2, r4, r2
 80098d8:	1996      	adds	r6, r2, r6
 80098da:	3702      	adds	r7, #2
 80098dc:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 80098de:	b2ed      	uxtb	r5, r5
 80098e0:	b2ff      	uxtb	r7, r7
 80098e2:	e737      	b.n	8009754 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80098e4:	2069      	movs	r0, #105	; 0x69
 80098e6:	e792      	b.n	800980e <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80098e8:	465b      	mov	r3, fp
 80098ea:	4642      	mov	r2, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	9700      	str	r7, [sp, #0]
 80098f0:	9803      	ldr	r0, [sp, #12]
 80098f2:	f7ff fe4b 	bl	800958c <SendMessageFromPort>
					osDelay(10);
 80098f6:	200a      	movs	r0, #10
 80098f8:	f003 ff30 	bl	800d75c <osDelay>
					totalNumberOfParams -=numberOfParams;
 80098fc:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 80098fe:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8009900:	3e2e      	subs	r6, #46	; 0x2e
 8009902:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8009904:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8009906:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8009908:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 800990a:	2e00      	cmp	r6, #0
 800990c:	d000      	beq.n	8009910 <SendMessageFromPort.part.0+0x34c>
 800990e:	e6b1      	b.n	8009674 <SendMessageFromPort.part.0+0xb0>
 8009910:	2500      	movs	r5, #0
 8009912:	362e      	adds	r6, #46	; 0x2e
 8009914:	e6c5      	b.n	80096a2 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009916:	4653      	mov	r3, sl
 8009918:	1dd8      	adds	r0, r3, #7
 800991a:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 800991c:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800991e:	8819      	ldrh	r1, [r3, #0]
 8009920:	4b0a      	ldr	r3, [pc, #40]	; (800994c <SendMessageFromPort.part.0+0x388>)
 8009922:	1820      	adds	r0, r4, r0
 8009924:	18c9      	adds	r1, r1, r3
 8009926:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8009928:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800992a:	f009 fb4c 	bl	8012fc6 <memcpy>
			length =numberOfParams + shift + 4;
 800992e:	b2ed      	uxtb	r5, r5
 8009930:	e6b7      	b.n	80096a2 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009932:	0031      	movs	r1, r6
 8009934:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8009936:	2200      	movs	r2, #0
 8009938:	e6e3      	b.n	8009702 <SendMessageFromPort.part.0+0x13e>
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	20000c58 	.word	0x20000c58
 8009940:	20000a98 	.word	0x20000a98
 8009944:	20007028 	.word	0x20007028
 8009948:	200019d0 	.word	0x200019d0
 800994c:	20000b3c 	.word	0x20000b3c
 8009950:	20001148 	.word	0x20001148
 8009954:	20000050 	.word	0x20000050
 8009958:	20000008 	.word	0x20000008
 800995c:	20000a9c 	.word	0x20000a9c
 8009960:	20000c48 	.word	0x20000c48
 8009964:	20000c50 	.word	0x20000c50
 8009968:	20000c90 	.word	0x20000c90
 800996c:	20000c5b 	.word	0x20000c5b
 8009970:	20001354 	.word	0x20001354
 8009974:	2000117c 	.word	0x2000117c
 8009978:	2000117d 	.word	0x2000117d
 800997c:	20000c3c 	.word	0x20000c3c
 8009980:	20000b6c 	.word	0x20000b6c

08009984 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8009984:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009986:	b500      	push	{lr}
	AddBcastPayload = false;
 8009988:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800998a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800998c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800998e:	4b0b      	ldr	r3, [pc, #44]	; (80099bc <BroadcastReceivedMessage+0x38>)
 8009990:	b289      	uxth	r1, r1
 8009992:	7018      	strb	r0, [r3, #0]
 8009994:	9100      	str	r1, [sp, #0]
 8009996:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8009998:	28ff      	cmp	r0, #255	; 0xff
 800999a:	d007      	beq.n	80099ac <BroadcastReceivedMessage+0x28>
 800999c:	22fe      	movs	r2, #254	; 0xfe
 800999e:	2100      	movs	r1, #0
 80099a0:	2000      	movs	r0, #0
 80099a2:	f7ff fe0f 	bl	80095c4 <SendMessageFromPort.part.0>
}
 80099a6:	2000      	movs	r0, #0
 80099a8:	b003      	add	sp, #12
 80099aa:	bd00      	pop	{pc}
 80099ac:	32ff      	adds	r2, #255	; 0xff
 80099ae:	2100      	movs	r1, #0
 80099b0:	2000      	movs	r0, #0
 80099b2:	f7ff fe07 	bl	80095c4 <SendMessageFromPort.part.0>
 80099b6:	e7f6      	b.n	80099a6 <BroadcastReceivedMessage+0x22>
 80099b8:	20001148 	.word	0x20001148
 80099bc:	20000050 	.word	0x20000050

080099c0 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80099c0:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80099c2:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80099c4:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80099c6:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80099c8:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80099ca:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80099cc:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <BroadcastMessage+0x44>)
 80099ce:	7019      	strb	r1, [r3, #0]
 80099d0:	9400      	str	r4, [sp, #0]
 80099d2:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80099d4:	29ff      	cmp	r1, #255	; 0xff
 80099d6:	d00c      	beq.n	80099f2 <BroadcastMessage+0x32>
 80099d8:	0001      	movs	r1, r0
 80099da:	22fe      	movs	r2, #254	; 0xfe
 80099dc:	2000      	movs	r0, #0
 80099de:	f7ff fdf1 	bl	80095c4 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80099e2:	0022      	movs	r2, r4
 80099e4:	2100      	movs	r1, #0
 80099e6:	4808      	ldr	r0, [pc, #32]	; (8009a08 <BroadcastMessage+0x48>)
 80099e8:	f009 faf6 	bl	8012fd8 <memset>
}
 80099ec:	2000      	movs	r0, #0
 80099ee:	b003      	add	sp, #12
 80099f0:	bd30      	pop	{r4, r5, pc}
 80099f2:	0001      	movs	r1, r0
 80099f4:	22ff      	movs	r2, #255	; 0xff
 80099f6:	2000      	movs	r0, #0
 80099f8:	f7ff fde4 	bl	80095c4 <SendMessageFromPort.part.0>
 80099fc:	e7f1      	b.n	80099e2 <BroadcastMessage+0x22>
 80099fe:	46c0      	nop			; (mov r8, r8)
 8009a00:	20001148 	.word	0x20001148
 8009a04:	20000050 	.word	0x20000050
 8009a08:	20000b3c 	.word	0x20000b3c

08009a0c <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8009a0c:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a0e:	b530      	push	{r4, r5, lr}
 8009a10:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a14:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009a16:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009a18:	1e42      	subs	r2, r0, #1
 8009a1a:	00d3      	lsls	r3, r2, #3
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	4a09      	ldr	r2, [pc, #36]	; (8009a44 <ForwardReceivedMessage+0x38>)
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009a24:	4b08      	ldr	r3, [pc, #32]	; (8009a48 <ForwardReceivedMessage+0x3c>)
 8009a26:	0021      	movs	r1, r4
 8009a28:	7818      	ldrb	r0, [r3, #0]
 8009a2a:	f7f9 ffa9 	bl	8003980 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009a2e:	9500      	str	r5, [sp, #0]
 8009a30:	2300      	movs	r3, #0
 8009a32:	0022      	movs	r2, r4
 8009a34:	2100      	movs	r1, #0
 8009a36:	f7ff fda9 	bl	800958c <SendMessageFromPort>
}
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	b003      	add	sp, #12
 8009a3e:	bd30      	pop	{r4, r5, pc}
 8009a40:	20001148 	.word	0x20001148
 8009a44:	20000c90 	.word	0x20000c90
 8009a48:	20000a98 	.word	0x20000a98

08009a4c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	4d0f      	ldr	r5, [pc, #60]	; (8009a8c <SendMessageToModule+0x40>)
 8009a50:	0004      	movs	r4, r0
 8009a52:	b083      	sub	sp, #12
 8009a54:	000f      	movs	r7, r1
 8009a56:	0016      	movs	r6, r2
 8009a58:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8009a5a:	2cff      	cmp	r4, #255	; 0xff
 8009a5c:	d010      	beq.n	8009a80 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009a5e:	0021      	movs	r1, r4
 8009a60:	f7f9 ff8e 	bl	8003980 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009a64:	7829      	ldrb	r1, [r5, #0]
 8009a66:	0022      	movs	r2, r4
 8009a68:	9600      	str	r6, [sp, #0]
 8009a6a:	003b      	movs	r3, r7
 8009a6c:	f7ff fd8e 	bl	800958c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009a70:	0032      	movs	r2, r6
 8009a72:	2100      	movs	r1, #0
 8009a74:	4806      	ldr	r0, [pc, #24]	; (8009a90 <SendMessageToModule+0x44>)
 8009a76:	f009 faaf 	bl	8012fd8 <memset>
}
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	b003      	add	sp, #12
 8009a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009a80:	0013      	movs	r3, r2
 8009a82:	000a      	movs	r2, r1
 8009a84:	21ff      	movs	r1, #255	; 0xff
 8009a86:	f7ff ff9b 	bl	80099c0 <BroadcastMessage>
 8009a8a:	e7f6      	b.n	8009a7a <SendMessageToModule+0x2e>
 8009a8c:	20000a98 	.word	0x20000a98
 8009a90:	20000b3c 	.word	0x20000b3c

08009a94 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a96:	4657      	mov	r7, sl
 8009a98:	46de      	mov	lr, fp
 8009a9a:	464e      	mov	r6, r9
 8009a9c:	4645      	mov	r5, r8
 8009a9e:	b5e0      	push	{r5, r6, r7, lr}
 8009aa0:	b08f      	sub	sp, #60	; 0x3c
 8009aa2:	001e      	movs	r6, r3
 8009aa4:	ab18      	add	r3, sp, #96	; 0x60
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4693      	mov	fp, r2
 8009aaa:	469a      	mov	sl, r3
 8009aac:	ab1b      	add	r3, sp, #108	; 0x6c
 8009aae:	781a      	ldrb	r2, [r3, #0]
 8009ab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ab2:	000f      	movs	r7, r1
 8009ab4:	0e19      	lsrs	r1, r3, #24
 8009ab6:	0c1b      	lsrs	r3, r3, #16
 8009ab8:	b2dc      	uxtb	r4, r3
 8009aba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009abc:	4684      	mov	ip, r0
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	b2dd      	uxtb	r5, r3
 8009ac2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ac4:	900d      	str	r0, [sp, #52]	; 0x34
 8009ac6:	0e1b      	lsrs	r3, r3, #24
 8009ac8:	0018      	movs	r0, r3
 8009aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009acc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ace:	9206      	str	r2, [sp, #24]
 8009ad0:	0c1b      	lsrs	r3, r3, #16
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	9307      	str	r3, [sp, #28]
 8009ad6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ad8:	9109      	str	r1, [sp, #36]	; 0x24
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009ae0:	4b47      	ldr	r3, [pc, #284]	; (8009c00 <StartScastDMAStream+0x16c>)
 8009ae2:	940a      	str	r4, [sp, #40]	; 0x28
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	950c      	str	r5, [sp, #48]	; 0x30
 8009ae8:	42bb      	cmp	r3, r7
 8009aea:	d16d      	bne.n	8009bc8 <StartScastDMAStream+0x134>
 8009aec:	231a      	movs	r3, #26
 8009aee:	4698      	mov	r8, r3
 8009af0:	4d44      	ldr	r5, [pc, #272]	; (8009c04 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009af2:	4c45      	ldr	r4, [pc, #276]	; (8009c08 <StartScastDMAStream+0x174>)
 8009af4:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 8009af6:	0031      	movs	r1, r6
 8009af8:	0038      	movs	r0, r7
 8009afa:	f7f9 ff41 	bl	8003980 <FindRoute>
		if(route[i]){
 8009afe:	7868      	ldrb	r0, [r5, #1]
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d035      	beq.n	8009b70 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8009b04:	78a9      	ldrb	r1, [r5, #2]
 8009b06:	2900      	cmp	r1, #0
 8009b08:	d100      	bne.n	8009b0c <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8009b0a:	0039      	movs	r1, r7
 8009b0c:	f7f9 ff38 	bl	8003980 <FindRoute>
			FindRoute(srcM,dstM);
 8009b10:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8009b12:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009b14:	0038      	movs	r0, r7
 8009b16:	f7f9 ff33 	bl	8003980 <FindRoute>
			if(route[i] == dstM){
 8009b1a:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8009b1c:	465b      	mov	r3, fp
			if(route[i] == dstM){
 8009b1e:	42b0      	cmp	r0, r6
 8009b20:	d003      	beq.n	8009b2a <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009b22:	7829      	ldrb	r1, [r5, #0]
 8009b24:	f7f9 ff2c 	bl	8003980 <FindRoute>
 8009b28:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8009b2c:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b2e:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8009b32:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b34:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8009b38:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8009b3a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009b3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8009b3e:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8009b40:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8009b44:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b46:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009b4c:	9a08      	ldr	r2, [sp, #32]
 8009b4e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009b50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b52:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009b54:	4652      	mov	r2, sl
 8009b56:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009b58:	464a      	mov	r2, r9
 8009b5a:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8009b5c:	f7f9 ff10 	bl	8003980 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009b60:	7868      	ldrb	r0, [r5, #1]
 8009b62:	220c      	movs	r2, #12
 8009b64:	211b      	movs	r1, #27
 8009b66:	f7ff ff71 	bl	8009a4c <SendMessageToModule>
			osDelay(10);
 8009b6a:	200a      	movs	r0, #10
 8009b6c:	f003 fdf6 	bl	800d75c <osDelay>
 8009b70:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009b72:	4545      	cmp	r5, r8
 8009b74:	d1bf      	bne.n	8009af6 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8009b76:	42b7      	cmp	r7, r6
 8009b78:	d112      	bne.n	8009ba0 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b84:	4650      	mov	r0, sl
 8009b86:	f7ff fc0d 	bl	80093a4 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10d      	bne.n	8009bac <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009b90:	2000      	movs	r0, #0
 8009b92:	b00f      	add	sp, #60	; 0x3c
 8009b94:	bc3c      	pop	{r2, r3, r4, r5}
 8009b96:	4690      	mov	r8, r2
 8009b98:	4699      	mov	r9, r3
 8009b9a:	46a2      	mov	sl, r4
 8009b9c:	46ab      	mov	fp, r5
 8009b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009ba0:	0031      	movs	r1, r6
 8009ba2:	0038      	movs	r0, r7
 8009ba4:	f7f9 feec 	bl	8003980 <FindRoute>
 8009ba8:	4683      	mov	fp, r0
 8009baa:	e7e6      	b.n	8009b7a <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009bac:	2300      	movs	r3, #0
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	9302      	str	r3, [sp, #8]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	f7f9 fc8d 	bl	80034e0 <SaveEEstreams>
 8009bc6:	e7e3      	b.n	8009b90 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009bc8:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <StartScastDMAStream+0x174>)
 8009bca:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009bcc:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 8009bce:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009bd0:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009bd2:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 8009bd4:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009bd6:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009bd8:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009bda:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 8009bdc:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009bde:	4651      	mov	r1, sl
 8009be0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009be2:	4661      	mov	r1, ip
 8009be4:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 8009be6:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 8009be8:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 8009bea:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009bec:	220d      	movs	r2, #13
 8009bee:	211c      	movs	r1, #28
 8009bf0:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 8009bf2:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009bf4:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 8009bf6:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009bf8:	f7ff ff28 	bl	8009a4c <SendMessageToModule>
		return result;
 8009bfc:	e7c8      	b.n	8009b90 <StartScastDMAStream+0xfc>
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	20000a98 	.word	0x20000a98
 8009c04:	200071bb 	.word	0x200071bb
 8009c08:	20000b3c 	.word	0x20000b3c

08009c0c <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0e:	4657      	mov	r7, sl
 8009c10:	4645      	mov	r5, r8
 8009c12:	46de      	mov	lr, fp
 8009c14:	464e      	mov	r6, r9
 8009c16:	4bd7      	ldr	r3, [pc, #860]	; (8009f74 <BackEndTask+0x368>)
 8009c18:	b5e0      	push	{r5, r6, r7, lr}
 8009c1a:	4698      	mov	r8, r3
 8009c1c:	4bd6      	ldr	r3, [pc, #856]	; (8009f78 <BackEndTask+0x36c>)
 8009c1e:	4fd7      	ldr	r7, [pc, #860]	; (8009f7c <BackEndTask+0x370>)
 8009c20:	469a      	mov	sl, r3
 8009c22:	2301      	movs	r3, #1
 8009c24:	b089      	sub	sp, #36	; 0x24
 8009c26:	1bdb      	subs	r3, r3, r7
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2601      	movs	r6, #1
 8009c2e:	001c      	movs	r4, r3
 8009c30:	e01b      	b.n	8009c6a <BackEndTask+0x5e>
 8009c32:	4bd3      	ldr	r3, [pc, #844]	; (8009f80 <BackEndTask+0x374>)
 8009c34:	469c      	mov	ip, r3
 8009c36:	4465      	add	r5, ip
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009c38:	782b      	ldrb	r3, [r5, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00e      	beq.n	8009c5c <BackEndTask+0x50>
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
 8009c3e:	4643      	mov	r3, r8
				MsgDMAStopped[port - 1] = false;
 8009c40:	2200      	movs	r2, #0
				if(portStatus[port] == OVERRUN)
 8009c42:	199b      	adds	r3, r3, r6
 8009c44:	7819      	ldrb	r1, [r3, #0]
				MsgDMAStopped[port - 1] = false;
 8009c46:	702a      	strb	r2, [r5, #0]
				if(portStatus[port] == OVERRUN)
 8009c48:	2905      	cmp	r1, #5
 8009c4a:	d100      	bne.n	8009c4e <BackEndTask+0x42>
					portStatus[port] =FREE;
 8009c4c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f003 fcc0 	bl	800d5d4 <GetUart>
 8009c54:	1939      	adds	r1, r7, r4
 8009c56:	22c0      	movs	r2, #192	; 0xc0
 8009c58:	f008 fac0 	bl	80121dc <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009c5c:	2390      	movs	r3, #144	; 0x90
 8009c5e:	34c0      	adds	r4, #192	; 0xc0
 8009c60:	3601      	adds	r6, #1
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d100      	bne.n	8009c6a <BackEndTask+0x5e>
 8009c68:	e0a5      	b.n	8009db6 <BackEndTask+0x1aa>
 8009c6a:	b2f3      	uxtb	r3, r6
 8009c6c:	469b      	mov	fp, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009c6e:	4643      	mov	r3, r8
 8009c70:	5d9b      	ldrb	r3, [r3, r6]
 8009c72:	1e75      	subs	r5, r6, #1
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d8dc      	bhi.n	8009c32 <BackEndTask+0x26>
 8009c78:	4bc2      	ldr	r3, [pc, #776]	; (8009f84 <BackEndTask+0x378>)
 8009c7a:	469c      	mov	ip, r3
 8009c7c:	44ac      	add	ip, r5
 8009c7e:	4663      	mov	r3, ip
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	2abf      	cmp	r2, #191	; 0xbf
 8009c86:	dc2b      	bgt.n	8009ce0 <BackEndTask+0xd4>
							if(BOS.disableCLI == false){
 8009c88:	4bbf      	ldr	r3, [pc, #764]	; (8009f88 <BackEndTask+0x37c>)
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	7e9b      	ldrb	r3, [r3, #26]
 8009c8e:	9102      	str	r1, [sp, #8]
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	1913      	adds	r3, r2, r4
 8009c94:	4699      	mov	r9, r3
 8009c96:	0073      	lsls	r3, r6, #1
 8009c98:	3201      	adds	r2, #1
 8009c9a:	199b      	adds	r3, r3, r6
 8009c9c:	019b      	lsls	r3, r3, #6
 8009c9e:	9206      	str	r2, [sp, #24]
 8009ca0:	9a07      	ldr	r2, [sp, #28]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	18fb      	adds	r3, r7, r3
 8009ca6:	44b9      	add	r9, r7
 8009ca8:	1b12      	subs	r2, r2, r4
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	9501      	str	r5, [sp, #4]
 8009cae:	464b      	mov	r3, r9
 8009cb0:	0011      	movs	r1, r2
 8009cb2:	e003      	b.n	8009cbc <BackEndTask+0xb0>
 8009cb4:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009cb6:	2dc0      	cmp	r5, #192	; 0xc0
 8009cb8:	d100      	bne.n	8009cbc <BackEndTask+0xb0>
 8009cba:	e07f      	b.n	8009dbc <BackEndTask+0x1b0>
 8009cbc:	1b1a      	subs	r2, r3, r4
 8009cbe:	1bd2      	subs	r2, r2, r7
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009cc0:	2abf      	cmp	r2, #191	; 0xbf
 8009cc2:	d100      	bne.n	8009cc6 <BackEndTask+0xba>
 8009cc4:	e0be      	b.n	8009e44 <BackEndTask+0x238>
 8009cc6:	7818      	ldrb	r0, [r3, #0]
 8009cc8:	18cd      	adds	r5, r1, r3
 8009cca:	2848      	cmp	r0, #72	; 0x48
 8009ccc:	d1f2      	bne.n	8009cb4 <BackEndTask+0xa8>
 8009cce:	7858      	ldrb	r0, [r3, #1]
 8009cd0:	285a      	cmp	r0, #90	; 0x5a
 8009cd2:	d1ef      	bne.n	8009cb4 <BackEndTask+0xa8>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009cd4:	4653      	mov	r3, sl
 8009cd6:	9d01      	ldr	r5, [sp, #4]
 8009cd8:	605a      	str	r2, [r3, #4]
				if(emptyBuffer){
 8009cda:	9b02      	ldr	r3, [sp, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1bd      	bne.n	8009c5c <BackEndTask+0x50>
				totalnumberofrecevedmesg++;
 8009ce0:	4653      	mov	r3, sl
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009cea:	6853      	ldr	r3, [r2, #4]
 8009cec:	4699      	mov	r9, r3
 8009cee:	2bbd      	cmp	r3, #189	; 0xbd
 8009cf0:	d100      	bne.n	8009cf4 <BackEndTask+0xe8>
 8009cf2:	e083      	b.n	8009dfc <BackEndTask+0x1f0>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009cf4:	2bbe      	cmp	r3, #190	; 0xbe
 8009cf6:	d100      	bne.n	8009cfa <BackEndTask+0xee>
 8009cf8:	e09e      	b.n	8009e38 <BackEndTask+0x22c>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009cfa:	2bbf      	cmp	r3, #191	; 0xbf
 8009cfc:	d100      	bne.n	8009d00 <BackEndTask+0xf4>
 8009cfe:	e0c5      	b.n	8009e8c <BackEndTask+0x280>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009d00:	006b      	lsls	r3, r5, #1
 8009d02:	195b      	adds	r3, r3, r5
 8009d04:	019b      	lsls	r3, r3, #6
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	444b      	add	r3, r9
 8009d0a:	789a      	ldrb	r2, [r3, #2]
 8009d0c:	4653      	mov	r3, sl
 8009d0e:	609a      	str	r2, [r3, #8]
					parseStart =packetStart + 3;
 8009d10:	464b      	mov	r3, r9
 8009d12:	4651      	mov	r1, sl
 8009d14:	3303      	adds	r3, #3
 8009d16:	60cb      	str	r3, [r1, #12]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009d18:	1cd3      	adds	r3, r2, #3
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	444b      	add	r3, r9
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009d1e:	2bbf      	cmp	r3, #191	; 0xbf
 8009d20:	dd4e      	ble.n	8009dc0 <BackEndTask+0x1b4>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009d22:	4651      	mov	r1, sl
 8009d24:	3bc0      	subs	r3, #192	; 0xc0
 8009d26:	610b      	str	r3, [r1, #16]
 8009d28:	4649      	mov	r1, r9
 8009d2a:	1908      	adds	r0, r1, r4
 8009d2c:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009d2e:	4599      	cmp	r9, r3
 8009d30:	d04d      	beq.n	8009dce <BackEndTask+0x1c2>
					if(packetStart < packetEnd){
 8009d32:	4599      	cmp	r9, r3
 8009d34:	da6d      	bge.n	8009e12 <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009d36:	0001      	movs	r1, r0
 8009d38:	9a01      	ldr	r2, [sp, #4]
 8009d3a:	4894      	ldr	r0, [pc, #592]	; (8009f8c <BackEndTask+0x380>)
 8009d3c:	f009 f943 	bl	8012fc6 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009d40:	466b      	mov	r3, sp
 8009d42:	4892      	ldr	r0, [pc, #584]	; (8009f8c <BackEndTask+0x380>)
 8009d44:	8899      	ldrh	r1, [r3, #4]
 8009d46:	f002 fdb5 	bl	800c8b4 <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d4a:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009d4c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d4e:	2100      	movs	r1, #0
 8009d50:	488e      	ldr	r0, [pc, #568]	; (8009f8c <BackEndTask+0x380>)
 8009d52:	f009 f941 	bl	8012fd8 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009d56:	4653      	mov	r3, sl
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	4699      	mov	r9, r3
 8009d5c:	464a      	mov	r2, r9
 8009d5e:	006b      	lsls	r3, r5, #1
 8009d60:	195b      	adds	r3, r3, r5
 8009d62:	019b      	lsls	r3, r3, #6
 8009d64:	18fb      	adds	r3, r7, r3
 8009d66:	5c9b      	ldrb	r3, [r3, r2]
 8009d68:	9a01      	ldr	r2, [sp, #4]
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d100      	bne.n	8009d70 <BackEndTask+0x164>
 8009d6e:	e095      	b.n	8009e9c <BackEndTask+0x290>
				if(packetStart < packetEnd){
 8009d70:	4653      	mov	r3, sl
 8009d72:	4652      	mov	r2, sl
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	6892      	ldr	r2, [r2, #8]
 8009d78:	1918      	adds	r0, r3, r4
 8009d7a:	3204      	adds	r2, #4
 8009d7c:	1838      	adds	r0, r7, r0
 8009d7e:	9201      	str	r2, [sp, #4]
 8009d80:	4599      	cmp	r9, r3
 8009d82:	dd26      	ble.n	8009dd2 <BackEndTask+0x1c6>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009d84:	2100      	movs	r1, #0
 8009d86:	f009 f927 	bl	8012fd8 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009d8a:	464b      	mov	r3, r9
 8009d8c:	2bbf      	cmp	r3, #191	; 0xbf
 8009d8e:	d031      	beq.n	8009df4 <BackEndTask+0x1e8>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009d90:	9a03      	ldr	r2, [sp, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009d96:	00f3      	lsls	r3, r6, #3
 8009d98:	1b9b      	subs	r3, r3, r6
 8009d9a:	4a7d      	ldr	r2, [pc, #500]	; (8009f90 <BackEndTask+0x384>)
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	3b37      	subs	r3, #55	; 0x37
 8009da0:	5cd0      	ldrb	r0, [r2, r3]
 8009da2:	212d      	movs	r1, #45	; 0x2d
 8009da4:	2200      	movs	r2, #0
 8009da6:	f7ff fe51 	bl	8009a4c <SendMessageToModule>
				++rejectedMsg;
 8009daa:	4653      	mov	r3, sl
 8009dac:	4652      	mov	r2, sl
 8009dae:	8adb      	ldrh	r3, [r3, #22]
 8009db0:	3301      	adds	r3, #1
 8009db2:	82d3      	strh	r3, [r2, #22]
 8009db4:	e73d      	b.n	8009c32 <BackEndTask+0x26>
			}
		}

		taskYIELD();
 8009db6:	f005 fafd 	bl	800f3b4 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8009dba:	e736      	b.n	8009c2a <BackEndTask+0x1e>
 8009dbc:	9d01      	ldr	r5, [sp, #4]
 8009dbe:	e78c      	b.n	8009cda <BackEndTask+0xce>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009dc0:	4651      	mov	r1, sl
 8009dc2:	610b      	str	r3, [r1, #16]
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	1908      	adds	r0, r1, r4
 8009dc8:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009dca:	4599      	cmp	r9, r3
 8009dcc:	d1b1      	bne.n	8009d32 <BackEndTask+0x126>
 8009dce:	3204      	adds	r2, #4
 8009dd0:	9201      	str	r2, [sp, #4]
					MSG_RX_BUF_SIZE - packetStart);
 8009dd2:	22c0      	movs	r2, #192	; 0xc0
 8009dd4:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009dd6:	001a      	movs	r2, r3
 8009dd8:	2100      	movs	r1, #0
 8009dda:	9302      	str	r3, [sp, #8]
 8009ddc:	f009 f8fc 	bl	8012fd8 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	9a01      	ldr	r2, [sp, #4]
 8009de4:	1938      	adds	r0, r7, r4
 8009de6:	1ad2      	subs	r2, r2, r3
 8009de8:	2100      	movs	r1, #0
 8009dea:	f009 f8f5 	bl	8012fd8 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009dee:	464b      	mov	r3, r9
 8009df0:	2bbf      	cmp	r3, #191	; 0xbf
 8009df2:	d1cd      	bne.n	8009d90 <BackEndTask+0x184>
					UARTRxBufIndex[port - 1] =0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	9a03      	ldr	r2, [sp, #12]
 8009df8:	7013      	strb	r3, [r2, #0]
 8009dfa:	e7cc      	b.n	8009d96 <BackEndTask+0x18a>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009dfc:	0073      	lsls	r3, r6, #1
 8009dfe:	199b      	adds	r3, r3, r6
 8009e00:	019b      	lsls	r3, r3, #6
 8009e02:	3b01      	subs	r3, #1
 8009e04:	5cfa      	ldrb	r2, [r7, r3]
 8009e06:	4653      	mov	r3, sl
					parseStart =0;
 8009e08:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e0a:	609a      	str	r2, [r3, #8]
					parseStart =0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	60cb      	str	r3, [r1, #12]
 8009e10:	e782      	b.n	8009d18 <BackEndTask+0x10c>
						MSG_RX_BUF_SIZE - packetStart);
 8009e12:	22c0      	movs	r2, #192	; 0xc0
 8009e14:	464b      	mov	r3, r9
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	0001      	movs	r1, r0
 8009e1e:	485b      	ldr	r0, [pc, #364]	; (8009f8c <BackEndTask+0x380>)
 8009e20:	f009 f8d1 	bl	8012fc6 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009e24:	464a      	mov	r2, r9
 8009e26:	4b59      	ldr	r3, [pc, #356]	; (8009f8c <BackEndTask+0x380>)
 8009e28:	1939      	adds	r1, r7, r4
 8009e2a:	444b      	add	r3, r9
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	1a9a      	subs	r2, r3, r2
 8009e32:	f009 f8c8 	bl	8012fc6 <memcpy>
 8009e36:	e783      	b.n	8009d40 <BackEndTask+0x134>
					packetLength =UARTRxBuf[port - 1][0];
 8009e38:	4653      	mov	r3, sl
					parseStart =1;
 8009e3a:	2101      	movs	r1, #1
					packetLength =UARTRxBuf[port - 1][0];
 8009e3c:	5d3a      	ldrb	r2, [r7, r4]
					parseStart =1;
 8009e3e:	60d9      	str	r1, [r3, #12]
					packetLength =UARTRxBuf[port - 1][0];
 8009e40:	609a      	str	r2, [r3, #8]
 8009e42:	e769      	b.n	8009d18 <BackEndTask+0x10c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e44:	9805      	ldr	r0, [sp, #20]
 8009e46:	7800      	ldrb	r0, [r0, #0]
 8009e48:	2848      	cmp	r0, #72	; 0x48
 8009e4a:	d07a      	beq.n	8009f42 <BackEndTask+0x336>
							if(BOS.disableCLI == false){
 8009e4c:	9a04      	ldr	r2, [sp, #16]
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	d000      	beq.n	8009e54 <BackEndTask+0x248>
 8009e52:	e703      	b.n	8009c5c <BackEndTask+0x50>
 8009e54:	4648      	mov	r0, r9
 8009e56:	9a06      	ldr	r2, [sp, #24]
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e58:	7805      	ldrb	r5, [r0, #0]
 8009e5a:	469c      	mov	ip, r3
 8009e5c:	1e53      	subs	r3, r2, #1
 8009e5e:	2d0d      	cmp	r5, #13
 8009e60:	d009      	beq.n	8009e76 <BackEndTask+0x26a>
 8009e62:	3001      	adds	r0, #1
 8009e64:	1c55      	adds	r5, r2, #1
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e66:	2ac0      	cmp	r2, #192	; 0xc0
 8009e68:	d100      	bne.n	8009e6c <BackEndTask+0x260>
 8009e6a:	e6f7      	b.n	8009c5c <BackEndTask+0x50>
							if(BOS.disableCLI == false){
 8009e6c:	002a      	movs	r2, r5
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e6e:	7805      	ldrb	r5, [r0, #0]
 8009e70:	1e53      	subs	r3, r2, #1
 8009e72:	2d0d      	cmp	r5, #13
 8009e74:	d1f5      	bne.n	8009e62 <BackEndTask+0x256>
 8009e76:	2bbf      	cmp	r3, #191	; 0xbf
 8009e78:	d100      	bne.n	8009e7c <BackEndTask+0x270>
 8009e7a:	e0ac      	b.n	8009fd6 <BackEndTask+0x3ca>
 8009e7c:	7845      	ldrb	r5, [r0, #1]
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	d100      	bne.n	8009e84 <BackEndTask+0x278>
 8009e82:	e08b      	b.n	8009f9c <BackEndTask+0x390>
 8009e84:	1c55      	adds	r5, r2, #1
 8009e86:	3001      	adds	r0, #1
							if(BOS.disableCLI == false){
 8009e88:	002a      	movs	r2, r5
 8009e8a:	e7f0      	b.n	8009e6e <BackEndTask+0x262>
					packetLength =UARTRxBuf[port - 1][1];
 8009e8c:	193b      	adds	r3, r7, r4
 8009e8e:	785a      	ldrb	r2, [r3, #1]
 8009e90:	4653      	mov	r3, sl
					parseStart =2;
 8009e92:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][1];
 8009e94:	609a      	str	r2, [r3, #8]
					parseStart =2;
 8009e96:	2302      	movs	r3, #2
 8009e98:	60cb      	str	r3, [r1, #12]
 8009e9a:	e73d      	b.n	8009d18 <BackEndTask+0x10c>
						portStatus[port] =MSG;
 8009e9c:	4643      	mov	r3, r8
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009ea2:	4653      	mov	r3, sl
 8009ea4:	4a3b      	ldr	r2, [pc, #236]	; (8009f94 <BackEndTask+0x388>)
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	00f0      	lsls	r0, r6, #3
 8009eaa:	5553      	strb	r3, [r2, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009eac:	4652      	mov	r2, sl
 8009eae:	68d1      	ldr	r1, [r2, #12]
 8009eb0:	2238      	movs	r2, #56	; 0x38
 8009eb2:	4252      	negs	r2, r2
 8009eb4:	4694      	mov	ip, r2
 8009eb6:	1b80      	subs	r0, r0, r6
 8009eb8:	00c0      	lsls	r0, r0, #3
 8009eba:	4484      	add	ip, r0
 8009ebc:	4662      	mov	r2, ip
 8009ebe:	9202      	str	r2, [sp, #8]
 8009ec0:	4a33      	ldr	r2, [pc, #204]	; (8009f90 <BackEndTask+0x384>)
 8009ec2:	000d      	movs	r5, r1
 8009ec4:	3a38      	subs	r2, #56	; 0x38
 8009ec6:	1810      	adds	r0, r2, r0
 8009ec8:	22bf      	movs	r2, #191	; 0xbf
 8009eca:	9104      	str	r1, [sp, #16]
 8009ecc:	1909      	adds	r1, r1, r4
						messageLength[port - 1] =packetLength;
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	1879      	adds	r1, r7, r1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009ed2:	1b52      	subs	r2, r2, r5
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	dc38      	bgt.n	8009f4a <BackEndTask+0x33e>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009ed8:	001a      	movs	r2, r3
 8009eda:	f009 f874 	bl	8012fc6 <memcpy>
						if(packetStart < packetEnd){
 8009ede:	4653      	mov	r3, sl
 8009ee0:	9a01      	ldr	r2, [sp, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	3204      	adds	r2, #4
 8009ee6:	1918      	adds	r0, r3, r4
 8009ee8:	1838      	adds	r0, r7, r0
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	4599      	cmp	r9, r3
 8009eee:	dc08      	bgt.n	8009f02 <BackEndTask+0x2f6>
							MSG_RX_BUF_SIZE - packetStart);
 8009ef0:	25c0      	movs	r5, #192	; 0xc0
 8009ef2:	1aed      	subs	r5, r5, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009ef4:	002a      	movs	r2, r5
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	f009 f86e 	bl	8012fd8 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009efc:	9b01      	ldr	r3, [sp, #4]
 8009efe:	1938      	adds	r0, r7, r4
 8009f00:	1b5a      	subs	r2, r3, r5
 8009f02:	2100      	movs	r1, #0
 8009f04:	f009 f868 	bl	8012fd8 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009f08:	464b      	mov	r3, r9
 8009f0a:	2bbf      	cmp	r3, #191	; 0xbf
 8009f0c:	d02e      	beq.n	8009f6c <BackEndTask+0x360>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f0e:	9a03      	ldr	r2, [sp, #12]
 8009f10:	3301      	adds	r3, #1
 8009f12:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009f14:	4653      	mov	r3, sl
 8009f16:	4652      	mov	r2, sl
 8009f18:	8a9b      	ldrh	r3, [r3, #20]
							NotifyMessagingTask(port);
 8009f1a:	4658      	mov	r0, fp
						++acceptedMsg;
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	8293      	strh	r3, [r2, #20]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8009f20:	9a02      	ldr	r2, [sp, #8]
 8009f22:	4b1b      	ldr	r3, [pc, #108]	; (8009f90 <BackEndTask+0x384>)
 8009f24:	5c9b      	ldrb	r3, [r3, r2]
 8009f26:	4a1c      	ldr	r2, [pc, #112]	; (8009f98 <BackEndTask+0x38c>)
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d006      	beq.n	8009f3c <BackEndTask+0x330>
 8009f2e:	3302      	adds	r3, #2
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d902      	bls.n	8009f3c <BackEndTask+0x330>
							ForwardReceivedMessage(port);
 8009f36:	f7ff fd69 	bl	8009a0c <ForwardReceivedMessage>
 8009f3a:	e68f      	b.n	8009c5c <BackEndTask+0x50>
							NotifyMessagingTask(port);
 8009f3c:	f7ff fafe 	bl	800953c <NotifyMessagingTask>
 8009f40:	e68c      	b.n	8009c5c <BackEndTask+0x50>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009f42:	5d38      	ldrb	r0, [r7, r4]
 8009f44:	285a      	cmp	r0, #90	; 0x5a
 8009f46:	d181      	bne.n	8009e4c <BackEndTask+0x240>
 8009f48:	e6c4      	b.n	8009cd4 <BackEndTask+0xc8>
							MSG_RX_BUF_SIZE - parseStart);
 8009f4a:	25c0      	movs	r5, #192	; 0xc0
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	1aed      	subs	r5, r5, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f50:	002a      	movs	r2, r5
 8009f52:	f009 f838 	bl	8012fc6 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009f56:	9b02      	ldr	r3, [sp, #8]
 8009f58:	1939      	adds	r1, r7, r4
 8009f5a:	18e8      	adds	r0, r5, r3
 8009f5c:	4b0c      	ldr	r3, [pc, #48]	; (8009f90 <BackEndTask+0x384>)
 8009f5e:	469c      	mov	ip, r3
 8009f60:	9b01      	ldr	r3, [sp, #4]
 8009f62:	4460      	add	r0, ip
 8009f64:	1b5a      	subs	r2, r3, r5
 8009f66:	f009 f82e 	bl	8012fc6 <memcpy>
 8009f6a:	e7b8      	b.n	8009ede <BackEndTask+0x2d2>
							UARTRxBufIndex[port - 1] =0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9a03      	ldr	r2, [sp, #12]
 8009f70:	7013      	strb	r3, [r2, #0]
 8009f72:	e7cf      	b.n	8009f14 <BackEndTask+0x308>
 8009f74:	20000c2c 	.word	0x20000c2c
 8009f78:	200019d8 	.word	0x200019d8
 8009f7c:	2000138c 	.word	0x2000138c
 8009f80:	20001344 	.word	0x20001344
 8009f84:	2000134c 	.word	0x2000134c
 8009f88:	200070a8 	.word	0x200070a8
 8009f8c:	20001354 	.word	0x20001354
 8009f90:	20000c90 	.word	0x20000c90
 8009f94:	20000c50 	.word	0x20000c50
 8009f98:	20000a98 	.word	0x20000a98
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	9d01      	ldr	r5, [sp, #4]
 8009fa0:	b2d2      	uxtb	r2, r2
										UARTRxBuf[port - 1][j] =0;
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	006b      	lsls	r3, r5, #1
 8009fa6:	195b      	adds	r3, r3, r5
 8009fa8:	019b      	lsls	r3, r3, #6
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	5419      	strb	r1, [r3, r0]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009fb2:	4642      	mov	r2, r8
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <BackEndTask+0x3e4>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	54d1      	strb	r1, [r2, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009fba:	2303      	movs	r3, #3
 8009fbc:	5593      	strb	r3, [r2, r6]
										PcPort =port;
 8009fbe:	465a      	mov	r2, fp
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <BackEndTask+0x3e4>)
 8009fc2:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <BackEndTask+0x3e8>)
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	9301      	str	r3, [sp, #4]
 8009fcc:	9801      	ldr	r0, [sp, #4]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f004 ff76 	bl	800eec0 <xTaskGenericNotify>
										break;
 8009fd4:	e642      	b.n	8009c5c <BackEndTask+0x50>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009fd6:	5d3a      	ldrb	r2, [r7, r4]
 8009fd8:	0018      	movs	r0, r3
 8009fda:	4663      	mov	r3, ip
 8009fdc:	2a00      	cmp	r2, #0
 8009fde:	d003      	beq.n	8009fe8 <BackEndTask+0x3dc>
							emptyBuffer = true;
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	18cd      	adds	r5, r1, r3
 8009fe4:	9202      	str	r2, [sp, #8]
 8009fe6:	e665      	b.n	8009cb4 <BackEndTask+0xa8>
 8009fe8:	9d01      	ldr	r5, [sp, #4]
 8009fea:	22c0      	movs	r2, #192	; 0xc0
 8009fec:	e7d9      	b.n	8009fa2 <BackEndTask+0x396>
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	20000c28 	.word	0x20000c28
 8009ff4:	2000181c 	.word	0x2000181c

08009ff8 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	4770      	bx	lr

08009ffc <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffe:	4657      	mov	r7, sl
 800a000:	4645      	mov	r5, r8
 800a002:	46de      	mov	lr, fp
 800a004:	464e      	mov	r6, r9
 800a006:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 800a008:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 800a00a:	b09d      	sub	sp, #116	; 0x74
	port =(int8_t )(unsigned )argument;
 800a00c:	930d      	str	r3, [sp, #52]	; 0x34
 800a00e:	23ff      	movs	r3, #255	; 0xff
 800a010:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 800a012:	1e5d      	subs	r5, r3, #1
 800a014:	930b      	str	r3, [sp, #44]	; 0x2c
 800a016:	00eb      	lsls	r3, r5, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a018:	4adf      	ldr	r2, [pc, #892]	; (800a398 <PxMessagingTask+0x39c>)
 800a01a:	9306      	str	r3, [sp, #24]
 800a01c:	1b5b      	subs	r3, r3, r5
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	4693      	mov	fp, r2
 800a022:	001a      	movs	r2, r3
 800a024:	445a      	add	r2, fp
 800a026:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_StatusTypeDef status =HAL_OK;
 800a028:	2200      	movs	r2, #0
 800a02a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a02c:	4adb      	ldr	r2, [pc, #876]	; (800a39c <PxMessagingTask+0x3a0>)
 800a02e:	930e      	str	r3, [sp, #56]	; 0x38
 800a030:	4690      	mov	r8, r2
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	3305      	adds	r3, #5
 800a036:	9317      	str	r3, [sp, #92]	; 0x5c
 800a038:	4bd9      	ldr	r3, [pc, #868]	; (800a3a0 <PxMessagingTask+0x3a4>)
 800a03a:	9216      	str	r2, [sp, #88]	; 0x58
 800a03c:	4699      	mov	r9, r3
									ADCSide =cMessage[port - 1][shift + 1];
 800a03e:	2338      	movs	r3, #56	; 0x38
 800a040:	00aa      	lsls	r2, r5, #2
 800a042:	9210      	str	r2, [sp, #64]	; 0x40
 800a044:	4ad7      	ldr	r2, [pc, #860]	; (800a3a4 <PxMessagingTask+0x3a8>)
	BOS_Status result =BOS_OK;
 800a046:	2700      	movs	r7, #0
 800a048:	4692      	mov	sl, r2
									ADCSide =cMessage[port - 1][shift + 1];
 800a04a:	436b      	muls	r3, r5
 800a04c:	445b      	add	r3, fp
 800a04e:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a050:	2101      	movs	r1, #1
 800a052:	2001      	movs	r0, #1
 800a054:	4249      	negs	r1, r1
 800a056:	f004 fef3 	bl	800ee40 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a05a:	4643      	mov	r3, r8
 800a05c:	5d5e      	ldrb	r6, [r3, r5]
 800a05e:	2e00      	cmp	r6, #0
 800a060:	d076      	beq.n	800a150 <PxMessagingTask+0x154>
			if(cMessage[port - 1][2] >> 7){
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	1b5b      	subs	r3, r3, r5
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	445b      	add	r3, fp
 800a06a:	7899      	ldrb	r1, [r3, #2]
 800a06c:	b24b      	sxtb	r3, r1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da01      	bge.n	800a076 <PxMessagingTask+0x7a>
 800a072:	f000 fcc9 	bl	800aa08 <PxMessagingTask+0xa0c>
				longMessage =0;
 800a076:	2300      	movs	r3, #0
 800a078:	4acb      	ldr	r2, [pc, #812]	; (800a3a8 <PxMessagingTask+0x3ac>)
 800a07a:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 800a07c:	465a      	mov	r2, fp
 800a07e:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a080:	4eca      	ldr	r6, [pc, #808]	; (800a3ac <PxMessagingTask+0x3b0>)
			dst =cMessage[port - 1][0];
 800a082:	1b5b      	subs	r3, r3, r5
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 800a088:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 800a08a:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 800a08c:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a08e:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800a090:	9204      	str	r2, [sp, #16]
 800a092:	2201      	movs	r2, #1
 800a094:	0014      	movs	r4, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a096:	0f80      	lsrs	r0, r0, #30
 800a098:	7070      	strb	r0, [r6, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a09a:	0908      	lsrs	r0, r1, #4
 800a09c:	400c      	ands	r4, r1
 800a09e:	4002      	ands	r2, r0
 800a0a0:	46a4      	mov	ip, r4
 800a0a2:	b2d0      	uxtb	r0, r2
 800a0a4:	70f2      	strb	r2, [r6, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a0a6:	2260      	movs	r2, #96	; 0x60
 800a0a8:	4463      	add	r3, ip
 800a0aa:	400a      	ands	r2, r1
 800a0ac:	940c      	str	r4, [sp, #48]	; 0x30
 800a0ae:	7032      	strb	r2, [r6, #0]
 800a0b0:	0022      	movs	r2, r4
 800a0b2:	78dc      	ldrb	r4, [r3, #3]
 800a0b4:	9408      	str	r4, [sp, #32]
			if(extendCode == true){
 800a0b6:	0789      	lsls	r1, r1, #30
 800a0b8:	d507      	bpl.n	800a0ca <PxMessagingTask+0xce>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a0ba:	46a4      	mov	ip, r4
 800a0bc:	791b      	ldrb	r3, [r3, #4]
				++shift;
 800a0be:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	4463      	add	r3, ip
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	9308      	str	r3, [sp, #32]
				++shift;
 800a0c8:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d001      	beq.n	800a0d2 <PxMessagingTask+0xd6>
 800a0ce:	f000 fca0 	bl	800aa12 <PxMessagingTask+0xa16>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a0d2:	9a07      	ldr	r2, [sp, #28]
 800a0d4:	1e53      	subs	r3, r2, #1
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2bfc      	cmp	r3, #252	; 0xfc
 800a0da:	d801      	bhi.n	800a0e0 <PxMessagingTask+0xe4>
 800a0dc:	f000 fc6e 	bl	800a9bc <PxMessagingTask+0x9c0>
 800a0e0:	4643      	mov	r3, r8
 800a0e2:	5d5e      	ldrb	r6, [r3, r5]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	2bff      	cmp	r3, #255	; 0xff
 800a0e8:	d001      	beq.n	800a0ee <PxMessagingTask+0xf2>
 800a0ea:	f000 fca7 	bl	800aa3c <PxMessagingTask+0xa40>
 800a0ee:	9b06      	ldr	r3, [sp, #24]
 800a0f0:	4aaf      	ldr	r2, [pc, #700]	; (800a3b0 <PxMessagingTask+0x3b4>)
 800a0f2:	1b5c      	subs	r4, r3, r5
 800a0f4:	00e4      	lsls	r4, r4, #3
 800a0f6:	445c      	add	r4, fp
 800a0f8:	19a3      	adds	r3, r4, r6
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800a100:	2703      	movs	r7, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a102:	429a      	cmp	r2, r3
 800a104:	d024      	beq.n	800a150 <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a106:	4aaa      	ldr	r2, [pc, #680]	; (800a3b0 <PxMessagingTask+0x3b4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a108:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a10a:	7613      	strb	r3, [r2, #24]
 800a10c:	4aa9      	ldr	r2, [pc, #676]	; (800a3b4 <PxMessagingTask+0x3b8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a10e:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a110:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a112:	f7ff fc37 	bl	8009984 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a116:	4643      	mov	r3, r8
 800a118:	5d5e      	ldrb	r6, [r3, r5]
 800a11a:	2300      	movs	r3, #0
 800a11c:	19a4      	adds	r4, r4, r6
 800a11e:	3c01      	subs	r4, #1
 800a120:	7023      	strb	r3, [r4, #0]
				shift +=4;
 800a122:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a124:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a126:	1b32      	subs	r2, r6, r4
 800a128:	b2d3      	uxtb	r3, r2
 800a12a:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	2b2d      	cmp	r3, #45	; 0x2d
 800a130:	d900      	bls.n	800a134 <PxMessagingTask+0x138>
 800a132:	e084      	b.n	800a23e <PxMessagingTask+0x242>
 800a134:	4aa0      	ldr	r2, [pc, #640]	; (800a3b8 <PxMessagingTask+0x3bc>)
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	58d3      	ldr	r3, [r2, r3]
 800a13a:	469f      	mov	pc, r3
							SaveToRO();
 800a13c:	f001 f9b8 	bl	800b4b0 <SaveToRO>
							SaveEEportsDir();
 800a140:	f7f9 f962 	bl	8003408 <SaveEEportsDir>
							indMode =IND_PING;
 800a144:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 800a146:	4a9d      	ldr	r2, [pc, #628]	; (800a3bc <PxMessagingTask+0x3c0>)
 800a148:	7013      	strb	r3, [r2, #0]
 800a14a:	4643      	mov	r3, r8
							IND_toggle();
 800a14c:	2700      	movs	r7, #0
 800a14e:	5d5e      	ldrb	r6, [r3, r5]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a150:	0032      	movs	r2, r6
 800a152:	2100      	movs	r1, #0
 800a154:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a156:	f008 ff3f 	bl	8012fd8 <memset>
		messageLength[port - 1] =0;
 800a15a:	4643      	mov	r3, r8
 800a15c:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a15e:	990b      	ldr	r1, [sp, #44]	; 0x2c
		messageLength[port - 1] =0;
 800a160:	555a      	strb	r2, [r3, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a162:	4b97      	ldr	r3, [pc, #604]	; (800a3c0 <PxMessagingTask+0x3c4>)
 800a164:	5c5b      	ldrb	r3, [r3, r1]
 800a166:	3b02      	subs	r3, #2
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d901      	bls.n	800a170 <PxMessagingTask+0x174>
			portStatus[port] =FREE;
 800a16c:	4b94      	ldr	r3, [pc, #592]	; (800a3c0 <PxMessagingTask+0x3c4>)
 800a16e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a170:	f005 f920 	bl	800f3b4 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a174:	e76c      	b.n	800a050 <PxMessagingTask+0x54>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a176:	9b05      	ldr	r3, [sp, #20]
 800a178:	191a      	adds	r2, r3, r4
 800a17a:	7893      	ldrb	r3, [r2, #2]
 800a17c:	78d1      	ldrb	r1, [r2, #3]
 800a17e:	021b      	lsls	r3, r3, #8
 800a180:	0409      	lsls	r1, r1, #16
 800a182:	185b      	adds	r3, r3, r1
 800a184:	7851      	ldrb	r1, [r2, #1]
 800a186:	7912      	ldrb	r2, [r2, #4]
 800a188:	185b      	adds	r3, r3, r1
 800a18a:	0612      	lsls	r2, r2, #24
 800a18c:	189b      	adds	r3, r3, r2
 800a18e:	4a8d      	ldr	r2, [pc, #564]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a190:	6393      	str	r3, [r2, #56]	; 0x38
									ADCPort =cMessage[port - 1][shift];
 800a192:	2644      	movs	r6, #68	; 0x44
									ADCSide =cMessage[port - 1][shift + 1];
 800a194:	2146      	movs	r1, #70	; 0x46
									ADCPort =cMessage[port - 1][shift];
 800a196:	4b8b      	ldr	r3, [pc, #556]	; (800a3c4 <PxMessagingTask+0x3c8>)
									ADCSide =cMessage[port - 1][shift + 1];
 800a198:	4a8a      	ldr	r2, [pc, #552]	; (800a3c4 <PxMessagingTask+0x3c8>)
									ADCPort =cMessage[port - 1][shift];
 800a19a:	5398      	strh	r0, [r3, r6]
									ADCSide =cMessage[port - 1][shift + 1];
 800a19c:	9b05      	ldr	r3, [sp, #20]
 800a19e:	191b      	adds	r3, r3, r4
 800a1a0:	785b      	ldrb	r3, [r3, #1]
 800a1a2:	5253      	strh	r3, [r2, r1]
									if(0 == ADCSide){
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <PxMessagingTask+0x1b0>
 800a1a8:	f000 fdfc 	bl	800ada4 <PxMessagingTask+0xda8>
									else if(1 == ADCSide){
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d109      	bne.n	800a1c4 <PxMessagingTask+0x1c8>
										ADCSelectChannel(ADCPort,"bottom");
 800a1b0:	4985      	ldr	r1, [pc, #532]	; (800a3c8 <PxMessagingTask+0x3cc>)
 800a1b2:	f7fe fd65 	bl	8008c80 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a1b6:	4a83      	ldr	r2, [pc, #524]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a1b8:	4b82      	ldr	r3, [pc, #520]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a1ba:	3248      	adds	r2, #72	; 0x48
 800a1bc:	5d98      	ldrb	r0, [r3, r6]
 800a1be:	4982      	ldr	r1, [pc, #520]	; (800a3c8 <PxMessagingTask+0x3cc>)
 800a1c0:	f7fe fdaa 	bl	8008d18 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a1c4:	497f      	ldr	r1, [pc, #508]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a1c6:	487f      	ldr	r0, [pc, #508]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a1c8:	314c      	adds	r1, #76	; 0x4c
 800a1ca:	3050      	adds	r0, #80	; 0x50
 800a1cc:	f7fe fb9c 	bl	8008908 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800a1d0:	4a7c      	ldr	r2, [pc, #496]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a1d2:	9b06      	ldr	r3, [sp, #24]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a1d4:	0011      	movs	r1, r2
									ADCPort =cMessage[port - 1][shift];
 800a1d6:	1b5e      	subs	r6, r3, r5
 800a1d8:	2344      	movs	r3, #68	; 0x44
 800a1da:	00f6      	lsls	r6, r6, #3
 800a1dc:	445e      	add	r6, fp
 800a1de:	5d30      	ldrb	r0, [r6, r4]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a1e0:	3154      	adds	r1, #84	; 0x54
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a1e2:	1934      	adds	r4, r6, r4
									ADCPort =cMessage[port - 1][shift];
 800a1e4:	52d0      	strh	r0, [r2, r3]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a1e6:	f7fe fc5d 	bl	8008aa4 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a1ea:	79a3      	ldrb	r3, [r4, #6]
 800a1ec:	79e2      	ldrb	r2, [r4, #7]
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	0412      	lsls	r2, r2, #16
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	7962      	ldrb	r2, [r4, #5]
 800a1f6:	189b      	adds	r3, r3, r2
 800a1f8:	7a22      	ldrb	r2, [r4, #8]
 800a1fa:	0612      	lsls	r2, r2, #24
 800a1fc:	189b      	adds	r3, r3, r2
 800a1fe:	4a71      	ldr	r2, [pc, #452]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a200:	63d3      	str	r3, [r2, #60]	; 0x3c
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a202:	7aa3      	ldrb	r3, [r4, #10]
 800a204:	7ae2      	ldrb	r2, [r4, #11]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	0412      	lsls	r2, r2, #16
 800a20a:	189b      	adds	r3, r3, r2
 800a20c:	7a62      	ldrb	r2, [r4, #9]
 800a20e:	189b      	adds	r3, r3, r2
 800a210:	7b22      	ldrb	r2, [r4, #12]
 800a212:	0612      	lsls	r2, r2, #24
 800a214:	189b      	adds	r3, r3, r2
 800a216:	4a6b      	ldr	r2, [pc, #428]	; (800a3c4 <PxMessagingTask+0x3c8>)
 800a218:	6413      	str	r3, [r2, #64]	; 0x40
							ACK_FLAG =1;
 800a21a:	2301      	movs	r3, #1
 800a21c:	4a6b      	ldr	r2, [pc, #428]	; (800a3cc <PxMessagingTask+0x3d0>)
 800a21e:	2700      	movs	r7, #0
 800a220:	7013      	strb	r3, [r2, #0]
 800a222:	4643      	mov	r3, r8
 800a224:	5d5e      	ldrb	r6, [r3, r5]
 800a226:	e793      	b.n	800a150 <PxMessagingTask+0x154>
							switch(cMessage[port - 1][0 + shift]){
 800a228:	9b06      	ldr	r3, [sp, #24]
 800a22a:	1b5b      	subs	r3, r3, r5
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	445b      	add	r3, fp
 800a230:	5d18      	ldrb	r0, [r3, r4]
 800a232:	282b      	cmp	r0, #43	; 0x2b
 800a234:	d8f1      	bhi.n	800a21a <PxMessagingTask+0x21e>
 800a236:	4a66      	ldr	r2, [pc, #408]	; (800a3d0 <PxMessagingTask+0x3d4>)
 800a238:	0083      	lsls	r3, r0, #2
 800a23a:	58d3      	ldr	r3, [r2, r3]
 800a23c:	469f      	mov	pc, r3
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a23e:	9400      	str	r4, [sp, #0]
 800a240:	9b07      	ldr	r3, [sp, #28]
 800a242:	9a04      	ldr	r2, [sp, #16]
 800a244:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a246:	9808      	ldr	r0, [sp, #32]
 800a248:	f7ff fed6 	bl	8009ff8 <User_MessagingParser>
 800a24c:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800a24e:	2801      	cmp	r0, #1
 800a250:	d101      	bne.n	800a256 <PxMessagingTask+0x25a>
 800a252:	f000 fc3d 	bl	800aad0 <PxMessagingTask+0xad4>
 800a256:	4643      	mov	r3, r8
 800a258:	5d5e      	ldrb	r6, [r3, r5]
 800a25a:	e779      	b.n	800a150 <PxMessagingTask+0x154>
							rejected_FLAG =1;
 800a25c:	2301      	movs	r3, #1
 800a25e:	4a5d      	ldr	r2, [pc, #372]	; (800a3d4 <PxMessagingTask+0x3d8>)
 800a260:	7013      	strb	r3, [r2, #0]
 800a262:	e772      	b.n	800a14a <PxMessagingTask+0x14e>
							for(p =0; p < numOfParams; p++){
 800a264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a266:	2b00      	cmp	r3, #0
 800a268:	d01d      	beq.n	800a2a6 <PxMessagingTask+0x2aa>
 800a26a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a26c:	4659      	mov	r1, fp
 800a26e:	46b4      	mov	ip, r6
 800a270:	1930      	adds	r0, r6, r4
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a272:	2680      	movs	r6, #128	; 0x80
 800a274:	3101      	adds	r1, #1
 800a276:	4461      	add	r1, ip
 800a278:	9a04      	ldr	r2, [sp, #16]
 800a27a:	190c      	adds	r4, r1, r4
 800a27c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a27e:	3a01      	subs	r2, #1
 800a280:	4b55      	ldr	r3, [pc, #340]	; (800a3d8 <PxMessagingTask+0x3dc>)
 800a282:	0052      	lsls	r2, r2, #1
 800a284:	3901      	subs	r1, #1
 800a286:	b2c9      	uxtb	r1, r1
 800a288:	5a9b      	ldrh	r3, [r3, r2]
 800a28a:	4458      	add	r0, fp
 800a28c:	1864      	adds	r4, r4, r1
 800a28e:	0236      	lsls	r6, r6, #8
 800a290:	0037      	movs	r7, r6
 800a292:	7801      	ldrb	r1, [r0, #0]
 800a294:	3001      	adds	r0, #1
 800a296:	3901      	subs	r1, #1
 800a298:	410f      	asrs	r7, r1
 800a29a:	433b      	orrs	r3, r7
 800a29c:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800a29e:	4284      	cmp	r4, r0
 800a2a0:	d1f6      	bne.n	800a290 <PxMessagingTask+0x294>
 800a2a2:	494d      	ldr	r1, [pc, #308]	; (800a3d8 <PxMessagingTask+0x3dc>)
 800a2a4:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e0fb      	b.n	800a4a2 <PxMessagingTask+0x4a6>
							temp =0;
 800a2aa:	2300      	movs	r3, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a2ac:	2680      	movs	r6, #128	; 0x80
							for(p =1; p <= NumOfPorts; p++){
 800a2ae:	2401      	movs	r4, #1
							temp =0;
 800a2b0:	9309      	str	r3, [sp, #36]	; 0x24
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a2b2:	0236      	lsls	r6, r6, #8
 800a2b4:	0020      	movs	r0, r4
 800a2b6:	f003 f98d 	bl	800d5d4 <GetUart>
 800a2ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2bc:	42b3      	cmp	r3, r6
 800a2be:	d105      	bne.n	800a2cc <PxMessagingTask+0x2d0>
									messageParams[temp++] =p;
 800a2c0:	4651      	mov	r1, sl
 800a2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c4:	1c53      	adds	r3, r2, #1
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	548c      	strb	r4, [r1, r2]
 800a2ca:	9309      	str	r3, [sp, #36]	; 0x24
							for(p =1; p <= NumOfPorts; p++){
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	b2e4      	uxtb	r4, r4
 800a2d0:	2c07      	cmp	r4, #7
 800a2d2:	d1ef      	bne.n	800a2b4 <PxMessagingTask+0x2b8>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a2d4:	466b      	mov	r3, sp
 800a2d6:	2114      	movs	r1, #20
 800a2d8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a2da:	9804      	ldr	r0, [sp, #16]
 800a2dc:	f7ff fbb6 	bl	8009a4c <SendMessageToModule>
 800a2e0:	e733      	b.n	800a14a <PxMessagingTask+0x14e>
 800a2e2:	4b3e      	ldr	r3, [pc, #248]	; (800a3dc <PxMessagingTask+0x3e0>)
 800a2e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2e6:	881f      	ldrh	r7, [r3, #0]
 800a2e8:	4b3d      	ldr	r3, [pc, #244]	; (800a3e0 <PxMessagingTask+0x3e4>)
 800a2ea:	4694      	mov	ip, r2
 800a2ec:	19d8      	adds	r0, r3, r7
 800a2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2f0:	4467      	add	r7, ip
 800a2f2:	18e1      	adds	r1, r4, r3
 800a2f4:	4643      	mov	r3, r8
 800a2f6:	5d5e      	ldrb	r6, [r3, r5]
							if(longMessage){
 800a2f8:	4b2b      	ldr	r3, [pc, #172]	; (800a3a8 <PxMessagingTask+0x3ac>)
 800a2fa:	b2bf      	uxth	r7, r7
 800a2fc:	781c      	ldrb	r4, [r3, #0]
 800a2fe:	4459      	add	r1, fp
 800a300:	2c00      	cmp	r4, #0
 800a302:	d101      	bne.n	800a308 <PxMessagingTask+0x30c>
 800a304:	f000 fc76 	bl	800abf4 <PxMessagingTask+0xbf8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a308:	f008 fe5d 	bl	8012fc6 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a30c:	4b33      	ldr	r3, [pc, #204]	; (800a3dc <PxMessagingTask+0x3e0>)
 800a30e:	801f      	strh	r7, [r3, #0]
 800a310:	2700      	movs	r7, #0
 800a312:	e71d      	b.n	800a150 <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a314:	9b06      	ldr	r3, [sp, #24]
 800a316:	1b5b      	subs	r3, r3, r5
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	445b      	add	r3, fp
 800a31c:	5d1b      	ldrb	r3, [r3, r4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <PxMessagingTask+0x32a>
 800a322:	f000 fc0c 	bl	800ab3e <PxMessagingTask+0xb42>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a326:	9b05      	ldr	r3, [sp, #20]
 800a328:	469c      	mov	ip, r3
 800a32a:	4464      	add	r4, ip
 800a32c:	78a3      	ldrb	r3, [r4, #2]
 800a32e:	78e2      	ldrb	r2, [r4, #3]
 800a330:	061b      	lsls	r3, r3, #24
 800a332:	0412      	lsls	r2, r2, #16
 800a334:	189b      	adds	r3, r3, r2
 800a336:	7962      	ldrb	r2, [r4, #5]
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	7922      	ldrb	r2, [r4, #4]
 800a33c:	0212      	lsls	r2, r2, #8
 800a33e:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a340:	7862      	ldrb	r2, [r4, #1]
 800a342:	3a01      	subs	r2, #1
 800a344:	b2d2      	uxtb	r2, r2
 800a346:	2a07      	cmp	r2, #7
 800a348:	d900      	bls.n	800a34c <PxMessagingTask+0x350>
 800a34a:	e6fe      	b.n	800a14a <PxMessagingTask+0x14e>
 800a34c:	4925      	ldr	r1, [pc, #148]	; (800a3e4 <PxMessagingTask+0x3e8>)
 800a34e:	0092      	lsls	r2, r2, #2
 800a350:	588a      	ldr	r2, [r1, r2]
 800a352:	4697      	mov	pc, r2
							ExploreNeighbors(port);
 800a354:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a356:	f7f9 fa3f 	bl	80037d8 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a35a:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a35c:	2401      	movs	r4, #1
							temp =0;
 800a35e:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 800a360:	4a16      	ldr	r2, [pc, #88]	; (800a3bc <PxMessagingTask+0x3c0>)
							osDelay(10);
 800a362:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 800a364:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a366:	f003 f9f9 	bl	800d75c <osDelay>
 800a36a:	4e1f      	ldr	r6, [pc, #124]	; (800a3e8 <PxMessagingTask+0x3ec>)
								if(neighbors[p - 1][0]){
 800a36c:	8833      	ldrh	r3, [r6, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d009      	beq.n	800a386 <PxMessagingTask+0x38a>
									messageParams[temp] =p;
 800a372:	4653      	mov	r3, sl
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a374:	1c78      	adds	r0, r7, #1
 800a376:	4450      	add	r0, sl
 800a378:	2204      	movs	r2, #4
 800a37a:	0031      	movs	r1, r6
									messageParams[temp] =p;
 800a37c:	55dc      	strb	r4, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a37e:	f008 fe22 	bl	8012fc6 <memcpy>
									temp +=5;
 800a382:	3705      	adds	r7, #5
 800a384:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a386:	3401      	adds	r4, #1
 800a388:	b2e4      	uxtb	r4, r4
 800a38a:	3604      	adds	r6, #4
 800a38c:	2c07      	cmp	r4, #7
 800a38e:	d1ed      	bne.n	800a36c <PxMessagingTask+0x370>
 800a390:	9709      	str	r7, [sp, #36]	; 0x24
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a392:	b2ba      	uxth	r2, r7
 800a394:	210d      	movs	r1, #13
 800a396:	e7a0      	b.n	800a2da <PxMessagingTask+0x2de>
 800a398:	20000c90 	.word	0x20000c90
 800a39c:	20000c50 	.word	0x20000c50
 800a3a0:	20000c40 	.word	0x20000c40
 800a3a4:	20000b3c 	.word	0x20000b3c
 800a3a8:	20000c4c 	.word	0x20000c4c
 800a3ac:	20007028 	.word	0x20007028
 800a3b0:	200019d8 	.word	0x200019d8
 800a3b4:	20000c48 	.word	0x20000c48
 800a3b8:	08017b98 	.word	0x08017b98
 800a3bc:	2000117e 	.word	0x2000117e
 800a3c0:	20000c2c 	.word	0x20000c2c
 800a3c4:	20001a58 	.word	0x20001a58
 800a3c8:	08018964 	.word	0x08018964
 800a3cc:	2000117d 	.word	0x2000117d
 800a3d0:	08017c50 	.word	0x08017c50
 800a3d4:	2000117c 	.word	0x2000117c
 800a3d8:	20007588 	.word	0x20007588
 800a3dc:	20000c4a 	.word	0x20000c4a
 800a3e0:	20001ab0 	.word	0x20001ab0
 800a3e4:	08017d00 	.word	0x08017d00
 800a3e8:	20001164 	.word	0x20001164
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a3ec:	9b06      	ldr	r3, [sp, #24]
 800a3ee:	9904      	ldr	r1, [sp, #16]
 800a3f0:	1b5b      	subs	r3, r3, r5
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	445b      	add	r3, fp
 800a3f6:	1918      	adds	r0, r3, r4
 800a3f8:	7882      	ldrb	r2, [r0, #2]
 800a3fa:	0209      	lsls	r1, r1, #8
 800a3fc:	4ed7      	ldr	r6, [pc, #860]	; (800a75c <PxMessagingTask+0x760>)
 800a3fe:	1852      	adds	r2, r2, r1
 800a400:	9910      	ldr	r1, [sp, #64]	; 0x40
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a402:	2700      	movs	r7, #0
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a404:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a406:	468c      	mov	ip, r1
 800a408:	0032      	movs	r2, r6
 800a40a:	5d19      	ldrb	r1, [r3, r4]
 800a40c:	7843      	ldrb	r3, [r0, #1]
 800a40e:	0209      	lsls	r1, r1, #8
 800a410:	4462      	add	r2, ip
 800a412:	185b      	adds	r3, r3, r1
 800a414:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 800a416:	4652      	mov	r2, sl
 800a418:	4bd1      	ldr	r3, [pc, #836]	; (800a760 <PxMessagingTask+0x764>)
							messageParams[2] =port;
 800a41a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 800a41c:	881b      	ldrh	r3, [r3, #0]
							osDelay(2);
 800a41e:	2002      	movs	r0, #2
							messageParams[1] =(uint8_t )myPN;
 800a420:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a422:	0a1b      	lsrs	r3, r3, #8
 800a424:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a426:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a428:	f003 f998 	bl	800d75c <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a42c:	2303      	movs	r3, #3
 800a42e:	2200      	movs	r2, #0
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	2100      	movs	r1, #0
 800a434:	3308      	adds	r3, #8
 800a436:	0020      	movs	r0, r4
 800a438:	f7ff f8a8 	bl	800958c <SendMessageFromPort>
 800a43c:	4643      	mov	r3, r8
 800a43e:	5d5e      	ldrb	r6, [r3, r5]
 800a440:	e686      	b.n	800a150 <PxMessagingTask+0x154>
							IND_toggle();
 800a442:	2180      	movs	r1, #128	; 0x80
 800a444:	48c7      	ldr	r0, [pc, #796]	; (800a764 <PxMessagingTask+0x768>)
 800a446:	01c9      	lsls	r1, r1, #7
 800a448:	f006 fdac 	bl	8010fa4 <HAL_GPIO_TogglePin>
 800a44c:	e67d      	b.n	800a14a <PxMessagingTask+0x14e>
							IND_OFF();
 800a44e:	2200      	movs	r2, #0
 800a450:	2180      	movs	r1, #128	; 0x80
 800a452:	48c4      	ldr	r0, [pc, #784]	; (800a764 <PxMessagingTask+0x768>)
 800a454:	01c9      	lsls	r1, r1, #7
 800a456:	f006 fd9f 	bl	8010f98 <HAL_GPIO_WritePin>
 800a45a:	e676      	b.n	800a14a <PxMessagingTask+0x14e>
							IND_ON();
 800a45c:	2201      	movs	r2, #1
 800a45e:	e7f7      	b.n	800a450 <PxMessagingTask+0x454>
							if(!moduleAlias[myID][0])
 800a460:	4bc1      	ldr	r3, [pc, #772]	; (800a768 <PxMessagingTask+0x76c>)
 800a462:	781a      	ldrb	r2, [r3, #0]
 800a464:	0093      	lsls	r3, r2, #2
 800a466:	189b      	adds	r3, r3, r2
 800a468:	4ac0      	ldr	r2, [pc, #768]	; (800a76c <PxMessagingTask+0x770>)
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	5cd3      	ldrb	r3, [r2, r3]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <PxMessagingTask+0x47a>
 800a472:	f000 fd8f 	bl	800af94 <PxMessagingTask+0xf98>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a476:	48be      	ldr	r0, [pc, #760]	; (800a770 <PxMessagingTask+0x774>)
 800a478:	9a04      	ldr	r2, [sp, #16]
 800a47a:	301c      	adds	r0, #28
 800a47c:	49bd      	ldr	r1, [pc, #756]	; (800a774 <PxMessagingTask+0x778>)
 800a47e:	f008 ffa5 	bl	80133cc <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a482:	4cbb      	ldr	r4, [pc, #748]	; (800a770 <PxMessagingTask+0x774>)
 800a484:	341c      	adds	r4, #28
 800a486:	0020      	movs	r0, r4
 800a488:	f7f5 fe46 	bl	8000118 <strlen>
 800a48c:	4bba      	ldr	r3, [pc, #744]	; (800a778 <PxMessagingTask+0x77c>)
 800a48e:	b282      	uxth	r2, r0
 800a490:	7818      	ldrb	r0, [r3, #0]
 800a492:	2301      	movs	r3, #1
 800a494:	425b      	negs	r3, r3
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	0021      	movs	r1, r4
 800a49a:	3333      	adds	r3, #51	; 0x33
 800a49c:	f003 f812 	bl	800d4c4 <writePxMutex>
							responseStatus =BOS_OK;
 800a4a0:	2300      	movs	r3, #0
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a4a2:	4ab6      	ldr	r2, [pc, #728]	; (800a77c <PxMessagingTask+0x780>)
 800a4a4:	2700      	movs	r7, #0
 800a4a6:	7013      	strb	r3, [r2, #0]
 800a4a8:	4643      	mov	r3, r8
 800a4aa:	5d5e      	ldrb	r6, [r3, r5]
 800a4ac:	e650      	b.n	800a150 <PxMessagingTask+0x154>
							indMode =IND_PING;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4ab3      	ldr	r2, [pc, #716]	; (800a780 <PxMessagingTask+0x784>)
							osDelay(10);
 800a4b2:	200a      	movs	r0, #10
							indMode =IND_PING;
 800a4b4:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a4b6:	f003 f951 	bl	800d75c <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a4ba:	2240      	movs	r2, #64	; 0x40
 800a4bc:	4bb1      	ldr	r3, [pc, #708]	; (800a784 <PxMessagingTask+0x788>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	4393      	bics	r3, r2
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d000      	beq.n	800a4c8 <PxMessagingTask+0x4cc>
 800a4c6:	e640      	b.n	800a14a <PxMessagingTask+0x14e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2102      	movs	r1, #2
 800a4cc:	e705      	b.n	800a2da <PxMessagingTask+0x2de>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d2:	469c      	mov	ip, r3
 800a4d4:	9b06      	ldr	r3, [sp, #24]
 800a4d6:	1c61      	adds	r1, r4, #1
 800a4d8:	1b5b      	subs	r3, r3, r5
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	445b      	add	r3, fp
 800a4de:	5d18      	ldrb	r0, [r3, r4]
 800a4e0:	230a      	movs	r3, #10
 800a4e2:	4461      	add	r1, ip
 800a4e4:	3a01      	subs	r2, #1
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	b292      	uxth	r2, r2
 800a4ea:	4459      	add	r1, fp
 800a4ec:	f002 ffea 	bl	800d4c4 <writePxMutex>
 800a4f0:	4643      	mov	r3, r8
 800a4f2:	2700      	movs	r7, #0
 800a4f4:	5d5e      	ldrb	r6, [r3, r5]
 800a4f6:	e62b      	b.n	800a150 <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a4f8:	9b06      	ldr	r3, [sp, #24]
 800a4fa:	1b5b      	subs	r3, r3, r5
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	445b      	add	r3, fp
 800a500:	5d1b      	ldrb	r3, [r3, r4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d000      	beq.n	800a508 <PxMessagingTask+0x50c>
 800a506:	e342      	b.n	800ab8e <PxMessagingTask+0xb92>
								myID =cMessage[port - 1][1 + shift];
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	4a97      	ldr	r2, [pc, #604]	; (800a768 <PxMessagingTask+0x76c>)
 800a50c:	469c      	mov	ip, r3
 800a50e:	4464      	add	r4, ip
 800a510:	7863      	ldrb	r3, [r4, #1]
 800a512:	2700      	movs	r7, #0
 800a514:	7013      	strb	r3, [r2, #0]
 800a516:	4643      	mov	r3, r8
 800a518:	5d5e      	ldrb	r6, [r3, r5]
 800a51a:	e619      	b.n	800a150 <PxMessagingTask+0x154>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a51c:	9b06      	ldr	r3, [sp, #24]
 800a51e:	1b5b      	subs	r3, r3, r5
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	445b      	add	r3, fp
 800a524:	5d1f      	ldrb	r7, [r3, r4]
 800a526:	191b      	adds	r3, r3, r4
 800a528:	78da      	ldrb	r2, [r3, #3]
 800a52a:	063f      	lsls	r7, r7, #24
 800a52c:	18bf      	adds	r7, r7, r2
 800a52e:	785a      	ldrb	r2, [r3, #1]
 800a530:	0412      	lsls	r2, r2, #16
 800a532:	18bf      	adds	r7, r7, r2
 800a534:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a536:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a538:	0212      	lsls	r2, r2, #8
 800a53a:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a53c:	9309      	str	r3, [sp, #36]	; 0x24
 800a53e:	2bff      	cmp	r3, #255	; 0xff
 800a540:	d100      	bne.n	800a544 <PxMessagingTask+0x548>
 800a542:	e31a      	b.n	800ab7a <PxMessagingTask+0xb7e>
								for(p =0; p < numOfParams; p++){
 800a544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a546:	2a00      	cmp	r2, #0
 800a548:	d100      	bne.n	800a54c <PxMessagingTask+0x550>
 800a54a:	e371      	b.n	800ac30 <PxMessagingTask+0xc34>
 800a54c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a54e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a550:	191e      	adds	r6, r3, r4
 800a552:	465b      	mov	r3, fp
 800a554:	468c      	mov	ip, r1
 800a556:	3305      	adds	r3, #5
 800a558:	4463      	add	r3, ip
 800a55a:	191c      	adds	r4, r3, r4
 800a55c:	0013      	movs	r3, r2
 800a55e:	3b01      	subs	r3, #1
 800a560:	b2db      	uxtb	r3, r3
 800a562:	18e4      	adds	r4, r4, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a566:	445e      	add	r6, fp
 800a568:	3b01      	subs	r3, #1
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d90a      	bls.n	800a586 <PxMessagingTask+0x58a>
								for(p =0; p < numOfParams; p++){
 800a570:	42b4      	cmp	r4, r6
 800a572:	d100      	bne.n	800a576 <PxMessagingTask+0x57a>
 800a574:	e5e9      	b.n	800a14a <PxMessagingTask+0x14e>
 800a576:	7833      	ldrb	r3, [r6, #0]
 800a578:	3601      	adds	r6, #1
 800a57a:	9309      	str	r3, [sp, #36]	; 0x24
									if(temp > 0 && temp <= NumOfPorts){
 800a57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57e:	3b01      	subs	r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b05      	cmp	r3, #5
 800a584:	d8f4      	bhi.n	800a570 <PxMessagingTask+0x574>
										UpdateBaudrate(temp,temp32);
 800a586:	0039      	movs	r1, r7
 800a588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a58a:	f003 f811 	bl	800d5b0 <UpdateBaudrate>
 800a58e:	e7ef      	b.n	800a570 <PxMessagingTask+0x574>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a590:	2601      	movs	r6, #1
 800a592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a594:	18e7      	adds	r7, r4, r3
 800a596:	445f      	add	r7, fp
								if(p != port)
 800a598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a59a:	42b3      	cmp	r3, r6
 800a59c:	d005      	beq.n	800a5aa <PxMessagingTask+0x5ae>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a59e:	0030      	movs	r0, r6
 800a5a0:	f003 f818 	bl	800d5d4 <GetUart>
 800a5a4:	7839      	ldrb	r1, [r7, #0]
 800a5a6:	f003 f821 	bl	800d5ec <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	b2f6      	uxtb	r6, r6
 800a5ae:	3701      	adds	r7, #1
 800a5b0:	2e07      	cmp	r6, #7
 800a5b2:	d1f1      	bne.n	800a598 <PxMessagingTask+0x59c>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a5b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a5b6:	f003 f80d 	bl	800d5d4 <GetUart>
 800a5ba:	9b06      	ldr	r3, [sp, #24]
 800a5bc:	2700      	movs	r7, #0
 800a5be:	1b5b      	subs	r3, r3, r5
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	445b      	add	r3, fp
 800a5c4:	191c      	adds	r4, r3, r4
 800a5c6:	7aa1      	ldrb	r1, [r4, #10]
 800a5c8:	f003 f810 	bl	800d5ec <SwapUartPins>
 800a5cc:	4643      	mov	r3, r8
 800a5ce:	5d5e      	ldrb	r6, [r3, r5]
 800a5d0:	e5be      	b.n	800a150 <PxMessagingTask+0x154>
							temp =numOfParams / 5;
 800a5d2:	2105      	movs	r1, #5
 800a5d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5d6:	f7f5 fdbb 	bl	8000150 <__udivsi3>
 800a5da:	b2c2      	uxtb	r2, r0
 800a5dc:	9209      	str	r2, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	d100      	bne.n	800a5e4 <PxMessagingTask+0x5e8>
 800a5e2:	e660      	b.n	800a2a6 <PxMessagingTask+0x2aa>
 800a5e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a5e6:	465b      	mov	r3, fp
 800a5e8:	468c      	mov	ip, r1
 800a5ea:	3305      	adds	r3, #5
 800a5ec:	4463      	add	r3, ip
 800a5ee:	190e      	adds	r6, r1, r4
 800a5f0:	191c      	adds	r4, r3, r4
 800a5f2:	1e53      	subs	r3, r2, #1
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	009a      	lsls	r2, r3, #2
 800a5f8:	18d3      	adds	r3, r2, r3
 800a5fa:	445e      	add	r6, fp
 800a5fc:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a5fe:	4b62      	ldr	r3, [pc, #392]	; (800a788 <PxMessagingTask+0x78c>)
 800a600:	7830      	ldrb	r0, [r6, #0]
 800a602:	469c      	mov	ip, r3
 800a604:	3801      	subs	r0, #1
 800a606:	0080      	lsls	r0, r0, #2
 800a608:	1c71      	adds	r1, r6, #1
 800a60a:	4460      	add	r0, ip
 800a60c:	2204      	movs	r2, #4
 800a60e:	3605      	adds	r6, #5
 800a610:	f008 fcd9 	bl	8012fc6 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a614:	42b4      	cmp	r4, r6
 800a616:	d1f2      	bne.n	800a5fe <PxMessagingTask+0x602>
							responseStatus =BOS_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	e742      	b.n	800a4a2 <PxMessagingTask+0x4a6>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a61c:	9b06      	ldr	r3, [sp, #24]
 800a61e:	9904      	ldr	r1, [sp, #16]
 800a620:	1b5b      	subs	r3, r3, r5
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	445b      	add	r3, fp
 800a626:	1918      	adds	r0, r3, r4
 800a628:	7882      	ldrb	r2, [r0, #2]
 800a62a:	0209      	lsls	r1, r1, #8
 800a62c:	1852      	adds	r2, r2, r1
 800a62e:	4e4b      	ldr	r6, [pc, #300]	; (800a75c <PxMessagingTask+0x760>)
 800a630:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a632:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a634:	468c      	mov	ip, r1
 800a636:	0032      	movs	r2, r6
 800a638:	5d19      	ldrb	r1, [r3, r4]
 800a63a:	7843      	ldrb	r3, [r0, #1]
 800a63c:	0209      	lsls	r1, r1, #8
 800a63e:	185b      	adds	r3, r3, r1
 800a640:	4462      	add	r2, ip
 800a642:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	e72c      	b.n	800a4a2 <PxMessagingTask+0x4a6>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a648:	4b50      	ldr	r3, [pc, #320]	; (800a78c <PxMessagingTask+0x790>)
 800a64a:	4a51      	ldr	r2, [pc, #324]	; (800a790 <PxMessagingTask+0x794>)
							osDelay(10);
 800a64c:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a64e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a650:	2301      	movs	r3, #1
 800a652:	4a4b      	ldr	r2, [pc, #300]	; (800a780 <PxMessagingTask+0x784>)
 800a654:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a656:	f003 f881 	bl	800d75c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	4b4d      	ldr	r3, [pc, #308]	; (800a794 <PxMessagingTask+0x798>)
 800a660:	4a4d      	ldr	r2, [pc, #308]	; (800a798 <PxMessagingTask+0x79c>)
 800a662:	60da      	str	r2, [r3, #12]
 800a664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a668:	46c0      	nop			; (mov r8, r8)
 800a66a:	e7fd      	b.n	800a668 <PxMessagingTask+0x66c>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a66c:	f003 f982 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
 800a670:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a672:	f7f5 fd51 	bl	8000118 <strlen>
 800a676:	2100      	movs	r1, #0
 800a678:	0002      	movs	r2, r0
 800a67a:	0030      	movs	r0, r6
 800a67c:	f008 fcac 	bl	8012fd8 <memset>
 800a680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a682:	18e1      	adds	r1, r4, r3
							if(longMessage){
 800a684:	4b45      	ldr	r3, [pc, #276]	; (800a79c <PxMessagingTask+0x7a0>)
 800a686:	4459      	add	r1, fp
 800a688:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a68a:	4b45      	ldr	r3, [pc, #276]	; (800a7a0 <PxMessagingTask+0x7a4>)
 800a68c:	8818      	ldrh	r0, [r3, #0]
 800a68e:	1830      	adds	r0, r6, r0
							if(longMessage){
 800a690:	2f00      	cmp	r7, #0
 800a692:	d100      	bne.n	800a696 <PxMessagingTask+0x69a>
 800a694:	e29b      	b.n	800abce <PxMessagingTask+0xbd2>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a696:	9c0c      	ldr	r4, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 800a698:	2700      	movs	r7, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a69a:	0022      	movs	r2, r4
 800a69c:	f008 fc93 	bl	8012fc6 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6a0:	46a4      	mov	ip, r4
 800a6a2:	4b3f      	ldr	r3, [pc, #252]	; (800a7a0 <PxMessagingTask+0x7a4>)
 800a6a4:	881a      	ldrh	r2, [r3, #0]
 800a6a6:	4b3e      	ldr	r3, [pc, #248]	; (800a7a0 <PxMessagingTask+0x7a4>)
 800a6a8:	4462      	add	r2, ip
 800a6aa:	801a      	strh	r2, [r3, #0]
 800a6ac:	4643      	mov	r3, r8
 800a6ae:	5d5e      	ldrb	r6, [r3, r5]
 800a6b0:	e54e      	b.n	800a150 <PxMessagingTask+0x154>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a6b2:	f003 f95f 	bl	800d974 <FreeRTOS_CLIGetOutputBuffer>
 800a6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6b8:	0006      	movs	r6, r0
 800a6ba:	18e1      	adds	r1, r4, r3
							if(dst == BOS_BROADCAST)
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	4459      	add	r1, fp
 800a6c0:	2bff      	cmp	r3, #255	; 0xff
 800a6c2:	d100      	bne.n	800a6c6 <PxMessagingTask+0x6ca>
 800a6c4:	e214      	b.n	800aaf0 <PxMessagingTask+0xaf4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a6c6:	482a      	ldr	r0, [pc, #168]	; (800a770 <PxMessagingTask+0x774>)
							else if(dst == BOS_MULTICAST)
 800a6c8:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a6ca:	306c      	adds	r0, #108	; 0x6c
							else if(dst == BOS_MULTICAST)
 800a6cc:	2bfe      	cmp	r3, #254	; 0xfe
 800a6ce:	d100      	bne.n	800a6d2 <PxMessagingTask+0x6d6>
 800a6d0:	e276      	b.n	800abc0 <PxMessagingTask+0xbc4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d4:	f008 fc77 	bl	8012fc6 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6d8:	4f25      	ldr	r7, [pc, #148]	; (800a770 <PxMessagingTask+0x774>)
 800a6da:	376c      	adds	r7, #108	; 0x6c
 800a6dc:	e001      	b.n	800a6e2 <PxMessagingTask+0x6e6>
							} while(xReturned != pdFALSE);
 800a6de:	2c00      	cmp	r4, #0
 800a6e0:	d028      	beq.n	800a734 <PxMessagingTask+0x738>
								PcPort =port;
 800a6e2:	4a25      	ldr	r2, [pc, #148]	; (800a778 <PxMessagingTask+0x77c>)
 800a6e4:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 800a6e6:	4b24      	ldr	r3, [pc, #144]	; (800a778 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6e8:	0038      	movs	r0, r7
								temp =PcPort;
 800a6ea:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 800a6ec:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6ee:	2299      	movs	r2, #153	; 0x99
 800a6f0:	0031      	movs	r1, r6
 800a6f2:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 800a6f4:	9309      	str	r3, [sp, #36]	; 0x24
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6f6:	f003 f8c5 	bl	800d884 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 800a6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fc:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6fe:	0004      	movs	r4, r0
								PcPort =temp;
 800a700:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a702:	4b20      	ldr	r3, [pc, #128]	; (800a784 <PxMessagingTask+0x788>)
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b60      	cmp	r3, #96	; 0x60
 800a708:	d1e9      	bne.n	800a6de <PxMessagingTask+0x6e2>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a70a:	0030      	movs	r0, r6
 800a70c:	f7f5 fd04 	bl	8000118 <strlen>
 800a710:	0031      	movs	r1, r6
 800a712:	0002      	movs	r2, r0
 800a714:	4650      	mov	r0, sl
 800a716:	f008 fc56 	bl	8012fc6 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a71a:	0030      	movs	r0, r6
 800a71c:	f7f5 fcfc 	bl	8000118 <strlen>
 800a720:	2118      	movs	r1, #24
 800a722:	b282      	uxth	r2, r0
 800a724:	9804      	ldr	r0, [sp, #16]
 800a726:	f7ff f991 	bl	8009a4c <SendMessageToModule>
									osDelay(10);
 800a72a:	200a      	movs	r0, #10
 800a72c:	f003 f816 	bl	800d75c <osDelay>
							} while(xReturned != pdFALSE);
 800a730:	2c00      	cmp	r4, #0
 800a732:	d1d6      	bne.n	800a6e2 <PxMessagingTask+0x6e6>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a734:	480e      	ldr	r0, [pc, #56]	; (800a770 <PxMessagingTask+0x774>)
 800a736:	2232      	movs	r2, #50	; 0x32
 800a738:	306c      	adds	r0, #108	; 0x6c
 800a73a:	2100      	movs	r1, #0
 800a73c:	f008 fc4c 	bl	8012fd8 <memset>
 800a740:	4643      	mov	r3, r8
 800a742:	2700      	movs	r7, #0
 800a744:	5d5e      	ldrb	r6, [r3, r5]
 800a746:	e503      	b.n	800a150 <PxMessagingTask+0x154>
							ClearEEportsDir();
 800a748:	f7f8 ff56 	bl	80035f8 <ClearEEportsDir>
							ClearROtopology();
 800a74c:	f000 ffa8 	bl	800b6a0 <ClearROtopology>
							osDelay(100);
 800a750:	2064      	movs	r0, #100	; 0x64
 800a752:	f003 f803 	bl	800d75c <osDelay>
							indMode =IND_TOPOLOGY;
 800a756:	2302      	movs	r3, #2
 800a758:	e4f5      	b.n	800a146 <PxMessagingTask+0x14a>
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	20001164 	.word	0x20001164
 800a760:	20000030 	.word	0x20000030
 800a764:	48000400 	.word	0x48000400
 800a768:	20000a98 	.word	0x20000a98
 800a76c:	20000dfc 	.word	0x20000dfc
 800a770:	200019d8 	.word	0x200019d8
 800a774:	0801943c 	.word	0x0801943c
 800a778:	20000c28 	.word	0x20000c28
 800a77c:	20000c3c 	.word	0x20000c3c
 800a780:	2000117e 	.word	0x2000117e
 800a784:	20007028 	.word	0x20007028
 800a788:	2000114c 	.word	0x2000114c
 800a78c:	20007ff0 	.word	0x20007ff0
 800a790:	deadbeef 	.word	0xdeadbeef
 800a794:	e000ed00 	.word	0xe000ed00
 800a798:	05fa0004 	.word	0x05fa0004
 800a79c:	20000c4c 	.word	0x20000c4c
 800a7a0:	20000c4a 	.word	0x20000c4a
							temp =cMessage[port - 1][11 + shift];
 800a7a4:	230b      	movs	r3, #11
 800a7a6:	469c      	mov	ip, r3
 800a7a8:	44a4      	add	ip, r4
 800a7aa:	4662      	mov	r2, ip
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	9204      	str	r2, [sp, #16]
 800a7b0:	1b5b      	subs	r3, r3, r5
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	445b      	add	r3, fp
 800a7b6:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 800a7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ba:	2a0f      	cmp	r2, #15
 800a7bc:	d100      	bne.n	800a7c0 <PxMessagingTask+0x7c4>
 800a7be:	e22c      	b.n	800ac1a <PxMessagingTask+0xc1e>
							if(numOfParams == 17)
 800a7c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 800a7c2:	0019      	movs	r1, r3
							if(numOfParams == 17)
 800a7c4:	2a11      	cmp	r2, #17
 800a7c6:	d101      	bne.n	800a7cc <PxMessagingTask+0x7d0>
 800a7c8:	f000 fd1b 	bl	800b202 <PxMessagingTask+0x1206>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a7cc:	9f06      	ldr	r7, [sp, #24]
 800a7ce:	1ca2      	adds	r2, r4, #2
 800a7d0:	9208      	str	r2, [sp, #32]
 800a7d2:	1b7a      	subs	r2, r7, r5
 800a7d4:	00d2      	lsls	r2, r2, #3
 800a7d6:	445a      	add	r2, fp
 800a7d8:	1ce0      	adds	r0, r4, #3
 800a7da:	5d17      	ldrb	r7, [r2, r4]
 800a7dc:	9009      	str	r0, [sp, #36]	; 0x24
 800a7de:	5c10      	ldrb	r0, [r2, r0]
 800a7e0:	1c66      	adds	r6, r4, #1
 800a7e2:	063f      	lsls	r7, r7, #24
 800a7e4:	183f      	adds	r7, r7, r0
 800a7e6:	5d90      	ldrb	r0, [r2, r6]
 800a7e8:	9607      	str	r6, [sp, #28]
 800a7ea:	0400      	lsls	r0, r0, #16
 800a7ec:	183f      	adds	r7, r7, r0
 800a7ee:	1ca0      	adds	r0, r4, #2
 800a7f0:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a7f2:	1d66      	adds	r6, r4, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a7f4:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a7f6:	9612      	str	r6, [sp, #72]	; 0x48
 800a7f8:	1da6      	adds	r6, r4, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a7fa:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a7fc:	9613      	str	r6, [sp, #76]	; 0x4c
 800a7fe:	1d20      	adds	r0, r4, #4
 800a800:	1de6      	adds	r6, r4, #7
 800a802:	9011      	str	r0, [sp, #68]	; 0x44
 800a804:	9614      	str	r6, [sp, #80]	; 0x50
 800a806:	5c16      	ldrb	r6, [r2, r0]
 800a808:	1d60      	adds	r0, r4, #5
 800a80a:	5c10      	ldrb	r0, [r2, r0]
 800a80c:	0636      	lsls	r6, r6, #24
 800a80e:	0400      	lsls	r0, r0, #16
 800a810:	1836      	adds	r6, r6, r0
 800a812:	1de0      	adds	r0, r4, #7
 800a814:	5c10      	ldrb	r0, [r2, r0]
 800a816:	1836      	adds	r6, r6, r0
 800a818:	1da0      	adds	r0, r4, #6
 800a81a:	5c10      	ldrb	r0, [r2, r0]
 800a81c:	0200      	lsls	r0, r0, #8
 800a81e:	1836      	adds	r6, r6, r0
 800a820:	2009      	movs	r0, #9
 800a822:	4684      	mov	ip, r0
 800a824:	44a4      	add	ip, r4
 800a826:	4660      	mov	r0, ip
 800a828:	9015      	str	r0, [sp, #84]	; 0x54
							if(temp == false){
 800a82a:	2900      	cmp	r1, #0
 800a82c:	d001      	beq.n	800a832 <PxMessagingTask+0x836>
 800a82e:	f000 fc8f 	bl	800b150 <PxMessagingTask+0x1154>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a832:	5c12      	ldrb	r2, [r2, r0]
 800a834:	2a00      	cmp	r2, #0
 800a836:	d00e      	beq.n	800a856 <PxMessagingTask+0x85a>
 800a838:	9905      	ldr	r1, [sp, #20]
 800a83a:	1908      	adds	r0, r1, r4
 800a83c:	7a81      	ldrb	r1, [r0, #10]
 800a83e:	2900      	cmp	r1, #0
 800a840:	d009      	beq.n	800a856 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a842:	0013      	movs	r3, r2
 800a844:	7a00      	ldrb	r0, [r0, #8]
 800a846:	0032      	movs	r2, r6
 800a848:	9100      	str	r1, [sp, #0]
 800a84a:	0039      	movs	r1, r7
 800a84c:	f7fe fdaa 	bl	80093a4 <SetupDMAStreams>
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	9a04      	ldr	r2, [sp, #16]
 800a854:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <PxMessagingTask+0x874>
 800a85a:	9a05      	ldr	r2, [sp, #20]
 800a85c:	1911      	adds	r1, r2, r4
 800a85e:	7b0a      	ldrb	r2, [r1, #12]
 800a860:	2a00      	cmp	r2, #0
 800a862:	d005      	beq.n	800a870 <PxMessagingTask+0x874>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a864:	7a08      	ldrb	r0, [r1, #8]
 800a866:	9200      	str	r2, [sp, #0]
 800a868:	0039      	movs	r1, r7
 800a86a:	0032      	movs	r2, r6
 800a86c:	f7fe fd9a 	bl	80093a4 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a870:	9b06      	ldr	r3, [sp, #24]
 800a872:	1b5b      	subs	r3, r3, r5
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	445b      	add	r3, fp
 800a878:	191b      	adds	r3, r3, r4
 800a87a:	7b5b      	ldrb	r3, [r3, #13]
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d100      	bne.n	800a884 <PxMessagingTask+0x888>
 800a882:	e462      	b.n	800a14a <PxMessagingTask+0x14e>
 800a884:	9b05      	ldr	r3, [sp, #20]
 800a886:	469c      	mov	ip, r3
 800a888:	4464      	add	r4, ip
 800a88a:	7ba3      	ldrb	r3, [r4, #14]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d000      	beq.n	800a892 <PxMessagingTask+0x896>
 800a890:	e1c7      	b.n	800ac22 <PxMessagingTask+0xc26>
 800a892:	4642      	mov	r2, r8
 800a894:	9309      	str	r3, [sp, #36]	; 0x24
 800a896:	5d56      	ldrb	r6, [r2, r5]
 800a898:	001f      	movs	r7, r3
 800a89a:	e459      	b.n	800a150 <PxMessagingTask+0x154>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a89c:	9b06      	ldr	r3, [sp, #24]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	1b5e      	subs	r6, r3, r5
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	00f6      	lsls	r6, r6, #3
 800a8a6:	445e      	add	r6, fp
 800a8a8:	5d30      	ldrb	r0, [r6, r4]
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	3319      	adds	r3, #25
 800a8b0:	f7fe fe6c 	bl	800958c <SendMessageFromPort>
							osDelay(100);
 800a8b4:	2064      	movs	r0, #100	; 0x64
 800a8b6:	f002 ff51 	bl	800d75c <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a8ba:	4ae8      	ldr	r2, [pc, #928]	; (800ac5c <PxMessagingTask+0xc60>)
 800a8bc:	5d33      	ldrb	r3, [r6, r4]
 800a8be:	7811      	ldrb	r1, [r2, #0]
 800a8c0:	9804      	ldr	r0, [sp, #16]
 800a8c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8c4:	f7f9 f93c 	bl	8003b40 <remoteBootloaderUpdate>
 800a8c8:	4643      	mov	r3, r8
 800a8ca:	2700      	movs	r7, #0
 800a8cc:	5d5e      	ldrb	r6, [r3, r5]
 800a8ce:	e43f      	b.n	800a150 <PxMessagingTask+0x154>
							responseStatus =BOS_OK; // Initialize response
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4ae3      	ldr	r2, [pc, #908]	; (800ac60 <PxMessagingTask+0xc64>)
 800a8d4:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	1b5b      	subs	r3, r3, r5
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	445b      	add	r3, fp
 800a8de:	5d1f      	ldrb	r7, [r3, r4]
 800a8e0:	2f00      	cmp	r7, #0
 800a8e2:	d100      	bne.n	800a8e6 <PxMessagingTask+0x8ea>
 800a8e4:	e2ad      	b.n	800ae42 <PxMessagingTask+0xe46>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800a8e6:	2f1e      	cmp	r7, #30
 800a8e8:	d900      	bls.n	800a8ec <PxMessagingTask+0x8f0>
 800a8ea:	e2a6      	b.n	800ae3a <PxMessagingTask+0xe3e>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8ec:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8ee:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8f0:	0592      	lsls	r2, r2, #22
 800a8f2:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8f4:	1c62      	adds	r2, r4, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8f6:	1e7e      	subs	r6, r7, #1
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8f8:	9207      	str	r2, [sp, #28]
 800a8fa:	5c8f      	ldrb	r7, [r1, r2]
 800a8fc:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8fe:	4bd9      	ldr	r3, [pc, #868]	; (800ac64 <PxMessagingTask+0xc68>)
 800a900:	00b6      	lsls	r6, r6, #2
 800a902:	599b      	ldr	r3, [r3, r6]
 800a904:	0c18      	lsrs	r0, r3, #16
 800a906:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a908:	1e7a      	subs	r2, r7, #1
 800a90a:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a90c:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a90e:	2a07      	cmp	r2, #7
 800a910:	d900      	bls.n	800a914 <PxMessagingTask+0x918>
 800a912:	e1dc      	b.n	800acce <PxMessagingTask+0xcd2>
 800a914:	49d4      	ldr	r1, [pc, #848]	; (800ac68 <PxMessagingTask+0xc6c>)
 800a916:	0092      	lsls	r2, r2, #2
 800a918:	588a      	ldr	r2, [r1, r2]
 800a91a:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800a91c:	2202      	movs	r2, #2
 800a91e:	4252      	negs	r2, r2
 800a920:	17d3      	asrs	r3, r2, #31
 800a922:	4649      	mov	r1, r9
 800a924:	6808      	ldr	r0, [r1, #0]
 800a926:	6849      	ldr	r1, [r1, #4]
 800a928:	1812      	adds	r2, r2, r0
 800a92a:	414b      	adcs	r3, r1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <PxMessagingTask+0x938>
 800a930:	f000 fc6f 	bl	800b212 <PxMessagingTask+0x1216>
 800a934:	4643      	mov	r3, r8
 800a936:	5d5e      	ldrb	r6, [r3, r5]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800a938:	4bc9      	ldr	r3, [pc, #804]	; (800ac60 <PxMessagingTask+0xc64>)
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b10      	cmp	r3, #16
 800a93e:	d101      	bne.n	800a944 <PxMessagingTask+0x948>
 800a940:	f000 fc64 	bl	800b20c <PxMessagingTask+0x1210>
								responseStatus =BOS_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	4ac6      	ldr	r2, [pc, #792]	; (800ac60 <PxMessagingTask+0xc64>)
 800a948:	2700      	movs	r7, #0
 800a94a:	7013      	strb	r3, [r2, #0]
 800a94c:	f7ff fc00 	bl	800a150 <PxMessagingTask+0x154>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	1b5b      	subs	r3, r3, r5
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	445b      	add	r3, fp
 800a958:	5d1b      	ldrb	r3, [r3, r4]
 800a95a:	e5a2      	b.n	800a4a2 <PxMessagingTask+0x4a6>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a95c:	9b06      	ldr	r3, [sp, #24]
 800a95e:	49bf      	ldr	r1, [pc, #764]	; (800ac5c <PxMessagingTask+0xc60>)
 800a960:	1b58      	subs	r0, r3, r5
 800a962:	00c0      	lsls	r0, r0, #3
 800a964:	7809      	ldrb	r1, [r1, #0]
 800a966:	4458      	add	r0, fp
 800a968:	1902      	adds	r2, r0, r4
 800a96a:	468c      	mov	ip, r1
 800a96c:	7a51      	ldrb	r1, [r2, #9]
 800a96e:	7ad7      	ldrb	r7, [r2, #11]
 800a970:	9104      	str	r1, [sp, #16]
 800a972:	7b11      	ldrb	r1, [r2, #12]
 800a974:	7a93      	ldrb	r3, [r2, #10]
 800a976:	000e      	movs	r6, r1
 800a978:	1e71      	subs	r1, r6, #1
 800a97a:	418e      	sbcs	r6, r1
 800a97c:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a97e:	7916      	ldrb	r6, [r2, #4]
 800a980:	7951      	ldrb	r1, [r2, #5]
 800a982:	0636      	lsls	r6, r6, #24
 800a984:	0409      	lsls	r1, r1, #16
 800a986:	1871      	adds	r1, r6, r1
 800a988:	79d6      	ldrb	r6, [r2, #7]
 800a98a:	1989      	adds	r1, r1, r6
 800a98c:	7996      	ldrb	r6, [r2, #6]
 800a98e:	0236      	lsls	r6, r6, #8
 800a990:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a992:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a994:	5d01      	ldrb	r1, [r0, r4]
 800a996:	78d0      	ldrb	r0, [r2, #3]
 800a998:	0609      	lsls	r1, r1, #24
 800a99a:	1809      	adds	r1, r1, r0
 800a99c:	7850      	ldrb	r0, [r2, #1]
 800a99e:	0400      	lsls	r0, r0, #16
 800a9a0:	1809      	adds	r1, r1, r0
 800a9a2:	7890      	ldrb	r0, [r2, #2]
 800a9a4:	0200      	lsls	r0, r0, #8
 800a9a6:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a9a8:	9101      	str	r1, [sp, #4]
 800a9aa:	7a12      	ldrb	r2, [r2, #8]
 800a9ac:	4661      	mov	r1, ip
 800a9ae:	9200      	str	r2, [sp, #0]
 800a9b0:	9804      	ldr	r0, [sp, #16]
 800a9b2:	003a      	movs	r2, r7
 800a9b4:	f7ff f86e 	bl	8009a94 <StartScastDMAStream>
 800a9b8:	f7ff fbc7 	bl	800a14a <PxMessagingTask+0x14e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a9bc:	4ba7      	ldr	r3, [pc, #668]	; (800ac5c <PxMessagingTask+0xc60>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d033      	beq.n	800aa2c <PxMessagingTask+0xa30>
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d02e      	beq.n	800aa26 <PxMessagingTask+0xa2a>
				ForwardReceivedMessage(port);
 800a9c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a9ca:	f7ff f81f 	bl	8009a0c <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a9ce:	4ba7      	ldr	r3, [pc, #668]	; (800ac6c <PxMessagingTask+0xc70>)
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <PxMessagingTask+0x9e0>
					indMode =IND_SHORT_BLINK;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	4aa5      	ldr	r2, [pc, #660]	; (800ac70 <PxMessagingTask+0xc74>)
 800a9da:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a9dc:	9b08      	ldr	r3, [sp, #32]
 800a9de:	2b19      	cmp	r3, #25
 800a9e0:	d071      	beq.n	800aac6 <PxMessagingTask+0xaca>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a9e2:	9b08      	ldr	r3, [sp, #32]
 800a9e4:	2b1a      	cmp	r3, #26
 800a9e6:	d000      	beq.n	800a9ea <PxMessagingTask+0x9ee>
 800a9e8:	e435      	b.n	800a256 <PxMessagingTask+0x25a>
					Delay_ms(100);
 800a9ea:	2064      	movs	r0, #100	; 0x64
 800a9ec:	f004 fe3a 	bl	800f664 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9f4:	1b5b      	subs	r3, r3, r5
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	445b      	add	r3, fp
 800a9fa:	5c9b      	ldrb	r3, [r3, r2]
 800a9fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9fe:	9907      	ldr	r1, [sp, #28]
 800aa00:	9804      	ldr	r0, [sp, #16]
 800aa02:	f7f9 f89d 	bl	8003b40 <remoteBootloaderUpdate>
 800aa06:	e426      	b.n	800a256 <PxMessagingTask+0x25a>
				longMessage =1;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4a9a      	ldr	r2, [pc, #616]	; (800ac74 <PxMessagingTask+0xc78>)
 800aa0c:	7013      	strb	r3, [r2, #0]
 800aa0e:	f7ff fb35 	bl	800a07c <PxMessagingTask+0x80>
				BOSMessaging.Acknowledgment =false;
 800aa12:	2300      	movs	r3, #0
 800aa14:	4a95      	ldr	r2, [pc, #596]	; (800ac6c <PxMessagingTask+0xc70>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800aa16:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800aa18:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800aa1a:	9804      	ldr	r0, [sp, #16]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f7ff f815 	bl	8009a4c <SendMessageToModule>
 800aa22:	f7ff fb56 	bl	800a0d2 <PxMessagingTask+0xd6>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800aa26:	9b08      	ldr	r3, [sp, #32]
 800aa28:	2b10      	cmp	r3, #16
 800aa2a:	d1cd      	bne.n	800a9c8 <PxMessagingTask+0x9cc>
 800aa2c:	4643      	mov	r3, r8
 800aa2e:	5d5e      	ldrb	r6, [r3, r5]
				if(result == BOS_OK){
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	d101      	bne.n	800aa38 <PxMessagingTask+0xa3c>
 800aa34:	f7ff fb75 	bl	800a122 <PxMessagingTask+0x126>
				}
 800aa38:	f7ff fb8a 	bl	800a150 <PxMessagingTask+0x154>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	2bfe      	cmp	r3, #254	; 0xfe
 800aa40:	d1f6      	bne.n	800aa30 <PxMessagingTask+0xa34>
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	4a8c      	ldr	r2, [pc, #560]	; (800ac78 <PxMessagingTask+0xc7c>)
 800aa46:	1b5c      	subs	r4, r3, r5
 800aa48:	00e4      	lsls	r4, r4, #3
 800aa4a:	445c      	add	r4, fp
 800aa4c:	19a3      	adds	r3, r4, r6
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800aa54:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d101      	bne.n	800aa5e <PxMessagingTask+0xa62>
 800aa5a:	f7ff fb79 	bl	800a150 <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa5e:	4a86      	ldr	r2, [pc, #536]	; (800ac78 <PxMessagingTask+0xc7c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa60:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa62:	7613      	strb	r3, [r2, #24]
 800aa64:	4a85      	ldr	r2, [pc, #532]	; (800ac7c <PxMessagingTask+0xc80>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa66:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa68:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa6a:	f7fe ff8b 	bl	8009984 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800aa6e:	4643      	mov	r3, r8
 800aa70:	2200      	movs	r2, #0
 800aa72:	5d5e      	ldrb	r6, [r3, r5]
 800aa74:	19a3      	adds	r3, r4, r6
 800aa76:	3b01      	subs	r3, #1
 800aa78:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800aa7a:	1eb0      	subs	r0, r6, #2
 800aa7c:	5c27      	ldrb	r7, [r4, r0]
 800aa7e:	9709      	str	r7, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800aa80:	2f00      	cmp	r7, #0
 800aa82:	d01d      	beq.n	800aac0 <PxMessagingTask+0xac4>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800aa84:	4b75      	ldr	r3, [pc, #468]	; (800ac5c <PxMessagingTask+0xc60>)
 800aa86:	1bc0      	subs	r0, r0, r7
 800aa88:	7819      	ldrb	r1, [r3, #0]
 800aa8a:	5c23      	ldrb	r3, [r4, r0]
 800aa8c:	428b      	cmp	r3, r1
 800aa8e:	d101      	bne.n	800aa94 <PxMessagingTask+0xa98>
 800aa90:	f7ff fb47 	bl	800a122 <PxMessagingTask+0x126>
 800aa94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aa96:	465a      	mov	r2, fp
 800aa98:	46a4      	mov	ip, r4
 800aa9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa9c:	3201      	adds	r2, #1
 800aa9e:	1e7c      	subs	r4, r7, #1
 800aaa0:	4462      	add	r2, ip
 800aaa2:	b2e4      	uxtb	r4, r4
 800aaa4:	181b      	adds	r3, r3, r0
 800aaa6:	1912      	adds	r2, r2, r4
 800aaa8:	445b      	add	r3, fp
 800aaaa:	1812      	adds	r2, r2, r0
 800aaac:	e006      	b.n	800aabc <PxMessagingTask+0xac0>
 800aaae:	3301      	adds	r3, #1
 800aab0:	1e58      	subs	r0, r3, #1
 800aab2:	7800      	ldrb	r0, [r0, #0]
 800aab4:	4288      	cmp	r0, r1
 800aab6:	d101      	bne.n	800aabc <PxMessagingTask+0xac0>
 800aab8:	f7ff fb33 	bl	800a122 <PxMessagingTask+0x126>
					for(i =0; i < temp; i++){
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d1f6      	bne.n	800aaae <PxMessagingTask+0xab2>
					result =BOS_ERR_WrongID;
 800aac0:	2766      	movs	r7, #102	; 0x66
 800aac2:	f7ff fb45 	bl	800a150 <PxMessagingTask+0x154>
					Delay_ms(100);
 800aac6:	2064      	movs	r0, #100	; 0x64
 800aac8:	f004 fdcc 	bl	800f664 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800aacc:	2300      	movs	r3, #0
 800aace:	e795      	b.n	800a9fc <PxMessagingTask+0xa00>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800aad0:	9a04      	ldr	r2, [sp, #16]
 800aad2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aad4:	9400      	str	r4, [sp, #0]
 800aad6:	9b07      	ldr	r3, [sp, #28]
 800aad8:	9808      	ldr	r0, [sp, #32]
 800aada:	f000 fe75 	bl	800b7c8 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800aade:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800aae0:	0007      	movs	r7, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800aae2:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 800aae4:	2801      	cmp	r0, #1
 800aae6:	d101      	bne.n	800aaec <PxMessagingTask+0xaf0>
 800aae8:	f7ff fbf7 	bl	800a2da <PxMessagingTask+0x2de>
 800aaec:	f7ff fbb3 	bl	800a256 <PxMessagingTask+0x25a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800aaf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaf2:	4861      	ldr	r0, [pc, #388]	; (800ac78 <PxMessagingTask+0xc7c>)
 800aaf4:	3a01      	subs	r2, #1
 800aaf6:	306c      	adds	r0, #108	; 0x6c
 800aaf8:	f008 fa65 	bl	8012fc6 <memcpy>
 800aafc:	e5ec      	b.n	800a6d8 <PxMessagingTask+0x6dc>
										messageParams[0] =*(__IO int8_t* )temp32;
 800aafe:	4652      	mov	r2, sl
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800ab04:	2201      	movs	r2, #1
											SendMessageToModule(src,
 800ab06:	211f      	movs	r1, #31
 800ab08:	f7ff fbe7 	bl	800a2da <PxMessagingTask+0x2de>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ab0c:	4651      	mov	r1, sl
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	1212      	asrs	r2, r2, #8
 800ab16:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	1412      	asrs	r2, r2, #16
 800ab1c:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab1e:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800ab20:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab22:	161b      	asrs	r3, r3, #24
 800ab24:	70cb      	strb	r3, [r1, #3]
 800ab26:	e7ee      	b.n	800ab06 <PxMessagingTask+0xb0a>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ab28:	4651      	mov	r1, sl
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ab2e:	785a      	ldrb	r2, [r3, #1]
 800ab30:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ab32:	789a      	ldrb	r2, [r3, #2]
 800ab34:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ab36:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800ab38:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ab3a:	70cb      	strb	r3, [r1, #3]
 800ab3c:	e7e3      	b.n	800ab06 <PxMessagingTask+0xb0a>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d100      	bne.n	800ab44 <PxMessagingTask+0xb48>
 800ab42:	e3ad      	b.n	800b2a0 <PxMessagingTask+0x12a4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ab44:	d801      	bhi.n	800ab4a <PxMessagingTask+0xb4e>
 800ab46:	f7ff fb00 	bl	800a14a <PxMessagingTask+0x14e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ab4a:	3b04      	subs	r3, #4
 800ab4c:	4a45      	ldr	r2, [pc, #276]	; (800ac64 <PxMessagingTask+0xc68>)
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	270f      	movs	r7, #15
 800ab52:	58d2      	ldr	r2, [r2, r3]
 800ab54:	4653      	mov	r3, sl
 800ab56:	4017      	ands	r7, r2
 800ab58:	701f      	strb	r7, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ab5a:	d100      	bne.n	800ab5e <PxMessagingTask+0xb62>
 800ab5c:	e397      	b.n	800b28e <PxMessagingTask+0x1292>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab5e:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 800ab60:	3f01      	subs	r7, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab62:	0c12      	lsrs	r2, r2, #16
 800ab64:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 800ab66:	b2ff      	uxtb	r7, r7
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab68:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800ab6a:	2f07      	cmp	r7, #7
 800ab6c:	d901      	bls.n	800ab72 <PxMessagingTask+0xb76>
 800ab6e:	f7ff faec 	bl	800a14a <PxMessagingTask+0x14e>
 800ab72:	4943      	ldr	r1, [pc, #268]	; (800ac80 <PxMessagingTask+0xc84>)
 800ab74:	00bf      	lsls	r7, r7, #2
 800ab76:	59c9      	ldr	r1, [r1, r7]
 800ab78:	468f      	mov	pc, r1
								for(p =1; p <= NumOfPorts; p++){
 800ab7a:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800ab7c:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 800ab7e:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 800ab80:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800ab82:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800ab84:	f002 fd14 	bl	800d5b0 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800ab88:	2c07      	cmp	r4, #7
 800ab8a:	d1f7      	bne.n	800ab7c <PxMessagingTask+0xb80>
 800ab8c:	e050      	b.n	800ac30 <PxMessagingTask+0xc34>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d001      	beq.n	800ab96 <PxMessagingTask+0xb9a>
 800ab92:	f7ff fada 	bl	800a14a <PxMessagingTask+0x14e>
								messageParams[0] =0; /* change own ID */
 800ab96:	2700      	movs	r7, #0
 800ab98:	4653      	mov	r3, sl
 800ab9a:	701f      	strb	r7, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	4652      	mov	r2, sl
 800aba0:	469c      	mov	ip, r3
 800aba2:	4464      	add	r4, ip
 800aba4:	7863      	ldrb	r3, [r4, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800aba6:	78a0      	ldrb	r0, [r4, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800aba8:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800abaa:	2303      	movs	r3, #3
 800abac:	003a      	movs	r2, r7
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	0039      	movs	r1, r7
 800abb2:	330d      	adds	r3, #13
 800abb4:	f7fe fcea 	bl	800958c <SendMessageFromPort>
 800abb8:	4643      	mov	r3, r8
 800abba:	5d5e      	ldrb	r6, [r3, r5]
 800abbc:	f7ff fac8 	bl	800a150 <PxMessagingTask+0x154>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800abc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc4:	1a9a      	subs	r2, r3, r2
 800abc6:	3a02      	subs	r2, #2
 800abc8:	f008 f9fd 	bl	8012fc6 <memcpy>
 800abcc:	e584      	b.n	800a6d8 <PxMessagingTask+0x6dc>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800abce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abd0:	f008 f9f9 	bl	8012fc6 <memcpy>
								longMessageLastPtr =0;
 800abd4:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <PxMessagingTask+0xc88>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800abd6:	482c      	ldr	r0, [pc, #176]	; (800ac88 <PxMessagingTask+0xc8c>)
								longMessageLastPtr =0;
 800abd8:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800abda:	4b21      	ldr	r3, [pc, #132]	; (800ac60 <PxMessagingTask+0xc64>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800abdc:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800abde:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800abe0:	2300      	movs	r3, #0
 800abe2:	001a      	movs	r2, r3
 800abe4:	0019      	movs	r1, r3
 800abe6:	f004 f96b 	bl	800eec0 <xTaskGenericNotify>
 800abea:	4643      	mov	r3, r8
 800abec:	2700      	movs	r7, #0
 800abee:	5d5e      	ldrb	r6, [r3, r5]
 800abf0:	f7ff faae 	bl	800a150 <PxMessagingTask+0x154>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800abf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abf6:	f008 f9e6 	bl	8012fc6 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800abfa:	2116      	movs	r1, #22
 800abfc:	0038      	movs	r0, r7
 800abfe:	f7f5 faa7 	bl	8000150 <__udivsi3>
 800ac02:	4b22      	ldr	r3, [pc, #136]	; (800ac8c <PxMessagingTask+0xc90>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ac04:	003a      	movs	r2, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800ac06:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ac08:	4921      	ldr	r1, [pc, #132]	; (800ac90 <PxMessagingTask+0xc94>)
 800ac0a:	4822      	ldr	r0, [pc, #136]	; (800ac94 <PxMessagingTask+0xc98>)
 800ac0c:	f008 f9db 	bl	8012fc6 <memcpy>
								longMessageLastPtr =0;
 800ac10:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <PxMessagingTask+0xc88>)
 800ac12:	2700      	movs	r7, #0
 800ac14:	801c      	strh	r4, [r3, #0]
 800ac16:	f7ff fa9b 	bl	800a150 <PxMessagingTask+0x154>
								temp =cMessage[port - 1][13 + shift];
 800ac1a:	9a05      	ldr	r2, [sp, #20]
 800ac1c:	1912      	adds	r2, r2, r4
 800ac1e:	7b51      	ldrb	r1, [r2, #13]
 800ac20:	e5d4      	b.n	800a7cc <PxMessagingTask+0x7d0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800ac22:	7a20      	ldrb	r0, [r4, #8]
 800ac24:	0032      	movs	r2, r6
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	0039      	movs	r1, r7
 800ac2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac2c:	f7fe fbba 	bl	80093a4 <SetupDMAStreams>
 800ac30:	4643      	mov	r3, r8
 800ac32:	5d5e      	ldrb	r6, [r3, r5]
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	; 0x24
 800ac38:	001f      	movs	r7, r3
 800ac3a:	f7ff fa89 	bl	800a150 <PxMessagingTask+0x154>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ac3e:	4651      	mov	r1, sl
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	0a12      	lsrs	r2, r2, #8
 800ac48:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	0c12      	lsrs	r2, r2, #16
 800ac4e:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac50:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800ac52:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac54:	0e1b      	lsrs	r3, r3, #24
 800ac56:	70cb      	strb	r3, [r1, #3]
 800ac58:	e755      	b.n	800ab06 <PxMessagingTask+0xb0a>
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	20000a98 	.word	0x20000a98
 800ac60:	20000c3c 	.word	0x20000c3c
 800ac64:	20007030 	.word	0x20007030
 800ac68:	08017d20 	.word	0x08017d20
 800ac6c:	20007028 	.word	0x20007028
 800ac70:	2000117e 	.word	0x2000117e
 800ac74:	20000c4c 	.word	0x20000c4c
 800ac78:	200019d8 	.word	0x200019d8
 800ac7c:	20000c48 	.word	0x20000c48
 800ac80:	08017d40 	.word	0x08017d40
 800ac84:	20000c4a 	.word	0x20000c4a
 800ac88:	2000181c 	.word	0x2000181c
 800ac8c:	20000008 	.word	0x20000008
 800ac90:	20001ab0 	.word	0x20001ab0
 800ac94:	20000f0c 	.word	0x20000f0c
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ac98:	4651      	mov	r1, sl
 800ac9a:	881a      	ldrh	r2, [r3, #0]
 800ac9c:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ac9e:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800aca0:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	121b      	asrs	r3, r3, #8
 800aca6:	704b      	strb	r3, [r1, #1]
 800aca8:	e72d      	b.n	800ab06 <PxMessagingTask+0xb0a>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800acaa:	4651      	mov	r1, sl
 800acac:	881a      	ldrh	r2, [r3, #0]
 800acae:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acb0:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800acb2:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acb4:	0a1b      	lsrs	r3, r3, #8
 800acb6:	704b      	strb	r3, [r1, #1]
 800acb8:	e725      	b.n	800ab06 <PxMessagingTask+0xb0a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d02c      	beq.n	800ad18 <PxMessagingTask+0xd1c>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	1919      	adds	r1, r3, r4
 800acc2:	78ca      	ldrb	r2, [r1, #3]
 800acc4:	788b      	ldrb	r3, [r1, #2]
 800acc6:	0212      	lsls	r2, r2, #8
 800acc8:	189b      	adds	r3, r3, r2
 800acca:	b21b      	sxth	r3, r3
 800accc:	8003      	strh	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800acce:	9905      	ldr	r1, [sp, #20]
 800acd0:	9807      	ldr	r0, [sp, #28]
 800acd2:	5d0b      	ldrb	r3, [r1, r4]
 800acd4:	5c09      	ldrb	r1, [r1, r0]
 800acd6:	200f      	movs	r0, #15
 800acd8:	3b01      	subs	r3, #1
 800acda:	4ad8      	ldr	r2, [pc, #864]	; (800b03c <PxMessagingTask+0x1040>)
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	58d2      	ldr	r2, [r2, r3]
 800ace0:	4010      	ands	r0, r2
 800ace2:	4288      	cmp	r0, r1
 800ace4:	d008      	beq.n	800acf8 <PxMessagingTask+0xcfc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ace6:	48d6      	ldr	r0, [pc, #856]	; (800b040 <PxMessagingTask+0x1044>)
 800ace8:	4684      	mov	ip, r0
 800acea:	4461      	add	r1, ip
 800acec:	400a      	ands	r2, r1
 800acee:	49d3      	ldr	r1, [pc, #844]	; (800b03c <PxMessagingTask+0x1040>)
 800acf0:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800acf2:	2314      	movs	r3, #20
 800acf4:	4ad3      	ldr	r2, [pc, #844]	; (800b044 <PxMessagingTask+0x1048>)
 800acf6:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800acf8:	2240      	movs	r2, #64	; 0x40
 800acfa:	4bd3      	ldr	r3, [pc, #844]	; (800b048 <PxMessagingTask+0x104c>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	4393      	bics	r3, r2
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d001      	beq.n	800ad08 <PxMessagingTask+0xd0c>
 800ad04:	f7ff fa21 	bl	800a14a <PxMessagingTask+0x14e>
								messageParams[0] =responseStatus;
 800ad08:	4652      	mov	r2, sl
 800ad0a:	4bce      	ldr	r3, [pc, #824]	; (800b044 <PxMessagingTask+0x1048>)
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ad0c:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ad12:	2201      	movs	r2, #1
 800ad14:	f7ff fae1 	bl	800a2da <PxMessagingTask+0x2de>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800ad18:	2002      	movs	r0, #2
 800ad1a:	f007 ff07 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d01e      	beq.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad22:	0403      	lsls	r3, r0, #16
 800ad24:	4ac5      	ldr	r2, [pc, #788]	; (800b03c <PxMessagingTask+0x1040>)
 800ad26:	3304      	adds	r3, #4
 800ad28:	5193      	str	r3, [r2, r6]
 800ad2a:	e7c8      	b.n	800acbe <PxMessagingTask+0xcc2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d025      	beq.n	800ad7c <PxMessagingTask+0xd80>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ad30:	9b05      	ldr	r3, [sp, #20]
 800ad32:	191b      	adds	r3, r3, r4
 800ad34:	789b      	ldrb	r3, [r3, #2]
 800ad36:	b25b      	sxtb	r3, r3
 800ad38:	7003      	strb	r3, [r0, #0]
 800ad3a:	e7c8      	b.n	800acce <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d013      	beq.n	800ad68 <PxMessagingTask+0xd6c>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	1919      	adds	r1, r3, r4
 800ad44:	78ca      	ldrb	r2, [r1, #3]
 800ad46:	788b      	ldrb	r3, [r1, #2]
 800ad48:	0212      	lsls	r2, r2, #8
 800ad4a:	189b      	adds	r3, r3, r2
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	8003      	strh	r3, [r0, #0]
 800ad50:	e7bd      	b.n	800acce <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d01c      	beq.n	800ad90 <PxMessagingTask+0xd94>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800ad56:	9b05      	ldr	r3, [sp, #20]
 800ad58:	191b      	adds	r3, r3, r4
 800ad5a:	789b      	ldrb	r3, [r3, #2]
 800ad5c:	7003      	strb	r3, [r0, #0]
 800ad5e:	e7b6      	b.n	800acce <PxMessagingTask+0xcd2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ad60:	2312      	movs	r3, #18
 800ad62:	4ab8      	ldr	r2, [pc, #736]	; (800b044 <PxMessagingTask+0x1048>)
 800ad64:	7013      	strb	r3, [r2, #0]
 800ad66:	e7b2      	b.n	800acce <PxMessagingTask+0xcd2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ad68:	2002      	movs	r0, #2
 800ad6a:	f007 fedf 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d0f6      	beq.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad72:	0403      	lsls	r3, r0, #16
 800ad74:	4ab1      	ldr	r2, [pc, #708]	; (800b03c <PxMessagingTask+0x1040>)
 800ad76:	3303      	adds	r3, #3
 800ad78:	5193      	str	r3, [r2, r6]
 800ad7a:	e7e1      	b.n	800ad40 <PxMessagingTask+0xd44>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	f007 fed5 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d0ec      	beq.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad86:	0403      	lsls	r3, r0, #16
 800ad88:	4aac      	ldr	r2, [pc, #688]	; (800b03c <PxMessagingTask+0x1040>)
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	5193      	str	r3, [r2, r6]
 800ad8e:	e7cf      	b.n	800ad30 <PxMessagingTask+0xd34>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800ad90:	2001      	movs	r0, #1
 800ad92:	f007 fecb 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d0e2      	beq.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad9a:	0403      	lsls	r3, r0, #16
 800ad9c:	19df      	adds	r7, r3, r7
 800ad9e:	4ba7      	ldr	r3, [pc, #668]	; (800b03c <PxMessagingTask+0x1040>)
 800ada0:	519f      	str	r7, [r3, r6]
 800ada2:	e7d8      	b.n	800ad56 <PxMessagingTask+0xd5a>
										ADCSelectChannel(ADCPort,"top");
 800ada4:	49a9      	ldr	r1, [pc, #676]	; (800b04c <PxMessagingTask+0x1050>)
 800ada6:	f7fd ff6b 	bl	8008c80 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800adaa:	4ba9      	ldr	r3, [pc, #676]	; (800b050 <PxMessagingTask+0x1054>)
 800adac:	4aa8      	ldr	r2, [pc, #672]	; (800b050 <PxMessagingTask+0x1054>)
 800adae:	5d98      	ldrb	r0, [r3, r6]
 800adb0:	3248      	adds	r2, #72	; 0x48
 800adb2:	49a6      	ldr	r1, [pc, #664]	; (800b04c <PxMessagingTask+0x1050>)
 800adb4:	f7fd ffb0 	bl	8008d18 <ReadADCChannel>
 800adb8:	f7ff fa04 	bl	800a1c4 <PxMessagingTask+0x1c8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d100      	bne.n	800adc2 <PxMessagingTask+0xdc6>
 800adc0:	e085      	b.n	800aece <PxMessagingTask+0xed2>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	191a      	adds	r2, r3, r4
 800adc6:	78d3      	ldrb	r3, [r2, #3]
 800adc8:	7911      	ldrb	r1, [r2, #4]
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	0409      	lsls	r1, r1, #16
 800adce:	185b      	adds	r3, r3, r1
 800add0:	7891      	ldrb	r1, [r2, #2]
 800add2:	7952      	ldrb	r2, [r2, #5]
 800add4:	185b      	adds	r3, r3, r1
 800add6:	0612      	lsls	r2, r2, #24
 800add8:	189b      	adds	r3, r3, r2
 800adda:	464a      	mov	r2, r9
 800addc:	4649      	mov	r1, r9
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	2200      	movs	r2, #0
 800ade2:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ade4:	6003      	str	r3, [r0, #0]
 800ade6:	e772      	b.n	800acce <PxMessagingTask+0xcd2>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ade8:	9b05      	ldr	r3, [sp, #20]
 800adea:	469c      	mov	ip, r3
 800adec:	4464      	add	r4, ip
 800adee:	78a3      	ldrb	r3, [r4, #2]
 800adf0:	78e2      	ldrb	r2, [r4, #3]
 800adf2:	021b      	lsls	r3, r3, #8
 800adf4:	0412      	lsls	r2, r2, #16
 800adf6:	189b      	adds	r3, r3, r2
 800adf8:	7862      	ldrb	r2, [r4, #1]
 800adfa:	189b      	adds	r3, r3, r2
 800adfc:	7922      	ldrb	r2, [r4, #4]
 800adfe:	0612      	lsls	r2, r2, #24
 800ae00:	189b      	adds	r3, r3, r2
 800ae02:	4a93      	ldr	r2, [pc, #588]	; (800b050 <PxMessagingTask+0x1054>)
 800ae04:	62d3      	str	r3, [r2, #44]	; 0x2c
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ae06:	79a3      	ldrb	r3, [r4, #6]
 800ae08:	79e2      	ldrb	r2, [r4, #7]
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	0412      	lsls	r2, r2, #16
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	7962      	ldrb	r2, [r4, #5]
 800ae12:	189b      	adds	r3, r3, r2
 800ae14:	7a22      	ldrb	r2, [r4, #8]
 800ae16:	0612      	lsls	r2, r2, #24
 800ae18:	189b      	adds	r3, r3, r2
 800ae1a:	4a8d      	ldr	r2, [pc, #564]	; (800b050 <PxMessagingTask+0x1054>)
 800ae1c:	6313      	str	r3, [r2, #48]	; 0x30
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ae1e:	7aa3      	ldrb	r3, [r4, #10]
 800ae20:	7ae2      	ldrb	r2, [r4, #11]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	0412      	lsls	r2, r2, #16
 800ae26:	189b      	adds	r3, r3, r2
 800ae28:	7a62      	ldrb	r2, [r4, #9]
 800ae2a:	189b      	adds	r3, r3, r2
 800ae2c:	7b22      	ldrb	r2, [r4, #12]
 800ae2e:	0612      	lsls	r2, r2, #24
 800ae30:	189b      	adds	r3, r3, r2
 800ae32:	4a87      	ldr	r2, [pc, #540]	; (800b050 <PxMessagingTask+0x1054>)
 800ae34:	6353      	str	r3, [r2, #52]	; 0x34
									break;
 800ae36:	f7ff f9f0 	bl	800a21a <PxMessagingTask+0x21e>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ae3a:	2313      	movs	r3, #19
 800ae3c:	4a81      	ldr	r2, [pc, #516]	; (800b044 <PxMessagingTask+0x1048>)
 800ae3e:	7013      	strb	r3, [r2, #0]
 800ae40:	e75a      	b.n	800acf8 <PxMessagingTask+0xcfc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ae42:	9b05      	ldr	r3, [sp, #20]
 800ae44:	191b      	adds	r3, r3, r4
 800ae46:	789e      	ldrb	r6, [r3, #2]
 800ae48:	78da      	ldrb	r2, [r3, #3]
 800ae4a:	0636      	lsls	r6, r6, #24
 800ae4c:	0412      	lsls	r2, r2, #16
 800ae4e:	18b6      	adds	r6, r6, r2
 800ae50:	795a      	ldrb	r2, [r3, #5]
 800ae52:	18b6      	adds	r6, r6, r2
 800ae54:	791a      	ldrb	r2, [r3, #4]
 800ae56:	0212      	lsls	r2, r2, #8
 800ae58:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800ae5a:	22e0      	movs	r2, #224	; 0xe0
 800ae5c:	0612      	lsls	r2, r2, #24
 800ae5e:	18b1      	adds	r1, r6, r2
 800ae60:	4a7c      	ldr	r2, [pc, #496]	; (800b054 <PxMessagingTask+0x1058>)
 800ae62:	4291      	cmp	r1, r2
 800ae64:	d900      	bls.n	800ae68 <PxMessagingTask+0xe6c>
 800ae66:	e08b      	b.n	800af80 <PxMessagingTask+0xf84>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b07      	cmp	r3, #7
 800ae70:	d900      	bls.n	800ae74 <PxMessagingTask+0xe78>
 800ae72:	e741      	b.n	800acf8 <PxMessagingTask+0xcfc>
 800ae74:	4a78      	ldr	r2, [pc, #480]	; (800b058 <PxMessagingTask+0x105c>)
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	58d3      	ldr	r3, [r2, r3]
 800ae7a:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ae7c:	9b05      	ldr	r3, [sp, #20]
 800ae7e:	469c      	mov	ip, r3
 800ae80:	4464      	add	r4, ip
 800ae82:	78a3      	ldrb	r3, [r4, #2]
 800ae84:	78e2      	ldrb	r2, [r4, #3]
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	0412      	lsls	r2, r2, #16
 800ae8a:	189b      	adds	r3, r3, r2
 800ae8c:	7862      	ldrb	r2, [r4, #1]
 800ae8e:	189b      	adds	r3, r3, r2
 800ae90:	7922      	ldrb	r2, [r4, #4]
 800ae92:	0612      	lsls	r2, r2, #24
 800ae94:	189b      	adds	r3, r3, r2
 800ae96:	4a6e      	ldr	r2, [pc, #440]	; (800b050 <PxMessagingTask+0x1054>)
 800ae98:	6213      	str	r3, [r2, #32]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ae9a:	79a3      	ldrb	r3, [r4, #6]
 800ae9c:	79e2      	ldrb	r2, [r4, #7]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	0412      	lsls	r2, r2, #16
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	7962      	ldrb	r2, [r4, #5]
 800aea6:	189b      	adds	r3, r3, r2
 800aea8:	7a22      	ldrb	r2, [r4, #8]
 800aeaa:	0612      	lsls	r2, r2, #24
 800aeac:	189b      	adds	r3, r3, r2
 800aeae:	4a68      	ldr	r2, [pc, #416]	; (800b050 <PxMessagingTask+0x1054>)
 800aeb0:	6253      	str	r3, [r2, #36]	; 0x24
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800aeb2:	7aa3      	ldrb	r3, [r4, #10]
 800aeb4:	7ae2      	ldrb	r2, [r4, #11]
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	0412      	lsls	r2, r2, #16
 800aeba:	189b      	adds	r3, r3, r2
 800aebc:	7a62      	ldrb	r2, [r4, #9]
 800aebe:	189b      	adds	r3, r3, r2
 800aec0:	7b22      	ldrb	r2, [r4, #12]
 800aec2:	0612      	lsls	r2, r2, #24
 800aec4:	189b      	adds	r3, r3, r2
 800aec6:	4a62      	ldr	r2, [pc, #392]	; (800b050 <PxMessagingTask+0x1054>)
 800aec8:	6293      	str	r3, [r2, #40]	; 0x28
									break;
 800aeca:	f7ff f9a6 	bl	800a21a <PxMessagingTask+0x21e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800aece:	2004      	movs	r0, #4
 800aed0:	f007 fe2c 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d100      	bne.n	800aeda <PxMessagingTask+0xede>
 800aed8:	e742      	b.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800aeda:	0403      	lsls	r3, r0, #16
 800aedc:	4a57      	ldr	r2, [pc, #348]	; (800b03c <PxMessagingTask+0x1040>)
 800aede:	3307      	adds	r3, #7
 800aee0:	5193      	str	r3, [r2, r6]
 800aee2:	e76e      	b.n	800adc2 <PxMessagingTask+0xdc6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800aee4:	9b05      	ldr	r3, [sp, #20]
 800aee6:	469c      	mov	ip, r3
 800aee8:	4464      	add	r4, ip
 800aeea:	79e3      	ldrb	r3, [r4, #7]
 800aeec:	79a2      	ldrb	r2, [r4, #6]
 800aeee:	021b      	lsls	r3, r3, #8
 800aef0:	189b      	adds	r3, r3, r2
 800aef2:	7a22      	ldrb	r2, [r4, #8]
 800aef4:	0412      	lsls	r2, r2, #16
 800aef6:	189b      	adds	r3, r3, r2
 800aef8:	7a62      	ldrb	r2, [r4, #9]
 800aefa:	0612      	lsls	r2, r2, #24
 800aefc:	189b      	adds	r3, r3, r2
 800aefe:	6033      	str	r3, [r6, #0]
											break;
 800af00:	e6fa      	b.n	800acf8 <PxMessagingTask+0xcfc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	469c      	mov	ip, r3
 800af06:	4464      	add	r4, ip
 800af08:	79e3      	ldrb	r3, [r4, #7]
 800af0a:	7a22      	ldrb	r2, [r4, #8]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	0412      	lsls	r2, r2, #16
 800af10:	189b      	adds	r3, r3, r2
 800af12:	79a2      	ldrb	r2, [r4, #6]
 800af14:	e7ef      	b.n	800aef6 <PxMessagingTask+0xefa>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800af16:	9b05      	ldr	r3, [sp, #20]
 800af18:	469c      	mov	ip, r3
 800af1a:	4464      	add	r4, ip
 800af1c:	79e2      	ldrb	r2, [r4, #7]
 800af1e:	79a3      	ldrb	r3, [r4, #6]
 800af20:	0212      	lsls	r2, r2, #8
 800af22:	189b      	adds	r3, r3, r2
 800af24:	b21b      	sxth	r3, r3
 800af26:	8033      	strh	r3, [r6, #0]
											break;
 800af28:	e6e6      	b.n	800acf8 <PxMessagingTask+0xcfc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af2a:	9b05      	ldr	r3, [sp, #20]
 800af2c:	469c      	mov	ip, r3
 800af2e:	4464      	add	r4, ip
 800af30:	79e2      	ldrb	r2, [r4, #7]
 800af32:	79a3      	ldrb	r3, [r4, #6]
 800af34:	0212      	lsls	r2, r2, #8
 800af36:	189b      	adds	r3, r3, r2
 800af38:	b29b      	uxth	r3, r3
 800af3a:	8033      	strh	r3, [r6, #0]
											break;
 800af3c:	e6dc      	b.n	800acf8 <PxMessagingTask+0xcfc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	469c      	mov	ip, r3
 800af42:	2306      	movs	r3, #6
 800af44:	4464      	add	r4, ip
 800af46:	56e3      	ldrsb	r3, [r4, r3]
 800af48:	7033      	strb	r3, [r6, #0]
											break;
 800af4a:	e6d5      	b.n	800acf8 <PxMessagingTask+0xcfc>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800af4c:	9b05      	ldr	r3, [sp, #20]
 800af4e:	469c      	mov	ip, r3
 800af50:	4464      	add	r4, ip
 800af52:	79a3      	ldrb	r3, [r4, #6]
 800af54:	7033      	strb	r3, [r6, #0]
											break;
 800af56:	e6cf      	b.n	800acf8 <PxMessagingTask+0xcfc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	4649      	mov	r1, r9
 800af5c:	469c      	mov	ip, r3
 800af5e:	4464      	add	r4, ip
 800af60:	79e3      	ldrb	r3, [r4, #7]
 800af62:	7a22      	ldrb	r2, [r4, #8]
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	0412      	lsls	r2, r2, #16
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	79a2      	ldrb	r2, [r4, #6]
 800af6c:	189b      	adds	r3, r3, r2
 800af6e:	7a62      	ldrb	r2, [r4, #9]
 800af70:	0612      	lsls	r2, r2, #24
 800af72:	189b      	adds	r3, r3, r2
 800af74:	464a      	mov	r2, r9
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	2200      	movs	r2, #0
 800af7a:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800af7c:	6033      	str	r3, [r6, #0]
											break;
 800af7e:	e6bb      	b.n	800acf8 <PxMessagingTask+0xcfc>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800af80:	23f8      	movs	r3, #248	; 0xf8
 800af82:	4a36      	ldr	r2, [pc, #216]	; (800b05c <PxMessagingTask+0x1060>)
 800af84:	061b      	lsls	r3, r3, #24
 800af86:	18f3      	adds	r3, r6, r3
 800af88:	4293      	cmp	r3, r2
 800af8a:	d910      	bls.n	800afae <PxMessagingTask+0xfb2>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800af8c:	2315      	movs	r3, #21
 800af8e:	4a2d      	ldr	r2, [pc, #180]	; (800b044 <PxMessagingTask+0x1048>)
 800af90:	7013      	strb	r3, [r2, #0]
 800af92:	e6b1      	b.n	800acf8 <PxMessagingTask+0xcfc>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800af94:	230a      	movs	r3, #10
 800af96:	4932      	ldr	r1, [pc, #200]	; (800b060 <PxMessagingTask+0x1064>)
 800af98:	9a04      	ldr	r2, [sp, #16]
 800af9a:	468c      	mov	ip, r1
 800af9c:	4353      	muls	r3, r2
 800af9e:	4831      	ldr	r0, [pc, #196]	; (800b064 <PxMessagingTask+0x1068>)
 800afa0:	4463      	add	r3, ip
 800afa2:	4931      	ldr	r1, [pc, #196]	; (800b068 <PxMessagingTask+0x106c>)
 800afa4:	301c      	adds	r0, #28
 800afa6:	f008 fa11 	bl	80133cc <sprintf>
 800afaa:	f7ff fa6a 	bl	800a482 <PxMessagingTask+0x486>
									HAL_FLASH_Unlock();
 800afae:	f005 fd11 	bl	80109d4 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	2b22      	cmp	r3, #34	; 0x22
 800afb6:	d100      	bne.n	800afba <PxMessagingTask+0xfbe>
 800afb8:	e094      	b.n	800b0e4 <PxMessagingTask+0x10e8>
									if(responseStatus == BOS_OK){
 800afba:	4b22      	ldr	r3, [pc, #136]	; (800b044 <PxMessagingTask+0x1048>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d15c      	bne.n	800b07c <PxMessagingTask+0x1080>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800afc2:	9b05      	ldr	r3, [sp, #20]
 800afc4:	191b      	adds	r3, r3, r4
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	3b01      	subs	r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b07      	cmp	r3, #7
 800afce:	d855      	bhi.n	800b07c <PxMessagingTask+0x1080>
 800afd0:	4a26      	ldr	r2, [pc, #152]	; (800b06c <PxMessagingTask+0x1070>)
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	58d3      	ldr	r3, [r2, r3]
 800afd6:	469f      	mov	pc, r3
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d018      	beq.n	800b00e <PxMessagingTask+0x1012>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800afdc:	9b05      	ldr	r3, [sp, #20]
 800afde:	191a      	adds	r2, r3, r4
 800afe0:	78d3      	ldrb	r3, [r2, #3]
 800afe2:	7891      	ldrb	r1, [r2, #2]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	185b      	adds	r3, r3, r1
 800afe8:	7911      	ldrb	r1, [r2, #4]
 800afea:	0409      	lsls	r1, r1, #16
 800afec:	7952      	ldrb	r2, [r2, #5]
 800afee:	185b      	adds	r3, r3, r1
 800aff0:	0612      	lsls	r2, r2, #24
 800aff2:	189b      	adds	r3, r3, r2
 800aff4:	6003      	str	r3, [r0, #0]
 800aff6:	e66a      	b.n	800acce <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d013      	beq.n	800b024 <PxMessagingTask+0x1028>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800affc:	9b05      	ldr	r3, [sp, #20]
 800affe:	191a      	adds	r2, r3, r4
 800b000:	78d3      	ldrb	r3, [r2, #3]
 800b002:	7911      	ldrb	r1, [r2, #4]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	0409      	lsls	r1, r1, #16
 800b008:	185b      	adds	r3, r3, r1
 800b00a:	7891      	ldrb	r1, [r2, #2]
 800b00c:	e7ee      	b.n	800afec <PxMessagingTask+0xff0>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b00e:	2004      	movs	r0, #4
 800b010:	f007 fd8c 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800b014:	2800      	cmp	r0, #0
 800b016:	d100      	bne.n	800b01a <PxMessagingTask+0x101e>
 800b018:	e6a2      	b.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b01a:	0403      	lsls	r3, r0, #16
 800b01c:	4a07      	ldr	r2, [pc, #28]	; (800b03c <PxMessagingTask+0x1040>)
 800b01e:	3306      	adds	r3, #6
 800b020:	5193      	str	r3, [r2, r6]
 800b022:	e7db      	b.n	800afdc <PxMessagingTask+0xfe0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b024:	2004      	movs	r0, #4
 800b026:	f007 fd81 	bl	8012b2c <malloc>
												if(temp32 != 0){
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d100      	bne.n	800b030 <PxMessagingTask+0x1034>
 800b02e:	e697      	b.n	800ad60 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b030:	0403      	lsls	r3, r0, #16
 800b032:	4a02      	ldr	r2, [pc, #8]	; (800b03c <PxMessagingTask+0x1040>)
 800b034:	3305      	adds	r3, #5
 800b036:	5193      	str	r3, [r2, r6]
 800b038:	e7e0      	b.n	800affc <PxMessagingTask+0x1000>
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	20007030 	.word	0x20007030
 800b040:	0000fff0 	.word	0x0000fff0
 800b044:	20000c3c 	.word	0x20000c3c
 800b048:	20007028 	.word	0x20007028
 800b04c:	08018960 	.word	0x08018960
 800b050:	20001a58 	.word	0x20001a58
 800b054:	00007fff 	.word	0x00007fff
 800b058:	08017d60 	.word	0x08017d60
 800b05c:	0001ffff 	.word	0x0001ffff
 800b060:	20000dfc 	.word	0x20000dfc
 800b064:	200019d8 	.word	0x200019d8
 800b068:	08019450 	.word	0x08019450
 800b06c:	08017d80 	.word	0x08017d80
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b070:	6833      	ldr	r3, [r6, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	d00c      	beq.n	800b090 <PxMessagingTask+0x1094>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b076:	2316      	movs	r3, #22
 800b078:	4ad6      	ldr	r2, [pc, #856]	; (800b3d4 <PxMessagingTask+0x13d8>)
 800b07a:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 800b07c:	f005 fcbc 	bl	80109f8 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b082:	2b00      	cmp	r3, #0
 800b084:	d100      	bne.n	800b088 <PxMessagingTask+0x108c>
 800b086:	e637      	b.n	800acf8 <PxMessagingTask+0xcfc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b088:	2316      	movs	r3, #22
 800b08a:	4ad2      	ldr	r2, [pc, #840]	; (800b3d4 <PxMessagingTask+0x13d8>)
 800b08c:	7013      	strb	r3, [r2, #0]
 800b08e:	e633      	b.n	800acf8 <PxMessagingTask+0xcfc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b090:	9b05      	ldr	r3, [sp, #20]
 800b092:	4649      	mov	r1, r9
 800b094:	469c      	mov	ip, r3
 800b096:	4464      	add	r4, ip
 800b098:	79e2      	ldrb	r2, [r4, #7]
 800b09a:	7a23      	ldrb	r3, [r4, #8]
 800b09c:	0212      	lsls	r2, r2, #8
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	18d2      	adds	r2, r2, r3
 800b0a2:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b0a4:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0a6:	18d2      	adds	r2, r2, r3
 800b0a8:	7a63      	ldrb	r3, [r4, #9]
 800b0aa:	061b      	lsls	r3, r3, #24
 800b0ac:	18d2      	adds	r2, r2, r3
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b0b2:	0031      	movs	r1, r6
 800b0b4:	f005 fcee 	bl	8010a94 <HAL_FLASH_Program>
 800b0b8:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b0ba:	e7df      	b.n	800b07c <PxMessagingTask+0x1080>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b0bc:	8832      	ldrh	r2, [r6, #0]
 800b0be:	4bc6      	ldr	r3, [pc, #792]	; (800b3d8 <PxMessagingTask+0x13dc>)
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d1d8      	bne.n	800b076 <PxMessagingTask+0x107a>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b0c4:	9b05      	ldr	r3, [sp, #20]
 800b0c6:	469c      	mov	ip, r3
 800b0c8:	4464      	add	r4, ip
 800b0ca:	79e2      	ldrb	r2, [r4, #7]
 800b0cc:	79a3      	ldrb	r3, [r4, #6]
 800b0ce:	0212      	lsls	r2, r2, #8
 800b0d0:	18d2      	adds	r2, r2, r3
 800b0d2:	17d3      	asrs	r3, r2, #31
 800b0d4:	4649      	mov	r1, r9
													status =HAL_FLASH_Program(
 800b0d6:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b0d8:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b0da:	0031      	movs	r1, r6
 800b0dc:	f005 fcda 	bl	8010a94 <HAL_FLASH_Program>
 800b0e0:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b0e2:	e7cb      	b.n	800b07c <PxMessagingTask+0x1080>
										erase.NbPages =1;
 800b0e4:	3b21      	subs	r3, #33	; 0x21
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b0e6:	a918      	add	r1, sp, #96	; 0x60
 800b0e8:	a819      	add	r0, sp, #100	; 0x64
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b0ea:	9719      	str	r7, [sp, #100]	; 0x64
										erase.PageAddress =temp32;
 800b0ec:	961a      	str	r6, [sp, #104]	; 0x68
										erase.NbPages =1;
 800b0ee:	931b      	str	r3, [sp, #108]	; 0x6c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b0f0:	f005 fd34 	bl	8010b5c <HAL_FLASHEx_Erase>
 800b0f4:	900f      	str	r0, [sp, #60]	; 0x3c
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d103      	bne.n	800b102 <PxMessagingTask+0x1106>
 800b0fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	d100      	bne.n	800b102 <PxMessagingTask+0x1106>
 800b100:	e75b      	b.n	800afba <PxMessagingTask+0xfbe>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b102:	2316      	movs	r3, #22
 800b104:	4ab3      	ldr	r2, [pc, #716]	; (800b3d4 <PxMessagingTask+0x13d8>)
 800b106:	7013      	strb	r3, [r2, #0]
 800b108:	e757      	b.n	800afba <PxMessagingTask+0xfbe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b10a:	8832      	ldrh	r2, [r6, #0]
 800b10c:	4bb2      	ldr	r3, [pc, #712]	; (800b3d8 <PxMessagingTask+0x13dc>)
 800b10e:	429a      	cmp	r2, r3
 800b110:	d1b1      	bne.n	800b076 <PxMessagingTask+0x107a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b112:	9b05      	ldr	r3, [sp, #20]
 800b114:	469c      	mov	ip, r3
 800b116:	4464      	add	r4, ip
 800b118:	79a2      	ldrb	r2, [r4, #6]
 800b11a:	2300      	movs	r3, #0
 800b11c:	e7da      	b.n	800b0d4 <PxMessagingTask+0x10d8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b11e:	6833      	ldr	r3, [r6, #0]
 800b120:	3301      	adds	r3, #1
 800b122:	d1a8      	bne.n	800b076 <PxMessagingTask+0x107a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	4649      	mov	r1, r9
 800b128:	469c      	mov	ip, r3
 800b12a:	4464      	add	r4, ip
 800b12c:	79e2      	ldrb	r2, [r4, #7]
 800b12e:	7a23      	ldrb	r3, [r4, #8]
 800b130:	0212      	lsls	r2, r2, #8
 800b132:	041b      	lsls	r3, r3, #16
 800b134:	18d2      	adds	r2, r2, r3
 800b136:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b138:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b13a:	18d2      	adds	r2, r2, r3
 800b13c:	7a63      	ldrb	r3, [r4, #9]
 800b13e:	061b      	lsls	r3, r3, #24
 800b140:	18d2      	adds	r2, r2, r3
 800b142:	2300      	movs	r3, #0
 800b144:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b146:	0031      	movs	r1, r6
 800b148:	f005 fca4 	bl	8010a94 <HAL_FLASH_Program>
 800b14c:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b14e:	e795      	b.n	800b07c <PxMessagingTask+0x1080>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800b150:	2338      	movs	r3, #56	; 0x38
 800b152:	435d      	muls	r5, r3
 800b154:	445d      	add	r5, fp
 800b156:	192e      	adds	r6, r5, r4
 800b158:	7a31      	ldrb	r1, [r6, #8]
 800b15a:	20e4      	movs	r0, #228	; 0xe4
 800b15c:	f7fc fba0 	bl	80078a0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800b160:	9a07      	ldr	r2, [sp, #28]
 800b162:	5d2b      	ldrb	r3, [r5, r4]
 800b164:	5ca9      	ldrb	r1, [r5, r2]
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	18c9      	adds	r1, r1, r3
 800b16a:	b289      	uxth	r1, r1
 800b16c:	20e5      	movs	r0, #229	; 0xe5
 800b16e:	f7fc fb97 	bl	80078a0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800b172:	9b08      	ldr	r3, [sp, #32]
 800b174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b176:	5ceb      	ldrb	r3, [r5, r3]
 800b178:	5ca9      	ldrb	r1, [r5, r2]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	18c9      	adds	r1, r1, r3
 800b17e:	b289      	uxth	r1, r1
 800b180:	20e6      	movs	r0, #230	; 0xe6
 800b182:	f7fc fb8d 	bl	80078a0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800b186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b18a:	5ceb      	ldrb	r3, [r5, r3]
 800b18c:	5ca9      	ldrb	r1, [r5, r2]
 800b18e:	021b      	lsls	r3, r3, #8
 800b190:	18c9      	adds	r1, r1, r3
 800b192:	b289      	uxth	r1, r1
 800b194:	20e7      	movs	r0, #231	; 0xe7
 800b196:	f7fc fb83 	bl	80078a0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800b19a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b19c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b19e:	5ceb      	ldrb	r3, [r5, r3]
 800b1a0:	5ca9      	ldrb	r1, [r5, r2]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	18c9      	adds	r1, r1, r3
 800b1a6:	b289      	uxth	r1, r1
 800b1a8:	20e8      	movs	r0, #232	; 0xe8
 800b1aa:	f7fc fb79 	bl	80078a0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800b1ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1b0:	7ab1      	ldrb	r1, [r6, #10]
 800b1b2:	5ceb      	ldrb	r3, [r5, r3]
 800b1b4:	20e9      	movs	r0, #233	; 0xe9
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	18c9      	adds	r1, r1, r3
 800b1ba:	b289      	uxth	r1, r1
 800b1bc:	f7fc fb70 	bl	80078a0 <EE_WriteVariable>
								if(numOfParams == 19)
 800b1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c2:	2b13      	cmp	r3, #19
 800b1c4:	d013      	beq.n	800b1ee <PxMessagingTask+0x11f2>
								if(numOfParams == 21)
 800b1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c8:	2b15      	cmp	r3, #21
 800b1ca:	d107      	bne.n	800b1dc <PxMessagingTask+0x11e0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800b1cc:	7b73      	ldrb	r3, [r6, #13]
 800b1ce:	7bb1      	ldrb	r1, [r6, #14]
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	18c9      	adds	r1, r1, r3
 800b1d4:	b289      	uxth	r1, r1
 800b1d6:	20eb      	movs	r0, #235	; 0xeb
 800b1d8:	f7fc fb62 	bl	80078a0 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	4b7e      	ldr	r3, [pc, #504]	; (800b3dc <PxMessagingTask+0x13e0>)
 800b1e2:	4a7f      	ldr	r2, [pc, #508]	; (800b3e0 <PxMessagingTask+0x13e4>)
 800b1e4:	60da      	str	r2, [r3, #12]
 800b1e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	e7fd      	b.n	800b1ea <PxMessagingTask+0x11ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	7b31      	ldrb	r1, [r6, #12]
 800b1f2:	5ceb      	ldrb	r3, [r5, r3]
 800b1f4:	20ea      	movs	r0, #234	; 0xea
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	18c9      	adds	r1, r1, r3
 800b1fa:	b289      	uxth	r1, r1
 800b1fc:	f7fc fb50 	bl	80078a0 <EE_WriteVariable>
 800b200:	e7ec      	b.n	800b1dc <PxMessagingTask+0x11e0>
								temp =cMessage[port - 1][15 + shift];
 800b202:	9a05      	ldr	r2, [sp, #20]
 800b204:	1912      	adds	r2, r2, r4
 800b206:	7bd1      	ldrb	r1, [r2, #15]
 800b208:	f7ff fae0 	bl	800a7cc <PxMessagingTask+0x7d0>
 800b20c:	2700      	movs	r7, #0
 800b20e:	f7fe ff9f 	bl	800a150 <PxMessagingTask+0x154>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b212:	2a01      	cmp	r2, #1
 800b214:	d901      	bls.n	800b21a <PxMessagingTask+0x121e>
 800b216:	f7ff fb8d 	bl	800a934 <PxMessagingTask+0x938>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b21a:	9b05      	ldr	r3, [sp, #20]
 800b21c:	4a71      	ldr	r2, [pc, #452]	; (800b3e4 <PxMessagingTask+0x13e8>)
 800b21e:	5d1b      	ldrb	r3, [r3, r4]
 800b220:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b222:	2b08      	cmp	r3, #8
 800b224:	d901      	bls.n	800b22a <PxMessagingTask+0x122e>
 800b226:	f7ff fb85 	bl	800a934 <PxMessagingTask+0x938>
 800b22a:	4a6f      	ldr	r2, [pc, #444]	; (800b3e8 <PxMessagingTask+0x13ec>)
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	58d3      	ldr	r3, [r2, r3]
 800b230:	469f      	mov	pc, r3
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b232:	4651      	mov	r1, sl
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	0a12      	lsrs	r2, r2, #8
 800b23c:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	0c12      	lsrs	r2, r2, #16
 800b242:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b244:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b246:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b248:	0e1b      	lsrs	r3, r3, #24
 800b24a:	710b      	strb	r3, [r1, #4]
 800b24c:	e45b      	b.n	800ab06 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b24e:	4651      	mov	r1, sl
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	1212      	asrs	r2, r2, #8
 800b258:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	1412      	asrs	r2, r2, #16
 800b25e:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b260:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b262:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b264:	161b      	asrs	r3, r3, #24
 800b266:	710b      	strb	r3, [r1, #4]
 800b268:	e44d      	b.n	800ab06 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b26a:	4651      	mov	r1, sl
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b270:	4b5e      	ldr	r3, [pc, #376]	; (800b3ec <PxMessagingTask+0x13f0>)
 800b272:	18d3      	adds	r3, r2, r3
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b278:	4b5d      	ldr	r3, [pc, #372]	; (800b3f0 <PxMessagingTask+0x13f4>)
 800b27a:	18d3      	adds	r3, r2, r3
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b280:	4b5c      	ldr	r3, [pc, #368]	; (800b3f4 <PxMessagingTask+0x13f8>)
 800b282:	469c      	mov	ip, r3
 800b284:	4462      	add	r2, ip
 800b286:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800b288:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b28a:	710b      	strb	r3, [r1, #4]
 800b28c:	e43b      	b.n	800ab06 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b28e:	2201      	movs	r2, #1
 800b290:	211f      	movs	r1, #31
 800b292:	9804      	ldr	r0, [sp, #16]
 800b294:	f7fe fbda 	bl	8009a4c <SendMessageToModule>
 800b298:	4643      	mov	r3, r8
 800b29a:	5d5e      	ldrb	r6, [r3, r5]
 800b29c:	f7fe ff58 	bl	800a150 <PxMessagingTask+0x154>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	2700      	movs	r7, #0
 800b2a4:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2a8:	4466      	add	r6, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2aa:	469c      	mov	ip, r3
 800b2ac:	1c60      	adds	r0, r4, #1
 800b2ae:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2b0:	3e01      	subs	r6, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2b2:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2b4:	7037      	strb	r7, [r6, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2b6:	f7f8 fa2b 	bl	8003710 <IsModuleParameter>
 800b2ba:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800b2bc:	42b8      	cmp	r0, r7
 800b2be:	d03a      	beq.n	800b336 <PxMessagingTask+0x133a>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2c0:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2c2:	494d      	ldr	r1, [pc, #308]	; (800b3f8 <PxMessagingTask+0x13fc>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2c6:	468c      	mov	ip, r1
 800b2c8:	4651      	mov	r1, sl
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	435a      	muls	r2, r3
 800b2ce:	4b4a      	ldr	r3, [pc, #296]	; (800b3f8 <PxMessagingTask+0x13fc>)
 800b2d0:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2d2:	4462      	add	r2, ip
 800b2d4:	7912      	ldrb	r2, [r2, #4]
 800b2d6:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800b2d8:	3a01      	subs	r2, #1
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	2a07      	cmp	r2, #7
 800b2de:	d901      	bls.n	800b2e4 <PxMessagingTask+0x12e8>
 800b2e0:	f7fe ffb9 	bl	800a256 <PxMessagingTask+0x25a>
 800b2e4:	4945      	ldr	r1, [pc, #276]	; (800b3fc <PxMessagingTask+0x1400>)
 800b2e6:	0092      	lsls	r2, r2, #2
 800b2e8:	588a      	ldr	r2, [r1, r2]
 800b2ea:	4697      	mov	pc, r2
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b2ec:	4651      	mov	r1, sl
 800b2ee:	881a      	ldrh	r2, [r3, #0]
 800b2f0:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b2f2:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b2f4:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b2f6:	0a1b      	lsrs	r3, r3, #8
 800b2f8:	708b      	strb	r3, [r1, #2]
 800b2fa:	f7ff fc04 	bl	800ab06 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800b2fe:	4652      	mov	r2, sl
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800b304:	2202      	movs	r2, #2
 800b306:	f7ff fbfe 	bl	800ab06 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b30a:	4651      	mov	r1, sl
 800b30c:	881a      	ldrh	r2, [r3, #0]
 800b30e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b310:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b312:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b314:	b21b      	sxth	r3, r3
 800b316:	121b      	asrs	r3, r3, #8
 800b318:	708b      	strb	r3, [r1, #2]
 800b31a:	f7ff fbf4 	bl	800ab06 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b31e:	4651      	mov	r1, sl
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b324:	785a      	ldrb	r2, [r3, #1]
 800b326:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b328:	789a      	ldrb	r2, [r3, #2]
 800b32a:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b32c:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800b32e:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b330:	710b      	strb	r3, [r1, #4]
 800b332:	f7ff fbe8 	bl	800ab06 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b336:	2201      	movs	r2, #1
 800b338:	211f      	movs	r1, #31
 800b33a:	9804      	ldr	r0, [sp, #16]
 800b33c:	f7fe fb86 	bl	8009a4c <SendMessageToModule>
 800b340:	4643      	mov	r3, r8
 800b342:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b344:	5d5e      	ldrb	r6, [r3, r5]
 800b346:	f7fe ff03 	bl	800a150 <PxMessagingTask+0x154>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b34a:	9b05      	ldr	r3, [sp, #20]
 800b34c:	469c      	mov	ip, r3
 800b34e:	4464      	add	r4, ip
 800b350:	78a3      	ldrb	r3, [r4, #2]
 800b352:	7862      	ldrb	r2, [r4, #1]
 800b354:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b356:	189b      	adds	r3, r3, r2
 800b358:	464a      	mov	r2, r9
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	17db      	asrs	r3, r3, #31
 800b35e:	6053      	str	r3, [r2, #4]
										break;
 800b360:	f7ff fae8 	bl	800a934 <PxMessagingTask+0x938>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b364:	9b05      	ldr	r3, [sp, #20]
 800b366:	469c      	mov	ip, r3
 800b368:	4464      	add	r4, ip
 800b36a:	78a3      	ldrb	r3, [r4, #2]
 800b36c:	7862      	ldrb	r2, [r4, #1]
 800b36e:	021b      	lsls	r3, r3, #8
 800b370:	189b      	adds	r3, r3, r2
 800b372:	78e2      	ldrb	r2, [r4, #3]
 800b374:	0412      	lsls	r2, r2, #16
 800b376:	189b      	adds	r3, r3, r2
 800b378:	7922      	ldrb	r2, [r4, #4]
 800b37a:	0612      	lsls	r2, r2, #24
 800b37c:	e7eb      	b.n	800b356 <PxMessagingTask+0x135a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b37e:	9b05      	ldr	r3, [sp, #20]
 800b380:	464a      	mov	r2, r9
 800b382:	469c      	mov	ip, r3
 800b384:	2301      	movs	r3, #1
 800b386:	4464      	add	r4, ip
 800b388:	56e3      	ldrsb	r3, [r4, r3]
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	17db      	asrs	r3, r3, #31
 800b38e:	6053      	str	r3, [r2, #4]
										break;
 800b390:	f7ff fad0 	bl	800a934 <PxMessagingTask+0x938>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b394:	9b05      	ldr	r3, [sp, #20]
 800b396:	464a      	mov	r2, r9
 800b398:	469c      	mov	ip, r3
 800b39a:	4464      	add	r4, ip
 800b39c:	7863      	ldrb	r3, [r4, #1]
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	6053      	str	r3, [r2, #4]
										break;
 800b3a4:	f7ff fac6 	bl	800a934 <PxMessagingTask+0x938>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f7ff f87a 	bl	800a4a2 <PxMessagingTask+0x4a6>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	469c      	mov	ip, r3
 800b3b2:	4464      	add	r4, ip
 800b3b4:	78a3      	ldrb	r3, [r4, #2]
 800b3b6:	78e2      	ldrb	r2, [r4, #3]
 800b3b8:	021b      	lsls	r3, r3, #8
 800b3ba:	0412      	lsls	r2, r2, #16
 800b3bc:	189b      	adds	r3, r3, r2
 800b3be:	7862      	ldrb	r2, [r4, #1]
 800b3c0:	189b      	adds	r3, r3, r2
 800b3c2:	7922      	ldrb	r2, [r4, #4]
 800b3c4:	0612      	lsls	r2, r2, #24
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	464a      	mov	r2, r9
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	6053      	str	r3, [r2, #4]
										break;
 800b3d0:	f7ff fab0 	bl	800a934 <PxMessagingTask+0x938>
 800b3d4:	20000c3c 	.word	0x20000c3c
 800b3d8:	0000ffff 	.word	0x0000ffff
 800b3dc:	e000ed00 	.word	0xe000ed00
 800b3e0:	05fa0004 	.word	0x05fa0004
 800b3e4:	20000032 	.word	0x20000032
 800b3e8:	08017da0 	.word	0x08017da0
 800b3ec:	20000001 	.word	0x20000001
 800b3f0:	20000002 	.word	0x20000002
 800b3f4:	20000003 	.word	0x20000003
 800b3f8:	20000094 	.word	0x20000094
 800b3fc:	08017dc4 	.word	0x08017dc4

0800b400 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b400:	2310      	movs	r3, #16
{
 800b402:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b404:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b406:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b408:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b40a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b40c:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b40e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b410:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b412:	0276      	lsls	r6, r6, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b414:	035b      	lsls	r3, r3, #13
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b416:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b418:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b41a:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b41c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b41e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b420:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b422:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b424:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b426:	f005 fdcd 	bl	8010fc4 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b42a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b42c:	2101      	movs	r1, #1
 800b42e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b430:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b432:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b434:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b436:	9703      	str	r7, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b438:	f006 f866 	bl	8011508 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <SystemClock_Config+0xa8>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b43e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b440:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b442:	9508      	str	r5, [sp, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b444:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b446:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b448:	f006 f9ea 	bl	8011820 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800b44c:	2180      	movs	r1, #128	; 0x80
 800b44e:	4d17      	ldr	r5, [pc, #92]	; (800b4ac <SystemClock_Config+0xac>)
 800b450:	0549      	lsls	r1, r1, #21
 800b452:	69ea      	ldr	r2, [r5, #28]
 800b454:	430a      	orrs	r2, r1
 800b456:	61ea      	str	r2, [r5, #28]
 800b458:	69eb      	ldr	r3, [r5, #28]
 800b45a:	400b      	ands	r3, r1
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b460:	f005 fda6 	bl	8010fb0 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b464:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b466:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b46c:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b46e:	f006 f9d7 	bl	8011820 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b472:	f006 f9a7 	bl	80117c4 <HAL_RCC_GetHCLKFreq>
 800b476:	21fa      	movs	r1, #250	; 0xfa
 800b478:	0089      	lsls	r1, r1, #2
 800b47a:	f7f4 fe69 	bl	8000150 <__udivsi3>
 800b47e:	f004 fc41 	bl	800fd04 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b482:	2004      	movs	r0, #4
 800b484:	f004 fc5a 	bl	800fd3c <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b488:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE();
 800b48a:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b48c:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE();
 800b48e:	4323      	orrs	r3, r4
 800b490:	61ab      	str	r3, [r5, #24]
 800b492:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b494:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE();
 800b496:	401c      	ands	r4, r3
 800b498:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b49a:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE();
 800b49c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b49e:	f004 fbf1 	bl	800fc84 <HAL_NVIC_SetPriority>
	
}
 800b4a2:	b01b      	add	sp, #108	; 0x6c
 800b4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	00040003 	.word	0x00040003
 800b4ac:	40021000 	.word	0x40021000

0800b4b0 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800b4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4b2:	46de      	mov	lr, fp
 800b4b4:	4657      	mov	r7, sl
 800b4b6:	464e      	mov	r6, r9
 800b4b8:	4645      	mov	r5, r8
 800b4ba:	b5e0      	push	{r5, r6, r7, lr}
 800b4bc:	b087      	sub	sp, #28
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b4be:	2215      	movs	r2, #21
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4668      	mov	r0, sp
 800b4c4:	f007 fd88 	bl	8012fd8 <memset>
	
	HAL_FLASH_Unlock();
 800b4c8:	f005 fa84 	bl	80109d4 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800b4cc:	486a      	ldr	r0, [pc, #424]	; (800b678 <SaveToRO+0x1c8>)
 800b4ce:	f005 fbb1 	bl	8010c34 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4d2:	486a      	ldr	r0, [pc, #424]	; (800b67c <SaveToRO+0x1cc>)
 800b4d4:	f005 fa9a 	bl	8010a0c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d16e      	bne.n	800b5ba <SaveToRO+0x10a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b4dc:	2202      	movs	r2, #2
 800b4de:	4c68      	ldr	r4, [pc, #416]	; (800b680 <SaveToRO+0x1d0>)
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	4393      	bics	r3, r2
 800b4e4:	6123      	str	r3, [r4, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800b4e6:	4b67      	ldr	r3, [pc, #412]	; (800b684 <SaveToRO+0x1d4>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d000      	beq.n	800b4f0 <SaveToRO+0x40>
 800b4ee:	e06e      	b.n	800b5ce <SaveToRO+0x11e>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b4f0:	4b65      	ldr	r3, [pc, #404]	; (800b688 <SaveToRO+0x1d8>)
 800b4f2:	469a      	mov	sl, r3
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d100      	bne.n	800b4fc <SaveToRO+0x4c>
 800b4fa:	e0b8      	b.n	800b66e <SaveToRO+0x1be>
 800b4fc:	4b63      	ldr	r3, [pc, #396]	; (800b68c <SaveToRO+0x1dc>)
 800b4fe:	2500      	movs	r5, #0
 800b500:	4c63      	ldr	r4, [pc, #396]	; (800b690 <SaveToRO+0x1e0>)
 800b502:	4699      	mov	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
				if (FlashStatus != HAL_OK) {
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b504:	4f5e      	ldr	r7, [pc, #376]	; (800b680 <SaveToRO+0x1d0>)
 800b506:	e006      	b.n	800b516 <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b508:	4653      	mov	r3, sl
 800b50a:	3501      	adds	r5, #1
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b2ed      	uxtb	r5, r5
 800b510:	42ab      	cmp	r3, r5
 800b512:	d800      	bhi.n	800b516 <SaveToRO+0x66>
 800b514:	e0ab      	b.n	800b66e <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 800b516:	00ab      	lsls	r3, r5, #2
 800b518:	1959      	adds	r1, r3, r5
 800b51a:	4698      	mov	r8, r3
 800b51c:	464b      	mov	r3, r9
 800b51e:	0089      	lsls	r1, r1, #2
 800b520:	5c5b      	ldrb	r3, [r3, r1]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0f0      	beq.n	800b508 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b526:	466b      	mov	r3, sp
 800b528:	22fe      	movs	r2, #254	; 0xfe
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b52a:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b52c:	701a      	strb	r2, [r3, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b52e:	4449      	add	r1, r9
 800b530:	2214      	movs	r2, #20
 800b532:	f007 fd48 	bl	8012fc6 <memcpy>
 800b536:	2314      	movs	r3, #20
 800b538:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b53a:	466b      	mov	r3, sp
 800b53c:	44a3      	add	fp, r4
 800b53e:	1b1e      	subs	r6, r3, r4
 800b540:	465b      	mov	r3, fp
 800b542:	46ab      	mov	fp, r5
 800b544:	001d      	movs	r5, r3
 800b546:	5b32      	ldrh	r2, [r6, r4]
 800b548:	2300      	movs	r3, #0
 800b54a:	0021      	movs	r1, r4
 800b54c:	2001      	movs	r0, #1
 800b54e:	f005 faa1 	bl	8010a94 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b552:	484a      	ldr	r0, [pc, #296]	; (800b67c <SaveToRO+0x1cc>)
 800b554:	f005 fa5a 	bl	8010a0c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b558:	2800      	cmp	r0, #0
 800b55a:	d12e      	bne.n	800b5ba <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b55c:	2201      	movs	r2, #1
 800b55e:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800b560:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b562:	4393      	bics	r3, r2
 800b564:	613b      	str	r3, [r7, #16]
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b566:	42ac      	cmp	r4, r5
 800b568:	d1ed      	bne.n	800b546 <SaveToRO+0x96>
 800b56a:	465d      	mov	r5, fp
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b56c:	4643      	mov	r3, r8
 800b56e:	195b      	adds	r3, r3, r5
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	444b      	add	r3, r9
 800b574:	2600      	movs	r6, #0
 800b576:	4698      	mov	r8, r3
 800b578:	0025      	movs	r5, r4
 800b57a:	e012      	b.n	800b5a2 <SaveToRO+0xf2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b57c:	0073      	lsls	r3, r6, #1
 800b57e:	5ae2      	ldrh	r2, [r4, r3]
 800b580:	0029      	movs	r1, r5
 800b582:	2300      	movs	r3, #0
 800b584:	2001      	movs	r0, #1
 800b586:	f005 fa85 	bl	8010a94 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b58a:	483c      	ldr	r0, [pc, #240]	; (800b67c <SaveToRO+0x1cc>)
 800b58c:	f005 fa3e 	bl	8010a0c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b590:	2800      	cmp	r0, #0
 800b592:	d112      	bne.n	800b5ba <SaveToRO+0x10a>
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b594:	2201      	movs	r2, #1
 800b596:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b598:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b59a:	4393      	bics	r3, r2
 800b59c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b59e:	3502      	adds	r5, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5a0:	b2f6      	uxtb	r6, r6
 800b5a2:	4643      	mov	r3, r8
 800b5a4:	68dc      	ldr	r4, [r3, #12]
 800b5a6:	0020      	movs	r0, r4
 800b5a8:	f7f4 fdb6 	bl	8000118 <strlen>
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	0840      	lsrs	r0, r0, #1
 800b5b0:	4286      	cmp	r6, r0
 800b5b2:	d3e3      	bcc.n	800b57c <SaveToRO+0xcc>
 800b5b4:	002c      	movs	r4, r5
 800b5b6:	465d      	mov	r5, fp
 800b5b8:	e7a6      	b.n	800b508 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b5ba:	4b36      	ldr	r3, [pc, #216]	; (800b694 <SaveToRO+0x1e4>)
 800b5bc:	69d8      	ldr	r0, [r3, #28]
 800b5be:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800b5c0:	b007      	add	sp, #28
 800b5c2:	bc3c      	pop	{r2, r3, r4, r5}
 800b5c4:	4690      	mov	r8, r2
 800b5c6:	4699      	mov	r9, r3
 800b5c8:	46a2      	mov	sl, r4
 800b5ca:	46ab      	mov	fp, r5
 800b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b5ce:	4a32      	ldr	r2, [pc, #200]	; (800b698 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b5d0:	4929      	ldr	r1, [pc, #164]	; (800b678 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N<<8) + myID;
 800b5d2:	4693      	mov	fp, r2
 800b5d4:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b5d6:	2001      	movs	r0, #1
		temp = (uint16_t) (N<<8) + myID;
 800b5d8:	0212      	lsls	r2, r2, #8
 800b5da:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b5dc:	b292      	uxth	r2, r2
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f005 fa58 	bl	8010a94 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5e4:	4825      	ldr	r0, [pc, #148]	; (800b67c <SaveToRO+0x1cc>)
 800b5e6:	f005 fa11 	bl	8010a0c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d1e5      	bne.n	800b5ba <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	4393      	bics	r3, r2
 800b5f4:	6123      	str	r3, [r4, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b5f6:	465b      	mov	r3, fp
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d100      	bne.n	800b600 <SaveToRO+0x150>
 800b5fe:	e777      	b.n	800b4f0 <SaveToRO+0x40>
 800b600:	2301      	movs	r3, #1
 800b602:	469a      	mov	sl, r3
 800b604:	4b25      	ldr	r3, [pc, #148]	; (800b69c <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 800b606:	2602      	movs	r6, #2
 800b608:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b60a:	46a0      	mov	r8, r4
 800b60c:	4653      	mov	r3, sl
 800b60e:	1e5d      	subs	r5, r3, #1
 800b610:	2316      	movs	r3, #22
 800b612:	464f      	mov	r7, r9
 800b614:	435d      	muls	r5, r3
 800b616:	464b      	mov	r3, r9
 800b618:	3716      	adds	r7, #22
 800b61a:	195c      	adds	r4, r3, r5
 800b61c:	197f      	adds	r7, r7, r5
 800b61e:	e002      	b.n	800b626 <SaveToRO+0x176>
 800b620:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b622:	42a7      	cmp	r7, r4
 800b624:	d01a      	beq.n	800b65c <SaveToRO+0x1ac>
				if (array[i-1][0]) {
 800b626:	464b      	mov	r3, r9
 800b628:	5b5b      	ldrh	r3, [r3, r5]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0f8      	beq.n	800b620 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b62e:	4b12      	ldr	r3, [pc, #72]	; (800b678 <SaveToRO+0x1c8>)
 800b630:	8822      	ldrh	r2, [r4, #0]
 800b632:	18f1      	adds	r1, r6, r3
 800b634:	2001      	movs	r0, #1
 800b636:	2300      	movs	r3, #0
 800b638:	f005 fa2c 	bl	8010a94 <HAL_FLASH_Program>
					add += 2;
 800b63c:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b63e:	480f      	ldr	r0, [pc, #60]	; (800b67c <SaveToRO+0x1cc>)
					add += 2;
 800b640:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b642:	f005 f9e3 	bl	8010a0c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b646:	2800      	cmp	r0, #0
 800b648:	d1b7      	bne.n	800b5ba <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b64a:	4643      	mov	r3, r8
 800b64c:	2201      	movs	r2, #1
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	3402      	adds	r4, #2
 800b652:	4393      	bics	r3, r2
 800b654:	4642      	mov	r2, r8
 800b656:	6113      	str	r3, [r2, #16]
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b658:	42a7      	cmp	r7, r4
 800b65a:	d1e4      	bne.n	800b626 <SaveToRO+0x176>
		for(uint8_t i=1 ; i<=N ; i++)
 800b65c:	4653      	mov	r3, sl
 800b65e:	3301      	adds	r3, #1
 800b660:	b2db      	uxtb	r3, r3
 800b662:	469a      	mov	sl, r3
 800b664:	465b      	mov	r3, fp
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	4553      	cmp	r3, sl
 800b66a:	d2cf      	bcs.n	800b60c <SaveToRO+0x15c>
 800b66c:	e740      	b.n	800b4f0 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 800b66e:	f005 f9c3 	bl	80109f8 <HAL_FLASH_Lock>
	return result;
 800b672:	2000      	movs	r0, #0
 800b674:	e7a4      	b.n	800b5c0 <SaveToRO+0x110>
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	0801d800 	.word	0x0801d800
 800b67c:	0000c350 	.word	0x0000c350
 800b680:	40022000 	.word	0x40022000
 800b684:	20000a98 	.word	0x20000a98
 800b688:	20001180 	.word	0x20001180
 800b68c:	200070c4 	.word	0x200070c4
 800b690:	0801dc00 	.word	0x0801dc00
 800b694:	20007600 	.word	0x20007600
 800b698:	20000008 	.word	0x20000008
 800b69c:	20000f0c 	.word	0x20000f0c

0800b6a0 <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
	// Clear the array 
	memset(array, 0, sizeof(array));
 800b6a0:	228f      	movs	r2, #143	; 0x8f
{
 800b6a2:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b6a4:	0092      	lsls	r2, r2, #2
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	4805      	ldr	r0, [pc, #20]	; (800b6c0 <ClearROtopology+0x20>)
 800b6aa:	f007 fc95 	bl	8012fd8 <memset>
	N = 1; myID = 0;
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <ClearROtopology+0x24>)
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <ClearROtopology+0x28>)
 800b6b8:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800b6ba:	f7ff fef9 	bl	800b4b0 <SaveToRO>
}
 800b6be:	bd10      	pop	{r4, pc}
 800b6c0:	20000f0c 	.word	0x20000f0c
 800b6c4:	20000008 	.word	0x20000008
 800b6c8:	20000a98 	.word	0x20000a98

0800b6cc <Module_Peripheral_Init>:

/* --- H1DR1 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800b6cc:	b510      	push	{r4, lr}
	/* Array ports */
	MX_USART1_UART_Init();
 800b6ce:	f001 fd67 	bl	800d1a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b6d2:	f001 fd6f 	bl	800d1b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b6d6:	f001 fd85 	bl	800d1e4 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800b6da:	f001 fd9b 	bl	800d214 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b6de:	f001 fdb1 	bl	800d244 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b6e2:	f001 fdc7 	bl	800d274 <MX_USART6_UART_Init>
	
	/* RS485 port */
	RS485_DE_RE_Init();
 800b6e6:	f001 f947 	bl	800c978 <RS485_DE_RE_Init>
	RS485_RECEIVER_EN();
 800b6ea:	2180      	movs	r1, #128	; 0x80
 800b6ec:	2090      	movs	r0, #144	; 0x90
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	0149      	lsls	r1, r1, #5
 800b6f2:	05c0      	lsls	r0, r0, #23
 800b6f4:	f005 fc50 	bl	8010f98 <HAL_GPIO_WritePin>

}
 800b6f8:	bd10      	pop	{r4, pc}
 800b6fa:	46c0      	nop			; (mov r8, r8)

0800b6fc <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800b6fc:	4770      	bx	lr
 800b6fe:	46c0      	nop			; (mov r8, r8)

0800b700 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800b700:	6800      	ldr	r0, [r0, #0]
 800b702:	4b11      	ldr	r3, [pc, #68]	; (800b748 <GetPort+0x48>)
 800b704:	4298      	cmp	r0, r3
 800b706:	d014      	beq.n	800b732 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800b708:	4b10      	ldr	r3, [pc, #64]	; (800b74c <GetPort+0x4c>)
 800b70a:	4298      	cmp	r0, r3
 800b70c:	d015      	beq.n	800b73a <GetPort+0x3a>
			return P2;
	else if (huart->Instance == USART6)
 800b70e:	4b10      	ldr	r3, [pc, #64]	; (800b750 <GetPort+0x50>)
 800b710:	4298      	cmp	r0, r3
 800b712:	d014      	beq.n	800b73e <GetPort+0x3e>
			return P3;
	else if (huart->Instance == USART3)
 800b714:	4b0f      	ldr	r3, [pc, #60]	; (800b754 <GetPort+0x54>)
 800b716:	4298      	cmp	r0, r3
 800b718:	d00d      	beq.n	800b736 <GetPort+0x36>
			return P4;
	else if (huart->Instance == USART5)
 800b71a:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <GetPort+0x58>)
 800b71c:	4298      	cmp	r0, r3
 800b71e:	d010      	beq.n	800b742 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART1)
			return P6;
		
	return 0;
 800b720:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <GetPort+0x5c>)
 800b722:	469c      	mov	ip, r3
 800b724:	4460      	add	r0, ip
 800b726:	4243      	negs	r3, r0
 800b728:	4158      	adcs	r0, r3
 800b72a:	2306      	movs	r3, #6
 800b72c:	4240      	negs	r0, r0
 800b72e:	4018      	ands	r0, r3
}
 800b730:	4770      	bx	lr
			return P1;
 800b732:	2001      	movs	r0, #1
 800b734:	e7fc      	b.n	800b730 <GetPort+0x30>
			return P4;
 800b736:	2004      	movs	r0, #4
 800b738:	e7fa      	b.n	800b730 <GetPort+0x30>
			return P2;
 800b73a:	2002      	movs	r0, #2
 800b73c:	e7f8      	b.n	800b730 <GetPort+0x30>
			return P3;
 800b73e:	2003      	movs	r0, #3
 800b740:	e7f6      	b.n	800b730 <GetPort+0x30>
			return P5;
 800b742:	2005      	movs	r0, #5
 800b744:	e7f4      	b.n	800b730 <GetPort+0x30>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	40004c00 	.word	0x40004c00
 800b74c:	40004400 	.word	0x40004400
 800b750:	40011400 	.word	0x40011400
 800b754:	40004800 	.word	0x40004800
 800b758:	40005000 	.word	0x40005000
 800b75c:	bffec800 	.word	0xbffec800

0800b760 <SetupBridgeMode>:
*/
Module_Status SetupBridgeMode(uint8_t Source_p, uint32_t baud_rate)
{

	// Set module mode
	H1DR1_Mode=BRIDGE;
 800b760:	2201      	movs	r2, #1
 800b762:	4b15      	ldr	r3, [pc, #84]	; (800b7b8 <SetupBridgeMode+0x58>)
{
 800b764:	b570      	push	{r4, r5, r6, lr}
	H1DR1_Mode=BRIDGE;
 800b766:	701a      	strb	r2, [r3, #0]
	Src_port=Source_p;
 800b768:	4b14      	ldr	r3, [pc, #80]	; (800b7bc <SetupBridgeMode+0x5c>)
{
 800b76a:	0006      	movs	r6, r0
	Src_port=Source_p;
 800b76c:	7018      	strb	r0, [r3, #0]
	if(baud_rate<=19200 && baud_rate>=2400)
 800b76e:	4b14      	ldr	r3, [pc, #80]	; (800b7c0 <SetupBridgeMode+0x60>)
{
 800b770:	000d      	movs	r5, r1
	if(baud_rate<=19200 && baud_rate>=2400)
 800b772:	18ca      	adds	r2, r1, r3
 800b774:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <SetupBridgeMode+0x64>)
 800b776:	429a      	cmp	r2, r3
 800b778:	d81b      	bhi.n	800b7b2 <SetupBridgeMode+0x52>
	{
	// Reinit the RS485 port to required settings 
		if ( MB_PORT_Init(baud_rate, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1) == H1DR1_OK )
 800b77a:	2300      	movs	r3, #0
 800b77c:	2200      	movs	r2, #0
 800b77e:	2100      	movs	r1, #0
 800b780:	0028      	movs	r0, r5
 800b782:	f001 fcf1 	bl	800d168 <MB_PORT_Init>
 800b786:	1e04      	subs	r4, r0, #0
 800b788:	d113      	bne.n	800b7b2 <SetupBridgeMode+0x52>
		{    
		// Set the baud rate of the src port to baud_rate
			if ( UpdateBaudrate(Source_p, baud_rate) == BOS_OK )
 800b78a:	0029      	movs	r1, r5
 800b78c:	0030      	movs	r0, r6
 800b78e:	f001 ff0f 	bl	800d5b0 <UpdateBaudrate>
 800b792:	2800      	cmp	r0, #0
 800b794:	d10d      	bne.n	800b7b2 <SetupBridgeMode+0x52>
			{
			// Bridge between the src port and RS485 port
				if ( Bridge(Source_p, P_RS485) == BOS_OK )
 800b796:	2106      	movs	r1, #6
 800b798:	0030      	movs	r0, r6
 800b79a:	f7f9 f8e9 	bl	8004970 <Bridge>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d107      	bne.n	800b7b2 <SetupBridgeMode+0x52>
				{
				// Set the RS485 to Receiver
					RS485_RECEIVER_EN();
 800b7a2:	2180      	movs	r1, #128	; 0x80
 800b7a4:	2090      	movs	r0, #144	; 0x90
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	0149      	lsls	r1, r1, #5
 800b7aa:	05c0      	lsls	r0, r0, #23
 800b7ac:	f005 fbf4 	bl	8010f98 <HAL_GPIO_WritePin>
 800b7b0:	e000      	b.n	800b7b4 <SetupBridgeMode+0x54>
			}
			else return H1DR1_ERROR;
		}
		else return H1DR1_ERROR;	
	}
	else return H1DR1_ERROR;	
 800b7b2:	24ff      	movs	r4, #255	; 0xff
}
 800b7b4:	0020      	movs	r0, r4
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	2000741c 	.word	0x2000741c
 800b7bc:	20007330 	.word	0x20007330
 800b7c0:	fffff6a0 	.word	0xfffff6a0
 800b7c4:	000041a0 	.word	0x000041a0

0800b7c8 <Module_MessagingTask>:
{
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	ab02      	add	r3, sp, #8
 800b7cc:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800b7ce:	4b10      	ldr	r3, [pc, #64]	; (800b810 <Module_MessagingTask+0x48>)
 800b7d0:	4298      	cmp	r0, r3
 800b7d2:	d108      	bne.n	800b7e6 <Module_MessagingTask+0x1e>
			switch(cMessage[port-1][shift])
 800b7d4:	3901      	subs	r1, #1
 800b7d6:	00cb      	lsls	r3, r1, #3
 800b7d8:	1a5b      	subs	r3, r3, r1
 800b7da:	490e      	ldr	r1, [pc, #56]	; (800b814 <Module_MessagingTask+0x4c>)
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	18c9      	adds	r1, r1, r3
 800b7e0:	5c8b      	ldrb	r3, [r1, r2]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d001      	beq.n	800b7ea <Module_MessagingTask+0x22>
}
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	bd10      	pop	{r4, pc}
					Src_port = cMessage[port-1][1+shift];
 800b7ea:	1889      	adds	r1, r1, r2
 800b7ec:	7848      	ldrb	r0, [r1, #1]
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <Module_MessagingTask+0x50>)
					Br_baud_rate = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800b7f0:	78ca      	ldrb	r2, [r1, #3]
					Src_port = cMessage[port-1][1+shift];
 800b7f2:	7018      	strb	r0, [r3, #0]
					Br_baud_rate = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800b7f4:	788b      	ldrb	r3, [r1, #2]
 800b7f6:	0412      	lsls	r2, r2, #16
 800b7f8:	061b      	lsls	r3, r3, #24
 800b7fa:	189b      	adds	r3, r3, r2
 800b7fc:	794a      	ldrb	r2, [r1, #5]
 800b7fe:	7909      	ldrb	r1, [r1, #4]
 800b800:	189b      	adds	r3, r3, r2
 800b802:	0209      	lsls	r1, r1, #8
 800b804:	1859      	adds	r1, r3, r1
 800b806:	4b05      	ldr	r3, [pc, #20]	; (800b81c <Module_MessagingTask+0x54>)
 800b808:	6019      	str	r1, [r3, #0]
					SetupBridgeMode(Src_port,Br_baud_rate);
 800b80a:	f7ff ffa9 	bl	800b760 <SetupBridgeMode>
					break;
 800b80e:	e7ea      	b.n	800b7e6 <Module_MessagingTask+0x1e>
 800b810:	00000b54 	.word	0x00000b54
 800b814:	20000c90 	.word	0x20000c90
 800b818:	20007330 	.word	0x20007330
 800b81c:	200071d8 	.word	0x200071d8

0800b820 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800b820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b822:	46de      	mov	lr, fp
 800b824:	4657      	mov	r7, sl
 800b826:	464e      	mov	r6, r9
 800b828:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800b82a:	2201      	movs	r2, #1
 800b82c:	4b5f      	ldr	r3, [pc, #380]	; (800b9ac <DMA_Init+0x18c>)
{
 800b82e:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800b830:	6959      	ldr	r1, [r3, #20]
{
 800b832:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800b834:	4311      	orrs	r1, r2
 800b836:	6159      	str	r1, [r3, #20]
 800b838:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800b83a:	4c5d      	ldr	r4, [pc, #372]	; (800b9b0 <DMA_Init+0x190>)
	__DMA1_CLK_ENABLE();
 800b83c:	400a      	ands	r2, r1
 800b83e:	9200      	str	r2, [sp, #0]
 800b840:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b842:	2202      	movs	r2, #2
 800b844:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b846:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800b848:	4311      	orrs	r1, r2
 800b84a:	6159      	str	r1, [r3, #20]
 800b84c:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b84e:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800b850:	401a      	ands	r2, r3
 800b852:	9201      	str	r2, [sp, #4]
 800b854:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800b856:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <DMA_Init+0x194>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b858:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800b85a:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b85c:	2320      	movs	r3, #32
 800b85e:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b860:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b862:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b864:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b866:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b868:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b86a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b86c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b86e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800b870:	0020      	movs	r0, r4
 800b872:	f004 fb8f 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b876:	4b50      	ldr	r3, [pc, #320]	; (800b9b8 <DMA_Init+0x198>)
	HAL_DMA_Init(hDMA);		
 800b878:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b87a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b87c:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b87e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b880:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b882:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b884:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b886:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b888:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b88a:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800b88c:	3038      	adds	r0, #56	; 0x38
 800b88e:	f004 fb81 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b892:	4b4a      	ldr	r3, [pc, #296]	; (800b9bc <DMA_Init+0x19c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b894:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800b896:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b898:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800b89a:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b89c:	50e5      	str	r5, [r4, r3]
 800b89e:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	50e2      	str	r2, [r4, r3]
 800b8a4:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8aa:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8ac:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8ae:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8b0:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800b8b2:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8b4:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800b8b6:	f004 fb6d 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b8ba:	23a8      	movs	r3, #168	; 0xa8
 800b8bc:	4a40      	ldr	r2, [pc, #256]	; (800b9c0 <DMA_Init+0x1a0>)
	HAL_DMA_Init(hDMA);		
 800b8be:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b8c0:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8c2:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8d8:	3304      	adds	r3, #4
 800b8da:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8dc:	3304      	adds	r3, #4
 800b8de:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b8e0:	30a8      	adds	r0, #168	; 0xa8
 800b8e2:	f004 fb57 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b8e6:	23e0      	movs	r3, #224	; 0xe0
 800b8e8:	4a36      	ldr	r2, [pc, #216]	; (800b9c4 <DMA_Init+0x1a4>)
	HAL_DMA_Init(hDMA);		
 800b8ea:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b8ec:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8ee:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b900:	3304      	adds	r3, #4
 800b902:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b904:	3304      	adds	r3, #4
 800b906:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b908:	3304      	adds	r3, #4
 800b90a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b90c:	30e0      	adds	r0, #224	; 0xe0
 800b90e:	f004 fb41 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b912:	238c      	movs	r3, #140	; 0x8c
 800b914:	4a2c      	ldr	r2, [pc, #176]	; (800b9c8 <DMA_Init+0x1a8>)
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b91a:	0020      	movs	r0, r4
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b91c:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b91e:	3304      	adds	r3, #4
 800b920:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b922:	3304      	adds	r3, #4
 800b924:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b926:	3304      	adds	r3, #4
 800b928:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b92a:	3304      	adds	r3, #4
 800b92c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b92e:	3304      	adds	r3, #4
 800b930:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b932:	3304      	adds	r3, #4
 800b934:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b936:	3019      	adds	r0, #25
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b938:	3304      	adds	r3, #4
 800b93a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b93c:	30ff      	adds	r0, #255	; 0xff
 800b93e:	f004 fb29 	bl	800ff94 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800b942:	4c22      	ldr	r4, [pc, #136]	; (800b9cc <DMA_Init+0x1ac>)
 800b944:	4b22      	ldr	r3, [pc, #136]	; (800b9d0 <DMA_Init+0x1b0>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b946:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800b948:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b94a:	2310      	movs	r3, #16
 800b94c:	469b      	mov	fp, r3
 800b94e:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b950:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b952:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b954:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b956:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b958:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800b95a:	0020      	movs	r0, r4
 800b95c:	f004 fb1a 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b960:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <DMA_Init+0x1b4>)
	HAL_DMA_Init(hDMA);		
 800b962:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b964:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b966:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b968:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b96a:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b96c:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b96e:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b970:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800b972:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b974:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800b976:	3038      	adds	r0, #56	; 0x38
 800b978:	f004 fb0c 	bl	800ff94 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <DMA_Init+0x1b8>)
	HAL_DMA_Init(hDMA);		
 800b97e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b980:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b982:	465b      	mov	r3, fp
 800b984:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b986:	4653      	mov	r3, sl
 800b988:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b98a:	464b      	mov	r3, r9
 800b98c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b98e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b990:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b992:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b994:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b996:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b998:	3070      	adds	r0, #112	; 0x70
 800b99a:	f004 fafb 	bl	800ff94 <HAL_DMA_Init>
}
 800b99e:	b003      	add	sp, #12
 800b9a0:	bc3c      	pop	{r2, r3, r4, r5}
 800b9a2:	4690      	mov	r8, r2
 800b9a4:	4699      	mov	r9, r3
 800b9a6:	46a2      	mov	sl, r4
 800b9a8:	46ab      	mov	fp, r5
 800b9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ac:	40021000 	.word	0x40021000
 800b9b0:	20002070 	.word	0x20002070
 800b9b4:	40020008 	.word	0x40020008
 800b9b8:	40020030 	.word	0x40020030
 800b9bc:	40020058 	.word	0x40020058
 800b9c0:	4002006c 	.word	0x4002006c
 800b9c4:	4002041c 	.word	0x4002041c
 800b9c8:	40020430 	.word	0x40020430
 800b9cc:	20001fc8 	.word	0x20001fc8
 800b9d0:	4002001c 	.word	0x4002001c
 800b9d4:	40020044 	.word	0x40020044
 800b9d8:	40020080 	.word	0x40020080

0800b9dc <DMA_MSG_RX_CH_Init>:
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b9dc:	2300      	movs	r3, #0
{
 800b9de:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b9e0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b9e2:	6083      	str	r3, [r0, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b9e4:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b9e6:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b9e8:	3320      	adds	r3, #32
 800b9ea:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b9ec:	2380      	movs	r3, #128	; 0x80
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b9ee:	2280      	movs	r2, #128	; 0x80
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b9f0:	019b      	lsls	r3, r3, #6
	hDMA->Instance = ch;
 800b9f2:	6001      	str	r1, [r0, #0]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b9f4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b9f6:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800b9f8:	f004 facc 	bl	800ff94 <HAL_DMA_Init>
}
 800b9fc:	bd10      	pop	{r4, pc}
 800b9fe:	46c0      	nop			; (mov r8, r8)

0800ba00 <DMA_STREAM_CH_Init>:
/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba00:	2300      	movs	r3, #0
{
 800ba02:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba04:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ba06:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800ba08:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba0a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba0c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba0e:	3320      	adds	r3, #32
 800ba10:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ba12:	2380      	movs	r3, #128	; 0x80
 800ba14:	015b      	lsls	r3, r3, #5
	hDMA->Instance = ch;
 800ba16:	6001      	str	r1, [r0, #0]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ba18:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ba1a:	f004 fabb 	bl	800ff94 <HAL_DMA_Init>
}
 800ba1e:	bd10      	pop	{r4, pc}

0800ba20 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800ba20:	6803      	ldr	r3, [r0, #0]
 800ba22:	4a21      	ldr	r2, [pc, #132]	; (800baa8 <SetupDMAInterrupts+0x88>)
{
 800ba24:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d01c      	beq.n	800ba64 <SetupDMAInterrupts+0x44>
 800ba2a:	d80e      	bhi.n	800ba4a <SetupDMAInterrupts+0x2a>
 800ba2c:	4a1f      	ldr	r2, [pc, #124]	; (800baac <SetupDMAInterrupts+0x8c>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d026      	beq.n	800ba80 <SetupDMAInterrupts+0x60>
 800ba32:	d82d      	bhi.n	800ba90 <SetupDMAInterrupts+0x70>
 800ba34:	4a1e      	ldr	r2, [pc, #120]	; (800bab0 <SetupDMAInterrupts+0x90>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d131      	bne.n	800ba9e <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800ba3a:	2009      	movs	r0, #9
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f004 f921 	bl	800fc84 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800ba42:	2009      	movs	r0, #9
 800ba44:	f004 f94a 	bl	800fcdc <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ba48:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ba4a:	4a1a      	ldr	r2, [pc, #104]	; (800bab4 <SetupDMAInterrupts+0x94>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d017      	beq.n	800ba80 <SetupDMAInterrupts+0x60>
 800ba50:	d910      	bls.n	800ba74 <SetupDMAInterrupts+0x54>
 800ba52:	4a19      	ldr	r2, [pc, #100]	; (800bab8 <SetupDMAInterrupts+0x98>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d005      	beq.n	800ba64 <SetupDMAInterrupts+0x44>
 800ba58:	4a18      	ldr	r2, [pc, #96]	; (800babc <SetupDMAInterrupts+0x9c>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d002      	beq.n	800ba64 <SetupDMAInterrupts+0x44>
 800ba5e:	4a18      	ldr	r2, [pc, #96]	; (800bac0 <SetupDMAInterrupts+0xa0>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d1f1      	bne.n	800ba48 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ba64:	2200      	movs	r2, #0
 800ba66:	200b      	movs	r0, #11
 800ba68:	f004 f90c 	bl	800fc84 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ba6c:	200b      	movs	r0, #11
 800ba6e:	f004 f935 	bl	800fcdc <HAL_NVIC_EnableIRQ>
}
 800ba72:	e7e9      	b.n	800ba48 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ba74:	4a13      	ldr	r2, [pc, #76]	; (800bac4 <SetupDMAInterrupts+0xa4>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d0f4      	beq.n	800ba64 <SetupDMAInterrupts+0x44>
 800ba7a:	4a13      	ldr	r2, [pc, #76]	; (800bac8 <SetupDMAInterrupts+0xa8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d1e3      	bne.n	800ba48 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ba80:	2200      	movs	r2, #0
 800ba82:	200a      	movs	r0, #10
 800ba84:	f004 f8fe 	bl	800fc84 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ba88:	200a      	movs	r0, #10
 800ba8a:	f004 f927 	bl	800fcdc <HAL_NVIC_EnableIRQ>
			break;
 800ba8e:	e7db      	b.n	800ba48 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ba90:	4a0e      	ldr	r2, [pc, #56]	; (800bacc <SetupDMAInterrupts+0xac>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d0e6      	beq.n	800ba64 <SetupDMAInterrupts+0x44>
 800ba96:	4a0e      	ldr	r2, [pc, #56]	; (800bad0 <SetupDMAInterrupts+0xb0>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d1d5      	bne.n	800ba48 <SetupDMAInterrupts+0x28>
 800ba9c:	e7e2      	b.n	800ba64 <SetupDMAInterrupts+0x44>
 800ba9e:	4a0d      	ldr	r2, [pc, #52]	; (800bad4 <SetupDMAInterrupts+0xb4>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d0ed      	beq.n	800ba80 <SetupDMAInterrupts+0x60>
 800baa4:	e7d0      	b.n	800ba48 <SetupDMAInterrupts+0x28>
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	4002006c 	.word	0x4002006c
 800baac:	40020030 	.word	0x40020030
 800bab0:	40020008 	.word	0x40020008
 800bab4:	4002041c 	.word	0x4002041c
 800bab8:	40020444 	.word	0x40020444
 800babc:	40020458 	.word	0x40020458
 800bac0:	40020430 	.word	0x40020430
 800bac4:	40020080 	.word	0x40020080
 800bac8:	40020408 	.word	0x40020408
 800bacc:	40020044 	.word	0x40020044
 800bad0:	40020058 	.word	0x40020058
 800bad4:	4002001c 	.word	0x4002001c

0800bad8 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800bad8:	6803      	ldr	r3, [r0, #0]
 800bada:	4a1b      	ldr	r2, [pc, #108]	; (800bb48 <UnSetupDMAInterrupts+0x70>)
{
 800badc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d018      	beq.n	800bb14 <UnSetupDMAInterrupts+0x3c>
 800bae2:	d80a      	bhi.n	800bafa <UnSetupDMAInterrupts+0x22>
 800bae4:	4a19      	ldr	r2, [pc, #100]	; (800bb4c <UnSetupDMAInterrupts+0x74>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d01e      	beq.n	800bb28 <UnSetupDMAInterrupts+0x50>
 800baea:	d821      	bhi.n	800bb30 <UnSetupDMAInterrupts+0x58>
 800baec:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <UnSetupDMAInterrupts+0x78>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d125      	bne.n	800bb3e <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800baf2:	2009      	movs	r0, #9
 800baf4:	f004 f8fc 	bl	800fcf0 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800baf8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bafa:	4a16      	ldr	r2, [pc, #88]	; (800bb54 <UnSetupDMAInterrupts+0x7c>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d013      	beq.n	800bb28 <UnSetupDMAInterrupts+0x50>
 800bb00:	d90c      	bls.n	800bb1c <UnSetupDMAInterrupts+0x44>
 800bb02:	4a15      	ldr	r2, [pc, #84]	; (800bb58 <UnSetupDMAInterrupts+0x80>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d005      	beq.n	800bb14 <UnSetupDMAInterrupts+0x3c>
 800bb08:	4a14      	ldr	r2, [pc, #80]	; (800bb5c <UnSetupDMAInterrupts+0x84>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d002      	beq.n	800bb14 <UnSetupDMAInterrupts+0x3c>
 800bb0e:	4a14      	ldr	r2, [pc, #80]	; (800bb60 <UnSetupDMAInterrupts+0x88>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d1f1      	bne.n	800baf8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bb14:	200b      	movs	r0, #11
 800bb16:	f004 f8eb 	bl	800fcf0 <HAL_NVIC_DisableIRQ>
}
 800bb1a:	e7ed      	b.n	800baf8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bb1c:	4a11      	ldr	r2, [pc, #68]	; (800bb64 <UnSetupDMAInterrupts+0x8c>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d0f8      	beq.n	800bb14 <UnSetupDMAInterrupts+0x3c>
 800bb22:	4a11      	ldr	r2, [pc, #68]	; (800bb68 <UnSetupDMAInterrupts+0x90>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d1e7      	bne.n	800baf8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bb28:	200a      	movs	r0, #10
 800bb2a:	f004 f8e1 	bl	800fcf0 <HAL_NVIC_DisableIRQ>
			break;
 800bb2e:	e7e3      	b.n	800baf8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bb30:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <UnSetupDMAInterrupts+0x94>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d0ee      	beq.n	800bb14 <UnSetupDMAInterrupts+0x3c>
 800bb36:	4a0e      	ldr	r2, [pc, #56]	; (800bb70 <UnSetupDMAInterrupts+0x98>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d1dd      	bne.n	800baf8 <UnSetupDMAInterrupts+0x20>
 800bb3c:	e7ea      	b.n	800bb14 <UnSetupDMAInterrupts+0x3c>
 800bb3e:	4a0d      	ldr	r2, [pc, #52]	; (800bb74 <UnSetupDMAInterrupts+0x9c>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d0f1      	beq.n	800bb28 <UnSetupDMAInterrupts+0x50>
 800bb44:	e7d8      	b.n	800baf8 <UnSetupDMAInterrupts+0x20>
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	4002006c 	.word	0x4002006c
 800bb4c:	40020030 	.word	0x40020030
 800bb50:	40020008 	.word	0x40020008
 800bb54:	4002041c 	.word	0x4002041c
 800bb58:	40020444 	.word	0x40020444
 800bb5c:	40020458 	.word	0x40020458
 800bb60:	40020430 	.word	0x40020430
 800bb64:	40020080 	.word	0x40020080
 800bb68:	40020408 	.word	0x40020408
 800bb6c:	40020044 	.word	0x40020044
 800bb70:	40020058 	.word	0x40020058
 800bb74:	4002001c 	.word	0x4002001c

0800bb78 <DMA_MSG_TX_UnSetup>:
{	
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800bb7c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800bb7e:	f7ff ffab 	bl	800bad8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bb86:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800bb88:	6623      	str	r3, [r4, #96]	; 0x60
}
 800bb8a:	bd10      	pop	{r4, pc}

0800bb8c <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bb8c:	6803      	ldr	r3, [r0, #0]
 800bb8e:	4ac6      	ldr	r2, [pc, #792]	; (800bea8 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800bb90:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d03a      	beq.n	800bc0c <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bb96:	4ac5      	ldr	r2, [pc, #788]	; (800beac <RemapAndLinkDMAtoUARTRx+0x320>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d058      	beq.n	800bc4e <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bb9c:	4ac4      	ldr	r2, [pc, #784]	; (800beb0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d100      	bne.n	800bba4 <RemapAndLinkDMAtoUARTRx+0x18>
 800bba2:	e093      	b.n	800bccc <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bba4:	4ac3      	ldr	r2, [pc, #780]	; (800beb4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d100      	bne.n	800bbac <RemapAndLinkDMAtoUARTRx+0x20>
 800bbaa:	e0c0      	b.n	800bd2e <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bbac:	4ac2      	ldr	r2, [pc, #776]	; (800beb8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d100      	bne.n	800bbb4 <RemapAndLinkDMAtoUARTRx+0x28>
 800bbb2:	e19d      	b.n	800bef0 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bbb4:	4ac1      	ldr	r2, [pc, #772]	; (800bebc <RemapAndLinkDMAtoUARTRx+0x330>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d100      	bne.n	800bbbc <RemapAndLinkDMAtoUARTRx+0x30>
 800bbba:	e1b9      	b.n	800bf30 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800bbbc:	4ac0      	ldr	r2, [pc, #768]	; (800bec0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d000      	beq.n	800bbc4 <RemapAndLinkDMAtoUARTRx+0x38>
 800bbc2:	e265      	b.n	800c090 <RemapAndLinkDMAtoUARTRx+0x504>
 800bbc4:	680b      	ldr	r3, [r1, #0]
 800bbc6:	4abf      	ldr	r2, [pc, #764]	; (800bec4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d100      	bne.n	800bbce <RemapAndLinkDMAtoUARTRx+0x42>
 800bbcc:	e230      	b.n	800c030 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800bbce:	4abe      	ldr	r2, [pc, #760]	; (800bec8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d100      	bne.n	800bbd6 <RemapAndLinkDMAtoUARTRx+0x4a>
 800bbd4:	e237      	b.n	800c046 <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800bbd6:	4abd      	ldr	r2, [pc, #756]	; (800becc <RemapAndLinkDMAtoUARTRx+0x340>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d100      	bne.n	800bbde <RemapAndLinkDMAtoUARTRx+0x52>
 800bbdc:	e235      	b.n	800c04a <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800bbde:	4abc      	ldr	r2, [pc, #752]	; (800bed0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d100      	bne.n	800bbe6 <RemapAndLinkDMAtoUARTRx+0x5a>
 800bbe4:	e23d      	b.n	800c062 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800bbe6:	4abb      	ldr	r2, [pc, #748]	; (800bed4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d100      	bne.n	800bbee <RemapAndLinkDMAtoUARTRx+0x62>
 800bbec:	e245      	b.n	800c07a <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800bbee:	4aba      	ldr	r2, [pc, #744]	; (800bed8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d145      	bne.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800bbf4:	4ab9      	ldr	r2, [pc, #740]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800bbf6:	23a8      	movs	r3, #168	; 0xa8
 800bbf8:	4db9      	ldr	r5, [pc, #740]	; (800bee0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bbfa:	58d4      	ldr	r4, [r2, r3]
 800bbfc:	402c      	ands	r4, r5
 800bbfe:	50d4      	str	r4, [r2, r3]
 800bc00:	24e0      	movs	r4, #224	; 0xe0
 800bc02:	58d5      	ldr	r5, [r2, r3]
 800bc04:	0124      	lsls	r4, r4, #4
 800bc06:	432c      	orrs	r4, r5
 800bc08:	50d4      	str	r4, [r2, r3]
 800bc0a:	e039      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bc0c:	680b      	ldr	r3, [r1, #0]
 800bc0e:	4aad      	ldr	r2, [pc, #692]	; (800bec4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d100      	bne.n	800bc16 <RemapAndLinkDMAtoUARTRx+0x8a>
 800bc14:	e07e      	b.n	800bd14 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bc16:	4aac      	ldr	r2, [pc, #688]	; (800bec8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d100      	bne.n	800bc1e <RemapAndLinkDMAtoUARTRx+0x92>
 800bc1c:	e085      	b.n	800bd2a <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bc1e:	4aab      	ldr	r2, [pc, #684]	; (800becc <RemapAndLinkDMAtoUARTRx+0x340>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d030      	beq.n	800bc86 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800bc24:	4aaa      	ldr	r2, [pc, #680]	; (800bed0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d039      	beq.n	800bc9e <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bc2a:	4aaa      	ldr	r2, [pc, #680]	; (800bed4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d042      	beq.n	800bcb6 <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bc30:	4aa9      	ldr	r2, [pc, #676]	; (800bed8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d124      	bne.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800bc36:	4aa9      	ldr	r2, [pc, #676]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800bc38:	23a8      	movs	r3, #168	; 0xa8
 800bc3a:	4da9      	ldr	r5, [pc, #676]	; (800bee0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bc3c:	58d4      	ldr	r4, [r2, r3]
 800bc3e:	402c      	ands	r4, r5
 800bc40:	50d4      	str	r4, [r2, r3]
 800bc42:	2480      	movs	r4, #128	; 0x80
 800bc44:	58d5      	ldr	r5, [r2, r3]
 800bc46:	0124      	lsls	r4, r4, #4
 800bc48:	432c      	orrs	r4, r5
 800bc4a:	50d4      	str	r4, [r2, r3]
 800bc4c:	e018      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bc4e:	680b      	ldr	r3, [r1, #0]
 800bc50:	4a9c      	ldr	r2, [pc, #624]	; (800bec4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d100      	bne.n	800bc58 <RemapAndLinkDMAtoUARTRx+0xcc>
 800bc56:	e0b0      	b.n	800bdba <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800bc58:	4a9b      	ldr	r2, [pc, #620]	; (800bec8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d100      	bne.n	800bc60 <RemapAndLinkDMAtoUARTRx+0xd4>
 800bc5e:	e0b7      	b.n	800bdd0 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800bc60:	4a9a      	ldr	r2, [pc, #616]	; (800becc <RemapAndLinkDMAtoUARTRx+0x340>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d100      	bne.n	800bc68 <RemapAndLinkDMAtoUARTRx+0xdc>
 800bc66:	e0bf      	b.n	800bde8 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800bc68:	4a99      	ldr	r2, [pc, #612]	; (800bed0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d100      	bne.n	800bc70 <RemapAndLinkDMAtoUARTRx+0xe4>
 800bc6e:	e0c7      	b.n	800be00 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800bc70:	4a98      	ldr	r2, [pc, #608]	; (800bed4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d100      	bne.n	800bc78 <RemapAndLinkDMAtoUARTRx+0xec>
 800bc76:	e0cf      	b.n	800be18 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800bc78:	4a97      	ldr	r2, [pc, #604]	; (800bed8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d100      	bne.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
 800bc7e:	e0d6      	b.n	800be2e <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800bc80:	6641      	str	r1, [r0, #100]	; 0x64
 800bc82:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800bc86:	23a8      	movs	r3, #168	; 0xa8
 800bc88:	4a96      	ldr	r2, [pc, #600]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bc8a:	4d97      	ldr	r5, [pc, #604]	; (800bee8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bc8c:	58d4      	ldr	r4, [r2, r3]
 800bc8e:	402c      	ands	r4, r5
 800bc90:	50d4      	str	r4, [r2, r3]
 800bc92:	2480      	movs	r4, #128	; 0x80
 800bc94:	58d5      	ldr	r5, [r2, r3]
 800bc96:	0324      	lsls	r4, r4, #12
 800bc98:	432c      	orrs	r4, r5
 800bc9a:	50d4      	str	r4, [r2, r3]
 800bc9c:	e7f0      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800bc9e:	23a8      	movs	r3, #168	; 0xa8
 800bca0:	4a90      	ldr	r2, [pc, #576]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bca2:	4d92      	ldr	r5, [pc, #584]	; (800beec <RemapAndLinkDMAtoUARTRx+0x360>)
 800bca4:	58d4      	ldr	r4, [r2, r3]
 800bca6:	402c      	ands	r4, r5
 800bca8:	50d4      	str	r4, [r2, r3]
 800bcaa:	2480      	movs	r4, #128	; 0x80
 800bcac:	58d5      	ldr	r5, [r2, r3]
 800bcae:	0424      	lsls	r4, r4, #16
 800bcb0:	432c      	orrs	r4, r5
 800bcb2:	50d4      	str	r4, [r2, r3]
 800bcb4:	e7e4      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800bcb6:	23a8      	movs	r3, #168	; 0xa8
 800bcb8:	25f0      	movs	r5, #240	; 0xf0
 800bcba:	4a88      	ldr	r2, [pc, #544]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800bcbc:	58d4      	ldr	r4, [r2, r3]
 800bcbe:	43ac      	bics	r4, r5
 800bcc0:	50d4      	str	r4, [r2, r3]
 800bcc2:	58d4      	ldr	r4, [r2, r3]
 800bcc4:	3d70      	subs	r5, #112	; 0x70
 800bcc6:	432c      	orrs	r4, r5
 800bcc8:	50d4      	str	r4, [r2, r3]
 800bcca:	e7d9      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bccc:	680b      	ldr	r3, [r1, #0]
 800bcce:	4a7d      	ldr	r2, [pc, #500]	; (800bec4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d100      	bne.n	800bcd6 <RemapAndLinkDMAtoUARTRx+0x14a>
 800bcd4:	e0ad      	b.n	800be32 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bcd6:	4a7c      	ldr	r2, [pc, #496]	; (800bec8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d100      	bne.n	800bcde <RemapAndLinkDMAtoUARTRx+0x152>
 800bcdc:	e0b4      	b.n	800be48 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bcde:	4a7b      	ldr	r2, [pc, #492]	; (800becc <RemapAndLinkDMAtoUARTRx+0x340>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d100      	bne.n	800bce6 <RemapAndLinkDMAtoUARTRx+0x15a>
 800bce4:	e0b2      	b.n	800be4c <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bce6:	4a7a      	ldr	r2, [pc, #488]	; (800bed0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d100      	bne.n	800bcee <RemapAndLinkDMAtoUARTRx+0x162>
 800bcec:	e0ba      	b.n	800be64 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bcee:	4a79      	ldr	r2, [pc, #484]	; (800bed4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d100      	bne.n	800bcf6 <RemapAndLinkDMAtoUARTRx+0x16a>
 800bcf4:	e0c2      	b.n	800be7c <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bcf6:	4a78      	ldr	r2, [pc, #480]	; (800bed8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d1c1      	bne.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bcfc:	4a77      	ldr	r2, [pc, #476]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800bcfe:	23a8      	movs	r3, #168	; 0xa8
 800bd00:	4d77      	ldr	r5, [pc, #476]	; (800bee0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bd02:	58d4      	ldr	r4, [r2, r3]
 800bd04:	402c      	ands	r4, r5
 800bd06:	50d4      	str	r4, [r2, r3]
 800bd08:	24a0      	movs	r4, #160	; 0xa0
 800bd0a:	58d5      	ldr	r5, [r2, r3]
 800bd0c:	0124      	lsls	r4, r4, #4
 800bd0e:	432c      	orrs	r4, r5
 800bd10:	50d4      	str	r4, [r2, r3]
 800bd12:	e7b5      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800bd14:	23a8      	movs	r3, #168	; 0xa8
 800bd16:	250f      	movs	r5, #15
 800bd18:	4a72      	ldr	r2, [pc, #456]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd1a:	58d4      	ldr	r4, [r2, r3]
 800bd1c:	43ac      	bics	r4, r5
 800bd1e:	50d4      	str	r4, [r2, r3]
 800bd20:	58d4      	ldr	r4, [r2, r3]
 800bd22:	3d07      	subs	r5, #7
 800bd24:	432c      	orrs	r4, r5
 800bd26:	50d4      	str	r4, [r2, r3]
 800bd28:	e7aa      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800bd2a:	4a6e      	ldr	r2, [pc, #440]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd2c:	e784      	b.n	800bc38 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bd2e:	680b      	ldr	r3, [r1, #0]
 800bd30:	4a64      	ldr	r2, [pc, #400]	; (800bec4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d01c      	beq.n	800bd70 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800bd36:	4a64      	ldr	r2, [pc, #400]	; (800bec8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d024      	beq.n	800bd86 <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800bd3c:	4a63      	ldr	r2, [pc, #396]	; (800becc <RemapAndLinkDMAtoUARTRx+0x340>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d023      	beq.n	800bd8a <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800bd42:	4a63      	ldr	r2, [pc, #396]	; (800bed0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d02c      	beq.n	800bda2 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800bd48:	4a62      	ldr	r2, [pc, #392]	; (800bed4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d100      	bne.n	800bd50 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800bd4e:	e0a0      	b.n	800be92 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800bd50:	4a61      	ldr	r2, [pc, #388]	; (800bed8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d000      	beq.n	800bd58 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800bd56:	e793      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800bd58:	4a60      	ldr	r2, [pc, #384]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800bd5a:	23a8      	movs	r3, #168	; 0xa8
 800bd5c:	4d60      	ldr	r5, [pc, #384]	; (800bee0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bd5e:	58d4      	ldr	r4, [r2, r3]
 800bd60:	402c      	ands	r4, r5
 800bd62:	50d4      	str	r4, [r2, r3]
 800bd64:	24b0      	movs	r4, #176	; 0xb0
 800bd66:	58d5      	ldr	r5, [r2, r3]
 800bd68:	0124      	lsls	r4, r4, #4
 800bd6a:	432c      	orrs	r4, r5
 800bd6c:	50d4      	str	r4, [r2, r3]
 800bd6e:	e787      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bd70:	23a8      	movs	r3, #168	; 0xa8
 800bd72:	250f      	movs	r5, #15
 800bd74:	4a5b      	ldr	r2, [pc, #364]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd76:	58d4      	ldr	r4, [r2, r3]
 800bd78:	43ac      	bics	r4, r5
 800bd7a:	50d4      	str	r4, [r2, r3]
 800bd7c:	58d4      	ldr	r4, [r2, r3]
 800bd7e:	3d04      	subs	r5, #4
 800bd80:	432c      	orrs	r4, r5
 800bd82:	50d4      	str	r4, [r2, r3]
 800bd84:	e77c      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bd86:	4a57      	ldr	r2, [pc, #348]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd88:	e7e7      	b.n	800bd5a <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bd8a:	23a8      	movs	r3, #168	; 0xa8
 800bd8c:	4a55      	ldr	r2, [pc, #340]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd8e:	4d56      	ldr	r5, [pc, #344]	; (800bee8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bd90:	58d4      	ldr	r4, [r2, r3]
 800bd92:	402c      	ands	r4, r5
 800bd94:	50d4      	str	r4, [r2, r3]
 800bd96:	24b0      	movs	r4, #176	; 0xb0
 800bd98:	58d5      	ldr	r5, [r2, r3]
 800bd9a:	0324      	lsls	r4, r4, #12
 800bd9c:	432c      	orrs	r4, r5
 800bd9e:	50d4      	str	r4, [r2, r3]
 800bda0:	e76e      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bda2:	23a8      	movs	r3, #168	; 0xa8
 800bda4:	4a4f      	ldr	r2, [pc, #316]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bda6:	4d51      	ldr	r5, [pc, #324]	; (800beec <RemapAndLinkDMAtoUARTRx+0x360>)
 800bda8:	58d4      	ldr	r4, [r2, r3]
 800bdaa:	402c      	ands	r4, r5
 800bdac:	50d4      	str	r4, [r2, r3]
 800bdae:	24b0      	movs	r4, #176	; 0xb0
 800bdb0:	58d5      	ldr	r5, [r2, r3]
 800bdb2:	0424      	lsls	r4, r4, #16
 800bdb4:	432c      	orrs	r4, r5
 800bdb6:	50d4      	str	r4, [r2, r3]
 800bdb8:	e762      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bdba:	23a8      	movs	r3, #168	; 0xa8
 800bdbc:	250f      	movs	r5, #15
 800bdbe:	4a49      	ldr	r2, [pc, #292]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bdc0:	58d4      	ldr	r4, [r2, r3]
 800bdc2:	43ac      	bics	r4, r5
 800bdc4:	50d4      	str	r4, [r2, r3]
 800bdc6:	58d4      	ldr	r4, [r2, r3]
 800bdc8:	3d06      	subs	r5, #6
 800bdca:	432c      	orrs	r4, r5
 800bdcc:	50d4      	str	r4, [r2, r3]
 800bdce:	e757      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bdd0:	4a44      	ldr	r2, [pc, #272]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bdd2:	23a8      	movs	r3, #168	; 0xa8
 800bdd4:	4d42      	ldr	r5, [pc, #264]	; (800bee0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bdd6:	58d4      	ldr	r4, [r2, r3]
 800bdd8:	402c      	ands	r4, r5
 800bdda:	50d4      	str	r4, [r2, r3]
 800bddc:	2490      	movs	r4, #144	; 0x90
 800bdde:	58d5      	ldr	r5, [r2, r3]
 800bde0:	0124      	lsls	r4, r4, #4
 800bde2:	432c      	orrs	r4, r5
 800bde4:	50d4      	str	r4, [r2, r3]
 800bde6:	e74b      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bde8:	23a8      	movs	r3, #168	; 0xa8
 800bdea:	4a3e      	ldr	r2, [pc, #248]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bdec:	4d3e      	ldr	r5, [pc, #248]	; (800bee8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bdee:	58d4      	ldr	r4, [r2, r3]
 800bdf0:	402c      	ands	r4, r5
 800bdf2:	50d4      	str	r4, [r2, r3]
 800bdf4:	2490      	movs	r4, #144	; 0x90
 800bdf6:	58d5      	ldr	r5, [r2, r3]
 800bdf8:	0324      	lsls	r4, r4, #12
 800bdfa:	432c      	orrs	r4, r5
 800bdfc:	50d4      	str	r4, [r2, r3]
 800bdfe:	e73f      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800be00:	23a8      	movs	r3, #168	; 0xa8
 800be02:	4a38      	ldr	r2, [pc, #224]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800be04:	4d39      	ldr	r5, [pc, #228]	; (800beec <RemapAndLinkDMAtoUARTRx+0x360>)
 800be06:	58d4      	ldr	r4, [r2, r3]
 800be08:	402c      	ands	r4, r5
 800be0a:	50d4      	str	r4, [r2, r3]
 800be0c:	2490      	movs	r4, #144	; 0x90
 800be0e:	58d5      	ldr	r5, [r2, r3]
 800be10:	0424      	lsls	r4, r4, #16
 800be12:	432c      	orrs	r4, r5
 800be14:	50d4      	str	r4, [r2, r3]
 800be16:	e733      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800be18:	23a8      	movs	r3, #168	; 0xa8
 800be1a:	25f0      	movs	r5, #240	; 0xf0
 800be1c:	4a2f      	ldr	r2, [pc, #188]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800be1e:	58d4      	ldr	r4, [r2, r3]
 800be20:	43ac      	bics	r4, r5
 800be22:	50d4      	str	r4, [r2, r3]
 800be24:	58d4      	ldr	r4, [r2, r3]
 800be26:	3d60      	subs	r5, #96	; 0x60
 800be28:	432c      	orrs	r4, r5
 800be2a:	50d4      	str	r4, [r2, r3]
 800be2c:	e728      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800be2e:	4a2b      	ldr	r2, [pc, #172]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800be30:	e7cf      	b.n	800bdd2 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800be32:	23a8      	movs	r3, #168	; 0xa8
 800be34:	250f      	movs	r5, #15
 800be36:	4a2b      	ldr	r2, [pc, #172]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800be38:	58d4      	ldr	r4, [r2, r3]
 800be3a:	43ac      	bics	r4, r5
 800be3c:	50d4      	str	r4, [r2, r3]
 800be3e:	58d4      	ldr	r4, [r2, r3]
 800be40:	3d05      	subs	r5, #5
 800be42:	432c      	orrs	r4, r5
 800be44:	50d4      	str	r4, [r2, r3]
 800be46:	e71b      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800be48:	4a26      	ldr	r2, [pc, #152]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800be4a:	e758      	b.n	800bcfe <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800be4c:	23a8      	movs	r3, #168	; 0xa8
 800be4e:	4a25      	ldr	r2, [pc, #148]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800be50:	4d25      	ldr	r5, [pc, #148]	; (800bee8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800be52:	58d4      	ldr	r4, [r2, r3]
 800be54:	402c      	ands	r4, r5
 800be56:	50d4      	str	r4, [r2, r3]
 800be58:	24a0      	movs	r4, #160	; 0xa0
 800be5a:	58d5      	ldr	r5, [r2, r3]
 800be5c:	0324      	lsls	r4, r4, #12
 800be5e:	432c      	orrs	r4, r5
 800be60:	50d4      	str	r4, [r2, r3]
 800be62:	e70d      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800be64:	23a8      	movs	r3, #168	; 0xa8
 800be66:	4a1f      	ldr	r2, [pc, #124]	; (800bee4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800be68:	4d20      	ldr	r5, [pc, #128]	; (800beec <RemapAndLinkDMAtoUARTRx+0x360>)
 800be6a:	58d4      	ldr	r4, [r2, r3]
 800be6c:	402c      	ands	r4, r5
 800be6e:	50d4      	str	r4, [r2, r3]
 800be70:	24a0      	movs	r4, #160	; 0xa0
 800be72:	58d5      	ldr	r5, [r2, r3]
 800be74:	0424      	lsls	r4, r4, #16
 800be76:	432c      	orrs	r4, r5
 800be78:	50d4      	str	r4, [r2, r3]
 800be7a:	e701      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800be7c:	23a8      	movs	r3, #168	; 0xa8
 800be7e:	25f0      	movs	r5, #240	; 0xf0
 800be80:	4a16      	ldr	r2, [pc, #88]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800be82:	58d4      	ldr	r4, [r2, r3]
 800be84:	43ac      	bics	r4, r5
 800be86:	50d4      	str	r4, [r2, r3]
 800be88:	58d4      	ldr	r4, [r2, r3]
 800be8a:	3d50      	subs	r5, #80	; 0x50
 800be8c:	432c      	orrs	r4, r5
 800be8e:	50d4      	str	r4, [r2, r3]
 800be90:	e6f6      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800be92:	23a8      	movs	r3, #168	; 0xa8
 800be94:	25f0      	movs	r5, #240	; 0xf0
 800be96:	4a11      	ldr	r2, [pc, #68]	; (800bedc <RemapAndLinkDMAtoUARTRx+0x350>)
 800be98:	58d4      	ldr	r4, [r2, r3]
 800be9a:	43ac      	bics	r4, r5
 800be9c:	50d4      	str	r4, [r2, r3]
 800be9e:	58d4      	ldr	r4, [r2, r3]
 800bea0:	3d40      	subs	r5, #64	; 0x40
 800bea2:	432c      	orrs	r4, r5
 800bea4:	50d4      	str	r4, [r2, r3]
 800bea6:	e6eb      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
 800bea8:	40013800 	.word	0x40013800
 800beac:	40004400 	.word	0x40004400
 800beb0:	40004800 	.word	0x40004800
 800beb4:	40004c00 	.word	0x40004c00
 800beb8:	40005000 	.word	0x40005000
 800bebc:	40011400 	.word	0x40011400
 800bec0:	40011800 	.word	0x40011800
 800bec4:	40020008 	.word	0x40020008
 800bec8:	40020030 	.word	0x40020030
 800becc:	40020058 	.word	0x40020058
 800bed0:	4002006c 	.word	0x4002006c
 800bed4:	4002041c 	.word	0x4002041c
 800bed8:	40020430 	.word	0x40020430
 800bedc:	40020400 	.word	0x40020400
 800bee0:	fffff0ff 	.word	0xfffff0ff
 800bee4:	40020000 	.word	0x40020000
 800bee8:	fff0ffff 	.word	0xfff0ffff
 800beec:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bef0:	680b      	ldr	r3, [r1, #0]
 800bef2:	4a8e      	ldr	r2, [pc, #568]	; (800c12c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d03b      	beq.n	800bf70 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800bef8:	4a8d      	ldr	r2, [pc, #564]	; (800c130 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d043      	beq.n	800bf86 <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800befe:	4a8d      	ldr	r2, [pc, #564]	; (800c134 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d042      	beq.n	800bf8a <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800bf04:	4a8c      	ldr	r2, [pc, #560]	; (800c138 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d04b      	beq.n	800bfa2 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800bf0a:	4a8c      	ldr	r2, [pc, #560]	; (800c13c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d054      	beq.n	800bfba <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800bf10:	4a8b      	ldr	r2, [pc, #556]	; (800c140 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d000      	beq.n	800bf18 <RemapAndLinkDMAtoUARTRx+0x38c>
 800bf16:	e6b3      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800bf18:	4a8a      	ldr	r2, [pc, #552]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bf1a:	23a8      	movs	r3, #168	; 0xa8
 800bf1c:	4d8a      	ldr	r5, [pc, #552]	; (800c148 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800bf1e:	58d4      	ldr	r4, [r2, r3]
 800bf20:	402c      	ands	r4, r5
 800bf22:	50d4      	str	r4, [r2, r3]
 800bf24:	24c0      	movs	r4, #192	; 0xc0
 800bf26:	58d5      	ldr	r5, [r2, r3]
 800bf28:	0124      	lsls	r4, r4, #4
 800bf2a:	432c      	orrs	r4, r5
 800bf2c:	50d4      	str	r4, [r2, r3]
 800bf2e:	e6a7      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bf30:	680b      	ldr	r3, [r1, #0]
 800bf32:	4a7e      	ldr	r2, [pc, #504]	; (800c12c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d04b      	beq.n	800bfd0 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800bf38:	4a7d      	ldr	r2, [pc, #500]	; (800c130 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d053      	beq.n	800bfe6 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800bf3e:	4a7d      	ldr	r2, [pc, #500]	; (800c134 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d052      	beq.n	800bfea <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800bf44:	4a7c      	ldr	r2, [pc, #496]	; (800c138 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d05b      	beq.n	800c002 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800bf4a:	4a7c      	ldr	r2, [pc, #496]	; (800c13c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d064      	beq.n	800c01a <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800bf50:	4a7b      	ldr	r2, [pc, #492]	; (800c140 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d000      	beq.n	800bf58 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800bf56:	e693      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800bf58:	4a7a      	ldr	r2, [pc, #488]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bf5a:	23a8      	movs	r3, #168	; 0xa8
 800bf5c:	4d7a      	ldr	r5, [pc, #488]	; (800c148 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800bf5e:	58d4      	ldr	r4, [r2, r3]
 800bf60:	402c      	ands	r4, r5
 800bf62:	50d4      	str	r4, [r2, r3]
 800bf64:	24d0      	movs	r4, #208	; 0xd0
 800bf66:	58d5      	ldr	r5, [r2, r3]
 800bf68:	0124      	lsls	r4, r4, #4
 800bf6a:	432c      	orrs	r4, r5
 800bf6c:	50d4      	str	r4, [r2, r3]
 800bf6e:	e687      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bf70:	23a8      	movs	r3, #168	; 0xa8
 800bf72:	250f      	movs	r5, #15
 800bf74:	4a75      	ldr	r2, [pc, #468]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf76:	58d4      	ldr	r4, [r2, r3]
 800bf78:	43ac      	bics	r4, r5
 800bf7a:	50d4      	str	r4, [r2, r3]
 800bf7c:	58d4      	ldr	r4, [r2, r3]
 800bf7e:	3d03      	subs	r5, #3
 800bf80:	432c      	orrs	r4, r5
 800bf82:	50d4      	str	r4, [r2, r3]
 800bf84:	e67c      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800bf86:	4a71      	ldr	r2, [pc, #452]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf88:	e7c7      	b.n	800bf1a <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bf8a:	23a8      	movs	r3, #168	; 0xa8
 800bf8c:	4a6f      	ldr	r2, [pc, #444]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf8e:	4d70      	ldr	r5, [pc, #448]	; (800c150 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bf90:	58d4      	ldr	r4, [r2, r3]
 800bf92:	402c      	ands	r4, r5
 800bf94:	50d4      	str	r4, [r2, r3]
 800bf96:	24c0      	movs	r4, #192	; 0xc0
 800bf98:	58d5      	ldr	r5, [r2, r3]
 800bf9a:	0324      	lsls	r4, r4, #12
 800bf9c:	432c      	orrs	r4, r5
 800bf9e:	50d4      	str	r4, [r2, r3]
 800bfa0:	e66e      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800bfa2:	23a8      	movs	r3, #168	; 0xa8
 800bfa4:	4a69      	ldr	r2, [pc, #420]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfa6:	4d6b      	ldr	r5, [pc, #428]	; (800c154 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800bfa8:	58d4      	ldr	r4, [r2, r3]
 800bfaa:	402c      	ands	r4, r5
 800bfac:	50d4      	str	r4, [r2, r3]
 800bfae:	24c0      	movs	r4, #192	; 0xc0
 800bfb0:	58d5      	ldr	r5, [r2, r3]
 800bfb2:	0424      	lsls	r4, r4, #16
 800bfb4:	432c      	orrs	r4, r5
 800bfb6:	50d4      	str	r4, [r2, r3]
 800bfb8:	e662      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800bfba:	23a8      	movs	r3, #168	; 0xa8
 800bfbc:	25f0      	movs	r5, #240	; 0xf0
 800bfbe:	4a61      	ldr	r2, [pc, #388]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bfc0:	58d4      	ldr	r4, [r2, r3]
 800bfc2:	43ac      	bics	r4, r5
 800bfc4:	50d4      	str	r4, [r2, r3]
 800bfc6:	58d4      	ldr	r4, [r2, r3]
 800bfc8:	3d30      	subs	r5, #48	; 0x30
 800bfca:	432c      	orrs	r4, r5
 800bfcc:	50d4      	str	r4, [r2, r3]
 800bfce:	e657      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800bfd0:	23a8      	movs	r3, #168	; 0xa8
 800bfd2:	250f      	movs	r5, #15
 800bfd4:	4a5d      	ldr	r2, [pc, #372]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfd6:	58d4      	ldr	r4, [r2, r3]
 800bfd8:	43ac      	bics	r4, r5
 800bfda:	50d4      	str	r4, [r2, r3]
 800bfdc:	58d4      	ldr	r4, [r2, r3]
 800bfde:	3d02      	subs	r5, #2
 800bfe0:	432c      	orrs	r4, r5
 800bfe2:	50d4      	str	r4, [r2, r3]
 800bfe4:	e64c      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800bfe6:	4a59      	ldr	r2, [pc, #356]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfe8:	e7b7      	b.n	800bf5a <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800bfea:	23a8      	movs	r3, #168	; 0xa8
 800bfec:	4a57      	ldr	r2, [pc, #348]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfee:	4d58      	ldr	r5, [pc, #352]	; (800c150 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bff0:	58d4      	ldr	r4, [r2, r3]
 800bff2:	402c      	ands	r4, r5
 800bff4:	50d4      	str	r4, [r2, r3]
 800bff6:	24d0      	movs	r4, #208	; 0xd0
 800bff8:	58d5      	ldr	r5, [r2, r3]
 800bffa:	0324      	lsls	r4, r4, #12
 800bffc:	432c      	orrs	r4, r5
 800bffe:	50d4      	str	r4, [r2, r3]
 800c000:	e63e      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c002:	23a8      	movs	r3, #168	; 0xa8
 800c004:	4a51      	ldr	r2, [pc, #324]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c006:	4d53      	ldr	r5, [pc, #332]	; (800c154 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c008:	58d4      	ldr	r4, [r2, r3]
 800c00a:	402c      	ands	r4, r5
 800c00c:	50d4      	str	r4, [r2, r3]
 800c00e:	24d0      	movs	r4, #208	; 0xd0
 800c010:	58d5      	ldr	r5, [r2, r3]
 800c012:	0424      	lsls	r4, r4, #16
 800c014:	432c      	orrs	r4, r5
 800c016:	50d4      	str	r4, [r2, r3]
 800c018:	e632      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c01a:	23a8      	movs	r3, #168	; 0xa8
 800c01c:	25f0      	movs	r5, #240	; 0xf0
 800c01e:	4a49      	ldr	r2, [pc, #292]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c020:	58d4      	ldr	r4, [r2, r3]
 800c022:	43ac      	bics	r4, r5
 800c024:	50d4      	str	r4, [r2, r3]
 800c026:	58d4      	ldr	r4, [r2, r3]
 800c028:	3d20      	subs	r5, #32
 800c02a:	432c      	orrs	r4, r5
 800c02c:	50d4      	str	r4, [r2, r3]
 800c02e:	e627      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c030:	23a8      	movs	r3, #168	; 0xa8
 800c032:	250f      	movs	r5, #15
 800c034:	4a45      	ldr	r2, [pc, #276]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c036:	58d4      	ldr	r4, [r2, r3]
 800c038:	43ac      	bics	r4, r5
 800c03a:	50d4      	str	r4, [r2, r3]
 800c03c:	58d4      	ldr	r4, [r2, r3]
 800c03e:	3d01      	subs	r5, #1
 800c040:	432c      	orrs	r4, r5
 800c042:	50d4      	str	r4, [r2, r3]
 800c044:	e61c      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c046:	4a41      	ldr	r2, [pc, #260]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c048:	e5d5      	b.n	800bbf6 <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c04a:	23a8      	movs	r3, #168	; 0xa8
 800c04c:	4a3f      	ldr	r2, [pc, #252]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c04e:	4d40      	ldr	r5, [pc, #256]	; (800c150 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c050:	58d4      	ldr	r4, [r2, r3]
 800c052:	402c      	ands	r4, r5
 800c054:	50d4      	str	r4, [r2, r3]
 800c056:	24e0      	movs	r4, #224	; 0xe0
 800c058:	58d5      	ldr	r5, [r2, r3]
 800c05a:	0324      	lsls	r4, r4, #12
 800c05c:	432c      	orrs	r4, r5
 800c05e:	50d4      	str	r4, [r2, r3]
 800c060:	e60e      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c062:	23a8      	movs	r3, #168	; 0xa8
 800c064:	4a39      	ldr	r2, [pc, #228]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c066:	4d3b      	ldr	r5, [pc, #236]	; (800c154 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c068:	58d4      	ldr	r4, [r2, r3]
 800c06a:	402c      	ands	r4, r5
 800c06c:	50d4      	str	r4, [r2, r3]
 800c06e:	24e0      	movs	r4, #224	; 0xe0
 800c070:	58d5      	ldr	r5, [r2, r3]
 800c072:	0424      	lsls	r4, r4, #16
 800c074:	432c      	orrs	r4, r5
 800c076:	50d4      	str	r4, [r2, r3]
 800c078:	e602      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c07a:	23a8      	movs	r3, #168	; 0xa8
 800c07c:	25f0      	movs	r5, #240	; 0xf0
 800c07e:	4a31      	ldr	r2, [pc, #196]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c080:	58d4      	ldr	r4, [r2, r3]
 800c082:	43ac      	bics	r4, r5
 800c084:	50d4      	str	r4, [r2, r3]
 800c086:	58d4      	ldr	r4, [r2, r3]
 800c088:	3d10      	subs	r5, #16
 800c08a:	432c      	orrs	r4, r5
 800c08c:	50d4      	str	r4, [r2, r3]
 800c08e:	e5f7      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c090:	4a31      	ldr	r2, [pc, #196]	; (800c158 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d000      	beq.n	800c098 <RemapAndLinkDMAtoUARTRx+0x50c>
 800c096:	e5f3      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
 800c098:	680b      	ldr	r3, [r1, #0]
 800c09a:	4a24      	ldr	r2, [pc, #144]	; (800c12c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d01b      	beq.n	800c0d8 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c0a0:	4a23      	ldr	r2, [pc, #140]	; (800c130 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d022      	beq.n	800c0ec <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c0a6:	4a23      	ldr	r2, [pc, #140]	; (800c134 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d021      	beq.n	800c0f0 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c0ac:	4a22      	ldr	r2, [pc, #136]	; (800c138 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d02a      	beq.n	800c108 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c0b2:	4a22      	ldr	r2, [pc, #136]	; (800c13c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d033      	beq.n	800c120 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c0b8:	4a21      	ldr	r2, [pc, #132]	; (800c140 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d000      	beq.n	800c0c0 <RemapAndLinkDMAtoUARTRx+0x534>
 800c0be:	e5df      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c0c0:	4a20      	ldr	r2, [pc, #128]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c0c2:	23a8      	movs	r3, #168	; 0xa8
 800c0c4:	4d20      	ldr	r5, [pc, #128]	; (800c148 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800c0c6:	58d4      	ldr	r4, [r2, r3]
 800c0c8:	402c      	ands	r4, r5
 800c0ca:	50d4      	str	r4, [r2, r3]
 800c0cc:	24f0      	movs	r4, #240	; 0xf0
 800c0ce:	58d5      	ldr	r5, [r2, r3]
 800c0d0:	0124      	lsls	r4, r4, #4
 800c0d2:	432c      	orrs	r4, r5
 800c0d4:	50d4      	str	r4, [r2, r3]
 800c0d6:	e5d3      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c0d8:	23a8      	movs	r3, #168	; 0xa8
 800c0da:	260f      	movs	r6, #15
 800c0dc:	4a1b      	ldr	r2, [pc, #108]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c0de:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c0e0:	43b5      	bics	r5, r6
 800c0e2:	50d5      	str	r5, [r2, r3]
 800c0e4:	58d4      	ldr	r4, [r2, r3]
 800c0e6:	4334      	orrs	r4, r6
 800c0e8:	50d4      	str	r4, [r2, r3]
 800c0ea:	e5c9      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c0ec:	4a17      	ldr	r2, [pc, #92]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c0ee:	e7e8      	b.n	800c0c2 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c0f0:	23a8      	movs	r3, #168	; 0xa8
 800c0f2:	4a16      	ldr	r2, [pc, #88]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c0f4:	4d16      	ldr	r5, [pc, #88]	; (800c150 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c0f6:	58d4      	ldr	r4, [r2, r3]
 800c0f8:	402c      	ands	r4, r5
 800c0fa:	50d4      	str	r4, [r2, r3]
 800c0fc:	24f0      	movs	r4, #240	; 0xf0
 800c0fe:	58d5      	ldr	r5, [r2, r3]
 800c100:	0324      	lsls	r4, r4, #12
 800c102:	432c      	orrs	r4, r5
 800c104:	50d4      	str	r4, [r2, r3]
 800c106:	e5bb      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c108:	23a8      	movs	r3, #168	; 0xa8
 800c10a:	4a10      	ldr	r2, [pc, #64]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c10c:	4d11      	ldr	r5, [pc, #68]	; (800c154 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c10e:	58d4      	ldr	r4, [r2, r3]
 800c110:	402c      	ands	r4, r5
 800c112:	50d4      	str	r4, [r2, r3]
 800c114:	24f0      	movs	r4, #240	; 0xf0
 800c116:	58d5      	ldr	r5, [r2, r3]
 800c118:	0424      	lsls	r4, r4, #16
 800c11a:	432c      	orrs	r4, r5
 800c11c:	50d4      	str	r4, [r2, r3]
 800c11e:	e5af      	b.n	800bc80 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c120:	23a8      	movs	r3, #168	; 0xa8
 800c122:	4a08      	ldr	r2, [pc, #32]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c124:	26f0      	movs	r6, #240	; 0xf0
 800c126:	58d5      	ldr	r5, [r2, r3]
 800c128:	e7da      	b.n	800c0e0 <RemapAndLinkDMAtoUARTRx+0x554>
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	40020008 	.word	0x40020008
 800c130:	40020030 	.word	0x40020030
 800c134:	40020058 	.word	0x40020058
 800c138:	4002006c 	.word	0x4002006c
 800c13c:	4002041c 	.word	0x4002041c
 800c140:	40020430 	.word	0x40020430
 800c144:	40020400 	.word	0x40020400
 800c148:	fffff0ff 	.word	0xfffff0ff
 800c14c:	40020000 	.word	0x40020000
 800c150:	fff0ffff 	.word	0xfff0ffff
 800c154:	ff0fffff 	.word	0xff0fffff
 800c158:	40011c00 	.word	0x40011c00

0800c15c <DMA_MSG_RX_Setup>:
{	
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	000d      	movs	r5, r1
 800c160:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c162:	f7ff fd13 	bl	800bb8c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c166:	0028      	movs	r0, r5
 800c168:	2100      	movs	r1, #0
 800c16a:	f7ff fc59 	bl	800ba20 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c16e:	0020      	movs	r0, r4
 800c170:	f7ff fac6 	bl	800b700 <GetPort>
 800c174:	3801      	subs	r0, #1
 800c176:	0041      	lsls	r1, r0, #1
 800c178:	1809      	adds	r1, r1, r0
 800c17a:	4804      	ldr	r0, [pc, #16]	; (800c18c <DMA_MSG_RX_Setup+0x30>)
 800c17c:	0189      	lsls	r1, r1, #6
 800c17e:	1809      	adds	r1, r1, r0
 800c180:	22c0      	movs	r2, #192	; 0xc0
 800c182:	0020      	movs	r0, r4
 800c184:	f006 f82a 	bl	80121dc <HAL_UART_Receive_DMA>
}
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	46c0      	nop			; (mov r8, r8)
 800c18c:	2000138c 	.word	0x2000138c

0800c190 <SetupMessagingRxDMAs>:
{	
 800c190:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c192:	4c18      	ldr	r4, [pc, #96]	; (800c1f4 <SetupMessagingRxDMAs+0x64>)
 800c194:	7863      	ldrb	r3, [r4, #1]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d027      	beq.n	800c1ea <SetupMessagingRxDMAs+0x5a>
	if (portStatus[P2] == FREE)	
 800c19a:	78a3      	ldrb	r3, [r4, #2]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01f      	beq.n	800c1e0 <SetupMessagingRxDMAs+0x50>
	if (portStatus[P3] == FREE)
 800c1a0:	78e3      	ldrb	r3, [r4, #3]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d017      	beq.n	800c1d6 <SetupMessagingRxDMAs+0x46>
	if (portStatus[P4] == FREE)
 800c1a6:	7923      	ldrb	r3, [r4, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00f      	beq.n	800c1cc <SetupMessagingRxDMAs+0x3c>
	if (portStatus[P5] == FREE)
 800c1ac:	7963      	ldrb	r3, [r4, #5]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d007      	beq.n	800c1c2 <SetupMessagingRxDMAs+0x32>
	if (portStatus[P6] == FREE)
 800c1b2:	79a3      	ldrb	r3, [r4, #6]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d103      	bne.n	800c1c0 <SetupMessagingRxDMAs+0x30>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c1b8:	490f      	ldr	r1, [pc, #60]	; (800c1f8 <SetupMessagingRxDMAs+0x68>)
 800c1ba:	4810      	ldr	r0, [pc, #64]	; (800c1fc <SetupMessagingRxDMAs+0x6c>)
 800c1bc:	f7ff ffce 	bl	800c15c <DMA_MSG_RX_Setup>
}
 800c1c0:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c1c2:	490f      	ldr	r1, [pc, #60]	; (800c200 <SetupMessagingRxDMAs+0x70>)
 800c1c4:	480f      	ldr	r0, [pc, #60]	; (800c204 <SetupMessagingRxDMAs+0x74>)
 800c1c6:	f7ff ffc9 	bl	800c15c <DMA_MSG_RX_Setup>
 800c1ca:	e7f2      	b.n	800c1b2 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c1cc:	490e      	ldr	r1, [pc, #56]	; (800c208 <SetupMessagingRxDMAs+0x78>)
 800c1ce:	480f      	ldr	r0, [pc, #60]	; (800c20c <SetupMessagingRxDMAs+0x7c>)
 800c1d0:	f7ff ffc4 	bl	800c15c <DMA_MSG_RX_Setup>
 800c1d4:	e7ea      	b.n	800c1ac <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c1d6:	490e      	ldr	r1, [pc, #56]	; (800c210 <SetupMessagingRxDMAs+0x80>)
 800c1d8:	480e      	ldr	r0, [pc, #56]	; (800c214 <SetupMessagingRxDMAs+0x84>)
 800c1da:	f7ff ffbf 	bl	800c15c <DMA_MSG_RX_Setup>
 800c1de:	e7e2      	b.n	800c1a6 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c1e0:	490d      	ldr	r1, [pc, #52]	; (800c218 <SetupMessagingRxDMAs+0x88>)
 800c1e2:	480e      	ldr	r0, [pc, #56]	; (800c21c <SetupMessagingRxDMAs+0x8c>)
 800c1e4:	f7ff ffba 	bl	800c15c <DMA_MSG_RX_Setup>
 800c1e8:	e7da      	b.n	800c1a0 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c1ea:	490d      	ldr	r1, [pc, #52]	; (800c220 <SetupMessagingRxDMAs+0x90>)
 800c1ec:	480d      	ldr	r0, [pc, #52]	; (800c224 <SetupMessagingRxDMAs+0x94>)
 800c1ee:	f7ff ffb5 	bl	800c15c <DMA_MSG_RX_Setup>
 800c1f2:	e7d2      	b.n	800c19a <SetupMessagingRxDMAs+0xa>
 800c1f4:	20000c2c 	.word	0x20000c2c
 800c1f8:	20002188 	.word	0x20002188
 800c1fc:	200072c0 	.word	0x200072c0
 800c200:	20002150 	.word	0x20002150
 800c204:	20007250 	.word	0x20007250
 800c208:	20002118 	.word	0x20002118
 800c20c:	200071dc 	.word	0x200071dc
 800c210:	200020e0 	.word	0x200020e0
 800c214:	2000733c 	.word	0x2000733c
 800c218:	200020a8 	.word	0x200020a8
 800c21c:	20007420 	.word	0x20007420
 800c220:	20002070 	.word	0x20002070
 800c224:	200073ac 	.word	0x200073ac

0800c228 <DMA_STREAM_Setup>:
{	
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	0016      	movs	r6, r2
 800c22c:	0005      	movs	r5, r0
 800c22e:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800c230:	f7ff fa66 	bl	800b700 <GetPort>
	hDMA = &streamDMA[port-1];
 800c234:	3801      	subs	r0, #1
 800c236:	00c4      	lsls	r4, r0, #3
 800c238:	1a24      	subs	r4, r4, r0
 800c23a:	480a      	ldr	r0, [pc, #40]	; (800c264 <DMA_STREAM_Setup+0x3c>)
 800c23c:	00e4      	lsls	r4, r4, #3
 800c23e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c240:	0021      	movs	r1, r4
 800c242:	0028      	movs	r0, r5
 800c244:	f7ff fca2 	bl	800bb8c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c248:	0020      	movs	r0, r4
 800c24a:	2101      	movs	r1, #1
 800c24c:	f7ff fbe8 	bl	800ba20 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c250:	2369      	movs	r3, #105	; 0x69
 800c252:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c254:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800c256:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c258:	0028      	movs	r0, r5
 800c25a:	0032      	movs	r2, r6
 800c25c:	3128      	adds	r1, #40	; 0x28
 800c25e:	f005 ffbd 	bl	80121dc <HAL_UART_Receive_DMA>
}
 800c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c264:	20001e78 	.word	0x20001e78

0800c268 <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c268:	6803      	ldr	r3, [r0, #0]
 800c26a:	4ac6      	ldr	r2, [pc, #792]	; (800c584 <RemapAndLinkDMAtoUARTTx+0x31c>)
{
 800c26c:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c26e:	4293      	cmp	r3, r2
 800c270:	d03a      	beq.n	800c2e8 <RemapAndLinkDMAtoUARTTx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c272:	4ac5      	ldr	r2, [pc, #788]	; (800c588 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d058      	beq.n	800c32a <RemapAndLinkDMAtoUARTTx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c278:	4ac4      	ldr	r2, [pc, #784]	; (800c58c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d100      	bne.n	800c280 <RemapAndLinkDMAtoUARTTx+0x18>
 800c27e:	e093      	b.n	800c3a8 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c280:	4ac3      	ldr	r2, [pc, #780]	; (800c590 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d100      	bne.n	800c288 <RemapAndLinkDMAtoUARTTx+0x20>
 800c286:	e0c0      	b.n	800c40a <RemapAndLinkDMAtoUARTTx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c288:	4ac2      	ldr	r2, [pc, #776]	; (800c594 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d100      	bne.n	800c290 <RemapAndLinkDMAtoUARTTx+0x28>
 800c28e:	e19d      	b.n	800c5cc <RemapAndLinkDMAtoUARTTx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c290:	4ac1      	ldr	r2, [pc, #772]	; (800c598 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d100      	bne.n	800c298 <RemapAndLinkDMAtoUARTTx+0x30>
 800c296:	e1b9      	b.n	800c60c <RemapAndLinkDMAtoUARTTx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c298:	4ac0      	ldr	r2, [pc, #768]	; (800c59c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d000      	beq.n	800c2a0 <RemapAndLinkDMAtoUARTTx+0x38>
 800c29e:	e265      	b.n	800c76c <RemapAndLinkDMAtoUARTTx+0x504>
 800c2a0:	680b      	ldr	r3, [r1, #0]
 800c2a2:	4abf      	ldr	r2, [pc, #764]	; (800c5a0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d100      	bne.n	800c2aa <RemapAndLinkDMAtoUARTTx+0x42>
 800c2a8:	e230      	b.n	800c70c <RemapAndLinkDMAtoUARTTx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c2aa:	4abe      	ldr	r2, [pc, #760]	; (800c5a4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d100      	bne.n	800c2b2 <RemapAndLinkDMAtoUARTTx+0x4a>
 800c2b0:	e237      	b.n	800c722 <RemapAndLinkDMAtoUARTTx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c2b2:	4abd      	ldr	r2, [pc, #756]	; (800c5a8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d100      	bne.n	800c2ba <RemapAndLinkDMAtoUARTTx+0x52>
 800c2b8:	e23f      	b.n	800c73a <RemapAndLinkDMAtoUARTTx+0x4d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c2ba:	4abc      	ldr	r2, [pc, #752]	; (800c5ac <RemapAndLinkDMAtoUARTTx+0x344>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d100      	bne.n	800c2c2 <RemapAndLinkDMAtoUARTTx+0x5a>
 800c2c0:	e247      	b.n	800c752 <RemapAndLinkDMAtoUARTTx+0x4ea>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c2c2:	4abb      	ldr	r2, [pc, #748]	; (800c5b0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d100      	bne.n	800c2ca <RemapAndLinkDMAtoUARTTx+0x62>
 800c2c8:	e24e      	b.n	800c768 <RemapAndLinkDMAtoUARTTx+0x500>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c2ca:	4aba      	ldr	r2, [pc, #744]	; (800c5b4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d145      	bne.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c2d0:	23a8      	movs	r3, #168	; 0xa8
 800c2d2:	4ab9      	ldr	r2, [pc, #740]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c2d4:	4db9      	ldr	r5, [pc, #740]	; (800c5bc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c2d6:	58d4      	ldr	r4, [r2, r3]
 800c2d8:	402c      	ands	r4, r5
 800c2da:	50d4      	str	r4, [r2, r3]
 800c2dc:	24e0      	movs	r4, #224	; 0xe0
 800c2de:	58d5      	ldr	r5, [r2, r3]
 800c2e0:	0324      	lsls	r4, r4, #12
 800c2e2:	432c      	orrs	r4, r5
 800c2e4:	50d4      	str	r4, [r2, r3]
 800c2e6:	e039      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c2e8:	680b      	ldr	r3, [r1, #0]
 800c2ea:	4aad      	ldr	r2, [pc, #692]	; (800c5a0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d100      	bne.n	800c2f2 <RemapAndLinkDMAtoUARTTx+0x8a>
 800c2f0:	e07e      	b.n	800c3f0 <RemapAndLinkDMAtoUARTTx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c2f2:	4aac      	ldr	r2, [pc, #688]	; (800c5a4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d100      	bne.n	800c2fa <RemapAndLinkDMAtoUARTTx+0x92>
 800c2f8:	e085      	b.n	800c406 <RemapAndLinkDMAtoUARTTx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c2fa:	4aab      	ldr	r2, [pc, #684]	; (800c5a8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d030      	beq.n	800c362 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c300:	4aaa      	ldr	r2, [pc, #680]	; (800c5ac <RemapAndLinkDMAtoUARTTx+0x344>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d039      	beq.n	800c37a <RemapAndLinkDMAtoUARTTx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c306:	4aaa      	ldr	r2, [pc, #680]	; (800c5b0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d041      	beq.n	800c390 <RemapAndLinkDMAtoUARTTx+0x128>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c30c:	4aa9      	ldr	r2, [pc, #676]	; (800c5b4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d124      	bne.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c312:	23a8      	movs	r3, #168	; 0xa8
 800c314:	4aa8      	ldr	r2, [pc, #672]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c316:	4da9      	ldr	r5, [pc, #676]	; (800c5bc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c318:	58d4      	ldr	r4, [r2, r3]
 800c31a:	402c      	ands	r4, r5
 800c31c:	50d4      	str	r4, [r2, r3]
 800c31e:	2480      	movs	r4, #128	; 0x80
 800c320:	58d5      	ldr	r5, [r2, r3]
 800c322:	0324      	lsls	r4, r4, #12
 800c324:	432c      	orrs	r4, r5
 800c326:	50d4      	str	r4, [r2, r3]
 800c328:	e018      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c32a:	680b      	ldr	r3, [r1, #0]
 800c32c:	4a9c      	ldr	r2, [pc, #624]	; (800c5a0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d100      	bne.n	800c334 <RemapAndLinkDMAtoUARTTx+0xcc>
 800c332:	e0b9      	b.n	800c4a8 <RemapAndLinkDMAtoUARTTx+0x240>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c334:	4a9b      	ldr	r2, [pc, #620]	; (800c5a4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d100      	bne.n	800c33c <RemapAndLinkDMAtoUARTTx+0xd4>
 800c33a:	e0c0      	b.n	800c4be <RemapAndLinkDMAtoUARTTx+0x256>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c33c:	4a9a      	ldr	r2, [pc, #616]	; (800c5a8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d100      	bne.n	800c344 <RemapAndLinkDMAtoUARTTx+0xdc>
 800c342:	e0c8      	b.n	800c4d6 <RemapAndLinkDMAtoUARTTx+0x26e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c344:	4a99      	ldr	r2, [pc, #612]	; (800c5ac <RemapAndLinkDMAtoUARTTx+0x344>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d100      	bne.n	800c34c <RemapAndLinkDMAtoUARTTx+0xe4>
 800c34a:	e0d0      	b.n	800c4ee <RemapAndLinkDMAtoUARTTx+0x286>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c34c:	4a98      	ldr	r2, [pc, #608]	; (800c5b0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d100      	bne.n	800c354 <RemapAndLinkDMAtoUARTTx+0xec>
 800c352:	e0d7      	b.n	800c504 <RemapAndLinkDMAtoUARTTx+0x29c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c354:	4a97      	ldr	r2, [pc, #604]	; (800c5b4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d100      	bne.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
 800c35a:	e0d5      	b.n	800c508 <RemapAndLinkDMAtoUARTTx+0x2a0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c35c:	6601      	str	r1, [r0, #96]	; 0x60
 800c35e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c360:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c362:	23a8      	movs	r3, #168	; 0xa8
 800c364:	4a96      	ldr	r2, [pc, #600]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c366:	4d97      	ldr	r5, [pc, #604]	; (800c5c4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c368:	58d4      	ldr	r4, [r2, r3]
 800c36a:	402c      	ands	r4, r5
 800c36c:	50d4      	str	r4, [r2, r3]
 800c36e:	2480      	movs	r4, #128	; 0x80
 800c370:	58d5      	ldr	r5, [r2, r3]
 800c372:	0524      	lsls	r4, r4, #20
 800c374:	432c      	orrs	r4, r5
 800c376:	50d4      	str	r4, [r2, r3]
 800c378:	e7f0      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c37a:	23a8      	movs	r3, #168	; 0xa8
 800c37c:	250f      	movs	r5, #15
 800c37e:	4a8e      	ldr	r2, [pc, #568]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c380:	58d4      	ldr	r4, [r2, r3]
 800c382:	43ac      	bics	r4, r5
 800c384:	50d4      	str	r4, [r2, r3]
 800c386:	58d4      	ldr	r4, [r2, r3]
 800c388:	3d07      	subs	r5, #7
 800c38a:	432c      	orrs	r4, r5
 800c38c:	50d4      	str	r4, [r2, r3]
 800c38e:	e7e5      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c390:	4a89      	ldr	r2, [pc, #548]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c392:	23a8      	movs	r3, #168	; 0xa8
 800c394:	4d8c      	ldr	r5, [pc, #560]	; (800c5c8 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c396:	58d4      	ldr	r4, [r2, r3]
 800c398:	402c      	ands	r4, r5
 800c39a:	50d4      	str	r4, [r2, r3]
 800c39c:	2480      	movs	r4, #128	; 0x80
 800c39e:	58d5      	ldr	r5, [r2, r3]
 800c3a0:	0224      	lsls	r4, r4, #8
 800c3a2:	432c      	orrs	r4, r5
 800c3a4:	50d4      	str	r4, [r2, r3]
 800c3a6:	e7d9      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c3a8:	680b      	ldr	r3, [r1, #0]
 800c3aa:	4a7d      	ldr	r2, [pc, #500]	; (800c5a0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d100      	bne.n	800c3b2 <RemapAndLinkDMAtoUARTTx+0x14a>
 800c3b0:	e0b6      	b.n	800c520 <RemapAndLinkDMAtoUARTTx+0x2b8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c3b2:	4a7c      	ldr	r2, [pc, #496]	; (800c5a4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d100      	bne.n	800c3ba <RemapAndLinkDMAtoUARTTx+0x152>
 800c3b8:	e0bd      	b.n	800c536 <RemapAndLinkDMAtoUARTTx+0x2ce>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c3ba:	4a7b      	ldr	r2, [pc, #492]	; (800c5a8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d100      	bne.n	800c3c2 <RemapAndLinkDMAtoUARTTx+0x15a>
 800c3c0:	e0c5      	b.n	800c54e <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c3c2:	4a7a      	ldr	r2, [pc, #488]	; (800c5ac <RemapAndLinkDMAtoUARTTx+0x344>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d100      	bne.n	800c3ca <RemapAndLinkDMAtoUARTTx+0x162>
 800c3c8:	e0cd      	b.n	800c566 <RemapAndLinkDMAtoUARTTx+0x2fe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c3ca:	4a79      	ldr	r2, [pc, #484]	; (800c5b0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d100      	bne.n	800c3d2 <RemapAndLinkDMAtoUARTTx+0x16a>
 800c3d0:	e0d4      	b.n	800c57c <RemapAndLinkDMAtoUARTTx+0x314>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c3d2:	4a78      	ldr	r2, [pc, #480]	; (800c5b4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d1c1      	bne.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c3d8:	23a8      	movs	r3, #168	; 0xa8
 800c3da:	4a77      	ldr	r2, [pc, #476]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c3dc:	4d77      	ldr	r5, [pc, #476]	; (800c5bc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c3de:	58d4      	ldr	r4, [r2, r3]
 800c3e0:	402c      	ands	r4, r5
 800c3e2:	50d4      	str	r4, [r2, r3]
 800c3e4:	24a0      	movs	r4, #160	; 0xa0
 800c3e6:	58d5      	ldr	r5, [r2, r3]
 800c3e8:	0324      	lsls	r4, r4, #12
 800c3ea:	432c      	orrs	r4, r5
 800c3ec:	50d4      	str	r4, [r2, r3]
 800c3ee:	e7b5      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c3f0:	23a8      	movs	r3, #168	; 0xa8
 800c3f2:	25f0      	movs	r5, #240	; 0xf0
 800c3f4:	4a72      	ldr	r2, [pc, #456]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c3f6:	58d4      	ldr	r4, [r2, r3]
 800c3f8:	43ac      	bics	r4, r5
 800c3fa:	50d4      	str	r4, [r2, r3]
 800c3fc:	58d4      	ldr	r4, [r2, r3]
 800c3fe:	3d70      	subs	r5, #112	; 0x70
 800c400:	432c      	orrs	r4, r5
 800c402:	50d4      	str	r4, [r2, r3]
 800c404:	e7aa      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c406:	4a6e      	ldr	r2, [pc, #440]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c408:	e7c3      	b.n	800c392 <RemapAndLinkDMAtoUARTTx+0x12a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c40a:	680b      	ldr	r3, [r1, #0]
 800c40c:	4a64      	ldr	r2, [pc, #400]	; (800c5a0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d01c      	beq.n	800c44c <RemapAndLinkDMAtoUARTTx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c412:	4a64      	ldr	r2, [pc, #400]	; (800c5a4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d024      	beq.n	800c462 <RemapAndLinkDMAtoUARTTx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c418:	4a63      	ldr	r2, [pc, #396]	; (800c5a8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d02d      	beq.n	800c47a <RemapAndLinkDMAtoUARTTx+0x212>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c41e:	4a63      	ldr	r2, [pc, #396]	; (800c5ac <RemapAndLinkDMAtoUARTTx+0x344>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d036      	beq.n	800c492 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c424:	4a62      	ldr	r2, [pc, #392]	; (800c5b0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d100      	bne.n	800c42c <RemapAndLinkDMAtoUARTTx+0x1c4>
 800c42a:	e0a9      	b.n	800c580 <RemapAndLinkDMAtoUARTTx+0x318>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c42c:	4a61      	ldr	r2, [pc, #388]	; (800c5b4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d000      	beq.n	800c434 <RemapAndLinkDMAtoUARTTx+0x1cc>
 800c432:	e793      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c434:	23a8      	movs	r3, #168	; 0xa8
 800c436:	4a60      	ldr	r2, [pc, #384]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c438:	4d60      	ldr	r5, [pc, #384]	; (800c5bc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c43a:	58d4      	ldr	r4, [r2, r3]
 800c43c:	402c      	ands	r4, r5
 800c43e:	50d4      	str	r4, [r2, r3]
 800c440:	24b0      	movs	r4, #176	; 0xb0
 800c442:	58d5      	ldr	r5, [r2, r3]
 800c444:	0324      	lsls	r4, r4, #12
 800c446:	432c      	orrs	r4, r5
 800c448:	50d4      	str	r4, [r2, r3]
 800c44a:	e787      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c44c:	23a8      	movs	r3, #168	; 0xa8
 800c44e:	25f0      	movs	r5, #240	; 0xf0
 800c450:	4a5b      	ldr	r2, [pc, #364]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c452:	58d4      	ldr	r4, [r2, r3]
 800c454:	43ac      	bics	r4, r5
 800c456:	50d4      	str	r4, [r2, r3]
 800c458:	58d4      	ldr	r4, [r2, r3]
 800c45a:	3d40      	subs	r5, #64	; 0x40
 800c45c:	432c      	orrs	r4, r5
 800c45e:	50d4      	str	r4, [r2, r3]
 800c460:	e77c      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c462:	4a57      	ldr	r2, [pc, #348]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c464:	23a8      	movs	r3, #168	; 0xa8
 800c466:	4d58      	ldr	r5, [pc, #352]	; (800c5c8 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c468:	58d4      	ldr	r4, [r2, r3]
 800c46a:	402c      	ands	r4, r5
 800c46c:	50d4      	str	r4, [r2, r3]
 800c46e:	24b0      	movs	r4, #176	; 0xb0
 800c470:	58d5      	ldr	r5, [r2, r3]
 800c472:	0224      	lsls	r4, r4, #8
 800c474:	432c      	orrs	r4, r5
 800c476:	50d4      	str	r4, [r2, r3]
 800c478:	e770      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c47a:	23a8      	movs	r3, #168	; 0xa8
 800c47c:	4a50      	ldr	r2, [pc, #320]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c47e:	4d51      	ldr	r5, [pc, #324]	; (800c5c4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c480:	58d4      	ldr	r4, [r2, r3]
 800c482:	402c      	ands	r4, r5
 800c484:	50d4      	str	r4, [r2, r3]
 800c486:	24b0      	movs	r4, #176	; 0xb0
 800c488:	58d5      	ldr	r5, [r2, r3]
 800c48a:	0524      	lsls	r4, r4, #20
 800c48c:	432c      	orrs	r4, r5
 800c48e:	50d4      	str	r4, [r2, r3]
 800c490:	e764      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c492:	23a8      	movs	r3, #168	; 0xa8
 800c494:	250f      	movs	r5, #15
 800c496:	4a48      	ldr	r2, [pc, #288]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c498:	58d4      	ldr	r4, [r2, r3]
 800c49a:	43ac      	bics	r4, r5
 800c49c:	50d4      	str	r4, [r2, r3]
 800c49e:	58d4      	ldr	r4, [r2, r3]
 800c4a0:	3d04      	subs	r5, #4
 800c4a2:	432c      	orrs	r4, r5
 800c4a4:	50d4      	str	r4, [r2, r3]
 800c4a6:	e759      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c4a8:	23a8      	movs	r3, #168	; 0xa8
 800c4aa:	25f0      	movs	r5, #240	; 0xf0
 800c4ac:	4a44      	ldr	r2, [pc, #272]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c4ae:	58d4      	ldr	r4, [r2, r3]
 800c4b0:	43ac      	bics	r4, r5
 800c4b2:	50d4      	str	r4, [r2, r3]
 800c4b4:	58d4      	ldr	r4, [r2, r3]
 800c4b6:	3d60      	subs	r5, #96	; 0x60
 800c4b8:	432c      	orrs	r4, r5
 800c4ba:	50d4      	str	r4, [r2, r3]
 800c4bc:	e74e      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c4be:	4a40      	ldr	r2, [pc, #256]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c4c0:	23a8      	movs	r3, #168	; 0xa8
 800c4c2:	4d41      	ldr	r5, [pc, #260]	; (800c5c8 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c4c4:	58d4      	ldr	r4, [r2, r3]
 800c4c6:	402c      	ands	r4, r5
 800c4c8:	50d4      	str	r4, [r2, r3]
 800c4ca:	2490      	movs	r4, #144	; 0x90
 800c4cc:	58d5      	ldr	r5, [r2, r3]
 800c4ce:	0224      	lsls	r4, r4, #8
 800c4d0:	432c      	orrs	r4, r5
 800c4d2:	50d4      	str	r4, [r2, r3]
 800c4d4:	e742      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c4d6:	23a8      	movs	r3, #168	; 0xa8
 800c4d8:	4a39      	ldr	r2, [pc, #228]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c4da:	4d3a      	ldr	r5, [pc, #232]	; (800c5c4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c4dc:	58d4      	ldr	r4, [r2, r3]
 800c4de:	402c      	ands	r4, r5
 800c4e0:	50d4      	str	r4, [r2, r3]
 800c4e2:	2490      	movs	r4, #144	; 0x90
 800c4e4:	58d5      	ldr	r5, [r2, r3]
 800c4e6:	0524      	lsls	r4, r4, #20
 800c4e8:	432c      	orrs	r4, r5
 800c4ea:	50d4      	str	r4, [r2, r3]
 800c4ec:	e736      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c4ee:	23a8      	movs	r3, #168	; 0xa8
 800c4f0:	250f      	movs	r5, #15
 800c4f2:	4a31      	ldr	r2, [pc, #196]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c4f4:	58d4      	ldr	r4, [r2, r3]
 800c4f6:	43ac      	bics	r4, r5
 800c4f8:	50d4      	str	r4, [r2, r3]
 800c4fa:	58d4      	ldr	r4, [r2, r3]
 800c4fc:	3d06      	subs	r5, #6
 800c4fe:	432c      	orrs	r4, r5
 800c500:	50d4      	str	r4, [r2, r3]
 800c502:	e72b      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c504:	4a2c      	ldr	r2, [pc, #176]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c506:	e7db      	b.n	800c4c0 <RemapAndLinkDMAtoUARTTx+0x258>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c508:	23a8      	movs	r3, #168	; 0xa8
 800c50a:	4a2b      	ldr	r2, [pc, #172]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c50c:	4d2b      	ldr	r5, [pc, #172]	; (800c5bc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c50e:	58d4      	ldr	r4, [r2, r3]
 800c510:	402c      	ands	r4, r5
 800c512:	50d4      	str	r4, [r2, r3]
 800c514:	2490      	movs	r4, #144	; 0x90
 800c516:	58d5      	ldr	r5, [r2, r3]
 800c518:	0324      	lsls	r4, r4, #12
 800c51a:	432c      	orrs	r4, r5
 800c51c:	50d4      	str	r4, [r2, r3]
 800c51e:	e71d      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c520:	23a8      	movs	r3, #168	; 0xa8
 800c522:	25f0      	movs	r5, #240	; 0xf0
 800c524:	4a26      	ldr	r2, [pc, #152]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c526:	58d4      	ldr	r4, [r2, r3]
 800c528:	43ac      	bics	r4, r5
 800c52a:	50d4      	str	r4, [r2, r3]
 800c52c:	58d4      	ldr	r4, [r2, r3]
 800c52e:	3d50      	subs	r5, #80	; 0x50
 800c530:	432c      	orrs	r4, r5
 800c532:	50d4      	str	r4, [r2, r3]
 800c534:	e712      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c536:	4a22      	ldr	r2, [pc, #136]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c538:	23a8      	movs	r3, #168	; 0xa8
 800c53a:	4d23      	ldr	r5, [pc, #140]	; (800c5c8 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c53c:	58d4      	ldr	r4, [r2, r3]
 800c53e:	402c      	ands	r4, r5
 800c540:	50d4      	str	r4, [r2, r3]
 800c542:	24a0      	movs	r4, #160	; 0xa0
 800c544:	58d5      	ldr	r5, [r2, r3]
 800c546:	0224      	lsls	r4, r4, #8
 800c548:	432c      	orrs	r4, r5
 800c54a:	50d4      	str	r4, [r2, r3]
 800c54c:	e706      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c54e:	23a8      	movs	r3, #168	; 0xa8
 800c550:	4a1b      	ldr	r2, [pc, #108]	; (800c5c0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c552:	4d1c      	ldr	r5, [pc, #112]	; (800c5c4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c554:	58d4      	ldr	r4, [r2, r3]
 800c556:	402c      	ands	r4, r5
 800c558:	50d4      	str	r4, [r2, r3]
 800c55a:	24a0      	movs	r4, #160	; 0xa0
 800c55c:	58d5      	ldr	r5, [r2, r3]
 800c55e:	0524      	lsls	r4, r4, #20
 800c560:	432c      	orrs	r4, r5
 800c562:	50d4      	str	r4, [r2, r3]
 800c564:	e6fa      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c566:	23a8      	movs	r3, #168	; 0xa8
 800c568:	250f      	movs	r5, #15
 800c56a:	4a13      	ldr	r2, [pc, #76]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c56c:	58d4      	ldr	r4, [r2, r3]
 800c56e:	43ac      	bics	r4, r5
 800c570:	50d4      	str	r4, [r2, r3]
 800c572:	58d4      	ldr	r4, [r2, r3]
 800c574:	3d05      	subs	r5, #5
 800c576:	432c      	orrs	r4, r5
 800c578:	50d4      	str	r4, [r2, r3]
 800c57a:	e6ef      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c57c:	4a0e      	ldr	r2, [pc, #56]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c57e:	e7db      	b.n	800c538 <RemapAndLinkDMAtoUARTTx+0x2d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c580:	4a0d      	ldr	r2, [pc, #52]	; (800c5b8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c582:	e76f      	b.n	800c464 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c584:	40013800 	.word	0x40013800
 800c588:	40004400 	.word	0x40004400
 800c58c:	40004800 	.word	0x40004800
 800c590:	40004c00 	.word	0x40004c00
 800c594:	40005000 	.word	0x40005000
 800c598:	40011400 	.word	0x40011400
 800c59c:	40011800 	.word	0x40011800
 800c5a0:	4002001c 	.word	0x4002001c
 800c5a4:	40020044 	.word	0x40020044
 800c5a8:	40020080 	.word	0x40020080
 800c5ac:	40020408 	.word	0x40020408
 800c5b0:	40020444 	.word	0x40020444
 800c5b4:	40020458 	.word	0x40020458
 800c5b8:	40020400 	.word	0x40020400
 800c5bc:	fff0ffff 	.word	0xfff0ffff
 800c5c0:	40020000 	.word	0x40020000
 800c5c4:	f0ffffff 	.word	0xf0ffffff
 800c5c8:	ffff0fff 	.word	0xffff0fff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c5cc:	680b      	ldr	r3, [r1, #0]
 800c5ce:	4a8e      	ldr	r2, [pc, #568]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d03b      	beq.n	800c64c <RemapAndLinkDMAtoUARTTx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c5d4:	4a8d      	ldr	r2, [pc, #564]	; (800c80c <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d043      	beq.n	800c662 <RemapAndLinkDMAtoUARTTx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c5da:	4a8d      	ldr	r2, [pc, #564]	; (800c810 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d04c      	beq.n	800c67a <RemapAndLinkDMAtoUARTTx+0x412>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c5e0:	4a8c      	ldr	r2, [pc, #560]	; (800c814 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d055      	beq.n	800c692 <RemapAndLinkDMAtoUARTTx+0x42a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c5e6:	4a8c      	ldr	r2, [pc, #560]	; (800c818 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d05d      	beq.n	800c6a8 <RemapAndLinkDMAtoUARTTx+0x440>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c5ec:	4a8b      	ldr	r2, [pc, #556]	; (800c81c <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d000      	beq.n	800c5f4 <RemapAndLinkDMAtoUARTTx+0x38c>
 800c5f2:	e6b3      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c5f4:	23a8      	movs	r3, #168	; 0xa8
 800c5f6:	4a8a      	ldr	r2, [pc, #552]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c5f8:	4d8a      	ldr	r5, [pc, #552]	; (800c824 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c5fa:	58d4      	ldr	r4, [r2, r3]
 800c5fc:	402c      	ands	r4, r5
 800c5fe:	50d4      	str	r4, [r2, r3]
 800c600:	24c0      	movs	r4, #192	; 0xc0
 800c602:	58d5      	ldr	r5, [r2, r3]
 800c604:	0324      	lsls	r4, r4, #12
 800c606:	432c      	orrs	r4, r5
 800c608:	50d4      	str	r4, [r2, r3]
 800c60a:	e6a7      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c60c:	680b      	ldr	r3, [r1, #0]
 800c60e:	4a7e      	ldr	r2, [pc, #504]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d04b      	beq.n	800c6ac <RemapAndLinkDMAtoUARTTx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c614:	4a7d      	ldr	r2, [pc, #500]	; (800c80c <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d053      	beq.n	800c6c2 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c61a:	4a7d      	ldr	r2, [pc, #500]	; (800c810 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d05c      	beq.n	800c6da <RemapAndLinkDMAtoUARTTx+0x472>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c620:	4a7c      	ldr	r2, [pc, #496]	; (800c814 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d065      	beq.n	800c6f2 <RemapAndLinkDMAtoUARTTx+0x48a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c626:	4a7c      	ldr	r2, [pc, #496]	; (800c818 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d06d      	beq.n	800c708 <RemapAndLinkDMAtoUARTTx+0x4a0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c62c:	4a7b      	ldr	r2, [pc, #492]	; (800c81c <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d000      	beq.n	800c634 <RemapAndLinkDMAtoUARTTx+0x3cc>
 800c632:	e693      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c634:	23a8      	movs	r3, #168	; 0xa8
 800c636:	4a7a      	ldr	r2, [pc, #488]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c638:	4d7a      	ldr	r5, [pc, #488]	; (800c824 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c63a:	58d4      	ldr	r4, [r2, r3]
 800c63c:	402c      	ands	r4, r5
 800c63e:	50d4      	str	r4, [r2, r3]
 800c640:	24d0      	movs	r4, #208	; 0xd0
 800c642:	58d5      	ldr	r5, [r2, r3]
 800c644:	0324      	lsls	r4, r4, #12
 800c646:	432c      	orrs	r4, r5
 800c648:	50d4      	str	r4, [r2, r3]
 800c64a:	e687      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c64c:	23a8      	movs	r3, #168	; 0xa8
 800c64e:	25f0      	movs	r5, #240	; 0xf0
 800c650:	4a75      	ldr	r2, [pc, #468]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c652:	58d4      	ldr	r4, [r2, r3]
 800c654:	43ac      	bics	r4, r5
 800c656:	50d4      	str	r4, [r2, r3]
 800c658:	58d4      	ldr	r4, [r2, r3]
 800c65a:	3d30      	subs	r5, #48	; 0x30
 800c65c:	432c      	orrs	r4, r5
 800c65e:	50d4      	str	r4, [r2, r3]
 800c660:	e67c      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c662:	4a71      	ldr	r2, [pc, #452]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c664:	23a8      	movs	r3, #168	; 0xa8
 800c666:	4d71      	ldr	r5, [pc, #452]	; (800c82c <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c668:	58d4      	ldr	r4, [r2, r3]
 800c66a:	402c      	ands	r4, r5
 800c66c:	50d4      	str	r4, [r2, r3]
 800c66e:	24c0      	movs	r4, #192	; 0xc0
 800c670:	58d5      	ldr	r5, [r2, r3]
 800c672:	0224      	lsls	r4, r4, #8
 800c674:	432c      	orrs	r4, r5
 800c676:	50d4      	str	r4, [r2, r3]
 800c678:	e670      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c67a:	23a8      	movs	r3, #168	; 0xa8
 800c67c:	4a6a      	ldr	r2, [pc, #424]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c67e:	4d6c      	ldr	r5, [pc, #432]	; (800c830 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c680:	58d4      	ldr	r4, [r2, r3]
 800c682:	402c      	ands	r4, r5
 800c684:	50d4      	str	r4, [r2, r3]
 800c686:	24c0      	movs	r4, #192	; 0xc0
 800c688:	58d5      	ldr	r5, [r2, r3]
 800c68a:	0524      	lsls	r4, r4, #20
 800c68c:	432c      	orrs	r4, r5
 800c68e:	50d4      	str	r4, [r2, r3]
 800c690:	e664      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c692:	23a8      	movs	r3, #168	; 0xa8
 800c694:	250f      	movs	r5, #15
 800c696:	4a62      	ldr	r2, [pc, #392]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c698:	58d4      	ldr	r4, [r2, r3]
 800c69a:	43ac      	bics	r4, r5
 800c69c:	50d4      	str	r4, [r2, r3]
 800c69e:	58d4      	ldr	r4, [r2, r3]
 800c6a0:	3d03      	subs	r5, #3
 800c6a2:	432c      	orrs	r4, r5
 800c6a4:	50d4      	str	r4, [r2, r3]
 800c6a6:	e659      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c6a8:	4a5d      	ldr	r2, [pc, #372]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6aa:	e7db      	b.n	800c664 <RemapAndLinkDMAtoUARTTx+0x3fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c6ac:	23a8      	movs	r3, #168	; 0xa8
 800c6ae:	25f0      	movs	r5, #240	; 0xf0
 800c6b0:	4a5d      	ldr	r2, [pc, #372]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c6b2:	58d4      	ldr	r4, [r2, r3]
 800c6b4:	43ac      	bics	r4, r5
 800c6b6:	50d4      	str	r4, [r2, r3]
 800c6b8:	58d4      	ldr	r4, [r2, r3]
 800c6ba:	3d20      	subs	r5, #32
 800c6bc:	432c      	orrs	r4, r5
 800c6be:	50d4      	str	r4, [r2, r3]
 800c6c0:	e64c      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c6c2:	4a59      	ldr	r2, [pc, #356]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c6c4:	23a8      	movs	r3, #168	; 0xa8
 800c6c6:	4d59      	ldr	r5, [pc, #356]	; (800c82c <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c6c8:	58d4      	ldr	r4, [r2, r3]
 800c6ca:	402c      	ands	r4, r5
 800c6cc:	50d4      	str	r4, [r2, r3]
 800c6ce:	24d0      	movs	r4, #208	; 0xd0
 800c6d0:	58d5      	ldr	r5, [r2, r3]
 800c6d2:	0224      	lsls	r4, r4, #8
 800c6d4:	432c      	orrs	r4, r5
 800c6d6:	50d4      	str	r4, [r2, r3]
 800c6d8:	e640      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c6da:	23a8      	movs	r3, #168	; 0xa8
 800c6dc:	4a52      	ldr	r2, [pc, #328]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c6de:	4d54      	ldr	r5, [pc, #336]	; (800c830 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c6e0:	58d4      	ldr	r4, [r2, r3]
 800c6e2:	402c      	ands	r4, r5
 800c6e4:	50d4      	str	r4, [r2, r3]
 800c6e6:	24d0      	movs	r4, #208	; 0xd0
 800c6e8:	58d5      	ldr	r5, [r2, r3]
 800c6ea:	0524      	lsls	r4, r4, #20
 800c6ec:	432c      	orrs	r4, r5
 800c6ee:	50d4      	str	r4, [r2, r3]
 800c6f0:	e634      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c6f2:	23a8      	movs	r3, #168	; 0xa8
 800c6f4:	250f      	movs	r5, #15
 800c6f6:	4a4a      	ldr	r2, [pc, #296]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6f8:	58d4      	ldr	r4, [r2, r3]
 800c6fa:	43ac      	bics	r4, r5
 800c6fc:	50d4      	str	r4, [r2, r3]
 800c6fe:	58d4      	ldr	r4, [r2, r3]
 800c700:	3d02      	subs	r5, #2
 800c702:	432c      	orrs	r4, r5
 800c704:	50d4      	str	r4, [r2, r3]
 800c706:	e629      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c708:	4a45      	ldr	r2, [pc, #276]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c70a:	e7db      	b.n	800c6c4 <RemapAndLinkDMAtoUARTTx+0x45c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c70c:	23a8      	movs	r3, #168	; 0xa8
 800c70e:	25f0      	movs	r5, #240	; 0xf0
 800c710:	4a45      	ldr	r2, [pc, #276]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c712:	58d4      	ldr	r4, [r2, r3]
 800c714:	43ac      	bics	r4, r5
 800c716:	50d4      	str	r4, [r2, r3]
 800c718:	58d4      	ldr	r4, [r2, r3]
 800c71a:	3d10      	subs	r5, #16
 800c71c:	432c      	orrs	r4, r5
 800c71e:	50d4      	str	r4, [r2, r3]
 800c720:	e61c      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c722:	4a41      	ldr	r2, [pc, #260]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c724:	23a8      	movs	r3, #168	; 0xa8
 800c726:	4d41      	ldr	r5, [pc, #260]	; (800c82c <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c728:	58d4      	ldr	r4, [r2, r3]
 800c72a:	402c      	ands	r4, r5
 800c72c:	50d4      	str	r4, [r2, r3]
 800c72e:	24e0      	movs	r4, #224	; 0xe0
 800c730:	58d5      	ldr	r5, [r2, r3]
 800c732:	0224      	lsls	r4, r4, #8
 800c734:	432c      	orrs	r4, r5
 800c736:	50d4      	str	r4, [r2, r3]
 800c738:	e610      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c73a:	23a8      	movs	r3, #168	; 0xa8
 800c73c:	4a3a      	ldr	r2, [pc, #232]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c73e:	4d3c      	ldr	r5, [pc, #240]	; (800c830 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c740:	58d4      	ldr	r4, [r2, r3]
 800c742:	402c      	ands	r4, r5
 800c744:	50d4      	str	r4, [r2, r3]
 800c746:	24e0      	movs	r4, #224	; 0xe0
 800c748:	58d5      	ldr	r5, [r2, r3]
 800c74a:	0524      	lsls	r4, r4, #20
 800c74c:	432c      	orrs	r4, r5
 800c74e:	50d4      	str	r4, [r2, r3]
 800c750:	e604      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c752:	23a8      	movs	r3, #168	; 0xa8
 800c754:	250f      	movs	r5, #15
 800c756:	4a32      	ldr	r2, [pc, #200]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c758:	58d4      	ldr	r4, [r2, r3]
 800c75a:	43ac      	bics	r4, r5
 800c75c:	50d4      	str	r4, [r2, r3]
 800c75e:	58d4      	ldr	r4, [r2, r3]
 800c760:	3d01      	subs	r5, #1
 800c762:	432c      	orrs	r4, r5
 800c764:	50d4      	str	r4, [r2, r3]
 800c766:	e5f9      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c768:	4a2d      	ldr	r2, [pc, #180]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c76a:	e7db      	b.n	800c724 <RemapAndLinkDMAtoUARTTx+0x4bc>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c76c:	4a31      	ldr	r2, [pc, #196]	; (800c834 <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d000      	beq.n	800c774 <RemapAndLinkDMAtoUARTTx+0x50c>
 800c772:	e5f3      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
 800c774:	680b      	ldr	r3, [r1, #0]
 800c776:	4a24      	ldr	r2, [pc, #144]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d01b      	beq.n	800c7b4 <RemapAndLinkDMAtoUARTTx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c77c:	4a23      	ldr	r2, [pc, #140]	; (800c80c <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d022      	beq.n	800c7c8 <RemapAndLinkDMAtoUARTTx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c782:	4a23      	ldr	r2, [pc, #140]	; (800c810 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d02b      	beq.n	800c7e0 <RemapAndLinkDMAtoUARTTx+0x578>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c788:	4a22      	ldr	r2, [pc, #136]	; (800c814 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d034      	beq.n	800c7f8 <RemapAndLinkDMAtoUARTTx+0x590>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c78e:	4a22      	ldr	r2, [pc, #136]	; (800c818 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d036      	beq.n	800c802 <RemapAndLinkDMAtoUARTTx+0x59a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c794:	4a21      	ldr	r2, [pc, #132]	; (800c81c <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d000      	beq.n	800c79c <RemapAndLinkDMAtoUARTTx+0x534>
 800c79a:	e5df      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c79c:	23a8      	movs	r3, #168	; 0xa8
 800c79e:	4a20      	ldr	r2, [pc, #128]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c7a0:	4d20      	ldr	r5, [pc, #128]	; (800c824 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c7a2:	58d4      	ldr	r4, [r2, r3]
 800c7a4:	402c      	ands	r4, r5
 800c7a6:	50d4      	str	r4, [r2, r3]
 800c7a8:	24f0      	movs	r4, #240	; 0xf0
 800c7aa:	58d5      	ldr	r5, [r2, r3]
 800c7ac:	0324      	lsls	r4, r4, #12
 800c7ae:	432c      	orrs	r4, r5
 800c7b0:	50d4      	str	r4, [r2, r3]
 800c7b2:	e5d3      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c7b4:	23a8      	movs	r3, #168	; 0xa8
 800c7b6:	26f0      	movs	r6, #240	; 0xf0
 800c7b8:	4a1b      	ldr	r2, [pc, #108]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c7ba:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c7bc:	43b5      	bics	r5, r6
 800c7be:	50d5      	str	r5, [r2, r3]
 800c7c0:	58d4      	ldr	r4, [r2, r3]
 800c7c2:	4334      	orrs	r4, r6
 800c7c4:	50d4      	str	r4, [r2, r3]
 800c7c6:	e5c9      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c7c8:	4a17      	ldr	r2, [pc, #92]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c7ca:	23a8      	movs	r3, #168	; 0xa8
 800c7cc:	4d17      	ldr	r5, [pc, #92]	; (800c82c <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c7ce:	58d4      	ldr	r4, [r2, r3]
 800c7d0:	402c      	ands	r4, r5
 800c7d2:	50d4      	str	r4, [r2, r3]
 800c7d4:	24f0      	movs	r4, #240	; 0xf0
 800c7d6:	58d5      	ldr	r5, [r2, r3]
 800c7d8:	0224      	lsls	r4, r4, #8
 800c7da:	432c      	orrs	r4, r5
 800c7dc:	50d4      	str	r4, [r2, r3]
 800c7de:	e5bd      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c7e0:	23a8      	movs	r3, #168	; 0xa8
 800c7e2:	4a11      	ldr	r2, [pc, #68]	; (800c828 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c7e4:	4d12      	ldr	r5, [pc, #72]	; (800c830 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c7e6:	58d4      	ldr	r4, [r2, r3]
 800c7e8:	402c      	ands	r4, r5
 800c7ea:	50d4      	str	r4, [r2, r3]
 800c7ec:	24f0      	movs	r4, #240	; 0xf0
 800c7ee:	58d5      	ldr	r5, [r2, r3]
 800c7f0:	0524      	lsls	r4, r4, #20
 800c7f2:	432c      	orrs	r4, r5
 800c7f4:	50d4      	str	r4, [r2, r3]
 800c7f6:	e5b1      	b.n	800c35c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c7f8:	23a8      	movs	r3, #168	; 0xa8
 800c7fa:	4a09      	ldr	r2, [pc, #36]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c7fc:	260f      	movs	r6, #15
 800c7fe:	58d5      	ldr	r5, [r2, r3]
 800c800:	e7dc      	b.n	800c7bc <RemapAndLinkDMAtoUARTTx+0x554>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c802:	4a07      	ldr	r2, [pc, #28]	; (800c820 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c804:	e7e1      	b.n	800c7ca <RemapAndLinkDMAtoUARTTx+0x562>
 800c806:	46c0      	nop			; (mov r8, r8)
 800c808:	4002001c 	.word	0x4002001c
 800c80c:	40020044 	.word	0x40020044
 800c810:	40020080 	.word	0x40020080
 800c814:	40020408 	.word	0x40020408
 800c818:	40020444 	.word	0x40020444
 800c81c:	40020458 	.word	0x40020458
 800c820:	40020400 	.word	0x40020400
 800c824:	fff0ffff 	.word	0xfff0ffff
 800c828:	40020000 	.word	0x40020000
 800c82c:	ffff0fff 	.word	0xffff0fff
 800c830:	f0ffffff 	.word	0xf0ffffff
 800c834:	40011c00 	.word	0x40011c00

0800c838 <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800c838:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <DMA_MSG_TX_Setup+0x34>)
{	
 800c83a:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c83c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c83e:	2a00      	cmp	r2, #0
 800c840:	d00f      	beq.n	800c862 <DMA_MSG_TX_Setup+0x2a>
	else if (msgTxDMA[1].Parent == NULL)
 800c842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c844:	2a00      	cmp	r2, #0
 800c846:	d00b      	beq.n	800c860 <DMA_MSG_TX_Setup+0x28>
	else if (msgTxDMA[2].Parent == NULL)
 800c848:	2294      	movs	r2, #148	; 0x94
 800c84a:	589a      	ldr	r2, [r3, r2]
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	d00a      	beq.n	800c866 <DMA_MSG_TX_Setup+0x2e>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c850:	0021      	movs	r1, r4
 800c852:	f7ff fd09 	bl	800c268 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c856:	2100      	movs	r1, #0
 800c858:	0020      	movs	r0, r4
 800c85a:	f7ff f8e1 	bl	800ba20 <SetupDMAInterrupts>
}
 800c85e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[1];
 800c860:	3338      	adds	r3, #56	; 0x38
 800c862:	001c      	movs	r4, r3
 800c864:	e7f4      	b.n	800c850 <DMA_MSG_TX_Setup+0x18>
		hDMA = &msgTxDMA[2];  
 800c866:	3370      	adds	r3, #112	; 0x70
 800c868:	001c      	movs	r4, r3
 800c86a:	e7f1      	b.n	800c850 <DMA_MSG_TX_Setup+0x18>
 800c86c:	20001fc8 	.word	0x20001fc8

0800c870 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c870:	2310      	movs	r3, #16
 800c872:	4807      	ldr	r0, [pc, #28]	; (800c890 <CRC_Init+0x20>)
{
 800c874:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c876:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800c878:	4b06      	ldr	r3, [pc, #24]	; (800c894 <CRC_Init+0x24>)
 800c87a:	6003      	str	r3, [r0, #0]
 800c87c:	2300      	movs	r3, #0
 800c87e:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800c880:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800c882:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c884:	3303      	adds	r3, #3
 800c886:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c888:	f003 fab2 	bl	800fdf0 <HAL_CRC_Init>
}
 800c88c:	bd10      	pop	{r4, pc}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	20007490 	.word	0x20007490
 800c894:	40023000 	.word	0x40023000

0800c898 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c898:	2340      	movs	r3, #64	; 0x40
 800c89a:	4a05      	ldr	r2, [pc, #20]	; (800c8b0 <HAL_CRC_MspInit+0x18>)
{
 800c89c:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800c89e:	6951      	ldr	r1, [r2, #20]
 800c8a0:	4319      	orrs	r1, r3
 800c8a2:	6151      	str	r1, [r2, #20]
 800c8a4:	6952      	ldr	r2, [r2, #20]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	9b01      	ldr	r3, [sp, #4]
}
 800c8ac:	b002      	add	sp, #8
 800c8ae:	4770      	bx	lr
 800c8b0:	40021000 	.word	0x40021000

0800c8b4 <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	0004      	movs	r4, r0
 800c8b8:	000d      	movs	r5, r1
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800c8ba:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800c8bc:	2c00      	cmp	r4, #0
 800c8be:	d001      	beq.n	800c8c4 <CalculateCRC8+0x10>
 800c8c0:	2900      	cmp	r1, #0
 800c8c2:	d100      	bne.n	800c8c6 <CalculateCRC8+0x12>
}
 800c8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c8c6:	4f09      	ldr	r7, [pc, #36]	; (800c8ec <CalculateCRC8+0x38>)
 800c8c8:	088e      	lsrs	r6, r1, #2
 800c8ca:	0032      	movs	r2, r6
 800c8cc:	0021      	movs	r1, r4
 800c8ce:	0038      	movs	r0, r7
 800c8d0:	f003 faec 	bl	800feac <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800c8d4:	07ab      	lsls	r3, r5, #30
 800c8d6:	d101      	bne.n	800c8dc <CalculateCRC8+0x28>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800c8d8:	b2c0      	uxtb	r0, r0
 800c8da:	e7f3      	b.n	800c8c4 <CalculateCRC8+0x10>
 800c8dc:	0131      	lsls	r1, r6, #4
 800c8de:	1861      	adds	r1, r4, r1
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	0038      	movs	r0, r7
 800c8e4:	f003 fab8 	bl	800fe58 <HAL_CRC_Accumulate>
 800c8e8:	b2c0      	uxtb	r0, r0
 800c8ea:	e7eb      	b.n	800c8c4 <CalculateCRC8+0x10>
 800c8ec:	20007490 	.word	0x20007490

0800c8f0 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800c8f0:	2080      	movs	r0, #128	; 0x80
 800c8f2:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <GPIO_Init+0x80>)
 800c8f4:	0300      	lsls	r0, r0, #12
 800c8f6:	6959      	ldr	r1, [r3, #20]
{
 800c8f8:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800c8fa:	4301      	orrs	r1, r0
 800c8fc:	6159      	str	r1, [r3, #20]
 800c8fe:	695a      	ldr	r2, [r3, #20]
{
 800c900:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800c902:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800c904:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800c906:	9200      	str	r2, [sp, #0]
 800c908:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800c90a:	6959      	ldr	r1, [r3, #20]
 800c90c:	0280      	lsls	r0, r0, #10
 800c90e:	4301      	orrs	r1, r0
 800c910:	6159      	str	r1, [r3, #20]
 800c912:	695a      	ldr	r2, [r3, #20]
 800c914:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800c916:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800c918:	9201      	str	r2, [sp, #4]
 800c91a:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800c91c:	6959      	ldr	r1, [r3, #20]
 800c91e:	0340      	lsls	r0, r0, #13
 800c920:	4301      	orrs	r1, r0
 800c922:	6159      	str	r1, [r3, #20]
 800c924:	695a      	ldr	r2, [r3, #20]
 800c926:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800c928:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800c92a:	9202      	str	r2, [sp, #8]
 800c92c:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800c92e:	6959      	ldr	r1, [r3, #20]
 800c930:	02c0      	lsls	r0, r0, #11
 800c932:	4301      	orrs	r1, r0
 800c934:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c936:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800c938:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c93a:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800c93c:	4002      	ands	r2, r0
 800c93e:	9203      	str	r2, [sp, #12]
 800c940:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c942:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c944:	480b      	ldr	r0, [pc, #44]	; (800c974 <GPIO_Init+0x84>)
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c946:	430a      	orrs	r2, r1
 800c948:	615a      	str	r2, [r3, #20]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	400b      	ands	r3, r1
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c952:	2380      	movs	r3, #128	; 0x80
 800c954:	01db      	lsls	r3, r3, #7
 800c956:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c958:	2301      	movs	r3, #1
 800c95a:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c95c:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c95e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c960:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c962:	3303      	adds	r3, #3
 800c964:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c966:	f004 f977 	bl	8010c58 <HAL_GPIO_Init>
}
 800c96a:	b00b      	add	sp, #44	; 0x2c
 800c96c:	bd00      	pop	{pc}
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	40021000 	.word	0x40021000
 800c974:	48000400 	.word	0x48000400

0800c978 <RS485_DE_RE_Init>:
//-- Configure MAX14840EASA+ \RE and DE
void RS485_DE_RE_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c978:	2301      	movs	r3, #1
{
 800c97a:	b500      	push	{lr}
 800c97c:	b087      	sub	sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c97e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c980:	2300      	movs	r3, #0
	
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800c982:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c984:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c986:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800c988:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800c98a:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800c98c:	015b      	lsls	r3, r3, #5
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800c98e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800c990:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800c992:	f004 f961 	bl	8010c58 <HAL_GPIO_Init>
	
}
 800c996:	b007      	add	sp, #28
 800c998:	bd00      	pop	{pc}
 800c99a:	46c0      	nop			; (mov r8, r8)

0800c99c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c99c:	b570      	push	{r4, r5, r6, lr}
 800c99e:	0015      	movs	r5, r2
 800c9a0:	001c      	movs	r4, r3
 800c9a2:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c9a4:	f000 fe16 	bl	800d5d4 <GetUart>
	
	if (huart == &huart1) 
 800c9a8:	4a2c      	ldr	r2, [pc, #176]	; (800ca5c <GetPortGPIOs+0xc0>)
	UART_HandleTypeDef* huart = GetUart(port);
 800c9aa:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800c9ac:	4290      	cmp	r0, r2
 800c9ae:	d010      	beq.n	800c9d2 <GetPortGPIOs+0x36>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c9b0:	4a2b      	ldr	r2, [pc, #172]	; (800ca60 <GetPortGPIOs+0xc4>)
 800c9b2:	4290      	cmp	r0, r2
 800c9b4:	d031      	beq.n	800ca1a <GetPortGPIOs+0x7e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c9b6:	4a2b      	ldr	r2, [pc, #172]	; (800ca64 <GetPortGPIOs+0xc8>)
 800c9b8:	4290      	cmp	r0, r2
 800c9ba:	d017      	beq.n	800c9ec <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c9bc:	4a2a      	ldr	r2, [pc, #168]	; (800ca68 <GetPortGPIOs+0xcc>)
 800c9be:	4290      	cmp	r0, r2
 800c9c0:	d036      	beq.n	800ca30 <GetPortGPIOs+0x94>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c9c2:	4a2a      	ldr	r2, [pc, #168]	; (800ca6c <GetPortGPIOs+0xd0>)
 800c9c4:	4290      	cmp	r0, r2
 800c9c6:	d03e      	beq.n	800ca46 <GetPortGPIOs+0xaa>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c9c8:	4a29      	ldr	r2, [pc, #164]	; (800ca70 <GetPortGPIOs+0xd4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c9ca:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d019      	beq.n	800ca04 <GetPortGPIOs+0x68>
	
	return result;	
}
 800c9d0:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c9d2:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800c9d4:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c9d6:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800c9d8:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c9da:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c9dc:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c9de:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c9e0:	2380      	movs	r3, #128	; 0x80
 800c9e2:	9a04      	ldr	r2, [sp, #16]
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	e7f1      	b.n	800c9d0 <GetPortGPIOs+0x34>
		*TX_Pin = USART3_TX_PIN;
 800c9ec:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c9ee:	4b21      	ldr	r3, [pc, #132]	; (800ca74 <GetPortGPIOs+0xd8>)
		*TX_Pin = USART3_TX_PIN;
 800c9f0:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c9f2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c9f4:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c9f6:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c9f8:	2380      	movs	r3, #128	; 0x80
 800c9fa:	9a04      	ldr	r2, [sp, #16]
 800c9fc:	011b      	lsls	r3, r3, #4
 800c9fe:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ca00:	2000      	movs	r0, #0
 800ca02:	e7e5      	b.n	800c9d0 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800ca04:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800ca06:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800ca08:	05db      	lsls	r3, r3, #23
 800ca0a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800ca0c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800ca0e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800ca10:	2320      	movs	r3, #32
 800ca12:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800ca14:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800ca16:	8013      	strh	r3, [r2, #0]
 800ca18:	e7da      	b.n	800c9d0 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800ca1a:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800ca1c:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800ca1e:	05db      	lsls	r3, r3, #23
 800ca20:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800ca22:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800ca24:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800ca26:	2308      	movs	r3, #8
 800ca28:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800ca2a:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800ca2c:	8013      	strh	r3, [r2, #0]
 800ca2e:	e7cf      	b.n	800c9d0 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800ca30:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800ca32:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800ca34:	05db      	lsls	r3, r3, #23
 800ca36:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800ca38:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800ca3a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800ca40:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800ca42:	8013      	strh	r3, [r2, #0]
 800ca44:	e7c4      	b.n	800c9d0 <GetPortGPIOs+0x34>
		*TX_Pin = USART5_TX_PIN;
 800ca46:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800ca48:	4b0a      	ldr	r3, [pc, #40]	; (800ca74 <GetPortGPIOs+0xd8>)
	BOS_Status result = BOS_OK;
 800ca4a:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800ca4c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800ca4e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800ca50:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800ca52:	2310      	movs	r3, #16
 800ca54:	9a04      	ldr	r2, [sp, #16]
 800ca56:	8013      	strh	r3, [r2, #0]
 800ca58:	e7ba      	b.n	800c9d0 <GetPortGPIOs+0x34>
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	200072c0 	.word	0x200072c0
 800ca60:	20007420 	.word	0x20007420
 800ca64:	200071dc 	.word	0x200071dc
 800ca68:	200073ac 	.word	0x200073ac
 800ca6c:	20007250 	.word	0x20007250
 800ca70:	2000733c 	.word	0x2000733c
 800ca74:	48000400 	.word	0x48000400

0800ca78 <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800ca78:	2080      	movs	r0, #128	; 0x80
 800ca7a:	4b38      	ldr	r3, [pc, #224]	; (800cb5c <IsFactoryReset+0xe4>)
 800ca7c:	0280      	lsls	r0, r0, #10
 800ca7e:	6959      	ldr	r1, [r3, #20]
{
 800ca80:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800ca82:	4301      	orrs	r1, r0
 800ca84:	6159      	str	r1, [r3, #20]
 800ca86:	695a      	ldr	r2, [r3, #20]
{
 800ca88:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800ca8a:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800ca8c:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800ca8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800ca92:	6959      	ldr	r1, [r3, #20]
 800ca94:	02c0      	lsls	r0, r0, #11
 800ca96:	4301      	orrs	r1, r0
 800ca98:	6159      	str	r1, [r3, #20]
 800ca9a:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ca9c:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800ca9e:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800caa0:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800caa2:	920a      	str	r2, [sp, #40]	; 0x28
 800caa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800caa6:	6959      	ldr	r1, [r3, #20]
 800caa8:	0300      	lsls	r0, r0, #12
 800caaa:	4301      	orrs	r1, r0
 800caac:	6159      	str	r1, [r3, #20]
  __GPIOD_CLK_ENABLE();
 800caae:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800cab0:	695a      	ldr	r2, [r3, #20]
  __GPIOD_CLK_ENABLE();
 800cab2:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800cab4:	4002      	ands	r2, r0
 800cab6:	920b      	str	r2, [sp, #44]	; 0x2c
 800cab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __GPIOD_CLK_ENABLE();
 800caba:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cabc:	ad03      	add	r5, sp, #12
  __GPIOD_CLK_ENABLE();
 800cabe:	430a      	orrs	r2, r1
 800cac0:	615a      	str	r2, [r3, #20]
 800cac2:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cac4:	446c      	add	r4, sp
  __GPIOD_CLK_ENABLE();
 800cac6:	400b      	ands	r3, r1
 800cac8:	930c      	str	r3, [sp, #48]	; 0x30
 800caca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cacc:	230e      	movs	r3, #14
 800cace:	446b      	add	r3, sp
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	002a      	movs	r2, r5
 800cad4:	ab06      	add	r3, sp, #24
 800cad6:	a905      	add	r1, sp, #20
 800cad8:	2001      	movs	r0, #1
 800cada:	f7ff ff5f 	bl	800c99c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cade:	aa04      	add	r2, sp, #16
 800cae0:	ab08      	add	r3, sp, #32
 800cae2:	a907      	add	r1, sp, #28
 800cae4:	9400      	str	r4, [sp, #0]
 800cae6:	2006      	movs	r0, #6
 800cae8:	f7ff ff58 	bl	800c99c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caec:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caee:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caf0:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800caf2:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800caf4:	a90d      	add	r1, sp, #52	; 0x34
 800caf6:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800caf8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cafa:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800cafc:	f004 f8ac 	bl	8010c58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800cb00:	2302      	movs	r3, #2
 800cb02:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cb04:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cb06:	a90d      	add	r1, sp, #52	; 0x34
 800cb08:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cb0a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cb0c:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cb0e:	f004 f8a3 	bl	8010c58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800cb12:	8829      	ldrh	r1, [r5, #0]
 800cb14:	2200      	movs	r2, #0
 800cb16:	9805      	ldr	r0, [sp, #20]
 800cb18:	f004 fa3e 	bl	8010f98 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800cb1c:	2005      	movs	r0, #5
 800cb1e:	f000 fb11 	bl	800d144 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800cb22:	8821      	ldrh	r1, [r4, #0]
 800cb24:	9808      	ldr	r0, [sp, #32]
 800cb26:	f004 fa31 	bl	8010f8c <HAL_GPIO_ReadPin>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	d006      	beq.n	800cb3c <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800cb2e:	2201      	movs	r2, #1
	return 0;
 800cb30:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800cb32:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <IsFactoryReset+0xe8>)
 800cb34:	4252      	negs	r2, r2
 800cb36:	601a      	str	r2, [r3, #0]
}
 800cb38:	b012      	add	sp, #72	; 0x48
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800cb3c:	8829      	ldrh	r1, [r5, #0]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	9805      	ldr	r0, [sp, #20]
 800cb42:	f004 fa29 	bl	8010f98 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800cb46:	2005      	movs	r0, #5
 800cb48:	f000 fafc 	bl	800d144 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800cb4c:	8821      	ldrh	r1, [r4, #0]
 800cb4e:	9808      	ldr	r0, [sp, #32]
 800cb50:	f004 fa1c 	bl	8010f8c <HAL_GPIO_ReadPin>
 800cb54:	2801      	cmp	r0, #1
 800cb56:	d1ea      	bne.n	800cb2e <IsFactoryReset+0xb6>
 800cb58:	e7ee      	b.n	800cb38 <IsFactoryReset+0xc0>
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	40021000 	.word	0x40021000
 800cb60:	20007ff0 	.word	0x20007ff0

0800cb64 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cb64:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cb66:	f002 fd6f 	bl	800f648 <HAL_IncTick>
  osSystickHandler();  
 800cb6a:	f000 fe67 	bl	800d83c <osSystickHandler>

}
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cb70:	e7fe      	b.n	800cb70 <HardFault_Handler>
 800cb72:	46c0      	nop			; (mov r8, r8)

0800cb74 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cb74:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cb76:	4802      	ldr	r0, [pc, #8]	; (800cb80 <USART1_IRQHandler+0xc>)
 800cb78:	f005 fed0 	bl	801291c <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */	
	
}
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	46c0      	nop			; (mov r8, r8)
 800cb80:	200072c0 	.word	0x200072c0

0800cb84 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cb84:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cb86:	4802      	ldr	r0, [pc, #8]	; (800cb90 <USART2_IRQHandler+0xc>)
 800cb88:	f005 fec8 	bl	801291c <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	20007420 	.word	0x20007420

0800cb94 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cb94:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cb96:	4806      	ldr	r0, [pc, #24]	; (800cbb0 <USART3_8_IRQHandler+0x1c>)
 800cb98:	f005 fec0 	bl	801291c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <USART3_8_IRQHandler+0x20>)
 800cb9e:	f005 febd 	bl	801291c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cba2:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <USART3_8_IRQHandler+0x24>)
 800cba4:	f005 feba 	bl	801291c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cba8:	4804      	ldr	r0, [pc, #16]	; (800cbbc <USART3_8_IRQHandler+0x28>)
 800cbaa:	f005 feb7 	bl	801291c <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cbae:	bd10      	pop	{r4, pc}
 800cbb0:	200071dc 	.word	0x200071dc
 800cbb4:	200073ac 	.word	0x200073ac
 800cbb8:	20007250 	.word	0x20007250
 800cbbc:	2000733c 	.word	0x2000733c

0800cbc0 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cbc0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	f7fa fd82 	bl	80076cc <DMA_IRQHandler>
	
}
 800cbc8:	bd10      	pop	{r4, pc}
 800cbca:	46c0      	nop			; (mov r8, r8)

0800cbcc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cbcc:	4b0c      	ldr	r3, [pc, #48]	; (800cc00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800cbce:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	2310      	movs	r3, #16
 800cbd4:	4213      	tst	r3, r2
 800cbd6:	d10e      	bne.n	800cbf6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cbd8:	4a0a      	ldr	r2, [pc, #40]	; (800cc04 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cbda:	6811      	ldr	r1, [r2, #0]
 800cbdc:	05c9      	lsls	r1, r1, #23
 800cbde:	d406      	bmi.n	800cbee <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cbe0:	6812      	ldr	r2, [r2, #0]
 800cbe2:	4213      	tst	r3, r2
 800cbe4:	d002      	beq.n	800cbec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cbe6:	4808      	ldr	r0, [pc, #32]	; (800cc08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cbe8:	f003 fa54 	bl	8010094 <HAL_DMA_IRQHandler>
	}
}
 800cbec:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cbee:	2002      	movs	r0, #2
 800cbf0:	f7fa fd6c 	bl	80076cc <DMA_IRQHandler>
 800cbf4:	e7fa      	b.n	800cbec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800cbf6:	2005      	movs	r0, #5
 800cbf8:	f7fa fd68 	bl	80076cc <DMA_IRQHandler>
 800cbfc:	e7f6      	b.n	800cbec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800cbfe:	46c0      	nop			; (mov r8, r8)
 800cc00:	40020400 	.word	0x40020400
 800cc04:	40020000 	.word	0x40020000
 800cc08:	20001fc8 	.word	0x20001fc8

0800cc0c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cc0c:	4b12      	ldr	r3, [pc, #72]	; (800cc58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800cc0e:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	03d2      	lsls	r2, r2, #15
 800cc14:	d414      	bmi.n	800cc40 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	02d2      	lsls	r2, r2, #11
 800cc1a:	d40d      	bmi.n	800cc38 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cc1c:	4a0f      	ldr	r2, [pc, #60]	; (800cc5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800cc1e:	6812      	ldr	r2, [r2, #0]
 800cc20:	05d2      	lsls	r2, r2, #23
 800cc22:	d411      	bmi.n	800cc48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	04d2      	lsls	r2, r2, #19
 800cc28:	d412      	bmi.n	800cc50 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	01db      	lsls	r3, r3, #7
 800cc2e:	d506      	bpl.n	800cc3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cc30:	480b      	ldr	r0, [pc, #44]	; (800cc60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cc32:	f003 fa2f 	bl	8010094 <HAL_DMA_IRQHandler>
	}
}
 800cc36:	e002      	b.n	800cc3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800cc38:	2004      	movs	r0, #4
 800cc3a:	f7fa fd47 	bl	80076cc <DMA_IRQHandler>
}
 800cc3e:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800cc40:	2003      	movs	r0, #3
 800cc42:	f7fa fd43 	bl	80076cc <DMA_IRQHandler>
 800cc46:	e7fa      	b.n	800cc3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800cc48:	2006      	movs	r0, #6
 800cc4a:	f7fa fd3f 	bl	80076cc <DMA_IRQHandler>
 800cc4e:	e7f6      	b.n	800cc3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cc50:	4804      	ldr	r0, [pc, #16]	; (800cc64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cc52:	f003 fa1f 	bl	8010094 <HAL_DMA_IRQHandler>
 800cc56:	e7f2      	b.n	800cc3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800cc58:	40020000 	.word	0x40020000
 800cc5c:	40020400 	.word	0x40020400
 800cc60:	20002038 	.word	0x20002038
 800cc64:	20002000 	.word	0x20002000

0800cc68 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 800cc68:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
	HAL_TIM_IRQHandler(&htim16);
 800cc6a:	4802      	ldr	r0, [pc, #8]	; (800cc74 <TIM16_IRQHandler+0xc>)
 800cc6c:	f005 f882 	bl	8011d74 <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
	
}
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	46c0      	nop			; (mov r8, r8)
 800cc74:	200074b4 	.word	0x200074b4

0800cc78 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cc78:	2300      	movs	r3, #0
{
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cc7e:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cc80:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800cc82:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cc88:	f7fe ff76 	bl	800bb78 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cc8c:	0020      	movs	r0, r4
 800cc8e:	f7fe fd37 	bl	800b700 <GetPort>
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <HAL_UART_TxCpltCallback+0x38>)
 800cc94:	0080      	lsls	r0, r0, #2
 800cc96:	58c0      	ldr	r0, [r0, r3]
 800cc98:	a901      	add	r1, sp, #4
 800cc9a:	f001 f94f 	bl	800df3c <xQueueGiveFromISR>
	

	
	RS485_RECEIVER_EN();                        // Enable receiver mode
 800cc9e:	2180      	movs	r1, #128	; 0x80
 800cca0:	2090      	movs	r0, #144	; 0x90
 800cca2:	2200      	movs	r2, #0
 800cca4:	0149      	lsls	r1, r1, #5
 800cca6:	05c0      	lsls	r0, r0, #23
 800cca8:	f004 f976 	bl	8010f98 <HAL_GPIO_WritePin>

}
 800ccac:	b002      	add	sp, #8
 800ccae:	bd10      	pop	{r4, pc}
 800ccb0:	2000712c 	.word	0x2000712c

0800ccb4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccb4:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800ccb6:	2369      	movs	r3, #105	; 0x69
 800ccb8:	2501      	movs	r5, #1
 800ccba:	54c5      	strb	r5, [r0, r3]
{
 800ccbc:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800ccbe:	f7fe fd1f 	bl	800b700 <GetPort>
	if (portStatus[port] == STREAM) {
 800ccc2:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <HAL_UART_ErrorCallback+0x3c>)
 800ccc4:	5c1b      	ldrb	r3, [r3, r0]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d004      	beq.n	800ccd4 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <HAL_UART_ErrorCallback+0x40>)
 800cccc:	1818      	adds	r0, r3, r0
 800ccce:	3801      	subs	r0, #1
 800ccd0:	7005      	strb	r5, [r0, #0]
	}	
}
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800ccd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccd6:	3801      	subs	r0, #1
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	0080      	lsls	r0, r0, #2
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	4b06      	ldr	r3, [pc, #24]	; (800ccf8 <HAL_UART_ErrorCallback+0x44>)
 800cce0:	b292      	uxth	r2, r2
 800cce2:	58c3      	ldr	r3, [r0, r3]
 800cce4:	0020      	movs	r0, r4
 800cce6:	6819      	ldr	r1, [r3, #0]
 800cce8:	3128      	adds	r1, #40	; 0x28
 800ccea:	f005 fa77 	bl	80121dc <HAL_UART_Receive_DMA>
 800ccee:	e7f0      	b.n	800ccd2 <HAL_UART_ErrorCallback+0x1e>
 800ccf0:	20000c2c 	.word	0x20000c2c
 800ccf4:	20001344 	.word	0x20001344
 800ccf8:	2000132c 	.word	0x2000132c

0800ccfc <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ccfc:	b570      	push	{r4, r5, r6, lr}

	/* Check if data received from bridge port */
	if (H1DR1_Mode==BRIDGE)
 800ccfe:	4b23      	ldr	r3, [pc, #140]	; (800cd8c <HAL_UART_RxCpltCallback+0x90>)
{
 800cd00:	0004      	movs	r4, r0
	if (H1DR1_Mode==BRIDGE)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d02d      	beq.n	800cd64 <HAL_UART_RxCpltCallback+0x68>
		}
	}
	
	
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cd08:	0020      	movs	r0, r4
 800cd0a:	f7fe fcf9 	bl	800b700 <GetPort>
 800cd0e:	4d20      	ldr	r5, [pc, #128]	; (800cd90 <HAL_UART_RxCpltCallback+0x94>)
 800cd10:	5c2b      	ldrb	r3, [r5, r0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d006      	beq.n	800cd24 <HAL_UART_RxCpltCallback+0x28>
 800cd16:	0020      	movs	r0, r4
 800cd18:	f7fe fcf2 	bl	800b700 <GetPort>
 800cd1c:	5c2b      	ldrb	r3, [r5, r0]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d000      	beq.n	800cd24 <HAL_UART_RxCpltCallback+0x28>
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;		
	}
	
	
}
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
		BOSMessaging.overrun = GetPort(huart);
 800cd24:	0020      	movs	r0, r4
 800cd26:	f7fe fceb 	bl	800b700 <GetPort>
 800cd2a:	4b1a      	ldr	r3, [pc, #104]	; (800cd94 <HAL_UART_RxCpltCallback+0x98>)
 800cd2c:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800cd2e:	0020      	movs	r0, r4
 800cd30:	f7fe fce6 	bl	800b700 <GetPort>
 800cd34:	2305      	movs	r3, #5
 800cd36:	542b      	strb	r3, [r5, r0]
		memset(&UARTRxBuf[GetPort(huart)-1][0], 0, MSG_RX_BUF_SIZE);
 800cd38:	0020      	movs	r0, r4
 800cd3a:	f7fe fce1 	bl	800b700 <GetPort>
 800cd3e:	1e43      	subs	r3, r0, #1
 800cd40:	0058      	lsls	r0, r3, #1
 800cd42:	18c0      	adds	r0, r0, r3
 800cd44:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <HAL_UART_RxCpltCallback+0x9c>)
 800cd46:	0180      	lsls	r0, r0, #6
 800cd48:	18c0      	adds	r0, r0, r3
 800cd4a:	22c0      	movs	r2, #192	; 0xc0
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	f006 f943 	bl	8012fd8 <memset>
		MsgDMAStopped[GetPort(huart)-1] = true;		
 800cd52:	0020      	movs	r0, r4
 800cd54:	f7fe fcd4 	bl	800b700 <GetPort>
 800cd58:	4b10      	ldr	r3, [pc, #64]	; (800cd9c <HAL_UART_RxCpltCallback+0xa0>)
 800cd5a:	1818      	adds	r0, r3, r0
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	3801      	subs	r0, #1
 800cd60:	7003      	strb	r3, [r0, #0]
 800cd62:	e7de      	b.n	800cd22 <HAL_UART_RxCpltCallback+0x26>
		if (huart==GetUart(Src_port))
 800cd64:	4b0e      	ldr	r3, [pc, #56]	; (800cda0 <HAL_UART_RxCpltCallback+0xa4>)
 800cd66:	7818      	ldrb	r0, [r3, #0]
 800cd68:	f000 fc34 	bl	800d5d4 <GetUart>
 800cd6c:	42a0      	cmp	r0, r4
 800cd6e:	d1cb      	bne.n	800cd08 <HAL_UART_RxCpltCallback+0xc>
			RS485_RECEIVER_DIS();                     // Set RS485 port to transmitter
 800cd70:	2180      	movs	r1, #128	; 0x80
 800cd72:	2090      	movs	r0, #144	; 0x90
 800cd74:	2201      	movs	r2, #1
 800cd76:	0149      	lsls	r1, r1, #5
 800cd78:	05c0      	lsls	r0, r0, #23
 800cd7a:	f004 f90d 	bl	8010f98 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800cd7e:	2140      	movs	r1, #64	; 0x40
 800cd80:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <HAL_UART_RxCpltCallback+0xa8>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	6813      	ldr	r3, [r2, #0]
 800cd86:	430b      	orrs	r3, r1
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	e7bd      	b.n	800cd08 <HAL_UART_RxCpltCallback+0xc>
 800cd8c:	2000741c 	.word	0x2000741c
 800cd90:	20000c2c 	.word	0x20000c2c
 800cd94:	20007028 	.word	0x20007028
 800cd98:	2000138c 	.word	0x2000138c
 800cd9c:	20001344 	.word	0x20001344
 800cda0:	20007330 	.word	0x20007330
 800cda4:	200072c0 	.word	0x200072c0

0800cda8 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cda8:	b672      	cpsid	i
 800cdaa:	e7fe      	b.n	800cdaa <vApplicationStackOverflowHook+0x2>

0800cdac <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cdac:	b672      	cpsid	i
 800cdae:	e7fe      	b.n	800cdae <vApplicationMallocFailedHook+0x2>

0800cdb0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	46de      	mov	lr, fp
 800cdb4:	464e      	mov	r6, r9
 800cdb6:	4645      	mov	r5, r8
 800cdb8:	4657      	mov	r7, sl
 800cdba:	b5e0      	push	{r5, r6, r7, lr}
 800cdbc:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cdbe:	ae04      	add	r6, sp, #16
 800cdc0:	0032      	movs	r2, r6
 800cdc2:	4b34      	ldr	r3, [pc, #208]	; (800ce94 <RTC_CalendarConfig+0xe4>)
 800cdc4:	cb13      	ldmia	r3!, {r0, r1, r4}
 800cdc6:	c213      	stmia	r2!, {r0, r1, r4}
 800cdc8:	ab01      	add	r3, sp, #4
 800cdca:	4698      	mov	r8, r3
 800cdcc:	4642      	mov	r2, r8
 800cdce:	4b32      	ldr	r3, [pc, #200]	; (800ce98 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800cdd0:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cdd2:	cb03      	ldmia	r3!, {r0, r1}
 800cdd4:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800cdd6:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cdd8:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cdda:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cddc:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cdde:	f005 fe2c 	bl	8012a3a <atoi>
 800cde2:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800cde4:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800cde6:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800cde8:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800cdea:	f005 fe26 	bl	8012a3a <atoi>
 800cdee:	b2c3      	uxtb	r3, r0
 800cdf0:	4699      	mov	r9, r3
 800cdf2:	4d2a      	ldr	r5, [pc, #168]	; (800ce9c <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800cdf4:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cdf6:	6829      	ldr	r1, [r5, #0]
 800cdf8:	0030      	movs	r0, r6
 800cdfa:	f7f3 f983 	bl	8000104 <strcmp>
 800cdfe:	3401      	adds	r4, #1
 800ce00:	b2e4      	uxtb	r4, r4
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d100      	bne.n	800ce08 <RTC_CalendarConfig+0x58>
 800ce06:	0027      	movs	r7, r4
 800ce08:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800ce0a:	2c0c      	cmp	r4, #12
 800ce0c:	d1f3      	bne.n	800cdf6 <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800ce0e:	200a      	movs	r0, #10
 800ce10:	4468      	add	r0, sp
 800ce12:	f005 fe12 	bl	8012a3a <atoi>
	*(comDate + 5) = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	7173      	strb	r3, [r6, #5]
 800ce1a:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800ce1c:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800ce1e:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800ce20:	1dd8      	adds	r0, r3, #7
 800ce22:	f005 fe0a 	bl	8012a3a <atoi>
	*(comDate + 2) = 0;
 800ce26:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800ce28:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800ce2a:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800ce2c:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800ce2e:	f005 fe04 	bl	8012a3a <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800ce32:	466b      	mov	r3, sp
 800ce34:	4652      	mov	r2, sl
 800ce36:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800ce38:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800ce3a:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800ce3c:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ce3e:	466a      	mov	r2, sp
 800ce40:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce42:	4f17      	ldr	r7, [pc, #92]	; (800cea0 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800ce44:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ce46:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce48:	4669      	mov	r1, sp
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	0038      	movs	r0, r7
 800ce4e:	f004 fef1 	bl	8011c34 <HAL_RTC_SetDate>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d116      	bne.n	800ce84 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ce56:	2218      	movs	r2, #24
 800ce58:	4b12      	ldr	r3, [pc, #72]	; (800cea4 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800ce5a:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ce5c:	7208      	strb	r0, [r1, #8]
 800ce5e:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ce60:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800ce62:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce64:	2200      	movs	r2, #0
 800ce66:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800ce68:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800ce6a:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800ce6c:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce6e:	f004 fe4d 	bl	8011b0c <HAL_RTC_SetTime>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d106      	bne.n	800ce84 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce76:	0038      	movs	r0, r7
 800ce78:	4a0b      	ldr	r2, [pc, #44]	; (800cea8 <RTC_CalendarConfig+0xf8>)
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	f004 ff56 	bl	8011d2c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce80:	2000      	movs	r0, #0
 800ce82:	e000      	b.n	800ce86 <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800ce84:	20ff      	movs	r0, #255	; 0xff
}
 800ce86:	b00d      	add	sp, #52	; 0x34
 800ce88:	bc3c      	pop	{r2, r3, r4, r5}
 800ce8a:	4690      	mov	r8, r2
 800ce8c:	4699      	mov	r9, r3
 800ce8e:	46a2      	mov	sl, r4
 800ce90:	46ab      	mov	fp, r5
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce94:	0801800c 	.word	0x0801800c
 800ce98:	08018030 	.word	0x08018030
 800ce9c:	20000054 	.word	0x20000054
 800cea0:	200074f0 	.word	0x200074f0
 800cea4:	200070a8 	.word	0x200070a8
 800cea8:	000032f2 	.word	0x000032f2

0800ceac <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800ceac:	2380      	movs	r3, #128	; 0x80
{
 800ceae:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800ceb0:	4d1e      	ldr	r5, [pc, #120]	; (800cf2c <RTC_Init+0x80>)
 800ceb2:	021b      	lsls	r3, r3, #8
 800ceb4:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800ceb6:	4c1e      	ldr	r4, [pc, #120]	; (800cf30 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800cebc:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800cebe:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800cec0:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800cec2:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cec4:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800cec6:	4a1c      	ldr	r2, [pc, #112]	; (800cf38 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cec8:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800ceca:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800cecc:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cece:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ced0:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ced2:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800ced4:	f004 fdd2 	bl	8011a7c <HAL_RTC_Init>
 800ced8:	0006      	movs	r6, r0
 800ceda:	20ff      	movs	r0, #255	; 0xff
 800cedc:	2e00      	cmp	r6, #0
 800cede:	d119      	bne.n	800cf14 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cee0:	2101      	movs	r1, #1
 800cee2:	0020      	movs	r0, r4
 800cee4:	f004 ff28 	bl	8011d38 <HAL_RTCEx_BKUPRead>
 800cee8:	4b14      	ldr	r3, [pc, #80]	; (800cf3c <RTC_Init+0x90>)
 800ceea:	4298      	cmp	r0, r3
 800ceec:	d113      	bne.n	800cf16 <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800ceee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cef0:	011b      	lsls	r3, r3, #4
 800cef2:	d501      	bpl.n	800cef8 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cef4:	4b12      	ldr	r3, [pc, #72]	; (800cf40 <RTC_Init+0x94>)
 800cef6:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cef8:	4b0c      	ldr	r3, [pc, #48]	; (800cf2c <RTC_Init+0x80>)
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefc:	015b      	lsls	r3, r3, #5
 800cefe:	d50c      	bpl.n	800cf1a <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800cf00:	2201      	movs	r2, #1
 800cf02:	4b0f      	ldr	r3, [pc, #60]	; (800cf40 <RTC_Init+0x94>)
	return BOS_OK;
 800cf04:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800cf06:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cf08:	2380      	movs	r3, #128	; 0x80
 800cf0a:	4a08      	ldr	r2, [pc, #32]	; (800cf2c <RTC_Init+0x80>)
 800cf0c:	045b      	lsls	r3, r3, #17
 800cf0e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cf10:	430b      	orrs	r3, r1
 800cf12:	6253      	str	r3, [r2, #36]	; 0x24
}
 800cf14:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800cf16:	f7ff ff4b 	bl	800cdb0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cf1a:	2380      	movs	r3, #128	; 0x80
 800cf1c:	4a03      	ldr	r2, [pc, #12]	; (800cf2c <RTC_Init+0x80>)
 800cf1e:	045b      	lsls	r3, r3, #17
 800cf20:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800cf22:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cf24:	430b      	orrs	r3, r1
 800cf26:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cf28:	e7f4      	b.n	800cf14 <RTC_Init+0x68>
 800cf2a:	46c0      	nop			; (mov r8, r8)
 800cf2c:	40021000 	.word	0x40021000
 800cf30:	200074f0 	.word	0x200074f0
 800cf34:	40002800 	.word	0x40002800
 800cf38:	000007cf 	.word	0x000007cf
 800cf3c:	000032f2 	.word	0x000032f2
 800cf40:	200021c0 	.word	0x200021c0

0800cf44 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf46:	46c6      	mov	lr, r8
 800cf48:	b500      	push	{lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	ac0c      	add	r4, sp, #48	; 0x30
 800cf4e:	7827      	ldrb	r7, [r4, #0]
 800cf50:	ac0d      	add	r4, sp, #52	; 0x34
 800cf52:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cf54:	3230      	adds	r2, #48	; 0x30
{
 800cf56:	46a0      	mov	r8, r4
 800cf58:	ac0e      	add	r4, sp, #56	; 0x38
 800cf5a:	7825      	ldrb	r5, [r4, #0]
 800cf5c:	ac0f      	add	r4, sp, #60	; 0x3c
 800cf5e:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800cf60:	466c      	mov	r4, sp
 800cf62:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800cf64:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800cf66:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800cf68:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cf6a:	4c20      	ldr	r4, [pc, #128]	; (800cfec <BOS_CalendarConfig+0xa8>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	4669      	mov	r1, sp
 800cf70:	0020      	movs	r0, r4
 800cf72:	f004 fe5f 	bl	8011c34 <HAL_RTC_SetDate>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d123      	bne.n	800cfc2 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800cf7a:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800cf7c:	a901      	add	r1, sp, #4
 800cf7e:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800cf80:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800cf82:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800cf84:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800cf86:	2d0c      	cmp	r5, #12
 800cf88:	d820      	bhi.n	800cfcc <BOS_CalendarConfig+0x88>
 800cf8a:	4d19      	ldr	r5, [pc, #100]	; (800cff0 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800cf8c:	2e01      	cmp	r6, #1
 800cf8e:	d022      	beq.n	800cfd6 <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800cf90:	2e02      	cmp	r6, #2
 800cf92:	d025      	beq.n	800cfe0 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800cf94:	2318      	movs	r3, #24
 800cf96:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	0020      	movs	r0, r4
 800cf9c:	f004 fdb6 	bl	8011b0c <HAL_RTC_SetTime>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d10e      	bne.n	800cfc2 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800cfa4:	7b6b      	ldrb	r3, [r5, #13]
 800cfa6:	7929      	ldrb	r1, [r5, #4]
 800cfa8:	021b      	lsls	r3, r3, #8
 800cfaa:	301b      	adds	r0, #27
 800cfac:	4319      	orrs	r1, r3
 800cfae:	30ff      	adds	r0, #255	; 0xff
 800cfb0:	f7fa fc76 	bl	80078a0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cfb4:	0020      	movs	r0, r4
 800cfb6:	4a0f      	ldr	r2, [pc, #60]	; (800cff4 <BOS_CalendarConfig+0xb0>)
 800cfb8:	2101      	movs	r1, #1
 800cfba:	f004 feb7 	bl	8011d2c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	e000      	b.n	800cfc4 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800cfc2:	20ff      	movs	r0, #255	; 0xff
}
 800cfc4:	b006      	add	sp, #24
 800cfc6:	bc04      	pop	{r2}
 800cfc8:	4690      	mov	r8, r2
 800cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800cfcc:	2318      	movs	r3, #24
 800cfce:	4d08      	ldr	r5, [pc, #32]	; (800cff0 <BOS_CalendarConfig+0xac>)
 800cfd0:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800cfd2:	2e01      	cmp	r6, #1
 800cfd4:	d1dc      	bne.n	800cf90 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cfda:	330c      	adds	r3, #12
 800cfdc:	736b      	strb	r3, [r5, #13]
 800cfde:	e7db      	b.n	800cf98 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800cfe0:	2340      	movs	r3, #64	; 0x40
 800cfe2:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cfe4:	3b34      	subs	r3, #52	; 0x34
 800cfe6:	736b      	strb	r3, [r5, #13]
 800cfe8:	e7d6      	b.n	800cf98 <BOS_CalendarConfig+0x54>
 800cfea:	46c0      	nop			; (mov r8, r8)
 800cfec:	200074f0 	.word	0x200074f0
 800cff0:	200070a8 	.word	0x200070a8
 800cff4:	000032f2 	.word	0x000032f2

0800cff8 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800cff8:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cffa:	4d16      	ldr	r5, [pc, #88]	; (800d054 <GetTimeDate+0x5c>)
{
 800cffc:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cffe:	ac01      	add	r4, sp, #4
 800d000:	0021      	movs	r1, r4
 800d002:	2200      	movs	r2, #0
 800d004:	0028      	movs	r0, r5
 800d006:	f004 fca1 	bl	801194c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d00a:	4669      	mov	r1, sp
 800d00c:	2200      	movs	r2, #0
 800d00e:	0028      	movs	r0, r5
 800d010:	f004 fccc 	bl	80119ac <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d014:	7a22      	ldrb	r2, [r4, #8]
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <GetTimeDate+0x60>)
 800d018:	09d2      	lsrs	r2, r2, #7
 800d01a:	3201      	adds	r2, #1
 800d01c:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d01e:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800d020:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d022:	0852      	lsrs	r2, r2, #1
 800d024:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d026:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d028:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800d02a:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d02c:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d02e:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800d030:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d032:	7822      	ldrb	r2, [r4, #0]
 800d034:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d036:	466a      	mov	r2, sp
 800d038:	7892      	ldrb	r2, [r2, #2]
 800d03a:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d03c:	466a      	mov	r2, sp
 800d03e:	7852      	ldrb	r2, [r2, #1]
 800d040:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d042:	466a      	mov	r2, sp
 800d044:	7812      	ldrb	r2, [r2, #0]
 800d046:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d048:	466a      	mov	r2, sp
 800d04a:	78d2      	ldrb	r2, [r2, #3]
 800d04c:	4462      	add	r2, ip
 800d04e:	831a      	strh	r2, [r3, #24]
}
 800d050:	b007      	add	sp, #28
 800d052:	bd30      	pop	{r4, r5, pc}
 800d054:	200074f0 	.word	0x200074f0
 800d058:	200070a8 	.word	0x200070a8

0800d05c <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d05c:	2080      	movs	r0, #128	; 0x80
 800d05e:	4a13      	ldr	r2, [pc, #76]	; (800d0ac <TIM_USEC_Init+0x50>)
{
 800d060:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800d062:	69d1      	ldr	r1, [r2, #28]
 800d064:	0040      	lsls	r0, r0, #1
 800d066:	4301      	orrs	r1, r0
 800d068:	61d1      	str	r1, [r2, #28]
 800d06a:	69d3      	ldr	r3, [r2, #28]
{
 800d06c:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800d06e:	4003      	ands	r3, r0
 800d070:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d072:	4c0f      	ldr	r4, [pc, #60]	; (800d0b0 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800d074:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800d076:	4b0f      	ldr	r3, [pc, #60]	; (800d0b4 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d078:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800d07a:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d07c:	f004 fbb6 	bl	80117ec <HAL_RCC_GetPCLK1Freq>
 800d080:	490d      	ldr	r1, [pc, #52]	; (800d0b8 <TIM_USEC_Init+0x5c>)
 800d082:	f7f3 f865 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800d086:	4b0d      	ldr	r3, [pc, #52]	; (800d0bc <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d088:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800d08a:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800d08c:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d08e:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800d090:	f004 ff70 	bl	8011f74 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d094:	a902      	add	r1, sp, #8
 800d096:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d098:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d09a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d09c:	f004 ff84 	bl	8011fa8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d0a0:	0020      	movs	r0, r4
 800d0a2:	f004 fe51 	bl	8011d48 <HAL_TIM_Base_Start>
}
 800d0a6:	b005      	add	sp, #20
 800d0a8:	bd30      	pop	{r4, r5, pc}
 800d0aa:	46c0      	nop			; (mov r8, r8)
 800d0ac:	40021000 	.word	0x40021000
 800d0b0:	2000754c 	.word	0x2000754c
 800d0b4:	40002000 	.word	0x40002000
 800d0b8:	000f4240 	.word	0x000f4240
 800d0bc:	0000ffff 	.word	0x0000ffff

0800d0c0 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d0c0:	2080      	movs	r0, #128	; 0x80
 800d0c2:	4a13      	ldr	r2, [pc, #76]	; (800d110 <TIM_MSEC_Init+0x50>)
{
 800d0c4:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800d0c6:	6991      	ldr	r1, [r2, #24]
 800d0c8:	0240      	lsls	r0, r0, #9
 800d0ca:	4301      	orrs	r1, r0
 800d0cc:	6191      	str	r1, [r2, #24]
 800d0ce:	6993      	ldr	r3, [r2, #24]
{
 800d0d0:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800d0d2:	4003      	ands	r3, r0
 800d0d4:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d0d6:	4c0f      	ldr	r4, [pc, #60]	; (800d114 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800d0d8:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800d0da:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0dc:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800d0de:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d0e0:	f004 fb84 	bl	80117ec <HAL_RCC_GetPCLK1Freq>
 800d0e4:	21fa      	movs	r1, #250	; 0xfa
 800d0e6:	0089      	lsls	r1, r1, #2
 800d0e8:	f7f3 f832 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800d0ec:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d0ee:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800d0f0:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800d0f2:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0f4:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800d0f6:	f004 ff3d 	bl	8011f74 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d0fa:	a902      	add	r1, sp, #8
 800d0fc:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0fe:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d100:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d102:	f004 ff51 	bl	8011fa8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d106:	0020      	movs	r0, r4
 800d108:	f004 fe1e 	bl	8011d48 <HAL_TIM_Base_Start>
}
 800d10c:	b005      	add	sp, #20
 800d10e:	bd30      	pop	{r4, r5, pc}
 800d110:	40021000 	.word	0x40021000
 800d114:	20007510 	.word	0x20007510
 800d118:	40014000 	.word	0x40014000
 800d11c:	0000ffff 	.word	0x0000ffff

0800d120 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d120:	b510      	push	{r4, lr}
 800d122:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d124:	f002 f952 	bl	800f3cc <vPortEnterCritical>
	
	if (Delay)
 800d128:	2c00      	cmp	r4, #0
 800d12a:	d006      	beq.n	800d13a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d12c:	4b04      	ldr	r3, [pc, #16]	; (800d140 <StartMicroDelay+0x20>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d132:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d134:	1a5b      	subs	r3, r3, r1
 800d136:	42a3      	cmp	r3, r4
 800d138:	d9fb      	bls.n	800d132 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d13a:	f002 f953 	bl	800f3e4 <vPortExitCritical>
}
 800d13e:	bd10      	pop	{r4, pc}
 800d140:	2000754c 	.word	0x2000754c

0800d144 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d144:	b510      	push	{r4, lr}
 800d146:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d148:	f002 f940 	bl	800f3cc <vPortEnterCritical>
	
	if (Delay)
 800d14c:	2c00      	cmp	r4, #0
 800d14e:	d006      	beq.n	800d15e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d150:	4b04      	ldr	r3, [pc, #16]	; (800d164 <StartMilliDelay+0x20>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d156:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d158:	1a5b      	subs	r3, r3, r1
 800d15a:	42a3      	cmp	r3, r4
 800d15c:	d9fb      	bls.n	800d156 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d15e:	f002 f941 	bl	800f3e4 <vPortExitCritical>
}
 800d162:	bd10      	pop	{r4, pc}
 800d164:	20007510 	.word	0x20007510

0800d168 <MB_PORT_Init>:
	 uint16_t arrayPortsDir[__N];
#endif 

/* MB Port Initialization */
Module_Status MB_PORT_Init(uint32_t BAUD_RATE, uint32_t DataBitsN, uint32_t PARITY_BIT, uint32_t STOP_BIT)   
{
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	0004      	movs	r4, r0
  huart1.Instance = USART1;
 800d16c:	480a      	ldr	r0, [pc, #40]	; (800d198 <MB_PORT_Init+0x30>)
 800d16e:	4d0b      	ldr	r5, [pc, #44]	; (800d19c <MB_PORT_Init+0x34>)
  huart1.Init.BaudRate = BAUD_RATE;
  huart1.Init.WordLength = DataBitsN;
  huart1.Init.StopBits = STOP_BIT;
 800d170:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = PARITY_BIT;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d172:	230c      	movs	r3, #12
 800d174:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d176:	2300      	movs	r3, #0
 800d178:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d17a:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d17c:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d17e:	3310      	adds	r3, #16
 800d180:	6243      	str	r3, [r0, #36]	; 0x24
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d182:	2380      	movs	r3, #128	; 0x80
 800d184:	015b      	lsls	r3, r3, #5
  huart1.Instance = USART1;
 800d186:	6005      	str	r5, [r0, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 800d188:	6044      	str	r4, [r0, #4]
  huart1.Init.WordLength = DataBitsN;
 800d18a:	6081      	str	r1, [r0, #8]
  huart1.Init.Parity = PARITY_BIT;
 800d18c:	6102      	str	r2, [r0, #16]
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d18e:	6383      	str	r3, [r0, #56]	; 0x38
	
	HAL_UART_Init(&huart1);
 800d190:	f005 fafe 	bl	8012790 <HAL_UART_Init>
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
return H1DR1_OK;
}
 800d194:	2000      	movs	r0, #0
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	200072c0 	.word	0x200072c0
 800d19c:	40013800 	.word	0x40013800

0800d1a0 <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
	MB_PORT_Init(9600, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800d1a0:	2096      	movs	r0, #150	; 0x96
{
 800d1a2:	b510      	push	{r4, lr}
	MB_PORT_Init(9600, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	0180      	lsls	r0, r0, #6
 800d1ac:	f7ff ffdc 	bl	800d168 <MB_PORT_Init>
}
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	46c0      	nop			; (mov r8, r8)

0800d1b4 <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800d1b4:	4809      	ldr	r0, [pc, #36]	; (800d1dc <MX_USART2_UART_Init+0x28>)
 800d1b6:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <MX_USART2_UART_Init+0x2c>)
{
 800d1b8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d1ba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d1bc:	23e1      	movs	r3, #225	; 0xe1
 800d1be:	031b      	lsls	r3, r3, #12
 800d1c0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d1c2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d1c4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d1c6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d1c8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d1ca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d1cc:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1d0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d1d2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d1d4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d1d6:	f005 fadb 	bl	8012790 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800d1da:	bd10      	pop	{r4, pc}
 800d1dc:	20007420 	.word	0x20007420
 800d1e0:	40004400 	.word	0x40004400

0800d1e4 <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800d1e4:	4809      	ldr	r0, [pc, #36]	; (800d20c <MX_USART3_UART_Init+0x28>)
 800d1e6:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <MX_USART3_UART_Init+0x2c>)
{
 800d1e8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d1ea:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d1ec:	23e1      	movs	r3, #225	; 0xe1
 800d1ee:	031b      	lsls	r3, r3, #12
 800d1f0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d1f2:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d1f4:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d1f6:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d1f8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d1fa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d1fc:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1fe:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d200:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d202:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d204:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d206:	f005 fac3 	bl	8012790 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d20a:	bd10      	pop	{r4, pc}
 800d20c:	200071dc 	.word	0x200071dc
 800d210:	40004800 	.word	0x40004800

0800d214 <MX_USART4_UART_Init>:

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
  huart4.Instance = USART4;
 800d214:	4809      	ldr	r0, [pc, #36]	; (800d23c <MX_USART4_UART_Init+0x28>)
 800d216:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <MX_USART4_UART_Init+0x2c>)
{
 800d218:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d21a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d21c:	23e1      	movs	r3, #225	; 0xe1
 800d21e:	031b      	lsls	r3, r3, #12
 800d220:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d222:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d224:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d226:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d228:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d22a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d22c:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d22e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d230:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d232:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d234:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d236:	f005 faab 	bl	8012790 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d23a:	bd10      	pop	{r4, pc}
 800d23c:	200073ac 	.word	0x200073ac
 800d240:	40004c00 	.word	0x40004c00

0800d244 <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800d244:	4809      	ldr	r0, [pc, #36]	; (800d26c <MX_USART5_UART_Init+0x28>)
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <MX_USART5_UART_Init+0x2c>)
{
 800d248:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d24a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d24c:	23e1      	movs	r3, #225	; 0xe1
 800d24e:	031b      	lsls	r3, r3, #12
 800d250:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d252:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d254:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d256:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d258:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d25a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d25c:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d25e:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d260:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d262:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d264:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d266:	f005 fa93 	bl	8012790 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d26a:	bd10      	pop	{r4, pc}
 800d26c:	20007250 	.word	0x20007250
 800d270:	40005000 	.word	0x40005000

0800d274 <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800d274:	4809      	ldr	r0, [pc, #36]	; (800d29c <MX_USART6_UART_Init+0x28>)
 800d276:	4b0a      	ldr	r3, [pc, #40]	; (800d2a0 <MX_USART6_UART_Init+0x2c>)
{
 800d278:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d27a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d27c:	23e1      	movs	r3, #225	; 0xe1
 800d27e:	031b      	lsls	r3, r3, #12
 800d280:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d282:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d284:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d286:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d288:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d28a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d28c:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d28e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d290:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d292:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d294:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d296:	f005 fa7b 	bl	8012790 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d29a:	bd10      	pop	{r4, pc}
 800d29c:	2000733c 	.word	0x2000733c
 800d2a0:	40011400 	.word	0x40011400

0800d2a4 <HAL_UART_MspInit>:
#endif


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a6:	46c6      	mov	lr, r8
 800d2a8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d2aa:	6803      	ldr	r3, [r0, #0]
 800d2ac:	4a7d      	ldr	r2, [pc, #500]	; (800d4a4 <HAL_UART_MspInit+0x200>)
{
 800d2ae:	b08c      	sub	sp, #48	; 0x30
  if(huart->Instance==USART1)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d040      	beq.n	800d336 <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d2b4:	4a7c      	ldr	r2, [pc, #496]	; (800d4a8 <HAL_UART_MspInit+0x204>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d06b      	beq.n	800d392 <HAL_UART_MspInit+0xee>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d2ba:	4a7c      	ldr	r2, [pc, #496]	; (800d4ac <HAL_UART_MspInit+0x208>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d100      	bne.n	800d2c2 <HAL_UART_MspInit+0x1e>
 800d2c0:	e093      	b.n	800d3ea <HAL_UART_MspInit+0x146>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d2c2:	4a7b      	ldr	r2, [pc, #492]	; (800d4b0 <HAL_UART_MspInit+0x20c>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d100      	bne.n	800d2ca <HAL_UART_MspInit+0x26>
 800d2c8:	e0ab      	b.n	800d422 <HAL_UART_MspInit+0x17e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d2ca:	4a7a      	ldr	r2, [pc, #488]	; (800d4b4 <HAL_UART_MspInit+0x210>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d007      	beq.n	800d2e0 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d2d0:	4a79      	ldr	r2, [pc, #484]	; (800d4b8 <HAL_UART_MspInit+0x214>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d100      	bne.n	800d2d8 <HAL_UART_MspInit+0x34>
 800d2d6:	e0c5      	b.n	800d464 <HAL_UART_MspInit+0x1c0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d2d8:	b00c      	add	sp, #48	; 0x30
 800d2da:	bc04      	pop	{r2}
 800d2dc:	4690      	mov	r8, r2
 800d2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART5_CLK_ENABLE();
 800d2e0:	2080      	movs	r0, #128	; 0x80
 800d2e2:	4a76      	ldr	r2, [pc, #472]	; (800d4bc <HAL_UART_MspInit+0x218>)
 800d2e4:	0340      	lsls	r0, r0, #13
 800d2e6:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e8:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d2ea:	4301      	orrs	r1, r0
 800d2ec:	61d1      	str	r1, [r2, #28]
 800d2ee:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2f0:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d2f2:	4003      	ands	r3, r0
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2f8:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d2fa:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d2fc:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d2fe:	a907      	add	r1, sp, #28
 800d300:	486f      	ldr	r0, [pc, #444]	; (800d4c0 <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d302:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d304:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d306:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d308:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d30a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d30c:	f003 fca4 	bl	8010c58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART5_RX_PIN;
 800d310:	2310      	movs	r3, #16
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d312:	486b      	ldr	r0, [pc, #428]	; (800d4c0 <HAL_UART_MspInit+0x21c>)
	GPIO_InitStruct.Pin = USART5_RX_PIN;
 800d314:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d316:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d318:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d31a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d31c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d31e:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d320:	f003 fc9a 	bl	8010c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d324:	2200      	movs	r2, #0
 800d326:	2101      	movs	r1, #1
 800d328:	201d      	movs	r0, #29
 800d32a:	f002 fcab 	bl	800fc84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d32e:	201d      	movs	r0, #29
 800d330:	f002 fcd4 	bl	800fcdc <HAL_NVIC_EnableIRQ>
}
 800d334:	e7d0      	b.n	800d2d8 <HAL_UART_MspInit+0x34>
    __USART1_CLK_ENABLE();
 800d336:	2080      	movs	r0, #128	; 0x80
 800d338:	4a60      	ldr	r2, [pc, #384]	; (800d4bc <HAL_UART_MspInit+0x218>)
 800d33a:	01c0      	lsls	r0, r0, #7
 800d33c:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d33e:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d340:	4301      	orrs	r1, r0
 800d342:	6191      	str	r1, [r2, #24]
 800d344:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d346:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d348:	4003      	ands	r3, r0
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d34e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d350:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d352:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d354:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d356:	a907      	add	r1, sp, #28
 800d358:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d35a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d35c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d35e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d360:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d362:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d364:	f003 fc78 	bl	8010c58 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d368:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d36a:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d36c:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d36e:	a907      	add	r1, sp, #28
 800d370:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d372:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d374:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d376:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d378:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d37a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d37c:	f003 fc6c 	bl	8010c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d380:	2200      	movs	r2, #0
 800d382:	2101      	movs	r1, #1
 800d384:	201b      	movs	r0, #27
 800d386:	f002 fc7d 	bl	800fc84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d38a:	201b      	movs	r0, #27
 800d38c:	f002 fca6 	bl	800fcdc <HAL_NVIC_EnableIRQ>
 800d390:	e7a2      	b.n	800d2d8 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d392:	2080      	movs	r0, #128	; 0x80
 800d394:	4a49      	ldr	r2, [pc, #292]	; (800d4bc <HAL_UART_MspInit+0x218>)
 800d396:	0280      	lsls	r0, r0, #10
 800d398:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d39a:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d39c:	4301      	orrs	r1, r0
 800d39e:	61d1      	str	r1, [r2, #28]
 800d3a0:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3a2:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d3a4:	4003      	ands	r3, r0
 800d3a6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d3a8:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800d3aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3ac:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d3ae:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d3b0:	a907      	add	r1, sp, #28
 800d3b2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d3b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3b6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3b8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3ba:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d3bc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d3be:	f003 fc4b 	bl	8010c58 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d3c2:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d3c4:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d3c6:	a907      	add	r1, sp, #28
 800d3c8:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d3ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3cc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3ce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3d0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d3d2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d3d4:	f003 fc40 	bl	8010c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2101      	movs	r1, #1
 800d3dc:	201c      	movs	r0, #28
 800d3de:	f002 fc51 	bl	800fc84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d3e2:	201c      	movs	r0, #28
 800d3e4:	f002 fc7a 	bl	800fcdc <HAL_NVIC_EnableIRQ>
 800d3e8:	e776      	b.n	800d2d8 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d3ea:	2080      	movs	r0, #128	; 0x80
 800d3ec:	4a33      	ldr	r2, [pc, #204]	; (800d4bc <HAL_UART_MspInit+0x218>)
 800d3ee:	02c0      	lsls	r0, r0, #11
 800d3f0:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3f2:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d3f4:	4301      	orrs	r1, r0
 800d3f6:	61d1      	str	r1, [r2, #28]
 800d3f8:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3fa:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d3fc:	4003      	ands	r3, r0
 800d3fe:	9303      	str	r3, [sp, #12]
 800d400:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d402:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d404:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d406:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d408:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d40a:	a907      	add	r1, sp, #28
 800d40c:	482c      	ldr	r0, [pc, #176]	; (800d4c0 <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d40e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d410:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d412:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d414:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d416:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d418:	f003 fc1e 	bl	8010c58 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d41c:	2380      	movs	r3, #128	; 0x80
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	e777      	b.n	800d312 <HAL_UART_MspInit+0x6e>
    __USART4_CLK_ENABLE();
 800d422:	2080      	movs	r0, #128	; 0x80
 800d424:	4a25      	ldr	r2, [pc, #148]	; (800d4bc <HAL_UART_MspInit+0x218>)
 800d426:	0300      	lsls	r0, r0, #12
 800d428:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d42a:	2401      	movs	r4, #1
    __USART4_CLK_ENABLE();
 800d42c:	4301      	orrs	r1, r0
 800d42e:	61d1      	str	r1, [r2, #28]
 800d430:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d432:	2502      	movs	r5, #2
    __USART4_CLK_ENABLE();
 800d434:	4003      	ands	r3, r0
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d436:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d438:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d43a:	2604      	movs	r6, #4
    __USART4_CLK_ENABLE();
 800d43c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d43e:	a907      	add	r1, sp, #28
 800d440:	05c0      	lsls	r0, r0, #23
    __USART4_CLK_ENABLE();
 800d442:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d444:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d446:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d448:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d44a:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d44c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d44e:	f003 fc03 	bl	8010c58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART4_RX_PIN;
 800d452:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d454:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d456:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d458:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d45a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d45c:	2090      	movs	r0, #144	; 0x90
 800d45e:	a907      	add	r1, sp, #28
 800d460:	05c0      	lsls	r0, r0, #23
 800d462:	e75d      	b.n	800d320 <HAL_UART_MspInit+0x7c>
    __USART6_CLK_ENABLE();
 800d464:	2420      	movs	r4, #32
 800d466:	4b15      	ldr	r3, [pc, #84]	; (800d4bc <HAL_UART_MspInit+0x218>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d468:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d46a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d46c:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d46e:	4322      	orrs	r2, r4
 800d470:	619a      	str	r2, [r3, #24]
 800d472:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d474:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d476:	4023      	ands	r3, r4
 800d478:	9306      	str	r3, [sp, #24]
 800d47a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d47c:	2310      	movs	r3, #16
 800d47e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d480:	3b0e      	subs	r3, #14
 800d482:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d484:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d486:	a907      	add	r1, sp, #28
 800d488:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d48a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d48c:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d48e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d490:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d492:	f003 fbe1 	bl	8010c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d496:	4643      	mov	r3, r8
	GPIO_InitStruct.Pin = USART6_RX_PIN;
 800d498:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d49a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d49c:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d49e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d4a0:	950b      	str	r5, [sp, #44]	; 0x2c
 800d4a2:	e7db      	b.n	800d45c <HAL_UART_MspInit+0x1b8>
 800d4a4:	40013800 	.word	0x40013800
 800d4a8:	40004400 	.word	0x40004400
 800d4ac:	40004800 	.word	0x40004800
 800d4b0:	40004c00 	.word	0x40004c00
 800d4b4:	40005000 	.word	0x40005000
 800d4b8:	40011400 	.word	0x40011400
 800d4bc:	40021000 	.word	0x40021000
 800d4c0:	48000400 	.word	0x48000400

0800d4c4 <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	4647      	mov	r7, r8
 800d4c8:	46ce      	mov	lr, r9
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	0017      	movs	r7, r2
 800d4ce:	1e42      	subs	r2, r0, #1
 800d4d0:	b2d2      	uxtb	r2, r2
 800d4d2:	000e      	movs	r6, r1
 800d4d4:	2a05      	cmp	r2, #5
 800d4d6:	d80e      	bhi.n	800d4f6 <writePxMutex+0x32>
 800d4d8:	4911      	ldr	r1, [pc, #68]	; (800d520 <writePxMutex+0x5c>)
 800d4da:	0092      	lsls	r2, r2, #2
 800d4dc:	5852      	ldr	r2, [r2, r1]
 800d4de:	4690      	mov	r8, r2
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800d4e0:	2a00      	cmp	r2, #0
 800d4e2:	d008      	beq.n	800d4f6 <writePxMutex+0x32>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d4e4:	4a0f      	ldr	r2, [pc, #60]	; (800d524 <writePxMutex+0x60>)
 800d4e6:	0085      	lsls	r5, r0, #2
 800d4e8:	0019      	movs	r1, r3
 800d4ea:	5950      	ldr	r0, [r2, r5]
 800d4ec:	4691      	mov	r9, r2
 800d4ee:	f000 f977 	bl	800d7e0 <osSemaphoreWait>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d007      	beq.n	800d506 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d4f6:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800d4f8:	0020      	movs	r0, r4
 800d4fa:	bc0c      	pop	{r2, r3}
 800d4fc:	4690      	mov	r8, r2
 800d4fe:	4699      	mov	r9, r3
 800d500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d502:	2803      	cmp	r0, #3
 800d504:	d007      	beq.n	800d516 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d506:	9b08      	ldr	r3, [sp, #32]
 800d508:	003a      	movs	r2, r7
 800d50a:	0031      	movs	r1, r6
 800d50c:	4640      	mov	r0, r8
 800d50e:	f005 f89d 	bl	801264c <HAL_UART_Transmit>
 800d512:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d514:	d1f5      	bne.n	800d502 <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d516:	464b      	mov	r3, r9
 800d518:	5958      	ldr	r0, [r3, r5]
 800d51a:	f000 f98b 	bl	800d834 <osSemaphoreRelease>
 800d51e:	e7eb      	b.n	800d4f8 <writePxMutex+0x34>
 800d520:	08017de4 	.word	0x08017de4
 800d524:	2000712c 	.word	0x2000712c

0800d528 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	0015      	movs	r5, r2
 800d52c:	1e42      	subs	r2, r0, #1
 800d52e:	b2d2      	uxtb	r2, r2
 800d530:	000c      	movs	r4, r1
 800d532:	2a05      	cmp	r2, #5
 800d534:	d80c      	bhi.n	800d550 <writePxITMutex+0x28>
 800d536:	490a      	ldr	r1, [pc, #40]	; (800d560 <writePxITMutex+0x38>)
 800d538:	0092      	lsls	r2, r2, #2
 800d53a:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800d53c:	2e00      	cmp	r6, #0
 800d53e:	d007      	beq.n	800d550 <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d540:	4a08      	ldr	r2, [pc, #32]	; (800d564 <writePxITMutex+0x3c>)
 800d542:	0080      	lsls	r0, r0, #2
 800d544:	5880      	ldr	r0, [r0, r2]
 800d546:	0019      	movs	r1, r3
 800d548:	f000 f94a 	bl	800d7e0 <osSemaphoreWait>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d001      	beq.n	800d554 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d550:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d552:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d554:	002a      	movs	r2, r5
 800d556:	0021      	movs	r1, r4
 800d558:	0030      	movs	r0, r6
 800d55a:	f004 fd67 	bl	801202c <HAL_UART_Transmit_IT>
 800d55e:	e7f8      	b.n	800d552 <writePxITMutex+0x2a>
 800d560:	08017de4 	.word	0x08017de4
 800d564:	2000712c 	.word	0x2000712c

0800d568 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	0015      	movs	r5, r2
 800d56c:	1e42      	subs	r2, r0, #1
 800d56e:	b2d2      	uxtb	r2, r2
 800d570:	000c      	movs	r4, r1
 800d572:	2a05      	cmp	r2, #5
 800d574:	d80c      	bhi.n	800d590 <writePxDMAMutex+0x28>
 800d576:	490c      	ldr	r1, [pc, #48]	; (800d5a8 <writePxDMAMutex+0x40>)
 800d578:	0092      	lsls	r2, r2, #2
 800d57a:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);

	if (hUart != NULL) {	
 800d57c:	2e00      	cmp	r6, #0
 800d57e:	d007      	beq.n	800d590 <writePxDMAMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d580:	4a0a      	ldr	r2, [pc, #40]	; (800d5ac <writePxDMAMutex+0x44>)
 800d582:	0080      	lsls	r0, r0, #2
 800d584:	5880      	ldr	r0, [r0, r2]
 800d586:	0019      	movs	r1, r3
 800d588:	f000 f92a 	bl	800d7e0 <osSemaphoreWait>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d001      	beq.n	800d594 <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d590:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d592:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800d594:	0030      	movs	r0, r6
 800d596:	f7ff f94f 	bl	800c838 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d59a:	002a      	movs	r2, r5
 800d59c:	0021      	movs	r1, r4
 800d59e:	0030      	movs	r0, r6
 800d5a0:	f004 fdd6 	bl	8012150 <HAL_UART_Transmit_DMA>
 800d5a4:	e7f5      	b.n	800d592 <writePxDMAMutex+0x2a>
 800d5a6:	46c0      	nop			; (mov r8, r8)
 800d5a8:	08017de4 	.word	0x08017de4
 800d5ac:	2000712c 	.word	0x2000712c

0800d5b0 <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800d5b0:	3801      	subs	r0, #1
 800d5b2:	b2c0      	uxtb	r0, r0
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	2805      	cmp	r0, #5
 800d5b8:	d807      	bhi.n	800d5ca <UpdateBaudrate+0x1a>
 800d5ba:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <UpdateBaudrate+0x20>)
 800d5bc:	0080      	lsls	r0, r0, #2
 800d5be:	58c0      	ldr	r0, [r0, r3]
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);

	huart->Init.BaudRate = baudrate;
 800d5c0:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d5c2:	f005 f8e5 	bl	8012790 <HAL_UART_Init>
	
	return result;
}
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	605b      	str	r3, [r3, #4]
 800d5ce:	deff      	udf	#255	; 0xff
 800d5d0:	08017de4 	.word	0x08017de4

0800d5d4 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800d5d4:	3801      	subs	r0, #1
 800d5d6:	b2c3      	uxtb	r3, r0
 800d5d8:	2000      	movs	r0, #0
 800d5da:	2b05      	cmp	r3, #5
 800d5dc:	d802      	bhi.n	800d5e4 <GetUart+0x10>
 800d5de:	4a02      	ldr	r2, [pc, #8]	; (800d5e8 <GetUart+0x14>)
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800d5e4:	4770      	bx	lr
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	08017de4 	.word	0x08017de4

0800d5ec <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	0004      	movs	r4, r0
 800d5f0:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d003      	beq.n	800d5fe <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d5f6:	2901      	cmp	r1, #1
 800d5f8:	d017      	beq.n	800d62a <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d5fa:	2900      	cmp	r1, #0
 800d5fc:	d000      	beq.n	800d600 <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d600:	f7fe f87e 	bl	800b700 <GetPort>
 800d604:	2180      	movs	r1, #128	; 0x80
 800d606:	3801      	subs	r0, #1
 800d608:	0209      	lsls	r1, r1, #8
 800d60a:	4101      	asrs	r1, r0
 800d60c:	4b12      	ldr	r3, [pc, #72]	; (800d658 <SwapUartPins+0x6c>)
 800d60e:	4e13      	ldr	r6, [pc, #76]	; (800d65c <SwapUartPins+0x70>)
 800d610:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d612:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d614:	3b01      	subs	r3, #1
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800d61a:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d61c:	438a      	bics	r2, r1
 800d61e:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d620:	2308      	movs	r3, #8
 800d622:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d624:	f005 f8b4 	bl	8012790 <HAL_UART_Init>
}
 800d628:	e7e9      	b.n	800d5fe <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d62a:	f7fe f869 	bl	800b700 <GetPort>
 800d62e:	2180      	movs	r1, #128	; 0x80
 800d630:	0209      	lsls	r1, r1, #8
 800d632:	000a      	movs	r2, r1
 800d634:	3801      	subs	r0, #1
 800d636:	4102      	asrs	r2, r0
 800d638:	4b07      	ldr	r3, [pc, #28]	; (800d658 <SwapUartPins+0x6c>)
 800d63a:	4d08      	ldr	r5, [pc, #32]	; (800d65c <SwapUartPins+0x70>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d63e:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d640:	3b01      	subs	r3, #1
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	5b58      	ldrh	r0, [r3, r5]
 800d646:	4302      	orrs	r2, r0
 800d648:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d64a:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d64c:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d64e:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d650:	f005 f89e 	bl	8012790 <HAL_UART_Init>
 800d654:	e7d3      	b.n	800d5fe <SwapUartPins+0x12>
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	20000a98 	.word	0x20000a98
 800d65c:	20007588 	.word	0x20007588

0800d660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d660:	4816      	ldr	r0, [pc, #88]	; (800d6bc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d662:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d664:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d666:	e003      	b.n	800d670 <LoopCopyDataInit>

0800d668 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d668:	4b15      	ldr	r3, [pc, #84]	; (800d6c0 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d66a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d66c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d66e:	3104      	adds	r1, #4

0800d670 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d670:	4814      	ldr	r0, [pc, #80]	; (800d6c4 <LoopForever+0xc>)
  ldr r3, =_edata
 800d672:	4b15      	ldr	r3, [pc, #84]	; (800d6c8 <LoopForever+0x10>)
  adds r2, r0, r1
 800d674:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d676:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d678:	d3f6      	bcc.n	800d668 <CopyDataInit>
  ldr r2, =_sbss
 800d67a:	4a14      	ldr	r2, [pc, #80]	; (800d6cc <LoopForever+0x14>)
  b LoopFillZerobss
 800d67c:	e002      	b.n	800d684 <LoopFillZerobss>

0800d67e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d67e:	2300      	movs	r3, #0
  str  r3, [r2]
 800d680:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d682:	3204      	adds	r2, #4

0800d684 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d684:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <LoopForever+0x18>)
  cmp r2, r3
 800d686:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d688:	d3f9      	bcc.n	800d67e <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d68a:	4812      	ldr	r0, [pc, #72]	; (800d6d4 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d68c:	4912      	ldr	r1, [pc, #72]	; (800d6d8 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d68e:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d690:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d692:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d694:	d005      	beq.n	800d6a2 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d696:	f000 f82b 	bl	800d6f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d69a:	f005 fa11 	bl	8012ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d69e:	f005 f9c1 	bl	8012a24 <main>

0800d6a2 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d6a2:	480e      	ldr	r0, [pc, #56]	; (800d6dc <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d6a4:	490e      	ldr	r1, [pc, #56]	; (800d6e0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d6a6:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d6a8:	480e      	ldr	r0, [pc, #56]	; (800d6e4 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d6aa:	490d      	ldr	r1, [pc, #52]	; (800d6e0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d6ac:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d6ae:	480e      	ldr	r0, [pc, #56]	; (800d6e8 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d6b0:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d6b2:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d6b4:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d6b6:	4700      	bx	r0

0800d6b8 <LoopForever>:


LoopForever:
    b LoopForever
 800d6b8:	e7fe      	b.n	800d6b8 <LoopForever>
 800d6ba:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d6bc:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d6c0:	0801a940 	.word	0x0801a940
  ldr r0, =_sdata
 800d6c4:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800d6c8:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800d6cc:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800d6d0:	20007630 	.word	0x20007630
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d6d4:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d6d8:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d6dc:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d6e0:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d6e4:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d6e8:	1fffd800 	.word	0x1fffd800

0800d6ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d6ec:	e7fe      	b.n	800d6ec <ADC1_COMP_IRQHandler>
	...

0800d6f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	4b11      	ldr	r3, [pc, #68]	; (800d738 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d6f4:	4811      	ldr	r0, [pc, #68]	; (800d73c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	430a      	orrs	r2, r1
 800d6fa:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	4002      	ands	r2, r0
 800d700:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	480e      	ldr	r0, [pc, #56]	; (800d740 <SystemInit+0x50>)
 800d706:	4002      	ands	r2, r0
 800d708:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	480d      	ldr	r0, [pc, #52]	; (800d744 <SystemInit+0x54>)
 800d70e:	4002      	ands	r2, r0
 800d710:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	480c      	ldr	r0, [pc, #48]	; (800d748 <SystemInit+0x58>)
 800d716:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d718:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d71a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71e:	4382      	bics	r2, r0
 800d720:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d724:	4809      	ldr	r0, [pc, #36]	; (800d74c <SystemInit+0x5c>)
 800d726:	4002      	ands	r2, r0
 800d728:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d72c:	438a      	bics	r2, r1
 800d72e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d730:	2200      	movs	r2, #0
 800d732:	609a      	str	r2, [r3, #8]

}
 800d734:	4770      	bx	lr
 800d736:	46c0      	nop			; (mov r8, r8)
 800d738:	40021000 	.word	0x40021000
 800d73c:	08ffb80c 	.word	0x08ffb80c
 800d740:	fef6ffff 	.word	0xfef6ffff
 800d744:	fffbffff 	.word	0xfffbffff
 800d748:	ffc0ffff 	.word	0xffc0ffff
 800d74c:	fff0feac 	.word	0xfff0feac

0800d750 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d750:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d752:	f000 ff81 	bl	800e658 <vTaskStartScheduler>
  
  return osOK;
}
 800d756:	2000      	movs	r0, #0
 800d758:	bd10      	pop	{r4, pc}
 800d75a:	46c0      	nop			; (mov r8, r8)

0800d75c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d75c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d75e:	2800      	cmp	r0, #0
 800d760:	d100      	bne.n	800d764 <osDelay+0x8>
 800d762:	3001      	adds	r0, #1
 800d764:	f001 f89e 	bl	800e8a4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d768:	2000      	movs	r0, #0
 800d76a:	bd10      	pop	{r4, pc}

0800d76c <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d76c:	2300      	movs	r3, #0
{
 800d76e:	b500      	push	{lr}
 800d770:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d772:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d774:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d77c:	a901      	add	r1, sp, #4
 800d77e:	f000 fbdd 	bl	800df3c <xQueueGiveFromISR>
 800d782:	2801      	cmp	r0, #1
 800d784:	d10c      	bne.n	800d7a0 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d786:	9b01      	ldr	r3, [sp, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10b      	bne.n	800d7a4 <osMutexRelease+0x38>
  osStatus result = osOK;
 800d78c:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d78e:	b003      	add	sp, #12
 800d790:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d792:	2300      	movs	r3, #0
 800d794:	2200      	movs	r2, #0
 800d796:	2100      	movs	r1, #0
 800d798:	f000 faec 	bl	800dd74 <xQueueGenericSend>
 800d79c:	2801      	cmp	r0, #1
 800d79e:	d0f5      	beq.n	800d78c <osMutexRelease+0x20>
    result = osErrorOS;
 800d7a0:	20ff      	movs	r0, #255	; 0xff
 800d7a2:	e7f4      	b.n	800d78e <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d7a4:	2280      	movs	r2, #128	; 0x80
 800d7a6:	4b02      	ldr	r3, [pc, #8]	; (800d7b0 <osMutexRelease+0x44>)
 800d7a8:	0552      	lsls	r2, r2, #21
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	e7ee      	b.n	800d78c <osMutexRelease+0x20>
 800d7ae:	46c0      	nop			; (mov r8, r8)
 800d7b0:	e000ed04 	.word	0xe000ed04

0800d7b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d7b8:	2901      	cmp	r1, #1
 800d7ba:	d005      	beq.n	800d7c8 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d7bc:	2100      	movs	r1, #0
 800d7be:	f000 fac5 	bl	800dd4c <xQueueCreateCountingSemaphore>
 800d7c2:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d7c4:	0020      	movs	r0, r4
 800d7c6:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d7c8:	2203      	movs	r2, #3
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	f000 fa96 	bl	800dcfc <xQueueGenericCreate>
 800d7d0:	1e04      	subs	r4, r0, #0
 800d7d2:	d0f7      	beq.n	800d7c4 <osSemaphoreCreate+0x10>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2100      	movs	r1, #0
 800d7da:	f000 facb 	bl	800dd74 <xQueueGenericSend>
 800d7de:	e7f1      	b.n	800d7c4 <osSemaphoreCreate+0x10>

0800d7e0 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d7e0:	2300      	movs	r3, #0
{
 800d7e2:	b500      	push	{lr}
 800d7e4:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d7e6:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d01e      	beq.n	800d82a <osSemaphoreWait+0x4a>
 800d7ec:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00b      	beq.n	800d80c <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d7f4:	aa01      	add	r2, sp, #4
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	f000 fc8e 	bl	800e118 <xQueueReceiveFromISR>
 800d7fc:	2801      	cmp	r0, #1
 800d7fe:	d10c      	bne.n	800d81a <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d806:	2000      	movs	r0, #0
}
 800d808:	b003      	add	sp, #12
 800d80a:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d80c:	000a      	movs	r2, r1
 800d80e:	2300      	movs	r3, #0
 800d810:	2100      	movs	r1, #0
 800d812:	f000 fbcd 	bl	800dfb0 <xQueueGenericReceive>
 800d816:	2801      	cmp	r0, #1
 800d818:	d0f5      	beq.n	800d806 <osSemaphoreWait+0x26>
      return osErrorOS;
 800d81a:	20ff      	movs	r0, #255	; 0xff
 800d81c:	e7f4      	b.n	800d808 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d81e:	2280      	movs	r2, #128	; 0x80
 800d820:	4b03      	ldr	r3, [pc, #12]	; (800d830 <osSemaphoreWait+0x50>)
 800d822:	0552      	lsls	r2, r2, #21
 800d824:	601a      	str	r2, [r3, #0]
  return osOK;
 800d826:	2000      	movs	r0, #0
 800d828:	e7ee      	b.n	800d808 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d82a:	2080      	movs	r0, #128	; 0x80
 800d82c:	e7ec      	b.n	800d808 <osSemaphoreWait+0x28>
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <osSemaphoreRelease>:
 800d834:	b510      	push	{r4, lr}
 800d836:	f7ff ff99 	bl	800d76c <osMutexRelease>
 800d83a:	bd10      	pop	{r4, pc}

0800d83c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d83c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d83e:	f001 f9bf 	bl	800ebc0 <xTaskGetSchedulerState>
 800d842:	2801      	cmp	r0, #1
 800d844:	d001      	beq.n	800d84a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d846:	f001 fe07 	bl	800f458 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d84a:	bd10      	pop	{r4, pc}

0800d84c <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d850:	d013      	beq.n	800d87a <FreeRTOS_CLIRegisterCommand+0x2e>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d852:	2008      	movs	r0, #8
 800d854:	f001 fe38 	bl	800f4c8 <pvPortMalloc>
 800d858:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d85a:	d101      	bne.n	800d860 <FreeRTOS_CLIRegisterCommand+0x14>
 800d85c:	b672      	cpsid	i
 800d85e:	e7fe      	b.n	800d85e <FreeRTOS_CLIRegisterCommand+0x12>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d860:	f001 fdb4 	bl	800f3cc <vPortEnterCritical>
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d864:	2300      	movs	r3, #0
 800d866:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <FreeRTOS_CLIRegisterCommand+0x34>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d86a:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d870:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d872:	f001 fdb7 	bl	800f3e4 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d876:	2001      	movs	r0, #1
 800d878:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800d87a:	b672      	cpsid	i
 800d87c:	e7fe      	b.n	800d87c <FreeRTOS_CLIRegisterCommand+0x30>
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	200000b4 	.word	0x200000b4

0800d884 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d886:	4657      	mov	r7, sl
 800d888:	46de      	mov	lr, fp
 800d88a:	464e      	mov	r6, r9
 800d88c:	4645      	mov	r5, r8
 800d88e:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d890:	4f34      	ldr	r7, [pc, #208]	; (800d964 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d892:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d894:	683b      	ldr	r3, [r7, #0]
{
 800d896:	468a      	mov	sl, r1
 800d898:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00e      	beq.n	800d8bc <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	0032      	movs	r2, r6
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	4659      	mov	r1, fp
 800d8a6:	4650      	mov	r0, sl
 800d8a8:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d100      	bne.n	800d8b0 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d8ae:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d8b0:	bc3c      	pop	{r2, r3, r4, r5}
 800d8b2:	4690      	mov	r8, r2
 800d8b4:	4699      	mov	r9, r3
 800d8b6:	46a2      	mov	sl, r4
 800d8b8:	46ab      	mov	fp, r5
 800d8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d8bc:	3320      	adds	r3, #32
 800d8be:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d8c0:	4c29      	ldr	r4, [pc, #164]	; (800d968 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d8c2:	3404      	adds	r4, #4
 800d8c4:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d8c6:	6823      	ldr	r3, [r4, #0]
 800d8c8:	681d      	ldr	r5, [r3, #0]
 800d8ca:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d8cc:	0028      	movs	r0, r5
 800d8ce:	f7f2 fc23 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d8d2:	464a      	mov	r2, r9
 800d8d4:	5c33      	ldrb	r3, [r6, r0]
 800d8d6:	4393      	bics	r3, r2
 800d8d8:	d106      	bne.n	800d8e8 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d8da:	0002      	movs	r2, r0
 800d8dc:	0029      	movs	r1, r5
 800d8de:	0030      	movs	r0, r6
 800d8e0:	f005 fdb8 	bl	8013454 <strncmp>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d00a      	beq.n	800d8fe <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d8e8:	6864      	ldr	r4, [r4, #4]
 800d8ea:	603c      	str	r4, [r7, #0]
 800d8ec:	2c00      	cmp	r4, #0
 800d8ee:	d1ea      	bne.n	800d8c6 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d8f0:	465a      	mov	r2, fp
 800d8f2:	491e      	ldr	r1, [pc, #120]	; (800d96c <FreeRTOS_CLIProcessCommand+0xe8>)
 800d8f4:	4650      	mov	r0, sl
 800d8f6:	f005 fdbe 	bl	8013476 <strncpy>
		xReturn = pdFALSE;
 800d8fa:	2000      	movs	r0, #0
	return xReturn;
 800d8fc:	e7d8      	b.n	800d8b0 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d8fe:	4643      	mov	r3, r8
 800d900:	250c      	movs	r5, #12
 800d902:	575d      	ldrsb	r5, [r3, r5]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	2d00      	cmp	r5, #0
 800d908:	db26      	blt.n	800d958 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d90a:	2200      	movs	r2, #0
 800d90c:	56b2      	ldrsb	r2, [r6, r2]
 800d90e:	2a00      	cmp	r2, #0
 800d910:	d025      	beq.n	800d95e <FreeRTOS_CLIProcessCommand+0xda>
 800d912:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d914:	2400      	movs	r4, #0
 800d916:	e005      	b.n	800d924 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d918:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d91a:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d91c:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d91e:	568a      	ldrsb	r2, [r1, r2]
 800d920:	2a00      	cmp	r2, #0
 800d922:	d007      	beq.n	800d934 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d924:	2a20      	cmp	r2, #32
 800d926:	d1f7      	bne.n	800d918 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d928:	2801      	cmp	r0, #1
 800d92a:	d0f6      	beq.n	800d91a <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d92c:	3401      	adds	r4, #1
 800d92e:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d930:	2001      	movs	r0, #1
 800d932:	e7f2      	b.n	800d91a <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d934:	2801      	cmp	r0, #1
 800d936:	d00c      	beq.n	800d952 <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d938:	42a5      	cmp	r5, r4
 800d93a:	d00d      	beq.n	800d958 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d0d7      	beq.n	800d8f0 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d940:	465a      	mov	r2, fp
 800d942:	490b      	ldr	r1, [pc, #44]	; (800d970 <FreeRTOS_CLIProcessCommand+0xec>)
 800d944:	4650      	mov	r0, sl
 800d946:	f005 fd96 	bl	8013476 <strncpy>
		pxCommand = NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	2000      	movs	r0, #0
 800d94e:	603b      	str	r3, [r7, #0]
 800d950:	e7ae      	b.n	800d8b0 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d952:	3c01      	subs	r4, #1
 800d954:	b264      	sxtb	r4, r4
 800d956:	e7ef      	b.n	800d938 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1a0      	bne.n	800d89e <FreeRTOS_CLIProcessCommand+0x1a>
 800d95c:	e7c8      	b.n	800d8f0 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d95e:	2400      	movs	r4, #0
 800d960:	e7ea      	b.n	800d938 <FreeRTOS_CLIProcessCommand+0xb4>
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	200021c4 	.word	0x200021c4
 800d968:	200000b4 	.word	0x200000b4
 800d96c:	0801a548 	.word	0x0801a548
 800d970:	0801a4f0 	.word	0x0801a4f0

0800d974 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d974:	4800      	ldr	r0, [pc, #0]	; (800d978 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d976:	4770      	bx	lr
 800d978:	200021d4 	.word	0x200021d4

0800d97c <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d97c:	2300      	movs	r3, #0
{
 800d97e:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d980:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d982:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d984:	2900      	cmp	r1, #0
 800d986:	d021      	beq.n	800d9cc <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d988:	2300      	movs	r3, #0
 800d98a:	56c3      	ldrsb	r3, [r0, r3]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d105      	bne.n	800d99c <FreeRTOS_CLIGetParameter+0x20>
 800d990:	e01c      	b.n	800d9cc <FreeRTOS_CLIGetParameter+0x50>
 800d992:	2300      	movs	r3, #0
			pcCommandString++;
 800d994:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d996:	56c3      	ldrsb	r3, [r0, r3]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d017      	beq.n	800d9cc <FreeRTOS_CLIGetParameter+0x50>
 800d99c:	2b20      	cmp	r3, #32
 800d99e:	d1f8      	bne.n	800d992 <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d9a0:	2300      	movs	r3, #0
			pcCommandString++;
 800d9a2:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d9a4:	56c3      	ldrsb	r3, [r0, r3]
 800d9a6:	2b20      	cmp	r3, #32
 800d9a8:	d0fa      	beq.n	800d9a0 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00e      	beq.n	800d9cc <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d9ae:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d9b0:	42a1      	cmp	r1, r4
 800d9b2:	d1e9      	bne.n	800d988 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d9b4:	2120      	movs	r1, #32
 800d9b6:	7803      	ldrb	r3, [r0, #0]
 800d9b8:	438b      	bics	r3, r1
 800d9ba:	d007      	beq.n	800d9cc <FreeRTOS_CLIGetParameter+0x50>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d9c4:	5cc1      	ldrb	r1, [r0, r3]
 800d9c6:	43a1      	bics	r1, r4
 800d9c8:	d1fa      	bne.n	800d9c0 <FreeRTOS_CLIGetParameter+0x44>
 800d9ca:	e000      	b.n	800d9ce <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d9cc:	2000      	movs	r0, #0
}
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <prvHelpCommand>:
{
 800d9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9d2:	46ce      	mov	lr, r9
 800d9d4:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d9d6:	2300      	movs	r3, #0
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	0004      	movs	r4, r0
 800d9de:	000d      	movs	r5, r1
 800d9e0:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d9e6:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d9e8:	f7ff ffc8 	bl	800d97c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d024      	beq.n	800da3a <prvHelpCommand+0x6a>
 800d9f0:	2206      	movs	r2, #6
 800d9f2:	4931      	ldr	r1, [pc, #196]	; (800dab8 <prvHelpCommand+0xe8>)
 800d9f4:	f005 fd2e 	bl	8013454 <strncmp>
 800d9f8:	1e07      	subs	r7, r0, #0
 800d9fa:	d118      	bne.n	800da2e <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d9fc:	4b2f      	ldr	r3, [pc, #188]	; (800dabc <prvHelpCommand+0xec>)
 800d9fe:	4698      	mov	r8, r3
 800da00:	791b      	ldrb	r3, [r3, #4]
 800da02:	2b07      	cmp	r3, #7
 800da04:	d047      	beq.n	800da96 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800da06:	1c5a      	adds	r2, r3, #1
 800da08:	b2d2      	uxtb	r2, r2
 800da0a:	4691      	mov	r9, r2
 800da0c:	4642      	mov	r2, r8
 800da0e:	4649      	mov	r1, r9
 800da10:	7111      	strb	r1, [r2, #4]
 800da12:	4a2b      	ldr	r2, [pc, #172]	; (800dac0 <prvHelpCommand+0xf0>)
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	5899      	ldr	r1, [r3, r2]
 800da18:	0020      	movs	r0, r4
 800da1a:	002a      	movs	r2, r5
 800da1c:	f005 fd2b 	bl	8013476 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800da20:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800da22:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800da24:	2b07      	cmp	r3, #7
 800da26:	d102      	bne.n	800da2e <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800da28:	4643      	mov	r3, r8
 800da2a:	2600      	movs	r6, #0
 800da2c:	711f      	strb	r7, [r3, #4]
}
 800da2e:	0030      	movs	r0, r6
 800da30:	b003      	add	sp, #12
 800da32:	bc0c      	pop	{r2, r3}
 800da34:	4690      	mov	r8, r2
 800da36:	4699      	mov	r9, r3
 800da38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800da3a:	4f20      	ldr	r7, [pc, #128]	; (800dabc <prvHelpCommand+0xec>)
 800da3c:	68be      	ldr	r6, [r7, #8]
 800da3e:	2e00      	cmp	r6, #0
 800da40:	d020      	beq.n	800da84 <prvHelpCommand+0xb4>
 800da42:	7b3b      	ldrb	r3, [r7, #12]
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	b2d2      	uxtb	r2, r2
 800da48:	4690      	mov	r8, r2
 800da4a:	6832      	ldr	r2, [r6, #0]
 800da4c:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800da4e:	4a1d      	ldr	r2, [pc, #116]	; (800dac4 <prvHelpCommand+0xf4>)
 800da50:	7812      	ldrb	r2, [r2, #0]
 800da52:	429a      	cmp	r2, r3
 800da54:	d22a      	bcs.n	800daac <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800da56:	002a      	movs	r2, r5
 800da58:	0020      	movs	r0, r4
 800da5a:	3a08      	subs	r2, #8
 800da5c:	3008      	adds	r0, #8
 800da5e:	f005 fd0a 	bl	8013476 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800da62:	1c60      	adds	r0, r4, #1
 800da64:	4918      	ldr	r1, [pc, #96]	; (800dac8 <prvHelpCommand+0xf8>)
 800da66:	f005 fced 	bl	8013444 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800da6a:	2328      	movs	r3, #40	; 0x28
 800da6c:	7023      	strb	r3, [r4, #0]
 800da6e:	3301      	adds	r3, #1
 800da70:	71a3      	strb	r3, [r4, #6]
 800da72:	3b09      	subs	r3, #9
 800da74:	71e3      	strb	r3, [r4, #7]
		counter++;
 800da76:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800da78:	6876      	ldr	r6, [r6, #4]
		counter++;
 800da7a:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800da7c:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800da7e:	1e73      	subs	r3, r6, #1
 800da80:	419e      	sbcs	r6, r3
 800da82:	e7d4      	b.n	800da2e <prvHelpCommand+0x5e>
			counter = 1;
 800da84:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800da86:	4e11      	ldr	r6, [pc, #68]	; (800dacc <prvHelpCommand+0xfc>)
			counter = 1;
 800da88:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800da8a:	3604      	adds	r6, #4
			counter = 1;
 800da8c:	3301      	adds	r3, #1
 800da8e:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800da90:	60be      	str	r6, [r7, #8]
			counter = 1;
 800da92:	3b01      	subs	r3, #1
 800da94:	e7d9      	b.n	800da4a <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800da96:	4642      	mov	r2, r8
 800da98:	3b06      	subs	r3, #6
 800da9a:	7113      	strb	r3, [r2, #4]
 800da9c:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <prvHelpCommand+0xf0>)
 800da9e:	002a      	movs	r2, r5
 800daa0:	6819      	ldr	r1, [r3, #0]
 800daa2:	0020      	movs	r0, r4
 800daa4:	f005 fce7 	bl	8013476 <strncpy>
			xReturn = pdTRUE;
 800daa8:	2601      	movs	r6, #1
 800daaa:	e7c0      	b.n	800da2e <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800daac:	002a      	movs	r2, r5
 800daae:	0020      	movs	r0, r4
 800dab0:	f005 fce1 	bl	8013476 <strncpy>
 800dab4:	e7df      	b.n	800da76 <prvHelpCommand+0xa6>
 800dab6:	46c0      	nop			; (mov r8, r8)
 800dab8:	08018e78 	.word	0x08018e78
 800dabc:	200021c4 	.word	0x200021c4
 800dac0:	20000034 	.word	0x20000034
 800dac4:	20007024 	.word	0x20007024
 800dac8:	08017888 	.word	0x08017888
 800dacc:	200000b4 	.word	0x200000b4

0800dad0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dad0:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dad2:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dad4:	3308      	adds	r3, #8
 800dad6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dad8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dada:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dadc:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dade:	4252      	negs	r2, r2
 800dae0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dae2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dae4:	4770      	bx	lr
 800dae6:	46c0      	nop			; (mov r8, r8)

0800dae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dae8:	2300      	movs	r3, #0
 800daea:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800daec:	4770      	bx	lr
 800daee:	46c0      	nop			; (mov r8, r8)

0800daf0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800daf0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800daf2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800daf4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800daf6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800daf8:	689a      	ldr	r2, [r3, #8]
 800dafa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dafc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800dafe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800db00:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800db02:	3301      	adds	r3, #1
 800db04:	6003      	str	r3, [r0, #0]
}
 800db06:	4770      	bx	lr

0800db08 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db08:	0002      	movs	r2, r0
{
 800db0a:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db0c:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db0e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800db10:	1c63      	adds	r3, r4, #1
 800db12:	d101      	bne.n	800db18 <vListInsert+0x10>
 800db14:	e00d      	b.n	800db32 <vListInsert+0x2a>
 800db16:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db18:	6853      	ldr	r3, [r2, #4]
 800db1a:	681d      	ldr	r5, [r3, #0]
 800db1c:	42a5      	cmp	r5, r4
 800db1e:	d9fa      	bls.n	800db16 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db20:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db22:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800db24:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800db26:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800db28:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800db2a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800db2c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800db2e:	6003      	str	r3, [r0, #0]
}
 800db30:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800db32:	6902      	ldr	r2, [r0, #16]
 800db34:	6853      	ldr	r3, [r2, #4]
 800db36:	e7f3      	b.n	800db20 <vListInsert+0x18>

0800db38 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db38:	6842      	ldr	r2, [r0, #4]
 800db3a:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800db3c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db3e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db40:	6881      	ldr	r1, [r0, #8]
 800db42:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	4282      	cmp	r2, r0
 800db48:	d100      	bne.n	800db4c <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db4a:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800db4c:	2200      	movs	r2, #0
 800db4e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	1e50      	subs	r0, r2, #1
 800db54:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800db56:	4770      	bx	lr

0800db58 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800db5e:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db60:	2a00      	cmp	r2, #0
 800db62:	d107      	bne.n	800db74 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db64:	6805      	ldr	r5, [r0, #0]
 800db66:	2d00      	cmp	r5, #0
 800db68:	d02d      	beq.n	800dbc6 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800db6a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800db6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800db6e:	3301      	adds	r3, #1
 800db70:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800db72:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800db74:	2d00      	cmp	r5, #0
 800db76:	d10e      	bne.n	800db96 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800db78:	6880      	ldr	r0, [r0, #8]
 800db7a:	f005 fa24 	bl	8012fc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800db7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db84:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800db86:	4463      	add	r3, ip
 800db88:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d3ed      	bcc.n	800db6a <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db8e:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800db90:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db92:	60a3      	str	r3, [r4, #8]
 800db94:	e7ea      	b.n	800db6c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db96:	68c0      	ldr	r0, [r0, #12]
 800db98:	f005 fa15 	bl	8012fc6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800db9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db9e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dba0:	425a      	negs	r2, r3
 800dba2:	68e3      	ldr	r3, [r4, #12]
 800dba4:	189b      	adds	r3, r3, r2
 800dba6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dba8:	428b      	cmp	r3, r1
 800dbaa:	d203      	bcs.n	800dbb4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dbac:	6863      	ldr	r3, [r4, #4]
 800dbae:	469c      	mov	ip, r3
 800dbb0:	4462      	add	r2, ip
 800dbb2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800dbb4:	2d02      	cmp	r5, #2
 800dbb6:	d1d8      	bne.n	800db6a <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0d5      	beq.n	800db6a <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800dbbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	63a3      	str	r3, [r4, #56]	; 0x38
 800dbc4:	e7d1      	b.n	800db6a <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dbc6:	6840      	ldr	r0, [r0, #4]
 800dbc8:	f001 f842 	bl	800ec50 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dbcc:	6065      	str	r5, [r4, #4]
 800dbce:	e7cd      	b.n	800db6c <prvCopyDataToQueue+0x14>

0800dbd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	d008      	beq.n	800dbec <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dbda:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbdc:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dbde:	1889      	adds	r1, r1, r2
 800dbe0:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbe2:	42a1      	cmp	r1, r4
 800dbe4:	d203      	bcs.n	800dbee <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	f005 f9ed 	bl	8012fc6 <memcpy>
	}
}
 800dbec:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dbee:	6801      	ldr	r1, [r0, #0]
 800dbf0:	60c1      	str	r1, [r0, #12]
 800dbf2:	e7f8      	b.n	800dbe6 <prvCopyDataFromQueue+0x16>

0800dbf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbf8:	f001 fbe8 	bl	800f3cc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dbfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	dd1b      	ble.n	800dc3a <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d018      	beq.n	800dc3a <prvUnlockQueue+0x46>
 800dc08:	0025      	movs	r5, r4
 800dc0a:	3524      	adds	r5, #36	; 0x24
 800dc0c:	e008      	b.n	800dc20 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800dc0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc10:	3b01      	subs	r3, #1
 800dc12:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	dd0f      	ble.n	800dc3a <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00c      	beq.n	800dc3a <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc20:	0028      	movs	r0, r5
 800dc22:	f000 ff49 	bl	800eab8 <xTaskRemoveFromEventList>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d0f1      	beq.n	800dc0e <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800dc2a:	f000 ffc3 	bl	800ebb4 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800dc2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc30:	3b01      	subs	r3, #1
 800dc32:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	dcef      	bgt.n	800dc1a <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	425b      	negs	r3, r3
 800dc3e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800dc40:	f001 fbd0 	bl	800f3e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc44:	f001 fbc2 	bl	800f3cc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dc48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dd1b      	ble.n	800dc86 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d018      	beq.n	800dc86 <prvUnlockQueue+0x92>
 800dc54:	0025      	movs	r5, r4
 800dc56:	3510      	adds	r5, #16
 800dc58:	e008      	b.n	800dc6c <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800dc5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dc60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	dd0f      	ble.n	800dc86 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00c      	beq.n	800dc86 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc6c:	0028      	movs	r0, r5
 800dc6e:	f000 ff23 	bl	800eab8 <xTaskRemoveFromEventList>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d0f1      	beq.n	800dc5a <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800dc76:	f000 ff9d 	bl	800ebb4 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800dc7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dc80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	dcef      	bgt.n	800dc66 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800dc86:	2301      	movs	r3, #1
 800dc88:	425b      	negs	r3, r3
 800dc8a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc8c:	f001 fbaa 	bl	800f3e4 <vPortExitCritical>
}
 800dc90:	bd70      	pop	{r4, r5, r6, pc}
 800dc92:	46c0      	nop			; (mov r8, r8)

0800dc94 <xQueueGenericReset>:
{
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	0004      	movs	r4, r0
 800dc98:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d01a      	beq.n	800dcd4 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800dc9e:	f001 fb95 	bl	800f3cc <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dca2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dca4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dca6:	6822      	ldr	r2, [r4, #0]
 800dca8:	434b      	muls	r3, r1
 800dcaa:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dcac:	1a5b      	subs	r3, r3, r1
 800dcae:	18d3      	adds	r3, r2, r3
 800dcb0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dcb2:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dcb4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcb6:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800dcb8:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcba:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcbc:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800dcbe:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dcc0:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dcc2:	2d00      	cmp	r5, #0
 800dcc4:	d108      	bne.n	800dcd8 <xQueueGenericReset+0x44>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcc6:	6923      	ldr	r3, [r4, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10e      	bne.n	800dcea <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
 800dccc:	f001 fb8a 	bl	800f3e4 <vPortExitCritical>
}
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800dcd4:	b672      	cpsid	i
 800dcd6:	e7fe      	b.n	800dcd6 <xQueueGenericReset+0x42>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dcd8:	0020      	movs	r0, r4
 800dcda:	3010      	adds	r0, #16
 800dcdc:	f7ff fef8 	bl	800dad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dce0:	0020      	movs	r0, r4
 800dce2:	3024      	adds	r0, #36	; 0x24
 800dce4:	f7ff fef4 	bl	800dad0 <vListInitialise>
 800dce8:	e7f0      	b.n	800dccc <xQueueGenericReset+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dcea:	0020      	movs	r0, r4
 800dcec:	3010      	adds	r0, #16
 800dcee:	f000 fee3 	bl	800eab8 <xTaskRemoveFromEventList>
 800dcf2:	2801      	cmp	r0, #1
 800dcf4:	d1ea      	bne.n	800dccc <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800dcf6:	f001 fb5d 	bl	800f3b4 <vPortYield>
 800dcfa:	e7e7      	b.n	800dccc <xQueueGenericReset+0x38>

0800dcfc <xQueueGenericCreate>:
{
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	0005      	movs	r5, r0
 800dd00:	000e      	movs	r6, r1
 800dd02:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d101      	bne.n	800dd0c <xQueueGenericCreate+0x10>
 800dd08:	b672      	cpsid	i
 800dd0a:	e7fe      	b.n	800dd0a <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	d013      	beq.n	800dd38 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd10:	0008      	movs	r0, r1
 800dd12:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dd14:	3055      	adds	r0, #85	; 0x55
 800dd16:	f001 fbd7 	bl	800f4c8 <pvPortMalloc>
 800dd1a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dd1c:	d011      	beq.n	800dd42 <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dd1e:	0003      	movs	r3, r0
 800dd20:	3354      	adds	r3, #84	; 0x54
 800dd22:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dd24:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dd26:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dd28:	2101      	movs	r1, #1
 800dd2a:	0020      	movs	r0, r4
 800dd2c:	f7ff ffb2 	bl	800dc94 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dd30:	2350      	movs	r3, #80	; 0x50
}
 800dd32:	0020      	movs	r0, r4
			pxNewQueue->ucQueueType = ucQueueType;
 800dd34:	54e7      	strb	r7, [r4, r3]
}
 800dd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dd38:	2054      	movs	r0, #84	; 0x54
 800dd3a:	f001 fbc5 	bl	800f4c8 <pvPortMalloc>
 800dd3e:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dd40:	d101      	bne.n	800dd46 <xQueueGenericCreate+0x4a>
	configASSERT( xReturn );
 800dd42:	b672      	cpsid	i
 800dd44:	e7fe      	b.n	800dd44 <xQueueGenericCreate+0x48>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd46:	6024      	str	r4, [r4, #0]
 800dd48:	e7ec      	b.n	800dd24 <xQueueGenericCreate+0x28>
 800dd4a:	46c0      	nop			; (mov r8, r8)

0800dd4c <xQueueCreateCountingSemaphore>:
	{
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d101      	bne.n	800dd58 <xQueueCreateCountingSemaphore+0xc>
 800dd54:	b672      	cpsid	i
 800dd56:	e7fe      	b.n	800dd56 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd58:	4288      	cmp	r0, r1
 800dd5a:	d201      	bcs.n	800dd60 <xQueueCreateCountingSemaphore+0x14>
 800dd5c:	b672      	cpsid	i
 800dd5e:	e7fe      	b.n	800dd5e <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd60:	2202      	movs	r2, #2
 800dd62:	2100      	movs	r1, #0
 800dd64:	f7ff ffca 	bl	800dcfc <xQueueGenericCreate>
		if( xHandle != NULL )
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d001      	beq.n	800dd70 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd6c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dd6e:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dd70:	b672      	cpsid	i
 800dd72:	e7fe      	b.n	800dd72 <xQueueCreateCountingSemaphore+0x26>

0800dd74 <xQueueGenericSend>:
{
 800dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd76:	46c6      	mov	lr, r8
 800dd78:	b500      	push	{lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	0004      	movs	r4, r0
 800dd7e:	000f      	movs	r7, r1
 800dd80:	9201      	str	r2, [sp, #4]
 800dd82:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d100      	bne.n	800dd8a <xQueueGenericSend+0x16>
 800dd88:	e07a      	b.n	800de80 <xQueueGenericSend+0x10c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd8a:	2900      	cmp	r1, #0
 800dd8c:	d100      	bne.n	800dd90 <xQueueGenericSend+0x1c>
 800dd8e:	e071      	b.n	800de74 <xQueueGenericSend+0x100>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd90:	2d02      	cmp	r5, #2
 800dd92:	d104      	bne.n	800dd9e <xQueueGenericSend+0x2a>
 800dd94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d001      	beq.n	800dd9e <xQueueGenericSend+0x2a>
 800dd9a:	b672      	cpsid	i
 800dd9c:	e7fe      	b.n	800dd9c <xQueueGenericSend+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd9e:	f000 ff0f 	bl	800ebc0 <xTaskGetSchedulerState>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d104      	bne.n	800ddb0 <xQueueGenericSend+0x3c>
 800dda6:	9b01      	ldr	r3, [sp, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <xQueueGenericSend+0x3c>
 800ddac:	b672      	cpsid	i
 800ddae:	e7fe      	b.n	800ddae <xQueueGenericSend+0x3a>
		prvLockQueue( pxQueue );
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800ddb4:	f001 fb0a 	bl	800f3cc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ddbc:	2600      	movs	r6, #0
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d335      	bcc.n	800de2e <xQueueGenericSend+0xba>
 800ddc2:	2d02      	cmp	r5, #2
 800ddc4:	d033      	beq.n	800de2e <xQueueGenericSend+0xba>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddc6:	9b01      	ldr	r3, [sp, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d05b      	beq.n	800de84 <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 800ddcc:	2e00      	cmp	r6, #0
 800ddce:	d102      	bne.n	800ddd6 <xQueueGenericSend+0x62>
					vTaskSetTimeOutState( &xTimeOut );
 800ddd0:	a802      	add	r0, sp, #8
 800ddd2:	f000 feab 	bl	800eb2c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800ddd6:	f001 fb05 	bl	800f3e4 <vPortExitCritical>
		vTaskSuspendAll();
 800ddda:	f000 fc63 	bl	800e6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddde:	f001 faf5 	bl	800f3cc <vPortEnterCritical>
 800dde2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dde4:	3301      	adds	r3, #1
 800dde6:	d101      	bne.n	800ddec <xQueueGenericSend+0x78>
 800dde8:	4643      	mov	r3, r8
 800ddea:	6463      	str	r3, [r4, #68]	; 0x44
 800ddec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddee:	3301      	adds	r3, #1
 800ddf0:	d101      	bne.n	800ddf6 <xQueueGenericSend+0x82>
 800ddf2:	4643      	mov	r3, r8
 800ddf4:	64a3      	str	r3, [r4, #72]	; 0x48
 800ddf6:	f001 faf5 	bl	800f3e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddfa:	a901      	add	r1, sp, #4
 800ddfc:	a802      	add	r0, sp, #8
 800ddfe:	f000 fea5 	bl	800eb4c <xTaskCheckForTimeOut>
 800de02:	2800      	cmp	r0, #0
 800de04:	d14b      	bne.n	800de9e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de06:	f001 fae1 	bl	800f3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de0e:	4293      	cmp	r3, r2
 800de10:	d01e      	beq.n	800de50 <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800de12:	f001 fae7 	bl	800f3e4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800de16:	0020      	movs	r0, r4
 800de18:	f7ff feec 	bl	800dbf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de1c:	f000 fce2 	bl	800e7e4 <xTaskResumeAll>
 800de20:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800de22:	f001 fad3 	bl	800f3cc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d2c9      	bcs.n	800ddc2 <xQueueGenericSend+0x4e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de2e:	002a      	movs	r2, r5
 800de30:	0039      	movs	r1, r7
 800de32:	0020      	movs	r0, r4
 800de34:	f7ff fe90 	bl	800db58 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d126      	bne.n	800de8c <xQueueGenericSend+0x118>
					else if( xYieldRequired != pdFALSE )
 800de3e:	2800      	cmp	r0, #0
 800de40:	d12a      	bne.n	800de98 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800de42:	f001 facf 	bl	800f3e4 <vPortExitCritical>
				return pdPASS;
 800de46:	2001      	movs	r0, #1
}
 800de48:	b004      	add	sp, #16
 800de4a:	bc04      	pop	{r2}
 800de4c:	4690      	mov	r8, r2
 800de4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800de50:	f001 fac8 	bl	800f3e4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de54:	0020      	movs	r0, r4
 800de56:	9901      	ldr	r1, [sp, #4]
 800de58:	3010      	adds	r0, #16
 800de5a:	f000 fdf7 	bl	800ea4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de5e:	0020      	movs	r0, r4
 800de60:	f7ff fec8 	bl	800dbf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de64:	f000 fcbe 	bl	800e7e4 <xTaskResumeAll>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d1d9      	bne.n	800de20 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800de6c:	f001 faa2 	bl	800f3b4 <vPortYield>
 800de70:	2601      	movs	r6, #1
 800de72:	e7d6      	b.n	800de22 <xQueueGenericSend+0xae>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	d100      	bne.n	800de7c <xQueueGenericSend+0x108>
 800de7a:	e789      	b.n	800dd90 <xQueueGenericSend+0x1c>
 800de7c:	b672      	cpsid	i
 800de7e:	e7fe      	b.n	800de7e <xQueueGenericSend+0x10a>
	configASSERT( pxQueue );
 800de80:	b672      	cpsid	i
 800de82:	e7fe      	b.n	800de82 <xQueueGenericSend+0x10e>
					taskEXIT_CRITICAL();
 800de84:	f001 faae 	bl	800f3e4 <vPortExitCritical>
					return errQUEUE_FULL;
 800de88:	2000      	movs	r0, #0
 800de8a:	e7dd      	b.n	800de48 <xQueueGenericSend+0xd4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800de8c:	0020      	movs	r0, r4
 800de8e:	3024      	adds	r0, #36	; 0x24
 800de90:	f000 fe12 	bl	800eab8 <xTaskRemoveFromEventList>
 800de94:	2801      	cmp	r0, #1
 800de96:	d1d4      	bne.n	800de42 <xQueueGenericSend+0xce>
							queueYIELD_IF_USING_PREEMPTION();
 800de98:	f001 fa8c 	bl	800f3b4 <vPortYield>
 800de9c:	e7d1      	b.n	800de42 <xQueueGenericSend+0xce>
			prvUnlockQueue( pxQueue );
 800de9e:	0020      	movs	r0, r4
 800dea0:	f7ff fea8 	bl	800dbf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dea4:	f000 fc9e 	bl	800e7e4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dea8:	2000      	movs	r0, #0
 800deaa:	e7cd      	b.n	800de48 <xQueueGenericSend+0xd4>

0800deac <xQueueGenericSendFromISR>:
{
 800deac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deae:	46c6      	mov	lr, r8
 800deb0:	0004      	movs	r4, r0
 800deb2:	b500      	push	{lr}
 800deb4:	000d      	movs	r5, r1
 800deb6:	0017      	movs	r7, r2
 800deb8:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800deba:	2800      	cmp	r0, #0
 800debc:	d01d      	beq.n	800defa <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800debe:	2900      	cmp	r1, #0
 800dec0:	d016      	beq.n	800def0 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dec2:	4643      	mov	r3, r8
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d104      	bne.n	800ded2 <xQueueGenericSendFromISR+0x26>
 800dec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800deca:	2b01      	cmp	r3, #1
 800decc:	d017      	beq.n	800defe <xQueueGenericSendFromISR+0x52>
 800dece:	b672      	cpsid	i
 800ded0:	e7fe      	b.n	800ded0 <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ded2:	f001 fa95 	bl	800f400 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ded6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ded8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800deda:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dedc:	4293      	cmp	r3, r2
 800dede:	d312      	bcc.n	800df06 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800dee0:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dee2:	0030      	movs	r0, r6
 800dee4:	f001 fa92 	bl	800f40c <vClearInterruptMaskFromISR>
}
 800dee8:	0028      	movs	r0, r5
 800deea:	bc04      	pop	{r2}
 800deec:	4690      	mov	r8, r2
 800deee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800def0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0e5      	beq.n	800dec2 <xQueueGenericSendFromISR+0x16>
 800def6:	b672      	cpsid	i
 800def8:	e7fe      	b.n	800def8 <xQueueGenericSendFromISR+0x4c>
	configASSERT( pxQueue );
 800defa:	b672      	cpsid	i
 800defc:	e7fe      	b.n	800defc <xQueueGenericSendFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800defe:	f001 fa7f 	bl	800f400 <ulSetInterruptMaskFromISR>
 800df02:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df06:	4642      	mov	r2, r8
 800df08:	0029      	movs	r1, r5
 800df0a:	0020      	movs	r0, r4
 800df0c:	f7ff fe24 	bl	800db58 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800df10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df12:	3301      	adds	r3, #1
 800df14:	d004      	beq.n	800df20 <xQueueGenericSendFromISR+0x74>
				++( pxQueue->xTxLock );
 800df16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800df18:	2501      	movs	r5, #1
				++( pxQueue->xTxLock );
 800df1a:	3301      	adds	r3, #1
 800df1c:	64a3      	str	r3, [r4, #72]	; 0x48
 800df1e:	e7e0      	b.n	800dee2 <xQueueGenericSendFromISR+0x36>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df20:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800df22:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df24:	2b00      	cmp	r3, #0
 800df26:	d0dc      	beq.n	800dee2 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df28:	0020      	movs	r0, r4
 800df2a:	3024      	adds	r0, #36	; 0x24
 800df2c:	f000 fdc4 	bl	800eab8 <xTaskRemoveFromEventList>
 800df30:	2800      	cmp	r0, #0
 800df32:	d0d6      	beq.n	800dee2 <xQueueGenericSendFromISR+0x36>
							if( pxHigherPriorityTaskWoken != NULL )
 800df34:	2f00      	cmp	r7, #0
 800df36:	d0d4      	beq.n	800dee2 <xQueueGenericSendFromISR+0x36>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df38:	603d      	str	r5, [r7, #0]
 800df3a:	e7d2      	b.n	800dee2 <xQueueGenericSendFromISR+0x36>

0800df3c <xQueueGiveFromISR>:
{
 800df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3e:	0004      	movs	r4, r0
 800df40:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800df42:	2800      	cmp	r0, #0
 800df44:	d01e      	beq.n	800df84 <xQueueGiveFromISR+0x48>
	configASSERT( pxQueue->uxItemSize == 0 );
 800df46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d001      	beq.n	800df50 <xQueueGiveFromISR+0x14>
 800df4c:	b672      	cpsid	i
 800df4e:	e7fe      	b.n	800df4e <xQueueGiveFromISR+0x12>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800df50:	6803      	ldr	r3, [r0, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d018      	beq.n	800df88 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df56:	f001 fa53 	bl	800f400 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800df5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df5e:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800df60:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800df62:	4293      	cmp	r3, r2
 800df64:	d209      	bcs.n	800df7a <xQueueGiveFromISR+0x3e>
			++( pxQueue->uxMessagesWaiting );
 800df66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df68:	3301      	adds	r3, #1
 800df6a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800df6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df6e:	3301      	adds	r3, #1
 800df70:	d00f      	beq.n	800df92 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800df72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df74:	3301      	adds	r3, #1
 800df76:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800df78:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800df7a:	0030      	movs	r0, r6
 800df7c:	f001 fa46 	bl	800f40c <vClearInterruptMaskFromISR>
}
 800df80:	0028      	movs	r0, r5
 800df82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800df84:	b672      	cpsid	i
 800df86:	e7fe      	b.n	800df86 <xQueueGiveFromISR+0x4a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800df88:	6843      	ldr	r3, [r0, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0e3      	beq.n	800df56 <xQueueGiveFromISR+0x1a>
 800df8e:	b672      	cpsid	i
 800df90:	e7fe      	b.n	800df90 <xQueueGiveFromISR+0x54>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df94:	42ab      	cmp	r3, r5
 800df96:	d0ef      	beq.n	800df78 <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df98:	0020      	movs	r0, r4
 800df9a:	3024      	adds	r0, #36	; 0x24
 800df9c:	f000 fd8c 	bl	800eab8 <xTaskRemoveFromEventList>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d0e9      	beq.n	800df78 <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 800dfa4:	2f00      	cmp	r7, #0
 800dfa6:	d0e7      	beq.n	800df78 <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfa8:	2501      	movs	r5, #1
 800dfaa:	603d      	str	r5, [r7, #0]
 800dfac:	e7e5      	b.n	800df7a <xQueueGiveFromISR+0x3e>
 800dfae:	46c0      	nop			; (mov r8, r8)

0800dfb0 <xQueueGenericReceive>:
{
 800dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfb2:	46c6      	mov	lr, r8
 800dfb4:	b500      	push	{lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	0004      	movs	r4, r0
 800dfba:	000d      	movs	r5, r1
 800dfbc:	9201      	str	r2, [sp, #4]
 800dfbe:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d100      	bne.n	800dfc6 <xQueueGenericReceive+0x16>
 800dfc4:	e07c      	b.n	800e0c0 <xQueueGenericReceive+0x110>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	d100      	bne.n	800dfcc <xQueueGenericReceive+0x1c>
 800dfca:	e073      	b.n	800e0b4 <xQueueGenericReceive+0x104>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfcc:	f000 fdf8 	bl	800ebc0 <xTaskGetSchedulerState>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d104      	bne.n	800dfde <xQueueGenericReceive+0x2e>
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <xQueueGenericReceive+0x2e>
 800dfda:	b672      	cpsid	i
 800dfdc:	e7fe      	b.n	800dfdc <xQueueGenericReceive+0x2c>
		taskENTER_CRITICAL();
 800dfde:	f001 f9f5 	bl	800f3cc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d14b      	bne.n	800e080 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfe8:	9b01      	ldr	r3, [sp, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d100      	bne.n	800dff0 <xQueueGenericReceive+0x40>
 800dfee:	e08f      	b.n	800e110 <xQueueGenericReceive+0x160>
					vTaskSetTimeOutState( &xTimeOut );
 800dff0:	a802      	add	r0, sp, #8
 800dff2:	f000 fd9b 	bl	800eb2c <vTaskSetTimeOutState>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dff6:	2324      	movs	r3, #36	; 0x24
 800dff8:	4698      	mov	r8, r3
		prvLockQueue( pxQueue );
 800dffa:	2600      	movs	r6, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dffc:	44a0      	add	r8, r4
 800dffe:	e00f      	b.n	800e020 <xQueueGenericReceive+0x70>
	taskEXIT_CRITICAL();
 800e000:	f001 f9f0 	bl	800f3e4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e004:	0020      	movs	r0, r4
 800e006:	f7ff fdf5 	bl	800dbf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e00a:	f000 fbeb 	bl	800e7e4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e00e:	f001 f9dd 	bl	800f3cc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e012:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d133      	bne.n	800e080 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e018:	9b01      	ldr	r3, [sp, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d100      	bne.n	800e020 <xQueueGenericReceive+0x70>
 800e01e:	e077      	b.n	800e110 <xQueueGenericReceive+0x160>
		taskEXIT_CRITICAL();
 800e020:	f001 f9e0 	bl	800f3e4 <vPortExitCritical>
		vTaskSuspendAll();
 800e024:	f000 fb3e 	bl	800e6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e028:	f001 f9d0 	bl	800f3cc <vPortEnterCritical>
 800e02c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e02e:	3301      	adds	r3, #1
 800e030:	d100      	bne.n	800e034 <xQueueGenericReceive+0x84>
 800e032:	6466      	str	r6, [r4, #68]	; 0x44
 800e034:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e036:	3301      	adds	r3, #1
 800e038:	d100      	bne.n	800e03c <xQueueGenericReceive+0x8c>
 800e03a:	64a6      	str	r6, [r4, #72]	; 0x48
 800e03c:	f001 f9d2 	bl	800f3e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e040:	a901      	add	r1, sp, #4
 800e042:	a802      	add	r0, sp, #8
 800e044:	f000 fd82 	bl	800eb4c <xTaskCheckForTimeOut>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d15a      	bne.n	800e102 <xQueueGenericReceive+0x152>
	taskENTER_CRITICAL();
 800e04c:	f001 f9be 	bl	800f3cc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1d4      	bne.n	800e000 <xQueueGenericReceive+0x50>
	taskEXIT_CRITICAL();
 800e056:	f001 f9c5 	bl	800f3e4 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d034      	beq.n	800e0ca <xQueueGenericReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e060:	9901      	ldr	r1, [sp, #4]
 800e062:	4640      	mov	r0, r8
 800e064:	f000 fcf2 	bl	800ea4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e068:	0020      	movs	r0, r4
 800e06a:	f7ff fdc3 	bl	800dbf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e06e:	f000 fbb9 	bl	800e7e4 <xTaskResumeAll>
 800e072:	2800      	cmp	r0, #0
 800e074:	d026      	beq.n	800e0c4 <xQueueGenericReceive+0x114>
		taskENTER_CRITICAL();
 800e076:	f001 f9a9 	bl	800f3cc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e07a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d0cb      	beq.n	800e018 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e080:	0029      	movs	r1, r5
 800e082:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e084:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e086:	f7ff fda3 	bl	800dbd0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e08a:	2f00      	cmp	r7, #0
 800e08c:	d125      	bne.n	800e0da <xQueueGenericReceive+0x12a>
					--( pxQueue->uxMessagesWaiting );
 800e08e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e090:	3b01      	subs	r3, #1
 800e092:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d102      	bne.n	800e0a0 <xQueueGenericReceive+0xf0>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e09a:	f000 fec5 	bl	800ee28 <pvTaskIncrementMutexHeldCount>
 800e09e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d126      	bne.n	800e0f4 <xQueueGenericReceive+0x144>
				taskEXIT_CRITICAL();
 800e0a6:	f001 f99d 	bl	800f3e4 <vPortExitCritical>
				return pdPASS;
 800e0aa:	2001      	movs	r0, #1
}
 800e0ac:	b004      	add	sp, #16
 800e0ae:	bc04      	pop	{r2}
 800e0b0:	4690      	mov	r8, r2
 800e0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d100      	bne.n	800e0bc <xQueueGenericReceive+0x10c>
 800e0ba:	e787      	b.n	800dfcc <xQueueGenericReceive+0x1c>
 800e0bc:	b672      	cpsid	i
 800e0be:	e7fe      	b.n	800e0be <xQueueGenericReceive+0x10e>
	configASSERT( pxQueue );
 800e0c0:	b672      	cpsid	i
 800e0c2:	e7fe      	b.n	800e0c2 <xQueueGenericReceive+0x112>
					portYIELD_WITHIN_API();
 800e0c4:	f001 f976 	bl	800f3b4 <vPortYield>
 800e0c8:	e7d5      	b.n	800e076 <xQueueGenericReceive+0xc6>
						taskENTER_CRITICAL();
 800e0ca:	f001 f97f 	bl	800f3cc <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e0ce:	6860      	ldr	r0, [r4, #4]
 800e0d0:	f000 fd86 	bl	800ebe0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e0d4:	f001 f986 	bl	800f3e4 <vPortExitCritical>
 800e0d8:	e7c2      	b.n	800e060 <xQueueGenericReceive+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0da:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e0dc:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d0e1      	beq.n	800e0a6 <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0e2:	0020      	movs	r0, r4
 800e0e4:	3024      	adds	r0, #36	; 0x24
 800e0e6:	f000 fce7 	bl	800eab8 <xTaskRemoveFromEventList>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0db      	beq.n	800e0a6 <xQueueGenericReceive+0xf6>
							queueYIELD_IF_USING_PREEMPTION();
 800e0ee:	f001 f961 	bl	800f3b4 <vPortYield>
 800e0f2:	e7d8      	b.n	800e0a6 <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e0f4:	0020      	movs	r0, r4
 800e0f6:	3010      	adds	r0, #16
 800e0f8:	f000 fcde 	bl	800eab8 <xTaskRemoveFromEventList>
 800e0fc:	2801      	cmp	r0, #1
 800e0fe:	d1d2      	bne.n	800e0a6 <xQueueGenericReceive+0xf6>
 800e100:	e7f5      	b.n	800e0ee <xQueueGenericReceive+0x13e>
			prvUnlockQueue( pxQueue );
 800e102:	0020      	movs	r0, r4
 800e104:	f7ff fd76 	bl	800dbf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e108:	f000 fb6c 	bl	800e7e4 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e10c:	2000      	movs	r0, #0
 800e10e:	e7cd      	b.n	800e0ac <xQueueGenericReceive+0xfc>
					taskEXIT_CRITICAL();
 800e110:	f001 f968 	bl	800f3e4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e114:	2000      	movs	r0, #0
 800e116:	e7c9      	b.n	800e0ac <xQueueGenericReceive+0xfc>

0800e118 <xQueueReceiveFromISR>:
{
 800e118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11a:	46c6      	mov	lr, r8
 800e11c:	0004      	movs	r4, r0
 800e11e:	b500      	push	{lr}
 800e120:	4688      	mov	r8, r1
 800e122:	0017      	movs	r7, r2
	configASSERT( pxQueue );
 800e124:	2800      	cmp	r0, #0
 800e126:	d00f      	beq.n	800e148 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e128:	2900      	cmp	r1, #0
 800e12a:	d01d      	beq.n	800e168 <xQueueReceiveFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e12c:	f001 f968 	bl	800f400 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e132:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800e134:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e136:	2b00      	cmp	r3, #0
 800e138:	d108      	bne.n	800e14c <xQueueReceiveFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e13a:	0030      	movs	r0, r6
 800e13c:	f001 f966 	bl	800f40c <vClearInterruptMaskFromISR>
}
 800e140:	0028      	movs	r0, r5
 800e142:	bc04      	pop	{r2}
 800e144:	4690      	mov	r8, r2
 800e146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800e148:	b672      	cpsid	i
 800e14a:	e7fe      	b.n	800e14a <xQueueReceiveFromISR+0x32>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e14c:	4641      	mov	r1, r8
 800e14e:	0020      	movs	r0, r4
 800e150:	f7ff fd3e 	bl	800dbd0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e156:	3b01      	subs	r3, #1
 800e158:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e15a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e15c:	3301      	adds	r3, #1
 800e15e:	d008      	beq.n	800e172 <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800e160:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e162:	3301      	adds	r3, #1
 800e164:	6463      	str	r3, [r4, #68]	; 0x44
 800e166:	e007      	b.n	800e178 <xQueueReceiveFromISR+0x60>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e168:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0de      	beq.n	800e12c <xQueueReceiveFromISR+0x14>
 800e16e:	b672      	cpsid	i
 800e170:	e7fe      	b.n	800e170 <xQueueReceiveFromISR+0x58>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e172:	6923      	ldr	r3, [r4, #16]
 800e174:	42ab      	cmp	r3, r5
 800e176:	d101      	bne.n	800e17c <xQueueReceiveFromISR+0x64>
			xReturn = pdPASS;
 800e178:	2501      	movs	r5, #1
 800e17a:	e7de      	b.n	800e13a <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e17c:	0020      	movs	r0, r4
 800e17e:	3010      	adds	r0, #16
 800e180:	f000 fc9a 	bl	800eab8 <xTaskRemoveFromEventList>
 800e184:	2800      	cmp	r0, #0
 800e186:	d0f7      	beq.n	800e178 <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800e188:	2f00      	cmp	r7, #0
 800e18a:	d0f5      	beq.n	800e178 <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e18c:	2501      	movs	r5, #1
 800e18e:	603d      	str	r5, [r7, #0]
 800e190:	e7d3      	b.n	800e13a <xQueueReceiveFromISR+0x22>
 800e192:	46c0      	nop			; (mov r8, r8)

0800e194 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e194:	2300      	movs	r3, #0
	{
 800e196:	b570      	push	{r4, r5, r6, lr}
 800e198:	4d06      	ldr	r5, [pc, #24]	; (800e1b4 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e19a:	00dc      	lsls	r4, r3, #3
 800e19c:	192a      	adds	r2, r5, r4
 800e19e:	6816      	ldr	r6, [r2, #0]
 800e1a0:	2e00      	cmp	r6, #0
 800e1a2:	d003      	beq.n	800e1ac <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	2b08      	cmp	r3, #8
 800e1a8:	d1f7      	bne.n	800e19a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e1ac:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e1ae:	6050      	str	r0, [r2, #4]
				break;
 800e1b0:	e7fb      	b.n	800e1aa <vQueueAddToRegistry+0x16>
 800e1b2:	46c0      	nop			; (mov r8, r8)
 800e1b4:	200075bc 	.word	0x200075bc

0800e1b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	0004      	movs	r4, r0
 800e1bc:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e1be:	f001 f905 	bl	800f3cc <vPortEnterCritical>
 800e1c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	d101      	bne.n	800e1cc <vQueueWaitForMessageRestricted+0x14>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	6463      	str	r3, [r4, #68]	; 0x44
 800e1cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	d101      	bne.n	800e1d6 <vQueueWaitForMessageRestricted+0x1e>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1d6:	f001 f905 	bl	800f3e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e1da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d104      	bne.n	800e1ea <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e1e0:	0020      	movs	r0, r4
 800e1e2:	0029      	movs	r1, r5
 800e1e4:	3024      	adds	r0, #36	; 0x24
 800e1e6:	f000 fc51 	bl	800ea8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e1ea:	0020      	movs	r0, r4
 800e1ec:	f7ff fd02 	bl	800dbf4 <prvUnlockQueue>
	}
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	46c0      	nop			; (mov r8, r8)

0800e1f4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e1f4:	b510      	push	{r4, lr}
 800e1f6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e1f8:	f005 f924 	bl	8013444 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e1fc:	0020      	movs	r0, r4
 800e1fe:	f7f1 ff8b 	bl	8000118 <strlen>
 800e202:	0003      	movs	r3, r0
 800e204:	280b      	cmp	r0, #11
 800e206:	d808      	bhi.n	800e21a <prvWriteNameToBuffer+0x26>
 800e208:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800e20a:	2320      	movs	r3, #32
 800e20c:	1820      	adds	r0, r4, r0
 800e20e:	320c      	adds	r2, #12
 800e210:	7003      	strb	r3, [r0, #0]
 800e212:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e214:	4290      	cmp	r0, r2
 800e216:	d1fb      	bne.n	800e210 <prvWriteNameToBuffer+0x1c>
 800e218:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e21a:	18e0      	adds	r0, r4, r3
 800e21c:	2300      	movs	r3, #0
 800e21e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e220:	bd10      	pop	{r4, pc}
 800e222:	46c0      	nop			; (mov r8, r8)

0800e224 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e226:	46d6      	mov	lr, sl
 800e228:	464f      	mov	r7, r9
 800e22a:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e22c:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e22e:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e230:	685f      	ldr	r7, [r3, #4]
 800e232:	2308      	movs	r3, #8
 800e234:	469c      	mov	ip, r3
 800e236:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e238:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e23a:	604f      	str	r7, [r1, #4]
 800e23c:	4567      	cmp	r7, ip
 800e23e:	d042      	beq.n	800e2c6 <prvListTaskWithinSingleList.part.1+0xa2>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	0005      	movs	r5, r0
 800e244:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e246:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e248:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e24a:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e24c:	687f      	ldr	r7, [r7, #4]
 800e24e:	604f      	str	r7, [r1, #4]
 800e250:	45bc      	cmp	ip, r7
 800e252:	d035      	beq.n	800e2c0 <prvListTaskWithinSingleList.part.1+0x9c>
 800e254:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e256:	0033      	movs	r3, r6
 800e258:	3334      	adds	r3, #52	; 0x34
 800e25a:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e25c:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e25e:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e260:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e262:	4653      	mov	r3, sl
 800e264:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e266:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e268:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800e26a:	4653      	mov	r3, sl
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d018      	beq.n	800e2a2 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e270:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e272:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e274:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e276:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e278:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e27a:	7813      	ldrb	r3, [r2, #0]
 800e27c:	2ba5      	cmp	r3, #165	; 0xa5
 800e27e:	d11d      	bne.n	800e2bc <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800e280:	2300      	movs	r3, #0
			ulCount++;
 800e282:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e284:	5cd4      	ldrb	r4, [r2, r3]
 800e286:	2ca5      	cmp	r4, #165	; 0xa5
 800e288:	d0fb      	beq.n	800e282 <prvListTaskWithinSingleList.part.1+0x5e>
 800e28a:	089b      	lsrs	r3, r3, #2
 800e28c:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e28e:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e290:	3001      	adds	r0, #1
 800e292:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e294:	45b0      	cmp	r8, r6
 800e296:	d1d9      	bne.n	800e24c <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e298:	bc1c      	pop	{r2, r3, r4}
 800e29a:	4690      	mov	r8, r2
 800e29c:	4699      	mov	r9, r3
 800e29e:	46a2      	mov	sl, r4
 800e2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e2a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0e3      	beq.n	800e270 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e2a8:	464b      	mov	r3, r9
 800e2aa:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e2ac:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e2ae:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e2b0:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e2b2:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e2b4:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e2b6:	7813      	ldrb	r3, [r2, #0]
 800e2b8:	2ba5      	cmp	r3, #165	; 0xa5
 800e2ba:	d0e1      	beq.n	800e280 <prvListTaskWithinSingleList.part.1+0x5c>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e7e6      	b.n	800e28e <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e2c0:	68cf      	ldr	r7, [r1, #12]
 800e2c2:	604f      	str	r7, [r1, #4]
 800e2c4:	e7c6      	b.n	800e254 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e2c6:	68cf      	ldr	r7, [r1, #12]
 800e2c8:	e7ba      	b.n	800e240 <prvListTaskWithinSingleList.part.1+0x1c>
 800e2ca:	46c0      	nop			; (mov r8, r8)

0800e2cc <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e2cc:	4b03      	ldr	r3, [pc, #12]	; (800e2dc <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	4b02      	ldr	r3, [pc, #8]	; (800e2e0 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e2d8:	601a      	str	r2, [r3, #0]
}
 800e2da:	4770      	bx	lr
 800e2dc:	20002438 	.word	0x20002438
 800e2e0:	200000c0 	.word	0x200000c0

0800e2e4 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e2e4:	4b0c      	ldr	r3, [pc, #48]	; (800e318 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e2e6:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e2e8:	685a      	ldr	r2, [r3, #4]
{
 800e2ea:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e2ec:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e2ee:	689a      	ldr	r2, [r3, #8]
 800e2f0:	4282      	cmp	r2, r0
 800e2f2:	d80a      	bhi.n	800e30a <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	6859      	ldr	r1, [r3, #4]
 800e2f8:	3104      	adds	r1, #4
 800e2fa:	f7ff fc05 	bl	800db08 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e2fe:	4b07      	ldr	r3, [pc, #28]	; (800e31c <prvAddCurrentTaskToDelayedList+0x38>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	42a2      	cmp	r2, r4
 800e304:	d900      	bls.n	800e308 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e306:	601c      	str	r4, [r3, #0]
}
 800e308:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e30a:	68d8      	ldr	r0, [r3, #12]
 800e30c:	6859      	ldr	r1, [r3, #4]
 800e30e:	3104      	adds	r1, #4
 800e310:	f7ff fbfa 	bl	800db08 <vListInsert>
 800e314:	e7f8      	b.n	800e308 <prvAddCurrentTaskToDelayedList+0x24>
 800e316:	46c0      	nop			; (mov r8, r8)
 800e318:	20002438 	.word	0x20002438
 800e31c:	200000c0 	.word	0x200000c0

0800e320 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800e320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e322:	464f      	mov	r7, r9
 800e324:	4646      	mov	r6, r8
 800e326:	46d6      	mov	lr, sl
 800e328:	b5c0      	push	{r6, r7, lr}
 800e32a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e32c:	4680      	mov	r8, r0
 800e32e:	000c      	movs	r4, r1
 800e330:	0015      	movs	r5, r2
 800e332:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e334:	2f00      	cmp	r7, #0
 800e336:	d100      	bne.n	800e33a <xTaskGenericCreate.part.5+0x1a>
 800e338:	e0ab      	b.n	800e492 <xTaskGenericCreate.part.5+0x172>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e33a:	2060      	movs	r0, #96	; 0x60
 800e33c:	f001 f8c4 	bl	800f4c8 <pvPortMalloc>
 800e340:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e342:	d100      	bne.n	800e346 <xTaskGenericCreate.part.5+0x26>
 800e344:	e0ae      	b.n	800e4a4 <xTaskGenericCreate.part.5+0x184>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e346:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800e348:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e34a:	002a      	movs	r2, r5
 800e34c:	0038      	movs	r0, r7
 800e34e:	21a5      	movs	r1, #165	; 0xa5
 800e350:	f004 fe42 	bl	8012fd8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e354:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e356:	1f2f      	subs	r7, r5, #4
 800e358:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e35a:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e35c:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e35e:	439f      	bics	r7, r3
 800e360:	0030      	movs	r0, r6
 800e362:	0033      	movs	r3, r6
 800e364:	3041      	adds	r0, #65	; 0x41
 800e366:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e368:	7822      	ldrb	r2, [r4, #0]
 800e36a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e36c:	7822      	ldrb	r2, [r4, #0]
 800e36e:	2a00      	cmp	r2, #0
 800e370:	d003      	beq.n	800e37a <xTaskGenericCreate.part.5+0x5a>
 800e372:	3301      	adds	r3, #1
 800e374:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e376:	4298      	cmp	r0, r3
 800e378:	d1f6      	bne.n	800e368 <xTaskGenericCreate.part.5+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e37a:	2340      	movs	r3, #64	; 0x40
 800e37c:	2200      	movs	r2, #0
 800e37e:	9d08      	ldr	r5, [sp, #32]
 800e380:	54f2      	strb	r2, [r6, r3]
 800e382:	2d06      	cmp	r5, #6
 800e384:	d84f      	bhi.n	800e426 <xTaskGenericCreate.part.5+0x106>
		pxTCB->uxMutexesHeld = 0;
 800e386:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e388:	1d33      	adds	r3, r6, #4
 800e38a:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800e38c:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e38e:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e390:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e392:	469a      	mov	sl, r3
 800e394:	f7ff fba8 	bl	800dae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e398:	0030      	movs	r0, r6
 800e39a:	3018      	adds	r0, #24
 800e39c:	f7ff fba4 	bl	800dae8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a0:	2307      	movs	r3, #7
 800e3a2:	1b5b      	subs	r3, r3, r5
 800e3a4:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e3a6:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e3a8:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e3aa:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e3ac:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e3ae:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3b0:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e3b2:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3b4:	4641      	mov	r1, r8
 800e3b6:	0038      	movs	r0, r7
 800e3b8:	f000 ffc0 	bl	800f33c <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3be:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d000      	beq.n	800e3c6 <xTaskGenericCreate.part.5+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e3c4:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e3c6:	f001 f801 	bl	800f3cc <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e3ca:	4c39      	ldr	r4, [pc, #228]	; (800e4b0 <xTaskGenericCreate.part.5+0x190>)
 800e3cc:	6923      	ldr	r3, [r4, #16]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	6123      	str	r3, [r4, #16]
			if( pxCurrentTCB == NULL )
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d02f      	beq.n	800e438 <xTaskGenericCreate.part.5+0x118>
				if( xSchedulerRunning == pdFALSE )
 800e3d8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d025      	beq.n	800e42a <xTaskGenericCreate.part.5+0x10a>
 800e3de:	4d35      	ldr	r5, [pc, #212]	; (800e4b4 <xTaskGenericCreate.part.5+0x194>)
			uxTaskNumber++;
 800e3e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			prvAddTaskToReadyList( pxNewTCB );
 800e3e2:	4a35      	ldr	r2, [pc, #212]	; (800e4b8 <xTaskGenericCreate.part.5+0x198>)
			uxTaskNumber++;
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	67e3      	str	r3, [r4, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3e8:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e3ea:	6811      	ldr	r1, [r2, #0]
 800e3ec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e3ee:	428b      	cmp	r3, r1
 800e3f0:	d817      	bhi.n	800e422 <xTaskGenericCreate.part.5+0x102>
 800e3f2:	0098      	lsls	r0, r3, #2
 800e3f4:	18c0      	adds	r0, r0, r3
 800e3f6:	0080      	lsls	r0, r0, #2
 800e3f8:	1828      	adds	r0, r5, r0
 800e3fa:	4651      	mov	r1, sl
 800e3fc:	f7ff fb78 	bl	800daf0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e400:	f000 fff0 	bl	800f3e4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e404:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			xReturn = pdPASS;
 800e406:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d004      	beq.n	800e416 <xTaskGenericCreate.part.5+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e40c:	6863      	ldr	r3, [r4, #4]
 800e40e:	9a08      	ldr	r2, [sp, #32]
 800e410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e412:	429a      	cmp	r2, r3
 800e414:	d83a      	bhi.n	800e48c <xTaskGenericCreate.part.5+0x16c>
}
 800e416:	0028      	movs	r0, r5
 800e418:	bc1c      	pop	{r2, r3, r4}
 800e41a:	4690      	mov	r8, r2
 800e41c:	4699      	mov	r9, r3
 800e41e:	46a2      	mov	sl, r4
 800e420:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	e7e5      	b.n	800e3f2 <xTaskGenericCreate.part.5+0xd2>
 800e426:	2506      	movs	r5, #6
 800e428:	e7ad      	b.n	800e386 <xTaskGenericCreate.part.5+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e42a:	6863      	ldr	r3, [r4, #4]
 800e42c:	9a08      	ldr	r2, [sp, #32]
 800e42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e430:	429a      	cmp	r2, r3
 800e432:	d3d4      	bcc.n	800e3de <xTaskGenericCreate.part.5+0xbe>
						pxCurrentTCB = pxNewTCB;
 800e434:	6066      	str	r6, [r4, #4]
 800e436:	e7d2      	b.n	800e3de <xTaskGenericCreate.part.5+0xbe>
				pxCurrentTCB =  pxNewTCB;
 800e438:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e43a:	6923      	ldr	r3, [r4, #16]
 800e43c:	4d1d      	ldr	r5, [pc, #116]	; (800e4b4 <xTaskGenericCreate.part.5+0x194>)
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d1ce      	bne.n	800e3e0 <xTaskGenericCreate.part.5+0xc0>
 800e442:	238c      	movs	r3, #140	; 0x8c
 800e444:	4698      	mov	r8, r3
 800e446:	002f      	movs	r7, r5
 800e448:	44a8      	add	r8, r5
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e44a:	0038      	movs	r0, r7
 800e44c:	3714      	adds	r7, #20
 800e44e:	f7ff fb3f 	bl	800dad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e452:	45b8      	cmp	r8, r7
 800e454:	d1f9      	bne.n	800e44a <xTaskGenericCreate.part.5+0x12a>
	vListInitialise( &xDelayedTaskList1 );
 800e456:	2314      	movs	r3, #20
 800e458:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800e45a:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800e45c:	44a0      	add	r8, r4
 800e45e:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 800e460:	3728      	adds	r7, #40	; 0x28
	vListInitialise( &xDelayedTaskList1 );
 800e462:	f7ff fb35 	bl	800dad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e466:	0038      	movs	r0, r7
 800e468:	f7ff fb32 	bl	800dad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e46c:	0020      	movs	r0, r4
 800e46e:	303c      	adds	r0, #60	; 0x3c
 800e470:	f7ff fb2e 	bl	800dad0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e474:	0020      	movs	r0, r4
 800e476:	3050      	adds	r0, #80	; 0x50
 800e478:	f7ff fb2a 	bl	800dad0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e47c:	0020      	movs	r0, r4
 800e47e:	3064      	adds	r0, #100	; 0x64
 800e480:	f7ff fb26 	bl	800dad0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e484:	4643      	mov	r3, r8
 800e486:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e488:	60e7      	str	r7, [r4, #12]
 800e48a:	e7a9      	b.n	800e3e0 <xTaskGenericCreate.part.5+0xc0>
				taskYIELD_IF_USING_PREEMPTION();
 800e48c:	f000 ff92 	bl	800f3b4 <vPortYield>
 800e490:	e7c1      	b.n	800e416 <xTaskGenericCreate.part.5+0xf6>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e492:	0090      	lsls	r0, r2, #2
 800e494:	f001 f818 	bl	800f4c8 <pvPortMalloc>
 800e498:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e49a:	d000      	beq.n	800e49e <xTaskGenericCreate.part.5+0x17e>
 800e49c:	e74d      	b.n	800e33a <xTaskGenericCreate.part.5+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e49e:	2501      	movs	r5, #1
 800e4a0:	426d      	negs	r5, r5
 800e4a2:	e7b8      	b.n	800e416 <xTaskGenericCreate.part.5+0xf6>
 800e4a4:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e4a6:	0038      	movs	r0, r7
 800e4a8:	f001 f88a 	bl	800f5c0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4ac:	426d      	negs	r5, r5
 800e4ae:	e7b2      	b.n	800e416 <xTaskGenericCreate.part.5+0xf6>
 800e4b0:	20002438 	.word	0x20002438
 800e4b4:	200024d4 	.word	0x200024d4
 800e4b8:	200024b8 	.word	0x200024b8

0800e4bc <vTaskSwitchContext.part.6>:
		xYieldPending = pdFALSE;
 800e4bc:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e4be:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800e4c0:	4d26      	ldr	r5, [pc, #152]	; (800e55c <vTaskSwitchContext.part.6+0xa0>)
 800e4c2:	606b      	str	r3, [r5, #4]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e4c4:	f7f9 ff74 	bl	80083b0 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e4c8:	68ab      	ldr	r3, [r5, #8]
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e4ca:	4c25      	ldr	r4, [pc, #148]	; (800e560 <vTaskSwitchContext.part.6+0xa4>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e4cc:	4298      	cmp	r0, r3
 800e4ce:	d904      	bls.n	800e4da <vTaskSwitchContext.part.6+0x1e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e4d0:	6862      	ldr	r2, [r4, #4]
 800e4d2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e4d4:	1acb      	subs	r3, r1, r3
 800e4d6:	181b      	adds	r3, r3, r0
 800e4d8:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e4da:	6862      	ldr	r2, [r4, #4]
 800e4dc:	6863      	ldr	r3, [r4, #4]
 800e4de:	6812      	ldr	r2, [r2, #0]
 800e4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e4e2:	60a8      	str	r0, [r5, #8]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d804      	bhi.n	800e4f2 <vTaskSwitchContext.part.6+0x36>
 800e4e8:	6860      	ldr	r0, [r4, #4]
 800e4ea:	6861      	ldr	r1, [r4, #4]
 800e4ec:	3134      	adds	r1, #52	; 0x34
 800e4ee:	f7fe fc5b 	bl	800cda8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e4f2:	6863      	ldr	r3, [r4, #4]
 800e4f4:	2214      	movs	r2, #20
 800e4f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e4f8:	491a      	ldr	r1, [pc, #104]	; (800e564 <vTaskSwitchContext.part.6+0xa8>)
 800e4fa:	f004 fd55 	bl	8012fa8 <memcmp>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d004      	beq.n	800e50c <vTaskSwitchContext.part.6+0x50>
 800e502:	6860      	ldr	r0, [r4, #4]
 800e504:	6861      	ldr	r1, [r4, #4]
 800e506:	3134      	adds	r1, #52	; 0x34
 800e508:	f7fe fc4e 	bl	800cda8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e50c:	6829      	ldr	r1, [r5, #0]
 800e50e:	4a16      	ldr	r2, [pc, #88]	; (800e568 <vTaskSwitchContext.part.6+0xac>)
 800e510:	e006      	b.n	800e520 <vTaskSwitchContext.part.6+0x64>
 800e512:	682b      	ldr	r3, [r5, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d018      	beq.n	800e54a <vTaskSwitchContext.part.6+0x8e>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	602b      	str	r3, [r5, #0]
 800e51e:	6829      	ldr	r1, [r5, #0]
 800e520:	008b      	lsls	r3, r1, #2
 800e522:	185b      	adds	r3, r3, r1
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	58d3      	ldr	r3, [r2, r3]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d0f2      	beq.n	800e512 <vTaskSwitchContext.part.6+0x56>
 800e52c:	6828      	ldr	r0, [r5, #0]
 800e52e:	0083      	lsls	r3, r0, #2
 800e530:	181b      	adds	r3, r3, r0
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	18d5      	adds	r5, r2, r3
 800e536:	6869      	ldr	r1, [r5, #4]
 800e538:	3308      	adds	r3, #8
 800e53a:	6849      	ldr	r1, [r1, #4]
 800e53c:	18d3      	adds	r3, r2, r3
 800e53e:	6069      	str	r1, [r5, #4]
 800e540:	4299      	cmp	r1, r3
 800e542:	d004      	beq.n	800e54e <vTaskSwitchContext.part.6+0x92>
 800e544:	68cb      	ldr	r3, [r1, #12]
 800e546:	6063      	str	r3, [r4, #4]
}
 800e548:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e54a:	b672      	cpsid	i
 800e54c:	e7fe      	b.n	800e54c <vTaskSwitchContext.part.6+0x90>
 800e54e:	2314      	movs	r3, #20
 800e550:	4343      	muls	r3, r0
 800e552:	6849      	ldr	r1, [r1, #4]
 800e554:	18d2      	adds	r2, r2, r3
 800e556:	6051      	str	r1, [r2, #4]
 800e558:	e7f4      	b.n	800e544 <vTaskSwitchContext.part.6+0x88>
 800e55a:	46c0      	nop			; (mov r8, r8)
 800e55c:	200024b8 	.word	0x200024b8
 800e560:	20002438 	.word	0x20002438
 800e564:	08017e0c 	.word	0x08017e0c
 800e568:	200024d4 	.word	0x200024d4

0800e56c <xTaskGenericCreate>:
{
 800e56c:	b530      	push	{r4, r5, lr}
 800e56e:	b085      	sub	sp, #20
 800e570:	9c08      	ldr	r4, [sp, #32]
	configASSERT( pxTaskCode );
 800e572:	2800      	cmp	r0, #0
 800e574:	d003      	beq.n	800e57e <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e576:	2c06      	cmp	r4, #6
 800e578:	d903      	bls.n	800e582 <xTaskGenericCreate+0x16>
 800e57a:	b672      	cpsid	i
 800e57c:	e7fe      	b.n	800e57c <xTaskGenericCreate+0x10>
	configASSERT( pxTaskCode );
 800e57e:	b672      	cpsid	i
 800e580:	e7fe      	b.n	800e580 <xTaskGenericCreate+0x14>
 800e582:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e584:	9400      	str	r4, [sp, #0]
 800e586:	9502      	str	r5, [sp, #8]
 800e588:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e58a:	9501      	str	r5, [sp, #4]
 800e58c:	f7ff fec8 	bl	800e320 <xTaskGenericCreate.part.5>
}
 800e590:	b005      	add	sp, #20
 800e592:	bd30      	pop	{r4, r5, pc}

0800e594 <uxTaskPriorityGet>:
	{
 800e594:	b510      	push	{r4, lr}
 800e596:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e598:	f000 ff18 	bl	800f3cc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e59c:	2c00      	cmp	r4, #0
 800e59e:	d101      	bne.n	800e5a4 <uxTaskPriorityGet+0x10>
 800e5a0:	4b03      	ldr	r3, [pc, #12]	; (800e5b0 <uxTaskPriorityGet+0x1c>)
 800e5a2:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800e5a4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e5a6:	f000 ff1d 	bl	800f3e4 <vPortExitCritical>
	}
 800e5aa:	0020      	movs	r0, r4
 800e5ac:	bd10      	pop	{r4, pc}
 800e5ae:	46c0      	nop			; (mov r8, r8)
 800e5b0:	20002438 	.word	0x20002438

0800e5b4 <vTaskPrioritySet>:
	{
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	0004      	movs	r4, r0
 800e5b8:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e5ba:	2906      	cmp	r1, #6
 800e5bc:	d901      	bls.n	800e5c2 <vTaskPrioritySet+0xe>
 800e5be:	b672      	cpsid	i
 800e5c0:	e7fe      	b.n	800e5c0 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e5c2:	f000 ff03 	bl	800f3cc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	d101      	bne.n	800e5ce <vTaskPrioritySet+0x1a>
 800e5ca:	4b20      	ldr	r3, [pc, #128]	; (800e64c <vTaskPrioritySet+0x98>)
 800e5cc:	685c      	ldr	r4, [r3, #4]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e5ce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e5d0:	4295      	cmp	r5, r2
 800e5d2:	d01f      	beq.n	800e614 <vTaskPrioritySet+0x60>
					if( pxTCB != pxCurrentTCB )
 800e5d4:	4b1d      	ldr	r3, [pc, #116]	; (800e64c <vTaskPrioritySet+0x98>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e5d6:	d931      	bls.n	800e63c <vTaskPrioritySet+0x88>
					if( pxTCB != pxCurrentTCB )
 800e5d8:	6859      	ldr	r1, [r3, #4]
 800e5da:	42a1      	cmp	r1, r4
 800e5dc:	d033      	beq.n	800e646 <vTaskPrioritySet+0x92>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e5de:	2600      	movs	r6, #0
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	429d      	cmp	r5, r3
 800e5e6:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e5ea:	428a      	cmp	r2, r1
 800e5ec:	d100      	bne.n	800e5f0 <vTaskPrioritySet+0x3c>
						pxTCB->uxPriority = uxNewPriority;
 800e5ee:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5f0:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e5f2:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	db02      	blt.n	800e5fe <vTaskPrioritySet+0x4a>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f8:	2207      	movs	r2, #7
 800e5fa:	1b55      	subs	r5, r2, r5
 800e5fc:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e5fe:	2314      	movs	r3, #20
 800e600:	434b      	muls	r3, r1
 800e602:	4d13      	ldr	r5, [pc, #76]	; (800e650 <vTaskPrioritySet+0x9c>)
 800e604:	6962      	ldr	r2, [r4, #20]
 800e606:	18eb      	adds	r3, r5, r3
 800e608:	429a      	cmp	r2, r3
 800e60a:	d006      	beq.n	800e61a <vTaskPrioritySet+0x66>
				if( xYieldRequired == pdTRUE )
 800e60c:	2e01      	cmp	r6, #1
 800e60e:	d101      	bne.n	800e614 <vTaskPrioritySet+0x60>
					taskYIELD_IF_USING_PREEMPTION();
 800e610:	f000 fed0 	bl	800f3b4 <vPortYield>
		taskEXIT_CRITICAL();
 800e614:	f000 fee6 	bl	800f3e4 <vPortExitCritical>
	}
 800e618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e61a:	1d27      	adds	r7, r4, #4
 800e61c:	0038      	movs	r0, r7
 800e61e:	f7ff fa8b 	bl	800db38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e622:	4a0c      	ldr	r2, [pc, #48]	; (800e654 <vTaskPrioritySet+0xa0>)
 800e624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e626:	6811      	ldr	r1, [r2, #0]
 800e628:	428b      	cmp	r3, r1
 800e62a:	d900      	bls.n	800e62e <vTaskPrioritySet+0x7a>
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	2014      	movs	r0, #20
 800e630:	4358      	muls	r0, r3
 800e632:	0039      	movs	r1, r7
 800e634:	1828      	adds	r0, r5, r0
 800e636:	f7ff fa5b 	bl	800daf0 <vListInsertEnd>
 800e63a:	e7e7      	b.n	800e60c <vTaskPrioritySet+0x58>
				else if( pxTCB == pxCurrentTCB )
 800e63c:	685e      	ldr	r6, [r3, #4]
 800e63e:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e640:	4273      	negs	r3, r6
 800e642:	415e      	adcs	r6, r3
 800e644:	e7d0      	b.n	800e5e8 <vTaskPrioritySet+0x34>
	BaseType_t xYieldRequired = pdFALSE;
 800e646:	2600      	movs	r6, #0
 800e648:	e7ce      	b.n	800e5e8 <vTaskPrioritySet+0x34>
 800e64a:	46c0      	nop			; (mov r8, r8)
 800e64c:	20002438 	.word	0x20002438
 800e650:	200024d4 	.word	0x200024d4
 800e654:	200024b8 	.word	0x200024b8

0800e658 <vTaskStartScheduler>:
{
 800e658:	b510      	push	{r4, lr}
 800e65a:	2400      	movs	r4, #0
 800e65c:	b084      	sub	sp, #16
 800e65e:	9402      	str	r4, [sp, #8]
 800e660:	9401      	str	r4, [sp, #4]
 800e662:	9400      	str	r4, [sp, #0]
 800e664:	2300      	movs	r3, #0
 800e666:	22a0      	movs	r2, #160	; 0xa0
 800e668:	490b      	ldr	r1, [pc, #44]	; (800e698 <vTaskStartScheduler+0x40>)
 800e66a:	480c      	ldr	r0, [pc, #48]	; (800e69c <vTaskStartScheduler+0x44>)
 800e66c:	f7ff fe58 	bl	800e320 <xTaskGenericCreate.part.5>
		if( xReturn == pdPASS )
 800e670:	2801      	cmp	r0, #1
 800e672:	d003      	beq.n	800e67c <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e674:	2800      	cmp	r0, #0
 800e676:	d10d      	bne.n	800e694 <vTaskStartScheduler+0x3c>
 800e678:	b672      	cpsid	i
 800e67a:	e7fe      	b.n	800e67a <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e67c:	f000 fcc0 	bl	800f000 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e680:	2801      	cmp	r0, #1
 800e682:	d1f7      	bne.n	800e674 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e684:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e686:	4b06      	ldr	r3, [pc, #24]	; (800e6a0 <vTaskStartScheduler+0x48>)
 800e688:	6798      	str	r0, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800e68a:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e68c:	f7f9 fe80 	bl	8008390 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e690:	f000 fe66 	bl	800f360 <xPortStartScheduler>
}
 800e694:	b004      	add	sp, #16
 800e696:	bd10      	pop	{r4, pc}
 800e698:	0801a61c 	.word	0x0801a61c
 800e69c:	0800e8e9 	.word	0x0800e8e9
 800e6a0:	20002438 	.word	0x20002438

0800e6a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e6a4:	4a02      	ldr	r2, [pc, #8]	; (800e6b0 <vTaskSuspendAll+0xc>)
 800e6a6:	6913      	ldr	r3, [r2, #16]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	6113      	str	r3, [r2, #16]
}
 800e6ac:	4770      	bx	lr
 800e6ae:	46c0      	nop			; (mov r8, r8)
 800e6b0:	200024b8 	.word	0x200024b8

0800e6b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e6b4:	4b01      	ldr	r3, [pc, #4]	; (800e6bc <xTaskGetTickCount+0x8>)
 800e6b6:	6898      	ldr	r0, [r3, #8]
}
 800e6b8:	4770      	bx	lr
 800e6ba:	46c0      	nop			; (mov r8, r8)
 800e6bc:	20002438 	.word	0x20002438

0800e6c0 <xTaskGetTickCountFromISR>:
 800e6c0:	4b01      	ldr	r3, [pc, #4]	; (800e6c8 <xTaskGetTickCountFromISR+0x8>)
 800e6c2:	6898      	ldr	r0, [r3, #8]
 800e6c4:	4770      	bx	lr
 800e6c6:	46c0      	nop			; (mov r8, r8)
 800e6c8:	20002438 	.word	0x20002438

0800e6cc <xTaskIncrementTick>:
{
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	4645      	mov	r5, r8
 800e6d0:	46de      	mov	lr, fp
 800e6d2:	4657      	mov	r7, sl
 800e6d4:	464e      	mov	r6, r9
 800e6d6:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6d8:	4d3e      	ldr	r5, [pc, #248]	; (800e7d4 <xTaskIncrementTick+0x108>)
 800e6da:	692b      	ldr	r3, [r5, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d119      	bne.n	800e714 <xTaskIncrementTick+0x48>
		++xTickCount;
 800e6e0:	4c3d      	ldr	r4, [pc, #244]	; (800e7d8 <xTaskIncrementTick+0x10c>)
 800e6e2:	68a3      	ldr	r3, [r4, #8]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	60a3      	str	r3, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800e6e8:	68a3      	ldr	r3, [r4, #8]
 800e6ea:	469a      	mov	sl, r3
			if( xConstTickCount == ( TickType_t ) 0U )
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d020      	beq.n	800e732 <xTaskIncrementTick+0x66>
 800e6f0:	4f3a      	ldr	r7, [pc, #232]	; (800e7dc <xTaskIncrementTick+0x110>)
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e6f2:	683b      	ldr	r3, [r7, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e6f4:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e6f6:	4553      	cmp	r3, sl
 800e6f8:	d921      	bls.n	800e73e <xTaskIncrementTick+0x72>
 800e6fa:	4b39      	ldr	r3, [pc, #228]	; (800e7e0 <xTaskIncrementTick+0x114>)
 800e6fc:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6fe:	6863      	ldr	r3, [r4, #4]
 800e700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e702:	0093      	lsls	r3, r2, #2
 800e704:	189b      	adds	r3, r3, r2
 800e706:	464a      	mov	r2, r9
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	58d3      	ldr	r3, [r2, r3]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d905      	bls.n	800e71c <xTaskIncrementTick+0x50>
				xSwitchRequired = pdTRUE;
 800e710:	2601      	movs	r6, #1
 800e712:	e003      	b.n	800e71c <xTaskIncrementTick+0x50>
BaseType_t xSwitchRequired = pdFALSE;
 800e714:	2600      	movs	r6, #0
		++uxPendedTicks;
 800e716:	69ab      	ldr	r3, [r5, #24]
 800e718:	3301      	adds	r3, #1
 800e71a:	61ab      	str	r3, [r5, #24]
		if( xYieldPending != pdFALSE )
 800e71c:	686b      	ldr	r3, [r5, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d000      	beq.n	800e724 <xTaskIncrementTick+0x58>
			xSwitchRequired = pdTRUE;
 800e722:	2601      	movs	r6, #1
}
 800e724:	0030      	movs	r0, r6
 800e726:	bc3c      	pop	{r2, r3, r4, r5}
 800e728:	4690      	mov	r8, r2
 800e72a:	4699      	mov	r9, r3
 800e72c:	46a2      	mov	sl, r4
 800e72e:	46ab      	mov	fp, r5
 800e730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d039      	beq.n	800e7ae <xTaskIncrementTick+0xe2>
 800e73a:	b672      	cpsid	i
 800e73c:	e7fe      	b.n	800e73c <xTaskIncrementTick+0x70>
 800e73e:	4b28      	ldr	r3, [pc, #160]	; (800e7e0 <xTaskIncrementTick+0x114>)
 800e740:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d02c      	beq.n	800e7a4 <xTaskIncrementTick+0xd8>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e74a:	6823      	ldr	r3, [r4, #0]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	4698      	mov	r8, r3
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e752:	685b      	ldr	r3, [r3, #4]
						if( xConstTickCount < xItemValue )
 800e754:	459a      	cmp	sl, r3
 800e756:	d328      	bcc.n	800e7aa <xTaskIncrementTick+0xde>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e758:	2304      	movs	r3, #4
 800e75a:	4443      	add	r3, r8
 800e75c:	0018      	movs	r0, r3
 800e75e:	469b      	mov	fp, r3
 800e760:	f7ff f9ea 	bl	800db38 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e764:	4643      	mov	r3, r8
 800e766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <xTaskIncrementTick+0xa8>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e76c:	4640      	mov	r0, r8
 800e76e:	3018      	adds	r0, #24
 800e770:	f7ff f9e2 	bl	800db38 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e774:	4643      	mov	r3, r8
 800e776:	682a      	ldr	r2, [r5, #0]
 800e778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d900      	bls.n	800e780 <xTaskIncrementTick+0xb4>
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	0098      	lsls	r0, r3, #2
 800e782:	18c0      	adds	r0, r0, r3
 800e784:	0080      	lsls	r0, r0, #2
 800e786:	4448      	add	r0, r9
 800e788:	4659      	mov	r1, fp
 800e78a:	f7ff f9b1 	bl	800daf0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e78e:	4642      	mov	r2, r8
 800e790:	6863      	ldr	r3, [r4, #4]
 800e792:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e796:	429a      	cmp	r2, r3
 800e798:	d3d3      	bcc.n	800e742 <xTaskIncrementTick+0x76>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e79a:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e79c:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1d2      	bne.n	800e74a <xTaskIncrementTick+0x7e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	603b      	str	r3, [r7, #0]
						break;
 800e7a8:	e7a9      	b.n	800e6fe <xTaskIncrementTick+0x32>
							xNextTaskUnblockTime = xItemValue;
 800e7aa:	603b      	str	r3, [r7, #0]
							break;
 800e7ac:	e7a7      	b.n	800e6fe <xTaskIncrementTick+0x32>
				taskSWITCH_DELAYED_LISTS();
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	68e2      	ldr	r2, [r4, #12]
 800e7b2:	6022      	str	r2, [r4, #0]
 800e7b4:	60e3      	str	r3, [r4, #12]
 800e7b6:	696b      	ldr	r3, [r5, #20]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	616b      	str	r3, [r5, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d103      	bne.n	800e7cc <xTaskIncrementTick+0x100>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7c4:	4f05      	ldr	r7, [pc, #20]	; (800e7dc <xTaskIncrementTick+0x110>)
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	603b      	str	r3, [r7, #0]
 800e7ca:	e792      	b.n	800e6f2 <xTaskIncrementTick+0x26>
 800e7cc:	f7ff fd7e 	bl	800e2cc <prvResetNextTaskUnblockTime.part.2>
 800e7d0:	e78e      	b.n	800e6f0 <xTaskIncrementTick+0x24>
 800e7d2:	46c0      	nop			; (mov r8, r8)
 800e7d4:	200024b8 	.word	0x200024b8
 800e7d8:	20002438 	.word	0x20002438
 800e7dc:	200000c0 	.word	0x200000c0
 800e7e0:	200024d4 	.word	0x200024d4

0800e7e4 <xTaskResumeAll>:
{
 800e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e6:	46ce      	mov	lr, r9
 800e7e8:	4647      	mov	r7, r8
	configASSERT( uxSchedulerSuspended );
 800e7ea:	4c2b      	ldr	r4, [pc, #172]	; (800e898 <xTaskResumeAll+0xb4>)
{
 800e7ec:	b580      	push	{r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d101      	bne.n	800e7f8 <xTaskResumeAll+0x14>
 800e7f4:	b672      	cpsid	i
 800e7f6:	e7fe      	b.n	800e7f6 <xTaskResumeAll+0x12>
	taskENTER_CRITICAL();
 800e7f8:	f000 fde8 	bl	800f3cc <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e7fc:	6923      	ldr	r3, [r4, #16]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	6123      	str	r3, [r4, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e802:	6923      	ldr	r3, [r4, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d12d      	bne.n	800e864 <xTaskResumeAll+0x80>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e808:	4d24      	ldr	r5, [pc, #144]	; (800e89c <xTaskResumeAll+0xb8>)
 800e80a:	692b      	ldr	r3, [r5, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d029      	beq.n	800e864 <xTaskResumeAll+0x80>
					prvAddTaskToReadyList( pxTCB );
 800e810:	4b23      	ldr	r3, [pc, #140]	; (800e8a0 <xTaskResumeAll+0xbc>)
 800e812:	4699      	mov	r9, r3
						xYieldPending = pdTRUE;
 800e814:	2301      	movs	r3, #1
 800e816:	4698      	mov	r8, r3
 800e818:	e01a      	b.n	800e850 <xTaskResumeAll+0x6c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e81a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e81c:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e81e:	0030      	movs	r0, r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e820:	1d37      	adds	r7, r6, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e822:	3018      	adds	r0, #24
 800e824:	f7ff f988 	bl	800db38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e828:	0038      	movs	r0, r7
 800e82a:	f7ff f985 	bl	800db38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e82e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e830:	6822      	ldr	r2, [r4, #0]
 800e832:	4293      	cmp	r3, r2
 800e834:	d900      	bls.n	800e838 <xTaskResumeAll+0x54>
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	0098      	lsls	r0, r3, #2
 800e83a:	18c0      	adds	r0, r0, r3
 800e83c:	0080      	lsls	r0, r0, #2
 800e83e:	4448      	add	r0, r9
 800e840:	0039      	movs	r1, r7
 800e842:	f7ff f955 	bl	800daf0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e846:	686b      	ldr	r3, [r5, #4]
 800e848:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d211      	bcs.n	800e874 <xTaskResumeAll+0x90>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e850:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1e1      	bne.n	800e81a <xTaskResumeAll+0x36>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e856:	69a3      	ldr	r3, [r4, #24]
							xYieldPending = pdTRUE;
 800e858:	2501      	movs	r5, #1
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d110      	bne.n	800e880 <xTaskResumeAll+0x9c>
				if( xYieldPending == pdTRUE )
 800e85e:	6864      	ldr	r4, [r4, #4]
 800e860:	2c01      	cmp	r4, #1
 800e862:	d00a      	beq.n	800e87a <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 800e864:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e866:	f000 fdbd 	bl	800f3e4 <vPortExitCritical>
}
 800e86a:	0020      	movs	r0, r4
 800e86c:	bc0c      	pop	{r2, r3}
 800e86e:	4690      	mov	r8, r2
 800e870:	4699      	mov	r9, r3
 800e872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e874:	4643      	mov	r3, r8
 800e876:	6063      	str	r3, [r4, #4]
 800e878:	e7ea      	b.n	800e850 <xTaskResumeAll+0x6c>
					taskYIELD_IF_USING_PREEMPTION();
 800e87a:	f000 fd9b 	bl	800f3b4 <vPortYield>
 800e87e:	e7f2      	b.n	800e866 <xTaskResumeAll+0x82>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e880:	69a3      	ldr	r3, [r4, #24]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d0eb      	beq.n	800e85e <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800e886:	f7ff ff21 	bl	800e6cc <xTaskIncrementTick>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d000      	beq.n	800e890 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
 800e88e:	6065      	str	r5, [r4, #4]
						--uxPendedTicks;
 800e890:	69a3      	ldr	r3, [r4, #24]
 800e892:	3b01      	subs	r3, #1
 800e894:	61a3      	str	r3, [r4, #24]
 800e896:	e7f3      	b.n	800e880 <xTaskResumeAll+0x9c>
 800e898:	200024b8 	.word	0x200024b8
 800e89c:	20002438 	.word	0x20002438
 800e8a0:	200024d4 	.word	0x200024d4

0800e8a4 <vTaskDelay>:
	{
 800e8a4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d016      	beq.n	800e8d8 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e8aa:	4b0d      	ldr	r3, [pc, #52]	; (800e8e0 <vTaskDelay+0x3c>)
 800e8ac:	691a      	ldr	r2, [r3, #16]
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	d001      	beq.n	800e8b6 <vTaskDelay+0x12>
 800e8b2:	b672      	cpsid	i
 800e8b4:	e7fe      	b.n	800e8b4 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800e8b6:	691a      	ldr	r2, [r3, #16]
 800e8b8:	3201      	adds	r2, #1
 800e8ba:	611a      	str	r2, [r3, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e8bc:	4b09      	ldr	r3, [pc, #36]	; (800e8e4 <vTaskDelay+0x40>)
 800e8be:	689c      	ldr	r4, [r3, #8]
 800e8c0:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e8c2:	6858      	ldr	r0, [r3, #4]
 800e8c4:	3004      	adds	r0, #4
 800e8c6:	f7ff f937 	bl	800db38 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e8ca:	0020      	movs	r0, r4
 800e8cc:	f7ff fd0a 	bl	800e2e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e8d0:	f7ff ff88 	bl	800e7e4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d101      	bne.n	800e8dc <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e8d8:	f000 fd6c 	bl	800f3b4 <vPortYield>
	}
 800e8dc:	bd10      	pop	{r4, pc}
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	200024b8 	.word	0x200024b8
 800e8e4:	20002438 	.word	0x20002438

0800e8e8 <prvIdleTask>:
{
 800e8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ea:	4e15      	ldr	r6, [pc, #84]	; (800e940 <prvIdleTask+0x58>)
 800e8ec:	4c15      	ldr	r4, [pc, #84]	; (800e944 <prvIdleTask+0x5c>)
 800e8ee:	4f16      	ldr	r7, [pc, #88]	; (800e948 <prvIdleTask+0x60>)
 800e8f0:	e007      	b.n	800e902 <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e8f2:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e8f4:	6d35      	ldr	r5, [r6, #80]	; 0x50
	++uxSchedulerSuspended;
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e8fa:	f7ff ff73 	bl	800e7e4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	d108      	bne.n	800e914 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e902:	68e3      	ldr	r3, [r4, #12]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1f4      	bne.n	800e8f2 <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d9f9      	bls.n	800e902 <prvIdleTask+0x1a>
				taskYIELD();
 800e90e:	f000 fd51 	bl	800f3b4 <vPortYield>
 800e912:	e7f6      	b.n	800e902 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e914:	f000 fd5a 	bl	800f3cc <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e918:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800e91a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e91c:	1d28      	adds	r0, r5, #4
 800e91e:	f7ff f90b 	bl	800db38 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e922:	6933      	ldr	r3, [r6, #16]
 800e924:	3b01      	subs	r3, #1
 800e926:	6133      	str	r3, [r6, #16]
					--uxTasksDeleted;
 800e928:	68e3      	ldr	r3, [r4, #12]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e92e:	f000 fd59 	bl	800f3e4 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e932:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e934:	f000 fe44 	bl	800f5c0 <vPortFree>
		vPortFree( pxTCB );
 800e938:	0028      	movs	r0, r5
 800e93a:	f000 fe41 	bl	800f5c0 <vPortFree>
 800e93e:	e7e0      	b.n	800e902 <prvIdleTask+0x1a>
 800e940:	20002438 	.word	0x20002438
 800e944:	200024b8 	.word	0x200024b8
 800e948:	200024d4 	.word	0x200024d4

0800e94c <uxTaskGetSystemState>:
	{
 800e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e94e:	4647      	mov	r7, r8
 800e950:	46ce      	mov	lr, r9
 800e952:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e954:	4a33      	ldr	r2, [pc, #204]	; (800ea24 <uxTaskGetSystemState+0xd8>)
	{
 800e956:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e958:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e95a:	4f33      	ldr	r7, [pc, #204]	; (800ea28 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e95c:	3301      	adds	r3, #1
 800e95e:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e960:	693b      	ldr	r3, [r7, #16]
	{
 800e962:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e964:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e966:	428b      	cmp	r3, r1
 800e968:	d82c      	bhi.n	800e9c4 <uxTaskGetSystemState+0x78>
 800e96a:	238c      	movs	r3, #140	; 0x8c
 800e96c:	425b      	negs	r3, r3
 800e96e:	4699      	mov	r9, r3
 800e970:	4c2e      	ldr	r4, [pc, #184]	; (800ea2c <uxTaskGetSystemState+0xe0>)
 800e972:	2300      	movs	r3, #0
 800e974:	44a1      	add	r9, r4
 800e976:	e002      	b.n	800e97e <uxTaskGetSystemState+0x32>
 800e978:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e97a:	454c      	cmp	r4, r9
 800e97c:	d00d      	beq.n	800e99a <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e97e:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e980:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e982:	2a00      	cmp	r2, #0
 800e984:	d0f8      	beq.n	800e978 <uxTaskGetSystemState+0x2c>
 800e986:	0021      	movs	r1, r4
 800e988:	2201      	movs	r2, #1
 800e98a:	f7ff fc4b 	bl	800e224 <prvListTaskWithinSingleList.part.1>
 800e98e:	182d      	adds	r5, r5, r0
 800e990:	016b      	lsls	r3, r5, #5
 800e992:	3c14      	subs	r4, #20
 800e994:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e996:	454c      	cmp	r4, r9
 800e998:	d1f1      	bne.n	800e97e <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e99a:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e99c:	680b      	ldr	r3, [r1, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d121      	bne.n	800e9e6 <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e9a2:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e9a4:	680b      	ldr	r3, [r1, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d127      	bne.n	800e9fa <uxTaskGetSystemState+0xae>
 800e9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d12d      	bne.n	800ea0c <uxTaskGetSystemState+0xc0>
 800e9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10d      	bne.n	800e9d2 <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e9b6:	4643      	mov	r3, r8
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e9bc:	f7f9 fcf8 	bl	80083b0 <ulMainGetRunTimeCounterValue>
 800e9c0:	4643      	mov	r3, r8
 800e9c2:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e9c4:	f7ff ff0e 	bl	800e7e4 <xTaskResumeAll>
	}
 800e9c8:	0028      	movs	r0, r5
 800e9ca:	bc0c      	pop	{r2, r3}
 800e9cc:	4690      	mov	r8, r2
 800e9ce:	4699      	mov	r9, r3
 800e9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d2:	0039      	movs	r1, r7
 800e9d4:	2203      	movs	r2, #3
 800e9d6:	3164      	adds	r1, #100	; 0x64
 800e9d8:	f7ff fc24 	bl	800e224 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e9dc:	4643      	mov	r3, r8
 800e9de:	182d      	adds	r5, r5, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1eb      	bne.n	800e9bc <uxTaskGetSystemState+0x70>
 800e9e4:	e7ee      	b.n	800e9c4 <uxTaskGetSystemState+0x78>
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	f7ff fc1c 	bl	800e224 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e9ec:	68f9      	ldr	r1, [r7, #12]
 800e9ee:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e9f0:	680b      	ldr	r3, [r1, #0]
 800e9f2:	0168      	lsls	r0, r5, #5
 800e9f4:	1830      	adds	r0, r6, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d0d7      	beq.n	800e9aa <uxTaskGetSystemState+0x5e>
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	f7ff fc12 	bl	800e224 <prvListTaskWithinSingleList.part.1>
 800ea00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea02:	182d      	adds	r5, r5, r0
 800ea04:	0168      	lsls	r0, r5, #5
 800ea06:	1830      	adds	r0, r6, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d0d1      	beq.n	800e9b0 <uxTaskGetSystemState+0x64>
 800ea0c:	0039      	movs	r1, r7
 800ea0e:	2204      	movs	r2, #4
 800ea10:	3150      	adds	r1, #80	; 0x50
 800ea12:	f7ff fc07 	bl	800e224 <prvListTaskWithinSingleList.part.1>
 800ea16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea18:	182d      	adds	r5, r5, r0
 800ea1a:	0168      	lsls	r0, r5, #5
 800ea1c:	1830      	adds	r0, r6, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0c9      	beq.n	800e9b6 <uxTaskGetSystemState+0x6a>
 800ea22:	e7d6      	b.n	800e9d2 <uxTaskGetSystemState+0x86>
 800ea24:	200024b8 	.word	0x200024b8
 800ea28:	20002438 	.word	0x20002438
 800ea2c:	2000254c 	.word	0x2000254c

0800ea30 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea30:	4b05      	ldr	r3, [pc, #20]	; (800ea48 <vTaskSwitchContext+0x18>)
{
 800ea32:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea34:	691a      	ldr	r2, [r3, #16]
 800ea36:	2a00      	cmp	r2, #0
 800ea38:	d002      	beq.n	800ea40 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	605a      	str	r2, [r3, #4]
}
 800ea3e:	bd10      	pop	{r4, pc}
 800ea40:	f7ff fd3c 	bl	800e4bc <vTaskSwitchContext.part.6>
 800ea44:	e7fb      	b.n	800ea3e <vTaskSwitchContext+0xe>
 800ea46:	46c0      	nop			; (mov r8, r8)
 800ea48:	200024b8 	.word	0x200024b8

0800ea4c <vTaskPlaceOnEventList>:
{
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	000d      	movs	r5, r1
	configASSERT( pxEventList );
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d00f      	beq.n	800ea74 <vTaskPlaceOnEventList+0x28>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea54:	4c0c      	ldr	r4, [pc, #48]	; (800ea88 <vTaskPlaceOnEventList+0x3c>)
 800ea56:	6861      	ldr	r1, [r4, #4]
 800ea58:	3118      	adds	r1, #24
 800ea5a:	f7ff f855 	bl	800db08 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ea5e:	6860      	ldr	r0, [r4, #4]
 800ea60:	3004      	adds	r0, #4
 800ea62:	f7ff f869 	bl	800db38 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800ea66:	1c6b      	adds	r3, r5, #1
 800ea68:	d006      	beq.n	800ea78 <vTaskPlaceOnEventList+0x2c>
			xTimeToWake = xTickCount + xTicksToWait;
 800ea6a:	68a0      	ldr	r0, [r4, #8]
 800ea6c:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ea6e:	f7ff fc39 	bl	800e2e4 <prvAddCurrentTaskToDelayedList>
}
 800ea72:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800ea74:	b672      	cpsid	i
 800ea76:	e7fe      	b.n	800ea76 <vTaskPlaceOnEventList+0x2a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ea78:	0020      	movs	r0, r4
 800ea7a:	6861      	ldr	r1, [r4, #4]
 800ea7c:	3064      	adds	r0, #100	; 0x64
 800ea7e:	3104      	adds	r1, #4
 800ea80:	f7ff f836 	bl	800daf0 <vListInsertEnd>
 800ea84:	e7f5      	b.n	800ea72 <vTaskPlaceOnEventList+0x26>
 800ea86:	46c0      	nop			; (mov r8, r8)
 800ea88:	20002438 	.word	0x20002438

0800ea8c <vTaskPlaceOnEventListRestricted>:
	{
 800ea8c:	b570      	push	{r4, r5, r6, lr}
 800ea8e:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800ea90:	2800      	cmp	r0, #0
 800ea92:	d101      	bne.n	800ea98 <vTaskPlaceOnEventListRestricted+0xc>
 800ea94:	b672      	cpsid	i
 800ea96:	e7fe      	b.n	800ea96 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea98:	4c06      	ldr	r4, [pc, #24]	; (800eab4 <vTaskPlaceOnEventListRestricted+0x28>)
 800ea9a:	6861      	ldr	r1, [r4, #4]
 800ea9c:	3118      	adds	r1, #24
 800ea9e:	f7ff f827 	bl	800daf0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eaa2:	6860      	ldr	r0, [r4, #4]
 800eaa4:	3004      	adds	r0, #4
 800eaa6:	f7ff f847 	bl	800db38 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800eaaa:	68a0      	ldr	r0, [r4, #8]
 800eaac:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eaae:	f7ff fc19 	bl	800e2e4 <prvAddCurrentTaskToDelayedList>
	}
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	20002438 	.word	0x20002438

0800eab8 <xTaskRemoveFromEventList>:
{
 800eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800eaba:	68c3      	ldr	r3, [r0, #12]
 800eabc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800eabe:	2c00      	cmp	r4, #0
 800eac0:	d024      	beq.n	800eb0c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eac2:	0027      	movs	r7, r4
 800eac4:	3718      	adds	r7, #24
 800eac6:	0038      	movs	r0, r7
 800eac8:	f7ff f836 	bl	800db38 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eacc:	4d14      	ldr	r5, [pc, #80]	; (800eb20 <xTaskRemoveFromEventList+0x68>)
 800eace:	692b      	ldr	r3, [r5, #16]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d11d      	bne.n	800eb10 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ead4:	1d26      	adds	r6, r4, #4
 800ead6:	0030      	movs	r0, r6
 800ead8:	f7ff f82e 	bl	800db38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eadc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eade:	682a      	ldr	r2, [r5, #0]
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d900      	bls.n	800eae6 <xTaskRemoveFromEventList+0x2e>
 800eae4:	602b      	str	r3, [r5, #0]
 800eae6:	0098      	lsls	r0, r3, #2
 800eae8:	18c0      	adds	r0, r0, r3
 800eaea:	4b0e      	ldr	r3, [pc, #56]	; (800eb24 <xTaskRemoveFromEventList+0x6c>)
 800eaec:	0080      	lsls	r0, r0, #2
 800eaee:	0031      	movs	r1, r6
 800eaf0:	18c0      	adds	r0, r0, r3
 800eaf2:	f7fe fffd 	bl	800daf0 <vListInsertEnd>
 800eaf6:	4e0c      	ldr	r6, [pc, #48]	; (800eb28 <xTaskRemoveFromEventList+0x70>)
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eaf8:	6873      	ldr	r3, [r6, #4]
 800eafa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800eafe:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d902      	bls.n	800eb0a <xTaskRemoveFromEventList+0x52>
		xYieldPending = pdTRUE;
 800eb04:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800eb06:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800eb08:	606b      	str	r3, [r5, #4]
}
 800eb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxUnblockedTCB );
 800eb0c:	b672      	cpsid	i
 800eb0e:	e7fe      	b.n	800eb0e <xTaskRemoveFromEventList+0x56>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb10:	4e05      	ldr	r6, [pc, #20]	; (800eb28 <xTaskRemoveFromEventList+0x70>)
 800eb12:	0039      	movs	r1, r7
 800eb14:	0030      	movs	r0, r6
 800eb16:	303c      	adds	r0, #60	; 0x3c
 800eb18:	f7fe ffea 	bl	800daf0 <vListInsertEnd>
 800eb1c:	e7ec      	b.n	800eaf8 <xTaskRemoveFromEventList+0x40>
 800eb1e:	46c0      	nop			; (mov r8, r8)
 800eb20:	200024b8 	.word	0x200024b8
 800eb24:	200024d4 	.word	0x200024d4
 800eb28:	20002438 	.word	0x20002438

0800eb2c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d006      	beq.n	800eb3e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb30:	4b04      	ldr	r3, [pc, #16]	; (800eb44 <vTaskSetTimeOutState+0x18>)
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb36:	4b04      	ldr	r3, [pc, #16]	; (800eb48 <vTaskSetTimeOutState+0x1c>)
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	6043      	str	r3, [r0, #4]
}
 800eb3c:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800eb3e:	b672      	cpsid	i
 800eb40:	e7fe      	b.n	800eb40 <vTaskSetTimeOutState+0x14>
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	200024b8 	.word	0x200024b8
 800eb48:	20002438 	.word	0x20002438

0800eb4c <xTaskCheckForTimeOut>:
{
 800eb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb4e:	0004      	movs	r4, r0
 800eb50:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d025      	beq.n	800eba2 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800eb56:	2900      	cmp	r1, #0
 800eb58:	d021      	beq.n	800eb9e <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800eb5a:	f000 fc37 	bl	800f3cc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800eb5e:	4f13      	ldr	r7, [pc, #76]	; (800ebac <xTaskCheckForTimeOut+0x60>)
			if( *pxTicksToWait == portMAX_DELAY )
 800eb60:	6833      	ldr	r3, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800eb62:	68b9      	ldr	r1, [r7, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800eb64:	1c5a      	adds	r2, r3, #1
 800eb66:	d01e      	beq.n	800eba6 <xTaskCheckForTimeOut+0x5a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb68:	4a11      	ldr	r2, [pc, #68]	; (800ebb0 <xTaskCheckForTimeOut+0x64>)
 800eb6a:	6825      	ldr	r5, [r4, #0]
 800eb6c:	6950      	ldr	r0, [r2, #20]
 800eb6e:	4694      	mov	ip, r2
 800eb70:	6862      	ldr	r2, [r4, #4]
 800eb72:	4285      	cmp	r5, r0
 800eb74:	d002      	beq.n	800eb7c <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800eb76:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb78:	4291      	cmp	r1, r2
 800eb7a:	d20c      	bcs.n	800eb96 <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800eb7c:	1a88      	subs	r0, r1, r2
			xReturn = pdTRUE;
 800eb7e:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800eb80:	4283      	cmp	r3, r0
 800eb82:	d908      	bls.n	800eb96 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800eb84:	1a5b      	subs	r3, r3, r1
 800eb86:	189b      	adds	r3, r3, r2
 800eb88:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb8a:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800eb8c:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb8e:	695b      	ldr	r3, [r3, #20]
 800eb90:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800eb96:	f000 fc25 	bl	800f3e4 <vPortExitCritical>
}
 800eb9a:	0028      	movs	r0, r5
 800eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800eb9e:	b672      	cpsid	i
 800eba0:	e7fe      	b.n	800eba0 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800eba2:	b672      	cpsid	i
 800eba4:	e7fe      	b.n	800eba4 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
 800eba6:	2500      	movs	r5, #0
 800eba8:	e7f5      	b.n	800eb96 <xTaskCheckForTimeOut+0x4a>
 800ebaa:	46c0      	nop			; (mov r8, r8)
 800ebac:	20002438 	.word	0x20002438
 800ebb0:	200024b8 	.word	0x200024b8

0800ebb4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	4b01      	ldr	r3, [pc, #4]	; (800ebbc <vTaskMissedYield+0x8>)
 800ebb8:	605a      	str	r2, [r3, #4]
}
 800ebba:	4770      	bx	lr
 800ebbc:	200024b8 	.word	0x200024b8

0800ebc0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ebc2:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ebc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d004      	beq.n	800ebd4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebca:	4b04      	ldr	r3, [pc, #16]	; (800ebdc <xTaskGetSchedulerState+0x1c>)
 800ebcc:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ebce:	4243      	negs	r3, r0
 800ebd0:	4158      	adcs	r0, r3
 800ebd2:	0040      	lsls	r0, r0, #1
	}
 800ebd4:	4770      	bx	lr
 800ebd6:	46c0      	nop			; (mov r8, r8)
 800ebd8:	20002438 	.word	0x20002438
 800ebdc:	200024b8 	.word	0x200024b8

0800ebe0 <vTaskPriorityInherit>:
	{
 800ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebe2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ebe4:	d018      	beq.n	800ec18 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ebe6:	4d17      	ldr	r5, [pc, #92]	; (800ec44 <vTaskPriorityInherit+0x64>)
 800ebe8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ebea:	686b      	ldr	r3, [r5, #4]
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d212      	bcs.n	800ec18 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebf2:	6983      	ldr	r3, [r0, #24]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	db04      	blt.n	800ec02 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebf8:	686b      	ldr	r3, [r5, #4]
 800ebfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ebfc:	2307      	movs	r3, #7
 800ebfe:	1a5b      	subs	r3, r3, r1
 800ec00:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ec02:	0093      	lsls	r3, r2, #2
 800ec04:	189b      	adds	r3, r3, r2
 800ec06:	4e10      	ldr	r6, [pc, #64]	; (800ec48 <vTaskPriorityInherit+0x68>)
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	6962      	ldr	r2, [r4, #20]
 800ec0c:	18f3      	adds	r3, r6, r3
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d003      	beq.n	800ec1a <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec12:	686b      	ldr	r3, [r5, #4]
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800ec18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ec1a:	1d27      	adds	r7, r4, #4
 800ec1c:	0038      	movs	r0, r7
 800ec1e:	f7fe ff8b 	bl	800db38 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec22:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800ec24:	4a09      	ldr	r2, [pc, #36]	; (800ec4c <vTaskPriorityInherit+0x6c>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ec28:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec2a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ec2c:	428b      	cmp	r3, r1
 800ec2e:	d900      	bls.n	800ec32 <vTaskPriorityInherit+0x52>
 800ec30:	6013      	str	r3, [r2, #0]
 800ec32:	0098      	lsls	r0, r3, #2
 800ec34:	18c0      	adds	r0, r0, r3
 800ec36:	0080      	lsls	r0, r0, #2
 800ec38:	1830      	adds	r0, r6, r0
 800ec3a:	0039      	movs	r1, r7
 800ec3c:	f7fe ff58 	bl	800daf0 <vListInsertEnd>
	}
 800ec40:	e7ea      	b.n	800ec18 <vTaskPriorityInherit+0x38>
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	20002438 	.word	0x20002438
 800ec48:	200024d4 	.word	0x200024d4
 800ec4c:	200024b8 	.word	0x200024b8

0800ec50 <xTaskPriorityDisinherit>:
	{
 800ec50:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d005      	beq.n	800ec62 <xTaskPriorityDisinherit+0x12>
			configASSERT( pxTCB == pxCurrentTCB );
 800ec56:	4b16      	ldr	r3, [pc, #88]	; (800ecb0 <xTaskPriorityDisinherit+0x60>)
 800ec58:	685c      	ldr	r4, [r3, #4]
 800ec5a:	4284      	cmp	r4, r0
 800ec5c:	d003      	beq.n	800ec66 <xTaskPriorityDisinherit+0x16>
 800ec5e:	b672      	cpsid	i
 800ec60:	e7fe      	b.n	800ec60 <xTaskPriorityDisinherit+0x10>
	BaseType_t xReturn = pdFALSE;
 800ec62:	2000      	movs	r0, #0
	}
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800ec66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <xTaskPriorityDisinherit+0x20>
 800ec6c:	b672      	cpsid	i
 800ec6e:	e7fe      	b.n	800ec6e <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec72:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ec74:	3b01      	subs	r3, #1
 800ec76:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec78:	428a      	cmp	r2, r1
 800ec7a:	d0f2      	beq.n	800ec62 <xTaskPriorityDisinherit+0x12>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d1f0      	bne.n	800ec62 <xTaskPriorityDisinherit+0x12>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ec80:	1d25      	adds	r5, r4, #4
 800ec82:	0028      	movs	r0, r5
 800ec84:	f7fe ff58 	bl	800db38 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec88:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8c:	1ad2      	subs	r2, r2, r3
 800ec8e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec90:	4a08      	ldr	r2, [pc, #32]	; (800ecb4 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec92:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ec94:	6811      	ldr	r1, [r2, #0]
 800ec96:	428b      	cmp	r3, r1
 800ec98:	d900      	bls.n	800ec9c <xTaskPriorityDisinherit+0x4c>
 800ec9a:	6013      	str	r3, [r2, #0]
 800ec9c:	2014      	movs	r0, #20
 800ec9e:	4358      	muls	r0, r3
 800eca0:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <xTaskPriorityDisinherit+0x68>)
 800eca2:	0029      	movs	r1, r5
 800eca4:	18c0      	adds	r0, r0, r3
 800eca6:	f7fe ff23 	bl	800daf0 <vListInsertEnd>
					xReturn = pdTRUE;
 800ecaa:	2001      	movs	r0, #1
		return xReturn;
 800ecac:	e7da      	b.n	800ec64 <xTaskPriorityDisinherit+0x14>
 800ecae:	46c0      	nop			; (mov r8, r8)
 800ecb0:	20002438 	.word	0x20002438
 800ecb4:	200024b8 	.word	0x200024b8
 800ecb8:	200024d4 	.word	0x200024d4

0800ecbc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ecc0:	2600      	movs	r6, #0
	{
 800ecc2:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ecc4:	4b27      	ldr	r3, [pc, #156]	; (800ed64 <vTaskList+0xa8>)
	{
 800ecc6:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ecc8:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ecca:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800eccc:	9202      	str	r2, [sp, #8]
	{
 800ecce:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ecd0:	6918      	ldr	r0, [r3, #16]
 800ecd2:	0140      	lsls	r0, r0, #5
 800ecd4:	f000 fbf8 	bl	800f4c8 <pvPortMalloc>
 800ecd8:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ecda:	d03f      	beq.n	800ed5c <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ecdc:	2200      	movs	r2, #0
 800ecde:	9902      	ldr	r1, [sp, #8]
 800ece0:	f7ff fe34 	bl	800e94c <uxTaskGetSystemState>
 800ece4:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ece6:	9603      	str	r6, [sp, #12]
 800ece8:	9b03      	ldr	r3, [sp, #12]
 800ecea:	9a02      	ldr	r2, [sp, #8]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d932      	bls.n	800ed56 <vTaskList+0x9a>
 800ecf0:	4b1d      	ldr	r3, [pc, #116]	; (800ed68 <vTaskList+0xac>)
 800ecf2:	4e1e      	ldr	r6, [pc, #120]	; (800ed6c <vTaskList+0xb0>)
 800ecf4:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ecf6:	9b03      	ldr	r3, [sp, #12]
 800ecf8:	2700      	movs	r7, #0
 800ecfa:	015b      	lsls	r3, r3, #5
 800ecfc:	18eb      	adds	r3, r5, r3
 800ecfe:	7b1b      	ldrb	r3, [r3, #12]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b03      	cmp	r3, #3
 800ed06:	d801      	bhi.n	800ed0c <vTaskList+0x50>
 800ed08:	4443      	add	r3, r8
 800ed0a:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ed0c:	9b03      	ldr	r3, [sp, #12]
 800ed0e:	0020      	movs	r0, r4
 800ed10:	015b      	lsls	r3, r3, #5
 800ed12:	18eb      	adds	r3, r5, r3
 800ed14:	6859      	ldr	r1, [r3, #4]
 800ed16:	f7ff fa6d 	bl	800e1f4 <prvWriteNameToBuffer>
 800ed1a:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ed1c:	9b03      	ldr	r3, [sp, #12]
 800ed1e:	9a03      	ldr	r2, [sp, #12]
 800ed20:	9903      	ldr	r1, [sp, #12]
 800ed22:	015b      	lsls	r3, r3, #5
 800ed24:	0149      	lsls	r1, r1, #5
 800ed26:	1869      	adds	r1, r5, r1
 800ed28:	6889      	ldr	r1, [r1, #8]
 800ed2a:	18eb      	adds	r3, r5, r3
 800ed2c:	0152      	lsls	r2, r2, #5
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	18aa      	adds	r2, r5, r2
 800ed32:	9101      	str	r1, [sp, #4]
 800ed34:	8b92      	ldrh	r2, [r2, #28]
 800ed36:	0031      	movs	r1, r6
 800ed38:	9200      	str	r2, [sp, #0]
 800ed3a:	003a      	movs	r2, r7
 800ed3c:	f004 fb46 	bl	80133cc <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ed40:	0020      	movs	r0, r4
 800ed42:	f7f1 f9e9 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800ed46:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ed48:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	9303      	str	r3, [sp, #12]
 800ed4e:	9a03      	ldr	r2, [sp, #12]
 800ed50:	9b02      	ldr	r3, [sp, #8]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d3cf      	bcc.n	800ecf6 <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ed56:	0028      	movs	r0, r5
 800ed58:	f000 fc32 	bl	800f5c0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed5c:	b004      	add	sp, #16
 800ed5e:	bc04      	pop	{r2}
 800ed60:	4690      	mov	r8, r2
 800ed62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed64:	20002438 	.word	0x20002438
 800ed68:	08017e0c 	.word	0x08017e0c
 800ed6c:	0801a624 	.word	0x0801a624

0800ed70 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ed70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed72:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ed74:	2600      	movs	r6, #0
	{
 800ed76:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ed78:	4b28      	ldr	r3, [pc, #160]	; (800ee1c <vTaskGetRunTimeStats+0xac>)
	{
 800ed7a:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ed7c:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ed7e:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ed80:	9201      	str	r2, [sp, #4]
	{
 800ed82:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ed84:	6918      	ldr	r0, [r3, #16]
 800ed86:	0140      	lsls	r0, r0, #5
 800ed88:	f000 fb9e 	bl	800f4c8 <pvPortMalloc>
 800ed8c:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ed8e:	d040      	beq.n	800ee12 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ed90:	9901      	ldr	r1, [sp, #4]
 800ed92:	aa03      	add	r2, sp, #12
 800ed94:	f7ff fdda 	bl	800e94c <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ed98:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ed9a:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ed9c:	9803      	ldr	r0, [sp, #12]
 800ed9e:	f7f1 f9d7 	bl	8000150 <__udivsi3>
 800eda2:	1e01      	subs	r1, r0, #0
 800eda4:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800eda6:	d031      	beq.n	800ee0c <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800eda8:	9602      	str	r6, [sp, #8]
 800edaa:	9b02      	ldr	r3, [sp, #8]
 800edac:	9a01      	ldr	r2, [sp, #4]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d92c      	bls.n	800ee0c <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800edb2:	4b1b      	ldr	r3, [pc, #108]	; (800ee20 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800edb4:	4f1b      	ldr	r7, [pc, #108]	; (800ee24 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800edb6:	4698      	mov	r8, r3
 800edb8:	e00f      	b.n	800edda <vTaskGetRunTimeStats+0x6a>
 800edba:	0033      	movs	r3, r6
 800edbc:	4641      	mov	r1, r8
 800edbe:	f004 fb05 	bl	80133cc <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800edc2:	0020      	movs	r0, r4
 800edc4:	f7f1 f9a8 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800edc8:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800edca:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800edcc:	3301      	adds	r3, #1
 800edce:	9302      	str	r3, [sp, #8]
 800edd0:	9a02      	ldr	r2, [sp, #8]
 800edd2:	9b01      	ldr	r3, [sp, #4]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d219      	bcs.n	800ee0c <vTaskGetRunTimeStats+0x9c>
 800edd8:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800edda:	9b02      	ldr	r3, [sp, #8]
 800eddc:	015b      	lsls	r3, r3, #5
 800edde:	18eb      	adds	r3, r5, r3
 800ede0:	6998      	ldr	r0, [r3, #24]
 800ede2:	f7f1 f9b5 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ede6:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ede8:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800edea:	015b      	lsls	r3, r3, #5
 800edec:	18eb      	adds	r3, r5, r3
 800edee:	6859      	ldr	r1, [r3, #4]
 800edf0:	0020      	movs	r0, r4
 800edf2:	f7ff f9ff 	bl	800e1f4 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800edf6:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800edf8:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800edfa:	015b      	lsls	r3, r3, #5
 800edfc:	18eb      	adds	r3, r5, r3
 800edfe:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800ee00:	2e00      	cmp	r6, #0
 800ee02:	d1da      	bne.n	800edba <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ee04:	0039      	movs	r1, r7
 800ee06:	f004 fae1 	bl	80133cc <sprintf>
 800ee0a:	e7da      	b.n	800edc2 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ee0c:	0028      	movs	r0, r5
 800ee0e:	f000 fbd7 	bl	800f5c0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee12:	b004      	add	sp, #16
 800ee14:	bc04      	pop	{r2}
 800ee16:	4690      	mov	r8, r2
 800ee18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee1a:	46c0      	nop			; (mov r8, r8)
 800ee1c:	20002438 	.word	0x20002438
 800ee20:	0801a634 	.word	0x0801a634
 800ee24:	0801a640 	.word	0x0801a640

0800ee28 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee28:	4b04      	ldr	r3, [pc, #16]	; (800ee3c <pvTaskIncrementMutexHeldCount+0x14>)
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	2a00      	cmp	r2, #0
 800ee2e:	d003      	beq.n	800ee38 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee30:	6859      	ldr	r1, [r3, #4]
 800ee32:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ee34:	3201      	adds	r2, #1
 800ee36:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ee38:	6858      	ldr	r0, [r3, #4]
	}
 800ee3a:	4770      	bx	lr
 800ee3c:	20002438 	.word	0x20002438

0800ee40 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ee40:	b570      	push	{r4, r5, r6, lr}
 800ee42:	0006      	movs	r6, r0
 800ee44:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ee46:	f000 fac1 	bl	800f3cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ee4a:	4c1c      	ldr	r4, [pc, #112]	; (800eebc <ulTaskNotifyTake+0x7c>)
 800ee4c:	6863      	ldr	r3, [r4, #4]
 800ee4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d105      	bne.n	800ee60 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ee54:	2101      	movs	r1, #1
 800ee56:	6862      	ldr	r2, [r4, #4]
 800ee58:	335c      	adds	r3, #92	; 0x5c
 800ee5a:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee5c:	2d00      	cmp	r5, #0
 800ee5e:	d119      	bne.n	800ee94 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee60:	f000 fac0 	bl	800f3e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee64:	f000 fab2 	bl	800f3cc <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ee68:	6863      	ldr	r3, [r4, #4]
 800ee6a:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ee6c:	2d00      	cmp	r5, #0
 800ee6e:	d005      	beq.n	800ee7c <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800ee70:	2e00      	cmp	r6, #0
 800ee72:	d10b      	bne.n	800ee8c <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ee74:	6862      	ldr	r2, [r4, #4]
 800ee76:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ee78:	3b01      	subs	r3, #1
 800ee7a:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ee7c:	235c      	movs	r3, #92	; 0x5c
 800ee7e:	2100      	movs	r1, #0
 800ee80:	6862      	ldr	r2, [r4, #4]
 800ee82:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ee84:	f000 faae 	bl	800f3e4 <vPortExitCritical>

		return ulReturn;
	}
 800ee88:	0028      	movs	r0, r5
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	6863      	ldr	r3, [r4, #4]
 800ee90:	659a      	str	r2, [r3, #88]	; 0x58
 800ee92:	e7f3      	b.n	800ee7c <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee94:	6860      	ldr	r0, [r4, #4]
 800ee96:	3004      	adds	r0, #4
 800ee98:	f7fe fe4e 	bl	800db38 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ee9c:	1c6b      	adds	r3, r5, #1
 800ee9e:	d006      	beq.n	800eeae <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800eea0:	68a0      	ldr	r0, [r4, #8]
 800eea2:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eea4:	f7ff fa1e 	bl	800e2e4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800eea8:	f000 fa84 	bl	800f3b4 <vPortYield>
 800eeac:	e7d8      	b.n	800ee60 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eeae:	0020      	movs	r0, r4
 800eeb0:	6861      	ldr	r1, [r4, #4]
 800eeb2:	3064      	adds	r0, #100	; 0x64
 800eeb4:	3104      	adds	r1, #4
 800eeb6:	f7fe fe1b 	bl	800daf0 <vListInsertEnd>
 800eeba:	e7f5      	b.n	800eea8 <ulTaskNotifyTake+0x68>
 800eebc:	20002438 	.word	0x20002438

0800eec0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec2:	0004      	movs	r4, r0
 800eec4:	000e      	movs	r6, r1
 800eec6:	0015      	movs	r5, r2
 800eec8:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d01b      	beq.n	800ef06 <xTaskGenericNotify+0x46>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800eece:	f000 fa7d 	bl	800f3cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	d001      	beq.n	800eeda <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800eed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eed8:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800eeda:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800eedc:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800eede:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800eee0:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800eee2:	b2db      	uxtb	r3, r3

			switch( eAction )
 800eee4:	2d02      	cmp	r5, #2
 800eee6:	d010      	beq.n	800ef0a <xTaskGenericNotify+0x4a>
 800eee8:	d934      	bls.n	800ef54 <xTaskGenericNotify+0x94>
 800eeea:	2d03      	cmp	r5, #3
 800eeec:	d003      	beq.n	800eef6 <xTaskGenericNotify+0x36>
 800eeee:	2d04      	cmp	r5, #4
 800eef0:	d102      	bne.n	800eef8 <xTaskGenericNotify+0x38>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d02c      	beq.n	800ef50 <xTaskGenericNotify+0x90>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eef6:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d00a      	beq.n	800ef12 <xTaskGenericNotify+0x52>
 800eefc:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eefe:	f000 fa71 	bl	800f3e4 <vPortExitCritical>

		return xReturn;
	}
 800ef02:	0020      	movs	r0, r4
 800ef04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
 800ef06:	b672      	cpsid	i
 800ef08:	e7fe      	b.n	800ef08 <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
 800ef0a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ef0c:	3201      	adds	r2, #1
 800ef0e:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800ef10:	e7f2      	b.n	800eef8 <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ef12:	1d25      	adds	r5, r4, #4
 800ef14:	0028      	movs	r0, r5
 800ef16:	f7fe fe0f 	bl	800db38 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ef1a:	4a11      	ldr	r2, [pc, #68]	; (800ef60 <xTaskGenericNotify+0xa0>)
 800ef1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef1e:	6811      	ldr	r1, [r2, #0]
 800ef20:	428b      	cmp	r3, r1
 800ef22:	d900      	bls.n	800ef26 <xTaskGenericNotify+0x66>
 800ef24:	6013      	str	r3, [r2, #0]
 800ef26:	2014      	movs	r0, #20
 800ef28:	4358      	muls	r0, r3
 800ef2a:	4b0e      	ldr	r3, [pc, #56]	; (800ef64 <xTaskGenericNotify+0xa4>)
 800ef2c:	0029      	movs	r1, r5
 800ef2e:	18c0      	adds	r0, r0, r3
 800ef30:	f7fe fdde 	bl	800daf0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <xTaskGenericNotify+0x7e>
 800ef3a:	b672      	cpsid	i
 800ef3c:	e7fe      	b.n	800ef3c <xTaskGenericNotify+0x7c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef3e:	4b0a      	ldr	r3, [pc, #40]	; (800ef68 <xTaskGenericNotify+0xa8>)
 800ef40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d9d8      	bls.n	800eefc <xTaskGenericNotify+0x3c>
					taskYIELD_IF_USING_PREEMPTION();
 800ef4a:	f000 fa33 	bl	800f3b4 <vPortYield>
 800ef4e:	e7d5      	b.n	800eefc <xTaskGenericNotify+0x3c>
						xReturn = pdFAIL;
 800ef50:	2400      	movs	r4, #0
 800ef52:	e7d4      	b.n	800eefe <xTaskGenericNotify+0x3e>
			switch( eAction )
 800ef54:	2d01      	cmp	r5, #1
 800ef56:	d1cf      	bne.n	800eef8 <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800ef58:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ef5a:	4316      	orrs	r6, r2
 800ef5c:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800ef5e:	e7cb      	b.n	800eef8 <xTaskGenericNotify+0x38>
 800ef60:	200024b8 	.word	0x200024b8
 800ef64:	200024d4 	.word	0x200024d4
 800ef68:	20002438 	.word	0x20002438

0800ef6c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef6c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef6e:	f000 fa2d 	bl	800f3cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef72:	4c10      	ldr	r4, [pc, #64]	; (800efb4 <prvCheckForValidListAndQueue+0x48>)
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d002      	beq.n	800ef80 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef7a:	f000 fa33 	bl	800f3e4 <vPortExitCritical>
}
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800ef80:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800ef82:	1d26      	adds	r6, r4, #4
 800ef84:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800ef86:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800ef88:	f7fe fda2 	bl	800dad0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef8c:	0028      	movs	r0, r5
 800ef8e:	f7fe fd9f 	bl	800dad0 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ef92:	2200      	movs	r2, #0
 800ef94:	2110      	movs	r1, #16
 800ef96:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800ef98:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800ef9a:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ef9c:	f7fe feae 	bl	800dcfc <xQueueGenericCreate>
 800efa0:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d003      	beq.n	800efae <prvCheckForValidListAndQueue+0x42>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efa6:	4904      	ldr	r1, [pc, #16]	; (800efb8 <prvCheckForValidListAndQueue+0x4c>)
 800efa8:	f7ff f8f4 	bl	800e194 <vQueueAddToRegistry>
 800efac:	e7e5      	b.n	800ef7a <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800efae:	b672      	cpsid	i
 800efb0:	e7fe      	b.n	800efb0 <prvCheckForValidListAndQueue+0x44>
 800efb2:	46c0      	nop			; (mov r8, r8)
 800efb4:	20002560 	.word	0x20002560
 800efb8:	0801a64c 	.word	0x0801a64c

0800efbc <prvInsertTimerInActiveList>:
{
 800efbc:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efbe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efc0:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800efc2:	4291      	cmp	r1, r2
 800efc4:	d806      	bhi.n	800efd4 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800efc6:	1ad2      	subs	r2, r2, r3
 800efc8:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800efca:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800efcc:	429a      	cmp	r2, r3
 800efce:	d30d      	bcc.n	800efec <prvInsertTimerInActiveList+0x30>
}
 800efd0:	0020      	movs	r0, r4
 800efd2:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d202      	bcs.n	800efde <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800efd8:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efda:	4299      	cmp	r1, r3
 800efdc:	d2f8      	bcs.n	800efd0 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efde:	4b07      	ldr	r3, [pc, #28]	; (800effc <prvInsertTimerInActiveList+0x40>)
 800efe0:	1d01      	adds	r1, r0, #4
 800efe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800efe4:	f7fe fd90 	bl	800db08 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800efe8:	2400      	movs	r4, #0
 800efea:	e7f1      	b.n	800efd0 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efec:	4b03      	ldr	r3, [pc, #12]	; (800effc <prvInsertTimerInActiveList+0x40>)
 800efee:	1d01      	adds	r1, r0, #4
 800eff0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eff2:	f7fe fd89 	bl	800db08 <vListInsert>
 800eff6:	2400      	movs	r4, #0
 800eff8:	e7ea      	b.n	800efd0 <prvInsertTimerInActiveList+0x14>
 800effa:	46c0      	nop			; (mov r8, r8)
 800effc:	20002560 	.word	0x20002560

0800f000 <xTimerCreateTimerTask>:
{
 800f000:	b500      	push	{lr}
 800f002:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f004:	f7ff ffb2 	bl	800ef6c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f008:	4b0a      	ldr	r3, [pc, #40]	; (800f034 <xTimerCreateTimerTask+0x34>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00d      	beq.n	800f02c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f010:	2300      	movs	r3, #0
 800f012:	9303      	str	r3, [sp, #12]
 800f014:	9302      	str	r3, [sp, #8]
 800f016:	9301      	str	r3, [sp, #4]
 800f018:	3303      	adds	r3, #3
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	22a0      	movs	r2, #160	; 0xa0
 800f01e:	2300      	movs	r3, #0
 800f020:	4905      	ldr	r1, [pc, #20]	; (800f038 <xTimerCreateTimerTask+0x38>)
 800f022:	4806      	ldr	r0, [pc, #24]	; (800f03c <xTimerCreateTimerTask+0x3c>)
 800f024:	f7ff faa2 	bl	800e56c <xTaskGenericCreate>
	configASSERT( xReturn );
 800f028:	2800      	cmp	r0, #0
 800f02a:	d101      	bne.n	800f030 <xTimerCreateTimerTask+0x30>
 800f02c:	b672      	cpsid	i
 800f02e:	e7fe      	b.n	800f02e <xTimerCreateTimerTask+0x2e>
}
 800f030:	b005      	add	sp, #20
 800f032:	bd00      	pop	{pc}
 800f034:	20002560 	.word	0x20002560
 800f038:	0801a654 	.word	0x0801a654
 800f03c:	0800f149 	.word	0x0800f149

0800f040 <xTimerCreate>:
{
 800f040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f042:	46c6      	mov	lr, r8
 800f044:	000d      	movs	r5, r1
 800f046:	b500      	push	{lr}
 800f048:	4680      	mov	r8, r0
 800f04a:	0017      	movs	r7, r2
 800f04c:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f04e:	2900      	cmp	r1, #0
 800f050:	d014      	beq.n	800f07c <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f052:	202c      	movs	r0, #44	; 0x2c
 800f054:	f000 fa38 	bl	800f4c8 <pvPortMalloc>
 800f058:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f05a:	d00b      	beq.n	800f074 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f05c:	f7ff ff86 	bl	800ef6c <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f060:	4643      	mov	r3, r8
 800f062:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f064:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f066:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f068:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f06a:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f06c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f06e:	1d20      	adds	r0, r4, #4
 800f070:	f7fe fd3a 	bl	800dae8 <vListInitialiseItem>
}
 800f074:	0020      	movs	r0, r4
 800f076:	bc04      	pop	{r2}
 800f078:	4690      	mov	r8, r2
 800f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f07c:	b672      	cpsid	i
 800f07e:	e7fe      	b.n	800f07e <xTimerCreate+0x3e>

0800f080 <xTimerGenericCommand>:
{
 800f080:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800f082:	4d13      	ldr	r5, [pc, #76]	; (800f0d0 <xTimerGenericCommand+0x50>)
{
 800f084:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800f086:	682c      	ldr	r4, [r5, #0]
{
 800f088:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800f08a:	2c00      	cmp	r4, #0
 800f08c:	d017      	beq.n	800f0be <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800f08e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f090:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f092:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f094:	2905      	cmp	r1, #5
 800f096:	dc0a      	bgt.n	800f0ae <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f098:	f7ff fd92 	bl	800ebc0 <xTaskGetSchedulerState>
 800f09c:	2802      	cmp	r0, #2
 800f09e:	d010      	beq.n	800f0c2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0a0:	6828      	ldr	r0, [r5, #0]
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	4669      	mov	r1, sp
 800f0a8:	f7fe fe64 	bl	800dd74 <xQueueGenericSend>
 800f0ac:	e005      	b.n	800f0ba <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	0032      	movs	r2, r6
 800f0b2:	4669      	mov	r1, sp
 800f0b4:	0020      	movs	r0, r4
 800f0b6:	f7fe fef9 	bl	800deac <xQueueGenericSendFromISR>
}
 800f0ba:	b004      	add	sp, #16
 800f0bc:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800f0be:	2000      	movs	r0, #0
	return xReturn;
 800f0c0:	e7fb      	b.n	800f0ba <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0c2:	6828      	ldr	r0, [r5, #0]
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	9a08      	ldr	r2, [sp, #32]
 800f0c8:	4669      	mov	r1, sp
 800f0ca:	f7fe fe53 	bl	800dd74 <xQueueGenericSend>
 800f0ce:	e7f4      	b.n	800f0ba <xTimerGenericCommand+0x3a>
 800f0d0:	20002560 	.word	0x20002560

0800f0d4 <prvSwitchTimerLists>:
{
 800f0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d6:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0d8:	2300      	movs	r3, #0
{
 800f0da:	b500      	push	{lr}
 800f0dc:	4e19      	ldr	r6, [pc, #100]	; (800f144 <prvSwitchTimerLists+0x70>)
 800f0de:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0e0:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0e2:	e00c      	b.n	800f0fe <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e8:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0ea:	1d25      	adds	r5, r4, #4
 800f0ec:	0028      	movs	r0, r5
 800f0ee:	f7fe fd23 	bl	800db38 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0f4:	0020      	movs	r0, r4
 800f0f6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f0f8:	69e3      	ldr	r3, [r4, #28]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d00a      	beq.n	800f114 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	2a00      	cmp	r2, #0
 800f104:	d1ee      	bne.n	800f0e4 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800f106:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800f108:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800f10a:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800f10c:	b002      	add	sp, #8
 800f10e:	bc04      	pop	{r2}
 800f110:	4690      	mov	r8, r2
 800f112:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f114:	69a3      	ldr	r3, [r4, #24]
 800f116:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800f118:	429f      	cmp	r7, r3
 800f11a:	d206      	bcs.n	800f12a <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f11c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f11e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f120:	0029      	movs	r1, r5
 800f122:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f124:	f7fe fcf0 	bl	800db08 <vListInsert>
 800f128:	e7e9      	b.n	800f0fe <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f12a:	4643      	mov	r3, r8
 800f12c:	003a      	movs	r2, r7
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	2100      	movs	r1, #0
 800f132:	2300      	movs	r3, #0
 800f134:	0020      	movs	r0, r4
 800f136:	f7ff ffa3 	bl	800f080 <xTimerGenericCommand>
				configASSERT( xResult );
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d1df      	bne.n	800f0fe <prvSwitchTimerLists+0x2a>
 800f13e:	b672      	cpsid	i
 800f140:	e7fe      	b.n	800f140 <prvSwitchTimerLists+0x6c>
 800f142:	46c0      	nop			; (mov r8, r8)
 800f144:	20002560 	.word	0x20002560

0800f148 <prvTimerTask>:
{
 800f148:	2301      	movs	r3, #1
 800f14a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f14c:	4646      	mov	r6, r8
 800f14e:	46d6      	mov	lr, sl
 800f150:	464f      	mov	r7, r9
 800f152:	4698      	mov	r8, r3
 800f154:	b5c0      	push	{r6, r7, lr}
 800f156:	4d65      	ldr	r5, [pc, #404]	; (800f2ec <prvTimerTask+0x1a4>)
 800f158:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f15a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	2a00      	cmp	r2, #0
 800f160:	d04f      	beq.n	800f202 <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800f166:	f7ff fa9d 	bl	800e6a4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f16a:	f7ff faa3 	bl	800e6b4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f16e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f170:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f172:	4283      	cmp	r3, r0
 800f174:	d84d      	bhi.n	800f212 <prvTimerTask+0xca>
	xLastTime = xTimeNow;
 800f176:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f178:	4287      	cmp	r7, r0
 800f17a:	d960      	bls.n	800f23e <prvTimerTask+0xf6>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f17c:	1b39      	subs	r1, r7, r4
 800f17e:	6828      	ldr	r0, [r5, #0]
 800f180:	f7ff f81a 	bl	800e1b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f184:	f7ff fb2e 	bl	800e7e4 <xTaskResumeAll>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d055      	beq.n	800f238 <prvTimerTask+0xf0>
 800f18c:	2684      	movs	r6, #132	; 0x84
 800f18e:	00b6      	lsls	r6, r6, #2
 800f190:	27c7      	movs	r7, #199	; 0xc7
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f192:	2300      	movs	r3, #0
 800f194:	2200      	movs	r2, #0
 800f196:	a904      	add	r1, sp, #16
 800f198:	6828      	ldr	r0, [r5, #0]
 800f19a:	f7fe ff09 	bl	800dfb0 <xQueueGenericReceive>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d0db      	beq.n	800f15a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1a2:	9b04      	ldr	r3, [sp, #16]
 800f1a4:	9c06      	ldr	r4, [sp, #24]
 800f1a6:	9302      	str	r3, [sp, #8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	da0b      	bge.n	800f1c4 <prvTimerTask+0x7c>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1ac:	9b07      	ldr	r3, [sp, #28]
 800f1ae:	0020      	movs	r0, r4
 800f1b0:	9302      	str	r3, [sp, #8]
 800f1b2:	9b05      	ldr	r3, [sp, #20]
 800f1b4:	9902      	ldr	r1, [sp, #8]
 800f1b6:	9303      	str	r3, [sp, #12]
 800f1b8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1ba:	9b04      	ldr	r3, [sp, #16]
 800f1bc:	9302      	str	r3, [sp, #8]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	dbe7      	blt.n	800f192 <prvTimerTask+0x4a>
 800f1c2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f1c4:	6963      	ldr	r3, [r4, #20]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1ca:	1d20      	adds	r0, r4, #4
 800f1cc:	f7fe fcb4 	bl	800db38 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f1d0:	f7ff fa70 	bl	800e6b4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f1d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f1d6:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800f1d8:	4298      	cmp	r0, r3
 800f1da:	d320      	bcc.n	800f21e <prvTimerTask+0xd6>
	xLastTime = xTimeNow;
 800f1dc:	464b      	mov	r3, r9
 800f1de:	636b      	str	r3, [r5, #52]	; 0x34
 800f1e0:	9b04      	ldr	r3, [sp, #16]
 800f1e2:	2b09      	cmp	r3, #9
 800f1e4:	d8d5      	bhi.n	800f192 <prvTimerTask+0x4a>
 800f1e6:	4642      	mov	r2, r8
 800f1e8:	409a      	lsls	r2, r3
 800f1ea:	0013      	movs	r3, r2
 800f1ec:	4032      	ands	r2, r6
 800f1ee:	4692      	mov	sl, r2
 800f1f0:	d15a      	bne.n	800f2a8 <prvTimerTask+0x160>
 800f1f2:	421f      	tst	r7, r3
 800f1f4:	d132      	bne.n	800f25c <prvTimerTask+0x114>
 800f1f6:	069b      	lsls	r3, r3, #26
 800f1f8:	d5cb      	bpl.n	800f192 <prvTimerTask+0x4a>
					vPortFree( pxTimer );
 800f1fa:	0020      	movs	r0, r4
 800f1fc:	f000 f9e0 	bl	800f5c0 <vPortFree>
 800f200:	e7c6      	b.n	800f190 <prvTimerTask+0x48>
	vTaskSuspendAll();
 800f202:	f7ff fa4f 	bl	800e6a4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f206:	f7ff fa55 	bl	800e6b4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f20a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f20c:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f20e:	4298      	cmp	r0, r3
 800f210:	d208      	bcs.n	800f224 <prvTimerTask+0xdc>
		prvSwitchTimerLists();
 800f212:	f7ff ff5f 	bl	800f0d4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f216:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f218:	f7ff fae4 	bl	800e7e4 <xTaskResumeAll>
 800f21c:	e7b6      	b.n	800f18c <prvTimerTask+0x44>
		prvSwitchTimerLists();
 800f21e:	f7ff ff59 	bl	800f0d4 <prvSwitchTimerLists>
 800f222:	e7db      	b.n	800f1dc <prvTimerTask+0x94>
		xNextExpireTime = ( TickType_t ) 0U;
 800f224:	2700      	movs	r7, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f226:	6828      	ldr	r0, [r5, #0]
 800f228:	1b39      	subs	r1, r7, r4
	xLastTime = xTimeNow;
 800f22a:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f22c:	f7fe ffc4 	bl	800e1b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f230:	f7ff fad8 	bl	800e7e4 <xTaskResumeAll>
 800f234:	2800      	cmp	r0, #0
 800f236:	d1a9      	bne.n	800f18c <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
 800f238:	f000 f8bc 	bl	800f3b4 <vPortYield>
 800f23c:	e7a6      	b.n	800f18c <prvTimerTask+0x44>
				( void ) xTaskResumeAll();
 800f23e:	f7ff fad1 	bl	800e7e4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f242:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f248:	1d30      	adds	r0, r6, #4
 800f24a:	f7fe fc75 	bl	800db38 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f24e:	69f3      	ldr	r3, [r6, #28]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d034      	beq.n	800f2be <prvTimerTask+0x176>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f254:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f256:	0030      	movs	r0, r6
 800f258:	4798      	blx	r3
 800f25a:	e797      	b.n	800f18c <prvTimerTask+0x44>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f25c:	9b05      	ldr	r3, [sp, #20]
 800f25e:	0020      	movs	r0, r4
 800f260:	9302      	str	r3, [sp, #8]
 800f262:	9a02      	ldr	r2, [sp, #8]
 800f264:	69a3      	ldr	r3, [r4, #24]
 800f266:	4694      	mov	ip, r2
 800f268:	4463      	add	r3, ip
 800f26a:	0019      	movs	r1, r3
 800f26c:	0013      	movs	r3, r2
 800f26e:	464a      	mov	r2, r9
 800f270:	f7ff fea4 	bl	800efbc <prvInsertTimerInActiveList>
 800f274:	2801      	cmp	r0, #1
 800f276:	d18b      	bne.n	800f190 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f27a:	0020      	movs	r0, r4
 800f27c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f27e:	69e3      	ldr	r3, [r4, #28]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d185      	bne.n	800f190 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f284:	69a1      	ldr	r1, [r4, #24]
 800f286:	9b05      	ldr	r3, [sp, #20]
 800f288:	468c      	mov	ip, r1
 800f28a:	9302      	str	r3, [sp, #8]
 800f28c:	4463      	add	r3, ip
 800f28e:	001a      	movs	r2, r3
 800f290:	4653      	mov	r3, sl
 800f292:	2100      	movs	r1, #0
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	0020      	movs	r0, r4
 800f298:	2300      	movs	r3, #0
 800f29a:	f7ff fef1 	bl	800f080 <xTimerGenericCommand>
							configASSERT( xResult );
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d000      	beq.n	800f2a4 <prvTimerTask+0x15c>
 800f2a2:	e775      	b.n	800f190 <prvTimerTask+0x48>
 800f2a4:	b672      	cpsid	i
 800f2a6:	e7fe      	b.n	800f2a6 <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2a8:	9905      	ldr	r1, [sp, #20]
 800f2aa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2ac:	2900      	cmp	r1, #0
 800f2ae:	d01a      	beq.n	800f2e6 <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2b0:	4449      	add	r1, r9
 800f2b2:	464b      	mov	r3, r9
 800f2b4:	464a      	mov	r2, r9
 800f2b6:	0020      	movs	r0, r4
 800f2b8:	f7ff fe80 	bl	800efbc <prvInsertTimerInActiveList>
 800f2bc:	e768      	b.n	800f190 <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f2be:	69b3      	ldr	r3, [r6, #24]
 800f2c0:	0022      	movs	r2, r4
 800f2c2:	18f9      	adds	r1, r7, r3
 800f2c4:	0030      	movs	r0, r6
 800f2c6:	003b      	movs	r3, r7
 800f2c8:	f7ff fe78 	bl	800efbc <prvInsertTimerInActiveList>
 800f2cc:	2801      	cmp	r0, #1
 800f2ce:	d1c1      	bne.n	800f254 <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	003a      	movs	r2, r7
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	0030      	movs	r0, r6
 800f2da:	f7ff fed1 	bl	800f080 <xTimerGenericCommand>
			configASSERT( xResult );
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d1b8      	bne.n	800f254 <prvTimerTask+0x10c>
 800f2e2:	b672      	cpsid	i
 800f2e4:	e7fe      	b.n	800f2e4 <prvTimerTask+0x19c>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2e6:	b672      	cpsid	i
 800f2e8:	e7fe      	b.n	800f2e8 <prvTimerTask+0x1a0>
 800f2ea:	46c0      	nop			; (mov r8, r8)
 800f2ec:	20002560 	.word	0x20002560

0800f2f0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f2f0:	b510      	push	{r4, lr}
 800f2f2:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f2f4:	d101      	bne.n	800f2fa <pvTimerGetTimerID+0xa>
 800f2f6:	b672      	cpsid	i
 800f2f8:	e7fe      	b.n	800f2f8 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f2fa:	f000 f867 	bl	800f3cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f2fe:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f300:	f000 f870 	bl	800f3e4 <vPortExitCritical>

	return pvReturn;
}
 800f304:	0020      	movs	r0, r4
 800f306:	bd10      	pop	{r4, pc}

0800f308 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f308:	4b03      	ldr	r3, [pc, #12]	; (800f318 <prvTaskExitError+0x10>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	3301      	adds	r3, #1
 800f30e:	d001      	beq.n	800f314 <prvTaskExitError+0xc>
 800f310:	b672      	cpsid	i
 800f312:	e7fe      	b.n	800f312 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f314:	b672      	cpsid	i
 800f316:	e7fe      	b.n	800f316 <prvTaskExitError+0xe>
 800f318:	200000c4 	.word	0x200000c4

0800f31c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f31c:	4a06      	ldr	r2, [pc, #24]	; (800f338 <pxCurrentTCBConst2>)
 800f31e:	6813      	ldr	r3, [r2, #0]
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	3020      	adds	r0, #32
 800f324:	f380 8809 	msr	PSP, r0
 800f328:	2002      	movs	r0, #2
 800f32a:	f380 8814 	msr	CONTROL, r0
 800f32e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f330:	46ae      	mov	lr, r5
 800f332:	b662      	cpsie	i
 800f334:	bd00      	pop	{pc}
 800f336:	46c0      	nop			; (mov r8, r8)

0800f338 <pxCurrentTCBConst2>:
 800f338:	2000243c 	.word	0x2000243c

0800f33c <pxPortInitialiseStack>:
{
 800f33c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f33e:	2480      	movs	r4, #128	; 0x80
 800f340:	1f03      	subs	r3, r0, #4
 800f342:	0464      	lsls	r4, r4, #17
 800f344:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f346:	3b04      	subs	r3, #4
 800f348:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f34a:	4903      	ldr	r1, [pc, #12]	; (800f358 <pxPortInitialiseStack+0x1c>)
 800f34c:	3b04      	subs	r3, #4
 800f34e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f350:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f352:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f354:	601a      	str	r2, [r3, #0]
}
 800f356:	bd10      	pop	{r4, pc}
 800f358:	0800f309 	.word	0x0800f309

0800f35c <SVC_Handler>:
}
 800f35c:	4770      	bx	lr
 800f35e:	46c0      	nop			; (mov r8, r8)

0800f360 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f360:	22ff      	movs	r2, #255	; 0xff
 800f362:	4b0f      	ldr	r3, [pc, #60]	; (800f3a0 <xPortStartScheduler+0x40>)
 800f364:	0412      	lsls	r2, r2, #16
 800f366:	6819      	ldr	r1, [r3, #0]
{
 800f368:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f36a:	430a      	orrs	r2, r1
 800f36c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f36e:	22ff      	movs	r2, #255	; 0xff
 800f370:	6819      	ldr	r1, [r3, #0]
 800f372:	0612      	lsls	r2, r2, #24
 800f374:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f376:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f378:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f37a:	4b0a      	ldr	r3, [pc, #40]	; (800f3a4 <xPortStartScheduler+0x44>)
 800f37c:	0089      	lsls	r1, r1, #2
 800f37e:	6818      	ldr	r0, [r3, #0]
 800f380:	f7f0 fee6 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f384:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f386:	4b08      	ldr	r3, [pc, #32]	; (800f3a8 <xPortStartScheduler+0x48>)
 800f388:	3801      	subs	r0, #1
 800f38a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f38c:	4b07      	ldr	r3, [pc, #28]	; (800f3ac <xPortStartScheduler+0x4c>)
 800f38e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f390:	2200      	movs	r2, #0
 800f392:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <xPortStartScheduler+0x50>)
 800f394:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f396:	f7ff ffc1 	bl	800f31c <vPortStartFirstTask>
	prvTaskExitError();
 800f39a:	f7ff ffb5 	bl	800f308 <prvTaskExitError>
 800f39e:	46c0      	nop			; (mov r8, r8)
 800f3a0:	e000ed20 	.word	0xe000ed20
 800f3a4:	200000b0 	.word	0x200000b0
 800f3a8:	e000e014 	.word	0xe000e014
 800f3ac:	e000e010 	.word	0xe000e010
 800f3b0:	200000c4 	.word	0x200000c4

0800f3b4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f3b4:	2280      	movs	r2, #128	; 0x80
 800f3b6:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <vPortYield+0x14>)
 800f3b8:	0552      	lsls	r2, r2, #21
 800f3ba:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f3bc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f3c0:	f3bf 8f6f 	isb	sy
}
 800f3c4:	4770      	bx	lr
 800f3c6:	46c0      	nop			; (mov r8, r8)
 800f3c8:	e000ed04 	.word	0xe000ed04

0800f3cc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f3cc:	b672      	cpsid	i
    uxCriticalNesting++;
 800f3ce:	4a04      	ldr	r2, [pc, #16]	; (800f3e0 <vPortEnterCritical+0x14>)
 800f3d0:	6813      	ldr	r3, [r2, #0]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f3d6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f3da:	f3bf 8f6f 	isb	sy
}
 800f3de:	4770      	bx	lr
 800f3e0:	200000c4 	.word	0x200000c4

0800f3e4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f3e4:	4a05      	ldr	r2, [pc, #20]	; (800f3fc <vPortExitCritical+0x18>)
 800f3e6:	6813      	ldr	r3, [r2, #0]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <vPortExitCritical+0xc>
 800f3ec:	b672      	cpsid	i
 800f3ee:	e7fe      	b.n	800f3ee <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d100      	bne.n	800f3fa <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 800f3f8:	b662      	cpsie	i
}
 800f3fa:	4770      	bx	lr
 800f3fc:	200000c4 	.word	0x200000c4

0800f400 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f400:	f3ef 8010 	mrs	r0, PRIMASK
 800f404:	b672      	cpsid	i
 800f406:	4770      	bx	lr
}
 800f408:	2000      	movs	r0, #0
 800f40a:	46c0      	nop			; (mov r8, r8)

0800f40c <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f40c:	f380 8810 	msr	PRIMASK, r0
 800f410:	4770      	bx	lr
 800f412:	46c0      	nop			; (mov r8, r8)

0800f414 <PendSV_Handler>:
	__asm volatile
 800f414:	f3ef 8009 	mrs	r0, PSP
 800f418:	4b0e      	ldr	r3, [pc, #56]	; (800f454 <pxCurrentTCBConst>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	3820      	subs	r0, #32
 800f41e:	6010      	str	r0, [r2, #0]
 800f420:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f422:	4644      	mov	r4, r8
 800f424:	464d      	mov	r5, r9
 800f426:	4656      	mov	r6, sl
 800f428:	465f      	mov	r7, fp
 800f42a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f42c:	b508      	push	{r3, lr}
 800f42e:	b672      	cpsid	i
 800f430:	f7ff fafe 	bl	800ea30 <vTaskSwitchContext>
 800f434:	b662      	cpsie	i
 800f436:	bc0c      	pop	{r2, r3}
 800f438:	6811      	ldr	r1, [r2, #0]
 800f43a:	6808      	ldr	r0, [r1, #0]
 800f43c:	3010      	adds	r0, #16
 800f43e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f440:	46a0      	mov	r8, r4
 800f442:	46a9      	mov	r9, r5
 800f444:	46b2      	mov	sl, r6
 800f446:	46bb      	mov	fp, r7
 800f448:	f380 8809 	msr	PSP, r0
 800f44c:	3820      	subs	r0, #32
 800f44e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f450:	4718      	bx	r3
 800f452:	46c0      	nop			; (mov r8, r8)

0800f454 <pxCurrentTCBConst>:
 800f454:	2000243c 	.word	0x2000243c

0800f458 <xPortSysTickHandler>:
{
 800f458:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f45a:	f7ff ffd1 	bl	800f400 <ulSetInterruptMaskFromISR>
 800f45e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f460:	f7ff f934 	bl	800e6cc <xTaskIncrementTick>
 800f464:	2800      	cmp	r0, #0
 800f466:	d003      	beq.n	800f470 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f468:	2280      	movs	r2, #128	; 0x80
 800f46a:	4b03      	ldr	r3, [pc, #12]	; (800f478 <xPortSysTickHandler+0x20>)
 800f46c:	0552      	lsls	r2, r2, #21
 800f46e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f470:	0020      	movs	r0, r4
 800f472:	f7ff ffcb 	bl	800f40c <vClearInterruptMaskFromISR>
}
 800f476:	bd10      	pop	{r4, pc}
 800f478:	e000ed04 	.word	0xe000ed04

0800f47c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f47c:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <prvInsertBlockIntoFreeList+0x48>)
{
 800f47e:	b530      	push	{r4, r5, lr}
 800f480:	001d      	movs	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	4282      	cmp	r2, r0
 800f486:	d201      	bcs.n	800f48c <prvInsertBlockIntoFreeList+0x10>
 800f488:	0013      	movs	r3, r2
 800f48a:	e7fa      	b.n	800f482 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f48c:	685c      	ldr	r4, [r3, #4]
 800f48e:	1919      	adds	r1, r3, r4
 800f490:	4288      	cmp	r0, r1
 800f492:	d103      	bne.n	800f49c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f494:	6841      	ldr	r1, [r0, #4]
 800f496:	0018      	movs	r0, r3
 800f498:	1909      	adds	r1, r1, r4
 800f49a:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f49c:	6841      	ldr	r1, [r0, #4]
 800f49e:	1844      	adds	r4, r0, r1
 800f4a0:	42a2      	cmp	r2, r4
 800f4a2:	d109      	bne.n	800f4b8 <prvInsertBlockIntoFreeList+0x3c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4a4:	68ac      	ldr	r4, [r5, #8]
 800f4a6:	42a2      	cmp	r2, r4
 800f4a8:	d006      	beq.n	800f4b8 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4aa:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4ac:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4ae:	46a4      	mov	ip, r4
 800f4b0:	4461      	add	r1, ip
 800f4b2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4b4:	6002      	str	r2, [r0, #0]
 800f4b6:	e000      	b.n	800f4ba <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f4b8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f4ba:	4298      	cmp	r0, r3
 800f4bc:	d000      	beq.n	800f4c0 <prvInsertBlockIntoFreeList+0x44>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f4be:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4c0:	bd30      	pop	{r4, r5, pc}
 800f4c2:	46c0      	nop			; (mov r8, r8)
 800f4c4:	20002598 	.word	0x20002598

0800f4c8 <pvPortMalloc>:
{
 800f4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ca:	46c6      	mov	lr, r8
 800f4cc:	b500      	push	{lr}
 800f4ce:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800f4d0:	f7ff f8e8 	bl	800e6a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f4d4:	4c37      	ldr	r4, [pc, #220]	; (800f5b4 <pvPortMalloc+0xec>)
 800f4d6:	68a3      	ldr	r3, [r4, #8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d02a      	beq.n	800f532 <pvPortMalloc+0x6a>
 800f4dc:	68e6      	ldr	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4de:	422e      	tst	r6, r5
 800f4e0:	d143      	bne.n	800f56a <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
 800f4e2:	2d00      	cmp	r5, #0
 800f4e4:	d041      	beq.n	800f56a <pvPortMalloc+0xa2>
				xWantedSize += xHeapStructSize;
 800f4e6:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4e8:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800f4ea:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4ec:	421a      	tst	r2, r3
 800f4ee:	d001      	beq.n	800f4f4 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f4f0:	4393      	bics	r3, r2
 800f4f2:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d038      	beq.n	800f56a <pvPortMalloc+0xa2>
 800f4f8:	6962      	ldr	r2, [r4, #20]
 800f4fa:	4690      	mov	r8, r2
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d334      	bcc.n	800f56a <pvPortMalloc+0xa2>
				pxBlock = xStart.pxNextFreeBlock;
 800f500:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 800f502:	0021      	movs	r1, r4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f504:	e004      	b.n	800f510 <pvPortMalloc+0x48>
 800f506:	6828      	ldr	r0, [r5, #0]
 800f508:	2800      	cmp	r0, #0
 800f50a:	d004      	beq.n	800f516 <pvPortMalloc+0x4e>
 800f50c:	0029      	movs	r1, r5
 800f50e:	0005      	movs	r5, r0
 800f510:	686a      	ldr	r2, [r5, #4]
 800f512:	429a      	cmp	r2, r3
 800f514:	d3f7      	bcc.n	800f506 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f516:	68a0      	ldr	r0, [r4, #8]
 800f518:	42a8      	cmp	r0, r5
 800f51a:	d026      	beq.n	800f56a <pvPortMalloc+0xa2>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f51c:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f51e:	680f      	ldr	r7, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f520:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f522:	1ad1      	subs	r1, r2, r3
 800f524:	2910      	cmp	r1, #16
 800f526:	d931      	bls.n	800f58c <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f528:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f52a:	0742      	lsls	r2, r0, #29
 800f52c:	d029      	beq.n	800f582 <pvPortMalloc+0xba>
 800f52e:	b672      	cpsid	i
 800f530:	e7fe      	b.n	800f530 <pvPortMalloc+0x68>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f532:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f534:	4b20      	ldr	r3, [pc, #128]	; (800f5b8 <pvPortMalloc+0xf0>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f536:	4219      	tst	r1, r3
 800f538:	d020      	beq.n	800f57c <pvPortMalloc+0xb4>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f53a:	185a      	adds	r2, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f53c:	438a      	bics	r2, r1
 800f53e:	0011      	movs	r1, r2
	ulAddress -= xHeapStructSize;
 800f540:	4e1e      	ldr	r6, [pc, #120]	; (800f5bc <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 800f542:	2000      	movs	r0, #0
	ulAddress -= xHeapStructSize;
 800f544:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f546:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f548:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f54a:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f54c:	2680      	movs	r6, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f54e:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f550:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f552:	6060      	str	r0, [r4, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f554:	6021      	str	r1, [r4, #0]
	pxEnd->xBlockSize = 0;
 800f556:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f558:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f55a:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f55c:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f55e:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f560:	6122      	str	r2, [r4, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f562:	6162      	str	r2, [r4, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f564:	60e6      	str	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f566:	422e      	tst	r6, r5
 800f568:	d0bb      	beq.n	800f4e2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 800f56a:	f7ff f93b 	bl	800e7e4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f56e:	f7fd fc1d 	bl	800cdac <vApplicationMallocFailedHook>
 800f572:	2700      	movs	r7, #0
}
 800f574:	0038      	movs	r0, r7
 800f576:	bc04      	pop	{r2}
 800f578:	4690      	mov	r8, r2
 800f57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f57c:	001a      	movs	r2, r3
 800f57e:	0019      	movs	r1, r3
 800f580:	e7de      	b.n	800f540 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f582:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f584:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f586:	f7ff ff79 	bl	800f47c <prvInsertBlockIntoFreeList>
 800f58a:	686a      	ldr	r2, [r5, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f58c:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f58e:	6921      	ldr	r1, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f590:	1a9b      	subs	r3, r3, r2
 800f592:	6163      	str	r3, [r4, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f594:	428b      	cmp	r3, r1
 800f596:	d200      	bcs.n	800f59a <pvPortMalloc+0xd2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f598:	6123      	str	r3, [r4, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f59a:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f59c:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f59e:	3708      	adds	r7, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5a0:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5a2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800f5a4:	f7ff f91e 	bl	800e7e4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f5a8:	2f00      	cmp	r7, #0
 800f5aa:	d0e0      	beq.n	800f56e <pvPortMalloc+0xa6>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5ac:	077b      	lsls	r3, r7, #29
 800f5ae:	d0e1      	beq.n	800f574 <pvPortMalloc+0xac>
 800f5b0:	b672      	cpsid	i
 800f5b2:	e7fe      	b.n	800f5b2 <pvPortMalloc+0xea>
 800f5b4:	20002598 	.word	0x20002598
 800f5b8:	200025b0 	.word	0x200025b0
 800f5bc:	00004a30 	.word	0x00004a30

0800f5c0 <vPortFree>:
{
 800f5c0:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d01b      	beq.n	800f5fe <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5c6:	4d0e      	ldr	r5, [pc, #56]	; (800f600 <vPortFree+0x40>)
 800f5c8:	3808      	subs	r0, #8
 800f5ca:	6843      	ldr	r3, [r0, #4]
 800f5cc:	68ea      	ldr	r2, [r5, #12]
 800f5ce:	0004      	movs	r4, r0
 800f5d0:	421a      	tst	r2, r3
 800f5d2:	d101      	bne.n	800f5d8 <vPortFree+0x18>
 800f5d4:	b672      	cpsid	i
 800f5d6:	e7fe      	b.n	800f5d6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5d8:	6801      	ldr	r1, [r0, #0]
 800f5da:	2900      	cmp	r1, #0
 800f5dc:	d001      	beq.n	800f5e2 <vPortFree+0x22>
 800f5de:	b672      	cpsid	i
 800f5e0:	e7fe      	b.n	800f5e0 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5e2:	4393      	bics	r3, r2
 800f5e4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f5e6:	f7ff f85d 	bl	800e6a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5ea:	696a      	ldr	r2, [r5, #20]
 800f5ec:	6863      	ldr	r3, [r4, #4]
 800f5ee:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5f0:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5f2:	4463      	add	r3, ip
 800f5f4:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5f6:	f7ff ff41 	bl	800f47c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f5fa:	f7ff f8f3 	bl	800e7e4 <xTaskResumeAll>
}
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}
 800f600:	20002598 	.word	0x20002598

0800f604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f604:	b510      	push	{r4, lr}
 800f606:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f608:	f002 f8dc 	bl	80117c4 <HAL_RCC_GetHCLKFreq>
 800f60c:	21fa      	movs	r1, #250	; 0xfa
 800f60e:	0089      	lsls	r1, r1, #2
 800f610:	f7f0 fd9e 	bl	8000150 <__udivsi3>
 800f614:	f000 fb76 	bl	800fd04 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f618:	2001      	movs	r0, #1
 800f61a:	2200      	movs	r2, #0
 800f61c:	0021      	movs	r1, r4
 800f61e:	4240      	negs	r0, r0
 800f620:	f000 fb30 	bl	800fc84 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f624:	2000      	movs	r0, #0
 800f626:	bd10      	pop	{r4, pc}

0800f628 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f628:	2110      	movs	r1, #16
 800f62a:	4a06      	ldr	r2, [pc, #24]	; (800f644 <HAL_Init+0x1c>)
{
 800f62c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f62e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f630:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f632:	430b      	orrs	r3, r1
 800f634:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f636:	f7ff ffe5 	bl	800f604 <HAL_InitTick>
  HAL_MspInit();
 800f63a:	f001 fcb7 	bl	8010fac <HAL_MspInit>
}
 800f63e:	2000      	movs	r0, #0
 800f640:	bd10      	pop	{r4, pc}
 800f642:	46c0      	nop			; (mov r8, r8)
 800f644:	40022000 	.word	0x40022000

0800f648 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f648:	4a02      	ldr	r2, [pc, #8]	; (800f654 <HAL_IncTick+0xc>)
 800f64a:	6813      	ldr	r3, [r2, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	6013      	str	r3, [r2, #0]
}
 800f650:	4770      	bx	lr
 800f652:	46c0      	nop			; (mov r8, r8)
 800f654:	20006fe8 	.word	0x20006fe8

0800f658 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f658:	4b01      	ldr	r3, [pc, #4]	; (800f660 <HAL_GetTick+0x8>)
 800f65a:	6818      	ldr	r0, [r3, #0]
}
 800f65c:	4770      	bx	lr
 800f65e:	46c0      	nop			; (mov r8, r8)
 800f660:	20006fe8 	.word	0x20006fe8

0800f664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f664:	b510      	push	{r4, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f66a:	f7ff fff5 	bl	800f658 <HAL_GetTick>
 800f66e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f670:	f7ff fff2 	bl	800f658 <HAL_GetTick>
 800f674:	9b01      	ldr	r3, [sp, #4]
 800f676:	1b00      	subs	r0, r0, r4
 800f678:	4298      	cmp	r0, r3
 800f67a:	d3f9      	bcc.n	800f670 <HAL_Delay+0xc>
  {
  }
}
 800f67c:	b002      	add	sp, #8
 800f67e:	bd10      	pop	{r4, pc}

0800f680 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f680:	4b01      	ldr	r3, [pc, #4]	; (800f688 <HAL_GetREVID+0x8>)
 800f682:	6818      	ldr	r0, [r3, #0]
 800f684:	0c00      	lsrs	r0, r0, #16
}
 800f686:	4770      	bx	lr
 800f688:	40015800 	.word	0x40015800

0800f68c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f68c:	4b02      	ldr	r3, [pc, #8]	; (800f698 <HAL_GetDEVID+0xc>)
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	0500      	lsls	r0, r0, #20
 800f692:	0d00      	lsrs	r0, r0, #20
}
 800f694:	4770      	bx	lr
 800f696:	46c0      	nop			; (mov r8, r8)
 800f698:	40015800 	.word	0x40015800

0800f69c <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f69c:	2303      	movs	r3, #3
 800f69e:	6802      	ldr	r2, [r0, #0]
{
 800f6a0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f6a2:	6891      	ldr	r1, [r2, #8]
{
 800f6a4:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f6a6:	400b      	ands	r3, r1
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d001      	beq.n	800f6b0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f6ac:	2000      	movs	r0, #0
}
 800f6ae:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f6b0:	6811      	ldr	r1, [r2, #0]
 800f6b2:	420b      	tst	r3, r1
 800f6b4:	d00e      	beq.n	800f6d4 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f6b6:	2305      	movs	r3, #5
 800f6b8:	6891      	ldr	r1, [r2, #8]
 800f6ba:	400b      	ands	r3, r1
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d00d      	beq.n	800f6dc <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6c0:	2210      	movs	r2, #16
 800f6c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f6c4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f6cc:	3a0f      	subs	r2, #15
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f6d2:	e7ec      	b.n	800f6ae <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f6d4:	68d3      	ldr	r3, [r2, #12]
 800f6d6:	041b      	lsls	r3, r3, #16
 800f6d8:	d4ed      	bmi.n	800f6b6 <ADC_Disable+0x1a>
 800f6da:	e7e7      	b.n	800f6ac <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800f6dc:	2102      	movs	r1, #2
 800f6de:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f6e0:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800f6e2:	430b      	orrs	r3, r1
 800f6e4:	6093      	str	r3, [r2, #8]
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f6ea:	f7ff ffb5 	bl	800f658 <HAL_GetTick>
 800f6ee:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f6f0:	e004      	b.n	800f6fc <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f6f2:	f7ff ffb1 	bl	800f658 <HAL_GetTick>
 800f6f6:	1b80      	subs	r0, r0, r6
 800f6f8:	2802      	cmp	r0, #2
 800f6fa:	d804      	bhi.n	800f706 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	421d      	tst	r5, r3
 800f702:	d1f6      	bne.n	800f6f2 <ADC_Disable+0x56>
 800f704:	e7d2      	b.n	800f6ac <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f706:	2210      	movs	r2, #16
 800f708:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f70a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f70c:	4313      	orrs	r3, r2
 800f70e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f710:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f712:	431d      	orrs	r5, r3
 800f714:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f716:	e7ca      	b.n	800f6ae <ADC_Disable+0x12>

0800f718 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f718:	2300      	movs	r3, #0
{
 800f71a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f71c:	6802      	ldr	r2, [r0, #0]
{
 800f71e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f720:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f722:	6891      	ldr	r1, [r2, #8]
 800f724:	3303      	adds	r3, #3
{
 800f726:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f728:	400b      	ands	r3, r1
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d031      	beq.n	800f792 <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f72e:	6891      	ldr	r1, [r2, #8]
 800f730:	4b20      	ldr	r3, [pc, #128]	; (800f7b4 <ADC_Enable+0x9c>)
 800f732:	4219      	tst	r1, r3
 800f734:	d122      	bne.n	800f77c <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800f736:	2101      	movs	r1, #1
 800f738:	6893      	ldr	r3, [r2, #8]
 800f73a:	430b      	orrs	r3, r1
 800f73c:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f73e:	4b1e      	ldr	r3, [pc, #120]	; (800f7b8 <ADC_Enable+0xa0>)
 800f740:	491e      	ldr	r1, [pc, #120]	; (800f7bc <ADC_Enable+0xa4>)
 800f742:	6818      	ldr	r0, [r3, #0]
 800f744:	f7f0 fd04 	bl	8000150 <__udivsi3>
 800f748:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f74a:	9b01      	ldr	r3, [sp, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d005      	beq.n	800f75c <ADC_Enable+0x44>
      wait_loop_index--;
 800f750:	9b01      	ldr	r3, [sp, #4]
 800f752:	3b01      	subs	r3, #1
 800f754:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f756:	9b01      	ldr	r3, [sp, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d1f9      	bne.n	800f750 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f75c:	f7ff ff7c 	bl	800f658 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f760:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800f762:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f764:	e004      	b.n	800f770 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f766:	f7ff ff77 	bl	800f658 <HAL_GetTick>
 800f76a:	1b80      	subs	r0, r0, r6
 800f76c:	2802      	cmp	r0, #2
 800f76e:	d818      	bhi.n	800f7a2 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	421d      	tst	r5, r3
 800f776:	d0f6      	beq.n	800f766 <ADC_Enable+0x4e>
  return HAL_OK;
 800f778:	2000      	movs	r0, #0
 800f77a:	e008      	b.n	800f78e <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f77c:	2210      	movs	r2, #16
      return HAL_ERROR;
 800f77e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f780:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f782:	4313      	orrs	r3, r2
 800f784:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f786:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f788:	3a0f      	subs	r2, #15
 800f78a:	4313      	orrs	r3, r2
 800f78c:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f78e:	b002      	add	sp, #8
 800f790:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f792:	6811      	ldr	r1, [r2, #0]
 800f794:	420b      	tst	r3, r1
 800f796:	d1ef      	bne.n	800f778 <ADC_Enable+0x60>
 800f798:	68d3      	ldr	r3, [r2, #12]
 800f79a:	041b      	lsls	r3, r3, #16
 800f79c:	d5c7      	bpl.n	800f72e <ADC_Enable+0x16>
  return HAL_OK;
 800f79e:	2000      	movs	r0, #0
 800f7a0:	e7f5      	b.n	800f78e <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7a2:	2210      	movs	r2, #16
 800f7a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f7a6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f7ae:	431d      	orrs	r5, r3
 800f7b0:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f7b2:	e7ec      	b.n	800f78e <ADC_Enable+0x76>
 800f7b4:	80000017 	.word	0x80000017
 800f7b8:	200000b0 	.word	0x200000b0
 800f7bc:	000f4240 	.word	0x000f4240

0800f7c0 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f7c0:	2204      	movs	r2, #4
 800f7c2:	6803      	ldr	r3, [r0, #0]
{
 800f7c4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f7c6:	6899      	ldr	r1, [r3, #8]
{
 800f7c8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f7ca:	420a      	tst	r2, r1
 800f7cc:	d010      	beq.n	800f7f0 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f7ce:	6899      	ldr	r1, [r3, #8]
 800f7d0:	420a      	tst	r2, r1
 800f7d2:	d10f      	bne.n	800f7f4 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f7d4:	f7ff ff40 	bl	800f658 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f7d8:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800f7da:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f7dc:	e004      	b.n	800f7e8 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f7de:	f7ff ff3b 	bl	800f658 <HAL_GetTick>
 800f7e2:	1b80      	subs	r0, r0, r6
 800f7e4:	2802      	cmp	r0, #2
 800f7e6:	d80d      	bhi.n	800f804 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	421d      	tst	r5, r3
 800f7ee:	d1f6      	bne.n	800f7de <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f7f0:	2000      	movs	r0, #0
}
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f7f4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f7f6:	0792      	lsls	r2, r2, #30
 800f7f8:	d4ec      	bmi.n	800f7d4 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f7fa:	2110      	movs	r1, #16
 800f7fc:	689a      	ldr	r2, [r3, #8]
 800f7fe:	430a      	orrs	r2, r1
 800f800:	609a      	str	r2, [r3, #8]
 800f802:	e7e7      	b.n	800f7d4 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f804:	2210      	movs	r2, #16
 800f806:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f808:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f80a:	4313      	orrs	r3, r2
 800f80c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f80e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f810:	3a0f      	subs	r2, #15
 800f812:	4313      	orrs	r3, r2
 800f814:	64a3      	str	r3, [r4, #72]	; 0x48
 800f816:	e7ec      	b.n	800f7f2 <ADC_ConversionStop+0x32>

0800f818 <HAL_ADC_Init>:
{
 800f818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f81c:	d100      	bne.n	800f820 <HAL_ADC_Init+0x8>
 800f81e:	e075      	b.n	800f90c <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f820:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f822:	2b00      	cmp	r3, #0
 800f824:	d068      	beq.n	800f8f8 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f828:	06db      	lsls	r3, r3, #27
 800f82a:	d505      	bpl.n	800f838 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f82c:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800f82e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f830:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f832:	4313      	orrs	r3, r2
 800f834:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f838:	2004      	movs	r0, #4
 800f83a:	6823      	ldr	r3, [r4, #0]
 800f83c:	689a      	ldr	r2, [r3, #8]
 800f83e:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f840:	d1f4      	bne.n	800f82c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f842:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f844:	4942      	ldr	r1, [pc, #264]	; (800f950 <HAL_ADC_Init+0x138>)
 800f846:	400a      	ands	r2, r1
 800f848:	3106      	adds	r1, #6
 800f84a:	31ff      	adds	r1, #255	; 0xff
 800f84c:	430a      	orrs	r2, r1
 800f84e:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f850:	2203      	movs	r2, #3
 800f852:	6899      	ldr	r1, [r3, #8]
 800f854:	400a      	ands	r2, r1
 800f856:	2a01      	cmp	r2, #1
 800f858:	d073      	beq.n	800f942 <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f85a:	2118      	movs	r1, #24
 800f85c:	68da      	ldr	r2, [r3, #12]
 800f85e:	438a      	bics	r2, r1
 800f860:	68a1      	ldr	r1, [r4, #8]
 800f862:	430a      	orrs	r2, r1
 800f864:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f866:	691a      	ldr	r2, [r3, #16]
 800f868:	6861      	ldr	r1, [r4, #4]
 800f86a:	0092      	lsls	r2, r2, #2
 800f86c:	0892      	lsrs	r2, r2, #2
 800f86e:	430a      	orrs	r2, r1
 800f870:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f872:	68da      	ldr	r2, [r3, #12]
 800f874:	4937      	ldr	r1, [pc, #220]	; (800f954 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f876:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f878:	400a      	ands	r2, r1
 800f87a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f87c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f87e:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f880:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f882:	69e2      	ldr	r2, [r4, #28]
 800f884:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f886:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f888:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f88a:	3a01      	subs	r2, #1
 800f88c:	1e55      	subs	r5, r2, #1
 800f88e:	41aa      	sbcs	r2, r5
 800f890:	0315      	lsls	r5, r2, #12
 800f892:	68e2      	ldr	r2, [r4, #12]
 800f894:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f896:	6922      	ldr	r2, [r4, #16]
 800f898:	4339      	orrs	r1, r7
 800f89a:	2a02      	cmp	r2, #2
 800f89c:	d100      	bne.n	800f8a0 <HAL_ADC_Init+0x88>
 800f89e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f8a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f8a2:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f8a4:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f8a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f8a8:	432a      	orrs	r2, r5
 800f8aa:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f8ac:	2901      	cmp	r1, #1
 800f8ae:	d042      	beq.n	800f936 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f8b0:	20c2      	movs	r0, #194	; 0xc2
 800f8b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f8b4:	30ff      	adds	r0, #255	; 0xff
 800f8b6:	4281      	cmp	r1, r0
 800f8b8:	d002      	beq.n	800f8c0 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f8ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f8bc:	4301      	orrs	r1, r0
 800f8be:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f8c0:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f8c2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f8c4:	4311      	orrs	r1, r2
 800f8c6:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f8c8:	2180      	movs	r1, #128	; 0x80
 800f8ca:	0549      	lsls	r1, r1, #21
 800f8cc:	428d      	cmp	r5, r1
 800f8ce:	d01f      	beq.n	800f910 <HAL_ADC_Init+0xf8>
 800f8d0:	1e69      	subs	r1, r5, #1
 800f8d2:	2906      	cmp	r1, #6
 800f8d4:	d91c      	bls.n	800f910 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	491f      	ldr	r1, [pc, #124]	; (800f958 <HAL_ADC_Init+0x140>)
 800f8da:	400b      	ands	r3, r1
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d020      	beq.n	800f922 <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f8e0:	2212      	movs	r2, #18
 800f8e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f8e4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f8e6:	4393      	bics	r3, r2
 800f8e8:	3a02      	subs	r2, #2
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8f0:	3a0f      	subs	r2, #15
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800f8f6:	e79e      	b.n	800f836 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f8f8:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f8fa:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f8fc:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f8fe:	f7f8 ffd3 	bl	80088a8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f902:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f904:	06db      	lsls	r3, r3, #27
 800f906:	d500      	bpl.n	800f90a <HAL_ADC_Init+0xf2>
 800f908:	e790      	b.n	800f82c <HAL_ADC_Init+0x14>
 800f90a:	e795      	b.n	800f838 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f90c:	2001      	movs	r0, #1
 800f90e:	e792      	b.n	800f836 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f910:	2107      	movs	r1, #7
 800f912:	6958      	ldr	r0, [r3, #20]
 800f914:	4388      	bics	r0, r1
 800f916:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f918:	6958      	ldr	r0, [r3, #20]
 800f91a:	4029      	ands	r1, r5
 800f91c:	4301      	orrs	r1, r0
 800f91e:	6159      	str	r1, [r3, #20]
 800f920:	e7d9      	b.n	800f8d6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f922:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f924:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f926:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f928:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f92a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f92c:	4393      	bics	r3, r2
 800f92e:	3a02      	subs	r2, #2
 800f930:	4313      	orrs	r3, r2
 800f932:	6463      	str	r3, [r4, #68]	; 0x44
 800f934:	e77f      	b.n	800f836 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f936:	2e00      	cmp	r6, #0
 800f938:	d1ba      	bne.n	800f8b0 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f93a:	2180      	movs	r1, #128	; 0x80
 800f93c:	0249      	lsls	r1, r1, #9
 800f93e:	430a      	orrs	r2, r1
 800f940:	e7b6      	b.n	800f8b0 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f942:	6819      	ldr	r1, [r3, #0]
 800f944:	420a      	tst	r2, r1
 800f946:	d194      	bne.n	800f872 <HAL_ADC_Init+0x5a>
 800f948:	68da      	ldr	r2, [r3, #12]
 800f94a:	0412      	lsls	r2, r2, #16
 800f94c:	d491      	bmi.n	800f872 <HAL_ADC_Init+0x5a>
 800f94e:	e784      	b.n	800f85a <HAL_ADC_Init+0x42>
 800f950:	fffffefd 	.word	0xfffffefd
 800f954:	fffe0219 	.word	0xfffe0219
 800f958:	833fffe7 	.word	0x833fffe7

0800f95c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f95c:	6803      	ldr	r3, [r0, #0]
{
 800f95e:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f960:	689a      	ldr	r2, [r3, #8]
{
 800f962:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f964:	0752      	lsls	r2, r2, #29
 800f966:	d421      	bmi.n	800f9ac <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f968:	2240      	movs	r2, #64	; 0x40
 800f96a:	5c81      	ldrb	r1, [r0, r2]
 800f96c:	2901      	cmp	r1, #1
 800f96e:	d01d      	beq.n	800f9ac <HAL_ADC_Start+0x50>
 800f970:	2101      	movs	r1, #1
 800f972:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f974:	69c2      	ldr	r2, [r0, #28]
 800f976:	2a01      	cmp	r2, #1
 800f978:	d112      	bne.n	800f9a0 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f97a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f97c:	490c      	ldr	r1, [pc, #48]	; (800f9b0 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f97e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f980:	4011      	ands	r1, r2
 800f982:	2280      	movs	r2, #128	; 0x80
 800f984:	0052      	lsls	r2, r2, #1
 800f986:	430a      	orrs	r2, r1
 800f988:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f98a:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f98c:	2200      	movs	r2, #0
 800f98e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f990:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f992:	321c      	adds	r2, #28
 800f994:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f996:	689a      	ldr	r2, [r3, #8]
 800f998:	393c      	subs	r1, #60	; 0x3c
 800f99a:	430a      	orrs	r2, r1
 800f99c:	609a      	str	r2, [r3, #8]
}
 800f99e:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f9a0:	f7ff feba 	bl	800f718 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	d1fa      	bne.n	800f99e <HAL_ADC_Start+0x42>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	e7e6      	b.n	800f97a <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f9ac:	2002      	movs	r0, #2
 800f9ae:	e7f6      	b.n	800f99e <HAL_ADC_Start+0x42>
 800f9b0:	fffff0fe 	.word	0xfffff0fe

0800f9b4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f9b4:	2340      	movs	r3, #64	; 0x40
{ 
 800f9b6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f9b8:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f9ba:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f9bc:	2a01      	cmp	r2, #1
 800f9be:	d014      	beq.n	800f9ea <HAL_ADC_Stop+0x36>
 800f9c0:	2501      	movs	r5, #1
 800f9c2:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f9c4:	f7ff fefc 	bl	800f7c0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d003      	beq.n	800f9d4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f9cc:	2340      	movs	r3, #64	; 0x40
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	54e2      	strb	r2, [r4, r3]
}
 800f9d2:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f9d4:	0020      	movs	r0, r4
 800f9d6:	f7ff fe61 	bl	800f69c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d1f6      	bne.n	800f9cc <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f9de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9e0:	4a03      	ldr	r2, [pc, #12]	; (800f9f0 <HAL_ADC_Stop+0x3c>)
 800f9e2:	4013      	ands	r3, r2
 800f9e4:	431d      	orrs	r5, r3
 800f9e6:	6465      	str	r5, [r4, #68]	; 0x44
 800f9e8:	e7f0      	b.n	800f9cc <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f9ea:	2002      	movs	r0, #2
 800f9ec:	e7f1      	b.n	800f9d2 <HAL_ADC_Stop+0x1e>
 800f9ee:	46c0      	nop			; (mov r8, r8)
 800f9f0:	fffffefe 	.word	0xfffffefe

0800f9f4 <HAL_ADC_PollForConversion>:
{
 800f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f9f6:	6943      	ldr	r3, [r0, #20]
{
 800f9f8:	0006      	movs	r6, r0
 800f9fa:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f9fc:	2b08      	cmp	r3, #8
 800f9fe:	d04c      	beq.n	800fa9a <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fa00:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fa02:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	07db      	lsls	r3, r3, #31
 800fa08:	d43e      	bmi.n	800fa88 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800fa0a:	f7ff fe25 	bl	800f658 <HAL_GetTick>
 800fa0e:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fa10:	6832      	ldr	r2, [r6, #0]
 800fa12:	e001      	b.n	800fa18 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800fa14:	1c63      	adds	r3, r4, #1
 800fa16:	d127      	bne.n	800fa68 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fa18:	6813      	ldr	r3, [r2, #0]
 800fa1a:	421d      	tst	r5, r3
 800fa1c:	d0fa      	beq.n	800fa14 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fa1e:	2380      	movs	r3, #128	; 0x80
 800fa20:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	430b      	orrs	r3, r1
 800fa26:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fa28:	23c0      	movs	r3, #192	; 0xc0
 800fa2a:	68d1      	ldr	r1, [r2, #12]
 800fa2c:	011b      	lsls	r3, r3, #4
 800fa2e:	4219      	tst	r1, r3
 800fa30:	d113      	bne.n	800fa5a <HAL_ADC_PollForConversion+0x66>
 800fa32:	6a33      	ldr	r3, [r6, #32]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d110      	bne.n	800fa5a <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fa38:	6813      	ldr	r3, [r2, #0]
 800fa3a:	071b      	lsls	r3, r3, #28
 800fa3c:	d50d      	bpl.n	800fa5a <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fa3e:	6893      	ldr	r3, [r2, #8]
 800fa40:	075b      	lsls	r3, r3, #29
 800fa42:	d42f      	bmi.n	800faa4 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fa44:	210c      	movs	r1, #12
 800fa46:	6853      	ldr	r3, [r2, #4]
 800fa48:	438b      	bics	r3, r1
 800fa4a:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fa4c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fa4e:	491a      	ldr	r1, [pc, #104]	; (800fab8 <HAL_ADC_PollForConversion+0xc4>)
 800fa50:	400b      	ands	r3, r1
 800fa52:	3104      	adds	r1, #4
 800fa54:	31ff      	adds	r1, #255	; 0xff
 800fa56:	430b      	orrs	r3, r1
 800fa58:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fa5a:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800fa5c:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d101      	bne.n	800fa66 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fa62:	330c      	adds	r3, #12
 800fa64:	6013      	str	r3, [r2, #0]
}
 800fa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fa68:	2c00      	cmp	r4, #0
 800fa6a:	d004      	beq.n	800fa76 <HAL_ADC_PollForConversion+0x82>
 800fa6c:	f7ff fdf4 	bl	800f658 <HAL_GetTick>
 800fa70:	1bc0      	subs	r0, r0, r7
 800fa72:	42a0      	cmp	r0, r4
 800fa74:	d9cc      	bls.n	800fa10 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fa76:	2204      	movs	r2, #4
 800fa78:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800fa7a:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fa80:	2200      	movs	r2, #0
 800fa82:	2340      	movs	r3, #64	; 0x40
 800fa84:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fa86:	e7ee      	b.n	800fa66 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa88:	2220      	movs	r2, #32
 800fa8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fa90:	2200      	movs	r2, #0
 800fa92:	2340      	movs	r3, #64	; 0x40
 800fa94:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fa96:	2001      	movs	r0, #1
 800fa98:	e7e5      	b.n	800fa66 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800fa9a:	f7ff fddd 	bl	800f658 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fa9e:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800faa0:	0007      	movs	r7, r0
 800faa2:	e7b5      	b.n	800fa10 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800faa4:	2120      	movs	r1, #32
 800faa6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800faa8:	430b      	orrs	r3, r1
 800faaa:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800faac:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800faae:	391f      	subs	r1, #31
 800fab0:	430b      	orrs	r3, r1
 800fab2:	64b3      	str	r3, [r6, #72]	; 0x48
 800fab4:	e7d1      	b.n	800fa5a <HAL_ADC_PollForConversion+0x66>
 800fab6:	46c0      	nop			; (mov r8, r8)
 800fab8:	fffffefe 	.word	0xfffffefe

0800fabc <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fabc:	2208      	movs	r2, #8
 800fabe:	6803      	ldr	r3, [r0, #0]
 800fac0:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fac2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fac4:	4770      	bx	lr
 800fac6:	46c0      	nop			; (mov r8, r8)

0800fac8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800fac8:	2300      	movs	r3, #0
{
 800faca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800facc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800face:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fad0:	3340      	adds	r3, #64	; 0x40
 800fad2:	5cc2      	ldrb	r2, [r0, r3]
{
 800fad4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fad6:	2a01      	cmp	r2, #1
 800fad8:	d044      	beq.n	800fb64 <HAL_ADC_ConfigChannel+0x9c>
 800fada:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fadc:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fade:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800fae0:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fae2:	68b3      	ldr	r3, [r6, #8]
 800fae4:	075b      	lsls	r3, r3, #29
 800fae6:	d509      	bpl.n	800fafc <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fae8:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800faea:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800faec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800faee:	4313      	orrs	r3, r2
 800faf0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800faf2:	2340      	movs	r3, #64	; 0x40
 800faf4:	2200      	movs	r2, #0
 800faf6:	54e2      	strb	r2, [r4, r3]
}
 800faf8:	b003      	add	sp, #12
 800fafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fafc:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800fafe:	4d33      	ldr	r5, [pc, #204]	; (800fbcc <HAL_ADC_ConfigChannel+0x104>)
 800fb00:	001f      	movs	r7, r3
 800fb02:	46ac      	mov	ip, r5
 800fb04:	684d      	ldr	r5, [r1, #4]
 800fb06:	409a      	lsls	r2, r3
 800fb08:	3f10      	subs	r7, #16
 800fb0a:	4565      	cmp	r5, ip
 800fb0c:	d02c      	beq.n	800fb68 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fb0e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800fb10:	432a      	orrs	r2, r5
 800fb12:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fb14:	2280      	movs	r2, #128	; 0x80
 800fb16:	0552      	lsls	r2, r2, #21
 800fb18:	4290      	cmp	r0, r2
 800fb1a:	d00f      	beq.n	800fb3c <HAL_ADC_ConfigChannel+0x74>
 800fb1c:	3801      	subs	r0, #1
 800fb1e:	2806      	cmp	r0, #6
 800fb20:	d90c      	bls.n	800fb3c <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fb22:	2207      	movs	r2, #7
 800fb24:	6888      	ldr	r0, [r1, #8]
 800fb26:	6971      	ldr	r1, [r6, #20]
 800fb28:	4011      	ands	r1, r2
 800fb2a:	4288      	cmp	r0, r1
 800fb2c:	d006      	beq.n	800fb3c <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fb2e:	6971      	ldr	r1, [r6, #20]
 800fb30:	4391      	bics	r1, r2
 800fb32:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fb34:	6971      	ldr	r1, [r6, #20]
 800fb36:	4002      	ands	r2, r0
 800fb38:	430a      	orrs	r2, r1
 800fb3a:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fb3c:	2f02      	cmp	r7, #2
 800fb3e:	d80f      	bhi.n	800fb60 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb40:	4923      	ldr	r1, [pc, #140]	; (800fbd0 <HAL_ADC_ConfigChannel+0x108>)
 800fb42:	680a      	ldr	r2, [r1, #0]
 800fb44:	2b10      	cmp	r3, #16
 800fb46:	d029      	beq.n	800fb9c <HAL_ADC_ConfigChannel+0xd4>
 800fb48:	3b11      	subs	r3, #17
 800fb4a:	4258      	negs	r0, r3
 800fb4c:	4143      	adcs	r3, r0
 800fb4e:	4821      	ldr	r0, [pc, #132]	; (800fbd4 <HAL_ADC_ConfigChannel+0x10c>)
 800fb50:	425b      	negs	r3, r3
 800fb52:	4003      	ands	r3, r0
 800fb54:	2080      	movs	r0, #128	; 0x80
 800fb56:	0440      	lsls	r0, r0, #17
 800fb58:	4684      	mov	ip, r0
 800fb5a:	4463      	add	r3, ip
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb60:	2000      	movs	r0, #0
 800fb62:	e7c6      	b.n	800faf2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800fb64:	2002      	movs	r0, #2
 800fb66:	e7c7      	b.n	800faf8 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fb68:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800fb6a:	4391      	bics	r1, r2
 800fb6c:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fb6e:	2f02      	cmp	r7, #2
 800fb70:	d8f6      	bhi.n	800fb60 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb72:	4a17      	ldr	r2, [pc, #92]	; (800fbd0 <HAL_ADC_ConfigChannel+0x108>)
 800fb74:	6811      	ldr	r1, [r2, #0]
 800fb76:	2b10      	cmp	r3, #16
 800fb78:	d00e      	beq.n	800fb98 <HAL_ADC_ConfigChannel+0xd0>
 800fb7a:	3b11      	subs	r3, #17
 800fb7c:	001a      	movs	r2, r3
 800fb7e:	1e53      	subs	r3, r2, #1
 800fb80:	419a      	sbcs	r2, r3
 800fb82:	4b14      	ldr	r3, [pc, #80]	; (800fbd4 <HAL_ADC_ConfigChannel+0x10c>)
 800fb84:	4252      	negs	r2, r2
 800fb86:	4013      	ands	r3, r2
 800fb88:	4a13      	ldr	r2, [pc, #76]	; (800fbd8 <HAL_ADC_ConfigChannel+0x110>)
 800fb8a:	4694      	mov	ip, r2
 800fb8c:	4463      	add	r3, ip
 800fb8e:	4a10      	ldr	r2, [pc, #64]	; (800fbd0 <HAL_ADC_ConfigChannel+0x108>)
 800fb90:	400b      	ands	r3, r1
 800fb92:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb94:	2000      	movs	r0, #0
 800fb96:	e7ac      	b.n	800faf2 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb98:	4b10      	ldr	r3, [pc, #64]	; (800fbdc <HAL_ADC_ConfigChannel+0x114>)
 800fb9a:	e7f8      	b.n	800fb8e <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb9c:	2380      	movs	r3, #128	; 0x80
 800fb9e:	041b      	lsls	r3, r3, #16
 800fba0:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fba2:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fba4:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fba6:	6818      	ldr	r0, [r3, #0]
 800fba8:	490e      	ldr	r1, [pc, #56]	; (800fbe4 <HAL_ADC_ConfigChannel+0x11c>)
 800fbaa:	f7f0 fad1 	bl	8000150 <__udivsi3>
 800fbae:	0083      	lsls	r3, r0, #2
 800fbb0:	1818      	adds	r0, r3, r0
 800fbb2:	0040      	lsls	r0, r0, #1
 800fbb4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d0d1      	beq.n	800fb60 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800fbbc:	9b01      	ldr	r3, [sp, #4]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fbc2:	9b01      	ldr	r3, [sp, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1f9      	bne.n	800fbbc <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbc8:	2000      	movs	r0, #0
 800fbca:	e792      	b.n	800faf2 <HAL_ADC_ConfigChannel+0x2a>
 800fbcc:	00001001 	.word	0x00001001
 800fbd0:	40012708 	.word	0x40012708
 800fbd4:	ff400000 	.word	0xff400000
 800fbd8:	ffbfffff 	.word	0xffbfffff
 800fbdc:	ff7fffff 	.word	0xff7fffff
 800fbe0:	200000b0 	.word	0x200000b0
 800fbe4:	000f4240 	.word	0x000f4240

0800fbe8 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fbe8:	2340      	movs	r3, #64	; 0x40
{
 800fbea:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800fbec:	5cc2      	ldrb	r2, [r0, r3]
{
 800fbee:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fbf0:	2a01      	cmp	r2, #1
 800fbf2:	d042      	beq.n	800fc7a <HAL_ADCEx_Calibration_Start+0x92>
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fbf8:	6802      	ldr	r2, [r0, #0]
 800fbfa:	3b3d      	subs	r3, #61	; 0x3d
 800fbfc:	6891      	ldr	r1, [r2, #8]
 800fbfe:	400b      	ands	r3, r1
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d105      	bne.n	800fc10 <HAL_ADCEx_Calibration_Start+0x28>
 800fc04:	6811      	ldr	r1, [r2, #0]
 800fc06:	420b      	tst	r3, r1
 800fc08:	d126      	bne.n	800fc58 <HAL_ADCEx_Calibration_Start+0x70>
 800fc0a:	68d3      	ldr	r3, [r2, #12]
 800fc0c:	041b      	lsls	r3, r3, #16
 800fc0e:	d423      	bmi.n	800fc58 <HAL_ADCEx_Calibration_Start+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800fc10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc12:	491b      	ldr	r1, [pc, #108]	; (800fc80 <HAL_ADCEx_Calibration_Start+0x98>)
 800fc14:	400b      	ands	r3, r1
 800fc16:	3106      	adds	r1, #6
 800fc18:	31ff      	adds	r1, #255	; 0xff
 800fc1a:	430b      	orrs	r3, r1
 800fc1c:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800fc1e:	2380      	movs	r3, #128	; 0x80
 800fc20:	6891      	ldr	r1, [r2, #8]
 800fc22:	061b      	lsls	r3, r3, #24
 800fc24:	430b      	orrs	r3, r1
 800fc26:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 800fc28:	f7ff fd16 	bl	800f658 <HAL_GetTick>
 800fc2c:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800fc2e:	e004      	b.n	800fc3a <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800fc30:	f7ff fd12 	bl	800f658 <HAL_GetTick>
 800fc34:	1b40      	subs	r0, r0, r5
 800fc36:	2802      	cmp	r0, #2
 800fc38:	d814      	bhi.n	800fc64 <HAL_ADCEx_Calibration_Start+0x7c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	689b      	ldr	r3, [r3, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	dbf6      	blt.n	800fc30 <HAL_ADCEx_Calibration_Start+0x48>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fc42:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc44:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800fc46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc48:	4393      	bics	r3, r2
 800fc4a:	3a02      	subs	r2, #2
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fc50:	2340      	movs	r3, #64	; 0x40
 800fc52:	2200      	movs	r2, #0
 800fc54:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc58:	2220      	movs	r2, #32
 800fc5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fc5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	6463      	str	r3, [r4, #68]	; 0x44
 800fc62:	e7f5      	b.n	800fc50 <HAL_ADCEx_Calibration_Start+0x68>
        ADC_STATE_CLR_SET(hadc->State,
 800fc64:	2212      	movs	r2, #18
 800fc66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fc68:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800fc6a:	4393      	bics	r3, r2
 800fc6c:	3a02      	subs	r2, #2
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fc72:	2200      	movs	r2, #0
 800fc74:	2340      	movs	r3, #64	; 0x40
 800fc76:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800fc78:	e7ed      	b.n	800fc56 <HAL_ADCEx_Calibration_Start+0x6e>
  __HAL_LOCK(hadc);
 800fc7a:	2002      	movs	r0, #2
 800fc7c:	e7eb      	b.n	800fc56 <HAL_ADCEx_Calibration_Start+0x6e>
 800fc7e:	46c0      	nop			; (mov r8, r8)
 800fc80:	fffffefd 	.word	0xfffffefd

0800fc84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fc84:	22ff      	movs	r2, #255	; 0xff
 800fc86:	2303      	movs	r3, #3
 800fc88:	b530      	push	{r4, r5, lr}
 800fc8a:	0014      	movs	r4, r2
 800fc8c:	b2c5      	uxtb	r5, r0
 800fc8e:	402b      	ands	r3, r5
 800fc90:	00db      	lsls	r3, r3, #3
 800fc92:	409c      	lsls	r4, r3
 800fc94:	0189      	lsls	r1, r1, #6
 800fc96:	400a      	ands	r2, r1
 800fc98:	43e4      	mvns	r4, r4
 800fc9a:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	db0b      	blt.n	800fcb8 <HAL_NVIC_SetPriority+0x34>
 800fca0:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fca2:	0880      	lsrs	r0, r0, #2
 800fca4:	469c      	mov	ip, r3
 800fca6:	23c0      	movs	r3, #192	; 0xc0
 800fca8:	0080      	lsls	r0, r0, #2
 800fcaa:	4460      	add	r0, ip
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	58c1      	ldr	r1, [r0, r3]
 800fcb0:	400c      	ands	r4, r1
 800fcb2:	4322      	orrs	r2, r4
 800fcb4:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fcb6:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fcb8:	230f      	movs	r3, #15
 800fcba:	4907      	ldr	r1, [pc, #28]	; (800fcd8 <HAL_NVIC_SetPriority+0x54>)
 800fcbc:	402b      	ands	r3, r5
 800fcbe:	468c      	mov	ip, r1
 800fcc0:	3b08      	subs	r3, #8
 800fcc2:	089b      	lsrs	r3, r3, #2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	4463      	add	r3, ip
 800fcc8:	69d9      	ldr	r1, [r3, #28]
 800fcca:	400c      	ands	r4, r1
 800fccc:	4322      	orrs	r2, r4
 800fcce:	61da      	str	r2, [r3, #28]
 800fcd0:	e7f1      	b.n	800fcb6 <HAL_NVIC_SetPriority+0x32>
 800fcd2:	46c0      	nop			; (mov r8, r8)
 800fcd4:	e000e100 	.word	0xe000e100
 800fcd8:	e000ed00 	.word	0xe000ed00

0800fcdc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fcdc:	231f      	movs	r3, #31
 800fcde:	4018      	ands	r0, r3
 800fce0:	3b1e      	subs	r3, #30
 800fce2:	4083      	lsls	r3, r0
 800fce4:	4a01      	ldr	r2, [pc, #4]	; (800fcec <HAL_NVIC_EnableIRQ+0x10>)
 800fce6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fce8:	4770      	bx	lr
 800fcea:	46c0      	nop			; (mov r8, r8)
 800fcec:	e000e100 	.word	0xe000e100

0800fcf0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fcf0:	231f      	movs	r3, #31
 800fcf2:	4018      	ands	r0, r3
 800fcf4:	3b1e      	subs	r3, #30
 800fcf6:	4083      	lsls	r3, r0
 800fcf8:	2280      	movs	r2, #128	; 0x80
 800fcfa:	4901      	ldr	r1, [pc, #4]	; (800fd00 <HAL_NVIC_DisableIRQ+0x10>)
 800fcfc:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fcfe:	4770      	bx	lr
 800fd00:	e000e100 	.word	0xe000e100

0800fd04 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fd04:	4a0a      	ldr	r2, [pc, #40]	; (800fd30 <HAL_SYSTICK_Config+0x2c>)
 800fd06:	1e43      	subs	r3, r0, #1
 800fd08:	2001      	movs	r0, #1
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d80e      	bhi.n	800fd2c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd0e:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fd10:	4a08      	ldr	r2, [pc, #32]	; (800fd34 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd12:	4809      	ldr	r0, [pc, #36]	; (800fd38 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fd14:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd16:	6a03      	ldr	r3, [r0, #32]
 800fd18:	0609      	lsls	r1, r1, #24
 800fd1a:	021b      	lsls	r3, r3, #8
 800fd1c:	0a1b      	lsrs	r3, r3, #8
 800fd1e:	430b      	orrs	r3, r1
 800fd20:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fd22:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fd24:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fd26:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fd28:	3307      	adds	r3, #7
 800fd2a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fd2c:	4770      	bx	lr
 800fd2e:	46c0      	nop			; (mov r8, r8)
 800fd30:	00ffffff 	.word	0x00ffffff
 800fd34:	e000e010 	.word	0xe000e010
 800fd38:	e000ed00 	.word	0xe000ed00

0800fd3c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fd3c:	4a05      	ldr	r2, [pc, #20]	; (800fd54 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fd3e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fd40:	2804      	cmp	r0, #4
 800fd42:	d003      	beq.n	800fd4c <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fd44:	2104      	movs	r1, #4
 800fd46:	438b      	bics	r3, r1
 800fd48:	6013      	str	r3, [r2, #0]
  }
}
 800fd4a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fd4c:	4318      	orrs	r0, r3
 800fd4e:	6010      	str	r0, [r2, #0]
 800fd50:	e7fb      	b.n	800fd4a <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fd52:	46c0      	nop			; (mov r8, r8)
 800fd54:	e000e010 	.word	0xe000e010

0800fd58 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5a:	468c      	mov	ip, r1
 800fd5c:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fd5e:	0891      	lsrs	r1, r2, #2
 800fd60:	d010      	beq.n	800fd84 <CRC_Handle_8+0x2c>
 800fd62:	4664      	mov	r4, ip
 800fd64:	008f      	lsls	r7, r1, #2
 800fd66:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fd68:	7823      	ldrb	r3, [r4, #0]
 800fd6a:	7865      	ldrb	r5, [r4, #1]
 800fd6c:	061b      	lsls	r3, r3, #24
 800fd6e:	042d      	lsls	r5, r5, #16
 800fd70:	432b      	orrs	r3, r5
 800fd72:	78e5      	ldrb	r5, [r4, #3]
 800fd74:	432b      	orrs	r3, r5
 800fd76:	78a5      	ldrb	r5, [r4, #2]
 800fd78:	3404      	adds	r4, #4
 800fd7a:	022d      	lsls	r5, r5, #8
 800fd7c:	432b      	orrs	r3, r5
 800fd7e:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fd80:	42a7      	cmp	r7, r4
 800fd82:	d1f1      	bne.n	800fd68 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fd84:	2303      	movs	r3, #3
 800fd86:	401a      	ands	r2, r3
 800fd88:	d00b      	beq.n	800fda2 <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fd8a:	0089      	lsls	r1, r1, #2
 800fd8c:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800fd8e:	2a01      	cmp	r2, #1
 800fd90:	d013      	beq.n	800fdba <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800fd92:	2a02      	cmp	r2, #2
 800fd94:	d107      	bne.n	800fda6 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fd96:	5c5a      	ldrb	r2, [r3, r1]
 800fd98:	4461      	add	r1, ip
 800fd9a:	784b      	ldrb	r3, [r1, #1]
 800fd9c:	0212      	lsls	r2, r2, #8
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fda2:	6830      	ldr	r0, [r6, #0]
}
 800fda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fda6:	5c5a      	ldrb	r2, [r3, r1]
 800fda8:	4461      	add	r1, ip
 800fdaa:	784b      	ldrb	r3, [r1, #1]
 800fdac:	0212      	lsls	r2, r2, #8
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fdb2:	788b      	ldrb	r3, [r1, #2]
 800fdb4:	7033      	strb	r3, [r6, #0]
 800fdb6:	6806      	ldr	r6, [r0, #0]
 800fdb8:	e7f3      	b.n	800fda2 <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fdba:	5ccb      	ldrb	r3, [r1, r3]
 800fdbc:	7033      	strb	r3, [r6, #0]
 800fdbe:	6806      	ldr	r6, [r0, #0]
 800fdc0:	e7ef      	b.n	800fda2 <CRC_Handle_8+0x4a>
 800fdc2:	46c0      	nop			; (mov r8, r8)

0800fdc4 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800fdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fdc6:	0857      	lsrs	r7, r2, #1
 800fdc8:	6805      	ldr	r5, [r0, #0]
 800fdca:	d00a      	beq.n	800fde2 <CRC_Handle_16+0x1e>
 800fdcc:	0008      	movs	r0, r1
 800fdce:	00be      	lsls	r6, r7, #2
 800fdd0:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fdd2:	8803      	ldrh	r3, [r0, #0]
 800fdd4:	8844      	ldrh	r4, [r0, #2]
 800fdd6:	041b      	lsls	r3, r3, #16
 800fdd8:	4323      	orrs	r3, r4
 800fdda:	3004      	adds	r0, #4
 800fddc:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fdde:	4286      	cmp	r6, r0
 800fde0:	d1f7      	bne.n	800fdd2 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fde2:	07d3      	lsls	r3, r2, #31
 800fde4:	d502      	bpl.n	800fdec <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800fde6:	00bf      	lsls	r7, r7, #2
 800fde8:	5a7b      	ldrh	r3, [r7, r1]
 800fdea:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fdec:	6828      	ldr	r0, [r5, #0]
}
 800fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdf0 <HAL_CRC_Init>:
{
 800fdf0:	b510      	push	{r4, lr}
 800fdf2:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fdf4:	d01f      	beq.n	800fe36 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fdf6:	7f43      	ldrb	r3, [r0, #29]
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d01d      	beq.n	800fe3a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fdfe:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fe00:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fe02:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fe04:	f000 f8ae 	bl	800ff64 <HAL_CRCEx_Init>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d114      	bne.n	800fe36 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fe0c:	7963      	ldrb	r3, [r4, #5]
 800fe0e:	6822      	ldr	r2, [r4, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d01d      	beq.n	800fe50 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800fe14:	6923      	ldr	r3, [r4, #16]
 800fe16:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fe18:	2160      	movs	r1, #96	; 0x60
 800fe1a:	6893      	ldr	r3, [r2, #8]
 800fe1c:	438b      	bics	r3, r1
 800fe1e:	6961      	ldr	r1, [r4, #20]
 800fe20:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fe22:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fe24:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fe26:	6893      	ldr	r3, [r2, #8]
 800fe28:	438b      	bics	r3, r1
 800fe2a:	69a1      	ldr	r1, [r4, #24]
 800fe2c:	430b      	orrs	r3, r1
 800fe2e:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800fe30:	2301      	movs	r3, #1
 800fe32:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800fe34:	e000      	b.n	800fe38 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800fe36:	2001      	movs	r0, #1
}
 800fe38:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800fe3a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800fe3c:	f7fc fd2c 	bl	800c898 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fe40:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fe42:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fe44:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fe46:	f000 f88d 	bl	800ff64 <HAL_CRCEx_Init>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d0de      	beq.n	800fe0c <HAL_CRC_Init+0x1c>
 800fe4e:	e7f2      	b.n	800fe36 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fe50:	3b01      	subs	r3, #1
 800fe52:	6113      	str	r3, [r2, #16]
 800fe54:	e7e0      	b.n	800fe18 <HAL_CRC_Init+0x28>
 800fe56:	46c0      	nop			; (mov r8, r8)

0800fe58 <HAL_CRC_Accumulate>:
{
 800fe58:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800fe5a:	7f03      	ldrb	r3, [r0, #28]
{
 800fe5c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d021      	beq.n	800fea6 <HAL_CRC_Accumulate+0x4e>
 800fe62:	2301      	movs	r3, #1
 800fe64:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fe66:	3301      	adds	r3, #1
 800fe68:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fe6a:	6a03      	ldr	r3, [r0, #32]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d017      	beq.n	800fea0 <HAL_CRC_Accumulate+0x48>
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d00a      	beq.n	800fe8a <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fe74:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d102      	bne.n	800fe80 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fe7a:	0020      	movs	r0, r4
 800fe7c:	f7ff ff6c 	bl	800fd58 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fe80:	2301      	movs	r3, #1
 800fe82:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fe84:	2300      	movs	r3, #0
 800fe86:	7723      	strb	r3, [r4, #28]
}
 800fe88:	bd10      	pop	{r4, pc}
 800fe8a:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fe8c:	2a00      	cmp	r2, #0
 800fe8e:	d005      	beq.n	800fe9c <HAL_CRC_Accumulate+0x44>
 800fe90:	0092      	lsls	r2, r2, #2
 800fe92:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fe94:	c908      	ldmia	r1!, {r3}
 800fe96:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fe98:	428a      	cmp	r2, r1
 800fe9a:	d1fb      	bne.n	800fe94 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800fe9c:	6800      	ldr	r0, [r0, #0]
      break;
 800fe9e:	e7ef      	b.n	800fe80 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fea0:	f7ff ff90 	bl	800fdc4 <CRC_Handle_16>
      break;
 800fea4:	e7ec      	b.n	800fe80 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800fea6:	2002      	movs	r0, #2
 800fea8:	e7ee      	b.n	800fe88 <HAL_CRC_Accumulate+0x30>
 800feaa:	46c0      	nop			; (mov r8, r8)

0800feac <HAL_CRC_Calculate>:
{
 800feac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800feae:	7f03      	ldrb	r3, [r0, #28]
{
 800feb0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d026      	beq.n	800ff04 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800feb6:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800feb8:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800feba:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800febc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800febe:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800fec0:	6898      	ldr	r0, [r3, #8]
 800fec2:	4328      	orrs	r0, r5
 800fec4:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800fec6:	6a20      	ldr	r0, [r4, #32]
 800fec8:	2802      	cmp	r0, #2
 800feca:	d017      	beq.n	800fefc <HAL_CRC_Calculate+0x50>
 800fecc:	2803      	cmp	r0, #3
 800fece:	d007      	beq.n	800fee0 <HAL_CRC_Calculate+0x34>
 800fed0:	2801      	cmp	r0, #1
 800fed2:	d00f      	beq.n	800fef4 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fed4:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800fed6:	2301      	movs	r3, #1
 800fed8:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800feda:	2300      	movs	r3, #0
 800fedc:	7723      	strb	r3, [r4, #28]
}
 800fede:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800fee0:	2a00      	cmp	r2, #0
 800fee2:	d005      	beq.n	800fef0 <HAL_CRC_Calculate+0x44>
 800fee4:	0092      	lsls	r2, r2, #2
 800fee6:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fee8:	c901      	ldmia	r1!, {r0}
 800feea:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800feec:	4291      	cmp	r1, r2
 800feee:	d1fb      	bne.n	800fee8 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800fef0:	6818      	ldr	r0, [r3, #0]
      break;
 800fef2:	e7f0      	b.n	800fed6 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fef4:	0020      	movs	r0, r4
 800fef6:	f7ff ff2f 	bl	800fd58 <CRC_Handle_8>
      break;
 800fefa:	e7ec      	b.n	800fed6 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fefc:	0020      	movs	r0, r4
 800fefe:	f7ff ff61 	bl	800fdc4 <CRC_Handle_16>
      break;
 800ff02:	e7e8      	b.n	800fed6 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800ff04:	2002      	movs	r0, #2
 800ff06:	e7ea      	b.n	800fede <HAL_CRC_Calculate+0x32>

0800ff08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ff08:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ff0a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800ff0c:	2501      	movs	r5, #1
 800ff0e:	e001      	b.n	800ff14 <HAL_CRCEx_Polynomial_Set+0xc>
 800ff10:	3b01      	subs	r3, #1
 800ff12:	d312      	bcc.n	800ff3a <HAL_CRCEx_Polynomial_Set+0x32>
 800ff14:	002c      	movs	r4, r5
 800ff16:	409c      	lsls	r4, r3
 800ff18:	4221      	tst	r1, r4
 800ff1a:	d0f9      	beq.n	800ff10 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800ff1c:	2a10      	cmp	r2, #16
 800ff1e:	d01c      	beq.n	800ff5a <HAL_CRCEx_Polynomial_Set+0x52>
 800ff20:	2a18      	cmp	r2, #24
 800ff22:	d012      	beq.n	800ff4a <HAL_CRCEx_Polynomial_Set+0x42>
 800ff24:	2a08      	cmp	r2, #8
 800ff26:	d014      	beq.n	800ff52 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800ff28:	6800      	ldr	r0, [r0, #0]
 800ff2a:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800ff2c:	2118      	movs	r1, #24
 800ff2e:	6883      	ldr	r3, [r0, #8]
 800ff30:	438b      	bics	r3, r1
 800ff32:	431a      	orrs	r2, r3
 800ff34:	6082      	str	r2, [r0, #8]
 800ff36:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800ff38:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800ff3a:	2a10      	cmp	r2, #16
 800ff3c:	d003      	beq.n	800ff46 <HAL_CRCEx_Polynomial_Set+0x3e>
 800ff3e:	2a18      	cmp	r2, #24
 800ff40:	d001      	beq.n	800ff46 <HAL_CRCEx_Polynomial_Set+0x3e>
 800ff42:	2a08      	cmp	r2, #8
 800ff44:	d1f0      	bne.n	800ff28 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800ff46:	2001      	movs	r0, #1
 800ff48:	e7f6      	b.n	800ff38 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800ff4a:	2b06      	cmp	r3, #6
 800ff4c:	d9ec      	bls.n	800ff28 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800ff4e:	2001      	movs	r0, #1
 800ff50:	e7f2      	b.n	800ff38 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800ff52:	2b0f      	cmp	r3, #15
 800ff54:	d9e8      	bls.n	800ff28 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800ff56:	2001      	movs	r0, #1
 800ff58:	e7ee      	b.n	800ff38 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800ff5a:	2b07      	cmp	r3, #7
 800ff5c:	d9e4      	bls.n	800ff28 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800ff5e:	2001      	movs	r0, #1
 800ff60:	e7ea      	b.n	800ff38 <HAL_CRCEx_Polynomial_Set+0x30>
 800ff62:	46c0      	nop			; (mov r8, r8)

0800ff64 <HAL_CRCEx_Init>:
{
 800ff64:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ff66:	7903      	ldrb	r3, [r0, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d108      	bne.n	800ff7e <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ff6c:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800ff6e:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800ff70:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800ff72:	4a07      	ldr	r2, [pc, #28]	; (800ff90 <HAL_CRCEx_Init+0x2c>)
 800ff74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ff76:	689a      	ldr	r2, [r3, #8]
 800ff78:	438a      	bics	r2, r1
 800ff7a:	609a      	str	r2, [r3, #8]
}
 800ff7c:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ff7e:	68c2      	ldr	r2, [r0, #12]
 800ff80:	6881      	ldr	r1, [r0, #8]
 800ff82:	f7ff ffc1 	bl	800ff08 <HAL_CRCEx_Polynomial_Set>
 800ff86:	1e43      	subs	r3, r0, #1
 800ff88:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800ff8a:	b2c0      	uxtb	r0, r0
 800ff8c:	e7f6      	b.n	800ff7c <HAL_CRCEx_Init+0x18>
 800ff8e:	46c0      	nop			; (mov r8, r8)
 800ff90:	04c11db7 	.word	0x04c11db7

0800ff94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800ff94:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ff96:	2800      	cmp	r0, #0
 800ff98:	d023      	beq.n	800ffe2 <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800ff9a:	2321      	movs	r3, #33	; 0x21
 800ff9c:	5cc3      	ldrb	r3, [r0, r3]
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d01b      	beq.n	800ffdc <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ffa4:	2121      	movs	r1, #33	; 0x21
 800ffa6:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ffa8:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800ffaa:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800ffac:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ffae:	4a0e      	ldr	r2, [pc, #56]	; (800ffe8 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ffb0:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ffb2:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800ffb4:	6843      	ldr	r3, [r0, #4]
 800ffb6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ffb8:	68c5      	ldr	r5, [r0, #12]
 800ffba:	432b      	orrs	r3, r5
 800ffbc:	6905      	ldr	r5, [r0, #16]
 800ffbe:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ffc0:	6945      	ldr	r5, [r0, #20]
 800ffc2:	432b      	orrs	r3, r5
 800ffc4:	6985      	ldr	r5, [r0, #24]
 800ffc6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800ffc8:	69c5      	ldr	r5, [r0, #28]
 800ffca:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800ffcc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800ffce:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800ffd8:	2000      	movs	r0, #0
}  
 800ffda:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800ffdc:	2220      	movs	r2, #32
 800ffde:	5483      	strb	r3, [r0, r2]
 800ffe0:	e7e0      	b.n	800ffa4 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	e7f9      	b.n	800ffda <HAL_DMA_Init+0x46>
 800ffe6:	46c0      	nop			; (mov r8, r8)
 800ffe8:	ffffc00f 	.word	0xffffc00f

0800ffec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ffec:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800ffee:	2420      	movs	r4, #32
 800fff0:	5d05      	ldrb	r5, [r0, r4]
 800fff2:	2d01      	cmp	r5, #1
 800fff4:	d023      	beq.n	801003e <HAL_DMA_Start_IT+0x52>
 800fff6:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fff8:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800fffa:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fffc:	3401      	adds	r4, #1
 800fffe:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010000:	6804      	ldr	r4, [r0, #0]
 8010002:	6825      	ldr	r5, [r4, #0]
 8010004:	43b5      	bics	r5, r6
 8010006:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010008:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801000a:	6843      	ldr	r3, [r0, #4]
 801000c:	2b10      	cmp	r3, #16
 801000e:	d013      	beq.n	8010038 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010010:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010012:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010014:	2202      	movs	r2, #2
  return HAL_OK;    
 8010016:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010018:	6823      	ldr	r3, [r4, #0]
 801001a:	4313      	orrs	r3, r2
 801001c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	3202      	adds	r2, #2
 8010022:	4313      	orrs	r3, r2
 8010024:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	3204      	adds	r2, #4
 801002a:	4313      	orrs	r3, r2
 801002c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 801002e:	6823      	ldr	r3, [r4, #0]
 8010030:	3a07      	subs	r2, #7
 8010032:	4313      	orrs	r3, r2
 8010034:	6023      	str	r3, [r4, #0]
} 
 8010036:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010038:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 801003a:	60e1      	str	r1, [r4, #12]
 801003c:	e7ea      	b.n	8010014 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 801003e:	2002      	movs	r0, #2
 8010040:	e7f9      	b.n	8010036 <HAL_DMA_Start_IT+0x4a>
 8010042:	46c0      	nop			; (mov r8, r8)

08010044 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8010044:	2101      	movs	r1, #1
 8010046:	6802      	ldr	r2, [r0, #0]
{
 8010048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 801004a:	6813      	ldr	r3, [r2, #0]
{
 801004c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801004e:	438b      	bics	r3, r1
 8010050:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010052:	f7ff fb01 	bl	800f658 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010056:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8010058:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801005a:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801005c:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801005e:	e004      	b.n	801006a <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010060:	f7ff fafa 	bl	800f658 <HAL_GetTick>
 8010064:	1bc0      	subs	r0, r0, r7
 8010066:	42b0      	cmp	r0, r6
 8010068:	d809      	bhi.n	801007e <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	402b      	ands	r3, r5
 8010070:	d1f6      	bne.n	8010060 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 8010072:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 8010074:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8010076:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 8010078:	3a01      	subs	r2, #1
 801007a:	54a3      	strb	r3, [r4, r2]
}
 801007c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801007e:	2220      	movs	r2, #32
 8010080:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010082:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010084:	4313      	orrs	r3, r2
 8010086:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010088:	2321      	movs	r3, #33	; 0x21
 801008a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801008c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 801008e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 8010090:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010092:	e7f3      	b.n	801007c <HAL_DMA_Abort+0x38>

08010094 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010094:	6803      	ldr	r3, [r0, #0]
 8010096:	4aa2      	ldr	r2, [pc, #648]	; (8010320 <HAL_DMA_IRQHandler+0x28c>)
{        
 8010098:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801009a:	0019      	movs	r1, r3
{        
 801009c:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d937      	bls.n	8010112 <HAL_DMA_IRQHandler+0x7e>
 80100a2:	48a0      	ldr	r0, [pc, #640]	; (8010324 <HAL_DMA_IRQHandler+0x290>)
 80100a4:	4da0      	ldr	r5, [pc, #640]	; (8010328 <HAL_DMA_IRQHandler+0x294>)
 80100a6:	6806      	ldr	r6, [r0, #0]
 80100a8:	42ab      	cmp	r3, r5
 80100aa:	d100      	bne.n	80100ae <HAL_DMA_IRQHandler+0x1a>
 80100ac:	e0ed      	b.n	801028a <HAL_DMA_IRQHandler+0x1f6>
 80100ae:	4d9f      	ldr	r5, [pc, #636]	; (801032c <HAL_DMA_IRQHandler+0x298>)
 80100b0:	42ab      	cmp	r3, r5
 80100b2:	d100      	bne.n	80100b6 <HAL_DMA_IRQHandler+0x22>
 80100b4:	e334      	b.n	8010720 <HAL_DMA_IRQHandler+0x68c>
 80100b6:	4d9e      	ldr	r5, [pc, #632]	; (8010330 <HAL_DMA_IRQHandler+0x29c>)
 80100b8:	42ab      	cmp	r3, r5
 80100ba:	d100      	bne.n	80100be <HAL_DMA_IRQHandler+0x2a>
 80100bc:	e129      	b.n	8010312 <HAL_DMA_IRQHandler+0x27e>
 80100be:	4d9d      	ldr	r5, [pc, #628]	; (8010334 <HAL_DMA_IRQHandler+0x2a0>)
 80100c0:	42ab      	cmp	r3, r5
 80100c2:	d100      	bne.n	80100c6 <HAL_DMA_IRQHandler+0x32>
 80100c4:	e34b      	b.n	801075e <HAL_DMA_IRQHandler+0x6ca>
 80100c6:	4d9c      	ldr	r5, [pc, #624]	; (8010338 <HAL_DMA_IRQHandler+0x2a4>)
 80100c8:	42ab      	cmp	r3, r5
 80100ca:	d100      	bne.n	80100ce <HAL_DMA_IRQHandler+0x3a>
 80100cc:	e38b      	b.n	80107e6 <HAL_DMA_IRQHandler+0x752>
 80100ce:	4d9b      	ldr	r5, [pc, #620]	; (801033c <HAL_DMA_IRQHandler+0x2a8>)
 80100d0:	42ab      	cmp	r3, r5
 80100d2:	d100      	bne.n	80100d6 <HAL_DMA_IRQHandler+0x42>
 80100d4:	e3cf      	b.n	8010876 <HAL_DMA_IRQHandler+0x7e2>
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d100      	bne.n	80100dc <HAL_DMA_IRQHandler+0x48>
 80100da:	e35e      	b.n	801079a <HAL_DMA_IRQHandler+0x706>
 80100dc:	4a98      	ldr	r2, [pc, #608]	; (8010340 <HAL_DMA_IRQHandler+0x2ac>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d101      	bne.n	80100e6 <HAL_DMA_IRQHandler+0x52>
 80100e2:	f000 fbe8 	bl	80108b6 <HAL_DMA_IRQHandler+0x822>
 80100e6:	4a97      	ldr	r2, [pc, #604]	; (8010344 <HAL_DMA_IRQHandler+0x2b0>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d101      	bne.n	80100f0 <HAL_DMA_IRQHandler+0x5c>
 80100ec:	f000 fc04 	bl	80108f8 <HAL_DMA_IRQHandler+0x864>
 80100f0:	4a95      	ldr	r2, [pc, #596]	; (8010348 <HAL_DMA_IRQHandler+0x2b4>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d101      	bne.n	80100fa <HAL_DMA_IRQHandler+0x66>
 80100f6:	f000 fc21 	bl	801093c <HAL_DMA_IRQHandler+0x8a8>
 80100fa:	4a94      	ldr	r2, [pc, #592]	; (801034c <HAL_DMA_IRQHandler+0x2b8>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d101      	bne.n	8010104 <HAL_DMA_IRQHandler+0x70>
 8010100:	f000 fc37 	bl	8010972 <HAL_DMA_IRQHandler+0x8de>
 8010104:	0332      	lsls	r2, r6, #12
 8010106:	d43c      	bmi.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010108:	4a86      	ldr	r2, [pc, #536]	; (8010324 <HAL_DMA_IRQHandler+0x290>)
 801010a:	6810      	ldr	r0, [r2, #0]
 801010c:	2280      	movs	r2, #128	; 0x80
 801010e:	02d2      	lsls	r2, r2, #11
 8010110:	e0c0      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010112:	488f      	ldr	r0, [pc, #572]	; (8010350 <HAL_DMA_IRQHandler+0x2bc>)
 8010114:	4d84      	ldr	r5, [pc, #528]	; (8010328 <HAL_DMA_IRQHandler+0x294>)
 8010116:	6806      	ldr	r6, [r0, #0]
 8010118:	42ab      	cmp	r3, r5
 801011a:	d02e      	beq.n	801017a <HAL_DMA_IRQHandler+0xe6>
 801011c:	4d83      	ldr	r5, [pc, #524]	; (801032c <HAL_DMA_IRQHandler+0x298>)
 801011e:	42ab      	cmp	r3, r5
 8010120:	d100      	bne.n	8010124 <HAL_DMA_IRQHandler+0x90>
 8010122:	e2f6      	b.n	8010712 <HAL_DMA_IRQHandler+0x67e>
 8010124:	4d82      	ldr	r5, [pc, #520]	; (8010330 <HAL_DMA_IRQHandler+0x29c>)
 8010126:	42ab      	cmp	r3, r5
 8010128:	d100      	bne.n	801012c <HAL_DMA_IRQHandler+0x98>
 801012a:	e0ea      	b.n	8010302 <HAL_DMA_IRQHandler+0x26e>
 801012c:	4d81      	ldr	r5, [pc, #516]	; (8010334 <HAL_DMA_IRQHandler+0x2a0>)
 801012e:	42ab      	cmp	r3, r5
 8010130:	d100      	bne.n	8010134 <HAL_DMA_IRQHandler+0xa0>
 8010132:	e30c      	b.n	801074e <HAL_DMA_IRQHandler+0x6ba>
 8010134:	4d80      	ldr	r5, [pc, #512]	; (8010338 <HAL_DMA_IRQHandler+0x2a4>)
 8010136:	42ab      	cmp	r3, r5
 8010138:	d100      	bne.n	801013c <HAL_DMA_IRQHandler+0xa8>
 801013a:	e35b      	b.n	80107f4 <HAL_DMA_IRQHandler+0x760>
 801013c:	4d7f      	ldr	r5, [pc, #508]	; (801033c <HAL_DMA_IRQHandler+0x2a8>)
 801013e:	42ab      	cmp	r3, r5
 8010140:	d100      	bne.n	8010144 <HAL_DMA_IRQHandler+0xb0>
 8010142:	e390      	b.n	8010866 <HAL_DMA_IRQHandler+0x7d2>
 8010144:	4293      	cmp	r3, r2
 8010146:	d100      	bne.n	801014a <HAL_DMA_IRQHandler+0xb6>
 8010148:	e31f      	b.n	801078a <HAL_DMA_IRQHandler+0x6f6>
 801014a:	4a7d      	ldr	r2, [pc, #500]	; (8010340 <HAL_DMA_IRQHandler+0x2ac>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d100      	bne.n	8010152 <HAL_DMA_IRQHandler+0xbe>
 8010150:	e3aa      	b.n	80108a8 <HAL_DMA_IRQHandler+0x814>
 8010152:	4a7c      	ldr	r2, [pc, #496]	; (8010344 <HAL_DMA_IRQHandler+0x2b0>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d100      	bne.n	801015a <HAL_DMA_IRQHandler+0xc6>
 8010158:	e3c7      	b.n	80108ea <HAL_DMA_IRQHandler+0x856>
 801015a:	4a7b      	ldr	r2, [pc, #492]	; (8010348 <HAL_DMA_IRQHandler+0x2b4>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d101      	bne.n	8010164 <HAL_DMA_IRQHandler+0xd0>
 8010160:	f000 fbe4 	bl	801092c <HAL_DMA_IRQHandler+0x898>
 8010164:	4a79      	ldr	r2, [pc, #484]	; (801034c <HAL_DMA_IRQHandler+0x2b8>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d100      	bne.n	801016c <HAL_DMA_IRQHandler+0xd8>
 801016a:	e2e8      	b.n	801073e <HAL_DMA_IRQHandler+0x6aa>
 801016c:	0332      	lsls	r2, r6, #12
 801016e:	d408      	bmi.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010170:	4a77      	ldr	r2, [pc, #476]	; (8010350 <HAL_DMA_IRQHandler+0x2bc>)
 8010172:	6810      	ldr	r0, [r2, #0]
 8010174:	2280      	movs	r2, #128	; 0x80
 8010176:	02d2      	lsls	r2, r2, #11
 8010178:	e15f      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801017a:	0732      	lsls	r2, r6, #28
 801017c:	d401      	bmi.n	8010182 <HAL_DMA_IRQHandler+0xee>
 801017e:	f000 fc0a 	bl	8010996 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010182:	2208      	movs	r2, #8
 8010184:	6818      	ldr	r0, [r3, #0]
 8010186:	4202      	tst	r2, r0
 8010188:	d100      	bne.n	801018c <HAL_DMA_IRQHandler+0xf8>
 801018a:	e1f4      	b.n	8010576 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801018c:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801018e:	4d66      	ldr	r5, [pc, #408]	; (8010328 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010190:	4390      	bics	r0, r2
 8010192:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010194:	4862      	ldr	r0, [pc, #392]	; (8010320 <HAL_DMA_IRQHandler+0x28c>)
 8010196:	4283      	cmp	r3, r0
 8010198:	d800      	bhi.n	801019c <HAL_DMA_IRQHandler+0x108>
 801019a:	e1a9      	b.n	80104f0 <HAL_DMA_IRQHandler+0x45c>
 801019c:	42ab      	cmp	r3, r5
 801019e:	d100      	bne.n	80101a2 <HAL_DMA_IRQHandler+0x10e>
 80101a0:	e310      	b.n	80107c4 <HAL_DMA_IRQHandler+0x730>
 80101a2:	4a62      	ldr	r2, [pc, #392]	; (801032c <HAL_DMA_IRQHandler+0x298>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d100      	bne.n	80101aa <HAL_DMA_IRQHandler+0x116>
 80101a8:	e337      	b.n	801081a <HAL_DMA_IRQHandler+0x786>
 80101aa:	4a61      	ldr	r2, [pc, #388]	; (8010330 <HAL_DMA_IRQHandler+0x29c>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d100      	bne.n	80101b2 <HAL_DMA_IRQHandler+0x11e>
 80101b0:	e2df      	b.n	8010772 <HAL_DMA_IRQHandler+0x6de>
 80101b2:	4a60      	ldr	r2, [pc, #384]	; (8010334 <HAL_DMA_IRQHandler+0x2a0>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d100      	bne.n	80101ba <HAL_DMA_IRQHandler+0x126>
 80101b8:	e370      	b.n	801089c <HAL_DMA_IRQHandler+0x808>
 80101ba:	4a5f      	ldr	r2, [pc, #380]	; (8010338 <HAL_DMA_IRQHandler+0x2a4>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d100      	bne.n	80101c2 <HAL_DMA_IRQHandler+0x12e>
 80101c0:	e38a      	b.n	80108d8 <HAL_DMA_IRQHandler+0x844>
 80101c2:	4a5e      	ldr	r2, [pc, #376]	; (801033c <HAL_DMA_IRQHandler+0x2a8>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d100      	bne.n	80101ca <HAL_DMA_IRQHandler+0x136>
 80101c8:	e3a4      	b.n	8010914 <HAL_DMA_IRQHandler+0x880>
 80101ca:	4283      	cmp	r3, r0
 80101cc:	d100      	bne.n	80101d0 <HAL_DMA_IRQHandler+0x13c>
 80101ce:	e3cd      	b.n	801096c <HAL_DMA_IRQHandler+0x8d8>
 80101d0:	4a5b      	ldr	r2, [pc, #364]	; (8010340 <HAL_DMA_IRQHandler+0x2ac>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d100      	bne.n	80101d8 <HAL_DMA_IRQHandler+0x144>
 80101d6:	e3d8      	b.n	801098a <HAL_DMA_IRQHandler+0x8f6>
 80101d8:	4a5a      	ldr	r2, [pc, #360]	; (8010344 <HAL_DMA_IRQHandler+0x2b0>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d100      	bne.n	80101e0 <HAL_DMA_IRQHandler+0x14c>
 80101de:	e3d8      	b.n	8010992 <HAL_DMA_IRQHandler+0x8fe>
 80101e0:	4a59      	ldr	r2, [pc, #356]	; (8010348 <HAL_DMA_IRQHandler+0x2b4>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d100      	bne.n	80101e8 <HAL_DMA_IRQHandler+0x154>
 80101e6:	e2c4      	b.n	8010772 <HAL_DMA_IRQHandler+0x6de>
 80101e8:	4a5a      	ldr	r2, [pc, #360]	; (8010354 <HAL_DMA_IRQHandler+0x2c0>)
 80101ea:	189a      	adds	r2, r3, r2
 80101ec:	4250      	negs	r0, r2
 80101ee:	4142      	adcs	r2, r0
 80101f0:	4859      	ldr	r0, [pc, #356]	; (8010358 <HAL_DMA_IRQHandler+0x2c4>)
 80101f2:	4252      	negs	r2, r2
 80101f4:	4002      	ands	r2, r0
 80101f6:	2080      	movs	r0, #128	; 0x80
 80101f8:	0300      	lsls	r0, r0, #12
 80101fa:	4684      	mov	ip, r0
 80101fc:	4462      	add	r2, ip
 80101fe:	4849      	ldr	r0, [pc, #292]	; (8010324 <HAL_DMA_IRQHandler+0x290>)
 8010200:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010202:	2001      	movs	r0, #1
 8010204:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010206:	4302      	orrs	r2, r0
 8010208:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801020a:	2221      	movs	r2, #33	; 0x21
 801020c:	3003      	adds	r0, #3
 801020e:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010210:	2000      	movs	r0, #0
 8010212:	3a01      	subs	r2, #1
 8010214:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010216:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010218:	2a00      	cmp	r2, #0
 801021a:	d000      	beq.n	801021e <HAL_DMA_IRQHandler+0x18a>
 801021c:	e1a7      	b.n	801056e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801021e:	4a41      	ldr	r2, [pc, #260]	; (8010324 <HAL_DMA_IRQHandler+0x290>)
 8010220:	4d41      	ldr	r5, [pc, #260]	; (8010328 <HAL_DMA_IRQHandler+0x294>)
 8010222:	6810      	ldr	r0, [r2, #0]
 8010224:	2204      	movs	r2, #4
 8010226:	42ab      	cmp	r3, r5
 8010228:	d034      	beq.n	8010294 <HAL_DMA_IRQHandler+0x200>
 801022a:	4d40      	ldr	r5, [pc, #256]	; (801032c <HAL_DMA_IRQHandler+0x298>)
 801022c:	2240      	movs	r2, #64	; 0x40
 801022e:	42ab      	cmp	r3, r5
 8010230:	d030      	beq.n	8010294 <HAL_DMA_IRQHandler+0x200>
 8010232:	4a3f      	ldr	r2, [pc, #252]	; (8010330 <HAL_DMA_IRQHandler+0x29c>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d100      	bne.n	801023a <HAL_DMA_IRQHandler+0x1a6>
 8010238:	e3b1      	b.n	801099e <HAL_DMA_IRQHandler+0x90a>
 801023a:	4a3e      	ldr	r2, [pc, #248]	; (8010334 <HAL_DMA_IRQHandler+0x2a0>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d100      	bne.n	8010242 <HAL_DMA_IRQHandler+0x1ae>
 8010240:	e39e      	b.n	8010980 <HAL_DMA_IRQHandler+0x8ec>
 8010242:	4a3d      	ldr	r2, [pc, #244]	; (8010338 <HAL_DMA_IRQHandler+0x2a4>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d100      	bne.n	801024a <HAL_DMA_IRQHandler+0x1b6>
 8010248:	e760      	b.n	801010c <HAL_DMA_IRQHandler+0x78>
 801024a:	4a3c      	ldr	r2, [pc, #240]	; (801033c <HAL_DMA_IRQHandler+0x2a8>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d100      	bne.n	8010252 <HAL_DMA_IRQHandler+0x1be>
 8010250:	e315      	b.n	801087e <HAL_DMA_IRQHandler+0x7ea>
 8010252:	4a33      	ldr	r2, [pc, #204]	; (8010320 <HAL_DMA_IRQHandler+0x28c>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d100      	bne.n	801025a <HAL_DMA_IRQHandler+0x1c6>
 8010258:	e2a3      	b.n	80107a2 <HAL_DMA_IRQHandler+0x70e>
 801025a:	4d39      	ldr	r5, [pc, #228]	; (8010340 <HAL_DMA_IRQHandler+0x2ac>)
 801025c:	2204      	movs	r2, #4
 801025e:	42ab      	cmp	r3, r5
 8010260:	d018      	beq.n	8010294 <HAL_DMA_IRQHandler+0x200>
 8010262:	4d38      	ldr	r5, [pc, #224]	; (8010344 <HAL_DMA_IRQHandler+0x2b0>)
 8010264:	323c      	adds	r2, #60	; 0x3c
 8010266:	42ab      	cmp	r3, r5
 8010268:	d014      	beq.n	8010294 <HAL_DMA_IRQHandler+0x200>
 801026a:	4a37      	ldr	r2, [pc, #220]	; (8010348 <HAL_DMA_IRQHandler+0x2b4>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d100      	bne.n	8010272 <HAL_DMA_IRQHandler+0x1de>
 8010270:	e395      	b.n	801099e <HAL_DMA_IRQHandler+0x90a>
 8010272:	4a38      	ldr	r2, [pc, #224]	; (8010354 <HAL_DMA_IRQHandler+0x2c0>)
 8010274:	189a      	adds	r2, r3, r2
 8010276:	4255      	negs	r5, r2
 8010278:	416a      	adcs	r2, r5
 801027a:	4d38      	ldr	r5, [pc, #224]	; (801035c <HAL_DMA_IRQHandler+0x2c8>)
 801027c:	4252      	negs	r2, r2
 801027e:	402a      	ands	r2, r5
 8010280:	2580      	movs	r5, #128	; 0x80
 8010282:	02ed      	lsls	r5, r5, #11
 8010284:	46ac      	mov	ip, r5
 8010286:	4462      	add	r2, ip
 8010288:	e004      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801028a:	0732      	lsls	r2, r6, #28
 801028c:	d500      	bpl.n	8010290 <HAL_DMA_IRQHandler+0x1fc>
 801028e:	e778      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010290:	2204      	movs	r2, #4
 8010292:	6800      	ldr	r0, [r0, #0]
 8010294:	4210      	tst	r0, r2
 8010296:	d000      	beq.n	801029a <HAL_DMA_IRQHandler+0x206>
 8010298:	e0d1      	b.n	801043e <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801029a:	4a22      	ldr	r2, [pc, #136]	; (8010324 <HAL_DMA_IRQHandler+0x290>)
 801029c:	6810      	ldr	r0, [r2, #0]
 801029e:	4a22      	ldr	r2, [pc, #136]	; (8010328 <HAL_DMA_IRQHandler+0x294>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d100      	bne.n	80102a6 <HAL_DMA_IRQHandler+0x212>
 80102a4:	e122      	b.n	80104ec <HAL_DMA_IRQHandler+0x458>
 80102a6:	4a21      	ldr	r2, [pc, #132]	; (801032c <HAL_DMA_IRQHandler+0x298>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d05b      	beq.n	8010364 <HAL_DMA_IRQHandler+0x2d0>
 80102ac:	4a20      	ldr	r2, [pc, #128]	; (8010330 <HAL_DMA_IRQHandler+0x29c>)
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d100      	bne.n	80102b4 <HAL_DMA_IRQHandler+0x220>
 80102b2:	e19a      	b.n	80105ea <HAL_DMA_IRQHandler+0x556>
 80102b4:	4a1f      	ldr	r2, [pc, #124]	; (8010334 <HAL_DMA_IRQHandler+0x2a0>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d100      	bne.n	80102bc <HAL_DMA_IRQHandler+0x228>
 80102ba:	e237      	b.n	801072c <HAL_DMA_IRQHandler+0x698>
 80102bc:	4a1e      	ldr	r2, [pc, #120]	; (8010338 <HAL_DMA_IRQHandler+0x2a4>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	d100      	bne.n	80102c4 <HAL_DMA_IRQHandler+0x230>
 80102c2:	e239      	b.n	8010738 <HAL_DMA_IRQHandler+0x6a4>
 80102c4:	4a1d      	ldr	r2, [pc, #116]	; (801033c <HAL_DMA_IRQHandler+0x2a8>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d100      	bne.n	80102cc <HAL_DMA_IRQHandler+0x238>
 80102ca:	e24f      	b.n	801076c <HAL_DMA_IRQHandler+0x6d8>
 80102cc:	4a14      	ldr	r2, [pc, #80]	; (8010320 <HAL_DMA_IRQHandler+0x28c>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d100      	bne.n	80102d4 <HAL_DMA_IRQHandler+0x240>
 80102d2:	e297      	b.n	8010804 <HAL_DMA_IRQHandler+0x770>
 80102d4:	4a1a      	ldr	r2, [pc, #104]	; (8010340 <HAL_DMA_IRQHandler+0x2ac>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d100      	bne.n	80102dc <HAL_DMA_IRQHandler+0x248>
 80102da:	e107      	b.n	80104ec <HAL_DMA_IRQHandler+0x458>
 80102dc:	4a19      	ldr	r2, [pc, #100]	; (8010344 <HAL_DMA_IRQHandler+0x2b0>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d040      	beq.n	8010364 <HAL_DMA_IRQHandler+0x2d0>
 80102e2:	4a19      	ldr	r2, [pc, #100]	; (8010348 <HAL_DMA_IRQHandler+0x2b4>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d100      	bne.n	80102ea <HAL_DMA_IRQHandler+0x256>
 80102e8:	e17f      	b.n	80105ea <HAL_DMA_IRQHandler+0x556>
 80102ea:	4a1a      	ldr	r2, [pc, #104]	; (8010354 <HAL_DMA_IRQHandler+0x2c0>)
 80102ec:	1899      	adds	r1, r3, r2
 80102ee:	424a      	negs	r2, r1
 80102f0:	4151      	adcs	r1, r2
 80102f2:	4a1b      	ldr	r2, [pc, #108]	; (8010360 <HAL_DMA_IRQHandler+0x2cc>)
 80102f4:	4249      	negs	r1, r1
 80102f6:	400a      	ands	r2, r1
 80102f8:	2180      	movs	r1, #128	; 0x80
 80102fa:	0289      	lsls	r1, r1, #10
 80102fc:	468c      	mov	ip, r1
 80102fe:	4462      	add	r2, ip
 8010300:	e031      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010302:	0532      	lsls	r2, r6, #20
 8010304:	d500      	bpl.n	8010308 <HAL_DMA_IRQHandler+0x274>
 8010306:	e73c      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010308:	2280      	movs	r2, #128	; 0x80
 801030a:	6800      	ldr	r0, [r0, #0]
 801030c:	0019      	movs	r1, r3
 801030e:	00d2      	lsls	r2, r2, #3
 8010310:	e093      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010312:	0532      	lsls	r2, r6, #20
 8010314:	d500      	bpl.n	8010318 <HAL_DMA_IRQHandler+0x284>
 8010316:	e734      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010318:	2280      	movs	r2, #128	; 0x80
 801031a:	6800      	ldr	r0, [r0, #0]
 801031c:	00d2      	lsls	r2, r2, #3
 801031e:	e7b9      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
 8010320:	40020080 	.word	0x40020080
 8010324:	40020400 	.word	0x40020400
 8010328:	40020008 	.word	0x40020008
 801032c:	4002001c 	.word	0x4002001c
 8010330:	40020030 	.word	0x40020030
 8010334:	40020044 	.word	0x40020044
 8010338:	40020058 	.word	0x40020058
 801033c:	4002006c 	.word	0x4002006c
 8010340:	40020408 	.word	0x40020408
 8010344:	4002041c 	.word	0x4002041c
 8010348:	40020430 	.word	0x40020430
 801034c:	40020444 	.word	0x40020444
 8010350:	40020000 	.word	0x40020000
 8010354:	bffdfbbc 	.word	0xbffdfbbc
 8010358:	fff88000 	.word	0xfff88000
 801035c:	fffc4000 	.word	0xfffc4000
 8010360:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010364:	2220      	movs	r2, #32
 8010366:	4002      	ands	r2, r0
 8010368:	1e51      	subs	r1, r2, #1
 801036a:	418a      	sbcs	r2, r1
 801036c:	b2d2      	uxtb	r2, r2
 801036e:	2a00      	cmp	r2, #0
 8010370:	d050      	beq.n	8010414 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010372:	2202      	movs	r2, #2
 8010374:	6819      	ldr	r1, [r3, #0]
 8010376:	420a      	tst	r2, r1
 8010378:	d04c      	beq.n	8010414 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801037a:	6819      	ldr	r1, [r3, #0]
 801037c:	0689      	lsls	r1, r1, #26
 801037e:	d402      	bmi.n	8010386 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010380:	6819      	ldr	r1, [r3, #0]
 8010382:	4391      	bics	r1, r2
 8010384:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010386:	4ab5      	ldr	r2, [pc, #724]	; (801065c <HAL_DMA_IRQHandler+0x5c8>)
 8010388:	49b5      	ldr	r1, [pc, #724]	; (8010660 <HAL_DMA_IRQHandler+0x5cc>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d800      	bhi.n	8010390 <HAL_DMA_IRQHandler+0x2fc>
 801038e:	e12f      	b.n	80105f0 <HAL_DMA_IRQHandler+0x55c>
 8010390:	428b      	cmp	r3, r1
 8010392:	d100      	bne.n	8010396 <HAL_DMA_IRQHandler+0x302>
 8010394:	e20e      	b.n	80107b4 <HAL_DMA_IRQHandler+0x720>
 8010396:	49b3      	ldr	r1, [pc, #716]	; (8010664 <HAL_DMA_IRQHandler+0x5d0>)
 8010398:	428b      	cmp	r3, r1
 801039a:	d100      	bne.n	801039e <HAL_DMA_IRQHandler+0x30a>
 801039c:	e237      	b.n	801080e <HAL_DMA_IRQHandler+0x77a>
 801039e:	49b2      	ldr	r1, [pc, #712]	; (8010668 <HAL_DMA_IRQHandler+0x5d4>)
 80103a0:	428b      	cmp	r3, r1
 80103a2:	d100      	bne.n	80103a6 <HAL_DMA_IRQHandler+0x312>
 80103a4:	e271      	b.n	801088a <HAL_DMA_IRQHandler+0x7f6>
 80103a6:	49b1      	ldr	r1, [pc, #708]	; (801066c <HAL_DMA_IRQHandler+0x5d8>)
 80103a8:	428b      	cmp	r3, r1
 80103aa:	d100      	bne.n	80103ae <HAL_DMA_IRQHandler+0x31a>
 80103ac:	e1fc      	b.n	80107a8 <HAL_DMA_IRQHandler+0x714>
 80103ae:	49b0      	ldr	r1, [pc, #704]	; (8010670 <HAL_DMA_IRQHandler+0x5dc>)
 80103b0:	428b      	cmp	r3, r1
 80103b2:	d100      	bne.n	80103b6 <HAL_DMA_IRQHandler+0x322>
 80103b4:	e28a      	b.n	80108cc <HAL_DMA_IRQHandler+0x838>
 80103b6:	49af      	ldr	r1, [pc, #700]	; (8010674 <HAL_DMA_IRQHandler+0x5e0>)
 80103b8:	428b      	cmp	r3, r1
 80103ba:	d100      	bne.n	80103be <HAL_DMA_IRQHandler+0x32a>
 80103bc:	e2a7      	b.n	801090e <HAL_DMA_IRQHandler+0x87a>
 80103be:	4293      	cmp	r3, r2
 80103c0:	d100      	bne.n	80103c4 <HAL_DMA_IRQHandler+0x330>
 80103c2:	e2c4      	b.n	801094e <HAL_DMA_IRQHandler+0x8ba>
 80103c4:	4aac      	ldr	r2, [pc, #688]	; (8010678 <HAL_DMA_IRQHandler+0x5e4>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d100      	bne.n	80103cc <HAL_DMA_IRQHandler+0x338>
 80103ca:	e1f3      	b.n	80107b4 <HAL_DMA_IRQHandler+0x720>
 80103cc:	4aab      	ldr	r2, [pc, #684]	; (801067c <HAL_DMA_IRQHandler+0x5e8>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d100      	bne.n	80103d4 <HAL_DMA_IRQHandler+0x340>
 80103d2:	e21c      	b.n	801080e <HAL_DMA_IRQHandler+0x77a>
 80103d4:	4aaa      	ldr	r2, [pc, #680]	; (8010680 <HAL_DMA_IRQHandler+0x5ec>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d100      	bne.n	80103dc <HAL_DMA_IRQHandler+0x348>
 80103da:	e256      	b.n	801088a <HAL_DMA_IRQHandler+0x7f6>
 80103dc:	4aa9      	ldr	r2, [pc, #676]	; (8010684 <HAL_DMA_IRQHandler+0x5f0>)
 80103de:	4694      	mov	ip, r2
 80103e0:	4463      	add	r3, ip
 80103e2:	1e5a      	subs	r2, r3, #1
 80103e4:	4193      	sbcs	r3, r2
 80103e6:	22f0      	movs	r2, #240	; 0xf0
 80103e8:	425b      	negs	r3, r3
 80103ea:	0252      	lsls	r2, r2, #9
 80103ec:	4013      	ands	r3, r2
 80103ee:	2280      	movs	r2, #128	; 0x80
 80103f0:	0192      	lsls	r2, r2, #6
 80103f2:	4694      	mov	ip, r2
 80103f4:	4463      	add	r3, ip
 80103f6:	4aa4      	ldr	r2, [pc, #656]	; (8010688 <HAL_DMA_IRQHandler+0x5f4>)
 80103f8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80103fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80103fc:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80103fe:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010400:	2321      	movs	r3, #33	; 0x21
 8010402:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010404:	2200      	movs	r2, #0
 8010406:	3b01      	subs	r3, #1
 8010408:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801040a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 8010410:	0020      	movs	r0, r4
 8010412:	4798      	blx	r3
}  
 8010414:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010416:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010418:	489c      	ldr	r0, [pc, #624]	; (801068c <HAL_DMA_IRQHandler+0x5f8>)
 801041a:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801041c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801041e:	432a      	orrs	r2, r5
 8010420:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010422:	2221      	movs	r2, #33	; 0x21
 8010424:	3503      	adds	r5, #3
 8010426:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010428:	2500      	movs	r5, #0
 801042a:	3a01      	subs	r2, #1
 801042c:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801042e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010430:	2a00      	cmp	r2, #0
 8010432:	d000      	beq.n	8010436 <HAL_DMA_IRQHandler+0x3a2>
 8010434:	e09b      	b.n	801056e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010436:	6800      	ldr	r0, [r0, #0]
 8010438:	2204      	movs	r2, #4
 801043a:	4210      	tst	r0, r2
 801043c:	d050      	beq.n	80104e0 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801043e:	2204      	movs	r2, #4
 8010440:	6818      	ldr	r0, [r3, #0]
 8010442:	4202      	tst	r2, r0
 8010444:	d048      	beq.n	80104d8 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010446:	6818      	ldr	r0, [r3, #0]
 8010448:	0680      	lsls	r0, r0, #26
 801044a:	d402      	bmi.n	8010452 <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	4390      	bics	r0, r2
 8010450:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010452:	4a82      	ldr	r2, [pc, #520]	; (801065c <HAL_DMA_IRQHandler+0x5c8>)
 8010454:	4291      	cmp	r1, r2
 8010456:	d800      	bhi.n	801045a <HAL_DMA_IRQHandler+0x3c6>
 8010458:	e11e      	b.n	8010698 <HAL_DMA_IRQHandler+0x604>
 801045a:	4981      	ldr	r1, [pc, #516]	; (8010660 <HAL_DMA_IRQHandler+0x5cc>)
 801045c:	428b      	cmp	r3, r1
 801045e:	d100      	bne.n	8010462 <HAL_DMA_IRQHandler+0x3ce>
 8010460:	e1ac      	b.n	80107bc <HAL_DMA_IRQHandler+0x728>
 8010462:	4980      	ldr	r1, [pc, #512]	; (8010664 <HAL_DMA_IRQHandler+0x5d0>)
 8010464:	428b      	cmp	r3, r1
 8010466:	d100      	bne.n	801046a <HAL_DMA_IRQHandler+0x3d6>
 8010468:	e1d5      	b.n	8010816 <HAL_DMA_IRQHandler+0x782>
 801046a:	497f      	ldr	r1, [pc, #508]	; (8010668 <HAL_DMA_IRQHandler+0x5d4>)
 801046c:	428b      	cmp	r3, r1
 801046e:	d100      	bne.n	8010472 <HAL_DMA_IRQHandler+0x3de>
 8010470:	e188      	b.n	8010784 <HAL_DMA_IRQHandler+0x6f0>
 8010472:	497e      	ldr	r1, [pc, #504]	; (801066c <HAL_DMA_IRQHandler+0x5d8>)
 8010474:	428b      	cmp	r3, r1
 8010476:	d100      	bne.n	801047a <HAL_DMA_IRQHandler+0x3e6>
 8010478:	e20a      	b.n	8010890 <HAL_DMA_IRQHandler+0x7fc>
 801047a:	497d      	ldr	r1, [pc, #500]	; (8010670 <HAL_DMA_IRQHandler+0x5dc>)
 801047c:	428b      	cmp	r3, r1
 801047e:	d100      	bne.n	8010482 <HAL_DMA_IRQHandler+0x3ee>
 8010480:	e22d      	b.n	80108de <HAL_DMA_IRQHandler+0x84a>
 8010482:	497c      	ldr	r1, [pc, #496]	; (8010674 <HAL_DMA_IRQHandler+0x5e0>)
 8010484:	428b      	cmp	r3, r1
 8010486:	d100      	bne.n	801048a <HAL_DMA_IRQHandler+0x3f6>
 8010488:	e247      	b.n	801091a <HAL_DMA_IRQHandler+0x886>
 801048a:	4293      	cmp	r3, r2
 801048c:	d100      	bne.n	8010490 <HAL_DMA_IRQHandler+0x3fc>
 801048e:	e264      	b.n	801095a <HAL_DMA_IRQHandler+0x8c6>
 8010490:	4a79      	ldr	r2, [pc, #484]	; (8010678 <HAL_DMA_IRQHandler+0x5e4>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d100      	bne.n	8010498 <HAL_DMA_IRQHandler+0x404>
 8010496:	e191      	b.n	80107bc <HAL_DMA_IRQHandler+0x728>
 8010498:	4a78      	ldr	r2, [pc, #480]	; (801067c <HAL_DMA_IRQHandler+0x5e8>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d100      	bne.n	80104a0 <HAL_DMA_IRQHandler+0x40c>
 801049e:	e1ba      	b.n	8010816 <HAL_DMA_IRQHandler+0x782>
 80104a0:	4a77      	ldr	r2, [pc, #476]	; (8010680 <HAL_DMA_IRQHandler+0x5ec>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d100      	bne.n	80104a8 <HAL_DMA_IRQHandler+0x414>
 80104a6:	e16d      	b.n	8010784 <HAL_DMA_IRQHandler+0x6f0>
 80104a8:	4a76      	ldr	r2, [pc, #472]	; (8010684 <HAL_DMA_IRQHandler+0x5f0>)
 80104aa:	189a      	adds	r2, r3, r2
 80104ac:	1e51      	subs	r1, r2, #1
 80104ae:	418a      	sbcs	r2, r1
 80104b0:	21f0      	movs	r1, #240	; 0xf0
 80104b2:	4252      	negs	r2, r2
 80104b4:	0289      	lsls	r1, r1, #10
 80104b6:	400a      	ands	r2, r1
 80104b8:	2180      	movs	r1, #128	; 0x80
 80104ba:	01c9      	lsls	r1, r1, #7
 80104bc:	468c      	mov	ip, r1
 80104be:	4462      	add	r2, ip
 80104c0:	4971      	ldr	r1, [pc, #452]	; (8010688 <HAL_DMA_IRQHandler+0x5f4>)
 80104c2:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80104c4:	2221      	movs	r2, #33	; 0x21
 80104c6:	2111      	movs	r1, #17
 80104c8:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80104ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80104cc:	2a00      	cmp	r2, #0
 80104ce:	d100      	bne.n	80104d2 <HAL_DMA_IRQHandler+0x43e>
 80104d0:	e6e3      	b.n	801029a <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 80104d2:	0020      	movs	r0, r4
 80104d4:	4790      	blx	r2
 80104d6:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80104d8:	4a60      	ldr	r2, [pc, #384]	; (801065c <HAL_DMA_IRQHandler+0x5c8>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d900      	bls.n	80104e0 <HAL_DMA_IRQHandler+0x44c>
 80104de:	e6dc      	b.n	801029a <HAL_DMA_IRQHandler+0x206>
 80104e0:	4a6a      	ldr	r2, [pc, #424]	; (801068c <HAL_DMA_IRQHandler+0x5f8>)
 80104e2:	6810      	ldr	r0, [r2, #0]
 80104e4:	4a5e      	ldr	r2, [pc, #376]	; (8010660 <HAL_DMA_IRQHandler+0x5cc>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d000      	beq.n	80104ec <HAL_DMA_IRQHandler+0x458>
 80104ea:	e6dc      	b.n	80102a6 <HAL_DMA_IRQHandler+0x212>
 80104ec:	2202      	movs	r2, #2
 80104ee:	e73a      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80104f0:	42ab      	cmp	r3, r5
 80104f2:	d090      	beq.n	8010416 <HAL_DMA_IRQHandler+0x382>
 80104f4:	4a5b      	ldr	r2, [pc, #364]	; (8010664 <HAL_DMA_IRQHandler+0x5d0>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d100      	bne.n	80104fc <HAL_DMA_IRQHandler+0x468>
 80104fa:	e1a1      	b.n	8010840 <HAL_DMA_IRQHandler+0x7ac>
 80104fc:	4a5a      	ldr	r2, [pc, #360]	; (8010668 <HAL_DMA_IRQHandler+0x5d4>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d100      	bne.n	8010504 <HAL_DMA_IRQHandler+0x470>
 8010502:	e13c      	b.n	801077e <HAL_DMA_IRQHandler+0x6ea>
 8010504:	4a59      	ldr	r2, [pc, #356]	; (801066c <HAL_DMA_IRQHandler+0x5d8>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d100      	bne.n	801050c <HAL_DMA_IRQHandler+0x478>
 801050a:	e1ca      	b.n	80108a2 <HAL_DMA_IRQHandler+0x80e>
 801050c:	4a58      	ldr	r2, [pc, #352]	; (8010670 <HAL_DMA_IRQHandler+0x5dc>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d100      	bne.n	8010514 <HAL_DMA_IRQHandler+0x480>
 8010512:	e1de      	b.n	80108d2 <HAL_DMA_IRQHandler+0x83e>
 8010514:	4a57      	ldr	r2, [pc, #348]	; (8010674 <HAL_DMA_IRQHandler+0x5e0>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d100      	bne.n	801051c <HAL_DMA_IRQHandler+0x488>
 801051a:	e201      	b.n	8010920 <HAL_DMA_IRQHandler+0x88c>
 801051c:	4283      	cmp	r3, r0
 801051e:	d100      	bne.n	8010522 <HAL_DMA_IRQHandler+0x48e>
 8010520:	e21e      	b.n	8010960 <HAL_DMA_IRQHandler+0x8cc>
 8010522:	4a55      	ldr	r2, [pc, #340]	; (8010678 <HAL_DMA_IRQHandler+0x5e4>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d100      	bne.n	801052a <HAL_DMA_IRQHandler+0x496>
 8010528:	e22d      	b.n	8010986 <HAL_DMA_IRQHandler+0x8f2>
 801052a:	4a54      	ldr	r2, [pc, #336]	; (801067c <HAL_DMA_IRQHandler+0x5e8>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d100      	bne.n	8010532 <HAL_DMA_IRQHandler+0x49e>
 8010530:	e22d      	b.n	801098e <HAL_DMA_IRQHandler+0x8fa>
 8010532:	4a53      	ldr	r2, [pc, #332]	; (8010680 <HAL_DMA_IRQHandler+0x5ec>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d100      	bne.n	801053a <HAL_DMA_IRQHandler+0x4a6>
 8010538:	e121      	b.n	801077e <HAL_DMA_IRQHandler+0x6ea>
 801053a:	4a52      	ldr	r2, [pc, #328]	; (8010684 <HAL_DMA_IRQHandler+0x5f0>)
 801053c:	189a      	adds	r2, r3, r2
 801053e:	4250      	negs	r0, r2
 8010540:	4142      	adcs	r2, r0
 8010542:	4853      	ldr	r0, [pc, #332]	; (8010690 <HAL_DMA_IRQHandler+0x5fc>)
 8010544:	4252      	negs	r2, r2
 8010546:	4002      	ands	r2, r0
 8010548:	2080      	movs	r0, #128	; 0x80
 801054a:	0300      	lsls	r0, r0, #12
 801054c:	4684      	mov	ip, r0
 801054e:	4462      	add	r2, ip
 8010550:	484e      	ldr	r0, [pc, #312]	; (801068c <HAL_DMA_IRQHandler+0x5f8>)
 8010552:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010554:	2001      	movs	r0, #1
 8010556:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010558:	4302      	orrs	r2, r0
 801055a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801055c:	2221      	movs	r2, #33	; 0x21
 801055e:	3003      	adds	r0, #3
 8010560:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010562:	2000      	movs	r0, #0
 8010564:	3a01      	subs	r2, #1
 8010566:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010568:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801056a:	2a00      	cmp	r2, #0
 801056c:	d007      	beq.n	801057e <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 801056e:	0020      	movs	r0, r4
 8010570:	4790      	blx	r2
 8010572:	6823      	ldr	r3, [r4, #0]
 8010574:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010576:	4a39      	ldr	r2, [pc, #228]	; (801065c <HAL_DMA_IRQHandler+0x5c8>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d900      	bls.n	801057e <HAL_DMA_IRQHandler+0x4ea>
 801057c:	e64f      	b.n	801021e <HAL_DMA_IRQHandler+0x18a>
 801057e:	4a43      	ldr	r2, [pc, #268]	; (801068c <HAL_DMA_IRQHandler+0x5f8>)
 8010580:	6810      	ldr	r0, [r2, #0]
 8010582:	4a37      	ldr	r2, [pc, #220]	; (8010660 <HAL_DMA_IRQHandler+0x5cc>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d100      	bne.n	801058a <HAL_DMA_IRQHandler+0x4f6>
 8010588:	e756      	b.n	8010438 <HAL_DMA_IRQHandler+0x3a4>
 801058a:	4a36      	ldr	r2, [pc, #216]	; (8010664 <HAL_DMA_IRQHandler+0x5d0>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d100      	bne.n	8010592 <HAL_DMA_IRQHandler+0x4fe>
 8010590:	e0c4      	b.n	801071c <HAL_DMA_IRQHandler+0x688>
 8010592:	4a35      	ldr	r2, [pc, #212]	; (8010668 <HAL_DMA_IRQHandler+0x5d4>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d100      	bne.n	801059a <HAL_DMA_IRQHandler+0x506>
 8010598:	e0cb      	b.n	8010732 <HAL_DMA_IRQHandler+0x69e>
 801059a:	4a34      	ldr	r2, [pc, #208]	; (801066c <HAL_DMA_IRQHandler+0x5d8>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d100      	bne.n	80105a2 <HAL_DMA_IRQHandler+0x50e>
 80105a0:	e0d2      	b.n	8010748 <HAL_DMA_IRQHandler+0x6b4>
 80105a2:	4a33      	ldr	r2, [pc, #204]	; (8010670 <HAL_DMA_IRQHandler+0x5dc>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d100      	bne.n	80105aa <HAL_DMA_IRQHandler+0x516>
 80105a8:	e5e4      	b.n	8010174 <HAL_DMA_IRQHandler+0xe0>
 80105aa:	4a32      	ldr	r2, [pc, #200]	; (8010674 <HAL_DMA_IRQHandler+0x5e0>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d100      	bne.n	80105b2 <HAL_DMA_IRQHandler+0x51e>
 80105b0:	e15e      	b.n	8010870 <HAL_DMA_IRQHandler+0x7dc>
 80105b2:	4a2a      	ldr	r2, [pc, #168]	; (801065c <HAL_DMA_IRQHandler+0x5c8>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d100      	bne.n	80105ba <HAL_DMA_IRQHandler+0x526>
 80105b8:	e0ec      	b.n	8010794 <HAL_DMA_IRQHandler+0x700>
 80105ba:	4a2f      	ldr	r2, [pc, #188]	; (8010678 <HAL_DMA_IRQHandler+0x5e4>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d100      	bne.n	80105c2 <HAL_DMA_IRQHandler+0x52e>
 80105c0:	e73a      	b.n	8010438 <HAL_DMA_IRQHandler+0x3a4>
 80105c2:	4a2e      	ldr	r2, [pc, #184]	; (801067c <HAL_DMA_IRQHandler+0x5e8>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d100      	bne.n	80105ca <HAL_DMA_IRQHandler+0x536>
 80105c8:	e0a8      	b.n	801071c <HAL_DMA_IRQHandler+0x688>
 80105ca:	4a2d      	ldr	r2, [pc, #180]	; (8010680 <HAL_DMA_IRQHandler+0x5ec>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d100      	bne.n	80105d2 <HAL_DMA_IRQHandler+0x53e>
 80105d0:	e0af      	b.n	8010732 <HAL_DMA_IRQHandler+0x69e>
 80105d2:	4a2c      	ldr	r2, [pc, #176]	; (8010684 <HAL_DMA_IRQHandler+0x5f0>)
 80105d4:	189a      	adds	r2, r3, r2
 80105d6:	4255      	negs	r5, r2
 80105d8:	416a      	adcs	r2, r5
 80105da:	4d2e      	ldr	r5, [pc, #184]	; (8010694 <HAL_DMA_IRQHandler+0x600>)
 80105dc:	4252      	negs	r2, r2
 80105de:	402a      	ands	r2, r5
 80105e0:	2580      	movs	r5, #128	; 0x80
 80105e2:	02ed      	lsls	r5, r5, #11
 80105e4:	46ac      	mov	ip, r5
 80105e6:	4462      	add	r2, ip
 80105e8:	e727      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80105ea:	2280      	movs	r2, #128	; 0x80
 80105ec:	0092      	lsls	r2, r2, #2
 80105ee:	e6ba      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80105f0:	428b      	cmp	r3, r1
 80105f2:	d100      	bne.n	80105f6 <HAL_DMA_IRQHandler+0x562>
 80105f4:	e0e0      	b.n	80107b8 <HAL_DMA_IRQHandler+0x724>
 80105f6:	491b      	ldr	r1, [pc, #108]	; (8010664 <HAL_DMA_IRQHandler+0x5d0>)
 80105f8:	428b      	cmp	r3, r1
 80105fa:	d100      	bne.n	80105fe <HAL_DMA_IRQHandler+0x56a>
 80105fc:	e105      	b.n	801080a <HAL_DMA_IRQHandler+0x776>
 80105fe:	491a      	ldr	r1, [pc, #104]	; (8010668 <HAL_DMA_IRQHandler+0x5d4>)
 8010600:	428b      	cmp	r3, r1
 8010602:	d100      	bne.n	8010606 <HAL_DMA_IRQHandler+0x572>
 8010604:	e13e      	b.n	8010884 <HAL_DMA_IRQHandler+0x7f0>
 8010606:	4919      	ldr	r1, [pc, #100]	; (801066c <HAL_DMA_IRQHandler+0x5d8>)
 8010608:	428b      	cmp	r3, r1
 801060a:	d100      	bne.n	801060e <HAL_DMA_IRQHandler+0x57a>
 801060c:	e0cf      	b.n	80107ae <HAL_DMA_IRQHandler+0x71a>
 801060e:	4918      	ldr	r1, [pc, #96]	; (8010670 <HAL_DMA_IRQHandler+0x5dc>)
 8010610:	428b      	cmp	r3, r1
 8010612:	d100      	bne.n	8010616 <HAL_DMA_IRQHandler+0x582>
 8010614:	e157      	b.n	80108c6 <HAL_DMA_IRQHandler+0x832>
 8010616:	4917      	ldr	r1, [pc, #92]	; (8010674 <HAL_DMA_IRQHandler+0x5e0>)
 8010618:	428b      	cmp	r3, r1
 801061a:	d100      	bne.n	801061e <HAL_DMA_IRQHandler+0x58a>
 801061c:	e174      	b.n	8010908 <HAL_DMA_IRQHandler+0x874>
 801061e:	4293      	cmp	r3, r2
 8010620:	d100      	bne.n	8010624 <HAL_DMA_IRQHandler+0x590>
 8010622:	e197      	b.n	8010954 <HAL_DMA_IRQHandler+0x8c0>
 8010624:	4a14      	ldr	r2, [pc, #80]	; (8010678 <HAL_DMA_IRQHandler+0x5e4>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d100      	bne.n	801062c <HAL_DMA_IRQHandler+0x598>
 801062a:	e0c5      	b.n	80107b8 <HAL_DMA_IRQHandler+0x724>
 801062c:	4a13      	ldr	r2, [pc, #76]	; (801067c <HAL_DMA_IRQHandler+0x5e8>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d100      	bne.n	8010634 <HAL_DMA_IRQHandler+0x5a0>
 8010632:	e0ea      	b.n	801080a <HAL_DMA_IRQHandler+0x776>
 8010634:	4a12      	ldr	r2, [pc, #72]	; (8010680 <HAL_DMA_IRQHandler+0x5ec>)
 8010636:	4293      	cmp	r3, r2
 8010638:	d100      	bne.n	801063c <HAL_DMA_IRQHandler+0x5a8>
 801063a:	e123      	b.n	8010884 <HAL_DMA_IRQHandler+0x7f0>
 801063c:	4a11      	ldr	r2, [pc, #68]	; (8010684 <HAL_DMA_IRQHandler+0x5f0>)
 801063e:	4694      	mov	ip, r2
 8010640:	4463      	add	r3, ip
 8010642:	1e5a      	subs	r2, r3, #1
 8010644:	4193      	sbcs	r3, r2
 8010646:	22f0      	movs	r2, #240	; 0xf0
 8010648:	425b      	negs	r3, r3
 801064a:	0252      	lsls	r2, r2, #9
 801064c:	4013      	ands	r3, r2
 801064e:	2280      	movs	r2, #128	; 0x80
 8010650:	0192      	lsls	r2, r2, #6
 8010652:	4694      	mov	ip, r2
 8010654:	4463      	add	r3, ip
 8010656:	4a0d      	ldr	r2, [pc, #52]	; (801068c <HAL_DMA_IRQHandler+0x5f8>)
 8010658:	6053      	str	r3, [r2, #4]
 801065a:	e6ce      	b.n	80103fa <HAL_DMA_IRQHandler+0x366>
 801065c:	40020080 	.word	0x40020080
 8010660:	40020008 	.word	0x40020008
 8010664:	4002001c 	.word	0x4002001c
 8010668:	40020030 	.word	0x40020030
 801066c:	40020044 	.word	0x40020044
 8010670:	40020058 	.word	0x40020058
 8010674:	4002006c 	.word	0x4002006c
 8010678:	40020408 	.word	0x40020408
 801067c:	4002041c 	.word	0x4002041c
 8010680:	40020430 	.word	0x40020430
 8010684:	bffdfbbc 	.word	0xbffdfbbc
 8010688:	40020400 	.word	0x40020400
 801068c:	40020000 	.word	0x40020000
 8010690:	fff88000 	.word	0xfff88000
 8010694:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010698:	49c2      	ldr	r1, [pc, #776]	; (80109a4 <HAL_DMA_IRQHandler+0x910>)
 801069a:	428b      	cmp	r3, r1
 801069c:	d100      	bne.n	80106a0 <HAL_DMA_IRQHandler+0x60c>
 801069e:	e08f      	b.n	80107c0 <HAL_DMA_IRQHandler+0x72c>
 80106a0:	49c1      	ldr	r1, [pc, #772]	; (80109a8 <HAL_DMA_IRQHandler+0x914>)
 80106a2:	428b      	cmp	r3, r1
 80106a4:	d100      	bne.n	80106a8 <HAL_DMA_IRQHandler+0x614>
 80106a6:	e0b4      	b.n	8010812 <HAL_DMA_IRQHandler+0x77e>
 80106a8:	49c0      	ldr	r1, [pc, #768]	; (80109ac <HAL_DMA_IRQHandler+0x918>)
 80106aa:	428b      	cmp	r3, r1
 80106ac:	d064      	beq.n	8010778 <HAL_DMA_IRQHandler+0x6e4>
 80106ae:	49c0      	ldr	r1, [pc, #768]	; (80109b0 <HAL_DMA_IRQHandler+0x91c>)
 80106b0:	428b      	cmp	r3, r1
 80106b2:	d100      	bne.n	80106b6 <HAL_DMA_IRQHandler+0x622>
 80106b4:	e0ef      	b.n	8010896 <HAL_DMA_IRQHandler+0x802>
 80106b6:	49bf      	ldr	r1, [pc, #764]	; (80109b4 <HAL_DMA_IRQHandler+0x920>)
 80106b8:	428b      	cmp	r3, r1
 80106ba:	d100      	bne.n	80106be <HAL_DMA_IRQHandler+0x62a>
 80106bc:	e112      	b.n	80108e4 <HAL_DMA_IRQHandler+0x850>
 80106be:	49be      	ldr	r1, [pc, #760]	; (80109b8 <HAL_DMA_IRQHandler+0x924>)
 80106c0:	428b      	cmp	r3, r1
 80106c2:	d100      	bne.n	80106c6 <HAL_DMA_IRQHandler+0x632>
 80106c4:	e12f      	b.n	8010926 <HAL_DMA_IRQHandler+0x892>
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d100      	bne.n	80106cc <HAL_DMA_IRQHandler+0x638>
 80106ca:	e14c      	b.n	8010966 <HAL_DMA_IRQHandler+0x8d2>
 80106cc:	4abb      	ldr	r2, [pc, #748]	; (80109bc <HAL_DMA_IRQHandler+0x928>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d076      	beq.n	80107c0 <HAL_DMA_IRQHandler+0x72c>
 80106d2:	4abb      	ldr	r2, [pc, #748]	; (80109c0 <HAL_DMA_IRQHandler+0x92c>)
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d100      	bne.n	80106da <HAL_DMA_IRQHandler+0x646>
 80106d8:	e09b      	b.n	8010812 <HAL_DMA_IRQHandler+0x77e>
 80106da:	4aba      	ldr	r2, [pc, #744]	; (80109c4 <HAL_DMA_IRQHandler+0x930>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d04b      	beq.n	8010778 <HAL_DMA_IRQHandler+0x6e4>
 80106e0:	4ab9      	ldr	r2, [pc, #740]	; (80109c8 <HAL_DMA_IRQHandler+0x934>)
 80106e2:	189a      	adds	r2, r3, r2
 80106e4:	1e51      	subs	r1, r2, #1
 80106e6:	418a      	sbcs	r2, r1
 80106e8:	21f0      	movs	r1, #240	; 0xf0
 80106ea:	4252      	negs	r2, r2
 80106ec:	0289      	lsls	r1, r1, #10
 80106ee:	400a      	ands	r2, r1
 80106f0:	2180      	movs	r1, #128	; 0x80
 80106f2:	01c9      	lsls	r1, r1, #7
 80106f4:	468c      	mov	ip, r1
 80106f6:	4462      	add	r2, ip
 80106f8:	49b4      	ldr	r1, [pc, #720]	; (80109cc <HAL_DMA_IRQHandler+0x938>)
 80106fa:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80106fc:	2221      	movs	r2, #33	; 0x21
 80106fe:	2111      	movs	r1, #17
 8010700:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010702:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010704:	2a00      	cmp	r2, #0
 8010706:	d100      	bne.n	801070a <HAL_DMA_IRQHandler+0x676>
 8010708:	e6ea      	b.n	80104e0 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 801070a:	0020      	movs	r0, r4
 801070c:	4790      	blx	r2
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	e6e2      	b.n	80104d8 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010712:	0632      	lsls	r2, r6, #24
 8010714:	d500      	bpl.n	8010718 <HAL_DMA_IRQHandler+0x684>
 8010716:	e534      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010718:	0019      	movs	r1, r3
 801071a:	6800      	ldr	r0, [r0, #0]
 801071c:	2240      	movs	r2, #64	; 0x40
 801071e:	e68c      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010720:	0632      	lsls	r2, r6, #24
 8010722:	d500      	bpl.n	8010726 <HAL_DMA_IRQHandler+0x692>
 8010724:	e52d      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010726:	6800      	ldr	r0, [r0, #0]
 8010728:	2240      	movs	r2, #64	; 0x40
 801072a:	e5b3      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801072c:	2280      	movs	r2, #128	; 0x80
 801072e:	0192      	lsls	r2, r2, #6
 8010730:	e619      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010732:	2280      	movs	r2, #128	; 0x80
 8010734:	00d2      	lsls	r2, r2, #3
 8010736:	e680      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010738:	2280      	movs	r2, #128	; 0x80
 801073a:	0292      	lsls	r2, r2, #10
 801073c:	e613      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801073e:	0432      	lsls	r2, r6, #16
 8010740:	d500      	bpl.n	8010744 <HAL_DMA_IRQHandler+0x6b0>
 8010742:	e51e      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010744:	4aa1      	ldr	r2, [pc, #644]	; (80109cc <HAL_DMA_IRQHandler+0x938>)
 8010746:	6810      	ldr	r0, [r2, #0]
 8010748:	2280      	movs	r2, #128	; 0x80
 801074a:	01d2      	lsls	r2, r2, #7
 801074c:	e675      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801074e:	0432      	lsls	r2, r6, #16
 8010750:	d500      	bpl.n	8010754 <HAL_DMA_IRQHandler+0x6c0>
 8010752:	e516      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010754:	2280      	movs	r2, #128	; 0x80
 8010756:	6800      	ldr	r0, [r0, #0]
 8010758:	0019      	movs	r1, r3
 801075a:	01d2      	lsls	r2, r2, #7
 801075c:	e66d      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801075e:	0432      	lsls	r2, r6, #16
 8010760:	d500      	bpl.n	8010764 <HAL_DMA_IRQHandler+0x6d0>
 8010762:	e50e      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010764:	2280      	movs	r2, #128	; 0x80
 8010766:	6800      	ldr	r0, [r0, #0]
 8010768:	01d2      	lsls	r2, r2, #7
 801076a:	e593      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801076c:	2280      	movs	r2, #128	; 0x80
 801076e:	0392      	lsls	r2, r2, #14
 8010770:	e5f9      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010772:	2280      	movs	r2, #128	; 0x80
 8010774:	0112      	lsls	r2, r2, #4
 8010776:	e542      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010778:	2280      	movs	r2, #128	; 0x80
 801077a:	00d2      	lsls	r2, r2, #3
 801077c:	e7bc      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801077e:	2280      	movs	r2, #128	; 0x80
 8010780:	0112      	lsls	r2, r2, #4
 8010782:	e6e5      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010784:	2280      	movs	r2, #128	; 0x80
 8010786:	00d2      	lsls	r2, r2, #3
 8010788:	e69a      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801078a:	0132      	lsls	r2, r6, #4
 801078c:	d500      	bpl.n	8010790 <HAL_DMA_IRQHandler+0x6fc>
 801078e:	e4f8      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010790:	0019      	movs	r1, r3
 8010792:	6800      	ldr	r0, [r0, #0]
 8010794:	2280      	movs	r2, #128	; 0x80
 8010796:	04d2      	lsls	r2, r2, #19
 8010798:	e64f      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801079a:	0132      	lsls	r2, r6, #4
 801079c:	d500      	bpl.n	80107a0 <HAL_DMA_IRQHandler+0x70c>
 801079e:	e4f0      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107a0:	6800      	ldr	r0, [r0, #0]
 80107a2:	2280      	movs	r2, #128	; 0x80
 80107a4:	04d2      	lsls	r2, r2, #19
 80107a6:	e575      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107a8:	2380      	movs	r3, #128	; 0x80
 80107aa:	019b      	lsls	r3, r3, #6
 80107ac:	e623      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
 80107ae:	2380      	movs	r3, #128	; 0x80
 80107b0:	019b      	lsls	r3, r3, #6
 80107b2:	e750      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
 80107b4:	2302      	movs	r3, #2
 80107b6:	e61e      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
 80107b8:	2302      	movs	r3, #2
 80107ba:	e74c      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107bc:	2204      	movs	r2, #4
 80107be:	e67f      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
 80107c0:	2204      	movs	r2, #4
 80107c2:	e799      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80107c4:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107c6:	4882      	ldr	r0, [pc, #520]	; (80109d0 <HAL_DMA_IRQHandler+0x93c>)
 80107c8:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80107ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80107cc:	432a      	orrs	r2, r5
 80107ce:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80107d0:	2221      	movs	r2, #33	; 0x21
 80107d2:	3503      	adds	r5, #3
 80107d4:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80107d6:	2500      	movs	r5, #0
 80107d8:	3a01      	subs	r2, #1
 80107da:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80107dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80107de:	2a00      	cmp	r2, #0
 80107e0:	d000      	beq.n	80107e4 <HAL_DMA_IRQHandler+0x750>
 80107e2:	e6c4      	b.n	801056e <HAL_DMA_IRQHandler+0x4da>
 80107e4:	e554      	b.n	8010290 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107e6:	0332      	lsls	r2, r6, #12
 80107e8:	d500      	bpl.n	80107ec <HAL_DMA_IRQHandler+0x758>
 80107ea:	e4ca      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107ec:	2280      	movs	r2, #128	; 0x80
 80107ee:	6800      	ldr	r0, [r0, #0]
 80107f0:	02d2      	lsls	r2, r2, #11
 80107f2:	e54f      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107f4:	0332      	lsls	r2, r6, #12
 80107f6:	d500      	bpl.n	80107fa <HAL_DMA_IRQHandler+0x766>
 80107f8:	e4c3      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107fa:	2280      	movs	r2, #128	; 0x80
 80107fc:	6800      	ldr	r0, [r0, #0]
 80107fe:	0019      	movs	r1, r3
 8010800:	02d2      	lsls	r2, r2, #11
 8010802:	e61a      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010804:	2280      	movs	r2, #128	; 0x80
 8010806:	0492      	lsls	r2, r2, #18
 8010808:	e5ad      	b.n	8010366 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801080a:	2320      	movs	r3, #32
 801080c:	e723      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
 801080e:	2320      	movs	r3, #32
 8010810:	e5f1      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010812:	2240      	movs	r2, #64	; 0x40
 8010814:	e770      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
 8010816:	2240      	movs	r2, #64	; 0x40
 8010818:	e652      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801081a:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801081c:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801081e:	486c      	ldr	r0, [pc, #432]	; (80109d0 <HAL_DMA_IRQHandler+0x93c>)
 8010820:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010822:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010824:	432a      	orrs	r2, r5
 8010826:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010828:	2221      	movs	r2, #33	; 0x21
 801082a:	3503      	adds	r5, #3
 801082c:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801082e:	2500      	movs	r5, #0
 8010830:	3a01      	subs	r2, #1
 8010832:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010834:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010836:	2a00      	cmp	r2, #0
 8010838:	d000      	beq.n	801083c <HAL_DMA_IRQHandler+0x7a8>
 801083a:	e698      	b.n	801056e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801083c:	6800      	ldr	r0, [r0, #0]
 801083e:	e4f4      	b.n	801022a <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010840:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010842:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010844:	4861      	ldr	r0, [pc, #388]	; (80109cc <HAL_DMA_IRQHandler+0x938>)
 8010846:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010848:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801084a:	432a      	orrs	r2, r5
 801084c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801084e:	2221      	movs	r2, #33	; 0x21
 8010850:	3503      	adds	r5, #3
 8010852:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010854:	2500      	movs	r5, #0
 8010856:	3a01      	subs	r2, #1
 8010858:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801085a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801085c:	2a00      	cmp	r2, #0
 801085e:	d000      	beq.n	8010862 <HAL_DMA_IRQHandler+0x7ce>
 8010860:	e685      	b.n	801056e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010862:	6800      	ldr	r0, [r0, #0]
 8010864:	e691      	b.n	801058a <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010866:	0232      	lsls	r2, r6, #8
 8010868:	d500      	bpl.n	801086c <HAL_DMA_IRQHandler+0x7d8>
 801086a:	e48a      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801086c:	0019      	movs	r1, r3
 801086e:	6800      	ldr	r0, [r0, #0]
 8010870:	2280      	movs	r2, #128	; 0x80
 8010872:	03d2      	lsls	r2, r2, #15
 8010874:	e5e1      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010876:	0232      	lsls	r2, r6, #8
 8010878:	d500      	bpl.n	801087c <HAL_DMA_IRQHandler+0x7e8>
 801087a:	e482      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801087c:	6800      	ldr	r0, [r0, #0]
 801087e:	2280      	movs	r2, #128	; 0x80
 8010880:	03d2      	lsls	r2, r2, #15
 8010882:	e507      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010884:	2380      	movs	r3, #128	; 0x80
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	e6e5      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
 801088a:	2380      	movs	r3, #128	; 0x80
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	e5b2      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010890:	2280      	movs	r2, #128	; 0x80
 8010892:	01d2      	lsls	r2, r2, #7
 8010894:	e614      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
 8010896:	2280      	movs	r2, #128	; 0x80
 8010898:	01d2      	lsls	r2, r2, #7
 801089a:	e72d      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801089c:	2280      	movs	r2, #128	; 0x80
 801089e:	0212      	lsls	r2, r2, #8
 80108a0:	e4ad      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
 80108a2:	2280      	movs	r2, #128	; 0x80
 80108a4:	0212      	lsls	r2, r2, #8
 80108a6:	e653      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108a8:	0732      	lsls	r2, r6, #28
 80108aa:	d500      	bpl.n	80108ae <HAL_DMA_IRQHandler+0x81a>
 80108ac:	e469      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108ae:	4a47      	ldr	r2, [pc, #284]	; (80109cc <HAL_DMA_IRQHandler+0x938>)
 80108b0:	6810      	ldr	r0, [r2, #0]
 80108b2:	2204      	movs	r2, #4
 80108b4:	e5c1      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108b6:	0732      	lsls	r2, r6, #28
 80108b8:	d500      	bpl.n	80108bc <HAL_DMA_IRQHandler+0x828>
 80108ba:	e462      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108bc:	4a44      	ldr	r2, [pc, #272]	; (80109d0 <HAL_DMA_IRQHandler+0x93c>)
 80108be:	493f      	ldr	r1, [pc, #252]	; (80109bc <HAL_DMA_IRQHandler+0x928>)
 80108c0:	6810      	ldr	r0, [r2, #0]
 80108c2:	2204      	movs	r2, #4
 80108c4:	e4e6      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108c6:	2380      	movs	r3, #128	; 0x80
 80108c8:	029b      	lsls	r3, r3, #10
 80108ca:	e6c4      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
 80108cc:	2380      	movs	r3, #128	; 0x80
 80108ce:	029b      	lsls	r3, r3, #10
 80108d0:	e591      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80108d2:	2280      	movs	r2, #128	; 0x80
 80108d4:	0312      	lsls	r2, r2, #12
 80108d6:	e63b      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
 80108d8:	2280      	movs	r2, #128	; 0x80
 80108da:	0312      	lsls	r2, r2, #12
 80108dc:	e48f      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80108de:	2280      	movs	r2, #128	; 0x80
 80108e0:	02d2      	lsls	r2, r2, #11
 80108e2:	e5ed      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
 80108e4:	2280      	movs	r2, #128	; 0x80
 80108e6:	02d2      	lsls	r2, r2, #11
 80108e8:	e706      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108ea:	0632      	lsls	r2, r6, #24
 80108ec:	d500      	bpl.n	80108f0 <HAL_DMA_IRQHandler+0x85c>
 80108ee:	e448      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108f0:	4a36      	ldr	r2, [pc, #216]	; (80109cc <HAL_DMA_IRQHandler+0x938>)
 80108f2:	6810      	ldr	r0, [r2, #0]
 80108f4:	2240      	movs	r2, #64	; 0x40
 80108f6:	e5a0      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108f8:	0632      	lsls	r2, r6, #24
 80108fa:	d500      	bpl.n	80108fe <HAL_DMA_IRQHandler+0x86a>
 80108fc:	e441      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108fe:	4a34      	ldr	r2, [pc, #208]	; (80109d0 <HAL_DMA_IRQHandler+0x93c>)
 8010900:	492f      	ldr	r1, [pc, #188]	; (80109c0 <HAL_DMA_IRQHandler+0x92c>)
 8010902:	6810      	ldr	r0, [r2, #0]
 8010904:	2240      	movs	r2, #64	; 0x40
 8010906:	e4c5      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010908:	2380      	movs	r3, #128	; 0x80
 801090a:	039b      	lsls	r3, r3, #14
 801090c:	e6a3      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
 801090e:	2380      	movs	r3, #128	; 0x80
 8010910:	039b      	lsls	r3, r3, #14
 8010912:	e570      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010914:	2280      	movs	r2, #128	; 0x80
 8010916:	0412      	lsls	r2, r2, #16
 8010918:	e471      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801091a:	2280      	movs	r2, #128	; 0x80
 801091c:	03d2      	lsls	r2, r2, #15
 801091e:	e5cf      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010920:	2280      	movs	r2, #128	; 0x80
 8010922:	0412      	lsls	r2, r2, #16
 8010924:	e614      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010926:	2280      	movs	r2, #128	; 0x80
 8010928:	03d2      	lsls	r2, r2, #15
 801092a:	e6e5      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801092c:	0532      	lsls	r2, r6, #20
 801092e:	d500      	bpl.n	8010932 <HAL_DMA_IRQHandler+0x89e>
 8010930:	e427      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010932:	4a26      	ldr	r2, [pc, #152]	; (80109cc <HAL_DMA_IRQHandler+0x938>)
 8010934:	6810      	ldr	r0, [r2, #0]
 8010936:	2280      	movs	r2, #128	; 0x80
 8010938:	00d2      	lsls	r2, r2, #3
 801093a:	e57e      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801093c:	0532      	lsls	r2, r6, #20
 801093e:	d500      	bpl.n	8010942 <HAL_DMA_IRQHandler+0x8ae>
 8010940:	e41f      	b.n	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010942:	4a23      	ldr	r2, [pc, #140]	; (80109d0 <HAL_DMA_IRQHandler+0x93c>)
 8010944:	0019      	movs	r1, r3
 8010946:	6810      	ldr	r0, [r2, #0]
 8010948:	2280      	movs	r2, #128	; 0x80
 801094a:	00d2      	lsls	r2, r2, #3
 801094c:	e4a2      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801094e:	2380      	movs	r3, #128	; 0x80
 8010950:	049b      	lsls	r3, r3, #18
 8010952:	e550      	b.n	80103f6 <HAL_DMA_IRQHandler+0x362>
 8010954:	2380      	movs	r3, #128	; 0x80
 8010956:	049b      	lsls	r3, r3, #18
 8010958:	e67d      	b.n	8010656 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801095a:	2280      	movs	r2, #128	; 0x80
 801095c:	04d2      	lsls	r2, r2, #19
 801095e:	e5af      	b.n	80104c0 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010960:	2280      	movs	r2, #128	; 0x80
 8010962:	0512      	lsls	r2, r2, #20
 8010964:	e5f4      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010966:	2280      	movs	r2, #128	; 0x80
 8010968:	04d2      	lsls	r2, r2, #19
 801096a:	e6c5      	b.n	80106f8 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801096c:	2280      	movs	r2, #128	; 0x80
 801096e:	0512      	lsls	r2, r2, #20
 8010970:	e445      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010972:	0432      	lsls	r2, r6, #16
 8010974:	d501      	bpl.n	801097a <HAL_DMA_IRQHandler+0x8e6>
 8010976:	f7ff fc04 	bl	8010182 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801097a:	0019      	movs	r1, r3
 801097c:	4a14      	ldr	r2, [pc, #80]	; (80109d0 <HAL_DMA_IRQHandler+0x93c>)
 801097e:	6810      	ldr	r0, [r2, #0]
 8010980:	2280      	movs	r2, #128	; 0x80
 8010982:	01d2      	lsls	r2, r2, #7
 8010984:	e486      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010986:	2208      	movs	r2, #8
 8010988:	e5e2      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
 801098a:	2208      	movs	r2, #8
 801098c:	e437      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
 801098e:	2280      	movs	r2, #128	; 0x80
 8010990:	e5de      	b.n	8010550 <HAL_DMA_IRQHandler+0x4bc>
 8010992:	2280      	movs	r2, #128	; 0x80
 8010994:	e433      	b.n	80101fe <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010996:	6800      	ldr	r0, [r0, #0]
 8010998:	0019      	movs	r1, r3
 801099a:	2204      	movs	r2, #4
 801099c:	e54d      	b.n	801043a <HAL_DMA_IRQHandler+0x3a6>
 801099e:	2280      	movs	r2, #128	; 0x80
 80109a0:	00d2      	lsls	r2, r2, #3
 80109a2:	e477      	b.n	8010294 <HAL_DMA_IRQHandler+0x200>
 80109a4:	40020008 	.word	0x40020008
 80109a8:	4002001c 	.word	0x4002001c
 80109ac:	40020030 	.word	0x40020030
 80109b0:	40020044 	.word	0x40020044
 80109b4:	40020058 	.word	0x40020058
 80109b8:	4002006c 	.word	0x4002006c
 80109bc:	40020408 	.word	0x40020408
 80109c0:	4002041c 	.word	0x4002041c
 80109c4:	40020430 	.word	0x40020430
 80109c8:	bffdfbbc 	.word	0xbffdfbbc
 80109cc:	40020000 	.word	0x40020000
 80109d0:	40020400 	.word	0x40020400

080109d4 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80109d4:	4b05      	ldr	r3, [pc, #20]	; (80109ec <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 80109d6:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80109d8:	691a      	ldr	r2, [r3, #16]
 80109da:	0612      	lsls	r2, r2, #24
 80109dc:	d504      	bpl.n	80109e8 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 80109de:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80109e0:	4a03      	ldr	r2, [pc, #12]	; (80109f0 <HAL_FLASH_Unlock+0x1c>)
 80109e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80109e4:	4a03      	ldr	r2, [pc, #12]	; (80109f4 <HAL_FLASH_Unlock+0x20>)
 80109e6:	605a      	str	r2, [r3, #4]
}
 80109e8:	4770      	bx	lr
 80109ea:	46c0      	nop			; (mov r8, r8)
 80109ec:	40022000 	.word	0x40022000
 80109f0:	45670123 	.word	0x45670123
 80109f4:	cdef89ab 	.word	0xcdef89ab

080109f8 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80109f8:	2180      	movs	r1, #128	; 0x80
 80109fa:	4a03      	ldr	r2, [pc, #12]	; (8010a08 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 80109fc:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80109fe:	6913      	ldr	r3, [r2, #16]
 8010a00:	430b      	orrs	r3, r1
 8010a02:	6113      	str	r3, [r2, #16]
}
 8010a04:	4770      	bx	lr
 8010a06:	46c0      	nop			; (mov r8, r8)
 8010a08:	40022000 	.word	0x40022000

08010a0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a0e:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010a10:	f7fe fe22 	bl	800f658 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010a14:	4c1d      	ldr	r4, [pc, #116]	; (8010a8c <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 8010a16:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010a18:	2601      	movs	r6, #1
 8010a1a:	e001      	b.n	8010a20 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8010a1c:	1c6b      	adds	r3, r5, #1
 8010a1e:	d11d      	bne.n	8010a5c <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010a20:	68e3      	ldr	r3, [r4, #12]
 8010a22:	421e      	tst	r6, r3
 8010a24:	d1fa      	bne.n	8010a1c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010a26:	2320      	movs	r3, #32
 8010a28:	68e2      	ldr	r2, [r4, #12]
 8010a2a:	4213      	tst	r3, r2
 8010a2c:	d000      	beq.n	8010a30 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010a2e:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a30:	4b16      	ldr	r3, [pc, #88]	; (8010a8c <FLASH_WaitForLastOperation+0x80>)
 8010a32:	68da      	ldr	r2, [r3, #12]
 8010a34:	06d2      	lsls	r2, r2, #27
 8010a36:	d51a      	bpl.n	8010a6e <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010a38:	4b14      	ldr	r3, [pc, #80]	; (8010a8c <FLASH_WaitForLastOperation+0x80>)
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	06db      	lsls	r3, r3, #27
 8010a3e:	d504      	bpl.n	8010a4a <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010a40:	2102      	movs	r1, #2
 8010a42:	4a13      	ldr	r2, [pc, #76]	; (8010a90 <FLASH_WaitForLastOperation+0x84>)
 8010a44:	69d3      	ldr	r3, [r2, #28]
 8010a46:	430b      	orrs	r3, r1
 8010a48:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a4a:	4b10      	ldr	r3, [pc, #64]	; (8010a8c <FLASH_WaitForLastOperation+0x80>)
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	075b      	lsls	r3, r3, #29
 8010a50:	d416      	bmi.n	8010a80 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010a52:	2214      	movs	r2, #20
    return HAL_ERROR;
 8010a54:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010a56:	4b0d      	ldr	r3, [pc, #52]	; (8010a8c <FLASH_WaitForLastOperation+0x80>)
 8010a58:	60da      	str	r2, [r3, #12]
}
 8010a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010a5c:	2d00      	cmp	r5, #0
 8010a5e:	d004      	beq.n	8010a6a <FLASH_WaitForLastOperation+0x5e>
 8010a60:	f7fe fdfa 	bl	800f658 <HAL_GetTick>
 8010a64:	1bc0      	subs	r0, r0, r7
 8010a66:	42a8      	cmp	r0, r5
 8010a68:	d9da      	bls.n	8010a20 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8010a6a:	2003      	movs	r0, #3
 8010a6c:	e7f5      	b.n	8010a5a <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a6e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010a70:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a72:	075b      	lsls	r3, r3, #29
 8010a74:	d5f1      	bpl.n	8010a5a <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010a76:	4b05      	ldr	r3, [pc, #20]	; (8010a8c <FLASH_WaitForLastOperation+0x80>)
 8010a78:	68db      	ldr	r3, [r3, #12]
 8010a7a:	06db      	lsls	r3, r3, #27
 8010a7c:	d5e5      	bpl.n	8010a4a <FLASH_WaitForLastOperation+0x3e>
 8010a7e:	e7df      	b.n	8010a40 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010a80:	2101      	movs	r1, #1
 8010a82:	4a03      	ldr	r2, [pc, #12]	; (8010a90 <FLASH_WaitForLastOperation+0x84>)
 8010a84:	69d3      	ldr	r3, [r2, #28]
 8010a86:	430b      	orrs	r3, r1
 8010a88:	61d3      	str	r3, [r2, #28]
 8010a8a:	e7e2      	b.n	8010a52 <FLASH_WaitForLastOperation+0x46>
 8010a8c:	40022000 	.word	0x40022000
 8010a90:	20007600 	.word	0x20007600

08010a94 <HAL_FLASH_Program>:
{
 8010a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a96:	464e      	mov	r6, r9
 8010a98:	4657      	mov	r7, sl
 8010a9a:	46de      	mov	lr, fp
 8010a9c:	4645      	mov	r5, r8
 8010a9e:	b5e0      	push	{r5, r6, r7, lr}
 8010aa0:	469a      	mov	sl, r3
 8010aa2:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010aa4:	4b2a      	ldr	r3, [pc, #168]	; (8010b50 <HAL_FLASH_Program+0xbc>)
{
 8010aa6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010aa8:	4699      	mov	r9, r3
 8010aaa:	7e1b      	ldrb	r3, [r3, #24]
{
 8010aac:	0004      	movs	r4, r0
 8010aae:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d048      	beq.n	8010b46 <HAL_FLASH_Program+0xb2>
 8010ab4:	2501      	movs	r5, #1
 8010ab6:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ab8:	4826      	ldr	r0, [pc, #152]	; (8010b54 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010aba:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010abc:	f7ff ffa6 	bl	8010a0c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	d136      	bne.n	8010b32 <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010ac4:	2c01      	cmp	r4, #1
 8010ac6:	d040      	beq.n	8010b4a <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010ac8:	3c02      	subs	r4, #2
 8010aca:	4263      	negs	r3, r4
 8010acc:	415c      	adcs	r4, r3
 8010ace:	2304      	movs	r3, #4
 8010ad0:	4264      	negs	r4, r4
 8010ad2:	43ac      	bics	r4, r5
 8010ad4:	46a0      	mov	r8, r4
 8010ad6:	469c      	mov	ip, r3
 8010ad8:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ada:	2300      	movs	r3, #0
      nbiterations = 4;
 8010adc:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ade:	469b      	mov	fp, r3
 8010ae0:	e018      	b.n	8010b14 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010ae2:	4653      	mov	r3, sl
 8010ae4:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ae6:	464a      	mov	r2, r9
 8010ae8:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010aea:	2701      	movs	r7, #1
 8010aec:	4c1a      	ldr	r4, [pc, #104]	; (8010b58 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010aee:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010af0:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010af2:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010af4:	433a      	orrs	r2, r7
 8010af6:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010af8:	4816      	ldr	r0, [pc, #88]	; (8010b54 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010afa:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010afc:	f7ff ff86 	bl	8010a0c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010b00:	6923      	ldr	r3, [r4, #16]
 8010b02:	43bb      	bics	r3, r7
 8010b04:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d113      	bne.n	8010b32 <HAL_FLASH_Program+0x9e>
 8010b0a:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8010b0c:	b2eb      	uxtb	r3, r5
 8010b0e:	3602      	adds	r6, #2
 8010b10:	4598      	cmp	r8, r3
 8010b12:	d90e      	bls.n	8010b32 <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010b14:	2220      	movs	r2, #32
 8010b16:	012b      	lsls	r3, r5, #4
 8010b18:	4252      	negs	r2, r2
 8010b1a:	189a      	adds	r2, r3, r2
 8010b1c:	d5e1      	bpl.n	8010ae2 <HAL_FLASH_Program+0x4e>
 8010b1e:	2220      	movs	r2, #32
 8010b20:	4651      	mov	r1, sl
 8010b22:	1ad2      	subs	r2, r2, r3
 8010b24:	4091      	lsls	r1, r2
 8010b26:	000a      	movs	r2, r1
 8010b28:	9901      	ldr	r1, [sp, #4]
 8010b2a:	40d9      	lsrs	r1, r3
 8010b2c:	000b      	movs	r3, r1
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	e7d9      	b.n	8010ae6 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8010b32:	2300      	movs	r3, #0
 8010b34:	464a      	mov	r2, r9
 8010b36:	7613      	strb	r3, [r2, #24]
}
 8010b38:	b003      	add	sp, #12
 8010b3a:	bc3c      	pop	{r2, r3, r4, r5}
 8010b3c:	4690      	mov	r8, r2
 8010b3e:	4699      	mov	r9, r3
 8010b40:	46a2      	mov	sl, r4
 8010b42:	46ab      	mov	fp, r5
 8010b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010b46:	2002      	movs	r0, #2
 8010b48:	e7f6      	b.n	8010b38 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	4698      	mov	r8, r3
 8010b4e:	e7c4      	b.n	8010ada <HAL_FLASH_Program+0x46>
 8010b50:	20007600 	.word	0x20007600
 8010b54:	0000c350 	.word	0x0000c350
 8010b58:	40022000 	.word	0x40022000

08010b5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b5e:	464f      	mov	r7, r9
 8010b60:	4646      	mov	r6, r8
 8010b62:	46d6      	mov	lr, sl
 8010b64:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010b66:	4f30      	ldr	r7, [pc, #192]	; (8010c28 <HAL_FLASHEx_Erase+0xcc>)
{
 8010b68:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8010b6a:	7e3b      	ldrb	r3, [r7, #24]
{
 8010b6c:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d057      	beq.n	8010c22 <HAL_FLASHEx_Erase+0xc6>
 8010b72:	2301      	movs	r3, #1
 8010b74:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010b76:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010b78:	482c      	ldr	r0, [pc, #176]	; (8010c2c <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d034      	beq.n	8010be8 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010b7e:	f7ff ff45 	bl	8010a0c <FLASH_WaitForLastOperation>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d134      	bne.n	8010bf0 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010b86:	2301      	movs	r3, #1
 8010b88:	464a      	mov	r2, r9
 8010b8a:	425b      	negs	r3, r3
 8010b8c:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010b8e:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010b90:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010b92:	02db      	lsls	r3, r3, #11
 8010b94:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010b96:	429d      	cmp	r5, r3
 8010b98:	d22a      	bcs.n	8010bf0 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b9a:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010b9c:	4c24      	ldr	r4, [pc, #144]	; (8010c30 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b9e:	4698      	mov	r8, r3
 8010ba0:	e00a      	b.n	8010bb8 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8010ba2:	2380      	movs	r3, #128	; 0x80
 8010ba4:	011b      	lsls	r3, r3, #4
 8010ba6:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010ba8:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010baa:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010bac:	4694      	mov	ip, r2
 8010bae:	68b3      	ldr	r3, [r6, #8]
 8010bb0:	02db      	lsls	r3, r3, #11
 8010bb2:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010bb4:	42ab      	cmp	r3, r5
 8010bb6:	d91c      	bls.n	8010bf2 <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010bb8:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010bba:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010bbc:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010bbe:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010bc0:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bc2:	481a      	ldr	r0, [pc, #104]	; (8010c2c <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010bc8:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010bca:	6923      	ldr	r3, [r4, #16]
 8010bcc:	323e      	adds	r2, #62	; 0x3e
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bd2:	f7ff ff1b 	bl	8010a0c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010bd6:	4652      	mov	r2, sl
 8010bd8:	6923      	ldr	r3, [r4, #16]
 8010bda:	4393      	bics	r3, r2
 8010bdc:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d0df      	beq.n	8010ba2 <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010be2:	464b      	mov	r3, r9
 8010be4:	601d      	str	r5, [r3, #0]
            break;
 8010be6:	e004      	b.n	8010bf2 <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010be8:	f7ff ff10 	bl	8010a0c <FLASH_WaitForLastOperation>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	d007      	beq.n	8010c00 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bf0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	763b      	strb	r3, [r7, #24]
}
 8010bf6:	bc1c      	pop	{r2, r3, r4}
 8010bf8:	4690      	mov	r8, r2
 8010bfa:	4699      	mov	r9, r3
 8010bfc:	46a2      	mov	sl, r4
 8010bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010c00:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010c02:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010c04:	4c0a      	ldr	r4, [pc, #40]	; (8010c30 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c06:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010c08:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c0a:	4808      	ldr	r0, [pc, #32]	; (8010c2c <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010c0c:	432b      	orrs	r3, r5
 8010c0e:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	4313      	orrs	r3, r2
 8010c14:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c16:	f7ff fef9 	bl	8010a0c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010c1a:	6923      	ldr	r3, [r4, #16]
 8010c1c:	43ab      	bics	r3, r5
 8010c1e:	6123      	str	r3, [r4, #16]
 8010c20:	e7e7      	b.n	8010bf2 <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010c22:	2002      	movs	r0, #2
 8010c24:	e7e7      	b.n	8010bf6 <HAL_FLASHEx_Erase+0x9a>
 8010c26:	46c0      	nop			; (mov r8, r8)
 8010c28:	20007600 	.word	0x20007600
 8010c2c:	0000c350 	.word	0x0000c350
 8010c30:	40022000 	.word	0x40022000

08010c34 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c34:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010c36:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c38:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <FLASH_PageErase+0x1c>)
 8010c3a:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010c3c:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <FLASH_PageErase+0x20>)
 8010c3e:	691a      	ldr	r2, [r3, #16]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010c44:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010c46:	691a      	ldr	r2, [r3, #16]
 8010c48:	313e      	adds	r1, #62	; 0x3e
 8010c4a:	430a      	orrs	r2, r1
 8010c4c:	611a      	str	r2, [r3, #16]
}
 8010c4e:	4770      	bx	lr
 8010c50:	20007600 	.word	0x20007600
 8010c54:	40022000 	.word	0x40022000

08010c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c5a:	464e      	mov	r6, r9
 8010c5c:	46de      	mov	lr, fp
 8010c5e:	4657      	mov	r7, sl
 8010c60:	4645      	mov	r5, r8
 8010c62:	b5e0      	push	{r5, r6, r7, lr}
 8010c64:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010c66:	6809      	ldr	r1, [r1, #0]
{ 
 8010c68:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010c6a:	2900      	cmp	r1, #0
 8010c6c:	d100      	bne.n	8010c70 <HAL_GPIO_Init+0x18>
 8010c6e:	e080      	b.n	8010d72 <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c70:	4b70      	ldr	r3, [pc, #448]	; (8010e34 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 8010c72:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c74:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010c76:	4b70      	ldr	r3, [pc, #448]	; (8010e38 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010c78:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010c7a:	4698      	mov	r8, r3
 8010c7c:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010c7e:	0033      	movs	r3, r6
 8010c80:	4652      	mov	r2, sl
 8010c82:	40a3      	lsls	r3, r4
 8010c84:	4013      	ands	r3, r2
 8010c86:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010c88:	d06f      	beq.n	8010d6a <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010c8a:	464b      	mov	r3, r9
 8010c8c:	6859      	ldr	r1, [r3, #4]
 8010c8e:	2310      	movs	r3, #16
 8010c90:	000f      	movs	r7, r1
 8010c92:	439f      	bics	r7, r3
 8010c94:	003b      	movs	r3, r7
 8010c96:	9701      	str	r7, [sp, #4]
 8010c98:	2f02      	cmp	r7, #2
 8010c9a:	d100      	bne.n	8010c9e <HAL_GPIO_Init+0x46>
 8010c9c:	e070      	b.n	8010d80 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c9e:	2203      	movs	r2, #3
 8010ca0:	0065      	lsls	r5, r4, #1
 8010ca2:	40aa      	lsls	r2, r5
 8010ca4:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010ca6:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010ca8:	4013      	ands	r3, r2
 8010caa:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010cac:	2303      	movs	r3, #3
 8010cae:	400b      	ands	r3, r1
 8010cb0:	40ab      	lsls	r3, r5
 8010cb2:	469c      	mov	ip, r3
 8010cb4:	003b      	movs	r3, r7
 8010cb6:	4667      	mov	r7, ip
 8010cb8:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010cba:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010cbc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010cbe:	3f01      	subs	r7, #1
 8010cc0:	2f01      	cmp	r7, #1
 8010cc2:	d800      	bhi.n	8010cc6 <HAL_GPIO_Init+0x6e>
 8010cc4:	e079      	b.n	8010dba <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010cc6:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010cc8:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010cca:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010ccc:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010cce:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010cd0:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010cd2:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010cd4:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010cd6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010cd8:	4219      	tst	r1, r3
 8010cda:	d046      	beq.n	8010d6a <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010cdc:	465b      	mov	r3, fp
 8010cde:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010ce0:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ce2:	4332      	orrs	r2, r6
 8010ce4:	619a      	str	r2, [r3, #24]
 8010ce6:	699a      	ldr	r2, [r3, #24]
 8010ce8:	4b54      	ldr	r3, [pc, #336]	; (8010e3c <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010cea:	4027      	ands	r7, r4
 8010cec:	469c      	mov	ip, r3
 8010cee:	230f      	movs	r3, #15
 8010cf0:	00bf      	lsls	r7, r7, #2
 8010cf2:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010cf4:	4032      	ands	r2, r6
 8010cf6:	9203      	str	r2, [sp, #12]
 8010cf8:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010cfa:	08a2      	lsrs	r2, r4, #2
 8010cfc:	0092      	lsls	r2, r2, #2
 8010cfe:	4462      	add	r2, ip
 8010d00:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d02:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010d04:	2390      	movs	r3, #144	; 0x90
 8010d06:	05db      	lsls	r3, r3, #23
 8010d08:	4298      	cmp	r0, r3
 8010d0a:	d012      	beq.n	8010d32 <HAL_GPIO_Init+0xda>
 8010d0c:	4b4c      	ldr	r3, [pc, #304]	; (8010e40 <HAL_GPIO_Init+0x1e8>)
 8010d0e:	4298      	cmp	r0, r3
 8010d10:	d100      	bne.n	8010d14 <HAL_GPIO_Init+0xbc>
 8010d12:	e083      	b.n	8010e1c <HAL_GPIO_Init+0x1c4>
 8010d14:	4b4b      	ldr	r3, [pc, #300]	; (8010e44 <HAL_GPIO_Init+0x1ec>)
 8010d16:	4298      	cmp	r0, r3
 8010d18:	d100      	bne.n	8010d1c <HAL_GPIO_Init+0xc4>
 8010d1a:	e07b      	b.n	8010e14 <HAL_GPIO_Init+0x1bc>
 8010d1c:	4b4a      	ldr	r3, [pc, #296]	; (8010e48 <HAL_GPIO_Init+0x1f0>)
 8010d1e:	4298      	cmp	r0, r3
 8010d20:	d100      	bne.n	8010d24 <HAL_GPIO_Init+0xcc>
 8010d22:	e07f      	b.n	8010e24 <HAL_GPIO_Init+0x1cc>
 8010d24:	4b49      	ldr	r3, [pc, #292]	; (8010e4c <HAL_GPIO_Init+0x1f4>)
 8010d26:	4298      	cmp	r0, r3
 8010d28:	d100      	bne.n	8010d2c <HAL_GPIO_Init+0xd4>
 8010d2a:	e07f      	b.n	8010e2c <HAL_GPIO_Init+0x1d4>
 8010d2c:	2305      	movs	r3, #5
 8010d2e:	40bb      	lsls	r3, r7
 8010d30:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010d32:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010d34:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010d36:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010d38:	9b00      	ldr	r3, [sp, #0]
 8010d3a:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010d3c:	03cb      	lsls	r3, r1, #15
 8010d3e:	d451      	bmi.n	8010de4 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010d40:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010d42:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010d44:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010d46:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010d48:	038b      	lsls	r3, r1, #14
 8010d4a:	d452      	bmi.n	8010df2 <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010d4c:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010d4e:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010d50:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010d52:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010d54:	02cb      	lsls	r3, r1, #11
 8010d56:	d453      	bmi.n	8010e00 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010d58:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010d5a:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8010d5c:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010d5e:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010d60:	028b      	lsls	r3, r1, #10
 8010d62:	d454      	bmi.n	8010e0e <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010d64:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010d66:	4643      	mov	r3, r8
 8010d68:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8010d6a:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8010d6c:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8010d6e:	40e3      	lsrs	r3, r4
 8010d70:	d185      	bne.n	8010c7e <HAL_GPIO_Init+0x26>
  } 
}
 8010d72:	b005      	add	sp, #20
 8010d74:	bc3c      	pop	{r2, r3, r4, r5}
 8010d76:	4690      	mov	r8, r2
 8010d78:	4699      	mov	r9, r3
 8010d7a:	46a2      	mov	sl, r4
 8010d7c:	46ab      	mov	fp, r5
 8010d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010d80:	2507      	movs	r5, #7
 8010d82:	4025      	ands	r5, r4
 8010d84:	00ad      	lsls	r5, r5, #2
 8010d86:	330d      	adds	r3, #13
 8010d88:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010d8a:	08e2      	lsrs	r2, r4, #3
 8010d8c:	0092      	lsls	r2, r2, #2
 8010d8e:	1882      	adds	r2, r0, r2
 8010d90:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010d92:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010d94:	464b      	mov	r3, r9
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	40ab      	lsls	r3, r5
 8010d9a:	001d      	movs	r5, r3
 8010d9c:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010d9e:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010da0:	2203      	movs	r2, #3
 8010da2:	0065      	lsls	r5, r4, #1
 8010da4:	40aa      	lsls	r2, r5
 8010da6:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010da8:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010daa:	4017      	ands	r7, r2
 8010dac:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010dae:	2703      	movs	r7, #3
 8010db0:	400f      	ands	r7, r1
 8010db2:	40af      	lsls	r7, r5
 8010db4:	4663      	mov	r3, ip
 8010db6:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010db8:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010dba:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010dbc:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010dbe:	4017      	ands	r7, r2
 8010dc0:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010dc2:	68df      	ldr	r7, [r3, #12]
 8010dc4:	4663      	mov	r3, ip
 8010dc6:	40af      	lsls	r7, r5
 8010dc8:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010dca:	0033      	movs	r3, r6
 8010dcc:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 8010dce:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010dd0:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010dd2:	439f      	bics	r7, r3
 8010dd4:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010dd6:	090f      	lsrs	r7, r1, #4
 8010dd8:	4037      	ands	r7, r6
 8010dda:	40a7      	lsls	r7, r4
 8010ddc:	4663      	mov	r3, ip
 8010dde:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010de0:	6047      	str	r7, [r0, #4]
 8010de2:	e770      	b.n	8010cc6 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010de4:	9b00      	ldr	r3, [sp, #0]
 8010de6:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010de8:	4643      	mov	r3, r8
 8010dea:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010dec:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010dee:	038b      	lsls	r3, r1, #14
 8010df0:	d5ac      	bpl.n	8010d4c <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010df2:	9b00      	ldr	r3, [sp, #0]
 8010df4:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010df6:	4643      	mov	r3, r8
 8010df8:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010dfa:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010dfc:	02cb      	lsls	r3, r1, #11
 8010dfe:	d5ab      	bpl.n	8010d58 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010e00:	9b00      	ldr	r3, [sp, #0]
 8010e02:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010e04:	4643      	mov	r3, r8
 8010e06:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010e08:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010e0a:	028b      	lsls	r3, r1, #10
 8010e0c:	d5aa      	bpl.n	8010d64 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 8010e0e:	9b00      	ldr	r3, [sp, #0]
 8010e10:	431a      	orrs	r2, r3
 8010e12:	e7a8      	b.n	8010d66 <HAL_GPIO_Init+0x10e>
 8010e14:	2302      	movs	r3, #2
 8010e16:	40bb      	lsls	r3, r7
 8010e18:	431d      	orrs	r5, r3
 8010e1a:	e78a      	b.n	8010d32 <HAL_GPIO_Init+0xda>
 8010e1c:	0033      	movs	r3, r6
 8010e1e:	40bb      	lsls	r3, r7
 8010e20:	431d      	orrs	r5, r3
 8010e22:	e786      	b.n	8010d32 <HAL_GPIO_Init+0xda>
 8010e24:	2303      	movs	r3, #3
 8010e26:	40bb      	lsls	r3, r7
 8010e28:	431d      	orrs	r5, r3
 8010e2a:	e782      	b.n	8010d32 <HAL_GPIO_Init+0xda>
 8010e2c:	2304      	movs	r3, #4
 8010e2e:	40bb      	lsls	r3, r7
 8010e30:	431d      	orrs	r5, r3
 8010e32:	e77e      	b.n	8010d32 <HAL_GPIO_Init+0xda>
 8010e34:	40021000 	.word	0x40021000
 8010e38:	40010400 	.word	0x40010400
 8010e3c:	40010000 	.word	0x40010000
 8010e40:	48000400 	.word	0x48000400
 8010e44:	48000800 	.word	0x48000800
 8010e48:	48000c00 	.word	0x48000c00
 8010e4c:	48001000 	.word	0x48001000

08010e50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e52:	46de      	mov	lr, fp
 8010e54:	4657      	mov	r7, sl
 8010e56:	464e      	mov	r6, r9
 8010e58:	4645      	mov	r5, r8
 8010e5a:	b5e0      	push	{r5, r6, r7, lr}
 8010e5c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010e5e:	2900      	cmp	r1, #0
 8010e60:	d055      	beq.n	8010f0e <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e62:	2201      	movs	r2, #1
 8010e64:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e66:	3202      	adds	r2, #2
 8010e68:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e6a:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8010e6c:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e6e:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e70:	4666      	mov	r6, ip
 8010e72:	000d      	movs	r5, r1
 8010e74:	409e      	lsls	r6, r3
 8010e76:	4035      	ands	r5, r6
    if (iocurrent)
 8010e78:	d045      	beq.n	8010f06 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e7a:	4647      	mov	r7, r8
 8010e7c:	005c      	lsls	r4, r3, #1
 8010e7e:	40a7      	lsls	r7, r4
 8010e80:	43fc      	mvns	r4, r7
 8010e82:	6802      	ldr	r2, [r0, #0]
 8010e84:	4022      	ands	r2, r4
 8010e86:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e88:	08da      	lsrs	r2, r3, #3
 8010e8a:	0092      	lsls	r2, r2, #2
 8010e8c:	1887      	adds	r7, r0, r2
 8010e8e:	9701      	str	r7, [sp, #4]
 8010e90:	6a3f      	ldr	r7, [r7, #32]
 8010e92:	46ba      	mov	sl, r7
 8010e94:	2707      	movs	r7, #7
 8010e96:	401f      	ands	r7, r3
 8010e98:	00bf      	lsls	r7, r7, #2
 8010e9a:	46bb      	mov	fp, r7
 8010e9c:	464f      	mov	r7, r9
 8010e9e:	465a      	mov	r2, fp
 8010ea0:	4097      	lsls	r7, r2
 8010ea2:	46bb      	mov	fp, r7
 8010ea4:	4657      	mov	r7, sl
 8010ea6:	465a      	mov	r2, fp
 8010ea8:	4397      	bics	r7, r2
 8010eaa:	003a      	movs	r2, r7
 8010eac:	9f01      	ldr	r7, [sp, #4]
 8010eae:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010eb0:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010eb2:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010eb4:	4022      	ands	r2, r4
 8010eb6:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010eb8:	6842      	ldr	r2, [r0, #4]
 8010eba:	43b2      	bics	r2, r6
 8010ebc:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010ebe:	68c2      	ldr	r2, [r0, #12]
 8010ec0:	4014      	ands	r4, r2
 8010ec2:	60c4      	str	r4, [r0, #12]
 8010ec4:	4c2b      	ldr	r4, [pc, #172]	; (8010f74 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010ec6:	089a      	lsrs	r2, r3, #2
 8010ec8:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010eca:	4644      	mov	r4, r8
 8010ecc:	401c      	ands	r4, r3
 8010ece:	00a4      	lsls	r4, r4, #2
 8010ed0:	40a7      	lsls	r7, r4
 8010ed2:	0092      	lsls	r2, r2, #2
 8010ed4:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010ed6:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010ed8:	46ba      	mov	sl, r7
 8010eda:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010edc:	2790      	movs	r7, #144	; 0x90
 8010ede:	05ff      	lsls	r7, r7, #23
 8010ee0:	42b8      	cmp	r0, r7
 8010ee2:	d01b      	beq.n	8010f1c <HAL_GPIO_DeInit+0xcc>
 8010ee4:	4f24      	ldr	r7, [pc, #144]	; (8010f78 <HAL_GPIO_DeInit+0x128>)
 8010ee6:	42b8      	cmp	r0, r7
 8010ee8:	d033      	beq.n	8010f52 <HAL_GPIO_DeInit+0x102>
 8010eea:	4f24      	ldr	r7, [pc, #144]	; (8010f7c <HAL_GPIO_DeInit+0x12c>)
 8010eec:	42b8      	cmp	r0, r7
 8010eee:	d038      	beq.n	8010f62 <HAL_GPIO_DeInit+0x112>
 8010ef0:	4f23      	ldr	r7, [pc, #140]	; (8010f80 <HAL_GPIO_DeInit+0x130>)
 8010ef2:	42b8      	cmp	r0, r7
 8010ef4:	d039      	beq.n	8010f6a <HAL_GPIO_DeInit+0x11a>
 8010ef6:	4f23      	ldr	r7, [pc, #140]	; (8010f84 <HAL_GPIO_DeInit+0x134>)
 8010ef8:	42b8      	cmp	r0, r7
 8010efa:	d02e      	beq.n	8010f5a <HAL_GPIO_DeInit+0x10a>
 8010efc:	2705      	movs	r7, #5
 8010efe:	40a7      	lsls	r7, r4
 8010f00:	003c      	movs	r4, r7
 8010f02:	42a6      	cmp	r6, r4
 8010f04:	d00d      	beq.n	8010f22 <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010f06:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010f08:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010f0a:	40da      	lsrs	r2, r3
 8010f0c:	d1b0      	bne.n	8010e70 <HAL_GPIO_DeInit+0x20>
  }
}
 8010f0e:	b003      	add	sp, #12
 8010f10:	bc3c      	pop	{r2, r3, r4, r5}
 8010f12:	4690      	mov	r8, r2
 8010f14:	4699      	mov	r9, r3
 8010f16:	46a2      	mov	sl, r4
 8010f18:	46ab      	mov	fp, r5
 8010f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f1c:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010f1e:	42a6      	cmp	r6, r4
 8010f20:	d1f1      	bne.n	8010f06 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010f22:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010f24:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010f26:	6894      	ldr	r4, [r2, #8]
    position++;
 8010f28:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010f2a:	43b4      	bics	r4, r6
 8010f2c:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010f2e:	4c16      	ldr	r4, [pc, #88]	; (8010f88 <HAL_GPIO_DeInit+0x138>)
 8010f30:	6822      	ldr	r2, [r4, #0]
 8010f32:	402a      	ands	r2, r5
 8010f34:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010f36:	6862      	ldr	r2, [r4, #4]
 8010f38:	402a      	ands	r2, r5
 8010f3a:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010f3c:	68a2      	ldr	r2, [r4, #8]
 8010f3e:	402a      	ands	r2, r5
 8010f40:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010f42:	68e2      	ldr	r2, [r4, #12]
 8010f44:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8010f46:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010f48:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8010f4a:	40da      	lsrs	r2, r3
 8010f4c:	d000      	beq.n	8010f50 <HAL_GPIO_DeInit+0x100>
 8010f4e:	e78f      	b.n	8010e70 <HAL_GPIO_DeInit+0x20>
 8010f50:	e7dd      	b.n	8010f0e <HAL_GPIO_DeInit+0xbe>
 8010f52:	4667      	mov	r7, ip
 8010f54:	40a7      	lsls	r7, r4
 8010f56:	003c      	movs	r4, r7
 8010f58:	e7e1      	b.n	8010f1e <HAL_GPIO_DeInit+0xce>
 8010f5a:	2704      	movs	r7, #4
 8010f5c:	40a7      	lsls	r7, r4
 8010f5e:	003c      	movs	r4, r7
 8010f60:	e7dd      	b.n	8010f1e <HAL_GPIO_DeInit+0xce>
 8010f62:	2702      	movs	r7, #2
 8010f64:	40a7      	lsls	r7, r4
 8010f66:	003c      	movs	r4, r7
 8010f68:	e7d9      	b.n	8010f1e <HAL_GPIO_DeInit+0xce>
 8010f6a:	4647      	mov	r7, r8
 8010f6c:	40a7      	lsls	r7, r4
 8010f6e:	003c      	movs	r4, r7
 8010f70:	e7d5      	b.n	8010f1e <HAL_GPIO_DeInit+0xce>
 8010f72:	46c0      	nop			; (mov r8, r8)
 8010f74:	40010000 	.word	0x40010000
 8010f78:	48000400 	.word	0x48000400
 8010f7c:	48000800 	.word	0x48000800
 8010f80:	48000c00 	.word	0x48000c00
 8010f84:	48001000 	.word	0x48001000
 8010f88:	40010400 	.word	0x40010400

08010f8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010f8c:	6900      	ldr	r0, [r0, #16]
 8010f8e:	4008      	ands	r0, r1
 8010f90:	1e41      	subs	r1, r0, #1
 8010f92:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010f94:	b2c0      	uxtb	r0, r0
  }
 8010f96:	4770      	bx	lr

08010f98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010f98:	2a00      	cmp	r2, #0
 8010f9a:	d101      	bne.n	8010fa0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f9c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010f9e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010fa0:	6181      	str	r1, [r0, #24]
 8010fa2:	e7fc      	b.n	8010f9e <HAL_GPIO_WritePin+0x6>

08010fa4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010fa4:	6943      	ldr	r3, [r0, #20]
 8010fa6:	4059      	eors	r1, r3
 8010fa8:	6141      	str	r1, [r0, #20]
}
 8010faa:	4770      	bx	lr

08010fac <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010fac:	4770      	bx	lr
 8010fae:	46c0      	nop			; (mov r8, r8)

08010fb0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010fb0:	2380      	movs	r3, #128	; 0x80
 8010fb2:	4a03      	ldr	r2, [pc, #12]	; (8010fc0 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	6811      	ldr	r1, [r2, #0]
 8010fb8:	430b      	orrs	r3, r1
 8010fba:	6013      	str	r3, [r2, #0]
}
 8010fbc:	4770      	bx	lr
 8010fbe:	46c0      	nop			; (mov r8, r8)
 8010fc0:	40007000 	.word	0x40007000

08010fc4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fc6:	46c6      	mov	lr, r8
 8010fc8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010fca:	6803      	ldr	r3, [r0, #0]
{
 8010fcc:	b082      	sub	sp, #8
 8010fce:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010fd0:	07da      	lsls	r2, r3, #31
 8010fd2:	d54b      	bpl.n	801106c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010fd4:	210c      	movs	r1, #12
 8010fd6:	48c4      	ldr	r0, [pc, #784]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 8010fd8:	6842      	ldr	r2, [r0, #4]
 8010fda:	400a      	ands	r2, r1
 8010fdc:	2a04      	cmp	r2, #4
 8010fde:	d100      	bne.n	8010fe2 <HAL_RCC_OscConfig+0x1e>
 8010fe0:	e153      	b.n	801128a <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010fe2:	6842      	ldr	r2, [r0, #4]
 8010fe4:	4011      	ands	r1, r2
 8010fe6:	2908      	cmp	r1, #8
 8010fe8:	d108      	bne.n	8010ffc <HAL_RCC_OscConfig+0x38>
 8010fea:	21c0      	movs	r1, #192	; 0xc0
 8010fec:	6842      	ldr	r2, [r0, #4]
 8010fee:	0249      	lsls	r1, r1, #9
 8010ff0:	400a      	ands	r2, r1
 8010ff2:	2180      	movs	r1, #128	; 0x80
 8010ff4:	0249      	lsls	r1, r1, #9
 8010ff6:	428a      	cmp	r2, r1
 8010ff8:	d100      	bne.n	8010ffc <HAL_RCC_OscConfig+0x38>
 8010ffa:	e146      	b.n	801128a <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010ffc:	4dba      	ldr	r5, [pc, #744]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 8010ffe:	4abb      	ldr	r2, [pc, #748]	; (80112ec <HAL_RCC_OscConfig+0x328>)
 8011000:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011002:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011004:	4013      	ands	r3, r2
 8011006:	602b      	str	r3, [r5, #0]
 8011008:	682b      	ldr	r3, [r5, #0]
 801100a:	4ab9      	ldr	r2, [pc, #740]	; (80112f0 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801100c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801100e:	4013      	ands	r3, r2
 8011010:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011012:	f7fe fb21 	bl	800f658 <HAL_GetTick>
 8011016:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011018:	e005      	b.n	8011026 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801101a:	f7fe fb1d 	bl	800f658 <HAL_GetTick>
 801101e:	1bc0      	subs	r0, r0, r7
 8011020:	2864      	cmp	r0, #100	; 0x64
 8011022:	d900      	bls.n	8011026 <HAL_RCC_OscConfig+0x62>
 8011024:	e13b      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011026:	682b      	ldr	r3, [r5, #0]
 8011028:	4233      	tst	r3, r6
 801102a:	d1f6      	bne.n	801101a <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801102c:	6863      	ldr	r3, [r4, #4]
 801102e:	2b01      	cmp	r3, #1
 8011030:	d100      	bne.n	8011034 <HAL_RCC_OscConfig+0x70>
 8011032:	e196      	b.n	8011362 <HAL_RCC_OscConfig+0x39e>
 8011034:	2b00      	cmp	r3, #0
 8011036:	d000      	beq.n	801103a <HAL_RCC_OscConfig+0x76>
 8011038:	e1bc      	b.n	80113b4 <HAL_RCC_OscConfig+0x3f0>
 801103a:	682b      	ldr	r3, [r5, #0]
 801103c:	4aab      	ldr	r2, [pc, #684]	; (80112ec <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801103e:	4eaa      	ldr	r6, [pc, #680]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011040:	4013      	ands	r3, r2
 8011042:	602b      	str	r3, [r5, #0]
 8011044:	682b      	ldr	r3, [r5, #0]
 8011046:	4aaa      	ldr	r2, [pc, #680]	; (80112f0 <HAL_RCC_OscConfig+0x32c>)
 8011048:	4013      	ands	r3, r2
 801104a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801104c:	f7fe fb04 	bl	800f658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011050:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011052:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011054:	02ad      	lsls	r5, r5, #10
 8011056:	e005      	b.n	8011064 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011058:	f7fe fafe 	bl	800f658 <HAL_GetTick>
 801105c:	1bc0      	subs	r0, r0, r7
 801105e:	2864      	cmp	r0, #100	; 0x64
 8011060:	d900      	bls.n	8011064 <HAL_RCC_OscConfig+0xa0>
 8011062:	e11c      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011064:	6833      	ldr	r3, [r6, #0]
 8011066:	422b      	tst	r3, r5
 8011068:	d1f6      	bne.n	8011058 <HAL_RCC_OscConfig+0x94>
 801106a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801106c:	079a      	lsls	r2, r3, #30
 801106e:	d529      	bpl.n	80110c4 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011070:	220c      	movs	r2, #12
 8011072:	499d      	ldr	r1, [pc, #628]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 8011074:	6848      	ldr	r0, [r1, #4]
 8011076:	4202      	tst	r2, r0
 8011078:	d100      	bne.n	801107c <HAL_RCC_OscConfig+0xb8>
 801107a:	e0fd      	b.n	8011278 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801107c:	6848      	ldr	r0, [r1, #4]
 801107e:	4002      	ands	r2, r0
 8011080:	2a08      	cmp	r2, #8
 8011082:	d100      	bne.n	8011086 <HAL_RCC_OscConfig+0xc2>
 8011084:	e0ef      	b.n	8011266 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011086:	68e3      	ldr	r3, [r4, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d100      	bne.n	801108e <HAL_RCC_OscConfig+0xca>
 801108c:	e138      	b.n	8011300 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801108e:	2201      	movs	r2, #1
 8011090:	4f95      	ldr	r7, [pc, #596]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011092:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	4313      	orrs	r3, r2
 8011098:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 801109a:	f7fe fadd 	bl	800f658 <HAL_GetTick>
 801109e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80110a0:	e005      	b.n	80110ae <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80110a2:	f7fe fad9 	bl	800f658 <HAL_GetTick>
 80110a6:	1b80      	subs	r0, r0, r6
 80110a8:	2864      	cmp	r0, #100	; 0x64
 80110aa:	d900      	bls.n	80110ae <HAL_RCC_OscConfig+0xea>
 80110ac:	e0f7      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	421d      	tst	r5, r3
 80110b2:	d0f6      	beq.n	80110a2 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110b4:	21f8      	movs	r1, #248	; 0xf8
 80110b6:	683a      	ldr	r2, [r7, #0]
 80110b8:	6923      	ldr	r3, [r4, #16]
 80110ba:	438a      	bics	r2, r1
 80110bc:	00db      	lsls	r3, r3, #3
 80110be:	4313      	orrs	r3, r2
 80110c0:	603b      	str	r3, [r7, #0]
 80110c2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80110c4:	071a      	lsls	r2, r3, #28
 80110c6:	d45d      	bmi.n	8011184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110c8:	075a      	lsls	r2, r3, #29
 80110ca:	d474      	bmi.n	80111b6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80110cc:	06da      	lsls	r2, r3, #27
 80110ce:	d512      	bpl.n	80110f6 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80110d0:	6962      	ldr	r2, [r4, #20]
 80110d2:	2a01      	cmp	r2, #1
 80110d4:	d100      	bne.n	80110d8 <HAL_RCC_OscConfig+0x114>
 80110d6:	e18c      	b.n	80113f2 <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80110d8:	3205      	adds	r2, #5
 80110da:	d000      	beq.n	80110de <HAL_RCC_OscConfig+0x11a>
 80110dc:	e124      	b.n	8011328 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80110de:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80110e0:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80110e2:	4981      	ldr	r1, [pc, #516]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 80110e4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80110e6:	4382      	bics	r2, r0
 80110e8:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80110ea:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80110ec:	69a2      	ldr	r2, [r4, #24]
 80110ee:	43a8      	bics	r0, r5
 80110f0:	00d2      	lsls	r2, r2, #3
 80110f2:	4302      	orrs	r2, r0
 80110f4:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80110f6:	069b      	lsls	r3, r3, #26
 80110f8:	d522      	bpl.n	8011140 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80110fa:	220c      	movs	r2, #12
 80110fc:	497a      	ldr	r1, [pc, #488]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 80110fe:	684b      	ldr	r3, [r1, #4]
 8011100:	4013      	ands	r3, r2
 8011102:	2b0c      	cmp	r3, #12
 8011104:	d100      	bne.n	8011108 <HAL_RCC_OscConfig+0x144>
 8011106:	e14a      	b.n	801139e <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011108:	684b      	ldr	r3, [r1, #4]
 801110a:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801110c:	2a08      	cmp	r2, #8
 801110e:	d100      	bne.n	8011112 <HAL_RCC_OscConfig+0x14e>
 8011110:	e13e      	b.n	8011390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011112:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011114:	4d74      	ldr	r5, [pc, #464]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011116:	2b00      	cmp	r3, #0
 8011118:	d100      	bne.n	801111c <HAL_RCC_OscConfig+0x158>
 801111a:	e156      	b.n	80113ca <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 801111c:	2680      	movs	r6, #128	; 0x80
 801111e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011120:	0276      	lsls	r6, r6, #9
 8011122:	4333      	orrs	r3, r6
 8011124:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011126:	f7fe fa97 	bl	800f658 <HAL_GetTick>
 801112a:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801112c:	e005      	b.n	801113a <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801112e:	f7fe fa93 	bl	800f658 <HAL_GetTick>
 8011132:	1bc0      	subs	r0, r0, r7
 8011134:	2864      	cmp	r0, #100	; 0x64
 8011136:	d900      	bls.n	801113a <HAL_RCC_OscConfig+0x176>
 8011138:	e0b1      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801113a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801113c:	4233      	tst	r3, r6
 801113e:	d0f6      	beq.n	801112e <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011142:	2b00      	cmp	r3, #0
 8011144:	d01c      	beq.n	8011180 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011146:	220c      	movs	r2, #12
 8011148:	4d67      	ldr	r5, [pc, #412]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 801114a:	6869      	ldr	r1, [r5, #4]
 801114c:	400a      	ands	r2, r1
 801114e:	2a08      	cmp	r2, #8
 8011150:	d100      	bne.n	8011154 <HAL_RCC_OscConfig+0x190>
 8011152:	e098      	b.n	8011286 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011154:	2b02      	cmp	r3, #2
 8011156:	d100      	bne.n	801115a <HAL_RCC_OscConfig+0x196>
 8011158:	e16a      	b.n	8011430 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801115a:	682b      	ldr	r3, [r5, #0]
 801115c:	4a65      	ldr	r2, [pc, #404]	; (80112f4 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801115e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011160:	4013      	ands	r3, r2
 8011162:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011164:	f7fe fa78 	bl	800f658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011168:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 801116a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801116c:	e005      	b.n	801117a <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801116e:	f7fe fa73 	bl	800f658 <HAL_GetTick>
 8011172:	1b80      	subs	r0, r0, r6
 8011174:	2864      	cmp	r0, #100	; 0x64
 8011176:	d900      	bls.n	801117a <HAL_RCC_OscConfig+0x1b6>
 8011178:	e091      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801117a:	682b      	ldr	r3, [r5, #0]
 801117c:	4223      	tst	r3, r4
 801117e:	d1f6      	bne.n	801116e <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8011180:	2000      	movs	r0, #0
 8011182:	e08d      	b.n	80112a0 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011184:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8011186:	4d58      	ldr	r5, [pc, #352]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011188:	2b00      	cmp	r3, #0
 801118a:	d100      	bne.n	801118e <HAL_RCC_OscConfig+0x1ca>
 801118c:	e08c      	b.n	80112a8 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801118e:	2201      	movs	r2, #1
 8011190:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011192:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8011194:	4313      	orrs	r3, r2
 8011196:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011198:	f7fe fa5e 	bl	800f658 <HAL_GetTick>
 801119c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801119e:	e004      	b.n	80111aa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80111a0:	f7fe fa5a 	bl	800f658 <HAL_GetTick>
 80111a4:	1bc0      	subs	r0, r0, r7
 80111a6:	2864      	cmp	r0, #100	; 0x64
 80111a8:	d879      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80111aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111ac:	421e      	tst	r6, r3
 80111ae:	d0f7      	beq.n	80111a0 <HAL_RCC_OscConfig+0x1dc>
 80111b0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111b2:	075a      	lsls	r2, r3, #29
 80111b4:	d58a      	bpl.n	80110cc <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 80111b6:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80111b8:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80111ba:	4a4b      	ldr	r2, [pc, #300]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 80111bc:	0540      	lsls	r0, r0, #21
 80111be:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80111c0:	4d4d      	ldr	r5, [pc, #308]	; (80112f8 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80111c2:	4301      	orrs	r1, r0
 80111c4:	61d1      	str	r1, [r2, #28]
 80111c6:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80111c8:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80111ca:	4003      	ands	r3, r0
 80111cc:	9301      	str	r3, [sp, #4]
 80111ce:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80111d0:	682b      	ldr	r3, [r5, #0]
 80111d2:	4333      	orrs	r3, r6
 80111d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80111d6:	f7fe fa3f 	bl	800f658 <HAL_GetTick>
 80111da:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80111dc:	e004      	b.n	80111e8 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80111de:	f7fe fa3b 	bl	800f658 <HAL_GetTick>
 80111e2:	1bc0      	subs	r0, r0, r7
 80111e4:	2864      	cmp	r0, #100	; 0x64
 80111e6:	d85a      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80111e8:	682b      	ldr	r3, [r5, #0]
 80111ea:	4233      	tst	r3, r6
 80111ec:	d0f7      	beq.n	80111de <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80111ee:	2201      	movs	r2, #1
 80111f0:	4d3d      	ldr	r5, [pc, #244]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111f2:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80111f4:	6a2b      	ldr	r3, [r5, #32]
 80111f6:	4393      	bics	r3, r2
 80111f8:	622b      	str	r3, [r5, #32]
 80111fa:	6a2b      	ldr	r3, [r5, #32]
 80111fc:	3203      	adds	r2, #3
 80111fe:	4393      	bics	r3, r2
 8011200:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 8011202:	f7fe fa29 	bl	800f658 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011206:	4b3d      	ldr	r3, [pc, #244]	; (80112fc <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8011208:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801120a:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801120c:	e004      	b.n	8011218 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801120e:	f7fe fa23 	bl	800f658 <HAL_GetTick>
 8011212:	1bc0      	subs	r0, r0, r7
 8011214:	4540      	cmp	r0, r8
 8011216:	d842      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011218:	6a2b      	ldr	r3, [r5, #32]
 801121a:	421e      	tst	r6, r3
 801121c:	d1f7      	bne.n	801120e <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801121e:	68a3      	ldr	r3, [r4, #8]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d100      	bne.n	8011226 <HAL_RCC_OscConfig+0x262>
 8011224:	e157      	b.n	80114d6 <HAL_RCC_OscConfig+0x512>
 8011226:	2b00      	cmp	r3, #0
 8011228:	d100      	bne.n	801122c <HAL_RCC_OscConfig+0x268>
 801122a:	e139      	b.n	80114a0 <HAL_RCC_OscConfig+0x4dc>
 801122c:	2b05      	cmp	r3, #5
 801122e:	d100      	bne.n	8011232 <HAL_RCC_OscConfig+0x26e>
 8011230:	e155      	b.n	80114de <HAL_RCC_OscConfig+0x51a>
 8011232:	2201      	movs	r2, #1
 8011234:	6a2b      	ldr	r3, [r5, #32]
 8011236:	4393      	bics	r3, r2
 8011238:	622b      	str	r3, [r5, #32]
 801123a:	6a2b      	ldr	r3, [r5, #32]
 801123c:	3203      	adds	r2, #3
 801123e:	4393      	bics	r3, r2
 8011240:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011242:	f7fe fa09 	bl	800f658 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011246:	4e28      	ldr	r6, [pc, #160]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8011248:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801124a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801124c:	4f2b      	ldr	r7, [pc, #172]	; (80112fc <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801124e:	e005      	b.n	801125c <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011250:	f7fe fa02 	bl	800f658 <HAL_GetTick>
 8011254:	4643      	mov	r3, r8
 8011256:	1ac0      	subs	r0, r0, r3
 8011258:	42b8      	cmp	r0, r7
 801125a:	d820      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801125c:	6a33      	ldr	r3, [r6, #32]
 801125e:	421d      	tst	r5, r3
 8011260:	d0f6      	beq.n	8011250 <HAL_RCC_OscConfig+0x28c>
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	e732      	b.n	80110cc <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011266:	684a      	ldr	r2, [r1, #4]
 8011268:	21c0      	movs	r1, #192	; 0xc0
 801126a:	0249      	lsls	r1, r1, #9
 801126c:	400a      	ands	r2, r1
 801126e:	2180      	movs	r1, #128	; 0x80
 8011270:	0209      	lsls	r1, r1, #8
 8011272:	428a      	cmp	r2, r1
 8011274:	d000      	beq.n	8011278 <HAL_RCC_OscConfig+0x2b4>
 8011276:	e706      	b.n	8011086 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011278:	4a1b      	ldr	r2, [pc, #108]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 801127a:	6812      	ldr	r2, [r2, #0]
 801127c:	0792      	lsls	r2, r2, #30
 801127e:	d526      	bpl.n	80112ce <HAL_RCC_OscConfig+0x30a>
 8011280:	68e2      	ldr	r2, [r4, #12]
 8011282:	2a01      	cmp	r2, #1
 8011284:	d023      	beq.n	80112ce <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8011286:	2001      	movs	r0, #1
 8011288:	e00a      	b.n	80112a0 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801128a:	4a17      	ldr	r2, [pc, #92]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 801128c:	6812      	ldr	r2, [r2, #0]
 801128e:	0392      	lsls	r2, r2, #14
 8011290:	d400      	bmi.n	8011294 <HAL_RCC_OscConfig+0x2d0>
 8011292:	e6eb      	b.n	801106c <HAL_RCC_OscConfig+0xa8>
 8011294:	6862      	ldr	r2, [r4, #4]
 8011296:	2a00      	cmp	r2, #0
 8011298:	d000      	beq.n	801129c <HAL_RCC_OscConfig+0x2d8>
 801129a:	e6e7      	b.n	801106c <HAL_RCC_OscConfig+0xa8>
 801129c:	e7f3      	b.n	8011286 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801129e:	2003      	movs	r0, #3
}
 80112a0:	b002      	add	sp, #8
 80112a2:	bc04      	pop	{r2}
 80112a4:	4690      	mov	r8, r2
 80112a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80112a8:	2201      	movs	r2, #1
 80112aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80112ac:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80112ae:	4393      	bics	r3, r2
 80112b0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80112b2:	f7fe f9d1 	bl	800f658 <HAL_GetTick>
 80112b6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80112b8:	e004      	b.n	80112c4 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80112ba:	f7fe f9cd 	bl	800f658 <HAL_GetTick>
 80112be:	1bc0      	subs	r0, r0, r7
 80112c0:	2864      	cmp	r0, #100	; 0x64
 80112c2:	d8ec      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80112c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112c6:	421e      	tst	r6, r3
 80112c8:	d1f7      	bne.n	80112ba <HAL_RCC_OscConfig+0x2f6>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	e771      	b.n	80111b2 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112ce:	25f8      	movs	r5, #248	; 0xf8
 80112d0:	4805      	ldr	r0, [pc, #20]	; (80112e8 <HAL_RCC_OscConfig+0x324>)
 80112d2:	6922      	ldr	r2, [r4, #16]
 80112d4:	6801      	ldr	r1, [r0, #0]
 80112d6:	00d2      	lsls	r2, r2, #3
 80112d8:	43a9      	bics	r1, r5
 80112da:	430a      	orrs	r2, r1
 80112dc:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80112de:	071a      	lsls	r2, r3, #28
 80112e0:	d400      	bmi.n	80112e4 <HAL_RCC_OscConfig+0x320>
 80112e2:	e6f1      	b.n	80110c8 <HAL_RCC_OscConfig+0x104>
 80112e4:	e74e      	b.n	8011184 <HAL_RCC_OscConfig+0x1c0>
 80112e6:	46c0      	nop			; (mov r8, r8)
 80112e8:	40021000 	.word	0x40021000
 80112ec:	fffeffff 	.word	0xfffeffff
 80112f0:	fffbffff 	.word	0xfffbffff
 80112f4:	feffffff 	.word	0xfeffffff
 80112f8:	40007000 	.word	0x40007000
 80112fc:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 8011300:	2201      	movs	r2, #1
 8011302:	4d7b      	ldr	r5, [pc, #492]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011304:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8011306:	682b      	ldr	r3, [r5, #0]
 8011308:	4393      	bics	r3, r2
 801130a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801130c:	f7fe f9a4 	bl	800f658 <HAL_GetTick>
 8011310:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011312:	e004      	b.n	801131e <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011314:	f7fe f9a0 	bl	800f658 <HAL_GetTick>
 8011318:	1bc0      	subs	r0, r0, r7
 801131a:	2864      	cmp	r0, #100	; 0x64
 801131c:	d8bf      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801131e:	682b      	ldr	r3, [r5, #0]
 8011320:	421e      	tst	r6, r3
 8011322:	d1f7      	bne.n	8011314 <HAL_RCC_OscConfig+0x350>
 8011324:	6823      	ldr	r3, [r4, #0]
 8011326:	e6cd      	b.n	80110c4 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011328:	2204      	movs	r2, #4
 801132a:	4d71      	ldr	r5, [pc, #452]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801132c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 801132e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011330:	4313      	orrs	r3, r2
 8011332:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011334:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011336:	3a03      	subs	r2, #3
 8011338:	4393      	bics	r3, r2
 801133a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 801133c:	f7fe f98c 	bl	800f658 <HAL_GetTick>
 8011340:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011342:	e004      	b.n	801134e <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011344:	f7fe f988 	bl	800f658 <HAL_GetTick>
 8011348:	1bc0      	subs	r0, r0, r7
 801134a:	2864      	cmp	r0, #100	; 0x64
 801134c:	d8a7      	bhi.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801134e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011350:	421e      	tst	r6, r3
 8011352:	d1f7      	bne.n	8011344 <HAL_RCC_OscConfig+0x380>
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	e6ce      	b.n	80110f6 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011358:	2380      	movs	r3, #128	; 0x80
 801135a:	682a      	ldr	r2, [r5, #0]
 801135c:	02db      	lsls	r3, r3, #11
 801135e:	4313      	orrs	r3, r2
 8011360:	602b      	str	r3, [r5, #0]
 8011362:	2380      	movs	r3, #128	; 0x80
 8011364:	682a      	ldr	r2, [r5, #0]
 8011366:	025b      	lsls	r3, r3, #9
 8011368:	4313      	orrs	r3, r2
 801136a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801136c:	f7fe f974 	bl	800f658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011370:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011372:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011374:	4e5e      	ldr	r6, [pc, #376]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
 8011376:	02ad      	lsls	r5, r5, #10
 8011378:	e005      	b.n	8011386 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801137a:	f7fe f96d 	bl	800f658 <HAL_GetTick>
 801137e:	1bc0      	subs	r0, r0, r7
 8011380:	2864      	cmp	r0, #100	; 0x64
 8011382:	d900      	bls.n	8011386 <HAL_RCC_OscConfig+0x3c2>
 8011384:	e78b      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011386:	6833      	ldr	r3, [r6, #0]
 8011388:	422b      	tst	r3, r5
 801138a:	d0f6      	beq.n	801137a <HAL_RCC_OscConfig+0x3b6>
 801138c:	6823      	ldr	r3, [r4, #0]
 801138e:	e66d      	b.n	801106c <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011390:	22c0      	movs	r2, #192	; 0xc0
 8011392:	684b      	ldr	r3, [r1, #4]
 8011394:	0252      	lsls	r2, r2, #9
 8011396:	4013      	ands	r3, r2
 8011398:	4293      	cmp	r3, r2
 801139a:	d000      	beq.n	801139e <HAL_RCC_OscConfig+0x3da>
 801139c:	e6b9      	b.n	8011112 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801139e:	4b54      	ldr	r3, [pc, #336]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
 80113a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a2:	03db      	lsls	r3, r3, #15
 80113a4:	d400      	bmi.n	80113a8 <HAL_RCC_OscConfig+0x3e4>
 80113a6:	e6cb      	b.n	8011140 <HAL_RCC_OscConfig+0x17c>
 80113a8:	69e3      	ldr	r3, [r4, #28]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d100      	bne.n	80113b0 <HAL_RCC_OscConfig+0x3ec>
 80113ae:	e6c7      	b.n	8011140 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 80113b0:	2001      	movs	r0, #1
 80113b2:	e775      	b.n	80112a0 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80113b4:	2b05      	cmp	r3, #5
 80113b6:	d0cf      	beq.n	8011358 <HAL_RCC_OscConfig+0x394>
 80113b8:	682b      	ldr	r3, [r5, #0]
 80113ba:	4a4e      	ldr	r2, [pc, #312]	; (80114f4 <HAL_RCC_OscConfig+0x530>)
 80113bc:	4013      	ands	r3, r2
 80113be:	602b      	str	r3, [r5, #0]
 80113c0:	682b      	ldr	r3, [r5, #0]
 80113c2:	4a4d      	ldr	r2, [pc, #308]	; (80114f8 <HAL_RCC_OscConfig+0x534>)
 80113c4:	4013      	ands	r3, r2
 80113c6:	602b      	str	r3, [r5, #0]
 80113c8:	e7d0      	b.n	801136c <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 80113ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80113cc:	4a49      	ldr	r2, [pc, #292]	; (80114f4 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80113ce:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80113d0:	4013      	ands	r3, r2
 80113d2:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80113d4:	f7fe f940 	bl	800f658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80113d8:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 80113da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80113dc:	e005      	b.n	80113ea <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80113de:	f7fe f93b 	bl	800f658 <HAL_GetTick>
 80113e2:	1bc0      	subs	r0, r0, r7
 80113e4:	2864      	cmp	r0, #100	; 0x64
 80113e6:	d900      	bls.n	80113ea <HAL_RCC_OscConfig+0x426>
 80113e8:	e759      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80113ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80113ec:	4233      	tst	r3, r6
 80113ee:	d1f6      	bne.n	80113de <HAL_RCC_OscConfig+0x41a>
 80113f0:	e6a6      	b.n	8011140 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80113f2:	2104      	movs	r1, #4
 80113f4:	4d3e      	ldr	r5, [pc, #248]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80113f6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80113f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80113fa:	430b      	orrs	r3, r1
 80113fc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80113fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011400:	431a      	orrs	r2, r3
 8011402:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011404:	f7fe f928 	bl	800f658 <HAL_GetTick>
 8011408:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801140a:	e005      	b.n	8011418 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801140c:	f7fe f924 	bl	800f658 <HAL_GetTick>
 8011410:	1bc0      	subs	r0, r0, r7
 8011412:	2864      	cmp	r0, #100	; 0x64
 8011414:	d900      	bls.n	8011418 <HAL_RCC_OscConfig+0x454>
 8011416:	e742      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011418:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801141a:	421e      	tst	r6, r3
 801141c:	d0f6      	beq.n	801140c <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801141e:	21f8      	movs	r1, #248	; 0xf8
 8011420:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011422:	69a3      	ldr	r3, [r4, #24]
 8011424:	438a      	bics	r2, r1
 8011426:	00db      	lsls	r3, r3, #3
 8011428:	4313      	orrs	r3, r2
 801142a:	636b      	str	r3, [r5, #52]	; 0x34
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	e662      	b.n	80110f6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	4a32      	ldr	r2, [pc, #200]	; (80114fc <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011434:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011436:	4013      	ands	r3, r2
 8011438:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801143a:	f7fe f90d 	bl	800f658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801143e:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8011440:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011442:	e005      	b.n	8011450 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011444:	f7fe f908 	bl	800f658 <HAL_GetTick>
 8011448:	1bc0      	subs	r0, r0, r7
 801144a:	2864      	cmp	r0, #100	; 0x64
 801144c:	d900      	bls.n	8011450 <HAL_RCC_OscConfig+0x48c>
 801144e:	e726      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011450:	682b      	ldr	r3, [r5, #0]
 8011452:	4233      	tst	r3, r6
 8011454:	d1f6      	bne.n	8011444 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011456:	220f      	movs	r2, #15
 8011458:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801145a:	4393      	bics	r3, r2
 801145c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801145e:	4313      	orrs	r3, r2
 8011460:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011462:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011466:	686a      	ldr	r2, [r5, #4]
 8011468:	430b      	orrs	r3, r1
 801146a:	4925      	ldr	r1, [pc, #148]	; (8011500 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801146c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801146e:	400a      	ands	r2, r1
 8011470:	4313      	orrs	r3, r2
 8011472:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011474:	2380      	movs	r3, #128	; 0x80
 8011476:	682a      	ldr	r2, [r5, #0]
 8011478:	045b      	lsls	r3, r3, #17
 801147a:	4313      	orrs	r3, r2
 801147c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801147e:	f7fe f8eb 	bl	800f658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011482:	4d1b      	ldr	r5, [pc, #108]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8011484:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011486:	04a4      	lsls	r4, r4, #18
 8011488:	e005      	b.n	8011496 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801148a:	f7fe f8e5 	bl	800f658 <HAL_GetTick>
 801148e:	1b80      	subs	r0, r0, r6
 8011490:	2864      	cmp	r0, #100	; 0x64
 8011492:	d900      	bls.n	8011496 <HAL_RCC_OscConfig+0x4d2>
 8011494:	e703      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011496:	682b      	ldr	r3, [r5, #0]
 8011498:	4223      	tst	r3, r4
 801149a:	d0f6      	beq.n	801148a <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 801149c:	2000      	movs	r0, #0
 801149e:	e6ff      	b.n	80112a0 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114a0:	2201      	movs	r2, #1
 80114a2:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114a4:	4e12      	ldr	r6, [pc, #72]	; (80114f0 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114a6:	4393      	bics	r3, r2
 80114a8:	622b      	str	r3, [r5, #32]
 80114aa:	6a2b      	ldr	r3, [r5, #32]
 80114ac:	3203      	adds	r2, #3
 80114ae:	4393      	bics	r3, r2
 80114b0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80114b2:	f7fe f8d1 	bl	800f658 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114b6:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 80114b8:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114ba:	4f12      	ldr	r7, [pc, #72]	; (8011504 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114bc:	e006      	b.n	80114cc <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114be:	f7fe f8cb 	bl	800f658 <HAL_GetTick>
 80114c2:	4643      	mov	r3, r8
 80114c4:	1ac0      	subs	r0, r0, r3
 80114c6:	42b8      	cmp	r0, r7
 80114c8:	d900      	bls.n	80114cc <HAL_RCC_OscConfig+0x508>
 80114ca:	e6e8      	b.n	801129e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114cc:	6a33      	ldr	r3, [r6, #32]
 80114ce:	421d      	tst	r5, r3
 80114d0:	d1f5      	bne.n	80114be <HAL_RCC_OscConfig+0x4fa>
 80114d2:	6823      	ldr	r3, [r4, #0]
 80114d4:	e5fa      	b.n	80110cc <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114d6:	6a2a      	ldr	r2, [r5, #32]
 80114d8:	4313      	orrs	r3, r2
 80114da:	622b      	str	r3, [r5, #32]
 80114dc:	e6b1      	b.n	8011242 <HAL_RCC_OscConfig+0x27e>
 80114de:	2204      	movs	r2, #4
 80114e0:	6a2b      	ldr	r3, [r5, #32]
 80114e2:	4313      	orrs	r3, r2
 80114e4:	622b      	str	r3, [r5, #32]
 80114e6:	6a2b      	ldr	r3, [r5, #32]
 80114e8:	3a03      	subs	r2, #3
 80114ea:	4313      	orrs	r3, r2
 80114ec:	622b      	str	r3, [r5, #32]
 80114ee:	e6a8      	b.n	8011242 <HAL_RCC_OscConfig+0x27e>
 80114f0:	40021000 	.word	0x40021000
 80114f4:	fffeffff 	.word	0xfffeffff
 80114f8:	fffbffff 	.word	0xfffbffff
 80114fc:	feffffff 	.word	0xfeffffff
 8011500:	ffc27fff 	.word	0xffc27fff
 8011504:	00001388 	.word	0x00001388

08011508 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150a:	46ce      	mov	lr, r9
 801150c:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801150e:	2301      	movs	r3, #1
{
 8011510:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011512:	4985      	ldr	r1, [pc, #532]	; (8011728 <HAL_RCC_ClockConfig+0x220>)
{
 8011514:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011516:	680a      	ldr	r2, [r1, #0]
{
 8011518:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801151a:	401a      	ands	r2, r3
 801151c:	42a2      	cmp	r2, r4
 801151e:	d20c      	bcs.n	801153a <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011520:	680a      	ldr	r2, [r1, #0]
 8011522:	439a      	bics	r2, r3
 8011524:	4322      	orrs	r2, r4
 8011526:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011528:	680a      	ldr	r2, [r1, #0]
 801152a:	4013      	ands	r3, r2
 801152c:	42a3      	cmp	r3, r4
 801152e:	d054      	beq.n	80115da <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8011530:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011532:	bc0c      	pop	{r2, r3}
 8011534:	4690      	mov	r8, r2
 8011536:	4699      	mov	r9, r3
 8011538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801153a:	6803      	ldr	r3, [r0, #0]
 801153c:	079a      	lsls	r2, r3, #30
 801153e:	d506      	bpl.n	801154e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011540:	20f0      	movs	r0, #240	; 0xf0
 8011542:	497a      	ldr	r1, [pc, #488]	; (801172c <HAL_RCC_ClockConfig+0x224>)
 8011544:	684a      	ldr	r2, [r1, #4]
 8011546:	4382      	bics	r2, r0
 8011548:	68a8      	ldr	r0, [r5, #8]
 801154a:	4302      	orrs	r2, r0
 801154c:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801154e:	07db      	lsls	r3, r3, #31
 8011550:	d52a      	bpl.n	80115a8 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011552:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011554:	4a75      	ldr	r2, [pc, #468]	; (801172c <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011556:	2b01      	cmp	r3, #1
 8011558:	d073      	beq.n	8011642 <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801155a:	2b02      	cmp	r3, #2
 801155c:	d075      	beq.n	801164a <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801155e:	2b03      	cmp	r3, #3
 8011560:	d100      	bne.n	8011564 <HAL_RCC_ClockConfig+0x5c>
 8011562:	e09c      	b.n	801169e <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011564:	6812      	ldr	r2, [r2, #0]
 8011566:	0792      	lsls	r2, r2, #30
 8011568:	d5e2      	bpl.n	8011530 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801156a:	2103      	movs	r1, #3
 801156c:	4e6f      	ldr	r6, [pc, #444]	; (801172c <HAL_RCC_ClockConfig+0x224>)
 801156e:	6872      	ldr	r2, [r6, #4]
 8011570:	438a      	bics	r2, r1
 8011572:	4313      	orrs	r3, r2
 8011574:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8011576:	f7fe f86f 	bl	800f658 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801157a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 801157c:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801157e:	2b01      	cmp	r3, #1
 8011580:	d07d      	beq.n	801167e <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011582:	2b02      	cmp	r3, #2
 8011584:	d100      	bne.n	8011588 <HAL_RCC_ClockConfig+0x80>
 8011586:	e093      	b.n	80116b0 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011588:	2b03      	cmp	r3, #3
 801158a:	d066      	beq.n	801165a <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801158c:	230c      	movs	r3, #12
 801158e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011590:	4b67      	ldr	r3, [pc, #412]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 8011592:	4699      	mov	r9, r3
 8011594:	e004      	b.n	80115a0 <HAL_RCC_ClockConfig+0x98>
 8011596:	f7fe f85f 	bl	800f658 <HAL_GetTick>
 801159a:	1bc0      	subs	r0, r0, r7
 801159c:	4548      	cmp	r0, r9
 801159e:	d86c      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115a0:	4642      	mov	r2, r8
 80115a2:	6873      	ldr	r3, [r6, #4]
 80115a4:	421a      	tst	r2, r3
 80115a6:	d1f6      	bne.n	8011596 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80115a8:	2201      	movs	r2, #1
 80115aa:	495f      	ldr	r1, [pc, #380]	; (8011728 <HAL_RCC_ClockConfig+0x220>)
 80115ac:	680b      	ldr	r3, [r1, #0]
 80115ae:	4393      	bics	r3, r2
 80115b0:	4323      	orrs	r3, r4
 80115b2:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80115b4:	680b      	ldr	r3, [r1, #0]
 80115b6:	401a      	ands	r2, r3
 80115b8:	42a2      	cmp	r2, r4
 80115ba:	d1b9      	bne.n	8011530 <HAL_RCC_ClockConfig+0x28>
 80115bc:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115be:	075b      	lsls	r3, r3, #29
 80115c0:	d506      	bpl.n	80115d0 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80115c2:	4a5a      	ldr	r2, [pc, #360]	; (801172c <HAL_RCC_ClockConfig+0x224>)
 80115c4:	495b      	ldr	r1, [pc, #364]	; (8011734 <HAL_RCC_ClockConfig+0x22c>)
 80115c6:	6853      	ldr	r3, [r2, #4]
 80115c8:	400b      	ands	r3, r1
 80115ca:	68e9      	ldr	r1, [r5, #12]
 80115cc:	430b      	orrs	r3, r1
 80115ce:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80115d0:	2000      	movs	r0, #0
 80115d2:	f7fe f817 	bl	800f604 <HAL_InitTick>
  return HAL_OK;
 80115d6:	2000      	movs	r0, #0
 80115d8:	e7ab      	b.n	8011532 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80115da:	6803      	ldr	r3, [r0, #0]
 80115dc:	079a      	lsls	r2, r3, #30
 80115de:	d506      	bpl.n	80115ee <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80115e0:	20f0      	movs	r0, #240	; 0xf0
 80115e2:	4952      	ldr	r1, [pc, #328]	; (801172c <HAL_RCC_ClockConfig+0x224>)
 80115e4:	684a      	ldr	r2, [r1, #4]
 80115e6:	4382      	bics	r2, r0
 80115e8:	68a8      	ldr	r0, [r5, #8]
 80115ea:	4302      	orrs	r2, r0
 80115ec:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80115ee:	07da      	lsls	r2, r3, #31
 80115f0:	d5e5      	bpl.n	80115be <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80115f2:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80115f4:	4a4d      	ldr	r2, [pc, #308]	; (801172c <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d056      	beq.n	80116a8 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	d029      	beq.n	8011652 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80115fe:	2b03      	cmp	r3, #3
 8011600:	d073      	beq.n	80116ea <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011602:	6812      	ldr	r2, [r2, #0]
 8011604:	0792      	lsls	r2, r2, #30
 8011606:	d593      	bpl.n	8011530 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011608:	2103      	movs	r1, #3
 801160a:	4c48      	ldr	r4, [pc, #288]	; (801172c <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801160c:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801160e:	6862      	ldr	r2, [r4, #4]
 8011610:	438a      	bics	r2, r1
 8011612:	4313      	orrs	r3, r2
 8011614:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8011616:	f7fe f81f 	bl	800f658 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801161a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 801161c:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801161e:	2b01      	cmp	r3, #1
 8011620:	d056      	beq.n	80116d0 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011622:	2b02      	cmp	r3, #2
 8011624:	d065      	beq.n	80116f2 <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011626:	2b03      	cmp	r3, #3
 8011628:	d070      	beq.n	801170c <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801162a:	4b41      	ldr	r3, [pc, #260]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 801162c:	4698      	mov	r8, r3
 801162e:	e004      	b.n	801163a <HAL_RCC_ClockConfig+0x132>
 8011630:	f7fe f812 	bl	800f658 <HAL_GetTick>
 8011634:	1b80      	subs	r0, r0, r6
 8011636:	4540      	cmp	r0, r8
 8011638:	d81f      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801163a:	6863      	ldr	r3, [r4, #4]
 801163c:	421f      	tst	r7, r3
 801163e:	d1f7      	bne.n	8011630 <HAL_RCC_ClockConfig+0x128>
 8011640:	e7bc      	b.n	80115bc <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011642:	6812      	ldr	r2, [r2, #0]
 8011644:	0392      	lsls	r2, r2, #14
 8011646:	d490      	bmi.n	801156a <HAL_RCC_ClockConfig+0x62>
 8011648:	e772      	b.n	8011530 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801164a:	6812      	ldr	r2, [r2, #0]
 801164c:	0192      	lsls	r2, r2, #6
 801164e:	d48c      	bmi.n	801156a <HAL_RCC_ClockConfig+0x62>
 8011650:	e76e      	b.n	8011530 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011652:	6812      	ldr	r2, [r2, #0]
 8011654:	0192      	lsls	r2, r2, #6
 8011656:	d4d7      	bmi.n	8011608 <HAL_RCC_ClockConfig+0x100>
 8011658:	e76a      	b.n	8011530 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801165a:	3309      	adds	r3, #9
 801165c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801165e:	4b34      	ldr	r3, [pc, #208]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 8011660:	4699      	mov	r9, r3
 8011662:	e004      	b.n	801166e <HAL_RCC_ClockConfig+0x166>
 8011664:	f7fd fff8 	bl	800f658 <HAL_GetTick>
 8011668:	1bc0      	subs	r0, r0, r7
 801166a:	4548      	cmp	r0, r9
 801166c:	d805      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801166e:	4642      	mov	r2, r8
 8011670:	6873      	ldr	r3, [r6, #4]
 8011672:	4013      	ands	r3, r2
 8011674:	2b0c      	cmp	r3, #12
 8011676:	d1f5      	bne.n	8011664 <HAL_RCC_ClockConfig+0x15c>
 8011678:	e796      	b.n	80115a8 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 801167a:	2003      	movs	r0, #3
 801167c:	e759      	b.n	8011532 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801167e:	330b      	adds	r3, #11
 8011680:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011682:	4b2b      	ldr	r3, [pc, #172]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 8011684:	4699      	mov	r9, r3
 8011686:	e004      	b.n	8011692 <HAL_RCC_ClockConfig+0x18a>
 8011688:	f7fd ffe6 	bl	800f658 <HAL_GetTick>
 801168c:	1bc0      	subs	r0, r0, r7
 801168e:	4548      	cmp	r0, r9
 8011690:	d8f3      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011692:	4642      	mov	r2, r8
 8011694:	6873      	ldr	r3, [r6, #4]
 8011696:	4013      	ands	r3, r2
 8011698:	2b04      	cmp	r3, #4
 801169a:	d1f5      	bne.n	8011688 <HAL_RCC_ClockConfig+0x180>
 801169c:	e784      	b.n	80115a8 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801169e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80116a0:	03d2      	lsls	r2, r2, #15
 80116a2:	d500      	bpl.n	80116a6 <HAL_RCC_ClockConfig+0x19e>
 80116a4:	e761      	b.n	801156a <HAL_RCC_ClockConfig+0x62>
 80116a6:	e743      	b.n	8011530 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116a8:	6812      	ldr	r2, [r2, #0]
 80116aa:	0392      	lsls	r2, r2, #14
 80116ac:	d4ac      	bmi.n	8011608 <HAL_RCC_ClockConfig+0x100>
 80116ae:	e73f      	b.n	8011530 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80116b0:	330a      	adds	r3, #10
 80116b2:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116b4:	4b1e      	ldr	r3, [pc, #120]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 80116b6:	4699      	mov	r9, r3
 80116b8:	e004      	b.n	80116c4 <HAL_RCC_ClockConfig+0x1bc>
 80116ba:	f7fd ffcd 	bl	800f658 <HAL_GetTick>
 80116be:	1bc0      	subs	r0, r0, r7
 80116c0:	4548      	cmp	r0, r9
 80116c2:	d8da      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80116c4:	4642      	mov	r2, r8
 80116c6:	6873      	ldr	r3, [r6, #4]
 80116c8:	4013      	ands	r3, r2
 80116ca:	2b08      	cmp	r3, #8
 80116cc:	d1f5      	bne.n	80116ba <HAL_RCC_ClockConfig+0x1b2>
 80116ce:	e76b      	b.n	80115a8 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116d0:	4b17      	ldr	r3, [pc, #92]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 80116d2:	4698      	mov	r8, r3
 80116d4:	e004      	b.n	80116e0 <HAL_RCC_ClockConfig+0x1d8>
 80116d6:	f7fd ffbf 	bl	800f658 <HAL_GetTick>
 80116da:	1b80      	subs	r0, r0, r6
 80116dc:	4540      	cmp	r0, r8
 80116de:	d8cc      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80116e0:	6863      	ldr	r3, [r4, #4]
 80116e2:	403b      	ands	r3, r7
 80116e4:	2b04      	cmp	r3, #4
 80116e6:	d1f6      	bne.n	80116d6 <HAL_RCC_ClockConfig+0x1ce>
 80116e8:	e768      	b.n	80115bc <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80116ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80116ec:	03d2      	lsls	r2, r2, #15
 80116ee:	d48b      	bmi.n	8011608 <HAL_RCC_ClockConfig+0x100>
 80116f0:	e71e      	b.n	8011530 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116f2:	4b0f      	ldr	r3, [pc, #60]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 80116f4:	4698      	mov	r8, r3
 80116f6:	e004      	b.n	8011702 <HAL_RCC_ClockConfig+0x1fa>
 80116f8:	f7fd ffae 	bl	800f658 <HAL_GetTick>
 80116fc:	1b80      	subs	r0, r0, r6
 80116fe:	4540      	cmp	r0, r8
 8011700:	d8bb      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011702:	6863      	ldr	r3, [r4, #4]
 8011704:	403b      	ands	r3, r7
 8011706:	2b08      	cmp	r3, #8
 8011708:	d1f6      	bne.n	80116f8 <HAL_RCC_ClockConfig+0x1f0>
 801170a:	e757      	b.n	80115bc <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801170c:	4b08      	ldr	r3, [pc, #32]	; (8011730 <HAL_RCC_ClockConfig+0x228>)
 801170e:	4698      	mov	r8, r3
 8011710:	e004      	b.n	801171c <HAL_RCC_ClockConfig+0x214>
 8011712:	f7fd ffa1 	bl	800f658 <HAL_GetTick>
 8011716:	1b80      	subs	r0, r0, r6
 8011718:	4540      	cmp	r0, r8
 801171a:	d8ae      	bhi.n	801167a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801171c:	6863      	ldr	r3, [r4, #4]
 801171e:	403b      	ands	r3, r7
 8011720:	2b0c      	cmp	r3, #12
 8011722:	d1f6      	bne.n	8011712 <HAL_RCC_ClockConfig+0x20a>
 8011724:	e74a      	b.n	80115bc <HAL_RCC_ClockConfig+0xb4>
 8011726:	46c0      	nop			; (mov r8, r8)
 8011728:	40022000 	.word	0x40022000
 801172c:	40021000 	.word	0x40021000
 8011730:	00001388 	.word	0x00001388
 8011734:	fffff8ff 	.word	0xfffff8ff

08011738 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011738:	b570      	push	{r4, r5, r6, lr}
 801173a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 801173c:	4669      	mov	r1, sp
 801173e:	4b1c      	ldr	r3, [pc, #112]	; (80117b0 <HAL_RCC_GetSysClockFreq+0x78>)
 8011740:	000a      	movs	r2, r1
 8011742:	0018      	movs	r0, r3
 8011744:	c870      	ldmia	r0!, {r4, r5, r6}
 8011746:	c270      	stmia	r2!, {r4, r5, r6}
 8011748:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801174a:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 801174c:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801174e:	aa04      	add	r2, sp, #16
 8011750:	0010      	movs	r0, r2
 8011752:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011754:	c070      	stmia	r0!, {r4, r5, r6}
 8011756:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011758:	4d16      	ldr	r5, [pc, #88]	; (80117b4 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801175a:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801175c:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 801175e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011760:	4018      	ands	r0, r3
 8011762:	2808      	cmp	r0, #8
 8011764:	d00a      	beq.n	801177c <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011766:	380c      	subs	r0, #12
 8011768:	4243      	negs	r3, r0
 801176a:	4158      	adcs	r0, r3
 801176c:	4b12      	ldr	r3, [pc, #72]	; (80117b8 <HAL_RCC_GetSysClockFreq+0x80>)
 801176e:	4240      	negs	r0, r0
 8011770:	4018      	ands	r0, r3
 8011772:	4b12      	ldr	r3, [pc, #72]	; (80117bc <HAL_RCC_GetSysClockFreq+0x84>)
 8011774:	469c      	mov	ip, r3
 8011776:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011778:	b008      	add	sp, #32
 801177a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 801177c:	200f      	movs	r0, #15
 801177e:	0c9c      	lsrs	r4, r3, #18
 8011780:	4004      	ands	r4, r0
 8011782:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011784:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011786:	4008      	ands	r0, r1
 8011788:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801178a:	22c0      	movs	r2, #192	; 0xc0
 801178c:	2080      	movs	r0, #128	; 0x80
 801178e:	0252      	lsls	r2, r2, #9
 8011790:	4013      	ands	r3, r2
 8011792:	0240      	lsls	r0, r0, #9
 8011794:	4283      	cmp	r3, r0
 8011796:	d001      	beq.n	801179c <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011798:	4293      	cmp	r3, r2
 801179a:	d004      	beq.n	80117a6 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 801179c:	4807      	ldr	r0, [pc, #28]	; (80117bc <HAL_RCC_GetSysClockFreq+0x84>)
 801179e:	f7ee fcd7 	bl	8000150 <__udivsi3>
 80117a2:	4360      	muls	r0, r4
 80117a4:	e7e8      	b.n	8011778 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80117a6:	4806      	ldr	r0, [pc, #24]	; (80117c0 <HAL_RCC_GetSysClockFreq+0x88>)
 80117a8:	f7ee fcd2 	bl	8000150 <__udivsi3>
 80117ac:	4360      	muls	r0, r4
 80117ae:	e7e3      	b.n	8011778 <HAL_RCC_GetSysClockFreq+0x40>
 80117b0:	08017e24 	.word	0x08017e24
 80117b4:	40021000 	.word	0x40021000
 80117b8:	02625a00 	.word	0x02625a00
 80117bc:	007a1200 	.word	0x007a1200
 80117c0:	02dc6c00 	.word	0x02dc6c00

080117c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80117c4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80117c6:	f7ff ffb7 	bl	8011738 <HAL_RCC_GetSysClockFreq>
 80117ca:	4b05      	ldr	r3, [pc, #20]	; (80117e0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80117cc:	4a05      	ldr	r2, [pc, #20]	; (80117e4 <HAL_RCC_GetHCLKFreq+0x20>)
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	3220      	adds	r2, #32
 80117d2:	061b      	lsls	r3, r3, #24
 80117d4:	0f1b      	lsrs	r3, r3, #28
 80117d6:	5cd3      	ldrb	r3, [r2, r3]
 80117d8:	40d8      	lsrs	r0, r3
 80117da:	4b03      	ldr	r3, [pc, #12]	; (80117e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80117dc:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80117de:	bd10      	pop	{r4, pc}
 80117e0:	40021000 	.word	0x40021000
 80117e4:	08017e24 	.word	0x08017e24
 80117e8:	200000b0 	.word	0x200000b0

080117ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80117ec:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80117ee:	f7ff ffa3 	bl	8011738 <HAL_RCC_GetSysClockFreq>
 80117f2:	4908      	ldr	r1, [pc, #32]	; (8011814 <HAL_RCC_GetPCLK1Freq+0x28>)
 80117f4:	4a08      	ldr	r2, [pc, #32]	; (8011818 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80117f6:	684b      	ldr	r3, [r1, #4]
 80117f8:	3220      	adds	r2, #32
 80117fa:	061b      	lsls	r3, r3, #24
 80117fc:	0f1b      	lsrs	r3, r3, #28
 80117fe:	5cd3      	ldrb	r3, [r2, r3]
 8011800:	40d8      	lsrs	r0, r3
 8011802:	4b06      	ldr	r3, [pc, #24]	; (801181c <HAL_RCC_GetPCLK1Freq+0x30>)
 8011804:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011806:	684b      	ldr	r3, [r1, #4]
 8011808:	055b      	lsls	r3, r3, #21
 801180a:	0f5b      	lsrs	r3, r3, #29
 801180c:	5cd3      	ldrb	r3, [r2, r3]
 801180e:	40d8      	lsrs	r0, r3
}    
 8011810:	bd10      	pop	{r4, pc}
 8011812:	46c0      	nop			; (mov r8, r8)
 8011814:	40021000 	.word	0x40021000
 8011818:	08017e24 	.word	0x08017e24
 801181c:	200000b0 	.word	0x200000b0

08011820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011822:	46c6      	mov	lr, r8
 8011824:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011826:	6803      	ldr	r3, [r0, #0]
{
 8011828:	b082      	sub	sp, #8
 801182a:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801182c:	03da      	lsls	r2, r3, #15
 801182e:	d507      	bpl.n	8011840 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011830:	493e      	ldr	r1, [pc, #248]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011832:	6840      	ldr	r0, [r0, #4]
 8011834:	6a0a      	ldr	r2, [r1, #32]
 8011836:	4042      	eors	r2, r0
 8011838:	20c0      	movs	r0, #192	; 0xc0
 801183a:	0080      	lsls	r0, r0, #2
 801183c:	4202      	tst	r2, r0
 801183e:	d131      	bne.n	80118a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011840:	07da      	lsls	r2, r3, #31
 8011842:	d506      	bpl.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011844:	2003      	movs	r0, #3
 8011846:	4939      	ldr	r1, [pc, #228]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011848:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801184a:	4382      	bics	r2, r0
 801184c:	68a0      	ldr	r0, [r4, #8]
 801184e:	4302      	orrs	r2, r0
 8011850:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011852:	079a      	lsls	r2, r3, #30
 8011854:	d506      	bpl.n	8011864 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011856:	4935      	ldr	r1, [pc, #212]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011858:	4835      	ldr	r0, [pc, #212]	; (8011930 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 801185a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801185c:	4002      	ands	r2, r0
 801185e:	68e0      	ldr	r0, [r4, #12]
 8011860:	4302      	orrs	r2, r0
 8011862:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011864:	035a      	lsls	r2, r3, #13
 8011866:	d506      	bpl.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011868:	4930      	ldr	r1, [pc, #192]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801186a:	4832      	ldr	r0, [pc, #200]	; (8011934 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801186c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801186e:	4002      	ands	r2, r0
 8011870:	6920      	ldr	r0, [r4, #16]
 8011872:	4302      	orrs	r2, r0
 8011874:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011876:	069a      	lsls	r2, r3, #26
 8011878:	d506      	bpl.n	8011888 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801187a:	2010      	movs	r0, #16
 801187c:	492b      	ldr	r1, [pc, #172]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801187e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011880:	4382      	bics	r2, r0
 8011882:	6960      	ldr	r0, [r4, #20]
 8011884:	4302      	orrs	r2, r0
 8011886:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011888:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801188a:	055b      	lsls	r3, r3, #21
 801188c:	d506      	bpl.n	801189c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801188e:	2140      	movs	r1, #64	; 0x40
 8011890:	4a26      	ldr	r2, [pc, #152]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011892:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011894:	438b      	bics	r3, r1
 8011896:	69a1      	ldr	r1, [r4, #24]
 8011898:	430b      	orrs	r3, r1
 801189a:	6313      	str	r3, [r2, #48]	; 0x30
}
 801189c:	b002      	add	sp, #8
 801189e:	bc04      	pop	{r2}
 80118a0:	4690      	mov	r8, r2
 80118a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80118a4:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80118a6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80118a8:	69ca      	ldr	r2, [r1, #28]
 80118aa:	0540      	lsls	r0, r0, #21
 80118ac:	4302      	orrs	r2, r0
 80118ae:	61ca      	str	r2, [r1, #28]
 80118b0:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80118b2:	4d21      	ldr	r5, [pc, #132]	; (8011938 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80118b4:	4003      	ands	r3, r0
 80118b6:	9301      	str	r3, [sp, #4]
 80118b8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80118ba:	682b      	ldr	r3, [r5, #0]
 80118bc:	0076      	lsls	r6, r6, #1
 80118be:	4333      	orrs	r3, r6
 80118c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80118c2:	f7fd fec9 	bl	800f658 <HAL_GetTick>
 80118c6:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80118c8:	e004      	b.n	80118d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80118ca:	f7fd fec5 	bl	800f658 <HAL_GetTick>
 80118ce:	1bc0      	subs	r0, r0, r7
 80118d0:	2864      	cmp	r0, #100	; 0x64
 80118d2:	d829      	bhi.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	4233      	tst	r3, r6
 80118d8:	d0f7      	beq.n	80118ca <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 80118da:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80118dc:	4d13      	ldr	r5, [pc, #76]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80118de:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80118e0:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80118e2:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80118e4:	4b15      	ldr	r3, [pc, #84]	; (801193c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80118e6:	4302      	orrs	r2, r0
 80118e8:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80118ea:	6a2a      	ldr	r2, [r5, #32]
 80118ec:	4814      	ldr	r0, [pc, #80]	; (8011940 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80118ee:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80118f0:	4002      	ands	r2, r0
 80118f2:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 80118f4:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80118f6:	078b      	lsls	r3, r1, #30
 80118f8:	d408      	bmi.n	801190c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80118fa:	4a0c      	ldr	r2, [pc, #48]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80118fc:	490f      	ldr	r1, [pc, #60]	; (801193c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80118fe:	6a13      	ldr	r3, [r2, #32]
 8011900:	400b      	ands	r3, r1
 8011902:	6861      	ldr	r1, [r4, #4]
 8011904:	430b      	orrs	r3, r1
 8011906:	6213      	str	r3, [r2, #32]
 8011908:	6823      	ldr	r3, [r4, #0]
 801190a:	e799      	b.n	8011840 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801190c:	f7fd fea4 	bl	800f658 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011910:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8011912:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011914:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011916:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011918:	6a2b      	ldr	r3, [r5, #32]
 801191a:	421e      	tst	r6, r3
 801191c:	d1ed      	bne.n	80118fa <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801191e:	f7fd fe9b 	bl	800f658 <HAL_GetTick>
 8011922:	1bc0      	subs	r0, r0, r7
 8011924:	4540      	cmp	r0, r8
 8011926:	d9f7      	bls.n	8011918 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011928:	2003      	movs	r0, #3
 801192a:	e7b7      	b.n	801189c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801192c:	40021000 	.word	0x40021000
 8011930:	fffcffff 	.word	0xfffcffff
 8011934:	fff3ffff 	.word	0xfff3ffff
 8011938:	40007000 	.word	0x40007000
 801193c:	fffffcff 	.word	0xfffffcff
 8011940:	fffeffff 	.word	0xfffeffff
 8011944:	00001388 	.word	0x00001388

08011948 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011948:	4770      	bx	lr
 801194a:	46c0      	nop			; (mov r8, r8)

0801194c <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801194c:	6803      	ldr	r3, [r0, #0]
{
 801194e:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011950:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011952:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011954:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011956:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011958:	681c      	ldr	r4, [r3, #0]
 801195a:	4b13      	ldr	r3, [pc, #76]	; (80119a8 <HAL_RTC_GetTime+0x5c>)
 801195c:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801195e:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011960:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011962:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011964:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011966:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011968:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801196a:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801196c:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801196e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011970:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011972:	2a00      	cmp	r2, #0
 8011974:	d115      	bne.n	80119a2 <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011976:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011978:	0900      	lsrs	r0, r0, #4
 801197a:	0082      	lsls	r2, r0, #2
 801197c:	1810      	adds	r0, r2, r0
 801197e:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011980:	4035      	ands	r5, r6
 8011982:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011984:	0918      	lsrs	r0, r3, #4
 8011986:	0082      	lsls	r2, r0, #2
 8011988:	1812      	adds	r2, r2, r0
 801198a:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801198c:	4033      	ands	r3, r6
 801198e:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011990:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011992:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011994:	0093      	lsls	r3, r2, #2
 8011996:	189b      	adds	r3, r3, r2
 8011998:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801199a:	4034      	ands	r4, r6
 801199c:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801199e:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80119a0:	708c      	strb	r4, [r1, #2]
}
 80119a2:	2000      	movs	r0, #0
 80119a4:	bd70      	pop	{r4, r5, r6, pc}
 80119a6:	46c0      	nop			; (mov r8, r8)
 80119a8:	007f7f7f 	.word	0x007f7f7f

080119ac <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80119ac:	6803      	ldr	r3, [r0, #0]
 80119ae:	4815      	ldr	r0, [pc, #84]	; (8011a04 <HAL_RTC_GetDate+0x58>)
 80119b0:	685b      	ldr	r3, [r3, #4]
{
 80119b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80119b4:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80119b6:	201f      	movs	r0, #31
 80119b8:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80119ba:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80119bc:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80119be:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80119c0:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80119c2:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80119c4:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80119c6:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80119c8:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80119ca:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80119cc:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80119ce:	2a00      	cmp	r2, #0
 80119d0:	d115      	bne.n	80119fe <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80119d2:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80119d4:	093b      	lsrs	r3, r7, #4
 80119d6:	009a      	lsls	r2, r3, #2
 80119d8:	18d2      	adds	r2, r2, r3
 80119da:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80119dc:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80119de:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80119e0:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80119e2:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80119e4:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80119e6:	092a      	lsrs	r2, r5, #4
 80119e8:	18c0      	adds	r0, r0, r3
 80119ea:	0093      	lsls	r3, r2, #2
 80119ec:	189b      	adds	r3, r3, r2
 80119ee:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80119f0:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80119f2:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80119f4:	4035      	ands	r5, r6
 80119f6:	1904      	adds	r4, r0, r4
 80119f8:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80119fa:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80119fc:	708b      	strb	r3, [r1, #2]
}
 80119fe:	2000      	movs	r0, #0
 8011a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a02:	46c0      	nop			; (mov r8, r8)
 8011a04:	00ffff3f 	.word	0x00ffff3f

08011a08 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011a08:	21a0      	movs	r1, #160	; 0xa0
 8011a0a:	6802      	ldr	r2, [r0, #0]
{
 8011a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011a0e:	68d3      	ldr	r3, [r2, #12]
{
 8011a10:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011a12:	438b      	bics	r3, r1
 8011a14:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8011a16:	f7fd fe1f 	bl	800f658 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a1a:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8011a1c:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011a1e:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a20:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011a22:	e004      	b.n	8011a2e <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a24:	f7fd fe18 	bl	800f658 <HAL_GetTick>
 8011a28:	1bc0      	subs	r0, r0, r7
 8011a2a:	42b0      	cmp	r0, r6
 8011a2c:	d805      	bhi.n	8011a3a <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011a2e:	6823      	ldr	r3, [r4, #0]
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	421d      	tst	r5, r3
 8011a34:	d0f6      	beq.n	8011a24 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8011a36:	2000      	movs	r0, #0
}
 8011a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8011a3a:	2003      	movs	r0, #3
 8011a3c:	e7fc      	b.n	8011a38 <HAL_RTC_WaitForSynchro+0x30>
 8011a3e:	46c0      	nop			; (mov r8, r8)

08011a40 <RTC_EnterInitMode>:
{
 8011a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011a42:	6803      	ldr	r3, [r0, #0]
{
 8011a44:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011a46:	68da      	ldr	r2, [r3, #12]
 8011a48:	0652      	lsls	r2, r2, #25
 8011a4a:	d501      	bpl.n	8011a50 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8011a4c:	2000      	movs	r0, #0
}
 8011a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011a50:	2201      	movs	r2, #1
 8011a52:	4252      	negs	r2, r2
 8011a54:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011a56:	f7fd fdff 	bl	800f658 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a5a:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8011a5c:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011a5e:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a60:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011a62:	e004      	b.n	8011a6e <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a64:	f7fd fdf8 	bl	800f658 <HAL_GetTick>
 8011a68:	1bc0      	subs	r0, r0, r7
 8011a6a:	42b0      	cmp	r0, r6
 8011a6c:	d804      	bhi.n	8011a78 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011a6e:	6823      	ldr	r3, [r4, #0]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	421d      	tst	r5, r3
 8011a74:	d0f6      	beq.n	8011a64 <RTC_EnterInitMode+0x24>
 8011a76:	e7e9      	b.n	8011a4c <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011a78:	2003      	movs	r0, #3
 8011a7a:	e7e8      	b.n	8011a4e <RTC_EnterInitMode+0xe>

08011a7c <HAL_RTC_Init>:
{
 8011a7c:	b570      	push	{r4, r5, r6, lr}
 8011a7e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011a80:	d03e      	beq.n	8011b00 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a82:	7f43      	ldrb	r3, [r0, #29]
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d036      	beq.n	8011af8 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011a8a:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a8c:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011a8e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a90:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011a92:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a94:	625a      	str	r2, [r3, #36]	; 0x24
 8011a96:	3a77      	subs	r2, #119	; 0x77
 8011a98:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011a9a:	f7ff ffd1 	bl	8011a40 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a9e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d123      	bne.n	8011aec <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011aa4:	689a      	ldr	r2, [r3, #8]
 8011aa6:	4917      	ldr	r1, [pc, #92]	; (8011b04 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011aa8:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011aaa:	400a      	ands	r2, r1
 8011aac:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011aae:	6862      	ldr	r2, [r4, #4]
 8011ab0:	6899      	ldr	r1, [r3, #8]
 8011ab2:	432a      	orrs	r2, r5
 8011ab4:	6965      	ldr	r5, [r4, #20]
 8011ab6:	432a      	orrs	r2, r5
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011abc:	68e2      	ldr	r2, [r4, #12]
 8011abe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011ac0:	68a2      	ldr	r2, [r4, #8]
 8011ac2:	6919      	ldr	r1, [r3, #16]
 8011ac4:	0412      	lsls	r2, r2, #16
 8011ac6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011ac8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011aca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011acc:	68da      	ldr	r2, [r3, #12]
 8011ace:	438a      	bics	r2, r1
 8011ad0:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ad4:	490c      	ldr	r1, [pc, #48]	; (8011b08 <HAL_RTC_Init+0x8c>)
 8011ad6:	400a      	ands	r2, r1
 8011ad8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011adc:	69a1      	ldr	r1, [r4, #24]
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ae2:	22ff      	movs	r2, #255	; 0xff
 8011ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	7763      	strb	r3, [r4, #29]
}
 8011aea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011aec:	22ff      	movs	r2, #255	; 0xff
 8011aee:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011af0:	2304      	movs	r3, #4
    return HAL_ERROR;
 8011af2:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011af4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011af6:	e7f8      	b.n	8011aea <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011af8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011afa:	f7ff ff25 	bl	8011948 <HAL_RTC_MspInit>
 8011afe:	e7c4      	b.n	8011a8a <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 8011b00:	2001      	movs	r0, #1
 8011b02:	e7f2      	b.n	8011aea <HAL_RTC_Init+0x6e>
 8011b04:	ff8fffbf 	.word	0xff8fffbf
 8011b08:	fffbffff 	.word	0xfffbffff

08011b0c <HAL_RTC_SetTime>:
{
 8011b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011b0e:	7f03      	ldrb	r3, [r0, #28]
{
 8011b10:	0004      	movs	r4, r0
 8011b12:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d100      	bne.n	8011b1a <HAL_RTC_SetTime+0xe>
 8011b18:	e074      	b.n	8011c04 <HAL_RTC_SetTime+0xf8>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	6806      	ldr	r6, [r0, #0]
 8011b1e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b20:	3301      	adds	r3, #1
 8011b22:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011b24:	68b3      	ldr	r3, [r6, #8]
 8011b26:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8011b28:	2a00      	cmp	r2, #0
 8011b2a:	d031      	beq.n	8011b90 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011b2c:	403b      	ands	r3, r7
 8011b2e:	d065      	beq.n	8011bfc <HAL_RTC_SetTime+0xf0>
 8011b30:	7a0b      	ldrb	r3, [r1, #8]
 8011b32:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b34:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b36:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b38:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b3a:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b3c:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 8011b3e:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b40:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b42:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b44:	23ca      	movs	r3, #202	; 0xca
 8011b46:	6273      	str	r3, [r6, #36]	; 0x24
 8011b48:	3b77      	subs	r3, #119	; 0x77
 8011b4a:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b4c:	0020      	movs	r0, r4
 8011b4e:	f7ff ff77 	bl	8011a40 <RTC_EnterInitMode>
 8011b52:	1e06      	subs	r6, r0, #0
 8011b54:	d149      	bne.n	8011bea <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011b56:	4935      	ldr	r1, [pc, #212]	; (8011c2c <HAL_RTC_SetTime+0x120>)
 8011b58:	6822      	ldr	r2, [r4, #0]
 8011b5a:	4039      	ands	r1, r7
 8011b5c:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011b5e:	6893      	ldr	r3, [r2, #8]
 8011b60:	4933      	ldr	r1, [pc, #204]	; (8011c30 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011b62:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011b64:	400b      	ands	r3, r1
 8011b66:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011b68:	68eb      	ldr	r3, [r5, #12]
 8011b6a:	6891      	ldr	r1, [r2, #8]
 8011b6c:	4303      	orrs	r3, r0
 8011b6e:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b70:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011b72:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b74:	68d3      	ldr	r3, [r2, #12]
 8011b76:	438b      	bics	r3, r1
 8011b78:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011b7a:	6893      	ldr	r3, [r2, #8]
 8011b7c:	069b      	lsls	r3, r3, #26
 8011b7e:	d543      	bpl.n	8011c08 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b80:	23ff      	movs	r3, #255	; 0xff
 8011b82:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011b84:	3bfe      	subs	r3, #254	; 0xfe
 8011b86:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011b88:	2300      	movs	r3, #0
 8011b8a:	7723      	strb	r3, [r4, #28]
}
 8011b8c:	0030      	movs	r0, r6
 8011b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011b90:	401f      	ands	r7, r3
 8011b92:	d035      	beq.n	8011c00 <HAL_RTC_SetTime+0xf4>
 8011b94:	7a0f      	ldrb	r7, [r1, #8]
 8011b96:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011b98:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8011b9a:	2300      	movs	r3, #0
  while(Value >= 10)
 8011b9c:	2809      	cmp	r0, #9
 8011b9e:	d906      	bls.n	8011bae <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 8011ba0:	380a      	subs	r0, #10
 8011ba2:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011ba4:	3301      	adds	r3, #1
  while(Value >= 10)
 8011ba6:	2809      	cmp	r0, #9
 8011ba8:	d8fa      	bhi.n	8011ba0 <HAL_RTC_SetTime+0x94>
 8011baa:	011b      	lsls	r3, r3, #4
 8011bac:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011bae:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011bb0:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011bb2:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011bb4:	2100      	movs	r1, #0
  while(Value >= 10)
 8011bb6:	2b09      	cmp	r3, #9
 8011bb8:	d906      	bls.n	8011bc8 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011bba:	3b0a      	subs	r3, #10
 8011bbc:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011bbe:	3101      	adds	r1, #1
  while(Value >= 10)
 8011bc0:	2b09      	cmp	r3, #9
 8011bc2:	d8fa      	bhi.n	8011bba <HAL_RTC_SetTime+0xae>
 8011bc4:	0109      	lsls	r1, r1, #4
 8011bc6:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011bc8:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011bca:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011bcc:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011bce:	2909      	cmp	r1, #9
 8011bd0:	d929      	bls.n	8011c26 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 8011bd2:	390a      	subs	r1, #10
 8011bd4:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011bd6:	3201      	adds	r2, #1
  while(Value >= 10)
 8011bd8:	2909      	cmp	r1, #9
 8011bda:	d8fa      	bhi.n	8011bd2 <HAL_RTC_SetTime+0xc6>
 8011bdc:	0112      	lsls	r2, r2, #4
 8011bde:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011be0:	4307      	orrs	r7, r0
 8011be2:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011be4:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011be6:	430f      	orrs	r7, r1
 8011be8:	e7ac      	b.n	8011b44 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011bea:	22ff      	movs	r2, #255	; 0xff
 8011bec:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 8011bee:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011bf2:	2304      	movs	r3, #4
 8011bf4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011bfa:	e7c7      	b.n	8011b8c <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011bfc:	720b      	strb	r3, [r1, #8]
 8011bfe:	e799      	b.n	8011b34 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011c00:	720f      	strb	r7, [r1, #8]
 8011c02:	e7c9      	b.n	8011b98 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011c04:	2602      	movs	r6, #2
 8011c06:	e7c1      	b.n	8011b8c <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011c08:	0020      	movs	r0, r4
 8011c0a:	f7ff fefd 	bl	8011a08 <HAL_RTC_WaitForSynchro>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d101      	bne.n	8011c16 <HAL_RTC_SetTime+0x10a>
 8011c12:	6822      	ldr	r2, [r4, #0]
 8011c14:	e7b4      	b.n	8011b80 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011c16:	22ff      	movs	r2, #255	; 0xff
 8011c18:	6823      	ldr	r3, [r4, #0]
 8011c1a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011c1c:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011c1e:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011c20:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8011c22:	2601      	movs	r6, #1
 8011c24:	e7b2      	b.n	8011b8c <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8011c26:	2200      	movs	r2, #0
 8011c28:	e7da      	b.n	8011be0 <HAL_RTC_SetTime+0xd4>
 8011c2a:	46c0      	nop			; (mov r8, r8)
 8011c2c:	007f7f7f 	.word	0x007f7f7f
 8011c30:	fffbffff 	.word	0xfffbffff

08011c34 <HAL_RTC_SetDate>:
{
 8011c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8011c36:	7f03      	ldrb	r3, [r0, #28]
{
 8011c38:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d062      	beq.n	8011d04 <HAL_RTC_SetDate+0xd0>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	780f      	ldrb	r7, [r1, #0]
 8011c42:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011c44:	3301      	adds	r3, #1
 8011c46:	7743      	strb	r3, [r0, #29]
 8011c48:	7848      	ldrb	r0, [r1, #1]
 8011c4a:	788e      	ldrb	r6, [r1, #2]
 8011c4c:	78cb      	ldrb	r3, [r1, #3]
 8011c4e:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011c50:	2a00      	cmp	r2, #0
 8011c52:	d022      	beq.n	8011c9a <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c54:	041b      	lsls	r3, r3, #16
 8011c56:	433b      	orrs	r3, r7
 8011c58:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011c5a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c5c:	4334      	orrs	r4, r6
 8011c5e:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c60:	22ca      	movs	r2, #202	; 0xca
 8011c62:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c64:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c66:	625a      	str	r2, [r3, #36]	; 0x24
 8011c68:	3a77      	subs	r2, #119	; 0x77
 8011c6a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c6c:	f7ff fee8 	bl	8011a40 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011c70:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c72:	1e06      	subs	r6, r0, #0
 8011c74:	d13e      	bne.n	8011cf4 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011c76:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011c78:	4a2b      	ldr	r2, [pc, #172]	; (8011d28 <HAL_RTC_SetDate+0xf4>)
 8011c7a:	4014      	ands	r4, r2
 8011c7c:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011c7e:	68da      	ldr	r2, [r3, #12]
 8011c80:	438a      	bics	r2, r1
 8011c82:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011c84:	689a      	ldr	r2, [r3, #8]
 8011c86:	0692      	lsls	r2, r2, #26
 8011c88:	d53e      	bpl.n	8011d08 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011c8a:	22ff      	movs	r2, #255	; 0xff
 8011c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011c92:	2300      	movs	r3, #0
 8011c94:	772b      	strb	r3, [r5, #28]
}
 8011c96:	0030      	movs	r0, r6
 8011c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011c9a:	2410      	movs	r4, #16
 8011c9c:	4204      	tst	r4, r0
 8011c9e:	d003      	beq.n	8011ca8 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011ca0:	43a0      	bics	r0, r4
 8011ca2:	300a      	adds	r0, #10
 8011ca4:	b2c0      	uxtb	r0, r0
 8011ca6:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011ca8:	2100      	movs	r1, #0
  while(Value >= 10)
 8011caa:	2b09      	cmp	r3, #9
 8011cac:	d906      	bls.n	8011cbc <HAL_RTC_SetDate+0x88>
    Value -= 10;
 8011cae:	3b0a      	subs	r3, #10
 8011cb0:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011cb2:	3101      	adds	r1, #1
  while(Value >= 10)
 8011cb4:	2b09      	cmp	r3, #9
 8011cb6:	d8fa      	bhi.n	8011cae <HAL_RTC_SetDate+0x7a>
 8011cb8:	0109      	lsls	r1, r1, #4
 8011cba:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011cbc:	430b      	orrs	r3, r1
 8011cbe:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 8011cc0:	2100      	movs	r1, #0
  while(Value >= 10)
 8011cc2:	2809      	cmp	r0, #9
 8011cc4:	d906      	bls.n	8011cd4 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011cc6:	380a      	subs	r0, #10
 8011cc8:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011cca:	3101      	adds	r1, #1
  while(Value >= 10)
 8011ccc:	2809      	cmp	r0, #9
 8011cce:	d8fa      	bhi.n	8011cc6 <HAL_RTC_SetDate+0x92>
 8011cd0:	0109      	lsls	r1, r1, #4
 8011cd2:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011cd4:	4308      	orrs	r0, r1
 8011cd6:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011cd8:	2e09      	cmp	r6, #9
 8011cda:	d922      	bls.n	8011d22 <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011cdc:	3e0a      	subs	r6, #10
 8011cde:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011ce0:	3201      	adds	r2, #1
  while(Value >= 10)
 8011ce2:	2e09      	cmp	r6, #9
 8011ce4:	d8fa      	bhi.n	8011cdc <HAL_RTC_SetDate+0xa8>
 8011ce6:	0112      	lsls	r2, r2, #4
 8011ce8:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011cea:	433b      	orrs	r3, r7
 8011cec:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011cee:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011cf0:	431c      	orrs	r4, r3
 8011cf2:	e7b5      	b.n	8011c60 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011cf4:	22ff      	movs	r2, #255	; 0xff
 8011cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011cf8:	2304      	movs	r3, #4
 8011cfa:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011cfc:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011cfe:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011d00:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011d02:	e7c8      	b.n	8011c96 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011d04:	2602      	movs	r6, #2
 8011d06:	e7c6      	b.n	8011c96 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011d08:	0028      	movs	r0, r5
 8011d0a:	f7ff fe7d 	bl	8011a08 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011d0e:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d0ba      	beq.n	8011c8a <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011d14:	22ff      	movs	r2, #255	; 0xff
 8011d16:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011d18:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011d1a:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011d1c:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8011d1e:	2601      	movs	r6, #1
 8011d20:	e7b9      	b.n	8011c96 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011d22:	2400      	movs	r4, #0
 8011d24:	e7e1      	b.n	8011cea <HAL_RTC_SetDate+0xb6>
 8011d26:	46c0      	nop			; (mov r8, r8)
 8011d28:	00ffff3f 	.word	0x00ffff3f

08011d2c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d2c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011d2e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d30:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011d32:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011d34:	600a      	str	r2, [r1, #0]
}
 8011d36:	4770      	bx	lr

08011d38 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d38:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011d3a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d3c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011d3e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011d40:	6808      	ldr	r0, [r1, #0]
}
 8011d42:	4770      	bx	lr

08011d44 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011d44:	4770      	bx	lr
 8011d46:	46c0      	nop			; (mov r8, r8)

08011d48 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011d48:	2239      	movs	r2, #57	; 0x39
 8011d4a:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011d4c:	2101      	movs	r1, #1
{
 8011d4e:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011d50:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011d52:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011d54:	6823      	ldr	r3, [r4, #0]
 8011d56:	430b      	orrs	r3, r1
 8011d58:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011d5a:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011d5c:	2000      	movs	r0, #0
 8011d5e:	bd10      	pop	{r4, pc}

08011d60 <HAL_TIM_PeriodElapsedCallback>:
 8011d60:	4770      	bx	lr
 8011d62:	46c0      	nop			; (mov r8, r8)

08011d64 <HAL_TIM_OC_DelayElapsedCallback>:
 8011d64:	4770      	bx	lr
 8011d66:	46c0      	nop			; (mov r8, r8)

08011d68 <HAL_TIM_IC_CaptureCallback>:
 8011d68:	4770      	bx	lr
 8011d6a:	46c0      	nop			; (mov r8, r8)

08011d6c <HAL_TIM_PWM_PulseFinishedCallback>:
 8011d6c:	4770      	bx	lr
 8011d6e:	46c0      	nop			; (mov r8, r8)

08011d70 <HAL_TIM_TriggerCallback>:
 8011d70:	4770      	bx	lr
 8011d72:	46c0      	nop			; (mov r8, r8)

08011d74 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011d74:	2202      	movs	r2, #2
 8011d76:	6803      	ldr	r3, [r0, #0]
{
 8011d78:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011d7a:	6919      	ldr	r1, [r3, #16]
{
 8011d7c:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011d7e:	420a      	tst	r2, r1
 8011d80:	d002      	beq.n	8011d88 <HAL_TIM_IRQHandler+0x14>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8011d82:	68d9      	ldr	r1, [r3, #12]
 8011d84:	420a      	tst	r2, r1
 8011d86:	d165      	bne.n	8011e54 <HAL_TIM_IRQHandler+0xe0>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011d88:	2204      	movs	r2, #4
 8011d8a:	6919      	ldr	r1, [r3, #16]
 8011d8c:	420a      	tst	r2, r1
 8011d8e:	d002      	beq.n	8011d96 <HAL_TIM_IRQHandler+0x22>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8011d90:	68d9      	ldr	r1, [r3, #12]
 8011d92:	420a      	tst	r2, r1
 8011d94:	d14b      	bne.n	8011e2e <HAL_TIM_IRQHandler+0xba>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011d96:	2208      	movs	r2, #8
 8011d98:	6919      	ldr	r1, [r3, #16]
 8011d9a:	420a      	tst	r2, r1
 8011d9c:	d002      	beq.n	8011da4 <HAL_TIM_IRQHandler+0x30>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8011d9e:	68d9      	ldr	r1, [r3, #12]
 8011da0:	420a      	tst	r2, r1
 8011da2:	d133      	bne.n	8011e0c <HAL_TIM_IRQHandler+0x98>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011da4:	2210      	movs	r2, #16
 8011da6:	6919      	ldr	r1, [r3, #16]
 8011da8:	420a      	tst	r2, r1
 8011daa:	d002      	beq.n	8011db2 <HAL_TIM_IRQHandler+0x3e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8011dac:	68d9      	ldr	r1, [r3, #12]
 8011dae:	420a      	tst	r2, r1
 8011db0:	d11c      	bne.n	8011dec <HAL_TIM_IRQHandler+0x78>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011db2:	2201      	movs	r2, #1
 8011db4:	6919      	ldr	r1, [r3, #16]
 8011db6:	420a      	tst	r2, r1
 8011db8:	d002      	beq.n	8011dc0 <HAL_TIM_IRQHandler+0x4c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8011dba:	68d9      	ldr	r1, [r3, #12]
 8011dbc:	420a      	tst	r2, r1
 8011dbe:	d15c      	bne.n	8011e7a <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
      HAL_TIM_PeriodElapsedCallback(htim);
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011dc0:	2280      	movs	r2, #128	; 0x80
 8011dc2:	6919      	ldr	r1, [r3, #16]
 8011dc4:	420a      	tst	r2, r1
 8011dc6:	d002      	beq.n	8011dce <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8011dc8:	68d9      	ldr	r1, [r3, #12]
 8011dca:	420a      	tst	r2, r1
 8011dcc:	d15c      	bne.n	8011e88 <HAL_TIM_IRQHandler+0x114>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
      HAL_TIMEx_BreakCallback(htim);
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011dce:	2240      	movs	r2, #64	; 0x40
 8011dd0:	6919      	ldr	r1, [r3, #16]
 8011dd2:	420a      	tst	r2, r1
 8011dd4:	d002      	beq.n	8011ddc <HAL_TIM_IRQHandler+0x68>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8011dd6:	68d9      	ldr	r1, [r3, #12]
 8011dd8:	420a      	tst	r2, r1
 8011dda:	d15d      	bne.n	8011e98 <HAL_TIM_IRQHandler+0x124>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
      HAL_TIM_TriggerCallback(htim);
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011ddc:	2220      	movs	r2, #32
 8011dde:	6919      	ldr	r1, [r3, #16]
 8011de0:	420a      	tst	r2, r1
 8011de2:	d002      	beq.n	8011dea <HAL_TIM_IRQHandler+0x76>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8011de4:	68d9      	ldr	r1, [r3, #12]
 8011de6:	420a      	tst	r2, r1
 8011de8:	d141      	bne.n	8011e6e <HAL_TIM_IRQHandler+0xfa>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8011dea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011dec:	3a21      	subs	r2, #33	; 0x21
 8011dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011df0:	3219      	adds	r2, #25
 8011df2:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8011df4:	69da      	ldr	r2, [r3, #28]
 8011df6:	23c0      	movs	r3, #192	; 0xc0
 8011df8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8011dfa:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8011dfc:	421a      	tst	r2, r3
 8011dfe:	d05e      	beq.n	8011ebe <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8011e00:	f7ff ffb2 	bl	8011d68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e04:	2300      	movs	r3, #0
 8011e06:	7623      	strb	r3, [r4, #24]
 8011e08:	6823      	ldr	r3, [r4, #0]
 8011e0a:	e7d2      	b.n	8011db2 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011e0c:	3a11      	subs	r2, #17
 8011e0e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8011e10:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011e12:	320d      	adds	r2, #13
 8011e14:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8011e16:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8011e18:	079b      	lsls	r3, r3, #30
 8011e1a:	d14d      	bne.n	8011eb8 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e1c:	f7ff ffa2 	bl	8011d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e20:	0020      	movs	r0, r4
 8011e22:	f7ff ffa3 	bl	8011d6c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e26:	2300      	movs	r3, #0
 8011e28:	7623      	strb	r3, [r4, #24]
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	e7ba      	b.n	8011da4 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011e2e:	3a09      	subs	r2, #9
 8011e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011e32:	3207      	adds	r2, #7
 8011e34:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8011e36:	699a      	ldr	r2, [r3, #24]
 8011e38:	23c0      	movs	r3, #192	; 0xc0
 8011e3a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8011e3c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8011e3e:	421a      	tst	r2, r3
 8011e40:	d137      	bne.n	8011eb2 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e42:	f7ff ff8f 	bl	8011d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e46:	0020      	movs	r0, r4
 8011e48:	f7ff ff90 	bl	8011d6c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	7623      	strb	r3, [r4, #24]
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	e7a0      	b.n	8011d96 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011e54:	3a05      	subs	r2, #5
 8011e56:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8011e58:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011e5a:	3204      	adds	r2, #4
 8011e5c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8011e5e:	079b      	lsls	r3, r3, #30
 8011e60:	d021      	beq.n	8011ea6 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8011e62:	f7ff ff81 	bl	8011d68 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e66:	2300      	movs	r3, #0
 8011e68:	7623      	strb	r3, [r4, #24]
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	e78c      	b.n	8011d88 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011e6e:	3a41      	subs	r2, #65	; 0x41
 8011e70:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8011e72:	0020      	movs	r0, r4
 8011e74:	f000 f8ba 	bl	8011fec <HAL_TIMEx_CommutationCallback>
}
 8011e78:	e7b7      	b.n	8011dea <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011e7a:	3a03      	subs	r2, #3
 8011e7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8011e7e:	0020      	movs	r0, r4
 8011e80:	f7ff ff6e 	bl	8011d60 <HAL_TIM_PeriodElapsedCallback>
 8011e84:	6823      	ldr	r3, [r4, #0]
 8011e86:	e79b      	b.n	8011dc0 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011e88:	3a02      	subs	r2, #2
 8011e8a:	3aff      	subs	r2, #255	; 0xff
 8011e8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8011e8e:	0020      	movs	r0, r4
 8011e90:	f000 f8ae 	bl	8011ff0 <HAL_TIMEx_BreakCallback>
 8011e94:	6823      	ldr	r3, [r4, #0]
 8011e96:	e79a      	b.n	8011dce <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011e98:	3a81      	subs	r2, #129	; 0x81
 8011e9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8011e9c:	0020      	movs	r0, r4
 8011e9e:	f7ff ff67 	bl	8011d70 <HAL_TIM_TriggerCallback>
 8011ea2:	6823      	ldr	r3, [r4, #0]
 8011ea4:	e79a      	b.n	8011ddc <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ea6:	f7ff ff5d 	bl	8011d64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011eaa:	0020      	movs	r0, r4
 8011eac:	f7ff ff5e 	bl	8011d6c <HAL_TIM_PWM_PulseFinishedCallback>
 8011eb0:	e7d9      	b.n	8011e66 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8011eb2:	f7ff ff59 	bl	8011d68 <HAL_TIM_IC_CaptureCallback>
 8011eb6:	e7c9      	b.n	8011e4c <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8011eb8:	f7ff ff56 	bl	8011d68 <HAL_TIM_IC_CaptureCallback>
 8011ebc:	e7b3      	b.n	8011e26 <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ebe:	f7ff ff51 	bl	8011d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ec2:	0020      	movs	r0, r4
 8011ec4:	f7ff ff52 	bl	8011d6c <HAL_TIM_PWM_PulseFinishedCallback>
 8011ec8:	e79c      	b.n	8011e04 <HAL_TIM_IRQHandler+0x90>
 8011eca:	46c0      	nop			; (mov r8, r8)

08011ecc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011ecc:	4a22      	ldr	r2, [pc, #136]	; (8011f58 <TIM_Base_SetConfig+0x8c>)
{
 8011ece:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011ed0:	6803      	ldr	r3, [r0, #0]
 8011ed2:	688d      	ldr	r5, [r1, #8]
 8011ed4:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011ed6:	4290      	cmp	r0, r2
 8011ed8:	d02c      	beq.n	8011f34 <TIM_Base_SetConfig+0x68>
 8011eda:	2280      	movs	r2, #128	; 0x80
 8011edc:	05d2      	lsls	r2, r2, #23
 8011ede:	4290      	cmp	r0, r2
 8011ee0:	d012      	beq.n	8011f08 <TIM_Base_SetConfig+0x3c>
 8011ee2:	4a1e      	ldr	r2, [pc, #120]	; (8011f5c <TIM_Base_SetConfig+0x90>)
 8011ee4:	4290      	cmp	r0, r2
 8011ee6:	d00f      	beq.n	8011f08 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011ee8:	4a1d      	ldr	r2, [pc, #116]	; (8011f60 <TIM_Base_SetConfig+0x94>)
 8011eea:	4290      	cmp	r0, r2
 8011eec:	d02e      	beq.n	8011f4c <TIM_Base_SetConfig+0x80>
 8011eee:	4a1d      	ldr	r2, [pc, #116]	; (8011f64 <TIM_Base_SetConfig+0x98>)
 8011ef0:	4290      	cmp	r0, r2
 8011ef2:	d023      	beq.n	8011f3c <TIM_Base_SetConfig+0x70>
 8011ef4:	4a1c      	ldr	r2, [pc, #112]	; (8011f68 <TIM_Base_SetConfig+0x9c>)
 8011ef6:	4290      	cmp	r0, r2
 8011ef8:	d020      	beq.n	8011f3c <TIM_Base_SetConfig+0x70>
 8011efa:	4a1c      	ldr	r2, [pc, #112]	; (8011f6c <TIM_Base_SetConfig+0xa0>)
 8011efc:	4290      	cmp	r0, r2
 8011efe:	d01d      	beq.n	8011f3c <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011f00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f02:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011f04:	6284      	str	r4, [r0, #40]	; 0x28
 8011f06:	e012      	b.n	8011f2e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011f08:	2270      	movs	r2, #112	; 0x70
 8011f0a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011f0c:	684a      	ldr	r2, [r1, #4]
 8011f0e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f10:	4a17      	ldr	r2, [pc, #92]	; (8011f70 <TIM_Base_SetConfig+0xa4>)
 8011f12:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f14:	68ca      	ldr	r2, [r1, #12]
 8011f16:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011f18:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011f1a:	4b13      	ldr	r3, [pc, #76]	; (8011f68 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f1c:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011f1e:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011f20:	4298      	cmp	r0, r3
 8011f22:	d002      	beq.n	8011f2a <TIM_Base_SetConfig+0x5e>
 8011f24:	4b11      	ldr	r3, [pc, #68]	; (8011f6c <TIM_Base_SetConfig+0xa0>)
 8011f26:	4298      	cmp	r0, r3
 8011f28:	d101      	bne.n	8011f2e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011f2a:	690b      	ldr	r3, [r1, #16]
 8011f2c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	6143      	str	r3, [r0, #20]
}
 8011f32:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011f34:	2270      	movs	r2, #112	; 0x70
 8011f36:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011f38:	684a      	ldr	r2, [r1, #4]
 8011f3a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f3c:	4a0c      	ldr	r2, [pc, #48]	; (8011f70 <TIM_Base_SetConfig+0xa4>)
 8011f3e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f40:	68ca      	ldr	r2, [r1, #12]
 8011f42:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011f44:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f46:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011f48:	6284      	str	r4, [r0, #40]	; 0x28
 8011f4a:	e7ee      	b.n	8011f2a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f4c:	4a08      	ldr	r2, [pc, #32]	; (8011f70 <TIM_Base_SetConfig+0xa4>)
 8011f4e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f50:	68ca      	ldr	r2, [r1, #12]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	e7d4      	b.n	8011f00 <TIM_Base_SetConfig+0x34>
 8011f56:	46c0      	nop			; (mov r8, r8)
 8011f58:	40012c00 	.word	0x40012c00
 8011f5c:	40000400 	.word	0x40000400
 8011f60:	40002000 	.word	0x40002000
 8011f64:	40014000 	.word	0x40014000
 8011f68:	40014400 	.word	0x40014400
 8011f6c:	40014800 	.word	0x40014800
 8011f70:	fffffcff 	.word	0xfffffcff

08011f74 <HAL_TIM_Base_Init>:
{
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011f78:	d014      	beq.n	8011fa4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011f7a:	2339      	movs	r3, #57	; 0x39
 8011f7c:	5cc3      	ldrb	r3, [r0, r3]
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00a      	beq.n	8011f9a <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011f84:	2302      	movs	r3, #2
 8011f86:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f88:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011f8a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f8c:	1d21      	adds	r1, r4, #4
 8011f8e:	f7ff ff9d 	bl	8011ecc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011f92:	2301      	movs	r3, #1
  return HAL_OK;
 8011f94:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011f96:	5563      	strb	r3, [r4, r5]
}
 8011f98:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011f9a:	2238      	movs	r2, #56	; 0x38
 8011f9c:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011f9e:	f7ff fed1 	bl	8011d44 <HAL_TIM_Base_MspInit>
 8011fa2:	e7ef      	b.n	8011f84 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011fa4:	2001      	movs	r0, #1
 8011fa6:	e7f7      	b.n	8011f98 <HAL_TIM_Base_Init+0x24>

08011fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011fa8:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011faa:	2438      	movs	r4, #56	; 0x38
 8011fac:	5d03      	ldrb	r3, [r0, r4]
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d019      	beq.n	8011fe6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8011fb2:	2539      	movs	r5, #57	; 0x39
 8011fb4:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011fb6:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011fb8:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011fba:	6803      	ldr	r3, [r0, #0]
 8011fbc:	685a      	ldr	r2, [r3, #4]
 8011fbe:	43b2      	bics	r2, r6
 8011fc0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011fc6:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011fc8:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011fca:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011fcc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011fce:	689a      	ldr	r2, [r3, #8]
 8011fd0:	43b2      	bics	r2, r6
 8011fd2:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011fd4:	689a      	ldr	r2, [r3, #8]
 8011fd6:	430a      	orrs	r2, r1
 8011fd8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8011fde:	2300      	movs	r3, #0
 8011fe0:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8011fe2:	2000      	movs	r0, #0
}
 8011fe4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8011fe6:	2002      	movs	r0, #2
 8011fe8:	e7fc      	b.n	8011fe4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8011fea:	46c0      	nop			; (mov r8, r8)

08011fec <HAL_TIMEx_CommutationCallback>:
 8011fec:	4770      	bx	lr
 8011fee:	46c0      	nop			; (mov r8, r8)

08011ff0 <HAL_TIMEx_BreakCallback>:
 8011ff0:	4770      	bx	lr
 8011ff2:	46c0      	nop			; (mov r8, r8)

08011ff4 <HAL_UART_MspDeInit>:
 8011ff4:	4770      	bx	lr
 8011ff6:	46c0      	nop			; (mov r8, r8)

08011ff8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011ff8:	b570      	push	{r4, r5, r6, lr}
 8011ffa:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011ffc:	2001      	movs	r0, #1
  if(huart == NULL)
 8011ffe:	2c00      	cmp	r4, #0
 8012000:	d012      	beq.n	8012028 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8012002:	2669      	movs	r6, #105	; 0x69
 8012004:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8012006:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8012008:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 801200a:	6823      	ldr	r3, [r4, #0]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	4382      	bics	r2, r0
 8012010:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8012012:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8012014:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012016:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012018:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801201a:	f7ff ffeb 	bl	8011ff4 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801201e:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8012020:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012022:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012024:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012026:	54e5      	strb	r5, [r4, r3]
}
 8012028:	bd70      	pop	{r4, r5, r6, pc}
 801202a:	46c0      	nop			; (mov r8, r8)

0801202c <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801202c:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801202e:	2069      	movs	r0, #105	; 0x69
{
 8012030:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012032:	5c1c      	ldrb	r4, [r3, r0]
 8012034:	2c01      	cmp	r4, #1
 8012036:	d003      	beq.n	8012040 <HAL_UART_Transmit_IT+0x14>
 8012038:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801203a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801203c:	2c22      	cmp	r4, #34	; 0x22
 801203e:	d122      	bne.n	8012086 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8012040:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012042:	2900      	cmp	r1, #0
 8012044:	d01f      	beq.n	8012086 <HAL_UART_Transmit_IT+0x5a>
 8012046:	2a00      	cmp	r2, #0
 8012048:	d01d      	beq.n	8012086 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 801204a:	2468      	movs	r4, #104	; 0x68
 801204c:	5d1d      	ldrb	r5, [r3, r4]
 801204e:	2d01      	cmp	r5, #1
 8012050:	d01d      	beq.n	801208e <HAL_UART_Transmit_IT+0x62>
 8012052:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8012054:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012056:	2150      	movs	r1, #80	; 0x50
 8012058:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801205a:	3102      	adds	r1, #2
 801205c:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801205e:	2200      	movs	r2, #0
 8012060:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012062:	3269      	adds	r2, #105	; 0x69
 8012064:	5c99      	ldrb	r1, [r3, r2]
 8012066:	2922      	cmp	r1, #34	; 0x22
 8012068:	d00e      	beq.n	8012088 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801206a:	2112      	movs	r1, #18
 801206c:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801206e:	2001      	movs	r0, #1
 8012070:	681a      	ldr	r2, [r3, #0]
 8012072:	6891      	ldr	r1, [r2, #8]
 8012074:	4301      	orrs	r1, r0
 8012076:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8012078:	2000      	movs	r0, #0
 801207a:	2168      	movs	r1, #104	; 0x68
 801207c:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801207e:	6813      	ldr	r3, [r2, #0]
 8012080:	3118      	adds	r1, #24
 8012082:	430b      	orrs	r3, r1
 8012084:	6013      	str	r3, [r2, #0]
  }
}
 8012086:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012088:	3110      	adds	r1, #16
 801208a:	5499      	strb	r1, [r3, r2]
 801208c:	e7ef      	b.n	801206e <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 801208e:	2002      	movs	r0, #2
 8012090:	e7f9      	b.n	8012086 <HAL_UART_Transmit_IT+0x5a>
 8012092:	46c0      	nop			; (mov r8, r8)

08012094 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012094:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012096:	2069      	movs	r0, #105	; 0x69
{
 8012098:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801209a:	5c1c      	ldrb	r4, [r3, r0]
 801209c:	2c01      	cmp	r4, #1
 801209e:	d003      	beq.n	80120a8 <HAL_UART_Receive_IT+0x14>
 80120a0:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80120a2:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80120a4:	2c12      	cmp	r4, #18
 80120a6:	d134      	bne.n	8012112 <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 80120a8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80120aa:	2900      	cmp	r1, #0
 80120ac:	d031      	beq.n	8012112 <HAL_UART_Receive_IT+0x7e>
 80120ae:	2a00      	cmp	r2, #0
 80120b0:	d02f      	beq.n	8012112 <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 80120b2:	2468      	movs	r4, #104	; 0x68
 80120b4:	5d1d      	ldrb	r5, [r3, r4]
 80120b6:	2d01      	cmp	r5, #1
 80120b8:	d041      	beq.n	801213e <HAL_UART_Receive_IT+0xaa>
 80120ba:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 80120bc:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80120be:	2158      	movs	r1, #88	; 0x58
 80120c0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80120c2:	3102      	adds	r1, #2
 80120c4:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 80120c6:	2180      	movs	r1, #128	; 0x80
 80120c8:	689a      	ldr	r2, [r3, #8]
 80120ca:	0149      	lsls	r1, r1, #5
 80120cc:	428a      	cmp	r2, r1
 80120ce:	d021      	beq.n	8012114 <HAL_UART_Receive_IT+0x80>
 80120d0:	2a00      	cmp	r2, #0
 80120d2:	d129      	bne.n	8012128 <HAL_UART_Receive_IT+0x94>
 80120d4:	691a      	ldr	r2, [r3, #16]
 80120d6:	2a00      	cmp	r2, #0
 80120d8:	d133      	bne.n	8012142 <HAL_UART_Receive_IT+0xae>
 80120da:	225c      	movs	r2, #92	; 0x5c
 80120dc:	21ff      	movs	r1, #255	; 0xff
 80120de:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120e0:	2200      	movs	r2, #0
 80120e2:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80120e4:	3269      	adds	r2, #105	; 0x69
 80120e6:	5c99      	ldrb	r1, [r3, r2]
 80120e8:	2912      	cmp	r1, #18
 80120ea:	d01a      	beq.n	8012122 <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80120ec:	2122      	movs	r1, #34	; 0x22
 80120ee:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80120f0:	2180      	movs	r1, #128	; 0x80
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	0049      	lsls	r1, r1, #1
 80120f6:	6810      	ldr	r0, [r2, #0]
 80120f8:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80120fa:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80120fc:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80120fe:	6891      	ldr	r1, [r2, #8]
 8012100:	4301      	orrs	r1, r0
 8012102:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8012104:	2000      	movs	r0, #0
 8012106:	2168      	movs	r1, #104	; 0x68
 8012108:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801210a:	6813      	ldr	r3, [r2, #0]
 801210c:	3948      	subs	r1, #72	; 0x48
 801210e:	430b      	orrs	r3, r1
 8012110:	6013      	str	r3, [r2, #0]
  }
}
 8012112:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8012114:	691a      	ldr	r2, [r3, #16]
 8012116:	2a00      	cmp	r2, #0
 8012118:	d1df      	bne.n	80120da <HAL_UART_Receive_IT+0x46>
 801211a:	490c      	ldr	r1, [pc, #48]	; (801214c <HAL_UART_Receive_IT+0xb8>)
 801211c:	325c      	adds	r2, #92	; 0x5c
 801211e:	5299      	strh	r1, [r3, r2]
 8012120:	e7de      	b.n	80120e0 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012122:	3120      	adds	r1, #32
 8012124:	5499      	strb	r1, [r3, r2]
 8012126:	e7e3      	b.n	80120f0 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8012128:	2180      	movs	r1, #128	; 0x80
 801212a:	0549      	lsls	r1, r1, #21
 801212c:	428a      	cmp	r2, r1
 801212e:	d1d7      	bne.n	80120e0 <HAL_UART_Receive_IT+0x4c>
 8012130:	691a      	ldr	r2, [r3, #16]
 8012132:	2a00      	cmp	r2, #0
 8012134:	d005      	beq.n	8012142 <HAL_UART_Receive_IT+0xae>
 8012136:	225c      	movs	r2, #92	; 0x5c
 8012138:	213f      	movs	r1, #63	; 0x3f
 801213a:	5299      	strh	r1, [r3, r2]
 801213c:	e7d0      	b.n	80120e0 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 801213e:	2002      	movs	r0, #2
 8012140:	e7e7      	b.n	8012112 <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 8012142:	225c      	movs	r2, #92	; 0x5c
 8012144:	217f      	movs	r1, #127	; 0x7f
 8012146:	5299      	strh	r1, [r3, r2]
 8012148:	e7ca      	b.n	80120e0 <HAL_UART_Receive_IT+0x4c>
 801214a:	46c0      	nop			; (mov r8, r8)
 801214c:	000001ff 	.word	0x000001ff

08012150 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012150:	b570      	push	{r4, r5, r6, lr}
 8012152:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012154:	2069      	movs	r0, #105	; 0x69
 8012156:	5c23      	ldrb	r3, [r4, r0]
 8012158:	2b01      	cmp	r3, #1
 801215a:	d003      	beq.n	8012164 <HAL_UART_Transmit_DMA+0x14>
 801215c:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801215e:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012160:	2b22      	cmp	r3, #34	; 0x22
 8012162:	d12e      	bne.n	80121c2 <HAL_UART_Transmit_DMA+0x72>
      return HAL_ERROR;
 8012164:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012166:	2900      	cmp	r1, #0
 8012168:	d02b      	beq.n	80121c2 <HAL_UART_Transmit_DMA+0x72>
 801216a:	2a00      	cmp	r2, #0
 801216c:	d029      	beq.n	80121c2 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 801216e:	2368      	movs	r3, #104	; 0x68
 8012170:	5ce5      	ldrb	r5, [r4, r3]
 8012172:	2d01      	cmp	r5, #1
 8012174:	d029      	beq.n	80121ca <HAL_UART_Transmit_DMA+0x7a>
 8012176:	54e0      	strb	r0, [r4, r3]
    huart->TxXferSize = Size;
 8012178:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 801217a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801217c:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 801217e:	3302      	adds	r3, #2
 8012180:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012182:	2300      	movs	r3, #0
 8012184:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012186:	3369      	adds	r3, #105	; 0x69
 8012188:	5ce0      	ldrb	r0, [r4, r3]
 801218a:	2822      	cmp	r0, #34	; 0x22
 801218c:	d01a      	beq.n	80121c4 <HAL_UART_Transmit_DMA+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801218e:	2012      	movs	r0, #18
 8012190:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012192:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012194:	4b0e      	ldr	r3, [pc, #56]	; (80121d0 <HAL_UART_Transmit_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012196:	6825      	ldr	r5, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012198:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801219a:	4b0e      	ldr	r3, [pc, #56]	; (80121d4 <HAL_UART_Transmit_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 801219c:	3528      	adds	r5, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801219e:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80121a0:	4b0d      	ldr	r3, [pc, #52]	; (80121d8 <HAL_UART_Transmit_DMA+0x88>)
 80121a2:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80121a4:	0013      	movs	r3, r2
 80121a6:	002a      	movs	r2, r5
 80121a8:	f7fd ff20 	bl	800ffec <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80121ac:	2240      	movs	r2, #64	; 0x40
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80121ae:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80121b0:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80121b2:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80121b4:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80121b6:	689a      	ldr	r2, [r3, #8]
 80121b8:	430a      	orrs	r2, r1
 80121ba:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80121bc:	2368      	movs	r3, #104	; 0x68
 80121be:	2200      	movs	r2, #0
 80121c0:	54e2      	strb	r2, [r4, r3]
  }
}
 80121c2:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80121c4:	3010      	adds	r0, #16
 80121c6:	54e0      	strb	r0, [r4, r3]
 80121c8:	e7e3      	b.n	8012192 <HAL_UART_Transmit_DMA+0x42>
    return HAL_BUSY;
 80121ca:	2002      	movs	r0, #2
 80121cc:	e7f9      	b.n	80121c2 <HAL_UART_Transmit_DMA+0x72>
 80121ce:	46c0      	nop			; (mov r8, r8)
 80121d0:	08012261 	.word	0x08012261
 80121d4:	08012295 	.word	0x08012295
 80121d8:	080122e9 	.word	0x080122e9

080121dc <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80121dc:	b570      	push	{r4, r5, r6, lr}
 80121de:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80121e0:	2069      	movs	r0, #105	; 0x69
 80121e2:	5c25      	ldrb	r5, [r4, r0]
 80121e4:	2d01      	cmp	r5, #1
 80121e6:	d003      	beq.n	80121f0 <HAL_UART_Receive_DMA+0x14>
 80121e8:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80121ea:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80121ec:	2b12      	cmp	r3, #18
 80121ee:	d12b      	bne.n	8012248 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 80121f0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80121f2:	2900      	cmp	r1, #0
 80121f4:	d028      	beq.n	8012248 <HAL_UART_Receive_DMA+0x6c>
 80121f6:	2a00      	cmp	r2, #0
 80121f8:	d026      	beq.n	8012248 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 80121fa:	2368      	movs	r3, #104	; 0x68
 80121fc:	5ce5      	ldrb	r5, [r4, r3]
 80121fe:	2d01      	cmp	r5, #1
 8012200:	d026      	beq.n	8012250 <HAL_UART_Receive_DMA+0x74>
 8012202:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8012204:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8012206:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012208:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801220a:	2300      	movs	r3, #0
 801220c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801220e:	3369      	adds	r3, #105	; 0x69
 8012210:	5ce0      	ldrb	r0, [r4, r3]
 8012212:	2812      	cmp	r0, #18
 8012214:	d019      	beq.n	801224a <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012216:	2022      	movs	r0, #34	; 0x22
 8012218:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801221a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801221c:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801221e:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012220:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012222:	4b0d      	ldr	r3, [pc, #52]	; (8012258 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012224:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012226:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012228:	4b0c      	ldr	r3, [pc, #48]	; (801225c <HAL_UART_Receive_DMA+0x80>)
 801222a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801222c:	0013      	movs	r3, r2
 801222e:	000a      	movs	r2, r1
 8012230:	0029      	movs	r1, r5
 8012232:	f7fd fedb 	bl	800ffec <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012236:	2140      	movs	r1, #64	; 0x40
 8012238:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 801223a:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801223c:	6893      	ldr	r3, [r2, #8]
 801223e:	430b      	orrs	r3, r1
 8012240:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012242:	2368      	movs	r3, #104	; 0x68
 8012244:	2200      	movs	r2, #0
 8012246:	54e2      	strb	r2, [r4, r3]
  }
}
 8012248:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801224a:	3020      	adds	r0, #32
 801224c:	54e0      	strb	r0, [r4, r3]
 801224e:	e7e4      	b.n	801221a <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8012250:	2002      	movs	r0, #2
 8012252:	e7f9      	b.n	8012248 <HAL_UART_Receive_DMA+0x6c>
 8012254:	080122a1 	.word	0x080122a1
 8012258:	080122dd 	.word	0x080122dd
 801225c:	080122e9 	.word	0x080122e9

08012260 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012260:	6803      	ldr	r3, [r0, #0]
{
 8012262:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012264:	6819      	ldr	r1, [r3, #0]
 8012266:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012268:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801226a:	400b      	ands	r3, r1
 801226c:	d10b      	bne.n	8012286 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0;
 801226e:	2152      	movs	r1, #82	; 0x52
 8012270:	5253      	strh	r3, [r2, r1]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012272:	6813      	ldr	r3, [r2, #0]
 8012274:	312e      	adds	r1, #46	; 0x2e
 8012276:	689a      	ldr	r2, [r3, #8]
 8012278:	438a      	bics	r2, r1
 801227a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	3940      	subs	r1, #64	; 0x40
 8012280:	430a      	orrs	r2, r1
 8012282:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012284:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012286:	0010      	movs	r0, r2
 8012288:	f7fa fcf6 	bl	800cc78 <HAL_UART_TxCpltCallback>
}
 801228c:	e7fa      	b.n	8012284 <UART_DMATransmitCplt+0x24>
 801228e:	46c0      	nop			; (mov r8, r8)

08012290 <HAL_UART_TxHalfCpltCallback>:
 8012290:	4770      	bx	lr
 8012292:	46c0      	nop			; (mov r8, r8)

08012294 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012294:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012296:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012298:	f7ff fffa 	bl	8012290 <HAL_UART_TxHalfCpltCallback>
}
 801229c:	bd10      	pop	{r4, pc}
 801229e:	46c0      	nop			; (mov r8, r8)

080122a0 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80122a0:	6803      	ldr	r3, [r0, #0]
{
 80122a2:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80122a4:	6819      	ldr	r1, [r3, #0]
 80122a6:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80122a8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80122aa:	400b      	ands	r3, r1
 80122ac:	d10c      	bne.n	80122c8 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 80122ae:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80122b0:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 80122b2:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80122b4:	6811      	ldr	r1, [r2, #0]
 80122b6:	688b      	ldr	r3, [r1, #8]
 80122b8:	4383      	bics	r3, r0
 80122ba:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80122bc:	2369      	movs	r3, #105	; 0x69
 80122be:	5cd1      	ldrb	r1, [r2, r3]
 80122c0:	2932      	cmp	r1, #50	; 0x32
 80122c2:	d005      	beq.n	80122d0 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80122c4:	2101      	movs	r1, #1
 80122c6:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80122c8:	0010      	movs	r0, r2
 80122ca:	f7fa fd17 	bl	800ccfc <HAL_UART_RxCpltCallback>
}
 80122ce:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80122d0:	3920      	subs	r1, #32
 80122d2:	54d1      	strb	r1, [r2, r3]
 80122d4:	e7f8      	b.n	80122c8 <UART_DMAReceiveCplt+0x28>
 80122d6:	46c0      	nop			; (mov r8, r8)

080122d8 <HAL_UART_RxHalfCpltCallback>:
 80122d8:	4770      	bx	lr
 80122da:	46c0      	nop			; (mov r8, r8)

080122dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80122dc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 80122de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80122e0:	f7ff fffa 	bl	80122d8 <HAL_UART_RxHalfCpltCallback>
}
 80122e4:	bd10      	pop	{r4, pc}
 80122e6:	46c0      	nop			; (mov r8, r8)

080122e8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 80122e8:	2300      	movs	r3, #0
 80122ea:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80122ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80122ee:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 80122f0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80122f2:	3a08      	subs	r2, #8
 80122f4:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80122f6:	3369      	adds	r3, #105	; 0x69
 80122f8:	3a51      	subs	r2, #81	; 0x51
 80122fa:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80122fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80122fe:	320f      	adds	r2, #15
 8012300:	4313      	orrs	r3, r2
 8012302:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012304:	f7fa fcd6 	bl	800ccb4 <HAL_UART_ErrorCallback>
}
 8012308:	bd10      	pop	{r4, pc}
 801230a:	46c0      	nop			; (mov r8, r8)

0801230c <UART_SetConfig>:
{
 801230c:	b570      	push	{r4, r5, r6, lr}
 801230e:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012310:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012312:	69c1      	ldr	r1, [r0, #28]
 8012314:	6883      	ldr	r3, [r0, #8]
 8012316:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012318:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801231a:	4303      	orrs	r3, r0
 801231c:	6968      	ldr	r0, [r5, #20]
 801231e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012320:	4861      	ldr	r0, [pc, #388]	; (80124a8 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012322:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012324:	4002      	ands	r2, r0
 8012326:	4313      	orrs	r3, r2
 8012328:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801232a:	6863      	ldr	r3, [r4, #4]
 801232c:	4a5f      	ldr	r2, [pc, #380]	; (80124ac <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801232e:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012330:	4013      	ands	r3, r2
 8012332:	68ea      	ldr	r2, [r5, #12]
 8012334:	4313      	orrs	r3, r2
 8012336:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012338:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801233a:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801233c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801233e:	485c      	ldr	r0, [pc, #368]	; (80124b0 <UART_SetConfig+0x1a4>)
 8012340:	4002      	ands	r2, r0
 8012342:	4313      	orrs	r3, r2
 8012344:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012346:	4b5b      	ldr	r3, [pc, #364]	; (80124b4 <UART_SetConfig+0x1a8>)
 8012348:	429c      	cmp	r4, r3
 801234a:	d044      	beq.n	80123d6 <UART_SetConfig+0xca>
 801234c:	4b5a      	ldr	r3, [pc, #360]	; (80124b8 <UART_SetConfig+0x1ac>)
 801234e:	429c      	cmp	r4, r3
 8012350:	d018      	beq.n	8012384 <UART_SetConfig+0x78>
 8012352:	4b5a      	ldr	r3, [pc, #360]	; (80124bc <UART_SetConfig+0x1b0>)
 8012354:	429c      	cmp	r4, r3
 8012356:	d100      	bne.n	801235a <UART_SetConfig+0x4e>
 8012358:	e085      	b.n	8012466 <UART_SetConfig+0x15a>
 801235a:	4b59      	ldr	r3, [pc, #356]	; (80124c0 <UART_SetConfig+0x1b4>)
 801235c:	429c      	cmp	r4, r3
 801235e:	d031      	beq.n	80123c4 <UART_SetConfig+0xb8>
 8012360:	4b58      	ldr	r3, [pc, #352]	; (80124c4 <UART_SetConfig+0x1b8>)
 8012362:	429c      	cmp	r4, r3
 8012364:	d02e      	beq.n	80123c4 <UART_SetConfig+0xb8>
 8012366:	4b58      	ldr	r3, [pc, #352]	; (80124c8 <UART_SetConfig+0x1bc>)
 8012368:	429c      	cmp	r4, r3
 801236a:	d02b      	beq.n	80123c4 <UART_SetConfig+0xb8>
 801236c:	4b57      	ldr	r3, [pc, #348]	; (80124cc <UART_SetConfig+0x1c0>)
 801236e:	429c      	cmp	r4, r3
 8012370:	d028      	beq.n	80123c4 <UART_SetConfig+0xb8>
 8012372:	4b57      	ldr	r3, [pc, #348]	; (80124d0 <UART_SetConfig+0x1c4>)
 8012374:	429c      	cmp	r4, r3
 8012376:	d025      	beq.n	80123c4 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012378:	2380      	movs	r3, #128	; 0x80
 801237a:	021b      	lsls	r3, r3, #8
 801237c:	4299      	cmp	r1, r3
 801237e:	d050      	beq.n	8012422 <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 8012380:	2001      	movs	r0, #1
 8012382:	e01c      	b.n	80123be <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012384:	20c0      	movs	r0, #192	; 0xc0
 8012386:	2280      	movs	r2, #128	; 0x80
 8012388:	4b52      	ldr	r3, [pc, #328]	; (80124d4 <UART_SetConfig+0x1c8>)
 801238a:	0280      	lsls	r0, r0, #10
 801238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801238e:	0252      	lsls	r2, r2, #9
 8012390:	4003      	ands	r3, r0
 8012392:	4293      	cmp	r3, r2
 8012394:	d049      	beq.n	801242a <UART_SetConfig+0x11e>
 8012396:	d913      	bls.n	80123c0 <UART_SetConfig+0xb4>
 8012398:	2280      	movs	r2, #128	; 0x80
 801239a:	0292      	lsls	r2, r2, #10
 801239c:	4293      	cmp	r3, r2
 801239e:	d100      	bne.n	80123a2 <UART_SetConfig+0x96>
 80123a0:	e070      	b.n	8012484 <UART_SetConfig+0x178>
 80123a2:	4283      	cmp	r3, r0
 80123a4:	d1e8      	bne.n	8012378 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123a6:	2380      	movs	r3, #128	; 0x80
 80123a8:	021b      	lsls	r3, r3, #8
 80123aa:	4299      	cmp	r1, r3
 80123ac:	d056      	beq.n	801245c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80123ae:	6869      	ldr	r1, [r5, #4]
 80123b0:	4849      	ldr	r0, [pc, #292]	; (80124d8 <UART_SetConfig+0x1cc>)
 80123b2:	f7ed fecd 	bl	8000150 <__udivsi3>
 80123b6:	0400      	lsls	r0, r0, #16
 80123b8:	0c00      	lsrs	r0, r0, #16
 80123ba:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80123bc:	2000      	movs	r0, #0
}
 80123be:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d1d9      	bne.n	8012378 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123c4:	2380      	movs	r3, #128	; 0x80
 80123c6:	021b      	lsls	r3, r3, #8
 80123c8:	4299      	cmp	r1, r3
 80123ca:	d060      	beq.n	801248e <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80123cc:	f7ff fa0e 	bl	80117ec <HAL_RCC_GetPCLK1Freq>
 80123d0:	682c      	ldr	r4, [r5, #0]
 80123d2:	6869      	ldr	r1, [r5, #4]
 80123d4:	e7ed      	b.n	80123b2 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123d6:	4b3f      	ldr	r3, [pc, #252]	; (80124d4 <UART_SetConfig+0x1c8>)
 80123d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123da:	2303      	movs	r3, #3
 80123dc:	4013      	ands	r3, r2
 80123de:	4a3f      	ldr	r2, [pc, #252]	; (80124dc <UART_SetConfig+0x1d0>)
 80123e0:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123e2:	2280      	movs	r2, #128	; 0x80
 80123e4:	0212      	lsls	r2, r2, #8
 80123e6:	4291      	cmp	r1, r2
 80123e8:	d00e      	beq.n	8012408 <UART_SetConfig+0xfc>
    switch (clocksource)
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	d0df      	beq.n	80123ae <UART_SetConfig+0xa2>
 80123ee:	d956      	bls.n	801249e <UART_SetConfig+0x192>
 80123f0:	2b04      	cmp	r3, #4
 80123f2:	d01e      	beq.n	8012432 <UART_SetConfig+0x126>
 80123f4:	2b08      	cmp	r3, #8
 80123f6:	d1c3      	bne.n	8012380 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80123f8:	2080      	movs	r0, #128	; 0x80
 80123fa:	6869      	ldr	r1, [r5, #4]
 80123fc:	0200      	lsls	r0, r0, #8
 80123fe:	f7ed fea7 	bl	8000150 <__udivsi3>
 8012402:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012404:	2000      	movs	r0, #0
        break;
 8012406:	e7da      	b.n	80123be <UART_SetConfig+0xb2>
    switch (clocksource)
 8012408:	2b02      	cmp	r3, #2
 801240a:	d027      	beq.n	801245c <UART_SetConfig+0x150>
 801240c:	d907      	bls.n	801241e <UART_SetConfig+0x112>
 801240e:	2b04      	cmp	r3, #4
 8012410:	d014      	beq.n	801243c <UART_SetConfig+0x130>
 8012412:	2b08      	cmp	r3, #8
 8012414:	d105      	bne.n	8012422 <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012416:	2080      	movs	r0, #128	; 0x80
 8012418:	6869      	ldr	r1, [r5, #4]
 801241a:	0240      	lsls	r0, r0, #9
 801241c:	e020      	b.n	8012460 <UART_SetConfig+0x154>
    switch (clocksource)
 801241e:	2b00      	cmp	r3, #0
 8012420:	d035      	beq.n	801248e <UART_SetConfig+0x182>
 8012422:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8012424:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8012426:	60e3      	str	r3, [r4, #12]
 8012428:	e7c9      	b.n	80123be <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801242a:	2380      	movs	r3, #128	; 0x80
 801242c:	021b      	lsls	r3, r3, #8
 801242e:	4299      	cmp	r1, r3
 8012430:	d004      	beq.n	801243c <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012432:	f7ff f981 	bl	8011738 <HAL_RCC_GetSysClockFreq>
 8012436:	682c      	ldr	r4, [r5, #0]
 8012438:	6869      	ldr	r1, [r5, #4]
 801243a:	e7ba      	b.n	80123b2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801243c:	f7ff f97c 	bl	8011738 <HAL_RCC_GetSysClockFreq>
 8012440:	6869      	ldr	r1, [r5, #4]
 8012442:	0040      	lsls	r0, r0, #1
 8012444:	f7ed fe84 	bl	8000150 <__udivsi3>
 8012448:	682c      	ldr	r4, [r5, #0]
 801244a:	220f      	movs	r2, #15
 801244c:	0703      	lsls	r3, r0, #28
 801244e:	0f5b      	lsrs	r3, r3, #29
 8012450:	4390      	bics	r0, r2
 8012452:	4303      	orrs	r3, r0
 8012454:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012456:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8012458:	60e3      	str	r3, [r4, #12]
 801245a:	e7b0      	b.n	80123be <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801245c:	6869      	ldr	r1, [r5, #4]
 801245e:	4820      	ldr	r0, [pc, #128]	; (80124e0 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012460:	f7ed fe76 	bl	8000150 <__udivsi3>
 8012464:	e7f1      	b.n	801244a <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012466:	20c0      	movs	r0, #192	; 0xc0
 8012468:	2280      	movs	r2, #128	; 0x80
 801246a:	4b1a      	ldr	r3, [pc, #104]	; (80124d4 <UART_SetConfig+0x1c8>)
 801246c:	0300      	lsls	r0, r0, #12
 801246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012470:	02d2      	lsls	r2, r2, #11
 8012472:	4003      	ands	r3, r0
 8012474:	4293      	cmp	r3, r2
 8012476:	d0d8      	beq.n	801242a <UART_SetConfig+0x11e>
 8012478:	d9a2      	bls.n	80123c0 <UART_SetConfig+0xb4>
 801247a:	2280      	movs	r2, #128	; 0x80
 801247c:	0312      	lsls	r2, r2, #12
 801247e:	4293      	cmp	r3, r2
 8012480:	d000      	beq.n	8012484 <UART_SetConfig+0x178>
 8012482:	e78e      	b.n	80123a2 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012484:	2380      	movs	r3, #128	; 0x80
 8012486:	021b      	lsls	r3, r3, #8
 8012488:	4299      	cmp	r1, r3
 801248a:	d1b5      	bne.n	80123f8 <UART_SetConfig+0xec>
 801248c:	e7c3      	b.n	8012416 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801248e:	f7ff f9ad 	bl	80117ec <HAL_RCC_GetPCLK1Freq>
 8012492:	6869      	ldr	r1, [r5, #4]
 8012494:	0040      	lsls	r0, r0, #1
 8012496:	f7ed fe5b 	bl	8000150 <__udivsi3>
 801249a:	682c      	ldr	r4, [r5, #0]
 801249c:	e7d5      	b.n	801244a <UART_SetConfig+0x13e>
    switch (clocksource)
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d094      	beq.n	80123cc <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 80124a2:	2001      	movs	r0, #1
 80124a4:	e78b      	b.n	80123be <UART_SetConfig+0xb2>
 80124a6:	46c0      	nop			; (mov r8, r8)
 80124a8:	efff69f3 	.word	0xefff69f3
 80124ac:	ffffcfff 	.word	0xffffcfff
 80124b0:	fffff4ff 	.word	0xfffff4ff
 80124b4:	40013800 	.word	0x40013800
 80124b8:	40004400 	.word	0x40004400
 80124bc:	40004800 	.word	0x40004800
 80124c0:	40004c00 	.word	0x40004c00
 80124c4:	40005000 	.word	0x40005000
 80124c8:	40011400 	.word	0x40011400
 80124cc:	40011800 	.word	0x40011800
 80124d0:	40011c00 	.word	0x40011c00
 80124d4:	40021000 	.word	0x40021000
 80124d8:	007a1200 	.word	0x007a1200
 80124dc:	08017e54 	.word	0x08017e54
 80124e0:	00f42400 	.word	0x00f42400

080124e4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80124e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80124e6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80124e8:	07da      	lsls	r2, r3, #31
 80124ea:	d506      	bpl.n	80124fa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80124ec:	6801      	ldr	r1, [r0, #0]
 80124ee:	4c28      	ldr	r4, [pc, #160]	; (8012590 <UART_AdvFeatureConfig+0xac>)
 80124f0:	684a      	ldr	r2, [r1, #4]
 80124f2:	4022      	ands	r2, r4
 80124f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80124f6:	4322      	orrs	r2, r4
 80124f8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80124fa:	079a      	lsls	r2, r3, #30
 80124fc:	d506      	bpl.n	801250c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124fe:	6801      	ldr	r1, [r0, #0]
 8012500:	4c24      	ldr	r4, [pc, #144]	; (8012594 <UART_AdvFeatureConfig+0xb0>)
 8012502:	684a      	ldr	r2, [r1, #4]
 8012504:	4022      	ands	r2, r4
 8012506:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012508:	4322      	orrs	r2, r4
 801250a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801250c:	075a      	lsls	r2, r3, #29
 801250e:	d506      	bpl.n	801251e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012510:	6801      	ldr	r1, [r0, #0]
 8012512:	4c21      	ldr	r4, [pc, #132]	; (8012598 <UART_AdvFeatureConfig+0xb4>)
 8012514:	684a      	ldr	r2, [r1, #4]
 8012516:	4022      	ands	r2, r4
 8012518:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801251a:	4322      	orrs	r2, r4
 801251c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801251e:	071a      	lsls	r2, r3, #28
 8012520:	d506      	bpl.n	8012530 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012522:	6801      	ldr	r1, [r0, #0]
 8012524:	4c1d      	ldr	r4, [pc, #116]	; (801259c <UART_AdvFeatureConfig+0xb8>)
 8012526:	684a      	ldr	r2, [r1, #4]
 8012528:	4022      	ands	r2, r4
 801252a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801252c:	4322      	orrs	r2, r4
 801252e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012530:	06da      	lsls	r2, r3, #27
 8012532:	d506      	bpl.n	8012542 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012534:	6801      	ldr	r1, [r0, #0]
 8012536:	4c1a      	ldr	r4, [pc, #104]	; (80125a0 <UART_AdvFeatureConfig+0xbc>)
 8012538:	688a      	ldr	r2, [r1, #8]
 801253a:	4022      	ands	r2, r4
 801253c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801253e:	4322      	orrs	r2, r4
 8012540:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012542:	069a      	lsls	r2, r3, #26
 8012544:	d506      	bpl.n	8012554 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012546:	6801      	ldr	r1, [r0, #0]
 8012548:	4c16      	ldr	r4, [pc, #88]	; (80125a4 <UART_AdvFeatureConfig+0xc0>)
 801254a:	688a      	ldr	r2, [r1, #8]
 801254c:	4022      	ands	r2, r4
 801254e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8012550:	4322      	orrs	r2, r4
 8012552:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012554:	065a      	lsls	r2, r3, #25
 8012556:	d50a      	bpl.n	801256e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012558:	6801      	ldr	r1, [r0, #0]
 801255a:	4d13      	ldr	r5, [pc, #76]	; (80125a8 <UART_AdvFeatureConfig+0xc4>)
 801255c:	684a      	ldr	r2, [r1, #4]
 801255e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8012560:	402a      	ands	r2, r5
 8012562:	4322      	orrs	r2, r4
 8012564:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012566:	2280      	movs	r2, #128	; 0x80
 8012568:	0352      	lsls	r2, r2, #13
 801256a:	4294      	cmp	r4, r2
 801256c:	d009      	beq.n	8012582 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801256e:	061b      	lsls	r3, r3, #24
 8012570:	d506      	bpl.n	8012580 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012572:	6802      	ldr	r2, [r0, #0]
 8012574:	490d      	ldr	r1, [pc, #52]	; (80125ac <UART_AdvFeatureConfig+0xc8>)
 8012576:	6853      	ldr	r3, [r2, #4]
 8012578:	400b      	ands	r3, r1
 801257a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801257c:	430b      	orrs	r3, r1
 801257e:	6053      	str	r3, [r2, #4]
}
 8012580:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012582:	684a      	ldr	r2, [r1, #4]
 8012584:	4c0a      	ldr	r4, [pc, #40]	; (80125b0 <UART_AdvFeatureConfig+0xcc>)
 8012586:	4022      	ands	r2, r4
 8012588:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801258a:	4322      	orrs	r2, r4
 801258c:	604a      	str	r2, [r1, #4]
 801258e:	e7ee      	b.n	801256e <UART_AdvFeatureConfig+0x8a>
 8012590:	fffdffff 	.word	0xfffdffff
 8012594:	fffeffff 	.word	0xfffeffff
 8012598:	fffbffff 	.word	0xfffbffff
 801259c:	ffff7fff 	.word	0xffff7fff
 80125a0:	ffffefff 	.word	0xffffefff
 80125a4:	ffffdfff 	.word	0xffffdfff
 80125a8:	ffefffff 	.word	0xffefffff
 80125ac:	fff7ffff 	.word	0xfff7ffff
 80125b0:	ff9fffff 	.word	0xff9fffff

080125b4 <UART_WaitOnFlagUntilTimeout>:
{
 80125b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125b6:	46c6      	mov	lr, r8
 80125b8:	4690      	mov	r8, r2
 80125ba:	b500      	push	{lr}
 80125bc:	001d      	movs	r5, r3
 80125be:	0006      	movs	r6, r0
 80125c0:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 80125c2:	f7fd f849 	bl	800f658 <HAL_GetTick>
  if(Status == RESET)
 80125c6:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 80125c8:	0007      	movs	r7, r0
  if(Status == RESET)
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d112      	bne.n	80125f4 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80125ce:	6832      	ldr	r2, [r6, #0]
 80125d0:	e001      	b.n	80125d6 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 80125d2:	1c6b      	adds	r3, r5, #1
 80125d4:	d117      	bne.n	8012606 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80125d6:	69d3      	ldr	r3, [r2, #28]
 80125d8:	4023      	ands	r3, r4
 80125da:	42a3      	cmp	r3, r4
 80125dc:	d1f9      	bne.n	80125d2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80125de:	2000      	movs	r0, #0
}
 80125e0:	bc04      	pop	{r2}
 80125e2:	4690      	mov	r8, r2
 80125e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80125e6:	2d00      	cmp	r5, #0
 80125e8:	d015      	beq.n	8012616 <UART_WaitOnFlagUntilTimeout+0x62>
 80125ea:	f7fd f835 	bl	800f658 <HAL_GetTick>
 80125ee:	1bc0      	subs	r0, r0, r7
 80125f0:	42a8      	cmp	r0, r5
 80125f2:	d80f      	bhi.n	8012614 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80125f4:	6832      	ldr	r2, [r6, #0]
 80125f6:	e001      	b.n	80125fc <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 80125f8:	1c6b      	adds	r3, r5, #1
 80125fa:	d1f4      	bne.n	80125e6 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80125fc:	69d3      	ldr	r3, [r2, #28]
 80125fe:	4023      	ands	r3, r4
 8012600:	42a3      	cmp	r3, r4
 8012602:	d0f9      	beq.n	80125f8 <UART_WaitOnFlagUntilTimeout+0x44>
 8012604:	e7eb      	b.n	80125de <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012606:	2d00      	cmp	r5, #0
 8012608:	d005      	beq.n	8012616 <UART_WaitOnFlagUntilTimeout+0x62>
 801260a:	f7fd f825 	bl	800f658 <HAL_GetTick>
 801260e:	1bc0      	subs	r0, r0, r7
 8012610:	42a8      	cmp	r0, r5
 8012612:	d9dc      	bls.n	80125ce <UART_WaitOnFlagUntilTimeout+0x1a>
 8012614:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012616:	2180      	movs	r1, #128	; 0x80
 8012618:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 801261a:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801261c:	438b      	bics	r3, r1
 801261e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012620:	6813      	ldr	r3, [r2, #0]
 8012622:	3960      	subs	r1, #96	; 0x60
 8012624:	438b      	bics	r3, r1
 8012626:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012628:	6813      	ldr	r3, [r2, #0]
 801262a:	4907      	ldr	r1, [pc, #28]	; (8012648 <UART_WaitOnFlagUntilTimeout+0x94>)
 801262c:	400b      	ands	r3, r1
 801262e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012630:	6893      	ldr	r3, [r2, #8]
 8012632:	3103      	adds	r1, #3
 8012634:	31ff      	adds	r1, #255	; 0xff
 8012636:	438b      	bics	r3, r1
 8012638:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 801263a:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 801263c:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801263e:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8012640:	3b01      	subs	r3, #1
 8012642:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012644:	e7cc      	b.n	80125e0 <UART_WaitOnFlagUntilTimeout+0x2c>
 8012646:	46c0      	nop			; (mov r8, r8)
 8012648:	fffffeff 	.word	0xfffffeff

0801264c <HAL_UART_Transmit>:
{
 801264c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801264e:	46c6      	mov	lr, r8
 8012650:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012652:	2369      	movs	r3, #105	; 0x69
{
 8012654:	b500      	push	{lr}
 8012656:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012658:	5cc1      	ldrb	r1, [r0, r3]
{
 801265a:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801265c:	2901      	cmp	r1, #1
 801265e:	d003      	beq.n	8012668 <HAL_UART_Transmit+0x1c>
 8012660:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8012662:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012664:	2b22      	cmp	r3, #34	; 0x22
 8012666:	d147      	bne.n	80126f8 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8012668:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801266a:	2d00      	cmp	r5, #0
 801266c:	d044      	beq.n	80126f8 <HAL_UART_Transmit+0xac>
 801266e:	2a00      	cmp	r2, #0
 8012670:	d042      	beq.n	80126f8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8012672:	2368      	movs	r3, #104	; 0x68
 8012674:	5ce1      	ldrb	r1, [r4, r3]
 8012676:	2901      	cmp	r1, #1
 8012678:	d046      	beq.n	8012708 <HAL_UART_Transmit+0xbc>
 801267a:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801267c:	2300      	movs	r3, #0
 801267e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012680:	3369      	adds	r3, #105	; 0x69
 8012682:	5ce1      	ldrb	r1, [r4, r3]
 8012684:	2922      	cmp	r1, #34	; 0x22
 8012686:	d03a      	beq.n	80126fe <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012688:	2112      	movs	r1, #18
 801268a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801268c:	2350      	movs	r3, #80	; 0x50
 801268e:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012690:	2380      	movs	r3, #128	; 0x80
 8012692:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 8012694:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012696:	4698      	mov	r8, r3
 8012698:	e005      	b.n	80126a6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801269a:	782a      	ldrb	r2, [r5, #0]
 801269c:	3501      	adds	r5, #1
 801269e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80126a0:	5ba2      	ldrh	r2, [r4, r6]
 80126a2:	2a00      	cmp	r2, #0
 80126a4:	d018      	beq.n	80126d8 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 80126a6:	3a01      	subs	r2, #1
 80126a8:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80126aa:	003b      	movs	r3, r7
 80126ac:	2200      	movs	r2, #0
 80126ae:	2180      	movs	r1, #128	; 0x80
 80126b0:	0020      	movs	r0, r4
 80126b2:	f7ff ff7f 	bl	80125b4 <UART_WaitOnFlagUntilTimeout>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d124      	bne.n	8012704 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126ba:	68a2      	ldr	r2, [r4, #8]
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	4542      	cmp	r2, r8
 80126c0:	d1eb      	bne.n	801269a <HAL_UART_Transmit+0x4e>
 80126c2:	6922      	ldr	r2, [r4, #16]
 80126c4:	2a00      	cmp	r2, #0
 80126c6:	d1e8      	bne.n	801269a <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80126c8:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 80126ca:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80126cc:	05d2      	lsls	r2, r2, #23
 80126ce:	0dd2      	lsrs	r2, r2, #23
 80126d0:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80126d2:	5ba2      	ldrh	r2, [r4, r6]
 80126d4:	2a00      	cmp	r2, #0
 80126d6:	d1e6      	bne.n	80126a6 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80126d8:	003b      	movs	r3, r7
 80126da:	2140      	movs	r1, #64	; 0x40
 80126dc:	0020      	movs	r0, r4
 80126de:	f7ff ff69 	bl	80125b4 <UART_WaitOnFlagUntilTimeout>
 80126e2:	2800      	cmp	r0, #0
 80126e4:	d10e      	bne.n	8012704 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80126e6:	2369      	movs	r3, #105	; 0x69
 80126e8:	5ce2      	ldrb	r2, [r4, r3]
 80126ea:	2a32      	cmp	r2, #50	; 0x32
 80126ec:	d00e      	beq.n	801270c <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 80126ee:	2201      	movs	r2, #1
 80126f0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80126f2:	2368      	movs	r3, #104	; 0x68
 80126f4:	2200      	movs	r2, #0
 80126f6:	54e2      	strb	r2, [r4, r3]
}
 80126f8:	bc04      	pop	{r2}
 80126fa:	4690      	mov	r8, r2
 80126fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80126fe:	3110      	adds	r1, #16
 8012700:	54e1      	strb	r1, [r4, r3]
 8012702:	e7c3      	b.n	801268c <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8012704:	2003      	movs	r0, #3
 8012706:	e7f7      	b.n	80126f8 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8012708:	2002      	movs	r0, #2
 801270a:	e7f5      	b.n	80126f8 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801270c:	3a10      	subs	r2, #16
 801270e:	54e2      	strb	r2, [r4, r3]
 8012710:	e7ef      	b.n	80126f2 <HAL_UART_Transmit+0xa6>
 8012712:	46c0      	nop			; (mov r8, r8)

08012714 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012714:	2300      	movs	r3, #0
{
 8012716:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012718:	4a1a      	ldr	r2, [pc, #104]	; (8012784 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801271a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801271c:	6803      	ldr	r3, [r0, #0]
{
 801271e:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012720:	4293      	cmp	r3, r2
 8012722:	d00d      	beq.n	8012740 <UART_CheckIdleState+0x2c>
 8012724:	4a18      	ldr	r2, [pc, #96]	; (8012788 <UART_CheckIdleState+0x74>)
 8012726:	4293      	cmp	r3, r2
 8012728:	d00a      	beq.n	8012740 <UART_CheckIdleState+0x2c>
 801272a:	4a18      	ldr	r2, [pc, #96]	; (801278c <UART_CheckIdleState+0x78>)
 801272c:	4293      	cmp	r3, r2
 801272e:	d007      	beq.n	8012740 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8012730:	2369      	movs	r3, #105	; 0x69
 8012732:	2201      	movs	r2, #1
 8012734:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012736:	2200      	movs	r2, #0
  return HAL_OK;
 8012738:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 801273a:	3b01      	subs	r3, #1
 801273c:	54e2      	strb	r2, [r4, r3]
}
 801273e:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	0712      	lsls	r2, r2, #28
 8012744:	d40e      	bmi.n	8012764 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	075b      	lsls	r3, r3, #29
 801274a:	d5f1      	bpl.n	8012730 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801274c:	23fa      	movs	r3, #250	; 0xfa
 801274e:	2180      	movs	r1, #128	; 0x80
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	2200      	movs	r2, #0
 8012754:	03c9      	lsls	r1, r1, #15
 8012756:	0020      	movs	r0, r4
 8012758:	f7ff ff2c 	bl	80125b4 <UART_WaitOnFlagUntilTimeout>
 801275c:	2800      	cmp	r0, #0
 801275e:	d0e7      	beq.n	8012730 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8012760:	2003      	movs	r0, #3
 8012762:	e7ec      	b.n	801273e <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012764:	23fa      	movs	r3, #250	; 0xfa
 8012766:	2180      	movs	r1, #128	; 0x80
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	2200      	movs	r2, #0
 801276c:	0389      	lsls	r1, r1, #14
 801276e:	0020      	movs	r0, r4
 8012770:	f7ff ff20 	bl	80125b4 <UART_WaitOnFlagUntilTimeout>
 8012774:	2800      	cmp	r0, #0
 8012776:	d1f3      	bne.n	8012760 <UART_CheckIdleState+0x4c>
 8012778:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	075b      	lsls	r3, r3, #29
 801277e:	d5d7      	bpl.n	8012730 <UART_CheckIdleState+0x1c>
 8012780:	e7e4      	b.n	801274c <UART_CheckIdleState+0x38>
 8012782:	46c0      	nop			; (mov r8, r8)
 8012784:	40013800 	.word	0x40013800
 8012788:	40004400 	.word	0x40004400
 801278c:	40004800 	.word	0x40004800

08012790 <HAL_UART_Init>:
{
 8012790:	b510      	push	{r4, lr}
 8012792:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012794:	d02a      	beq.n	80127ec <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8012796:	2369      	movs	r3, #105	; 0x69
 8012798:	5cc3      	ldrb	r3, [r0, r3]
 801279a:	b2db      	uxtb	r3, r3
 801279c:	2b00      	cmp	r3, #0
 801279e:	d020      	beq.n	80127e2 <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 80127a0:	2369      	movs	r3, #105	; 0x69
 80127a2:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 80127a4:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 80127a6:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80127a8:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127aa:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80127ac:	6813      	ldr	r3, [r2, #0]
 80127ae:	438b      	bics	r3, r1
 80127b0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127b2:	f7ff fdab 	bl	801230c <UART_SetConfig>
 80127b6:	2801      	cmp	r0, #1
 80127b8:	d018      	beq.n	80127ec <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80127ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d117      	bne.n	80127f0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80127c0:	6823      	ldr	r3, [r4, #0]
 80127c2:	490d      	ldr	r1, [pc, #52]	; (80127f8 <HAL_UART_Init+0x68>)
 80127c4:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80127c6:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80127c8:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80127ca:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80127cc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80127ce:	689a      	ldr	r2, [r3, #8]
 80127d0:	438a      	bics	r2, r1
 80127d2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	3929      	subs	r1, #41	; 0x29
 80127d8:	430a      	orrs	r2, r1
 80127da:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80127dc:	f7ff ff9a 	bl	8012714 <UART_CheckIdleState>
}
 80127e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80127e2:	2268      	movs	r2, #104	; 0x68
 80127e4:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80127e6:	f7fa fd5d 	bl	800d2a4 <HAL_UART_MspInit>
 80127ea:	e7d9      	b.n	80127a0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80127ec:	2001      	movs	r0, #1
 80127ee:	e7f7      	b.n	80127e0 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 80127f0:	0020      	movs	r0, r4
 80127f2:	f7ff fe77 	bl	80124e4 <UART_AdvFeatureConfig>
 80127f6:	e7e3      	b.n	80127c0 <HAL_UART_Init+0x30>
 80127f8:	ffffb7ff 	.word	0xffffb7ff

080127fc <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80127fc:	2269      	movs	r2, #105	; 0x69
{
 80127fe:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012800:	5c81      	ldrb	r1, [r0, r2]
{
 8012802:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012804:	2912      	cmp	r1, #18
 8012806:	d003      	beq.n	8012810 <UART_Transmit_IT+0x14>
 8012808:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 801280a:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801280c:	2a32      	cmp	r2, #50	; 0x32
 801280e:	d112      	bne.n	8012836 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012810:	2252      	movs	r2, #82	; 0x52
 8012812:	5a9a      	ldrh	r2, [r3, r2]
 8012814:	6819      	ldr	r1, [r3, #0]
 8012816:	2a00      	cmp	r2, #0
 8012818:	d00e      	beq.n	8012838 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801281a:	2480      	movs	r4, #128	; 0x80
 801281c:	689d      	ldr	r5, [r3, #8]
 801281e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012820:	0164      	lsls	r4, r4, #5
 8012822:	42a5      	cmp	r5, r4
 8012824:	d012      	beq.n	801284c <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012826:	1c44      	adds	r4, r0, #1
 8012828:	64dc      	str	r4, [r3, #76]	; 0x4c
 801282a:	7800      	ldrb	r0, [r0, #0]
 801282c:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 801282e:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8012830:	2000      	movs	r0, #0
      huart->TxXferCount--;
 8012832:	3a01      	subs	r2, #1
 8012834:	525a      	strh	r2, [r3, r1]
  }
}
 8012836:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012838:	680b      	ldr	r3, [r1, #0]
 801283a:	3280      	adds	r2, #128	; 0x80
 801283c:	4393      	bics	r3, r2
 801283e:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012840:	680b      	ldr	r3, [r1, #0]
 8012842:	3a40      	subs	r2, #64	; 0x40
 8012844:	4313      	orrs	r3, r2
 8012846:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8012848:	2000      	movs	r0, #0
 801284a:	e7f4      	b.n	8012836 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801284c:	691c      	ldr	r4, [r3, #16]
 801284e:	2c00      	cmp	r4, #0
 8012850:	d1e9      	bne.n	8012826 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012852:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8012854:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012856:	05e4      	lsls	r4, r4, #23
 8012858:	0de4      	lsrs	r4, r4, #23
 801285a:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 801285c:	64d8      	str	r0, [r3, #76]	; 0x4c
 801285e:	e7e6      	b.n	801282e <UART_Transmit_IT+0x32>

08012860 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012860:	2140      	movs	r1, #64	; 0x40
 8012862:	6803      	ldr	r3, [r0, #0]
{
 8012864:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	438a      	bics	r2, r1
 801286a:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801286c:	2269      	movs	r2, #105	; 0x69
 801286e:	5c81      	ldrb	r1, [r0, r2]
 8012870:	2932      	cmp	r1, #50	; 0x32
 8012872:	d008      	beq.n	8012886 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012874:	2401      	movs	r4, #1
 8012876:	6899      	ldr	r1, [r3, #8]
 8012878:	43a1      	bics	r1, r4
 801287a:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 801287c:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 801287e:	f7fa f9fb 	bl	800cc78 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012882:	2000      	movs	r0, #0
 8012884:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012886:	2322      	movs	r3, #34	; 0x22
 8012888:	5483      	strb	r3, [r0, r2]
 801288a:	e7f8      	b.n	801287e <UART_EndTransmit_IT+0x1e>

0801288c <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801288c:	2369      	movs	r3, #105	; 0x69
{
 801288e:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012890:	5cc2      	ldrb	r2, [r0, r3]
 8012892:	2a22      	cmp	r2, #34	; 0x22
 8012894:	d003      	beq.n	801289e <UART_Receive_IT+0x12>
 8012896:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012898:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801289a:	2b32      	cmp	r3, #50	; 0x32
 801289c:	d12b      	bne.n	80128f6 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 801289e:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128a0:	2180      	movs	r1, #128	; 0x80
 80128a2:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80128a4:	5ac3      	ldrh	r3, [r0, r3]
 80128a6:	6804      	ldr	r4, [r0, #0]
 80128a8:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128aa:	0149      	lsls	r1, r1, #5
 80128ac:	428d      	cmp	r5, r1
 80128ae:	d024      	beq.n	80128fa <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80128b0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80128b2:	1c54      	adds	r4, r2, #1
 80128b4:	400b      	ands	r3, r1
 80128b6:	6544      	str	r4, [r0, #84]	; 0x54
 80128b8:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80128ba:	225a      	movs	r2, #90	; 0x5a
 80128bc:	5a83      	ldrh	r3, [r0, r2]
 80128be:	3b01      	subs	r3, #1
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 80128c4:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d115      	bne.n	80128f6 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80128ca:	2120      	movs	r1, #32
 80128cc:	6803      	ldr	r3, [r0, #0]
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	438a      	bics	r2, r1
 80128d2:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80128d4:	2269      	movs	r2, #105	; 0x69
 80128d6:	5c81      	ldrb	r1, [r0, r2]
 80128d8:	2932      	cmp	r1, #50	; 0x32
 80128da:	d017      	beq.n	801290c <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80128dc:	6819      	ldr	r1, [r3, #0]
 80128de:	4c0d      	ldr	r4, [pc, #52]	; (8012914 <UART_Receive_IT+0x88>)
 80128e0:	4021      	ands	r1, r4
 80128e2:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80128e4:	6899      	ldr	r1, [r3, #8]
 80128e6:	3403      	adds	r4, #3
 80128e8:	34ff      	adds	r4, #255	; 0xff
 80128ea:	43a1      	bics	r1, r4
 80128ec:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 80128ee:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 80128f0:	f7fa fa04 	bl	800ccfc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80128f4:	2200      	movs	r2, #0
  }
}
 80128f6:	0010      	movs	r0, r2
 80128f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128fa:	6901      	ldr	r1, [r0, #16]
 80128fc:	2900      	cmp	r1, #0
 80128fe:	d1d7      	bne.n	80128b0 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012900:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8012902:	400b      	ands	r3, r1
 8012904:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012906:	3202      	adds	r2, #2
 8012908:	6542      	str	r2, [r0, #84]	; 0x54
 801290a:	e7d6      	b.n	80128ba <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801290c:	2312      	movs	r3, #18
 801290e:	5483      	strb	r3, [r0, r2]
 8012910:	e7ee      	b.n	80128f0 <UART_Receive_IT+0x64>
 8012912:	46c0      	nop			; (mov r8, r8)
 8012914:	fffffeff 	.word	0xfffffeff

08012918 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012918:	4770      	bx	lr
 801291a:	46c0      	nop			; (mov r8, r8)

0801291c <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801291c:	2201      	movs	r2, #1
 801291e:	6803      	ldr	r3, [r0, #0]
{
 8012920:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012922:	69d9      	ldr	r1, [r3, #28]
{
 8012924:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012926:	420a      	tst	r2, r1
 8012928:	d002      	beq.n	8012930 <HAL_UART_IRQHandler+0x14>
 801292a:	6819      	ldr	r1, [r3, #0]
 801292c:	05c9      	lsls	r1, r1, #23
 801292e:	d456      	bmi.n	80129de <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012930:	2202      	movs	r2, #2
 8012932:	69d9      	ldr	r1, [r3, #28]
 8012934:	420a      	tst	r2, r1
 8012936:	d003      	beq.n	8012940 <HAL_UART_IRQHandler+0x24>
 8012938:	2101      	movs	r1, #1
 801293a:	6898      	ldr	r0, [r3, #8]
 801293c:	4201      	tst	r1, r0
 801293e:	d146      	bne.n	80129ce <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012940:	2204      	movs	r2, #4
 8012942:	69d9      	ldr	r1, [r3, #28]
 8012944:	420a      	tst	r2, r1
 8012946:	d003      	beq.n	8012950 <HAL_UART_IRQHandler+0x34>
 8012948:	2101      	movs	r1, #1
 801294a:	6898      	ldr	r0, [r3, #8]
 801294c:	4201      	tst	r1, r0
 801294e:	d136      	bne.n	80129be <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012950:	2208      	movs	r2, #8
 8012952:	69d9      	ldr	r1, [r3, #28]
 8012954:	420a      	tst	r2, r1
 8012956:	d003      	beq.n	8012960 <HAL_UART_IRQHandler+0x44>
 8012958:	2101      	movs	r1, #1
 801295a:	6898      	ldr	r0, [r3, #8]
 801295c:	4201      	tst	r1, r0
 801295e:	d120      	bne.n	80129a2 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012960:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012962:	2a00      	cmp	r2, #0
 8012964:	d126      	bne.n	80129b4 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012966:	2280      	movs	r2, #128	; 0x80
 8012968:	69d9      	ldr	r1, [r3, #28]
 801296a:	0352      	lsls	r2, r2, #13
 801296c:	4211      	tst	r1, r2
 801296e:	d002      	beq.n	8012976 <HAL_UART_IRQHandler+0x5a>
 8012970:	6899      	ldr	r1, [r3, #8]
 8012972:	0249      	lsls	r1, r1, #9
 8012974:	d43e      	bmi.n	80129f4 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012976:	2220      	movs	r2, #32
 8012978:	69d9      	ldr	r1, [r3, #28]
 801297a:	420a      	tst	r2, r1
 801297c:	d002      	beq.n	8012984 <HAL_UART_IRQHandler+0x68>
 801297e:	6819      	ldr	r1, [r3, #0]
 8012980:	420a      	tst	r2, r1
 8012982:	d140      	bne.n	8012a06 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012984:	2280      	movs	r2, #128	; 0x80
 8012986:	69d9      	ldr	r1, [r3, #28]
 8012988:	420a      	tst	r2, r1
 801298a:	d002      	beq.n	8012992 <HAL_UART_IRQHandler+0x76>
 801298c:	6819      	ldr	r1, [r3, #0]
 801298e:	420a      	tst	r2, r1
 8012990:	d142      	bne.n	8012a18 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012992:	2240      	movs	r2, #64	; 0x40
 8012994:	69d9      	ldr	r1, [r3, #28]
 8012996:	420a      	tst	r2, r1
 8012998:	d002      	beq.n	80129a0 <HAL_UART_IRQHandler+0x84>
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	421a      	tst	r2, r3
 801299e:	d125      	bne.n	80129ec <HAL_UART_IRQHandler+0xd0>
}
 80129a0:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80129a2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80129a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80129a6:	4302      	orrs	r2, r0
 80129a8:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129aa:	2269      	movs	r2, #105	; 0x69
 80129ac:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129ae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80129b0:	2a00      	cmp	r2, #0
 80129b2:	d0d8      	beq.n	8012966 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 80129b4:	0020      	movs	r0, r4
 80129b6:	f7fa f97d 	bl	800ccb4 <HAL_UART_ErrorCallback>
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	e7d3      	b.n	8012966 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129be:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80129c0:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80129c4:	4302      	orrs	r2, r0
 80129c6:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129c8:	2269      	movs	r2, #105	; 0x69
 80129ca:	54a1      	strb	r1, [r4, r2]
 80129cc:	e7c0      	b.n	8012950 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129ce:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80129d0:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80129d4:	4302      	orrs	r2, r0
 80129d6:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129d8:	2269      	movs	r2, #105	; 0x69
 80129da:	54a1      	strb	r1, [r4, r2]
 80129dc:	e7b0      	b.n	8012940 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80129de:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129e0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80129e2:	4311      	orrs	r1, r2
 80129e4:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129e6:	2169      	movs	r1, #105	; 0x69
 80129e8:	5442      	strb	r2, [r0, r1]
 80129ea:	e7a1      	b.n	8012930 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 80129ec:	0020      	movs	r0, r4
 80129ee:	f7ff ff37 	bl	8012860 <UART_EndTransmit_IT>
}
 80129f2:	e7d5      	b.n	80129a0 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80129f4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80129f6:	2369      	movs	r3, #105	; 0x69
 80129f8:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 80129fa:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 80129fc:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80129fe:	f7ff ff8b 	bl	8012918 <HAL_UARTEx_WakeupCallback>
 8012a02:	6823      	ldr	r3, [r4, #0]
 8012a04:	e7b7      	b.n	8012976 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8012a06:	0020      	movs	r0, r4
 8012a08:	f7ff ff40 	bl	801288c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a0c:	2108      	movs	r1, #8
 8012a0e:	6823      	ldr	r3, [r4, #0]
 8012a10:	699a      	ldr	r2, [r3, #24]
 8012a12:	430a      	orrs	r2, r1
 8012a14:	619a      	str	r2, [r3, #24]
 8012a16:	e7b5      	b.n	8012984 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8012a18:	0020      	movs	r0, r4
 8012a1a:	f7ff feef 	bl	80127fc <UART_Transmit_IT>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	e7b7      	b.n	8012992 <HAL_UART_IRQHandler+0x76>
 8012a22:	46c0      	nop			; (mov r8, r8)

08012a24 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012a24:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012a26:	f7f1 fe61 	bl	80046ec <Module_Init>
 8012a2a:	e7fe      	b.n	8012a2a <main+0x6>

08012a2c <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012a2c:	e7fe      	b.n	8012a2c <UserTask>
 8012a2e:	46c0      	nop			; (mov r8, r8)

08012a30 <atof>:
 8012a30:	b510      	push	{r4, lr}
 8012a32:	2100      	movs	r1, #0
 8012a34:	f001 fb74 	bl	8014120 <strtod>
 8012a38:	bd10      	pop	{r4, pc}

08012a3a <atoi>:
 8012a3a:	b510      	push	{r4, lr}
 8012a3c:	220a      	movs	r2, #10
 8012a3e:	2100      	movs	r1, #0
 8012a40:	f001 fc3a 	bl	80142b8 <strtol>
 8012a44:	bd10      	pop	{r4, pc}

08012a46 <atol>:
 8012a46:	b510      	push	{r4, lr}
 8012a48:	220a      	movs	r2, #10
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	f001 fc34 	bl	80142b8 <strtol>
 8012a50:	bd10      	pop	{r4, pc}
	...

08012a54 <calloc>:
 8012a54:	b510      	push	{r4, lr}
 8012a56:	4b03      	ldr	r3, [pc, #12]	; (8012a64 <calloc+0x10>)
 8012a58:	000a      	movs	r2, r1
 8012a5a:	0001      	movs	r1, r0
 8012a5c:	6818      	ldr	r0, [r3, #0]
 8012a5e:	f000 f803 	bl	8012a68 <_calloc_r>
 8012a62:	bd10      	pop	{r4, pc}
 8012a64:	200000c8 	.word	0x200000c8

08012a68 <_calloc_r>:
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	4351      	muls	r1, r2
 8012a6c:	f000 f872 	bl	8012b54 <_malloc_r>
 8012a70:	1e04      	subs	r4, r0, #0
 8012a72:	d01a      	beq.n	8012aaa <_calloc_r+0x42>
 8012a74:	0003      	movs	r3, r0
 8012a76:	3b08      	subs	r3, #8
 8012a78:	685a      	ldr	r2, [r3, #4]
 8012a7a:	2303      	movs	r3, #3
 8012a7c:	439a      	bics	r2, r3
 8012a7e:	3a04      	subs	r2, #4
 8012a80:	2a24      	cmp	r2, #36	; 0x24
 8012a82:	d819      	bhi.n	8012ab8 <_calloc_r+0x50>
 8012a84:	0003      	movs	r3, r0
 8012a86:	2a13      	cmp	r2, #19
 8012a88:	d90b      	bls.n	8012aa2 <_calloc_r+0x3a>
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	3308      	adds	r3, #8
 8012a8e:	6001      	str	r1, [r0, #0]
 8012a90:	6041      	str	r1, [r0, #4]
 8012a92:	2a1b      	cmp	r2, #27
 8012a94:	d905      	bls.n	8012aa2 <_calloc_r+0x3a>
 8012a96:	6081      	str	r1, [r0, #8]
 8012a98:	60c1      	str	r1, [r0, #12]
 8012a9a:	2a24      	cmp	r2, #36	; 0x24
 8012a9c:	d007      	beq.n	8012aae <_calloc_r+0x46>
 8012a9e:	0003      	movs	r3, r0
 8012aa0:	3310      	adds	r3, #16
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	601a      	str	r2, [r3, #0]
 8012aa6:	605a      	str	r2, [r3, #4]
 8012aa8:	609a      	str	r2, [r3, #8]
 8012aaa:	0020      	movs	r0, r4
 8012aac:	bd10      	pop	{r4, pc}
 8012aae:	0003      	movs	r3, r0
 8012ab0:	6101      	str	r1, [r0, #16]
 8012ab2:	3318      	adds	r3, #24
 8012ab4:	6141      	str	r1, [r0, #20]
 8012ab6:	e7f4      	b.n	8012aa2 <_calloc_r+0x3a>
 8012ab8:	2100      	movs	r1, #0
 8012aba:	f000 fa8d 	bl	8012fd8 <memset>
 8012abe:	e7f4      	b.n	8012aaa <_calloc_r+0x42>

08012ac0 <__libc_init_array>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	2600      	movs	r6, #0
 8012ac4:	4d0c      	ldr	r5, [pc, #48]	; (8012af8 <__libc_init_array+0x38>)
 8012ac6:	4c0d      	ldr	r4, [pc, #52]	; (8012afc <__libc_init_array+0x3c>)
 8012ac8:	1b64      	subs	r4, r4, r5
 8012aca:	10a4      	asrs	r4, r4, #2
 8012acc:	42a6      	cmp	r6, r4
 8012ace:	d109      	bne.n	8012ae4 <__libc_init_array+0x24>
 8012ad0:	2600      	movs	r6, #0
 8012ad2:	f004 fe41 	bl	8017758 <_init>
 8012ad6:	4d0a      	ldr	r5, [pc, #40]	; (8012b00 <__libc_init_array+0x40>)
 8012ad8:	4c0a      	ldr	r4, [pc, #40]	; (8012b04 <__libc_init_array+0x44>)
 8012ada:	1b64      	subs	r4, r4, r5
 8012adc:	10a4      	asrs	r4, r4, #2
 8012ade:	42a6      	cmp	r6, r4
 8012ae0:	d105      	bne.n	8012aee <__libc_init_array+0x2e>
 8012ae2:	bd70      	pop	{r4, r5, r6, pc}
 8012ae4:	00b3      	lsls	r3, r6, #2
 8012ae6:	58eb      	ldr	r3, [r5, r3]
 8012ae8:	4798      	blx	r3
 8012aea:	3601      	adds	r6, #1
 8012aec:	e7ee      	b.n	8012acc <__libc_init_array+0xc>
 8012aee:	00b3      	lsls	r3, r6, #2
 8012af0:	58eb      	ldr	r3, [r5, r3]
 8012af2:	4798      	blx	r3
 8012af4:	3601      	adds	r6, #1
 8012af6:	e7f2      	b.n	8012ade <__libc_init_array+0x1e>
 8012af8:	0801a92c 	.word	0x0801a92c
 8012afc:	0801a92c 	.word	0x0801a92c
 8012b00:	0801a92c 	.word	0x0801a92c
 8012b04:	0801a934 	.word	0x0801a934

08012b08 <__locale_ctype_ptr_l>:
 8012b08:	30ec      	adds	r0, #236	; 0xec
 8012b0a:	6800      	ldr	r0, [r0, #0]
 8012b0c:	4770      	bx	lr
	...

08012b10 <__locale_ctype_ptr>:
 8012b10:	4b04      	ldr	r3, [pc, #16]	; (8012b24 <__locale_ctype_ptr+0x14>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d100      	bne.n	8012b1c <__locale_ctype_ptr+0xc>
 8012b1a:	4b03      	ldr	r3, [pc, #12]	; (8012b28 <__locale_ctype_ptr+0x18>)
 8012b1c:	33ec      	adds	r3, #236	; 0xec
 8012b1e:	6818      	ldr	r0, [r3, #0]
 8012b20:	4770      	bx	lr
 8012b22:	46c0      	nop			; (mov r8, r8)
 8012b24:	200000c8 	.word	0x200000c8
 8012b28:	200004f8 	.word	0x200004f8

08012b2c <malloc>:
 8012b2c:	b510      	push	{r4, lr}
 8012b2e:	4b03      	ldr	r3, [pc, #12]	; (8012b3c <malloc+0x10>)
 8012b30:	0001      	movs	r1, r0
 8012b32:	6818      	ldr	r0, [r3, #0]
 8012b34:	f000 f80e 	bl	8012b54 <_malloc_r>
 8012b38:	bd10      	pop	{r4, pc}
 8012b3a:	46c0      	nop			; (mov r8, r8)
 8012b3c:	200000c8 	.word	0x200000c8

08012b40 <free>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	4b03      	ldr	r3, [pc, #12]	; (8012b50 <free+0x10>)
 8012b44:	0001      	movs	r1, r0
 8012b46:	6818      	ldr	r0, [r3, #0]
 8012b48:	f003 fd10 	bl	801656c <_free_r>
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	46c0      	nop			; (mov r8, r8)
 8012b50:	200000c8 	.word	0x200000c8

08012b54 <_malloc_r>:
 8012b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b56:	000d      	movs	r5, r1
 8012b58:	b085      	sub	sp, #20
 8012b5a:	350b      	adds	r5, #11
 8012b5c:	9001      	str	r0, [sp, #4]
 8012b5e:	2d16      	cmp	r5, #22
 8012b60:	d908      	bls.n	8012b74 <_malloc_r+0x20>
 8012b62:	2307      	movs	r3, #7
 8012b64:	439d      	bics	r5, r3
 8012b66:	d506      	bpl.n	8012b76 <_malloc_r+0x22>
 8012b68:	230c      	movs	r3, #12
 8012b6a:	9a01      	ldr	r2, [sp, #4]
 8012b6c:	6013      	str	r3, [r2, #0]
 8012b6e:	2000      	movs	r0, #0
 8012b70:	b005      	add	sp, #20
 8012b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b74:	2510      	movs	r5, #16
 8012b76:	428d      	cmp	r5, r1
 8012b78:	d3f6      	bcc.n	8012b68 <_malloc_r+0x14>
 8012b7a:	9801      	ldr	r0, [sp, #4]
 8012b7c:	f000 fa34 	bl	8012fe8 <__malloc_lock>
 8012b80:	23f8      	movs	r3, #248	; 0xf8
 8012b82:	33ff      	adds	r3, #255	; 0xff
 8012b84:	4ac4      	ldr	r2, [pc, #784]	; (8012e98 <_malloc_r+0x344>)
 8012b86:	429d      	cmp	r5, r3
 8012b88:	d820      	bhi.n	8012bcc <_malloc_r+0x78>
 8012b8a:	0029      	movs	r1, r5
 8012b8c:	3108      	adds	r1, #8
 8012b8e:	1851      	adds	r1, r2, r1
 8012b90:	0008      	movs	r0, r1
 8012b92:	684c      	ldr	r4, [r1, #4]
 8012b94:	3808      	subs	r0, #8
 8012b96:	08eb      	lsrs	r3, r5, #3
 8012b98:	4284      	cmp	r4, r0
 8012b9a:	d104      	bne.n	8012ba6 <_malloc_r+0x52>
 8012b9c:	68cc      	ldr	r4, [r1, #12]
 8012b9e:	3302      	adds	r3, #2
 8012ba0:	469c      	mov	ip, r3
 8012ba2:	42a1      	cmp	r1, r4
 8012ba4:	d02a      	beq.n	8012bfc <_malloc_r+0xa8>
 8012ba6:	2303      	movs	r3, #3
 8012ba8:	6862      	ldr	r2, [r4, #4]
 8012baa:	68a1      	ldr	r1, [r4, #8]
 8012bac:	439a      	bics	r2, r3
 8012bae:	0013      	movs	r3, r2
 8012bb0:	68e2      	ldr	r2, [r4, #12]
 8012bb2:	18e3      	adds	r3, r4, r3
 8012bb4:	60ca      	str	r2, [r1, #12]
 8012bb6:	6091      	str	r1, [r2, #8]
 8012bb8:	2201      	movs	r2, #1
 8012bba:	6859      	ldr	r1, [r3, #4]
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	605a      	str	r2, [r3, #4]
 8012bc0:	9801      	ldr	r0, [sp, #4]
 8012bc2:	f000 fa19 	bl	8012ff8 <__malloc_unlock>
 8012bc6:	0020      	movs	r0, r4
 8012bc8:	3008      	adds	r0, #8
 8012bca:	e7d1      	b.n	8012b70 <_malloc_r+0x1c>
 8012bcc:	0a69      	lsrs	r1, r5, #9
 8012bce:	233f      	movs	r3, #63	; 0x3f
 8012bd0:	2900      	cmp	r1, #0
 8012bd2:	d003      	beq.n	8012bdc <_malloc_r+0x88>
 8012bd4:	2904      	cmp	r1, #4
 8012bd6:	d828      	bhi.n	8012c2a <_malloc_r+0xd6>
 8012bd8:	09ab      	lsrs	r3, r5, #6
 8012bda:	3338      	adds	r3, #56	; 0x38
 8012bdc:	2103      	movs	r1, #3
 8012bde:	468c      	mov	ip, r1
 8012be0:	00d8      	lsls	r0, r3, #3
 8012be2:	1880      	adds	r0, r0, r2
 8012be4:	68c4      	ldr	r4, [r0, #12]
 8012be6:	4284      	cmp	r4, r0
 8012be8:	d006      	beq.n	8012bf8 <_malloc_r+0xa4>
 8012bea:	4666      	mov	r6, ip
 8012bec:	6861      	ldr	r1, [r4, #4]
 8012bee:	43b1      	bics	r1, r6
 8012bf0:	1b4f      	subs	r7, r1, r5
 8012bf2:	2f0f      	cmp	r7, #15
 8012bf4:	dd31      	ble.n	8012c5a <_malloc_r+0x106>
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	469c      	mov	ip, r3
 8012bfc:	6914      	ldr	r4, [r2, #16]
 8012bfe:	49a7      	ldr	r1, [pc, #668]	; (8012e9c <_malloc_r+0x348>)
 8012c00:	428c      	cmp	r4, r1
 8012c02:	d055      	beq.n	8012cb0 <_malloc_r+0x15c>
 8012c04:	2303      	movs	r3, #3
 8012c06:	6860      	ldr	r0, [r4, #4]
 8012c08:	4398      	bics	r0, r3
 8012c0a:	0003      	movs	r3, r0
 8012c0c:	1b46      	subs	r6, r0, r5
 8012c0e:	2e0f      	cmp	r6, #15
 8012c10:	dd31      	ble.n	8012c76 <_malloc_r+0x122>
 8012c12:	2701      	movs	r7, #1
 8012c14:	1960      	adds	r0, r4, r5
 8012c16:	433d      	orrs	r5, r7
 8012c18:	4337      	orrs	r7, r6
 8012c1a:	6065      	str	r5, [r4, #4]
 8012c1c:	6150      	str	r0, [r2, #20]
 8012c1e:	6110      	str	r0, [r2, #16]
 8012c20:	60c1      	str	r1, [r0, #12]
 8012c22:	6081      	str	r1, [r0, #8]
 8012c24:	6047      	str	r7, [r0, #4]
 8012c26:	50e6      	str	r6, [r4, r3]
 8012c28:	e7ca      	b.n	8012bc0 <_malloc_r+0x6c>
 8012c2a:	2914      	cmp	r1, #20
 8012c2c:	d802      	bhi.n	8012c34 <_malloc_r+0xe0>
 8012c2e:	000b      	movs	r3, r1
 8012c30:	335b      	adds	r3, #91	; 0x5b
 8012c32:	e7d3      	b.n	8012bdc <_malloc_r+0x88>
 8012c34:	2954      	cmp	r1, #84	; 0x54
 8012c36:	d802      	bhi.n	8012c3e <_malloc_r+0xea>
 8012c38:	0b2b      	lsrs	r3, r5, #12
 8012c3a:	336e      	adds	r3, #110	; 0x6e
 8012c3c:	e7ce      	b.n	8012bdc <_malloc_r+0x88>
 8012c3e:	23aa      	movs	r3, #170	; 0xaa
 8012c40:	005b      	lsls	r3, r3, #1
 8012c42:	4299      	cmp	r1, r3
 8012c44:	d802      	bhi.n	8012c4c <_malloc_r+0xf8>
 8012c46:	0beb      	lsrs	r3, r5, #15
 8012c48:	3377      	adds	r3, #119	; 0x77
 8012c4a:	e7c7      	b.n	8012bdc <_malloc_r+0x88>
 8012c4c:	4894      	ldr	r0, [pc, #592]	; (8012ea0 <_malloc_r+0x34c>)
 8012c4e:	237e      	movs	r3, #126	; 0x7e
 8012c50:	4281      	cmp	r1, r0
 8012c52:	d8c3      	bhi.n	8012bdc <_malloc_r+0x88>
 8012c54:	0cab      	lsrs	r3, r5, #18
 8012c56:	337c      	adds	r3, #124	; 0x7c
 8012c58:	e7c0      	b.n	8012bdc <_malloc_r+0x88>
 8012c5a:	68e6      	ldr	r6, [r4, #12]
 8012c5c:	2f00      	cmp	r7, #0
 8012c5e:	db08      	blt.n	8012c72 <_malloc_r+0x11e>
 8012c60:	68a3      	ldr	r3, [r4, #8]
 8012c62:	1861      	adds	r1, r4, r1
 8012c64:	60de      	str	r6, [r3, #12]
 8012c66:	60b3      	str	r3, [r6, #8]
 8012c68:	2301      	movs	r3, #1
 8012c6a:	684a      	ldr	r2, [r1, #4]
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	604b      	str	r3, [r1, #4]
 8012c70:	e7a6      	b.n	8012bc0 <_malloc_r+0x6c>
 8012c72:	0034      	movs	r4, r6
 8012c74:	e7b7      	b.n	8012be6 <_malloc_r+0x92>
 8012c76:	6151      	str	r1, [r2, #20]
 8012c78:	6111      	str	r1, [r2, #16]
 8012c7a:	2e00      	cmp	r6, #0
 8012c7c:	db05      	blt.n	8012c8a <_malloc_r+0x136>
 8012c7e:	2101      	movs	r1, #1
 8012c80:	1823      	adds	r3, r4, r0
 8012c82:	685a      	ldr	r2, [r3, #4]
 8012c84:	4311      	orrs	r1, r2
 8012c86:	6059      	str	r1, [r3, #4]
 8012c88:	e79a      	b.n	8012bc0 <_malloc_r+0x6c>
 8012c8a:	4986      	ldr	r1, [pc, #536]	; (8012ea4 <_malloc_r+0x350>)
 8012c8c:	6857      	ldr	r7, [r2, #4]
 8012c8e:	4288      	cmp	r0, r1
 8012c90:	d900      	bls.n	8012c94 <_malloc_r+0x140>
 8012c92:	e090      	b.n	8012db6 <_malloc_r+0x262>
 8012c94:	08c3      	lsrs	r3, r0, #3
 8012c96:	39ff      	subs	r1, #255	; 0xff
 8012c98:	1098      	asrs	r0, r3, #2
 8012c9a:	39ff      	subs	r1, #255	; 0xff
 8012c9c:	4081      	lsls	r1, r0
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	4339      	orrs	r1, r7
 8012ca2:	6051      	str	r1, [r2, #4]
 8012ca4:	189a      	adds	r2, r3, r2
 8012ca6:	6893      	ldr	r3, [r2, #8]
 8012ca8:	60e2      	str	r2, [r4, #12]
 8012caa:	60a3      	str	r3, [r4, #8]
 8012cac:	6094      	str	r4, [r2, #8]
 8012cae:	60dc      	str	r4, [r3, #12]
 8012cb0:	4663      	mov	r3, ip
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	4978      	ldr	r1, [pc, #480]	; (8012e98 <_malloc_r+0x344>)
 8012cb6:	109b      	asrs	r3, r3, #2
 8012cb8:	6848      	ldr	r0, [r1, #4]
 8012cba:	409a      	lsls	r2, r3
 8012cbc:	4290      	cmp	r0, r2
 8012cbe:	d32d      	bcc.n	8012d1c <_malloc_r+0x1c8>
 8012cc0:	4202      	tst	r2, r0
 8012cc2:	d109      	bne.n	8012cd8 <_malloc_r+0x184>
 8012cc4:	2303      	movs	r3, #3
 8012cc6:	4664      	mov	r4, ip
 8012cc8:	439c      	bics	r4, r3
 8012cca:	0023      	movs	r3, r4
 8012ccc:	3304      	adds	r3, #4
 8012cce:	469c      	mov	ip, r3
 8012cd0:	0052      	lsls	r2, r2, #1
 8012cd2:	4202      	tst	r2, r0
 8012cd4:	d100      	bne.n	8012cd8 <_malloc_r+0x184>
 8012cd6:	e0a4      	b.n	8012e22 <_malloc_r+0x2ce>
 8012cd8:	4663      	mov	r3, ip
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	18cb      	adds	r3, r1, r3
 8012cde:	9303      	str	r3, [sp, #12]
 8012ce0:	001f      	movs	r7, r3
 8012ce2:	4663      	mov	r3, ip
 8012ce4:	9302      	str	r3, [sp, #8]
 8012ce6:	68fc      	ldr	r4, [r7, #12]
 8012ce8:	42bc      	cmp	r4, r7
 8012cea:	d000      	beq.n	8012cee <_malloc_r+0x19a>
 8012cec:	e09c      	b.n	8012e28 <_malloc_r+0x2d4>
 8012cee:	2003      	movs	r0, #3
 8012cf0:	9b02      	ldr	r3, [sp, #8]
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	9302      	str	r3, [sp, #8]
 8012cf8:	4203      	tst	r3, r0
 8012cfa:	d1f4      	bne.n	8012ce6 <_malloc_r+0x192>
 8012cfc:	4663      	mov	r3, ip
 8012cfe:	2003      	movs	r0, #3
 8012d00:	4203      	tst	r3, r0
 8012d02:	d000      	beq.n	8012d06 <_malloc_r+0x1b2>
 8012d04:	e0b3      	b.n	8012e6e <_malloc_r+0x31a>
 8012d06:	684b      	ldr	r3, [r1, #4]
 8012d08:	4393      	bics	r3, r2
 8012d0a:	604b      	str	r3, [r1, #4]
 8012d0c:	4b62      	ldr	r3, [pc, #392]	; (8012e98 <_malloc_r+0x344>)
 8012d0e:	0052      	lsls	r2, r2, #1
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4293      	cmp	r3, r2
 8012d14:	d302      	bcc.n	8012d1c <_malloc_r+0x1c8>
 8012d16:	2a00      	cmp	r2, #0
 8012d18:	d000      	beq.n	8012d1c <_malloc_r+0x1c8>
 8012d1a:	e0b9      	b.n	8012e90 <_malloc_r+0x33c>
 8012d1c:	2303      	movs	r3, #3
 8012d1e:	688f      	ldr	r7, [r1, #8]
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	439a      	bics	r2, r3
 8012d24:	9202      	str	r2, [sp, #8]
 8012d26:	42aa      	cmp	r2, r5
 8012d28:	d303      	bcc.n	8012d32 <_malloc_r+0x1de>
 8012d2a:	1b52      	subs	r2, r2, r5
 8012d2c:	2a0f      	cmp	r2, #15
 8012d2e:	dd00      	ble.n	8012d32 <_malloc_r+0x1de>
 8012d30:	e116      	b.n	8012f60 <_malloc_r+0x40c>
 8012d32:	4b5d      	ldr	r3, [pc, #372]	; (8012ea8 <_malloc_r+0x354>)
 8012d34:	2008      	movs	r0, #8
 8012d36:	681e      	ldr	r6, [r3, #0]
 8012d38:	f002 fd26 	bl	8015788 <sysconf>
 8012d3c:	4b5b      	ldr	r3, [pc, #364]	; (8012eac <_malloc_r+0x358>)
 8012d3e:	3610      	adds	r6, #16
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	1976      	adds	r6, r6, r5
 8012d44:	9003      	str	r0, [sp, #12]
 8012d46:	3301      	adds	r3, #1
 8012d48:	d003      	beq.n	8012d52 <_malloc_r+0x1fe>
 8012d4a:	3e01      	subs	r6, #1
 8012d4c:	1836      	adds	r6, r6, r0
 8012d4e:	4243      	negs	r3, r0
 8012d50:	401e      	ands	r6, r3
 8012d52:	0031      	movs	r1, r6
 8012d54:	9801      	ldr	r0, [sp, #4]
 8012d56:	f000 fb27 	bl	80133a8 <_sbrk_r>
 8012d5a:	0004      	movs	r4, r0
 8012d5c:	1c43      	adds	r3, r0, #1
 8012d5e:	d100      	bne.n	8012d62 <_malloc_r+0x20e>
 8012d60:	e0d6      	b.n	8012f10 <_malloc_r+0x3bc>
 8012d62:	9b02      	ldr	r3, [sp, #8]
 8012d64:	18fb      	adds	r3, r7, r3
 8012d66:	4283      	cmp	r3, r0
 8012d68:	d903      	bls.n	8012d72 <_malloc_r+0x21e>
 8012d6a:	4a4b      	ldr	r2, [pc, #300]	; (8012e98 <_malloc_r+0x344>)
 8012d6c:	4297      	cmp	r7, r2
 8012d6e:	d000      	beq.n	8012d72 <_malloc_r+0x21e>
 8012d70:	e0ce      	b.n	8012f10 <_malloc_r+0x3bc>
 8012d72:	494f      	ldr	r1, [pc, #316]	; (8012eb0 <_malloc_r+0x35c>)
 8012d74:	680a      	ldr	r2, [r1, #0]
 8012d76:	18b2      	adds	r2, r6, r2
 8012d78:	600a      	str	r2, [r1, #0]
 8012d7a:	9903      	ldr	r1, [sp, #12]
 8012d7c:	4694      	mov	ip, r2
 8012d7e:	1e48      	subs	r0, r1, #1
 8012d80:	42a3      	cmp	r3, r4
 8012d82:	d000      	beq.n	8012d86 <_malloc_r+0x232>
 8012d84:	e09a      	b.n	8012ebc <_malloc_r+0x368>
 8012d86:	4203      	tst	r3, r0
 8012d88:	d000      	beq.n	8012d8c <_malloc_r+0x238>
 8012d8a:	e097      	b.n	8012ebc <_malloc_r+0x368>
 8012d8c:	9a02      	ldr	r2, [sp, #8]
 8012d8e:	4b42      	ldr	r3, [pc, #264]	; (8012e98 <_malloc_r+0x344>)
 8012d90:	1992      	adds	r2, r2, r6
 8012d92:	2601      	movs	r6, #1
 8012d94:	689b      	ldr	r3, [r3, #8]
 8012d96:	4316      	orrs	r6, r2
 8012d98:	605e      	str	r6, [r3, #4]
 8012d9a:	4b45      	ldr	r3, [pc, #276]	; (8012eb0 <_malloc_r+0x35c>)
 8012d9c:	4a45      	ldr	r2, [pc, #276]	; (8012eb4 <_malloc_r+0x360>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	6811      	ldr	r1, [r2, #0]
 8012da2:	428b      	cmp	r3, r1
 8012da4:	d900      	bls.n	8012da8 <_malloc_r+0x254>
 8012da6:	6013      	str	r3, [r2, #0]
 8012da8:	4a43      	ldr	r2, [pc, #268]	; (8012eb8 <_malloc_r+0x364>)
 8012daa:	6811      	ldr	r1, [r2, #0]
 8012dac:	428b      	cmp	r3, r1
 8012dae:	d800      	bhi.n	8012db2 <_malloc_r+0x25e>
 8012db0:	e0ae      	b.n	8012f10 <_malloc_r+0x3bc>
 8012db2:	6013      	str	r3, [r2, #0]
 8012db4:	e0ac      	b.n	8012f10 <_malloc_r+0x3bc>
 8012db6:	0a40      	lsrs	r0, r0, #9
 8012db8:	2804      	cmp	r0, #4
 8012dba:	d810      	bhi.n	8012dde <_malloc_r+0x28a>
 8012dbc:	0999      	lsrs	r1, r3, #6
 8012dbe:	3138      	adds	r1, #56	; 0x38
 8012dc0:	00ce      	lsls	r6, r1, #3
 8012dc2:	18b6      	adds	r6, r6, r2
 8012dc4:	68b0      	ldr	r0, [r6, #8]
 8012dc6:	4286      	cmp	r6, r0
 8012dc8:	d124      	bne.n	8012e14 <_malloc_r+0x2c0>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	1089      	asrs	r1, r1, #2
 8012dce:	408b      	lsls	r3, r1
 8012dd0:	433b      	orrs	r3, r7
 8012dd2:	6053      	str	r3, [r2, #4]
 8012dd4:	60e6      	str	r6, [r4, #12]
 8012dd6:	60a0      	str	r0, [r4, #8]
 8012dd8:	60b4      	str	r4, [r6, #8]
 8012dda:	60c4      	str	r4, [r0, #12]
 8012ddc:	e768      	b.n	8012cb0 <_malloc_r+0x15c>
 8012dde:	2814      	cmp	r0, #20
 8012de0:	d802      	bhi.n	8012de8 <_malloc_r+0x294>
 8012de2:	0001      	movs	r1, r0
 8012de4:	315b      	adds	r1, #91	; 0x5b
 8012de6:	e7eb      	b.n	8012dc0 <_malloc_r+0x26c>
 8012de8:	2854      	cmp	r0, #84	; 0x54
 8012dea:	d802      	bhi.n	8012df2 <_malloc_r+0x29e>
 8012dec:	0b19      	lsrs	r1, r3, #12
 8012dee:	316e      	adds	r1, #110	; 0x6e
 8012df0:	e7e6      	b.n	8012dc0 <_malloc_r+0x26c>
 8012df2:	21aa      	movs	r1, #170	; 0xaa
 8012df4:	0049      	lsls	r1, r1, #1
 8012df6:	4288      	cmp	r0, r1
 8012df8:	d802      	bhi.n	8012e00 <_malloc_r+0x2ac>
 8012dfa:	0bd9      	lsrs	r1, r3, #15
 8012dfc:	3177      	adds	r1, #119	; 0x77
 8012dfe:	e7df      	b.n	8012dc0 <_malloc_r+0x26c>
 8012e00:	4e27      	ldr	r6, [pc, #156]	; (8012ea0 <_malloc_r+0x34c>)
 8012e02:	217e      	movs	r1, #126	; 0x7e
 8012e04:	42b0      	cmp	r0, r6
 8012e06:	d8db      	bhi.n	8012dc0 <_malloc_r+0x26c>
 8012e08:	0c99      	lsrs	r1, r3, #18
 8012e0a:	317c      	adds	r1, #124	; 0x7c
 8012e0c:	e7d8      	b.n	8012dc0 <_malloc_r+0x26c>
 8012e0e:	6880      	ldr	r0, [r0, #8]
 8012e10:	4286      	cmp	r6, r0
 8012e12:	d004      	beq.n	8012e1e <_malloc_r+0x2ca>
 8012e14:	2103      	movs	r1, #3
 8012e16:	6842      	ldr	r2, [r0, #4]
 8012e18:	438a      	bics	r2, r1
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d8f7      	bhi.n	8012e0e <_malloc_r+0x2ba>
 8012e1e:	68c6      	ldr	r6, [r0, #12]
 8012e20:	e7d8      	b.n	8012dd4 <_malloc_r+0x280>
 8012e22:	2304      	movs	r3, #4
 8012e24:	449c      	add	ip, r3
 8012e26:	e753      	b.n	8012cd0 <_malloc_r+0x17c>
 8012e28:	2003      	movs	r0, #3
 8012e2a:	6863      	ldr	r3, [r4, #4]
 8012e2c:	4383      	bics	r3, r0
 8012e2e:	1b5e      	subs	r6, r3, r5
 8012e30:	68e0      	ldr	r0, [r4, #12]
 8012e32:	2e0f      	cmp	r6, #15
 8012e34:	dd0e      	ble.n	8012e54 <_malloc_r+0x300>
 8012e36:	2701      	movs	r7, #1
 8012e38:	1962      	adds	r2, r4, r5
 8012e3a:	433d      	orrs	r5, r7
 8012e3c:	6065      	str	r5, [r4, #4]
 8012e3e:	68a5      	ldr	r5, [r4, #8]
 8012e40:	4337      	orrs	r7, r6
 8012e42:	60e8      	str	r0, [r5, #12]
 8012e44:	6085      	str	r5, [r0, #8]
 8012e46:	614a      	str	r2, [r1, #20]
 8012e48:	610a      	str	r2, [r1, #16]
 8012e4a:	4914      	ldr	r1, [pc, #80]	; (8012e9c <_malloc_r+0x348>)
 8012e4c:	6057      	str	r7, [r2, #4]
 8012e4e:	60d1      	str	r1, [r2, #12]
 8012e50:	6091      	str	r1, [r2, #8]
 8012e52:	e6e8      	b.n	8012c26 <_malloc_r+0xd2>
 8012e54:	2e00      	cmp	r6, #0
 8012e56:	db08      	blt.n	8012e6a <_malloc_r+0x316>
 8012e58:	2201      	movs	r2, #1
 8012e5a:	18e3      	adds	r3, r4, r3
 8012e5c:	6859      	ldr	r1, [r3, #4]
 8012e5e:	430a      	orrs	r2, r1
 8012e60:	605a      	str	r2, [r3, #4]
 8012e62:	68a3      	ldr	r3, [r4, #8]
 8012e64:	60d8      	str	r0, [r3, #12]
 8012e66:	6083      	str	r3, [r0, #8]
 8012e68:	e6aa      	b.n	8012bc0 <_malloc_r+0x6c>
 8012e6a:	0004      	movs	r4, r0
 8012e6c:	e73c      	b.n	8012ce8 <_malloc_r+0x194>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	425b      	negs	r3, r3
 8012e72:	449c      	add	ip, r3
 8012e74:	9b03      	ldr	r3, [sp, #12]
 8012e76:	6818      	ldr	r0, [r3, #0]
 8012e78:	3b08      	subs	r3, #8
 8012e7a:	9003      	str	r0, [sp, #12]
 8012e7c:	4298      	cmp	r0, r3
 8012e7e:	d100      	bne.n	8012e82 <_malloc_r+0x32e>
 8012e80:	e73c      	b.n	8012cfc <_malloc_r+0x1a8>
 8012e82:	e743      	b.n	8012d0c <_malloc_r+0x1b8>
 8012e84:	2004      	movs	r0, #4
 8012e86:	0052      	lsls	r2, r2, #1
 8012e88:	4484      	add	ip, r0
 8012e8a:	421a      	tst	r2, r3
 8012e8c:	d0fa      	beq.n	8012e84 <_malloc_r+0x330>
 8012e8e:	e723      	b.n	8012cd8 <_malloc_r+0x184>
 8012e90:	9802      	ldr	r0, [sp, #8]
 8012e92:	4684      	mov	ip, r0
 8012e94:	e7f9      	b.n	8012e8a <_malloc_r+0x336>
 8012e96:	46c0      	nop			; (mov r8, r8)
 8012e98:	20000664 	.word	0x20000664
 8012e9c:	2000066c 	.word	0x2000066c
 8012ea0:	00000554 	.word	0x00000554
 8012ea4:	000001ff 	.word	0x000001ff
 8012ea8:	2000701c 	.word	0x2000701c
 8012eac:	20000a6c 	.word	0x20000a6c
 8012eb0:	20006fec 	.word	0x20006fec
 8012eb4:	20007014 	.word	0x20007014
 8012eb8:	20007018 	.word	0x20007018
 8012ebc:	492e      	ldr	r1, [pc, #184]	; (8012f78 <_malloc_r+0x424>)
 8012ebe:	680a      	ldr	r2, [r1, #0]
 8012ec0:	3201      	adds	r2, #1
 8012ec2:	d133      	bne.n	8012f2c <_malloc_r+0x3d8>
 8012ec4:	600c      	str	r4, [r1, #0]
 8012ec6:	2307      	movs	r3, #7
 8012ec8:	4023      	ands	r3, r4
 8012eca:	d002      	beq.n	8012ed2 <_malloc_r+0x37e>
 8012ecc:	2208      	movs	r2, #8
 8012ece:	1ad3      	subs	r3, r2, r3
 8012ed0:	18e4      	adds	r4, r4, r3
 8012ed2:	9a03      	ldr	r2, [sp, #12]
 8012ed4:	19a6      	adds	r6, r4, r6
 8012ed6:	18d3      	adds	r3, r2, r3
 8012ed8:	4006      	ands	r6, r0
 8012eda:	1b9e      	subs	r6, r3, r6
 8012edc:	0031      	movs	r1, r6
 8012ede:	9801      	ldr	r0, [sp, #4]
 8012ee0:	f000 fa62 	bl	80133a8 <_sbrk_r>
 8012ee4:	1c43      	adds	r3, r0, #1
 8012ee6:	d101      	bne.n	8012eec <_malloc_r+0x398>
 8012ee8:	0020      	movs	r0, r4
 8012eea:	2600      	movs	r6, #0
 8012eec:	4a23      	ldr	r2, [pc, #140]	; (8012f7c <_malloc_r+0x428>)
 8012eee:	1b00      	subs	r0, r0, r4
 8012ef0:	6813      	ldr	r3, [r2, #0]
 8012ef2:	199b      	adds	r3, r3, r6
 8012ef4:	6013      	str	r3, [r2, #0]
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	4a21      	ldr	r2, [pc, #132]	; (8012f80 <_malloc_r+0x42c>)
 8012efa:	1986      	adds	r6, r0, r6
 8012efc:	431e      	orrs	r6, r3
 8012efe:	6094      	str	r4, [r2, #8]
 8012f00:	6066      	str	r6, [r4, #4]
 8012f02:	4297      	cmp	r7, r2
 8012f04:	d100      	bne.n	8012f08 <_malloc_r+0x3b4>
 8012f06:	e748      	b.n	8012d9a <_malloc_r+0x246>
 8012f08:	9a02      	ldr	r2, [sp, #8]
 8012f0a:	2a0f      	cmp	r2, #15
 8012f0c:	d813      	bhi.n	8012f36 <_malloc_r+0x3e2>
 8012f0e:	6063      	str	r3, [r4, #4]
 8012f10:	2203      	movs	r2, #3
 8012f12:	4b1b      	ldr	r3, [pc, #108]	; (8012f80 <_malloc_r+0x42c>)
 8012f14:	689b      	ldr	r3, [r3, #8]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	4393      	bics	r3, r2
 8012f1a:	1b5a      	subs	r2, r3, r5
 8012f1c:	42ab      	cmp	r3, r5
 8012f1e:	d301      	bcc.n	8012f24 <_malloc_r+0x3d0>
 8012f20:	2a0f      	cmp	r2, #15
 8012f22:	dc1d      	bgt.n	8012f60 <_malloc_r+0x40c>
 8012f24:	9801      	ldr	r0, [sp, #4]
 8012f26:	f000 f867 	bl	8012ff8 <__malloc_unlock>
 8012f2a:	e620      	b.n	8012b6e <_malloc_r+0x1a>
 8012f2c:	1ae3      	subs	r3, r4, r3
 8012f2e:	4a13      	ldr	r2, [pc, #76]	; (8012f7c <_malloc_r+0x428>)
 8012f30:	4463      	add	r3, ip
 8012f32:	6013      	str	r3, [r2, #0]
 8012f34:	e7c7      	b.n	8012ec6 <_malloc_r+0x372>
 8012f36:	2207      	movs	r2, #7
 8012f38:	9e02      	ldr	r6, [sp, #8]
 8012f3a:	3e0c      	subs	r6, #12
 8012f3c:	4396      	bics	r6, r2
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	4013      	ands	r3, r2
 8012f42:	2205      	movs	r2, #5
 8012f44:	4333      	orrs	r3, r6
 8012f46:	607b      	str	r3, [r7, #4]
 8012f48:	19bb      	adds	r3, r7, r6
 8012f4a:	605a      	str	r2, [r3, #4]
 8012f4c:	609a      	str	r2, [r3, #8]
 8012f4e:	2e0f      	cmp	r6, #15
 8012f50:	d800      	bhi.n	8012f54 <_malloc_r+0x400>
 8012f52:	e722      	b.n	8012d9a <_malloc_r+0x246>
 8012f54:	0039      	movs	r1, r7
 8012f56:	9801      	ldr	r0, [sp, #4]
 8012f58:	3108      	adds	r1, #8
 8012f5a:	f003 fb07 	bl	801656c <_free_r>
 8012f5e:	e71c      	b.n	8012d9a <_malloc_r+0x246>
 8012f60:	2301      	movs	r3, #1
 8012f62:	0018      	movs	r0, r3
 8012f64:	4906      	ldr	r1, [pc, #24]	; (8012f80 <_malloc_r+0x42c>)
 8012f66:	4328      	orrs	r0, r5
 8012f68:	688c      	ldr	r4, [r1, #8]
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	1965      	adds	r5, r4, r5
 8012f6e:	6060      	str	r0, [r4, #4]
 8012f70:	608d      	str	r5, [r1, #8]
 8012f72:	606b      	str	r3, [r5, #4]
 8012f74:	e624      	b.n	8012bc0 <_malloc_r+0x6c>
 8012f76:	46c0      	nop			; (mov r8, r8)
 8012f78:	20000a6c 	.word	0x20000a6c
 8012f7c:	20006fec 	.word	0x20006fec
 8012f80:	20000664 	.word	0x20000664

08012f84 <__ascii_mbtowc>:
 8012f84:	b082      	sub	sp, #8
 8012f86:	2900      	cmp	r1, #0
 8012f88:	d100      	bne.n	8012f8c <__ascii_mbtowc+0x8>
 8012f8a:	a901      	add	r1, sp, #4
 8012f8c:	1e10      	subs	r0, r2, #0
 8012f8e:	d006      	beq.n	8012f9e <__ascii_mbtowc+0x1a>
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d006      	beq.n	8012fa2 <__ascii_mbtowc+0x1e>
 8012f94:	7813      	ldrb	r3, [r2, #0]
 8012f96:	600b      	str	r3, [r1, #0]
 8012f98:	7810      	ldrb	r0, [r2, #0]
 8012f9a:	1e43      	subs	r3, r0, #1
 8012f9c:	4198      	sbcs	r0, r3
 8012f9e:	b002      	add	sp, #8
 8012fa0:	4770      	bx	lr
 8012fa2:	2002      	movs	r0, #2
 8012fa4:	4240      	negs	r0, r0
 8012fa6:	e7fa      	b.n	8012f9e <__ascii_mbtowc+0x1a>

08012fa8 <memcmp>:
 8012fa8:	b530      	push	{r4, r5, lr}
 8012faa:	2400      	movs	r4, #0
 8012fac:	42a2      	cmp	r2, r4
 8012fae:	d101      	bne.n	8012fb4 <memcmp+0xc>
 8012fb0:	2000      	movs	r0, #0
 8012fb2:	e005      	b.n	8012fc0 <memcmp+0x18>
 8012fb4:	5d03      	ldrb	r3, [r0, r4]
 8012fb6:	1c65      	adds	r5, r4, #1
 8012fb8:	5d0c      	ldrb	r4, [r1, r4]
 8012fba:	42a3      	cmp	r3, r4
 8012fbc:	d001      	beq.n	8012fc2 <memcmp+0x1a>
 8012fbe:	1b18      	subs	r0, r3, r4
 8012fc0:	bd30      	pop	{r4, r5, pc}
 8012fc2:	002c      	movs	r4, r5
 8012fc4:	e7f2      	b.n	8012fac <memcmp+0x4>

08012fc6 <memcpy>:
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	b510      	push	{r4, lr}
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d100      	bne.n	8012fd0 <memcpy+0xa>
 8012fce:	bd10      	pop	{r4, pc}
 8012fd0:	5ccc      	ldrb	r4, [r1, r3]
 8012fd2:	54c4      	strb	r4, [r0, r3]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	e7f8      	b.n	8012fca <memcpy+0x4>

08012fd8 <memset>:
 8012fd8:	0003      	movs	r3, r0
 8012fda:	1812      	adds	r2, r2, r0
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d100      	bne.n	8012fe2 <memset+0xa>
 8012fe0:	4770      	bx	lr
 8012fe2:	7019      	strb	r1, [r3, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	e7f9      	b.n	8012fdc <memset+0x4>

08012fe8 <__malloc_lock>:
 8012fe8:	b510      	push	{r4, lr}
 8012fea:	4802      	ldr	r0, [pc, #8]	; (8012ff4 <__malloc_lock+0xc>)
 8012fec:	f003 feb2 	bl	8016d54 <__retarget_lock_acquire_recursive>
 8012ff0:	bd10      	pop	{r4, pc}
 8012ff2:	46c0      	nop			; (mov r8, r8)
 8012ff4:	20007624 	.word	0x20007624

08012ff8 <__malloc_unlock>:
 8012ff8:	b510      	push	{r4, lr}
 8012ffa:	4802      	ldr	r0, [pc, #8]	; (8013004 <__malloc_unlock+0xc>)
 8012ffc:	f003 feab 	bl	8016d56 <__retarget_lock_release_recursive>
 8013000:	bd10      	pop	{r4, pc}
 8013002:	46c0      	nop			; (mov r8, r8)
 8013004:	20007624 	.word	0x20007624

08013008 <rand>:
 8013008:	4b09      	ldr	r3, [pc, #36]	; (8013030 <rand+0x28>)
 801300a:	b510      	push	{r4, lr}
 801300c:	681c      	ldr	r4, [r3, #0]
 801300e:	4a09      	ldr	r2, [pc, #36]	; (8013034 <rand+0x2c>)
 8013010:	34a8      	adds	r4, #168	; 0xa8
 8013012:	6820      	ldr	r0, [r4, #0]
 8013014:	6861      	ldr	r1, [r4, #4]
 8013016:	4b08      	ldr	r3, [pc, #32]	; (8013038 <rand+0x30>)
 8013018:	f7ed faa8 	bl	800056c <__aeabi_lmul>
 801301c:	2201      	movs	r2, #1
 801301e:	2300      	movs	r3, #0
 8013020:	1880      	adds	r0, r0, r2
 8013022:	4159      	adcs	r1, r3
 8013024:	6020      	str	r0, [r4, #0]
 8013026:	6061      	str	r1, [r4, #4]
 8013028:	0048      	lsls	r0, r1, #1
 801302a:	0840      	lsrs	r0, r0, #1
 801302c:	bd10      	pop	{r4, pc}
 801302e:	46c0      	nop			; (mov r8, r8)
 8013030:	200000c8 	.word	0x200000c8
 8013034:	4c957f2d 	.word	0x4c957f2d
 8013038:	5851f42d 	.word	0x5851f42d

0801303c <realloc>:
 801303c:	b510      	push	{r4, lr}
 801303e:	4b03      	ldr	r3, [pc, #12]	; (801304c <realloc+0x10>)
 8013040:	000a      	movs	r2, r1
 8013042:	0001      	movs	r1, r0
 8013044:	6818      	ldr	r0, [r3, #0]
 8013046:	f000 f803 	bl	8013050 <_realloc_r>
 801304a:	bd10      	pop	{r4, pc}
 801304c:	200000c8 	.word	0x200000c8

08013050 <_realloc_r>:
 8013050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013052:	b087      	sub	sp, #28
 8013054:	9003      	str	r0, [sp, #12]
 8013056:	1e0c      	subs	r4, r1, #0
 8013058:	9205      	str	r2, [sp, #20]
 801305a:	d106      	bne.n	801306a <_realloc_r+0x1a>
 801305c:	0011      	movs	r1, r2
 801305e:	f7ff fd79 	bl	8012b54 <_malloc_r>
 8013062:	0007      	movs	r7, r0
 8013064:	0038      	movs	r0, r7
 8013066:	b007      	add	sp, #28
 8013068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801306a:	9803      	ldr	r0, [sp, #12]
 801306c:	f7ff ffbc 	bl	8012fe8 <__malloc_lock>
 8013070:	0023      	movs	r3, r4
 8013072:	3b08      	subs	r3, #8
 8013074:	685f      	ldr	r7, [r3, #4]
 8013076:	9302      	str	r3, [sp, #8]
 8013078:	003a      	movs	r2, r7
 801307a:	2303      	movs	r3, #3
 801307c:	9e05      	ldr	r6, [sp, #20]
 801307e:	439a      	bics	r2, r3
 8013080:	360b      	adds	r6, #11
 8013082:	9204      	str	r2, [sp, #16]
 8013084:	2e16      	cmp	r6, #22
 8013086:	d908      	bls.n	801309a <_realloc_r+0x4a>
 8013088:	3304      	adds	r3, #4
 801308a:	439e      	bics	r6, r3
 801308c:	9601      	str	r6, [sp, #4]
 801308e:	d506      	bpl.n	801309e <_realloc_r+0x4e>
 8013090:	230c      	movs	r3, #12
 8013092:	9a03      	ldr	r2, [sp, #12]
 8013094:	2700      	movs	r7, #0
 8013096:	6013      	str	r3, [r2, #0]
 8013098:	e7e4      	b.n	8013064 <_realloc_r+0x14>
 801309a:	2310      	movs	r3, #16
 801309c:	9301      	str	r3, [sp, #4]
 801309e:	9b01      	ldr	r3, [sp, #4]
 80130a0:	9a05      	ldr	r2, [sp, #20]
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d3f4      	bcc.n	8013090 <_realloc_r+0x40>
 80130a6:	9b01      	ldr	r3, [sp, #4]
 80130a8:	9a04      	ldr	r2, [sp, #16]
 80130aa:	4293      	cmp	r3, r2
 80130ac:	dc00      	bgt.n	80130b0 <_realloc_r+0x60>
 80130ae:	e16f      	b.n	8013390 <_realloc_r+0x340>
 80130b0:	9b02      	ldr	r3, [sp, #8]
 80130b2:	48bc      	ldr	r0, [pc, #752]	; (80133a4 <_realloc_r+0x354>)
 80130b4:	189b      	adds	r3, r3, r2
 80130b6:	6882      	ldr	r2, [r0, #8]
 80130b8:	4694      	mov	ip, r2
 80130ba:	685a      	ldr	r2, [r3, #4]
 80130bc:	459c      	cmp	ip, r3
 80130be:	d006      	beq.n	80130ce <_realloc_r+0x7e>
 80130c0:	2501      	movs	r5, #1
 80130c2:	0011      	movs	r1, r2
 80130c4:	43a9      	bics	r1, r5
 80130c6:	1859      	adds	r1, r3, r1
 80130c8:	6849      	ldr	r1, [r1, #4]
 80130ca:	4229      	tst	r1, r5
 80130cc:	d146      	bne.n	801315c <_realloc_r+0x10c>
 80130ce:	2103      	movs	r1, #3
 80130d0:	438a      	bics	r2, r1
 80130d2:	9904      	ldr	r1, [sp, #16]
 80130d4:	188e      	adds	r6, r1, r2
 80130d6:	9901      	ldr	r1, [sp, #4]
 80130d8:	459c      	cmp	ip, r3
 80130da:	d117      	bne.n	801310c <_realloc_r+0xbc>
 80130dc:	3110      	adds	r1, #16
 80130de:	42b1      	cmp	r1, r6
 80130e0:	dc3e      	bgt.n	8013160 <_realloc_r+0x110>
 80130e2:	9901      	ldr	r1, [sp, #4]
 80130e4:	9b02      	ldr	r3, [sp, #8]
 80130e6:	468c      	mov	ip, r1
 80130e8:	4463      	add	r3, ip
 80130ea:	6083      	str	r3, [r0, #8]
 80130ec:	001a      	movs	r2, r3
 80130ee:	1a73      	subs	r3, r6, r1
 80130f0:	2601      	movs	r6, #1
 80130f2:	4333      	orrs	r3, r6
 80130f4:	6053      	str	r3, [r2, #4]
 80130f6:	0023      	movs	r3, r4
 80130f8:	3b08      	subs	r3, #8
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	9803      	ldr	r0, [sp, #12]
 80130fe:	4016      	ands	r6, r2
 8013100:	430e      	orrs	r6, r1
 8013102:	605e      	str	r6, [r3, #4]
 8013104:	f7ff ff78 	bl	8012ff8 <__malloc_unlock>
 8013108:	0027      	movs	r7, r4
 801310a:	e7ab      	b.n	8013064 <_realloc_r+0x14>
 801310c:	42b1      	cmp	r1, r6
 801310e:	dc27      	bgt.n	8013160 <_realloc_r+0x110>
 8013110:	68da      	ldr	r2, [r3, #12]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	60da      	str	r2, [r3, #12]
 8013116:	6093      	str	r3, [r2, #8]
 8013118:	9b01      	ldr	r3, [sp, #4]
 801311a:	9a02      	ldr	r2, [sp, #8]
 801311c:	1af4      	subs	r4, r6, r3
 801311e:	9b02      	ldr	r3, [sp, #8]
 8013120:	1992      	adds	r2, r2, r6
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	9304      	str	r3, [sp, #16]
 8013126:	2301      	movs	r3, #1
 8013128:	9804      	ldr	r0, [sp, #16]
 801312a:	4018      	ands	r0, r3
 801312c:	2c0f      	cmp	r4, #15
 801312e:	d800      	bhi.n	8013132 <_realloc_r+0xe2>
 8013130:	e130      	b.n	8013394 <_realloc_r+0x344>
 8013132:	9d01      	ldr	r5, [sp, #4]
 8013134:	9902      	ldr	r1, [sp, #8]
 8013136:	4328      	orrs	r0, r5
 8013138:	1949      	adds	r1, r1, r5
 801313a:	9d02      	ldr	r5, [sp, #8]
 801313c:	431c      	orrs	r4, r3
 801313e:	6068      	str	r0, [r5, #4]
 8013140:	604c      	str	r4, [r1, #4]
 8013142:	6850      	ldr	r0, [r2, #4]
 8013144:	3108      	adds	r1, #8
 8013146:	4303      	orrs	r3, r0
 8013148:	6053      	str	r3, [r2, #4]
 801314a:	9803      	ldr	r0, [sp, #12]
 801314c:	f003 fa0e 	bl	801656c <_free_r>
 8013150:	9803      	ldr	r0, [sp, #12]
 8013152:	f7ff ff51 	bl	8012ff8 <__malloc_unlock>
 8013156:	9f02      	ldr	r7, [sp, #8]
 8013158:	3708      	adds	r7, #8
 801315a:	e783      	b.n	8013064 <_realloc_r+0x14>
 801315c:	2200      	movs	r2, #0
 801315e:	0013      	movs	r3, r2
 8013160:	07f9      	lsls	r1, r7, #31
 8013162:	d500      	bpl.n	8013166 <_realloc_r+0x116>
 8013164:	e0c6      	b.n	80132f4 <_realloc_r+0x2a4>
 8013166:	0021      	movs	r1, r4
 8013168:	3908      	subs	r1, #8
 801316a:	680d      	ldr	r5, [r1, #0]
 801316c:	9902      	ldr	r1, [sp, #8]
 801316e:	1b4d      	subs	r5, r1, r5
 8013170:	2103      	movs	r1, #3
 8013172:	686f      	ldr	r7, [r5, #4]
 8013174:	438f      	bics	r7, r1
 8013176:	9904      	ldr	r1, [sp, #16]
 8013178:	187f      	adds	r7, r7, r1
 801317a:	2b00      	cmp	r3, #0
 801317c:	d100      	bne.n	8013180 <_realloc_r+0x130>
 801317e:	e084      	b.n	801328a <_realloc_r+0x23a>
 8013180:	19d6      	adds	r6, r2, r7
 8013182:	459c      	cmp	ip, r3
 8013184:	d148      	bne.n	8013218 <_realloc_r+0x1c8>
 8013186:	9b01      	ldr	r3, [sp, #4]
 8013188:	3310      	adds	r3, #16
 801318a:	42b3      	cmp	r3, r6
 801318c:	dc7d      	bgt.n	801328a <_realloc_r+0x23a>
 801318e:	68aa      	ldr	r2, [r5, #8]
 8013190:	68eb      	ldr	r3, [r5, #12]
 8013192:	002f      	movs	r7, r5
 8013194:	60d3      	str	r3, [r2, #12]
 8013196:	609a      	str	r2, [r3, #8]
 8013198:	000a      	movs	r2, r1
 801319a:	3a04      	subs	r2, #4
 801319c:	3708      	adds	r7, #8
 801319e:	2a24      	cmp	r2, #36	; 0x24
 80131a0:	d835      	bhi.n	801320e <_realloc_r+0x1be>
 80131a2:	003b      	movs	r3, r7
 80131a4:	2a13      	cmp	r2, #19
 80131a6:	d908      	bls.n	80131ba <_realloc_r+0x16a>
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	60ab      	str	r3, [r5, #8]
 80131ac:	6863      	ldr	r3, [r4, #4]
 80131ae:	60eb      	str	r3, [r5, #12]
 80131b0:	2a1b      	cmp	r2, #27
 80131b2:	d81a      	bhi.n	80131ea <_realloc_r+0x19a>
 80131b4:	002b      	movs	r3, r5
 80131b6:	3408      	adds	r4, #8
 80131b8:	3310      	adds	r3, #16
 80131ba:	6822      	ldr	r2, [r4, #0]
 80131bc:	601a      	str	r2, [r3, #0]
 80131be:	6862      	ldr	r2, [r4, #4]
 80131c0:	605a      	str	r2, [r3, #4]
 80131c2:	68a2      	ldr	r2, [r4, #8]
 80131c4:	609a      	str	r2, [r3, #8]
 80131c6:	9b01      	ldr	r3, [sp, #4]
 80131c8:	18ea      	adds	r2, r5, r3
 80131ca:	4b76      	ldr	r3, [pc, #472]	; (80133a4 <_realloc_r+0x354>)
 80131cc:	609a      	str	r2, [r3, #8]
 80131ce:	9b01      	ldr	r3, [sp, #4]
 80131d0:	1af3      	subs	r3, r6, r3
 80131d2:	2601      	movs	r6, #1
 80131d4:	4333      	orrs	r3, r6
 80131d6:	6053      	str	r3, [r2, #4]
 80131d8:	686b      	ldr	r3, [r5, #4]
 80131da:	401e      	ands	r6, r3
 80131dc:	9b01      	ldr	r3, [sp, #4]
 80131de:	431e      	orrs	r6, r3
 80131e0:	606e      	str	r6, [r5, #4]
 80131e2:	9803      	ldr	r0, [sp, #12]
 80131e4:	f7ff ff08 	bl	8012ff8 <__malloc_unlock>
 80131e8:	e73c      	b.n	8013064 <_realloc_r+0x14>
 80131ea:	68a3      	ldr	r3, [r4, #8]
 80131ec:	612b      	str	r3, [r5, #16]
 80131ee:	68e3      	ldr	r3, [r4, #12]
 80131f0:	616b      	str	r3, [r5, #20]
 80131f2:	2a24      	cmp	r2, #36	; 0x24
 80131f4:	d003      	beq.n	80131fe <_realloc_r+0x1ae>
 80131f6:	002b      	movs	r3, r5
 80131f8:	3410      	adds	r4, #16
 80131fa:	3318      	adds	r3, #24
 80131fc:	e7dd      	b.n	80131ba <_realloc_r+0x16a>
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	61ab      	str	r3, [r5, #24]
 8013202:	002b      	movs	r3, r5
 8013204:	6962      	ldr	r2, [r4, #20]
 8013206:	3320      	adds	r3, #32
 8013208:	61ea      	str	r2, [r5, #28]
 801320a:	3418      	adds	r4, #24
 801320c:	e7d5      	b.n	80131ba <_realloc_r+0x16a>
 801320e:	0021      	movs	r1, r4
 8013210:	0038      	movs	r0, r7
 8013212:	f003 fdac 	bl	8016d6e <memmove>
 8013216:	e7d6      	b.n	80131c6 <_realloc_r+0x176>
 8013218:	9a01      	ldr	r2, [sp, #4]
 801321a:	42b2      	cmp	r2, r6
 801321c:	dc35      	bgt.n	801328a <_realloc_r+0x23a>
 801321e:	0028      	movs	r0, r5
 8013220:	68da      	ldr	r2, [r3, #12]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	3008      	adds	r0, #8
 8013226:	60da      	str	r2, [r3, #12]
 8013228:	6093      	str	r3, [r2, #8]
 801322a:	68aa      	ldr	r2, [r5, #8]
 801322c:	68eb      	ldr	r3, [r5, #12]
 801322e:	60d3      	str	r3, [r2, #12]
 8013230:	609a      	str	r2, [r3, #8]
 8013232:	9a04      	ldr	r2, [sp, #16]
 8013234:	3a04      	subs	r2, #4
 8013236:	2a24      	cmp	r2, #36	; 0x24
 8013238:	d823      	bhi.n	8013282 <_realloc_r+0x232>
 801323a:	2a13      	cmp	r2, #19
 801323c:	d907      	bls.n	801324e <_realloc_r+0x1fe>
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	60ab      	str	r3, [r5, #8]
 8013242:	6863      	ldr	r3, [r4, #4]
 8013244:	60eb      	str	r3, [r5, #12]
 8013246:	2a1b      	cmp	r2, #27
 8013248:	d809      	bhi.n	801325e <_realloc_r+0x20e>
 801324a:	3408      	adds	r4, #8
 801324c:	3008      	adds	r0, #8
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	6003      	str	r3, [r0, #0]
 8013252:	6863      	ldr	r3, [r4, #4]
 8013254:	6043      	str	r3, [r0, #4]
 8013256:	68a3      	ldr	r3, [r4, #8]
 8013258:	6083      	str	r3, [r0, #8]
 801325a:	9502      	str	r5, [sp, #8]
 801325c:	e75c      	b.n	8013118 <_realloc_r+0xc8>
 801325e:	68a3      	ldr	r3, [r4, #8]
 8013260:	612b      	str	r3, [r5, #16]
 8013262:	68e3      	ldr	r3, [r4, #12]
 8013264:	616b      	str	r3, [r5, #20]
 8013266:	2a24      	cmp	r2, #36	; 0x24
 8013268:	d003      	beq.n	8013272 <_realloc_r+0x222>
 801326a:	0028      	movs	r0, r5
 801326c:	3410      	adds	r4, #16
 801326e:	3018      	adds	r0, #24
 8013270:	e7ed      	b.n	801324e <_realloc_r+0x1fe>
 8013272:	0028      	movs	r0, r5
 8013274:	6923      	ldr	r3, [r4, #16]
 8013276:	3020      	adds	r0, #32
 8013278:	61ab      	str	r3, [r5, #24]
 801327a:	6963      	ldr	r3, [r4, #20]
 801327c:	3418      	adds	r4, #24
 801327e:	61eb      	str	r3, [r5, #28]
 8013280:	e7e5      	b.n	801324e <_realloc_r+0x1fe>
 8013282:	0021      	movs	r1, r4
 8013284:	f003 fd73 	bl	8016d6e <memmove>
 8013288:	e7e7      	b.n	801325a <_realloc_r+0x20a>
 801328a:	9b01      	ldr	r3, [sp, #4]
 801328c:	42bb      	cmp	r3, r7
 801328e:	dc31      	bgt.n	80132f4 <_realloc_r+0x2a4>
 8013290:	0028      	movs	r0, r5
 8013292:	68aa      	ldr	r2, [r5, #8]
 8013294:	68eb      	ldr	r3, [r5, #12]
 8013296:	3008      	adds	r0, #8
 8013298:	60d3      	str	r3, [r2, #12]
 801329a:	609a      	str	r2, [r3, #8]
 801329c:	9a04      	ldr	r2, [sp, #16]
 801329e:	3a04      	subs	r2, #4
 80132a0:	2a24      	cmp	r2, #36	; 0x24
 80132a2:	d823      	bhi.n	80132ec <_realloc_r+0x29c>
 80132a4:	2a13      	cmp	r2, #19
 80132a6:	d907      	bls.n	80132b8 <_realloc_r+0x268>
 80132a8:	6823      	ldr	r3, [r4, #0]
 80132aa:	60ab      	str	r3, [r5, #8]
 80132ac:	6863      	ldr	r3, [r4, #4]
 80132ae:	60eb      	str	r3, [r5, #12]
 80132b0:	2a1b      	cmp	r2, #27
 80132b2:	d809      	bhi.n	80132c8 <_realloc_r+0x278>
 80132b4:	3408      	adds	r4, #8
 80132b6:	3008      	adds	r0, #8
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	6003      	str	r3, [r0, #0]
 80132bc:	6863      	ldr	r3, [r4, #4]
 80132be:	6043      	str	r3, [r0, #4]
 80132c0:	68a3      	ldr	r3, [r4, #8]
 80132c2:	6083      	str	r3, [r0, #8]
 80132c4:	003e      	movs	r6, r7
 80132c6:	e7c8      	b.n	801325a <_realloc_r+0x20a>
 80132c8:	68a3      	ldr	r3, [r4, #8]
 80132ca:	612b      	str	r3, [r5, #16]
 80132cc:	68e3      	ldr	r3, [r4, #12]
 80132ce:	616b      	str	r3, [r5, #20]
 80132d0:	2a24      	cmp	r2, #36	; 0x24
 80132d2:	d003      	beq.n	80132dc <_realloc_r+0x28c>
 80132d4:	0028      	movs	r0, r5
 80132d6:	3410      	adds	r4, #16
 80132d8:	3018      	adds	r0, #24
 80132da:	e7ed      	b.n	80132b8 <_realloc_r+0x268>
 80132dc:	0028      	movs	r0, r5
 80132de:	6923      	ldr	r3, [r4, #16]
 80132e0:	3020      	adds	r0, #32
 80132e2:	61ab      	str	r3, [r5, #24]
 80132e4:	6963      	ldr	r3, [r4, #20]
 80132e6:	3418      	adds	r4, #24
 80132e8:	61eb      	str	r3, [r5, #28]
 80132ea:	e7e5      	b.n	80132b8 <_realloc_r+0x268>
 80132ec:	0021      	movs	r1, r4
 80132ee:	f003 fd3e 	bl	8016d6e <memmove>
 80132f2:	e7e7      	b.n	80132c4 <_realloc_r+0x274>
 80132f4:	9905      	ldr	r1, [sp, #20]
 80132f6:	9803      	ldr	r0, [sp, #12]
 80132f8:	f7ff fc2c 	bl	8012b54 <_malloc_r>
 80132fc:	1e07      	subs	r7, r0, #0
 80132fe:	d100      	bne.n	8013302 <_realloc_r+0x2b2>
 8013300:	e76f      	b.n	80131e2 <_realloc_r+0x192>
 8013302:	0023      	movs	r3, r4
 8013304:	2201      	movs	r2, #1
 8013306:	3b08      	subs	r3, #8
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	4393      	bics	r3, r2
 801330c:	9a02      	ldr	r2, [sp, #8]
 801330e:	18d3      	adds	r3, r2, r3
 8013310:	0002      	movs	r2, r0
 8013312:	3a08      	subs	r2, #8
 8013314:	4293      	cmp	r3, r2
 8013316:	d105      	bne.n	8013324 <_realloc_r+0x2d4>
 8013318:	685e      	ldr	r6, [r3, #4]
 801331a:	2303      	movs	r3, #3
 801331c:	439e      	bics	r6, r3
 801331e:	9b04      	ldr	r3, [sp, #16]
 8013320:	18f6      	adds	r6, r6, r3
 8013322:	e6f9      	b.n	8013118 <_realloc_r+0xc8>
 8013324:	9a04      	ldr	r2, [sp, #16]
 8013326:	3a04      	subs	r2, #4
 8013328:	2a24      	cmp	r2, #36	; 0x24
 801332a:	d82d      	bhi.n	8013388 <_realloc_r+0x338>
 801332c:	2a13      	cmp	r2, #19
 801332e:	d928      	bls.n	8013382 <_realloc_r+0x332>
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	6003      	str	r3, [r0, #0]
 8013334:	6863      	ldr	r3, [r4, #4]
 8013336:	6043      	str	r3, [r0, #4]
 8013338:	2a1b      	cmp	r2, #27
 801333a:	d80e      	bhi.n	801335a <_realloc_r+0x30a>
 801333c:	0022      	movs	r2, r4
 801333e:	0003      	movs	r3, r0
 8013340:	3208      	adds	r2, #8
 8013342:	3308      	adds	r3, #8
 8013344:	6811      	ldr	r1, [r2, #0]
 8013346:	6019      	str	r1, [r3, #0]
 8013348:	6851      	ldr	r1, [r2, #4]
 801334a:	6059      	str	r1, [r3, #4]
 801334c:	6892      	ldr	r2, [r2, #8]
 801334e:	609a      	str	r2, [r3, #8]
 8013350:	0021      	movs	r1, r4
 8013352:	9803      	ldr	r0, [sp, #12]
 8013354:	f003 f90a 	bl	801656c <_free_r>
 8013358:	e743      	b.n	80131e2 <_realloc_r+0x192>
 801335a:	68a3      	ldr	r3, [r4, #8]
 801335c:	6083      	str	r3, [r0, #8]
 801335e:	68e3      	ldr	r3, [r4, #12]
 8013360:	60c3      	str	r3, [r0, #12]
 8013362:	2a24      	cmp	r2, #36	; 0x24
 8013364:	d004      	beq.n	8013370 <_realloc_r+0x320>
 8013366:	0022      	movs	r2, r4
 8013368:	0003      	movs	r3, r0
 801336a:	3210      	adds	r2, #16
 801336c:	3310      	adds	r3, #16
 801336e:	e7e9      	b.n	8013344 <_realloc_r+0x2f4>
 8013370:	6923      	ldr	r3, [r4, #16]
 8013372:	0022      	movs	r2, r4
 8013374:	6103      	str	r3, [r0, #16]
 8013376:	0003      	movs	r3, r0
 8013378:	6961      	ldr	r1, [r4, #20]
 801337a:	3218      	adds	r2, #24
 801337c:	3318      	adds	r3, #24
 801337e:	6141      	str	r1, [r0, #20]
 8013380:	e7e0      	b.n	8013344 <_realloc_r+0x2f4>
 8013382:	0003      	movs	r3, r0
 8013384:	0022      	movs	r2, r4
 8013386:	e7dd      	b.n	8013344 <_realloc_r+0x2f4>
 8013388:	0021      	movs	r1, r4
 801338a:	f003 fcf0 	bl	8016d6e <memmove>
 801338e:	e7df      	b.n	8013350 <_realloc_r+0x300>
 8013390:	9e04      	ldr	r6, [sp, #16]
 8013392:	e6c1      	b.n	8013118 <_realloc_r+0xc8>
 8013394:	9902      	ldr	r1, [sp, #8]
 8013396:	4306      	orrs	r6, r0
 8013398:	604e      	str	r6, [r1, #4]
 801339a:	6851      	ldr	r1, [r2, #4]
 801339c:	430b      	orrs	r3, r1
 801339e:	6053      	str	r3, [r2, #4]
 80133a0:	e6d6      	b.n	8013150 <_realloc_r+0x100>
 80133a2:	46c0      	nop			; (mov r8, r8)
 80133a4:	20000664 	.word	0x20000664

080133a8 <_sbrk_r>:
 80133a8:	2300      	movs	r3, #0
 80133aa:	b570      	push	{r4, r5, r6, lr}
 80133ac:	4c06      	ldr	r4, [pc, #24]	; (80133c8 <_sbrk_r+0x20>)
 80133ae:	0005      	movs	r5, r0
 80133b0:	0008      	movs	r0, r1
 80133b2:	6023      	str	r3, [r4, #0]
 80133b4:	f004 f9c0 	bl	8017738 <_sbrk>
 80133b8:	1c43      	adds	r3, r0, #1
 80133ba:	d103      	bne.n	80133c4 <_sbrk_r+0x1c>
 80133bc:	6823      	ldr	r3, [r4, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d000      	beq.n	80133c4 <_sbrk_r+0x1c>
 80133c2:	602b      	str	r3, [r5, #0]
 80133c4:	bd70      	pop	{r4, r5, r6, pc}
 80133c6:	46c0      	nop			; (mov r8, r8)
 80133c8:	2000762c 	.word	0x2000762c

080133cc <sprintf>:
 80133cc:	b40e      	push	{r1, r2, r3}
 80133ce:	b500      	push	{lr}
 80133d0:	490b      	ldr	r1, [pc, #44]	; (8013400 <sprintf+0x34>)
 80133d2:	b09c      	sub	sp, #112	; 0x70
 80133d4:	ab1d      	add	r3, sp, #116	; 0x74
 80133d6:	9002      	str	r0, [sp, #8]
 80133d8:	9006      	str	r0, [sp, #24]
 80133da:	9107      	str	r1, [sp, #28]
 80133dc:	9104      	str	r1, [sp, #16]
 80133de:	4809      	ldr	r0, [pc, #36]	; (8013404 <sprintf+0x38>)
 80133e0:	4909      	ldr	r1, [pc, #36]	; (8013408 <sprintf+0x3c>)
 80133e2:	cb04      	ldmia	r3!, {r2}
 80133e4:	9105      	str	r1, [sp, #20]
 80133e6:	6800      	ldr	r0, [r0, #0]
 80133e8:	a902      	add	r1, sp, #8
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	f000 ff78 	bl	80142e0 <_svfprintf_r>
 80133f0:	2300      	movs	r3, #0
 80133f2:	9a02      	ldr	r2, [sp, #8]
 80133f4:	7013      	strb	r3, [r2, #0]
 80133f6:	b01c      	add	sp, #112	; 0x70
 80133f8:	bc08      	pop	{r3}
 80133fa:	b003      	add	sp, #12
 80133fc:	4718      	bx	r3
 80133fe:	46c0      	nop			; (mov r8, r8)
 8013400:	7fffffff 	.word	0x7fffffff
 8013404:	200000c8 	.word	0x200000c8
 8013408:	ffff0208 	.word	0xffff0208

0801340c <strcat>:
 801340c:	0002      	movs	r2, r0
 801340e:	b510      	push	{r4, lr}
 8013410:	7813      	ldrb	r3, [r2, #0]
 8013412:	1c54      	adds	r4, r2, #1
 8013414:	2b00      	cmp	r3, #0
 8013416:	d105      	bne.n	8013424 <strcat+0x18>
 8013418:	5ccc      	ldrb	r4, [r1, r3]
 801341a:	54d4      	strb	r4, [r2, r3]
 801341c:	3301      	adds	r3, #1
 801341e:	2c00      	cmp	r4, #0
 8013420:	d1fa      	bne.n	8013418 <strcat+0xc>
 8013422:	bd10      	pop	{r4, pc}
 8013424:	0022      	movs	r2, r4
 8013426:	e7f3      	b.n	8013410 <strcat+0x4>

08013428 <strchr>:
 8013428:	b2c9      	uxtb	r1, r1
 801342a:	7803      	ldrb	r3, [r0, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d004      	beq.n	801343a <strchr+0x12>
 8013430:	428b      	cmp	r3, r1
 8013432:	d100      	bne.n	8013436 <strchr+0xe>
 8013434:	4770      	bx	lr
 8013436:	3001      	adds	r0, #1
 8013438:	e7f7      	b.n	801342a <strchr+0x2>
 801343a:	424b      	negs	r3, r1
 801343c:	4159      	adcs	r1, r3
 801343e:	4249      	negs	r1, r1
 8013440:	4008      	ands	r0, r1
 8013442:	e7f7      	b.n	8013434 <strchr+0xc>

08013444 <strcpy>:
 8013444:	0003      	movs	r3, r0
 8013446:	780a      	ldrb	r2, [r1, #0]
 8013448:	3101      	adds	r1, #1
 801344a:	701a      	strb	r2, [r3, #0]
 801344c:	3301      	adds	r3, #1
 801344e:	2a00      	cmp	r2, #0
 8013450:	d1f9      	bne.n	8013446 <strcpy+0x2>
 8013452:	4770      	bx	lr

08013454 <strncmp>:
 8013454:	2300      	movs	r3, #0
 8013456:	b530      	push	{r4, r5, lr}
 8013458:	429a      	cmp	r2, r3
 801345a:	d00a      	beq.n	8013472 <strncmp+0x1e>
 801345c:	3a01      	subs	r2, #1
 801345e:	5cc4      	ldrb	r4, [r0, r3]
 8013460:	5ccd      	ldrb	r5, [r1, r3]
 8013462:	42ac      	cmp	r4, r5
 8013464:	d104      	bne.n	8013470 <strncmp+0x1c>
 8013466:	4293      	cmp	r3, r2
 8013468:	d002      	beq.n	8013470 <strncmp+0x1c>
 801346a:	3301      	adds	r3, #1
 801346c:	2c00      	cmp	r4, #0
 801346e:	d1f6      	bne.n	801345e <strncmp+0xa>
 8013470:	1b63      	subs	r3, r4, r5
 8013472:	0018      	movs	r0, r3
 8013474:	bd30      	pop	{r4, r5, pc}

08013476 <strncpy>:
 8013476:	b530      	push	{r4, r5, lr}
 8013478:	0005      	movs	r5, r0
 801347a:	2a00      	cmp	r2, #0
 801347c:	d100      	bne.n	8013480 <strncpy+0xa>
 801347e:	bd30      	pop	{r4, r5, pc}
 8013480:	780c      	ldrb	r4, [r1, #0]
 8013482:	3a01      	subs	r2, #1
 8013484:	1c6b      	adds	r3, r5, #1
 8013486:	702c      	strb	r4, [r5, #0]
 8013488:	3101      	adds	r1, #1
 801348a:	2c00      	cmp	r4, #0
 801348c:	d105      	bne.n	801349a <strncpy+0x24>
 801348e:	189a      	adds	r2, r3, r2
 8013490:	429a      	cmp	r2, r3
 8013492:	d0f4      	beq.n	801347e <strncpy+0x8>
 8013494:	701c      	strb	r4, [r3, #0]
 8013496:	3301      	adds	r3, #1
 8013498:	e7fa      	b.n	8013490 <strncpy+0x1a>
 801349a:	001d      	movs	r5, r3
 801349c:	e7ed      	b.n	801347a <strncpy+0x4>
	...

080134a0 <sulp>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	0016      	movs	r6, r2
 80134a4:	000d      	movs	r5, r1
 80134a6:	f003 ff17 	bl	80172d8 <__ulp>
 80134aa:	2e00      	cmp	r6, #0
 80134ac:	d00d      	beq.n	80134ca <sulp+0x2a>
 80134ae:	236b      	movs	r3, #107	; 0x6b
 80134b0:	006a      	lsls	r2, r5, #1
 80134b2:	0d52      	lsrs	r2, r2, #21
 80134b4:	1a9b      	subs	r3, r3, r2
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	dd07      	ble.n	80134ca <sulp+0x2a>
 80134ba:	2400      	movs	r4, #0
 80134bc:	4a03      	ldr	r2, [pc, #12]	; (80134cc <sulp+0x2c>)
 80134be:	051b      	lsls	r3, r3, #20
 80134c0:	189d      	adds	r5, r3, r2
 80134c2:	002b      	movs	r3, r5
 80134c4:	0022      	movs	r2, r4
 80134c6:	f7ee fcb5 	bl	8001e34 <__aeabi_dmul>
 80134ca:	bd70      	pop	{r4, r5, r6, pc}
 80134cc:	3ff00000 	.word	0x3ff00000

080134d0 <_strtod_l>:
 80134d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134d2:	b0a7      	sub	sp, #156	; 0x9c
 80134d4:	9307      	str	r3, [sp, #28]
 80134d6:	2300      	movs	r3, #0
 80134d8:	9004      	str	r0, [sp, #16]
 80134da:	9807      	ldr	r0, [sp, #28]
 80134dc:	9322      	str	r3, [sp, #136]	; 0x88
 80134de:	9106      	str	r1, [sp, #24]
 80134e0:	921d      	str	r2, [sp, #116]	; 0x74
 80134e2:	f003 fc28 	bl	8016d36 <__localeconv_l>
 80134e6:	0005      	movs	r5, r0
 80134e8:	6800      	ldr	r0, [r0, #0]
 80134ea:	f7ec fe15 	bl	8000118 <strlen>
 80134ee:	2600      	movs	r6, #0
 80134f0:	2700      	movs	r7, #0
 80134f2:	9b06      	ldr	r3, [sp, #24]
 80134f4:	9005      	str	r0, [sp, #20]
 80134f6:	9321      	str	r3, [sp, #132]	; 0x84
 80134f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134fa:	781a      	ldrb	r2, [r3, #0]
 80134fc:	2a0d      	cmp	r2, #13
 80134fe:	d839      	bhi.n	8013574 <_strtod_l+0xa4>
 8013500:	2a09      	cmp	r2, #9
 8013502:	d23d      	bcs.n	8013580 <_strtod_l+0xb0>
 8013504:	2a00      	cmp	r2, #0
 8013506:	d044      	beq.n	8013592 <_strtod_l+0xc2>
 8013508:	2300      	movs	r3, #0
 801350a:	9313      	str	r3, [sp, #76]	; 0x4c
 801350c:	2200      	movs	r2, #0
 801350e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013510:	920c      	str	r2, [sp, #48]	; 0x30
 8013512:	7823      	ldrb	r3, [r4, #0]
 8013514:	2b30      	cmp	r3, #48	; 0x30
 8013516:	d000      	beq.n	801351a <_strtod_l+0x4a>
 8013518:	e07e      	b.n	8013618 <_strtod_l+0x148>
 801351a:	7863      	ldrb	r3, [r4, #1]
 801351c:	2b58      	cmp	r3, #88	; 0x58
 801351e:	d002      	beq.n	8013526 <_strtod_l+0x56>
 8013520:	2b78      	cmp	r3, #120	; 0x78
 8013522:	d000      	beq.n	8013526 <_strtod_l+0x56>
 8013524:	e06e      	b.n	8013604 <_strtod_l+0x134>
 8013526:	9b07      	ldr	r3, [sp, #28]
 8013528:	4a96      	ldr	r2, [pc, #600]	; (8013784 <_strtod_l+0x2b4>)
 801352a:	9302      	str	r3, [sp, #8]
 801352c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801352e:	a921      	add	r1, sp, #132	; 0x84
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	ab22      	add	r3, sp, #136	; 0x88
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	9804      	ldr	r0, [sp, #16]
 8013538:	ab23      	add	r3, sp, #140	; 0x8c
 801353a:	f003 f914 	bl	8016766 <__gethex>
 801353e:	2507      	movs	r5, #7
 8013540:	9005      	str	r0, [sp, #20]
 8013542:	4005      	ands	r5, r0
 8013544:	d005      	beq.n	8013552 <_strtod_l+0x82>
 8013546:	2d06      	cmp	r5, #6
 8013548:	d12f      	bne.n	80135aa <_strtod_l+0xda>
 801354a:	2300      	movs	r3, #0
 801354c:	3401      	adds	r4, #1
 801354e:	9421      	str	r4, [sp, #132]	; 0x84
 8013550:	9313      	str	r3, [sp, #76]	; 0x4c
 8013552:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <_strtod_l+0x8e>
 8013558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801355a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013560:	2b00      	cmp	r3, #0
 8013562:	d01d      	beq.n	80135a0 <_strtod_l+0xd0>
 8013564:	2380      	movs	r3, #128	; 0x80
 8013566:	0032      	movs	r2, r6
 8013568:	061b      	lsls	r3, r3, #24
 801356a:	18fb      	adds	r3, r7, r3
 801356c:	0010      	movs	r0, r2
 801356e:	0019      	movs	r1, r3
 8013570:	b027      	add	sp, #156	; 0x9c
 8013572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013574:	2a2b      	cmp	r2, #43	; 0x2b
 8013576:	d016      	beq.n	80135a6 <_strtod_l+0xd6>
 8013578:	2a2d      	cmp	r2, #45	; 0x2d
 801357a:	d003      	beq.n	8013584 <_strtod_l+0xb4>
 801357c:	2a20      	cmp	r2, #32
 801357e:	d1c3      	bne.n	8013508 <_strtod_l+0x38>
 8013580:	3301      	adds	r3, #1
 8013582:	e7b8      	b.n	80134f6 <_strtod_l+0x26>
 8013584:	2201      	movs	r2, #1
 8013586:	9213      	str	r2, [sp, #76]	; 0x4c
 8013588:	1c5a      	adds	r2, r3, #1
 801358a:	9221      	str	r2, [sp, #132]	; 0x84
 801358c:	785b      	ldrb	r3, [r3, #1]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d1bc      	bne.n	801350c <_strtod_l+0x3c>
 8013592:	9b06      	ldr	r3, [sp, #24]
 8013594:	9321      	str	r3, [sp, #132]	; 0x84
 8013596:	2300      	movs	r3, #0
 8013598:	9313      	str	r3, [sp, #76]	; 0x4c
 801359a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801359c:	2b00      	cmp	r3, #0
 801359e:	d1db      	bne.n	8013558 <_strtod_l+0x88>
 80135a0:	0032      	movs	r2, r6
 80135a2:	003b      	movs	r3, r7
 80135a4:	e7e2      	b.n	801356c <_strtod_l+0x9c>
 80135a6:	2200      	movs	r2, #0
 80135a8:	e7ed      	b.n	8013586 <_strtod_l+0xb6>
 80135aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80135ac:	2a00      	cmp	r2, #0
 80135ae:	d007      	beq.n	80135c0 <_strtod_l+0xf0>
 80135b0:	2135      	movs	r1, #53	; 0x35
 80135b2:	a824      	add	r0, sp, #144	; 0x90
 80135b4:	f003 ff7d 	bl	80174b2 <__copybits>
 80135b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80135ba:	9804      	ldr	r0, [sp, #16]
 80135bc:	f003 fc12 	bl	8016de4 <_Bfree>
 80135c0:	1e68      	subs	r0, r5, #1
 80135c2:	2804      	cmp	r0, #4
 80135c4:	d806      	bhi.n	80135d4 <_strtod_l+0x104>
 80135c6:	f7ec fdaf 	bl	8000128 <__gnu_thumb1_case_uqi>
 80135ca:	030c      	.short	0x030c
 80135cc:	1917      	.short	0x1917
 80135ce:	0c          	.byte	0x0c
 80135cf:	00          	.byte	0x00
 80135d0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135d2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80135d4:	9b05      	ldr	r3, [sp, #20]
 80135d6:	071b      	lsls	r3, r3, #28
 80135d8:	d5bb      	bpl.n	8013552 <_strtod_l+0x82>
 80135da:	2380      	movs	r3, #128	; 0x80
 80135dc:	061b      	lsls	r3, r3, #24
 80135de:	431f      	orrs	r7, r3
 80135e0:	e7b7      	b.n	8013552 <_strtod_l+0x82>
 80135e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135e4:	4a68      	ldr	r2, [pc, #416]	; (8013788 <_strtod_l+0x2b8>)
 80135e6:	4969      	ldr	r1, [pc, #420]	; (801378c <_strtod_l+0x2bc>)
 80135e8:	401a      	ands	r2, r3
 80135ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80135ec:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135ee:	185b      	adds	r3, r3, r1
 80135f0:	051b      	lsls	r3, r3, #20
 80135f2:	431a      	orrs	r2, r3
 80135f4:	0017      	movs	r7, r2
 80135f6:	e7ed      	b.n	80135d4 <_strtod_l+0x104>
 80135f8:	4f65      	ldr	r7, [pc, #404]	; (8013790 <_strtod_l+0x2c0>)
 80135fa:	e7eb      	b.n	80135d4 <_strtod_l+0x104>
 80135fc:	2601      	movs	r6, #1
 80135fe:	4f65      	ldr	r7, [pc, #404]	; (8013794 <_strtod_l+0x2c4>)
 8013600:	4276      	negs	r6, r6
 8013602:	e7e7      	b.n	80135d4 <_strtod_l+0x104>
 8013604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013606:	1c5a      	adds	r2, r3, #1
 8013608:	9221      	str	r2, [sp, #132]	; 0x84
 801360a:	785b      	ldrb	r3, [r3, #1]
 801360c:	2b30      	cmp	r3, #48	; 0x30
 801360e:	d0f9      	beq.n	8013604 <_strtod_l+0x134>
 8013610:	2b00      	cmp	r3, #0
 8013612:	d09e      	beq.n	8013552 <_strtod_l+0x82>
 8013614:	2301      	movs	r3, #1
 8013616:	930c      	str	r3, [sp, #48]	; 0x30
 8013618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801361a:	220a      	movs	r2, #10
 801361c:	9312      	str	r3, [sp, #72]	; 0x48
 801361e:	2300      	movs	r3, #0
 8013620:	930b      	str	r3, [sp, #44]	; 0x2c
 8013622:	9308      	str	r3, [sp, #32]
 8013624:	930a      	str	r3, [sp, #40]	; 0x28
 8013626:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013628:	7804      	ldrb	r4, [r0, #0]
 801362a:	0023      	movs	r3, r4
 801362c:	3b30      	subs	r3, #48	; 0x30
 801362e:	b2d9      	uxtb	r1, r3
 8013630:	2909      	cmp	r1, #9
 8013632:	d934      	bls.n	801369e <_strtod_l+0x1ce>
 8013634:	9a05      	ldr	r2, [sp, #20]
 8013636:	6829      	ldr	r1, [r5, #0]
 8013638:	f7ff ff0c 	bl	8013454 <strncmp>
 801363c:	2800      	cmp	r0, #0
 801363e:	d040      	beq.n	80136c2 <_strtod_l+0x1f2>
 8013640:	2000      	movs	r0, #0
 8013642:	0023      	movs	r3, r4
 8013644:	4684      	mov	ip, r0
 8013646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013648:	9007      	str	r0, [sp, #28]
 801364a:	9205      	str	r2, [sp, #20]
 801364c:	2220      	movs	r2, #32
 801364e:	0019      	movs	r1, r3
 8013650:	4391      	bics	r1, r2
 8013652:	000a      	movs	r2, r1
 8013654:	2100      	movs	r1, #0
 8013656:	2a45      	cmp	r2, #69	; 0x45
 8013658:	d000      	beq.n	801365c <_strtod_l+0x18c>
 801365a:	e0bf      	b.n	80137dc <_strtod_l+0x30c>
 801365c:	9b05      	ldr	r3, [sp, #20]
 801365e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013660:	4303      	orrs	r3, r0
 8013662:	4313      	orrs	r3, r2
 8013664:	428b      	cmp	r3, r1
 8013666:	d094      	beq.n	8013592 <_strtod_l+0xc2>
 8013668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801366a:	9306      	str	r3, [sp, #24]
 801366c:	3301      	adds	r3, #1
 801366e:	9321      	str	r3, [sp, #132]	; 0x84
 8013670:	9b06      	ldr	r3, [sp, #24]
 8013672:	785b      	ldrb	r3, [r3, #1]
 8013674:	2b2b      	cmp	r3, #43	; 0x2b
 8013676:	d100      	bne.n	801367a <_strtod_l+0x1aa>
 8013678:	e082      	b.n	8013780 <_strtod_l+0x2b0>
 801367a:	000c      	movs	r4, r1
 801367c:	2b2d      	cmp	r3, #45	; 0x2d
 801367e:	d105      	bne.n	801368c <_strtod_l+0x1bc>
 8013680:	2401      	movs	r4, #1
 8013682:	9b06      	ldr	r3, [sp, #24]
 8013684:	3302      	adds	r3, #2
 8013686:	9321      	str	r3, [sp, #132]	; 0x84
 8013688:	9b06      	ldr	r3, [sp, #24]
 801368a:	789b      	ldrb	r3, [r3, #2]
 801368c:	001a      	movs	r2, r3
 801368e:	3a30      	subs	r2, #48	; 0x30
 8013690:	2a09      	cmp	r2, #9
 8013692:	d800      	bhi.n	8013696 <_strtod_l+0x1c6>
 8013694:	e084      	b.n	80137a0 <_strtod_l+0x2d0>
 8013696:	9a06      	ldr	r2, [sp, #24]
 8013698:	2100      	movs	r1, #0
 801369a:	9221      	str	r2, [sp, #132]	; 0x84
 801369c:	e09e      	b.n	80137dc <_strtod_l+0x30c>
 801369e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80136a0:	2908      	cmp	r1, #8
 80136a2:	dc09      	bgt.n	80136b8 <_strtod_l+0x1e8>
 80136a4:	9908      	ldr	r1, [sp, #32]
 80136a6:	4351      	muls	r1, r2
 80136a8:	18cb      	adds	r3, r1, r3
 80136aa:	9308      	str	r3, [sp, #32]
 80136ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ae:	3001      	adds	r0, #1
 80136b0:	3301      	adds	r3, #1
 80136b2:	930a      	str	r3, [sp, #40]	; 0x28
 80136b4:	9021      	str	r0, [sp, #132]	; 0x84
 80136b6:	e7b6      	b.n	8013626 <_strtod_l+0x156>
 80136b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136ba:	4351      	muls	r1, r2
 80136bc:	18cb      	adds	r3, r1, r3
 80136be:	930b      	str	r3, [sp, #44]	; 0x2c
 80136c0:	e7f4      	b.n	80136ac <_strtod_l+0x1dc>
 80136c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136c4:	9b05      	ldr	r3, [sp, #20]
 80136c6:	4694      	mov	ip, r2
 80136c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ca:	4463      	add	r3, ip
 80136cc:	9321      	str	r3, [sp, #132]	; 0x84
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	d036      	beq.n	8013742 <_strtod_l+0x272>
 80136d4:	4684      	mov	ip, r0
 80136d6:	9205      	str	r2, [sp, #20]
 80136d8:	001a      	movs	r2, r3
 80136da:	3a30      	subs	r2, #48	; 0x30
 80136dc:	2a09      	cmp	r2, #9
 80136de:	d912      	bls.n	8013706 <_strtod_l+0x236>
 80136e0:	2201      	movs	r2, #1
 80136e2:	9207      	str	r2, [sp, #28]
 80136e4:	e7b2      	b.n	801364c <_strtod_l+0x17c>
 80136e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136e8:	3001      	adds	r0, #1
 80136ea:	1c5a      	adds	r2, r3, #1
 80136ec:	9221      	str	r2, [sp, #132]	; 0x84
 80136ee:	785b      	ldrb	r3, [r3, #1]
 80136f0:	2b30      	cmp	r3, #48	; 0x30
 80136f2:	d0f8      	beq.n	80136e6 <_strtod_l+0x216>
 80136f4:	001a      	movs	r2, r3
 80136f6:	3a31      	subs	r2, #49	; 0x31
 80136f8:	2a08      	cmp	r2, #8
 80136fa:	d83c      	bhi.n	8013776 <_strtod_l+0x2a6>
 80136fc:	4684      	mov	ip, r0
 80136fe:	2000      	movs	r0, #0
 8013700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013702:	9005      	str	r0, [sp, #20]
 8013704:	9212      	str	r2, [sp, #72]	; 0x48
 8013706:	3b30      	subs	r3, #48	; 0x30
 8013708:	1c42      	adds	r2, r0, #1
 801370a:	2b00      	cmp	r3, #0
 801370c:	d013      	beq.n	8013736 <_strtod_l+0x266>
 801370e:	210a      	movs	r1, #10
 8013710:	4494      	add	ip, r2
 8013712:	9a05      	ldr	r2, [sp, #20]
 8013714:	1885      	adds	r5, r0, r2
 8013716:	42aa      	cmp	r2, r5
 8013718:	d115      	bne.n	8013746 <_strtod_l+0x276>
 801371a:	9905      	ldr	r1, [sp, #20]
 801371c:	9a05      	ldr	r2, [sp, #20]
 801371e:	3101      	adds	r1, #1
 8013720:	1809      	adds	r1, r1, r0
 8013722:	1812      	adds	r2, r2, r0
 8013724:	9105      	str	r1, [sp, #20]
 8013726:	2a08      	cmp	r2, #8
 8013728:	dc1b      	bgt.n	8013762 <_strtod_l+0x292>
 801372a:	220a      	movs	r2, #10
 801372c:	9908      	ldr	r1, [sp, #32]
 801372e:	434a      	muls	r2, r1
 8013730:	189b      	adds	r3, r3, r2
 8013732:	2200      	movs	r2, #0
 8013734:	9308      	str	r3, [sp, #32]
 8013736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013738:	0010      	movs	r0, r2
 801373a:	1c59      	adds	r1, r3, #1
 801373c:	9121      	str	r1, [sp, #132]	; 0x84
 801373e:	785b      	ldrb	r3, [r3, #1]
 8013740:	e7ca      	b.n	80136d8 <_strtod_l+0x208>
 8013742:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013744:	e7d4      	b.n	80136f0 <_strtod_l+0x220>
 8013746:	1c54      	adds	r4, r2, #1
 8013748:	2a08      	cmp	r2, #8
 801374a:	dc04      	bgt.n	8013756 <_strtod_l+0x286>
 801374c:	9a08      	ldr	r2, [sp, #32]
 801374e:	434a      	muls	r2, r1
 8013750:	9208      	str	r2, [sp, #32]
 8013752:	0022      	movs	r2, r4
 8013754:	e7df      	b.n	8013716 <_strtod_l+0x246>
 8013756:	2c10      	cmp	r4, #16
 8013758:	dcfb      	bgt.n	8013752 <_strtod_l+0x282>
 801375a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801375c:	434a      	muls	r2, r1
 801375e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013760:	e7f7      	b.n	8013752 <_strtod_l+0x282>
 8013762:	9905      	ldr	r1, [sp, #20]
 8013764:	2200      	movs	r2, #0
 8013766:	2910      	cmp	r1, #16
 8013768:	dce5      	bgt.n	8013736 <_strtod_l+0x266>
 801376a:	210a      	movs	r1, #10
 801376c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801376e:	4341      	muls	r1, r0
 8013770:	185b      	adds	r3, r3, r1
 8013772:	930b      	str	r3, [sp, #44]	; 0x2c
 8013774:	e7df      	b.n	8013736 <_strtod_l+0x266>
 8013776:	2200      	movs	r2, #0
 8013778:	4694      	mov	ip, r2
 801377a:	9205      	str	r2, [sp, #20]
 801377c:	3201      	adds	r2, #1
 801377e:	e7b0      	b.n	80136e2 <_strtod_l+0x212>
 8013780:	000c      	movs	r4, r1
 8013782:	e77e      	b.n	8013682 <_strtod_l+0x1b2>
 8013784:	0801a66c 	.word	0x0801a66c
 8013788:	ffefffff 	.word	0xffefffff
 801378c:	00000433 	.word	0x00000433
 8013790:	7ff00000 	.word	0x7ff00000
 8013794:	7fffffff 	.word	0x7fffffff
 8013798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	9221      	str	r2, [sp, #132]	; 0x84
 801379e:	785b      	ldrb	r3, [r3, #1]
 80137a0:	2b30      	cmp	r3, #48	; 0x30
 80137a2:	d0f9      	beq.n	8013798 <_strtod_l+0x2c8>
 80137a4:	001a      	movs	r2, r3
 80137a6:	3a31      	subs	r2, #49	; 0x31
 80137a8:	2100      	movs	r1, #0
 80137aa:	2a08      	cmp	r2, #8
 80137ac:	d816      	bhi.n	80137dc <_strtod_l+0x30c>
 80137ae:	3b30      	subs	r3, #48	; 0x30
 80137b0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80137b2:	930e      	str	r3, [sp, #56]	; 0x38
 80137b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137b6:	1c59      	adds	r1, r3, #1
 80137b8:	9121      	str	r1, [sp, #132]	; 0x84
 80137ba:	785b      	ldrb	r3, [r3, #1]
 80137bc:	001a      	movs	r2, r3
 80137be:	3a30      	subs	r2, #48	; 0x30
 80137c0:	2a09      	cmp	r2, #9
 80137c2:	d932      	bls.n	801382a <_strtod_l+0x35a>
 80137c4:	1b4a      	subs	r2, r1, r5
 80137c6:	4dad      	ldr	r5, [pc, #692]	; (8013a7c <_strtod_l+0x5ac>)
 80137c8:	0029      	movs	r1, r5
 80137ca:	2a08      	cmp	r2, #8
 80137cc:	dc03      	bgt.n	80137d6 <_strtod_l+0x306>
 80137ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80137d0:	42a9      	cmp	r1, r5
 80137d2:	dd00      	ble.n	80137d6 <_strtod_l+0x306>
 80137d4:	0029      	movs	r1, r5
 80137d6:	2c00      	cmp	r4, #0
 80137d8:	d000      	beq.n	80137dc <_strtod_l+0x30c>
 80137da:	4249      	negs	r1, r1
 80137dc:	9a05      	ldr	r2, [sp, #20]
 80137de:	2a00      	cmp	r2, #0
 80137e0:	d149      	bne.n	8013876 <_strtod_l+0x3a6>
 80137e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137e4:	4310      	orrs	r0, r2
 80137e6:	d000      	beq.n	80137ea <_strtod_l+0x31a>
 80137e8:	e6b3      	b.n	8013552 <_strtod_l+0x82>
 80137ea:	9a07      	ldr	r2, [sp, #28]
 80137ec:	2a00      	cmp	r2, #0
 80137ee:	d000      	beq.n	80137f2 <_strtod_l+0x322>
 80137f0:	e6cf      	b.n	8013592 <_strtod_l+0xc2>
 80137f2:	2b4e      	cmp	r3, #78	; 0x4e
 80137f4:	d025      	beq.n	8013842 <_strtod_l+0x372>
 80137f6:	dc1f      	bgt.n	8013838 <_strtod_l+0x368>
 80137f8:	2b49      	cmp	r3, #73	; 0x49
 80137fa:	d000      	beq.n	80137fe <_strtod_l+0x32e>
 80137fc:	e6c9      	b.n	8013592 <_strtod_l+0xc2>
 80137fe:	49a0      	ldr	r1, [pc, #640]	; (8013a80 <_strtod_l+0x5b0>)
 8013800:	a821      	add	r0, sp, #132	; 0x84
 8013802:	f003 f9ed 	bl	8016be0 <__match>
 8013806:	2800      	cmp	r0, #0
 8013808:	d100      	bne.n	801380c <_strtod_l+0x33c>
 801380a:	e6c2      	b.n	8013592 <_strtod_l+0xc2>
 801380c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801380e:	499d      	ldr	r1, [pc, #628]	; (8013a84 <_strtod_l+0x5b4>)
 8013810:	3b01      	subs	r3, #1
 8013812:	a821      	add	r0, sp, #132	; 0x84
 8013814:	9321      	str	r3, [sp, #132]	; 0x84
 8013816:	f003 f9e3 	bl	8016be0 <__match>
 801381a:	2800      	cmp	r0, #0
 801381c:	d102      	bne.n	8013824 <_strtod_l+0x354>
 801381e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013820:	3301      	adds	r3, #1
 8013822:	9321      	str	r3, [sp, #132]	; 0x84
 8013824:	4f98      	ldr	r7, [pc, #608]	; (8013a88 <_strtod_l+0x5b8>)
 8013826:	2600      	movs	r6, #0
 8013828:	e693      	b.n	8013552 <_strtod_l+0x82>
 801382a:	220a      	movs	r2, #10
 801382c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801382e:	434a      	muls	r2, r1
 8013830:	18d2      	adds	r2, r2, r3
 8013832:	3a30      	subs	r2, #48	; 0x30
 8013834:	920e      	str	r2, [sp, #56]	; 0x38
 8013836:	e7bd      	b.n	80137b4 <_strtod_l+0x2e4>
 8013838:	2b69      	cmp	r3, #105	; 0x69
 801383a:	d0e0      	beq.n	80137fe <_strtod_l+0x32e>
 801383c:	2b6e      	cmp	r3, #110	; 0x6e
 801383e:	d000      	beq.n	8013842 <_strtod_l+0x372>
 8013840:	e6a7      	b.n	8013592 <_strtod_l+0xc2>
 8013842:	4992      	ldr	r1, [pc, #584]	; (8013a8c <_strtod_l+0x5bc>)
 8013844:	a821      	add	r0, sp, #132	; 0x84
 8013846:	f003 f9cb 	bl	8016be0 <__match>
 801384a:	2800      	cmp	r0, #0
 801384c:	d100      	bne.n	8013850 <_strtod_l+0x380>
 801384e:	e6a0      	b.n	8013592 <_strtod_l+0xc2>
 8013850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	2b28      	cmp	r3, #40	; 0x28
 8013856:	d10c      	bne.n	8013872 <_strtod_l+0x3a2>
 8013858:	aa24      	add	r2, sp, #144	; 0x90
 801385a:	498d      	ldr	r1, [pc, #564]	; (8013a90 <_strtod_l+0x5c0>)
 801385c:	a821      	add	r0, sp, #132	; 0x84
 801385e:	f003 f9d3 	bl	8016c08 <__hexnan>
 8013862:	2805      	cmp	r0, #5
 8013864:	d105      	bne.n	8013872 <_strtod_l+0x3a2>
 8013866:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013868:	4a87      	ldr	r2, [pc, #540]	; (8013a88 <_strtod_l+0x5b8>)
 801386a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801386c:	431a      	orrs	r2, r3
 801386e:	0017      	movs	r7, r2
 8013870:	e66f      	b.n	8013552 <_strtod_l+0x82>
 8013872:	4f88      	ldr	r7, [pc, #544]	; (8013a94 <_strtod_l+0x5c4>)
 8013874:	e7d7      	b.n	8013826 <_strtod_l+0x356>
 8013876:	4663      	mov	r3, ip
 8013878:	1acb      	subs	r3, r1, r3
 801387a:	9307      	str	r3, [sp, #28]
 801387c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801387e:	2b00      	cmp	r3, #0
 8013880:	d101      	bne.n	8013886 <_strtod_l+0x3b6>
 8013882:	9b05      	ldr	r3, [sp, #20]
 8013884:	930a      	str	r3, [sp, #40]	; 0x28
 8013886:	9c05      	ldr	r4, [sp, #20]
 8013888:	2c10      	cmp	r4, #16
 801388a:	dd00      	ble.n	801388e <_strtod_l+0x3be>
 801388c:	2410      	movs	r4, #16
 801388e:	9808      	ldr	r0, [sp, #32]
 8013890:	f7ef f916 	bl	8002ac0 <__aeabi_ui2d>
 8013894:	9b05      	ldr	r3, [sp, #20]
 8013896:	0006      	movs	r6, r0
 8013898:	000f      	movs	r7, r1
 801389a:	2b09      	cmp	r3, #9
 801389c:	dc15      	bgt.n	80138ca <_strtod_l+0x3fa>
 801389e:	9b07      	ldr	r3, [sp, #28]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d100      	bne.n	80138a6 <_strtod_l+0x3d6>
 80138a4:	e655      	b.n	8013552 <_strtod_l+0x82>
 80138a6:	9b07      	ldr	r3, [sp, #28]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	dc00      	bgt.n	80138ae <_strtod_l+0x3de>
 80138ac:	e07d      	b.n	80139aa <_strtod_l+0x4da>
 80138ae:	2b16      	cmp	r3, #22
 80138b0:	dc62      	bgt.n	8013978 <_strtod_l+0x4a8>
 80138b2:	00dc      	lsls	r4, r3, #3
 80138b4:	4b78      	ldr	r3, [pc, #480]	; (8013a98 <_strtod_l+0x5c8>)
 80138b6:	0032      	movs	r2, r6
 80138b8:	1919      	adds	r1, r3, r4
 80138ba:	003b      	movs	r3, r7
 80138bc:	6808      	ldr	r0, [r1, #0]
 80138be:	6849      	ldr	r1, [r1, #4]
 80138c0:	f7ee fab8 	bl	8001e34 <__aeabi_dmul>
 80138c4:	0006      	movs	r6, r0
 80138c6:	000f      	movs	r7, r1
 80138c8:	e643      	b.n	8013552 <_strtod_l+0x82>
 80138ca:	0022      	movs	r2, r4
 80138cc:	4b72      	ldr	r3, [pc, #456]	; (8013a98 <_strtod_l+0x5c8>)
 80138ce:	3a09      	subs	r2, #9
 80138d0:	00d2      	lsls	r2, r2, #3
 80138d2:	189b      	adds	r3, r3, r2
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	f7ee faac 	bl	8001e34 <__aeabi_dmul>
 80138dc:	0006      	movs	r6, r0
 80138de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80138e0:	000f      	movs	r7, r1
 80138e2:	f7ef f8ed 	bl	8002ac0 <__aeabi_ui2d>
 80138e6:	000b      	movs	r3, r1
 80138e8:	0002      	movs	r2, r0
 80138ea:	0039      	movs	r1, r7
 80138ec:	0030      	movs	r0, r6
 80138ee:	f7ed fb7b 	bl	8000fe8 <__aeabi_dadd>
 80138f2:	9b05      	ldr	r3, [sp, #20]
 80138f4:	0006      	movs	r6, r0
 80138f6:	000f      	movs	r7, r1
 80138f8:	2b0f      	cmp	r3, #15
 80138fa:	ddd0      	ble.n	801389e <_strtod_l+0x3ce>
 80138fc:	9b05      	ldr	r3, [sp, #20]
 80138fe:	1b1c      	subs	r4, r3, r4
 8013900:	9b07      	ldr	r3, [sp, #28]
 8013902:	18e4      	adds	r4, r4, r3
 8013904:	2c00      	cmp	r4, #0
 8013906:	dc00      	bgt.n	801390a <_strtod_l+0x43a>
 8013908:	e094      	b.n	8013a34 <_strtod_l+0x564>
 801390a:	230f      	movs	r3, #15
 801390c:	4023      	ands	r3, r4
 801390e:	d00a      	beq.n	8013926 <_strtod_l+0x456>
 8013910:	4961      	ldr	r1, [pc, #388]	; (8013a98 <_strtod_l+0x5c8>)
 8013912:	00db      	lsls	r3, r3, #3
 8013914:	18c9      	adds	r1, r1, r3
 8013916:	0032      	movs	r2, r6
 8013918:	6808      	ldr	r0, [r1, #0]
 801391a:	6849      	ldr	r1, [r1, #4]
 801391c:	003b      	movs	r3, r7
 801391e:	f7ee fa89 	bl	8001e34 <__aeabi_dmul>
 8013922:	0006      	movs	r6, r0
 8013924:	000f      	movs	r7, r1
 8013926:	230f      	movs	r3, #15
 8013928:	439c      	bics	r4, r3
 801392a:	d06e      	beq.n	8013a0a <_strtod_l+0x53a>
 801392c:	3326      	adds	r3, #38	; 0x26
 801392e:	33ff      	adds	r3, #255	; 0xff
 8013930:	429c      	cmp	r4, r3
 8013932:	dd48      	ble.n	80139c6 <_strtod_l+0x4f6>
 8013934:	2400      	movs	r4, #0
 8013936:	9405      	str	r4, [sp, #20]
 8013938:	940b      	str	r4, [sp, #44]	; 0x2c
 801393a:	940a      	str	r4, [sp, #40]	; 0x28
 801393c:	2322      	movs	r3, #34	; 0x22
 801393e:	2600      	movs	r6, #0
 8013940:	9a04      	ldr	r2, [sp, #16]
 8013942:	4f51      	ldr	r7, [pc, #324]	; (8013a88 <_strtod_l+0x5b8>)
 8013944:	6013      	str	r3, [r2, #0]
 8013946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013948:	42b3      	cmp	r3, r6
 801394a:	d100      	bne.n	801394e <_strtod_l+0x47e>
 801394c:	e601      	b.n	8013552 <_strtod_l+0x82>
 801394e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013950:	9804      	ldr	r0, [sp, #16]
 8013952:	f003 fa47 	bl	8016de4 <_Bfree>
 8013956:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013958:	9804      	ldr	r0, [sp, #16]
 801395a:	f003 fa43 	bl	8016de4 <_Bfree>
 801395e:	9905      	ldr	r1, [sp, #20]
 8013960:	9804      	ldr	r0, [sp, #16]
 8013962:	f003 fa3f 	bl	8016de4 <_Bfree>
 8013966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013968:	9804      	ldr	r0, [sp, #16]
 801396a:	f003 fa3b 	bl	8016de4 <_Bfree>
 801396e:	0021      	movs	r1, r4
 8013970:	9804      	ldr	r0, [sp, #16]
 8013972:	f003 fa37 	bl	8016de4 <_Bfree>
 8013976:	e5ec      	b.n	8013552 <_strtod_l+0x82>
 8013978:	2325      	movs	r3, #37	; 0x25
 801397a:	9a05      	ldr	r2, [sp, #20]
 801397c:	1a9b      	subs	r3, r3, r2
 801397e:	9a07      	ldr	r2, [sp, #28]
 8013980:	4293      	cmp	r3, r2
 8013982:	dbbb      	blt.n	80138fc <_strtod_l+0x42c>
 8013984:	230f      	movs	r3, #15
 8013986:	9a05      	ldr	r2, [sp, #20]
 8013988:	4c43      	ldr	r4, [pc, #268]	; (8013a98 <_strtod_l+0x5c8>)
 801398a:	1a9d      	subs	r5, r3, r2
 801398c:	00e9      	lsls	r1, r5, #3
 801398e:	1861      	adds	r1, r4, r1
 8013990:	0032      	movs	r2, r6
 8013992:	6808      	ldr	r0, [r1, #0]
 8013994:	6849      	ldr	r1, [r1, #4]
 8013996:	003b      	movs	r3, r7
 8013998:	f7ee fa4c 	bl	8001e34 <__aeabi_dmul>
 801399c:	9b07      	ldr	r3, [sp, #28]
 801399e:	1b5e      	subs	r6, r3, r5
 80139a0:	00f6      	lsls	r6, r6, #3
 80139a2:	19a6      	adds	r6, r4, r6
 80139a4:	6832      	ldr	r2, [r6, #0]
 80139a6:	6873      	ldr	r3, [r6, #4]
 80139a8:	e78a      	b.n	80138c0 <_strtod_l+0x3f0>
 80139aa:	9b07      	ldr	r3, [sp, #28]
 80139ac:	3316      	adds	r3, #22
 80139ae:	dba5      	blt.n	80138fc <_strtod_l+0x42c>
 80139b0:	9b07      	ldr	r3, [sp, #28]
 80139b2:	0030      	movs	r0, r6
 80139b4:	00da      	lsls	r2, r3, #3
 80139b6:	4b38      	ldr	r3, [pc, #224]	; (8013a98 <_strtod_l+0x5c8>)
 80139b8:	0039      	movs	r1, r7
 80139ba:	1a9b      	subs	r3, r3, r2
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	f7ed fe2e 	bl	8001620 <__aeabi_ddiv>
 80139c4:	e77e      	b.n	80138c4 <_strtod_l+0x3f4>
 80139c6:	2300      	movs	r3, #0
 80139c8:	0030      	movs	r0, r6
 80139ca:	0039      	movs	r1, r7
 80139cc:	001d      	movs	r5, r3
 80139ce:	1124      	asrs	r4, r4, #4
 80139d0:	2c01      	cmp	r4, #1
 80139d2:	dc1d      	bgt.n	8013a10 <_strtod_l+0x540>
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <_strtod_l+0x50c>
 80139d8:	0006      	movs	r6, r0
 80139da:	000f      	movs	r7, r1
 80139dc:	4b2f      	ldr	r3, [pc, #188]	; (8013a9c <_strtod_l+0x5cc>)
 80139de:	00ed      	lsls	r5, r5, #3
 80139e0:	18ff      	adds	r7, r7, r3
 80139e2:	4b2f      	ldr	r3, [pc, #188]	; (8013aa0 <_strtod_l+0x5d0>)
 80139e4:	0032      	movs	r2, r6
 80139e6:	195d      	adds	r5, r3, r5
 80139e8:	6828      	ldr	r0, [r5, #0]
 80139ea:	6869      	ldr	r1, [r5, #4]
 80139ec:	003b      	movs	r3, r7
 80139ee:	f7ee fa21 	bl	8001e34 <__aeabi_dmul>
 80139f2:	4b25      	ldr	r3, [pc, #148]	; (8013a88 <_strtod_l+0x5b8>)
 80139f4:	4a2b      	ldr	r2, [pc, #172]	; (8013aa4 <_strtod_l+0x5d4>)
 80139f6:	0006      	movs	r6, r0
 80139f8:	400b      	ands	r3, r1
 80139fa:	4293      	cmp	r3, r2
 80139fc:	d89a      	bhi.n	8013934 <_strtod_l+0x464>
 80139fe:	4a2a      	ldr	r2, [pc, #168]	; (8013aa8 <_strtod_l+0x5d8>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d913      	bls.n	8013a2c <_strtod_l+0x55c>
 8013a04:	2601      	movs	r6, #1
 8013a06:	4f29      	ldr	r7, [pc, #164]	; (8013aac <_strtod_l+0x5dc>)
 8013a08:	4276      	negs	r6, r6
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	9306      	str	r3, [sp, #24]
 8013a0e:	e07b      	b.n	8013b08 <_strtod_l+0x638>
 8013a10:	2201      	movs	r2, #1
 8013a12:	4214      	tst	r4, r2
 8013a14:	d007      	beq.n	8013a26 <_strtod_l+0x556>
 8013a16:	4a22      	ldr	r2, [pc, #136]	; (8013aa0 <_strtod_l+0x5d0>)
 8013a18:	00eb      	lsls	r3, r5, #3
 8013a1a:	189b      	adds	r3, r3, r2
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	f7ee fa08 	bl	8001e34 <__aeabi_dmul>
 8013a24:	2301      	movs	r3, #1
 8013a26:	3501      	adds	r5, #1
 8013a28:	1064      	asrs	r4, r4, #1
 8013a2a:	e7d1      	b.n	80139d0 <_strtod_l+0x500>
 8013a2c:	23d4      	movs	r3, #212	; 0xd4
 8013a2e:	049b      	lsls	r3, r3, #18
 8013a30:	18cf      	adds	r7, r1, r3
 8013a32:	e7ea      	b.n	8013a0a <_strtod_l+0x53a>
 8013a34:	2c00      	cmp	r4, #0
 8013a36:	d0e8      	beq.n	8013a0a <_strtod_l+0x53a>
 8013a38:	230f      	movs	r3, #15
 8013a3a:	4264      	negs	r4, r4
 8013a3c:	4023      	ands	r3, r4
 8013a3e:	d00a      	beq.n	8013a56 <_strtod_l+0x586>
 8013a40:	4a15      	ldr	r2, [pc, #84]	; (8013a98 <_strtod_l+0x5c8>)
 8013a42:	00db      	lsls	r3, r3, #3
 8013a44:	18d3      	adds	r3, r2, r3
 8013a46:	0030      	movs	r0, r6
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	0039      	movs	r1, r7
 8013a4e:	f7ed fde7 	bl	8001620 <__aeabi_ddiv>
 8013a52:	0006      	movs	r6, r0
 8013a54:	000f      	movs	r7, r1
 8013a56:	1124      	asrs	r4, r4, #4
 8013a58:	d0d7      	beq.n	8013a0a <_strtod_l+0x53a>
 8013a5a:	2c1f      	cmp	r4, #31
 8013a5c:	dd28      	ble.n	8013ab0 <_strtod_l+0x5e0>
 8013a5e:	2400      	movs	r4, #0
 8013a60:	9405      	str	r4, [sp, #20]
 8013a62:	940b      	str	r4, [sp, #44]	; 0x2c
 8013a64:	940a      	str	r4, [sp, #40]	; 0x28
 8013a66:	2322      	movs	r3, #34	; 0x22
 8013a68:	9a04      	ldr	r2, [sp, #16]
 8013a6a:	2600      	movs	r6, #0
 8013a6c:	6013      	str	r3, [r2, #0]
 8013a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a70:	2700      	movs	r7, #0
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d000      	beq.n	8013a78 <_strtod_l+0x5a8>
 8013a76:	e76a      	b.n	801394e <_strtod_l+0x47e>
 8013a78:	e56b      	b.n	8013552 <_strtod_l+0x82>
 8013a7a:	46c0      	nop			; (mov r8, r8)
 8013a7c:	00004e1f 	.word	0x00004e1f
 8013a80:	0801a6c5 	.word	0x0801a6c5
 8013a84:	0801a818 	.word	0x0801a818
 8013a88:	7ff00000 	.word	0x7ff00000
 8013a8c:	0801a6cd 	.word	0x0801a6cd
 8013a90:	0801a680 	.word	0x0801a680
 8013a94:	fff80000 	.word	0xfff80000
 8013a98:	0801a850 	.word	0x0801a850
 8013a9c:	fcb00000 	.word	0xfcb00000
 8013aa0:	0801a828 	.word	0x0801a828
 8013aa4:	7ca00000 	.word	0x7ca00000
 8013aa8:	7c900000 	.word	0x7c900000
 8013aac:	7fefffff 	.word	0x7fefffff
 8013ab0:	2310      	movs	r3, #16
 8013ab2:	4023      	ands	r3, r4
 8013ab4:	9306      	str	r3, [sp, #24]
 8013ab6:	d001      	beq.n	8013abc <_strtod_l+0x5ec>
 8013ab8:	236a      	movs	r3, #106	; 0x6a
 8013aba:	9306      	str	r3, [sp, #24]
 8013abc:	2300      	movs	r3, #0
 8013abe:	0030      	movs	r0, r6
 8013ac0:	0039      	movs	r1, r7
 8013ac2:	001d      	movs	r5, r3
 8013ac4:	2c00      	cmp	r4, #0
 8013ac6:	dd00      	ble.n	8013aca <_strtod_l+0x5fa>
 8013ac8:	e10e      	b.n	8013ce8 <_strtod_l+0x818>
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d001      	beq.n	8013ad2 <_strtod_l+0x602>
 8013ace:	0006      	movs	r6, r0
 8013ad0:	000f      	movs	r7, r1
 8013ad2:	9b06      	ldr	r3, [sp, #24]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d00f      	beq.n	8013af8 <_strtod_l+0x628>
 8013ad8:	236b      	movs	r3, #107	; 0x6b
 8013ada:	0079      	lsls	r1, r7, #1
 8013adc:	0d49      	lsrs	r1, r1, #21
 8013ade:	003a      	movs	r2, r7
 8013ae0:	1a5b      	subs	r3, r3, r1
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	dd08      	ble.n	8013af8 <_strtod_l+0x628>
 8013ae6:	2b1f      	cmp	r3, #31
 8013ae8:	dc00      	bgt.n	8013aec <_strtod_l+0x61c>
 8013aea:	e112      	b.n	8013d12 <_strtod_l+0x842>
 8013aec:	2600      	movs	r6, #0
 8013aee:	2b34      	cmp	r3, #52	; 0x34
 8013af0:	dc00      	bgt.n	8013af4 <_strtod_l+0x624>
 8013af2:	e107      	b.n	8013d04 <_strtod_l+0x834>
 8013af4:	27dc      	movs	r7, #220	; 0xdc
 8013af6:	04bf      	lsls	r7, r7, #18
 8013af8:	2200      	movs	r2, #0
 8013afa:	2300      	movs	r3, #0
 8013afc:	0030      	movs	r0, r6
 8013afe:	0039      	movs	r1, r7
 8013b00:	f7ec fcac 	bl	800045c <__aeabi_dcmpeq>
 8013b04:	2800      	cmp	r0, #0
 8013b06:	d1aa      	bne.n	8013a5e <_strtod_l+0x58e>
 8013b08:	9b08      	ldr	r3, [sp, #32]
 8013b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013b10:	9b05      	ldr	r3, [sp, #20]
 8013b12:	9804      	ldr	r0, [sp, #16]
 8013b14:	f003 f9ae 	bl	8016e74 <__s2b>
 8013b18:	900b      	str	r0, [sp, #44]	; 0x2c
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	d100      	bne.n	8013b20 <_strtod_l+0x650>
 8013b1e:	e709      	b.n	8013934 <_strtod_l+0x464>
 8013b20:	9b07      	ldr	r3, [sp, #28]
 8013b22:	9a07      	ldr	r2, [sp, #28]
 8013b24:	17db      	asrs	r3, r3, #31
 8013b26:	4252      	negs	r2, r2
 8013b28:	4013      	ands	r3, r2
 8013b2a:	9315      	str	r3, [sp, #84]	; 0x54
 8013b2c:	9b07      	ldr	r3, [sp, #28]
 8013b2e:	2400      	movs	r4, #0
 8013b30:	43db      	mvns	r3, r3
 8013b32:	9a07      	ldr	r2, [sp, #28]
 8013b34:	17db      	asrs	r3, r3, #31
 8013b36:	401a      	ands	r2, r3
 8013b38:	921c      	str	r2, [sp, #112]	; 0x70
 8013b3a:	9405      	str	r4, [sp, #20]
 8013b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b3e:	9804      	ldr	r0, [sp, #16]
 8013b40:	6859      	ldr	r1, [r3, #4]
 8013b42:	f003 f927 	bl	8016d94 <_Balloc>
 8013b46:	900a      	str	r0, [sp, #40]	; 0x28
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d100      	bne.n	8013b4e <_strtod_l+0x67e>
 8013b4c:	e6f6      	b.n	801393c <_strtod_l+0x46c>
 8013b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b52:	691b      	ldr	r3, [r3, #16]
 8013b54:	310c      	adds	r1, #12
 8013b56:	1c9a      	adds	r2, r3, #2
 8013b58:	0092      	lsls	r2, r2, #2
 8013b5a:	300c      	adds	r0, #12
 8013b5c:	9308      	str	r3, [sp, #32]
 8013b5e:	f7ff fa32 	bl	8012fc6 <memcpy>
 8013b62:	ab24      	add	r3, sp, #144	; 0x90
 8013b64:	9301      	str	r3, [sp, #4]
 8013b66:	ab23      	add	r3, sp, #140	; 0x8c
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	0032      	movs	r2, r6
 8013b6c:	003b      	movs	r3, r7
 8013b6e:	9804      	ldr	r0, [sp, #16]
 8013b70:	960e      	str	r6, [sp, #56]	; 0x38
 8013b72:	970f      	str	r7, [sp, #60]	; 0x3c
 8013b74:	f003 fc22 	bl	80173bc <__d2b>
 8013b78:	9022      	str	r0, [sp, #136]	; 0x88
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d100      	bne.n	8013b80 <_strtod_l+0x6b0>
 8013b7e:	e6dd      	b.n	801393c <_strtod_l+0x46c>
 8013b80:	2101      	movs	r1, #1
 8013b82:	9804      	ldr	r0, [sp, #16]
 8013b84:	f003 f9fd 	bl	8016f82 <__i2b>
 8013b88:	9005      	str	r0, [sp, #20]
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d100      	bne.n	8013b90 <_strtod_l+0x6c0>
 8013b8e:	e6d5      	b.n	801393c <_strtod_l+0x46c>
 8013b90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	da00      	bge.n	8013b98 <_strtod_l+0x6c8>
 8013b96:	e0c1      	b.n	8013d1c <_strtod_l+0x84c>
 8013b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013b9a:	189d      	adds	r5, r3, r2
 8013b9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b9e:	4694      	mov	ip, r2
 8013ba0:	9906      	ldr	r1, [sp, #24]
 8013ba2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013ba4:	1a5b      	subs	r3, r3, r1
 8013ba6:	2136      	movs	r1, #54	; 0x36
 8013ba8:	189b      	adds	r3, r3, r2
 8013baa:	1a8a      	subs	r2, r1, r2
 8013bac:	49b2      	ldr	r1, [pc, #712]	; (8013e78 <_strtod_l+0x9a8>)
 8013bae:	3b01      	subs	r3, #1
 8013bb0:	2001      	movs	r0, #1
 8013bb2:	428b      	cmp	r3, r1
 8013bb4:	db00      	blt.n	8013bb8 <_strtod_l+0x6e8>
 8013bb6:	e0bd      	b.n	8013d34 <_strtod_l+0x864>
 8013bb8:	1ac9      	subs	r1, r1, r3
 8013bba:	1a52      	subs	r2, r2, r1
 8013bbc:	291f      	cmp	r1, #31
 8013bbe:	dd00      	ble.n	8013bc2 <_strtod_l+0x6f2>
 8013bc0:	e0b1      	b.n	8013d26 <_strtod_l+0x856>
 8013bc2:	4088      	lsls	r0, r1
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	9014      	str	r0, [sp, #80]	; 0x50
 8013bc8:	9310      	str	r3, [sp, #64]	; 0x40
 8013bca:	18ab      	adds	r3, r5, r2
 8013bcc:	9308      	str	r3, [sp, #32]
 8013bce:	0013      	movs	r3, r2
 8013bd0:	9a06      	ldr	r2, [sp, #24]
 8013bd2:	4463      	add	r3, ip
 8013bd4:	18d3      	adds	r3, r2, r3
 8013bd6:	9a08      	ldr	r2, [sp, #32]
 8013bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8013bda:	002b      	movs	r3, r5
 8013bdc:	4295      	cmp	r5, r2
 8013bde:	dd00      	ble.n	8013be2 <_strtod_l+0x712>
 8013be0:	0013      	movs	r3, r2
 8013be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013be4:	4293      	cmp	r3, r2
 8013be6:	dd00      	ble.n	8013bea <_strtod_l+0x71a>
 8013be8:	0013      	movs	r3, r2
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	dd06      	ble.n	8013bfc <_strtod_l+0x72c>
 8013bee:	9a08      	ldr	r2, [sp, #32]
 8013bf0:	1aed      	subs	r5, r5, r3
 8013bf2:	1ad2      	subs	r2, r2, r3
 8013bf4:	9208      	str	r2, [sp, #32]
 8013bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bf8:	1ad2      	subs	r2, r2, r3
 8013bfa:	920c      	str	r2, [sp, #48]	; 0x30
 8013bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d017      	beq.n	8013c32 <_strtod_l+0x762>
 8013c02:	001a      	movs	r2, r3
 8013c04:	9905      	ldr	r1, [sp, #20]
 8013c06:	9804      	ldr	r0, [sp, #16]
 8013c08:	f003 fa54 	bl	80170b4 <__pow5mult>
 8013c0c:	9005      	str	r0, [sp, #20]
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d100      	bne.n	8013c14 <_strtod_l+0x744>
 8013c12:	e693      	b.n	801393c <_strtod_l+0x46c>
 8013c14:	0001      	movs	r1, r0
 8013c16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013c18:	9804      	ldr	r0, [sp, #16]
 8013c1a:	f003 f9bb 	bl	8016f94 <__multiply>
 8013c1e:	9012      	str	r0, [sp, #72]	; 0x48
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d100      	bne.n	8013c26 <_strtod_l+0x756>
 8013c24:	e68a      	b.n	801393c <_strtod_l+0x46c>
 8013c26:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c28:	9804      	ldr	r0, [sp, #16]
 8013c2a:	f003 f8db 	bl	8016de4 <_Bfree>
 8013c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c30:	9322      	str	r3, [sp, #136]	; 0x88
 8013c32:	9b08      	ldr	r3, [sp, #32]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	dd00      	ble.n	8013c3a <_strtod_l+0x76a>
 8013c38:	e07f      	b.n	8013d3a <_strtod_l+0x86a>
 8013c3a:	9b07      	ldr	r3, [sp, #28]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	dd08      	ble.n	8013c52 <_strtod_l+0x782>
 8013c40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c44:	9804      	ldr	r0, [sp, #16]
 8013c46:	f003 fa35 	bl	80170b4 <__pow5mult>
 8013c4a:	900a      	str	r0, [sp, #40]	; 0x28
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d100      	bne.n	8013c52 <_strtod_l+0x782>
 8013c50:	e674      	b.n	801393c <_strtod_l+0x46c>
 8013c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	dd08      	ble.n	8013c6a <_strtod_l+0x79a>
 8013c58:	001a      	movs	r2, r3
 8013c5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c5c:	9804      	ldr	r0, [sp, #16]
 8013c5e:	f003 fa6b 	bl	8017138 <__lshift>
 8013c62:	900a      	str	r0, [sp, #40]	; 0x28
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d100      	bne.n	8013c6a <_strtod_l+0x79a>
 8013c68:	e668      	b.n	801393c <_strtod_l+0x46c>
 8013c6a:	2d00      	cmp	r5, #0
 8013c6c:	dd08      	ble.n	8013c80 <_strtod_l+0x7b0>
 8013c6e:	002a      	movs	r2, r5
 8013c70:	9905      	ldr	r1, [sp, #20]
 8013c72:	9804      	ldr	r0, [sp, #16]
 8013c74:	f003 fa60 	bl	8017138 <__lshift>
 8013c78:	9005      	str	r0, [sp, #20]
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d100      	bne.n	8013c80 <_strtod_l+0x7b0>
 8013c7e:	e65d      	b.n	801393c <_strtod_l+0x46c>
 8013c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c84:	9804      	ldr	r0, [sp, #16]
 8013c86:	f003 fac3 	bl	8017210 <__mdiff>
 8013c8a:	1e04      	subs	r4, r0, #0
 8013c8c:	d100      	bne.n	8013c90 <_strtod_l+0x7c0>
 8013c8e:	e655      	b.n	801393c <_strtod_l+0x46c>
 8013c90:	2500      	movs	r5, #0
 8013c92:	68c3      	ldr	r3, [r0, #12]
 8013c94:	9905      	ldr	r1, [sp, #20]
 8013c96:	60c5      	str	r5, [r0, #12]
 8013c98:	9312      	str	r3, [sp, #72]	; 0x48
 8013c9a:	f003 fa9f 	bl	80171dc <__mcmp>
 8013c9e:	42a8      	cmp	r0, r5
 8013ca0:	da55      	bge.n	8013d4e <_strtod_l+0x87e>
 8013ca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ca4:	42ab      	cmp	r3, r5
 8013ca6:	d11b      	bne.n	8013ce0 <_strtod_l+0x810>
 8013ca8:	42ae      	cmp	r6, r5
 8013caa:	d119      	bne.n	8013ce0 <_strtod_l+0x810>
 8013cac:	033b      	lsls	r3, r7, #12
 8013cae:	42ab      	cmp	r3, r5
 8013cb0:	d116      	bne.n	8013ce0 <_strtod_l+0x810>
 8013cb2:	22d6      	movs	r2, #214	; 0xd6
 8013cb4:	4b71      	ldr	r3, [pc, #452]	; (8013e7c <_strtod_l+0x9ac>)
 8013cb6:	04d2      	lsls	r2, r2, #19
 8013cb8:	403b      	ands	r3, r7
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	d910      	bls.n	8013ce0 <_strtod_l+0x810>
 8013cbe:	6963      	ldr	r3, [r4, #20]
 8013cc0:	42ab      	cmp	r3, r5
 8013cc2:	d102      	bne.n	8013cca <_strtod_l+0x7fa>
 8013cc4:	6923      	ldr	r3, [r4, #16]
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	dd0a      	ble.n	8013ce0 <_strtod_l+0x810>
 8013cca:	0021      	movs	r1, r4
 8013ccc:	2201      	movs	r2, #1
 8013cce:	9804      	ldr	r0, [sp, #16]
 8013cd0:	f003 fa32 	bl	8017138 <__lshift>
 8013cd4:	9905      	ldr	r1, [sp, #20]
 8013cd6:	0004      	movs	r4, r0
 8013cd8:	f003 fa80 	bl	80171dc <__mcmp>
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	dc6b      	bgt.n	8013db8 <_strtod_l+0x8e8>
 8013ce0:	9b06      	ldr	r3, [sp, #24]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d178      	bne.n	8013dd8 <_strtod_l+0x908>
 8013ce6:	e632      	b.n	801394e <_strtod_l+0x47e>
 8013ce8:	2201      	movs	r2, #1
 8013cea:	4214      	tst	r4, r2
 8013cec:	d007      	beq.n	8013cfe <_strtod_l+0x82e>
 8013cee:	4a64      	ldr	r2, [pc, #400]	; (8013e80 <_strtod_l+0x9b0>)
 8013cf0:	00eb      	lsls	r3, r5, #3
 8013cf2:	18d3      	adds	r3, r2, r3
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	f7ee f89c 	bl	8001e34 <__aeabi_dmul>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	3501      	adds	r5, #1
 8013d00:	1064      	asrs	r4, r4, #1
 8013d02:	e6df      	b.n	8013ac4 <_strtod_l+0x5f4>
 8013d04:	2101      	movs	r1, #1
 8013d06:	3b20      	subs	r3, #32
 8013d08:	4249      	negs	r1, r1
 8013d0a:	4099      	lsls	r1, r3
 8013d0c:	400a      	ands	r2, r1
 8013d0e:	0017      	movs	r7, r2
 8013d10:	e6f2      	b.n	8013af8 <_strtod_l+0x628>
 8013d12:	2201      	movs	r2, #1
 8013d14:	4252      	negs	r2, r2
 8013d16:	409a      	lsls	r2, r3
 8013d18:	4016      	ands	r6, r2
 8013d1a:	e6ed      	b.n	8013af8 <_strtod_l+0x628>
 8013d1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d1e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d20:	1ad2      	subs	r2, r2, r3
 8013d22:	4694      	mov	ip, r2
 8013d24:	e73c      	b.n	8013ba0 <_strtod_l+0x6d0>
 8013d26:	4957      	ldr	r1, [pc, #348]	; (8013e84 <_strtod_l+0x9b4>)
 8013d28:	1acb      	subs	r3, r1, r3
 8013d2a:	0001      	movs	r1, r0
 8013d2c:	4099      	lsls	r1, r3
 8013d2e:	9110      	str	r1, [sp, #64]	; 0x40
 8013d30:	9014      	str	r0, [sp, #80]	; 0x50
 8013d32:	e74a      	b.n	8013bca <_strtod_l+0x6fa>
 8013d34:	2300      	movs	r3, #0
 8013d36:	9310      	str	r3, [sp, #64]	; 0x40
 8013d38:	e7fa      	b.n	8013d30 <_strtod_l+0x860>
 8013d3a:	9a08      	ldr	r2, [sp, #32]
 8013d3c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d3e:	9804      	ldr	r0, [sp, #16]
 8013d40:	f003 f9fa 	bl	8017138 <__lshift>
 8013d44:	9022      	str	r0, [sp, #136]	; 0x88
 8013d46:	2800      	cmp	r0, #0
 8013d48:	d000      	beq.n	8013d4c <_strtod_l+0x87c>
 8013d4a:	e776      	b.n	8013c3a <_strtod_l+0x76a>
 8013d4c:	e5f6      	b.n	801393c <_strtod_l+0x46c>
 8013d4e:	970c      	str	r7, [sp, #48]	; 0x30
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d000      	beq.n	8013d56 <_strtod_l+0x886>
 8013d54:	e0a0      	b.n	8013e98 <_strtod_l+0x9c8>
 8013d56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d58:	033b      	lsls	r3, r7, #12
 8013d5a:	0b1b      	lsrs	r3, r3, #12
 8013d5c:	2a00      	cmp	r2, #0
 8013d5e:	d027      	beq.n	8013db0 <_strtod_l+0x8e0>
 8013d60:	4a49      	ldr	r2, [pc, #292]	; (8013e88 <_strtod_l+0x9b8>)
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d157      	bne.n	8013e16 <_strtod_l+0x946>
 8013d66:	2201      	movs	r2, #1
 8013d68:	9b06      	ldr	r3, [sp, #24]
 8013d6a:	4252      	negs	r2, r2
 8013d6c:	0031      	movs	r1, r6
 8013d6e:	0010      	movs	r0, r2
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d00b      	beq.n	8013d8c <_strtod_l+0x8bc>
 8013d74:	25d4      	movs	r5, #212	; 0xd4
 8013d76:	4b41      	ldr	r3, [pc, #260]	; (8013e7c <_strtod_l+0x9ac>)
 8013d78:	04ed      	lsls	r5, r5, #19
 8013d7a:	403b      	ands	r3, r7
 8013d7c:	0010      	movs	r0, r2
 8013d7e:	42ab      	cmp	r3, r5
 8013d80:	d804      	bhi.n	8013d8c <_strtod_l+0x8bc>
 8013d82:	306c      	adds	r0, #108	; 0x6c
 8013d84:	0d1b      	lsrs	r3, r3, #20
 8013d86:	1ac3      	subs	r3, r0, r3
 8013d88:	409a      	lsls	r2, r3
 8013d8a:	0010      	movs	r0, r2
 8013d8c:	4281      	cmp	r1, r0
 8013d8e:	d142      	bne.n	8013e16 <_strtod_l+0x946>
 8013d90:	4b3e      	ldr	r3, [pc, #248]	; (8013e8c <_strtod_l+0x9bc>)
 8013d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d102      	bne.n	8013d9e <_strtod_l+0x8ce>
 8013d98:	1c4b      	adds	r3, r1, #1
 8013d9a:	d100      	bne.n	8013d9e <_strtod_l+0x8ce>
 8013d9c:	e5ce      	b.n	801393c <_strtod_l+0x46c>
 8013d9e:	4b37      	ldr	r3, [pc, #220]	; (8013e7c <_strtod_l+0x9ac>)
 8013da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013da2:	2600      	movs	r6, #0
 8013da4:	401a      	ands	r2, r3
 8013da6:	0013      	movs	r3, r2
 8013da8:	2280      	movs	r2, #128	; 0x80
 8013daa:	0352      	lsls	r2, r2, #13
 8013dac:	189f      	adds	r7, r3, r2
 8013dae:	e797      	b.n	8013ce0 <_strtod_l+0x810>
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d130      	bne.n	8013e16 <_strtod_l+0x946>
 8013db4:	2e00      	cmp	r6, #0
 8013db6:	d12e      	bne.n	8013e16 <_strtod_l+0x946>
 8013db8:	9906      	ldr	r1, [sp, #24]
 8013dba:	003b      	movs	r3, r7
 8013dbc:	4a2f      	ldr	r2, [pc, #188]	; (8013e7c <_strtod_l+0x9ac>)
 8013dbe:	2900      	cmp	r1, #0
 8013dc0:	d020      	beq.n	8013e04 <_strtod_l+0x934>
 8013dc2:	0011      	movs	r1, r2
 8013dc4:	20d6      	movs	r0, #214	; 0xd6
 8013dc6:	4039      	ands	r1, r7
 8013dc8:	04c0      	lsls	r0, r0, #19
 8013dca:	4281      	cmp	r1, r0
 8013dcc:	dc1a      	bgt.n	8013e04 <_strtod_l+0x934>
 8013dce:	23dc      	movs	r3, #220	; 0xdc
 8013dd0:	049b      	lsls	r3, r3, #18
 8013dd2:	4299      	cmp	r1, r3
 8013dd4:	dc00      	bgt.n	8013dd8 <_strtod_l+0x908>
 8013dd6:	e646      	b.n	8013a66 <_strtod_l+0x596>
 8013dd8:	4b2d      	ldr	r3, [pc, #180]	; (8013e90 <_strtod_l+0x9c0>)
 8013dda:	0030      	movs	r0, r6
 8013ddc:	931b      	str	r3, [sp, #108]	; 0x6c
 8013dde:	2300      	movs	r3, #0
 8013de0:	931a      	str	r3, [sp, #104]	; 0x68
 8013de2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013de6:	0039      	movs	r1, r7
 8013de8:	f7ee f824 	bl	8001e34 <__aeabi_dmul>
 8013dec:	0006      	movs	r6, r0
 8013dee:	000f      	movs	r7, r1
 8013df0:	1e0b      	subs	r3, r1, #0
 8013df2:	d000      	beq.n	8013df6 <_strtod_l+0x926>
 8013df4:	e5ab      	b.n	801394e <_strtod_l+0x47e>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d000      	beq.n	8013dfc <_strtod_l+0x92c>
 8013dfa:	e5a8      	b.n	801394e <_strtod_l+0x47e>
 8013dfc:	9a04      	ldr	r2, [sp, #16]
 8013dfe:	3322      	adds	r3, #34	; 0x22
 8013e00:	6013      	str	r3, [r2, #0]
 8013e02:	e5a4      	b.n	801394e <_strtod_l+0x47e>
 8013e04:	2601      	movs	r6, #1
 8013e06:	4013      	ands	r3, r2
 8013e08:	4a22      	ldr	r2, [pc, #136]	; (8013e94 <_strtod_l+0x9c4>)
 8013e0a:	4276      	negs	r6, r6
 8013e0c:	189b      	adds	r3, r3, r2
 8013e0e:	4a1e      	ldr	r2, [pc, #120]	; (8013e88 <_strtod_l+0x9b8>)
 8013e10:	431a      	orrs	r2, r3
 8013e12:	0017      	movs	r7, r2
 8013e14:	e764      	b.n	8013ce0 <_strtod_l+0x810>
 8013e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d015      	beq.n	8013e48 <_strtod_l+0x978>
 8013e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e20:	4213      	tst	r3, r2
 8013e22:	d100      	bne.n	8013e26 <_strtod_l+0x956>
 8013e24:	e75c      	b.n	8013ce0 <_strtod_l+0x810>
 8013e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e28:	9a06      	ldr	r2, [sp, #24]
 8013e2a:	0030      	movs	r0, r6
 8013e2c:	0039      	movs	r1, r7
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d00f      	beq.n	8013e52 <_strtod_l+0x982>
 8013e32:	f7ff fb35 	bl	80134a0 <sulp>
 8013e36:	0002      	movs	r2, r0
 8013e38:	000b      	movs	r3, r1
 8013e3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e3e:	f7ed f8d3 	bl	8000fe8 <__aeabi_dadd>
 8013e42:	0006      	movs	r6, r0
 8013e44:	000f      	movs	r7, r1
 8013e46:	e74b      	b.n	8013ce0 <_strtod_l+0x810>
 8013e48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e4a:	4233      	tst	r3, r6
 8013e4c:	d100      	bne.n	8013e50 <_strtod_l+0x980>
 8013e4e:	e747      	b.n	8013ce0 <_strtod_l+0x810>
 8013e50:	e7e9      	b.n	8013e26 <_strtod_l+0x956>
 8013e52:	f7ff fb25 	bl	80134a0 <sulp>
 8013e56:	0002      	movs	r2, r0
 8013e58:	000b      	movs	r3, r1
 8013e5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e5e:	f7ee fa5b 	bl	8002318 <__aeabi_dsub>
 8013e62:	2200      	movs	r2, #0
 8013e64:	2300      	movs	r3, #0
 8013e66:	0006      	movs	r6, r0
 8013e68:	000f      	movs	r7, r1
 8013e6a:	f7ec faf7 	bl	800045c <__aeabi_dcmpeq>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d000      	beq.n	8013e74 <_strtod_l+0x9a4>
 8013e72:	e5f8      	b.n	8013a66 <_strtod_l+0x596>
 8013e74:	e734      	b.n	8013ce0 <_strtod_l+0x810>
 8013e76:	46c0      	nop			; (mov r8, r8)
 8013e78:	fffffc02 	.word	0xfffffc02
 8013e7c:	7ff00000 	.word	0x7ff00000
 8013e80:	0801a698 	.word	0x0801a698
 8013e84:	fffffbe2 	.word	0xfffffbe2
 8013e88:	000fffff 	.word	0x000fffff
 8013e8c:	7fefffff 	.word	0x7fefffff
 8013e90:	39500000 	.word	0x39500000
 8013e94:	fff00000 	.word	0xfff00000
 8013e98:	9905      	ldr	r1, [sp, #20]
 8013e9a:	0020      	movs	r0, r4
 8013e9c:	f003 fae2 	bl	8017464 <__ratio>
 8013ea0:	2380      	movs	r3, #128	; 0x80
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	05db      	lsls	r3, r3, #23
 8013ea6:	9008      	str	r0, [sp, #32]
 8013ea8:	9109      	str	r1, [sp, #36]	; 0x24
 8013eaa:	f7ec fae7 	bl	800047c <__aeabi_dcmple>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d100      	bne.n	8013eb4 <_strtod_l+0x9e4>
 8013eb2:	e07f      	b.n	8013fb4 <_strtod_l+0xae4>
 8013eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d04b      	beq.n	8013f52 <_strtod_l+0xa82>
 8013eba:	2200      	movs	r2, #0
 8013ebc:	4b8a      	ldr	r3, [pc, #552]	; (80140e8 <_strtod_l+0xc18>)
 8013ebe:	9210      	str	r2, [sp, #64]	; 0x40
 8013ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8013ec2:	4b89      	ldr	r3, [pc, #548]	; (80140e8 <_strtod_l+0xc18>)
 8013ec4:	9308      	str	r3, [sp, #32]
 8013ec6:	4a89      	ldr	r2, [pc, #548]	; (80140ec <_strtod_l+0xc1c>)
 8013ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eca:	4013      	ands	r3, r2
 8013ecc:	9314      	str	r3, [sp, #80]	; 0x50
 8013ece:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ed0:	4b87      	ldr	r3, [pc, #540]	; (80140f0 <_strtod_l+0xc20>)
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d000      	beq.n	8013ed8 <_strtod_l+0xa08>
 8013ed6:	e0ba      	b.n	801404e <_strtod_l+0xb7e>
 8013ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013edc:	921a      	str	r2, [sp, #104]	; 0x68
 8013ede:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ee0:	4a84      	ldr	r2, [pc, #528]	; (80140f4 <_strtod_l+0xc24>)
 8013ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ee4:	4694      	mov	ip, r2
 8013ee6:	4463      	add	r3, ip
 8013ee8:	001f      	movs	r7, r3
 8013eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013eee:	0030      	movs	r0, r6
 8013ef0:	0039      	movs	r1, r7
 8013ef2:	920c      	str	r2, [sp, #48]	; 0x30
 8013ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8013ef6:	f003 f9ef 	bl	80172d8 <__ulp>
 8013efa:	0002      	movs	r2, r0
 8013efc:	000b      	movs	r3, r1
 8013efe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f02:	f7ed ff97 	bl	8001e34 <__aeabi_dmul>
 8013f06:	0032      	movs	r2, r6
 8013f08:	003b      	movs	r3, r7
 8013f0a:	f7ed f86d 	bl	8000fe8 <__aeabi_dadd>
 8013f0e:	4a77      	ldr	r2, [pc, #476]	; (80140ec <_strtod_l+0xc1c>)
 8013f10:	4b79      	ldr	r3, [pc, #484]	; (80140f8 <_strtod_l+0xc28>)
 8013f12:	0006      	movs	r6, r0
 8013f14:	400a      	ands	r2, r1
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d964      	bls.n	8013fe4 <_strtod_l+0xb14>
 8013f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f1c:	4a77      	ldr	r2, [pc, #476]	; (80140fc <_strtod_l+0xc2c>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d103      	bne.n	8013f2a <_strtod_l+0xa5a>
 8013f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f24:	3301      	adds	r3, #1
 8013f26:	d100      	bne.n	8013f2a <_strtod_l+0xa5a>
 8013f28:	e508      	b.n	801393c <_strtod_l+0x46c>
 8013f2a:	2601      	movs	r6, #1
 8013f2c:	4f73      	ldr	r7, [pc, #460]	; (80140fc <_strtod_l+0xc2c>)
 8013f2e:	4276      	negs	r6, r6
 8013f30:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f32:	9804      	ldr	r0, [sp, #16]
 8013f34:	f002 ff56 	bl	8016de4 <_Bfree>
 8013f38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f3a:	9804      	ldr	r0, [sp, #16]
 8013f3c:	f002 ff52 	bl	8016de4 <_Bfree>
 8013f40:	9905      	ldr	r1, [sp, #20]
 8013f42:	9804      	ldr	r0, [sp, #16]
 8013f44:	f002 ff4e 	bl	8016de4 <_Bfree>
 8013f48:	0021      	movs	r1, r4
 8013f4a:	9804      	ldr	r0, [sp, #16]
 8013f4c:	f002 ff4a 	bl	8016de4 <_Bfree>
 8013f50:	e5f4      	b.n	8013b3c <_strtod_l+0x66c>
 8013f52:	2e00      	cmp	r6, #0
 8013f54:	d11e      	bne.n	8013f94 <_strtod_l+0xac4>
 8013f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f58:	031b      	lsls	r3, r3, #12
 8013f5a:	d121      	bne.n	8013fa0 <_strtod_l+0xad0>
 8013f5c:	9808      	ldr	r0, [sp, #32]
 8013f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f60:	2200      	movs	r2, #0
 8013f62:	4b61      	ldr	r3, [pc, #388]	; (80140e8 <_strtod_l+0xc18>)
 8013f64:	f7ec fa80 	bl	8000468 <__aeabi_dcmplt>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d11f      	bne.n	8013fac <_strtod_l+0xadc>
 8013f6c:	9808      	ldr	r0, [sp, #32]
 8013f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f70:	2200      	movs	r2, #0
 8013f72:	4b63      	ldr	r3, [pc, #396]	; (8014100 <_strtod_l+0xc30>)
 8013f74:	f7ed ff5e 	bl	8001e34 <__aeabi_dmul>
 8013f78:	0005      	movs	r5, r0
 8013f7a:	9108      	str	r1, [sp, #32]
 8013f7c:	2280      	movs	r2, #128	; 0x80
 8013f7e:	0612      	lsls	r2, r2, #24
 8013f80:	4694      	mov	ip, r2
 8013f82:	9b08      	ldr	r3, [sp, #32]
 8013f84:	951e      	str	r5, [sp, #120]	; 0x78
 8013f86:	4463      	add	r3, ip
 8013f88:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f8e:	9210      	str	r2, [sp, #64]	; 0x40
 8013f90:	9311      	str	r3, [sp, #68]	; 0x44
 8013f92:	e798      	b.n	8013ec6 <_strtod_l+0x9f6>
 8013f94:	2e01      	cmp	r6, #1
 8013f96:	d103      	bne.n	8013fa0 <_strtod_l+0xad0>
 8013f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d100      	bne.n	8013fa0 <_strtod_l+0xad0>
 8013f9e:	e562      	b.n	8013a66 <_strtod_l+0x596>
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	4b58      	ldr	r3, [pc, #352]	; (8014104 <_strtod_l+0xc34>)
 8013fa4:	2500      	movs	r5, #0
 8013fa6:	9210      	str	r2, [sp, #64]	; 0x40
 8013fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8013faa:	e78a      	b.n	8013ec2 <_strtod_l+0x9f2>
 8013fac:	4b54      	ldr	r3, [pc, #336]	; (8014100 <_strtod_l+0xc30>)
 8013fae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013fb0:	9308      	str	r3, [sp, #32]
 8013fb2:	e7e3      	b.n	8013f7c <_strtod_l+0xaac>
 8013fb4:	4b52      	ldr	r3, [pc, #328]	; (8014100 <_strtod_l+0xc30>)
 8013fb6:	9808      	ldr	r0, [sp, #32]
 8013fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f7ed ff3a 	bl	8001e34 <__aeabi_dmul>
 8013fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fc2:	0005      	movs	r5, r0
 8013fc4:	9108      	str	r1, [sp, #32]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d107      	bne.n	8013fda <_strtod_l+0xb0a>
 8013fca:	2380      	movs	r3, #128	; 0x80
 8013fcc:	061b      	lsls	r3, r3, #24
 8013fce:	18cb      	adds	r3, r1, r3
 8013fd0:	9016      	str	r0, [sp, #88]	; 0x58
 8013fd2:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013fd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fd8:	e7d9      	b.n	8013f8e <_strtod_l+0xabe>
 8013fda:	0002      	movs	r2, r0
 8013fdc:	9b08      	ldr	r3, [sp, #32]
 8013fde:	9216      	str	r2, [sp, #88]	; 0x58
 8013fe0:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fe2:	e7f7      	b.n	8013fd4 <_strtod_l+0xb04>
 8013fe4:	23d4      	movs	r3, #212	; 0xd4
 8013fe6:	049b      	lsls	r3, r3, #18
 8013fe8:	18cf      	adds	r7, r1, r3
 8013fea:	9b06      	ldr	r3, [sp, #24]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d19f      	bne.n	8013f30 <_strtod_l+0xa60>
 8013ff0:	4b3e      	ldr	r3, [pc, #248]	; (80140ec <_strtod_l+0xc1c>)
 8013ff2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ff4:	970c      	str	r7, [sp, #48]	; 0x30
 8013ff6:	403b      	ands	r3, r7
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d199      	bne.n	8013f30 <_strtod_l+0xa60>
 8013ffc:	9908      	ldr	r1, [sp, #32]
 8013ffe:	0028      	movs	r0, r5
 8014000:	f7ee fcee 	bl	80029e0 <__aeabi_d2iz>
 8014004:	f7ee fd22 	bl	8002a4c <__aeabi_i2d>
 8014008:	000b      	movs	r3, r1
 801400a:	0002      	movs	r2, r0
 801400c:	9908      	ldr	r1, [sp, #32]
 801400e:	0028      	movs	r0, r5
 8014010:	f7ee f982 	bl	8002318 <__aeabi_dsub>
 8014014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014016:	9008      	str	r0, [sp, #32]
 8014018:	9109      	str	r1, [sp, #36]	; 0x24
 801401a:	2b00      	cmp	r3, #0
 801401c:	d104      	bne.n	8014028 <_strtod_l+0xb58>
 801401e:	2e00      	cmp	r6, #0
 8014020:	d102      	bne.n	8014028 <_strtod_l+0xb58>
 8014022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014024:	031b      	lsls	r3, r3, #12
 8014026:	d058      	beq.n	80140da <_strtod_l+0xc0a>
 8014028:	9808      	ldr	r0, [sp, #32]
 801402a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801402c:	4a36      	ldr	r2, [pc, #216]	; (8014108 <_strtod_l+0xc38>)
 801402e:	4b37      	ldr	r3, [pc, #220]	; (801410c <_strtod_l+0xc3c>)
 8014030:	f7ec fa1a 	bl	8000468 <__aeabi_dcmplt>
 8014034:	2800      	cmp	r0, #0
 8014036:	d000      	beq.n	801403a <_strtod_l+0xb6a>
 8014038:	e489      	b.n	801394e <_strtod_l+0x47e>
 801403a:	9808      	ldr	r0, [sp, #32]
 801403c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801403e:	4a34      	ldr	r2, [pc, #208]	; (8014110 <_strtod_l+0xc40>)
 8014040:	4b2f      	ldr	r3, [pc, #188]	; (8014100 <_strtod_l+0xc30>)
 8014042:	f7ec fa25 	bl	8000490 <__aeabi_dcmpgt>
 8014046:	2800      	cmp	r0, #0
 8014048:	d100      	bne.n	801404c <_strtod_l+0xb7c>
 801404a:	e771      	b.n	8013f30 <_strtod_l+0xa60>
 801404c:	e47f      	b.n	801394e <_strtod_l+0x47e>
 801404e:	9b06      	ldr	r3, [sp, #24]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d02a      	beq.n	80140aa <_strtod_l+0xbda>
 8014054:	23d4      	movs	r3, #212	; 0xd4
 8014056:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014058:	04db      	lsls	r3, r3, #19
 801405a:	429a      	cmp	r2, r3
 801405c:	d825      	bhi.n	80140aa <_strtod_l+0xbda>
 801405e:	4a2d      	ldr	r2, [pc, #180]	; (8014114 <_strtod_l+0xc44>)
 8014060:	4b2d      	ldr	r3, [pc, #180]	; (8014118 <_strtod_l+0xc48>)
 8014062:	0028      	movs	r0, r5
 8014064:	9908      	ldr	r1, [sp, #32]
 8014066:	f7ec fa09 	bl	800047c <__aeabi_dcmple>
 801406a:	2800      	cmp	r0, #0
 801406c:	d016      	beq.n	801409c <_strtod_l+0xbcc>
 801406e:	0028      	movs	r0, r5
 8014070:	9908      	ldr	r1, [sp, #32]
 8014072:	f7ec fabd 	bl	80005f0 <__aeabi_d2uiz>
 8014076:	2800      	cmp	r0, #0
 8014078:	d100      	bne.n	801407c <_strtod_l+0xbac>
 801407a:	3001      	adds	r0, #1
 801407c:	f7ee fd20 	bl	8002ac0 <__aeabi_ui2d>
 8014080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014082:	0005      	movs	r5, r0
 8014084:	9108      	str	r1, [sp, #32]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d122      	bne.n	80140d0 <_strtod_l+0xc00>
 801408a:	2380      	movs	r3, #128	; 0x80
 801408c:	061b      	lsls	r3, r3, #24
 801408e:	18cb      	adds	r3, r1, r3
 8014090:	9018      	str	r0, [sp, #96]	; 0x60
 8014092:	9319      	str	r3, [sp, #100]	; 0x64
 8014094:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014096:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014098:	9210      	str	r2, [sp, #64]	; 0x40
 801409a:	9311      	str	r3, [sp, #68]	; 0x44
 801409c:	22d6      	movs	r2, #214	; 0xd6
 801409e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140a0:	04d2      	lsls	r2, r2, #19
 80140a2:	189b      	adds	r3, r3, r2
 80140a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80140a6:	1a9b      	subs	r3, r3, r2
 80140a8:	9311      	str	r3, [sp, #68]	; 0x44
 80140aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80140ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80140ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80140b0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80140b2:	f003 f911 	bl	80172d8 <__ulp>
 80140b6:	0002      	movs	r2, r0
 80140b8:	000b      	movs	r3, r1
 80140ba:	0030      	movs	r0, r6
 80140bc:	0039      	movs	r1, r7
 80140be:	f7ed feb9 	bl	8001e34 <__aeabi_dmul>
 80140c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140c6:	f7ec ff8f 	bl	8000fe8 <__aeabi_dadd>
 80140ca:	0006      	movs	r6, r0
 80140cc:	000f      	movs	r7, r1
 80140ce:	e78c      	b.n	8013fea <_strtod_l+0xb1a>
 80140d0:	0002      	movs	r2, r0
 80140d2:	9b08      	ldr	r3, [sp, #32]
 80140d4:	9218      	str	r2, [sp, #96]	; 0x60
 80140d6:	9319      	str	r3, [sp, #100]	; 0x64
 80140d8:	e7dc      	b.n	8014094 <_strtod_l+0xbc4>
 80140da:	4a0b      	ldr	r2, [pc, #44]	; (8014108 <_strtod_l+0xc38>)
 80140dc:	4b0f      	ldr	r3, [pc, #60]	; (801411c <_strtod_l+0xc4c>)
 80140de:	9808      	ldr	r0, [sp, #32]
 80140e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140e2:	f7ec f9c1 	bl	8000468 <__aeabi_dcmplt>
 80140e6:	e7ae      	b.n	8014046 <_strtod_l+0xb76>
 80140e8:	3ff00000 	.word	0x3ff00000
 80140ec:	7ff00000 	.word	0x7ff00000
 80140f0:	7fe00000 	.word	0x7fe00000
 80140f4:	fcb00000 	.word	0xfcb00000
 80140f8:	7c9fffff 	.word	0x7c9fffff
 80140fc:	7fefffff 	.word	0x7fefffff
 8014100:	3fe00000 	.word	0x3fe00000
 8014104:	bff00000 	.word	0xbff00000
 8014108:	94a03595 	.word	0x94a03595
 801410c:	3fdfffff 	.word	0x3fdfffff
 8014110:	35afe535 	.word	0x35afe535
 8014114:	ffc00000 	.word	0xffc00000
 8014118:	41dfffff 	.word	0x41dfffff
 801411c:	3fcfffff 	.word	0x3fcfffff

08014120 <strtod>:
 8014120:	4b06      	ldr	r3, [pc, #24]	; (801413c <strtod+0x1c>)
 8014122:	b510      	push	{r4, lr}
 8014124:	0004      	movs	r4, r0
 8014126:	6818      	ldr	r0, [r3, #0]
 8014128:	000a      	movs	r2, r1
 801412a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801412c:	2b00      	cmp	r3, #0
 801412e:	d100      	bne.n	8014132 <strtod+0x12>
 8014130:	4b03      	ldr	r3, [pc, #12]	; (8014140 <strtod+0x20>)
 8014132:	0021      	movs	r1, r4
 8014134:	f7ff f9cc 	bl	80134d0 <_strtod_l>
 8014138:	bd10      	pop	{r4, pc}
 801413a:	46c0      	nop			; (mov r8, r8)
 801413c:	200000c8 	.word	0x200000c8
 8014140:	200004f8 	.word	0x200004f8

08014144 <strtok>:
 8014144:	4b03      	ldr	r3, [pc, #12]	; (8014154 <strtok+0x10>)
 8014146:	b510      	push	{r4, lr}
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	2301      	movs	r3, #1
 801414c:	325c      	adds	r2, #92	; 0x5c
 801414e:	f000 f803 	bl	8014158 <__strtok_r>
 8014152:	bd10      	pop	{r4, pc}
 8014154:	200000c8 	.word	0x200000c8

08014158 <__strtok_r>:
 8014158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801415a:	2800      	cmp	r0, #0
 801415c:	d104      	bne.n	8014168 <__strtok_r+0x10>
 801415e:	6810      	ldr	r0, [r2, #0]
 8014160:	2800      	cmp	r0, #0
 8014162:	d101      	bne.n	8014168 <__strtok_r+0x10>
 8014164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014166:	0020      	movs	r0, r4
 8014168:	000e      	movs	r6, r1
 801416a:	7805      	ldrb	r5, [r0, #0]
 801416c:	1c44      	adds	r4, r0, #1
 801416e:	7837      	ldrb	r7, [r6, #0]
 8014170:	2f00      	cmp	r7, #0
 8014172:	d104      	bne.n	801417e <__strtok_r+0x26>
 8014174:	2d00      	cmp	r5, #0
 8014176:	d110      	bne.n	801419a <__strtok_r+0x42>
 8014178:	6015      	str	r5, [r2, #0]
 801417a:	0028      	movs	r0, r5
 801417c:	e7f2      	b.n	8014164 <__strtok_r+0xc>
 801417e:	3601      	adds	r6, #1
 8014180:	42bd      	cmp	r5, r7
 8014182:	d1f4      	bne.n	801416e <__strtok_r+0x16>
 8014184:	2b00      	cmp	r3, #0
 8014186:	d1ee      	bne.n	8014166 <__strtok_r+0xe>
 8014188:	6014      	str	r4, [r2, #0]
 801418a:	7003      	strb	r3, [r0, #0]
 801418c:	e7ea      	b.n	8014164 <__strtok_r+0xc>
 801418e:	0033      	movs	r3, r6
 8014190:	e00d      	b.n	80141ae <__strtok_r+0x56>
 8014192:	3501      	adds	r5, #1
 8014194:	2f00      	cmp	r7, #0
 8014196:	d103      	bne.n	80141a0 <__strtok_r+0x48>
 8014198:	001c      	movs	r4, r3
 801419a:	000d      	movs	r5, r1
 801419c:	7826      	ldrb	r6, [r4, #0]
 801419e:	1c63      	adds	r3, r4, #1
 80141a0:	782f      	ldrb	r7, [r5, #0]
 80141a2:	42be      	cmp	r6, r7
 80141a4:	d1f5      	bne.n	8014192 <__strtok_r+0x3a>
 80141a6:	2e00      	cmp	r6, #0
 80141a8:	d0f1      	beq.n	801418e <__strtok_r+0x36>
 80141aa:	2100      	movs	r1, #0
 80141ac:	7021      	strb	r1, [r4, #0]
 80141ae:	6013      	str	r3, [r2, #0]
 80141b0:	e7d8      	b.n	8014164 <__strtok_r+0xc>
	...

080141b4 <_strtol_l.isra.0>:
 80141b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141b6:	001f      	movs	r7, r3
 80141b8:	000e      	movs	r6, r1
 80141ba:	b087      	sub	sp, #28
 80141bc:	9005      	str	r0, [sp, #20]
 80141be:	9101      	str	r1, [sp, #4]
 80141c0:	9202      	str	r2, [sp, #8]
 80141c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80141c4:	7834      	ldrb	r4, [r6, #0]
 80141c6:	f7fe fc9f 	bl	8012b08 <__locale_ctype_ptr_l>
 80141ca:	2208      	movs	r2, #8
 80141cc:	1900      	adds	r0, r0, r4
 80141ce:	7843      	ldrb	r3, [r0, #1]
 80141d0:	1c75      	adds	r5, r6, #1
 80141d2:	4013      	ands	r3, r2
 80141d4:	d136      	bne.n	8014244 <_strtol_l.isra.0+0x90>
 80141d6:	2c2d      	cmp	r4, #45	; 0x2d
 80141d8:	d136      	bne.n	8014248 <_strtol_l.isra.0+0x94>
 80141da:	1cb5      	adds	r5, r6, #2
 80141dc:	7874      	ldrb	r4, [r6, #1]
 80141de:	2601      	movs	r6, #1
 80141e0:	2f00      	cmp	r7, #0
 80141e2:	d062      	beq.n	80142aa <_strtol_l.isra.0+0xf6>
 80141e4:	2f10      	cmp	r7, #16
 80141e6:	d109      	bne.n	80141fc <_strtol_l.isra.0+0x48>
 80141e8:	2c30      	cmp	r4, #48	; 0x30
 80141ea:	d107      	bne.n	80141fc <_strtol_l.isra.0+0x48>
 80141ec:	2220      	movs	r2, #32
 80141ee:	782b      	ldrb	r3, [r5, #0]
 80141f0:	4393      	bics	r3, r2
 80141f2:	2b58      	cmp	r3, #88	; 0x58
 80141f4:	d154      	bne.n	80142a0 <_strtol_l.isra.0+0xec>
 80141f6:	2710      	movs	r7, #16
 80141f8:	786c      	ldrb	r4, [r5, #1]
 80141fa:	3502      	adds	r5, #2
 80141fc:	4b2d      	ldr	r3, [pc, #180]	; (80142b4 <_strtol_l.isra.0+0x100>)
 80141fe:	0039      	movs	r1, r7
 8014200:	18f3      	adds	r3, r6, r3
 8014202:	0018      	movs	r0, r3
 8014204:	9303      	str	r3, [sp, #12]
 8014206:	f7ec f829 	bl	800025c <__aeabi_uidivmod>
 801420a:	9104      	str	r1, [sp, #16]
 801420c:	2101      	movs	r1, #1
 801420e:	2300      	movs	r3, #0
 8014210:	4249      	negs	r1, r1
 8014212:	0002      	movs	r2, r0
 8014214:	468c      	mov	ip, r1
 8014216:	0018      	movs	r0, r3
 8014218:	0021      	movs	r1, r4
 801421a:	3930      	subs	r1, #48	; 0x30
 801421c:	2909      	cmp	r1, #9
 801421e:	d81a      	bhi.n	8014256 <_strtol_l.isra.0+0xa2>
 8014220:	000c      	movs	r4, r1
 8014222:	42a7      	cmp	r7, r4
 8014224:	dd23      	ble.n	801426e <_strtol_l.isra.0+0xba>
 8014226:	1c59      	adds	r1, r3, #1
 8014228:	d009      	beq.n	801423e <_strtol_l.isra.0+0x8a>
 801422a:	4663      	mov	r3, ip
 801422c:	4282      	cmp	r2, r0
 801422e:	d306      	bcc.n	801423e <_strtol_l.isra.0+0x8a>
 8014230:	d102      	bne.n	8014238 <_strtol_l.isra.0+0x84>
 8014232:	9904      	ldr	r1, [sp, #16]
 8014234:	42a1      	cmp	r1, r4
 8014236:	db02      	blt.n	801423e <_strtol_l.isra.0+0x8a>
 8014238:	2301      	movs	r3, #1
 801423a:	4378      	muls	r0, r7
 801423c:	1820      	adds	r0, r4, r0
 801423e:	782c      	ldrb	r4, [r5, #0]
 8014240:	3501      	adds	r5, #1
 8014242:	e7e9      	b.n	8014218 <_strtol_l.isra.0+0x64>
 8014244:	002e      	movs	r6, r5
 8014246:	e7bc      	b.n	80141c2 <_strtol_l.isra.0+0xe>
 8014248:	2c2b      	cmp	r4, #43	; 0x2b
 801424a:	d001      	beq.n	8014250 <_strtol_l.isra.0+0x9c>
 801424c:	001e      	movs	r6, r3
 801424e:	e7c7      	b.n	80141e0 <_strtol_l.isra.0+0x2c>
 8014250:	1cb5      	adds	r5, r6, #2
 8014252:	7874      	ldrb	r4, [r6, #1]
 8014254:	e7fa      	b.n	801424c <_strtol_l.isra.0+0x98>
 8014256:	0021      	movs	r1, r4
 8014258:	3941      	subs	r1, #65	; 0x41
 801425a:	2919      	cmp	r1, #25
 801425c:	d801      	bhi.n	8014262 <_strtol_l.isra.0+0xae>
 801425e:	3c37      	subs	r4, #55	; 0x37
 8014260:	e7df      	b.n	8014222 <_strtol_l.isra.0+0x6e>
 8014262:	0021      	movs	r1, r4
 8014264:	3961      	subs	r1, #97	; 0x61
 8014266:	2919      	cmp	r1, #25
 8014268:	d801      	bhi.n	801426e <_strtol_l.isra.0+0xba>
 801426a:	3c57      	subs	r4, #87	; 0x57
 801426c:	e7d9      	b.n	8014222 <_strtol_l.isra.0+0x6e>
 801426e:	1c5a      	adds	r2, r3, #1
 8014270:	d108      	bne.n	8014284 <_strtol_l.isra.0+0xd0>
 8014272:	9a05      	ldr	r2, [sp, #20]
 8014274:	3323      	adds	r3, #35	; 0x23
 8014276:	6013      	str	r3, [r2, #0]
 8014278:	9b02      	ldr	r3, [sp, #8]
 801427a:	9803      	ldr	r0, [sp, #12]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d109      	bne.n	8014294 <_strtol_l.isra.0+0xe0>
 8014280:	b007      	add	sp, #28
 8014282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014284:	2e00      	cmp	r6, #0
 8014286:	d000      	beq.n	801428a <_strtol_l.isra.0+0xd6>
 8014288:	4240      	negs	r0, r0
 801428a:	9a02      	ldr	r2, [sp, #8]
 801428c:	2a00      	cmp	r2, #0
 801428e:	d0f7      	beq.n	8014280 <_strtol_l.isra.0+0xcc>
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <_strtol_l.isra.0+0xe4>
 8014294:	1e6b      	subs	r3, r5, #1
 8014296:	9301      	str	r3, [sp, #4]
 8014298:	9b02      	ldr	r3, [sp, #8]
 801429a:	9a01      	ldr	r2, [sp, #4]
 801429c:	601a      	str	r2, [r3, #0]
 801429e:	e7ef      	b.n	8014280 <_strtol_l.isra.0+0xcc>
 80142a0:	2430      	movs	r4, #48	; 0x30
 80142a2:	2f00      	cmp	r7, #0
 80142a4:	d1aa      	bne.n	80141fc <_strtol_l.isra.0+0x48>
 80142a6:	2708      	movs	r7, #8
 80142a8:	e7a8      	b.n	80141fc <_strtol_l.isra.0+0x48>
 80142aa:	2c30      	cmp	r4, #48	; 0x30
 80142ac:	d09e      	beq.n	80141ec <_strtol_l.isra.0+0x38>
 80142ae:	270a      	movs	r7, #10
 80142b0:	e7a4      	b.n	80141fc <_strtol_l.isra.0+0x48>
 80142b2:	46c0      	nop			; (mov r8, r8)
 80142b4:	7fffffff 	.word	0x7fffffff

080142b8 <strtol>:
 80142b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142ba:	0013      	movs	r3, r2
 80142bc:	4a06      	ldr	r2, [pc, #24]	; (80142d8 <strtol+0x20>)
 80142be:	0005      	movs	r5, r0
 80142c0:	6810      	ldr	r0, [r2, #0]
 80142c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80142c4:	2c00      	cmp	r4, #0
 80142c6:	d100      	bne.n	80142ca <strtol+0x12>
 80142c8:	4c04      	ldr	r4, [pc, #16]	; (80142dc <strtol+0x24>)
 80142ca:	000a      	movs	r2, r1
 80142cc:	9400      	str	r4, [sp, #0]
 80142ce:	0029      	movs	r1, r5
 80142d0:	f7ff ff70 	bl	80141b4 <_strtol_l.isra.0>
 80142d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80142d6:	46c0      	nop			; (mov r8, r8)
 80142d8:	200000c8 	.word	0x200000c8
 80142dc:	200004f8 	.word	0x200004f8

080142e0 <_svfprintf_r>:
 80142e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142e2:	b0d9      	sub	sp, #356	; 0x164
 80142e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80142e6:	9209      	str	r2, [sp, #36]	; 0x24
 80142e8:	001c      	movs	r4, r3
 80142ea:	900a      	str	r0, [sp, #40]	; 0x28
 80142ec:	f002 fd26 	bl	8016d3c <_localeconv_r>
 80142f0:	6803      	ldr	r3, [r0, #0]
 80142f2:	0018      	movs	r0, r3
 80142f4:	931c      	str	r3, [sp, #112]	; 0x70
 80142f6:	f7eb ff0f 	bl	8000118 <strlen>
 80142fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142fc:	9014      	str	r0, [sp, #80]	; 0x50
 80142fe:	899b      	ldrh	r3, [r3, #12]
 8014300:	061b      	lsls	r3, r3, #24
 8014302:	d518      	bpl.n	8014336 <_svfprintf_r+0x56>
 8014304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014306:	691b      	ldr	r3, [r3, #16]
 8014308:	9308      	str	r3, [sp, #32]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d113      	bne.n	8014336 <_svfprintf_r+0x56>
 801430e:	2140      	movs	r1, #64	; 0x40
 8014310:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014312:	f7fe fc1f 	bl	8012b54 <_malloc_r>
 8014316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014318:	6018      	str	r0, [r3, #0]
 801431a:	6118      	str	r0, [r3, #16]
 801431c:	2800      	cmp	r0, #0
 801431e:	d107      	bne.n	8014330 <_svfprintf_r+0x50>
 8014320:	230c      	movs	r3, #12
 8014322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014324:	6013      	str	r3, [r2, #0]
 8014326:	3b0d      	subs	r3, #13
 8014328:	9315      	str	r3, [sp, #84]	; 0x54
 801432a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801432c:	b059      	add	sp, #356	; 0x164
 801432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014330:	2340      	movs	r3, #64	; 0x40
 8014332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014334:	6153      	str	r3, [r2, #20]
 8014336:	2600      	movs	r6, #0
 8014338:	af2f      	add	r7, sp, #188	; 0xbc
 801433a:	972c      	str	r7, [sp, #176]	; 0xb0
 801433c:	962e      	str	r6, [sp, #184]	; 0xb8
 801433e:	962d      	str	r6, [sp, #180]	; 0xb4
 8014340:	960d      	str	r6, [sp, #52]	; 0x34
 8014342:	961a      	str	r6, [sp, #104]	; 0x68
 8014344:	9619      	str	r6, [sp, #100]	; 0x64
 8014346:	961e      	str	r6, [sp, #120]	; 0x78
 8014348:	961d      	str	r6, [sp, #116]	; 0x74
 801434a:	9613      	str	r6, [sp, #76]	; 0x4c
 801434c:	961b      	str	r6, [sp, #108]	; 0x6c
 801434e:	961f      	str	r6, [sp, #124]	; 0x7c
 8014350:	9615      	str	r6, [sp, #84]	; 0x54
 8014352:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014354:	782b      	ldrb	r3, [r5, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d002      	beq.n	8014360 <_svfprintf_r+0x80>
 801435a:	2b25      	cmp	r3, #37	; 0x25
 801435c:	d000      	beq.n	8014360 <_svfprintf_r+0x80>
 801435e:	e095      	b.n	801448c <_svfprintf_r+0x1ac>
 8014360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014362:	1aee      	subs	r6, r5, r3
 8014364:	d017      	beq.n	8014396 <_svfprintf_r+0xb6>
 8014366:	603b      	str	r3, [r7, #0]
 8014368:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801436a:	607e      	str	r6, [r7, #4]
 801436c:	199b      	adds	r3, r3, r6
 801436e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014370:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014372:	3708      	adds	r7, #8
 8014374:	9308      	str	r3, [sp, #32]
 8014376:	3301      	adds	r3, #1
 8014378:	932d      	str	r3, [sp, #180]	; 0xb4
 801437a:	2b07      	cmp	r3, #7
 801437c:	dd08      	ble.n	8014390 <_svfprintf_r+0xb0>
 801437e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014382:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014384:	f003 f900 	bl	8017588 <__ssprint_r>
 8014388:	2800      	cmp	r0, #0
 801438a:	d000      	beq.n	801438e <_svfprintf_r+0xae>
 801438c:	e2d9      	b.n	8014942 <_svfprintf_r+0x662>
 801438e:	af2f      	add	r7, sp, #188	; 0xbc
 8014390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014392:	199b      	adds	r3, r3, r6
 8014394:	9315      	str	r3, [sp, #84]	; 0x54
 8014396:	782b      	ldrb	r3, [r5, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d101      	bne.n	80143a0 <_svfprintf_r+0xc0>
 801439c:	f001 f9e5 	bl	801576a <_svfprintf_r+0x148a>
 80143a0:	1c6b      	adds	r3, r5, #1
 80143a2:	221b      	movs	r2, #27
 80143a4:	9311      	str	r3, [sp, #68]	; 0x44
 80143a6:	2300      	movs	r3, #0
 80143a8:	a91e      	add	r1, sp, #120	; 0x78
 80143aa:	1852      	adds	r2, r2, r1
 80143ac:	7013      	strb	r3, [r2, #0]
 80143ae:	2201      	movs	r2, #1
 80143b0:	001e      	movs	r6, r3
 80143b2:	2520      	movs	r5, #32
 80143b4:	4252      	negs	r2, r2
 80143b6:	9208      	str	r2, [sp, #32]
 80143b8:	9316      	str	r3, [sp, #88]	; 0x58
 80143ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	930e      	str	r3, [sp, #56]	; 0x38
 80143c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143c2:	3301      	adds	r3, #1
 80143c4:	9311      	str	r3, [sp, #68]	; 0x44
 80143c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80143c8:	3820      	subs	r0, #32
 80143ca:	285a      	cmp	r0, #90	; 0x5a
 80143cc:	d901      	bls.n	80143d2 <_svfprintf_r+0xf2>
 80143ce:	f000 fe3d 	bl	801504c <_svfprintf_r+0xd6c>
 80143d2:	f7eb feb3 	bl	800013c <__gnu_thumb1_case_shi>
 80143d6:	009e      	.short	0x009e
 80143d8:	063b063b 	.word	0x063b063b
 80143dc:	063b00a7 	.word	0x063b00a7
 80143e0:	063b063b 	.word	0x063b063b
 80143e4:	063b0080 	.word	0x063b0080
 80143e8:	00a9063b 	.word	0x00a9063b
 80143ec:	063b00b3 	.word	0x063b00b3
 80143f0:	00b900b1 	.word	0x00b900b1
 80143f4:	00dd063b 	.word	0x00dd063b
 80143f8:	00df00df 	.word	0x00df00df
 80143fc:	00df00df 	.word	0x00df00df
 8014400:	00df00df 	.word	0x00df00df
 8014404:	00df00df 	.word	0x00df00df
 8014408:	063b00df 	.word	0x063b00df
 801440c:	063b063b 	.word	0x063b063b
 8014410:	063b063b 	.word	0x063b063b
 8014414:	063b063b 	.word	0x063b063b
 8014418:	063b0240 	.word	0x063b0240
 801441c:	01fd010a 	.word	0x01fd010a
 8014420:	02400240 	.word	0x02400240
 8014424:	063b0240 	.word	0x063b0240
 8014428:	063b063b 	.word	0x063b063b
 801442c:	00f1063b 	.word	0x00f1063b
 8014430:	063b063b 	.word	0x063b063b
 8014434:	063b04e2 	.word	0x063b04e2
 8014438:	063b063b 	.word	0x063b063b
 801443c:	063b0537 	.word	0x063b0537
 8014440:	063b0557 	.word	0x063b0557
 8014444:	005d063b 	.word	0x005d063b
 8014448:	063b063b 	.word	0x063b063b
 801444c:	063b063b 	.word	0x063b063b
 8014450:	063b063b 	.word	0x063b063b
 8014454:	063b063b 	.word	0x063b063b
 8014458:	063b0240 	.word	0x063b0240
 801445c:	01ff010a 	.word	0x01ff010a
 8014460:	02400240 	.word	0x02400240
 8014464:	00f30240 	.word	0x00f30240
 8014468:	010601ff 	.word	0x010601ff
 801446c:	00ff063b 	.word	0x00ff063b
 8014470:	04c5063b 	.word	0x04c5063b
 8014474:	052704e4 	.word	0x052704e4
 8014478:	063b0106 	.word	0x063b0106
 801447c:	fff20537 	.word	0xfff20537
 8014480:	063b0559 	.word	0x063b0559
 8014484:	0582063b 	.word	0x0582063b
 8014488:	fff2063b 	.word	0xfff2063b
 801448c:	3501      	adds	r5, #1
 801448e:	e761      	b.n	8014354 <_svfprintf_r+0x74>
 8014490:	4bcb      	ldr	r3, [pc, #812]	; (80147c0 <_svfprintf_r+0x4e0>)
 8014492:	2220      	movs	r2, #32
 8014494:	931e      	str	r3, [sp, #120]	; 0x78
 8014496:	4032      	ands	r2, r6
 8014498:	d101      	bne.n	801449e <_svfprintf_r+0x1be>
 801449a:	f000 fd21 	bl	8014ee0 <_svfprintf_r+0xc00>
 801449e:	2307      	movs	r3, #7
 80144a0:	3407      	adds	r4, #7
 80144a2:	439c      	bics	r4, r3
 80144a4:	0023      	movs	r3, r4
 80144a6:	3308      	adds	r3, #8
 80144a8:	9312      	str	r3, [sp, #72]	; 0x48
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	6864      	ldr	r4, [r4, #4]
 80144ae:	9306      	str	r3, [sp, #24]
 80144b0:	9407      	str	r4, [sp, #28]
 80144b2:	07f3      	lsls	r3, r6, #31
 80144b4:	d50a      	bpl.n	80144cc <_svfprintf_r+0x1ec>
 80144b6:	9b06      	ldr	r3, [sp, #24]
 80144b8:	9a07      	ldr	r2, [sp, #28]
 80144ba:	4313      	orrs	r3, r2
 80144bc:	d006      	beq.n	80144cc <_svfprintf_r+0x1ec>
 80144be:	2230      	movs	r2, #48	; 0x30
 80144c0:	ab25      	add	r3, sp, #148	; 0x94
 80144c2:	701a      	strb	r2, [r3, #0]
 80144c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80144c6:	705a      	strb	r2, [r3, #1]
 80144c8:	2302      	movs	r3, #2
 80144ca:	431e      	orrs	r6, r3
 80144cc:	4bbd      	ldr	r3, [pc, #756]	; (80147c4 <_svfprintf_r+0x4e4>)
 80144ce:	401e      	ands	r6, r3
 80144d0:	2302      	movs	r3, #2
 80144d2:	f000 fc74 	bl	8014dbe <_svfprintf_r+0xade>
 80144d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144d8:	f002 fc30 	bl	8016d3c <_localeconv_r>
 80144dc:	6843      	ldr	r3, [r0, #4]
 80144de:	0018      	movs	r0, r3
 80144e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80144e2:	f7eb fe19 	bl	8000118 <strlen>
 80144e6:	901b      	str	r0, [sp, #108]	; 0x6c
 80144e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144ea:	f002 fc27 	bl	8016d3c <_localeconv_r>
 80144ee:	6883      	ldr	r3, [r0, #8]
 80144f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80144f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d100      	bne.n	80144fa <_svfprintf_r+0x21a>
 80144f8:	e75f      	b.n	80143ba <_svfprintf_r+0xda>
 80144fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d100      	bne.n	8014502 <_svfprintf_r+0x222>
 8014500:	e75b      	b.n	80143ba <_svfprintf_r+0xda>
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d100      	bne.n	801450a <_svfprintf_r+0x22a>
 8014508:	e757      	b.n	80143ba <_svfprintf_r+0xda>
 801450a:	2380      	movs	r3, #128	; 0x80
 801450c:	00db      	lsls	r3, r3, #3
 801450e:	431e      	orrs	r6, r3
 8014510:	e753      	b.n	80143ba <_svfprintf_r+0xda>
 8014512:	231b      	movs	r3, #27
 8014514:	aa1e      	add	r2, sp, #120	; 0x78
 8014516:	189b      	adds	r3, r3, r2
 8014518:	781a      	ldrb	r2, [r3, #0]
 801451a:	2a00      	cmp	r2, #0
 801451c:	d000      	beq.n	8014520 <_svfprintf_r+0x240>
 801451e:	e74c      	b.n	80143ba <_svfprintf_r+0xda>
 8014520:	701d      	strb	r5, [r3, #0]
 8014522:	e74a      	b.n	80143ba <_svfprintf_r+0xda>
 8014524:	2301      	movs	r3, #1
 8014526:	e7f2      	b.n	801450e <_svfprintf_r+0x22e>
 8014528:	6823      	ldr	r3, [r4, #0]
 801452a:	3404      	adds	r4, #4
 801452c:	9316      	str	r3, [sp, #88]	; 0x58
 801452e:	2b00      	cmp	r3, #0
 8014530:	db00      	blt.n	8014534 <_svfprintf_r+0x254>
 8014532:	e742      	b.n	80143ba <_svfprintf_r+0xda>
 8014534:	425b      	negs	r3, r3
 8014536:	9316      	str	r3, [sp, #88]	; 0x58
 8014538:	2304      	movs	r3, #4
 801453a:	e7e8      	b.n	801450e <_svfprintf_r+0x22e>
 801453c:	231b      	movs	r3, #27
 801453e:	aa1e      	add	r2, sp, #120	; 0x78
 8014540:	189b      	adds	r3, r3, r2
 8014542:	222b      	movs	r2, #43	; 0x2b
 8014544:	701a      	strb	r2, [r3, #0]
 8014546:	e738      	b.n	80143ba <_svfprintf_r+0xda>
 8014548:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801454a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801454c:	7812      	ldrb	r2, [r2, #0]
 801454e:	3301      	adds	r3, #1
 8014550:	920e      	str	r2, [sp, #56]	; 0x38
 8014552:	2a2a      	cmp	r2, #42	; 0x2a
 8014554:	d008      	beq.n	8014568 <_svfprintf_r+0x288>
 8014556:	2200      	movs	r2, #0
 8014558:	9208      	str	r2, [sp, #32]
 801455a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801455c:	001a      	movs	r2, r3
 801455e:	3930      	subs	r1, #48	; 0x30
 8014560:	2909      	cmp	r1, #9
 8014562:	d90c      	bls.n	801457e <_svfprintf_r+0x29e>
 8014564:	9211      	str	r2, [sp, #68]	; 0x44
 8014566:	e72e      	b.n	80143c6 <_svfprintf_r+0xe6>
 8014568:	6821      	ldr	r1, [r4, #0]
 801456a:	1d22      	adds	r2, r4, #4
 801456c:	9108      	str	r1, [sp, #32]
 801456e:	2900      	cmp	r1, #0
 8014570:	da02      	bge.n	8014578 <_svfprintf_r+0x298>
 8014572:	2101      	movs	r1, #1
 8014574:	4249      	negs	r1, r1
 8014576:	9108      	str	r1, [sp, #32]
 8014578:	0014      	movs	r4, r2
 801457a:	9311      	str	r3, [sp, #68]	; 0x44
 801457c:	e71d      	b.n	80143ba <_svfprintf_r+0xda>
 801457e:	200a      	movs	r0, #10
 8014580:	9a08      	ldr	r2, [sp, #32]
 8014582:	4342      	muls	r2, r0
 8014584:	1852      	adds	r2, r2, r1
 8014586:	9208      	str	r2, [sp, #32]
 8014588:	781a      	ldrb	r2, [r3, #0]
 801458a:	3301      	adds	r3, #1
 801458c:	920e      	str	r2, [sp, #56]	; 0x38
 801458e:	e7e4      	b.n	801455a <_svfprintf_r+0x27a>
 8014590:	2380      	movs	r3, #128	; 0x80
 8014592:	e7bc      	b.n	801450e <_svfprintf_r+0x22e>
 8014594:	2300      	movs	r3, #0
 8014596:	9316      	str	r3, [sp, #88]	; 0x58
 8014598:	220a      	movs	r2, #10
 801459a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801459c:	4353      	muls	r3, r2
 801459e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145a0:	3a30      	subs	r2, #48	; 0x30
 80145a2:	18d3      	adds	r3, r2, r3
 80145a4:	9316      	str	r3, [sp, #88]	; 0x58
 80145a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145a8:	1c5a      	adds	r2, r3, #1
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	9211      	str	r2, [sp, #68]	; 0x44
 80145ae:	930e      	str	r3, [sp, #56]	; 0x38
 80145b0:	3b30      	subs	r3, #48	; 0x30
 80145b2:	2b09      	cmp	r3, #9
 80145b4:	d9f0      	bls.n	8014598 <_svfprintf_r+0x2b8>
 80145b6:	e7d5      	b.n	8014564 <_svfprintf_r+0x284>
 80145b8:	2308      	movs	r3, #8
 80145ba:	e7a8      	b.n	801450e <_svfprintf_r+0x22e>
 80145bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	2b68      	cmp	r3, #104	; 0x68
 80145c2:	d105      	bne.n	80145d0 <_svfprintf_r+0x2f0>
 80145c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145c6:	3301      	adds	r3, #1
 80145c8:	9311      	str	r3, [sp, #68]	; 0x44
 80145ca:	2380      	movs	r3, #128	; 0x80
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	e79e      	b.n	801450e <_svfprintf_r+0x22e>
 80145d0:	2340      	movs	r3, #64	; 0x40
 80145d2:	e79c      	b.n	801450e <_svfprintf_r+0x22e>
 80145d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	2b6c      	cmp	r3, #108	; 0x6c
 80145da:	d104      	bne.n	80145e6 <_svfprintf_r+0x306>
 80145dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145de:	3301      	adds	r3, #1
 80145e0:	9311      	str	r3, [sp, #68]	; 0x44
 80145e2:	432e      	orrs	r6, r5
 80145e4:	e6e9      	b.n	80143ba <_svfprintf_r+0xda>
 80145e6:	2310      	movs	r3, #16
 80145e8:	e791      	b.n	801450e <_svfprintf_r+0x22e>
 80145ea:	1d23      	adds	r3, r4, #4
 80145ec:	6822      	ldr	r2, [r4, #0]
 80145ee:	9312      	str	r3, [sp, #72]	; 0x48
 80145f0:	ab3f      	add	r3, sp, #252	; 0xfc
 80145f2:	701a      	strb	r2, [r3, #0]
 80145f4:	221b      	movs	r2, #27
 80145f6:	2000      	movs	r0, #0
 80145f8:	a91e      	add	r1, sp, #120	; 0x78
 80145fa:	1852      	adds	r2, r2, r1
 80145fc:	7010      	strb	r0, [r2, #0]
 80145fe:	2201      	movs	r2, #1
 8014600:	0005      	movs	r5, r0
 8014602:	900c      	str	r0, [sp, #48]	; 0x30
 8014604:	9208      	str	r2, [sp, #32]
 8014606:	9017      	str	r0, [sp, #92]	; 0x5c
 8014608:	9010      	str	r0, [sp, #64]	; 0x40
 801460a:	900f      	str	r0, [sp, #60]	; 0x3c
 801460c:	9309      	str	r3, [sp, #36]	; 0x24
 801460e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014610:	9a08      	ldr	r2, [sp, #32]
 8014612:	9318      	str	r3, [sp, #96]	; 0x60
 8014614:	4293      	cmp	r3, r2
 8014616:	da00      	bge.n	801461a <_svfprintf_r+0x33a>
 8014618:	9218      	str	r2, [sp, #96]	; 0x60
 801461a:	231b      	movs	r3, #27
 801461c:	aa1e      	add	r2, sp, #120	; 0x78
 801461e:	189b      	adds	r3, r3, r2
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	1e5a      	subs	r2, r3, #1
 8014624:	4193      	sbcs	r3, r2
 8014626:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014628:	18d3      	adds	r3, r2, r3
 801462a:	9318      	str	r3, [sp, #96]	; 0x60
 801462c:	2302      	movs	r3, #2
 801462e:	4033      	ands	r3, r6
 8014630:	9320      	str	r3, [sp, #128]	; 0x80
 8014632:	d002      	beq.n	801463a <_svfprintf_r+0x35a>
 8014634:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014636:	3302      	adds	r3, #2
 8014638:	9318      	str	r3, [sp, #96]	; 0x60
 801463a:	2384      	movs	r3, #132	; 0x84
 801463c:	4033      	ands	r3, r6
 801463e:	9321      	str	r3, [sp, #132]	; 0x84
 8014640:	d121      	bne.n	8014686 <_svfprintf_r+0x3a6>
 8014642:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014644:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014646:	1a9c      	subs	r4, r3, r2
 8014648:	2c00      	cmp	r4, #0
 801464a:	dd1c      	ble.n	8014686 <_svfprintf_r+0x3a6>
 801464c:	0039      	movs	r1, r7
 801464e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014650:	485d      	ldr	r0, [pc, #372]	; (80147c8 <_svfprintf_r+0x4e8>)
 8014652:	9322      	str	r3, [sp, #136]	; 0x88
 8014654:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014656:	3301      	adds	r3, #1
 8014658:	3108      	adds	r1, #8
 801465a:	6038      	str	r0, [r7, #0]
 801465c:	2c10      	cmp	r4, #16
 801465e:	dd01      	ble.n	8014664 <_svfprintf_r+0x384>
 8014660:	f000 fd08 	bl	8015074 <_svfprintf_r+0xd94>
 8014664:	607c      	str	r4, [r7, #4]
 8014666:	18a4      	adds	r4, r4, r2
 8014668:	942e      	str	r4, [sp, #184]	; 0xb8
 801466a:	932d      	str	r3, [sp, #180]	; 0xb4
 801466c:	000f      	movs	r7, r1
 801466e:	2b07      	cmp	r3, #7
 8014670:	dd09      	ble.n	8014686 <_svfprintf_r+0x3a6>
 8014672:	aa2c      	add	r2, sp, #176	; 0xb0
 8014674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014676:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014678:	f002 ff86 	bl	8017588 <__ssprint_r>
 801467c:	2800      	cmp	r0, #0
 801467e:	d001      	beq.n	8014684 <_svfprintf_r+0x3a4>
 8014680:	f001 f852 	bl	8015728 <_svfprintf_r+0x1448>
 8014684:	af2f      	add	r7, sp, #188	; 0xbc
 8014686:	231b      	movs	r3, #27
 8014688:	aa1e      	add	r2, sp, #120	; 0x78
 801468a:	189b      	adds	r3, r3, r2
 801468c:	781a      	ldrb	r2, [r3, #0]
 801468e:	2a00      	cmp	r2, #0
 8014690:	d017      	beq.n	80146c2 <_svfprintf_r+0x3e2>
 8014692:	603b      	str	r3, [r7, #0]
 8014694:	2301      	movs	r3, #1
 8014696:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014698:	607b      	str	r3, [r7, #4]
 801469a:	0013      	movs	r3, r2
 801469c:	3301      	adds	r3, #1
 801469e:	932e      	str	r3, [sp, #184]	; 0xb8
 80146a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146a2:	3708      	adds	r7, #8
 80146a4:	9322      	str	r3, [sp, #136]	; 0x88
 80146a6:	3301      	adds	r3, #1
 80146a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80146aa:	2b07      	cmp	r3, #7
 80146ac:	dd09      	ble.n	80146c2 <_svfprintf_r+0x3e2>
 80146ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80146b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146b4:	f002 ff68 	bl	8017588 <__ssprint_r>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	d001      	beq.n	80146c0 <_svfprintf_r+0x3e0>
 80146bc:	f001 f834 	bl	8015728 <_svfprintf_r+0x1448>
 80146c0:	af2f      	add	r7, sp, #188	; 0xbc
 80146c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d019      	beq.n	80146fc <_svfprintf_r+0x41c>
 80146c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80146ca:	9320      	str	r3, [sp, #128]	; 0x80
 80146cc:	ab25      	add	r3, sp, #148	; 0x94
 80146ce:	603b      	str	r3, [r7, #0]
 80146d0:	2302      	movs	r3, #2
 80146d2:	607b      	str	r3, [r7, #4]
 80146d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80146d6:	3708      	adds	r7, #8
 80146d8:	3302      	adds	r3, #2
 80146da:	932e      	str	r3, [sp, #184]	; 0xb8
 80146dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146de:	9320      	str	r3, [sp, #128]	; 0x80
 80146e0:	3301      	adds	r3, #1
 80146e2:	932d      	str	r3, [sp, #180]	; 0xb4
 80146e4:	2b07      	cmp	r3, #7
 80146e6:	dd09      	ble.n	80146fc <_svfprintf_r+0x41c>
 80146e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80146ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146ee:	f002 ff4b 	bl	8017588 <__ssprint_r>
 80146f2:	2800      	cmp	r0, #0
 80146f4:	d001      	beq.n	80146fa <_svfprintf_r+0x41a>
 80146f6:	f001 f817 	bl	8015728 <_svfprintf_r+0x1448>
 80146fa:	af2f      	add	r7, sp, #188	; 0xbc
 80146fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146fe:	2b80      	cmp	r3, #128	; 0x80
 8014700:	d121      	bne.n	8014746 <_svfprintf_r+0x466>
 8014702:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014704:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014706:	1a9c      	subs	r4, r3, r2
 8014708:	2c00      	cmp	r4, #0
 801470a:	dd1c      	ble.n	8014746 <_svfprintf_r+0x466>
 801470c:	0039      	movs	r1, r7
 801470e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014710:	482e      	ldr	r0, [pc, #184]	; (80147cc <_svfprintf_r+0x4ec>)
 8014712:	9320      	str	r3, [sp, #128]	; 0x80
 8014714:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014716:	3301      	adds	r3, #1
 8014718:	3108      	adds	r1, #8
 801471a:	6038      	str	r0, [r7, #0]
 801471c:	2c10      	cmp	r4, #16
 801471e:	dd01      	ble.n	8014724 <_svfprintf_r+0x444>
 8014720:	f000 fcbc 	bl	801509c <_svfprintf_r+0xdbc>
 8014724:	607c      	str	r4, [r7, #4]
 8014726:	18a4      	adds	r4, r4, r2
 8014728:	942e      	str	r4, [sp, #184]	; 0xb8
 801472a:	932d      	str	r3, [sp, #180]	; 0xb4
 801472c:	000f      	movs	r7, r1
 801472e:	2b07      	cmp	r3, #7
 8014730:	dd09      	ble.n	8014746 <_svfprintf_r+0x466>
 8014732:	aa2c      	add	r2, sp, #176	; 0xb0
 8014734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014736:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014738:	f002 ff26 	bl	8017588 <__ssprint_r>
 801473c:	2800      	cmp	r0, #0
 801473e:	d001      	beq.n	8014744 <_svfprintf_r+0x464>
 8014740:	f000 fff2 	bl	8015728 <_svfprintf_r+0x1448>
 8014744:	af2f      	add	r7, sp, #188	; 0xbc
 8014746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014748:	9a08      	ldr	r2, [sp, #32]
 801474a:	1a9c      	subs	r4, r3, r2
 801474c:	2c00      	cmp	r4, #0
 801474e:	dd1c      	ble.n	801478a <_svfprintf_r+0x4aa>
 8014750:	0039      	movs	r1, r7
 8014752:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014754:	481d      	ldr	r0, [pc, #116]	; (80147cc <_svfprintf_r+0x4ec>)
 8014756:	9317      	str	r3, [sp, #92]	; 0x5c
 8014758:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801475a:	3301      	adds	r3, #1
 801475c:	3108      	adds	r1, #8
 801475e:	6038      	str	r0, [r7, #0]
 8014760:	2c10      	cmp	r4, #16
 8014762:	dd01      	ble.n	8014768 <_svfprintf_r+0x488>
 8014764:	f000 fcb4 	bl	80150d0 <_svfprintf_r+0xdf0>
 8014768:	18a2      	adds	r2, r4, r2
 801476a:	607c      	str	r4, [r7, #4]
 801476c:	922e      	str	r2, [sp, #184]	; 0xb8
 801476e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014770:	000f      	movs	r7, r1
 8014772:	2b07      	cmp	r3, #7
 8014774:	dd09      	ble.n	801478a <_svfprintf_r+0x4aa>
 8014776:	aa2c      	add	r2, sp, #176	; 0xb0
 8014778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801477a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801477c:	f002 ff04 	bl	8017588 <__ssprint_r>
 8014780:	2800      	cmp	r0, #0
 8014782:	d001      	beq.n	8014788 <_svfprintf_r+0x4a8>
 8014784:	f000 ffd0 	bl	8015728 <_svfprintf_r+0x1448>
 8014788:	af2f      	add	r7, sp, #188	; 0xbc
 801478a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801478c:	9317      	str	r3, [sp, #92]	; 0x5c
 801478e:	05f3      	lsls	r3, r6, #23
 8014790:	d501      	bpl.n	8014796 <_svfprintf_r+0x4b6>
 8014792:	f000 fcb1 	bl	80150f8 <_svfprintf_r+0xe18>
 8014796:	9a08      	ldr	r2, [sp, #32]
 8014798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801479a:	4694      	mov	ip, r2
 801479c:	603b      	str	r3, [r7, #0]
 801479e:	9b08      	ldr	r3, [sp, #32]
 80147a0:	607b      	str	r3, [r7, #4]
 80147a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147a4:	4463      	add	r3, ip
 80147a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80147a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147aa:	9308      	str	r3, [sp, #32]
 80147ac:	3301      	adds	r3, #1
 80147ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80147b0:	2b07      	cmp	r3, #7
 80147b2:	dd01      	ble.n	80147b8 <_svfprintf_r+0x4d8>
 80147b4:	f000 fd94 	bl	80152e0 <_svfprintf_r+0x1000>
 80147b8:	3708      	adds	r7, #8
 80147ba:	f000 fce4 	bl	8015186 <_svfprintf_r+0xea6>
 80147be:	46c0      	nop			; (mov r8, r8)
 80147c0:	0801a6e1 	.word	0x0801a6e1
 80147c4:	fffffbff 	.word	0xfffffbff
 80147c8:	0801a6f4 	.word	0x0801a6f4
 80147cc:	0801a704 	.word	0x0801a704
 80147d0:	2310      	movs	r3, #16
 80147d2:	431e      	orrs	r6, r3
 80147d4:	06b3      	lsls	r3, r6, #26
 80147d6:	d52c      	bpl.n	8014832 <_svfprintf_r+0x552>
 80147d8:	2307      	movs	r3, #7
 80147da:	3407      	adds	r4, #7
 80147dc:	439c      	bics	r4, r3
 80147de:	0023      	movs	r3, r4
 80147e0:	3308      	adds	r3, #8
 80147e2:	9312      	str	r3, [sp, #72]	; 0x48
 80147e4:	6823      	ldr	r3, [r4, #0]
 80147e6:	6864      	ldr	r4, [r4, #4]
 80147e8:	9306      	str	r3, [sp, #24]
 80147ea:	9407      	str	r4, [sp, #28]
 80147ec:	9b07      	ldr	r3, [sp, #28]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	da0b      	bge.n	801480a <_svfprintf_r+0x52a>
 80147f2:	9906      	ldr	r1, [sp, #24]
 80147f4:	9a07      	ldr	r2, [sp, #28]
 80147f6:	2400      	movs	r4, #0
 80147f8:	424b      	negs	r3, r1
 80147fa:	4194      	sbcs	r4, r2
 80147fc:	9306      	str	r3, [sp, #24]
 80147fe:	9407      	str	r4, [sp, #28]
 8014800:	231b      	movs	r3, #27
 8014802:	aa1e      	add	r2, sp, #120	; 0x78
 8014804:	189b      	adds	r3, r3, r2
 8014806:	222d      	movs	r2, #45	; 0x2d
 8014808:	701a      	strb	r2, [r3, #0]
 801480a:	9b08      	ldr	r3, [sp, #32]
 801480c:	3301      	adds	r3, #1
 801480e:	d000      	beq.n	8014812 <_svfprintf_r+0x532>
 8014810:	e382      	b.n	8014f18 <_svfprintf_r+0xc38>
 8014812:	9b07      	ldr	r3, [sp, #28]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d000      	beq.n	801481a <_svfprintf_r+0x53a>
 8014818:	e3b0      	b.n	8014f7c <_svfprintf_r+0xc9c>
 801481a:	9b06      	ldr	r3, [sp, #24]
 801481c:	2b09      	cmp	r3, #9
 801481e:	d900      	bls.n	8014822 <_svfprintf_r+0x542>
 8014820:	e3ac      	b.n	8014f7c <_svfprintf_r+0xc9c>
 8014822:	23e7      	movs	r3, #231	; 0xe7
 8014824:	aa1e      	add	r2, sp, #120	; 0x78
 8014826:	189b      	adds	r3, r3, r2
 8014828:	9a06      	ldr	r2, [sp, #24]
 801482a:	3230      	adds	r2, #48	; 0x30
 801482c:	701a      	strb	r2, [r3, #0]
 801482e:	9309      	str	r3, [sp, #36]	; 0x24
 8014830:	e395      	b.n	8014f5e <_svfprintf_r+0xc7e>
 8014832:	1d23      	adds	r3, r4, #4
 8014834:	9312      	str	r3, [sp, #72]	; 0x48
 8014836:	06f3      	lsls	r3, r6, #27
 8014838:	d504      	bpl.n	8014844 <_svfprintf_r+0x564>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	9306      	str	r3, [sp, #24]
 801483e:	17db      	asrs	r3, r3, #31
 8014840:	9307      	str	r3, [sp, #28]
 8014842:	e7d3      	b.n	80147ec <_svfprintf_r+0x50c>
 8014844:	6823      	ldr	r3, [r4, #0]
 8014846:	0672      	lsls	r2, r6, #25
 8014848:	d501      	bpl.n	801484e <_svfprintf_r+0x56e>
 801484a:	b21b      	sxth	r3, r3
 801484c:	e7f6      	b.n	801483c <_svfprintf_r+0x55c>
 801484e:	05b2      	lsls	r2, r6, #22
 8014850:	d5f4      	bpl.n	801483c <_svfprintf_r+0x55c>
 8014852:	b25b      	sxtb	r3, r3
 8014854:	e7f2      	b.n	801483c <_svfprintf_r+0x55c>
 8014856:	2307      	movs	r3, #7
 8014858:	3407      	adds	r4, #7
 801485a:	439c      	bics	r4, r3
 801485c:	0023      	movs	r3, r4
 801485e:	2201      	movs	r2, #1
 8014860:	3308      	adds	r3, #8
 8014862:	9312      	str	r3, [sp, #72]	; 0x48
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	4252      	negs	r2, r2
 8014868:	931a      	str	r3, [sp, #104]	; 0x68
 801486a:	6863      	ldr	r3, [r4, #4]
 801486c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801486e:	005c      	lsls	r4, r3, #1
 8014870:	0864      	lsrs	r4, r4, #1
 8014872:	9319      	str	r3, [sp, #100]	; 0x64
 8014874:	0028      	movs	r0, r5
 8014876:	4bcf      	ldr	r3, [pc, #828]	; (8014bb4 <_svfprintf_r+0x8d4>)
 8014878:	0021      	movs	r1, r4
 801487a:	f7ee f895 	bl	80029a8 <__aeabi_dcmpun>
 801487e:	2800      	cmp	r0, #0
 8014880:	d125      	bne.n	80148ce <_svfprintf_r+0x5ee>
 8014882:	2201      	movs	r2, #1
 8014884:	4bcb      	ldr	r3, [pc, #812]	; (8014bb4 <_svfprintf_r+0x8d4>)
 8014886:	4252      	negs	r2, r2
 8014888:	0028      	movs	r0, r5
 801488a:	0021      	movs	r1, r4
 801488c:	f7eb fdf6 	bl	800047c <__aeabi_dcmple>
 8014890:	2800      	cmp	r0, #0
 8014892:	d11c      	bne.n	80148ce <_svfprintf_r+0x5ee>
 8014894:	2200      	movs	r2, #0
 8014896:	2300      	movs	r3, #0
 8014898:	981a      	ldr	r0, [sp, #104]	; 0x68
 801489a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801489c:	f7eb fde4 	bl	8000468 <__aeabi_dcmplt>
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d004      	beq.n	80148ae <_svfprintf_r+0x5ce>
 80148a4:	231b      	movs	r3, #27
 80148a6:	aa1e      	add	r2, sp, #120	; 0x78
 80148a8:	189b      	adds	r3, r3, r2
 80148aa:	222d      	movs	r2, #45	; 0x2d
 80148ac:	701a      	strb	r2, [r3, #0]
 80148ae:	4bc2      	ldr	r3, [pc, #776]	; (8014bb8 <_svfprintf_r+0x8d8>)
 80148b0:	9309      	str	r3, [sp, #36]	; 0x24
 80148b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148b4:	2b47      	cmp	r3, #71	; 0x47
 80148b6:	dc01      	bgt.n	80148bc <_svfprintf_r+0x5dc>
 80148b8:	4bc0      	ldr	r3, [pc, #768]	; (8014bbc <_svfprintf_r+0x8dc>)
 80148ba:	9309      	str	r3, [sp, #36]	; 0x24
 80148bc:	2380      	movs	r3, #128	; 0x80
 80148be:	439e      	bics	r6, r3
 80148c0:	2300      	movs	r3, #0
 80148c2:	930c      	str	r3, [sp, #48]	; 0x30
 80148c4:	3303      	adds	r3, #3
 80148c6:	9308      	str	r3, [sp, #32]
 80148c8:	2300      	movs	r3, #0
 80148ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80148cc:	e34f      	b.n	8014f6e <_svfprintf_r+0xc8e>
 80148ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80148d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148d2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80148d4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80148d6:	f7ee f867 	bl	80029a8 <__aeabi_dcmpun>
 80148da:	2800      	cmp	r0, #0
 80148dc:	d00e      	beq.n	80148fc <_svfprintf_r+0x61c>
 80148de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	da04      	bge.n	80148ee <_svfprintf_r+0x60e>
 80148e4:	231b      	movs	r3, #27
 80148e6:	aa1e      	add	r2, sp, #120	; 0x78
 80148e8:	189b      	adds	r3, r3, r2
 80148ea:	222d      	movs	r2, #45	; 0x2d
 80148ec:	701a      	strb	r2, [r3, #0]
 80148ee:	4bb4      	ldr	r3, [pc, #720]	; (8014bc0 <_svfprintf_r+0x8e0>)
 80148f0:	9309      	str	r3, [sp, #36]	; 0x24
 80148f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148f4:	2b47      	cmp	r3, #71	; 0x47
 80148f6:	dce1      	bgt.n	80148bc <_svfprintf_r+0x5dc>
 80148f8:	4bb2      	ldr	r3, [pc, #712]	; (8014bc4 <_svfprintf_r+0x8e4>)
 80148fa:	e7de      	b.n	80148ba <_svfprintf_r+0x5da>
 80148fc:	2320      	movs	r3, #32
 80148fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014900:	439a      	bics	r2, r3
 8014902:	920f      	str	r2, [sp, #60]	; 0x3c
 8014904:	2a41      	cmp	r2, #65	; 0x41
 8014906:	d124      	bne.n	8014952 <_svfprintf_r+0x672>
 8014908:	2230      	movs	r2, #48	; 0x30
 801490a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801490c:	ab25      	add	r3, sp, #148	; 0x94
 801490e:	701a      	strb	r2, [r3, #0]
 8014910:	3228      	adds	r2, #40	; 0x28
 8014912:	2961      	cmp	r1, #97	; 0x61
 8014914:	d100      	bne.n	8014918 <_svfprintf_r+0x638>
 8014916:	3220      	adds	r2, #32
 8014918:	705a      	strb	r2, [r3, #1]
 801491a:	2302      	movs	r3, #2
 801491c:	431e      	orrs	r6, r3
 801491e:	9b08      	ldr	r3, [sp, #32]
 8014920:	2b63      	cmp	r3, #99	; 0x63
 8014922:	dc00      	bgt.n	8014926 <_svfprintf_r+0x646>
 8014924:	e09e      	b.n	8014a64 <_svfprintf_r+0x784>
 8014926:	1c59      	adds	r1, r3, #1
 8014928:	980a      	ldr	r0, [sp, #40]	; 0x28
 801492a:	f7fe f913 	bl	8012b54 <_malloc_r>
 801492e:	9009      	str	r0, [sp, #36]	; 0x24
 8014930:	2800      	cmp	r0, #0
 8014932:	d000      	beq.n	8014936 <_svfprintf_r+0x656>
 8014934:	e09b      	b.n	8014a6e <_svfprintf_r+0x78e>
 8014936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014938:	899a      	ldrh	r2, [r3, #12]
 801493a:	2340      	movs	r3, #64	; 0x40
 801493c:	4313      	orrs	r3, r2
 801493e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014940:	8193      	strh	r3, [r2, #12]
 8014942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014944:	899b      	ldrh	r3, [r3, #12]
 8014946:	065b      	lsls	r3, r3, #25
 8014948:	d400      	bmi.n	801494c <_svfprintf_r+0x66c>
 801494a:	e4ee      	b.n	801432a <_svfprintf_r+0x4a>
 801494c:	2301      	movs	r3, #1
 801494e:	425b      	negs	r3, r3
 8014950:	e4ea      	b.n	8014328 <_svfprintf_r+0x48>
 8014952:	9b08      	ldr	r3, [sp, #32]
 8014954:	900c      	str	r0, [sp, #48]	; 0x30
 8014956:	3301      	adds	r3, #1
 8014958:	d100      	bne.n	801495c <_svfprintf_r+0x67c>
 801495a:	e08b      	b.n	8014a74 <_svfprintf_r+0x794>
 801495c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801495e:	2b47      	cmp	r3, #71	; 0x47
 8014960:	d103      	bne.n	801496a <_svfprintf_r+0x68a>
 8014962:	9b08      	ldr	r3, [sp, #32]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d100      	bne.n	801496a <_svfprintf_r+0x68a>
 8014968:	e087      	b.n	8014a7a <_svfprintf_r+0x79a>
 801496a:	2380      	movs	r3, #128	; 0x80
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4333      	orrs	r3, r6
 8014970:	9320      	str	r3, [sp, #128]	; 0x80
 8014972:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014974:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8014976:	2b00      	cmp	r3, #0
 8014978:	db00      	blt.n	801497c <_svfprintf_r+0x69c>
 801497a:	e082      	b.n	8014a82 <_svfprintf_r+0x7a2>
 801497c:	2280      	movs	r2, #128	; 0x80
 801497e:	0612      	lsls	r2, r2, #24
 8014980:	4694      	mov	ip, r2
 8014982:	4463      	add	r3, ip
 8014984:	930d      	str	r3, [sp, #52]	; 0x34
 8014986:	232d      	movs	r3, #45	; 0x2d
 8014988:	9322      	str	r3, [sp, #136]	; 0x88
 801498a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801498c:	2b41      	cmp	r3, #65	; 0x41
 801498e:	d000      	beq.n	8014992 <_svfprintf_r+0x6b2>
 8014990:	e105      	b.n	8014b9e <_svfprintf_r+0x8be>
 8014992:	aa26      	add	r2, sp, #152	; 0x98
 8014994:	0020      	movs	r0, r4
 8014996:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014998:	f002 fdc4 	bl	8017524 <frexp>
 801499c:	23ff      	movs	r3, #255	; 0xff
 801499e:	2200      	movs	r2, #0
 80149a0:	059b      	lsls	r3, r3, #22
 80149a2:	f7ed fa47 	bl	8001e34 <__aeabi_dmul>
 80149a6:	2200      	movs	r2, #0
 80149a8:	2300      	movs	r3, #0
 80149aa:	0004      	movs	r4, r0
 80149ac:	000d      	movs	r5, r1
 80149ae:	f7eb fd55 	bl	800045c <__aeabi_dcmpeq>
 80149b2:	2800      	cmp	r0, #0
 80149b4:	d001      	beq.n	80149ba <_svfprintf_r+0x6da>
 80149b6:	2301      	movs	r3, #1
 80149b8:	9326      	str	r3, [sp, #152]	; 0x98
 80149ba:	4b83      	ldr	r3, [pc, #524]	; (8014bc8 <_svfprintf_r+0x8e8>)
 80149bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80149be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149c0:	2b61      	cmp	r3, #97	; 0x61
 80149c2:	d101      	bne.n	80149c8 <_svfprintf_r+0x6e8>
 80149c4:	4b81      	ldr	r3, [pc, #516]	; (8014bcc <_svfprintf_r+0x8ec>)
 80149c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80149c8:	9b08      	ldr	r3, [sp, #32]
 80149ca:	3b01      	subs	r3, #1
 80149cc:	9310      	str	r3, [sp, #64]	; 0x40
 80149ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149d0:	9318      	str	r3, [sp, #96]	; 0x60
 80149d2:	2200      	movs	r2, #0
 80149d4:	4b7e      	ldr	r3, [pc, #504]	; (8014bd0 <_svfprintf_r+0x8f0>)
 80149d6:	0020      	movs	r0, r4
 80149d8:	0029      	movs	r1, r5
 80149da:	f7ed fa2b 	bl	8001e34 <__aeabi_dmul>
 80149de:	000d      	movs	r5, r1
 80149e0:	0004      	movs	r4, r0
 80149e2:	f7ed fffd 	bl	80029e0 <__aeabi_d2iz>
 80149e6:	9021      	str	r0, [sp, #132]	; 0x84
 80149e8:	f7ee f830 	bl	8002a4c <__aeabi_i2d>
 80149ec:	0002      	movs	r2, r0
 80149ee:	000b      	movs	r3, r1
 80149f0:	0020      	movs	r0, r4
 80149f2:	0029      	movs	r1, r5
 80149f4:	f7ed fc90 	bl	8002318 <__aeabi_dsub>
 80149f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80149fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149fc:	3301      	adds	r3, #1
 80149fe:	930d      	str	r3, [sp, #52]	; 0x34
 8014a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a02:	0004      	movs	r4, r0
 8014a04:	5c9b      	ldrb	r3, [r3, r2]
 8014a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a08:	000d      	movs	r5, r1
 8014a0a:	7013      	strb	r3, [r2, #0]
 8014a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8014a10:	3301      	adds	r3, #1
 8014a12:	d00a      	beq.n	8014a2a <_svfprintf_r+0x74a>
 8014a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a16:	2200      	movs	r2, #0
 8014a18:	3b01      	subs	r3, #1
 8014a1a:	9310      	str	r3, [sp, #64]	; 0x40
 8014a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a1e:	9318      	str	r3, [sp, #96]	; 0x60
 8014a20:	2300      	movs	r3, #0
 8014a22:	f7eb fd1b 	bl	800045c <__aeabi_dcmpeq>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d0d3      	beq.n	80149d2 <_svfprintf_r+0x6f2>
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	4b69      	ldr	r3, [pc, #420]	; (8014bd4 <_svfprintf_r+0x8f4>)
 8014a2e:	0020      	movs	r0, r4
 8014a30:	0029      	movs	r1, r5
 8014a32:	f7eb fd2d 	bl	8000490 <__aeabi_dcmpgt>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d126      	bne.n	8014a88 <_svfprintf_r+0x7a8>
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	4b65      	ldr	r3, [pc, #404]	; (8014bd4 <_svfprintf_r+0x8f4>)
 8014a3e:	0020      	movs	r0, r4
 8014a40:	0029      	movs	r1, r5
 8014a42:	f7eb fd0b 	bl	800045c <__aeabi_dcmpeq>
 8014a46:	2800      	cmp	r0, #0
 8014a48:	d002      	beq.n	8014a50 <_svfprintf_r+0x770>
 8014a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a4c:	07db      	lsls	r3, r3, #31
 8014a4e:	d41b      	bmi.n	8014a88 <_svfprintf_r+0x7a8>
 8014a50:	2130      	movs	r1, #48	; 0x30
 8014a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a54:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014a56:	1898      	adds	r0, r3, r2
 8014a58:	930d      	str	r3, [sp, #52]	; 0x34
 8014a5a:	1ac2      	subs	r2, r0, r3
 8014a5c:	d426      	bmi.n	8014aac <_svfprintf_r+0x7cc>
 8014a5e:	7019      	strb	r1, [r3, #0]
 8014a60:	3301      	adds	r3, #1
 8014a62:	e7f9      	b.n	8014a58 <_svfprintf_r+0x778>
 8014a64:	2300      	movs	r3, #0
 8014a66:	930c      	str	r3, [sp, #48]	; 0x30
 8014a68:	ab3f      	add	r3, sp, #252	; 0xfc
 8014a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8014a6c:	e77d      	b.n	801496a <_svfprintf_r+0x68a>
 8014a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a70:	930c      	str	r3, [sp, #48]	; 0x30
 8014a72:	e77a      	b.n	801496a <_svfprintf_r+0x68a>
 8014a74:	2306      	movs	r3, #6
 8014a76:	9308      	str	r3, [sp, #32]
 8014a78:	e777      	b.n	801496a <_svfprintf_r+0x68a>
 8014a7a:	9b08      	ldr	r3, [sp, #32]
 8014a7c:	930c      	str	r3, [sp, #48]	; 0x30
 8014a7e:	2301      	movs	r3, #1
 8014a80:	e7f9      	b.n	8014a76 <_svfprintf_r+0x796>
 8014a82:	930d      	str	r3, [sp, #52]	; 0x34
 8014a84:	2300      	movs	r3, #0
 8014a86:	e77f      	b.n	8014988 <_svfprintf_r+0x6a8>
 8014a88:	2030      	movs	r0, #48	; 0x30
 8014a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a8c:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a90:	7bda      	ldrb	r2, [r3, #15]
 8014a92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a94:	3b01      	subs	r3, #1
 8014a96:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a98:	7819      	ldrb	r1, [r3, #0]
 8014a9a:	4291      	cmp	r1, r2
 8014a9c:	d07d      	beq.n	8014b9a <_svfprintf_r+0x8ba>
 8014a9e:	1c4a      	adds	r2, r1, #1
 8014aa0:	b2d2      	uxtb	r2, r2
 8014aa2:	2939      	cmp	r1, #57	; 0x39
 8014aa4:	d101      	bne.n	8014aaa <_svfprintf_r+0x7ca>
 8014aa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014aa8:	7a92      	ldrb	r2, [r2, #10]
 8014aaa:	701a      	strb	r2, [r3, #0]
 8014aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ab0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014ab2:	1a9b      	subs	r3, r3, r2
 8014ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8014ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ab8:	2b47      	cmp	r3, #71	; 0x47
 8014aba:	d000      	beq.n	8014abe <_svfprintf_r+0x7de>
 8014abc:	e0d2      	b.n	8014c64 <_svfprintf_r+0x984>
 8014abe:	1ceb      	adds	r3, r5, #3
 8014ac0:	db03      	blt.n	8014aca <_svfprintf_r+0x7ea>
 8014ac2:	9b08      	ldr	r3, [sp, #32]
 8014ac4:	42ab      	cmp	r3, r5
 8014ac6:	db00      	blt.n	8014aca <_svfprintf_r+0x7ea>
 8014ac8:	e0fd      	b.n	8014cc6 <_svfprintf_r+0x9e6>
 8014aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014acc:	3b02      	subs	r3, #2
 8014ace:	930e      	str	r3, [sp, #56]	; 0x38
 8014ad0:	2238      	movs	r2, #56	; 0x38
 8014ad2:	466b      	mov	r3, sp
 8014ad4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014ad6:	189b      	adds	r3, r3, r2
 8014ad8:	3a18      	subs	r2, #24
 8014ada:	4391      	bics	r1, r2
 8014adc:	1e6c      	subs	r4, r5, #1
 8014ade:	000a      	movs	r2, r1
 8014ae0:	9426      	str	r4, [sp, #152]	; 0x98
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	2a41      	cmp	r2, #65	; 0x41
 8014ae8:	d102      	bne.n	8014af0 <_svfprintf_r+0x810>
 8014aea:	330f      	adds	r3, #15
 8014aec:	b2db      	uxtb	r3, r3
 8014aee:	3101      	adds	r1, #1
 8014af0:	aa28      	add	r2, sp, #160	; 0xa0
 8014af2:	7013      	strb	r3, [r2, #0]
 8014af4:	232b      	movs	r3, #43	; 0x2b
 8014af6:	2c00      	cmp	r4, #0
 8014af8:	da02      	bge.n	8014b00 <_svfprintf_r+0x820>
 8014afa:	2401      	movs	r4, #1
 8014afc:	232d      	movs	r3, #45	; 0x2d
 8014afe:	1b64      	subs	r4, r4, r5
 8014b00:	7053      	strb	r3, [r2, #1]
 8014b02:	2c09      	cmp	r4, #9
 8014b04:	dc00      	bgt.n	8014b08 <_svfprintf_r+0x828>
 8014b06:	e0c7      	b.n	8014c98 <_svfprintf_r+0x9b8>
 8014b08:	2537      	movs	r5, #55	; 0x37
 8014b0a:	ab1e      	add	r3, sp, #120	; 0x78
 8014b0c:	18ed      	adds	r5, r5, r3
 8014b0e:	1e6b      	subs	r3, r5, #1
 8014b10:	0020      	movs	r0, r4
 8014b12:	210a      	movs	r1, #10
 8014b14:	9308      	str	r3, [sp, #32]
 8014b16:	f7eb fc8b 	bl	8000430 <__aeabi_idivmod>
 8014b1a:	1e6b      	subs	r3, r5, #1
 8014b1c:	3130      	adds	r1, #48	; 0x30
 8014b1e:	7019      	strb	r1, [r3, #0]
 8014b20:	0020      	movs	r0, r4
 8014b22:	210a      	movs	r1, #10
 8014b24:	f7eb fb9e 	bl	8000264 <__divsi3>
 8014b28:	0004      	movs	r4, r0
 8014b2a:	2809      	cmp	r0, #9
 8014b2c:	dd00      	ble.n	8014b30 <_svfprintf_r+0x850>
 8014b2e:	e0ac      	b.n	8014c8a <_svfprintf_r+0x9aa>
 8014b30:	232a      	movs	r3, #42	; 0x2a
 8014b32:	2137      	movs	r1, #55	; 0x37
 8014b34:	aa1e      	add	r2, sp, #120	; 0x78
 8014b36:	3d02      	subs	r5, #2
 8014b38:	3430      	adds	r4, #48	; 0x30
 8014b3a:	702c      	strb	r4, [r5, #0]
 8014b3c:	189b      	adds	r3, r3, r2
 8014b3e:	1889      	adds	r1, r1, r2
 8014b40:	001a      	movs	r2, r3
 8014b42:	428d      	cmp	r5, r1
 8014b44:	d200      	bcs.n	8014b48 <_svfprintf_r+0x868>
 8014b46:	e0a2      	b.n	8014c8e <_svfprintf_r+0x9ae>
 8014b48:	ab28      	add	r3, sp, #160	; 0xa0
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	931d      	str	r3, [sp, #116]	; 0x74
 8014b4e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b52:	4694      	mov	ip, r2
 8014b54:	4463      	add	r3, ip
 8014b56:	9308      	str	r3, [sp, #32]
 8014b58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	dc01      	bgt.n	8014b62 <_svfprintf_r+0x882>
 8014b5e:	07f3      	lsls	r3, r6, #31
 8014b60:	d504      	bpl.n	8014b6c <_svfprintf_r+0x88c>
 8014b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b64:	9b08      	ldr	r3, [sp, #32]
 8014b66:	4694      	mov	ip, r2
 8014b68:	4463      	add	r3, ip
 8014b6a:	9308      	str	r3, [sp, #32]
 8014b6c:	2280      	movs	r2, #128	; 0x80
 8014b6e:	4b1a      	ldr	r3, [pc, #104]	; (8014bd8 <_svfprintf_r+0x8f8>)
 8014b70:	0052      	lsls	r2, r2, #1
 8014b72:	4033      	ands	r3, r6
 8014b74:	431a      	orrs	r2, r3
 8014b76:	2300      	movs	r3, #0
 8014b78:	001d      	movs	r5, r3
 8014b7a:	9220      	str	r2, [sp, #128]	; 0x80
 8014b7c:	9310      	str	r3, [sp, #64]	; 0x40
 8014b7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d100      	bne.n	8014b88 <_svfprintf_r+0x8a8>
 8014b86:	e270      	b.n	801506a <_svfprintf_r+0xd8a>
 8014b88:	231b      	movs	r3, #27
 8014b8a:	aa1e      	add	r2, sp, #120	; 0x78
 8014b8c:	189b      	adds	r3, r3, r2
 8014b8e:	222d      	movs	r2, #45	; 0x2d
 8014b90:	701a      	strb	r2, [r3, #0]
 8014b92:	2300      	movs	r3, #0
 8014b94:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014b96:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b98:	e539      	b.n	801460e <_svfprintf_r+0x32e>
 8014b9a:	7018      	strb	r0, [r3, #0]
 8014b9c:	e779      	b.n	8014a92 <_svfprintf_r+0x7b2>
 8014b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ba0:	2b46      	cmp	r3, #70	; 0x46
 8014ba2:	d01b      	beq.n	8014bdc <_svfprintf_r+0x8fc>
 8014ba4:	9d08      	ldr	r5, [sp, #32]
 8014ba6:	2b45      	cmp	r3, #69	; 0x45
 8014ba8:	d101      	bne.n	8014bae <_svfprintf_r+0x8ce>
 8014baa:	9b08      	ldr	r3, [sp, #32]
 8014bac:	1c5d      	adds	r5, r3, #1
 8014bae:	2302      	movs	r3, #2
 8014bb0:	e016      	b.n	8014be0 <_svfprintf_r+0x900>
 8014bb2:	46c0      	nop			; (mov r8, r8)
 8014bb4:	7fefffff 	.word	0x7fefffff
 8014bb8:	0801a6c4 	.word	0x0801a6c4
 8014bbc:	0801a6c0 	.word	0x0801a6c0
 8014bc0:	0801a6cc 	.word	0x0801a6cc
 8014bc4:	0801a6c8 	.word	0x0801a6c8
 8014bc8:	0801a6e1 	.word	0x0801a6e1
 8014bcc:	0801a6d0 	.word	0x0801a6d0
 8014bd0:	40300000 	.word	0x40300000
 8014bd4:	3fe00000 	.word	0x3fe00000
 8014bd8:	fffffbff 	.word	0xfffffbff
 8014bdc:	2303      	movs	r3, #3
 8014bde:	9d08      	ldr	r5, [sp, #32]
 8014be0:	aa2a      	add	r2, sp, #168	; 0xa8
 8014be2:	9204      	str	r2, [sp, #16]
 8014be4:	aa27      	add	r2, sp, #156	; 0x9c
 8014be6:	9203      	str	r2, [sp, #12]
 8014be8:	aa26      	add	r2, sp, #152	; 0x98
 8014bea:	9202      	str	r2, [sp, #8]
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	9501      	str	r5, [sp, #4]
 8014bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bf2:	0022      	movs	r2, r4
 8014bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bf6:	f000 fe79 	bl	80158ec <_dtoa_r>
 8014bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bfc:	9009      	str	r0, [sp, #36]	; 0x24
 8014bfe:	2b47      	cmp	r3, #71	; 0x47
 8014c00:	d101      	bne.n	8014c06 <_svfprintf_r+0x926>
 8014c02:	07f3      	lsls	r3, r6, #31
 8014c04:	d524      	bpl.n	8014c50 <_svfprintf_r+0x970>
 8014c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c08:	195b      	adds	r3, r3, r5
 8014c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8014c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c0e:	2b46      	cmp	r3, #70	; 0x46
 8014c10:	d113      	bne.n	8014c3a <_svfprintf_r+0x95a>
 8014c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	2b30      	cmp	r3, #48	; 0x30
 8014c18:	d10a      	bne.n	8014c30 <_svfprintf_r+0x950>
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	0020      	movs	r0, r4
 8014c20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c22:	f7eb fc1b 	bl	800045c <__aeabi_dcmpeq>
 8014c26:	2800      	cmp	r0, #0
 8014c28:	d102      	bne.n	8014c30 <_svfprintf_r+0x950>
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	1b5d      	subs	r5, r3, r5
 8014c2e:	9526      	str	r5, [sp, #152]	; 0x98
 8014c30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c34:	4694      	mov	ip, r2
 8014c36:	4463      	add	r3, ip
 8014c38:	9310      	str	r3, [sp, #64]	; 0x40
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	0020      	movs	r0, r4
 8014c40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c42:	f7eb fc0b 	bl	800045c <__aeabi_dcmpeq>
 8014c46:	2230      	movs	r2, #48	; 0x30
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d006      	beq.n	8014c5a <_svfprintf_r+0x97a>
 8014c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c4e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014c50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014c52:	e72c      	b.n	8014aae <_svfprintf_r+0x7ce>
 8014c54:	1c59      	adds	r1, r3, #1
 8014c56:	912a      	str	r1, [sp, #168]	; 0xa8
 8014c58:	701a      	strb	r2, [r3, #0]
 8014c5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014c5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014c5e:	4299      	cmp	r1, r3
 8014c60:	d8f8      	bhi.n	8014c54 <_svfprintf_r+0x974>
 8014c62:	e7f5      	b.n	8014c50 <_svfprintf_r+0x970>
 8014c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c66:	2b46      	cmp	r3, #70	; 0x46
 8014c68:	d000      	beq.n	8014c6c <_svfprintf_r+0x98c>
 8014c6a:	e731      	b.n	8014ad0 <_svfprintf_r+0x7f0>
 8014c6c:	9b08      	ldr	r3, [sp, #32]
 8014c6e:	2d00      	cmp	r5, #0
 8014c70:	dd21      	ble.n	8014cb6 <_svfprintf_r+0x9d6>
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d101      	bne.n	8014c7a <_svfprintf_r+0x99a>
 8014c76:	07f3      	lsls	r3, r6, #31
 8014c78:	d54a      	bpl.n	8014d10 <_svfprintf_r+0xa30>
 8014c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c7c:	18eb      	adds	r3, r5, r3
 8014c7e:	9a08      	ldr	r2, [sp, #32]
 8014c80:	18d3      	adds	r3, r2, r3
 8014c82:	9308      	str	r3, [sp, #32]
 8014c84:	2366      	movs	r3, #102	; 0x66
 8014c86:	930e      	str	r3, [sp, #56]	; 0x38
 8014c88:	e034      	b.n	8014cf4 <_svfprintf_r+0xa14>
 8014c8a:	9d08      	ldr	r5, [sp, #32]
 8014c8c:	e73f      	b.n	8014b0e <_svfprintf_r+0x82e>
 8014c8e:	782a      	ldrb	r2, [r5, #0]
 8014c90:	3501      	adds	r5, #1
 8014c92:	701a      	strb	r2, [r3, #0]
 8014c94:	3301      	adds	r3, #1
 8014c96:	e753      	b.n	8014b40 <_svfprintf_r+0x860>
 8014c98:	232a      	movs	r3, #42	; 0x2a
 8014c9a:	aa1e      	add	r2, sp, #120	; 0x78
 8014c9c:	189b      	adds	r3, r3, r2
 8014c9e:	2900      	cmp	r1, #0
 8014ca0:	d105      	bne.n	8014cae <_svfprintf_r+0x9ce>
 8014ca2:	2230      	movs	r2, #48	; 0x30
 8014ca4:	ab28      	add	r3, sp, #160	; 0xa0
 8014ca6:	709a      	strb	r2, [r3, #2]
 8014ca8:	232b      	movs	r3, #43	; 0x2b
 8014caa:	aa1e      	add	r2, sp, #120	; 0x78
 8014cac:	189b      	adds	r3, r3, r2
 8014cae:	3430      	adds	r4, #48	; 0x30
 8014cb0:	1c5a      	adds	r2, r3, #1
 8014cb2:	701c      	strb	r4, [r3, #0]
 8014cb4:	e748      	b.n	8014b48 <_svfprintf_r+0x868>
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d102      	bne.n	8014cc0 <_svfprintf_r+0x9e0>
 8014cba:	3301      	adds	r3, #1
 8014cbc:	421e      	tst	r6, r3
 8014cbe:	d029      	beq.n	8014d14 <_svfprintf_r+0xa34>
 8014cc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	e7db      	b.n	8014c7e <_svfprintf_r+0x99e>
 8014cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cc8:	42ab      	cmp	r3, r5
 8014cca:	dc06      	bgt.n	8014cda <_svfprintf_r+0x9fa>
 8014ccc:	07f3      	lsls	r3, r6, #31
 8014cce:	d524      	bpl.n	8014d1a <_svfprintf_r+0xa3a>
 8014cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014cd2:	18eb      	adds	r3, r5, r3
 8014cd4:	9308      	str	r3, [sp, #32]
 8014cd6:	2367      	movs	r3, #103	; 0x67
 8014cd8:	e7d5      	b.n	8014c86 <_svfprintf_r+0x9a6>
 8014cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cde:	4694      	mov	ip, r2
 8014ce0:	4463      	add	r3, ip
 8014ce2:	9308      	str	r3, [sp, #32]
 8014ce4:	2367      	movs	r3, #103	; 0x67
 8014ce6:	930e      	str	r3, [sp, #56]	; 0x38
 8014ce8:	2d00      	cmp	r5, #0
 8014cea:	dc03      	bgt.n	8014cf4 <_svfprintf_r+0xa14>
 8014cec:	9b08      	ldr	r3, [sp, #32]
 8014cee:	1b5b      	subs	r3, r3, r5
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	9308      	str	r3, [sp, #32]
 8014cf4:	2380      	movs	r3, #128	; 0x80
 8014cf6:	00db      	lsls	r3, r3, #3
 8014cf8:	401e      	ands	r6, r3
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	960f      	str	r6, [sp, #60]	; 0x3c
 8014cfe:	9310      	str	r3, [sp, #64]	; 0x40
 8014d00:	2e00      	cmp	r6, #0
 8014d02:	d100      	bne.n	8014d06 <_svfprintf_r+0xa26>
 8014d04:	e73c      	b.n	8014b80 <_svfprintf_r+0x8a0>
 8014d06:	2d00      	cmp	r5, #0
 8014d08:	dc27      	bgt.n	8014d5a <_svfprintf_r+0xa7a>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d0e:	e737      	b.n	8014b80 <_svfprintf_r+0x8a0>
 8014d10:	9508      	str	r5, [sp, #32]
 8014d12:	e7b7      	b.n	8014c84 <_svfprintf_r+0x9a4>
 8014d14:	2266      	movs	r2, #102	; 0x66
 8014d16:	920e      	str	r2, [sp, #56]	; 0x38
 8014d18:	e7eb      	b.n	8014cf2 <_svfprintf_r+0xa12>
 8014d1a:	9508      	str	r5, [sp, #32]
 8014d1c:	e7db      	b.n	8014cd6 <_svfprintf_r+0x9f6>
 8014d1e:	42ab      	cmp	r3, r5
 8014d20:	da0e      	bge.n	8014d40 <_svfprintf_r+0xa60>
 8014d22:	1aed      	subs	r5, r5, r3
 8014d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d26:	785b      	ldrb	r3, [r3, #1]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d012      	beq.n	8014d52 <_svfprintf_r+0xa72>
 8014d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d2e:	3301      	adds	r3, #1
 8014d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d34:	3301      	adds	r3, #1
 8014d36:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	2bff      	cmp	r3, #255	; 0xff
 8014d3e:	d1ee      	bne.n	8014d1e <_svfprintf_r+0xa3e>
 8014d40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d44:	189b      	adds	r3, r3, r2
 8014d46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014d48:	4353      	muls	r3, r2
 8014d4a:	9a08      	ldr	r2, [sp, #32]
 8014d4c:	189b      	adds	r3, r3, r2
 8014d4e:	9308      	str	r3, [sp, #32]
 8014d50:	e716      	b.n	8014b80 <_svfprintf_r+0x8a0>
 8014d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d54:	3301      	adds	r3, #1
 8014d56:	9310      	str	r3, [sp, #64]	; 0x40
 8014d58:	e7ee      	b.n	8014d38 <_svfprintf_r+0xa58>
 8014d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d5e:	e7eb      	b.n	8014d38 <_svfprintf_r+0xa58>
 8014d60:	0022      	movs	r2, r4
 8014d62:	ca08      	ldmia	r2!, {r3}
 8014d64:	9212      	str	r2, [sp, #72]	; 0x48
 8014d66:	06b2      	lsls	r2, r6, #26
 8014d68:	d508      	bpl.n	8014d7c <_svfprintf_r+0xa9c>
 8014d6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d6c:	601a      	str	r2, [r3, #0]
 8014d6e:	17d2      	asrs	r2, r2, #31
 8014d70:	605a      	str	r2, [r3, #4]
 8014d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d74:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014d76:	9309      	str	r3, [sp, #36]	; 0x24
 8014d78:	f7ff faeb 	bl	8014352 <_svfprintf_r+0x72>
 8014d7c:	06f2      	lsls	r2, r6, #27
 8014d7e:	d502      	bpl.n	8014d86 <_svfprintf_r+0xaa6>
 8014d80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d82:	601a      	str	r2, [r3, #0]
 8014d84:	e7f5      	b.n	8014d72 <_svfprintf_r+0xa92>
 8014d86:	0672      	lsls	r2, r6, #25
 8014d88:	d502      	bpl.n	8014d90 <_svfprintf_r+0xab0>
 8014d8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d8c:	801a      	strh	r2, [r3, #0]
 8014d8e:	e7f0      	b.n	8014d72 <_svfprintf_r+0xa92>
 8014d90:	05b2      	lsls	r2, r6, #22
 8014d92:	d5f5      	bpl.n	8014d80 <_svfprintf_r+0xaa0>
 8014d94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d96:	701a      	strb	r2, [r3, #0]
 8014d98:	e7eb      	b.n	8014d72 <_svfprintf_r+0xa92>
 8014d9a:	2310      	movs	r3, #16
 8014d9c:	431e      	orrs	r6, r3
 8014d9e:	2220      	movs	r2, #32
 8014da0:	4032      	ands	r2, r6
 8014da2:	d025      	beq.n	8014df0 <_svfprintf_r+0xb10>
 8014da4:	2307      	movs	r3, #7
 8014da6:	3407      	adds	r4, #7
 8014da8:	439c      	bics	r4, r3
 8014daa:	0023      	movs	r3, r4
 8014dac:	3308      	adds	r3, #8
 8014dae:	9312      	str	r3, [sp, #72]	; 0x48
 8014db0:	6823      	ldr	r3, [r4, #0]
 8014db2:	6864      	ldr	r4, [r4, #4]
 8014db4:	9306      	str	r3, [sp, #24]
 8014db6:	9407      	str	r4, [sp, #28]
 8014db8:	4bc2      	ldr	r3, [pc, #776]	; (80150c4 <_svfprintf_r+0xde4>)
 8014dba:	401e      	ands	r6, r3
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	221b      	movs	r2, #27
 8014dc0:	a91e      	add	r1, sp, #120	; 0x78
 8014dc2:	1852      	adds	r2, r2, r1
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	7011      	strb	r1, [r2, #0]
 8014dc8:	9a08      	ldr	r2, [sp, #32]
 8014dca:	3201      	adds	r2, #1
 8014dcc:	d100      	bne.n	8014dd0 <_svfprintf_r+0xaf0>
 8014dce:	e0a6      	b.n	8014f1e <_svfprintf_r+0xc3e>
 8014dd0:	0032      	movs	r2, r6
 8014dd2:	2180      	movs	r1, #128	; 0x80
 8014dd4:	9807      	ldr	r0, [sp, #28]
 8014dd6:	438e      	bics	r6, r1
 8014dd8:	9906      	ldr	r1, [sp, #24]
 8014dda:	4301      	orrs	r1, r0
 8014ddc:	d000      	beq.n	8014de0 <_svfprintf_r+0xb00>
 8014dde:	e09e      	b.n	8014f1e <_svfprintf_r+0xc3e>
 8014de0:	9908      	ldr	r1, [sp, #32]
 8014de2:	2900      	cmp	r1, #0
 8014de4:	d100      	bne.n	8014de8 <_svfprintf_r+0xb08>
 8014de6:	e125      	b.n	8015034 <_svfprintf_r+0xd54>
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d000      	beq.n	8014dee <_svfprintf_r+0xb0e>
 8014dec:	e09a      	b.n	8014f24 <_svfprintf_r+0xc44>
 8014dee:	e518      	b.n	8014822 <_svfprintf_r+0x542>
 8014df0:	1d23      	adds	r3, r4, #4
 8014df2:	9312      	str	r3, [sp, #72]	; 0x48
 8014df4:	2310      	movs	r3, #16
 8014df6:	4033      	ands	r3, r6
 8014df8:	d003      	beq.n	8014e02 <_svfprintf_r+0xb22>
 8014dfa:	6823      	ldr	r3, [r4, #0]
 8014dfc:	9306      	str	r3, [sp, #24]
 8014dfe:	9207      	str	r2, [sp, #28]
 8014e00:	e7da      	b.n	8014db8 <_svfprintf_r+0xad8>
 8014e02:	2240      	movs	r2, #64	; 0x40
 8014e04:	4032      	ands	r2, r6
 8014e06:	d004      	beq.n	8014e12 <_svfprintf_r+0xb32>
 8014e08:	6822      	ldr	r2, [r4, #0]
 8014e0a:	b292      	uxth	r2, r2
 8014e0c:	9206      	str	r2, [sp, #24]
 8014e0e:	9307      	str	r3, [sp, #28]
 8014e10:	e7d2      	b.n	8014db8 <_svfprintf_r+0xad8>
 8014e12:	2380      	movs	r3, #128	; 0x80
 8014e14:	009b      	lsls	r3, r3, #2
 8014e16:	4033      	ands	r3, r6
 8014e18:	d002      	beq.n	8014e20 <_svfprintf_r+0xb40>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	e7ed      	b.n	8014dfc <_svfprintf_r+0xb1c>
 8014e20:	6822      	ldr	r2, [r4, #0]
 8014e22:	e7f3      	b.n	8014e0c <_svfprintf_r+0xb2c>
 8014e24:	1d23      	adds	r3, r4, #4
 8014e26:	49a8      	ldr	r1, [pc, #672]	; (80150c8 <_svfprintf_r+0xde8>)
 8014e28:	aa25      	add	r2, sp, #148	; 0x94
 8014e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8014e2c:	6823      	ldr	r3, [r4, #0]
 8014e2e:	8011      	strh	r1, [r2, #0]
 8014e30:	4aa6      	ldr	r2, [pc, #664]	; (80150cc <_svfprintf_r+0xdec>)
 8014e32:	9306      	str	r3, [sp, #24]
 8014e34:	2300      	movs	r3, #0
 8014e36:	921e      	str	r2, [sp, #120]	; 0x78
 8014e38:	2278      	movs	r2, #120	; 0x78
 8014e3a:	9307      	str	r3, [sp, #28]
 8014e3c:	3302      	adds	r3, #2
 8014e3e:	431e      	orrs	r6, r3
 8014e40:	920e      	str	r2, [sp, #56]	; 0x38
 8014e42:	e7bc      	b.n	8014dbe <_svfprintf_r+0xade>
 8014e44:	1d23      	adds	r3, r4, #4
 8014e46:	9312      	str	r3, [sp, #72]	; 0x48
 8014e48:	6823      	ldr	r3, [r4, #0]
 8014e4a:	2400      	movs	r4, #0
 8014e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e4e:	231b      	movs	r3, #27
 8014e50:	aa1e      	add	r2, sp, #120	; 0x78
 8014e52:	189b      	adds	r3, r3, r2
 8014e54:	701c      	strb	r4, [r3, #0]
 8014e56:	9b08      	ldr	r3, [sp, #32]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	d00e      	beq.n	8014e7a <_svfprintf_r+0xb9a>
 8014e5c:	9a08      	ldr	r2, [sp, #32]
 8014e5e:	0021      	movs	r1, r4
 8014e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e62:	f001 ff79 	bl	8016d58 <memchr>
 8014e66:	900c      	str	r0, [sp, #48]	; 0x30
 8014e68:	42a0      	cmp	r0, r4
 8014e6a:	d100      	bne.n	8014e6e <_svfprintf_r+0xb8e>
 8014e6c:	e100      	b.n	8015070 <_svfprintf_r+0xd90>
 8014e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e70:	1a83      	subs	r3, r0, r2
 8014e72:	9308      	str	r3, [sp, #32]
 8014e74:	940c      	str	r4, [sp, #48]	; 0x30
 8014e76:	0023      	movs	r3, r4
 8014e78:	e527      	b.n	80148ca <_svfprintf_r+0x5ea>
 8014e7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e7c:	f7eb f94c 	bl	8000118 <strlen>
 8014e80:	9008      	str	r0, [sp, #32]
 8014e82:	e7f7      	b.n	8014e74 <_svfprintf_r+0xb94>
 8014e84:	2310      	movs	r3, #16
 8014e86:	431e      	orrs	r6, r3
 8014e88:	2220      	movs	r2, #32
 8014e8a:	4032      	ands	r2, r6
 8014e8c:	d00b      	beq.n	8014ea6 <_svfprintf_r+0xbc6>
 8014e8e:	2307      	movs	r3, #7
 8014e90:	3407      	adds	r4, #7
 8014e92:	439c      	bics	r4, r3
 8014e94:	0023      	movs	r3, r4
 8014e96:	3308      	adds	r3, #8
 8014e98:	9312      	str	r3, [sp, #72]	; 0x48
 8014e9a:	6823      	ldr	r3, [r4, #0]
 8014e9c:	6864      	ldr	r4, [r4, #4]
 8014e9e:	9306      	str	r3, [sp, #24]
 8014ea0:	9407      	str	r4, [sp, #28]
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	e78b      	b.n	8014dbe <_svfprintf_r+0xade>
 8014ea6:	1d23      	adds	r3, r4, #4
 8014ea8:	9312      	str	r3, [sp, #72]	; 0x48
 8014eaa:	2310      	movs	r3, #16
 8014eac:	4033      	ands	r3, r6
 8014eae:	d003      	beq.n	8014eb8 <_svfprintf_r+0xbd8>
 8014eb0:	6823      	ldr	r3, [r4, #0]
 8014eb2:	9306      	str	r3, [sp, #24]
 8014eb4:	9207      	str	r2, [sp, #28]
 8014eb6:	e7f4      	b.n	8014ea2 <_svfprintf_r+0xbc2>
 8014eb8:	2240      	movs	r2, #64	; 0x40
 8014eba:	4032      	ands	r2, r6
 8014ebc:	d004      	beq.n	8014ec8 <_svfprintf_r+0xbe8>
 8014ebe:	6822      	ldr	r2, [r4, #0]
 8014ec0:	b292      	uxth	r2, r2
 8014ec2:	9206      	str	r2, [sp, #24]
 8014ec4:	9307      	str	r3, [sp, #28]
 8014ec6:	e7ec      	b.n	8014ea2 <_svfprintf_r+0xbc2>
 8014ec8:	2380      	movs	r3, #128	; 0x80
 8014eca:	009b      	lsls	r3, r3, #2
 8014ecc:	4033      	ands	r3, r6
 8014ece:	d002      	beq.n	8014ed6 <_svfprintf_r+0xbf6>
 8014ed0:	6823      	ldr	r3, [r4, #0]
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	e7ed      	b.n	8014eb2 <_svfprintf_r+0xbd2>
 8014ed6:	6822      	ldr	r2, [r4, #0]
 8014ed8:	e7f3      	b.n	8014ec2 <_svfprintf_r+0xbe2>
 8014eda:	4b7c      	ldr	r3, [pc, #496]	; (80150cc <_svfprintf_r+0xdec>)
 8014edc:	f7ff fad9 	bl	8014492 <_svfprintf_r+0x1b2>
 8014ee0:	1d23      	adds	r3, r4, #4
 8014ee2:	9312      	str	r3, [sp, #72]	; 0x48
 8014ee4:	2310      	movs	r3, #16
 8014ee6:	4033      	ands	r3, r6
 8014ee8:	d004      	beq.n	8014ef4 <_svfprintf_r+0xc14>
 8014eea:	6823      	ldr	r3, [r4, #0]
 8014eec:	9306      	str	r3, [sp, #24]
 8014eee:	9207      	str	r2, [sp, #28]
 8014ef0:	f7ff fadf 	bl	80144b2 <_svfprintf_r+0x1d2>
 8014ef4:	2240      	movs	r2, #64	; 0x40
 8014ef6:	4032      	ands	r2, r6
 8014ef8:	d005      	beq.n	8014f06 <_svfprintf_r+0xc26>
 8014efa:	6822      	ldr	r2, [r4, #0]
 8014efc:	b292      	uxth	r2, r2
 8014efe:	9206      	str	r2, [sp, #24]
 8014f00:	9307      	str	r3, [sp, #28]
 8014f02:	f7ff fad6 	bl	80144b2 <_svfprintf_r+0x1d2>
 8014f06:	2380      	movs	r3, #128	; 0x80
 8014f08:	009b      	lsls	r3, r3, #2
 8014f0a:	4033      	ands	r3, r6
 8014f0c:	d002      	beq.n	8014f14 <_svfprintf_r+0xc34>
 8014f0e:	6823      	ldr	r3, [r4, #0]
 8014f10:	b2db      	uxtb	r3, r3
 8014f12:	e7eb      	b.n	8014eec <_svfprintf_r+0xc0c>
 8014f14:	6822      	ldr	r2, [r4, #0]
 8014f16:	e7f2      	b.n	8014efe <_svfprintf_r+0xc1e>
 8014f18:	0032      	movs	r2, r6
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	e759      	b.n	8014dd2 <_svfprintf_r+0xaf2>
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d100      	bne.n	8014f24 <_svfprintf_r+0xc44>
 8014f22:	e476      	b.n	8014812 <_svfprintf_r+0x532>
 8014f24:	2b02      	cmp	r3, #2
 8014f26:	d06b      	beq.n	8015000 <_svfprintf_r+0xd20>
 8014f28:	2507      	movs	r5, #7
 8014f2a:	ab58      	add	r3, sp, #352	; 0x160
 8014f2c:	1e5a      	subs	r2, r3, #1
 8014f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8014f30:	9a06      	ldr	r2, [sp, #24]
 8014f32:	1e59      	subs	r1, r3, #1
 8014f34:	402a      	ands	r2, r5
 8014f36:	3230      	adds	r2, #48	; 0x30
 8014f38:	700a      	strb	r2, [r1, #0]
 8014f3a:	9907      	ldr	r1, [sp, #28]
 8014f3c:	074c      	lsls	r4, r1, #29
 8014f3e:	9906      	ldr	r1, [sp, #24]
 8014f40:	08c8      	lsrs	r0, r1, #3
 8014f42:	9907      	ldr	r1, [sp, #28]
 8014f44:	4304      	orrs	r4, r0
 8014f46:	08c9      	lsrs	r1, r1, #3
 8014f48:	9107      	str	r1, [sp, #28]
 8014f4a:	0021      	movs	r1, r4
 8014f4c:	9807      	ldr	r0, [sp, #28]
 8014f4e:	9406      	str	r4, [sp, #24]
 8014f50:	4301      	orrs	r1, r0
 8014f52:	d111      	bne.n	8014f78 <_svfprintf_r+0xc98>
 8014f54:	07f1      	lsls	r1, r6, #31
 8014f56:	d502      	bpl.n	8014f5e <_svfprintf_r+0xc7e>
 8014f58:	3b02      	subs	r3, #2
 8014f5a:	2a30      	cmp	r2, #48	; 0x30
 8014f5c:	d173      	bne.n	8015046 <_svfprintf_r+0xd66>
 8014f5e:	9b08      	ldr	r3, [sp, #32]
 8014f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f62:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f64:	ab58      	add	r3, sp, #352	; 0x160
 8014f66:	1a9b      	subs	r3, r3, r2
 8014f68:	9308      	str	r3, [sp, #32]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8014f6e:	9310      	str	r3, [sp, #64]	; 0x40
 8014f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f72:	001d      	movs	r5, r3
 8014f74:	f7ff fb4b 	bl	801460e <_svfprintf_r+0x32e>
 8014f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f7a:	e7d7      	b.n	8014f2c <_svfprintf_r+0xc4c>
 8014f7c:	2480      	movs	r4, #128	; 0x80
 8014f7e:	2300      	movs	r3, #0
 8014f80:	00e4      	lsls	r4, r4, #3
 8014f82:	930d      	str	r3, [sp, #52]	; 0x34
 8014f84:	4034      	ands	r4, r6
 8014f86:	ab58      	add	r3, sp, #352	; 0x160
 8014f88:	3b01      	subs	r3, #1
 8014f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f8c:	220a      	movs	r2, #10
 8014f8e:	9806      	ldr	r0, [sp, #24]
 8014f90:	9907      	ldr	r1, [sp, #28]
 8014f92:	2300      	movs	r3, #0
 8014f94:	f7eb faca 	bl	800052c <__aeabi_uldivmod>
 8014f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f9a:	3230      	adds	r2, #48	; 0x30
 8014f9c:	701a      	strb	r2, [r3, #0]
 8014f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8014fa4:	2c00      	cmp	r4, #0
 8014fa6:	d01d      	beq.n	8014fe4 <_svfprintf_r+0xd04>
 8014fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fac:	781b      	ldrb	r3, [r3, #0]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d118      	bne.n	8014fe4 <_svfprintf_r+0xd04>
 8014fb2:	2aff      	cmp	r2, #255	; 0xff
 8014fb4:	d016      	beq.n	8014fe4 <_svfprintf_r+0xd04>
 8014fb6:	9b07      	ldr	r3, [sp, #28]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d102      	bne.n	8014fc2 <_svfprintf_r+0xce2>
 8014fbc:	9b06      	ldr	r3, [sp, #24]
 8014fbe:	2b09      	cmp	r3, #9
 8014fc0:	d910      	bls.n	8014fe4 <_svfprintf_r+0xd04>
 8014fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014fc6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014fc8:	1a9b      	subs	r3, r3, r2
 8014fca:	0018      	movs	r0, r3
 8014fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8014fce:	f7fe fa52 	bl	8013476 <strncpy>
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fd6:	920d      	str	r2, [sp, #52]	; 0x34
 8014fd8:	785b      	ldrb	r3, [r3, #1]
 8014fda:	1e5a      	subs	r2, r3, #1
 8014fdc:	4193      	sbcs	r3, r2
 8014fde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014fe0:	18d3      	adds	r3, r2, r3
 8014fe2:	9313      	str	r3, [sp, #76]	; 0x4c
 8014fe4:	220a      	movs	r2, #10
 8014fe6:	9806      	ldr	r0, [sp, #24]
 8014fe8:	9907      	ldr	r1, [sp, #28]
 8014fea:	2300      	movs	r3, #0
 8014fec:	f7eb fa9e 	bl	800052c <__aeabi_uldivmod>
 8014ff0:	9006      	str	r0, [sp, #24]
 8014ff2:	9107      	str	r1, [sp, #28]
 8014ff4:	9b06      	ldr	r3, [sp, #24]
 8014ff6:	9a07      	ldr	r2, [sp, #28]
 8014ff8:	4313      	orrs	r3, r2
 8014ffa:	d0b0      	beq.n	8014f5e <_svfprintf_r+0xc7e>
 8014ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ffe:	e7c3      	b.n	8014f88 <_svfprintf_r+0xca8>
 8015000:	200f      	movs	r0, #15
 8015002:	ab58      	add	r3, sp, #352	; 0x160
 8015004:	9309      	str	r3, [sp, #36]	; 0x24
 8015006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015008:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801500a:	3b01      	subs	r3, #1
 801500c:	9309      	str	r3, [sp, #36]	; 0x24
 801500e:	9b06      	ldr	r3, [sp, #24]
 8015010:	4003      	ands	r3, r0
 8015012:	5cd3      	ldrb	r3, [r2, r3]
 8015014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015016:	7013      	strb	r3, [r2, #0]
 8015018:	9b07      	ldr	r3, [sp, #28]
 801501a:	0719      	lsls	r1, r3, #28
 801501c:	9b06      	ldr	r3, [sp, #24]
 801501e:	091a      	lsrs	r2, r3, #4
 8015020:	9b07      	ldr	r3, [sp, #28]
 8015022:	4311      	orrs	r1, r2
 8015024:	091b      	lsrs	r3, r3, #4
 8015026:	9307      	str	r3, [sp, #28]
 8015028:	000b      	movs	r3, r1
 801502a:	9a07      	ldr	r2, [sp, #28]
 801502c:	9106      	str	r1, [sp, #24]
 801502e:	4313      	orrs	r3, r2
 8015030:	d1e9      	bne.n	8015006 <_svfprintf_r+0xd26>
 8015032:	e794      	b.n	8014f5e <_svfprintf_r+0xc7e>
 8015034:	a958      	add	r1, sp, #352	; 0x160
 8015036:	9109      	str	r1, [sp, #36]	; 0x24
 8015038:	2b00      	cmp	r3, #0
 801503a:	d190      	bne.n	8014f5e <_svfprintf_r+0xc7e>
 801503c:	07d3      	lsls	r3, r2, #31
 801503e:	d58e      	bpl.n	8014f5e <_svfprintf_r+0xc7e>
 8015040:	23e7      	movs	r3, #231	; 0xe7
 8015042:	aa1e      	add	r2, sp, #120	; 0x78
 8015044:	189b      	adds	r3, r3, r2
 8015046:	2230      	movs	r2, #48	; 0x30
 8015048:	f7ff fbf0 	bl	801482c <_svfprintf_r+0x54c>
 801504c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801504e:	2b00      	cmp	r3, #0
 8015050:	d100      	bne.n	8015054 <_svfprintf_r+0xd74>
 8015052:	e38a      	b.n	801576a <_svfprintf_r+0x148a>
 8015054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015056:	ab3f      	add	r3, sp, #252	; 0xfc
 8015058:	701a      	strb	r2, [r3, #0]
 801505a:	221b      	movs	r2, #27
 801505c:	2000      	movs	r0, #0
 801505e:	a91e      	add	r1, sp, #120	; 0x78
 8015060:	1852      	adds	r2, r2, r1
 8015062:	7010      	strb	r0, [r2, #0]
 8015064:	9412      	str	r4, [sp, #72]	; 0x48
 8015066:	f7ff faca 	bl	80145fe <_svfprintf_r+0x31e>
 801506a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801506c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801506e:	e592      	b.n	8014b96 <_svfprintf_r+0x8b6>
 8015070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015072:	e42a      	b.n	80148ca <_svfprintf_r+0x5ea>
 8015074:	2010      	movs	r0, #16
 8015076:	1812      	adds	r2, r2, r0
 8015078:	6078      	str	r0, [r7, #4]
 801507a:	922e      	str	r2, [sp, #184]	; 0xb8
 801507c:	932d      	str	r3, [sp, #180]	; 0xb4
 801507e:	2b07      	cmp	r3, #7
 8015080:	dd08      	ble.n	8015094 <_svfprintf_r+0xdb4>
 8015082:	aa2c      	add	r2, sp, #176	; 0xb0
 8015084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015086:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015088:	f002 fa7e 	bl	8017588 <__ssprint_r>
 801508c:	2800      	cmp	r0, #0
 801508e:	d000      	beq.n	8015092 <_svfprintf_r+0xdb2>
 8015090:	e34a      	b.n	8015728 <_svfprintf_r+0x1448>
 8015092:	a92f      	add	r1, sp, #188	; 0xbc
 8015094:	3c10      	subs	r4, #16
 8015096:	000f      	movs	r7, r1
 8015098:	f7ff fad8 	bl	801464c <_svfprintf_r+0x36c>
 801509c:	2010      	movs	r0, #16
 801509e:	1812      	adds	r2, r2, r0
 80150a0:	6078      	str	r0, [r7, #4]
 80150a2:	922e      	str	r2, [sp, #184]	; 0xb8
 80150a4:	932d      	str	r3, [sp, #180]	; 0xb4
 80150a6:	2b07      	cmp	r3, #7
 80150a8:	dd08      	ble.n	80150bc <_svfprintf_r+0xddc>
 80150aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80150ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150b0:	f002 fa6a 	bl	8017588 <__ssprint_r>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	d000      	beq.n	80150ba <_svfprintf_r+0xdda>
 80150b8:	e336      	b.n	8015728 <_svfprintf_r+0x1448>
 80150ba:	a92f      	add	r1, sp, #188	; 0xbc
 80150bc:	3c10      	subs	r4, #16
 80150be:	000f      	movs	r7, r1
 80150c0:	f7ff fb24 	bl	801470c <_svfprintf_r+0x42c>
 80150c4:	fffffbff 	.word	0xfffffbff
 80150c8:	00007830 	.word	0x00007830
 80150cc:	0801a6d0 	.word	0x0801a6d0
 80150d0:	2010      	movs	r0, #16
 80150d2:	1812      	adds	r2, r2, r0
 80150d4:	6078      	str	r0, [r7, #4]
 80150d6:	922e      	str	r2, [sp, #184]	; 0xb8
 80150d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80150da:	2b07      	cmp	r3, #7
 80150dc:	dd08      	ble.n	80150f0 <_svfprintf_r+0xe10>
 80150de:	aa2c      	add	r2, sp, #176	; 0xb0
 80150e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150e4:	f002 fa50 	bl	8017588 <__ssprint_r>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d000      	beq.n	80150ee <_svfprintf_r+0xe0e>
 80150ec:	e31c      	b.n	8015728 <_svfprintf_r+0x1448>
 80150ee:	a92f      	add	r1, sp, #188	; 0xbc
 80150f0:	3c10      	subs	r4, #16
 80150f2:	000f      	movs	r7, r1
 80150f4:	f7ff fb2c 	bl	8014750 <_svfprintf_r+0x470>
 80150f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150fa:	2b65      	cmp	r3, #101	; 0x65
 80150fc:	dc00      	bgt.n	8015100 <_svfprintf_r+0xe20>
 80150fe:	e259      	b.n	80155b4 <_svfprintf_r+0x12d4>
 8015100:	2200      	movs	r2, #0
 8015102:	2300      	movs	r3, #0
 8015104:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015106:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015108:	f7eb f9a8 	bl	800045c <__aeabi_dcmpeq>
 801510c:	2800      	cmp	r0, #0
 801510e:	d07c      	beq.n	801520a <_svfprintf_r+0xf2a>
 8015110:	4b81      	ldr	r3, [pc, #516]	; (8015318 <_svfprintf_r+0x1038>)
 8015112:	603b      	str	r3, [r7, #0]
 8015114:	2301      	movs	r3, #1
 8015116:	607b      	str	r3, [r7, #4]
 8015118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801511a:	3708      	adds	r7, #8
 801511c:	3301      	adds	r3, #1
 801511e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015120:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015122:	9308      	str	r3, [sp, #32]
 8015124:	3301      	adds	r3, #1
 8015126:	932d      	str	r3, [sp, #180]	; 0xb4
 8015128:	2b07      	cmp	r3, #7
 801512a:	dd08      	ble.n	801513e <_svfprintf_r+0xe5e>
 801512c:	aa2c      	add	r2, sp, #176	; 0xb0
 801512e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015132:	f002 fa29 	bl	8017588 <__ssprint_r>
 8015136:	2800      	cmp	r0, #0
 8015138:	d000      	beq.n	801513c <_svfprintf_r+0xe5c>
 801513a:	e2f5      	b.n	8015728 <_svfprintf_r+0x1448>
 801513c:	af2f      	add	r7, sp, #188	; 0xbc
 801513e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015142:	4293      	cmp	r3, r2
 8015144:	db01      	blt.n	801514a <_svfprintf_r+0xe6a>
 8015146:	07f3      	lsls	r3, r6, #31
 8015148:	d51d      	bpl.n	8015186 <_svfprintf_r+0xea6>
 801514a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801514c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801514e:	4694      	mov	ip, r2
 8015150:	603b      	str	r3, [r7, #0]
 8015152:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015154:	607b      	str	r3, [r7, #4]
 8015156:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015158:	3708      	adds	r7, #8
 801515a:	4463      	add	r3, ip
 801515c:	932e      	str	r3, [sp, #184]	; 0xb8
 801515e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015160:	9308      	str	r3, [sp, #32]
 8015162:	3301      	adds	r3, #1
 8015164:	932d      	str	r3, [sp, #180]	; 0xb4
 8015166:	2b07      	cmp	r3, #7
 8015168:	dd08      	ble.n	801517c <_svfprintf_r+0xe9c>
 801516a:	aa2c      	add	r2, sp, #176	; 0xb0
 801516c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801516e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015170:	f002 fa0a 	bl	8017588 <__ssprint_r>
 8015174:	2800      	cmp	r0, #0
 8015176:	d000      	beq.n	801517a <_svfprintf_r+0xe9a>
 8015178:	e2d6      	b.n	8015728 <_svfprintf_r+0x1448>
 801517a:	af2f      	add	r7, sp, #188	; 0xbc
 801517c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801517e:	2510      	movs	r5, #16
 8015180:	1e5c      	subs	r4, r3, #1
 8015182:	2c00      	cmp	r4, #0
 8015184:	dc2f      	bgt.n	80151e6 <_svfprintf_r+0xf06>
 8015186:	0773      	lsls	r3, r6, #29
 8015188:	d500      	bpl.n	801518c <_svfprintf_r+0xeac>
 801518a:	e2af      	b.n	80156ec <_svfprintf_r+0x140c>
 801518c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801518e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015190:	4293      	cmp	r3, r2
 8015192:	da00      	bge.n	8015196 <_svfprintf_r+0xeb6>
 8015194:	0013      	movs	r3, r2
 8015196:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015198:	18d3      	adds	r3, r2, r3
 801519a:	9315      	str	r3, [sp, #84]	; 0x54
 801519c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801519e:	9308      	str	r3, [sp, #32]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d007      	beq.n	80151b4 <_svfprintf_r+0xed4>
 80151a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80151a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151aa:	f002 f9ed 	bl	8017588 <__ssprint_r>
 80151ae:	2800      	cmp	r0, #0
 80151b0:	d000      	beq.n	80151b4 <_svfprintf_r+0xed4>
 80151b2:	e2b9      	b.n	8015728 <_svfprintf_r+0x1448>
 80151b4:	2300      	movs	r3, #0
 80151b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80151b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d000      	beq.n	80151c0 <_svfprintf_r+0xee0>
 80151be:	e2cf      	b.n	8015760 <_svfprintf_r+0x1480>
 80151c0:	af2f      	add	r7, sp, #188	; 0xbc
 80151c2:	e5d6      	b.n	8014d72 <_svfprintf_r+0xa92>
 80151c4:	3210      	adds	r2, #16
 80151c6:	607d      	str	r5, [r7, #4]
 80151c8:	922e      	str	r2, [sp, #184]	; 0xb8
 80151ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80151cc:	2b07      	cmp	r3, #7
 80151ce:	dd08      	ble.n	80151e2 <_svfprintf_r+0xf02>
 80151d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80151d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151d6:	f002 f9d7 	bl	8017588 <__ssprint_r>
 80151da:	2800      	cmp	r0, #0
 80151dc:	d000      	beq.n	80151e0 <_svfprintf_r+0xf00>
 80151de:	e2a3      	b.n	8015728 <_svfprintf_r+0x1448>
 80151e0:	a92f      	add	r1, sp, #188	; 0xbc
 80151e2:	000f      	movs	r7, r1
 80151e4:	3c10      	subs	r4, #16
 80151e6:	0039      	movs	r1, r7
 80151e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151ea:	484c      	ldr	r0, [pc, #304]	; (801531c <_svfprintf_r+0x103c>)
 80151ec:	9308      	str	r3, [sp, #32]
 80151ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80151f0:	3301      	adds	r3, #1
 80151f2:	3108      	adds	r1, #8
 80151f4:	6038      	str	r0, [r7, #0]
 80151f6:	2c10      	cmp	r4, #16
 80151f8:	dce4      	bgt.n	80151c4 <_svfprintf_r+0xee4>
 80151fa:	607c      	str	r4, [r7, #4]
 80151fc:	18a4      	adds	r4, r4, r2
 80151fe:	942e      	str	r4, [sp, #184]	; 0xb8
 8015200:	932d      	str	r3, [sp, #180]	; 0xb4
 8015202:	000f      	movs	r7, r1
 8015204:	2b07      	cmp	r3, #7
 8015206:	ddbe      	ble.n	8015186 <_svfprintf_r+0xea6>
 8015208:	e06a      	b.n	80152e0 <_svfprintf_r+0x1000>
 801520a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801520c:	2b00      	cmp	r3, #0
 801520e:	dd00      	ble.n	8015212 <_svfprintf_r+0xf32>
 8015210:	e086      	b.n	8015320 <_svfprintf_r+0x1040>
 8015212:	4b41      	ldr	r3, [pc, #260]	; (8015318 <_svfprintf_r+0x1038>)
 8015214:	603b      	str	r3, [r7, #0]
 8015216:	2301      	movs	r3, #1
 8015218:	607b      	str	r3, [r7, #4]
 801521a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801521c:	3708      	adds	r7, #8
 801521e:	3301      	adds	r3, #1
 8015220:	932e      	str	r3, [sp, #184]	; 0xb8
 8015222:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015224:	9308      	str	r3, [sp, #32]
 8015226:	3301      	adds	r3, #1
 8015228:	932d      	str	r3, [sp, #180]	; 0xb4
 801522a:	2b07      	cmp	r3, #7
 801522c:	dd08      	ble.n	8015240 <_svfprintf_r+0xf60>
 801522e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015232:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015234:	f002 f9a8 	bl	8017588 <__ssprint_r>
 8015238:	2800      	cmp	r0, #0
 801523a:	d000      	beq.n	801523e <_svfprintf_r+0xf5e>
 801523c:	e274      	b.n	8015728 <_svfprintf_r+0x1448>
 801523e:	af2f      	add	r7, sp, #188	; 0xbc
 8015240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015242:	2b00      	cmp	r3, #0
 8015244:	d104      	bne.n	8015250 <_svfprintf_r+0xf70>
 8015246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015248:	2b00      	cmp	r3, #0
 801524a:	d101      	bne.n	8015250 <_svfprintf_r+0xf70>
 801524c:	07f3      	lsls	r3, r6, #31
 801524e:	d59a      	bpl.n	8015186 <_svfprintf_r+0xea6>
 8015250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015252:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015254:	4694      	mov	ip, r2
 8015256:	603b      	str	r3, [r7, #0]
 8015258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801525a:	607b      	str	r3, [r7, #4]
 801525c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801525e:	3708      	adds	r7, #8
 8015260:	4463      	add	r3, ip
 8015262:	932e      	str	r3, [sp, #184]	; 0xb8
 8015264:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015266:	9308      	str	r3, [sp, #32]
 8015268:	3301      	adds	r3, #1
 801526a:	932d      	str	r3, [sp, #180]	; 0xb4
 801526c:	2b07      	cmp	r3, #7
 801526e:	dd08      	ble.n	8015282 <_svfprintf_r+0xfa2>
 8015270:	aa2c      	add	r2, sp, #176	; 0xb0
 8015272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015274:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015276:	f002 f987 	bl	8017588 <__ssprint_r>
 801527a:	2800      	cmp	r0, #0
 801527c:	d000      	beq.n	8015280 <_svfprintf_r+0xfa0>
 801527e:	e253      	b.n	8015728 <_svfprintf_r+0x1448>
 8015280:	af2f      	add	r7, sp, #188	; 0xbc
 8015282:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015284:	2c00      	cmp	r4, #0
 8015286:	da1a      	bge.n	80152be <_svfprintf_r+0xfde>
 8015288:	0039      	movs	r1, r7
 801528a:	2510      	movs	r5, #16
 801528c:	4264      	negs	r4, r4
 801528e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015290:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015292:	9308      	str	r3, [sp, #32]
 8015294:	1c5a      	adds	r2, r3, #1
 8015296:	4b21      	ldr	r3, [pc, #132]	; (801531c <_svfprintf_r+0x103c>)
 8015298:	3708      	adds	r7, #8
 801529a:	600b      	str	r3, [r1, #0]
 801529c:	2c10      	cmp	r4, #16
 801529e:	dc29      	bgt.n	80152f4 <_svfprintf_r+0x1014>
 80152a0:	604c      	str	r4, [r1, #4]
 80152a2:	1824      	adds	r4, r4, r0
 80152a4:	942e      	str	r4, [sp, #184]	; 0xb8
 80152a6:	922d      	str	r2, [sp, #180]	; 0xb4
 80152a8:	2a07      	cmp	r2, #7
 80152aa:	dd08      	ble.n	80152be <_svfprintf_r+0xfde>
 80152ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80152ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152b2:	f002 f969 	bl	8017588 <__ssprint_r>
 80152b6:	2800      	cmp	r0, #0
 80152b8:	d000      	beq.n	80152bc <_svfprintf_r+0xfdc>
 80152ba:	e235      	b.n	8015728 <_svfprintf_r+0x1448>
 80152bc:	af2f      	add	r7, sp, #188	; 0xbc
 80152be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80152c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c2:	468c      	mov	ip, r1
 80152c4:	603b      	str	r3, [r7, #0]
 80152c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152c8:	607b      	str	r3, [r7, #4]
 80152ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152cc:	4463      	add	r3, ip
 80152ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80152d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152d2:	1c5a      	adds	r2, r3, #1
 80152d4:	9308      	str	r3, [sp, #32]
 80152d6:	922d      	str	r2, [sp, #180]	; 0xb4
 80152d8:	2a07      	cmp	r2, #7
 80152da:	dc01      	bgt.n	80152e0 <_svfprintf_r+0x1000>
 80152dc:	f7ff fa6c 	bl	80147b8 <_svfprintf_r+0x4d8>
 80152e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80152e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152e6:	f002 f94f 	bl	8017588 <__ssprint_r>
 80152ea:	2800      	cmp	r0, #0
 80152ec:	d000      	beq.n	80152f0 <_svfprintf_r+0x1010>
 80152ee:	e21b      	b.n	8015728 <_svfprintf_r+0x1448>
 80152f0:	af2f      	add	r7, sp, #188	; 0xbc
 80152f2:	e748      	b.n	8015186 <_svfprintf_r+0xea6>
 80152f4:	3010      	adds	r0, #16
 80152f6:	604d      	str	r5, [r1, #4]
 80152f8:	902e      	str	r0, [sp, #184]	; 0xb8
 80152fa:	922d      	str	r2, [sp, #180]	; 0xb4
 80152fc:	2a07      	cmp	r2, #7
 80152fe:	dd08      	ble.n	8015312 <_svfprintf_r+0x1032>
 8015300:	aa2c      	add	r2, sp, #176	; 0xb0
 8015302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015304:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015306:	f002 f93f 	bl	8017588 <__ssprint_r>
 801530a:	2800      	cmp	r0, #0
 801530c:	d000      	beq.n	8015310 <_svfprintf_r+0x1030>
 801530e:	e20b      	b.n	8015728 <_svfprintf_r+0x1448>
 8015310:	af2f      	add	r7, sp, #188	; 0xbc
 8015312:	3c10      	subs	r4, #16
 8015314:	0039      	movs	r1, r7
 8015316:	e7ba      	b.n	801528e <_svfprintf_r+0xfae>
 8015318:	0801a6f2 	.word	0x0801a6f2
 801531c:	0801a704 	.word	0x0801a704
 8015320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015322:	002c      	movs	r4, r5
 8015324:	429d      	cmp	r5, r3
 8015326:	dd00      	ble.n	801532a <_svfprintf_r+0x104a>
 8015328:	001c      	movs	r4, r3
 801532a:	2c00      	cmp	r4, #0
 801532c:	dd15      	ble.n	801535a <_svfprintf_r+0x107a>
 801532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015330:	607c      	str	r4, [r7, #4]
 8015332:	603b      	str	r3, [r7, #0]
 8015334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015336:	3708      	adds	r7, #8
 8015338:	18e3      	adds	r3, r4, r3
 801533a:	932e      	str	r3, [sp, #184]	; 0xb8
 801533c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801533e:	9308      	str	r3, [sp, #32]
 8015340:	3301      	adds	r3, #1
 8015342:	932d      	str	r3, [sp, #180]	; 0xb4
 8015344:	2b07      	cmp	r3, #7
 8015346:	dd08      	ble.n	801535a <_svfprintf_r+0x107a>
 8015348:	aa2c      	add	r2, sp, #176	; 0xb0
 801534a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801534e:	f002 f91b 	bl	8017588 <__ssprint_r>
 8015352:	2800      	cmp	r0, #0
 8015354:	d000      	beq.n	8015358 <_svfprintf_r+0x1078>
 8015356:	e1e7      	b.n	8015728 <_svfprintf_r+0x1448>
 8015358:	af2f      	add	r7, sp, #188	; 0xbc
 801535a:	43e3      	mvns	r3, r4
 801535c:	17db      	asrs	r3, r3, #31
 801535e:	401c      	ands	r4, r3
 8015360:	1b2c      	subs	r4, r5, r4
 8015362:	2c00      	cmp	r4, #0
 8015364:	dd1a      	ble.n	801539c <_svfprintf_r+0x10bc>
 8015366:	0039      	movs	r1, r7
 8015368:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801536a:	48d4      	ldr	r0, [pc, #848]	; (80156bc <_svfprintf_r+0x13dc>)
 801536c:	9308      	str	r3, [sp, #32]
 801536e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015370:	3301      	adds	r3, #1
 8015372:	3108      	adds	r1, #8
 8015374:	6038      	str	r0, [r7, #0]
 8015376:	2c10      	cmp	r4, #16
 8015378:	dd00      	ble.n	801537c <_svfprintf_r+0x109c>
 801537a:	e089      	b.n	8015490 <_svfprintf_r+0x11b0>
 801537c:	607c      	str	r4, [r7, #4]
 801537e:	18a4      	adds	r4, r4, r2
 8015380:	942e      	str	r4, [sp, #184]	; 0xb8
 8015382:	932d      	str	r3, [sp, #180]	; 0xb4
 8015384:	000f      	movs	r7, r1
 8015386:	2b07      	cmp	r3, #7
 8015388:	dd08      	ble.n	801539c <_svfprintf_r+0x10bc>
 801538a:	aa2c      	add	r2, sp, #176	; 0xb0
 801538c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801538e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015390:	f002 f8fa 	bl	8017588 <__ssprint_r>
 8015394:	2800      	cmp	r0, #0
 8015396:	d000      	beq.n	801539a <_svfprintf_r+0x10ba>
 8015398:	e1c6      	b.n	8015728 <_svfprintf_r+0x1448>
 801539a:	af2f      	add	r7, sp, #188	; 0xbc
 801539c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801539e:	195d      	adds	r5, r3, r5
 80153a0:	0573      	lsls	r3, r6, #21
 80153a2:	d50d      	bpl.n	80153c0 <_svfprintf_r+0x10e0>
 80153a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d000      	beq.n	80153ac <_svfprintf_r+0x10cc>
 80153aa:	e084      	b.n	80154b6 <_svfprintf_r+0x11d6>
 80153ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d000      	beq.n	80153b4 <_svfprintf_r+0x10d4>
 80153b2:	e083      	b.n	80154bc <_svfprintf_r+0x11dc>
 80153b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153b8:	189b      	adds	r3, r3, r2
 80153ba:	429d      	cmp	r5, r3
 80153bc:	d900      	bls.n	80153c0 <_svfprintf_r+0x10e0>
 80153be:	001d      	movs	r5, r3
 80153c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80153c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153c4:	4293      	cmp	r3, r2
 80153c6:	db01      	blt.n	80153cc <_svfprintf_r+0x10ec>
 80153c8:	07f3      	lsls	r3, r6, #31
 80153ca:	d518      	bpl.n	80153fe <_svfprintf_r+0x111e>
 80153cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153d0:	4694      	mov	ip, r2
 80153d2:	603b      	str	r3, [r7, #0]
 80153d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153d6:	607b      	str	r3, [r7, #4]
 80153d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153da:	3708      	adds	r7, #8
 80153dc:	4463      	add	r3, ip
 80153de:	932e      	str	r3, [sp, #184]	; 0xb8
 80153e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153e2:	9308      	str	r3, [sp, #32]
 80153e4:	3301      	adds	r3, #1
 80153e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80153e8:	2b07      	cmp	r3, #7
 80153ea:	dd08      	ble.n	80153fe <_svfprintf_r+0x111e>
 80153ec:	aa2c      	add	r2, sp, #176	; 0xb0
 80153ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153f2:	f002 f8c9 	bl	8017588 <__ssprint_r>
 80153f6:	2800      	cmp	r0, #0
 80153f8:	d000      	beq.n	80153fc <_svfprintf_r+0x111c>
 80153fa:	e195      	b.n	8015728 <_svfprintf_r+0x1448>
 80153fc:	af2f      	add	r7, sp, #188	; 0xbc
 80153fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015402:	4694      	mov	ip, r2
 8015404:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015406:	4463      	add	r3, ip
 8015408:	1b5b      	subs	r3, r3, r5
 801540a:	1a54      	subs	r4, r2, r1
 801540c:	429c      	cmp	r4, r3
 801540e:	dd00      	ble.n	8015412 <_svfprintf_r+0x1132>
 8015410:	001c      	movs	r4, r3
 8015412:	2c00      	cmp	r4, #0
 8015414:	dd14      	ble.n	8015440 <_svfprintf_r+0x1160>
 8015416:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015418:	603d      	str	r5, [r7, #0]
 801541a:	18e3      	adds	r3, r4, r3
 801541c:	932e      	str	r3, [sp, #184]	; 0xb8
 801541e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015420:	607c      	str	r4, [r7, #4]
 8015422:	9308      	str	r3, [sp, #32]
 8015424:	3301      	adds	r3, #1
 8015426:	932d      	str	r3, [sp, #180]	; 0xb4
 8015428:	3708      	adds	r7, #8
 801542a:	2b07      	cmp	r3, #7
 801542c:	dd08      	ble.n	8015440 <_svfprintf_r+0x1160>
 801542e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015432:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015434:	f002 f8a8 	bl	8017588 <__ssprint_r>
 8015438:	2800      	cmp	r0, #0
 801543a:	d000      	beq.n	801543e <_svfprintf_r+0x115e>
 801543c:	e174      	b.n	8015728 <_svfprintf_r+0x1448>
 801543e:	af2f      	add	r7, sp, #188	; 0xbc
 8015440:	43e3      	mvns	r3, r4
 8015442:	17db      	asrs	r3, r3, #31
 8015444:	401c      	ands	r4, r3
 8015446:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801544a:	2510      	movs	r5, #16
 801544c:	1a9b      	subs	r3, r3, r2
 801544e:	1b1c      	subs	r4, r3, r4
 8015450:	2c00      	cmp	r4, #0
 8015452:	dc00      	bgt.n	8015456 <_svfprintf_r+0x1176>
 8015454:	e697      	b.n	8015186 <_svfprintf_r+0xea6>
 8015456:	0039      	movs	r1, r7
 8015458:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801545a:	4898      	ldr	r0, [pc, #608]	; (80156bc <_svfprintf_r+0x13dc>)
 801545c:	9308      	str	r3, [sp, #32]
 801545e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015460:	3301      	adds	r3, #1
 8015462:	3108      	adds	r1, #8
 8015464:	6038      	str	r0, [r7, #0]
 8015466:	2c10      	cmp	r4, #16
 8015468:	dc00      	bgt.n	801546c <_svfprintf_r+0x118c>
 801546a:	e6c6      	b.n	80151fa <_svfprintf_r+0xf1a>
 801546c:	3210      	adds	r2, #16
 801546e:	607d      	str	r5, [r7, #4]
 8015470:	922e      	str	r2, [sp, #184]	; 0xb8
 8015472:	932d      	str	r3, [sp, #180]	; 0xb4
 8015474:	2b07      	cmp	r3, #7
 8015476:	dd08      	ble.n	801548a <_svfprintf_r+0x11aa>
 8015478:	aa2c      	add	r2, sp, #176	; 0xb0
 801547a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801547c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801547e:	f002 f883 	bl	8017588 <__ssprint_r>
 8015482:	2800      	cmp	r0, #0
 8015484:	d000      	beq.n	8015488 <_svfprintf_r+0x11a8>
 8015486:	e14f      	b.n	8015728 <_svfprintf_r+0x1448>
 8015488:	a92f      	add	r1, sp, #188	; 0xbc
 801548a:	3c10      	subs	r4, #16
 801548c:	000f      	movs	r7, r1
 801548e:	e7e2      	b.n	8015456 <_svfprintf_r+0x1176>
 8015490:	2010      	movs	r0, #16
 8015492:	1812      	adds	r2, r2, r0
 8015494:	6078      	str	r0, [r7, #4]
 8015496:	922e      	str	r2, [sp, #184]	; 0xb8
 8015498:	932d      	str	r3, [sp, #180]	; 0xb4
 801549a:	2b07      	cmp	r3, #7
 801549c:	dd08      	ble.n	80154b0 <_svfprintf_r+0x11d0>
 801549e:	aa2c      	add	r2, sp, #176	; 0xb0
 80154a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154a4:	f002 f870 	bl	8017588 <__ssprint_r>
 80154a8:	2800      	cmp	r0, #0
 80154aa:	d000      	beq.n	80154ae <_svfprintf_r+0x11ce>
 80154ac:	e13c      	b.n	8015728 <_svfprintf_r+0x1448>
 80154ae:	a92f      	add	r1, sp, #188	; 0xbc
 80154b0:	3c10      	subs	r4, #16
 80154b2:	000f      	movs	r7, r1
 80154b4:	e757      	b.n	8015366 <_svfprintf_r+0x1086>
 80154b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d061      	beq.n	8015580 <_svfprintf_r+0x12a0>
 80154bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154be:	3b01      	subs	r3, #1
 80154c0:	9310      	str	r3, [sp, #64]	; 0x40
 80154c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80154c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80154c6:	4694      	mov	ip, r2
 80154c8:	603b      	str	r3, [r7, #0]
 80154ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154cc:	607b      	str	r3, [r7, #4]
 80154ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154d0:	3708      	adds	r7, #8
 80154d2:	4463      	add	r3, ip
 80154d4:	932e      	str	r3, [sp, #184]	; 0xb8
 80154d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154d8:	9308      	str	r3, [sp, #32]
 80154da:	3301      	adds	r3, #1
 80154dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80154de:	2b07      	cmp	r3, #7
 80154e0:	dd08      	ble.n	80154f4 <_svfprintf_r+0x1214>
 80154e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80154e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154e8:	f002 f84e 	bl	8017588 <__ssprint_r>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	d000      	beq.n	80154f2 <_svfprintf_r+0x1212>
 80154f0:	e11a      	b.n	8015728 <_svfprintf_r+0x1448>
 80154f2:	af2f      	add	r7, sp, #188	; 0xbc
 80154f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154f8:	189b      	adds	r3, r3, r2
 80154fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154fc:	1b5b      	subs	r3, r3, r5
 80154fe:	7814      	ldrb	r4, [r2, #0]
 8015500:	429c      	cmp	r4, r3
 8015502:	dd00      	ble.n	8015506 <_svfprintf_r+0x1226>
 8015504:	001c      	movs	r4, r3
 8015506:	2c00      	cmp	r4, #0
 8015508:	dd14      	ble.n	8015534 <_svfprintf_r+0x1254>
 801550a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801550c:	603d      	str	r5, [r7, #0]
 801550e:	18e3      	adds	r3, r4, r3
 8015510:	932e      	str	r3, [sp, #184]	; 0xb8
 8015512:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015514:	607c      	str	r4, [r7, #4]
 8015516:	9308      	str	r3, [sp, #32]
 8015518:	3301      	adds	r3, #1
 801551a:	932d      	str	r3, [sp, #180]	; 0xb4
 801551c:	3708      	adds	r7, #8
 801551e:	2b07      	cmp	r3, #7
 8015520:	dd08      	ble.n	8015534 <_svfprintf_r+0x1254>
 8015522:	aa2c      	add	r2, sp, #176	; 0xb0
 8015524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015526:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015528:	f002 f82e 	bl	8017588 <__ssprint_r>
 801552c:	2800      	cmp	r0, #0
 801552e:	d000      	beq.n	8015532 <_svfprintf_r+0x1252>
 8015530:	e0fa      	b.n	8015728 <_svfprintf_r+0x1448>
 8015532:	af2f      	add	r7, sp, #188	; 0xbc
 8015534:	43e3      	mvns	r3, r4
 8015536:	17db      	asrs	r3, r3, #31
 8015538:	401c      	ands	r4, r3
 801553a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	1b1c      	subs	r4, r3, r4
 8015540:	2c00      	cmp	r4, #0
 8015542:	dd19      	ble.n	8015578 <_svfprintf_r+0x1298>
 8015544:	0039      	movs	r1, r7
 8015546:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015548:	485c      	ldr	r0, [pc, #368]	; (80156bc <_svfprintf_r+0x13dc>)
 801554a:	9308      	str	r3, [sp, #32]
 801554c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801554e:	3301      	adds	r3, #1
 8015550:	3108      	adds	r1, #8
 8015552:	6038      	str	r0, [r7, #0]
 8015554:	2c10      	cmp	r4, #16
 8015556:	dc1a      	bgt.n	801558e <_svfprintf_r+0x12ae>
 8015558:	607c      	str	r4, [r7, #4]
 801555a:	18a4      	adds	r4, r4, r2
 801555c:	942e      	str	r4, [sp, #184]	; 0xb8
 801555e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015560:	000f      	movs	r7, r1
 8015562:	2b07      	cmp	r3, #7
 8015564:	dd08      	ble.n	8015578 <_svfprintf_r+0x1298>
 8015566:	aa2c      	add	r2, sp, #176	; 0xb0
 8015568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801556a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801556c:	f002 f80c 	bl	8017588 <__ssprint_r>
 8015570:	2800      	cmp	r0, #0
 8015572:	d000      	beq.n	8015576 <_svfprintf_r+0x1296>
 8015574:	e0d8      	b.n	8015728 <_svfprintf_r+0x1448>
 8015576:	af2f      	add	r7, sp, #188	; 0xbc
 8015578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	18ed      	adds	r5, r5, r3
 801557e:	e711      	b.n	80153a4 <_svfprintf_r+0x10c4>
 8015580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015582:	3b01      	subs	r3, #1
 8015584:	9313      	str	r3, [sp, #76]	; 0x4c
 8015586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015588:	3b01      	subs	r3, #1
 801558a:	930f      	str	r3, [sp, #60]	; 0x3c
 801558c:	e799      	b.n	80154c2 <_svfprintf_r+0x11e2>
 801558e:	2010      	movs	r0, #16
 8015590:	1812      	adds	r2, r2, r0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	922e      	str	r2, [sp, #184]	; 0xb8
 8015596:	932d      	str	r3, [sp, #180]	; 0xb4
 8015598:	2b07      	cmp	r3, #7
 801559a:	dd08      	ble.n	80155ae <_svfprintf_r+0x12ce>
 801559c:	aa2c      	add	r2, sp, #176	; 0xb0
 801559e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155a2:	f001 fff1 	bl	8017588 <__ssprint_r>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	d000      	beq.n	80155ac <_svfprintf_r+0x12cc>
 80155aa:	e0bd      	b.n	8015728 <_svfprintf_r+0x1448>
 80155ac:	a92f      	add	r1, sp, #188	; 0xbc
 80155ae:	3c10      	subs	r4, #16
 80155b0:	000f      	movs	r7, r1
 80155b2:	e7c7      	b.n	8015544 <_svfprintf_r+0x1264>
 80155b4:	003c      	movs	r4, r7
 80155b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80155ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155bc:	9308      	str	r3, [sp, #32]
 80155be:	3101      	adds	r1, #1
 80155c0:	3301      	adds	r3, #1
 80155c2:	3408      	adds	r4, #8
 80155c4:	2a01      	cmp	r2, #1
 80155c6:	dc03      	bgt.n	80155d0 <_svfprintf_r+0x12f0>
 80155c8:	2201      	movs	r2, #1
 80155ca:	4216      	tst	r6, r2
 80155cc:	d100      	bne.n	80155d0 <_svfprintf_r+0x12f0>
 80155ce:	e088      	b.n	80156e2 <_svfprintf_r+0x1402>
 80155d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155d2:	912e      	str	r1, [sp, #184]	; 0xb8
 80155d4:	603a      	str	r2, [r7, #0]
 80155d6:	2201      	movs	r2, #1
 80155d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80155da:	607a      	str	r2, [r7, #4]
 80155dc:	2b07      	cmp	r3, #7
 80155de:	dd08      	ble.n	80155f2 <_svfprintf_r+0x1312>
 80155e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80155e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155e6:	f001 ffcf 	bl	8017588 <__ssprint_r>
 80155ea:	2800      	cmp	r0, #0
 80155ec:	d000      	beq.n	80155f0 <_svfprintf_r+0x1310>
 80155ee:	e09b      	b.n	8015728 <_svfprintf_r+0x1448>
 80155f0:	ac2f      	add	r4, sp, #188	; 0xbc
 80155f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80155f6:	4694      	mov	ip, r2
 80155f8:	6023      	str	r3, [r4, #0]
 80155fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155fc:	6063      	str	r3, [r4, #4]
 80155fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015600:	3408      	adds	r4, #8
 8015602:	4463      	add	r3, ip
 8015604:	932e      	str	r3, [sp, #184]	; 0xb8
 8015606:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015608:	9308      	str	r3, [sp, #32]
 801560a:	3301      	adds	r3, #1
 801560c:	932d      	str	r3, [sp, #180]	; 0xb4
 801560e:	2b07      	cmp	r3, #7
 8015610:	dd08      	ble.n	8015624 <_svfprintf_r+0x1344>
 8015612:	aa2c      	add	r2, sp, #176	; 0xb0
 8015614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015616:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015618:	f001 ffb6 	bl	8017588 <__ssprint_r>
 801561c:	2800      	cmp	r0, #0
 801561e:	d000      	beq.n	8015622 <_svfprintf_r+0x1342>
 8015620:	e082      	b.n	8015728 <_svfprintf_r+0x1448>
 8015622:	ac2f      	add	r4, sp, #188	; 0xbc
 8015624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015626:	2200      	movs	r2, #0
 8015628:	1e5d      	subs	r5, r3, #1
 801562a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801562c:	2300      	movs	r3, #0
 801562e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015630:	f7ea ff14 	bl	800045c <__aeabi_dcmpeq>
 8015634:	2800      	cmp	r0, #0
 8015636:	d12c      	bne.n	8015692 <_svfprintf_r+0x13b2>
 8015638:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801563a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801563c:	9308      	str	r3, [sp, #32]
 801563e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015640:	6065      	str	r5, [r4, #4]
 8015642:	1c5a      	adds	r2, r3, #1
 8015644:	930e      	str	r3, [sp, #56]	; 0x38
 8015646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015648:	922d      	str	r2, [sp, #180]	; 0xb4
 801564a:	3301      	adds	r3, #1
 801564c:	6023      	str	r3, [r4, #0]
 801564e:	9b08      	ldr	r3, [sp, #32]
 8015650:	3408      	adds	r4, #8
 8015652:	3b01      	subs	r3, #1
 8015654:	185b      	adds	r3, r3, r1
 8015656:	932e      	str	r3, [sp, #184]	; 0xb8
 8015658:	2a07      	cmp	r2, #7
 801565a:	dd07      	ble.n	801566c <_svfprintf_r+0x138c>
 801565c:	aa2c      	add	r2, sp, #176	; 0xb0
 801565e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015660:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015662:	f001 ff91 	bl	8017588 <__ssprint_r>
 8015666:	2800      	cmp	r0, #0
 8015668:	d15e      	bne.n	8015728 <_svfprintf_r+0x1448>
 801566a:	ac2f      	add	r4, sp, #188	; 0xbc
 801566c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801566e:	ab28      	add	r3, sp, #160	; 0xa0
 8015670:	4694      	mov	ip, r2
 8015672:	6023      	str	r3, [r4, #0]
 8015674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015676:	6063      	str	r3, [r4, #4]
 8015678:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801567a:	4463      	add	r3, ip
 801567c:	932e      	str	r3, [sp, #184]	; 0xb8
 801567e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015680:	9308      	str	r3, [sp, #32]
 8015682:	3301      	adds	r3, #1
 8015684:	932d      	str	r3, [sp, #180]	; 0xb4
 8015686:	2b07      	cmp	r3, #7
 8015688:	dd00      	ble.n	801568c <_svfprintf_r+0x13ac>
 801568a:	e629      	b.n	80152e0 <_svfprintf_r+0x1000>
 801568c:	3408      	adds	r4, #8
 801568e:	0027      	movs	r7, r4
 8015690:	e579      	b.n	8015186 <_svfprintf_r+0xea6>
 8015692:	2710      	movs	r7, #16
 8015694:	2d00      	cmp	r5, #0
 8015696:	dde9      	ble.n	801566c <_svfprintf_r+0x138c>
 8015698:	0021      	movs	r1, r4
 801569a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801569c:	4807      	ldr	r0, [pc, #28]	; (80156bc <_svfprintf_r+0x13dc>)
 801569e:	9308      	str	r3, [sp, #32]
 80156a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156a2:	3301      	adds	r3, #1
 80156a4:	3108      	adds	r1, #8
 80156a6:	6020      	str	r0, [r4, #0]
 80156a8:	2d10      	cmp	r5, #16
 80156aa:	dc09      	bgt.n	80156c0 <_svfprintf_r+0x13e0>
 80156ac:	6065      	str	r5, [r4, #4]
 80156ae:	000c      	movs	r4, r1
 80156b0:	18ad      	adds	r5, r5, r2
 80156b2:	952e      	str	r5, [sp, #184]	; 0xb8
 80156b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80156b6:	2b07      	cmp	r3, #7
 80156b8:	ddd8      	ble.n	801566c <_svfprintf_r+0x138c>
 80156ba:	e7cf      	b.n	801565c <_svfprintf_r+0x137c>
 80156bc:	0801a704 	.word	0x0801a704
 80156c0:	3210      	adds	r2, #16
 80156c2:	6067      	str	r7, [r4, #4]
 80156c4:	922e      	str	r2, [sp, #184]	; 0xb8
 80156c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80156c8:	2b07      	cmp	r3, #7
 80156ca:	dd07      	ble.n	80156dc <_svfprintf_r+0x13fc>
 80156cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80156ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156d2:	f001 ff59 	bl	8017588 <__ssprint_r>
 80156d6:	2800      	cmp	r0, #0
 80156d8:	d126      	bne.n	8015728 <_svfprintf_r+0x1448>
 80156da:	a92f      	add	r1, sp, #188	; 0xbc
 80156dc:	3d10      	subs	r5, #16
 80156de:	000c      	movs	r4, r1
 80156e0:	e7da      	b.n	8015698 <_svfprintf_r+0x13b8>
 80156e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156e4:	912e      	str	r1, [sp, #184]	; 0xb8
 80156e6:	c705      	stmia	r7!, {r0, r2}
 80156e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ea:	e7e4      	b.n	80156b6 <_svfprintf_r+0x13d6>
 80156ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80156ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80156f0:	2510      	movs	r5, #16
 80156f2:	1a9c      	subs	r4, r3, r2
 80156f4:	2c00      	cmp	r4, #0
 80156f6:	dc00      	bgt.n	80156fa <_svfprintf_r+0x141a>
 80156f8:	e548      	b.n	801518c <_svfprintf_r+0xeac>
 80156fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156fc:	4921      	ldr	r1, [pc, #132]	; (8015784 <_svfprintf_r+0x14a4>)
 80156fe:	9308      	str	r3, [sp, #32]
 8015700:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015702:	3301      	adds	r3, #1
 8015704:	6039      	str	r1, [r7, #0]
 8015706:	2c10      	cmp	r4, #16
 8015708:	dc19      	bgt.n	801573e <_svfprintf_r+0x145e>
 801570a:	607c      	str	r4, [r7, #4]
 801570c:	18a4      	adds	r4, r4, r2
 801570e:	942e      	str	r4, [sp, #184]	; 0xb8
 8015710:	932d      	str	r3, [sp, #180]	; 0xb4
 8015712:	2b07      	cmp	r3, #7
 8015714:	dc00      	bgt.n	8015718 <_svfprintf_r+0x1438>
 8015716:	e539      	b.n	801518c <_svfprintf_r+0xeac>
 8015718:	aa2c      	add	r2, sp, #176	; 0xb0
 801571a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801571c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801571e:	f001 ff33 	bl	8017588 <__ssprint_r>
 8015722:	2800      	cmp	r0, #0
 8015724:	d100      	bne.n	8015728 <_svfprintf_r+0x1448>
 8015726:	e531      	b.n	801518c <_svfprintf_r+0xeac>
 8015728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801572a:	2b00      	cmp	r3, #0
 801572c:	d101      	bne.n	8015732 <_svfprintf_r+0x1452>
 801572e:	f7ff f908 	bl	8014942 <_svfprintf_r+0x662>
 8015732:	0019      	movs	r1, r3
 8015734:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015736:	f000 ff19 	bl	801656c <_free_r>
 801573a:	f7ff f902 	bl	8014942 <_svfprintf_r+0x662>
 801573e:	3210      	adds	r2, #16
 8015740:	607d      	str	r5, [r7, #4]
 8015742:	922e      	str	r2, [sp, #184]	; 0xb8
 8015744:	932d      	str	r3, [sp, #180]	; 0xb4
 8015746:	3708      	adds	r7, #8
 8015748:	2b07      	cmp	r3, #7
 801574a:	dd07      	ble.n	801575c <_svfprintf_r+0x147c>
 801574c:	aa2c      	add	r2, sp, #176	; 0xb0
 801574e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015750:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015752:	f001 ff19 	bl	8017588 <__ssprint_r>
 8015756:	2800      	cmp	r0, #0
 8015758:	d1e6      	bne.n	8015728 <_svfprintf_r+0x1448>
 801575a:	af2f      	add	r7, sp, #188	; 0xbc
 801575c:	3c10      	subs	r4, #16
 801575e:	e7cc      	b.n	80156fa <_svfprintf_r+0x141a>
 8015760:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015762:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015764:	f000 ff02 	bl	801656c <_free_r>
 8015768:	e52a      	b.n	80151c0 <_svfprintf_r+0xee0>
 801576a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801576c:	9306      	str	r3, [sp, #24]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <_svfprintf_r+0x1496>
 8015772:	f7ff f8e6 	bl	8014942 <_svfprintf_r+0x662>
 8015776:	aa2c      	add	r2, sp, #176	; 0xb0
 8015778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801577a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801577c:	f001 ff04 	bl	8017588 <__ssprint_r>
 8015780:	f7ff f8df 	bl	8014942 <_svfprintf_r+0x662>
 8015784:	0801a6f4 	.word	0x0801a6f4

08015788 <sysconf>:
 8015788:	2380      	movs	r3, #128	; 0x80
 801578a:	b510      	push	{r4, lr}
 801578c:	015b      	lsls	r3, r3, #5
 801578e:	2808      	cmp	r0, #8
 8015790:	d004      	beq.n	801579c <sysconf+0x14>
 8015792:	f000 fe7d 	bl	8016490 <__errno>
 8015796:	2316      	movs	r3, #22
 8015798:	6003      	str	r3, [r0, #0]
 801579a:	3b17      	subs	r3, #23
 801579c:	0018      	movs	r0, r3
 801579e:	bd10      	pop	{r4, pc}

080157a0 <__ascii_wctomb>:
 80157a0:	1e0b      	subs	r3, r1, #0
 80157a2:	d004      	beq.n	80157ae <__ascii_wctomb+0xe>
 80157a4:	2aff      	cmp	r2, #255	; 0xff
 80157a6:	d904      	bls.n	80157b2 <__ascii_wctomb+0x12>
 80157a8:	238a      	movs	r3, #138	; 0x8a
 80157aa:	6003      	str	r3, [r0, #0]
 80157ac:	3b8b      	subs	r3, #139	; 0x8b
 80157ae:	0018      	movs	r0, r3
 80157b0:	4770      	bx	lr
 80157b2:	700a      	strb	r2, [r1, #0]
 80157b4:	2301      	movs	r3, #1
 80157b6:	e7fa      	b.n	80157ae <__ascii_wctomb+0xe>

080157b8 <register_fini>:
 80157b8:	4b03      	ldr	r3, [pc, #12]	; (80157c8 <register_fini+0x10>)
 80157ba:	b510      	push	{r4, lr}
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d002      	beq.n	80157c6 <register_fini+0xe>
 80157c0:	4802      	ldr	r0, [pc, #8]	; (80157cc <register_fini+0x14>)
 80157c2:	f000 f805 	bl	80157d0 <atexit>
 80157c6:	bd10      	pop	{r4, pc}
 80157c8:	00000000 	.word	0x00000000
 80157cc:	0801649d 	.word	0x0801649d

080157d0 <atexit>:
 80157d0:	2300      	movs	r3, #0
 80157d2:	b510      	push	{r4, lr}
 80157d4:	0001      	movs	r1, r0
 80157d6:	001a      	movs	r2, r3
 80157d8:	0018      	movs	r0, r3
 80157da:	f001 ff53 	bl	8017684 <__register_exitproc>
 80157de:	bd10      	pop	{r4, pc}

080157e0 <quorem>:
 80157e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157e2:	6903      	ldr	r3, [r0, #16]
 80157e4:	690c      	ldr	r4, [r1, #16]
 80157e6:	b089      	sub	sp, #36	; 0x24
 80157e8:	0007      	movs	r7, r0
 80157ea:	9105      	str	r1, [sp, #20]
 80157ec:	2600      	movs	r6, #0
 80157ee:	42a3      	cmp	r3, r4
 80157f0:	db65      	blt.n	80158be <quorem+0xde>
 80157f2:	000b      	movs	r3, r1
 80157f4:	3c01      	subs	r4, #1
 80157f6:	3314      	adds	r3, #20
 80157f8:	00a5      	lsls	r5, r4, #2
 80157fa:	9303      	str	r3, [sp, #12]
 80157fc:	195b      	adds	r3, r3, r5
 80157fe:	9304      	str	r3, [sp, #16]
 8015800:	0003      	movs	r3, r0
 8015802:	3314      	adds	r3, #20
 8015804:	9302      	str	r3, [sp, #8]
 8015806:	195d      	adds	r5, r3, r5
 8015808:	9b04      	ldr	r3, [sp, #16]
 801580a:	6828      	ldr	r0, [r5, #0]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	1c59      	adds	r1, r3, #1
 8015810:	9301      	str	r3, [sp, #4]
 8015812:	f7ea fc9d 	bl	8000150 <__udivsi3>
 8015816:	9001      	str	r0, [sp, #4]
 8015818:	42b0      	cmp	r0, r6
 801581a:	d029      	beq.n	8015870 <quorem+0x90>
 801581c:	9b03      	ldr	r3, [sp, #12]
 801581e:	9802      	ldr	r0, [sp, #8]
 8015820:	469c      	mov	ip, r3
 8015822:	9606      	str	r6, [sp, #24]
 8015824:	4662      	mov	r2, ip
 8015826:	ca08      	ldmia	r2!, {r3}
 8015828:	4694      	mov	ip, r2
 801582a:	9a01      	ldr	r2, [sp, #4]
 801582c:	b299      	uxth	r1, r3
 801582e:	4351      	muls	r1, r2
 8015830:	0c1b      	lsrs	r3, r3, #16
 8015832:	4353      	muls	r3, r2
 8015834:	1989      	adds	r1, r1, r6
 8015836:	0c0a      	lsrs	r2, r1, #16
 8015838:	189b      	adds	r3, r3, r2
 801583a:	9307      	str	r3, [sp, #28]
 801583c:	0c1e      	lsrs	r6, r3, #16
 801583e:	6803      	ldr	r3, [r0, #0]
 8015840:	b289      	uxth	r1, r1
 8015842:	b29a      	uxth	r2, r3
 8015844:	9b06      	ldr	r3, [sp, #24]
 8015846:	18d2      	adds	r2, r2, r3
 8015848:	6803      	ldr	r3, [r0, #0]
 801584a:	1a52      	subs	r2, r2, r1
 801584c:	0c19      	lsrs	r1, r3, #16
 801584e:	466b      	mov	r3, sp
 8015850:	8b9b      	ldrh	r3, [r3, #28]
 8015852:	1acb      	subs	r3, r1, r3
 8015854:	1411      	asrs	r1, r2, #16
 8015856:	185b      	adds	r3, r3, r1
 8015858:	1419      	asrs	r1, r3, #16
 801585a:	b292      	uxth	r2, r2
 801585c:	041b      	lsls	r3, r3, #16
 801585e:	431a      	orrs	r2, r3
 8015860:	9b04      	ldr	r3, [sp, #16]
 8015862:	9106      	str	r1, [sp, #24]
 8015864:	c004      	stmia	r0!, {r2}
 8015866:	4563      	cmp	r3, ip
 8015868:	d2dc      	bcs.n	8015824 <quorem+0x44>
 801586a:	682b      	ldr	r3, [r5, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d02d      	beq.n	80158cc <quorem+0xec>
 8015870:	9905      	ldr	r1, [sp, #20]
 8015872:	0038      	movs	r0, r7
 8015874:	f001 fcb2 	bl	80171dc <__mcmp>
 8015878:	2800      	cmp	r0, #0
 801587a:	db1f      	blt.n	80158bc <quorem+0xdc>
 801587c:	2500      	movs	r5, #0
 801587e:	9b01      	ldr	r3, [sp, #4]
 8015880:	9802      	ldr	r0, [sp, #8]
 8015882:	3301      	adds	r3, #1
 8015884:	9903      	ldr	r1, [sp, #12]
 8015886:	9301      	str	r3, [sp, #4]
 8015888:	6802      	ldr	r2, [r0, #0]
 801588a:	c908      	ldmia	r1!, {r3}
 801588c:	b292      	uxth	r2, r2
 801588e:	1955      	adds	r5, r2, r5
 8015890:	b29a      	uxth	r2, r3
 8015892:	1aaa      	subs	r2, r5, r2
 8015894:	6805      	ldr	r5, [r0, #0]
 8015896:	0c1b      	lsrs	r3, r3, #16
 8015898:	0c2d      	lsrs	r5, r5, #16
 801589a:	1aeb      	subs	r3, r5, r3
 801589c:	1415      	asrs	r5, r2, #16
 801589e:	195b      	adds	r3, r3, r5
 80158a0:	141d      	asrs	r5, r3, #16
 80158a2:	b292      	uxth	r2, r2
 80158a4:	041b      	lsls	r3, r3, #16
 80158a6:	4313      	orrs	r3, r2
 80158a8:	c008      	stmia	r0!, {r3}
 80158aa:	9b04      	ldr	r3, [sp, #16]
 80158ac:	428b      	cmp	r3, r1
 80158ae:	d2eb      	bcs.n	8015888 <quorem+0xa8>
 80158b0:	9a02      	ldr	r2, [sp, #8]
 80158b2:	00a3      	lsls	r3, r4, #2
 80158b4:	18d3      	adds	r3, r2, r3
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	2a00      	cmp	r2, #0
 80158ba:	d011      	beq.n	80158e0 <quorem+0x100>
 80158bc:	9e01      	ldr	r6, [sp, #4]
 80158be:	0030      	movs	r0, r6
 80158c0:	b009      	add	sp, #36	; 0x24
 80158c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c4:	682b      	ldr	r3, [r5, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d104      	bne.n	80158d4 <quorem+0xf4>
 80158ca:	3c01      	subs	r4, #1
 80158cc:	9b02      	ldr	r3, [sp, #8]
 80158ce:	3d04      	subs	r5, #4
 80158d0:	42ab      	cmp	r3, r5
 80158d2:	d3f7      	bcc.n	80158c4 <quorem+0xe4>
 80158d4:	613c      	str	r4, [r7, #16]
 80158d6:	e7cb      	b.n	8015870 <quorem+0x90>
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	2a00      	cmp	r2, #0
 80158dc:	d104      	bne.n	80158e8 <quorem+0x108>
 80158de:	3c01      	subs	r4, #1
 80158e0:	9a02      	ldr	r2, [sp, #8]
 80158e2:	3b04      	subs	r3, #4
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d3f7      	bcc.n	80158d8 <quorem+0xf8>
 80158e8:	613c      	str	r4, [r7, #16]
 80158ea:	e7e7      	b.n	80158bc <quorem+0xdc>

080158ec <_dtoa_r>:
 80158ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ee:	0014      	movs	r4, r2
 80158f0:	001d      	movs	r5, r3
 80158f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80158f4:	b09b      	sub	sp, #108	; 0x6c
 80158f6:	9002      	str	r0, [sp, #8]
 80158f8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80158fa:	9406      	str	r4, [sp, #24]
 80158fc:	9507      	str	r5, [sp, #28]
 80158fe:	2900      	cmp	r1, #0
 8015900:	d009      	beq.n	8015916 <_dtoa_r+0x2a>
 8015902:	2301      	movs	r3, #1
 8015904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015906:	4093      	lsls	r3, r2
 8015908:	604a      	str	r2, [r1, #4]
 801590a:	608b      	str	r3, [r1, #8]
 801590c:	f001 fa6a 	bl	8016de4 <_Bfree>
 8015910:	2300      	movs	r3, #0
 8015912:	9a02      	ldr	r2, [sp, #8]
 8015914:	6413      	str	r3, [r2, #64]	; 0x40
 8015916:	2d00      	cmp	r5, #0
 8015918:	da20      	bge.n	801595c <_dtoa_r+0x70>
 801591a:	2301      	movs	r3, #1
 801591c:	6033      	str	r3, [r6, #0]
 801591e:	006b      	lsls	r3, r5, #1
 8015920:	085b      	lsrs	r3, r3, #1
 8015922:	9307      	str	r3, [sp, #28]
 8015924:	9c07      	ldr	r4, [sp, #28]
 8015926:	4bb2      	ldr	r3, [pc, #712]	; (8015bf0 <_dtoa_r+0x304>)
 8015928:	0022      	movs	r2, r4
 801592a:	9317      	str	r3, [sp, #92]	; 0x5c
 801592c:	401a      	ands	r2, r3
 801592e:	429a      	cmp	r2, r3
 8015930:	d117      	bne.n	8015962 <_dtoa_r+0x76>
 8015932:	4bb0      	ldr	r3, [pc, #704]	; (8015bf4 <_dtoa_r+0x308>)
 8015934:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015936:	6013      	str	r3, [r2, #0]
 8015938:	9b06      	ldr	r3, [sp, #24]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d103      	bne.n	8015946 <_dtoa_r+0x5a>
 801593e:	0324      	lsls	r4, r4, #12
 8015940:	d101      	bne.n	8015946 <_dtoa_r+0x5a>
 8015942:	f000 fd89 	bl	8016458 <_dtoa_r+0xb6c>
 8015946:	4bac      	ldr	r3, [pc, #688]	; (8015bf8 <_dtoa_r+0x30c>)
 8015948:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801594a:	9308      	str	r3, [sp, #32]
 801594c:	2a00      	cmp	r2, #0
 801594e:	d002      	beq.n	8015956 <_dtoa_r+0x6a>
 8015950:	4baa      	ldr	r3, [pc, #680]	; (8015bfc <_dtoa_r+0x310>)
 8015952:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015954:	6013      	str	r3, [r2, #0]
 8015956:	9808      	ldr	r0, [sp, #32]
 8015958:	b01b      	add	sp, #108	; 0x6c
 801595a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801595c:	2300      	movs	r3, #0
 801595e:	6033      	str	r3, [r6, #0]
 8015960:	e7e0      	b.n	8015924 <_dtoa_r+0x38>
 8015962:	9e06      	ldr	r6, [sp, #24]
 8015964:	9f07      	ldr	r7, [sp, #28]
 8015966:	2200      	movs	r2, #0
 8015968:	2300      	movs	r3, #0
 801596a:	0030      	movs	r0, r6
 801596c:	0039      	movs	r1, r7
 801596e:	f7ea fd75 	bl	800045c <__aeabi_dcmpeq>
 8015972:	1e05      	subs	r5, r0, #0
 8015974:	d00b      	beq.n	801598e <_dtoa_r+0xa2>
 8015976:	2301      	movs	r3, #1
 8015978:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801597a:	6013      	str	r3, [r2, #0]
 801597c:	4ba0      	ldr	r3, [pc, #640]	; (8015c00 <_dtoa_r+0x314>)
 801597e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015980:	9308      	str	r3, [sp, #32]
 8015982:	2a00      	cmp	r2, #0
 8015984:	d0e7      	beq.n	8015956 <_dtoa_r+0x6a>
 8015986:	4a9f      	ldr	r2, [pc, #636]	; (8015c04 <_dtoa_r+0x318>)
 8015988:	9924      	ldr	r1, [sp, #144]	; 0x90
 801598a:	600a      	str	r2, [r1, #0]
 801598c:	e7e3      	b.n	8015956 <_dtoa_r+0x6a>
 801598e:	ab18      	add	r3, sp, #96	; 0x60
 8015990:	9301      	str	r3, [sp, #4]
 8015992:	ab19      	add	r3, sp, #100	; 0x64
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	0032      	movs	r2, r6
 8015998:	003b      	movs	r3, r7
 801599a:	9802      	ldr	r0, [sp, #8]
 801599c:	f001 fd0e 	bl	80173bc <__d2b>
 80159a0:	0063      	lsls	r3, r4, #1
 80159a2:	9003      	str	r0, [sp, #12]
 80159a4:	0d5b      	lsrs	r3, r3, #21
 80159a6:	d074      	beq.n	8015a92 <_dtoa_r+0x1a6>
 80159a8:	033a      	lsls	r2, r7, #12
 80159aa:	4c97      	ldr	r4, [pc, #604]	; (8015c08 <_dtoa_r+0x31c>)
 80159ac:	0b12      	lsrs	r2, r2, #12
 80159ae:	4314      	orrs	r4, r2
 80159b0:	0021      	movs	r1, r4
 80159b2:	4a96      	ldr	r2, [pc, #600]	; (8015c0c <_dtoa_r+0x320>)
 80159b4:	0030      	movs	r0, r6
 80159b6:	9516      	str	r5, [sp, #88]	; 0x58
 80159b8:	189e      	adds	r6, r3, r2
 80159ba:	2200      	movs	r2, #0
 80159bc:	4b94      	ldr	r3, [pc, #592]	; (8015c10 <_dtoa_r+0x324>)
 80159be:	f7ec fcab 	bl	8002318 <__aeabi_dsub>
 80159c2:	4a94      	ldr	r2, [pc, #592]	; (8015c14 <_dtoa_r+0x328>)
 80159c4:	4b94      	ldr	r3, [pc, #592]	; (8015c18 <_dtoa_r+0x32c>)
 80159c6:	f7ec fa35 	bl	8001e34 <__aeabi_dmul>
 80159ca:	4a94      	ldr	r2, [pc, #592]	; (8015c1c <_dtoa_r+0x330>)
 80159cc:	4b94      	ldr	r3, [pc, #592]	; (8015c20 <_dtoa_r+0x334>)
 80159ce:	f7eb fb0b 	bl	8000fe8 <__aeabi_dadd>
 80159d2:	0004      	movs	r4, r0
 80159d4:	0030      	movs	r0, r6
 80159d6:	000d      	movs	r5, r1
 80159d8:	f7ed f838 	bl	8002a4c <__aeabi_i2d>
 80159dc:	4a91      	ldr	r2, [pc, #580]	; (8015c24 <_dtoa_r+0x338>)
 80159de:	4b92      	ldr	r3, [pc, #584]	; (8015c28 <_dtoa_r+0x33c>)
 80159e0:	f7ec fa28 	bl	8001e34 <__aeabi_dmul>
 80159e4:	0002      	movs	r2, r0
 80159e6:	000b      	movs	r3, r1
 80159e8:	0020      	movs	r0, r4
 80159ea:	0029      	movs	r1, r5
 80159ec:	f7eb fafc 	bl	8000fe8 <__aeabi_dadd>
 80159f0:	0004      	movs	r4, r0
 80159f2:	000d      	movs	r5, r1
 80159f4:	f7ec fff4 	bl	80029e0 <__aeabi_d2iz>
 80159f8:	2200      	movs	r2, #0
 80159fa:	0007      	movs	r7, r0
 80159fc:	2300      	movs	r3, #0
 80159fe:	0020      	movs	r0, r4
 8015a00:	0029      	movs	r1, r5
 8015a02:	f7ea fd31 	bl	8000468 <__aeabi_dcmplt>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d009      	beq.n	8015a1e <_dtoa_r+0x132>
 8015a0a:	0038      	movs	r0, r7
 8015a0c:	f7ed f81e 	bl	8002a4c <__aeabi_i2d>
 8015a10:	002b      	movs	r3, r5
 8015a12:	0022      	movs	r2, r4
 8015a14:	f7ea fd22 	bl	800045c <__aeabi_dcmpeq>
 8015a18:	4243      	negs	r3, r0
 8015a1a:	4158      	adcs	r0, r3
 8015a1c:	1a3f      	subs	r7, r7, r0
 8015a1e:	2301      	movs	r3, #1
 8015a20:	9314      	str	r3, [sp, #80]	; 0x50
 8015a22:	2f16      	cmp	r7, #22
 8015a24:	d80d      	bhi.n	8015a42 <_dtoa_r+0x156>
 8015a26:	4981      	ldr	r1, [pc, #516]	; (8015c2c <_dtoa_r+0x340>)
 8015a28:	00fb      	lsls	r3, r7, #3
 8015a2a:	18c9      	adds	r1, r1, r3
 8015a2c:	6808      	ldr	r0, [r1, #0]
 8015a2e:	6849      	ldr	r1, [r1, #4]
 8015a30:	9a06      	ldr	r2, [sp, #24]
 8015a32:	9b07      	ldr	r3, [sp, #28]
 8015a34:	f7ea fd2c 	bl	8000490 <__aeabi_dcmpgt>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d046      	beq.n	8015aca <_dtoa_r+0x1de>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	3f01      	subs	r7, #1
 8015a40:	9314      	str	r3, [sp, #80]	; 0x50
 8015a42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a44:	1b9e      	subs	r6, r3, r6
 8015a46:	2300      	movs	r3, #0
 8015a48:	930a      	str	r3, [sp, #40]	; 0x28
 8015a4a:	0033      	movs	r3, r6
 8015a4c:	3b01      	subs	r3, #1
 8015a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a50:	d504      	bpl.n	8015a5c <_dtoa_r+0x170>
 8015a52:	2301      	movs	r3, #1
 8015a54:	1b9b      	subs	r3, r3, r6
 8015a56:	930a      	str	r3, [sp, #40]	; 0x28
 8015a58:	2300      	movs	r3, #0
 8015a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a5c:	2f00      	cmp	r7, #0
 8015a5e:	db36      	blt.n	8015ace <_dtoa_r+0x1e2>
 8015a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a62:	9711      	str	r7, [sp, #68]	; 0x44
 8015a64:	19db      	adds	r3, r3, r7
 8015a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a68:	2300      	movs	r3, #0
 8015a6a:	9304      	str	r3, [sp, #16]
 8015a6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a6e:	2401      	movs	r4, #1
 8015a70:	2b09      	cmp	r3, #9
 8015a72:	d900      	bls.n	8015a76 <_dtoa_r+0x18a>
 8015a74:	e082      	b.n	8015b7c <_dtoa_r+0x290>
 8015a76:	2b05      	cmp	r3, #5
 8015a78:	dd02      	ble.n	8015a80 <_dtoa_r+0x194>
 8015a7a:	2400      	movs	r4, #0
 8015a7c:	3b04      	subs	r3, #4
 8015a7e:	9320      	str	r3, [sp, #128]	; 0x80
 8015a80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a82:	1e98      	subs	r0, r3, #2
 8015a84:	2803      	cmp	r0, #3
 8015a86:	d900      	bls.n	8015a8a <_dtoa_r+0x19e>
 8015a88:	e082      	b.n	8015b90 <_dtoa_r+0x2a4>
 8015a8a:	f7ea fb4d 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015a8e:	7573      	.short	0x7573
 8015a90:	6828      	.short	0x6828
 8015a92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015a96:	189e      	adds	r6, r3, r2
 8015a98:	4b65      	ldr	r3, [pc, #404]	; (8015c30 <_dtoa_r+0x344>)
 8015a9a:	18f2      	adds	r2, r6, r3
 8015a9c:	2a20      	cmp	r2, #32
 8015a9e:	dd0f      	ble.n	8015ac0 <_dtoa_r+0x1d4>
 8015aa0:	2340      	movs	r3, #64	; 0x40
 8015aa2:	1a9b      	subs	r3, r3, r2
 8015aa4:	409c      	lsls	r4, r3
 8015aa6:	4b63      	ldr	r3, [pc, #396]	; (8015c34 <_dtoa_r+0x348>)
 8015aa8:	9806      	ldr	r0, [sp, #24]
 8015aaa:	18f3      	adds	r3, r6, r3
 8015aac:	40d8      	lsrs	r0, r3
 8015aae:	4320      	orrs	r0, r4
 8015ab0:	f7ed f806 	bl	8002ac0 <__aeabi_ui2d>
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	4c60      	ldr	r4, [pc, #384]	; (8015c38 <_dtoa_r+0x34c>)
 8015ab8:	3e01      	subs	r6, #1
 8015aba:	1909      	adds	r1, r1, r4
 8015abc:	9316      	str	r3, [sp, #88]	; 0x58
 8015abe:	e77c      	b.n	80159ba <_dtoa_r+0xce>
 8015ac0:	2320      	movs	r3, #32
 8015ac2:	9806      	ldr	r0, [sp, #24]
 8015ac4:	1a9b      	subs	r3, r3, r2
 8015ac6:	4098      	lsls	r0, r3
 8015ac8:	e7f2      	b.n	8015ab0 <_dtoa_r+0x1c4>
 8015aca:	9014      	str	r0, [sp, #80]	; 0x50
 8015acc:	e7b9      	b.n	8015a42 <_dtoa_r+0x156>
 8015ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ad0:	1bdb      	subs	r3, r3, r7
 8015ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8015ad4:	427b      	negs	r3, r7
 8015ad6:	9304      	str	r3, [sp, #16]
 8015ad8:	2300      	movs	r3, #0
 8015ada:	9311      	str	r3, [sp, #68]	; 0x44
 8015adc:	e7c6      	b.n	8015a6c <_dtoa_r+0x180>
 8015ade:	2301      	movs	r3, #1
 8015ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8015ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	dd57      	ble.n	8015b98 <_dtoa_r+0x2ac>
 8015ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8015aea:	9309      	str	r3, [sp, #36]	; 0x24
 8015aec:	2200      	movs	r2, #0
 8015aee:	9902      	ldr	r1, [sp, #8]
 8015af0:	644a      	str	r2, [r1, #68]	; 0x44
 8015af2:	3204      	adds	r2, #4
 8015af4:	0010      	movs	r0, r2
 8015af6:	9902      	ldr	r1, [sp, #8]
 8015af8:	3014      	adds	r0, #20
 8015afa:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015afc:	4298      	cmp	r0, r3
 8015afe:	d950      	bls.n	8015ba2 <_dtoa_r+0x2b6>
 8015b00:	9802      	ldr	r0, [sp, #8]
 8015b02:	f001 f947 	bl	8016d94 <_Balloc>
 8015b06:	9b02      	ldr	r3, [sp, #8]
 8015b08:	9008      	str	r0, [sp, #32]
 8015b0a:	6418      	str	r0, [r3, #64]	; 0x40
 8015b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b0e:	2b0e      	cmp	r3, #14
 8015b10:	d900      	bls.n	8015b14 <_dtoa_r+0x228>
 8015b12:	e10c      	b.n	8015d2e <_dtoa_r+0x442>
 8015b14:	2c00      	cmp	r4, #0
 8015b16:	d100      	bne.n	8015b1a <_dtoa_r+0x22e>
 8015b18:	e109      	b.n	8015d2e <_dtoa_r+0x442>
 8015b1a:	9b06      	ldr	r3, [sp, #24]
 8015b1c:	9c07      	ldr	r4, [sp, #28]
 8015b1e:	9312      	str	r3, [sp, #72]	; 0x48
 8015b20:	9413      	str	r4, [sp, #76]	; 0x4c
 8015b22:	2f00      	cmp	r7, #0
 8015b24:	dc00      	bgt.n	8015b28 <_dtoa_r+0x23c>
 8015b26:	e08b      	b.n	8015c40 <_dtoa_r+0x354>
 8015b28:	210f      	movs	r1, #15
 8015b2a:	003a      	movs	r2, r7
 8015b2c:	4b3f      	ldr	r3, [pc, #252]	; (8015c2c <_dtoa_r+0x340>)
 8015b2e:	400a      	ands	r2, r1
 8015b30:	00d2      	lsls	r2, r2, #3
 8015b32:	189b      	adds	r3, r3, r2
 8015b34:	681d      	ldr	r5, [r3, #0]
 8015b36:	685e      	ldr	r6, [r3, #4]
 8015b38:	2302      	movs	r3, #2
 8015b3a:	113c      	asrs	r4, r7, #4
 8015b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8015b3e:	06e3      	lsls	r3, r4, #27
 8015b40:	d50b      	bpl.n	8015b5a <_dtoa_r+0x26e>
 8015b42:	4b3e      	ldr	r3, [pc, #248]	; (8015c3c <_dtoa_r+0x350>)
 8015b44:	400c      	ands	r4, r1
 8015b46:	6a1a      	ldr	r2, [r3, #32]
 8015b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015b4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b4e:	f7eb fd67 	bl	8001620 <__aeabi_ddiv>
 8015b52:	2303      	movs	r3, #3
 8015b54:	9006      	str	r0, [sp, #24]
 8015b56:	9107      	str	r1, [sp, #28]
 8015b58:	930e      	str	r3, [sp, #56]	; 0x38
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e03b      	b.n	8015bd6 <_dtoa_r+0x2ea>
 8015b5e:	2301      	movs	r3, #1
 8015b60:	930d      	str	r3, [sp, #52]	; 0x34
 8015b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b64:	18fb      	adds	r3, r7, r3
 8015b66:	930c      	str	r3, [sp, #48]	; 0x30
 8015b68:	3301      	adds	r3, #1
 8015b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	dcbd      	bgt.n	8015aec <_dtoa_r+0x200>
 8015b70:	2301      	movs	r3, #1
 8015b72:	e7bb      	b.n	8015aec <_dtoa_r+0x200>
 8015b74:	2300      	movs	r3, #0
 8015b76:	e7b3      	b.n	8015ae0 <_dtoa_r+0x1f4>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	e7f1      	b.n	8015b60 <_dtoa_r+0x274>
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	940d      	str	r4, [sp, #52]	; 0x34
 8015b80:	9320      	str	r3, [sp, #128]	; 0x80
 8015b82:	3b01      	subs	r3, #1
 8015b84:	2200      	movs	r2, #0
 8015b86:	930c      	str	r3, [sp, #48]	; 0x30
 8015b88:	9309      	str	r3, [sp, #36]	; 0x24
 8015b8a:	3313      	adds	r3, #19
 8015b8c:	9221      	str	r2, [sp, #132]	; 0x84
 8015b8e:	e7ad      	b.n	8015aec <_dtoa_r+0x200>
 8015b90:	2301      	movs	r3, #1
 8015b92:	930d      	str	r3, [sp, #52]	; 0x34
 8015b94:	3b02      	subs	r3, #2
 8015b96:	e7f5      	b.n	8015b84 <_dtoa_r+0x298>
 8015b98:	2301      	movs	r3, #1
 8015b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b9e:	001a      	movs	r2, r3
 8015ba0:	e7f4      	b.n	8015b8c <_dtoa_r+0x2a0>
 8015ba2:	9802      	ldr	r0, [sp, #8]
 8015ba4:	3101      	adds	r1, #1
 8015ba6:	6441      	str	r1, [r0, #68]	; 0x44
 8015ba8:	0052      	lsls	r2, r2, #1
 8015baa:	e7a3      	b.n	8015af4 <_dtoa_r+0x208>
 8015bac:	2301      	movs	r3, #1
 8015bae:	421c      	tst	r4, r3
 8015bb0:	d00e      	beq.n	8015bd0 <_dtoa_r+0x2e4>
 8015bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bb4:	4a21      	ldr	r2, [pc, #132]	; (8015c3c <_dtoa_r+0x350>)
 8015bb6:	3301      	adds	r3, #1
 8015bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8015bba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bbc:	0028      	movs	r0, r5
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	189b      	adds	r3, r3, r2
 8015bc2:	0031      	movs	r1, r6
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	f7ec f934 	bl	8001e34 <__aeabi_dmul>
 8015bcc:	0005      	movs	r5, r0
 8015bce:	000e      	movs	r6, r1
 8015bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bd2:	1064      	asrs	r4, r4, #1
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	9310      	str	r3, [sp, #64]	; 0x40
 8015bd8:	2c00      	cmp	r4, #0
 8015bda:	d1e7      	bne.n	8015bac <_dtoa_r+0x2c0>
 8015bdc:	9806      	ldr	r0, [sp, #24]
 8015bde:	9907      	ldr	r1, [sp, #28]
 8015be0:	002a      	movs	r2, r5
 8015be2:	0033      	movs	r3, r6
 8015be4:	f7eb fd1c 	bl	8001620 <__aeabi_ddiv>
 8015be8:	9006      	str	r0, [sp, #24]
 8015bea:	9107      	str	r1, [sp, #28]
 8015bec:	e043      	b.n	8015c76 <_dtoa_r+0x38a>
 8015bee:	46c0      	nop			; (mov r8, r8)
 8015bf0:	7ff00000 	.word	0x7ff00000
 8015bf4:	0000270f 	.word	0x0000270f
 8015bf8:	0801a81e 	.word	0x0801a81e
 8015bfc:	0801a821 	.word	0x0801a821
 8015c00:	0801a6f2 	.word	0x0801a6f2
 8015c04:	0801a6f3 	.word	0x0801a6f3
 8015c08:	3ff00000 	.word	0x3ff00000
 8015c0c:	fffffc01 	.word	0xfffffc01
 8015c10:	3ff80000 	.word	0x3ff80000
 8015c14:	636f4361 	.word	0x636f4361
 8015c18:	3fd287a7 	.word	0x3fd287a7
 8015c1c:	8b60c8b3 	.word	0x8b60c8b3
 8015c20:	3fc68a28 	.word	0x3fc68a28
 8015c24:	509f79fb 	.word	0x509f79fb
 8015c28:	3fd34413 	.word	0x3fd34413
 8015c2c:	0801a850 	.word	0x0801a850
 8015c30:	00000432 	.word	0x00000432
 8015c34:	00000412 	.word	0x00000412
 8015c38:	fe100000 	.word	0xfe100000
 8015c3c:	0801a828 	.word	0x0801a828
 8015c40:	2302      	movs	r3, #2
 8015c42:	930e      	str	r3, [sp, #56]	; 0x38
 8015c44:	2f00      	cmp	r7, #0
 8015c46:	d016      	beq.n	8015c76 <_dtoa_r+0x38a>
 8015c48:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015c4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015c4c:	427c      	negs	r4, r7
 8015c4e:	330d      	adds	r3, #13
 8015c50:	4023      	ands	r3, r4
 8015c52:	4acf      	ldr	r2, [pc, #828]	; (8015f90 <_dtoa_r+0x6a4>)
 8015c54:	00db      	lsls	r3, r3, #3
 8015c56:	18d3      	adds	r3, r2, r3
 8015c58:	681a      	ldr	r2, [r3, #0]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	f7ec f8ea 	bl	8001e34 <__aeabi_dmul>
 8015c60:	2300      	movs	r3, #0
 8015c62:	2601      	movs	r6, #1
 8015c64:	001d      	movs	r5, r3
 8015c66:	9006      	str	r0, [sp, #24]
 8015c68:	9107      	str	r1, [sp, #28]
 8015c6a:	1124      	asrs	r4, r4, #4
 8015c6c:	2c00      	cmp	r4, #0
 8015c6e:	d000      	beq.n	8015c72 <_dtoa_r+0x386>
 8015c70:	e08c      	b.n	8015d8c <_dtoa_r+0x4a0>
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d1b8      	bne.n	8015be8 <_dtoa_r+0x2fc>
 8015c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d100      	bne.n	8015c7e <_dtoa_r+0x392>
 8015c7c:	e096      	b.n	8015dac <_dtoa_r+0x4c0>
 8015c7e:	9c06      	ldr	r4, [sp, #24]
 8015c80:	9d07      	ldr	r5, [sp, #28]
 8015c82:	2200      	movs	r2, #0
 8015c84:	4bc3      	ldr	r3, [pc, #780]	; (8015f94 <_dtoa_r+0x6a8>)
 8015c86:	0020      	movs	r0, r4
 8015c88:	0029      	movs	r1, r5
 8015c8a:	f7ea fbed 	bl	8000468 <__aeabi_dcmplt>
 8015c8e:	2800      	cmp	r0, #0
 8015c90:	d100      	bne.n	8015c94 <_dtoa_r+0x3a8>
 8015c92:	e08b      	b.n	8015dac <_dtoa_r+0x4c0>
 8015c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d100      	bne.n	8015c9c <_dtoa_r+0x3b0>
 8015c9a:	e087      	b.n	8015dac <_dtoa_r+0x4c0>
 8015c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	dd41      	ble.n	8015d26 <_dtoa_r+0x43a>
 8015ca2:	4bbd      	ldr	r3, [pc, #756]	; (8015f98 <_dtoa_r+0x6ac>)
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	0020      	movs	r0, r4
 8015ca8:	0029      	movs	r1, r5
 8015caa:	f7ec f8c3 	bl	8001e34 <__aeabi_dmul>
 8015cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cb0:	9006      	str	r0, [sp, #24]
 8015cb2:	9107      	str	r1, [sp, #28]
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8015cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cba:	1e7e      	subs	r6, r7, #1
 8015cbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015cbe:	9310      	str	r3, [sp, #64]	; 0x40
 8015cc0:	f7ec fec4 	bl	8002a4c <__aeabi_i2d>
 8015cc4:	9a06      	ldr	r2, [sp, #24]
 8015cc6:	9b07      	ldr	r3, [sp, #28]
 8015cc8:	f7ec f8b4 	bl	8001e34 <__aeabi_dmul>
 8015ccc:	2200      	movs	r2, #0
 8015cce:	4bb3      	ldr	r3, [pc, #716]	; (8015f9c <_dtoa_r+0x6b0>)
 8015cd0:	f7eb f98a 	bl	8000fe8 <__aeabi_dadd>
 8015cd4:	4ab2      	ldr	r2, [pc, #712]	; (8015fa0 <_dtoa_r+0x6b4>)
 8015cd6:	900e      	str	r0, [sp, #56]	; 0x38
 8015cd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015cdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015cde:	4694      	mov	ip, r2
 8015ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ce2:	4463      	add	r3, ip
 8015ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8015ce6:	001d      	movs	r5, r3
 8015ce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d161      	bne.n	8015db2 <_dtoa_r+0x4c6>
 8015cee:	9806      	ldr	r0, [sp, #24]
 8015cf0:	9907      	ldr	r1, [sp, #28]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	4bab      	ldr	r3, [pc, #684]	; (8015fa4 <_dtoa_r+0x6b8>)
 8015cf6:	f7ec fb0f 	bl	8002318 <__aeabi_dsub>
 8015cfa:	0022      	movs	r2, r4
 8015cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cfe:	9006      	str	r0, [sp, #24]
 8015d00:	9107      	str	r1, [sp, #28]
 8015d02:	f7ea fbc5 	bl	8000490 <__aeabi_dcmpgt>
 8015d06:	2800      	cmp	r0, #0
 8015d08:	d000      	beq.n	8015d0c <_dtoa_r+0x420>
 8015d0a:	e2aa      	b.n	8016262 <_dtoa_r+0x976>
 8015d0c:	48a6      	ldr	r0, [pc, #664]	; (8015fa8 <_dtoa_r+0x6bc>)
 8015d0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015d10:	4684      	mov	ip, r0
 8015d12:	4461      	add	r1, ip
 8015d14:	000b      	movs	r3, r1
 8015d16:	9806      	ldr	r0, [sp, #24]
 8015d18:	9907      	ldr	r1, [sp, #28]
 8015d1a:	0022      	movs	r2, r4
 8015d1c:	f7ea fba4 	bl	8000468 <__aeabi_dcmplt>
 8015d20:	2800      	cmp	r0, #0
 8015d22:	d000      	beq.n	8015d26 <_dtoa_r+0x43a>
 8015d24:	e297      	b.n	8016256 <_dtoa_r+0x96a>
 8015d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d2a:	9306      	str	r3, [sp, #24]
 8015d2c:	9407      	str	r4, [sp, #28]
 8015d2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	da00      	bge.n	8015d36 <_dtoa_r+0x44a>
 8015d34:	e15e      	b.n	8015ff4 <_dtoa_r+0x708>
 8015d36:	2f0e      	cmp	r7, #14
 8015d38:	dd00      	ble.n	8015d3c <_dtoa_r+0x450>
 8015d3a:	e15b      	b.n	8015ff4 <_dtoa_r+0x708>
 8015d3c:	4b94      	ldr	r3, [pc, #592]	; (8015f90 <_dtoa_r+0x6a4>)
 8015d3e:	00fa      	lsls	r2, r7, #3
 8015d40:	189b      	adds	r3, r3, r2
 8015d42:	685c      	ldr	r4, [r3, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	9304      	str	r3, [sp, #16]
 8015d48:	9405      	str	r4, [sp, #20]
 8015d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	db00      	blt.n	8015d52 <_dtoa_r+0x466>
 8015d50:	e0da      	b.n	8015f08 <_dtoa_r+0x61c>
 8015d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	dd00      	ble.n	8015d5a <_dtoa_r+0x46e>
 8015d58:	e0d6      	b.n	8015f08 <_dtoa_r+0x61c>
 8015d5a:	d000      	beq.n	8015d5e <_dtoa_r+0x472>
 8015d5c:	e27f      	b.n	801625e <_dtoa_r+0x972>
 8015d5e:	9804      	ldr	r0, [sp, #16]
 8015d60:	9905      	ldr	r1, [sp, #20]
 8015d62:	2200      	movs	r2, #0
 8015d64:	4b8f      	ldr	r3, [pc, #572]	; (8015fa4 <_dtoa_r+0x6b8>)
 8015d66:	f7ec f865 	bl	8001e34 <__aeabi_dmul>
 8015d6a:	9a06      	ldr	r2, [sp, #24]
 8015d6c:	9b07      	ldr	r3, [sp, #28]
 8015d6e:	f7ea fb99 	bl	80004a4 <__aeabi_dcmpge>
 8015d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d74:	9304      	str	r3, [sp, #16]
 8015d76:	001e      	movs	r6, r3
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	d000      	beq.n	8015d7e <_dtoa_r+0x492>
 8015d7c:	e251      	b.n	8016222 <_dtoa_r+0x936>
 8015d7e:	9b08      	ldr	r3, [sp, #32]
 8015d80:	9a08      	ldr	r2, [sp, #32]
 8015d82:	1c5d      	adds	r5, r3, #1
 8015d84:	2331      	movs	r3, #49	; 0x31
 8015d86:	3701      	adds	r7, #1
 8015d88:	7013      	strb	r3, [r2, #0]
 8015d8a:	e24d      	b.n	8016228 <_dtoa_r+0x93c>
 8015d8c:	4234      	tst	r4, r6
 8015d8e:	d00a      	beq.n	8015da6 <_dtoa_r+0x4ba>
 8015d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d92:	4a86      	ldr	r2, [pc, #536]	; (8015fac <_dtoa_r+0x6c0>)
 8015d94:	3301      	adds	r3, #1
 8015d96:	930e      	str	r3, [sp, #56]	; 0x38
 8015d98:	00eb      	lsls	r3, r5, #3
 8015d9a:	189b      	adds	r3, r3, r2
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	f7ec f848 	bl	8001e34 <__aeabi_dmul>
 8015da4:	0033      	movs	r3, r6
 8015da6:	1064      	asrs	r4, r4, #1
 8015da8:	3501      	adds	r5, #1
 8015daa:	e75f      	b.n	8015c6c <_dtoa_r+0x380>
 8015dac:	003e      	movs	r6, r7
 8015dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015db0:	e784      	b.n	8015cbc <_dtoa_r+0x3d0>
 8015db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015db4:	1e5a      	subs	r2, r3, #1
 8015db6:	4b76      	ldr	r3, [pc, #472]	; (8015f90 <_dtoa_r+0x6a4>)
 8015db8:	00d2      	lsls	r2, r2, #3
 8015dba:	189b      	adds	r3, r3, r2
 8015dbc:	6818      	ldr	r0, [r3, #0]
 8015dbe:	6859      	ldr	r1, [r3, #4]
 8015dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d04b      	beq.n	8015e5e <_dtoa_r+0x572>
 8015dc6:	0002      	movs	r2, r0
 8015dc8:	000b      	movs	r3, r1
 8015dca:	2000      	movs	r0, #0
 8015dcc:	4978      	ldr	r1, [pc, #480]	; (8015fb0 <_dtoa_r+0x6c4>)
 8015dce:	f7eb fc27 	bl	8001620 <__aeabi_ddiv>
 8015dd2:	002b      	movs	r3, r5
 8015dd4:	0022      	movs	r2, r4
 8015dd6:	f7ec fa9f 	bl	8002318 <__aeabi_dsub>
 8015dda:	9b08      	ldr	r3, [sp, #32]
 8015ddc:	900e      	str	r0, [sp, #56]	; 0x38
 8015dde:	910f      	str	r1, [sp, #60]	; 0x3c
 8015de0:	9315      	str	r3, [sp, #84]	; 0x54
 8015de2:	9806      	ldr	r0, [sp, #24]
 8015de4:	9907      	ldr	r1, [sp, #28]
 8015de6:	f7ec fdfb 	bl	80029e0 <__aeabi_d2iz>
 8015dea:	0004      	movs	r4, r0
 8015dec:	f7ec fe2e 	bl	8002a4c <__aeabi_i2d>
 8015df0:	0002      	movs	r2, r0
 8015df2:	000b      	movs	r3, r1
 8015df4:	9806      	ldr	r0, [sp, #24]
 8015df6:	9907      	ldr	r1, [sp, #28]
 8015df8:	f7ec fa8e 	bl	8002318 <__aeabi_dsub>
 8015dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dfe:	3430      	adds	r4, #48	; 0x30
 8015e00:	1c5d      	adds	r5, r3, #1
 8015e02:	701c      	strb	r4, [r3, #0]
 8015e04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e08:	9006      	str	r0, [sp, #24]
 8015e0a:	9107      	str	r1, [sp, #28]
 8015e0c:	f7ea fb2c 	bl	8000468 <__aeabi_dcmplt>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d16c      	bne.n	8015eee <_dtoa_r+0x602>
 8015e14:	9a06      	ldr	r2, [sp, #24]
 8015e16:	9b07      	ldr	r3, [sp, #28]
 8015e18:	2000      	movs	r0, #0
 8015e1a:	495e      	ldr	r1, [pc, #376]	; (8015f94 <_dtoa_r+0x6a8>)
 8015e1c:	f7ec fa7c 	bl	8002318 <__aeabi_dsub>
 8015e20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e24:	f7ea fb20 	bl	8000468 <__aeabi_dcmplt>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d000      	beq.n	8015e2e <_dtoa_r+0x542>
 8015e2c:	e0c3      	b.n	8015fb6 <_dtoa_r+0x6ca>
 8015e2e:	9b08      	ldr	r3, [sp, #32]
 8015e30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e32:	1aeb      	subs	r3, r5, r3
 8015e34:	429a      	cmp	r2, r3
 8015e36:	dc00      	bgt.n	8015e3a <_dtoa_r+0x54e>
 8015e38:	e775      	b.n	8015d26 <_dtoa_r+0x43a>
 8015e3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e3e:	2200      	movs	r2, #0
 8015e40:	4b55      	ldr	r3, [pc, #340]	; (8015f98 <_dtoa_r+0x6ac>)
 8015e42:	f7eb fff7 	bl	8001e34 <__aeabi_dmul>
 8015e46:	2200      	movs	r2, #0
 8015e48:	900e      	str	r0, [sp, #56]	; 0x38
 8015e4a:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e4c:	9806      	ldr	r0, [sp, #24]
 8015e4e:	9907      	ldr	r1, [sp, #28]
 8015e50:	4b51      	ldr	r3, [pc, #324]	; (8015f98 <_dtoa_r+0x6ac>)
 8015e52:	f7eb ffef 	bl	8001e34 <__aeabi_dmul>
 8015e56:	9515      	str	r5, [sp, #84]	; 0x54
 8015e58:	9006      	str	r0, [sp, #24]
 8015e5a:	9107      	str	r1, [sp, #28]
 8015e5c:	e7c1      	b.n	8015de2 <_dtoa_r+0x4f6>
 8015e5e:	0022      	movs	r2, r4
 8015e60:	002b      	movs	r3, r5
 8015e62:	f7eb ffe7 	bl	8001e34 <__aeabi_dmul>
 8015e66:	9c08      	ldr	r4, [sp, #32]
 8015e68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e6a:	0023      	movs	r3, r4
 8015e6c:	4694      	mov	ip, r2
 8015e6e:	900e      	str	r0, [sp, #56]	; 0x38
 8015e70:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e72:	4463      	add	r3, ip
 8015e74:	9315      	str	r3, [sp, #84]	; 0x54
 8015e76:	9806      	ldr	r0, [sp, #24]
 8015e78:	9907      	ldr	r1, [sp, #28]
 8015e7a:	f7ec fdb1 	bl	80029e0 <__aeabi_d2iz>
 8015e7e:	0005      	movs	r5, r0
 8015e80:	f7ec fde4 	bl	8002a4c <__aeabi_i2d>
 8015e84:	000b      	movs	r3, r1
 8015e86:	0002      	movs	r2, r0
 8015e88:	9806      	ldr	r0, [sp, #24]
 8015e8a:	9907      	ldr	r1, [sp, #28]
 8015e8c:	f7ec fa44 	bl	8002318 <__aeabi_dsub>
 8015e90:	3530      	adds	r5, #48	; 0x30
 8015e92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e94:	7025      	strb	r5, [r4, #0]
 8015e96:	3401      	adds	r4, #1
 8015e98:	9006      	str	r0, [sp, #24]
 8015e9a:	9107      	str	r1, [sp, #28]
 8015e9c:	42a3      	cmp	r3, r4
 8015e9e:	d12a      	bne.n	8015ef6 <_dtoa_r+0x60a>
 8015ea0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ea2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ea4:	9a08      	ldr	r2, [sp, #32]
 8015ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ea8:	4694      	mov	ip, r2
 8015eaa:	4463      	add	r3, ip
 8015eac:	2200      	movs	r2, #0
 8015eae:	001d      	movs	r5, r3
 8015eb0:	4b3f      	ldr	r3, [pc, #252]	; (8015fb0 <_dtoa_r+0x6c4>)
 8015eb2:	f7eb f899 	bl	8000fe8 <__aeabi_dadd>
 8015eb6:	0002      	movs	r2, r0
 8015eb8:	000b      	movs	r3, r1
 8015eba:	9806      	ldr	r0, [sp, #24]
 8015ebc:	9907      	ldr	r1, [sp, #28]
 8015ebe:	f7ea fae7 	bl	8000490 <__aeabi_dcmpgt>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d000      	beq.n	8015ec8 <_dtoa_r+0x5dc>
 8015ec6:	e076      	b.n	8015fb6 <_dtoa_r+0x6ca>
 8015ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ecc:	2000      	movs	r0, #0
 8015ece:	4938      	ldr	r1, [pc, #224]	; (8015fb0 <_dtoa_r+0x6c4>)
 8015ed0:	f7ec fa22 	bl	8002318 <__aeabi_dsub>
 8015ed4:	0002      	movs	r2, r0
 8015ed6:	000b      	movs	r3, r1
 8015ed8:	9806      	ldr	r0, [sp, #24]
 8015eda:	9907      	ldr	r1, [sp, #28]
 8015edc:	f7ea fac4 	bl	8000468 <__aeabi_dcmplt>
 8015ee0:	2800      	cmp	r0, #0
 8015ee2:	d100      	bne.n	8015ee6 <_dtoa_r+0x5fa>
 8015ee4:	e71f      	b.n	8015d26 <_dtoa_r+0x43a>
 8015ee6:	1e6b      	subs	r3, r5, #1
 8015ee8:	781a      	ldrb	r2, [r3, #0]
 8015eea:	2a30      	cmp	r2, #48	; 0x30
 8015eec:	d001      	beq.n	8015ef2 <_dtoa_r+0x606>
 8015eee:	0037      	movs	r7, r6
 8015ef0:	e03f      	b.n	8015f72 <_dtoa_r+0x686>
 8015ef2:	001d      	movs	r5, r3
 8015ef4:	e7f7      	b.n	8015ee6 <_dtoa_r+0x5fa>
 8015ef6:	9806      	ldr	r0, [sp, #24]
 8015ef8:	9907      	ldr	r1, [sp, #28]
 8015efa:	2200      	movs	r2, #0
 8015efc:	4b26      	ldr	r3, [pc, #152]	; (8015f98 <_dtoa_r+0x6ac>)
 8015efe:	f7eb ff99 	bl	8001e34 <__aeabi_dmul>
 8015f02:	9006      	str	r0, [sp, #24]
 8015f04:	9107      	str	r1, [sp, #28]
 8015f06:	e7b6      	b.n	8015e76 <_dtoa_r+0x58a>
 8015f08:	9e08      	ldr	r6, [sp, #32]
 8015f0a:	9a04      	ldr	r2, [sp, #16]
 8015f0c:	9b05      	ldr	r3, [sp, #20]
 8015f0e:	9806      	ldr	r0, [sp, #24]
 8015f10:	9907      	ldr	r1, [sp, #28]
 8015f12:	f7eb fb85 	bl	8001620 <__aeabi_ddiv>
 8015f16:	f7ec fd63 	bl	80029e0 <__aeabi_d2iz>
 8015f1a:	0004      	movs	r4, r0
 8015f1c:	f7ec fd96 	bl	8002a4c <__aeabi_i2d>
 8015f20:	9a04      	ldr	r2, [sp, #16]
 8015f22:	9b05      	ldr	r3, [sp, #20]
 8015f24:	f7eb ff86 	bl	8001e34 <__aeabi_dmul>
 8015f28:	0002      	movs	r2, r0
 8015f2a:	000b      	movs	r3, r1
 8015f2c:	9806      	ldr	r0, [sp, #24]
 8015f2e:	9907      	ldr	r1, [sp, #28]
 8015f30:	f7ec f9f2 	bl	8002318 <__aeabi_dsub>
 8015f34:	0023      	movs	r3, r4
 8015f36:	3330      	adds	r3, #48	; 0x30
 8015f38:	7033      	strb	r3, [r6, #0]
 8015f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f3c:	9b08      	ldr	r3, [sp, #32]
 8015f3e:	1c75      	adds	r5, r6, #1
 8015f40:	1aeb      	subs	r3, r5, r3
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d148      	bne.n	8015fd8 <_dtoa_r+0x6ec>
 8015f46:	0002      	movs	r2, r0
 8015f48:	000b      	movs	r3, r1
 8015f4a:	f7eb f84d 	bl	8000fe8 <__aeabi_dadd>
 8015f4e:	9a04      	ldr	r2, [sp, #16]
 8015f50:	9b05      	ldr	r3, [sp, #20]
 8015f52:	9006      	str	r0, [sp, #24]
 8015f54:	9107      	str	r1, [sp, #28]
 8015f56:	f7ea fa9b 	bl	8000490 <__aeabi_dcmpgt>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d12a      	bne.n	8015fb4 <_dtoa_r+0x6c8>
 8015f5e:	9a04      	ldr	r2, [sp, #16]
 8015f60:	9b05      	ldr	r3, [sp, #20]
 8015f62:	9806      	ldr	r0, [sp, #24]
 8015f64:	9907      	ldr	r1, [sp, #28]
 8015f66:	f7ea fa79 	bl	800045c <__aeabi_dcmpeq>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d001      	beq.n	8015f72 <_dtoa_r+0x686>
 8015f6e:	07e3      	lsls	r3, r4, #31
 8015f70:	d420      	bmi.n	8015fb4 <_dtoa_r+0x6c8>
 8015f72:	9903      	ldr	r1, [sp, #12]
 8015f74:	9802      	ldr	r0, [sp, #8]
 8015f76:	f000 ff35 	bl	8016de4 <_Bfree>
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	702b      	strb	r3, [r5, #0]
 8015f7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f80:	3701      	adds	r7, #1
 8015f82:	601f      	str	r7, [r3, #0]
 8015f84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d100      	bne.n	8015f8c <_dtoa_r+0x6a0>
 8015f8a:	e4e4      	b.n	8015956 <_dtoa_r+0x6a>
 8015f8c:	601d      	str	r5, [r3, #0]
 8015f8e:	e4e2      	b.n	8015956 <_dtoa_r+0x6a>
 8015f90:	0801a850 	.word	0x0801a850
 8015f94:	3ff00000 	.word	0x3ff00000
 8015f98:	40240000 	.word	0x40240000
 8015f9c:	401c0000 	.word	0x401c0000
 8015fa0:	fcc00000 	.word	0xfcc00000
 8015fa4:	40140000 	.word	0x40140000
 8015fa8:	7cc00000 	.word	0x7cc00000
 8015fac:	0801a828 	.word	0x0801a828
 8015fb0:	3fe00000 	.word	0x3fe00000
 8015fb4:	003e      	movs	r6, r7
 8015fb6:	1e6b      	subs	r3, r5, #1
 8015fb8:	781a      	ldrb	r2, [r3, #0]
 8015fba:	2a39      	cmp	r2, #57	; 0x39
 8015fbc:	d106      	bne.n	8015fcc <_dtoa_r+0x6e0>
 8015fbe:	9a08      	ldr	r2, [sp, #32]
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d107      	bne.n	8015fd4 <_dtoa_r+0x6e8>
 8015fc4:	2330      	movs	r3, #48	; 0x30
 8015fc6:	7013      	strb	r3, [r2, #0]
 8015fc8:	0013      	movs	r3, r2
 8015fca:	3601      	adds	r6, #1
 8015fcc:	781a      	ldrb	r2, [r3, #0]
 8015fce:	3201      	adds	r2, #1
 8015fd0:	701a      	strb	r2, [r3, #0]
 8015fd2:	e78c      	b.n	8015eee <_dtoa_r+0x602>
 8015fd4:	001d      	movs	r5, r3
 8015fd6:	e7ee      	b.n	8015fb6 <_dtoa_r+0x6ca>
 8015fd8:	2200      	movs	r2, #0
 8015fda:	4ba4      	ldr	r3, [pc, #656]	; (801626c <_dtoa_r+0x980>)
 8015fdc:	f7eb ff2a 	bl	8001e34 <__aeabi_dmul>
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	9006      	str	r0, [sp, #24]
 8015fe6:	9107      	str	r1, [sp, #28]
 8015fe8:	002e      	movs	r6, r5
 8015fea:	f7ea fa37 	bl	800045c <__aeabi_dcmpeq>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	d08b      	beq.n	8015f0a <_dtoa_r+0x61e>
 8015ff2:	e7be      	b.n	8015f72 <_dtoa_r+0x686>
 8015ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ff6:	2a00      	cmp	r2, #0
 8015ff8:	d100      	bne.n	8015ffc <_dtoa_r+0x710>
 8015ffa:	e0da      	b.n	80161b2 <_dtoa_r+0x8c6>
 8015ffc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015ffe:	2a01      	cmp	r2, #1
 8016000:	dd00      	ble.n	8016004 <_dtoa_r+0x718>
 8016002:	e0bd      	b.n	8016180 <_dtoa_r+0x894>
 8016004:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016006:	2a00      	cmp	r2, #0
 8016008:	d100      	bne.n	801600c <_dtoa_r+0x720>
 801600a:	e0b5      	b.n	8016178 <_dtoa_r+0x88c>
 801600c:	4a98      	ldr	r2, [pc, #608]	; (8016270 <_dtoa_r+0x984>)
 801600e:	189b      	adds	r3, r3, r2
 8016010:	9d04      	ldr	r5, [sp, #16]
 8016012:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016016:	2101      	movs	r1, #1
 8016018:	18d2      	adds	r2, r2, r3
 801601a:	920a      	str	r2, [sp, #40]	; 0x28
 801601c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801601e:	9802      	ldr	r0, [sp, #8]
 8016020:	18d3      	adds	r3, r2, r3
 8016022:	930b      	str	r3, [sp, #44]	; 0x2c
 8016024:	f000 ffad 	bl	8016f82 <__i2b>
 8016028:	0006      	movs	r6, r0
 801602a:	2c00      	cmp	r4, #0
 801602c:	dd0e      	ble.n	801604c <_dtoa_r+0x760>
 801602e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016030:	2b00      	cmp	r3, #0
 8016032:	dd0b      	ble.n	801604c <_dtoa_r+0x760>
 8016034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016036:	0023      	movs	r3, r4
 8016038:	4294      	cmp	r4, r2
 801603a:	dd00      	ble.n	801603e <_dtoa_r+0x752>
 801603c:	0013      	movs	r3, r2
 801603e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016040:	1ae4      	subs	r4, r4, r3
 8016042:	1ad2      	subs	r2, r2, r3
 8016044:	920a      	str	r2, [sp, #40]	; 0x28
 8016046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016048:	1ad3      	subs	r3, r2, r3
 801604a:	930b      	str	r3, [sp, #44]	; 0x2c
 801604c:	9b04      	ldr	r3, [sp, #16]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d01f      	beq.n	8016092 <_dtoa_r+0x7a6>
 8016052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016054:	2b00      	cmp	r3, #0
 8016056:	d100      	bne.n	801605a <_dtoa_r+0x76e>
 8016058:	e0af      	b.n	80161ba <_dtoa_r+0x8ce>
 801605a:	2d00      	cmp	r5, #0
 801605c:	d011      	beq.n	8016082 <_dtoa_r+0x796>
 801605e:	0031      	movs	r1, r6
 8016060:	002a      	movs	r2, r5
 8016062:	9802      	ldr	r0, [sp, #8]
 8016064:	f001 f826 	bl	80170b4 <__pow5mult>
 8016068:	9a03      	ldr	r2, [sp, #12]
 801606a:	0001      	movs	r1, r0
 801606c:	0006      	movs	r6, r0
 801606e:	9802      	ldr	r0, [sp, #8]
 8016070:	f000 ff90 	bl	8016f94 <__multiply>
 8016074:	9903      	ldr	r1, [sp, #12]
 8016076:	9010      	str	r0, [sp, #64]	; 0x40
 8016078:	9802      	ldr	r0, [sp, #8]
 801607a:	f000 feb3 	bl	8016de4 <_Bfree>
 801607e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016080:	9303      	str	r3, [sp, #12]
 8016082:	9b04      	ldr	r3, [sp, #16]
 8016084:	1b5a      	subs	r2, r3, r5
 8016086:	d004      	beq.n	8016092 <_dtoa_r+0x7a6>
 8016088:	9903      	ldr	r1, [sp, #12]
 801608a:	9802      	ldr	r0, [sp, #8]
 801608c:	f001 f812 	bl	80170b4 <__pow5mult>
 8016090:	9003      	str	r0, [sp, #12]
 8016092:	2101      	movs	r1, #1
 8016094:	9802      	ldr	r0, [sp, #8]
 8016096:	f000 ff74 	bl	8016f82 <__i2b>
 801609a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801609c:	9004      	str	r0, [sp, #16]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d100      	bne.n	80160a4 <_dtoa_r+0x7b8>
 80160a2:	e1e3      	b.n	801646c <_dtoa_r+0xb80>
 80160a4:	001a      	movs	r2, r3
 80160a6:	0001      	movs	r1, r0
 80160a8:	9802      	ldr	r0, [sp, #8]
 80160aa:	f001 f803 	bl	80170b4 <__pow5mult>
 80160ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160b0:	9004      	str	r0, [sp, #16]
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	dd00      	ble.n	80160b8 <_dtoa_r+0x7cc>
 80160b6:	e082      	b.n	80161be <_dtoa_r+0x8d2>
 80160b8:	2500      	movs	r5, #0
 80160ba:	9b06      	ldr	r3, [sp, #24]
 80160bc:	42ab      	cmp	r3, r5
 80160be:	d10e      	bne.n	80160de <_dtoa_r+0x7f2>
 80160c0:	9b07      	ldr	r3, [sp, #28]
 80160c2:	031b      	lsls	r3, r3, #12
 80160c4:	42ab      	cmp	r3, r5
 80160c6:	d10a      	bne.n	80160de <_dtoa_r+0x7f2>
 80160c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160ca:	9a07      	ldr	r2, [sp, #28]
 80160cc:	4213      	tst	r3, r2
 80160ce:	d006      	beq.n	80160de <_dtoa_r+0x7f2>
 80160d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160d2:	3501      	adds	r5, #1
 80160d4:	3301      	adds	r3, #1
 80160d6:	930a      	str	r3, [sp, #40]	; 0x28
 80160d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160da:	3301      	adds	r3, #1
 80160dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80160de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160e0:	2001      	movs	r0, #1
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d16c      	bne.n	80161c0 <_dtoa_r+0x8d4>
 80160e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160e8:	1818      	adds	r0, r3, r0
 80160ea:	231f      	movs	r3, #31
 80160ec:	4018      	ands	r0, r3
 80160ee:	d07e      	beq.n	80161ee <_dtoa_r+0x902>
 80160f0:	3301      	adds	r3, #1
 80160f2:	1a1b      	subs	r3, r3, r0
 80160f4:	2b04      	cmp	r3, #4
 80160f6:	dd70      	ble.n	80161da <_dtoa_r+0x8ee>
 80160f8:	231c      	movs	r3, #28
 80160fa:	1a18      	subs	r0, r3, r0
 80160fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160fe:	1824      	adds	r4, r4, r0
 8016100:	181b      	adds	r3, r3, r0
 8016102:	930a      	str	r3, [sp, #40]	; 0x28
 8016104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016106:	181b      	adds	r3, r3, r0
 8016108:	930b      	str	r3, [sp, #44]	; 0x2c
 801610a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801610c:	2b00      	cmp	r3, #0
 801610e:	dd05      	ble.n	801611c <_dtoa_r+0x830>
 8016110:	001a      	movs	r2, r3
 8016112:	9903      	ldr	r1, [sp, #12]
 8016114:	9802      	ldr	r0, [sp, #8]
 8016116:	f001 f80f 	bl	8017138 <__lshift>
 801611a:	9003      	str	r0, [sp, #12]
 801611c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801611e:	2b00      	cmp	r3, #0
 8016120:	dd05      	ble.n	801612e <_dtoa_r+0x842>
 8016122:	001a      	movs	r2, r3
 8016124:	9904      	ldr	r1, [sp, #16]
 8016126:	9802      	ldr	r0, [sp, #8]
 8016128:	f001 f806 	bl	8017138 <__lshift>
 801612c:	9004      	str	r0, [sp, #16]
 801612e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016130:	2b00      	cmp	r3, #0
 8016132:	d05e      	beq.n	80161f2 <_dtoa_r+0x906>
 8016134:	9904      	ldr	r1, [sp, #16]
 8016136:	9803      	ldr	r0, [sp, #12]
 8016138:	f001 f850 	bl	80171dc <__mcmp>
 801613c:	2800      	cmp	r0, #0
 801613e:	da58      	bge.n	80161f2 <_dtoa_r+0x906>
 8016140:	2300      	movs	r3, #0
 8016142:	220a      	movs	r2, #10
 8016144:	9903      	ldr	r1, [sp, #12]
 8016146:	9802      	ldr	r0, [sp, #8]
 8016148:	f000 fe56 	bl	8016df8 <__multadd>
 801614c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801614e:	3f01      	subs	r7, #1
 8016150:	9003      	str	r0, [sp, #12]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d100      	bne.n	8016158 <_dtoa_r+0x86c>
 8016156:	e190      	b.n	801647a <_dtoa_r+0xb8e>
 8016158:	2300      	movs	r3, #0
 801615a:	0031      	movs	r1, r6
 801615c:	220a      	movs	r2, #10
 801615e:	9802      	ldr	r0, [sp, #8]
 8016160:	f000 fe4a 	bl	8016df8 <__multadd>
 8016164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016166:	0006      	movs	r6, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	dd00      	ble.n	801616e <_dtoa_r+0x882>
 801616c:	e088      	b.n	8016280 <_dtoa_r+0x994>
 801616e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016170:	2b02      	cmp	r3, #2
 8016172:	dc00      	bgt.n	8016176 <_dtoa_r+0x88a>
 8016174:	e084      	b.n	8016280 <_dtoa_r+0x994>
 8016176:	e044      	b.n	8016202 <_dtoa_r+0x916>
 8016178:	2336      	movs	r3, #54	; 0x36
 801617a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801617c:	1a9b      	subs	r3, r3, r2
 801617e:	e747      	b.n	8016010 <_dtoa_r+0x724>
 8016180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016182:	1e5d      	subs	r5, r3, #1
 8016184:	9b04      	ldr	r3, [sp, #16]
 8016186:	42ab      	cmp	r3, r5
 8016188:	db08      	blt.n	801619c <_dtoa_r+0x8b0>
 801618a:	1b5d      	subs	r5, r3, r5
 801618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801618e:	2b00      	cmp	r3, #0
 8016190:	da0c      	bge.n	80161ac <_dtoa_r+0x8c0>
 8016192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016196:	1a9c      	subs	r4, r3, r2
 8016198:	2300      	movs	r3, #0
 801619a:	e73b      	b.n	8016014 <_dtoa_r+0x728>
 801619c:	9b04      	ldr	r3, [sp, #16]
 801619e:	9504      	str	r5, [sp, #16]
 80161a0:	1aea      	subs	r2, r5, r3
 80161a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161a4:	2500      	movs	r5, #0
 80161a6:	189b      	adds	r3, r3, r2
 80161a8:	9311      	str	r3, [sp, #68]	; 0x44
 80161aa:	e7ef      	b.n	801618c <_dtoa_r+0x8a0>
 80161ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80161ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b0:	e730      	b.n	8016014 <_dtoa_r+0x728>
 80161b2:	9d04      	ldr	r5, [sp, #16]
 80161b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80161b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80161b8:	e737      	b.n	801602a <_dtoa_r+0x73e>
 80161ba:	9a04      	ldr	r2, [sp, #16]
 80161bc:	e764      	b.n	8016088 <_dtoa_r+0x79c>
 80161be:	2500      	movs	r5, #0
 80161c0:	9b04      	ldr	r3, [sp, #16]
 80161c2:	9a04      	ldr	r2, [sp, #16]
 80161c4:	691b      	ldr	r3, [r3, #16]
 80161c6:	9310      	str	r3, [sp, #64]	; 0x40
 80161c8:	3303      	adds	r3, #3
 80161ca:	009b      	lsls	r3, r3, #2
 80161cc:	18d3      	adds	r3, r2, r3
 80161ce:	6858      	ldr	r0, [r3, #4]
 80161d0:	f000 fe8e 	bl	8016ef0 <__hi0bits>
 80161d4:	2320      	movs	r3, #32
 80161d6:	1a18      	subs	r0, r3, r0
 80161d8:	e785      	b.n	80160e6 <_dtoa_r+0x7fa>
 80161da:	2b04      	cmp	r3, #4
 80161dc:	d095      	beq.n	801610a <_dtoa_r+0x81e>
 80161de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161e0:	331c      	adds	r3, #28
 80161e2:	18d2      	adds	r2, r2, r3
 80161e4:	920a      	str	r2, [sp, #40]	; 0x28
 80161e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80161e8:	18e4      	adds	r4, r4, r3
 80161ea:	18d3      	adds	r3, r2, r3
 80161ec:	e78c      	b.n	8016108 <_dtoa_r+0x81c>
 80161ee:	0003      	movs	r3, r0
 80161f0:	e7f5      	b.n	80161de <_dtoa_r+0x8f2>
 80161f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	dc3d      	bgt.n	8016274 <_dtoa_r+0x988>
 80161f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161fa:	2b02      	cmp	r3, #2
 80161fc:	dd3a      	ble.n	8016274 <_dtoa_r+0x988>
 80161fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016200:	930c      	str	r3, [sp, #48]	; 0x30
 8016202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016204:	2b00      	cmp	r3, #0
 8016206:	d10c      	bne.n	8016222 <_dtoa_r+0x936>
 8016208:	9904      	ldr	r1, [sp, #16]
 801620a:	2205      	movs	r2, #5
 801620c:	9802      	ldr	r0, [sp, #8]
 801620e:	f000 fdf3 	bl	8016df8 <__multadd>
 8016212:	9004      	str	r0, [sp, #16]
 8016214:	0001      	movs	r1, r0
 8016216:	9803      	ldr	r0, [sp, #12]
 8016218:	f000 ffe0 	bl	80171dc <__mcmp>
 801621c:	2800      	cmp	r0, #0
 801621e:	dd00      	ble.n	8016222 <_dtoa_r+0x936>
 8016220:	e5ad      	b.n	8015d7e <_dtoa_r+0x492>
 8016222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016224:	9d08      	ldr	r5, [sp, #32]
 8016226:	43df      	mvns	r7, r3
 8016228:	2300      	movs	r3, #0
 801622a:	9309      	str	r3, [sp, #36]	; 0x24
 801622c:	9904      	ldr	r1, [sp, #16]
 801622e:	9802      	ldr	r0, [sp, #8]
 8016230:	f000 fdd8 	bl	8016de4 <_Bfree>
 8016234:	2e00      	cmp	r6, #0
 8016236:	d100      	bne.n	801623a <_dtoa_r+0x94e>
 8016238:	e69b      	b.n	8015f72 <_dtoa_r+0x686>
 801623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801623c:	2b00      	cmp	r3, #0
 801623e:	d005      	beq.n	801624c <_dtoa_r+0x960>
 8016240:	42b3      	cmp	r3, r6
 8016242:	d003      	beq.n	801624c <_dtoa_r+0x960>
 8016244:	0019      	movs	r1, r3
 8016246:	9802      	ldr	r0, [sp, #8]
 8016248:	f000 fdcc 	bl	8016de4 <_Bfree>
 801624c:	0031      	movs	r1, r6
 801624e:	9802      	ldr	r0, [sp, #8]
 8016250:	f000 fdc8 	bl	8016de4 <_Bfree>
 8016254:	e68d      	b.n	8015f72 <_dtoa_r+0x686>
 8016256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016258:	9304      	str	r3, [sp, #16]
 801625a:	001e      	movs	r6, r3
 801625c:	e7e1      	b.n	8016222 <_dtoa_r+0x936>
 801625e:	2300      	movs	r3, #0
 8016260:	e7fa      	b.n	8016258 <_dtoa_r+0x96c>
 8016262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016264:	0037      	movs	r7, r6
 8016266:	9304      	str	r3, [sp, #16]
 8016268:	001e      	movs	r6, r3
 801626a:	e588      	b.n	8015d7e <_dtoa_r+0x492>
 801626c:	40240000 	.word	0x40240000
 8016270:	00000433 	.word	0x00000433
 8016274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016276:	2b00      	cmp	r3, #0
 8016278:	d100      	bne.n	801627c <_dtoa_r+0x990>
 801627a:	e0b2      	b.n	80163e2 <_dtoa_r+0xaf6>
 801627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801627e:	930c      	str	r3, [sp, #48]	; 0x30
 8016280:	2c00      	cmp	r4, #0
 8016282:	dd05      	ble.n	8016290 <_dtoa_r+0x9a4>
 8016284:	0031      	movs	r1, r6
 8016286:	0022      	movs	r2, r4
 8016288:	9802      	ldr	r0, [sp, #8]
 801628a:	f000 ff55 	bl	8017138 <__lshift>
 801628e:	0006      	movs	r6, r0
 8016290:	0030      	movs	r0, r6
 8016292:	2d00      	cmp	r5, #0
 8016294:	d011      	beq.n	80162ba <_dtoa_r+0x9ce>
 8016296:	6871      	ldr	r1, [r6, #4]
 8016298:	9802      	ldr	r0, [sp, #8]
 801629a:	f000 fd7b 	bl	8016d94 <_Balloc>
 801629e:	0031      	movs	r1, r6
 80162a0:	0004      	movs	r4, r0
 80162a2:	6933      	ldr	r3, [r6, #16]
 80162a4:	310c      	adds	r1, #12
 80162a6:	1c9a      	adds	r2, r3, #2
 80162a8:	0092      	lsls	r2, r2, #2
 80162aa:	300c      	adds	r0, #12
 80162ac:	f7fc fe8b 	bl	8012fc6 <memcpy>
 80162b0:	2201      	movs	r2, #1
 80162b2:	0021      	movs	r1, r4
 80162b4:	9802      	ldr	r0, [sp, #8]
 80162b6:	f000 ff3f 	bl	8017138 <__lshift>
 80162ba:	9609      	str	r6, [sp, #36]	; 0x24
 80162bc:	0006      	movs	r6, r0
 80162be:	9b08      	ldr	r3, [sp, #32]
 80162c0:	930a      	str	r3, [sp, #40]	; 0x28
 80162c2:	9904      	ldr	r1, [sp, #16]
 80162c4:	9803      	ldr	r0, [sp, #12]
 80162c6:	f7ff fa8b 	bl	80157e0 <quorem>
 80162ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162cc:	900d      	str	r0, [sp, #52]	; 0x34
 80162ce:	0004      	movs	r4, r0
 80162d0:	9803      	ldr	r0, [sp, #12]
 80162d2:	f000 ff83 	bl	80171dc <__mcmp>
 80162d6:	0032      	movs	r2, r6
 80162d8:	9010      	str	r0, [sp, #64]	; 0x40
 80162da:	9904      	ldr	r1, [sp, #16]
 80162dc:	9802      	ldr	r0, [sp, #8]
 80162de:	f000 ff97 	bl	8017210 <__mdiff>
 80162e2:	2301      	movs	r3, #1
 80162e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80162e6:	68c3      	ldr	r3, [r0, #12]
 80162e8:	3430      	adds	r4, #48	; 0x30
 80162ea:	0005      	movs	r5, r0
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d104      	bne.n	80162fa <_dtoa_r+0xa0e>
 80162f0:	0001      	movs	r1, r0
 80162f2:	9803      	ldr	r0, [sp, #12]
 80162f4:	f000 ff72 	bl	80171dc <__mcmp>
 80162f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80162fa:	0029      	movs	r1, r5
 80162fc:	9802      	ldr	r0, [sp, #8]
 80162fe:	f000 fd71 	bl	8016de4 <_Bfree>
 8016302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016304:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016306:	4313      	orrs	r3, r2
 8016308:	d10e      	bne.n	8016328 <_dtoa_r+0xa3c>
 801630a:	9a06      	ldr	r2, [sp, #24]
 801630c:	3301      	adds	r3, #1
 801630e:	4213      	tst	r3, r2
 8016310:	d10a      	bne.n	8016328 <_dtoa_r+0xa3c>
 8016312:	2c39      	cmp	r4, #57	; 0x39
 8016314:	d026      	beq.n	8016364 <_dtoa_r+0xa78>
 8016316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016318:	2b00      	cmp	r3, #0
 801631a:	dd01      	ble.n	8016320 <_dtoa_r+0xa34>
 801631c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801631e:	3431      	adds	r4, #49	; 0x31
 8016320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016322:	1c5d      	adds	r5, r3, #1
 8016324:	701c      	strb	r4, [r3, #0]
 8016326:	e781      	b.n	801622c <_dtoa_r+0x940>
 8016328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801632a:	2b00      	cmp	r3, #0
 801632c:	db07      	blt.n	801633e <_dtoa_r+0xa52>
 801632e:	001d      	movs	r5, r3
 8016330:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016332:	431d      	orrs	r5, r3
 8016334:	d122      	bne.n	801637c <_dtoa_r+0xa90>
 8016336:	2301      	movs	r3, #1
 8016338:	9a06      	ldr	r2, [sp, #24]
 801633a:	4213      	tst	r3, r2
 801633c:	d11e      	bne.n	801637c <_dtoa_r+0xa90>
 801633e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016340:	2b00      	cmp	r3, #0
 8016342:	dded      	ble.n	8016320 <_dtoa_r+0xa34>
 8016344:	9903      	ldr	r1, [sp, #12]
 8016346:	2201      	movs	r2, #1
 8016348:	9802      	ldr	r0, [sp, #8]
 801634a:	f000 fef5 	bl	8017138 <__lshift>
 801634e:	9904      	ldr	r1, [sp, #16]
 8016350:	9003      	str	r0, [sp, #12]
 8016352:	f000 ff43 	bl	80171dc <__mcmp>
 8016356:	2800      	cmp	r0, #0
 8016358:	dc02      	bgt.n	8016360 <_dtoa_r+0xa74>
 801635a:	d1e1      	bne.n	8016320 <_dtoa_r+0xa34>
 801635c:	07e3      	lsls	r3, r4, #31
 801635e:	d5df      	bpl.n	8016320 <_dtoa_r+0xa34>
 8016360:	2c39      	cmp	r4, #57	; 0x39
 8016362:	d1db      	bne.n	801631c <_dtoa_r+0xa30>
 8016364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016368:	1c5d      	adds	r5, r3, #1
 801636a:	2339      	movs	r3, #57	; 0x39
 801636c:	7013      	strb	r3, [r2, #0]
 801636e:	1e6b      	subs	r3, r5, #1
 8016370:	781a      	ldrb	r2, [r3, #0]
 8016372:	2a39      	cmp	r2, #57	; 0x39
 8016374:	d067      	beq.n	8016446 <_dtoa_r+0xb5a>
 8016376:	3201      	adds	r2, #1
 8016378:	701a      	strb	r2, [r3, #0]
 801637a:	e757      	b.n	801622c <_dtoa_r+0x940>
 801637c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801637e:	1c5d      	adds	r5, r3, #1
 8016380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016382:	2b00      	cmp	r3, #0
 8016384:	dd04      	ble.n	8016390 <_dtoa_r+0xaa4>
 8016386:	2c39      	cmp	r4, #57	; 0x39
 8016388:	d0ec      	beq.n	8016364 <_dtoa_r+0xa78>
 801638a:	3401      	adds	r4, #1
 801638c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801638e:	e7c9      	b.n	8016324 <_dtoa_r+0xa38>
 8016390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016394:	701c      	strb	r4, [r3, #0]
 8016396:	9b08      	ldr	r3, [sp, #32]
 8016398:	1aeb      	subs	r3, r5, r3
 801639a:	4293      	cmp	r3, r2
 801639c:	d03e      	beq.n	801641c <_dtoa_r+0xb30>
 801639e:	2300      	movs	r3, #0
 80163a0:	220a      	movs	r2, #10
 80163a2:	9903      	ldr	r1, [sp, #12]
 80163a4:	9802      	ldr	r0, [sp, #8]
 80163a6:	f000 fd27 	bl	8016df8 <__multadd>
 80163aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ac:	9003      	str	r0, [sp, #12]
 80163ae:	42b3      	cmp	r3, r6
 80163b0:	d109      	bne.n	80163c6 <_dtoa_r+0xada>
 80163b2:	2300      	movs	r3, #0
 80163b4:	220a      	movs	r2, #10
 80163b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163b8:	9802      	ldr	r0, [sp, #8]
 80163ba:	f000 fd1d 	bl	8016df8 <__multadd>
 80163be:	9009      	str	r0, [sp, #36]	; 0x24
 80163c0:	0006      	movs	r6, r0
 80163c2:	950a      	str	r5, [sp, #40]	; 0x28
 80163c4:	e77d      	b.n	80162c2 <_dtoa_r+0x9d6>
 80163c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163c8:	2300      	movs	r3, #0
 80163ca:	220a      	movs	r2, #10
 80163cc:	9802      	ldr	r0, [sp, #8]
 80163ce:	f000 fd13 	bl	8016df8 <__multadd>
 80163d2:	2300      	movs	r3, #0
 80163d4:	9009      	str	r0, [sp, #36]	; 0x24
 80163d6:	220a      	movs	r2, #10
 80163d8:	0031      	movs	r1, r6
 80163da:	9802      	ldr	r0, [sp, #8]
 80163dc:	f000 fd0c 	bl	8016df8 <__multadd>
 80163e0:	e7ee      	b.n	80163c0 <_dtoa_r+0xad4>
 80163e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163e4:	930c      	str	r3, [sp, #48]	; 0x30
 80163e6:	9b08      	ldr	r3, [sp, #32]
 80163e8:	9306      	str	r3, [sp, #24]
 80163ea:	9904      	ldr	r1, [sp, #16]
 80163ec:	9803      	ldr	r0, [sp, #12]
 80163ee:	f7ff f9f7 	bl	80157e0 <quorem>
 80163f2:	9b06      	ldr	r3, [sp, #24]
 80163f4:	3030      	adds	r0, #48	; 0x30
 80163f6:	1c5d      	adds	r5, r3, #1
 80163f8:	7018      	strb	r0, [r3, #0]
 80163fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163fc:	9b08      	ldr	r3, [sp, #32]
 80163fe:	0004      	movs	r4, r0
 8016400:	1aeb      	subs	r3, r5, r3
 8016402:	429a      	cmp	r2, r3
 8016404:	dd08      	ble.n	8016418 <_dtoa_r+0xb2c>
 8016406:	2300      	movs	r3, #0
 8016408:	220a      	movs	r2, #10
 801640a:	9903      	ldr	r1, [sp, #12]
 801640c:	9802      	ldr	r0, [sp, #8]
 801640e:	f000 fcf3 	bl	8016df8 <__multadd>
 8016412:	9506      	str	r5, [sp, #24]
 8016414:	9003      	str	r0, [sp, #12]
 8016416:	e7e8      	b.n	80163ea <_dtoa_r+0xafe>
 8016418:	2300      	movs	r3, #0
 801641a:	9309      	str	r3, [sp, #36]	; 0x24
 801641c:	9903      	ldr	r1, [sp, #12]
 801641e:	2201      	movs	r2, #1
 8016420:	9802      	ldr	r0, [sp, #8]
 8016422:	f000 fe89 	bl	8017138 <__lshift>
 8016426:	9904      	ldr	r1, [sp, #16]
 8016428:	9003      	str	r0, [sp, #12]
 801642a:	f000 fed7 	bl	80171dc <__mcmp>
 801642e:	2800      	cmp	r0, #0
 8016430:	dc9d      	bgt.n	801636e <_dtoa_r+0xa82>
 8016432:	d101      	bne.n	8016438 <_dtoa_r+0xb4c>
 8016434:	07e3      	lsls	r3, r4, #31
 8016436:	d49a      	bmi.n	801636e <_dtoa_r+0xa82>
 8016438:	1e6b      	subs	r3, r5, #1
 801643a:	781a      	ldrb	r2, [r3, #0]
 801643c:	2a30      	cmp	r2, #48	; 0x30
 801643e:	d000      	beq.n	8016442 <_dtoa_r+0xb56>
 8016440:	e6f4      	b.n	801622c <_dtoa_r+0x940>
 8016442:	001d      	movs	r5, r3
 8016444:	e7f8      	b.n	8016438 <_dtoa_r+0xb4c>
 8016446:	9a08      	ldr	r2, [sp, #32]
 8016448:	429a      	cmp	r2, r3
 801644a:	d103      	bne.n	8016454 <_dtoa_r+0xb68>
 801644c:	2331      	movs	r3, #49	; 0x31
 801644e:	3701      	adds	r7, #1
 8016450:	7013      	strb	r3, [r2, #0]
 8016452:	e6eb      	b.n	801622c <_dtoa_r+0x940>
 8016454:	001d      	movs	r5, r3
 8016456:	e78a      	b.n	801636e <_dtoa_r+0xa82>
 8016458:	4b0b      	ldr	r3, [pc, #44]	; (8016488 <_dtoa_r+0xb9c>)
 801645a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801645c:	9308      	str	r3, [sp, #32]
 801645e:	4b0b      	ldr	r3, [pc, #44]	; (801648c <_dtoa_r+0xba0>)
 8016460:	2a00      	cmp	r2, #0
 8016462:	d001      	beq.n	8016468 <_dtoa_r+0xb7c>
 8016464:	f7ff fa75 	bl	8015952 <_dtoa_r+0x66>
 8016468:	f7ff fa75 	bl	8015956 <_dtoa_r+0x6a>
 801646c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801646e:	2b01      	cmp	r3, #1
 8016470:	dc00      	bgt.n	8016474 <_dtoa_r+0xb88>
 8016472:	e621      	b.n	80160b8 <_dtoa_r+0x7cc>
 8016474:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016476:	2001      	movs	r0, #1
 8016478:	e635      	b.n	80160e6 <_dtoa_r+0x7fa>
 801647a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801647c:	2b00      	cmp	r3, #0
 801647e:	dcb2      	bgt.n	80163e6 <_dtoa_r+0xafa>
 8016480:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016482:	2b02      	cmp	r3, #2
 8016484:	ddaf      	ble.n	80163e6 <_dtoa_r+0xafa>
 8016486:	e6bc      	b.n	8016202 <_dtoa_r+0x916>
 8016488:	0801a815 	.word	0x0801a815
 801648c:	0801a81d 	.word	0x0801a81d

08016490 <__errno>:
 8016490:	4b01      	ldr	r3, [pc, #4]	; (8016498 <__errno+0x8>)
 8016492:	6818      	ldr	r0, [r3, #0]
 8016494:	4770      	bx	lr
 8016496:	46c0      	nop			; (mov r8, r8)
 8016498:	200000c8 	.word	0x200000c8

0801649c <__libc_fini_array>:
 801649c:	b570      	push	{r4, r5, r6, lr}
 801649e:	4d07      	ldr	r5, [pc, #28]	; (80164bc <__libc_fini_array+0x20>)
 80164a0:	4c07      	ldr	r4, [pc, #28]	; (80164c0 <__libc_fini_array+0x24>)
 80164a2:	1b64      	subs	r4, r4, r5
 80164a4:	10a4      	asrs	r4, r4, #2
 80164a6:	2c00      	cmp	r4, #0
 80164a8:	d102      	bne.n	80164b0 <__libc_fini_array+0x14>
 80164aa:	f001 f95b 	bl	8017764 <_fini>
 80164ae:	bd70      	pop	{r4, r5, r6, pc}
 80164b0:	3c01      	subs	r4, #1
 80164b2:	00a3      	lsls	r3, r4, #2
 80164b4:	58eb      	ldr	r3, [r5, r3]
 80164b6:	4798      	blx	r3
 80164b8:	e7f5      	b.n	80164a6 <__libc_fini_array+0xa>
 80164ba:	46c0      	nop			; (mov r8, r8)
 80164bc:	0801a934 	.word	0x0801a934
 80164c0:	0801a938 	.word	0x0801a938

080164c4 <_malloc_trim_r>:
 80164c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164c6:	0005      	movs	r5, r0
 80164c8:	2008      	movs	r0, #8
 80164ca:	000c      	movs	r4, r1
 80164cc:	f7ff f95c 	bl	8015788 <sysconf>
 80164d0:	0007      	movs	r7, r0
 80164d2:	0028      	movs	r0, r5
 80164d4:	f7fc fd88 	bl	8012fe8 <__malloc_lock>
 80164d8:	2203      	movs	r2, #3
 80164da:	4e21      	ldr	r6, [pc, #132]	; (8016560 <_malloc_trim_r+0x9c>)
 80164dc:	0039      	movs	r1, r7
 80164de:	68b3      	ldr	r3, [r6, #8]
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	4393      	bics	r3, r2
 80164e4:	1b18      	subs	r0, r3, r4
 80164e6:	3811      	subs	r0, #17
 80164e8:	19c0      	adds	r0, r0, r7
 80164ea:	9301      	str	r3, [sp, #4]
 80164ec:	f7e9 fe30 	bl	8000150 <__udivsi3>
 80164f0:	1e44      	subs	r4, r0, #1
 80164f2:	437c      	muls	r4, r7
 80164f4:	42a7      	cmp	r7, r4
 80164f6:	dd04      	ble.n	8016502 <_malloc_trim_r+0x3e>
 80164f8:	0028      	movs	r0, r5
 80164fa:	f7fc fd7d 	bl	8012ff8 <__malloc_unlock>
 80164fe:	2000      	movs	r0, #0
 8016500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016502:	2100      	movs	r1, #0
 8016504:	0028      	movs	r0, r5
 8016506:	f7fc ff4f 	bl	80133a8 <_sbrk_r>
 801650a:	68b3      	ldr	r3, [r6, #8]
 801650c:	9a01      	ldr	r2, [sp, #4]
 801650e:	189b      	adds	r3, r3, r2
 8016510:	4298      	cmp	r0, r3
 8016512:	d1f1      	bne.n	80164f8 <_malloc_trim_r+0x34>
 8016514:	4261      	negs	r1, r4
 8016516:	0028      	movs	r0, r5
 8016518:	f7fc ff46 	bl	80133a8 <_sbrk_r>
 801651c:	1c43      	adds	r3, r0, #1
 801651e:	d110      	bne.n	8016542 <_malloc_trim_r+0x7e>
 8016520:	2100      	movs	r1, #0
 8016522:	0028      	movs	r0, r5
 8016524:	f7fc ff40 	bl	80133a8 <_sbrk_r>
 8016528:	68b2      	ldr	r2, [r6, #8]
 801652a:	1a81      	subs	r1, r0, r2
 801652c:	290f      	cmp	r1, #15
 801652e:	dde3      	ble.n	80164f8 <_malloc_trim_r+0x34>
 8016530:	4b0c      	ldr	r3, [pc, #48]	; (8016564 <_malloc_trim_r+0xa0>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	1ac0      	subs	r0, r0, r3
 8016536:	4b0c      	ldr	r3, [pc, #48]	; (8016568 <_malloc_trim_r+0xa4>)
 8016538:	6018      	str	r0, [r3, #0]
 801653a:	2301      	movs	r3, #1
 801653c:	430b      	orrs	r3, r1
 801653e:	6053      	str	r3, [r2, #4]
 8016540:	e7da      	b.n	80164f8 <_malloc_trim_r+0x34>
 8016542:	68b2      	ldr	r2, [r6, #8]
 8016544:	2601      	movs	r6, #1
 8016546:	9b01      	ldr	r3, [sp, #4]
 8016548:	0028      	movs	r0, r5
 801654a:	1b1b      	subs	r3, r3, r4
 801654c:	4333      	orrs	r3, r6
 801654e:	6053      	str	r3, [r2, #4]
 8016550:	4b05      	ldr	r3, [pc, #20]	; (8016568 <_malloc_trim_r+0xa4>)
 8016552:	681a      	ldr	r2, [r3, #0]
 8016554:	1b14      	subs	r4, r2, r4
 8016556:	601c      	str	r4, [r3, #0]
 8016558:	f7fc fd4e 	bl	8012ff8 <__malloc_unlock>
 801655c:	0030      	movs	r0, r6
 801655e:	e7cf      	b.n	8016500 <_malloc_trim_r+0x3c>
 8016560:	20000664 	.word	0x20000664
 8016564:	20000a6c 	.word	0x20000a6c
 8016568:	20006fec 	.word	0x20006fec

0801656c <_free_r>:
 801656c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801656e:	1e0d      	subs	r5, r1, #0
 8016570:	9001      	str	r0, [sp, #4]
 8016572:	d02d      	beq.n	80165d0 <_free_r+0x64>
 8016574:	f7fc fd38 	bl	8012fe8 <__malloc_lock>
 8016578:	2301      	movs	r3, #1
 801657a:	0029      	movs	r1, r5
 801657c:	469c      	mov	ip, r3
 801657e:	3908      	subs	r1, #8
 8016580:	684f      	ldr	r7, [r1, #4]
 8016582:	4662      	mov	r2, ip
 8016584:	003b      	movs	r3, r7
 8016586:	4666      	mov	r6, ip
 8016588:	4393      	bics	r3, r2
 801658a:	18c8      	adds	r0, r1, r3
 801658c:	6845      	ldr	r5, [r0, #4]
 801658e:	3202      	adds	r2, #2
 8016590:	4395      	bics	r5, r2
 8016592:	4a4a      	ldr	r2, [pc, #296]	; (80166bc <_free_r+0x150>)
 8016594:	4037      	ands	r7, r6
 8016596:	6896      	ldr	r6, [r2, #8]
 8016598:	4286      	cmp	r6, r0
 801659a:	d11a      	bne.n	80165d2 <_free_r+0x66>
 801659c:	195b      	adds	r3, r3, r5
 801659e:	2f00      	cmp	r7, #0
 80165a0:	d106      	bne.n	80165b0 <_free_r+0x44>
 80165a2:	6808      	ldr	r0, [r1, #0]
 80165a4:	1a09      	subs	r1, r1, r0
 80165a6:	688d      	ldr	r5, [r1, #8]
 80165a8:	181b      	adds	r3, r3, r0
 80165aa:	68c8      	ldr	r0, [r1, #12]
 80165ac:	60e8      	str	r0, [r5, #12]
 80165ae:	6085      	str	r5, [r0, #8]
 80165b0:	2001      	movs	r0, #1
 80165b2:	4318      	orrs	r0, r3
 80165b4:	6048      	str	r0, [r1, #4]
 80165b6:	6091      	str	r1, [r2, #8]
 80165b8:	4a41      	ldr	r2, [pc, #260]	; (80166c0 <_free_r+0x154>)
 80165ba:	6812      	ldr	r2, [r2, #0]
 80165bc:	429a      	cmp	r2, r3
 80165be:	d804      	bhi.n	80165ca <_free_r+0x5e>
 80165c0:	4b40      	ldr	r3, [pc, #256]	; (80166c4 <_free_r+0x158>)
 80165c2:	9801      	ldr	r0, [sp, #4]
 80165c4:	6819      	ldr	r1, [r3, #0]
 80165c6:	f7ff ff7d 	bl	80164c4 <_malloc_trim_r>
 80165ca:	9801      	ldr	r0, [sp, #4]
 80165cc:	f7fc fd14 	bl	8012ff8 <__malloc_unlock>
 80165d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80165d2:	2600      	movs	r6, #0
 80165d4:	6045      	str	r5, [r0, #4]
 80165d6:	42b7      	cmp	r7, r6
 80165d8:	d109      	bne.n	80165ee <_free_r+0x82>
 80165da:	680f      	ldr	r7, [r1, #0]
 80165dc:	4c3a      	ldr	r4, [pc, #232]	; (80166c8 <_free_r+0x15c>)
 80165de:	1bc9      	subs	r1, r1, r7
 80165e0:	19db      	adds	r3, r3, r7
 80165e2:	688f      	ldr	r7, [r1, #8]
 80165e4:	42a7      	cmp	r7, r4
 80165e6:	d02b      	beq.n	8016640 <_free_r+0xd4>
 80165e8:	68cc      	ldr	r4, [r1, #12]
 80165ea:	60fc      	str	r4, [r7, #12]
 80165ec:	60a7      	str	r7, [r4, #8]
 80165ee:	1947      	adds	r7, r0, r5
 80165f0:	687c      	ldr	r4, [r7, #4]
 80165f2:	2701      	movs	r7, #1
 80165f4:	423c      	tst	r4, r7
 80165f6:	d10b      	bne.n	8016610 <_free_r+0xa4>
 80165f8:	195b      	adds	r3, r3, r5
 80165fa:	6885      	ldr	r5, [r0, #8]
 80165fc:	2e00      	cmp	r6, #0
 80165fe:	d121      	bne.n	8016644 <_free_r+0xd8>
 8016600:	4c31      	ldr	r4, [pc, #196]	; (80166c8 <_free_r+0x15c>)
 8016602:	42a5      	cmp	r5, r4
 8016604:	d11e      	bne.n	8016644 <_free_r+0xd8>
 8016606:	003e      	movs	r6, r7
 8016608:	6151      	str	r1, [r2, #20]
 801660a:	6111      	str	r1, [r2, #16]
 801660c:	60cd      	str	r5, [r1, #12]
 801660e:	608d      	str	r5, [r1, #8]
 8016610:	2001      	movs	r0, #1
 8016612:	0005      	movs	r5, r0
 8016614:	431d      	orrs	r5, r3
 8016616:	604d      	str	r5, [r1, #4]
 8016618:	50cb      	str	r3, [r1, r3]
 801661a:	2e00      	cmp	r6, #0
 801661c:	d1d5      	bne.n	80165ca <_free_r+0x5e>
 801661e:	4d2b      	ldr	r5, [pc, #172]	; (80166cc <_free_r+0x160>)
 8016620:	42ab      	cmp	r3, r5
 8016622:	d813      	bhi.n	801664c <_free_r+0xe0>
 8016624:	08db      	lsrs	r3, r3, #3
 8016626:	109d      	asrs	r5, r3, #2
 8016628:	40a8      	lsls	r0, r5
 801662a:	6854      	ldr	r4, [r2, #4]
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	4320      	orrs	r0, r4
 8016630:	6050      	str	r0, [r2, #4]
 8016632:	189a      	adds	r2, r3, r2
 8016634:	6893      	ldr	r3, [r2, #8]
 8016636:	60ca      	str	r2, [r1, #12]
 8016638:	608b      	str	r3, [r1, #8]
 801663a:	6091      	str	r1, [r2, #8]
 801663c:	60d9      	str	r1, [r3, #12]
 801663e:	e7c4      	b.n	80165ca <_free_r+0x5e>
 8016640:	4666      	mov	r6, ip
 8016642:	e7d4      	b.n	80165ee <_free_r+0x82>
 8016644:	68c0      	ldr	r0, [r0, #12]
 8016646:	60e8      	str	r0, [r5, #12]
 8016648:	6085      	str	r5, [r0, #8]
 801664a:	e7e1      	b.n	8016610 <_free_r+0xa4>
 801664c:	0a5d      	lsrs	r5, r3, #9
 801664e:	2d04      	cmp	r5, #4
 8016650:	d812      	bhi.n	8016678 <_free_r+0x10c>
 8016652:	0998      	lsrs	r0, r3, #6
 8016654:	3038      	adds	r0, #56	; 0x38
 8016656:	00c6      	lsls	r6, r0, #3
 8016658:	18b6      	adds	r6, r6, r2
 801665a:	68b5      	ldr	r5, [r6, #8]
 801665c:	2703      	movs	r7, #3
 801665e:	42ae      	cmp	r6, r5
 8016660:	d125      	bne.n	80166ae <_free_r+0x142>
 8016662:	2301      	movs	r3, #1
 8016664:	1080      	asrs	r0, r0, #2
 8016666:	4083      	lsls	r3, r0
 8016668:	6850      	ldr	r0, [r2, #4]
 801666a:	4303      	orrs	r3, r0
 801666c:	6053      	str	r3, [r2, #4]
 801666e:	60ce      	str	r6, [r1, #12]
 8016670:	608d      	str	r5, [r1, #8]
 8016672:	60b1      	str	r1, [r6, #8]
 8016674:	60e9      	str	r1, [r5, #12]
 8016676:	e7a8      	b.n	80165ca <_free_r+0x5e>
 8016678:	2d14      	cmp	r5, #20
 801667a:	d802      	bhi.n	8016682 <_free_r+0x116>
 801667c:	0028      	movs	r0, r5
 801667e:	305b      	adds	r0, #91	; 0x5b
 8016680:	e7e9      	b.n	8016656 <_free_r+0xea>
 8016682:	2d54      	cmp	r5, #84	; 0x54
 8016684:	d802      	bhi.n	801668c <_free_r+0x120>
 8016686:	0b18      	lsrs	r0, r3, #12
 8016688:	306e      	adds	r0, #110	; 0x6e
 801668a:	e7e4      	b.n	8016656 <_free_r+0xea>
 801668c:	20aa      	movs	r0, #170	; 0xaa
 801668e:	0040      	lsls	r0, r0, #1
 8016690:	4285      	cmp	r5, r0
 8016692:	d802      	bhi.n	801669a <_free_r+0x12e>
 8016694:	0bd8      	lsrs	r0, r3, #15
 8016696:	3077      	adds	r0, #119	; 0x77
 8016698:	e7dd      	b.n	8016656 <_free_r+0xea>
 801669a:	4e0d      	ldr	r6, [pc, #52]	; (80166d0 <_free_r+0x164>)
 801669c:	207e      	movs	r0, #126	; 0x7e
 801669e:	42b5      	cmp	r5, r6
 80166a0:	d8d9      	bhi.n	8016656 <_free_r+0xea>
 80166a2:	0c98      	lsrs	r0, r3, #18
 80166a4:	307c      	adds	r0, #124	; 0x7c
 80166a6:	e7d6      	b.n	8016656 <_free_r+0xea>
 80166a8:	68ad      	ldr	r5, [r5, #8]
 80166aa:	42ae      	cmp	r6, r5
 80166ac:	d003      	beq.n	80166b6 <_free_r+0x14a>
 80166ae:	686a      	ldr	r2, [r5, #4]
 80166b0:	43ba      	bics	r2, r7
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d8f8      	bhi.n	80166a8 <_free_r+0x13c>
 80166b6:	68ee      	ldr	r6, [r5, #12]
 80166b8:	e7d9      	b.n	801666e <_free_r+0x102>
 80166ba:	46c0      	nop			; (mov r8, r8)
 80166bc:	20000664 	.word	0x20000664
 80166c0:	20000a70 	.word	0x20000a70
 80166c4:	2000701c 	.word	0x2000701c
 80166c8:	2000066c 	.word	0x2000066c
 80166cc:	000001ff 	.word	0x000001ff
 80166d0:	00000554 	.word	0x00000554

080166d4 <rshift>:
 80166d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166d6:	0004      	movs	r4, r0
 80166d8:	6905      	ldr	r5, [r0, #16]
 80166da:	3414      	adds	r4, #20
 80166dc:	114b      	asrs	r3, r1, #5
 80166de:	0026      	movs	r6, r4
 80166e0:	429d      	cmp	r5, r3
 80166e2:	dd14      	ble.n	801670e <rshift+0x3a>
 80166e4:	221f      	movs	r2, #31
 80166e6:	00ad      	lsls	r5, r5, #2
 80166e8:	009b      	lsls	r3, r3, #2
 80166ea:	4011      	ands	r1, r2
 80166ec:	1965      	adds	r5, r4, r5
 80166ee:	18e3      	adds	r3, r4, r3
 80166f0:	0022      	movs	r2, r4
 80166f2:	2900      	cmp	r1, #0
 80166f4:	d01e      	beq.n	8016734 <rshift+0x60>
 80166f6:	cb04      	ldmia	r3!, {r2}
 80166f8:	2720      	movs	r7, #32
 80166fa:	40ca      	lsrs	r2, r1
 80166fc:	46a4      	mov	ip, r4
 80166fe:	1a7f      	subs	r7, r7, r1
 8016700:	4666      	mov	r6, ip
 8016702:	429d      	cmp	r5, r3
 8016704:	d80b      	bhi.n	801671e <rshift+0x4a>
 8016706:	6032      	str	r2, [r6, #0]
 8016708:	2a00      	cmp	r2, #0
 801670a:	d000      	beq.n	801670e <rshift+0x3a>
 801670c:	3604      	adds	r6, #4
 801670e:	1b33      	subs	r3, r6, r4
 8016710:	109b      	asrs	r3, r3, #2
 8016712:	6103      	str	r3, [r0, #16]
 8016714:	42a6      	cmp	r6, r4
 8016716:	d101      	bne.n	801671c <rshift+0x48>
 8016718:	2300      	movs	r3, #0
 801671a:	6143      	str	r3, [r0, #20]
 801671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801671e:	681e      	ldr	r6, [r3, #0]
 8016720:	40be      	lsls	r6, r7
 8016722:	4332      	orrs	r2, r6
 8016724:	4666      	mov	r6, ip
 8016726:	c604      	stmia	r6!, {r2}
 8016728:	cb04      	ldmia	r3!, {r2}
 801672a:	46b4      	mov	ip, r6
 801672c:	40ca      	lsrs	r2, r1
 801672e:	e7e7      	b.n	8016700 <rshift+0x2c>
 8016730:	cb02      	ldmia	r3!, {r1}
 8016732:	c202      	stmia	r2!, {r1}
 8016734:	0016      	movs	r6, r2
 8016736:	429d      	cmp	r5, r3
 8016738:	d8fa      	bhi.n	8016730 <rshift+0x5c>
 801673a:	e7e8      	b.n	801670e <rshift+0x3a>

0801673c <__hexdig_fun>:
 801673c:	0003      	movs	r3, r0
 801673e:	3b30      	subs	r3, #48	; 0x30
 8016740:	2b09      	cmp	r3, #9
 8016742:	d803      	bhi.n	801674c <__hexdig_fun+0x10>
 8016744:	3820      	subs	r0, #32
 8016746:	b2c3      	uxtb	r3, r0
 8016748:	0018      	movs	r0, r3
 801674a:	4770      	bx	lr
 801674c:	0003      	movs	r3, r0
 801674e:	3b61      	subs	r3, #97	; 0x61
 8016750:	2b05      	cmp	r3, #5
 8016752:	d801      	bhi.n	8016758 <__hexdig_fun+0x1c>
 8016754:	3847      	subs	r0, #71	; 0x47
 8016756:	e7f6      	b.n	8016746 <__hexdig_fun+0xa>
 8016758:	0002      	movs	r2, r0
 801675a:	3a41      	subs	r2, #65	; 0x41
 801675c:	2300      	movs	r3, #0
 801675e:	2a05      	cmp	r2, #5
 8016760:	d8f2      	bhi.n	8016748 <__hexdig_fun+0xc>
 8016762:	3827      	subs	r0, #39	; 0x27
 8016764:	e7ef      	b.n	8016746 <__hexdig_fun+0xa>

08016766 <__gethex>:
 8016766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016768:	b08d      	sub	sp, #52	; 0x34
 801676a:	9005      	str	r0, [sp, #20]
 801676c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801676e:	9109      	str	r1, [sp, #36]	; 0x24
 8016770:	9202      	str	r2, [sp, #8]
 8016772:	930a      	str	r3, [sp, #40]	; 0x28
 8016774:	f000 fadf 	bl	8016d36 <__localeconv_l>
 8016778:	6803      	ldr	r3, [r0, #0]
 801677a:	0018      	movs	r0, r3
 801677c:	9307      	str	r3, [sp, #28]
 801677e:	f7e9 fccb 	bl	8000118 <strlen>
 8016782:	2202      	movs	r2, #2
 8016784:	9b07      	ldr	r3, [sp, #28]
 8016786:	4252      	negs	r2, r2
 8016788:	181b      	adds	r3, r3, r0
 801678a:	3b01      	subs	r3, #1
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	9004      	str	r0, [sp, #16]
 8016790:	930b      	str	r3, [sp, #44]	; 0x2c
 8016792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016794:	6819      	ldr	r1, [r3, #0]
 8016796:	1c8b      	adds	r3, r1, #2
 8016798:	1a52      	subs	r2, r2, r1
 801679a:	18d1      	adds	r1, r2, r3
 801679c:	9301      	str	r3, [sp, #4]
 801679e:	9108      	str	r1, [sp, #32]
 80167a0:	9901      	ldr	r1, [sp, #4]
 80167a2:	3301      	adds	r3, #1
 80167a4:	7808      	ldrb	r0, [r1, #0]
 80167a6:	2830      	cmp	r0, #48	; 0x30
 80167a8:	d0f7      	beq.n	801679a <__gethex+0x34>
 80167aa:	f7ff ffc7 	bl	801673c <__hexdig_fun>
 80167ae:	1e07      	subs	r7, r0, #0
 80167b0:	d000      	beq.n	80167b4 <__gethex+0x4e>
 80167b2:	e06f      	b.n	8016894 <__gethex+0x12e>
 80167b4:	9a04      	ldr	r2, [sp, #16]
 80167b6:	9907      	ldr	r1, [sp, #28]
 80167b8:	9801      	ldr	r0, [sp, #4]
 80167ba:	f7fc fe4b 	bl	8013454 <strncmp>
 80167be:	2800      	cmp	r0, #0
 80167c0:	d000      	beq.n	80167c4 <__gethex+0x5e>
 80167c2:	e06d      	b.n	80168a0 <__gethex+0x13a>
 80167c4:	9b01      	ldr	r3, [sp, #4]
 80167c6:	9a04      	ldr	r2, [sp, #16]
 80167c8:	189c      	adds	r4, r3, r2
 80167ca:	7820      	ldrb	r0, [r4, #0]
 80167cc:	f7ff ffb6 	bl	801673c <__hexdig_fun>
 80167d0:	2800      	cmp	r0, #0
 80167d2:	d069      	beq.n	80168a8 <__gethex+0x142>
 80167d4:	9401      	str	r4, [sp, #4]
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	7818      	ldrb	r0, [r3, #0]
 80167da:	2830      	cmp	r0, #48	; 0x30
 80167dc:	d009      	beq.n	80167f2 <__gethex+0x8c>
 80167de:	f7ff ffad 	bl	801673c <__hexdig_fun>
 80167e2:	4243      	negs	r3, r0
 80167e4:	4143      	adcs	r3, r0
 80167e6:	9303      	str	r3, [sp, #12]
 80167e8:	2301      	movs	r3, #1
 80167ea:	0026      	movs	r6, r4
 80167ec:	9308      	str	r3, [sp, #32]
 80167ee:	9c01      	ldr	r4, [sp, #4]
 80167f0:	e004      	b.n	80167fc <__gethex+0x96>
 80167f2:	9b01      	ldr	r3, [sp, #4]
 80167f4:	3301      	adds	r3, #1
 80167f6:	9301      	str	r3, [sp, #4]
 80167f8:	e7ed      	b.n	80167d6 <__gethex+0x70>
 80167fa:	3401      	adds	r4, #1
 80167fc:	7820      	ldrb	r0, [r4, #0]
 80167fe:	f7ff ff9d 	bl	801673c <__hexdig_fun>
 8016802:	2800      	cmp	r0, #0
 8016804:	d1f9      	bne.n	80167fa <__gethex+0x94>
 8016806:	9a04      	ldr	r2, [sp, #16]
 8016808:	9907      	ldr	r1, [sp, #28]
 801680a:	0020      	movs	r0, r4
 801680c:	f7fc fe22 	bl	8013454 <strncmp>
 8016810:	2800      	cmp	r0, #0
 8016812:	d109      	bne.n	8016828 <__gethex+0xc2>
 8016814:	2e00      	cmp	r6, #0
 8016816:	d10a      	bne.n	801682e <__gethex+0xc8>
 8016818:	9b04      	ldr	r3, [sp, #16]
 801681a:	18e4      	adds	r4, r4, r3
 801681c:	0026      	movs	r6, r4
 801681e:	7820      	ldrb	r0, [r4, #0]
 8016820:	f7ff ff8c 	bl	801673c <__hexdig_fun>
 8016824:	2800      	cmp	r0, #0
 8016826:	d139      	bne.n	801689c <__gethex+0x136>
 8016828:	2700      	movs	r7, #0
 801682a:	42be      	cmp	r6, r7
 801682c:	d001      	beq.n	8016832 <__gethex+0xcc>
 801682e:	1b37      	subs	r7, r6, r4
 8016830:	00bf      	lsls	r7, r7, #2
 8016832:	7823      	ldrb	r3, [r4, #0]
 8016834:	2b50      	cmp	r3, #80	; 0x50
 8016836:	d001      	beq.n	801683c <__gethex+0xd6>
 8016838:	2b70      	cmp	r3, #112	; 0x70
 801683a:	d142      	bne.n	80168c2 <__gethex+0x15c>
 801683c:	7863      	ldrb	r3, [r4, #1]
 801683e:	2b2b      	cmp	r3, #43	; 0x2b
 8016840:	d034      	beq.n	80168ac <__gethex+0x146>
 8016842:	2b2d      	cmp	r3, #45	; 0x2d
 8016844:	d036      	beq.n	80168b4 <__gethex+0x14e>
 8016846:	2300      	movs	r3, #0
 8016848:	1c66      	adds	r6, r4, #1
 801684a:	9306      	str	r3, [sp, #24]
 801684c:	7830      	ldrb	r0, [r6, #0]
 801684e:	f7ff ff75 	bl	801673c <__hexdig_fun>
 8016852:	1e43      	subs	r3, r0, #1
 8016854:	b2db      	uxtb	r3, r3
 8016856:	2b18      	cmp	r3, #24
 8016858:	d833      	bhi.n	80168c2 <__gethex+0x15c>
 801685a:	3810      	subs	r0, #16
 801685c:	0005      	movs	r5, r0
 801685e:	3601      	adds	r6, #1
 8016860:	7830      	ldrb	r0, [r6, #0]
 8016862:	f7ff ff6b 	bl	801673c <__hexdig_fun>
 8016866:	1e43      	subs	r3, r0, #1
 8016868:	b2db      	uxtb	r3, r3
 801686a:	2b18      	cmp	r3, #24
 801686c:	d924      	bls.n	80168b8 <__gethex+0x152>
 801686e:	9b06      	ldr	r3, [sp, #24]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d000      	beq.n	8016876 <__gethex+0x110>
 8016874:	426d      	negs	r5, r5
 8016876:	197f      	adds	r7, r7, r5
 8016878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801687a:	601e      	str	r6, [r3, #0]
 801687c:	9b03      	ldr	r3, [sp, #12]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d021      	beq.n	80168c6 <__gethex+0x160>
 8016882:	9b08      	ldr	r3, [sp, #32]
 8016884:	2606      	movs	r6, #6
 8016886:	425a      	negs	r2, r3
 8016888:	4153      	adcs	r3, r2
 801688a:	425b      	negs	r3, r3
 801688c:	401e      	ands	r6, r3
 801688e:	0030      	movs	r0, r6
 8016890:	b00d      	add	sp, #52	; 0x34
 8016892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016894:	2300      	movs	r3, #0
 8016896:	9303      	str	r3, [sp, #12]
 8016898:	001e      	movs	r6, r3
 801689a:	e7a8      	b.n	80167ee <__gethex+0x88>
 801689c:	3401      	adds	r4, #1
 801689e:	e7be      	b.n	801681e <__gethex+0xb8>
 80168a0:	9c01      	ldr	r4, [sp, #4]
 80168a2:	2301      	movs	r3, #1
 80168a4:	9303      	str	r3, [sp, #12]
 80168a6:	e7c4      	b.n	8016832 <__gethex+0xcc>
 80168a8:	0007      	movs	r7, r0
 80168aa:	e7fa      	b.n	80168a2 <__gethex+0x13c>
 80168ac:	2300      	movs	r3, #0
 80168ae:	9306      	str	r3, [sp, #24]
 80168b0:	1ca6      	adds	r6, r4, #2
 80168b2:	e7cb      	b.n	801684c <__gethex+0xe6>
 80168b4:	2301      	movs	r3, #1
 80168b6:	e7fa      	b.n	80168ae <__gethex+0x148>
 80168b8:	230a      	movs	r3, #10
 80168ba:	435d      	muls	r5, r3
 80168bc:	182d      	adds	r5, r5, r0
 80168be:	3d10      	subs	r5, #16
 80168c0:	e7cd      	b.n	801685e <__gethex+0xf8>
 80168c2:	0026      	movs	r6, r4
 80168c4:	e7d8      	b.n	8016878 <__gethex+0x112>
 80168c6:	9b01      	ldr	r3, [sp, #4]
 80168c8:	9903      	ldr	r1, [sp, #12]
 80168ca:	1ae3      	subs	r3, r4, r3
 80168cc:	3b01      	subs	r3, #1
 80168ce:	2b07      	cmp	r3, #7
 80168d0:	dc47      	bgt.n	8016962 <__gethex+0x1fc>
 80168d2:	9805      	ldr	r0, [sp, #20]
 80168d4:	f000 fa5e 	bl	8016d94 <_Balloc>
 80168d8:	0003      	movs	r3, r0
 80168da:	3314      	adds	r3, #20
 80168dc:	9303      	str	r3, [sp, #12]
 80168de:	9308      	str	r3, [sp, #32]
 80168e0:	2300      	movs	r3, #0
 80168e2:	0005      	movs	r5, r0
 80168e4:	001e      	movs	r6, r3
 80168e6:	9306      	str	r3, [sp, #24]
 80168e8:	9b01      	ldr	r3, [sp, #4]
 80168ea:	42a3      	cmp	r3, r4
 80168ec:	d33c      	bcc.n	8016968 <__gethex+0x202>
 80168ee:	9c08      	ldr	r4, [sp, #32]
 80168f0:	9b03      	ldr	r3, [sp, #12]
 80168f2:	c440      	stmia	r4!, {r6}
 80168f4:	1ae4      	subs	r4, r4, r3
 80168f6:	10a4      	asrs	r4, r4, #2
 80168f8:	612c      	str	r4, [r5, #16]
 80168fa:	0030      	movs	r0, r6
 80168fc:	f000 faf8 	bl	8016ef0 <__hi0bits>
 8016900:	9b02      	ldr	r3, [sp, #8]
 8016902:	0164      	lsls	r4, r4, #5
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	1a26      	subs	r6, r4, r0
 8016908:	9301      	str	r3, [sp, #4]
 801690a:	429e      	cmp	r6, r3
 801690c:	dd5f      	ble.n	80169ce <__gethex+0x268>
 801690e:	1af6      	subs	r6, r6, r3
 8016910:	0031      	movs	r1, r6
 8016912:	0028      	movs	r0, r5
 8016914:	f000 fde3 	bl	80174de <__any_on>
 8016918:	1e04      	subs	r4, r0, #0
 801691a:	d00f      	beq.n	801693c <__gethex+0x1d6>
 801691c:	2401      	movs	r4, #1
 801691e:	211f      	movs	r1, #31
 8016920:	0020      	movs	r0, r4
 8016922:	1e73      	subs	r3, r6, #1
 8016924:	4019      	ands	r1, r3
 8016926:	4088      	lsls	r0, r1
 8016928:	0001      	movs	r1, r0
 801692a:	115a      	asrs	r2, r3, #5
 801692c:	9803      	ldr	r0, [sp, #12]
 801692e:	0092      	lsls	r2, r2, #2
 8016930:	5812      	ldr	r2, [r2, r0]
 8016932:	420a      	tst	r2, r1
 8016934:	d002      	beq.n	801693c <__gethex+0x1d6>
 8016936:	42a3      	cmp	r3, r4
 8016938:	dc41      	bgt.n	80169be <__gethex+0x258>
 801693a:	2402      	movs	r4, #2
 801693c:	0031      	movs	r1, r6
 801693e:	0028      	movs	r0, r5
 8016940:	f7ff fec8 	bl	80166d4 <rshift>
 8016944:	19bf      	adds	r7, r7, r6
 8016946:	9b02      	ldr	r3, [sp, #8]
 8016948:	689b      	ldr	r3, [r3, #8]
 801694a:	9304      	str	r3, [sp, #16]
 801694c:	42bb      	cmp	r3, r7
 801694e:	da4e      	bge.n	80169ee <__gethex+0x288>
 8016950:	0029      	movs	r1, r5
 8016952:	9805      	ldr	r0, [sp, #20]
 8016954:	f000 fa46 	bl	8016de4 <_Bfree>
 8016958:	2300      	movs	r3, #0
 801695a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801695c:	26a3      	movs	r6, #163	; 0xa3
 801695e:	6013      	str	r3, [r2, #0]
 8016960:	e795      	b.n	801688e <__gethex+0x128>
 8016962:	3101      	adds	r1, #1
 8016964:	105b      	asrs	r3, r3, #1
 8016966:	e7b2      	b.n	80168ce <__gethex+0x168>
 8016968:	1e63      	subs	r3, r4, #1
 801696a:	9309      	str	r3, [sp, #36]	; 0x24
 801696c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	4293      	cmp	r3, r2
 8016972:	d015      	beq.n	80169a0 <__gethex+0x23a>
 8016974:	9b06      	ldr	r3, [sp, #24]
 8016976:	2b20      	cmp	r3, #32
 8016978:	d105      	bne.n	8016986 <__gethex+0x220>
 801697a:	9b08      	ldr	r3, [sp, #32]
 801697c:	601e      	str	r6, [r3, #0]
 801697e:	2600      	movs	r6, #0
 8016980:	3304      	adds	r3, #4
 8016982:	9308      	str	r3, [sp, #32]
 8016984:	9606      	str	r6, [sp, #24]
 8016986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016988:	7818      	ldrb	r0, [r3, #0]
 801698a:	f7ff fed7 	bl	801673c <__hexdig_fun>
 801698e:	230f      	movs	r3, #15
 8016990:	4018      	ands	r0, r3
 8016992:	9b06      	ldr	r3, [sp, #24]
 8016994:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016996:	4098      	lsls	r0, r3
 8016998:	3304      	adds	r3, #4
 801699a:	4306      	orrs	r6, r0
 801699c:	9306      	str	r3, [sp, #24]
 801699e:	e7a3      	b.n	80168e8 <__gethex+0x182>
 80169a0:	2301      	movs	r3, #1
 80169a2:	9a04      	ldr	r2, [sp, #16]
 80169a4:	1a9c      	subs	r4, r3, r2
 80169a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a8:	191c      	adds	r4, r3, r4
 80169aa:	9b01      	ldr	r3, [sp, #4]
 80169ac:	429c      	cmp	r4, r3
 80169ae:	d3e1      	bcc.n	8016974 <__gethex+0x20e>
 80169b0:	9907      	ldr	r1, [sp, #28]
 80169b2:	0020      	movs	r0, r4
 80169b4:	f7fc fd4e 	bl	8013454 <strncmp>
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d1db      	bne.n	8016974 <__gethex+0x20e>
 80169bc:	e794      	b.n	80168e8 <__gethex+0x182>
 80169be:	1eb1      	subs	r1, r6, #2
 80169c0:	0028      	movs	r0, r5
 80169c2:	f000 fd8c 	bl	80174de <__any_on>
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d0b7      	beq.n	801693a <__gethex+0x1d4>
 80169ca:	2403      	movs	r4, #3
 80169cc:	e7b6      	b.n	801693c <__gethex+0x1d6>
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	2400      	movs	r4, #0
 80169d2:	429e      	cmp	r6, r3
 80169d4:	dab7      	bge.n	8016946 <__gethex+0x1e0>
 80169d6:	1b9e      	subs	r6, r3, r6
 80169d8:	0029      	movs	r1, r5
 80169da:	0032      	movs	r2, r6
 80169dc:	9805      	ldr	r0, [sp, #20]
 80169de:	f000 fbab 	bl	8017138 <__lshift>
 80169e2:	0003      	movs	r3, r0
 80169e4:	3314      	adds	r3, #20
 80169e6:	0005      	movs	r5, r0
 80169e8:	1bbf      	subs	r7, r7, r6
 80169ea:	9303      	str	r3, [sp, #12]
 80169ec:	e7ab      	b.n	8016946 <__gethex+0x1e0>
 80169ee:	9b02      	ldr	r3, [sp, #8]
 80169f0:	685e      	ldr	r6, [r3, #4]
 80169f2:	42be      	cmp	r6, r7
 80169f4:	dd6b      	ble.n	8016ace <__gethex+0x368>
 80169f6:	9b01      	ldr	r3, [sp, #4]
 80169f8:	1bf6      	subs	r6, r6, r7
 80169fa:	42b3      	cmp	r3, r6
 80169fc:	dc32      	bgt.n	8016a64 <__gethex+0x2fe>
 80169fe:	9b02      	ldr	r3, [sp, #8]
 8016a00:	68db      	ldr	r3, [r3, #12]
 8016a02:	2b02      	cmp	r3, #2
 8016a04:	d026      	beq.n	8016a54 <__gethex+0x2ee>
 8016a06:	2b03      	cmp	r3, #3
 8016a08:	d028      	beq.n	8016a5c <__gethex+0x2f6>
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d119      	bne.n	8016a42 <__gethex+0x2dc>
 8016a0e:	9b01      	ldr	r3, [sp, #4]
 8016a10:	42b3      	cmp	r3, r6
 8016a12:	d116      	bne.n	8016a42 <__gethex+0x2dc>
 8016a14:	2b01      	cmp	r3, #1
 8016a16:	dc0d      	bgt.n	8016a34 <__gethex+0x2ce>
 8016a18:	9b02      	ldr	r3, [sp, #8]
 8016a1a:	2662      	movs	r6, #98	; 0x62
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	9301      	str	r3, [sp, #4]
 8016a20:	9a01      	ldr	r2, [sp, #4]
 8016a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a24:	601a      	str	r2, [r3, #0]
 8016a26:	2301      	movs	r3, #1
 8016a28:	9a03      	ldr	r2, [sp, #12]
 8016a2a:	612b      	str	r3, [r5, #16]
 8016a2c:	6013      	str	r3, [r2, #0]
 8016a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a30:	601d      	str	r5, [r3, #0]
 8016a32:	e72c      	b.n	801688e <__gethex+0x128>
 8016a34:	9901      	ldr	r1, [sp, #4]
 8016a36:	0028      	movs	r0, r5
 8016a38:	3901      	subs	r1, #1
 8016a3a:	f000 fd50 	bl	80174de <__any_on>
 8016a3e:	2800      	cmp	r0, #0
 8016a40:	d1ea      	bne.n	8016a18 <__gethex+0x2b2>
 8016a42:	0029      	movs	r1, r5
 8016a44:	9805      	ldr	r0, [sp, #20]
 8016a46:	f000 f9cd 	bl	8016de4 <_Bfree>
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a4e:	2650      	movs	r6, #80	; 0x50
 8016a50:	6013      	str	r3, [r2, #0]
 8016a52:	e71c      	b.n	801688e <__gethex+0x128>
 8016a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d0de      	beq.n	8016a18 <__gethex+0x2b2>
 8016a5a:	e7f2      	b.n	8016a42 <__gethex+0x2dc>
 8016a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d1da      	bne.n	8016a18 <__gethex+0x2b2>
 8016a62:	e7ee      	b.n	8016a42 <__gethex+0x2dc>
 8016a64:	1e77      	subs	r7, r6, #1
 8016a66:	2c00      	cmp	r4, #0
 8016a68:	d12f      	bne.n	8016aca <__gethex+0x364>
 8016a6a:	2f00      	cmp	r7, #0
 8016a6c:	d004      	beq.n	8016a78 <__gethex+0x312>
 8016a6e:	0039      	movs	r1, r7
 8016a70:	0028      	movs	r0, r5
 8016a72:	f000 fd34 	bl	80174de <__any_on>
 8016a76:	0004      	movs	r4, r0
 8016a78:	231f      	movs	r3, #31
 8016a7a:	117a      	asrs	r2, r7, #5
 8016a7c:	401f      	ands	r7, r3
 8016a7e:	3b1e      	subs	r3, #30
 8016a80:	40bb      	lsls	r3, r7
 8016a82:	9903      	ldr	r1, [sp, #12]
 8016a84:	0092      	lsls	r2, r2, #2
 8016a86:	5852      	ldr	r2, [r2, r1]
 8016a88:	421a      	tst	r2, r3
 8016a8a:	d001      	beq.n	8016a90 <__gethex+0x32a>
 8016a8c:	2302      	movs	r3, #2
 8016a8e:	431c      	orrs	r4, r3
 8016a90:	9b01      	ldr	r3, [sp, #4]
 8016a92:	0031      	movs	r1, r6
 8016a94:	1b9b      	subs	r3, r3, r6
 8016a96:	2602      	movs	r6, #2
 8016a98:	0028      	movs	r0, r5
 8016a9a:	9301      	str	r3, [sp, #4]
 8016a9c:	f7ff fe1a 	bl	80166d4 <rshift>
 8016aa0:	9b02      	ldr	r3, [sp, #8]
 8016aa2:	685f      	ldr	r7, [r3, #4]
 8016aa4:	2c00      	cmp	r4, #0
 8016aa6:	d040      	beq.n	8016b2a <__gethex+0x3c4>
 8016aa8:	9b02      	ldr	r3, [sp, #8]
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	2b02      	cmp	r3, #2
 8016aae:	d010      	beq.n	8016ad2 <__gethex+0x36c>
 8016ab0:	2b03      	cmp	r3, #3
 8016ab2:	d012      	beq.n	8016ada <__gethex+0x374>
 8016ab4:	2b01      	cmp	r3, #1
 8016ab6:	d106      	bne.n	8016ac6 <__gethex+0x360>
 8016ab8:	07a2      	lsls	r2, r4, #30
 8016aba:	d504      	bpl.n	8016ac6 <__gethex+0x360>
 8016abc:	9a03      	ldr	r2, [sp, #12]
 8016abe:	6812      	ldr	r2, [r2, #0]
 8016ac0:	4314      	orrs	r4, r2
 8016ac2:	421c      	tst	r4, r3
 8016ac4:	d10c      	bne.n	8016ae0 <__gethex+0x37a>
 8016ac6:	2310      	movs	r3, #16
 8016ac8:	e02e      	b.n	8016b28 <__gethex+0x3c2>
 8016aca:	2401      	movs	r4, #1
 8016acc:	e7d4      	b.n	8016a78 <__gethex+0x312>
 8016ace:	2601      	movs	r6, #1
 8016ad0:	e7e8      	b.n	8016aa4 <__gethex+0x33e>
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016ad6:	1a9b      	subs	r3, r3, r2
 8016ad8:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ada:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d0f2      	beq.n	8016ac6 <__gethex+0x360>
 8016ae0:	692c      	ldr	r4, [r5, #16]
 8016ae2:	00a3      	lsls	r3, r4, #2
 8016ae4:	9304      	str	r3, [sp, #16]
 8016ae6:	002b      	movs	r3, r5
 8016ae8:	00a2      	lsls	r2, r4, #2
 8016aea:	3314      	adds	r3, #20
 8016aec:	1899      	adds	r1, r3, r2
 8016aee:	2200      	movs	r2, #0
 8016af0:	4694      	mov	ip, r2
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	1c50      	adds	r0, r2, #1
 8016af6:	d01d      	beq.n	8016b34 <__gethex+0x3ce>
 8016af8:	3201      	adds	r2, #1
 8016afa:	601a      	str	r2, [r3, #0]
 8016afc:	002b      	movs	r3, r5
 8016afe:	3314      	adds	r3, #20
 8016b00:	2e02      	cmp	r6, #2
 8016b02:	d13a      	bne.n	8016b7a <__gethex+0x414>
 8016b04:	9a02      	ldr	r2, [sp, #8]
 8016b06:	9901      	ldr	r1, [sp, #4]
 8016b08:	6812      	ldr	r2, [r2, #0]
 8016b0a:	3a01      	subs	r2, #1
 8016b0c:	428a      	cmp	r2, r1
 8016b0e:	d10a      	bne.n	8016b26 <__gethex+0x3c0>
 8016b10:	114a      	asrs	r2, r1, #5
 8016b12:	211f      	movs	r1, #31
 8016b14:	9801      	ldr	r0, [sp, #4]
 8016b16:	0092      	lsls	r2, r2, #2
 8016b18:	4001      	ands	r1, r0
 8016b1a:	2001      	movs	r0, #1
 8016b1c:	0004      	movs	r4, r0
 8016b1e:	408c      	lsls	r4, r1
 8016b20:	58d3      	ldr	r3, [r2, r3]
 8016b22:	4223      	tst	r3, r4
 8016b24:	d148      	bne.n	8016bb8 <__gethex+0x452>
 8016b26:	2320      	movs	r3, #32
 8016b28:	431e      	orrs	r6, r3
 8016b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b2c:	601d      	str	r5, [r3, #0]
 8016b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b30:	601f      	str	r7, [r3, #0]
 8016b32:	e6ac      	b.n	801688e <__gethex+0x128>
 8016b34:	4662      	mov	r2, ip
 8016b36:	c304      	stmia	r3!, {r2}
 8016b38:	4299      	cmp	r1, r3
 8016b3a:	d8da      	bhi.n	8016af2 <__gethex+0x38c>
 8016b3c:	68ab      	ldr	r3, [r5, #8]
 8016b3e:	429c      	cmp	r4, r3
 8016b40:	db12      	blt.n	8016b68 <__gethex+0x402>
 8016b42:	686b      	ldr	r3, [r5, #4]
 8016b44:	9805      	ldr	r0, [sp, #20]
 8016b46:	1c59      	adds	r1, r3, #1
 8016b48:	f000 f924 	bl	8016d94 <_Balloc>
 8016b4c:	0029      	movs	r1, r5
 8016b4e:	692b      	ldr	r3, [r5, #16]
 8016b50:	9003      	str	r0, [sp, #12]
 8016b52:	1c9a      	adds	r2, r3, #2
 8016b54:	0092      	lsls	r2, r2, #2
 8016b56:	310c      	adds	r1, #12
 8016b58:	300c      	adds	r0, #12
 8016b5a:	f7fc fa34 	bl	8012fc6 <memcpy>
 8016b5e:	0029      	movs	r1, r5
 8016b60:	9805      	ldr	r0, [sp, #20]
 8016b62:	f000 f93f 	bl	8016de4 <_Bfree>
 8016b66:	9d03      	ldr	r5, [sp, #12]
 8016b68:	692b      	ldr	r3, [r5, #16]
 8016b6a:	1c5a      	adds	r2, r3, #1
 8016b6c:	612a      	str	r2, [r5, #16]
 8016b6e:	2201      	movs	r2, #1
 8016b70:	3304      	adds	r3, #4
 8016b72:	009b      	lsls	r3, r3, #2
 8016b74:	18eb      	adds	r3, r5, r3
 8016b76:	605a      	str	r2, [r3, #4]
 8016b78:	e7c0      	b.n	8016afc <__gethex+0x396>
 8016b7a:	692a      	ldr	r2, [r5, #16]
 8016b7c:	42a2      	cmp	r2, r4
 8016b7e:	dd0a      	ble.n	8016b96 <__gethex+0x430>
 8016b80:	2101      	movs	r1, #1
 8016b82:	0028      	movs	r0, r5
 8016b84:	f7ff fda6 	bl	80166d4 <rshift>
 8016b88:	9b02      	ldr	r3, [sp, #8]
 8016b8a:	3701      	adds	r7, #1
 8016b8c:	689b      	ldr	r3, [r3, #8]
 8016b8e:	2601      	movs	r6, #1
 8016b90:	42bb      	cmp	r3, r7
 8016b92:	dac8      	bge.n	8016b26 <__gethex+0x3c0>
 8016b94:	e6dc      	b.n	8016950 <__gethex+0x1ea>
 8016b96:	241f      	movs	r4, #31
 8016b98:	9a01      	ldr	r2, [sp, #4]
 8016b9a:	2601      	movs	r6, #1
 8016b9c:	4022      	ands	r2, r4
 8016b9e:	1e14      	subs	r4, r2, #0
 8016ba0:	d0c1      	beq.n	8016b26 <__gethex+0x3c0>
 8016ba2:	9a04      	ldr	r2, [sp, #16]
 8016ba4:	189b      	adds	r3, r3, r2
 8016ba6:	3b04      	subs	r3, #4
 8016ba8:	6818      	ldr	r0, [r3, #0]
 8016baa:	f000 f9a1 	bl	8016ef0 <__hi0bits>
 8016bae:	2120      	movs	r1, #32
 8016bb0:	1b0c      	subs	r4, r1, r4
 8016bb2:	42a0      	cmp	r0, r4
 8016bb4:	dbe4      	blt.n	8016b80 <__gethex+0x41a>
 8016bb6:	e7b6      	b.n	8016b26 <__gethex+0x3c0>
 8016bb8:	0006      	movs	r6, r0
 8016bba:	e7b4      	b.n	8016b26 <__gethex+0x3c0>

08016bbc <L_shift>:
 8016bbc:	2308      	movs	r3, #8
 8016bbe:	b570      	push	{r4, r5, r6, lr}
 8016bc0:	2520      	movs	r5, #32
 8016bc2:	1a9a      	subs	r2, r3, r2
 8016bc4:	0092      	lsls	r2, r2, #2
 8016bc6:	1aad      	subs	r5, r5, r2
 8016bc8:	6843      	ldr	r3, [r0, #4]
 8016bca:	6806      	ldr	r6, [r0, #0]
 8016bcc:	001c      	movs	r4, r3
 8016bce:	40ac      	lsls	r4, r5
 8016bd0:	40d3      	lsrs	r3, r2
 8016bd2:	4334      	orrs	r4, r6
 8016bd4:	6004      	str	r4, [r0, #0]
 8016bd6:	6043      	str	r3, [r0, #4]
 8016bd8:	3004      	adds	r0, #4
 8016bda:	4288      	cmp	r0, r1
 8016bdc:	d3f4      	bcc.n	8016bc8 <L_shift+0xc>
 8016bde:	bd70      	pop	{r4, r5, r6, pc}

08016be0 <__match>:
 8016be0:	b530      	push	{r4, r5, lr}
 8016be2:	6803      	ldr	r3, [r0, #0]
 8016be4:	780c      	ldrb	r4, [r1, #0]
 8016be6:	3301      	adds	r3, #1
 8016be8:	2c00      	cmp	r4, #0
 8016bea:	d102      	bne.n	8016bf2 <__match+0x12>
 8016bec:	6003      	str	r3, [r0, #0]
 8016bee:	2001      	movs	r0, #1
 8016bf0:	bd30      	pop	{r4, r5, pc}
 8016bf2:	781a      	ldrb	r2, [r3, #0]
 8016bf4:	0015      	movs	r5, r2
 8016bf6:	3d41      	subs	r5, #65	; 0x41
 8016bf8:	2d19      	cmp	r5, #25
 8016bfa:	d800      	bhi.n	8016bfe <__match+0x1e>
 8016bfc:	3220      	adds	r2, #32
 8016bfe:	3101      	adds	r1, #1
 8016c00:	42a2      	cmp	r2, r4
 8016c02:	d0ef      	beq.n	8016be4 <__match+0x4>
 8016c04:	2000      	movs	r0, #0
 8016c06:	e7f3      	b.n	8016bf0 <__match+0x10>

08016c08 <__hexnan>:
 8016c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c0a:	b08b      	sub	sp, #44	; 0x2c
 8016c0c:	9201      	str	r2, [sp, #4]
 8016c0e:	680a      	ldr	r2, [r1, #0]
 8016c10:	9901      	ldr	r1, [sp, #4]
 8016c12:	1153      	asrs	r3, r2, #5
 8016c14:	009b      	lsls	r3, r3, #2
 8016c16:	18cb      	adds	r3, r1, r3
 8016c18:	9304      	str	r3, [sp, #16]
 8016c1a:	231f      	movs	r3, #31
 8016c1c:	401a      	ands	r2, r3
 8016c1e:	9008      	str	r0, [sp, #32]
 8016c20:	9206      	str	r2, [sp, #24]
 8016c22:	d002      	beq.n	8016c2a <__hexnan+0x22>
 8016c24:	9b04      	ldr	r3, [sp, #16]
 8016c26:	3304      	adds	r3, #4
 8016c28:	9304      	str	r3, [sp, #16]
 8016c2a:	9b04      	ldr	r3, [sp, #16]
 8016c2c:	2500      	movs	r5, #0
 8016c2e:	1f1e      	subs	r6, r3, #4
 8016c30:	0037      	movs	r7, r6
 8016c32:	0034      	movs	r4, r6
 8016c34:	9b08      	ldr	r3, [sp, #32]
 8016c36:	6035      	str	r5, [r6, #0]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	9507      	str	r5, [sp, #28]
 8016c3c:	9305      	str	r3, [sp, #20]
 8016c3e:	9502      	str	r5, [sp, #8]
 8016c40:	9b05      	ldr	r3, [sp, #20]
 8016c42:	3301      	adds	r3, #1
 8016c44:	9309      	str	r3, [sp, #36]	; 0x24
 8016c46:	9b05      	ldr	r3, [sp, #20]
 8016c48:	785b      	ldrb	r3, [r3, #1]
 8016c4a:	9303      	str	r3, [sp, #12]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d028      	beq.n	8016ca2 <__hexnan+0x9a>
 8016c50:	9803      	ldr	r0, [sp, #12]
 8016c52:	f7ff fd73 	bl	801673c <__hexdig_fun>
 8016c56:	2800      	cmp	r0, #0
 8016c58:	d145      	bne.n	8016ce6 <__hexnan+0xde>
 8016c5a:	9b03      	ldr	r3, [sp, #12]
 8016c5c:	2b20      	cmp	r3, #32
 8016c5e:	d819      	bhi.n	8016c94 <__hexnan+0x8c>
 8016c60:	9b02      	ldr	r3, [sp, #8]
 8016c62:	9a07      	ldr	r2, [sp, #28]
 8016c64:	4293      	cmp	r3, r2
 8016c66:	dd12      	ble.n	8016c8e <__hexnan+0x86>
 8016c68:	42bc      	cmp	r4, r7
 8016c6a:	d206      	bcs.n	8016c7a <__hexnan+0x72>
 8016c6c:	2d07      	cmp	r5, #7
 8016c6e:	dc04      	bgt.n	8016c7a <__hexnan+0x72>
 8016c70:	002a      	movs	r2, r5
 8016c72:	0039      	movs	r1, r7
 8016c74:	0020      	movs	r0, r4
 8016c76:	f7ff ffa1 	bl	8016bbc <L_shift>
 8016c7a:	9b01      	ldr	r3, [sp, #4]
 8016c7c:	2508      	movs	r5, #8
 8016c7e:	429c      	cmp	r4, r3
 8016c80:	d905      	bls.n	8016c8e <__hexnan+0x86>
 8016c82:	1f27      	subs	r7, r4, #4
 8016c84:	2500      	movs	r5, #0
 8016c86:	003c      	movs	r4, r7
 8016c88:	9b02      	ldr	r3, [sp, #8]
 8016c8a:	603d      	str	r5, [r7, #0]
 8016c8c:	9307      	str	r3, [sp, #28]
 8016c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c90:	9305      	str	r3, [sp, #20]
 8016c92:	e7d5      	b.n	8016c40 <__hexnan+0x38>
 8016c94:	9b03      	ldr	r3, [sp, #12]
 8016c96:	2b29      	cmp	r3, #41	; 0x29
 8016c98:	d14a      	bne.n	8016d30 <__hexnan+0x128>
 8016c9a:	9b05      	ldr	r3, [sp, #20]
 8016c9c:	9a08      	ldr	r2, [sp, #32]
 8016c9e:	3302      	adds	r3, #2
 8016ca0:	6013      	str	r3, [r2, #0]
 8016ca2:	9b02      	ldr	r3, [sp, #8]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d043      	beq.n	8016d30 <__hexnan+0x128>
 8016ca8:	42bc      	cmp	r4, r7
 8016caa:	d206      	bcs.n	8016cba <__hexnan+0xb2>
 8016cac:	2d07      	cmp	r5, #7
 8016cae:	dc04      	bgt.n	8016cba <__hexnan+0xb2>
 8016cb0:	002a      	movs	r2, r5
 8016cb2:	0039      	movs	r1, r7
 8016cb4:	0020      	movs	r0, r4
 8016cb6:	f7ff ff81 	bl	8016bbc <L_shift>
 8016cba:	9b01      	ldr	r3, [sp, #4]
 8016cbc:	429c      	cmp	r4, r3
 8016cbe:	d926      	bls.n	8016d0e <__hexnan+0x106>
 8016cc0:	cc04      	ldmia	r4!, {r2}
 8016cc2:	601a      	str	r2, [r3, #0]
 8016cc4:	3304      	adds	r3, #4
 8016cc6:	42a6      	cmp	r6, r4
 8016cc8:	d2fa      	bcs.n	8016cc0 <__hexnan+0xb8>
 8016cca:	2200      	movs	r2, #0
 8016ccc:	c304      	stmia	r3!, {r2}
 8016cce:	429e      	cmp	r6, r3
 8016cd0:	d2fc      	bcs.n	8016ccc <__hexnan+0xc4>
 8016cd2:	6833      	ldr	r3, [r6, #0]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d104      	bne.n	8016ce2 <__hexnan+0xda>
 8016cd8:	9b01      	ldr	r3, [sp, #4]
 8016cda:	429e      	cmp	r6, r3
 8016cdc:	d126      	bne.n	8016d2c <__hexnan+0x124>
 8016cde:	2301      	movs	r3, #1
 8016ce0:	6033      	str	r3, [r6, #0]
 8016ce2:	2005      	movs	r0, #5
 8016ce4:	e025      	b.n	8016d32 <__hexnan+0x12a>
 8016ce6:	9b02      	ldr	r3, [sp, #8]
 8016ce8:	3501      	adds	r5, #1
 8016cea:	3301      	adds	r3, #1
 8016cec:	9302      	str	r3, [sp, #8]
 8016cee:	2d08      	cmp	r5, #8
 8016cf0:	dd06      	ble.n	8016d00 <__hexnan+0xf8>
 8016cf2:	9b01      	ldr	r3, [sp, #4]
 8016cf4:	429c      	cmp	r4, r3
 8016cf6:	d9ca      	bls.n	8016c8e <__hexnan+0x86>
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	2501      	movs	r5, #1
 8016cfc:	3c04      	subs	r4, #4
 8016cfe:	6023      	str	r3, [r4, #0]
 8016d00:	220f      	movs	r2, #15
 8016d02:	6823      	ldr	r3, [r4, #0]
 8016d04:	4010      	ands	r0, r2
 8016d06:	011b      	lsls	r3, r3, #4
 8016d08:	4318      	orrs	r0, r3
 8016d0a:	6020      	str	r0, [r4, #0]
 8016d0c:	e7bf      	b.n	8016c8e <__hexnan+0x86>
 8016d0e:	9b06      	ldr	r3, [sp, #24]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d0de      	beq.n	8016cd2 <__hexnan+0xca>
 8016d14:	2120      	movs	r1, #32
 8016d16:	9a06      	ldr	r2, [sp, #24]
 8016d18:	9b04      	ldr	r3, [sp, #16]
 8016d1a:	1a89      	subs	r1, r1, r2
 8016d1c:	2201      	movs	r2, #1
 8016d1e:	4252      	negs	r2, r2
 8016d20:	40ca      	lsrs	r2, r1
 8016d22:	3b04      	subs	r3, #4
 8016d24:	6819      	ldr	r1, [r3, #0]
 8016d26:	400a      	ands	r2, r1
 8016d28:	601a      	str	r2, [r3, #0]
 8016d2a:	e7d2      	b.n	8016cd2 <__hexnan+0xca>
 8016d2c:	3e04      	subs	r6, #4
 8016d2e:	e7d0      	b.n	8016cd2 <__hexnan+0xca>
 8016d30:	2004      	movs	r0, #4
 8016d32:	b00b      	add	sp, #44	; 0x2c
 8016d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d36 <__localeconv_l>:
 8016d36:	30f0      	adds	r0, #240	; 0xf0
 8016d38:	4770      	bx	lr
	...

08016d3c <_localeconv_r>:
 8016d3c:	4b03      	ldr	r3, [pc, #12]	; (8016d4c <_localeconv_r+0x10>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016d42:	2800      	cmp	r0, #0
 8016d44:	d100      	bne.n	8016d48 <_localeconv_r+0xc>
 8016d46:	4802      	ldr	r0, [pc, #8]	; (8016d50 <_localeconv_r+0x14>)
 8016d48:	30f0      	adds	r0, #240	; 0xf0
 8016d4a:	4770      	bx	lr
 8016d4c:	200000c8 	.word	0x200000c8
 8016d50:	200004f8 	.word	0x200004f8

08016d54 <__retarget_lock_acquire_recursive>:
 8016d54:	4770      	bx	lr

08016d56 <__retarget_lock_release_recursive>:
 8016d56:	4770      	bx	lr

08016d58 <memchr>:
 8016d58:	b2c9      	uxtb	r1, r1
 8016d5a:	1882      	adds	r2, r0, r2
 8016d5c:	4290      	cmp	r0, r2
 8016d5e:	d101      	bne.n	8016d64 <memchr+0xc>
 8016d60:	2000      	movs	r0, #0
 8016d62:	4770      	bx	lr
 8016d64:	7803      	ldrb	r3, [r0, #0]
 8016d66:	428b      	cmp	r3, r1
 8016d68:	d0fb      	beq.n	8016d62 <memchr+0xa>
 8016d6a:	3001      	adds	r0, #1
 8016d6c:	e7f6      	b.n	8016d5c <memchr+0x4>

08016d6e <memmove>:
 8016d6e:	b510      	push	{r4, lr}
 8016d70:	4288      	cmp	r0, r1
 8016d72:	d902      	bls.n	8016d7a <memmove+0xc>
 8016d74:	188b      	adds	r3, r1, r2
 8016d76:	4298      	cmp	r0, r3
 8016d78:	d303      	bcc.n	8016d82 <memmove+0x14>
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	e007      	b.n	8016d8e <memmove+0x20>
 8016d7e:	5c8b      	ldrb	r3, [r1, r2]
 8016d80:	5483      	strb	r3, [r0, r2]
 8016d82:	3a01      	subs	r2, #1
 8016d84:	d2fb      	bcs.n	8016d7e <memmove+0x10>
 8016d86:	bd10      	pop	{r4, pc}
 8016d88:	5ccc      	ldrb	r4, [r1, r3]
 8016d8a:	54c4      	strb	r4, [r0, r3]
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d1fa      	bne.n	8016d88 <memmove+0x1a>
 8016d92:	e7f8      	b.n	8016d86 <memmove+0x18>

08016d94 <_Balloc>:
 8016d94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d96:	b570      	push	{r4, r5, r6, lr}
 8016d98:	0004      	movs	r4, r0
 8016d9a:	000d      	movs	r5, r1
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d012      	beq.n	8016dc6 <_Balloc+0x32>
 8016da0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016da2:	00ab      	lsls	r3, r5, #2
 8016da4:	18d3      	adds	r3, r2, r3
 8016da6:	6818      	ldr	r0, [r3, #0]
 8016da8:	2800      	cmp	r0, #0
 8016daa:	d115      	bne.n	8016dd8 <_Balloc+0x44>
 8016dac:	2101      	movs	r1, #1
 8016dae:	000e      	movs	r6, r1
 8016db0:	40ae      	lsls	r6, r5
 8016db2:	1d72      	adds	r2, r6, #5
 8016db4:	0092      	lsls	r2, r2, #2
 8016db6:	0020      	movs	r0, r4
 8016db8:	f7fb fe56 	bl	8012a68 <_calloc_r>
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	d009      	beq.n	8016dd4 <_Balloc+0x40>
 8016dc0:	6045      	str	r5, [r0, #4]
 8016dc2:	6086      	str	r6, [r0, #8]
 8016dc4:	e00a      	b.n	8016ddc <_Balloc+0x48>
 8016dc6:	2221      	movs	r2, #33	; 0x21
 8016dc8:	2104      	movs	r1, #4
 8016dca:	f7fb fe4d 	bl	8012a68 <_calloc_r>
 8016dce:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	d1e5      	bne.n	8016da0 <_Balloc+0xc>
 8016dd4:	2000      	movs	r0, #0
 8016dd6:	bd70      	pop	{r4, r5, r6, pc}
 8016dd8:	6802      	ldr	r2, [r0, #0]
 8016dda:	601a      	str	r2, [r3, #0]
 8016ddc:	2300      	movs	r3, #0
 8016dde:	6103      	str	r3, [r0, #16]
 8016de0:	60c3      	str	r3, [r0, #12]
 8016de2:	e7f8      	b.n	8016dd6 <_Balloc+0x42>

08016de4 <_Bfree>:
 8016de4:	2900      	cmp	r1, #0
 8016de6:	d006      	beq.n	8016df6 <_Bfree+0x12>
 8016de8:	684b      	ldr	r3, [r1, #4]
 8016dea:	009a      	lsls	r2, r3, #2
 8016dec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016dee:	189b      	adds	r3, r3, r2
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	600a      	str	r2, [r1, #0]
 8016df4:	6019      	str	r1, [r3, #0]
 8016df6:	4770      	bx	lr

08016df8 <__multadd>:
 8016df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dfa:	001e      	movs	r6, r3
 8016dfc:	2314      	movs	r3, #20
 8016dfe:	469c      	mov	ip, r3
 8016e00:	0007      	movs	r7, r0
 8016e02:	000c      	movs	r4, r1
 8016e04:	2000      	movs	r0, #0
 8016e06:	690d      	ldr	r5, [r1, #16]
 8016e08:	448c      	add	ip, r1
 8016e0a:	4663      	mov	r3, ip
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	3001      	adds	r0, #1
 8016e10:	b299      	uxth	r1, r3
 8016e12:	4663      	mov	r3, ip
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	4351      	muls	r1, r2
 8016e18:	0c1b      	lsrs	r3, r3, #16
 8016e1a:	4353      	muls	r3, r2
 8016e1c:	1989      	adds	r1, r1, r6
 8016e1e:	0c0e      	lsrs	r6, r1, #16
 8016e20:	199b      	adds	r3, r3, r6
 8016e22:	b289      	uxth	r1, r1
 8016e24:	0c1e      	lsrs	r6, r3, #16
 8016e26:	041b      	lsls	r3, r3, #16
 8016e28:	185b      	adds	r3, r3, r1
 8016e2a:	4661      	mov	r1, ip
 8016e2c:	c108      	stmia	r1!, {r3}
 8016e2e:	468c      	mov	ip, r1
 8016e30:	4285      	cmp	r5, r0
 8016e32:	dcea      	bgt.n	8016e0a <__multadd+0x12>
 8016e34:	2e00      	cmp	r6, #0
 8016e36:	d01b      	beq.n	8016e70 <__multadd+0x78>
 8016e38:	68a3      	ldr	r3, [r4, #8]
 8016e3a:	42ab      	cmp	r3, r5
 8016e3c:	dc12      	bgt.n	8016e64 <__multadd+0x6c>
 8016e3e:	6863      	ldr	r3, [r4, #4]
 8016e40:	0038      	movs	r0, r7
 8016e42:	1c59      	adds	r1, r3, #1
 8016e44:	f7ff ffa6 	bl	8016d94 <_Balloc>
 8016e48:	0021      	movs	r1, r4
 8016e4a:	6923      	ldr	r3, [r4, #16]
 8016e4c:	9001      	str	r0, [sp, #4]
 8016e4e:	1c9a      	adds	r2, r3, #2
 8016e50:	0092      	lsls	r2, r2, #2
 8016e52:	310c      	adds	r1, #12
 8016e54:	300c      	adds	r0, #12
 8016e56:	f7fc f8b6 	bl	8012fc6 <memcpy>
 8016e5a:	0021      	movs	r1, r4
 8016e5c:	0038      	movs	r0, r7
 8016e5e:	f7ff ffc1 	bl	8016de4 <_Bfree>
 8016e62:	9c01      	ldr	r4, [sp, #4]
 8016e64:	1d2b      	adds	r3, r5, #4
 8016e66:	009b      	lsls	r3, r3, #2
 8016e68:	18e3      	adds	r3, r4, r3
 8016e6a:	3501      	adds	r5, #1
 8016e6c:	605e      	str	r6, [r3, #4]
 8016e6e:	6125      	str	r5, [r4, #16]
 8016e70:	0020      	movs	r0, r4
 8016e72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016e74 <__s2b>:
 8016e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e76:	0006      	movs	r6, r0
 8016e78:	0018      	movs	r0, r3
 8016e7a:	000c      	movs	r4, r1
 8016e7c:	3008      	adds	r0, #8
 8016e7e:	2109      	movs	r1, #9
 8016e80:	9301      	str	r3, [sp, #4]
 8016e82:	0015      	movs	r5, r2
 8016e84:	f7e9 f9ee 	bl	8000264 <__divsi3>
 8016e88:	2301      	movs	r3, #1
 8016e8a:	2100      	movs	r1, #0
 8016e8c:	4283      	cmp	r3, r0
 8016e8e:	db1f      	blt.n	8016ed0 <__s2b+0x5c>
 8016e90:	0030      	movs	r0, r6
 8016e92:	f7ff ff7f 	bl	8016d94 <_Balloc>
 8016e96:	9b08      	ldr	r3, [sp, #32]
 8016e98:	6143      	str	r3, [r0, #20]
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	6103      	str	r3, [r0, #16]
 8016e9e:	2d09      	cmp	r5, #9
 8016ea0:	dd19      	ble.n	8016ed6 <__s2b+0x62>
 8016ea2:	0023      	movs	r3, r4
 8016ea4:	3309      	adds	r3, #9
 8016ea6:	001f      	movs	r7, r3
 8016ea8:	9300      	str	r3, [sp, #0]
 8016eaa:	1964      	adds	r4, r4, r5
 8016eac:	783b      	ldrb	r3, [r7, #0]
 8016eae:	0001      	movs	r1, r0
 8016eb0:	3b30      	subs	r3, #48	; 0x30
 8016eb2:	220a      	movs	r2, #10
 8016eb4:	0030      	movs	r0, r6
 8016eb6:	3701      	adds	r7, #1
 8016eb8:	f7ff ff9e 	bl	8016df8 <__multadd>
 8016ebc:	42a7      	cmp	r7, r4
 8016ebe:	d1f5      	bne.n	8016eac <__s2b+0x38>
 8016ec0:	9b00      	ldr	r3, [sp, #0]
 8016ec2:	195c      	adds	r4, r3, r5
 8016ec4:	3c08      	subs	r4, #8
 8016ec6:	002f      	movs	r7, r5
 8016ec8:	9b01      	ldr	r3, [sp, #4]
 8016eca:	429f      	cmp	r7, r3
 8016ecc:	db06      	blt.n	8016edc <__s2b+0x68>
 8016ece:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ed0:	005b      	lsls	r3, r3, #1
 8016ed2:	3101      	adds	r1, #1
 8016ed4:	e7da      	b.n	8016e8c <__s2b+0x18>
 8016ed6:	340a      	adds	r4, #10
 8016ed8:	2509      	movs	r5, #9
 8016eda:	e7f4      	b.n	8016ec6 <__s2b+0x52>
 8016edc:	1b63      	subs	r3, r4, r5
 8016ede:	5ddb      	ldrb	r3, [r3, r7]
 8016ee0:	0001      	movs	r1, r0
 8016ee2:	3b30      	subs	r3, #48	; 0x30
 8016ee4:	220a      	movs	r2, #10
 8016ee6:	0030      	movs	r0, r6
 8016ee8:	f7ff ff86 	bl	8016df8 <__multadd>
 8016eec:	3701      	adds	r7, #1
 8016eee:	e7eb      	b.n	8016ec8 <__s2b+0x54>

08016ef0 <__hi0bits>:
 8016ef0:	0003      	movs	r3, r0
 8016ef2:	0c02      	lsrs	r2, r0, #16
 8016ef4:	2000      	movs	r0, #0
 8016ef6:	4282      	cmp	r2, r0
 8016ef8:	d101      	bne.n	8016efe <__hi0bits+0xe>
 8016efa:	041b      	lsls	r3, r3, #16
 8016efc:	3010      	adds	r0, #16
 8016efe:	0e1a      	lsrs	r2, r3, #24
 8016f00:	d101      	bne.n	8016f06 <__hi0bits+0x16>
 8016f02:	3008      	adds	r0, #8
 8016f04:	021b      	lsls	r3, r3, #8
 8016f06:	0f1a      	lsrs	r2, r3, #28
 8016f08:	d101      	bne.n	8016f0e <__hi0bits+0x1e>
 8016f0a:	3004      	adds	r0, #4
 8016f0c:	011b      	lsls	r3, r3, #4
 8016f0e:	0f9a      	lsrs	r2, r3, #30
 8016f10:	d101      	bne.n	8016f16 <__hi0bits+0x26>
 8016f12:	3002      	adds	r0, #2
 8016f14:	009b      	lsls	r3, r3, #2
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	db03      	blt.n	8016f22 <__hi0bits+0x32>
 8016f1a:	3001      	adds	r0, #1
 8016f1c:	005b      	lsls	r3, r3, #1
 8016f1e:	d400      	bmi.n	8016f22 <__hi0bits+0x32>
 8016f20:	2020      	movs	r0, #32
 8016f22:	4770      	bx	lr

08016f24 <__lo0bits>:
 8016f24:	2207      	movs	r2, #7
 8016f26:	6803      	ldr	r3, [r0, #0]
 8016f28:	b510      	push	{r4, lr}
 8016f2a:	0001      	movs	r1, r0
 8016f2c:	401a      	ands	r2, r3
 8016f2e:	d00d      	beq.n	8016f4c <__lo0bits+0x28>
 8016f30:	2401      	movs	r4, #1
 8016f32:	2000      	movs	r0, #0
 8016f34:	4223      	tst	r3, r4
 8016f36:	d105      	bne.n	8016f44 <__lo0bits+0x20>
 8016f38:	3002      	adds	r0, #2
 8016f3a:	4203      	tst	r3, r0
 8016f3c:	d003      	beq.n	8016f46 <__lo0bits+0x22>
 8016f3e:	40e3      	lsrs	r3, r4
 8016f40:	0020      	movs	r0, r4
 8016f42:	600b      	str	r3, [r1, #0]
 8016f44:	bd10      	pop	{r4, pc}
 8016f46:	089b      	lsrs	r3, r3, #2
 8016f48:	600b      	str	r3, [r1, #0]
 8016f4a:	e7fb      	b.n	8016f44 <__lo0bits+0x20>
 8016f4c:	b29c      	uxth	r4, r3
 8016f4e:	0010      	movs	r0, r2
 8016f50:	2c00      	cmp	r4, #0
 8016f52:	d101      	bne.n	8016f58 <__lo0bits+0x34>
 8016f54:	2010      	movs	r0, #16
 8016f56:	0c1b      	lsrs	r3, r3, #16
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	2a00      	cmp	r2, #0
 8016f5c:	d101      	bne.n	8016f62 <__lo0bits+0x3e>
 8016f5e:	3008      	adds	r0, #8
 8016f60:	0a1b      	lsrs	r3, r3, #8
 8016f62:	071a      	lsls	r2, r3, #28
 8016f64:	d101      	bne.n	8016f6a <__lo0bits+0x46>
 8016f66:	3004      	adds	r0, #4
 8016f68:	091b      	lsrs	r3, r3, #4
 8016f6a:	079a      	lsls	r2, r3, #30
 8016f6c:	d101      	bne.n	8016f72 <__lo0bits+0x4e>
 8016f6e:	3002      	adds	r0, #2
 8016f70:	089b      	lsrs	r3, r3, #2
 8016f72:	07da      	lsls	r2, r3, #31
 8016f74:	d4e8      	bmi.n	8016f48 <__lo0bits+0x24>
 8016f76:	085b      	lsrs	r3, r3, #1
 8016f78:	d001      	beq.n	8016f7e <__lo0bits+0x5a>
 8016f7a:	3001      	adds	r0, #1
 8016f7c:	e7e4      	b.n	8016f48 <__lo0bits+0x24>
 8016f7e:	2020      	movs	r0, #32
 8016f80:	e7e0      	b.n	8016f44 <__lo0bits+0x20>

08016f82 <__i2b>:
 8016f82:	b510      	push	{r4, lr}
 8016f84:	000c      	movs	r4, r1
 8016f86:	2101      	movs	r1, #1
 8016f88:	f7ff ff04 	bl	8016d94 <_Balloc>
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	6144      	str	r4, [r0, #20]
 8016f90:	6103      	str	r3, [r0, #16]
 8016f92:	bd10      	pop	{r4, pc}

08016f94 <__multiply>:
 8016f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f96:	690b      	ldr	r3, [r1, #16]
 8016f98:	0014      	movs	r4, r2
 8016f9a:	6912      	ldr	r2, [r2, #16]
 8016f9c:	b089      	sub	sp, #36	; 0x24
 8016f9e:	000d      	movs	r5, r1
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	da01      	bge.n	8016fa8 <__multiply+0x14>
 8016fa4:	0025      	movs	r5, r4
 8016fa6:	000c      	movs	r4, r1
 8016fa8:	692f      	ldr	r7, [r5, #16]
 8016faa:	6926      	ldr	r6, [r4, #16]
 8016fac:	6869      	ldr	r1, [r5, #4]
 8016fae:	19bb      	adds	r3, r7, r6
 8016fb0:	9302      	str	r3, [sp, #8]
 8016fb2:	68ab      	ldr	r3, [r5, #8]
 8016fb4:	19ba      	adds	r2, r7, r6
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	da00      	bge.n	8016fbc <__multiply+0x28>
 8016fba:	3101      	adds	r1, #1
 8016fbc:	f7ff feea 	bl	8016d94 <_Balloc>
 8016fc0:	0002      	movs	r2, r0
 8016fc2:	19bb      	adds	r3, r7, r6
 8016fc4:	3214      	adds	r2, #20
 8016fc6:	009b      	lsls	r3, r3, #2
 8016fc8:	18d3      	adds	r3, r2, r3
 8016fca:	469c      	mov	ip, r3
 8016fcc:	2100      	movs	r1, #0
 8016fce:	0013      	movs	r3, r2
 8016fd0:	9004      	str	r0, [sp, #16]
 8016fd2:	4563      	cmp	r3, ip
 8016fd4:	d31d      	bcc.n	8017012 <__multiply+0x7e>
 8016fd6:	3514      	adds	r5, #20
 8016fd8:	00bf      	lsls	r7, r7, #2
 8016fda:	19eb      	adds	r3, r5, r7
 8016fdc:	3414      	adds	r4, #20
 8016fde:	00b6      	lsls	r6, r6, #2
 8016fe0:	9305      	str	r3, [sp, #20]
 8016fe2:	19a3      	adds	r3, r4, r6
 8016fe4:	9503      	str	r5, [sp, #12]
 8016fe6:	9401      	str	r4, [sp, #4]
 8016fe8:	9307      	str	r3, [sp, #28]
 8016fea:	9b07      	ldr	r3, [sp, #28]
 8016fec:	9901      	ldr	r1, [sp, #4]
 8016fee:	4299      	cmp	r1, r3
 8016ff0:	d311      	bcc.n	8017016 <__multiply+0x82>
 8016ff2:	9b02      	ldr	r3, [sp, #8]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	dd06      	ble.n	8017006 <__multiply+0x72>
 8016ff8:	2304      	movs	r3, #4
 8016ffa:	425b      	negs	r3, r3
 8016ffc:	449c      	add	ip, r3
 8016ffe:	4663      	mov	r3, ip
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d051      	beq.n	80170aa <__multiply+0x116>
 8017006:	9b04      	ldr	r3, [sp, #16]
 8017008:	9a02      	ldr	r2, [sp, #8]
 801700a:	0018      	movs	r0, r3
 801700c:	611a      	str	r2, [r3, #16]
 801700e:	b009      	add	sp, #36	; 0x24
 8017010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017012:	c302      	stmia	r3!, {r1}
 8017014:	e7dd      	b.n	8016fd2 <__multiply+0x3e>
 8017016:	9b01      	ldr	r3, [sp, #4]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	b298      	uxth	r0, r3
 801701c:	2800      	cmp	r0, #0
 801701e:	d01c      	beq.n	801705a <__multiply+0xc6>
 8017020:	0015      	movs	r5, r2
 8017022:	2600      	movs	r6, #0
 8017024:	9f03      	ldr	r7, [sp, #12]
 8017026:	cf02      	ldmia	r7!, {r1}
 8017028:	682c      	ldr	r4, [r5, #0]
 801702a:	b28b      	uxth	r3, r1
 801702c:	4343      	muls	r3, r0
 801702e:	0c09      	lsrs	r1, r1, #16
 8017030:	4341      	muls	r1, r0
 8017032:	b2a4      	uxth	r4, r4
 8017034:	191b      	adds	r3, r3, r4
 8017036:	199b      	adds	r3, r3, r6
 8017038:	000e      	movs	r6, r1
 801703a:	6829      	ldr	r1, [r5, #0]
 801703c:	9506      	str	r5, [sp, #24]
 801703e:	0c09      	lsrs	r1, r1, #16
 8017040:	1871      	adds	r1, r6, r1
 8017042:	0c1e      	lsrs	r6, r3, #16
 8017044:	1989      	adds	r1, r1, r6
 8017046:	0c0e      	lsrs	r6, r1, #16
 8017048:	b29b      	uxth	r3, r3
 801704a:	0409      	lsls	r1, r1, #16
 801704c:	430b      	orrs	r3, r1
 801704e:	c508      	stmia	r5!, {r3}
 8017050:	9b05      	ldr	r3, [sp, #20]
 8017052:	42bb      	cmp	r3, r7
 8017054:	d8e7      	bhi.n	8017026 <__multiply+0x92>
 8017056:	9b06      	ldr	r3, [sp, #24]
 8017058:	605e      	str	r6, [r3, #4]
 801705a:	9b01      	ldr	r3, [sp, #4]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	0c1d      	lsrs	r5, r3, #16
 8017060:	d01e      	beq.n	80170a0 <__multiply+0x10c>
 8017062:	0010      	movs	r0, r2
 8017064:	2700      	movs	r7, #0
 8017066:	6813      	ldr	r3, [r2, #0]
 8017068:	9e03      	ldr	r6, [sp, #12]
 801706a:	6831      	ldr	r1, [r6, #0]
 801706c:	6804      	ldr	r4, [r0, #0]
 801706e:	b289      	uxth	r1, r1
 8017070:	4369      	muls	r1, r5
 8017072:	0c24      	lsrs	r4, r4, #16
 8017074:	1909      	adds	r1, r1, r4
 8017076:	19c9      	adds	r1, r1, r7
 8017078:	040f      	lsls	r7, r1, #16
 801707a:	b29b      	uxth	r3, r3
 801707c:	433b      	orrs	r3, r7
 801707e:	6003      	str	r3, [r0, #0]
 8017080:	ce80      	ldmia	r6!, {r7}
 8017082:	6843      	ldr	r3, [r0, #4]
 8017084:	0c3f      	lsrs	r7, r7, #16
 8017086:	436f      	muls	r7, r5
 8017088:	b29b      	uxth	r3, r3
 801708a:	18fb      	adds	r3, r7, r3
 801708c:	0c09      	lsrs	r1, r1, #16
 801708e:	185b      	adds	r3, r3, r1
 8017090:	9905      	ldr	r1, [sp, #20]
 8017092:	9006      	str	r0, [sp, #24]
 8017094:	0c1f      	lsrs	r7, r3, #16
 8017096:	3004      	adds	r0, #4
 8017098:	42b1      	cmp	r1, r6
 801709a:	d8e6      	bhi.n	801706a <__multiply+0xd6>
 801709c:	9906      	ldr	r1, [sp, #24]
 801709e:	604b      	str	r3, [r1, #4]
 80170a0:	9b01      	ldr	r3, [sp, #4]
 80170a2:	3204      	adds	r2, #4
 80170a4:	3304      	adds	r3, #4
 80170a6:	9301      	str	r3, [sp, #4]
 80170a8:	e79f      	b.n	8016fea <__multiply+0x56>
 80170aa:	9b02      	ldr	r3, [sp, #8]
 80170ac:	3b01      	subs	r3, #1
 80170ae:	9302      	str	r3, [sp, #8]
 80170b0:	e79f      	b.n	8016ff2 <__multiply+0x5e>
	...

080170b4 <__pow5mult>:
 80170b4:	2303      	movs	r3, #3
 80170b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170b8:	4013      	ands	r3, r2
 80170ba:	0006      	movs	r6, r0
 80170bc:	000f      	movs	r7, r1
 80170be:	0015      	movs	r5, r2
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d008      	beq.n	80170d6 <__pow5mult+0x22>
 80170c4:	491a      	ldr	r1, [pc, #104]	; (8017130 <__pow5mult+0x7c>)
 80170c6:	3b01      	subs	r3, #1
 80170c8:	009a      	lsls	r2, r3, #2
 80170ca:	5852      	ldr	r2, [r2, r1]
 80170cc:	2300      	movs	r3, #0
 80170ce:	0039      	movs	r1, r7
 80170d0:	f7ff fe92 	bl	8016df8 <__multadd>
 80170d4:	0007      	movs	r7, r0
 80170d6:	10ad      	asrs	r5, r5, #2
 80170d8:	d027      	beq.n	801712a <__pow5mult+0x76>
 80170da:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80170dc:	2c00      	cmp	r4, #0
 80170de:	d107      	bne.n	80170f0 <__pow5mult+0x3c>
 80170e0:	4914      	ldr	r1, [pc, #80]	; (8017134 <__pow5mult+0x80>)
 80170e2:	0030      	movs	r0, r6
 80170e4:	f7ff ff4d 	bl	8016f82 <__i2b>
 80170e8:	2300      	movs	r3, #0
 80170ea:	0004      	movs	r4, r0
 80170ec:	64b0      	str	r0, [r6, #72]	; 0x48
 80170ee:	6003      	str	r3, [r0, #0]
 80170f0:	2301      	movs	r3, #1
 80170f2:	421d      	tst	r5, r3
 80170f4:	d00a      	beq.n	801710c <__pow5mult+0x58>
 80170f6:	0039      	movs	r1, r7
 80170f8:	0022      	movs	r2, r4
 80170fa:	0030      	movs	r0, r6
 80170fc:	f7ff ff4a 	bl	8016f94 <__multiply>
 8017100:	0039      	movs	r1, r7
 8017102:	9001      	str	r0, [sp, #4]
 8017104:	0030      	movs	r0, r6
 8017106:	f7ff fe6d 	bl	8016de4 <_Bfree>
 801710a:	9f01      	ldr	r7, [sp, #4]
 801710c:	106d      	asrs	r5, r5, #1
 801710e:	d00c      	beq.n	801712a <__pow5mult+0x76>
 8017110:	6820      	ldr	r0, [r4, #0]
 8017112:	2800      	cmp	r0, #0
 8017114:	d107      	bne.n	8017126 <__pow5mult+0x72>
 8017116:	0022      	movs	r2, r4
 8017118:	0021      	movs	r1, r4
 801711a:	0030      	movs	r0, r6
 801711c:	f7ff ff3a 	bl	8016f94 <__multiply>
 8017120:	2300      	movs	r3, #0
 8017122:	6020      	str	r0, [r4, #0]
 8017124:	6003      	str	r3, [r0, #0]
 8017126:	0004      	movs	r4, r0
 8017128:	e7e2      	b.n	80170f0 <__pow5mult+0x3c>
 801712a:	0038      	movs	r0, r7
 801712c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801712e:	46c0      	nop			; (mov r8, r8)
 8017130:	0801a918 	.word	0x0801a918
 8017134:	00000271 	.word	0x00000271

08017138 <__lshift>:
 8017138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801713a:	000d      	movs	r5, r1
 801713c:	0017      	movs	r7, r2
 801713e:	692b      	ldr	r3, [r5, #16]
 8017140:	1154      	asrs	r4, r2, #5
 8017142:	b085      	sub	sp, #20
 8017144:	18e3      	adds	r3, r4, r3
 8017146:	9301      	str	r3, [sp, #4]
 8017148:	3301      	adds	r3, #1
 801714a:	9300      	str	r3, [sp, #0]
 801714c:	6849      	ldr	r1, [r1, #4]
 801714e:	68ab      	ldr	r3, [r5, #8]
 8017150:	9002      	str	r0, [sp, #8]
 8017152:	9a00      	ldr	r2, [sp, #0]
 8017154:	4293      	cmp	r3, r2
 8017156:	db35      	blt.n	80171c4 <__lshift+0x8c>
 8017158:	9802      	ldr	r0, [sp, #8]
 801715a:	f7ff fe1b 	bl	8016d94 <_Balloc>
 801715e:	2300      	movs	r3, #0
 8017160:	0002      	movs	r2, r0
 8017162:	0006      	movs	r6, r0
 8017164:	0019      	movs	r1, r3
 8017166:	3214      	adds	r2, #20
 8017168:	42a3      	cmp	r3, r4
 801716a:	db2e      	blt.n	80171ca <__lshift+0x92>
 801716c:	43e3      	mvns	r3, r4
 801716e:	17db      	asrs	r3, r3, #31
 8017170:	401c      	ands	r4, r3
 8017172:	002b      	movs	r3, r5
 8017174:	00a4      	lsls	r4, r4, #2
 8017176:	1914      	adds	r4, r2, r4
 8017178:	692a      	ldr	r2, [r5, #16]
 801717a:	3314      	adds	r3, #20
 801717c:	0092      	lsls	r2, r2, #2
 801717e:	189a      	adds	r2, r3, r2
 8017180:	4694      	mov	ip, r2
 8017182:	221f      	movs	r2, #31
 8017184:	4017      	ands	r7, r2
 8017186:	d024      	beq.n	80171d2 <__lshift+0x9a>
 8017188:	3201      	adds	r2, #1
 801718a:	1bd2      	subs	r2, r2, r7
 801718c:	9203      	str	r2, [sp, #12]
 801718e:	2200      	movs	r2, #0
 8017190:	6819      	ldr	r1, [r3, #0]
 8017192:	0020      	movs	r0, r4
 8017194:	40b9      	lsls	r1, r7
 8017196:	430a      	orrs	r2, r1
 8017198:	c404      	stmia	r4!, {r2}
 801719a:	cb04      	ldmia	r3!, {r2}
 801719c:	9903      	ldr	r1, [sp, #12]
 801719e:	40ca      	lsrs	r2, r1
 80171a0:	459c      	cmp	ip, r3
 80171a2:	d8f5      	bhi.n	8017190 <__lshift+0x58>
 80171a4:	6042      	str	r2, [r0, #4]
 80171a6:	2a00      	cmp	r2, #0
 80171a8:	d002      	beq.n	80171b0 <__lshift+0x78>
 80171aa:	9b01      	ldr	r3, [sp, #4]
 80171ac:	3302      	adds	r3, #2
 80171ae:	9300      	str	r3, [sp, #0]
 80171b0:	9b00      	ldr	r3, [sp, #0]
 80171b2:	9802      	ldr	r0, [sp, #8]
 80171b4:	3b01      	subs	r3, #1
 80171b6:	6133      	str	r3, [r6, #16]
 80171b8:	0029      	movs	r1, r5
 80171ba:	f7ff fe13 	bl	8016de4 <_Bfree>
 80171be:	0030      	movs	r0, r6
 80171c0:	b005      	add	sp, #20
 80171c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171c4:	3101      	adds	r1, #1
 80171c6:	005b      	lsls	r3, r3, #1
 80171c8:	e7c3      	b.n	8017152 <__lshift+0x1a>
 80171ca:	0098      	lsls	r0, r3, #2
 80171cc:	5011      	str	r1, [r2, r0]
 80171ce:	3301      	adds	r3, #1
 80171d0:	e7ca      	b.n	8017168 <__lshift+0x30>
 80171d2:	cb04      	ldmia	r3!, {r2}
 80171d4:	c404      	stmia	r4!, {r2}
 80171d6:	459c      	cmp	ip, r3
 80171d8:	d8fb      	bhi.n	80171d2 <__lshift+0x9a>
 80171da:	e7e9      	b.n	80171b0 <__lshift+0x78>

080171dc <__mcmp>:
 80171dc:	690a      	ldr	r2, [r1, #16]
 80171de:	6903      	ldr	r3, [r0, #16]
 80171e0:	b530      	push	{r4, r5, lr}
 80171e2:	1a9b      	subs	r3, r3, r2
 80171e4:	d10d      	bne.n	8017202 <__mcmp+0x26>
 80171e6:	0092      	lsls	r2, r2, #2
 80171e8:	3014      	adds	r0, #20
 80171ea:	3114      	adds	r1, #20
 80171ec:	1884      	adds	r4, r0, r2
 80171ee:	1889      	adds	r1, r1, r2
 80171f0:	3c04      	subs	r4, #4
 80171f2:	3904      	subs	r1, #4
 80171f4:	6825      	ldr	r5, [r4, #0]
 80171f6:	680a      	ldr	r2, [r1, #0]
 80171f8:	4295      	cmp	r5, r2
 80171fa:	d004      	beq.n	8017206 <__mcmp+0x2a>
 80171fc:	2301      	movs	r3, #1
 80171fe:	4295      	cmp	r5, r2
 8017200:	d304      	bcc.n	801720c <__mcmp+0x30>
 8017202:	0018      	movs	r0, r3
 8017204:	bd30      	pop	{r4, r5, pc}
 8017206:	42a0      	cmp	r0, r4
 8017208:	d3f2      	bcc.n	80171f0 <__mcmp+0x14>
 801720a:	e7fa      	b.n	8017202 <__mcmp+0x26>
 801720c:	425b      	negs	r3, r3
 801720e:	e7f8      	b.n	8017202 <__mcmp+0x26>

08017210 <__mdiff>:
 8017210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017212:	000d      	movs	r5, r1
 8017214:	b085      	sub	sp, #20
 8017216:	0007      	movs	r7, r0
 8017218:	0011      	movs	r1, r2
 801721a:	0028      	movs	r0, r5
 801721c:	0014      	movs	r4, r2
 801721e:	f7ff ffdd 	bl	80171dc <__mcmp>
 8017222:	1e06      	subs	r6, r0, #0
 8017224:	d108      	bne.n	8017238 <__mdiff+0x28>
 8017226:	0001      	movs	r1, r0
 8017228:	0038      	movs	r0, r7
 801722a:	f7ff fdb3 	bl	8016d94 <_Balloc>
 801722e:	2301      	movs	r3, #1
 8017230:	6146      	str	r6, [r0, #20]
 8017232:	6103      	str	r3, [r0, #16]
 8017234:	b005      	add	sp, #20
 8017236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017238:	2301      	movs	r3, #1
 801723a:	9301      	str	r3, [sp, #4]
 801723c:	2800      	cmp	r0, #0
 801723e:	db04      	blt.n	801724a <__mdiff+0x3a>
 8017240:	0023      	movs	r3, r4
 8017242:	002c      	movs	r4, r5
 8017244:	001d      	movs	r5, r3
 8017246:	2300      	movs	r3, #0
 8017248:	9301      	str	r3, [sp, #4]
 801724a:	6861      	ldr	r1, [r4, #4]
 801724c:	0038      	movs	r0, r7
 801724e:	f7ff fda1 	bl	8016d94 <_Balloc>
 8017252:	002f      	movs	r7, r5
 8017254:	2200      	movs	r2, #0
 8017256:	9b01      	ldr	r3, [sp, #4]
 8017258:	6926      	ldr	r6, [r4, #16]
 801725a:	60c3      	str	r3, [r0, #12]
 801725c:	3414      	adds	r4, #20
 801725e:	00b3      	lsls	r3, r6, #2
 8017260:	18e3      	adds	r3, r4, r3
 8017262:	9302      	str	r3, [sp, #8]
 8017264:	692b      	ldr	r3, [r5, #16]
 8017266:	3714      	adds	r7, #20
 8017268:	009b      	lsls	r3, r3, #2
 801726a:	18fb      	adds	r3, r7, r3
 801726c:	9303      	str	r3, [sp, #12]
 801726e:	0003      	movs	r3, r0
 8017270:	4694      	mov	ip, r2
 8017272:	3314      	adds	r3, #20
 8017274:	cc20      	ldmia	r4!, {r5}
 8017276:	cf04      	ldmia	r7!, {r2}
 8017278:	9201      	str	r2, [sp, #4]
 801727a:	b2aa      	uxth	r2, r5
 801727c:	4494      	add	ip, r2
 801727e:	466a      	mov	r2, sp
 8017280:	4661      	mov	r1, ip
 8017282:	8892      	ldrh	r2, [r2, #4]
 8017284:	0c2d      	lsrs	r5, r5, #16
 8017286:	1a8a      	subs	r2, r1, r2
 8017288:	9901      	ldr	r1, [sp, #4]
 801728a:	0c09      	lsrs	r1, r1, #16
 801728c:	1a69      	subs	r1, r5, r1
 801728e:	1415      	asrs	r5, r2, #16
 8017290:	1949      	adds	r1, r1, r5
 8017292:	140d      	asrs	r5, r1, #16
 8017294:	b292      	uxth	r2, r2
 8017296:	0409      	lsls	r1, r1, #16
 8017298:	430a      	orrs	r2, r1
 801729a:	601a      	str	r2, [r3, #0]
 801729c:	9a03      	ldr	r2, [sp, #12]
 801729e:	46ac      	mov	ip, r5
 80172a0:	3304      	adds	r3, #4
 80172a2:	42ba      	cmp	r2, r7
 80172a4:	d8e6      	bhi.n	8017274 <__mdiff+0x64>
 80172a6:	9902      	ldr	r1, [sp, #8]
 80172a8:	001a      	movs	r2, r3
 80172aa:	428c      	cmp	r4, r1
 80172ac:	d305      	bcc.n	80172ba <__mdiff+0xaa>
 80172ae:	3a04      	subs	r2, #4
 80172b0:	6813      	ldr	r3, [r2, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d00e      	beq.n	80172d4 <__mdiff+0xc4>
 80172b6:	6106      	str	r6, [r0, #16]
 80172b8:	e7bc      	b.n	8017234 <__mdiff+0x24>
 80172ba:	cc04      	ldmia	r4!, {r2}
 80172bc:	b291      	uxth	r1, r2
 80172be:	4461      	add	r1, ip
 80172c0:	140d      	asrs	r5, r1, #16
 80172c2:	0c12      	lsrs	r2, r2, #16
 80172c4:	1952      	adds	r2, r2, r5
 80172c6:	1415      	asrs	r5, r2, #16
 80172c8:	b289      	uxth	r1, r1
 80172ca:	0412      	lsls	r2, r2, #16
 80172cc:	430a      	orrs	r2, r1
 80172ce:	46ac      	mov	ip, r5
 80172d0:	c304      	stmia	r3!, {r2}
 80172d2:	e7e8      	b.n	80172a6 <__mdiff+0x96>
 80172d4:	3e01      	subs	r6, #1
 80172d6:	e7ea      	b.n	80172ae <__mdiff+0x9e>

080172d8 <__ulp>:
 80172d8:	000b      	movs	r3, r1
 80172da:	4910      	ldr	r1, [pc, #64]	; (801731c <__ulp+0x44>)
 80172dc:	b510      	push	{r4, lr}
 80172de:	4019      	ands	r1, r3
 80172e0:	4b0f      	ldr	r3, [pc, #60]	; (8017320 <__ulp+0x48>)
 80172e2:	18c9      	adds	r1, r1, r3
 80172e4:	2900      	cmp	r1, #0
 80172e6:	dd04      	ble.n	80172f2 <__ulp+0x1a>
 80172e8:	2200      	movs	r2, #0
 80172ea:	000b      	movs	r3, r1
 80172ec:	0010      	movs	r0, r2
 80172ee:	0019      	movs	r1, r3
 80172f0:	bd10      	pop	{r4, pc}
 80172f2:	4249      	negs	r1, r1
 80172f4:	1509      	asrs	r1, r1, #20
 80172f6:	2200      	movs	r2, #0
 80172f8:	2300      	movs	r3, #0
 80172fa:	2913      	cmp	r1, #19
 80172fc:	dc04      	bgt.n	8017308 <__ulp+0x30>
 80172fe:	2080      	movs	r0, #128	; 0x80
 8017300:	0300      	lsls	r0, r0, #12
 8017302:	4108      	asrs	r0, r1
 8017304:	0003      	movs	r3, r0
 8017306:	e7f1      	b.n	80172ec <__ulp+0x14>
 8017308:	3914      	subs	r1, #20
 801730a:	2001      	movs	r0, #1
 801730c:	291e      	cmp	r1, #30
 801730e:	dc02      	bgt.n	8017316 <__ulp+0x3e>
 8017310:	241f      	movs	r4, #31
 8017312:	1a61      	subs	r1, r4, r1
 8017314:	4088      	lsls	r0, r1
 8017316:	0002      	movs	r2, r0
 8017318:	e7e8      	b.n	80172ec <__ulp+0x14>
 801731a:	46c0      	nop			; (mov r8, r8)
 801731c:	7ff00000 	.word	0x7ff00000
 8017320:	fcc00000 	.word	0xfcc00000

08017324 <__b2d>:
 8017324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017326:	0006      	movs	r6, r0
 8017328:	6903      	ldr	r3, [r0, #16]
 801732a:	3614      	adds	r6, #20
 801732c:	009b      	lsls	r3, r3, #2
 801732e:	18f3      	adds	r3, r6, r3
 8017330:	1f1d      	subs	r5, r3, #4
 8017332:	682c      	ldr	r4, [r5, #0]
 8017334:	000f      	movs	r7, r1
 8017336:	0020      	movs	r0, r4
 8017338:	9301      	str	r3, [sp, #4]
 801733a:	f7ff fdd9 	bl	8016ef0 <__hi0bits>
 801733e:	2320      	movs	r3, #32
 8017340:	1a1b      	subs	r3, r3, r0
 8017342:	603b      	str	r3, [r7, #0]
 8017344:	491c      	ldr	r1, [pc, #112]	; (80173b8 <__b2d+0x94>)
 8017346:	280a      	cmp	r0, #10
 8017348:	dc16      	bgt.n	8017378 <__b2d+0x54>
 801734a:	230b      	movs	r3, #11
 801734c:	0027      	movs	r7, r4
 801734e:	1a1b      	subs	r3, r3, r0
 8017350:	40df      	lsrs	r7, r3
 8017352:	4339      	orrs	r1, r7
 8017354:	469c      	mov	ip, r3
 8017356:	000b      	movs	r3, r1
 8017358:	2100      	movs	r1, #0
 801735a:	42ae      	cmp	r6, r5
 801735c:	d202      	bcs.n	8017364 <__b2d+0x40>
 801735e:	9901      	ldr	r1, [sp, #4]
 8017360:	3908      	subs	r1, #8
 8017362:	6809      	ldr	r1, [r1, #0]
 8017364:	3015      	adds	r0, #21
 8017366:	4084      	lsls	r4, r0
 8017368:	4660      	mov	r0, ip
 801736a:	40c1      	lsrs	r1, r0
 801736c:	430c      	orrs	r4, r1
 801736e:	0022      	movs	r2, r4
 8017370:	0010      	movs	r0, r2
 8017372:	0019      	movs	r1, r3
 8017374:	b003      	add	sp, #12
 8017376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017378:	2700      	movs	r7, #0
 801737a:	42ae      	cmp	r6, r5
 801737c:	d202      	bcs.n	8017384 <__b2d+0x60>
 801737e:	9d01      	ldr	r5, [sp, #4]
 8017380:	3d08      	subs	r5, #8
 8017382:	682f      	ldr	r7, [r5, #0]
 8017384:	380b      	subs	r0, #11
 8017386:	4684      	mov	ip, r0
 8017388:	1e03      	subs	r3, r0, #0
 801738a:	d012      	beq.n	80173b2 <__b2d+0x8e>
 801738c:	409c      	lsls	r4, r3
 801738e:	2020      	movs	r0, #32
 8017390:	4321      	orrs	r1, r4
 8017392:	003c      	movs	r4, r7
 8017394:	1ac0      	subs	r0, r0, r3
 8017396:	40c4      	lsrs	r4, r0
 8017398:	4321      	orrs	r1, r4
 801739a:	000b      	movs	r3, r1
 801739c:	2100      	movs	r1, #0
 801739e:	42b5      	cmp	r5, r6
 80173a0:	d901      	bls.n	80173a6 <__b2d+0x82>
 80173a2:	3d04      	subs	r5, #4
 80173a4:	6829      	ldr	r1, [r5, #0]
 80173a6:	4664      	mov	r4, ip
 80173a8:	40c1      	lsrs	r1, r0
 80173aa:	40a7      	lsls	r7, r4
 80173ac:	430f      	orrs	r7, r1
 80173ae:	003a      	movs	r2, r7
 80173b0:	e7de      	b.n	8017370 <__b2d+0x4c>
 80173b2:	4321      	orrs	r1, r4
 80173b4:	000b      	movs	r3, r1
 80173b6:	e7fa      	b.n	80173ae <__b2d+0x8a>
 80173b8:	3ff00000 	.word	0x3ff00000

080173bc <__d2b>:
 80173bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173be:	001d      	movs	r5, r3
 80173c0:	2101      	movs	r1, #1
 80173c2:	0014      	movs	r4, r2
 80173c4:	9f08      	ldr	r7, [sp, #32]
 80173c6:	f7ff fce5 	bl	8016d94 <_Balloc>
 80173ca:	032b      	lsls	r3, r5, #12
 80173cc:	006d      	lsls	r5, r5, #1
 80173ce:	0006      	movs	r6, r0
 80173d0:	0b1b      	lsrs	r3, r3, #12
 80173d2:	0d6d      	lsrs	r5, r5, #21
 80173d4:	d124      	bne.n	8017420 <__d2b+0x64>
 80173d6:	9301      	str	r3, [sp, #4]
 80173d8:	2c00      	cmp	r4, #0
 80173da:	d027      	beq.n	801742c <__d2b+0x70>
 80173dc:	4668      	mov	r0, sp
 80173de:	9400      	str	r4, [sp, #0]
 80173e0:	f7ff fda0 	bl	8016f24 <__lo0bits>
 80173e4:	9c00      	ldr	r4, [sp, #0]
 80173e6:	2800      	cmp	r0, #0
 80173e8:	d01e      	beq.n	8017428 <__d2b+0x6c>
 80173ea:	9b01      	ldr	r3, [sp, #4]
 80173ec:	2120      	movs	r1, #32
 80173ee:	001a      	movs	r2, r3
 80173f0:	1a09      	subs	r1, r1, r0
 80173f2:	408a      	lsls	r2, r1
 80173f4:	40c3      	lsrs	r3, r0
 80173f6:	4322      	orrs	r2, r4
 80173f8:	6172      	str	r2, [r6, #20]
 80173fa:	9301      	str	r3, [sp, #4]
 80173fc:	9c01      	ldr	r4, [sp, #4]
 80173fe:	61b4      	str	r4, [r6, #24]
 8017400:	1e63      	subs	r3, r4, #1
 8017402:	419c      	sbcs	r4, r3
 8017404:	3401      	adds	r4, #1
 8017406:	6134      	str	r4, [r6, #16]
 8017408:	2d00      	cmp	r5, #0
 801740a:	d018      	beq.n	801743e <__d2b+0x82>
 801740c:	4b12      	ldr	r3, [pc, #72]	; (8017458 <__d2b+0x9c>)
 801740e:	18ed      	adds	r5, r5, r3
 8017410:	2335      	movs	r3, #53	; 0x35
 8017412:	182d      	adds	r5, r5, r0
 8017414:	603d      	str	r5, [r7, #0]
 8017416:	1a18      	subs	r0, r3, r0
 8017418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801741a:	6018      	str	r0, [r3, #0]
 801741c:	0030      	movs	r0, r6
 801741e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017420:	2280      	movs	r2, #128	; 0x80
 8017422:	0352      	lsls	r2, r2, #13
 8017424:	4313      	orrs	r3, r2
 8017426:	e7d6      	b.n	80173d6 <__d2b+0x1a>
 8017428:	6174      	str	r4, [r6, #20]
 801742a:	e7e7      	b.n	80173fc <__d2b+0x40>
 801742c:	a801      	add	r0, sp, #4
 801742e:	f7ff fd79 	bl	8016f24 <__lo0bits>
 8017432:	2401      	movs	r4, #1
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	6134      	str	r4, [r6, #16]
 8017438:	6173      	str	r3, [r6, #20]
 801743a:	3020      	adds	r0, #32
 801743c:	e7e4      	b.n	8017408 <__d2b+0x4c>
 801743e:	4b07      	ldr	r3, [pc, #28]	; (801745c <__d2b+0xa0>)
 8017440:	18c0      	adds	r0, r0, r3
 8017442:	4b07      	ldr	r3, [pc, #28]	; (8017460 <__d2b+0xa4>)
 8017444:	6038      	str	r0, [r7, #0]
 8017446:	18e3      	adds	r3, r4, r3
 8017448:	009b      	lsls	r3, r3, #2
 801744a:	18f3      	adds	r3, r6, r3
 801744c:	6958      	ldr	r0, [r3, #20]
 801744e:	f7ff fd4f 	bl	8016ef0 <__hi0bits>
 8017452:	0164      	lsls	r4, r4, #5
 8017454:	1a20      	subs	r0, r4, r0
 8017456:	e7df      	b.n	8017418 <__d2b+0x5c>
 8017458:	fffffbcd 	.word	0xfffffbcd
 801745c:	fffffbce 	.word	0xfffffbce
 8017460:	3fffffff 	.word	0x3fffffff

08017464 <__ratio>:
 8017464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017466:	b085      	sub	sp, #20
 8017468:	000f      	movs	r7, r1
 801746a:	a902      	add	r1, sp, #8
 801746c:	0006      	movs	r6, r0
 801746e:	f7ff ff59 	bl	8017324 <__b2d>
 8017472:	0004      	movs	r4, r0
 8017474:	000d      	movs	r5, r1
 8017476:	0038      	movs	r0, r7
 8017478:	a903      	add	r1, sp, #12
 801747a:	9400      	str	r4, [sp, #0]
 801747c:	9501      	str	r5, [sp, #4]
 801747e:	f7ff ff51 	bl	8017324 <__b2d>
 8017482:	6936      	ldr	r6, [r6, #16]
 8017484:	693f      	ldr	r7, [r7, #16]
 8017486:	0002      	movs	r2, r0
 8017488:	1bf7      	subs	r7, r6, r7
 801748a:	017e      	lsls	r6, r7, #5
 801748c:	46b4      	mov	ip, r6
 801748e:	9f03      	ldr	r7, [sp, #12]
 8017490:	9e02      	ldr	r6, [sp, #8]
 8017492:	000b      	movs	r3, r1
 8017494:	1bf6      	subs	r6, r6, r7
 8017496:	4466      	add	r6, ip
 8017498:	0537      	lsls	r7, r6, #20
 801749a:	2e00      	cmp	r6, #0
 801749c:	dd07      	ble.n	80174ae <__ratio+0x4a>
 801749e:	1979      	adds	r1, r7, r5
 80174a0:	9101      	str	r1, [sp, #4]
 80174a2:	9800      	ldr	r0, [sp, #0]
 80174a4:	9901      	ldr	r1, [sp, #4]
 80174a6:	f7ea f8bb 	bl	8001620 <__aeabi_ddiv>
 80174aa:	b005      	add	sp, #20
 80174ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ae:	1bcb      	subs	r3, r1, r7
 80174b0:	e7f7      	b.n	80174a2 <__ratio+0x3e>

080174b2 <__copybits>:
 80174b2:	0013      	movs	r3, r2
 80174b4:	3901      	subs	r1, #1
 80174b6:	b510      	push	{r4, lr}
 80174b8:	1149      	asrs	r1, r1, #5
 80174ba:	6912      	ldr	r2, [r2, #16]
 80174bc:	3101      	adds	r1, #1
 80174be:	0089      	lsls	r1, r1, #2
 80174c0:	3314      	adds	r3, #20
 80174c2:	0092      	lsls	r2, r2, #2
 80174c4:	1841      	adds	r1, r0, r1
 80174c6:	189a      	adds	r2, r3, r2
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d803      	bhi.n	80174d4 <__copybits+0x22>
 80174cc:	2300      	movs	r3, #0
 80174ce:	4281      	cmp	r1, r0
 80174d0:	d803      	bhi.n	80174da <__copybits+0x28>
 80174d2:	bd10      	pop	{r4, pc}
 80174d4:	cb10      	ldmia	r3!, {r4}
 80174d6:	c010      	stmia	r0!, {r4}
 80174d8:	e7f6      	b.n	80174c8 <__copybits+0x16>
 80174da:	c008      	stmia	r0!, {r3}
 80174dc:	e7f7      	b.n	80174ce <__copybits+0x1c>

080174de <__any_on>:
 80174de:	0002      	movs	r2, r0
 80174e0:	6900      	ldr	r0, [r0, #16]
 80174e2:	b510      	push	{r4, lr}
 80174e4:	3214      	adds	r2, #20
 80174e6:	114b      	asrs	r3, r1, #5
 80174e8:	4298      	cmp	r0, r3
 80174ea:	db12      	blt.n	8017512 <__any_on+0x34>
 80174ec:	dd0b      	ble.n	8017506 <__any_on+0x28>
 80174ee:	201f      	movs	r0, #31
 80174f0:	4001      	ands	r1, r0
 80174f2:	d008      	beq.n	8017506 <__any_on+0x28>
 80174f4:	0098      	lsls	r0, r3, #2
 80174f6:	5884      	ldr	r4, [r0, r2]
 80174f8:	0020      	movs	r0, r4
 80174fa:	40c8      	lsrs	r0, r1
 80174fc:	4088      	lsls	r0, r1
 80174fe:	0001      	movs	r1, r0
 8017500:	2001      	movs	r0, #1
 8017502:	428c      	cmp	r4, r1
 8017504:	d104      	bne.n	8017510 <__any_on+0x32>
 8017506:	009b      	lsls	r3, r3, #2
 8017508:	18d3      	adds	r3, r2, r3
 801750a:	4293      	cmp	r3, r2
 801750c:	d803      	bhi.n	8017516 <__any_on+0x38>
 801750e:	2000      	movs	r0, #0
 8017510:	bd10      	pop	{r4, pc}
 8017512:	0003      	movs	r3, r0
 8017514:	e7f7      	b.n	8017506 <__any_on+0x28>
 8017516:	3b04      	subs	r3, #4
 8017518:	6819      	ldr	r1, [r3, #0]
 801751a:	2900      	cmp	r1, #0
 801751c:	d0f5      	beq.n	801750a <__any_on+0x2c>
 801751e:	2001      	movs	r0, #1
 8017520:	e7f6      	b.n	8017510 <__any_on+0x32>
	...

08017524 <frexp>:
 8017524:	b570      	push	{r4, r5, r6, lr}
 8017526:	0014      	movs	r4, r2
 8017528:	2500      	movs	r5, #0
 801752a:	6025      	str	r5, [r4, #0]
 801752c:	4d10      	ldr	r5, [pc, #64]	; (8017570 <frexp+0x4c>)
 801752e:	004b      	lsls	r3, r1, #1
 8017530:	000a      	movs	r2, r1
 8017532:	085b      	lsrs	r3, r3, #1
 8017534:	42ab      	cmp	r3, r5
 8017536:	dc1a      	bgt.n	801756e <frexp+0x4a>
 8017538:	001d      	movs	r5, r3
 801753a:	4305      	orrs	r5, r0
 801753c:	d017      	beq.n	801756e <frexp+0x4a>
 801753e:	4d0d      	ldr	r5, [pc, #52]	; (8017574 <frexp+0x50>)
 8017540:	42ab      	cmp	r3, r5
 8017542:	dc09      	bgt.n	8017558 <frexp+0x34>
 8017544:	2200      	movs	r2, #0
 8017546:	4b0c      	ldr	r3, [pc, #48]	; (8017578 <frexp+0x54>)
 8017548:	f7ea fc74 	bl	8001e34 <__aeabi_dmul>
 801754c:	2536      	movs	r5, #54	; 0x36
 801754e:	000a      	movs	r2, r1
 8017550:	004b      	lsls	r3, r1, #1
 8017552:	426d      	negs	r5, r5
 8017554:	085b      	lsrs	r3, r3, #1
 8017556:	6025      	str	r5, [r4, #0]
 8017558:	4d08      	ldr	r5, [pc, #32]	; (801757c <frexp+0x58>)
 801755a:	151b      	asrs	r3, r3, #20
 801755c:	195b      	adds	r3, r3, r5
 801755e:	6825      	ldr	r5, [r4, #0]
 8017560:	18eb      	adds	r3, r5, r3
 8017562:	6023      	str	r3, [r4, #0]
 8017564:	4b06      	ldr	r3, [pc, #24]	; (8017580 <frexp+0x5c>)
 8017566:	401a      	ands	r2, r3
 8017568:	4b06      	ldr	r3, [pc, #24]	; (8017584 <frexp+0x60>)
 801756a:	4313      	orrs	r3, r2
 801756c:	0019      	movs	r1, r3
 801756e:	bd70      	pop	{r4, r5, r6, pc}
 8017570:	7fefffff 	.word	0x7fefffff
 8017574:	000fffff 	.word	0x000fffff
 8017578:	43500000 	.word	0x43500000
 801757c:	fffffc02 	.word	0xfffffc02
 8017580:	800fffff 	.word	0x800fffff
 8017584:	3fe00000 	.word	0x3fe00000

08017588 <__ssprint_r>:
 8017588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801758a:	6893      	ldr	r3, [r2, #8]
 801758c:	b087      	sub	sp, #28
 801758e:	9002      	str	r0, [sp, #8]
 8017590:	000c      	movs	r4, r1
 8017592:	0016      	movs	r6, r2
 8017594:	2b00      	cmp	r3, #0
 8017596:	d063      	beq.n	8017660 <__ssprint_r+0xd8>
 8017598:	6813      	ldr	r3, [r2, #0]
 801759a:	9303      	str	r3, [sp, #12]
 801759c:	2300      	movs	r3, #0
 801759e:	001f      	movs	r7, r3
 80175a0:	9305      	str	r3, [sp, #20]
 80175a2:	2f00      	cmp	r7, #0
 80175a4:	d02e      	beq.n	8017604 <__ssprint_r+0x7c>
 80175a6:	68a5      	ldr	r5, [r4, #8]
 80175a8:	42af      	cmp	r7, r5
 80175aa:	d347      	bcc.n	801763c <__ssprint_r+0xb4>
 80175ac:	2390      	movs	r3, #144	; 0x90
 80175ae:	89a2      	ldrh	r2, [r4, #12]
 80175b0:	00db      	lsls	r3, r3, #3
 80175b2:	421a      	tst	r2, r3
 80175b4:	d042      	beq.n	801763c <__ssprint_r+0xb4>
 80175b6:	2003      	movs	r0, #3
 80175b8:	6921      	ldr	r1, [r4, #16]
 80175ba:	6823      	ldr	r3, [r4, #0]
 80175bc:	1a5b      	subs	r3, r3, r1
 80175be:	9304      	str	r3, [sp, #16]
 80175c0:	6963      	ldr	r3, [r4, #20]
 80175c2:	4343      	muls	r3, r0
 80175c4:	0fd8      	lsrs	r0, r3, #31
 80175c6:	18c3      	adds	r3, r0, r3
 80175c8:	105b      	asrs	r3, r3, #1
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	9b04      	ldr	r3, [sp, #16]
 80175ce:	9801      	ldr	r0, [sp, #4]
 80175d0:	3301      	adds	r3, #1
 80175d2:	19db      	adds	r3, r3, r7
 80175d4:	4283      	cmp	r3, r0
 80175d6:	d900      	bls.n	80175da <__ssprint_r+0x52>
 80175d8:	9301      	str	r3, [sp, #4]
 80175da:	0553      	lsls	r3, r2, #21
 80175dc:	d544      	bpl.n	8017668 <__ssprint_r+0xe0>
 80175de:	9901      	ldr	r1, [sp, #4]
 80175e0:	9802      	ldr	r0, [sp, #8]
 80175e2:	f7fb fab7 	bl	8012b54 <_malloc_r>
 80175e6:	1e05      	subs	r5, r0, #0
 80175e8:	d114      	bne.n	8017614 <__ssprint_r+0x8c>
 80175ea:	230c      	movs	r3, #12
 80175ec:	9a02      	ldr	r2, [sp, #8]
 80175ee:	2001      	movs	r0, #1
 80175f0:	6013      	str	r3, [r2, #0]
 80175f2:	2340      	movs	r3, #64	; 0x40
 80175f4:	89a2      	ldrh	r2, [r4, #12]
 80175f6:	4240      	negs	r0, r0
 80175f8:	4313      	orrs	r3, r2
 80175fa:	81a3      	strh	r3, [r4, #12]
 80175fc:	2300      	movs	r3, #0
 80175fe:	60b3      	str	r3, [r6, #8]
 8017600:	6073      	str	r3, [r6, #4]
 8017602:	e02f      	b.n	8017664 <__ssprint_r+0xdc>
 8017604:	9b03      	ldr	r3, [sp, #12]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	9305      	str	r3, [sp, #20]
 801760a:	9b03      	ldr	r3, [sp, #12]
 801760c:	685f      	ldr	r7, [r3, #4]
 801760e:	3308      	adds	r3, #8
 8017610:	9303      	str	r3, [sp, #12]
 8017612:	e7c6      	b.n	80175a2 <__ssprint_r+0x1a>
 8017614:	9a04      	ldr	r2, [sp, #16]
 8017616:	6921      	ldr	r1, [r4, #16]
 8017618:	f7fb fcd5 	bl	8012fc6 <memcpy>
 801761c:	89a3      	ldrh	r3, [r4, #12]
 801761e:	4a18      	ldr	r2, [pc, #96]	; (8017680 <__ssprint_r+0xf8>)
 8017620:	401a      	ands	r2, r3
 8017622:	2380      	movs	r3, #128	; 0x80
 8017624:	4313      	orrs	r3, r2
 8017626:	81a3      	strh	r3, [r4, #12]
 8017628:	9b04      	ldr	r3, [sp, #16]
 801762a:	6125      	str	r5, [r4, #16]
 801762c:	18ed      	adds	r5, r5, r3
 801762e:	6025      	str	r5, [r4, #0]
 8017630:	003d      	movs	r5, r7
 8017632:	9b01      	ldr	r3, [sp, #4]
 8017634:	9a04      	ldr	r2, [sp, #16]
 8017636:	6163      	str	r3, [r4, #20]
 8017638:	1a9b      	subs	r3, r3, r2
 801763a:	60a3      	str	r3, [r4, #8]
 801763c:	42bd      	cmp	r5, r7
 801763e:	d900      	bls.n	8017642 <__ssprint_r+0xba>
 8017640:	003d      	movs	r5, r7
 8017642:	002a      	movs	r2, r5
 8017644:	9905      	ldr	r1, [sp, #20]
 8017646:	6820      	ldr	r0, [r4, #0]
 8017648:	f7ff fb91 	bl	8016d6e <memmove>
 801764c:	68a3      	ldr	r3, [r4, #8]
 801764e:	1b5b      	subs	r3, r3, r5
 8017650:	60a3      	str	r3, [r4, #8]
 8017652:	6823      	ldr	r3, [r4, #0]
 8017654:	195d      	adds	r5, r3, r5
 8017656:	68b3      	ldr	r3, [r6, #8]
 8017658:	6025      	str	r5, [r4, #0]
 801765a:	1bdb      	subs	r3, r3, r7
 801765c:	60b3      	str	r3, [r6, #8]
 801765e:	d1d1      	bne.n	8017604 <__ssprint_r+0x7c>
 8017660:	2000      	movs	r0, #0
 8017662:	6070      	str	r0, [r6, #4]
 8017664:	b007      	add	sp, #28
 8017666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017668:	9a01      	ldr	r2, [sp, #4]
 801766a:	9802      	ldr	r0, [sp, #8]
 801766c:	f7fb fcf0 	bl	8013050 <_realloc_r>
 8017670:	1e05      	subs	r5, r0, #0
 8017672:	d1d9      	bne.n	8017628 <__ssprint_r+0xa0>
 8017674:	6921      	ldr	r1, [r4, #16]
 8017676:	9802      	ldr	r0, [sp, #8]
 8017678:	f7fe ff78 	bl	801656c <_free_r>
 801767c:	e7b5      	b.n	80175ea <__ssprint_r+0x62>
 801767e:	46c0      	nop			; (mov r8, r8)
 8017680:	fffffb7f 	.word	0xfffffb7f

08017684 <__register_exitproc>:
 8017684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017686:	4d29      	ldr	r5, [pc, #164]	; (801772c <__register_exitproc+0xa8>)
 8017688:	0006      	movs	r6, r0
 801768a:	6828      	ldr	r0, [r5, #0]
 801768c:	9301      	str	r3, [sp, #4]
 801768e:	9100      	str	r1, [sp, #0]
 8017690:	0017      	movs	r7, r2
 8017692:	f7ff fb5f 	bl	8016d54 <__retarget_lock_acquire_recursive>
 8017696:	4b26      	ldr	r3, [pc, #152]	; (8017730 <__register_exitproc+0xac>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	001c      	movs	r4, r3
 801769c:	34fc      	adds	r4, #252	; 0xfc
 801769e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80176a0:	2800      	cmp	r0, #0
 80176a2:	d103      	bne.n	80176ac <__register_exitproc+0x28>
 80176a4:	334d      	adds	r3, #77	; 0x4d
 80176a6:	33ff      	adds	r3, #255	; 0xff
 80176a8:	0018      	movs	r0, r3
 80176aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80176ac:	6843      	ldr	r3, [r0, #4]
 80176ae:	2b1f      	cmp	r3, #31
 80176b0:	dd18      	ble.n	80176e4 <__register_exitproc+0x60>
 80176b2:	4b20      	ldr	r3, [pc, #128]	; (8017734 <__register_exitproc+0xb0>)
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d105      	bne.n	80176c4 <__register_exitproc+0x40>
 80176b8:	6828      	ldr	r0, [r5, #0]
 80176ba:	f7ff fb4c 	bl	8016d56 <__retarget_lock_release_recursive>
 80176be:	2001      	movs	r0, #1
 80176c0:	4240      	negs	r0, r0
 80176c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80176c4:	20c8      	movs	r0, #200	; 0xc8
 80176c6:	0040      	lsls	r0, r0, #1
 80176c8:	f7fb fa30 	bl	8012b2c <malloc>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	d0f3      	beq.n	80176b8 <__register_exitproc+0x34>
 80176d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80176d2:	2300      	movs	r3, #0
 80176d4:	6002      	str	r2, [r0, #0]
 80176d6:	22c4      	movs	r2, #196	; 0xc4
 80176d8:	0052      	lsls	r2, r2, #1
 80176da:	6043      	str	r3, [r0, #4]
 80176dc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80176de:	5083      	str	r3, [r0, r2]
 80176e0:	3204      	adds	r2, #4
 80176e2:	5083      	str	r3, [r0, r2]
 80176e4:	6843      	ldr	r3, [r0, #4]
 80176e6:	2e00      	cmp	r6, #0
 80176e8:	d014      	beq.n	8017714 <__register_exitproc+0x90>
 80176ea:	009a      	lsls	r2, r3, #2
 80176ec:	1882      	adds	r2, r0, r2
 80176ee:	0011      	movs	r1, r2
 80176f0:	3188      	adds	r1, #136	; 0x88
 80176f2:	600f      	str	r7, [r1, #0]
 80176f4:	2101      	movs	r1, #1
 80176f6:	0004      	movs	r4, r0
 80176f8:	4099      	lsls	r1, r3
 80176fa:	3485      	adds	r4, #133	; 0x85
 80176fc:	34ff      	adds	r4, #255	; 0xff
 80176fe:	6865      	ldr	r5, [r4, #4]
 8017700:	32fc      	adds	r2, #252	; 0xfc
 8017702:	430d      	orrs	r5, r1
 8017704:	6065      	str	r5, [r4, #4]
 8017706:	9d01      	ldr	r5, [sp, #4]
 8017708:	60d5      	str	r5, [r2, #12]
 801770a:	2e02      	cmp	r6, #2
 801770c:	d102      	bne.n	8017714 <__register_exitproc+0x90>
 801770e:	68a2      	ldr	r2, [r4, #8]
 8017710:	4311      	orrs	r1, r2
 8017712:	60a1      	str	r1, [r4, #8]
 8017714:	1c5a      	adds	r2, r3, #1
 8017716:	6042      	str	r2, [r0, #4]
 8017718:	3302      	adds	r3, #2
 801771a:	9a00      	ldr	r2, [sp, #0]
 801771c:	009b      	lsls	r3, r3, #2
 801771e:	501a      	str	r2, [r3, r0]
 8017720:	4b02      	ldr	r3, [pc, #8]	; (801772c <__register_exitproc+0xa8>)
 8017722:	6818      	ldr	r0, [r3, #0]
 8017724:	f7ff fb17 	bl	8016d56 <__retarget_lock_release_recursive>
 8017728:	2000      	movs	r0, #0
 801772a:	e7ca      	b.n	80176c2 <__register_exitproc+0x3e>
 801772c:	20000a74 	.word	0x20000a74
 8017730:	0801a65c 	.word	0x0801a65c
 8017734:	08012b2d 	.word	0x08012b2d

08017738 <_sbrk>:
 8017738:	4b05      	ldr	r3, [pc, #20]	; (8017750 <_sbrk+0x18>)
 801773a:	0002      	movs	r2, r0
 801773c:	6819      	ldr	r1, [r3, #0]
 801773e:	2900      	cmp	r1, #0
 8017740:	d101      	bne.n	8017746 <_sbrk+0xe>
 8017742:	4904      	ldr	r1, [pc, #16]	; (8017754 <_sbrk+0x1c>)
 8017744:	6019      	str	r1, [r3, #0]
 8017746:	6818      	ldr	r0, [r3, #0]
 8017748:	1882      	adds	r2, r0, r2
 801774a:	601a      	str	r2, [r3, #0]
 801774c:	4770      	bx	lr
 801774e:	46c0      	nop			; (mov r8, r8)
 8017750:	20007020 	.word	0x20007020
 8017754:	20007630 	.word	0x20007630

08017758 <_init>:
 8017758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775a:	46c0      	nop			; (mov r8, r8)
 801775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801775e:	bc08      	pop	{r3}
 8017760:	469e      	mov	lr, r3
 8017762:	4770      	bx	lr

08017764 <_fini>:
 8017764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017766:	46c0      	nop			; (mov r8, r8)
 8017768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801776a:	bc08      	pop	{r3}
 801776c:	469e      	mov	lr, r3
 801776e:	4770      	bx	lr
