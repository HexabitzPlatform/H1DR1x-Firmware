
H1DR1x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f28  08018290  08018290  00028290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1b8  0801b1b8  00030a5c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b1b8  0801b1b8  0002b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1c0  0801b1c0  00030a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b1c0  0801b1c0  0002b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b1c8  0801b1c8  0002b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a5c  20000000  0801b1cc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006408  20000a60  0801bc28  00030a60  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006e68  0801bc28  00036e68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004924  00000000  00000000  00030a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000160e  00000000  00000000  000353a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00038498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001134a  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004b74  00000000  00000000  0004b26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0004fdde  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006608  00000000  00000000  0004fe34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  0005643c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  00056508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a60 	.word	0x20000a60
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018278 	.word	0x08018278

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a64 	.word	0x20000a64
 8000100:	08018278 	.word	0x08018278

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 f9af 	bl	80017b0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f8f9 	bl	8001654 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f9a1 	bl	80017b0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f997 	bl	80017b0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f91b 	bl	80016cc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 f911 	bl	80016cc <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fa2b 	bl	800091c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9af 	bl	8000834 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa1d 	bl	800091c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa13 	bl	800091c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9bd 	bl	8000884 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f9b3 	bl	8000884 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f89e 	bl	800069c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0415      	lsls	r5, r2, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	000f      	movs	r7, r1
 8000574:	0001      	movs	r1, r0
 8000576:	002e      	movs	r6, r5
 8000578:	46c6      	mov	lr, r8
 800057a:	4684      	mov	ip, r0
 800057c:	0400      	lsls	r0, r0, #16
 800057e:	0c14      	lsrs	r4, r2, #16
 8000580:	0c00      	lsrs	r0, r0, #16
 8000582:	0c09      	lsrs	r1, r1, #16
 8000584:	4346      	muls	r6, r0
 8000586:	434d      	muls	r5, r1
 8000588:	4360      	muls	r0, r4
 800058a:	4361      	muls	r1, r4
 800058c:	1940      	adds	r0, r0, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	1824      	adds	r4, r4, r0
 8000592:	b500      	push	{lr}
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	0240      	lsls	r0, r0, #9
 800059c:	4680      	mov	r8, r0
 800059e:	4441      	add	r1, r8
 80005a0:	0c25      	lsrs	r5, r4, #16
 80005a2:	186d      	adds	r5, r5, r1
 80005a4:	4661      	mov	r1, ip
 80005a6:	4359      	muls	r1, r3
 80005a8:	437a      	muls	r2, r7
 80005aa:	0430      	lsls	r0, r6, #16
 80005ac:	1949      	adds	r1, r1, r5
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	0c00      	lsrs	r0, r0, #16
 80005b2:	1820      	adds	r0, r4, r0
 80005b4:	1889      	adds	r1, r1, r2
 80005b6:	bc80      	pop	{r7}
 80005b8:	46b8      	mov	r8, r7
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005bc <__aeabi_d2uiz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__aeabi_d2uiz+0x38>)
 80005c2:	0004      	movs	r4, r0
 80005c4:	000d      	movs	r5, r1
 80005c6:	f7ff ff6d 	bl	80004a4 <__aeabi_dcmpge>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d104      	bne.n	80005d8 <__aeabi_d2uiz+0x1c>
 80005ce:	0020      	movs	r0, r4
 80005d0:	0029      	movs	r1, r5
 80005d2:	f001 ff79 	bl	80024c8 <__aeabi_d2iz>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <__aeabi_d2uiz+0x38>)
 80005da:	2200      	movs	r2, #0
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fbc2 	bl	8001d68 <__aeabi_dsub>
 80005e4:	f001 ff70 	bl	80024c8 <__aeabi_d2iz>
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	061b      	lsls	r3, r3, #24
 80005ec:	469c      	mov	ip, r3
 80005ee:	4460      	add	r0, ip
 80005f0:	e7f1      	b.n	80005d6 <__aeabi_d2uiz+0x1a>
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	41e00000 	.word	0x41e00000

080005f8 <__aeabi_d2lz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0005      	movs	r5, r0
 80005fc:	000c      	movs	r4, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	0028      	movs	r0, r5
 8000604:	0021      	movs	r1, r4
 8000606:	f7ff ff2f 	bl	8000468 <__aeabi_dcmplt>
 800060a:	2800      	cmp	r0, #0
 800060c:	d108      	bne.n	8000620 <__aeabi_d2lz+0x28>
 800060e:	0028      	movs	r0, r5
 8000610:	0021      	movs	r1, r4
 8000612:	f000 f80f 	bl	8000634 <__aeabi_d2ulz>
 8000616:	0002      	movs	r2, r0
 8000618:	000b      	movs	r3, r1
 800061a:	0010      	movs	r0, r2
 800061c:	0019      	movs	r1, r3
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	061b      	lsls	r3, r3, #24
 8000624:	18e1      	adds	r1, r4, r3
 8000626:	0028      	movs	r0, r5
 8000628:	f000 f804 	bl	8000634 <__aeabi_d2ulz>
 800062c:	2300      	movs	r3, #0
 800062e:	4242      	negs	r2, r0
 8000630:	418b      	sbcs	r3, r1
 8000632:	e7f2      	b.n	800061a <__aeabi_d2lz+0x22>

08000634 <__aeabi_d2ulz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <__aeabi_d2ulz+0x34>)
 800063a:	000d      	movs	r5, r1
 800063c:	0004      	movs	r4, r0
 800063e:	f001 f927 	bl	8001890 <__aeabi_dmul>
 8000642:	f7ff ffbb 	bl	80005bc <__aeabi_d2uiz>
 8000646:	0006      	movs	r6, r0
 8000648:	f001 ffa4 	bl	8002594 <__aeabi_ui2d>
 800064c:	2200      	movs	r2, #0
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <__aeabi_d2ulz+0x38>)
 8000650:	f001 f91e 	bl	8001890 <__aeabi_dmul>
 8000654:	0002      	movs	r2, r0
 8000656:	000b      	movs	r3, r1
 8000658:	0020      	movs	r0, r4
 800065a:	0029      	movs	r1, r5
 800065c:	f001 fb84 	bl	8001d68 <__aeabi_dsub>
 8000660:	f7ff ffac 	bl	80005bc <__aeabi_d2uiz>
 8000664:	0031      	movs	r1, r6
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	3df00000 	.word	0x3df00000
 800066c:	41f00000 	.word	0x41f00000

08000670 <__aeabi_l2d>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	0006      	movs	r6, r0
 8000674:	0008      	movs	r0, r1
 8000676:	f001 ff5d 	bl	8002534 <__aeabi_i2d>
 800067a:	2200      	movs	r2, #0
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <__aeabi_l2d+0x28>)
 800067e:	f001 f907 	bl	8001890 <__aeabi_dmul>
 8000682:	000d      	movs	r5, r1
 8000684:	0004      	movs	r4, r0
 8000686:	0030      	movs	r0, r6
 8000688:	f001 ff84 	bl	8002594 <__aeabi_ui2d>
 800068c:	002b      	movs	r3, r5
 800068e:	0022      	movs	r2, r4
 8000690:	f000 f98e 	bl	80009b0 <__aeabi_dadd>
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	41f00000 	.word	0x41f00000

0800069c <__udivmoddi4>:
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	4657      	mov	r7, sl
 80006a0:	464e      	mov	r6, r9
 80006a2:	4645      	mov	r5, r8
 80006a4:	46de      	mov	lr, fp
 80006a6:	b5e0      	push	{r5, r6, r7, lr}
 80006a8:	0004      	movs	r4, r0
 80006aa:	000d      	movs	r5, r1
 80006ac:	4692      	mov	sl, r2
 80006ae:	4699      	mov	r9, r3
 80006b0:	b083      	sub	sp, #12
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d830      	bhi.n	8000718 <__udivmoddi4+0x7c>
 80006b6:	d02d      	beq.n	8000714 <__udivmoddi4+0x78>
 80006b8:	4649      	mov	r1, r9
 80006ba:	4650      	mov	r0, sl
 80006bc:	f002 f87e 	bl	80027bc <__clzdi2>
 80006c0:	0029      	movs	r1, r5
 80006c2:	0006      	movs	r6, r0
 80006c4:	0020      	movs	r0, r4
 80006c6:	f002 f879 	bl	80027bc <__clzdi2>
 80006ca:	1a33      	subs	r3, r6, r0
 80006cc:	4698      	mov	r8, r3
 80006ce:	3b20      	subs	r3, #32
 80006d0:	469b      	mov	fp, r3
 80006d2:	d433      	bmi.n	800073c <__udivmoddi4+0xa0>
 80006d4:	465a      	mov	r2, fp
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	001f      	movs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d83a      	bhi.n	800075e <__udivmoddi4+0xc2>
 80006e8:	42af      	cmp	r7, r5
 80006ea:	d100      	bne.n	80006ee <__udivmoddi4+0x52>
 80006ec:	e078      	b.n	80007e0 <__udivmoddi4+0x144>
 80006ee:	465b      	mov	r3, fp
 80006f0:	1ba4      	subs	r4, r4, r6
 80006f2:	41bd      	sbcs	r5, r7
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da00      	bge.n	80006fa <__udivmoddi4+0x5e>
 80006f8:	e075      	b.n	80007e6 <__udivmoddi4+0x14a>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	465a      	mov	r2, fp
 8000706:	4093      	lsls	r3, r2
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2301      	movs	r3, #1
 800070c:	4642      	mov	r2, r8
 800070e:	4093      	lsls	r3, r2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	e028      	b.n	8000766 <__udivmoddi4+0xca>
 8000714:	4282      	cmp	r2, r0
 8000716:	d9cf      	bls.n	80006b8 <__udivmoddi4+0x1c>
 8000718:	2200      	movs	r2, #0
 800071a:	2300      	movs	r3, #0
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <__udivmoddi4+0x8e>
 8000726:	601c      	str	r4, [r3, #0]
 8000728:	605d      	str	r5, [r3, #4]
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	b003      	add	sp, #12
 8000730:	bcf0      	pop	{r4, r5, r6, r7}
 8000732:	46bb      	mov	fp, r7
 8000734:	46b2      	mov	sl, r6
 8000736:	46a9      	mov	r9, r5
 8000738:	46a0      	mov	r8, r4
 800073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073c:	4642      	mov	r2, r8
 800073e:	2320      	movs	r3, #32
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	4652      	mov	r2, sl
 8000744:	40da      	lsrs	r2, r3
 8000746:	4641      	mov	r1, r8
 8000748:	0013      	movs	r3, r2
 800074a:	464a      	mov	r2, r9
 800074c:	408a      	lsls	r2, r1
 800074e:	0017      	movs	r7, r2
 8000750:	4642      	mov	r2, r8
 8000752:	431f      	orrs	r7, r3
 8000754:	4653      	mov	r3, sl
 8000756:	4093      	lsls	r3, r2
 8000758:	001e      	movs	r6, r3
 800075a:	42af      	cmp	r7, r5
 800075c:	d9c4      	bls.n	80006e8 <__udivmoddi4+0x4c>
 800075e:	2200      	movs	r2, #0
 8000760:	2300      	movs	r3, #0
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	4643      	mov	r3, r8
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0d9      	beq.n	8000720 <__udivmoddi4+0x84>
 800076c:	07fb      	lsls	r3, r7, #31
 800076e:	0872      	lsrs	r2, r6, #1
 8000770:	431a      	orrs	r2, r3
 8000772:	4646      	mov	r6, r8
 8000774:	087b      	lsrs	r3, r7, #1
 8000776:	e00e      	b.n	8000796 <__udivmoddi4+0xfa>
 8000778:	42ab      	cmp	r3, r5
 800077a:	d101      	bne.n	8000780 <__udivmoddi4+0xe4>
 800077c:	42a2      	cmp	r2, r4
 800077e:	d80c      	bhi.n	800079a <__udivmoddi4+0xfe>
 8000780:	1aa4      	subs	r4, r4, r2
 8000782:	419d      	sbcs	r5, r3
 8000784:	2001      	movs	r0, #1
 8000786:	1924      	adds	r4, r4, r4
 8000788:	416d      	adcs	r5, r5
 800078a:	2100      	movs	r1, #0
 800078c:	3e01      	subs	r6, #1
 800078e:	1824      	adds	r4, r4, r0
 8000790:	414d      	adcs	r5, r1
 8000792:	2e00      	cmp	r6, #0
 8000794:	d006      	beq.n	80007a4 <__udivmoddi4+0x108>
 8000796:	42ab      	cmp	r3, r5
 8000798:	d9ee      	bls.n	8000778 <__udivmoddi4+0xdc>
 800079a:	3e01      	subs	r6, #1
 800079c:	1924      	adds	r4, r4, r4
 800079e:	416d      	adcs	r5, r5
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d1f8      	bne.n	8000796 <__udivmoddi4+0xfa>
 80007a4:	9800      	ldr	r0, [sp, #0]
 80007a6:	9901      	ldr	r1, [sp, #4]
 80007a8:	465b      	mov	r3, fp
 80007aa:	1900      	adds	r0, r0, r4
 80007ac:	4169      	adcs	r1, r5
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db24      	blt.n	80007fc <__udivmoddi4+0x160>
 80007b2:	002b      	movs	r3, r5
 80007b4:	465a      	mov	r2, fp
 80007b6:	4644      	mov	r4, r8
 80007b8:	40d3      	lsrs	r3, r2
 80007ba:	002a      	movs	r2, r5
 80007bc:	40e2      	lsrs	r2, r4
 80007be:	001c      	movs	r4, r3
 80007c0:	465b      	mov	r3, fp
 80007c2:	0015      	movs	r5, r2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db2a      	blt.n	800081e <__udivmoddi4+0x182>
 80007c8:	0026      	movs	r6, r4
 80007ca:	409e      	lsls	r6, r3
 80007cc:	0033      	movs	r3, r6
 80007ce:	0026      	movs	r6, r4
 80007d0:	4647      	mov	r7, r8
 80007d2:	40be      	lsls	r6, r7
 80007d4:	0032      	movs	r2, r6
 80007d6:	1a80      	subs	r0, r0, r2
 80007d8:	4199      	sbcs	r1, r3
 80007da:	9000      	str	r0, [sp, #0]
 80007dc:	9101      	str	r1, [sp, #4]
 80007de:	e79f      	b.n	8000720 <__udivmoddi4+0x84>
 80007e0:	42a3      	cmp	r3, r4
 80007e2:	d8bc      	bhi.n	800075e <__udivmoddi4+0xc2>
 80007e4:	e783      	b.n	80006ee <__udivmoddi4+0x52>
 80007e6:	4642      	mov	r2, r8
 80007e8:	2320      	movs	r3, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	2200      	movs	r2, #0
 80007f0:	9100      	str	r1, [sp, #0]
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	40da      	lsrs	r2, r3
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	e786      	b.n	800070a <__udivmoddi4+0x6e>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2320      	movs	r3, #32
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	002a      	movs	r2, r5
 8000804:	4646      	mov	r6, r8
 8000806:	409a      	lsls	r2, r3
 8000808:	0023      	movs	r3, r4
 800080a:	40f3      	lsrs	r3, r6
 800080c:	4644      	mov	r4, r8
 800080e:	4313      	orrs	r3, r2
 8000810:	002a      	movs	r2, r5
 8000812:	40e2      	lsrs	r2, r4
 8000814:	001c      	movs	r4, r3
 8000816:	465b      	mov	r3, fp
 8000818:	0015      	movs	r5, r2
 800081a:	2b00      	cmp	r3, #0
 800081c:	dad4      	bge.n	80007c8 <__udivmoddi4+0x12c>
 800081e:	4642      	mov	r2, r8
 8000820:	002f      	movs	r7, r5
 8000822:	2320      	movs	r3, #32
 8000824:	0026      	movs	r6, r4
 8000826:	4097      	lsls	r7, r2
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	40de      	lsrs	r6, r3
 800082c:	003b      	movs	r3, r7
 800082e:	4333      	orrs	r3, r6
 8000830:	e7cd      	b.n	80007ce <__udivmoddi4+0x132>
 8000832:	46c0      	nop			; (mov r8, r8)

08000834 <__eqsf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0042      	lsls	r2, r0, #1
 8000838:	024e      	lsls	r6, r1, #9
 800083a:	004c      	lsls	r4, r1, #1
 800083c:	0245      	lsls	r5, r0, #9
 800083e:	0a6d      	lsrs	r5, r5, #9
 8000840:	0e12      	lsrs	r2, r2, #24
 8000842:	0fc3      	lsrs	r3, r0, #31
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e24      	lsrs	r4, r4, #24
 8000848:	0fc9      	lsrs	r1, r1, #31
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00f      	beq.n	800086e <__eqsf2+0x3a>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d011      	beq.n	8000876 <__eqsf2+0x42>
 8000852:	2001      	movs	r0, #1
 8000854:	42a2      	cmp	r2, r4
 8000856:	d000      	beq.n	800085a <__eqsf2+0x26>
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	42b5      	cmp	r5, r6
 800085c:	d1fc      	bne.n	8000858 <__eqsf2+0x24>
 800085e:	428b      	cmp	r3, r1
 8000860:	d00d      	beq.n	800087e <__eqsf2+0x4a>
 8000862:	2a00      	cmp	r2, #0
 8000864:	d1f8      	bne.n	8000858 <__eqsf2+0x24>
 8000866:	0028      	movs	r0, r5
 8000868:	1e45      	subs	r5, r0, #1
 800086a:	41a8      	sbcs	r0, r5
 800086c:	e7f4      	b.n	8000858 <__eqsf2+0x24>
 800086e:	2001      	movs	r0, #1
 8000870:	2d00      	cmp	r5, #0
 8000872:	d1f1      	bne.n	8000858 <__eqsf2+0x24>
 8000874:	e7eb      	b.n	800084e <__eqsf2+0x1a>
 8000876:	2001      	movs	r0, #1
 8000878:	2e00      	cmp	r6, #0
 800087a:	d1ed      	bne.n	8000858 <__eqsf2+0x24>
 800087c:	e7e9      	b.n	8000852 <__eqsf2+0x1e>
 800087e:	2000      	movs	r0, #0
 8000880:	e7ea      	b.n	8000858 <__eqsf2+0x24>
 8000882:	46c0      	nop			; (mov r8, r8)

08000884 <__gesf2>:
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	0042      	lsls	r2, r0, #1
 8000888:	0246      	lsls	r6, r0, #9
 800088a:	024d      	lsls	r5, r1, #9
 800088c:	004c      	lsls	r4, r1, #1
 800088e:	0fc3      	lsrs	r3, r0, #31
 8000890:	0a76      	lsrs	r6, r6, #9
 8000892:	0e12      	lsrs	r2, r2, #24
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	0e24      	lsrs	r4, r4, #24
 8000898:	0fc8      	lsrs	r0, r1, #31
 800089a:	2aff      	cmp	r2, #255	; 0xff
 800089c:	d01f      	beq.n	80008de <__gesf2+0x5a>
 800089e:	2cff      	cmp	r4, #255	; 0xff
 80008a0:	d010      	beq.n	80008c4 <__gesf2+0x40>
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d11f      	bne.n	80008e6 <__gesf2+0x62>
 80008a6:	4271      	negs	r1, r6
 80008a8:	4171      	adcs	r1, r6
 80008aa:	2c00      	cmp	r4, #0
 80008ac:	d101      	bne.n	80008b2 <__gesf2+0x2e>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d01e      	beq.n	80008f0 <__gesf2+0x6c>
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d10e      	bne.n	80008d4 <__gesf2+0x50>
 80008b6:	4283      	cmp	r3, r0
 80008b8:	d01e      	beq.n	80008f8 <__gesf2+0x74>
 80008ba:	2102      	movs	r1, #2
 80008bc:	1e58      	subs	r0, r3, #1
 80008be:	4008      	ands	r0, r1
 80008c0:	3801      	subs	r0, #1
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d126      	bne.n	8000916 <__gesf2+0x92>
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d1f4      	bne.n	80008b6 <__gesf2+0x32>
 80008cc:	4271      	negs	r1, r6
 80008ce:	4171      	adcs	r1, r6
 80008d0:	2900      	cmp	r1, #0
 80008d2:	d0f0      	beq.n	80008b6 <__gesf2+0x32>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1f4      	bne.n	80008c2 <__gesf2+0x3e>
 80008d8:	2001      	movs	r0, #1
 80008da:	4240      	negs	r0, r0
 80008dc:	e7f1      	b.n	80008c2 <__gesf2+0x3e>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d119      	bne.n	8000916 <__gesf2+0x92>
 80008e2:	2cff      	cmp	r4, #255	; 0xff
 80008e4:	d0ee      	beq.n	80008c4 <__gesf2+0x40>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d1e5      	bne.n	80008b6 <__gesf2+0x32>
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d1e3      	bne.n	80008b6 <__gesf2+0x32>
 80008ee:	e7e4      	b.n	80008ba <__gesf2+0x36>
 80008f0:	2000      	movs	r0, #0
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d0e5      	beq.n	80008c2 <__gesf2+0x3e>
 80008f6:	e7e0      	b.n	80008ba <__gesf2+0x36>
 80008f8:	42a2      	cmp	r2, r4
 80008fa:	dc05      	bgt.n	8000908 <__gesf2+0x84>
 80008fc:	dbea      	blt.n	80008d4 <__gesf2+0x50>
 80008fe:	42ae      	cmp	r6, r5
 8000900:	d802      	bhi.n	8000908 <__gesf2+0x84>
 8000902:	d3e7      	bcc.n	80008d4 <__gesf2+0x50>
 8000904:	2000      	movs	r0, #0
 8000906:	e7dc      	b.n	80008c2 <__gesf2+0x3e>
 8000908:	4241      	negs	r1, r0
 800090a:	4141      	adcs	r1, r0
 800090c:	4248      	negs	r0, r1
 800090e:	2102      	movs	r1, #2
 8000910:	4008      	ands	r0, r1
 8000912:	3801      	subs	r0, #1
 8000914:	e7d5      	b.n	80008c2 <__gesf2+0x3e>
 8000916:	2002      	movs	r0, #2
 8000918:	4240      	negs	r0, r0
 800091a:	e7d2      	b.n	80008c2 <__gesf2+0x3e>

0800091c <__lesf2>:
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	0042      	lsls	r2, r0, #1
 8000920:	0246      	lsls	r6, r0, #9
 8000922:	024d      	lsls	r5, r1, #9
 8000924:	004c      	lsls	r4, r1, #1
 8000926:	0fc3      	lsrs	r3, r0, #31
 8000928:	0a76      	lsrs	r6, r6, #9
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	0e24      	lsrs	r4, r4, #24
 8000930:	0fc8      	lsrs	r0, r1, #31
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d00d      	beq.n	8000952 <__lesf2+0x36>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d00f      	beq.n	800095a <__lesf2+0x3e>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d123      	bne.n	8000986 <__lesf2+0x6a>
 800093e:	4271      	negs	r1, r6
 8000940:	4171      	adcs	r1, r6
 8000942:	2c00      	cmp	r4, #0
 8000944:	d10f      	bne.n	8000966 <__lesf2+0x4a>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d10d      	bne.n	8000966 <__lesf2+0x4a>
 800094a:	2000      	movs	r0, #0
 800094c:	2e00      	cmp	r6, #0
 800094e:	d014      	beq.n	800097a <__lesf2+0x5e>
 8000950:	e00d      	b.n	800096e <__lesf2+0x52>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d110      	bne.n	8000978 <__lesf2+0x5c>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d115      	bne.n	8000986 <__lesf2+0x6a>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d10c      	bne.n	8000978 <__lesf2+0x5c>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d103      	bne.n	800096a <__lesf2+0x4e>
 8000962:	4271      	negs	r1, r6
 8000964:	4171      	adcs	r1, r6
 8000966:	2900      	cmp	r1, #0
 8000968:	d108      	bne.n	800097c <__lesf2+0x60>
 800096a:	4283      	cmp	r3, r0
 800096c:	d010      	beq.n	8000990 <__lesf2+0x74>
 800096e:	2102      	movs	r1, #2
 8000970:	1e58      	subs	r0, r3, #1
 8000972:	4008      	ands	r0, r1
 8000974:	3801      	subs	r0, #1
 8000976:	e000      	b.n	800097a <__lesf2+0x5e>
 8000978:	2002      	movs	r0, #2
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	2800      	cmp	r0, #0
 800097e:	d1fc      	bne.n	800097a <__lesf2+0x5e>
 8000980:	2001      	movs	r0, #1
 8000982:	4240      	negs	r0, r0
 8000984:	e7f9      	b.n	800097a <__lesf2+0x5e>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d1ef      	bne.n	800096a <__lesf2+0x4e>
 800098a:	2d00      	cmp	r5, #0
 800098c:	d1ed      	bne.n	800096a <__lesf2+0x4e>
 800098e:	e7ee      	b.n	800096e <__lesf2+0x52>
 8000990:	42a2      	cmp	r2, r4
 8000992:	dc05      	bgt.n	80009a0 <__lesf2+0x84>
 8000994:	dbf2      	blt.n	800097c <__lesf2+0x60>
 8000996:	42ae      	cmp	r6, r5
 8000998:	d802      	bhi.n	80009a0 <__lesf2+0x84>
 800099a:	d3ef      	bcc.n	800097c <__lesf2+0x60>
 800099c:	2000      	movs	r0, #0
 800099e:	e7ec      	b.n	800097a <__lesf2+0x5e>
 80009a0:	4241      	negs	r1, r0
 80009a2:	4141      	adcs	r1, r0
 80009a4:	4248      	negs	r0, r1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4008      	ands	r0, r1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7e5      	b.n	800097a <__lesf2+0x5e>
 80009ae:	46c0      	nop			; (mov r8, r8)

080009b0 <__aeabi_dadd>:
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	464f      	mov	r7, r9
 80009b4:	46d6      	mov	lr, sl
 80009b6:	4646      	mov	r6, r8
 80009b8:	000d      	movs	r5, r1
 80009ba:	0001      	movs	r1, r0
 80009bc:	0018      	movs	r0, r3
 80009be:	b5c0      	push	{r6, r7, lr}
 80009c0:	0017      	movs	r7, r2
 80009c2:	032b      	lsls	r3, r5, #12
 80009c4:	0a5a      	lsrs	r2, r3, #9
 80009c6:	0f4b      	lsrs	r3, r1, #29
 80009c8:	4313      	orrs	r3, r2
 80009ca:	00ca      	lsls	r2, r1, #3
 80009cc:	4691      	mov	r9, r2
 80009ce:	0302      	lsls	r2, r0, #12
 80009d0:	006e      	lsls	r6, r5, #1
 80009d2:	0041      	lsls	r1, r0, #1
 80009d4:	0a52      	lsrs	r2, r2, #9
 80009d6:	0fec      	lsrs	r4, r5, #31
 80009d8:	0f7d      	lsrs	r5, r7, #29
 80009da:	4315      	orrs	r5, r2
 80009dc:	0d76      	lsrs	r6, r6, #21
 80009de:	0d49      	lsrs	r1, r1, #21
 80009e0:	0fc0      	lsrs	r0, r0, #31
 80009e2:	4682      	mov	sl, r0
 80009e4:	46ac      	mov	ip, r5
 80009e6:	00ff      	lsls	r7, r7, #3
 80009e8:	1a72      	subs	r2, r6, r1
 80009ea:	4284      	cmp	r4, r0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x40>
 80009ee:	e098      	b.n	8000b22 <__aeabi_dadd+0x172>
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	dc00      	bgt.n	80009f6 <__aeabi_dadd+0x46>
 80009f4:	e081      	b.n	8000afa <__aeabi_dadd+0x14a>
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x4c>
 80009fa:	e0b6      	b.n	8000b6a <__aeabi_dadd+0x1ba>
 80009fc:	49c9      	ldr	r1, [pc, #804]	; (8000d24 <__aeabi_dadd+0x374>)
 80009fe:	428e      	cmp	r6, r1
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dadd+0x54>
 8000a02:	e172      	b.n	8000cea <__aeabi_dadd+0x33a>
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0028      	movs	r0, r5
 8000a08:	0409      	lsls	r1, r1, #16
 8000a0a:	4308      	orrs	r0, r1
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	2a38      	cmp	r2, #56	; 0x38
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_dadd+0x64>
 8000a12:	e15e      	b.n	8000cd2 <__aeabi_dadd+0x322>
 8000a14:	2a1f      	cmp	r2, #31
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x6a>
 8000a18:	e1ee      	b.n	8000df8 <__aeabi_dadd+0x448>
 8000a1a:	2020      	movs	r0, #32
 8000a1c:	0039      	movs	r1, r7
 8000a1e:	4665      	mov	r5, ip
 8000a20:	1a80      	subs	r0, r0, r2
 8000a22:	4087      	lsls	r7, r0
 8000a24:	40d1      	lsrs	r1, r2
 8000a26:	4085      	lsls	r5, r0
 8000a28:	430d      	orrs	r5, r1
 8000a2a:	0039      	movs	r1, r7
 8000a2c:	1e4f      	subs	r7, r1, #1
 8000a2e:	41b9      	sbcs	r1, r7
 8000a30:	4667      	mov	r7, ip
 8000a32:	40d7      	lsrs	r7, r2
 8000a34:	4329      	orrs	r1, r5
 8000a36:	1bdb      	subs	r3, r3, r7
 8000a38:	464a      	mov	r2, r9
 8000a3a:	1a55      	subs	r5, r2, r1
 8000a3c:	45a9      	cmp	r9, r5
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	4249      	negs	r1, r1
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	4698      	mov	r8, r3
 8000a46:	4643      	mov	r3, r8
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	d400      	bmi.n	8000a4e <__aeabi_dadd+0x9e>
 8000a4c:	e0cc      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	025b      	lsls	r3, r3, #9
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	4698      	mov	r8, r3
 8000a56:	4643      	mov	r3, r8
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0xae>
 8000a5c:	e12c      	b.n	8000cb8 <__aeabi_dadd+0x308>
 8000a5e:	4640      	mov	r0, r8
 8000a60:	f001 fe8e 	bl	8002780 <__clzsi2>
 8000a64:	0001      	movs	r1, r0
 8000a66:	3908      	subs	r1, #8
 8000a68:	2220      	movs	r2, #32
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	4643      	mov	r3, r8
 8000a6e:	1a52      	subs	r2, r2, r1
 8000a70:	408b      	lsls	r3, r1
 8000a72:	40d0      	lsrs	r0, r2
 8000a74:	408d      	lsls	r5, r1
 8000a76:	4303      	orrs	r3, r0
 8000a78:	428e      	cmp	r6, r1
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dadd+0xce>
 8000a7c:	e117      	b.n	8000cae <__aeabi_dadd+0x2fe>
 8000a7e:	1b8e      	subs	r6, r1, r6
 8000a80:	1c72      	adds	r2, r6, #1
 8000a82:	2a1f      	cmp	r2, #31
 8000a84:	dd00      	ble.n	8000a88 <__aeabi_dadd+0xd8>
 8000a86:	e1a7      	b.n	8000dd8 <__aeabi_dadd+0x428>
 8000a88:	2120      	movs	r1, #32
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	002e      	movs	r6, r5
 8000a8e:	1a89      	subs	r1, r1, r2
 8000a90:	408d      	lsls	r5, r1
 8000a92:	4088      	lsls	r0, r1
 8000a94:	40d6      	lsrs	r6, r2
 8000a96:	40d3      	lsrs	r3, r2
 8000a98:	1e69      	subs	r1, r5, #1
 8000a9a:	418d      	sbcs	r5, r1
 8000a9c:	4330      	orrs	r0, r6
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	4305      	orrs	r5, r0
 8000aa4:	076b      	lsls	r3, r5, #29
 8000aa6:	d009      	beq.n	8000abc <__aeabi_dadd+0x10c>
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	402b      	ands	r3, r5
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d005      	beq.n	8000abc <__aeabi_dadd+0x10c>
 8000ab0:	1d2b      	adds	r3, r5, #4
 8000ab2:	42ab      	cmp	r3, r5
 8000ab4:	41ad      	sbcs	r5, r5
 8000ab6:	426d      	negs	r5, r5
 8000ab8:	44a8      	add	r8, r5
 8000aba:	001d      	movs	r5, r3
 8000abc:	4643      	mov	r3, r8
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	d400      	bmi.n	8000ac4 <__aeabi_dadd+0x114>
 8000ac2:	e094      	b.n	8000bee <__aeabi_dadd+0x23e>
 8000ac4:	4b97      	ldr	r3, [pc, #604]	; (8000d24 <__aeabi_dadd+0x374>)
 8000ac6:	1c72      	adds	r2, r6, #1
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x11e>
 8000acc:	e09d      	b.n	8000c0a <__aeabi_dadd+0x25a>
 8000ace:	4641      	mov	r1, r8
 8000ad0:	4b95      	ldr	r3, [pc, #596]	; (8000d28 <__aeabi_dadd+0x378>)
 8000ad2:	08ed      	lsrs	r5, r5, #3
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	000b      	movs	r3, r1
 8000ad8:	0552      	lsls	r2, r2, #21
 8000ada:	0749      	lsls	r1, r1, #29
 8000adc:	025b      	lsls	r3, r3, #9
 8000ade:	4329      	orrs	r1, r5
 8000ae0:	0b1b      	lsrs	r3, r3, #12
 8000ae2:	0d52      	lsrs	r2, r2, #21
 8000ae4:	0512      	lsls	r2, r2, #20
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	07e4      	lsls	r4, r4, #31
 8000aea:	4323      	orrs	r3, r4
 8000aec:	0008      	movs	r0, r1
 8000aee:	0019      	movs	r1, r3
 8000af0:	bce0      	pop	{r5, r6, r7}
 8000af2:	46ba      	mov	sl, r7
 8000af4:	46b1      	mov	r9, r6
 8000af6:	46a8      	mov	r8, r5
 8000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d043      	beq.n	8000b86 <__aeabi_dadd+0x1d6>
 8000afe:	1b8a      	subs	r2, r1, r6
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x156>
 8000b04:	e12a      	b.n	8000d5c <__aeabi_dadd+0x3ac>
 8000b06:	464c      	mov	r4, r9
 8000b08:	431c      	orrs	r4, r3
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x15e>
 8000b0c:	e1d1      	b.n	8000eb2 <__aeabi_dadd+0x502>
 8000b0e:	1e54      	subs	r4, r2, #1
 8000b10:	2a01      	cmp	r2, #1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x166>
 8000b14:	e21f      	b.n	8000f56 <__aeabi_dadd+0x5a6>
 8000b16:	4d83      	ldr	r5, [pc, #524]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b18:	42aa      	cmp	r2, r5
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x16e>
 8000b1c:	e272      	b.n	8001004 <__aeabi_dadd+0x654>
 8000b1e:	0022      	movs	r2, r4
 8000b20:	e123      	b.n	8000d6a <__aeabi_dadd+0x3ba>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	dc00      	bgt.n	8000b28 <__aeabi_dadd+0x178>
 8000b26:	e098      	b.n	8000c5a <__aeabi_dadd+0x2aa>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	d042      	beq.n	8000bb2 <__aeabi_dadd+0x202>
 8000b2c:	497d      	ldr	r1, [pc, #500]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b2e:	428e      	cmp	r6, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x184>
 8000b32:	e0da      	b.n	8000cea <__aeabi_dadd+0x33a>
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0028      	movs	r0, r5
 8000b38:	0409      	lsls	r1, r1, #16
 8000b3a:	4308      	orrs	r0, r1
 8000b3c:	4684      	mov	ip, r0
 8000b3e:	2a38      	cmp	r2, #56	; 0x38
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x194>
 8000b42:	e129      	b.n	8000d98 <__aeabi_dadd+0x3e8>
 8000b44:	2a1f      	cmp	r2, #31
 8000b46:	dc00      	bgt.n	8000b4a <__aeabi_dadd+0x19a>
 8000b48:	e187      	b.n	8000e5a <__aeabi_dadd+0x4aa>
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	4665      	mov	r5, ip
 8000b4e:	3920      	subs	r1, #32
 8000b50:	40cd      	lsrs	r5, r1
 8000b52:	2a20      	cmp	r2, #32
 8000b54:	d004      	beq.n	8000b60 <__aeabi_dadd+0x1b0>
 8000b56:	2040      	movs	r0, #64	; 0x40
 8000b58:	4661      	mov	r1, ip
 8000b5a:	1a82      	subs	r2, r0, r2
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	430f      	orrs	r7, r1
 8000b60:	0039      	movs	r1, r7
 8000b62:	1e4f      	subs	r7, r1, #1
 8000b64:	41b9      	sbcs	r1, r7
 8000b66:	430d      	orrs	r5, r1
 8000b68:	e11b      	b.n	8000da2 <__aeabi_dadd+0x3f2>
 8000b6a:	0029      	movs	r1, r5
 8000b6c:	4339      	orrs	r1, r7
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x1c2>
 8000b70:	e0b5      	b.n	8000cde <__aeabi_dadd+0x32e>
 8000b72:	1e51      	subs	r1, r2, #1
 8000b74:	2a01      	cmp	r2, #1
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x1ca>
 8000b78:	e1ab      	b.n	8000ed2 <__aeabi_dadd+0x522>
 8000b7a:	486a      	ldr	r0, [pc, #424]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b7c:	4282      	cmp	r2, r0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x1d2>
 8000b80:	e1b2      	b.n	8000ee8 <__aeabi_dadd+0x538>
 8000b82:	000a      	movs	r2, r1
 8000b84:	e743      	b.n	8000a0e <__aeabi_dadd+0x5e>
 8000b86:	4969      	ldr	r1, [pc, #420]	; (8000d2c <__aeabi_dadd+0x37c>)
 8000b88:	1c75      	adds	r5, r6, #1
 8000b8a:	420d      	tst	r5, r1
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dadd+0x1e0>
 8000b8e:	e0cf      	b.n	8000d30 <__aeabi_dadd+0x380>
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	d000      	beq.n	8000b96 <__aeabi_dadd+0x1e6>
 8000b94:	e193      	b.n	8000ebe <__aeabi_dadd+0x50e>
 8000b96:	4649      	mov	r1, r9
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0x1ee>
 8000b9c:	e1d1      	b.n	8000f42 <__aeabi_dadd+0x592>
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	4339      	orrs	r1, r7
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_dadd+0x1f6>
 8000ba4:	e1e3      	b.n	8000f6e <__aeabi_dadd+0x5be>
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	0758      	lsls	r0, r3, #29
 8000baa:	08c9      	lsrs	r1, r1, #3
 8000bac:	4301      	orrs	r1, r0
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	e026      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	4339      	orrs	r1, r7
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dadd+0x20a>
 8000bb8:	e091      	b.n	8000cde <__aeabi_dadd+0x32e>
 8000bba:	1e51      	subs	r1, r2, #1
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d005      	beq.n	8000bcc <__aeabi_dadd+0x21c>
 8000bc0:	4858      	ldr	r0, [pc, #352]	; (8000d24 <__aeabi_dadd+0x374>)
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x218>
 8000bc6:	e18f      	b.n	8000ee8 <__aeabi_dadd+0x538>
 8000bc8:	000a      	movs	r2, r1
 8000bca:	e7b8      	b.n	8000b3e <__aeabi_dadd+0x18e>
 8000bcc:	003d      	movs	r5, r7
 8000bce:	444d      	add	r5, r9
 8000bd0:	454d      	cmp	r5, r9
 8000bd2:	4189      	sbcs	r1, r1
 8000bd4:	4463      	add	r3, ip
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4249      	negs	r1, r1
 8000bda:	4488      	add	r8, r1
 8000bdc:	4643      	mov	r3, r8
 8000bde:	2602      	movs	r6, #2
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	d500      	bpl.n	8000be6 <__aeabi_dadd+0x236>
 8000be4:	e0eb      	b.n	8000dbe <__aeabi_dadd+0x40e>
 8000be6:	3e01      	subs	r6, #1
 8000be8:	076b      	lsls	r3, r5, #29
 8000bea:	d000      	beq.n	8000bee <__aeabi_dadd+0x23e>
 8000bec:	e75c      	b.n	8000aa8 <__aeabi_dadd+0xf8>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	08e9      	lsrs	r1, r5, #3
 8000bf2:	075a      	lsls	r2, r3, #29
 8000bf4:	4311      	orrs	r1, r2
 8000bf6:	0032      	movs	r2, r6
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	484a      	ldr	r0, [pc, #296]	; (8000d24 <__aeabi_dadd+0x374>)
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	d021      	beq.n	8000c44 <__aeabi_dadd+0x294>
 8000c00:	031b      	lsls	r3, r3, #12
 8000c02:	0552      	lsls	r2, r2, #21
 8000c04:	0b1b      	lsrs	r3, r3, #12
 8000c06:	0d52      	lsrs	r2, r2, #21
 8000c08:	e76c      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e769      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000c10:	002a      	movs	r2, r5
 8000c12:	433a      	orrs	r2, r7
 8000c14:	d069      	beq.n	8000cea <__aeabi_dadd+0x33a>
 8000c16:	464a      	mov	r2, r9
 8000c18:	0758      	lsls	r0, r3, #29
 8000c1a:	08d1      	lsrs	r1, r2, #3
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	031b      	lsls	r3, r3, #12
 8000c22:	4308      	orrs	r0, r1
 8000c24:	421a      	tst	r2, r3
 8000c26:	d007      	beq.n	8000c38 <__aeabi_dadd+0x288>
 8000c28:	0029      	movs	r1, r5
 8000c2a:	08ed      	lsrs	r5, r5, #3
 8000c2c:	421d      	tst	r5, r3
 8000c2e:	d103      	bne.n	8000c38 <__aeabi_dadd+0x288>
 8000c30:	002a      	movs	r2, r5
 8000c32:	08ff      	lsrs	r7, r7, #3
 8000c34:	0748      	lsls	r0, r1, #29
 8000c36:	4338      	orrs	r0, r7
 8000c38:	0f43      	lsrs	r3, r0, #29
 8000c3a:	00c1      	lsls	r1, r0, #3
 8000c3c:	075b      	lsls	r3, r3, #29
 8000c3e:	08c9      	lsrs	r1, r1, #3
 8000c40:	4319      	orrs	r1, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	000a      	movs	r2, r1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x29c>
 8000c4a:	e213      	b.n	8001074 <__aeabi_dadd+0x6c4>
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0312      	lsls	r2, r2, #12
 8000c50:	4313      	orrs	r3, r2
 8000c52:	031b      	lsls	r3, r3, #12
 8000c54:	4a33      	ldr	r2, [pc, #204]	; (8000d24 <__aeabi_dadd+0x374>)
 8000c56:	0b1b      	lsrs	r3, r3, #12
 8000c58:	e744      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d04b      	beq.n	8000cf6 <__aeabi_dadd+0x346>
 8000c5e:	1b8a      	subs	r2, r1, r6
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x2b6>
 8000c64:	e0e7      	b.n	8000e36 <__aeabi_dadd+0x486>
 8000c66:	482f      	ldr	r0, [pc, #188]	; (8000d24 <__aeabi_dadd+0x374>)
 8000c68:	4281      	cmp	r1, r0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x2be>
 8000c6c:	e195      	b.n	8000f9a <__aeabi_dadd+0x5ea>
 8000c6e:	2080      	movs	r0, #128	; 0x80
 8000c70:	0400      	lsls	r0, r0, #16
 8000c72:	4303      	orrs	r3, r0
 8000c74:	2a38      	cmp	r2, #56	; 0x38
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_dadd+0x2ca>
 8000c78:	e143      	b.n	8000f02 <__aeabi_dadd+0x552>
 8000c7a:	2a1f      	cmp	r2, #31
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0x2d0>
 8000c7e:	e1db      	b.n	8001038 <__aeabi_dadd+0x688>
 8000c80:	2020      	movs	r0, #32
 8000c82:	001d      	movs	r5, r3
 8000c84:	464e      	mov	r6, r9
 8000c86:	1a80      	subs	r0, r0, r2
 8000c88:	4085      	lsls	r5, r0
 8000c8a:	40d6      	lsrs	r6, r2
 8000c8c:	4335      	orrs	r5, r6
 8000c8e:	464e      	mov	r6, r9
 8000c90:	4086      	lsls	r6, r0
 8000c92:	0030      	movs	r0, r6
 8000c94:	40d3      	lsrs	r3, r2
 8000c96:	1e46      	subs	r6, r0, #1
 8000c98:	41b0      	sbcs	r0, r6
 8000c9a:	449c      	add	ip, r3
 8000c9c:	4305      	orrs	r5, r0
 8000c9e:	19ed      	adds	r5, r5, r7
 8000ca0:	42bd      	cmp	r5, r7
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	4463      	add	r3, ip
 8000ca8:	4698      	mov	r8, r3
 8000caa:	000e      	movs	r6, r1
 8000cac:	e07f      	b.n	8000dae <__aeabi_dadd+0x3fe>
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <__aeabi_dadd+0x378>)
 8000cb0:	1a76      	subs	r6, r6, r1
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	e6f5      	b.n	8000aa4 <__aeabi_dadd+0xf4>
 8000cb8:	0028      	movs	r0, r5
 8000cba:	f001 fd61 	bl	8002780 <__clzsi2>
 8000cbe:	0001      	movs	r1, r0
 8000cc0:	3118      	adds	r1, #24
 8000cc2:	291f      	cmp	r1, #31
 8000cc4:	dc00      	bgt.n	8000cc8 <__aeabi_dadd+0x318>
 8000cc6:	e6cf      	b.n	8000a68 <__aeabi_dadd+0xb8>
 8000cc8:	002b      	movs	r3, r5
 8000cca:	3808      	subs	r0, #8
 8000ccc:	4083      	lsls	r3, r0
 8000cce:	2500      	movs	r5, #0
 8000cd0:	e6d2      	b.n	8000a78 <__aeabi_dadd+0xc8>
 8000cd2:	4662      	mov	r2, ip
 8000cd4:	433a      	orrs	r2, r7
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	1e4f      	subs	r7, r1, #1
 8000cda:	41b9      	sbcs	r1, r7
 8000cdc:	e6ac      	b.n	8000a38 <__aeabi_dadd+0x88>
 8000cde:	4649      	mov	r1, r9
 8000ce0:	0758      	lsls	r0, r3, #29
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	4301      	orrs	r1, r0
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	e787      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000cea:	4649      	mov	r1, r9
 8000cec:	075a      	lsls	r2, r3, #29
 8000cee:	08c9      	lsrs	r1, r1, #3
 8000cf0:	4311      	orrs	r1, r2
 8000cf2:	08db      	lsrs	r3, r3, #3
 8000cf4:	e7a6      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <__aeabi_dadd+0x37c>)
 8000cf8:	1c70      	adds	r0, r6, #1
 8000cfa:	4208      	tst	r0, r1
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x350>
 8000cfe:	e0bb      	b.n	8000e78 <__aeabi_dadd+0x4c8>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x356>
 8000d04:	e114      	b.n	8000f30 <__aeabi_dadd+0x580>
 8000d06:	4649      	mov	r1, r9
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x35e>
 8000d0c:	e175      	b.n	8000ffa <__aeabi_dadd+0x64a>
 8000d0e:	0029      	movs	r1, r5
 8000d10:	4339      	orrs	r1, r7
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x366>
 8000d14:	e17e      	b.n	8001014 <__aeabi_dadd+0x664>
 8000d16:	4649      	mov	r1, r9
 8000d18:	0758      	lsls	r0, r3, #29
 8000d1a:	08c9      	lsrs	r1, r1, #3
 8000d1c:	4301      	orrs	r1, r0
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	e76e      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	000007ff 	.word	0x000007ff
 8000d28:	ff7fffff 	.word	0xff7fffff
 8000d2c:	000007fe 	.word	0x000007fe
 8000d30:	4649      	mov	r1, r9
 8000d32:	1bcd      	subs	r5, r1, r7
 8000d34:	4661      	mov	r1, ip
 8000d36:	1a58      	subs	r0, r3, r1
 8000d38:	45a9      	cmp	r9, r5
 8000d3a:	4189      	sbcs	r1, r1
 8000d3c:	4249      	negs	r1, r1
 8000d3e:	4688      	mov	r8, r1
 8000d40:	0001      	movs	r1, r0
 8000d42:	4640      	mov	r0, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	4688      	mov	r8, r1
 8000d48:	0209      	lsls	r1, r1, #8
 8000d4a:	d500      	bpl.n	8000d4e <__aeabi_dadd+0x39e>
 8000d4c:	e0a6      	b.n	8000e9c <__aeabi_dadd+0x4ec>
 8000d4e:	4641      	mov	r1, r8
 8000d50:	4329      	orrs	r1, r5
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x3a6>
 8000d54:	e67f      	b.n	8000a56 <__aeabi_dadd+0xa6>
 8000d56:	2300      	movs	r3, #0
 8000d58:	2400      	movs	r4, #0
 8000d5a:	e751      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000d5c:	4cc7      	ldr	r4, [pc, #796]	; (800107c <__aeabi_dadd+0x6cc>)
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x3b4>
 8000d62:	e0c7      	b.n	8000ef4 <__aeabi_dadd+0x544>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	4323      	orrs	r3, r4
 8000d6a:	2a38      	cmp	r2, #56	; 0x38
 8000d6c:	dc54      	bgt.n	8000e18 <__aeabi_dadd+0x468>
 8000d6e:	2a1f      	cmp	r2, #31
 8000d70:	dd00      	ble.n	8000d74 <__aeabi_dadd+0x3c4>
 8000d72:	e0cc      	b.n	8000f0e <__aeabi_dadd+0x55e>
 8000d74:	2420      	movs	r4, #32
 8000d76:	4648      	mov	r0, r9
 8000d78:	1aa4      	subs	r4, r4, r2
 8000d7a:	001d      	movs	r5, r3
 8000d7c:	464e      	mov	r6, r9
 8000d7e:	40a0      	lsls	r0, r4
 8000d80:	40d6      	lsrs	r6, r2
 8000d82:	40a5      	lsls	r5, r4
 8000d84:	0004      	movs	r4, r0
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	4662      	mov	r2, ip
 8000d8a:	4335      	orrs	r5, r6
 8000d8c:	1e66      	subs	r6, r4, #1
 8000d8e:	41b4      	sbcs	r4, r6
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	469c      	mov	ip, r3
 8000d94:	4325      	orrs	r5, r4
 8000d96:	e044      	b.n	8000e22 <__aeabi_dadd+0x472>
 8000d98:	4662      	mov	r2, ip
 8000d9a:	433a      	orrs	r2, r7
 8000d9c:	0015      	movs	r5, r2
 8000d9e:	1e6f      	subs	r7, r5, #1
 8000da0:	41bd      	sbcs	r5, r7
 8000da2:	444d      	add	r5, r9
 8000da4:	454d      	cmp	r5, r9
 8000da6:	4189      	sbcs	r1, r1
 8000da8:	4249      	negs	r1, r1
 8000daa:	4688      	mov	r8, r1
 8000dac:	4498      	add	r8, r3
 8000dae:	4643      	mov	r3, r8
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	d400      	bmi.n	8000db6 <__aeabi_dadd+0x406>
 8000db4:	e718      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000db6:	4bb1      	ldr	r3, [pc, #708]	; (800107c <__aeabi_dadd+0x6cc>)
 8000db8:	3601      	adds	r6, #1
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	d049      	beq.n	8000e52 <__aeabi_dadd+0x4a2>
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	4baf      	ldr	r3, [pc, #700]	; (8001080 <__aeabi_dadd+0x6d0>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	086a      	lsrs	r2, r5, #1
 8000dca:	400d      	ands	r5, r1
 8000dcc:	4315      	orrs	r5, r2
 8000dce:	07d9      	lsls	r1, r3, #31
 8000dd0:	085b      	lsrs	r3, r3, #1
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	430d      	orrs	r5, r1
 8000dd6:	e665      	b.n	8000aa4 <__aeabi_dadd+0xf4>
 8000dd8:	0018      	movs	r0, r3
 8000dda:	3e1f      	subs	r6, #31
 8000ddc:	40f0      	lsrs	r0, r6
 8000dde:	2a20      	cmp	r2, #32
 8000de0:	d003      	beq.n	8000dea <__aeabi_dadd+0x43a>
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	431d      	orrs	r5, r3
 8000dea:	1e69      	subs	r1, r5, #1
 8000dec:	418d      	sbcs	r5, r1
 8000dee:	2300      	movs	r3, #0
 8000df0:	2600      	movs	r6, #0
 8000df2:	4698      	mov	r8, r3
 8000df4:	4305      	orrs	r5, r0
 8000df6:	e6f7      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000df8:	0011      	movs	r1, r2
 8000dfa:	4665      	mov	r5, ip
 8000dfc:	3920      	subs	r1, #32
 8000dfe:	40cd      	lsrs	r5, r1
 8000e00:	2a20      	cmp	r2, #32
 8000e02:	d004      	beq.n	8000e0e <__aeabi_dadd+0x45e>
 8000e04:	2040      	movs	r0, #64	; 0x40
 8000e06:	4661      	mov	r1, ip
 8000e08:	1a82      	subs	r2, r0, r2
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	430f      	orrs	r7, r1
 8000e0e:	0039      	movs	r1, r7
 8000e10:	1e4f      	subs	r7, r1, #1
 8000e12:	41b9      	sbcs	r1, r7
 8000e14:	4329      	orrs	r1, r5
 8000e16:	e60f      	b.n	8000a38 <__aeabi_dadd+0x88>
 8000e18:	464a      	mov	r2, r9
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	001d      	movs	r5, r3
 8000e1e:	1e6b      	subs	r3, r5, #1
 8000e20:	419d      	sbcs	r5, r3
 8000e22:	1b7d      	subs	r5, r7, r5
 8000e24:	42af      	cmp	r7, r5
 8000e26:	419b      	sbcs	r3, r3
 8000e28:	4662      	mov	r2, ip
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4654      	mov	r4, sl
 8000e32:	000e      	movs	r6, r1
 8000e34:	e607      	b.n	8000a46 <__aeabi_dadd+0x96>
 8000e36:	4648      	mov	r0, r9
 8000e38:	4318      	orrs	r0, r3
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x48e>
 8000e3c:	e0b3      	b.n	8000fa6 <__aeabi_dadd+0x5f6>
 8000e3e:	1e50      	subs	r0, r2, #1
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x496>
 8000e44:	e10d      	b.n	8001062 <__aeabi_dadd+0x6b2>
 8000e46:	4d8d      	ldr	r5, [pc, #564]	; (800107c <__aeabi_dadd+0x6cc>)
 8000e48:	42aa      	cmp	r2, r5
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x49e>
 8000e4c:	e0a5      	b.n	8000f9a <__aeabi_dadd+0x5ea>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	e710      	b.n	8000c74 <__aeabi_dadd+0x2c4>
 8000e52:	0032      	movs	r2, r6
 8000e54:	2300      	movs	r3, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	e644      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	0038      	movs	r0, r7
 8000e5e:	1a89      	subs	r1, r1, r2
 8000e60:	4665      	mov	r5, ip
 8000e62:	408f      	lsls	r7, r1
 8000e64:	408d      	lsls	r5, r1
 8000e66:	40d0      	lsrs	r0, r2
 8000e68:	1e79      	subs	r1, r7, #1
 8000e6a:	418f      	sbcs	r7, r1
 8000e6c:	4305      	orrs	r5, r0
 8000e6e:	433d      	orrs	r5, r7
 8000e70:	4667      	mov	r7, ip
 8000e72:	40d7      	lsrs	r7, r2
 8000e74:	19db      	adds	r3, r3, r7
 8000e76:	e794      	b.n	8000da2 <__aeabi_dadd+0x3f2>
 8000e78:	4a80      	ldr	r2, [pc, #512]	; (800107c <__aeabi_dadd+0x6cc>)
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x4d0>
 8000e7e:	e0ec      	b.n	800105a <__aeabi_dadd+0x6aa>
 8000e80:	0039      	movs	r1, r7
 8000e82:	4449      	add	r1, r9
 8000e84:	4549      	cmp	r1, r9
 8000e86:	4192      	sbcs	r2, r2
 8000e88:	4463      	add	r3, ip
 8000e8a:	4252      	negs	r2, r2
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	07dd      	lsls	r5, r3, #31
 8000e90:	0849      	lsrs	r1, r1, #1
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	4698      	mov	r8, r3
 8000e96:	0006      	movs	r6, r0
 8000e98:	430d      	orrs	r5, r1
 8000e9a:	e6a5      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000e9c:	464a      	mov	r2, r9
 8000e9e:	1abd      	subs	r5, r7, r2
 8000ea0:	42af      	cmp	r7, r5
 8000ea2:	4189      	sbcs	r1, r1
 8000ea4:	4662      	mov	r2, ip
 8000ea6:	4249      	negs	r1, r1
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	1a5b      	subs	r3, r3, r1
 8000eac:	4698      	mov	r8, r3
 8000eae:	4654      	mov	r4, sl
 8000eb0:	e5d1      	b.n	8000a56 <__aeabi_dadd+0xa6>
 8000eb2:	076c      	lsls	r4, r5, #29
 8000eb4:	08f9      	lsrs	r1, r7, #3
 8000eb6:	4321      	orrs	r1, r4
 8000eb8:	08eb      	lsrs	r3, r5, #3
 8000eba:	0004      	movs	r4, r0
 8000ebc:	e69d      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000ebe:	464a      	mov	r2, r9
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	d175      	bne.n	8000fb0 <__aeabi_dadd+0x600>
 8000ec4:	4661      	mov	r1, ip
 8000ec6:	4339      	orrs	r1, r7
 8000ec8:	d114      	bne.n	8000ef4 <__aeabi_dadd+0x544>
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	2400      	movs	r4, #0
 8000ece:	031b      	lsls	r3, r3, #12
 8000ed0:	e6bc      	b.n	8000c4c <__aeabi_dadd+0x29c>
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	1bd5      	subs	r5, r2, r7
 8000ed6:	45a9      	cmp	r9, r5
 8000ed8:	4189      	sbcs	r1, r1
 8000eda:	4662      	mov	r2, ip
 8000edc:	4249      	negs	r1, r1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	2601      	movs	r6, #1
 8000ee6:	e5ae      	b.n	8000a46 <__aeabi_dadd+0x96>
 8000ee8:	464a      	mov	r2, r9
 8000eea:	08d1      	lsrs	r1, r2, #3
 8000eec:	075a      	lsls	r2, r3, #29
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e6a7      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	08f9      	lsrs	r1, r7, #3
 8000ef8:	075a      	lsls	r2, r3, #29
 8000efa:	4654      	mov	r4, sl
 8000efc:	4311      	orrs	r1, r2
 8000efe:	08db      	lsrs	r3, r3, #3
 8000f00:	e6a0      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000f02:	464a      	mov	r2, r9
 8000f04:	4313      	orrs	r3, r2
 8000f06:	001d      	movs	r5, r3
 8000f08:	1e6b      	subs	r3, r5, #1
 8000f0a:	419d      	sbcs	r5, r3
 8000f0c:	e6c7      	b.n	8000c9e <__aeabi_dadd+0x2ee>
 8000f0e:	0014      	movs	r4, r2
 8000f10:	001e      	movs	r6, r3
 8000f12:	3c20      	subs	r4, #32
 8000f14:	40e6      	lsrs	r6, r4
 8000f16:	2a20      	cmp	r2, #32
 8000f18:	d005      	beq.n	8000f26 <__aeabi_dadd+0x576>
 8000f1a:	2440      	movs	r4, #64	; 0x40
 8000f1c:	1aa2      	subs	r2, r4, r2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	464a      	mov	r2, r9
 8000f22:	431a      	orrs	r2, r3
 8000f24:	4691      	mov	r9, r2
 8000f26:	464d      	mov	r5, r9
 8000f28:	1e6b      	subs	r3, r5, #1
 8000f2a:	419d      	sbcs	r5, r3
 8000f2c:	4335      	orrs	r5, r6
 8000f2e:	e778      	b.n	8000e22 <__aeabi_dadd+0x472>
 8000f30:	464a      	mov	r2, r9
 8000f32:	431a      	orrs	r2, r3
 8000f34:	d000      	beq.n	8000f38 <__aeabi_dadd+0x588>
 8000f36:	e66b      	b.n	8000c10 <__aeabi_dadd+0x260>
 8000f38:	076b      	lsls	r3, r5, #29
 8000f3a:	08f9      	lsrs	r1, r7, #3
 8000f3c:	4319      	orrs	r1, r3
 8000f3e:	08eb      	lsrs	r3, r5, #3
 8000f40:	e680      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000f42:	4661      	mov	r1, ip
 8000f44:	4339      	orrs	r1, r7
 8000f46:	d054      	beq.n	8000ff2 <__aeabi_dadd+0x642>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	08f9      	lsrs	r1, r7, #3
 8000f4c:	075c      	lsls	r4, r3, #29
 8000f4e:	4321      	orrs	r1, r4
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	0004      	movs	r4, r0
 8000f54:	e654      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000f56:	464a      	mov	r2, r9
 8000f58:	1abd      	subs	r5, r7, r2
 8000f5a:	42af      	cmp	r7, r5
 8000f5c:	4189      	sbcs	r1, r1
 8000f5e:	4662      	mov	r2, ip
 8000f60:	4249      	negs	r1, r1
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	4698      	mov	r8, r3
 8000f68:	0004      	movs	r4, r0
 8000f6a:	2601      	movs	r6, #1
 8000f6c:	e56b      	b.n	8000a46 <__aeabi_dadd+0x96>
 8000f6e:	464a      	mov	r2, r9
 8000f70:	1bd5      	subs	r5, r2, r7
 8000f72:	45a9      	cmp	r9, r5
 8000f74:	4189      	sbcs	r1, r1
 8000f76:	4662      	mov	r2, ip
 8000f78:	4249      	negs	r1, r1
 8000f7a:	1a9a      	subs	r2, r3, r2
 8000f7c:	1a52      	subs	r2, r2, r1
 8000f7e:	4690      	mov	r8, r2
 8000f80:	0212      	lsls	r2, r2, #8
 8000f82:	d532      	bpl.n	8000fea <__aeabi_dadd+0x63a>
 8000f84:	464a      	mov	r2, r9
 8000f86:	1abd      	subs	r5, r7, r2
 8000f88:	42af      	cmp	r7, r5
 8000f8a:	4189      	sbcs	r1, r1
 8000f8c:	4662      	mov	r2, ip
 8000f8e:	4249      	negs	r1, r1
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	1a5b      	subs	r3, r3, r1
 8000f94:	4698      	mov	r8, r3
 8000f96:	0004      	movs	r4, r0
 8000f98:	e584      	b.n	8000aa4 <__aeabi_dadd+0xf4>
 8000f9a:	4663      	mov	r3, ip
 8000f9c:	08f9      	lsrs	r1, r7, #3
 8000f9e:	075a      	lsls	r2, r3, #29
 8000fa0:	4311      	orrs	r1, r2
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	e64e      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000fa6:	08f9      	lsrs	r1, r7, #3
 8000fa8:	0768      	lsls	r0, r5, #29
 8000faa:	4301      	orrs	r1, r0
 8000fac:	08eb      	lsrs	r3, r5, #3
 8000fae:	e624      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	433a      	orrs	r2, r7
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x608>
 8000fb6:	e698      	b.n	8000cea <__aeabi_dadd+0x33a>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	08d1      	lsrs	r1, r2, #3
 8000fbc:	075a      	lsls	r2, r3, #29
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	031b      	lsls	r3, r3, #12
 8000fc6:	421a      	tst	r2, r3
 8000fc8:	d008      	beq.n	8000fdc <__aeabi_dadd+0x62c>
 8000fca:	4660      	mov	r0, ip
 8000fcc:	08c5      	lsrs	r5, r0, #3
 8000fce:	421d      	tst	r5, r3
 8000fd0:	d104      	bne.n	8000fdc <__aeabi_dadd+0x62c>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	002a      	movs	r2, r5
 8000fd6:	08f9      	lsrs	r1, r7, #3
 8000fd8:	0743      	lsls	r3, r0, #29
 8000fda:	4319      	orrs	r1, r3
 8000fdc:	0f4b      	lsrs	r3, r1, #29
 8000fde:	00c9      	lsls	r1, r1, #3
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	08c9      	lsrs	r1, r1, #3
 8000fe4:	4319      	orrs	r1, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	e62c      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000fea:	4641      	mov	r1, r8
 8000fec:	4329      	orrs	r1, r5
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_dadd+0x642>
 8000ff0:	e5fa      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	000a      	movs	r2, r1
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	e602      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000ffa:	076b      	lsls	r3, r5, #29
 8000ffc:	08f9      	lsrs	r1, r7, #3
 8000ffe:	4319      	orrs	r1, r3
 8001000:	08eb      	lsrs	r3, r5, #3
 8001002:	e5fd      	b.n	8000c00 <__aeabi_dadd+0x250>
 8001004:	4663      	mov	r3, ip
 8001006:	08f9      	lsrs	r1, r7, #3
 8001008:	075b      	lsls	r3, r3, #29
 800100a:	4319      	orrs	r1, r3
 800100c:	4663      	mov	r3, ip
 800100e:	0004      	movs	r4, r0
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	e617      	b.n	8000c44 <__aeabi_dadd+0x294>
 8001014:	003d      	movs	r5, r7
 8001016:	444d      	add	r5, r9
 8001018:	4463      	add	r3, ip
 800101a:	454d      	cmp	r5, r9
 800101c:	4189      	sbcs	r1, r1
 800101e:	4698      	mov	r8, r3
 8001020:	4249      	negs	r1, r1
 8001022:	4488      	add	r8, r1
 8001024:	4643      	mov	r3, r8
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	d400      	bmi.n	800102c <__aeabi_dadd+0x67c>
 800102a:	e5dd      	b.n	8000be8 <__aeabi_dadd+0x238>
 800102c:	4642      	mov	r2, r8
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <__aeabi_dadd+0x6d0>)
 8001030:	2601      	movs	r6, #1
 8001032:	401a      	ands	r2, r3
 8001034:	4690      	mov	r8, r2
 8001036:	e5d7      	b.n	8000be8 <__aeabi_dadd+0x238>
 8001038:	0010      	movs	r0, r2
 800103a:	001e      	movs	r6, r3
 800103c:	3820      	subs	r0, #32
 800103e:	40c6      	lsrs	r6, r0
 8001040:	2a20      	cmp	r2, #32
 8001042:	d005      	beq.n	8001050 <__aeabi_dadd+0x6a0>
 8001044:	2040      	movs	r0, #64	; 0x40
 8001046:	1a82      	subs	r2, r0, r2
 8001048:	4093      	lsls	r3, r2
 800104a:	464a      	mov	r2, r9
 800104c:	431a      	orrs	r2, r3
 800104e:	4691      	mov	r9, r2
 8001050:	464d      	mov	r5, r9
 8001052:	1e6b      	subs	r3, r5, #1
 8001054:	419d      	sbcs	r5, r3
 8001056:	4335      	orrs	r5, r6
 8001058:	e621      	b.n	8000c9e <__aeabi_dadd+0x2ee>
 800105a:	0002      	movs	r2, r0
 800105c:	2300      	movs	r3, #0
 800105e:	2100      	movs	r1, #0
 8001060:	e540      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8001062:	464a      	mov	r2, r9
 8001064:	19d5      	adds	r5, r2, r7
 8001066:	42bd      	cmp	r5, r7
 8001068:	4189      	sbcs	r1, r1
 800106a:	4463      	add	r3, ip
 800106c:	4698      	mov	r8, r3
 800106e:	4249      	negs	r1, r1
 8001070:	4488      	add	r8, r1
 8001072:	e5b3      	b.n	8000bdc <__aeabi_dadd+0x22c>
 8001074:	2100      	movs	r1, #0
 8001076:	4a01      	ldr	r2, [pc, #4]	; (800107c <__aeabi_dadd+0x6cc>)
 8001078:	000b      	movs	r3, r1
 800107a:	e533      	b.n	8000ae4 <__aeabi_dadd+0x134>
 800107c:	000007ff 	.word	0x000007ff
 8001080:	ff7fffff 	.word	0xff7fffff

08001084 <__aeabi_ddiv>:
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	4657      	mov	r7, sl
 8001088:	464e      	mov	r6, r9
 800108a:	4645      	mov	r5, r8
 800108c:	46de      	mov	lr, fp
 800108e:	b5e0      	push	{r5, r6, r7, lr}
 8001090:	4681      	mov	r9, r0
 8001092:	0005      	movs	r5, r0
 8001094:	030c      	lsls	r4, r1, #12
 8001096:	0048      	lsls	r0, r1, #1
 8001098:	4692      	mov	sl, r2
 800109a:	001f      	movs	r7, r3
 800109c:	b085      	sub	sp, #20
 800109e:	0b24      	lsrs	r4, r4, #12
 80010a0:	0d40      	lsrs	r0, r0, #21
 80010a2:	0fce      	lsrs	r6, r1, #31
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d059      	beq.n	800115c <__aeabi_ddiv+0xd8>
 80010a8:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <__aeabi_ddiv+0x244>)
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x2c>
 80010ae:	e098      	b.n	80011e2 <__aeabi_ddiv+0x15e>
 80010b0:	0f6b      	lsrs	r3, r5, #29
 80010b2:	00e4      	lsls	r4, r4, #3
 80010b4:	431c      	orrs	r4, r3
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	4323      	orrs	r3, r4
 80010bc:	4698      	mov	r8, r3
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <__aeabi_ddiv+0x248>)
 80010c0:	00ed      	lsls	r5, r5, #3
 80010c2:	469b      	mov	fp, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	4699      	mov	r9, r3
 80010c8:	4483      	add	fp, r0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	033c      	lsls	r4, r7, #12
 80010ce:	007b      	lsls	r3, r7, #1
 80010d0:	4650      	mov	r0, sl
 80010d2:	0b24      	lsrs	r4, r4, #12
 80010d4:	0d5b      	lsrs	r3, r3, #21
 80010d6:	0fff      	lsrs	r7, r7, #31
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d067      	beq.n	80011ac <__aeabi_ddiv+0x128>
 80010dc:	4a7a      	ldr	r2, [pc, #488]	; (80012c8 <__aeabi_ddiv+0x244>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d018      	beq.n	8001114 <__aeabi_ddiv+0x90>
 80010e2:	497a      	ldr	r1, [pc, #488]	; (80012cc <__aeabi_ddiv+0x248>)
 80010e4:	0f42      	lsrs	r2, r0, #29
 80010e6:	468c      	mov	ip, r1
 80010e8:	00e4      	lsls	r4, r4, #3
 80010ea:	4659      	mov	r1, fp
 80010ec:	4314      	orrs	r4, r2
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	4463      	add	r3, ip
 80010f2:	0412      	lsls	r2, r2, #16
 80010f4:	1acb      	subs	r3, r1, r3
 80010f6:	4314      	orrs	r4, r2
 80010f8:	469b      	mov	fp, r3
 80010fa:	00c2      	lsls	r2, r0, #3
 80010fc:	2000      	movs	r0, #0
 80010fe:	0033      	movs	r3, r6
 8001100:	407b      	eors	r3, r7
 8001102:	469a      	mov	sl, r3
 8001104:	464b      	mov	r3, r9
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d900      	bls.n	800110c <__aeabi_ddiv+0x88>
 800110a:	e0ef      	b.n	80012ec <__aeabi_ddiv+0x268>
 800110c:	4970      	ldr	r1, [pc, #448]	; (80012d0 <__aeabi_ddiv+0x24c>)
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	58cb      	ldr	r3, [r1, r3]
 8001112:	469f      	mov	pc, r3
 8001114:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <__aeabi_ddiv+0x250>)
 8001116:	4652      	mov	r2, sl
 8001118:	469c      	mov	ip, r3
 800111a:	4322      	orrs	r2, r4
 800111c:	44e3      	add	fp, ip
 800111e:	2a00      	cmp	r2, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_ddiv+0xa0>
 8001122:	e095      	b.n	8001250 <__aeabi_ddiv+0x1cc>
 8001124:	4649      	mov	r1, r9
 8001126:	2302      	movs	r3, #2
 8001128:	4319      	orrs	r1, r3
 800112a:	4689      	mov	r9, r1
 800112c:	2400      	movs	r4, #0
 800112e:	2002      	movs	r0, #2
 8001130:	e7e5      	b.n	80010fe <__aeabi_ddiv+0x7a>
 8001132:	2300      	movs	r3, #0
 8001134:	2400      	movs	r4, #0
 8001136:	2500      	movs	r5, #0
 8001138:	4652      	mov	r2, sl
 800113a:	051b      	lsls	r3, r3, #20
 800113c:	4323      	orrs	r3, r4
 800113e:	07d2      	lsls	r2, r2, #31
 8001140:	4313      	orrs	r3, r2
 8001142:	0028      	movs	r0, r5
 8001144:	0019      	movs	r1, r3
 8001146:	b005      	add	sp, #20
 8001148:	bcf0      	pop	{r4, r5, r6, r7}
 800114a:	46bb      	mov	fp, r7
 800114c:	46b2      	mov	sl, r6
 800114e:	46a9      	mov	r9, r5
 8001150:	46a0      	mov	r8, r4
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	2400      	movs	r4, #0
 8001156:	2500      	movs	r5, #0
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <__aeabi_ddiv+0x244>)
 800115a:	e7ed      	b.n	8001138 <__aeabi_ddiv+0xb4>
 800115c:	464b      	mov	r3, r9
 800115e:	4323      	orrs	r3, r4
 8001160:	4698      	mov	r8, r3
 8001162:	d100      	bne.n	8001166 <__aeabi_ddiv+0xe2>
 8001164:	e089      	b.n	800127a <__aeabi_ddiv+0x1f6>
 8001166:	2c00      	cmp	r4, #0
 8001168:	d100      	bne.n	800116c <__aeabi_ddiv+0xe8>
 800116a:	e1e0      	b.n	800152e <__aeabi_ddiv+0x4aa>
 800116c:	0020      	movs	r0, r4
 800116e:	f001 fb07 	bl	8002780 <__clzsi2>
 8001172:	0001      	movs	r1, r0
 8001174:	0002      	movs	r2, r0
 8001176:	390b      	subs	r1, #11
 8001178:	231d      	movs	r3, #29
 800117a:	1a5b      	subs	r3, r3, r1
 800117c:	4649      	mov	r1, r9
 800117e:	0010      	movs	r0, r2
 8001180:	40d9      	lsrs	r1, r3
 8001182:	3808      	subs	r0, #8
 8001184:	4084      	lsls	r4, r0
 8001186:	000b      	movs	r3, r1
 8001188:	464d      	mov	r5, r9
 800118a:	4323      	orrs	r3, r4
 800118c:	4698      	mov	r8, r3
 800118e:	4085      	lsls	r5, r0
 8001190:	4851      	ldr	r0, [pc, #324]	; (80012d8 <__aeabi_ddiv+0x254>)
 8001192:	033c      	lsls	r4, r7, #12
 8001194:	1a83      	subs	r3, r0, r2
 8001196:	469b      	mov	fp, r3
 8001198:	2300      	movs	r3, #0
 800119a:	4699      	mov	r9, r3
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	007b      	lsls	r3, r7, #1
 80011a0:	4650      	mov	r0, sl
 80011a2:	0b24      	lsrs	r4, r4, #12
 80011a4:	0d5b      	lsrs	r3, r3, #21
 80011a6:	0fff      	lsrs	r7, r7, #31
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d197      	bne.n	80010dc <__aeabi_ddiv+0x58>
 80011ac:	4652      	mov	r2, sl
 80011ae:	4322      	orrs	r2, r4
 80011b0:	d055      	beq.n	800125e <__aeabi_ddiv+0x1da>
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x134>
 80011b6:	e1ca      	b.n	800154e <__aeabi_ddiv+0x4ca>
 80011b8:	0020      	movs	r0, r4
 80011ba:	f001 fae1 	bl	8002780 <__clzsi2>
 80011be:	0002      	movs	r2, r0
 80011c0:	3a0b      	subs	r2, #11
 80011c2:	231d      	movs	r3, #29
 80011c4:	0001      	movs	r1, r0
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	4652      	mov	r2, sl
 80011ca:	3908      	subs	r1, #8
 80011cc:	40da      	lsrs	r2, r3
 80011ce:	408c      	lsls	r4, r1
 80011d0:	4314      	orrs	r4, r2
 80011d2:	4652      	mov	r2, sl
 80011d4:	408a      	lsls	r2, r1
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <__aeabi_ddiv+0x258>)
 80011d8:	4458      	add	r0, fp
 80011da:	469b      	mov	fp, r3
 80011dc:	4483      	add	fp, r0
 80011de:	2000      	movs	r0, #0
 80011e0:	e78d      	b.n	80010fe <__aeabi_ddiv+0x7a>
 80011e2:	464b      	mov	r3, r9
 80011e4:	4323      	orrs	r3, r4
 80011e6:	4698      	mov	r8, r3
 80011e8:	d140      	bne.n	800126c <__aeabi_ddiv+0x1e8>
 80011ea:	2308      	movs	r3, #8
 80011ec:	4699      	mov	r9, r3
 80011ee:	3b06      	subs	r3, #6
 80011f0:	2500      	movs	r5, #0
 80011f2:	4683      	mov	fp, r0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	e769      	b.n	80010cc <__aeabi_ddiv+0x48>
 80011f8:	46b2      	mov	sl, r6
 80011fa:	9b00      	ldr	r3, [sp, #0]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d0a9      	beq.n	8001154 <__aeabi_ddiv+0xd0>
 8001200:	2b03      	cmp	r3, #3
 8001202:	d100      	bne.n	8001206 <__aeabi_ddiv+0x182>
 8001204:	e211      	b.n	800162a <__aeabi_ddiv+0x5a6>
 8001206:	2b01      	cmp	r3, #1
 8001208:	d093      	beq.n	8001132 <__aeabi_ddiv+0xae>
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <__aeabi_ddiv+0x25c>)
 800120c:	445a      	add	r2, fp
 800120e:	2a00      	cmp	r2, #0
 8001210:	dc00      	bgt.n	8001214 <__aeabi_ddiv+0x190>
 8001212:	e13c      	b.n	800148e <__aeabi_ddiv+0x40a>
 8001214:	076b      	lsls	r3, r5, #29
 8001216:	d000      	beq.n	800121a <__aeabi_ddiv+0x196>
 8001218:	e1a7      	b.n	800156a <__aeabi_ddiv+0x4e6>
 800121a:	08ed      	lsrs	r5, r5, #3
 800121c:	4643      	mov	r3, r8
 800121e:	01db      	lsls	r3, r3, #7
 8001220:	d506      	bpl.n	8001230 <__aeabi_ddiv+0x1ac>
 8001222:	4642      	mov	r2, r8
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <__aeabi_ddiv+0x260>)
 8001226:	401a      	ands	r2, r3
 8001228:	4690      	mov	r8, r2
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	445a      	add	r2, fp
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <__aeabi_ddiv+0x264>)
 8001232:	429a      	cmp	r2, r3
 8001234:	dc8e      	bgt.n	8001154 <__aeabi_ddiv+0xd0>
 8001236:	4643      	mov	r3, r8
 8001238:	0552      	lsls	r2, r2, #21
 800123a:	0758      	lsls	r0, r3, #29
 800123c:	025c      	lsls	r4, r3, #9
 800123e:	4305      	orrs	r5, r0
 8001240:	0b24      	lsrs	r4, r4, #12
 8001242:	0d53      	lsrs	r3, r2, #21
 8001244:	e778      	b.n	8001138 <__aeabi_ddiv+0xb4>
 8001246:	46ba      	mov	sl, r7
 8001248:	46a0      	mov	r8, r4
 800124a:	0015      	movs	r5, r2
 800124c:	9000      	str	r0, [sp, #0]
 800124e:	e7d4      	b.n	80011fa <__aeabi_ddiv+0x176>
 8001250:	464a      	mov	r2, r9
 8001252:	2303      	movs	r3, #3
 8001254:	431a      	orrs	r2, r3
 8001256:	4691      	mov	r9, r2
 8001258:	2003      	movs	r0, #3
 800125a:	4652      	mov	r2, sl
 800125c:	e74f      	b.n	80010fe <__aeabi_ddiv+0x7a>
 800125e:	4649      	mov	r1, r9
 8001260:	2301      	movs	r3, #1
 8001262:	4319      	orrs	r1, r3
 8001264:	4689      	mov	r9, r1
 8001266:	2400      	movs	r4, #0
 8001268:	2001      	movs	r0, #1
 800126a:	e748      	b.n	80010fe <__aeabi_ddiv+0x7a>
 800126c:	230c      	movs	r3, #12
 800126e:	4699      	mov	r9, r3
 8001270:	3b09      	subs	r3, #9
 8001272:	46a0      	mov	r8, r4
 8001274:	4683      	mov	fp, r0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	e728      	b.n	80010cc <__aeabi_ddiv+0x48>
 800127a:	2304      	movs	r3, #4
 800127c:	4699      	mov	r9, r3
 800127e:	2300      	movs	r3, #0
 8001280:	469b      	mov	fp, r3
 8001282:	3301      	adds	r3, #1
 8001284:	2500      	movs	r5, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	e720      	b.n	80010cc <__aeabi_ddiv+0x48>
 800128a:	2300      	movs	r3, #0
 800128c:	2480      	movs	r4, #128	; 0x80
 800128e:	469a      	mov	sl, r3
 8001290:	2500      	movs	r5, #0
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <__aeabi_ddiv+0x244>)
 8001294:	0324      	lsls	r4, r4, #12
 8001296:	e74f      	b.n	8001138 <__aeabi_ddiv+0xb4>
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	4641      	mov	r1, r8
 800129c:	031b      	lsls	r3, r3, #12
 800129e:	4219      	tst	r1, r3
 80012a0:	d008      	beq.n	80012b4 <__aeabi_ddiv+0x230>
 80012a2:	421c      	tst	r4, r3
 80012a4:	d106      	bne.n	80012b4 <__aeabi_ddiv+0x230>
 80012a6:	431c      	orrs	r4, r3
 80012a8:	0324      	lsls	r4, r4, #12
 80012aa:	46ba      	mov	sl, r7
 80012ac:	0015      	movs	r5, r2
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <__aeabi_ddiv+0x244>)
 80012b0:	0b24      	lsrs	r4, r4, #12
 80012b2:	e741      	b.n	8001138 <__aeabi_ddiv+0xb4>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	46b2      	mov	sl, r6
 80012c0:	4b01      	ldr	r3, [pc, #4]	; (80012c8 <__aeabi_ddiv+0x244>)
 80012c2:	0b24      	lsrs	r4, r4, #12
 80012c4:	e738      	b.n	8001138 <__aeabi_ddiv+0xb4>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	000007ff 	.word	0x000007ff
 80012cc:	fffffc01 	.word	0xfffffc01
 80012d0:	080182a0 	.word	0x080182a0
 80012d4:	fffff801 	.word	0xfffff801
 80012d8:	fffffc0d 	.word	0xfffffc0d
 80012dc:	000003f3 	.word	0x000003f3
 80012e0:	000003ff 	.word	0x000003ff
 80012e4:	feffffff 	.word	0xfeffffff
 80012e8:	000007fe 	.word	0x000007fe
 80012ec:	4544      	cmp	r4, r8
 80012ee:	d200      	bcs.n	80012f2 <__aeabi_ddiv+0x26e>
 80012f0:	e116      	b.n	8001520 <__aeabi_ddiv+0x49c>
 80012f2:	d100      	bne.n	80012f6 <__aeabi_ddiv+0x272>
 80012f4:	e111      	b.n	800151a <__aeabi_ddiv+0x496>
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	469c      	mov	ip, r3
 80012fc:	002e      	movs	r6, r5
 80012fe:	4640      	mov	r0, r8
 8001300:	2500      	movs	r5, #0
 8001302:	44e3      	add	fp, ip
 8001304:	0223      	lsls	r3, r4, #8
 8001306:	0e14      	lsrs	r4, r2, #24
 8001308:	431c      	orrs	r4, r3
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	4699      	mov	r9, r3
 800130e:	0423      	lsls	r3, r4, #16
 8001310:	0c1f      	lsrs	r7, r3, #16
 8001312:	0212      	lsls	r2, r2, #8
 8001314:	4649      	mov	r1, r9
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	9701      	str	r7, [sp, #4]
 800131a:	f7fe ff9f 	bl	800025c <__aeabi_uidivmod>
 800131e:	0002      	movs	r2, r0
 8001320:	437a      	muls	r2, r7
 8001322:	040b      	lsls	r3, r1, #16
 8001324:	0c31      	lsrs	r1, r6, #16
 8001326:	4680      	mov	r8, r0
 8001328:	4319      	orrs	r1, r3
 800132a:	428a      	cmp	r2, r1
 800132c:	d90b      	bls.n	8001346 <__aeabi_ddiv+0x2c2>
 800132e:	2301      	movs	r3, #1
 8001330:	425b      	negs	r3, r3
 8001332:	469c      	mov	ip, r3
 8001334:	1909      	adds	r1, r1, r4
 8001336:	44e0      	add	r8, ip
 8001338:	428c      	cmp	r4, r1
 800133a:	d804      	bhi.n	8001346 <__aeabi_ddiv+0x2c2>
 800133c:	428a      	cmp	r2, r1
 800133e:	d902      	bls.n	8001346 <__aeabi_ddiv+0x2c2>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	4698      	mov	r8, r3
 8001344:	1909      	adds	r1, r1, r4
 8001346:	1a88      	subs	r0, r1, r2
 8001348:	4649      	mov	r1, r9
 800134a:	f7fe ff87 	bl	800025c <__aeabi_uidivmod>
 800134e:	0409      	lsls	r1, r1, #16
 8001350:	468c      	mov	ip, r1
 8001352:	0431      	lsls	r1, r6, #16
 8001354:	4666      	mov	r6, ip
 8001356:	9a01      	ldr	r2, [sp, #4]
 8001358:	0c09      	lsrs	r1, r1, #16
 800135a:	4342      	muls	r2, r0
 800135c:	0003      	movs	r3, r0
 800135e:	4331      	orrs	r1, r6
 8001360:	428a      	cmp	r2, r1
 8001362:	d904      	bls.n	800136e <__aeabi_ddiv+0x2ea>
 8001364:	1909      	adds	r1, r1, r4
 8001366:	3b01      	subs	r3, #1
 8001368:	428c      	cmp	r4, r1
 800136a:	d800      	bhi.n	800136e <__aeabi_ddiv+0x2ea>
 800136c:	e111      	b.n	8001592 <__aeabi_ddiv+0x50e>
 800136e:	1a89      	subs	r1, r1, r2
 8001370:	4642      	mov	r2, r8
 8001372:	9e00      	ldr	r6, [sp, #0]
 8001374:	0412      	lsls	r2, r2, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	0c33      	lsrs	r3, r6, #16
 800137a:	001f      	movs	r7, r3
 800137c:	0c10      	lsrs	r0, r2, #16
 800137e:	4690      	mov	r8, r2
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	0413      	lsls	r3, r2, #16
 8001384:	0432      	lsls	r2, r6, #16
 8001386:	0c16      	lsrs	r6, r2, #16
 8001388:	0032      	movs	r2, r6
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	435a      	muls	r2, r3
 800138e:	9603      	str	r6, [sp, #12]
 8001390:	437b      	muls	r3, r7
 8001392:	4346      	muls	r6, r0
 8001394:	4378      	muls	r0, r7
 8001396:	0c17      	lsrs	r7, r2, #16
 8001398:	46bc      	mov	ip, r7
 800139a:	199b      	adds	r3, r3, r6
 800139c:	4463      	add	r3, ip
 800139e:	429e      	cmp	r6, r3
 80013a0:	d903      	bls.n	80013aa <__aeabi_ddiv+0x326>
 80013a2:	2680      	movs	r6, #128	; 0x80
 80013a4:	0276      	lsls	r6, r6, #9
 80013a6:	46b4      	mov	ip, r6
 80013a8:	4460      	add	r0, ip
 80013aa:	0c1e      	lsrs	r6, r3, #16
 80013ac:	1830      	adds	r0, r6, r0
 80013ae:	0416      	lsls	r6, r2, #16
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	0c36      	lsrs	r6, r6, #16
 80013b4:	199e      	adds	r6, r3, r6
 80013b6:	4281      	cmp	r1, r0
 80013b8:	d200      	bcs.n	80013bc <__aeabi_ddiv+0x338>
 80013ba:	e09c      	b.n	80014f6 <__aeabi_ddiv+0x472>
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x33c>
 80013be:	e097      	b.n	80014f0 <__aeabi_ddiv+0x46c>
 80013c0:	1bae      	subs	r6, r5, r6
 80013c2:	1a09      	subs	r1, r1, r0
 80013c4:	42b5      	cmp	r5, r6
 80013c6:	4180      	sbcs	r0, r0
 80013c8:	4240      	negs	r0, r0
 80013ca:	1a08      	subs	r0, r1, r0
 80013cc:	4284      	cmp	r4, r0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_ddiv+0x34e>
 80013d0:	e111      	b.n	80015f6 <__aeabi_ddiv+0x572>
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe ff42 	bl	800025c <__aeabi_uidivmod>
 80013d8:	9a01      	ldr	r2, [sp, #4]
 80013da:	040b      	lsls	r3, r1, #16
 80013dc:	4342      	muls	r2, r0
 80013de:	0c31      	lsrs	r1, r6, #16
 80013e0:	0005      	movs	r5, r0
 80013e2:	4319      	orrs	r1, r3
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d907      	bls.n	80013f8 <__aeabi_ddiv+0x374>
 80013e8:	1909      	adds	r1, r1, r4
 80013ea:	3d01      	subs	r5, #1
 80013ec:	428c      	cmp	r4, r1
 80013ee:	d803      	bhi.n	80013f8 <__aeabi_ddiv+0x374>
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d901      	bls.n	80013f8 <__aeabi_ddiv+0x374>
 80013f4:	1e85      	subs	r5, r0, #2
 80013f6:	1909      	adds	r1, r1, r4
 80013f8:	1a88      	subs	r0, r1, r2
 80013fa:	4649      	mov	r1, r9
 80013fc:	f7fe ff2e 	bl	800025c <__aeabi_uidivmod>
 8001400:	0409      	lsls	r1, r1, #16
 8001402:	468c      	mov	ip, r1
 8001404:	0431      	lsls	r1, r6, #16
 8001406:	4666      	mov	r6, ip
 8001408:	9a01      	ldr	r2, [sp, #4]
 800140a:	0c09      	lsrs	r1, r1, #16
 800140c:	4342      	muls	r2, r0
 800140e:	0003      	movs	r3, r0
 8001410:	4331      	orrs	r1, r6
 8001412:	428a      	cmp	r2, r1
 8001414:	d907      	bls.n	8001426 <__aeabi_ddiv+0x3a2>
 8001416:	1909      	adds	r1, r1, r4
 8001418:	3b01      	subs	r3, #1
 800141a:	428c      	cmp	r4, r1
 800141c:	d803      	bhi.n	8001426 <__aeabi_ddiv+0x3a2>
 800141e:	428a      	cmp	r2, r1
 8001420:	d901      	bls.n	8001426 <__aeabi_ddiv+0x3a2>
 8001422:	1e83      	subs	r3, r0, #2
 8001424:	1909      	adds	r1, r1, r4
 8001426:	9e03      	ldr	r6, [sp, #12]
 8001428:	1a89      	subs	r1, r1, r2
 800142a:	0032      	movs	r2, r6
 800142c:	042d      	lsls	r5, r5, #16
 800142e:	431d      	orrs	r5, r3
 8001430:	9f02      	ldr	r7, [sp, #8]
 8001432:	042b      	lsls	r3, r5, #16
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	435a      	muls	r2, r3
 8001438:	437b      	muls	r3, r7
 800143a:	469c      	mov	ip, r3
 800143c:	0c28      	lsrs	r0, r5, #16
 800143e:	4346      	muls	r6, r0
 8001440:	0c13      	lsrs	r3, r2, #16
 8001442:	44b4      	add	ip, r6
 8001444:	4463      	add	r3, ip
 8001446:	4378      	muls	r0, r7
 8001448:	429e      	cmp	r6, r3
 800144a:	d903      	bls.n	8001454 <__aeabi_ddiv+0x3d0>
 800144c:	2680      	movs	r6, #128	; 0x80
 800144e:	0276      	lsls	r6, r6, #9
 8001450:	46b4      	mov	ip, r6
 8001452:	4460      	add	r0, ip
 8001454:	0c1e      	lsrs	r6, r3, #16
 8001456:	0412      	lsls	r2, r2, #16
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c12      	lsrs	r2, r2, #16
 800145c:	1830      	adds	r0, r6, r0
 800145e:	189b      	adds	r3, r3, r2
 8001460:	4281      	cmp	r1, r0
 8001462:	d306      	bcc.n	8001472 <__aeabi_ddiv+0x3ee>
 8001464:	d002      	beq.n	800146c <__aeabi_ddiv+0x3e8>
 8001466:	2301      	movs	r3, #1
 8001468:	431d      	orrs	r5, r3
 800146a:	e6ce      	b.n	800120a <__aeabi_ddiv+0x186>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_ddiv+0x3ee>
 8001470:	e6cb      	b.n	800120a <__aeabi_ddiv+0x186>
 8001472:	1861      	adds	r1, r4, r1
 8001474:	1e6e      	subs	r6, r5, #1
 8001476:	42a1      	cmp	r1, r4
 8001478:	d200      	bcs.n	800147c <__aeabi_ddiv+0x3f8>
 800147a:	e0a4      	b.n	80015c6 <__aeabi_ddiv+0x542>
 800147c:	4281      	cmp	r1, r0
 800147e:	d200      	bcs.n	8001482 <__aeabi_ddiv+0x3fe>
 8001480:	e0c9      	b.n	8001616 <__aeabi_ddiv+0x592>
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0x402>
 8001484:	e0d9      	b.n	800163a <__aeabi_ddiv+0x5b6>
 8001486:	0035      	movs	r5, r6
 8001488:	e7ed      	b.n	8001466 <__aeabi_ddiv+0x3e2>
 800148a:	2501      	movs	r5, #1
 800148c:	426d      	negs	r5, r5
 800148e:	2101      	movs	r1, #1
 8001490:	1a89      	subs	r1, r1, r2
 8001492:	2938      	cmp	r1, #56	; 0x38
 8001494:	dd00      	ble.n	8001498 <__aeabi_ddiv+0x414>
 8001496:	e64c      	b.n	8001132 <__aeabi_ddiv+0xae>
 8001498:	291f      	cmp	r1, #31
 800149a:	dc00      	bgt.n	800149e <__aeabi_ddiv+0x41a>
 800149c:	e07f      	b.n	800159e <__aeabi_ddiv+0x51a>
 800149e:	231f      	movs	r3, #31
 80014a0:	425b      	negs	r3, r3
 80014a2:	1a9a      	subs	r2, r3, r2
 80014a4:	4643      	mov	r3, r8
 80014a6:	40d3      	lsrs	r3, r2
 80014a8:	2920      	cmp	r1, #32
 80014aa:	d004      	beq.n	80014b6 <__aeabi_ddiv+0x432>
 80014ac:	4644      	mov	r4, r8
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <__aeabi_ddiv+0x5c0>)
 80014b0:	445a      	add	r2, fp
 80014b2:	4094      	lsls	r4, r2
 80014b4:	4325      	orrs	r5, r4
 80014b6:	1e6a      	subs	r2, r5, #1
 80014b8:	4195      	sbcs	r5, r2
 80014ba:	2207      	movs	r2, #7
 80014bc:	432b      	orrs	r3, r5
 80014be:	0015      	movs	r5, r2
 80014c0:	2400      	movs	r4, #0
 80014c2:	401d      	ands	r5, r3
 80014c4:	421a      	tst	r2, r3
 80014c6:	d100      	bne.n	80014ca <__aeabi_ddiv+0x446>
 80014c8:	e0a1      	b.n	800160e <__aeabi_ddiv+0x58a>
 80014ca:	220f      	movs	r2, #15
 80014cc:	2400      	movs	r4, #0
 80014ce:	401a      	ands	r2, r3
 80014d0:	2a04      	cmp	r2, #4
 80014d2:	d100      	bne.n	80014d6 <__aeabi_ddiv+0x452>
 80014d4:	e098      	b.n	8001608 <__aeabi_ddiv+0x584>
 80014d6:	1d1a      	adds	r2, r3, #4
 80014d8:	429a      	cmp	r2, r3
 80014da:	419b      	sbcs	r3, r3
 80014dc:	425b      	negs	r3, r3
 80014de:	18e4      	adds	r4, r4, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	0222      	lsls	r2, r4, #8
 80014e4:	d400      	bmi.n	80014e8 <__aeabi_ddiv+0x464>
 80014e6:	e08f      	b.n	8001608 <__aeabi_ddiv+0x584>
 80014e8:	2301      	movs	r3, #1
 80014ea:	2400      	movs	r4, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	e623      	b.n	8001138 <__aeabi_ddiv+0xb4>
 80014f0:	42b5      	cmp	r5, r6
 80014f2:	d300      	bcc.n	80014f6 <__aeabi_ddiv+0x472>
 80014f4:	e764      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 80014f6:	4643      	mov	r3, r8
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	9b00      	ldr	r3, [sp, #0]
 80014fc:	469c      	mov	ip, r3
 80014fe:	4465      	add	r5, ip
 8001500:	001f      	movs	r7, r3
 8001502:	429d      	cmp	r5, r3
 8001504:	419b      	sbcs	r3, r3
 8001506:	425b      	negs	r3, r3
 8001508:	191b      	adds	r3, r3, r4
 800150a:	18c9      	adds	r1, r1, r3
 800150c:	428c      	cmp	r4, r1
 800150e:	d23a      	bcs.n	8001586 <__aeabi_ddiv+0x502>
 8001510:	4288      	cmp	r0, r1
 8001512:	d863      	bhi.n	80015dc <__aeabi_ddiv+0x558>
 8001514:	d060      	beq.n	80015d8 <__aeabi_ddiv+0x554>
 8001516:	4690      	mov	r8, r2
 8001518:	e752      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 800151a:	42aa      	cmp	r2, r5
 800151c:	d900      	bls.n	8001520 <__aeabi_ddiv+0x49c>
 800151e:	e6ea      	b.n	80012f6 <__aeabi_ddiv+0x272>
 8001520:	4643      	mov	r3, r8
 8001522:	07de      	lsls	r6, r3, #31
 8001524:	0858      	lsrs	r0, r3, #1
 8001526:	086b      	lsrs	r3, r5, #1
 8001528:	431e      	orrs	r6, r3
 800152a:	07ed      	lsls	r5, r5, #31
 800152c:	e6ea      	b.n	8001304 <__aeabi_ddiv+0x280>
 800152e:	4648      	mov	r0, r9
 8001530:	f001 f926 	bl	8002780 <__clzsi2>
 8001534:	0001      	movs	r1, r0
 8001536:	0002      	movs	r2, r0
 8001538:	3115      	adds	r1, #21
 800153a:	3220      	adds	r2, #32
 800153c:	291c      	cmp	r1, #28
 800153e:	dc00      	bgt.n	8001542 <__aeabi_ddiv+0x4be>
 8001540:	e61a      	b.n	8001178 <__aeabi_ddiv+0xf4>
 8001542:	464b      	mov	r3, r9
 8001544:	3808      	subs	r0, #8
 8001546:	4083      	lsls	r3, r0
 8001548:	2500      	movs	r5, #0
 800154a:	4698      	mov	r8, r3
 800154c:	e620      	b.n	8001190 <__aeabi_ddiv+0x10c>
 800154e:	f001 f917 	bl	8002780 <__clzsi2>
 8001552:	0003      	movs	r3, r0
 8001554:	001a      	movs	r2, r3
 8001556:	3215      	adds	r2, #21
 8001558:	3020      	adds	r0, #32
 800155a:	2a1c      	cmp	r2, #28
 800155c:	dc00      	bgt.n	8001560 <__aeabi_ddiv+0x4dc>
 800155e:	e630      	b.n	80011c2 <__aeabi_ddiv+0x13e>
 8001560:	4654      	mov	r4, sl
 8001562:	3b08      	subs	r3, #8
 8001564:	2200      	movs	r2, #0
 8001566:	409c      	lsls	r4, r3
 8001568:	e635      	b.n	80011d6 <__aeabi_ddiv+0x152>
 800156a:	230f      	movs	r3, #15
 800156c:	402b      	ands	r3, r5
 800156e:	2b04      	cmp	r3, #4
 8001570:	d100      	bne.n	8001574 <__aeabi_ddiv+0x4f0>
 8001572:	e652      	b.n	800121a <__aeabi_ddiv+0x196>
 8001574:	2305      	movs	r3, #5
 8001576:	425b      	negs	r3, r3
 8001578:	42ab      	cmp	r3, r5
 800157a:	419b      	sbcs	r3, r3
 800157c:	3504      	adds	r5, #4
 800157e:	425b      	negs	r3, r3
 8001580:	08ed      	lsrs	r5, r5, #3
 8001582:	4498      	add	r8, r3
 8001584:	e64a      	b.n	800121c <__aeabi_ddiv+0x198>
 8001586:	428c      	cmp	r4, r1
 8001588:	d1c5      	bne.n	8001516 <__aeabi_ddiv+0x492>
 800158a:	42af      	cmp	r7, r5
 800158c:	d9c0      	bls.n	8001510 <__aeabi_ddiv+0x48c>
 800158e:	4690      	mov	r8, r2
 8001590:	e716      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 8001592:	428a      	cmp	r2, r1
 8001594:	d800      	bhi.n	8001598 <__aeabi_ddiv+0x514>
 8001596:	e6ea      	b.n	800136e <__aeabi_ddiv+0x2ea>
 8001598:	1e83      	subs	r3, r0, #2
 800159a:	1909      	adds	r1, r1, r4
 800159c:	e6e7      	b.n	800136e <__aeabi_ddiv+0x2ea>
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <__aeabi_ddiv+0x5c4>)
 80015a0:	0028      	movs	r0, r5
 80015a2:	445a      	add	r2, fp
 80015a4:	4643      	mov	r3, r8
 80015a6:	4095      	lsls	r5, r2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	40c8      	lsrs	r0, r1
 80015ac:	1e6a      	subs	r2, r5, #1
 80015ae:	4195      	sbcs	r5, r2
 80015b0:	4644      	mov	r4, r8
 80015b2:	4303      	orrs	r3, r0
 80015b4:	432b      	orrs	r3, r5
 80015b6:	40cc      	lsrs	r4, r1
 80015b8:	075a      	lsls	r2, r3, #29
 80015ba:	d092      	beq.n	80014e2 <__aeabi_ddiv+0x45e>
 80015bc:	220f      	movs	r2, #15
 80015be:	401a      	ands	r2, r3
 80015c0:	2a04      	cmp	r2, #4
 80015c2:	d188      	bne.n	80014d6 <__aeabi_ddiv+0x452>
 80015c4:	e78d      	b.n	80014e2 <__aeabi_ddiv+0x45e>
 80015c6:	0035      	movs	r5, r6
 80015c8:	4281      	cmp	r1, r0
 80015ca:	d000      	beq.n	80015ce <__aeabi_ddiv+0x54a>
 80015cc:	e74b      	b.n	8001466 <__aeabi_ddiv+0x3e2>
 80015ce:	9a00      	ldr	r2, [sp, #0]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d000      	beq.n	80015d6 <__aeabi_ddiv+0x552>
 80015d4:	e747      	b.n	8001466 <__aeabi_ddiv+0x3e2>
 80015d6:	e618      	b.n	800120a <__aeabi_ddiv+0x186>
 80015d8:	42ae      	cmp	r6, r5
 80015da:	d99c      	bls.n	8001516 <__aeabi_ddiv+0x492>
 80015dc:	2302      	movs	r3, #2
 80015de:	425b      	negs	r3, r3
 80015e0:	469c      	mov	ip, r3
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	44e0      	add	r8, ip
 80015e6:	469c      	mov	ip, r3
 80015e8:	4465      	add	r5, ip
 80015ea:	429d      	cmp	r5, r3
 80015ec:	419b      	sbcs	r3, r3
 80015ee:	425b      	negs	r3, r3
 80015f0:	191b      	adds	r3, r3, r4
 80015f2:	18c9      	adds	r1, r1, r3
 80015f4:	e6e4      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <__aeabi_ddiv+0x5c8>)
 80015f8:	445a      	add	r2, fp
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	dc00      	bgt.n	8001600 <__aeabi_ddiv+0x57c>
 80015fe:	e744      	b.n	800148a <__aeabi_ddiv+0x406>
 8001600:	2301      	movs	r3, #1
 8001602:	2500      	movs	r5, #0
 8001604:	4498      	add	r8, r3
 8001606:	e609      	b.n	800121c <__aeabi_ddiv+0x198>
 8001608:	0765      	lsls	r5, r4, #29
 800160a:	0264      	lsls	r4, r4, #9
 800160c:	0b24      	lsrs	r4, r4, #12
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	431d      	orrs	r5, r3
 8001612:	2300      	movs	r3, #0
 8001614:	e590      	b.n	8001138 <__aeabi_ddiv+0xb4>
 8001616:	9e00      	ldr	r6, [sp, #0]
 8001618:	3d02      	subs	r5, #2
 800161a:	0072      	lsls	r2, r6, #1
 800161c:	42b2      	cmp	r2, r6
 800161e:	41bf      	sbcs	r7, r7
 8001620:	427f      	negs	r7, r7
 8001622:	193c      	adds	r4, r7, r4
 8001624:	1909      	adds	r1, r1, r4
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	e7ce      	b.n	80015c8 <__aeabi_ddiv+0x544>
 800162a:	2480      	movs	r4, #128	; 0x80
 800162c:	4643      	mov	r3, r8
 800162e:	0324      	lsls	r4, r4, #12
 8001630:	431c      	orrs	r4, r3
 8001632:	0324      	lsls	r4, r4, #12
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <__aeabi_ddiv+0x5cc>)
 8001636:	0b24      	lsrs	r4, r4, #12
 8001638:	e57e      	b.n	8001138 <__aeabi_ddiv+0xb4>
 800163a:	9a00      	ldr	r2, [sp, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ea      	bcc.n	8001616 <__aeabi_ddiv+0x592>
 8001640:	0035      	movs	r5, r6
 8001642:	e7c4      	b.n	80015ce <__aeabi_ddiv+0x54a>
 8001644:	0000043e 	.word	0x0000043e
 8001648:	0000041e 	.word	0x0000041e
 800164c:	000003ff 	.word	0x000003ff
 8001650:	000007ff 	.word	0x000007ff

08001654 <__eqdf2>:
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	464f      	mov	r7, r9
 8001658:	4646      	mov	r6, r8
 800165a:	46d6      	mov	lr, sl
 800165c:	4694      	mov	ip, r2
 800165e:	4691      	mov	r9, r2
 8001660:	031a      	lsls	r2, r3, #12
 8001662:	0b12      	lsrs	r2, r2, #12
 8001664:	4d18      	ldr	r5, [pc, #96]	; (80016c8 <__eqdf2+0x74>)
 8001666:	b5c0      	push	{r6, r7, lr}
 8001668:	004c      	lsls	r4, r1, #1
 800166a:	030f      	lsls	r7, r1, #12
 800166c:	4692      	mov	sl, r2
 800166e:	005a      	lsls	r2, r3, #1
 8001670:	0006      	movs	r6, r0
 8001672:	4680      	mov	r8, r0
 8001674:	0b3f      	lsrs	r7, r7, #12
 8001676:	2001      	movs	r0, #1
 8001678:	0d64      	lsrs	r4, r4, #21
 800167a:	0fc9      	lsrs	r1, r1, #31
 800167c:	0d52      	lsrs	r2, r2, #21
 800167e:	0fdb      	lsrs	r3, r3, #31
 8001680:	42ac      	cmp	r4, r5
 8001682:	d00a      	beq.n	800169a <__eqdf2+0x46>
 8001684:	42aa      	cmp	r2, r5
 8001686:	d003      	beq.n	8001690 <__eqdf2+0x3c>
 8001688:	4294      	cmp	r4, r2
 800168a:	d101      	bne.n	8001690 <__eqdf2+0x3c>
 800168c:	4557      	cmp	r7, sl
 800168e:	d00d      	beq.n	80016ac <__eqdf2+0x58>
 8001690:	bce0      	pop	{r5, r6, r7}
 8001692:	46ba      	mov	sl, r7
 8001694:	46b1      	mov	r9, r6
 8001696:	46a8      	mov	r8, r5
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169a:	003d      	movs	r5, r7
 800169c:	4335      	orrs	r5, r6
 800169e:	d1f7      	bne.n	8001690 <__eqdf2+0x3c>
 80016a0:	42a2      	cmp	r2, r4
 80016a2:	d1f5      	bne.n	8001690 <__eqdf2+0x3c>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4665      	mov	r5, ip
 80016a8:	432a      	orrs	r2, r5
 80016aa:	d1f1      	bne.n	8001690 <__eqdf2+0x3c>
 80016ac:	2001      	movs	r0, #1
 80016ae:	45c8      	cmp	r8, r9
 80016b0:	d1ee      	bne.n	8001690 <__eqdf2+0x3c>
 80016b2:	4299      	cmp	r1, r3
 80016b4:	d006      	beq.n	80016c4 <__eqdf2+0x70>
 80016b6:	2c00      	cmp	r4, #0
 80016b8:	d1ea      	bne.n	8001690 <__eqdf2+0x3c>
 80016ba:	433e      	orrs	r6, r7
 80016bc:	0030      	movs	r0, r6
 80016be:	1e46      	subs	r6, r0, #1
 80016c0:	41b0      	sbcs	r0, r6
 80016c2:	e7e5      	b.n	8001690 <__eqdf2+0x3c>
 80016c4:	2000      	movs	r0, #0
 80016c6:	e7e3      	b.n	8001690 <__eqdf2+0x3c>
 80016c8:	000007ff 	.word	0x000007ff

080016cc <__gedf2>:
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	464e      	mov	r6, r9
 80016d0:	4645      	mov	r5, r8
 80016d2:	4657      	mov	r7, sl
 80016d4:	46de      	mov	lr, fp
 80016d6:	0004      	movs	r4, r0
 80016d8:	0018      	movs	r0, r3
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	0016      	movs	r6, r2
 80016de:	031b      	lsls	r3, r3, #12
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	4d32      	ldr	r5, [pc, #200]	; (80017ac <__gedf2+0xe0>)
 80016e4:	030f      	lsls	r7, r1, #12
 80016e6:	004a      	lsls	r2, r1, #1
 80016e8:	4699      	mov	r9, r3
 80016ea:	0043      	lsls	r3, r0, #1
 80016ec:	46a4      	mov	ip, r4
 80016ee:	46b0      	mov	r8, r6
 80016f0:	0b3f      	lsrs	r7, r7, #12
 80016f2:	0d52      	lsrs	r2, r2, #21
 80016f4:	0fc9      	lsrs	r1, r1, #31
 80016f6:	0d5b      	lsrs	r3, r3, #21
 80016f8:	0fc0      	lsrs	r0, r0, #31
 80016fa:	42aa      	cmp	r2, r5
 80016fc:	d029      	beq.n	8001752 <__gedf2+0x86>
 80016fe:	42ab      	cmp	r3, r5
 8001700:	d018      	beq.n	8001734 <__gedf2+0x68>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d12a      	bne.n	800175c <__gedf2+0x90>
 8001706:	433c      	orrs	r4, r7
 8001708:	46a3      	mov	fp, r4
 800170a:	4265      	negs	r5, r4
 800170c:	4165      	adcs	r5, r4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <__gedf2+0x4c>
 8001712:	464c      	mov	r4, r9
 8001714:	4326      	orrs	r6, r4
 8001716:	d027      	beq.n	8001768 <__gedf2+0x9c>
 8001718:	2d00      	cmp	r5, #0
 800171a:	d115      	bne.n	8001748 <__gedf2+0x7c>
 800171c:	4281      	cmp	r1, r0
 800171e:	d028      	beq.n	8001772 <__gedf2+0xa6>
 8001720:	2002      	movs	r0, #2
 8001722:	3901      	subs	r1, #1
 8001724:	4008      	ands	r0, r1
 8001726:	3801      	subs	r0, #1
 8001728:	bcf0      	pop	{r4, r5, r6, r7}
 800172a:	46bb      	mov	fp, r7
 800172c:	46b2      	mov	sl, r6
 800172e:	46a9      	mov	r9, r5
 8001730:	46a0      	mov	r8, r4
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	464d      	mov	r5, r9
 8001736:	432e      	orrs	r6, r5
 8001738:	d12f      	bne.n	800179a <__gedf2+0xce>
 800173a:	2a00      	cmp	r2, #0
 800173c:	d1ee      	bne.n	800171c <__gedf2+0x50>
 800173e:	433c      	orrs	r4, r7
 8001740:	4265      	negs	r5, r4
 8001742:	4165      	adcs	r5, r4
 8001744:	2d00      	cmp	r5, #0
 8001746:	d0e9      	beq.n	800171c <__gedf2+0x50>
 8001748:	2800      	cmp	r0, #0
 800174a:	d1ed      	bne.n	8001728 <__gedf2+0x5c>
 800174c:	2001      	movs	r0, #1
 800174e:	4240      	negs	r0, r0
 8001750:	e7ea      	b.n	8001728 <__gedf2+0x5c>
 8001752:	003d      	movs	r5, r7
 8001754:	4325      	orrs	r5, r4
 8001756:	d120      	bne.n	800179a <__gedf2+0xce>
 8001758:	4293      	cmp	r3, r2
 800175a:	d0eb      	beq.n	8001734 <__gedf2+0x68>
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1dd      	bne.n	800171c <__gedf2+0x50>
 8001760:	464c      	mov	r4, r9
 8001762:	4326      	orrs	r6, r4
 8001764:	d1da      	bne.n	800171c <__gedf2+0x50>
 8001766:	e7db      	b.n	8001720 <__gedf2+0x54>
 8001768:	465b      	mov	r3, fp
 800176a:	2000      	movs	r0, #0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0db      	beq.n	8001728 <__gedf2+0x5c>
 8001770:	e7d6      	b.n	8001720 <__gedf2+0x54>
 8001772:	429a      	cmp	r2, r3
 8001774:	dc0a      	bgt.n	800178c <__gedf2+0xc0>
 8001776:	dbe7      	blt.n	8001748 <__gedf2+0x7c>
 8001778:	454f      	cmp	r7, r9
 800177a:	d8d1      	bhi.n	8001720 <__gedf2+0x54>
 800177c:	d010      	beq.n	80017a0 <__gedf2+0xd4>
 800177e:	2000      	movs	r0, #0
 8001780:	454f      	cmp	r7, r9
 8001782:	d2d1      	bcs.n	8001728 <__gedf2+0x5c>
 8001784:	2900      	cmp	r1, #0
 8001786:	d0e1      	beq.n	800174c <__gedf2+0x80>
 8001788:	0008      	movs	r0, r1
 800178a:	e7cd      	b.n	8001728 <__gedf2+0x5c>
 800178c:	4243      	negs	r3, r0
 800178e:	4158      	adcs	r0, r3
 8001790:	2302      	movs	r3, #2
 8001792:	4240      	negs	r0, r0
 8001794:	4018      	ands	r0, r3
 8001796:	3801      	subs	r0, #1
 8001798:	e7c6      	b.n	8001728 <__gedf2+0x5c>
 800179a:	2002      	movs	r0, #2
 800179c:	4240      	negs	r0, r0
 800179e:	e7c3      	b.n	8001728 <__gedf2+0x5c>
 80017a0:	45c4      	cmp	ip, r8
 80017a2:	d8bd      	bhi.n	8001720 <__gedf2+0x54>
 80017a4:	2000      	movs	r0, #0
 80017a6:	45c4      	cmp	ip, r8
 80017a8:	d2be      	bcs.n	8001728 <__gedf2+0x5c>
 80017aa:	e7eb      	b.n	8001784 <__gedf2+0xb8>
 80017ac:	000007ff 	.word	0x000007ff

080017b0 <__ledf2>:
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	464e      	mov	r6, r9
 80017b4:	4645      	mov	r5, r8
 80017b6:	4657      	mov	r7, sl
 80017b8:	46de      	mov	lr, fp
 80017ba:	0004      	movs	r4, r0
 80017bc:	0018      	movs	r0, r3
 80017be:	b5e0      	push	{r5, r6, r7, lr}
 80017c0:	0016      	movs	r6, r2
 80017c2:	031b      	lsls	r3, r3, #12
 80017c4:	0b1b      	lsrs	r3, r3, #12
 80017c6:	4d31      	ldr	r5, [pc, #196]	; (800188c <__ledf2+0xdc>)
 80017c8:	030f      	lsls	r7, r1, #12
 80017ca:	004a      	lsls	r2, r1, #1
 80017cc:	4699      	mov	r9, r3
 80017ce:	0043      	lsls	r3, r0, #1
 80017d0:	46a4      	mov	ip, r4
 80017d2:	46b0      	mov	r8, r6
 80017d4:	0b3f      	lsrs	r7, r7, #12
 80017d6:	0d52      	lsrs	r2, r2, #21
 80017d8:	0fc9      	lsrs	r1, r1, #31
 80017da:	0d5b      	lsrs	r3, r3, #21
 80017dc:	0fc0      	lsrs	r0, r0, #31
 80017de:	42aa      	cmp	r2, r5
 80017e0:	d011      	beq.n	8001806 <__ledf2+0x56>
 80017e2:	42ab      	cmp	r3, r5
 80017e4:	d014      	beq.n	8001810 <__ledf2+0x60>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d12f      	bne.n	800184a <__ledf2+0x9a>
 80017ea:	433c      	orrs	r4, r7
 80017ec:	46a3      	mov	fp, r4
 80017ee:	4265      	negs	r5, r4
 80017f0:	4165      	adcs	r5, r4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <__ledf2+0x70>
 80017f6:	464c      	mov	r4, r9
 80017f8:	4326      	orrs	r6, r4
 80017fa:	d111      	bne.n	8001820 <__ledf2+0x70>
 80017fc:	465b      	mov	r3, fp
 80017fe:	2000      	movs	r0, #0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <__ledf2+0x84>
 8001804:	e010      	b.n	8001828 <__ledf2+0x78>
 8001806:	003d      	movs	r5, r7
 8001808:	4325      	orrs	r5, r4
 800180a:	d112      	bne.n	8001832 <__ledf2+0x82>
 800180c:	4293      	cmp	r3, r2
 800180e:	d11c      	bne.n	800184a <__ledf2+0x9a>
 8001810:	464d      	mov	r5, r9
 8001812:	432e      	orrs	r6, r5
 8001814:	d10d      	bne.n	8001832 <__ledf2+0x82>
 8001816:	2a00      	cmp	r2, #0
 8001818:	d104      	bne.n	8001824 <__ledf2+0x74>
 800181a:	433c      	orrs	r4, r7
 800181c:	4265      	negs	r5, r4
 800181e:	4165      	adcs	r5, r4
 8001820:	2d00      	cmp	r5, #0
 8001822:	d10d      	bne.n	8001840 <__ledf2+0x90>
 8001824:	4281      	cmp	r1, r0
 8001826:	d016      	beq.n	8001856 <__ledf2+0xa6>
 8001828:	2002      	movs	r0, #2
 800182a:	3901      	subs	r1, #1
 800182c:	4008      	ands	r0, r1
 800182e:	3801      	subs	r0, #1
 8001830:	e000      	b.n	8001834 <__ledf2+0x84>
 8001832:	2002      	movs	r0, #2
 8001834:	bcf0      	pop	{r4, r5, r6, r7}
 8001836:	46bb      	mov	fp, r7
 8001838:	46b2      	mov	sl, r6
 800183a:	46a9      	mov	r9, r5
 800183c:	46a0      	mov	r8, r4
 800183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001840:	2800      	cmp	r0, #0
 8001842:	d1f7      	bne.n	8001834 <__ledf2+0x84>
 8001844:	2001      	movs	r0, #1
 8001846:	4240      	negs	r0, r0
 8001848:	e7f4      	b.n	8001834 <__ledf2+0x84>
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ea      	bne.n	8001824 <__ledf2+0x74>
 800184e:	464c      	mov	r4, r9
 8001850:	4326      	orrs	r6, r4
 8001852:	d1e7      	bne.n	8001824 <__ledf2+0x74>
 8001854:	e7e8      	b.n	8001828 <__ledf2+0x78>
 8001856:	429a      	cmp	r2, r3
 8001858:	dd06      	ble.n	8001868 <__ledf2+0xb8>
 800185a:	4243      	negs	r3, r0
 800185c:	4158      	adcs	r0, r3
 800185e:	2302      	movs	r3, #2
 8001860:	4240      	negs	r0, r0
 8001862:	4018      	ands	r0, r3
 8001864:	3801      	subs	r0, #1
 8001866:	e7e5      	b.n	8001834 <__ledf2+0x84>
 8001868:	429a      	cmp	r2, r3
 800186a:	dbe9      	blt.n	8001840 <__ledf2+0x90>
 800186c:	454f      	cmp	r7, r9
 800186e:	d8db      	bhi.n	8001828 <__ledf2+0x78>
 8001870:	d006      	beq.n	8001880 <__ledf2+0xd0>
 8001872:	2000      	movs	r0, #0
 8001874:	454f      	cmp	r7, r9
 8001876:	d2dd      	bcs.n	8001834 <__ledf2+0x84>
 8001878:	2900      	cmp	r1, #0
 800187a:	d0e3      	beq.n	8001844 <__ledf2+0x94>
 800187c:	0008      	movs	r0, r1
 800187e:	e7d9      	b.n	8001834 <__ledf2+0x84>
 8001880:	45c4      	cmp	ip, r8
 8001882:	d8d1      	bhi.n	8001828 <__ledf2+0x78>
 8001884:	2000      	movs	r0, #0
 8001886:	45c4      	cmp	ip, r8
 8001888:	d2d4      	bcs.n	8001834 <__ledf2+0x84>
 800188a:	e7f5      	b.n	8001878 <__ledf2+0xc8>
 800188c:	000007ff 	.word	0x000007ff

08001890 <__aeabi_dmul>:
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	4657      	mov	r7, sl
 8001894:	464e      	mov	r6, r9
 8001896:	4645      	mov	r5, r8
 8001898:	46de      	mov	lr, fp
 800189a:	b5e0      	push	{r5, r6, r7, lr}
 800189c:	4698      	mov	r8, r3
 800189e:	030c      	lsls	r4, r1, #12
 80018a0:	004b      	lsls	r3, r1, #1
 80018a2:	0006      	movs	r6, r0
 80018a4:	4692      	mov	sl, r2
 80018a6:	b087      	sub	sp, #28
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	0d5b      	lsrs	r3, r3, #21
 80018ac:	0fcf      	lsrs	r7, r1, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <__aeabi_dmul+0xfc>
 80018b2:	4add      	ldr	r2, [pc, #884]	; (8001c28 <__aeabi_dmul+0x398>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d100      	bne.n	80018ba <__aeabi_dmul+0x2a>
 80018b8:	e086      	b.n	80019c8 <__aeabi_dmul+0x138>
 80018ba:	0f42      	lsrs	r2, r0, #29
 80018bc:	00e4      	lsls	r4, r4, #3
 80018be:	4314      	orrs	r4, r2
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	4314      	orrs	r4, r2
 80018c6:	4ad9      	ldr	r2, [pc, #868]	; (8001c2c <__aeabi_dmul+0x39c>)
 80018c8:	00c5      	lsls	r5, r0, #3
 80018ca:	4694      	mov	ip, r2
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	4699      	mov	r9, r3
 80018d4:	469b      	mov	fp, r3
 80018d6:	4643      	mov	r3, r8
 80018d8:	4642      	mov	r2, r8
 80018da:	031e      	lsls	r6, r3, #12
 80018dc:	0fd2      	lsrs	r2, r2, #31
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4650      	mov	r0, sl
 80018e2:	4690      	mov	r8, r2
 80018e4:	0b36      	lsrs	r6, r6, #12
 80018e6:	0d5b      	lsrs	r3, r3, #21
 80018e8:	d100      	bne.n	80018ec <__aeabi_dmul+0x5c>
 80018ea:	e078      	b.n	80019de <__aeabi_dmul+0x14e>
 80018ec:	4ace      	ldr	r2, [pc, #824]	; (8001c28 <__aeabi_dmul+0x398>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <__aeabi_dmul+0x9e>
 80018f2:	49ce      	ldr	r1, [pc, #824]	; (8001c2c <__aeabi_dmul+0x39c>)
 80018f4:	0f42      	lsrs	r2, r0, #29
 80018f6:	468c      	mov	ip, r1
 80018f8:	9900      	ldr	r1, [sp, #0]
 80018fa:	4463      	add	r3, ip
 80018fc:	00f6      	lsls	r6, r6, #3
 80018fe:	468c      	mov	ip, r1
 8001900:	4316      	orrs	r6, r2
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	449c      	add	ip, r3
 8001906:	0412      	lsls	r2, r2, #16
 8001908:	4663      	mov	r3, ip
 800190a:	4316      	orrs	r6, r2
 800190c:	00c2      	lsls	r2, r0, #3
 800190e:	2000      	movs	r0, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	9900      	ldr	r1, [sp, #0]
 8001914:	4643      	mov	r3, r8
 8001916:	3101      	adds	r1, #1
 8001918:	468c      	mov	ip, r1
 800191a:	4649      	mov	r1, r9
 800191c:	407b      	eors	r3, r7
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	290f      	cmp	r1, #15
 8001922:	d900      	bls.n	8001926 <__aeabi_dmul+0x96>
 8001924:	e07e      	b.n	8001a24 <__aeabi_dmul+0x194>
 8001926:	4bc2      	ldr	r3, [pc, #776]	; (8001c30 <__aeabi_dmul+0x3a0>)
 8001928:	0089      	lsls	r1, r1, #2
 800192a:	5859      	ldr	r1, [r3, r1]
 800192c:	468f      	mov	pc, r1
 800192e:	4652      	mov	r2, sl
 8001930:	9b00      	ldr	r3, [sp, #0]
 8001932:	4332      	orrs	r2, r6
 8001934:	d000      	beq.n	8001938 <__aeabi_dmul+0xa8>
 8001936:	e156      	b.n	8001be6 <__aeabi_dmul+0x356>
 8001938:	49bb      	ldr	r1, [pc, #748]	; (8001c28 <__aeabi_dmul+0x398>)
 800193a:	2600      	movs	r6, #0
 800193c:	468c      	mov	ip, r1
 800193e:	4463      	add	r3, ip
 8001940:	4649      	mov	r1, r9
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2302      	movs	r3, #2
 8001946:	4319      	orrs	r1, r3
 8001948:	4689      	mov	r9, r1
 800194a:	2002      	movs	r0, #2
 800194c:	e7e1      	b.n	8001912 <__aeabi_dmul+0x82>
 800194e:	4643      	mov	r3, r8
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	0034      	movs	r4, r6
 8001954:	0015      	movs	r5, r2
 8001956:	4683      	mov	fp, r0
 8001958:	465b      	mov	r3, fp
 800195a:	2b02      	cmp	r3, #2
 800195c:	d05e      	beq.n	8001a1c <__aeabi_dmul+0x18c>
 800195e:	2b03      	cmp	r3, #3
 8001960:	d100      	bne.n	8001964 <__aeabi_dmul+0xd4>
 8001962:	e1f3      	b.n	8001d4c <__aeabi_dmul+0x4bc>
 8001964:	2b01      	cmp	r3, #1
 8001966:	d000      	beq.n	800196a <__aeabi_dmul+0xda>
 8001968:	e118      	b.n	8001b9c <__aeabi_dmul+0x30c>
 800196a:	2200      	movs	r2, #0
 800196c:	2400      	movs	r4, #0
 800196e:	2500      	movs	r5, #0
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	0512      	lsls	r2, r2, #20
 8001974:	4322      	orrs	r2, r4
 8001976:	07db      	lsls	r3, r3, #31
 8001978:	431a      	orrs	r2, r3
 800197a:	0028      	movs	r0, r5
 800197c:	0011      	movs	r1, r2
 800197e:	b007      	add	sp, #28
 8001980:	bcf0      	pop	{r4, r5, r6, r7}
 8001982:	46bb      	mov	fp, r7
 8001984:	46b2      	mov	sl, r6
 8001986:	46a9      	mov	r9, r5
 8001988:	46a0      	mov	r8, r4
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	0025      	movs	r5, r4
 800198e:	4305      	orrs	r5, r0
 8001990:	d100      	bne.n	8001994 <__aeabi_dmul+0x104>
 8001992:	e141      	b.n	8001c18 <__aeabi_dmul+0x388>
 8001994:	2c00      	cmp	r4, #0
 8001996:	d100      	bne.n	800199a <__aeabi_dmul+0x10a>
 8001998:	e1ad      	b.n	8001cf6 <__aeabi_dmul+0x466>
 800199a:	0020      	movs	r0, r4
 800199c:	f000 fef0 	bl	8002780 <__clzsi2>
 80019a0:	0001      	movs	r1, r0
 80019a2:	0002      	movs	r2, r0
 80019a4:	390b      	subs	r1, #11
 80019a6:	231d      	movs	r3, #29
 80019a8:	0010      	movs	r0, r2
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	0031      	movs	r1, r6
 80019ae:	0035      	movs	r5, r6
 80019b0:	3808      	subs	r0, #8
 80019b2:	4084      	lsls	r4, r0
 80019b4:	40d9      	lsrs	r1, r3
 80019b6:	4085      	lsls	r5, r0
 80019b8:	430c      	orrs	r4, r1
 80019ba:	489e      	ldr	r0, [pc, #632]	; (8001c34 <__aeabi_dmul+0x3a4>)
 80019bc:	1a83      	subs	r3, r0, r2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	4699      	mov	r9, r3
 80019c4:	469b      	mov	fp, r3
 80019c6:	e786      	b.n	80018d6 <__aeabi_dmul+0x46>
 80019c8:	0005      	movs	r5, r0
 80019ca:	4325      	orrs	r5, r4
 80019cc:	d000      	beq.n	80019d0 <__aeabi_dmul+0x140>
 80019ce:	e11c      	b.n	8001c0a <__aeabi_dmul+0x37a>
 80019d0:	2208      	movs	r2, #8
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2302      	movs	r3, #2
 80019d6:	2400      	movs	r4, #0
 80019d8:	4691      	mov	r9, r2
 80019da:	469b      	mov	fp, r3
 80019dc:	e77b      	b.n	80018d6 <__aeabi_dmul+0x46>
 80019de:	4652      	mov	r2, sl
 80019e0:	4332      	orrs	r2, r6
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dmul+0x156>
 80019e4:	e10a      	b.n	8001bfc <__aeabi_dmul+0x36c>
 80019e6:	2e00      	cmp	r6, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x15c>
 80019ea:	e176      	b.n	8001cda <__aeabi_dmul+0x44a>
 80019ec:	0030      	movs	r0, r6
 80019ee:	f000 fec7 	bl	8002780 <__clzsi2>
 80019f2:	0002      	movs	r2, r0
 80019f4:	3a0b      	subs	r2, #11
 80019f6:	231d      	movs	r3, #29
 80019f8:	0001      	movs	r1, r0
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	4652      	mov	r2, sl
 80019fe:	3908      	subs	r1, #8
 8001a00:	40da      	lsrs	r2, r3
 8001a02:	408e      	lsls	r6, r1
 8001a04:	4316      	orrs	r6, r2
 8001a06:	4652      	mov	r2, sl
 8001a08:	408a      	lsls	r2, r1
 8001a0a:	9b00      	ldr	r3, [sp, #0]
 8001a0c:	4989      	ldr	r1, [pc, #548]	; (8001c34 <__aeabi_dmul+0x3a4>)
 8001a0e:	1a18      	subs	r0, r3, r0
 8001a10:	0003      	movs	r3, r0
 8001a12:	468c      	mov	ip, r1
 8001a14:	4463      	add	r3, ip
 8001a16:	2000      	movs	r0, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	e77a      	b.n	8001912 <__aeabi_dmul+0x82>
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	2500      	movs	r5, #0
 8001a20:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <__aeabi_dmul+0x398>)
 8001a22:	e7a5      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001a24:	0c2f      	lsrs	r7, r5, #16
 8001a26:	042d      	lsls	r5, r5, #16
 8001a28:	0c2d      	lsrs	r5, r5, #16
 8001a2a:	002b      	movs	r3, r5
 8001a2c:	0c11      	lsrs	r1, r2, #16
 8001a2e:	0412      	lsls	r2, r2, #16
 8001a30:	0c12      	lsrs	r2, r2, #16
 8001a32:	4353      	muls	r3, r2
 8001a34:	4698      	mov	r8, r3
 8001a36:	0013      	movs	r3, r2
 8001a38:	0028      	movs	r0, r5
 8001a3a:	437b      	muls	r3, r7
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4348      	muls	r0, r1
 8001a40:	4448      	add	r0, r9
 8001a42:	4683      	mov	fp, r0
 8001a44:	4640      	mov	r0, r8
 8001a46:	000b      	movs	r3, r1
 8001a48:	0c00      	lsrs	r0, r0, #16
 8001a4a:	4682      	mov	sl, r0
 8001a4c:	4658      	mov	r0, fp
 8001a4e:	437b      	muls	r3, r7
 8001a50:	4450      	add	r0, sl
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	4581      	cmp	r9, r0
 8001a56:	d906      	bls.n	8001a66 <__aeabi_dmul+0x1d6>
 8001a58:	469a      	mov	sl, r3
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	025b      	lsls	r3, r3, #9
 8001a5e:	4699      	mov	r9, r3
 8001a60:	44ca      	add	sl, r9
 8001a62:	4653      	mov	r3, sl
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	0c03      	lsrs	r3, r0, #16
 8001a68:	469b      	mov	fp, r3
 8001a6a:	4643      	mov	r3, r8
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	0400      	lsls	r0, r0, #16
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	4698      	mov	r8, r3
 8001a74:	0003      	movs	r3, r0
 8001a76:	4443      	add	r3, r8
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	0c33      	lsrs	r3, r6, #16
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	002b      	movs	r3, r5
 8001a80:	0436      	lsls	r6, r6, #16
 8001a82:	0c36      	lsrs	r6, r6, #16
 8001a84:	4373      	muls	r3, r6
 8001a86:	4698      	mov	r8, r3
 8001a88:	0033      	movs	r3, r6
 8001a8a:	437b      	muls	r3, r7
 8001a8c:	469a      	mov	sl, r3
 8001a8e:	464b      	mov	r3, r9
 8001a90:	435d      	muls	r5, r3
 8001a92:	435f      	muls	r7, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	4455      	add	r5, sl
 8001a98:	0c18      	lsrs	r0, r3, #16
 8001a9a:	1940      	adds	r0, r0, r5
 8001a9c:	4582      	cmp	sl, r0
 8001a9e:	d903      	bls.n	8001aa8 <__aeabi_dmul+0x218>
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	469a      	mov	sl, r3
 8001aa6:	4457      	add	r7, sl
 8001aa8:	0c05      	lsrs	r5, r0, #16
 8001aaa:	19eb      	adds	r3, r5, r7
 8001aac:	9305      	str	r3, [sp, #20]
 8001aae:	4643      	mov	r3, r8
 8001ab0:	041d      	lsls	r5, r3, #16
 8001ab2:	0c2d      	lsrs	r5, r5, #16
 8001ab4:	0400      	lsls	r0, r0, #16
 8001ab6:	1940      	adds	r0, r0, r5
 8001ab8:	0c25      	lsrs	r5, r4, #16
 8001aba:	0424      	lsls	r4, r4, #16
 8001abc:	0c24      	lsrs	r4, r4, #16
 8001abe:	0027      	movs	r7, r4
 8001ac0:	4357      	muls	r7, r2
 8001ac2:	436a      	muls	r2, r5
 8001ac4:	4690      	mov	r8, r2
 8001ac6:	002a      	movs	r2, r5
 8001ac8:	0c3b      	lsrs	r3, r7, #16
 8001aca:	469a      	mov	sl, r3
 8001acc:	434a      	muls	r2, r1
 8001ace:	4361      	muls	r1, r4
 8001ad0:	4441      	add	r1, r8
 8001ad2:	4451      	add	r1, sl
 8001ad4:	4483      	add	fp, r0
 8001ad6:	4588      	cmp	r8, r1
 8001ad8:	d903      	bls.n	8001ae2 <__aeabi_dmul+0x252>
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	025b      	lsls	r3, r3, #9
 8001ade:	4698      	mov	r8, r3
 8001ae0:	4442      	add	r2, r8
 8001ae2:	043f      	lsls	r7, r7, #16
 8001ae4:	0c0b      	lsrs	r3, r1, #16
 8001ae6:	0c3f      	lsrs	r7, r7, #16
 8001ae8:	0409      	lsls	r1, r1, #16
 8001aea:	19c9      	adds	r1, r1, r7
 8001aec:	0027      	movs	r7, r4
 8001aee:	4698      	mov	r8, r3
 8001af0:	464b      	mov	r3, r9
 8001af2:	4377      	muls	r7, r6
 8001af4:	435c      	muls	r4, r3
 8001af6:	436e      	muls	r6, r5
 8001af8:	435d      	muls	r5, r3
 8001afa:	0c3b      	lsrs	r3, r7, #16
 8001afc:	4699      	mov	r9, r3
 8001afe:	19a4      	adds	r4, r4, r6
 8001b00:	444c      	add	r4, r9
 8001b02:	4442      	add	r2, r8
 8001b04:	9503      	str	r5, [sp, #12]
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d904      	bls.n	8001b14 <__aeabi_dmul+0x284>
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	4698      	mov	r8, r3
 8001b10:	4445      	add	r5, r8
 8001b12:	9503      	str	r5, [sp, #12]
 8001b14:	9b02      	ldr	r3, [sp, #8]
 8001b16:	043f      	lsls	r7, r7, #16
 8001b18:	445b      	add	r3, fp
 8001b1a:	001e      	movs	r6, r3
 8001b1c:	4283      	cmp	r3, r0
 8001b1e:	4180      	sbcs	r0, r0
 8001b20:	0423      	lsls	r3, r4, #16
 8001b22:	4698      	mov	r8, r3
 8001b24:	9b05      	ldr	r3, [sp, #20]
 8001b26:	0c3f      	lsrs	r7, r7, #16
 8001b28:	4447      	add	r7, r8
 8001b2a:	4698      	mov	r8, r3
 8001b2c:	1876      	adds	r6, r6, r1
 8001b2e:	428e      	cmp	r6, r1
 8001b30:	4189      	sbcs	r1, r1
 8001b32:	4447      	add	r7, r8
 8001b34:	4240      	negs	r0, r0
 8001b36:	183d      	adds	r5, r7, r0
 8001b38:	46a8      	mov	r8, r5
 8001b3a:	4693      	mov	fp, r2
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	468a      	mov	sl, r1
 8001b40:	44c3      	add	fp, r8
 8001b42:	429f      	cmp	r7, r3
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	4580      	cmp	r8, r0
 8001b48:	4180      	sbcs	r0, r0
 8001b4a:	9b03      	ldr	r3, [sp, #12]
 8001b4c:	44da      	add	sl, fp
 8001b4e:	4698      	mov	r8, r3
 8001b50:	4653      	mov	r3, sl
 8001b52:	4240      	negs	r0, r0
 8001b54:	427f      	negs	r7, r7
 8001b56:	4307      	orrs	r7, r0
 8001b58:	0c24      	lsrs	r4, r4, #16
 8001b5a:	4593      	cmp	fp, r2
 8001b5c:	4192      	sbcs	r2, r2
 8001b5e:	458a      	cmp	sl, r1
 8001b60:	4189      	sbcs	r1, r1
 8001b62:	193f      	adds	r7, r7, r4
 8001b64:	0ddc      	lsrs	r4, r3, #23
 8001b66:	9b04      	ldr	r3, [sp, #16]
 8001b68:	0275      	lsls	r5, r6, #9
 8001b6a:	431d      	orrs	r5, r3
 8001b6c:	1e68      	subs	r0, r5, #1
 8001b6e:	4185      	sbcs	r5, r0
 8001b70:	4653      	mov	r3, sl
 8001b72:	4252      	negs	r2, r2
 8001b74:	4249      	negs	r1, r1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	18bf      	adds	r7, r7, r2
 8001b7a:	4447      	add	r7, r8
 8001b7c:	0df6      	lsrs	r6, r6, #23
 8001b7e:	027f      	lsls	r7, r7, #9
 8001b80:	4335      	orrs	r5, r6
 8001b82:	025a      	lsls	r2, r3, #9
 8001b84:	433c      	orrs	r4, r7
 8001b86:	4315      	orrs	r5, r2
 8001b88:	01fb      	lsls	r3, r7, #7
 8001b8a:	d400      	bmi.n	8001b8e <__aeabi_dmul+0x2fe>
 8001b8c:	e0c1      	b.n	8001d12 <__aeabi_dmul+0x482>
 8001b8e:	2101      	movs	r1, #1
 8001b90:	086a      	lsrs	r2, r5, #1
 8001b92:	400d      	ands	r5, r1
 8001b94:	4315      	orrs	r5, r2
 8001b96:	07e2      	lsls	r2, r4, #31
 8001b98:	4315      	orrs	r5, r2
 8001b9a:	0864      	lsrs	r4, r4, #1
 8001b9c:	4926      	ldr	r1, [pc, #152]	; (8001c38 <__aeabi_dmul+0x3a8>)
 8001b9e:	4461      	add	r1, ip
 8001ba0:	2900      	cmp	r1, #0
 8001ba2:	dd56      	ble.n	8001c52 <__aeabi_dmul+0x3c2>
 8001ba4:	076b      	lsls	r3, r5, #29
 8001ba6:	d009      	beq.n	8001bbc <__aeabi_dmul+0x32c>
 8001ba8:	220f      	movs	r2, #15
 8001baa:	402a      	ands	r2, r5
 8001bac:	2a04      	cmp	r2, #4
 8001bae:	d005      	beq.n	8001bbc <__aeabi_dmul+0x32c>
 8001bb0:	1d2a      	adds	r2, r5, #4
 8001bb2:	42aa      	cmp	r2, r5
 8001bb4:	41ad      	sbcs	r5, r5
 8001bb6:	426d      	negs	r5, r5
 8001bb8:	1964      	adds	r4, r4, r5
 8001bba:	0015      	movs	r5, r2
 8001bbc:	01e3      	lsls	r3, r4, #7
 8001bbe:	d504      	bpl.n	8001bca <__aeabi_dmul+0x33a>
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <__aeabi_dmul+0x3ac>)
 8001bc4:	00c9      	lsls	r1, r1, #3
 8001bc6:	4014      	ands	r4, r2
 8001bc8:	4461      	add	r1, ip
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <__aeabi_dmul+0x3b0>)
 8001bcc:	4291      	cmp	r1, r2
 8001bce:	dd00      	ble.n	8001bd2 <__aeabi_dmul+0x342>
 8001bd0:	e724      	b.n	8001a1c <__aeabi_dmul+0x18c>
 8001bd2:	0762      	lsls	r2, r4, #29
 8001bd4:	08ed      	lsrs	r5, r5, #3
 8001bd6:	0264      	lsls	r4, r4, #9
 8001bd8:	0549      	lsls	r1, r1, #21
 8001bda:	4315      	orrs	r5, r2
 8001bdc:	0b24      	lsrs	r4, r4, #12
 8001bde:	0d4a      	lsrs	r2, r1, #21
 8001be0:	e6c6      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001be2:	9701      	str	r7, [sp, #4]
 8001be4:	e6b8      	b.n	8001958 <__aeabi_dmul+0xc8>
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <__aeabi_dmul+0x398>)
 8001be8:	2003      	movs	r0, #3
 8001bea:	4694      	mov	ip, r2
 8001bec:	4463      	add	r3, ip
 8001bee:	464a      	mov	r2, r9
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	e68a      	b.n	8001912 <__aeabi_dmul+0x82>
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	2301      	movs	r3, #1
 8001c00:	4319      	orrs	r1, r3
 8001c02:	4689      	mov	r9, r1
 8001c04:	2600      	movs	r6, #0
 8001c06:	2001      	movs	r0, #1
 8001c08:	e683      	b.n	8001912 <__aeabi_dmul+0x82>
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2303      	movs	r3, #3
 8001c10:	0005      	movs	r5, r0
 8001c12:	4691      	mov	r9, r2
 8001c14:	469b      	mov	fp, r3
 8001c16:	e65e      	b.n	80018d6 <__aeabi_dmul+0x46>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	4699      	mov	r9, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	2400      	movs	r4, #0
 8001c24:	469b      	mov	fp, r3
 8001c26:	e656      	b.n	80018d6 <__aeabi_dmul+0x46>
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	fffffc01 	.word	0xfffffc01
 8001c30:	080182e0 	.word	0x080182e0
 8001c34:	fffffc0d 	.word	0xfffffc0d
 8001c38:	000003ff 	.word	0x000003ff
 8001c3c:	feffffff 	.word	0xfeffffff
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	2300      	movs	r3, #0
 8001c46:	2480      	movs	r4, #128	; 0x80
 8001c48:	2500      	movs	r5, #0
 8001c4a:	4a44      	ldr	r2, [pc, #272]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	0324      	lsls	r4, r4, #12
 8001c50:	e68e      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001c52:	2001      	movs	r0, #1
 8001c54:	1a40      	subs	r0, r0, r1
 8001c56:	2838      	cmp	r0, #56	; 0x38
 8001c58:	dd00      	ble.n	8001c5c <__aeabi_dmul+0x3cc>
 8001c5a:	e686      	b.n	800196a <__aeabi_dmul+0xda>
 8001c5c:	281f      	cmp	r0, #31
 8001c5e:	dd5b      	ble.n	8001d18 <__aeabi_dmul+0x488>
 8001c60:	221f      	movs	r2, #31
 8001c62:	0023      	movs	r3, r4
 8001c64:	4252      	negs	r2, r2
 8001c66:	1a51      	subs	r1, r2, r1
 8001c68:	40cb      	lsrs	r3, r1
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	2820      	cmp	r0, #32
 8001c6e:	d003      	beq.n	8001c78 <__aeabi_dmul+0x3e8>
 8001c70:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <__aeabi_dmul+0x4d0>)
 8001c72:	4462      	add	r2, ip
 8001c74:	4094      	lsls	r4, r2
 8001c76:	4325      	orrs	r5, r4
 8001c78:	1e6a      	subs	r2, r5, #1
 8001c7a:	4195      	sbcs	r5, r2
 8001c7c:	002a      	movs	r2, r5
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	2107      	movs	r1, #7
 8001c82:	000d      	movs	r5, r1
 8001c84:	2400      	movs	r4, #0
 8001c86:	4015      	ands	r5, r2
 8001c88:	4211      	tst	r1, r2
 8001c8a:	d05b      	beq.n	8001d44 <__aeabi_dmul+0x4b4>
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	2400      	movs	r4, #0
 8001c90:	4011      	ands	r1, r2
 8001c92:	2904      	cmp	r1, #4
 8001c94:	d053      	beq.n	8001d3e <__aeabi_dmul+0x4ae>
 8001c96:	1d11      	adds	r1, r2, #4
 8001c98:	4291      	cmp	r1, r2
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	18a4      	adds	r4, r4, r2
 8001ca0:	000a      	movs	r2, r1
 8001ca2:	0223      	lsls	r3, r4, #8
 8001ca4:	d54b      	bpl.n	8001d3e <__aeabi_dmul+0x4ae>
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2400      	movs	r4, #0
 8001caa:	2500      	movs	r5, #0
 8001cac:	e660      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	031b      	lsls	r3, r3, #12
 8001cb2:	421c      	tst	r4, r3
 8001cb4:	d009      	beq.n	8001cca <__aeabi_dmul+0x43a>
 8001cb6:	421e      	tst	r6, r3
 8001cb8:	d107      	bne.n	8001cca <__aeabi_dmul+0x43a>
 8001cba:	4333      	orrs	r3, r6
 8001cbc:	031c      	lsls	r4, r3, #12
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	0015      	movs	r5, r2
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	e652      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	0312      	lsls	r2, r2, #12
 8001cce:	4314      	orrs	r4, r2
 8001cd0:	0324      	lsls	r4, r4, #12
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	9701      	str	r7, [sp, #4]
 8001cd8:	e64a      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001cda:	f000 fd51 	bl	8002780 <__clzsi2>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	3215      	adds	r2, #21
 8001ce4:	3020      	adds	r0, #32
 8001ce6:	2a1c      	cmp	r2, #28
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_dmul+0x45c>
 8001cea:	e684      	b.n	80019f6 <__aeabi_dmul+0x166>
 8001cec:	4656      	mov	r6, sl
 8001cee:	3b08      	subs	r3, #8
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	409e      	lsls	r6, r3
 8001cf4:	e689      	b.n	8001a0a <__aeabi_dmul+0x17a>
 8001cf6:	f000 fd43 	bl	8002780 <__clzsi2>
 8001cfa:	0001      	movs	r1, r0
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	3115      	adds	r1, #21
 8001d00:	3220      	adds	r2, #32
 8001d02:	291c      	cmp	r1, #28
 8001d04:	dc00      	bgt.n	8001d08 <__aeabi_dmul+0x478>
 8001d06:	e64e      	b.n	80019a6 <__aeabi_dmul+0x116>
 8001d08:	0034      	movs	r4, r6
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4084      	lsls	r4, r0
 8001d10:	e653      	b.n	80019ba <__aeabi_dmul+0x12a>
 8001d12:	9b00      	ldr	r3, [sp, #0]
 8001d14:	469c      	mov	ip, r3
 8001d16:	e741      	b.n	8001b9c <__aeabi_dmul+0x30c>
 8001d18:	4912      	ldr	r1, [pc, #72]	; (8001d64 <__aeabi_dmul+0x4d4>)
 8001d1a:	0022      	movs	r2, r4
 8001d1c:	4461      	add	r1, ip
 8001d1e:	002e      	movs	r6, r5
 8001d20:	408d      	lsls	r5, r1
 8001d22:	408a      	lsls	r2, r1
 8001d24:	40c6      	lsrs	r6, r0
 8001d26:	1e69      	subs	r1, r5, #1
 8001d28:	418d      	sbcs	r5, r1
 8001d2a:	4332      	orrs	r2, r6
 8001d2c:	432a      	orrs	r2, r5
 8001d2e:	40c4      	lsrs	r4, r0
 8001d30:	0753      	lsls	r3, r2, #29
 8001d32:	d0b6      	beq.n	8001ca2 <__aeabi_dmul+0x412>
 8001d34:	210f      	movs	r1, #15
 8001d36:	4011      	ands	r1, r2
 8001d38:	2904      	cmp	r1, #4
 8001d3a:	d1ac      	bne.n	8001c96 <__aeabi_dmul+0x406>
 8001d3c:	e7b1      	b.n	8001ca2 <__aeabi_dmul+0x412>
 8001d3e:	0765      	lsls	r5, r4, #29
 8001d40:	0264      	lsls	r4, r4, #9
 8001d42:	0b24      	lsrs	r4, r4, #12
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	4315      	orrs	r5, r2
 8001d48:	2200      	movs	r2, #0
 8001d4a:	e611      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a01      	ldr	r2, [pc, #4]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e60a      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	0000043e 	.word	0x0000043e
 8001d64:	0000041e 	.word	0x0000041e

08001d68 <__aeabi_dsub>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	4657      	mov	r7, sl
 8001d6c:	464e      	mov	r6, r9
 8001d6e:	4645      	mov	r5, r8
 8001d70:	46de      	mov	lr, fp
 8001d72:	0004      	movs	r4, r0
 8001d74:	b5e0      	push	{r5, r6, r7, lr}
 8001d76:	001f      	movs	r7, r3
 8001d78:	0010      	movs	r0, r2
 8001d7a:	030b      	lsls	r3, r1, #12
 8001d7c:	0f62      	lsrs	r2, r4, #29
 8001d7e:	004e      	lsls	r6, r1, #1
 8001d80:	0fcd      	lsrs	r5, r1, #31
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	0339      	lsls	r1, r7, #12
 8001d86:	4313      	orrs	r3, r2
 8001d88:	0a49      	lsrs	r1, r1, #9
 8001d8a:	00e2      	lsls	r2, r4, #3
 8001d8c:	0f44      	lsrs	r4, r0, #29
 8001d8e:	4321      	orrs	r1, r4
 8001d90:	4cc2      	ldr	r4, [pc, #776]	; (800209c <__aeabi_dsub+0x334>)
 8001d92:	4691      	mov	r9, r2
 8001d94:	4692      	mov	sl, r2
 8001d96:	00c0      	lsls	r0, r0, #3
 8001d98:	007a      	lsls	r2, r7, #1
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	0d76      	lsrs	r6, r6, #21
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fff      	lsrs	r7, r7, #31
 8001da2:	42a2      	cmp	r2, r4
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x40>
 8001da6:	e0b4      	b.n	8001f12 <__aeabi_dsub+0x1aa>
 8001da8:	2401      	movs	r4, #1
 8001daa:	4067      	eors	r7, r4
 8001dac:	46bb      	mov	fp, r7
 8001dae:	42bd      	cmp	r5, r7
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4c>
 8001db2:	e088      	b.n	8001ec6 <__aeabi_dsub+0x15e>
 8001db4:	1ab4      	subs	r4, r6, r2
 8001db6:	46a4      	mov	ip, r4
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	dc00      	bgt.n	8001dbe <__aeabi_dsub+0x56>
 8001dbc:	e0b2      	b.n	8001f24 <__aeabi_dsub+0x1bc>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x5c>
 8001dc2:	e0c5      	b.n	8001f50 <__aeabi_dsub+0x1e8>
 8001dc4:	4ab5      	ldr	r2, [pc, #724]	; (800209c <__aeabi_dsub+0x334>)
 8001dc6:	4296      	cmp	r6, r2
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x64>
 8001dca:	e28b      	b.n	80022e4 <__aeabi_dsub+0x57c>
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0412      	lsls	r2, r2, #16
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	2a38      	cmp	r2, #56	; 0x38
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0x72>
 8001dd8:	e1a1      	b.n	800211e <__aeabi_dsub+0x3b6>
 8001dda:	2a1f      	cmp	r2, #31
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dsub+0x78>
 8001dde:	e216      	b.n	800220e <__aeabi_dsub+0x4a6>
 8001de0:	2720      	movs	r7, #32
 8001de2:	000c      	movs	r4, r1
 8001de4:	1abf      	subs	r7, r7, r2
 8001de6:	40bc      	lsls	r4, r7
 8001de8:	0002      	movs	r2, r0
 8001dea:	46a0      	mov	r8, r4
 8001dec:	4664      	mov	r4, ip
 8001dee:	40b8      	lsls	r0, r7
 8001df0:	40e2      	lsrs	r2, r4
 8001df2:	4644      	mov	r4, r8
 8001df4:	4314      	orrs	r4, r2
 8001df6:	0002      	movs	r2, r0
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	4660      	mov	r0, ip
 8001dfe:	40c1      	lsrs	r1, r0
 8001e00:	4322      	orrs	r2, r4
 8001e02:	1a5b      	subs	r3, r3, r1
 8001e04:	4649      	mov	r1, r9
 8001e06:	1a8c      	subs	r4, r1, r2
 8001e08:	45a1      	cmp	r9, r4
 8001e0a:	4192      	sbcs	r2, r2
 8001e0c:	4252      	negs	r2, r2
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	4698      	mov	r8, r3
 8001e12:	4643      	mov	r3, r8
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d400      	bmi.n	8001e1a <__aeabi_dsub+0xb2>
 8001e18:	e117      	b.n	800204a <__aeabi_dsub+0x2e2>
 8001e1a:	4643      	mov	r3, r8
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	0a5b      	lsrs	r3, r3, #9
 8001e20:	4698      	mov	r8, r3
 8001e22:	4643      	mov	r3, r8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0xc2>
 8001e28:	e16c      	b.n	8002104 <__aeabi_dsub+0x39c>
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	f000 fca8 	bl	8002780 <__clzsi2>
 8001e30:	0002      	movs	r2, r0
 8001e32:	3a08      	subs	r2, #8
 8001e34:	2120      	movs	r1, #32
 8001e36:	0020      	movs	r0, r4
 8001e38:	4643      	mov	r3, r8
 8001e3a:	1a89      	subs	r1, r1, r2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	40c8      	lsrs	r0, r1
 8001e40:	4094      	lsls	r4, r2
 8001e42:	4303      	orrs	r3, r0
 8001e44:	4296      	cmp	r6, r2
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0xe2>
 8001e48:	e157      	b.n	80020fa <__aeabi_dsub+0x392>
 8001e4a:	1b96      	subs	r6, r2, r6
 8001e4c:	1c71      	adds	r1, r6, #1
 8001e4e:	291f      	cmp	r1, #31
 8001e50:	dd00      	ble.n	8001e54 <__aeabi_dsub+0xec>
 8001e52:	e1cb      	b.n	80021ec <__aeabi_dsub+0x484>
 8001e54:	2220      	movs	r2, #32
 8001e56:	0018      	movs	r0, r3
 8001e58:	0026      	movs	r6, r4
 8001e5a:	1a52      	subs	r2, r2, r1
 8001e5c:	4094      	lsls	r4, r2
 8001e5e:	4090      	lsls	r0, r2
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	40cb      	lsrs	r3, r1
 8001e64:	1e62      	subs	r2, r4, #1
 8001e66:	4194      	sbcs	r4, r2
 8001e68:	4330      	orrs	r0, r6
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	2600      	movs	r6, #0
 8001e6e:	4304      	orrs	r4, r0
 8001e70:	0763      	lsls	r3, r4, #29
 8001e72:	d009      	beq.n	8001e88 <__aeabi_dsub+0x120>
 8001e74:	230f      	movs	r3, #15
 8001e76:	4023      	ands	r3, r4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d005      	beq.n	8001e88 <__aeabi_dsub+0x120>
 8001e7c:	1d23      	adds	r3, r4, #4
 8001e7e:	42a3      	cmp	r3, r4
 8001e80:	41a4      	sbcs	r4, r4
 8001e82:	4264      	negs	r4, r4
 8001e84:	44a0      	add	r8, r4
 8001e86:	001c      	movs	r4, r3
 8001e88:	4643      	mov	r3, r8
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	d400      	bmi.n	8001e90 <__aeabi_dsub+0x128>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x2e8>
 8001e90:	4b82      	ldr	r3, [pc, #520]	; (800209c <__aeabi_dsub+0x334>)
 8001e92:	3601      	adds	r6, #1
 8001e94:	429e      	cmp	r6, r3
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x132>
 8001e98:	e0fb      	b.n	8002092 <__aeabi_dsub+0x32a>
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <__aeabi_dsub+0x338>)
 8001e9e:	08e4      	lsrs	r4, r4, #3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	0571      	lsls	r1, r6, #21
 8001ea6:	0752      	lsls	r2, r2, #29
 8001ea8:	025b      	lsls	r3, r3, #9
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	0b1b      	lsrs	r3, r3, #12
 8001eae:	0d49      	lsrs	r1, r1, #21
 8001eb0:	0509      	lsls	r1, r1, #20
 8001eb2:	07ed      	lsls	r5, r5, #31
 8001eb4:	4319      	orrs	r1, r3
 8001eb6:	4329      	orrs	r1, r5
 8001eb8:	0010      	movs	r0, r2
 8001eba:	bcf0      	pop	{r4, r5, r6, r7}
 8001ebc:	46bb      	mov	fp, r7
 8001ebe:	46b2      	mov	sl, r6
 8001ec0:	46a9      	mov	r9, r5
 8001ec2:	46a0      	mov	r8, r4
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec6:	1ab4      	subs	r4, r6, r2
 8001ec8:	46a4      	mov	ip, r4
 8001eca:	2c00      	cmp	r4, #0
 8001ecc:	dd58      	ble.n	8001f80 <__aeabi_dsub+0x218>
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x16c>
 8001ed2:	e09e      	b.n	8002012 <__aeabi_dsub+0x2aa>
 8001ed4:	4a71      	ldr	r2, [pc, #452]	; (800209c <__aeabi_dsub+0x334>)
 8001ed6:	4296      	cmp	r6, r2
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x174>
 8001eda:	e13b      	b.n	8002154 <__aeabi_dsub+0x3ec>
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	0412      	lsls	r2, r2, #16
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	2a38      	cmp	r2, #56	; 0x38
 8001ee6:	dd00      	ble.n	8001eea <__aeabi_dsub+0x182>
 8001ee8:	e0c1      	b.n	800206e <__aeabi_dsub+0x306>
 8001eea:	2a1f      	cmp	r2, #31
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_dsub+0x188>
 8001eee:	e1bb      	b.n	8002268 <__aeabi_dsub+0x500>
 8001ef0:	000c      	movs	r4, r1
 8001ef2:	3a20      	subs	r2, #32
 8001ef4:	40d4      	lsrs	r4, r2
 8001ef6:	0022      	movs	r2, r4
 8001ef8:	4664      	mov	r4, ip
 8001efa:	2c20      	cmp	r4, #32
 8001efc:	d004      	beq.n	8001f08 <__aeabi_dsub+0x1a0>
 8001efe:	2740      	movs	r7, #64	; 0x40
 8001f00:	1b3f      	subs	r7, r7, r4
 8001f02:	40b9      	lsls	r1, r7
 8001f04:	4308      	orrs	r0, r1
 8001f06:	4680      	mov	r8, r0
 8001f08:	4644      	mov	r4, r8
 8001f0a:	1e61      	subs	r1, r4, #1
 8001f0c:	418c      	sbcs	r4, r1
 8001f0e:	4314      	orrs	r4, r2
 8001f10:	e0b1      	b.n	8002076 <__aeabi_dsub+0x30e>
 8001f12:	000c      	movs	r4, r1
 8001f14:	4304      	orrs	r4, r0
 8001f16:	d02a      	beq.n	8001f6e <__aeabi_dsub+0x206>
 8001f18:	46bb      	mov	fp, r7
 8001f1a:	42bd      	cmp	r5, r7
 8001f1c:	d02d      	beq.n	8001f7a <__aeabi_dsub+0x212>
 8001f1e:	4c61      	ldr	r4, [pc, #388]	; (80020a4 <__aeabi_dsub+0x33c>)
 8001f20:	46a4      	mov	ip, r4
 8001f22:	44b4      	add	ip, r6
 8001f24:	4664      	mov	r4, ip
 8001f26:	2c00      	cmp	r4, #0
 8001f28:	d05c      	beq.n	8001fe4 <__aeabi_dsub+0x27c>
 8001f2a:	1b94      	subs	r4, r2, r6
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	2e00      	cmp	r6, #0
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x1cc>
 8001f32:	e115      	b.n	8002160 <__aeabi_dsub+0x3f8>
 8001f34:	464d      	mov	r5, r9
 8001f36:	431d      	orrs	r5, r3
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x1d4>
 8001f3a:	e1c3      	b.n	80022c4 <__aeabi_dsub+0x55c>
 8001f3c:	1e65      	subs	r5, r4, #1
 8001f3e:	2c01      	cmp	r4, #1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x1dc>
 8001f42:	e20c      	b.n	800235e <__aeabi_dsub+0x5f6>
 8001f44:	4e55      	ldr	r6, [pc, #340]	; (800209c <__aeabi_dsub+0x334>)
 8001f46:	42b4      	cmp	r4, r6
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x1e4>
 8001f4a:	e1f8      	b.n	800233e <__aeabi_dsub+0x5d6>
 8001f4c:	46ac      	mov	ip, r5
 8001f4e:	e10e      	b.n	800216e <__aeabi_dsub+0x406>
 8001f50:	000a      	movs	r2, r1
 8001f52:	4302      	orrs	r2, r0
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x1f0>
 8001f56:	e136      	b.n	80021c6 <__aeabi_dsub+0x45e>
 8001f58:	0022      	movs	r2, r4
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	2c01      	cmp	r4, #1
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x1fa>
 8001f60:	e1c6      	b.n	80022f0 <__aeabi_dsub+0x588>
 8001f62:	4c4e      	ldr	r4, [pc, #312]	; (800209c <__aeabi_dsub+0x334>)
 8001f64:	45a4      	cmp	ip, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x202>
 8001f68:	e0f4      	b.n	8002154 <__aeabi_dsub+0x3ec>
 8001f6a:	4694      	mov	ip, r2
 8001f6c:	e731      	b.n	8001dd2 <__aeabi_dsub+0x6a>
 8001f6e:	2401      	movs	r4, #1
 8001f70:	4067      	eors	r7, r4
 8001f72:	46bb      	mov	fp, r7
 8001f74:	42bd      	cmp	r5, r7
 8001f76:	d000      	beq.n	8001f7a <__aeabi_dsub+0x212>
 8001f78:	e71c      	b.n	8001db4 <__aeabi_dsub+0x4c>
 8001f7a:	4c4a      	ldr	r4, [pc, #296]	; (80020a4 <__aeabi_dsub+0x33c>)
 8001f7c:	46a4      	mov	ip, r4
 8001f7e:	44b4      	add	ip, r6
 8001f80:	4664      	mov	r4, ip
 8001f82:	2c00      	cmp	r4, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x220>
 8001f86:	e0cf      	b.n	8002128 <__aeabi_dsub+0x3c0>
 8001f88:	1b94      	subs	r4, r2, r6
 8001f8a:	46a4      	mov	ip, r4
 8001f8c:	2e00      	cmp	r6, #0
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x22a>
 8001f90:	e15c      	b.n	800224c <__aeabi_dsub+0x4e4>
 8001f92:	4e42      	ldr	r6, [pc, #264]	; (800209c <__aeabi_dsub+0x334>)
 8001f94:	42b2      	cmp	r2, r6
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x232>
 8001f98:	e1ec      	b.n	8002374 <__aeabi_dsub+0x60c>
 8001f9a:	2680      	movs	r6, #128	; 0x80
 8001f9c:	0436      	lsls	r6, r6, #16
 8001f9e:	4333      	orrs	r3, r6
 8001fa0:	4664      	mov	r4, ip
 8001fa2:	2c38      	cmp	r4, #56	; 0x38
 8001fa4:	dd00      	ble.n	8001fa8 <__aeabi_dsub+0x240>
 8001fa6:	e1b3      	b.n	8002310 <__aeabi_dsub+0x5a8>
 8001fa8:	2c1f      	cmp	r4, #31
 8001faa:	dd00      	ble.n	8001fae <__aeabi_dsub+0x246>
 8001fac:	e238      	b.n	8002420 <__aeabi_dsub+0x6b8>
 8001fae:	2620      	movs	r6, #32
 8001fb0:	1b36      	subs	r6, r6, r4
 8001fb2:	001c      	movs	r4, r3
 8001fb4:	40b4      	lsls	r4, r6
 8001fb6:	464f      	mov	r7, r9
 8001fb8:	46a0      	mov	r8, r4
 8001fba:	4664      	mov	r4, ip
 8001fbc:	40e7      	lsrs	r7, r4
 8001fbe:	4644      	mov	r4, r8
 8001fc0:	433c      	orrs	r4, r7
 8001fc2:	464f      	mov	r7, r9
 8001fc4:	40b7      	lsls	r7, r6
 8001fc6:	003e      	movs	r6, r7
 8001fc8:	1e77      	subs	r7, r6, #1
 8001fca:	41be      	sbcs	r6, r7
 8001fcc:	4334      	orrs	r4, r6
 8001fce:	4666      	mov	r6, ip
 8001fd0:	40f3      	lsrs	r3, r6
 8001fd2:	18c9      	adds	r1, r1, r3
 8001fd4:	1824      	adds	r4, r4, r0
 8001fd6:	4284      	cmp	r4, r0
 8001fd8:	419b      	sbcs	r3, r3
 8001fda:	425b      	negs	r3, r3
 8001fdc:	4698      	mov	r8, r3
 8001fde:	0016      	movs	r6, r2
 8001fe0:	4488      	add	r8, r1
 8001fe2:	e04e      	b.n	8002082 <__aeabi_dsub+0x31a>
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <__aeabi_dsub+0x340>)
 8001fe6:	1c74      	adds	r4, r6, #1
 8001fe8:	4214      	tst	r4, r2
 8001fea:	d000      	beq.n	8001fee <__aeabi_dsub+0x286>
 8001fec:	e0d6      	b.n	800219c <__aeabi_dsub+0x434>
 8001fee:	464a      	mov	r2, r9
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	2e00      	cmp	r6, #0
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dsub+0x290>
 8001ff6:	e15b      	b.n	80022b0 <__aeabi_dsub+0x548>
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x296>
 8001ffc:	e1a5      	b.n	800234a <__aeabi_dsub+0x5e2>
 8001ffe:	000a      	movs	r2, r1
 8002000:	4302      	orrs	r2, r0
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x29e>
 8002004:	e1bb      	b.n	800237e <__aeabi_dsub+0x616>
 8002006:	464a      	mov	r2, r9
 8002008:	0759      	lsls	r1, r3, #29
 800200a:	08d2      	lsrs	r2, r2, #3
 800200c:	430a      	orrs	r2, r1
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	e027      	b.n	8002062 <__aeabi_dsub+0x2fa>
 8002012:	000a      	movs	r2, r1
 8002014:	4302      	orrs	r2, r0
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x2b2>
 8002018:	e174      	b.n	8002304 <__aeabi_dsub+0x59c>
 800201a:	0022      	movs	r2, r4
 800201c:	3a01      	subs	r2, #1
 800201e:	2c01      	cmp	r4, #1
 8002020:	d005      	beq.n	800202e <__aeabi_dsub+0x2c6>
 8002022:	4c1e      	ldr	r4, [pc, #120]	; (800209c <__aeabi_dsub+0x334>)
 8002024:	45a4      	cmp	ip, r4
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x2c2>
 8002028:	e094      	b.n	8002154 <__aeabi_dsub+0x3ec>
 800202a:	4694      	mov	ip, r2
 800202c:	e759      	b.n	8001ee2 <__aeabi_dsub+0x17a>
 800202e:	4448      	add	r0, r9
 8002030:	4548      	cmp	r0, r9
 8002032:	4192      	sbcs	r2, r2
 8002034:	185b      	adds	r3, r3, r1
 8002036:	4698      	mov	r8, r3
 8002038:	0004      	movs	r4, r0
 800203a:	4252      	negs	r2, r2
 800203c:	4490      	add	r8, r2
 800203e:	4643      	mov	r3, r8
 8002040:	2602      	movs	r6, #2
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d500      	bpl.n	8002048 <__aeabi_dsub+0x2e0>
 8002046:	e0c4      	b.n	80021d2 <__aeabi_dsub+0x46a>
 8002048:	3e01      	subs	r6, #1
 800204a:	0763      	lsls	r3, r4, #29
 800204c:	d000      	beq.n	8002050 <__aeabi_dsub+0x2e8>
 800204e:	e711      	b.n	8001e74 <__aeabi_dsub+0x10c>
 8002050:	4643      	mov	r3, r8
 8002052:	46b4      	mov	ip, r6
 8002054:	0759      	lsls	r1, r3, #29
 8002056:	08e2      	lsrs	r2, r4, #3
 8002058:	430a      	orrs	r2, r1
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	490f      	ldr	r1, [pc, #60]	; (800209c <__aeabi_dsub+0x334>)
 800205e:	458c      	cmp	ip, r1
 8002060:	d040      	beq.n	80020e4 <__aeabi_dsub+0x37c>
 8002062:	4661      	mov	r1, ip
 8002064:	031b      	lsls	r3, r3, #12
 8002066:	0549      	lsls	r1, r1, #21
 8002068:	0b1b      	lsrs	r3, r3, #12
 800206a:	0d49      	lsrs	r1, r1, #21
 800206c:	e720      	b.n	8001eb0 <__aeabi_dsub+0x148>
 800206e:	4301      	orrs	r1, r0
 8002070:	000c      	movs	r4, r1
 8002072:	1e61      	subs	r1, r4, #1
 8002074:	418c      	sbcs	r4, r1
 8002076:	444c      	add	r4, r9
 8002078:	454c      	cmp	r4, r9
 800207a:	4192      	sbcs	r2, r2
 800207c:	4252      	negs	r2, r2
 800207e:	4690      	mov	r8, r2
 8002080:	4498      	add	r8, r3
 8002082:	4643      	mov	r3, r8
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	d5e0      	bpl.n	800204a <__aeabi_dsub+0x2e2>
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__aeabi_dsub+0x334>)
 800208a:	3601      	adds	r6, #1
 800208c:	429e      	cmp	r6, r3
 800208e:	d000      	beq.n	8002092 <__aeabi_dsub+0x32a>
 8002090:	e09f      	b.n	80021d2 <__aeabi_dsub+0x46a>
 8002092:	0031      	movs	r1, r6
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	e70a      	b.n	8001eb0 <__aeabi_dsub+0x148>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	ff7fffff 	.word	0xff7fffff
 80020a4:	fffff801 	.word	0xfffff801
 80020a8:	000007fe 	.word	0x000007fe
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x34a>
 80020b0:	e160      	b.n	8002374 <__aeabi_dsub+0x60c>
 80020b2:	000a      	movs	r2, r1
 80020b4:	4302      	orrs	r2, r0
 80020b6:	d04d      	beq.n	8002154 <__aeabi_dsub+0x3ec>
 80020b8:	464a      	mov	r2, r9
 80020ba:	075c      	lsls	r4, r3, #29
 80020bc:	08d2      	lsrs	r2, r2, #3
 80020be:	4322      	orrs	r2, r4
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	08db      	lsrs	r3, r3, #3
 80020c4:	0324      	lsls	r4, r4, #12
 80020c6:	4223      	tst	r3, r4
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x372>
 80020ca:	08ce      	lsrs	r6, r1, #3
 80020cc:	4226      	tst	r6, r4
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x372>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0033      	movs	r3, r6
 80020d4:	08c2      	lsrs	r2, r0, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430a      	orrs	r2, r1
 80020da:	0f51      	lsrs	r1, r2, #29
 80020dc:	00d2      	lsls	r2, r2, #3
 80020de:	08d2      	lsrs	r2, r2, #3
 80020e0:	0749      	lsls	r1, r1, #29
 80020e2:	430a      	orrs	r2, r1
 80020e4:	0011      	movs	r1, r2
 80020e6:	4319      	orrs	r1, r3
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x384>
 80020ea:	e1c8      	b.n	800247e <__aeabi_dsub+0x716>
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0309      	lsls	r1, r1, #12
 80020f0:	430b      	orrs	r3, r1
 80020f2:	031b      	lsls	r3, r3, #12
 80020f4:	49d5      	ldr	r1, [pc, #852]	; (800244c <__aeabi_dsub+0x6e4>)
 80020f6:	0b1b      	lsrs	r3, r3, #12
 80020f8:	e6da      	b.n	8001eb0 <__aeabi_dsub+0x148>
 80020fa:	49d5      	ldr	r1, [pc, #852]	; (8002450 <__aeabi_dsub+0x6e8>)
 80020fc:	1ab6      	subs	r6, r6, r2
 80020fe:	400b      	ands	r3, r1
 8002100:	4698      	mov	r8, r3
 8002102:	e6b5      	b.n	8001e70 <__aeabi_dsub+0x108>
 8002104:	0020      	movs	r0, r4
 8002106:	f000 fb3b 	bl	8002780 <__clzsi2>
 800210a:	0002      	movs	r2, r0
 800210c:	3218      	adds	r2, #24
 800210e:	2a1f      	cmp	r2, #31
 8002110:	dc00      	bgt.n	8002114 <__aeabi_dsub+0x3ac>
 8002112:	e68f      	b.n	8001e34 <__aeabi_dsub+0xcc>
 8002114:	0023      	movs	r3, r4
 8002116:	3808      	subs	r0, #8
 8002118:	4083      	lsls	r3, r0
 800211a:	2400      	movs	r4, #0
 800211c:	e692      	b.n	8001e44 <__aeabi_dsub+0xdc>
 800211e:	4308      	orrs	r0, r1
 8002120:	0002      	movs	r2, r0
 8002122:	1e50      	subs	r0, r2, #1
 8002124:	4182      	sbcs	r2, r0
 8002126:	e66d      	b.n	8001e04 <__aeabi_dsub+0x9c>
 8002128:	4cca      	ldr	r4, [pc, #808]	; (8002454 <__aeabi_dsub+0x6ec>)
 800212a:	1c72      	adds	r2, r6, #1
 800212c:	4222      	tst	r2, r4
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x3ca>
 8002130:	e0ad      	b.n	800228e <__aeabi_dsub+0x526>
 8002132:	464a      	mov	r2, r9
 8002134:	431a      	orrs	r2, r3
 8002136:	2e00      	cmp	r6, #0
 8002138:	d1b8      	bne.n	80020ac <__aeabi_dsub+0x344>
 800213a:	2a00      	cmp	r2, #0
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x3d8>
 800213e:	e158      	b.n	80023f2 <__aeabi_dsub+0x68a>
 8002140:	000a      	movs	r2, r1
 8002142:	4302      	orrs	r2, r0
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x3e0>
 8002146:	e159      	b.n	80023fc <__aeabi_dsub+0x694>
 8002148:	464a      	mov	r2, r9
 800214a:	0759      	lsls	r1, r3, #29
 800214c:	08d2      	lsrs	r2, r2, #3
 800214e:	430a      	orrs	r2, r1
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	e786      	b.n	8002062 <__aeabi_dsub+0x2fa>
 8002154:	464a      	mov	r2, r9
 8002156:	0759      	lsls	r1, r3, #29
 8002158:	08d2      	lsrs	r2, r2, #3
 800215a:	430a      	orrs	r2, r1
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	e7c1      	b.n	80020e4 <__aeabi_dsub+0x37c>
 8002160:	4dba      	ldr	r5, [pc, #744]	; (800244c <__aeabi_dsub+0x6e4>)
 8002162:	42aa      	cmp	r2, r5
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x400>
 8002166:	e11e      	b.n	80023a6 <__aeabi_dsub+0x63e>
 8002168:	2580      	movs	r5, #128	; 0x80
 800216a:	042d      	lsls	r5, r5, #16
 800216c:	432b      	orrs	r3, r5
 800216e:	4664      	mov	r4, ip
 8002170:	2c38      	cmp	r4, #56	; 0x38
 8002172:	dc5d      	bgt.n	8002230 <__aeabi_dsub+0x4c8>
 8002174:	2c1f      	cmp	r4, #31
 8002176:	dd00      	ble.n	800217a <__aeabi_dsub+0x412>
 8002178:	e0d0      	b.n	800231c <__aeabi_dsub+0x5b4>
 800217a:	2520      	movs	r5, #32
 800217c:	4667      	mov	r7, ip
 800217e:	1b2d      	subs	r5, r5, r4
 8002180:	464e      	mov	r6, r9
 8002182:	001c      	movs	r4, r3
 8002184:	40fe      	lsrs	r6, r7
 8002186:	40ac      	lsls	r4, r5
 8002188:	4334      	orrs	r4, r6
 800218a:	464e      	mov	r6, r9
 800218c:	40ae      	lsls	r6, r5
 800218e:	0035      	movs	r5, r6
 8002190:	40fb      	lsrs	r3, r7
 8002192:	1e6e      	subs	r6, r5, #1
 8002194:	41b5      	sbcs	r5, r6
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	432c      	orrs	r4, r5
 800219a:	e04e      	b.n	800223a <__aeabi_dsub+0x4d2>
 800219c:	464a      	mov	r2, r9
 800219e:	1a14      	subs	r4, r2, r0
 80021a0:	45a1      	cmp	r9, r4
 80021a2:	4192      	sbcs	r2, r2
 80021a4:	4252      	negs	r2, r2
 80021a6:	4690      	mov	r8, r2
 80021a8:	1a5f      	subs	r7, r3, r1
 80021aa:	003a      	movs	r2, r7
 80021ac:	4647      	mov	r7, r8
 80021ae:	1bd2      	subs	r2, r2, r7
 80021b0:	4690      	mov	r8, r2
 80021b2:	0212      	lsls	r2, r2, #8
 80021b4:	d500      	bpl.n	80021b8 <__aeabi_dsub+0x450>
 80021b6:	e08b      	b.n	80022d0 <__aeabi_dsub+0x568>
 80021b8:	4642      	mov	r2, r8
 80021ba:	4322      	orrs	r2, r4
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dsub+0x458>
 80021be:	e630      	b.n	8001e22 <__aeabi_dsub+0xba>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2500      	movs	r5, #0
 80021c4:	e74d      	b.n	8002062 <__aeabi_dsub+0x2fa>
 80021c6:	464a      	mov	r2, r9
 80021c8:	0759      	lsls	r1, r3, #29
 80021ca:	08d2      	lsrs	r2, r2, #3
 80021cc:	430a      	orrs	r2, r1
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	e744      	b.n	800205c <__aeabi_dsub+0x2f4>
 80021d2:	4642      	mov	r2, r8
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <__aeabi_dsub+0x6e8>)
 80021d6:	0861      	lsrs	r1, r4, #1
 80021d8:	401a      	ands	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	2201      	movs	r2, #1
 80021de:	4014      	ands	r4, r2
 80021e0:	430c      	orrs	r4, r1
 80021e2:	07da      	lsls	r2, r3, #31
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	4698      	mov	r8, r3
 80021e8:	4314      	orrs	r4, r2
 80021ea:	e641      	b.n	8001e70 <__aeabi_dsub+0x108>
 80021ec:	001a      	movs	r2, r3
 80021ee:	3e1f      	subs	r6, #31
 80021f0:	40f2      	lsrs	r2, r6
 80021f2:	0016      	movs	r6, r2
 80021f4:	2920      	cmp	r1, #32
 80021f6:	d003      	beq.n	8002200 <__aeabi_dsub+0x498>
 80021f8:	2240      	movs	r2, #64	; 0x40
 80021fa:	1a51      	subs	r1, r2, r1
 80021fc:	408b      	lsls	r3, r1
 80021fe:	431c      	orrs	r4, r3
 8002200:	1e62      	subs	r2, r4, #1
 8002202:	4194      	sbcs	r4, r2
 8002204:	2300      	movs	r3, #0
 8002206:	4334      	orrs	r4, r6
 8002208:	4698      	mov	r8, r3
 800220a:	2600      	movs	r6, #0
 800220c:	e71d      	b.n	800204a <__aeabi_dsub+0x2e2>
 800220e:	000c      	movs	r4, r1
 8002210:	3a20      	subs	r2, #32
 8002212:	40d4      	lsrs	r4, r2
 8002214:	0022      	movs	r2, r4
 8002216:	4664      	mov	r4, ip
 8002218:	2c20      	cmp	r4, #32
 800221a:	d004      	beq.n	8002226 <__aeabi_dsub+0x4be>
 800221c:	2740      	movs	r7, #64	; 0x40
 800221e:	1b3f      	subs	r7, r7, r4
 8002220:	40b9      	lsls	r1, r7
 8002222:	4308      	orrs	r0, r1
 8002224:	4680      	mov	r8, r0
 8002226:	4644      	mov	r4, r8
 8002228:	1e61      	subs	r1, r4, #1
 800222a:	418c      	sbcs	r4, r1
 800222c:	4322      	orrs	r2, r4
 800222e:	e5e9      	b.n	8001e04 <__aeabi_dsub+0x9c>
 8002230:	464c      	mov	r4, r9
 8002232:	4323      	orrs	r3, r4
 8002234:	001c      	movs	r4, r3
 8002236:	1e63      	subs	r3, r4, #1
 8002238:	419c      	sbcs	r4, r3
 800223a:	1b04      	subs	r4, r0, r4
 800223c:	42a0      	cmp	r0, r4
 800223e:	419b      	sbcs	r3, r3
 8002240:	425b      	negs	r3, r3
 8002242:	1acb      	subs	r3, r1, r3
 8002244:	4698      	mov	r8, r3
 8002246:	465d      	mov	r5, fp
 8002248:	0016      	movs	r6, r2
 800224a:	e5e2      	b.n	8001e12 <__aeabi_dsub+0xaa>
 800224c:	464e      	mov	r6, r9
 800224e:	431e      	orrs	r6, r3
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x4ec>
 8002252:	e0ae      	b.n	80023b2 <__aeabi_dsub+0x64a>
 8002254:	1e66      	subs	r6, r4, #1
 8002256:	2c01      	cmp	r4, #1
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x4f4>
 800225a:	e0fd      	b.n	8002458 <__aeabi_dsub+0x6f0>
 800225c:	4f7b      	ldr	r7, [pc, #492]	; (800244c <__aeabi_dsub+0x6e4>)
 800225e:	42bc      	cmp	r4, r7
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x4fc>
 8002262:	e107      	b.n	8002474 <__aeabi_dsub+0x70c>
 8002264:	46b4      	mov	ip, r6
 8002266:	e69b      	b.n	8001fa0 <__aeabi_dsub+0x238>
 8002268:	4664      	mov	r4, ip
 800226a:	2220      	movs	r2, #32
 800226c:	1b12      	subs	r2, r2, r4
 800226e:	000c      	movs	r4, r1
 8002270:	4094      	lsls	r4, r2
 8002272:	0007      	movs	r7, r0
 8002274:	4090      	lsls	r0, r2
 8002276:	46a0      	mov	r8, r4
 8002278:	4664      	mov	r4, ip
 800227a:	1e42      	subs	r2, r0, #1
 800227c:	4190      	sbcs	r0, r2
 800227e:	4662      	mov	r2, ip
 8002280:	40e7      	lsrs	r7, r4
 8002282:	4644      	mov	r4, r8
 8002284:	40d1      	lsrs	r1, r2
 8002286:	433c      	orrs	r4, r7
 8002288:	4304      	orrs	r4, r0
 800228a:	185b      	adds	r3, r3, r1
 800228c:	e6f3      	b.n	8002076 <__aeabi_dsub+0x30e>
 800228e:	4c6f      	ldr	r4, [pc, #444]	; (800244c <__aeabi_dsub+0x6e4>)
 8002290:	42a2      	cmp	r2, r4
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x52e>
 8002294:	e0d5      	b.n	8002442 <__aeabi_dsub+0x6da>
 8002296:	4448      	add	r0, r9
 8002298:	185b      	adds	r3, r3, r1
 800229a:	4548      	cmp	r0, r9
 800229c:	4189      	sbcs	r1, r1
 800229e:	4249      	negs	r1, r1
 80022a0:	185b      	adds	r3, r3, r1
 80022a2:	07dc      	lsls	r4, r3, #31
 80022a4:	0840      	lsrs	r0, r0, #1
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	4698      	mov	r8, r3
 80022aa:	0016      	movs	r6, r2
 80022ac:	4304      	orrs	r4, r0
 80022ae:	e6cc      	b.n	800204a <__aeabi_dsub+0x2e2>
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d000      	beq.n	80022b6 <__aeabi_dsub+0x54e>
 80022b4:	e082      	b.n	80023bc <__aeabi_dsub+0x654>
 80022b6:	000a      	movs	r2, r1
 80022b8:	4302      	orrs	r2, r0
 80022ba:	d140      	bne.n	800233e <__aeabi_dsub+0x5d6>
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	2500      	movs	r5, #0
 80022c0:	031b      	lsls	r3, r3, #12
 80022c2:	e713      	b.n	80020ec <__aeabi_dsub+0x384>
 80022c4:	074b      	lsls	r3, r1, #29
 80022c6:	08c2      	lsrs	r2, r0, #3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	465d      	mov	r5, fp
 80022cc:	08cb      	lsrs	r3, r1, #3
 80022ce:	e6c5      	b.n	800205c <__aeabi_dsub+0x2f4>
 80022d0:	464a      	mov	r2, r9
 80022d2:	1a84      	subs	r4, r0, r2
 80022d4:	42a0      	cmp	r0, r4
 80022d6:	4192      	sbcs	r2, r2
 80022d8:	1acb      	subs	r3, r1, r3
 80022da:	4252      	negs	r2, r2
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	4698      	mov	r8, r3
 80022e0:	465d      	mov	r5, fp
 80022e2:	e59e      	b.n	8001e22 <__aeabi_dsub+0xba>
 80022e4:	464a      	mov	r2, r9
 80022e6:	0759      	lsls	r1, r3, #29
 80022e8:	08d2      	lsrs	r2, r2, #3
 80022ea:	430a      	orrs	r2, r1
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	e6f9      	b.n	80020e4 <__aeabi_dsub+0x37c>
 80022f0:	464a      	mov	r2, r9
 80022f2:	1a14      	subs	r4, r2, r0
 80022f4:	45a1      	cmp	r9, r4
 80022f6:	4192      	sbcs	r2, r2
 80022f8:	1a5b      	subs	r3, r3, r1
 80022fa:	4252      	negs	r2, r2
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	4698      	mov	r8, r3
 8002300:	2601      	movs	r6, #1
 8002302:	e586      	b.n	8001e12 <__aeabi_dsub+0xaa>
 8002304:	464a      	mov	r2, r9
 8002306:	0759      	lsls	r1, r3, #29
 8002308:	08d2      	lsrs	r2, r2, #3
 800230a:	430a      	orrs	r2, r1
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	e6a5      	b.n	800205c <__aeabi_dsub+0x2f4>
 8002310:	464c      	mov	r4, r9
 8002312:	4323      	orrs	r3, r4
 8002314:	001c      	movs	r4, r3
 8002316:	1e63      	subs	r3, r4, #1
 8002318:	419c      	sbcs	r4, r3
 800231a:	e65b      	b.n	8001fd4 <__aeabi_dsub+0x26c>
 800231c:	4665      	mov	r5, ip
 800231e:	001e      	movs	r6, r3
 8002320:	3d20      	subs	r5, #32
 8002322:	40ee      	lsrs	r6, r5
 8002324:	2c20      	cmp	r4, #32
 8002326:	d005      	beq.n	8002334 <__aeabi_dsub+0x5cc>
 8002328:	2540      	movs	r5, #64	; 0x40
 800232a:	1b2d      	subs	r5, r5, r4
 800232c:	40ab      	lsls	r3, r5
 800232e:	464c      	mov	r4, r9
 8002330:	431c      	orrs	r4, r3
 8002332:	46a2      	mov	sl, r4
 8002334:	4654      	mov	r4, sl
 8002336:	1e63      	subs	r3, r4, #1
 8002338:	419c      	sbcs	r4, r3
 800233a:	4334      	orrs	r4, r6
 800233c:	e77d      	b.n	800223a <__aeabi_dsub+0x4d2>
 800233e:	074b      	lsls	r3, r1, #29
 8002340:	08c2      	lsrs	r2, r0, #3
 8002342:	431a      	orrs	r2, r3
 8002344:	465d      	mov	r5, fp
 8002346:	08cb      	lsrs	r3, r1, #3
 8002348:	e6cc      	b.n	80020e4 <__aeabi_dsub+0x37c>
 800234a:	000a      	movs	r2, r1
 800234c:	4302      	orrs	r2, r0
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x5ea>
 8002350:	e736      	b.n	80021c0 <__aeabi_dsub+0x458>
 8002352:	074b      	lsls	r3, r1, #29
 8002354:	08c2      	lsrs	r2, r0, #3
 8002356:	431a      	orrs	r2, r3
 8002358:	465d      	mov	r5, fp
 800235a:	08cb      	lsrs	r3, r1, #3
 800235c:	e681      	b.n	8002062 <__aeabi_dsub+0x2fa>
 800235e:	464a      	mov	r2, r9
 8002360:	1a84      	subs	r4, r0, r2
 8002362:	42a0      	cmp	r0, r4
 8002364:	4192      	sbcs	r2, r2
 8002366:	1acb      	subs	r3, r1, r3
 8002368:	4252      	negs	r2, r2
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	4698      	mov	r8, r3
 800236e:	465d      	mov	r5, fp
 8002370:	2601      	movs	r6, #1
 8002372:	e54e      	b.n	8001e12 <__aeabi_dsub+0xaa>
 8002374:	074b      	lsls	r3, r1, #29
 8002376:	08c2      	lsrs	r2, r0, #3
 8002378:	431a      	orrs	r2, r3
 800237a:	08cb      	lsrs	r3, r1, #3
 800237c:	e6b2      	b.n	80020e4 <__aeabi_dsub+0x37c>
 800237e:	464a      	mov	r2, r9
 8002380:	1a14      	subs	r4, r2, r0
 8002382:	45a1      	cmp	r9, r4
 8002384:	4192      	sbcs	r2, r2
 8002386:	1a5f      	subs	r7, r3, r1
 8002388:	4252      	negs	r2, r2
 800238a:	1aba      	subs	r2, r7, r2
 800238c:	4690      	mov	r8, r2
 800238e:	0212      	lsls	r2, r2, #8
 8002390:	d56b      	bpl.n	800246a <__aeabi_dsub+0x702>
 8002392:	464a      	mov	r2, r9
 8002394:	1a84      	subs	r4, r0, r2
 8002396:	42a0      	cmp	r0, r4
 8002398:	4192      	sbcs	r2, r2
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	4252      	negs	r2, r2
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	4698      	mov	r8, r3
 80023a2:	465d      	mov	r5, fp
 80023a4:	e564      	b.n	8001e70 <__aeabi_dsub+0x108>
 80023a6:	074b      	lsls	r3, r1, #29
 80023a8:	08c2      	lsrs	r2, r0, #3
 80023aa:	431a      	orrs	r2, r3
 80023ac:	465d      	mov	r5, fp
 80023ae:	08cb      	lsrs	r3, r1, #3
 80023b0:	e698      	b.n	80020e4 <__aeabi_dsub+0x37c>
 80023b2:	074b      	lsls	r3, r1, #29
 80023b4:	08c2      	lsrs	r2, r0, #3
 80023b6:	431a      	orrs	r2, r3
 80023b8:	08cb      	lsrs	r3, r1, #3
 80023ba:	e64f      	b.n	800205c <__aeabi_dsub+0x2f4>
 80023bc:	000a      	movs	r2, r1
 80023be:	4302      	orrs	r2, r0
 80023c0:	d090      	beq.n	80022e4 <__aeabi_dsub+0x57c>
 80023c2:	464a      	mov	r2, r9
 80023c4:	075c      	lsls	r4, r3, #29
 80023c6:	08d2      	lsrs	r2, r2, #3
 80023c8:	4314      	orrs	r4, r2
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	0312      	lsls	r2, r2, #12
 80023d0:	4213      	tst	r3, r2
 80023d2:	d008      	beq.n	80023e6 <__aeabi_dsub+0x67e>
 80023d4:	08ce      	lsrs	r6, r1, #3
 80023d6:	4216      	tst	r6, r2
 80023d8:	d105      	bne.n	80023e6 <__aeabi_dsub+0x67e>
 80023da:	08c0      	lsrs	r0, r0, #3
 80023dc:	0749      	lsls	r1, r1, #29
 80023de:	4308      	orrs	r0, r1
 80023e0:	0004      	movs	r4, r0
 80023e2:	465d      	mov	r5, fp
 80023e4:	0033      	movs	r3, r6
 80023e6:	0f61      	lsrs	r1, r4, #29
 80023e8:	00e2      	lsls	r2, r4, #3
 80023ea:	0749      	lsls	r1, r1, #29
 80023ec:	08d2      	lsrs	r2, r2, #3
 80023ee:	430a      	orrs	r2, r1
 80023f0:	e678      	b.n	80020e4 <__aeabi_dsub+0x37c>
 80023f2:	074b      	lsls	r3, r1, #29
 80023f4:	08c2      	lsrs	r2, r0, #3
 80023f6:	431a      	orrs	r2, r3
 80023f8:	08cb      	lsrs	r3, r1, #3
 80023fa:	e632      	b.n	8002062 <__aeabi_dsub+0x2fa>
 80023fc:	4448      	add	r0, r9
 80023fe:	185b      	adds	r3, r3, r1
 8002400:	4548      	cmp	r0, r9
 8002402:	4192      	sbcs	r2, r2
 8002404:	4698      	mov	r8, r3
 8002406:	4252      	negs	r2, r2
 8002408:	4490      	add	r8, r2
 800240a:	4643      	mov	r3, r8
 800240c:	0004      	movs	r4, r0
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	d400      	bmi.n	8002414 <__aeabi_dsub+0x6ac>
 8002412:	e61a      	b.n	800204a <__aeabi_dsub+0x2e2>
 8002414:	4642      	mov	r2, r8
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <__aeabi_dsub+0x6e8>)
 8002418:	2601      	movs	r6, #1
 800241a:	401a      	ands	r2, r3
 800241c:	4690      	mov	r8, r2
 800241e:	e614      	b.n	800204a <__aeabi_dsub+0x2e2>
 8002420:	4666      	mov	r6, ip
 8002422:	001f      	movs	r7, r3
 8002424:	3e20      	subs	r6, #32
 8002426:	40f7      	lsrs	r7, r6
 8002428:	2c20      	cmp	r4, #32
 800242a:	d005      	beq.n	8002438 <__aeabi_dsub+0x6d0>
 800242c:	2640      	movs	r6, #64	; 0x40
 800242e:	1b36      	subs	r6, r6, r4
 8002430:	40b3      	lsls	r3, r6
 8002432:	464c      	mov	r4, r9
 8002434:	431c      	orrs	r4, r3
 8002436:	46a2      	mov	sl, r4
 8002438:	4654      	mov	r4, sl
 800243a:	1e63      	subs	r3, r4, #1
 800243c:	419c      	sbcs	r4, r3
 800243e:	433c      	orrs	r4, r7
 8002440:	e5c8      	b.n	8001fd4 <__aeabi_dsub+0x26c>
 8002442:	0011      	movs	r1, r2
 8002444:	2300      	movs	r3, #0
 8002446:	2200      	movs	r2, #0
 8002448:	e532      	b.n	8001eb0 <__aeabi_dsub+0x148>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	000007ff 	.word	0x000007ff
 8002450:	ff7fffff 	.word	0xff7fffff
 8002454:	000007fe 	.word	0x000007fe
 8002458:	464a      	mov	r2, r9
 800245a:	1814      	adds	r4, r2, r0
 800245c:	4284      	cmp	r4, r0
 800245e:	4192      	sbcs	r2, r2
 8002460:	185b      	adds	r3, r3, r1
 8002462:	4698      	mov	r8, r3
 8002464:	4252      	negs	r2, r2
 8002466:	4490      	add	r8, r2
 8002468:	e5e9      	b.n	800203e <__aeabi_dsub+0x2d6>
 800246a:	4642      	mov	r2, r8
 800246c:	4322      	orrs	r2, r4
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x70a>
 8002470:	e6a6      	b.n	80021c0 <__aeabi_dsub+0x458>
 8002472:	e5ea      	b.n	800204a <__aeabi_dsub+0x2e2>
 8002474:	074b      	lsls	r3, r1, #29
 8002476:	08c2      	lsrs	r2, r0, #3
 8002478:	431a      	orrs	r2, r3
 800247a:	08cb      	lsrs	r3, r1, #3
 800247c:	e632      	b.n	80020e4 <__aeabi_dsub+0x37c>
 800247e:	2200      	movs	r2, #0
 8002480:	4901      	ldr	r1, [pc, #4]	; (8002488 <__aeabi_dsub+0x720>)
 8002482:	0013      	movs	r3, r2
 8002484:	e514      	b.n	8001eb0 <__aeabi_dsub+0x148>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	000007ff 	.word	0x000007ff

0800248c <__aeabi_dcmpun>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	0005      	movs	r5, r0
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <__aeabi_dcmpun+0x38>)
 8002492:	030c      	lsls	r4, r1, #12
 8002494:	0016      	movs	r6, r2
 8002496:	0049      	lsls	r1, r1, #1
 8002498:	031a      	lsls	r2, r3, #12
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	0b24      	lsrs	r4, r4, #12
 800249e:	0d49      	lsrs	r1, r1, #21
 80024a0:	0b12      	lsrs	r2, r2, #12
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	4281      	cmp	r1, r0
 80024a6:	d008      	beq.n	80024ba <__aeabi_dcmpun+0x2e>
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__aeabi_dcmpun+0x38>)
 80024aa:	2000      	movs	r0, #0
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d103      	bne.n	80024b8 <__aeabi_dcmpun+0x2c>
 80024b0:	4332      	orrs	r2, r6
 80024b2:	0010      	movs	r0, r2
 80024b4:	1e42      	subs	r2, r0, #1
 80024b6:	4190      	sbcs	r0, r2
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	2001      	movs	r0, #1
 80024bc:	432c      	orrs	r4, r5
 80024be:	d1fb      	bne.n	80024b8 <__aeabi_dcmpun+0x2c>
 80024c0:	e7f2      	b.n	80024a8 <__aeabi_dcmpun+0x1c>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	000007ff 	.word	0x000007ff

080024c8 <__aeabi_d2iz>:
 80024c8:	000a      	movs	r2, r1
 80024ca:	b530      	push	{r4, r5, lr}
 80024cc:	4c13      	ldr	r4, [pc, #76]	; (800251c <__aeabi_d2iz+0x54>)
 80024ce:	0053      	lsls	r3, r2, #1
 80024d0:	0309      	lsls	r1, r1, #12
 80024d2:	0005      	movs	r5, r0
 80024d4:	0b09      	lsrs	r1, r1, #12
 80024d6:	2000      	movs	r0, #0
 80024d8:	0d5b      	lsrs	r3, r3, #21
 80024da:	0fd2      	lsrs	r2, r2, #31
 80024dc:	42a3      	cmp	r3, r4
 80024de:	dd04      	ble.n	80024ea <__aeabi_d2iz+0x22>
 80024e0:	480f      	ldr	r0, [pc, #60]	; (8002520 <__aeabi_d2iz+0x58>)
 80024e2:	4283      	cmp	r3, r0
 80024e4:	dd02      	ble.n	80024ec <__aeabi_d2iz+0x24>
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <__aeabi_d2iz+0x5c>)
 80024e8:	18d0      	adds	r0, r2, r3
 80024ea:	bd30      	pop	{r4, r5, pc}
 80024ec:	2080      	movs	r0, #128	; 0x80
 80024ee:	0340      	lsls	r0, r0, #13
 80024f0:	4301      	orrs	r1, r0
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <__aeabi_d2iz+0x60>)
 80024f4:	1ac0      	subs	r0, r0, r3
 80024f6:	281f      	cmp	r0, #31
 80024f8:	dd08      	ble.n	800250c <__aeabi_d2iz+0x44>
 80024fa:	480c      	ldr	r0, [pc, #48]	; (800252c <__aeabi_d2iz+0x64>)
 80024fc:	1ac3      	subs	r3, r0, r3
 80024fe:	40d9      	lsrs	r1, r3
 8002500:	000b      	movs	r3, r1
 8002502:	4258      	negs	r0, r3
 8002504:	2a00      	cmp	r2, #0
 8002506:	d1f0      	bne.n	80024ea <__aeabi_d2iz+0x22>
 8002508:	0018      	movs	r0, r3
 800250a:	e7ee      	b.n	80024ea <__aeabi_d2iz+0x22>
 800250c:	4c08      	ldr	r4, [pc, #32]	; (8002530 <__aeabi_d2iz+0x68>)
 800250e:	40c5      	lsrs	r5, r0
 8002510:	46a4      	mov	ip, r4
 8002512:	4463      	add	r3, ip
 8002514:	4099      	lsls	r1, r3
 8002516:	000b      	movs	r3, r1
 8002518:	432b      	orrs	r3, r5
 800251a:	e7f2      	b.n	8002502 <__aeabi_d2iz+0x3a>
 800251c:	000003fe 	.word	0x000003fe
 8002520:	0000041d 	.word	0x0000041d
 8002524:	7fffffff 	.word	0x7fffffff
 8002528:	00000433 	.word	0x00000433
 800252c:	00000413 	.word	0x00000413
 8002530:	fffffbed 	.word	0xfffffbed

08002534 <__aeabi_i2d>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2800      	cmp	r0, #0
 8002538:	d016      	beq.n	8002568 <__aeabi_i2d+0x34>
 800253a:	17c3      	asrs	r3, r0, #31
 800253c:	18c5      	adds	r5, r0, r3
 800253e:	405d      	eors	r5, r3
 8002540:	0fc4      	lsrs	r4, r0, #31
 8002542:	0028      	movs	r0, r5
 8002544:	f000 f91c 	bl	8002780 <__clzsi2>
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <__aeabi_i2d+0x5c>)
 800254a:	1a12      	subs	r2, r2, r0
 800254c:	280a      	cmp	r0, #10
 800254e:	dc16      	bgt.n	800257e <__aeabi_i2d+0x4a>
 8002550:	0003      	movs	r3, r0
 8002552:	002e      	movs	r6, r5
 8002554:	3315      	adds	r3, #21
 8002556:	409e      	lsls	r6, r3
 8002558:	230b      	movs	r3, #11
 800255a:	1a18      	subs	r0, r3, r0
 800255c:	40c5      	lsrs	r5, r0
 800255e:	0553      	lsls	r3, r2, #21
 8002560:	032d      	lsls	r5, r5, #12
 8002562:	0b2d      	lsrs	r5, r5, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e003      	b.n	8002570 <__aeabi_i2d+0x3c>
 8002568:	2400      	movs	r4, #0
 800256a:	2300      	movs	r3, #0
 800256c:	2500      	movs	r5, #0
 800256e:	2600      	movs	r6, #0
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	432b      	orrs	r3, r5
 8002574:	07e4      	lsls	r4, r4, #31
 8002576:	4323      	orrs	r3, r4
 8002578:	0030      	movs	r0, r6
 800257a:	0019      	movs	r1, r3
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	380b      	subs	r0, #11
 8002580:	4085      	lsls	r5, r0
 8002582:	0553      	lsls	r3, r2, #21
 8002584:	032d      	lsls	r5, r5, #12
 8002586:	2600      	movs	r6, #0
 8002588:	0b2d      	lsrs	r5, r5, #12
 800258a:	0d5b      	lsrs	r3, r3, #21
 800258c:	e7f0      	b.n	8002570 <__aeabi_i2d+0x3c>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	0000041e 	.word	0x0000041e

08002594 <__aeabi_ui2d>:
 8002594:	b510      	push	{r4, lr}
 8002596:	1e04      	subs	r4, r0, #0
 8002598:	d010      	beq.n	80025bc <__aeabi_ui2d+0x28>
 800259a:	f000 f8f1 	bl	8002780 <__clzsi2>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <__aeabi_ui2d+0x48>)
 80025a0:	1a1b      	subs	r3, r3, r0
 80025a2:	280a      	cmp	r0, #10
 80025a4:	dc11      	bgt.n	80025ca <__aeabi_ui2d+0x36>
 80025a6:	220b      	movs	r2, #11
 80025a8:	0021      	movs	r1, r4
 80025aa:	1a12      	subs	r2, r2, r0
 80025ac:	40d1      	lsrs	r1, r2
 80025ae:	3015      	adds	r0, #21
 80025b0:	030a      	lsls	r2, r1, #12
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4084      	lsls	r4, r0
 80025b6:	0b12      	lsrs	r2, r2, #12
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	e001      	b.n	80025c0 <__aeabi_ui2d+0x2c>
 80025bc:	2300      	movs	r3, #0
 80025be:	2200      	movs	r2, #0
 80025c0:	051b      	lsls	r3, r3, #20
 80025c2:	4313      	orrs	r3, r2
 80025c4:	0020      	movs	r0, r4
 80025c6:	0019      	movs	r1, r3
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	0022      	movs	r2, r4
 80025cc:	380b      	subs	r0, #11
 80025ce:	4082      	lsls	r2, r0
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	0312      	lsls	r2, r2, #12
 80025d4:	2400      	movs	r4, #0
 80025d6:	0b12      	lsrs	r2, r2, #12
 80025d8:	0d5b      	lsrs	r3, r3, #21
 80025da:	e7f1      	b.n	80025c0 <__aeabi_ui2d+0x2c>
 80025dc:	0000041e 	.word	0x0000041e

080025e0 <__aeabi_f2d>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	0043      	lsls	r3, r0, #1
 80025e4:	0246      	lsls	r6, r0, #9
 80025e6:	0fc4      	lsrs	r4, r0, #31
 80025e8:	20fe      	movs	r0, #254	; 0xfe
 80025ea:	0e1b      	lsrs	r3, r3, #24
 80025ec:	1c59      	adds	r1, r3, #1
 80025ee:	0a75      	lsrs	r5, r6, #9
 80025f0:	4208      	tst	r0, r1
 80025f2:	d00c      	beq.n	800260e <__aeabi_f2d+0x2e>
 80025f4:	22e0      	movs	r2, #224	; 0xe0
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4694      	mov	ip, r2
 80025fa:	076d      	lsls	r5, r5, #29
 80025fc:	0b36      	lsrs	r6, r6, #12
 80025fe:	4463      	add	r3, ip
 8002600:	051b      	lsls	r3, r3, #20
 8002602:	4333      	orrs	r3, r6
 8002604:	07e4      	lsls	r4, r4, #31
 8002606:	4323      	orrs	r3, r4
 8002608:	0028      	movs	r0, r5
 800260a:	0019      	movs	r1, r3
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <__aeabi_f2d+0x5c>
 8002612:	2d00      	cmp	r5, #0
 8002614:	d01b      	beq.n	800264e <__aeabi_f2d+0x6e>
 8002616:	0028      	movs	r0, r5
 8002618:	f000 f8b2 	bl	8002780 <__clzsi2>
 800261c:	280a      	cmp	r0, #10
 800261e:	dc1c      	bgt.n	800265a <__aeabi_f2d+0x7a>
 8002620:	230b      	movs	r3, #11
 8002622:	002a      	movs	r2, r5
 8002624:	1a1b      	subs	r3, r3, r0
 8002626:	40da      	lsrs	r2, r3
 8002628:	0003      	movs	r3, r0
 800262a:	3315      	adds	r3, #21
 800262c:	409d      	lsls	r5, r3
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <__aeabi_f2d+0x88>)
 8002630:	0312      	lsls	r2, r2, #12
 8002632:	1a1b      	subs	r3, r3, r0
 8002634:	055b      	lsls	r3, r3, #21
 8002636:	0b16      	lsrs	r6, r2, #12
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	e7e1      	b.n	8002600 <__aeabi_f2d+0x20>
 800263c:	2d00      	cmp	r5, #0
 800263e:	d009      	beq.n	8002654 <__aeabi_f2d+0x74>
 8002640:	0b32      	lsrs	r2, r6, #12
 8002642:	2680      	movs	r6, #128	; 0x80
 8002644:	0336      	lsls	r6, r6, #12
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <__aeabi_f2d+0x8c>)
 8002648:	076d      	lsls	r5, r5, #29
 800264a:	4316      	orrs	r6, r2
 800264c:	e7d8      	b.n	8002600 <__aeabi_f2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2600      	movs	r6, #0
 8002652:	e7d5      	b.n	8002600 <__aeabi_f2d+0x20>
 8002654:	2600      	movs	r6, #0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <__aeabi_f2d+0x8c>)
 8002658:	e7d2      	b.n	8002600 <__aeabi_f2d+0x20>
 800265a:	0003      	movs	r3, r0
 800265c:	002a      	movs	r2, r5
 800265e:	3b0b      	subs	r3, #11
 8002660:	409a      	lsls	r2, r3
 8002662:	2500      	movs	r5, #0
 8002664:	e7e3      	b.n	800262e <__aeabi_f2d+0x4e>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	00000389 	.word	0x00000389
 800266c:	000007ff 	.word	0x000007ff

08002670 <__aeabi_d2f>:
 8002670:	0002      	movs	r2, r0
 8002672:	004b      	lsls	r3, r1, #1
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	0308      	lsls	r0, r1, #12
 8002678:	0d5b      	lsrs	r3, r3, #21
 800267a:	4e3d      	ldr	r6, [pc, #244]	; (8002770 <__aeabi_d2f+0x100>)
 800267c:	0fcc      	lsrs	r4, r1, #31
 800267e:	0a40      	lsrs	r0, r0, #9
 8002680:	0f51      	lsrs	r1, r2, #29
 8002682:	1c5f      	adds	r7, r3, #1
 8002684:	4308      	orrs	r0, r1
 8002686:	00d5      	lsls	r5, r2, #3
 8002688:	4237      	tst	r7, r6
 800268a:	d00a      	beq.n	80026a2 <__aeabi_d2f+0x32>
 800268c:	4939      	ldr	r1, [pc, #228]	; (8002774 <__aeabi_d2f+0x104>)
 800268e:	185e      	adds	r6, r3, r1
 8002690:	2efe      	cmp	r6, #254	; 0xfe
 8002692:	dd16      	ble.n	80026c2 <__aeabi_d2f+0x52>
 8002694:	23ff      	movs	r3, #255	; 0xff
 8002696:	2100      	movs	r1, #0
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	430b      	orrs	r3, r1
 800269c:	07e0      	lsls	r0, r4, #31
 800269e:	4318      	orrs	r0, r3
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <__aeabi_d2f+0x44>
 80026a6:	4328      	orrs	r0, r5
 80026a8:	d027      	beq.n	80026fa <__aeabi_d2f+0x8a>
 80026aa:	2105      	movs	r1, #5
 80026ac:	0189      	lsls	r1, r1, #6
 80026ae:	0a49      	lsrs	r1, r1, #9
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e7f1      	b.n	8002698 <__aeabi_d2f+0x28>
 80026b4:	4305      	orrs	r5, r0
 80026b6:	d0ed      	beq.n	8002694 <__aeabi_d2f+0x24>
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	03c9      	lsls	r1, r1, #15
 80026bc:	23ff      	movs	r3, #255	; 0xff
 80026be:	4301      	orrs	r1, r0
 80026c0:	e7ea      	b.n	8002698 <__aeabi_d2f+0x28>
 80026c2:	2e00      	cmp	r6, #0
 80026c4:	dd1c      	ble.n	8002700 <__aeabi_d2f+0x90>
 80026c6:	0192      	lsls	r2, r2, #6
 80026c8:	0011      	movs	r1, r2
 80026ca:	1e4a      	subs	r2, r1, #1
 80026cc:	4191      	sbcs	r1, r2
 80026ce:	00c0      	lsls	r0, r0, #3
 80026d0:	0f6d      	lsrs	r5, r5, #29
 80026d2:	4301      	orrs	r1, r0
 80026d4:	4329      	orrs	r1, r5
 80026d6:	074b      	lsls	r3, r1, #29
 80026d8:	d048      	beq.n	800276c <__aeabi_d2f+0xfc>
 80026da:	230f      	movs	r3, #15
 80026dc:	400b      	ands	r3, r1
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d000      	beq.n	80026e4 <__aeabi_d2f+0x74>
 80026e2:	3104      	adds	r1, #4
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	04db      	lsls	r3, r3, #19
 80026e8:	400b      	ands	r3, r1
 80026ea:	d03f      	beq.n	800276c <__aeabi_d2f+0xfc>
 80026ec:	1c72      	adds	r2, r6, #1
 80026ee:	2efe      	cmp	r6, #254	; 0xfe
 80026f0:	d0d0      	beq.n	8002694 <__aeabi_d2f+0x24>
 80026f2:	0189      	lsls	r1, r1, #6
 80026f4:	0a49      	lsrs	r1, r1, #9
 80026f6:	b2d3      	uxtb	r3, r2
 80026f8:	e7ce      	b.n	8002698 <__aeabi_d2f+0x28>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	e7cb      	b.n	8002698 <__aeabi_d2f+0x28>
 8002700:	0032      	movs	r2, r6
 8002702:	3217      	adds	r2, #23
 8002704:	db22      	blt.n	800274c <__aeabi_d2f+0xdc>
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	221e      	movs	r2, #30
 800270a:	0409      	lsls	r1, r1, #16
 800270c:	4308      	orrs	r0, r1
 800270e:	1b92      	subs	r2, r2, r6
 8002710:	2a1f      	cmp	r2, #31
 8002712:	dd1d      	ble.n	8002750 <__aeabi_d2f+0xe0>
 8002714:	2102      	movs	r1, #2
 8002716:	4249      	negs	r1, r1
 8002718:	1b8e      	subs	r6, r1, r6
 800271a:	0001      	movs	r1, r0
 800271c:	40f1      	lsrs	r1, r6
 800271e:	000e      	movs	r6, r1
 8002720:	2a20      	cmp	r2, #32
 8002722:	d004      	beq.n	800272e <__aeabi_d2f+0xbe>
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <__aeabi_d2f+0x108>)
 8002726:	4694      	mov	ip, r2
 8002728:	4463      	add	r3, ip
 800272a:	4098      	lsls	r0, r3
 800272c:	4305      	orrs	r5, r0
 800272e:	0029      	movs	r1, r5
 8002730:	1e4d      	subs	r5, r1, #1
 8002732:	41a9      	sbcs	r1, r5
 8002734:	4331      	orrs	r1, r6
 8002736:	2600      	movs	r6, #0
 8002738:	074b      	lsls	r3, r1, #29
 800273a:	d1ce      	bne.n	80026da <__aeabi_d2f+0x6a>
 800273c:	2080      	movs	r0, #128	; 0x80
 800273e:	000b      	movs	r3, r1
 8002740:	04c0      	lsls	r0, r0, #19
 8002742:	2201      	movs	r2, #1
 8002744:	4003      	ands	r3, r0
 8002746:	4201      	tst	r1, r0
 8002748:	d1d3      	bne.n	80026f2 <__aeabi_d2f+0x82>
 800274a:	e7af      	b.n	80026ac <__aeabi_d2f+0x3c>
 800274c:	2300      	movs	r3, #0
 800274e:	e7ac      	b.n	80026aa <__aeabi_d2f+0x3a>
 8002750:	490a      	ldr	r1, [pc, #40]	; (800277c <__aeabi_d2f+0x10c>)
 8002752:	468c      	mov	ip, r1
 8002754:	0029      	movs	r1, r5
 8002756:	4463      	add	r3, ip
 8002758:	40d1      	lsrs	r1, r2
 800275a:	409d      	lsls	r5, r3
 800275c:	000a      	movs	r2, r1
 800275e:	0029      	movs	r1, r5
 8002760:	4098      	lsls	r0, r3
 8002762:	1e4d      	subs	r5, r1, #1
 8002764:	41a9      	sbcs	r1, r5
 8002766:	4301      	orrs	r1, r0
 8002768:	4311      	orrs	r1, r2
 800276a:	e7e4      	b.n	8002736 <__aeabi_d2f+0xc6>
 800276c:	0033      	movs	r3, r6
 800276e:	e79d      	b.n	80026ac <__aeabi_d2f+0x3c>
 8002770:	000007fe 	.word	0x000007fe
 8002774:	fffffc80 	.word	0xfffffc80
 8002778:	fffffca2 	.word	0xfffffca2
 800277c:	fffffc82 	.word	0xfffffc82

08002780 <__clzsi2>:
 8002780:	211c      	movs	r1, #28
 8002782:	2301      	movs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	4298      	cmp	r0, r3
 8002788:	d301      	bcc.n	800278e <__clzsi2+0xe>
 800278a:	0c00      	lsrs	r0, r0, #16
 800278c:	3910      	subs	r1, #16
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	4298      	cmp	r0, r3
 8002792:	d301      	bcc.n	8002798 <__clzsi2+0x18>
 8002794:	0a00      	lsrs	r0, r0, #8
 8002796:	3908      	subs	r1, #8
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	4298      	cmp	r0, r3
 800279c:	d301      	bcc.n	80027a2 <__clzsi2+0x22>
 800279e:	0900      	lsrs	r0, r0, #4
 80027a0:	3904      	subs	r1, #4
 80027a2:	a202      	add	r2, pc, #8	; (adr r2, 80027ac <__clzsi2+0x2c>)
 80027a4:	5c10      	ldrb	r0, [r2, r0]
 80027a6:	1840      	adds	r0, r0, r1
 80027a8:	4770      	bx	lr
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	02020304 	.word	0x02020304
 80027b0:	01010101 	.word	0x01010101
	...

080027bc <__clzdi2>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	2900      	cmp	r1, #0
 80027c0:	d103      	bne.n	80027ca <__clzdi2+0xe>
 80027c2:	f7ff ffdd 	bl	8002780 <__clzsi2>
 80027c6:	3020      	adds	r0, #32
 80027c8:	e002      	b.n	80027d0 <__clzdi2+0x14>
 80027ca:	1c08      	adds	r0, r1, #0
 80027cc:	f7ff ffd8 	bl	8002780 <__clzsi2>
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)

080027d4 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	0005      	movs	r5, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 80027d8:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 80027da:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <minArr+0xe>
		smallest = arr[0];
 80027e0:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <minArr+0x38>)
 80027e4:	781e      	ldrb	r6, [r3, #0]
 80027e6:	2e00      	cmp	r6, #0
 80027e8:	dd0e      	ble.n	8002808 <minArr+0x34>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2000      	movs	r0, #0
 80027ee:	e002      	b.n	80027f6 <minArr+0x22>
 80027f0:	3301      	adds	r3, #1
 80027f2:	42b3      	cmp	r3, r6
 80027f4:	da09      	bge.n	800280a <minArr+0x36>
		if ((arr[i] < smallest) && !Q[i]) {
 80027f6:	5cea      	ldrb	r2, [r5, r3]
 80027f8:	42a2      	cmp	r2, r4
 80027fa:	d2f9      	bcs.n	80027f0 <minArr+0x1c>
 80027fc:	5ccf      	ldrb	r7, [r1, r3]
 80027fe:	2f00      	cmp	r7, #0
 8002800:	d1f6      	bne.n	80027f0 <minArr+0x1c>
 8002802:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 8002804:	0014      	movs	r4, r2
 8002806:	e7f3      	b.n	80027f0 <minArr+0x1c>
	for (int i=0 ; i<N ; i++) {
 8002808:	2000      	movs	r0, #0
			index = i;
		}
	}
	
	return index;
}
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	2000001c 	.word	0x2000001c

08002810 <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 8002810:	b510      	push	{r4, lr}
 8002812:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <QnotEmpty+0x20>)
 8002816:	781c      	ldrb	r4, [r3, #0]
 8002818:	2c00      	cmp	r4, #0
 800281a:	dd07      	ble.n	800282c <QnotEmpty+0x1c>
 800281c:	2300      	movs	r3, #0
	char temp = 1;
 800281e:	2001      	movs	r0, #1
		temp &= Q[i];
 8002820:	5cca      	ldrb	r2, [r1, r3]
 8002822:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 8002824:	3301      	adds	r3, #1
 8002826:	42a3      	cmp	r3, r4
 8002828:	dbfa      	blt.n	8002820 <QnotEmpty+0x10>
	}	
	
	return temp;
}
 800282a:	bd10      	pop	{r4, pc}
	char temp = 1;
 800282c:	2001      	movs	r0, #1
 800282e:	e7fc      	b.n	800282a <QnotEmpty+0x1a>
 8002830:	2000001c 	.word	0x2000001c

08002834 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	46de      	mov	lr, fp
 8002838:	4657      	mov	r7, sl
 800283a:	464e      	mov	r6, r9
 800283c:	4645      	mov	r5, r8
 800283e:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f00f f9f7 	bl	8011c34 <malloc>
 8002846:	4680      	mov	r8, r0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8002848:	2800      	cmp	r0, #0
 800284a:	d06c      	beq.n	8002926 <LoadROsnippets+0xf2>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 800284c:	4b38      	ldr	r3, [pc, #224]	; (8002930 <LoadROsnippets+0xfc>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2bfe      	cmp	r3, #254	; 0xfe
 8002852:	d16a      	bne.n	800292a <LoadROsnippets+0xf6>
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <LoadROsnippets+0x100>)
 8002856:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 8002858:	4c35      	ldr	r4, [pc, #212]	; (8002930 <LoadROsnippets+0xfc>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 800285a:	2301      	movs	r3, #1
 800285c:	4443      	add	r3, r8
 800285e:	469a      	mov	sl, r3
 8002860:	e026      	b.n	80028b0 <LoadROsnippets+0x7c>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8002862:	2500      	movs	r5, #0
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
			++currentAdd; ++i;
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8002864:	4643      	mov	r3, r8
 8002866:	195b      	adds	r3, r3, r5
 8002868:	3b01      	subs	r3, #1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <LoadROsnippets+0x40>
 8002870:	3501      	adds	r5, #1
 8002872:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 8002874:	0028      	movs	r0, r5
 8002876:	f00f f9dd 	bl	8011c34 <malloc>
 800287a:	465b      	mov	r3, fp
 800287c:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 800287e:	2800      	cmp	r0, #0
 8002880:	d03d      	beq.n	80028fe <LoadROsnippets+0xca>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 8002882:	002a      	movs	r2, r5
 8002884:	4641      	mov	r1, r8
 8002886:	f00f fc0b 	bl	80120a0 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <LoadROsnippets+0x104>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <LoadROsnippets+0x104>)
 8002892:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8002894:	002a      	movs	r2, r5
 8002896:	2100      	movs	r1, #0
 8002898:	4640      	mov	r0, r8
 800289a:	f00f fc0a 	bl	80120b2 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 800289e:	783b      	ldrb	r3, [r7, #0]
 80028a0:	2bfe      	cmp	r3, #254	; 0xfe
 80028a2:	d136      	bne.n	8002912 <LoadROsnippets+0xde>
 80028a4:	3bea      	subs	r3, #234	; 0xea
 80028a6:	469c      	mov	ip, r3
 80028a8:	44e1      	add	r9, ip
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <LoadROsnippets+0x108>)
 80028ac:	4599      	cmp	r9, r3
 80028ae:	d030      	beq.n	8002912 <LoadROsnippets+0xde>
 80028b0:	0021      	movs	r1, r4
 80028b2:	3114      	adds	r1, #20
{
 80028b4:	0023      	movs	r3, r4
 80028b6:	4642      	mov	r2, r8
 80028b8:	1b16      	subs	r6, r2, r4
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	54f2      	strb	r2, [r6, r3]
 80028be:	3301      	adds	r3, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80028c0:	428b      	cmp	r3, r1
 80028c2:	d1fa      	bne.n	80028ba <LoadROsnippets+0x86>
 80028c4:	3414      	adds	r4, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80028c6:	46cb      	mov	fp, r9
 80028c8:	2214      	movs	r2, #20
 80028ca:	4651      	mov	r1, sl
 80028cc:	4648      	mov	r0, r9
 80028ce:	f00f fbe7 	bl	80120a0 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80028d2:	2214      	movs	r2, #20
 80028d4:	2100      	movs	r1, #0
 80028d6:	4640      	mov	r0, r8
 80028d8:	f00f fbeb 	bl	80120b2 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80028dc:	0027      	movs	r7, r4
 80028de:	7823      	ldrb	r3, [r4, #0]
 80028e0:	2bfd      	cmp	r3, #253	; 0xfd
 80028e2:	d8be      	bhi.n	8002862 <LoadROsnippets+0x2e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80028e4:	2500      	movs	r5, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 80028e6:	3e14      	subs	r6, #20
 80028e8:	5533      	strb	r3, [r6, r4]
			++currentAdd; ++i;
 80028ea:	3401      	adds	r4, #1
 80028ec:	3501      	adds	r5, #1
 80028ee:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80028f0:	0027      	movs	r7, r4
 80028f2:	7823      	ldrb	r3, [r4, #0]
 80028f4:	2bfd      	cmp	r3, #253	; 0xfd
 80028f6:	d8b5      	bhi.n	8002864 <LoadROsnippets+0x30>
 80028f8:	2d32      	cmp	r5, #50	; 0x32
 80028fa:	d1f5      	bne.n	80028e8 <LoadROsnippets+0xb4>
 80028fc:	e7b2      	b.n	8002864 <LoadROsnippets+0x30>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 80028fe:	2214      	movs	r2, #20
 8002900:	2100      	movs	r1, #0
 8002902:	4658      	mov	r0, fp
 8002904:	f00f fbd5 	bl	80120b2 <memset>
			free(snipBuffer);			
 8002908:	4640      	mov	r0, r8
 800290a:	f00f f99d 	bl	8011c48 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800290e:	200e      	movs	r0, #14
 8002910:	e003      	b.n	800291a <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 8002912:	4640      	mov	r0, r8
 8002914:	f00f f998 	bl	8011c48 <free>
	return BOS_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	bcf0      	pop	{r4, r5, r6, r7}
 800291c:	46bb      	mov	fp, r7
 800291e:	46b2      	mov	sl, r6
 8002920:	46a9      	mov	r9, r5
 8002922:	46a0      	mov	r8, r4
 8002924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8002926:	20fb      	movs	r0, #251	; 0xfb
 8002928:	e7f7      	b.n	800291a <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 800292a:	20ff      	movs	r0, #255	; 0xff
 800292c:	e7f5      	b.n	800291a <LoadROsnippets+0xe6>
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	0801dc00 	.word	0x0801dc00
 8002934:	2000695c 	.word	0x2000695c
 8002938:	20001203 	.word	0x20001203
 800293c:	200069c0 	.word	0x200069c0

08002940 <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <LoadROtopology+0x94>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <LoadROtopology+0x98>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d011      	beq.n	8002974 <LoadROtopology+0x34>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 8002950:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 8002952:	d017      	beq.n	8002984 <LoadROtopology+0x44>
		N = (uint8_t) (temp>>8);
 8002954:	4921      	ldr	r1, [pc, #132]	; (80029dc <LoadROtopology+0x9c>)
 8002956:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <LoadROtopology+0xa0>)
 800295a:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <LoadROtopology+0x9c>)
 800295e:	7818      	ldrb	r0, [r3, #0]
 8002960:	2800      	cmp	r0, #0
 8002962:	d035      	beq.n	80029d0 <LoadROtopology+0x90>
 8002964:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 8002966:	2202      	movs	r2, #2
		{
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8002968:	466b      	mov	r3, sp
 800296a:	1dd9      	adds	r1, r3, #7
 800296c:	2300      	movs	r3, #0
 800296e:	469c      	mov	ip, r3
			{
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8002970:	4d1c      	ldr	r5, [pc, #112]	; (80029e4 <LoadROtopology+0xa4>)
 8002972:	e00f      	b.n	8002994 <LoadROtopology+0x54>
		N = 1;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <LoadROtopology+0x9c>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
		myID = 0;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <LoadROtopology+0xa0>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002980:	20fa      	movs	r0, #250	; 0xfa
 8002982:	e025      	b.n	80029d0 <LoadROtopology+0x90>
		if (N == 0)	N = 1;
 8002984:	4a15      	ldr	r2, [pc, #84]	; (80029dc <LoadROtopology+0x9c>)
 8002986:	2101      	movs	r1, #1
 8002988:	7011      	strb	r1, [r2, #0]
 800298a:	e7e5      	b.n	8002958 <LoadROtopology+0x18>
		for(uint8_t i=1 ; i<=N ; i++)
 800298c:	3601      	adds	r6, #1
 800298e:	b2f6      	uxtb	r6, r6
 8002990:	4286      	cmp	r6, r0
 8002992:	d81c      	bhi.n	80029ce <LoadROtopology+0x8e>
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8002994:	4663      	mov	r3, ip
 8002996:	700b      	strb	r3, [r1, #0]
 8002998:	780b      	ldrb	r3, [r1, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b0a      	cmp	r3, #10
 800299e:	d8f5      	bhi.n	800298c <LoadROtopology+0x4c>
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 80029a0:	1e73      	subs	r3, r6, #1
 80029a2:	009c      	lsls	r4, r3, #2
 80029a4:	18e4      	adds	r4, r4, r3
 80029a6:	0064      	lsls	r4, r4, #1
 80029a8:	18e4      	adds	r4, r4, r3
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <LoadROtopology+0x94>)
 80029ac:	18d7      	adds	r7, r2, r3
 80029ae:	780b      	ldrb	r3, [r1, #0]
 80029b0:	883f      	ldrh	r7, [r7, #0]
 80029b2:	191b      	adds	r3, r3, r4
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	52ef      	strh	r7, [r5, r3]
				add += 2;			
 80029b8:	3202      	adds	r2, #2
 80029ba:	b292      	uxth	r2, r2
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 80029bc:	780b      	ldrb	r3, [r1, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	700b      	strb	r3, [r1, #0]
 80029c4:	780b      	ldrb	r3, [r1, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b0a      	cmp	r3, #10
 80029ca:	d9ee      	bls.n	80029aa <LoadROtopology+0x6a>
 80029cc:	e7de      	b.n	800298c <LoadROtopology+0x4c>
			}
		}	
	}
	
	return result;
 80029ce:	2000      	movs	r0, #0
}
 80029d0:	b003      	add	sp, #12
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d4:	0801d800 	.word	0x0801d800
 80029d8:	0000ffff 	.word	0x0000ffff
 80029dc:	2000001c 	.word	0x2000001c
 80029e0:	2000105c 	.word	0x2000105c
 80029e4:	20000a80 	.word	0x20000a80

080029e8 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <SaveEEportsDir+0x3c>)
 80029ec:	781d      	ldrb	r5, [r3, #0]
 80029ee:	2d00      	cmp	r5, #0
 80029f0:	d016      	beq.n	8002a20 <SaveEEportsDir+0x38>
 80029f2:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80029f4:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 80029f6:	4f0c      	ldr	r7, [pc, #48]	; (8002a28 <SaveEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 80029f8:	001e      	movs	r6, r3
 80029fa:	e008      	b.n	8002a0e <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80029fc:	1c60      	adds	r0, r4, #1
 80029fe:	f004 fbb5 	bl	800716c <EE_WriteVariable>
 8002a02:	e009      	b.n	8002a18 <SaveEEportsDir+0x30>
	for(uint8_t i=1 ; i<=N ; i++)
 8002a04:	3401      	adds	r4, #1
 8002a06:	b2e4      	uxtb	r4, r4
 8002a08:	7833      	ldrb	r3, [r6, #0]
 8002a0a:	42a3      	cmp	r3, r4
 8002a0c:	d308      	bcc.n	8002a20 <SaveEEportsDir+0x38>
		if (arrayPortsDir[i-1])
 8002a0e:	1e63      	subs	r3, r4, #1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	5bd9      	ldrh	r1, [r3, r7]
 8002a14:	2900      	cmp	r1, #0
 8002a16:	d1f1      	bne.n	80029fc <SaveEEportsDir+0x14>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002a18:	2c19      	cmp	r4, #25
 8002a1a:	d9f3      	bls.n	8002a04 <SaveEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8002a1c:	250a      	movs	r5, #10
 8002a1e:	e7f1      	b.n	8002a04 <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 8002a20:	0028      	movs	r0, r5
 8002a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a24:	2000001c 	.word	0x2000001c
 8002a28:	20006dc4 	.word	0x20006dc4

08002a2c <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8002a2e:	2232      	movs	r2, #50	; 0x32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4810      	ldr	r0, [pc, #64]	; (8002a74 <ClearEEportsDir+0x48>)
 8002a34:	f00f fb3d 	bl	80120b2 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <ClearEEportsDir+0x4c>)
 8002a3a:	781d      	ldrb	r5, [r3, #0]
 8002a3c:	2d00      	cmp	r5, #0
 8002a3e:	d016      	beq.n	8002a6e <ClearEEportsDir+0x42>
 8002a40:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8002a42:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 8002a44:	4f0b      	ldr	r7, [pc, #44]	; (8002a74 <ClearEEportsDir+0x48>)
	for(uint8_t i=1 ; i<=N ; i++)
 8002a46:	001e      	movs	r6, r3
 8002a48:	e008      	b.n	8002a5c <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8002a4a:	1c60      	adds	r0, r4, #1
 8002a4c:	f004 fb8e 	bl	800716c <EE_WriteVariable>
 8002a50:	e009      	b.n	8002a66 <ClearEEportsDir+0x3a>
	for(uint8_t i=1 ; i<=N ; i++)
 8002a52:	3401      	adds	r4, #1
 8002a54:	b2e4      	uxtb	r4, r4
 8002a56:	7833      	ldrb	r3, [r6, #0]
 8002a58:	42a3      	cmp	r3, r4
 8002a5a:	d308      	bcc.n	8002a6e <ClearEEportsDir+0x42>
		if (arrayPortsDir[i-1])
 8002a5c:	1e63      	subs	r3, r4, #1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	5bd9      	ldrh	r1, [r3, r7]
 8002a62:	2900      	cmp	r1, #0
 8002a64:	d1f1      	bne.n	8002a4a <ClearEEportsDir+0x1e>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002a66:	2c19      	cmp	r4, #25
 8002a68:	d9f3      	bls.n	8002a52 <ClearEEportsDir+0x26>
			result = BOS_ERR_EEPROM;
 8002a6a:	250a      	movs	r5, #10
 8002a6c:	e7f1      	b.n	8002a52 <ClearEEportsDir+0x26>
	}
	
	return result;
}
 8002a6e:	0028      	movs	r0, r5
 8002a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	20006dc4 	.word	0x20006dc4
 8002a78:	2000001c 	.word	0x2000001c

08002a7c <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <LoadEEportsDir+0x3c>)
 8002a80:	781d      	ldrb	r5, [r3, #0]
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d016      	beq.n	8002ab4 <LoadEEportsDir+0x38>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8002a86:	490d      	ldr	r1, [pc, #52]	; (8002abc <LoadEEportsDir+0x40>)
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f004 fb43 	bl	8007114 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8002a8e:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8002a90:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8002a92:	4e09      	ldr	r6, [pc, #36]	; (8002ab8 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8002a94:	4f09      	ldr	r7, [pc, #36]	; (8002abc <LoadEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 8002a96:	3401      	adds	r4, #1
 8002a98:	b2e4      	uxtb	r4, r4
 8002a9a:	7833      	ldrb	r3, [r6, #0]
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d309      	bcc.n	8002ab4 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8002aa0:	1e61      	subs	r1, r4, #1
 8002aa2:	0049      	lsls	r1, r1, #1
 8002aa4:	19c9      	adds	r1, r1, r7
 8002aa6:	1c60      	adds	r0, r4, #1
 8002aa8:	f004 fb34 	bl	8007114 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002aac:	2c19      	cmp	r4, #25
 8002aae:	d9f2      	bls.n	8002a96 <LoadEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 8002ab0:	250a      	movs	r5, #10
 8002ab2:	e7f0      	b.n	8002a96 <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 8002ab4:	0028      	movs	r0, r5
 8002ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab8:	2000001c 	.word	0x2000001c
 8002abc:	20006dc4 	.word	0x20006dc4

08002ac0 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	46de      	mov	lr, fp
 8002ac4:	464f      	mov	r7, r9
 8002ac6:	4646      	mov	r6, r8
 8002ac8:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002aca:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	4699      	mov	r9, r3
	{
		if (moduleAlias[i][0]) 				
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <SaveEEalias+0x7c>)
 8002ad2:	469b      	mov	fp, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002ad4:	4f1a      	ldr	r7, [pc, #104]	; (8002b40 <SaveEEalias+0x80>)
 8002ad6:	e004      	b.n	8002ae2 <SaveEEalias+0x22>
 8002ad8:	3501      	adds	r5, #1
 8002ada:	b2ed      	uxtb	r5, r5
 8002adc:	783b      	ldrb	r3, [r7, #0]
 8002ade:	42ab      	cmp	r3, r5
 8002ae0:	d325      	bcc.n	8002b2e <SaveEEalias+0x6e>
		if (moduleAlias[i][0]) 				
 8002ae2:	00ab      	lsls	r3, r5, #2
 8002ae4:	195b      	adds	r3, r3, r5
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	465a      	mov	r2, fp
 8002aea:	5c9b      	ldrb	r3, [r3, r2]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f3      	beq.n	8002ad8 <SaveEEalias+0x18>
 8002af0:	00ae      	lsls	r6, r5, #2
 8002af2:	1976      	adds	r6, r6, r5
 8002af4:	0076      	lsls	r6, r6, #1
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <SaveEEalias+0x7c>)
 8002af8:	469c      	mov	ip, r3
 8002afa:	4466      	add	r6, ip
 8002afc:	464c      	mov	r4, r9
 8002afe:	341c      	adds	r4, #28
 8002b00:	b2a4      	uxth	r4, r4
 8002b02:	464b      	mov	r3, r9
 8002b04:	3321      	adds	r3, #33	; 0x21
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4698      	mov	r8, r3
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8002b0a:	7833      	ldrb	r3, [r6, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	7871      	ldrb	r1, [r6, #1]
 8002b10:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8002b12:	b289      	uxth	r1, r1
 8002b14:	0020      	movs	r0, r4
 8002b16:	f004 fb29 	bl	800716c <EE_WriteVariable>
 8002b1a:	3602      	adds	r6, #2
 8002b1c:	3401      	adds	r4, #1
 8002b1e:	b2a4      	uxth	r4, r4
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002b20:	45a0      	cmp	r8, r4
 8002b22:	d1f2      	bne.n	8002b0a <SaveEEalias+0x4a>
 8002b24:	464b      	mov	r3, r9
 8002b26:	3305      	adds	r3, #5
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4699      	mov	r9, r3
 8002b2c:	e7d4      	b.n	8002ad8 <SaveEEalias+0x18>
			}
		}			
	}
	
	return result;
}
 8002b2e:	2000      	movs	r0, #0
 8002b30:	bce0      	pop	{r5, r6, r7}
 8002b32:	46bb      	mov	fp, r7
 8002b34:	46b1      	mov	r9, r6
 8002b36:	46a8      	mov	r8, r5
 8002b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20000f58 	.word	0x20000f58
 8002b40:	2000001c 	.word	0x2000001c

08002b44 <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	46de      	mov	lr, fp
 8002b48:	4657      	mov	r7, sl
 8002b4a:	464e      	mov	r6, r9
 8002b4c:	4645      	mov	r5, r8
 8002b4e:	b5e0      	push	{r5, r6, r7, lr}
 8002b50:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 8002b52:	466b      	mov	r3, sp
 8002b54:	2200      	movs	r2, #0
 8002b56:	80da      	strh	r2, [r3, #6]
 8002b58:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <LoadEEalias+0x84>)
 8002b60:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8002b62:	469a      	mov	sl, r3
 8002b64:	e010      	b.n	8002b88 <LoadEEalias+0x44>
 8002b66:	464b      	mov	r3, r9
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	444b      	add	r3, r9
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4453      	add	r3, sl
 8002b70:	2200      	movs	r2, #0
 8002b72:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002b74:	4643      	mov	r3, r8
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4698      	mov	r8, r3
 8002b7c:	3705      	adds	r7, #5
 8002b7e:	b2bf      	uxth	r7, r7
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <LoadEEalias+0x88>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4543      	cmp	r3, r8
 8002b86:	d317      	bcc.n	8002bb8 <LoadEEalias+0x74>
 8002b88:	1f7c      	subs	r4, r7, #5
 8002b8a:	b2a4      	uxth	r4, r4
 8002b8c:	4643      	mov	r3, r8
 8002b8e:	009d      	lsls	r5, r3, #2
 8002b90:	4445      	add	r5, r8
 8002b92:	006d      	lsls	r5, r5, #1
 8002b94:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8002b96:	466b      	mov	r3, sp
 8002b98:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8002b9a:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8002b9c:	0031      	movs	r1, r6
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f004 fab8 	bl	8007114 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8002ba4:	8833      	ldrh	r3, [r6, #0]
 8002ba6:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	702b      	strb	r3, [r5, #0]
 8002bac:	3401      	adds	r4, #1
 8002bae:	b2a4      	uxth	r4, r4
 8002bb0:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002bb2:	42a7      	cmp	r7, r4
 8002bb4:	d1f2      	bne.n	8002b9c <LoadEEalias+0x58>
 8002bb6:	e7d6      	b.n	8002b66 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002bb8:	2000      	movs	r0, #0
 8002bba:	b003      	add	sp, #12
 8002bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8002bbe:	46bb      	mov	fp, r7
 8002bc0:	46b2      	mov	sl, r6
 8002bc2:	46a9      	mov	r9, r5
 8002bc4:	46a0      	mov	r8, r4
 8002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc8:	20000f58 	.word	0x20000f58
 8002bcc:	2000001c 	.word	0x2000001c

08002bd0 <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	46d6      	mov	lr, sl
 8002bd4:	464f      	mov	r7, r9
 8002bd6:	4646      	mov	r6, r8
 8002bd8:	b5c0      	push	{r6, r7, lr}
 8002bda:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002bdc:	466b      	mov	r3, sp
 8002bde:	2200      	movs	r2, #0
 8002be0:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <LoadEEgroup+0xa0>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01d      	beq.n	8002c26 <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002bea:	2400      	movs	r4, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8002bec:	4e21      	ldr	r6, [pc, #132]	; (8002c74 <LoadEEgroup+0xa4>)
	for(i=0 ; i<N ; i++)			// N modules
 8002bee:	4d20      	ldr	r5, [pc, #128]	; (8002c70 <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8002bf0:	b2e1      	uxtb	r1, r4
 8002bf2:	0049      	lsls	r1, r1, #1
 8002bf4:	1871      	adds	r1, r6, r1
 8002bf6:	0020      	movs	r0, r4
 8002bf8:	30cb      	adds	r0, #203	; 0xcb
 8002bfa:	b280      	uxth	r0, r0
 8002bfc:	f004 fa8a 	bl	8007114 <EE_ReadVariable>
		add++;
 8002c00:	1c63      	adds	r3, r4, #1
 8002c02:	b29c      	uxth	r4, r3
	for(i=0 ; i<N ; i++)			// N modules
 8002c04:	782a      	ldrb	r2, [r5, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f1      	bhi.n	8002bf0 <LoadEEgroup+0x20>
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <LoadEEgroup+0xa8>)
 8002c0e:	4699      	mov	r9, r3
 8002c10:	0027      	movs	r7, r4
 8002c12:	379e      	adds	r7, #158	; 0x9e
 8002c14:	b2bf      	uxth	r7, r7
 8002c16:	34d0      	adds	r4, #208	; 0xd0
 8002c18:	b2a3      	uxth	r3, r4
 8002c1a:	4698      	mov	r8, r3
	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002c1c:	466b      	mov	r3, sp
 8002c1e:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002c20:	2300      	movs	r3, #0
 8002c22:	469a      	mov	sl, r3
 8002c24:	e00b      	b.n	8002c3e <LoadEEgroup+0x6e>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002c26:	2400      	movs	r4, #0
 8002c28:	e7f0      	b.n	8002c0c <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	4652      	mov	r2, sl
 8002c2e:	725a      	strb	r2, [r3, #9]
 8002c30:	230a      	movs	r3, #10
 8002c32:	469c      	mov	ip, r3
 8002c34:	44e1      	add	r9, ip
 8002c36:	3705      	adds	r7, #5
 8002c38:	b2bf      	uxth	r7, r7
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002c3a:	4547      	cmp	r7, r8
 8002c3c:	d010      	beq.n	8002c60 <LoadEEgroup+0x90>
 8002c3e:	1f7c      	subs	r4, r7, #5
 8002c40:	b2a4      	uxth	r4, r4
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002c42:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002c44:	0031      	movs	r1, r6
 8002c46:	0020      	movs	r0, r4
 8002c48:	f004 fa64 	bl	8007114 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8002c4c:	8833      	ldrh	r3, [r6, #0]
 8002c4e:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	702b      	strb	r3, [r5, #0]
 8002c54:	3401      	adds	r4, #1
 8002c56:	b2a4      	uxth	r4, r4
 8002c58:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002c5a:	42bc      	cmp	r4, r7
 8002c5c:	d1f2      	bne.n	8002c44 <LoadEEgroup+0x74>
 8002c5e:	e7e4      	b.n	8002c2a <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002c60:	2000      	movs	r0, #0
 8002c62:	b002      	add	sp, #8
 8002c64:	bce0      	pop	{r5, r6, r7}
 8002c66:	46ba      	mov	sl, r7
 8002c68:	46b1      	mov	r9, r6
 8002c6a:	46a8      	mov	r8, r5
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	2000001c 	.word	0x2000001c
 8002c74:	20000eb0 	.word	0x20000eb0
 8002c78:	20000e4c 	.word	0x20000e4c

08002c7c <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8002c80:	210e      	movs	r1, #14
 8002c82:	4469      	add	r1, sp
 8002c84:	2300      	movs	r3, #0
 8002c86:	800b      	strh	r3, [r1, #0]
 8002c88:	aa03      	add	r2, sp, #12
 8002c8a:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8002c8c:	20e4      	movs	r0, #228	; 0xe4
 8002c8e:	f004 fa41 	bl	8007114 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002c92:	2500      	movs	r5, #0
	if (!status1) {
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d102      	bne.n	8002c9e <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8002c98:	230e      	movs	r3, #14
 8002c9a:	446b      	add	r3, sp
 8002c9c:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8002c9e:	210e      	movs	r1, #14
 8002ca0:	4469      	add	r1, sp
 8002ca2:	20e5      	movs	r0, #229	; 0xe5
 8002ca4:	f004 fa36 	bl	8007114 <EE_ReadVariable>
 8002ca8:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8002caa:	a903      	add	r1, sp, #12
 8002cac:	20e6      	movs	r0, #230	; 0xe6
 8002cae:	f004 fa31 	bl	8007114 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002cb2:	4304      	orrs	r4, r0
 8002cb4:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002cb6:	2600      	movs	r6, #0
	if (!status1 && !status2) {
 8002cb8:	2c00      	cmp	r4, #0
 8002cba:	d106      	bne.n	8002cca <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8002cbc:	230e      	movs	r3, #14
 8002cbe:	446b      	add	r3, sp
 8002cc0:	881e      	ldrh	r6, [r3, #0]
 8002cc2:	0436      	lsls	r6, r6, #16
 8002cc4:	ab03      	add	r3, sp, #12
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8002cca:	210e      	movs	r1, #14
 8002ccc:	4469      	add	r1, sp
 8002cce:	20e7      	movs	r0, #231	; 0xe7
 8002cd0:	f004 fa20 	bl	8007114 <EE_ReadVariable>
 8002cd4:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8002cd6:	a903      	add	r1, sp, #12
 8002cd8:	20e8      	movs	r0, #232	; 0xe8
 8002cda:	f004 fa1b 	bl	8007114 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002cde:	4320      	orrs	r0, r4
 8002ce0:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002ce2:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d106      	bne.n	8002cf6 <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8002ce8:	230e      	movs	r3, #14
 8002cea:	446b      	add	r3, sp
 8002cec:	881c      	ldrh	r4, [r3, #0]
 8002cee:	0424      	lsls	r4, r4, #16
 8002cf0:	ab03      	add	r3, sp, #12
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8002cf6:	210e      	movs	r1, #14
 8002cf8:	4469      	add	r1, sp
 8002cfa:	20e9      	movs	r0, #233	; 0xe9
 8002cfc:	f004 fa0a 	bl	8007114 <EE_ReadVariable>
	if (!status1) {
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d107      	bne.n	8002d14 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8002d04:	230e      	movs	r3, #14
 8002d06:	446b      	add	r3, sp
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	0a19      	lsrs	r1, r3, #8
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <LoadEEstreams+0x134>)
 8002d0e:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <LoadEEstreams+0x138>)
 8002d12:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8002d14:	210e      	movs	r1, #14
 8002d16:	4469      	add	r1, sp
 8002d18:	20ea      	movs	r0, #234	; 0xea
 8002d1a:	f004 f9fb 	bl	8007114 <EE_ReadVariable>
	if (!status1) {
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d107      	bne.n	8002d32 <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 8002d22:	230e      	movs	r3, #14
 8002d24:	446b      	add	r3, sp
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	0a19      	lsrs	r1, r3, #8
 8002d2a:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <LoadEEstreams+0x13c>)
 8002d2c:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadEEstreams+0x140>)
 8002d30:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8002d32:	210e      	movs	r1, #14
 8002d34:	4469      	add	r1, sp
 8002d36:	20eb      	movs	r0, #235	; 0xeb
 8002d38:	f004 f9ec 	bl	8007114 <EE_ReadVariable>
	if (!status1) {
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d107      	bne.n	8002d50 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8002d40:	230e      	movs	r3, #14
 8002d42:	446b      	add	r3, sp
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	0a19      	lsrs	r1, r3, #8
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <LoadEEstreams+0x144>)
 8002d4a:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <LoadEEstreams+0x148>)
 8002d4e:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <LoadEEstreams+0x134>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <LoadEEstreams+0xe4>
 8002d58:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <LoadEEstreams+0x138>)
 8002d5a:	7812      	ldrb	r2, [r2, #0]
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d112      	bne.n	8002d86 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <LoadEEstreams+0x13c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <LoadEEstreams+0xf4>
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <LoadEEstreams+0x140>)
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d111      	bne.n	8002d94 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <LoadEEstreams+0x144>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <LoadEEstreams+0x104>
 8002d78:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <LoadEEstreams+0x148>)
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d110      	bne.n	8002da2 <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 8002d80:	2000      	movs	r0, #0
 8002d82:	b004      	add	sp, #16
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8002d86:	9200      	str	r2, [sp, #0]
 8002d88:	0022      	movs	r2, r4
 8002d8a:	0031      	movs	r1, r6
 8002d8c:	0028      	movs	r0, r5
 8002d8e:	f005 fbd3 	bl	8008538 <SetupDMAStreams>
 8002d92:	e7e5      	b.n	8002d60 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8002d94:	9200      	str	r2, [sp, #0]
 8002d96:	0022      	movs	r2, r4
 8002d98:	0031      	movs	r1, r6
 8002d9a:	0028      	movs	r0, r5
 8002d9c:	f005 fbcc 	bl	8008538 <SetupDMAStreams>
 8002da0:	e7e6      	b.n	8002d70 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8002da2:	9200      	str	r2, [sp, #0]
 8002da4:	0022      	movs	r2, r4
 8002da6:	0031      	movs	r1, r6
 8002da8:	0028      	movs	r0, r5
 8002daa:	f005 fbc5 	bl	8008538 <SetupDMAStreams>
 8002dae:	e7e7      	b.n	8002d80 <LoadEEstreams+0x104>
 8002db0:	20001131 	.word	0x20001131
 8002db4:	20000e49 	.word	0x20000e49
 8002db8:	20001132 	.word	0x20001132
 8002dbc:	20000e4a 	.word	0x20000e4a
 8002dc0:	20001133 	.word	0x20001133
 8002dc4:	20000e4b 	.word	0x20000e4b

08002dc8 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	46de      	mov	lr, fp
 8002dcc:	4657      	mov	r7, sl
 8002dce:	464e      	mov	r6, r9
 8002dd0:	4645      	mov	r5, r8
 8002dd2:	b5e0      	push	{r5, r6, r7, lr}
 8002dd4:	000f      	movs	r7, r1
 8002dd6:	0016      	movs	r6, r2
 8002dd8:	001c      	movs	r4, r3
 8002dda:	ab0a      	add	r3, sp, #40	; 0x28
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	469b      	mov	fp, r3
 8002de0:	ab0b      	add	r3, sp, #44	; 0x2c
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	469a      	mov	sl, r3
 8002de6:	ab0c      	add	r3, sp, #48	; 0x30
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	4699      	mov	r9, r3
 8002dec:	ab0d      	add	r3, sp, #52	; 0x34
 8002dee:	781d      	ldrb	r5, [r3, #0]
 8002df0:	ab0e      	add	r3, sp, #56	; 0x38
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8002df6:	0001      	movs	r1, r0
 8002df8:	20e4      	movs	r0, #228	; 0xe4
 8002dfa:	f004 f9b7 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8002dfe:	0a39      	lsrs	r1, r7, #8
 8002e00:	b289      	uxth	r1, r1
 8002e02:	20e5      	movs	r0, #229	; 0xe5
 8002e04:	f004 f9b2 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8002e08:	b2b9      	uxth	r1, r7
 8002e0a:	20e6      	movs	r0, #230	; 0xe6
 8002e0c:	f004 f9ae 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8002e10:	0a31      	lsrs	r1, r6, #8
 8002e12:	b289      	uxth	r1, r1
 8002e14:	20e7      	movs	r0, #231	; 0xe7
 8002e16:	f004 f9a9 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8002e1a:	b2b1      	uxth	r1, r6
 8002e1c:	20e8      	movs	r0, #232	; 0xe8
 8002e1e:	f004 f9a5 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8002e22:	0224      	lsls	r4, r4, #8
 8002e24:	445c      	add	r4, fp
 8002e26:	b2a1      	uxth	r1, r4
 8002e28:	20e9      	movs	r0, #233	; 0xe9
 8002e2a:	f004 f99f 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8002e2e:	4653      	mov	r3, sl
 8002e30:	0219      	lsls	r1, r3, #8
 8002e32:	4449      	add	r1, r9
 8002e34:	b289      	uxth	r1, r1
 8002e36:	20ea      	movs	r0, #234	; 0xea
 8002e38:	f004 f998 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8002e3c:	022d      	lsls	r5, r5, #8
 8002e3e:	4445      	add	r5, r8
 8002e40:	b2a9      	uxth	r1, r5
 8002e42:	20eb      	movs	r0, #235	; 0xeb
 8002e44:	f004 f992 	bl	800716c <EE_WriteVariable>
	
	return result;
}
 8002e48:	2000      	movs	r0, #0
 8002e4a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e4c:	46bb      	mov	fp, r7
 8002e4e:	46b2      	mov	sl, r6
 8002e50:	46a9      	mov	r9, r5
 8002e52:	46a0      	mov	r8, r4
 8002e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e58 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8002e5c:	208a      	movs	r0, #138	; 0x8a
 8002e5e:	466b      	mov	r3, sp
 8002e60:	1d99      	adds	r1, r3, #6
 8002e62:	0040      	lsls	r0, r0, #1
 8002e64:	f004 f956 	bl	8007114 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	d000      	beq.n	8002e6e <LoadEEparams+0x16>
 8002e6c:	e064      	b.n	8002f38 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8002e6e:	466b      	mov	r3, sp
 8002e70:	3306      	adds	r3, #6
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	4a46      	ldr	r2, [pc, #280]	; (8002f90 <LoadEEparams+0x138>)
 8002e76:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8002e7c:	2016      	movs	r0, #22
 8002e7e:	466b      	mov	r3, sp
 8002e80:	1d99      	adds	r1, r3, #6
 8002e82:	30ff      	adds	r0, #255	; 0xff
 8002e84:	f004 f946 	bl	8007114 <EE_ReadVariable>
	if (!status1) 
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d15c      	bne.n	8002f46 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8002e8c:	466b      	mov	r3, sp
 8002e8e:	88da      	ldrh	r2, [r3, #6]
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <LoadEEparams+0x138>)
 8002e92:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8002e94:	208b      	movs	r0, #139	; 0x8b
 8002e96:	466b      	mov	r3, sp
 8002e98:	1d99      	adds	r1, r3, #6
 8002e9a:	0040      	lsls	r0, r0, #1
 8002e9c:	f004 f93a 	bl	8007114 <EE_ReadVariable>
	if (!status1) 
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d153      	bne.n	8002f4c <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime = temp1;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	88da      	ldrh	r2, [r3, #6]
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <LoadEEparams+0x138>)
 8002eaa:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8002eac:	2018      	movs	r0, #24
 8002eae:	466b      	mov	r3, sp
 8002eb0:	1d99      	adds	r1, r3, #6
 8002eb2:	30ff      	adds	r0, #255	; 0xff
 8002eb4:	f004 f92e 	bl	8007114 <EE_ReadVariable>
	if (!status1) {
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d14a      	bne.n	8002f52 <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 8002ebc:	466b      	mov	r3, sp
 8002ebe:	3306      	adds	r3, #6
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <LoadEEparams+0x138>)
 8002ec4:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8002eca:	208c      	movs	r0, #140	; 0x8c
 8002ecc:	466b      	mov	r3, sp
 8002ece:	1d99      	adds	r1, r3, #6
 8002ed0:	0040      	lsls	r0, r0, #1
 8002ed2:	f004 f91f 	bl	8007114 <EE_ReadVariable>
 8002ed6:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8002ed8:	201a      	movs	r0, #26
 8002eda:	a901      	add	r1, sp, #4
 8002edc:	30ff      	adds	r0, #255	; 0xff
 8002ede:	f004 f919 	bl	8007114 <EE_ReadVariable>
	if (!status1 && !status2) 
 8002ee2:	4304      	orrs	r4, r0
 8002ee4:	b2a4      	uxth	r4, r4
 8002ee6:	2c00      	cmp	r4, #0
 8002ee8:	d13a      	bne.n	8002f60 <LoadEEparams+0x108>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8002eea:	ab01      	add	r3, sp, #4
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	466a      	mov	r2, sp
 8002ef2:	3206      	adds	r2, #6
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <LoadEEparams+0x138>)
 8002efa:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8002efc:	208d      	movs	r0, #141	; 0x8d
 8002efe:	466b      	mov	r3, sp
 8002f00:	1d99      	adds	r1, r3, #6
 8002f02:	0040      	lsls	r0, r0, #1
 8002f04:	f004 f906 	bl	8007114 <EE_ReadVariable>
	if (!status1) {
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d137      	bne.n	8002f7c <LoadEEparams+0x124>
		BOS.daylightsaving = (int8_t)temp1;
 8002f0c:	466b      	mov	r3, sp
 8002f0e:	3306      	adds	r3, #6
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <LoadEEparams+0x138>)
 8002f14:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8002f1a:	201c      	movs	r0, #28
 8002f1c:	466b      	mov	r3, sp
 8002f1e:	1d99      	adds	r1, r3, #6
 8002f20:	30ff      	adds	r0, #255	; 0xff
 8002f22:	f004 f8f7 	bl	8007114 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d12e      	bne.n	8002f88 <LoadEEparams+0x130>
		BOS.disableCLI = (uint8_t)temp1;
 8002f2a:	466b      	mov	r3, sp
 8002f2c:	799a      	ldrb	r2, [r3, #6]
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <LoadEEparams+0x138>)
 8002f30:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 8002f32:	2000      	movs	r0, #0
 8002f34:	b002      	add	sp, #8
 8002f36:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <LoadEEparams+0x138>)
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <LoadEEparams+0x13c>)
 8002f3c:	7991      	ldrb	r1, [r2, #6]
 8002f3e:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8002f40:	79d2      	ldrb	r2, [r2, #7]
 8002f42:	71da      	strb	r2, [r3, #7]
 8002f44:	e79a      	b.n	8002e7c <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <LoadEEparams+0x13c>)
 8002f48:	881a      	ldrh	r2, [r3, #0]
 8002f4a:	e7a1      	b.n	8002e90 <LoadEEparams+0x38>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <LoadEEparams+0x13c>)
 8002f4e:	885a      	ldrh	r2, [r3, #2]
 8002f50:	e7aa      	b.n	8002ea8 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <LoadEEparams+0x138>)
 8002f54:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <LoadEEparams+0x13c>)
 8002f56:	7911      	ldrb	r1, [r2, #4]
 8002f58:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8002f5a:	7952      	ldrb	r2, [r2, #5]
 8002f5c:	715a      	strb	r2, [r3, #5]
 8002f5e:	e7b4      	b.n	8002eca <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <LoadEEparams+0x140>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <LoadEEparams+0x138>)
 8002f6a:	22e1      	movs	r2, #225	; 0xe1
 8002f6c:	0252      	lsls	r2, r2, #9
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e7c4      	b.n	8002efc <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <LoadEEparams+0x13c>)
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <LoadEEparams+0x138>)
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	e7bf      	b.n	8002efc <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <LoadEEparams+0x138>)
 8002f7e:	2218      	movs	r2, #24
 8002f80:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8002f82:	2200      	movs	r2, #0
 8002f84:	731a      	strb	r2, [r3, #12]
 8002f86:	e7c8      	b.n	8002f1a <LoadEEparams+0xc2>
		BOS.disableCLI = BOS_default.disableCLI;
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <LoadEEparams+0x13c>)
 8002f8a:	7eda      	ldrb	r2, [r3, #27]
 8002f8c:	e7cf      	b.n	8002f2e <LoadEEparams+0xd6>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20006940 	.word	0x20006940
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000a7e 	.word	0x20000a7e

08002f9c <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8002f9c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 8002f9e:	4c1a      	ldr	r4, [pc, #104]	; (8003008 <SaveEEparams+0x6c>)
 8002fa0:	79e3      	ldrb	r3, [r4, #7]
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	79a1      	ldrb	r1, [r4, #6]
 8002fa6:	4319      	orrs	r1, r3
 8002fa8:	208a      	movs	r0, #138	; 0x8a
 8002faa:	0040      	lsls	r0, r0, #1
 8002fac:	f004 f8de 	bl	800716c <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8002fb0:	8821      	ldrh	r1, [r4, #0]
 8002fb2:	2016      	movs	r0, #22
 8002fb4:	30ff      	adds	r0, #255	; 0xff
 8002fb6:	f004 f8d9 	bl	800716c <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8002fba:	8861      	ldrh	r1, [r4, #2]
 8002fbc:	208b      	movs	r0, #139	; 0x8b
 8002fbe:	0040      	lsls	r0, r0, #1
 8002fc0:	f004 f8d4 	bl	800716c <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8002fc4:	7963      	ldrb	r3, [r4, #5]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	7b21      	ldrb	r1, [r4, #12]
 8002fca:	4319      	orrs	r1, r3
 8002fcc:	2018      	movs	r0, #24
 8002fce:	30ff      	adds	r0, #255	; 0xff
 8002fd0:	f004 f8cc 	bl	800716c <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8002fd4:	8921      	ldrh	r1, [r4, #8]
 8002fd6:	208c      	movs	r0, #140	; 0x8c
 8002fd8:	0040      	lsls	r0, r0, #1
 8002fda:	f004 f8c7 	bl	800716c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8002fde:	8961      	ldrh	r1, [r4, #10]
 8002fe0:	201a      	movs	r0, #26
 8002fe2:	30ff      	adds	r0, #255	; 0xff
 8002fe4:	f004 f8c2 	bl	800716c <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8002fe8:	7b63      	ldrb	r3, [r4, #13]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	7921      	ldrb	r1, [r4, #4]
 8002fee:	4319      	orrs	r1, r3
 8002ff0:	208d      	movs	r0, #141	; 0x8d
 8002ff2:	0040      	lsls	r0, r0, #1
 8002ff4:	f004 f8ba 	bl	800716c <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8002ff8:	7ee1      	ldrb	r1, [r4, #27]
 8002ffa:	201c      	movs	r0, #28
 8002ffc:	30ff      	adds	r0, #255	; 0xff
 8002ffe:	f004 f8b5 	bl	800716c <EE_WriteVariable>
	
	return result;
}
 8003002:	2000      	movs	r0, #0
 8003004:	bd10      	pop	{r4, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20006940 	.word	0x20006940

0800300c <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	46ce      	mov	lr, r9
 8003010:	4647      	mov	r7, r8
 8003012:	b580      	push	{r7, lr}
 8003014:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8003016:	231e      	movs	r3, #30
 8003018:	446b      	add	r3, sp
 800301a:	2200      	movs	r2, #0
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	4e36      	ldr	r6, [pc, #216]	; (80030f8 <LoadEEbuttons+0xec>)
 8003020:	24ec      	movs	r4, #236	; 0xec
 8003022:	2501      	movs	r5, #1
 8003024:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
				button[i+1].releasedY3Sec = (uint8_t)temp16;
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003026:	2301      	movs	r3, #1
 8003028:	4698      	mov	r8, r3
 800302a:	e04c      	b.n	80030c6 <LoadEEbuttons+0xba>
				button[i+1].type = temp8 & 0x0F;
 800302c:	72b2      	strb	r2, [r6, #10]
				button[i+1].events = (uint8_t)temp16;
 800302e:	7473      	strb	r3, [r6, #17]
 8003030:	00a8      	lsls	r0, r5, #2
 8003032:	b283      	uxth	r3, r0
 8003034:	4699      	mov	r9, r3
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8003036:	0018      	movs	r0, r3
 8003038:	30e9      	adds	r0, #233	; 0xe9
 800303a:	b280      	uxth	r0, r0
 800303c:	231e      	movs	r3, #30
 800303e:	446b      	add	r3, sp
 8003040:	0019      	movs	r1, r3
 8003042:	f004 f867 	bl	8007114 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8003046:	466b      	mov	r3, sp
 8003048:	8bdb      	ldrh	r3, [r3, #30]
 800304a:	0a1a      	lsrs	r2, r3, #8
 800304c:	72f2      	strb	r2, [r6, #11]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 800304e:	73b3      	strb	r3, [r6, #14]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8003050:	4648      	mov	r0, r9
 8003052:	30ea      	adds	r0, #234	; 0xea
 8003054:	b280      	uxth	r0, r0
 8003056:	231e      	movs	r3, #30
 8003058:	446b      	add	r3, sp
 800305a:	0019      	movs	r1, r3
 800305c:	f004 f85a 	bl	8007114 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8003060:	466b      	mov	r3, sp
 8003062:	8bdb      	ldrh	r3, [r3, #30]
 8003064:	0a1a      	lsrs	r2, r3, #8
 8003066:	7332      	strb	r2, [r6, #12]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8003068:	73f3      	strb	r3, [r6, #15]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 800306a:	4648      	mov	r0, r9
 800306c:	30eb      	adds	r0, #235	; 0xeb
 800306e:	b280      	uxth	r0, r0
 8003070:	231e      	movs	r3, #30
 8003072:	446b      	add	r3, sp
 8003074:	0019      	movs	r1, r3
 8003076:	f004 f84d 	bl	8007114 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 800307a:	466b      	mov	r3, sp
 800307c:	8bdb      	ldrh	r3, [r3, #30]
 800307e:	0a1a      	lsrs	r2, r3, #8
 8003080:	7372      	strb	r2, [r6, #13]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8003082:	7433      	strb	r3, [r6, #16]
				AddPortButton(button[i+1].type, i+1);
 8003084:	b2eb      	uxtb	r3, r5
 8003086:	7ab0      	ldrb	r0, [r6, #10]
 8003088:	4699      	mov	r9, r3
 800308a:	0019      	movs	r1, r3
 800308c:	f004 ff76 	bl	8007f7c <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003090:	7c71      	ldrb	r1, [r6, #17]
 8003092:	7af3      	ldrb	r3, [r6, #11]
 8003094:	104a      	asrs	r2, r1, #1
 8003096:	4640      	mov	r0, r8
 8003098:	4002      	ands	r2, r0
 800309a:	4001      	ands	r1, r0
 800309c:	2000      	movs	r0, #0
 800309e:	9005      	str	r0, [sp, #20]
 80030a0:	7c30      	ldrb	r0, [r6, #16]
 80030a2:	9004      	str	r0, [sp, #16]
 80030a4:	7bf0      	ldrb	r0, [r6, #15]
 80030a6:	9003      	str	r0, [sp, #12]
 80030a8:	7bb0      	ldrb	r0, [r6, #14]
 80030aa:	9002      	str	r0, [sp, #8]
 80030ac:	7b70      	ldrb	r0, [r6, #13]
 80030ae:	9001      	str	r0, [sp, #4]
 80030b0:	7b30      	ldrb	r0, [r6, #12]
 80030b2:	9000      	str	r0, [sp, #0]
 80030b4:	4648      	mov	r0, r9
 80030b6:	f005 f87b 	bl	80081b0 <SetButtonEvents>
 80030ba:	3501      	adds	r5, #1
 80030bc:	3404      	adds	r4, #4
 80030be:	b2a4      	uxth	r4, r4
 80030c0:	3609      	adds	r6, #9
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 80030c2:	2d08      	cmp	r5, #8
 80030c4:	d012      	beq.n	80030ec <LoadEEbuttons+0xe0>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 80030c6:	231e      	movs	r3, #30
 80030c8:	446b      	add	r3, sp
 80030ca:	0019      	movs	r1, r3
 80030cc:	0020      	movs	r0, r4
 80030ce:	f004 f821 	bl	8007114 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d1f1      	bne.n	80030ba <LoadEEbuttons+0xae>
			temp8 = (uint8_t)(temp16 >> 8);
 80030d6:	466b      	mov	r3, sp
 80030d8:	8bdb      	ldrh	r3, [r3, #30]
 80030da:	0a19      	lsrs	r1, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 80030dc:	0b1a      	lsrs	r2, r3, #12
 80030de:	42aa      	cmp	r2, r5
 80030e0:	d1eb      	bne.n	80030ba <LoadEEbuttons+0xae>
 80030e2:	003a      	movs	r2, r7
 80030e4:	400a      	ands	r2, r1
 80030e6:	420f      	tst	r7, r1
 80030e8:	d0e7      	beq.n	80030ba <LoadEEbuttons+0xae>
 80030ea:	e79f      	b.n	800302c <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 80030ec:	2000      	movs	r0, #0
 80030ee:	b009      	add	sp, #36	; 0x24
 80030f0:	bcc0      	pop	{r6, r7}
 80030f2:	46b9      	mov	r9, r7
 80030f4:	46b0      	mov	r8, r6
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f8:	200014ec 	.word	0x200014ec

080030fc <LoadEEvars>:
{
 80030fc:	b510      	push	{r4, lr}
	LoadROtopology();
 80030fe:	f7ff fc1f 	bl	8002940 <LoadROtopology>
	LoadEEportsDir();
 8003102:	f7ff fcbb 	bl	8002a7c <LoadEEportsDir>
	LoadEEalias();
 8003106:	f7ff fd1d 	bl	8002b44 <LoadEEalias>
	LoadEEgroup();
 800310a:	f7ff fd61 	bl	8002bd0 <LoadEEgroup>
	LoadEEstreams();
 800310e:	f7ff fdb5 	bl	8002c7c <LoadEEstreams>
	LoadEEparams();	
 8003112:	f7ff fea1 	bl	8002e58 <LoadEEparams>
	LoadEEbuttons();	
 8003116:	f7ff ff79 	bl	800300c <LoadEEbuttons>
	LoadROsnippets();
 800311a:	f7ff fb8b 	bl	8002834 <LoadROsnippets>
}
 800311e:	bd10      	pop	{r4, pc}

08003120 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003120:	b530      	push	{r4, r5, lr}
 8003122:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003124:	ab04      	add	r3, sp, #16
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	ab07      	add	r3, sp, #28
 800312a:	2212      	movs	r2, #18
 800312c:	446a      	add	r2, sp
 800312e:	a908      	add	r1, sp, #32
 8003130:	2001      	movs	r0, #1
 8003132:	f008 fe97 	bl	800be64 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8003136:	ac03      	add	r4, sp, #12
 8003138:	9400      	str	r4, [sp, #0]
 800313a:	ab05      	add	r3, sp, #20
 800313c:	220e      	movs	r2, #14
 800313e:	446a      	add	r2, sp
 8003140:	a906      	add	r1, sp, #24
 8003142:	2002      	movs	r0, #2
 8003144:	f008 fe8e 	bl	800be64 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2500      	movs	r5, #0
 800314e:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003150:	466b      	mov	r3, sp
 8003152:	8a5b      	ldrh	r3, [r3, #18]
 8003154:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8003156:	a909      	add	r1, sp, #36	; 0x24
 8003158:	9808      	ldr	r0, [sp, #32]
 800315a:	f00c fe03 	bl	800fd64 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315e:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003160:	2302      	movs	r3, #2
 8003162:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003164:	8823      	ldrh	r3, [r4, #0]
 8003166:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003168:	a909      	add	r1, sp, #36	; 0x24
 800316a:	9805      	ldr	r0, [sp, #20]
 800316c:	f00c fdfa 	bl	800fd64 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003170:	466b      	mov	r3, sp
 8003172:	8a59      	ldrh	r1, [r3, #18]
 8003174:	2200      	movs	r2, #0
 8003176:	9808      	ldr	r0, [sp, #32]
 8003178:	f00c fee4 	bl	800ff44 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 800317c:	2005      	movs	r0, #5
 800317e:	f009 fa47 	bl	800c610 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003182:	8821      	ldrh	r1, [r4, #0]
 8003184:	9805      	ldr	r0, [sp, #20]
 8003186:	f00c fed7 	bl	800ff38 <HAL_GPIO_ReadPin>
 800318a:	0003      	movs	r3, r0
		{
			return 1;
		}
	}

	return 0;
 800318c:	2000      	movs	r0, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <IsLowerCLIbaud+0x76>
}
 8003192:	b00f      	add	sp, #60	; 0x3c
 8003194:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003196:	3312      	adds	r3, #18
 8003198:	446b      	add	r3, sp
 800319a:	8819      	ldrh	r1, [r3, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	9808      	ldr	r0, [sp, #32]
 80031a0:	f00c fed0 	bl	800ff44 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 80031a4:	2005      	movs	r0, #5
 80031a6:	f009 fa33 	bl	800c610 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 80031aa:	ab03      	add	r3, sp, #12
 80031ac:	8819      	ldrh	r1, [r3, #0]
 80031ae:	9805      	ldr	r0, [sp, #20]
 80031b0:	f00c fec2 	bl	800ff38 <HAL_GPIO_ReadPin>
 80031b4:	3801      	subs	r0, #1
 80031b6:	4243      	negs	r3, r0
 80031b8:	4158      	adcs	r0, r3
			return 1;
 80031ba:	b2c0      	uxtb	r0, r0
 80031bc:	e7e9      	b.n	8003192 <IsLowerCLIbaud+0x72>
	...

080031c0 <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 80031c0:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <EE_FormatForFactoryReset+0x20>)
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <EE_FormatForFactoryReset+0x24>)
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d100      	bne.n	80031ce <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 80031cc:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 80031ce:	f004 f87d 	bl	80072cc <EE_Format>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d1fa      	bne.n	80031cc <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 80031d6:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <EE_FormatForFactoryReset+0x24>)
 80031d8:	4a01      	ldr	r2, [pc, #4]	; (80031e0 <EE_FormatForFactoryReset+0x20>)
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	e7f6      	b.n	80031cc <EE_FormatForFactoryReset+0xc>
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	beefdead 	.word	0xbeefdead
 80031e4:	20007ff0 	.word	0x20007ff0

080031e8 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 80031e8:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 80031ea:	f009 fc05 	bl	800c9f8 <GetUart>
 80031ee:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 80031f0:	23e1      	movs	r3, #225	; 0xe1
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003202:	f00e fb7d 	bl	8011900 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	2120      	movs	r1, #32
 800320c:	430b      	orrs	r3, r1
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bd10      	pop	{r4, pc}
	...

08003214 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003214:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <IsModuleParameter+0x14>)
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	f7fc ff73 	bl	8000104 <strcmp>
 800321e:	4243      	negs	r3, r0
 8003220:	4158      	adcs	r0, r3
 8003222:	b2c0      	uxtb	r0, r0
			return i+1;
  }
	return 0;
}
 8003224:	bd10      	pop	{r4, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000084 	.word	0x20000084

0800322c <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 8003230:	491b      	ldr	r1, [pc, #108]	; (80032a0 <IsMathOperator+0x74>)
 8003232:	f7fc ff67 	bl	8000104 <strcmp>
 8003236:	0006      	movs	r6, r0
 8003238:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 800323a:	4c1a      	ldr	r4, [pc, #104]	; (80032a4 <IsMathOperator+0x78>)
		if (!strcmp(string, "="))
 800323c:	2e00      	cmp	r6, #0
 800323e:	d023      	beq.n	8003288 <IsMathOperator+0x5c>
		else if (!strcmp(string, ">"))
 8003240:	0021      	movs	r1, r4
 8003242:	0028      	movs	r0, r5
 8003244:	f7fc ff5e 	bl	8000104 <strcmp>
 8003248:	2800      	cmp	r0, #0
 800324a:	d01f      	beq.n	800328c <IsMathOperator+0x60>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <IsMathOperator+0x7c>)
 800324e:	0028      	movs	r0, r5
 8003250:	f7fc ff58 	bl	8000104 <strcmp>
 8003254:	2800      	cmp	r0, #0
 8003256:	d01b      	beq.n	8003290 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003258:	4914      	ldr	r1, [pc, #80]	; (80032ac <IsMathOperator+0x80>)
 800325a:	0028      	movs	r0, r5
 800325c:	f7fc ff52 	bl	8000104 <strcmp>
 8003260:	2800      	cmp	r0, #0
 8003262:	d017      	beq.n	8003294 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <IsMathOperator+0x84>)
 8003266:	0028      	movs	r0, r5
 8003268:	f7fc ff4c 	bl	8000104 <strcmp>
 800326c:	2800      	cmp	r0, #0
 800326e:	d013      	beq.n	8003298 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003270:	4910      	ldr	r1, [pc, #64]	; (80032b4 <IsMathOperator+0x88>)
 8003272:	0028      	movs	r0, r5
 8003274:	f7fc ff46 	bl	8000104 <strcmp>
 8003278:	2800      	cmp	r0, #0
 800327a:	d00f      	beq.n	800329c <IsMathOperator+0x70>
 800327c:	3f01      	subs	r7, #1
 800327e:	b2ff      	uxtb	r7, r7
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003280:	2f00      	cmp	r7, #0
 8003282:	d1db      	bne.n	800323c <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
  }
	return 0;
}
 8003284:	0038      	movs	r0, r7
 8003286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003288:	2701      	movs	r7, #1
 800328a:	e7fb      	b.n	8003284 <IsMathOperator+0x58>
			return MATH_GREATER;
 800328c:	2702      	movs	r7, #2
 800328e:	e7f9      	b.n	8003284 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003290:	2703      	movs	r7, #3
 8003292:	e7f7      	b.n	8003284 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003294:	2704      	movs	r7, #4
 8003296:	e7f5      	b.n	8003284 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003298:	2705      	movs	r7, #5
 800329a:	e7f3      	b.n	8003284 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 800329c:	2706      	movs	r7, #6
 800329e:	e7f1      	b.n	8003284 <IsMathOperator+0x58>
 80032a0:	08018320 	.word	0x08018320
 80032a4:	08018324 	.word	0x08018324
 80032a8:	08018328 	.word	0x08018328
 80032ac:	0801832c 	.word	0x0801832c
 80032b0:	08018330 	.word	0x08018330
 80032b4:	08018334 	.word	0x08018334

080032b8 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	b083      	sub	sp, #12
 80032bc:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 80032be:	2401      	movs	r4, #1
	{
		if (port != ignore) 
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 80032c0:	4d0e      	ldr	r5, [pc, #56]	; (80032fc <ExploreNeighbors+0x44>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 80032c2:	2603      	movs	r6, #3
 80032c4:	e003      	b.n	80032ce <ExploreNeighbors+0x16>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 80032c6:	3401      	adds	r4, #1
 80032c8:	b2e4      	uxtb	r4, r4
 80032ca:	2c07      	cmp	r4, #7
 80032cc:	d012      	beq.n	80032f4 <ExploreNeighbors+0x3c>
		if (port != ignore) 
 80032ce:	42a7      	cmp	r7, r4
 80032d0:	d0f9      	beq.n	80032c6 <ExploreNeighbors+0xe>
			messageParams[0] = (uint8_t) (myPN >> 8);
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <ExploreNeighbors+0x48>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	0a1a      	lsrs	r2, r3, #8
 80032d8:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 80032da:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 80032dc:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 80032de:	9600      	str	r6, [sp, #0]
 80032e0:	230a      	movs	r3, #10
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	0020      	movs	r0, r4
 80032e8:	f005 fa44 	bl	8008774 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80032ec:	200a      	movs	r0, #10
 80032ee:	f009 fcd4 	bl	800cc9a <osDelay>
 80032f2:	e7e8      	b.n	80032c6 <ExploreNeighbors+0xe>
		}
	}
	
	return result;
}
 80032f4:	2000      	movs	r0, #0
 80032f6:	b003      	add	sp, #12
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20000f28 	.word	0x20000f28
 8003300:	20000050 	.word	0x20000050

08003304 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46de      	mov	lr, fp
 8003308:	4657      	mov	r7, sl
 800330a:	464e      	mov	r6, r9
 800330c:	4645      	mov	r5, r8
 800330e:	b5e0      	push	{r5, r6, r7, lr}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003314:	4b47      	ldr	r3, [pc, #284]	; (8003434 <FindBroadcastRoutes+0x130>)
 8003316:	781d      	ldrb	r5, [r3, #0]
 8003318:	1deb      	adds	r3, r5, #7
 800331a:	08db      	lsrs	r3, r3, #3
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	466a      	mov	r2, sp
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	469d      	mov	sp, r3
 8003324:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003326:	2d00      	cmp	r5, #0
 8003328:	d009      	beq.n	800333e <FindBroadcastRoutes+0x3a>
 800332a:	4a43      	ldr	r2, [pc, #268]	; (8003438 <FindBroadcastRoutes+0x134>)
 800332c:	2300      	movs	r3, #0
	{	
		modules[m] = 0;
 800332e:	2100      	movs	r1, #0
 8003330:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] = 0;
 8003332:	8011      	strh	r1, [r2, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	3202      	adds	r2, #2
	for(m=0 ; m<N ; m++)
 8003338:	b2de      	uxtb	r6, r3
 800333a:	42b5      	cmp	r5, r6
 800333c:	d8f8      	bhi.n	8003330 <FindBroadcastRoutes+0x2c>
	}
	modules[src-1] = ++level;					// Tag the source
 800333e:	3801      	subs	r0, #1
 8003340:	2301      	movs	r3, #1
 8003342:	5423      	strb	r3, [r4, r0]
 8003344:	2216      	movs	r2, #22
 8003346:	4342      	muls	r2, r0
 8003348:	4b3c      	ldr	r3, [pc, #240]	; (800343c <FindBroadcastRoutes+0x138>)
 800334a:	18d2      	adds	r2, r2, r3
 800334c:	2100      	movs	r1, #0
	
	for(p=1 ; p<=NumOfPorts ; p++)
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 800334e:	4e3a      	ldr	r6, [pc, #232]	; (8003438 <FindBroadcastRoutes+0x134>)
 8003350:	0040      	lsls	r0, r0, #1
 8003352:	2301      	movs	r3, #1
 8003354:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003356:	3301      	adds	r3, #1
 8003358:	469c      	mov	ip, r3
 800335a:	607d      	str	r5, [r7, #4]
 800335c:	46a3      	mov	fp, r4
 800335e:	e003      	b.n	8003368 <FindBroadcastRoutes+0x64>
 8003360:	3101      	adds	r1, #1
 8003362:	3202      	adds	r2, #2
	for(p=1 ; p<=NumOfPorts ; p++)
 8003364:	2906      	cmp	r1, #6
 8003366:	d011      	beq.n	800338c <FindBroadcastRoutes+0x88>
		if (array[src-1][p]) 
 8003368:	8853      	ldrh	r3, [r2, #2]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f8      	beq.n	8003360 <FindBroadcastRoutes+0x5c>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 800336e:	5b85      	ldrh	r5, [r0, r6]
 8003370:	46a9      	mov	r9, r5
 8003372:	4645      	mov	r5, r8
 8003374:	408d      	lsls	r5, r1
 8003376:	46aa      	mov	sl, r5
 8003378:	464d      	mov	r5, r9
 800337a:	4654      	mov	r4, sl
 800337c:	4325      	orrs	r5, r4
 800337e:	5385      	strh	r5, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003380:	08db      	lsrs	r3, r3, #3
 8003382:	445b      	add	r3, fp
 8003384:	3b01      	subs	r3, #1
 8003386:	4664      	mov	r4, ip
 8003388:	701c      	strb	r4, [r3, #0]
 800338a:	e7e9      	b.n	8003360 <FindBroadcastRoutes+0x5c>
 800338c:	687d      	ldr	r5, [r7, #4]
 800338e:	465c      	mov	r4, fp
	++level;													// Move one level
 8003390:	2302      	movs	r3, #2
 8003392:	4699      	mov	r9, r3
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */
	
	do
	{	
		untaged = 0;																			// Reset the untaged counter
		++level;																					// Move one level
 8003394:	464b      	mov	r3, r9
 8003396:	3301      	adds	r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4699      	mov	r9, r3
		
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 800339c:	2d00      	cmp	r5, #0
 800339e:	d040      	beq.n	8003422 <FindBroadcastRoutes+0x11e>
 80033a0:	4826      	ldr	r0, [pc, #152]	; (800343c <FindBroadcastRoutes+0x138>)
 80033a2:	2200      	movs	r2, #0
		untaged = 0;																			// Reset the untaged counter
 80033a4:	2600      	movs	r6, #0
		{
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 80033a6:	2301      	movs	r3, #1
 80033a8:	425b      	negs	r3, r3
 80033aa:	444b      	add	r3, r9
 80033ac:	46b4      	mov	ip, r6
 80033ae:	001e      	movs	r6, r3
 80033b0:	e02a      	b.n	8003408 <FindBroadcastRoutes+0x104>
 80033b2:	3101      	adds	r1, #1
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 80033b4:	2907      	cmp	r1, #7
 80033b6:	d01f      	beq.n	80033f8 <FindBroadcastRoutes+0xf4>
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 80033b8:	004b      	lsls	r3, r1, #1
 80033ba:	5ac3      	ldrh	r3, [r0, r3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f8      	beq.n	80033b2 <FindBroadcastRoutes+0xae>
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	5ce5      	ldrb	r5, [r4, r3]
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	d1f3      	bne.n	80033b2 <FindBroadcastRoutes+0xae>
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 80033ca:	1e4d      	subs	r5, r1, #1
 80033cc:	46aa      	mov	sl, r5
 80033ce:	2501      	movs	r5, #1
 80033d0:	4656      	mov	r6, sl
 80033d2:	40b5      	lsls	r5, r6
 80033d4:	46aa      	mov	sl, r5
 80033d6:	4d18      	ldr	r5, [pc, #96]	; (8003438 <FindBroadcastRoutes+0x134>)
 80033d8:	5b55      	ldrh	r5, [r2, r5]
 80033da:	46ab      	mov	fp, r5
 80033dc:	4655      	mov	r5, sl
 80033de:	465e      	mov	r6, fp
 80033e0:	4335      	orrs	r5, r6
 80033e2:	46aa      	mov	sl, r5
 80033e4:	4d14      	ldr	r5, [pc, #80]	; (8003438 <FindBroadcastRoutes+0x134>)
 80033e6:	4656      	mov	r6, sl
 80033e8:	5356      	strh	r6, [r2, r5]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 80033ea:	464d      	mov	r5, r9
 80033ec:	54e5      	strb	r5, [r4, r3]
						++untaged;
 80033ee:	4663      	mov	r3, ip
 80033f0:	3301      	adds	r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	469c      	mov	ip, r3
 80033f6:	e7dc      	b.n	80033b2 <FindBroadcastRoutes+0xae>
 80033f8:	4642      	mov	r2, r8
 80033fa:	687d      	ldr	r5, [r7, #4]
 80033fc:	683e      	ldr	r6, [r7, #0]
 80033fe:	3201      	adds	r2, #1
 8003400:	3016      	adds	r0, #22
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003402:	b2d3      	uxtb	r3, r2
 8003404:	429d      	cmp	r5, r3
 8003406:	d909      	bls.n	800341c <FindBroadcastRoutes+0x118>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003408:	5ca3      	ldrb	r3, [r4, r2]
 800340a:	42b3      	cmp	r3, r6
 800340c:	d1f7      	bne.n	80033fe <FindBroadcastRoutes+0xfa>
 800340e:	0053      	lsls	r3, r2, #1
 8003410:	2101      	movs	r1, #1
 8003412:	607d      	str	r5, [r7, #4]
 8003414:	4690      	mov	r8, r2
 8003416:	603e      	str	r6, [r7, #0]
 8003418:	001a      	movs	r2, r3
 800341a:	e7cd      	b.n	80033b8 <FindBroadcastRoutes+0xb4>
 800341c:	4666      	mov	r6, ip
					}
				}			
			}
		}
	} 
	while (untaged);
 800341e:	2e00      	cmp	r6, #0
 8003420:	d1b8      	bne.n	8003394 <FindBroadcastRoutes+0x90>

	
	return result;
}
 8003422:	2000      	movs	r0, #0
 8003424:	46bd      	mov	sp, r7
 8003426:	b003      	add	sp, #12
 8003428:	bcf0      	pop	{r4, r5, r6, r7}
 800342a:	46bb      	mov	fp, r7
 800342c:	46b2      	mov	sl, r6
 800342e:	46a9      	mov	r9, r5
 8003430:	46a0      	mov	r8, r4
 8003432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003434:	2000001c 	.word	0x2000001c
 8003438:	20000ca8 	.word	0x20000ca8
 800343c:	20000a80 	.word	0x20000a80

08003440 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003442:	46de      	mov	lr, fp
 8003444:	4657      	mov	r7, sl
 8003446:	464e      	mov	r6, r9
 8003448:	4645      	mov	r5, r8
 800344a:	b5e0      	push	{r5, r6, r7, lr}
 800344c:	b091      	sub	sp, #68	; 0x44
 800344e:	0006      	movs	r6, r0
 8003450:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8003452:	2400      	movs	r4, #0
 8003454:	9403      	str	r4, [sp, #12]
 8003456:	222e      	movs	r2, #46	; 0x2e
 8003458:	2100      	movs	r1, #0
 800345a:	a804      	add	r0, sp, #16
 800345c:	f00e fe29 	bl	80120b2 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 8003460:	2219      	movs	r2, #25
 8003462:	2100      	movs	r1, #0
 8003464:	4858      	ldr	r0, [pc, #352]	; (80035c8 <FindRoute+0x188>)
 8003466:	f00e fe24 	bl	80120b2 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 800346a:	0035      	movs	r5, r6
 800346c:	1e70      	subs	r0, r6, #1
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <FindRoute+0x18c>)
 8003470:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003472:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <FindRoute+0x190>)
 8003474:	541c      	strb	r4, [r3, r0]
 8003476:	2616      	movs	r6, #22
 8003478:	4370      	muls	r0, r6
 800347a:	4e56      	ldr	r6, [pc, #344]	; (80035d4 <FindRoute+0x194>)
 800347c:	1981      	adds	r1, r0, r6
 800347e:	9101      	str	r1, [sp, #4]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003480:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003482:	4653      	mov	r3, sl
 8003484:	b29a      	uxth	r2, r3
 8003486:	e002      	b.n	800348e <FindRoute+0x4e>
	for(int col=1 ; col<=6 ; col++)
 8003488:	3001      	adds	r0, #1
 800348a:	2807      	cmp	r0, #7
 800348c:	d010      	beq.n	80034b0 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 800348e:	0043      	lsls	r3, r0, #1
 8003490:	5acb      	ldrh	r3, [r1, r3]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f8      	beq.n	8003488 <FindRoute+0x48>
 8003496:	08db      	lsrs	r3, r3, #3
 8003498:	4293      	cmp	r3, r2
 800349a:	d1f5      	bne.n	8003488 <FindRoute+0x48>
			routeDist[desID-1] = 1;
 800349c:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <FindRoute+0x18c>)
 800349e:	4453      	add	r3, sl
 80034a0:	3b01      	subs	r3, #1
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 80034a6:	4b48      	ldr	r3, [pc, #288]	; (80035c8 <FindRoute+0x188>)
 80034a8:	4652      	mov	r2, sl
 80034aa:	701a      	strb	r2, [r3, #0]
			return col;	
 80034ac:	b2c0      	uxtb	r0, r0
 80034ae:	e083      	b.n	80035b8 <FindRoute+0x178>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <FindRoute+0x198>)
 80034b2:	7819      	ldrb	r1, [r3, #0]
 80034b4:	2900      	cmp	r1, #0
 80034b6:	dd14      	ble.n	80034e2 <FindRoute+0xa2>
 80034b8:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 80034ba:	4a44      	ldr	r2, [pc, #272]	; (80035cc <FindRoute+0x18c>)
 80034bc:	1e54      	subs	r4, r2, #1
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	4690      	mov	r8, r2
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 80034c2:	4a43      	ldr	r2, [pc, #268]	; (80035d0 <FindRoute+0x190>)
 80034c4:	1e50      	subs	r0, r2, #1
 80034c6:	2200      	movs	r2, #0
 80034c8:	4694      	mov	ip, r2
 80034ca:	e002      	b.n	80034d2 <FindRoute+0x92>
	for (int i=1 ; i<=N ; i++)   					
 80034cc:	3301      	adds	r3, #1
 80034ce:	428b      	cmp	r3, r1
 80034d0:	dc07      	bgt.n	80034e2 <FindRoute+0xa2>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 80034d2:	429d      	cmp	r5, r3
 80034d4:	d0fa      	beq.n	80034cc <FindRoute+0x8c>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 80034d6:	4642      	mov	r2, r8
 80034d8:	54e2      	strb	r2, [r4, r3]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 80034da:	181a      	adds	r2, r3, r0
 80034dc:	4666      	mov	r6, ip
 80034de:	7016      	strb	r6, [r2, #0]
 80034e0:	e7f4      	b.n	80034cc <FindRoute+0x8c>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 80034e2:	2400      	movs	r4, #0
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <FindRoute+0x194>)
 80034e6:	4698      	mov	r8, r3
 80034e8:	230c      	movs	r3, #12
 80034ea:	4443      	add	r3, r8
 80034ec:	4699      	mov	r9, r3
			if (array[u-1][n])										// There's a neighbor v at this port n
			{	
				v = (array[u-1][n]>>3);
				if (!Q[v-1])												// v is still in Q
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 80034ee:	4d37      	ldr	r5, [pc, #220]	; (80035cc <FindRoute+0x18c>)
 80034f0:	46d3      	mov	fp, sl
	while (!QnotEmpty(Q))
 80034f2:	a803      	add	r0, sp, #12
 80034f4:	f7ff f98c 	bl	8002810 <QnotEmpty>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d12e      	bne.n	800355a <FindRoute+0x11a>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 80034fc:	a903      	add	r1, sp, #12
 80034fe:	4833      	ldr	r0, [pc, #204]	; (80035cc <FindRoute+0x18c>)
 8003500:	f7ff f968 	bl	80027d4 <minArr>
 8003504:	3001      	adds	r0, #1
 8003506:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003508:	455c      	cmp	r4, fp
 800350a:	d00b      	beq.n	8003524 <FindRoute+0xe4>
			Q[u-1] = 1;													// Remove u from Q 
 800350c:	1e67      	subs	r7, r4, #1
 800350e:	ab03      	add	r3, sp, #12
 8003510:	2201      	movs	r2, #1
 8003512:	55da      	strb	r2, [r3, r7]
 8003514:	2016      	movs	r0, #22
 8003516:	4378      	muls	r0, r7
 8003518:	4643      	mov	r3, r8
 800351a:	18c1      	adds	r1, r0, r3
 800351c:	4448      	add	r0, r9
				if (!Q[v-1])												// v is still in Q
 800351e:	aa03      	add	r2, sp, #12
 8003520:	46ba      	mov	sl, r7
 8003522:	e005      	b.n	8003530 <FindRoute+0xf0>
 8003524:	46da      	mov	sl, fp
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003526:	465c      	mov	r4, fp
 8003528:	e018      	b.n	800355c <FindRoute+0x11c>
 800352a:	3102      	adds	r1, #2
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 800352c:	4281      	cmp	r1, r0
 800352e:	d0e0      	beq.n	80034f2 <FindRoute+0xb2>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8003530:	884b      	ldrh	r3, [r1, #2]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f9      	beq.n	800352a <FindRoute+0xea>
				v = (array[u-1][n]>>3);
 8003536:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	5cd6      	ldrb	r6, [r2, r3]
 800353e:	2e00      	cmp	r6, #0
 8003540:	d1f3      	bne.n	800352a <FindRoute+0xea>
					alt = routeDist[u-1] + 1;					// Add one hop
 8003542:	4656      	mov	r6, sl
 8003544:	5dae      	ldrb	r6, [r5, r6]
 8003546:	3601      	adds	r6, #1
 8003548:	b2f6      	uxtb	r6, r6
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 800354a:	5cef      	ldrb	r7, [r5, r3]
 800354c:	42b7      	cmp	r7, r6
 800354e:	d9ec      	bls.n	800352a <FindRoute+0xea>
					{
						routeDist[v-1] = alt; 
 8003550:	4f1e      	ldr	r7, [pc, #120]	; (80035cc <FindRoute+0x18c>)
 8003552:	54fe      	strb	r6, [r7, r3]
						routePrev[v-1] = u; 
 8003554:	4e1e      	ldr	r6, [pc, #120]	; (80035d0 <FindRoute+0x190>)
 8003556:	54f4      	strb	r4, [r6, r3]
 8003558:	e7e7      	b.n	800352a <FindRoute+0xea>
 800355a:	46da      	mov	sl, fp
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <FindRoute+0x190>)
 800355e:	191b      	adds	r3, r3, r4
 8003560:	3b01      	subs	r3, #1
 8003562:	7819      	ldrb	r1, [r3, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	2900      	cmp	r1, #0
 8003568:	d00d      	beq.n	8003586 <FindRoute+0x146>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 800356a:	4d17      	ldr	r5, [pc, #92]	; (80035c8 <FindRoute+0x188>)
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 800356c:	4818      	ldr	r0, [pc, #96]	; (80035d0 <FindRoute+0x190>)
 800356e:	e000      	b.n	8003572 <FindRoute+0x132>
 8003570:	0011      	movs	r1, r2
 8003572:	001a      	movs	r2, r3
		route[j++] = u;          				// Push the vertex onto the stack
 8003574:	3301      	adds	r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	54ac      	strb	r4, [r5, r2]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 800357a:	1842      	adds	r2, r0, r1
 800357c:	3a01      	subs	r2, #1
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	000c      	movs	r4, r1
 8003582:	2a00      	cmp	r2, #0
 8003584:	d1f4      	bne.n	8003570 <FindRoute+0x130>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 8003586:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003588:	4c0f      	ldr	r4, [pc, #60]	; (80035c8 <FindRoute+0x188>)
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <FindRoute+0x18c>)
 800358c:	4453      	add	r3, sl
 800358e:	001f      	movs	r7, r3
 8003590:	3f01      	subs	r7, #1
 8003592:	9901      	ldr	r1, [sp, #4]
 8003594:	e002      	b.n	800359c <FindRoute+0x15c>
	for(int col=1 ; col<=6 ; col++)	
 8003596:	3001      	adds	r0, #1
 8003598:	2807      	cmp	r0, #7
 800359a:	d00c      	beq.n	80035b6 <FindRoute+0x176>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 800359c:	0043      	lsls	r3, r0, #1
 800359e:	5acb      	ldrh	r3, [r1, r3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f8      	beq.n	8003596 <FindRoute+0x156>
 80035a4:	783a      	ldrb	r2, [r7, #0]
 80035a6:	18a2      	adds	r2, r4, r2
 80035a8:	3a01      	subs	r2, #1
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	08db      	lsrs	r3, r3, #3
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d1f1      	bne.n	8003596 <FindRoute+0x156>
			return col;	
 80035b2:	b2c0      	uxtb	r0, r0
 80035b4:	e000      	b.n	80035b8 <FindRoute+0x178>
		}
	}	

	return 0;			
 80035b6:	2000      	movs	r0, #0
}
 80035b8:	b011      	add	sp, #68	; 0x44
 80035ba:	bcf0      	pop	{r4, r5, r6, r7}
 80035bc:	46bb      	mov	fp, r7
 80035be:	46b2      	mov	sl, r6
 80035c0:	46a9      	mov	r9, r5
 80035c2:	46a0      	mov	r8, r4
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	200069f8 	.word	0x200069f8
 80035cc:	200010fc 	.word	0x200010fc
 80035d0:	20001118 	.word	0x20001118
 80035d4:	20000a80 	.word	0x20000a80
 80035d8:	2000001c 	.word	0x2000001c

080035dc <remoteBootloaderUpdate>:
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	46ce      	mov	lr, r9
 80035e0:	4647      	mov	r7, r8
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b085      	sub	sp, #20
 80035e6:	4680      	mov	r8, r0
 80035e8:	000d      	movs	r5, r1
 80035ea:	0016      	movs	r6, r2
 80035ec:	001f      	movs	r7, r3
	myOutport = FindRoute(myID, dst);
 80035ee:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <remoteBootloaderUpdate+0xec>)
 80035f0:	7818      	ldrb	r0, [r3, #0]
 80035f2:	f7ff ff25 	bl	8003440 <FindRoute>
 80035f6:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 80035f8:	2f00      	cmp	r7, #0
 80035fa:	d024      	beq.n	8003646 <remoteBootloaderUpdate+0x6a>
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <remoteBootloaderUpdate+0xec>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	42ab      	cmp	r3, r5
 8003602:	d05e      	beq.n	80036c2 <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003604:	2200      	movs	r2, #0
 8003606:	4691      	mov	r9, r2
	if (src == myID)
 8003608:	4543      	cmp	r3, r8
 800360a:	d050      	beq.n	80036ae <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 800360c:	0030      	movs	r0, r6
 800360e:	f7ff fdeb 	bl	80031e8 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003612:	0020      	movs	r0, r4
 8003614:	f7ff fde8 	bl	80031e8 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <remoteBootloaderUpdate+0xec>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	454b      	cmp	r3, r9
 800361e:	d03f      	beq.n	80036a0 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <remoteBootloaderUpdate+0xec>)
 8003622:	7819      	ldrb	r1, [r3, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	3b01      	subs	r3, #1
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	3303      	adds	r3, #3
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	000b      	movs	r3, r1
 8003634:	0022      	movs	r2, r4
 8003636:	0030      	movs	r0, r6
 8003638:	f005 faea 	bl	8008c10 <StartScastDMAStream>
}
 800363c:	b005      	add	sp, #20
 800363e:	bcc0      	pop	{r6, r7}
 8003640:	46b9      	mov	r9, r7
 8003642:	46b0      	mov	r8, r6
 8003644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <remoteBootloaderUpdate+0xf0>)
 8003648:	195b      	adds	r3, r3, r5
 800364a:	3b01      	subs	r3, #1
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	2a01      	cmp	r2, #1
 8003650:	d022      	beq.n	8003698 <remoteBootloaderUpdate+0xbc>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8003652:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <remoteBootloaderUpdate+0xf4>)
 8003654:	189b      	adds	r3, r3, r2
 8003656:	3b01      	subs	r3, #1
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	4699      	mov	r9, r3
	if (src == myID)
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <remoteBootloaderUpdate+0xec>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4543      	cmp	r3, r8
 8003662:	d1d3      	bne.n	800360c <remoteBootloaderUpdate+0x30>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003664:	f009 fc3c 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 8003668:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <remoteBootloaderUpdate+0xf8>)
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	002a      	movs	r2, r5
 8003670:	f00e ff14 	bl	801249c <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <remoteBootloaderUpdate+0xfc>)
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	4640      	mov	r0, r8
 800367a:	f00e ff2f 	bl	80124dc <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 800367e:	4640      	mov	r0, r8
 8003680:	f7fc fd4a 	bl	8000118 <strlen>
 8003684:	b282      	uxth	r2, r0
 8003686:	2332      	movs	r3, #50	; 0x32
 8003688:	4641      	mov	r1, r8
 800368a:	0030      	movs	r0, r6
 800368c:	f009 fa02 	bl	800ca94 <writePxITMutex>
		Delay_ms(100);
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	f00b fb75 	bl	800ed80 <HAL_Delay>
 8003696:	e7b9      	b.n	800360c <remoteBootloaderUpdate+0x30>
			lastModule = myID;
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <remoteBootloaderUpdate+0xec>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4699      	mov	r9, r3
 800369e:	e7dd      	b.n	800365c <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport), REVERSED);
 80036a0:	0020      	movs	r0, r4
 80036a2:	f009 f9a9 	bl	800c9f8 <GetUart>
 80036a6:	2101      	movs	r1, #1
 80036a8:	f009 fa42 	bl	800cb30 <SwapUartPins>
 80036ac:	e7b8      	b.n	8003620 <remoteBootloaderUpdate+0x44>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80036ae:	f009 fc17 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 80036b2:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <remoteBootloaderUpdate+0x100>)
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	003b      	movs	r3, r7
 80036ba:	002a      	movs	r2, r5
 80036bc:	f00e feee 	bl	801249c <sprintf>
 80036c0:	e7d8      	b.n	8003674 <remoteBootloaderUpdate+0x98>
		lastModule = myID;
 80036c2:	46a9      	mov	r9, r5
		myOutport = outport;
 80036c4:	003c      	movs	r4, r7
 80036c6:	e79f      	b.n	8003608 <remoteBootloaderUpdate+0x2c>
 80036c8:	2000105c 	.word	0x2000105c
 80036cc:	200010fc 	.word	0x200010fc
 80036d0:	200069f8 	.word	0x200069f8
 80036d4:	20000078 	.word	0x20000078
 80036d8:	20000080 	.word	0x20000080
 80036dc:	2000007c 	.word	0x2000007c

080036e0 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	46de      	mov	lr, fp
 80036e4:	4657      	mov	r7, sl
 80036e6:	464e      	mov	r6, r9
 80036e8:	4645      	mov	r5, r8
 80036ea:	b5e0      	push	{r5, r6, r7, lr}
 80036ec:	b083      	sub	sp, #12
 80036ee:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 80036f0:	4c59      	ldr	r4, [pc, #356]	; (8003858 <DisplayTopology+0x178>)
 80036f2:	4b5a      	ldr	r3, [pc, #360]	; (800385c <DisplayTopology+0x17c>)
 80036f4:	0022      	movs	r2, r4
 80036f6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80036f8:	c223      	stmia	r2!, {r0, r1, r5}
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	6011      	str	r1, [r2, #0]
 80036fe:	889b      	ldrh	r3, [r3, #4]
 8003700:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003702:	0020      	movs	r0, r4
 8003704:	f7fc fd08 	bl	8000118 <strlen>
 8003708:	b282      	uxth	r2, r0
 800370a:	2301      	movs	r3, #1
 800370c:	425b      	negs	r3, r3
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	3333      	adds	r3, #51	; 0x33
 8003712:	0021      	movs	r1, r4
 8003714:	0038      	movs	r0, r7
 8003716:	f009 f991 	bl	800ca3c <writePxMutex>
 800371a:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <DisplayTopology+0x180>)
 800371e:	4698      	mov	r8, r3
 8003720:	4d4d      	ldr	r5, [pc, #308]	; (8003858 <DisplayTopology+0x178>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003722:	2601      	movs	r6, #1
 8003724:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8003726:	0022      	movs	r2, r4
 8003728:	4641      	mov	r1, r8
 800372a:	0028      	movs	r0, r5
 800372c:	f00e feb6 	bl	801249c <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003730:	0028      	movs	r0, r5
 8003732:	f7fc fcf1 	bl	8000118 <strlen>
 8003736:	b282      	uxth	r2, r0
 8003738:	9600      	str	r6, [sp, #0]
 800373a:	2332      	movs	r3, #50	; 0x32
 800373c:	0029      	movs	r1, r5
 800373e:	0038      	movs	r0, r7
 8003740:	f009 f97c 	bl	800ca3c <writePxMutex>
 8003744:	3401      	adds	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8003746:	2c07      	cmp	r4, #7
 8003748:	d1ed      	bne.n	8003726 <DisplayTopology+0x46>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 800374a:	2301      	movs	r3, #1
 800374c:	425b      	negs	r3, r3
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	3333      	adds	r3, #51	; 0x33
 8003752:	2203      	movs	r2, #3
 8003754:	4943      	ldr	r1, [pc, #268]	; (8003864 <DisplayTopology+0x184>)
 8003756:	0038      	movs	r0, r7
 8003758:	f009 f970 	bl	800ca3c <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <DisplayTopology+0x188>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d069      	beq.n	8003838 <DisplayTopology+0x158>
 8003764:	2300      	movs	r3, #0
 8003766:	469b      	mov	fp, r3
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8003768:	4b40      	ldr	r3, [pc, #256]	; (800386c <DisplayTopology+0x18c>)
 800376a:	469a      	mov	sl, r3
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800376c:	2601      	movs	r6, #1
 800376e:	4276      	negs	r6, r6
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <DisplayTopology+0x190>)
 8003772:	4699      	mov	r9, r3
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8003774:	46b8      	mov	r8, r7
 8003776:	e02b      	b.n	80037d0 <DisplayTopology+0xf0>
 8003778:	2307      	movs	r3, #7
 800377a:	4013      	ands	r3, r2
 800377c:	08d2      	lsrs	r2, r2, #3
 800377e:	493d      	ldr	r1, [pc, #244]	; (8003874 <DisplayTopology+0x194>)
 8003780:	4835      	ldr	r0, [pc, #212]	; (8003858 <DisplayTopology+0x178>)
 8003782:	f00e fe8b 	bl	801249c <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8003786:	4d34      	ldr	r5, [pc, #208]	; (8003858 <DisplayTopology+0x178>)
 8003788:	0028      	movs	r0, r5
 800378a:	f7fc fcc5 	bl	8000118 <strlen>
 800378e:	b282      	uxth	r2, r0
 8003790:	9600      	str	r6, [sp, #0]
 8003792:	2332      	movs	r3, #50	; 0x32
 8003794:	0029      	movs	r1, r5
 8003796:	4640      	mov	r0, r8
 8003798:	f009 f950 	bl	800ca3c <writePxMutex>
 800379c:	3402      	adds	r4, #2
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 800379e:	42bc      	cmp	r4, r7
 80037a0:	d007      	beq.n	80037b2 <DisplayTopology+0xd2>
			if (!array[row][col])
 80037a2:	8862      	ldrh	r2, [r4, #2]
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	d1e7      	bne.n	8003778 <DisplayTopology+0x98>
				sprintf(pcUserMessage, "%d\t",0);
 80037a8:	4933      	ldr	r1, [pc, #204]	; (8003878 <DisplayTopology+0x198>)
 80037aa:	482b      	ldr	r0, [pc, #172]	; (8003858 <DisplayTopology+0x178>)
 80037ac:	f00e fe76 	bl	801249c <sprintf>
 80037b0:	e7e9      	b.n	8003786 <DisplayTopology+0xa6>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 80037b2:	9600      	str	r6, [sp, #0]
 80037b4:	2332      	movs	r3, #50	; 0x32
 80037b6:	2202      	movs	r2, #2
 80037b8:	4930      	ldr	r1, [pc, #192]	; (800387c <DisplayTopology+0x19c>)
 80037ba:	4640      	mov	r0, r8
 80037bc:	f009 f93e 	bl	800ca3c <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 80037c0:	465b      	mov	r3, fp
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	469b      	mov	fp, r3
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <DisplayTopology+0x188>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	455b      	cmp	r3, fp
 80037ce:	d932      	bls.n	8003836 <DisplayTopology+0x156>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 80037d0:	465b      	mov	r3, fp
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	4c20      	ldr	r4, [pc, #128]	; (8003858 <DisplayTopology+0x178>)
 80037d6:	4651      	mov	r1, sl
 80037d8:	0020      	movs	r0, r4
 80037da:	f00e fe5f 	bl	801249c <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80037de:	0020      	movs	r0, r4
 80037e0:	f7fc fc9a 	bl	8000118 <strlen>
 80037e4:	b282      	uxth	r2, r0
 80037e6:	9600      	str	r6, [sp, #0]
 80037e8:	2332      	movs	r3, #50	; 0x32
 80037ea:	0021      	movs	r1, r4
 80037ec:	4640      	mov	r0, r8
 80037ee:	f009 f925 	bl	800ca3c <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 80037f2:	2716      	movs	r7, #22
 80037f4:	465b      	mov	r3, fp
 80037f6:	435f      	muls	r7, r3
 80037f8:	464b      	mov	r3, r9
 80037fa:	5afb      	ldrh	r3, [r7, r3]
 80037fc:	0059      	lsls	r1, r3, #1
 80037fe:	18c9      	adds	r1, r1, r3
 8003800:	0049      	lsls	r1, r1, #1
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <DisplayTopology+0x1a0>)
 8003804:	18c9      	adds	r1, r1, r3
 8003806:	2205      	movs	r2, #5
 8003808:	0020      	movs	r0, r4
 800380a:	f00e fe9b 	bl	8012544 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 800380e:	9600      	str	r6, [sp, #0]
 8003810:	2332      	movs	r3, #50	; 0x32
 8003812:	2205      	movs	r2, #5
 8003814:	0021      	movs	r1, r4
 8003816:	4640      	mov	r0, r8
 8003818:	f009 f910 	bl	800ca3c <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 800381c:	9600      	str	r6, [sp, #0]
 800381e:	2332      	movs	r3, #50	; 0x32
 8003820:	2201      	movs	r2, #1
 8003822:	4918      	ldr	r1, [pc, #96]	; (8003884 <DisplayTopology+0x1a4>)
 8003824:	4640      	mov	r0, r8
 8003826:	f009 f909 	bl	800ca3c <writePxMutex>
 800382a:	464b      	mov	r3, r9
 800382c:	18fc      	adds	r4, r7, r3
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <DisplayTopology+0x1a8>)
 8003830:	469c      	mov	ip, r3
 8003832:	4467      	add	r7, ip
 8003834:	e7b5      	b.n	80037a2 <DisplayTopology+0xc2>
 8003836:	4647      	mov	r7, r8
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003838:	2301      	movs	r3, #1
 800383a:	425b      	negs	r3, r3
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	3333      	adds	r3, #51	; 0x33
 8003840:	2201      	movs	r2, #1
 8003842:	4912      	ldr	r1, [pc, #72]	; (800388c <DisplayTopology+0x1ac>)
 8003844:	0038      	movs	r0, r7
 8003846:	f009 f8f9 	bl	800ca3c <writePxMutex>
}
 800384a:	b003      	add	sp, #12
 800384c:	bcf0      	pop	{r4, r5, r6, r7}
 800384e:	46bb      	mov	fp, r7
 8003850:	46b2      	mov	sl, r6
 8003852:	46a9      	mov	r9, r5
 8003854:	46a0      	mov	r8, r4
 8003856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003858:	20001090 	.word	0x20001090
 800385c:	08018338 	.word	0x08018338
 8003860:	0801834c 	.word	0x0801834c
 8003864:	08018d40 	.word	0x08018d40
 8003868:	2000001c 	.word	0x2000001c
 800386c:	08018354 	.word	0x08018354
 8003870:	20000a80 	.word	0x20000a80
 8003874:	08018364 	.word	0x08018364
 8003878:	08018360 	.word	0x08018360
 800387c:	08018470 	.word	0x08018470
 8003880:	080187e8 	.word	0x080187e8
 8003884:	08018348 	.word	0x08018348
 8003888:	20000a8c 	.word	0x20000a8c
 800388c:	0801a0d4 	.word	0x0801a0d4

08003890 <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	46d6      	mov	lr, sl
 8003894:	464f      	mov	r7, r9
 8003896:	4646      	mov	r6, r8
 8003898:	b5c0      	push	{r6, r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	4680      	mov	r8, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 800389e:	4c31      	ldr	r4, [pc, #196]	; (8003964 <DisplayPortsDir+0xd4>)
 80038a0:	4b31      	ldr	r3, [pc, #196]	; (8003968 <DisplayPortsDir+0xd8>)
 80038a2:	0022      	movs	r2, r4
 80038a4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80038a6:	c223      	stmia	r2!, {r0, r1, r5}
 80038a8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80038aa:	c223      	stmia	r2!, {r0, r1, r5}
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80038b0:	0020      	movs	r0, r4
 80038b2:	f7fc fc31 	bl	8000118 <strlen>
 80038b6:	b282      	uxth	r2, r0
 80038b8:	2301      	movs	r3, #1
 80038ba:	425b      	negs	r3, r3
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	3333      	adds	r3, #51	; 0x33
 80038c0:	0021      	movs	r1, r4
 80038c2:	4640      	mov	r0, r8
 80038c4:	f009 f8ba 	bl	800ca3c <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <DisplayPortsDir+0xdc>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2701      	movs	r7, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02c      	beq.n	800392c <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80038d2:	4e27      	ldr	r6, [pc, #156]	; (8003970 <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <DisplayPortsDir+0xe4>)
 80038d6:	4699      	mov	r9, r3
 80038d8:	e024      	b.n	8003924 <DisplayPortsDir+0x94>
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <DisplayPortsDir+0xd4>)
 80038dc:	469a      	mov	sl, r3
 80038de:	0023      	movs	r3, r4
 80038e0:	003a      	movs	r2, r7
 80038e2:	4649      	mov	r1, r9
 80038e4:	4650      	mov	r0, sl
 80038e6:	f00e fdd9 	bl	801249c <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80038ea:	4650      	mov	r0, sl
 80038ec:	f7fc fc14 	bl	8000118 <strlen>
 80038f0:	b282      	uxth	r2, r0
 80038f2:	2301      	movs	r3, #1
 80038f4:	425b      	negs	r3, r3
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	3333      	adds	r3, #51	; 0x33
 80038fa:	4651      	mov	r1, sl
 80038fc:	4640      	mov	r0, r8
 80038fe:	f009 f89d 	bl	800ca3c <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8003902:	2c0a      	cmp	r4, #10
 8003904:	d008      	beq.n	8003918 <DisplayPortsDir+0x88>
 8003906:	0021      	movs	r1, r4
 8003908:	3401      	adds	r4, #1
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800390a:	5baa      	ldrh	r2, [r5, r6]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	410b      	asrs	r3, r1
 8003912:	4213      	tst	r3, r2
 8003914:	d0f5      	beq.n	8003902 <DisplayPortsDir+0x72>
 8003916:	e7e0      	b.n	80038da <DisplayPortsDir+0x4a>
	for (uint8_t i=1 ; i<=N ; i++) 
 8003918:	3701      	adds	r7, #1
 800391a:	b2ff      	uxtb	r7, r7
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <DisplayPortsDir+0xdc>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	42bb      	cmp	r3, r7
 8003922:	d303      	bcc.n	800392c <DisplayPortsDir+0x9c>
{
 8003924:	2400      	movs	r4, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003926:	1e7d      	subs	r5, r7, #1
 8003928:	006d      	lsls	r5, r5, #1
 800392a:	e7ec      	b.n	8003906 <DisplayPortsDir+0x76>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 800392c:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <DisplayPortsDir+0xd4>)
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <DisplayPortsDir+0xe8>)
 8003930:	0022      	movs	r2, r4
 8003932:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003934:	c223      	stmia	r2!, {r0, r1, r5}
 8003936:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003938:	c223      	stmia	r2!, {r0, r1, r5}
 800393a:	cb03      	ldmia	r3!, {r0, r1}
 800393c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800393e:	0020      	movs	r0, r4
 8003940:	f7fc fbea 	bl	8000118 <strlen>
 8003944:	b282      	uxth	r2, r0
 8003946:	2301      	movs	r3, #1
 8003948:	425b      	negs	r3, r3
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	3333      	adds	r3, #51	; 0x33
 800394e:	0021      	movs	r1, r4
 8003950:	4640      	mov	r0, r8
 8003952:	f009 f873 	bl	800ca3c <writePxMutex>
}
 8003956:	b002      	add	sp, #8
 8003958:	bce0      	pop	{r5, r6, r7}
 800395a:	46ba      	mov	sl, r7
 800395c:	46b1      	mov	r9, r6
 800395e:	46a8      	mov	r8, r5
 8003960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20001090 	.word	0x20001090
 8003968:	0801836c 	.word	0x0801836c
 800396c:	2000001c 	.word	0x2000001c
 8003970:	20006dc4 	.word	0x20006dc4
 8003974:	08018388 	.word	0x08018388
 8003978:	0801839c 	.word	0x0801839c

0800397c <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	46d6      	mov	lr, sl
 8003980:	464f      	mov	r7, r9
 8003982:	4646      	mov	r6, r8
 8003984:	b5c0      	push	{r6, r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800398a:	f009 faa9 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 800398e:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 8003990:	2300      	movs	r3, #0
 8003992:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8003994:	4b91      	ldr	r3, [pc, #580]	; (8003bdc <DisplayModuleStatus+0x260>)
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	4d91      	ldr	r5, [pc, #580]	; (8003be0 <DisplayModuleStatus+0x264>)
 800399a:	4992      	ldr	r1, [pc, #584]	; (8003be4 <DisplayModuleStatus+0x268>)
 800399c:	0028      	movs	r0, r5
 800399e:	f00e fd7d 	bl	801249c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80039a2:	0029      	movs	r1, r5
 80039a4:	0020      	movs	r0, r4
 80039a6:	f00e fd99 	bl	80124dc <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 80039aa:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <DisplayModuleStatus+0x26c>)
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	498f      	ldr	r1, [pc, #572]	; (8003bec <DisplayModuleStatus+0x270>)
 80039b0:	0028      	movs	r0, r5
 80039b2:	f00e fd73 	bl	801249c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80039b6:	0029      	movs	r1, r5
 80039b8:	0020      	movs	r0, r4
 80039ba:	f00e fd8f 	bl	80124dc <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 80039be:	2304      	movs	r3, #4
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	3b02      	subs	r3, #2
 80039c4:	2200      	movs	r2, #0
 80039c6:	498a      	ldr	r1, [pc, #552]	; (8003bf0 <DisplayModuleStatus+0x274>)
 80039c8:	0028      	movs	r0, r5
 80039ca:	f00e fd67 	bl	801249c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80039ce:	0029      	movs	r1, r5
 80039d0:	0020      	movs	r0, r4
 80039d2:	f00e fd83 	bl	80124dc <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 80039d6:	4a87      	ldr	r2, [pc, #540]	; (8003bf4 <DisplayModuleStatus+0x278>)
 80039d8:	4987      	ldr	r1, [pc, #540]	; (8003bf8 <DisplayModuleStatus+0x27c>)
 80039da:	0028      	movs	r0, r5
 80039dc:	f00e fd5e 	bl	801249c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80039e0:	0029      	movs	r1, r5
 80039e2:	0020      	movs	r0, r4
 80039e4:	f00e fd7a 	bl	80124dc <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 80039e8:	4a84      	ldr	r2, [pc, #528]	; (8003bfc <DisplayModuleStatus+0x280>)
 80039ea:	4985      	ldr	r1, [pc, #532]	; (8003c00 <DisplayModuleStatus+0x284>)
 80039ec:	0028      	movs	r0, r5
 80039ee:	f00e fd55 	bl	801249c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 80039f2:	0029      	movs	r1, r5
 80039f4:	0020      	movs	r0, r4
 80039f6:	f00e fd71 	bl	80124dc <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 80039fa:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <DisplayModuleStatus+0x288>)
 80039fc:	002a      	movs	r2, r5
 80039fe:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a00:	c243      	stmia	r2!, {r0, r1, r6}
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	6011      	str	r1, [r2, #0]
 8003a06:	8899      	ldrh	r1, [r3, #4]
 8003a08:	8091      	strh	r1, [r2, #4]
 8003a0a:	799b      	ldrb	r3, [r3, #6]
 8003a0c:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 8003a0e:	0029      	movs	r1, r5
 8003a10:	0020      	movs	r0, r4
 8003a12:	f00e fd63 	bl	80124dc <strcat>
 8003a16:	2501      	movs	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 8003a18:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <DisplayModuleStatus+0x28c>)
 8003a1a:	4699      	mov	r9, r3
 8003a1c:	4f70      	ldr	r7, [pc, #448]	; (8003be0 <DisplayModuleStatus+0x264>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 8003a1e:	4b7b      	ldr	r3, [pc, #492]	; (8003c0c <DisplayModuleStatus+0x290>)
 8003a20:	469a      	mov	sl, r3
 8003a22:	e00e      	b.n	8003a42 <DisplayModuleStatus+0xc6>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8003a24:	4b6e      	ldr	r3, [pc, #440]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003a26:	4a7a      	ldr	r2, [pc, #488]	; (8003c10 <DisplayModuleStatus+0x294>)
 8003a28:	6811      	ldr	r1, [r2, #0]
 8003a2a:	6019      	str	r1, [r3, #0]
 8003a2c:	8891      	ldrh	r1, [r2, #4]
 8003a2e:	8099      	strh	r1, [r3, #4]
 8003a30:	7992      	ldrb	r2, [r2, #6]
 8003a32:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8003a34:	496a      	ldr	r1, [pc, #424]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003a36:	0020      	movs	r0, r4
 8003a38:	f00e fd50 	bl	80124dc <strcat>
 8003a3c:	3501      	adds	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8003a3e:	2d07      	cmp	r5, #7
 8003a40:	d039      	beq.n	8003ab6 <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage, "P%d: ", i);
 8003a42:	002a      	movs	r2, r5
 8003a44:	4649      	mov	r1, r9
 8003a46:	0038      	movs	r0, r7
 8003a48:	f00e fd28 	bl	801249c <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8003a4c:	0039      	movs	r1, r7
 8003a4e:	0020      	movs	r0, r4
 8003a50:	f00e fd44 	bl	80124dc <strcat>
 8003a54:	4653      	mov	r3, sl
 8003a56:	5ceb      	ldrb	r3, [r5, r3]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d8eb      	bhi.n	8003a34 <DisplayModuleStatus+0xb8>
 8003a5c:	4653      	mov	r3, sl
 8003a5e:	5ceb      	ldrb	r3, [r5, r3]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a6c      	ldr	r2, [pc, #432]	; (8003c14 <DisplayModuleStatus+0x298>)
 8003a64:	58d3      	ldr	r3, [r2, r3]
 8003a66:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8003a68:	495d      	ldr	r1, [pc, #372]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <DisplayModuleStatus+0x29c>)
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a70:	c243      	stmia	r2!, {r0, r1, r6}
 8003a72:	cb03      	ldmia	r3!, {r0, r1}
 8003a74:	c203      	stmia	r2!, {r0, r1}
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	7013      	strb	r3, [r2, #0]
 8003a7a:	e7db      	b.n	8003a34 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003a7e:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <DisplayModuleStatus+0x2a0>)
 8003a80:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a82:	c243      	stmia	r2!, {r0, r1, r6}
 8003a84:	e7d6      	b.n	8003a34 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8003a86:	4956      	ldr	r1, [pc, #344]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003a88:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <DisplayModuleStatus+0x2a4>)
 8003a8a:	000a      	movs	r2, r1
 8003a8c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a8e:	c243      	stmia	r2!, {r0, r1, r6}
 8003a90:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a92:	c243      	stmia	r2!, {r0, r1, r6}
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	8013      	strh	r3, [r2, #0]
 8003a98:	e7cc      	b.n	8003a34 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8003a9a:	4951      	ldr	r1, [pc, #324]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <DisplayModuleStatus+0x2a8>)
 8003a9e:	000a      	movs	r2, r1
 8003aa0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003aa2:	c243      	stmia	r2!, {r0, r1, r6}
 8003aa4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003aa6:	c243      	stmia	r2!, {r0, r1, r6}
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	6011      	str	r1, [r2, #0]
 8003aac:	8899      	ldrh	r1, [r3, #4]
 8003aae:	8091      	strh	r1, [r2, #4]
 8003ab0:	799b      	ldrb	r3, [r3, #6]
 8003ab2:	7193      	strb	r3, [r2, #6]
 8003ab4:	e7be      	b.n	8003a34 <DisplayModuleStatus+0xb8>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8003ab6:	494a      	ldr	r1, [pc, #296]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <DisplayModuleStatus+0x2ac>)
 8003aba:	000a      	movs	r2, r1
 8003abc:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003abe:	c261      	stmia	r2!, {r0, r5, r6}
 8003ac0:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003ac2:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	f00e fd09 	bl	80124dc <strcat>
 8003aca:	4e58      	ldr	r6, [pc, #352]	; (8003c2c <DisplayModuleStatus+0x2b0>)
 8003acc:	2701      	movs	r7, #1
	for (char i=1 ; i<=6 ; i++) {
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
				strcat( (char *) pcOutputString, pcUserMessage);
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003ace:	4d44      	ldr	r5, [pc, #272]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003ad0:	e00e      	b.n	8003af0 <DisplayModuleStatus+0x174>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003ad4:	469a      	mov	sl, r3
 8003ad6:	003a      	movs	r2, r7
 8003ad8:	4955      	ldr	r1, [pc, #340]	; (8003c30 <DisplayModuleStatus+0x2b4>)
 8003ada:	0018      	movs	r0, r3
 8003adc:	f00e fcde 	bl	801249c <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	f00e fcfa 	bl	80124dc <strcat>
 8003ae8:	3701      	adds	r7, #1
 8003aea:	3638      	adds	r6, #56	; 0x38
	for (char i=1 ; i<=6 ; i++) {
 8003aec:	2f07      	cmp	r7, #7
 8003aee:	d017      	beq.n	8003b20 <DisplayModuleStatus+0x1a4>
		if (streamDMA[i-1].Instance == 0) {
 8003af0:	6833      	ldr	r3, [r6, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ed      	beq.n	8003ad2 <DisplayModuleStatus+0x156>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003af6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003af8:	f007 f822 	bl	800ab40 <GetPort>
 8003afc:	4682      	mov	sl, r0
 8003afe:	00bb      	lsls	r3, r7, #2
 8003b00:	4a4c      	ldr	r2, [pc, #304]	; (8003c34 <DisplayModuleStatus+0x2b8>)
 8003b02:	58d0      	ldr	r0, [r2, r3]
 8003b04:	f007 f81c 	bl	800ab40 <GetPort>
 8003b08:	9000      	str	r0, [sp, #0]
 8003b0a:	4653      	mov	r3, sl
 8003b0c:	003a      	movs	r2, r7
 8003b0e:	494a      	ldr	r1, [pc, #296]	; (8003c38 <DisplayModuleStatus+0x2bc>)
 8003b10:	0028      	movs	r0, r5
 8003b12:	f00e fcc3 	bl	801249c <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003b16:	0029      	movs	r1, r5
 8003b18:	0020      	movs	r0, r4
 8003b1a:	f00e fcdf 	bl	80124dc <strcat>
 8003b1e:	e7e3      	b.n	8003ae8 <DisplayModuleStatus+0x16c>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003b20:	0020      	movs	r0, r4
 8003b22:	f7fc faf9 	bl	8000118 <strlen>
 8003b26:	1820      	adds	r0, r4, r0
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4944      	ldr	r1, [pc, #272]	; (8003c3c <DisplayModuleStatus+0x2c0>)
 8003b2c:	f00e fab8 	bl	80120a0 <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8003b30:	0020      	movs	r0, r4
 8003b32:	f7fc faf1 	bl	8000118 <strlen>
 8003b36:	1820      	adds	r0, r4, r0
 8003b38:	221d      	movs	r2, #29
 8003b3a:	4941      	ldr	r1, [pc, #260]	; (8003c40 <DisplayModuleStatus+0x2c4>)
 8003b3c:	f00e fab0 	bl	80120a0 <memcpy>
	temp = strlen( (char *) pcOutputString);
 8003b40:	0020      	movs	r0, r4
 8003b42:	f7fc fae9 	bl	8000118 <strlen>
 8003b46:	4681      	mov	r9, r0
 8003b48:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003b4a:	4e3e      	ldr	r6, [pc, #248]	; (8003c44 <DisplayModuleStatus+0x2c8>)
 8003b4c:	4f23      	ldr	r7, [pc, #140]	; (8003bdc <DisplayModuleStatus+0x260>)
 8003b4e:	e00c      	b.n	8003b6a <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <DisplayModuleStatus+0x264>)
 8003b52:	469a      	mov	sl, r3
 8003b54:	002a      	movs	r2, r5
 8003b56:	493c      	ldr	r1, [pc, #240]	; (8003c48 <DisplayModuleStatus+0x2cc>)
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f00e fc9f 	bl	801249c <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 8003b5e:	4651      	mov	r1, sl
 8003b60:	0020      	movs	r0, r4
 8003b62:	f00e fcbb 	bl	80124dc <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003b66:	2d06      	cmp	r5, #6
 8003b68:	d00b      	beq.n	8003b82 <DisplayModuleStatus+0x206>
 8003b6a:	0029      	movs	r1, r5
 8003b6c:	3501      	adds	r5, #1
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003b6e:	783b      	ldrb	r3, [r7, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	5b9a      	ldrh	r2, [r3, r6]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	410b      	asrs	r3, r1
 8003b7c:	4213      	tst	r3, r2
 8003b7e:	d0f2      	beq.n	8003b66 <DisplayModuleStatus+0x1ea>
 8003b80:	e7e6      	b.n	8003b50 <DisplayModuleStatus+0x1d4>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8003b82:	0020      	movs	r0, r4
 8003b84:	f7fc fac8 	bl	8000118 <strlen>
 8003b88:	464b      	mov	r3, r9
 8003b8a:	041e      	lsls	r6, r3, #16
 8003b8c:	0c36      	lsrs	r6, r6, #16
 8003b8e:	42b0      	cmp	r0, r6
 8003b90:	d010      	beq.n	8003bb4 <DisplayModuleStatus+0x238>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003b92:	0020      	movs	r0, r4
 8003b94:	f7fc fac0 	bl	8000118 <strlen>
 8003b98:	1820      	adds	r0, r4, r0
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	4927      	ldr	r1, [pc, #156]	; (8003c3c <DisplayModuleStatus+0x2c0>)
 8003b9e:	f00e fa7f 	bl	80120a0 <memcpy>
	
	/* Display output */
	if (port)
 8003ba2:	4643      	mov	r3, r8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <DisplayModuleStatus+0x244>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 8003ba8:	b002      	add	sp, #8
 8003baa:	bce0      	pop	{r5, r6, r7}
 8003bac:	46ba      	mov	sl, r7
 8003bae:	46b1      	mov	r9, r6
 8003bb0:	46a8      	mov	r8, r5
 8003bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8003bb4:	1820      	adds	r0, r4, r0
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	4924      	ldr	r1, [pc, #144]	; (8003c4c <DisplayModuleStatus+0x2d0>)
 8003bba:	f00e fa71 	bl	80120a0 <memcpy>
 8003bbe:	e7e8      	b.n	8003b92 <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8003bc0:	0020      	movs	r0, r4
 8003bc2:	f7fc faa9 	bl	8000118 <strlen>
 8003bc6:	b282      	uxth	r2, r0
 8003bc8:	2301      	movs	r3, #1
 8003bca:	425b      	negs	r3, r3
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	3333      	adds	r3, #51	; 0x33
 8003bd0:	0021      	movs	r1, r4
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	f008 ff32 	bl	800ca3c <writePxMutex>
}
 8003bd8:	e7e6      	b.n	8003ba8 <DisplayModuleStatus+0x22c>
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	2000105c 	.word	0x2000105c
 8003be0:	20001090 	.word	0x20001090
 8003be4:	080183bc 	.word	0x080183bc
 8003be8:	20000a7f 	.word	0x20000a7f
 8003bec:	080183d8 	.word	0x080183d8
 8003bf0:	080183f4 	.word	0x080183f4
 8003bf4:	08018414 	.word	0x08018414
 8003bf8:	08018420 	.word	0x08018420
 8003bfc:	08018438 	.word	0x08018438
 8003c00:	08018444 	.word	0x08018444
 8003c04:	08018460 	.word	0x08018460
 8003c08:	08018474 	.word	0x08018474
 8003c0c:	200010e0 	.word	0x200010e0
 8003c10:	0801847c 	.word	0x0801847c
 8003c14:	08018578 	.word	0x08018578
 8003c18:	08018484 	.word	0x08018484
 8003c1c:	0801849c 	.word	0x0801849c
 8003c20:	080184a8 	.word	0x080184a8
 8003c24:	080184c4 	.word	0x080184c4
 8003c28:	080184e4 	.word	0x080184e4
 8003c2c:	20001910 	.word	0x20001910
 8003c30:	080184fc 	.word	0x080184fc
 8003c34:	20001488 	.word	0x20001488
 8003c38:	08018518 	.word	0x08018518
 8003c3c:	08018470 	.word	0x08018470
 8003c40:	08018548 	.word	0x08018548
 8003c44:	20006dc4 	.word	0x20006dc4
 8003c48:	08018568 	.word	0x08018568
 8003c4c:	08018570 	.word	0x08018570

08003c50 <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	46c6      	mov	lr, r8
 8003c54:	b500      	push	{lr}
 8003c56:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 8003c58:	4929      	ldr	r1, [pc, #164]	; (8003d00 <GetID+0xb0>)
 8003c5a:	f7fc fa53 	bl	8000104 <strcmp>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d010      	beq.n	8003c84 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 8003c62:	4928      	ldr	r1, [pc, #160]	; (8003d04 <GetID+0xb4>)
 8003c64:	0030      	movs	r0, r6
 8003c66:	f7fc fa4d 	bl	8000104 <strcmp>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d045      	beq.n	8003cfa <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 8003c6e:	7833      	ldrb	r3, [r6, #0]
 8003c70:	4698      	mov	r8, r3
 8003c72:	2b23      	cmp	r3, #35	; 0x23
 8003c74:	d00b      	beq.n	8003c8e <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <GetID+0xb8>)
 8003c78:	781f      	ldrb	r7, [r3, #0]
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	d02a      	beq.n	8003cd4 <GetID+0x84>
 8003c7e:	4d23      	ldr	r5, [pc, #140]	; (8003d0c <GetID+0xbc>)
 8003c80:	2400      	movs	r4, #0
 8003c82:	e01c      	b.n	8003cbe <GetID+0x6e>
		return myID;
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <GetID+0xc0>)
 8003c86:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8003c88:	bc80      	pop	{r7}
 8003c8a:	46b8      	mov	r8, r7
 8003c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 8003c8e:	1c70      	adds	r0, r6, #1
 8003c90:	f00d ffa5 	bl	8011bde <atol>
 8003c94:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <GetID+0x52>
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <GetID+0xb8>)
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d206      	bcs.n	8003cb0 <GetID+0x60>
		else if (id == myID)
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <GetID+0xc0>)
 8003ca4:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 8003ca6:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1ed      	bne.n	8003c88 <GetID+0x38>
			return myID;
 8003cac:	b218      	sxth	r0, r3
 8003cae:	e7eb      	b.n	8003c88 <GetID+0x38>
			return id;
 8003cb0:	b218      	sxth	r0, r3
 8003cb2:	e7e9      	b.n	8003c88 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 8003cb4:	3401      	adds	r4, #1
 8003cb6:	b2e4      	uxtb	r4, r4
 8003cb8:	350a      	adds	r5, #10
 8003cba:	42bc      	cmp	r4, r7
 8003cbc:	d00a      	beq.n	8003cd4 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 8003cbe:	0029      	movs	r1, r5
 8003cc0:	0030      	movs	r0, r6
 8003cc2:	f7fc fa1f 	bl	8000104 <strcmp>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d1f4      	bne.n	8003cb4 <GetID+0x64>
 8003cca:	4643      	mov	r3, r8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f1      	beq.n	8003cb4 <GetID+0x64>
 8003cd0:	b220      	sxth	r0, r4
 8003cd2:	e7d9      	b.n	8003c88 <GetID+0x38>
 8003cd4:	4f0f      	ldr	r7, [pc, #60]	; (8003d14 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 8003cd6:	2500      	movs	r5, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8003cd8:	0039      	movs	r1, r7
 8003cda:	0030      	movs	r0, r6
 8003cdc:	f7fc fa12 	bl	8000104 <strcmp>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d005      	beq.n	8003cf0 <GetID+0xa0>
 8003ce4:	3501      	adds	r5, #1
 8003ce6:	370a      	adds	r7, #10
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8003ce8:	2d0a      	cmp	r5, #10
 8003cea:	d1f5      	bne.n	8003cd8 <GetID+0x88>
		return BOS_ERR_WrongName;			
 8003cec:	2064      	movs	r0, #100	; 0x64
 8003cee:	e7cb      	b.n	8003c88 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8003cf0:	022c      	lsls	r4, r5, #8
 8003cf2:	20fe      	movs	r0, #254	; 0xfe
 8003cf4:	4320      	orrs	r0, r4
 8003cf6:	b200      	sxth	r0, r0
 8003cf8:	e7c6      	b.n	8003c88 <GetID+0x38>
		return BOS_BROADCAST;				
 8003cfa:	20ff      	movs	r0, #255	; 0xff
 8003cfc:	e7c4      	b.n	8003c88 <GetID+0x38>
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	0801858c 	.word	0x0801858c
 8003d04:	08018590 	.word	0x08018590
 8003d08:	2000001c 	.word	0x2000001c
 8003d0c:	20000f58 	.word	0x20000f58
 8003d10:	2000105c 	.word	0x2000105c
 8003d14:	20000e4c 	.word	0x20000e4c

08003d18 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	9001      	str	r0, [sp, #4]
 8003d1e:	000e      	movs	r6, r1
 8003d20:	4c28      	ldr	r4, [pc, #160]	; (8003dc4 <NameModule+0xac>)
 8003d22:	0025      	movs	r5, r4
 8003d24:	3510      	adds	r5, #16
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 8003d26:	0021      	movs	r1, r4
 8003d28:	0030      	movs	r0, r6
 8003d2a:	f7fc f9eb 	bl	8000104 <strcmp>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d03f      	beq.n	8003db2 <NameModule+0x9a>
 8003d32:	3404      	adds	r4, #4
	for(i=0 ; i<NumOfKeywords ; i++)
 8003d34:	42ac      	cmp	r4, r5
 8003d36:	d1f6      	bne.n	8003d26 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <NameModule+0xb0>)
 8003d3a:	781f      	ldrb	r7, [r3, #0]
 8003d3c:	2f01      	cmp	r7, #1
 8003d3e:	dd0b      	ble.n	8003d58 <NameModule+0x40>
 8003d40:	4c22      	ldr	r4, [pc, #136]	; (8003dcc <NameModule+0xb4>)
 8003d42:	2501      	movs	r5, #1
	{
		if (!strcmp(alias, moduleAlias[i]))	
 8003d44:	0021      	movs	r1, r4
 8003d46:	0030      	movs	r0, r6
 8003d48:	f7fc f9dc 	bl	8000104 <strcmp>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d032      	beq.n	8003db6 <NameModule+0x9e>
	for(i=1 ; i<N ; i++)
 8003d50:	3501      	adds	r5, #1
 8003d52:	340a      	adds	r4, #10
 8003d54:	42bd      	cmp	r5, r7
 8003d56:	dbf5      	blt.n	8003d44 <NameModule+0x2c>
 8003d58:	4c1d      	ldr	r4, [pc, #116]	; (8003dd0 <NameModule+0xb8>)
 8003d5a:	0025      	movs	r5, r4
 8003d5c:	3564      	adds	r5, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 8003d5e:	0021      	movs	r1, r4
 8003d60:	0030      	movs	r0, r6
 8003d62:	f7fc f9cf 	bl	8000104 <strcmp>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d028      	beq.n	8003dbc <NameModule+0xa4>
 8003d6a:	340a      	adds	r4, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003d6c:	42ac      	cmp	r4, r5
 8003d6e:	d1f6      	bne.n	8003d5e <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003d70:	4c18      	ldr	r4, [pc, #96]	; (8003dd4 <NameModule+0xbc>)
 8003d72:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <NameModule+0xc0>)
 8003d74:	601c      	str	r4, [r3, #0]
 8003d76:	001f      	movs	r7, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8003d7c:	0028      	movs	r0, r5
 8003d7e:	f7fc f9cb 	bl	8000118 <strlen>
 8003d82:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8003d84:	0029      	movs	r1, r5
 8003d86:	0030      	movs	r0, r6
 8003d88:	f00e fbcb 	bl	8012522 <strncmp>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d017      	beq.n	8003dc0 <NameModule+0xa8>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003d90:	6864      	ldr	r4, [r4, #4]
 8003d92:	603c      	str	r4, [r7, #0]
 8003d94:	2c00      	cmp	r4, #0
 8003d96:	d1ef      	bne.n	8003d78 <NameModule+0x60>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8003d98:	9b01      	ldr	r3, [sp, #4]
 8003d9a:	0098      	lsls	r0, r3, #2
 8003d9c:	469c      	mov	ip, r3
 8003d9e:	4460      	add	r0, ip
 8003da0:	0040      	lsls	r0, r0, #1
 8003da2:	4f0e      	ldr	r7, [pc, #56]	; (8003ddc <NameModule+0xc4>)
 8003da4:	19c0      	adds	r0, r0, r7
 8003da6:	0031      	movs	r1, r6
 8003da8:	f00e fbb3 	bl	8012512 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 8003dac:	f7fe fe88 	bl	8002ac0 <SaveEEalias>
	
	return result;
 8003db0:	e002      	b.n	8003db8 <NameModule+0xa0>
			return BOS_ERR_Keyword;
 8003db2:	2006      	movs	r0, #6
 8003db4:	e000      	b.n	8003db8 <NameModule+0xa0>
			return BOS_ERR_ExistingAlias;
 8003db6:	2007      	movs	r0, #7
}
 8003db8:	b003      	add	sp, #12
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8003dbc:	2007      	movs	r0, #7
 8003dbe:	e7fb      	b.n	8003db8 <NameModule+0xa0>
			return BOS_ERR_ExistingCmd;
 8003dc0:	2008      	movs	r0, #8
 8003dc2:	e7f9      	b.n	8003db8 <NameModule+0xa0>
 8003dc4:	080187c4 	.word	0x080187c4
 8003dc8:	2000001c 	.word	0x2000001c
 8003dcc:	20000f62 	.word	0x20000f62
 8003dd0:	20000e4c 	.word	0x20000e4c
 8003dd4:	20000098 	.word	0x20000098
 8003dd8:	200010e8 	.word	0x200010e8
 8003ddc:	20000f58 	.word	0x20000f58

08003de0 <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	46ce      	mov	lr, r9
 8003de4:	b500      	push	{lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	9001      	str	r0, [sp, #4]
 8003dea:	000e      	movs	r6, r1
 8003dec:	4f36      	ldr	r7, [pc, #216]	; (8003ec8 <AddModuleToGroup+0xe8>)
 8003dee:	003d      	movs	r5, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003df0:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8003df2:	0029      	movs	r1, r5
 8003df4:	0030      	movs	r0, r6
 8003df6:	f7fc f985 	bl	8000104 <strcmp>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d047      	beq.n	8003e8e <AddModuleToGroup+0xae>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003dfe:	3401      	adds	r4, #1
 8003e00:	350a      	adds	r5, #10
 8003e02:	2c0a      	cmp	r4, #10
 8003e04:	d1f5      	bne.n	8003df2 <AddModuleToGroup+0x12>
 8003e06:	4c31      	ldr	r4, [pc, #196]	; (8003ecc <AddModuleToGroup+0xec>)
 8003e08:	0025      	movs	r5, r4
 8003e0a:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 8003e0c:	0021      	movs	r1, r4
 8003e0e:	0030      	movs	r0, r6
 8003e10:	f7fc f978 	bl	8000104 <strcmp>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d050      	beq.n	8003eba <AddModuleToGroup+0xda>
 8003e18:	3404      	adds	r4, #4
	for(j=0 ; j<NumOfKeywords ; j++)
 8003e1a:	42ac      	cmp	r4, r5
 8003e1c:	d1f6      	bne.n	8003e0c <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <AddModuleToGroup+0xf0>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4699      	mov	r9, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	dd0b      	ble.n	8003e40 <AddModuleToGroup+0x60>
 8003e28:	4c2a      	ldr	r4, [pc, #168]	; (8003ed4 <AddModuleToGroup+0xf4>)
 8003e2a:	2501      	movs	r5, #1
	{
		if (!strcmp(group, moduleAlias[j]))	
 8003e2c:	0021      	movs	r1, r4
 8003e2e:	0030      	movs	r0, r6
 8003e30:	f7fc f968 	bl	8000104 <strcmp>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d042      	beq.n	8003ebe <AddModuleToGroup+0xde>
	for(j=1 ; j<N ; j++)
 8003e38:	3501      	adds	r5, #1
 8003e3a:	340a      	adds	r4, #10
 8003e3c:	454d      	cmp	r5, r9
 8003e3e:	dbf5      	blt.n	8003e2c <AddModuleToGroup+0x4c>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003e40:	4c25      	ldr	r4, [pc, #148]	; (8003ed8 <AddModuleToGroup+0xf8>)
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <AddModuleToGroup+0xfc>)
 8003e44:	601c      	str	r4, [r3, #0]
 8003e46:	4699      	mov	r9, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8003e4c:	0028      	movs	r0, r5
 8003e4e:	f7fc f963 	bl	8000118 <strlen>
 8003e52:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8003e54:	0029      	movs	r1, r5
 8003e56:	0030      	movs	r0, r6
 8003e58:	f00e fb63 	bl	8012522 <strncmp>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d030      	beq.n	8003ec2 <AddModuleToGroup+0xe2>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003e60:	6864      	ldr	r4, [r4, #4]
 8003e62:	464b      	mov	r3, r9
 8003e64:	601c      	str	r4, [r3, #0]
 8003e66:	2c00      	cmp	r4, #0
 8003e68:	d1ee      	bne.n	8003e48 <AddModuleToGroup+0x68>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 8003e6a:	783b      	ldrb	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <AddModuleToGroup+0xc8>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003e70:	3401      	adds	r4, #1
 8003e72:	370a      	adds	r7, #10
 8003e74:	2c0a      	cmp	r4, #10
 8003e76:	d1f8      	bne.n	8003e6a <AddModuleToGroup+0x8a>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 8003e78:	9f01      	ldr	r7, [sp, #4]
 8003e7a:	3f01      	subs	r7, #1
 8003e7c:	4918      	ldr	r1, [pc, #96]	; (8003ee0 <AddModuleToGroup+0x100>)
 8003e7e:	007f      	lsls	r7, r7, #1
 8003e80:	2201      	movs	r2, #1
 8003e82:	40a2      	lsls	r2, r4
 8003e84:	5a7b      	ldrh	r3, [r7, r1]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	e008      	b.n	8003ea0 <AddModuleToGroup+0xc0>
			groupModules[module-1] |= (0x0001<<i);	
 8003e8e:	9f01      	ldr	r7, [sp, #4]
 8003e90:	3f01      	subs	r7, #1
 8003e92:	4913      	ldr	r1, [pc, #76]	; (8003ee0 <AddModuleToGroup+0x100>)
 8003e94:	007f      	lsls	r7, r7, #1
 8003e96:	2201      	movs	r2, #1
 8003e98:	40a2      	lsls	r2, r4
 8003e9a:	5a7b      	ldrh	r3, [r7, r1]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	527b      	strh	r3, [r7, r1]
}
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	46b9      	mov	r9, r7
 8003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i], group);	
 8003ea8:	00a0      	lsls	r0, r4, #2
 8003eaa:	1900      	adds	r0, r0, r4
 8003eac:	0040      	lsls	r0, r0, #1
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <AddModuleToGroup+0xe8>)
 8003eb0:	1818      	adds	r0, r3, r0
 8003eb2:	0031      	movs	r1, r6
 8003eb4:	f00e fb2d 	bl	8012512 <strcpy>
			break;
 8003eb8:	e7de      	b.n	8003e78 <AddModuleToGroup+0x98>
			return BOS_ERR_Keyword;
 8003eba:	2006      	movs	r0, #6
 8003ebc:	e7f0      	b.n	8003ea0 <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingAlias;
 8003ebe:	2007      	movs	r0, #7
 8003ec0:	e7ee      	b.n	8003ea0 <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingCmd;
 8003ec2:	2008      	movs	r0, #8
 8003ec4:	e7ec      	b.n	8003ea0 <AddModuleToGroup+0xc0>
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	20000e4c 	.word	0x20000e4c
 8003ecc:	080187c4 	.word	0x080187c4
 8003ed0:	2000001c 	.word	0x2000001c
 8003ed4:	20000f62 	.word	0x20000f62
 8003ed8:	20000098 	.word	0x20000098
 8003edc:	200010ec 	.word	0x200010ec
 8003ee0:	20000eb0 	.word	0x20000eb0

08003ee4 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	46de      	mov	lr, fp
 8003ee8:	4657      	mov	r7, sl
 8003eea:	464e      	mov	r6, r9
 8003eec:	4645      	mov	r5, r8
 8003eee:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 8003ef0:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <ReadPortsDir+0x9c>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03a      	beq.n	8003f70 <ReadPortsDir+0x8c>
 8003efa:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 8003efc:	2300      	movs	r3, #0
 8003efe:	4699      	mov	r9, r3
	{
		if (i != myID) {
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <ReadPortsDir+0xa0>)
 8003f02:	4698      	mov	r8, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8003f04:	469b      	mov	fp, r3
 8003f06:	4f20      	ldr	r7, [pc, #128]	; (8003f88 <ReadPortsDir+0xa4>)
			if (responseStatus != BOS_OK)	{
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <ReadPortsDir+0xa8>)
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	e01d      	b.n	8003f4a <ReadPortsDir+0x66>
 8003f0e:	2400      	movs	r4, #0
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003f10:	2680      	movs	r6, #128	; 0x80
 8003f12:	0236      	lsls	r6, r6, #8
 8003f14:	e002      	b.n	8003f1c <ReadPortsDir+0x38>
 8003f16:	3401      	adds	r4, #1
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8003f18:	2c06      	cmp	r4, #6
 8003f1a:	d010      	beq.n	8003f3e <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003f1c:	1c60      	adds	r0, r4, #1
 8003f1e:	b2c0      	uxtb	r0, r0
 8003f20:	f008 fd6a 	bl	800c9f8 <GetUart>
 8003f24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f26:	42b3      	cmp	r3, r6
 8003f28:	d1f5      	bne.n	8003f16 <ReadPortsDir+0x32>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8003f2a:	465b      	mov	r3, fp
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	5bda      	ldrh	r2, [r3, r7]
 8003f34:	0031      	movs	r1, r6
 8003f36:	4121      	asrs	r1, r4
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	53da      	strh	r2, [r3, r7]
 8003f3c:	e7eb      	b.n	8003f16 <ReadPortsDir+0x32>
	for (uint8_t i=1 ; i<=N ; i++) 
 8003f3e:	3501      	adds	r5, #1
 8003f40:	b2ed      	uxtb	r5, r5
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <ReadPortsDir+0x9c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	d312      	bcc.n	8003f70 <ReadPortsDir+0x8c>
		if (i != myID) {
 8003f4a:	4643      	mov	r3, r8
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	42ab      	cmp	r3, r5
 8003f50:	d0dd      	beq.n	8003f0e <ReadPortsDir+0x2a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8003f52:	2200      	movs	r2, #0
 8003f54:	2113      	movs	r1, #19
 8003f56:	0028      	movs	r0, r5
 8003f58:	f004 fe34 	bl	8008bc4 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8003f5c:	2032      	movs	r0, #50	; 0x32
 8003f5e:	f008 fb57 	bl	800c610 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8003f62:	4653      	mov	r3, sl
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0e9      	beq.n	8003f3e <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	e7e6      	b.n	8003f3e <ReadPortsDir+0x5a>
			}
		}
	}
	
	return result;
}
 8003f70:	4648      	mov	r0, r9
 8003f72:	bcf0      	pop	{r4, r5, r6, r7}
 8003f74:	46bb      	mov	fp, r7
 8003f76:	46b2      	mov	sl, r6
 8003f78:	46a9      	mov	r9, r5
 8003f7a:	46a0      	mov	r8, r4
 8003f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	2000001c 	.word	0x2000001c
 8003f84:	2000105c 	.word	0x2000105c
 8003f88:	20006dc4 	.word	0x20006dc4
 8003f8c:	200010f8 	.word	0x200010f8

08003f90 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	2400      	movs	r4, #0
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8003f94:	4f0f      	ldr	r7, [pc, #60]	; (8003fd4 <UpdateMyPortsDir+0x44>)
 8003f96:	4e10      	ldr	r6, [pc, #64]	; (8003fd8 <UpdateMyPortsDir+0x48>)
 8003f98:	2580      	movs	r5, #128	; 0x80
 8003f9a:	022d      	lsls	r5, r5, #8
 8003f9c:	e007      	b.n	8003fae <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 8003f9e:	f008 fd2b 	bl	800c9f8 <GetUart>
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	f008 fdc4 	bl	800cb30 <SwapUartPins>
 8003fa8:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003faa:	2c06      	cmp	r4, #6
 8003fac:	d00f      	beq.n	8003fce <UpdateMyPortsDir+0x3e>
 8003fae:	1c60      	adds	r0, r4, #1
 8003fb0:	b2c0      	uxtb	r0, r0
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8003fb2:	7833      	ldrb	r3, [r6, #0]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	5bdb      	ldrh	r3, [r3, r7]
 8003fba:	002a      	movs	r2, r5
 8003fbc:	4122      	asrs	r2, r4
 8003fbe:	421a      	tst	r2, r3
 8003fc0:	d1ed      	bne.n	8003f9e <UpdateMyPortsDir+0xe>
			SwapUartPins(GetUart(p), NORMAL);
 8003fc2:	f008 fd19 	bl	800c9f8 <GetUart>
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f008 fdb2 	bl	800cb30 <SwapUartPins>
 8003fcc:	e7ec      	b.n	8003fa8 <UpdateMyPortsDir+0x18>
		}	
	}		
	
	return result;
}
 8003fce:	2000      	movs	r0, #0
 8003fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	20006dc4 	.word	0x20006dc4
 8003fd8:	2000105c 	.word	0x2000105c

08003fdc <BOS_Init>:
{
 8003fdc:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8003fde:	f008 f9cf 	bl	800c380 <RTC_Init>
	GetTimeDate();
 8003fe2:	f008 fa6d 	bl	800c4c0 <GetTimeDate>
	EE_Init();
 8003fe6:	f003 f9d5 	bl	8007394 <EE_Init>
  GPIO_Init();
 8003fea:	f007 fef3 	bl	800bdd4 <GPIO_Init>
	DMA_Init();
 8003fee:	f006 fe69 	bl	800acc4 <DMA_Init>
	TIM_USEC_Init();
 8003ff2:	f008 fa99 	bl	800c528 <TIM_USEC_Init>
	CRC_Init();
 8003ff6:	f007 fe97 	bl	800bd28 <CRC_Init>
	TIM_MSEC_Init();
 8003ffa:	f008 fac7 	bl	800c58c <TIM_MSEC_Init>
	if (IsFactoryReset())
 8003ffe:	f007 ff9d 	bl	800bf3c <IsFactoryReset>
 8004002:	2800      	cmp	r0, #0
 8004004:	d11a      	bne.n	800403c <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 8004006:	f7ff f88b 	bl	8003120 <IsLowerCLIbaud>
 800400a:	2800      	cmp	r0, #0
 800400c:	d021      	beq.n	8004052 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <BOS_Init+0x128>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004014:	2032      	movs	r0, #50	; 0x32
 8004016:	f008 fafb 	bl	800c610 <StartMilliDelay>
		Module_Init();	
 800401a:	f006 fd79 	bl	800ab10 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <BOS_Init+0x12c>)
 8004020:	22e1      	movs	r2, #225	; 0xe1
 8004022:	0252      	lsls	r2, r2, #9
 8004024:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004026:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 8004028:	001d      	movs	r5, r3
 800402a:	68a9      	ldr	r1, [r5, #8]
 800402c:	0020      	movs	r0, r4
 800402e:	f008 fd75 	bl	800cb1c <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004032:	3401      	adds	r4, #1
 8004034:	b2e4      	uxtb	r4, r4
 8004036:	2c07      	cmp	r4, #7
 8004038:	d1f7      	bne.n	800402a <BOS_Init+0x4e>
 800403a:	e00f      	b.n	800405c <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 800403c:	f7ff f8c0 	bl	80031c0 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004040:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <BOS_Init+0x130>)
 8004046:	4a32      	ldr	r2, [pc, #200]	; (8004110 <BOS_Init+0x134>)
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	e7fd      	b.n	800404e <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004052:	2032      	movs	r0, #50	; 0x32
 8004054:	f008 fadc 	bl	800c610 <StartMilliDelay>
		Module_Init();				
 8004058:	f006 fd5a 	bl	800ab10 <Module_Init>
	LoadEEvars();
 800405c:	f7ff f84e 	bl	80030fc <LoadEEvars>
	UpdateMyPortsDir();
 8004060:	f7ff ff96 	bl	8003f90 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004064:	f007 fa9c 	bl	800b5a0 <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <BOS_Init+0x138>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d116      	bne.n	800409e <BOS_Init+0xc2>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004070:	2580      	movs	r5, #128	; 0x80
 8004072:	01ed      	lsls	r5, r5, #7
 8004074:	4c28      	ldr	r4, [pc, #160]	; (8004118 <BOS_Init+0x13c>)
 8004076:	2201      	movs	r2, #1
 8004078:	0029      	movs	r1, r5
 800407a:	0020      	movs	r0, r4
 800407c:	f00b ff62 	bl	800ff44 <HAL_GPIO_WritePin>
 8004080:	20fa      	movs	r0, #250	; 0xfa
 8004082:	0040      	lsls	r0, r0, #1
 8004084:	f008 fac4 	bl	800c610 <StartMilliDelay>
 8004088:	2200      	movs	r2, #0
 800408a:	0029      	movs	r1, r5
 800408c:	0020      	movs	r0, r4
 800408e:	f00b ff59 	bl	800ff44 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004092:	f002 ffb5 	bl	8007000 <ResetUartORE>
	BOS_initialized = 1;
 8004096:	4b21      	ldr	r3, [pc, #132]	; (800411c <BOS_Init+0x140>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
}
 800409c:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 800409e:	2580      	movs	r5, #128	; 0x80
 80040a0:	01ed      	lsls	r5, r5, #7
 80040a2:	4c1d      	ldr	r4, [pc, #116]	; (8004118 <BOS_Init+0x13c>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	0029      	movs	r1, r5
 80040a8:	0020      	movs	r0, r4
 80040aa:	f00b ff4b 	bl	800ff44 <HAL_GPIO_WritePin>
 80040ae:	20fa      	movs	r0, #250	; 0xfa
 80040b0:	0040      	lsls	r0, r0, #1
 80040b2:	f008 faad 	bl	800c610 <StartMilliDelay>
 80040b6:	2200      	movs	r2, #0
 80040b8:	0029      	movs	r1, r5
 80040ba:	0020      	movs	r0, r4
 80040bc:	f00b ff42 	bl	800ff44 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80040c0:	2064      	movs	r0, #100	; 0x64
 80040c2:	f008 faa5 	bl	800c610 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80040c6:	2201      	movs	r2, #1
 80040c8:	0029      	movs	r1, r5
 80040ca:	0020      	movs	r0, r4
 80040cc:	f00b ff3a 	bl	800ff44 <HAL_GPIO_WritePin>
 80040d0:	2064      	movs	r0, #100	; 0x64
 80040d2:	f008 fa9d 	bl	800c610 <StartMilliDelay>
 80040d6:	2200      	movs	r2, #0
 80040d8:	0029      	movs	r1, r5
 80040da:	0020      	movs	r0, r4
 80040dc:	f00b ff32 	bl	800ff44 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	f008 fa95 	bl	800c610 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80040e6:	2201      	movs	r2, #1
 80040e8:	0029      	movs	r1, r5
 80040ea:	0020      	movs	r0, r4
 80040ec:	f00b ff2a 	bl	800ff44 <HAL_GPIO_WritePin>
 80040f0:	2064      	movs	r0, #100	; 0x64
 80040f2:	f008 fa8d 	bl	800c610 <StartMilliDelay>
 80040f6:	2200      	movs	r2, #0
 80040f8:	0029      	movs	r1, r5
 80040fa:	0020      	movs	r0, r4
 80040fc:	f00b ff22 	bl	800ff44 <HAL_GPIO_WritePin>
 8004100:	e7c7      	b.n	8004092 <BOS_Init+0xb6>
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	20000a7e 	.word	0x20000a7e
 8004108:	20006940 	.word	0x20006940
 800410c:	e000ed00 	.word	0xe000ed00
 8004110:	05fa0004 	.word	0x05fa0004
 8004114:	2000105c 	.word	0x2000105c
 8004118:	48000400 	.word	0x48000400
 800411c:	20000a7d 	.word	0x20000a7d

08004120 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8004120:	b510      	push	{r4, lr}
 8004122:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8004124:	201e      	movs	r0, #30
 8004126:	f00d fd85 	bl	8011c34 <malloc>
 800412a:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 800412c:	221e      	movs	r2, #30
 800412e:	2100      	movs	r1, #0
 8004130:	f00d ffbf 	bl	80120b2 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8004134:	4908      	ldr	r1, [pc, #32]	; (8004158 <GetDateString+0x38>)
 8004136:	7d8b      	ldrb	r3, [r1, #22]
 8004138:	7d0a      	ldrb	r2, [r1, #20]
 800413a:	3a01      	subs	r2, #1
 800413c:	0092      	lsls	r2, r2, #2
 800413e:	4807      	ldr	r0, [pc, #28]	; (800415c <GetDateString+0x3c>)
 8004140:	5812      	ldr	r2, [r2, r0]
 8004142:	8b08      	ldrh	r0, [r1, #24]
 8004144:	9001      	str	r0, [sp, #4]
 8004146:	7d49      	ldrb	r1, [r1, #21]
 8004148:	9100      	str	r1, [sp, #0]
 800414a:	4905      	ldr	r1, [pc, #20]	; (8004160 <GetDateString+0x40>)
 800414c:	0020      	movs	r0, r4
 800414e:	f00e f9a5 	bl	801249c <sprintf>
  return buffer;
}
 8004152:	0020      	movs	r0, r4
 8004154:	b002      	add	sp, #8
 8004156:	bd10      	pop	{r4, pc}
 8004158:	20006940 	.word	0x20006940
 800415c:	0801886c 	.word	0x0801886c
 8004160:	080187d4 	.word	0x080187d4

08004164 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004164:	b500      	push	{lr}
 8004166:	b085      	sub	sp, #20
 8004168:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <Bridge+0x24>)
 800416c:	7819      	ldrb	r1, [r3, #0]
 800416e:	2301      	movs	r3, #1
 8004170:	9303      	str	r3, [sp, #12]
 8004172:	3b02      	subs	r3, #2
 8004174:	9302      	str	r3, [sp, #8]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	3303      	adds	r3, #3
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	000b      	movs	r3, r1
 800417e:	f004 fd47 	bl	8008c10 <StartScastDMAStream>
}
 8004182:	b005      	add	sp, #20
 8004184:	bd00      	pop	{pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	2000105c 	.word	0x2000105c

0800418c <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 800418c:	b530      	push	{r4, r5, lr}
 800418e:	b087      	sub	sp, #28
 8004190:	0005      	movs	r5, r0
 8004192:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004194:	2300      	movs	r3, #0
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2100      	movs	r1, #0
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fe fe0f 	bl	8002dc8 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 80041aa:	1e6a      	subs	r2, r5, #1
 80041ac:	00d3      	lsls	r3, r2, #3
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <Unbridge+0x78>)
 80041b4:	589b      	ldr	r3, [r3, r2]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <Unbridge+0x58>
 80041ba:	1e62      	subs	r2, r4, #1
 80041bc:	00d3      	lsls	r3, r2, #3
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <Unbridge+0x78>)
 80041c4:	589b      	ldr	r3, [r3, r2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 80041ca:	0028      	movs	r0, r5
 80041cc:	f002 fe88 	bl	8006ee0 <SwitchStreamDMAToMsg>
 80041d0:	2000      	movs	r0, #0
 80041d2:	e013      	b.n	80041fc <Unbridge+0x70>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 80041d4:	0028      	movs	r0, r5
 80041d6:	f002 fe83 	bl	8006ee0 <SwitchStreamDMAToMsg>
 80041da:	0020      	movs	r0, r4
 80041dc:	f002 fe80 	bl	8006ee0 <SwitchStreamDMAToMsg>
 80041e0:	2000      	movs	r0, #0
 80041e2:	e00b      	b.n	80041fc <Unbridge+0x70>
	else if (streamDMA[port2-1].Instance != 0)
 80041e4:	1e62      	subs	r2, r4, #1
 80041e6:	00d3      	lsls	r3, r2, #3
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <Unbridge+0x78>)
 80041ee:	589b      	ldr	r3, [r3, r2]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 80041f4:	0020      	movs	r0, r4
 80041f6:	f002 fe73 	bl	8006ee0 <SwitchStreamDMAToMsg>
 80041fa:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 80041fc:	b007      	add	sp, #28
 80041fe:	bd30      	pop	{r4, r5, pc}
	else {return BOS_ERR_WrongValue;}
 8004200:	2068      	movs	r0, #104	; 0x68
 8004202:	e7fb      	b.n	80041fc <Unbridge+0x70>
 8004204:	20001910 	.word	0x20001910

08004208 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004208:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 800420a:	7803      	ldrb	r3, [r0, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00f      	beq.n	8004230 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004210:	4d08      	ldr	r5, [pc, #32]	; (8004234 <StringToLowerCase+0x2c>)
 8004212:	2403      	movs	r4, #3
 8004214:	e004      	b.n	8004220 <StringToLowerCase+0x18>
 8004216:	7001      	strb	r1, [r0, #0]
 8004218:	3001      	adds	r0, #1
	for(int i = 0; string[i]; i++){
 800421a:	7803      	ldrb	r3, [r0, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004220:	5cea      	ldrb	r2, [r5, r3]
 8004222:	4022      	ands	r2, r4
 8004224:	0019      	movs	r1, r3
 8004226:	2a01      	cmp	r2, #1
 8004228:	d1f5      	bne.n	8004216 <StringToLowerCase+0xe>
 800422a:	3320      	adds	r3, #32
 800422c:	0019      	movs	r1, r3
 800422e:	e7f2      	b.n	8004216 <StringToLowerCase+0xe>
	}
}
 8004230:	bd30      	pop	{r4, r5, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	0801ad59 	.word	0x0801ad59

08004238 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423a:	46ce      	mov	lr, r9
 800423c:	4647      	mov	r7, r8
 800423e:	b580      	push	{r7, lr}
 8004240:	b089      	sub	sp, #36	; 0x24
 8004242:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004244:	4bde      	ldr	r3, [pc, #888]	; (80045c0 <ParseSnippetCondition+0x388>)
 8004246:	781c      	ldrb	r4, [r3, #0]
 8004248:	2c05      	cmp	r4, #5
 800424a:	d100      	bne.n	800424e <ParseSnippetCondition+0x16>
 800424c:	e21a      	b.n	8004684 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 800424e:	49dd      	ldr	r1, [pc, #884]	; (80045c4 <ParseSnippetCondition+0x38c>)
 8004250:	00a3      	lsls	r3, r4, #2
 8004252:	191a      	adds	r2, r3, r4
 8004254:	0092      	lsls	r2, r2, #2
 8004256:	2000      	movs	r0, #0
 8004258:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 800425a:	191a      	adds	r2, r3, r4
 800425c:	0092      	lsls	r2, r2, #2
 800425e:	188a      	adds	r2, r1, r2
 8004260:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004262:	1918      	adds	r0, r3, r4
 8004264:	0080      	lsls	r0, r0, #2
 8004266:	3002      	adds	r0, #2
 8004268:	1840      	adds	r0, r0, r1
 800426a:	2204      	movs	r2, #4
 800426c:	2100      	movs	r1, #0
 800426e:	f00d ff20 	bl	80120b2 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004272:	782b      	ldrb	r3, [r5, #0]
 8004274:	2b62      	cmp	r3, #98	; 0x62
 8004276:	d102      	bne.n	800427e <ParseSnippetCondition+0x46>
 8004278:	78ab      	ldrb	r3, [r5, #2]
 800427a:	2b2e      	cmp	r3, #46	; 0x2e
 800427c:	d032      	beq.n	80042e4 <ParseSnippetCondition+0xac>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 800427e:	4cd2      	ldr	r4, [pc, #840]	; (80045c8 <ParseSnippetCondition+0x390>)
 8004280:	0029      	movs	r1, r5
 8004282:	0020      	movs	r0, r4
 8004284:	f00e f945 	bl	8012512 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004288:	4dd0      	ldr	r5, [pc, #832]	; (80045cc <ParseSnippetCondition+0x394>)
 800428a:	0029      	movs	r1, r5
 800428c:	0020      	movs	r0, r4
 800428e:	f00e ffb7 	bl	8013200 <strtok>
 8004292:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8004294:	0029      	movs	r1, r5
 8004296:	2000      	movs	r0, #0
 8004298:	f00e ffb2 	bl	8013200 <strtok>
 800429c:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 800429e:	0029      	movs	r1, r5
 80042a0:	2000      	movs	r0, #0
 80042a2:	f00e ffad 	bl	8013200 <strtok>
 80042a6:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 80042a8:	2c00      	cmp	r4, #0
 80042aa:	d100      	bne.n	80042ae <ParseSnippetCondition+0x76>
 80042ac:	e1ec      	b.n	8004688 <ParseSnippetCondition+0x450>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 80042ae:	0020      	movs	r0, r4
 80042b0:	f7fe ffb0 	bl	8003214 <IsModuleParameter>
 80042b4:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80042b6:	d100      	bne.n	80042ba <ParseSnippetCondition+0x82>
 80042b8:	e194      	b.n	80045e4 <ParseSnippetCondition+0x3ac>
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	d000      	beq.n	80042c0 <ParseSnippetCondition+0x88>
 80042be:	e193      	b.n	80045e8 <ParseSnippetCondition+0x3b0>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 80042c0:	3667      	adds	r6, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	d000      	beq.n	80042c8 <ParseSnippetCondition+0x90>
 80042c6:	e1ba      	b.n	800463e <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 80042c8:	4dbd      	ldr	r5, [pc, #756]	; (80045c0 <ParseSnippetCondition+0x388>)
 80042ca:	782b      	ldrb	r3, [r5, #0]
 80042cc:	49bd      	ldr	r1, [pc, #756]	; (80045c4 <ParseSnippetCondition+0x38c>)
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	18d0      	adds	r0, r2, r3
 80042d2:	0080      	lsls	r0, r0, #2
 80042d4:	3e65      	subs	r6, #101	; 0x65
 80042d6:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80042d8:	180a      	adds	r2, r1, r0
 80042da:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80042dc:	3301      	adds	r3, #1
 80042de:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 80042e0:	2600      	movs	r6, #0
 80042e2:	e1ac      	b.n	800463e <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 80042e4:	786f      	ldrb	r7, [r5, #1]
 80042e6:	3f30      	subs	r7, #48	; 0x30
 80042e8:	b2ff      	uxtb	r7, r7
	BOS_Status status = BOS_OK;
 80042ea:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 80042ec:	2f06      	cmp	r7, #6
 80042ee:	d900      	bls.n	80042f2 <ParseSnippetCondition+0xba>
 80042f0:	e1a5      	b.n	800463e <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80042f2:	4ab4      	ldr	r2, [pc, #720]	; (80045c4 <ParseSnippetCondition+0x38c>)
 80042f4:	00a3      	lsls	r3, r4, #2
 80042f6:	1919      	adds	r1, r3, r4
 80042f8:	0089      	lsls	r1, r1, #2
 80042fa:	2001      	movs	r0, #1
 80042fc:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 80042fe:	1853      	adds	r3, r2, r1
 8004300:	2200      	movs	r2, #0
 8004302:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004304:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004306:	1cee      	adds	r6, r5, #3
 8004308:	3207      	adds	r2, #7
 800430a:	49b1      	ldr	r1, [pc, #708]	; (80045d0 <ParseSnippetCondition+0x398>)
 800430c:	0030      	movs	r0, r6
 800430e:	f00e f908 	bl	8012522 <strncmp>
 8004312:	2800      	cmp	r0, #0
 8004314:	d124      	bne.n	8004360 <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004316:	00a3      	lsls	r3, r4, #2
 8004318:	191c      	adds	r4, r3, r4
 800431a:	00a4      	lsls	r4, r4, #2
 800431c:	4ba9      	ldr	r3, [pc, #676]	; (80045c4 <ParseSnippetCondition+0x38c>)
 800431e:	191c      	adds	r4, r3, r4
 8004320:	2305      	movs	r3, #5
 8004322:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004324:	00fa      	lsls	r2, r7, #3
 8004326:	19d2      	adds	r2, r2, r7
 8004328:	4baa      	ldr	r3, [pc, #680]	; (80045d4 <ParseSnippetCondition+0x39c>)
 800432a:	189b      	adds	r3, r3, r2
 800432c:	7a1b      	ldrb	r3, [r3, #8]
 800432e:	2201      	movs	r2, #1
 8004330:	0016      	movs	r6, r2
 8004332:	401e      	ands	r6, r3
 8004334:	421a      	tst	r2, r3
 8004336:	d005      	beq.n	8004344 <ParseSnippetCondition+0x10c>
				status = BOS_OK;
 8004338:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 800433a:	4aa1      	ldr	r2, [pc, #644]	; (80045c0 <ParseSnippetCondition+0x388>)
 800433c:	7813      	ldrb	r3, [r2, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	7013      	strb	r3, [r2, #0]
 8004342:	e17c      	b.n	800463e <ParseSnippetCondition+0x406>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004344:	2301      	movs	r3, #1
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	2300      	movs	r3, #0
 800434a:	9304      	str	r3, [sp, #16]
 800434c:	9303      	str	r3, [sp, #12]
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	2101      	movs	r1, #1
 8004358:	0038      	movs	r0, r7
 800435a:	f003 ff29 	bl	80081b0 <SetButtonEvents>
 800435e:	e7ec      	b.n	800433a <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004360:	220e      	movs	r2, #14
 8004362:	499d      	ldr	r1, [pc, #628]	; (80045d8 <ParseSnippetCondition+0x3a0>)
 8004364:	0030      	movs	r0, r6
 8004366:	f00e f8dc 	bl	8012522 <strncmp>
 800436a:	2800      	cmp	r0, #0
 800436c:	d120      	bne.n	80043b0 <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 800436e:	00a3      	lsls	r3, r4, #2
 8004370:	191c      	adds	r4, r3, r4
 8004372:	00a4      	lsls	r4, r4, #2
 8004374:	4b93      	ldr	r3, [pc, #588]	; (80045c4 <ParseSnippetCondition+0x38c>)
 8004376:	191c      	adds	r4, r3, r4
 8004378:	2306      	movs	r3, #6
 800437a:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 800437c:	00fa      	lsls	r2, r7, #3
 800437e:	19d2      	adds	r2, r2, r7
 8004380:	4b94      	ldr	r3, [pc, #592]	; (80045d4 <ParseSnippetCondition+0x39c>)
 8004382:	189b      	adds	r3, r3, r2
 8004384:	7a1b      	ldrb	r3, [r3, #8]
 8004386:	2202      	movs	r2, #2
 8004388:	0016      	movs	r6, r2
 800438a:	401e      	ands	r6, r3
 800438c:	421a      	tst	r2, r3
 800438e:	d001      	beq.n	8004394 <ParseSnippetCondition+0x15c>
				status = BOS_OK;					
 8004390:	2600      	movs	r6, #0
 8004392:	e7d2      	b.n	800433a <ParseSnippetCondition+0x102>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004394:	2301      	movs	r3, #1
 8004396:	9305      	str	r3, [sp, #20]
 8004398:	2300      	movs	r3, #0
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	3a01      	subs	r2, #1
 80043a6:	2100      	movs	r1, #0
 80043a8:	0038      	movs	r0, r7
 80043aa:	f003 ff01 	bl	80081b0 <SetButtonEvents>
 80043ae:	e7c4      	b.n	800433a <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 80043b0:	220c      	movs	r2, #12
 80043b2:	498a      	ldr	r1, [pc, #552]	; (80045dc <ParseSnippetCondition+0x3a4>)
 80043b4:	0030      	movs	r0, r6
 80043b6:	f00e f8b4 	bl	8012522 <strncmp>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d17b      	bne.n	80044b6 <ParseSnippetCondition+0x27e>
				if (!button[port].pressedX1Sec) {	
 80043be:	00fa      	lsls	r2, r7, #3
 80043c0:	19d2      	adds	r2, r2, r7
 80043c2:	4b84      	ldr	r3, [pc, #528]	; (80045d4 <ParseSnippetCondition+0x39c>)
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	789e      	ldrb	r6, [r3, #2]
 80043c8:	2e00      	cmp	r6, #0
 80043ca:	d00f      	beq.n	80043ec <ParseSnippetCondition+0x1b4>
				} else if (!button[port].pressedX2Sec) {	
 80043cc:	00fa      	lsls	r2, r7, #3
 80043ce:	19d2      	adds	r2, r2, r7
 80043d0:	4b80      	ldr	r3, [pc, #512]	; (80045d4 <ParseSnippetCondition+0x39c>)
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	78de      	ldrb	r6, [r3, #3]
 80043d6:	2e00      	cmp	r6, #0
 80043d8:	d029      	beq.n	800442e <ParseSnippetCondition+0x1f6>
				} else if (!button[port].pressedX3Sec) {	
 80043da:	00fa      	lsls	r2, r7, #3
 80043dc:	19d2      	adds	r2, r2, r7
 80043de:	4b7d      	ldr	r3, [pc, #500]	; (80045d4 <ParseSnippetCondition+0x39c>)
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	791e      	ldrb	r6, [r3, #4]
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	d044      	beq.n	8004472 <ParseSnippetCondition+0x23a>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80043e8:	260c      	movs	r6, #12
 80043ea:	e7a6      	b.n	800433a <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 80043ec:	4b75      	ldr	r3, [pc, #468]	; (80045c4 <ParseSnippetCondition+0x38c>)
 80043ee:	4698      	mov	r8, r3
 80043f0:	00a3      	lsls	r3, r4, #2
 80043f2:	191b      	adds	r3, r3, r4
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4443      	add	r3, r8
 80043f8:	2209      	movs	r2, #9
 80043fa:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80043fc:	0028      	movs	r0, r5
 80043fe:	300f      	adds	r0, #15
 8004400:	f00d fbe7 	bl	8011bd2 <atoi>
 8004404:	b2c3      	uxtb	r3, r0
 8004406:	4a6e      	ldr	r2, [pc, #440]	; (80045c0 <ParseSnippetCondition+0x388>)
 8004408:	7811      	ldrb	r1, [r2, #0]
 800440a:	008a      	lsls	r2, r1, #2
 800440c:	1852      	adds	r2, r2, r1
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	4442      	add	r2, r8
 8004412:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004414:	2201      	movs	r2, #1
 8004416:	9205      	str	r2, [sp, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	9204      	str	r2, [sp, #16]
 800441c:	9203      	str	r2, [sp, #12]
 800441e:	9202      	str	r2, [sp, #8]
 8004420:	9201      	str	r2, [sp, #4]
 8004422:	9200      	str	r2, [sp, #0]
 8004424:	2100      	movs	r1, #0
 8004426:	0038      	movs	r0, r7
 8004428:	f003 fec2 	bl	80081b0 <SetButtonEvents>
 800442c:	e785      	b.n	800433a <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <ParseSnippetCondition+0x38c>)
 8004430:	4698      	mov	r8, r3
 8004432:	00a3      	lsls	r3, r4, #2
 8004434:	191b      	adds	r3, r3, r4
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4443      	add	r3, r8
 800443a:	220a      	movs	r2, #10
 800443c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800443e:	0028      	movs	r0, r5
 8004440:	300f      	adds	r0, #15
 8004442:	f00d fbc6 	bl	8011bd2 <atoi>
 8004446:	b2c0      	uxtb	r0, r0
 8004448:	4b5d      	ldr	r3, [pc, #372]	; (80045c0 <ParseSnippetCondition+0x388>)
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	0093      	lsls	r3, r2, #2
 800444e:	189b      	adds	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4443      	add	r3, r8
 8004454:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004456:	2301      	movs	r3, #1
 8004458:	9305      	str	r3, [sp, #20]
 800445a:	2300      	movs	r3, #0
 800445c:	9304      	str	r3, [sp, #16]
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	9302      	str	r3, [sp, #8]
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	9000      	str	r0, [sp, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	2100      	movs	r1, #0
 800446a:	0038      	movs	r0, r7
 800446c:	f003 fea0 	bl	80081b0 <SetButtonEvents>
 8004470:	e763      	b.n	800433a <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8004472:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <ParseSnippetCondition+0x38c>)
 8004474:	4698      	mov	r8, r3
 8004476:	00a3      	lsls	r3, r4, #2
 8004478:	191b      	adds	r3, r3, r4
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4443      	add	r3, r8
 800447e:	220b      	movs	r2, #11
 8004480:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004482:	0028      	movs	r0, r5
 8004484:	300f      	adds	r0, #15
 8004486:	f00d fba4 	bl	8011bd2 <atoi>
 800448a:	b2c0      	uxtb	r0, r0
 800448c:	4b4c      	ldr	r3, [pc, #304]	; (80045c0 <ParseSnippetCondition+0x388>)
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	0093      	lsls	r3, r2, #2
 8004492:	189b      	adds	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4443      	add	r3, r8
 8004498:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 800449a:	2301      	movs	r3, #1
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	2300      	movs	r3, #0
 80044a0:	9304      	str	r3, [sp, #16]
 80044a2:	9303      	str	r3, [sp, #12]
 80044a4:	9302      	str	r3, [sp, #8]
 80044a6:	9001      	str	r0, [sp, #4]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2100      	movs	r1, #0
 80044ae:	0038      	movs	r0, r7
 80044b0:	f003 fe7e 	bl	80081b0 <SetButtonEvents>
 80044b4:	e741      	b.n	800433a <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 80044b6:	220d      	movs	r2, #13
 80044b8:	4949      	ldr	r1, [pc, #292]	; (80045e0 <ParseSnippetCondition+0x3a8>)
 80044ba:	0030      	movs	r0, r6
 80044bc:	f00e f831 	bl	8012522 <strncmp>
	BOS_Status status = BOS_OK;
 80044c0:	2600      	movs	r6, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d000      	beq.n	80044c8 <ParseSnippetCondition+0x290>
 80044c6:	e738      	b.n	800433a <ParseSnippetCondition+0x102>
				if (!button[port].releasedY1Sec) {	
 80044c8:	00fa      	lsls	r2, r7, #3
 80044ca:	19d2      	adds	r2, r2, r7
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <ParseSnippetCondition+0x39c>)
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	795e      	ldrb	r6, [r3, #5]
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d00f      	beq.n	80044f6 <ParseSnippetCondition+0x2be>
				} else if (!button[port].releasedY2Sec) {	
 80044d6:	00fa      	lsls	r2, r7, #3
 80044d8:	19d2      	adds	r2, r2, r7
 80044da:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <ParseSnippetCondition+0x39c>)
 80044dc:	189b      	adds	r3, r3, r2
 80044de:	799e      	ldrb	r6, [r3, #6]
 80044e0:	2e00      	cmp	r6, #0
 80044e2:	d02a      	beq.n	800453a <ParseSnippetCondition+0x302>
				} else if (!button[port].releasedY3Sec) {	
 80044e4:	00fa      	lsls	r2, r7, #3
 80044e6:	19d2      	adds	r2, r2, r7
 80044e8:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <ParseSnippetCondition+0x39c>)
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	79de      	ldrb	r6, [r3, #7]
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	d044      	beq.n	800457c <ParseSnippetCondition+0x344>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80044f2:	260d      	movs	r6, #13
 80044f4:	e721      	b.n	800433a <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 80044f6:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <ParseSnippetCondition+0x38c>)
 80044f8:	4698      	mov	r8, r3
 80044fa:	00a3      	lsls	r3, r4, #2
 80044fc:	191b      	adds	r3, r3, r4
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4443      	add	r3, r8
 8004502:	220c      	movs	r2, #12
 8004504:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004506:	0028      	movs	r0, r5
 8004508:	3010      	adds	r0, #16
 800450a:	f00d fb62 	bl	8011bd2 <atoi>
 800450e:	b2c0      	uxtb	r0, r0
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <ParseSnippetCondition+0x388>)
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	0093      	lsls	r3, r2, #2
 8004516:	189b      	adds	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4443      	add	r3, r8
 800451c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 800451e:	2301      	movs	r3, #1
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	2300      	movs	r3, #0
 8004524:	9304      	str	r3, [sp, #16]
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	9002      	str	r0, [sp, #8]
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	2100      	movs	r1, #0
 8004532:	0038      	movs	r0, r7
 8004534:	f003 fe3c 	bl	80081b0 <SetButtonEvents>
 8004538:	e6ff      	b.n	800433a <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 800453a:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <ParseSnippetCondition+0x38c>)
 800453c:	4698      	mov	r8, r3
 800453e:	2314      	movs	r3, #20
 8004540:	4699      	mov	r9, r3
 8004542:	435c      	muls	r4, r3
 8004544:	4444      	add	r4, r8
 8004546:	3b07      	subs	r3, #7
 8004548:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 800454a:	0028      	movs	r0, r5
 800454c:	3010      	adds	r0, #16
 800454e:	f00d fb40 	bl	8011bd2 <atoi>
 8004552:	b2c0      	uxtb	r0, r0
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <ParseSnippetCondition+0x388>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	464a      	mov	r2, r9
 800455a:	4353      	muls	r3, r2
 800455c:	4443      	add	r3, r8
 800455e:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004560:	2301      	movs	r3, #1
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	2100      	movs	r1, #0
 8004566:	9104      	str	r1, [sp, #16]
 8004568:	9003      	str	r0, [sp, #12]
 800456a:	9102      	str	r1, [sp, #8]
 800456c:	9101      	str	r1, [sp, #4]
 800456e:	9100      	str	r1, [sp, #0]
 8004570:	000b      	movs	r3, r1
 8004572:	000a      	movs	r2, r1
 8004574:	0038      	movs	r0, r7
 8004576:	f003 fe1b 	bl	80081b0 <SetButtonEvents>
 800457a:	e6de      	b.n	800433a <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <ParseSnippetCondition+0x38c>)
 800457e:	4698      	mov	r8, r3
 8004580:	2314      	movs	r3, #20
 8004582:	4699      	mov	r9, r3
 8004584:	435c      	muls	r4, r3
 8004586:	4444      	add	r4, r8
 8004588:	3b06      	subs	r3, #6
 800458a:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 800458c:	0028      	movs	r0, r5
 800458e:	3010      	adds	r0, #16
 8004590:	f00d fb1f 	bl	8011bd2 <atoi>
 8004594:	b2c0      	uxtb	r0, r0
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <ParseSnippetCondition+0x388>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	464a      	mov	r2, r9
 800459c:	4353      	muls	r3, r2
 800459e:	4443      	add	r3, r8
 80045a0:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 80045a2:	2301      	movs	r3, #1
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	9004      	str	r0, [sp, #16]
 80045a8:	2100      	movs	r1, #0
 80045aa:	9103      	str	r1, [sp, #12]
 80045ac:	9102      	str	r1, [sp, #8]
 80045ae:	9101      	str	r1, [sp, #4]
 80045b0:	9100      	str	r1, [sp, #0]
 80045b2:	000b      	movs	r3, r1
 80045b4:	000a      	movs	r2, r1
 80045b6:	0038      	movs	r0, r7
 80045b8:	f003 fdfa 	bl	80081b0 <SetButtonEvents>
 80045bc:	e6bd      	b.n	800433a <ParseSnippetCondition+0x102>
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	20001203 	.word	0x20001203
 80045c4:	2000695c 	.word	0x2000695c
 80045c8:	20001168 	.word	0x20001168
 80045cc:	08018478 	.word	0x08018478
 80045d0:	0801901c 	.word	0x0801901c
 80045d4:	200014ec 	.word	0x200014ec
 80045d8:	08018888 	.word	0x08018888
 80045dc:	08018898 	.word	0x08018898
 80045e0:	080188a8 	.word	0x080188a8
			else if (secondPart != NULL && thirdPart != NULL) 
 80045e4:	2e00      	cmp	r6, #0
 80045e6:	d051      	beq.n	800468c <ParseSnippetCondition+0x454>
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	d051      	beq.n	8004690 <ParseSnippetCondition+0x458>
				modPar2 = IsModuleParameter(thirdPart);
 80045ec:	0028      	movs	r0, r5
 80045ee:	f7fe fe11 	bl	8003214 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d029      	beq.n	800464a <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 80045f6:	4b28      	ldr	r3, [pc, #160]	; (8004698 <ParseSnippetCondition+0x460>)
 80045f8:	781d      	ldrb	r5, [r3, #0]
 80045fa:	4a28      	ldr	r2, [pc, #160]	; (800469c <ParseSnippetCondition+0x464>)
 80045fc:	00ab      	lsls	r3, r5, #2
 80045fe:	1959      	adds	r1, r3, r5
 8004600:	0089      	lsls	r1, r1, #2
 8004602:	2704      	movs	r7, #4
 8004604:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004606:	1959      	adds	r1, r3, r5
 8004608:	0089      	lsls	r1, r1, #2
 800460a:	1851      	adds	r1, r2, r1
 800460c:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 800460e:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004610:	4c21      	ldr	r4, [pc, #132]	; (8004698 <ParseSnippetCondition+0x460>)
 8004612:	7825      	ldrb	r5, [r4, #0]
 8004614:	0030      	movs	r0, r6
 8004616:	f7fe fe09 	bl	800322c <IsMathOperator>
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <ParseSnippetCondition+0x464>)
 800461c:	00ab      	lsls	r3, r5, #2
 800461e:	195b      	adds	r3, r3, r5
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	18d3      	adds	r3, r2, r3
 8004624:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004626:	7821      	ldrb	r1, [r4, #0]
 8004628:	008b      	lsls	r3, r1, #2
 800462a:	185b      	adds	r3, r3, r1
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02e      	beq.n	8004694 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004636:	3101      	adds	r1, #1
 8004638:	4b17      	ldr	r3, [pc, #92]	; (8004698 <ParseSnippetCondition+0x460>)
 800463a:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 800463c:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 800463e:	0030      	movs	r0, r6
 8004640:	b009      	add	sp, #36	; 0x24
 8004642:	bcc0      	pop	{r6, r7}
 8004644:	46b9      	mov	r9, r7
 8004646:	46b0      	mov	r8, r6
 8004648:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <ParseSnippetCondition+0x460>)
 800464c:	4698      	mov	r8, r3
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	4f12      	ldr	r7, [pc, #72]	; (800469c <ParseSnippetCondition+0x464>)
 8004652:	0093      	lsls	r3, r2, #2
 8004654:	1899      	adds	r1, r3, r2
 8004656:	0089      	lsls	r1, r1, #2
 8004658:	2003      	movs	r0, #3
 800465a:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800465c:	187b      	adds	r3, r7, r1
 800465e:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 8004660:	0028      	movs	r0, r5
 8004662:	f00d fab1 	bl	8011bc8 <atof>
 8004666:	f7fe f803 	bl	8002670 <__aeabi_d2f>
 800466a:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800466c:	4643      	mov	r3, r8
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	0098      	lsls	r0, r3, #2
 8004672:	18c0      	adds	r0, r0, r3
 8004674:	0080      	lsls	r0, r0, #2
 8004676:	3006      	adds	r0, #6
 8004678:	19c0      	adds	r0, r0, r7
 800467a:	2204      	movs	r2, #4
 800467c:	a907      	add	r1, sp, #28
 800467e:	f00d fd0f 	bl	80120a0 <memcpy>
 8004682:	e7c5      	b.n	8004610 <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004684:	260e      	movs	r6, #14
 8004686:	e7da      	b.n	800463e <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 8004688:	2667      	movs	r6, #103	; 0x67
 800468a:	e7d8      	b.n	800463e <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 800468c:	2667      	movs	r6, #103	; 0x67
 800468e:	e7d6      	b.n	800463e <ParseSnippetCondition+0x406>
 8004690:	2667      	movs	r6, #103	; 0x67
 8004692:	e7d4      	b.n	800463e <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8004694:	2667      	movs	r6, #103	; 0x67
 8004696:	e7d2      	b.n	800463e <ParseSnippetCondition+0x406>
 8004698:	20001203 	.word	0x20001203
 800469c:	2000695c 	.word	0x2000695c

080046a0 <AddSnippet>:
{
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	000c      	movs	r4, r1
	switch (code)
 80046a4:	2802      	cmp	r0, #2
 80046a6:	d017      	beq.n	80046d8 <AddSnippet+0x38>
 80046a8:	2803      	cmp	r0, #3
 80046aa:	d003      	beq.n	80046b4 <AddSnippet+0x14>
 80046ac:	2801      	cmp	r0, #1
 80046ae:	d00f      	beq.n	80046d0 <AddSnippet+0x30>
 80046b0:	2000      	movs	r0, #0
}
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <AddSnippet+0xec>)
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0093      	lsls	r3, r2, #2
 80046bc:	189b      	adds	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <AddSnippet+0xf0>)
 80046c2:	18d3      	adds	r3, r2, r3
 80046c4:	2201      	movs	r2, #1
 80046c6:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 80046c8:	f006 f8ec 	bl	800a8a4 <SaveToRO>
	return BOS_OK;
 80046cc:	2000      	movs	r0, #0
			break;
 80046ce:	e7f0      	b.n	80046b2 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 80046d0:	0008      	movs	r0, r1
 80046d2:	f7ff fdb1 	bl	8004238 <ParseSnippetCondition>
 80046d6:	e7ec      	b.n	80046b2 <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <AddSnippet+0xec>)
 80046da:	781d      	ldrb	r5, [r3, #0]
 80046dc:	3d01      	subs	r5, #1
 80046de:	00ab      	lsls	r3, r5, #2
 80046e0:	195b      	adds	r3, r3, r5
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <AddSnippet+0xf0>)
 80046e6:	18d3      	adds	r3, r2, r3
 80046e8:	68de      	ldr	r6, [r3, #12]
 80046ea:	2e00      	cmp	r6, #0
 80046ec:	d032      	beq.n	8004754 <AddSnippet+0xb4>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 80046ee:	0030      	movs	r0, r6
 80046f0:	f7fb fd12 	bl	8000118 <strlen>
 80046f4:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 80046f6:	0020      	movs	r0, r4
 80046f8:	f7fb fd0e 	bl	8000118 <strlen>
 80046fc:	1839      	adds	r1, r7, r0
 80046fe:	3102      	adds	r1, #2
 8004700:	0030      	movs	r0, r6
 8004702:	f00d fd09 	bl	8012118 <realloc>
 8004706:	4e22      	ldr	r6, [pc, #136]	; (8004790 <AddSnippet+0xf0>)
 8004708:	00ab      	lsls	r3, r5, #2
 800470a:	195d      	adds	r5, r3, r5
 800470c:	00ad      	lsls	r5, r5, #2
 800470e:	1975      	adds	r5, r6, r5
 8004710:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8004712:	4d1e      	ldr	r5, [pc, #120]	; (800478c <AddSnippet+0xec>)
 8004714:	782a      	ldrb	r2, [r5, #0]
 8004716:	3a01      	subs	r2, #1
 8004718:	0093      	lsls	r3, r2, #2
 800471a:	189b      	adds	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	18f3      	adds	r3, r6, r3
 8004720:	1c7a      	adds	r2, r7, #1
 8004722:	68d8      	ldr	r0, [r3, #12]
 8004724:	1880      	adds	r0, r0, r2
 8004726:	0021      	movs	r1, r4
 8004728:	f00d fef3 	bl	8012512 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 800472c:	782a      	ldrb	r2, [r5, #0]
 800472e:	3a01      	subs	r2, #1
 8004730:	0093      	lsls	r3, r2, #2
 8004732:	189b      	adds	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	18f3      	adds	r3, r6, r3
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2213      	movs	r2, #19
 800473c:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 800473e:	782a      	ldrb	r2, [r5, #0]
 8004740:	3a01      	subs	r2, #1
 8004742:	0093      	lsls	r3, r2, #2
 8004744:	189b      	adds	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	18f6      	adds	r6, r6, r3
 800474a:	68f3      	ldr	r3, [r6, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <AddSnippet+0xd6>
	return BOS_OK;
 8004750:	2000      	movs	r0, #0
 8004752:	e7ae      	b.n	80046b2 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004754:	0008      	movs	r0, r1
 8004756:	f7fb fcdf 	bl	8000118 <strlen>
 800475a:	3001      	adds	r0, #1
 800475c:	f00d fa6a 	bl	8011c34 <malloc>
 8004760:	00ab      	lsls	r3, r5, #2
 8004762:	195d      	adds	r5, r3, r5
 8004764:	00ad      	lsls	r5, r5, #2
 8004766:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <AddSnippet+0xf0>)
 8004768:	195d      	adds	r5, r3, r5
 800476a:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 800476c:	0021      	movs	r1, r4
 800476e:	f00d fed0 	bl	8012512 <strcpy>
	return BOS_OK;
 8004772:	2000      	movs	r0, #0
 8004774:	e79d      	b.n	80046b2 <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004776:	0090      	lsls	r0, r2, #2
 8004778:	1880      	adds	r0, r0, r2
 800477a:	0080      	lsls	r0, r0, #2
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <AddSnippet+0xf0>)
 800477e:	1880      	adds	r0, r0, r2
 8004780:	2214      	movs	r2, #20
 8004782:	2100      	movs	r1, #0
 8004784:	f00d fc95 	bl	80120b2 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004788:	200e      	movs	r0, #14
 800478a:	e792      	b.n	80046b2 <AddSnippet+0x12>
 800478c:	20001203 	.word	0x20001203
 8004790:	2000695c 	.word	0x2000695c

08004794 <CLI_CommandParser>:
{
 8004794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004796:	46de      	mov	lr, fp
 8004798:	4657      	mov	r7, sl
 800479a:	464e      	mov	r6, r9
 800479c:	4645      	mov	r5, r8
 800479e:	b5e0      	push	{r5, r6, r7, lr}
 80047a0:	b08b      	sub	sp, #44	; 0x2c
 80047a2:	9004      	str	r0, [sp, #16]
 80047a4:	9103      	str	r1, [sp, #12]
 80047a6:	0015      	movs	r5, r2
 80047a8:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 80047aa:	2300      	movs	r3, #0
 80047ac:	9307      	str	r3, [sp, #28]
 80047ae:	2205      	movs	r2, #5
 80047b0:	2100      	movs	r1, #0
 80047b2:	a808      	add	r0, sp, #32
 80047b4:	f00d fc7d 	bl	80120b2 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 80047b8:	4bd8      	ldr	r3, [pc, #864]	; (8004b1c <CLI_CommandParser+0x388>)
 80047ba:	4699      	mov	r9, r3
 80047bc:	e129      	b.n	8004a12 <CLI_CommandParser+0x27e>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 80047be:	1ce9      	adds	r1, r5, #3
 80047c0:	3001      	adds	r0, #1
 80047c2:	f7ff ff6d 	bl	80046a0 <AddSnippet>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d105      	bne.n	80047d6 <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 80047ca:	4bd4      	ldr	r3, [pc, #848]	; (8004b1c <CLI_CommandParser+0x388>)
 80047cc:	2202      	movs	r2, #2
 80047ce:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 80047d0:	230d      	movs	r3, #13
 80047d2:	7023      	strb	r3, [r4, #0]
 80047d4:	e027      	b.n	8004826 <CLI_CommandParser+0x92>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80047d6:	2252      	movs	r2, #82	; 0x52
 80047d8:	49d1      	ldr	r1, [pc, #836]	; (8004b20 <CLI_CommandParser+0x38c>)
 80047da:	0020      	movs	r0, r4
 80047dc:	f00d fc60 	bl	80120a0 <memcpy>
				recordSnippet = 0;
 80047e0:	4bce      	ldr	r3, [pc, #824]	; (8004b1c <CLI_CommandParser+0x388>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e01e      	b.n	8004826 <CLI_CommandParser+0x92>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 80047e8:	2206      	movs	r2, #6
 80047ea:	49ce      	ldr	r1, [pc, #824]	; (8004b24 <CLI_CommandParser+0x390>)
 80047ec:	0028      	movs	r0, r5
 80047ee:	f00d fe98 	bl	8012522 <strncmp>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d00b      	beq.n	800480e <CLI_CommandParser+0x7a>
		else if (recordSnippet == SNIPPET_COMMANDS)
 80047f6:	2e02      	cmp	r6, #2
 80047f8:	d000      	beq.n	80047fc <CLI_CommandParser+0x68>
 80047fa:	e11a      	b.n	8004a32 <CLI_CommandParser+0x29e>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 80047fc:	0029      	movs	r1, r5
 80047fe:	2002      	movs	r0, #2
 8004800:	f7ff ff4e 	bl	80046a0 <AddSnippet>
 8004804:	2800      	cmp	r0, #0
 8004806:	d124      	bne.n	8004852 <CLI_CommandParser+0xbe>
				pcOutputString[0] = '\r';
 8004808:	230d      	movs	r3, #13
 800480a:	7023      	strb	r3, [r4, #0]
 800480c:	e00b      	b.n	8004826 <CLI_CommandParser+0x92>
			recordSnippet = 0;
 800480e:	4bc3      	ldr	r3, [pc, #780]	; (8004b1c <CLI_CommandParser+0x388>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8004814:	49c4      	ldr	r1, [pc, #784]	; (8004b28 <CLI_CommandParser+0x394>)
 8004816:	3003      	adds	r0, #3
 8004818:	f7ff ff42 	bl	80046a0 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 800481c:	2241      	movs	r2, #65	; 0x41
 800481e:	49c3      	ldr	r1, [pc, #780]	; (8004b2c <CLI_CommandParser+0x398>)
 8004820:	0020      	movs	r0, r4
 8004822:	f00d fc3d 	bl	80120a0 <memcpy>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004826:	7823      	ldrb	r3, [r4, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d100      	bne.n	800482e <CLI_CommandParser+0x9a>
 800482c:	e1a8      	b.n	8004b80 <CLI_CommandParser+0x3ec>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d100      	bne.n	8004836 <CLI_CommandParser+0xa2>
 8004834:	e1bf      	b.n	8004bb6 <CLI_CommandParser+0x422>
 8004836:	2700      	movs	r7, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004838:	0020      	movs	r0, r4
 800483a:	f7fb fc6d 	bl	8000118 <strlen>
 800483e:	b282      	uxth	r2, r0
 8004840:	2301      	movs	r3, #1
 8004842:	425b      	negs	r3, r3
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	3333      	adds	r3, #51	; 0x33
 8004848:	0021      	movs	r1, r4
 800484a:	9804      	ldr	r0, [sp, #16]
 800484c:	f008 f8f6 	bl	800ca3c <writePxMutex>
 8004850:	e0d4      	b.n	80049fc <CLI_CommandParser+0x268>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004852:	2252      	movs	r2, #82	; 0x52
 8004854:	49b2      	ldr	r1, [pc, #712]	; (8004b20 <CLI_CommandParser+0x38c>)
 8004856:	0020      	movs	r0, r4
 8004858:	f00d fc22 	bl	80120a0 <memcpy>
 800485c:	e7e3      	b.n	8004826 <CLI_CommandParser+0x92>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800485e:	2299      	movs	r2, #153	; 0x99
 8004860:	1c70      	adds	r0, r6, #1
 8004862:	0092      	lsls	r2, r2, #2
 8004864:	0021      	movs	r1, r4
 8004866:	f008 fab1 	bl	800cdcc <FreeRTOS_CLIProcessCommand>
 800486a:	0007      	movs	r7, r0
 800486c:	e0c2      	b.n	80049f4 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 800486e:	2227      	movs	r2, #39	; 0x27
 8004870:	49af      	ldr	r1, [pc, #700]	; (8004b30 <CLI_CommandParser+0x39c>)
 8004872:	0020      	movs	r0, r4
 8004874:	f00d fc14 	bl	80120a0 <memcpy>
 8004878:	e7d5      	b.n	8004826 <CLI_CommandParser+0x92>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800487a:	2225      	movs	r2, #37	; 0x25
 800487c:	49ad      	ldr	r1, [pc, #692]	; (8004b34 <CLI_CommandParser+0x3a0>)
 800487e:	0020      	movs	r0, r4
 8004880:	f00d fc0e 	bl	80120a0 <memcpy>
 8004884:	e7cf      	b.n	8004826 <CLI_CommandParser+0x92>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004886:	2219      	movs	r2, #25
 8004888:	2100      	movs	r1, #0
 800488a:	48ab      	ldr	r0, [pc, #684]	; (8004b38 <CLI_CommandParser+0x3a4>)
 800488c:	f00d fc11 	bl	80120b2 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004890:	3601      	adds	r6, #1
 8004892:	0028      	movs	r0, r5
 8004894:	f7fb fc40 	bl	8000118 <strlen>
 8004898:	0007      	movs	r7, r0
 800489a:	a807      	add	r0, sp, #28
 800489c:	f7fb fc3c 	bl	8000118 <strlen>
 80048a0:	3f01      	subs	r7, #1
 80048a2:	1a3a      	subs	r2, r7, r0
 80048a4:	0031      	movs	r1, r6
 80048a6:	48a5      	ldr	r0, [pc, #660]	; (8004b3c <CLI_CommandParser+0x3a8>)
 80048a8:	f00d fe4c 	bl	8012544 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80048ac:	0028      	movs	r0, r5
 80048ae:	f7fb fc33 	bl	8000118 <strlen>
 80048b2:	0007      	movs	r7, r0
 80048b4:	a807      	add	r0, sp, #28
 80048b6:	f7fb fc2f 	bl	8000118 <strlen>
 80048ba:	1a3b      	subs	r3, r7, r0
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2217      	movs	r2, #23
 80048c0:	21ff      	movs	r1, #255	; 0xff
 80048c2:	4640      	mov	r0, r8
 80048c4:	f004 f956 	bl	8008b74 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80048c8:	2299      	movs	r2, #153	; 0x99
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	0021      	movs	r1, r4
 80048ce:	0030      	movs	r0, r6
 80048d0:	f008 fa7c 	bl	800cdcc <FreeRTOS_CLIProcessCommand>
 80048d4:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 80048d6:	0020      	movs	r0, r4
 80048d8:	f7fb fc1e 	bl	8000118 <strlen>
 80048dc:	1820      	adds	r0, r4, r0
 80048de:	221d      	movs	r2, #29
 80048e0:	4997      	ldr	r1, [pc, #604]	; (8004b40 <CLI_CommandParser+0x3ac>)
 80048e2:	f00d fbdd 	bl	80120a0 <memcpy>
 80048e6:	e085      	b.n	80049f4 <CLI_CommandParser+0x260>
					group = id >> 8;
 80048e8:	9b05      	ldr	r3, [sp, #20]
 80048ea:	1218      	asrs	r0, r3, #8
 80048ec:	b2c3      	uxtb	r3, r0
 80048ee:	469a      	mov	sl, r3
 80048f0:	4b94      	ldr	r3, [pc, #592]	; (8004b44 <CLI_CommandParser+0x3b0>)
 80048f2:	469b      	mov	fp, r3
 80048f4:	4652      	mov	r2, sl
 80048f6:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80048f8:	2219      	movs	r2, #25
 80048fa:	2100      	movs	r1, #0
 80048fc:	488e      	ldr	r0, [pc, #568]	; (8004b38 <CLI_CommandParser+0x3a4>)
 80048fe:	f00d fbd8 	bl	80120b2 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004902:	1c73      	adds	r3, r6, #1
 8004904:	9305      	str	r3, [sp, #20]
 8004906:	0028      	movs	r0, r5
 8004908:	f7fb fc06 	bl	8000118 <strlen>
 800490c:	0006      	movs	r6, r0
 800490e:	a807      	add	r0, sp, #28
 8004910:	f7fb fc02 	bl	8000118 <strlen>
 8004914:	3e01      	subs	r6, #1
 8004916:	1a32      	subs	r2, r6, r0
 8004918:	9905      	ldr	r1, [sp, #20]
 800491a:	4888      	ldr	r0, [pc, #544]	; (8004b3c <CLI_CommandParser+0x3a8>)
 800491c:	f00d fe12 	bl	8012544 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004920:	0028      	movs	r0, r5
 8004922:	f7fb fbf9 	bl	8000118 <strlen>
 8004926:	0006      	movs	r6, r0
 8004928:	a807      	add	r0, sp, #28
 800492a:	f7fb fbf5 	bl	8000118 <strlen>
 800492e:	1a33      	subs	r3, r6, r0
 8004930:	b29b      	uxth	r3, r3
 8004932:	2217      	movs	r2, #23
 8004934:	4651      	mov	r1, sl
 8004936:	4640      	mov	r0, r8
 8004938:	f004 f91c 	bl	8008b74 <BroadcastMessage>
					if (InGroup(myID, group))
 800493c:	4b82      	ldr	r3, [pc, #520]	; (8004b48 <CLI_CommandParser+0x3b4>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4a81      	ldr	r2, [pc, #516]	; (8004b4c <CLI_CommandParser+0x3b8>)
 8004946:	5a9b      	ldrh	r3, [r3, r2]
 8004948:	465a      	mov	r2, fp
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	4113      	asrs	r3, r2
 800494e:	07db      	lsls	r3, r3, #31
 8004950:	d406      	bmi.n	8004960 <CLI_CommandParser+0x1cc>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8004952:	ab07      	add	r3, sp, #28
 8004954:	0022      	movs	r2, r4
 8004956:	497e      	ldr	r1, [pc, #504]	; (8004b50 <CLI_CommandParser+0x3bc>)
 8004958:	0020      	movs	r0, r4
 800495a:	f00d fd9f 	bl	801249c <sprintf>
 800495e:	e049      	b.n	80049f4 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004960:	2299      	movs	r2, #153	; 0x99
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	0021      	movs	r1, r4
 8004966:	9805      	ldr	r0, [sp, #20]
 8004968:	f008 fa30 	bl	800cdcc <FreeRTOS_CLIProcessCommand>
 800496c:	0007      	movs	r7, r0
 800496e:	e7f0      	b.n	8004952 <CLI_CommandParser+0x1be>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8004970:	0028      	movs	r0, r5
 8004972:	f7fb fbd1 	bl	8000118 <strlen>
 8004976:	0007      	movs	r7, r0
 8004978:	a807      	add	r0, sp, #28
 800497a:	f7fb fbcd 	bl	8000118 <strlen>
 800497e:	3f01      	subs	r7, #1
 8004980:	1a3a      	subs	r2, r7, r0
 8004982:	0031      	movs	r1, r6
 8004984:	486d      	ldr	r0, [pc, #436]	; (8004b3c <CLI_CommandParser+0x3a8>)
 8004986:	f00d fddd 	bl	8012544 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 800498a:	0028      	movs	r0, r5
 800498c:	f7fb fbc4 	bl	8000118 <strlen>
 8004990:	0006      	movs	r6, r0
 8004992:	a807      	add	r0, sp, #28
 8004994:	f7fb fbc0 	bl	8000118 <strlen>
 8004998:	3e01      	subs	r6, #1
 800499a:	1a36      	subs	r6, r6, r0
 800499c:	b2b2      	uxth	r2, r6
 800499e:	2117      	movs	r1, #23
 80049a0:	4650      	mov	r0, sl
 80049a2:	f004 f90f 	bl	8008bc4 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 80049a6:	9a05      	ldr	r2, [sp, #20]
 80049a8:	496a      	ldr	r1, [pc, #424]	; (8004b54 <CLI_CommandParser+0x3c0>)
 80049aa:	0020      	movs	r0, r4
 80049ac:	f00d fd76 	bl	801249c <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 80049b0:	7823      	ldrb	r3, [r4, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <CLI_CommandParser+0x228>
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d108      	bne.n	80049ce <CLI_CommandParser+0x23a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80049bc:	0020      	movs	r0, r4
 80049be:	f7fb fbab 	bl	8000118 <strlen>
 80049c2:	0002      	movs	r2, r0
 80049c4:	2100      	movs	r1, #0
 80049c6:	0020      	movs	r0, r4
 80049c8:	f00d fb73 	bl	80120b2 <memset>
 80049cc:	e07c      	b.n	8004ac8 <CLI_CommandParser+0x334>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 80049ce:	0020      	movs	r0, r4
 80049d0:	f7fb fba2 	bl	8000118 <strlen>
 80049d4:	b282      	uxth	r2, r0
 80049d6:	2301      	movs	r3, #1
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	3331      	adds	r3, #49	; 0x31
 80049dc:	0021      	movs	r1, r4
 80049de:	9804      	ldr	r0, [sp, #16]
 80049e0:	f008 f82c 	bl	800ca3c <writePxMutex>
 80049e4:	e7ea      	b.n	80049bc <CLI_CommandParser+0x228>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 80049e6:	2299      	movs	r2, #153	; 0x99
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	0021      	movs	r1, r4
 80049ec:	0028      	movs	r0, r5
 80049ee:	f008 f9ed 	bl	800cdcc <FreeRTOS_CLIProcessCommand>
 80049f2:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 80049f4:	7823      	ldrb	r3, [r4, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d000      	beq.n	80049fc <CLI_CommandParser+0x268>
 80049fa:	e07f      	b.n	8004afc <CLI_CommandParser+0x368>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80049fc:	0020      	movs	r0, r4
 80049fe:	f7fb fb8b 	bl	8000118 <strlen>
 8004a02:	0002      	movs	r2, r0
 8004a04:	2100      	movs	r1, #0
 8004a06:	0020      	movs	r0, r4
 8004a08:	f00d fb53 	bl	80120b2 <memset>
	} while( xReturned != pdFALSE );
 8004a0c:	2f00      	cmp	r7, #0
 8004a0e:	d100      	bne.n	8004a12 <CLI_CommandParser+0x27e>
 8004a10:	e0be      	b.n	8004b90 <CLI_CommandParser+0x3fc>
		StringToLowerCase(( char * )cInputString);
 8004a12:	0028      	movs	r0, r5
 8004a14:	f7ff fbf8 	bl	8004208 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004a18:	464b      	mov	r3, r9
 8004a1a:	781e      	ldrb	r6, [r3, #0]
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	d000      	beq.n	8004a22 <CLI_CommandParser+0x28e>
 8004a20:	e6e2      	b.n	80047e8 <CLI_CommandParser+0x54>
 8004a22:	2203      	movs	r2, #3
 8004a24:	494c      	ldr	r1, [pc, #304]	; (8004b58 <CLI_CommandParser+0x3c4>)
 8004a26:	0028      	movs	r0, r5
 8004a28:	f00d fd7b 	bl	8012522 <strncmp>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d100      	bne.n	8004a32 <CLI_CommandParser+0x29e>
 8004a30:	e6c5      	b.n	80047be <CLI_CommandParser+0x2a>
			loc = strchr( ( char * ) cInputString, '.');
 8004a32:	212e      	movs	r1, #46	; 0x2e
 8004a34:	0028      	movs	r0, r5
 8004a36:	f00d fd5e 	bl	80124f6 <strchr>
 8004a3a:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004a3c:	d0d3      	beq.n	80049e6 <CLI_CommandParser+0x252>
 8004a3e:	3803      	subs	r0, #3
 8004a40:	2203      	movs	r2, #3
 8004a42:	4946      	ldr	r1, [pc, #280]	; (8004b5c <CLI_CommandParser+0x3c8>)
 8004a44:	f00d fd6d 	bl	8012522 <strncmp>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d0cc      	beq.n	80049e6 <CLI_CommandParser+0x252>
 8004a4c:	7873      	ldrb	r3, [r6, #1]
 8004a4e:	4a44      	ldr	r2, [pc, #272]	; (8004b60 <CLI_CommandParser+0x3cc>)
 8004a50:	5cd3      	ldrb	r3, [r2, r3]
 8004a52:	075b      	lsls	r3, r3, #29
 8004a54:	d4c7      	bmi.n	80049e6 <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8004a56:	1b72      	subs	r2, r6, r5
 8004a58:	0029      	movs	r1, r5
 8004a5a:	a807      	add	r0, sp, #28
 8004a5c:	f00d fd72 	bl	8012544 <strncpy>
				id = GetID(idString);
 8004a60:	a807      	add	r0, sp, #28
 8004a62:	f7ff f8f5 	bl	8003c50 <GetID>
 8004a66:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8004a68:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <CLI_CommandParser+0x3b4>)
 8004a6a:	7812      	ldrb	r2, [r2, #0]
 8004a6c:	4690      	mov	r8, r2
 8004a6e:	4290      	cmp	r0, r2
 8004a70:	d100      	bne.n	8004a74 <CLI_CommandParser+0x2e0>
 8004a72:	e6f4      	b.n	800485e <CLI_CommandParser+0xca>
				}	else if (id == BOS_ERR_WrongName) {		
 8004a74:	2864      	cmp	r0, #100	; 0x64
 8004a76:	d100      	bne.n	8004a7a <CLI_CommandParser+0x2e6>
 8004a78:	e6f9      	b.n	800486e <CLI_CommandParser+0xda>
				}	else if (id == BOS_ERR_WrongID) {
 8004a7a:	2866      	cmp	r0, #102	; 0x66
 8004a7c:	d100      	bne.n	8004a80 <CLI_CommandParser+0x2ec>
 8004a7e:	e6fc      	b.n	800487a <CLI_CommandParser+0xe6>
				}	else if (id == BOS_BROADCAST) {
 8004a80:	28ff      	cmp	r0, #255	; 0xff
 8004a82:	d100      	bne.n	8004a86 <CLI_CommandParser+0x2f2>
 8004a84:	e6ff      	b.n	8004886 <CLI_CommandParser+0xf2>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8004a86:	466b      	mov	r3, sp
 8004a88:	7d1b      	ldrb	r3, [r3, #20]
 8004a8a:	469a      	mov	sl, r3
 8004a8c:	2bfe      	cmp	r3, #254	; 0xfe
 8004a8e:	d100      	bne.n	8004a92 <CLI_CommandParser+0x2fe>
 8004a90:	e72a      	b.n	80048e8 <CLI_CommandParser+0x154>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8004a92:	3601      	adds	r6, #1
 8004a94:	2206      	movs	r2, #6
 8004a96:	4933      	ldr	r1, [pc, #204]	; (8004b64 <CLI_CommandParser+0x3d0>)
 8004a98:	0030      	movs	r0, r6
 8004a9a:	f00d fd42 	bl	8012522 <strncmp>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d000      	beq.n	8004aa4 <CLI_CommandParser+0x310>
 8004aa2:	e765      	b.n	8004970 <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;				
 8004aa4:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <CLI_CommandParser+0x3d4>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004aaa:	2119      	movs	r1, #25
 8004aac:	4650      	mov	r0, sl
 8004aae:	f004 f889 	bl	8008bc4 <SendMessageToModule>
						osDelay(100);
 8004ab2:	2064      	movs	r0, #100	; 0x64
 8004ab4:	f008 f8f1 	bl	800cc9a <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <CLI_CommandParser+0x3d8>)
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <CLI_CommandParser+0x3b4>)
 8004abe:	7818      	ldrb	r0, [r3, #0]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	f7fe fd8a 	bl	80035dc <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8004ac8:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <CLI_CommandParser+0x3d4>)
 8004aca:	799b      	ldrb	r3, [r3, #6]
 8004acc:	2b60      	cmp	r3, #96	; 0x60
 8004ace:	d000      	beq.n	8004ad2 <CLI_CommandParser+0x33e>
 8004ad0:	e6a9      	b.n	8004826 <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8004ad2:	21fa      	movs	r1, #250	; 0xfa
 8004ad4:	0089      	lsls	r1, r1, #2
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f009 fcfc 	bl	800e4d4 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <CLI_CommandParser+0x3dc>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d100      	bne.n	8004ae6 <CLI_CommandParser+0x352>
 8004ae4:	e69f      	b.n	8004826 <CLI_CommandParser+0x92>
									++timedoutMsg;
 8004ae6:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <CLI_CommandParser+0x3e0>)
 8004ae8:	8813      	ldrh	r3, [r2, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8004aee:	9b05      	ldr	r3, [sp, #20]
 8004af0:	0022      	movs	r2, r4
 8004af2:	4921      	ldr	r1, [pc, #132]	; (8004b78 <CLI_CommandParser+0x3e4>)
 8004af4:	0020      	movs	r0, r4
 8004af6:	f00d fcd1 	bl	801249c <sprintf>
 8004afa:	e694      	b.n	8004826 <CLI_CommandParser+0x92>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d100      	bne.n	8004b04 <CLI_CommandParser+0x370>
 8004b02:	e77b      	b.n	80049fc <CLI_CommandParser+0x268>
 8004b04:	e698      	b.n	8004838 <CLI_CommandParser+0xa4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004b06:	2301      	movs	r3, #1
 8004b08:	425b      	negs	r3, r3
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	3333      	adds	r3, #51	; 0x33
 8004b0e:	2238      	movs	r2, #56	; 0x38
 8004b10:	491a      	ldr	r1, [pc, #104]	; (8004b7c <CLI_CommandParser+0x3e8>)
 8004b12:	9804      	ldr	r0, [sp, #16]
 8004b14:	f007 ff92 	bl	800ca3c <writePxMutex>
}
 8004b18:	e046      	b.n	8004ba8 <CLI_CommandParser+0x414>
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	20001230 	.word	0x20001230
 8004b20:	080188bc 	.word	0x080188bc
 8004b24:	08018910 	.word	0x08018910
 8004b28:	08018350 	.word	0x08018350
 8004b2c:	08018918 	.word	0x08018918
 8004b30:	08018960 	.word	0x08018960
 8004b34:	08018988 	.word	0x08018988
 8004b38:	20000cdc 	.word	0x20000cdc
 8004b3c:	20000f28 	.word	0x20000f28
 8004b40:	080189b0 	.word	0x080189b0
 8004b44:	20001202 	.word	0x20001202
 8004b48:	2000105c 	.word	0x2000105c
 8004b4c:	20000eb0 	.word	0x20000eb0
 8004b50:	080189d0 	.word	0x080189d0
 8004b54:	08018a04 	.word	0x08018a04
 8004b58:	080188b8 	.word	0x080188b8
 8004b5c:	0801895c 	.word	0x0801895c
 8004b60:	0801ad59 	.word	0x0801ad59
 8004b64:	080189fc 	.word	0x080189fc
 8004b68:	20006940 	.word	0x20006940
 8004b6c:	20000a7f 	.word	0x20000a7f
 8004b70:	200010f8 	.word	0x200010f8
 8004b74:	20001712 	.word	0x20001712
 8004b78:	08018a28 	.word	0x08018a28
 8004b7c:	08018a48 	.word	0x08018a48
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004b80:	0020      	movs	r0, r4
 8004b82:	f7fb fac9 	bl	8000118 <strlen>
 8004b86:	0002      	movs	r2, r0
 8004b88:	2100      	movs	r1, #0
 8004b8a:	0020      	movs	r0, r4
 8004b8c:	f00d fa91 	bl	80120b2 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8004b90:	2209      	movs	r2, #9
 8004b92:	2100      	movs	r1, #0
 8004b94:	a807      	add	r0, sp, #28
 8004b96:	f00d fa8c 	bl	80120b2 <memset>
	if(!recordSnippet && enableOutput)
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <CLI_CommandParser+0x434>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <CLI_CommandParser+0x414>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ae      	bne.n	8004b06 <CLI_CommandParser+0x372>
}
 8004ba8:	b00b      	add	sp, #44	; 0x2c
 8004baa:	bcf0      	pop	{r4, r5, r6, r7}
 8004bac:	46bb      	mov	fp, r7
 8004bae:	46b2      	mov	sl, r6
 8004bb0:	46a9      	mov	r9, r5
 8004bb2:	46a0      	mov	r8, r4
 8004bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004bb6:	0020      	movs	r0, r4
 8004bb8:	f7fb faae 	bl	8000118 <strlen>
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	f00d fa76 	bl	80120b2 <memset>
 8004bc6:	e7e3      	b.n	8004b90 <CLI_CommandParser+0x3fc>
 8004bc8:	20001230 	.word	0x20001230

08004bcc <prvCLITask>:
{
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bce:	46d6      	mov	lr, sl
 8004bd0:	464f      	mov	r7, r9
 8004bd2:	4646      	mov	r6, r8
 8004bd4:	b5c0      	push	{r6, r7, lr}
 8004bd6:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4249      	negs	r1, r1
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f009 fc79 	bl	800e4d4 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8004be2:	230f      	movs	r3, #15
 8004be4:	446b      	add	r3, sp
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004bea:	f008 f979 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 8004bee:	4682      	mov	sl, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8004bf0:	23e1      	movs	r3, #225	; 0xe1
 8004bf2:	031b      	lsls	r3, r3, #12
 8004bf4:	4a58      	ldr	r2, [pc, #352]	; (8004d58 <prvCLITask+0x18c>)
 8004bf6:	6892      	ldr	r2, [r2, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d00f      	beq.n	8004c1c <prvCLITask+0x50>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004bfc:	2401      	movs	r4, #1
			if (port != PcPort)
 8004bfe:	4e57      	ldr	r6, [pc, #348]	; (8004d5c <prvCLITask+0x190>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004c00:	001d      	movs	r5, r3
 8004c02:	e003      	b.n	8004c0c <prvCLITask+0x40>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004c04:	3401      	adds	r4, #1
 8004c06:	b2e4      	uxtb	r4, r4
 8004c08:	2c07      	cmp	r4, #7
 8004c0a:	d007      	beq.n	8004c1c <prvCLITask+0x50>
			if (port != PcPort)
 8004c0c:	7833      	ldrb	r3, [r6, #0]
 8004c0e:	42a3      	cmp	r3, r4
 8004c10:	d0f8      	beq.n	8004c04 <prvCLITask+0x38>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004c12:	0029      	movs	r1, r5
 8004c14:	0020      	movs	r0, r4
 8004c16:	f007 ff81 	bl	800cb1c <UpdateBaudrate>
 8004c1a:	e7f3      	b.n	8004c04 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8004c1c:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <prvCLITask+0x194>)
 8004c1e:	881a      	ldrh	r2, [r3, #0]
 8004c20:	0053      	lsls	r3, r2, #1
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4a4f      	ldr	r2, [pc, #316]	; (8004d64 <prvCLITask+0x198>)
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	4a4f      	ldr	r2, [pc, #316]	; (8004d68 <prvCLITask+0x19c>)
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	4c4f      	ldr	r4, [pc, #316]	; (8004d6c <prvCLITask+0x1a0>)
 8004c30:	4d4a      	ldr	r5, [pc, #296]	; (8004d5c <prvCLITask+0x190>)
 8004c32:	7829      	ldrb	r1, [r5, #0]
 8004c34:	9100      	str	r1, [sp, #0]
 8004c36:	494e      	ldr	r1, [pc, #312]	; (8004d70 <prvCLITask+0x1a4>)
 8004c38:	0020      	movs	r0, r4
 8004c3a:	f00d fc2f 	bl	801249c <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8004c3e:	7828      	ldrb	r0, [r5, #0]
 8004c40:	230a      	movs	r3, #10
 8004c42:	4a4c      	ldr	r2, [pc, #304]	; (8004d74 <prvCLITask+0x1a8>)
 8004c44:	494c      	ldr	r1, [pc, #304]	; (8004d78 <prvCLITask+0x1ac>)
 8004c46:	f007 ff25 	bl	800ca94 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7fb fa64 	bl	8000118 <strlen>
 8004c50:	b282      	uxth	r2, r0
 8004c52:	7828      	ldrb	r0, [r5, #0]
 8004c54:	230a      	movs	r3, #10
 8004c56:	0021      	movs	r1, r4
 8004c58:	f007 ff1c 	bl	800ca94 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4698      	mov	r8, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <prvCLITask+0x1b0>)
 8004c62:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004c64:	001f      	movs	r7, r3
 8004c66:	e05c      	b.n	8004d22 <prvCLITask+0x156>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8004c68:	200f      	movs	r0, #15
 8004c6a:	4468      	add	r0, sp
 8004c6c:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 8004c6e:	0198      	lsls	r0, r3, #6
 8004c70:	4a43      	ldr	r2, [pc, #268]	; (8004d80 <prvCLITask+0x1b4>)
 8004c72:	1812      	adds	r2, r2, r0
 8004c74:	2000      	movs	r0, #0
 8004c76:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 8004c78:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <prvCLITask+0x1b0>)
 8004c7a:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 8004c7c:	240f      	movs	r4, #15
 8004c7e:	446c      	add	r4, sp
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <prvCLITask+0x190>)
 8004c82:	7818      	ldrb	r0, [r3, #0]
 8004c84:	230a      	movs	r3, #10
 8004c86:	2201      	movs	r2, #1
 8004c88:	0021      	movs	r1, r4
 8004c8a:	f007 ff03 	bl	800ca94 <writePxITMutex>
		if( cRxedChar == '\r' )
 8004c8e:	7823      	ldrb	r3, [r4, #0]
 8004c90:	2b0d      	cmp	r3, #13
 8004c92:	d027      	beq.n	8004ce4 <prvCLITask+0x118>
			if( cRxedChar == '\n' )
 8004c94:	2b0a      	cmp	r3, #10
 8004c96:	d042      	beq.n	8004d1e <prvCLITask+0x152>
			else if( cRxedChar == '\b' )
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d051      	beq.n	8004d40 <prvCLITask+0x174>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	3a20      	subs	r2, #32
 8004ca0:	2a5e      	cmp	r2, #94	; 0x5e
 8004ca2:	d83c      	bhi.n	8004d1e <prvCLITask+0x152>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	2a31      	cmp	r2, #49	; 0x31
 8004ca8:	dc39      	bgt.n	8004d1e <prvCLITask+0x152>
						cInputString[ cInputIndex ] = cRxedChar;
 8004caa:	4a36      	ldr	r2, [pc, #216]	; (8004d84 <prvCLITask+0x1b8>)
 8004cac:	4641      	mov	r1, r8
 8004cae:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8004cb0:	4643      	mov	r3, r8
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	4698      	mov	r8, r3
 8004cb8:	e031      	b.n	8004d1e <prvCLITask+0x152>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004cba:	2200      	movs	r2, #0
 8004cbc:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8004cbe:	f009 fee5 	bl	800ea8c <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004cc2:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8004cc4:	7833      	ldrb	r3, [r6, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	019a      	lsls	r2, r3, #6
 8004cca:	18aa      	adds	r2, r5, r2
 8004ccc:	5d12      	ldrb	r2, [r2, r4]
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	d1ca      	bne.n	8004c68 <prvCLITask+0x9c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8004cd2:	2c3f      	cmp	r4, #63	; 0x3f
 8004cd4:	d0f1      	beq.n	8004cba <prvCLITask+0xee>
			taskYIELD();
 8004cd6:	f009 fed9 	bl	800ea8c <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004cda:	3401      	adds	r4, #1
 8004cdc:	b2a4      	uxth	r4, r4
 8004cde:	2c3f      	cmp	r4, #63	; 0x3f
 8004ce0:	d9f0      	bls.n	8004cc4 <prvCLITask+0xf8>
 8004ce2:	e7cb      	b.n	8004c7c <prvCLITask+0xb0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <prvCLITask+0x190>)
 8004ce6:	7818      	ldrb	r0, [r3, #0]
 8004ce8:	230a      	movs	r3, #10
 8004cea:	2202      	movs	r2, #2
 8004cec:	4926      	ldr	r1, [pc, #152]	; (8004d88 <prvCLITask+0x1bc>)
 8004cee:	f007 fed1 	bl	800ca94 <writePxITMutex>
			if( cInputIndex == 0 )
 8004cf2:	4643      	mov	r3, r8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <prvCLITask+0x16a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 8004cf8:	4c22      	ldr	r4, [pc, #136]	; (8004d84 <prvCLITask+0x1b8>)
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <prvCLITask+0x190>)
 8004cfc:	7818      	ldrb	r0, [r3, #0]
 8004cfe:	4653      	mov	r3, sl
 8004d00:	0022      	movs	r2, r4
 8004d02:	2101      	movs	r1, #1
 8004d04:	f7ff fd46 	bl	8004794 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 8004d08:	0021      	movs	r1, r4
 8004d0a:	4820      	ldr	r0, [pc, #128]	; (8004d8c <prvCLITask+0x1c0>)
 8004d0c:	f00d fc01 	bl	8012512 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8004d10:	2232      	movs	r2, #50	; 0x32
 8004d12:	2100      	movs	r1, #0
 8004d14:	0020      	movs	r0, r4
 8004d16:	f00d f9cc 	bl	80120b2 <memset>
			cInputIndex = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4698      	mov	r8, r3
		taskYIELD();
 8004d1e:	f009 feb5 	bl	800ea8c <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <prvCLITask+0x190>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	444b      	add	r3, r9
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	781c      	ldrb	r4, [r3, #0]
 8004d2c:	2c3f      	cmp	r4, #63	; 0x3f
 8004d2e:	d8a5      	bhi.n	8004c7c <prvCLITask+0xb0>
			if (UARTRxBuf[PcPort-1][chr]) {
 8004d30:	4e0a      	ldr	r6, [pc, #40]	; (8004d5c <prvCLITask+0x190>)
 8004d32:	4d13      	ldr	r5, [pc, #76]	; (8004d80 <prvCLITask+0x1b4>)
 8004d34:	e7c6      	b.n	8004cc4 <prvCLITask+0xf8>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8004d36:	4915      	ldr	r1, [pc, #84]	; (8004d8c <prvCLITask+0x1c0>)
 8004d38:	4812      	ldr	r0, [pc, #72]	; (8004d84 <prvCLITask+0x1b8>)
 8004d3a:	f00d fbea 	bl	8012512 <strcpy>
 8004d3e:	e7db      	b.n	8004cf8 <prvCLITask+0x12c>
				if( cInputIndex > 0 )
 8004d40:	4643      	mov	r3, r8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	ddeb      	ble.n	8004d1e <prvCLITask+0x152>
					cInputIndex--;
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	4698      	mov	r8, r3
					cInputString[ cInputIndex ] = '\0';
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <prvCLITask+0x1b8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4641      	mov	r1, r8
 8004d52:	545a      	strb	r2, [r3, r1]
 8004d54:	e7e3      	b.n	8004d1e <prvCLITask+0x152>
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	20006940 	.word	0x20006940
 8004d5c:	20000a7f 	.word	0x20000a7f
 8004d60:	20000050 	.word	0x20000050
 8004d64:	080187e8 	.word	0x080187e8
 8004d68:	2000105c 	.word	0x2000105c
 8004d6c:	20001204 	.word	0x20001204
 8004d70:	08018a84 	.word	0x08018a84
 8004d74:	00000293 	.word	0x00000293
 8004d78:	08018ab0 	.word	0x08018ab0
 8004d7c:	20001434 	.word	0x20001434
 8004d80:	200012b4 	.word	0x200012b4
 8004d84:	20001134 	.word	0x20001134
 8004d88:	08019e48 	.word	0x08019e48
 8004d8c:	200011d0 	.word	0x200011d0

08004d90 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004d94:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <ParseSnippetCommand+0x78>)
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	0093      	lsls	r3, r2, #2
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <ParseSnippetCommand+0x7c>)
 8004da2:	18d3      	adds	r3, r2, r3
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02c      	beq.n	8004e04 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <ParseSnippetCommand+0x80>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d014      	beq.n	8004ddc <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <ParseSnippetCommand+0x80>)
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	7833      	ldrb	r3, [r6, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d012      	beq.n	8004de2 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 8004dbc:	2113      	movs	r1, #19
 8004dbe:	0030      	movs	r0, r6
 8004dc0:	f00d fb99 	bl	80124f6 <strchr>
 8004dc4:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 8004dc6:	d011      	beq.n	8004dec <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8004dc8:	1b82      	subs	r2, r0, r6
 8004dca:	0031      	movs	r1, r6
 8004dcc:	0020      	movs	r0, r4
 8004dce:	f00d fbb9 	bl	8012544 <strncpy>
		ptrStart = ptrEnd+1;
 8004dd2:	3501      	adds	r5, #1
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <ParseSnippetCommand+0x80>)
 8004dd6:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8004dd8:	2001      	movs	r0, #1
}
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <ParseSnippetCommand+0x80>)
 8004dde:	6018      	str	r0, [r3, #0]
 8004de0:	e7e7      	b.n	8004db2 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <ParseSnippetCommand+0x80>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
		return false;
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7f6      	b.n	8004dda <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 8004dec:	0031      	movs	r1, r6
 8004dee:	0020      	movs	r0, r4
 8004df0:	f00d fb8f 	bl	8012512 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8004df4:	0020      	movs	r0, r4
 8004df6:	f7fb f98f 	bl	8000118 <strlen>
 8004dfa:	1836      	adds	r6, r6, r0
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <ParseSnippetCommand+0x80>)
 8004dfe:	601e      	str	r6, [r3, #0]
	return true;
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7ea      	b.n	8004dda <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004e04:	2000      	movs	r0, #0
 8004e06:	e7e8      	b.n	8004dda <ParseSnippetCommand+0x4a>
 8004e08:	20001203 	.word	0x20001203
 8004e0c:	2000695c 	.word	0x2000695c
 8004e10:	2000122c 	.word	0x2000122c

08004e14 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8004e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e16:	b083      	sub	sp, #12
 8004e18:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 8004e1a:	0083      	lsls	r3, r0, #2
 8004e1c:	181b      	adds	r3, r3, r0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4a3e      	ldr	r2, [pc, #248]	; (8004f1c <CheckSnippetCondition+0x108>)
 8004e22:	5c9b      	ldrb	r3, [r3, r2]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d021      	beq.n	8004e6c <CheckSnippetCondition+0x58>
 8004e28:	2000      	movs	r0, #0
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d130      	bne.n	8004e90 <CheckSnippetCondition+0x7c>
			break;
			
						
		case SNIP_COND_MODULE_PARAM_CONST :	
			// Get the constant and module parameter values. 
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8004e2e:	4d3b      	ldr	r5, [pc, #236]	; (8004f1c <CheckSnippetCondition+0x108>)
 8004e30:	00a6      	lsls	r6, r4, #2
 8004e32:	1933      	adds	r3, r6, r4
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	18eb      	adds	r3, r5, r3
 8004e38:	78da      	ldrb	r2, [r3, #3]
 8004e3a:	3a01      	subs	r2, #1
 8004e3c:	0053      	lsls	r3, r2, #1
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a37      	ldr	r2, [pc, #220]	; (8004f20 <CheckSnippetCondition+0x10c>)
 8004e44:	589b      	ldr	r3, [r3, r2]
 8004e46:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004e48:	1931      	adds	r1, r6, r4
 8004e4a:	0089      	lsls	r1, r1, #2
 8004e4c:	3106      	adds	r1, #6
 8004e4e:	1949      	adds	r1, r1, r5
 8004e50:	2204      	movs	r2, #4
 8004e52:	a801      	add	r0, sp, #4
 8004e54:	f00d f924 	bl	80120a0 <memcpy>
			// Compare them mathematically
			switch (snippets[index].cond.mathOperator)
 8004e58:	1936      	adds	r6, r6, r4
 8004e5a:	00b6      	lsls	r6, r6, #2
 8004e5c:	19ad      	adds	r5, r5, r6
 8004e5e:	786b      	ldrb	r3, [r5, #1]
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d853      	bhi.n	8004f0c <CheckSnippetCondition+0xf8>
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <CheckSnippetCondition+0x110>)
 8004e68:	58d3      	ldr	r3, [r2, r3]
 8004e6a:	469f      	mov	pc, r3
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <CheckSnippetCondition+0x108>)
 8004e6e:	0080      	lsls	r0, r0, #2
 8004e70:	1903      	adds	r3, r0, r4
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	18d3      	adds	r3, r2, r3
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8004e76:	7899      	ldrb	r1, [r3, #2]
 8004e78:	00cb      	lsls	r3, r1, #3
 8004e7a:	185b      	adds	r3, r3, r1
 8004e7c:	1900      	adds	r0, r0, r4
 8004e7e:	0080      	lsls	r0, r0, #2
 8004e80:	1812      	adds	r2, r2, r0
 8004e82:	4929      	ldr	r1, [pc, #164]	; (8004f28 <CheckSnippetCondition+0x114>)
 8004e84:	5c58      	ldrb	r0, [r3, r1]
 8004e86:	78d3      	ldrb	r3, [r2, #3]
 8004e88:	1ac0      	subs	r0, r0, r3
 8004e8a:	4243      	negs	r3, r0
 8004e8c:	4158      	adcs	r0, r3
 8004e8e:	b2c0      	uxtb	r0, r0
  	default:
  		break;
  }
	
	return false;
}
 8004e90:	b003      	add	sp, #12
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8004e94:	1c39      	adds	r1, r7, #0
 8004e96:	9801      	ldr	r0, [sp, #4]
 8004e98:	f7fb fb1a 	bl	80004d0 <__aeabi_fcmpeq>
 8004e9c:	1e43      	subs	r3, r0, #1
 8004e9e:	4198      	sbcs	r0, r3
 8004ea0:	e7f6      	b.n	8004e90 <CheckSnippetCondition+0x7c>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8004ea2:	1c39      	adds	r1, r7, #0
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	f7fb fb19 	bl	80004dc <__aeabi_fcmplt>
 8004eaa:	1e43      	subs	r3, r0, #1
 8004eac:	4198      	sbcs	r0, r3
 8004eae:	e7ef      	b.n	8004e90 <CheckSnippetCondition+0x7c>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8004eb0:	1c39      	adds	r1, r7, #0
 8004eb2:	9801      	ldr	r0, [sp, #4]
 8004eb4:	f7fb fb26 	bl	8000504 <__aeabi_fcmpgt>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d029      	beq.n	8004f10 <CheckSnippetCondition+0xfc>
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	1c38      	adds	r0, r7, #0
 8004ec0:	f7fb fb06 	bl	80004d0 <__aeabi_fcmpeq>
 8004ec4:	4243      	negs	r3, r0
 8004ec6:	4158      	adcs	r0, r3
 8004ec8:	e7e2      	b.n	8004e90 <CheckSnippetCondition+0x7c>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 8004eca:	1c39      	adds	r1, r7, #0
 8004ecc:	9801      	ldr	r0, [sp, #4]
 8004ece:	f7fb fb0f 	bl	80004f0 <__aeabi_fcmple>
 8004ed2:	1e43      	subs	r3, r0, #1
 8004ed4:	4198      	sbcs	r0, r3
 8004ed6:	e7db      	b.n	8004e90 <CheckSnippetCondition+0x7c>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8004ed8:	1c39      	adds	r1, r7, #0
 8004eda:	9801      	ldr	r0, [sp, #4]
 8004edc:	f7fb fb1c 	bl	8000518 <__aeabi_fcmpge>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d017      	beq.n	8004f14 <CheckSnippetCondition+0x100>
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	1c38      	adds	r0, r7, #0
 8004ee8:	f7fb faf2 	bl	80004d0 <__aeabi_fcmpeq>
 8004eec:	4243      	negs	r3, r0
 8004eee:	4158      	adcs	r0, r3
 8004ef0:	e7ce      	b.n	8004e90 <CheckSnippetCondition+0x7c>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8004ef2:	1c39      	adds	r1, r7, #0
 8004ef4:	9801      	ldr	r0, [sp, #4]
 8004ef6:	f7fb faeb 	bl	80004d0 <__aeabi_fcmpeq>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d10c      	bne.n	8004f18 <CheckSnippetCondition+0x104>
 8004efe:	2100      	movs	r1, #0
 8004f00:	1c38      	adds	r0, r7, #0
 8004f02:	f7fb fae5 	bl	80004d0 <__aeabi_fcmpeq>
 8004f06:	4243      	negs	r3, r0
 8004f08:	4158      	adcs	r0, r3
 8004f0a:	e7c1      	b.n	8004e90 <CheckSnippetCondition+0x7c>
			switch (snippets[index].cond.mathOperator)
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e7bf      	b.n	8004e90 <CheckSnippetCondition+0x7c>
	return false;
 8004f10:	2000      	movs	r0, #0
 8004f12:	e7bd      	b.n	8004e90 <CheckSnippetCondition+0x7c>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e7bb      	b.n	8004e90 <CheckSnippetCondition+0x7c>
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7b9      	b.n	8004e90 <CheckSnippetCondition+0x7c>
 8004f1c:	2000695c 	.word	0x2000695c
 8004f20:	20000084 	.word	0x20000084
 8004f24:	08018d44 	.word	0x08018d44
 8004f28:	200014ec 	.word	0x200014ec

08004f2c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	46ce      	mov	lr, r9
 8004f30:	4647      	mov	r7, r8
 8004f32:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8004f34:	f007 ffd4 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 8004f38:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <ExecuteSnippet+0x90>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d036      	beq.n	8004fb0 <ExecuteSnippet+0x84>
 8004f42:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 8004f44:	4f1e      	ldr	r7, [pc, #120]	; (8004fc0 <ExecuteSnippet+0x94>)
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8004f46:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <ExecuteSnippet+0x98>)
 8004f48:	4698      	mov	r8, r3
 8004f4a:	e01a      	b.n	8004f82 <ExecuteSnippet+0x56>
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <ExecuteSnippet+0x9c>)
 8004f4e:	7818      	ldrb	r0, [r3, #0]
 8004f50:	0033      	movs	r3, r6
 8004f52:	4642      	mov	r2, r8
 8004f54:	2100      	movs	r1, #0
 8004f56:	f7ff fc1d 	bl	8004794 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8004f5a:	0030      	movs	r0, r6
 8004f5c:	f7fb f8dc 	bl	8000118 <strlen>
 8004f60:	0002      	movs	r2, r0
 8004f62:	2100      	movs	r1, #0
 8004f64:	0030      	movs	r0, r6
 8004f66:	f00d f8a4 	bl	80120b2 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	68e8      	ldr	r0, [r5, #12]
 8004f6e:	f7ff ff0f 	bl	8004d90 <ParseSnippetCommand>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d1ea      	bne.n	8004f4c <ExecuteSnippet+0x20>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004f76:	3401      	adds	r4, #1
 8004f78:	b2a4      	uxth	r4, r4
 8004f7a:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <ExecuteSnippet+0x90>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	42a3      	cmp	r3, r4
 8004f80:	d916      	bls.n	8004fb0 <ExecuteSnippet+0x84>
		if (snippets[s].state)								// Check for activated Snippets
 8004f82:	00a3      	lsls	r3, r4, #2
 8004f84:	191b      	adds	r3, r3, r4
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	7c1b      	ldrb	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f2      	beq.n	8004f76 <ExecuteSnippet+0x4a>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8004f90:	b2e0      	uxtb	r0, r4
 8004f92:	f7ff ff3f 	bl	8004e14 <CheckSnippetCondition>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0ed      	beq.n	8004f76 <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <ExecuteSnippet+0xa0>)
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004fa0:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <ExecuteSnippet+0x98>)
 8004fa2:	4699      	mov	r9, r3
 8004fa4:	00a3      	lsls	r3, r4, #2
 8004fa6:	191d      	adds	r5, r3, r4
 8004fa8:	00ad      	lsls	r5, r5, #2
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <ExecuteSnippet+0x94>)
 8004fac:	195d      	adds	r5, r3, r5
 8004fae:	e7dc      	b.n	8004f6a <ExecuteSnippet+0x3e>
			}
		}
  }
	
	return result;
}
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	bcc0      	pop	{r6, r7}
 8004fb4:	46b9      	mov	r9, r7
 8004fb6:	46b0      	mov	r8, r6
 8004fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	20001203 	.word	0x20001203
 8004fc0:	2000695c 	.word	0x2000695c
 8004fc4:	2000119c 	.word	0x2000119c
 8004fc8:	20000a7f 	.word	0x20000a7f
 8004fcc:	20006940 	.word	0x20006940

08004fd0 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	4770      	bx	lr

08004fd4 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	0004      	movs	r4, r0
 8004fda:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8004fe0:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d015      	beq.n	8005012 <setBaudrateCommand+0x3e>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004fe6:	aa01      	add	r2, sp, #4
 8004fe8:	2101      	movs	r1, #1
 8004fea:	0028      	movs	r0, r5
 8004fec:	f007 ff7c 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	56c3      	ldrsb	r3, [r0, r3]
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d00e      	beq.n	8005016 <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004ff8:	466a      	mov	r2, sp
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f007 ff73 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005002:	f00c fdec 	bl	8011bde <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005006:	2213      	movs	r2, #19
 8005008:	4910      	ldr	r1, [pc, #64]	; (800504c <setBaudrateCommand+0x78>)
 800500a:	0020      	movs	r0, r4
 800500c:	f00d f848 	bl	80120a0 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005010:	e018      	b.n	8005044 <setBaudrateCommand+0x70>
	configASSERT( pcWriteBuffer );
 8005012:	b672      	cpsid	i
 8005014:	e7fe      	b.n	8005014 <setBaudrateCommand+0x40>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005016:	3001      	adds	r0, #1
 8005018:	f00c fde1 	bl	8011bde <atol>
 800501c:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800501e:	466a      	mov	r2, sp
 8005020:	2102      	movs	r1, #2
 8005022:	0028      	movs	r0, r5
 8005024:	f007 ff60 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005028:	f00c fdd9 	bl	8011bde <atol>
 800502c:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 800502e:	b2f0      	uxtb	r0, r6
 8005030:	0029      	movs	r1, r5
 8005032:	f007 fd73 	bl	800cb1c <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8005036:	23ff      	movs	r3, #255	; 0xff
 8005038:	4033      	ands	r3, r6
 800503a:	002a      	movs	r2, r5
 800503c:	4904      	ldr	r1, [pc, #16]	; (8005050 <setBaudrateCommand+0x7c>)
 800503e:	0020      	movs	r0, r4
 8005040:	f00d fa2c 	bl	801249c <sprintf>
}
 8005044:	2000      	movs	r0, #0
 8005046:	b002      	add	sp, #8
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	08018d88 	.word	0x08018d88
 8005050:	08018d60 	.word	0x08018d60

08005054 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005054:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005056:	2800      	cmp	r0, #0
 8005058:	d006      	beq.n	8005068 <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <flashsizeCommand+0x18>)
 800505c:	881a      	ldrh	r2, [r3, #0]
 800505e:	4904      	ldr	r1, [pc, #16]	; (8005070 <flashsizeCommand+0x1c>)
 8005060:	f00d fa1c 	bl	801249c <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005064:	2000      	movs	r0, #0
 8005066:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005068:	b672      	cpsid	i
 800506a:	e7fe      	b.n	800506a <flashsizeCommand+0x16>
 800506c:	1ffff7cc 	.word	0x1ffff7cc
 8005070:	08018d9c 	.word	0x08018d9c

08005074 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005076:	46d6      	mov	lr, sl
 8005078:	464f      	mov	r7, r9
 800507a:	b580      	push	{r7, lr}
 800507c:	b085      	sub	sp, #20
 800507e:	0004      	movs	r4, r0
 8005080:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8005086:	4b63      	ldr	r3, [pc, #396]	; (8005214 <testportCommand+0x1a0>)
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	ab02      	add	r3, sp, #8
 800508c:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800508e:	2c00      	cmp	r4, #0
 8005090:	d012      	beq.n	80050b8 <testportCommand+0x44>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005092:	aa03      	add	r2, sp, #12
 8005094:	2101      	movs	r1, #1
 8005096:	f007 ff27 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 800509a:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 800509c:	495e      	ldr	r1, [pc, #376]	; (8005218 <testportCommand+0x1a4>)
 800509e:	f7fb f831 	bl	8000104 <strcmp>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d174      	bne.n	8005190 <testportCommand+0x11c>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <testportCommand+0x1a8>)
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <testportCommand+0x1ac>)
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	3b01      	subs	r3, #1
 80050b0:	781f      	ldrb	r7, [r3, #0]
 80050b2:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 80050b4:	4e59      	ldr	r6, [pc, #356]	; (800521c <testportCommand+0x1a8>)
 80050b6:	e03e      	b.n	8005136 <testportCommand+0xc2>
	configASSERT( pcWriteBuffer );
 80050b8:	b672      	cpsid	i
 80050ba:	e7fe      	b.n	80050ba <testportCommand+0x46>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 80050bc:	002a      	movs	r2, r5
 80050be:	4959      	ldr	r1, [pc, #356]	; (8005224 <testportCommand+0x1b0>)
 80050c0:	0020      	movs	r0, r4
 80050c2:	f00d f9eb 	bl	801249c <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 80050c6:	0020      	movs	r0, r4
 80050c8:	f7fb f826 	bl	8000118 <strlen>
 80050cc:	b282      	uxth	r2, r0
 80050ce:	4b53      	ldr	r3, [pc, #332]	; (800521c <testportCommand+0x1a8>)
 80050d0:	7818      	ldrb	r0, [r3, #0]
 80050d2:	2364      	movs	r3, #100	; 0x64
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	3b5a      	subs	r3, #90	; 0x5a
 80050d8:	0021      	movs	r1, r4
 80050da:	f007 fcaf 	bl	800ca3c <writePxMutex>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 80050de:	2254      	movs	r2, #84	; 0x54
 80050e0:	4951      	ldr	r1, [pc, #324]	; (8005228 <testportCommand+0x1b4>)
 80050e2:	0020      	movs	r0, r4
 80050e4:	f00c ffdc 	bl	80120a0 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 80050e8:	0020      	movs	r0, r4
 80050ea:	f7fb f815 	bl	8000118 <strlen>
 80050ee:	b282      	uxth	r2, r0
 80050f0:	4b4a      	ldr	r3, [pc, #296]	; (800521c <testportCommand+0x1a8>)
 80050f2:	7818      	ldrb	r0, [r3, #0]
 80050f4:	2364      	movs	r3, #100	; 0x64
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	3b5a      	subs	r3, #90	; 0x5a
 80050fa:	0021      	movs	r1, r4
 80050fc:	f007 fc9e 	bl	800ca3c <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005100:	3701      	adds	r7, #1
 8005102:	4b46      	ldr	r3, [pc, #280]	; (800521c <testportCommand+0x1a8>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	3b01      	subs	r3, #1
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	4a48      	ldr	r2, [pc, #288]	; (800522c <testportCommand+0x1b8>)
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	5ddb      	ldrb	r3, [r3, r7]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10d      	bne.n	8005130 <testportCommand+0xbc>
 8005114:	4692      	mov	sl, r2
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <testportCommand+0x1a8>)
 8005118:	4699      	mov	r9, r3
 800511a:	2001      	movs	r0, #1
 800511c:	f009 fe30 	bl	800ed80 <HAL_Delay>
 8005120:	464b      	mov	r3, r9
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	3b01      	subs	r3, #1
 8005126:	019b      	lsls	r3, r3, #6
 8005128:	4453      	add	r3, sl
 800512a:	5ddb      	ldrb	r3, [r3, r7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f4      	beq.n	800511a <testportCommand+0xa6>
 8005130:	3501      	adds	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
 8005132:	2d07      	cmp	r5, #7
 8005134:	d035      	beq.n	80051a2 <testportCommand+0x12e>
 8005136:	b2eb      	uxtb	r3, r5
 8005138:	4699      	mov	r9, r3
      if(PcPort!=ports)
 800513a:	7833      	ldrb	r3, [r6, #0]
 800513c:	454b      	cmp	r3, r9
 800513e:	d0f7      	beq.n	8005130 <testportCommand+0xbc>
        WriteVaule[0]=rand();
 8005140:	f00c ffd0 	bl	80120e4 <rand>
 8005144:	466b      	mov	r3, sp
 8005146:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005148:	2364      	movs	r3, #100	; 0x64
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	3b5a      	subs	r3, #90	; 0x5a
 800514e:	2201      	movs	r2, #1
 8005150:	a902      	add	r1, sp, #8
 8005152:	4648      	mov	r0, r9
 8005154:	f007 fc72 	bl	800ca3c <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005158:	4648      	mov	r0, r9
 800515a:	f007 fc4d 	bl	800c9f8 <GetUart>
 800515e:	6803      	ldr	r3, [r0, #0]
 8005160:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8005162:	466a      	mov	r2, sp
 8005164:	7a12      	ldrb	r2, [r2, #8]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	429a      	cmp	r2, r3
 800516a:	d0a7      	beq.n	80050bc <testportCommand+0x48>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 800516c:	002a      	movs	r2, r5
 800516e:	4930      	ldr	r1, [pc, #192]	; (8005230 <testportCommand+0x1bc>)
 8005170:	0020      	movs	r0, r4
 8005172:	f00d f993 	bl	801249c <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005176:	0020      	movs	r0, r4
 8005178:	f7fa ffce 	bl	8000118 <strlen>
 800517c:	b282      	uxth	r2, r0
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <testportCommand+0x1a8>)
 8005180:	7818      	ldrb	r0, [r3, #0]
 8005182:	2364      	movs	r3, #100	; 0x64
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	3b5a      	subs	r3, #90	; 0x5a
 8005188:	0021      	movs	r1, r4
 800518a:	f007 fc57 	bl	800ca3c <writePxMutex>
 800518e:	e7a6      	b.n	80050de <testportCommand+0x6a>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005190:	2300      	movs	r3, #0
 8005192:	56eb      	ldrsb	r3, [r5, r3]
 8005194:	2b70      	cmp	r3, #112	; 0x70
 8005196:	d00a      	beq.n	80051ae <testportCommand+0x13a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005198:	220f      	movs	r2, #15
 800519a:	4926      	ldr	r1, [pc, #152]	; (8005234 <testportCommand+0x1c0>)
 800519c:	0020      	movs	r0, r4
 800519e:	f00c ff7f 	bl	80120a0 <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80051a2:	2000      	movs	r0, #0
 80051a4:	b005      	add	sp, #20
 80051a6:	bcc0      	pop	{r6, r7}
 80051a8:	46ba      	mov	sl, r7
 80051aa:	46b1      	mov	r9, r6
 80051ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 80051ae:	1c68      	adds	r0, r5, #1
 80051b0:	f00c fd15 	bl	8011bde <atol>
 80051b4:	0005      	movs	r5, r0
 80051b6:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 80051b8:	1e73      	subs	r3, r6, #1
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d905      	bls.n	80051ca <testportCommand+0x156>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 80051be:	221b      	movs	r2, #27
 80051c0:	491d      	ldr	r1, [pc, #116]	; (8005238 <testportCommand+0x1c4>)
 80051c2:	0020      	movs	r0, r4
 80051c4:	f00c ff6c 	bl	80120a0 <memcpy>
	return pdFALSE;
 80051c8:	e7eb      	b.n	80051a2 <testportCommand+0x12e>
        WriteVaule[0]=rand();
 80051ca:	f00c ff8b 	bl	80120e4 <rand>
 80051ce:	466b      	mov	r3, sp
 80051d0:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 80051d2:	2364      	movs	r3, #100	; 0x64
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	3b32      	subs	r3, #50	; 0x32
 80051d8:	2201      	movs	r2, #1
 80051da:	a902      	add	r1, sp, #8
 80051dc:	0030      	movs	r0, r6
 80051de:	f007 fc2d 	bl	800ca3c <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 80051e2:	0030      	movs	r0, r6
 80051e4:	f007 fc08 	bl	800c9f8 <GetUart>
 80051e8:	6803      	ldr	r3, [r0, #0]
 80051ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 80051ec:	466a      	mov	r2, sp
 80051ee:	7a12      	ldrb	r2, [r2, #8]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d006      	beq.n	8005204 <testportCommand+0x190>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	402a      	ands	r2, r5
 80051fa:	490d      	ldr	r1, [pc, #52]	; (8005230 <testportCommand+0x1bc>)
 80051fc:	0020      	movs	r0, r4
 80051fe:	f00d f94d 	bl	801249c <sprintf>
 8005202:	e7ce      	b.n	80051a2 <testportCommand+0x12e>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	402a      	ands	r2, r5
 8005208:	4906      	ldr	r1, [pc, #24]	; (8005224 <testportCommand+0x1b0>)
 800520a:	0020      	movs	r0, r4
 800520c:	f00d f946 	bl	801249c <sprintf>
 8005210:	e7c7      	b.n	80051a2 <testportCommand+0x12e>
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	08018e6c 	.word	0x08018e6c
 8005218:	08018590 	.word	0x08018590
 800521c:	20000a7f 	.word	0x20000a7f
 8005220:	20001434 	.word	0x20001434
 8005224:	08018dbc 	.word	0x08018dbc
 8005228:	08018dec 	.word	0x08018dec
 800522c:	200012b4 	.word	0x200012b4
 8005230:	08018dd8 	.word	0x08018dd8
 8005234:	08018e40 	.word	0x08018e40
 8005238:	08018e50 	.word	0x08018e50

0800523c <unbridgeCommand>:
{	
 800523c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523e:	b083      	sub	sp, #12
 8005240:	0004      	movs	r4, r0
 8005242:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800524a:	2800      	cmp	r0, #0
 800524c:	d017      	beq.n	800527e <unbridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800524e:	aa01      	add	r2, sp, #4
 8005250:	2101      	movs	r1, #1
 8005252:	0028      	movs	r0, r5
 8005254:	f007 fe48 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005258:	2300      	movs	r3, #0
 800525a:	56c3      	ldrsb	r3, [r0, r3]
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d010      	beq.n	8005282 <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005260:	466a      	mov	r2, sp
 8005262:	2102      	movs	r1, #2
 8005264:	0028      	movs	r0, r5
 8005266:	f007 fe3f 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800526a:	2300      	movs	r3, #0
 800526c:	56c3      	ldrsb	r3, [r0, r3]
 800526e:	2b70      	cmp	r3, #112	; 0x70
 8005270:	d028      	beq.n	80052c4 <unbridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005272:	220f      	movs	r2, #15
 8005274:	491a      	ldr	r1, [pc, #104]	; (80052e0 <unbridgeCommand+0xa4>)
 8005276:	0020      	movs	r0, r4
 8005278:	f00c ff12 	bl	80120a0 <memcpy>
 800527c:	e02d      	b.n	80052da <unbridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 800527e:	b672      	cpsid	i
 8005280:	e7fe      	b.n	8005280 <unbridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005282:	3001      	adds	r0, #1
 8005284:	f00c fcab 	bl	8011bde <atol>
 8005288:	0006      	movs	r6, r0
 800528a:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800528c:	466a      	mov	r2, sp
 800528e:	2102      	movs	r1, #2
 8005290:	0028      	movs	r0, r5
 8005292:	f007 fe29 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005296:	2300      	movs	r3, #0
 8005298:	56c3      	ldrsb	r3, [r0, r3]
 800529a:	2b70      	cmp	r3, #112	; 0x70
 800529c:	d1e9      	bne.n	8005272 <unbridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800529e:	3001      	adds	r0, #1
 80052a0:	f00c fc9d 	bl	8011bde <atol>
 80052a4:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 80052a6:	b2c1      	uxtb	r1, r0
 80052a8:	0038      	movs	r0, r7
 80052aa:	f7fe ff6f 	bl	800418c <Unbridge>
	if (result == BOS_OK) 
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d10c      	bne.n	80052cc <unbridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 80052b2:	22ff      	movs	r2, #255	; 0xff
 80052b4:	002b      	movs	r3, r5
 80052b6:	4013      	ands	r3, r2
 80052b8:	4032      	ands	r2, r6
 80052ba:	490a      	ldr	r1, [pc, #40]	; (80052e4 <unbridgeCommand+0xa8>)
 80052bc:	0020      	movs	r0, r4
 80052be:	f00d f8ed 	bl	801249c <sprintf>
 80052c2:	e00a      	b.n	80052da <unbridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80052c4:	3001      	adds	r0, #1
 80052c6:	f00c fc8a 	bl	8011bde <atol>
 80052ca:	e7d2      	b.n	8005272 <unbridgeCommand+0x36>
	else if (result == BOS_ERR_WrongParam) 
 80052cc:	2867      	cmp	r0, #103	; 0x67
 80052ce:	d0d0      	beq.n	8005272 <unbridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 80052d0:	2219      	movs	r2, #25
 80052d2:	4905      	ldr	r1, [pc, #20]	; (80052e8 <unbridgeCommand+0xac>)
 80052d4:	0020      	movs	r0, r4
 80052d6:	f00c fee3 	bl	80120a0 <memcpy>
}
 80052da:	2000      	movs	r0, #0
 80052dc:	b003      	add	sp, #12
 80052de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e0:	08018e40 	.word	0x08018e40
 80052e4:	08018e70 	.word	0x08018e70
 80052e8:	08018e90 	.word	0x08018e90

080052ec <bridgeCommand>:
{	
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	b083      	sub	sp, #12
 80052f0:	0004      	movs	r4, r0
 80052f2:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d017      	beq.n	800532e <bridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80052fe:	aa01      	add	r2, sp, #4
 8005300:	2101      	movs	r1, #1
 8005302:	0028      	movs	r0, r5
 8005304:	f007 fdf0 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005308:	2300      	movs	r3, #0
 800530a:	56c3      	ldrsb	r3, [r0, r3]
 800530c:	2b70      	cmp	r3, #112	; 0x70
 800530e:	d010      	beq.n	8005332 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005310:	466a      	mov	r2, sp
 8005312:	2102      	movs	r1, #2
 8005314:	0028      	movs	r0, r5
 8005316:	f007 fde7 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800531a:	2300      	movs	r3, #0
 800531c:	56c3      	ldrsb	r3, [r0, r3]
 800531e:	2b70      	cmp	r3, #112	; 0x70
 8005320:	d028      	beq.n	8005374 <bridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005322:	220f      	movs	r2, #15
 8005324:	491a      	ldr	r1, [pc, #104]	; (8005390 <bridgeCommand+0xa4>)
 8005326:	0020      	movs	r0, r4
 8005328:	f00c feba 	bl	80120a0 <memcpy>
 800532c:	e02d      	b.n	800538a <bridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 800532e:	b672      	cpsid	i
 8005330:	e7fe      	b.n	8005330 <bridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005332:	3001      	adds	r0, #1
 8005334:	f00c fc53 	bl	8011bde <atol>
 8005338:	0006      	movs	r6, r0
 800533a:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800533c:	466a      	mov	r2, sp
 800533e:	2102      	movs	r1, #2
 8005340:	0028      	movs	r0, r5
 8005342:	f007 fdd1 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005346:	2300      	movs	r3, #0
 8005348:	56c3      	ldrsb	r3, [r0, r3]
 800534a:	2b70      	cmp	r3, #112	; 0x70
 800534c:	d1e9      	bne.n	8005322 <bridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800534e:	3001      	adds	r0, #1
 8005350:	f00c fc45 	bl	8011bde <atol>
 8005354:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005356:	b2c1      	uxtb	r1, r0
 8005358:	0038      	movs	r0, r7
 800535a:	f7fe ff03 	bl	8004164 <Bridge>
	if (result == BOS_OK) 
 800535e:	2800      	cmp	r0, #0
 8005360:	d10c      	bne.n	800537c <bridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005362:	22ff      	movs	r2, #255	; 0xff
 8005364:	002b      	movs	r3, r5
 8005366:	4013      	ands	r3, r2
 8005368:	4032      	ands	r2, r6
 800536a:	490a      	ldr	r1, [pc, #40]	; (8005394 <bridgeCommand+0xa8>)
 800536c:	0020      	movs	r0, r4
 800536e:	f00d f895 	bl	801249c <sprintf>
 8005372:	e00a      	b.n	800538a <bridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005374:	3001      	adds	r0, #1
 8005376:	f00c fc32 	bl	8011bde <atol>
 800537a:	e7d2      	b.n	8005322 <bridgeCommand+0x36>
	else if (result == BOS_ERR_WrongParam) 
 800537c:	2867      	cmp	r0, #103	; 0x67
 800537e:	d0d0      	beq.n	8005322 <bridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005380:	2217      	movs	r2, #23
 8005382:	4905      	ldr	r1, [pc, #20]	; (8005398 <bridgeCommand+0xac>)
 8005384:	0020      	movs	r0, r4
 8005386:	f00c fe8b 	bl	80120a0 <memcpy>
}
 800538a:	2000      	movs	r0, #0
 800538c:	b003      	add	sp, #12
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005390:	08018e40 	.word	0x08018e40
 8005394:	08018eac 	.word	0x08018eac
 8005398:	08018ed0 	.word	0x08018ed0

0800539c <delSnipCommand>:
{	
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	46de      	mov	lr, fp
 80053a0:	4657      	mov	r7, sl
 80053a2:	464e      	mov	r6, r9
 80053a4:	4645      	mov	r5, r8
 80053a6:	b5e0      	push	{r5, r6, r7, lr}
 80053a8:	b083      	sub	sp, #12
 80053aa:	0007      	movs	r7, r0
 80053ac:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80053b2:	2f00      	cmp	r7, #0
 80053b4:	d013      	beq.n	80053de <delSnipCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80053b6:	aa01      	add	r2, sp, #4
 80053b8:	2101      	movs	r1, #1
 80053ba:	f007 fd95 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80053be:	f00c fc08 	bl	8011bd2 <atoi>
 80053c2:	4681      	mov	r9, r0
 80053c4:	b2c5      	uxtb	r5, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	d003      	beq.n	80053d2 <delSnipCommand+0x36>
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <delSnipCommand+0xf4>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	42ab      	cmp	r3, r5
 80053d0:	d207      	bcs.n	80053e2 <delSnipCommand+0x46>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80053d2:	2223      	movs	r2, #35	; 0x23
 80053d4:	492f      	ldr	r1, [pc, #188]	; (8005494 <delSnipCommand+0xf8>)
 80053d6:	0038      	movs	r0, r7
 80053d8:	f00c fe62 	bl	80120a0 <memcpy>
	return pdFALSE;
 80053dc:	e04f      	b.n	800547e <delSnipCommand+0xe2>
	configASSERT( pcWriteBuffer );
 80053de:	b672      	cpsid	i
 80053e0:	e7fe      	b.n	80053e0 <delSnipCommand+0x44>
		snippets[index-1].cond.conditionType = 0;
 80053e2:	24ff      	movs	r4, #255	; 0xff
 80053e4:	4004      	ands	r4, r0
 80053e6:	3c01      	subs	r4, #1
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <delSnipCommand+0xfc>)
 80053ea:	4698      	mov	r8, r3
 80053ec:	00a6      	lsls	r6, r4, #2
 80053ee:	1933      	adds	r3, r6, r4
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	2200      	movs	r2, #0
 80053f4:	4692      	mov	sl, r2
 80053f6:	4642      	mov	r2, r8
 80053f8:	4651      	mov	r1, sl
 80053fa:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 80053fc:	1933      	adds	r3, r6, r4
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4443      	add	r3, r8
 8005402:	469b      	mov	fp, r3
 8005404:	4652      	mov	r2, sl
 8005406:	7059      	strb	r1, [r3, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8005408:	1930      	adds	r0, r6, r4
 800540a:	0080      	lsls	r0, r0, #2
 800540c:	3002      	adds	r0, #2
 800540e:	4440      	add	r0, r8
 8005410:	3204      	adds	r2, #4
 8005412:	f00c fe4e 	bl	80120b2 <memset>
		snippets[index-1].state = false;
 8005416:	465b      	mov	r3, fp
 8005418:	4652      	mov	r2, sl
 800541a:	741a      	strb	r2, [r3, #16]
		free(snippets[index-1].cmd);
 800541c:	68d8      	ldr	r0, [r3, #12]
 800541e:	f00c fc13 	bl	8011c48 <free>
		snippets[index-1].cmd = NULL;
 8005422:	465c      	mov	r4, fp
 8005424:	4653      	mov	r3, sl
 8005426:	60e3      	str	r3, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <delSnipCommand+0xf4>)
 800542a:	781e      	ldrb	r6, [r3, #0]
 800542c:	42b5      	cmp	r5, r6
 800542e:	d21c      	bcs.n	800546a <delSnipCommand+0xce>
 8005430:	20ff      	movs	r0, #255	; 0xff
 8005432:	464b      	mov	r3, r9
 8005434:	4018      	ands	r0, r3
 8005436:	0084      	lsls	r4, r0, #2
 8005438:	1824      	adds	r4, r4, r0
 800543a:	00a4      	lsls	r4, r4, #2
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <delSnipCommand+0xfc>)
 800543e:	18e4      	adds	r4, r4, r3
 8005440:	e004      	b.n	800544c <delSnipCommand+0xb0>
 8005442:	3501      	adds	r5, #1
 8005444:	b2ed      	uxtb	r5, r5
 8005446:	3414      	adds	r4, #20
 8005448:	42b5      	cmp	r5, r6
 800544a:	d00e      	beq.n	800546a <delSnipCommand+0xce>
			if (snippets[s].cond.conditionType) {
 800544c:	7823      	ldrb	r3, [r4, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f7      	beq.n	8005442 <delSnipCommand+0xa6>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8005452:	2214      	movs	r2, #20
 8005454:	0021      	movs	r1, r4
 8005456:	0020      	movs	r0, r4
 8005458:	3814      	subs	r0, #20
 800545a:	f00c fe21 	bl	80120a0 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 800545e:	2214      	movs	r2, #20
 8005460:	2100      	movs	r1, #0
 8005462:	0020      	movs	r0, r4
 8005464:	f00c fe25 	bl	80120b2 <memset>
 8005468:	e7eb      	b.n	8005442 <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 800546a:	3e01      	subs	r6, #1
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <delSnipCommand+0xf4>)
 800546e:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005470:	f005 fa18 	bl	800a8a4 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005474:	2236      	movs	r2, #54	; 0x36
 8005476:	4909      	ldr	r1, [pc, #36]	; (800549c <delSnipCommand+0x100>)
 8005478:	0038      	movs	r0, r7
 800547a:	f00c fe11 	bl	80120a0 <memcpy>
}
 800547e:	2000      	movs	r0, #0
 8005480:	b003      	add	sp, #12
 8005482:	bcf0      	pop	{r4, r5, r6, r7}
 8005484:	46bb      	mov	fp, r7
 8005486:	46b2      	mov	sl, r6
 8005488:	46a9      	mov	r9, r5
 800548a:	46a0      	mov	r8, r4
 800548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20001203 	.word	0x20001203
 8005494:	08018f20 	.word	0x08018f20
 8005498:	2000695c 	.word	0x2000695c
 800549c:	08018ee8 	.word	0x08018ee8

080054a0 <pauseSnipCommand>:
{	
 80054a0:	b510      	push	{r4, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	0004      	movs	r4, r0
 80054a6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80054ac:	2c00      	cmp	r4, #0
 80054ae:	d014      	beq.n	80054da <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80054b0:	aa01      	add	r2, sp, #4
 80054b2:	2101      	movs	r1, #1
 80054b4:	f007 fd18 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80054b8:	f00c fb8b 	bl	8011bd2 <atoi>
 80054bc:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <pauseSnipCommand+0x2a>
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <pauseSnipCommand+0x64>)
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d209      	bcs.n	80054de <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80054ca:	2223      	movs	r2, #35	; 0x23
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <pauseSnipCommand+0x68>)
 80054ce:	0020      	movs	r0, r4
 80054d0:	f00c fde6 	bl	80120a0 <memcpy>
}
 80054d4:	2000      	movs	r0, #0
 80054d6:	b002      	add	sp, #8
 80054d8:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80054da:	b672      	cpsid	i
 80054dc:	e7fe      	b.n	80054dc <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 80054de:	23ff      	movs	r3, #255	; 0xff
 80054e0:	4003      	ands	r3, r0
 80054e2:	3b01      	subs	r3, #1
 80054e4:	009a      	lsls	r2, r3, #2
 80054e6:	18d3      	adds	r3, r2, r3
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a08      	ldr	r2, [pc, #32]	; (800550c <pauseSnipCommand+0x6c>)
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 80054f2:	f005 f9d7 	bl	800a8a4 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80054f6:	2235      	movs	r2, #53	; 0x35
 80054f8:	4905      	ldr	r1, [pc, #20]	; (8005510 <pauseSnipCommand+0x70>)
 80054fa:	0020      	movs	r0, r4
 80054fc:	f00c fdd0 	bl	80120a0 <memcpy>
 8005500:	e7e8      	b.n	80054d4 <pauseSnipCommand+0x34>
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	20001203 	.word	0x20001203
 8005508:	08018f20 	.word	0x08018f20
 800550c:	2000695c 	.word	0x2000695c
 8005510:	08018f44 	.word	0x08018f44

08005514 <actSnipCommand>:
{	
 8005514:	b510      	push	{r4, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	0004      	movs	r4, r0
 800551a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005520:	2c00      	cmp	r4, #0
 8005522:	d014      	beq.n	800554e <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005524:	aa01      	add	r2, sp, #4
 8005526:	2101      	movs	r1, #1
 8005528:	f007 fcde 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 800552c:	f00c fb51 	bl	8011bd2 <atoi>
 8005530:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <actSnipCommand+0x2a>
 8005536:	4a10      	ldr	r2, [pc, #64]	; (8005578 <actSnipCommand+0x64>)
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d209      	bcs.n	8005552 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 800553e:	2223      	movs	r2, #35	; 0x23
 8005540:	490e      	ldr	r1, [pc, #56]	; (800557c <actSnipCommand+0x68>)
 8005542:	0020      	movs	r0, r4
 8005544:	f00c fdac 	bl	80120a0 <memcpy>
}
 8005548:	2000      	movs	r0, #0
 800554a:	b002      	add	sp, #8
 800554c:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800554e:	b672      	cpsid	i
 8005550:	e7fe      	b.n	8005550 <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 8005552:	23ff      	movs	r3, #255	; 0xff
 8005554:	4003      	ands	r3, r0
 8005556:	3b01      	subs	r3, #1
 8005558:	009a      	lsls	r2, r3, #2
 800555a:	18d3      	adds	r3, r2, r3
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a08      	ldr	r2, [pc, #32]	; (8005580 <actSnipCommand+0x6c>)
 8005560:	18d3      	adds	r3, r2, r3
 8005562:	2201      	movs	r2, #1
 8005564:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005566:	f005 f99d 	bl	800a8a4 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 800556a:	2238      	movs	r2, #56	; 0x38
 800556c:	4905      	ldr	r1, [pc, #20]	; (8005584 <actSnipCommand+0x70>)
 800556e:	0020      	movs	r0, r4
 8005570:	f00c fd96 	bl	80120a0 <memcpy>
 8005574:	e7e8      	b.n	8005548 <actSnipCommand+0x34>
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	20001203 	.word	0x20001203
 800557c:	08018f20 	.word	0x08018f20
 8005580:	2000695c 	.word	0x2000695c
 8005584:	08018f7c 	.word	0x08018f7c

08005588 <snipCommand>:
{	
 8005588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558a:	46de      	mov	lr, fp
 800558c:	4657      	mov	r7, sl
 800558e:	464e      	mov	r6, r9
 8005590:	4645      	mov	r5, r8
 8005592:	b5e0      	push	{r5, r6, r7, lr}
 8005594:	b08b      	sub	sp, #44	; 0x2c
 8005596:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005598:	aa06      	add	r2, sp, #24
 800559a:	4b80      	ldr	r3, [pc, #512]	; (800579c <snipCommand+0x214>)
 800559c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800559e:	c223      	stmia	r2!, {r0, r1, r5}
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	d013      	beq.n	80055d0 <snipCommand+0x48>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 80055a8:	4b7d      	ldr	r3, [pc, #500]	; (80057a0 <snipCommand+0x218>)
 80055aa:	7818      	ldrb	r0, [r3, #0]
 80055ac:	2301      	movs	r3, #1
 80055ae:	425b      	negs	r3, r3
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	3333      	adds	r3, #51	; 0x33
 80055b4:	2237      	movs	r2, #55	; 0x37
 80055b6:	497b      	ldr	r1, [pc, #492]	; (80057a4 <snipCommand+0x21c>)
 80055b8:	f007 fa40 	bl	800ca3c <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80055bc:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <snipCommand+0x220>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d100      	bne.n	80055c6 <snipCommand+0x3e>
 80055c4:	e0dd      	b.n	8005782 <snipCommand+0x1fa>
 80055c6:	2700      	movs	r7, #0
		if (snippets[s].cond.conditionType)
 80055c8:	4b78      	ldr	r3, [pc, #480]	; (80057ac <snipCommand+0x224>)
 80055ca:	4698      	mov	r8, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 80055cc:	4d78      	ldr	r5, [pc, #480]	; (80057b0 <snipCommand+0x228>)
 80055ce:	e0c3      	b.n	8005758 <snipCommand+0x1d0>
	configASSERT( pcWriteBuffer );
 80055d0:	b672      	cpsid	i
 80055d2:	e7fe      	b.n	80055d2 <snipCommand+0x4a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 80055d4:	4b75      	ldr	r3, [pc, #468]	; (80057ac <snipCommand+0x224>)
 80055d6:	469b      	mov	fp, r3
 80055d8:	00b3      	lsls	r3, r6, #2
 80055da:	4699      	mov	r9, r3
 80055dc:	199b      	adds	r3, r3, r6
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	445b      	add	r3, fp
 80055e2:	7c1a      	ldrb	r2, [r3, #16]
 80055e4:	00d3      	lsls	r3, r2, #3
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	aa06      	add	r2, sp, #24
 80055ea:	4694      	mov	ip, r2
 80055ec:	4463      	add	r3, ip
 80055ee:	003a      	movs	r2, r7
 80055f0:	4970      	ldr	r1, [pc, #448]	; (80057b4 <snipCommand+0x22c>)
 80055f2:	0020      	movs	r0, r4
 80055f4:	f00c ff52 	bl	801249c <sprintf>
		switch (snippets[s].cond.conditionType)
 80055f8:	464b      	mov	r3, r9
 80055fa:	199b      	adds	r3, r3, r6
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	465a      	mov	r2, fp
 8005600:	5c9b      	ldrb	r3, [r3, r2]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d11c      	bne.n	8005640 <snipCommand+0xb8>
				switch (snippets[s].cond.buffer1[1])
 8005606:	00b3      	lsls	r3, r6, #2
 8005608:	199b      	adds	r3, r3, r6
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4a67      	ldr	r2, [pc, #412]	; (80057ac <snipCommand+0x224>)
 800560e:	18d3      	adds	r3, r2, r3
 8005610:	78db      	ldrb	r3, [r3, #3]
 8005612:	2b0b      	cmp	r3, #11
 8005614:	d842      	bhi.n	800569c <snipCommand+0x114>
 8005616:	2b08      	cmp	r3, #8
 8005618:	d861      	bhi.n	80056de <snipCommand+0x156>
 800561a:	2b05      	cmp	r3, #5
 800561c:	d051      	beq.n	80056c2 <snipCommand+0x13a>
 800561e:	2b06      	cmp	r3, #6
 8005620:	d000      	beq.n	8005624 <snipCommand+0x9c>
 8005622:	e0a5      	b.n	8005770 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005624:	00b3      	lsls	r3, r6, #2
 8005626:	199e      	adds	r6, r3, r6
 8005628:	00b6      	lsls	r6, r6, #2
 800562a:	4b60      	ldr	r3, [pc, #384]	; (80057ac <snipCommand+0x224>)
 800562c:	199e      	adds	r6, r3, r6
 800562e:	78b3      	ldrb	r3, [r6, #2]
 8005630:	68f2      	ldr	r2, [r6, #12]
 8005632:	9200      	str	r2, [sp, #0]
 8005634:	0022      	movs	r2, r4
 8005636:	4960      	ldr	r1, [pc, #384]	; (80057b8 <snipCommand+0x230>)
 8005638:	0020      	movs	r0, r4
 800563a:	f00c ff2f 	bl	801249c <sprintf>
        		break;
 800563e:	e097      	b.n	8005770 <snipCommand+0x1e8>
		switch (snippets[s].cond.conditionType)
 8005640:	2b03      	cmp	r3, #3
 8005642:	d000      	beq.n	8005646 <snipCommand+0xbe>
 8005644:	e094      	b.n	8005770 <snipCommand+0x1e8>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005646:	00b1      	lsls	r1, r6, #2
 8005648:	1989      	adds	r1, r1, r6
 800564a:	0089      	lsls	r1, r1, #2
 800564c:	3106      	adds	r1, #6
 800564e:	4b57      	ldr	r3, [pc, #348]	; (80057ac <snipCommand+0x224>)
 8005650:	4699      	mov	r9, r3
 8005652:	4449      	add	r1, r9
 8005654:	2204      	movs	r2, #4
 8005656:	a805      	add	r0, sp, #20
 8005658:	f00c fd22 	bl	80120a0 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 800565c:	00b3      	lsls	r3, r6, #2
 800565e:	199e      	adds	r6, r3, r6
 8005660:	00b6      	lsls	r6, r6, #2
 8005662:	444e      	add	r6, r9
 8005664:	78f2      	ldrb	r2, [r6, #3]
 8005666:	3a01      	subs	r2, #1
 8005668:	0053      	lsls	r3, r2, #1
 800566a:	189b      	adds	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a53      	ldr	r2, [pc, #332]	; (80057bc <snipCommand+0x234>)
 8005670:	18d3      	adds	r3, r2, r3
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4699      	mov	r9, r3
 8005676:	9805      	ldr	r0, [sp, #20]
 8005678:	f7fc ffb2 	bl	80025e0 <__aeabi_f2d>
 800567c:	9002      	str	r0, [sp, #8]
 800567e:	9103      	str	r1, [sp, #12]
 8005680:	7873      	ldrb	r3, [r6, #1]
 8005682:	3b01      	subs	r3, #1
 8005684:	005a      	lsls	r2, r3, #1
 8005686:	18d2      	adds	r2, r2, r3
 8005688:	4b4d      	ldr	r3, [pc, #308]	; (80057c0 <snipCommand+0x238>)
 800568a:	189b      	adds	r3, r3, r2
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	464b      	mov	r3, r9
 8005690:	0022      	movs	r2, r4
 8005692:	494c      	ldr	r1, [pc, #304]	; (80057c4 <snipCommand+0x23c>)
 8005694:	0020      	movs	r0, r4
 8005696:	f00c ff01 	bl	801249c <sprintf>
				break;
 800569a:	e069      	b.n	8005770 <snipCommand+0x1e8>
 800569c:	3b0c      	subs	r3, #12
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d866      	bhi.n	8005770 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 80056a2:	00b2      	lsls	r2, r6, #2
 80056a4:	1996      	adds	r6, r2, r6
 80056a6:	00b6      	lsls	r6, r6, #2
 80056a8:	4a40      	ldr	r2, [pc, #256]	; (80057ac <snipCommand+0x224>)
 80056aa:	1992      	adds	r2, r2, r6
 80056ac:	7893      	ldrb	r3, [r2, #2]
 80056ae:	68d1      	ldr	r1, [r2, #12]
 80056b0:	9101      	str	r1, [sp, #4]
 80056b2:	7912      	ldrb	r2, [r2, #4]
 80056b4:	9200      	str	r2, [sp, #0]
 80056b6:	0022      	movs	r2, r4
 80056b8:	4943      	ldr	r1, [pc, #268]	; (80057c8 <snipCommand+0x240>)
 80056ba:	0020      	movs	r0, r4
 80056bc:	f00c feee 	bl	801249c <sprintf>
        		break;						
 80056c0:	e056      	b.n	8005770 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 80056c2:	00b3      	lsls	r3, r6, #2
 80056c4:	199e      	adds	r6, r3, r6
 80056c6:	00b6      	lsls	r6, r6, #2
 80056c8:	4b38      	ldr	r3, [pc, #224]	; (80057ac <snipCommand+0x224>)
 80056ca:	199e      	adds	r6, r3, r6
 80056cc:	78b3      	ldrb	r3, [r6, #2]
 80056ce:	68f2      	ldr	r2, [r6, #12]
 80056d0:	9200      	str	r2, [sp, #0]
 80056d2:	0022      	movs	r2, r4
 80056d4:	493d      	ldr	r1, [pc, #244]	; (80057cc <snipCommand+0x244>)
 80056d6:	0020      	movs	r0, r4
 80056d8:	f00c fee0 	bl	801249c <sprintf>
        		break;
 80056dc:	e048      	b.n	8005770 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 80056de:	00b2      	lsls	r2, r6, #2
 80056e0:	1996      	adds	r6, r2, r6
 80056e2:	00b6      	lsls	r6, r6, #2
 80056e4:	4a31      	ldr	r2, [pc, #196]	; (80057ac <snipCommand+0x224>)
 80056e6:	1992      	adds	r2, r2, r6
 80056e8:	7893      	ldrb	r3, [r2, #2]
 80056ea:	68d1      	ldr	r1, [r2, #12]
 80056ec:	9101      	str	r1, [sp, #4]
 80056ee:	7912      	ldrb	r2, [r2, #4]
 80056f0:	9200      	str	r2, [sp, #0]
 80056f2:	0022      	movs	r2, r4
 80056f4:	4936      	ldr	r1, [pc, #216]	; (80057d0 <snipCommand+0x248>)
 80056f6:	0020      	movs	r0, r4
 80056f8:	f00c fed0 	bl	801249c <sprintf>
        		break;
 80056fc:	e038      	b.n	8005770 <snipCommand+0x1e8>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 80056fe:	002b      	movs	r3, r5
 8005700:	0022      	movs	r2, r4
 8005702:	4934      	ldr	r1, [pc, #208]	; (80057d4 <snipCommand+0x24c>)
 8005704:	0020      	movs	r0, r4
 8005706:	f00c fec9 	bl	801249c <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 800570a:	0028      	movs	r0, r5
 800570c:	f7fa fd04 	bl	8000118 <strlen>
 8005710:	0002      	movs	r2, r0
 8005712:	2100      	movs	r1, #0
 8005714:	0028      	movs	r0, r5
 8005716:	f00c fccc 	bl	80120b2 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 800571a:	4649      	mov	r1, r9
 800571c:	68f0      	ldr	r0, [r6, #12]
 800571e:	f7ff fb37 	bl	8004d90 <ParseSnippetCommand>
 8005722:	2800      	cmp	r0, #0
 8005724:	d1eb      	bne.n	80056fe <snipCommand+0x176>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8005726:	0020      	movs	r0, r4
 8005728:	f7fa fcf6 	bl	8000118 <strlen>
 800572c:	1820      	adds	r0, r4, r0
 800572e:	220c      	movs	r2, #12
 8005730:	4929      	ldr	r1, [pc, #164]	; (80057d8 <snipCommand+0x250>)
 8005732:	f00c fcb5 	bl	80120a0 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8005736:	0020      	movs	r0, r4
 8005738:	f7fa fcee 	bl	8000118 <strlen>
 800573c:	b282      	uxth	r2, r0
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <snipCommand+0x218>)
 8005740:	7818      	ldrb	r0, [r3, #0]
 8005742:	2301      	movs	r3, #1
 8005744:	425b      	negs	r3, r3
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	3333      	adds	r3, #51	; 0x33
 800574a:	0021      	movs	r1, r4
 800574c:	f007 f976 	bl	800ca3c <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005750:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <snipCommand+0x220>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	42bb      	cmp	r3, r7
 8005756:	d914      	bls.n	8005782 <snipCommand+0x1fa>
 8005758:	003e      	movs	r6, r7
 800575a:	3701      	adds	r7, #1
 800575c:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 800575e:	46b2      	mov	sl, r6
 8005760:	00b3      	lsls	r3, r6, #2
 8005762:	199b      	adds	r3, r3, r6
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4642      	mov	r2, r8
 8005768:	5c9b      	ldrb	r3, [r3, r2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d000      	beq.n	8005770 <snipCommand+0x1e8>
 800576e:	e731      	b.n	80055d4 <snipCommand+0x4c>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <snipCommand+0x228>)
 8005772:	4699      	mov	r9, r3
 8005774:	4653      	mov	r3, sl
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4453      	add	r3, sl
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4e0b      	ldr	r6, [pc, #44]	; (80057ac <snipCommand+0x224>)
 800577e:	18f6      	adds	r6, r6, r3
 8005780:	e7cb      	b.n	800571a <snipCommand+0x192>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8005782:	22a7      	movs	r2, #167	; 0xa7
 8005784:	4915      	ldr	r1, [pc, #84]	; (80057dc <snipCommand+0x254>)
 8005786:	0020      	movs	r0, r4
 8005788:	f00c fc8a 	bl	80120a0 <memcpy>
}
 800578c:	2000      	movs	r0, #0
 800578e:	b00b      	add	sp, #44	; 0x2c
 8005790:	bcf0      	pop	{r4, r5, r6, r7}
 8005792:	46bb      	mov	fp, r7
 8005794:	46b2      	mov	sl, r6
 8005796:	46a9      	mov	r9, r5
 8005798:	46a0      	mov	r8, r4
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579c:	08018290 	.word	0x08018290
 80057a0:	20000a7f 	.word	0x20000a7f
 80057a4:	08018fb4 	.word	0x08018fb4
 80057a8:	20001203 	.word	0x20001203
 80057ac:	2000695c 	.word	0x2000695c
 80057b0:	20001234 	.word	0x20001234
 80057b4:	08018fec 	.word	0x08018fec
 80057b8:	0801900c 	.word	0x0801900c
 80057bc:	20000084 	.word	0x20000084
 80057c0:	0801a7f8 	.word	0x0801a7f8
 80057c4:	08019058 	.word	0x08019058
 80057c8:	0801903c 	.word	0x0801903c
 80057cc:	08018ff8 	.word	0x08018ff8
 80057d0:	08019024 	.word	0x08019024
 80057d4:	08019068 	.word	0x08019068
 80057d8:	08019070 	.word	0x08019070
 80057dc:	0801907c 	.word	0x0801907c

080057e0 <idcodeCommand>:
{	
 80057e0:	b510      	push	{r4, lr}
 80057e2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80057e4:	d00c      	beq.n	8005800 <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 80057e6:	f009 fadf 	bl	800eda8 <HAL_GetDEVID>
 80057ea:	0403      	lsls	r3, r0, #16
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <idcodeCommand+0x80>)
 80057f0:	4694      	mov	ip, r2
 80057f2:	4463      	add	r3, ip
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d82c      	bhi.n	8005852 <idcodeCommand+0x72>
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <idcodeCommand+0x84>)
 80057fc:	58d3      	ldr	r3, [r2, r3]
 80057fe:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8005800:	b672      	cpsid	i
 8005802:	e7fe      	b.n	8005802 <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <idcodeCommand+0x88>)
 8005806:	4919      	ldr	r1, [pc, #100]	; (800586c <idcodeCommand+0x8c>)
 8005808:	0020      	movs	r0, r4
 800580a:	f00c fe47 	bl	801249c <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 800580e:	f009 fac5 	bl	800ed9c <HAL_GetREVID>
 8005812:	0b03      	lsrs	r3, r0, #12
 8005814:	0022      	movs	r2, r4
 8005816:	4916      	ldr	r1, [pc, #88]	; (8005870 <idcodeCommand+0x90>)
 8005818:	0020      	movs	r0, r4
 800581a:	f00c fe3f 	bl	801249c <sprintf>
}
 800581e:	2000      	movs	r0, #0
 8005820:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 8005822:	4a14      	ldr	r2, [pc, #80]	; (8005874 <idcodeCommand+0x94>)
 8005824:	4911      	ldr	r1, [pc, #68]	; (800586c <idcodeCommand+0x8c>)
 8005826:	0020      	movs	r0, r4
 8005828:	f00c fe38 	bl	801249c <sprintf>
  		break;
 800582c:	e7ef      	b.n	800580e <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <idcodeCommand+0x98>)
 8005830:	490e      	ldr	r1, [pc, #56]	; (800586c <idcodeCommand+0x8c>)
 8005832:	0020      	movs	r0, r4
 8005834:	f00c fe32 	bl	801249c <sprintf>
  		break;
 8005838:	e7e9      	b.n	800580e <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <idcodeCommand+0x9c>)
 800583c:	490b      	ldr	r1, [pc, #44]	; (800586c <idcodeCommand+0x8c>)
 800583e:	0020      	movs	r0, r4
 8005840:	f00c fe2c 	bl	801249c <sprintf>
  		break;
 8005844:	e7e3      	b.n	800580e <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8005846:	4a0e      	ldr	r2, [pc, #56]	; (8005880 <idcodeCommand+0xa0>)
 8005848:	4908      	ldr	r1, [pc, #32]	; (800586c <idcodeCommand+0x8c>)
 800584a:	0020      	movs	r0, r4
 800584c:	f00c fe26 	bl	801249c <sprintf>
  		break;
 8005850:	e7dd      	b.n	800580e <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8005852:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <idcodeCommand+0xa4>)
 8005854:	4905      	ldr	r1, [pc, #20]	; (800586c <idcodeCommand+0x8c>)
 8005856:	0020      	movs	r0, r4
 8005858:	f00c fe20 	bl	801249c <sprintf>
  		break;
 800585c:	e7d7      	b.n	800580e <idcodeCommand+0x2e>
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	fffffbc0 	.word	0xfffffbc0
 8005864:	08019194 	.word	0x08019194
 8005868:	08019124 	.word	0x08019124
 800586c:	08019130 	.word	0x08019130
 8005870:	0801917c 	.word	0x0801917c
 8005874:	08019144 	.word	0x08019144
 8005878:	08019150 	.word	0x08019150
 800587c:	0801915c 	.word	0x0801915c
 8005880:	08019168 	.word	0x08019168
 8005884:	08019174 	.word	0x08019174

08005888 <uuidCommand>:
{
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800588c:	d023      	beq.n	80058d6 <uuidCommand+0x4e>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 800588e:	220e      	movs	r2, #14
 8005890:	4912      	ldr	r1, [pc, #72]	; (80058dc <uuidCommand+0x54>)
 8005892:	f00c fc05 	bl	80120a0 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <uuidCommand+0x58>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4d12      	ldr	r5, [pc, #72]	; (80058e4 <uuidCommand+0x5c>)
 800589c:	0022      	movs	r2, r4
 800589e:	0029      	movs	r1, r5
 80058a0:	0020      	movs	r0, r4
 80058a2:	f00c fdfb 	bl	801249c <sprintf>
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <uuidCommand+0x60>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	0022      	movs	r2, r4
 80058ac:	0029      	movs	r1, r5
 80058ae:	0020      	movs	r0, r4
 80058b0:	f00c fdf4 	bl	801249c <sprintf>
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <uuidCommand+0x64>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	0022      	movs	r2, r4
 80058ba:	0029      	movs	r1, r5
 80058bc:	0020      	movs	r0, r4
 80058be:	f00c fded 	bl	801249c <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 80058c2:	0020      	movs	r0, r4
 80058c4:	f7fa fc28 	bl	8000118 <strlen>
 80058c8:	1820      	adds	r0, r4, r0
 80058ca:	2203      	movs	r2, #3
 80058cc:	4908      	ldr	r1, [pc, #32]	; (80058f0 <uuidCommand+0x68>)
 80058ce:	f00c fbe7 	bl	80120a0 <memcpy>
}
 80058d2:	2000      	movs	r0, #0
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80058d6:	b672      	cpsid	i
 80058d8:	e7fe      	b.n	80058d8 <uuidCommand+0x50>
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	080191b8 	.word	0x080191b8
 80058e0:	1ffff7ac 	.word	0x1ffff7ac
 80058e4:	080191c8 	.word	0x080191c8
 80058e8:	1ffff7b0 	.word	0x1ffff7b0
 80058ec:	1ffff7b4 	.word	0x1ffff7b4
 80058f0:	08019e48 	.word	0x08019e48

080058f4 <timeCommand>:
{
 80058f4:	b510      	push	{r4, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80058fa:	d00a      	beq.n	8005912 <timeCommand+0x1e>
	GetTimeDate();
 80058fc:	f006 fde0 	bl	800c4c0 <GetTimeDate>
	if (BOS.hourformat == 24)
 8005900:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <timeCommand+0x80>)
 8005902:	7b5b      	ldrb	r3, [r3, #13]
 8005904:	2b18      	cmp	r3, #24
 8005906:	d006      	beq.n	8005916 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d010      	beq.n	800592e <timeCommand+0x3a>
}
 800590c:	2000      	movs	r0, #0
 800590e:	b004      	add	sp, #16
 8005910:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005912:	b672      	cpsid	i
 8005914:	e7fe      	b.n	8005914 <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8005916:	4917      	ldr	r1, [pc, #92]	; (8005974 <timeCommand+0x80>)
 8005918:	7c4b      	ldrb	r3, [r1, #17]
 800591a:	7c8a      	ldrb	r2, [r1, #18]
 800591c:	89c8      	ldrh	r0, [r1, #14]
 800591e:	9001      	str	r0, [sp, #4]
 8005920:	7c09      	ldrb	r1, [r1, #16]
 8005922:	9100      	str	r1, [sp, #0]
 8005924:	4914      	ldr	r1, [pc, #80]	; (8005978 <timeCommand+0x84>)
 8005926:	0020      	movs	r0, r4
 8005928:	f00c fdb8 	bl	801249c <sprintf>
 800592c:	e7ee      	b.n	800590c <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <timeCommand+0x80>)
 8005930:	7cdb      	ldrb	r3, [r3, #19]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d00f      	beq.n	8005956 <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 8005936:	2b02      	cmp	r3, #2
 8005938:	d1e8      	bne.n	800590c <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 800593a:	490e      	ldr	r1, [pc, #56]	; (8005974 <timeCommand+0x80>)
 800593c:	7c4b      	ldrb	r3, [r1, #17]
 800593e:	7c8a      	ldrb	r2, [r1, #18]
 8005940:	480e      	ldr	r0, [pc, #56]	; (800597c <timeCommand+0x88>)
 8005942:	9002      	str	r0, [sp, #8]
 8005944:	89c8      	ldrh	r0, [r1, #14]
 8005946:	9001      	str	r0, [sp, #4]
 8005948:	7c09      	ldrb	r1, [r1, #16]
 800594a:	9100      	str	r1, [sp, #0]
 800594c:	490c      	ldr	r1, [pc, #48]	; (8005980 <timeCommand+0x8c>)
 800594e:	0020      	movs	r0, r4
 8005950:	f00c fda4 	bl	801249c <sprintf>
 8005954:	e7da      	b.n	800590c <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8005956:	4907      	ldr	r1, [pc, #28]	; (8005974 <timeCommand+0x80>)
 8005958:	7c4b      	ldrb	r3, [r1, #17]
 800595a:	7c8a      	ldrb	r2, [r1, #18]
 800595c:	4809      	ldr	r0, [pc, #36]	; (8005984 <timeCommand+0x90>)
 800595e:	9002      	str	r0, [sp, #8]
 8005960:	89c8      	ldrh	r0, [r1, #14]
 8005962:	9001      	str	r0, [sp, #4]
 8005964:	7c09      	ldrb	r1, [r1, #16]
 8005966:	9100      	str	r1, [sp, #0]
 8005968:	4905      	ldr	r1, [pc, #20]	; (8005980 <timeCommand+0x8c>)
 800596a:	0020      	movs	r0, r4
 800596c:	f00c fd96 	bl	801249c <sprintf>
 8005970:	e7cc      	b.n	800590c <timeCommand+0x18>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	20006940 	.word	0x20006940
 8005978:	080191d0 	.word	0x080191d0
 800597c:	08019228 	.word	0x08019228
 8005980:	080191f8 	.word	0x080191f8
 8005984:	08019224 	.word	0x08019224

08005988 <dateCommand>:
{
 8005988:	b510      	push	{r4, lr}
 800598a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800598c:	d00a      	beq.n	80059a4 <dateCommand+0x1c>
	GetTimeDate();
 800598e:	f006 fd97 	bl	800c4c0 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8005992:	f7fe fbc5 	bl	8004120 <GetDateString>
 8005996:	0002      	movs	r2, r0
 8005998:	4903      	ldr	r1, [pc, #12]	; (80059a8 <dateCommand+0x20>)
 800599a:	0020      	movs	r0, r4
 800599c:	f00c fd7e 	bl	801249c <sprintf>
}
 80059a0:	2000      	movs	r0, #0
 80059a2:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80059a4:	b672      	cpsid	i
 80059a6:	e7fe      	b.n	80059a6 <dateCommand+0x1e>
 80059a8:	0801922c 	.word	0x0801922c

080059ac <getCommand>:
{
 80059ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ae:	46c6      	mov	lr, r8
 80059b0:	b500      	push	{lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	0004      	movs	r4, r0
 80059b6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80059be:	2800      	cmp	r0, #0
 80059c0:	d026      	beq.n	8005a10 <getCommand+0x64>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80059c2:	aa01      	add	r2, sp, #4
 80059c4:	2101      	movs	r1, #1
 80059c6:	0028      	movs	r0, r5
 80059c8:	f007 fa8e 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 80059cc:	0006      	movs	r6, r0
 80059ce:	4b74      	ldr	r3, [pc, #464]	; (8005ba0 <getCommand+0x1f4>)
 80059d0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80059d2:	2204      	movs	r2, #4
 80059d4:	4973      	ldr	r1, [pc, #460]	; (8005ba4 <getCommand+0x1f8>)
 80059d6:	f00c fda4 	bl	8012522 <strncmp>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d000      	beq.n	80059e0 <getCommand+0x34>
 80059de:	e092      	b.n	8005b06 <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80059e0:	1d37      	adds	r7, r6, #4
 80059e2:	9b01      	ldr	r3, [sp, #4]
 80059e4:	1f1d      	subs	r5, r3, #4
 80059e6:	002a      	movs	r2, r5
 80059e8:	496f      	ldr	r1, [pc, #444]	; (8005ba8 <getCommand+0x1fc>)
 80059ea:	0038      	movs	r0, r7
 80059ec:	f00c fd99 	bl	8012522 <strncmp>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d121      	bne.n	8005a38 <getCommand+0x8c>
			if (BOS.response == BOS_RESPONSE_ALL)
 80059f4:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <getCommand+0x200>)
 80059f6:	799b      	ldrb	r3, [r3, #6]
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d00b      	beq.n	8005a14 <getCommand+0x68>
			else if (BOS.response == BOS_RESPONSE_MSG)
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d00f      	beq.n	8005a20 <getCommand+0x74>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <getCommand+0x80>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8005a04:	0032      	movs	r2, r6
 8005a06:	496a      	ldr	r1, [pc, #424]	; (8005bb0 <getCommand+0x204>)
 8005a08:	0020      	movs	r0, r4
 8005a0a:	f00c fd47 	bl	801249c <sprintf>
 8005a0e:	e086      	b.n	8005b1e <getCommand+0x172>
	configASSERT( pcWriteBuffer );
 8005a10:	b672      	cpsid	i
 8005a12:	e7fe      	b.n	8005a12 <getCommand+0x66>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8005a14:	4a67      	ldr	r2, [pc, #412]	; (8005bb4 <getCommand+0x208>)
 8005a16:	4968      	ldr	r1, [pc, #416]	; (8005bb8 <getCommand+0x20c>)
 8005a18:	0020      	movs	r0, r4
 8005a1a:	f00c fd3f 	bl	801249c <sprintf>
 8005a1e:	e07e      	b.n	8005b1e <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8005a20:	4a66      	ldr	r2, [pc, #408]	; (8005bbc <getCommand+0x210>)
 8005a22:	4965      	ldr	r1, [pc, #404]	; (8005bb8 <getCommand+0x20c>)
 8005a24:	0020      	movs	r0, r4
 8005a26:	f00c fd39 	bl	801249c <sprintf>
 8005a2a:	e078      	b.n	8005b1e <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8005a2c:	4a64      	ldr	r2, [pc, #400]	; (8005bc0 <getCommand+0x214>)
 8005a2e:	4962      	ldr	r1, [pc, #392]	; (8005bb8 <getCommand+0x20c>)
 8005a30:	0020      	movs	r0, r4
 8005a32:	f00c fd33 	bl	801249c <sprintf>
 8005a36:	e072      	b.n	8005b1e <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8005a38:	002a      	movs	r2, r5
 8005a3a:	4962      	ldr	r1, [pc, #392]	; (8005bc4 <getCommand+0x218>)
 8005a3c:	0038      	movs	r0, r7
 8005a3e:	f00c fd70 	bl	8012522 <strncmp>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d119      	bne.n	8005a7a <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 8005a46:	4b59      	ldr	r3, [pc, #356]	; (8005bac <getCommand+0x200>)
 8005a48:	79db      	ldrb	r3, [r3, #7]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d009      	beq.n	8005a62 <getCommand+0xb6>
			else if (BOS.trace == TRACE_MESSAGE)
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d00d      	beq.n	8005a6e <getCommand+0xc2>
			else if (BOS.trace == TRACE_NONE)
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d6      	bne.n	8005a04 <getCommand+0x58>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8005a56:	4a5a      	ldr	r2, [pc, #360]	; (8005bc0 <getCommand+0x214>)
 8005a58:	4957      	ldr	r1, [pc, #348]	; (8005bb8 <getCommand+0x20c>)
 8005a5a:	0020      	movs	r0, r4
 8005a5c:	f00c fd1e 	bl	801249c <sprintf>
 8005a60:	e05d      	b.n	8005b1e <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8005a62:	4a54      	ldr	r2, [pc, #336]	; (8005bb4 <getCommand+0x208>)
 8005a64:	4954      	ldr	r1, [pc, #336]	; (8005bb8 <getCommand+0x20c>)
 8005a66:	0020      	movs	r0, r4
 8005a68:	f00c fd18 	bl	801249c <sprintf>
 8005a6c:	e057      	b.n	8005b1e <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8005a6e:	4a53      	ldr	r2, [pc, #332]	; (8005bbc <getCommand+0x210>)
 8005a70:	4951      	ldr	r1, [pc, #324]	; (8005bb8 <getCommand+0x20c>)
 8005a72:	0020      	movs	r0, r4
 8005a74:	f00c fd12 	bl	801249c <sprintf>
 8005a78:	e051      	b.n	8005b1e <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8005a7a:	002a      	movs	r2, r5
 8005a7c:	4952      	ldr	r1, [pc, #328]	; (8005bc8 <getCommand+0x21c>)
 8005a7e:	0038      	movs	r0, r7
 8005a80:	f00c fd4f 	bl	8012522 <strncmp>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d022      	beq.n	8005ace <getCommand+0x122>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005a88:	002a      	movs	r2, r5
 8005a8a:	4950      	ldr	r1, [pc, #320]	; (8005bcc <getCommand+0x220>)
 8005a8c:	0038      	movs	r0, r7
 8005a8e:	f00c fd48 	bl	8012522 <strncmp>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d022      	beq.n	8005adc <getCommand+0x130>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005a96:	002a      	movs	r2, r5
 8005a98:	494d      	ldr	r1, [pc, #308]	; (8005bd0 <getCommand+0x224>)
 8005a9a:	0038      	movs	r0, r7
 8005a9c:	f00c fd41 	bl	8012522 <strncmp>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d022      	beq.n	8005aea <getCommand+0x13e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005aa4:	002a      	movs	r2, r5
 8005aa6:	494b      	ldr	r1, [pc, #300]	; (8005bd4 <getCommand+0x228>)
 8005aa8:	0038      	movs	r0, r7
 8005aaa:	f00c fd3a 	bl	8012522 <strncmp>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d022      	beq.n	8005af8 <getCommand+0x14c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005ab2:	002a      	movs	r2, r5
 8005ab4:	4948      	ldr	r1, [pc, #288]	; (8005bd8 <getCommand+0x22c>)
 8005ab6:	0038      	movs	r0, r7
 8005ab8:	f00c fd33 	bl	8012522 <strncmp>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d129      	bne.n	8005b14 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8005ac0:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <getCommand+0x200>)
 8005ac2:	795a      	ldrb	r2, [r3, #5]
 8005ac4:	4945      	ldr	r1, [pc, #276]	; (8005bdc <getCommand+0x230>)
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f00c fce8 	bl	801249c <sprintf>
 8005acc:	e027      	b.n	8005b1e <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <getCommand+0x200>)
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	4942      	ldr	r1, [pc, #264]	; (8005bdc <getCommand+0x230>)
 8005ad4:	0020      	movs	r0, r4
 8005ad6:	f00c fce1 	bl	801249c <sprintf>
 8005ada:	e020      	b.n	8005b1e <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8005adc:	4b33      	ldr	r3, [pc, #204]	; (8005bac <getCommand+0x200>)
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	493e      	ldr	r1, [pc, #248]	; (8005bdc <getCommand+0x230>)
 8005ae2:	0020      	movs	r0, r4
 8005ae4:	f00c fcda 	bl	801249c <sprintf>
 8005ae8:	e019      	b.n	8005b1e <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8005aea:	4b30      	ldr	r3, [pc, #192]	; (8005bac <getCommand+0x200>)
 8005aec:	885a      	ldrh	r2, [r3, #2]
 8005aee:	493b      	ldr	r1, [pc, #236]	; (8005bdc <getCommand+0x230>)
 8005af0:	0020      	movs	r0, r4
 8005af2:	f00c fcd3 	bl	801249c <sprintf>
 8005af6:	e012      	b.n	8005b1e <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8005af8:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <getCommand+0x200>)
 8005afa:	791a      	ldrb	r2, [r3, #4]
 8005afc:	4937      	ldr	r1, [pc, #220]	; (8005bdc <getCommand+0x230>)
 8005afe:	0020      	movs	r0, r4
 8005b00:	f00c fccc 	bl	801249c <sprintf>
 8005b04:	e00b      	b.n	8005b1e <getCommand+0x172>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 8005b06:	2205      	movs	r2, #5
 8005b08:	4935      	ldr	r1, [pc, #212]	; (8005be0 <getCommand+0x234>)
 8005b0a:	0030      	movs	r0, r6
 8005b0c:	f00c fd09 	bl	8012522 <strncmp>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d009      	beq.n	8005b28 <getCommand+0x17c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005b14:	2213      	movs	r2, #19
 8005b16:	4933      	ldr	r1, [pc, #204]	; (8005be4 <getCommand+0x238>)
 8005b18:	0020      	movs	r0, r4
 8005b1a:	f00c fac1 	bl	80120a0 <memcpy>
}
 8005b1e:	2000      	movs	r0, #0
 8005b20:	b002      	add	sp, #8
 8005b22:	bc80      	pop	{r7}
 8005b24:	46b8      	mov	r8, r7
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005b28:	466a      	mov	r2, sp
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f007 f9db 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005b32:	0006      	movs	r6, r0
 8005b34:	4f2c      	ldr	r7, [pc, #176]	; (8005be8 <getCommand+0x23c>)
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005b36:	2500      	movs	r5, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 8005b38:	0039      	movs	r1, r7
 8005b3a:	0030      	movs	r0, r6
 8005b3c:	f7fa fae2 	bl	8000104 <strcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d01c      	beq.n	8005b7e <getCommand+0x1d2>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005b44:	3501      	adds	r5, #1
 8005b46:	b2ed      	uxtb	r5, r5
 8005b48:	370a      	adds	r7, #10
 8005b4a:	2d0a      	cmp	r5, #10
 8005b4c:	d1f4      	bne.n	8005b38 <getCommand+0x18c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 8005b4e:	0032      	movs	r2, r6
 8005b50:	4926      	ldr	r1, [pc, #152]	; (8005bec <getCommand+0x240>)
 8005b52:	0020      	movs	r0, r4
 8005b54:	f00c fca2 	bl	801249c <sprintf>
			return pdFALSE;
 8005b58:	e7e1      	b.n	8005b1e <getCommand+0x172>
			for(j=1 ; j<=N ; j++)						// N modules
 8005b5a:	3501      	adds	r5, #1
 8005b5c:	b2ed      	uxtb	r5, r5
 8005b5e:	783b      	ldrb	r3, [r7, #0]
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	d3dc      	bcc.n	8005b1e <getCommand+0x172>
				if (InGroup(j, i))
 8005b64:	1e6b      	subs	r3, r5, #1
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4642      	mov	r2, r8
 8005b6a:	5a9b      	ldrh	r3, [r3, r2]
 8005b6c:	421e      	tst	r6, r3
 8005b6e:	d0f4      	beq.n	8005b5a <getCommand+0x1ae>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8005b70:	002b      	movs	r3, r5
 8005b72:	0022      	movs	r2, r4
 8005b74:	491e      	ldr	r1, [pc, #120]	; (8005bf0 <getCommand+0x244>)
 8005b76:	0020      	movs	r0, r4
 8005b78:	f00c fc90 	bl	801249c <sprintf>
 8005b7c:	e7ed      	b.n	8005b5a <getCommand+0x1ae>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 8005b7e:	0032      	movs	r2, r6
 8005b80:	491c      	ldr	r1, [pc, #112]	; (8005bf4 <getCommand+0x248>)
 8005b82:	0020      	movs	r0, r4
 8005b84:	f00c fc8a 	bl	801249c <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <getCommand+0x24c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0c6      	beq.n	8005b1e <getCommand+0x172>
 8005b90:	2601      	movs	r6, #1
 8005b92:	40ae      	lsls	r6, r5
 8005b94:	2501      	movs	r5, #1
				if (InGroup(j, i))
 8005b96:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <getCommand+0x250>)
 8005b98:	4698      	mov	r8, r3
			for(j=1 ; j<=N ; j++)						// N modules
 8005b9a:	4f17      	ldr	r7, [pc, #92]	; (8005bf8 <getCommand+0x24c>)
 8005b9c:	e7e2      	b.n	8005b64 <getCommand+0x1b8>
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	20001278 	.word	0x20001278
 8005ba4:	08019244 	.word	0x08019244
 8005ba8:	0801924c 	.word	0x0801924c
 8005bac:	20006940 	.word	0x20006940
 8005bb0:	080192e0 	.word	0x080192e0
 8005bb4:	08018590 	.word	0x08018590
 8005bb8:	08018458 	.word	0x08018458
 8005bbc:	08019258 	.word	0x08019258
 8005bc0:	0801925c 	.word	0x0801925c
 8005bc4:	08019264 	.word	0x08019264
 8005bc8:	0801926c 	.word	0x0801926c
 8005bcc:	08019278 	.word	0x08019278
 8005bd0:	08019284 	.word	0x08019284
 8005bd4:	08019294 	.word	0x08019294
 8005bd8:	080192a8 	.word	0x080192a8
 8005bdc:	08018a20 	.word	0x08018a20
 8005be0:	080192bc 	.word	0x080192bc
 8005be4:	080192cc 	.word	0x080192cc
 8005be8:	20000e4c 	.word	0x20000e4c
 8005bec:	08019300 	.word	0x08019300
 8005bf0:	080192c4 	.word	0x080192c4
 8005bf4:	0801931c 	.word	0x0801931c
 8005bf8:	2000001c 	.word	0x2000001c
 8005bfc:	20000eb0 	.word	0x20000eb0

08005c00 <defaultCommand>:
{
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	0004      	movs	r4, r0
 8005c06:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005c0c:	2c00      	cmp	r4, #0
 8005c0e:	d01a      	beq.n	8005c46 <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c10:	aa01      	add	r2, sp, #4
 8005c12:	2101      	movs	r1, #1
 8005c14:	f007 f968 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005c18:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005c1a:	9e01      	ldr	r6, [sp, #4]
 8005c1c:	0032      	movs	r2, r6
 8005c1e:	491f      	ldr	r1, [pc, #124]	; (8005c9c <defaultCommand+0x9c>)
 8005c20:	f00c fc7f 	bl	8012522 <strncmp>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d010      	beq.n	8005c4a <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005c28:	0032      	movs	r2, r6
 8005c2a:	491d      	ldr	r1, [pc, #116]	; (8005ca0 <defaultCommand+0xa0>)
 8005c2c:	0028      	movs	r0, r5
 8005c2e:	f00c fc78 	bl	8012522 <strncmp>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d01a      	beq.n	8005c6c <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005c36:	220f      	movs	r2, #15
 8005c38:	491a      	ldr	r1, [pc, #104]	; (8005ca4 <defaultCommand+0xa4>)
 8005c3a:	0020      	movs	r0, r4
 8005c3c:	f00c fa30 	bl	80120a0 <memcpy>
}
 8005c40:	2000      	movs	r0, #0
 8005c42:	b002      	add	sp, #8
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8005c46:	b672      	cpsid	i
 8005c48:	e7fe      	b.n	8005c48 <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005c4a:	4917      	ldr	r1, [pc, #92]	; (8005ca8 <defaultCommand+0xa8>)
 8005c4c:	4b17      	ldr	r3, [pc, #92]	; (8005cac <defaultCommand+0xac>)
 8005c4e:	000a      	movs	r2, r1
 8005c50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005c52:	c223      	stmia	r2!, {r0, r1, r5}
 8005c54:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005c56:	c223      	stmia	r2!, {r0, r1, r5}
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005c5c:	f7fd f99e 	bl	8002f9c <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8005c60:	2227      	movs	r2, #39	; 0x27
 8005c62:	4913      	ldr	r1, [pc, #76]	; (8005cb0 <defaultCommand+0xb0>)
 8005c64:	0020      	movs	r0, r4
 8005c66:	f00c fa1b 	bl	80120a0 <memcpy>
 8005c6a:	e7e9      	b.n	8005c40 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2116      	movs	r1, #22
 8005c70:	20ff      	movs	r0, #255	; 0xff
 8005c72:	f002 ffa7 	bl	8008bc4 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <defaultCommand+0xb4>)
 8005c78:	2202      	movs	r2, #2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	2064      	movs	r0, #100	; 0x64
 8005c7e:	f007 f80c 	bl	800cc9a <osDelay>
		ClearEEportsDir();
 8005c82:	f7fc fed3 	bl	8002a2c <ClearEEportsDir>
		ClearROtopology();
 8005c86:	f004 ff2b 	bl	800aae0 <ClearROtopology>
		osDelay(100);
 8005c8a:	2064      	movs	r0, #100	; 0x64
 8005c8c:	f007 f805 	bl	800cc9a <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	4909      	ldr	r1, [pc, #36]	; (8005cb8 <defaultCommand+0xb8>)
 8005c94:	0020      	movs	r0, r4
 8005c96:	f00c fa03 	bl	80120a0 <memcpy>
 8005c9a:	e7d1      	b.n	8005c40 <defaultCommand+0x40>
 8005c9c:	08019330 	.word	0x08019330
 8005ca0:	08019360 	.word	0x08019360
 8005ca4:	08019368 	.word	0x08019368
 8005ca8:	20006940 	.word	0x20006940
 8005cac:	20000000 	.word	0x20000000
 8005cb0:	08019338 	.word	0x08019338
 8005cb4:	20000ee2 	.word	0x20000ee2
 8005cb8:	08019378 	.word	0x08019378

08005cbc <setCommand>:
{
 8005cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cbe:	46d6      	mov	lr, sl
 8005cc0:	464f      	mov	r7, r9
 8005cc2:	4646      	mov	r6, r8
 8005cc4:	b5c0      	push	{r6, r7, lr}
 8005cc6:	b08e      	sub	sp, #56	; 0x38
 8005cc8:	4682      	mov	sl, r0
 8005cca:	0014      	movs	r4, r2
 8005ccc:	2700      	movs	r7, #0
 8005cce:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8005cd0:	970d      	str	r7, [sp, #52]	; 0x34
 8005cd2:	970c      	str	r7, [sp, #48]	; 0x30
 8005cd4:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8005cd6:	970a      	str	r7, [sp, #40]	; 0x28
 8005cd8:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d023      	beq.n	8005d26 <setCommand+0x6a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005cde:	aa0d      	add	r2, sp, #52	; 0x34
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	0020      	movs	r0, r4
 8005ce4:	f007 f900 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005ce8:	0005      	movs	r5, r0
 8005cea:	4bd6      	ldr	r3, [pc, #856]	; (8006044 <setCommand+0x388>)
 8005cec:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8005cee:	2204      	movs	r2, #4
 8005cf0:	49d5      	ldr	r1, [pc, #852]	; (8006048 <setCommand+0x38c>)
 8005cf2:	f00c fc16 	bl	8012522 <strncmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d017      	beq.n	8005d2a <setCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	49d3      	ldr	r1, [pc, #844]	; (800604c <setCommand+0x390>)
 8005cfe:	0028      	movs	r0, r5
 8005d00:	f00c fc0f 	bl	8012522 <strncmp>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d100      	bne.n	8005d0a <setCommand+0x4e>
 8005d08:	e15b      	b.n	8005fc2 <setCommand+0x306>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	49d0      	ldr	r1, [pc, #832]	; (8006050 <setCommand+0x394>)
 8005d0e:	0028      	movs	r0, r5
 8005d10:	f00c fc07 	bl	8012522 <strncmp>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d100      	bne.n	8005d1a <setCommand+0x5e>
 8005d18:	e1f8      	b.n	800610c <setCommand+0x450>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005d1a:	2213      	movs	r2, #19
 8005d1c:	49cd      	ldr	r1, [pc, #820]	; (8006054 <setCommand+0x398>)
 8005d1e:	4650      	mov	r0, sl
 8005d20:	f00c f9be 	bl	80120a0 <memcpy>
 8005d24:	e33c      	b.n	80063a0 <setCommand+0x6e4>
	configASSERT( pcWriteBuffer );
 8005d26:	b672      	cpsid	i
 8005d28:	e7fe      	b.n	8005d28 <setCommand+0x6c>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005d2a:	aa0c      	add	r2, sp, #48	; 0x30
 8005d2c:	2102      	movs	r1, #2
 8005d2e:	0020      	movs	r0, r4
 8005d30:	f007 f8da 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005d34:	0004      	movs	r4, r0
 8005d36:	4bc8      	ldr	r3, [pc, #800]	; (8006058 <setCommand+0x39c>)
 8005d38:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005d3a:	4bc2      	ldr	r3, [pc, #776]	; (8006044 <setCommand+0x388>)
 8005d3c:	681d      	ldr	r5, [r3, #0]
 8005d3e:	3504      	adds	r5, #4
 8005d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d42:	1f1e      	subs	r6, r3, #4
 8005d44:	0032      	movs	r2, r6
 8005d46:	49c5      	ldr	r1, [pc, #788]	; (800605c <setCommand+0x3a0>)
 8005d48:	0028      	movs	r0, r5
 8005d4a:	f00c fbea 	bl	8012522 <strncmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d150      	bne.n	8005df4 <setCommand+0x138>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005d52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d54:	002a      	movs	r2, r5
 8005d56:	49c2      	ldr	r1, [pc, #776]	; (8006060 <setCommand+0x3a4>)
 8005d58:	0020      	movs	r0, r4
 8005d5a:	f00c fbe2 	bl	8012522 <strncmp>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d01a      	beq.n	8005d98 <setCommand+0xdc>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005d62:	002a      	movs	r2, r5
 8005d64:	49bf      	ldr	r1, [pc, #764]	; (8006064 <setCommand+0x3a8>)
 8005d66:	0020      	movs	r0, r4
 8005d68:	f00c fbdb 	bl	8012522 <strncmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d01f      	beq.n	8005db0 <setCommand+0xf4>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8005d70:	002a      	movs	r2, r5
 8005d72:	49bd      	ldr	r1, [pc, #756]	; (8006068 <setCommand+0x3ac>)
 8005d74:	0020      	movs	r0, r4
 8005d76:	f00c fbd4 	bl	8012522 <strncmp>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d024      	beq.n	8005dc8 <setCommand+0x10c>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8005d7e:	002a      	movs	r2, r5
 8005d80:	49ba      	ldr	r1, [pc, #744]	; (800606c <setCommand+0x3b0>)
 8005d82:	0020      	movs	r0, r4
 8005d84:	f00c fbcd 	bl	8012522 <strncmp>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d029      	beq.n	8005de0 <setCommand+0x124>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005d8c:	220f      	movs	r2, #15
 8005d8e:	49b8      	ldr	r1, [pc, #736]	; (8006070 <setCommand+0x3b4>)
 8005d90:	4650      	mov	r0, sl
 8005d92:	f00c f985 	bl	80120a0 <memcpy>
 8005d96:	e303      	b.n	80063a0 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 8005d98:	4bb6      	ldr	r3, [pc, #728]	; (8006074 <setCommand+0x3b8>)
 8005d9a:	2260      	movs	r2, #96	; 0x60
 8005d9c:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005d9e:	79d9      	ldrb	r1, [r3, #7]
 8005da0:	0209      	lsls	r1, r1, #8
 8005da2:	2360      	movs	r3, #96	; 0x60
 8005da4:	4319      	orrs	r1, r3
 8005da6:	308a      	adds	r0, #138	; 0x8a
 8005da8:	0040      	lsls	r0, r0, #1
 8005daa:	f001 f9df 	bl	800716c <EE_WriteVariable>
 8005dae:	e1a1      	b.n	80060f4 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 8005db0:	4bb0      	ldr	r3, [pc, #704]	; (8006074 <setCommand+0x3b8>)
 8005db2:	2220      	movs	r2, #32
 8005db4:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005db6:	79d9      	ldrb	r1, [r3, #7]
 8005db8:	0209      	lsls	r1, r1, #8
 8005dba:	2320      	movs	r3, #32
 8005dbc:	4319      	orrs	r1, r3
 8005dbe:	308a      	adds	r0, #138	; 0x8a
 8005dc0:	0040      	lsls	r0, r0, #1
 8005dc2:	f001 f9d3 	bl	800716c <EE_WriteVariable>
 8005dc6:	e195      	b.n	80060f4 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 8005dc8:	4baa      	ldr	r3, [pc, #680]	; (8006074 <setCommand+0x3b8>)
 8005dca:	2240      	movs	r2, #64	; 0x40
 8005dcc:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005dce:	79d9      	ldrb	r1, [r3, #7]
 8005dd0:	0209      	lsls	r1, r1, #8
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	4319      	orrs	r1, r3
 8005dd6:	308a      	adds	r0, #138	; 0x8a
 8005dd8:	0040      	lsls	r0, r0, #1
 8005dda:	f001 f9c7 	bl	800716c <EE_WriteVariable>
 8005dde:	e189      	b.n	80060f4 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 8005de0:	4ba4      	ldr	r3, [pc, #656]	; (8006074 <setCommand+0x3b8>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005de6:	79d9      	ldrb	r1, [r3, #7]
 8005de8:	0209      	lsls	r1, r1, #8
 8005dea:	308a      	adds	r0, #138	; 0x8a
 8005dec:	0040      	lsls	r0, r0, #1
 8005dee:	f001 f9bd 	bl	800716c <EE_WriteVariable>
 8005df2:	e17f      	b.n	80060f4 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8005df4:	0032      	movs	r2, r6
 8005df6:	49a0      	ldr	r1, [pc, #640]	; (8006078 <setCommand+0x3bc>)
 8005df8:	0028      	movs	r0, r5
 8005dfa:	f00c fb92 	bl	8012522 <strncmp>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d149      	bne.n	8005e96 <setCommand+0x1da>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e04:	002a      	movs	r2, r5
 8005e06:	4996      	ldr	r1, [pc, #600]	; (8006060 <setCommand+0x3a4>)
 8005e08:	0020      	movs	r0, r4
 8005e0a:	f00c fb8a 	bl	8012522 <strncmp>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d01d      	beq.n	8005e4e <setCommand+0x192>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005e12:	002a      	movs	r2, r5
 8005e14:	4993      	ldr	r1, [pc, #588]	; (8006064 <setCommand+0x3a8>)
 8005e16:	0020      	movs	r0, r4
 8005e18:	f00c fb83 	bl	8012522 <strncmp>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d022      	beq.n	8005e66 <setCommand+0x1aa>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8005e20:	002a      	movs	r2, r5
 8005e22:	498e      	ldr	r1, [pc, #568]	; (800605c <setCommand+0x3a0>)
 8005e24:	0020      	movs	r0, r4
 8005e26:	f00c fb7c 	bl	8012522 <strncmp>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d027      	beq.n	8005e7e <setCommand+0x1c2>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8005e2e:	002a      	movs	r2, r5
 8005e30:	498e      	ldr	r1, [pc, #568]	; (800606c <setCommand+0x3b0>)
 8005e32:	0020      	movs	r0, r4
 8005e34:	f00c fb75 	bl	8012522 <strncmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d1a7      	bne.n	8005d8c <setCommand+0xd0>
				BOS.trace = TRACE_NONE;
 8005e3c:	4b8d      	ldr	r3, [pc, #564]	; (8006074 <setCommand+0x3b8>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005e42:	7999      	ldrb	r1, [r3, #6]
 8005e44:	308a      	adds	r0, #138	; 0x8a
 8005e46:	0040      	lsls	r0, r0, #1
 8005e48:	f001 f990 	bl	800716c <EE_WriteVariable>
 8005e4c:	e152      	b.n	80060f4 <setCommand+0x438>
				BOS.trace = TRACE_BOTH;
 8005e4e:	4b89      	ldr	r3, [pc, #548]	; (8006074 <setCommand+0x3b8>)
 8005e50:	2203      	movs	r2, #3
 8005e52:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005e54:	799b      	ldrb	r3, [r3, #6]
 8005e56:	21c0      	movs	r1, #192	; 0xc0
 8005e58:	0089      	lsls	r1, r1, #2
 8005e5a:	4319      	orrs	r1, r3
 8005e5c:	308a      	adds	r0, #138	; 0x8a
 8005e5e:	0040      	lsls	r0, r0, #1
 8005e60:	f001 f984 	bl	800716c <EE_WriteVariable>
 8005e64:	e146      	b.n	80060f4 <setCommand+0x438>
				BOS.trace = TRACE_MESSAGE;
 8005e66:	4b83      	ldr	r3, [pc, #524]	; (8006074 <setCommand+0x3b8>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005e6c:	799b      	ldrb	r3, [r3, #6]
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	0049      	lsls	r1, r1, #1
 8005e72:	4319      	orrs	r1, r3
 8005e74:	308a      	adds	r0, #138	; 0x8a
 8005e76:	0040      	lsls	r0, r0, #1
 8005e78:	f001 f978 	bl	800716c <EE_WriteVariable>
 8005e7c:	e13a      	b.n	80060f4 <setCommand+0x438>
				BOS.trace = TRACE_RESPONSE;
 8005e7e:	4b7d      	ldr	r3, [pc, #500]	; (8006074 <setCommand+0x3b8>)
 8005e80:	2202      	movs	r2, #2
 8005e82:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005e84:	799b      	ldrb	r3, [r3, #6]
 8005e86:	2180      	movs	r1, #128	; 0x80
 8005e88:	0089      	lsls	r1, r1, #2
 8005e8a:	4319      	orrs	r1, r3
 8005e8c:	308a      	adds	r0, #138	; 0x8a
 8005e8e:	0040      	lsls	r0, r0, #1
 8005e90:	f001 f96c 	bl	800716c <EE_WriteVariable>
 8005e94:	e12e      	b.n	80060f4 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8005e96:	0032      	movs	r2, r6
 8005e98:	4978      	ldr	r1, [pc, #480]	; (800607c <setCommand+0x3c0>)
 8005e9a:	0028      	movs	r0, r5
 8005e9c:	f00c fb41 	bl	8012522 <strncmp>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d02f      	beq.n	8005f04 <setCommand+0x248>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005ea4:	0032      	movs	r2, r6
 8005ea6:	4976      	ldr	r1, [pc, #472]	; (8006080 <setCommand+0x3c4>)
 8005ea8:	0028      	movs	r0, r5
 8005eaa:	f00c fb3a 	bl	8012522 <strncmp>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d058      	beq.n	8005f64 <setCommand+0x2a8>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005eb2:	0032      	movs	r2, r6
 8005eb4:	4973      	ldr	r1, [pc, #460]	; (8006084 <setCommand+0x3c8>)
 8005eb6:	0028      	movs	r0, r5
 8005eb8:	f00c fb33 	bl	8012522 <strncmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d05f      	beq.n	8005f80 <setCommand+0x2c4>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005ec0:	0032      	movs	r2, r6
 8005ec2:	4971      	ldr	r1, [pc, #452]	; (8006088 <setCommand+0x3cc>)
 8005ec4:	0028      	movs	r0, r5
 8005ec6:	f00c fb2c 	bl	8012522 <strncmp>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d066      	beq.n	8005f9c <setCommand+0x2e0>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005ece:	0032      	movs	r2, r6
 8005ed0:	496e      	ldr	r1, [pc, #440]	; (800608c <setCommand+0x3d0>)
 8005ed2:	0028      	movs	r0, r5
 8005ed4:	f00c fb25 	bl	8012522 <strncmp>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d000      	beq.n	8005ede <setCommand+0x222>
 8005edc:	e71d      	b.n	8005d1a <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f00b fe77 	bl	8011bd2 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005ee4:	1e43      	subs	r3, r0, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2bfe      	cmp	r3, #254	; 0xfe
 8005eea:	d900      	bls.n	8005eee <setCommand+0x232>
 8005eec:	e74e      	b.n	8005d8c <setCommand+0xd0>
				BOS.buttons.maxInterClickTime = temp16;
 8005eee:	4b61      	ldr	r3, [pc, #388]	; (8006074 <setCommand+0x3b8>)
 8005ef0:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005ef2:	0200      	lsls	r0, r0, #8
 8005ef4:	7919      	ldrb	r1, [r3, #4]
 8005ef6:	4301      	orrs	r1, r0
 8005ef8:	b289      	uxth	r1, r1
 8005efa:	2018      	movs	r0, #24
 8005efc:	30ff      	adds	r0, #255	; 0xff
 8005efe:	f001 f935 	bl	800716c <EE_WriteVariable>
 8005f02:	e0f7      	b.n	80060f4 <setCommand+0x438>
			temp2 = atoi((const char *)pcParameterString2);
 8005f04:	0020      	movs	r0, r4
 8005f06:	f00b fe64 	bl	8011bd2 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8005f0a:	23e1      	movs	r3, #225	; 0xe1
 8005f0c:	031b      	lsls	r3, r3, #12
 8005f0e:	4298      	cmp	r0, r3
 8005f10:	d900      	bls.n	8005f14 <setCommand+0x258>
 8005f12:	e73b      	b.n	8005d8c <setCommand+0xd0>
				BOS.clibaudrate = temp2;
 8005f14:	4c57      	ldr	r4, [pc, #348]	; (8006074 <setCommand+0x3b8>)
 8005f16:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8005f18:	b281      	uxth	r1, r0
 8005f1a:	208c      	movs	r0, #140	; 0x8c
 8005f1c:	0040      	lsls	r0, r0, #1
 8005f1e:	f001 f925 	bl	800716c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8005f22:	8961      	ldrh	r1, [r4, #10]
 8005f24:	201a      	movs	r0, #26
 8005f26:	30ff      	adds	r0, #255	; 0xff
 8005f28:	f001 f920 	bl	800716c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8005f2c:	4b45      	ldr	r3, [pc, #276]	; (8006044 <setCommand+0x388>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	2300      	movs	r3, #0
 8005f32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f34:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8005f36:	4b48      	ldr	r3, [pc, #288]	; (8006058 <setCommand+0x39c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4955      	ldr	r1, [pc, #340]	; (8006090 <setCommand+0x3d4>)
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	f00c faad 	bl	801249c <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 8005f42:	4650      	mov	r0, sl
 8005f44:	f7fa f8e8 	bl	8000118 <strlen>
 8005f48:	4450      	add	r0, sl
 8005f4a:	2230      	movs	r2, #48	; 0x30
 8005f4c:	4951      	ldr	r1, [pc, #324]	; (8006094 <setCommand+0x3d8>)
 8005f4e:	f00c f8a7 	bl	80120a0 <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8005f52:	4650      	mov	r0, sl
 8005f54:	f7fa f8e0 	bl	8000118 <strlen>
 8005f58:	4450      	add	r0, sl
 8005f5a:	22a3      	movs	r2, #163	; 0xa3
 8005f5c:	494e      	ldr	r1, [pc, #312]	; (8006098 <setCommand+0x3dc>)
 8005f5e:	f00c f89f 	bl	80120a0 <memcpy>
 8005f62:	e21d      	b.n	80063a0 <setCommand+0x6e4>
			temp16 = atoi((const char *)pcParameterString2);
 8005f64:	0020      	movs	r0, r4
 8005f66:	f00b fe34 	bl	8011bd2 <atoi>
 8005f6a:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d100      	bne.n	8005f72 <setCommand+0x2b6>
 8005f70:	e70c      	b.n	8005d8c <setCommand+0xd0>
				BOS.buttons.debounce = temp16;
 8005f72:	4b40      	ldr	r3, [pc, #256]	; (8006074 <setCommand+0x3b8>)
 8005f74:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8005f76:	2016      	movs	r0, #22
 8005f78:	30ff      	adds	r0, #255	; 0xff
 8005f7a:	f001 f8f7 	bl	800716c <EE_WriteVariable>
 8005f7e:	e0b9      	b.n	80060f4 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8005f80:	0020      	movs	r0, r4
 8005f82:	f00b fe26 	bl	8011bd2 <atoi>
 8005f86:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	d100      	bne.n	8005f8e <setCommand+0x2d2>
 8005f8c:	e6fe      	b.n	8005d8c <setCommand+0xd0>
				BOS.buttons.singleClickTime = temp16;
 8005f8e:	4b39      	ldr	r3, [pc, #228]	; (8006074 <setCommand+0x3b8>)
 8005f90:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8005f92:	208b      	movs	r0, #139	; 0x8b
 8005f94:	0040      	lsls	r0, r0, #1
 8005f96:	f001 f8e9 	bl	800716c <EE_WriteVariable>
 8005f9a:	e0ab      	b.n	80060f4 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8005f9c:	0020      	movs	r0, r4
 8005f9e:	f00b fe18 	bl	8011bd2 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005fa2:	1e43      	subs	r3, r0, #1
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2bfe      	cmp	r3, #254	; 0xfe
 8005fa8:	d900      	bls.n	8005fac <setCommand+0x2f0>
 8005faa:	e6ef      	b.n	8005d8c <setCommand+0xd0>
				BOS.buttons.minInterClickTime = temp16;
 8005fac:	b2c0      	uxtb	r0, r0
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <setCommand+0x3b8>)
 8005fb0:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005fb2:	7959      	ldrb	r1, [r3, #5]
 8005fb4:	0209      	lsls	r1, r1, #8
 8005fb6:	4301      	orrs	r1, r0
 8005fb8:	2018      	movs	r0, #24
 8005fba:	30ff      	adds	r0, #255	; 0xff
 8005fbc:	f001 f8d6 	bl	800716c <EE_WriteVariable>
 8005fc0:	e098      	b.n	80060f4 <setCommand+0x438>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005fc2:	aa0c      	add	r2, sp, #48	; 0x30
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f006 ff8e 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005fcc:	4b22      	ldr	r3, [pc, #136]	; (8006058 <setCommand+0x39c>)
 8005fce:	4698      	mov	r8, r3
 8005fd0:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005fd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fd4:	2103      	movs	r1, #3
 8005fd6:	0020      	movs	r0, r4
 8005fd8:	f006 ff86 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005fdc:	4d2f      	ldr	r5, [pc, #188]	; (800609c <setCommand+0x3e0>)
 8005fde:	6028      	str	r0, [r5, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005fe0:	aa0a      	add	r2, sp, #40	; 0x28
 8005fe2:	2104      	movs	r1, #4
 8005fe4:	0020      	movs	r0, r4
 8005fe6:	f006 ff7f 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005fea:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <setCommand+0x3e4>)
 8005fec:	4699      	mov	r9, r3
 8005fee:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005ff0:	aa09      	add	r2, sp, #36	; 0x24
 8005ff2:	2105      	movs	r1, #5
 8005ff4:	0020      	movs	r0, r4
 8005ff6:	f006 ff77 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8005ffa:	4f2a      	ldr	r7, [pc, #168]	; (80060a4 <setCommand+0x3e8>)
 8005ffc:	6038      	str	r0, [r7, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8005ffe:	4643      	mov	r3, r8
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f00b fde6 	bl	8011bd2 <atoi>
 8006006:	b2c3      	uxtb	r3, r0
 8006008:	4698      	mov	r8, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 800600a:	6828      	ldr	r0, [r5, #0]
 800600c:	f00b fde1 	bl	8011bd2 <atoi>
 8006010:	0005      	movs	r5, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006012:	464b      	mov	r3, r9
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f00b fddc 	bl	8011bd2 <atoi>
 800601a:	0004      	movs	r4, r0
		if (pcParameterString5 != NULL) {
 800601c:	683f      	ldr	r7, [r7, #0]
 800601e:	2f00      	cmp	r7, #0
 8006020:	d047      	beq.n	80060b2 <setCommand+0x3f6>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8006022:	2202      	movs	r2, #2
 8006024:	4920      	ldr	r1, [pc, #128]	; (80060a8 <setCommand+0x3ec>)
 8006026:	0038      	movs	r0, r7
 8006028:	f00c fa7b 	bl	8012522 <strncmp>
 800602c:	2800      	cmp	r0, #0
 800602e:	d03f      	beq.n	80060b0 <setCommand+0x3f4>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006030:	2202      	movs	r2, #2
 8006032:	491e      	ldr	r1, [pc, #120]	; (80060ac <setCommand+0x3f0>)
 8006034:	0038      	movs	r0, r7
 8006036:	f00c fa74 	bl	8012522 <strncmp>
				temp84 = RTC_PM;
 800603a:	2602      	movs	r6, #2
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 800603c:	2800      	cmp	r0, #0
 800603e:	d038      	beq.n	80060b2 <setCommand+0x3f6>
				result = BOS_ERR_WrongValue;
 8006040:	2668      	movs	r6, #104	; 0x68
 8006042:	e1aa      	b.n	800639a <setCommand+0x6de>
 8006044:	20001274 	.word	0x20001274
 8006048:	08019244 	.word	0x08019244
 800604c:	080194ac 	.word	0x080194ac
 8006050:	080194bc 	.word	0x080194bc
 8006054:	080192cc 	.word	0x080192cc
 8006058:	20001280 	.word	0x20001280
 800605c:	0801924c 	.word	0x0801924c
 8006060:	08018590 	.word	0x08018590
 8006064:	080193b8 	.word	0x080193b8
 8006068:	080193c0 	.word	0x080193c0
 800606c:	0801925c 	.word	0x0801925c
 8006070:	08019368 	.word	0x08019368
 8006074:	20006940 	.word	0x20006940
 8006078:	08019264 	.word	0x08019264
 800607c:	0801926c 	.word	0x0801926c
 8006080:	08019278 	.word	0x08019278
 8006084:	08019284 	.word	0x08019284
 8006088:	08019294 	.word	0x08019294
 800608c:	080192a8 	.word	0x080192a8
 8006090:	080193c4 	.word	0x080193c4
 8006094:	080193d8 	.word	0x080193d8
 8006098:	08019408 	.word	0x08019408
 800609c:	20001288 	.word	0x20001288
 80060a0:	2000128c 	.word	0x2000128c
 80060a4:	20001290 	.word	0x20001290
 80060a8:	080194b4 	.word	0x080194b4
 80060ac:	080194b8 	.word	0x080194b8
				temp84 = RTC_AM;
 80060b0:	2601      	movs	r6, #1
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80060b2:	4643      	mov	r3, r8
 80060b4:	2b17      	cmp	r3, #23
 80060b6:	d900      	bls.n	80060ba <setCommand+0x3fe>
 80060b8:	e668      	b.n	8005d8c <setCommand+0xd0>
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 80060ba:	b2ed      	uxtb	r5, r5
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80060bc:	2d3b      	cmp	r5, #59	; 0x3b
 80060be:	d900      	bls.n	80060c2 <setCommand+0x406>
 80060c0:	e664      	b.n	8005d8c <setCommand+0xd0>
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 80060c2:	b2e4      	uxtb	r4, r4
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80060c4:	2c3b      	cmp	r4, #59	; 0x3b
 80060c6:	d900      	bls.n	80060ca <setCommand+0x40e>
 80060c8:	e660      	b.n	8005d8c <setCommand+0xd0>
				GetTimeDate();				
 80060ca:	f006 f9f9 	bl	800c4c0 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 80060ce:	4fb8      	ldr	r7, [pc, #736]	; (80063b0 <setCommand+0x6f4>)
 80060d0:	7d3b      	ldrb	r3, [r7, #20]
 80060d2:	8b3a      	ldrh	r2, [r7, #24]
 80060d4:	7d79      	ldrb	r1, [r7, #21]
 80060d6:	7db8      	ldrb	r0, [r7, #22]
 80060d8:	7b3f      	ldrb	r7, [r7, #12]
 80060da:	b27f      	sxtb	r7, r7
 80060dc:	9704      	str	r7, [sp, #16]
 80060de:	9603      	str	r6, [sp, #12]
 80060e0:	4646      	mov	r6, r8
 80060e2:	9602      	str	r6, [sp, #8]
 80060e4:	9501      	str	r5, [sp, #4]
 80060e6:	9400      	str	r4, [sp, #0]
 80060e8:	f006 f990 	bl	800c40c <BOS_CalendarConfig>
 80060ec:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 80060ee:	2e00      	cmp	r6, #0
 80060f0:	d000      	beq.n	80060f4 <setCommand+0x438>
 80060f2:	e14f      	b.n	8006394 <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80060f4:	4baf      	ldr	r3, [pc, #700]	; (80063b4 <setCommand+0x6f8>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060fc:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80060fe:	4bae      	ldr	r3, [pc, #696]	; (80063b8 <setCommand+0x6fc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	49ae      	ldr	r1, [pc, #696]	; (80063bc <setCommand+0x700>)
 8006104:	4650      	mov	r0, sl
 8006106:	f00c f9c9 	bl	801249c <sprintf>
	return pdFALSE;
 800610a:	e149      	b.n	80063a0 <setCommand+0x6e4>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800610c:	aa0c      	add	r2, sp, #48	; 0x30
 800610e:	2102      	movs	r1, #2
 8006110:	0020      	movs	r0, r4
 8006112:	f006 fee9 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006116:	4da8      	ldr	r5, [pc, #672]	; (80063b8 <setCommand+0x6fc>)
 8006118:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800611a:	aa0b      	add	r2, sp, #44	; 0x2c
 800611c:	2103      	movs	r1, #3
 800611e:	0020      	movs	r0, r4
 8006120:	f006 fee2 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006124:	4ba6      	ldr	r3, [pc, #664]	; (80063c0 <setCommand+0x704>)
 8006126:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006128:	aa0a      	add	r2, sp, #40	; 0x28
 800612a:	2104      	movs	r1, #4
 800612c:	0020      	movs	r0, r4
 800612e:	f006 fedb 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006132:	4ea4      	ldr	r6, [pc, #656]	; (80063c4 <setCommand+0x708>)
 8006134:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006136:	aa09      	add	r2, sp, #36	; 0x24
 8006138:	2105      	movs	r1, #5
 800613a:	0020      	movs	r0, r4
 800613c:	f006 fed4 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006140:	4ca1      	ldr	r4, [pc, #644]	; (80063c8 <setCommand+0x70c>)
 8006142:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006144:	6830      	ldr	r0, [r6, #0]
 8006146:	f00b fd44 	bl	8011bd2 <atoi>
 800614a:	9006      	str	r0, [sp, #24]
		temp16 = atoi((const char *)pcParameterString5);		// year	
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	f00b fd40 	bl	8011bd2 <atoi>
 8006152:	9007      	str	r0, [sp, #28]
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006154:	682c      	ldr	r4, [r5, #0]
 8006156:	2206      	movs	r2, #6
 8006158:	499c      	ldr	r1, [pc, #624]	; (80063cc <setCommand+0x710>)
 800615a:	0020      	movs	r0, r4
 800615c:	f00c f9e1 	bl	8012522 <strncmp>
 8006160:	2800      	cmp	r0, #0
 8006162:	d100      	bne.n	8006166 <setCommand+0x4aa>
 8006164:	e170      	b.n	8006448 <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8006166:	2207      	movs	r2, #7
 8006168:	4999      	ldr	r1, [pc, #612]	; (80063d0 <setCommand+0x714>)
 800616a:	0020      	movs	r0, r4
 800616c:	f00c f9d9 	bl	8012522 <strncmp>
 8006170:	2800      	cmp	r0, #0
 8006172:	d100      	bne.n	8006176 <setCommand+0x4ba>
 8006174:	e199      	b.n	80064aa <setCommand+0x7ee>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8006176:	2209      	movs	r2, #9
 8006178:	4996      	ldr	r1, [pc, #600]	; (80063d4 <setCommand+0x718>)
 800617a:	0020      	movs	r0, r4
 800617c:	f00c f9d1 	bl	8012522 <strncmp>
 8006180:	2800      	cmp	r0, #0
 8006182:	d100      	bne.n	8006186 <setCommand+0x4ca>
 8006184:	e193      	b.n	80064ae <setCommand+0x7f2>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8006186:	2208      	movs	r2, #8
 8006188:	4993      	ldr	r1, [pc, #588]	; (80063d8 <setCommand+0x71c>)
 800618a:	0020      	movs	r0, r4
 800618c:	f00c f9c9 	bl	8012522 <strncmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	d100      	bne.n	8006196 <setCommand+0x4da>
 8006194:	e18d      	b.n	80064b2 <setCommand+0x7f6>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8006196:	2206      	movs	r2, #6
 8006198:	4990      	ldr	r1, [pc, #576]	; (80063dc <setCommand+0x720>)
 800619a:	0020      	movs	r0, r4
 800619c:	f00c f9c1 	bl	8012522 <strncmp>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d100      	bne.n	80061a6 <setCommand+0x4ea>
 80061a4:	e187      	b.n	80064b6 <setCommand+0x7fa>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 80061a6:	2208      	movs	r2, #8
 80061a8:	498d      	ldr	r1, [pc, #564]	; (80063e0 <setCommand+0x724>)
 80061aa:	0020      	movs	r0, r4
 80061ac:	f00c f9b9 	bl	8012522 <strncmp>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d100      	bne.n	80061b6 <setCommand+0x4fa>
 80061b4:	e181      	b.n	80064ba <setCommand+0x7fe>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 80061b6:	2206      	movs	r2, #6
 80061b8:	498a      	ldr	r1, [pc, #552]	; (80063e4 <setCommand+0x728>)
 80061ba:	0020      	movs	r0, r4
 80061bc:	f00c f9b1 	bl	8012522 <strncmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d100      	bne.n	80061c6 <setCommand+0x50a>
 80061c4:	e17b      	b.n	80064be <setCommand+0x802>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80061c6:	4b7e      	ldr	r3, [pc, #504]	; (80063c0 <setCommand+0x704>)
 80061c8:	681c      	ldr	r4, [r3, #0]
 80061ca:	2207      	movs	r2, #7
 80061cc:	4986      	ldr	r1, [pc, #536]	; (80063e8 <setCommand+0x72c>)
 80061ce:	0020      	movs	r0, r4
 80061d0:	f00c f9a7 	bl	8012522 <strncmp>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d100      	bne.n	80061da <setCommand+0x51e>
 80061d8:	e0ab      	b.n	8006332 <setCommand+0x676>
			result = BOS_ERR_WrongValue;		
 80061da:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80061dc:	2202      	movs	r2, #2
 80061de:	4983      	ldr	r1, [pc, #524]	; (80063ec <setCommand+0x730>)
 80061e0:	0020      	movs	r0, r4
 80061e2:	f00c f99e 	bl	8012522 <strncmp>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d100      	bne.n	80061ec <setCommand+0x530>
 80061ea:	e0a5      	b.n	8006338 <setCommand+0x67c>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 80061ec:	2208      	movs	r2, #8
 80061ee:	4980      	ldr	r1, [pc, #512]	; (80063f0 <setCommand+0x734>)
 80061f0:	0020      	movs	r0, r4
 80061f2:	f00c f996 	bl	8012522 <strncmp>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d100      	bne.n	80061fc <setCommand+0x540>
 80061fa:	e0a1      	b.n	8006340 <setCommand+0x684>
 80061fc:	2202      	movs	r2, #2
 80061fe:	497d      	ldr	r1, [pc, #500]	; (80063f4 <setCommand+0x738>)
 8006200:	0020      	movs	r0, r4
 8006202:	f00c f98e 	bl	8012522 <strncmp>
 8006206:	2800      	cmp	r0, #0
 8006208:	d100      	bne.n	800620c <setCommand+0x550>
 800620a:	e09b      	b.n	8006344 <setCommand+0x688>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 800620c:	2205      	movs	r2, #5
 800620e:	497a      	ldr	r1, [pc, #488]	; (80063f8 <setCommand+0x73c>)
 8006210:	0020      	movs	r0, r4
 8006212:	f00c f986 	bl	8012522 <strncmp>
 8006216:	2800      	cmp	r0, #0
 8006218:	d100      	bne.n	800621c <setCommand+0x560>
 800621a:	e095      	b.n	8006348 <setCommand+0x68c>
 800621c:	2202      	movs	r2, #2
 800621e:	4977      	ldr	r1, [pc, #476]	; (80063fc <setCommand+0x740>)
 8006220:	0020      	movs	r0, r4
 8006222:	f00c f97e 	bl	8012522 <strncmp>
 8006226:	2800      	cmp	r0, #0
 8006228:	d100      	bne.n	800622c <setCommand+0x570>
 800622a:	e08f      	b.n	800634c <setCommand+0x690>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 800622c:	2205      	movs	r2, #5
 800622e:	4974      	ldr	r1, [pc, #464]	; (8006400 <setCommand+0x744>)
 8006230:	0020      	movs	r0, r4
 8006232:	f00c f976 	bl	8012522 <strncmp>
 8006236:	2800      	cmp	r0, #0
 8006238:	d100      	bne.n	800623c <setCommand+0x580>
 800623a:	e089      	b.n	8006350 <setCommand+0x694>
 800623c:	2202      	movs	r2, #2
 800623e:	4971      	ldr	r1, [pc, #452]	; (8006404 <setCommand+0x748>)
 8006240:	0020      	movs	r0, r4
 8006242:	f00c f96e 	bl	8012522 <strncmp>
 8006246:	2800      	cmp	r0, #0
 8006248:	d100      	bne.n	800624c <setCommand+0x590>
 800624a:	e083      	b.n	8006354 <setCommand+0x698>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 800624c:	2203      	movs	r2, #3
 800624e:	496e      	ldr	r1, [pc, #440]	; (8006408 <setCommand+0x74c>)
 8006250:	0020      	movs	r0, r4
 8006252:	f00c f966 	bl	8012522 <strncmp>
 8006256:	2800      	cmp	r0, #0
 8006258:	d07e      	beq.n	8006358 <setCommand+0x69c>
 800625a:	2202      	movs	r2, #2
 800625c:	496b      	ldr	r1, [pc, #428]	; (800640c <setCommand+0x750>)
 800625e:	0020      	movs	r0, r4
 8006260:	f00c f95f 	bl	8012522 <strncmp>
 8006264:	2800      	cmp	r0, #0
 8006266:	d079      	beq.n	800635c <setCommand+0x6a0>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8006268:	2204      	movs	r2, #4
 800626a:	4969      	ldr	r1, [pc, #420]	; (8006410 <setCommand+0x754>)
 800626c:	0020      	movs	r0, r4
 800626e:	f00c f958 	bl	8012522 <strncmp>
 8006272:	2800      	cmp	r0, #0
 8006274:	d074      	beq.n	8006360 <setCommand+0x6a4>
 8006276:	2202      	movs	r2, #2
 8006278:	4966      	ldr	r1, [pc, #408]	; (8006414 <setCommand+0x758>)
 800627a:	0020      	movs	r0, r4
 800627c:	f00c f951 	bl	8012522 <strncmp>
 8006280:	2800      	cmp	r0, #0
 8006282:	d06f      	beq.n	8006364 <setCommand+0x6a8>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006284:	2204      	movs	r2, #4
 8006286:	4964      	ldr	r1, [pc, #400]	; (8006418 <setCommand+0x75c>)
 8006288:	0020      	movs	r0, r4
 800628a:	f00c f94a 	bl	8012522 <strncmp>
 800628e:	2800      	cmp	r0, #0
 8006290:	d06a      	beq.n	8006368 <setCommand+0x6ac>
 8006292:	2202      	movs	r2, #2
 8006294:	4961      	ldr	r1, [pc, #388]	; (800641c <setCommand+0x760>)
 8006296:	0020      	movs	r0, r4
 8006298:	f00c f943 	bl	8012522 <strncmp>
 800629c:	2800      	cmp	r0, #0
 800629e:	d065      	beq.n	800636c <setCommand+0x6b0>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 80062a0:	2205      	movs	r2, #5
 80062a2:	495f      	ldr	r1, [pc, #380]	; (8006420 <setCommand+0x764>)
 80062a4:	0020      	movs	r0, r4
 80062a6:	f00c f93c 	bl	8012522 <strncmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d060      	beq.n	8006370 <setCommand+0x6b4>
 80062ae:	2202      	movs	r2, #2
 80062b0:	495c      	ldr	r1, [pc, #368]	; (8006424 <setCommand+0x768>)
 80062b2:	0020      	movs	r0, r4
 80062b4:	f00c f935 	bl	8012522 <strncmp>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d05b      	beq.n	8006374 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 80062bc:	2209      	movs	r2, #9
 80062be:	495a      	ldr	r1, [pc, #360]	; (8006428 <setCommand+0x76c>)
 80062c0:	0020      	movs	r0, r4
 80062c2:	f00c f92e 	bl	8012522 <strncmp>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d056      	beq.n	8006378 <setCommand+0x6bc>
 80062ca:	2202      	movs	r2, #2
 80062cc:	4957      	ldr	r1, [pc, #348]	; (800642c <setCommand+0x770>)
 80062ce:	0020      	movs	r0, r4
 80062d0:	f00c f927 	bl	8012522 <strncmp>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d051      	beq.n	800637c <setCommand+0x6c0>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 80062d8:	2207      	movs	r2, #7
 80062da:	4955      	ldr	r1, [pc, #340]	; (8006430 <setCommand+0x774>)
 80062dc:	0020      	movs	r0, r4
 80062de:	f00c f920 	bl	8012522 <strncmp>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d04c      	beq.n	8006380 <setCommand+0x6c4>
 80062e6:	2202      	movs	r2, #2
 80062e8:	4952      	ldr	r1, [pc, #328]	; (8006434 <setCommand+0x778>)
 80062ea:	0020      	movs	r0, r4
 80062ec:	f00c f919 	bl	8012522 <strncmp>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d047      	beq.n	8006384 <setCommand+0x6c8>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 80062f4:	2208      	movs	r2, #8
 80062f6:	4950      	ldr	r1, [pc, #320]	; (8006438 <setCommand+0x77c>)
 80062f8:	0020      	movs	r0, r4
 80062fa:	f00c f912 	bl	8012522 <strncmp>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d042      	beq.n	8006388 <setCommand+0x6cc>
 8006302:	2202      	movs	r2, #2
 8006304:	494d      	ldr	r1, [pc, #308]	; (800643c <setCommand+0x780>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00c f90b 	bl	8012522 <strncmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	d03d      	beq.n	800638c <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006310:	2208      	movs	r2, #8
 8006312:	494b      	ldr	r1, [pc, #300]	; (8006440 <setCommand+0x784>)
 8006314:	0020      	movs	r0, r4
 8006316:	f00c f904 	bl	8012522 <strncmp>
 800631a:	2800      	cmp	r0, #0
 800631c:	d038      	beq.n	8006390 <setCommand+0x6d4>
 800631e:	2202      	movs	r2, #2
 8006320:	4948      	ldr	r1, [pc, #288]	; (8006444 <setCommand+0x788>)
 8006322:	0020      	movs	r0, r4
 8006324:	f00c f8fd 	bl	8012522 <strncmp>
			temp82 = DECEMBER;
 8006328:	250c      	movs	r5, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 800632a:	2800      	cmp	r0, #0
 800632c:	d005      	beq.n	800633a <setCommand+0x67e>
			result = BOS_ERR_WrongValue;	
 800632e:	2668      	movs	r6, #104	; 0x68
 8006330:	e033      	b.n	800639a <setCommand+0x6de>
			result = BOS_ERR_WrongValue;		
 8006332:	2668      	movs	r6, #104	; 0x68
			temp82 = JANUARY;
 8006334:	2501      	movs	r5, #1
 8006336:	e000      	b.n	800633a <setCommand+0x67e>
 8006338:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 800633a:	2e00      	cmp	r6, #0
 800633c:	d12d      	bne.n	800639a <setCommand+0x6de>
 800633e:	e090      	b.n	8006462 <setCommand+0x7a6>
			temp82 = FEBRUARY;
 8006340:	2502      	movs	r5, #2
 8006342:	e7fa      	b.n	800633a <setCommand+0x67e>
 8006344:	2502      	movs	r5, #2
 8006346:	e7f8      	b.n	800633a <setCommand+0x67e>
			temp82 = MARCH;
 8006348:	2503      	movs	r5, #3
 800634a:	e7f6      	b.n	800633a <setCommand+0x67e>
 800634c:	2503      	movs	r5, #3
 800634e:	e7f4      	b.n	800633a <setCommand+0x67e>
			temp82 = APRIL;
 8006350:	2504      	movs	r5, #4
 8006352:	e7f2      	b.n	800633a <setCommand+0x67e>
 8006354:	2504      	movs	r5, #4
 8006356:	e7f0      	b.n	800633a <setCommand+0x67e>
			temp82 = MAY;
 8006358:	2505      	movs	r5, #5
 800635a:	e7ee      	b.n	800633a <setCommand+0x67e>
 800635c:	2505      	movs	r5, #5
 800635e:	e7ec      	b.n	800633a <setCommand+0x67e>
			temp82 = JUNE;
 8006360:	2506      	movs	r5, #6
 8006362:	e7ea      	b.n	800633a <setCommand+0x67e>
 8006364:	2506      	movs	r5, #6
 8006366:	e7e8      	b.n	800633a <setCommand+0x67e>
			temp82 = JULY;
 8006368:	2507      	movs	r5, #7
 800636a:	e7e6      	b.n	800633a <setCommand+0x67e>
 800636c:	2507      	movs	r5, #7
 800636e:	e7e4      	b.n	800633a <setCommand+0x67e>
			temp82 = AUGUST;
 8006370:	2508      	movs	r5, #8
 8006372:	e7e2      	b.n	800633a <setCommand+0x67e>
 8006374:	2508      	movs	r5, #8
 8006376:	e7e0      	b.n	800633a <setCommand+0x67e>
			temp82 = SEPTEMBER;
 8006378:	2509      	movs	r5, #9
 800637a:	e7de      	b.n	800633a <setCommand+0x67e>
 800637c:	2509      	movs	r5, #9
 800637e:	e7dc      	b.n	800633a <setCommand+0x67e>
			temp82 = OCTOBER;
 8006380:	250a      	movs	r5, #10
 8006382:	e7da      	b.n	800633a <setCommand+0x67e>
 8006384:	250a      	movs	r5, #10
 8006386:	e7d8      	b.n	800633a <setCommand+0x67e>
			temp82 = NOVEMBER;
 8006388:	250b      	movs	r5, #11
 800638a:	e7d6      	b.n	800633a <setCommand+0x67e>
 800638c:	250b      	movs	r5, #11
 800638e:	e7d4      	b.n	800633a <setCommand+0x67e>
			temp82 = DECEMBER;
 8006390:	250c      	movs	r5, #12
 8006392:	e7d2      	b.n	800633a <setCommand+0x67e>
	else if (result == BOS_ERR_WrongParam)
 8006394:	2e67      	cmp	r6, #103	; 0x67
 8006396:	d100      	bne.n	800639a <setCommand+0x6de>
 8006398:	e4bf      	b.n	8005d1a <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 800639a:	2e68      	cmp	r6, #104	; 0x68
 800639c:	d100      	bne.n	80063a0 <setCommand+0x6e4>
 800639e:	e4f5      	b.n	8005d8c <setCommand+0xd0>
}
 80063a0:	2000      	movs	r0, #0
 80063a2:	b00e      	add	sp, #56	; 0x38
 80063a4:	bce0      	pop	{r5, r6, r7}
 80063a6:	46ba      	mov	sl, r7
 80063a8:	46b1      	mov	r9, r6
 80063aa:	46a8      	mov	r8, r5
 80063ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	20006940 	.word	0x20006940
 80063b4:	20001274 	.word	0x20001274
 80063b8:	20001280 	.word	0x20001280
 80063bc:	080193c4 	.word	0x080193c4
 80063c0:	20001288 	.word	0x20001288
 80063c4:	2000128c 	.word	0x2000128c
 80063c8:	20001290 	.word	0x20001290
 80063cc:	080194c4 	.word	0x080194c4
 80063d0:	080194cc 	.word	0x080194cc
 80063d4:	080194d4 	.word	0x080194d4
 80063d8:	080194e0 	.word	0x080194e0
 80063dc:	080194ec 	.word	0x080194ec
 80063e0:	080194f4 	.word	0x080194f4
 80063e4:	08019500 	.word	0x08019500
 80063e8:	08019508 	.word	0x08019508
 80063ec:	08019510 	.word	0x08019510
 80063f0:	08019514 	.word	0x08019514
 80063f4:	08019520 	.word	0x08019520
 80063f8:	08019524 	.word	0x08019524
 80063fc:	0801952c 	.word	0x0801952c
 8006400:	08019530 	.word	0x08019530
 8006404:	08019538 	.word	0x08019538
 8006408:	0801953c 	.word	0x0801953c
 800640c:	08019540 	.word	0x08019540
 8006410:	08019544 	.word	0x08019544
 8006414:	0801954c 	.word	0x0801954c
 8006418:	08019550 	.word	0x08019550
 800641c:	08019558 	.word	0x08019558
 8006420:	0801955c 	.word	0x0801955c
 8006424:	08019564 	.word	0x08019564
 8006428:	08019568 	.word	0x08019568
 800642c:	08019574 	.word	0x08019574
 8006430:	08019578 	.word	0x08019578
 8006434:	08019580 	.word	0x08019580
 8006438:	08019584 	.word	0x08019584
 800643c:	08019590 	.word	0x08019590
 8006440:	08019594 	.word	0x08019594
 8006444:	080195a0 	.word	0x080195a0
			temp81 = MONDAY;
 8006448:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <setCommand+0x808>)
 800644c:	681c      	ldr	r4, [r3, #0]
 800644e:	2207      	movs	r2, #7
 8006450:	491d      	ldr	r1, [pc, #116]	; (80064c8 <setCommand+0x80c>)
 8006452:	0020      	movs	r0, r4
 8006454:	f00c f865 	bl	8012522 <strncmp>
			temp82 = JANUARY;
 8006458:	2501      	movs	r5, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800645a:	2600      	movs	r6, #0
 800645c:	2800      	cmp	r0, #0
 800645e:	d000      	beq.n	8006462 <setCommand+0x7a6>
 8006460:	e6bc      	b.n	80061dc <setCommand+0x520>
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006462:	466b      	mov	r3, sp
 8006464:	7e1e      	ldrb	r6, [r3, #24]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006466:	1e73      	subs	r3, r6, #1
 8006468:	2b1e      	cmp	r3, #30
 800646a:	d900      	bls.n	800646e <setCommand+0x7b2>
 800646c:	e48e      	b.n	8005d8c <setCommand+0xd0>
		temp16 = atoi((const char *)pcParameterString5);		// year	
 800646e:	466b      	mov	r3, sp
 8006470:	8b9c      	ldrh	r4, [r3, #28]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006472:	4b16      	ldr	r3, [pc, #88]	; (80064cc <setCommand+0x810>)
 8006474:	18e3      	adds	r3, r4, r3
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b64      	cmp	r3, #100	; 0x64
 800647a:	d900      	bls.n	800647e <setCommand+0x7c2>
 800647c:	e486      	b.n	8005d8c <setCommand+0xd0>
				GetTimeDate();
 800647e:	f006 f81f 	bl	800c4c0 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <setCommand+0x814>)
 8006484:	220c      	movs	r2, #12
 8006486:	569a      	ldrsb	r2, [r3, r2]
 8006488:	9204      	str	r2, [sp, #16]
 800648a:	7cda      	ldrb	r2, [r3, #19]
 800648c:	9203      	str	r2, [sp, #12]
 800648e:	7c9a      	ldrb	r2, [r3, #18]
 8006490:	9202      	str	r2, [sp, #8]
 8006492:	7c5a      	ldrb	r2, [r3, #17]
 8006494:	9201      	str	r2, [sp, #4]
 8006496:	7c1b      	ldrb	r3, [r3, #16]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	003b      	movs	r3, r7
 800649c:	0022      	movs	r2, r4
 800649e:	0031      	movs	r1, r6
 80064a0:	0028      	movs	r0, r5
 80064a2:	f005 ffb3 	bl	800c40c <BOS_CalendarConfig>
 80064a6:	0006      	movs	r6, r0
 80064a8:	e621      	b.n	80060ee <setCommand+0x432>
			temp81 = TUESDAY;
 80064aa:	2702      	movs	r7, #2
 80064ac:	e7cd      	b.n	800644a <setCommand+0x78e>
			temp81 = WEDNESDAY;
 80064ae:	2703      	movs	r7, #3
 80064b0:	e7cb      	b.n	800644a <setCommand+0x78e>
			temp81 = THURSDAY;
 80064b2:	2704      	movs	r7, #4
 80064b4:	e7c9      	b.n	800644a <setCommand+0x78e>
			temp81 = FRIDAY;
 80064b6:	2705      	movs	r7, #5
 80064b8:	e7c7      	b.n	800644a <setCommand+0x78e>
			temp81 = SATURDAY;
 80064ba:	2706      	movs	r7, #6
 80064bc:	e7c5      	b.n	800644a <setCommand+0x78e>
			temp81 = SUNDAY;
 80064be:	2707      	movs	r7, #7
 80064c0:	e7c3      	b.n	800644a <setCommand+0x78e>
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	20001288 	.word	0x20001288
 80064c8:	08019508 	.word	0x08019508
 80064cc:	fffff830 	.word	0xfffff830
 80064d0:	20006940 	.word	0x20006940

080064d4 <removebuttonCommand>:
{
 80064d4:	b530      	push	{r4, r5, lr}
 80064d6:	b083      	sub	sp, #12
 80064d8:	0005      	movs	r5, r0
 80064da:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 80064dc:	2300      	movs	r3, #0
 80064de:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	d010      	beq.n	8006506 <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80064e4:	aa01      	add	r2, sp, #4
 80064e6:	2101      	movs	r1, #1
 80064e8:	f006 fcfe 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80064ec:	2300      	movs	r3, #0
 80064ee:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 80064f0:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 80064f2:	2b70      	cmp	r3, #112	; 0x70
 80064f4:	d009      	beq.n	800650a <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 80064f6:	0020      	movs	r0, r4
 80064f8:	f001 fdd2 	bl	80080a0 <RemovePortButton>
	if (result == BOS_OK) 
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d009      	beq.n	8006514 <removebuttonCommand+0x40>
}
 8006500:	2000      	movs	r0, #0
 8006502:	b003      	add	sp, #12
 8006504:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8006506:	b672      	cpsid	i
 8006508:	e7fe      	b.n	8006508 <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800650a:	3001      	adds	r0, #1
 800650c:	f00b fb67 	bl	8011bde <atol>
 8006510:	b2c4      	uxtb	r4, r0
 8006512:	e7f0      	b.n	80064f6 <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006514:	0023      	movs	r3, r4
 8006516:	0022      	movs	r2, r4
 8006518:	4902      	ldr	r1, [pc, #8]	; (8006524 <removebuttonCommand+0x50>)
 800651a:	0028      	movs	r0, r5
 800651c:	f00b ffbe 	bl	801249c <sprintf>
 8006520:	e7ee      	b.n	8006500 <removebuttonCommand+0x2c>
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	080195a4 	.word	0x080195a4

08006528 <addbuttonCommand>:
{
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652a:	46c6      	mov	lr, r8
 800652c:	b500      	push	{lr}
 800652e:	b084      	sub	sp, #16
 8006530:	0006      	movs	r6, r0
 8006532:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006534:	2300      	movs	r3, #0
 8006536:	9303      	str	r3, [sp, #12]
 8006538:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 800653a:	2800      	cmp	r0, #0
 800653c:	d03d      	beq.n	80065ba <addbuttonCommand+0x92>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800653e:	aa03      	add	r2, sp, #12
 8006540:	2101      	movs	r1, #1
 8006542:	0038      	movs	r0, r7
 8006544:	f006 fcd0 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006548:	0005      	movs	r5, r0
 800654a:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <addbuttonCommand+0xb8>)
 800654c:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	4698      	mov	r8, r3
 8006552:	001a      	movs	r2, r3
 8006554:	4923      	ldr	r1, [pc, #140]	; (80065e4 <addbuttonCommand+0xbc>)
 8006556:	f00b ffe4 	bl	8012522 <strncmp>
		type = MOMENTARY_NO;
 800655a:	2401      	movs	r4, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 800655c:	2800      	cmp	r0, #0
 800655e:	d017      	beq.n	8006590 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006560:	4642      	mov	r2, r8
 8006562:	4921      	ldr	r1, [pc, #132]	; (80065e8 <addbuttonCommand+0xc0>)
 8006564:	0028      	movs	r0, r5
 8006566:	f00b ffdc 	bl	8012522 <strncmp>
		type = MOMENTARY_NC;
 800656a:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 800656c:	2800      	cmp	r0, #0
 800656e:	d00f      	beq.n	8006590 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006570:	4642      	mov	r2, r8
 8006572:	491e      	ldr	r1, [pc, #120]	; (80065ec <addbuttonCommand+0xc4>)
 8006574:	0028      	movs	r0, r5
 8006576:	f00b ffd4 	bl	8012522 <strncmp>
		type = ONOFF_NO;
 800657a:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 800657c:	2800      	cmp	r0, #0
 800657e:	d007      	beq.n	8006590 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006580:	4642      	mov	r2, r8
 8006582:	491b      	ldr	r1, [pc, #108]	; (80065f0 <addbuttonCommand+0xc8>)
 8006584:	0028      	movs	r0, r5
 8006586:	f00b ffcc 	bl	8012522 <strncmp>
		type = ONOFF_NC;
 800658a:	4244      	negs	r4, r0
 800658c:	4144      	adcs	r4, r0
 800658e:	00a4      	lsls	r4, r4, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006590:	aa02      	add	r2, sp, #8
 8006592:	2102      	movs	r1, #2
 8006594:	0038      	movs	r0, r7
 8006596:	f006 fca7 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800659a:	2300      	movs	r3, #0
 800659c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 800659e:	2500      	movs	r5, #0
	if (pcParameterString2[0] == 'p') {
 80065a0:	2b70      	cmp	r3, #112	; 0x70
 80065a2:	d00c      	beq.n	80065be <addbuttonCommand+0x96>
	result = AddPortButton(type, port);
 80065a4:	0029      	movs	r1, r5
 80065a6:	0020      	movs	r0, r4
 80065a8:	f001 fce8 	bl	8007f7c <AddPortButton>
	if (result == BOS_OK) 
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d00b      	beq.n	80065c8 <addbuttonCommand+0xa0>
}
 80065b0:	2000      	movs	r0, #0
 80065b2:	b004      	add	sp, #16
 80065b4:	bc80      	pop	{r7}
 80065b6:	46b8      	mov	r8, r7
 80065b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80065ba:	b672      	cpsid	i
 80065bc:	e7fe      	b.n	80065bc <addbuttonCommand+0x94>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80065be:	3001      	adds	r0, #1
 80065c0:	f00b fb0d 	bl	8011bde <atol>
 80065c4:	b2c5      	uxtb	r5, r0
 80065c6:	e7ed      	b.n	80065a4 <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <addbuttonCommand+0xb8>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	2300      	movs	r3, #0
 80065ce:	9903      	ldr	r1, [sp, #12]
 80065d0:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 80065d2:	9500      	str	r5, [sp, #0]
 80065d4:	002b      	movs	r3, r5
 80065d6:	4907      	ldr	r1, [pc, #28]	; (80065f4 <addbuttonCommand+0xcc>)
 80065d8:	0030      	movs	r0, r6
 80065da:	f00b ff5f 	bl	801249c <sprintf>
 80065de:	e7e7      	b.n	80065b0 <addbuttonCommand+0x88>
 80065e0:	20001270 	.word	0x20001270
 80065e4:	080195cc 	.word	0x080195cc
 80065e8:	080195dc 	.word	0x080195dc
 80065ec:	080195ec 	.word	0x080195ec
 80065f0:	080195f8 	.word	0x080195f8
 80065f4:	08019604 	.word	0x08019604

080065f8 <scastCommand>:
{
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fa:	46de      	mov	lr, fp
 80065fc:	4657      	mov	r7, sl
 80065fe:	464e      	mov	r6, r9
 8006600:	4645      	mov	r5, r8
 8006602:	b5e0      	push	{r5, r6, r7, lr}
 8006604:	b099      	sub	sp, #100	; 0x64
 8006606:	0006      	movs	r6, r0
 8006608:	9007      	str	r0, [sp, #28]
 800660a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 800660c:	2500      	movs	r5, #0
 800660e:	9517      	str	r5, [sp, #92]	; 0x5c
 8006610:	9516      	str	r5, [sp, #88]	; 0x58
 8006612:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006614:	9514      	str	r5, [sp, #80]	; 0x50
 8006616:	9513      	str	r5, [sp, #76]	; 0x4c
 8006618:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 800661a:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 800661c:	950e      	str	r5, [sp, #56]	; 0x38
 800661e:	2206      	movs	r2, #6
 8006620:	2100      	movs	r1, #0
 8006622:	a80f      	add	r0, sp, #60	; 0x3c
 8006624:	f00b fd45 	bl	80120b2 <memset>
 8006628:	950b      	str	r5, [sp, #44]	; 0x2c
 800662a:	2206      	movs	r2, #6
 800662c:	2100      	movs	r1, #0
 800662e:	a80c      	add	r0, sp, #48	; 0x30
 8006630:	f00b fd3f 	bl	80120b2 <memset>
 8006634:	9508      	str	r5, [sp, #32]
 8006636:	2206      	movs	r2, #6
 8006638:	2100      	movs	r1, #0
 800663a:	a809      	add	r0, sp, #36	; 0x24
 800663c:	f00b fd39 	bl	80120b2 <memset>
	configASSERT( pcWriteBuffer );
 8006640:	2e00      	cmp	r6, #0
 8006642:	d100      	bne.n	8006646 <scastCommand+0x4e>
 8006644:	e07c      	b.n	8006740 <scastCommand+0x148>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006646:	aa17      	add	r2, sp, #92	; 0x5c
 8006648:	2101      	movs	r1, #1
 800664a:	0020      	movs	r0, r4
 800664c:	f006 fc4c 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006650:	2300      	movs	r3, #0
 8006652:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006654:	2700      	movs	r7, #0
	if (pcParameterString1[0] == 'P') {
 8006656:	2b50      	cmp	r3, #80	; 0x50
 8006658:	d100      	bne.n	800665c <scastCommand+0x64>
 800665a:	e073      	b.n	8006744 <scastCommand+0x14c>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800665c:	aa16      	add	r2, sp, #88	; 0x58
 800665e:	2102      	movs	r1, #2
 8006660:	0020      	movs	r0, r4
 8006662:	f006 fc41 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006666:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006668:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800666a:	a80e      	add	r0, sp, #56	; 0x38
 800666c:	f00b ff6a 	bl	8012544 <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006670:	a80e      	add	r0, sp, #56	; 0x38
 8006672:	f7fd faed 	bl	8003c50 <GetID>
 8006676:	b2c3      	uxtb	r3, r0
 8006678:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800667a:	aa15      	add	r2, sp, #84	; 0x54
 800667c:	2103      	movs	r1, #3
 800667e:	0020      	movs	r0, r4
 8006680:	f006 fc32 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006684:	2300      	movs	r3, #0
 8006686:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006688:	2200      	movs	r2, #0
 800668a:	4690      	mov	r8, r2
	if (pcParameterString3[0] == 'p') {
 800668c:	2b70      	cmp	r3, #112	; 0x70
 800668e:	d05e      	beq.n	800674e <scastCommand+0x156>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006690:	aa14      	add	r2, sp, #80	; 0x50
 8006692:	2104      	movs	r1, #4
 8006694:	0020      	movs	r0, r4
 8006696:	f006 fc27 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 800669a:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 800669c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800669e:	a80b      	add	r0, sp, #44	; 0x2c
 80066a0:	f00b ff50 	bl	8012544 <strncpy>
	dstM = (uint8_t) GetID(par2);
 80066a4:	a80b      	add	r0, sp, #44	; 0x2c
 80066a6:	f7fd fad3 	bl	8003c50 <GetID>
 80066aa:	b2c3      	uxtb	r3, r0
 80066ac:	4699      	mov	r9, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80066ae:	aa13      	add	r2, sp, #76	; 0x4c
 80066b0:	2105      	movs	r1, #5
 80066b2:	0020      	movs	r0, r4
 80066b4:	f006 fc18 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 80066b8:	0006      	movs	r6, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80066ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066bc:	469a      	mov	sl, r3
 80066be:	001a      	movs	r2, r3
 80066c0:	492d      	ldr	r1, [pc, #180]	; (8006778 <scastCommand+0x180>)
 80066c2:	f00b ff2e 	bl	8012522 <strncmp>
		direction = FORWARD;
 80066c6:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d00f      	beq.n	80066ec <scastCommand+0xf4>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80066cc:	4652      	mov	r2, sl
 80066ce:	492b      	ldr	r1, [pc, #172]	; (800677c <scastCommand+0x184>)
 80066d0:	0030      	movs	r0, r6
 80066d2:	f00b ff26 	bl	8012522 <strncmp>
		direction = BACKWARD;
 80066d6:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80066d8:	2800      	cmp	r0, #0
 80066da:	d007      	beq.n	80066ec <scastCommand+0xf4>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 80066dc:	4652      	mov	r2, sl
 80066de:	4928      	ldr	r1, [pc, #160]	; (8006780 <scastCommand+0x188>)
 80066e0:	0030      	movs	r0, r6
 80066e2:	f00b ff1e 	bl	8012522 <strncmp>
		direction = BIDIRECTIONAL;
 80066e6:	4245      	negs	r5, r0
 80066e8:	4145      	adcs	r5, r0
 80066ea:	006d      	lsls	r5, r5, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 80066ec:	4652      	mov	r2, sl
 80066ee:	0031      	movs	r1, r6
 80066f0:	a808      	add	r0, sp, #32
 80066f2:	f00b ff27 	bl	8012544 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 80066f6:	aa12      	add	r2, sp, #72	; 0x48
 80066f8:	2106      	movs	r1, #6
 80066fa:	0020      	movs	r0, r4
 80066fc:	f006 fbf4 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006700:	f00b fa6d 	bl	8011bde <atol>
 8006704:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8006706:	aa11      	add	r2, sp, #68	; 0x44
 8006708:	2107      	movs	r1, #7
 800670a:	0020      	movs	r0, r4
 800670c:	f006 fbec 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006710:	f00b fa65 	bl	8011bde <atol>
 8006714:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8006716:	2300      	movs	r3, #0
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	9002      	str	r0, [sp, #8]
 800671c:	9601      	str	r6, [sp, #4]
 800671e:	9500      	str	r5, [sp, #0]
 8006720:	464b      	mov	r3, r9
 8006722:	4642      	mov	r2, r8
 8006724:	4659      	mov	r1, fp
 8006726:	0038      	movs	r0, r7
 8006728:	f002 fa72 	bl	8008c10 <StartScastDMAStream>
	if (result == BOS_OK) 
 800672c:	2800      	cmp	r0, #0
 800672e:	d014      	beq.n	800675a <scastCommand+0x162>
}
 8006730:	2000      	movs	r0, #0
 8006732:	b019      	add	sp, #100	; 0x64
 8006734:	bcf0      	pop	{r4, r5, r6, r7}
 8006736:	46bb      	mov	fp, r7
 8006738:	46b2      	mov	sl, r6
 800673a:	46a9      	mov	r9, r5
 800673c:	46a0      	mov	r8, r4
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006740:	b672      	cpsid	i
 8006742:	e7fe      	b.n	8006742 <scastCommand+0x14a>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006744:	3001      	adds	r0, #1
 8006746:	f00b fa4a 	bl	8011bde <atol>
 800674a:	b2c7      	uxtb	r7, r0
 800674c:	e786      	b.n	800665c <scastCommand+0x64>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 800674e:	3001      	adds	r0, #1
 8006750:	f00b fa45 	bl	8011bde <atol>
 8006754:	b2c3      	uxtb	r3, r0
 8006756:	4698      	mov	r8, r3
 8006758:	e79a      	b.n	8006690 <scastCommand+0x98>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 800675a:	9404      	str	r4, [sp, #16]
 800675c:	9603      	str	r6, [sp, #12]
 800675e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006760:	9302      	str	r3, [sp, #8]
 8006762:	4643      	mov	r3, r8
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	ab0e      	add	r3, sp, #56	; 0x38
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	003b      	movs	r3, r7
 800676c:	aa08      	add	r2, sp, #32
 800676e:	4905      	ldr	r1, [pc, #20]	; (8006784 <scastCommand+0x18c>)
 8006770:	9807      	ldr	r0, [sp, #28]
 8006772:	f00b fe93 	bl	801249c <sprintf>
 8006776:	e7db      	b.n	8006730 <scastCommand+0x138>
 8006778:	08019638 	.word	0x08019638
 800677c:	08019640 	.word	0x08019640
 8006780:	0801964c 	.word	0x0801964c
 8006784:	0801965c 	.word	0x0801965c

08006788 <infoCommand>:
{
 8006788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678a:	b083      	sub	sp, #12
 800678c:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800678e:	d036      	beq.n	80067fe <infoCommand+0x76>
	if (N > 1)
 8006790:	4b27      	ldr	r3, [pc, #156]	; (8006830 <infoCommand+0xa8>)
 8006792:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8006794:	2500      	movs	r5, #0
	if (N > 1)
 8006796:	2b01      	cmp	r3, #1
 8006798:	d833      	bhi.n	8006802 <infoCommand+0x7a>
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800679a:	4b25      	ldr	r3, [pc, #148]	; (8006830 <infoCommand+0xa8>)
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	4925      	ldr	r1, [pc, #148]	; (8006834 <infoCommand+0xac>)
 80067a0:	0020      	movs	r0, r4
 80067a2:	f00b fe7b 	bl	801249c <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80067a6:	0020      	movs	r0, r4
 80067a8:	f7f9 fcb6 	bl	8000118 <strlen>
 80067ac:	b282      	uxth	r2, r0
 80067ae:	4e22      	ldr	r6, [pc, #136]	; (8006838 <infoCommand+0xb0>)
 80067b0:	7830      	ldrb	r0, [r6, #0]
 80067b2:	2701      	movs	r7, #1
 80067b4:	427f      	negs	r7, r7
 80067b6:	9700      	str	r7, [sp, #0]
 80067b8:	2332      	movs	r3, #50	; 0x32
 80067ba:	0021      	movs	r1, r4
 80067bc:	f006 f93e 	bl	800ca3c <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 80067c0:	2213      	movs	r2, #19
 80067c2:	491e      	ldr	r1, [pc, #120]	; (800683c <infoCommand+0xb4>)
 80067c4:	0020      	movs	r0, r4
 80067c6:	f00b fc6b 	bl	80120a0 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80067ca:	0020      	movs	r0, r4
 80067cc:	f7f9 fca4 	bl	8000118 <strlen>
 80067d0:	b282      	uxth	r2, r0
 80067d2:	7830      	ldrb	r0, [r6, #0]
 80067d4:	9700      	str	r7, [sp, #0]
 80067d6:	2332      	movs	r3, #50	; 0x32
 80067d8:	0021      	movs	r1, r4
 80067da:	f006 f92f 	bl	800ca3c <writePxMutex>
	DisplayTopology(PcPort);
 80067de:	7830      	ldrb	r0, [r6, #0]
 80067e0:	f7fc ff7e 	bl	80036e0 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80067e4:	7830      	ldrb	r0, [r6, #0]
 80067e6:	f7fd f853 	bl	8003890 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 80067ea:	2d02      	cmp	r5, #2
 80067ec:	d00d      	beq.n	800680a <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 80067ee:	2202      	movs	r2, #2
 80067f0:	4913      	ldr	r1, [pc, #76]	; (8006840 <infoCommand+0xb8>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00b fc54 	bl	80120a0 <memcpy>
}
 80067f8:	2000      	movs	r0, #0
 80067fa:	b003      	add	sp, #12
 80067fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80067fe:	b672      	cpsid	i
 8006800:	e7fe      	b.n	8006800 <infoCommand+0x78>
		result = ReadPortsDir();
 8006802:	f7fd fb6f 	bl	8003ee4 <ReadPortsDir>
 8006806:	0005      	movs	r5, r0
 8006808:	e7c7      	b.n	800679a <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 800680a:	2244      	movs	r2, #68	; 0x44
 800680c:	490d      	ldr	r1, [pc, #52]	; (8006844 <infoCommand+0xbc>)
 800680e:	0020      	movs	r0, r4
 8006810:	f00b fc46 	bl	80120a0 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8006814:	0020      	movs	r0, r4
 8006816:	f7f9 fc7f 	bl	8000118 <strlen>
 800681a:	b282      	uxth	r2, r0
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <infoCommand+0xb0>)
 800681e:	7818      	ldrb	r0, [r3, #0]
 8006820:	003b      	movs	r3, r7
 8006822:	9700      	str	r7, [sp, #0]
 8006824:	3333      	adds	r3, #51	; 0x33
 8006826:	0021      	movs	r1, r4
 8006828:	f006 f908 	bl	800ca3c <writePxMutex>
 800682c:	e7df      	b.n	80067ee <infoCommand+0x66>
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	2000001c 	.word	0x2000001c
 8006834:	080196e4 	.word	0x080196e4
 8006838:	20000a7f 	.word	0x20000a7f
 800683c:	08019700 	.word	0x08019700
 8006840:	08018478 	.word	0x08018478
 8006844:	08019714 	.word	0x08019714

08006848 <statusCommand>:
{
 8006848:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800684a:	2800      	cmp	r0, #0
 800684c:	d004      	beq.n	8006858 <statusCommand+0x10>
	DisplayModuleStatus(0);
 800684e:	2000      	movs	r0, #0
 8006850:	f7fd f894 	bl	800397c <DisplayModuleStatus>
}
 8006854:	2000      	movs	r0, #0
 8006856:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006858:	b672      	cpsid	i
 800685a:	e7fe      	b.n	800685a <statusCommand+0x12>

0800685c <groupCommand>:
{
 800685c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685e:	46ce      	mov	lr, r9
 8006860:	4647      	mov	r7, r8
 8006862:	b580      	push	{r7, lr}
 8006864:	b08f      	sub	sp, #60	; 0x3c
 8006866:	0004      	movs	r4, r0
 8006868:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 800686a:	2500      	movs	r5, #0
 800686c:	9504      	str	r5, [sp, #16]
 800686e:	2223      	movs	r2, #35	; 0x23
 8006870:	2100      	movs	r1, #0
 8006872:	a805      	add	r0, sp, #20
 8006874:	f00b fc1d 	bl	80120b2 <memset>
 8006878:	9501      	str	r5, [sp, #4]
 800687a:	2206      	movs	r2, #6
 800687c:	2100      	movs	r1, #0
 800687e:	a802      	add	r0, sp, #8
 8006880:	f00b fc17 	bl	80120b2 <memset>
	configASSERT( pcWriteBuffer );
 8006884:	2c00      	cmp	r4, #0
 8006886:	d02c      	beq.n	80068e2 <groupCommand+0x86>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006888:	4d56      	ldr	r5, [pc, #344]	; (80069e4 <groupCommand+0x188>)
 800688a:	002a      	movs	r2, r5
 800688c:	2101      	movs	r1, #1
 800688e:	0030      	movs	r0, r6
 8006890:	f006 fb2a 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006894:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 8006896:	682a      	ldr	r2, [r5, #0]
 8006898:	a801      	add	r0, sp, #4
 800689a:	f00b fe53 	bl	8012544 <strncpy>
 800689e:	4d52      	ldr	r5, [pc, #328]	; (80069e8 <groupCommand+0x18c>)
 80068a0:	002f      	movs	r7, r5
 80068a2:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 80068a4:	0029      	movs	r1, r5
 80068a6:	a801      	add	r0, sp, #4
 80068a8:	f7f9 fc2c 	bl	8000104 <strcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d01a      	beq.n	80068e6 <groupCommand+0x8a>
 80068b0:	350a      	adds	r5, #10
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 80068b2:	42af      	cmp	r7, r5
 80068b4:	d1f6      	bne.n	80068a4 <groupCommand+0x48>
	type = 1;
 80068b6:	2701      	movs	r7, #1
	count = 2;
 80068b8:	4b4c      	ldr	r3, [pc, #304]	; (80069ec <groupCommand+0x190>)
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 80068be:	3208      	adds	r2, #8
 80068c0:	494b      	ldr	r1, [pc, #300]	; (80069f0 <groupCommand+0x194>)
 80068c2:	0020      	movs	r0, r4
 80068c4:	f00b fbec 	bl	80120a0 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 80068c8:	4a4a      	ldr	r2, [pc, #296]	; (80069f4 <groupCommand+0x198>)
 80068ca:	2102      	movs	r1, #2
 80068cc:	0030      	movs	r0, r6
 80068ce:	f006 fb0b 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 80068d2:	1e01      	subs	r1, r0, #0
 80068d4:	4b48      	ldr	r3, [pc, #288]	; (80069f8 <groupCommand+0x19c>)
 80068d6:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80068d8:	d100      	bne.n	80068dc <groupCommand+0x80>
 80068da:	e072      	b.n	80069c2 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80068dc:	4b45      	ldr	r3, [pc, #276]	; (80069f4 <groupCommand+0x198>)
 80068de:	4698      	mov	r8, r3
 80068e0:	e024      	b.n	800692c <groupCommand+0xd0>
	configASSERT( pcWriteBuffer );
 80068e2:	b672      	cpsid	i
 80068e4:	e7fe      	b.n	80068e4 <groupCommand+0x88>
			type = 0; break;
 80068e6:	2700      	movs	r7, #0
 80068e8:	e7e6      	b.n	80068b8 <groupCommand+0x5c>
	else if (count == 2)
 80068ea:	4b40      	ldr	r3, [pc, #256]	; (80069ec <groupCommand+0x190>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d03f      	beq.n	8006974 <groupCommand+0x118>
	} else if (result == BOS_ERR_Keyword)
 80068f4:	2806      	cmp	r0, #6
 80068f6:	d04d      	beq.n	8006994 <groupCommand+0x138>
	else if (result == BOS_ERR_ExistingAlias)
 80068f8:	2807      	cmp	r0, #7
 80068fa:	d051      	beq.n	80069a0 <groupCommand+0x144>
	else if (result == BOS_ERR_ExistingCmd)
 80068fc:	2808      	cmp	r0, #8
 80068fe:	d15a      	bne.n	80069b6 <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 8006900:	aa01      	add	r2, sp, #4
 8006902:	493e      	ldr	r1, [pc, #248]	; (80069fc <groupCommand+0x1a0>)
 8006904:	0020      	movs	r0, r4
 8006906:	f00b fdc9 	bl	801249c <sprintf>
 800690a:	e054      	b.n	80069b6 <groupCommand+0x15a>
		strcat( ( char * ) pcWriteBuffer, module);
 800690c:	a904      	add	r1, sp, #16
 800690e:	0020      	movs	r0, r4
 8006910:	f00b fde4 	bl	80124dc <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 8006914:	1c69      	adds	r1, r5, #1
 8006916:	b249      	sxtb	r1, r1
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <groupCommand+0x190>)
 800691a:	7019      	strb	r1, [r3, #0]
 800691c:	4a35      	ldr	r2, [pc, #212]	; (80069f4 <groupCommand+0x198>)
 800691e:	0030      	movs	r0, r6
 8006920:	f006 fae2 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006924:	1e01      	subs	r1, r0, #0
 8006926:	4b34      	ldr	r3, [pc, #208]	; (80069f8 <groupCommand+0x19c>)
 8006928:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 800692a:	d04a      	beq.n	80069c2 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 800692c:	4643      	mov	r3, r8
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4699      	mov	r9, r3
 8006932:	ad04      	add	r5, sp, #16
 8006934:	001a      	movs	r2, r3
 8006936:	0028      	movs	r0, r5
 8006938:	f00b fe04 	bl	8012544 <strncpy>
 800693c:	2300      	movs	r3, #0
 800693e:	464a      	mov	r2, r9
 8006940:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8006942:	0028      	movs	r0, r5
 8006944:	f7fd f984 	bl	8003c50 <GetID>
		if (modID < 0)	break;
 8006948:	2800      	cmp	r0, #0
 800694a:	db2f      	blt.n	80069ac <groupCommand+0x150>
		result = AddModuleToGroup(modID, alias);
 800694c:	b2c0      	uxtb	r0, r0
 800694e:	a901      	add	r1, sp, #4
 8006950:	f7fd fa46 	bl	8003de0 <AddModuleToGroup>
		if (result != BOS_OK)	break;
 8006954:	2800      	cmp	r0, #0
 8006956:	d1c8      	bne.n	80068ea <groupCommand+0x8e>
		if (count > 2)
 8006958:	4b24      	ldr	r3, [pc, #144]	; (80069ec <groupCommand+0x190>)
 800695a:	2500      	movs	r5, #0
 800695c:	575d      	ldrsb	r5, [r3, r5]
 800695e:	2d02      	cmp	r5, #2
 8006960:	ddd4      	ble.n	800690c <groupCommand+0xb0>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 8006962:	0020      	movs	r0, r4
 8006964:	f7f9 fbd8 	bl	8000118 <strlen>
 8006968:	1820      	adds	r0, r4, r0
 800696a:	2203      	movs	r2, #3
 800696c:	4924      	ldr	r1, [pc, #144]	; (8006a00 <groupCommand+0x1a4>)
 800696e:	f00b fb97 	bl	80120a0 <memcpy>
 8006972:	e7cb      	b.n	800690c <groupCommand+0xb0>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8006974:	aa01      	add	r2, sp, #4
 8006976:	4923      	ldr	r1, [pc, #140]	; (8006a04 <groupCommand+0x1a8>)
 8006978:	0020      	movs	r0, r4
 800697a:	f00b fd8f 	bl	801249c <sprintf>
 800697e:	e01a      	b.n	80069b6 <groupCommand+0x15a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006980:	aa01      	add	r2, sp, #4
 8006982:	4921      	ldr	r1, [pc, #132]	; (8006a08 <groupCommand+0x1ac>)
 8006984:	a804      	add	r0, sp, #16
 8006986:	f00b fd89 	bl	801249c <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800698a:	a904      	add	r1, sp, #16
 800698c:	0020      	movs	r0, r4
 800698e:	f00b fda5 	bl	80124dc <strcat>
 8006992:	e010      	b.n	80069b6 <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 8006994:	aa01      	add	r2, sp, #4
 8006996:	491d      	ldr	r1, [pc, #116]	; (8006a0c <groupCommand+0x1b0>)
 8006998:	0020      	movs	r0, r4
 800699a:	f00b fd7f 	bl	801249c <sprintf>
 800699e:	e00a      	b.n	80069b6 <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 80069a0:	aa01      	add	r2, sp, #4
 80069a2:	491b      	ldr	r1, [pc, #108]	; (8006a10 <groupCommand+0x1b4>)
 80069a4:	0020      	movs	r0, r4
 80069a6:	f00b fd79 	bl	801249c <sprintf>
 80069aa:	e004      	b.n	80069b6 <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 80069ac:	aa04      	add	r2, sp, #16
 80069ae:	4919      	ldr	r1, [pc, #100]	; (8006a14 <groupCommand+0x1b8>)
 80069b0:	0020      	movs	r0, r4
 80069b2:	f00b fd73 	bl	801249c <sprintf>
}
 80069b6:	2000      	movs	r0, #0
 80069b8:	b00f      	add	sp, #60	; 0x3c
 80069ba:	bcc0      	pop	{r6, r7}
 80069bc:	46b9      	mov	r9, r7
 80069be:	46b0      	mov	r8, r6
 80069c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <groupCommand+0x190>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b25b      	sxtb	r3, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d0d3      	beq.n	8006974 <groupCommand+0x118>
	else if (result == BOS_OK && type) {
 80069cc:	2f00      	cmp	r7, #0
 80069ce:	d1d7      	bne.n	8006980 <groupCommand+0x124>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 80069d0:	aa01      	add	r2, sp, #4
 80069d2:	4911      	ldr	r1, [pc, #68]	; (8006a18 <groupCommand+0x1bc>)
 80069d4:	a804      	add	r0, sp, #16
 80069d6:	f00b fd61 	bl	801249c <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 80069da:	a904      	add	r1, sp, #16
 80069dc:	0020      	movs	r0, r4
 80069de:	f00b fd7d 	bl	80124dc <strcat>
 80069e2:	e7e8      	b.n	80069b6 <groupCommand+0x15a>
 80069e4:	200012a0 	.word	0x200012a0
 80069e8:	20000e4c 	.word	0x20000e4c
 80069ec:	20001266 	.word	0x20001266
 80069f0:	08019758 	.word	0x08019758
 80069f4:	20001294 	.word	0x20001294
 80069f8:	20001268 	.word	0x20001268
 80069fc:	08019844 	.word	0x08019844
 8006a00:	08019764 	.word	0x08019764
 8006a04:	08019768 	.word	0x08019768
 8006a08:	08019794 	.word	0x08019794
 8006a0c:	080197d0 	.word	0x080197d0
 8006a10:	08019810 	.word	0x08019810
 8006a14:	08019884 	.word	0x08019884
 8006a18:	080197b0 	.word	0x080197b0

08006a1c <nameCommand>:
{
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	0004      	movs	r4, r0
 8006a20:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 8006a22:	2c00      	cmp	r4, #0
 8006a24:	d01a      	beq.n	8006a5c <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006a26:	4d1d      	ldr	r5, [pc, #116]	; (8006a9c <nameCommand+0x80>)
 8006a28:	002a      	movs	r2, r5
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	f006 fa5c 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006a30:	0001      	movs	r1, r0
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <nameCommand+0x84>)
 8006a34:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	2b09      	cmp	r3, #9
 8006a3a:	dd01      	ble.n	8006a40 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <nameCommand+0x88>)
 8006a42:	7818      	ldrb	r0, [r3, #0]
 8006a44:	f7fd f968 	bl	8003d18 <NameModule>
	if (result == BOS_OK)
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d009      	beq.n	8006a60 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006a4c:	2806      	cmp	r0, #6
 8006a4e:	d010      	beq.n	8006a72 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006a50:	2807      	cmp	r0, #7
 8006a52:	d015      	beq.n	8006a80 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8006a54:	2808      	cmp	r0, #8
 8006a56:	d01a      	beq.n	8006a8e <nameCommand+0x72>
}
 8006a58:	2000      	movs	r0, #0
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006a5c:	b672      	cpsid	i
 8006a5e:	e7fe      	b.n	8006a5e <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <nameCommand+0x84>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a0f      	ldr	r2, [pc, #60]	; (8006aa4 <nameCommand+0x88>)
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	490f      	ldr	r1, [pc, #60]	; (8006aa8 <nameCommand+0x8c>)
 8006a6a:	0020      	movs	r0, r4
 8006a6c:	f00b fd16 	bl	801249c <sprintf>
 8006a70:	e7f2      	b.n	8006a58 <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8006a72:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <nameCommand+0x84>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	490d      	ldr	r1, [pc, #52]	; (8006aac <nameCommand+0x90>)
 8006a78:	0020      	movs	r0, r4
 8006a7a:	f00b fd0f 	bl	801249c <sprintf>
 8006a7e:	e7eb      	b.n	8006a58 <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <nameCommand+0x84>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	490a      	ldr	r1, [pc, #40]	; (8006ab0 <nameCommand+0x94>)
 8006a86:	0020      	movs	r0, r4
 8006a88:	f00b fd08 	bl	801249c <sprintf>
 8006a8c:	e7e4      	b.n	8006a58 <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <nameCommand+0x84>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4908      	ldr	r1, [pc, #32]	; (8006ab4 <nameCommand+0x98>)
 8006a94:	0020      	movs	r0, r4
 8006a96:	f00b fd01 	bl	801249c <sprintf>
 8006a9a:	e7dd      	b.n	8006a58 <nameCommand+0x3c>
 8006a9c:	2000129c 	.word	0x2000129c
 8006aa0:	2000126c 	.word	0x2000126c
 8006aa4:	2000105c 	.word	0x2000105c
 8006aa8:	080198a8 	.word	0x080198a8
 8006aac:	080197d0 	.word	0x080197d0
 8006ab0:	08019810 	.word	0x08019810
 8006ab4:	08019844 	.word	0x08019844

08006ab8 <bootloaderUpdateCommand>:
{
 8006ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aba:	46c6      	mov	lr, r8
 8006abc:	b500      	push	{lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	0004      	movs	r4, r0
 8006ac2:	0017      	movs	r7, r2
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d04f      	beq.n	8006b6c <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006acc:	4a4d      	ldr	r2, [pc, #308]	; (8006c04 <bootloaderUpdateCommand+0x14c>)
 8006ace:	2101      	movs	r1, #1
 8006ad0:	0038      	movs	r0, r7
 8006ad2:	f006 fa09 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d04a      	beq.n	8006b70 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 8006ada:	4b4a      	ldr	r3, [pc, #296]	; (8006c04 <bootloaderUpdateCommand+0x14c>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	494a      	ldr	r1, [pc, #296]	; (8006c08 <bootloaderUpdateCommand+0x150>)
 8006ae0:	f00b fd1f 	bl	8012522 <strncmp>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d137      	bne.n	8006b58 <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006ae8:	4a48      	ldr	r2, [pc, #288]	; (8006c0c <bootloaderUpdateCommand+0x154>)
 8006aea:	2102      	movs	r1, #2
 8006aec:	0038      	movs	r0, r7
 8006aee:	f006 f9fb 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006af2:	4b47      	ldr	r3, [pc, #284]	; (8006c10 <bootloaderUpdateCommand+0x158>)
 8006af4:	4698      	mov	r8, r3
 8006af6:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006af8:	4a46      	ldr	r2, [pc, #280]	; (8006c14 <bootloaderUpdateCommand+0x15c>)
 8006afa:	2103      	movs	r1, #3
 8006afc:	0038      	movs	r0, r7
 8006afe:	f006 f9f3 	bl	800cee8 <FreeRTOS_CLIGetParameter>
 8006b02:	4b45      	ldr	r3, [pc, #276]	; (8006c18 <bootloaderUpdateCommand+0x160>)
 8006b04:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 8006b06:	4643      	mov	r3, r8
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8006b0e:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8006b10:	2b23      	cmp	r3, #35	; 0x23
 8006b12:	d057      	beq.n	8006bc4 <bootloaderUpdateCommand+0x10c>
			if (pcParameterString3[0] == 'p') {
 8006b14:	4b40      	ldr	r3, [pc, #256]	; (8006c18 <bootloaderUpdateCommand+0x160>)
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	56c3      	ldrsb	r3, [r0, r3]
 8006b1c:	2b70      	cmp	r3, #112	; 0x70
 8006b1e:	d057      	beq.n	8006bd0 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 8006b20:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8006b22:	4b3e      	ldr	r3, [pc, #248]	; (8006c1c <bootloaderUpdateCommand+0x164>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	42b3      	cmp	r3, r6
 8006b28:	d057      	beq.n	8006bda <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 8006b2a:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <bootloaderUpdateCommand+0x168>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8006b30:	4b3c      	ldr	r3, [pc, #240]	; (8006c24 <bootloaderUpdateCommand+0x16c>)
 8006b32:	701d      	strb	r5, [r3, #0]
 8006b34:	3201      	adds	r2, #1
 8006b36:	211a      	movs	r1, #26
 8006b38:	0030      	movs	r0, r6
 8006b3a:	f002 f843 	bl	8008bc4 <SendMessageToModule>
				osDelay(100);			
 8006b3e:	2064      	movs	r0, #100	; 0x64
 8006b40:	f006 f8ab 	bl	800cc9a <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8006b44:	4b38      	ldr	r3, [pc, #224]	; (8006c28 <bootloaderUpdateCommand+0x170>)
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <bootloaderUpdateCommand+0x164>)
 8006b4a:	7818      	ldrb	r0, [r3, #0]
 8006b4c:	002b      	movs	r3, r5
 8006b4e:	0031      	movs	r1, r6
 8006b50:	f7fc fd44 	bl	80035dc <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006b54:	2f68      	cmp	r7, #104	; 0x68
 8006b56:	d104      	bne.n	8006b62 <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8006b58:	220f      	movs	r2, #15
 8006b5a:	4934      	ldr	r1, [pc, #208]	; (8006c2c <bootloaderUpdateCommand+0x174>)
 8006b5c:	0020      	movs	r0, r4
 8006b5e:	f00b fa9f 	bl	80120a0 <memcpy>
}
 8006b62:	2000      	movs	r0, #0
 8006b64:	b002      	add	sp, #8
 8006b66:	bc80      	pop	{r7}
 8006b68:	46b8      	mov	r8, r7
 8006b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006b6c:	b672      	cpsid	i
 8006b6e:	e7fe      	b.n	8006b6e <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8006b70:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <bootloaderUpdateCommand+0x164>)
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	492e      	ldr	r1, [pc, #184]	; (8006c30 <bootloaderUpdateCommand+0x178>)
 8006b76:	0020      	movs	r0, r4
 8006b78:	f00b fc90 	bl	801249c <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <bootloaderUpdateCommand+0x17c>)
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	0020      	movs	r0, r4
 8006b82:	f00b fcab 	bl	80124dc <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006b86:	0020      	movs	r0, r4
 8006b88:	f7f9 fac6 	bl	8000118 <strlen>
 8006b8c:	b282      	uxth	r2, r0
 8006b8e:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <bootloaderUpdateCommand+0x170>)
 8006b90:	7818      	ldrb	r0, [r3, #0]
 8006b92:	2301      	movs	r3, #1
 8006b94:	425b      	negs	r3, r3
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	3333      	adds	r3, #51	; 0x33
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	f005 ff4e 	bl	800ca3c <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <bootloaderUpdateCommand+0x180>)
 8006ba2:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <bootloaderUpdateCommand+0x184>)
 8006ba4:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006ba6:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <bootloaderUpdateCommand+0x188>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006bac:	200a      	movs	r0, #10
 8006bae:	f006 f874 	bl	800cc9a <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	4b23      	ldr	r3, [pc, #140]	; (8006c44 <bootloaderUpdateCommand+0x18c>)
 8006bb8:	4a23      	ldr	r2, [pc, #140]	; (8006c48 <bootloaderUpdateCommand+0x190>)
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	e7fd      	b.n	8006bc0 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	f00b f80a 	bl	8011bde <atol>
 8006bca:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006bcc:	2700      	movs	r7, #0
 8006bce:	e7a1      	b.n	8006b14 <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f00b f804 	bl	8011bde <atol>
 8006bd6:	b2c5      	uxtb	r5, r0
 8006bd8:	e7a3      	b.n	8006b22 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	3319      	adds	r3, #25
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	0028      	movs	r0, r5
 8006be6:	f001 fdc5 	bl	8008774 <SendMessageFromPort>
				osDelay(100);
 8006bea:	2064      	movs	r0, #100	; 0x64
 8006bec:	f006 f855 	bl	800cc9a <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <bootloaderUpdateCommand+0x164>)
 8006bf2:	7818      	ldrb	r0, [r3, #0]
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <bootloaderUpdateCommand+0x170>)
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	002b      	movs	r3, r5
 8006bfa:	0001      	movs	r1, r0
 8006bfc:	f7fc fcee 	bl	80035dc <remoteBootloaderUpdate>
 8006c00:	e7a8      	b.n	8006b54 <bootloaderUpdateCommand+0x9c>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	20001298 	.word	0x20001298
 8006c08:	080198e0 	.word	0x080198e0
 8006c0c:	200012a4 	.word	0x200012a4
 8006c10:	2000127c 	.word	0x2000127c
 8006c14:	200012a8 	.word	0x200012a8
 8006c18:	20001284 	.word	0x20001284
 8006c1c:	2000105c 	.word	0x2000105c
 8006c20:	20006940 	.word	0x20006940
 8006c24:	20000f28 	.word	0x20000f28
 8006c28:	20000a7f 	.word	0x20000a7f
 8006c2c:	08019368 	.word	0x08019368
 8006c30:	080198c0 	.word	0x080198c0
 8006c34:	20000074 	.word	0x20000074
 8006c38:	20007ff0 	.word	0x20007ff0
 8006c3c:	deadbeef 	.word	0xdeadbeef
 8006c40:	20000ee2 	.word	0x20000ee2
 8006c44:	e000ed00 	.word	0xe000ed00
 8006c48:	05fa0004 	.word	0x05fa0004

08006c4c <pingCommand>:
{
 8006c4c:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d01d      	beq.n	8006c8e <pingCommand+0x42>
	if (!moduleAlias[myID][0])
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <pingCommand+0x58>)
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	0093      	lsls	r3, r2, #2
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4912      	ldr	r1, [pc, #72]	; (8006ca8 <pingCommand+0x5c>)
 8006c5e:	5c5b      	ldrb	r3, [r3, r1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d116      	bne.n	8006c92 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8006c64:	4911      	ldr	r1, [pc, #68]	; (8006cac <pingCommand+0x60>)
 8006c66:	f00b fc19 	bl	801249c <sprintf>
	RTOS_IND_blink(200);	
 8006c6a:	2580      	movs	r5, #128	; 0x80
 8006c6c:	01ed      	lsls	r5, r5, #7
 8006c6e:	4c10      	ldr	r4, [pc, #64]	; (8006cb0 <pingCommand+0x64>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	0029      	movs	r1, r5
 8006c74:	0020      	movs	r0, r4
 8006c76:	f009 f965 	bl	800ff44 <HAL_GPIO_WritePin>
 8006c7a:	20c8      	movs	r0, #200	; 0xc8
 8006c7c:	f006 f80d 	bl	800cc9a <osDelay>
 8006c80:	2200      	movs	r2, #0
 8006c82:	0029      	movs	r1, r5
 8006c84:	0020      	movs	r0, r4
 8006c86:	f009 f95d 	bl	800ff44 <HAL_GPIO_WritePin>
}
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006c8e:	b672      	cpsid	i
 8006c90:	e7fe      	b.n	8006c90 <pingCommand+0x44>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8006c92:	0093      	lsls	r3, r2, #2
 8006c94:	189b      	adds	r3, r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4903      	ldr	r1, [pc, #12]	; (8006ca8 <pingCommand+0x5c>)
 8006c9a:	185b      	adds	r3, r3, r1
 8006c9c:	4905      	ldr	r1, [pc, #20]	; (8006cb4 <pingCommand+0x68>)
 8006c9e:	f00b fbfd 	bl	801249c <sprintf>
 8006ca2:	e7e2      	b.n	8006c6a <pingCommand+0x1e>
 8006ca4:	2000105c 	.word	0x2000105c
 8006ca8:	20000f58 	.word	0x20000f58
 8006cac:	080198e4 	.word	0x080198e4
 8006cb0:	48000400 	.word	0x48000400
 8006cb4:	080198f8 	.word	0x080198f8

08006cb8 <prvRunTimeStatsCommand>:
{
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006cbc:	d009      	beq.n	8006cd2 <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8006cbe:	2251      	movs	r2, #81	; 0x51
 8006cc0:	4905      	ldr	r1, [pc, #20]	; (8006cd8 <prvRunTimeStatsCommand+0x20>)
 8006cc2:	f00b f9ed 	bl	80120a0 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	3050      	adds	r0, #80	; 0x50
 8006cca:	f007 fb93 	bl	800e3f4 <vTaskGetRunTimeStats>
}
 8006cce:	2000      	movs	r0, #0
 8006cd0:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006cd2:	b672      	cpsid	i
 8006cd4:	e7fe      	b.n	8006cd4 <prvRunTimeStatsCommand+0x1c>
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	08019914 	.word	0x08019914

08006cdc <prvTaskStatsCommand>:
{
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006ce0:	d009      	beq.n	8006cf6 <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 8006ce2:	225b      	movs	r2, #91	; 0x5b
 8006ce4:	4905      	ldr	r1, [pc, #20]	; (8006cfc <prvTaskStatsCommand+0x20>)
 8006ce6:	f00b f9db 	bl	80120a0 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 8006cea:	0020      	movs	r0, r4
 8006cec:	305a      	adds	r0, #90	; 0x5a
 8006cee:	f007 fb13 	bl	800e318 <vTaskList>
}
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006cf6:	b672      	cpsid	i
 8006cf8:	e7fe      	b.n	8006cf8 <prvTaskStatsCommand+0x1c>
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	08019968 	.word	0x08019968

08006d00 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d008      	beq.n	8006d16 <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <resetCommand+0x1c>)
 8006d0a:	4a05      	ldr	r2, [pc, #20]	; (8006d20 <resetCommand+0x20>)
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	e7fd      	b.n	8006d12 <resetCommand+0x12>
 8006d16:	b672      	cpsid	i
 8006d18:	e7fe      	b.n	8006d18 <resetCommand+0x18>
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	e000ed00 	.word	0xe000ed00
 8006d20:	05fa0004 	.word	0x05fa0004

08006d24 <RegisterUserCLICommands>:
}
 8006d24:	4770      	bx	lr
	...

08006d28 <vRegisterCLICommands>:
{
 8006d28:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 8006d2a:	482f      	ldr	r0, [pc, #188]	; (8006de8 <vRegisterCLICommands+0xc0>)
 8006d2c:	f006 f832 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8006d30:	482e      	ldr	r0, [pc, #184]	; (8006dec <vRegisterCLICommands+0xc4>)
 8006d32:	f006 f82f 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 8006d36:	482e      	ldr	r0, [pc, #184]	; (8006df0 <vRegisterCLICommands+0xc8>)
 8006d38:	f006 f82c 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8006d3c:	482d      	ldr	r0, [pc, #180]	; (8006df4 <vRegisterCLICommands+0xcc>)
 8006d3e:	f006 f829 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 8006d42:	482d      	ldr	r0, [pc, #180]	; (8006df8 <vRegisterCLICommands+0xd0>)
 8006d44:	f006 f826 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 8006d48:	482c      	ldr	r0, [pc, #176]	; (8006dfc <vRegisterCLICommands+0xd4>)
 8006d4a:	f006 f823 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8006d4e:	482c      	ldr	r0, [pc, #176]	; (8006e00 <vRegisterCLICommands+0xd8>)
 8006d50:	f006 f820 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 8006d54:	482b      	ldr	r0, [pc, #172]	; (8006e04 <vRegisterCLICommands+0xdc>)
 8006d56:	f006 f81d 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 8006d5a:	482b      	ldr	r0, [pc, #172]	; (8006e08 <vRegisterCLICommands+0xe0>)
 8006d5c:	f006 f81a 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 8006d60:	482a      	ldr	r0, [pc, #168]	; (8006e0c <vRegisterCLICommands+0xe4>)
 8006d62:	f006 f817 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 8006d66:	482a      	ldr	r0, [pc, #168]	; (8006e10 <vRegisterCLICommands+0xe8>)
 8006d68:	f006 f814 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8006d6c:	4829      	ldr	r0, [pc, #164]	; (8006e14 <vRegisterCLICommands+0xec>)
 8006d6e:	f006 f811 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 8006d72:	4829      	ldr	r0, [pc, #164]	; (8006e18 <vRegisterCLICommands+0xf0>)
 8006d74:	f006 f80e 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8006d78:	4828      	ldr	r0, [pc, #160]	; (8006e1c <vRegisterCLICommands+0xf4>)
 8006d7a:	f006 f80b 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8006d7e:	4828      	ldr	r0, [pc, #160]	; (8006e20 <vRegisterCLICommands+0xf8>)
 8006d80:	f006 f808 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8006d84:	4827      	ldr	r0, [pc, #156]	; (8006e24 <vRegisterCLICommands+0xfc>)
 8006d86:	f006 f805 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8006d8a:	4827      	ldr	r0, [pc, #156]	; (8006e28 <vRegisterCLICommands+0x100>)
 8006d8c:	f006 f802 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8006d90:	4826      	ldr	r0, [pc, #152]	; (8006e2c <vRegisterCLICommands+0x104>)
 8006d92:	f005 ffff 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8006d96:	4826      	ldr	r0, [pc, #152]	; (8006e30 <vRegisterCLICommands+0x108>)
 8006d98:	f005 fffc 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8006d9c:	4825      	ldr	r0, [pc, #148]	; (8006e34 <vRegisterCLICommands+0x10c>)
 8006d9e:	f005 fff9 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8006da2:	4825      	ldr	r0, [pc, #148]	; (8006e38 <vRegisterCLICommands+0x110>)
 8006da4:	f005 fff6 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8006da8:	4824      	ldr	r0, [pc, #144]	; (8006e3c <vRegisterCLICommands+0x114>)
 8006daa:	f005 fff3 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8006dae:	4824      	ldr	r0, [pc, #144]	; (8006e40 <vRegisterCLICommands+0x118>)
 8006db0:	f005 fff0 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8006db4:	4823      	ldr	r0, [pc, #140]	; (8006e44 <vRegisterCLICommands+0x11c>)
 8006db6:	f005 ffed 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8006dba:	4823      	ldr	r0, [pc, #140]	; (8006e48 <vRegisterCLICommands+0x120>)
 8006dbc:	f005 ffea 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8006dc0:	4822      	ldr	r0, [pc, #136]	; (8006e4c <vRegisterCLICommands+0x124>)
 8006dc2:	f005 ffe7 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8006dc6:	4822      	ldr	r0, [pc, #136]	; (8006e50 <vRegisterCLICommands+0x128>)
 8006dc8:	f005 ffe4 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8006dcc:	4821      	ldr	r0, [pc, #132]	; (8006e54 <vRegisterCLICommands+0x12c>)
 8006dce:	f005 ffe1 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 8006dd2:	4821      	ldr	r0, [pc, #132]	; (8006e58 <vRegisterCLICommands+0x130>)
 8006dd4:	f005 ffde 	bl	800cd94 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 8006dd8:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <vRegisterCLICommands+0x134>)
 8006dda:	221d      	movs	r2, #29
 8006ddc:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8006dde:	f003 feae 	bl	800ab3e <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8006de2:	f7ff ff9f 	bl	8006d24 <RegisterUserCLICommands>
}
 8006de6:	bd10      	pop	{r4, pc}
 8006de8:	0801a84c 	.word	0x0801a84c
 8006dec:	0801a83c 	.word	0x0801a83c
 8006df0:	0801a82c 	.word	0x0801a82c
 8006df4:	0801a748 	.word	0x0801a748
 8006df8:	0801a798 	.word	0x0801a798
 8006dfc:	0801a86c 	.word	0x0801a86c
 8006e00:	0801a80c 	.word	0x0801a80c
 8006e04:	0801a7c8 	.word	0x0801a7c8
 8006e08:	0801a8bc 	.word	0x0801a8bc
 8006e0c:	0801a7e8 	.word	0x0801a7e8
 8006e10:	0801a87c 	.word	0x0801a87c
 8006e14:	0801a738 	.word	0x0801a738
 8006e18:	0801a85c 	.word	0x0801a85c
 8006e1c:	0801a89c 	.word	0x0801a89c
 8006e20:	0801a7b8 	.word	0x0801a7b8
 8006e24:	0801a778 	.word	0x0801a778
 8006e28:	0801a8dc 	.word	0x0801a8dc
 8006e2c:	0801a768 	.word	0x0801a768
 8006e30:	0801a88c 	.word	0x0801a88c
 8006e34:	0801a8fc 	.word	0x0801a8fc
 8006e38:	0801a7d8 	.word	0x0801a7d8
 8006e3c:	0801a7a8 	.word	0x0801a7a8
 8006e40:	0801a8ac 	.word	0x0801a8ac
 8006e44:	0801a728 	.word	0x0801a728
 8006e48:	0801a81c 	.word	0x0801a81c
 8006e4c:	0801a788 	.word	0x0801a788
 8006e50:	0801a758 	.word	0x0801a758
 8006e54:	0801a8ec 	.word	0x0801a8ec
 8006e58:	0801a8cc 	.word	0x0801a8cc
 8006e5c:	200068c4 	.word	0x200068c4

08006e60 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8006e60:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 8006e62:	1e45      	subs	r5, r0, #1
 8006e64:	00ec      	lsls	r4, r5, #3
 8006e66:	1b60      	subs	r0, r4, r5
 8006e68:	00c0      	lsls	r0, r0, #3
 8006e6a:	4e05      	ldr	r6, [pc, #20]	; (8006e80 <StopMsgDMA+0x20>)
 8006e6c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006e6e:	f008 f9a8 	bl	800f1c2 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	00e4      	lsls	r4, r4, #3
 8006e76:	59a3      	ldr	r3, [r4, r6]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	605a      	str	r2, [r3, #4]
}
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	20001718 	.word	0x20001718

08006e84 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8006e84:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8006e86:	1e44      	subs	r4, r0, #1
 8006e88:	00e5      	lsls	r5, r4, #3
 8006e8a:	1b28      	subs	r0, r5, r4
 8006e8c:	00c0      	lsls	r0, r0, #3
 8006e8e:	4e07      	ldr	r6, [pc, #28]	; (8006eac <StopStreamDMA+0x28>)
 8006e90:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006e92:	f008 f996 	bl	800f1c2 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006e96:	1b2d      	subs	r5, r5, r4
 8006e98:	00ed      	lsls	r5, r5, #3
 8006e9a:	59aa      	ldr	r2, [r5, r6]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8006ea0:	00a4      	lsls	r4, r4, #2
 8006ea2:	4a03      	ldr	r2, [pc, #12]	; (8006eb0 <StopStreamDMA+0x2c>)
 8006ea4:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8006ea6:	4a03      	ldr	r2, [pc, #12]	; (8006eb4 <StopStreamDMA+0x30>)
 8006ea8:	50a3      	str	r3, [r4, r2]

}
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	20001910 	.word	0x20001910
 8006eb0:	20001474 	.word	0x20001474
 8006eb4:	200014a4 	.word	0x200014a4

08006eb8 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8006ebc:	f7ff ffd0 	bl	8006e60 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8006ec0:	3c01      	subs	r4, #1
 8006ec2:	00e0      	lsls	r0, r4, #3
 8006ec4:	1b02      	subs	r2, r0, r4
 8006ec6:	00d2      	lsls	r2, r2, #3
 8006ec8:	4903      	ldr	r1, [pc, #12]	; (8006ed8 <SwitchMsgDMAToStream+0x20>)
 8006eca:	5851      	ldr	r1, [r2, r1]
 8006ecc:	4b03      	ldr	r3, [pc, #12]	; (8006edc <SwitchMsgDMAToStream+0x24>)
 8006ece:	18d0      	adds	r0, r2, r3
 8006ed0:	f003 ff54 	bl	800ad7c <DMA_STREAM_CH_Init>
}
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	20001718 	.word	0x20001718
 8006edc:	20001910 	.word	0x20001910

08006ee0 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8006ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee2:	46c6      	mov	lr, r8
 8006ee4:	b500      	push	{lr}
 8006ee6:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8006ee8:	f7ff ffcc 	bl	8006e84 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8006eec:	1e7c      	subs	r4, r7, #1
 8006eee:	00e5      	lsls	r5, r4, #3
 8006ef0:	1b2e      	subs	r6, r5, r4
 8006ef2:	00f6      	lsls	r6, r6, #3
 8006ef4:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <SwitchStreamDMAToMsg+0x5c>)
 8006ef6:	18f6      	adds	r6, r6, r3
 8006ef8:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <SwitchStreamDMAToMsg+0x60>)
 8006efa:	4698      	mov	r8, r3
 8006efc:	1b2b      	subs	r3, r5, r4
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4642      	mov	r2, r8
 8006f02:	5899      	ldr	r1, [r3, r2]
 8006f04:	0030      	movs	r0, r6
 8006f06:	f003 febb 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 8006f0a:	1b2b      	subs	r3, r5, r4
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	4443      	add	r3, r8
 8006f10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f12:	f003 fe15 	bl	800ab40 <GetPort>
 8006f16:	2300      	movs	r3, #0
 8006f18:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <SwitchStreamDMAToMsg+0x64>)
 8006f1a:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8006f1c:	1b2d      	subs	r5, r5, r4
 8006f1e:	00ed      	lsls	r5, r5, #3
 8006f20:	4642      	mov	r2, r8
 8006f22:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8006f24:	00a4      	lsls	r4, r4, #2
 8006f26:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <SwitchStreamDMAToMsg+0x68>)
 8006f28:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 8006f2a:	0038      	movs	r0, r7
 8006f2c:	f005 fd64 	bl	800c9f8 <GetUart>
 8006f30:	0031      	movs	r1, r6
 8006f32:	f004 fb1d 	bl	800b570 <DMA_MSG_RX_Setup>
		
}
 8006f36:	bc80      	pop	{r7}
 8006f38:	46b8      	mov	r8, r7
 8006f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3c:	20001718 	.word	0x20001718
 8006f40:	20001910 	.word	0x20001910
 8006f44:	200010e0 	.word	0x200010e0
 8006f48:	2000148c 	.word	0x2000148c

08006f4c <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	0005      	movs	r5, r0
 8006f50:	000e      	movs	r6, r1
 8006f52:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8006f54:	f003 fdf4 	bl	800ab40 <GetPort>
 8006f58:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <StartDMAstream+0x44>)
 8006f5c:	5c1b      	ldrb	r3, [r3, r0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d902      	bls.n	8006f68 <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8006f62:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d112      	bne.n	8006f8e <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8006f68:	0020      	movs	r0, r4
 8006f6a:	f7ff ffa5 	bl	8006eb8 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8006f6e:	1e63      	subs	r3, r4, #1
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4a08      	ldr	r2, [pc, #32]	; (8006f94 <StartDMAstream+0x48>)
 8006f74:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 8006f76:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <StartDMAstream+0x44>)
 8006f78:	2102      	movs	r1, #2
 8006f7a:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8006f7c:	4a06      	ldr	r2, [pc, #24]	; (8006f98 <StartDMAstream+0x4c>)
 8006f7e:	2100      	movs	r1, #0
 8006f80:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8006f82:	003a      	movs	r2, r7
 8006f84:	0031      	movs	r1, r6
 8006f86:	0028      	movs	r0, r5
 8006f88:	f004 fb5c 	bl	800b644 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8006f8c:	2000      	movs	r0, #0
}
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f90:	200010e0 	.word	0x200010e0
 8006f94:	2000148c 	.word	0x2000148c
 8006f98:	20001474 	.word	0x20001474

08006f9c <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8006fa0:	4b12      	ldr	r3, [pc, #72]	; (8006fec <DMA_IRQHandler+0x50>)
 8006fa2:	5c1b      	ldrb	r3, [r3, r0]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d008      	beq.n	8006fba <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 8006fa8:	3c01      	subs	r4, #1
 8006faa:	00e0      	lsls	r0, r4, #3
 8006fac:	1b00      	subs	r0, r0, r4
 8006fae:	00c0      	lsls	r0, r0, #3
 8006fb0:	4c0f      	ldr	r4, [pc, #60]	; (8006ff0 <DMA_IRQHandler+0x54>)
 8006fb2:	1900      	adds	r0, r0, r4
 8006fb4:	f008 f92e 	bl	800f214 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 8006fba:	1e45      	subs	r5, r0, #1
 8006fbc:	00e8      	lsls	r0, r5, #3
 8006fbe:	1b40      	subs	r0, r0, r5
 8006fc0:	00c0      	lsls	r0, r0, #3
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <DMA_IRQHandler+0x58>)
 8006fc4:	18c0      	adds	r0, r0, r3
 8006fc6:	f008 f925 	bl	800f214 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 8006fca:	00aa      	lsls	r2, r5, #2
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <DMA_IRQHandler+0x5c>)
 8006fce:	58d2      	ldr	r2, [r2, r3]
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d006      	beq.n	8006fe2 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8006fd4:	4909      	ldr	r1, [pc, #36]	; (8006ffc <DMA_IRQHandler+0x60>)
 8006fd6:	00ad      	lsls	r5, r5, #2
 8006fd8:	586b      	ldr	r3, [r5, r1]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d8ea      	bhi.n	8006fb8 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f7ff ff4e 	bl	8006e84 <StopStreamDMA>
}
 8006fe8:	e7e6      	b.n	8006fb8 <DMA_IRQHandler+0x1c>
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	200010e0 	.word	0x200010e0
 8006ff0:	20001718 	.word	0x20001718
 8006ff4:	20001910 	.word	0x20001910
 8006ff8:	200014a4 	.word	0x200014a4
 8006ffc:	20001474 	.word	0x20001474

08007000 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007000:	4b09      	ldr	r3, [pc, #36]	; (8007028 <ResetUartORE+0x28>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	2308      	movs	r3, #8
 8007006:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007008:	4a08      	ldr	r2, [pc, #32]	; (800702c <ResetUartORE+0x2c>)
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800700e:	4a08      	ldr	r2, [pc, #32]	; (8007030 <ResetUartORE+0x30>)
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007014:	4a07      	ldr	r2, [pc, #28]	; (8007034 <ResetUartORE+0x34>)
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800701a:	4a07      	ldr	r2, [pc, #28]	; (8007038 <ResetUartORE+0x38>)
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007020:	4a06      	ldr	r2, [pc, #24]	; (800703c <ResetUartORE+0x3c>)
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	6213      	str	r3, [r2, #32]
#endif
}
 8007026:	4770      	bx	lr
 8007028:	20006afc 	.word	0x20006afc
 800702c:	20006c5c 	.word	0x20006c5c
 8007030:	20006a18 	.word	0x20006a18
 8007034:	20006be8 	.word	0x20006be8
 8007038:	20006a8c 	.word	0x20006a8c
 800703c:	20006b78 	.word	0x20006b78

08007040 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	0006      	movs	r6, r0
 8007044:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8007046:	f008 fd55 	bl	800faf4 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800704a:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <EE_VerifyPageFullWriteVariable+0xb4>)
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007050:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 800705a:	4928      	ldr	r1, [pc, #160]	; (80070fc <EE_VerifyPageFullWriteVariable+0xbc>)
 800705c:	428a      	cmp	r2, r1
 800705e:	d007      	beq.n	8007070 <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 8007060:	3302      	adds	r3, #2
 8007062:	e005      	b.n	8007070 <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 8007064:	2a00      	cmp	r2, #0
 8007066:	d140      	bne.n	80070ea <EE_VerifyPageFullWriteVariable+0xaa>
        if (PageStatusB == RECEIVE_DATA)
 8007068:	4924      	ldr	r1, [pc, #144]	; (80070fc <EE_VerifyPageFullWriteVariable+0xbc>)
 800706a:	428b      	cmp	r3, r1
 800706c:	d03f      	beq.n	80070ee <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEA;         /* PageA valid */
 800706e:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007070:	4a23      	ldr	r2, [pc, #140]	; (8007100 <EE_VerifyPageFullWriteVariable+0xc0>)
 8007072:	189c      	adds	r4, r3, r2
 8007074:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007076:	02db      	lsls	r3, r3, #11
 8007078:	4a22      	ldr	r2, [pc, #136]	; (8007104 <EE_VerifyPageFullWriteVariable+0xc4>)
 800707a:	4694      	mov	ip, r2
 800707c:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	3201      	adds	r2, #1
 8007082:	d006      	beq.n	8007092 <EE_VerifyPageFullWriteVariable+0x52>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8007084:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8007086:	429c      	cmp	r4, r3
 8007088:	d3f9      	bcc.n	800707e <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }
	
	HAL_FLASH_Lock();
 800708a:	f008 fd47 	bl	800fb1c <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800708e:	2080      	movs	r0, #128	; 0x80
}
 8007090:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8007092:	002a      	movs	r2, r5
 8007094:	2300      	movs	r3, #0
 8007096:	0021      	movs	r1, r4
 8007098:	2001      	movs	r0, #1
 800709a:	f008 fd77 	bl	800fb8c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800709e:	481a      	ldr	r0, [pc, #104]	; (8007108 <EE_VerifyPageFullWriteVariable+0xc8>)
 80070a0:	f008 fd46 	bl	800fb30 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d003      	beq.n	80070b0 <EE_VerifyPageFullWriteVariable+0x70>
        return pFlash.ErrorCode;
 80070a8:	4b18      	ldr	r3, [pc, #96]	; (800710c <EE_VerifyPageFullWriteVariable+0xcc>)
 80070aa:	69d8      	ldr	r0, [r3, #28]
 80070ac:	b280      	uxth	r0, r0
 80070ae:	e7ef      	b.n	8007090 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80070b0:	4a17      	ldr	r2, [pc, #92]	; (8007110 <EE_VerifyPageFullWriteVariable+0xd0>)
 80070b2:	6913      	ldr	r3, [r2, #16]
 80070b4:	2101      	movs	r1, #1
 80070b6:	438b      	bics	r3, r1
 80070b8:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80070ba:	1ca1      	adds	r1, r4, #2
 80070bc:	0032      	movs	r2, r6
 80070be:	2300      	movs	r3, #0
 80070c0:	2001      	movs	r0, #1
 80070c2:	f008 fd63 	bl	800fb8c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070c6:	4810      	ldr	r0, [pc, #64]	; (8007108 <EE_VerifyPageFullWriteVariable+0xc8>)
 80070c8:	f008 fd32 	bl	800fb30 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d003      	beq.n	80070d8 <EE_VerifyPageFullWriteVariable+0x98>
        return pFlash.ErrorCode;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <EE_VerifyPageFullWriteVariable+0xcc>)
 80070d2:	69d8      	ldr	r0, [r3, #28]
 80070d4:	b280      	uxth	r0, r0
 80070d6:	e7db      	b.n	8007090 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80070d8:	4a0d      	ldr	r2, [pc, #52]	; (8007110 <EE_VerifyPageFullWriteVariable+0xd0>)
 80070da:	6913      	ldr	r3, [r2, #16]
 80070dc:	2101      	movs	r1, #1
 80070de:	438b      	bics	r3, r1
 80070e0:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <EE_VerifyPageFullWriteVariable+0xcc>)
 80070e4:	69d8      	ldr	r0, [r3, #28]
 80070e6:	b280      	uxth	r0, r0
 80070e8:	e7d2      	b.n	8007090 <EE_VerifyPageFullWriteVariable+0x50>
    return  NO_VALID_PAGE;
 80070ea:	20ab      	movs	r0, #171	; 0xab
 80070ec:	e7d0      	b.n	8007090 <EE_VerifyPageFullWriteVariable+0x50>
          return PAGEB;         /* PageB valid */
 80070ee:	2302      	movs	r3, #2
 80070f0:	e7be      	b.n	8007070 <EE_VerifyPageFullWriteVariable+0x30>
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	0801e000 	.word	0x0801e000
 80070f8:	0801f000 	.word	0x0801f000
 80070fc:	0000eeee 	.word	0x0000eeee
 8007100:	0001003c 	.word	0x0001003c
 8007104:	0801effe 	.word	0x0801effe
 8007108:	0000c350 	.word	0x0000c350
 800710c:	20006e38 	.word	0x20006e38
 8007110:	40022000 	.word	0x40022000

08007114 <EE_ReadVariable>:
{
 8007114:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <EE_ReadVariable+0x48>)
 8007118:	881c      	ldrh	r4, [r3, #0]
 800711a:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800711c:	4b10      	ldr	r3, [pc, #64]	; (8007160 <EE_ReadVariable+0x4c>)
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8007122:	2c00      	cmp	r4, #0
 8007124:	d009      	beq.n	800713a <EE_ReadVariable+0x26>
      else if (PageStatusB == VALID_PAGE)
 8007126:	2b00      	cmp	r3, #0
 8007128:	d006      	beq.n	8007138 <EE_ReadVariable+0x24>
    return  NO_VALID_PAGE;
 800712a:	20ab      	movs	r0, #171	; 0xab
 800712c:	e003      	b.n	8007136 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800712e:	3b02      	subs	r3, #2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8007134:	2000      	movs	r0, #0
}
 8007136:	bd10      	pop	{r4, pc}
        return PAGEB;           /* PageB valid */
 8007138:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800713a:	02e3      	lsls	r3, r4, #11
 800713c:	4a09      	ldr	r2, [pc, #36]	; (8007164 <EE_ReadVariable+0x50>)
 800713e:	4694      	mov	ip, r2
 8007140:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007142:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 8007144:	4a08      	ldr	r2, [pc, #32]	; (8007168 <EE_ReadVariable+0x54>)
 8007146:	4694      	mov	ip, r2
 8007148:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800714e:	4282      	cmp	r2, r0
 8007150:	d0ed      	beq.n	800712e <EE_ReadVariable+0x1a>
      Address = Address - 4;
 8007152:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 8007154:	42a3      	cmp	r3, r4
 8007156:	d8f8      	bhi.n	800714a <EE_ReadVariable+0x36>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8007158:	2001      	movs	r0, #1
 800715a:	e7ec      	b.n	8007136 <EE_ReadVariable+0x22>
 800715c:	0801e000 	.word	0x0801e000
 8007160:	0801f000 	.word	0x0801f000
 8007164:	0801effe 	.word	0x0801effe
 8007168:	0801e002 	.word	0x0801e002

0800716c <EE_WriteVariable>:
{
 800716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716e:	46de      	mov	lr, fp
 8007170:	4657      	mov	r7, sl
 8007172:	464e      	mov	r6, r9
 8007174:	4645      	mov	r5, r8
 8007176:	b5e0      	push	{r5, r6, r7, lr}
 8007178:	b083      	sub	sp, #12
 800717a:	0006      	movs	r6, r0
 800717c:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 800717e:	f008 fcb9 	bl	800faf4 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007182:	0029      	movs	r1, r5
 8007184:	0030      	movs	r0, r6
 8007186:	f7ff ff5b 	bl	8007040 <EE_VerifyPageFullWriteVariable>
 800718a:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 800718c:	2880      	cmp	r0, #128	; 0x80
 800718e:	d009      	beq.n	80071a4 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 8007190:	f008 fcc4 	bl	800fb1c <HAL_FLASH_Lock>
}
 8007194:	0020      	movs	r0, r4
 8007196:	b003      	add	sp, #12
 8007198:	bcf0      	pop	{r4, r5, r6, r7}
 800719a:	46bb      	mov	fp, r7
 800719c:	46b2      	mov	sl, r6
 800719e:	46a9      	mov	r9, r5
 80071a0:	46a0      	mov	r8, r4
 80071a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 80071a4:	f008 fca6 	bl	800faf4 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80071a8:	4b40      	ldr	r3, [pc, #256]	; (80072ac <EE_WriteVariable+0x140>)
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80071ae:	4a40      	ldr	r2, [pc, #256]	; (80072b0 <EE_WriteVariable+0x144>)
 80071b0:	8812      	ldrh	r2, [r2, #0]
 80071b2:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <EE_WriteVariable+0x5c>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80071b8:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d1e8      	bne.n	8007190 <EE_WriteVariable+0x24>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 80071be:	4b3c      	ldr	r3, [pc, #240]	; (80072b0 <EE_WriteVariable+0x144>)
 80071c0:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 80071c2:	4b3a      	ldr	r3, [pc, #232]	; (80072ac <EE_WriteVariable+0x140>)
 80071c4:	469a      	mov	sl, r3
 80071c6:	e003      	b.n	80071d0 <EE_WriteVariable+0x64>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 80071c8:	4b38      	ldr	r3, [pc, #224]	; (80072ac <EE_WriteVariable+0x140>)
 80071ca:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 80071cc:	4b38      	ldr	r3, [pc, #224]	; (80072b0 <EE_WriteVariable+0x144>)
 80071ce:	469a      	mov	sl, r3
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 80071d0:	4a38      	ldr	r2, [pc, #224]	; (80072b4 <EE_WriteVariable+0x148>)
 80071d2:	2300      	movs	r3, #0
 80071d4:	4651      	mov	r1, sl
 80071d6:	2001      	movs	r0, #1
 80071d8:	f008 fcd8 	bl	800fb8c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071dc:	4836      	ldr	r0, [pc, #216]	; (80072b8 <EE_WriteVariable+0x14c>)
 80071de:	f008 fca7 	bl	800fb30 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d003      	beq.n	80071ee <EE_WriteVariable+0x82>
  {
    return pFlash.ErrorCode;
 80071e6:	4b35      	ldr	r3, [pc, #212]	; (80072bc <EE_WriteVariable+0x150>)
 80071e8:	69dc      	ldr	r4, [r3, #28]
 80071ea:	b2a4      	uxth	r4, r4
 80071ec:	e7d0      	b.n	8007190 <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80071ee:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <EE_WriteVariable+0x154>)
 80071f0:	6913      	ldr	r3, [r2, #16]
 80071f2:	2101      	movs	r1, #1
 80071f4:	438b      	bics	r3, r1
 80071f6:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80071f8:	0029      	movs	r1, r5
 80071fa:	0030      	movs	r0, r6
 80071fc:	f7ff ff20 	bl	8007040 <EE_VerifyPageFullWriteVariable>
 8007200:	9001      	str	r0, [sp, #4]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007202:	2800      	cmp	r0, #0
 8007204:	d150      	bne.n	80072a8 <EE_WriteVariable+0x13c>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007206:	2501      	movs	r5, #1
  {
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007208:	4b2e      	ldr	r3, [pc, #184]	; (80072c4 <EE_WriteVariable+0x158>)
 800720a:	4698      	mov	r8, r3
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800720c:	4699      	mov	r9, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800720e:	4f2e      	ldr	r7, [pc, #184]	; (80072c8 <EE_WriteVariable+0x15c>)
 8007210:	e003      	b.n	800721a <EE_WriteVariable+0xae>
 8007212:	3501      	adds	r5, #1
 8007214:	b2ad      	uxth	r5, r5
 8007216:	42bd      	cmp	r5, r7
 8007218:	d00f      	beq.n	800723a <EE_WriteVariable+0xce>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 800721a:	42ae      	cmp	r6, r5
 800721c:	d0f9      	beq.n	8007212 <EE_WriteVariable+0xa6>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800721e:	4641      	mov	r1, r8
 8007220:	0028      	movs	r0, r5
 8007222:	f7ff ff77 	bl	8007114 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007226:	2801      	cmp	r0, #1
 8007228:	d0f3      	beq.n	8007212 <EE_WriteVariable+0xa6>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800722a:	464b      	mov	r3, r9
 800722c:	8819      	ldrh	r1, [r3, #0]
 800722e:	0028      	movs	r0, r5
 8007230:	f7ff ff06 	bl	8007040 <EE_VerifyPageFullWriteVariable>
 8007234:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007236:	d0ec      	beq.n	8007212 <EE_WriteVariable+0xa6>
 8007238:	e7aa      	b.n	8007190 <EE_WriteVariable+0x24>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 800723a:	4658      	mov	r0, fp
 800723c:	f008 fd1e 	bl	800fc7c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007240:	481d      	ldr	r0, [pc, #116]	; (80072b8 <EE_WriteVariable+0x14c>)
 8007242:	f008 fc75 	bl	800fb30 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007246:	2800      	cmp	r0, #0
 8007248:	d003      	beq.n	8007252 <EE_WriteVariable+0xe6>
  {
    return pFlash.ErrorCode;
 800724a:	4b1c      	ldr	r3, [pc, #112]	; (80072bc <EE_WriteVariable+0x150>)
 800724c:	69dc      	ldr	r4, [r3, #28]
 800724e:	b2a4      	uxth	r4, r4
 8007250:	e79e      	b.n	8007190 <EE_WriteVariable+0x24>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007252:	2080      	movs	r0, #128	; 0x80
 8007254:	0100      	lsls	r0, r0, #4
 8007256:	4458      	add	r0, fp
 8007258:	f008 fd10 	bl	800fc7c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800725c:	4816      	ldr	r0, [pc, #88]	; (80072b8 <EE_WriteVariable+0x14c>)
 800725e:	f008 fc67 	bl	800fb30 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8007262:	2800      	cmp	r0, #0
 8007264:	d003      	beq.n	800726e <EE_WriteVariable+0x102>
		{
			return pFlash.ErrorCode;
 8007266:	4b15      	ldr	r3, [pc, #84]	; (80072bc <EE_WriteVariable+0x150>)
 8007268:	69dc      	ldr	r4, [r3, #28]
 800726a:	b2a4      	uxth	r4, r4
 800726c:	e790      	b.n	8007190 <EE_WriteVariable+0x24>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800726e:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <EE_WriteVariable+0x154>)
 8007270:	6913      	ldr	r3, [r2, #16]
 8007272:	2102      	movs	r1, #2
 8007274:	438b      	bics	r3, r1
 8007276:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007278:	2200      	movs	r2, #0
 800727a:	2300      	movs	r3, #0
 800727c:	4651      	mov	r1, sl
 800727e:	2001      	movs	r0, #1
 8007280:	f008 fc84 	bl	800fb8c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007284:	480c      	ldr	r0, [pc, #48]	; (80072b8 <EE_WriteVariable+0x14c>)
 8007286:	f008 fc53 	bl	800fb30 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800728a:	2800      	cmp	r0, #0
 800728c:	d003      	beq.n	8007296 <EE_WriteVariable+0x12a>
  {
    return pFlash.ErrorCode;
 800728e:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <EE_WriteVariable+0x150>)
 8007290:	69dc      	ldr	r4, [r3, #28]
 8007292:	b2a4      	uxth	r4, r4
 8007294:	e77c      	b.n	8007190 <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007296:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <EE_WriteVariable+0x154>)
 8007298:	6913      	ldr	r3, [r2, #16]
 800729a:	2101      	movs	r1, #1
 800729c:	438b      	bics	r3, r1
 800729e:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 80072a0:	f008 fc3c 	bl	800fb1c <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 80072a4:	9c01      	ldr	r4, [sp, #4]
 80072a6:	e773      	b.n	8007190 <EE_WriteVariable+0x24>
    return EepromStatus;
 80072a8:	9c01      	ldr	r4, [sp, #4]
 80072aa:	e771      	b.n	8007190 <EE_WriteVariable+0x24>
 80072ac:	0801e000 	.word	0x0801e000
 80072b0:	0801f000 	.word	0x0801f000
 80072b4:	0000eeee 	.word	0x0000eeee
 80072b8:	0000c350 	.word	0x0000c350
 80072bc:	20006e38 	.word	0x20006e38
 80072c0:	40022000 	.word	0x40022000
 80072c4:	200014bc 	.word	0x200014bc
 80072c8:	00000401 	.word	0x00000401

080072cc <EE_Format>:
{
 80072cc:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 80072ce:	f008 fc11 	bl	800faf4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 80072d2:	4829      	ldr	r0, [pc, #164]	; (8007378 <EE_Format+0xac>)
 80072d4:	f008 fcd2 	bl	800fc7c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072d8:	4828      	ldr	r0, [pc, #160]	; (800737c <EE_Format+0xb0>)
 80072da:	f008 fc29 	bl	800fb30 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80072de:	2800      	cmp	r0, #0
 80072e0:	d003      	beq.n	80072ea <EE_Format+0x1e>
		return pFlash.ErrorCode;
 80072e2:	4b27      	ldr	r3, [pc, #156]	; (8007380 <EE_Format+0xb4>)
 80072e4:	69d8      	ldr	r0, [r3, #28]
 80072e6:	b280      	uxth	r0, r0
}
 80072e8:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80072ea:	4826      	ldr	r0, [pc, #152]	; (8007384 <EE_Format+0xb8>)
 80072ec:	f008 fcc6 	bl	800fc7c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072f0:	4822      	ldr	r0, [pc, #136]	; (800737c <EE_Format+0xb0>)
 80072f2:	f008 fc1d 	bl	800fb30 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d003      	beq.n	8007302 <EE_Format+0x36>
			return pFlash.ErrorCode;
 80072fa:	4b21      	ldr	r3, [pc, #132]	; (8007380 <EE_Format+0xb4>)
 80072fc:	69d8      	ldr	r0, [r3, #28]
 80072fe:	b280      	uxth	r0, r0
 8007300:	e7f2      	b.n	80072e8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007302:	4a21      	ldr	r2, [pc, #132]	; (8007388 <EE_Format+0xbc>)
 8007304:	6913      	ldr	r3, [r2, #16]
 8007306:	2102      	movs	r1, #2
 8007308:	438b      	bics	r3, r1
 800730a:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	4919      	ldr	r1, [pc, #100]	; (8007378 <EE_Format+0xac>)
 8007312:	2001      	movs	r0, #1
 8007314:	f008 fc3a 	bl	800fb8c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007318:	4818      	ldr	r0, [pc, #96]	; (800737c <EE_Format+0xb0>)
 800731a:	f008 fc09 	bl	800fb30 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800731e:	2800      	cmp	r0, #0
 8007320:	d003      	beq.n	800732a <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007322:	4b17      	ldr	r3, [pc, #92]	; (8007380 <EE_Format+0xb4>)
 8007324:	69d8      	ldr	r0, [r3, #28]
 8007326:	b280      	uxth	r0, r0
 8007328:	e7de      	b.n	80072e8 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <EE_Format+0xbc>)
 800732c:	6913      	ldr	r3, [r2, #16]
 800732e:	2101      	movs	r1, #1
 8007330:	438b      	bics	r3, r1
 8007332:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007334:	4815      	ldr	r0, [pc, #84]	; (800738c <EE_Format+0xc0>)
 8007336:	f008 fca1 	bl	800fc7c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800733a:	4810      	ldr	r0, [pc, #64]	; (800737c <EE_Format+0xb0>)
 800733c:	f008 fbf8 	bl	800fb30 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007340:	2800      	cmp	r0, #0
 8007342:	d003      	beq.n	800734c <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <EE_Format+0xb4>)
 8007346:	69d8      	ldr	r0, [r3, #28]
 8007348:	b280      	uxth	r0, r0
 800734a:	e7cd      	b.n	80072e8 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800734c:	4810      	ldr	r0, [pc, #64]	; (8007390 <EE_Format+0xc4>)
 800734e:	f008 fc95 	bl	800fc7c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007352:	480a      	ldr	r0, [pc, #40]	; (800737c <EE_Format+0xb0>)
 8007354:	f008 fbec 	bl	800fb30 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007358:	2800      	cmp	r0, #0
 800735a:	d003      	beq.n	8007364 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800735c:	4b08      	ldr	r3, [pc, #32]	; (8007380 <EE_Format+0xb4>)
 800735e:	69d8      	ldr	r0, [r3, #28]
 8007360:	b280      	uxth	r0, r0
 8007362:	e7c1      	b.n	80072e8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <EE_Format+0xbc>)
 8007366:	6913      	ldr	r3, [r2, #16]
 8007368:	2101      	movs	r1, #1
 800736a:	438b      	bics	r3, r1
 800736c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800736e:	f008 fbd5 	bl	800fb1c <HAL_FLASH_Lock>
  return FlashStatus;
 8007372:	2000      	movs	r0, #0
 8007374:	e7b8      	b.n	80072e8 <EE_Format+0x1c>
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	0801e000 	.word	0x0801e000
 800737c:	0000c350 	.word	0x0000c350
 8007380:	20006e38 	.word	0x20006e38
 8007384:	0801e800 	.word	0x0801e800
 8007388:	40022000 	.word	0x40022000
 800738c:	0801f000 	.word	0x0801f000
 8007390:	0801f800 	.word	0x0801f800

08007394 <EE_Init>:
{
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	46ce      	mov	lr, r9
 8007398:	4647      	mov	r7, r8
 800739a:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 800739c:	f008 fbaa 	bl	800faf4 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80073a0:	4bbf      	ldr	r3, [pc, #764]	; (80076a0 <EE_Init+0x30c>)
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80073a6:	4abf      	ldr	r2, [pc, #764]	; (80076a4 <EE_Init+0x310>)
 80073a8:	8812      	ldrh	r2, [r2, #0]
 80073aa:	b292      	uxth	r2, r2
  switch (PageStatusA)
 80073ac:	49be      	ldr	r1, [pc, #760]	; (80076a8 <EE_Init+0x314>)
 80073ae:	428b      	cmp	r3, r1
 80073b0:	d100      	bne.n	80073b4 <EE_Init+0x20>
 80073b2:	e075      	b.n	80074a0 <EE_Init+0x10c>
 80073b4:	49bd      	ldr	r1, [pc, #756]	; (80076ac <EE_Init+0x318>)
 80073b6:	428b      	cmp	r3, r1
 80073b8:	d012      	beq.n	80073e0 <EE_Init+0x4c>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d100      	bne.n	80073c0 <EE_Init+0x2c>
 80073be:	e10b      	b.n	80075d8 <EE_Init+0x244>
      FlashStatus = EE_Format();
 80073c0:	f7ff ff84 	bl	80072cc <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80073c4:	48ba      	ldr	r0, [pc, #744]	; (80076b0 <EE_Init+0x31c>)
 80073c6:	f008 fbb3 	bl	800fb30 <FLASH_WaitForLastOperation>
 80073ca:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	d102      	bne.n	80073d6 <EE_Init+0x42>
	HAL_FLASH_Lock();
 80073d0:	f008 fba4 	bl	800fb1c <HAL_FLASH_Lock>
  return HAL_OK;
 80073d4:	2500      	movs	r5, #0
}
 80073d6:	0028      	movs	r0, r5
 80073d8:	bcc0      	pop	{r6, r7}
 80073da:	46b9      	mov	r9, r7
 80073dc:	46b0      	mov	r8, r6
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	d00d      	beq.n	8007400 <EE_Init+0x6c>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 80073e4:	4bb0      	ldr	r3, [pc, #704]	; (80076a8 <EE_Init+0x314>)
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d028      	beq.n	800743c <EE_Init+0xa8>
        FlashStatus = EE_Format();
 80073ea:	f7ff ff6f 	bl	80072cc <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80073ee:	48b0      	ldr	r0, [pc, #704]	; (80076b0 <EE_Init+0x31c>)
 80073f0:	f008 fb9e 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d0eb      	beq.n	80073d0 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 80073f8:	4bae      	ldr	r3, [pc, #696]	; (80076b4 <EE_Init+0x320>)
 80073fa:	69dd      	ldr	r5, [r3, #28]
 80073fc:	b2ad      	uxth	r5, r5
 80073fe:	e7ea      	b.n	80073d6 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007400:	48a7      	ldr	r0, [pc, #668]	; (80076a0 <EE_Init+0x30c>)
 8007402:	f008 fc3b 	bl	800fc7c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007406:	48aa      	ldr	r0, [pc, #680]	; (80076b0 <EE_Init+0x31c>)
 8007408:	f008 fb92 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800740c:	2800      	cmp	r0, #0
 800740e:	d003      	beq.n	8007418 <EE_Init+0x84>
          return pFlash.ErrorCode;
 8007410:	4ba8      	ldr	r3, [pc, #672]	; (80076b4 <EE_Init+0x320>)
 8007412:	69dd      	ldr	r5, [r3, #28]
 8007414:	b2ad      	uxth	r5, r5
 8007416:	e7de      	b.n	80073d6 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007418:	48a7      	ldr	r0, [pc, #668]	; (80076b8 <EE_Init+0x324>)
 800741a:	f008 fc2f 	bl	800fc7c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800741e:	48a4      	ldr	r0, [pc, #656]	; (80076b0 <EE_Init+0x31c>)
 8007420:	f008 fb86 	bl	800fb30 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007424:	2800      	cmp	r0, #0
 8007426:	d105      	bne.n	8007434 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007428:	4aa4      	ldr	r2, [pc, #656]	; (80076bc <EE_Init+0x328>)
 800742a:	6913      	ldr	r3, [r2, #16]
 800742c:	2102      	movs	r1, #2
 800742e:	438b      	bics	r3, r1
 8007430:	6113      	str	r3, [r2, #16]
 8007432:	e7cd      	b.n	80073d0 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007434:	4b9f      	ldr	r3, [pc, #636]	; (80076b4 <EE_Init+0x320>)
 8007436:	69dd      	ldr	r5, [r3, #28]
 8007438:	b2ad      	uxth	r5, r5
 800743a:	e7cc      	b.n	80073d6 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800743c:	4898      	ldr	r0, [pc, #608]	; (80076a0 <EE_Init+0x30c>)
 800743e:	f008 fc1d 	bl	800fc7c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007442:	489b      	ldr	r0, [pc, #620]	; (80076b0 <EE_Init+0x31c>)
 8007444:	f008 fb74 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007448:	2800      	cmp	r0, #0
 800744a:	d003      	beq.n	8007454 <EE_Init+0xc0>
          return pFlash.ErrorCode;
 800744c:	4b99      	ldr	r3, [pc, #612]	; (80076b4 <EE_Init+0x320>)
 800744e:	69dd      	ldr	r5, [r3, #28]
 8007450:	b2ad      	uxth	r5, r5
 8007452:	e7c0      	b.n	80073d6 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007454:	4898      	ldr	r0, [pc, #608]	; (80076b8 <EE_Init+0x324>)
 8007456:	f008 fc11 	bl	800fc7c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800745a:	4895      	ldr	r0, [pc, #596]	; (80076b0 <EE_Init+0x31c>)
 800745c:	f008 fb68 	bl	800fb30 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007460:	2800      	cmp	r0, #0
 8007462:	d003      	beq.n	800746c <EE_Init+0xd8>
						return pFlash.ErrorCode;
 8007464:	4b93      	ldr	r3, [pc, #588]	; (80076b4 <EE_Init+0x320>)
 8007466:	69dd      	ldr	r5, [r3, #28]
 8007468:	b2ad      	uxth	r5, r5
 800746a:	e7b4      	b.n	80073d6 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800746c:	4a93      	ldr	r2, [pc, #588]	; (80076bc <EE_Init+0x328>)
 800746e:	6913      	ldr	r3, [r2, #16]
 8007470:	2102      	movs	r1, #2
 8007472:	438b      	bics	r3, r1
 8007474:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007476:	2200      	movs	r2, #0
 8007478:	2300      	movs	r3, #0
 800747a:	498a      	ldr	r1, [pc, #552]	; (80076a4 <EE_Init+0x310>)
 800747c:	2001      	movs	r0, #1
 800747e:	f008 fb85 	bl	800fb8c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007482:	488b      	ldr	r0, [pc, #556]	; (80076b0 <EE_Init+0x31c>)
 8007484:	f008 fb54 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007488:	2800      	cmp	r0, #0
 800748a:	d105      	bne.n	8007498 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800748c:	4a8b      	ldr	r2, [pc, #556]	; (80076bc <EE_Init+0x328>)
 800748e:	6913      	ldr	r3, [r2, #16]
 8007490:	2101      	movs	r1, #1
 8007492:	438b      	bics	r3, r1
 8007494:	6113      	str	r3, [r2, #16]
 8007496:	e79b      	b.n	80073d0 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007498:	4b86      	ldr	r3, [pc, #536]	; (80076b4 <EE_Init+0x320>)
 800749a:	69dd      	ldr	r5, [r3, #28]
 800749c:	b2ad      	uxth	r5, r5
 800749e:	e79a      	b.n	80073d6 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	d158      	bne.n	8007556 <EE_Init+0x1c2>
 80074a4:	2401      	movs	r4, #1
  int16_t x = -1;
 80074a6:	2601      	movs	r6, #1
 80074a8:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 80074aa:	4f85      	ldr	r7, [pc, #532]	; (80076c0 <EE_Init+0x32c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80074ac:	4b85      	ldr	r3, [pc, #532]	; (80076c4 <EE_Init+0x330>)
 80074ae:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80074b0:	4699      	mov	r9, r3
 80074b2:	e005      	b.n	80074c0 <EE_Init+0x12c>
            x = VarIdx;
 80074b4:	b226      	sxth	r6, r4
 80074b6:	e008      	b.n	80074ca <EE_Init+0x136>
 80074b8:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80074ba:	4b83      	ldr	r3, [pc, #524]	; (80076c8 <EE_Init+0x334>)
 80074bc:	429c      	cmp	r4, r3
 80074be:	d018      	beq.n	80074f2 <EE_Init+0x15e>
 80074c0:	b2a5      	uxth	r5, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 80074c2:	883b      	ldrh	r3, [r7, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	42ab      	cmp	r3, r5
 80074c8:	d0f4      	beq.n	80074b4 <EE_Init+0x120>
          if (VarIdx != x)
 80074ca:	42a6      	cmp	r6, r4
 80074cc:	d0f4      	beq.n	80074b8 <EE_Init+0x124>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80074ce:	4641      	mov	r1, r8
 80074d0:	0028      	movs	r0, r5
 80074d2:	f7ff fe1f 	bl	8007114 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 80074d6:	2801      	cmp	r0, #1
 80074d8:	d0ee      	beq.n	80074b8 <EE_Init+0x124>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80074da:	464b      	mov	r3, r9
 80074dc:	8819      	ldrh	r1, [r3, #0]
 80074de:	0028      	movs	r0, r5
 80074e0:	f7ff fdae 	bl	8007040 <EE_VerifyPageFullWriteVariable>
 80074e4:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80074e6:	4872      	ldr	r0, [pc, #456]	; (80076b0 <EE_Init+0x31c>)
 80074e8:	f008 fb22 	bl	800fb30 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d0e3      	beq.n	80074b8 <EE_Init+0x124>
 80074f0:	e771      	b.n	80073d6 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 80074f2:	2200      	movs	r2, #0
 80074f4:	2300      	movs	r3, #0
 80074f6:	496a      	ldr	r1, [pc, #424]	; (80076a0 <EE_Init+0x30c>)
 80074f8:	2001      	movs	r0, #1
 80074fa:	f008 fb47 	bl	800fb8c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80074fe:	486c      	ldr	r0, [pc, #432]	; (80076b0 <EE_Init+0x31c>)
 8007500:	f008 fb16 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007504:	2800      	cmp	r0, #0
 8007506:	d003      	beq.n	8007510 <EE_Init+0x17c>
          return pFlash.ErrorCode;
 8007508:	4b6a      	ldr	r3, [pc, #424]	; (80076b4 <EE_Init+0x320>)
 800750a:	69dd      	ldr	r5, [r3, #28]
 800750c:	b2ad      	uxth	r5, r5
 800750e:	e762      	b.n	80073d6 <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007510:	4a6a      	ldr	r2, [pc, #424]	; (80076bc <EE_Init+0x328>)
 8007512:	6913      	ldr	r3, [r2, #16]
 8007514:	2101      	movs	r1, #1
 8007516:	438b      	bics	r3, r1
 8007518:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800751a:	4862      	ldr	r0, [pc, #392]	; (80076a4 <EE_Init+0x310>)
 800751c:	f008 fbae 	bl	800fc7c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007520:	4863      	ldr	r0, [pc, #396]	; (80076b0 <EE_Init+0x31c>)
 8007522:	f008 fb05 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007526:	2800      	cmp	r0, #0
 8007528:	d003      	beq.n	8007532 <EE_Init+0x19e>
          return pFlash.ErrorCode;
 800752a:	4b62      	ldr	r3, [pc, #392]	; (80076b4 <EE_Init+0x320>)
 800752c:	69dd      	ldr	r5, [r3, #28]
 800752e:	b2ad      	uxth	r5, r5
 8007530:	e751      	b.n	80073d6 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007532:	4866      	ldr	r0, [pc, #408]	; (80076cc <EE_Init+0x338>)
 8007534:	f008 fba2 	bl	800fc7c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007538:	485d      	ldr	r0, [pc, #372]	; (80076b0 <EE_Init+0x31c>)
 800753a:	f008 faf9 	bl	800fb30 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800753e:	2800      	cmp	r0, #0
 8007540:	d105      	bne.n	800754e <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007542:	4a5e      	ldr	r2, [pc, #376]	; (80076bc <EE_Init+0x328>)
 8007544:	6913      	ldr	r3, [r2, #16]
 8007546:	2102      	movs	r1, #2
 8007548:	438b      	bics	r3, r1
 800754a:	6113      	str	r3, [r2, #16]
 800754c:	e740      	b.n	80073d0 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800754e:	4b59      	ldr	r3, [pc, #356]	; (80076b4 <EE_Init+0x320>)
 8007550:	69dd      	ldr	r5, [r3, #28]
 8007552:	b2ad      	uxth	r5, r5
 8007554:	e73f      	b.n	80073d6 <EE_Init+0x42>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007556:	4b55      	ldr	r3, [pc, #340]	; (80076ac <EE_Init+0x318>)
 8007558:	429a      	cmp	r2, r3
 800755a:	d00b      	beq.n	8007574 <EE_Init+0x1e0>
        FlashStatus = EE_Format();
 800755c:	f7ff feb6 	bl	80072cc <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007560:	4853      	ldr	r0, [pc, #332]	; (80076b0 <EE_Init+0x31c>)
 8007562:	f008 fae5 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007566:	2800      	cmp	r0, #0
 8007568:	d100      	bne.n	800756c <EE_Init+0x1d8>
 800756a:	e731      	b.n	80073d0 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 800756c:	4b51      	ldr	r3, [pc, #324]	; (80076b4 <EE_Init+0x320>)
 800756e:	69dd      	ldr	r5, [r3, #28]
 8007570:	b2ad      	uxth	r5, r5
 8007572:	e730      	b.n	80073d6 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007574:	484b      	ldr	r0, [pc, #300]	; (80076a4 <EE_Init+0x310>)
 8007576:	f008 fb81 	bl	800fc7c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800757a:	484d      	ldr	r0, [pc, #308]	; (80076b0 <EE_Init+0x31c>)
 800757c:	f008 fad8 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007580:	2800      	cmp	r0, #0
 8007582:	d003      	beq.n	800758c <EE_Init+0x1f8>
          return pFlash.ErrorCode;
 8007584:	4b4b      	ldr	r3, [pc, #300]	; (80076b4 <EE_Init+0x320>)
 8007586:	69dd      	ldr	r5, [r3, #28]
 8007588:	b2ad      	uxth	r5, r5
 800758a:	e724      	b.n	80073d6 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800758c:	484f      	ldr	r0, [pc, #316]	; (80076cc <EE_Init+0x338>)
 800758e:	f008 fb75 	bl	800fc7c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007592:	4847      	ldr	r0, [pc, #284]	; (80076b0 <EE_Init+0x31c>)
 8007594:	f008 facc 	bl	800fb30 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007598:	2800      	cmp	r0, #0
 800759a:	d003      	beq.n	80075a4 <EE_Init+0x210>
						return pFlash.ErrorCode;
 800759c:	4b45      	ldr	r3, [pc, #276]	; (80076b4 <EE_Init+0x320>)
 800759e:	69dd      	ldr	r5, [r3, #28]
 80075a0:	b2ad      	uxth	r5, r5
 80075a2:	e718      	b.n	80073d6 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80075a4:	4a45      	ldr	r2, [pc, #276]	; (80076bc <EE_Init+0x328>)
 80075a6:	6913      	ldr	r3, [r2, #16]
 80075a8:	2102      	movs	r1, #2
 80075aa:	438b      	bics	r3, r1
 80075ac:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 80075ae:	2200      	movs	r2, #0
 80075b0:	2300      	movs	r3, #0
 80075b2:	493b      	ldr	r1, [pc, #236]	; (80076a0 <EE_Init+0x30c>)
 80075b4:	2001      	movs	r0, #1
 80075b6:	f008 fae9 	bl	800fb8c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80075ba:	483d      	ldr	r0, [pc, #244]	; (80076b0 <EE_Init+0x31c>)
 80075bc:	f008 fab8 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d105      	bne.n	80075d0 <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80075c4:	4a3d      	ldr	r2, [pc, #244]	; (80076bc <EE_Init+0x328>)
 80075c6:	6913      	ldr	r3, [r2, #16]
 80075c8:	2101      	movs	r1, #1
 80075ca:	438b      	bics	r3, r1
 80075cc:	6113      	str	r3, [r2, #16]
 80075ce:	e6ff      	b.n	80073d0 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 80075d0:	4b38      	ldr	r3, [pc, #224]	; (80076b4 <EE_Init+0x320>)
 80075d2:	69dd      	ldr	r5, [r3, #28]
 80075d4:	b2ad      	uxth	r5, r5
 80075d6:	e6fe      	b.n	80073d6 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 80075d8:	2a00      	cmp	r2, #0
 80075da:	d00a      	beq.n	80075f2 <EE_Init+0x25e>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 80075dc:	4b33      	ldr	r3, [pc, #204]	; (80076ac <EE_Init+0x318>)
 80075de:	429a      	cmp	r2, r3
 80075e0:	d011      	beq.n	8007606 <EE_Init+0x272>
 80075e2:	2401      	movs	r4, #1
  int16_t x = -1;
 80075e4:	2601      	movs	r6, #1
 80075e6:	4276      	negs	r6, r6
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 80075e8:	4f39      	ldr	r7, [pc, #228]	; (80076d0 <EE_Init+0x33c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80075ea:	4b36      	ldr	r3, [pc, #216]	; (80076c4 <EE_Init+0x330>)
 80075ec:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80075ee:	4699      	mov	r9, r3
 80075f0:	e02d      	b.n	800764e <EE_Init+0x2ba>
        FlashStatus = EE_Format();
 80075f2:	f7ff fe6b 	bl	80072cc <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80075f6:	482e      	ldr	r0, [pc, #184]	; (80076b0 <EE_Init+0x31c>)
 80075f8:	f008 fa9a 	bl	800fb30 <FLASH_WaitForLastOperation>
 80075fc:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 80075fe:	2d00      	cmp	r5, #0
 8007600:	d100      	bne.n	8007604 <EE_Init+0x270>
 8007602:	e6e5      	b.n	80073d0 <EE_Init+0x3c>
 8007604:	e6e7      	b.n	80073d6 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007606:	4827      	ldr	r0, [pc, #156]	; (80076a4 <EE_Init+0x310>)
 8007608:	f008 fb38 	bl	800fc7c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800760c:	4828      	ldr	r0, [pc, #160]	; (80076b0 <EE_Init+0x31c>)
 800760e:	f008 fa8f 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007612:	2800      	cmp	r0, #0
 8007614:	d003      	beq.n	800761e <EE_Init+0x28a>
          return pFlash.ErrorCode;
 8007616:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <EE_Init+0x320>)
 8007618:	69dd      	ldr	r5, [r3, #28]
 800761a:	b2ad      	uxth	r5, r5
 800761c:	e6db      	b.n	80073d6 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800761e:	482b      	ldr	r0, [pc, #172]	; (80076cc <EE_Init+0x338>)
 8007620:	f008 fb2c 	bl	800fc7c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007624:	4822      	ldr	r0, [pc, #136]	; (80076b0 <EE_Init+0x31c>)
 8007626:	f008 fa83 	bl	800fb30 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800762a:	2800      	cmp	r0, #0
 800762c:	d105      	bne.n	800763a <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800762e:	4a23      	ldr	r2, [pc, #140]	; (80076bc <EE_Init+0x328>)
 8007630:	6913      	ldr	r3, [r2, #16]
 8007632:	2102      	movs	r1, #2
 8007634:	438b      	bics	r3, r1
 8007636:	6113      	str	r3, [r2, #16]
 8007638:	e6ca      	b.n	80073d0 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800763a:	4b1e      	ldr	r3, [pc, #120]	; (80076b4 <EE_Init+0x320>)
 800763c:	69dd      	ldr	r5, [r3, #28]
 800763e:	b2ad      	uxth	r5, r5
 8007640:	e6c9      	b.n	80073d6 <EE_Init+0x42>
            x = VarIdx;
 8007642:	b226      	sxth	r6, r4
 8007644:	e008      	b.n	8007658 <EE_Init+0x2c4>
 8007646:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <EE_Init+0x334>)
 800764a:	429c      	cmp	r4, r3
 800764c:	d018      	beq.n	8007680 <EE_Init+0x2ec>
 800764e:	b2a5      	uxth	r5, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007650:	883b      	ldrh	r3, [r7, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	42ab      	cmp	r3, r5
 8007656:	d0f4      	beq.n	8007642 <EE_Init+0x2ae>
          if (VarIdx != x)
 8007658:	42a6      	cmp	r6, r4
 800765a:	d0f4      	beq.n	8007646 <EE_Init+0x2b2>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800765c:	4641      	mov	r1, r8
 800765e:	0028      	movs	r0, r5
 8007660:	f7ff fd58 	bl	8007114 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007664:	2801      	cmp	r0, #1
 8007666:	d0ee      	beq.n	8007646 <EE_Init+0x2b2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007668:	464b      	mov	r3, r9
 800766a:	8819      	ldrh	r1, [r3, #0]
 800766c:	0028      	movs	r0, r5
 800766e:	f7ff fce7 	bl	8007040 <EE_VerifyPageFullWriteVariable>
 8007672:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007674:	480e      	ldr	r0, [pc, #56]	; (80076b0 <EE_Init+0x31c>)
 8007676:	f008 fa5b 	bl	800fb30 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800767a:	2800      	cmp	r0, #0
 800767c:	d0e3      	beq.n	8007646 <EE_Init+0x2b2>
 800767e:	e6aa      	b.n	80073d6 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	4907      	ldr	r1, [pc, #28]	; (80076a4 <EE_Init+0x310>)
 8007686:	2001      	movs	r0, #1
 8007688:	f008 fa80 	bl	800fb8c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800768c:	4808      	ldr	r0, [pc, #32]	; (80076b0 <EE_Init+0x31c>)
 800768e:	f008 fa4f 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007692:	2800      	cmp	r0, #0
 8007694:	d01e      	beq.n	80076d4 <EE_Init+0x340>
          return pFlash.ErrorCode;
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <EE_Init+0x320>)
 8007698:	69dd      	ldr	r5, [r3, #28]
 800769a:	b2ad      	uxth	r5, r5
 800769c:	e69b      	b.n	80073d6 <EE_Init+0x42>
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	0801e000 	.word	0x0801e000
 80076a4:	0801f000 	.word	0x0801f000
 80076a8:	0000eeee 	.word	0x0000eeee
 80076ac:	0000ffff 	.word	0x0000ffff
 80076b0:	0000c350 	.word	0x0000c350
 80076b4:	20006e38 	.word	0x20006e38
 80076b8:	0801e800 	.word	0x0801e800
 80076bc:	40022000 	.word	0x40022000
 80076c0:	0801e006 	.word	0x0801e006
 80076c4:	200014bc 	.word	0x200014bc
 80076c8:	00000401 	.word	0x00000401
 80076cc:	0801f800 	.word	0x0801f800
 80076d0:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80076d4:	4a11      	ldr	r2, [pc, #68]	; (800771c <EE_Init+0x388>)
 80076d6:	6913      	ldr	r3, [r2, #16]
 80076d8:	2101      	movs	r1, #1
 80076da:	438b      	bics	r3, r1
 80076dc:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80076de:	4810      	ldr	r0, [pc, #64]	; (8007720 <EE_Init+0x38c>)
 80076e0:	f008 facc 	bl	800fc7c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80076e4:	480f      	ldr	r0, [pc, #60]	; (8007724 <EE_Init+0x390>)
 80076e6:	f008 fa23 	bl	800fb30 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d003      	beq.n	80076f6 <EE_Init+0x362>
          return pFlash.ErrorCode;
 80076ee:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <EE_Init+0x394>)
 80076f0:	69dd      	ldr	r5, [r3, #28]
 80076f2:	b2ad      	uxth	r5, r5
 80076f4:	e66f      	b.n	80073d6 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80076f6:	480d      	ldr	r0, [pc, #52]	; (800772c <EE_Init+0x398>)
 80076f8:	f008 fac0 	bl	800fc7c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80076fc:	4809      	ldr	r0, [pc, #36]	; (8007724 <EE_Init+0x390>)
 80076fe:	f008 fa17 	bl	800fb30 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007702:	2800      	cmp	r0, #0
 8007704:	d105      	bne.n	8007712 <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <EE_Init+0x388>)
 8007708:	6913      	ldr	r3, [r2, #16]
 800770a:	2102      	movs	r1, #2
 800770c:	438b      	bics	r3, r1
 800770e:	6113      	str	r3, [r2, #16]
 8007710:	e65e      	b.n	80073d0 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <EE_Init+0x394>)
 8007714:	69dd      	ldr	r5, [r3, #28]
 8007716:	b2ad      	uxth	r5, r5
 8007718:	e65d      	b.n	80073d6 <EE_Init+0x42>
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	40022000 	.word	0x40022000
 8007720:	0801e000 	.word	0x0801e000
 8007724:	0000c350 	.word	0x0000c350
 8007728:	20006e38 	.word	0x20006e38
 800772c:	0801e800 	.word	0x0801e800

08007730 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007732:	46c6      	mov	lr, r8
 8007734:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8007736:	4c29      	ldr	r4, [pc, #164]	; (80077dc <StartDefaultTask+0xac>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8007738:	0026      	movs	r6, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 800773a:	46a0      	mov	r8, r4
 800773c:	e01e      	b.n	800777c <StartDefaultTask+0x4c>
				RTOS_IND_blink(100);
 800773e:	2580      	movs	r5, #128	; 0x80
 8007740:	01ed      	lsls	r5, r5, #7
 8007742:	4f27      	ldr	r7, [pc, #156]	; (80077e0 <StartDefaultTask+0xb0>)
 8007744:	2201      	movs	r2, #1
 8007746:	0029      	movs	r1, r5
 8007748:	0038      	movs	r0, r7
 800774a:	f008 fbfb 	bl	800ff44 <HAL_GPIO_WritePin>
 800774e:	2064      	movs	r0, #100	; 0x64
 8007750:	f005 faa3 	bl	800cc9a <osDelay>
 8007754:	2200      	movs	r2, #0
 8007756:	0029      	movs	r1, r5
 8007758:	0038      	movs	r0, r7
 800775a:	f008 fbf3 	bl	800ff44 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800775e:	2300      	movs	r3, #0
 8007760:	7033      	strb	r3, [r6, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007762:	f000 f9f7 	bl	8007b54 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007766:	f7fd fbe1 	bl	8004f2c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 800776a:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <StartDefaultTask+0xb4>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <StartDefaultTask+0x48>
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <StartDefaultTask+0xb8>)
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007778:	f007 f988 	bl	800ea8c <vPortYield>
		switch (indMode)
 800777c:	7823      	ldrb	r3, [r4, #0]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d0dd      	beq.n	800773e <StartDefaultTask+0xe>
 8007782:	2b03      	cmp	r3, #3
 8007784:	d015      	beq.n	80077b2 <StartDefaultTask+0x82>
 8007786:	2b01      	cmp	r3, #1
 8007788:	d1eb      	bne.n	8007762 <StartDefaultTask+0x32>
				RTOS_IND_blink(200);
 800778a:	2580      	movs	r5, #128	; 0x80
 800778c:	01ed      	lsls	r5, r5, #7
 800778e:	4f14      	ldr	r7, [pc, #80]	; (80077e0 <StartDefaultTask+0xb0>)
 8007790:	2201      	movs	r2, #1
 8007792:	0029      	movs	r1, r5
 8007794:	0038      	movs	r0, r7
 8007796:	f008 fbd5 	bl	800ff44 <HAL_GPIO_WritePin>
 800779a:	20c8      	movs	r0, #200	; 0xc8
 800779c:	f005 fa7d 	bl	800cc9a <osDelay>
 80077a0:	2200      	movs	r2, #0
 80077a2:	0029      	movs	r1, r5
 80077a4:	0038      	movs	r0, r7
 80077a6:	f008 fbcd 	bl	800ff44 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80077aa:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <StartDefaultTask+0xac>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
				break;
 80077b0:	e7d7      	b.n	8007762 <StartDefaultTask+0x32>
				RTOS_IND_blink(30);
 80077b2:	2580      	movs	r5, #128	; 0x80
 80077b4:	01ed      	lsls	r5, r5, #7
 80077b6:	4f0a      	ldr	r7, [pc, #40]	; (80077e0 <StartDefaultTask+0xb0>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	0029      	movs	r1, r5
 80077bc:	0038      	movs	r0, r7
 80077be:	f008 fbc1 	bl	800ff44 <HAL_GPIO_WritePin>
 80077c2:	201e      	movs	r0, #30
 80077c4:	f005 fa69 	bl	800cc9a <osDelay>
 80077c8:	2200      	movs	r2, #0
 80077ca:	0029      	movs	r1, r5
 80077cc:	0038      	movs	r0, r7
 80077ce:	f008 fbb9 	bl	800ff44 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80077d2:	2300      	movs	r3, #0
 80077d4:	4642      	mov	r2, r8
 80077d6:	7013      	strb	r3, [r2, #0]
				break;
 80077d8:	e7c3      	b.n	8007762 <StartDefaultTask+0x32>
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	20000ee2 	.word	0x20000ee2
 80077e0:	48000400 	.word	0x48000400
 80077e4:	20001534 	.word	0x20001534
 80077e8:	20001533 	.word	0x20001533

080077ec <MX_FREERTOS_Init>:
{
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	b090      	sub	sp, #64	; 0x40
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 80077f0:	25a0      	movs	r5, #160	; 0xa0
 80077f2:	006d      	lsls	r5, r5, #1
 80077f4:	2400      	movs	r4, #0
 80077f6:	9403      	str	r4, [sp, #12]
 80077f8:	9402      	str	r4, [sp, #8]
 80077fa:	4b5e      	ldr	r3, [pc, #376]	; (8007974 <MX_FREERTOS_Init+0x188>)
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	2603      	movs	r6, #3
 8007800:	9600      	str	r6, [sp, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	002a      	movs	r2, r5
 8007806:	495c      	ldr	r1, [pc, #368]	; (8007978 <MX_FREERTOS_Init+0x18c>)
 8007808:	485c      	ldr	r0, [pc, #368]	; (800797c <MX_FREERTOS_Init+0x190>)
 800780a:	f006 f85b 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800780e:	9403      	str	r4, [sp, #12]
 8007810:	9402      	str	r4, [sp, #8]
 8007812:	4b5b      	ldr	r3, [pc, #364]	; (8007980 <MX_FREERTOS_Init+0x194>)
 8007814:	9301      	str	r3, [sp, #4]
 8007816:	9600      	str	r6, [sp, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	002a      	movs	r2, r5
 800781c:	4959      	ldr	r1, [pc, #356]	; (8007984 <MX_FREERTOS_Init+0x198>)
 800781e:	485a      	ldr	r0, [pc, #360]	; (8007988 <MX_FREERTOS_Init+0x19c>)
 8007820:	f006 f850 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007824:	9403      	str	r4, [sp, #12]
 8007826:	9402      	str	r4, [sp, #8]
 8007828:	4b58      	ldr	r3, [pc, #352]	; (800798c <MX_FREERTOS_Init+0x1a0>)
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	9600      	str	r6, [sp, #0]
 800782e:	2300      	movs	r3, #0
 8007830:	002a      	movs	r2, r5
 8007832:	4957      	ldr	r1, [pc, #348]	; (8007990 <MX_FREERTOS_Init+0x1a4>)
 8007834:	4857      	ldr	r0, [pc, #348]	; (8007994 <MX_FREERTOS_Init+0x1a8>)
 8007836:	f006 f845 	bl	800d8c4 <xTaskGenericCreate>
	vRegisterCLICommands();
 800783a:	f7ff fa75 	bl	8006d28 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800783e:	9403      	str	r4, [sp, #12]
 8007840:	9402      	str	r4, [sp, #8]
 8007842:	4b55      	ldr	r3, [pc, #340]	; (8007998 <MX_FREERTOS_Init+0x1ac>)
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	9600      	str	r6, [sp, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	002a      	movs	r2, r5
 800784c:	4953      	ldr	r1, [pc, #332]	; (800799c <MX_FREERTOS_Init+0x1b0>)
 800784e:	4854      	ldr	r0, [pc, #336]	; (80079a0 <MX_FREERTOS_Init+0x1b4>)
 8007850:	f006 f838 	bl	800d8c4 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007854:	4d53      	ldr	r5, [pc, #332]	; (80079a4 <MX_FREERTOS_Init+0x1b8>)
 8007856:	9403      	str	r4, [sp, #12]
 8007858:	9402      	str	r4, [sp, #8]
 800785a:	4b53      	ldr	r3, [pc, #332]	; (80079a8 <MX_FREERTOS_Init+0x1bc>)
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	3601      	adds	r6, #1
 8007860:	9600      	str	r6, [sp, #0]
 8007862:	2301      	movs	r3, #1
 8007864:	22a0      	movs	r2, #160	; 0xa0
 8007866:	4951      	ldr	r1, [pc, #324]	; (80079ac <MX_FREERTOS_Init+0x1c0>)
 8007868:	0028      	movs	r0, r5
 800786a:	f006 f82b 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800786e:	9403      	str	r4, [sp, #12]
 8007870:	9402      	str	r4, [sp, #8]
 8007872:	4b4f      	ldr	r3, [pc, #316]	; (80079b0 <MX_FREERTOS_Init+0x1c4>)
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	9600      	str	r6, [sp, #0]
 8007878:	2302      	movs	r3, #2
 800787a:	22a0      	movs	r2, #160	; 0xa0
 800787c:	494d      	ldr	r1, [pc, #308]	; (80079b4 <MX_FREERTOS_Init+0x1c8>)
 800787e:	0028      	movs	r0, r5
 8007880:	f006 f820 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007884:	9403      	str	r4, [sp, #12]
 8007886:	9402      	str	r4, [sp, #8]
 8007888:	4b4b      	ldr	r3, [pc, #300]	; (80079b8 <MX_FREERTOS_Init+0x1cc>)
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	9600      	str	r6, [sp, #0]
 800788e:	2303      	movs	r3, #3
 8007890:	22a0      	movs	r2, #160	; 0xa0
 8007892:	494a      	ldr	r1, [pc, #296]	; (80079bc <MX_FREERTOS_Init+0x1d0>)
 8007894:	0028      	movs	r0, r5
 8007896:	f006 f815 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 800789a:	9403      	str	r4, [sp, #12]
 800789c:	9402      	str	r4, [sp, #8]
 800789e:	4b48      	ldr	r3, [pc, #288]	; (80079c0 <MX_FREERTOS_Init+0x1d4>)
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	9600      	str	r6, [sp, #0]
 80078a4:	2304      	movs	r3, #4
 80078a6:	22a0      	movs	r2, #160	; 0xa0
 80078a8:	4946      	ldr	r1, [pc, #280]	; (80079c4 <MX_FREERTOS_Init+0x1d8>)
 80078aa:	0028      	movs	r0, r5
 80078ac:	f006 f80a 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 80078b0:	9403      	str	r4, [sp, #12]
 80078b2:	9402      	str	r4, [sp, #8]
 80078b4:	4b44      	ldr	r3, [pc, #272]	; (80079c8 <MX_FREERTOS_Init+0x1dc>)
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	9600      	str	r6, [sp, #0]
 80078ba:	2305      	movs	r3, #5
 80078bc:	22a0      	movs	r2, #160	; 0xa0
 80078be:	4943      	ldr	r1, [pc, #268]	; (80079cc <MX_FREERTOS_Init+0x1e0>)
 80078c0:	0028      	movs	r0, r5
 80078c2:	f005 ffff 	bl	800d8c4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P6MsgTask", configMINIMAL_STACK_SIZE, (void *) P6, osPriorityAboveNormal-osPriorityIdle, &P6MsgTaskHandle);
 80078c6:	9403      	str	r4, [sp, #12]
 80078c8:	9402      	str	r4, [sp, #8]
 80078ca:	4b41      	ldr	r3, [pc, #260]	; (80079d0 <MX_FREERTOS_Init+0x1e4>)
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	9600      	str	r6, [sp, #0]
 80078d0:	2306      	movs	r3, #6
 80078d2:	22a0      	movs	r2, #160	; 0xa0
 80078d4:	493f      	ldr	r1, [pc, #252]	; (80079d4 <MX_FREERTOS_Init+0x1e8>)
 80078d6:	0028      	movs	r0, r5
 80078d8:	f005 fff4 	bl	800d8c4 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 80078dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80078de:	2101      	movs	r1, #1
 80078e0:	a80f      	add	r0, sp, #60	; 0x3c
 80078e2:	f005 f9e2 	bl	800ccaa <osSemaphoreCreate>
 80078e6:	4e3c      	ldr	r6, [pc, #240]	; (80079d8 <MX_FREERTOS_Init+0x1ec>)
 80078e8:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 80078ea:	940e      	str	r4, [sp, #56]	; 0x38
 80078ec:	2101      	movs	r1, #1
 80078ee:	a80e      	add	r0, sp, #56	; 0x38
 80078f0:	f005 f9db 	bl	800ccaa <osSemaphoreCreate>
 80078f4:	4d39      	ldr	r5, [pc, #228]	; (80079dc <MX_FREERTOS_Init+0x1f0>)
 80078f6:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 80078f8:	940d      	str	r4, [sp, #52]	; 0x34
 80078fa:	2101      	movs	r1, #1
 80078fc:	a80d      	add	r0, sp, #52	; 0x34
 80078fe:	f005 f9d4 	bl	800ccaa <osSemaphoreCreate>
 8007902:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8007904:	940c      	str	r4, [sp, #48]	; 0x30
 8007906:	2101      	movs	r1, #1
 8007908:	a80c      	add	r0, sp, #48	; 0x30
 800790a:	f005 f9ce 	bl	800ccaa <osSemaphoreCreate>
 800790e:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8007910:	940b      	str	r4, [sp, #44]	; 0x2c
 8007912:	2101      	movs	r1, #1
 8007914:	a80b      	add	r0, sp, #44	; 0x2c
 8007916:	f005 f9c8 	bl	800ccaa <osSemaphoreCreate>
 800791a:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 800791c:	940a      	str	r4, [sp, #40]	; 0x28
 800791e:	2101      	movs	r1, #1
 8007920:	a80a      	add	r0, sp, #40	; 0x28
 8007922:	f005 f9c2 	bl	800ccaa <osSemaphoreCreate>
 8007926:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8007928:	9409      	str	r4, [sp, #36]	; 0x24
 800792a:	2101      	movs	r1, #1
 800792c:	a809      	add	r0, sp, #36	; 0x24
 800792e:	f005 f9bc 	bl	800ccaa <osSemaphoreCreate>
 8007932:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 8007934:	9408      	str	r4, [sp, #32]
 8007936:	2101      	movs	r1, #1
 8007938:	a808      	add	r0, sp, #32
 800793a:	f005 f9b6 	bl	800ccaa <osSemaphoreCreate>
 800793e:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 8007940:	9407      	str	r4, [sp, #28]
 8007942:	2101      	movs	r1, #1
 8007944:	a807      	add	r0, sp, #28
 8007946:	f005 f9b0 	bl	800ccaa <osSemaphoreCreate>
 800794a:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 800794c:	9406      	str	r4, [sp, #24]
 800794e:	2101      	movs	r1, #1
 8007950:	a806      	add	r0, sp, #24
 8007952:	f005 f9aa 	bl	800ccaa <osSemaphoreCreate>
 8007956:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11); PxRxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP11), 1);
 8007958:	9405      	str	r4, [sp, #20]
 800795a:	2101      	movs	r1, #1
 800795c:	a805      	add	r0, sp, #20
 800795e:	f005 f9a4 	bl	800ccaa <osSemaphoreCreate>
 8007962:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12); PxTxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP12), 1);
 8007964:	9404      	str	r4, [sp, #16]
 8007966:	2101      	movs	r1, #1
 8007968:	a804      	add	r0, sp, #16
 800796a:	f005 f99e 	bl	800ccaa <osSemaphoreCreate>
 800796e:	61a8      	str	r0, [r5, #24]
}
 8007970:	b010      	add	sp, #64	; 0x40
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	200014e0 	.word	0x200014e0
 8007978:	0801a90c 	.word	0x0801a90c
 800797c:	08007731 	.word	0x08007731
 8007980:	200014c0 	.word	0x200014c0
 8007984:	0801a918 	.word	0x0801a918
 8007988:	08008db9 	.word	0x08008db9
 800798c:	200014dc 	.word	0x200014dc
 8007990:	0801a924 	.word	0x0801a924
 8007994:	08011bc7 	.word	0x08011bc7
 8007998:	200014e8 	.word	0x200014e8
 800799c:	0801a930 	.word	0x0801a930
 80079a0:	08004bcd 	.word	0x08004bcd
 80079a4:	08009189 	.word	0x08009189
 80079a8:	200014c4 	.word	0x200014c4
 80079ac:	0801a938 	.word	0x0801a938
 80079b0:	200014c8 	.word	0x200014c8
 80079b4:	0801a944 	.word	0x0801a944
 80079b8:	200014cc 	.word	0x200014cc
 80079bc:	0801a950 	.word	0x0801a950
 80079c0:	200014d0 	.word	0x200014d0
 80079c4:	0801a95c 	.word	0x0801a95c
 80079c8:	200014d4 	.word	0x200014d4
 80079cc:	0801a968 	.word	0x0801a968
 80079d0:	200014d8 	.word	0x200014d8
 80079d4:	0801a974 	.word	0x0801a974
 80079d8:	200069dc 	.word	0x200069dc
 80079dc:	200069c0 	.word	0x200069c0

080079e0 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 80079e0:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80079e2:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <vMainConfigureTimerForRunTimeStats+0x14>)
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	4904      	ldr	r1, [pc, #16]	; (80079f8 <vMainConfigureTimerForRunTimeStats+0x18>)
 80079e8:	f7f8 fbb2 	bl	8000150 <__udivsi3>
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <vMainConfigureTimerForRunTimeStats+0x1c>)
 80079ee:	6018      	str	r0, [r3, #0]
}
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	20000090 	.word	0x20000090
 80079f8:	00002710 	.word	0x00002710
 80079fc:	200014e4 	.word	0x200014e4

08007a00 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8007a00:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a02:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <ulMainGetRunTimeCounterValue+0x40>)
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	21fa      	movs	r1, #250	; 0xfa
 8007a08:	0089      	lsls	r1, r1, #2
 8007a0a:	f7f8 fba1 	bl	8000150 <__udivsi3>
 8007a0e:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <ulMainGetRunTimeCounterValue+0x44>)
 8007a12:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8007a14:	f006 f8f6 	bl	800dc04 <xTaskGetTickCountFromISR>
 8007a18:	0003      	movs	r3, r0

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8007a1a:	4a0b      	ldr	r2, [pc, #44]	; (8007a48 <ulMainGetRunTimeCounterValue+0x48>)
 8007a1c:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a1e:	1b28      	subs	r0, r5, r4
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8007a20:	0152      	lsls	r2, r2, #5
 8007a22:	d503      	bpl.n	8007a2c <ulMainGetRunTimeCounterValue+0x2c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 8007a24:	3301      	adds	r3, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a26:	4a07      	ldr	r2, [pc, #28]	; (8007a44 <ulMainGetRunTimeCounterValue+0x44>)
 8007a28:	6810      	ldr	r0, [r2, #0]
 8007a2a:	1a28      	subs	r0, r5, r0
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 8007a2c:	009c      	lsls	r4, r3, #2
 8007a2e:	18e4      	adds	r4, r4, r3
 8007a30:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <ulMainGetRunTimeCounterValue+0x4c>)
 8007a34:	6819      	ldr	r1, [r3, #0]
 8007a36:	f7f8 fb8b 	bl	8000150 <__udivsi3>
 8007a3a:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	20000090 	.word	0x20000090
 8007a44:	e000e018 	.word	0xe000e018
 8007a48:	e000ed04 	.word	0xe000ed04
 8007a4c:	200014e4 	.word	0x200014e4

08007a50 <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 8007a50:	4770      	bx	lr

08007a52 <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 8007a52:	4770      	bx	lr

08007a54 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 8007a54:	4770      	bx	lr

08007a56 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 8007a56:	4770      	bx	lr

08007a58 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 8007a58:	4770      	bx	lr

08007a5a <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 8007a5a:	4770      	bx	lr

08007a5c <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 8007a5c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007a5e:	00c2      	lsls	r2, r0, #3
 8007a60:	1812      	adds	r2, r2, r0
 8007a62:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <CheckForTimedButtonPress+0x74>)
 8007a64:	189b      	adds	r3, r3, r2
 8007a66:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 8007a68:	0082      	lsls	r2, r0, #2
 8007a6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <CheckForTimedButtonPress+0x78>)
 8007a6c:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007a6e:	0163      	lsls	r3, r4, #5
 8007a70:	1b1b      	subs	r3, r3, r4
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	191b      	adds	r3, r3, r4
 8007a76:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	d01c      	beq.n	8007ab6 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007a7c:	00c2      	lsls	r2, r0, #3
 8007a7e:	1812      	adds	r2, r2, r0
 8007a80:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <CheckForTimedButtonPress+0x74>)
 8007a82:	189b      	adds	r3, r3, r2
 8007a84:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007a86:	0163      	lsls	r3, r4, #5
 8007a88:	1b1b      	subs	r3, r3, r4
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	191b      	adds	r3, r3, r4
 8007a8e:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d017      	beq.n	8007ac4 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007a94:	00c2      	lsls	r2, r0, #3
 8007a96:	1812      	adds	r2, r2, r0
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <CheckForTimedButtonPress+0x74>)
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007a9e:	0163      	lsls	r3, r4, #5
 8007aa0:	1b1b      	subs	r3, r3, r4
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	191b      	adds	r3, r3, r4
 8007aa6:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8007aa8:	4299      	cmp	r1, r3
 8007aaa:	d109      	bne.n	8007ac0 <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8007aac:	0010      	movs	r0, r2
 8007aae:	4b08      	ldr	r3, [pc, #32]	; (8007ad0 <CheckForTimedButtonPress+0x74>)
 8007ab0:	220a      	movs	r2, #10
 8007ab2:	54c2      	strb	r2, [r0, r3]
 8007ab4:	e004      	b.n	8007ac0 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8007ab6:	00c3      	lsls	r3, r0, #3
 8007ab8:	1818      	adds	r0, r3, r0
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <CheckForTimedButtonPress+0x74>)
 8007abc:	2209      	movs	r2, #9
 8007abe:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8007ac4:	0010      	movs	r0, r2
 8007ac6:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <CheckForTimedButtonPress+0x74>)
 8007ac8:	220a      	movs	r2, #10
 8007aca:	54c2      	strb	r2, [r0, r3]
 8007acc:	e7f8      	b.n	8007ac0 <CheckForTimedButtonPress+0x64>
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	200014ec 	.word	0x200014ec
 8007ad4:	20001538 	.word	0x20001538

08007ad8 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8007ad8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007ada:	00c2      	lsls	r2, r0, #3
 8007adc:	1812      	adds	r2, r2, r0
 8007ade:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <CheckForTimedButtonRelease+0x74>)
 8007ae0:	189b      	adds	r3, r3, r2
 8007ae2:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 8007ae4:	0082      	lsls	r2, r0, #2
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <CheckForTimedButtonRelease+0x78>)
 8007ae8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007aea:	0163      	lsls	r3, r4, #5
 8007aec:	1b1b      	subs	r3, r3, r4
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	191b      	adds	r3, r3, r4
 8007af2:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 8007af4:	4299      	cmp	r1, r3
 8007af6:	d01c      	beq.n	8007b32 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007af8:	00c2      	lsls	r2, r0, #3
 8007afa:	1812      	adds	r2, r2, r0
 8007afc:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <CheckForTimedButtonRelease+0x74>)
 8007afe:	189b      	adds	r3, r3, r2
 8007b00:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007b02:	0163      	lsls	r3, r4, #5
 8007b04:	1b1b      	subs	r3, r3, r4
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	191b      	adds	r3, r3, r4
 8007b0a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d017      	beq.n	8007b40 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007b10:	00c2      	lsls	r2, r0, #3
 8007b12:	1812      	adds	r2, r2, r0
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <CheckForTimedButtonRelease+0x74>)
 8007b16:	189b      	adds	r3, r3, r2
 8007b18:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007b1a:	0163      	lsls	r3, r4, #5
 8007b1c:	1b1b      	subs	r3, r3, r4
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	191b      	adds	r3, r3, r4
 8007b22:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 8007b24:	4299      	cmp	r1, r3
 8007b26:	d109      	bne.n	8007b3c <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007b28:	0010      	movs	r0, r2
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <CheckForTimedButtonRelease+0x74>)
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	54c2      	strb	r2, [r0, r3]
 8007b30:	e004      	b.n	8007b3c <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8007b32:	00c3      	lsls	r3, r0, #3
 8007b34:	1818      	adds	r0, r3, r0
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <CheckForTimedButtonRelease+0x74>)
 8007b38:	220c      	movs	r2, #12
 8007b3a:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007b40:	0010      	movs	r0, r2
 8007b42:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <CheckForTimedButtonRelease+0x74>)
 8007b44:	220d      	movs	r2, #13
 8007b46:	54c2      	strb	r2, [r0, r3]
 8007b48:	e7f8      	b.n	8007b3c <CheckForTimedButtonRelease+0x64>
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	200014ec 	.word	0x200014ec
 8007b50:	20001554 	.word	0x20001554

08007b54 <CheckAttachedButtons>:
{
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	46de      	mov	lr, fp
 8007b58:	4657      	mov	r7, sl
 8007b5a:	464e      	mov	r6, r9
 8007b5c:	4645      	mov	r5, r8
 8007b5e:	b5e0      	push	{r5, r6, r7, lr}
 8007b60:	b089      	sub	sp, #36	; 0x24
 8007b62:	4dbf      	ldr	r5, [pc, #764]	; (8007e60 <CheckAttachedButtons+0x30c>)
 8007b64:	3509      	adds	r5, #9
 8007b66:	4ebf      	ldr	r6, [pc, #764]	; (8007e64 <CheckAttachedButtons+0x310>)
 8007b68:	3604      	adds	r6, #4
 8007b6a:	4bbf      	ldr	r3, [pc, #764]	; (8007e68 <CheckAttachedButtons+0x314>)
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4698      	mov	r8, r3
 8007b70:	4bbe      	ldr	r3, [pc, #760]	; (8007e6c <CheckAttachedButtons+0x318>)
 8007b72:	3301      	adds	r3, #1
 8007b74:	4699      	mov	r9, r3
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007b76:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	e121      	b.n	8007dc4 <CheckAttachedButtons+0x270>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 8007b80:	230e      	movs	r3, #14
 8007b82:	aa02      	add	r2, sp, #8
 8007b84:	4694      	mov	ip, r2
 8007b86:	4463      	add	r3, ip
 8007b88:	8819      	ldrh	r1, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	9807      	ldr	r0, [sp, #28]
 8007b8e:	f008 f9d9 	bl	800ff44 <HAL_GPIO_WritePin>
 8007b92:	200a      	movs	r0, #10
 8007b94:	f004 fd2a 	bl	800c5ec <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8007b98:	ab05      	add	r3, sp, #20
 8007b9a:	8819      	ldrh	r1, [r3, #0]
 8007b9c:	9806      	ldr	r0, [sp, #24]
 8007b9e:	f008 f9cb 	bl	800ff38 <HAL_GPIO_ReadPin>
 8007ba2:	9003      	str	r0, [sp, #12]
 8007ba4:	e134      	b.n	8007e10 <CheckAttachedButtons+0x2bc>
			switch (button[i].type)
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d10e      	bne.n	8007bc8 <CheckAttachedButtons+0x74>
					if (connected == GPIO_PIN_SET)	
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d100      	bne.n	8007bb2 <CheckAttachedButtons+0x5e>
 8007bb0:	e1d7      	b.n	8007f62 <CheckAttachedButtons+0x40e>
					else if (connected == GPIO_PIN_RESET) 
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d108      	bne.n	8007bc8 <CheckAttachedButtons+0x74>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	e031      	b.n	8007c20 <CheckAttachedButtons+0xcc>
					if (connected == GPIO_PIN_SET)	
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d02c      	beq.n	8007c1c <CheckAttachedButtons+0xc8>
					else if (connected == GPIO_PIN_RESET)
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d100      	bne.n	8007bc8 <CheckAttachedButtons+0x74>
 8007bc6:	e1c9      	b.n	8007f5c <CheckAttachedButtons+0x408>
			if (state == CLOSED || state == ON)												
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d028      	beq.n	8007c20 <CheckAttachedButtons+0xcc>
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d026      	beq.n	8007c20 <CheckAttachedButtons+0xcc>
			if (state == OPEN || state == OFF)												
 8007bd2:	23fd      	movs	r3, #253	; 0xfd
 8007bd4:	9a02      	ldr	r2, [sp, #8]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d129      	bne.n	8007c30 <CheckAttachedButtons+0xdc>
 8007bdc:	0031      	movs	r1, r6
				if (releaseCounter[i] < 0xFFFF)
 8007bde:	6832      	ldr	r2, [r6, #0]
 8007be0:	48a3      	ldr	r0, [pc, #652]	; (8007e70 <CheckAttachedButtons+0x31c>)
					releaseCounter[i] = 0;																	// Reset debounce counter		
 8007be2:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 8007be4:	4282      	cmp	r2, r0
 8007be6:	d800      	bhi.n	8007bea <CheckAttachedButtons+0x96>
					++releaseCounter[i];																		// Advance the debounce counter
 8007be8:	1c53      	adds	r3, r2, #1
 8007bea:	600b      	str	r3, [r1, #0]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007bec:	4ba1      	ldr	r3, [pc, #644]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d045      	beq.n	8007c80 <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	781a      	ldrb	r2, [r3, #0]
 8007bf8:	4b9f      	ldr	r3, [pc, #636]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007bfa:	795b      	ldrb	r3, [r3, #5]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d917      	bls.n	8007c30 <CheckAttachedButtons+0xdc>
					clicked = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	4a9c      	ldr	r2, [pc, #624]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007c04:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8007c06:	464a      	mov	r2, r9
 8007c08:	7013      	strb	r3, [r2, #0]
 8007c0a:	e011      	b.n	8007c30 <CheckAttachedButtons+0xdc>
					if (connected == GPIO_PIN_SET)	
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d02f      	beq.n	8007c72 <CheckAttachedButtons+0x11e>
					else if (connected == GPIO_PIN_RESET) 
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1d8      	bne.n	8007bc8 <CheckAttachedButtons+0x74>
						state = OFF;
 8007c16:	2301      	movs	r3, #1
 8007c18:	9302      	str	r3, [sp, #8]
 8007c1a:	e7df      	b.n	8007bdc <CheckAttachedButtons+0x88>
						state = CLOSED;
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	9302      	str	r3, [sp, #8]
				if (pressCounter[i] < 0xFFFF)	
 8007c20:	4643      	mov	r3, r8
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a92      	ldr	r2, [pc, #584]	; (8007e70 <CheckAttachedButtons+0x31c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d826      	bhi.n	8007c78 <CheckAttachedButtons+0x124>
					++pressCounter[i];																			// Advance the debounce counter
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	4647      	mov	r7, r8
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4b90      	ldr	r3, [pc, #576]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d352      	bcc.n	8007ce2 <CheckAttachedButtons+0x18e>
				if (pressCounter[i] == BOS.buttons.debounce)
 8007c3c:	d02a      	beq.n	8007c94 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8007c3e:	6832      	ldr	r2, [r6, #0]
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d201      	bcs.n	8007c48 <CheckAttachedButtons+0xf4>
					releaseCounter[i] = 0;					
 8007c44:	2300      	movs	r3, #0
 8007c46:	6033      	str	r3, [r6, #0]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	4a8b      	ldr	r2, [pc, #556]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007c4c:	8852      	ldrh	r2, [r2, #2]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d938      	bls.n	8007cc4 <CheckAttachedButtons+0x170>
 8007c52:	22fa      	movs	r2, #250	; 0xfa
 8007c54:	0052      	lsls	r2, r2, #1
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d234      	bcs.n	8007cc4 <CheckAttachedButtons+0x170>
					if (clicked == 0)
 8007c5a:	4b86      	ldr	r3, [pc, #536]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d11e      	bne.n	8007ca0 <CheckAttachedButtons+0x14c>
						clicked = 1;																					// Record a possible single click 
 8007c62:	4b84      	ldr	r3, [pc, #528]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007c64:	3af4      	subs	r2, #244	; 0xf4
 8007c66:	3aff      	subs	r2, #255	; 0xff
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e03a      	b.n	8007ce2 <CheckAttachedButtons+0x18e>
						state = CLOSED;
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	9302      	str	r3, [sp, #8]
 8007c70:	e7d6      	b.n	8007c20 <CheckAttachedButtons+0xcc>
 8007c72:	2302      	movs	r3, #2
 8007c74:	9302      	str	r3, [sp, #8]
 8007c76:	e7d3      	b.n	8007c20 <CheckAttachedButtons+0xcc>
					pressCounter[i] = 0;																		// Reset debounce counter					
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4642      	mov	r2, r8
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e7d7      	b.n	8007c30 <CheckAttachedButtons+0xdc>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007c80:	464b      	mov	r3, r9
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	4a7c      	ldr	r2, [pc, #496]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007c86:	7952      	ldrb	r2, [r2, #5]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d3b9      	bcc.n	8007c00 <CheckAttachedButtons+0xac>
					++dblCounter[i];			
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	464a      	mov	r2, r9
 8007c90:	7013      	strb	r3, [r2, #0]
 8007c92:	e7cd      	b.n	8007c30 <CheckAttachedButtons+0xdc>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 8007c94:	2207      	movs	r2, #7
 8007c96:	4651      	mov	r1, sl
 8007c98:	700a      	strb	r2, [r1, #0]
					++pressCounter[i];
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	603a      	str	r2, [r7, #0]
 8007c9e:	e7ce      	b.n	8007c3e <CheckAttachedButtons+0xea>
					else if (clicked == 2) {
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d11e      	bne.n	8007ce2 <CheckAttachedButtons+0x18e>
 8007ca4:	4649      	mov	r1, r9
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8007ca6:	780b      	ldrb	r3, [r1, #0]
 8007ca8:	4a73      	ldr	r2, [pc, #460]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007caa:	7912      	ldrb	r2, [r2, #4]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d218      	bcs.n	8007ce2 <CheckAttachedButtons+0x18e>
 8007cb0:	4a71      	ldr	r2, [pc, #452]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007cb2:	7952      	ldrb	r2, [r2, #5]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d914      	bls.n	8007ce2 <CheckAttachedButtons+0x18e>
							clicked = 3;																				// Record a possible double click 
 8007cb8:	4b6e      	ldr	r3, [pc, #440]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007cba:	2203      	movs	r2, #3
 8007cbc:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	700b      	strb	r3, [r1, #0]
 8007cc2:	e00e      	b.n	8007ce2 <CheckAttachedButtons+0x18e>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8007cc4:	3bf5      	subs	r3, #245	; 0xf5
 8007cc6:	3bff      	subs	r3, #255	; 0xff
 8007cc8:	4a6c      	ldr	r2, [pc, #432]	; (8007e7c <CheckAttachedButtons+0x328>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d809      	bhi.n	8007ce2 <CheckAttachedButtons+0x18e>
					if (clicked)	clicked = 0;															// Cannot be a click
 8007cce:	4b69      	ldr	r3, [pc, #420]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <CheckAttachedButtons+0x188>
 8007cd6:	4b67      	ldr	r3, [pc, #412]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8007cdc:	0020      	movs	r0, r4
 8007cde:	f7ff febd 	bl	8007a5c <CheckForTimedButtonPress>
 8007ce2:	0031      	movs	r1, r6
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	4b64      	ldr	r3, [pc, #400]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d349      	bcc.n	8007d82 <CheckAttachedButtons+0x22e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 8007cee:	d028      	beq.n	8007d42 <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d201      	bcs.n	8007cfa <CheckAttachedButtons+0x1a6>
					pressCounter[i] = 0;				
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	603b      	str	r3, [r7, #0]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8007cfa:	680b      	ldr	r3, [r1, #0]
 8007cfc:	4a5e      	ldr	r2, [pc, #376]	; (8007e78 <CheckAttachedButtons+0x324>)
 8007cfe:	8852      	ldrh	r2, [r2, #2]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d939      	bls.n	8007d78 <CheckAttachedButtons+0x224>
 8007d04:	22fa      	movs	r2, #250	; 0xfa
 8007d06:	0052      	lsls	r2, r2, #1
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d235      	bcs.n	8007d78 <CheckAttachedButtons+0x224>
					if (clicked == 1)
 8007d0c:	4b59      	ldr	r3, [pc, #356]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d01c      	beq.n	8007d4e <CheckAttachedButtons+0x1fa>
					else if (clicked == 3)
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d134      	bne.n	8007d82 <CheckAttachedButtons+0x22e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8007d18:	3303      	adds	r3, #3
 8007d1a:	4652      	mov	r2, sl
 8007d1c:	7013      	strb	r3, [r2, #0]
						clicked = 0;																					// Prepare for a single click					
 8007d1e:	4b55      	ldr	r3, [pc, #340]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8007d24:	4b56      	ldr	r3, [pc, #344]	; (8007e80 <CheckAttachedButtons+0x32c>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d13e      	bne.n	8007daa <CheckAttachedButtons+0x256>
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	7a1b      	ldrb	r3, [r3, #8]
 8007d30:	079b      	lsls	r3, r3, #30
 8007d32:	d53a      	bpl.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007d34:	4b52      	ldr	r3, [pc, #328]	; (8007e80 <CheckAttachedButtons+0x32c>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8007d3a:	0020      	movs	r0, r4
 8007d3c:	f7ff fe8b 	bl	8007a56 <buttonDblClickedCallback>
 8007d40:	e033      	b.n	8007daa <CheckAttachedButtons+0x256>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8007d42:	2208      	movs	r2, #8
 8007d44:	4650      	mov	r0, sl
 8007d46:	7002      	strb	r2, [r0, #0]
					++releaseCounter[i];
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	6032      	str	r2, [r6, #0]
 8007d4c:	e7d0      	b.n	8007cf0 <CheckAttachedButtons+0x19c>
						button[i].state = CLICKED;														// Record a single button click event
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4652      	mov	r2, sl
 8007d52:	7013      	strb	r3, [r2, #0]
						clicked = 2;																					// Prepare for a double click
 8007d54:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <CheckAttachedButtons+0x320>)
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 8007d5a:	4b49      	ldr	r3, [pc, #292]	; (8007e80 <CheckAttachedButtons+0x32c>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d123      	bne.n	8007daa <CheckAttachedButtons+0x256>
 8007d62:	4653      	mov	r3, sl
 8007d64:	7a1b      	ldrb	r3, [r3, #8]
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	d51f      	bpl.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007d6a:	4b45      	ldr	r3, [pc, #276]	; (8007e80 <CheckAttachedButtons+0x32c>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8007d70:	0020      	movs	r0, r4
 8007d72:	f7ff fe6f 	bl	8007a54 <buttonClickedCallback>
 8007d76:	e018      	b.n	8007daa <CheckAttachedButtons+0x256>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 8007d78:	3bf5      	subs	r3, #245	; 0xf5
 8007d7a:	3bff      	subs	r3, #255	; 0xff
 8007d7c:	4a3f      	ldr	r2, [pc, #252]	; (8007e7c <CheckAttachedButtons+0x328>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d909      	bls.n	8007d96 <CheckAttachedButtons+0x242>
 8007d82:	4653      	mov	r3, sl
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	3b05      	subs	r3, #5
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	2a09      	cmp	r2, #9
 8007d8c:	d80d      	bhi.n	8007daa <CheckAttachedButtons+0x256>
 8007d8e:	0093      	lsls	r3, r2, #2
 8007d90:	4a3c      	ldr	r2, [pc, #240]	; (8007e84 <CheckAttachedButtons+0x330>)
 8007d92:	58d3      	ldr	r3, [r2, r3]
 8007d94:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8007d96:	0020      	movs	r0, r4
 8007d98:	f7ff fe9e 	bl	8007ad8 <CheckForTimedButtonRelease>
 8007d9c:	e7f1      	b.n	8007d82 <CheckAttachedButtons+0x22e>
					buttonPressedCallback(i);
 8007d9e:	0020      	movs	r0, r4
 8007da0:	f7ff fe56 	bl	8007a50 <buttonPressedCallback>
					button[i].state = NONE;
 8007da4:	2300      	movs	r3, #0
 8007da6:	4652      	mov	r2, sl
 8007da8:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007daa:	3401      	adds	r4, #1
 8007dac:	b2e4      	uxtb	r4, r4
 8007dae:	3509      	adds	r5, #9
 8007db0:	3604      	adds	r6, #4
 8007db2:	2304      	movs	r3, #4
 8007db4:	469c      	mov	ip, r3
 8007db6:	44e0      	add	r8, ip
 8007db8:	3b03      	subs	r3, #3
 8007dba:	469c      	mov	ip, r3
 8007dbc:	44e1      	add	r9, ip
 8007dbe:	2c07      	cmp	r4, #7
 8007dc0:	d100      	bne.n	8007dc4 <CheckAttachedButtons+0x270>
 8007dc2:	e0d1      	b.n	8007f68 <CheckAttachedButtons+0x414>
 8007dc4:	46aa      	mov	sl, r5
		if (button[i].type)			// Only check defined butons
 8007dc6:	786b      	ldrb	r3, [r5, #1]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ee      	beq.n	8007daa <CheckAttachedButtons+0x256>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 8007dcc:	4b2c      	ldr	r3, [pc, #176]	; (8007e80 <CheckAttachedButtons+0x32c>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d100      	bne.n	8007dd6 <CheckAttachedButtons+0x282>
 8007dd4:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8007dd6:	230e      	movs	r3, #14
 8007dd8:	aa02      	add	r2, sp, #8
 8007dda:	4694      	mov	ip, r2
 8007ddc:	4463      	add	r3, ip
 8007dde:	469b      	mov	fp, r3
 8007de0:	af05      	add	r7, sp, #20
 8007de2:	9700      	str	r7, [sp, #0]
 8007de4:	ab06      	add	r3, sp, #24
 8007de6:	465a      	mov	r2, fp
 8007de8:	a907      	add	r1, sp, #28
 8007dea:	0020      	movs	r0, r4
 8007dec:	f004 f83a 	bl	800be64 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8007df0:	465b      	mov	r3, fp
 8007df2:	8819      	ldrh	r1, [r3, #0]
 8007df4:	2200      	movs	r2, #0
 8007df6:	9807      	ldr	r0, [sp, #28]
 8007df8:	f008 f8a4 	bl	800ff44 <HAL_GPIO_WritePin>
 8007dfc:	200a      	movs	r0, #10
 8007dfe:	f004 fbf5 	bl	800c5ec <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8007e02:	8839      	ldrh	r1, [r7, #0]
 8007e04:	9806      	ldr	r0, [sp, #24]
 8007e06:	f008 f897 	bl	800ff38 <HAL_GPIO_ReadPin>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d100      	bne.n	8007e10 <CheckAttachedButtons+0x2bc>
 8007e0e:	e6b7      	b.n	8007b80 <CheckAttachedButtons+0x2c>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8007e10:	230e      	movs	r3, #14
 8007e12:	aa02      	add	r2, sp, #8
 8007e14:	4694      	mov	ip, r2
 8007e16:	4463      	add	r3, ip
 8007e18:	8819      	ldrh	r1, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	9807      	ldr	r0, [sp, #28]
 8007e1e:	f008 f891 	bl	800ff44 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8007e22:	4653      	mov	r3, sl
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d100      	bne.n	8007e2c <CheckAttachedButtons+0x2d8>
 8007e2a:	e6ef      	b.n	8007c0c <CheckAttachedButtons+0xb8>
 8007e2c:	d900      	bls.n	8007e30 <CheckAttachedButtons+0x2dc>
 8007e2e:	e6ba      	b.n	8007ba6 <CheckAttachedButtons+0x52>
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d100      	bne.n	8007e36 <CheckAttachedButtons+0x2e2>
 8007e34:	e6c2      	b.n	8007bbc <CheckAttachedButtons+0x68>
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d000      	beq.n	8007e3c <CheckAttachedButtons+0x2e8>
 8007e3a:	e6c5      	b.n	8007bc8 <CheckAttachedButtons+0x74>
					if (connected == GPIO_PIN_SET)	
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d100      	bne.n	8007e44 <CheckAttachedButtons+0x2f0>
 8007e42:	e713      	b.n	8007c6c <CheckAttachedButtons+0x118>
					else if (connected == GPIO_PIN_RESET) 
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d000      	beq.n	8007e4a <CheckAttachedButtons+0x2f6>
 8007e48:	e6be      	b.n	8007bc8 <CheckAttachedButtons+0x74>
						state = OPEN;	
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	9302      	str	r3, [sp, #8]
 8007e4e:	e6c5      	b.n	8007bdc <CheckAttachedButtons+0x88>
					buttonReleasedCallback(i);
 8007e50:	0020      	movs	r0, r4
 8007e52:	f7ff fdfe 	bl	8007a52 <buttonReleasedCallback>
					button[i].state = NONE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	4652      	mov	r2, sl
 8007e5a:	7013      	strb	r3, [r2, #0]
      		break;
 8007e5c:	e7a5      	b.n	8007daa <CheckAttachedButtons+0x256>
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	200014ec 	.word	0x200014ec
 8007e64:	20001554 	.word	0x20001554
 8007e68:	20001538 	.word	0x20001538
 8007e6c:	2000152c 	.word	0x2000152c
 8007e70:	0000fffe 	.word	0x0000fffe
 8007e74:	2000152b 	.word	0x2000152b
 8007e78:	20006940 	.word	0x20006940
 8007e7c:	0000fe0a 	.word	0x0000fe0a
 8007e80:	20001533 	.word	0x20001533
 8007e84:	0801a980 	.word	0x0801a980
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8007e88:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d18c      	bne.n	8007daa <CheckAttachedButtons+0x256>
 8007e90:	4653      	mov	r3, sl
 8007e92:	7a1b      	ldrb	r3, [r3, #8]
 8007e94:	075b      	lsls	r3, r3, #29
 8007e96:	d588      	bpl.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007e98:	4b37      	ldr	r3, [pc, #220]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	0020      	movs	r0, r4
 8007ea2:	f7ff fdd9 	bl	8007a58 <buttonPressedForXCallback>
 8007ea6:	e780      	b.n	8007daa <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8007ea8:	4b33      	ldr	r3, [pc, #204]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d000      	beq.n	8007eb2 <CheckAttachedButtons+0x35e>
 8007eb0:	e77b      	b.n	8007daa <CheckAttachedButtons+0x256>
 8007eb2:	4653      	mov	r3, sl
 8007eb4:	7a1b      	ldrb	r3, [r3, #8]
 8007eb6:	071b      	lsls	r3, r3, #28
 8007eb8:	d400      	bmi.n	8007ebc <CheckAttachedButtons+0x368>
 8007eba:	e776      	b.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007ebc:	4b2e      	ldr	r3, [pc, #184]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	0020      	movs	r0, r4
 8007ec6:	f7ff fdc7 	bl	8007a58 <buttonPressedForXCallback>
 8007eca:	e76e      	b.n	8007daa <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8007ecc:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d000      	beq.n	8007ed6 <CheckAttachedButtons+0x382>
 8007ed4:	e769      	b.n	8007daa <CheckAttachedButtons+0x256>
 8007ed6:	4653      	mov	r3, sl
 8007ed8:	7a1b      	ldrb	r3, [r3, #8]
 8007eda:	06db      	lsls	r3, r3, #27
 8007edc:	d400      	bmi.n	8007ee0 <CheckAttachedButtons+0x38c>
 8007ede:	e764      	b.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007ee0:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	0020      	movs	r0, r4
 8007eea:	f7ff fdb5 	bl	8007a58 <buttonPressedForXCallback>
 8007eee:	e75c      	b.n	8007daa <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8007ef0:	4b21      	ldr	r3, [pc, #132]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d000      	beq.n	8007efa <CheckAttachedButtons+0x3a6>
 8007ef8:	e757      	b.n	8007daa <CheckAttachedButtons+0x256>
 8007efa:	4653      	mov	r3, sl
 8007efc:	7a1b      	ldrb	r3, [r3, #8]
 8007efe:	069b      	lsls	r3, r3, #26
 8007f00:	d400      	bmi.n	8007f04 <CheckAttachedButtons+0x3b0>
 8007f02:	e752      	b.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007f04:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	0020      	movs	r0, r4
 8007f0e:	f7ff fda4 	bl	8007a5a <buttonReleasedForYCallback>
 8007f12:	e74a      	b.n	8007daa <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8007f14:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d000      	beq.n	8007f1e <CheckAttachedButtons+0x3ca>
 8007f1c:	e745      	b.n	8007daa <CheckAttachedButtons+0x256>
 8007f1e:	4653      	mov	r3, sl
 8007f20:	7a1b      	ldrb	r3, [r3, #8]
 8007f22:	065b      	lsls	r3, r3, #25
 8007f24:	d400      	bmi.n	8007f28 <CheckAttachedButtons+0x3d4>
 8007f26:	e740      	b.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007f28:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8007f2e:	2102      	movs	r1, #2
 8007f30:	0020      	movs	r0, r4
 8007f32:	f7ff fd92 	bl	8007a5a <buttonReleasedForYCallback>
 8007f36:	e738      	b.n	8007daa <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8007f38:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d000      	beq.n	8007f42 <CheckAttachedButtons+0x3ee>
 8007f40:	e733      	b.n	8007daa <CheckAttachedButtons+0x256>
 8007f42:	4653      	mov	r3, sl
 8007f44:	7a1b      	ldrb	r3, [r3, #8]
 8007f46:	2b7f      	cmp	r3, #127	; 0x7f
 8007f48:	d800      	bhi.n	8007f4c <CheckAttachedButtons+0x3f8>
 8007f4a:	e72e      	b.n	8007daa <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <CheckAttachedButtons+0x424>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8007f52:	2103      	movs	r1, #3
 8007f54:	0020      	movs	r0, r4
 8007f56:	f7ff fd80 	bl	8007a5a <buttonReleasedForYCallback>
 8007f5a:	e726      	b.n	8007daa <CheckAttachedButtons+0x256>
						state = OPEN;			
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	e63c      	b.n	8007bdc <CheckAttachedButtons+0x88>
						state = OFF;
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	9302      	str	r3, [sp, #8]
 8007f66:	e639      	b.n	8007bdc <CheckAttachedButtons+0x88>
}
 8007f68:	b009      	add	sp, #36	; 0x24
 8007f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8007f6c:	46bb      	mov	fp, r7
 8007f6e:	46b2      	mov	sl, r6
 8007f70:	46a9      	mov	r9, r5
 8007f72:	46a0      	mov	r8, r4
 8007f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	20001533 	.word	0x20001533

08007f7c <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8007f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7e:	b08d      	sub	sp, #52	; 0x34
 8007f80:	0006      	movs	r6, r0
 8007f82:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8007f84:	4b41      	ldr	r3, [pc, #260]	; (800808c <AddPortButton+0x110>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d157      	bne.n	800803c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8007f8c:	4b40      	ldr	r3, [pc, #256]	; (8008090 <AddPortButton+0x114>)
 8007f8e:	2204      	movs	r2, #4
 8007f90:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8007f92:	4b3e      	ldr	r3, [pc, #248]	; (800808c <AddPortButton+0x110>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d15a      	bne.n	8008050 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8007f9a:	2512      	movs	r5, #18
 8007f9c:	446d      	add	r5, sp
 8007f9e:	af04      	add	r7, sp, #16
 8007fa0:	9700      	str	r7, [sp, #0]
 8007fa2:	ab05      	add	r3, sp, #20
 8007fa4:	002a      	movs	r2, r5
 8007fa6:	a906      	add	r1, sp, #24
 8007fa8:	0020      	movs	r0, r4
 8007faa:	f003 ff5b 	bl	800be64 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8007fae:	882b      	ldrh	r3, [r5, #0]
 8007fb0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007fba:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8007fbc:	a907      	add	r1, sp, #28
 8007fbe:	9806      	ldr	r0, [sp, #24]
 8007fc0:	f007 fed0 	bl	800fd64 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8007fc4:	883b      	ldrh	r3, [r7, #0]
 8007fc6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fc8:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 8007fce:	a907      	add	r1, sp, #28
 8007fd0:	9805      	ldr	r0, [sp, #20]
 8007fd2:	f007 fec7 	bl	800fd64 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8007fd6:	00e2      	lsls	r2, r4, #3
 8007fd8:	1912      	adds	r2, r2, r4
 8007fda:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <AddPortButton+0x118>)
 8007fdc:	189b      	adds	r3, r3, r2
 8007fde:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007fe0:	0025      	movs	r5, r4
 8007fe2:	353a      	adds	r5, #58	; 0x3a
 8007fe4:	00ad      	lsls	r5, r5, #2
 8007fe6:	210e      	movs	r1, #14
 8007fe8:	4469      	add	r1, sp
 8007fea:	0028      	movs	r0, r5
 8007fec:	f7ff f892 	bl	8007114 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d133      	bne.n	800805c <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8007ff4:	230e      	movs	r3, #14
 8007ff6:	446b      	add	r3, sp
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8007ffc:	0b1b      	lsrs	r3, r3, #12
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	d103      	bne.n	800800a <AddPortButton+0x8e>
 8008002:	230f      	movs	r3, #15
 8008004:	4013      	ands	r3, r2
 8008006:	42b3      	cmp	r3, r6
 8008008:	d015      	beq.n	8008036 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800800a:	0324      	lsls	r4, r4, #12
 800800c:	0231      	lsls	r1, r6, #8
 800800e:	4321      	orrs	r1, r4
 8008010:	b289      	uxth	r1, r1
 8008012:	230e      	movs	r3, #14
 8008014:	446b      	add	r3, sp
 8008016:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008018:	0028      	movs	r0, r5
 800801a:	f7ff f8a7 	bl	800716c <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800801e:	1c68      	adds	r0, r5, #1
 8008020:	2100      	movs	r1, #0
 8008022:	f7ff f8a3 	bl	800716c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008026:	1ca8      	adds	r0, r5, #2
 8008028:	2100      	movs	r1, #0
 800802a:	f7ff f89f 	bl	800716c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 800802e:	1ce8      	adds	r0, r5, #3
 8008030:	2100      	movs	r1, #0
 8008032:	f7ff f89b 	bl	800716c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8008036:	2000      	movs	r0, #0
 8008038:	b00d      	add	sp, #52	; 0x34
 800803a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 800803c:	008d      	lsls	r5, r1, #2
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <AddPortButton+0x11c>)
 8008040:	58e8      	ldr	r0, [r5, r3]
 8008042:	f004 fe77 	bl	800cd34 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <AddPortButton+0x120>)
 8008048:	58e8      	ldr	r0, [r5, r3]
 800804a:	f004 fe73 	bl	800cd34 <osSemaphoreRelease>
 800804e:	e79d      	b.n	8007f8c <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008050:	0020      	movs	r0, r4
 8008052:	f004 fcd1 	bl	800c9f8 <GetUart>
 8008056:	f008 fff6 	bl	8011046 <HAL_UART_DeInit>
 800805a:	e79e      	b.n	8007f9a <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800805c:	0324      	lsls	r4, r4, #12
 800805e:	0231      	lsls	r1, r6, #8
 8008060:	4321      	orrs	r1, r4
 8008062:	b289      	uxth	r1, r1
 8008064:	230e      	movs	r3, #14
 8008066:	446b      	add	r3, sp
 8008068:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 800806a:	0028      	movs	r0, r5
 800806c:	f7ff f87e 	bl	800716c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008070:	1c68      	adds	r0, r5, #1
 8008072:	2100      	movs	r1, #0
 8008074:	f7ff f87a 	bl	800716c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008078:	1ca8      	adds	r0, r5, #2
 800807a:	2100      	movs	r1, #0
 800807c:	f7ff f876 	bl	800716c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008080:	1ce8      	adds	r0, r5, #3
 8008082:	2100      	movs	r1, #0
 8008084:	f7ff f872 	bl	800716c <EE_WriteVariable>
 8008088:	e7d5      	b.n	8008036 <AddPortButton+0xba>
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	20000a7d 	.word	0x20000a7d
 8008090:	200010e0 	.word	0x200010e0
 8008094:	200014ec 	.word	0x200014ec
 8008098:	200069dc 	.word	0x200069dc
 800809c:	200069c0 	.word	0x200069c0

080080a0 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 80080a6:	4837      	ldr	r0, [pc, #220]	; (8008184 <RemovePortButton+0xe4>)
 80080a8:	00e9      	lsls	r1, r5, #3
 80080aa:	1949      	adds	r1, r1, r5
 80080ac:	1842      	adds	r2, r0, r1
 80080ae:	2300      	movs	r3, #0
 80080b0:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 80080b2:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 80080b4:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 80080b6:	7093      	strb	r3, [r2, #2]
 80080b8:	70d3      	strb	r3, [r2, #3]
 80080ba:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 80080bc:	7153      	strb	r3, [r2, #5]
 80080be:	7193      	strb	r3, [r2, #6]
 80080c0:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80080c2:	002c      	movs	r4, r5
 80080c4:	343a      	adds	r4, #58	; 0x3a
 80080c6:	00a4      	lsls	r4, r4, #2
 80080c8:	466b      	mov	r3, sp
 80080ca:	1d99      	adds	r1, r3, #6
 80080cc:	0020      	movs	r0, r4
 80080ce:	f7ff f821 	bl	8007114 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d02b      	beq.n	800812e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 80080d6:	0028      	movs	r0, r5
 80080d8:	f004 fc8e 	bl	800c9f8 <GetUart>
 80080dc:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 80080de:	6803      	ldr	r3, [r0, #0]
 80080e0:	4a29      	ldr	r2, [pc, #164]	; (8008188 <RemovePortButton+0xe8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d034      	beq.n	8008150 <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 80080e6:	4a29      	ldr	r2, [pc, #164]	; (800818c <RemovePortButton+0xec>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d035      	beq.n	8008158 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 80080ec:	4a28      	ldr	r2, [pc, #160]	; (8008190 <RemovePortButton+0xf0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d036      	beq.n	8008160 <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 80080f2:	4a28      	ldr	r2, [pc, #160]	; (8008194 <RemovePortButton+0xf4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d037      	beq.n	8008168 <RemovePortButton+0xc8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 80080f8:	4a27      	ldr	r2, [pc, #156]	; (8008198 <RemovePortButton+0xf8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d038      	beq.n	8008170 <RemovePortButton+0xd0>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 80080fe:	4a27      	ldr	r2, [pc, #156]	; (800819c <RemovePortButton+0xfc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d039      	beq.n	8008178 <RemovePortButton+0xd8>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8008104:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <RemovePortButton+0x100>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d03a      	beq.n	8008180 <RemovePortButton+0xe0>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <RemovePortButton+0x104>)
 800810c:	4694      	mov	ip, r2
 800810e:	4463      	add	r3, ip
 8008110:	1e5c      	subs	r4, r3, #1
 8008112:	41a3      	sbcs	r3, r4
 8008114:	425c      	negs	r4, r3
 8008116:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008118:	4b23      	ldr	r3, [pc, #140]	; (80081a8 <RemovePortButton+0x108>)
 800811a:	2200      	movs	r2, #0
 800811c:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 800811e:	3201      	adds	r2, #1
 8008120:	4922      	ldr	r1, [pc, #136]	; (80081ac <RemovePortButton+0x10c>)
 8008122:	0030      	movs	r0, r6
 8008124:	f008 ffe8 	bl	80110f8 <HAL_UART_Receive_IT>
	
	return result;
}
 8008128:	0020      	movs	r0, r4
 800812a:	b002      	add	sp, #8
 800812c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 800812e:	2100      	movs	r1, #0
 8008130:	0020      	movs	r0, r4
 8008132:	f7ff f81b 	bl	800716c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008136:	1c60      	adds	r0, r4, #1
 8008138:	2100      	movs	r1, #0
 800813a:	f7ff f817 	bl	800716c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800813e:	1ca0      	adds	r0, r4, #2
 8008140:	2100      	movs	r1, #0
 8008142:	f7ff f813 	bl	800716c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008146:	1ce0      	adds	r0, r4, #3
 8008148:	2100      	movs	r1, #0
 800814a:	f7ff f80f 	bl	800716c <EE_WriteVariable>
 800814e:	e7c2      	b.n	80080d6 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008150:	f004 fa8c 	bl	800c66c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008154:	2400      	movs	r4, #0
 8008156:	e7df      	b.n	8008118 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008158:	f004 fa92 	bl	800c680 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800815c:	2400      	movs	r4, #0
 800815e:	e7db      	b.n	8008118 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008160:	f004 faa6 	bl	800c6b0 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008164:	2400      	movs	r4, #0
 8008166:	e7d7      	b.n	8008118 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008168:	f004 faba 	bl	800c6e0 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800816c:	2400      	movs	r4, #0
 800816e:	e7d3      	b.n	8008118 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008170:	f004 face 	bl	800c710 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008174:	2400      	movs	r4, #0
 8008176:	e7cf      	b.n	8008118 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008178:	f004 fae2 	bl	800c740 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800817c:	2400      	movs	r4, #0
 800817e:	e7cb      	b.n	8008118 <RemovePortButton+0x78>
 8008180:	2400      	movs	r4, #0
 8008182:	e7c9      	b.n	8008118 <RemovePortButton+0x78>
 8008184:	200014ec 	.word	0x200014ec
 8008188:	40013800 	.word	0x40013800
 800818c:	40004400 	.word	0x40004400
 8008190:	40004800 	.word	0x40004800
 8008194:	40004c00 	.word	0x40004c00
 8008198:	40005000 	.word	0x40005000
 800819c:	40011400 	.word	0x40011400
 80081a0:	40011800 	.word	0x40011800
 80081a4:	bffee400 	.word	0xbffee400
 80081a8:	200010e0 	.word	0x200010e0
 80081ac:	20000e48 	.word	0x20000e48

080081b0 <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 80081b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b2:	46de      	mov	lr, fp
 80081b4:	4657      	mov	r7, sl
 80081b6:	464e      	mov	r6, r9
 80081b8:	4645      	mov	r5, r8
 80081ba:	b5e0      	push	{r5, r6, r7, lr}
 80081bc:	b085      	sub	sp, #20
 80081be:	0005      	movs	r5, r0
 80081c0:	469c      	mov	ip, r3
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	ab0e      	add	r3, sp, #56	; 0x38
 80081c6:	781e      	ldrb	r6, [r3, #0]
 80081c8:	ab0f      	add	r3, sp, #60	; 0x3c
 80081ca:	781f      	ldrb	r7, [r3, #0]
 80081cc:	ab10      	add	r3, sp, #64	; 0x40
 80081ce:	7818      	ldrb	r0, [r3, #0]
 80081d0:	4681      	mov	r9, r0
 80081d2:	ab11      	add	r3, sp, #68	; 0x44
 80081d4:	7818      	ldrb	r0, [r3, #0]
 80081d6:	4682      	mov	sl, r0
 80081d8:	ab12      	add	r3, sp, #72	; 0x48
 80081da:	7818      	ldrb	r0, [r3, #0]
 80081dc:	4680      	mov	r8, r0
 80081de:	ab13      	add	r3, sp, #76	; 0x4c
 80081e0:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 80081e2:	00ec      	lsls	r4, r5, #3
 80081e4:	1964      	adds	r4, r4, r5
 80081e6:	4bcd      	ldr	r3, [pc, #820]	; (800851c <SetButtonEvents+0x36c>)
 80081e8:	191b      	adds	r3, r3, r4
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d100      	bne.n	80081f2 <SetButtonEvents+0x42>
 80081f0:	e08c      	b.n	800830c <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 80081f2:	00ec      	lsls	r4, r5, #3
 80081f4:	1964      	adds	r4, r4, r5
 80081f6:	4bc9      	ldr	r3, [pc, #804]	; (800851c <SetButtonEvents+0x36c>)
 80081f8:	191b      	adds	r3, r3, r4
 80081fa:	4664      	mov	r4, ip
 80081fc:	709c      	strb	r4, [r3, #2]
 80081fe:	70de      	strb	r6, [r3, #3]
 8008200:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008202:	464c      	mov	r4, r9
 8008204:	715c      	strb	r4, [r3, #5]
 8008206:	4654      	mov	r4, sl
 8008208:	719c      	strb	r4, [r3, #6]
 800820a:	4644      	mov	r4, r8
 800820c:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 800820e:	2801      	cmp	r0, #1
 8008210:	d100      	bne.n	8008214 <SetButtonEvents+0x64>
 8008212:	e0ec      	b.n	80083ee <SetButtonEvents+0x23e>
 8008214:	2800      	cmp	r0, #0
 8008216:	d000      	beq.n	800821a <SetButtonEvents+0x6a>
 8008218:	e124      	b.n	8008464 <SetButtonEvents+0x2b4>
 800821a:	2900      	cmp	r1, #0
 800821c:	d000      	beq.n	8008220 <SetButtonEvents+0x70>
 800821e:	e170      	b.n	8008502 <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008220:	00e9      	lsls	r1, r5, #3
 8008222:	1949      	adds	r1, r1, r5
 8008224:	4bbd      	ldr	r3, [pc, #756]	; (800851c <SetButtonEvents+0x36c>)
 8008226:	185b      	adds	r3, r3, r1
 8008228:	7a19      	ldrb	r1, [r3, #8]
 800822a:	2401      	movs	r4, #1
 800822c:	43a1      	bics	r1, r4
 800822e:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008230:	2a00      	cmp	r2, #0
 8008232:	d100      	bne.n	8008236 <SetButtonEvents+0x86>
 8008234:	e0c3      	b.n	80083be <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008236:	00ea      	lsls	r2, r5, #3
 8008238:	1952      	adds	r2, r2, r5
 800823a:	4bb8      	ldr	r3, [pc, #736]	; (800851c <SetButtonEvents+0x36c>)
 800823c:	189b      	adds	r3, r3, r2
 800823e:	7a1a      	ldrb	r2, [r3, #8]
 8008240:	2102      	movs	r1, #2
 8008242:	430a      	orrs	r2, r1
 8008244:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008246:	2801      	cmp	r0, #1
 8008248:	d100      	bne.n	800824c <SetButtonEvents+0x9c>
 800824a:	e0da      	b.n	8008402 <SetButtonEvents+0x252>
 800824c:	2800      	cmp	r0, #0
 800824e:	d100      	bne.n	8008252 <SetButtonEvents+0xa2>
 8008250:	e0bd      	b.n	80083ce <SetButtonEvents+0x21e>
 8008252:	e107      	b.n	8008464 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008254:	00ea      	lsls	r2, r5, #3
 8008256:	1952      	adds	r2, r2, r5
 8008258:	4bb0      	ldr	r3, [pc, #704]	; (800851c <SetButtonEvents+0x36c>)
 800825a:	189b      	adds	r3, r3, r2
 800825c:	7a1a      	ldrb	r2, [r3, #8]
 800825e:	2110      	movs	r1, #16
 8008260:	430a      	orrs	r2, r1
 8008262:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008264:	2801      	cmp	r0, #1
 8008266:	d100      	bne.n	800826a <SetButtonEvents+0xba>
 8008268:	e0e3      	b.n	8008432 <SetButtonEvents+0x282>
 800826a:	2800      	cmp	r0, #0
 800826c:	d000      	beq.n	8008270 <SetButtonEvents+0xc0>
 800826e:	e0f9      	b.n	8008464 <SetButtonEvents+0x2b4>
 8008270:	464b      	mov	r3, r9
 8008272:	2b00      	cmp	r3, #0
 8008274:	d063      	beq.n	800833e <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008276:	00ea      	lsls	r2, r5, #3
 8008278:	1952      	adds	r2, r2, r5
 800827a:	4ba8      	ldr	r3, [pc, #672]	; (800851c <SetButtonEvents+0x36c>)
 800827c:	189b      	adds	r3, r3, r2
 800827e:	7a1a      	ldrb	r2, [r3, #8]
 8008280:	2120      	movs	r1, #32
 8008282:	430a      	orrs	r2, r1
 8008284:	721a      	strb	r2, [r3, #8]
 8008286:	e00a      	b.n	800829e <SetButtonEvents+0xee>
 8008288:	00ea      	lsls	r2, r5, #3
 800828a:	1952      	adds	r2, r2, r5
 800828c:	4ba3      	ldr	r3, [pc, #652]	; (800851c <SetButtonEvents+0x36c>)
 800828e:	189b      	adds	r3, r3, r2
 8008290:	7a1a      	ldrb	r2, [r3, #8]
 8008292:	2120      	movs	r1, #32
 8008294:	430a      	orrs	r2, r1
 8008296:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008298:	2801      	cmp	r0, #1
 800829a:	d100      	bne.n	800829e <SetButtonEvents+0xee>
 800829c:	e0d1      	b.n	8008442 <SetButtonEvents+0x292>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d000      	beq.n	80082a4 <SetButtonEvents+0xf4>
 80082a2:	e0df      	b.n	8008464 <SetButtonEvents+0x2b4>
 80082a4:	4653      	mov	r3, sl
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d054      	beq.n	8008354 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80082aa:	00ea      	lsls	r2, r5, #3
 80082ac:	1952      	adds	r2, r2, r5
 80082ae:	4b9b      	ldr	r3, [pc, #620]	; (800851c <SetButtonEvents+0x36c>)
 80082b0:	189b      	adds	r3, r3, r2
 80082b2:	7a1a      	ldrb	r2, [r3, #8]
 80082b4:	2140      	movs	r1, #64	; 0x40
 80082b6:	430a      	orrs	r2, r1
 80082b8:	721a      	strb	r2, [r3, #8]
 80082ba:	e00a      	b.n	80082d2 <SetButtonEvents+0x122>
 80082bc:	00ea      	lsls	r2, r5, #3
 80082be:	1952      	adds	r2, r2, r5
 80082c0:	4b96      	ldr	r3, [pc, #600]	; (800851c <SetButtonEvents+0x36c>)
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	7a1a      	ldrb	r2, [r3, #8]
 80082c6:	2140      	movs	r1, #64	; 0x40
 80082c8:	430a      	orrs	r2, r1
 80082ca:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 80082cc:	2801      	cmp	r0, #1
 80082ce:	d100      	bne.n	80082d2 <SetButtonEvents+0x122>
 80082d0:	e0bf      	b.n	8008452 <SetButtonEvents+0x2a2>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d046      	beq.n	8008364 <SetButtonEvents+0x1b4>
 80082d6:	e0c5      	b.n	8008464 <SetButtonEvents+0x2b4>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 80082d8:	0a19      	lsrs	r1, r3, #8
 80082da:	0209      	lsls	r1, r1, #8
 80082dc:	4301      	orrs	r1, r0
 80082de:	ab02      	add	r3, sp, #8
 80082e0:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80082e2:	0020      	movs	r0, r4
 80082e4:	f7fe ff42 	bl	800716c <EE_WriteVariable>
 80082e8:	e0d3      	b.n	8008492 <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 80082ea:	464b      	mov	r3, r9
 80082ec:	4319      	orrs	r1, r3
 80082ee:	4658      	mov	r0, fp
 80082f0:	f7fe ff3c 	bl	800716c <EE_WriteVariable>
 80082f4:	e0dd      	b.n	80084b2 <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 80082f6:	0019      	movs	r1, r3
 80082f8:	0028      	movs	r0, r5
 80082fa:	f7fe ff37 	bl	800716c <EE_WriteVariable>
 80082fe:	e0ea      	b.n	80084d6 <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008300:	0019      	movs	r1, r3
 8008302:	0020      	movs	r0, r4
 8008304:	f7fe ff32 	bl	800716c <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8008308:	2000      	movs	r0, #0
 800830a:	e0f3      	b.n	80084f4 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800830c:	200b      	movs	r0, #11
 800830e:	e0f1      	b.n	80084f4 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008310:	200b      	movs	r0, #11
 8008312:	e0ef      	b.n	80084f4 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008314:	00ea      	lsls	r2, r5, #3
 8008316:	1952      	adds	r2, r2, r5
 8008318:	4b80      	ldr	r3, [pc, #512]	; (800851c <SetButtonEvents+0x36c>)
 800831a:	189b      	adds	r3, r3, r2
 800831c:	7a1a      	ldrb	r2, [r3, #8]
 800831e:	2108      	movs	r1, #8
 8008320:	438a      	bics	r2, r1
 8008322:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008324:	2f00      	cmp	r7, #0
 8008326:	d195      	bne.n	8008254 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008328:	00ea      	lsls	r2, r5, #3
 800832a:	1952      	adds	r2, r2, r5
 800832c:	4b7b      	ldr	r3, [pc, #492]	; (800851c <SetButtonEvents+0x36c>)
 800832e:	189b      	adds	r3, r3, r2
 8008330:	7a1a      	ldrb	r2, [r3, #8]
 8008332:	2110      	movs	r1, #16
 8008334:	438a      	bics	r2, r1
 8008336:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008338:	464b      	mov	r3, r9
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1a4      	bne.n	8008288 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 800833e:	00ea      	lsls	r2, r5, #3
 8008340:	1952      	adds	r2, r2, r5
 8008342:	4b76      	ldr	r3, [pc, #472]	; (800851c <SetButtonEvents+0x36c>)
 8008344:	189b      	adds	r3, r3, r2
 8008346:	7a1a      	ldrb	r2, [r3, #8]
 8008348:	2120      	movs	r1, #32
 800834a:	438a      	bics	r2, r1
 800834c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 800834e:	4653      	mov	r3, sl
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1b3      	bne.n	80082bc <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008354:	00ea      	lsls	r2, r5, #3
 8008356:	1952      	adds	r2, r2, r5
 8008358:	4b70      	ldr	r3, [pc, #448]	; (800851c <SetButtonEvents+0x36c>)
 800835a:	189b      	adds	r3, r3, r2
 800835c:	7a1a      	ldrb	r2, [r3, #8]
 800835e:	2140      	movs	r1, #64	; 0x40
 8008360:	438a      	bics	r2, r1
 8008362:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008364:	4643      	mov	r3, r8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d173      	bne.n	8008452 <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 800836a:	00ea      	lsls	r2, r5, #3
 800836c:	1952      	adds	r2, r2, r5
 800836e:	4b6b      	ldr	r3, [pc, #428]	; (800851c <SetButtonEvents+0x36c>)
 8008370:	189b      	adds	r3, r3, r2
 8008372:	7a19      	ldrb	r1, [r3, #8]
 8008374:	227f      	movs	r2, #127	; 0x7f
 8008376:	400a      	ands	r2, r1
 8008378:	721a      	strb	r2, [r3, #8]
 800837a:	e073      	b.n	8008464 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 800837c:	00ea      	lsls	r2, r5, #3
 800837e:	1952      	adds	r2, r2, r5
 8008380:	4b66      	ldr	r3, [pc, #408]	; (800851c <SetButtonEvents+0x36c>)
 8008382:	189b      	adds	r3, r3, r2
 8008384:	7a1a      	ldrb	r2, [r3, #8]
 8008386:	2104      	movs	r1, #4
 8008388:	438a      	bics	r2, r1
 800838a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 800838c:	2e00      	cmp	r6, #0
 800838e:	d0c1      	beq.n	8008314 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008390:	00ea      	lsls	r2, r5, #3
 8008392:	1952      	adds	r2, r2, r5
 8008394:	4b61      	ldr	r3, [pc, #388]	; (800851c <SetButtonEvents+0x36c>)
 8008396:	189b      	adds	r3, r3, r2
 8008398:	7a1a      	ldrb	r2, [r3, #8]
 800839a:	2108      	movs	r1, #8
 800839c:	430a      	orrs	r2, r1
 800839e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 80083a0:	2801      	cmp	r0, #1
 80083a2:	d03e      	beq.n	8008422 <SetButtonEvents+0x272>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d15d      	bne.n	8008464 <SetButtonEvents+0x2b4>
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	d0bd      	beq.n	8008328 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80083ac:	00ea      	lsls	r2, r5, #3
 80083ae:	1952      	adds	r2, r2, r5
 80083b0:	4b5a      	ldr	r3, [pc, #360]	; (800851c <SetButtonEvents+0x36c>)
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	7a1a      	ldrb	r2, [r3, #8]
 80083b6:	2110      	movs	r1, #16
 80083b8:	430a      	orrs	r2, r1
 80083ba:	721a      	strb	r2, [r3, #8]
 80083bc:	e755      	b.n	800826a <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 80083be:	00ea      	lsls	r2, r5, #3
 80083c0:	1952      	adds	r2, r2, r5
 80083c2:	4b56      	ldr	r3, [pc, #344]	; (800851c <SetButtonEvents+0x36c>)
 80083c4:	189b      	adds	r3, r3, r2
 80083c6:	7a1a      	ldrb	r2, [r3, #8]
 80083c8:	2102      	movs	r1, #2
 80083ca:	438a      	bics	r2, r1
 80083cc:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0d3      	beq.n	800837c <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80083d4:	00ea      	lsls	r2, r5, #3
 80083d6:	1952      	adds	r2, r2, r5
 80083d8:	4b50      	ldr	r3, [pc, #320]	; (800851c <SetButtonEvents+0x36c>)
 80083da:	189b      	adds	r3, r3, r2
 80083dc:	7a1a      	ldrb	r2, [r3, #8]
 80083de:	2104      	movs	r1, #4
 80083e0:	430a      	orrs	r2, r1
 80083e2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 80083e4:	2801      	cmp	r0, #1
 80083e6:	d014      	beq.n	8008412 <SetButtonEvents+0x262>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d0cf      	beq.n	800838c <SetButtonEvents+0x1dc>
 80083ec:	e03a      	b.n	8008464 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80083ee:	00eb      	lsls	r3, r5, #3
 80083f0:	195b      	adds	r3, r3, r5
 80083f2:	4a4a      	ldr	r2, [pc, #296]	; (800851c <SetButtonEvents+0x36c>)
 80083f4:	18d2      	adds	r2, r2, r3
 80083f6:	7a13      	ldrb	r3, [r2, #8]
 80083f8:	2101      	movs	r1, #1
 80083fa:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80083fc:	2102      	movs	r1, #2
 80083fe:	430b      	orrs	r3, r1
 8008400:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008402:	00ea      	lsls	r2, r5, #3
 8008404:	1952      	adds	r2, r2, r5
 8008406:	4b45      	ldr	r3, [pc, #276]	; (800851c <SetButtonEvents+0x36c>)
 8008408:	189b      	adds	r3, r3, r2
 800840a:	7a1a      	ldrb	r2, [r3, #8]
 800840c:	2104      	movs	r1, #4
 800840e:	430a      	orrs	r2, r1
 8008410:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008412:	00ea      	lsls	r2, r5, #3
 8008414:	1952      	adds	r2, r2, r5
 8008416:	4b41      	ldr	r3, [pc, #260]	; (800851c <SetButtonEvents+0x36c>)
 8008418:	189b      	adds	r3, r3, r2
 800841a:	7a1a      	ldrb	r2, [r3, #8]
 800841c:	2108      	movs	r1, #8
 800841e:	430a      	orrs	r2, r1
 8008420:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008422:	00ea      	lsls	r2, r5, #3
 8008424:	1952      	adds	r2, r2, r5
 8008426:	4b3d      	ldr	r3, [pc, #244]	; (800851c <SetButtonEvents+0x36c>)
 8008428:	189b      	adds	r3, r3, r2
 800842a:	7a1a      	ldrb	r2, [r3, #8]
 800842c:	2110      	movs	r1, #16
 800842e:	430a      	orrs	r2, r1
 8008430:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008432:	00ea      	lsls	r2, r5, #3
 8008434:	1952      	adds	r2, r2, r5
 8008436:	4b39      	ldr	r3, [pc, #228]	; (800851c <SetButtonEvents+0x36c>)
 8008438:	189b      	adds	r3, r3, r2
 800843a:	7a1a      	ldrb	r2, [r3, #8]
 800843c:	2120      	movs	r1, #32
 800843e:	430a      	orrs	r2, r1
 8008440:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008442:	00ea      	lsls	r2, r5, #3
 8008444:	1952      	adds	r2, r2, r5
 8008446:	4b35      	ldr	r3, [pc, #212]	; (800851c <SetButtonEvents+0x36c>)
 8008448:	189b      	adds	r3, r3, r2
 800844a:	7a1a      	ldrb	r2, [r3, #8]
 800844c:	2140      	movs	r1, #64	; 0x40
 800844e:	430a      	orrs	r2, r1
 8008450:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008452:	00ea      	lsls	r2, r5, #3
 8008454:	1952      	adds	r2, r2, r5
 8008456:	4b31      	ldr	r3, [pc, #196]	; (800851c <SetButtonEvents+0x36c>)
 8008458:	189b      	adds	r3, r3, r2
 800845a:	7a19      	ldrb	r1, [r3, #8]
 800845c:	2280      	movs	r2, #128	; 0x80
 800845e:	4252      	negs	r2, r2
 8008460:	430a      	orrs	r2, r1
 8008462:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008464:	002c      	movs	r4, r5
 8008466:	343a      	adds	r4, #58	; 0x3a
 8008468:	00a4      	lsls	r4, r4, #2
 800846a:	ab02      	add	r3, sp, #8
 800846c:	1d99      	adds	r1, r3, #6
 800846e:	0020      	movs	r0, r4
 8008470:	f7fe fe50 	bl	8007114 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008474:	2800      	cmp	r0, #0
 8008476:	d000      	beq.n	800847a <SetButtonEvents+0x2ca>
 8008478:	e74a      	b.n	8008310 <SetButtonEvents+0x160>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 800847a:	ab02      	add	r3, sp, #8
 800847c:	1d9a      	adds	r2, r3, #6
 800847e:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008480:	00e8      	lsls	r0, r5, #3
 8008482:	1945      	adds	r5, r0, r5
 8008484:	4825      	ldr	r0, [pc, #148]	; (800851c <SetButtonEvents+0x36c>)
 8008486:	1940      	adds	r0, r0, r5
 8008488:	7a00      	ldrb	r0, [r0, #8]
 800848a:	7812      	ldrb	r2, [r2, #0]
 800848c:	4282      	cmp	r2, r0
 800848e:	d000      	beq.n	8008492 <SetButtonEvents+0x2e2>
 8008490:	e722      	b.n	80082d8 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008492:	1c63      	adds	r3, r4, #1
 8008494:	469b      	mov	fp, r3
 8008496:	ab02      	add	r3, sp, #8
 8008498:	1d9d      	adds	r5, r3, #6
 800849a:	0029      	movs	r1, r5
 800849c:	4658      	mov	r0, fp
 800849e:	f7fe fe39 	bl	8007114 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 80084a2:	9b01      	ldr	r3, [sp, #4]
 80084a4:	0219      	lsls	r1, r3, #8
 80084a6:	882a      	ldrh	r2, [r5, #0]
 80084a8:	464b      	mov	r3, r9
 80084aa:	430b      	orrs	r3, r1
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d000      	beq.n	80084b2 <SetButtonEvents+0x302>
 80084b0:	e71b      	b.n	80082ea <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 80084b2:	1ca5      	adds	r5, r4, #2
 80084b4:	2306      	movs	r3, #6
 80084b6:	aa02      	add	r2, sp, #8
 80084b8:	4694      	mov	ip, r2
 80084ba:	4463      	add	r3, ip
 80084bc:	4699      	mov	r9, r3
 80084be:	0019      	movs	r1, r3
 80084c0:	0028      	movs	r0, r5
 80084c2:	f7fe fe27 	bl	8007114 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 80084c6:	0236      	lsls	r6, r6, #8
 80084c8:	464b      	mov	r3, r9
 80084ca:	881a      	ldrh	r2, [r3, #0]
 80084cc:	4653      	mov	r3, sl
 80084ce:	4333      	orrs	r3, r6
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d000      	beq.n	80084d6 <SetButtonEvents+0x326>
 80084d4:	e70f      	b.n	80082f6 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 80084d6:	3403      	adds	r4, #3
 80084d8:	ab02      	add	r3, sp, #8
 80084da:	1d9d      	adds	r5, r3, #6
 80084dc:	0029      	movs	r1, r5
 80084de:	0020      	movs	r0, r4
 80084e0:	f7fe fe18 	bl	8007114 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 80084e4:	023f      	lsls	r7, r7, #8
 80084e6:	882a      	ldrh	r2, [r5, #0]
 80084e8:	4643      	mov	r3, r8
 80084ea:	433b      	orrs	r3, r7
	return result;
 80084ec:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d000      	beq.n	80084f4 <SetButtonEvents+0x344>
 80084f2:	e705      	b.n	8008300 <SetButtonEvents+0x150>
}
 80084f4:	b005      	add	sp, #20
 80084f6:	bcf0      	pop	{r4, r5, r6, r7}
 80084f8:	46bb      	mov	fp, r7
 80084fa:	46b2      	mov	sl, r6
 80084fc:	46a9      	mov	r9, r5
 80084fe:	46a0      	mov	r8, r4
 8008500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008502:	00e9      	lsls	r1, r5, #3
 8008504:	1949      	adds	r1, r1, r5
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <SetButtonEvents+0x36c>)
 8008508:	185b      	adds	r3, r3, r1
 800850a:	7a19      	ldrb	r1, [r3, #8]
 800850c:	2401      	movs	r4, #1
 800850e:	4321      	orrs	r1, r4
 8008510:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008512:	2800      	cmp	r0, #0
 8008514:	d100      	bne.n	8008518 <SetButtonEvents+0x368>
 8008516:	e68b      	b.n	8008230 <SetButtonEvents+0x80>
 8008518:	e7a4      	b.n	8008464 <SetButtonEvents+0x2b4>
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	200014ec 	.word	0x200014ec

08008520 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008520:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008522:	f006 fa51 	bl	800e9c8 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008526:	b2c4      	uxtb	r4, r0
 8008528:	0020      	movs	r0, r4
 800852a:	f7fe fcab 	bl	8006e84 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800852e:	0020      	movs	r0, r4
 8008530:	f7fe fcd6 	bl	8006ee0 <SwitchStreamDMAToMsg>
}
 8008534:	bd10      	pop	{r4, pc}
	...

08008538 <SetupDMAStreams>:
{
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	0005      	movs	r5, r0
 800853e:	000c      	movs	r4, r1
 8008540:	0016      	movs	r6, r2
 8008542:	220f      	movs	r2, #15
 8008544:	446a      	add	r2, sp
 8008546:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008548:	aa08      	add	r2, sp, #32
 800854a:	7810      	ldrb	r0, [r2, #0]
 800854c:	4283      	cmp	r3, r0
 800854e:	d057      	beq.n	8008600 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008550:	2b00      	cmp	r3, #0
 8008552:	d100      	bne.n	8008556 <SetupDMAStreams+0x1e>
 8008554:	e0ba      	b.n	80086cc <SetupDMAStreams+0x194>
 8008556:	2800      	cmp	r0, #0
 8008558:	d100      	bne.n	800855c <SetupDMAStreams+0x24>
 800855a:	e0ba      	b.n	80086d2 <SetupDMAStreams+0x19a>
	if (direction == FORWARD) 
 800855c:	2d00      	cmp	r5, #0
 800855e:	d054      	beq.n	800860a <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8008560:	2d01      	cmp	r5, #1
 8008562:	d100      	bne.n	8008566 <SetupDMAStreams+0x2e>
 8008564:	e089      	b.n	800867a <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8008566:	2067      	movs	r0, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008568:	2d02      	cmp	r5, #2
 800856a:	d000      	beq.n	800856e <SetupDMAStreams+0x36>
 800856c:	e0af      	b.n	80086ce <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 800856e:	0018      	movs	r0, r3
 8008570:	f004 fa42 	bl	800c9f8 <GetUart>
 8008574:	0005      	movs	r5, r0
 8008576:	ab08      	add	r3, sp, #32
 8008578:	7818      	ldrb	r0, [r3, #0]
 800857a:	f004 fa3d 	bl	800c9f8 <GetUart>
 800857e:	0001      	movs	r1, r0
 8008580:	2201      	movs	r2, #1
 8008582:	0028      	movs	r0, r5
 8008584:	f7fe fce2 	bl	8006f4c <StartDMAstream>
 8008588:	2817      	cmp	r0, #23
 800858a:	d100      	bne.n	800858e <SetupDMAStreams+0x56>
 800858c:	e09f      	b.n	80086ce <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 800858e:	0170      	lsls	r0, r6, #5
 8008590:	1b80      	subs	r0, r0, r6
 8008592:	0080      	lsls	r0, r0, #2
 8008594:	1980      	adds	r0, r0, r6
 8008596:	00c0      	lsls	r0, r0, #3
 8008598:	21fa      	movs	r1, #250	; 0xfa
 800859a:	0089      	lsls	r1, r1, #2
 800859c:	f7f7 fdd8 	bl	8000150 <__udivsi3>
 80085a0:	0005      	movs	r5, r0
 80085a2:	4b4d      	ldr	r3, [pc, #308]	; (80086d8 <SetupDMAStreams+0x1a0>)
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	230f      	movs	r3, #15
 80085a8:	446b      	add	r3, sp
 80085aa:	2200      	movs	r2, #0
 80085ac:	0001      	movs	r1, r0
 80085ae:	484b      	ldr	r0, [pc, #300]	; (80086dc <SetupDMAStreams+0x1a4>)
 80085b0:	f006 f8ae 	bl	800e710 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 80085b4:	466b      	mov	r3, sp
 80085b6:	7bdb      	ldrb	r3, [r3, #15]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4a48      	ldr	r2, [pc, #288]	; (80086e0 <SetupDMAStreams+0x1a8>)
 80085be:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80085c0:	ab08      	add	r3, sp, #32
 80085c2:	7818      	ldrb	r0, [r3, #0]
 80085c4:	f004 fa18 	bl	800c9f8 <GetUart>
 80085c8:	0006      	movs	r6, r0
 80085ca:	466b      	mov	r3, sp
 80085cc:	7bd8      	ldrb	r0, [r3, #15]
 80085ce:	f004 fa13 	bl	800c9f8 <GetUart>
 80085d2:	0001      	movs	r1, r0
 80085d4:	2201      	movs	r2, #1
 80085d6:	0030      	movs	r0, r6
 80085d8:	f7fe fcb8 	bl	8006f4c <StartDMAstream>
 80085dc:	2817      	cmp	r0, #23
 80085de:	d076      	beq.n	80086ce <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80085e0:	4b3d      	ldr	r3, [pc, #244]	; (80086d8 <SetupDMAStreams+0x1a0>)
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	ab08      	add	r3, sp, #32
 80085e6:	2200      	movs	r2, #0
 80085e8:	0029      	movs	r1, r5
 80085ea:	483c      	ldr	r0, [pc, #240]	; (80086dc <SetupDMAStreams+0x1a4>)
 80085ec:	f006 f890 	bl	800e710 <xTimerCreate>
 80085f0:	0006      	movs	r6, r0
		dmaStreamTotal[dst-1] = count;
 80085f2:	ab08      	add	r3, sp, #32
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4a39      	ldr	r2, [pc, #228]	; (80086e0 <SetupDMAStreams+0x1a8>)
 80085fc:	509c      	str	r4, [r3, r2]
 80085fe:	e02c      	b.n	800865a <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 8008600:	4a38      	ldr	r2, [pc, #224]	; (80086e4 <SetupDMAStreams+0x1ac>)
 8008602:	2102      	movs	r1, #2
 8008604:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008606:	2067      	movs	r0, #103	; 0x67
 8008608:	e061      	b.n	80086ce <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 800860a:	0018      	movs	r0, r3
 800860c:	f004 f9f4 	bl	800c9f8 <GetUart>
 8008610:	0005      	movs	r5, r0
 8008612:	ab08      	add	r3, sp, #32
 8008614:	7818      	ldrb	r0, [r3, #0]
 8008616:	f004 f9ef 	bl	800c9f8 <GetUart>
 800861a:	0001      	movs	r1, r0
 800861c:	2201      	movs	r2, #1
 800861e:	0028      	movs	r0, r5
 8008620:	f7fe fc94 	bl	8006f4c <StartDMAstream>
 8008624:	2817      	cmp	r0, #23
 8008626:	d052      	beq.n	80086ce <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008628:	250f      	movs	r5, #15
 800862a:	446d      	add	r5, sp
 800862c:	0170      	lsls	r0, r6, #5
 800862e:	1b80      	subs	r0, r0, r6
 8008630:	0080      	lsls	r0, r0, #2
 8008632:	1980      	adds	r0, r0, r6
 8008634:	00c0      	lsls	r0, r0, #3
 8008636:	21fa      	movs	r1, #250	; 0xfa
 8008638:	0089      	lsls	r1, r1, #2
 800863a:	f7f7 fd89 	bl	8000150 <__udivsi3>
 800863e:	0001      	movs	r1, r0
 8008640:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <SetupDMAStreams+0x1a0>)
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	002b      	movs	r3, r5
 8008646:	2200      	movs	r2, #0
 8008648:	4824      	ldr	r0, [pc, #144]	; (80086dc <SetupDMAStreams+0x1a4>)
 800864a:	f006 f861 	bl	800e710 <xTimerCreate>
 800864e:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 8008650:	782b      	ldrb	r3, [r5, #0]
 8008652:	3b01      	subs	r3, #1
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4a22      	ldr	r2, [pc, #136]	; (80086e0 <SetupDMAStreams+0x1a8>)
 8008658:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 800865a:	2000      	movs	r0, #0
	if (xTimerStream != NULL)
 800865c:	2e00      	cmp	r6, #0
 800865e:	d036      	beq.n	80086ce <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008660:	f005 faca 	bl	800dbf8 <xTaskGetTickCount>
 8008664:	0002      	movs	r2, r0
 8008666:	2301      	movs	r3, #1
 8008668:	425b      	negs	r3, r3
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2300      	movs	r3, #0
 800866e:	2101      	movs	r1, #1
 8008670:	0030      	movs	r0, r6
 8008672:	f006 f86d 	bl	800e750 <xTimerGenericCommand>
	return BOS_OK;
 8008676:	2000      	movs	r0, #0
 8008678:	e029      	b.n	80086ce <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 800867a:	f004 f9bd 	bl	800c9f8 <GetUart>
 800867e:	0005      	movs	r5, r0
 8008680:	230f      	movs	r3, #15
 8008682:	446b      	add	r3, sp
 8008684:	7818      	ldrb	r0, [r3, #0]
 8008686:	f004 f9b7 	bl	800c9f8 <GetUart>
 800868a:	0001      	movs	r1, r0
 800868c:	2201      	movs	r2, #1
 800868e:	0028      	movs	r0, r5
 8008690:	f7fe fc5c 	bl	8006f4c <StartDMAstream>
 8008694:	2817      	cmp	r0, #23
 8008696:	d01a      	beq.n	80086ce <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008698:	0170      	lsls	r0, r6, #5
 800869a:	1b80      	subs	r0, r0, r6
 800869c:	0080      	lsls	r0, r0, #2
 800869e:	1980      	adds	r0, r0, r6
 80086a0:	00c0      	lsls	r0, r0, #3
 80086a2:	21fa      	movs	r1, #250	; 0xfa
 80086a4:	0089      	lsls	r1, r1, #2
 80086a6:	f7f7 fd53 	bl	8000150 <__udivsi3>
 80086aa:	0001      	movs	r1, r0
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <SetupDMAStreams+0x1a0>)
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	ab08      	add	r3, sp, #32
 80086b2:	2200      	movs	r2, #0
 80086b4:	4809      	ldr	r0, [pc, #36]	; (80086dc <SetupDMAStreams+0x1a4>)
 80086b6:	f006 f82b 	bl	800e710 <xTimerCreate>
 80086ba:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 80086bc:	230f      	movs	r3, #15
 80086be:	446b      	add	r3, sp
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4a06      	ldr	r2, [pc, #24]	; (80086e0 <SetupDMAStreams+0x1a8>)
 80086c8:	509c      	str	r4, [r3, r2]
 80086ca:	e7c6      	b.n	800865a <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 80086cc:	2067      	movs	r0, #103	; 0x67
}
 80086ce:	b004      	add	sp, #16
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 80086d2:	2067      	movs	r0, #103	; 0x67
 80086d4:	e7fb      	b.n	80086ce <SetupDMAStreams+0x196>
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	08008521 	.word	0x08008521
 80086dc:	0801a9a8 	.word	0x0801a9a8
 80086e0:	200014a4 	.word	0x200014a4
 80086e4:	200010e0 	.word	0x200010e0

080086e8 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 80086e8:	b510      	push	{r4, lr}
 80086ea:	2806      	cmp	r0, #6
 80086ec:	d80a      	bhi.n	8008704 <NotifyMessagingTask+0x1c>
 80086ee:	0080      	lsls	r0, r0, #2
 80086f0:	4b19      	ldr	r3, [pc, #100]	; (8008758 <NotifyMessagingTask+0x70>)
 80086f2:	581b      	ldr	r3, [r3, r0]
 80086f4:	469f      	mov	pc, r3
	switch (port)
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 80086f6:	4b19      	ldr	r3, [pc, #100]	; (800875c <NotifyMessagingTask+0x74>)
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	2300      	movs	r3, #0
 80086fc:	2202      	movs	r2, #2
 80086fe:	2100      	movs	r1, #0
 8008700:	f005 ff34 	bl	800e56c <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008704:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008706:	4b16      	ldr	r3, [pc, #88]	; (8008760 <NotifyMessagingTask+0x78>)
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	2300      	movs	r3, #0
 800870c:	2202      	movs	r2, #2
 800870e:	2100      	movs	r1, #0
 8008710:	f005 ff2c 	bl	800e56c <xTaskGenericNotify>
 8008714:	e7f6      	b.n	8008704 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008716:	4b13      	ldr	r3, [pc, #76]	; (8008764 <NotifyMessagingTask+0x7c>)
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	2202      	movs	r2, #2
 800871e:	2100      	movs	r1, #0
 8008720:	f005 ff24 	bl	800e56c <xTaskGenericNotify>
 8008724:	e7ee      	b.n	8008704 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <NotifyMessagingTask+0x80>)
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	2202      	movs	r2, #2
 800872e:	2100      	movs	r1, #0
 8008730:	f005 ff1c 	bl	800e56c <xTaskGenericNotify>
 8008734:	e7e6      	b.n	8008704 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <NotifyMessagingTask+0x84>)
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	2202      	movs	r2, #2
 800873e:	2100      	movs	r1, #0
 8008740:	f005 ff14 	bl	800e56c <xTaskGenericNotify>
 8008744:	e7de      	b.n	8008704 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle);	break;
 8008746:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <NotifyMessagingTask+0x88>)
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	2202      	movs	r2, #2
 800874e:	2100      	movs	r1, #0
 8008750:	f005 ff0c 	bl	800e56c <xTaskGenericNotify>
}
 8008754:	e7d6      	b.n	8008704 <NotifyMessagingTask+0x1c>
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	0801a9b4 	.word	0x0801a9b4
 800875c:	200014c4 	.word	0x200014c4
 8008760:	200014c8 	.word	0x200014c8
 8008764:	200014cc 	.word	0x200014cc
 8008768:	200014d0 	.word	0x200014d0
 800876c:	200014d4 	.word	0x200014d4
 8008770:	200014d8 	.word	0x200014d8

08008774 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008776:	46de      	mov	lr, fp
 8008778:	4657      	mov	r7, sl
 800877a:	464e      	mov	r6, r9
 800877c:	4645      	mov	r5, r8
 800877e:	b5e0      	push	{r5, r6, r7, lr}
 8008780:	b085      	sub	sp, #20
 8008782:	0005      	movs	r5, r0
 8008784:	9102      	str	r1, [sp, #8]
 8008786:	0014      	movs	r4, r2
 8008788:	001e      	movs	r6, r3
 800878a:	ab0e      	add	r3, sp, #56	; 0x38
 800878c:	881f      	ldrh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 800878e:	0003      	movs	r3, r0
 8008790:	4313      	orrs	r3, r2
 8008792:	d100      	bne.n	8008796 <SendMessageFromPort+0x22>
 8008794:	e173      	b.n	8008a7e <SendMessageFromPort+0x30a>
 8008796:	2800      	cmp	r0, #0
 8008798:	d14c      	bne.n	8008834 <SendMessageFromPort+0xc0>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800879a:	2afd      	cmp	r2, #253	; 0xfd
 800879c:	d800      	bhi.n	80087a0 <SendMessageFromPort+0x2c>
 800879e:	e170      	b.n	8008a82 <SendMessageFromPort+0x30e>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 80087a0:	2000      	movs	r0, #0
 80087a2:	f005 f98b 	bl	800dabc <uxTaskPriorityGet>
 80087a6:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80087a8:	2105      	movs	r1, #5
 80087aa:	2000      	movs	r0, #0
 80087ac:	f005 f996 	bl	800dadc <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 80087b0:	4bbf      	ldr	r3, [pc, #764]	; (8008ab0 <SendMessageFromPort+0x33c>)
 80087b2:	2248      	movs	r2, #72	; 0x48
 80087b4:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80087b6:	3212      	adds	r2, #18
 80087b8:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80087ba:	9b02      	ldr	r3, [sp, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d000      	beq.n	80087c2 <SendMessageFromPort+0x4e>
 80087c0:	e172      	b.n	8008aa8 <SendMessageFromPort+0x334>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 80087c2:	1e7b      	subs	r3, r7, #1
 80087c4:	4abb      	ldr	r2, [pc, #748]	; (8008ab4 <SendMessageFromPort+0x340>)
 80087c6:	5cd7      	ldrb	r7, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 80087c8:	4abb      	ldr	r2, [pc, #748]	; (8008ab8 <SendMessageFromPort+0x344>)
 80087ca:	4690      	mov	r8, r2
 80087cc:	00d9      	lsls	r1, r3, #3
 80087ce:	1ac9      	subs	r1, r1, r3
 80087d0:	00c9      	lsls	r1, r1, #3
 80087d2:	4bba      	ldr	r3, [pc, #744]	; (8008abc <SendMessageFromPort+0x348>)
 80087d4:	18c9      	adds	r1, r1, r3
 80087d6:	003a      	movs	r2, r7
 80087d8:	4640      	mov	r0, r8
 80087da:	f009 fc61 	bl	80120a0 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 80087de:	2303      	movs	r3, #3
 80087e0:	425b      	negs	r3, r3
 80087e2:	469c      	mov	ip, r3
 80087e4:	44e0      	add	r8, ip
 80087e6:	4643      	mov	r3, r8
 80087e8:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 80087ea:	1cfb      	adds	r3, r7, #3
 80087ec:	469b      	mov	fp, r3
 80087ee:	4bb4      	ldr	r3, [pc, #720]	; (8008ac0 <SendMessageFromPort+0x34c>)
 80087f0:	469a      	mov	sl, r3
 80087f2:	465a      	mov	r2, fp
 80087f4:	4641      	mov	r1, r8
 80087f6:	0018      	movs	r0, r3
 80087f8:	f009 fc52 	bl	80120a0 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80087fc:	b2bb      	uxth	r3, r7
 80087fe:	4699      	mov	r9, r3
 8008800:	4659      	mov	r1, fp
 8008802:	4650      	mov	r0, sl
 8008804:	f003 fab2 	bl	800bd6c <CalculateCRC8>
 8008808:	4643      	mov	r3, r8
 800880a:	465a      	mov	r2, fp
 800880c:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 800880e:	2238      	movs	r2, #56	; 0x38
 8008810:	2100      	movs	r1, #0
 8008812:	4650      	mov	r0, sl
 8008814:	f009 fc4d 	bl	80120b2 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008818:	2cfd      	cmp	r4, #253	; 0xfd
 800881a:	d800      	bhi.n	800881e <SendMessageFromPort+0xaa>
 800881c:	e102      	b.n	8008a24 <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 800881e:	2e00      	cmp	r6, #0
 8008820:	d000      	beq.n	8008824 <SendMessageFromPort+0xb0>
 8008822:	e0f5      	b.n	8008a10 <SendMessageFromPort+0x29c>
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d000      	beq.n	800882c <SendMessageFromPort+0xb8>
 800882a:	e0f1      	b.n	8008a10 <SendMessageFromPort+0x29c>
			src = message[4];
 800882c:	4ba0      	ldr	r3, [pc, #640]	; (8008ab0 <SendMessageFromPort+0x33c>)
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	9302      	str	r3, [sp, #8]
 8008832:	e0ed      	b.n	8008a10 <SendMessageFromPort+0x29c>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <SendMessageFromPort+0xcc>
 800883a:	2a00      	cmp	r2, #0
 800883c:	d100      	bne.n	8008840 <SendMessageFromPort+0xcc>
 800883e:	e122      	b.n	8008a86 <SendMessageFromPort+0x312>
	TaskPriority = uxTaskPriorityGet( NULL );
 8008840:	2000      	movs	r0, #0
 8008842:	f005 f93b 	bl	800dabc <uxTaskPriorityGet>
 8008846:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008848:	2105      	movs	r1, #5
 800884a:	2000      	movs	r0, #0
 800884c:	f005 f946 	bl	800dadc <vTaskPrioritySet>
	message[0] = 'H';						
 8008850:	4b97      	ldr	r3, [pc, #604]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008852:	2248      	movs	r2, #72	; 0x48
 8008854:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008856:	3212      	adds	r2, #18
 8008858:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800885a:	2e00      	cmp	r6, #0
 800885c:	d0b1      	beq.n	80087c2 <SendMessageFromPort+0x4e>
		if (src == 0)		src = myID;
 800885e:	9b02      	ldr	r3, [sp, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d078      	beq.n	8008956 <SendMessageFromPort+0x1e2>
		message[2] = length;	
 8008864:	4992      	ldr	r1, [pc, #584]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008866:	2300      	movs	r3, #0
 8008868:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 800886a:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008870:	4a94      	ldr	r2, [pc, #592]	; (8008ac4 <SendMessageFromPort+0x350>)
 8008872:	79d3      	ldrb	r3, [r2, #7]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	7992      	ldrb	r2, [r2, #6]
 8008878:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 800887a:	22ff      	movs	r2, #255	; 0xff
 800887c:	42b2      	cmp	r2, r6
 800887e:	4192      	sbcs	r2, r2
 8008880:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008882:	0052      	lsls	r2, r2, #1
 8008884:	4313      	orrs	r3, r2
 8008886:	b2db      	uxtb	r3, r3
 8008888:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 800888a:	718e      	strb	r6, [r1, #6]
 800888c:	2200      	movs	r2, #0
 800888e:	4693      	mov	fp, r2
		if (extendCode == true) {
 8008890:	2eff      	cmp	r6, #255	; 0xff
 8008892:	d903      	bls.n	800889c <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 8008894:	0a32      	lsrs	r2, r6, #8
 8008896:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008898:	2201      	movs	r2, #1
 800889a:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 800889c:	2f2e      	cmp	r7, #46	; 0x2e
 800889e:	d95e      	bls.n	800895e <SendMessageFromPort+0x1ea>
			message[5] |= 0x80;		
 80088a0:	2280      	movs	r2, #128	; 0x80
 80088a2:	4252      	negs	r2, r2
 80088a4:	4313      	orrs	r3, r2
 80088a6:	4a82      	ldr	r2, [pc, #520]	; (8008ab0 <SendMessageFromPort+0x33c>)
 80088a8:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 80088aa:	4b87      	ldr	r3, [pc, #540]	; (8008ac8 <SendMessageFromPort+0x354>)
 80088ac:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 80088ae:	232e      	movs	r3, #46	; 0x2e
 80088b0:	469a      	mov	sl, r3
					totalNumberOfParams -= numberOfParams;
 80088b2:	4b85      	ldr	r3, [pc, #532]	; (8008ac8 <SendMessageFromPort+0x354>)
 80088b4:	4699      	mov	r9, r3
					ptrShift += numberOfParams;
 80088b6:	4b85      	ldr	r3, [pc, #532]	; (8008acc <SendMessageFromPort+0x358>)
 80088b8:	4698      	mov	r8, r3
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 80088ba:	4653      	mov	r3, sl
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	0033      	movs	r3, r6
 80088c0:	0022      	movs	r2, r4
 80088c2:	9902      	ldr	r1, [sp, #8]
 80088c4:	0028      	movs	r0, r5
 80088c6:	f7ff ff55 	bl	8008774 <SendMessageFromPort>
					osDelay(10);
 80088ca:	200a      	movs	r0, #10
 80088cc:	f004 f9e5 	bl	800cc9a <osDelay>
					totalNumberOfParams -= numberOfParams;
 80088d0:	464b      	mov	r3, r9
 80088d2:	881f      	ldrh	r7, [r3, #0]
 80088d4:	3f2e      	subs	r7, #46	; 0x2e
 80088d6:	b2bf      	uxth	r7, r7
 80088d8:	801f      	strh	r7, [r3, #0]
					ptrShift += numberOfParams;
 80088da:	4643      	mov	r3, r8
 80088dc:	8819      	ldrh	r1, [r3, #0]
 80088de:	312e      	adds	r1, #46	; 0x2e
 80088e0:	b289      	uxth	r1, r1
 80088e2:	8019      	strh	r1, [r3, #0]
			while (totalNumberOfParams != 0)
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	d049      	beq.n	800897c <SendMessageFromPort+0x208>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 80088e8:	2f2d      	cmp	r7, #45	; 0x2d
 80088ea:	d8e6      	bhi.n	80088ba <SendMessageFromPort+0x146>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 80088ec:	4b70      	ldr	r3, [pc, #448]	; (8008ab0 <SendMessageFromPort+0x33c>)
 80088ee:	7958      	ldrb	r0, [r3, #5]
 80088f0:	227f      	movs	r2, #127	; 0x7f
 80088f2:	4002      	ands	r2, r0
 80088f4:	715a      	strb	r2, [r3, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80088f6:	465a      	mov	r2, fp
 80088f8:	1dd0      	adds	r0, r2, #7
 80088fa:	18c0      	adds	r0, r0, r3
 80088fc:	4b74      	ldr	r3, [pc, #464]	; (8008ad0 <SendMessageFromPort+0x35c>)
 80088fe:	18c9      	adds	r1, r1, r3
 8008900:	003a      	movs	r2, r7
 8008902:	f009 fbcd 	bl	80120a0 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	4a70      	ldr	r2, [pc, #448]	; (8008acc <SendMessageFromPort+0x358>)
 800890a:	8013      	strh	r3, [r2, #0]
 800890c:	4a6e      	ldr	r2, [pc, #440]	; (8008ac8 <SendMessageFromPort+0x354>)
 800890e:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8008910:	465b      	mov	r3, fp
 8008912:	1d1e      	adds	r6, r3, #4
 8008914:	19f6      	adds	r6, r6, r7
 8008916:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 8008918:	4b6e      	ldr	r3, [pc, #440]	; (8008ad4 <SendMessageFromPort+0x360>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d05c      	beq.n	80089da <SendMessageFromPort+0x266>
			if (dstGroupID < BOS_BROADCAST)
 8008920:	4b6d      	ldr	r3, [pc, #436]	; (8008ad8 <SendMessageFromPort+0x364>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2bff      	cmp	r3, #255	; 0xff
 8008926:	d100      	bne.n	800892a <SendMessageFromPort+0x1b6>
 8008928:	e0af      	b.n	8008a8a <SendMessageFromPort+0x316>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800892a:	4a6c      	ldr	r2, [pc, #432]	; (8008adc <SendMessageFromPort+0x368>)
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	4690      	mov	r8, r2
 8008930:	2a00      	cmp	r2, #0
 8008932:	d075      	beq.n	8008a20 <SendMessageFromPort+0x2ac>
 8008934:	2201      	movs	r2, #1
 8008936:	409a      	lsls	r2, r3
 8008938:	4694      	mov	ip, r2
 800893a:	4869      	ldr	r0, [pc, #420]	; (8008ae0 <SendMessageFromPort+0x36c>)
 800893c:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 800893e:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008940:	495b      	ldr	r1, [pc, #364]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008942:	4689      	mov	r9, r1
 8008944:	44b9      	add	r9, r7
 8008946:	0029      	movs	r1, r5
 8008948:	4645      	mov	r5, r8
 800894a:	46a2      	mov	sl, r4
 800894c:	4664      	mov	r4, ip
 800894e:	46b4      	mov	ip, r6
 8008950:	465e      	mov	r6, fp
 8008952:	4688      	mov	r8, r1
 8008954:	e01e      	b.n	8008994 <SendMessageFromPort+0x220>
		if (src == 0)		src = myID;
 8008956:	4b63      	ldr	r3, [pc, #396]	; (8008ae4 <SendMessageFromPort+0x370>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	e782      	b.n	8008864 <SendMessageFromPort+0xf0>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800895e:	465b      	mov	r3, fp
 8008960:	3307      	adds	r3, #7
 8008962:	4853      	ldr	r0, [pc, #332]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008964:	1818      	adds	r0, r3, r0
 8008966:	4b59      	ldr	r3, [pc, #356]	; (8008acc <SendMessageFromPort+0x358>)
 8008968:	8819      	ldrh	r1, [r3, #0]
 800896a:	4b59      	ldr	r3, [pc, #356]	; (8008ad0 <SendMessageFromPort+0x35c>)
 800896c:	18c9      	adds	r1, r1, r3
 800896e:	003a      	movs	r2, r7
 8008970:	f009 fb96 	bl	80120a0 <memcpy>
			length = numberOfParams + shift + 4;
 8008974:	1d3e      	adds	r6, r7, #4
 8008976:	445e      	add	r6, fp
 8008978:	b2f6      	uxtb	r6, r6
 800897a:	e7cd      	b.n	8008918 <SendMessageFromPort+0x1a4>
 800897c:	2600      	movs	r6, #0
 800897e:	372e      	adds	r7, #46	; 0x2e
 8008980:	e7ca      	b.n	8008918 <SendMessageFromPort+0x1a4>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008982:	4649      	mov	r1, r9
 8008984:	1889      	adds	r1, r1, r2
 8008986:	1989      	adds	r1, r1, r6
 8008988:	718b      	strb	r3, [r1, #6]
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800898a:	3301      	adds	r3, #1
 800898c:	b29b      	uxth	r3, r3
 800898e:	3002      	adds	r0, #2
 8008990:	42ab      	cmp	r3, r5
 8008992:	d809      	bhi.n	80089a8 <SendMessageFromPort+0x234>
					if (InGroup(i, dstGroupID))
 8008994:	8801      	ldrh	r1, [r0, #0]
 8008996:	420c      	tst	r4, r1
 8008998:	d0f7      	beq.n	800898a <SendMessageFromPort+0x216>
						++groupMembers;							// Add this member
 800899a:	3201      	adds	r2, #1
 800899c:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800899e:	18b9      	adds	r1, r7, r2
 80089a0:	292c      	cmp	r1, #44	; 0x2c
 80089a2:	ddee      	ble.n	8008982 <SendMessageFromPort+0x20e>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80089a4:	2069      	movs	r0, #105	; 0x69
 80089a6:	e04d      	b.n	8008a44 <SendMessageFromPort+0x2d0>
 80089a8:	46b3      	mov	fp, r6
 80089aa:	4666      	mov	r6, ip
 80089ac:	4645      	mov	r5, r8
 80089ae:	4654      	mov	r4, sl
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 80089b0:	465b      	mov	r3, fp
 80089b2:	3307      	adds	r3, #7
 80089b4:	19db      	adds	r3, r3, r7
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	493d      	ldr	r1, [pc, #244]	; (8008ab0 <SendMessageFromPort+0x33c>)
 80089ba:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80089bc:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80089be:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80089c0:	2f2b      	cmp	r7, #43	; 0x2b
 80089c2:	dc3f      	bgt.n	8008a44 <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80089c4:	4848      	ldr	r0, [pc, #288]	; (8008ae8 <SendMessageFromPort+0x374>)
 80089c6:	7801      	ldrb	r1, [r0, #0]
 80089c8:	3101      	adds	r1, #1
 80089ca:	b2c9      	uxtb	r1, r1
 80089cc:	7001      	strb	r1, [r0, #0]
 80089ce:	4838      	ldr	r0, [pc, #224]	; (8008ab0 <SendMessageFromPort+0x33c>)
 80089d0:	18c3      	adds	r3, r0, r3
 80089d2:	7059      	strb	r1, [r3, #1]
 80089d4:	3602      	adds	r6, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80089d6:	18b6      	adds	r6, r6, r2
 80089d8:	b2f6      	uxtb	r6, r6
	message[2] = length;
 80089da:	4b35      	ldr	r3, [pc, #212]	; (8008ab0 <SendMessageFromPort+0x33c>)
 80089dc:	4698      	mov	r8, r3
 80089de:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 80089e0:	1cf3      	adds	r3, r6, #3
 80089e2:	469a      	mov	sl, r3
 80089e4:	4f36      	ldr	r7, [pc, #216]	; (8008ac0 <SendMessageFromPort+0x34c>)
 80089e6:	001a      	movs	r2, r3
 80089e8:	4641      	mov	r1, r8
 80089ea:	0038      	movs	r0, r7
 80089ec:	f009 fb58 	bl	80120a0 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80089f0:	b2b3      	uxth	r3, r6
 80089f2:	4699      	mov	r9, r3
 80089f4:	4651      	mov	r1, sl
 80089f6:	0038      	movs	r0, r7
 80089f8:	f003 f9b8 	bl	800bd6c <CalculateCRC8>
 80089fc:	4643      	mov	r3, r8
 80089fe:	4652      	mov	r2, sl
 8008a00:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008a02:	2238      	movs	r2, #56	; 0x38
 8008a04:	2100      	movs	r1, #0
 8008a06:	0038      	movs	r0, r7
 8008a08:	f009 fb53 	bl	80120b2 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008a0c:	2cfd      	cmp	r4, #253	; 0xfd
 8008a0e:	d909      	bls.n	8008a24 <SendMessageFromPort+0x2b0>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8008a10:	9802      	ldr	r0, [sp, #8]
 8008a12:	f7fa fc77 	bl	8003304 <FindBroadcastRoutes>
 8008a16:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8008a18:	4e34      	ldr	r6, [pc, #208]	; (8008aec <SendMessageFromPort+0x378>)
 8008a1a:	4d32      	ldr	r5, [pc, #200]	; (8008ae4 <SendMessageFromPort+0x370>)
			{
				/* Transmit the message from this port */
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8008a1c:	464f      	mov	r7, r9
 8008a1e:	e024      	b.n	8008a6a <SendMessageFromPort+0x2f6>
			uint8_t groupMembers = 0;
 8008a20:	2200      	movs	r2, #0
 8008a22:	e7c5      	b.n	80089b0 <SendMessageFromPort+0x23c>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8008a24:	464a      	mov	r2, r9
 8008a26:	3204      	adds	r2, #4
 8008a28:	b292      	uxth	r2, r2
 8008a2a:	2332      	movs	r3, #50	; 0x32
 8008a2c:	4920      	ldr	r1, [pc, #128]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008a2e:	0028      	movs	r0, r5
 8008a30:	f004 f850 	bl	800cad4 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 8008a34:	9903      	ldr	r1, [sp, #12]
 8008a36:	2000      	movs	r0, #0
 8008a38:	f005 f850 	bl	800dadc <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8008a3c:	4b2c      	ldr	r3, [pc, #176]	; (8008af0 <SendMessageFromPort+0x37c>)
 8008a3e:	2202      	movs	r2, #2
 8008a40:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008a42:	2000      	movs	r0, #0
}
 8008a44:	b005      	add	sp, #20
 8008a46:	bcf0      	pop	{r4, r5, r6, r7}
 8008a48:	46bb      	mov	fp, r7
 8008a4a:	46b2      	mov	sl, r6
 8008a4c:	46a9      	mov	r9, r5
 8008a4e:	46a0      	mov	r8, r4
 8008a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8008a52:	1d3a      	adds	r2, r7, #4
 8008a54:	b292      	uxth	r2, r2
 8008a56:	2332      	movs	r3, #50	; 0x32
 8008a58:	4915      	ldr	r1, [pc, #84]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008a5a:	f004 f83b 	bl	800cad4 <writePxDMAMutex>
				Delay_ms(1);
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f006 f98e 	bl	800ed80 <HAL_Delay>
 8008a64:	3401      	adds	r4, #1
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8008a66:	2c06      	cmp	r4, #6
 8008a68:	d0e4      	beq.n	8008a34 <SendMessageFromPort+0x2c0>
 8008a6a:	1c60      	adds	r0, r4, #1
 8008a6c:	b2c0      	uxtb	r0, r0
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8008a6e:	782b      	ldrb	r3, [r5, #0]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	5b9b      	ldrh	r3, [r3, r6]
 8008a76:	4123      	asrs	r3, r4
 8008a78:	07db      	lsls	r3, r3, #31
 8008a7a:	d5f3      	bpl.n	8008a64 <SendMessageFromPort+0x2f0>
 8008a7c:	e7e9      	b.n	8008a52 <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam; 
 8008a7e:	2067      	movs	r0, #103	; 0x67
 8008a80:	e7e0      	b.n	8008a44 <SendMessageFromPort+0x2d0>
 8008a82:	2067      	movs	r0, #103	; 0x67
 8008a84:	e7de      	b.n	8008a44 <SendMessageFromPort+0x2d0>
 8008a86:	2067      	movs	r0, #103	; 0x67
 8008a88:	e7dc      	b.n	8008a44 <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008a8a:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8008a8c:	2f2c      	cmp	r7, #44	; 0x2c
 8008a8e:	d8d9      	bhi.n	8008a44 <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams] = ++bcastID;
 8008a90:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <SendMessageFromPort+0x374>)
 8008a92:	7813      	ldrb	r3, [r2, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	7013      	strb	r3, [r2, #0]
 8008a9a:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <SendMessageFromPort+0x33c>)
 8008a9c:	445a      	add	r2, fp
 8008a9e:	19d7      	adds	r7, r2, r7
 8008aa0:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	b2f6      	uxtb	r6, r6
 8008aa6:	e798      	b.n	80089da <SendMessageFromPort+0x266>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008aa8:	2e00      	cmp	r6, #0
 8008aaa:	d100      	bne.n	8008aae <SendMessageFromPort+0x33a>
 8008aac:	e689      	b.n	80087c2 <SendMessageFromPort+0x4e>
 8008aae:	e6d9      	b.n	8008864 <SendMessageFromPort+0xf0>
 8008ab0:	20000ee8 	.word	0x20000ee8
 8008ab4:	20000f20 	.word	0x20000f20
 8008ab8:	20000eeb 	.word	0x20000eeb
 8008abc:	20000cf8 	.word	0x20000cf8
 8008ac0:	2000143c 	.word	0x2000143c
 8008ac4:	20006940 	.word	0x20006940
 8008ac8:	20001572 	.word	0x20001572
 8008acc:	20001570 	.word	0x20001570
 8008ad0:	20000f28 	.word	0x20000f28
 8008ad4:	20000a7c 	.word	0x20000a7c
 8008ad8:	2000001d 	.word	0x2000001d
 8008adc:	2000001c 	.word	0x2000001c
 8008ae0:	20000eb0 	.word	0x20000eb0
 8008ae4:	2000105c 	.word	0x2000105c
 8008ae8:	20000ca6 	.word	0x20000ca6
 8008aec:	20000ca8 	.word	0x20000ca8
 8008af0:	200010f8 	.word	0x200010f8

08008af4 <ForwardReceivedMessage>:
{
 8008af4:	b530      	push	{r4, r5, lr}
 8008af6:	b083      	sub	sp, #12
 8008af8:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <ForwardReceivedMessage+0x34>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 8008b00:	1e42      	subs	r2, r0, #1
 8008b02:	00d3      	lsls	r3, r2, #3
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <ForwardReceivedMessage+0x38>)
 8008b0a:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <ForwardReceivedMessage+0x3c>)
 8008b0e:	7818      	ldrb	r0, [r3, #0]
 8008b10:	0029      	movs	r1, r5
 8008b12:	f7fa fc95 	bl	8003440 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8008b16:	9400      	str	r4, [sp, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	002a      	movs	r2, r5
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f7ff fe29 	bl	8008774 <SendMessageFromPort>
}
 8008b22:	2000      	movs	r0, #0
 8008b24:	b003      	add	sp, #12
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	20000a7c 	.word	0x20000a7c
 8008b2c:	20000cf8 	.word	0x20000cf8
 8008b30:	2000105c 	.word	0x2000105c

08008b34 <BroadcastReceivedMessage>:
{
 8008b34:	b500      	push	{lr}
 8008b36:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <BroadcastReceivedMessage+0x38>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <BroadcastReceivedMessage+0x3c>)
 8008b40:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8008b42:	28ff      	cmp	r0, #255	; 0xff
 8008b44:	d009      	beq.n	8008b5a <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 8008b46:	9100      	str	r1, [sp, #0]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	22fe      	movs	r2, #254	; 0xfe
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f7ff fe10 	bl	8008774 <SendMessageFromPort>
}
 8008b54:	2000      	movs	r0, #0
 8008b56:	b003      	add	sp, #12
 8008b58:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8008b5a:	9100      	str	r1, [sp, #0]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	32ff      	adds	r2, #255	; 0xff
 8008b60:	2100      	movs	r1, #0
 8008b62:	2000      	movs	r0, #0
 8008b64:	f7ff fe06 	bl	8008774 <SendMessageFromPort>
 8008b68:	e7f4      	b.n	8008b54 <BroadcastReceivedMessage+0x20>
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	20000a7c 	.word	0x20000a7c
 8008b70:	2000001d 	.word	0x2000001d

08008b74 <BroadcastMessage>:
{
 8008b74:	b530      	push	{r4, r5, lr}
 8008b76:	b083      	sub	sp, #12
 8008b78:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <BroadcastMessage+0x44>)
 8008b7c:	2501      	movs	r5, #1
 8008b7e:	701d      	strb	r5, [r3, #0]
 8008b80:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <BroadcastMessage+0x48>)
 8008b82:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8008b84:	29ff      	cmp	r1, #255	; 0xff
 8008b86:	d00e      	beq.n	8008ba6 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8008b88:	9400      	str	r4, [sp, #0]
 8008b8a:	0013      	movs	r3, r2
 8008b8c:	22fe      	movs	r2, #254	; 0xfe
 8008b8e:	0001      	movs	r1, r0
 8008b90:	2000      	movs	r0, #0
 8008b92:	f7ff fdef 	bl	8008774 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8008b96:	0022      	movs	r2, r4
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4809      	ldr	r0, [pc, #36]	; (8008bc0 <BroadcastMessage+0x4c>)
 8008b9c:	f009 fa89 	bl	80120b2 <memset>
}
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	b003      	add	sp, #12
 8008ba4:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8008ba6:	9400      	str	r4, [sp, #0]
 8008ba8:	0013      	movs	r3, r2
 8008baa:	22ff      	movs	r2, #255	; 0xff
 8008bac:	0001      	movs	r1, r0
 8008bae:	2000      	movs	r0, #0
 8008bb0:	f7ff fde0 	bl	8008774 <SendMessageFromPort>
 8008bb4:	e7ef      	b.n	8008b96 <BroadcastMessage+0x22>
 8008bb6:	46c0      	nop			; (mov r8, r8)
 8008bb8:	20000a7c 	.word	0x20000a7c
 8008bbc:	2000001d 	.word	0x2000001d
 8008bc0:	20000f28 	.word	0x20000f28

08008bc4 <SendMessageToModule>:
{
 8008bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	0004      	movs	r4, r0
 8008bca:	000e      	movs	r6, r1
 8008bcc:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 8008bce:	28ff      	cmp	r0, #255	; 0xff
 8008bd0:	d012      	beq.n	8008bf8 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 8008bd2:	4f0d      	ldr	r7, [pc, #52]	; (8008c08 <SendMessageToModule+0x44>)
 8008bd4:	7838      	ldrb	r0, [r7, #0]
 8008bd6:	0021      	movs	r1, r4
 8008bd8:	f7fa fc32 	bl	8003440 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8008bdc:	7839      	ldrb	r1, [r7, #0]
 8008bde:	9500      	str	r5, [sp, #0]
 8008be0:	0033      	movs	r3, r6
 8008be2:	0022      	movs	r2, r4
 8008be4:	f7ff fdc6 	bl	8008774 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8008be8:	002a      	movs	r2, r5
 8008bea:	2100      	movs	r1, #0
 8008bec:	4807      	ldr	r0, [pc, #28]	; (8008c0c <SendMessageToModule+0x48>)
 8008bee:	f009 fa60 	bl	80120b2 <memset>
}
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	b003      	add	sp, #12
 8008bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8008bf8:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <SendMessageToModule+0x44>)
 8008bfa:	7818      	ldrb	r0, [r3, #0]
 8008bfc:	0013      	movs	r3, r2
 8008bfe:	000a      	movs	r2, r1
 8008c00:	21ff      	movs	r1, #255	; 0xff
 8008c02:	f7ff ffb7 	bl	8008b74 <BroadcastMessage>
 8008c06:	e7f4      	b.n	8008bf2 <SendMessageToModule+0x2e>
 8008c08:	2000105c 	.word	0x2000105c
 8008c0c:	20000f28 	.word	0x20000f28

08008c10 <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	46de      	mov	lr, fp
 8008c14:	4657      	mov	r7, sl
 8008c16:	464e      	mov	r6, r9
 8008c18:	4645      	mov	r5, r8
 8008c1a:	b5e0      	push	{r5, r6, r7, lr}
 8008c1c:	b091      	sub	sp, #68	; 0x44
 8008c1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c20:	000f      	movs	r7, r1
 8008c22:	920e      	str	r2, [sp, #56]	; 0x38
 8008c24:	001e      	movs	r6, r3
 8008c26:	ab1a      	add	r3, sp, #104	; 0x68
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4699      	mov	r9, r3
 8008c2c:	ab1d      	add	r3, sp, #116	; 0x74
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8008c32:	4b5e      	ldr	r3, [pc, #376]	; (8008dac <StartScastDMAStream+0x19c>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	428b      	cmp	r3, r1
 8008c38:	d120      	bne.n	8008c7c <StartScastDMAStream+0x6c>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008c3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c3c:	0e1b      	lsrs	r3, r3, #24
 8008c3e:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8008c40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c42:	0c1b      	lsrs	r3, r3, #16
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8008c48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c4a:	0a1b      	lsrs	r3, r3, #8
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008c50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008c52:	0e1b      	lsrs	r3, r3, #24
 8008c54:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8008c56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 8008c5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008c60:	0a1b      	lsrs	r3, r3, #8
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	4698      	mov	r8, r3
 8008c66:	4d52      	ldr	r5, [pc, #328]	; (8008db0 <StartScastDMAStream+0x1a0>)
 8008c68:	2319      	movs	r3, #25
 8008c6a:	469a      	mov	sl, r3
 8008c6c:	44aa      	add	sl, r5
				temp2 = dstP;
 8008c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c70:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008c72:	4c50      	ldr	r4, [pc, #320]	; (8008db4 <StartScastDMAStream+0x1a4>)
 8008c74:	464b      	mov	r3, r9
 8008c76:	46c1      	mov	r9, r8
 8008c78:	4698      	mov	r8, r3
 8008c7a:	e058      	b.n	8008d2e <StartScastDMAStream+0x11e>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008c7c:	4b4d      	ldr	r3, [pc, #308]	; (8008db4 <StartScastDMAStream+0x1a4>)
 8008c7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c80:	0e12      	lsrs	r2, r2, #24
 8008c82:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8008c84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c86:	0c12      	lsrs	r2, r2, #16
 8008c88:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8008c8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c8c:	0a12      	lsrs	r2, r2, #8
 8008c8e:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8008c90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c92:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008c94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c96:	0e12      	lsrs	r2, r2, #24
 8008c98:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8008c9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c9c:	0c12      	lsrs	r2, r2, #16
 8008c9e:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8008ca0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ca2:	0a12      	lsrs	r2, r2, #8
 8008ca4:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8008ca6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ca8:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8008caa:	464a      	mov	r2, r9
 8008cac:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8008cae:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8008cb0:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8008cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cb4:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 8008cb6:	465a      	mov	r2, fp
 8008cb8:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8008cba:	220d      	movs	r2, #13
 8008cbc:	211c      	movs	r1, #28
 8008cbe:	0038      	movs	r0, r7
 8008cc0:	f7ff ff80 	bl	8008bc4 <SendMessageToModule>
		return result;
 8008cc4:	e055      	b.n	8008d72 <StartScastDMAStream+0x162>
				temp1 = FindRoute(route[i], srcM);
 8008cc6:	0039      	movs	r1, r7
 8008cc8:	f7fa fbba 	bl	8003440 <FindRoute>
 8008ccc:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 8008cce:	0031      	movs	r1, r6
 8008cd0:	0038      	movs	r0, r7
 8008cd2:	f7fa fbb5 	bl	8003440 <FindRoute>
			if (route[i] == dstM) {
 8008cd6:	9a06      	ldr	r2, [sp, #24]
 8008cd8:	7850      	ldrb	r0, [r2, #1]
				temp2 = dstP;
 8008cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8008cdc:	42b0      	cmp	r0, r6
 8008cde:	d135      	bne.n	8008d4c <StartScastDMAStream+0x13c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008ce0:	9a08      	ldr	r2, [sp, #32]
 8008ce2:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8008ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce6:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8008ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cea:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8008cec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008cee:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cf2:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8008cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cf6:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 8008cf8:	464a      	mov	r2, r9
 8008cfa:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8008cfc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008cfe:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8008d00:	4642      	mov	r2, r8
 8008d02:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8008d04:	9a07      	ldr	r2, [sp, #28]
 8008d06:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8008d08:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8008d0a:	465b      	mov	r3, fp
 8008d0c:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8008d0e:	0031      	movs	r1, r6
 8008d10:	0038      	movs	r0, r7
 8008d12:	f7fa fb95 	bl	8003440 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8008d16:	9b06      	ldr	r3, [sp, #24]
 8008d18:	7858      	ldrb	r0, [r3, #1]
 8008d1a:	220c      	movs	r2, #12
 8008d1c:	211b      	movs	r1, #27
 8008d1e:	f7ff ff51 	bl	8008bc4 <SendMessageToModule>
			osDelay(10);
 8008d22:	200a      	movs	r0, #10
 8008d24:	f003 ffb9 	bl	800cc9a <osDelay>
 8008d28:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8008d2a:	4555      	cmp	r5, sl
 8008d2c:	d013      	beq.n	8008d56 <StartScastDMAStream+0x146>
		FindRoute(srcM, dstM);
 8008d2e:	0031      	movs	r1, r6
 8008d30:	0038      	movs	r0, r7
 8008d32:	f7fa fb85 	bl	8003440 <FindRoute>
 8008d36:	9506      	str	r5, [sp, #24]
		if (route[i]) 
 8008d38:	7868      	ldrb	r0, [r5, #1]
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0f4      	beq.n	8008d28 <StartScastDMAStream+0x118>
			if (route[i+1]) {
 8008d3e:	78a9      	ldrb	r1, [r5, #2]
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d0c0      	beq.n	8008cc6 <StartScastDMAStream+0xb6>
				temp1 = FindRoute(route[i], route[i+1]);
 8008d44:	f7fa fb7c 	bl	8003440 <FindRoute>
 8008d48:	9007      	str	r0, [sp, #28]
 8008d4a:	e7c0      	b.n	8008cce <StartScastDMAStream+0xbe>
				temp2 = FindRoute(route[i], route[i-1]);
 8008d4c:	7811      	ldrb	r1, [r2, #0]
 8008d4e:	f7fa fb77 	bl	8003440 <FindRoute>
 8008d52:	0003      	movs	r3, r0
 8008d54:	e7c4      	b.n	8008ce0 <StartScastDMAStream+0xd0>
 8008d56:	46c1      	mov	r9, r8
		}
	}
	
	if (srcM == dstM)
 8008d58:	42b7      	cmp	r7, r6
 8008d5a:	d112      	bne.n	8008d82 <StartScastDMAStream+0x172>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8008d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008d64:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008d66:	4648      	mov	r0, r9
 8008d68:	f7ff fbe6 	bl	8008538 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10d      	bne.n	8008d8e <StartScastDMAStream+0x17e>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 8008d72:	2000      	movs	r0, #0
 8008d74:	b011      	add	sp, #68	; 0x44
 8008d76:	bcf0      	pop	{r4, r5, r6, r7}
 8008d78:	46bb      	mov	fp, r7
 8008d7a:	46b2      	mov	sl, r6
 8008d7c:	46a9      	mov	r9, r5
 8008d7e:	46a0      	mov	r8, r4
 8008d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 8008d82:	0031      	movs	r1, r6
 8008d84:	0038      	movs	r0, r7
 8008d86:	f7fa fb5b 	bl	8003440 <FindRoute>
 8008d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d8c:	e7e6      	b.n	8008d5c <StartScastDMAStream+0x14c>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	9302      	str	r3, [sp, #8]
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008da0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008da2:	4648      	mov	r0, r9
 8008da4:	f7fa f810 	bl	8002dc8 <SaveEEstreams>
 8008da8:	e7e3      	b.n	8008d72 <StartScastDMAStream+0x162>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	2000105c 	.word	0x2000105c
 8008db0:	200069f7 	.word	0x200069f7
 8008db4:	20000f28 	.word	0x20000f28

08008db8 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 8008db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dba:	46de      	mov	lr, fp
 8008dbc:	4657      	mov	r7, sl
 8008dbe:	464e      	mov	r6, r9
 8008dc0:	4645      	mov	r5, r8
 8008dc2:	b5e0      	push	{r5, r6, r7, lr}
 8008dc4:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
				++rejectedMsg;							
			}	
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
 8008dca:	4bbc      	ldr	r3, [pc, #752]	; (80090bc <BackEndTask+0x304>)
 8008dcc:	469b      	mov	fp, r3
 8008dce:	e16d      	b.n	80090ac <BackEndTask+0x2f4>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008dd0:	9504      	str	r5, [sp, #16]
 8008dd2:	9603      	str	r6, [sp, #12]
 8008dd4:	7833      	ldrb	r3, [r6, #0]
 8008dd6:	2b3f      	cmp	r3, #63	; 0x3f
 8008dd8:	dd00      	ble.n	8008ddc <BackEndTask+0x24>
 8008dda:	e192      	b.n	8009102 <BackEndTask+0x34a>
 8008ddc:	001a      	movs	r2, r3
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8008dde:	1c78      	adds	r0, r7, #1
 8008de0:	e185      	b.n	80090ee <BackEndTask+0x336>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008de2:	2a3f      	cmp	r2, #63	; 0x3f
 8008de4:	d004      	beq.n	8008df0 <BackEndTask+0x38>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008de6:	3201      	adds	r2, #1
 8008de8:	2a40      	cmp	r2, #64	; 0x40
 8008dea:	d000      	beq.n	8008dee <BackEndTask+0x36>
 8008dec:	e17f      	b.n	80090ee <BackEndTask+0x336>
 8008dee:	e188      	b.n	8009102 <BackEndTask+0x34a>
 8008df0:	0039      	movs	r1, r7
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008df2:	5cba      	ldrb	r2, [r7, r2]
 8008df4:	2a48      	cmp	r2, #72	; 0x48
 8008df6:	d026      	beq.n	8008e46 <BackEndTask+0x8e>
							if (BOS.disableCLI == false)
 8008df8:	4ab1      	ldr	r2, [pc, #708]	; (80090c0 <BackEndTask+0x308>)
 8008dfa:	7ed2      	ldrb	r2, [r2, #27]
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	d02c      	beq.n	8008e5a <BackEndTask+0xa2>
 8008e00:	3501      	adds	r5, #1
 8008e02:	3401      	adds	r4, #1
 8008e04:	3740      	adds	r7, #64	; 0x40
 8008e06:	3601      	adds	r6, #1
		for (port=1 ; port <= NumOfPorts; port++)
 8008e08:	2d06      	cmp	r5, #6
 8008e0a:	d100      	bne.n	8008e0e <BackEndTask+0x56>
 8008e0c:	e14c      	b.n	80090a8 <BackEndTask+0x2f0>
 8008e0e:	1c6b      	adds	r3, r5, #1
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	469a      	mov	sl, r3
 8008e14:	9400      	str	r4, [sp, #0]
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8008e16:	7823      	ldrb	r3, [r4, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d9d9      	bls.n	8008dd0 <BackEndTask+0x18>
			if (MsgDMAStopped[port-1] == true) {
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	5d5b      	ldrb	r3, [r3, r5]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0ed      	beq.n	8008e00 <BackEndTask+0x48>
				MsgDMAStopped[port-1] = false;
 8008e24:	4ba5      	ldr	r3, [pc, #660]	; (80090bc <BackEndTask+0x304>)
 8008e26:	18eb      	adds	r3, r5, r3
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8008e2c:	9b00      	ldr	r3, [sp, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b05      	cmp	r3, #5
 8008e32:	d100      	bne.n	8008e36 <BackEndTask+0x7e>
 8008e34:	e134      	b.n	80090a0 <BackEndTask+0x2e8>
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8008e36:	4650      	mov	r0, sl
 8008e38:	f003 fdde 	bl	800c9f8 <GetUart>
 8008e3c:	2240      	movs	r2, #64	; 0x40
 8008e3e:	0039      	movs	r1, r7
 8008e40:	f008 fa1e 	bl	8011280 <HAL_UART_Receive_DMA>
 8008e44:	e7dc      	b.n	8008e00 <BackEndTask+0x48>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008e46:	783a      	ldrb	r2, [r7, #0]
 8008e48:	2a5a      	cmp	r2, #90	; 0x5a
 8008e4a:	d1d5      	bne.n	8008df8 <BackEndTask+0x40>
					packetLength = UARTRxBuf[port-1][1];
 8008e4c:	787b      	ldrb	r3, [r7, #1]
 8008e4e:	9302      	str	r3, [sp, #8]
 8008e50:	233f      	movs	r3, #63	; 0x3f
 8008e52:	9301      	str	r3, [sp, #4]
					parseStart = 2;
 8008e54:	3b3d      	subs	r3, #61	; 0x3d
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	e034      	b.n	8008ec4 <BackEndTask+0x10c>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008e5a:	1c7a      	adds	r2, r7, #1
 8008e5c:	4694      	mov	ip, r2
 8008e5e:	e021      	b.n	8008ea4 <BackEndTask+0xec>
 8008e60:	2b3f      	cmp	r3, #63	; 0x3f
 8008e62:	d11c      	bne.n	8008e9e <BackEndTask+0xe6>
 8008e64:	780a      	ldrb	r2, [r1, #0]
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	d1ca      	bne.n	8008e00 <BackEndTask+0x48>
										UARTRxBuf[port-1][j] = 0;
 8008e6a:	9a04      	ldr	r2, [sp, #16]
 8008e6c:	0191      	lsls	r1, r2, #6
 8008e6e:	4a95      	ldr	r2, [pc, #596]	; (80090c4 <BackEndTask+0x30c>)
 8008e70:	1852      	adds	r2, r2, r1
 8008e72:	2100      	movs	r1, #0
 8008e74:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8008e76:	3301      	adds	r3, #1
 8008e78:	9a03      	ldr	r2, [sp, #12]
 8008e7a:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8008e7c:	4b92      	ldr	r3, [pc, #584]	; (80090c8 <BackEndTask+0x310>)
 8008e7e:	781a      	ldrb	r2, [r3, #0]
 8008e80:	4892      	ldr	r0, [pc, #584]	; (80090cc <BackEndTask+0x314>)
 8008e82:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 8008e84:	2203      	movs	r2, #3
 8008e86:	9900      	ldr	r1, [sp, #0]
 8008e88:	700a      	strb	r2, [r1, #0]
										PcPort = port;
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8008e8e:	4b90      	ldr	r3, [pc, #576]	; (80090d0 <BackEndTask+0x318>)
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	2300      	movs	r3, #0
 8008e94:	2202      	movs	r2, #2
 8008e96:	2100      	movs	r1, #0
 8008e98:	f005 fb68 	bl	800e56c <xTaskGenericNotify>
										break;
 8008e9c:	e7b0      	b.n	8008e00 <BackEndTask+0x48>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d0ad      	beq.n	8008e00 <BackEndTask+0x48>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008ea4:	5cca      	ldrb	r2, [r1, r3]
 8008ea6:	2a0d      	cmp	r2, #13
 8008ea8:	d1f9      	bne.n	8008e9e <BackEndTask+0xe6>
 8008eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8008eac:	dcd8      	bgt.n	8008e60 <BackEndTask+0xa8>
 8008eae:	4662      	mov	r2, ip
 8008eb0:	5cd2      	ldrb	r2, [r2, r3]
 8008eb2:	2a00      	cmp	r2, #0
 8008eb4:	d0d9      	beq.n	8008e6a <BackEndTask+0xb2>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	e7f4      	b.n	8008ea4 <BackEndTask+0xec>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 8008eba:	233f      	movs	r3, #63	; 0x3f
 8008ebc:	5cfb      	ldrb	r3, [r7, r3]
 8008ebe:	9302      	str	r3, [sp, #8]
					parseStart = 0;				
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9305      	str	r3, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	3303      	adds	r3, #3
 8008ec8:	4698      	mov	r8, r3
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	4443      	add	r3, r8
 8008ece:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 8008ed0:	2340      	movs	r3, #64	; 0x40
 8008ed2:	425b      	negs	r3, r3
 8008ed4:	469c      	mov	ip, r3
 8008ed6:	44e1      	add	r9, ip
 8008ed8:	e133      	b.n	8009142 <BackEndTask+0x38a>
					packetLength = UARTRxBuf[port-1][0];
 8008eda:	783b      	ldrb	r3, [r7, #0]
 8008edc:	9302      	str	r3, [sp, #8]
					parseStart = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	9305      	str	r3, [sp, #20]
 8008ee2:	e7ef      	b.n	8008ec4 <BackEndTask+0x10c>
					Delay_ms(1);
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	f005 ff4b 	bl	800ed80 <HAL_Delay>
					if (packetStart < packetEnd) {
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	4599      	cmp	r9, r3
 8008eee:	dd50      	ble.n	8008f92 <BackEndTask+0x1da>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 8008ef0:	01a9      	lsls	r1, r5, #6
 8008ef2:	469c      	mov	ip, r3
 8008ef4:	4461      	add	r1, ip
 8008ef6:	4b73      	ldr	r3, [pc, #460]	; (80090c4 <BackEndTask+0x30c>)
 8008ef8:	469c      	mov	ip, r3
 8008efa:	4461      	add	r1, ip
 8008efc:	4642      	mov	r2, r8
 8008efe:	4875      	ldr	r0, [pc, #468]	; (80090d4 <BackEndTask+0x31c>)
 8008f00:	f009 f8ce 	bl	80120a0 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	1cd9      	adds	r1, r3, #3
 8008f08:	4872      	ldr	r0, [pc, #456]	; (80090d4 <BackEndTask+0x31c>)
 8008f0a:	f002 ff2f 	bl	800bd6c <CalculateCRC8>
 8008f0e:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8008f10:	2238      	movs	r2, #56	; 0x38
 8008f12:	2100      	movs	r1, #0
 8008f14:	486f      	ldr	r0, [pc, #444]	; (80090d4 <BackEndTask+0x31c>)
 8008f16:	f009 f8cc 	bl	80120b2 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	019b      	lsls	r3, r3, #6
 8008f1e:	4a69      	ldr	r2, [pc, #420]	; (80090c4 <BackEndTask+0x30c>)
 8008f20:	4694      	mov	ip, r2
 8008f22:	4463      	add	r3, ip
 8008f24:	464a      	mov	r2, r9
 8008f26:	5c9b      	ldrb	r3, [r3, r2]
 8008f28:	4543      	cmp	r3, r8
 8008f2a:	d000      	beq.n	8008f2e <BackEndTask+0x176>
 8008f2c:	e111      	b.n	8009152 <BackEndTask+0x39a>
						portStatus[port] = MSG;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	9a00      	ldr	r2, [sp, #0]
 8008f32:	7013      	strb	r3, [r2, #0]
						messageLength[port-1] = packetLength;	
 8008f34:	4b68      	ldr	r3, [pc, #416]	; (80090d8 <BackEndTask+0x320>)
 8008f36:	9a02      	ldr	r2, [sp, #8]
 8008f38:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 8008f3a:	233f      	movs	r3, #63	; 0x3f
 8008f3c:	9905      	ldr	r1, [sp, #20]
 8008f3e:	1a5b      	subs	r3, r3, r1
 8008f40:	4293      	cmp	r3, r2
 8008f42:	db6b      	blt.n	800901c <BackEndTask+0x264>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8008f44:	00e8      	lsls	r0, r5, #3
 8008f46:	1b40      	subs	r0, r0, r5
 8008f48:	00c0      	lsls	r0, r0, #3
 8008f4a:	4b64      	ldr	r3, [pc, #400]	; (80090dc <BackEndTask+0x324>)
 8008f4c:	18c0      	adds	r0, r0, r3
 8008f4e:	01a9      	lsls	r1, r5, #6
 8008f50:	9b05      	ldr	r3, [sp, #20]
 8008f52:	469c      	mov	ip, r3
 8008f54:	4461      	add	r1, ip
 8008f56:	4b5b      	ldr	r3, [pc, #364]	; (80090c4 <BackEndTask+0x30c>)
 8008f58:	18c9      	adds	r1, r1, r3
 8008f5a:	f009 f8a1 	bl	80120a0 <memcpy>
						if (packetStart < packetEnd) {
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	4599      	cmp	r9, r3
 8008f62:	dc00      	bgt.n	8008f66 <BackEndTask+0x1ae>
 8008f64:	e081      	b.n	800906a <BackEndTask+0x2b2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8008f66:	9a02      	ldr	r2, [sp, #8]
 8008f68:	3204      	adds	r2, #4
 8008f6a:	01a8      	lsls	r0, r5, #6
 8008f6c:	469c      	mov	ip, r3
 8008f6e:	4460      	add	r0, ip
 8008f70:	4b54      	ldr	r3, [pc, #336]	; (80090c4 <BackEndTask+0x30c>)
 8008f72:	18c0      	adds	r0, r0, r3
 8008f74:	2100      	movs	r1, #0
 8008f76:	f009 f89c 	bl	80120b2 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	9a03      	ldr	r2, [sp, #12]
 8008f80:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8008f82:	4a57      	ldr	r2, [pc, #348]	; (80090e0 <BackEndTask+0x328>)
 8008f84:	8813      	ldrh	r3, [r2, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	f7ff fbac 	bl	80086e8 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8008f90:	e736      	b.n	8008e00 <BackEndTask+0x48>
 8008f92:	01a9      	lsls	r1, r5, #6
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 8008f94:	2240      	movs	r2, #64	; 0x40
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	1ad0      	subs	r0, r2, r3
 8008f9a:	9107      	str	r1, [sp, #28]
 8008f9c:	469c      	mov	ip, r3
 8008f9e:	4461      	add	r1, ip
 8008fa0:	4b48      	ldr	r3, [pc, #288]	; (80090c4 <BackEndTask+0x30c>)
 8008fa2:	469c      	mov	ip, r3
 8008fa4:	4461      	add	r1, ip
 8008fa6:	9006      	str	r0, [sp, #24]
 8008fa8:	0002      	movs	r2, r0
 8008faa:	484a      	ldr	r0, [pc, #296]	; (80090d4 <BackEndTask+0x31c>)
 8008fac:	f009 f878 	bl	80120a0 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 8008fb0:	4848      	ldr	r0, [pc, #288]	; (80090d4 <BackEndTask+0x31c>)
 8008fb2:	9906      	ldr	r1, [sp, #24]
 8008fb4:	468c      	mov	ip, r1
 8008fb6:	4460      	add	r0, ip
 8008fb8:	4643      	mov	r3, r8
 8008fba:	1a5a      	subs	r2, r3, r1
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	0019      	movs	r1, r3
 8008fc0:	4b40      	ldr	r3, [pc, #256]	; (80090c4 <BackEndTask+0x30c>)
 8008fc2:	469c      	mov	ip, r3
 8008fc4:	4461      	add	r1, ip
 8008fc6:	f009 f86b 	bl	80120a0 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8008fca:	9b02      	ldr	r3, [sp, #8]
 8008fcc:	1cd9      	adds	r1, r3, #3
 8008fce:	4841      	ldr	r0, [pc, #260]	; (80090d4 <BackEndTask+0x31c>)
 8008fd0:	f002 fecc 	bl	800bd6c <CalculateCRC8>
 8008fd4:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8008fd6:	2238      	movs	r2, #56	; 0x38
 8008fd8:	2100      	movs	r1, #0
 8008fda:	483e      	ldr	r0, [pc, #248]	; (80090d4 <BackEndTask+0x31c>)
 8008fdc:	f009 f869 	bl	80120b2 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	019b      	lsls	r3, r3, #6
 8008fe4:	4a37      	ldr	r2, [pc, #220]	; (80090c4 <BackEndTask+0x30c>)
 8008fe6:	4694      	mov	ip, r2
 8008fe8:	4463      	add	r3, ip
 8008fea:	464a      	mov	r2, r9
 8008fec:	5c9b      	ldrb	r3, [r3, r2]
 8008fee:	4543      	cmp	r3, r8
 8008ff0:	d09d      	beq.n	8008f2e <BackEndTask+0x176>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008ff2:	2240      	movs	r2, #64	; 0x40
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	1ad2      	subs	r2, r2, r3
 8008ff8:	4690      	mov	r8, r2
 8008ffa:	01a8      	lsls	r0, r5, #6
 8008ffc:	469c      	mov	ip, r3
 8008ffe:	4460      	add	r0, ip
 8009000:	4b30      	ldr	r3, [pc, #192]	; (80090c4 <BackEndTask+0x30c>)
 8009002:	18c0      	adds	r0, r0, r3
 8009004:	2100      	movs	r1, #0
 8009006:	f009 f854 	bl	80120b2 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800900a:	9a02      	ldr	r2, [sp, #8]
 800900c:	3204      	adds	r2, #4
 800900e:	4643      	mov	r3, r8
 8009010:	1ad2      	subs	r2, r2, r3
 8009012:	2100      	movs	r1, #0
 8009014:	0038      	movs	r0, r7
 8009016:	f009 f84c 	bl	80120b2 <memset>
 800901a:	e0a5      	b.n	8009168 <BackEndTask+0x3b0>
 800901c:	00eb      	lsls	r3, r5, #3
 800901e:	1b5b      	subs	r3, r3, r5
 8009020:	00d9      	lsls	r1, r3, #3
 8009022:	01ab      	lsls	r3, r5, #6
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8009024:	2240      	movs	r2, #64	; 0x40
 8009026:	9805      	ldr	r0, [sp, #20]
 8009028:	1a12      	subs	r2, r2, r0
 800902a:	4690      	mov	r8, r2
 800902c:	4a2b      	ldr	r2, [pc, #172]	; (80090dc <BackEndTask+0x324>)
 800902e:	0010      	movs	r0, r2
 8009030:	9104      	str	r1, [sp, #16]
 8009032:	468c      	mov	ip, r1
 8009034:	4460      	add	r0, ip
 8009036:	9a05      	ldr	r2, [sp, #20]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	469c      	mov	ip, r3
 800903c:	4462      	add	r2, ip
 800903e:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <BackEndTask+0x30c>)
 8009040:	18d1      	adds	r1, r2, r3
 8009042:	4642      	mov	r2, r8
 8009044:	f009 f82c 	bl	80120a0 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8009048:	9904      	ldr	r1, [sp, #16]
 800904a:	0008      	movs	r0, r1
 800904c:	4440      	add	r0, r8
 800904e:	4a23      	ldr	r2, [pc, #140]	; (80090dc <BackEndTask+0x324>)
 8009050:	4694      	mov	ip, r2
 8009052:	4460      	add	r0, ip
 8009054:	9a02      	ldr	r2, [sp, #8]
 8009056:	4641      	mov	r1, r8
 8009058:	1a52      	subs	r2, r2, r1
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	0019      	movs	r1, r3
 800905e:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <BackEndTask+0x30c>)
 8009060:	4698      	mov	r8, r3
 8009062:	4441      	add	r1, r8
 8009064:	f009 f81c 	bl	80120a0 <memcpy>
 8009068:	e779      	b.n	8008f5e <BackEndTask+0x1a6>
 800906a:	01ab      	lsls	r3, r5, #6
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800906c:	2240      	movs	r2, #64	; 0x40
 800906e:	9901      	ldr	r1, [sp, #4]
 8009070:	1a52      	subs	r2, r2, r1
 8009072:	4690      	mov	r8, r2
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	0018      	movs	r0, r3
 8009078:	468c      	mov	ip, r1
 800907a:	4460      	add	r0, ip
 800907c:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <BackEndTask+0x30c>)
 800907e:	18c0      	adds	r0, r0, r3
 8009080:	2100      	movs	r1, #0
 8009082:	f009 f816 	bl	80120b2 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009086:	9a02      	ldr	r2, [sp, #8]
 8009088:	3204      	adds	r2, #4
 800908a:	4641      	mov	r1, r8
 800908c:	1a52      	subs	r2, r2, r1
 800908e:	9b00      	ldr	r3, [sp, #0]
 8009090:	490c      	ldr	r1, [pc, #48]	; (80090c4 <BackEndTask+0x30c>)
 8009092:	468c      	mov	ip, r1
 8009094:	4463      	add	r3, ip
 8009096:	0018      	movs	r0, r3
 8009098:	2100      	movs	r1, #0
 800909a:	f009 f80a 	bl	80120b2 <memset>
 800909e:	e76c      	b.n	8008f7a <BackEndTask+0x1c2>
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	9a00      	ldr	r2, [sp, #0]
 80090a4:	7013      	strb	r3, [r2, #0]
 80090a6:	e6c6      	b.n	8008e36 <BackEndTask+0x7e>
			}				
		}
		
		taskYIELD();
 80090a8:	f005 fcf0 	bl	800ea8c <vPortYield>
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <BackEndTask+0x32c>)
 80090ae:	4698      	mov	r8, r3
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <BackEndTask+0x330>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80090b2:	4f04      	ldr	r7, [pc, #16]	; (80090c4 <BackEndTask+0x30c>)
 80090b4:	2500      	movs	r5, #0
 80090b6:	4644      	mov	r4, r8
 80090b8:	001e      	movs	r6, r3
 80090ba:	e6a8      	b.n	8008e0e <BackEndTask+0x56>
 80090bc:	200012ac 	.word	0x200012ac
 80090c0:	20006940 	.word	0x20006940
 80090c4:	200012b4 	.word	0x200012b4
 80090c8:	20000a7f 	.word	0x20000a7f
 80090cc:	200010e0 	.word	0x200010e0
 80090d0:	200014e8 	.word	0x200014e8
 80090d4:	2000143c 	.word	0x2000143c
 80090d8:	20000f20 	.word	0x20000f20
 80090dc:	20000cf8 	.word	0x20000cf8
 80090e0:	20001574 	.word	0x20001574
 80090e4:	200010e1 	.word	0x200010e1
 80090e8:	20001434 	.word	0x20001434
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80090ec:	3201      	adds	r2, #1
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 80090ee:	2a3e      	cmp	r2, #62	; 0x3e
 80090f0:	dd00      	ble.n	80090f4 <BackEndTask+0x33c>
 80090f2:	e676      	b.n	8008de2 <BackEndTask+0x2a>
 80090f4:	5cb9      	ldrb	r1, [r7, r2]
 80090f6:	2948      	cmp	r1, #72	; 0x48
 80090f8:	d1f8      	bne.n	80090ec <BackEndTask+0x334>
 80090fa:	5c81      	ldrb	r1, [r0, r2]
 80090fc:	295a      	cmp	r1, #90	; 0x5a
 80090fe:	d1f5      	bne.n	80090ec <BackEndTask+0x334>
 8009100:	9201      	str	r2, [sp, #4]
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8009102:	9b01      	ldr	r3, [sp, #4]
 8009104:	2b3d      	cmp	r3, #61	; 0x3d
 8009106:	d100      	bne.n	800910a <BackEndTask+0x352>
 8009108:	e6d7      	b.n	8008eba <BackEndTask+0x102>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	2b3e      	cmp	r3, #62	; 0x3e
 800910e:	d100      	bne.n	8009112 <BackEndTask+0x35a>
 8009110:	e6e3      	b.n	8008eda <BackEndTask+0x122>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	2b3f      	cmp	r3, #63	; 0x3f
 8009116:	d100      	bne.n	800911a <BackEndTask+0x362>
 8009118:	e698      	b.n	8008e4c <BackEndTask+0x94>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	019b      	lsls	r3, r3, #6
 800911e:	4a17      	ldr	r2, [pc, #92]	; (800917c <BackEndTask+0x3c4>)
 8009120:	4694      	mov	ip, r2
 8009122:	4463      	add	r3, ip
 8009124:	9a01      	ldr	r2, [sp, #4]
 8009126:	4694      	mov	ip, r2
 8009128:	4463      	add	r3, ip
 800912a:	7899      	ldrb	r1, [r3, #2]
 800912c:	9102      	str	r1, [sp, #8]
					parseStart = packetStart+3;
 800912e:	0013      	movs	r3, r2
 8009130:	3203      	adds	r2, #3
 8009132:	9205      	str	r2, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8009134:	1cca      	adds	r2, r1, #3
 8009136:	4690      	mov	r8, r2
 8009138:	4443      	add	r3, r8
 800913a:	4699      	mov	r9, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 800913c:	2b3f      	cmp	r3, #63	; 0x3f
 800913e:	dd00      	ble.n	8009142 <BackEndTask+0x38a>
 8009140:	e6c6      	b.n	8008ed0 <BackEndTask+0x118>
				if (packetStart != packetEnd)										// Non-empty packet
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	4599      	cmp	r9, r3
 8009146:	d000      	beq.n	800914a <BackEndTask+0x392>
 8009148:	e6cc      	b.n	8008ee4 <BackEndTask+0x12c>
				if (packetStart < packetEnd) {
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	4599      	cmp	r9, r3
 800914e:	dc00      	bgt.n	8009152 <BackEndTask+0x39a>
 8009150:	e74f      	b.n	8008ff2 <BackEndTask+0x23a>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009152:	9a02      	ldr	r2, [sp, #8]
 8009154:	3204      	adds	r2, #4
 8009156:	01a8      	lsls	r0, r5, #6
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	469c      	mov	ip, r3
 800915c:	4460      	add	r0, ip
 800915e:	4b07      	ldr	r3, [pc, #28]	; (800917c <BackEndTask+0x3c4>)
 8009160:	18c0      	adds	r0, r0, r3
 8009162:	2100      	movs	r1, #0
 8009164:	f008 ffa5 	bl	80120b2 <memset>
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009168:	464b      	mov	r3, r9
 800916a:	3301      	adds	r3, #1
 800916c:	9a03      	ldr	r2, [sp, #12]
 800916e:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 8009170:	4a03      	ldr	r2, [pc, #12]	; (8009180 <BackEndTask+0x3c8>)
 8009172:	8813      	ldrh	r3, [r2, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	8013      	strh	r3, [r2, #0]
 8009178:	e650      	b.n	8008e1c <BackEndTask+0x64>
 800917a:	46c0      	nop			; (mov r8, r8)
 800917c:	200012b4 	.word	0x200012b4
 8009180:	20001710 	.word	0x20001710

08009184 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8009184:	2001      	movs	r0, #1
 8009186:	4770      	bx	lr

08009188 <PxMessagingTask>:
{
 8009188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800918a:	46de      	mov	lr, fp
 800918c:	4657      	mov	r7, sl
 800918e:	464e      	mov	r6, r9
 8009190:	4645      	mov	r5, r8
 8009192:	b5e0      	push	{r5, r6, r7, lr}
 8009194:	b097      	sub	sp, #92	; 0x5c
 8009196:	2300      	movs	r3, #0
 8009198:	9307      	str	r3, [sp, #28]
 800919a:	930b      	str	r3, [sp, #44]	; 0x2c
	port = (int8_t)(unsigned) argument;
 800919c:	b2c3      	uxtb	r3, r0
 800919e:	9309      	str	r3, [sp, #36]	; 0x24
 80091a0:	27ff      	movs	r7, #255	; 0xff
 80091a2:	4007      	ands	r7, r0
		if (messageLength[port-1])
 80091a4:	1e7c      	subs	r4, r7, #1
 80091a6:	00e3      	lsls	r3, r4, #3
 80091a8:	1b1b      	subs	r3, r3, r4
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	930a      	str	r3, [sp, #40]	; 0x28
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 80091ae:	4ad9      	ldr	r2, [pc, #868]	; (8009514 <PxMessagingTask+0x38c>)
 80091b0:	18d2      	adds	r2, r2, r3
 80091b2:	9205      	str	r2, [sp, #20]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	930c      	str	r3, [sp, #48]	; 0x30
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	930d      	str	r3, [sp, #52]	; 0x34
 80091bc:	2500      	movs	r5, #0
			if (cMessage[port-1][2]>>7) {
 80091be:	00e3      	lsls	r3, r4, #3
 80091c0:	1b1b      	subs	r3, r3, r4
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	469a      	mov	sl, r3
 80091c6:	0013      	movs	r3, r2
 80091c8:	9208      	str	r2, [sp, #32]
 80091ca:	3302      	adds	r3, #2
 80091cc:	469b      	mov	fp, r3
 80091ce:	4656      	mov	r6, sl
 80091d0:	46aa      	mov	sl, r5
 80091d2:	e024      	b.n	800921e <PxMessagingTask+0x96>
				code = cMessage[port-1][3+shift];
 80091d4:	4acf      	ldr	r2, [pc, #828]	; (8009514 <PxMessagingTask+0x38c>)
 80091d6:	1992      	adds	r2, r2, r6
 80091d8:	18d3      	adds	r3, r2, r3
 80091da:	78db      	ldrb	r3, [r3, #3]
 80091dc:	4699      	mov	r9, r3
 80091de:	e049      	b.n	8009274 <PxMessagingTask+0xec>
					indMode = IND_SHORT_BLINK;
 80091e0:	4bcd      	ldr	r3, [pc, #820]	; (8009518 <PxMessagingTask+0x390>)
 80091e2:	2203      	movs	r2, #3
 80091e4:	701a      	strb	r2, [r3, #0]
					if (code == CODE_UPDATE) {		// Remote bootloader update
 80091e6:	464b      	mov	r3, r9
 80091e8:	2b19      	cmp	r3, #25
 80091ea:	d058      	beq.n	800929e <PxMessagingTask+0x116>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 80091ec:	2b1a      	cmp	r3, #26
 80091ee:	d060      	beq.n	80092b2 <PxMessagingTask+0x12a>
		if (result == BOS_ERR_UnknownMessage) {
 80091f0:	4653      	mov	r3, sl
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <PxMessagingTask+0x72>
 80091f6:	f001 fab2 	bl	800a75e <PxMessagingTask+0x15d6>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 80091fa:	4dc8      	ldr	r5, [pc, #800]	; (800951c <PxMessagingTask+0x394>)
 80091fc:	5d2a      	ldrb	r2, [r5, r4]
 80091fe:	2100      	movs	r1, #0
 8009200:	9805      	ldr	r0, [sp, #20]
 8009202:	f008 ff56 	bl	80120b2 <memset>
		messageLength[port-1] = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 800920a:	4bc5      	ldr	r3, [pc, #788]	; (8009520 <PxMessagingTask+0x398>)
 800920c:	5ddb      	ldrb	r3, [r3, r7]
 800920e:	3b02      	subs	r3, #2
 8009210:	2b02      	cmp	r3, #2
 8009212:	d902      	bls.n	800921a <PxMessagingTask+0x92>
			portStatus[port] = FREE;
 8009214:	4bc2      	ldr	r3, [pc, #776]	; (8009520 <PxMessagingTask+0x398>)
 8009216:	2200      	movs	r2, #0
 8009218:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 800921a:	f005 fc37 	bl	800ea8c <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800921e:	2101      	movs	r1, #1
 8009220:	4249      	negs	r1, r1
 8009222:	2001      	movs	r0, #1
 8009224:	f005 f956 	bl	800e4d4 <ulTaskNotifyTake>
		if (messageLength[port-1])
 8009228:	4bbc      	ldr	r3, [pc, #752]	; (800951c <PxMessagingTask+0x394>)
 800922a:	5d19      	ldrb	r1, [r3, r4]
 800922c:	2900      	cmp	r1, #0
 800922e:	d0df      	beq.n	80091f0 <PxMessagingTask+0x68>
			if (cMessage[port-1][2]>>7) {
 8009230:	465b      	mov	r3, fp
 8009232:	781a      	ldrb	r2, [r3, #0]
 8009234:	09d3      	lsrs	r3, r2, #7
 8009236:	48bb      	ldr	r0, [pc, #748]	; (8009524 <PxMessagingTask+0x39c>)
 8009238:	7003      	strb	r3, [r0, #0]
			dst = cMessage[port-1][0]; 
 800923a:	4bb6      	ldr	r3, [pc, #728]	; (8009514 <PxMessagingTask+0x38c>)
 800923c:	5cf3      	ldrb	r3, [r6, r3]
 800923e:	4698      	mov	r8, r3
			src = cMessage[port-1][1];	
 8009240:	9b08      	ldr	r3, [sp, #32]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	9307      	str	r3, [sp, #28]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8009246:	2301      	movs	r3, #1
 8009248:	4013      	ands	r3, r2
			shift = 0;
 800924a:	9306      	str	r3, [sp, #24]
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 800924c:	4db6      	ldr	r5, [pc, #728]	; (8009528 <PxMessagingTask+0x3a0>)
 800924e:	0710      	lsls	r0, r2, #28
 8009250:	0f80      	lsrs	r0, r0, #30
 8009252:	71e8      	strb	r0, [r5, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8009254:	2060      	movs	r0, #96	; 0x60
 8009256:	4010      	ands	r0, r2
 8009258:	71a8      	strb	r0, [r5, #6]
			if (extendCode == true) {		
 800925a:	0792      	lsls	r2, r2, #30
 800925c:	d5ba      	bpl.n	80091d4 <PxMessagingTask+0x4c>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 800925e:	4aad      	ldr	r2, [pc, #692]	; (8009514 <PxMessagingTask+0x38c>)
 8009260:	1992      	adds	r2, r2, r6
 8009262:	18d2      	adds	r2, r2, r3
 8009264:	7910      	ldrb	r0, [r2, #4]
 8009266:	0200      	lsls	r0, r0, #8
 8009268:	78d2      	ldrb	r2, [r2, #3]
 800926a:	1812      	adds	r2, r2, r0
 800926c:	b292      	uxth	r2, r2
 800926e:	4691      	mov	r9, r2
				++shift;
 8009270:	3301      	adds	r3, #1
 8009272:	9306      	str	r3, [sp, #24]
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009274:	4643      	mov	r3, r8
 8009276:	3b01      	subs	r3, #1
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2bfc      	cmp	r3, #252	; 0xfc
 800927c:	d826      	bhi.n	80092cc <PxMessagingTask+0x144>
 800927e:	4bab      	ldr	r3, [pc, #684]	; (800952c <PxMessagingTask+0x3a4>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	4543      	cmp	r3, r8
 8009284:	d06d      	beq.n	8009362 <PxMessagingTask+0x1da>
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <PxMessagingTask+0x106>
 800928a:	f001 fa96 	bl	800a7ba <PxMessagingTask+0x1632>
				ForwardReceivedMessage(port);
 800928e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009290:	f7ff fc30 	bl	8008af4 <ForwardReceivedMessage>
				if (BOS.trace)
 8009294:	4ba4      	ldr	r3, [pc, #656]	; (8009528 <PxMessagingTask+0x3a0>)
 8009296:	79db      	ldrb	r3, [r3, #7]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0a4      	beq.n	80091e6 <PxMessagingTask+0x5e>
 800929c:	e7a0      	b.n	80091e0 <PxMessagingTask+0x58>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 800929e:	2064      	movs	r0, #100	; 0x64
 80092a0:	f005 fd6e 	bl	800ed80 <HAL_Delay>
 80092a4:	2300      	movs	r3, #0
 80092a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a8:	4641      	mov	r1, r8
 80092aa:	9807      	ldr	r0, [sp, #28]
 80092ac:	f7fa f996 	bl	80035dc <remoteBootloaderUpdate>
 80092b0:	e79e      	b.n	80091f0 <PxMessagingTask+0x68>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 80092b2:	2064      	movs	r0, #100	; 0x64
 80092b4:	f005 fd64 	bl	800ed80 <HAL_Delay>
 80092b8:	4b96      	ldr	r3, [pc, #600]	; (8009514 <PxMessagingTask+0x38c>)
 80092ba:	199b      	adds	r3, r3, r6
 80092bc:	9a06      	ldr	r2, [sp, #24]
 80092be:	5c9b      	ldrb	r3, [r3, r2]
 80092c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c2:	4641      	mov	r1, r8
 80092c4:	9807      	ldr	r0, [sp, #28]
 80092c6:	f7fa f989 	bl	80035dc <remoteBootloaderUpdate>
 80092ca:	e791      	b.n	80091f0 <PxMessagingTask+0x68>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80092cc:	4643      	mov	r3, r8
 80092ce:	2bff      	cmp	r3, #255	; 0xff
 80092d0:	d03c      	beq.n	800934c <PxMessagingTask+0x1c4>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80092d2:	2bfe      	cmp	r3, #254	; 0xfe
 80092d4:	d145      	bne.n	8009362 <PxMessagingTask+0x1da>
 80092d6:	4b8f      	ldr	r3, [pc, #572]	; (8009514 <PxMessagingTask+0x38c>)
 80092d8:	199b      	adds	r3, r3, r6
 80092da:	1859      	adds	r1, r3, r1
 80092dc:	3901      	subs	r1, #1
 80092de:	780b      	ldrb	r3, [r1, #0]
 80092e0:	4a93      	ldr	r2, [pc, #588]	; (8009530 <PxMessagingTask+0x3a8>)
 80092e2:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 80092e4:	2103      	movs	r1, #3
 80092e6:	468a      	mov	sl, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d086      	beq.n	80091fa <PxMessagingTask+0x72>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 80092ec:	4a90      	ldr	r2, [pc, #576]	; (8009530 <PxMessagingTask+0x3a8>)
 80092ee:	7013      	strb	r3, [r2, #0]
 80092f0:	4a90      	ldr	r2, [pc, #576]	; (8009534 <PxMessagingTask+0x3ac>)
 80092f2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 80092f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092f6:	20fe      	movs	r0, #254	; 0xfe
 80092f8:	f7ff fc1c 	bl	8008b34 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 80092fc:	4b87      	ldr	r3, [pc, #540]	; (800951c <PxMessagingTask+0x394>)
 80092fe:	5d19      	ldrb	r1, [r3, r4]
 8009300:	4b84      	ldr	r3, [pc, #528]	; (8009514 <PxMessagingTask+0x38c>)
 8009302:	199b      	adds	r3, r3, r6
 8009304:	185b      	adds	r3, r3, r1
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	2000      	movs	r0, #0
 800930a:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800930c:	3b02      	subs	r3, #2
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	920b      	str	r2, [sp, #44]	; 0x2c
					for(i=0 ; i<temp ; i++)
 8009312:	2a00      	cmp	r2, #0
 8009314:	d101      	bne.n	800931a <PxMessagingTask+0x192>
 8009316:	f001 fa3f 	bl	800a798 <PxMessagingTask+0x1610>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800931a:	4b84      	ldr	r3, [pc, #528]	; (800952c <PxMessagingTask+0x3a4>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	469c      	mov	ip, r3
 8009320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009322:	18c8      	adds	r0, r1, r3
 8009324:	1a80      	subs	r0, r0, r2
 8009326:	3802      	subs	r0, #2
 8009328:	4b7a      	ldr	r3, [pc, #488]	; (8009514 <PxMessagingTask+0x38c>)
 800932a:	18c0      	adds	r0, r0, r3
 800932c:	2300      	movs	r3, #0
 800932e:	4665      	mov	r5, ip
 8009330:	468c      	mov	ip, r1
 8009332:	0011      	movs	r1, r2
 8009334:	5cc2      	ldrb	r2, [r0, r3]
 8009336:	42aa      	cmp	r2, r5
 8009338:	d101      	bne.n	800933e <PxMessagingTask+0x1b6>
 800933a:	f001 fa25 	bl	800a788 <PxMessagingTask+0x1600>
 800933e:	3301      	adds	r3, #1
					for(i=0 ; i<temp ; i++)
 8009340:	b2da      	uxtb	r2, r3
 8009342:	428a      	cmp	r2, r1
 8009344:	d3f6      	bcc.n	8009334 <PxMessagingTask+0x1ac>
					result = BOS_ERR_WrongID;
 8009346:	2366      	movs	r3, #102	; 0x66
 8009348:	469a      	mov	sl, r3
 800934a:	e756      	b.n	80091fa <PxMessagingTask+0x72>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800934c:	4b71      	ldr	r3, [pc, #452]	; (8009514 <PxMessagingTask+0x38c>)
 800934e:	199b      	adds	r3, r3, r6
 8009350:	1859      	adds	r1, r3, r1
 8009352:	3901      	subs	r1, #1
 8009354:	780b      	ldrb	r3, [r1, #0]
 8009356:	4a76      	ldr	r2, [pc, #472]	; (8009530 <PxMessagingTask+0x3a8>)
 8009358:	7812      	ldrb	r2, [r2, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d115      	bne.n	800938a <PxMessagingTask+0x202>
					result = BOS_ERR_MSG_Reflection;
 800935e:	2303      	movs	r3, #3
 8009360:	469a      	mov	sl, r3
				if (result == BOS_OK)
 8009362:	4653      	mov	r3, sl
 8009364:	2b00      	cmp	r3, #0
 8009366:	d000      	beq.n	800936a <PxMessagingTask+0x1e2>
 8009368:	e742      	b.n	80091f0 <PxMessagingTask+0x68>
				shift += 4;
 800936a:	9d06      	ldr	r5, [sp, #24]
 800936c:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800936e:	4b6b      	ldr	r3, [pc, #428]	; (800951c <PxMessagingTask+0x394>)
 8009370:	5d19      	ldrb	r1, [r3, r4]
 8009372:	1b48      	subs	r0, r1, r5
 8009374:	b2c3      	uxtb	r3, r0
 8009376:	469a      	mov	sl, r3
 8009378:	464b      	mov	r3, r9
 800937a:	2b23      	cmp	r3, #35	; 0x23
 800937c:	d901      	bls.n	8009382 <PxMessagingTask+0x1fa>
 800937e:	f001 f9d0 	bl	800a722 <PxMessagingTask+0x159a>
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4a6c      	ldr	r2, [pc, #432]	; (8009538 <PxMessagingTask+0x3b0>)
 8009386:	58d3      	ldr	r3, [r2, r3]
 8009388:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800938a:	4a69      	ldr	r2, [pc, #420]	; (8009530 <PxMessagingTask+0x3a8>)
 800938c:	7013      	strb	r3, [r2, #0]
 800938e:	4a69      	ldr	r2, [pc, #420]	; (8009534 <PxMessagingTask+0x3ac>)
 8009390:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009392:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009394:	20ff      	movs	r0, #255	; 0xff
 8009396:	f7ff fbcd 	bl	8008b34 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800939a:	4b60      	ldr	r3, [pc, #384]	; (800951c <PxMessagingTask+0x394>)
 800939c:	5d1a      	ldrb	r2, [r3, r4]
 800939e:	4b5d      	ldr	r3, [pc, #372]	; (8009514 <PxMessagingTask+0x38c>)
 80093a0:	199b      	adds	r3, r3, r6
 80093a2:	189b      	adds	r3, r3, r2
 80093a4:	3b01      	subs	r3, #1
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e7da      	b.n	8009362 <PxMessagingTask+0x1da>
							for (p=0 ; p<numOfParams ; p++) 
 80093ac:	4653      	mov	r3, sl
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d022      	beq.n	80093f8 <PxMessagingTask+0x270>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 80093b2:	9b07      	ldr	r3, [sp, #28]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	469c      	mov	ip, r3
 80093b8:	005a      	lsls	r2, r3, #1
 80093ba:	4b60      	ldr	r3, [pc, #384]	; (800953c <PxMessagingTask+0x3b4>)
 80093bc:	5ad3      	ldrh	r3, [r2, r3]
 80093be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c0:	4690      	mov	r8, r2
 80093c2:	4445      	add	r5, r8
 80093c4:	4a53      	ldr	r2, [pc, #332]	; (8009514 <PxMessagingTask+0x38c>)
 80093c6:	18ad      	adds	r5, r5, r2
 80093c8:	2200      	movs	r2, #0
 80093ca:	2080      	movs	r0, #128	; 0x80
 80093cc:	0200      	lsls	r0, r0, #8
 80093ce:	46a0      	mov	r8, r4
 80093d0:	4654      	mov	r4, sl
 80093d2:	46b1      	mov	r9, r6
 80093d4:	001e      	movs	r6, r3
 80093d6:	5ca9      	ldrb	r1, [r5, r2]
 80093d8:	3901      	subs	r1, #1
 80093da:	0003      	movs	r3, r0
 80093dc:	410b      	asrs	r3, r1
 80093de:	431e      	orrs	r6, r3
 80093e0:	b2b6      	uxth	r6, r6
 80093e2:	3201      	adds	r2, #1
							for (p=0 ; p<numOfParams ; p++) 
 80093e4:	b2d3      	uxtb	r3, r2
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	d3f5      	bcc.n	80093d6 <PxMessagingTask+0x24e>
 80093ea:	4644      	mov	r4, r8
 80093ec:	0033      	movs	r3, r6
 80093ee:	464e      	mov	r6, r9
 80093f0:	4662      	mov	r2, ip
 80093f2:	0050      	lsls	r0, r2, #1
 80093f4:	4a51      	ldr	r2, [pc, #324]	; (800953c <PxMessagingTask+0x3b4>)
 80093f6:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 80093f8:	4b51      	ldr	r3, [pc, #324]	; (8009540 <PxMessagingTask+0x3b8>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
							break;		
 80093fe:	2300      	movs	r3, #0
 8009400:	469a      	mov	sl, r3
 8009402:	e6fa      	b.n	80091fa <PxMessagingTask+0x72>
							indMode = IND_PING;	osDelay(10);
 8009404:	4b44      	ldr	r3, [pc, #272]	; (8009518 <PxMessagingTask+0x390>)
 8009406:	2201      	movs	r2, #1
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	200a      	movs	r0, #10
 800940c:	f003 fc45 	bl	800cc9a <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009410:	4b45      	ldr	r3, [pc, #276]	; (8009528 <PxMessagingTask+0x3a0>)
 8009412:	799b      	ldrb	r3, [r3, #6]
 8009414:	2240      	movs	r2, #64	; 0x40
 8009416:	4393      	bics	r3, r2
 8009418:	2200      	movs	r2, #0
 800941a:	4692      	mov	sl, r2
 800941c:	2b20      	cmp	r3, #32
 800941e:	d000      	beq.n	8009422 <PxMessagingTask+0x29a>
 8009420:	e6eb      	b.n	80091fa <PxMessagingTask+0x72>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8009422:	2102      	movs	r1, #2
 8009424:	9807      	ldr	r0, [sp, #28]
 8009426:	f7ff fbcd 	bl	8008bc4 <SendMessageToModule>
 800942a:	e6e6      	b.n	80091fa <PxMessagingTask+0x72>
							if (!moduleAlias[myID][0])
 800942c:	4b3f      	ldr	r3, [pc, #252]	; (800952c <PxMessagingTask+0x3a4>)
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	0093      	lsls	r3, r2, #2
 8009432:	189b      	adds	r3, r3, r2
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	4a43      	ldr	r2, [pc, #268]	; (8009544 <PxMessagingTask+0x3bc>)
 8009438:	5c9b      	ldrb	r3, [r3, r2]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d118      	bne.n	8009470 <PxMessagingTask+0x2e8>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 800943e:	9a07      	ldr	r2, [sp, #28]
 8009440:	4941      	ldr	r1, [pc, #260]	; (8009548 <PxMessagingTask+0x3c0>)
 8009442:	4842      	ldr	r0, [pc, #264]	; (800954c <PxMessagingTask+0x3c4>)
 8009444:	f009 f82a 	bl	801249c <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009448:	4d40      	ldr	r5, [pc, #256]	; (800954c <PxMessagingTask+0x3c4>)
 800944a:	0028      	movs	r0, r5
 800944c:	f7f6 fe64 	bl	8000118 <strlen>
 8009450:	b282      	uxth	r2, r0
 8009452:	4b3f      	ldr	r3, [pc, #252]	; (8009550 <PxMessagingTask+0x3c8>)
 8009454:	7818      	ldrb	r0, [r3, #0]
 8009456:	2301      	movs	r3, #1
 8009458:	425b      	negs	r3, r3
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	3333      	adds	r3, #51	; 0x33
 800945e:	0029      	movs	r1, r5
 8009460:	f003 faec 	bl	800ca3c <writePxMutex>
							responseStatus = BOS_OK;								
 8009464:	4b36      	ldr	r3, [pc, #216]	; (8009540 <PxMessagingTask+0x3b8>)
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]
							break;
 800946a:	2300      	movs	r3, #0
 800946c:	469a      	mov	sl, r3
 800946e:	e6c4      	b.n	80091fa <PxMessagingTask+0x72>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009470:	230a      	movs	r3, #10
 8009472:	9907      	ldr	r1, [sp, #28]
 8009474:	434b      	muls	r3, r1
 8009476:	4a33      	ldr	r2, [pc, #204]	; (8009544 <PxMessagingTask+0x3bc>)
 8009478:	189b      	adds	r3, r3, r2
 800947a:	000a      	movs	r2, r1
 800947c:	4935      	ldr	r1, [pc, #212]	; (8009554 <PxMessagingTask+0x3cc>)
 800947e:	4833      	ldr	r0, [pc, #204]	; (800954c <PxMessagingTask+0x3c4>)
 8009480:	f009 f80c 	bl	801249c <sprintf>
 8009484:	e7e0      	b.n	8009448 <PxMessagingTask+0x2c0>
							IND_ON();
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	2201      	movs	r2, #1
 800948a:	01c9      	lsls	r1, r1, #7
 800948c:	4832      	ldr	r0, [pc, #200]	; (8009558 <PxMessagingTask+0x3d0>)
 800948e:	f006 fd59 	bl	800ff44 <HAL_GPIO_WritePin>
							break;
 8009492:	2300      	movs	r3, #0
 8009494:	469a      	mov	sl, r3
 8009496:	e6b0      	b.n	80091fa <PxMessagingTask+0x72>
							IND_OFF();
 8009498:	2180      	movs	r1, #128	; 0x80
 800949a:	2200      	movs	r2, #0
 800949c:	01c9      	lsls	r1, r1, #7
 800949e:	482e      	ldr	r0, [pc, #184]	; (8009558 <PxMessagingTask+0x3d0>)
 80094a0:	f006 fd50 	bl	800ff44 <HAL_GPIO_WritePin>
							break;
 80094a4:	2300      	movs	r3, #0
 80094a6:	469a      	mov	sl, r3
 80094a8:	e6a7      	b.n	80091fa <PxMessagingTask+0x72>
							IND_toggle();
 80094aa:	2180      	movs	r1, #128	; 0x80
 80094ac:	01c9      	lsls	r1, r1, #7
 80094ae:	482a      	ldr	r0, [pc, #168]	; (8009558 <PxMessagingTask+0x3d0>)
 80094b0:	f006 fd4e 	bl	800ff50 <HAL_GPIO_TogglePin>
							break;
 80094b4:	2300      	movs	r3, #0
 80094b6:	469a      	mov	sl, r3
 80094b8:	e69f      	b.n	80091fa <PxMessagingTask+0x72>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 80094ba:	4b28      	ldr	r3, [pc, #160]	; (800955c <PxMessagingTask+0x3d4>)
 80094bc:	469c      	mov	ip, r3
 80094be:	00a3      	lsls	r3, r4, #2
 80094c0:	4a14      	ldr	r2, [pc, #80]	; (8009514 <PxMessagingTask+0x38c>)
 80094c2:	4691      	mov	r9, r2
 80094c4:	44b1      	add	r9, r6
 80094c6:	464a      	mov	r2, r9
 80094c8:	1950      	adds	r0, r2, r5
 80094ca:	7881      	ldrb	r1, [r0, #2]
 80094cc:	4688      	mov	r8, r1
 80094ce:	9907      	ldr	r1, [sp, #28]
 80094d0:	0209      	lsls	r1, r1, #8
 80094d2:	4441      	add	r1, r8
 80094d4:	4662      	mov	r2, ip
 80094d6:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 80094d8:	4463      	add	r3, ip
 80094da:	464a      	mov	r2, r9
 80094dc:	5d51      	ldrb	r1, [r2, r5]
 80094de:	0209      	lsls	r1, r1, #8
 80094e0:	7842      	ldrb	r2, [r0, #1]
 80094e2:	1852      	adds	r2, r2, r1
 80094e4:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 80094e6:	4b1e      	ldr	r3, [pc, #120]	; (8009560 <PxMessagingTask+0x3d8>)
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <PxMessagingTask+0x3dc>)
 80094ec:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 80094f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80094f4:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 80094f6:	2002      	movs	r0, #2
 80094f8:	f003 fbcf 	bl	800cc9a <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 80094fc:	2303      	movs	r3, #3
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	0028      	movs	r0, r5
 8009508:	f7ff f934 	bl	8008774 <SendMessageFromPort>
							break;
 800950c:	2300      	movs	r3, #0
 800950e:	469a      	mov	sl, r3
 8009510:	e673      	b.n	80091fa <PxMessagingTask+0x72>
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	20000cf8 	.word	0x20000cf8
 8009518:	20000ee2 	.word	0x20000ee2
 800951c:	20000f20 	.word	0x20000f20
 8009520:	200010e0 	.word	0x200010e0
 8009524:	20000ee3 	.word	0x20000ee3
 8009528:	20006940 	.word	0x20006940
 800952c:	2000105c 	.word	0x2000105c
 8009530:	20001576 	.word	0x20001576
 8009534:	20000ca6 	.word	0x20000ca6
 8009538:	0801a9d0 	.word	0x0801a9d0
 800953c:	20006dc4 	.word	0x20006dc4
 8009540:	200010f8 	.word	0x200010f8
 8009544:	20000f58 	.word	0x20000f58
 8009548:	080198e4 	.word	0x080198e4
 800954c:	200016c0 	.word	0x200016c0
 8009550:	20000a7f 	.word	0x20000a7f
 8009554:	080198f8 	.word	0x080198f8
 8009558:	48000400 	.word	0x48000400
 800955c:	20001060 	.word	0x20001060
 8009560:	20000050 	.word	0x20000050
 8009564:	20000f28 	.word	0x20000f28
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009568:	4bd9      	ldr	r3, [pc, #868]	; (80098d0 <PxMessagingTask+0x748>)
 800956a:	469c      	mov	ip, r3
 800956c:	00a3      	lsls	r3, r4, #2
 800956e:	4ad9      	ldr	r2, [pc, #868]	; (80098d4 <PxMessagingTask+0x74c>)
 8009570:	4691      	mov	r9, r2
 8009572:	44b1      	add	r9, r6
 8009574:	464a      	mov	r2, r9
 8009576:	1950      	adds	r0, r2, r5
 8009578:	7881      	ldrb	r1, [r0, #2]
 800957a:	4688      	mov	r8, r1
 800957c:	9907      	ldr	r1, [sp, #28]
 800957e:	0209      	lsls	r1, r1, #8
 8009580:	4441      	add	r1, r8
 8009582:	4662      	mov	r2, ip
 8009584:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009586:	4463      	add	r3, ip
 8009588:	464a      	mov	r2, r9
 800958a:	5d51      	ldrb	r1, [r2, r5]
 800958c:	0209      	lsls	r1, r1, #8
 800958e:	7842      	ldrb	r2, [r0, #1]
 8009590:	1852      	adds	r2, r2, r1
 8009592:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009594:	4bd0      	ldr	r3, [pc, #832]	; (80098d8 <PxMessagingTask+0x750>)
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
							break;
 800959a:	2300      	movs	r3, #0
 800959c:	469a      	mov	sl, r3
 800959e:	e62c      	b.n	80091fa <PxMessagingTask+0x72>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 80095a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095a2:	f7f9 fe89 	bl	80032b8 <ExploreNeighbors>
 80095a6:	4bcd      	ldr	r3, [pc, #820]	; (80098dc <PxMessagingTask+0x754>)
 80095a8:	2202      	movs	r2, #2
 80095aa:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 80095ac:	200a      	movs	r0, #10
 80095ae:	f003 fb74 	bl	800cc9a <osDelay>
 80095b2:	4bc7      	ldr	r3, [pc, #796]	; (80098d0 <PxMessagingTask+0x748>)
 80095b4:	4699      	mov	r9, r3
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 80095b6:	2501      	movs	r5, #1
							osDelay(10); temp = 0;
 80095b8:	2300      	movs	r3, #0
									messageParams[temp] = p;
 80095ba:	46a0      	mov	r8, r4
 80095bc:	464c      	mov	r4, r9
 80095be:	46b1      	mov	r9, r6
 80095c0:	001e      	movs	r6, r3
 80095c2:	e004      	b.n	80095ce <PxMessagingTask+0x446>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 80095c4:	3501      	adds	r5, #1
 80095c6:	b2ed      	uxtb	r5, r5
 80095c8:	3404      	adds	r4, #4
 80095ca:	2d07      	cmp	r5, #7
 80095cc:	d00e      	beq.n	80095ec <PxMessagingTask+0x464>
								if (neighbors[p-1][0])
 80095ce:	8823      	ldrh	r3, [r4, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0f7      	beq.n	80095c4 <PxMessagingTask+0x43c>
									messageParams[temp] = p;
 80095d4:	4bc2      	ldr	r3, [pc, #776]	; (80098e0 <PxMessagingTask+0x758>)
 80095d6:	559d      	strb	r5, [r3, r6]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 80095d8:	1c70      	adds	r0, r6, #1
 80095da:	469c      	mov	ip, r3
 80095dc:	4460      	add	r0, ip
 80095de:	2204      	movs	r2, #4
 80095e0:	0021      	movs	r1, r4
 80095e2:	f008 fd5d 	bl	80120a0 <memcpy>
									temp += 5;		
 80095e6:	3605      	adds	r6, #5
 80095e8:	b2f6      	uxtb	r6, r6
 80095ea:	e7eb      	b.n	80095c4 <PxMessagingTask+0x43c>
 80095ec:	4644      	mov	r4, r8
 80095ee:	0033      	movs	r3, r6
 80095f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80095f2:	464e      	mov	r6, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	210d      	movs	r1, #13
 80095f8:	9807      	ldr	r0, [sp, #28]
 80095fa:	f7ff fae3 	bl	8008bc4 <SendMessageToModule>
							break;
 80095fe:	2300      	movs	r3, #0
 8009600:	469a      	mov	sl, r3
 8009602:	e5fa      	b.n	80091fa <PxMessagingTask+0x72>
							temp = numOfParams/5;
 8009604:	2105      	movs	r1, #5
 8009606:	4650      	mov	r0, sl
 8009608:	f7f6 fda2 	bl	8000150 <__udivsi3>
 800960c:	b2c2      	uxtb	r2, r0
 800960e:	920b      	str	r2, [sp, #44]	; 0x2c
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009610:	4653      	mov	r3, sl
 8009612:	2b04      	cmp	r3, #4
 8009614:	d921      	bls.n	800965a <PxMessagingTask+0x4d2>
 8009616:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009618:	1c4b      	adds	r3, r1, #1
 800961a:	195d      	adds	r5, r3, r5
 800961c:	4bad      	ldr	r3, [pc, #692]	; (80098d4 <PxMessagingTask+0x74c>)
 800961e:	46a8      	mov	r8, r5
 8009620:	4498      	add	r8, r3
 8009622:	2500      	movs	r5, #0
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8009624:	4baf      	ldr	r3, [pc, #700]	; (80098e4 <PxMessagingTask+0x75c>)
 8009626:	4699      	mov	r9, r3
 8009628:	4643      	mov	r3, r8
 800962a:	46a0      	mov	r8, r4
 800962c:	9706      	str	r7, [sp, #24]
 800962e:	0017      	movs	r7, r2
 8009630:	46b2      	mov	sl, r6
 8009632:	000e      	movs	r6, r1
 8009634:	001c      	movs	r4, r3
 8009636:	1ba3      	subs	r3, r4, r6
 8009638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800963a:	5c98      	ldrb	r0, [r3, r2]
 800963c:	3801      	subs	r0, #1
 800963e:	0080      	lsls	r0, r0, #2
 8009640:	4448      	add	r0, r9
 8009642:	2204      	movs	r2, #4
 8009644:	0021      	movs	r1, r4
 8009646:	f008 fd2b 	bl	80120a0 <memcpy>
							for (uint8_t k=0 ; k<temp ; k++)  {
 800964a:	3501      	adds	r5, #1
 800964c:	b2ed      	uxtb	r5, r5
 800964e:	3405      	adds	r4, #5
 8009650:	42af      	cmp	r7, r5
 8009652:	d8f0      	bhi.n	8009636 <PxMessagingTask+0x4ae>
 8009654:	4644      	mov	r4, r8
 8009656:	9f06      	ldr	r7, [sp, #24]
 8009658:	4656      	mov	r6, sl
							responseStatus = BOS_OK;
 800965a:	4b9f      	ldr	r3, [pc, #636]	; (80098d8 <PxMessagingTask+0x750>)
 800965c:	2200      	movs	r2, #0
 800965e:	701a      	strb	r2, [r3, #0]
							break;
 8009660:	2300      	movs	r3, #0
 8009662:	469a      	mov	sl, r3
 8009664:	e5c9      	b.n	80091fa <PxMessagingTask+0x72>
 8009666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009668:	18eb      	adds	r3, r5, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	4a99      	ldr	r2, [pc, #612]	; (80098d4 <PxMessagingTask+0x74c>)
 800966e:	4699      	mov	r9, r3
 8009670:	4491      	add	r9, r2
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009672:	2301      	movs	r3, #1
 8009674:	46a0      	mov	r8, r4
 8009676:	46b2      	mov	sl, r6
 8009678:	464e      	mov	r6, r9
 800967a:	46a9      	mov	r9, r5
 800967c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800967e:	001c      	movs	r4, r3
 8009680:	e002      	b.n	8009688 <PxMessagingTask+0x500>
 8009682:	3401      	adds	r4, #1
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009684:	2c07      	cmp	r4, #7
 8009686:	d008      	beq.n	800969a <PxMessagingTask+0x512>
 8009688:	b2e0      	uxtb	r0, r4
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 800968a:	42a8      	cmp	r0, r5
 800968c:	d0f9      	beq.n	8009682 <PxMessagingTask+0x4fa>
 800968e:	f003 f9b3 	bl	800c9f8 <GetUart>
 8009692:	5d31      	ldrb	r1, [r6, r4]
 8009694:	f003 fa4c 	bl	800cb30 <SwapUartPins>
 8009698:	e7f3      	b.n	8009682 <PxMessagingTask+0x4fa>
 800969a:	4644      	mov	r4, r8
 800969c:	464d      	mov	r5, r9
 800969e:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 80096a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a2:	f003 f9a9 	bl	800c9f8 <GetUart>
 80096a6:	4b8b      	ldr	r3, [pc, #556]	; (80098d4 <PxMessagingTask+0x74c>)
 80096a8:	199b      	adds	r3, r3, r6
 80096aa:	195d      	adds	r5, r3, r5
 80096ac:	7aa9      	ldrb	r1, [r5, #10]
 80096ae:	f003 fa3f 	bl	800cb30 <SwapUartPins>
							break;
 80096b2:	2300      	movs	r3, #0
 80096b4:	469a      	mov	sl, r3
 80096b6:	e5a0      	b.n	80091fa <PxMessagingTask+0x72>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 80096b8:	002a      	movs	r2, r5
 80096ba:	4b86      	ldr	r3, [pc, #536]	; (80098d4 <PxMessagingTask+0x74c>)
 80096bc:	199b      	adds	r3, r3, r6
 80096be:	5d5b      	ldrb	r3, [r3, r5]
 80096c0:	469a      	mov	sl, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d108      	bne.n	80096d8 <PxMessagingTask+0x550>
								myID = cMessage[port-1][1+shift];
 80096c6:	2238      	movs	r2, #56	; 0x38
 80096c8:	4362      	muls	r2, r4
 80096ca:	4b82      	ldr	r3, [pc, #520]	; (80098d4 <PxMessagingTask+0x74c>)
 80096cc:	189b      	adds	r3, r3, r2
 80096ce:	195d      	adds	r5, r3, r5
 80096d0:	786a      	ldrb	r2, [r5, #1]
 80096d2:	4b85      	ldr	r3, [pc, #532]	; (80098e8 <PxMessagingTask+0x760>)
 80096d4:	701a      	strb	r2, [r3, #0]
 80096d6:	e590      	b.n	80091fa <PxMessagingTask+0x72>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d002      	beq.n	80096e2 <PxMessagingTask+0x55a>
 80096dc:	2300      	movs	r3, #0
 80096de:	469a      	mov	sl, r3
 80096e0:	e58b      	b.n	80091fa <PxMessagingTask+0x72>
								messageParams[0] = 0;											/* change own ID */
 80096e2:	497f      	ldr	r1, [pc, #508]	; (80098e0 <PxMessagingTask+0x758>)
 80096e4:	2500      	movs	r5, #0
 80096e6:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 80096e8:	2038      	movs	r0, #56	; 0x38
 80096ea:	4360      	muls	r0, r4
 80096ec:	4b79      	ldr	r3, [pc, #484]	; (80098d4 <PxMessagingTask+0x74c>)
 80096ee:	181b      	adds	r3, r3, r0
 80096f0:	189b      	adds	r3, r3, r2
 80096f2:	785a      	ldrb	r2, [r3, #1]
 80096f4:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 80096f6:	7898      	ldrb	r0, [r3, #2]
 80096f8:	2303      	movs	r3, #3
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	330d      	adds	r3, #13
 80096fe:	002a      	movs	r2, r5
 8009700:	0029      	movs	r1, r5
 8009702:	f7ff f837 	bl	8008774 <SendMessageFromPort>
 8009706:	46aa      	mov	sl, r5
 8009708:	e577      	b.n	80091fa <PxMessagingTask+0x72>
							if (longMessage) {
 800970a:	4b78      	ldr	r3, [pc, #480]	; (80098ec <PxMessagingTask+0x764>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4698      	mov	r8, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	d014      	beq.n	800973e <PxMessagingTask+0x5b6>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009714:	4b76      	ldr	r3, [pc, #472]	; (80098f0 <PxMessagingTask+0x768>)
 8009716:	4699      	mov	r9, r3
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	4698      	mov	r8, r3
 800971c:	4875      	ldr	r0, [pc, #468]	; (80098f4 <PxMessagingTask+0x76c>)
 800971e:	4440      	add	r0, r8
 8009720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009722:	469c      	mov	ip, r3
 8009724:	4465      	add	r5, ip
 8009726:	496b      	ldr	r1, [pc, #428]	; (80098d4 <PxMessagingTask+0x74c>)
 8009728:	1869      	adds	r1, r5, r1
 800972a:	4652      	mov	r2, sl
 800972c:	f008 fcb8 	bl	80120a0 <memcpy>
								longMessageLastPtr += numOfParams;
 8009730:	4645      	mov	r5, r8
 8009732:	4455      	add	r5, sl
 8009734:	464b      	mov	r3, r9
 8009736:	801d      	strh	r5, [r3, #0]
 8009738:	2300      	movs	r3, #0
 800973a:	469a      	mov	sl, r3
 800973c:	e55d      	b.n	80091fa <PxMessagingTask+0x72>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800973e:	4b6c      	ldr	r3, [pc, #432]	; (80098f0 <PxMessagingTask+0x768>)
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	4a6c      	ldr	r2, [pc, #432]	; (80098f4 <PxMessagingTask+0x76c>)
 8009744:	4691      	mov	r9, r2
 8009746:	9306      	str	r3, [sp, #24]
 8009748:	0018      	movs	r0, r3
 800974a:	4448      	add	r0, r9
 800974c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800974e:	468c      	mov	ip, r1
 8009750:	4465      	add	r5, ip
 8009752:	4960      	ldr	r1, [pc, #384]	; (80098d4 <PxMessagingTask+0x74c>)
 8009754:	1869      	adds	r1, r5, r1
 8009756:	4652      	mov	r2, sl
 8009758:	f008 fca2 	bl	80120a0 <memcpy>
								longMessageLastPtr += numOfParams;
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	4453      	add	r3, sl
 8009760:	b29d      	uxth	r5, r3
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8009762:	2116      	movs	r1, #22
 8009764:	0028      	movs	r0, r5
 8009766:	f7f6 fcf3 	bl	8000150 <__udivsi3>
 800976a:	4b63      	ldr	r3, [pc, #396]	; (80098f8 <PxMessagingTask+0x770>)
 800976c:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 800976e:	002a      	movs	r2, r5
 8009770:	4649      	mov	r1, r9
 8009772:	4862      	ldr	r0, [pc, #392]	; (80098fc <PxMessagingTask+0x774>)
 8009774:	f008 fc94 	bl	80120a0 <memcpy>
								longMessageLastPtr = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	4a5d      	ldr	r2, [pc, #372]	; (80098f0 <PxMessagingTask+0x768>)
 800977c:	8013      	strh	r3, [r2, #0]
 800977e:	46c2      	mov	sl, r8
 8009780:	e53b      	b.n	80091fa <PxMessagingTask+0x72>
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009782:	2501      	movs	r5, #1
 8009784:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009786:	2280      	movs	r2, #128	; 0x80
 8009788:	0212      	lsls	r2, r2, #8
 800978a:	4690      	mov	r8, r2
									messageParams[temp++] = p;
 800978c:	46a1      	mov	r9, r4
 800978e:	001c      	movs	r4, r3
 8009790:	e003      	b.n	800979a <PxMessagingTask+0x612>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009792:	3501      	adds	r5, #1
 8009794:	b2ed      	uxtb	r5, r5
 8009796:	2d07      	cmp	r5, #7
 8009798:	d00a      	beq.n	80097b0 <PxMessagingTask+0x628>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800979a:	0028      	movs	r0, r5
 800979c:	f003 f92c 	bl	800c9f8 <GetUart>
 80097a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097a2:	4543      	cmp	r3, r8
 80097a4:	d1f5      	bne.n	8009792 <PxMessagingTask+0x60a>
									messageParams[temp++] = p;
 80097a6:	1c63      	adds	r3, r4, #1
 80097a8:	4a4d      	ldr	r2, [pc, #308]	; (80098e0 <PxMessagingTask+0x758>)
 80097aa:	5515      	strb	r5, [r2, r4]
 80097ac:	b2dc      	uxtb	r4, r3
 80097ae:	e7f0      	b.n	8009792 <PxMessagingTask+0x60a>
 80097b0:	0023      	movs	r3, r4
 80097b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80097b4:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	2114      	movs	r1, #20
 80097ba:	9807      	ldr	r0, [sp, #28]
 80097bc:	f7ff fa02 	bl	8008bc4 <SendMessageToModule>
							break;
 80097c0:	2300      	movs	r3, #0
 80097c2:	469a      	mov	sl, r3
 80097c4:	e519      	b.n	80091fa <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 80097c6:	4b43      	ldr	r3, [pc, #268]	; (80098d4 <PxMessagingTask+0x74c>)
 80097c8:	199b      	adds	r3, r3, r6
 80097ca:	5d5a      	ldrb	r2, [r3, r5]
 80097cc:	0612      	lsls	r2, r2, #24
 80097ce:	195b      	adds	r3, r3, r5
 80097d0:	78d9      	ldrb	r1, [r3, #3]
 80097d2:	1852      	adds	r2, r2, r1
 80097d4:	7859      	ldrb	r1, [r3, #1]
 80097d6:	0409      	lsls	r1, r1, #16
 80097d8:	1852      	adds	r2, r2, r1
 80097da:	7899      	ldrb	r1, [r3, #2]
 80097dc:	0209      	lsls	r1, r1, #8
 80097de:	4690      	mov	r8, r2
 80097e0:	4488      	add	r8, r1
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 80097e2:	791b      	ldrb	r3, [r3, #4]
 80097e4:	2bff      	cmp	r3, #255	; 0xff
 80097e6:	d013      	beq.n	8009810 <PxMessagingTask+0x688>
									for (p=0 ; p<numOfParams ; p++) 
 80097e8:	4653      	mov	r3, sl
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00e      	beq.n	800980c <PxMessagingTask+0x684>
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	469c      	mov	ip, r3
 80097f2:	4465      	add	r5, ip
 80097f4:	3504      	adds	r5, #4
 80097f6:	4b37      	ldr	r3, [pc, #220]	; (80098d4 <PxMessagingTask+0x74c>)
 80097f8:	46a9      	mov	r9, r5
 80097fa:	4499      	add	r9, r3
 80097fc:	2500      	movs	r5, #0
 80097fe:	9406      	str	r4, [sp, #24]
 8009800:	0033      	movs	r3, r6
 8009802:	464e      	mov	r6, r9
 8009804:	46b9      	mov	r9, r7
 8009806:	4657      	mov	r7, sl
 8009808:	469a      	mov	sl, r3
 800980a:	e016      	b.n	800983a <PxMessagingTask+0x6b2>
								temp = temp32 = 0;
 800980c:	930b      	str	r3, [sp, #44]	; 0x2c
 800980e:	e4f4      	b.n	80091fa <PxMessagingTask+0x72>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009810:	2501      	movs	r5, #1
 8009812:	4643      	mov	r3, r8
 8009814:	46a0      	mov	r8, r4
 8009816:	001c      	movs	r4, r3
										UpdateBaudrate(p, temp32); 
 8009818:	0021      	movs	r1, r4
 800981a:	0028      	movs	r0, r5
 800981c:	f003 f97e 	bl	800cb1c <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009820:	3501      	adds	r5, #1
 8009822:	b2ed      	uxtb	r5, r5
 8009824:	2d07      	cmp	r5, #7
 8009826:	d1f7      	bne.n	8009818 <PxMessagingTask+0x690>
 8009828:	4644      	mov	r4, r8
								temp = temp32 = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	930b      	str	r3, [sp, #44]	; 0x2c
 800982e:	469a      	mov	sl, r3
 8009830:	e4e3      	b.n	80091fa <PxMessagingTask+0x72>
 8009832:	3501      	adds	r5, #1
									for (p=0 ; p<numOfParams ; p++) 
 8009834:	b2eb      	uxtb	r3, r5
 8009836:	42bb      	cmp	r3, r7
 8009838:	d208      	bcs.n	800984c <PxMessagingTask+0x6c4>
										temp = cMessage[port-1][4+shift+p];
 800983a:	5d74      	ldrb	r4, [r6, r5]
										if (temp>0 && temp<=NumOfPorts)	{
 800983c:	1e63      	subs	r3, r4, #1
 800983e:	2b05      	cmp	r3, #5
 8009840:	d8f7      	bhi.n	8009832 <PxMessagingTask+0x6aa>
											UpdateBaudrate(temp, temp32); 
 8009842:	4641      	mov	r1, r8
 8009844:	0020      	movs	r0, r4
 8009846:	f003 f969 	bl	800cb1c <UpdateBaudrate>
 800984a:	e7f2      	b.n	8009832 <PxMessagingTask+0x6aa>
 800984c:	940b      	str	r4, [sp, #44]	; 0x2c
 800984e:	9c06      	ldr	r4, [sp, #24]
 8009850:	464f      	mov	r7, r9
 8009852:	4656      	mov	r6, sl
 8009854:	2300      	movs	r3, #0
 8009856:	469a      	mov	sl, r3
 8009858:	e4cf      	b.n	80091fa <PxMessagingTask+0x72>
								SaveToRO();
 800985a:	f001 f823 	bl	800a8a4 <SaveToRO>
							SaveEEportsDir();
 800985e:	f7f9 f8c3 	bl	80029e8 <SaveEEportsDir>
							indMode = IND_PING;
 8009862:	4b1e      	ldr	r3, [pc, #120]	; (80098dc <PxMessagingTask+0x754>)
 8009864:	2201      	movs	r2, #1
 8009866:	701a      	strb	r2, [r3, #0]
							break;
 8009868:	2300      	movs	r3, #0
 800986a:	469a      	mov	sl, r3
 800986c:	e4c5      	b.n	80091fa <PxMessagingTask+0x72>
							ClearEEportsDir();
 800986e:	f7f9 f8dd 	bl	8002a2c <ClearEEportsDir>
							ClearROtopology();
 8009872:	f001 f935 	bl	800aae0 <ClearROtopology>
							osDelay(100);
 8009876:	2064      	movs	r0, #100	; 0x64
 8009878:	f003 fa0f 	bl	800cc9a <osDelay>
							indMode = IND_TOPOLOGY;
 800987c:	4b17      	ldr	r3, [pc, #92]	; (80098dc <PxMessagingTask+0x754>)
 800987e:	2202      	movs	r2, #2
 8009880:	701a      	strb	r2, [r3, #0]
							break;
 8009882:	2300      	movs	r3, #0
 8009884:	469a      	mov	sl, r3
 8009886:	e4b8      	b.n	80091fa <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009888:	f003 fb2a 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 800988c:	4681      	mov	r9, r0
							if (dst == BOS_BROADCAST)
 800988e:	4643      	mov	r3, r8
 8009890:	2bff      	cmp	r3, #255	; 0xff
 8009892:	d012      	beq.n	80098ba <PxMessagingTask+0x732>
							else if (dst == BOS_MULTICAST)
 8009894:	2bfe      	cmp	r3, #254	; 0xfe
 8009896:	d039      	beq.n	800990c <PxMessagingTask+0x784>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989a:	469c      	mov	ip, r3
 800989c:	4465      	add	r5, ip
 800989e:	490d      	ldr	r1, [pc, #52]	; (80098d4 <PxMessagingTask+0x74c>)
 80098a0:	1869      	adds	r1, r5, r1
 80098a2:	4652      	mov	r2, sl
 80098a4:	4816      	ldr	r0, [pc, #88]	; (8009900 <PxMessagingTask+0x778>)
 80098a6:	f008 fbfb 	bl	80120a0 <memcpy>
								temp = PcPort; PcPort = port;
 80098aa:	4d16      	ldr	r5, [pc, #88]	; (8009904 <PxMessagingTask+0x77c>)
								if (BOS.response == BOS_RESPONSE_ALL)
 80098ac:	4b16      	ldr	r3, [pc, #88]	; (8009908 <PxMessagingTask+0x780>)
 80098ae:	469a      	mov	sl, r3
 80098b0:	9406      	str	r4, [sp, #24]
 80098b2:	46b8      	mov	r8, r7
 80098b4:	464f      	mov	r7, r9
 80098b6:	46b1      	mov	r9, r6
 80098b8:	e036      	b.n	8009928 <PxMessagingTask+0x7a0>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 80098ba:	4652      	mov	r2, sl
 80098bc:	3a01      	subs	r2, #1
 80098be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c0:	18e9      	adds	r1, r5, r3
 80098c2:	4d04      	ldr	r5, [pc, #16]	; (80098d4 <PxMessagingTask+0x74c>)
 80098c4:	1949      	adds	r1, r1, r5
 80098c6:	480e      	ldr	r0, [pc, #56]	; (8009900 <PxMessagingTask+0x778>)
 80098c8:	f008 fbea 	bl	80120a0 <memcpy>
 80098cc:	e7ed      	b.n	80098aa <PxMessagingTask+0x722>
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	20001060 	.word	0x20001060
 80098d4:	20000cf8 	.word	0x20000cf8
 80098d8:	200010f8 	.word	0x200010f8
 80098dc:	20000ee2 	.word	0x20000ee2
 80098e0:	20000f28 	.word	0x20000f28
 80098e4:	20001078 	.word	0x20001078
 80098e8:	2000105c 	.word	0x2000105c
 80098ec:	20000ee3 	.word	0x20000ee3
 80098f0:	20000ee4 	.word	0x20000ee4
 80098f4:	200015ac 	.word	0x200015ac
 80098f8:	2000001c 	.word	0x2000001c
 80098fc:	20000a80 	.word	0x20000a80
 8009900:	20001578 	.word	0x20001578
 8009904:	20000a7f 	.word	0x20000a7f
 8009908:	20006940 	.word	0x20006940
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 800990c:	4653      	mov	r3, sl
 800990e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009910:	1a9a      	subs	r2, r3, r2
 8009912:	3a02      	subs	r2, #2
 8009914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009916:	18e9      	adds	r1, r5, r3
 8009918:	4dd8      	ldr	r5, [pc, #864]	; (8009c7c <PxMessagingTask+0xaf4>)
 800991a:	1949      	adds	r1, r1, r5
 800991c:	48d8      	ldr	r0, [pc, #864]	; (8009c80 <PxMessagingTask+0xaf8>)
 800991e:	f008 fbbf 	bl	80120a0 <memcpy>
 8009922:	e7c2      	b.n	80098aa <PxMessagingTask+0x722>
							while( xReturned != pdFALSE );								
 8009924:	2c00      	cmp	r4, #0
 8009926:	d022      	beq.n	800996e <PxMessagingTask+0x7e6>
								temp = PcPort; PcPort = port;
 8009928:	782e      	ldrb	r6, [r5, #0]
 800992a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992c:	702b      	strb	r3, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800992e:	2299      	movs	r2, #153	; 0x99
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	0039      	movs	r1, r7
 8009934:	48d2      	ldr	r0, [pc, #840]	; (8009c80 <PxMessagingTask+0xaf8>)
 8009936:	f003 fa49 	bl	800cdcc <FreeRTOS_CLIProcessCommand>
 800993a:	0004      	movs	r4, r0
								PcPort = temp;
 800993c:	702e      	strb	r6, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 800993e:	4653      	mov	r3, sl
 8009940:	799b      	ldrb	r3, [r3, #6]
 8009942:	2b60      	cmp	r3, #96	; 0x60
 8009944:	d1ee      	bne.n	8009924 <PxMessagingTask+0x79c>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 8009946:	0038      	movs	r0, r7
 8009948:	f7f6 fbe6 	bl	8000118 <strlen>
 800994c:	0002      	movs	r2, r0
 800994e:	0039      	movs	r1, r7
 8009950:	48cc      	ldr	r0, [pc, #816]	; (8009c84 <PxMessagingTask+0xafc>)
 8009952:	f008 fba5 	bl	80120a0 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 8009956:	0038      	movs	r0, r7
 8009958:	f7f6 fbde 	bl	8000118 <strlen>
 800995c:	b282      	uxth	r2, r0
 800995e:	2118      	movs	r1, #24
 8009960:	9807      	ldr	r0, [sp, #28]
 8009962:	f7ff f92f 	bl	8008bc4 <SendMessageToModule>
									osDelay(10); 
 8009966:	200a      	movs	r0, #10
 8009968:	f003 f997 	bl	800cc9a <osDelay>
 800996c:	e7da      	b.n	8009924 <PxMessagingTask+0x79c>
 800996e:	9c06      	ldr	r4, [sp, #24]
 8009970:	960b      	str	r6, [sp, #44]	; 0x2c
 8009972:	4647      	mov	r7, r8
 8009974:	464e      	mov	r6, r9
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009976:	2232      	movs	r2, #50	; 0x32
 8009978:	2100      	movs	r1, #0
 800997a:	48c1      	ldr	r0, [pc, #772]	; (8009c80 <PxMessagingTask+0xaf8>)
 800997c:	f008 fb99 	bl	80120b2 <memset>
							break;
 8009980:	2300      	movs	r3, #0
 8009982:	469a      	mov	sl, r3
 8009984:	e439      	b.n	80091fa <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009986:	f003 faab 	bl	800cee0 <FreeRTOS_CLIGetOutputBuffer>
 800998a:	4680      	mov	r8, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800998c:	f7f6 fbc4 	bl	8000118 <strlen>
 8009990:	0002      	movs	r2, r0
 8009992:	2100      	movs	r1, #0
 8009994:	4640      	mov	r0, r8
 8009996:	f008 fb8c 	bl	80120b2 <memset>
							if (longMessage) {
 800999a:	4bbb      	ldr	r3, [pc, #748]	; (8009c88 <PxMessagingTask+0xb00>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	4699      	mov	r9, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d012      	beq.n	80099ca <PxMessagingTask+0x842>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 80099a4:	4bb9      	ldr	r3, [pc, #740]	; (8009c8c <PxMessagingTask+0xb04>)
 80099a6:	4699      	mov	r9, r3
 80099a8:	8818      	ldrh	r0, [r3, #0]
 80099aa:	4440      	add	r0, r8
 80099ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ae:	469c      	mov	ip, r3
 80099b0:	4465      	add	r5, ip
 80099b2:	49b2      	ldr	r1, [pc, #712]	; (8009c7c <PxMessagingTask+0xaf4>)
 80099b4:	1869      	adds	r1, r5, r1
 80099b6:	4652      	mov	r2, sl
 80099b8:	f008 fb72 	bl	80120a0 <memcpy>
								longMessageLastPtr += numOfParams;
 80099bc:	464b      	mov	r3, r9
 80099be:	881d      	ldrh	r5, [r3, #0]
 80099c0:	4455      	add	r5, sl
 80099c2:	801d      	strh	r5, [r3, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	469a      	mov	sl, r3
 80099c8:	e417      	b.n	80091fa <PxMessagingTask+0x72>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 80099ca:	4bb0      	ldr	r3, [pc, #704]	; (8009c8c <PxMessagingTask+0xb04>)
 80099cc:	8818      	ldrh	r0, [r3, #0]
 80099ce:	4440      	add	r0, r8
 80099d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d2:	469c      	mov	ip, r3
 80099d4:	4465      	add	r5, ip
 80099d6:	49a9      	ldr	r1, [pc, #676]	; (8009c7c <PxMessagingTask+0xaf4>)
 80099d8:	1869      	adds	r1, r5, r1
 80099da:	4652      	mov	r2, sl
 80099dc:	f008 fb60 	bl	80120a0 <memcpy>
								longMessageLastPtr = 0;
 80099e0:	2100      	movs	r1, #0
 80099e2:	4baa      	ldr	r3, [pc, #680]	; (8009c8c <PxMessagingTask+0xb04>)
 80099e4:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 80099e6:	4baa      	ldr	r3, [pc, #680]	; (8009c90 <PxMessagingTask+0xb08>)
 80099e8:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 80099ea:	000b      	movs	r3, r1
 80099ec:	000a      	movs	r2, r1
 80099ee:	48a9      	ldr	r0, [pc, #676]	; (8009c94 <PxMessagingTask+0xb0c>)
 80099f0:	6800      	ldr	r0, [r0, #0]
 80099f2:	f004 fdbb 	bl	800e56c <xTaskGenericNotify>
 80099f6:	46ca      	mov	sl, r9
 80099f8:	f7ff fbff 	bl	80091fa <PxMessagingTask+0x72>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80099fc:	4ba6      	ldr	r3, [pc, #664]	; (8009c98 <PxMessagingTask+0xb10>)
 80099fe:	4aa7      	ldr	r2, [pc, #668]	; (8009c9c <PxMessagingTask+0xb14>)
 8009a00:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 8009a02:	4ba7      	ldr	r3, [pc, #668]	; (8009ca0 <PxMessagingTask+0xb18>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 8009a08:	200a      	movs	r0, #10
 8009a0a:	f003 f946 	bl	800cc9a <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	4ba4      	ldr	r3, [pc, #656]	; (8009ca4 <PxMessagingTask+0xb1c>)
 8009a14:	4aa4      	ldr	r2, [pc, #656]	; (8009ca8 <PxMessagingTask+0xb20>)
 8009a16:	60da      	str	r2, [r3, #12]
 8009a18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009a1c:	46c0      	nop			; (mov r8, r8)
 8009a1e:	e7fd      	b.n	8009a1c <PxMessagingTask+0x894>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 8009a20:	4b96      	ldr	r3, [pc, #600]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009a22:	4698      	mov	r8, r3
 8009a24:	44b0      	add	r8, r6
 8009a26:	4643      	mov	r3, r8
 8009a28:	5d58      	ldrb	r0, [r3, r5]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	3319      	adds	r3, #25
 8009a30:	2200      	movs	r2, #0
 8009a32:	2100      	movs	r1, #0
 8009a34:	f7fe fe9e 	bl	8008774 <SendMessageFromPort>
								osDelay(100);
 8009a38:	2064      	movs	r0, #100	; 0x64
 8009a3a:	f003 f92e 	bl	800cc9a <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 8009a3e:	4643      	mov	r3, r8
 8009a40:	5d5b      	ldrb	r3, [r3, r5]
 8009a42:	4a9a      	ldr	r2, [pc, #616]	; (8009cac <PxMessagingTask+0xb24>)
 8009a44:	7811      	ldrb	r1, [r2, #0]
 8009a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a48:	9807      	ldr	r0, [sp, #28]
 8009a4a:	f7f9 fdc7 	bl	80035dc <remoteBootloaderUpdate>
								break;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	469a      	mov	sl, r3
 8009a52:	f7ff fbd2 	bl	80091fa <PxMessagingTask+0x72>
							temp = cMessage[port-1][11+shift];
 8009a56:	46a8      	mov	r8, r5
 8009a58:	230b      	movs	r3, #11
 8009a5a:	4699      	mov	r9, r3
 8009a5c:	44a9      	add	r9, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009a5e:	4653      	mov	r3, sl
 8009a60:	2b0f      	cmp	r3, #15
 8009a62:	d011      	beq.n	8009a88 <PxMessagingTask+0x900>
							temp = cMessage[port-1][11+shift];
 8009a64:	2238      	movs	r2, #56	; 0x38
 8009a66:	4362      	muls	r2, r4
 8009a68:	4b84      	ldr	r3, [pc, #528]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009a6a:	189b      	adds	r3, r3, r2
 8009a6c:	464a      	mov	r2, r9
 8009a6e:	5c9b      	ldrb	r3, [r3, r2]
 8009a70:	9306      	str	r3, [sp, #24]
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8009a72:	4653      	mov	r3, sl
 8009a74:	2b11      	cmp	r3, #17
 8009a76:	d10e      	bne.n	8009a96 <PxMessagingTask+0x90e>
 8009a78:	2238      	movs	r2, #56	; 0x38
 8009a7a:	4362      	muls	r2, r4
 8009a7c:	4b7f      	ldr	r3, [pc, #508]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009a7e:	189b      	adds	r3, r3, r2
 8009a80:	4443      	add	r3, r8
 8009a82:	7bdb      	ldrb	r3, [r3, #15]
 8009a84:	9306      	str	r3, [sp, #24]
 8009a86:	e006      	b.n	8009a96 <PxMessagingTask+0x90e>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009a88:	2238      	movs	r2, #56	; 0x38
 8009a8a:	4362      	muls	r2, r4
 8009a8c:	4b7b      	ldr	r3, [pc, #492]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009a8e:	189b      	adds	r3, r3, r2
 8009a90:	195d      	adds	r5, r3, r5
 8009a92:	7b6b      	ldrb	r3, [r5, #13]
 8009a94:	9306      	str	r3, [sp, #24]
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009a96:	4643      	mov	r3, r8
 8009a98:	1c58      	adds	r0, r3, #1
 8009a9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a9c:	1c9d      	adds	r5, r3, #2
 8009a9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8009aa0:	1cd9      	adds	r1, r3, #3
 8009aa2:	9110      	str	r1, [sp, #64]	; 0x40
 8009aa4:	4b75      	ldr	r3, [pc, #468]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009aa6:	199b      	adds	r3, r3, r6
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	5c9a      	ldrb	r2, [r3, r2]
 8009aac:	0612      	lsls	r2, r2, #24
 8009aae:	5c59      	ldrb	r1, [r3, r1]
 8009ab0:	1852      	adds	r2, r2, r1
 8009ab2:	5c19      	ldrb	r1, [r3, r0]
 8009ab4:	0409      	lsls	r1, r1, #16
 8009ab6:	1852      	adds	r2, r2, r1
 8009ab8:	5d59      	ldrb	r1, [r3, r5]
 8009aba:	0209      	lsls	r1, r1, #8
 8009abc:	1852      	adds	r2, r2, r1
 8009abe:	920e      	str	r2, [sp, #56]	; 0x38
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	3204      	adds	r2, #4
 8009ac4:	9211      	str	r2, [sp, #68]	; 0x44
 8009ac6:	2105      	movs	r1, #5
 8009ac8:	4441      	add	r1, r8
 8009aca:	468c      	mov	ip, r1
 8009acc:	4641      	mov	r1, r8
 8009ace:	3106      	adds	r1, #6
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	3007      	adds	r0, #7
 8009ad4:	5c9d      	ldrb	r5, [r3, r2]
 8009ad6:	062d      	lsls	r5, r5, #24
 8009ad8:	4662      	mov	r2, ip
 8009ada:	5c9a      	ldrb	r2, [r3, r2]
 8009adc:	0412      	lsls	r2, r2, #16
 8009ade:	18aa      	adds	r2, r5, r2
 8009ae0:	5c1d      	ldrb	r5, [r3, r0]
 8009ae2:	1952      	adds	r2, r2, r5
 8009ae4:	5c5d      	ldrb	r5, [r3, r1]
 8009ae6:	022d      	lsls	r5, r5, #8
 8009ae8:	1955      	adds	r5, r2, r5
							if (temp == false)
 8009aea:	9b06      	ldr	r3, [sp, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d15b      	bne.n	8009ba8 <PxMessagingTask+0xa20>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 8009af0:	4b62      	ldr	r3, [pc, #392]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009af2:	199b      	adds	r3, r3, r6
 8009af4:	4443      	add	r3, r8
 8009af6:	7a5b      	ldrb	r3, [r3, #9]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <PxMessagingTask+0x984>
 8009afc:	2138      	movs	r1, #56	; 0x38
 8009afe:	4361      	muls	r1, r4
 8009b00:	4a5e      	ldr	r2, [pc, #376]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b02:	1852      	adds	r2, r2, r1
 8009b04:	4442      	add	r2, r8
 8009b06:	7a91      	ldrb	r1, [r2, #10]
 8009b08:	2900      	cmp	r1, #0
 8009b0a:	d123      	bne.n	8009b54 <PxMessagingTask+0x9cc>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 8009b0c:	4b5b      	ldr	r3, [pc, #364]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b0e:	199b      	adds	r3, r3, r6
 8009b10:	464a      	mov	r2, r9
 8009b12:	5c9b      	ldrb	r3, [r3, r2]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <PxMessagingTask+0x9a0>
 8009b18:	2138      	movs	r1, #56	; 0x38
 8009b1a:	4361      	muls	r1, r4
 8009b1c:	4a57      	ldr	r2, [pc, #348]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b1e:	1852      	adds	r2, r2, r1
 8009b20:	4442      	add	r2, r8
 8009b22:	7b11      	ldrb	r1, [r2, #12]
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d121      	bne.n	8009b6c <PxMessagingTask+0x9e4>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 8009b28:	4b54      	ldr	r3, [pc, #336]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b2a:	199b      	adds	r3, r3, r6
 8009b2c:	4443      	add	r3, r8
 8009b2e:	7b5b      	ldrb	r3, [r3, #13]
 8009b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b32:	469a      	mov	sl, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <PxMessagingTask+0x9b4>
 8009b38:	f7ff fb5f 	bl	80091fa <PxMessagingTask+0x72>
 8009b3c:	2238      	movs	r2, #56	; 0x38
 8009b3e:	4362      	muls	r2, r4
 8009b40:	4b4e      	ldr	r3, [pc, #312]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b42:	189b      	adds	r3, r3, r2
 8009b44:	4443      	add	r3, r8
 8009b46:	7b9b      	ldrb	r3, [r3, #14]
 8009b48:	469a      	mov	sl, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d11a      	bne.n	8009b84 <PxMessagingTask+0x9fc>
 8009b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b50:	f7ff fb53 	bl	80091fa <PxMessagingTask+0x72>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 8009b54:	2038      	movs	r0, #56	; 0x38
 8009b56:	4360      	muls	r0, r4
 8009b58:	4a48      	ldr	r2, [pc, #288]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b5a:	1812      	adds	r2, r2, r0
 8009b5c:	4442      	add	r2, r8
 8009b5e:	7a10      	ldrb	r0, [r2, #8]
 8009b60:	9100      	str	r1, [sp, #0]
 8009b62:	002a      	movs	r2, r5
 8009b64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009b66:	f7fe fce7 	bl	8008538 <SetupDMAStreams>
 8009b6a:	e7cf      	b.n	8009b0c <PxMessagingTask+0x984>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8009b6c:	2038      	movs	r0, #56	; 0x38
 8009b6e:	4360      	muls	r0, r4
 8009b70:	4a42      	ldr	r2, [pc, #264]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b72:	1812      	adds	r2, r2, r0
 8009b74:	4442      	add	r2, r8
 8009b76:	7a10      	ldrb	r0, [r2, #8]
 8009b78:	9100      	str	r1, [sp, #0]
 8009b7a:	002a      	movs	r2, r5
 8009b7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009b7e:	f7fe fcdb 	bl	8008538 <SetupDMAStreams>
 8009b82:	e7d1      	b.n	8009b28 <PxMessagingTask+0x9a0>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 8009b84:	2238      	movs	r2, #56	; 0x38
 8009b86:	4362      	muls	r2, r4
 8009b88:	4b3c      	ldr	r3, [pc, #240]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009b8a:	189b      	adds	r3, r3, r2
 8009b8c:	4443      	add	r3, r8
 8009b8e:	7a18      	ldrb	r0, [r3, #8]
 8009b90:	4653      	mov	r3, sl
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b96:	002a      	movs	r2, r5
 8009b98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009b9a:	f7fe fccd 	bl	8008538 <SetupDMAStreams>
 8009b9e:	9b06      	ldr	r3, [sp, #24]
 8009ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ba2:	469a      	mov	sl, r3
 8009ba4:	f7ff fb29 	bl	80091fa <PxMessagingTask+0x72>
 8009ba8:	4663      	mov	r3, ip
 8009baa:	9305      	str	r3, [sp, #20]
 8009bac:	9106      	str	r1, [sp, #24]
 8009bae:	4683      	mov	fp, r0
 8009bb0:	4655      	mov	r5, sl
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8009bb2:	2338      	movs	r3, #56	; 0x38
 8009bb4:	4363      	muls	r3, r4
 8009bb6:	4e31      	ldr	r6, [pc, #196]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009bb8:	18f6      	adds	r6, r6, r3
 8009bba:	4647      	mov	r7, r8
 8009bbc:	19f7      	adds	r7, r6, r7
 8009bbe:	7a39      	ldrb	r1, [r7, #8]
 8009bc0:	20e4      	movs	r0, #228	; 0xe4
 8009bc2:	f7fd fad3 	bl	800716c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 8009bc6:	4643      	mov	r3, r8
 8009bc8:	5cf3      	ldrb	r3, [r6, r3]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bce:	5cb1      	ldrb	r1, [r6, r2]
 8009bd0:	18c9      	adds	r1, r1, r3
 8009bd2:	b289      	uxth	r1, r1
 8009bd4:	20e5      	movs	r0, #229	; 0xe5
 8009bd6:	f7fd fac9 	bl	800716c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 8009bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bdc:	5cf3      	ldrb	r3, [r6, r3]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009be2:	5cb1      	ldrb	r1, [r6, r2]
 8009be4:	18c9      	adds	r1, r1, r3
 8009be6:	b289      	uxth	r1, r1
 8009be8:	20e6      	movs	r0, #230	; 0xe6
 8009bea:	f7fd fabf 	bl	800716c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 8009bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bf0:	5cf3      	ldrb	r3, [r6, r3]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	9a05      	ldr	r2, [sp, #20]
 8009bf6:	5cb1      	ldrb	r1, [r6, r2]
 8009bf8:	18c9      	adds	r1, r1, r3
 8009bfa:	b289      	uxth	r1, r1
 8009bfc:	20e7      	movs	r0, #231	; 0xe7
 8009bfe:	f7fd fab5 	bl	800716c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	5cf3      	ldrb	r3, [r6, r3]
 8009c06:	021b      	lsls	r3, r3, #8
 8009c08:	465a      	mov	r2, fp
 8009c0a:	5cb1      	ldrb	r1, [r6, r2]
 8009c0c:	18c9      	adds	r1, r1, r3
 8009c0e:	b289      	uxth	r1, r1
 8009c10:	20e8      	movs	r0, #232	; 0xe8
 8009c12:	f7fd faab 	bl	800716c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 8009c16:	7a7b      	ldrb	r3, [r7, #9]
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	7ab9      	ldrb	r1, [r7, #10]
 8009c1c:	18c9      	adds	r1, r1, r3
 8009c1e:	b289      	uxth	r1, r1
 8009c20:	20e9      	movs	r0, #233	; 0xe9
 8009c22:	f7fd faa3 	bl	800716c <EE_WriteVariable>
								if (numOfParams == 19)
 8009c26:	2d13      	cmp	r5, #19
 8009c28:	d00a      	beq.n	8009c40 <PxMessagingTask+0xab8>
								if (numOfParams == 21)
 8009c2a:	2d15      	cmp	r5, #21
 8009c2c:	d017      	beq.n	8009c5e <PxMessagingTask+0xad6>
  __ASM volatile ("dsb 0xF":::"memory");
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <PxMessagingTask+0xb1c>)
 8009c34:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <PxMessagingTask+0xb20>)
 8009c36:	60da      	str	r2, [r3, #12]
 8009c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009c3c:	46c0      	nop			; (mov r8, r8)
 8009c3e:	e7fd      	b.n	8009c3c <PxMessagingTask+0xab4>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 8009c40:	2338      	movs	r3, #56	; 0x38
 8009c42:	4363      	muls	r3, r4
 8009c44:	4c0d      	ldr	r4, [pc, #52]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009c46:	18e4      	adds	r4, r4, r3
 8009c48:	464b      	mov	r3, r9
 8009c4a:	5ce3      	ldrb	r3, [r4, r3]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	4444      	add	r4, r8
 8009c50:	7b21      	ldrb	r1, [r4, #12]
 8009c52:	18c9      	adds	r1, r1, r3
 8009c54:	b289      	uxth	r1, r1
 8009c56:	20ea      	movs	r0, #234	; 0xea
 8009c58:	f7fd fa88 	bl	800716c <EE_WriteVariable>
 8009c5c:	e7e7      	b.n	8009c2e <PxMessagingTask+0xaa6>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 8009c5e:	2338      	movs	r3, #56	; 0x38
 8009c60:	435c      	muls	r4, r3
 8009c62:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <PxMessagingTask+0xaf4>)
 8009c64:	191b      	adds	r3, r3, r4
 8009c66:	4443      	add	r3, r8
 8009c68:	7b5a      	ldrb	r2, [r3, #13]
 8009c6a:	0212      	lsls	r2, r2, #8
 8009c6c:	7b99      	ldrb	r1, [r3, #14]
 8009c6e:	1889      	adds	r1, r1, r2
 8009c70:	b289      	uxth	r1, r1
 8009c72:	20eb      	movs	r0, #235	; 0xeb
 8009c74:	f7fd fa7a 	bl	800716c <EE_WriteVariable>
 8009c78:	e7d9      	b.n	8009c2e <PxMessagingTask+0xaa6>
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	20000cf8 	.word	0x20000cf8
 8009c80:	20001578 	.word	0x20001578
 8009c84:	20000f28 	.word	0x20000f28
 8009c88:	20000ee3 	.word	0x20000ee3
 8009c8c:	20000ee4 	.word	0x20000ee4
 8009c90:	200010f8 	.word	0x200010f8
 8009c94:	200014e8 	.word	0x200014e8
 8009c98:	20007ff0 	.word	0x20007ff0
 8009c9c:	deadbeef 	.word	0xdeadbeef
 8009ca0:	20000ee2 	.word	0x20000ee2
 8009ca4:	e000ed00 	.word	0xe000ed00
 8009ca8:	05fa0004 	.word	0x05fa0004
 8009cac:	2000105c 	.word	0x2000105c
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009cb0:	49f2      	ldr	r1, [pc, #968]	; (800a07c <PxMessagingTask+0xef4>)
 8009cb2:	1989      	adds	r1, r1, r6
 8009cb4:	194b      	adds	r3, r1, r5
 8009cb6:	7a9a      	ldrb	r2, [r3, #10]
 8009cb8:	4691      	mov	r9, r2
 8009cba:	7ada      	ldrb	r2, [r3, #11]
 8009cbc:	4690      	mov	r8, r2
 8009cbe:	4af0      	ldr	r2, [pc, #960]	; (800a080 <PxMessagingTask+0xef8>)
 8009cc0:	7812      	ldrb	r2, [r2, #0]
 8009cc2:	4694      	mov	ip, r2
 8009cc4:	7a5a      	ldrb	r2, [r3, #9]
 8009cc6:	9206      	str	r2, [sp, #24]
 8009cc8:	7b1a      	ldrb	r2, [r3, #12]
 8009cca:	1e50      	subs	r0, r2, #1
 8009ccc:	4182      	sbcs	r2, r0
 8009cce:	9203      	str	r2, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 8009cd0:	791a      	ldrb	r2, [r3, #4]
 8009cd2:	0612      	lsls	r2, r2, #24
 8009cd4:	4692      	mov	sl, r2
 8009cd6:	795a      	ldrb	r2, [r3, #5]
 8009cd8:	0412      	lsls	r2, r2, #16
 8009cda:	4452      	add	r2, sl
 8009cdc:	79d8      	ldrb	r0, [r3, #7]
 8009cde:	4682      	mov	sl, r0
 8009ce0:	4452      	add	r2, sl
 8009ce2:	7998      	ldrb	r0, [r3, #6]
 8009ce4:	0200      	lsls	r0, r0, #8
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	4452      	add	r2, sl
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009cea:	9202      	str	r2, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009cec:	5d4a      	ldrb	r2, [r1, r5]
 8009cee:	0612      	lsls	r2, r2, #24
 8009cf0:	78d9      	ldrb	r1, [r3, #3]
 8009cf2:	1852      	adds	r2, r2, r1
 8009cf4:	7859      	ldrb	r1, [r3, #1]
 8009cf6:	0409      	lsls	r1, r1, #16
 8009cf8:	1852      	adds	r2, r2, r1
 8009cfa:	7899      	ldrb	r1, [r3, #2]
 8009cfc:	0209      	lsls	r1, r1, #8
 8009cfe:	1852      	adds	r2, r2, r1
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009d00:	9201      	str	r2, [sp, #4]
 8009d02:	7a1b      	ldrb	r3, [r3, #8]
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	464b      	mov	r3, r9
 8009d08:	4642      	mov	r2, r8
 8009d0a:	4661      	mov	r1, ip
 8009d0c:	9806      	ldr	r0, [sp, #24]
 8009d0e:	f7fe ff7f 	bl	8008c10 <StartScastDMAStream>
							break;								
 8009d12:	2300      	movs	r3, #0
 8009d14:	469a      	mov	sl, r3
 8009d16:	f7ff fa70 	bl	80091fa <PxMessagingTask+0x72>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 8009d1a:	4bd8      	ldr	r3, [pc, #864]	; (800a07c <PxMessagingTask+0xef4>)
 8009d1c:	199b      	adds	r3, r3, r6
 8009d1e:	5d5b      	ldrb	r3, [r3, r5]
 8009d20:	469a      	mov	sl, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d000      	beq.n	8009d28 <PxMessagingTask+0xba0>
 8009d26:	e07f      	b.n	8009e28 <PxMessagingTask+0xca0>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8009d28:	2238      	movs	r2, #56	; 0x38
 8009d2a:	4362      	muls	r2, r4
 8009d2c:	4bd3      	ldr	r3, [pc, #844]	; (800a07c <PxMessagingTask+0xef4>)
 8009d2e:	189b      	adds	r3, r3, r2
 8009d30:	195d      	adds	r5, r3, r5
 8009d32:	78ab      	ldrb	r3, [r5, #2]
 8009d34:	061b      	lsls	r3, r3, #24
 8009d36:	78ea      	ldrb	r2, [r5, #3]
 8009d38:	0412      	lsls	r2, r2, #16
 8009d3a:	189b      	adds	r3, r3, r2
 8009d3c:	796a      	ldrb	r2, [r5, #5]
 8009d3e:	189b      	adds	r3, r3, r2
 8009d40:	792a      	ldrb	r2, [r5, #4]
 8009d42:	0212      	lsls	r2, r2, #8
 8009d44:	189b      	adds	r3, r3, r2
 8009d46:	786a      	ldrb	r2, [r5, #1]
 8009d48:	3a01      	subs	r2, #1
 8009d4a:	b2d1      	uxtb	r1, r2
 8009d4c:	2907      	cmp	r1, #7
 8009d4e:	d901      	bls.n	8009d54 <PxMessagingTask+0xbcc>
 8009d50:	f7ff fa4e 	bl	80091f0 <PxMessagingTask+0x68>
 8009d54:	b2d2      	uxtb	r2, r2
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	49ca      	ldr	r1, [pc, #808]	; (800a084 <PxMessagingTask+0xefc>)
 8009d5a:	588a      	ldr	r2, [r1, r2]
 8009d5c:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 8009d5e:	781a      	ldrb	r2, [r3, #0]
 8009d60:	4bc9      	ldr	r3, [pc, #804]	; (800a088 <PxMessagingTask+0xf00>)
 8009d62:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009d64:	2201      	movs	r2, #1
 8009d66:	211f      	movs	r1, #31
 8009d68:	9807      	ldr	r0, [sp, #28]
 8009d6a:	f7fe ff2b 	bl	8008bc4 <SendMessageToModule>
 8009d6e:	f7ff fa44 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[0] = *(__IO int8_t *)temp32; 
 8009d72:	781a      	ldrb	r2, [r3, #0]
 8009d74:	4bc4      	ldr	r3, [pc, #784]	; (800a088 <PxMessagingTask+0xf00>)
 8009d76:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009d78:	2201      	movs	r2, #1
 8009d7a:	211f      	movs	r1, #31
 8009d7c:	9807      	ldr	r0, [sp, #28]
 8009d7e:	f7fe ff21 	bl	8008bc4 <SendMessageToModule>
 8009d82:	f7ff fa3a 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 8009d86:	8819      	ldrh	r1, [r3, #0]
 8009d88:	4abf      	ldr	r2, [pc, #764]	; (800a088 <PxMessagingTask+0xf00>)
 8009d8a:	7011      	strb	r1, [r2, #0]
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009d92:	2202      	movs	r2, #2
 8009d94:	211f      	movs	r1, #31
 8009d96:	9807      	ldr	r0, [sp, #28]
 8009d98:	f7fe ff14 	bl	8008bc4 <SendMessageToModule>
 8009d9c:	f7ff fa2d 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009da0:	8819      	ldrh	r1, [r3, #0]
 8009da2:	4ab9      	ldr	r2, [pc, #740]	; (800a088 <PxMessagingTask+0xf00>)
 8009da4:	7011      	strb	r1, [r2, #0]
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b21b      	sxth	r3, r3
 8009daa:	121b      	asrs	r3, r3, #8
 8009dac:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009dae:	2202      	movs	r2, #2
 8009db0:	211f      	movs	r1, #31
 8009db2:	9807      	ldr	r0, [sp, #28]
 8009db4:	f7fe ff06 	bl	8008bc4 <SendMessageToModule>
 8009db8:	f7ff fa1f 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009dbc:	6819      	ldr	r1, [r3, #0]
 8009dbe:	4ab2      	ldr	r2, [pc, #712]	; (800a088 <PxMessagingTask+0xf00>)
 8009dc0:	7011      	strb	r1, [r2, #0]
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	0a09      	lsrs	r1, r1, #8
 8009dc6:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009dc8:	6819      	ldr	r1, [r3, #0]
 8009dca:	0c09      	lsrs	r1, r1, #16
 8009dcc:	7091      	strb	r1, [r2, #2]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	0e1b      	lsrs	r3, r3, #24
 8009dd2:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	211f      	movs	r1, #31
 8009dd8:	9807      	ldr	r0, [sp, #28]
 8009dda:	f7fe fef3 	bl	8008bc4 <SendMessageToModule>
 8009dde:	f7ff fa0c 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009de2:	6819      	ldr	r1, [r3, #0]
 8009de4:	4aa8      	ldr	r2, [pc, #672]	; (800a088 <PxMessagingTask+0xf00>)
 8009de6:	7011      	strb	r1, [r2, #0]
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	1209      	asrs	r1, r1, #8
 8009dec:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	1409      	asrs	r1, r1, #16
 8009df2:	7091      	strb	r1, [r2, #2]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	161b      	asrs	r3, r3, #24
 8009df8:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	211f      	movs	r1, #31
 8009dfe:	9807      	ldr	r0, [sp, #28]
 8009e00:	f7fe fee0 	bl	8008bc4 <SendMessageToModule>
 8009e04:	f7ff f9f9 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 8009e08:	7819      	ldrb	r1, [r3, #0]
 8009e0a:	4a9f      	ldr	r2, [pc, #636]	; (800a088 <PxMessagingTask+0xf00>)
 8009e0c:	7011      	strb	r1, [r2, #0]
 8009e0e:	7859      	ldrb	r1, [r3, #1]
 8009e10:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 8009e12:	7899      	ldrb	r1, [r3, #2]
 8009e14:	7091      	strb	r1, [r2, #2]
 8009e16:	78db      	ldrb	r3, [r3, #3]
 8009e18:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 8009e1a:	2208      	movs	r2, #8
 8009e1c:	211f      	movs	r1, #31
 8009e1e:	9807      	ldr	r0, [sp, #28]
 8009e20:	f7fe fed0 	bl	8008bc4 <SendMessageToModule>
 8009e24:	f7ff f9e9 	bl	80091fa <PxMessagingTask+0x72>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d01d      	beq.n	8009e68 <PxMessagingTask+0xce0>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 8009e2c:	d801      	bhi.n	8009e32 <PxMessagingTask+0xcaa>
 8009e2e:	f000 fca3 	bl	800a778 <PxMessagingTask+0x15f0>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 8009e32:	001d      	movs	r5, r3
 8009e34:	3d04      	subs	r5, #4
 8009e36:	00ad      	lsls	r5, r5, #2
 8009e38:	4b94      	ldr	r3, [pc, #592]	; (800a08c <PxMessagingTask+0xf04>)
 8009e3a:	58ea      	ldr	r2, [r5, r3]
 8009e3c:	250f      	movs	r5, #15
 8009e3e:	4015      	ands	r5, r2
 8009e40:	46aa      	mov	sl, r5
 8009e42:	4b91      	ldr	r3, [pc, #580]	; (800a088 <PxMessagingTask+0xf00>)
 8009e44:	701d      	strb	r5, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 8009e46:	d100      	bne.n	8009e4a <PxMessagingTask+0xcc2>
 8009e48:	e0af      	b.n	8009faa <PxMessagingTask+0xe22>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 8009e4a:	0c12      	lsrs	r2, r2, #16
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	059b      	lsls	r3, r3, #22
 8009e50:	18d3      	adds	r3, r2, r3
 8009e52:	3d01      	subs	r5, #1
 8009e54:	b2e9      	uxtb	r1, r5
 8009e56:	2907      	cmp	r1, #7
 8009e58:	d901      	bls.n	8009e5e <PxMessagingTask+0xcd6>
 8009e5a:	f000 fc7c 	bl	800a756 <PxMessagingTask+0x15ce>
 8009e5e:	b2ed      	uxtb	r5, r5
 8009e60:	00ad      	lsls	r5, r5, #2
 8009e62:	498b      	ldr	r1, [pc, #556]	; (800a090 <PxMessagingTask+0xf08>)
 8009e64:	5949      	ldr	r1, [r1, r5]
 8009e66:	468f      	mov	pc, r1
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 8009e68:	4b84      	ldr	r3, [pc, #528]	; (800a07c <PxMessagingTask+0xef4>)
 8009e6a:	2038      	movs	r0, #56	; 0x38
 8009e6c:	4360      	muls	r0, r4
 8009e6e:	1818      	adds	r0, r3, r0
 8009e70:	1841      	adds	r1, r0, r1
 8009e72:	3901      	subs	r1, #1
 8009e74:	2000      	movs	r0, #0
 8009e76:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 8009e78:	1c68      	adds	r0, r5, #1
 8009e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e7c:	4694      	mov	ip, r2
 8009e7e:	4460      	add	r0, ip
 8009e80:	18c0      	adds	r0, r0, r3
 8009e82:	f7f9 f9c7 	bl	8003214 <IsModuleParameter>
 8009e86:	1e05      	subs	r5, r0, #0
 8009e88:	900b      	str	r0, [sp, #44]	; 0x2c
									if (temp == 0) {																					// Parameter does not exist
 8009e8a:	d013      	beq.n	8009eb4 <PxMessagingTask+0xd2c>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 8009e8c:	3d01      	subs	r5, #1
 8009e8e:	4a81      	ldr	r2, [pc, #516]	; (800a094 <PxMessagingTask+0xf0c>)
 8009e90:	230c      	movs	r3, #12
 8009e92:	435d      	muls	r5, r3
 8009e94:	58ab      	ldr	r3, [r5, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 8009e96:	1952      	adds	r2, r2, r5
 8009e98:	7912      	ldrb	r2, [r2, #4]
 8009e9a:	497b      	ldr	r1, [pc, #492]	; (800a088 <PxMessagingTask+0xf00>)
 8009e9c:	700a      	strb	r2, [r1, #0]
 8009e9e:	3a01      	subs	r2, #1
 8009ea0:	b2d1      	uxtb	r1, r2
 8009ea2:	2907      	cmp	r1, #7
 8009ea4:	d901      	bls.n	8009eaa <PxMessagingTask+0xd22>
 8009ea6:	f000 fc52 	bl	800a74e <PxMessagingTask+0x15c6>
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	0092      	lsls	r2, r2, #2
 8009eae:	497a      	ldr	r1, [pc, #488]	; (800a098 <PxMessagingTask+0xf10>)
 8009eb0:	588a      	ldr	r2, [r1, r2]
 8009eb2:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	211f      	movs	r1, #31
 8009eb8:	9807      	ldr	r0, [sp, #28]
 8009eba:	f7fe fe83 	bl	8008bc4 <SendMessageToModule>
 8009ebe:	46aa      	mov	sl, r5
 8009ec0:	f7ff f99b 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8009ec4:	781a      	ldrb	r2, [r3, #0]
 8009ec6:	4b70      	ldr	r3, [pc, #448]	; (800a088 <PxMessagingTask+0xf00>)
 8009ec8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009eca:	2202      	movs	r2, #2
 8009ecc:	211f      	movs	r1, #31
 8009ece:	9807      	ldr	r0, [sp, #28]
 8009ed0:	f7fe fe78 	bl	8008bc4 <SendMessageToModule>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	469a      	mov	sl, r3
 8009ed8:	f7ff f98f 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = *(__IO int8_t *)temp32; 
 8009edc:	781a      	ldrb	r2, [r3, #0]
 8009ede:	4b6a      	ldr	r3, [pc, #424]	; (800a088 <PxMessagingTask+0xf00>)
 8009ee0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	211f      	movs	r1, #31
 8009ee6:	9807      	ldr	r0, [sp, #28]
 8009ee8:	f7fe fe6c 	bl	8008bc4 <SendMessageToModule>
 8009eec:	2300      	movs	r3, #0
 8009eee:	469a      	mov	sl, r3
 8009ef0:	f7ff f983 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009ef4:	8819      	ldrh	r1, [r3, #0]
 8009ef6:	4a64      	ldr	r2, [pc, #400]	; (800a088 <PxMessagingTask+0xf00>)
 8009ef8:	7051      	strb	r1, [r2, #1]
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009f00:	2203      	movs	r2, #3
 8009f02:	211f      	movs	r1, #31
 8009f04:	9807      	ldr	r0, [sp, #28]
 8009f06:	f7fe fe5d 	bl	8008bc4 <SendMessageToModule>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	469a      	mov	sl, r3
 8009f0e:	f7ff f974 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009f12:	8819      	ldrh	r1, [r3, #0]
 8009f14:	4a5c      	ldr	r2, [pc, #368]	; (800a088 <PxMessagingTask+0xf00>)
 8009f16:	7051      	strb	r1, [r2, #1]
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b21b      	sxth	r3, r3
 8009f1c:	121b      	asrs	r3, r3, #8
 8009f1e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009f20:	2203      	movs	r2, #3
 8009f22:	211f      	movs	r1, #31
 8009f24:	9807      	ldr	r0, [sp, #28]
 8009f26:	f7fe fe4d 	bl	8008bc4 <SendMessageToModule>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	469a      	mov	sl, r3
 8009f2e:	f7ff f964 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	4a54      	ldr	r2, [pc, #336]	; (800a088 <PxMessagingTask+0xf00>)
 8009f36:	7051      	strb	r1, [r2, #1]
 8009f38:	6819      	ldr	r1, [r3, #0]
 8009f3a:	0a09      	lsrs	r1, r1, #8
 8009f3c:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009f3e:	6819      	ldr	r1, [r3, #0]
 8009f40:	0c09      	lsrs	r1, r1, #16
 8009f42:	70d1      	strb	r1, [r2, #3]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	0e1b      	lsrs	r3, r3, #24
 8009f48:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	211f      	movs	r1, #31
 8009f4e:	9807      	ldr	r0, [sp, #28]
 8009f50:	f7fe fe38 	bl	8008bc4 <SendMessageToModule>
 8009f54:	2300      	movs	r3, #0
 8009f56:	469a      	mov	sl, r3
 8009f58:	f7ff f94f 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009f5c:	6819      	ldr	r1, [r3, #0]
 8009f5e:	4a4a      	ldr	r2, [pc, #296]	; (800a088 <PxMessagingTask+0xf00>)
 8009f60:	7051      	strb	r1, [r2, #1]
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	1209      	asrs	r1, r1, #8
 8009f66:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009f68:	6819      	ldr	r1, [r3, #0]
 8009f6a:	1409      	asrs	r1, r1, #16
 8009f6c:	70d1      	strb	r1, [r2, #3]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	161b      	asrs	r3, r3, #24
 8009f72:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8009f74:	2205      	movs	r2, #5
 8009f76:	211f      	movs	r1, #31
 8009f78:	9807      	ldr	r0, [sp, #28]
 8009f7a:	f7fe fe23 	bl	8008bc4 <SendMessageToModule>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	469a      	mov	sl, r3
 8009f82:	f7ff f93a 	bl	80091fa <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 8009f86:	7819      	ldrb	r1, [r3, #0]
 8009f88:	4a3f      	ldr	r2, [pc, #252]	; (800a088 <PxMessagingTask+0xf00>)
 8009f8a:	7051      	strb	r1, [r2, #1]
 8009f8c:	7859      	ldrb	r1, [r3, #1]
 8009f8e:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8009f90:	7899      	ldrb	r1, [r3, #2]
 8009f92:	70d1      	strb	r1, [r2, #3]
 8009f94:	78db      	ldrb	r3, [r3, #3]
 8009f96:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8009f98:	2209      	movs	r2, #9
 8009f9a:	211f      	movs	r1, #31
 8009f9c:	9807      	ldr	r0, [sp, #28]
 8009f9e:	f7fe fe11 	bl	8008bc4 <SendMessageToModule>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	469a      	mov	sl, r3
 8009fa6:	f7ff f928 	bl	80091fa <PxMessagingTask+0x72>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8009faa:	2201      	movs	r2, #1
 8009fac:	211f      	movs	r1, #31
 8009fae:	9807      	ldr	r0, [sp, #28]
 8009fb0:	f7fe fe08 	bl	8008bc4 <SendMessageToModule>
 8009fb4:	f7ff f921 	bl	80091fa <PxMessagingTask+0x72>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	4b33      	ldr	r3, [pc, #204]	; (800a088 <PxMessagingTask+0xf00>)
 8009fbc:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	211f      	movs	r1, #31
 8009fc2:	9807      	ldr	r0, [sp, #28]
 8009fc4:	f7fe fdfe 	bl	8008bc4 <SendMessageToModule>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	469a      	mov	sl, r3
 8009fcc:	f7ff f915 	bl	80091fa <PxMessagingTask+0x72>
												messageParams[1] = *(__IO int8_t *)temp32; 
 8009fd0:	781a      	ldrb	r2, [r3, #0]
 8009fd2:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <PxMessagingTask+0xf00>)
 8009fd4:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	211f      	movs	r1, #31
 8009fda:	9807      	ldr	r0, [sp, #28]
 8009fdc:	f7fe fdf2 	bl	8008bc4 <SendMessageToModule>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	469a      	mov	sl, r3
 8009fe4:	f7ff f909 	bl	80091fa <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009fe8:	8819      	ldrh	r1, [r3, #0]
 8009fea:	4a27      	ldr	r2, [pc, #156]	; (800a088 <PxMessagingTask+0xf00>)
 8009fec:	7051      	strb	r1, [r2, #1]
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	0a1b      	lsrs	r3, r3, #8
 8009ff2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009ff4:	2203      	movs	r2, #3
 8009ff6:	211f      	movs	r1, #31
 8009ff8:	9807      	ldr	r0, [sp, #28]
 8009ffa:	f7fe fde3 	bl	8008bc4 <SendMessageToModule>
 8009ffe:	2300      	movs	r3, #0
 800a000:	469a      	mov	sl, r3
 800a002:	f7ff f8fa 	bl	80091fa <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a006:	8819      	ldrh	r1, [r3, #0]
 800a008:	4a1f      	ldr	r2, [pc, #124]	; (800a088 <PxMessagingTask+0xf00>)
 800a00a:	7051      	strb	r1, [r2, #1]
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b21b      	sxth	r3, r3
 800a010:	121b      	asrs	r3, r3, #8
 800a012:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a014:	2203      	movs	r2, #3
 800a016:	211f      	movs	r1, #31
 800a018:	9807      	ldr	r0, [sp, #28]
 800a01a:	f7fe fdd3 	bl	8008bc4 <SendMessageToModule>
 800a01e:	2300      	movs	r3, #0
 800a020:	469a      	mov	sl, r3
 800a022:	f7ff f8ea 	bl	80091fa <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a026:	6819      	ldr	r1, [r3, #0]
 800a028:	4a17      	ldr	r2, [pc, #92]	; (800a088 <PxMessagingTask+0xf00>)
 800a02a:	7051      	strb	r1, [r2, #1]
 800a02c:	6819      	ldr	r1, [r3, #0]
 800a02e:	0a09      	lsrs	r1, r1, #8
 800a030:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	0c09      	lsrs	r1, r1, #16
 800a036:	70d1      	strb	r1, [r2, #3]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	0e1b      	lsrs	r3, r3, #24
 800a03c:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a03e:	2205      	movs	r2, #5
 800a040:	211f      	movs	r1, #31
 800a042:	9807      	ldr	r0, [sp, #28]
 800a044:	f7fe fdbe 	bl	8008bc4 <SendMessageToModule>
 800a048:	2300      	movs	r3, #0
 800a04a:	469a      	mov	sl, r3
 800a04c:	f7ff f8d5 	bl	80091fa <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	4a0d      	ldr	r2, [pc, #52]	; (800a088 <PxMessagingTask+0xf00>)
 800a054:	7051      	strb	r1, [r2, #1]
 800a056:	6819      	ldr	r1, [r3, #0]
 800a058:	1209      	asrs	r1, r1, #8
 800a05a:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	1409      	asrs	r1, r1, #16
 800a060:	70d1      	strb	r1, [r2, #3]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	161b      	asrs	r3, r3, #24
 800a066:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a068:	2205      	movs	r2, #5
 800a06a:	211f      	movs	r1, #31
 800a06c:	9807      	ldr	r0, [sp, #28]
 800a06e:	f7fe fda9 	bl	8008bc4 <SendMessageToModule>
 800a072:	2300      	movs	r3, #0
 800a074:	469a      	mov	sl, r3
 800a076:	f7ff f8c0 	bl	80091fa <PxMessagingTask+0x72>
 800a07a:	46c0      	nop			; (mov r8, r8)
 800a07c:	20000cf8 	.word	0x20000cf8
 800a080:	2000105c 	.word	0x2000105c
 800a084:	0801aa60 	.word	0x0801aa60
 800a088:	20000f28 	.word	0x20000f28
 800a08c:	200068c8 	.word	0x200068c8
 800a090:	0801aa80 	.word	0x0801aa80
 800a094:	20000084 	.word	0x20000084
 800a098:	0801aaa0 	.word	0x0801aaa0
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a09c:	7819      	ldrb	r1, [r3, #0]
 800a09e:	4bd8      	ldr	r3, [pc, #864]	; (800a400 <PxMessagingTask+0x1278>)
 800a0a0:	7059      	strb	r1, [r3, #1]
 800a0a2:	49d8      	ldr	r1, [pc, #864]	; (800a404 <PxMessagingTask+0x127c>)
 800a0a4:	1851      	adds	r1, r2, r1
 800a0a6:	7809      	ldrb	r1, [r1, #0]
 800a0a8:	7099      	strb	r1, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a0aa:	49d7      	ldr	r1, [pc, #860]	; (800a408 <PxMessagingTask+0x1280>)
 800a0ac:	1851      	adds	r1, r2, r1
 800a0ae:	7809      	ldrb	r1, [r1, #0]
 800a0b0:	70d9      	strb	r1, [r3, #3]
 800a0b2:	49d6      	ldr	r1, [pc, #856]	; (800a40c <PxMessagingTask+0x1284>)
 800a0b4:	468c      	mov	ip, r1
 800a0b6:	4462      	add	r2, ip
 800a0b8:	7812      	ldrb	r2, [r2, #0]
 800a0ba:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a0bc:	2209      	movs	r2, #9
 800a0be:	211f      	movs	r1, #31
 800a0c0:	9807      	ldr	r0, [sp, #28]
 800a0c2:	f7fe fd7f 	bl	8008bc4 <SendMessageToModule>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	469a      	mov	sl, r3
 800a0ca:	f7ff f896 	bl	80091fa <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a0ce:	4bd0      	ldr	r3, [pc, #832]	; (800a410 <PxMessagingTask+0x1288>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2002      	movs	r0, #2
 800a0d6:	4240      	negs	r0, r0
 800a0d8:	17c1      	asrs	r1, r0, #31
 800a0da:	1812      	adds	r2, r2, r0
 800a0dc:	414b      	adcs	r3, r1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <PxMessagingTask+0xf70>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a0e2:	4bcc      	ldr	r3, [pc, #816]	; (800a414 <PxMessagingTask+0x128c>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b10      	cmp	r3, #16
 800a0e8:	d100      	bne.n	800a0ec <PxMessagingTask+0xf64>
 800a0ea:	e349      	b.n	800a780 <PxMessagingTask+0x15f8>
 800a0ec:	2500      	movs	r5, #0
 800a0ee:	4bc9      	ldr	r3, [pc, #804]	; (800a414 <PxMessagingTask+0x128c>)
 800a0f0:	701d      	strb	r5, [r3, #0]
 800a0f2:	46aa      	mov	sl, r5
 800a0f4:	f7ff f881 	bl	80091fa <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <PxMessagingTask+0xf78>
 800a0fc:	2a01      	cmp	r2, #1
 800a0fe:	d8f0      	bhi.n	800a0e2 <PxMessagingTask+0xf5a>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a100:	2138      	movs	r1, #56	; 0x38
 800a102:	4361      	muls	r1, r4
 800a104:	4ac4      	ldr	r2, [pc, #784]	; (800a418 <PxMessagingTask+0x1290>)
 800a106:	1852      	adds	r2, r2, r1
 800a108:	5d52      	ldrb	r2, [r2, r5]
 800a10a:	4692      	mov	sl, r2
 800a10c:	4ac3      	ldr	r2, [pc, #780]	; (800a41c <PxMessagingTask+0x1294>)
 800a10e:	4651      	mov	r1, sl
 800a110:	7011      	strb	r1, [r2, #0]
 800a112:	2908      	cmp	r1, #8
 800a114:	d8e5      	bhi.n	800a0e2 <PxMessagingTask+0xf5a>
 800a116:	008a      	lsls	r2, r1, #2
 800a118:	49c1      	ldr	r1, [pc, #772]	; (800a420 <PxMessagingTask+0x1298>)
 800a11a:	588a      	ldr	r2, [r1, r2]
 800a11c:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a11e:	4bbd      	ldr	r3, [pc, #756]	; (800a414 <PxMessagingTask+0x128c>)
 800a120:	2210      	movs	r2, #16
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	f7ff f869 	bl	80091fa <PxMessagingTask+0x72>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a128:	4ab9      	ldr	r2, [pc, #740]	; (800a410 <PxMessagingTask+0x1288>)
 800a12a:	2038      	movs	r0, #56	; 0x38
 800a12c:	4360      	muls	r0, r4
 800a12e:	49ba      	ldr	r1, [pc, #744]	; (800a418 <PxMessagingTask+0x1290>)
 800a130:	1809      	adds	r1, r1, r0
 800a132:	1949      	adds	r1, r1, r5
 800a134:	784b      	ldrb	r3, [r1, #1]
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	6053      	str	r3, [r2, #4]
 800a13c:	e7d1      	b.n	800a0e2 <PxMessagingTask+0xf5a>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a13e:	4ab4      	ldr	r2, [pc, #720]	; (800a410 <PxMessagingTask+0x1288>)
 800a140:	2038      	movs	r0, #56	; 0x38
 800a142:	4360      	muls	r0, r4
 800a144:	49b4      	ldr	r1, [pc, #720]	; (800a418 <PxMessagingTask+0x1290>)
 800a146:	1809      	adds	r1, r1, r0
 800a148:	1949      	adds	r1, r1, r5
 800a14a:	2301      	movs	r3, #1
 800a14c:	56cb      	ldrsb	r3, [r1, r3]
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	17db      	asrs	r3, r3, #31
 800a152:	6053      	str	r3, [r2, #4]
 800a154:	e7c5      	b.n	800a0e2 <PxMessagingTask+0xf5a>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a156:	4aae      	ldr	r2, [pc, #696]	; (800a410 <PxMessagingTask+0x1288>)
 800a158:	2038      	movs	r0, #56	; 0x38
 800a15a:	4360      	muls	r0, r4
 800a15c:	49ae      	ldr	r1, [pc, #696]	; (800a418 <PxMessagingTask+0x1290>)
 800a15e:	1809      	adds	r1, r1, r0
 800a160:	1949      	adds	r1, r1, r5
 800a162:	788b      	ldrb	r3, [r1, #2]
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	7849      	ldrb	r1, [r1, #1]
 800a168:	185b      	adds	r3, r3, r1
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	17db      	asrs	r3, r3, #31
 800a16e:	6053      	str	r3, [r2, #4]
 800a170:	e7b7      	b.n	800a0e2 <PxMessagingTask+0xf5a>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800a172:	4aa7      	ldr	r2, [pc, #668]	; (800a410 <PxMessagingTask+0x1288>)
 800a174:	2038      	movs	r0, #56	; 0x38
 800a176:	4360      	muls	r0, r4
 800a178:	49a7      	ldr	r1, [pc, #668]	; (800a418 <PxMessagingTask+0x1290>)
 800a17a:	1809      	adds	r1, r1, r0
 800a17c:	1949      	adds	r1, r1, r5
 800a17e:	788b      	ldrb	r3, [r1, #2]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	7849      	ldrb	r1, [r1, #1]
 800a184:	185b      	adds	r3, r3, r1
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	17db      	asrs	r3, r3, #31
 800a18a:	6053      	str	r3, [r2, #4]
 800a18c:	e7a9      	b.n	800a0e2 <PxMessagingTask+0xf5a>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a18e:	4aa0      	ldr	r2, [pc, #640]	; (800a410 <PxMessagingTask+0x1288>)
 800a190:	2038      	movs	r0, #56	; 0x38
 800a192:	4360      	muls	r0, r4
 800a194:	49a0      	ldr	r1, [pc, #640]	; (800a418 <PxMessagingTask+0x1290>)
 800a196:	1809      	adds	r1, r1, r0
 800a198:	1949      	adds	r1, r1, r5
 800a19a:	788b      	ldrb	r3, [r1, #2]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	78c8      	ldrb	r0, [r1, #3]
 800a1a0:	0400      	lsls	r0, r0, #16
 800a1a2:	181b      	adds	r3, r3, r0
 800a1a4:	7848      	ldrb	r0, [r1, #1]
 800a1a6:	181b      	adds	r3, r3, r0
 800a1a8:	7909      	ldrb	r1, [r1, #4]
 800a1aa:	0609      	lsls	r1, r1, #24
 800a1ac:	185b      	adds	r3, r3, r1
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	6053      	str	r3, [r2, #4]
 800a1b4:	e795      	b.n	800a0e2 <PxMessagingTask+0xf5a>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800a1b6:	4a96      	ldr	r2, [pc, #600]	; (800a410 <PxMessagingTask+0x1288>)
 800a1b8:	2038      	movs	r0, #56	; 0x38
 800a1ba:	4360      	muls	r0, r4
 800a1bc:	4996      	ldr	r1, [pc, #600]	; (800a418 <PxMessagingTask+0x1290>)
 800a1be:	1809      	adds	r1, r1, r0
 800a1c0:	1949      	adds	r1, r1, r5
 800a1c2:	788b      	ldrb	r3, [r1, #2]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	7848      	ldrb	r0, [r1, #1]
 800a1c8:	181b      	adds	r3, r3, r0
 800a1ca:	78c8      	ldrb	r0, [r1, #3]
 800a1cc:	0400      	lsls	r0, r0, #16
 800a1ce:	181b      	adds	r3, r3, r0
 800a1d0:	7909      	ldrb	r1, [r1, #4]
 800a1d2:	0609      	lsls	r1, r1, #24
 800a1d4:	185b      	adds	r3, r3, r1
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	17db      	asrs	r3, r3, #31
 800a1da:	6053      	str	r3, [r2, #4]
 800a1dc:	e781      	b.n	800a0e2 <PxMessagingTask+0xf5a>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a1de:	4a8c      	ldr	r2, [pc, #560]	; (800a410 <PxMessagingTask+0x1288>)
 800a1e0:	2038      	movs	r0, #56	; 0x38
 800a1e2:	4360      	muls	r0, r4
 800a1e4:	498c      	ldr	r1, [pc, #560]	; (800a418 <PxMessagingTask+0x1290>)
 800a1e6:	1809      	adds	r1, r1, r0
 800a1e8:	1949      	adds	r1, r1, r5
 800a1ea:	788b      	ldrb	r3, [r1, #2]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	78c8      	ldrb	r0, [r1, #3]
 800a1f0:	0400      	lsls	r0, r0, #16
 800a1f2:	181b      	adds	r3, r3, r0
 800a1f4:	7848      	ldrb	r0, [r1, #1]
 800a1f6:	181b      	adds	r3, r3, r0
 800a1f8:	7909      	ldrb	r1, [r1, #4]
 800a1fa:	0609      	lsls	r1, r1, #24
 800a1fc:	185b      	adds	r3, r3, r1
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	6053      	str	r3, [r2, #4]
 800a204:	e76d      	b.n	800a0e2 <PxMessagingTask+0xf5a>
							responseStatus = BOS_OK;		// Initialize response
 800a206:	4b83      	ldr	r3, [pc, #524]	; (800a414 <PxMessagingTask+0x128c>)
 800a208:	2200      	movs	r2, #0
 800a20a:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800a20c:	46a8      	mov	r8, r5
 800a20e:	4b82      	ldr	r3, [pc, #520]	; (800a418 <PxMessagingTask+0x1290>)
 800a210:	199b      	adds	r3, r3, r6
 800a212:	5d5b      	ldrb	r3, [r3, r5]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d100      	bne.n	800a21a <PxMessagingTask+0x1092>
 800a218:	e12e      	b.n	800a478 <PxMessagingTask+0x12f0>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800a21a:	2b1e      	cmp	r3, #30
 800a21c:	d900      	bls.n	800a220 <PxMessagingTask+0x1098>
 800a21e:	e113      	b.n	800a448 <PxMessagingTask+0x12c0>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a220:	1e5d      	subs	r5, r3, #1
 800a222:	00aa      	lsls	r2, r5, #2
 800a224:	4b7f      	ldr	r3, [pc, #508]	; (800a424 <PxMessagingTask+0x129c>)
 800a226:	58d2      	ldr	r2, [r2, r3]
 800a228:	0c13      	lsrs	r3, r2, #16
 800a22a:	2180      	movs	r1, #128	; 0x80
 800a22c:	0589      	lsls	r1, r1, #22
 800a22e:	468c      	mov	ip, r1
 800a230:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a232:	2101      	movs	r1, #1
 800a234:	4441      	add	r1, r8
 800a236:	4689      	mov	r9, r1
 800a238:	2038      	movs	r0, #56	; 0x38
 800a23a:	4360      	muls	r0, r4
 800a23c:	4976      	ldr	r1, [pc, #472]	; (800a418 <PxMessagingTask+0x1290>)
 800a23e:	1809      	adds	r1, r1, r0
 800a240:	4648      	mov	r0, r9
 800a242:	5c09      	ldrb	r1, [r1, r0]
 800a244:	468a      	mov	sl, r1
 800a246:	3901      	subs	r1, #1
 800a248:	b2c8      	uxtb	r0, r1
 800a24a:	2807      	cmp	r0, #7
 800a24c:	d80d      	bhi.n	800a26a <PxMessagingTask+0x10e2>
 800a24e:	b2c9      	uxtb	r1, r1
 800a250:	0089      	lsls	r1, r1, #2
 800a252:	4875      	ldr	r0, [pc, #468]	; (800a428 <PxMessagingTask+0x12a0>)
 800a254:	5841      	ldr	r1, [r0, r1]
 800a256:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a258:	0712      	lsls	r2, r2, #28
 800a25a:	d022      	beq.n	800a2a2 <PxMessagingTask+0x111a>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a25c:	2138      	movs	r1, #56	; 0x38
 800a25e:	4361      	muls	r1, r4
 800a260:	4a6d      	ldr	r2, [pc, #436]	; (800a418 <PxMessagingTask+0x1290>)
 800a262:	1852      	adds	r2, r2, r1
 800a264:	4442      	add	r2, r8
 800a266:	7892      	ldrb	r2, [r2, #2]
 800a268:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a26a:	2338      	movs	r3, #56	; 0x38
 800a26c:	4363      	muls	r3, r4
 800a26e:	4a6a      	ldr	r2, [pc, #424]	; (800a418 <PxMessagingTask+0x1290>)
 800a270:	18d2      	adds	r2, r2, r3
 800a272:	4643      	mov	r3, r8
 800a274:	5cd3      	ldrb	r3, [r2, r3]
 800a276:	3b01      	subs	r3, #1
 800a278:	0098      	lsls	r0, r3, #2
 800a27a:	496a      	ldr	r1, [pc, #424]	; (800a424 <PxMessagingTask+0x129c>)
 800a27c:	5841      	ldr	r1, [r0, r1]
 800a27e:	4648      	mov	r0, r9
 800a280:	5c12      	ldrb	r2, [r2, r0]
 800a282:	200f      	movs	r0, #15
 800a284:	4008      	ands	r0, r1
 800a286:	4290      	cmp	r0, r2
 800a288:	d100      	bne.n	800a28c <PxMessagingTask+0x1104>
 800a28a:	e0e0      	b.n	800a44e <PxMessagingTask+0x12c6>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4867      	ldr	r0, [pc, #412]	; (800a42c <PxMessagingTask+0x12a4>)
 800a290:	4684      	mov	ip, r0
 800a292:	4462      	add	r2, ip
 800a294:	400a      	ands	r2, r1
 800a296:	4963      	ldr	r1, [pc, #396]	; (800a424 <PxMessagingTask+0x129c>)
 800a298:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a29a:	4b5e      	ldr	r3, [pc, #376]	; (800a414 <PxMessagingTask+0x128c>)
 800a29c:	2214      	movs	r2, #20
 800a29e:	701a      	strb	r2, [r3, #0]
 800a2a0:	e0d5      	b.n	800a44e <PxMessagingTask+0x12c6>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	f007 fcc6 	bl	8011c34 <malloc>
 800a2a8:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a2aa:	d005      	beq.n	800a2b8 <PxMessagingTask+0x1130>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a2ac:	00ad      	lsls	r5, r5, #2
 800a2ae:	0400      	lsls	r0, r0, #16
 800a2b0:	4450      	add	r0, sl
 800a2b2:	4a5c      	ldr	r2, [pc, #368]	; (800a424 <PxMessagingTask+0x129c>)
 800a2b4:	50a8      	str	r0, [r5, r2]
 800a2b6:	e7d1      	b.n	800a25c <PxMessagingTask+0x10d4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a2b8:	4b56      	ldr	r3, [pc, #344]	; (800a414 <PxMessagingTask+0x128c>)
 800a2ba:	2212      	movs	r2, #18
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e7d4      	b.n	800a26a <PxMessagingTask+0x10e2>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a2c0:	0712      	lsls	r2, r2, #28
 800a2c2:	d008      	beq.n	800a2d6 <PxMessagingTask+0x114e>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a2c4:	2138      	movs	r1, #56	; 0x38
 800a2c6:	4361      	muls	r1, r4
 800a2c8:	4a53      	ldr	r2, [pc, #332]	; (800a418 <PxMessagingTask+0x1290>)
 800a2ca:	1852      	adds	r2, r2, r1
 800a2cc:	4442      	add	r2, r8
 800a2ce:	7892      	ldrb	r2, [r2, #2]
 800a2d0:	b252      	sxtb	r2, r2
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	e7c9      	b.n	800a26a <PxMessagingTask+0x10e2>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f007 fcac 	bl	8011c34 <malloc>
 800a2dc:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a2de:	d100      	bne.n	800a2e2 <PxMessagingTask+0x115a>
 800a2e0:	e25e      	b.n	800a7a0 <PxMessagingTask+0x1618>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a2e2:	00ad      	lsls	r5, r5, #2
 800a2e4:	0400      	lsls	r0, r0, #16
 800a2e6:	3002      	adds	r0, #2
 800a2e8:	4a4e      	ldr	r2, [pc, #312]	; (800a424 <PxMessagingTask+0x129c>)
 800a2ea:	50a8      	str	r0, [r5, r2]
 800a2ec:	e7ea      	b.n	800a2c4 <PxMessagingTask+0x113c>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a2ee:	0712      	lsls	r2, r2, #28
 800a2f0:	d00b      	beq.n	800a30a <PxMessagingTask+0x1182>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a2f2:	2138      	movs	r1, #56	; 0x38
 800a2f4:	4361      	muls	r1, r4
 800a2f6:	4a48      	ldr	r2, [pc, #288]	; (800a418 <PxMessagingTask+0x1290>)
 800a2f8:	1852      	adds	r2, r2, r1
 800a2fa:	4442      	add	r2, r8
 800a2fc:	78d1      	ldrb	r1, [r2, #3]
 800a2fe:	0209      	lsls	r1, r1, #8
 800a300:	7892      	ldrb	r2, [r2, #2]
 800a302:	1852      	adds	r2, r2, r1
 800a304:	b292      	uxth	r2, r2
 800a306:	801a      	strh	r2, [r3, #0]
 800a308:	e7af      	b.n	800a26a <PxMessagingTask+0x10e2>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a30a:	2002      	movs	r0, #2
 800a30c:	f007 fc92 	bl	8011c34 <malloc>
 800a310:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a312:	d100      	bne.n	800a316 <PxMessagingTask+0x118e>
 800a314:	e244      	b.n	800a7a0 <PxMessagingTask+0x1618>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a316:	00ad      	lsls	r5, r5, #2
 800a318:	0400      	lsls	r0, r0, #16
 800a31a:	3003      	adds	r0, #3
 800a31c:	4a41      	ldr	r2, [pc, #260]	; (800a424 <PxMessagingTask+0x129c>)
 800a31e:	50a8      	str	r0, [r5, r2]
 800a320:	e7e7      	b.n	800a2f2 <PxMessagingTask+0x116a>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a322:	0712      	lsls	r2, r2, #28
 800a324:	d00b      	beq.n	800a33e <PxMessagingTask+0x11b6>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800a326:	2138      	movs	r1, #56	; 0x38
 800a328:	4361      	muls	r1, r4
 800a32a:	4a3b      	ldr	r2, [pc, #236]	; (800a418 <PxMessagingTask+0x1290>)
 800a32c:	1852      	adds	r2, r2, r1
 800a32e:	4442      	add	r2, r8
 800a330:	78d1      	ldrb	r1, [r2, #3]
 800a332:	0209      	lsls	r1, r1, #8
 800a334:	7892      	ldrb	r2, [r2, #2]
 800a336:	1852      	adds	r2, r2, r1
 800a338:	b212      	sxth	r2, r2
 800a33a:	801a      	strh	r2, [r3, #0]
 800a33c:	e795      	b.n	800a26a <PxMessagingTask+0x10e2>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800a33e:	2002      	movs	r0, #2
 800a340:	f007 fc78 	bl	8011c34 <malloc>
 800a344:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a346:	d100      	bne.n	800a34a <PxMessagingTask+0x11c2>
 800a348:	e22a      	b.n	800a7a0 <PxMessagingTask+0x1618>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a34a:	00ad      	lsls	r5, r5, #2
 800a34c:	0400      	lsls	r0, r0, #16
 800a34e:	3004      	adds	r0, #4
 800a350:	4a34      	ldr	r2, [pc, #208]	; (800a424 <PxMessagingTask+0x129c>)
 800a352:	50a8      	str	r0, [r5, r2]
 800a354:	e7e7      	b.n	800a326 <PxMessagingTask+0x119e>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a356:	0712      	lsls	r2, r2, #28
 800a358:	d010      	beq.n	800a37c <PxMessagingTask+0x11f4>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800a35a:	2238      	movs	r2, #56	; 0x38
 800a35c:	4362      	muls	r2, r4
 800a35e:	492e      	ldr	r1, [pc, #184]	; (800a418 <PxMessagingTask+0x1290>)
 800a360:	1889      	adds	r1, r1, r2
 800a362:	4441      	add	r1, r8
 800a364:	78ca      	ldrb	r2, [r1, #3]
 800a366:	0212      	lsls	r2, r2, #8
 800a368:	7908      	ldrb	r0, [r1, #4]
 800a36a:	0400      	lsls	r0, r0, #16
 800a36c:	1812      	adds	r2, r2, r0
 800a36e:	7888      	ldrb	r0, [r1, #2]
 800a370:	1812      	adds	r2, r2, r0
 800a372:	7949      	ldrb	r1, [r1, #5]
 800a374:	0609      	lsls	r1, r1, #24
 800a376:	1852      	adds	r2, r2, r1
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	e776      	b.n	800a26a <PxMessagingTask+0x10e2>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800a37c:	2004      	movs	r0, #4
 800a37e:	f007 fc59 	bl	8011c34 <malloc>
 800a382:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a384:	d100      	bne.n	800a388 <PxMessagingTask+0x1200>
 800a386:	e20b      	b.n	800a7a0 <PxMessagingTask+0x1618>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a388:	00ad      	lsls	r5, r5, #2
 800a38a:	0400      	lsls	r0, r0, #16
 800a38c:	3005      	adds	r0, #5
 800a38e:	4a25      	ldr	r2, [pc, #148]	; (800a424 <PxMessagingTask+0x129c>)
 800a390:	50a8      	str	r0, [r5, r2]
 800a392:	e7e2      	b.n	800a35a <PxMessagingTask+0x11d2>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a394:	0712      	lsls	r2, r2, #28
 800a396:	d010      	beq.n	800a3ba <PxMessagingTask+0x1232>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800a398:	2238      	movs	r2, #56	; 0x38
 800a39a:	4362      	muls	r2, r4
 800a39c:	491e      	ldr	r1, [pc, #120]	; (800a418 <PxMessagingTask+0x1290>)
 800a39e:	1889      	adds	r1, r1, r2
 800a3a0:	4441      	add	r1, r8
 800a3a2:	78ca      	ldrb	r2, [r1, #3]
 800a3a4:	0212      	lsls	r2, r2, #8
 800a3a6:	7888      	ldrb	r0, [r1, #2]
 800a3a8:	1812      	adds	r2, r2, r0
 800a3aa:	7908      	ldrb	r0, [r1, #4]
 800a3ac:	0400      	lsls	r0, r0, #16
 800a3ae:	1812      	adds	r2, r2, r0
 800a3b0:	7949      	ldrb	r1, [r1, #5]
 800a3b2:	0609      	lsls	r1, r1, #24
 800a3b4:	1852      	adds	r2, r2, r1
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e757      	b.n	800a26a <PxMessagingTask+0x10e2>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800a3ba:	2004      	movs	r0, #4
 800a3bc:	f007 fc3a 	bl	8011c34 <malloc>
 800a3c0:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a3c2:	d100      	bne.n	800a3c6 <PxMessagingTask+0x123e>
 800a3c4:	e1ec      	b.n	800a7a0 <PxMessagingTask+0x1618>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a3c6:	00ad      	lsls	r5, r5, #2
 800a3c8:	0400      	lsls	r0, r0, #16
 800a3ca:	3006      	adds	r0, #6
 800a3cc:	4a15      	ldr	r2, [pc, #84]	; (800a424 <PxMessagingTask+0x129c>)
 800a3ce:	50a8      	str	r0, [r5, r2]
 800a3d0:	e7e2      	b.n	800a398 <PxMessagingTask+0x1210>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a3d2:	0712      	lsls	r2, r2, #28
 800a3d4:	d02c      	beq.n	800a430 <PxMessagingTask+0x12a8>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800a3d6:	2238      	movs	r2, #56	; 0x38
 800a3d8:	4362      	muls	r2, r4
 800a3da:	490f      	ldr	r1, [pc, #60]	; (800a418 <PxMessagingTask+0x1290>)
 800a3dc:	1889      	adds	r1, r1, r2
 800a3de:	4441      	add	r1, r8
 800a3e0:	78ca      	ldrb	r2, [r1, #3]
 800a3e2:	0212      	lsls	r2, r2, #8
 800a3e4:	7908      	ldrb	r0, [r1, #4]
 800a3e6:	0400      	lsls	r0, r0, #16
 800a3e8:	1812      	adds	r2, r2, r0
 800a3ea:	7888      	ldrb	r0, [r1, #2]
 800a3ec:	1812      	adds	r2, r2, r0
 800a3ee:	7949      	ldrb	r1, [r1, #5]
 800a3f0:	0609      	lsls	r1, r1, #24
 800a3f2:	1852      	adds	r2, r2, r1
 800a3f4:	4906      	ldr	r1, [pc, #24]	; (800a410 <PxMessagingTask+0x1288>)
 800a3f6:	600a      	str	r2, [r1, #0]
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e734      	b.n	800a26a <PxMessagingTask+0x10e2>
 800a400:	20000f28 	.word	0x20000f28
 800a404:	20000001 	.word	0x20000001
 800a408:	20000002 	.word	0x20000002
 800a40c:	20000003 	.word	0x20000003
 800a410:	200010f0 	.word	0x200010f0
 800a414:	200010f8 	.word	0x200010f8
 800a418:	20000cf8 	.word	0x20000cf8
 800a41c:	20000070 	.word	0x20000070
 800a420:	0801aac0 	.word	0x0801aac0
 800a424:	200068c8 	.word	0x200068c8
 800a428:	0801aae4 	.word	0x0801aae4
 800a42c:	0000fff0 	.word	0x0000fff0
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800a430:	2004      	movs	r0, #4
 800a432:	f007 fbff 	bl	8011c34 <malloc>
 800a436:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a438:	d100      	bne.n	800a43c <PxMessagingTask+0x12b4>
 800a43a:	e1b1      	b.n	800a7a0 <PxMessagingTask+0x1618>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a43c:	00ad      	lsls	r5, r5, #2
 800a43e:	0400      	lsls	r0, r0, #16
 800a440:	3007      	adds	r0, #7
 800a442:	4ae3      	ldr	r2, [pc, #908]	; (800a7d0 <PxMessagingTask+0x1648>)
 800a444:	50a8      	str	r0, [r5, r2]
 800a446:	e7c6      	b.n	800a3d6 <PxMessagingTask+0x124e>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800a448:	4be2      	ldr	r3, [pc, #904]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a44a:	2213      	movs	r2, #19
 800a44c:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a44e:	4be2      	ldr	r3, [pc, #904]	; (800a7d8 <PxMessagingTask+0x1650>)
 800a450:	799b      	ldrb	r3, [r3, #6]
 800a452:	2240      	movs	r2, #64	; 0x40
 800a454:	4393      	bics	r3, r2
 800a456:	2200      	movs	r2, #0
 800a458:	4692      	mov	sl, r2
 800a45a:	2b20      	cmp	r3, #32
 800a45c:	d001      	beq.n	800a462 <PxMessagingTask+0x12da>
 800a45e:	f7fe fecc 	bl	80091fa <PxMessagingTask+0x72>
								messageParams[0] = responseStatus;
 800a462:	4bdc      	ldr	r3, [pc, #880]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	4bdd      	ldr	r3, [pc, #884]	; (800a7dc <PxMessagingTask+0x1654>)
 800a468:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a46a:	2201      	movs	r2, #1
 800a46c:	2121      	movs	r1, #33	; 0x21
 800a46e:	9807      	ldr	r0, [sp, #28]
 800a470:	f7fe fba8 	bl	8008bc4 <SendMessageToModule>
 800a474:	f7fe fec1 	bl	80091fa <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a478:	2238      	movs	r2, #56	; 0x38
 800a47a:	4362      	muls	r2, r4
 800a47c:	4bd8      	ldr	r3, [pc, #864]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a47e:	189b      	adds	r3, r3, r2
 800a480:	195d      	adds	r5, r3, r5
 800a482:	78ab      	ldrb	r3, [r5, #2]
 800a484:	061b      	lsls	r3, r3, #24
 800a486:	78ea      	ldrb	r2, [r5, #3]
 800a488:	0412      	lsls	r2, r2, #16
 800a48a:	189b      	adds	r3, r3, r2
 800a48c:	796a      	ldrb	r2, [r5, #5]
 800a48e:	189b      	adds	r3, r3, r2
 800a490:	792d      	ldrb	r5, [r5, #4]
 800a492:	022d      	lsls	r5, r5, #8
 800a494:	195d      	adds	r5, r3, r5
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800a496:	23e0      	movs	r3, #224	; 0xe0
 800a498:	061b      	lsls	r3, r3, #24
 800a49a:	18ea      	adds	r2, r5, r3
 800a49c:	2380      	movs	r3, #128	; 0x80
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d26e      	bcs.n	800a582 <PxMessagingTask+0x13fa>
									switch (cMessage[port-1][1+shift])															// Requested format
 800a4a4:	2238      	movs	r2, #56	; 0x38
 800a4a6:	4362      	muls	r2, r4
 800a4a8:	4bcd      	ldr	r3, [pc, #820]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	4443      	add	r3, r8
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	2a07      	cmp	r2, #7
 800a4b6:	d8ca      	bhi.n	800a44e <PxMessagingTask+0x12c6>
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4ac9      	ldr	r2, [pc, #804]	; (800a7e4 <PxMessagingTask+0x165c>)
 800a4be:	58d3      	ldr	r3, [r2, r3]
 800a4c0:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800a4c2:	2238      	movs	r2, #56	; 0x38
 800a4c4:	4362      	muls	r2, r4
 800a4c6:	4bc6      	ldr	r3, [pc, #792]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a4c8:	189b      	adds	r3, r3, r2
 800a4ca:	4443      	add	r3, r8
 800a4cc:	799b      	ldrb	r3, [r3, #6]
 800a4ce:	702b      	strb	r3, [r5, #0]
 800a4d0:	e7bd      	b.n	800a44e <PxMessagingTask+0x12c6>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800a4d2:	2238      	movs	r2, #56	; 0x38
 800a4d4:	4362      	muls	r2, r4
 800a4d6:	4bc2      	ldr	r3, [pc, #776]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a4d8:	189b      	adds	r3, r3, r2
 800a4da:	4443      	add	r3, r8
 800a4dc:	799b      	ldrb	r3, [r3, #6]
 800a4de:	b25b      	sxtb	r3, r3
 800a4e0:	702b      	strb	r3, [r5, #0]
 800a4e2:	e7b4      	b.n	800a44e <PxMessagingTask+0x12c6>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800a4e4:	2238      	movs	r2, #56	; 0x38
 800a4e6:	4362      	muls	r2, r4
 800a4e8:	4bbd      	ldr	r3, [pc, #756]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	4443      	add	r3, r8
 800a4ee:	79da      	ldrb	r2, [r3, #7]
 800a4f0:	0212      	lsls	r2, r2, #8
 800a4f2:	799b      	ldrb	r3, [r3, #6]
 800a4f4:	189b      	adds	r3, r3, r2
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	802b      	strh	r3, [r5, #0]
 800a4fa:	e7a8      	b.n	800a44e <PxMessagingTask+0x12c6>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800a4fc:	2238      	movs	r2, #56	; 0x38
 800a4fe:	4362      	muls	r2, r4
 800a500:	4bb7      	ldr	r3, [pc, #732]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a502:	189b      	adds	r3, r3, r2
 800a504:	4443      	add	r3, r8
 800a506:	79da      	ldrb	r2, [r3, #7]
 800a508:	0212      	lsls	r2, r2, #8
 800a50a:	799b      	ldrb	r3, [r3, #6]
 800a50c:	189b      	adds	r3, r3, r2
 800a50e:	b21b      	sxth	r3, r3
 800a510:	802b      	strh	r3, [r5, #0]
 800a512:	e79c      	b.n	800a44e <PxMessagingTask+0x12c6>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800a514:	2338      	movs	r3, #56	; 0x38
 800a516:	4363      	muls	r3, r4
 800a518:	4ab1      	ldr	r2, [pc, #708]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a51a:	18d2      	adds	r2, r2, r3
 800a51c:	4442      	add	r2, r8
 800a51e:	79d3      	ldrb	r3, [r2, #7]
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	7a11      	ldrb	r1, [r2, #8]
 800a524:	0409      	lsls	r1, r1, #16
 800a526:	185b      	adds	r3, r3, r1
 800a528:	7991      	ldrb	r1, [r2, #6]
 800a52a:	185b      	adds	r3, r3, r1
 800a52c:	7a52      	ldrb	r2, [r2, #9]
 800a52e:	0612      	lsls	r2, r2, #24
 800a530:	189b      	adds	r3, r3, r2
 800a532:	602b      	str	r3, [r5, #0]
 800a534:	e78b      	b.n	800a44e <PxMessagingTask+0x12c6>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800a536:	2338      	movs	r3, #56	; 0x38
 800a538:	4363      	muls	r3, r4
 800a53a:	4aa9      	ldr	r2, [pc, #676]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a53c:	18d2      	adds	r2, r2, r3
 800a53e:	4442      	add	r2, r8
 800a540:	79d3      	ldrb	r3, [r2, #7]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	7991      	ldrb	r1, [r2, #6]
 800a546:	185b      	adds	r3, r3, r1
 800a548:	7a11      	ldrb	r1, [r2, #8]
 800a54a:	0409      	lsls	r1, r1, #16
 800a54c:	185b      	adds	r3, r3, r1
 800a54e:	7a52      	ldrb	r2, [r2, #9]
 800a550:	0612      	lsls	r2, r2, #24
 800a552:	189b      	adds	r3, r3, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	e77a      	b.n	800a44e <PxMessagingTask+0x12c6>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a558:	2338      	movs	r3, #56	; 0x38
 800a55a:	4363      	muls	r3, r4
 800a55c:	4aa0      	ldr	r2, [pc, #640]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a55e:	18d2      	adds	r2, r2, r3
 800a560:	4442      	add	r2, r8
 800a562:	79d3      	ldrb	r3, [r2, #7]
 800a564:	021b      	lsls	r3, r3, #8
 800a566:	7a11      	ldrb	r1, [r2, #8]
 800a568:	0409      	lsls	r1, r1, #16
 800a56a:	185b      	adds	r3, r3, r1
 800a56c:	7991      	ldrb	r1, [r2, #6]
 800a56e:	185b      	adds	r3, r3, r1
 800a570:	7a52      	ldrb	r2, [r2, #9]
 800a572:	0612      	lsls	r2, r2, #24
 800a574:	189b      	adds	r3, r3, r2
 800a576:	4a9c      	ldr	r2, [pc, #624]	; (800a7e8 <PxMessagingTask+0x1660>)
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	2100      	movs	r1, #0
 800a57c:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	e765      	b.n	800a44e <PxMessagingTask+0x12c6>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800a582:	2280      	movs	r2, #128	; 0x80
 800a584:	0292      	lsls	r2, r2, #10
 800a586:	23f8      	movs	r3, #248	; 0xf8
 800a588:	061b      	lsls	r3, r3, #24
 800a58a:	18eb      	adds	r3, r5, r3
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d303      	bcc.n	800a598 <PxMessagingTask+0x1410>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a590:	4b90      	ldr	r3, [pc, #576]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a592:	2215      	movs	r2, #21
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	e75a      	b.n	800a44e <PxMessagingTask+0x12c6>
									HAL_FLASH_Unlock();
 800a598:	f005 faac 	bl	800faf4 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800a59c:	464b      	mov	r3, r9
 800a59e:	2b22      	cmp	r3, #34	; 0x22
 800a5a0:	d012      	beq.n	800a5c8 <PxMessagingTask+0x1440>
									if (responseStatus == BOS_OK)
 800a5a2:	4b8c      	ldr	r3, [pc, #560]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d129      	bne.n	800a5fe <PxMessagingTask+0x1476>
										switch (cMessage[port-1][1+shift])															// Requested format
 800a5aa:	2238      	movs	r2, #56	; 0x38
 800a5ac:	4362      	muls	r2, r4
 800a5ae:	4b8c      	ldr	r3, [pc, #560]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a5b0:	189b      	adds	r3, r3, r2
 800a5b2:	4443      	add	r3, r8
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	2a07      	cmp	r2, #7
 800a5bc:	d81f      	bhi.n	800a5fe <PxMessagingTask+0x1476>
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4a8a      	ldr	r2, [pc, #552]	; (800a7ec <PxMessagingTask+0x1664>)
 800a5c4:	58d3      	ldr	r3, [r2, r3]
 800a5c6:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800a5cc:	9514      	str	r5, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800a5d2:	a912      	add	r1, sp, #72	; 0x48
 800a5d4:	a813      	add	r0, sp, #76	; 0x4c
 800a5d6:	f005 fb63 	bl	800fca0 <HAL_FLASHEx_Erase>
 800a5da:	900d      	str	r0, [sp, #52]	; 0x34
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d102      	bne.n	800a5e6 <PxMessagingTask+0x145e>
 800a5e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	d0dd      	beq.n	800a5a2 <PxMessagingTask+0x141a>
 800a5e6:	4b7b      	ldr	r3, [pc, #492]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a5e8:	2216      	movs	r2, #22
 800a5ea:	701a      	strb	r2, [r3, #0]
 800a5ec:	e7d9      	b.n	800a5a2 <PxMessagingTask+0x141a>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a5ee:	882b      	ldrh	r3, [r5, #0]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4a7f      	ldr	r2, [pc, #508]	; (800a7f0 <PxMessagingTask+0x1668>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d00c      	beq.n	800a612 <PxMessagingTask+0x148a>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a5f8:	4b76      	ldr	r3, [pc, #472]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a5fa:	2216      	movs	r2, #22
 800a5fc:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a5fe:	f005 fa8d 	bl	800fb1c <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800a602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a604:	2b00      	cmp	r3, #0
 800a606:	d100      	bne.n	800a60a <PxMessagingTask+0x1482>
 800a608:	e721      	b.n	800a44e <PxMessagingTask+0x12c6>
 800a60a:	4b72      	ldr	r3, [pc, #456]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a60c:	2216      	movs	r2, #22
 800a60e:	701a      	strb	r2, [r3, #0]
 800a610:	e71d      	b.n	800a44e <PxMessagingTask+0x12c6>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a612:	2238      	movs	r2, #56	; 0x38
 800a614:	4362      	muls	r2, r4
 800a616:	4b72      	ldr	r3, [pc, #456]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a618:	189b      	adds	r3, r3, r2
 800a61a:	4443      	add	r3, r8
 800a61c:	799a      	ldrb	r2, [r3, #6]
 800a61e:	2300      	movs	r3, #0
 800a620:	4971      	ldr	r1, [pc, #452]	; (800a7e8 <PxMessagingTask+0x1660>)
 800a622:	600a      	str	r2, [r1, #0]
 800a624:	604b      	str	r3, [r1, #4]
 800a626:	0029      	movs	r1, r5
 800a628:	2001      	movs	r0, #1
 800a62a:	f005 faaf 	bl	800fb8c <HAL_FLASH_Program>
 800a62e:	900d      	str	r0, [sp, #52]	; 0x34
 800a630:	e7e5      	b.n	800a5fe <PxMessagingTask+0x1476>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a632:	882b      	ldrh	r3, [r5, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	4a6e      	ldr	r2, [pc, #440]	; (800a7f0 <PxMessagingTask+0x1668>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d003      	beq.n	800a644 <PxMessagingTask+0x14bc>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a63c:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a63e:	2216      	movs	r2, #22
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	e7dc      	b.n	800a5fe <PxMessagingTask+0x1476>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800a644:	2238      	movs	r2, #56	; 0x38
 800a646:	4362      	muls	r2, r4
 800a648:	4b65      	ldr	r3, [pc, #404]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a64a:	189b      	adds	r3, r3, r2
 800a64c:	4443      	add	r3, r8
 800a64e:	79da      	ldrb	r2, [r3, #7]
 800a650:	0212      	lsls	r2, r2, #8
 800a652:	799b      	ldrb	r3, [r3, #6]
 800a654:	18d2      	adds	r2, r2, r3
 800a656:	2300      	movs	r3, #0
 800a658:	4963      	ldr	r1, [pc, #396]	; (800a7e8 <PxMessagingTask+0x1660>)
 800a65a:	600a      	str	r2, [r1, #0]
 800a65c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a65e:	0029      	movs	r1, r5
 800a660:	2001      	movs	r0, #1
 800a662:	f005 fa93 	bl	800fb8c <HAL_FLASH_Program>
 800a666:	900d      	str	r0, [sp, #52]	; 0x34
 800a668:	e7c9      	b.n	800a5fe <PxMessagingTask+0x1476>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	3301      	adds	r3, #1
 800a66e:	d003      	beq.n	800a678 <PxMessagingTask+0x14f0>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a670:	4b58      	ldr	r3, [pc, #352]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a672:	2216      	movs	r2, #22
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	e7c2      	b.n	800a5fe <PxMessagingTask+0x1476>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800a678:	2238      	movs	r2, #56	; 0x38
 800a67a:	4362      	muls	r2, r4
 800a67c:	4b58      	ldr	r3, [pc, #352]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	4443      	add	r3, r8
 800a682:	79da      	ldrb	r2, [r3, #7]
 800a684:	0212      	lsls	r2, r2, #8
 800a686:	7a19      	ldrb	r1, [r3, #8]
 800a688:	0409      	lsls	r1, r1, #16
 800a68a:	1852      	adds	r2, r2, r1
 800a68c:	7999      	ldrb	r1, [r3, #6]
 800a68e:	1852      	adds	r2, r2, r1
 800a690:	7a5b      	ldrb	r3, [r3, #9]
 800a692:	061b      	lsls	r3, r3, #24
 800a694:	18d2      	adds	r2, r2, r3
 800a696:	2300      	movs	r3, #0
 800a698:	4953      	ldr	r1, [pc, #332]	; (800a7e8 <PxMessagingTask+0x1660>)
 800a69a:	600a      	str	r2, [r1, #0]
 800a69c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800a69e:	0029      	movs	r1, r5
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	f005 fa73 	bl	800fb8c <HAL_FLASH_Program>
 800a6a6:	900d      	str	r0, [sp, #52]	; 0x34
 800a6a8:	e7a9      	b.n	800a5fe <PxMessagingTask+0x1476>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	d003      	beq.n	800a6b8 <PxMessagingTask+0x1530>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a6b0:	4b48      	ldr	r3, [pc, #288]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a6b2:	2216      	movs	r2, #22
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	e7a2      	b.n	800a5fe <PxMessagingTask+0x1476>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a6b8:	2238      	movs	r2, #56	; 0x38
 800a6ba:	4362      	muls	r2, r4
 800a6bc:	4b48      	ldr	r3, [pc, #288]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a6be:	189b      	adds	r3, r3, r2
 800a6c0:	4443      	add	r3, r8
 800a6c2:	79da      	ldrb	r2, [r3, #7]
 800a6c4:	0212      	lsls	r2, r2, #8
 800a6c6:	7a19      	ldrb	r1, [r3, #8]
 800a6c8:	0409      	lsls	r1, r1, #16
 800a6ca:	1852      	adds	r2, r2, r1
 800a6cc:	7999      	ldrb	r1, [r3, #6]
 800a6ce:	1852      	adds	r2, r2, r1
 800a6d0:	7a5b      	ldrb	r3, [r3, #9]
 800a6d2:	061b      	lsls	r3, r3, #24
 800a6d4:	18d2      	adds	r2, r2, r3
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4943      	ldr	r1, [pc, #268]	; (800a7e8 <PxMessagingTask+0x1660>)
 800a6da:	600a      	str	r2, [r1, #0]
 800a6dc:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800a6de:	0029      	movs	r1, r5
 800a6e0:	2003      	movs	r0, #3
 800a6e2:	f005 fa53 	bl	800fb8c <HAL_FLASH_Program>
 800a6e6:	900d      	str	r0, [sp, #52]	; 0x34
 800a6e8:	e789      	b.n	800a5fe <PxMessagingTask+0x1476>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800a6ea:	4b3d      	ldr	r3, [pc, #244]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a6ec:	199b      	adds	r3, r3, r6
 800a6ee:	5d5a      	ldrb	r2, [r3, r5]
 800a6f0:	4b38      	ldr	r3, [pc, #224]	; (800a7d4 <PxMessagingTask+0x164c>)
 800a6f2:	701a      	strb	r2, [r3, #0]
							break;	
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	469a      	mov	sl, r3
 800a6f8:	f7fe fd7f 	bl	80091fa <PxMessagingTask+0x72>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	3a01      	subs	r2, #1
 800a700:	b292      	uxth	r2, r2
 800a702:	1c69      	adds	r1, r5, #1
 800a704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a706:	469c      	mov	ip, r3
 800a708:	4461      	add	r1, ip
 800a70a:	4b35      	ldr	r3, [pc, #212]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a70c:	18c9      	adds	r1, r1, r3
 800a70e:	199b      	adds	r3, r3, r6
 800a710:	5d58      	ldrb	r0, [r3, r5]
 800a712:	230a      	movs	r3, #10
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	f002 f991 	bl	800ca3c <writePxMutex>
							break;
 800a71a:	2300      	movs	r3, #0
 800a71c:	469a      	mov	sl, r3
 800a71e:	f7fe fd6c 	bl	80091fa <PxMessagingTask+0x72>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800a722:	9500      	str	r5, [sp, #0]
 800a724:	4643      	mov	r3, r8
 800a726:	9a07      	ldr	r2, [sp, #28]
 800a728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a72a:	4648      	mov	r0, r9
 800a72c:	f7fe fd2a 	bl	8009184 <User_MessagingParser>
 800a730:	4682      	mov	sl, r0
							if (result == BOS_ERR_UnknownMessage) {
 800a732:	2801      	cmp	r0, #1
 800a734:	d001      	beq.n	800a73a <PxMessagingTask+0x15b2>
 800a736:	f7fe fd60 	bl	80091fa <PxMessagingTask+0x72>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800a73a:	9500      	str	r5, [sp, #0]
 800a73c:	4643      	mov	r3, r8
 800a73e:	9a07      	ldr	r2, [sp, #28]
 800a740:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a742:	4648      	mov	r0, r9
 800a744:	f000 fa66 	bl	800ac14 <Module_MessagingTask>
 800a748:	4682      	mov	sl, r0
 800a74a:	f7fe fd51 	bl	80091f0 <PxMessagingTask+0x68>
										messageParams[0] = modParam[temp-1].paramFormat;
 800a74e:	2300      	movs	r3, #0
 800a750:	469a      	mov	sl, r3
 800a752:	f7fe fd4d 	bl	80091f0 <PxMessagingTask+0x68>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a756:	2300      	movs	r3, #0
 800a758:	469a      	mov	sl, r3
 800a75a:	f7fe fd49 	bl	80091f0 <PxMessagingTask+0x68>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	9807      	ldr	r0, [sp, #28]
 800a764:	f7fe fa2e 	bl	8008bc4 <SendMessageToModule>
			result = BOS_OK;			
 800a768:	2300      	movs	r3, #0
 800a76a:	469a      	mov	sl, r3
 800a76c:	f7fe fd45 	bl	80091fa <PxMessagingTask+0x72>
 800a770:	2300      	movs	r3, #0
 800a772:	469a      	mov	sl, r3
 800a774:	f7fe fd41 	bl	80091fa <PxMessagingTask+0x72>
									}
 800a778:	2300      	movs	r3, #0
 800a77a:	469a      	mov	sl, r3
 800a77c:	f7fe fd3d 	bl	80091fa <PxMessagingTask+0x72>
 800a780:	2300      	movs	r3, #0
 800a782:	469a      	mov	sl, r3
 800a784:	f7fe fd39 	bl	80091fa <PxMessagingTask+0x72>
 800a788:	4661      	mov	r1, ip
				shift += 4;
 800a78a:	9d06      	ldr	r5, [sp, #24]
 800a78c:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800a78e:	1b48      	subs	r0, r1, r5
 800a790:	b2c3      	uxtb	r3, r0
 800a792:	469a      	mov	sl, r3
 800a794:	f7fe fdf0 	bl	8009378 <PxMessagingTask+0x1f0>
					result = BOS_ERR_WrongID;
 800a798:	2366      	movs	r3, #102	; 0x66
 800a79a:	469a      	mov	sl, r3
 800a79c:	f7fe fd2d 	bl	80091fa <PxMessagingTask+0x72>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a7a0:	2338      	movs	r3, #56	; 0x38
 800a7a2:	4363      	muls	r3, r4
 800a7a4:	4a0e      	ldr	r2, [pc, #56]	; (800a7e0 <PxMessagingTask+0x1658>)
 800a7a6:	18d2      	adds	r2, r2, r3
 800a7a8:	4643      	mov	r3, r8
 800a7aa:	5cd3      	ldrb	r3, [r2, r3]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	0098      	lsls	r0, r3, #2
 800a7b0:	4907      	ldr	r1, [pc, #28]	; (800a7d0 <PxMessagingTask+0x1648>)
 800a7b2:	5841      	ldr	r1, [r0, r1]
 800a7b4:	4648      	mov	r0, r9
 800a7b6:	5c12      	ldrb	r2, [r2, r0]
 800a7b8:	e568      	b.n	800a28c <PxMessagingTask+0x1104>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800a7ba:	4543      	cmp	r3, r8
 800a7bc:	d101      	bne.n	800a7c2 <PxMessagingTask+0x163a>
 800a7be:	f7fe fdd0 	bl	8009362 <PxMessagingTask+0x1da>
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d001      	beq.n	800a7cc <PxMessagingTask+0x1644>
 800a7c8:	f7fe fd61 	bl	800928e <PxMessagingTask+0x106>
 800a7cc:	f7fe fdc9 	bl	8009362 <PxMessagingTask+0x1da>
 800a7d0:	200068c8 	.word	0x200068c8
 800a7d4:	200010f8 	.word	0x200010f8
 800a7d8:	20006940 	.word	0x20006940
 800a7dc:	20000f28 	.word	0x20000f28
 800a7e0:	20000cf8 	.word	0x20000cf8
 800a7e4:	0801ab04 	.word	0x0801ab04
 800a7e8:	200010f0 	.word	0x200010f0
 800a7ec:	0801ab24 	.word	0x0801ab24
 800a7f0:	0000ffff 	.word	0x0000ffff

0800a7f4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f6:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a7f8:	2401      	movs	r4, #1
 800a7fa:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a7fc:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a7fe:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a800:	2310      	movs	r3, #16
 800a802:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a804:	2702      	movs	r7, #2
 800a806:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a808:	2680      	movs	r6, #128	; 0x80
 800a80a:	0276      	lsls	r6, r6, #9
 800a80c:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a80e:	2380      	movs	r3, #128	; 0x80
 800a810:	035b      	lsls	r3, r3, #13
 800a812:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a814:	2500      	movs	r5, #0
 800a816:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a818:	a80d      	add	r0, sp, #52	; 0x34
 800a81a:	f005 fba9 	bl	800ff70 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800a81e:	2307      	movs	r3, #7
 800a820:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a822:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a824:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a826:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a828:	2101      	movs	r1, #1
 800a82a:	a809      	add	r0, sp, #36	; 0x24
 800a82c:	f005 fe64 	bl	80104f8 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800a830:	4b1a      	ldr	r3, [pc, #104]	; (800a89c <SystemClock_Config+0xa8>)
 800a832:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a834:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a836:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a838:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a83a:	a802      	add	r0, sp, #8
 800a83c:	f006 f80c 	bl	8010858 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800a840:	4d17      	ldr	r5, [pc, #92]	; (800a8a0 <SystemClock_Config+0xac>)
 800a842:	69ea      	ldr	r2, [r5, #28]
 800a844:	2180      	movs	r1, #128	; 0x80
 800a846:	0549      	lsls	r1, r1, #21
 800a848:	430a      	orrs	r2, r1
 800a84a:	61ea      	str	r2, [r5, #28]
 800a84c:	69eb      	ldr	r3, [r5, #28]
 800a84e:	400b      	ands	r3, r1
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800a854:	f005 fb82 	bl	800ff5c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a858:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a85a:	23c0      	movs	r3, #192	; 0xc0
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a860:	a802      	add	r0, sp, #8
 800a862:	f005 fff9 	bl	8010858 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a866:	f005 ffd3 	bl	8010810 <HAL_RCC_GetHCLKFreq>
 800a86a:	21fa      	movs	r1, #250	; 0xfa
 800a86c:	0089      	lsls	r1, r1, #2
 800a86e:	f7f5 fc6f 	bl	8000150 <__udivsi3>
 800a872:	f004 fae7 	bl	800ee44 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a876:	2004      	movs	r0, #4
 800a878:	f004 fb00 	bl	800ee7c <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800a87c:	69ab      	ldr	r3, [r5, #24]
 800a87e:	4323      	orrs	r3, r4
 800a880:	61ab      	str	r3, [r5, #24]
 800a882:	69ab      	ldr	r3, [r5, #24]
 800a884:	401c      	ands	r4, r3
 800a886:	9401      	str	r4, [sp, #4]
 800a888:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a88a:	2001      	movs	r0, #1
 800a88c:	2200      	movs	r2, #0
 800a88e:	2100      	movs	r1, #0
 800a890:	4240      	negs	r0, r0
 800a892:	f004 fa91 	bl	800edb8 <HAL_NVIC_SetPriority>
	
}
 800a896:	b01b      	add	sp, #108	; 0x6c
 800a898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89a:	46c0      	nop			; (mov r8, r8)
 800a89c:	00040003 	.word	0x00040003
 800a8a0:	40021000 	.word	0x40021000

0800a8a4 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	46de      	mov	lr, fp
 800a8a8:	4657      	mov	r7, sl
 800a8aa:	464e      	mov	r6, r9
 800a8ac:	4645      	mov	r5, r8
 800a8ae:	b5e0      	push	{r5, r6, r7, lr}
 800a8b0:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9302      	str	r3, [sp, #8]
 800a8b6:	2211      	movs	r2, #17
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	a803      	add	r0, sp, #12
 800a8bc:	f007 fbf9 	bl	80120b2 <memset>
	
	HAL_FLASH_Unlock();
 800a8c0:	f005 f918 	bl	800faf4 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800a8c4:	487c      	ldr	r0, [pc, #496]	; (800aab8 <SaveToRO+0x214>)
 800a8c6:	f005 f9d9 	bl	800fc7c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a8ca:	487c      	ldr	r0, [pc, #496]	; (800aabc <SaveToRO+0x218>)
 800a8cc:	f005 f930 	bl	800fb30 <FLASH_WaitForLastOperation>
 800a8d0:	9000      	str	r0, [sp, #0]
 800a8d2:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d112      	bne.n	800a8fe <SaveToRO+0x5a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a8d8:	4a79      	ldr	r2, [pc, #484]	; (800aac0 <SaveToRO+0x21c>)
 800a8da:	6913      	ldr	r3, [r2, #16]
 800a8dc:	2102      	movs	r1, #2
 800a8de:	438b      	bics	r3, r1
 800a8e0:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800a8e2:	4b78      	ldr	r3, [pc, #480]	; (800aac4 <SaveToRO+0x220>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d115      	bne.n	800a916 <SaveToRO+0x72>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a8ea:	4b77      	ldr	r3, [pc, #476]	; (800aac8 <SaveToRO+0x224>)
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d100      	bne.n	800a8f4 <SaveToRO+0x50>
 800a8f2:	e0dd      	b.n	800aab0 <SaveToRO+0x20c>
 800a8f4:	9d00      	ldr	r5, [sp, #0]
 800a8f6:	4e75      	ldr	r6, [pc, #468]	; (800aacc <SaveToRO+0x228>)
	{
		if (snippets[s].cond.conditionType) 
 800a8f8:	4b75      	ldr	r3, [pc, #468]	; (800aad0 <SaveToRO+0x22c>)
 800a8fa:	469a      	mov	sl, r3
 800a8fc:	e092      	b.n	800aa24 <SaveToRO+0x180>
		return pFlash.ErrorCode;
 800a8fe:	4b75      	ldr	r3, [pc, #468]	; (800aad4 <SaveToRO+0x230>)
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	9301      	str	r3, [sp, #4]
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800a906:	9801      	ldr	r0, [sp, #4]
 800a908:	b009      	add	sp, #36	; 0x24
 800a90a:	bcf0      	pop	{r4, r5, r6, r7}
 800a90c:	46bb      	mov	fp, r7
 800a90e:	46b2      	mov	sl, r6
 800a910:	46a9      	mov	r9, r5
 800a912:	46a0      	mov	r8, r4
 800a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800a916:	4a70      	ldr	r2, [pc, #448]	; (800aad8 <SaveToRO+0x234>)
 800a918:	7812      	ldrb	r2, [r2, #0]
 800a91a:	0212      	lsls	r2, r2, #8
 800a91c:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a91e:	b292      	uxth	r2, r2
 800a920:	2300      	movs	r3, #0
 800a922:	4965      	ldr	r1, [pc, #404]	; (800aab8 <SaveToRO+0x214>)
 800a924:	2001      	movs	r0, #1
 800a926:	f005 f931 	bl	800fb8c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a92a:	4864      	ldr	r0, [pc, #400]	; (800aabc <SaveToRO+0x218>)
 800a92c:	f005 f900 	bl	800fb30 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a930:	2800      	cmp	r0, #0
 800a932:	d111      	bne.n	800a958 <SaveToRO+0xb4>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a934:	4a62      	ldr	r2, [pc, #392]	; (800aac0 <SaveToRO+0x21c>)
 800a936:	6913      	ldr	r3, [r2, #16]
 800a938:	2101      	movs	r1, #1
 800a93a:	438b      	bics	r3, r1
 800a93c:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800a93e:	4b66      	ldr	r3, [pc, #408]	; (800aad8 <SaveToRO+0x234>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2201      	movs	r2, #1
 800a944:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800a946:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0ce      	beq.n	800a8ea <SaveToRO+0x46>
 800a94c:	2316      	movs	r3, #22
 800a94e:	469b      	mov	fp, r3
 800a950:	4b62      	ldr	r3, [pc, #392]	; (800aadc <SaveToRO+0x238>)
 800a952:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800a954:	4698      	mov	r8, r3
 800a956:	e02c      	b.n	800a9b2 <SaveToRO+0x10e>
			return pFlash.ErrorCode;
 800a958:	4b5e      	ldr	r3, [pc, #376]	; (800aad4 <SaveToRO+0x230>)
 800a95a:	69db      	ldr	r3, [r3, #28]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	e7d1      	b.n	800a906 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800a962:	4b5c      	ldr	r3, [pc, #368]	; (800aad4 <SaveToRO+0x230>)
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	e7cc      	b.n	800a906 <SaveToRO+0x62>
 800a96c:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a96e:	42b4      	cmp	r4, r6
 800a970:	d017      	beq.n	800a9a2 <SaveToRO+0xfe>
				if (array[i-1][0]) {
 800a972:	4643      	mov	r3, r8
 800a974:	5afb      	ldrh	r3, [r7, r3]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0f8      	beq.n	800a96c <SaveToRO+0xc8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800a97a:	8822      	ldrh	r2, [r4, #0]
 800a97c:	4b4e      	ldr	r3, [pc, #312]	; (800aab8 <SaveToRO+0x214>)
 800a97e:	18e9      	adds	r1, r5, r3
 800a980:	2300      	movs	r3, #0
 800a982:	2001      	movs	r0, #1
 800a984:	f005 f902 	bl	800fb8c <HAL_FLASH_Program>
					add += 2;
 800a988:	3502      	adds	r5, #2
 800a98a:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a98c:	484b      	ldr	r0, [pc, #300]	; (800aabc <SaveToRO+0x218>)
 800a98e:	f005 f8cf 	bl	800fb30 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a992:	2800      	cmp	r0, #0
 800a994:	d1e5      	bne.n	800a962 <SaveToRO+0xbe>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a996:	4a4a      	ldr	r2, [pc, #296]	; (800aac0 <SaveToRO+0x21c>)
 800a998:	6913      	ldr	r3, [r2, #16]
 800a99a:	2101      	movs	r1, #1
 800a99c:	438b      	bics	r3, r1
 800a99e:	6113      	str	r3, [r2, #16]
 800a9a0:	e7e4      	b.n	800a96c <SaveToRO+0xc8>
		for(uint8_t i=1 ; i<=N ; i++)
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	4699      	mov	r9, r3
 800a9aa:	4b4b      	ldr	r3, [pc, #300]	; (800aad8 <SaveToRO+0x234>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	454b      	cmp	r3, r9
 800a9b0:	d39b      	bcc.n	800a8ea <SaveToRO+0x46>
 800a9b2:	465e      	mov	r6, fp
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	435e      	muls	r6, r3
 800a9b8:	0034      	movs	r4, r6
 800a9ba:	3c16      	subs	r4, #22
 800a9bc:	4454      	add	r4, sl
 800a9be:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800a9c0:	1e5f      	subs	r7, r3, #1
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	435f      	muls	r7, r3
 800a9c6:	e7d4      	b.n	800a972 <SaveToRO+0xce>
					return pFlash.ErrorCode;
 800a9c8:	4b42      	ldr	r3, [pc, #264]	; (800aad4 <SaveToRO+0x230>)
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	e799      	b.n	800a906 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a9d2:	4643      	mov	r3, r8
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	4393      	bics	r3, r2
 800a9da:	4642      	mov	r2, r8
 800a9dc:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a9de:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a9e0:	3401      	adds	r4, #1
 800a9e2:	b2e4      	uxtb	r4, r4
 800a9e4:	68ef      	ldr	r7, [r5, #12]
 800a9e6:	0038      	movs	r0, r7
 800a9e8:	f7f5 fb96 	bl	8000118 <strlen>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	0840      	lsrs	r0, r0, #1
 800a9f0:	4284      	cmp	r4, r0
 800a9f2:	d210      	bcs.n	800aa16 <SaveToRO+0x172>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800a9f4:	0063      	lsls	r3, r4, #1
 800a9f6:	5afa      	ldrh	r2, [r7, r3]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	0031      	movs	r1, r6
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	f005 f8c5 	bl	800fb8c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa02:	4658      	mov	r0, fp
 800aa04:	f005 f894 	bl	800fb30 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0e2      	beq.n	800a9d2 <SaveToRO+0x12e>
					return pFlash.ErrorCode;
 800aa0c:	4b31      	ldr	r3, [pc, #196]	; (800aad4 <SaveToRO+0x230>)
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	e777      	b.n	800a906 <SaveToRO+0x62>
 800aa16:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800aa18:	3501      	adds	r5, #1
 800aa1a:	b2ed      	uxtb	r5, r5
 800aa1c:	4b2a      	ldr	r3, [pc, #168]	; (800aac8 <SaveToRO+0x224>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	42ab      	cmp	r3, r5
 800aa22:	d945      	bls.n	800aab0 <SaveToRO+0x20c>
		if (snippets[s].cond.conditionType) 
 800aa24:	9500      	str	r5, [sp, #0]
 800aa26:	00ab      	lsls	r3, r5, #2
 800aa28:	195b      	adds	r3, r3, r5
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4652      	mov	r2, sl
 800aa2e:	5c9b      	ldrb	r3, [r3, r2]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0f1      	beq.n	800aa18 <SaveToRO+0x174>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800aa34:	23fe      	movs	r3, #254	; 0xfe
 800aa36:	aa02      	add	r2, sp, #8
 800aa38:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800aa3a:	00a9      	lsls	r1, r5, #2
 800aa3c:	1949      	adds	r1, r1, r5
 800aa3e:	0089      	lsls	r1, r1, #2
 800aa40:	4b23      	ldr	r3, [pc, #140]	; (800aad0 <SaveToRO+0x22c>)
 800aa42:	469c      	mov	ip, r3
 800aa44:	4461      	add	r1, ip
 800aa46:	2214      	movs	r2, #20
 800aa48:	ab02      	add	r3, sp, #8
 800aa4a:	1c58      	adds	r0, r3, #1
 800aa4c:	f007 fb28 	bl	80120a0 <memcpy>
 800aa50:	2314      	movs	r3, #20
 800aa52:	469b      	mov	fp, r3
 800aa54:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800aa56:	ab02      	add	r3, sp, #8
 800aa58:	1b9b      	subs	r3, r3, r6
 800aa5a:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa5c:	4b17      	ldr	r3, [pc, #92]	; (800aabc <SaveToRO+0x218>)
 800aa5e:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aa60:	4f17      	ldr	r7, [pc, #92]	; (800aac0 <SaveToRO+0x21c>)
 800aa62:	4644      	mov	r4, r8
 800aa64:	46a8      	mov	r8, r5
 800aa66:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800aa68:	5ba2      	ldrh	r2, [r4, r6]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	0031      	movs	r1, r6
 800aa6e:	2001      	movs	r0, #1
 800aa70:	f005 f88c 	bl	800fb8c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa74:	4648      	mov	r0, r9
 800aa76:	f005 f85b 	bl	800fb30 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1a4      	bne.n	800a9c8 <SaveToRO+0x124>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2201      	movs	r2, #1
 800aa82:	4393      	bics	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800aa86:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800aa88:	42b5      	cmp	r5, r6
 800aa8a:	d1ed      	bne.n	800aa68 <SaveToRO+0x1c4>
 800aa8c:	0004      	movs	r4, r0
 800aa8e:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800aa90:	9a00      	ldr	r2, [sp, #0]
 800aa92:	0093      	lsls	r3, r2, #2
 800aa94:	4694      	mov	ip, r2
 800aa96:	4463      	add	r3, ip
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4a0d      	ldr	r2, [pc, #52]	; (800aad0 <SaveToRO+0x22c>)
 800aa9c:	4691      	mov	r9, r2
 800aa9e:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aaa0:	4b06      	ldr	r3, [pc, #24]	; (800aabc <SaveToRO+0x218>)
 800aaa2:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <SaveToRO+0x21c>)
 800aaa6:	4698      	mov	r8, r3
 800aaa8:	464b      	mov	r3, r9
 800aaaa:	46a9      	mov	r9, r5
 800aaac:	001d      	movs	r5, r3
 800aaae:	e799      	b.n	800a9e4 <SaveToRO+0x140>
	HAL_FLASH_Lock();
 800aab0:	f005 f834 	bl	800fb1c <HAL_FLASH_Lock>
	return result;
 800aab4:	e727      	b.n	800a906 <SaveToRO+0x62>
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	0801d800 	.word	0x0801d800
 800aabc:	0000c350 	.word	0x0000c350
 800aac0:	40022000 	.word	0x40022000
 800aac4:	2000105c 	.word	0x2000105c
 800aac8:	20001203 	.word	0x20001203
 800aacc:	0801dc00 	.word	0x0801dc00
 800aad0:	2000695c 	.word	0x2000695c
 800aad4:	20006e38 	.word	0x20006e38
 800aad8:	2000001c 	.word	0x2000001c
 800aadc:	20000a80 	.word	0x20000a80

0800aae0 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800aae0:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800aae2:	4a07      	ldr	r2, [pc, #28]	; (800ab00 <ClearROtopology+0x20>)
 800aae4:	2100      	movs	r1, #0
 800aae6:	4807      	ldr	r0, [pc, #28]	; (800ab04 <ClearROtopology+0x24>)
 800aae8:	f007 fae3 	bl	80120b2 <memset>
	N = 1; myID = 0;
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <ClearROtopology+0x28>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <ClearROtopology+0x2c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800aaf8:	f7ff fed4 	bl	800a8a4 <SaveToRO>
}
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	00000226 	.word	0x00000226
 800ab04:	20000a80 	.word	0x20000a80
 800ab08:	2000001c 	.word	0x2000001c
 800ab0c:	2000105c 	.word	0x2000105c

0800ab10 <Module_Init>:

/* --- H1DR1 module initialization. 
*/
void Module_Init(void)
{
 800ab10:	b510      	push	{r4, lr}
	/* Array ports */
	MX_USART1_UART_Init();
 800ab12:	f001 fdab 	bl	800c66c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800ab16:	f001 fdb3 	bl	800c680 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800ab1a:	f001 fdc9 	bl	800c6b0 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800ab1e:	f001 fddf 	bl	800c6e0 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800ab22:	f001 fdf5 	bl	800c710 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800ab26:	f001 fe0b 	bl	800c740 <MX_USART6_UART_Init>
	
	/* RS485 port */
	RS485_DE_RE_Init();
 800ab2a:	f001 f989 	bl	800be40 <RS485_DE_RE_Init>
	RS485_RECEIVER_EN();
 800ab2e:	2180      	movs	r1, #128	; 0x80
 800ab30:	2090      	movs	r0, #144	; 0x90
 800ab32:	2200      	movs	r2, #0
 800ab34:	0149      	lsls	r1, r1, #5
 800ab36:	05c0      	lsls	r0, r0, #23
 800ab38:	f005 fa04 	bl	800ff44 <HAL_GPIO_WritePin>

}
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800ab3e:	4770      	bx	lr

0800ab40 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800ab40:	6800      	ldr	r0, [r0, #0]
 800ab42:	4b11      	ldr	r3, [pc, #68]	; (800ab88 <GetPort+0x48>)
 800ab44:	4298      	cmp	r0, r3
 800ab46:	d015      	beq.n	800ab74 <GetPort+0x34>
			return P1;
	else if (huart->Instance == USART2)
 800ab48:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <GetPort+0x4c>)
 800ab4a:	4298      	cmp	r0, r3
 800ab4c:	d014      	beq.n	800ab78 <GetPort+0x38>
			return P2;
	else if (huart->Instance == USART6)
 800ab4e:	4b10      	ldr	r3, [pc, #64]	; (800ab90 <GetPort+0x50>)
 800ab50:	4298      	cmp	r0, r3
 800ab52:	d013      	beq.n	800ab7c <GetPort+0x3c>
			return P3;
	else if (huart->Instance == USART3)
 800ab54:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <GetPort+0x54>)
 800ab56:	4298      	cmp	r0, r3
 800ab58:	d012      	beq.n	800ab80 <GetPort+0x40>
			return P4;
	else if (huart->Instance == USART5)
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <GetPort+0x58>)
 800ab5c:	4298      	cmp	r0, r3
 800ab5e:	d011      	beq.n	800ab84 <GetPort+0x44>
			return P5;
	else if (huart->Instance == USART1)
			return P6;
 800ab60:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <GetPort+0x5c>)
 800ab62:	469c      	mov	ip, r3
 800ab64:	4460      	add	r0, ip
 800ab66:	1e43      	subs	r3, r0, #1
 800ab68:	4198      	sbcs	r0, r3
 800ab6a:	4240      	negs	r0, r0
 800ab6c:	2305      	movs	r3, #5
 800ab6e:	4398      	bics	r0, r3
 800ab70:	3006      	adds	r0, #6
		
	return 0;
}
 800ab72:	4770      	bx	lr
			return P1;
 800ab74:	2001      	movs	r0, #1
 800ab76:	e7fc      	b.n	800ab72 <GetPort+0x32>
			return P2;
 800ab78:	2002      	movs	r0, #2
 800ab7a:	e7fa      	b.n	800ab72 <GetPort+0x32>
			return P3;
 800ab7c:	2003      	movs	r0, #3
 800ab7e:	e7f8      	b.n	800ab72 <GetPort+0x32>
			return P4;
 800ab80:	2004      	movs	r0, #4
 800ab82:	e7f6      	b.n	800ab72 <GetPort+0x32>
			return P5;
 800ab84:	2005      	movs	r0, #5
 800ab86:	e7f4      	b.n	800ab72 <GetPort+0x32>
 800ab88:	40004c00 	.word	0x40004c00
 800ab8c:	40004400 	.word	0x40004400
 800ab90:	40011400 	.word	0x40011400
 800ab94:	40004800 	.word	0x40004800
 800ab98:	40005000 	.word	0x40005000
 800ab9c:	bffec800 	.word	0xbffec800

0800aba0 <SetupBridgeMode>:
*/

/* --- setup RS485 port as bridge
*/
Module_Status SetupBridgeMode(uint8_t Source_p, uint32_t baud_rate)
{
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	0005      	movs	r5, r0
 800aba4:	000c      	movs	r4, r1

	// Set module mode
	H1DR1_Mode=BRIDGE;
 800aba6:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <SetupBridgeMode+0x64>)
 800aba8:	2201      	movs	r2, #1
 800abaa:	701a      	strb	r2, [r3, #0]
	Src_port=Source_p;
 800abac:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <SetupBridgeMode+0x68>)
 800abae:	7018      	strb	r0, [r3, #0]
	if(baud_rate<=19200 && baud_rate>=2400)
 800abb0:	4b16      	ldr	r3, [pc, #88]	; (800ac0c <SetupBridgeMode+0x6c>)
 800abb2:	18ca      	adds	r2, r1, r3
 800abb4:	4b16      	ldr	r3, [pc, #88]	; (800ac10 <SetupBridgeMode+0x70>)
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d81d      	bhi.n	800abf6 <SetupBridgeMode+0x56>
	{
	// Reinit the RS485 port to required settings 
		if ( MB_PORT_Init(baud_rate, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1) == H1DR1_OK )
 800abba:	2300      	movs	r3, #0
 800abbc:	2200      	movs	r2, #0
 800abbe:	2100      	movs	r1, #0
 800abc0:	0020      	movs	r0, r4
 800abc2:	f001 fd37 	bl	800c634 <MB_PORT_Init>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d118      	bne.n	800abfc <SetupBridgeMode+0x5c>
		{    
		// Set the baud rate of the src port to baud_rate
			if ( UpdateBaudrate(Source_p, baud_rate) == BOS_OK )
 800abca:	0021      	movs	r1, r4
 800abcc:	0028      	movs	r0, r5
 800abce:	f001 ffa5 	bl	800cb1c <UpdateBaudrate>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d114      	bne.n	800ac00 <SetupBridgeMode+0x60>
			{
			// Bridge between the src port and RS485 port
				if ( Bridge(Source_p, P_RS485) == BOS_OK )
 800abd6:	2106      	movs	r1, #6
 800abd8:	0028      	movs	r0, r5
 800abda:	f7f9 fac3 	bl	8004164 <Bridge>
 800abde:	1e04      	subs	r4, r0, #0
 800abe0:	d001      	beq.n	800abe6 <SetupBridgeMode+0x46>
				{
				// Set the RS485 to Receiver
					RS485_RECEIVER_EN();
					return H1DR1_OK;
				}
				else return H1DR1_ERROR;
 800abe2:	24ff      	movs	r4, #255	; 0xff
 800abe4:	e008      	b.n	800abf8 <SetupBridgeMode+0x58>
					RS485_RECEIVER_EN();
 800abe6:	2180      	movs	r1, #128	; 0x80
 800abe8:	2090      	movs	r0, #144	; 0x90
 800abea:	2200      	movs	r2, #0
 800abec:	0149      	lsls	r1, r1, #5
 800abee:	05c0      	lsls	r0, r0, #23
 800abf0:	f005 f9a8 	bl	800ff44 <HAL_GPIO_WritePin>
					return H1DR1_OK;
 800abf4:	e000      	b.n	800abf8 <SetupBridgeMode+0x58>
			}
			else return H1DR1_ERROR;
		}
		else return H1DR1_ERROR;	
	}
	else return H1DR1_ERROR;	
 800abf6:	24ff      	movs	r4, #255	; 0xff
}
 800abf8:	0020      	movs	r0, r4
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
		else return H1DR1_ERROR;	
 800abfc:	24ff      	movs	r4, #255	; 0xff
 800abfe:	e7fb      	b.n	800abf8 <SetupBridgeMode+0x58>
			else return H1DR1_ERROR;
 800ac00:	24ff      	movs	r4, #255	; 0xff
 800ac02:	e7f9      	b.n	800abf8 <SetupBridgeMode+0x58>
 800ac04:	20006c58 	.word	0x20006c58
 800ac08:	20006b6c 	.word	0x20006b6c
 800ac0c:	fffff6a0 	.word	0xfffff6a0
 800ac10:	000041a0 	.word	0x000041a0

0800ac14 <Module_MessagingTask>:
{
 800ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac16:	ab06      	add	r3, sp, #24
 800ac18:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800ac1a:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <Module_MessagingTask+0x5c>)
 800ac1c:	4298      	cmp	r0, r3
 800ac1e:	d001      	beq.n	800ac24 <Module_MessagingTask+0x10>
}
 800ac20:	2001      	movs	r0, #1
 800ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch(cMessage[port-1][shift])
 800ac24:	3901      	subs	r1, #1
 800ac26:	00cb      	lsls	r3, r1, #3
 800ac28:	1a5b      	subs	r3, r3, r1
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	4811      	ldr	r0, [pc, #68]	; (800ac74 <Module_MessagingTask+0x60>)
 800ac2e:	18c3      	adds	r3, r0, r3
 800ac30:	5c9b      	ldrb	r3, [r3, r2]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d1f4      	bne.n	800ac20 <Module_MessagingTask+0xc>
					Src_port = cMessage[port-1][1+shift];
 800ac36:	0005      	movs	r5, r0
 800ac38:	00ce      	lsls	r6, r1, #3
 800ac3a:	1a74      	subs	r4, r6, r1
 800ac3c:	00e4      	lsls	r4, r4, #3
 800ac3e:	1904      	adds	r4, r0, r4
 800ac40:	18a4      	adds	r4, r4, r2
 800ac42:	7860      	ldrb	r0, [r4, #1]
 800ac44:	4b0c      	ldr	r3, [pc, #48]	; (800ac78 <Module_MessagingTask+0x64>)
 800ac46:	7018      	strb	r0, [r3, #0]
					Br_baud_rate = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800ac48:	78a3      	ldrb	r3, [r4, #2]
 800ac4a:	061b      	lsls	r3, r3, #24
 800ac4c:	78e7      	ldrb	r7, [r4, #3]
 800ac4e:	043f      	lsls	r7, r7, #16
 800ac50:	19db      	adds	r3, r3, r7
 800ac52:	7964      	ldrb	r4, [r4, #5]
 800ac54:	191b      	adds	r3, r3, r4
 800ac56:	1a71      	subs	r1, r6, r1
 800ac58:	00c9      	lsls	r1, r1, #3
 800ac5a:	186d      	adds	r5, r5, r1
 800ac5c:	18aa      	adds	r2, r5, r2
 800ac5e:	7911      	ldrb	r1, [r2, #4]
 800ac60:	0209      	lsls	r1, r1, #8
 800ac62:	1859      	adds	r1, r3, r1
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <Module_MessagingTask+0x68>)
 800ac66:	6019      	str	r1, [r3, #0]
					SetupBridgeMode(Src_port,Br_baud_rate);
 800ac68:	f7ff ff9a 	bl	800aba0 <SetupBridgeMode>
					break;
 800ac6c:	e7d8      	b.n	800ac20 <Module_MessagingTask+0xc>
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	00000b54 	.word	0x00000b54
 800ac74:	20000cf8 	.word	0x20000cf8
 800ac78:	20006b6c 	.word	0x20006b6c
 800ac7c:	20006a14 	.word	0x20006a14

0800ac80 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ac80:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ac82:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac84:	2300      	movs	r3, #0
 800ac86:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ac88:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ac8a:	2280      	movs	r2, #128	; 0x80
 800ac8c:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac8e:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac90:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ac92:	3320      	adds	r3, #32
 800ac94:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac96:	2380      	movs	r3, #128	; 0x80
 800ac98:	019b      	lsls	r3, r3, #6
 800ac9a:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ac9c:	f004 fa32 	bl	800f104 <HAL_DMA_Init>
}
 800aca0:	bd10      	pop	{r4, pc}

0800aca2 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800aca2:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800aca4:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aca6:	2310      	movs	r3, #16
 800aca8:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800acaa:	2300      	movs	r3, #0
 800acac:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800acae:	2280      	movs	r2, #128	; 0x80
 800acb0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acb2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acb4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800acb6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800acb8:	2380      	movs	r3, #128	; 0x80
 800acba:	019b      	lsls	r3, r3, #6
 800acbc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800acbe:	f004 fa21 	bl	800f104 <HAL_DMA_Init>
}
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <DMA_Init>:
{
 800acc4:	b510      	push	{r4, lr}
 800acc6:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800acc8:	4b20      	ldr	r3, [pc, #128]	; (800ad4c <DMA_Init+0x88>)
 800acca:	6959      	ldr	r1, [r3, #20]
 800accc:	2201      	movs	r2, #1
 800acce:	4311      	orrs	r1, r2
 800acd0:	6159      	str	r1, [r3, #20]
 800acd2:	6959      	ldr	r1, [r3, #20]
 800acd4:	400a      	ands	r2, r1
 800acd6:	9200      	str	r2, [sp, #0]
 800acd8:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800acda:	6959      	ldr	r1, [r3, #20]
 800acdc:	2202      	movs	r2, #2
 800acde:	4311      	orrs	r1, r2
 800ace0:	6159      	str	r1, [r3, #20]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	401a      	ands	r2, r3
 800ace6:	9201      	str	r2, [sp, #4]
 800ace8:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800acea:	4c19      	ldr	r4, [pc, #100]	; (800ad50 <DMA_Init+0x8c>)
 800acec:	4919      	ldr	r1, [pc, #100]	; (800ad54 <DMA_Init+0x90>)
 800acee:	0020      	movs	r0, r4
 800acf0:	f7ff ffc6 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800acf4:	0020      	movs	r0, r4
 800acf6:	3038      	adds	r0, #56	; 0x38
 800acf8:	4917      	ldr	r1, [pc, #92]	; (800ad58 <DMA_Init+0x94>)
 800acfa:	f7ff ffc1 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800acfe:	0020      	movs	r0, r4
 800ad00:	3070      	adds	r0, #112	; 0x70
 800ad02:	4916      	ldr	r1, [pc, #88]	; (800ad5c <DMA_Init+0x98>)
 800ad04:	f7ff ffbc 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800ad08:	0020      	movs	r0, r4
 800ad0a:	30a8      	adds	r0, #168	; 0xa8
 800ad0c:	4914      	ldr	r1, [pc, #80]	; (800ad60 <DMA_Init+0x9c>)
 800ad0e:	f7ff ffb7 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800ad12:	0020      	movs	r0, r4
 800ad14:	30e0      	adds	r0, #224	; 0xe0
 800ad16:	4913      	ldr	r1, [pc, #76]	; (800ad64 <DMA_Init+0xa0>)
 800ad18:	f7ff ffb2 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800ad1c:	0020      	movs	r0, r4
 800ad1e:	3019      	adds	r0, #25
 800ad20:	30ff      	adds	r0, #255	; 0xff
 800ad22:	4911      	ldr	r1, [pc, #68]	; (800ad68 <DMA_Init+0xa4>)
 800ad24:	f7ff ffac 	bl	800ac80 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800ad28:	4c10      	ldr	r4, [pc, #64]	; (800ad6c <DMA_Init+0xa8>)
 800ad2a:	4911      	ldr	r1, [pc, #68]	; (800ad70 <DMA_Init+0xac>)
 800ad2c:	0020      	movs	r0, r4
 800ad2e:	f7ff ffb8 	bl	800aca2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800ad32:	0020      	movs	r0, r4
 800ad34:	3038      	adds	r0, #56	; 0x38
 800ad36:	490f      	ldr	r1, [pc, #60]	; (800ad74 <DMA_Init+0xb0>)
 800ad38:	f7ff ffb3 	bl	800aca2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800ad3c:	0020      	movs	r0, r4
 800ad3e:	3070      	adds	r0, #112	; 0x70
 800ad40:	490d      	ldr	r1, [pc, #52]	; (800ad78 <DMA_Init+0xb4>)
 800ad42:	f7ff ffae 	bl	800aca2 <DMA_MSG_TX_CH_Init>
}
 800ad46:	b002      	add	sp, #8
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	40021000 	.word	0x40021000
 800ad50:	20001718 	.word	0x20001718
 800ad54:	40020008 	.word	0x40020008
 800ad58:	40020030 	.word	0x40020030
 800ad5c:	40020058 	.word	0x40020058
 800ad60:	4002006c 	.word	0x4002006c
 800ad64:	4002041c 	.word	0x4002041c
 800ad68:	40020430 	.word	0x40020430
 800ad6c:	20001868 	.word	0x20001868
 800ad70:	4002001c 	.word	0x4002001c
 800ad74:	40020044 	.word	0x40020044
 800ad78:	40020080 	.word	0x40020080

0800ad7c <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ad7c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ad7e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad80:	2300      	movs	r3, #0
 800ad82:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ad84:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800ad86:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad88:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad8a:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ad8c:	3320      	adds	r3, #32
 800ad8e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ad90:	2380      	movs	r3, #128	; 0x80
 800ad92:	015b      	lsls	r3, r3, #5
 800ad94:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ad96:	f004 f9b5 	bl	800f104 <HAL_DMA_Init>
}
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800ad9c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ad9e:	6803      	ldr	r3, [r0, #0]
 800ada0:	4821      	ldr	r0, [pc, #132]	; (800ae28 <SetupDMAInterrupts+0x8c>)
 800ada2:	4283      	cmp	r3, r0
 800ada4:	d037      	beq.n	800ae16 <SetupDMAInterrupts+0x7a>
 800ada6:	d90e      	bls.n	800adc6 <SetupDMAInterrupts+0x2a>
 800ada8:	4820      	ldr	r0, [pc, #128]	; (800ae2c <SetupDMAInterrupts+0x90>)
 800adaa:	4283      	cmp	r3, r0
 800adac:	d033      	beq.n	800ae16 <SetupDMAInterrupts+0x7a>
 800adae:	d919      	bls.n	800ade4 <SetupDMAInterrupts+0x48>
 800adb0:	481f      	ldr	r0, [pc, #124]	; (800ae30 <SetupDMAInterrupts+0x94>)
 800adb2:	4283      	cmp	r3, r0
 800adb4:	d024      	beq.n	800ae00 <SetupDMAInterrupts+0x64>
 800adb6:	d92b      	bls.n	800ae10 <SetupDMAInterrupts+0x74>
 800adb8:	4a1e      	ldr	r2, [pc, #120]	; (800ae34 <SetupDMAInterrupts+0x98>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d020      	beq.n	800ae00 <SetupDMAInterrupts+0x64>
 800adbe:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <SetupDMAInterrupts+0x9c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d01d      	beq.n	800ae00 <SetupDMAInterrupts+0x64>
 800adc4:	e00d      	b.n	800ade2 <SetupDMAInterrupts+0x46>
 800adc6:	4a1d      	ldr	r2, [pc, #116]	; (800ae3c <SetupDMAInterrupts+0xa0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d107      	bne.n	800addc <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800adcc:	2200      	movs	r2, #0
 800adce:	2009      	movs	r0, #9
 800add0:	f003 fff2 	bl	800edb8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800add4:	2009      	movs	r0, #9
 800add6:	f004 f821 	bl	800ee1c <HAL_NVIC_EnableIRQ>
			break;
 800adda:	e002      	b.n	800ade2 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800addc:	4a18      	ldr	r2, [pc, #96]	; (800ae40 <SetupDMAInterrupts+0xa4>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d019      	beq.n	800ae16 <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800ade2:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ade4:	4817      	ldr	r0, [pc, #92]	; (800ae44 <SetupDMAInterrupts+0xa8>)
 800ade6:	4283      	cmp	r3, r0
 800ade8:	d00a      	beq.n	800ae00 <SetupDMAInterrupts+0x64>
 800adea:	d903      	bls.n	800adf4 <SetupDMAInterrupts+0x58>
 800adec:	4a16      	ldr	r2, [pc, #88]	; (800ae48 <SetupDMAInterrupts+0xac>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d006      	beq.n	800ae00 <SetupDMAInterrupts+0x64>
 800adf2:	e7f6      	b.n	800ade2 <SetupDMAInterrupts+0x46>
 800adf4:	4a15      	ldr	r2, [pc, #84]	; (800ae4c <SetupDMAInterrupts+0xb0>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d002      	beq.n	800ae00 <SetupDMAInterrupts+0x64>
 800adfa:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <SetupDMAInterrupts+0xb4>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d1f0      	bne.n	800ade2 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ae00:	2200      	movs	r2, #0
 800ae02:	200b      	movs	r0, #11
 800ae04:	f003 ffd8 	bl	800edb8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ae08:	200b      	movs	r0, #11
 800ae0a:	f004 f807 	bl	800ee1c <HAL_NVIC_EnableIRQ>
}
 800ae0e:	e7e8      	b.n	800ade2 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800ae10:	4a10      	ldr	r2, [pc, #64]	; (800ae54 <SetupDMAInterrupts+0xb8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d1e5      	bne.n	800ade2 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ae16:	2200      	movs	r2, #0
 800ae18:	200a      	movs	r0, #10
 800ae1a:	f003 ffcd 	bl	800edb8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ae1e:	200a      	movs	r0, #10
 800ae20:	f003 fffc 	bl	800ee1c <HAL_NVIC_EnableIRQ>
			break;
 800ae24:	e7dd      	b.n	800ade2 <SetupDMAInterrupts+0x46>
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	40020030 	.word	0x40020030
 800ae2c:	40020408 	.word	0x40020408
 800ae30:	40020430 	.word	0x40020430
 800ae34:	40020444 	.word	0x40020444
 800ae38:	40020458 	.word	0x40020458
 800ae3c:	40020008 	.word	0x40020008
 800ae40:	4002001c 	.word	0x4002001c
 800ae44:	4002006c 	.word	0x4002006c
 800ae48:	40020080 	.word	0x40020080
 800ae4c:	40020044 	.word	0x40020044
 800ae50:	40020058 	.word	0x40020058
 800ae54:	4002041c 	.word	0x4002041c

0800ae58 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800ae58:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	491b      	ldr	r1, [pc, #108]	; (800aecc <UnSetupDMAInterrupts+0x74>)
 800ae5e:	428b      	cmp	r3, r1
 800ae60:	d02f      	beq.n	800aec2 <UnSetupDMAInterrupts+0x6a>
 800ae62:	d90e      	bls.n	800ae82 <UnSetupDMAInterrupts+0x2a>
 800ae64:	491a      	ldr	r1, [pc, #104]	; (800aed0 <UnSetupDMAInterrupts+0x78>)
 800ae66:	428b      	cmp	r3, r1
 800ae68:	d02b      	beq.n	800aec2 <UnSetupDMAInterrupts+0x6a>
 800ae6a:	d915      	bls.n	800ae98 <UnSetupDMAInterrupts+0x40>
 800ae6c:	4919      	ldr	r1, [pc, #100]	; (800aed4 <UnSetupDMAInterrupts+0x7c>)
 800ae6e:	428b      	cmp	r3, r1
 800ae70:	d020      	beq.n	800aeb4 <UnSetupDMAInterrupts+0x5c>
 800ae72:	d923      	bls.n	800aebc <UnSetupDMAInterrupts+0x64>
 800ae74:	4a18      	ldr	r2, [pc, #96]	; (800aed8 <UnSetupDMAInterrupts+0x80>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d01c      	beq.n	800aeb4 <UnSetupDMAInterrupts+0x5c>
 800ae7a:	4a18      	ldr	r2, [pc, #96]	; (800aedc <UnSetupDMAInterrupts+0x84>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d019      	beq.n	800aeb4 <UnSetupDMAInterrupts+0x5c>
 800ae80:	e009      	b.n	800ae96 <UnSetupDMAInterrupts+0x3e>
 800ae82:	4a17      	ldr	r2, [pc, #92]	; (800aee0 <UnSetupDMAInterrupts+0x88>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d103      	bne.n	800ae90 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ae88:	2009      	movs	r0, #9
 800ae8a:	f003 ffd1 	bl	800ee30 <HAL_NVIC_DisableIRQ>
			break;
 800ae8e:	e002      	b.n	800ae96 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ae90:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <UnSetupDMAInterrupts+0x8c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d015      	beq.n	800aec2 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800ae96:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ae98:	4913      	ldr	r1, [pc, #76]	; (800aee8 <UnSetupDMAInterrupts+0x90>)
 800ae9a:	428b      	cmp	r3, r1
 800ae9c:	d00a      	beq.n	800aeb4 <UnSetupDMAInterrupts+0x5c>
 800ae9e:	d903      	bls.n	800aea8 <UnSetupDMAInterrupts+0x50>
 800aea0:	4a12      	ldr	r2, [pc, #72]	; (800aeec <UnSetupDMAInterrupts+0x94>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d006      	beq.n	800aeb4 <UnSetupDMAInterrupts+0x5c>
 800aea6:	e7f6      	b.n	800ae96 <UnSetupDMAInterrupts+0x3e>
 800aea8:	4a11      	ldr	r2, [pc, #68]	; (800aef0 <UnSetupDMAInterrupts+0x98>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d002      	beq.n	800aeb4 <UnSetupDMAInterrupts+0x5c>
 800aeae:	4a11      	ldr	r2, [pc, #68]	; (800aef4 <UnSetupDMAInterrupts+0x9c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d1f0      	bne.n	800ae96 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800aeb4:	200b      	movs	r0, #11
 800aeb6:	f003 ffbb 	bl	800ee30 <HAL_NVIC_DisableIRQ>
}
 800aeba:	e7ec      	b.n	800ae96 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800aebc:	4a0e      	ldr	r2, [pc, #56]	; (800aef8 <UnSetupDMAInterrupts+0xa0>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d1e9      	bne.n	800ae96 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800aec2:	200a      	movs	r0, #10
 800aec4:	f003 ffb4 	bl	800ee30 <HAL_NVIC_DisableIRQ>
			break;
 800aec8:	e7e5      	b.n	800ae96 <UnSetupDMAInterrupts+0x3e>
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	40020030 	.word	0x40020030
 800aed0:	40020408 	.word	0x40020408
 800aed4:	40020430 	.word	0x40020430
 800aed8:	40020444 	.word	0x40020444
 800aedc:	40020458 	.word	0x40020458
 800aee0:	40020008 	.word	0x40020008
 800aee4:	4002001c 	.word	0x4002001c
 800aee8:	4002006c 	.word	0x4002006c
 800aeec:	40020080 	.word	0x40020080
 800aef0:	40020044 	.word	0x40020044
 800aef4:	40020058 	.word	0x40020058
 800aef8:	4002041c 	.word	0x4002041c

0800aefc <DMA_MSG_TX_UnSetup>:
{	
 800aefc:	b510      	push	{r4, lr}
 800aefe:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800af00:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800af02:	f7ff ffa9 	bl	800ae58 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800af06:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800af08:	2300      	movs	r3, #0
 800af0a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800af0c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800af0e:	bd10      	pop	{r4, pc}

0800af10 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800af10:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800af12:	6803      	ldr	r3, [r0, #0]
 800af14:	4ac3      	ldr	r2, [pc, #780]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x314>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d03e      	beq.n	800af98 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800af1a:	4ac3      	ldr	r2, [pc, #780]	; (800b228 <RemapAndLinkDMAtoUARTRx+0x318>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d100      	bne.n	800af22 <RemapAndLinkDMAtoUARTRx+0x12>
 800af20:	e096      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800af22:	4ac2      	ldr	r2, [pc, #776]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d100      	bne.n	800af2a <RemapAndLinkDMAtoUARTRx+0x1a>
 800af28:	e0eb      	b.n	800b102 <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800af2a:	4ac1      	ldr	r2, [pc, #772]	; (800b230 <RemapAndLinkDMAtoUARTRx+0x320>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d100      	bne.n	800af32 <RemapAndLinkDMAtoUARTRx+0x22>
 800af30:	e141      	b.n	800b1b6 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800af32:	4ac0      	ldr	r2, [pc, #768]	; (800b234 <RemapAndLinkDMAtoUARTRx+0x324>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d100      	bne.n	800af3a <RemapAndLinkDMAtoUARTRx+0x2a>
 800af38:	e1bd      	b.n	800b2b6 <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800af3a:	4abf      	ldr	r2, [pc, #764]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x328>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d100      	bne.n	800af42 <RemapAndLinkDMAtoUARTRx+0x32>
 800af40:	e213      	b.n	800b36a <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800af42:	4abe      	ldr	r2, [pc, #760]	; (800b23c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d100      	bne.n	800af4a <RemapAndLinkDMAtoUARTRx+0x3a>
 800af48:	e269      	b.n	800b41e <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800af4a:	4abd      	ldr	r2, [pc, #756]	; (800b240 <RemapAndLinkDMAtoUARTRx+0x330>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d136      	bne.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
 800af50:	680b      	ldr	r3, [r1, #0]
 800af52:	4abc      	ldr	r2, [pc, #752]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x334>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d100      	bne.n	800af5a <RemapAndLinkDMAtoUARTRx+0x4a>
 800af58:	e2bb      	b.n	800b4d2 <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800af5a:	4abb      	ldr	r2, [pc, #748]	; (800b248 <RemapAndLinkDMAtoUARTRx+0x338>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d100      	bne.n	800af62 <RemapAndLinkDMAtoUARTRx+0x52>
 800af60:	e2c1      	b.n	800b4e6 <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800af62:	4aba      	ldr	r2, [pc, #744]	; (800b24c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d100      	bne.n	800af6a <RemapAndLinkDMAtoUARTRx+0x5a>
 800af68:	e2c9      	b.n	800b4fe <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800af6a:	4ab9      	ldr	r2, [pc, #740]	; (800b250 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d100      	bne.n	800af72 <RemapAndLinkDMAtoUARTRx+0x62>
 800af70:	e2d1      	b.n	800b516 <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800af72:	4ab8      	ldr	r2, [pc, #736]	; (800b254 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d100      	bne.n	800af7a <RemapAndLinkDMAtoUARTRx+0x6a>
 800af78:	e2d9      	b.n	800b52e <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800af7a:	4ab7      	ldr	r2, [pc, #732]	; (800b258 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d11e      	bne.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800af80:	4ab6      	ldr	r2, [pc, #728]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800af82:	23a8      	movs	r3, #168	; 0xa8
 800af84:	58d4      	ldr	r4, [r2, r3]
 800af86:	4db6      	ldr	r5, [pc, #728]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800af88:	402c      	ands	r4, r5
 800af8a:	50d4      	str	r4, [r2, r3]
 800af8c:	58d5      	ldr	r5, [r2, r3]
 800af8e:	24f0      	movs	r4, #240	; 0xf0
 800af90:	0124      	lsls	r4, r4, #4
 800af92:	432c      	orrs	r4, r5
 800af94:	50d4      	str	r4, [r2, r3]
 800af96:	e012      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800af98:	680b      	ldr	r3, [r1, #0]
 800af9a:	4aaa      	ldr	r2, [pc, #680]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x334>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d011      	beq.n	800afc4 <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800afa0:	4aa9      	ldr	r2, [pc, #676]	; (800b248 <RemapAndLinkDMAtoUARTRx+0x338>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d019      	beq.n	800afda <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800afa6:	4aa9      	ldr	r2, [pc, #676]	; (800b24c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d022      	beq.n	800aff2 <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800afac:	4aa8      	ldr	r2, [pc, #672]	; (800b250 <RemapAndLinkDMAtoUARTRx+0x340>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d02b      	beq.n	800b00a <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800afb2:	4aa8      	ldr	r2, [pc, #672]	; (800b254 <RemapAndLinkDMAtoUARTRx+0x344>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d034      	beq.n	800b022 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800afb8:	4aa7      	ldr	r2, [pc, #668]	; (800b258 <RemapAndLinkDMAtoUARTRx+0x348>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d03c      	beq.n	800b038 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800afbe:	6641      	str	r1, [r0, #100]	; 0x64
 800afc0:	6248      	str	r0, [r1, #36]	; 0x24
}
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800afc4:	4aa7      	ldr	r2, [pc, #668]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800afc6:	23a8      	movs	r3, #168	; 0xa8
 800afc8:	58d4      	ldr	r4, [r2, r3]
 800afca:	250f      	movs	r5, #15
 800afcc:	43ac      	bics	r4, r5
 800afce:	50d4      	str	r4, [r2, r3]
 800afd0:	58d4      	ldr	r4, [r2, r3]
 800afd2:	3d07      	subs	r5, #7
 800afd4:	432c      	orrs	r4, r5
 800afd6:	50d4      	str	r4, [r2, r3]
 800afd8:	e7f1      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800afda:	4aa2      	ldr	r2, [pc, #648]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800afdc:	23a8      	movs	r3, #168	; 0xa8
 800afde:	58d4      	ldr	r4, [r2, r3]
 800afe0:	4d9f      	ldr	r5, [pc, #636]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afe2:	402c      	ands	r4, r5
 800afe4:	50d4      	str	r4, [r2, r3]
 800afe6:	58d5      	ldr	r5, [r2, r3]
 800afe8:	2480      	movs	r4, #128	; 0x80
 800afea:	0124      	lsls	r4, r4, #4
 800afec:	432c      	orrs	r4, r5
 800afee:	50d4      	str	r4, [r2, r3]
 800aff0:	e7e5      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800aff2:	4a9c      	ldr	r2, [pc, #624]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aff4:	23a8      	movs	r3, #168	; 0xa8
 800aff6:	58d4      	ldr	r4, [r2, r3]
 800aff8:	4d9b      	ldr	r5, [pc, #620]	; (800b268 <RemapAndLinkDMAtoUARTRx+0x358>)
 800affa:	402c      	ands	r4, r5
 800affc:	50d4      	str	r4, [r2, r3]
 800affe:	58d5      	ldr	r5, [r2, r3]
 800b000:	2480      	movs	r4, #128	; 0x80
 800b002:	0324      	lsls	r4, r4, #12
 800b004:	432c      	orrs	r4, r5
 800b006:	50d4      	str	r4, [r2, r3]
 800b008:	e7d9      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b00a:	4a96      	ldr	r2, [pc, #600]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b00c:	23a8      	movs	r3, #168	; 0xa8
 800b00e:	58d4      	ldr	r4, [r2, r3]
 800b010:	4d96      	ldr	r5, [pc, #600]	; (800b26c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b012:	402c      	ands	r4, r5
 800b014:	50d4      	str	r4, [r2, r3]
 800b016:	58d5      	ldr	r5, [r2, r3]
 800b018:	2480      	movs	r4, #128	; 0x80
 800b01a:	0424      	lsls	r4, r4, #16
 800b01c:	432c      	orrs	r4, r5
 800b01e:	50d4      	str	r4, [r2, r3]
 800b020:	e7cd      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b022:	4a8e      	ldr	r2, [pc, #568]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b024:	23a8      	movs	r3, #168	; 0xa8
 800b026:	58d4      	ldr	r4, [r2, r3]
 800b028:	25f0      	movs	r5, #240	; 0xf0
 800b02a:	43ac      	bics	r4, r5
 800b02c:	50d4      	str	r4, [r2, r3]
 800b02e:	58d4      	ldr	r4, [r2, r3]
 800b030:	3d70      	subs	r5, #112	; 0x70
 800b032:	432c      	orrs	r4, r5
 800b034:	50d4      	str	r4, [r2, r3]
 800b036:	e7c2      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b038:	4a88      	ldr	r2, [pc, #544]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b03a:	23a8      	movs	r3, #168	; 0xa8
 800b03c:	58d4      	ldr	r4, [r2, r3]
 800b03e:	4d88      	ldr	r5, [pc, #544]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b040:	402c      	ands	r4, r5
 800b042:	50d4      	str	r4, [r2, r3]
 800b044:	58d5      	ldr	r5, [r2, r3]
 800b046:	2480      	movs	r4, #128	; 0x80
 800b048:	0124      	lsls	r4, r4, #4
 800b04a:	432c      	orrs	r4, r5
 800b04c:	50d4      	str	r4, [r2, r3]
 800b04e:	e7b6      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b050:	680b      	ldr	r3, [r1, #0]
 800b052:	4a7c      	ldr	r2, [pc, #496]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d01a      	beq.n	800b08e <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b058:	4a7b      	ldr	r2, [pc, #492]	; (800b248 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d022      	beq.n	800b0a4 <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b05e:	4a7b      	ldr	r2, [pc, #492]	; (800b24c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d02b      	beq.n	800b0bc <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b064:	4a7a      	ldr	r2, [pc, #488]	; (800b250 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d034      	beq.n	800b0d4 <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b06a:	4a7a      	ldr	r2, [pc, #488]	; (800b254 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d03d      	beq.n	800b0ec <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b070:	4a79      	ldr	r2, [pc, #484]	; (800b258 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d1a3      	bne.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b076:	4a79      	ldr	r2, [pc, #484]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b078:	23a8      	movs	r3, #168	; 0xa8
 800b07a:	58d4      	ldr	r4, [r2, r3]
 800b07c:	4d78      	ldr	r5, [pc, #480]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b07e:	402c      	ands	r4, r5
 800b080:	50d4      	str	r4, [r2, r3]
 800b082:	58d5      	ldr	r5, [r2, r3]
 800b084:	2490      	movs	r4, #144	; 0x90
 800b086:	0124      	lsls	r4, r4, #4
 800b088:	432c      	orrs	r4, r5
 800b08a:	50d4      	str	r4, [r2, r3]
 800b08c:	e797      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b08e:	4a75      	ldr	r2, [pc, #468]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b090:	23a8      	movs	r3, #168	; 0xa8
 800b092:	58d4      	ldr	r4, [r2, r3]
 800b094:	250f      	movs	r5, #15
 800b096:	43ac      	bics	r4, r5
 800b098:	50d4      	str	r4, [r2, r3]
 800b09a:	58d4      	ldr	r4, [r2, r3]
 800b09c:	3d06      	subs	r5, #6
 800b09e:	432c      	orrs	r4, r5
 800b0a0:	50d4      	str	r4, [r2, r3]
 800b0a2:	e78c      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b0a4:	4a6f      	ldr	r2, [pc, #444]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b0a6:	23a8      	movs	r3, #168	; 0xa8
 800b0a8:	58d4      	ldr	r4, [r2, r3]
 800b0aa:	4d6d      	ldr	r5, [pc, #436]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b0ac:	402c      	ands	r4, r5
 800b0ae:	50d4      	str	r4, [r2, r3]
 800b0b0:	58d5      	ldr	r5, [r2, r3]
 800b0b2:	2490      	movs	r4, #144	; 0x90
 800b0b4:	0124      	lsls	r4, r4, #4
 800b0b6:	432c      	orrs	r4, r5
 800b0b8:	50d4      	str	r4, [r2, r3]
 800b0ba:	e780      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b0bc:	4a69      	ldr	r2, [pc, #420]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b0be:	23a8      	movs	r3, #168	; 0xa8
 800b0c0:	58d4      	ldr	r4, [r2, r3]
 800b0c2:	4d69      	ldr	r5, [pc, #420]	; (800b268 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b0c4:	402c      	ands	r4, r5
 800b0c6:	50d4      	str	r4, [r2, r3]
 800b0c8:	58d5      	ldr	r5, [r2, r3]
 800b0ca:	2490      	movs	r4, #144	; 0x90
 800b0cc:	0324      	lsls	r4, r4, #12
 800b0ce:	432c      	orrs	r4, r5
 800b0d0:	50d4      	str	r4, [r2, r3]
 800b0d2:	e774      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b0d4:	4a63      	ldr	r2, [pc, #396]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b0d6:	23a8      	movs	r3, #168	; 0xa8
 800b0d8:	58d4      	ldr	r4, [r2, r3]
 800b0da:	4d64      	ldr	r5, [pc, #400]	; (800b26c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0dc:	402c      	ands	r4, r5
 800b0de:	50d4      	str	r4, [r2, r3]
 800b0e0:	58d5      	ldr	r5, [r2, r3]
 800b0e2:	2490      	movs	r4, #144	; 0x90
 800b0e4:	0424      	lsls	r4, r4, #16
 800b0e6:	432c      	orrs	r4, r5
 800b0e8:	50d4      	str	r4, [r2, r3]
 800b0ea:	e768      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b0ec:	4a5b      	ldr	r2, [pc, #364]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b0ee:	23a8      	movs	r3, #168	; 0xa8
 800b0f0:	58d4      	ldr	r4, [r2, r3]
 800b0f2:	25f0      	movs	r5, #240	; 0xf0
 800b0f4:	43ac      	bics	r4, r5
 800b0f6:	50d4      	str	r4, [r2, r3]
 800b0f8:	58d4      	ldr	r4, [r2, r3]
 800b0fa:	3d60      	subs	r5, #96	; 0x60
 800b0fc:	432c      	orrs	r4, r5
 800b0fe:	50d4      	str	r4, [r2, r3]
 800b100:	e75d      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b102:	680b      	ldr	r3, [r1, #0]
 800b104:	4a4f      	ldr	r2, [pc, #316]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d01b      	beq.n	800b142 <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b10a:	4a4f      	ldr	r2, [pc, #316]	; (800b248 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d023      	beq.n	800b158 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b110:	4a4e      	ldr	r2, [pc, #312]	; (800b24c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d02c      	beq.n	800b170 <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b116:	4a4e      	ldr	r2, [pc, #312]	; (800b250 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d035      	beq.n	800b188 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b11c:	4a4d      	ldr	r2, [pc, #308]	; (800b254 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d03e      	beq.n	800b1a0 <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b122:	4a4d      	ldr	r2, [pc, #308]	; (800b258 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d000      	beq.n	800b12a <RemapAndLinkDMAtoUARTRx+0x21a>
 800b128:	e749      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b12a:	4a4c      	ldr	r2, [pc, #304]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b12c:	23a8      	movs	r3, #168	; 0xa8
 800b12e:	58d4      	ldr	r4, [r2, r3]
 800b130:	4d4b      	ldr	r5, [pc, #300]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b132:	402c      	ands	r4, r5
 800b134:	50d4      	str	r4, [r2, r3]
 800b136:	58d5      	ldr	r5, [r2, r3]
 800b138:	24a0      	movs	r4, #160	; 0xa0
 800b13a:	0124      	lsls	r4, r4, #4
 800b13c:	432c      	orrs	r4, r5
 800b13e:	50d4      	str	r4, [r2, r3]
 800b140:	e73d      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b142:	4a48      	ldr	r2, [pc, #288]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b144:	23a8      	movs	r3, #168	; 0xa8
 800b146:	58d4      	ldr	r4, [r2, r3]
 800b148:	250f      	movs	r5, #15
 800b14a:	43ac      	bics	r4, r5
 800b14c:	50d4      	str	r4, [r2, r3]
 800b14e:	58d4      	ldr	r4, [r2, r3]
 800b150:	3d05      	subs	r5, #5
 800b152:	432c      	orrs	r4, r5
 800b154:	50d4      	str	r4, [r2, r3]
 800b156:	e732      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b158:	4a42      	ldr	r2, [pc, #264]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b15a:	23a8      	movs	r3, #168	; 0xa8
 800b15c:	58d4      	ldr	r4, [r2, r3]
 800b15e:	4d40      	ldr	r5, [pc, #256]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b160:	402c      	ands	r4, r5
 800b162:	50d4      	str	r4, [r2, r3]
 800b164:	58d5      	ldr	r5, [r2, r3]
 800b166:	24a0      	movs	r4, #160	; 0xa0
 800b168:	0124      	lsls	r4, r4, #4
 800b16a:	432c      	orrs	r4, r5
 800b16c:	50d4      	str	r4, [r2, r3]
 800b16e:	e726      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b170:	4a3c      	ldr	r2, [pc, #240]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b172:	23a8      	movs	r3, #168	; 0xa8
 800b174:	58d4      	ldr	r4, [r2, r3]
 800b176:	4d3c      	ldr	r5, [pc, #240]	; (800b268 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b178:	402c      	ands	r4, r5
 800b17a:	50d4      	str	r4, [r2, r3]
 800b17c:	58d5      	ldr	r5, [r2, r3]
 800b17e:	24a0      	movs	r4, #160	; 0xa0
 800b180:	0324      	lsls	r4, r4, #12
 800b182:	432c      	orrs	r4, r5
 800b184:	50d4      	str	r4, [r2, r3]
 800b186:	e71a      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b188:	4a36      	ldr	r2, [pc, #216]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b18a:	23a8      	movs	r3, #168	; 0xa8
 800b18c:	58d4      	ldr	r4, [r2, r3]
 800b18e:	4d37      	ldr	r5, [pc, #220]	; (800b26c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b190:	402c      	ands	r4, r5
 800b192:	50d4      	str	r4, [r2, r3]
 800b194:	58d5      	ldr	r5, [r2, r3]
 800b196:	24a0      	movs	r4, #160	; 0xa0
 800b198:	0424      	lsls	r4, r4, #16
 800b19a:	432c      	orrs	r4, r5
 800b19c:	50d4      	str	r4, [r2, r3]
 800b19e:	e70e      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b1a0:	4a2e      	ldr	r2, [pc, #184]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b1a2:	23a8      	movs	r3, #168	; 0xa8
 800b1a4:	58d4      	ldr	r4, [r2, r3]
 800b1a6:	25f0      	movs	r5, #240	; 0xf0
 800b1a8:	43ac      	bics	r4, r5
 800b1aa:	50d4      	str	r4, [r2, r3]
 800b1ac:	58d4      	ldr	r4, [r2, r3]
 800b1ae:	3d50      	subs	r5, #80	; 0x50
 800b1b0:	432c      	orrs	r4, r5
 800b1b2:	50d4      	str	r4, [r2, r3]
 800b1b4:	e703      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b1b6:	680b      	ldr	r3, [r1, #0]
 800b1b8:	4a22      	ldr	r2, [pc, #136]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d01b      	beq.n	800b1f6 <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b1be:	4a22      	ldr	r2, [pc, #136]	; (800b248 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d023      	beq.n	800b20c <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b1c4:	4a21      	ldr	r2, [pc, #132]	; (800b24c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d052      	beq.n	800b270 <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b1ca:	4a21      	ldr	r2, [pc, #132]	; (800b250 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d05b      	beq.n	800b288 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b1d0:	4a20      	ldr	r2, [pc, #128]	; (800b254 <RemapAndLinkDMAtoUARTRx+0x344>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d064      	beq.n	800b2a0 <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b1d6:	4a20      	ldr	r2, [pc, #128]	; (800b258 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d000      	beq.n	800b1de <RemapAndLinkDMAtoUARTRx+0x2ce>
 800b1dc:	e6ef      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b1de:	4a1f      	ldr	r2, [pc, #124]	; (800b25c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b1e0:	23a8      	movs	r3, #168	; 0xa8
 800b1e2:	58d4      	ldr	r4, [r2, r3]
 800b1e4:	4d1e      	ldr	r5, [pc, #120]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b1e6:	402c      	ands	r4, r5
 800b1e8:	50d4      	str	r4, [r2, r3]
 800b1ea:	58d5      	ldr	r5, [r2, r3]
 800b1ec:	24b0      	movs	r4, #176	; 0xb0
 800b1ee:	0124      	lsls	r4, r4, #4
 800b1f0:	432c      	orrs	r4, r5
 800b1f2:	50d4      	str	r4, [r2, r3]
 800b1f4:	e6e3      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b1f6:	4a1b      	ldr	r2, [pc, #108]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b1f8:	23a8      	movs	r3, #168	; 0xa8
 800b1fa:	58d4      	ldr	r4, [r2, r3]
 800b1fc:	250f      	movs	r5, #15
 800b1fe:	43ac      	bics	r4, r5
 800b200:	50d4      	str	r4, [r2, r3]
 800b202:	58d4      	ldr	r4, [r2, r3]
 800b204:	3d04      	subs	r5, #4
 800b206:	432c      	orrs	r4, r5
 800b208:	50d4      	str	r4, [r2, r3]
 800b20a:	e6d8      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b20c:	4a15      	ldr	r2, [pc, #84]	; (800b264 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b20e:	23a8      	movs	r3, #168	; 0xa8
 800b210:	58d4      	ldr	r4, [r2, r3]
 800b212:	4d13      	ldr	r5, [pc, #76]	; (800b260 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b214:	402c      	ands	r4, r5
 800b216:	50d4      	str	r4, [r2, r3]
 800b218:	58d5      	ldr	r5, [r2, r3]
 800b21a:	24b0      	movs	r4, #176	; 0xb0
 800b21c:	0124      	lsls	r4, r4, #4
 800b21e:	432c      	orrs	r4, r5
 800b220:	50d4      	str	r4, [r2, r3]
 800b222:	e6cc      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
 800b224:	40013800 	.word	0x40013800
 800b228:	40004400 	.word	0x40004400
 800b22c:	40004800 	.word	0x40004800
 800b230:	40004c00 	.word	0x40004c00
 800b234:	40005000 	.word	0x40005000
 800b238:	40011400 	.word	0x40011400
 800b23c:	40011800 	.word	0x40011800
 800b240:	40011c00 	.word	0x40011c00
 800b244:	40020008 	.word	0x40020008
 800b248:	40020030 	.word	0x40020030
 800b24c:	40020058 	.word	0x40020058
 800b250:	4002006c 	.word	0x4002006c
 800b254:	4002041c 	.word	0x4002041c
 800b258:	40020430 	.word	0x40020430
 800b25c:	40020400 	.word	0x40020400
 800b260:	fffff0ff 	.word	0xfffff0ff
 800b264:	40020000 	.word	0x40020000
 800b268:	fff0ffff 	.word	0xfff0ffff
 800b26c:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b270:	4ab4      	ldr	r2, [pc, #720]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b272:	23a8      	movs	r3, #168	; 0xa8
 800b274:	58d4      	ldr	r4, [r2, r3]
 800b276:	4db4      	ldr	r5, [pc, #720]	; (800b548 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b278:	402c      	ands	r4, r5
 800b27a:	50d4      	str	r4, [r2, r3]
 800b27c:	58d5      	ldr	r5, [r2, r3]
 800b27e:	24b0      	movs	r4, #176	; 0xb0
 800b280:	0324      	lsls	r4, r4, #12
 800b282:	432c      	orrs	r4, r5
 800b284:	50d4      	str	r4, [r2, r3]
 800b286:	e69a      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b288:	4aae      	ldr	r2, [pc, #696]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b28a:	23a8      	movs	r3, #168	; 0xa8
 800b28c:	58d4      	ldr	r4, [r2, r3]
 800b28e:	4daf      	ldr	r5, [pc, #700]	; (800b54c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b290:	402c      	ands	r4, r5
 800b292:	50d4      	str	r4, [r2, r3]
 800b294:	58d5      	ldr	r5, [r2, r3]
 800b296:	24b0      	movs	r4, #176	; 0xb0
 800b298:	0424      	lsls	r4, r4, #16
 800b29a:	432c      	orrs	r4, r5
 800b29c:	50d4      	str	r4, [r2, r3]
 800b29e:	e68e      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b2a0:	4aab      	ldr	r2, [pc, #684]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b2a2:	23a8      	movs	r3, #168	; 0xa8
 800b2a4:	58d4      	ldr	r4, [r2, r3]
 800b2a6:	25f0      	movs	r5, #240	; 0xf0
 800b2a8:	43ac      	bics	r4, r5
 800b2aa:	50d4      	str	r4, [r2, r3]
 800b2ac:	58d4      	ldr	r4, [r2, r3]
 800b2ae:	3d40      	subs	r5, #64	; 0x40
 800b2b0:	432c      	orrs	r4, r5
 800b2b2:	50d4      	str	r4, [r2, r3]
 800b2b4:	e683      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b2b6:	680b      	ldr	r3, [r1, #0]
 800b2b8:	4aa6      	ldr	r2, [pc, #664]	; (800b554 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d01b      	beq.n	800b2f6 <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b2be:	4aa6      	ldr	r2, [pc, #664]	; (800b558 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d023      	beq.n	800b30c <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b2c4:	4aa5      	ldr	r2, [pc, #660]	; (800b55c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d02c      	beq.n	800b324 <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b2ca:	4aa5      	ldr	r2, [pc, #660]	; (800b560 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d035      	beq.n	800b33c <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b2d0:	4aa4      	ldr	r2, [pc, #656]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d03e      	beq.n	800b354 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b2d6:	4aa4      	ldr	r2, [pc, #656]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d000      	beq.n	800b2de <RemapAndLinkDMAtoUARTRx+0x3ce>
 800b2dc:	e66f      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b2de:	4a9c      	ldr	r2, [pc, #624]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b2e0:	23a8      	movs	r3, #168	; 0xa8
 800b2e2:	58d4      	ldr	r4, [r2, r3]
 800b2e4:	4da1      	ldr	r5, [pc, #644]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b2e6:	402c      	ands	r4, r5
 800b2e8:	50d4      	str	r4, [r2, r3]
 800b2ea:	58d5      	ldr	r5, [r2, r3]
 800b2ec:	24c0      	movs	r4, #192	; 0xc0
 800b2ee:	0124      	lsls	r4, r4, #4
 800b2f0:	432c      	orrs	r4, r5
 800b2f2:	50d4      	str	r4, [r2, r3]
 800b2f4:	e663      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b2f6:	4a93      	ldr	r2, [pc, #588]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b2f8:	23a8      	movs	r3, #168	; 0xa8
 800b2fa:	58d4      	ldr	r4, [r2, r3]
 800b2fc:	250f      	movs	r5, #15
 800b2fe:	43ac      	bics	r4, r5
 800b300:	50d4      	str	r4, [r2, r3]
 800b302:	58d4      	ldr	r4, [r2, r3]
 800b304:	3d03      	subs	r5, #3
 800b306:	432c      	orrs	r4, r5
 800b308:	50d4      	str	r4, [r2, r3]
 800b30a:	e658      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b30c:	4a8d      	ldr	r2, [pc, #564]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b30e:	23a8      	movs	r3, #168	; 0xa8
 800b310:	58d4      	ldr	r4, [r2, r3]
 800b312:	4d96      	ldr	r5, [pc, #600]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b314:	402c      	ands	r4, r5
 800b316:	50d4      	str	r4, [r2, r3]
 800b318:	58d5      	ldr	r5, [r2, r3]
 800b31a:	24c0      	movs	r4, #192	; 0xc0
 800b31c:	0124      	lsls	r4, r4, #4
 800b31e:	432c      	orrs	r4, r5
 800b320:	50d4      	str	r4, [r2, r3]
 800b322:	e64c      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b324:	4a87      	ldr	r2, [pc, #540]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b326:	23a8      	movs	r3, #168	; 0xa8
 800b328:	58d4      	ldr	r4, [r2, r3]
 800b32a:	4d87      	ldr	r5, [pc, #540]	; (800b548 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b32c:	402c      	ands	r4, r5
 800b32e:	50d4      	str	r4, [r2, r3]
 800b330:	58d5      	ldr	r5, [r2, r3]
 800b332:	24c0      	movs	r4, #192	; 0xc0
 800b334:	0324      	lsls	r4, r4, #12
 800b336:	432c      	orrs	r4, r5
 800b338:	50d4      	str	r4, [r2, r3]
 800b33a:	e640      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b33c:	4a81      	ldr	r2, [pc, #516]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b33e:	23a8      	movs	r3, #168	; 0xa8
 800b340:	58d4      	ldr	r4, [r2, r3]
 800b342:	4d82      	ldr	r5, [pc, #520]	; (800b54c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b344:	402c      	ands	r4, r5
 800b346:	50d4      	str	r4, [r2, r3]
 800b348:	58d5      	ldr	r5, [r2, r3]
 800b34a:	24c0      	movs	r4, #192	; 0xc0
 800b34c:	0424      	lsls	r4, r4, #16
 800b34e:	432c      	orrs	r4, r5
 800b350:	50d4      	str	r4, [r2, r3]
 800b352:	e634      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b354:	4a7e      	ldr	r2, [pc, #504]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b356:	23a8      	movs	r3, #168	; 0xa8
 800b358:	58d4      	ldr	r4, [r2, r3]
 800b35a:	25f0      	movs	r5, #240	; 0xf0
 800b35c:	43ac      	bics	r4, r5
 800b35e:	50d4      	str	r4, [r2, r3]
 800b360:	58d4      	ldr	r4, [r2, r3]
 800b362:	3d30      	subs	r5, #48	; 0x30
 800b364:	432c      	orrs	r4, r5
 800b366:	50d4      	str	r4, [r2, r3]
 800b368:	e629      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b36a:	680b      	ldr	r3, [r1, #0]
 800b36c:	4a79      	ldr	r2, [pc, #484]	; (800b554 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d01b      	beq.n	800b3aa <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b372:	4a79      	ldr	r2, [pc, #484]	; (800b558 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d023      	beq.n	800b3c0 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b378:	4a78      	ldr	r2, [pc, #480]	; (800b55c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d02c      	beq.n	800b3d8 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b37e:	4a78      	ldr	r2, [pc, #480]	; (800b560 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d035      	beq.n	800b3f0 <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b384:	4a77      	ldr	r2, [pc, #476]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d03e      	beq.n	800b408 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b38a:	4a77      	ldr	r2, [pc, #476]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d000      	beq.n	800b392 <RemapAndLinkDMAtoUARTRx+0x482>
 800b390:	e615      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b392:	4a6f      	ldr	r2, [pc, #444]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b394:	23a8      	movs	r3, #168	; 0xa8
 800b396:	58d4      	ldr	r4, [r2, r3]
 800b398:	4d74      	ldr	r5, [pc, #464]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b39a:	402c      	ands	r4, r5
 800b39c:	50d4      	str	r4, [r2, r3]
 800b39e:	58d5      	ldr	r5, [r2, r3]
 800b3a0:	24d0      	movs	r4, #208	; 0xd0
 800b3a2:	0124      	lsls	r4, r4, #4
 800b3a4:	432c      	orrs	r4, r5
 800b3a6:	50d4      	str	r4, [r2, r3]
 800b3a8:	e609      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b3aa:	4a66      	ldr	r2, [pc, #408]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b3ac:	23a8      	movs	r3, #168	; 0xa8
 800b3ae:	58d4      	ldr	r4, [r2, r3]
 800b3b0:	250f      	movs	r5, #15
 800b3b2:	43ac      	bics	r4, r5
 800b3b4:	50d4      	str	r4, [r2, r3]
 800b3b6:	58d4      	ldr	r4, [r2, r3]
 800b3b8:	3d02      	subs	r5, #2
 800b3ba:	432c      	orrs	r4, r5
 800b3bc:	50d4      	str	r4, [r2, r3]
 800b3be:	e5fe      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b3c0:	4a60      	ldr	r2, [pc, #384]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b3c2:	23a8      	movs	r3, #168	; 0xa8
 800b3c4:	58d4      	ldr	r4, [r2, r3]
 800b3c6:	4d69      	ldr	r5, [pc, #420]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b3c8:	402c      	ands	r4, r5
 800b3ca:	50d4      	str	r4, [r2, r3]
 800b3cc:	58d5      	ldr	r5, [r2, r3]
 800b3ce:	24d0      	movs	r4, #208	; 0xd0
 800b3d0:	0124      	lsls	r4, r4, #4
 800b3d2:	432c      	orrs	r4, r5
 800b3d4:	50d4      	str	r4, [r2, r3]
 800b3d6:	e5f2      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b3d8:	4a5a      	ldr	r2, [pc, #360]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b3da:	23a8      	movs	r3, #168	; 0xa8
 800b3dc:	58d4      	ldr	r4, [r2, r3]
 800b3de:	4d5a      	ldr	r5, [pc, #360]	; (800b548 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b3e0:	402c      	ands	r4, r5
 800b3e2:	50d4      	str	r4, [r2, r3]
 800b3e4:	58d5      	ldr	r5, [r2, r3]
 800b3e6:	24d0      	movs	r4, #208	; 0xd0
 800b3e8:	0324      	lsls	r4, r4, #12
 800b3ea:	432c      	orrs	r4, r5
 800b3ec:	50d4      	str	r4, [r2, r3]
 800b3ee:	e5e6      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b3f0:	4a54      	ldr	r2, [pc, #336]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b3f2:	23a8      	movs	r3, #168	; 0xa8
 800b3f4:	58d4      	ldr	r4, [r2, r3]
 800b3f6:	4d55      	ldr	r5, [pc, #340]	; (800b54c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b3f8:	402c      	ands	r4, r5
 800b3fa:	50d4      	str	r4, [r2, r3]
 800b3fc:	58d5      	ldr	r5, [r2, r3]
 800b3fe:	24d0      	movs	r4, #208	; 0xd0
 800b400:	0424      	lsls	r4, r4, #16
 800b402:	432c      	orrs	r4, r5
 800b404:	50d4      	str	r4, [r2, r3]
 800b406:	e5da      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b408:	4a51      	ldr	r2, [pc, #324]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b40a:	23a8      	movs	r3, #168	; 0xa8
 800b40c:	58d4      	ldr	r4, [r2, r3]
 800b40e:	25f0      	movs	r5, #240	; 0xf0
 800b410:	43ac      	bics	r4, r5
 800b412:	50d4      	str	r4, [r2, r3]
 800b414:	58d4      	ldr	r4, [r2, r3]
 800b416:	3d20      	subs	r5, #32
 800b418:	432c      	orrs	r4, r5
 800b41a:	50d4      	str	r4, [r2, r3]
 800b41c:	e5cf      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b41e:	680b      	ldr	r3, [r1, #0]
 800b420:	4a4c      	ldr	r2, [pc, #304]	; (800b554 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d01b      	beq.n	800b45e <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b426:	4a4c      	ldr	r2, [pc, #304]	; (800b558 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d023      	beq.n	800b474 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b42c:	4a4b      	ldr	r2, [pc, #300]	; (800b55c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d02c      	beq.n	800b48c <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b432:	4a4b      	ldr	r2, [pc, #300]	; (800b560 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d035      	beq.n	800b4a4 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b438:	4a4a      	ldr	r2, [pc, #296]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d03e      	beq.n	800b4bc <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b43e:	4a4a      	ldr	r2, [pc, #296]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d000      	beq.n	800b446 <RemapAndLinkDMAtoUARTRx+0x536>
 800b444:	e5bb      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b446:	4a42      	ldr	r2, [pc, #264]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b448:	23a8      	movs	r3, #168	; 0xa8
 800b44a:	58d4      	ldr	r4, [r2, r3]
 800b44c:	4d47      	ldr	r5, [pc, #284]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b44e:	402c      	ands	r4, r5
 800b450:	50d4      	str	r4, [r2, r3]
 800b452:	58d5      	ldr	r5, [r2, r3]
 800b454:	24e0      	movs	r4, #224	; 0xe0
 800b456:	0124      	lsls	r4, r4, #4
 800b458:	432c      	orrs	r4, r5
 800b45a:	50d4      	str	r4, [r2, r3]
 800b45c:	e5af      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b45e:	4a39      	ldr	r2, [pc, #228]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b460:	23a8      	movs	r3, #168	; 0xa8
 800b462:	58d4      	ldr	r4, [r2, r3]
 800b464:	250f      	movs	r5, #15
 800b466:	43ac      	bics	r4, r5
 800b468:	50d4      	str	r4, [r2, r3]
 800b46a:	58d4      	ldr	r4, [r2, r3]
 800b46c:	3d01      	subs	r5, #1
 800b46e:	432c      	orrs	r4, r5
 800b470:	50d4      	str	r4, [r2, r3]
 800b472:	e5a4      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b474:	4a33      	ldr	r2, [pc, #204]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b476:	23a8      	movs	r3, #168	; 0xa8
 800b478:	58d4      	ldr	r4, [r2, r3]
 800b47a:	4d3c      	ldr	r5, [pc, #240]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b47c:	402c      	ands	r4, r5
 800b47e:	50d4      	str	r4, [r2, r3]
 800b480:	58d5      	ldr	r5, [r2, r3]
 800b482:	24e0      	movs	r4, #224	; 0xe0
 800b484:	0124      	lsls	r4, r4, #4
 800b486:	432c      	orrs	r4, r5
 800b488:	50d4      	str	r4, [r2, r3]
 800b48a:	e598      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b48c:	4a2d      	ldr	r2, [pc, #180]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b48e:	23a8      	movs	r3, #168	; 0xa8
 800b490:	58d4      	ldr	r4, [r2, r3]
 800b492:	4d2d      	ldr	r5, [pc, #180]	; (800b548 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b494:	402c      	ands	r4, r5
 800b496:	50d4      	str	r4, [r2, r3]
 800b498:	58d5      	ldr	r5, [r2, r3]
 800b49a:	24e0      	movs	r4, #224	; 0xe0
 800b49c:	0324      	lsls	r4, r4, #12
 800b49e:	432c      	orrs	r4, r5
 800b4a0:	50d4      	str	r4, [r2, r3]
 800b4a2:	e58c      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b4a4:	4a27      	ldr	r2, [pc, #156]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b4a6:	23a8      	movs	r3, #168	; 0xa8
 800b4a8:	58d4      	ldr	r4, [r2, r3]
 800b4aa:	4d28      	ldr	r5, [pc, #160]	; (800b54c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b4ac:	402c      	ands	r4, r5
 800b4ae:	50d4      	str	r4, [r2, r3]
 800b4b0:	58d5      	ldr	r5, [r2, r3]
 800b4b2:	24e0      	movs	r4, #224	; 0xe0
 800b4b4:	0424      	lsls	r4, r4, #16
 800b4b6:	432c      	orrs	r4, r5
 800b4b8:	50d4      	str	r4, [r2, r3]
 800b4ba:	e580      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b4bc:	4a24      	ldr	r2, [pc, #144]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b4be:	23a8      	movs	r3, #168	; 0xa8
 800b4c0:	58d4      	ldr	r4, [r2, r3]
 800b4c2:	25f0      	movs	r5, #240	; 0xf0
 800b4c4:	43ac      	bics	r4, r5
 800b4c6:	50d4      	str	r4, [r2, r3]
 800b4c8:	58d4      	ldr	r4, [r2, r3]
 800b4ca:	3d10      	subs	r5, #16
 800b4cc:	432c      	orrs	r4, r5
 800b4ce:	50d4      	str	r4, [r2, r3]
 800b4d0:	e575      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b4d2:	4a1c      	ldr	r2, [pc, #112]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b4d4:	23a8      	movs	r3, #168	; 0xa8
 800b4d6:	58d5      	ldr	r5, [r2, r3]
 800b4d8:	260f      	movs	r6, #15
 800b4da:	43b5      	bics	r5, r6
 800b4dc:	50d5      	str	r5, [r2, r3]
 800b4de:	58d4      	ldr	r4, [r2, r3]
 800b4e0:	4334      	orrs	r4, r6
 800b4e2:	50d4      	str	r4, [r2, r3]
 800b4e4:	e56b      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b4e6:	4a17      	ldr	r2, [pc, #92]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b4e8:	23a8      	movs	r3, #168	; 0xa8
 800b4ea:	58d4      	ldr	r4, [r2, r3]
 800b4ec:	4d1f      	ldr	r5, [pc, #124]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b4ee:	402c      	ands	r4, r5
 800b4f0:	50d4      	str	r4, [r2, r3]
 800b4f2:	58d5      	ldr	r5, [r2, r3]
 800b4f4:	24f0      	movs	r4, #240	; 0xf0
 800b4f6:	0124      	lsls	r4, r4, #4
 800b4f8:	432c      	orrs	r4, r5
 800b4fa:	50d4      	str	r4, [r2, r3]
 800b4fc:	e55f      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b4fe:	4a11      	ldr	r2, [pc, #68]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b500:	23a8      	movs	r3, #168	; 0xa8
 800b502:	58d4      	ldr	r4, [r2, r3]
 800b504:	4d10      	ldr	r5, [pc, #64]	; (800b548 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b506:	402c      	ands	r4, r5
 800b508:	50d4      	str	r4, [r2, r3]
 800b50a:	58d5      	ldr	r5, [r2, r3]
 800b50c:	24f0      	movs	r4, #240	; 0xf0
 800b50e:	0324      	lsls	r4, r4, #12
 800b510:	432c      	orrs	r4, r5
 800b512:	50d4      	str	r4, [r2, r3]
 800b514:	e553      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b516:	4a0b      	ldr	r2, [pc, #44]	; (800b544 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b518:	23a8      	movs	r3, #168	; 0xa8
 800b51a:	58d4      	ldr	r4, [r2, r3]
 800b51c:	4d0b      	ldr	r5, [pc, #44]	; (800b54c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b51e:	402c      	ands	r4, r5
 800b520:	50d4      	str	r4, [r2, r3]
 800b522:	58d5      	ldr	r5, [r2, r3]
 800b524:	24f0      	movs	r4, #240	; 0xf0
 800b526:	0424      	lsls	r4, r4, #16
 800b528:	432c      	orrs	r4, r5
 800b52a:	50d4      	str	r4, [r2, r3]
 800b52c:	e547      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b52e:	4a08      	ldr	r2, [pc, #32]	; (800b550 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b530:	23a8      	movs	r3, #168	; 0xa8
 800b532:	58d5      	ldr	r5, [r2, r3]
 800b534:	26f0      	movs	r6, #240	; 0xf0
 800b536:	43b5      	bics	r5, r6
 800b538:	50d5      	str	r5, [r2, r3]
 800b53a:	58d4      	ldr	r4, [r2, r3]
 800b53c:	4334      	orrs	r4, r6
 800b53e:	50d4      	str	r4, [r2, r3]
 800b540:	e53d      	b.n	800afbe <RemapAndLinkDMAtoUARTRx+0xae>
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	40020000 	.word	0x40020000
 800b548:	fff0ffff 	.word	0xfff0ffff
 800b54c:	ff0fffff 	.word	0xff0fffff
 800b550:	40020400 	.word	0x40020400
 800b554:	40020008 	.word	0x40020008
 800b558:	40020030 	.word	0x40020030
 800b55c:	40020058 	.word	0x40020058
 800b560:	4002006c 	.word	0x4002006c
 800b564:	4002041c 	.word	0x4002041c
 800b568:	40020430 	.word	0x40020430
 800b56c:	fffff0ff 	.word	0xfffff0ff

0800b570 <DMA_MSG_RX_Setup>:
{	
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	0004      	movs	r4, r0
 800b574:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b576:	f7ff fccb 	bl	800af10 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b57a:	2100      	movs	r1, #0
 800b57c:	0028      	movs	r0, r5
 800b57e:	f7ff fc0d 	bl	800ad9c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800b582:	0020      	movs	r0, r4
 800b584:	f7ff fadc 	bl	800ab40 <GetPort>
 800b588:	1e41      	subs	r1, r0, #1
 800b58a:	0189      	lsls	r1, r1, #6
 800b58c:	4803      	ldr	r0, [pc, #12]	; (800b59c <DMA_MSG_RX_Setup+0x2c>)
 800b58e:	1809      	adds	r1, r1, r0
 800b590:	2240      	movs	r2, #64	; 0x40
 800b592:	0020      	movs	r0, r4
 800b594:	f005 fe74 	bl	8011280 <HAL_UART_Receive_DMA>
}
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	46c0      	nop			; (mov r8, r8)
 800b59c:	200012b4 	.word	0x200012b4

0800b5a0 <SetupMessagingRxDMAs>:
{	
 800b5a0:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	; (800b610 <SetupMessagingRxDMAs+0x70>)
 800b5a4:	785b      	ldrb	r3, [r3, #1]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d014      	beq.n	800b5d4 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800b5aa:	4b19      	ldr	r3, [pc, #100]	; (800b610 <SetupMessagingRxDMAs+0x70>)
 800b5ac:	789b      	ldrb	r3, [r3, #2]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d015      	beq.n	800b5de <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800b5b2:	4b17      	ldr	r3, [pc, #92]	; (800b610 <SetupMessagingRxDMAs+0x70>)
 800b5b4:	78db      	ldrb	r3, [r3, #3]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d016      	beq.n	800b5e8 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800b5ba:	4b15      	ldr	r3, [pc, #84]	; (800b610 <SetupMessagingRxDMAs+0x70>)
 800b5bc:	791b      	ldrb	r3, [r3, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d017      	beq.n	800b5f2 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800b5c2:	4b13      	ldr	r3, [pc, #76]	; (800b610 <SetupMessagingRxDMAs+0x70>)
 800b5c4:	795b      	ldrb	r3, [r3, #5]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d018      	beq.n	800b5fc <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800b5ca:	4b11      	ldr	r3, [pc, #68]	; (800b610 <SetupMessagingRxDMAs+0x70>)
 800b5cc:	799b      	ldrb	r3, [r3, #6]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d019      	beq.n	800b606 <SetupMessagingRxDMAs+0x66>
}
 800b5d2:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b5d4:	490f      	ldr	r1, [pc, #60]	; (800b614 <SetupMessagingRxDMAs+0x74>)
 800b5d6:	4810      	ldr	r0, [pc, #64]	; (800b618 <SetupMessagingRxDMAs+0x78>)
 800b5d8:	f7ff ffca 	bl	800b570 <DMA_MSG_RX_Setup>
 800b5dc:	e7e5      	b.n	800b5aa <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b5de:	490f      	ldr	r1, [pc, #60]	; (800b61c <SetupMessagingRxDMAs+0x7c>)
 800b5e0:	480f      	ldr	r0, [pc, #60]	; (800b620 <SetupMessagingRxDMAs+0x80>)
 800b5e2:	f7ff ffc5 	bl	800b570 <DMA_MSG_RX_Setup>
 800b5e6:	e7e4      	b.n	800b5b2 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b5e8:	490e      	ldr	r1, [pc, #56]	; (800b624 <SetupMessagingRxDMAs+0x84>)
 800b5ea:	480f      	ldr	r0, [pc, #60]	; (800b628 <SetupMessagingRxDMAs+0x88>)
 800b5ec:	f7ff ffc0 	bl	800b570 <DMA_MSG_RX_Setup>
 800b5f0:	e7e3      	b.n	800b5ba <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b5f2:	490e      	ldr	r1, [pc, #56]	; (800b62c <SetupMessagingRxDMAs+0x8c>)
 800b5f4:	480e      	ldr	r0, [pc, #56]	; (800b630 <SetupMessagingRxDMAs+0x90>)
 800b5f6:	f7ff ffbb 	bl	800b570 <DMA_MSG_RX_Setup>
 800b5fa:	e7e2      	b.n	800b5c2 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b5fc:	490d      	ldr	r1, [pc, #52]	; (800b634 <SetupMessagingRxDMAs+0x94>)
 800b5fe:	480e      	ldr	r0, [pc, #56]	; (800b638 <SetupMessagingRxDMAs+0x98>)
 800b600:	f7ff ffb6 	bl	800b570 <DMA_MSG_RX_Setup>
 800b604:	e7e1      	b.n	800b5ca <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800b606:	490d      	ldr	r1, [pc, #52]	; (800b63c <SetupMessagingRxDMAs+0x9c>)
 800b608:	480d      	ldr	r0, [pc, #52]	; (800b640 <SetupMessagingRxDMAs+0xa0>)
 800b60a:	f7ff ffb1 	bl	800b570 <DMA_MSG_RX_Setup>
}
 800b60e:	e7e0      	b.n	800b5d2 <SetupMessagingRxDMAs+0x32>
 800b610:	200010e0 	.word	0x200010e0
 800b614:	20001718 	.word	0x20001718
 800b618:	20006be8 	.word	0x20006be8
 800b61c:	20001750 	.word	0x20001750
 800b620:	20006c5c 	.word	0x20006c5c
 800b624:	20001788 	.word	0x20001788
 800b628:	20006b78 	.word	0x20006b78
 800b62c:	200017c0 	.word	0x200017c0
 800b630:	20006a18 	.word	0x20006a18
 800b634:	200017f8 	.word	0x200017f8
 800b638:	20006a8c 	.word	0x20006a8c
 800b63c:	20001830 	.word	0x20001830
 800b640:	20006afc 	.word	0x20006afc

0800b644 <DMA_STREAM_Setup>:
{	
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	0005      	movs	r5, r0
 800b648:	000f      	movs	r7, r1
 800b64a:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b64c:	f7ff fa78 	bl	800ab40 <GetPort>
	hDMA = &streamDMA[port-1];
 800b650:	3801      	subs	r0, #1
 800b652:	00c4      	lsls	r4, r0, #3
 800b654:	1a24      	subs	r4, r4, r0
 800b656:	00e4      	lsls	r4, r4, #3
 800b658:	4809      	ldr	r0, [pc, #36]	; (800b680 <DMA_STREAM_Setup+0x3c>)
 800b65a:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b65c:	0021      	movs	r1, r4
 800b65e:	0028      	movs	r0, r5
 800b660:	f7ff fc56 	bl	800af10 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b664:	2101      	movs	r1, #1
 800b666:	0020      	movs	r0, r4
 800b668:	f7ff fb98 	bl	800ad9c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b66c:	2369      	movs	r3, #105	; 0x69
 800b66e:	2201      	movs	r2, #1
 800b670:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	3128      	adds	r1, #40	; 0x28
 800b676:	0032      	movs	r2, r6
 800b678:	0028      	movs	r0, r5
 800b67a:	f005 fe01 	bl	8011280 <HAL_UART_Receive_DMA>
}
 800b67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b680:	20001910 	.word	0x20001910

0800b684 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b684:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b686:	6803      	ldr	r3, [r0, #0]
 800b688:	4ac3      	ldr	r2, [pc, #780]	; (800b998 <RemapAndLinkDMAtoUARTTx+0x314>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d03e      	beq.n	800b70c <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b68e:	4ac3      	ldr	r2, [pc, #780]	; (800b99c <RemapAndLinkDMAtoUARTTx+0x318>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d100      	bne.n	800b696 <RemapAndLinkDMAtoUARTTx+0x12>
 800b694:	e096      	b.n	800b7c4 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b696:	4ac2      	ldr	r2, [pc, #776]	; (800b9a0 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d100      	bne.n	800b69e <RemapAndLinkDMAtoUARTTx+0x1a>
 800b69c:	e0eb      	b.n	800b876 <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800b69e:	4ac1      	ldr	r2, [pc, #772]	; (800b9a4 <RemapAndLinkDMAtoUARTTx+0x320>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d100      	bne.n	800b6a6 <RemapAndLinkDMAtoUARTTx+0x22>
 800b6a4:	e141      	b.n	800b92a <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800b6a6:	4ac0      	ldr	r2, [pc, #768]	; (800b9a8 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d100      	bne.n	800b6ae <RemapAndLinkDMAtoUARTTx+0x2a>
 800b6ac:	e1bd      	b.n	800ba2a <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800b6ae:	4abf      	ldr	r2, [pc, #764]	; (800b9ac <RemapAndLinkDMAtoUARTTx+0x328>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d100      	bne.n	800b6b6 <RemapAndLinkDMAtoUARTTx+0x32>
 800b6b4:	e213      	b.n	800bade <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800b6b6:	4abe      	ldr	r2, [pc, #760]	; (800b9b0 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d100      	bne.n	800b6be <RemapAndLinkDMAtoUARTTx+0x3a>
 800b6bc:	e269      	b.n	800bb92 <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800b6be:	4abd      	ldr	r2, [pc, #756]	; (800b9b4 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d136      	bne.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
 800b6c4:	680b      	ldr	r3, [r1, #0]
 800b6c6:	4abc      	ldr	r2, [pc, #752]	; (800b9b8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <RemapAndLinkDMAtoUARTTx+0x4a>
 800b6cc:	e2bb      	b.n	800bc46 <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800b6ce:	4abb      	ldr	r2, [pc, #748]	; (800b9bc <RemapAndLinkDMAtoUARTTx+0x338>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d100      	bne.n	800b6d6 <RemapAndLinkDMAtoUARTTx+0x52>
 800b6d4:	e2c1      	b.n	800bc5a <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800b6d6:	4aba      	ldr	r2, [pc, #744]	; (800b9c0 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d100      	bne.n	800b6de <RemapAndLinkDMAtoUARTTx+0x5a>
 800b6dc:	e2c9      	b.n	800bc72 <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800b6de:	4ab9      	ldr	r2, [pc, #740]	; (800b9c4 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d100      	bne.n	800b6e6 <RemapAndLinkDMAtoUARTTx+0x62>
 800b6e4:	e2d1      	b.n	800bc8a <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800b6e6:	4ab8      	ldr	r2, [pc, #736]	; (800b9c8 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d100      	bne.n	800b6ee <RemapAndLinkDMAtoUARTTx+0x6a>
 800b6ec:	e2d7      	b.n	800bc9e <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800b6ee:	4ab7      	ldr	r2, [pc, #732]	; (800b9cc <RemapAndLinkDMAtoUARTTx+0x348>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d11e      	bne.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800b6f4:	4ab6      	ldr	r2, [pc, #728]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b6f6:	23a8      	movs	r3, #168	; 0xa8
 800b6f8:	58d4      	ldr	r4, [r2, r3]
 800b6fa:	4db6      	ldr	r5, [pc, #728]	; (800b9d4 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b6fc:	402c      	ands	r4, r5
 800b6fe:	50d4      	str	r4, [r2, r3]
 800b700:	58d5      	ldr	r5, [r2, r3]
 800b702:	24f0      	movs	r4, #240	; 0xf0
 800b704:	0324      	lsls	r4, r4, #12
 800b706:	432c      	orrs	r4, r5
 800b708:	50d4      	str	r4, [r2, r3]
 800b70a:	e012      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b70c:	680b      	ldr	r3, [r1, #0]
 800b70e:	4aaa      	ldr	r2, [pc, #680]	; (800b9b8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d011      	beq.n	800b738 <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800b714:	4aa9      	ldr	r2, [pc, #676]	; (800b9bc <RemapAndLinkDMAtoUARTTx+0x338>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d019      	beq.n	800b74e <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800b71a:	4aa9      	ldr	r2, [pc, #676]	; (800b9c0 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d022      	beq.n	800b766 <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800b720:	4aa8      	ldr	r2, [pc, #672]	; (800b9c4 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d02b      	beq.n	800b77e <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800b726:	4aa8      	ldr	r2, [pc, #672]	; (800b9c8 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d033      	beq.n	800b794 <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800b72c:	4aa7      	ldr	r2, [pc, #668]	; (800b9cc <RemapAndLinkDMAtoUARTTx+0x348>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d03c      	beq.n	800b7ac <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800b732:	6601      	str	r1, [r0, #96]	; 0x60
 800b734:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b736:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800b738:	4aa7      	ldr	r2, [pc, #668]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b73a:	23a8      	movs	r3, #168	; 0xa8
 800b73c:	58d4      	ldr	r4, [r2, r3]
 800b73e:	25f0      	movs	r5, #240	; 0xf0
 800b740:	43ac      	bics	r4, r5
 800b742:	50d4      	str	r4, [r2, r3]
 800b744:	58d4      	ldr	r4, [r2, r3]
 800b746:	3d70      	subs	r5, #112	; 0x70
 800b748:	432c      	orrs	r4, r5
 800b74a:	50d4      	str	r4, [r2, r3]
 800b74c:	e7f1      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800b74e:	4aa2      	ldr	r2, [pc, #648]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b750:	23a8      	movs	r3, #168	; 0xa8
 800b752:	58d4      	ldr	r4, [r2, r3]
 800b754:	4da1      	ldr	r5, [pc, #644]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b756:	402c      	ands	r4, r5
 800b758:	50d4      	str	r4, [r2, r3]
 800b75a:	58d5      	ldr	r5, [r2, r3]
 800b75c:	2480      	movs	r4, #128	; 0x80
 800b75e:	0224      	lsls	r4, r4, #8
 800b760:	432c      	orrs	r4, r5
 800b762:	50d4      	str	r4, [r2, r3]
 800b764:	e7e5      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800b766:	4a9c      	ldr	r2, [pc, #624]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b768:	23a8      	movs	r3, #168	; 0xa8
 800b76a:	58d4      	ldr	r4, [r2, r3]
 800b76c:	4d9c      	ldr	r5, [pc, #624]	; (800b9e0 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800b76e:	402c      	ands	r4, r5
 800b770:	50d4      	str	r4, [r2, r3]
 800b772:	58d5      	ldr	r5, [r2, r3]
 800b774:	2480      	movs	r4, #128	; 0x80
 800b776:	0524      	lsls	r4, r4, #20
 800b778:	432c      	orrs	r4, r5
 800b77a:	50d4      	str	r4, [r2, r3]
 800b77c:	e7d9      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800b77e:	4a94      	ldr	r2, [pc, #592]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b780:	23a8      	movs	r3, #168	; 0xa8
 800b782:	58d4      	ldr	r4, [r2, r3]
 800b784:	250f      	movs	r5, #15
 800b786:	43ac      	bics	r4, r5
 800b788:	50d4      	str	r4, [r2, r3]
 800b78a:	58d4      	ldr	r4, [r2, r3]
 800b78c:	3d07      	subs	r5, #7
 800b78e:	432c      	orrs	r4, r5
 800b790:	50d4      	str	r4, [r2, r3]
 800b792:	e7ce      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800b794:	4a8e      	ldr	r2, [pc, #568]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b796:	23a8      	movs	r3, #168	; 0xa8
 800b798:	58d4      	ldr	r4, [r2, r3]
 800b79a:	4d90      	ldr	r5, [pc, #576]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b79c:	402c      	ands	r4, r5
 800b79e:	50d4      	str	r4, [r2, r3]
 800b7a0:	58d5      	ldr	r5, [r2, r3]
 800b7a2:	2480      	movs	r4, #128	; 0x80
 800b7a4:	0224      	lsls	r4, r4, #8
 800b7a6:	432c      	orrs	r4, r5
 800b7a8:	50d4      	str	r4, [r2, r3]
 800b7aa:	e7c2      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800b7ac:	4a88      	ldr	r2, [pc, #544]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b7ae:	23a8      	movs	r3, #168	; 0xa8
 800b7b0:	58d4      	ldr	r4, [r2, r3]
 800b7b2:	4d88      	ldr	r5, [pc, #544]	; (800b9d4 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b7b4:	402c      	ands	r4, r5
 800b7b6:	50d4      	str	r4, [r2, r3]
 800b7b8:	58d5      	ldr	r5, [r2, r3]
 800b7ba:	2480      	movs	r4, #128	; 0x80
 800b7bc:	0324      	lsls	r4, r4, #12
 800b7be:	432c      	orrs	r4, r5
 800b7c0:	50d4      	str	r4, [r2, r3]
 800b7c2:	e7b6      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b7c4:	680b      	ldr	r3, [r1, #0]
 800b7c6:	4a7c      	ldr	r2, [pc, #496]	; (800b9b8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d01a      	beq.n	800b802 <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800b7cc:	4a7b      	ldr	r2, [pc, #492]	; (800b9bc <RemapAndLinkDMAtoUARTTx+0x338>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d022      	beq.n	800b818 <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800b7d2:	4a7b      	ldr	r2, [pc, #492]	; (800b9c0 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d02b      	beq.n	800b830 <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800b7d8:	4a7a      	ldr	r2, [pc, #488]	; (800b9c4 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d034      	beq.n	800b848 <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800b7de:	4a7a      	ldr	r2, [pc, #488]	; (800b9c8 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d03c      	beq.n	800b85e <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800b7e4:	4a79      	ldr	r2, [pc, #484]	; (800b9cc <RemapAndLinkDMAtoUARTTx+0x348>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d1a3      	bne.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800b7ea:	4a79      	ldr	r2, [pc, #484]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b7ec:	23a8      	movs	r3, #168	; 0xa8
 800b7ee:	58d4      	ldr	r4, [r2, r3]
 800b7f0:	4d78      	ldr	r5, [pc, #480]	; (800b9d4 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b7f2:	402c      	ands	r4, r5
 800b7f4:	50d4      	str	r4, [r2, r3]
 800b7f6:	58d5      	ldr	r5, [r2, r3]
 800b7f8:	2490      	movs	r4, #144	; 0x90
 800b7fa:	0324      	lsls	r4, r4, #12
 800b7fc:	432c      	orrs	r4, r5
 800b7fe:	50d4      	str	r4, [r2, r3]
 800b800:	e797      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800b802:	4a75      	ldr	r2, [pc, #468]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b804:	23a8      	movs	r3, #168	; 0xa8
 800b806:	58d4      	ldr	r4, [r2, r3]
 800b808:	25f0      	movs	r5, #240	; 0xf0
 800b80a:	43ac      	bics	r4, r5
 800b80c:	50d4      	str	r4, [r2, r3]
 800b80e:	58d4      	ldr	r4, [r2, r3]
 800b810:	3d60      	subs	r5, #96	; 0x60
 800b812:	432c      	orrs	r4, r5
 800b814:	50d4      	str	r4, [r2, r3]
 800b816:	e78c      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800b818:	4a6f      	ldr	r2, [pc, #444]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b81a:	23a8      	movs	r3, #168	; 0xa8
 800b81c:	58d4      	ldr	r4, [r2, r3]
 800b81e:	4d6f      	ldr	r5, [pc, #444]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b820:	402c      	ands	r4, r5
 800b822:	50d4      	str	r4, [r2, r3]
 800b824:	58d5      	ldr	r5, [r2, r3]
 800b826:	2490      	movs	r4, #144	; 0x90
 800b828:	0224      	lsls	r4, r4, #8
 800b82a:	432c      	orrs	r4, r5
 800b82c:	50d4      	str	r4, [r2, r3]
 800b82e:	e780      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800b830:	4a69      	ldr	r2, [pc, #420]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b832:	23a8      	movs	r3, #168	; 0xa8
 800b834:	58d4      	ldr	r4, [r2, r3]
 800b836:	4d6a      	ldr	r5, [pc, #424]	; (800b9e0 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800b838:	402c      	ands	r4, r5
 800b83a:	50d4      	str	r4, [r2, r3]
 800b83c:	58d5      	ldr	r5, [r2, r3]
 800b83e:	2490      	movs	r4, #144	; 0x90
 800b840:	0524      	lsls	r4, r4, #20
 800b842:	432c      	orrs	r4, r5
 800b844:	50d4      	str	r4, [r2, r3]
 800b846:	e774      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800b848:	4a61      	ldr	r2, [pc, #388]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b84a:	23a8      	movs	r3, #168	; 0xa8
 800b84c:	58d4      	ldr	r4, [r2, r3]
 800b84e:	250f      	movs	r5, #15
 800b850:	43ac      	bics	r4, r5
 800b852:	50d4      	str	r4, [r2, r3]
 800b854:	58d4      	ldr	r4, [r2, r3]
 800b856:	3d06      	subs	r5, #6
 800b858:	432c      	orrs	r4, r5
 800b85a:	50d4      	str	r4, [r2, r3]
 800b85c:	e769      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800b85e:	4a5c      	ldr	r2, [pc, #368]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b860:	23a8      	movs	r3, #168	; 0xa8
 800b862:	58d4      	ldr	r4, [r2, r3]
 800b864:	4d5d      	ldr	r5, [pc, #372]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b866:	402c      	ands	r4, r5
 800b868:	50d4      	str	r4, [r2, r3]
 800b86a:	58d5      	ldr	r5, [r2, r3]
 800b86c:	2490      	movs	r4, #144	; 0x90
 800b86e:	0224      	lsls	r4, r4, #8
 800b870:	432c      	orrs	r4, r5
 800b872:	50d4      	str	r4, [r2, r3]
 800b874:	e75d      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b876:	680b      	ldr	r3, [r1, #0]
 800b878:	4a4f      	ldr	r2, [pc, #316]	; (800b9b8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d01b      	beq.n	800b8b6 <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800b87e:	4a4f      	ldr	r2, [pc, #316]	; (800b9bc <RemapAndLinkDMAtoUARTTx+0x338>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d023      	beq.n	800b8cc <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800b884:	4a4e      	ldr	r2, [pc, #312]	; (800b9c0 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d02c      	beq.n	800b8e4 <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800b88a:	4a4e      	ldr	r2, [pc, #312]	; (800b9c4 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d035      	beq.n	800b8fc <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800b890:	4a4d      	ldr	r2, [pc, #308]	; (800b9c8 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d03d      	beq.n	800b912 <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800b896:	4a4d      	ldr	r2, [pc, #308]	; (800b9cc <RemapAndLinkDMAtoUARTTx+0x348>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d000      	beq.n	800b89e <RemapAndLinkDMAtoUARTTx+0x21a>
 800b89c:	e749      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800b89e:	4a4c      	ldr	r2, [pc, #304]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b8a0:	23a8      	movs	r3, #168	; 0xa8
 800b8a2:	58d4      	ldr	r4, [r2, r3]
 800b8a4:	4d4b      	ldr	r5, [pc, #300]	; (800b9d4 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b8a6:	402c      	ands	r4, r5
 800b8a8:	50d4      	str	r4, [r2, r3]
 800b8aa:	58d5      	ldr	r5, [r2, r3]
 800b8ac:	24a0      	movs	r4, #160	; 0xa0
 800b8ae:	0324      	lsls	r4, r4, #12
 800b8b0:	432c      	orrs	r4, r5
 800b8b2:	50d4      	str	r4, [r2, r3]
 800b8b4:	e73d      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800b8b6:	4a48      	ldr	r2, [pc, #288]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b8b8:	23a8      	movs	r3, #168	; 0xa8
 800b8ba:	58d4      	ldr	r4, [r2, r3]
 800b8bc:	25f0      	movs	r5, #240	; 0xf0
 800b8be:	43ac      	bics	r4, r5
 800b8c0:	50d4      	str	r4, [r2, r3]
 800b8c2:	58d4      	ldr	r4, [r2, r3]
 800b8c4:	3d50      	subs	r5, #80	; 0x50
 800b8c6:	432c      	orrs	r4, r5
 800b8c8:	50d4      	str	r4, [r2, r3]
 800b8ca:	e732      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800b8cc:	4a42      	ldr	r2, [pc, #264]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b8ce:	23a8      	movs	r3, #168	; 0xa8
 800b8d0:	58d4      	ldr	r4, [r2, r3]
 800b8d2:	4d42      	ldr	r5, [pc, #264]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b8d4:	402c      	ands	r4, r5
 800b8d6:	50d4      	str	r4, [r2, r3]
 800b8d8:	58d5      	ldr	r5, [r2, r3]
 800b8da:	24a0      	movs	r4, #160	; 0xa0
 800b8dc:	0224      	lsls	r4, r4, #8
 800b8de:	432c      	orrs	r4, r5
 800b8e0:	50d4      	str	r4, [r2, r3]
 800b8e2:	e726      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800b8e4:	4a3c      	ldr	r2, [pc, #240]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b8e6:	23a8      	movs	r3, #168	; 0xa8
 800b8e8:	58d4      	ldr	r4, [r2, r3]
 800b8ea:	4d3d      	ldr	r5, [pc, #244]	; (800b9e0 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800b8ec:	402c      	ands	r4, r5
 800b8ee:	50d4      	str	r4, [r2, r3]
 800b8f0:	58d5      	ldr	r5, [r2, r3]
 800b8f2:	24a0      	movs	r4, #160	; 0xa0
 800b8f4:	0524      	lsls	r4, r4, #20
 800b8f6:	432c      	orrs	r4, r5
 800b8f8:	50d4      	str	r4, [r2, r3]
 800b8fa:	e71a      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800b8fc:	4a34      	ldr	r2, [pc, #208]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b8fe:	23a8      	movs	r3, #168	; 0xa8
 800b900:	58d4      	ldr	r4, [r2, r3]
 800b902:	250f      	movs	r5, #15
 800b904:	43ac      	bics	r4, r5
 800b906:	50d4      	str	r4, [r2, r3]
 800b908:	58d4      	ldr	r4, [r2, r3]
 800b90a:	3d05      	subs	r5, #5
 800b90c:	432c      	orrs	r4, r5
 800b90e:	50d4      	str	r4, [r2, r3]
 800b910:	e70f      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800b912:	4a2f      	ldr	r2, [pc, #188]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b914:	23a8      	movs	r3, #168	; 0xa8
 800b916:	58d4      	ldr	r4, [r2, r3]
 800b918:	4d30      	ldr	r5, [pc, #192]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b91a:	402c      	ands	r4, r5
 800b91c:	50d4      	str	r4, [r2, r3]
 800b91e:	58d5      	ldr	r5, [r2, r3]
 800b920:	24a0      	movs	r4, #160	; 0xa0
 800b922:	0224      	lsls	r4, r4, #8
 800b924:	432c      	orrs	r4, r5
 800b926:	50d4      	str	r4, [r2, r3]
 800b928:	e703      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800b92a:	680b      	ldr	r3, [r1, #0]
 800b92c:	4a22      	ldr	r2, [pc, #136]	; (800b9b8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d01b      	beq.n	800b96a <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800b932:	4a22      	ldr	r2, [pc, #136]	; (800b9bc <RemapAndLinkDMAtoUARTTx+0x338>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d023      	beq.n	800b980 <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800b938:	4a21      	ldr	r2, [pc, #132]	; (800b9c0 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d052      	beq.n	800b9e4 <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800b93e:	4a21      	ldr	r2, [pc, #132]	; (800b9c4 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d05b      	beq.n	800b9fc <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800b944:	4a20      	ldr	r2, [pc, #128]	; (800b9c8 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d063      	beq.n	800ba12 <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800b94a:	4a20      	ldr	r2, [pc, #128]	; (800b9cc <RemapAndLinkDMAtoUARTTx+0x348>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d000      	beq.n	800b952 <RemapAndLinkDMAtoUARTTx+0x2ce>
 800b950:	e6ef      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800b952:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b954:	23a8      	movs	r3, #168	; 0xa8
 800b956:	58d4      	ldr	r4, [r2, r3]
 800b958:	4d1e      	ldr	r5, [pc, #120]	; (800b9d4 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b95a:	402c      	ands	r4, r5
 800b95c:	50d4      	str	r4, [r2, r3]
 800b95e:	58d5      	ldr	r5, [r2, r3]
 800b960:	24b0      	movs	r4, #176	; 0xb0
 800b962:	0324      	lsls	r4, r4, #12
 800b964:	432c      	orrs	r4, r5
 800b966:	50d4      	str	r4, [r2, r3]
 800b968:	e6e3      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800b96a:	4a1b      	ldr	r2, [pc, #108]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b96c:	23a8      	movs	r3, #168	; 0xa8
 800b96e:	58d4      	ldr	r4, [r2, r3]
 800b970:	25f0      	movs	r5, #240	; 0xf0
 800b972:	43ac      	bics	r4, r5
 800b974:	50d4      	str	r4, [r2, r3]
 800b976:	58d4      	ldr	r4, [r2, r3]
 800b978:	3d40      	subs	r5, #64	; 0x40
 800b97a:	432c      	orrs	r4, r5
 800b97c:	50d4      	str	r4, [r2, r3]
 800b97e:	e6d8      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800b980:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b982:	23a8      	movs	r3, #168	; 0xa8
 800b984:	58d4      	ldr	r4, [r2, r3]
 800b986:	4d15      	ldr	r5, [pc, #84]	; (800b9dc <RemapAndLinkDMAtoUARTTx+0x358>)
 800b988:	402c      	ands	r4, r5
 800b98a:	50d4      	str	r4, [r2, r3]
 800b98c:	58d5      	ldr	r5, [r2, r3]
 800b98e:	24b0      	movs	r4, #176	; 0xb0
 800b990:	0224      	lsls	r4, r4, #8
 800b992:	432c      	orrs	r4, r5
 800b994:	50d4      	str	r4, [r2, r3]
 800b996:	e6cc      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
 800b998:	40013800 	.word	0x40013800
 800b99c:	40004400 	.word	0x40004400
 800b9a0:	40004800 	.word	0x40004800
 800b9a4:	40004c00 	.word	0x40004c00
 800b9a8:	40005000 	.word	0x40005000
 800b9ac:	40011400 	.word	0x40011400
 800b9b0:	40011800 	.word	0x40011800
 800b9b4:	40011c00 	.word	0x40011c00
 800b9b8:	4002001c 	.word	0x4002001c
 800b9bc:	40020044 	.word	0x40020044
 800b9c0:	40020080 	.word	0x40020080
 800b9c4:	40020408 	.word	0x40020408
 800b9c8:	40020444 	.word	0x40020444
 800b9cc:	40020458 	.word	0x40020458
 800b9d0:	40020400 	.word	0x40020400
 800b9d4:	fff0ffff 	.word	0xfff0ffff
 800b9d8:	40020000 	.word	0x40020000
 800b9dc:	ffff0fff 	.word	0xffff0fff
 800b9e0:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800b9e4:	4ab4      	ldr	r2, [pc, #720]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b9e6:	23a8      	movs	r3, #168	; 0xa8
 800b9e8:	58d4      	ldr	r4, [r2, r3]
 800b9ea:	4db4      	ldr	r5, [pc, #720]	; (800bcbc <RemapAndLinkDMAtoUARTTx+0x638>)
 800b9ec:	402c      	ands	r4, r5
 800b9ee:	50d4      	str	r4, [r2, r3]
 800b9f0:	58d5      	ldr	r5, [r2, r3]
 800b9f2:	24b0      	movs	r4, #176	; 0xb0
 800b9f4:	0524      	lsls	r4, r4, #20
 800b9f6:	432c      	orrs	r4, r5
 800b9f8:	50d4      	str	r4, [r2, r3]
 800b9fa:	e69a      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800b9fc:	4ab0      	ldr	r2, [pc, #704]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b9fe:	23a8      	movs	r3, #168	; 0xa8
 800ba00:	58d4      	ldr	r4, [r2, r3]
 800ba02:	250f      	movs	r5, #15
 800ba04:	43ac      	bics	r4, r5
 800ba06:	50d4      	str	r4, [r2, r3]
 800ba08:	58d4      	ldr	r4, [r2, r3]
 800ba0a:	3d04      	subs	r5, #4
 800ba0c:	432c      	orrs	r4, r5
 800ba0e:	50d4      	str	r4, [r2, r3]
 800ba10:	e68f      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800ba12:	4aab      	ldr	r2, [pc, #684]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ba14:	23a8      	movs	r3, #168	; 0xa8
 800ba16:	58d4      	ldr	r4, [r2, r3]
 800ba18:	4daa      	ldr	r5, [pc, #680]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ba1a:	402c      	ands	r4, r5
 800ba1c:	50d4      	str	r4, [r2, r3]
 800ba1e:	58d5      	ldr	r5, [r2, r3]
 800ba20:	24b0      	movs	r4, #176	; 0xb0
 800ba22:	0224      	lsls	r4, r4, #8
 800ba24:	432c      	orrs	r4, r5
 800ba26:	50d4      	str	r4, [r2, r3]
 800ba28:	e683      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800ba2a:	680b      	ldr	r3, [r1, #0]
 800ba2c:	4aa6      	ldr	r2, [pc, #664]	; (800bcc8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d01b      	beq.n	800ba6a <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800ba32:	4aa6      	ldr	r2, [pc, #664]	; (800bccc <RemapAndLinkDMAtoUARTTx+0x648>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d023      	beq.n	800ba80 <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800ba38:	4aa5      	ldr	r2, [pc, #660]	; (800bcd0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d02c      	beq.n	800ba98 <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800ba3e:	4aa5      	ldr	r2, [pc, #660]	; (800bcd4 <RemapAndLinkDMAtoUARTTx+0x650>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d035      	beq.n	800bab0 <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800ba44:	4aa4      	ldr	r2, [pc, #656]	; (800bcd8 <RemapAndLinkDMAtoUARTTx+0x654>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d03d      	beq.n	800bac6 <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800ba4a:	4aa4      	ldr	r2, [pc, #656]	; (800bcdc <RemapAndLinkDMAtoUARTTx+0x658>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d000      	beq.n	800ba52 <RemapAndLinkDMAtoUARTTx+0x3ce>
 800ba50:	e66f      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800ba52:	4a9b      	ldr	r2, [pc, #620]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ba54:	23a8      	movs	r3, #168	; 0xa8
 800ba56:	58d4      	ldr	r4, [r2, r3]
 800ba58:	4da1      	ldr	r5, [pc, #644]	; (800bce0 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800ba5a:	402c      	ands	r4, r5
 800ba5c:	50d4      	str	r4, [r2, r3]
 800ba5e:	58d5      	ldr	r5, [r2, r3]
 800ba60:	24c0      	movs	r4, #192	; 0xc0
 800ba62:	0324      	lsls	r4, r4, #12
 800ba64:	432c      	orrs	r4, r5
 800ba66:	50d4      	str	r4, [r2, r3]
 800ba68:	e663      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800ba6a:	4a93      	ldr	r2, [pc, #588]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800ba6c:	23a8      	movs	r3, #168	; 0xa8
 800ba6e:	58d4      	ldr	r4, [r2, r3]
 800ba70:	25f0      	movs	r5, #240	; 0xf0
 800ba72:	43ac      	bics	r4, r5
 800ba74:	50d4      	str	r4, [r2, r3]
 800ba76:	58d4      	ldr	r4, [r2, r3]
 800ba78:	3d30      	subs	r5, #48	; 0x30
 800ba7a:	432c      	orrs	r4, r5
 800ba7c:	50d4      	str	r4, [r2, r3]
 800ba7e:	e658      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800ba80:	4a8d      	ldr	r2, [pc, #564]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800ba82:	23a8      	movs	r3, #168	; 0xa8
 800ba84:	58d4      	ldr	r4, [r2, r3]
 800ba86:	4d8f      	ldr	r5, [pc, #572]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ba88:	402c      	ands	r4, r5
 800ba8a:	50d4      	str	r4, [r2, r3]
 800ba8c:	58d5      	ldr	r5, [r2, r3]
 800ba8e:	24c0      	movs	r4, #192	; 0xc0
 800ba90:	0224      	lsls	r4, r4, #8
 800ba92:	432c      	orrs	r4, r5
 800ba94:	50d4      	str	r4, [r2, r3]
 800ba96:	e64c      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800ba98:	4a87      	ldr	r2, [pc, #540]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800ba9a:	23a8      	movs	r3, #168	; 0xa8
 800ba9c:	58d4      	ldr	r4, [r2, r3]
 800ba9e:	4d87      	ldr	r5, [pc, #540]	; (800bcbc <RemapAndLinkDMAtoUARTTx+0x638>)
 800baa0:	402c      	ands	r4, r5
 800baa2:	50d4      	str	r4, [r2, r3]
 800baa4:	58d5      	ldr	r5, [r2, r3]
 800baa6:	24c0      	movs	r4, #192	; 0xc0
 800baa8:	0524      	lsls	r4, r4, #20
 800baaa:	432c      	orrs	r4, r5
 800baac:	50d4      	str	r4, [r2, r3]
 800baae:	e640      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800bab0:	4a83      	ldr	r2, [pc, #524]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bab2:	23a8      	movs	r3, #168	; 0xa8
 800bab4:	58d4      	ldr	r4, [r2, r3]
 800bab6:	250f      	movs	r5, #15
 800bab8:	43ac      	bics	r4, r5
 800baba:	50d4      	str	r4, [r2, r3]
 800babc:	58d4      	ldr	r4, [r2, r3]
 800babe:	3d03      	subs	r5, #3
 800bac0:	432c      	orrs	r4, r5
 800bac2:	50d4      	str	r4, [r2, r3]
 800bac4:	e635      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800bac6:	4a7e      	ldr	r2, [pc, #504]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bac8:	23a8      	movs	r3, #168	; 0xa8
 800baca:	58d4      	ldr	r4, [r2, r3]
 800bacc:	4d7d      	ldr	r5, [pc, #500]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bace:	402c      	ands	r4, r5
 800bad0:	50d4      	str	r4, [r2, r3]
 800bad2:	58d5      	ldr	r5, [r2, r3]
 800bad4:	24c0      	movs	r4, #192	; 0xc0
 800bad6:	0224      	lsls	r4, r4, #8
 800bad8:	432c      	orrs	r4, r5
 800bada:	50d4      	str	r4, [r2, r3]
 800badc:	e629      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800bade:	680b      	ldr	r3, [r1, #0]
 800bae0:	4a79      	ldr	r2, [pc, #484]	; (800bcc8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d01b      	beq.n	800bb1e <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800bae6:	4a79      	ldr	r2, [pc, #484]	; (800bccc <RemapAndLinkDMAtoUARTTx+0x648>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d023      	beq.n	800bb34 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800baec:	4a78      	ldr	r2, [pc, #480]	; (800bcd0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d02c      	beq.n	800bb4c <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800baf2:	4a78      	ldr	r2, [pc, #480]	; (800bcd4 <RemapAndLinkDMAtoUARTTx+0x650>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d035      	beq.n	800bb64 <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800baf8:	4a77      	ldr	r2, [pc, #476]	; (800bcd8 <RemapAndLinkDMAtoUARTTx+0x654>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d03d      	beq.n	800bb7a <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800bafe:	4a77      	ldr	r2, [pc, #476]	; (800bcdc <RemapAndLinkDMAtoUARTTx+0x658>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d000      	beq.n	800bb06 <RemapAndLinkDMAtoUARTTx+0x482>
 800bb04:	e615      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800bb06:	4a6e      	ldr	r2, [pc, #440]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bb08:	23a8      	movs	r3, #168	; 0xa8
 800bb0a:	58d4      	ldr	r4, [r2, r3]
 800bb0c:	4d74      	ldr	r5, [pc, #464]	; (800bce0 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800bb0e:	402c      	ands	r4, r5
 800bb10:	50d4      	str	r4, [r2, r3]
 800bb12:	58d5      	ldr	r5, [r2, r3]
 800bb14:	24d0      	movs	r4, #208	; 0xd0
 800bb16:	0324      	lsls	r4, r4, #12
 800bb18:	432c      	orrs	r4, r5
 800bb1a:	50d4      	str	r4, [r2, r3]
 800bb1c:	e609      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800bb1e:	4a66      	ldr	r2, [pc, #408]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bb20:	23a8      	movs	r3, #168	; 0xa8
 800bb22:	58d4      	ldr	r4, [r2, r3]
 800bb24:	25f0      	movs	r5, #240	; 0xf0
 800bb26:	43ac      	bics	r4, r5
 800bb28:	50d4      	str	r4, [r2, r3]
 800bb2a:	58d4      	ldr	r4, [r2, r3]
 800bb2c:	3d20      	subs	r5, #32
 800bb2e:	432c      	orrs	r4, r5
 800bb30:	50d4      	str	r4, [r2, r3]
 800bb32:	e5fe      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800bb34:	4a60      	ldr	r2, [pc, #384]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bb36:	23a8      	movs	r3, #168	; 0xa8
 800bb38:	58d4      	ldr	r4, [r2, r3]
 800bb3a:	4d62      	ldr	r5, [pc, #392]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bb3c:	402c      	ands	r4, r5
 800bb3e:	50d4      	str	r4, [r2, r3]
 800bb40:	58d5      	ldr	r5, [r2, r3]
 800bb42:	24d0      	movs	r4, #208	; 0xd0
 800bb44:	0224      	lsls	r4, r4, #8
 800bb46:	432c      	orrs	r4, r5
 800bb48:	50d4      	str	r4, [r2, r3]
 800bb4a:	e5f2      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800bb4c:	4a5a      	ldr	r2, [pc, #360]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bb4e:	23a8      	movs	r3, #168	; 0xa8
 800bb50:	58d4      	ldr	r4, [r2, r3]
 800bb52:	4d5a      	ldr	r5, [pc, #360]	; (800bcbc <RemapAndLinkDMAtoUARTTx+0x638>)
 800bb54:	402c      	ands	r4, r5
 800bb56:	50d4      	str	r4, [r2, r3]
 800bb58:	58d5      	ldr	r5, [r2, r3]
 800bb5a:	24d0      	movs	r4, #208	; 0xd0
 800bb5c:	0524      	lsls	r4, r4, #20
 800bb5e:	432c      	orrs	r4, r5
 800bb60:	50d4      	str	r4, [r2, r3]
 800bb62:	e5e6      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800bb64:	4a56      	ldr	r2, [pc, #344]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bb66:	23a8      	movs	r3, #168	; 0xa8
 800bb68:	58d4      	ldr	r4, [r2, r3]
 800bb6a:	250f      	movs	r5, #15
 800bb6c:	43ac      	bics	r4, r5
 800bb6e:	50d4      	str	r4, [r2, r3]
 800bb70:	58d4      	ldr	r4, [r2, r3]
 800bb72:	3d02      	subs	r5, #2
 800bb74:	432c      	orrs	r4, r5
 800bb76:	50d4      	str	r4, [r2, r3]
 800bb78:	e5db      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800bb7a:	4a51      	ldr	r2, [pc, #324]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bb7c:	23a8      	movs	r3, #168	; 0xa8
 800bb7e:	58d4      	ldr	r4, [r2, r3]
 800bb80:	4d50      	ldr	r5, [pc, #320]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bb82:	402c      	ands	r4, r5
 800bb84:	50d4      	str	r4, [r2, r3]
 800bb86:	58d5      	ldr	r5, [r2, r3]
 800bb88:	24d0      	movs	r4, #208	; 0xd0
 800bb8a:	0224      	lsls	r4, r4, #8
 800bb8c:	432c      	orrs	r4, r5
 800bb8e:	50d4      	str	r4, [r2, r3]
 800bb90:	e5cf      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800bb92:	680b      	ldr	r3, [r1, #0]
 800bb94:	4a4c      	ldr	r2, [pc, #304]	; (800bcc8 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d01b      	beq.n	800bbd2 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800bb9a:	4a4c      	ldr	r2, [pc, #304]	; (800bccc <RemapAndLinkDMAtoUARTTx+0x648>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d023      	beq.n	800bbe8 <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800bba0:	4a4b      	ldr	r2, [pc, #300]	; (800bcd0 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d02c      	beq.n	800bc00 <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800bba6:	4a4b      	ldr	r2, [pc, #300]	; (800bcd4 <RemapAndLinkDMAtoUARTTx+0x650>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d035      	beq.n	800bc18 <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800bbac:	4a4a      	ldr	r2, [pc, #296]	; (800bcd8 <RemapAndLinkDMAtoUARTTx+0x654>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d03d      	beq.n	800bc2e <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800bbb2:	4a4a      	ldr	r2, [pc, #296]	; (800bcdc <RemapAndLinkDMAtoUARTTx+0x658>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d000      	beq.n	800bbba <RemapAndLinkDMAtoUARTTx+0x536>
 800bbb8:	e5bb      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800bbba:	4a41      	ldr	r2, [pc, #260]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bbbc:	23a8      	movs	r3, #168	; 0xa8
 800bbbe:	58d4      	ldr	r4, [r2, r3]
 800bbc0:	4d47      	ldr	r5, [pc, #284]	; (800bce0 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800bbc2:	402c      	ands	r4, r5
 800bbc4:	50d4      	str	r4, [r2, r3]
 800bbc6:	58d5      	ldr	r5, [r2, r3]
 800bbc8:	24e0      	movs	r4, #224	; 0xe0
 800bbca:	0324      	lsls	r4, r4, #12
 800bbcc:	432c      	orrs	r4, r5
 800bbce:	50d4      	str	r4, [r2, r3]
 800bbd0:	e5af      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800bbd2:	4a39      	ldr	r2, [pc, #228]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bbd4:	23a8      	movs	r3, #168	; 0xa8
 800bbd6:	58d4      	ldr	r4, [r2, r3]
 800bbd8:	25f0      	movs	r5, #240	; 0xf0
 800bbda:	43ac      	bics	r4, r5
 800bbdc:	50d4      	str	r4, [r2, r3]
 800bbde:	58d4      	ldr	r4, [r2, r3]
 800bbe0:	3d10      	subs	r5, #16
 800bbe2:	432c      	orrs	r4, r5
 800bbe4:	50d4      	str	r4, [r2, r3]
 800bbe6:	e5a4      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800bbe8:	4a33      	ldr	r2, [pc, #204]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bbea:	23a8      	movs	r3, #168	; 0xa8
 800bbec:	58d4      	ldr	r4, [r2, r3]
 800bbee:	4d35      	ldr	r5, [pc, #212]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bbf0:	402c      	ands	r4, r5
 800bbf2:	50d4      	str	r4, [r2, r3]
 800bbf4:	58d5      	ldr	r5, [r2, r3]
 800bbf6:	24e0      	movs	r4, #224	; 0xe0
 800bbf8:	0224      	lsls	r4, r4, #8
 800bbfa:	432c      	orrs	r4, r5
 800bbfc:	50d4      	str	r4, [r2, r3]
 800bbfe:	e598      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800bc00:	4a2d      	ldr	r2, [pc, #180]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bc02:	23a8      	movs	r3, #168	; 0xa8
 800bc04:	58d4      	ldr	r4, [r2, r3]
 800bc06:	4d2d      	ldr	r5, [pc, #180]	; (800bcbc <RemapAndLinkDMAtoUARTTx+0x638>)
 800bc08:	402c      	ands	r4, r5
 800bc0a:	50d4      	str	r4, [r2, r3]
 800bc0c:	58d5      	ldr	r5, [r2, r3]
 800bc0e:	24e0      	movs	r4, #224	; 0xe0
 800bc10:	0524      	lsls	r4, r4, #20
 800bc12:	432c      	orrs	r4, r5
 800bc14:	50d4      	str	r4, [r2, r3]
 800bc16:	e58c      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800bc18:	4a29      	ldr	r2, [pc, #164]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bc1a:	23a8      	movs	r3, #168	; 0xa8
 800bc1c:	58d4      	ldr	r4, [r2, r3]
 800bc1e:	250f      	movs	r5, #15
 800bc20:	43ac      	bics	r4, r5
 800bc22:	50d4      	str	r4, [r2, r3]
 800bc24:	58d4      	ldr	r4, [r2, r3]
 800bc26:	3d01      	subs	r5, #1
 800bc28:	432c      	orrs	r4, r5
 800bc2a:	50d4      	str	r4, [r2, r3]
 800bc2c:	e581      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800bc2e:	4a24      	ldr	r2, [pc, #144]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bc30:	23a8      	movs	r3, #168	; 0xa8
 800bc32:	58d4      	ldr	r4, [r2, r3]
 800bc34:	4d23      	ldr	r5, [pc, #140]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bc36:	402c      	ands	r4, r5
 800bc38:	50d4      	str	r4, [r2, r3]
 800bc3a:	58d5      	ldr	r5, [r2, r3]
 800bc3c:	24e0      	movs	r4, #224	; 0xe0
 800bc3e:	0224      	lsls	r4, r4, #8
 800bc40:	432c      	orrs	r4, r5
 800bc42:	50d4      	str	r4, [r2, r3]
 800bc44:	e575      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800bc46:	4a1c      	ldr	r2, [pc, #112]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bc48:	23a8      	movs	r3, #168	; 0xa8
 800bc4a:	58d5      	ldr	r5, [r2, r3]
 800bc4c:	26f0      	movs	r6, #240	; 0xf0
 800bc4e:	43b5      	bics	r5, r6
 800bc50:	50d5      	str	r5, [r2, r3]
 800bc52:	58d4      	ldr	r4, [r2, r3]
 800bc54:	4334      	orrs	r4, r6
 800bc56:	50d4      	str	r4, [r2, r3]
 800bc58:	e56b      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800bc5a:	4a17      	ldr	r2, [pc, #92]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bc5c:	23a8      	movs	r3, #168	; 0xa8
 800bc5e:	58d4      	ldr	r4, [r2, r3]
 800bc60:	4d18      	ldr	r5, [pc, #96]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bc62:	402c      	ands	r4, r5
 800bc64:	50d4      	str	r4, [r2, r3]
 800bc66:	58d5      	ldr	r5, [r2, r3]
 800bc68:	24f0      	movs	r4, #240	; 0xf0
 800bc6a:	0224      	lsls	r4, r4, #8
 800bc6c:	432c      	orrs	r4, r5
 800bc6e:	50d4      	str	r4, [r2, r3]
 800bc70:	e55f      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800bc72:	4a11      	ldr	r2, [pc, #68]	; (800bcb8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bc74:	23a8      	movs	r3, #168	; 0xa8
 800bc76:	58d4      	ldr	r4, [r2, r3]
 800bc78:	4d10      	ldr	r5, [pc, #64]	; (800bcbc <RemapAndLinkDMAtoUARTTx+0x638>)
 800bc7a:	402c      	ands	r4, r5
 800bc7c:	50d4      	str	r4, [r2, r3]
 800bc7e:	58d5      	ldr	r5, [r2, r3]
 800bc80:	24f0      	movs	r4, #240	; 0xf0
 800bc82:	0524      	lsls	r4, r4, #20
 800bc84:	432c      	orrs	r4, r5
 800bc86:	50d4      	str	r4, [r2, r3]
 800bc88:	e553      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800bc8a:	4a0d      	ldr	r2, [pc, #52]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bc8c:	23a8      	movs	r3, #168	; 0xa8
 800bc8e:	58d5      	ldr	r5, [r2, r3]
 800bc90:	260f      	movs	r6, #15
 800bc92:	43b5      	bics	r5, r6
 800bc94:	50d5      	str	r5, [r2, r3]
 800bc96:	58d4      	ldr	r4, [r2, r3]
 800bc98:	4334      	orrs	r4, r6
 800bc9a:	50d4      	str	r4, [r2, r3]
 800bc9c:	e549      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800bc9e:	4a08      	ldr	r2, [pc, #32]	; (800bcc0 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bca0:	23a8      	movs	r3, #168	; 0xa8
 800bca2:	58d4      	ldr	r4, [r2, r3]
 800bca4:	4d07      	ldr	r5, [pc, #28]	; (800bcc4 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bca6:	402c      	ands	r4, r5
 800bca8:	50d4      	str	r4, [r2, r3]
 800bcaa:	58d5      	ldr	r5, [r2, r3]
 800bcac:	24f0      	movs	r4, #240	; 0xf0
 800bcae:	0224      	lsls	r4, r4, #8
 800bcb0:	432c      	orrs	r4, r5
 800bcb2:	50d4      	str	r4, [r2, r3]
 800bcb4:	e53d      	b.n	800b732 <RemapAndLinkDMAtoUARTTx+0xae>
 800bcb6:	46c0      	nop			; (mov r8, r8)
 800bcb8:	40020000 	.word	0x40020000
 800bcbc:	f0ffffff 	.word	0xf0ffffff
 800bcc0:	40020400 	.word	0x40020400
 800bcc4:	ffff0fff 	.word	0xffff0fff
 800bcc8:	4002001c 	.word	0x4002001c
 800bccc:	40020044 	.word	0x40020044
 800bcd0:	40020080 	.word	0x40020080
 800bcd4:	40020408 	.word	0x40020408
 800bcd8:	40020444 	.word	0x40020444
 800bcdc:	40020458 	.word	0x40020458
 800bce0:	fff0ffff 	.word	0xfff0ffff

0800bce4 <DMA_MSG_TX_Setup>:
{	
 800bce4:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800bce6:	4b0d      	ldr	r3, [pc, #52]	; (800bd1c <DMA_MSG_TX_Setup+0x38>)
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d012      	beq.n	800bd14 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800bcee:	4b0b      	ldr	r3, [pc, #44]	; (800bd1c <DMA_MSG_TX_Setup+0x38>)
 800bcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d010      	beq.n	800bd18 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800bcf6:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <DMA_MSG_TX_Setup+0x38>)
 800bcf8:	2394      	movs	r3, #148	; 0x94
 800bcfa:	58d3      	ldr	r3, [r2, r3]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d007      	beq.n	800bd10 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800bd00:	0021      	movs	r1, r4
 800bd02:	f7ff fcbf 	bl	800b684 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800bd06:	2100      	movs	r1, #0
 800bd08:	0020      	movs	r0, r4
 800bd0a:	f7ff f847 	bl	800ad9c <SetupDMAInterrupts>
}
 800bd0e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800bd10:	4c03      	ldr	r4, [pc, #12]	; (800bd20 <DMA_MSG_TX_Setup+0x3c>)
 800bd12:	e7f5      	b.n	800bd00 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800bd14:	4c01      	ldr	r4, [pc, #4]	; (800bd1c <DMA_MSG_TX_Setup+0x38>)
 800bd16:	e7f3      	b.n	800bd00 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800bd18:	4c02      	ldr	r4, [pc, #8]	; (800bd24 <DMA_MSG_TX_Setup+0x40>)
 800bd1a:	e7f1      	b.n	800bd00 <DMA_MSG_TX_Setup+0x1c>
 800bd1c:	20001868 	.word	0x20001868
 800bd20:	200018d8 	.word	0x200018d8
 800bd24:	200018a0 	.word	0x200018a0

0800bd28 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800bd28:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800bd2a:	4807      	ldr	r0, [pc, #28]	; (800bd48 <CRC_Init+0x20>)
 800bd2c:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <CRC_Init+0x24>)
 800bd2e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800bd30:	2310      	movs	r3, #16
 800bd32:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800bd34:	2300      	movs	r3, #0
 800bd36:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800bd38:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800bd3a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800bd3c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800bd3e:	3303      	adds	r3, #3
 800bd40:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800bd42:	f003 f90f 	bl	800ef64 <HAL_CRC_Init>
}
 800bd46:	bd10      	pop	{r4, pc}
 800bd48:	20006ccc 	.word	0x20006ccc
 800bd4c:	40023000 	.word	0x40023000

0800bd50 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800bd50:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800bd52:	4a05      	ldr	r2, [pc, #20]	; (800bd68 <HAL_CRC_MspInit+0x18>)
 800bd54:	6951      	ldr	r1, [r2, #20]
 800bd56:	2340      	movs	r3, #64	; 0x40
 800bd58:	4319      	orrs	r1, r3
 800bd5a:	6151      	str	r1, [r2, #20]
 800bd5c:	6952      	ldr	r2, [r2, #20]
 800bd5e:	4013      	ands	r3, r2
 800bd60:	9301      	str	r3, [sp, #4]
 800bd62:	9b01      	ldr	r3, [sp, #4]
}
 800bd64:	b002      	add	sp, #8
 800bd66:	4770      	bx	lr
 800bd68:	40021000 	.word	0x40021000

0800bd6c <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	0004      	movs	r4, r0
 800bd70:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d015      	beq.n	800bda2 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800bd76:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d100      	bne.n	800bd7e <CalculateCRC8+0x12>
}
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800bd7e:	088e      	lsrs	r6, r1, #2
 800bd80:	0032      	movs	r2, r6
 800bd82:	0021      	movs	r1, r4
 800bd84:	4808      	ldr	r0, [pc, #32]	; (800bda8 <CalculateCRC8+0x3c>)
 800bd86:	f003 f949 	bl	800f01c <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800bd8a:	07ab      	lsls	r3, r5, #30
 800bd8c:	d101      	bne.n	800bd92 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800bd8e:	b2c0      	uxtb	r0, r0
 800bd90:	e7f4      	b.n	800bd7c <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800bd92:	0131      	lsls	r1, r6, #4
 800bd94:	1861      	adds	r1, r4, r1
 800bd96:	2201      	movs	r2, #1
 800bd98:	4803      	ldr	r0, [pc, #12]	; (800bda8 <CalculateCRC8+0x3c>)
 800bd9a:	f003 f914 	bl	800efc6 <HAL_CRC_Accumulate>
 800bd9e:	b2c0      	uxtb	r0, r0
 800bda0:	e7ec      	b.n	800bd7c <CalculateCRC8+0x10>
	return 0;
 800bda2:	2000      	movs	r0, #0
 800bda4:	e7ea      	b.n	800bd7c <CalculateCRC8+0x10>
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	20006ccc 	.word	0x20006ccc

0800bdac <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800bdac:	b500      	push	{lr}
 800bdae:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800bdb0:	2380      	movs	r3, #128	; 0x80
 800bdb2:	01db      	lsls	r3, r3, #7
 800bdb4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bdbe:	3303      	adds	r3, #3
 800bdc0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bdc2:	a901      	add	r1, sp, #4
 800bdc4:	4802      	ldr	r0, [pc, #8]	; (800bdd0 <IND_LED_Init+0x24>)
 800bdc6:	f003 ffcd 	bl	800fd64 <HAL_GPIO_Init>
}
 800bdca:	b007      	add	sp, #28
 800bdcc:	bd00      	pop	{pc}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	48000400 	.word	0x48000400

0800bdd4 <GPIO_Init>:
{
 800bdd4:	b500      	push	{lr}
 800bdd6:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800bdd8:	4b18      	ldr	r3, [pc, #96]	; (800be3c <GPIO_Init+0x68>)
 800bdda:	6959      	ldr	r1, [r3, #20]
 800bddc:	2080      	movs	r0, #128	; 0x80
 800bdde:	0300      	lsls	r0, r0, #12
 800bde0:	4301      	orrs	r1, r0
 800bde2:	6159      	str	r1, [r3, #20]
 800bde4:	695a      	ldr	r2, [r3, #20]
 800bde6:	4002      	ands	r2, r0
 800bde8:	9201      	str	r2, [sp, #4]
 800bdea:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800bdec:	6959      	ldr	r1, [r3, #20]
 800bdee:	2080      	movs	r0, #128	; 0x80
 800bdf0:	0280      	lsls	r0, r0, #10
 800bdf2:	4301      	orrs	r1, r0
 800bdf4:	6159      	str	r1, [r3, #20]
 800bdf6:	695a      	ldr	r2, [r3, #20]
 800bdf8:	4002      	ands	r2, r0
 800bdfa:	9202      	str	r2, [sp, #8]
 800bdfc:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800bdfe:	6959      	ldr	r1, [r3, #20]
 800be00:	2080      	movs	r0, #128	; 0x80
 800be02:	0340      	lsls	r0, r0, #13
 800be04:	4301      	orrs	r1, r0
 800be06:	6159      	str	r1, [r3, #20]
 800be08:	695a      	ldr	r2, [r3, #20]
 800be0a:	4002      	ands	r2, r0
 800be0c:	9203      	str	r2, [sp, #12]
 800be0e:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800be10:	6959      	ldr	r1, [r3, #20]
 800be12:	2080      	movs	r0, #128	; 0x80
 800be14:	02c0      	lsls	r0, r0, #11
 800be16:	4301      	orrs	r1, r0
 800be18:	6159      	str	r1, [r3, #20]
 800be1a:	695a      	ldr	r2, [r3, #20]
 800be1c:	4002      	ands	r2, r0
 800be1e:	9204      	str	r2, [sp, #16]
 800be20:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800be22:	695a      	ldr	r2, [r3, #20]
 800be24:	2180      	movs	r1, #128	; 0x80
 800be26:	03c9      	lsls	r1, r1, #15
 800be28:	430a      	orrs	r2, r1
 800be2a:	615a      	str	r2, [r3, #20]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	400b      	ands	r3, r1
 800be30:	9305      	str	r3, [sp, #20]
 800be32:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800be34:	f7ff ffba 	bl	800bdac <IND_LED_Init>
}
 800be38:	b007      	add	sp, #28
 800be3a:	bd00      	pop	{pc}
 800be3c:	40021000 	.word	0x40021000

0800be40 <RS485_DE_RE_Init>:

//-- Configure MAX14840EASA+ \RE and DE
void RS485_DE_RE_Init(void)
{
 800be40:	b500      	push	{lr}
 800be42:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800be44:	2301      	movs	r3, #1
 800be46:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	9303      	str	r3, [sp, #12]
	
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800be4c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800be4e:	2380      	movs	r3, #128	; 0x80
 800be50:	015b      	lsls	r3, r3, #5
 800be52:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800be54:	2090      	movs	r0, #144	; 0x90
 800be56:	a901      	add	r1, sp, #4
 800be58:	05c0      	lsls	r0, r0, #23
 800be5a:	f003 ff83 	bl	800fd64 <HAL_GPIO_Init>
	
}
 800be5e:	b007      	add	sp, #28
 800be60:	bd00      	pop	{pc}
	...

0800be64 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	000e      	movs	r6, r1
 800be68:	0015      	movs	r5, r2
 800be6a:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800be6c:	f000 fdc4 	bl	800c9f8 <GetUart>
 800be70:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800be72:	482b      	ldr	r0, [pc, #172]	; (800bf20 <GetPortGPIOs+0xbc>)
 800be74:	4284      	cmp	r4, r0
 800be76:	d01a      	beq.n	800beae <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800be78:	4b2a      	ldr	r3, [pc, #168]	; (800bf24 <GetPortGPIOs+0xc0>)
 800be7a:	429c      	cmp	r4, r3
 800be7c:	d024      	beq.n	800bec8 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800be7e:	4b2a      	ldr	r3, [pc, #168]	; (800bf28 <GetPortGPIOs+0xc4>)
 800be80:	429c      	cmp	r4, r3
 800be82:	d02c      	beq.n	800bede <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800be84:	4b29      	ldr	r3, [pc, #164]	; (800bf2c <GetPortGPIOs+0xc8>)
 800be86:	429c      	cmp	r4, r3
 800be88:	d035      	beq.n	800bef6 <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800be8a:	4b29      	ldr	r3, [pc, #164]	; (800bf30 <GetPortGPIOs+0xcc>)
 800be8c:	429c      	cmp	r4, r3
 800be8e:	d03d      	beq.n	800bf0c <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800be90:	4b28      	ldr	r3, [pc, #160]	; (800bf34 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800be92:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800be94:	429c      	cmp	r4, r3
 800be96:	d116      	bne.n	800bec6 <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800be98:	2390      	movs	r3, #144	; 0x90
 800be9a:	05db      	lsls	r3, r3, #23
 800be9c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800be9e:	2210      	movs	r2, #16
 800bea0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bea2:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800bea4:	2320      	movs	r3, #32
 800bea6:	9a06      	ldr	r2, [sp, #24]
 800bea8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800beaa:	2000      	movs	r0, #0
 800beac:	e00b      	b.n	800bec6 <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800beae:	2390      	movs	r3, #144	; 0x90
 800beb0:	05db      	lsls	r3, r3, #23
 800beb2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800beb4:	2280      	movs	r2, #128	; 0x80
 800beb6:	0092      	lsls	r2, r2, #2
 800beb8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800beba:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bec4:	2000      	movs	r0, #0
	
	return result;	
}
 800bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bec8:	2390      	movs	r3, #144	; 0x90
 800beca:	05db      	lsls	r3, r3, #23
 800becc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800bece:	2204      	movs	r2, #4
 800bed0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bed2:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800bed4:	2308      	movs	r3, #8
 800bed6:	9a06      	ldr	r2, [sp, #24]
 800bed8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800beda:	2000      	movs	r0, #0
 800bedc:	e7f3      	b.n	800bec6 <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bede:	4b16      	ldr	r3, [pc, #88]	; (800bf38 <GetPortGPIOs+0xd4>)
 800bee0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800bee2:	2280      	movs	r2, #128	; 0x80
 800bee4:	00d2      	lsls	r2, r2, #3
 800bee6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800bee8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800beea:	2380      	movs	r3, #128	; 0x80
 800beec:	011b      	lsls	r3, r3, #4
 800beee:	9a06      	ldr	r2, [sp, #24]
 800bef0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bef2:	2000      	movs	r0, #0
 800bef4:	e7e7      	b.n	800bec6 <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800bef6:	2390      	movs	r3, #144	; 0x90
 800bef8:	05db      	lsls	r3, r3, #23
 800befa:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800befc:	2201      	movs	r2, #1
 800befe:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800bf00:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART4_RX_PIN;
 800bf02:	2302      	movs	r3, #2
 800bf04:	9a06      	ldr	r2, [sp, #24]
 800bf06:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e7dc      	b.n	800bec6 <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <GetPortGPIOs+0xd4>)
 800bf0e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800bf10:	2208      	movs	r2, #8
 800bf12:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800bf14:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800bf16:	2310      	movs	r3, #16
 800bf18:	9a06      	ldr	r2, [sp, #24]
 800bf1a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e7d2      	b.n	800bec6 <GetPortGPIOs+0x62>
 800bf20:	20006afc 	.word	0x20006afc
 800bf24:	20006c5c 	.word	0x20006c5c
 800bf28:	20006a18 	.word	0x20006a18
 800bf2c:	20006be8 	.word	0x20006be8
 800bf30:	20006a8c 	.word	0x20006a8c
 800bf34:	20006b78 	.word	0x20006b78
 800bf38:	48000400 	.word	0x48000400

0800bf3c <IsFactoryReset>:
{
 800bf3c:	b530      	push	{r4, r5, lr}
 800bf3e:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800bf40:	4b39      	ldr	r3, [pc, #228]	; (800c028 <IsFactoryReset+0xec>)
 800bf42:	6959      	ldr	r1, [r3, #20]
 800bf44:	2080      	movs	r0, #128	; 0x80
 800bf46:	0280      	lsls	r0, r0, #10
 800bf48:	4301      	orrs	r1, r0
 800bf4a:	6159      	str	r1, [r3, #20]
 800bf4c:	695a      	ldr	r2, [r3, #20]
 800bf4e:	4002      	ands	r2, r0
 800bf50:	9203      	str	r2, [sp, #12]
 800bf52:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800bf54:	6959      	ldr	r1, [r3, #20]
 800bf56:	2080      	movs	r0, #128	; 0x80
 800bf58:	02c0      	lsls	r0, r0, #11
 800bf5a:	4301      	orrs	r1, r0
 800bf5c:	6159      	str	r1, [r3, #20]
 800bf5e:	695a      	ldr	r2, [r3, #20]
 800bf60:	4002      	ands	r2, r0
 800bf62:	9204      	str	r2, [sp, #16]
 800bf64:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800bf66:	6959      	ldr	r1, [r3, #20]
 800bf68:	2080      	movs	r0, #128	; 0x80
 800bf6a:	0300      	lsls	r0, r0, #12
 800bf6c:	4301      	orrs	r1, r0
 800bf6e:	6159      	str	r1, [r3, #20]
 800bf70:	695a      	ldr	r2, [r3, #20]
 800bf72:	4002      	ands	r2, r0
 800bf74:	9205      	str	r2, [sp, #20]
 800bf76:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800bf78:	695a      	ldr	r2, [r3, #20]
 800bf7a:	2180      	movs	r1, #128	; 0x80
 800bf7c:	0349      	lsls	r1, r1, #13
 800bf7e:	430a      	orrs	r2, r1
 800bf80:	615a      	str	r2, [r3, #20]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	400b      	ands	r3, r1
 800bf86:	9306      	str	r3, [sp, #24]
 800bf88:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bf8a:	ab08      	add	r3, sp, #32
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	ab0b      	add	r3, sp, #44	; 0x2c
 800bf90:	2222      	movs	r2, #34	; 0x22
 800bf92:	446a      	add	r2, sp
 800bf94:	a90c      	add	r1, sp, #48	; 0x30
 800bf96:	2001      	movs	r0, #1
 800bf98:	f7ff ff64 	bl	800be64 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bf9c:	ac07      	add	r4, sp, #28
 800bf9e:	9400      	str	r4, [sp, #0]
 800bfa0:	ab09      	add	r3, sp, #36	; 0x24
 800bfa2:	221e      	movs	r2, #30
 800bfa4:	446a      	add	r2, sp
 800bfa6:	a90a      	add	r1, sp, #40	; 0x28
 800bfa8:	2006      	movs	r0, #6
 800bfaa:	f7ff ff5b 	bl	800be64 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb2:	2500      	movs	r5, #0
 800bfb4:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bfb6:	466b      	mov	r3, sp
 800bfb8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bfba:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bfbc:	a90d      	add	r1, sp, #52	; 0x34
 800bfbe:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bfc0:	f003 fed0 	bl	800fd64 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bfc4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bfca:	8823      	ldrh	r3, [r4, #0]
 800bfcc:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bfce:	a90d      	add	r1, sp, #52	; 0x34
 800bfd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfd2:	f003 fec7 	bl	800fd64 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800bfd6:	466b      	mov	r3, sp
 800bfd8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800bfda:	2200      	movs	r2, #0
 800bfdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bfde:	f003 ffb1 	bl	800ff44 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800bfe2:	2005      	movs	r0, #5
 800bfe4:	f000 fb14 	bl	800c610 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800bfe8:	8821      	ldrh	r1, [r4, #0]
 800bfea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfec:	f003 ffa4 	bl	800ff38 <HAL_GPIO_ReadPin>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d006      	beq.n	800c002 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bff4:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <IsFactoryReset+0xf0>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	4252      	negs	r2, r2
 800bffa:	601a      	str	r2, [r3, #0]
	return 0;
 800bffc:	2000      	movs	r0, #0
}
 800bffe:	b013      	add	sp, #76	; 0x4c
 800c000:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c002:	2322      	movs	r3, #34	; 0x22
 800c004:	446b      	add	r3, sp
 800c006:	8819      	ldrh	r1, [r3, #0]
 800c008:	2201      	movs	r2, #1
 800c00a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c00c:	f003 ff9a 	bl	800ff44 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c010:	2005      	movs	r0, #5
 800c012:	f000 fafd 	bl	800c610 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c016:	ab07      	add	r3, sp, #28
 800c018:	8819      	ldrh	r1, [r3, #0]
 800c01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c01c:	f003 ff8c 	bl	800ff38 <HAL_GPIO_ReadPin>
 800c020:	2801      	cmp	r0, #1
 800c022:	d1e7      	bne.n	800bff4 <IsFactoryReset+0xb8>
 800c024:	e7eb      	b.n	800bffe <IsFactoryReset+0xc2>
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	40021000 	.word	0x40021000
 800c02c:	20007ff0 	.word	0x20007ff0

0800c030 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c030:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800c032:	f002 fe97 	bl	800ed64 <HAL_IncTick>
  osSystickHandler();  
 800c036:	f000 fea3 	bl	800cd80 <osSystickHandler>

}
 800c03a:	bd10      	pop	{r4, pc}

0800c03c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800c03c:	e7fe      	b.n	800c03c <HardFault_Handler>
	...

0800c040 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800c040:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800c042:	4802      	ldr	r0, [pc, #8]	; (800c04c <USART1_IRQHandler+0xc>)
 800c044:	f005 fd35 	bl	8011ab2 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */	
	
}
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	20006afc 	.word	0x20006afc

0800c050 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800c050:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800c052:	4802      	ldr	r0, [pc, #8]	; (800c05c <USART2_IRQHandler+0xc>)
 800c054:	f005 fd2d 	bl	8011ab2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	46c0      	nop			; (mov r8, r8)
 800c05c:	20006c5c 	.word	0x20006c5c

0800c060 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800c060:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800c062:	4806      	ldr	r0, [pc, #24]	; (800c07c <USART3_8_IRQHandler+0x1c>)
 800c064:	f005 fd25 	bl	8011ab2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800c068:	4805      	ldr	r0, [pc, #20]	; (800c080 <USART3_8_IRQHandler+0x20>)
 800c06a:	f005 fd22 	bl	8011ab2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800c06e:	4805      	ldr	r0, [pc, #20]	; (800c084 <USART3_8_IRQHandler+0x24>)
 800c070:	f005 fd1f 	bl	8011ab2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800c074:	4804      	ldr	r0, [pc, #16]	; (800c088 <USART3_8_IRQHandler+0x28>)
 800c076:	f005 fd1c 	bl	8011ab2 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c07a:	bd10      	pop	{r4, pc}
 800c07c:	20006a18 	.word	0x20006a18
 800c080:	20006be8 	.word	0x20006be8
 800c084:	20006a8c 	.word	0x20006a8c
 800c088:	20006b78 	.word	0x20006b78

0800c08c <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800c08c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800c08e:	2001      	movs	r0, #1
 800c090:	f7fa ff84 	bl	8006f9c <DMA_IRQHandler>
	
}
 800c094:	bd10      	pop	{r4, pc}
	...

0800c098 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800c098:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c09a:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	06db      	lsls	r3, r3, #27
 800c0a0:	d40b      	bmi.n	800c0ba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800c0a2:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	05db      	lsls	r3, r3, #23
 800c0a8:	d40b      	bmi.n	800c0c2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	06db      	lsls	r3, r3, #27
 800c0b0:	d506      	bpl.n	800c0c0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800c0b2:	4808      	ldr	r0, [pc, #32]	; (800c0d4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800c0b4:	f003 f8ae 	bl	800f214 <HAL_DMA_IRQHandler>
	}
}
 800c0b8:	e002      	b.n	800c0c0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800c0ba:	2005      	movs	r0, #5
 800c0bc:	f7fa ff6e 	bl	8006f9c <DMA_IRQHandler>
}
 800c0c0:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800c0c2:	2002      	movs	r0, #2
 800c0c4:	f7fa ff6a 	bl	8006f9c <DMA_IRQHandler>
 800c0c8:	e7fa      	b.n	800c0c0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	40020400 	.word	0x40020400
 800c0d0:	40020000 	.word	0x40020000
 800c0d4:	20001868 	.word	0x20001868

0800c0d8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800c0d8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c0da:	4b14      	ldr	r3, [pc, #80]	; (800c12c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	03db      	lsls	r3, r3, #15
 800c0e0:	d413      	bmi.n	800c10a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800c0e2:	4b12      	ldr	r3, [pc, #72]	; (800c12c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	02db      	lsls	r3, r3, #11
 800c0e8:	d413      	bmi.n	800c112 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800c0ea:	4b11      	ldr	r3, [pc, #68]	; (800c130 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	05db      	lsls	r3, r3, #23
 800c0f0:	d413      	bmi.n	800c11a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800c0f2:	4b0e      	ldr	r3, [pc, #56]	; (800c12c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	04db      	lsls	r3, r3, #19
 800c0f8:	d413      	bmi.n	800c122 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800c0fa:	4b0c      	ldr	r3, [pc, #48]	; (800c12c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	01db      	lsls	r3, r3, #7
 800c100:	d506      	bpl.n	800c110 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800c102:	480c      	ldr	r0, [pc, #48]	; (800c134 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800c104:	f003 f886 	bl	800f214 <HAL_DMA_IRQHandler>
	}
}
 800c108:	e002      	b.n	800c110 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800c10a:	2003      	movs	r0, #3
 800c10c:	f7fa ff46 	bl	8006f9c <DMA_IRQHandler>
}
 800c110:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800c112:	2004      	movs	r0, #4
 800c114:	f7fa ff42 	bl	8006f9c <DMA_IRQHandler>
 800c118:	e7fa      	b.n	800c110 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800c11a:	2006      	movs	r0, #6
 800c11c:	f7fa ff3e 	bl	8006f9c <DMA_IRQHandler>
 800c120:	e7f6      	b.n	800c110 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800c122:	4805      	ldr	r0, [pc, #20]	; (800c138 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800c124:	f003 f876 	bl	800f214 <HAL_DMA_IRQHandler>
 800c128:	e7f2      	b.n	800c110 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	40020000 	.word	0x40020000
 800c130:	40020400 	.word	0x40020400
 800c134:	200018d8 	.word	0x200018d8
 800c138:	200018a0 	.word	0x200018a0

0800c13c <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 800c13c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
	HAL_TIM_IRQHandler(&htim16);
 800c13e:	4802      	ldr	r0, [pc, #8]	; (800c148 <TIM16_IRQHandler+0xc>)
 800c140:	f004 fe22 	bl	8010d88 <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
	
}
 800c144:	bd10      	pop	{r4, pc}
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	20006cf0 	.word	0x20006cf0

0800c14c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c14c:	b510      	push	{r4, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c152:	2300      	movs	r3, #0
 800c154:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800c156:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800c15c:	f7fe fece 	bl	800aefc <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800c160:	0020      	movs	r0, r4
 800c162:	f7fe fced 	bl	800ab40 <GetPort>
 800c166:	0080      	lsls	r0, r0, #2
 800c168:	4b06      	ldr	r3, [pc, #24]	; (800c184 <HAL_UART_TxCpltCallback+0x38>)
 800c16a:	58c0      	ldr	r0, [r0, r3]
 800c16c:	a901      	add	r1, sp, #4
 800c16e:	f001 f9a1 	bl	800d4b4 <xQueueGiveFromISR>
	

	
	RS485_RECEIVER_EN();                        // Enable receiver mode
 800c172:	2180      	movs	r1, #128	; 0x80
 800c174:	2090      	movs	r0, #144	; 0x90
 800c176:	2200      	movs	r2, #0
 800c178:	0149      	lsls	r1, r1, #5
 800c17a:	05c0      	lsls	r0, r0, #23
 800c17c:	f003 fee2 	bl	800ff44 <HAL_GPIO_WritePin>

}
 800c180:	b002      	add	sp, #8
 800c182:	bd10      	pop	{r4, pc}
 800c184:	200069c0 	.word	0x200069c0

0800c188 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c188:	b510      	push	{r4, lr}
 800c18a:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800c18c:	2369      	movs	r3, #105	; 0x69
 800c18e:	2201      	movs	r2, #1
 800c190:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800c192:	f7fe fcd5 	bl	800ab40 <GetPort>
	if (portStatus[port] == STREAM) {
 800c196:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <HAL_UART_ErrorCallback+0x40>)
 800c198:	5c1b      	ldrb	r3, [r3, r0]
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d005      	beq.n	800c1aa <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800c19e:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <HAL_UART_ErrorCallback+0x44>)
 800c1a0:	1818      	adds	r0, r3, r0
 800c1a2:	3801      	subs	r0, #1
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	7003      	strb	r3, [r0, #0]
	}	
}
 800c1a8:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800c1aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	b292      	uxth	r2, r2
 800c1b2:	1e43      	subs	r3, r0, #1
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4906      	ldr	r1, [pc, #24]	; (800c1d0 <HAL_UART_ErrorCallback+0x48>)
 800c1b8:	585b      	ldr	r3, [r3, r1]
 800c1ba:	6819      	ldr	r1, [r3, #0]
 800c1bc:	3128      	adds	r1, #40	; 0x28
 800c1be:	0020      	movs	r0, r4
 800c1c0:	f005 f85e 	bl	8011280 <HAL_UART_Receive_DMA>
 800c1c4:	e7f0      	b.n	800c1a8 <HAL_UART_ErrorCallback+0x20>
 800c1c6:	46c0      	nop			; (mov r8, r8)
 800c1c8:	200010e0 	.word	0x200010e0
 800c1cc:	200012ac 	.word	0x200012ac
 800c1d0:	2000148c 	.word	0x2000148c

0800c1d4 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1d4:	b510      	push	{r4, lr}
 800c1d6:	0004      	movs	r4, r0

	/* Check if data received from bridge port */
	if (H1DR1_Mode==BRIDGE)
 800c1d8:	4b22      	ldr	r3, [pc, #136]	; (800c264 <HAL_UART_RxCpltCallback+0x90>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d02c      	beq.n	800c23a <HAL_UART_RxCpltCallback+0x66>
		}
	}
	
	
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800c1e0:	0020      	movs	r0, r4
 800c1e2:	f7fe fcad 	bl	800ab40 <GetPort>
 800c1e6:	4b20      	ldr	r3, [pc, #128]	; (800c268 <HAL_UART_RxCpltCallback+0x94>)
 800c1e8:	5c1b      	ldrb	r3, [r3, r0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d006      	beq.n	800c1fc <HAL_UART_RxCpltCallback+0x28>
 800c1ee:	0020      	movs	r0, r4
 800c1f0:	f7fe fca6 	bl	800ab40 <GetPort>
 800c1f4:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <HAL_UART_RxCpltCallback+0x94>)
 800c1f6:	5c1b      	ldrb	r3, [r3, r0]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d11d      	bne.n	800c238 <HAL_UART_RxCpltCallback+0x64>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800c1fc:	0020      	movs	r0, r4
 800c1fe:	f7fe fc9f 	bl	800ab40 <GetPort>
 800c202:	4b1a      	ldr	r3, [pc, #104]	; (800c26c <HAL_UART_RxCpltCallback+0x98>)
 800c204:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800c206:	0020      	movs	r0, r4
 800c208:	f7fe fc9a 	bl	800ab40 <GetPort>
 800c20c:	4b16      	ldr	r3, [pc, #88]	; (800c268 <HAL_UART_RxCpltCallback+0x94>)
 800c20e:	2205      	movs	r2, #5
 800c210:	541a      	strb	r2, [r3, r0]
		// Clear the circular RX buffer
		memset(&UARTRxBuf[GetPort(huart)-1][0], 0, MSG_RX_BUF_SIZE);
 800c212:	0020      	movs	r0, r4
 800c214:	f7fe fc94 	bl	800ab40 <GetPort>
 800c218:	3801      	subs	r0, #1
 800c21a:	0180      	lsls	r0, r0, #6
 800c21c:	4b14      	ldr	r3, [pc, #80]	; (800c270 <HAL_UART_RxCpltCallback+0x9c>)
 800c21e:	18c0      	adds	r0, r0, r3
 800c220:	2240      	movs	r2, #64	; 0x40
 800c222:	2100      	movs	r1, #0
 800c224:	f005 ff45 	bl	80120b2 <memset>
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;		
 800c228:	0020      	movs	r0, r4
 800c22a:	f7fe fc89 	bl	800ab40 <GetPort>
 800c22e:	4b11      	ldr	r3, [pc, #68]	; (800c274 <HAL_UART_RxCpltCallback+0xa0>)
 800c230:	181b      	adds	r3, r3, r0
 800c232:	3b01      	subs	r3, #1
 800c234:	2201      	movs	r2, #1
 800c236:	701a      	strb	r2, [r3, #0]
	}
	
	
}
 800c238:	bd10      	pop	{r4, pc}
		if (huart==GetUart(Src_port))
 800c23a:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <HAL_UART_RxCpltCallback+0xa4>)
 800c23c:	7818      	ldrb	r0, [r3, #0]
 800c23e:	f000 fbdb 	bl	800c9f8 <GetUart>
 800c242:	4284      	cmp	r4, r0
 800c244:	d1cc      	bne.n	800c1e0 <HAL_UART_RxCpltCallback+0xc>
			RS485_RECEIVER_DIS();                     // Set RS485 port to transmitter
 800c246:	2180      	movs	r1, #128	; 0x80
 800c248:	2090      	movs	r0, #144	; 0x90
 800c24a:	2201      	movs	r2, #1
 800c24c:	0149      	lsls	r1, r1, #5
 800c24e:	05c0      	lsls	r0, r0, #23
 800c250:	f003 fe78 	bl	800ff44 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800c254:	4b09      	ldr	r3, [pc, #36]	; (800c27c <HAL_UART_RxCpltCallback+0xa8>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	6813      	ldr	r3, [r2, #0]
 800c25a:	2140      	movs	r1, #64	; 0x40
 800c25c:	430b      	orrs	r3, r1
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	e7be      	b.n	800c1e0 <HAL_UART_RxCpltCallback+0xc>
 800c262:	46c0      	nop			; (mov r8, r8)
 800c264:	20006c58 	.word	0x20006c58
 800c268:	200010e0 	.word	0x200010e0
 800c26c:	20006940 	.word	0x20006940
 800c270:	200012b4 	.word	0x200012b4
 800c274:	200012ac 	.word	0x200012ac
 800c278:	20006b6c 	.word	0x20006b6c
 800c27c:	20006afc 	.word	0x20006afc

0800c280 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800c280:	b672      	cpsid	i
 800c282:	e7fe      	b.n	800c282 <vApplicationStackOverflowHook+0x2>

0800c284 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800c284:	b672      	cpsid	i
 800c286:	e7fe      	b.n	800c286 <vApplicationMallocFailedHook+0x2>

0800c288 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800c288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c28a:	46ce      	mov	lr, r9
 800c28c:	4647      	mov	r7, r8
 800c28e:	b580      	push	{r7, lr}
 800c290:	b08f      	sub	sp, #60	; 0x3c
 800c292:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c294:	ac05      	add	r4, sp, #20
 800c296:	4b34      	ldr	r3, [pc, #208]	; (800c368 <RTC_CalendarConfig+0xe0>)
 800c298:	0022      	movs	r2, r4
 800c29a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800c29c:	c243      	stmia	r2!, {r0, r1, r6}
 800c29e:	aa02      	add	r2, sp, #8
 800c2a0:	4b32      	ldr	r3, [pc, #200]	; (800c36c <RTC_CalendarConfig+0xe4>)
 800c2a2:	cb03      	ldmia	r3!, {r0, r1}
 800c2a4:	c203      	stmia	r2!, {r0, r1}
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800c2aa:	2015      	movs	r0, #21
 800c2ac:	ab02      	add	r3, sp, #8
 800c2ae:	469c      	mov	ip, r3
 800c2b0:	4460      	add	r0, ip
 800c2b2:	f005 fc8e 	bl	8011bd2 <atoi>
 800c2b6:	b2c3      	uxtb	r3, r0
 800c2b8:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800c2ba:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800c2bc:	a806      	add	r0, sp, #24
 800c2be:	f005 fc88 	bl	8011bd2 <atoi>
 800c2c2:	b2c3      	uxtb	r3, r0
 800c2c4:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800c2c6:	70e5      	strb	r5, [r4, #3]
 800c2c8:	4e29      	ldr	r6, [pc, #164]	; (800c370 <RTC_CalendarConfig+0xe8>)
 800c2ca:	2401      	movs	r4, #1
 800c2cc:	e003      	b.n	800c2d6 <RTC_CalendarConfig+0x4e>
 800c2ce:	3401      	adds	r4, #1
 800c2d0:	3604      	adds	r6, #4
  for (uint8_t i = 0; i < 12; i++)
 800c2d2:	2c0d      	cmp	r4, #13
 800c2d4:	d007      	beq.n	800c2e6 <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800c2d6:	6831      	ldr	r1, [r6, #0]
 800c2d8:	a805      	add	r0, sp, #20
 800c2da:	f7f3 ff13 	bl	8000104 <strcmp>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d1f5      	bne.n	800c2ce <RTC_CalendarConfig+0x46>
 800c2e2:	b2e5      	uxtb	r5, r4
 800c2e4:	e7f3      	b.n	800c2ce <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800c2e6:	ab02      	add	r3, sp, #8
 800c2e8:	1d98      	adds	r0, r3, #6
 800c2ea:	f005 fc72 	bl	8011bd2 <atoi>
 800c2ee:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800c2f0:	af05      	add	r7, sp, #20
 800c2f2:	2400      	movs	r4, #0
 800c2f4:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800c2f6:	ab02      	add	r3, sp, #8
 800c2f8:	1cd8      	adds	r0, r3, #3
 800c2fa:	f005 fc6a 	bl	8011bd2 <atoi>
 800c2fe:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800c300:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800c302:	a802      	add	r0, sp, #8
 800c304:	f005 fc65 	bl	8011bd2 <atoi>
 800c308:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800c30a:	a90d      	add	r1, sp, #52	; 0x34
 800c30c:	464b      	mov	r3, r9
 800c30e:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800c310:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800c312:	4643      	mov	r3, r8
 800c314:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c316:	2301      	movs	r3, #1
 800c318:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c31a:	2200      	movs	r2, #0
 800c31c:	4815      	ldr	r0, [pc, #84]	; (800c374 <RTC_CalendarConfig+0xec>)
 800c31e:	f004 fc51 	bl	8010bc4 <HAL_RTC_SetDate>
 800c322:	2800      	cmp	r0, #0
 800c324:	d11c      	bne.n	800c360 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800c326:	a908      	add	r1, sp, #32
 800c328:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800c32a:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800c32c:	9b01      	ldr	r3, [sp, #4]
 800c32e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c330:	2300      	movs	r3, #0
 800c332:	720b      	strb	r3, [r1, #8]
 800c334:	4a10      	ldr	r2, [pc, #64]	; (800c378 <RTC_CalendarConfig+0xf0>)
 800c336:	3018      	adds	r0, #24
 800c338:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c33a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c33c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c33e:	2200      	movs	r2, #0
 800c340:	480c      	ldr	r0, [pc, #48]	; (800c374 <RTC_CalendarConfig+0xec>)
 800c342:	f004 fbbf 	bl	8010ac4 <HAL_RTC_SetTime>
 800c346:	1e04      	subs	r4, r0, #0
 800c348:	d10c      	bne.n	800c364 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c34a:	4a0c      	ldr	r2, [pc, #48]	; (800c37c <RTC_CalendarConfig+0xf4>)
 800c34c:	2101      	movs	r1, #1
 800c34e:	4809      	ldr	r0, [pc, #36]	; (800c374 <RTC_CalendarConfig+0xec>)
 800c350:	f004 fcfc 	bl	8010d4c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800c354:	0020      	movs	r0, r4
 800c356:	b00f      	add	sp, #60	; 0x3c
 800c358:	bcc0      	pop	{r6, r7}
 800c35a:	46b9      	mov	r9, r7
 800c35c:	46b0      	mov	r8, r6
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800c360:	24ff      	movs	r4, #255	; 0xff
 800c362:	e7f7      	b.n	800c354 <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800c364:	24ff      	movs	r4, #255	; 0xff
 800c366:	e7f5      	b.n	800c354 <RTC_CalendarConfig+0xcc>
 800c368:	08018414 	.word	0x08018414
 800c36c:	08018438 	.word	0x08018438
 800c370:	20000020 	.word	0x20000020
 800c374:	20006d2c 	.word	0x20006d2c
 800c378:	20006940 	.word	0x20006940
 800c37c:	000032f2 	.word	0x000032f2

0800c380 <RTC_Init>:
{
 800c380:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800c382:	4a1c      	ldr	r2, [pc, #112]	; (800c3f4 <RTC_Init+0x74>)
 800c384:	6a11      	ldr	r1, [r2, #32]
 800c386:	2380      	movs	r3, #128	; 0x80
 800c388:	021b      	lsls	r3, r3, #8
 800c38a:	430b      	orrs	r3, r1
 800c38c:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800c38e:	481a      	ldr	r0, [pc, #104]	; (800c3f8 <RTC_Init+0x78>)
 800c390:	4b1a      	ldr	r3, [pc, #104]	; (800c3fc <RTC_Init+0x7c>)
 800c392:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c394:	2300      	movs	r3, #0
 800c396:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800c398:	227c      	movs	r2, #124	; 0x7c
 800c39a:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800c39c:	4a18      	ldr	r2, [pc, #96]	; (800c400 <RTC_Init+0x80>)
 800c39e:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c3a0:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c3a2:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c3a4:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c3a6:	f004 fb2f 	bl	8010a08 <HAL_RTC_Init>
 800c3aa:	1e04      	subs	r4, r0, #0
 800c3ac:	d11f      	bne.n	800c3ee <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	4811      	ldr	r0, [pc, #68]	; (800c3f8 <RTC_Init+0x78>)
 800c3b2:	f004 fcd1 	bl	8010d58 <HAL_RTCEx_BKUPRead>
 800c3b6:	4b13      	ldr	r3, [pc, #76]	; (800c404 <RTC_Init+0x84>)
 800c3b8:	4298      	cmp	r0, r3
 800c3ba:	d10e      	bne.n	800c3da <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <RTC_Init+0x74>)
 800c3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c0:	011b      	lsls	r3, r3, #4
 800c3c2:	d502      	bpl.n	800c3ca <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800c3c4:	4b10      	ldr	r3, [pc, #64]	; (800c408 <RTC_Init+0x88>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800c3ca:	4b0a      	ldr	r3, [pc, #40]	; (800c3f4 <RTC_Init+0x74>)
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ce:	015b      	lsls	r3, r3, #5
 800c3d0:	d505      	bpl.n	800c3de <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <RTC_Init+0x88>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	701a      	strb	r2, [r3, #0]
 800c3d8:	e001      	b.n	800c3de <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800c3da:	f7ff ff55 	bl	800c288 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c3de:	4a05      	ldr	r2, [pc, #20]	; (800c3f4 <RTC_Init+0x74>)
 800c3e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c3e2:	2380      	movs	r3, #128	; 0x80
 800c3e4:	045b      	lsls	r3, r3, #17
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c3ea:	0020      	movs	r0, r4
 800c3ec:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c3ee:	24ff      	movs	r4, #255	; 0xff
 800c3f0:	e7fb      	b.n	800c3ea <RTC_Init+0x6a>
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	40021000 	.word	0x40021000
 800c3f8:	20006d2c 	.word	0x20006d2c
 800c3fc:	40002800 	.word	0x40002800
 800c400:	000007cf 	.word	0x000007cf
 800c404:	000032f2 	.word	0x000032f2
 800c408:	20001a60 	.word	0x20001a60

0800c40c <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c40e:	46c6      	mov	lr, r8
 800c410:	b500      	push	{lr}
 800c412:	b086      	sub	sp, #24
 800c414:	ac0c      	add	r4, sp, #48	; 0x30
 800c416:	7827      	ldrb	r7, [r4, #0]
 800c418:	ac0d      	add	r4, sp, #52	; 0x34
 800c41a:	7824      	ldrb	r4, [r4, #0]
 800c41c:	46a0      	mov	r8, r4
 800c41e:	ac0e      	add	r4, sp, #56	; 0x38
 800c420:	7825      	ldrb	r5, [r4, #0]
 800c422:	ac0f      	add	r4, sp, #60	; 0x3c
 800c424:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800c426:	ac05      	add	r4, sp, #20
 800c428:	3230      	adds	r2, #48	; 0x30
 800c42a:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800c42c:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800c42e:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800c430:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c432:	2200      	movs	r2, #0
 800c434:	0021      	movs	r1, r4
 800c436:	481f      	ldr	r0, [pc, #124]	; (800c4b4 <BOS_CalendarConfig+0xa8>)
 800c438:	f004 fbc4 	bl	8010bc4 <HAL_RTC_SetDate>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d134      	bne.n	800c4aa <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800c440:	466b      	mov	r3, sp
 800c442:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800c444:	4642      	mov	r2, r8
 800c446:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800c448:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800c44a:	2300      	movs	r3, #0
 800c44c:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800c44e:	2e01      	cmp	r6, #1
 800c450:	d01e      	beq.n	800c490 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800c452:	2e02      	cmp	r6, #2
 800c454:	d022      	beq.n	800c49c <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c456:	4b18      	ldr	r3, [pc, #96]	; (800c4b8 <BOS_CalendarConfig+0xac>)
 800c458:	2218      	movs	r2, #24
 800c45a:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4669      	mov	r1, sp
 800c460:	4814      	ldr	r0, [pc, #80]	; (800c4b4 <BOS_CalendarConfig+0xa8>)
 800c462:	f004 fb2f 	bl	8010ac4 <HAL_RTC_SetTime>
 800c466:	1e04      	subs	r4, r0, #0
 800c468:	d121      	bne.n	800c4ae <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c46a:	4a13      	ldr	r2, [pc, #76]	; (800c4b8 <BOS_CalendarConfig+0xac>)
 800c46c:	7b53      	ldrb	r3, [r2, #13]
 800c46e:	021b      	lsls	r3, r3, #8
 800c470:	7911      	ldrb	r1, [r2, #4]
 800c472:	4319      	orrs	r1, r3
 800c474:	208d      	movs	r0, #141	; 0x8d
 800c476:	0040      	lsls	r0, r0, #1
 800c478:	f7fa fe78 	bl	800716c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c47c:	4a0f      	ldr	r2, [pc, #60]	; (800c4bc <BOS_CalendarConfig+0xb0>)
 800c47e:	2101      	movs	r1, #1
 800c480:	480c      	ldr	r0, [pc, #48]	; (800c4b4 <BOS_CalendarConfig+0xa8>)
 800c482:	f004 fc63 	bl	8010d4c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800c486:	0020      	movs	r0, r4
 800c488:	b006      	add	sp, #24
 800c48a:	bc80      	pop	{r7}
 800c48c:	46b8      	mov	r8, r7
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c490:	466a      	mov	r2, sp
 800c492:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800c494:	4b08      	ldr	r3, [pc, #32]	; (800c4b8 <BOS_CalendarConfig+0xac>)
 800c496:	220c      	movs	r2, #12
 800c498:	735a      	strb	r2, [r3, #13]
 800c49a:	e7df      	b.n	800c45c <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c49c:	2340      	movs	r3, #64	; 0x40
 800c49e:	466a      	mov	r2, sp
 800c4a0:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <BOS_CalendarConfig+0xac>)
 800c4a4:	220c      	movs	r2, #12
 800c4a6:	735a      	strb	r2, [r3, #13]
 800c4a8:	e7d8      	b.n	800c45c <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800c4aa:	24ff      	movs	r4, #255	; 0xff
 800c4ac:	e7eb      	b.n	800c486 <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800c4ae:	24ff      	movs	r4, #255	; 0xff
 800c4b0:	e7e9      	b.n	800c486 <BOS_CalendarConfig+0x7a>
 800c4b2:	46c0      	nop			; (mov r8, r8)
 800c4b4:	20006d2c 	.word	0x20006d2c
 800c4b8:	20006940 	.word	0x20006940
 800c4bc:	000032f2 	.word	0x000032f2

0800c4c0 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c4c0:	b530      	push	{r4, r5, lr}
 800c4c2:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c4c4:	4d16      	ldr	r5, [pc, #88]	; (800c520 <GetTimeDate+0x60>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	a902      	add	r1, sp, #8
 800c4ca:	0028      	movs	r0, r5
 800c4cc:	f004 fbf6 	bl	8010cbc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c4d0:	ac07      	add	r4, sp, #28
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	0021      	movs	r1, r4
 800c4d6:	0028      	movs	r0, r5
 800c4d8:	f004 fc16 	bl	8010d08 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c4dc:	4b11      	ldr	r3, [pc, #68]	; (800c524 <GetTimeDate+0x64>)
 800c4de:	aa02      	add	r2, sp, #8
 800c4e0:	7a12      	ldrb	r2, [r2, #8]
 800c4e2:	09d2      	lsrs	r2, r2, #7
 800c4e4:	3201      	adds	r2, #1
 800c4e6:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c4e8:	9a03      	ldr	r2, [sp, #12]
 800c4ea:	9201      	str	r2, [sp, #4]
 800c4ec:	0852      	lsrs	r2, r2, #1
 800c4ee:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c4f0:	aa02      	add	r2, sp, #8
 800c4f2:	7892      	ldrb	r2, [r2, #2]
 800c4f4:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c4f6:	aa02      	add	r2, sp, #8
 800c4f8:	7852      	ldrb	r2, [r2, #1]
 800c4fa:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c4fc:	aa02      	add	r2, sp, #8
 800c4fe:	7812      	ldrb	r2, [r2, #0]
 800c500:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c502:	78a2      	ldrb	r2, [r4, #2]
 800c504:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c506:	7862      	ldrb	r2, [r4, #1]
 800c508:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c50a:	7822      	ldrb	r2, [r4, #0]
 800c50c:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c50e:	78e2      	ldrb	r2, [r4, #3]
 800c510:	21fa      	movs	r1, #250	; 0xfa
 800c512:	00c9      	lsls	r1, r1, #3
 800c514:	468c      	mov	ip, r1
 800c516:	4462      	add	r2, ip
 800c518:	831a      	strh	r2, [r3, #24]
}
 800c51a:	b009      	add	sp, #36	; 0x24
 800c51c:	bd30      	pop	{r4, r5, pc}
 800c51e:	46c0      	nop			; (mov r8, r8)
 800c520:	20006d2c 	.word	0x20006d2c
 800c524:	20006940 	.word	0x20006940

0800c528 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800c528:	b530      	push	{r4, r5, lr}
 800c52a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c52c:	4a12      	ldr	r2, [pc, #72]	; (800c578 <TIM_USEC_Init+0x50>)
 800c52e:	69d1      	ldr	r1, [r2, #28]
 800c530:	2080      	movs	r0, #128	; 0x80
 800c532:	0040      	lsls	r0, r0, #1
 800c534:	4301      	orrs	r1, r0
 800c536:	61d1      	str	r1, [r2, #28]
 800c538:	69d3      	ldr	r3, [r2, #28]
 800c53a:	4003      	ands	r3, r0
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c540:	4c0e      	ldr	r4, [pc, #56]	; (800c57c <TIM_USEC_Init+0x54>)
 800c542:	4b0f      	ldr	r3, [pc, #60]	; (800c580 <TIM_USEC_Init+0x58>)
 800c544:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c546:	f004 f977 	bl	8010838 <HAL_RCC_GetPCLK1Freq>
 800c54a:	490e      	ldr	r1, [pc, #56]	; (800c584 <TIM_USEC_Init+0x5c>)
 800c54c:	f7f3 fe00 	bl	8000150 <__udivsi3>
 800c550:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c552:	2500      	movs	r5, #0
 800c554:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <TIM_USEC_Init+0x60>)
 800c558:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800c55a:	0020      	movs	r0, r4
 800c55c:	f004 fd30 	bl	8010fc0 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c560:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c562:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c564:	a902      	add	r1, sp, #8
 800c566:	0020      	movs	r0, r4
 800c568:	f004 fd44 	bl	8010ff4 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c56c:	0020      	movs	r0, r4
 800c56e:	f004 fbfa 	bl	8010d66 <HAL_TIM_Base_Start>
}
 800c572:	b005      	add	sp, #20
 800c574:	bd30      	pop	{r4, r5, pc}
 800c576:	46c0      	nop			; (mov r8, r8)
 800c578:	40021000 	.word	0x40021000
 800c57c:	20006d88 	.word	0x20006d88
 800c580:	40002000 	.word	0x40002000
 800c584:	000f4240 	.word	0x000f4240
 800c588:	0000ffff 	.word	0x0000ffff

0800c58c <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800c58c:	b530      	push	{r4, r5, lr}
 800c58e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c590:	4a12      	ldr	r2, [pc, #72]	; (800c5dc <TIM_MSEC_Init+0x50>)
 800c592:	6991      	ldr	r1, [r2, #24]
 800c594:	2080      	movs	r0, #128	; 0x80
 800c596:	0240      	lsls	r0, r0, #9
 800c598:	4301      	orrs	r1, r0
 800c59a:	6191      	str	r1, [r2, #24]
 800c59c:	6993      	ldr	r3, [r2, #24]
 800c59e:	4003      	ands	r3, r0
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800c5a4:	4c0e      	ldr	r4, [pc, #56]	; (800c5e0 <TIM_MSEC_Init+0x54>)
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <TIM_MSEC_Init+0x58>)
 800c5a8:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c5aa:	f004 f945 	bl	8010838 <HAL_RCC_GetPCLK1Freq>
 800c5ae:	21fa      	movs	r1, #250	; 0xfa
 800c5b0:	0089      	lsls	r1, r1, #2
 800c5b2:	f7f3 fdcd 	bl	8000150 <__udivsi3>
 800c5b6:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <TIM_MSEC_Init+0x5c>)
 800c5be:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800c5c0:	0020      	movs	r0, r4
 800c5c2:	f004 fcfd 	bl	8010fc0 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c5c6:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c5c8:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c5ca:	a902      	add	r1, sp, #8
 800c5cc:	0020      	movs	r0, r4
 800c5ce:	f004 fd11 	bl	8010ff4 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800c5d2:	0020      	movs	r0, r4
 800c5d4:	f004 fbc7 	bl	8010d66 <HAL_TIM_Base_Start>
}
 800c5d8:	b005      	add	sp, #20
 800c5da:	bd30      	pop	{r4, r5, pc}
 800c5dc:	40021000 	.word	0x40021000
 800c5e0:	20006d4c 	.word	0x20006d4c
 800c5e4:	40014000 	.word	0x40014000
 800c5e8:	0000ffff 	.word	0x0000ffff

0800c5ec <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800c5ec:	b510      	push	{r4, lr}
 800c5ee:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800c5f0:	f002 fa58 	bl	800eaa4 <vPortEnterCritical>
	
	if (Delay)
 800c5f4:	2c00      	cmp	r4, #0
 800c5f6:	d006      	beq.n	800c606 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800c5f8:	4b04      	ldr	r3, [pc, #16]	; (800c60c <StartMicroDelay+0x20>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800c5fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c600:	1a5b      	subs	r3, r3, r1
 800c602:	42a3      	cmp	r3, r4
 800c604:	d9fb      	bls.n	800c5fe <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c606:	f002 fa59 	bl	800eabc <vPortExitCritical>
}
 800c60a:	bd10      	pop	{r4, pc}
 800c60c:	20006d88 	.word	0x20006d88

0800c610 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800c610:	b510      	push	{r4, lr}
 800c612:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800c614:	f002 fa46 	bl	800eaa4 <vPortEnterCritical>
	
	if (Delay)
 800c618:	2c00      	cmp	r4, #0
 800c61a:	d006      	beq.n	800c62a <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800c61c:	4b04      	ldr	r3, [pc, #16]	; (800c630 <StartMilliDelay+0x20>)
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800c622:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c624:	1a5b      	subs	r3, r3, r1
 800c626:	42a3      	cmp	r3, r4
 800c628:	d9fb      	bls.n	800c622 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c62a:	f002 fa47 	bl	800eabc <vPortExitCritical>
}
 800c62e:	bd10      	pop	{r4, pc}
 800c630:	20006d4c 	.word	0x20006d4c

0800c634 <MB_PORT_Init>:
	 uint16_t arrayPortsDir[__N];
#endif 

/* MB Port Initialization */
Module_Status MB_PORT_Init(uint32_t BAUD_RATE, uint32_t DataBitsN, uint32_t PARITY_BIT, uint32_t STOP_BIT)   
{
 800c634:	b570      	push	{r4, r5, r6, lr}
 800c636:	0004      	movs	r4, r0
  huart1.Instance = USART1;
 800c638:	480a      	ldr	r0, [pc, #40]	; (800c664 <MB_PORT_Init+0x30>)
 800c63a:	4d0b      	ldr	r5, [pc, #44]	; (800c668 <MB_PORT_Init+0x34>)
 800c63c:	6005      	str	r5, [r0, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 800c63e:	6044      	str	r4, [r0, #4]
  huart1.Init.WordLength = DataBitsN;
 800c640:	6081      	str	r1, [r0, #8]
  huart1.Init.StopBits = STOP_BIT;
 800c642:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = PARITY_BIT;
 800c644:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c646:	230c      	movs	r3, #12
 800c648:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c64a:	2300      	movs	r3, #0
 800c64c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c64e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c650:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800c652:	3310      	adds	r3, #16
 800c654:	6243      	str	r3, [r0, #36]	; 0x24
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800c656:	2380      	movs	r3, #128	; 0x80
 800c658:	015b      	lsls	r3, r3, #5
 800c65a:	6383      	str	r3, [r0, #56]	; 0x38
	
	HAL_UART_Init(&huart1);
 800c65c:	f005 f950 	bl	8011900 <HAL_UART_Init>
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
return H1DR1_OK;
}
 800c660:	2000      	movs	r0, #0
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	20006afc 	.word	0x20006afc
 800c668:	40013800 	.word	0x40013800

0800c66c <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800c66c:	b510      	push	{r4, lr}
	MB_PORT_Init(9600, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800c66e:	2096      	movs	r0, #150	; 0x96
 800c670:	2300      	movs	r3, #0
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	0180      	lsls	r0, r0, #6
 800c678:	f7ff ffdc 	bl	800c634 <MB_PORT_Init>
}
 800c67c:	bd10      	pop	{r4, pc}
	...

0800c680 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800c680:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800c682:	4809      	ldr	r0, [pc, #36]	; (800c6a8 <MX_USART2_UART_Init+0x28>)
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <MX_USART2_UART_Init+0x2c>)
 800c686:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c688:	23e1      	movs	r3, #225	; 0xe1
 800c68a:	031b      	lsls	r3, r3, #12
 800c68c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c68e:	2300      	movs	r3, #0
 800c690:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c692:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c694:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c696:	220c      	movs	r2, #12
 800c698:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c69a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c69c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c69e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c6a0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800c6a2:	f005 f92d 	bl	8011900 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800c6a6:	bd10      	pop	{r4, pc}
 800c6a8:	20006c5c 	.word	0x20006c5c
 800c6ac:	40004400 	.word	0x40004400

0800c6b0 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800c6b0:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800c6b2:	4809      	ldr	r0, [pc, #36]	; (800c6d8 <MX_USART3_UART_Init+0x28>)
 800c6b4:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <MX_USART3_UART_Init+0x2c>)
 800c6b6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c6b8:	23e1      	movs	r3, #225	; 0xe1
 800c6ba:	031b      	lsls	r3, r3, #12
 800c6bc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c6c2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c6c4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c6c6:	220c      	movs	r2, #12
 800c6c8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c6ca:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c6cc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c6ce:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c6d0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800c6d2:	f005 f915 	bl	8011900 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800c6d6:	bd10      	pop	{r4, pc}
 800c6d8:	20006a18 	.word	0x20006a18
 800c6dc:	40004800 	.word	0x40004800

0800c6e0 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800c6e0:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800c6e2:	4809      	ldr	r0, [pc, #36]	; (800c708 <MX_USART4_UART_Init+0x28>)
 800c6e4:	4b09      	ldr	r3, [pc, #36]	; (800c70c <MX_USART4_UART_Init+0x2c>)
 800c6e6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c6e8:	23e1      	movs	r3, #225	; 0xe1
 800c6ea:	031b      	lsls	r3, r3, #12
 800c6ec:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c6f2:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c6f4:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c6f6:	220c      	movs	r2, #12
 800c6f8:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c6fa:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c6fc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c6fe:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c700:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800c702:	f005 f8fd 	bl	8011900 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800c706:	bd10      	pop	{r4, pc}
 800c708:	20006be8 	.word	0x20006be8
 800c70c:	40004c00 	.word	0x40004c00

0800c710 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800c710:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800c712:	4809      	ldr	r0, [pc, #36]	; (800c738 <MX_USART5_UART_Init+0x28>)
 800c714:	4b09      	ldr	r3, [pc, #36]	; (800c73c <MX_USART5_UART_Init+0x2c>)
 800c716:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c718:	23e1      	movs	r3, #225	; 0xe1
 800c71a:	031b      	lsls	r3, r3, #12
 800c71c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c71e:	2300      	movs	r3, #0
 800c720:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c722:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c724:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c726:	220c      	movs	r2, #12
 800c728:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c72a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c72c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c72e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c730:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800c732:	f005 f8e5 	bl	8011900 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800c736:	bd10      	pop	{r4, pc}
 800c738:	20006a8c 	.word	0x20006a8c
 800c73c:	40005000 	.word	0x40005000

0800c740 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800c740:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800c742:	4809      	ldr	r0, [pc, #36]	; (800c768 <MX_USART6_UART_Init+0x28>)
 800c744:	4b09      	ldr	r3, [pc, #36]	; (800c76c <MX_USART6_UART_Init+0x2c>)
 800c746:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c748:	23e1      	movs	r3, #225	; 0xe1
 800c74a:	031b      	lsls	r3, r3, #12
 800c74c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c74e:	2300      	movs	r3, #0
 800c750:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c752:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c754:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c756:	220c      	movs	r2, #12
 800c758:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c75a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c75c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c75e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c760:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800c762:	f005 f8cd 	bl	8011900 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800c766:	bd10      	pop	{r4, pc}
 800c768:	20006b78 	.word	0x20006b78
 800c76c:	40011400 	.word	0x40011400

0800c770 <HAL_UART_MspInit>:
#endif


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c772:	46ce      	mov	lr, r9
 800c774:	4647      	mov	r7, r8
 800c776:	b580      	push	{r7, lr}
 800c778:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800c77a:	6803      	ldr	r3, [r0, #0]
 800c77c:	4a96      	ldr	r2, [pc, #600]	; (800c9d8 <HAL_UART_MspInit+0x268>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d016      	beq.n	800c7b0 <HAL_UART_MspInit+0x40>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800c782:	4a96      	ldr	r2, [pc, #600]	; (800c9dc <HAL_UART_MspInit+0x26c>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d041      	beq.n	800c80c <HAL_UART_MspInit+0x9c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800c788:	4a95      	ldr	r2, [pc, #596]	; (800c9e0 <HAL_UART_MspInit+0x270>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d06a      	beq.n	800c864 <HAL_UART_MspInit+0xf4>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800c78e:	4a95      	ldr	r2, [pc, #596]	; (800c9e4 <HAL_UART_MspInit+0x274>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d100      	bne.n	800c796 <HAL_UART_MspInit+0x26>
 800c794:	e096      	b.n	800c8c4 <HAL_UART_MspInit+0x154>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800c796:	4a94      	ldr	r2, [pc, #592]	; (800c9e8 <HAL_UART_MspInit+0x278>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d100      	bne.n	800c79e <HAL_UART_MspInit+0x2e>
 800c79c:	e0bf      	b.n	800c91e <HAL_UART_MspInit+0x1ae>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800c79e:	4a93      	ldr	r2, [pc, #588]	; (800c9ec <HAL_UART_MspInit+0x27c>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d100      	bne.n	800c7a6 <HAL_UART_MspInit+0x36>
 800c7a4:	e0e9      	b.n	800c97a <HAL_UART_MspInit+0x20a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800c7a6:	b00d      	add	sp, #52	; 0x34
 800c7a8:	bcc0      	pop	{r6, r7}
 800c7aa:	46b9      	mov	r9, r7
 800c7ac:	46b0      	mov	r8, r6
 800c7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800c7b0:	4a8f      	ldr	r2, [pc, #572]	; (800c9f0 <HAL_UART_MspInit+0x280>)
 800c7b2:	6991      	ldr	r1, [r2, #24]
 800c7b4:	2080      	movs	r0, #128	; 0x80
 800c7b6:	01c0      	lsls	r0, r0, #7
 800c7b8:	4301      	orrs	r1, r0
 800c7ba:	6191      	str	r1, [r2, #24]
 800c7bc:	6993      	ldr	r3, [r2, #24]
 800c7be:	4003      	ands	r3, r0
 800c7c0:	9301      	str	r3, [sp, #4]
 800c7c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800c7c4:	2380      	movs	r3, #128	; 0x80
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7ca:	2702      	movs	r7, #2
 800c7cc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c7ce:	2401      	movs	r4, #1
 800c7d0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c7d2:	2603      	movs	r6, #3
 800c7d4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800c7d6:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800c7d8:	2590      	movs	r5, #144	; 0x90
 800c7da:	05ed      	lsls	r5, r5, #23
 800c7dc:	a907      	add	r1, sp, #28
 800c7de:	0028      	movs	r0, r5
 800c7e0:	f003 fac0 	bl	800fd64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800c7e4:	2380      	movs	r3, #128	; 0x80
 800c7e6:	00db      	lsls	r3, r3, #3
 800c7e8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7ea:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c7ec:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c7ee:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800c7f0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800c7f2:	a907      	add	r1, sp, #28
 800c7f4:	0028      	movs	r0, r5
 800c7f6:	f003 fab5 	bl	800fd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	201b      	movs	r0, #27
 800c800:	f002 fada 	bl	800edb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c804:	201b      	movs	r0, #27
 800c806:	f002 fb09 	bl	800ee1c <HAL_NVIC_EnableIRQ>
 800c80a:	e7cc      	b.n	800c7a6 <HAL_UART_MspInit+0x36>
    __USART2_CLK_ENABLE();
 800c80c:	4a78      	ldr	r2, [pc, #480]	; (800c9f0 <HAL_UART_MspInit+0x280>)
 800c80e:	69d1      	ldr	r1, [r2, #28]
 800c810:	2080      	movs	r0, #128	; 0x80
 800c812:	0280      	lsls	r0, r0, #10
 800c814:	4301      	orrs	r1, r0
 800c816:	61d1      	str	r1, [r2, #28]
 800c818:	69d3      	ldr	r3, [r2, #28]
 800c81a:	4003      	ands	r3, r0
 800c81c:	9302      	str	r3, [sp, #8]
 800c81e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800c820:	2304      	movs	r3, #4
 800c822:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c824:	2702      	movs	r7, #2
 800c826:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c828:	2401      	movs	r4, #1
 800c82a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c82c:	2603      	movs	r6, #3
 800c82e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800c830:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800c832:	2590      	movs	r5, #144	; 0x90
 800c834:	05ed      	lsls	r5, r5, #23
 800c836:	a907      	add	r1, sp, #28
 800c838:	0028      	movs	r0, r5
 800c83a:	f003 fa93 	bl	800fd64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800c83e:	2308      	movs	r3, #8
 800c840:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c842:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c844:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c846:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800c848:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800c84a:	a907      	add	r1, sp, #28
 800c84c:	0028      	movs	r0, r5
 800c84e:	f003 fa89 	bl	800fd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800c852:	2200      	movs	r2, #0
 800c854:	2101      	movs	r1, #1
 800c856:	201c      	movs	r0, #28
 800c858:	f002 faae 	bl	800edb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c85c:	201c      	movs	r0, #28
 800c85e:	f002 fadd 	bl	800ee1c <HAL_NVIC_EnableIRQ>
 800c862:	e7a0      	b.n	800c7a6 <HAL_UART_MspInit+0x36>
    __USART3_CLK_ENABLE();
 800c864:	4a62      	ldr	r2, [pc, #392]	; (800c9f0 <HAL_UART_MspInit+0x280>)
 800c866:	69d1      	ldr	r1, [r2, #28]
 800c868:	2080      	movs	r0, #128	; 0x80
 800c86a:	02c0      	lsls	r0, r0, #11
 800c86c:	4301      	orrs	r1, r0
 800c86e:	61d1      	str	r1, [r2, #28]
 800c870:	69d3      	ldr	r3, [r2, #28]
 800c872:	4003      	ands	r3, r0
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c87e:	2302      	movs	r3, #2
 800c880:	4698      	mov	r8, r3
 800c882:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c884:	2701      	movs	r7, #1
 800c886:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c888:	2603      	movs	r6, #3
 800c88a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800c88c:	2504      	movs	r5, #4
 800c88e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800c890:	4c58      	ldr	r4, [pc, #352]	; (800c9f4 <HAL_UART_MspInit+0x284>)
 800c892:	a907      	add	r1, sp, #28
 800c894:	0020      	movs	r0, r4
 800c896:	f003 fa65 	bl	800fd64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800c89a:	2380      	movs	r3, #128	; 0x80
 800c89c:	011b      	lsls	r3, r3, #4
 800c89e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8a0:	4643      	mov	r3, r8
 800c8a2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8a4:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8a6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800c8a8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800c8aa:	a907      	add	r1, sp, #28
 800c8ac:	0020      	movs	r0, r4
 800c8ae:	f003 fa59 	bl	800fd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	201d      	movs	r0, #29
 800c8b8:	f002 fa7e 	bl	800edb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c8bc:	201d      	movs	r0, #29
 800c8be:	f002 faad 	bl	800ee1c <HAL_NVIC_EnableIRQ>
 800c8c2:	e770      	b.n	800c7a6 <HAL_UART_MspInit+0x36>
    __USART4_CLK_ENABLE();
 800c8c4:	4a4a      	ldr	r2, [pc, #296]	; (800c9f0 <HAL_UART_MspInit+0x280>)
 800c8c6:	69d1      	ldr	r1, [r2, #28]
 800c8c8:	2080      	movs	r0, #128	; 0x80
 800c8ca:	0300      	lsls	r0, r0, #12
 800c8cc:	4301      	orrs	r1, r0
 800c8ce:	61d1      	str	r1, [r2, #28]
 800c8d0:	69d3      	ldr	r3, [r2, #28]
 800c8d2:	4003      	ands	r3, r0
 800c8d4:	9304      	str	r3, [sp, #16]
 800c8d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800c8d8:	2401      	movs	r4, #1
 800c8da:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8dc:	2502      	movs	r5, #2
 800c8de:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8e0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	4698      	mov	r8, r3
 800c8e6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800c8e8:	2704      	movs	r7, #4
 800c8ea:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800c8ec:	2690      	movs	r6, #144	; 0x90
 800c8ee:	05f6      	lsls	r6, r6, #23
 800c8f0:	a907      	add	r1, sp, #28
 800c8f2:	0030      	movs	r0, r6
 800c8f4:	f003 fa36 	bl	800fd64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800c8f8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8fa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8fc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8fe:	4643      	mov	r3, r8
 800c900:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800c902:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800c904:	a907      	add	r1, sp, #28
 800c906:	0030      	movs	r0, r6
 800c908:	f003 fa2c 	bl	800fd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c90c:	2200      	movs	r2, #0
 800c90e:	2101      	movs	r1, #1
 800c910:	201d      	movs	r0, #29
 800c912:	f002 fa51 	bl	800edb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c916:	201d      	movs	r0, #29
 800c918:	f002 fa80 	bl	800ee1c <HAL_NVIC_EnableIRQ>
 800c91c:	e743      	b.n	800c7a6 <HAL_UART_MspInit+0x36>
    __USART5_CLK_ENABLE();
 800c91e:	4a34      	ldr	r2, [pc, #208]	; (800c9f0 <HAL_UART_MspInit+0x280>)
 800c920:	69d1      	ldr	r1, [r2, #28]
 800c922:	2080      	movs	r0, #128	; 0x80
 800c924:	0340      	lsls	r0, r0, #13
 800c926:	4301      	orrs	r1, r0
 800c928:	61d1      	str	r1, [r2, #28]
 800c92a:	69d3      	ldr	r3, [r2, #28]
 800c92c:	4003      	ands	r3, r0
 800c92e:	9305      	str	r3, [sp, #20]
 800c930:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800c932:	2308      	movs	r3, #8
 800c934:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c936:	3b06      	subs	r3, #6
 800c938:	4698      	mov	r8, r3
 800c93a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c93c:	2701      	movs	r7, #1
 800c93e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c940:	2603      	movs	r6, #3
 800c942:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800c944:	2504      	movs	r5, #4
 800c946:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800c948:	4c2a      	ldr	r4, [pc, #168]	; (800c9f4 <HAL_UART_MspInit+0x284>)
 800c94a:	a907      	add	r1, sp, #28
 800c94c:	0020      	movs	r0, r4
 800c94e:	f003 fa09 	bl	800fd64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800c952:	2310      	movs	r3, #16
 800c954:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c956:	4643      	mov	r3, r8
 800c958:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c95a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c95c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800c95e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800c960:	a907      	add	r1, sp, #28
 800c962:	0020      	movs	r0, r4
 800c964:	f003 f9fe 	bl	800fd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c968:	2200      	movs	r2, #0
 800c96a:	2101      	movs	r1, #1
 800c96c:	201d      	movs	r0, #29
 800c96e:	f002 fa23 	bl	800edb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c972:	201d      	movs	r0, #29
 800c974:	f002 fa52 	bl	800ee1c <HAL_NVIC_EnableIRQ>
 800c978:	e715      	b.n	800c7a6 <HAL_UART_MspInit+0x36>
    __USART6_CLK_ENABLE();
 800c97a:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <HAL_UART_MspInit+0x280>)
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	2420      	movs	r4, #32
 800c980:	4322      	orrs	r2, r4
 800c982:	619a      	str	r2, [r3, #24]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	4023      	ands	r3, r4
 800c988:	9306      	str	r3, [sp, #24]
 800c98a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800c98c:	2310      	movs	r3, #16
 800c98e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c990:	3b0e      	subs	r3, #14
 800c992:	4699      	mov	r9, r3
 800c994:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c996:	3b01      	subs	r3, #1
 800c998:	4698      	mov	r8, r3
 800c99a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c99c:	2703      	movs	r7, #3
 800c99e:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800c9a0:	2605      	movs	r6, #5
 800c9a2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800c9a4:	2590      	movs	r5, #144	; 0x90
 800c9a6:	05ed      	lsls	r5, r5, #23
 800c9a8:	a907      	add	r1, sp, #28
 800c9aa:	0028      	movs	r0, r5
 800c9ac:	f003 f9da 	bl	800fd64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800c9b0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9b6:	4643      	mov	r3, r8
 800c9b8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c9ba:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800c9bc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800c9be:	a907      	add	r1, sp, #28
 800c9c0:	0028      	movs	r0, r5
 800c9c2:	f003 f9cf 	bl	800fd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	201d      	movs	r0, #29
 800c9cc:	f002 f9f4 	bl	800edb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c9d0:	201d      	movs	r0, #29
 800c9d2:	f002 fa23 	bl	800ee1c <HAL_NVIC_EnableIRQ>
}
 800c9d6:	e6e6      	b.n	800c7a6 <HAL_UART_MspInit+0x36>
 800c9d8:	40013800 	.word	0x40013800
 800c9dc:	40004400 	.word	0x40004400
 800c9e0:	40004800 	.word	0x40004800
 800c9e4:	40004c00 	.word	0x40004c00
 800c9e8:	40005000 	.word	0x40005000
 800c9ec:	40011400 	.word	0x40011400
 800c9f0:	40021000 	.word	0x40021000
 800c9f4:	48000400 	.word	0x48000400

0800c9f8 <GetUart>:
}

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800c9f8:	2806      	cmp	r0, #6
 800c9fa:	d80d      	bhi.n	800ca18 <GetUart+0x20>
 800c9fc:	0080      	lsls	r0, r0, #2
 800c9fe:	4b08      	ldr	r3, [pc, #32]	; (800ca20 <GetUart+0x28>)
 800ca00:	581b      	ldr	r3, [r3, r0]
 800ca02:	469f      	mov	pc, r3
		case P5 :
			return P5uart;
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800ca04:	4807      	ldr	r0, [pc, #28]	; (800ca24 <GetUart+0x2c>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800ca06:	4770      	bx	lr
			return P3uart;
 800ca08:	4807      	ldr	r0, [pc, #28]	; (800ca28 <GetUart+0x30>)
 800ca0a:	e7fc      	b.n	800ca06 <GetUart+0xe>
			return P4uart;
 800ca0c:	4807      	ldr	r0, [pc, #28]	; (800ca2c <GetUart+0x34>)
 800ca0e:	e7fa      	b.n	800ca06 <GetUart+0xe>
			return P5uart;
 800ca10:	4807      	ldr	r0, [pc, #28]	; (800ca30 <GetUart+0x38>)
 800ca12:	e7f8      	b.n	800ca06 <GetUart+0xe>
			return P6uart;
 800ca14:	4807      	ldr	r0, [pc, #28]	; (800ca34 <GetUart+0x3c>)
 800ca16:	e7f6      	b.n	800ca06 <GetUart+0xe>
			return 0;
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e7f4      	b.n	800ca06 <GetUart+0xe>
			return P1uart;	
 800ca1c:	4806      	ldr	r0, [pc, #24]	; (800ca38 <GetUart+0x40>)
 800ca1e:	e7f2      	b.n	800ca06 <GetUart+0xe>
 800ca20:	0801ab4c 	.word	0x0801ab4c
 800ca24:	20006c5c 	.word	0x20006c5c
 800ca28:	20006b78 	.word	0x20006b78
 800ca2c:	20006a18 	.word	0x20006a18
 800ca30:	20006a8c 	.word	0x20006a8c
 800ca34:	20006afc 	.word	0x20006afc
 800ca38:	20006be8 	.word	0x20006be8

0800ca3c <writePxMutex>:
{
 800ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3e:	46ce      	mov	lr, r9
 800ca40:	b500      	push	{lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	0006      	movs	r6, r0
 800ca46:	000f      	movs	r7, r1
 800ca48:	4691      	mov	r9, r2
 800ca4a:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800ca4c:	f7ff ffd4 	bl	800c9f8 <GetUart>
 800ca50:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800ca52:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d016      	beq.n	800ca86 <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ca58:	00b3      	lsls	r3, r6, #2
 800ca5a:	4a0d      	ldr	r2, [pc, #52]	; (800ca90 <writePxMutex+0x54>)
 800ca5c:	5898      	ldr	r0, [r3, r2]
 800ca5e:	9901      	ldr	r1, [sp, #4]
 800ca60:	f000 f93a 	bl	800ccd8 <osSemaphoreWait>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d10e      	bne.n	800ca86 <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	464a      	mov	r2, r9
 800ca6c:	0039      	movs	r1, r7
 800ca6e:	0028      	movs	r0, r5
 800ca70:	f004 fe9a 	bl	80117a8 <HAL_UART_Transmit>
 800ca74:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800ca76:	d001      	beq.n	800ca7c <writePxMutex+0x40>
 800ca78:	2803      	cmp	r0, #3
 800ca7a:	d1f5      	bne.n	800ca68 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800ca7c:	00b6      	lsls	r6, r6, #2
 800ca7e:	4b04      	ldr	r3, [pc, #16]	; (800ca90 <writePxMutex+0x54>)
 800ca80:	58f0      	ldr	r0, [r6, r3]
 800ca82:	f000 f957 	bl	800cd34 <osSemaphoreRelease>
}
 800ca86:	0020      	movs	r0, r4
 800ca88:	b002      	add	sp, #8
 800ca8a:	bc80      	pop	{r7}
 800ca8c:	46b9      	mov	r9, r7
 800ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca90:	200069c0 	.word	0x200069c0

0800ca94 <writePxITMutex>:
{
 800ca94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca96:	b083      	sub	sp, #12
 800ca98:	0004      	movs	r4, r0
 800ca9a:	9101      	str	r1, [sp, #4]
 800ca9c:	0017      	movs	r7, r2
 800ca9e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800caa0:	f7ff ffaa 	bl	800c9f8 <GetUart>
 800caa4:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800caa6:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800caa8:	2e00      	cmp	r6, #0
 800caaa:	d009      	beq.n	800cac0 <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800caac:	00a4      	lsls	r4, r4, #2
 800caae:	4b08      	ldr	r3, [pc, #32]	; (800cad0 <writePxITMutex+0x3c>)
 800cab0:	58e0      	ldr	r0, [r4, r3]
 800cab2:	0029      	movs	r1, r5
 800cab4:	f000 f910 	bl	800ccd8 <osSemaphoreWait>
 800cab8:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800caba:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <writePxITMutex+0x30>
}
 800cac0:	b003      	add	sp, #12
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800cac4:	003a      	movs	r2, r7
 800cac6:	9901      	ldr	r1, [sp, #4]
 800cac8:	0030      	movs	r0, r6
 800caca:	f004 fad8 	bl	801107e <HAL_UART_Transmit_IT>
 800cace:	e7f7      	b.n	800cac0 <writePxITMutex+0x2c>
 800cad0:	200069c0 	.word	0x200069c0

0800cad4 <writePxDMAMutex>:
{
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	b083      	sub	sp, #12
 800cad8:	0004      	movs	r4, r0
 800cada:	9101      	str	r1, [sp, #4]
 800cadc:	0017      	movs	r7, r2
 800cade:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800cae0:	f7ff ff8a 	bl	800c9f8 <GetUart>
 800cae4:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800cae6:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800cae8:	2e00      	cmp	r6, #0
 800caea:	d009      	beq.n	800cb00 <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800caec:	00a4      	lsls	r4, r4, #2
 800caee:	4b0a      	ldr	r3, [pc, #40]	; (800cb18 <writePxDMAMutex+0x44>)
 800caf0:	58e0      	ldr	r0, [r4, r3]
 800caf2:	0029      	movs	r1, r5
 800caf4:	f000 f8f0 	bl	800ccd8 <osSemaphoreWait>
 800caf8:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800cafa:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <writePxDMAMutex+0x30>
}
 800cb00:	b003      	add	sp, #12
 800cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800cb04:	0030      	movs	r0, r6
 800cb06:	f7ff f8ed 	bl	800bce4 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800cb0a:	003a      	movs	r2, r7
 800cb0c:	9901      	ldr	r1, [sp, #4]
 800cb0e:	0030      	movs	r0, r6
 800cb10:	f004 fb64 	bl	80111dc <HAL_UART_Transmit_DMA>
 800cb14:	e7f4      	b.n	800cb00 <writePxDMAMutex+0x2c>
 800cb16:	46c0      	nop			; (mov r8, r8)
 800cb18:	200069c0 	.word	0x200069c0

0800cb1c <UpdateBaudrate>:
{
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800cb20:	f7ff ff6a 	bl	800c9f8 <GetUart>
	huart->Init.BaudRate = baudrate;
 800cb24:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800cb26:	f004 feeb 	bl	8011900 <HAL_UART_Init>
}
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	bd10      	pop	{r4, pc}
	...

0800cb30 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800cb34:	d003      	beq.n	800cb3e <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800cb36:	2901      	cmp	r1, #1
 800cb38:	d002      	beq.n	800cb40 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800cb3a:	2900      	cmp	r1, #0
 800cb3c:	d016      	beq.n	800cb6c <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800cb40:	f7fd fffe 	bl	800ab40 <GetPort>
 800cb44:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <SwapUartPins+0x68>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	4d14      	ldr	r5, [pc, #80]	; (800cb9c <SwapUartPins+0x6c>)
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	3801      	subs	r0, #1
 800cb50:	2180      	movs	r1, #128	; 0x80
 800cb52:	0209      	lsls	r1, r1, #8
 800cb54:	000a      	movs	r2, r1
 800cb56:	4102      	asrs	r2, r0
 800cb58:	5b58      	ldrh	r0, [r3, r5]
 800cb5a:	4302      	orrs	r2, r0
 800cb5c:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cb5e:	2308      	movs	r3, #8
 800cb60:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800cb62:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800cb64:	0020      	movs	r0, r4
 800cb66:	f004 fecb 	bl	8011900 <HAL_UART_Init>
 800cb6a:	e7e8      	b.n	800cb3e <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cb6c:	f7fd ffe8 	bl	800ab40 <GetPort>
 800cb70:	4b09      	ldr	r3, [pc, #36]	; (800cb98 <SwapUartPins+0x68>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	4d09      	ldr	r5, [pc, #36]	; (800cb9c <SwapUartPins+0x6c>)
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	3801      	subs	r0, #1
 800cb7c:	2180      	movs	r1, #128	; 0x80
 800cb7e:	0209      	lsls	r1, r1, #8
 800cb80:	4101      	asrs	r1, r0
 800cb82:	5b5a      	ldrh	r2, [r3, r5]
 800cb84:	438a      	bics	r2, r1
 800cb86:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cb88:	2308      	movs	r3, #8
 800cb8a:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800cb90:	0020      	movs	r0, r4
 800cb92:	f004 feb5 	bl	8011900 <HAL_UART_Init>
}
 800cb96:	e7d2      	b.n	800cb3e <SwapUartPins+0xe>
 800cb98:	2000105c 	.word	0x2000105c
 800cb9c:	20006dc4 	.word	0x20006dc4

0800cba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800cba0:	4816      	ldr	r0, [pc, #88]	; (800cbfc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800cba2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800cba4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800cba6:	e003      	b.n	800cbb0 <LoopCopyDataInit>

0800cba8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800cba8:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800cbaa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800cbac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800cbae:	3104      	adds	r1, #4

0800cbb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800cbb0:	4814      	ldr	r0, [pc, #80]	; (800cc04 <LoopForever+0xc>)
  ldr r3, =_edata
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <LoopForever+0x10>)
  adds r2, r0, r1
 800cbb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800cbb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800cbb8:	d3f6      	bcc.n	800cba8 <CopyDataInit>
  ldr r2, =_sbss
 800cbba:	4a14      	ldr	r2, [pc, #80]	; (800cc0c <LoopForever+0x14>)
  b LoopFillZerobss
 800cbbc:	e002      	b.n	800cbc4 <LoopFillZerobss>

0800cbbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800cbbe:	2300      	movs	r3, #0
  str  r3, [r2]
 800cbc0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cbc2:	3204      	adds	r2, #4

0800cbc4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800cbc4:	4b12      	ldr	r3, [pc, #72]	; (800cc10 <LoopForever+0x18>)
  cmp r2, r3
 800cbc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800cbc8:	d3f9      	bcc.n	800cbbe <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800cbca:	4812      	ldr	r0, [pc, #72]	; (800cc14 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800cbcc:	4912      	ldr	r1, [pc, #72]	; (800cc18 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800cbce:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800cbd0:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800cbd2:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800cbd4:	d005      	beq.n	800cbe2 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800cbd6:	f000 f82b 	bl	800cc30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800cbda:	f005 f807 	bl	8011bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800cbde:	f004 ffe6 	bl	8011bae <main>

0800cbe2 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800cbe2:	480e      	ldr	r0, [pc, #56]	; (800cc1c <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800cbe4:	490e      	ldr	r1, [pc, #56]	; (800cc20 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800cbe6:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800cbe8:	480e      	ldr	r0, [pc, #56]	; (800cc24 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800cbea:	490d      	ldr	r1, [pc, #52]	; (800cc20 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800cbec:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800cbee:	480e      	ldr	r0, [pc, #56]	; (800cc28 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800cbf0:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800cbf2:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800cbf4:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800cbf6:	4700      	bx	r0

0800cbf8 <LoopForever>:


LoopForever:
    b LoopForever
 800cbf8:	e7fe      	b.n	800cbf8 <LoopForever>
 800cbfa:	0000      	.short	0x0000
  ldr   r0, =_estack
 800cbfc:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800cc00:	0801b1cc 	.word	0x0801b1cc
  ldr r0, =_sdata
 800cc04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800cc08:	20000a5c 	.word	0x20000a5c
  ldr r2, =_sbss
 800cc0c:	20000a60 	.word	0x20000a60
  ldr r3, = _ebss
 800cc10:	20006e68 	.word	0x20006e68
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800cc14:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800cc18:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800cc1c:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800cc20:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800cc24:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800cc28:	1fffd800 	.word	0x1fffd800

0800cc2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800cc2c:	e7fe      	b.n	800cc2c <ADC1_COMP_IRQHandler>
	...

0800cc30 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cc30:	4b11      	ldr	r3, [pc, #68]	; (800cc78 <SystemInit+0x48>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	2101      	movs	r1, #1
 800cc36:	430a      	orrs	r2, r1
 800cc38:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	480f      	ldr	r0, [pc, #60]	; (800cc7c <SystemInit+0x4c>)
 800cc3e:	4002      	ands	r2, r0
 800cc40:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	480e      	ldr	r0, [pc, #56]	; (800cc80 <SystemInit+0x50>)
 800cc46:	4002      	ands	r2, r0
 800cc48:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	480d      	ldr	r0, [pc, #52]	; (800cc84 <SystemInit+0x54>)
 800cc4e:	4002      	ands	r2, r0
 800cc50:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800cc52:	685a      	ldr	r2, [r3, #4]
 800cc54:	480c      	ldr	r0, [pc, #48]	; (800cc88 <SystemInit+0x58>)
 800cc56:	4002      	ands	r2, r0
 800cc58:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	200f      	movs	r0, #15
 800cc5e:	4382      	bics	r2, r0
 800cc60:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800cc62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc64:	4809      	ldr	r0, [pc, #36]	; (800cc8c <SystemInit+0x5c>)
 800cc66:	4002      	ands	r2, r0
 800cc68:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800cc6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc6c:	438a      	bics	r2, r1
 800cc6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cc70:	2200      	movs	r2, #0
 800cc72:	609a      	str	r2, [r3, #8]

}
 800cc74:	4770      	bx	lr
 800cc76:	46c0      	nop			; (mov r8, r8)
 800cc78:	40021000 	.word	0x40021000
 800cc7c:	08ffb80c 	.word	0x08ffb80c
 800cc80:	fef6ffff 	.word	0xfef6ffff
 800cc84:	fffbffff 	.word	0xfffbffff
 800cc88:	ffc0ffff 	.word	0xffc0ffff
 800cc8c:	fff0feac 	.word	0xfff0feac

0800cc90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cc90:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800cc92:	f000 ff7d 	bl	800db90 <vTaskStartScheduler>
  
  return osOK;
}
 800cc96:	2000      	movs	r0, #0
 800cc98:	bd10      	pop	{r4, pc}

0800cc9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cc9a:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d100      	bne.n	800cca2 <osDelay+0x8>
 800cca0:	3001      	adds	r0, #1
 800cca2:	f001 f8bd 	bl	800de20 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cca6:	2000      	movs	r0, #0
 800cca8:	bd10      	pop	{r4, pc}

0800ccaa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800ccae:	2901      	cmp	r1, #1
 800ccb0:	d005      	beq.n	800ccbe <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	f000 fb06 	bl	800d2c4 <xQueueCreateCountingSemaphore>
 800ccb8:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800ccba:	0020      	movs	r0, r4
 800ccbc:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800ccbe:	2203      	movs	r2, #3
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	f000 fada 	bl	800d27a <xQueueGenericCreate>
 800ccc6:	1e04      	subs	r4, r0, #0
 800ccc8:	d0f7      	beq.n	800ccba <osSemaphoreCreate+0x10>
 800ccca:	2300      	movs	r3, #0
 800cccc:	2200      	movs	r2, #0
 800ccce:	2100      	movs	r1, #0
 800ccd0:	f000 fb0c 	bl	800d2ec <xQueueGenericSend>
 800ccd4:	e7f1      	b.n	800ccba <osSemaphoreCreate+0x10>
	...

0800ccd8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ccd8:	b500      	push	{lr}
 800ccda:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d020      	beq.n	800cd26 <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cce4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00e      	beq.n	800cd0a <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ccec:	aa01      	add	r2, sp, #4
 800ccee:	2100      	movs	r1, #0
 800ccf0:	f000 fcc7 	bl	800d682 <xQueueReceiveFromISR>
 800ccf4:	2801      	cmp	r0, #1
 800ccf6:	d118      	bne.n	800cd2a <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ccf8:	9801      	ldr	r0, [sp, #4]
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d011      	beq.n	800cd22 <osSemaphoreWait+0x4a>
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <osSemaphoreWait+0x58>)
 800cd00:	2280      	movs	r2, #128	; 0x80
 800cd02:	0552      	lsls	r2, r2, #21
 800cd04:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800cd06:	2000      	movs	r0, #0
 800cd08:	e00b      	b.n	800cd22 <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	000a      	movs	r2, r1
 800cd0e:	2100      	movs	r1, #0
 800cd10:	f000 fc0c 	bl	800d52c <xQueueGenericReceive>
    return osErrorOS;
 800cd14:	3801      	subs	r0, #1
 800cd16:	4243      	negs	r3, r0
 800cd18:	4158      	adcs	r0, r3
 800cd1a:	4240      	negs	r0, r0
 800cd1c:	23fe      	movs	r3, #254	; 0xfe
 800cd1e:	4398      	bics	r0, r3
 800cd20:	30ff      	adds	r0, #255	; 0xff
}
 800cd22:	b003      	add	sp, #12
 800cd24:	bd00      	pop	{pc}
    return osErrorParameter;
 800cd26:	2080      	movs	r0, #128	; 0x80
 800cd28:	e7fb      	b.n	800cd22 <osSemaphoreWait+0x4a>
      return osErrorOS;
 800cd2a:	20ff      	movs	r0, #255	; 0xff
 800cd2c:	e7f9      	b.n	800cd22 <osSemaphoreWait+0x4a>
 800cd2e:	46c0      	nop			; (mov r8, r8)
 800cd30:	e000ed04 	.word	0xe000ed04

0800cd34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cd34:	b510      	push	{r4, lr}
 800cd36:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800cd40:	2c00      	cmp	r4, #0
 800cd42:	d00d      	beq.n	800cd60 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cd44:	a901      	add	r1, sp, #4
 800cd46:	f000 fbb5 	bl	800d4b4 <xQueueGiveFromISR>
 800cd4a:	2801      	cmp	r0, #1
 800cd4c:	d113      	bne.n	800cd76 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800cd4e:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cd50:	9b01      	ldr	r3, [sp, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00c      	beq.n	800cd70 <osSemaphoreRelease+0x3c>
 800cd56:	4b09      	ldr	r3, [pc, #36]	; (800cd7c <osSemaphoreRelease+0x48>)
 800cd58:	2280      	movs	r2, #128	; 0x80
 800cd5a:	0552      	lsls	r2, r2, #21
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	e007      	b.n	800cd70 <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800cd60:	2300      	movs	r3, #0
 800cd62:	2200      	movs	r2, #0
 800cd64:	2100      	movs	r1, #0
 800cd66:	f000 fac1 	bl	800d2ec <xQueueGenericSend>
 800cd6a:	2801      	cmp	r0, #1
 800cd6c:	d000      	beq.n	800cd70 <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800cd6e:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800cd70:	0020      	movs	r0, r4
 800cd72:	b002      	add	sp, #8
 800cd74:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800cd76:	24ff      	movs	r4, #255	; 0xff
 800cd78:	e7fa      	b.n	800cd70 <osSemaphoreRelease+0x3c>
 800cd7a:	46c0      	nop			; (mov r8, r8)
 800cd7c:	e000ed04 	.word	0xe000ed04

0800cd80 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800cd80:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800cd82:	f001 fa41 	bl	800e208 <xTaskGetSchedulerState>
 800cd86:	2801      	cmp	r0, #1
 800cd88:	d100      	bne.n	800cd8c <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800cd8a:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800cd8c:	f001 fed0 	bl	800eb30 <xPortSysTickHandler>
}
 800cd90:	e7fb      	b.n	800cd8a <osSystickHandler+0xa>
	...

0800cd94 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800cd98:	d011      	beq.n	800cdbe <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800cd9a:	2008      	movs	r0, #8
 800cd9c:	f001 ff04 	bl	800eba8 <pvPortMalloc>
 800cda0:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800cda2:	d00e      	beq.n	800cdc2 <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800cda4:	f001 fe7e 	bl	800eaa4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800cda8:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800cdae:	4b06      	ldr	r3, [pc, #24]	; (800cdc8 <FreeRTOS_CLIRegisterCommand+0x34>)
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800cdb4:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800cdb6:	f001 fe81 	bl	800eabc <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800cdba:	2001      	movs	r0, #1
 800cdbc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800cdbe:	b672      	cpsid	i
 800cdc0:	e7fe      	b.n	800cdc0 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800cdc2:	b672      	cpsid	i
 800cdc4:	e7fe      	b.n	800cdc4 <FreeRTOS_CLIRegisterCommand+0x30>
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	20000094 	.word	0x20000094

0800cdcc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800cdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdce:	46de      	mov	lr, fp
 800cdd0:	4657      	mov	r7, sl
 800cdd2:	464e      	mov	r6, r9
 800cdd4:	4645      	mov	r5, r8
 800cdd6:	b5e0      	push	{r5, r6, r7, lr}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	0006      	movs	r6, r0
 800cddc:	4689      	mov	r9, r1
 800cdde:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800cde0:	4b3b      	ldr	r3, [pc, #236]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d012      	beq.n	800ce0e <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	0032      	movs	r2, r6
 800cdee:	9901      	ldr	r1, [sp, #4]
 800cdf0:	4648      	mov	r0, r9
 800cdf2:	4798      	blx	r3
 800cdf4:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800cdf6:	d102      	bne.n	800cdfe <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800cdf8:	4b35      	ldr	r3, [pc, #212]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800cdfe:	0028      	movs	r0, r5
 800ce00:	b003      	add	sp, #12
 800ce02:	bcf0      	pop	{r4, r5, r6, r7}
 800ce04:	46bb      	mov	fp, r7
 800ce06:	46b2      	mov	sl, r6
 800ce08:	46a9      	mov	r9, r5
 800ce0a:	46a0      	mov	r8, r4
 800ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ce0e:	4c31      	ldr	r4, [pc, #196]	; (800ced4 <FreeRTOS_CLIProcessCommand+0x108>)
 800ce10:	4b2f      	ldr	r3, [pc, #188]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800ce12:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ce14:	2320      	movs	r3, #32
 800ce16:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ce18:	4b2d      	ldr	r3, [pc, #180]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800ce1a:	469b      	mov	fp, r3
 800ce1c:	e00a      	b.n	800ce34 <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ce1e:	0029      	movs	r1, r5
 800ce20:	0030      	movs	r0, r6
 800ce22:	f005 fb7e 	bl	8012522 <strncmp>
 800ce26:	1e05      	subs	r5, r0, #0
 800ce28:	d012      	beq.n	800ce50 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ce2a:	6864      	ldr	r4, [r4, #4]
 800ce2c:	465b      	mov	r3, fp
 800ce2e:	601c      	str	r4, [r3, #0]
 800ce30:	2c00      	cmp	r4, #0
 800ce32:	d015      	beq.n	800ce60 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ce34:	6827      	ldr	r7, [r4, #0]
 800ce36:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ce38:	0028      	movs	r0, r5
 800ce3a:	f7f3 f96d 	bl	8000118 <strlen>
 800ce3e:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ce40:	5c33      	ldrb	r3, [r6, r0]
 800ce42:	4651      	mov	r1, sl
 800ce44:	438b      	bics	r3, r1
 800ce46:	b259      	sxtb	r1, r3
 800ce48:	4688      	mov	r8, r1
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1ed      	bne.n	800ce2a <FreeRTOS_CLIProcessCommand+0x5e>
 800ce4e:	e7e6      	b.n	800ce1e <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ce50:	7b3f      	ldrb	r7, [r7, #12]
 800ce52:	b27f      	sxtb	r7, r7
 800ce54:	2f00      	cmp	r7, #0
 800ce56:	da0a      	bge.n	800ce6e <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ce58:	4b1d      	ldr	r3, [pc, #116]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1c3      	bne.n	800cde8 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ce60:	9a01      	ldr	r2, [sp, #4]
 800ce62:	491d      	ldr	r1, [pc, #116]	; (800ced8 <FreeRTOS_CLIProcessCommand+0x10c>)
 800ce64:	4648      	mov	r0, r9
 800ce66:	f005 fb6d 	bl	8012544 <strncpy>
		xReturn = pdFALSE;
 800ce6a:	2500      	movs	r5, #0
	return xReturn;
 800ce6c:	e7c7      	b.n	800cdfe <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ce6e:	2300      	movs	r3, #0
 800ce70:	56f3      	ldrsb	r3, [r6, r3]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d02a      	beq.n	800cecc <FreeRTOS_CLIProcessCommand+0x100>
 800ce76:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ce78:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ce7a:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800ce7c:	2001      	movs	r0, #1
 800ce7e:	e00b      	b.n	800ce98 <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800ce80:	2a01      	cmp	r2, #1
 800ce82:	d004      	beq.n	800ce8e <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800ce84:	4643      	mov	r3, r8
 800ce86:	3301      	adds	r3, #1
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800ce8c:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800ce8e:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800ce90:	2300      	movs	r3, #0
 800ce92:	56e3      	ldrsb	r3, [r4, r3]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	d0f1      	beq.n	800ce80 <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800ce9c:	000a      	movs	r2, r1
 800ce9e:	e7f6      	b.n	800ce8e <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800cea0:	2a01      	cmp	r2, #1
 800cea2:	d00e      	beq.n	800cec2 <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800cea4:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0d9      	beq.n	800ce60 <FreeRTOS_CLIProcessCommand+0x94>
 800ceac:	4547      	cmp	r7, r8
 800ceae:	d09b      	beq.n	800cde8 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ceb0:	9a01      	ldr	r2, [sp, #4]
 800ceb2:	490a      	ldr	r1, [pc, #40]	; (800cedc <FreeRTOS_CLIProcessCommand+0x110>)
 800ceb4:	4648      	mov	r0, r9
 800ceb6:	f005 fb45 	bl	8012544 <strncpy>
		pxCommand = NULL;
 800ceba:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <FreeRTOS_CLIProcessCommand+0x104>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	e79d      	b.n	800cdfe <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800cec2:	4643      	mov	r3, r8
 800cec4:	3b01      	subs	r3, #1
 800cec6:	b25b      	sxtb	r3, r3
 800cec8:	4698      	mov	r8, r3
 800ceca:	e7eb      	b.n	800cea4 <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800cecc:	4698      	mov	r8, r3
 800cece:	e7e9      	b.n	800cea4 <FreeRTOS_CLIProcessCommand+0xd8>
 800ced0:	20001ccc 	.word	0x20001ccc
 800ced4:	20000098 	.word	0x20000098
 800ced8:	0801abc0 	.word	0x0801abc0
 800cedc:	0801ab68 	.word	0x0801ab68

0800cee0 <FreeRTOS_CLIGetOutputBuffer>:
}
 800cee0:	4800      	ldr	r0, [pc, #0]	; (800cee4 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800cee2:	4770      	bx	lr
 800cee4:	20001a64 	.word	0x20001a64

0800cee8 <FreeRTOS_CLIGetParameter>:
{
 800cee8:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ceee:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800cef0:	e00d      	b.n	800cf0e <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800cef2:	2300      	movs	r3, #0
 800cef4:	56c3      	ldrsb	r3, [r0, r3]
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	d104      	bne.n	800cf04 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800cefa:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800cefc:	2300      	movs	r3, #0
 800cefe:	56c3      	ldrsb	r3, [r0, r3]
 800cf00:	2b20      	cmp	r3, #32
 800cf02:	d0fa      	beq.n	800cefa <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d029      	beq.n	800cf5c <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800cf08:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800cf0a:	42a1      	cmp	r1, r4
 800cf0c:	d00f      	beq.n	800cf2e <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800cf0e:	428c      	cmp	r4, r1
 800cf10:	d026      	beq.n	800cf60 <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cf12:	2300      	movs	r3, #0
 800cf14:	56c3      	ldrsb	r3, [r0, r3]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d006      	beq.n	800cf28 <FreeRTOS_CLIGetParameter+0x40>
 800cf1a:	2b20      	cmp	r3, #32
 800cf1c:	d0e9      	beq.n	800cef2 <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800cf1e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cf20:	2300      	movs	r3, #0
 800cf22:	56c3      	ldrsb	r3, [r0, r3]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1f8      	bne.n	800cf1a <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800cf28:	2300      	movs	r3, #0
 800cf2a:	56c3      	ldrsb	r3, [r0, r3]
 800cf2c:	e7ea      	b.n	800cf04 <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cf2e:	2300      	movs	r3, #0
 800cf30:	56c3      	ldrsb	r3, [r0, r3]
 800cf32:	0001      	movs	r1, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00f      	beq.n	800cf58 <FreeRTOS_CLIGetParameter+0x70>
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d007      	beq.n	800cf4c <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800cf3c:	6813      	ldr	r3, [r2, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800cf42:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cf44:	2300      	movs	r3, #0
 800cf46:	56cb      	ldrsb	r3, [r1, r3]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f5      	bne.n	800cf38 <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800cf4c:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800cf4e:	1e5a      	subs	r2, r3, #1
 800cf50:	4193      	sbcs	r3, r2
 800cf52:	425b      	negs	r3, r3
 800cf54:	4018      	ands	r0, r3
 800cf56:	e004      	b.n	800cf62 <FreeRTOS_CLIGetParameter+0x7a>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e002      	b.n	800cf62 <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	e000      	b.n	800cf62 <FreeRTOS_CLIGetParameter+0x7a>
 800cf60:	2000      	movs	r0, #0
}
 800cf62:	bd10      	pop	{r4, pc}

0800cf64 <prvHelpCommand>:
{
 800cf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf66:	46c6      	mov	lr, r8
 800cf68:	b500      	push	{lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	0005      	movs	r5, r0
 800cf6e:	000c      	movs	r4, r1
 800cf70:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800cf76:	aa01      	add	r2, sp, #4
 800cf78:	2101      	movs	r1, #1
 800cf7a:	f7ff ffb5 	bl	800cee8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d02a      	beq.n	800cfd8 <prvHelpCommand+0x74>
 800cf82:	2206      	movs	r2, #6
 800cf84:	4932      	ldr	r1, [pc, #200]	; (800d050 <prvHelpCommand+0xec>)
 800cf86:	f005 facc 	bl	8012522 <strncmp>
 800cf8a:	1e06      	subs	r6, r0, #0
 800cf8c:	d14b      	bne.n	800d026 <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800cf8e:	4b31      	ldr	r3, [pc, #196]	; (800d054 <prvHelpCommand+0xf0>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b07      	cmp	r3, #7
 800cf94:	d015      	beq.n	800cfc2 <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	4690      	mov	r8, r2
 800cf9c:	4a2d      	ldr	r2, [pc, #180]	; (800d054 <prvHelpCommand+0xf0>)
 800cf9e:	4641      	mov	r1, r8
 800cfa0:	7011      	strb	r1, [r2, #0]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4a2c      	ldr	r2, [pc, #176]	; (800d058 <prvHelpCommand+0xf4>)
 800cfa6:	5899      	ldr	r1, [r3, r2]
 800cfa8:	0022      	movs	r2, r4
 800cfaa:	0028      	movs	r0, r5
 800cfac:	f005 faca 	bl	8012544 <strncpy>
			xReturn = pdTRUE;
 800cfb0:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800cfb2:	4643      	mov	r3, r8
 800cfb4:	2b07      	cmp	r3, #7
 800cfb6:	d136      	bne.n	800d026 <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800cfb8:	4b26      	ldr	r3, [pc, #152]	; (800d054 <prvHelpCommand+0xf0>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	701a      	strb	r2, [r3, #0]
 800cfbe:	0037      	movs	r7, r6
 800cfc0:	e031      	b.n	800d026 <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800cfc2:	4b24      	ldr	r3, [pc, #144]	; (800d054 <prvHelpCommand+0xf0>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	701a      	strb	r2, [r3, #0]
 800cfc8:	4b23      	ldr	r3, [pc, #140]	; (800d058 <prvHelpCommand+0xf4>)
 800cfca:	6819      	ldr	r1, [r3, #0]
 800cfcc:	0022      	movs	r2, r4
 800cfce:	0028      	movs	r0, r5
 800cfd0:	f005 fab8 	bl	8012544 <strncpy>
			xReturn = pdTRUE;
 800cfd4:	2701      	movs	r7, #1
 800cfd6:	e026      	b.n	800d026 <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800cfd8:	4b20      	ldr	r3, [pc, #128]	; (800d05c <prvHelpCommand+0xf8>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d027      	beq.n	800d030 <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800cfe0:	4b1f      	ldr	r3, [pc, #124]	; (800d060 <prvHelpCommand+0xfc>)
 800cfe2:	781e      	ldrb	r6, [r3, #0]
 800cfe4:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <prvHelpCommand+0x100>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	42b3      	cmp	r3, r6
 800cfea:	d228      	bcs.n	800d03e <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800cfec:	0022      	movs	r2, r4
 800cfee:	3a08      	subs	r2, #8
 800cff0:	4b1a      	ldr	r3, [pc, #104]	; (800d05c <prvHelpCommand+0xf8>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6859      	ldr	r1, [r3, #4]
 800cff8:	0028      	movs	r0, r5
 800cffa:	3008      	adds	r0, #8
 800cffc:	f005 faa2 	bl	8012544 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d000:	1c68      	adds	r0, r5, #1
 800d002:	4919      	ldr	r1, [pc, #100]	; (800d068 <prvHelpCommand+0x104>)
 800d004:	f005 fa85 	bl	8012512 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d008:	2328      	movs	r3, #40	; 0x28
 800d00a:	702b      	strb	r3, [r5, #0]
 800d00c:	3301      	adds	r3, #1
 800d00e:	71ab      	strb	r3, [r5, #6]
 800d010:	3b09      	subs	r3, #9
 800d012:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800d014:	4b11      	ldr	r3, [pc, #68]	; (800d05c <prvHelpCommand+0xf8>)
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	6857      	ldr	r7, [r2, #4]
 800d01a:	601f      	str	r7, [r3, #0]
		counter++;
 800d01c:	3601      	adds	r6, #1
 800d01e:	4b10      	ldr	r3, [pc, #64]	; (800d060 <prvHelpCommand+0xfc>)
 800d020:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800d022:	1e7b      	subs	r3, r7, #1
 800d024:	419f      	sbcs	r7, r3
}
 800d026:	0038      	movs	r0, r7
 800d028:	b002      	add	sp, #8
 800d02a:	bc80      	pop	{r7}
 800d02c:	46b8      	mov	r8, r7
 800d02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800d030:	4b0a      	ldr	r3, [pc, #40]	; (800d05c <prvHelpCommand+0xf8>)
 800d032:	4a0e      	ldr	r2, [pc, #56]	; (800d06c <prvHelpCommand+0x108>)
 800d034:	601a      	str	r2, [r3, #0]
			counter = 1;
 800d036:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <prvHelpCommand+0xfc>)
 800d038:	2201      	movs	r2, #1
 800d03a:	701a      	strb	r2, [r3, #0]
 800d03c:	e7d0      	b.n	800cfe0 <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d03e:	4b07      	ldr	r3, [pc, #28]	; (800d05c <prvHelpCommand+0xf8>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6859      	ldr	r1, [r3, #4]
 800d046:	0022      	movs	r2, r4
 800d048:	0028      	movs	r0, r5
 800d04a:	f005 fa7b 	bl	8012544 <strncpy>
 800d04e:	e7e1      	b.n	800d014 <prvHelpCommand+0xb0>
 800d050:	08019330 	.word	0x08019330
 800d054:	20001cd4 	.word	0x20001cd4
 800d058:	20000054 	.word	0x20000054
 800d05c:	20001cd0 	.word	0x20001cd0
 800d060:	20001cc8 	.word	0x20001cc8
 800d064:	200068c4 	.word	0x200068c4
 800d068:	08018848 	.word	0x08018848
 800d06c:	20000098 	.word	0x20000098

0800d070 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d070:	0003      	movs	r3, r0
 800d072:	3308      	adds	r3, #8
 800d074:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d076:	2201      	movs	r2, #1
 800d078:	4252      	negs	r2, r2
 800d07a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d07c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d07e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d080:	2300      	movs	r3, #0
 800d082:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d084:	4770      	bx	lr

0800d086 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d086:	2300      	movs	r3, #0
 800d088:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d08a:	4770      	bx	lr

0800d08c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d08c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d08e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d090:	689a      	ldr	r2, [r3, #8]
 800d092:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d094:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d096:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d098:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d09a:	6803      	ldr	r3, [r0, #0]
 800d09c:	3301      	adds	r3, #1
 800d09e:	6003      	str	r3, [r0, #0]
}
 800d0a0:	4770      	bx	lr

0800d0a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0a2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0a4:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0a6:	0003      	movs	r3, r0
 800d0a8:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d0aa:	1c62      	adds	r2, r4, #1
 800d0ac:	d00e      	beq.n	800d0cc <vListInsert+0x2a>
 800d0ae:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	681d      	ldr	r5, [r3, #0]
 800d0b4:	42a5      	cmp	r5, r4
 800d0b6:	d9fa      	bls.n	800d0ae <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0b8:	6853      	ldr	r3, [r2, #4]
 800d0ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0bc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0be:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0c0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d0c2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d0c4:	6803      	ldr	r3, [r0, #0]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	6003      	str	r3, [r0, #0]
}
 800d0ca:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0cc:	6902      	ldr	r2, [r0, #16]
 800d0ce:	e7f3      	b.n	800d0b8 <vListInsert+0x16>

0800d0d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d0d0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0d2:	6841      	ldr	r1, [r0, #4]
 800d0d4:	6882      	ldr	r2, [r0, #8]
 800d0d6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0d8:	6841      	ldr	r1, [r0, #4]
 800d0da:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	4282      	cmp	r2, r0
 800d0e0:	d005      	beq.n	800d0ee <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	1e50      	subs	r0, r2, #1
 800d0ea:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d0ec:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0ee:	6882      	ldr	r2, [r0, #8]
 800d0f0:	605a      	str	r2, [r3, #4]
 800d0f2:	e7f6      	b.n	800d0e2 <uxListRemove+0x12>

0800d0f4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d0f4:	b570      	push	{r4, r5, r6, lr}
 800d0f6:	0004      	movs	r4, r0
 800d0f8:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d10d      	bne.n	800d11c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800d100:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d10a:	3301      	adds	r3, #1
 800d10c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d110:	6860      	ldr	r0, [r4, #4]
 800d112:	f001 f8c7 	bl	800e2a4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	6063      	str	r3, [r4, #4]
 800d11a:	e7f5      	b.n	800d108 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800d11c:	2d00      	cmp	r5, #0
 800d11e:	d10e      	bne.n	800d13e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d120:	6880      	ldr	r0, [r0, #8]
 800d122:	f004 ffbd 	bl	80120a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d126:	68a3      	ldr	r3, [r4, #8]
 800d128:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d12a:	4694      	mov	ip, r2
 800d12c:	4463      	add	r3, ip
 800d12e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800d130:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d132:	6862      	ldr	r2, [r4, #4]
 800d134:	4293      	cmp	r3, r2
 800d136:	d3e7      	bcc.n	800d108 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	60a3      	str	r3, [r4, #8]
 800d13c:	e7e4      	b.n	800d108 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d13e:	68c0      	ldr	r0, [r0, #12]
 800d140:	f004 ffae 	bl	80120a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d146:	425a      	negs	r2, r3
 800d148:	68e1      	ldr	r1, [r4, #12]
 800d14a:	1acb      	subs	r3, r1, r3
 800d14c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d14e:	6821      	ldr	r1, [r4, #0]
 800d150:	428b      	cmp	r3, r1
 800d152:	d203      	bcs.n	800d15c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	469c      	mov	ip, r3
 800d158:	4462      	add	r2, ip
 800d15a:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800d15c:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800d15e:	2d02      	cmp	r5, #2
 800d160:	d1d2      	bne.n	800d108 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d164:	2b00      	cmp	r3, #0
 800d166:	d0cf      	beq.n	800d108 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800d168:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d16a:	3b01      	subs	r3, #1
 800d16c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d16e:	e7cb      	b.n	800d108 <prvCopyDataToQueue+0x14>

0800d170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d170:	b510      	push	{r4, lr}
 800d172:	0003      	movs	r3, r0
 800d174:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d178:	2a00      	cmp	r2, #0
 800d17a:	d00a      	beq.n	800d192 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d17c:	68d9      	ldr	r1, [r3, #12]
 800d17e:	1889      	adds	r1, r1, r2
 800d180:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d182:	685c      	ldr	r4, [r3, #4]
 800d184:	42a1      	cmp	r1, r4
 800d186:	d301      	bcc.n	800d18c <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d188:	6819      	ldr	r1, [r3, #0]
 800d18a:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d18c:	68d9      	ldr	r1, [r3, #12]
 800d18e:	f004 ff87 	bl	80120a0 <memcpy>
	}
}
 800d192:	bd10      	pop	{r4, pc}

0800d194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d198:	f001 fc84 	bl	800eaa4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d19c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	dd13      	ble.n	800d1ca <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1a2:	0025      	movs	r5, r4
 800d1a4:	3524      	adds	r5, #36	; 0x24
 800d1a6:	e007      	b.n	800d1b8 <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800d1a8:	f001 f828 	bl	800e1fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800d1ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d1b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	dd08      	ble.n	800d1ca <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d005      	beq.n	800d1ca <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1be:	0028      	movs	r0, r5
 800d1c0:	f000 ff9a 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d0f1      	beq.n	800d1ac <prvUnlockQueue+0x18>
 800d1c8:	e7ee      	b.n	800d1a8 <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	425b      	negs	r3, r3
 800d1ce:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800d1d0:	f001 fc74 	bl	800eabc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1d4:	f001 fc66 	bl	800eaa4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d1d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dd13      	ble.n	800d206 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1de:	0025      	movs	r5, r4
 800d1e0:	3510      	adds	r5, #16
 800d1e2:	e007      	b.n	800d1f4 <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800d1e4:	f001 f80a 	bl	800e1fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800d1e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d1ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	dd08      	ble.n	800d206 <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fa:	0028      	movs	r0, r5
 800d1fc:	f000 ff7c 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d200:	2800      	cmp	r0, #0
 800d202:	d0f1      	beq.n	800d1e8 <prvUnlockQueue+0x54>
 800d204:	e7ee      	b.n	800d1e4 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800d206:	2301      	movs	r3, #1
 800d208:	425b      	negs	r3, r3
 800d20a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d20c:	f001 fc56 	bl	800eabc <vPortExitCritical>
}
 800d210:	bd70      	pop	{r4, r5, r6, pc}

0800d212 <xQueueGenericReset>:
{
 800d212:	b570      	push	{r4, r5, r6, lr}
 800d214:	0004      	movs	r4, r0
 800d216:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800d218:	2800      	cmp	r0, #0
 800d21a:	d01a      	beq.n	800d252 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800d21c:	f001 fc42 	bl	800eaa4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d220:	6822      	ldr	r2, [r4, #0]
 800d222:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d224:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d226:	434b      	muls	r3, r1
 800d228:	18d0      	adds	r0, r2, r3
 800d22a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d22c:	2000      	movs	r0, #0
 800d22e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d230:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d232:	1a5b      	subs	r3, r3, r1
 800d234:	18d3      	adds	r3, r2, r3
 800d236:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800d238:	2301      	movs	r3, #1
 800d23a:	425b      	negs	r3, r3
 800d23c:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800d23e:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800d240:	2d00      	cmp	r5, #0
 800d242:	d111      	bne.n	800d268 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d105      	bne.n	800d256 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800d24a:	f001 fc37 	bl	800eabc <vPortExitCritical>
}
 800d24e:	2001      	movs	r0, #1
 800d250:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800d252:	b672      	cpsid	i
 800d254:	e7fe      	b.n	800d254 <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d256:	0020      	movs	r0, r4
 800d258:	3010      	adds	r0, #16
 800d25a:	f000 ff4d 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d25e:	2801      	cmp	r0, #1
 800d260:	d1f3      	bne.n	800d24a <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800d262:	f001 fc13 	bl	800ea8c <vPortYield>
 800d266:	e7f0      	b.n	800d24a <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d268:	0020      	movs	r0, r4
 800d26a:	3010      	adds	r0, #16
 800d26c:	f7ff ff00 	bl	800d070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d270:	0020      	movs	r0, r4
 800d272:	3024      	adds	r0, #36	; 0x24
 800d274:	f7ff fefc 	bl	800d070 <vListInitialise>
 800d278:	e7e7      	b.n	800d24a <xQueueGenericReset+0x38>

0800d27a <xQueueGenericCreate>:
{
 800d27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27c:	0005      	movs	r5, r0
 800d27e:	000e      	movs	r6, r1
 800d280:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d282:	2800      	cmp	r0, #0
 800d284:	d101      	bne.n	800d28a <xQueueGenericCreate+0x10>
 800d286:	b672      	cpsid	i
 800d288:	e7fe      	b.n	800d288 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d28a:	2900      	cmp	r1, #0
 800d28c:	d013      	beq.n	800d2b6 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d28e:	0008      	movs	r0, r1
 800d290:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d292:	3055      	adds	r0, #85	; 0x55
 800d294:	f001 fc88 	bl	800eba8 <pvPortMalloc>
 800d298:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800d29a:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800d29c:	2c00      	cmp	r4, #0
 800d29e:	d00f      	beq.n	800d2c0 <xQueueGenericCreate+0x46>
 800d2a0:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800d2a2:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800d2a4:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d2a6:	2101      	movs	r1, #1
 800d2a8:	0020      	movs	r0, r4
 800d2aa:	f7ff ffb2 	bl	800d212 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800d2ae:	2350      	movs	r3, #80	; 0x50
 800d2b0:	54e7      	strb	r7, [r4, r3]
}
 800d2b2:	0020      	movs	r0, r4
 800d2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d2b6:	2054      	movs	r0, #84	; 0x54
 800d2b8:	f001 fc76 	bl	800eba8 <pvPortMalloc>
 800d2bc:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d2be:	d1ef      	bne.n	800d2a0 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800d2c0:	b672      	cpsid	i
 800d2c2:	e7fe      	b.n	800d2c2 <xQueueGenericCreate+0x48>

0800d2c4 <xQueueCreateCountingSemaphore>:
	{
 800d2c4:	b510      	push	{r4, lr}
 800d2c6:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d101      	bne.n	800d2d0 <xQueueCreateCountingSemaphore+0xc>
 800d2cc:	b672      	cpsid	i
 800d2ce:	e7fe      	b.n	800d2ce <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d2d0:	4288      	cmp	r0, r1
 800d2d2:	d201      	bcs.n	800d2d8 <xQueueCreateCountingSemaphore+0x14>
 800d2d4:	b672      	cpsid	i
 800d2d6:	e7fe      	b.n	800d2d6 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d2d8:	2202      	movs	r2, #2
 800d2da:	2100      	movs	r1, #0
 800d2dc:	f7ff ffcd 	bl	800d27a <xQueueGenericCreate>
		if( xHandle != NULL )
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d001      	beq.n	800d2e8 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d2e4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800d2e6:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800d2e8:	b672      	cpsid	i
 800d2ea:	e7fe      	b.n	800d2ea <xQueueCreateCountingSemaphore+0x26>

0800d2ec <xQueueGenericSend>:
{
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	46ce      	mov	lr, r9
 800d2f0:	4647      	mov	r7, r8
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b085      	sub	sp, #20
 800d2f6:	0004      	movs	r4, r0
 800d2f8:	000e      	movs	r6, r1
 800d2fa:	9201      	str	r2, [sp, #4]
 800d2fc:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d008      	beq.n	800d314 <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d302:	2900      	cmp	r1, #0
 800d304:	d008      	beq.n	800d318 <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d306:	2d02      	cmp	r5, #2
 800d308:	d10b      	bne.n	800d322 <xQueueGenericSend+0x36>
 800d30a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d008      	beq.n	800d322 <xQueueGenericSend+0x36>
 800d310:	b672      	cpsid	i
 800d312:	e7fe      	b.n	800d312 <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800d314:	b672      	cpsid	i
 800d316:	e7fe      	b.n	800d316 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d318:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0f3      	beq.n	800d306 <xQueueGenericSend+0x1a>
 800d31e:	b672      	cpsid	i
 800d320:	e7fe      	b.n	800d320 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d322:	f000 ff71 	bl	800e208 <xTaskGetSchedulerState>
 800d326:	2800      	cmp	r0, #0
 800d328:	d104      	bne.n	800d334 <xQueueGenericSend+0x48>
 800d32a:	9b01      	ldr	r3, [sp, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d005      	beq.n	800d33c <xQueueGenericSend+0x50>
 800d330:	b672      	cpsid	i
 800d332:	e7fe      	b.n	800d332 <xQueueGenericSend+0x46>
 800d334:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800d336:	2300      	movs	r3, #0
 800d338:	4698      	mov	r8, r3
 800d33a:	e033      	b.n	800d3a4 <xQueueGenericSend+0xb8>
 800d33c:	2700      	movs	r7, #0
 800d33e:	e7fa      	b.n	800d336 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d340:	002a      	movs	r2, r5
 800d342:	0031      	movs	r1, r6
 800d344:	0020      	movs	r0, r4
 800d346:	f7ff fed5 	bl	800d0f4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d34a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d109      	bne.n	800d364 <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800d350:	2800      	cmp	r0, #0
 800d352:	d110      	bne.n	800d376 <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800d354:	f001 fbb2 	bl	800eabc <vPortExitCritical>
				return pdPASS;
 800d358:	2001      	movs	r0, #1
}
 800d35a:	b005      	add	sp, #20
 800d35c:	bcc0      	pop	{r6, r7}
 800d35e:	46b9      	mov	r9, r7
 800d360:	46b0      	mov	r8, r6
 800d362:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800d364:	0020      	movs	r0, r4
 800d366:	3024      	adds	r0, #36	; 0x24
 800d368:	f000 fec6 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d36c:	2801      	cmp	r0, #1
 800d36e:	d1f1      	bne.n	800d354 <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800d370:	f001 fb8c 	bl	800ea8c <vPortYield>
 800d374:	e7ee      	b.n	800d354 <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800d376:	f001 fb89 	bl	800ea8c <vPortYield>
 800d37a:	e7eb      	b.n	800d354 <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800d37c:	f001 fb9e 	bl	800eabc <vPortExitCritical>
					return errQUEUE_FULL;
 800d380:	2000      	movs	r0, #0
 800d382:	e7ea      	b.n	800d35a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800d384:	a802      	add	r0, sp, #8
 800d386:	f000 fef7 	bl	800e178 <vTaskSetTimeOutState>
 800d38a:	e018      	b.n	800d3be <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800d38c:	4643      	mov	r3, r8
 800d38e:	6463      	str	r3, [r4, #68]	; 0x44
 800d390:	e01e      	b.n	800d3d0 <xQueueGenericSend+0xe4>
 800d392:	4643      	mov	r3, r8
 800d394:	64a3      	str	r3, [r4, #72]	; 0x48
 800d396:	e01e      	b.n	800d3d6 <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800d398:	0020      	movs	r0, r4
 800d39a:	f7ff fefb 	bl	800d194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d39e:	f000 fccb 	bl	800dd38 <xTaskResumeAll>
 800d3a2:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800d3a4:	f001 fb7e 	bl	800eaa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d3c7      	bcc.n	800d340 <xQueueGenericSend+0x54>
 800d3b0:	2d02      	cmp	r5, #2
 800d3b2:	d0c5      	beq.n	800d340 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3b4:	9b01      	ldr	r3, [sp, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0e0      	beq.n	800d37c <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	d0e2      	beq.n	800d384 <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800d3be:	f001 fb7d 	bl	800eabc <vPortExitCritical>
		vTaskSuspendAll();
 800d3c2:	f000 fc11 	bl	800dbe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3c6:	f001 fb6d 	bl	800eaa4 <vPortEnterCritical>
 800d3ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	d0dd      	beq.n	800d38c <xQueueGenericSend+0xa0>
 800d3d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	d0dd      	beq.n	800d392 <xQueueGenericSend+0xa6>
 800d3d6:	f001 fb71 	bl	800eabc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3da:	a901      	add	r1, sp, #4
 800d3dc:	a802      	add	r0, sp, #8
 800d3de:	f000 fedb 	bl	800e198 <xTaskCheckForTimeOut>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d117      	bne.n	800d416 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3e6:	f001 fb5d 	bl	800eaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3ec:	4699      	mov	r9, r3
 800d3ee:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d3f0:	f001 fb64 	bl	800eabc <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3f4:	45b9      	cmp	r9, r7
 800d3f6:	d1cf      	bne.n	800d398 <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3f8:	0020      	movs	r0, r4
 800d3fa:	3010      	adds	r0, #16
 800d3fc:	9901      	ldr	r1, [sp, #4]
 800d3fe:	f000 fe3d 	bl	800e07c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d402:	0020      	movs	r0, r4
 800d404:	f7ff fec6 	bl	800d194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d408:	f000 fc96 	bl	800dd38 <xTaskResumeAll>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d1c8      	bne.n	800d3a2 <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800d410:	f001 fb3c 	bl	800ea8c <vPortYield>
 800d414:	e7c5      	b.n	800d3a2 <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800d416:	0020      	movs	r0, r4
 800d418:	f7ff febc 	bl	800d194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d41c:	f000 fc8c 	bl	800dd38 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d420:	2000      	movs	r0, #0
 800d422:	e79a      	b.n	800d35a <xQueueGenericSend+0x6e>

0800d424 <xQueueGenericSendFromISR>:
{
 800d424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d426:	b083      	sub	sp, #12
 800d428:	0004      	movs	r4, r0
 800d42a:	000d      	movs	r5, r1
 800d42c:	0017      	movs	r7, r2
 800d42e:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800d430:	2800      	cmp	r0, #0
 800d432:	d008      	beq.n	800d446 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d434:	2900      	cmp	r1, #0
 800d436:	d008      	beq.n	800d44a <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d438:	2e02      	cmp	r6, #2
 800d43a:	d12d      	bne.n	800d498 <xQueueGenericSendFromISR+0x74>
 800d43c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d019      	beq.n	800d476 <xQueueGenericSendFromISR+0x52>
 800d442:	b672      	cpsid	i
 800d444:	e7fe      	b.n	800d444 <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800d446:	b672      	cpsid	i
 800d448:	e7fe      	b.n	800d448 <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d44a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d0f3      	beq.n	800d438 <xQueueGenericSendFromISR+0x14>
 800d450:	b672      	cpsid	i
 800d452:	e7fe      	b.n	800d452 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800d454:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d025      	beq.n	800d4a8 <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d45c:	0020      	movs	r0, r4
 800d45e:	3024      	adds	r0, #36	; 0x24
 800d460:	f000 fe4a 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d464:	2800      	cmp	r0, #0
 800d466:	d01f      	beq.n	800d4a8 <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800d468:	2f00      	cmp	r7, #0
 800d46a:	d002      	beq.n	800d472 <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d46c:	2301      	movs	r3, #1
 800d46e:	603b      	str	r3, [r7, #0]
 800d470:	e01a      	b.n	800d4a8 <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800d472:	2501      	movs	r5, #1
 800d474:	e018      	b.n	800d4a8 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d476:	f001 fb31 	bl	800eadc <ulSetInterruptMaskFromISR>
 800d47a:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d47c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d47e:	0032      	movs	r2, r6
 800d480:	0029      	movs	r1, r5
 800d482:	0020      	movs	r0, r4
 800d484:	f7ff fe36 	bl	800d0f4 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d488:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d48a:	3301      	adds	r3, #1
 800d48c:	d0e2      	beq.n	800d454 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800d48e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d490:	3301      	adds	r3, #1
 800d492:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d494:	2501      	movs	r5, #1
 800d496:	e007      	b.n	800d4a8 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d498:	f001 fb20 	bl	800eadc <ulSetInterruptMaskFromISR>
 800d49c:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d49e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d3eb      	bcc.n	800d47e <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800d4a6:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d4a8:	9801      	ldr	r0, [sp, #4]
 800d4aa:	f001 fb1c 	bl	800eae6 <vClearInterruptMaskFromISR>
}
 800d4ae:	0028      	movs	r0, r5
 800d4b0:	b003      	add	sp, #12
 800d4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4b4 <xQueueGiveFromISR>:
{
 800d4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b6:	0004      	movs	r4, r0
 800d4b8:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d004      	beq.n	800d4c8 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d003      	beq.n	800d4cc <xQueueGiveFromISR+0x18>
 800d4c4:	b672      	cpsid	i
 800d4c6:	e7fe      	b.n	800d4c6 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800d4c8:	b672      	cpsid	i
 800d4ca:	e7fe      	b.n	800d4ca <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d4cc:	6803      	ldr	r3, [r0, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d016      	beq.n	800d500 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4d2:	f001 fb03 	bl	800eadc <ulSetInterruptMaskFromISR>
 800d4d6:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d4d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800d4da:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d4dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d209      	bcs.n	800d4f6 <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800d4e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d4e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	d00d      	beq.n	800d50a <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800d4ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d4f4:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d4f6:	0038      	movs	r0, r7
 800d4f8:	f001 faf5 	bl	800eae6 <vClearInterruptMaskFromISR>
}
 800d4fc:	0028      	movs	r0, r5
 800d4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d500:	6843      	ldr	r3, [r0, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d0e5      	beq.n	800d4d2 <xQueueGiveFromISR+0x1e>
 800d506:	b672      	cpsid	i
 800d508:	e7fe      	b.n	800d508 <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800d50a:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0f1      	beq.n	800d4f6 <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d512:	0020      	movs	r0, r4
 800d514:	3024      	adds	r0, #36	; 0x24
 800d516:	f000 fdef 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d0eb      	beq.n	800d4f6 <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800d51e:	2e00      	cmp	r6, #0
 800d520:	d002      	beq.n	800d528 <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d522:	2301      	movs	r3, #1
 800d524:	6033      	str	r3, [r6, #0]
 800d526:	e7e6      	b.n	800d4f6 <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800d528:	2501      	movs	r5, #1
 800d52a:	e7e4      	b.n	800d4f6 <xQueueGiveFromISR+0x42>

0800d52c <xQueueGenericReceive>:
{
 800d52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d52e:	46c6      	mov	lr, r8
 800d530:	b500      	push	{lr}
 800d532:	b084      	sub	sp, #16
 800d534:	0004      	movs	r4, r0
 800d536:	000d      	movs	r5, r1
 800d538:	9201      	str	r2, [sp, #4]
 800d53a:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d00a      	beq.n	800d556 <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d540:	2900      	cmp	r1, #0
 800d542:	d00a      	beq.n	800d55a <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d544:	f000 fe60 	bl	800e208 <xTaskGetSchedulerState>
 800d548:	2800      	cmp	r0, #0
 800d54a:	d10b      	bne.n	800d564 <xQueueGenericReceive+0x38>
 800d54c:	9b01      	ldr	r3, [sp, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <xQueueGenericReceive+0x3e>
 800d552:	b672      	cpsid	i
 800d554:	e7fe      	b.n	800d554 <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800d556:	b672      	cpsid	i
 800d558:	e7fe      	b.n	800d558 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d55a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0f1      	beq.n	800d544 <xQueueGenericReceive+0x18>
 800d560:	b672      	cpsid	i
 800d562:	e7fe      	b.n	800d562 <xQueueGenericReceive+0x36>
 800d564:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800d566:	2600      	movs	r6, #0
 800d568:	e04d      	b.n	800d606 <xQueueGenericReceive+0xda>
 800d56a:	2700      	movs	r7, #0
 800d56c:	e7fb      	b.n	800d566 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d56e:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d570:	0029      	movs	r1, r5
 800d572:	0020      	movs	r0, r4
 800d574:	f7ff fdfc 	bl	800d170 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d578:	4643      	mov	r3, r8
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d11c      	bne.n	800d5b8 <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800d57e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d580:	3b01      	subs	r3, #1
 800d582:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d009      	beq.n	800d59e <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10a      	bne.n	800d5a6 <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800d590:	f001 fa94 	bl	800eabc <vPortExitCritical>
				return pdPASS;
 800d594:	2001      	movs	r0, #1
}
 800d596:	b004      	add	sp, #16
 800d598:	bc80      	pop	{r7}
 800d59a:	46b8      	mov	r8, r7
 800d59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d59e:	f000 ff8b 	bl	800e4b8 <pvTaskIncrementMutexHeldCount>
 800d5a2:	6060      	str	r0, [r4, #4]
 800d5a4:	e7f1      	b.n	800d58a <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d5a6:	0020      	movs	r0, r4
 800d5a8:	3010      	adds	r0, #16
 800d5aa:	f000 fda5 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d5ae:	2801      	cmp	r0, #1
 800d5b0:	d1ee      	bne.n	800d590 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800d5b2:	f001 fa6b 	bl	800ea8c <vPortYield>
 800d5b6:	e7eb      	b.n	800d590 <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d5b8:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0e7      	beq.n	800d590 <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5c0:	0020      	movs	r0, r4
 800d5c2:	3024      	adds	r0, #36	; 0x24
 800d5c4:	f000 fd98 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d0e1      	beq.n	800d590 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800d5cc:	f001 fa5e 	bl	800ea8c <vPortYield>
 800d5d0:	e7de      	b.n	800d590 <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800d5d2:	f001 fa73 	bl	800eabc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e7dd      	b.n	800d596 <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800d5da:	a802      	add	r0, sp, #8
 800d5dc:	f000 fdcc 	bl	800e178 <vTaskSetTimeOutState>
 800d5e0:	e01b      	b.n	800d61a <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800d5e2:	6466      	str	r6, [r4, #68]	; 0x44
 800d5e4:	e022      	b.n	800d62c <xQueueGenericReceive+0x100>
 800d5e6:	64a6      	str	r6, [r4, #72]	; 0x48
 800d5e8:	e023      	b.n	800d632 <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800d5ea:	f001 fa5b 	bl	800eaa4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d5ee:	6860      	ldr	r0, [r4, #4]
 800d5f0:	f000 fe1a 	bl	800e228 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d5f4:	f001 fa62 	bl	800eabc <vPortExitCritical>
 800d5f8:	e02d      	b.n	800d656 <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800d5fa:	0020      	movs	r0, r4
 800d5fc:	f7ff fdca 	bl	800d194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d600:	f000 fb9a 	bl	800dd38 <xTaskResumeAll>
 800d604:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800d606:	f001 fa4d 	bl	800eaa4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d60a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1ae      	bne.n	800d56e <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d610:	9b01      	ldr	r3, [sp, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d0dd      	beq.n	800d5d2 <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800d616:	2f00      	cmp	r7, #0
 800d618:	d0df      	beq.n	800d5da <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800d61a:	f001 fa4f 	bl	800eabc <vPortExitCritical>
		vTaskSuspendAll();
 800d61e:	f000 fae3 	bl	800dbe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d622:	f001 fa3f 	bl	800eaa4 <vPortEnterCritical>
 800d626:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d628:	3301      	adds	r3, #1
 800d62a:	d0da      	beq.n	800d5e2 <xQueueGenericReceive+0xb6>
 800d62c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d62e:	3301      	adds	r3, #1
 800d630:	d0d9      	beq.n	800d5e6 <xQueueGenericReceive+0xba>
 800d632:	f001 fa43 	bl	800eabc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d636:	a901      	add	r1, sp, #4
 800d638:	a802      	add	r0, sp, #8
 800d63a:	f000 fdad 	bl	800e198 <xTaskCheckForTimeOut>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d118      	bne.n	800d674 <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800d642:	f001 fa2f 	bl	800eaa4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d646:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800d648:	f001 fa38 	bl	800eabc <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d64c:	2f00      	cmp	r7, #0
 800d64e:	d1d4      	bne.n	800d5fa <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d650:	6823      	ldr	r3, [r4, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0c9      	beq.n	800d5ea <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d656:	0020      	movs	r0, r4
 800d658:	3024      	adds	r0, #36	; 0x24
 800d65a:	9901      	ldr	r1, [sp, #4]
 800d65c:	f000 fd0e 	bl	800e07c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d660:	0020      	movs	r0, r4
 800d662:	f7ff fd97 	bl	800d194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d666:	f000 fb67 	bl	800dd38 <xTaskResumeAll>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d1ca      	bne.n	800d604 <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800d66e:	f001 fa0d 	bl	800ea8c <vPortYield>
 800d672:	e7c7      	b.n	800d604 <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800d674:	0020      	movs	r0, r4
 800d676:	f7ff fd8d 	bl	800d194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d67a:	f000 fb5d 	bl	800dd38 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d67e:	2000      	movs	r0, #0
 800d680:	e789      	b.n	800d596 <xQueueGenericReceive+0x6a>

0800d682 <xQueueReceiveFromISR>:
{
 800d682:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d684:	46c6      	mov	lr, r8
 800d686:	b500      	push	{lr}
 800d688:	0004      	movs	r4, r0
 800d68a:	000f      	movs	r7, r1
 800d68c:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800d68e:	2800      	cmp	r0, #0
 800d690:	d00f      	beq.n	800d6b2 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d692:	2900      	cmp	r1, #0
 800d694:	d00f      	beq.n	800d6b6 <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d696:	f001 fa21 	bl	800eadc <ulSetInterruptMaskFromISR>
 800d69a:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d69c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800d69e:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10d      	bne.n	800d6c0 <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	f001 fa1e 	bl	800eae6 <vClearInterruptMaskFromISR>
}
 800d6aa:	0028      	movs	r0, r5
 800d6ac:	bc80      	pop	{r7}
 800d6ae:	46b8      	mov	r8, r7
 800d6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800d6b2:	b672      	cpsid	i
 800d6b4:	e7fe      	b.n	800d6b4 <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d0ec      	beq.n	800d696 <xQueueReceiveFromISR+0x14>
 800d6bc:	b672      	cpsid	i
 800d6be:	e7fe      	b.n	800d6be <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6c0:	0039      	movs	r1, r7
 800d6c2:	0020      	movs	r0, r4
 800d6c4:	f7ff fd54 	bl	800d170 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d6c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d6ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	d004      	beq.n	800d6de <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800d6d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d6da:	2501      	movs	r5, #1
 800d6dc:	e7e2      	b.n	800d6a4 <xQueueReceiveFromISR+0x22>
 800d6de:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0de      	beq.n	800d6a4 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e6:	0020      	movs	r0, r4
 800d6e8:	3010      	adds	r0, #16
 800d6ea:	f000 fd05 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d0d8      	beq.n	800d6a4 <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800d6f2:	2e00      	cmp	r6, #0
 800d6f4:	d002      	beq.n	800d6fc <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	e7d3      	b.n	800d6a4 <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800d6fc:	2501      	movs	r5, #1
 800d6fe:	e7d1      	b.n	800d6a4 <xQueueReceiveFromISR+0x22>

0800d700 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d700:	b510      	push	{r4, lr}
 800d702:	4a08      	ldr	r2, [pc, #32]	; (800d724 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d704:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d706:	6814      	ldr	r4, [r2, #0]
 800d708:	2c00      	cmp	r4, #0
 800d70a:	d004      	beq.n	800d716 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d70c:	3301      	adds	r3, #1
 800d70e:	3208      	adds	r2, #8
 800d710:	2b08      	cmp	r3, #8
 800d712:	d1f8      	bne.n	800d706 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d714:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d716:	4a03      	ldr	r2, [pc, #12]	; (800d724 <vQueueAddToRegistry+0x24>)
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d71c:	18d3      	adds	r3, r2, r3
 800d71e:	6058      	str	r0, [r3, #4]
				break;
 800d720:	e7f8      	b.n	800d714 <vQueueAddToRegistry+0x14>
 800d722:	46c0      	nop			; (mov r8, r8)
 800d724:	20006df8 	.word	0x20006df8

0800d728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	0004      	movs	r4, r0
 800d72c:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d72e:	f001 f9b9 	bl	800eaa4 <vPortEnterCritical>
 800d732:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d734:	3301      	adds	r3, #1
 800d736:	d00b      	beq.n	800d750 <vQueueWaitForMessageRestricted+0x28>
 800d738:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d73a:	3301      	adds	r3, #1
 800d73c:	d00b      	beq.n	800d756 <vQueueWaitForMessageRestricted+0x2e>
 800d73e:	f001 f9bd 	bl	800eabc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d744:	2b00      	cmp	r3, #0
 800d746:	d009      	beq.n	800d75c <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d748:	0020      	movs	r0, r4
 800d74a:	f7ff fd23 	bl	800d194 <prvUnlockQueue>
	}
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d750:	2300      	movs	r3, #0
 800d752:	6463      	str	r3, [r4, #68]	; 0x44
 800d754:	e7f0      	b.n	800d738 <vQueueWaitForMessageRestricted+0x10>
 800d756:	2300      	movs	r3, #0
 800d758:	64a3      	str	r3, [r4, #72]	; 0x48
 800d75a:	e7f0      	b.n	800d73e <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d75c:	0020      	movs	r0, r4
 800d75e:	3024      	adds	r0, #36	; 0x24
 800d760:	0029      	movs	r1, r5
 800d762:	f000 fcaf 	bl	800e0c4 <vTaskPlaceOnEventListRestricted>
 800d766:	e7ef      	b.n	800d748 <vQueueWaitForMessageRestricted+0x20>

0800d768 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76a:	46de      	mov	lr, fp
 800d76c:	4657      	mov	r7, sl
 800d76e:	464e      	mov	r6, r9
 800d770:	4645      	mov	r5, r8
 800d772:	b5e0      	push	{r5, r6, r7, lr}
 800d774:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d776:	680b      	ldr	r3, [r1, #0]
 800d778:	469b      	mov	fp, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d045      	beq.n	800d80a <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d77e:	684b      	ldr	r3, [r1, #4]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	604b      	str	r3, [r1, #4]
 800d784:	2008      	movs	r0, #8
 800d786:	4684      	mov	ip, r0
 800d788:	448c      	add	ip, r1
 800d78a:	4563      	cmp	r3, ip
 800d78c:	d007      	beq.n	800d79e <prvListTaskWithinSingleList+0x36>
 800d78e:	684b      	ldr	r3, [r1, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800d794:	2300      	movs	r3, #0
 800d796:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d798:	3302      	adds	r3, #2
 800d79a:	4699      	mov	r9, r3
 800d79c:	e01c      	b.n	800d7d8 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d79e:	68cb      	ldr	r3, [r1, #12]
 800d7a0:	604b      	str	r3, [r1, #4]
 800d7a2:	e7f4      	b.n	800d78e <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	604b      	str	r3, [r1, #4]
 800d7a8:	e01b      	b.n	800d7e2 <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d7aa:	4648      	mov	r0, r9
 800d7ac:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d7ae:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800d7b0:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d7b2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800d7b4:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d7b6:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d7b8:	783d      	ldrb	r5, [r7, #0]
 800d7ba:	2da5      	cmp	r5, #165	; 0xa5
 800d7bc:	d123      	bne.n	800d806 <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800d7be:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800d7c0:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d7c2:	5d78      	ldrb	r0, [r7, r5]
 800d7c4:	28a5      	cmp	r0, #165	; 0xa5
 800d7c6:	d0fb      	beq.n	800d7c0 <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d7c8:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800d7ca:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	4682      	mov	sl, r0
 800d7d0:	44d3      	add	fp, sl
 800d7d2:	3420      	adds	r4, #32
			} while( pxNextTCB != pxFirstTCB );
 800d7d4:	4598      	cmp	r8, r3
 800d7d6:	d018      	beq.n	800d80a <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d7d8:	684b      	ldr	r3, [r1, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	604b      	str	r3, [r1, #4]
 800d7de:	459c      	cmp	ip, r3
 800d7e0:	d0e0      	beq.n	800d7a4 <prvListTaskWithinSingleList+0x3c>
 800d7e2:	684b      	ldr	r3, [r1, #4]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	0026      	movs	r6, r4
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800d7e8:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800d7ea:	001d      	movs	r5, r3
 800d7ec:	3534      	adds	r5, #52	; 0x34
 800d7ee:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d7f0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800d7f2:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800d7f4:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800d7f6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800d7f8:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800d7fa:	2a03      	cmp	r2, #3
 800d7fc:	d1d7      	bne.n	800d7ae <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800d7fe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d800:	2d00      	cmp	r5, #0
 800d802:	d1d2      	bne.n	800d7aa <prvListTaskWithinSingleList+0x42>
 800d804:	e7d3      	b.n	800d7ae <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800d806:	2500      	movs	r5, #0
 800d808:	e7de      	b.n	800d7c8 <prvListTaskWithinSingleList+0x60>
	}
 800d80a:	4658      	mov	r0, fp
 800d80c:	bcf0      	pop	{r4, r5, r6, r7}
 800d80e:	46bb      	mov	fp, r7
 800d810:	46b2      	mov	sl, r6
 800d812:	46a9      	mov	r9, r5
 800d814:	46a0      	mov	r8, r4
 800d816:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d818 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d818:	4b08      	ldr	r3, [pc, #32]	; (800d83c <prvResetNextTaskUnblockTime+0x24>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d104      	bne.n	800d82c <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d822:	4b07      	ldr	r3, [pc, #28]	; (800d840 <prvResetNextTaskUnblockTime+0x28>)
 800d824:	2201      	movs	r2, #1
 800d826:	4252      	negs	r2, r2
 800d828:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800d82a:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d82c:	4b03      	ldr	r3, [pc, #12]	; (800d83c <prvResetNextTaskUnblockTime+0x24>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	4b02      	ldr	r3, [pc, #8]	; (800d840 <prvResetNextTaskUnblockTime+0x28>)
 800d838:	601a      	str	r2, [r3, #0]
}
 800d83a:	e7f6      	b.n	800d82a <prvResetNextTaskUnblockTime+0x12>
 800d83c:	20001cdc 	.word	0x20001cdc
 800d840:	200000a0 	.word	0x200000a0

0800d844 <prvAddCurrentTaskToDelayedList>:
{
 800d844:	b510      	push	{r4, lr}
 800d846:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d848:	4b0e      	ldr	r3, [pc, #56]	; (800d884 <prvAddCurrentTaskToDelayedList+0x40>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800d84e:	4b0e      	ldr	r3, [pc, #56]	; (800d888 <prvAddCurrentTaskToDelayedList+0x44>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4283      	cmp	r3, r0
 800d854:	d907      	bls.n	800d866 <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d856:	4b0d      	ldr	r3, [pc, #52]	; (800d88c <prvAddCurrentTaskToDelayedList+0x48>)
 800d858:	6818      	ldr	r0, [r3, #0]
 800d85a:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <prvAddCurrentTaskToDelayedList+0x40>)
 800d85c:	6819      	ldr	r1, [r3, #0]
 800d85e:	3104      	adds	r1, #4
 800d860:	f7ff fc1f 	bl	800d0a2 <vListInsert>
}
 800d864:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d866:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <prvAddCurrentTaskToDelayedList+0x4c>)
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	4b06      	ldr	r3, [pc, #24]	; (800d884 <prvAddCurrentTaskToDelayedList+0x40>)
 800d86c:	6819      	ldr	r1, [r3, #0]
 800d86e:	3104      	adds	r1, #4
 800d870:	f7ff fc17 	bl	800d0a2 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800d874:	4b07      	ldr	r3, [pc, #28]	; (800d894 <prvAddCurrentTaskToDelayedList+0x50>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	42a3      	cmp	r3, r4
 800d87a:	d9f3      	bls.n	800d864 <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800d87c:	4b05      	ldr	r3, [pc, #20]	; (800d894 <prvAddCurrentTaskToDelayedList+0x50>)
 800d87e:	601c      	str	r4, [r3, #0]
}
 800d880:	e7f0      	b.n	800d864 <prvAddCurrentTaskToDelayedList+0x20>
 800d882:	46c0      	nop			; (mov r8, r8)
 800d884:	20001cd8 	.word	0x20001cd8
 800d888:	20001df8 	.word	0x20001df8
 800d88c:	20001ce0 	.word	0x20001ce0
 800d890:	20001cdc 	.word	0x20001cdc
 800d894:	200000a0 	.word	0x200000a0

0800d898 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d898:	b510      	push	{r4, lr}
 800d89a:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d89c:	f004 fe39 	bl	8012512 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d8a0:	0020      	movs	r0, r4
 800d8a2:	f7f2 fc39 	bl	8000118 <strlen>
 800d8a6:	280b      	cmp	r0, #11
 800d8a8:	dc08      	bgt.n	800d8bc <prvWriteNameToBuffer+0x24>
 800d8aa:	1823      	adds	r3, r4, r0
 800d8ac:	0021      	movs	r1, r4
 800d8ae:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	3301      	adds	r3, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d8b6:	428b      	cmp	r3, r1
 800d8b8:	d1fb      	bne.n	800d8b2 <prvWriteNameToBuffer+0x1a>
 800d8ba:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800d8bc:	1820      	adds	r0, r4, r0
 800d8be:	2300      	movs	r3, #0
 800d8c0:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800d8c2:	bd10      	pop	{r4, pc}

0800d8c4 <xTaskGenericCreate>:
{
 800d8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8c6:	46de      	mov	lr, fp
 800d8c8:	4657      	mov	r7, sl
 800d8ca:	464e      	mov	r6, r9
 800d8cc:	4645      	mov	r5, r8
 800d8ce:	b5e0      	push	{r5, r6, r7, lr}
 800d8d0:	b083      	sub	sp, #12
 800d8d2:	9001      	str	r0, [sp, #4]
 800d8d4:	4688      	mov	r8, r1
 800d8d6:	0017      	movs	r7, r2
 800d8d8:	469a      	mov	sl, r3
 800d8da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d8dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d003      	beq.n	800d8ea <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800d8e2:	2e06      	cmp	r6, #6
 800d8e4:	d903      	bls.n	800d8ee <xTaskGenericCreate+0x2a>
 800d8e6:	b672      	cpsid	i
 800d8e8:	e7fe      	b.n	800d8e8 <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800d8ea:	b672      	cpsid	i
 800d8ec:	e7fe      	b.n	800d8ec <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	d05b      	beq.n	800d9aa <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800d8f2:	2060      	movs	r0, #96	; 0x60
 800d8f4:	f001 f958 	bl	800eba8 <pvPortMalloc>
 800d8f8:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800d8fa:	d064      	beq.n	800d9c6 <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800d8fc:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800d8fe:	00ba      	lsls	r2, r7, #2
 800d900:	21a5      	movs	r1, #165	; 0xa5
 800d902:	0028      	movs	r0, r5
 800d904:	f004 fbd5 	bl	80120b2 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800d908:	4b5e      	ldr	r3, [pc, #376]	; (800da84 <xTaskGenericCreate+0x1c0>)
 800d90a:	18fd      	adds	r5, r7, r3
 800d90c:	00ad      	lsls	r5, r5, #2
 800d90e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d910:	469c      	mov	ip, r3
 800d912:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d914:	2307      	movs	r3, #7
 800d916:	439d      	bics	r5, r3
 800d918:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d91a:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800d91c:	0021      	movs	r1, r4
 800d91e:	3134      	adds	r1, #52	; 0x34
 800d920:	4642      	mov	r2, r8
 800d922:	5cd2      	ldrb	r2, [r2, r3]
 800d924:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800d926:	2a00      	cmp	r2, #0
 800d928:	d002      	beq.n	800d930 <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d92a:	3301      	adds	r3, #1
 800d92c:	2b0d      	cmp	r3, #13
 800d92e:	d1f7      	bne.n	800d920 <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	2200      	movs	r2, #0
 800d934:	54e2      	strb	r2, [r4, r3]
 800d936:	0035      	movs	r5, r6
 800d938:	2e06      	cmp	r6, #6
 800d93a:	d900      	bls.n	800d93e <xTaskGenericCreate+0x7a>
 800d93c:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800d93e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800d940:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800d942:	2700      	movs	r7, #0
 800d944:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800d946:	1d23      	adds	r3, r4, #4
 800d948:	469b      	mov	fp, r3
 800d94a:	0018      	movs	r0, r3
 800d94c:	f7ff fb9b 	bl	800d086 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800d950:	0020      	movs	r0, r4
 800d952:	3018      	adds	r0, #24
 800d954:	f7ff fb97 	bl	800d086 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800d958:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d95a:	2307      	movs	r3, #7
 800d95c:	1b5b      	subs	r3, r3, r5
 800d95e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800d960:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800d962:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800d964:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800d966:	235c      	movs	r3, #92	; 0x5c
 800d968:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d96a:	4652      	mov	r2, sl
 800d96c:	9901      	ldr	r1, [sp, #4]
 800d96e:	4648      	mov	r0, r9
 800d970:	f001 f850 	bl	800ea14 <pxPortInitialiseStack>
 800d974:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800d976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d000      	beq.n	800d97e <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d97c:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800d97e:	f001 f891 	bl	800eaa4 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800d982:	4a41      	ldr	r2, [pc, #260]	; (800da88 <xTaskGenericCreate+0x1c4>)
 800d984:	6813      	ldr	r3, [r2, #0]
 800d986:	3301      	adds	r3, #1
 800d988:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800d98a:	4b40      	ldr	r3, [pc, #256]	; (800da8c <xTaskGenericCreate+0x1c8>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d01d      	beq.n	800d9ce <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800d992:	4b3f      	ldr	r3, [pc, #252]	; (800da90 <xTaskGenericCreate+0x1cc>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d11e      	bne.n	800d9d8 <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800d99a:	4b3c      	ldr	r3, [pc, #240]	; (800da8c <xTaskGenericCreate+0x1c8>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a0:	42b3      	cmp	r3, r6
 800d9a2:	d819      	bhi.n	800d9d8 <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800d9a4:	4b39      	ldr	r3, [pc, #228]	; (800da8c <xTaskGenericCreate+0x1c8>)
 800d9a6:	601c      	str	r4, [r3, #0]
 800d9a8:	e016      	b.n	800d9d8 <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9aa:	0090      	lsls	r0, r2, #2
 800d9ac:	f001 f8fc 	bl	800eba8 <pvPortMalloc>
 800d9b0:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800d9b2:	d19e      	bne.n	800d8f2 <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9b4:	2001      	movs	r0, #1
 800d9b6:	4240      	negs	r0, r0
}
 800d9b8:	b003      	add	sp, #12
 800d9ba:	bcf0      	pop	{r4, r5, r6, r7}
 800d9bc:	46bb      	mov	fp, r7
 800d9be:	46b2      	mov	sl, r6
 800d9c0:	46a9      	mov	r9, r5
 800d9c2:	46a0      	mov	r8, r4
 800d9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800d9c6:	0028      	movs	r0, r5
 800d9c8:	f001 f980 	bl	800eccc <vPortFree>
 800d9cc:	e7f2      	b.n	800d9b4 <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800d9ce:	4b2f      	ldr	r3, [pc, #188]	; (800da8c <xTaskGenericCreate+0x1c8>)
 800d9d0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9d2:	6813      	ldr	r3, [r2, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d023      	beq.n	800da20 <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800d9d8:	4a2e      	ldr	r2, [pc, #184]	; (800da94 <xTaskGenericCreate+0x1d0>)
 800d9da:	6813      	ldr	r3, [r2, #0]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9e0:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800d9e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9e4:	4a2c      	ldr	r2, [pc, #176]	; (800da98 <xTaskGenericCreate+0x1d4>)
 800d9e6:	6812      	ldr	r2, [r2, #0]
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d901      	bls.n	800d9f0 <xTaskGenericCreate+0x12c>
 800d9ec:	4a2a      	ldr	r2, [pc, #168]	; (800da98 <xTaskGenericCreate+0x1d4>)
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	0098      	lsls	r0, r3, #2
 800d9f2:	18c0      	adds	r0, r0, r3
 800d9f4:	0080      	lsls	r0, r0, #2
 800d9f6:	4b29      	ldr	r3, [pc, #164]	; (800da9c <xTaskGenericCreate+0x1d8>)
 800d9f8:	18c0      	adds	r0, r0, r3
 800d9fa:	4659      	mov	r1, fp
 800d9fc:	f7ff fb46 	bl	800d08c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800da00:	f001 f85c 	bl	800eabc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800da04:	4b22      	ldr	r3, [pc, #136]	; (800da90 <xTaskGenericCreate+0x1cc>)
 800da06:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800da08:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0d4      	beq.n	800d9b8 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800da0e:	4b1f      	ldr	r3, [pc, #124]	; (800da8c <xTaskGenericCreate+0x1c8>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	42b3      	cmp	r3, r6
 800da16:	d2cf      	bcs.n	800d9b8 <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800da18:	f001 f838 	bl	800ea8c <vPortYield>
			xReturn = pdPASS;
 800da1c:	2001      	movs	r0, #1
 800da1e:	e7cb      	b.n	800d9b8 <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da20:	4d1e      	ldr	r5, [pc, #120]	; (800da9c <xTaskGenericCreate+0x1d8>)
 800da22:	0028      	movs	r0, r5
 800da24:	f7ff fb24 	bl	800d070 <vListInitialise>
 800da28:	0028      	movs	r0, r5
 800da2a:	3014      	adds	r0, #20
 800da2c:	f7ff fb20 	bl	800d070 <vListInitialise>
 800da30:	0028      	movs	r0, r5
 800da32:	3028      	adds	r0, #40	; 0x28
 800da34:	f7ff fb1c 	bl	800d070 <vListInitialise>
 800da38:	0028      	movs	r0, r5
 800da3a:	303c      	adds	r0, #60	; 0x3c
 800da3c:	f7ff fb18 	bl	800d070 <vListInitialise>
 800da40:	0028      	movs	r0, r5
 800da42:	3050      	adds	r0, #80	; 0x50
 800da44:	f7ff fb14 	bl	800d070 <vListInitialise>
 800da48:	0028      	movs	r0, r5
 800da4a:	3064      	adds	r0, #100	; 0x64
 800da4c:	f7ff fb10 	bl	800d070 <vListInitialise>
 800da50:	0028      	movs	r0, r5
 800da52:	3078      	adds	r0, #120	; 0x78
 800da54:	f7ff fb0c 	bl	800d070 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800da58:	4f11      	ldr	r7, [pc, #68]	; (800daa0 <xTaskGenericCreate+0x1dc>)
 800da5a:	0038      	movs	r0, r7
 800da5c:	f7ff fb08 	bl	800d070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da60:	4d10      	ldr	r5, [pc, #64]	; (800daa4 <xTaskGenericCreate+0x1e0>)
 800da62:	0028      	movs	r0, r5
 800da64:	f7ff fb04 	bl	800d070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da68:	480f      	ldr	r0, [pc, #60]	; (800daa8 <xTaskGenericCreate+0x1e4>)
 800da6a:	f7ff fb01 	bl	800d070 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800da6e:	480f      	ldr	r0, [pc, #60]	; (800daac <xTaskGenericCreate+0x1e8>)
 800da70:	f7ff fafe 	bl	800d070 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800da74:	480e      	ldr	r0, [pc, #56]	; (800dab0 <xTaskGenericCreate+0x1ec>)
 800da76:	f7ff fafb 	bl	800d070 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800da7a:	4b0e      	ldr	r3, [pc, #56]	; (800dab4 <xTaskGenericCreate+0x1f0>)
 800da7c:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da7e:	4b0e      	ldr	r3, [pc, #56]	; (800dab8 <xTaskGenericCreate+0x1f4>)
 800da80:	601d      	str	r5, [r3, #0]
}
 800da82:	e7a9      	b.n	800d9d8 <xTaskGenericCreate+0x114>
 800da84:	3fffffff 	.word	0x3fffffff
 800da88:	20001d74 	.word	0x20001d74
 800da8c:	20001cd8 	.word	0x20001cd8
 800da90:	20001dcc 	.word	0x20001dcc
 800da94:	20001d80 	.word	0x20001d80
 800da98:	20001d88 	.word	0x20001d88
 800da9c:	20001ce4 	.word	0x20001ce4
 800daa0:	20001d8c 	.word	0x20001d8c
 800daa4:	20001da0 	.word	0x20001da0
 800daa8:	20001db8 	.word	0x20001db8
 800daac:	20001de4 	.word	0x20001de4
 800dab0:	20001dd0 	.word	0x20001dd0
 800dab4:	20001cdc 	.word	0x20001cdc
 800dab8:	20001ce0 	.word	0x20001ce0

0800dabc <uxTaskPriorityGet>:
	{
 800dabc:	b510      	push	{r4, lr}
 800dabe:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800dac0:	f000 fff0 	bl	800eaa4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dac4:	2c00      	cmp	r4, #0
 800dac6:	d004      	beq.n	800dad2 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800dac8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800daca:	f000 fff7 	bl	800eabc <vPortExitCritical>
	}
 800dace:	0020      	movs	r0, r4
 800dad0:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800dad2:	4b01      	ldr	r3, [pc, #4]	; (800dad8 <uxTaskPriorityGet+0x1c>)
 800dad4:	681c      	ldr	r4, [r3, #0]
 800dad6:	e7f7      	b.n	800dac8 <uxTaskPriorityGet+0xc>
 800dad8:	20001cd8 	.word	0x20001cd8

0800dadc <vTaskPrioritySet>:
	{
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	0004      	movs	r4, r0
 800dae0:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dae2:	2906      	cmp	r1, #6
 800dae4:	d901      	bls.n	800daea <vTaskPrioritySet+0xe>
 800dae6:	b672      	cpsid	i
 800dae8:	e7fe      	b.n	800dae8 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800daea:	f000 ffdb 	bl	800eaa4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800daee:	2c00      	cmp	r4, #0
 800daf0:	d00e      	beq.n	800db10 <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800daf2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800daf4:	428d      	cmp	r5, r1
 800daf6:	d027      	beq.n	800db48 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800daf8:	d90d      	bls.n	800db16 <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800dafa:	4b22      	ldr	r3, [pc, #136]	; (800db84 <vTaskPrioritySet+0xa8>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	42a3      	cmp	r3, r4
 800db00:	d025      	beq.n	800db4e <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800db02:	4b20      	ldr	r3, [pc, #128]	; (800db84 <vTaskPrioritySet+0xa8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db08:	2600      	movs	r6, #0
 800db0a:	429d      	cmp	r5, r3
 800db0c:	4176      	adcs	r6, r6
 800db0e:	e007      	b.n	800db20 <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800db10:	4b1c      	ldr	r3, [pc, #112]	; (800db84 <vTaskPrioritySet+0xa8>)
 800db12:	681c      	ldr	r4, [r3, #0]
 800db14:	e7ed      	b.n	800daf2 <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800db16:	4b1b      	ldr	r3, [pc, #108]	; (800db84 <vTaskPrioritySet+0xa8>)
 800db18:	681e      	ldr	r6, [r3, #0]
 800db1a:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800db1c:	4273      	negs	r3, r6
 800db1e:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800db22:	4291      	cmp	r1, r2
 800db24:	d015      	beq.n	800db52 <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800db26:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db28:	69a3      	ldr	r3, [r4, #24]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	db02      	blt.n	800db34 <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db2e:	2307      	movs	r3, #7
 800db30:	1b5d      	subs	r5, r3, r5
 800db32:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800db34:	0093      	lsls	r3, r2, #2
 800db36:	189b      	adds	r3, r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4a13      	ldr	r2, [pc, #76]	; (800db88 <vTaskPrioritySet+0xac>)
 800db3c:	189b      	adds	r3, r3, r2
 800db3e:	6962      	ldr	r2, [r4, #20]
 800db40:	429a      	cmp	r2, r3
 800db42:	d008      	beq.n	800db56 <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800db44:	2e01      	cmp	r6, #1
 800db46:	d01a      	beq.n	800db7e <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800db48:	f000 ffb8 	bl	800eabc <vPortExitCritical>
	}
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800db4e:	2600      	movs	r6, #0
 800db50:	e7e6      	b.n	800db20 <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800db52:	62e5      	str	r5, [r4, #44]	; 0x2c
 800db54:	e7e7      	b.n	800db26 <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800db56:	1d25      	adds	r5, r4, #4
 800db58:	0028      	movs	r0, r5
 800db5a:	f7ff fab9 	bl	800d0d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800db60:	4a0a      	ldr	r2, [pc, #40]	; (800db8c <vTaskPrioritySet+0xb0>)
 800db62:	6812      	ldr	r2, [r2, #0]
 800db64:	4293      	cmp	r3, r2
 800db66:	d901      	bls.n	800db6c <vTaskPrioritySet+0x90>
 800db68:	4a08      	ldr	r2, [pc, #32]	; (800db8c <vTaskPrioritySet+0xb0>)
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	0098      	lsls	r0, r3, #2
 800db6e:	18c0      	adds	r0, r0, r3
 800db70:	0080      	lsls	r0, r0, #2
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <vTaskPrioritySet+0xac>)
 800db74:	18c0      	adds	r0, r0, r3
 800db76:	0029      	movs	r1, r5
 800db78:	f7ff fa88 	bl	800d08c <vListInsertEnd>
 800db7c:	e7e2      	b.n	800db44 <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800db7e:	f000 ff85 	bl	800ea8c <vPortYield>
 800db82:	e7e1      	b.n	800db48 <vTaskPrioritySet+0x6c>
 800db84:	20001cd8 	.word	0x20001cd8
 800db88:	20001ce4 	.word	0x20001ce4
 800db8c:	20001d88 	.word	0x20001d88

0800db90 <vTaskStartScheduler>:
{
 800db90:	b500      	push	{lr}
 800db92:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800db94:	2300      	movs	r3, #0
 800db96:	9303      	str	r3, [sp, #12]
 800db98:	9302      	str	r3, [sp, #8]
 800db9a:	9301      	str	r3, [sp, #4]
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	22a0      	movs	r2, #160	; 0xa0
 800dba0:	490d      	ldr	r1, [pc, #52]	; (800dbd8 <vTaskStartScheduler+0x48>)
 800dba2:	480e      	ldr	r0, [pc, #56]	; (800dbdc <vTaskStartScheduler+0x4c>)
 800dba4:	f7ff fe8e 	bl	800d8c4 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800dba8:	2801      	cmp	r0, #1
 800dbaa:	d003      	beq.n	800dbb4 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d110      	bne.n	800dbd2 <vTaskStartScheduler+0x42>
 800dbb0:	b672      	cpsid	i
 800dbb2:	e7fe      	b.n	800dbb2 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800dbb4:	f000 fd8c 	bl	800e6d0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800dbb8:	2801      	cmp	r0, #1
 800dbba:	d1f7      	bne.n	800dbac <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800dbbc:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800dbbe:	4b08      	ldr	r3, [pc, #32]	; (800dbe0 <vTaskStartScheduler+0x50>)
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800dbc4:	4b07      	ldr	r3, [pc, #28]	; (800dbe4 <vTaskStartScheduler+0x54>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dbca:	f7f9 ff09 	bl	80079e0 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800dbce:	f000 ff33 	bl	800ea38 <xPortStartScheduler>
}
 800dbd2:	b005      	add	sp, #20
 800dbd4:	bd00      	pop	{pc}
 800dbd6:	46c0      	nop			; (mov r8, r8)
 800dbd8:	0801aca4 	.word	0x0801aca4
 800dbdc:	0800de69 	.word	0x0800de69
 800dbe0:	20001dcc 	.word	0x20001dcc
 800dbe4:	20001df8 	.word	0x20001df8

0800dbe8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800dbe8:	4a02      	ldr	r2, [pc, #8]	; (800dbf4 <vTaskSuspendAll+0xc>)
 800dbea:	6813      	ldr	r3, [r2, #0]
 800dbec:	3301      	adds	r3, #1
 800dbee:	6013      	str	r3, [r2, #0]
}
 800dbf0:	4770      	bx	lr
 800dbf2:	46c0      	nop			; (mov r8, r8)
 800dbf4:	20001d7c 	.word	0x20001d7c

0800dbf8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800dbf8:	4b01      	ldr	r3, [pc, #4]	; (800dc00 <xTaskGetTickCount+0x8>)
 800dbfa:	6818      	ldr	r0, [r3, #0]
}
 800dbfc:	4770      	bx	lr
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	20001df8 	.word	0x20001df8

0800dc04 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800dc04:	4b01      	ldr	r3, [pc, #4]	; (800dc0c <xTaskGetTickCountFromISR+0x8>)
 800dc06:	6818      	ldr	r0, [r3, #0]
}
 800dc08:	4770      	bx	lr
 800dc0a:	46c0      	nop			; (mov r8, r8)
 800dc0c:	20001df8 	.word	0x20001df8

0800dc10 <xTaskIncrementTick>:
{
 800dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc12:	46ce      	mov	lr, r9
 800dc14:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc16:	4b3d      	ldr	r3, [pc, #244]	; (800dd0c <xTaskIncrementTick+0xfc>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d167      	bne.n	800dcee <xTaskIncrementTick+0xde>
		++xTickCount;
 800dc1e:	4b3c      	ldr	r3, [pc, #240]	; (800dd10 <xTaskIncrementTick+0x100>)
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	3201      	adds	r2, #1
 800dc24:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800dc26:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800dc28:	2e00      	cmp	r6, #0
 800dc2a:	d112      	bne.n	800dc52 <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 800dc2c:	4b39      	ldr	r3, [pc, #228]	; (800dd14 <xTaskIncrementTick+0x104>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <xTaskIncrementTick+0x2a>
 800dc36:	b672      	cpsid	i
 800dc38:	e7fe      	b.n	800dc38 <xTaskIncrementTick+0x28>
 800dc3a:	4a36      	ldr	r2, [pc, #216]	; (800dd14 <xTaskIncrementTick+0x104>)
 800dc3c:	6811      	ldr	r1, [r2, #0]
 800dc3e:	4b36      	ldr	r3, [pc, #216]	; (800dd18 <xTaskIncrementTick+0x108>)
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	6010      	str	r0, [r2, #0]
 800dc44:	6019      	str	r1, [r3, #0]
 800dc46:	4a35      	ldr	r2, [pc, #212]	; (800dd1c <xTaskIncrementTick+0x10c>)
 800dc48:	6813      	ldr	r3, [r2, #0]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	f7ff fde3 	bl	800d818 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800dc52:	4b33      	ldr	r3, [pc, #204]	; (800dd20 <xTaskIncrementTick+0x110>)
 800dc54:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800dc56:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800dc58:	42b3      	cmp	r3, r6
 800dc5a:	d80b      	bhi.n	800dc74 <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc5c:	4b2d      	ldr	r3, [pc, #180]	; (800dd14 <xTaskIncrementTick+0x104>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dc66:	4d2b      	ldr	r5, [pc, #172]	; (800dd14 <xTaskIncrementTick+0x104>)
 800dc68:	e027      	b.n	800dcba <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800dc6a:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800dc6c:	4b2c      	ldr	r3, [pc, #176]	; (800dd20 <xTaskIncrementTick+0x110>)
 800dc6e:	2201      	movs	r2, #1
 800dc70:	4252      	negs	r2, r2
 800dc72:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc74:	4b2b      	ldr	r3, [pc, #172]	; (800dd24 <xTaskIncrementTick+0x114>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7a:	0093      	lsls	r3, r2, #2
 800dc7c:	189b      	adds	r3, r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4a29      	ldr	r2, [pc, #164]	; (800dd28 <xTaskIncrementTick+0x118>)
 800dc82:	589b      	ldr	r3, [r3, r2]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d937      	bls.n	800dcf8 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800dc88:	2401      	movs	r4, #1
 800dc8a:	e035      	b.n	800dcf8 <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800dc8c:	4a24      	ldr	r2, [pc, #144]	; (800dd20 <xTaskIncrementTick+0x110>)
 800dc8e:	6013      	str	r3, [r2, #0]
							break;
 800dc90:	e7f0      	b.n	800dc74 <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 800dc92:	0098      	lsls	r0, r3, #2
 800dc94:	18c0      	adds	r0, r0, r3
 800dc96:	0080      	lsls	r0, r0, #2
 800dc98:	4b23      	ldr	r3, [pc, #140]	; (800dd28 <xTaskIncrementTick+0x118>)
 800dc9a:	18c0      	adds	r0, r0, r3
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	f7ff f9f5 	bl	800d08c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dca2:	4b20      	ldr	r3, [pc, #128]	; (800dd24 <xTaskIncrementTick+0x114>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d300      	bcc.n	800dcb0 <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 800dcae:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcb0:	4b18      	ldr	r3, [pc, #96]	; (800dd14 <xTaskIncrementTick+0x104>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d0d8      	beq.n	800dc6c <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800dcc0:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 800dcc2:	429e      	cmp	r6, r3
 800dcc4:	d3e2      	bcc.n	800dc8c <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dcc6:	1d3b      	adds	r3, r7, #4
 800dcc8:	4699      	mov	r9, r3
 800dcca:	0018      	movs	r0, r3
 800dccc:	f7ff fa00 	bl	800d0d0 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcd6:	0038      	movs	r0, r7
 800dcd8:	3018      	adds	r0, #24
 800dcda:	f7ff f9f9 	bl	800d0d0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	4a12      	ldr	r2, [pc, #72]	; (800dd2c <xTaskIncrementTick+0x11c>)
 800dce2:	6812      	ldr	r2, [r2, #0]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d9d4      	bls.n	800dc92 <xTaskIncrementTick+0x82>
 800dce8:	4a10      	ldr	r2, [pc, #64]	; (800dd2c <xTaskIncrementTick+0x11c>)
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	e7d1      	b.n	800dc92 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800dcee:	4a10      	ldr	r2, [pc, #64]	; (800dd30 <xTaskIncrementTick+0x120>)
 800dcf0:	6813      	ldr	r3, [r2, #0]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800dcf6:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <xTaskIncrementTick+0x124>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d000      	beq.n	800dd02 <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800dd00:	2401      	movs	r4, #1
}
 800dd02:	0020      	movs	r0, r4
 800dd04:	bc80      	pop	{r7}
 800dd06:	46b9      	mov	r9, r7
 800dd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd0a:	46c0      	nop			; (mov r8, r8)
 800dd0c:	20001d7c 	.word	0x20001d7c
 800dd10:	20001df8 	.word	0x20001df8
 800dd14:	20001cdc 	.word	0x20001cdc
 800dd18:	20001ce0 	.word	0x20001ce0
 800dd1c:	20001db4 	.word	0x20001db4
 800dd20:	200000a0 	.word	0x200000a0
 800dd24:	20001cd8 	.word	0x20001cd8
 800dd28:	20001ce4 	.word	0x20001ce4
 800dd2c:	20001d88 	.word	0x20001d88
 800dd30:	20001d78 	.word	0x20001d78
 800dd34:	20001dfc 	.word	0x20001dfc

0800dd38 <xTaskResumeAll>:
{
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800dd3a:	4b31      	ldr	r3, [pc, #196]	; (800de00 <xTaskResumeAll+0xc8>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <xTaskResumeAll+0xe>
 800dd42:	b672      	cpsid	i
 800dd44:	e7fe      	b.n	800dd44 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800dd46:	f000 fead 	bl	800eaa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800dd4a:	4b2d      	ldr	r3, [pc, #180]	; (800de00 <xTaskResumeAll+0xc8>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	3a01      	subs	r2, #1
 800dd50:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd52:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd54:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d14b      	bne.n	800ddf2 <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd5a:	4b2a      	ldr	r3, [pc, #168]	; (800de04 <xTaskResumeAll+0xcc>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd5e:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d046      	beq.n	800ddf2 <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd64:	4d28      	ldr	r5, [pc, #160]	; (800de08 <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dd66:	002c      	movs	r4, r5
 800dd68:	e00d      	b.n	800dd86 <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 800dd6a:	0098      	lsls	r0, r3, #2
 800dd6c:	18c0      	adds	r0, r0, r3
 800dd6e:	0080      	lsls	r0, r0, #2
 800dd70:	4b26      	ldr	r3, [pc, #152]	; (800de0c <xTaskResumeAll+0xd4>)
 800dd72:	18c0      	adds	r0, r0, r3
 800dd74:	0039      	movs	r1, r7
 800dd76:	f7ff f989 	bl	800d08c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd7a:	4b25      	ldr	r3, [pc, #148]	; (800de10 <xTaskResumeAll+0xd8>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800dd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d214      	bcs.n	800ddb0 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd86:	682b      	ldr	r3, [r5, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d015      	beq.n	800ddb8 <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dd8c:	68e3      	ldr	r3, [r4, #12]
 800dd8e:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd90:	0030      	movs	r0, r6
 800dd92:	3018      	adds	r0, #24
 800dd94:	f7ff f99c 	bl	800d0d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dd98:	1d37      	adds	r7, r6, #4
 800dd9a:	0038      	movs	r0, r7
 800dd9c:	f7ff f998 	bl	800d0d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dda0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800dda2:	4a1c      	ldr	r2, [pc, #112]	; (800de14 <xTaskResumeAll+0xdc>)
 800dda4:	6812      	ldr	r2, [r2, #0]
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d9df      	bls.n	800dd6a <xTaskResumeAll+0x32>
 800ddaa:	4a1a      	ldr	r2, [pc, #104]	; (800de14 <xTaskResumeAll+0xdc>)
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	e7dc      	b.n	800dd6a <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800ddb0:	4b19      	ldr	r3, [pc, #100]	; (800de18 <xTaskResumeAll+0xe0>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	e7e6      	b.n	800dd86 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800ddb8:	4b18      	ldr	r3, [pc, #96]	; (800de1c <xTaskResumeAll+0xe4>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d013      	beq.n	800dde8 <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ddc0:	4b16      	ldr	r3, [pc, #88]	; (800de1c <xTaskResumeAll+0xe4>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00f      	beq.n	800dde8 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 800ddc8:	4d13      	ldr	r5, [pc, #76]	; (800de18 <xTaskResumeAll+0xe0>)
 800ddca:	2601      	movs	r6, #1
						--uxPendedTicks;
 800ddcc:	4c13      	ldr	r4, [pc, #76]	; (800de1c <xTaskResumeAll+0xe4>)
 800ddce:	e005      	b.n	800dddc <xTaskResumeAll+0xa4>
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d005      	beq.n	800dde8 <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 800dddc:	f7ff ff18 	bl	800dc10 <xTaskIncrementTick>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d0f5      	beq.n	800ddd0 <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 800dde4:	602e      	str	r6, [r5, #0]
 800dde6:	e7f3      	b.n	800ddd0 <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 800dde8:	4b0b      	ldr	r3, [pc, #44]	; (800de18 <xTaskResumeAll+0xe0>)
 800ddea:	681c      	ldr	r4, [r3, #0]
 800ddec:	2c01      	cmp	r4, #1
 800ddee:	d004      	beq.n	800ddfa <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800ddf0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ddf2:	f000 fe63 	bl	800eabc <vPortExitCritical>
}
 800ddf6:	0020      	movs	r0, r4
 800ddf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800ddfa:	f000 fe47 	bl	800ea8c <vPortYield>
 800ddfe:	e7f8      	b.n	800ddf2 <xTaskResumeAll+0xba>
 800de00:	20001d7c 	.word	0x20001d7c
 800de04:	20001d74 	.word	0x20001d74
 800de08:	20001db8 	.word	0x20001db8
 800de0c:	20001ce4 	.word	0x20001ce4
 800de10:	20001cd8 	.word	0x20001cd8
 800de14:	20001d88 	.word	0x20001d88
 800de18:	20001dfc 	.word	0x20001dfc
 800de1c:	20001d78 	.word	0x20001d78

0800de20 <vTaskDelay>:
	{
 800de20:	b510      	push	{r4, lr}
 800de22:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de24:	d016      	beq.n	800de54 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800de26:	4b0d      	ldr	r3, [pc, #52]	; (800de5c <vTaskDelay+0x3c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <vTaskDelay+0x12>
 800de2e:	b672      	cpsid	i
 800de30:	e7fe      	b.n	800de30 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800de32:	f7ff fed9 	bl	800dbe8 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800de36:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <vTaskDelay+0x40>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800de3c:	4b09      	ldr	r3, [pc, #36]	; (800de64 <vTaskDelay+0x44>)
 800de3e:	6818      	ldr	r0, [r3, #0]
 800de40:	3004      	adds	r0, #4
 800de42:	f7ff f945 	bl	800d0d0 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800de46:	0020      	movs	r0, r4
 800de48:	f7ff fcfc 	bl	800d844 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800de4c:	f7ff ff74 	bl	800dd38 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800de50:	2800      	cmp	r0, #0
 800de52:	d101      	bne.n	800de58 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800de54:	f000 fe1a 	bl	800ea8c <vPortYield>
	}
 800de58:	bd10      	pop	{r4, pc}
 800de5a:	46c0      	nop			; (mov r8, r8)
 800de5c:	20001d7c 	.word	0x20001d7c
 800de60:	20001df8 	.word	0x20001df8
 800de64:	20001cd8 	.word	0x20001cd8

0800de68 <prvIdleTask>:
{
 800de68:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800de6a:	4e16      	ldr	r6, [pc, #88]	; (800dec4 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800de6c:	4d16      	ldr	r5, [pc, #88]	; (800dec8 <prvIdleTask+0x60>)
 800de6e:	e003      	b.n	800de78 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de70:	4b16      	ldr	r3, [pc, #88]	; (800decc <prvIdleTask+0x64>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d822      	bhi.n	800debe <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800de78:	6833      	ldr	r3, [r6, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d0f8      	beq.n	800de70 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800de7e:	f7ff feb3 	bl	800dbe8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800de82:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800de84:	f7ff ff58 	bl	800dd38 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800de88:	2c00      	cmp	r4, #0
 800de8a:	d0f5      	beq.n	800de78 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800de8c:	f000 fe0a 	bl	800eaa4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800de90:	4b0d      	ldr	r3, [pc, #52]	; (800dec8 <prvIdleTask+0x60>)
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800de96:	1d20      	adds	r0, r4, #4
 800de98:	f7ff f91a 	bl	800d0d0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800de9c:	4a0c      	ldr	r2, [pc, #48]	; (800ded0 <prvIdleTask+0x68>)
 800de9e:	6813      	ldr	r3, [r2, #0]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800dea4:	4a07      	ldr	r2, [pc, #28]	; (800dec4 <prvIdleTask+0x5c>)
 800dea6:	6813      	ldr	r3, [r2, #0]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800deac:	f000 fe06 	bl	800eabc <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800deb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800deb2:	f000 ff0b 	bl	800eccc <vPortFree>
		vPortFree( pxTCB );
 800deb6:	0020      	movs	r0, r4
 800deb8:	f000 ff08 	bl	800eccc <vPortFree>
	}
 800debc:	e7dc      	b.n	800de78 <prvIdleTask+0x10>
				taskYIELD();
 800debe:	f000 fde5 	bl	800ea8c <vPortYield>
 800dec2:	e7d9      	b.n	800de78 <prvIdleTask+0x10>
 800dec4:	20001d84 	.word	0x20001d84
 800dec8:	20001de4 	.word	0x20001de4
 800decc:	20001ce4 	.word	0x20001ce4
 800ded0:	20001d74 	.word	0x20001d74

0800ded4 <uxTaskGetSystemState>:
	{
 800ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ded6:	46c6      	mov	lr, r8
 800ded8:	b500      	push	{lr}
 800deda:	0006      	movs	r6, r0
 800dedc:	000d      	movs	r5, r1
 800dede:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800dee0:	f7ff fe82 	bl	800dbe8 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800dee4:	4b1e      	ldr	r3, [pc, #120]	; (800df60 <uxTaskGetSystemState+0x8c>)
 800dee6:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800dee8:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800deea:	42ab      	cmp	r3, r5
 800deec:	d832      	bhi.n	800df54 <uxTaskGetSystemState+0x80>
 800deee:	4d1d      	ldr	r5, [pc, #116]	; (800df64 <uxTaskGetSystemState+0x90>)
 800def0:	002f      	movs	r7, r5
 800def2:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800def4:	0160      	lsls	r0, r4, #5
 800def6:	1830      	adds	r0, r6, r0
 800def8:	2201      	movs	r2, #1
 800defa:	0029      	movs	r1, r5
 800defc:	f7ff fc34 	bl	800d768 <prvListTaskWithinSingleList>
 800df00:	1824      	adds	r4, r4, r0
 800df02:	002b      	movs	r3, r5
 800df04:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df06:	42bb      	cmp	r3, r7
 800df08:	d1f4      	bne.n	800def4 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800df0a:	4b17      	ldr	r3, [pc, #92]	; (800df68 <uxTaskGetSystemState+0x94>)
 800df0c:	6819      	ldr	r1, [r3, #0]
 800df0e:	0160      	lsls	r0, r4, #5
 800df10:	1830      	adds	r0, r6, r0
 800df12:	2202      	movs	r2, #2
 800df14:	f7ff fc28 	bl	800d768 <prvListTaskWithinSingleList>
 800df18:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800df1a:	4b14      	ldr	r3, [pc, #80]	; (800df6c <uxTaskGetSystemState+0x98>)
 800df1c:	6819      	ldr	r1, [r3, #0]
 800df1e:	0160      	lsls	r0, r4, #5
 800df20:	1830      	adds	r0, r6, r0
 800df22:	2202      	movs	r2, #2
 800df24:	f7ff fc20 	bl	800d768 <prvListTaskWithinSingleList>
 800df28:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800df2a:	0160      	lsls	r0, r4, #5
 800df2c:	1830      	adds	r0, r6, r0
 800df2e:	2204      	movs	r2, #4
 800df30:	490f      	ldr	r1, [pc, #60]	; (800df70 <uxTaskGetSystemState+0x9c>)
 800df32:	f7ff fc19 	bl	800d768 <prvListTaskWithinSingleList>
 800df36:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800df38:	0160      	lsls	r0, r4, #5
 800df3a:	1830      	adds	r0, r6, r0
 800df3c:	2203      	movs	r2, #3
 800df3e:	490d      	ldr	r1, [pc, #52]	; (800df74 <uxTaskGetSystemState+0xa0>)
 800df40:	f7ff fc12 	bl	800d768 <prvListTaskWithinSingleList>
 800df44:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800df46:	4643      	mov	r3, r8
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d003      	beq.n	800df54 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800df4c:	f7f9 fd58 	bl	8007a00 <ulMainGetRunTimeCounterValue>
 800df50:	4643      	mov	r3, r8
 800df52:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800df54:	f7ff fef0 	bl	800dd38 <xTaskResumeAll>
	}
 800df58:	0020      	movs	r0, r4
 800df5a:	bc80      	pop	{r7}
 800df5c:	46b8      	mov	r8, r7
 800df5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df60:	20001d74 	.word	0x20001d74
 800df64:	20001d5c 	.word	0x20001d5c
 800df68:	20001cdc 	.word	0x20001cdc
 800df6c:	20001ce0 	.word	0x20001ce0
 800df70:	20001de4 	.word	0x20001de4
 800df74:	20001dd0 	.word	0x20001dd0

0800df78 <vTaskSwitchContext>:
{
 800df78:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df7a:	4b39      	ldr	r3, [pc, #228]	; (800e060 <vTaskSwitchContext+0xe8>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800df82:	4b38      	ldr	r3, [pc, #224]	; (800e064 <vTaskSwitchContext+0xec>)
 800df84:	2201      	movs	r2, #1
 800df86:	601a      	str	r2, [r3, #0]
}
 800df88:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800df8a:	4b36      	ldr	r3, [pc, #216]	; (800e064 <vTaskSwitchContext+0xec>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800df90:	f7f9 fd36 	bl	8007a00 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800df94:	4b34      	ldr	r3, [pc, #208]	; (800e068 <vTaskSwitchContext+0xf0>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4298      	cmp	r0, r3
 800df9a:	d905      	bls.n	800dfa8 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800df9c:	4a33      	ldr	r2, [pc, #204]	; (800e06c <vTaskSwitchContext+0xf4>)
 800df9e:	6812      	ldr	r2, [r2, #0]
 800dfa0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800dfa2:	1acb      	subs	r3, r1, r3
 800dfa4:	181b      	adds	r3, r3, r0
 800dfa6:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800dfa8:	4b2f      	ldr	r3, [pc, #188]	; (800e068 <vTaskSwitchContext+0xf0>)
 800dfaa:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dfac:	4b2f      	ldr	r3, [pc, #188]	; (800e06c <vTaskSwitchContext+0xf4>)
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	6812      	ldr	r2, [r2, #0]
 800dfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d93b      	bls.n	800e032 <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dfba:	4b2c      	ldr	r3, [pc, #176]	; (800e06c <vTaskSwitchContext+0xf4>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dfc0:	2214      	movs	r2, #20
 800dfc2:	492b      	ldr	r1, [pc, #172]	; (800e070 <vTaskSwitchContext+0xf8>)
 800dfc4:	f004 f85e 	bl	8012084 <memcmp>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d139      	bne.n	800e040 <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dfcc:	4b29      	ldr	r3, [pc, #164]	; (800e074 <vTaskSwitchContext+0xfc>)
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	0093      	lsls	r3, r2, #2
 800dfd2:	189b      	adds	r3, r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4a28      	ldr	r2, [pc, #160]	; (800e078 <vTaskSwitchContext+0x100>)
 800dfd8:	589b      	ldr	r3, [r3, r2]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10f      	bne.n	800dffe <vTaskSwitchContext+0x86>
 800dfde:	4825      	ldr	r0, [pc, #148]	; (800e074 <vTaskSwitchContext+0xfc>)
 800dfe0:	0002      	movs	r2, r0
 800dfe2:	6803      	ldr	r3, [r0, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d032      	beq.n	800e04e <vTaskSwitchContext+0xd6>
 800dfe8:	6813      	ldr	r3, [r2, #0]
 800dfea:	3b01      	subs	r3, #1
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	6811      	ldr	r1, [r2, #0]
 800dff0:	008b      	lsls	r3, r1, #2
 800dff2:	185b      	adds	r3, r3, r1
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4920      	ldr	r1, [pc, #128]	; (800e078 <vTaskSwitchContext+0x100>)
 800dff8:	585b      	ldr	r3, [r3, r1]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d0f1      	beq.n	800dfe2 <vTaskSwitchContext+0x6a>
 800dffe:	4b1d      	ldr	r3, [pc, #116]	; (800e074 <vTaskSwitchContext+0xfc>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	4c1d      	ldr	r4, [pc, #116]	; (800e078 <vTaskSwitchContext+0x100>)
 800e004:	0093      	lsls	r3, r2, #2
 800e006:	1899      	adds	r1, r3, r2
 800e008:	0089      	lsls	r1, r1, #2
 800e00a:	1861      	adds	r1, r4, r1
 800e00c:	6848      	ldr	r0, [r1, #4]
 800e00e:	6840      	ldr	r0, [r0, #4]
 800e010:	6048      	str	r0, [r1, #4]
 800e012:	189b      	adds	r3, r3, r2
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	3308      	adds	r3, #8
 800e018:	191b      	adds	r3, r3, r4
 800e01a:	4298      	cmp	r0, r3
 800e01c:	d019      	beq.n	800e052 <vTaskSwitchContext+0xda>
 800e01e:	0093      	lsls	r3, r2, #2
 800e020:	189a      	adds	r2, r3, r2
 800e022:	0092      	lsls	r2, r2, #2
 800e024:	4b14      	ldr	r3, [pc, #80]	; (800e078 <vTaskSwitchContext+0x100>)
 800e026:	189a      	adds	r2, r3, r2
 800e028:	6853      	ldr	r3, [r2, #4]
 800e02a:	68da      	ldr	r2, [r3, #12]
 800e02c:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <vTaskSwitchContext+0xf4>)
 800e02e:	601a      	str	r2, [r3, #0]
}
 800e030:	e7aa      	b.n	800df88 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e032:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <vTaskSwitchContext+0xf4>)
 800e034:	6818      	ldr	r0, [r3, #0]
 800e036:	6819      	ldr	r1, [r3, #0]
 800e038:	3134      	adds	r1, #52	; 0x34
 800e03a:	f7fe f921 	bl	800c280 <vApplicationStackOverflowHook>
 800e03e:	e7bc      	b.n	800dfba <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e040:	4b0a      	ldr	r3, [pc, #40]	; (800e06c <vTaskSwitchContext+0xf4>)
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	6819      	ldr	r1, [r3, #0]
 800e046:	3134      	adds	r1, #52	; 0x34
 800e048:	f7fe f91a 	bl	800c280 <vApplicationStackOverflowHook>
 800e04c:	e7be      	b.n	800dfcc <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e04e:	b672      	cpsid	i
 800e050:	e7fe      	b.n	800e050 <vTaskSwitchContext+0xd8>
 800e052:	6840      	ldr	r0, [r0, #4]
 800e054:	0093      	lsls	r3, r2, #2
 800e056:	189b      	adds	r3, r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	18e3      	adds	r3, r4, r3
 800e05c:	6058      	str	r0, [r3, #4]
 800e05e:	e7de      	b.n	800e01e <vTaskSwitchContext+0xa6>
 800e060:	20001d7c 	.word	0x20001d7c
 800e064:	20001dfc 	.word	0x20001dfc
 800e068:	20001d70 	.word	0x20001d70
 800e06c:	20001cd8 	.word	0x20001cd8
 800e070:	0801acd4 	.word	0x0801acd4
 800e074:	20001d88 	.word	0x20001d88
 800e078:	20001ce4 	.word	0x20001ce4

0800e07c <vTaskPlaceOnEventList>:
{
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800e080:	2800      	cmp	r0, #0
 800e082:	d010      	beq.n	800e0a6 <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e084:	4d0c      	ldr	r5, [pc, #48]	; (800e0b8 <vTaskPlaceOnEventList+0x3c>)
 800e086:	6829      	ldr	r1, [r5, #0]
 800e088:	3118      	adds	r1, #24
 800e08a:	f7ff f80a 	bl	800d0a2 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e08e:	6828      	ldr	r0, [r5, #0]
 800e090:	3004      	adds	r0, #4
 800e092:	f7ff f81d 	bl	800d0d0 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e096:	1c63      	adds	r3, r4, #1
 800e098:	d007      	beq.n	800e0aa <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800e09a:	4b08      	ldr	r3, [pc, #32]	; (800e0bc <vTaskPlaceOnEventList+0x40>)
 800e09c:	6818      	ldr	r0, [r3, #0]
 800e09e:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e0a0:	f7ff fbd0 	bl	800d844 <prvAddCurrentTaskToDelayedList>
}
 800e0a4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800e0a6:	b672      	cpsid	i
 800e0a8:	e7fe      	b.n	800e0a8 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e0aa:	4b03      	ldr	r3, [pc, #12]	; (800e0b8 <vTaskPlaceOnEventList+0x3c>)
 800e0ac:	6819      	ldr	r1, [r3, #0]
 800e0ae:	3104      	adds	r1, #4
 800e0b0:	4803      	ldr	r0, [pc, #12]	; (800e0c0 <vTaskPlaceOnEventList+0x44>)
 800e0b2:	f7fe ffeb 	bl	800d08c <vListInsertEnd>
 800e0b6:	e7f5      	b.n	800e0a4 <vTaskPlaceOnEventList+0x28>
 800e0b8:	20001cd8 	.word	0x20001cd8
 800e0bc:	20001df8 	.word	0x20001df8
 800e0c0:	20001dd0 	.word	0x20001dd0

0800e0c4 <vTaskPlaceOnEventListRestricted>:
	{
 800e0c4:	b570      	push	{r4, r5, r6, lr}
 800e0c6:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d00e      	beq.n	800e0ea <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0cc:	4d08      	ldr	r5, [pc, #32]	; (800e0f0 <vTaskPlaceOnEventListRestricted+0x2c>)
 800e0ce:	6829      	ldr	r1, [r5, #0]
 800e0d0:	3118      	adds	r1, #24
 800e0d2:	f7fe ffdb 	bl	800d08c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e0d6:	6828      	ldr	r0, [r5, #0]
 800e0d8:	3004      	adds	r0, #4
 800e0da:	f7fe fff9 	bl	800d0d0 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e0de:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <vTaskPlaceOnEventListRestricted+0x30>)
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e0e4:	f7ff fbae 	bl	800d844 <prvAddCurrentTaskToDelayedList>
	}
 800e0e8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800e0ea:	b672      	cpsid	i
 800e0ec:	e7fe      	b.n	800e0ec <vTaskPlaceOnEventListRestricted+0x28>
 800e0ee:	46c0      	nop			; (mov r8, r8)
 800e0f0:	20001cd8 	.word	0x20001cd8
 800e0f4:	20001df8 	.word	0x20001df8

0800e0f8 <xTaskRemoveFromEventList>:
{
 800e0f8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e0fa:	68c3      	ldr	r3, [r0, #12]
 800e0fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e0fe:	2c00      	cmp	r4, #0
 800e100:	d027      	beq.n	800e152 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e102:	0025      	movs	r5, r4
 800e104:	3518      	adds	r5, #24
 800e106:	0028      	movs	r0, r5
 800e108:	f7fe ffe2 	bl	800d0d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e10c:	4b14      	ldr	r3, [pc, #80]	; (800e160 <xTaskRemoveFromEventList+0x68>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d120      	bne.n	800e156 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e114:	1d25      	adds	r5, r4, #4
 800e116:	0028      	movs	r0, r5
 800e118:	f7fe ffda 	bl	800d0d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e11c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e11e:	4a11      	ldr	r2, [pc, #68]	; (800e164 <xTaskRemoveFromEventList+0x6c>)
 800e120:	6812      	ldr	r2, [r2, #0]
 800e122:	4293      	cmp	r3, r2
 800e124:	d901      	bls.n	800e12a <xTaskRemoveFromEventList+0x32>
 800e126:	4a0f      	ldr	r2, [pc, #60]	; (800e164 <xTaskRemoveFromEventList+0x6c>)
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	0098      	lsls	r0, r3, #2
 800e12c:	18c0      	adds	r0, r0, r3
 800e12e:	0080      	lsls	r0, r0, #2
 800e130:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <xTaskRemoveFromEventList+0x70>)
 800e132:	18c0      	adds	r0, r0, r3
 800e134:	0029      	movs	r1, r5
 800e136:	f7fe ffa9 	bl	800d08c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e13a:	4b0c      	ldr	r3, [pc, #48]	; (800e16c <xTaskRemoveFromEventList+0x74>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e142:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e144:	429a      	cmp	r2, r3
 800e146:	d903      	bls.n	800e150 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800e148:	4b09      	ldr	r3, [pc, #36]	; (800e170 <xTaskRemoveFromEventList+0x78>)
 800e14a:	2201      	movs	r2, #1
 800e14c:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800e14e:	3001      	adds	r0, #1
}
 800e150:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800e152:	b672      	cpsid	i
 800e154:	e7fe      	b.n	800e154 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e156:	0029      	movs	r1, r5
 800e158:	4806      	ldr	r0, [pc, #24]	; (800e174 <xTaskRemoveFromEventList+0x7c>)
 800e15a:	f7fe ff97 	bl	800d08c <vListInsertEnd>
 800e15e:	e7ec      	b.n	800e13a <xTaskRemoveFromEventList+0x42>
 800e160:	20001d7c 	.word	0x20001d7c
 800e164:	20001d88 	.word	0x20001d88
 800e168:	20001ce4 	.word	0x20001ce4
 800e16c:	20001cd8 	.word	0x20001cd8
 800e170:	20001dfc 	.word	0x20001dfc
 800e174:	20001db8 	.word	0x20001db8

0800e178 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800e178:	2800      	cmp	r0, #0
 800e17a:	d006      	beq.n	800e18a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e17c:	4b04      	ldr	r3, [pc, #16]	; (800e190 <vTaskSetTimeOutState+0x18>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e182:	4b04      	ldr	r3, [pc, #16]	; (800e194 <vTaskSetTimeOutState+0x1c>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	6043      	str	r3, [r0, #4]
}
 800e188:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800e18a:	b672      	cpsid	i
 800e18c:	e7fe      	b.n	800e18c <vTaskSetTimeOutState+0x14>
 800e18e:	46c0      	nop			; (mov r8, r8)
 800e190:	20001db4 	.word	0x20001db4
 800e194:	20001df8 	.word	0x20001df8

0800e198 <xTaskCheckForTimeOut>:
{
 800e198:	b570      	push	{r4, r5, r6, lr}
 800e19a:	0004      	movs	r4, r0
 800e19c:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d01e      	beq.n	800e1e0 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800e1a2:	2900      	cmp	r1, #0
 800e1a4:	d01e      	beq.n	800e1e4 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800e1a6:	f000 fc7d 	bl	800eaa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e1aa:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <xTaskCheckForTimeOut+0x5c>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e1ae:	682b      	ldr	r3, [r5, #0]
 800e1b0:	1c59      	adds	r1, r3, #1
 800e1b2:	d019      	beq.n	800e1e8 <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1b4:	4910      	ldr	r1, [pc, #64]	; (800e1f8 <xTaskCheckForTimeOut+0x60>)
 800e1b6:	6809      	ldr	r1, [r1, #0]
 800e1b8:	6820      	ldr	r0, [r4, #0]
 800e1ba:	4288      	cmp	r0, r1
 800e1bc:	d003      	beq.n	800e1c6 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800e1be:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1c0:	6861      	ldr	r1, [r4, #4]
 800e1c2:	4291      	cmp	r1, r2
 800e1c4:	d911      	bls.n	800e1ea <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e1c6:	6861      	ldr	r1, [r4, #4]
 800e1c8:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800e1ca:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e1cc:	4283      	cmp	r3, r0
 800e1ce:	d90c      	bls.n	800e1ea <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800e1d0:	1a9b      	subs	r3, r3, r2
 800e1d2:	185b      	adds	r3, r3, r1
 800e1d4:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800e1d6:	0020      	movs	r0, r4
 800e1d8:	f7ff ffce 	bl	800e178 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800e1dc:	2600      	movs	r6, #0
 800e1de:	e004      	b.n	800e1ea <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 800e1e0:	b672      	cpsid	i
 800e1e2:	e7fe      	b.n	800e1e2 <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 800e1e4:	b672      	cpsid	i
 800e1e6:	e7fe      	b.n	800e1e6 <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 800e1e8:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800e1ea:	f000 fc67 	bl	800eabc <vPortExitCritical>
}
 800e1ee:	0030      	movs	r0, r6
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	20001df8 	.word	0x20001df8
 800e1f8:	20001db4 	.word	0x20001db4

0800e1fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e1fc:	4b01      	ldr	r3, [pc, #4]	; (800e204 <vTaskMissedYield+0x8>)
 800e1fe:	2201      	movs	r2, #1
 800e200:	601a      	str	r2, [r3, #0]
}
 800e202:	4770      	bx	lr
 800e204:	20001dfc 	.word	0x20001dfc

0800e208 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e208:	4b05      	ldr	r3, [pc, #20]	; (800e220 <xTaskGetSchedulerState+0x18>)
 800e20a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e20c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e212:	4b04      	ldr	r3, [pc, #16]	; (800e224 <xTaskGetSchedulerState+0x1c>)
 800e214:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800e216:	4243      	negs	r3, r0
 800e218:	4158      	adcs	r0, r3
 800e21a:	0040      	lsls	r0, r0, #1
	}
 800e21c:	4770      	bx	lr
 800e21e:	46c0      	nop			; (mov r8, r8)
 800e220:	20001dcc 	.word	0x20001dcc
 800e224:	20001d7c 	.word	0x20001d7c

0800e228 <vTaskPriorityInherit>:
	{
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e22c:	d01a      	beq.n	800e264 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e22e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e230:	4b19      	ldr	r3, [pc, #100]	; (800e298 <vTaskPriorityInherit+0x70>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e236:	429a      	cmp	r2, r3
 800e238:	d214      	bcs.n	800e264 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e23a:	6983      	ldr	r3, [r0, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	db05      	blt.n	800e24c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e240:	4b15      	ldr	r3, [pc, #84]	; (800e298 <vTaskPriorityInherit+0x70>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e246:	2307      	movs	r3, #7
 800e248:	1a5b      	subs	r3, r3, r1
 800e24a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e24c:	0093      	lsls	r3, r2, #2
 800e24e:	189b      	adds	r3, r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4a12      	ldr	r2, [pc, #72]	; (800e29c <vTaskPriorityInherit+0x74>)
 800e254:	189b      	adds	r3, r3, r2
 800e256:	6962      	ldr	r2, [r4, #20]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d004      	beq.n	800e266 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e25c:	4b0e      	ldr	r3, [pc, #56]	; (800e298 <vTaskPriorityInherit+0x70>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800e264:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e266:	1d25      	adds	r5, r4, #4
 800e268:	0028      	movs	r0, r5
 800e26a:	f7fe ff31 	bl	800d0d0 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e26e:	4b0a      	ldr	r3, [pc, #40]	; (800e298 <vTaskPriorityInherit+0x70>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e274:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e276:	4a0a      	ldr	r2, [pc, #40]	; (800e2a0 <vTaskPriorityInherit+0x78>)
 800e278:	6812      	ldr	r2, [r2, #0]
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d808      	bhi.n	800e290 <vTaskPriorityInherit+0x68>
 800e27e:	0098      	lsls	r0, r3, #2
 800e280:	18c0      	adds	r0, r0, r3
 800e282:	0080      	lsls	r0, r0, #2
 800e284:	4b05      	ldr	r3, [pc, #20]	; (800e29c <vTaskPriorityInherit+0x74>)
 800e286:	18c0      	adds	r0, r0, r3
 800e288:	0029      	movs	r1, r5
 800e28a:	f7fe feff 	bl	800d08c <vListInsertEnd>
	}
 800e28e:	e7e9      	b.n	800e264 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800e290:	4a03      	ldr	r2, [pc, #12]	; (800e2a0 <vTaskPriorityInherit+0x78>)
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	e7f3      	b.n	800e27e <vTaskPriorityInherit+0x56>
 800e296:	46c0      	nop			; (mov r8, r8)
 800e298:	20001cd8 	.word	0x20001cd8
 800e29c:	20001ce4 	.word	0x20001ce4
 800e2a0:	20001d88 	.word	0x20001d88

0800e2a4 <xTaskPriorityDisinherit>:
	{
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e2a8:	d02c      	beq.n	800e304 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800e2aa:	4b18      	ldr	r3, [pc, #96]	; (800e30c <xTaskPriorityDisinherit+0x68>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4283      	cmp	r3, r0
 800e2b0:	d001      	beq.n	800e2b6 <xTaskPriorityDisinherit+0x12>
 800e2b2:	b672      	cpsid	i
 800e2b4:	e7fe      	b.n	800e2b4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <xTaskPriorityDisinherit+0x1c>
 800e2bc:	b672      	cpsid	i
 800e2be:	e7fe      	b.n	800e2be <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e2c6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e2c8:	428a      	cmp	r2, r1
 800e2ca:	d01d      	beq.n	800e308 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800e2cc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d119      	bne.n	800e306 <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2d2:	1d25      	adds	r5, r4, #4
 800e2d4:	0028      	movs	r0, r5
 800e2d6:	f7fe fefb 	bl	800d0d0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e2dc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2de:	2207      	movs	r2, #7
 800e2e0:	1ad2      	subs	r2, r2, r3
 800e2e2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2e4:	4a0a      	ldr	r2, [pc, #40]	; (800e310 <xTaskPriorityDisinherit+0x6c>)
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d901      	bls.n	800e2f0 <xTaskPriorityDisinherit+0x4c>
 800e2ec:	4a08      	ldr	r2, [pc, #32]	; (800e310 <xTaskPriorityDisinherit+0x6c>)
 800e2ee:	6013      	str	r3, [r2, #0]
 800e2f0:	0098      	lsls	r0, r3, #2
 800e2f2:	18c0      	adds	r0, r0, r3
 800e2f4:	0080      	lsls	r0, r0, #2
 800e2f6:	4b07      	ldr	r3, [pc, #28]	; (800e314 <xTaskPriorityDisinherit+0x70>)
 800e2f8:	18c0      	adds	r0, r0, r3
 800e2fa:	0029      	movs	r1, r5
 800e2fc:	f7fe fec6 	bl	800d08c <vListInsertEnd>
					xReturn = pdTRUE;
 800e300:	2001      	movs	r0, #1
 800e302:	e000      	b.n	800e306 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800e304:	2000      	movs	r0, #0
	}
 800e306:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800e308:	2000      	movs	r0, #0
 800e30a:	e7fc      	b.n	800e306 <xTaskPriorityDisinherit+0x62>
 800e30c:	20001cd8 	.word	0x20001cd8
 800e310:	20001d88 	.word	0x20001d88
 800e314:	20001ce4 	.word	0x20001ce4

0800e318 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e31a:	46ce      	mov	lr, r9
 800e31c:	4647      	mov	r7, r8
 800e31e:	b580      	push	{r7, lr}
 800e320:	b085      	sub	sp, #20
 800e322:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e324:	2300      	movs	r3, #0
 800e326:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e328:	4b30      	ldr	r3, [pc, #192]	; (800e3ec <vTaskList+0xd4>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	0140      	lsls	r0, r0, #5
 800e332:	f000 fc39 	bl	800eba8 <pvPortMalloc>
 800e336:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e338:	d053      	beq.n	800e3e2 <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e33a:	9903      	ldr	r1, [sp, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f7ff fdc9 	bl	800ded4 <uxTaskGetSystemState>
 800e342:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e344:	2300      	movs	r3, #0
 800e346:	9302      	str	r3, [sp, #8]
 800e348:	9a02      	ldr	r2, [sp, #8]
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d245      	bcs.n	800e3dc <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800e350:	2343      	movs	r3, #67	; 0x43
 800e352:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e354:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800e356:	4b26      	ldr	r3, [pc, #152]	; (800e3f0 <vTaskList+0xd8>)
 800e358:	4699      	mov	r9, r3
 800e35a:	e02a      	b.n	800e3b2 <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e35c:	3a02      	subs	r2, #2
 800e35e:	1e53      	subs	r3, r2, #1
 800e360:	419a      	sbcs	r2, r3
 800e362:	4256      	negs	r6, r2
 800e364:	43be      	bics	r6, r7
 800e366:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e368:	9b02      	ldr	r3, [sp, #8]
 800e36a:	015b      	lsls	r3, r3, #5
 800e36c:	18eb      	adds	r3, r5, r3
 800e36e:	6859      	ldr	r1, [r3, #4]
 800e370:	0020      	movs	r0, r4
 800e372:	f7ff fa91 	bl	800d898 <prvWriteNameToBuffer>
 800e376:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800e378:	9b02      	ldr	r3, [sp, #8]
 800e37a:	9a02      	ldr	r2, [sp, #8]
 800e37c:	9902      	ldr	r1, [sp, #8]
 800e37e:	015b      	lsls	r3, r3, #5
 800e380:	18eb      	adds	r3, r5, r3
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	0149      	lsls	r1, r1, #5
 800e386:	1869      	adds	r1, r5, r1
 800e388:	6889      	ldr	r1, [r1, #8]
 800e38a:	9101      	str	r1, [sp, #4]
 800e38c:	0152      	lsls	r2, r2, #5
 800e38e:	18aa      	adds	r2, r5, r2
 800e390:	8b92      	ldrh	r2, [r2, #28]
 800e392:	9200      	str	r2, [sp, #0]
 800e394:	0032      	movs	r2, r6
 800e396:	4649      	mov	r1, r9
 800e398:	f004 f880 	bl	801249c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e39c:	0020      	movs	r0, r4
 800e39e:	f7f1 febb 	bl	8000118 <strlen>
 800e3a2:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	9302      	str	r3, [sp, #8]
 800e3aa:	9a02      	ldr	r2, [sp, #8]
 800e3ac:	9b03      	ldr	r3, [sp, #12]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d214      	bcs.n	800e3dc <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e3b2:	9b02      	ldr	r3, [sp, #8]
 800e3b4:	015b      	lsls	r3, r3, #5
 800e3b6:	18eb      	adds	r3, r5, r3
 800e3b8:	7b1a      	ldrb	r2, [r3, #12]
 800e3ba:	2a03      	cmp	r2, #3
 800e3bc:	d00c      	beq.n	800e3d8 <vTaskList+0xc0>
 800e3be:	d803      	bhi.n	800e3c8 <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 800e3c0:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e3c2:	2a01      	cmp	r2, #1
 800e3c4:	d1ca      	bne.n	800e35c <vTaskList+0x44>
 800e3c6:	e7cf      	b.n	800e368 <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800e3c8:	3a04      	subs	r2, #4
 800e3ca:	1e53      	subs	r3, r2, #1
 800e3cc:	419a      	sbcs	r2, r3
 800e3ce:	4256      	negs	r6, r2
 800e3d0:	4643      	mov	r3, r8
 800e3d2:	439e      	bics	r6, r3
 800e3d4:	3644      	adds	r6, #68	; 0x44
 800e3d6:	e7c7      	b.n	800e368 <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800e3d8:	2653      	movs	r6, #83	; 0x53
 800e3da:	e7c5      	b.n	800e368 <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e3dc:	0028      	movs	r0, r5
 800e3de:	f000 fc75 	bl	800eccc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3e2:	b005      	add	sp, #20
 800e3e4:	bcc0      	pop	{r6, r7}
 800e3e6:	46b9      	mov	r9, r7
 800e3e8:	46b0      	mov	r8, r6
 800e3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ec:	20001d74 	.word	0x20001d74
 800e3f0:	0801acac 	.word	0x0801acac

0800e3f4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3f6:	46c6      	mov	lr, r8
 800e3f8:	b500      	push	{lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e3fe:	2300      	movs	r3, #0
 800e400:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e402:	4b2a      	ldr	r3, [pc, #168]	; (800e4ac <vTaskGetRunTimeStats+0xb8>)
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e408:	6818      	ldr	r0, [r3, #0]
 800e40a:	0140      	lsls	r0, r0, #5
 800e40c:	f000 fbcc 	bl	800eba8 <pvPortMalloc>
 800e410:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800e412:	d015      	beq.n	800e440 <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e414:	9903      	ldr	r1, [sp, #12]
 800e416:	aa01      	add	r2, sp, #4
 800e418:	f7ff fd5c 	bl	800ded4 <uxTaskGetSystemState>
 800e41c:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e41e:	9d01      	ldr	r5, [sp, #4]
 800e420:	2164      	movs	r1, #100	; 0x64
 800e422:	0028      	movs	r0, r5
 800e424:	f7f1 fe94 	bl	8000150 <__udivsi3>
 800e428:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800e42a:	2d63      	cmp	r5, #99	; 0x63
 800e42c:	d905      	bls.n	800e43a <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e42e:	2300      	movs	r3, #0
 800e430:	9302      	str	r3, [sp, #8]
 800e432:	9a02      	ldr	r2, [sp, #8]
 800e434:	9b03      	ldr	r3, [sp, #12]
 800e436:	429a      	cmp	r2, r3
 800e438:	d318      	bcc.n	800e46c <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e43a:	0038      	movs	r0, r7
 800e43c:	f000 fc46 	bl	800eccc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e440:	b004      	add	sp, #16
 800e442:	bc80      	pop	{r7}
 800e444:	46b8      	mov	r8, r7
 800e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e448:	9b02      	ldr	r3, [sp, #8]
 800e44a:	015b      	lsls	r3, r3, #5
 800e44c:	18fb      	adds	r3, r7, r3
 800e44e:	699a      	ldr	r2, [r3, #24]
 800e450:	4917      	ldr	r1, [pc, #92]	; (800e4b0 <vTaskGetRunTimeStats+0xbc>)
 800e452:	f004 f823 	bl	801249c <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800e456:	0020      	movs	r0, r4
 800e458:	f7f1 fe5e 	bl	8000118 <strlen>
 800e45c:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800e45e:	9b02      	ldr	r3, [sp, #8]
 800e460:	3301      	adds	r3, #1
 800e462:	9302      	str	r3, [sp, #8]
 800e464:	9a02      	ldr	r2, [sp, #8]
 800e466:	9b03      	ldr	r3, [sp, #12]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d2e6      	bcs.n	800e43a <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e46c:	9b02      	ldr	r3, [sp, #8]
 800e46e:	015b      	lsls	r3, r3, #5
 800e470:	18fb      	adds	r3, r7, r3
 800e472:	699e      	ldr	r6, [r3, #24]
 800e474:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e476:	9b02      	ldr	r3, [sp, #8]
 800e478:	015b      	lsls	r3, r3, #5
 800e47a:	18fb      	adds	r3, r7, r3
 800e47c:	6859      	ldr	r1, [r3, #4]
 800e47e:	0020      	movs	r0, r4
 800e480:	f7ff fa0a 	bl	800d898 <prvWriteNameToBuffer>
 800e484:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800e486:	42ae      	cmp	r6, r5
 800e488:	d3de      	bcc.n	800e448 <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e48a:	9b02      	ldr	r3, [sp, #8]
 800e48c:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e48e:	0029      	movs	r1, r5
 800e490:	0030      	movs	r0, r6
 800e492:	f7f1 fe5d 	bl	8000150 <__udivsi3>
 800e496:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e498:	4642      	mov	r2, r8
 800e49a:	0152      	lsls	r2, r2, #5
 800e49c:	18ba      	adds	r2, r7, r2
 800e49e:	6992      	ldr	r2, [r2, #24]
 800e4a0:	4904      	ldr	r1, [pc, #16]	; (800e4b4 <vTaskGetRunTimeStats+0xc0>)
 800e4a2:	0020      	movs	r0, r4
 800e4a4:	f003 fffa 	bl	801249c <sprintf>
 800e4a8:	e7d5      	b.n	800e456 <vTaskGetRunTimeStats+0x62>
 800e4aa:	46c0      	nop			; (mov r8, r8)
 800e4ac:	20001d74 	.word	0x20001d74
 800e4b0:	0801acc8 	.word	0x0801acc8
 800e4b4:	0801acbc 	.word	0x0801acbc

0800e4b8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e4b8:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <pvTaskIncrementMutexHeldCount+0x18>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d004      	beq.n	800e4ca <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e4c0:	4b03      	ldr	r3, [pc, #12]	; (800e4d0 <pvTaskIncrementMutexHeldCount+0x18>)
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e4ca:	4b01      	ldr	r3, [pc, #4]	; (800e4d0 <pvTaskIncrementMutexHeldCount+0x18>)
 800e4cc:	6818      	ldr	r0, [r3, #0]
	}
 800e4ce:	4770      	bx	lr
 800e4d0:	20001cd8 	.word	0x20001cd8

0800e4d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	0004      	movs	r4, r0
 800e4d8:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e4da:	f000 fae3 	bl	800eaa4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e4de:	4b20      	ldr	r3, [pc, #128]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d106      	bne.n	800e4f6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e4e8:	4b1d      	ldr	r3, [pc, #116]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	235c      	movs	r3, #92	; 0x5c
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e4f2:	2d00      	cmp	r5, #0
 800e4f4:	d117      	bne.n	800e526 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e4f6:	f000 fae1 	bl	800eabc <vPortExitCritical>

		taskENTER_CRITICAL();
 800e4fa:	f000 fad3 	bl	800eaa4 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e4fe:	4b18      	ldr	r3, [pc, #96]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e504:	2d00      	cmp	r5, #0
 800e506:	d005      	beq.n	800e514 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800e508:	2c00      	cmp	r4, #0
 800e50a:	d022      	beq.n	800e552 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e50c:	4b14      	ldr	r3, [pc, #80]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2200      	movs	r2, #0
 800e512:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e514:	4b12      	ldr	r3, [pc, #72]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	235c      	movs	r3, #92	; 0x5c
 800e51a:	2100      	movs	r1, #0
 800e51c:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e51e:	f000 facd 	bl	800eabc <vPortExitCritical>

		return ulReturn;
	}
 800e522:	0028      	movs	r0, r5
 800e524:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e526:	4b0e      	ldr	r3, [pc, #56]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e528:	6818      	ldr	r0, [r3, #0]
 800e52a:	3004      	adds	r0, #4
 800e52c:	f7fe fdd0 	bl	800d0d0 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e530:	1c6b      	adds	r3, r5, #1
 800e532:	d007      	beq.n	800e544 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800e534:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <ulTaskNotifyTake+0x90>)
 800e536:	6818      	ldr	r0, [r3, #0]
 800e538:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e53a:	f7ff f983 	bl	800d844 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e53e:	f000 faa5 	bl	800ea8c <vPortYield>
 800e542:	e7d8      	b.n	800e4f6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e544:	4b06      	ldr	r3, [pc, #24]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e546:	6819      	ldr	r1, [r3, #0]
 800e548:	3104      	adds	r1, #4
 800e54a:	4807      	ldr	r0, [pc, #28]	; (800e568 <ulTaskNotifyTake+0x94>)
 800e54c:	f7fe fd9e 	bl	800d08c <vListInsertEnd>
 800e550:	e7f5      	b.n	800e53e <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800e552:	4b03      	ldr	r3, [pc, #12]	; (800e560 <ulTaskNotifyTake+0x8c>)
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e558:	3b01      	subs	r3, #1
 800e55a:	6593      	str	r3, [r2, #88]	; 0x58
 800e55c:	e7da      	b.n	800e514 <ulTaskNotifyTake+0x40>
 800e55e:	46c0      	nop			; (mov r8, r8)
 800e560:	20001cd8 	.word	0x20001cd8
 800e564:	20001df8 	.word	0x20001df8
 800e568:	20001dd0 	.word	0x20001dd0

0800e56c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	0004      	movs	r4, r0
 800e570:	000e      	movs	r6, r1
 800e572:	0015      	movs	r5, r2
 800e574:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800e576:	2800      	cmp	r0, #0
 800e578:	d015      	beq.n	800e5a6 <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e57a:	f000 fa93 	bl	800eaa4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e57e:	2f00      	cmp	r7, #0
 800e580:	d001      	beq.n	800e586 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e584:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e586:	225c      	movs	r2, #92	; 0x5c
 800e588:	5ca3      	ldrb	r3, [r4, r2]
 800e58a:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800e58c:	2102      	movs	r1, #2
 800e58e:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800e590:	2d03      	cmp	r5, #3
 800e592:	d01a      	beq.n	800e5ca <xTaskGenericNotify+0x5e>
 800e594:	d809      	bhi.n	800e5aa <xTaskGenericNotify+0x3e>
 800e596:	2d01      	cmp	r5, #1
 800e598:	d00d      	beq.n	800e5b6 <xTaskGenericNotify+0x4a>
 800e59a:	2d02      	cmp	r5, #2
 800e59c:	d10e      	bne.n	800e5bc <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e59e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e5a0:	3201      	adds	r2, #1
 800e5a2:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e5a4:	e00a      	b.n	800e5bc <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 800e5a6:	b672      	cpsid	i
 800e5a8:	e7fe      	b.n	800e5a8 <xTaskGenericNotify+0x3c>
			switch( eAction )
 800e5aa:	2d04      	cmp	r5, #4
 800e5ac:	d106      	bne.n	800e5bc <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d02f      	beq.n	800e612 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e5b2:	65a6      	str	r6, [r4, #88]	; 0x58
 800e5b4:	e002      	b.n	800e5bc <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 800e5b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e5b8:	4316      	orrs	r6, r2
 800e5ba:	65a6      	str	r6, [r4, #88]	; 0x58
 800e5bc:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d005      	beq.n	800e5ce <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e5c2:	f000 fa7b 	bl	800eabc <vPortExitCritical>

		return xReturn;
	}
 800e5c6:	0028      	movs	r0, r5
 800e5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 800e5ca:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800e5cc:	e7f6      	b.n	800e5bc <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e5ce:	1d25      	adds	r5, r4, #4
 800e5d0:	0028      	movs	r0, r5
 800e5d2:	f7fe fd7d 	bl	800d0d0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e5d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5d8:	4a0f      	ldr	r2, [pc, #60]	; (800e618 <xTaskGenericNotify+0xac>)
 800e5da:	6812      	ldr	r2, [r2, #0]
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d901      	bls.n	800e5e4 <xTaskGenericNotify+0x78>
 800e5e0:	4a0d      	ldr	r2, [pc, #52]	; (800e618 <xTaskGenericNotify+0xac>)
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	0098      	lsls	r0, r3, #2
 800e5e6:	18c0      	adds	r0, r0, r3
 800e5e8:	0080      	lsls	r0, r0, #2
 800e5ea:	4b0c      	ldr	r3, [pc, #48]	; (800e61c <xTaskGenericNotify+0xb0>)
 800e5ec:	18c0      	adds	r0, r0, r3
 800e5ee:	0029      	movs	r1, r5
 800e5f0:	f7fe fd4c 	bl	800d08c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e5f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <xTaskGenericNotify+0x92>
 800e5fa:	b672      	cpsid	i
 800e5fc:	e7fe      	b.n	800e5fc <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5fe:	4b08      	ldr	r3, [pc, #32]	; (800e620 <xTaskGenericNotify+0xb4>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e606:	2501      	movs	r5, #1
 800e608:	429a      	cmp	r2, r3
 800e60a:	d9da      	bls.n	800e5c2 <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 800e60c:	f000 fa3e 	bl	800ea8c <vPortYield>
 800e610:	e7d7      	b.n	800e5c2 <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 800e612:	2500      	movs	r5, #0
 800e614:	e7d5      	b.n	800e5c2 <xTaskGenericNotify+0x56>
 800e616:	46c0      	nop			; (mov r8, r8)
 800e618:	20001d88 	.word	0x20001d88
 800e61c:	20001ce4 	.word	0x20001ce4
 800e620:	20001cd8 	.word	0x20001cd8

0800e624 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e624:	b510      	push	{r4, lr}
 800e626:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e628:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e62a:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e62c:	4291      	cmp	r1, r2
 800e62e:	d80c      	bhi.n	800e64a <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e630:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e632:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e634:	69a3      	ldr	r3, [r4, #24]
 800e636:	429a      	cmp	r2, r3
 800e638:	d300      	bcc.n	800e63c <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800e63a:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e63c:	1d21      	adds	r1, r4, #4
 800e63e:	4b09      	ldr	r3, [pc, #36]	; (800e664 <prvInsertTimerInActiveList+0x40>)
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	f7fe fd2e 	bl	800d0a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e646:	2000      	movs	r0, #0
 800e648:	e7f7      	b.n	800e63a <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d202      	bcs.n	800e654 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800e64e:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e650:	4299      	cmp	r1, r3
 800e652:	d2f2      	bcs.n	800e63a <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e654:	1d21      	adds	r1, r4, #4
 800e656:	4b04      	ldr	r3, [pc, #16]	; (800e668 <prvInsertTimerInActiveList+0x44>)
 800e658:	6818      	ldr	r0, [r3, #0]
 800e65a:	f7fe fd22 	bl	800d0a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e65e:	2000      	movs	r0, #0
 800e660:	e7eb      	b.n	800e63a <prvInsertTimerInActiveList+0x16>
 800e662:	46c0      	nop			; (mov r8, r8)
 800e664:	20001e04 	.word	0x20001e04
 800e668:	20001e00 	.word	0x20001e00

0800e66c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e66c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e66e:	f000 fa19 	bl	800eaa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e672:	4b11      	ldr	r3, [pc, #68]	; (800e6b8 <prvCheckForValidListAndQueue+0x4c>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e67a:	f000 fa1f 	bl	800eabc <vPortExitCritical>
}
 800e67e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800e680:	4d0e      	ldr	r5, [pc, #56]	; (800e6bc <prvCheckForValidListAndQueue+0x50>)
 800e682:	0028      	movs	r0, r5
 800e684:	f7fe fcf4 	bl	800d070 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e688:	4c0d      	ldr	r4, [pc, #52]	; (800e6c0 <prvCheckForValidListAndQueue+0x54>)
 800e68a:	0020      	movs	r0, r4
 800e68c:	f7fe fcf0 	bl	800d070 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e690:	4b0c      	ldr	r3, [pc, #48]	; (800e6c4 <prvCheckForValidListAndQueue+0x58>)
 800e692:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e694:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <prvCheckForValidListAndQueue+0x5c>)
 800e696:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e698:	2200      	movs	r2, #0
 800e69a:	2110      	movs	r1, #16
 800e69c:	2004      	movs	r0, #4
 800e69e:	f7fe fdec 	bl	800d27a <xQueueGenericCreate>
 800e6a2:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <prvCheckForValidListAndQueue+0x4c>)
 800e6a4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d003      	beq.n	800e6b2 <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6aa:	4908      	ldr	r1, [pc, #32]	; (800e6cc <prvCheckForValidListAndQueue+0x60>)
 800e6ac:	f7ff f828 	bl	800d700 <vQueueAddToRegistry>
 800e6b0:	e7e3      	b.n	800e67a <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800e6b2:	b672      	cpsid	i
 800e6b4:	e7fe      	b.n	800e6b4 <prvCheckForValidListAndQueue+0x48>
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	20001e34 	.word	0x20001e34
 800e6bc:	20001e08 	.word	0x20001e08
 800e6c0:	20001e1c 	.word	0x20001e1c
 800e6c4:	20001e00 	.word	0x20001e00
 800e6c8:	20001e04 	.word	0x20001e04
 800e6cc:	0801ace8 	.word	0x0801ace8

0800e6d0 <xTimerCreateTimerTask>:
{
 800e6d0:	b500      	push	{lr}
 800e6d2:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e6d4:	f7ff ffca 	bl	800e66c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	; (800e704 <xTimerCreateTimerTask+0x34>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00d      	beq.n	800e6fc <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9303      	str	r3, [sp, #12]
 800e6e4:	9302      	str	r3, [sp, #8]
 800e6e6:	9301      	str	r3, [sp, #4]
 800e6e8:	3303      	adds	r3, #3
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	22a0      	movs	r2, #160	; 0xa0
 800e6f0:	4905      	ldr	r1, [pc, #20]	; (800e708 <xTimerCreateTimerTask+0x38>)
 800e6f2:	4806      	ldr	r0, [pc, #24]	; (800e70c <xTimerCreateTimerTask+0x3c>)
 800e6f4:	f7ff f8e6 	bl	800d8c4 <xTaskGenericCreate>
	configASSERT( xReturn );
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d101      	bne.n	800e700 <xTimerCreateTimerTask+0x30>
 800e6fc:	b672      	cpsid	i
 800e6fe:	e7fe      	b.n	800e6fe <xTimerCreateTimerTask+0x2e>
}
 800e700:	b005      	add	sp, #20
 800e702:	bd00      	pop	{pc}
 800e704:	20001e34 	.word	0x20001e34
 800e708:	0801acf0 	.word	0x0801acf0
 800e70c:	0800e859 	.word	0x0800e859

0800e710 <xTimerCreate>:
{
 800e710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e712:	46c6      	mov	lr, r8
 800e714:	b500      	push	{lr}
 800e716:	4680      	mov	r8, r0
 800e718:	000d      	movs	r5, r1
 800e71a:	0017      	movs	r7, r2
 800e71c:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e71e:	2900      	cmp	r1, #0
 800e720:	d014      	beq.n	800e74c <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e722:	202c      	movs	r0, #44	; 0x2c
 800e724:	f000 fa40 	bl	800eba8 <pvPortMalloc>
 800e728:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e72a:	d00b      	beq.n	800e744 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e72c:	f7ff ff9e 	bl	800e66c <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e730:	4643      	mov	r3, r8
 800e732:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e734:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e736:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e738:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e73a:	9b06      	ldr	r3, [sp, #24]
 800e73c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e73e:	1d20      	adds	r0, r4, #4
 800e740:	f7fe fca1 	bl	800d086 <vListInitialiseItem>
}
 800e744:	0020      	movs	r0, r4
 800e746:	bc80      	pop	{r7}
 800e748:	46b8      	mov	r8, r7
 800e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e74c:	b672      	cpsid	i
 800e74e:	e7fe      	b.n	800e74e <xTimerCreate+0x3e>

0800e750 <xTimerGenericCommand>:
{
 800e750:	b530      	push	{r4, r5, lr}
 800e752:	b085      	sub	sp, #20
 800e754:	0004      	movs	r4, r0
 800e756:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800e758:	4b12      	ldr	r3, [pc, #72]	; (800e7a4 <xTimerGenericCommand+0x54>)
 800e75a:	6818      	ldr	r0, [r3, #0]
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d01f      	beq.n	800e7a0 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800e760:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e762:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e764:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e766:	2905      	cmp	r1, #5
 800e768:	dc13      	bgt.n	800e792 <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e76a:	f7ff fd4d 	bl	800e208 <xTaskGetSchedulerState>
 800e76e:	2802      	cmp	r0, #2
 800e770:	d007      	beq.n	800e782 <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e772:	4b0c      	ldr	r3, [pc, #48]	; (800e7a4 <xTimerGenericCommand+0x54>)
 800e774:	6818      	ldr	r0, [r3, #0]
 800e776:	2300      	movs	r3, #0
 800e778:	2200      	movs	r2, #0
 800e77a:	4669      	mov	r1, sp
 800e77c:	f7fe fdb6 	bl	800d2ec <xQueueGenericSend>
 800e780:	e00c      	b.n	800e79c <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e782:	4b08      	ldr	r3, [pc, #32]	; (800e7a4 <xTimerGenericCommand+0x54>)
 800e784:	6818      	ldr	r0, [r3, #0]
 800e786:	2300      	movs	r3, #0
 800e788:	9a08      	ldr	r2, [sp, #32]
 800e78a:	4669      	mov	r1, sp
 800e78c:	f7fe fdae 	bl	800d2ec <xQueueGenericSend>
 800e790:	e004      	b.n	800e79c <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e792:	2300      	movs	r3, #0
 800e794:	002a      	movs	r2, r5
 800e796:	4669      	mov	r1, sp
 800e798:	f7fe fe44 	bl	800d424 <xQueueGenericSendFromISR>
}
 800e79c:	b005      	add	sp, #20
 800e79e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800e7a0:	2000      	movs	r0, #0
	return xReturn;
 800e7a2:	e7fb      	b.n	800e79c <xTimerGenericCommand+0x4c>
 800e7a4:	20001e34 	.word	0x20001e34

0800e7a8 <prvSampleTimeNow>:
{
 800e7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7aa:	46d6      	mov	lr, sl
 800e7ac:	464f      	mov	r7, r9
 800e7ae:	4646      	mov	r6, r8
 800e7b0:	b5c0      	push	{r6, r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 800e7b6:	f7ff fa1f 	bl	800dbf8 <xTaskGetTickCount>
 800e7ba:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e7bc:	4b23      	ldr	r3, [pc, #140]	; (800e84c <prvSampleTimeNow+0xa4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4283      	cmp	r3, r0
 800e7c2:	d80a      	bhi.n	800e7da <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800e7c8:	4b20      	ldr	r3, [pc, #128]	; (800e84c <prvSampleTimeNow+0xa4>)
 800e7ca:	601c      	str	r4, [r3, #0]
}
 800e7cc:	0020      	movs	r0, r4
 800e7ce:	b004      	add	sp, #16
 800e7d0:	bce0      	pop	{r5, r6, r7}
 800e7d2:	46ba      	mov	sl, r7
 800e7d4:	46b1      	mov	r9, r6
 800e7d6:	46a8      	mov	r8, r5
 800e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7da:	4b1d      	ldr	r3, [pc, #116]	; (800e850 <prvSampleTimeNow+0xa8>)
 800e7dc:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7de:	2300      	movs	r3, #0
 800e7e0:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7e2:	4643      	mov	r3, r8
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	2a00      	cmp	r2, #0
 800e7ea:	d026      	beq.n	800e83a <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7f2:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7f4:	1d2f      	adds	r7, r5, #4
 800e7f6:	0038      	movs	r0, r7
 800e7f8:	f7fe fc6a 	bl	800d0d0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7fc:	0028      	movs	r0, r5
 800e7fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e800:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e802:	69eb      	ldr	r3, [r5, #28]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d1ec      	bne.n	800e7e2 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e808:	69ab      	ldr	r3, [r5, #24]
 800e80a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800e80c:	459a      	cmp	sl, r3
 800e80e:	d209      	bcs.n	800e824 <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e810:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e812:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e814:	4b0e      	ldr	r3, [pc, #56]	; (800e850 <prvSampleTimeNow+0xa8>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	9303      	str	r3, [sp, #12]
 800e81a:	0039      	movs	r1, r7
 800e81c:	0018      	movs	r0, r3
 800e81e:	f7fe fc40 	bl	800d0a2 <vListInsert>
 800e822:	e7de      	b.n	800e7e2 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e824:	464b      	mov	r3, r9
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	4652      	mov	r2, sl
 800e82a:	4649      	mov	r1, r9
 800e82c:	0028      	movs	r0, r5
 800e82e:	f7ff ff8f 	bl	800e750 <xTimerGenericCommand>
				configASSERT( xResult );
 800e832:	2800      	cmp	r0, #0
 800e834:	d1d5      	bne.n	800e7e2 <prvSampleTimeNow+0x3a>
 800e836:	b672      	cpsid	i
 800e838:	e7fe      	b.n	800e838 <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 800e83a:	4a06      	ldr	r2, [pc, #24]	; (800e854 <prvSampleTimeNow+0xac>)
 800e83c:	4904      	ldr	r1, [pc, #16]	; (800e850 <prvSampleTimeNow+0xa8>)
 800e83e:	6810      	ldr	r0, [r2, #0]
 800e840:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e842:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e844:	2301      	movs	r3, #1
 800e846:	6033      	str	r3, [r6, #0]
 800e848:	e7be      	b.n	800e7c8 <prvSampleTimeNow+0x20>
 800e84a:	46c0      	nop			; (mov r8, r8)
 800e84c:	20001e30 	.word	0x20001e30
 800e850:	20001e00 	.word	0x20001e00
 800e854:	20001e04 	.word	0x20001e04

0800e858 <prvTimerTask>:
{
 800e858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e85a:	b08d      	sub	sp, #52	; 0x34
 800e85c:	4d57      	ldr	r5, [pc, #348]	; (800e9bc <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e85e:	4b58      	ldr	r3, [pc, #352]	; (800e9c0 <prvTimerTask+0x168>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e864:	2e00      	cmp	r6, #0
 800e866:	d100      	bne.n	800e86a <prvTimerTask+0x12>
 800e868:	e09b      	b.n	800e9a2 <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800e86e:	f7ff f9bb 	bl	800dbe8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e872:	a808      	add	r0, sp, #32
 800e874:	f7ff ff98 	bl	800e7a8 <prvSampleTimeNow>
 800e878:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e87a:	9b08      	ldr	r3, [sp, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d000      	beq.n	800e882 <prvTimerTask+0x2a>
 800e880:	e099      	b.n	800e9b6 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e882:	4286      	cmp	r6, r0
 800e884:	d90a      	bls.n	800e89c <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e886:	1b31      	subs	r1, r6, r4
 800e888:	4b4e      	ldr	r3, [pc, #312]	; (800e9c4 <prvTimerTask+0x16c>)
 800e88a:	6818      	ldr	r0, [r3, #0]
 800e88c:	f7fe ff4c 	bl	800d728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e890:	f7ff fa52 	bl	800dd38 <xTaskResumeAll>
 800e894:	2800      	cmp	r0, #0
 800e896:	d025      	beq.n	800e8e4 <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e898:	4c4a      	ldr	r4, [pc, #296]	; (800e9c4 <prvTimerTask+0x16c>)
}
 800e89a:	e033      	b.n	800e904 <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 800e89c:	f7ff fa4c 	bl	800dd38 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8a0:	4b47      	ldr	r3, [pc, #284]	; (800e9c0 <prvTimerTask+0x168>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8a8:	1d38      	adds	r0, r7, #4
 800e8aa:	f7fe fc11 	bl	800d0d0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d003      	beq.n	800e8bc <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	0038      	movs	r0, r7
 800e8b8:	4798      	blx	r3
}
 800e8ba:	e7ed      	b.n	800e898 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	18f1      	adds	r1, r6, r3
 800e8c0:	0033      	movs	r3, r6
 800e8c2:	0022      	movs	r2, r4
 800e8c4:	0038      	movs	r0, r7
 800e8c6:	f7ff fead 	bl	800e624 <prvInsertTimerInActiveList>
 800e8ca:	2801      	cmp	r0, #1
 800e8cc:	d1f2      	bne.n	800e8b4 <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	9100      	str	r1, [sp, #0]
 800e8d2:	000b      	movs	r3, r1
 800e8d4:	0032      	movs	r2, r6
 800e8d6:	0038      	movs	r0, r7
 800e8d8:	f7ff ff3a 	bl	800e750 <xTimerGenericCommand>
			configASSERT( xResult );
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d1e9      	bne.n	800e8b4 <prvTimerTask+0x5c>
 800e8e0:	b672      	cpsid	i
 800e8e2:	e7fe      	b.n	800e8e2 <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 800e8e4:	f000 f8d2 	bl	800ea8c <vPortYield>
 800e8e8:	e7d6      	b.n	800e898 <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8ec:	9303      	str	r3, [sp, #12]
 800e8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8f0:	9304      	str	r3, [sp, #16]
 800e8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f4:	9305      	str	r3, [sp, #20]
 800e8f6:	9903      	ldr	r1, [sp, #12]
 800e8f8:	9804      	ldr	r0, [sp, #16]
 800e8fa:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e8fc:	9b08      	ldr	r3, [sp, #32]
 800e8fe:	9303      	str	r3, [sp, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	da0b      	bge.n	800e91c <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e904:	2300      	movs	r3, #0
 800e906:	2200      	movs	r2, #0
 800e908:	a908      	add	r1, sp, #32
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	f7fe fe0e 	bl	800d52c <xQueueGenericReceive>
 800e910:	2800      	cmp	r0, #0
 800e912:	d0a4      	beq.n	800e85e <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e914:	9b08      	ldr	r3, [sp, #32]
 800e916:	9303      	str	r3, [sp, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	dbe6      	blt.n	800e8ea <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e91c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e91e:	6973      	ldr	r3, [r6, #20]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e924:	1d30      	adds	r0, r6, #4
 800e926:	f7fe fbd3 	bl	800d0d0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e92a:	a807      	add	r0, sp, #28
 800e92c:	f7ff ff3c 	bl	800e7a8 <prvSampleTimeNow>
 800e930:	9b08      	ldr	r3, [sp, #32]
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	2b09      	cmp	r3, #9
 800e936:	d8e5      	bhi.n	800e904 <prvTimerTask+0xac>
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	58eb      	ldr	r3, [r5, r3]
 800e93c:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800e93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e940:	69b2      	ldr	r2, [r6, #24]
 800e942:	4694      	mov	ip, r2
 800e944:	4463      	add	r3, ip
 800e946:	0019      	movs	r1, r3
 800e948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94a:	0002      	movs	r2, r0
 800e94c:	0030      	movs	r0, r6
 800e94e:	f7ff fe69 	bl	800e624 <prvInsertTimerInActiveList>
 800e952:	2801      	cmp	r0, #1
 800e954:	d1d6      	bne.n	800e904 <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e956:	0030      	movs	r0, r6
 800e958:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e95a:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e95c:	69f3      	ldr	r3, [r6, #28]
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d1d0      	bne.n	800e904 <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e964:	69b1      	ldr	r1, [r6, #24]
 800e966:	468c      	mov	ip, r1
 800e968:	4463      	add	r3, ip
 800e96a:	001a      	movs	r2, r3
 800e96c:	2300      	movs	r3, #0
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	2100      	movs	r1, #0
 800e972:	0030      	movs	r0, r6
 800e974:	f7ff feec 	bl	800e750 <xTimerGenericCommand>
							configASSERT( xResult );
 800e978:	2800      	cmp	r0, #0
 800e97a:	d1c3      	bne.n	800e904 <prvTimerTask+0xac>
 800e97c:	b672      	cpsid	i
 800e97e:	e7fe      	b.n	800e97e <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e980:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e982:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e984:	2900      	cmp	r1, #0
 800e986:	d006      	beq.n	800e996 <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e988:	1841      	adds	r1, r0, r1
 800e98a:	0003      	movs	r3, r0
 800e98c:	0002      	movs	r2, r0
 800e98e:	0030      	movs	r0, r6
 800e990:	f7ff fe48 	bl	800e624 <prvInsertTimerInActiveList>
					break;
 800e994:	e7b6      	b.n	800e904 <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e996:	b672      	cpsid	i
 800e998:	e7fe      	b.n	800e998 <prvTimerTask+0x140>
					vPortFree( pxTimer );
 800e99a:	0030      	movs	r0, r6
 800e99c:	f000 f996 	bl	800eccc <vPortFree>
					break;
 800e9a0:	e7b0      	b.n	800e904 <prvTimerTask+0xac>
	vTaskSuspendAll();
 800e9a2:	f7ff f921 	bl	800dbe8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9a6:	a808      	add	r0, sp, #32
 800e9a8:	f7ff fefe 	bl	800e7a8 <prvSampleTimeNow>
 800e9ac:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e9ae:	9b08      	ldr	r3, [sp, #32]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d100      	bne.n	800e9b6 <prvTimerTask+0x15e>
 800e9b4:	e767      	b.n	800e886 <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 800e9b6:	f7ff f9bf 	bl	800dd38 <xTaskResumeAll>
 800e9ba:	e76d      	b.n	800e898 <prvTimerTask+0x40>
 800e9bc:	0801acf8 	.word	0x0801acf8
 800e9c0:	20001e00 	.word	0x20001e00
 800e9c4:	20001e34 	.word	0x20001e34

0800e9c8 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800e9cc:	d006      	beq.n	800e9dc <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800e9ce:	f000 f869 	bl	800eaa4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e9d2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800e9d4:	f000 f872 	bl	800eabc <vPortExitCritical>

	return pvReturn;
}
 800e9d8:	0020      	movs	r0, r4
 800e9da:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 800e9dc:	b672      	cpsid	i
 800e9de:	e7fe      	b.n	800e9de <pvTimerGetTimerID+0x16>

0800e9e0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e9e0:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <prvTaskExitError+0x10>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	d001      	beq.n	800e9ec <prvTaskExitError+0xc>
 800e9e8:	b672      	cpsid	i
 800e9ea:	e7fe      	b.n	800e9ea <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800e9ec:	b672      	cpsid	i
 800e9ee:	e7fe      	b.n	800e9ee <prvTaskExitError+0xe>
 800e9f0:	200000a4 	.word	0x200000a4

0800e9f4 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e9f4:	4a06      	ldr	r2, [pc, #24]	; (800ea10 <pxCurrentTCBConst2>)
 800e9f6:	6813      	ldr	r3, [r2, #0]
 800e9f8:	6818      	ldr	r0, [r3, #0]
 800e9fa:	3020      	adds	r0, #32
 800e9fc:	f380 8809 	msr	PSP, r0
 800ea00:	2002      	movs	r0, #2
 800ea02:	f380 8814 	msr	CONTROL, r0
 800ea06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800ea08:	46ae      	mov	lr, r5
 800ea0a:	b662      	cpsie	i
 800ea0c:	bd00      	pop	{pc}
 800ea0e:	46c0      	nop			; (mov r8, r8)

0800ea10 <pxCurrentTCBConst2>:
 800ea10:	20001cd8 	.word	0x20001cd8

0800ea14 <pxPortInitialiseStack>:
{
 800ea14:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea16:	1f03      	subs	r3, r0, #4
 800ea18:	2480      	movs	r4, #128	; 0x80
 800ea1a:	0464      	lsls	r4, r4, #17
 800ea1c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800ea1e:	3b04      	subs	r3, #4
 800ea20:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea22:	3b04      	subs	r3, #4
 800ea24:	4902      	ldr	r1, [pc, #8]	; (800ea30 <pxPortInitialiseStack+0x1c>)
 800ea26:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea28:	3b14      	subs	r3, #20
 800ea2a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800ea2c:	3840      	subs	r0, #64	; 0x40
}
 800ea2e:	bd10      	pop	{r4, pc}
 800ea30:	0800e9e1 	.word	0x0800e9e1

0800ea34 <SVC_Handler>:
}
 800ea34:	4770      	bx	lr
	...

0800ea38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea38:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800ea3a:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <xPortStartScheduler+0x40>)
 800ea3c:	6819      	ldr	r1, [r3, #0]
 800ea3e:	22ff      	movs	r2, #255	; 0xff
 800ea40:	0412      	lsls	r2, r2, #16
 800ea42:	430a      	orrs	r2, r1
 800ea44:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800ea46:	6819      	ldr	r1, [r3, #0]
 800ea48:	22ff      	movs	r2, #255	; 0xff
 800ea4a:	0612      	lsls	r2, r2, #24
 800ea4c:	430a      	orrs	r2, r1
 800ea4e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea50:	4b0a      	ldr	r3, [pc, #40]	; (800ea7c <xPortStartScheduler+0x44>)
 800ea52:	6818      	ldr	r0, [r3, #0]
 800ea54:	21fa      	movs	r1, #250	; 0xfa
 800ea56:	0089      	lsls	r1, r1, #2
 800ea58:	f7f1 fb7a 	bl	8000150 <__udivsi3>
 800ea5c:	3801      	subs	r0, #1
 800ea5e:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <xPortStartScheduler+0x48>)
 800ea60:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800ea62:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <xPortStartScheduler+0x4c>)
 800ea64:	2207      	movs	r2, #7
 800ea66:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800ea68:	4b07      	ldr	r3, [pc, #28]	; (800ea88 <xPortStartScheduler+0x50>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800ea6e:	f7ff ffc1 	bl	800e9f4 <vPortStartFirstTask>
	prvTaskExitError();
 800ea72:	f7ff ffb5 	bl	800e9e0 <prvTaskExitError>
 800ea76:	46c0      	nop			; (mov r8, r8)
 800ea78:	e000ed20 	.word	0xe000ed20
 800ea7c:	20000090 	.word	0x20000090
 800ea80:	e000e014 	.word	0xe000e014
 800ea84:	e000e010 	.word	0xe000e010
 800ea88:	200000a4 	.word	0x200000a4

0800ea8c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800ea8c:	4b04      	ldr	r3, [pc, #16]	; (800eaa0 <vPortYield+0x14>)
 800ea8e:	2280      	movs	r2, #128	; 0x80
 800ea90:	0552      	lsls	r2, r2, #21
 800ea92:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800ea94:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ea98:	f3bf 8f6f 	isb	sy
}
 800ea9c:	4770      	bx	lr
 800ea9e:	46c0      	nop			; (mov r8, r8)
 800eaa0:	e000ed04 	.word	0xe000ed04

0800eaa4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800eaa4:	b672      	cpsid	i
    uxCriticalNesting++;
 800eaa6:	4a04      	ldr	r2, [pc, #16]	; (800eab8 <vPortEnterCritical+0x14>)
 800eaa8:	6813      	ldr	r3, [r2, #0]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800eaae:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800eab2:	f3bf 8f6f 	isb	sy
}
 800eab6:	4770      	bx	lr
 800eab8:	200000a4 	.word	0x200000a4

0800eabc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800eabc:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <vPortExitCritical+0x1c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d101      	bne.n	800eac8 <vPortExitCritical+0xc>
 800eac4:	b672      	cpsid	i
 800eac6:	e7fe      	b.n	800eac6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800eac8:	3b01      	subs	r3, #1
 800eaca:	4a03      	ldr	r2, [pc, #12]	; (800ead8 <vPortExitCritical+0x1c>)
 800eacc:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d100      	bne.n	800ead4 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800ead2:	b662      	cpsie	i
}
 800ead4:	4770      	bx	lr
 800ead6:	46c0      	nop			; (mov r8, r8)
 800ead8:	200000a4 	.word	0x200000a4

0800eadc <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800eadc:	f3ef 8010 	mrs	r0, PRIMASK
 800eae0:	b672      	cpsid	i
 800eae2:	4770      	bx	lr
}
 800eae4:	2000      	movs	r0, #0

0800eae6 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800eae6:	f380 8810 	msr	PRIMASK, r0
 800eaea:	4770      	bx	lr

0800eaec <PendSV_Handler>:
	__asm volatile
 800eaec:	f3ef 8009 	mrs	r0, PSP
 800eaf0:	4b0e      	ldr	r3, [pc, #56]	; (800eb2c <pxCurrentTCBConst>)
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	3820      	subs	r0, #32
 800eaf6:	6010      	str	r0, [r2, #0]
 800eaf8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800eafa:	4644      	mov	r4, r8
 800eafc:	464d      	mov	r5, r9
 800eafe:	4656      	mov	r6, sl
 800eb00:	465f      	mov	r7, fp
 800eb02:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800eb04:	b508      	push	{r3, lr}
 800eb06:	b672      	cpsid	i
 800eb08:	f7ff fa36 	bl	800df78 <vTaskSwitchContext>
 800eb0c:	b662      	cpsie	i
 800eb0e:	bc0c      	pop	{r2, r3}
 800eb10:	6811      	ldr	r1, [r2, #0]
 800eb12:	6808      	ldr	r0, [r1, #0]
 800eb14:	3010      	adds	r0, #16
 800eb16:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800eb18:	46a0      	mov	r8, r4
 800eb1a:	46a9      	mov	r9, r5
 800eb1c:	46b2      	mov	sl, r6
 800eb1e:	46bb      	mov	fp, r7
 800eb20:	f380 8809 	msr	PSP, r0
 800eb24:	3820      	subs	r0, #32
 800eb26:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800eb28:	4718      	bx	r3
 800eb2a:	46c0      	nop			; (mov r8, r8)

0800eb2c <pxCurrentTCBConst>:
 800eb2c:	20001cd8 	.word	0x20001cd8

0800eb30 <xPortSysTickHandler>:
{
 800eb30:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb32:	f7ff ffd3 	bl	800eadc <ulSetInterruptMaskFromISR>
 800eb36:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800eb38:	f7ff f86a 	bl	800dc10 <xTaskIncrementTick>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d003      	beq.n	800eb48 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800eb40:	4b03      	ldr	r3, [pc, #12]	; (800eb50 <xPortSysTickHandler+0x20>)
 800eb42:	2280      	movs	r2, #128	; 0x80
 800eb44:	0552      	lsls	r2, r2, #21
 800eb46:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800eb48:	0020      	movs	r0, r4
 800eb4a:	f7ff ffcc 	bl	800eae6 <vClearInterruptMaskFromISR>
}
 800eb4e:	bd10      	pop	{r4, pc}
 800eb50:	e000ed04 	.word	0xe000ed04

0800eb54 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb54:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb56:	4b12      	ldr	r3, [pc, #72]	; (800eba0 <prvInsertBlockIntoFreeList+0x4c>)
 800eb58:	001a      	movs	r2, r3
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4283      	cmp	r3, r0
 800eb5e:	d3fb      	bcc.n	800eb58 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb60:	6851      	ldr	r1, [r2, #4]
 800eb62:	1854      	adds	r4, r2, r1
 800eb64:	42a0      	cmp	r0, r4
 800eb66:	d008      	beq.n	800eb7a <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb68:	6841      	ldr	r1, [r0, #4]
 800eb6a:	1844      	adds	r4, r0, r1
 800eb6c:	42a3      	cmp	r3, r4
 800eb6e:	d009      	beq.n	800eb84 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb70:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb72:	4290      	cmp	r0, r2
 800eb74:	d000      	beq.n	800eb78 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb76:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb78:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb7a:	6840      	ldr	r0, [r0, #4]
 800eb7c:	1841      	adds	r1, r0, r1
 800eb7e:	6051      	str	r1, [r2, #4]
 800eb80:	0010      	movs	r0, r2
 800eb82:	e7f1      	b.n	800eb68 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb84:	4c07      	ldr	r4, [pc, #28]	; (800eba4 <prvInsertBlockIntoFreeList+0x50>)
 800eb86:	6824      	ldr	r4, [r4, #0]
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	d006      	beq.n	800eb9a <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	1859      	adds	r1, r3, r1
 800eb90:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb92:	6813      	ldr	r3, [r2, #0]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6003      	str	r3, [r0, #0]
 800eb98:	e7eb      	b.n	800eb72 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb9a:	6004      	str	r4, [r0, #0]
 800eb9c:	e7e9      	b.n	800eb72 <prvInsertBlockIntoFreeList+0x1e>
 800eb9e:	46c0      	nop			; (mov r8, r8)
 800eba0:	20006880 	.word	0x20006880
 800eba4:	20001e38 	.word	0x20001e38

0800eba8 <pvPortMalloc>:
{
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800ebac:	f7ff f81c 	bl	800dbe8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ebb0:	4b3f      	ldr	r3, [pc, #252]	; (800ecb0 <pvPortMalloc+0x108>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d015      	beq.n	800ebe4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebb8:	4b3e      	ldr	r3, [pc, #248]	; (800ecb4 <pvPortMalloc+0x10c>)
 800ebba:	681e      	ldr	r6, [r3, #0]
 800ebbc:	4234      	tst	r4, r6
 800ebbe:	d135      	bne.n	800ec2c <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 800ebc0:	2c00      	cmp	r4, #0
 800ebc2:	d03a      	beq.n	800ec3a <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 800ebc4:	0023      	movs	r3, r4
 800ebc6:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebc8:	0762      	lsls	r2, r4, #29
 800ebca:	d002      	beq.n	800ebd2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebcc:	2207      	movs	r2, #7
 800ebce:	4393      	bics	r3, r2
 800ebd0:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d031      	beq.n	800ec3a <pvPortMalloc+0x92>
 800ebd6:	4a38      	ldr	r2, [pc, #224]	; (800ecb8 <pvPortMalloc+0x110>)
 800ebd8:	6815      	ldr	r5, [r2, #0]
 800ebda:	429d      	cmp	r5, r3
 800ebdc:	d330      	bcc.n	800ec40 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800ebde:	4a37      	ldr	r2, [pc, #220]	; (800ecbc <pvPortMalloc+0x114>)
 800ebe0:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebe2:	e032      	b.n	800ec4a <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 800ebe4:	4a36      	ldr	r2, [pc, #216]	; (800ecc0 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebe6:	0753      	lsls	r3, r2, #29
 800ebe8:	d01e      	beq.n	800ec28 <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebea:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ebec:	2307      	movs	r3, #7
 800ebee:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800ebf0:	4b34      	ldr	r3, [pc, #208]	; (800ecc4 <pvPortMalloc+0x11c>)
 800ebf2:	18d3      	adds	r3, r2, r3
 800ebf4:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ebf6:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebf8:	4830      	ldr	r0, [pc, #192]	; (800ecbc <pvPortMalloc+0x114>)
 800ebfa:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec00:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800ec02:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ec04:	2007      	movs	r0, #7
 800ec06:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800ec08:	4829      	ldr	r0, [pc, #164]	; (800ecb0 <pvPortMalloc+0x108>)
 800ec0a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ec0c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec0e:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ec10:	1a99      	subs	r1, r3, r2
 800ec12:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec14:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec16:	4b2c      	ldr	r3, [pc, #176]	; (800ecc8 <pvPortMalloc+0x120>)
 800ec18:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec1a:	4b27      	ldr	r3, [pc, #156]	; (800ecb8 <pvPortMalloc+0x110>)
 800ec1c:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec1e:	4b25      	ldr	r3, [pc, #148]	; (800ecb4 <pvPortMalloc+0x10c>)
 800ec20:	2280      	movs	r2, #128	; 0x80
 800ec22:	0612      	lsls	r2, r2, #24
 800ec24:	601a      	str	r2, [r3, #0]
}
 800ec26:	e7c7      	b.n	800ebb8 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec28:	4b26      	ldr	r3, [pc, #152]	; (800ecc4 <pvPortMalloc+0x11c>)
 800ec2a:	e7e5      	b.n	800ebf8 <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 800ec2c:	f7ff f884 	bl	800dd38 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800ec30:	f7fd fb28 	bl	800c284 <vApplicationMallocFailedHook>
 800ec34:	2700      	movs	r7, #0
}
 800ec36:	0038      	movs	r0, r7
 800ec38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 800ec3a:	f7ff f87d 	bl	800dd38 <xTaskResumeAll>
 800ec3e:	e7f7      	b.n	800ec30 <pvPortMalloc+0x88>
 800ec40:	f7ff f87a 	bl	800dd38 <xTaskResumeAll>
 800ec44:	e7f4      	b.n	800ec30 <pvPortMalloc+0x88>
 800ec46:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec48:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec4a:	6861      	ldr	r1, [r4, #4]
 800ec4c:	4299      	cmp	r1, r3
 800ec4e:	d202      	bcs.n	800ec56 <pvPortMalloc+0xae>
 800ec50:	6821      	ldr	r1, [r4, #0]
 800ec52:	2900      	cmp	r1, #0
 800ec54:	d1f7      	bne.n	800ec46 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800ec56:	4916      	ldr	r1, [pc, #88]	; (800ecb0 <pvPortMalloc+0x108>)
 800ec58:	6809      	ldr	r1, [r1, #0]
 800ec5a:	42a1      	cmp	r1, r4
 800ec5c:	d00c      	beq.n	800ec78 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec5e:	6817      	ldr	r7, [r2, #0]
 800ec60:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec62:	6821      	ldr	r1, [r4, #0]
 800ec64:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec66:	6862      	ldr	r2, [r4, #4]
 800ec68:	1ad2      	subs	r2, r2, r3
 800ec6a:	2a10      	cmp	r2, #16
 800ec6c:	d90b      	bls.n	800ec86 <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec6e:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec70:	0741      	lsls	r1, r0, #29
 800ec72:	d004      	beq.n	800ec7e <pvPortMalloc+0xd6>
 800ec74:	b672      	cpsid	i
 800ec76:	e7fe      	b.n	800ec76 <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 800ec78:	f7ff f85e 	bl	800dd38 <xTaskResumeAll>
 800ec7c:	e7d8      	b.n	800ec30 <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec7e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec80:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ec82:	f7ff ff67 	bl	800eb54 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec86:	6862      	ldr	r2, [r4, #4]
 800ec88:	1aad      	subs	r5, r5, r2
 800ec8a:	490b      	ldr	r1, [pc, #44]	; (800ecb8 <pvPortMalloc+0x110>)
 800ec8c:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec8e:	490e      	ldr	r1, [pc, #56]	; (800ecc8 <pvPortMalloc+0x120>)
 800ec90:	6809      	ldr	r1, [r1, #0]
 800ec92:	428d      	cmp	r5, r1
 800ec94:	d201      	bcs.n	800ec9a <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec96:	490c      	ldr	r1, [pc, #48]	; (800ecc8 <pvPortMalloc+0x120>)
 800ec98:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec9a:	4316      	orrs	r6, r2
 800ec9c:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800eca2:	f7ff f849 	bl	800dd38 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eca6:	077b      	lsls	r3, r7, #29
 800eca8:	d0c5      	beq.n	800ec36 <pvPortMalloc+0x8e>
 800ecaa:	b672      	cpsid	i
 800ecac:	e7fe      	b.n	800ecac <pvPortMalloc+0x104>
 800ecae:	46c0      	nop			; (mov r8, r8)
 800ecb0:	20001e38 	.word	0x20001e38
 800ecb4:	20006874 	.word	0x20006874
 800ecb8:	20006878 	.word	0x20006878
 800ecbc:	20006880 	.word	0x20006880
 800ecc0:	20001e3c 	.word	0x20001e3c
 800ecc4:	00004a38 	.word	0x00004a38
 800ecc8:	2000687c 	.word	0x2000687c

0800eccc <vPortFree>:
{
 800eccc:	b510      	push	{r4, lr}
	if( pv != NULL )
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d020      	beq.n	800ed14 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecd2:	0003      	movs	r3, r0
 800ecd4:	3b08      	subs	r3, #8
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	4a0f      	ldr	r2, [pc, #60]	; (800ed18 <vPortFree+0x4c>)
 800ecda:	6812      	ldr	r2, [r2, #0]
 800ecdc:	421a      	tst	r2, r3
 800ecde:	d101      	bne.n	800ece4 <vPortFree+0x18>
 800ece0:	b672      	cpsid	i
 800ece2:	e7fe      	b.n	800ece2 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ece4:	0001      	movs	r1, r0
 800ece6:	3908      	subs	r1, #8
 800ece8:	6809      	ldr	r1, [r1, #0]
 800ecea:	2900      	cmp	r1, #0
 800ecec:	d001      	beq.n	800ecf2 <vPortFree+0x26>
 800ecee:	b672      	cpsid	i
 800ecf0:	e7fe      	b.n	800ecf0 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ecf2:	3808      	subs	r0, #8
 800ecf4:	0004      	movs	r4, r0
 800ecf6:	4393      	bics	r3, r2
 800ecf8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ecfa:	f7fe ff75 	bl	800dbe8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecfe:	4a07      	ldr	r2, [pc, #28]	; (800ed1c <vPortFree+0x50>)
 800ed00:	6863      	ldr	r3, [r4, #4]
 800ed02:	6811      	ldr	r1, [r2, #0]
 800ed04:	468c      	mov	ip, r1
 800ed06:	4463      	add	r3, ip
 800ed08:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed0a:	0020      	movs	r0, r4
 800ed0c:	f7ff ff22 	bl	800eb54 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ed10:	f7ff f812 	bl	800dd38 <xTaskResumeAll>
}
 800ed14:	bd10      	pop	{r4, pc}
 800ed16:	46c0      	nop			; (mov r8, r8)
 800ed18:	20006874 	.word	0x20006874
 800ed1c:	20006878 	.word	0x20006878

0800ed20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ed20:	b510      	push	{r4, lr}
 800ed22:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ed24:	f001 fd74 	bl	8010810 <HAL_RCC_GetHCLKFreq>
 800ed28:	21fa      	movs	r1, #250	; 0xfa
 800ed2a:	0089      	lsls	r1, r1, #2
 800ed2c:	f7f1 fa10 	bl	8000150 <__udivsi3>
 800ed30:	f000 f888 	bl	800ee44 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ed34:	2001      	movs	r0, #1
 800ed36:	2200      	movs	r2, #0
 800ed38:	0021      	movs	r1, r4
 800ed3a:	4240      	negs	r0, r0
 800ed3c:	f000 f83c 	bl	800edb8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800ed40:	2000      	movs	r0, #0
 800ed42:	bd10      	pop	{r4, pc}

0800ed44 <HAL_Init>:
{
 800ed44:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed46:	4a06      	ldr	r2, [pc, #24]	; (800ed60 <HAL_Init+0x1c>)
 800ed48:	6813      	ldr	r3, [r2, #0]
 800ed4a:	2110      	movs	r1, #16
 800ed4c:	430b      	orrs	r3, r1
 800ed4e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ed50:	2000      	movs	r0, #0
 800ed52:	f7ff ffe5 	bl	800ed20 <HAL_InitTick>
  HAL_MspInit();
 800ed56:	f001 f8ff 	bl	800ff58 <HAL_MspInit>
}
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	46c0      	nop			; (mov r8, r8)
 800ed60:	40022000 	.word	0x40022000

0800ed64 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ed64:	4a02      	ldr	r2, [pc, #8]	; (800ed70 <HAL_IncTick+0xc>)
 800ed66:	6813      	ldr	r3, [r2, #0]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	6013      	str	r3, [r2, #0]
}
 800ed6c:	4770      	bx	lr
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	20006888 	.word	0x20006888

0800ed74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ed74:	4b01      	ldr	r3, [pc, #4]	; (800ed7c <HAL_GetTick+0x8>)
 800ed76:	6818      	ldr	r0, [r3, #0]
}
 800ed78:	4770      	bx	lr
 800ed7a:	46c0      	nop			; (mov r8, r8)
 800ed7c:	20006888 	.word	0x20006888

0800ed80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ed80:	b510      	push	{r4, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ed86:	f7ff fff5 	bl	800ed74 <HAL_GetTick>
 800ed8a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800ed8c:	f7ff fff2 	bl	800ed74 <HAL_GetTick>
 800ed90:	9b01      	ldr	r3, [sp, #4]
 800ed92:	1b00      	subs	r0, r0, r4
 800ed94:	4298      	cmp	r0, r3
 800ed96:	d3f9      	bcc.n	800ed8c <HAL_Delay+0xc>
  {
  }
}
 800ed98:	b002      	add	sp, #8
 800ed9a:	bd10      	pop	{r4, pc}

0800ed9c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ed9c:	4b01      	ldr	r3, [pc, #4]	; (800eda4 <HAL_GetREVID+0x8>)
 800ed9e:	6818      	ldr	r0, [r3, #0]
 800eda0:	0c00      	lsrs	r0, r0, #16
}
 800eda2:	4770      	bx	lr
 800eda4:	40015800 	.word	0x40015800

0800eda8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800eda8:	4b02      	ldr	r3, [pc, #8]	; (800edb4 <HAL_GetDEVID+0xc>)
 800edaa:	6818      	ldr	r0, [r3, #0]
 800edac:	0500      	lsls	r0, r0, #20
 800edae:	0d00      	lsrs	r0, r0, #20
}
 800edb0:	4770      	bx	lr
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	40015800 	.word	0x40015800

0800edb8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800edb8:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800edba:	2800      	cmp	r0, #0
 800edbc:	db14      	blt.n	800ede8 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800edbe:	0884      	lsrs	r4, r0, #2
 800edc0:	00a4      	lsls	r4, r4, #2
 800edc2:	4b14      	ldr	r3, [pc, #80]	; (800ee14 <HAL_NVIC_SetPriority+0x5c>)
 800edc4:	469c      	mov	ip, r3
 800edc6:	4464      	add	r4, ip
 800edc8:	26c0      	movs	r6, #192	; 0xc0
 800edca:	00b6      	lsls	r6, r6, #2
 800edcc:	59a5      	ldr	r5, [r4, r6]
 800edce:	2203      	movs	r2, #3
 800edd0:	4010      	ands	r0, r2
 800edd2:	00c0      	lsls	r0, r0, #3
 800edd4:	23ff      	movs	r3, #255	; 0xff
 800edd6:	001a      	movs	r2, r3
 800edd8:	4082      	lsls	r2, r0
 800edda:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eddc:	0189      	lsls	r1, r1, #6
 800edde:	400b      	ands	r3, r1
 800ede0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ede2:	432b      	orrs	r3, r5
 800ede4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800ede6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ede8:	230f      	movs	r3, #15
 800edea:	4003      	ands	r3, r0
 800edec:	3b08      	subs	r3, #8
 800edee:	089b      	lsrs	r3, r3, #2
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4a09      	ldr	r2, [pc, #36]	; (800ee18 <HAL_NVIC_SetPriority+0x60>)
 800edf4:	4694      	mov	ip, r2
 800edf6:	4463      	add	r3, ip
 800edf8:	69dd      	ldr	r5, [r3, #28]
 800edfa:	2403      	movs	r4, #3
 800edfc:	4020      	ands	r0, r4
 800edfe:	00c0      	lsls	r0, r0, #3
 800ee00:	22ff      	movs	r2, #255	; 0xff
 800ee02:	0014      	movs	r4, r2
 800ee04:	4084      	lsls	r4, r0
 800ee06:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ee08:	0189      	lsls	r1, r1, #6
 800ee0a:	400a      	ands	r2, r1
 800ee0c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ee0e:	432a      	orrs	r2, r5
 800ee10:	61da      	str	r2, [r3, #28]
 800ee12:	e7e8      	b.n	800ede6 <HAL_NVIC_SetPriority+0x2e>
 800ee14:	e000e100 	.word	0xe000e100
 800ee18:	e000ed00 	.word	0xe000ed00

0800ee1c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ee1c:	231f      	movs	r3, #31
 800ee1e:	4018      	ands	r0, r3
 800ee20:	3b1e      	subs	r3, #30
 800ee22:	4083      	lsls	r3, r0
 800ee24:	4a01      	ldr	r2, [pc, #4]	; (800ee2c <HAL_NVIC_EnableIRQ+0x10>)
 800ee26:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ee28:	4770      	bx	lr
 800ee2a:	46c0      	nop			; (mov r8, r8)
 800ee2c:	e000e100 	.word	0xe000e100

0800ee30 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ee30:	231f      	movs	r3, #31
 800ee32:	4018      	ands	r0, r3
 800ee34:	3b1e      	subs	r3, #30
 800ee36:	4083      	lsls	r3, r0
 800ee38:	4901      	ldr	r1, [pc, #4]	; (800ee40 <HAL_NVIC_DisableIRQ+0x10>)
 800ee3a:	2280      	movs	r2, #128	; 0x80
 800ee3c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ee3e:	4770      	bx	lr
 800ee40:	e000e100 	.word	0xe000e100

0800ee44 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800ee44:	3801      	subs	r0, #1
 800ee46:	2380      	movs	r3, #128	; 0x80
 800ee48:	045b      	lsls	r3, r3, #17
 800ee4a:	4298      	cmp	r0, r3
 800ee4c:	d20f      	bcs.n	800ee6e <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ee4e:	4a09      	ldr	r2, [pc, #36]	; (800ee74 <HAL_SYSTICK_Config+0x30>)
 800ee50:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ee52:	4809      	ldr	r0, [pc, #36]	; (800ee78 <HAL_SYSTICK_Config+0x34>)
 800ee54:	6a03      	ldr	r3, [r0, #32]
 800ee56:	021b      	lsls	r3, r3, #8
 800ee58:	0a1b      	lsrs	r3, r3, #8
 800ee5a:	21c0      	movs	r1, #192	; 0xc0
 800ee5c:	0609      	lsls	r1, r1, #24
 800ee5e:	430b      	orrs	r3, r1
 800ee60:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ee62:	2300      	movs	r3, #0
 800ee64:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ee66:	3307      	adds	r3, #7
 800ee68:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ee6a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ee6c:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800ee6e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800ee70:	e7fc      	b.n	800ee6c <HAL_SYSTICK_Config+0x28>
 800ee72:	46c0      	nop			; (mov r8, r8)
 800ee74:	e000e010 	.word	0xe000e010
 800ee78:	e000ed00 	.word	0xe000ed00

0800ee7c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800ee7c:	2804      	cmp	r0, #4
 800ee7e:	d005      	beq.n	800ee8c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800ee80:	4a05      	ldr	r2, [pc, #20]	; (800ee98 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800ee82:	6813      	ldr	r3, [r2, #0]
 800ee84:	2104      	movs	r1, #4
 800ee86:	438b      	bics	r3, r1
 800ee88:	6013      	str	r3, [r2, #0]
  }
}
 800ee8a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800ee8c:	4a02      	ldr	r2, [pc, #8]	; (800ee98 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800ee8e:	6813      	ldr	r3, [r2, #0]
 800ee90:	2104      	movs	r1, #4
 800ee92:	430b      	orrs	r3, r1
 800ee94:	6013      	str	r3, [r2, #0]
 800ee96:	e7f8      	b.n	800ee8a <HAL_SYSTICK_CLKSourceConfig+0xe>
 800ee98:	e000e010 	.word	0xe000e010

0800ee9c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee9e:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800eea0:	0892      	lsrs	r2, r2, #2
 800eea2:	2d03      	cmp	r5, #3
 800eea4:	d927      	bls.n	800eef6 <CRC_Handle_8+0x5a>
 800eea6:	000c      	movs	r4, r1
 800eea8:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800eeaa:	7823      	ldrb	r3, [r4, #0]
 800eeac:	061b      	lsls	r3, r3, #24
 800eeae:	7866      	ldrb	r6, [r4, #1]
 800eeb0:	0436      	lsls	r6, r6, #16
 800eeb2:	4333      	orrs	r3, r6
 800eeb4:	78e6      	ldrb	r6, [r4, #3]
 800eeb6:	4333      	orrs	r3, r6
 800eeb8:	78a6      	ldrb	r6, [r4, #2]
 800eeba:	0236      	lsls	r6, r6, #8
 800eebc:	4333      	orrs	r3, r6
 800eebe:	6806      	ldr	r6, [r0, #0]
 800eec0:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800eec2:	3701      	adds	r7, #1
 800eec4:	3404      	adds	r4, #4
 800eec6:	4297      	cmp	r7, r2
 800eec8:	d3ef      	bcc.n	800eeaa <CRC_Handle_8+0xe>
 800eeca:	2301      	movs	r3, #1
 800eecc:	2d03      	cmp	r5, #3
 800eece:	d900      	bls.n	800eed2 <CRC_Handle_8+0x36>
 800eed0:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800eed2:	2203      	movs	r2, #3
 800eed4:	0014      	movs	r4, r2
 800eed6:	402c      	ands	r4, r5
 800eed8:	422a      	tst	r2, r5
 800eeda:	d012      	beq.n	800ef02 <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 800eedc:	2c01      	cmp	r4, #1
 800eede:	d00c      	beq.n	800eefa <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800eee0:	2c02      	cmp	r4, #2
 800eee2:	d111      	bne.n	800ef08 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	5cca      	ldrb	r2, [r1, r3]
 800eee8:	0212      	lsls	r2, r2, #8
 800eeea:	18cb      	adds	r3, r1, r3
 800eeec:	785b      	ldrb	r3, [r3, #1]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	6802      	ldr	r2, [r0, #0]
 800eef2:	8013      	strh	r3, [r2, #0]
 800eef4:	e005      	b.n	800ef02 <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 800eef6:	2300      	movs	r3, #0
 800eef8:	e7eb      	b.n	800eed2 <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	5c5b      	ldrb	r3, [r3, r1]
 800eefe:	6802      	ldr	r2, [r0, #0]
 800ef00:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ef02:	6803      	ldr	r3, [r0, #0]
 800ef04:	6818      	ldr	r0, [r3, #0]
}
 800ef06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 800ef08:	2c03      	cmp	r4, #3
 800ef0a:	d1fa      	bne.n	800ef02 <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	5ccc      	ldrb	r4, [r1, r3]
 800ef10:	0224      	lsls	r4, r4, #8
 800ef12:	18cb      	adds	r3, r1, r3
 800ef14:	785a      	ldrb	r2, [r3, #1]
 800ef16:	4322      	orrs	r2, r4
 800ef18:	6801      	ldr	r1, [r0, #0]
 800ef1a:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800ef1c:	789b      	ldrb	r3, [r3, #2]
 800ef1e:	6802      	ldr	r2, [r0, #0]
 800ef20:	7013      	strb	r3, [r2, #0]
 800ef22:	e7ee      	b.n	800ef02 <CRC_Handle_8+0x66>

0800ef24 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef26:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800ef28:	0852      	lsrs	r2, r2, #1
 800ef2a:	2e01      	cmp	r6, #1
 800ef2c:	d918      	bls.n	800ef60 <CRC_Handle_16+0x3c>
 800ef2e:	000c      	movs	r4, r1
 800ef30:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ef32:	8823      	ldrh	r3, [r4, #0]
 800ef34:	041b      	lsls	r3, r3, #16
 800ef36:	8867      	ldrh	r7, [r4, #2]
 800ef38:	433b      	orrs	r3, r7
 800ef3a:	6807      	ldr	r7, [r0, #0]
 800ef3c:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800ef3e:	3501      	adds	r5, #1
 800ef40:	3404      	adds	r4, #4
 800ef42:	4295      	cmp	r5, r2
 800ef44:	d3f5      	bcc.n	800ef32 <CRC_Handle_16+0xe>
 800ef46:	2301      	movs	r3, #1
 800ef48:	2e01      	cmp	r6, #1
 800ef4a:	d900      	bls.n	800ef4e <CRC_Handle_16+0x2a>
 800ef4c:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 800ef4e:	07f2      	lsls	r2, r6, #31
 800ef50:	d503      	bpl.n	800ef5a <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	5a5b      	ldrh	r3, [r3, r1]
 800ef56:	6802      	ldr	r2, [r0, #0]
 800ef58:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ef5a:	6803      	ldr	r3, [r0, #0]
 800ef5c:	6818      	ldr	r0, [r3, #0]
}
 800ef5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 800ef60:	2300      	movs	r3, #0
 800ef62:	e7f4      	b.n	800ef4e <CRC_Handle_16+0x2a>

0800ef64 <HAL_CRC_Init>:
{
 800ef64:	b510      	push	{r4, lr}
 800ef66:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800ef68:	d029      	beq.n	800efbe <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800ef6a:	7f43      	ldrb	r3, [r0, #29]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d01e      	beq.n	800efae <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ef70:	2302      	movs	r3, #2
 800ef72:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ef74:	0020      	movs	r0, r4
 800ef76:	f000 f8ab 	bl	800f0d0 <HAL_CRCEx_Init>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d121      	bne.n	800efc2 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ef7e:	7963      	ldrb	r3, [r4, #5]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d118      	bne.n	800efb6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800ef84:	6823      	ldr	r3, [r4, #0]
 800ef86:	2201      	movs	r2, #1
 800ef88:	4252      	negs	r2, r2
 800ef8a:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ef8c:	6822      	ldr	r2, [r4, #0]
 800ef8e:	6893      	ldr	r3, [r2, #8]
 800ef90:	2160      	movs	r1, #96	; 0x60
 800ef92:	438b      	bics	r3, r1
 800ef94:	6961      	ldr	r1, [r4, #20]
 800ef96:	430b      	orrs	r3, r1
 800ef98:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	6893      	ldr	r3, [r2, #8]
 800ef9e:	2180      	movs	r1, #128	; 0x80
 800efa0:	438b      	bics	r3, r1
 800efa2:	69a1      	ldr	r1, [r4, #24]
 800efa4:	430b      	orrs	r3, r1
 800efa6:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800efa8:	2301      	movs	r3, #1
 800efaa:	7763      	strb	r3, [r4, #29]
}
 800efac:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800efae:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800efb0:	f7fc fece 	bl	800bd50 <HAL_CRC_MspInit>
 800efb4:	e7dc      	b.n	800ef70 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	6922      	ldr	r2, [r4, #16]
 800efba:	611a      	str	r2, [r3, #16]
 800efbc:	e7e6      	b.n	800ef8c <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800efbe:	2001      	movs	r0, #1
 800efc0:	e7f4      	b.n	800efac <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800efc2:	2001      	movs	r0, #1
 800efc4:	e7f2      	b.n	800efac <HAL_CRC_Init+0x48>

0800efc6 <HAL_CRC_Accumulate>:
{
 800efc6:	b510      	push	{r4, lr}
 800efc8:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800efca:	7f03      	ldrb	r3, [r0, #28]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d023      	beq.n	800f018 <HAL_CRC_Accumulate+0x52>
 800efd0:	2301      	movs	r3, #1
 800efd2:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800efd4:	3301      	adds	r3, #1
 800efd6:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800efd8:	6a03      	ldr	r3, [r0, #32]
 800efda:	2b02      	cmp	r3, #2
 800efdc:	d019      	beq.n	800f012 <HAL_CRC_Accumulate+0x4c>
 800efde:	2b03      	cmp	r3, #3
 800efe0:	d007      	beq.n	800eff2 <HAL_CRC_Accumulate+0x2c>
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d012      	beq.n	800f00c <HAL_CRC_Accumulate+0x46>
 800efe6:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800efe8:	2301      	movs	r3, #1
 800efea:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800efec:	2300      	movs	r3, #0
 800efee:	7723      	strb	r3, [r4, #28]
}
 800eff0:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	d007      	beq.n	800f006 <HAL_CRC_Accumulate+0x40>
 800eff6:	000b      	movs	r3, r1
 800eff8:	0092      	lsls	r2, r2, #2
 800effa:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800effc:	6822      	ldr	r2, [r4, #0]
 800effe:	cb01      	ldmia	r3!, {r0}
 800f000:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800f002:	428b      	cmp	r3, r1
 800f004:	d1fa      	bne.n	800effc <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	6818      	ldr	r0, [r3, #0]
      break;
 800f00a:	e7ed      	b.n	800efe8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f00c:	f7ff ff46 	bl	800ee9c <CRC_Handle_8>
      break;
 800f010:	e7ea      	b.n	800efe8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f012:	f7ff ff87 	bl	800ef24 <CRC_Handle_16>
      break;
 800f016:	e7e7      	b.n	800efe8 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800f018:	2002      	movs	r0, #2
 800f01a:	e7e9      	b.n	800eff0 <HAL_CRC_Accumulate+0x2a>

0800f01c <HAL_CRC_Calculate>:
{
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f020:	7f03      	ldrb	r3, [r0, #28]
 800f022:	2b01      	cmp	r3, #1
 800f024:	d029      	beq.n	800f07a <HAL_CRC_Calculate+0x5e>
 800f026:	2501      	movs	r5, #1
 800f028:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f02a:	2302      	movs	r3, #2
 800f02c:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f02e:	6800      	ldr	r0, [r0, #0]
 800f030:	6883      	ldr	r3, [r0, #8]
 800f032:	432b      	orrs	r3, r5
 800f034:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800f036:	6a23      	ldr	r3, [r4, #32]
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d01a      	beq.n	800f072 <HAL_CRC_Calculate+0x56>
 800f03c:	2b03      	cmp	r3, #3
 800f03e:	d007      	beq.n	800f050 <HAL_CRC_Calculate+0x34>
 800f040:	2b01      	cmp	r3, #1
 800f042:	d012      	beq.n	800f06a <HAL_CRC_Calculate+0x4e>
 800f044:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800f046:	2301      	movs	r3, #1
 800f048:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f04a:	2300      	movs	r3, #0
 800f04c:	7723      	strb	r3, [r4, #28]
}
 800f04e:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f050:	2a00      	cmp	r2, #0
 800f052:	d007      	beq.n	800f064 <HAL_CRC_Calculate+0x48>
 800f054:	000b      	movs	r3, r1
 800f056:	0092      	lsls	r2, r2, #2
 800f058:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f05a:	6822      	ldr	r2, [r4, #0]
 800f05c:	cb01      	ldmia	r3!, {r0}
 800f05e:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800f060:	428b      	cmp	r3, r1
 800f062:	d1fa      	bne.n	800f05a <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800f064:	6823      	ldr	r3, [r4, #0]
 800f066:	6818      	ldr	r0, [r3, #0]
      break;
 800f068:	e7ed      	b.n	800f046 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f06a:	0020      	movs	r0, r4
 800f06c:	f7ff ff16 	bl	800ee9c <CRC_Handle_8>
      break;
 800f070:	e7e9      	b.n	800f046 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f072:	0020      	movs	r0, r4
 800f074:	f7ff ff56 	bl	800ef24 <CRC_Handle_16>
      break;
 800f078:	e7e5      	b.n	800f046 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f07a:	2002      	movs	r0, #2
 800f07c:	e7e7      	b.n	800f04e <HAL_CRC_Calculate+0x32>

0800f07e <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f07e:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f080:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f082:	2501      	movs	r5, #1
 800f084:	002c      	movs	r4, r5
 800f086:	409c      	lsls	r4, r3
 800f088:	4221      	tst	r1, r4
 800f08a:	d105      	bne.n	800f098 <HAL_CRCEx_Polynomial_Set+0x1a>
 800f08c:	3b01      	subs	r3, #1
 800f08e:	d2f9      	bcs.n	800f084 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800f090:	2a10      	cmp	r2, #16
 800f092:	d103      	bne.n	800f09c <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 800f094:	2001      	movs	r0, #1
 800f096:	e00e      	b.n	800f0b6 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800f098:	2a10      	cmp	r2, #16
 800f09a:	d011      	beq.n	800f0c0 <HAL_CRCEx_Polynomial_Set+0x42>
 800f09c:	2a18      	cmp	r2, #24
 800f09e:	d00b      	beq.n	800f0b8 <HAL_CRCEx_Polynomial_Set+0x3a>
 800f0a0:	2a08      	cmp	r2, #8
 800f0a2:	d011      	beq.n	800f0c8 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f0a4:	6803      	ldr	r3, [r0, #0]
 800f0a6:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f0a8:	6801      	ldr	r1, [r0, #0]
 800f0aa:	688b      	ldr	r3, [r1, #8]
 800f0ac:	2018      	movs	r0, #24
 800f0ae:	4383      	bics	r3, r0
 800f0b0:	431a      	orrs	r2, r3
 800f0b2:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800f0b4:	2000      	movs	r0, #0
}
 800f0b6:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800f0b8:	2b06      	cmp	r3, #6
 800f0ba:	d9f3      	bls.n	800f0a4 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800f0bc:	2001      	movs	r0, #1
 800f0be:	e7fa      	b.n	800f0b6 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800f0c0:	2b07      	cmp	r3, #7
 800f0c2:	d9ef      	bls.n	800f0a4 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	e7f6      	b.n	800f0b6 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 800f0c8:	2b0f      	cmp	r3, #15
 800f0ca:	d9eb      	bls.n	800f0a4 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	e7f2      	b.n	800f0b6 <HAL_CRCEx_Polynomial_Set+0x38>

0800f0d0 <HAL_CRCEx_Init>:
{
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f0d4:	7900      	ldrb	r0, [r0, #4]
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d108      	bne.n	800f0ec <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	4908      	ldr	r1, [pc, #32]	; (800f100 <HAL_CRCEx_Init+0x30>)
 800f0de:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	6893      	ldr	r3, [r2, #8]
 800f0e4:	2118      	movs	r1, #24
 800f0e6:	438b      	bics	r3, r1
 800f0e8:	6093      	str	r3, [r2, #8]
}
 800f0ea:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f0ec:	68da      	ldr	r2, [r3, #12]
 800f0ee:	6899      	ldr	r1, [r3, #8]
 800f0f0:	0018      	movs	r0, r3
 800f0f2:	f7ff ffc4 	bl	800f07e <HAL_CRCEx_Polynomial_Set>
 800f0f6:	1e43      	subs	r3, r0, #1
 800f0f8:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f0fa:	b2c0      	uxtb	r0, r0
 800f0fc:	e7f5      	b.n	800f0ea <HAL_CRCEx_Init+0x1a>
 800f0fe:	46c0      	nop			; (mov r8, r8)
 800f100:	04c11db7 	.word	0x04c11db7

0800f104 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f104:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f106:	2800      	cmp	r0, #0
 800f108:	d022      	beq.n	800f150 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f10a:	2321      	movs	r3, #33	; 0x21
 800f10c:	5cc3      	ldrb	r3, [r0, r3]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d102      	bne.n	800f118 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800f112:	3320      	adds	r3, #32
 800f114:	2200      	movs	r2, #0
 800f116:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f118:	2121      	movs	r1, #33	; 0x21
 800f11a:	2302      	movs	r3, #2
 800f11c:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f11e:	6804      	ldr	r4, [r0, #0]
 800f120:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f122:	4a0c      	ldr	r2, [pc, #48]	; (800f154 <HAL_DMA_Init+0x50>)
 800f124:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f126:	6843      	ldr	r3, [r0, #4]
 800f128:	6885      	ldr	r5, [r0, #8]
 800f12a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f12c:	68c5      	ldr	r5, [r0, #12]
 800f12e:	432b      	orrs	r3, r5
 800f130:	6905      	ldr	r5, [r0, #16]
 800f132:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f134:	6945      	ldr	r5, [r0, #20]
 800f136:	432b      	orrs	r3, r5
 800f138:	6985      	ldr	r5, [r0, #24]
 800f13a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f13c:	69c5      	ldr	r5, [r0, #28]
 800f13e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f140:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f142:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f144:	2300      	movs	r3, #0
 800f146:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f148:	3301      	adds	r3, #1
 800f14a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f14c:	2000      	movs	r0, #0
}  
 800f14e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800f150:	2001      	movs	r0, #1
 800f152:	e7fc      	b.n	800f14e <HAL_DMA_Init+0x4a>
 800f154:	ffffc00f 	.word	0xffffc00f

0800f158 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f158:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f15a:	2420      	movs	r4, #32
 800f15c:	5d04      	ldrb	r4, [r0, r4]
 800f15e:	2c01      	cmp	r4, #1
 800f160:	d02d      	beq.n	800f1be <HAL_DMA_Start_IT+0x66>
 800f162:	2601      	movs	r6, #1
 800f164:	2420      	movs	r4, #32
 800f166:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f168:	3401      	adds	r4, #1
 800f16a:	2502      	movs	r5, #2
 800f16c:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f16e:	6805      	ldr	r5, [r0, #0]
 800f170:	682c      	ldr	r4, [r5, #0]
 800f172:	43b4      	bics	r4, r6
 800f174:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f176:	6804      	ldr	r4, [r0, #0]
 800f178:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f17a:	6843      	ldr	r3, [r0, #4]
 800f17c:	2b10      	cmp	r3, #16
 800f17e:	d019      	beq.n	800f1b4 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f180:	6803      	ldr	r3, [r0, #0]
 800f182:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f184:	6803      	ldr	r3, [r0, #0]
 800f186:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f188:	6802      	ldr	r2, [r0, #0]
 800f18a:	6813      	ldr	r3, [r2, #0]
 800f18c:	2102      	movs	r1, #2
 800f18e:	430b      	orrs	r3, r1
 800f190:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f192:	6802      	ldr	r2, [r0, #0]
 800f194:	6813      	ldr	r3, [r2, #0]
 800f196:	3102      	adds	r1, #2
 800f198:	430b      	orrs	r3, r1
 800f19a:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f19c:	6802      	ldr	r2, [r0, #0]
 800f19e:	6813      	ldr	r3, [r2, #0]
 800f1a0:	3104      	adds	r1, #4
 800f1a2:	430b      	orrs	r3, r1
 800f1a4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f1a6:	6802      	ldr	r2, [r0, #0]
 800f1a8:	6813      	ldr	r3, [r2, #0]
 800f1aa:	3907      	subs	r1, #7
 800f1ac:	430b      	orrs	r3, r1
 800f1ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 800f1b0:	2000      	movs	r0, #0
} 
 800f1b2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f1b4:	6803      	ldr	r3, [r0, #0]
 800f1b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f1b8:	6803      	ldr	r3, [r0, #0]
 800f1ba:	60d9      	str	r1, [r3, #12]
 800f1bc:	e7e4      	b.n	800f188 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 800f1be:	2002      	movs	r0, #2
 800f1c0:	e7f7      	b.n	800f1b2 <HAL_DMA_Start_IT+0x5a>

0800f1c2 <HAL_DMA_Abort>:
{
 800f1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c4:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f1c6:	6802      	ldr	r2, [r0, #0]
 800f1c8:	6813      	ldr	r3, [r2, #0]
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	438b      	bics	r3, r1
 800f1ce:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f1d0:	f7ff fdd0 	bl	800ed74 <HAL_GetTick>
 800f1d4:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f1d6:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f1d8:	27fa      	movs	r7, #250	; 0xfa
 800f1da:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	421e      	tst	r6, r3
 800f1e2:	d00f      	beq.n	800f204 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f1e4:	f7ff fdc6 	bl	800ed74 <HAL_GetTick>
 800f1e8:	1b40      	subs	r0, r0, r5
 800f1ea:	42b8      	cmp	r0, r7
 800f1ec:	d9f6      	bls.n	800f1dc <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f1ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1f0:	2220      	movs	r2, #32
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f1f6:	2321      	movs	r3, #33	; 0x21
 800f1f8:	2103      	movs	r1, #3
 800f1fa:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800f200:	2003      	movs	r0, #3
 800f202:	e006      	b.n	800f212 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 800f204:	2321      	movs	r3, #33	; 0x21
 800f206:	2201      	movs	r2, #1
 800f208:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800f20a:	3b01      	subs	r3, #1
 800f20c:	2200      	movs	r2, #0
 800f20e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 800f210:	2000      	movs	r0, #0
}
 800f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f214 <HAL_DMA_IRQHandler>:
{        
 800f214:	b510      	push	{r4, lr}
 800f216:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f218:	6803      	ldr	r3, [r0, #0]
 800f21a:	4ab1      	ldr	r2, [pc, #708]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d97e      	bls.n	800f31e <HAL_DMA_IRQHandler+0x10a>
 800f220:	4ab0      	ldr	r2, [pc, #704]	; (800f4e4 <HAL_DMA_IRQHandler+0x2d0>)
 800f222:	6811      	ldr	r1, [r2, #0]
 800f224:	4ab0      	ldr	r2, [pc, #704]	; (800f4e8 <HAL_DMA_IRQHandler+0x2d4>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d026      	beq.n	800f278 <HAL_DMA_IRQHandler+0x64>
 800f22a:	4ab0      	ldr	r2, [pc, #704]	; (800f4ec <HAL_DMA_IRQHandler+0x2d8>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d05e      	beq.n	800f2ee <HAL_DMA_IRQHandler+0xda>
 800f230:	4aaf      	ldr	r2, [pc, #700]	; (800f4f0 <HAL_DMA_IRQHandler+0x2dc>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d05d      	beq.n	800f2f2 <HAL_DMA_IRQHandler+0xde>
 800f236:	4aaf      	ldr	r2, [pc, #700]	; (800f4f4 <HAL_DMA_IRQHandler+0x2e0>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d05d      	beq.n	800f2f8 <HAL_DMA_IRQHandler+0xe4>
 800f23c:	4aae      	ldr	r2, [pc, #696]	; (800f4f8 <HAL_DMA_IRQHandler+0x2e4>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d05d      	beq.n	800f2fe <HAL_DMA_IRQHandler+0xea>
 800f242:	4aae      	ldr	r2, [pc, #696]	; (800f4fc <HAL_DMA_IRQHandler+0x2e8>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d05d      	beq.n	800f304 <HAL_DMA_IRQHandler+0xf0>
 800f248:	4aa5      	ldr	r2, [pc, #660]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d05d      	beq.n	800f30a <HAL_DMA_IRQHandler+0xf6>
 800f24e:	4aac      	ldr	r2, [pc, #688]	; (800f500 <HAL_DMA_IRQHandler+0x2ec>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d05d      	beq.n	800f310 <HAL_DMA_IRQHandler+0xfc>
 800f254:	4aab      	ldr	r2, [pc, #684]	; (800f504 <HAL_DMA_IRQHandler+0x2f0>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d05c      	beq.n	800f314 <HAL_DMA_IRQHandler+0x100>
 800f25a:	4aab      	ldr	r2, [pc, #684]	; (800f508 <HAL_DMA_IRQHandler+0x2f4>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d05b      	beq.n	800f318 <HAL_DMA_IRQHandler+0x104>
 800f260:	4aaa      	ldr	r2, [pc, #680]	; (800f50c <HAL_DMA_IRQHandler+0x2f8>)
 800f262:	189a      	adds	r2, r3, r2
 800f264:	4250      	negs	r0, r2
 800f266:	4142      	adcs	r2, r0
 800f268:	4252      	negs	r2, r2
 800f26a:	48a9      	ldr	r0, [pc, #676]	; (800f510 <HAL_DMA_IRQHandler+0x2fc>)
 800f26c:	4002      	ands	r2, r0
 800f26e:	2080      	movs	r0, #128	; 0x80
 800f270:	0300      	lsls	r0, r0, #12
 800f272:	4684      	mov	ip, r0
 800f274:	4462      	add	r2, ip
 800f276:	e000      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f278:	2208      	movs	r2, #8
 800f27a:	420a      	tst	r2, r1
 800f27c:	d001      	beq.n	800f282 <HAL_DMA_IRQHandler+0x6e>
 800f27e:	f000 fbfb 	bl	800fa78 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f282:	4a98      	ldr	r2, [pc, #608]	; (800f4e4 <HAL_DMA_IRQHandler+0x2d0>)
 800f284:	6811      	ldr	r1, [r2, #0]
 800f286:	4a98      	ldr	r2, [pc, #608]	; (800f4e8 <HAL_DMA_IRQHandler+0x2d4>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d100      	bne.n	800f28e <HAL_DMA_IRQHandler+0x7a>
 800f28c:	e18d      	b.n	800f5aa <HAL_DMA_IRQHandler+0x396>
 800f28e:	4a97      	ldr	r2, [pc, #604]	; (800f4ec <HAL_DMA_IRQHandler+0x2d8>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d100      	bne.n	800f296 <HAL_DMA_IRQHandler+0x82>
 800f294:	e18e      	b.n	800f5b4 <HAL_DMA_IRQHandler+0x3a0>
 800f296:	4a96      	ldr	r2, [pc, #600]	; (800f4f0 <HAL_DMA_IRQHandler+0x2dc>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d100      	bne.n	800f29e <HAL_DMA_IRQHandler+0x8a>
 800f29c:	e18c      	b.n	800f5b8 <HAL_DMA_IRQHandler+0x3a4>
 800f29e:	4a95      	ldr	r2, [pc, #596]	; (800f4f4 <HAL_DMA_IRQHandler+0x2e0>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d100      	bne.n	800f2a6 <HAL_DMA_IRQHandler+0x92>
 800f2a4:	e18b      	b.n	800f5be <HAL_DMA_IRQHandler+0x3aa>
 800f2a6:	4a94      	ldr	r2, [pc, #592]	; (800f4f8 <HAL_DMA_IRQHandler+0x2e4>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d100      	bne.n	800f2ae <HAL_DMA_IRQHandler+0x9a>
 800f2ac:	e18a      	b.n	800f5c4 <HAL_DMA_IRQHandler+0x3b0>
 800f2ae:	4a93      	ldr	r2, [pc, #588]	; (800f4fc <HAL_DMA_IRQHandler+0x2e8>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d100      	bne.n	800f2b6 <HAL_DMA_IRQHandler+0xa2>
 800f2b4:	e189      	b.n	800f5ca <HAL_DMA_IRQHandler+0x3b6>
 800f2b6:	4a8a      	ldr	r2, [pc, #552]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d100      	bne.n	800f2be <HAL_DMA_IRQHandler+0xaa>
 800f2bc:	e188      	b.n	800f5d0 <HAL_DMA_IRQHandler+0x3bc>
 800f2be:	4a90      	ldr	r2, [pc, #576]	; (800f500 <HAL_DMA_IRQHandler+0x2ec>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d100      	bne.n	800f2c6 <HAL_DMA_IRQHandler+0xb2>
 800f2c4:	e187      	b.n	800f5d6 <HAL_DMA_IRQHandler+0x3c2>
 800f2c6:	4a8f      	ldr	r2, [pc, #572]	; (800f504 <HAL_DMA_IRQHandler+0x2f0>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d100      	bne.n	800f2ce <HAL_DMA_IRQHandler+0xba>
 800f2cc:	e185      	b.n	800f5da <HAL_DMA_IRQHandler+0x3c6>
 800f2ce:	4a8e      	ldr	r2, [pc, #568]	; (800f508 <HAL_DMA_IRQHandler+0x2f4>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d100      	bne.n	800f2d6 <HAL_DMA_IRQHandler+0xc2>
 800f2d4:	e183      	b.n	800f5de <HAL_DMA_IRQHandler+0x3ca>
 800f2d6:	4a8d      	ldr	r2, [pc, #564]	; (800f50c <HAL_DMA_IRQHandler+0x2f8>)
 800f2d8:	189a      	adds	r2, r3, r2
 800f2da:	4250      	negs	r0, r2
 800f2dc:	4142      	adcs	r2, r0
 800f2de:	4252      	negs	r2, r2
 800f2e0:	488c      	ldr	r0, [pc, #560]	; (800f514 <HAL_DMA_IRQHandler+0x300>)
 800f2e2:	4002      	ands	r2, r0
 800f2e4:	2080      	movs	r0, #128	; 0x80
 800f2e6:	02c0      	lsls	r0, r0, #11
 800f2e8:	4684      	mov	ip, r0
 800f2ea:	4462      	add	r2, ip
 800f2ec:	e15e      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f2ee:	2280      	movs	r2, #128	; 0x80
 800f2f0:	e7c3      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f2f2:	2280      	movs	r2, #128	; 0x80
 800f2f4:	0112      	lsls	r2, r2, #4
 800f2f6:	e7c0      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f2f8:	2280      	movs	r2, #128	; 0x80
 800f2fa:	0212      	lsls	r2, r2, #8
 800f2fc:	e7bd      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f2fe:	2280      	movs	r2, #128	; 0x80
 800f300:	0312      	lsls	r2, r2, #12
 800f302:	e7ba      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f304:	2280      	movs	r2, #128	; 0x80
 800f306:	0412      	lsls	r2, r2, #16
 800f308:	e7b7      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f30a:	2280      	movs	r2, #128	; 0x80
 800f30c:	0512      	lsls	r2, r2, #20
 800f30e:	e7b4      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f310:	2208      	movs	r2, #8
 800f312:	e7b2      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f314:	2280      	movs	r2, #128	; 0x80
 800f316:	e7b0      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f318:	2280      	movs	r2, #128	; 0x80
 800f31a:	0112      	lsls	r2, r2, #4
 800f31c:	e7ad      	b.n	800f27a <HAL_DMA_IRQHandler+0x66>
 800f31e:	4a7e      	ldr	r2, [pc, #504]	; (800f518 <HAL_DMA_IRQHandler+0x304>)
 800f320:	6811      	ldr	r1, [r2, #0]
 800f322:	4a71      	ldr	r2, [pc, #452]	; (800f4e8 <HAL_DMA_IRQHandler+0x2d4>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d026      	beq.n	800f376 <HAL_DMA_IRQHandler+0x162>
 800f328:	4a70      	ldr	r2, [pc, #448]	; (800f4ec <HAL_DMA_IRQHandler+0x2d8>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d05d      	beq.n	800f3ea <HAL_DMA_IRQHandler+0x1d6>
 800f32e:	4a70      	ldr	r2, [pc, #448]	; (800f4f0 <HAL_DMA_IRQHandler+0x2dc>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d05c      	beq.n	800f3ee <HAL_DMA_IRQHandler+0x1da>
 800f334:	4a6f      	ldr	r2, [pc, #444]	; (800f4f4 <HAL_DMA_IRQHandler+0x2e0>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d05c      	beq.n	800f3f4 <HAL_DMA_IRQHandler+0x1e0>
 800f33a:	4a6f      	ldr	r2, [pc, #444]	; (800f4f8 <HAL_DMA_IRQHandler+0x2e4>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d05c      	beq.n	800f3fa <HAL_DMA_IRQHandler+0x1e6>
 800f340:	4a6e      	ldr	r2, [pc, #440]	; (800f4fc <HAL_DMA_IRQHandler+0x2e8>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d05c      	beq.n	800f400 <HAL_DMA_IRQHandler+0x1ec>
 800f346:	4a66      	ldr	r2, [pc, #408]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d05c      	beq.n	800f406 <HAL_DMA_IRQHandler+0x1f2>
 800f34c:	4a6c      	ldr	r2, [pc, #432]	; (800f500 <HAL_DMA_IRQHandler+0x2ec>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d05c      	beq.n	800f40c <HAL_DMA_IRQHandler+0x1f8>
 800f352:	4a6c      	ldr	r2, [pc, #432]	; (800f504 <HAL_DMA_IRQHandler+0x2f0>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d05b      	beq.n	800f410 <HAL_DMA_IRQHandler+0x1fc>
 800f358:	4a6b      	ldr	r2, [pc, #428]	; (800f508 <HAL_DMA_IRQHandler+0x2f4>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d05a      	beq.n	800f414 <HAL_DMA_IRQHandler+0x200>
 800f35e:	4a6b      	ldr	r2, [pc, #428]	; (800f50c <HAL_DMA_IRQHandler+0x2f8>)
 800f360:	189a      	adds	r2, r3, r2
 800f362:	4250      	negs	r0, r2
 800f364:	4142      	adcs	r2, r0
 800f366:	4252      	negs	r2, r2
 800f368:	4869      	ldr	r0, [pc, #420]	; (800f510 <HAL_DMA_IRQHandler+0x2fc>)
 800f36a:	4002      	ands	r2, r0
 800f36c:	2080      	movs	r0, #128	; 0x80
 800f36e:	0300      	lsls	r0, r0, #12
 800f370:	4684      	mov	ip, r0
 800f372:	4462      	add	r2, ip
 800f374:	e000      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f376:	2208      	movs	r2, #8
 800f378:	420a      	tst	r2, r1
 800f37a:	d000      	beq.n	800f37e <HAL_DMA_IRQHandler+0x16a>
 800f37c:	e376      	b.n	800fa6c <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f37e:	4a66      	ldr	r2, [pc, #408]	; (800f518 <HAL_DMA_IRQHandler+0x304>)
 800f380:	6811      	ldr	r1, [r2, #0]
 800f382:	4a59      	ldr	r2, [pc, #356]	; (800f4e8 <HAL_DMA_IRQHandler+0x2d4>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d100      	bne.n	800f38a <HAL_DMA_IRQHandler+0x176>
 800f388:	e12c      	b.n	800f5e4 <HAL_DMA_IRQHandler+0x3d0>
 800f38a:	4a58      	ldr	r2, [pc, #352]	; (800f4ec <HAL_DMA_IRQHandler+0x2d8>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d100      	bne.n	800f392 <HAL_DMA_IRQHandler+0x17e>
 800f390:	e16e      	b.n	800f670 <HAL_DMA_IRQHandler+0x45c>
 800f392:	4a57      	ldr	r2, [pc, #348]	; (800f4f0 <HAL_DMA_IRQHandler+0x2dc>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d100      	bne.n	800f39a <HAL_DMA_IRQHandler+0x186>
 800f398:	e16c      	b.n	800f674 <HAL_DMA_IRQHandler+0x460>
 800f39a:	4a56      	ldr	r2, [pc, #344]	; (800f4f4 <HAL_DMA_IRQHandler+0x2e0>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d100      	bne.n	800f3a2 <HAL_DMA_IRQHandler+0x18e>
 800f3a0:	e16b      	b.n	800f67a <HAL_DMA_IRQHandler+0x466>
 800f3a2:	4a55      	ldr	r2, [pc, #340]	; (800f4f8 <HAL_DMA_IRQHandler+0x2e4>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d100      	bne.n	800f3aa <HAL_DMA_IRQHandler+0x196>
 800f3a8:	e16a      	b.n	800f680 <HAL_DMA_IRQHandler+0x46c>
 800f3aa:	4a54      	ldr	r2, [pc, #336]	; (800f4fc <HAL_DMA_IRQHandler+0x2e8>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d100      	bne.n	800f3b2 <HAL_DMA_IRQHandler+0x19e>
 800f3b0:	e169      	b.n	800f686 <HAL_DMA_IRQHandler+0x472>
 800f3b2:	4a4b      	ldr	r2, [pc, #300]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d100      	bne.n	800f3ba <HAL_DMA_IRQHandler+0x1a6>
 800f3b8:	e168      	b.n	800f68c <HAL_DMA_IRQHandler+0x478>
 800f3ba:	4a51      	ldr	r2, [pc, #324]	; (800f500 <HAL_DMA_IRQHandler+0x2ec>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d100      	bne.n	800f3c2 <HAL_DMA_IRQHandler+0x1ae>
 800f3c0:	e167      	b.n	800f692 <HAL_DMA_IRQHandler+0x47e>
 800f3c2:	4a50      	ldr	r2, [pc, #320]	; (800f504 <HAL_DMA_IRQHandler+0x2f0>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d100      	bne.n	800f3ca <HAL_DMA_IRQHandler+0x1b6>
 800f3c8:	e165      	b.n	800f696 <HAL_DMA_IRQHandler+0x482>
 800f3ca:	4a4f      	ldr	r2, [pc, #316]	; (800f508 <HAL_DMA_IRQHandler+0x2f4>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d100      	bne.n	800f3d2 <HAL_DMA_IRQHandler+0x1be>
 800f3d0:	e163      	b.n	800f69a <HAL_DMA_IRQHandler+0x486>
 800f3d2:	4a4e      	ldr	r2, [pc, #312]	; (800f50c <HAL_DMA_IRQHandler+0x2f8>)
 800f3d4:	189a      	adds	r2, r3, r2
 800f3d6:	4250      	negs	r0, r2
 800f3d8:	4142      	adcs	r2, r0
 800f3da:	4252      	negs	r2, r2
 800f3dc:	484d      	ldr	r0, [pc, #308]	; (800f514 <HAL_DMA_IRQHandler+0x300>)
 800f3de:	4002      	ands	r2, r0
 800f3e0:	2080      	movs	r0, #128	; 0x80
 800f3e2:	02c0      	lsls	r0, r0, #11
 800f3e4:	4684      	mov	ip, r0
 800f3e6:	4462      	add	r2, ip
 800f3e8:	e0fd      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f3ea:	2280      	movs	r2, #128	; 0x80
 800f3ec:	e7c4      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f3ee:	2280      	movs	r2, #128	; 0x80
 800f3f0:	0112      	lsls	r2, r2, #4
 800f3f2:	e7c1      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f3f4:	2280      	movs	r2, #128	; 0x80
 800f3f6:	0212      	lsls	r2, r2, #8
 800f3f8:	e7be      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f3fa:	2280      	movs	r2, #128	; 0x80
 800f3fc:	0312      	lsls	r2, r2, #12
 800f3fe:	e7bb      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f400:	2280      	movs	r2, #128	; 0x80
 800f402:	0412      	lsls	r2, r2, #16
 800f404:	e7b8      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f406:	2280      	movs	r2, #128	; 0x80
 800f408:	0512      	lsls	r2, r2, #20
 800f40a:	e7b5      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f40c:	2208      	movs	r2, #8
 800f40e:	e7b3      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f410:	2280      	movs	r2, #128	; 0x80
 800f412:	e7b1      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
 800f414:	2280      	movs	r2, #128	; 0x80
 800f416:	0112      	lsls	r2, r2, #4
 800f418:	e7ae      	b.n	800f378 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	2108      	movs	r1, #8
 800f41e:	438a      	bics	r2, r1
 800f420:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	4a2e      	ldr	r2, [pc, #184]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d978      	bls.n	800f51c <HAL_DMA_IRQHandler+0x308>
 800f42a:	4a2f      	ldr	r2, [pc, #188]	; (800f4e8 <HAL_DMA_IRQHandler+0x2d4>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d027      	beq.n	800f480 <HAL_DMA_IRQHandler+0x26c>
 800f430:	4a2e      	ldr	r2, [pc, #184]	; (800f4ec <HAL_DMA_IRQHandler+0x2d8>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d03c      	beq.n	800f4b0 <HAL_DMA_IRQHandler+0x29c>
 800f436:	4a2e      	ldr	r2, [pc, #184]	; (800f4f0 <HAL_DMA_IRQHandler+0x2dc>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d03b      	beq.n	800f4b4 <HAL_DMA_IRQHandler+0x2a0>
 800f43c:	4a2d      	ldr	r2, [pc, #180]	; (800f4f4 <HAL_DMA_IRQHandler+0x2e0>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d03b      	beq.n	800f4ba <HAL_DMA_IRQHandler+0x2a6>
 800f442:	4a2d      	ldr	r2, [pc, #180]	; (800f4f8 <HAL_DMA_IRQHandler+0x2e4>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d03b      	beq.n	800f4c0 <HAL_DMA_IRQHandler+0x2ac>
 800f448:	4a2c      	ldr	r2, [pc, #176]	; (800f4fc <HAL_DMA_IRQHandler+0x2e8>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d03b      	beq.n	800f4c6 <HAL_DMA_IRQHandler+0x2b2>
 800f44e:	4a24      	ldr	r2, [pc, #144]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d03b      	beq.n	800f4cc <HAL_DMA_IRQHandler+0x2b8>
 800f454:	4a2a      	ldr	r2, [pc, #168]	; (800f500 <HAL_DMA_IRQHandler+0x2ec>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d03b      	beq.n	800f4d2 <HAL_DMA_IRQHandler+0x2be>
 800f45a:	4a2a      	ldr	r2, [pc, #168]	; (800f504 <HAL_DMA_IRQHandler+0x2f0>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d03a      	beq.n	800f4d6 <HAL_DMA_IRQHandler+0x2c2>
 800f460:	4a29      	ldr	r2, [pc, #164]	; (800f508 <HAL_DMA_IRQHandler+0x2f4>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d039      	beq.n	800f4da <HAL_DMA_IRQHandler+0x2c6>
 800f466:	4a29      	ldr	r2, [pc, #164]	; (800f50c <HAL_DMA_IRQHandler+0x2f8>)
 800f468:	4694      	mov	ip, r2
 800f46a:	4463      	add	r3, ip
 800f46c:	425a      	negs	r2, r3
 800f46e:	4153      	adcs	r3, r2
 800f470:	425b      	negs	r3, r3
 800f472:	4a27      	ldr	r2, [pc, #156]	; (800f510 <HAL_DMA_IRQHandler+0x2fc>)
 800f474:	4013      	ands	r3, r2
 800f476:	2280      	movs	r2, #128	; 0x80
 800f478:	0312      	lsls	r2, r2, #12
 800f47a:	4694      	mov	ip, r2
 800f47c:	4463      	add	r3, ip
 800f47e:	e000      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f480:	2308      	movs	r3, #8
 800f482:	4a18      	ldr	r2, [pc, #96]	; (800f4e4 <HAL_DMA_IRQHandler+0x2d0>)
 800f484:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f488:	2201      	movs	r2, #1
 800f48a:	4313      	orrs	r3, r2
 800f48c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f48e:	2321      	movs	r3, #33	; 0x21
 800f490:	3203      	adds	r2, #3
 800f492:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 800f494:	3b01      	subs	r3, #1
 800f496:	2200      	movs	r2, #0
 800f498:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f49a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d001      	beq.n	800f4a4 <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 800f4a0:	0020      	movs	r0, r4
 800f4a2:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	4a0e      	ldr	r2, [pc, #56]	; (800f4e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d800      	bhi.n	800f4ae <HAL_DMA_IRQHandler+0x29a>
 800f4ac:	e767      	b.n	800f37e <HAL_DMA_IRQHandler+0x16a>
 800f4ae:	e6e8      	b.n	800f282 <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f4b0:	2380      	movs	r3, #128	; 0x80
 800f4b2:	e7e6      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4b4:	2380      	movs	r3, #128	; 0x80
 800f4b6:	011b      	lsls	r3, r3, #4
 800f4b8:	e7e3      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4ba:	2380      	movs	r3, #128	; 0x80
 800f4bc:	021b      	lsls	r3, r3, #8
 800f4be:	e7e0      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4c0:	2380      	movs	r3, #128	; 0x80
 800f4c2:	031b      	lsls	r3, r3, #12
 800f4c4:	e7dd      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4c6:	2380      	movs	r3, #128	; 0x80
 800f4c8:	041b      	lsls	r3, r3, #16
 800f4ca:	e7da      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4cc:	2380      	movs	r3, #128	; 0x80
 800f4ce:	051b      	lsls	r3, r3, #20
 800f4d0:	e7d7      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4d2:	2308      	movs	r3, #8
 800f4d4:	e7d5      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4d6:	2380      	movs	r3, #128	; 0x80
 800f4d8:	e7d3      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4da:	2380      	movs	r3, #128	; 0x80
 800f4dc:	011b      	lsls	r3, r3, #4
 800f4de:	e7d0      	b.n	800f482 <HAL_DMA_IRQHandler+0x26e>
 800f4e0:	40020080 	.word	0x40020080
 800f4e4:	40020400 	.word	0x40020400
 800f4e8:	40020008 	.word	0x40020008
 800f4ec:	4002001c 	.word	0x4002001c
 800f4f0:	40020030 	.word	0x40020030
 800f4f4:	40020044 	.word	0x40020044
 800f4f8:	40020058 	.word	0x40020058
 800f4fc:	4002006c 	.word	0x4002006c
 800f500:	40020408 	.word	0x40020408
 800f504:	4002041c 	.word	0x4002041c
 800f508:	40020430 	.word	0x40020430
 800f50c:	bffdfbbc 	.word	0xbffdfbbc
 800f510:	fff88000 	.word	0xfff88000
 800f514:	fffc4000 	.word	0xfffc4000
 800f518:	40020000 	.word	0x40020000
 800f51c:	4ab3      	ldr	r2, [pc, #716]	; (800f7ec <HAL_DMA_IRQHandler+0x5d8>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d027      	beq.n	800f572 <HAL_DMA_IRQHandler+0x35e>
 800f522:	4ab3      	ldr	r2, [pc, #716]	; (800f7f0 <HAL_DMA_IRQHandler+0x5dc>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d028      	beq.n	800f57a <HAL_DMA_IRQHandler+0x366>
 800f528:	4ab2      	ldr	r2, [pc, #712]	; (800f7f4 <HAL_DMA_IRQHandler+0x5e0>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d027      	beq.n	800f57e <HAL_DMA_IRQHandler+0x36a>
 800f52e:	4ab2      	ldr	r2, [pc, #712]	; (800f7f8 <HAL_DMA_IRQHandler+0x5e4>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d027      	beq.n	800f584 <HAL_DMA_IRQHandler+0x370>
 800f534:	4ab1      	ldr	r2, [pc, #708]	; (800f7fc <HAL_DMA_IRQHandler+0x5e8>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d027      	beq.n	800f58a <HAL_DMA_IRQHandler+0x376>
 800f53a:	4ab1      	ldr	r2, [pc, #708]	; (800f800 <HAL_DMA_IRQHandler+0x5ec>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d027      	beq.n	800f590 <HAL_DMA_IRQHandler+0x37c>
 800f540:	4ab0      	ldr	r2, [pc, #704]	; (800f804 <HAL_DMA_IRQHandler+0x5f0>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d027      	beq.n	800f596 <HAL_DMA_IRQHandler+0x382>
 800f546:	4ab0      	ldr	r2, [pc, #704]	; (800f808 <HAL_DMA_IRQHandler+0x5f4>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d027      	beq.n	800f59c <HAL_DMA_IRQHandler+0x388>
 800f54c:	4aaf      	ldr	r2, [pc, #700]	; (800f80c <HAL_DMA_IRQHandler+0x5f8>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d026      	beq.n	800f5a0 <HAL_DMA_IRQHandler+0x38c>
 800f552:	4aaf      	ldr	r2, [pc, #700]	; (800f810 <HAL_DMA_IRQHandler+0x5fc>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d025      	beq.n	800f5a4 <HAL_DMA_IRQHandler+0x390>
 800f558:	4aae      	ldr	r2, [pc, #696]	; (800f814 <HAL_DMA_IRQHandler+0x600>)
 800f55a:	4694      	mov	ip, r2
 800f55c:	4463      	add	r3, ip
 800f55e:	425a      	negs	r2, r3
 800f560:	4153      	adcs	r3, r2
 800f562:	425b      	negs	r3, r3
 800f564:	4aac      	ldr	r2, [pc, #688]	; (800f818 <HAL_DMA_IRQHandler+0x604>)
 800f566:	4013      	ands	r3, r2
 800f568:	2280      	movs	r2, #128	; 0x80
 800f56a:	0312      	lsls	r2, r2, #12
 800f56c:	4694      	mov	ip, r2
 800f56e:	4463      	add	r3, ip
 800f570:	e000      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f572:	2308      	movs	r3, #8
 800f574:	4aa9      	ldr	r2, [pc, #676]	; (800f81c <HAL_DMA_IRQHandler+0x608>)
 800f576:	6053      	str	r3, [r2, #4]
 800f578:	e785      	b.n	800f486 <HAL_DMA_IRQHandler+0x272>
 800f57a:	2380      	movs	r3, #128	; 0x80
 800f57c:	e7fa      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f57e:	2380      	movs	r3, #128	; 0x80
 800f580:	011b      	lsls	r3, r3, #4
 800f582:	e7f7      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f584:	2380      	movs	r3, #128	; 0x80
 800f586:	021b      	lsls	r3, r3, #8
 800f588:	e7f4      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f58a:	2380      	movs	r3, #128	; 0x80
 800f58c:	031b      	lsls	r3, r3, #12
 800f58e:	e7f1      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f590:	2380      	movs	r3, #128	; 0x80
 800f592:	041b      	lsls	r3, r3, #16
 800f594:	e7ee      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f596:	2380      	movs	r3, #128	; 0x80
 800f598:	051b      	lsls	r3, r3, #20
 800f59a:	e7eb      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f59c:	2308      	movs	r3, #8
 800f59e:	e7e9      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f5a0:	2380      	movs	r3, #128	; 0x80
 800f5a2:	e7e7      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
 800f5a4:	2380      	movs	r3, #128	; 0x80
 800f5a6:	011b      	lsls	r3, r3, #4
 800f5a8:	e7e4      	b.n	800f574 <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f5aa:	2204      	movs	r2, #4
 800f5ac:	420a      	tst	r2, r1
 800f5ae:	d11d      	bne.n	800f5ec <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f5b0:	6821      	ldr	r1, [r4, #0]
 800f5b2:	e085      	b.n	800f6c0 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f5b4:	2240      	movs	r2, #64	; 0x40
 800f5b6:	e7f9      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5b8:	2280      	movs	r2, #128	; 0x80
 800f5ba:	00d2      	lsls	r2, r2, #3
 800f5bc:	e7f6      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5be:	2280      	movs	r2, #128	; 0x80
 800f5c0:	01d2      	lsls	r2, r2, #7
 800f5c2:	e7f3      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5c4:	2280      	movs	r2, #128	; 0x80
 800f5c6:	02d2      	lsls	r2, r2, #11
 800f5c8:	e7f0      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5ca:	2280      	movs	r2, #128	; 0x80
 800f5cc:	03d2      	lsls	r2, r2, #15
 800f5ce:	e7ed      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5d0:	2280      	movs	r2, #128	; 0x80
 800f5d2:	04d2      	lsls	r2, r2, #19
 800f5d4:	e7ea      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5d6:	2204      	movs	r2, #4
 800f5d8:	e7e8      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5da:	2240      	movs	r2, #64	; 0x40
 800f5dc:	e7e6      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5de:	2280      	movs	r2, #128	; 0x80
 800f5e0:	00d2      	lsls	r2, r2, #3
 800f5e2:	e7e3      	b.n	800f5ac <HAL_DMA_IRQHandler+0x398>
 800f5e4:	2204      	movs	r2, #4
 800f5e6:	420a      	tst	r2, r1
 800f5e8:	d100      	bne.n	800f5ec <HAL_DMA_IRQHandler+0x3d8>
 800f5ea:	e208      	b.n	800f9fe <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	0752      	lsls	r2, r2, #29
 800f5f0:	d561      	bpl.n	800f6b6 <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	0692      	lsls	r2, r2, #26
 800f5f6:	d403      	bmi.n	800f600 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	2104      	movs	r1, #4
 800f5fc:	438a      	bics	r2, r1
 800f5fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f600:	6823      	ldr	r3, [r4, #0]
 800f602:	4a80      	ldr	r2, [pc, #512]	; (800f804 <HAL_DMA_IRQHandler+0x5f0>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d800      	bhi.n	800f60a <HAL_DMA_IRQHandler+0x3f6>
 800f608:	e0a8      	b.n	800f75c <HAL_DMA_IRQHandler+0x548>
 800f60a:	4a78      	ldr	r2, [pc, #480]	; (800f7ec <HAL_DMA_IRQHandler+0x5d8>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d047      	beq.n	800f6a0 <HAL_DMA_IRQHandler+0x48c>
 800f610:	4a77      	ldr	r2, [pc, #476]	; (800f7f0 <HAL_DMA_IRQHandler+0x5dc>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d100      	bne.n	800f618 <HAL_DMA_IRQHandler+0x404>
 800f616:	e089      	b.n	800f72c <HAL_DMA_IRQHandler+0x518>
 800f618:	4a76      	ldr	r2, [pc, #472]	; (800f7f4 <HAL_DMA_IRQHandler+0x5e0>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d100      	bne.n	800f620 <HAL_DMA_IRQHandler+0x40c>
 800f61e:	e087      	b.n	800f730 <HAL_DMA_IRQHandler+0x51c>
 800f620:	4a75      	ldr	r2, [pc, #468]	; (800f7f8 <HAL_DMA_IRQHandler+0x5e4>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d100      	bne.n	800f628 <HAL_DMA_IRQHandler+0x414>
 800f626:	e086      	b.n	800f736 <HAL_DMA_IRQHandler+0x522>
 800f628:	4a74      	ldr	r2, [pc, #464]	; (800f7fc <HAL_DMA_IRQHandler+0x5e8>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d100      	bne.n	800f630 <HAL_DMA_IRQHandler+0x41c>
 800f62e:	e085      	b.n	800f73c <HAL_DMA_IRQHandler+0x528>
 800f630:	4a73      	ldr	r2, [pc, #460]	; (800f800 <HAL_DMA_IRQHandler+0x5ec>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d100      	bne.n	800f638 <HAL_DMA_IRQHandler+0x424>
 800f636:	e084      	b.n	800f742 <HAL_DMA_IRQHandler+0x52e>
 800f638:	4a72      	ldr	r2, [pc, #456]	; (800f804 <HAL_DMA_IRQHandler+0x5f0>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d100      	bne.n	800f640 <HAL_DMA_IRQHandler+0x42c>
 800f63e:	e083      	b.n	800f748 <HAL_DMA_IRQHandler+0x534>
 800f640:	4a71      	ldr	r2, [pc, #452]	; (800f808 <HAL_DMA_IRQHandler+0x5f4>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d100      	bne.n	800f648 <HAL_DMA_IRQHandler+0x434>
 800f646:	e082      	b.n	800f74e <HAL_DMA_IRQHandler+0x53a>
 800f648:	4a70      	ldr	r2, [pc, #448]	; (800f80c <HAL_DMA_IRQHandler+0x5f8>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d100      	bne.n	800f650 <HAL_DMA_IRQHandler+0x43c>
 800f64e:	e080      	b.n	800f752 <HAL_DMA_IRQHandler+0x53e>
 800f650:	4a6f      	ldr	r2, [pc, #444]	; (800f810 <HAL_DMA_IRQHandler+0x5fc>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d07f      	beq.n	800f756 <HAL_DMA_IRQHandler+0x542>
 800f656:	4a6f      	ldr	r2, [pc, #444]	; (800f814 <HAL_DMA_IRQHandler+0x600>)
 800f658:	4694      	mov	ip, r2
 800f65a:	4463      	add	r3, ip
 800f65c:	425a      	negs	r2, r3
 800f65e:	4153      	adcs	r3, r2
 800f660:	425b      	negs	r3, r3
 800f662:	4a6f      	ldr	r2, [pc, #444]	; (800f820 <HAL_DMA_IRQHandler+0x60c>)
 800f664:	4013      	ands	r3, r2
 800f666:	2280      	movs	r2, #128	; 0x80
 800f668:	02d2      	lsls	r2, r2, #11
 800f66a:	4694      	mov	ip, r2
 800f66c:	4463      	add	r3, ip
 800f66e:	e018      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f670:	2240      	movs	r2, #64	; 0x40
 800f672:	e7b8      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f674:	2280      	movs	r2, #128	; 0x80
 800f676:	00d2      	lsls	r2, r2, #3
 800f678:	e7b5      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f67a:	2280      	movs	r2, #128	; 0x80
 800f67c:	01d2      	lsls	r2, r2, #7
 800f67e:	e7b2      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f680:	2280      	movs	r2, #128	; 0x80
 800f682:	02d2      	lsls	r2, r2, #11
 800f684:	e7af      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f686:	2280      	movs	r2, #128	; 0x80
 800f688:	03d2      	lsls	r2, r2, #15
 800f68a:	e7ac      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f68c:	2280      	movs	r2, #128	; 0x80
 800f68e:	04d2      	lsls	r2, r2, #19
 800f690:	e7a9      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f692:	2204      	movs	r2, #4
 800f694:	e7a7      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f696:	2240      	movs	r2, #64	; 0x40
 800f698:	e7a5      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
 800f69a:	2280      	movs	r2, #128	; 0x80
 800f69c:	00d2      	lsls	r2, r2, #3
 800f69e:	e7a2      	b.n	800f5e6 <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f6a0:	2304      	movs	r3, #4
 800f6a2:	4a60      	ldr	r2, [pc, #384]	; (800f824 <HAL_DMA_IRQHandler+0x610>)
 800f6a4:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800f6a6:	2321      	movs	r3, #33	; 0x21
 800f6a8:	2211      	movs	r2, #17
 800f6aa:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f6ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 800f6b2:	0020      	movs	r0, r4
 800f6b4:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f6b6:	6821      	ldr	r1, [r4, #0]
 800f6b8:	4b52      	ldr	r3, [pc, #328]	; (800f804 <HAL_DMA_IRQHandler+0x5f0>)
 800f6ba:	4299      	cmp	r1, r3
 800f6bc:	d800      	bhi.n	800f6c0 <HAL_DMA_IRQHandler+0x4ac>
 800f6be:	e19f      	b.n	800fa00 <HAL_DMA_IRQHandler+0x7ec>
 800f6c0:	4b58      	ldr	r3, [pc, #352]	; (800f824 <HAL_DMA_IRQHandler+0x610>)
 800f6c2:	6818      	ldr	r0, [r3, #0]
 800f6c4:	4a49      	ldr	r2, [pc, #292]	; (800f7ec <HAL_DMA_IRQHandler+0x5d8>)
 800f6c6:	4291      	cmp	r1, r2
 800f6c8:	d100      	bne.n	800f6cc <HAL_DMA_IRQHandler+0x4b8>
 800f6ca:	e0af      	b.n	800f82c <HAL_DMA_IRQHandler+0x618>
 800f6cc:	4a48      	ldr	r2, [pc, #288]	; (800f7f0 <HAL_DMA_IRQHandler+0x5dc>)
 800f6ce:	4291      	cmp	r1, r2
 800f6d0:	d100      	bne.n	800f6d4 <HAL_DMA_IRQHandler+0x4c0>
 800f6d2:	e0ee      	b.n	800f8b2 <HAL_DMA_IRQHandler+0x69e>
 800f6d4:	4a47      	ldr	r2, [pc, #284]	; (800f7f4 <HAL_DMA_IRQHandler+0x5e0>)
 800f6d6:	4291      	cmp	r1, r2
 800f6d8:	d100      	bne.n	800f6dc <HAL_DMA_IRQHandler+0x4c8>
 800f6da:	e0ec      	b.n	800f8b6 <HAL_DMA_IRQHandler+0x6a2>
 800f6dc:	4a46      	ldr	r2, [pc, #280]	; (800f7f8 <HAL_DMA_IRQHandler+0x5e4>)
 800f6de:	4291      	cmp	r1, r2
 800f6e0:	d100      	bne.n	800f6e4 <HAL_DMA_IRQHandler+0x4d0>
 800f6e2:	e0eb      	b.n	800f8bc <HAL_DMA_IRQHandler+0x6a8>
 800f6e4:	4b45      	ldr	r3, [pc, #276]	; (800f7fc <HAL_DMA_IRQHandler+0x5e8>)
 800f6e6:	4299      	cmp	r1, r3
 800f6e8:	d100      	bne.n	800f6ec <HAL_DMA_IRQHandler+0x4d8>
 800f6ea:	e0ea      	b.n	800f8c2 <HAL_DMA_IRQHandler+0x6ae>
 800f6ec:	4b44      	ldr	r3, [pc, #272]	; (800f800 <HAL_DMA_IRQHandler+0x5ec>)
 800f6ee:	4299      	cmp	r1, r3
 800f6f0:	d100      	bne.n	800f6f4 <HAL_DMA_IRQHandler+0x4e0>
 800f6f2:	e0e9      	b.n	800f8c8 <HAL_DMA_IRQHandler+0x6b4>
 800f6f4:	4b43      	ldr	r3, [pc, #268]	; (800f804 <HAL_DMA_IRQHandler+0x5f0>)
 800f6f6:	4299      	cmp	r1, r3
 800f6f8:	d100      	bne.n	800f6fc <HAL_DMA_IRQHandler+0x4e8>
 800f6fa:	e0e8      	b.n	800f8ce <HAL_DMA_IRQHandler+0x6ba>
 800f6fc:	4b42      	ldr	r3, [pc, #264]	; (800f808 <HAL_DMA_IRQHandler+0x5f4>)
 800f6fe:	4299      	cmp	r1, r3
 800f700:	d100      	bne.n	800f704 <HAL_DMA_IRQHandler+0x4f0>
 800f702:	e0e7      	b.n	800f8d4 <HAL_DMA_IRQHandler+0x6c0>
 800f704:	4b41      	ldr	r3, [pc, #260]	; (800f80c <HAL_DMA_IRQHandler+0x5f8>)
 800f706:	4299      	cmp	r1, r3
 800f708:	d100      	bne.n	800f70c <HAL_DMA_IRQHandler+0x4f8>
 800f70a:	e0e5      	b.n	800f8d8 <HAL_DMA_IRQHandler+0x6c4>
 800f70c:	4b40      	ldr	r3, [pc, #256]	; (800f810 <HAL_DMA_IRQHandler+0x5fc>)
 800f70e:	4299      	cmp	r1, r3
 800f710:	d100      	bne.n	800f714 <HAL_DMA_IRQHandler+0x500>
 800f712:	e0e3      	b.n	800f8dc <HAL_DMA_IRQHandler+0x6c8>
 800f714:	4b3f      	ldr	r3, [pc, #252]	; (800f814 <HAL_DMA_IRQHandler+0x600>)
 800f716:	18ca      	adds	r2, r1, r3
 800f718:	4253      	negs	r3, r2
 800f71a:	415a      	adcs	r2, r3
 800f71c:	4252      	negs	r2, r2
 800f71e:	4b42      	ldr	r3, [pc, #264]	; (800f828 <HAL_DMA_IRQHandler+0x614>)
 800f720:	4013      	ands	r3, r2
 800f722:	2280      	movs	r2, #128	; 0x80
 800f724:	0292      	lsls	r2, r2, #10
 800f726:	4694      	mov	ip, r2
 800f728:	4463      	add	r3, ip
 800f72a:	e080      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f72c:	2340      	movs	r3, #64	; 0x40
 800f72e:	e7b8      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f730:	2380      	movs	r3, #128	; 0x80
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	e7b5      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f736:	2380      	movs	r3, #128	; 0x80
 800f738:	01db      	lsls	r3, r3, #7
 800f73a:	e7b2      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f73c:	2380      	movs	r3, #128	; 0x80
 800f73e:	02db      	lsls	r3, r3, #11
 800f740:	e7af      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f742:	2380      	movs	r3, #128	; 0x80
 800f744:	03db      	lsls	r3, r3, #15
 800f746:	e7ac      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f748:	2380      	movs	r3, #128	; 0x80
 800f74a:	04db      	lsls	r3, r3, #19
 800f74c:	e7a9      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f74e:	2304      	movs	r3, #4
 800f750:	e7a7      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f752:	2340      	movs	r3, #64	; 0x40
 800f754:	e7a5      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f756:	2380      	movs	r3, #128	; 0x80
 800f758:	00db      	lsls	r3, r3, #3
 800f75a:	e7a2      	b.n	800f6a2 <HAL_DMA_IRQHandler+0x48e>
 800f75c:	4a23      	ldr	r2, [pc, #140]	; (800f7ec <HAL_DMA_IRQHandler+0x5d8>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d027      	beq.n	800f7b2 <HAL_DMA_IRQHandler+0x59e>
 800f762:	4a23      	ldr	r2, [pc, #140]	; (800f7f0 <HAL_DMA_IRQHandler+0x5dc>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d028      	beq.n	800f7ba <HAL_DMA_IRQHandler+0x5a6>
 800f768:	4a22      	ldr	r2, [pc, #136]	; (800f7f4 <HAL_DMA_IRQHandler+0x5e0>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d027      	beq.n	800f7be <HAL_DMA_IRQHandler+0x5aa>
 800f76e:	4a22      	ldr	r2, [pc, #136]	; (800f7f8 <HAL_DMA_IRQHandler+0x5e4>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d027      	beq.n	800f7c4 <HAL_DMA_IRQHandler+0x5b0>
 800f774:	4a21      	ldr	r2, [pc, #132]	; (800f7fc <HAL_DMA_IRQHandler+0x5e8>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d027      	beq.n	800f7ca <HAL_DMA_IRQHandler+0x5b6>
 800f77a:	4a21      	ldr	r2, [pc, #132]	; (800f800 <HAL_DMA_IRQHandler+0x5ec>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d027      	beq.n	800f7d0 <HAL_DMA_IRQHandler+0x5bc>
 800f780:	4a20      	ldr	r2, [pc, #128]	; (800f804 <HAL_DMA_IRQHandler+0x5f0>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d027      	beq.n	800f7d6 <HAL_DMA_IRQHandler+0x5c2>
 800f786:	4a20      	ldr	r2, [pc, #128]	; (800f808 <HAL_DMA_IRQHandler+0x5f4>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d027      	beq.n	800f7dc <HAL_DMA_IRQHandler+0x5c8>
 800f78c:	4a1f      	ldr	r2, [pc, #124]	; (800f80c <HAL_DMA_IRQHandler+0x5f8>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d026      	beq.n	800f7e0 <HAL_DMA_IRQHandler+0x5cc>
 800f792:	4a1f      	ldr	r2, [pc, #124]	; (800f810 <HAL_DMA_IRQHandler+0x5fc>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d025      	beq.n	800f7e4 <HAL_DMA_IRQHandler+0x5d0>
 800f798:	4a1e      	ldr	r2, [pc, #120]	; (800f814 <HAL_DMA_IRQHandler+0x600>)
 800f79a:	4694      	mov	ip, r2
 800f79c:	4463      	add	r3, ip
 800f79e:	425a      	negs	r2, r3
 800f7a0:	4153      	adcs	r3, r2
 800f7a2:	425b      	negs	r3, r3
 800f7a4:	4a1e      	ldr	r2, [pc, #120]	; (800f820 <HAL_DMA_IRQHandler+0x60c>)
 800f7a6:	4013      	ands	r3, r2
 800f7a8:	2280      	movs	r2, #128	; 0x80
 800f7aa:	02d2      	lsls	r2, r2, #11
 800f7ac:	4694      	mov	ip, r2
 800f7ae:	4463      	add	r3, ip
 800f7b0:	e000      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7b2:	2304      	movs	r3, #4
 800f7b4:	4a19      	ldr	r2, [pc, #100]	; (800f81c <HAL_DMA_IRQHandler+0x608>)
 800f7b6:	6053      	str	r3, [r2, #4]
 800f7b8:	e775      	b.n	800f6a6 <HAL_DMA_IRQHandler+0x492>
 800f7ba:	2340      	movs	r3, #64	; 0x40
 800f7bc:	e7fa      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7be:	2380      	movs	r3, #128	; 0x80
 800f7c0:	00db      	lsls	r3, r3, #3
 800f7c2:	e7f7      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7c4:	2380      	movs	r3, #128	; 0x80
 800f7c6:	01db      	lsls	r3, r3, #7
 800f7c8:	e7f4      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7ca:	2380      	movs	r3, #128	; 0x80
 800f7cc:	02db      	lsls	r3, r3, #11
 800f7ce:	e7f1      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7d0:	2380      	movs	r3, #128	; 0x80
 800f7d2:	03db      	lsls	r3, r3, #15
 800f7d4:	e7ee      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7d6:	2380      	movs	r3, #128	; 0x80
 800f7d8:	04db      	lsls	r3, r3, #19
 800f7da:	e7eb      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7dc:	2304      	movs	r3, #4
 800f7de:	e7e9      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7e0:	2340      	movs	r3, #64	; 0x40
 800f7e2:	e7e7      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7e4:	2380      	movs	r3, #128	; 0x80
 800f7e6:	00db      	lsls	r3, r3, #3
 800f7e8:	e7e4      	b.n	800f7b4 <HAL_DMA_IRQHandler+0x5a0>
 800f7ea:	46c0      	nop			; (mov r8, r8)
 800f7ec:	40020008 	.word	0x40020008
 800f7f0:	4002001c 	.word	0x4002001c
 800f7f4:	40020030 	.word	0x40020030
 800f7f8:	40020044 	.word	0x40020044
 800f7fc:	40020058 	.word	0x40020058
 800f800:	4002006c 	.word	0x4002006c
 800f804:	40020080 	.word	0x40020080
 800f808:	40020408 	.word	0x40020408
 800f80c:	4002041c 	.word	0x4002041c
 800f810:	40020430 	.word	0x40020430
 800f814:	bffdfbbc 	.word	0xbffdfbbc
 800f818:	fff88000 	.word	0xfff88000
 800f81c:	40020000 	.word	0x40020000
 800f820:	fffc4000 	.word	0xfffc4000
 800f824:	40020400 	.word	0x40020400
 800f828:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f82c:	2302      	movs	r3, #2
 800f82e:	4003      	ands	r3, r0
 800f830:	1e5a      	subs	r2, r3, #1
 800f832:	4193      	sbcs	r3, r2
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d100      	bne.n	800f83c <HAL_DMA_IRQHandler+0x628>
 800f83a:	e080      	b.n	800f93e <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f83c:	680b      	ldr	r3, [r1, #0]
 800f83e:	079b      	lsls	r3, r3, #30
 800f840:	d57d      	bpl.n	800f93e <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f842:	680b      	ldr	r3, [r1, #0]
 800f844:	069b      	lsls	r3, r3, #26
 800f846:	d403      	bmi.n	800f850 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800f848:	680b      	ldr	r3, [r1, #0]
 800f84a:	2202      	movs	r2, #2
 800f84c:	4393      	bics	r3, r2
 800f84e:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	4a8d      	ldr	r2, [pc, #564]	; (800fa88 <HAL_DMA_IRQHandler+0x874>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d800      	bhi.n	800f85a <HAL_DMA_IRQHandler+0x646>
 800f858:	e08a      	b.n	800f970 <HAL_DMA_IRQHandler+0x75c>
 800f85a:	4a8c      	ldr	r2, [pc, #560]	; (800fa8c <HAL_DMA_IRQHandler+0x878>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d05e      	beq.n	800f91e <HAL_DMA_IRQHandler+0x70a>
 800f860:	4a8b      	ldr	r2, [pc, #556]	; (800fa90 <HAL_DMA_IRQHandler+0x87c>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d100      	bne.n	800f868 <HAL_DMA_IRQHandler+0x654>
 800f866:	e06b      	b.n	800f940 <HAL_DMA_IRQHandler+0x72c>
 800f868:	4a8a      	ldr	r2, [pc, #552]	; (800fa94 <HAL_DMA_IRQHandler+0x880>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d06a      	beq.n	800f944 <HAL_DMA_IRQHandler+0x730>
 800f86e:	4a8a      	ldr	r2, [pc, #552]	; (800fa98 <HAL_DMA_IRQHandler+0x884>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d06a      	beq.n	800f94a <HAL_DMA_IRQHandler+0x736>
 800f874:	4a89      	ldr	r2, [pc, #548]	; (800fa9c <HAL_DMA_IRQHandler+0x888>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d06a      	beq.n	800f950 <HAL_DMA_IRQHandler+0x73c>
 800f87a:	4a89      	ldr	r2, [pc, #548]	; (800faa0 <HAL_DMA_IRQHandler+0x88c>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d06a      	beq.n	800f956 <HAL_DMA_IRQHandler+0x742>
 800f880:	4a81      	ldr	r2, [pc, #516]	; (800fa88 <HAL_DMA_IRQHandler+0x874>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d06a      	beq.n	800f95c <HAL_DMA_IRQHandler+0x748>
 800f886:	4a87      	ldr	r2, [pc, #540]	; (800faa4 <HAL_DMA_IRQHandler+0x890>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d06a      	beq.n	800f962 <HAL_DMA_IRQHandler+0x74e>
 800f88c:	4a86      	ldr	r2, [pc, #536]	; (800faa8 <HAL_DMA_IRQHandler+0x894>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d069      	beq.n	800f966 <HAL_DMA_IRQHandler+0x752>
 800f892:	4a86      	ldr	r2, [pc, #536]	; (800faac <HAL_DMA_IRQHandler+0x898>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d068      	beq.n	800f96a <HAL_DMA_IRQHandler+0x756>
 800f898:	4a85      	ldr	r2, [pc, #532]	; (800fab0 <HAL_DMA_IRQHandler+0x89c>)
 800f89a:	4694      	mov	ip, r2
 800f89c:	4463      	add	r3, ip
 800f89e:	425a      	negs	r2, r3
 800f8a0:	4153      	adcs	r3, r2
 800f8a2:	425b      	negs	r3, r3
 800f8a4:	4a83      	ldr	r2, [pc, #524]	; (800fab4 <HAL_DMA_IRQHandler+0x8a0>)
 800f8a6:	4013      	ands	r3, r2
 800f8a8:	2280      	movs	r2, #128	; 0x80
 800f8aa:	0292      	lsls	r2, r2, #10
 800f8ac:	4694      	mov	ip, r2
 800f8ae:	4463      	add	r3, ip
 800f8b0:	e036      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f8b2:	2320      	movs	r3, #32
 800f8b4:	e7bb      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8b6:	2380      	movs	r3, #128	; 0x80
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	e7b8      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8bc:	2380      	movs	r3, #128	; 0x80
 800f8be:	019b      	lsls	r3, r3, #6
 800f8c0:	e7b5      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8c2:	2380      	movs	r3, #128	; 0x80
 800f8c4:	029b      	lsls	r3, r3, #10
 800f8c6:	e7b2      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8c8:	2380      	movs	r3, #128	; 0x80
 800f8ca:	039b      	lsls	r3, r3, #14
 800f8cc:	e7af      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8ce:	2380      	movs	r3, #128	; 0x80
 800f8d0:	049b      	lsls	r3, r3, #18
 800f8d2:	e7ac      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	e7aa      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8d8:	2320      	movs	r3, #32
 800f8da:	e7a8      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8dc:	2380      	movs	r3, #128	; 0x80
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	e7a5      	b.n	800f82e <HAL_DMA_IRQHandler+0x61a>
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	4003      	ands	r3, r0
 800f8e6:	1e5a      	subs	r2, r3, #1
 800f8e8:	4193      	sbcs	r3, r2
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	e7a3      	b.n	800f836 <HAL_DMA_IRQHandler+0x622>
 800f8ee:	2320      	movs	r3, #32
 800f8f0:	e7f8      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f8f2:	2380      	movs	r3, #128	; 0x80
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	e7f5      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f8f8:	2380      	movs	r3, #128	; 0x80
 800f8fa:	019b      	lsls	r3, r3, #6
 800f8fc:	e7f2      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f8fe:	2380      	movs	r3, #128	; 0x80
 800f900:	029b      	lsls	r3, r3, #10
 800f902:	e7ef      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f904:	2380      	movs	r3, #128	; 0x80
 800f906:	039b      	lsls	r3, r3, #14
 800f908:	e7ec      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f90a:	2380      	movs	r3, #128	; 0x80
 800f90c:	049b      	lsls	r3, r3, #18
 800f90e:	e7e9      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f910:	2302      	movs	r3, #2
 800f912:	e7e7      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f914:	2320      	movs	r3, #32
 800f916:	e7e5      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
 800f918:	2380      	movs	r3, #128	; 0x80
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	e7e2      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f91e:	2302      	movs	r3, #2
 800f920:	4a65      	ldr	r2, [pc, #404]	; (800fab8 <HAL_DMA_IRQHandler+0x8a4>)
 800f922:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f926:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f928:	2321      	movs	r3, #33	; 0x21
 800f92a:	2201      	movs	r2, #1
 800f92c:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f92e:	3b01      	subs	r3, #1
 800f930:	2200      	movs	r2, #0
 800f932:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f936:	2b00      	cmp	r3, #0
 800f938:	d001      	beq.n	800f93e <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 800f93a:	0020      	movs	r0, r4
 800f93c:	4798      	blx	r3
}  
 800f93e:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f940:	2320      	movs	r3, #32
 800f942:	e7ed      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f944:	2380      	movs	r3, #128	; 0x80
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	e7ea      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f94a:	2380      	movs	r3, #128	; 0x80
 800f94c:	019b      	lsls	r3, r3, #6
 800f94e:	e7e7      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f950:	2380      	movs	r3, #128	; 0x80
 800f952:	029b      	lsls	r3, r3, #10
 800f954:	e7e4      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f956:	2380      	movs	r3, #128	; 0x80
 800f958:	039b      	lsls	r3, r3, #14
 800f95a:	e7e1      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f95c:	2380      	movs	r3, #128	; 0x80
 800f95e:	049b      	lsls	r3, r3, #18
 800f960:	e7de      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f962:	2302      	movs	r3, #2
 800f964:	e7dc      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f966:	2320      	movs	r3, #32
 800f968:	e7da      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f96a:	2380      	movs	r3, #128	; 0x80
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	e7d7      	b.n	800f920 <HAL_DMA_IRQHandler+0x70c>
 800f970:	4a46      	ldr	r2, [pc, #280]	; (800fa8c <HAL_DMA_IRQHandler+0x878>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d027      	beq.n	800f9c6 <HAL_DMA_IRQHandler+0x7b2>
 800f976:	4a46      	ldr	r2, [pc, #280]	; (800fa90 <HAL_DMA_IRQHandler+0x87c>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d028      	beq.n	800f9ce <HAL_DMA_IRQHandler+0x7ba>
 800f97c:	4a45      	ldr	r2, [pc, #276]	; (800fa94 <HAL_DMA_IRQHandler+0x880>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d027      	beq.n	800f9d2 <HAL_DMA_IRQHandler+0x7be>
 800f982:	4a45      	ldr	r2, [pc, #276]	; (800fa98 <HAL_DMA_IRQHandler+0x884>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d027      	beq.n	800f9d8 <HAL_DMA_IRQHandler+0x7c4>
 800f988:	4a44      	ldr	r2, [pc, #272]	; (800fa9c <HAL_DMA_IRQHandler+0x888>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d027      	beq.n	800f9de <HAL_DMA_IRQHandler+0x7ca>
 800f98e:	4a44      	ldr	r2, [pc, #272]	; (800faa0 <HAL_DMA_IRQHandler+0x88c>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d027      	beq.n	800f9e4 <HAL_DMA_IRQHandler+0x7d0>
 800f994:	4a3c      	ldr	r2, [pc, #240]	; (800fa88 <HAL_DMA_IRQHandler+0x874>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d027      	beq.n	800f9ea <HAL_DMA_IRQHandler+0x7d6>
 800f99a:	4a42      	ldr	r2, [pc, #264]	; (800faa4 <HAL_DMA_IRQHandler+0x890>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d027      	beq.n	800f9f0 <HAL_DMA_IRQHandler+0x7dc>
 800f9a0:	4a41      	ldr	r2, [pc, #260]	; (800faa8 <HAL_DMA_IRQHandler+0x894>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d026      	beq.n	800f9f4 <HAL_DMA_IRQHandler+0x7e0>
 800f9a6:	4a41      	ldr	r2, [pc, #260]	; (800faac <HAL_DMA_IRQHandler+0x898>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d025      	beq.n	800f9f8 <HAL_DMA_IRQHandler+0x7e4>
 800f9ac:	4a40      	ldr	r2, [pc, #256]	; (800fab0 <HAL_DMA_IRQHandler+0x89c>)
 800f9ae:	4694      	mov	ip, r2
 800f9b0:	4463      	add	r3, ip
 800f9b2:	425a      	negs	r2, r3
 800f9b4:	4153      	adcs	r3, r2
 800f9b6:	425b      	negs	r3, r3
 800f9b8:	4a3e      	ldr	r2, [pc, #248]	; (800fab4 <HAL_DMA_IRQHandler+0x8a0>)
 800f9ba:	4013      	ands	r3, r2
 800f9bc:	2280      	movs	r2, #128	; 0x80
 800f9be:	0292      	lsls	r2, r2, #10
 800f9c0:	4694      	mov	ip, r2
 800f9c2:	4463      	add	r3, ip
 800f9c4:	e000      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9c6:	2302      	movs	r3, #2
 800f9c8:	4a3c      	ldr	r2, [pc, #240]	; (800fabc <HAL_DMA_IRQHandler+0x8a8>)
 800f9ca:	6053      	str	r3, [r2, #4]
 800f9cc:	e7aa      	b.n	800f924 <HAL_DMA_IRQHandler+0x710>
 800f9ce:	2320      	movs	r3, #32
 800f9d0:	e7fa      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9d2:	2380      	movs	r3, #128	; 0x80
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	e7f7      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9d8:	2380      	movs	r3, #128	; 0x80
 800f9da:	019b      	lsls	r3, r3, #6
 800f9dc:	e7f4      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9de:	2380      	movs	r3, #128	; 0x80
 800f9e0:	029b      	lsls	r3, r3, #10
 800f9e2:	e7f1      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9e4:	2380      	movs	r3, #128	; 0x80
 800f9e6:	039b      	lsls	r3, r3, #14
 800f9e8:	e7ee      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9ea:	2380      	movs	r3, #128	; 0x80
 800f9ec:	049b      	lsls	r3, r3, #18
 800f9ee:	e7eb      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e7e9      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9f4:	2320      	movs	r3, #32
 800f9f6:	e7e7      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
 800f9f8:	2380      	movs	r3, #128	; 0x80
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	e7e4      	b.n	800f9c8 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f9fe:	6821      	ldr	r1, [r4, #0]
 800fa00:	4b2e      	ldr	r3, [pc, #184]	; (800fabc <HAL_DMA_IRQHandler+0x8a8>)
 800fa02:	6818      	ldr	r0, [r3, #0]
 800fa04:	4a21      	ldr	r2, [pc, #132]	; (800fa8c <HAL_DMA_IRQHandler+0x878>)
 800fa06:	4291      	cmp	r1, r2
 800fa08:	d100      	bne.n	800fa0c <HAL_DMA_IRQHandler+0x7f8>
 800fa0a:	e76a      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x6ce>
 800fa0c:	4a20      	ldr	r2, [pc, #128]	; (800fa90 <HAL_DMA_IRQHandler+0x87c>)
 800fa0e:	4291      	cmp	r1, r2
 800fa10:	d100      	bne.n	800fa14 <HAL_DMA_IRQHandler+0x800>
 800fa12:	e76c      	b.n	800f8ee <HAL_DMA_IRQHandler+0x6da>
 800fa14:	4a1f      	ldr	r2, [pc, #124]	; (800fa94 <HAL_DMA_IRQHandler+0x880>)
 800fa16:	4291      	cmp	r1, r2
 800fa18:	d100      	bne.n	800fa1c <HAL_DMA_IRQHandler+0x808>
 800fa1a:	e76a      	b.n	800f8f2 <HAL_DMA_IRQHandler+0x6de>
 800fa1c:	4a1e      	ldr	r2, [pc, #120]	; (800fa98 <HAL_DMA_IRQHandler+0x884>)
 800fa1e:	4291      	cmp	r1, r2
 800fa20:	d100      	bne.n	800fa24 <HAL_DMA_IRQHandler+0x810>
 800fa22:	e769      	b.n	800f8f8 <HAL_DMA_IRQHandler+0x6e4>
 800fa24:	4b1d      	ldr	r3, [pc, #116]	; (800fa9c <HAL_DMA_IRQHandler+0x888>)
 800fa26:	4299      	cmp	r1, r3
 800fa28:	d100      	bne.n	800fa2c <HAL_DMA_IRQHandler+0x818>
 800fa2a:	e768      	b.n	800f8fe <HAL_DMA_IRQHandler+0x6ea>
 800fa2c:	4b1c      	ldr	r3, [pc, #112]	; (800faa0 <HAL_DMA_IRQHandler+0x88c>)
 800fa2e:	4299      	cmp	r1, r3
 800fa30:	d100      	bne.n	800fa34 <HAL_DMA_IRQHandler+0x820>
 800fa32:	e767      	b.n	800f904 <HAL_DMA_IRQHandler+0x6f0>
 800fa34:	4b14      	ldr	r3, [pc, #80]	; (800fa88 <HAL_DMA_IRQHandler+0x874>)
 800fa36:	4299      	cmp	r1, r3
 800fa38:	d100      	bne.n	800fa3c <HAL_DMA_IRQHandler+0x828>
 800fa3a:	e766      	b.n	800f90a <HAL_DMA_IRQHandler+0x6f6>
 800fa3c:	4b19      	ldr	r3, [pc, #100]	; (800faa4 <HAL_DMA_IRQHandler+0x890>)
 800fa3e:	4299      	cmp	r1, r3
 800fa40:	d100      	bne.n	800fa44 <HAL_DMA_IRQHandler+0x830>
 800fa42:	e765      	b.n	800f910 <HAL_DMA_IRQHandler+0x6fc>
 800fa44:	4b18      	ldr	r3, [pc, #96]	; (800faa8 <HAL_DMA_IRQHandler+0x894>)
 800fa46:	4299      	cmp	r1, r3
 800fa48:	d100      	bne.n	800fa4c <HAL_DMA_IRQHandler+0x838>
 800fa4a:	e763      	b.n	800f914 <HAL_DMA_IRQHandler+0x700>
 800fa4c:	4b17      	ldr	r3, [pc, #92]	; (800faac <HAL_DMA_IRQHandler+0x898>)
 800fa4e:	4299      	cmp	r1, r3
 800fa50:	d100      	bne.n	800fa54 <HAL_DMA_IRQHandler+0x840>
 800fa52:	e761      	b.n	800f918 <HAL_DMA_IRQHandler+0x704>
 800fa54:	4b16      	ldr	r3, [pc, #88]	; (800fab0 <HAL_DMA_IRQHandler+0x89c>)
 800fa56:	18ca      	adds	r2, r1, r3
 800fa58:	4253      	negs	r3, r2
 800fa5a:	415a      	adcs	r2, r3
 800fa5c:	4252      	negs	r2, r2
 800fa5e:	4b15      	ldr	r3, [pc, #84]	; (800fab4 <HAL_DMA_IRQHandler+0x8a0>)
 800fa60:	4013      	ands	r3, r2
 800fa62:	2280      	movs	r2, #128	; 0x80
 800fa64:	0292      	lsls	r2, r2, #10
 800fa66:	4694      	mov	ip, r2
 800fa68:	4463      	add	r3, ip
 800fa6a:	e73b      	b.n	800f8e4 <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	0712      	lsls	r2, r2, #28
 800fa70:	d500      	bpl.n	800fa74 <HAL_DMA_IRQHandler+0x860>
 800fa72:	e4d2      	b.n	800f41a <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	e482      	b.n	800f37e <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	0712      	lsls	r2, r2, #28
 800fa7c:	d500      	bpl.n	800fa80 <HAL_DMA_IRQHandler+0x86c>
 800fa7e:	e4cc      	b.n	800f41a <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	f7ff fbfe 	bl	800f282 <HAL_DMA_IRQHandler+0x6e>
 800fa86:	46c0      	nop			; (mov r8, r8)
 800fa88:	40020080 	.word	0x40020080
 800fa8c:	40020008 	.word	0x40020008
 800fa90:	4002001c 	.word	0x4002001c
 800fa94:	40020030 	.word	0x40020030
 800fa98:	40020044 	.word	0x40020044
 800fa9c:	40020058 	.word	0x40020058
 800faa0:	4002006c 	.word	0x4002006c
 800faa4:	40020408 	.word	0x40020408
 800faa8:	4002041c 	.word	0x4002041c
 800faac:	40020430 	.word	0x40020430
 800fab0:	bffdfbbc 	.word	0xbffdfbbc
 800fab4:	fffe2000 	.word	0xfffe2000
 800fab8:	40020400 	.word	0x40020400
 800fabc:	40020000 	.word	0x40020000

0800fac0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fac0:	4b0a      	ldr	r3, [pc, #40]	; (800faec <FLASH_SetErrorCode+0x2c>)
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	06db      	lsls	r3, r3, #27
 800fac6:	d504      	bpl.n	800fad2 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fac8:	4a09      	ldr	r2, [pc, #36]	; (800faf0 <FLASH_SetErrorCode+0x30>)
 800faca:	69d3      	ldr	r3, [r2, #28]
 800facc:	2102      	movs	r1, #2
 800face:	430b      	orrs	r3, r1
 800fad0:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800fad2:	4b06      	ldr	r3, [pc, #24]	; (800faec <FLASH_SetErrorCode+0x2c>)
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	075b      	lsls	r3, r3, #29
 800fad8:	d504      	bpl.n	800fae4 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800fada:	4a05      	ldr	r2, [pc, #20]	; (800faf0 <FLASH_SetErrorCode+0x30>)
 800fadc:	69d3      	ldr	r3, [r2, #28]
 800fade:	2101      	movs	r1, #1
 800fae0:	430b      	orrs	r3, r1
 800fae2:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800fae4:	4b01      	ldr	r3, [pc, #4]	; (800faec <FLASH_SetErrorCode+0x2c>)
 800fae6:	2214      	movs	r2, #20
 800fae8:	60da      	str	r2, [r3, #12]
}  
 800faea:	4770      	bx	lr
 800faec:	40022000 	.word	0x40022000
 800faf0:	20006e38 	.word	0x20006e38

0800faf4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800faf4:	4b06      	ldr	r3, [pc, #24]	; (800fb10 <HAL_FLASH_Unlock+0x1c>)
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	061b      	lsls	r3, r3, #24
 800fafa:	d506      	bpl.n	800fb0a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fafc:	4b04      	ldr	r3, [pc, #16]	; (800fb10 <HAL_FLASH_Unlock+0x1c>)
 800fafe:	4a05      	ldr	r2, [pc, #20]	; (800fb14 <HAL_FLASH_Unlock+0x20>)
 800fb00:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fb02:	4a05      	ldr	r2, [pc, #20]	; (800fb18 <HAL_FLASH_Unlock+0x24>)
 800fb04:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 800fb06:	2000      	movs	r0, #0
}
 800fb08:	4770      	bx	lr
    return HAL_ERROR;
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	e7fc      	b.n	800fb08 <HAL_FLASH_Unlock+0x14>
 800fb0e:	46c0      	nop			; (mov r8, r8)
 800fb10:	40022000 	.word	0x40022000
 800fb14:	45670123 	.word	0x45670123
 800fb18:	cdef89ab 	.word	0xcdef89ab

0800fb1c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800fb1c:	4a03      	ldr	r2, [pc, #12]	; (800fb2c <HAL_FLASH_Lock+0x10>)
 800fb1e:	6913      	ldr	r3, [r2, #16]
 800fb20:	2180      	movs	r1, #128	; 0x80
 800fb22:	430b      	orrs	r3, r1
 800fb24:	6113      	str	r3, [r2, #16]
}
 800fb26:	2000      	movs	r0, #0
 800fb28:	4770      	bx	lr
 800fb2a:	46c0      	nop			; (mov r8, r8)
 800fb2c:	40022000 	.word	0x40022000

0800fb30 <FLASH_WaitForLastOperation>:
{
 800fb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb32:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800fb34:	f7ff f91e 	bl	800ed74 <HAL_GetTick>
 800fb38:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fb3a:	4e13      	ldr	r6, [pc, #76]	; (800fb88 <FLASH_WaitForLastOperation+0x58>)
 800fb3c:	2501      	movs	r5, #1
 800fb3e:	68f3      	ldr	r3, [r6, #12]
 800fb40:	421d      	tst	r5, r3
 800fb42:	d00a      	beq.n	800fb5a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800fb44:	1c63      	adds	r3, r4, #1
 800fb46:	d0fa      	beq.n	800fb3e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fb48:	2c00      	cmp	r4, #0
 800fb4a:	d01b      	beq.n	800fb84 <FLASH_WaitForLastOperation+0x54>
 800fb4c:	f7ff f912 	bl	800ed74 <HAL_GetTick>
 800fb50:	1bc0      	subs	r0, r0, r7
 800fb52:	42a0      	cmp	r0, r4
 800fb54:	d9f3      	bls.n	800fb3e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 800fb56:	2003      	movs	r0, #3
 800fb58:	e00f      	b.n	800fb7a <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fb5a:	4b0b      	ldr	r3, [pc, #44]	; (800fb88 <FLASH_WaitForLastOperation+0x58>)
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	069b      	lsls	r3, r3, #26
 800fb60:	d502      	bpl.n	800fb68 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fb62:	4b09      	ldr	r3, [pc, #36]	; (800fb88 <FLASH_WaitForLastOperation+0x58>)
 800fb64:	2220      	movs	r2, #32
 800fb66:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800fb68:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <FLASH_WaitForLastOperation+0x58>)
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	06db      	lsls	r3, r3, #27
 800fb6e:	d405      	bmi.n	800fb7c <FLASH_WaitForLastOperation+0x4c>
 800fb70:	4b05      	ldr	r3, [pc, #20]	; (800fb88 <FLASH_WaitForLastOperation+0x58>)
 800fb72:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 800fb74:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800fb76:	075b      	lsls	r3, r3, #29
 800fb78:	d400      	bmi.n	800fb7c <FLASH_WaitForLastOperation+0x4c>
}
 800fb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 800fb7c:	f7ff ffa0 	bl	800fac0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fb80:	2001      	movs	r0, #1
 800fb82:	e7fa      	b.n	800fb7a <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 800fb84:	2003      	movs	r0, #3
 800fb86:	e7f8      	b.n	800fb7a <FLASH_WaitForLastOperation+0x4a>
 800fb88:	40022000 	.word	0x40022000

0800fb8c <HAL_FLASH_Program>:
{
 800fb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8e:	46de      	mov	lr, fp
 800fb90:	4657      	mov	r7, sl
 800fb92:	464e      	mov	r6, r9
 800fb94:	4645      	mov	r5, r8
 800fb96:	b5e0      	push	{r5, r6, r7, lr}
 800fb98:	b083      	sub	sp, #12
 800fb9a:	0004      	movs	r4, r0
 800fb9c:	000e      	movs	r6, r1
 800fb9e:	9201      	str	r2, [sp, #4]
 800fba0:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800fba2:	4b2a      	ldr	r3, [pc, #168]	; (800fc4c <HAL_FLASH_Program+0xc0>)
 800fba4:	7e1b      	ldrb	r3, [r3, #24]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d04e      	beq.n	800fc48 <HAL_FLASH_Program+0xbc>
 800fbaa:	4b28      	ldr	r3, [pc, #160]	; (800fc4c <HAL_FLASH_Program+0xc0>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fbb0:	4827      	ldr	r0, [pc, #156]	; (800fc50 <HAL_FLASH_Program+0xc4>)
 800fbb2:	f7ff ffbd 	bl	800fb30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d13c      	bne.n	800fc34 <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800fbba:	2c01      	cmp	r4, #1
 800fbbc:	d010      	beq.n	800fbe0 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 800fbbe:	3c02      	subs	r4, #2
 800fbc0:	4260      	negs	r0, r4
 800fbc2:	4144      	adcs	r4, r0
 800fbc4:	4264      	negs	r4, r4
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	439c      	bics	r4, r3
 800fbca:	46a0      	mov	r8, r4
 800fbcc:	3303      	adds	r3, #3
 800fbce:	469c      	mov	ip, r3
 800fbd0:	44e0      	add	r8, ip
 800fbd2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fbd4:	4b1d      	ldr	r3, [pc, #116]	; (800fc4c <HAL_FLASH_Program+0xc0>)
 800fbd6:	469b      	mov	fp, r3
 800fbd8:	2300      	movs	r3, #0
 800fbda:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800fbdc:	4c1d      	ldr	r4, [pc, #116]	; (800fc54 <HAL_FLASH_Program+0xc8>)
 800fbde:	e021      	b.n	800fc24 <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	4698      	mov	r8, r3
 800fbe4:	e7f5      	b.n	800fbd2 <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800fbe6:	2220      	movs	r2, #32
 800fbe8:	1ad2      	subs	r2, r2, r3
 800fbea:	4649      	mov	r1, r9
 800fbec:	4091      	lsls	r1, r2
 800fbee:	000a      	movs	r2, r1
 800fbf0:	9901      	ldr	r1, [sp, #4]
 800fbf2:	40d9      	lsrs	r1, r3
 800fbf4:	000b      	movs	r3, r1
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fbfa:	465a      	mov	r2, fp
 800fbfc:	4651      	mov	r1, sl
 800fbfe:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800fc00:	6922      	ldr	r2, [r4, #16]
 800fc02:	2701      	movs	r7, #1
 800fc04:	433a      	orrs	r2, r7
 800fc06:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 800fc08:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc0a:	4811      	ldr	r0, [pc, #68]	; (800fc50 <HAL_FLASH_Program+0xc4>)
 800fc0c:	f7ff ff90 	bl	800fb30 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	43bb      	bics	r3, r7
 800fc14:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d10c      	bne.n	800fc34 <HAL_FLASH_Program+0xa8>
 800fc1a:	3501      	adds	r5, #1
 800fc1c:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 800fc1e:	b2eb      	uxtb	r3, r5
 800fc20:	4598      	cmp	r8, r3
 800fc22:	d907      	bls.n	800fc34 <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800fc24:	012b      	lsls	r3, r5, #4
 800fc26:	2220      	movs	r2, #32
 800fc28:	4252      	negs	r2, r2
 800fc2a:	189a      	adds	r2, r3, r2
 800fc2c:	d4db      	bmi.n	800fbe6 <HAL_FLASH_Program+0x5a>
 800fc2e:	464b      	mov	r3, r9
 800fc30:	40d3      	lsrs	r3, r2
 800fc32:	e7e1      	b.n	800fbf8 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 800fc34:	4b05      	ldr	r3, [pc, #20]	; (800fc4c <HAL_FLASH_Program+0xc0>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	761a      	strb	r2, [r3, #24]
}
 800fc3a:	b003      	add	sp, #12
 800fc3c:	bcf0      	pop	{r4, r5, r6, r7}
 800fc3e:	46bb      	mov	fp, r7
 800fc40:	46b2      	mov	sl, r6
 800fc42:	46a9      	mov	r9, r5
 800fc44:	46a0      	mov	r8, r4
 800fc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800fc48:	2002      	movs	r0, #2
 800fc4a:	e7f6      	b.n	800fc3a <HAL_FLASH_Program+0xae>
 800fc4c:	20006e38 	.word	0x20006e38
 800fc50:	0000c350 	.word	0x0000c350
 800fc54:	40022000 	.word	0x40022000

0800fc58 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fc58:	4b06      	ldr	r3, [pc, #24]	; (800fc74 <FLASH_MassErase+0x1c>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800fc5e:	4b06      	ldr	r3, [pc, #24]	; (800fc78 <FLASH_MassErase+0x20>)
 800fc60:	691a      	ldr	r2, [r3, #16]
 800fc62:	2104      	movs	r1, #4
 800fc64:	430a      	orrs	r2, r1
 800fc66:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800fc68:	691a      	ldr	r2, [r3, #16]
 800fc6a:	313c      	adds	r1, #60	; 0x3c
 800fc6c:	430a      	orrs	r2, r1
 800fc6e:	611a      	str	r2, [r3, #16]
}
 800fc70:	4770      	bx	lr
 800fc72:	46c0      	nop			; (mov r8, r8)
 800fc74:	20006e38 	.word	0x20006e38
 800fc78:	40022000 	.word	0x40022000

0800fc7c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fc7c:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <FLASH_PageErase+0x1c>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800fc82:	4b06      	ldr	r3, [pc, #24]	; (800fc9c <FLASH_PageErase+0x20>)
 800fc84:	691a      	ldr	r2, [r3, #16]
 800fc86:	2102      	movs	r1, #2
 800fc88:	430a      	orrs	r2, r1
 800fc8a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800fc8c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800fc8e:	691a      	ldr	r2, [r3, #16]
 800fc90:	313e      	adds	r1, #62	; 0x3e
 800fc92:	430a      	orrs	r2, r1
 800fc94:	611a      	str	r2, [r3, #16]
}
 800fc96:	4770      	bx	lr
 800fc98:	20006e38 	.word	0x20006e38
 800fc9c:	40022000 	.word	0x40022000

0800fca0 <HAL_FLASHEx_Erase>:
{
 800fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca2:	46ce      	mov	lr, r9
 800fca4:	4647      	mov	r7, r8
 800fca6:	b580      	push	{r7, lr}
 800fca8:	0005      	movs	r5, r0
 800fcaa:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800fcac:	4b2a      	ldr	r3, [pc, #168]	; (800fd58 <HAL_FLASHEx_Erase+0xb8>)
 800fcae:	7e1b      	ldrb	r3, [r3, #24]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d04e      	beq.n	800fd52 <HAL_FLASHEx_Erase+0xb2>
 800fcb4:	4b28      	ldr	r3, [pc, #160]	; (800fd58 <HAL_FLASHEx_Erase+0xb8>)
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fcba:	6803      	ldr	r3, [r0, #0]
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d02a      	beq.n	800fd16 <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fcc0:	4826      	ldr	r0, [pc, #152]	; (800fd5c <HAL_FLASHEx_Erase+0xbc>)
 800fcc2:	f7ff ff35 	bl	800fb30 <FLASH_WaitForLastOperation>
 800fcc6:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800fcc8:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d12a      	bne.n	800fd24 <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	4642      	mov	r2, r8
 800fcd2:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 800fcd4:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800fcd6:	68ab      	ldr	r3, [r5, #8]
 800fcd8:	02db      	lsls	r3, r3, #11
 800fcda:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 800fcdc:	429c      	cmp	r4, r3
 800fcde:	d236      	bcs.n	800fd4e <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fce0:	4b1e      	ldr	r3, [pc, #120]	; (800fd5c <HAL_FLASHEx_Erase+0xbc>)
 800fce2:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800fce4:	4e1e      	ldr	r6, [pc, #120]	; (800fd60 <HAL_FLASHEx_Erase+0xc0>)
 800fce6:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 800fce8:	0020      	movs	r0, r4
 800fcea:	f7ff ffc7 	bl	800fc7c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fcee:	4648      	mov	r0, r9
 800fcf0:	f7ff ff1e 	bl	800fb30 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800fcf4:	6933      	ldr	r3, [r6, #16]
 800fcf6:	43bb      	bics	r3, r7
 800fcf8:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d124      	bne.n	800fd48 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 800fcfe:	2380      	movs	r3, #128	; 0x80
 800fd00:	011b      	lsls	r3, r3, #4
 800fd02:	469c      	mov	ip, r3
 800fd04:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800fd06:	68ab      	ldr	r3, [r5, #8]
 800fd08:	02db      	lsls	r3, r3, #11
 800fd0a:	686a      	ldr	r2, [r5, #4]
 800fd0c:	4694      	mov	ip, r2
 800fd0e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800fd10:	42a3      	cmp	r3, r4
 800fd12:	d8e9      	bhi.n	800fce8 <HAL_FLASHEx_Erase+0x48>
 800fd14:	e006      	b.n	800fd24 <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fd16:	4811      	ldr	r0, [pc, #68]	; (800fd5c <HAL_FLASHEx_Erase+0xbc>)
 800fd18:	f7ff ff0a 	bl	800fb30 <FLASH_WaitForLastOperation>
 800fd1c:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800fd1e:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d006      	beq.n	800fd32 <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 800fd24:	4b0c      	ldr	r3, [pc, #48]	; (800fd58 <HAL_FLASHEx_Erase+0xb8>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	761a      	strb	r2, [r3, #24]
}
 800fd2a:	bcc0      	pop	{r6, r7}
 800fd2c:	46b9      	mov	r9, r7
 800fd2e:	46b0      	mov	r8, r6
 800fd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 800fd32:	f7ff ff91 	bl	800fc58 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fd36:	4809      	ldr	r0, [pc, #36]	; (800fd5c <HAL_FLASHEx_Erase+0xbc>)
 800fd38:	f7ff fefa 	bl	800fb30 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800fd3c:	4a08      	ldr	r2, [pc, #32]	; (800fd60 <HAL_FLASHEx_Erase+0xc0>)
 800fd3e:	6913      	ldr	r3, [r2, #16]
 800fd40:	2104      	movs	r1, #4
 800fd42:	438b      	bics	r3, r1
 800fd44:	6113      	str	r3, [r2, #16]
 800fd46:	e7ed      	b.n	800fd24 <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 800fd48:	4643      	mov	r3, r8
 800fd4a:	601c      	str	r4, [r3, #0]
            break;
 800fd4c:	e7ea      	b.n	800fd24 <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 800fd4e:	2001      	movs	r0, #1
 800fd50:	e7e8      	b.n	800fd24 <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 800fd52:	2002      	movs	r0, #2
 800fd54:	e7e9      	b.n	800fd2a <HAL_FLASHEx_Erase+0x8a>
 800fd56:	46c0      	nop			; (mov r8, r8)
 800fd58:	20006e38 	.word	0x20006e38
 800fd5c:	0000c350 	.word	0x0000c350
 800fd60:	40022000 	.word	0x40022000

0800fd64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800fd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd66:	46de      	mov	lr, fp
 800fd68:	4657      	mov	r7, sl
 800fd6a:	464e      	mov	r6, r9
 800fd6c:	4645      	mov	r5, r8
 800fd6e:	b5e0      	push	{r5, r6, r7, lr}
 800fd70:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 800fd72:	680a      	ldr	r2, [r1, #0]
 800fd74:	2a00      	cmp	r2, #0
 800fd76:	d100      	bne.n	800fd7a <HAL_GPIO_Init+0x16>
 800fd78:	e0c9      	b.n	800ff0e <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 800fd7a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800fd7c:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800fd7e:	2510      	movs	r5, #16
 800fd80:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800fd82:	2580      	movs	r5, #128	; 0x80
 800fd84:	056d      	lsls	r5, r5, #21
 800fd86:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fd88:	4d64      	ldr	r5, [pc, #400]	; (800ff1c <HAL_GPIO_Init+0x1b8>)
 800fd8a:	1945      	adds	r5, r0, r5
 800fd8c:	1e6e      	subs	r6, r5, #1
 800fd8e:	41b5      	sbcs	r5, r6
 800fd90:	3504      	adds	r5, #4
 800fd92:	46a9      	mov	r9, r5
 800fd94:	e044      	b.n	800fe20 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 800fd96:	08da      	lsrs	r2, r3, #3
 800fd98:	0092      	lsls	r2, r2, #2
 800fd9a:	1882      	adds	r2, r0, r2
 800fd9c:	9201      	str	r2, [sp, #4]
 800fd9e:	6a15      	ldr	r5, [r2, #32]
 800fda0:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 800fda2:	2507      	movs	r5, #7
 800fda4:	401d      	ands	r5, r3
 800fda6:	00ad      	lsls	r5, r5, #2
 800fda8:	270f      	movs	r7, #15
 800fdaa:	40af      	lsls	r7, r5
 800fdac:	46bb      	mov	fp, r7
 800fdae:	4657      	mov	r7, sl
 800fdb0:	465a      	mov	r2, fp
 800fdb2:	4397      	bics	r7, r2
 800fdb4:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 800fdb6:	690f      	ldr	r7, [r1, #16]
 800fdb8:	40af      	lsls	r7, r5
 800fdba:	003d      	movs	r5, r7
 800fdbc:	4652      	mov	r2, sl
 800fdbe:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 800fdc0:	9a01      	ldr	r2, [sp, #4]
 800fdc2:	6215      	str	r5, [r2, #32]
 800fdc4:	e037      	b.n	800fe36 <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fdc6:	2500      	movs	r5, #0
 800fdc8:	465f      	mov	r7, fp
 800fdca:	40bd      	lsls	r5, r7
 800fdcc:	4657      	mov	r7, sl
 800fdce:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800fdd0:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fdd2:	4a53      	ldr	r2, [pc, #332]	; (800ff20 <HAL_GPIO_Init+0x1bc>)
 800fdd4:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800fdd6:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fdd8:	684f      	ldr	r7, [r1, #4]
 800fdda:	03ff      	lsls	r7, r7, #15
 800fddc:	d500      	bpl.n	800fde0 <HAL_GPIO_Init+0x7c>
 800fdde:	e08e      	b.n	800fefe <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800fde0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 800fde2:	4f4f      	ldr	r7, [pc, #316]	; (800ff20 <HAL_GPIO_Init+0x1bc>)
 800fde4:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 800fde6:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fde8:	684f      	ldr	r7, [r1, #4]
 800fdea:	03bf      	lsls	r7, r7, #14
 800fdec:	d500      	bpl.n	800fdf0 <HAL_GPIO_Init+0x8c>
 800fdee:	e088      	b.n	800ff02 <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800fdf0:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800fdf2:	4f4b      	ldr	r7, [pc, #300]	; (800ff20 <HAL_GPIO_Init+0x1bc>)
 800fdf4:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fdf6:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fdf8:	684f      	ldr	r7, [r1, #4]
 800fdfa:	02ff      	lsls	r7, r7, #11
 800fdfc:	d500      	bpl.n	800fe00 <HAL_GPIO_Init+0x9c>
 800fdfe:	e082      	b.n	800ff06 <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800fe00:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 800fe02:	4f47      	ldr	r7, [pc, #284]	; (800ff20 <HAL_GPIO_Init+0x1bc>)
 800fe04:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 800fe06:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fe08:	684f      	ldr	r7, [r1, #4]
 800fe0a:	02bf      	lsls	r7, r7, #10
 800fe0c:	d47d      	bmi.n	800ff0a <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800fe0e:	402a      	ands	r2, r5
 800fe10:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 800fe12:	4a43      	ldr	r2, [pc, #268]	; (800ff20 <HAL_GPIO_Init+0x1bc>)
 800fe14:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 800fe16:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 800fe18:	680a      	ldr	r2, [r1, #0]
 800fe1a:	0015      	movs	r5, r2
 800fe1c:	40dd      	lsrs	r5, r3
 800fe1e:	d076      	beq.n	800ff0e <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800fe20:	0025      	movs	r5, r4
 800fe22:	409d      	lsls	r5, r3
 800fe24:	0016      	movs	r6, r2
 800fe26:	402e      	ands	r6, r5
    if(iocurrent)
 800fe28:	422a      	tst	r2, r5
 800fe2a:	d0f4      	beq.n	800fe16 <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800fe2c:	684a      	ldr	r2, [r1, #4]
 800fe2e:	4665      	mov	r5, ip
 800fe30:	43aa      	bics	r2, r5
 800fe32:	2a02      	cmp	r2, #2
 800fe34:	d0af      	beq.n	800fd96 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800fe36:	6802      	ldr	r2, [r0, #0]
 800fe38:	4693      	mov	fp, r2
 800fe3a:	005d      	lsls	r5, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800fe3c:	2203      	movs	r2, #3
 800fe3e:	40aa      	lsls	r2, r5
 800fe40:	43d7      	mvns	r7, r2
 800fe42:	46ba      	mov	sl, r7
 800fe44:	465f      	mov	r7, fp
 800fe46:	4397      	bics	r7, r2
 800fe48:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800fe4a:	684a      	ldr	r2, [r1, #4]
 800fe4c:	2703      	movs	r7, #3
 800fe4e:	403a      	ands	r2, r7
 800fe50:	40aa      	lsls	r2, r5
 800fe52:	465f      	mov	r7, fp
 800fe54:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800fe56:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fe58:	684a      	ldr	r2, [r1, #4]
 800fe5a:	4667      	mov	r7, ip
 800fe5c:	43ba      	bics	r2, r7
 800fe5e:	3a01      	subs	r2, #1
 800fe60:	2a01      	cmp	r2, #1
 800fe62:	d812      	bhi.n	800fe8a <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 800fe64:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800fe66:	4657      	mov	r7, sl
 800fe68:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800fe6a:	68ca      	ldr	r2, [r1, #12]
 800fe6c:	40aa      	lsls	r2, r5
 800fe6e:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 800fe70:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800fe72:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800fe74:	0027      	movs	r7, r4
 800fe76:	409f      	lsls	r7, r3
 800fe78:	43ba      	bics	r2, r7
 800fe7a:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800fe7c:	684a      	ldr	r2, [r1, #4]
 800fe7e:	0912      	lsrs	r2, r2, #4
 800fe80:	4022      	ands	r2, r4
 800fe82:	409a      	lsls	r2, r3
 800fe84:	465f      	mov	r7, fp
 800fe86:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 800fe88:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800fe8a:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800fe8c:	4657      	mov	r7, sl
 800fe8e:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800fe90:	688a      	ldr	r2, [r1, #8]
 800fe92:	40aa      	lsls	r2, r5
 800fe94:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 800fe96:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800fe98:	684a      	ldr	r2, [r1, #4]
 800fe9a:	4645      	mov	r5, r8
 800fe9c:	422a      	tst	r2, r5
 800fe9e:	d0ba      	beq.n	800fe16 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fea0:	4a20      	ldr	r2, [pc, #128]	; (800ff24 <HAL_GPIO_Init+0x1c0>)
 800fea2:	6995      	ldr	r5, [r2, #24]
 800fea4:	4325      	orrs	r5, r4
 800fea6:	6195      	str	r5, [r2, #24]
 800fea8:	6992      	ldr	r2, [r2, #24]
 800feaa:	4022      	ands	r2, r4
 800feac:	9203      	str	r2, [sp, #12]
 800feae:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800feb0:	089a      	lsrs	r2, r3, #2
 800feb2:	0092      	lsls	r2, r2, #2
 800feb4:	4d1c      	ldr	r5, [pc, #112]	; (800ff28 <HAL_GPIO_Init+0x1c4>)
 800feb6:	46aa      	mov	sl, r5
 800feb8:	4452      	add	r2, sl
 800feba:	6895      	ldr	r5, [r2, #8]
 800febc:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800febe:	2503      	movs	r5, #3
 800fec0:	401d      	ands	r5, r3
 800fec2:	00ad      	lsls	r5, r5, #2
 800fec4:	46ab      	mov	fp, r5
 800fec6:	250f      	movs	r5, #15
 800fec8:	465f      	mov	r7, fp
 800feca:	40bd      	lsls	r5, r7
 800fecc:	4657      	mov	r7, sl
 800fece:	43af      	bics	r7, r5
 800fed0:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fed2:	2590      	movs	r5, #144	; 0x90
 800fed4:	05ed      	lsls	r5, r5, #23
 800fed6:	42a8      	cmp	r0, r5
 800fed8:	d100      	bne.n	800fedc <HAL_GPIO_Init+0x178>
 800feda:	e774      	b.n	800fdc6 <HAL_GPIO_Init+0x62>
 800fedc:	4d13      	ldr	r5, [pc, #76]	; (800ff2c <HAL_GPIO_Init+0x1c8>)
 800fede:	42a8      	cmp	r0, r5
 800fee0:	d007      	beq.n	800fef2 <HAL_GPIO_Init+0x18e>
 800fee2:	4d13      	ldr	r5, [pc, #76]	; (800ff30 <HAL_GPIO_Init+0x1cc>)
 800fee4:	42a8      	cmp	r0, r5
 800fee6:	d006      	beq.n	800fef6 <HAL_GPIO_Init+0x192>
 800fee8:	4d12      	ldr	r5, [pc, #72]	; (800ff34 <HAL_GPIO_Init+0x1d0>)
 800feea:	42a8      	cmp	r0, r5
 800feec:	d005      	beq.n	800fefa <HAL_GPIO_Init+0x196>
 800feee:	464d      	mov	r5, r9
 800fef0:	e76a      	b.n	800fdc8 <HAL_GPIO_Init+0x64>
 800fef2:	0025      	movs	r5, r4
 800fef4:	e768      	b.n	800fdc8 <HAL_GPIO_Init+0x64>
 800fef6:	2502      	movs	r5, #2
 800fef8:	e766      	b.n	800fdc8 <HAL_GPIO_Init+0x64>
 800fefa:	2503      	movs	r5, #3
 800fefc:	e764      	b.n	800fdc8 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 800fefe:	4332      	orrs	r2, r6
 800ff00:	e76f      	b.n	800fde2 <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 800ff02:	4332      	orrs	r2, r6
 800ff04:	e775      	b.n	800fdf2 <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 800ff06:	4332      	orrs	r2, r6
 800ff08:	e77b      	b.n	800fe02 <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 800ff0a:	4316      	orrs	r6, r2
 800ff0c:	e781      	b.n	800fe12 <HAL_GPIO_Init+0xae>
  } 
}
 800ff0e:	b005      	add	sp, #20
 800ff10:	bcf0      	pop	{r4, r5, r6, r7}
 800ff12:	46bb      	mov	fp, r7
 800ff14:	46b2      	mov	sl, r6
 800ff16:	46a9      	mov	r9, r5
 800ff18:	46a0      	mov	r8, r4
 800ff1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff1c:	b7fff000 	.word	0xb7fff000
 800ff20:	40010400 	.word	0x40010400
 800ff24:	40021000 	.word	0x40021000
 800ff28:	40010000 	.word	0x40010000
 800ff2c:	48000400 	.word	0x48000400
 800ff30:	48000800 	.word	0x48000800
 800ff34:	48000c00 	.word	0x48000c00

0800ff38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ff38:	6900      	ldr	r0, [r0, #16]
 800ff3a:	4008      	ands	r0, r1
 800ff3c:	1e41      	subs	r1, r0, #1
 800ff3e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800ff40:	b2c0      	uxtb	r0, r0
  }
 800ff42:	4770      	bx	lr

0800ff44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ff44:	2a00      	cmp	r2, #0
 800ff46:	d001      	beq.n	800ff4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ff48:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ff4a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ff4c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800ff4e:	e7fc      	b.n	800ff4a <HAL_GPIO_WritePin+0x6>

0800ff50 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800ff50:	6943      	ldr	r3, [r0, #20]
 800ff52:	4059      	eors	r1, r3
 800ff54:	6141      	str	r1, [r0, #20]
}
 800ff56:	4770      	bx	lr

0800ff58 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 800ff58:	4770      	bx	lr
	...

0800ff5c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800ff5c:	4a03      	ldr	r2, [pc, #12]	; (800ff6c <HAL_PWR_EnableBkUpAccess+0x10>)
 800ff5e:	6811      	ldr	r1, [r2, #0]
 800ff60:	2380      	movs	r3, #128	; 0x80
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	430b      	orrs	r3, r1
 800ff66:	6013      	str	r3, [r2, #0]
}
 800ff68:	4770      	bx	lr
 800ff6a:	46c0      	nop			; (mov r8, r8)
 800ff6c:	40007000 	.word	0x40007000

0800ff70 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff72:	46c6      	mov	lr, r8
 800ff74:	b500      	push	{lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff7a:	6803      	ldr	r3, [r0, #0]
 800ff7c:	07db      	lsls	r3, r3, #31
 800ff7e:	d538      	bpl.n	800fff2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800ff80:	4bbd      	ldr	r3, [pc, #756]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	230c      	movs	r3, #12
 800ff86:	4013      	ands	r3, r2
 800ff88:	2b04      	cmp	r3, #4
 800ff8a:	d02a      	beq.n	800ffe2 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ff8c:	4bba      	ldr	r3, [pc, #744]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	230c      	movs	r3, #12
 800ff92:	4013      	ands	r3, r2
 800ff94:	2b08      	cmp	r3, #8
 800ff96:	d108      	bne.n	800ffaa <HAL_RCC_OscConfig+0x3a>
 800ff98:	4bb7      	ldr	r3, [pc, #732]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	22c0      	movs	r2, #192	; 0xc0
 800ff9e:	0252      	lsls	r2, r2, #9
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	2280      	movs	r2, #128	; 0x80
 800ffa4:	0252      	lsls	r2, r2, #9
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d01b      	beq.n	800ffe2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800ffaa:	4bb3      	ldr	r3, [pc, #716]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	49b3      	ldr	r1, [pc, #716]	; (801027c <HAL_RCC_OscConfig+0x30c>)
 800ffb0:	400a      	ands	r2, r1
 800ffb2:	601a      	str	r2, [r3, #0]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	49b2      	ldr	r1, [pc, #712]	; (8010280 <HAL_RCC_OscConfig+0x310>)
 800ffb8:	400a      	ands	r2, r1
 800ffba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ffbc:	f7fe feda 	bl	800ed74 <HAL_GetTick>
 800ffc0:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ffc2:	4fad      	ldr	r7, [pc, #692]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800ffc4:	2680      	movs	r6, #128	; 0x80
 800ffc6:	02b6      	lsls	r6, r6, #10
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	4233      	tst	r3, r6
 800ffcc:	d039      	beq.n	8010042 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ffce:	f7fe fed1 	bl	800ed74 <HAL_GetTick>
 800ffd2:	1b40      	subs	r0, r0, r5
 800ffd4:	2864      	cmp	r0, #100	; 0x64
 800ffd6:	d9f7      	bls.n	800ffc8 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 800ffd8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800ffda:	b002      	add	sp, #8
 800ffdc:	bc80      	pop	{r7}
 800ffde:	46b8      	mov	r8, r7
 800ffe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ffe2:	4ba5      	ldr	r3, [pc, #660]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	039b      	lsls	r3, r3, #14
 800ffe8:	d503      	bpl.n	800fff2 <HAL_RCC_OscConfig+0x82>
 800ffea:	6863      	ldr	r3, [r4, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d100      	bne.n	800fff2 <HAL_RCC_OscConfig+0x82>
 800fff0:	e274      	b.n	80104dc <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	079b      	lsls	r3, r3, #30
 800fff6:	d400      	bmi.n	800fffa <HAL_RCC_OscConfig+0x8a>
 800fff8:	e08d      	b.n	8010116 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800fffa:	4b9f      	ldr	r3, [pc, #636]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	220c      	movs	r2, #12
 8010000:	421a      	tst	r2, r3
 8010002:	d077      	beq.n	80100f4 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010004:	4b9c      	ldr	r3, [pc, #624]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010006:	685a      	ldr	r2, [r3, #4]
 8010008:	230c      	movs	r3, #12
 801000a:	4013      	ands	r3, r2
 801000c:	2b08      	cmp	r3, #8
 801000e:	d068      	beq.n	80100e2 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010010:	68e3      	ldr	r3, [r4, #12]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d100      	bne.n	8010018 <HAL_RCC_OscConfig+0xa8>
 8010016:	e0a1      	b.n	801015c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8010018:	4a97      	ldr	r2, [pc, #604]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801001a:	6813      	ldr	r3, [r2, #0]
 801001c:	2101      	movs	r1, #1
 801001e:	430b      	orrs	r3, r1
 8010020:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010022:	f7fe fea7 	bl	800ed74 <HAL_GetTick>
 8010026:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010028:	4f93      	ldr	r7, [pc, #588]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801002a:	2602      	movs	r6, #2
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	421e      	tst	r6, r3
 8010030:	d000      	beq.n	8010034 <HAL_RCC_OscConfig+0xc4>
 8010032:	e08a      	b.n	801014a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010034:	f7fe fe9e 	bl	800ed74 <HAL_GetTick>
 8010038:	1b40      	subs	r0, r0, r5
 801003a:	2864      	cmp	r0, #100	; 0x64
 801003c:	d9f6      	bls.n	801002c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801003e:	2003      	movs	r0, #3
 8010040:	e7cb      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010042:	6863      	ldr	r3, [r4, #4]
 8010044:	2b01      	cmp	r3, #1
 8010046:	d00b      	beq.n	8010060 <HAL_RCC_OscConfig+0xf0>
 8010048:	2b00      	cmp	r3, #0
 801004a:	d122      	bne.n	8010092 <HAL_RCC_OscConfig+0x122>
 801004c:	4b8a      	ldr	r3, [pc, #552]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	498a      	ldr	r1, [pc, #552]	; (801027c <HAL_RCC_OscConfig+0x30c>)
 8010052:	400a      	ands	r2, r1
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	4989      	ldr	r1, [pc, #548]	; (8010280 <HAL_RCC_OscConfig+0x310>)
 801005a:	400a      	ands	r2, r1
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	e005      	b.n	801006c <HAL_RCC_OscConfig+0xfc>
 8010060:	4a85      	ldr	r2, [pc, #532]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010062:	6811      	ldr	r1, [r2, #0]
 8010064:	2380      	movs	r3, #128	; 0x80
 8010066:	025b      	lsls	r3, r3, #9
 8010068:	430b      	orrs	r3, r1
 801006a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801006c:	6863      	ldr	r3, [r4, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d027      	beq.n	80100c2 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8010072:	f7fe fe7f 	bl	800ed74 <HAL_GetTick>
 8010076:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010078:	4f7f      	ldr	r7, [pc, #508]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801007a:	2680      	movs	r6, #128	; 0x80
 801007c:	02b6      	lsls	r6, r6, #10
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	4233      	tst	r3, r6
 8010082:	d1b6      	bne.n	800fff2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010084:	f7fe fe76 	bl	800ed74 <HAL_GetTick>
 8010088:	1b40      	subs	r0, r0, r5
 801008a:	2864      	cmp	r0, #100	; 0x64
 801008c:	d9f7      	bls.n	801007e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 801008e:	2003      	movs	r0, #3
 8010090:	e7a3      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010092:	2b05      	cmp	r3, #5
 8010094:	d009      	beq.n	80100aa <HAL_RCC_OscConfig+0x13a>
 8010096:	4b78      	ldr	r3, [pc, #480]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	4978      	ldr	r1, [pc, #480]	; (801027c <HAL_RCC_OscConfig+0x30c>)
 801009c:	400a      	ands	r2, r1
 801009e:	601a      	str	r2, [r3, #0]
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	4977      	ldr	r1, [pc, #476]	; (8010280 <HAL_RCC_OscConfig+0x310>)
 80100a4:	400a      	ands	r2, r1
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	e7e0      	b.n	801006c <HAL_RCC_OscConfig+0xfc>
 80100aa:	4b73      	ldr	r3, [pc, #460]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80100ac:	6819      	ldr	r1, [r3, #0]
 80100ae:	2280      	movs	r2, #128	; 0x80
 80100b0:	02d2      	lsls	r2, r2, #11
 80100b2:	430a      	orrs	r2, r1
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	6819      	ldr	r1, [r3, #0]
 80100b8:	2280      	movs	r2, #128	; 0x80
 80100ba:	0252      	lsls	r2, r2, #9
 80100bc:	430a      	orrs	r2, r1
 80100be:	601a      	str	r2, [r3, #0]
 80100c0:	e7d4      	b.n	801006c <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80100c2:	f7fe fe57 	bl	800ed74 <HAL_GetTick>
 80100c6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80100c8:	4f6b      	ldr	r7, [pc, #428]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80100ca:	2680      	movs	r6, #128	; 0x80
 80100cc:	02b6      	lsls	r6, r6, #10
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	4233      	tst	r3, r6
 80100d2:	d08e      	beq.n	800fff2 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80100d4:	f7fe fe4e 	bl	800ed74 <HAL_GetTick>
 80100d8:	1b40      	subs	r0, r0, r5
 80100da:	2864      	cmp	r0, #100	; 0x64
 80100dc:	d9f7      	bls.n	80100ce <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80100de:	2003      	movs	r0, #3
 80100e0:	e77b      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80100e2:	4b65      	ldr	r3, [pc, #404]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	22c0      	movs	r2, #192	; 0xc0
 80100e8:	0252      	lsls	r2, r2, #9
 80100ea:	4013      	ands	r3, r2
 80100ec:	2280      	movs	r2, #128	; 0x80
 80100ee:	0212      	lsls	r2, r2, #8
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d18d      	bne.n	8010010 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100f4:	4b60      	ldr	r3, [pc, #384]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	079b      	lsls	r3, r3, #30
 80100fa:	d504      	bpl.n	8010106 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80100fc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100fe:	68e3      	ldr	r3, [r4, #12]
 8010100:	2b01      	cmp	r3, #1
 8010102:	d000      	beq.n	8010106 <HAL_RCC_OscConfig+0x196>
 8010104:	e769      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010106:	495c      	ldr	r1, [pc, #368]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010108:	680a      	ldr	r2, [r1, #0]
 801010a:	6923      	ldr	r3, [r4, #16]
 801010c:	00db      	lsls	r3, r3, #3
 801010e:	20f8      	movs	r0, #248	; 0xf8
 8010110:	4382      	bics	r2, r0
 8010112:	4313      	orrs	r3, r2
 8010114:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	071b      	lsls	r3, r3, #28
 801011a:	d547      	bpl.n	80101ac <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801011c:	6a23      	ldr	r3, [r4, #32]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d030      	beq.n	8010184 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8010122:	4a55      	ldr	r2, [pc, #340]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010124:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010126:	2101      	movs	r1, #1
 8010128:	430b      	orrs	r3, r1
 801012a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801012c:	f7fe fe22 	bl	800ed74 <HAL_GetTick>
 8010130:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010132:	4f51      	ldr	r7, [pc, #324]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010134:	2602      	movs	r6, #2
 8010136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010138:	421e      	tst	r6, r3
 801013a:	d137      	bne.n	80101ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801013c:	f7fe fe1a 	bl	800ed74 <HAL_GetTick>
 8010140:	1b40      	subs	r0, r0, r5
 8010142:	2864      	cmp	r0, #100	; 0x64
 8010144:	d9f7      	bls.n	8010136 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8010146:	2003      	movs	r0, #3
 8010148:	e747      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801014a:	494b      	ldr	r1, [pc, #300]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801014c:	680a      	ldr	r2, [r1, #0]
 801014e:	6923      	ldr	r3, [r4, #16]
 8010150:	00db      	lsls	r3, r3, #3
 8010152:	20f8      	movs	r0, #248	; 0xf8
 8010154:	4382      	bics	r2, r0
 8010156:	4313      	orrs	r3, r2
 8010158:	600b      	str	r3, [r1, #0]
 801015a:	e7dc      	b.n	8010116 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 801015c:	4a46      	ldr	r2, [pc, #280]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801015e:	6813      	ldr	r3, [r2, #0]
 8010160:	2101      	movs	r1, #1
 8010162:	438b      	bics	r3, r1
 8010164:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010166:	f7fe fe05 	bl	800ed74 <HAL_GetTick>
 801016a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801016c:	4f42      	ldr	r7, [pc, #264]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801016e:	2602      	movs	r6, #2
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	421e      	tst	r6, r3
 8010174:	d0cf      	beq.n	8010116 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010176:	f7fe fdfd 	bl	800ed74 <HAL_GetTick>
 801017a:	1b40      	subs	r0, r0, r5
 801017c:	2864      	cmp	r0, #100	; 0x64
 801017e:	d9f7      	bls.n	8010170 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8010180:	2003      	movs	r0, #3
 8010182:	e72a      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8010184:	4a3c      	ldr	r2, [pc, #240]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010186:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010188:	2101      	movs	r1, #1
 801018a:	438b      	bics	r3, r1
 801018c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801018e:	f7fe fdf1 	bl	800ed74 <HAL_GetTick>
 8010192:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010194:	4f38      	ldr	r7, [pc, #224]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 8010196:	2602      	movs	r6, #2
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	421e      	tst	r6, r3
 801019c:	d006      	beq.n	80101ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801019e:	f7fe fde9 	bl	800ed74 <HAL_GetTick>
 80101a2:	1b40      	subs	r0, r0, r5
 80101a4:	2864      	cmp	r0, #100	; 0x64
 80101a6:	d9f7      	bls.n	8010198 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80101a8:	2003      	movs	r0, #3
 80101aa:	e716      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	075b      	lsls	r3, r3, #29
 80101b0:	d442      	bmi.n	8010238 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	06db      	lsls	r3, r3, #27
 80101b6:	d512      	bpl.n	80101de <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80101b8:	6963      	ldr	r3, [r4, #20]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d100      	bne.n	80101c0 <HAL_RCC_OscConfig+0x250>
 80101be:	e0ce      	b.n	801035e <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80101c0:	3305      	adds	r3, #5
 80101c2:	d000      	beq.n	80101c6 <HAL_RCC_OscConfig+0x256>
 80101c4:	e0ec      	b.n	80103a0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80101c6:	4a2c      	ldr	r2, [pc, #176]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80101c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80101ca:	2104      	movs	r1, #4
 80101cc:	438b      	bics	r3, r1
 80101ce:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80101d0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80101d2:	69a3      	ldr	r3, [r4, #24]
 80101d4:	00db      	lsls	r3, r3, #3
 80101d6:	20f8      	movs	r0, #248	; 0xf8
 80101d8:	4381      	bics	r1, r0
 80101da:	430b      	orrs	r3, r1
 80101dc:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80101de:	6823      	ldr	r3, [r4, #0]
 80101e0:	069b      	lsls	r3, r3, #26
 80101e2:	d400      	bmi.n	80101e6 <HAL_RCC_OscConfig+0x276>
 80101e4:	e106      	b.n	80103f4 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80101e6:	4b24      	ldr	r3, [pc, #144]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80101e8:	685a      	ldr	r2, [r3, #4]
 80101ea:	230c      	movs	r3, #12
 80101ec:	4013      	ands	r3, r2
 80101ee:	2b0c      	cmp	r3, #12
 80101f0:	d100      	bne.n	80101f4 <HAL_RCC_OscConfig+0x284>
 80101f2:	e0f6      	b.n	80103e2 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80101f4:	4b20      	ldr	r3, [pc, #128]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	230c      	movs	r3, #12
 80101fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80101fc:	2b08      	cmp	r3, #8
 80101fe:	d100      	bne.n	8010202 <HAL_RCC_OscConfig+0x292>
 8010200:	e0e7      	b.n	80103d2 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010202:	69e3      	ldr	r3, [r4, #28]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d100      	bne.n	801020a <HAL_RCC_OscConfig+0x29a>
 8010208:	e116      	b.n	8010438 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801020a:	4a1b      	ldr	r2, [pc, #108]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801020c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801020e:	2380      	movs	r3, #128	; 0x80
 8010210:	025b      	lsls	r3, r3, #9
 8010212:	430b      	orrs	r3, r1
 8010214:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010216:	f7fe fdad 	bl	800ed74 <HAL_GetTick>
 801021a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801021c:	4f16      	ldr	r7, [pc, #88]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801021e:	2680      	movs	r6, #128	; 0x80
 8010220:	0276      	lsls	r6, r6, #9
 8010222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010224:	4233      	tst	r3, r6
 8010226:	d000      	beq.n	801022a <HAL_RCC_OscConfig+0x2ba>
 8010228:	e0e4      	b.n	80103f4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801022a:	f7fe fda3 	bl	800ed74 <HAL_GetTick>
 801022e:	1b40      	subs	r0, r0, r5
 8010230:	2864      	cmp	r0, #100	; 0x64
 8010232:	d9f6      	bls.n	8010222 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8010234:	2003      	movs	r0, #3
 8010236:	e6d0      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010238:	4a0f      	ldr	r2, [pc, #60]	; (8010278 <HAL_RCC_OscConfig+0x308>)
 801023a:	69d1      	ldr	r1, [r2, #28]
 801023c:	2080      	movs	r0, #128	; 0x80
 801023e:	0540      	lsls	r0, r0, #21
 8010240:	4301      	orrs	r1, r0
 8010242:	61d1      	str	r1, [r2, #28]
 8010244:	69d3      	ldr	r3, [r2, #28]
 8010246:	4003      	ands	r3, r0
 8010248:	9301      	str	r3, [sp, #4]
 801024a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801024c:	4a0d      	ldr	r2, [pc, #52]	; (8010284 <HAL_RCC_OscConfig+0x314>)
 801024e:	6811      	ldr	r1, [r2, #0]
 8010250:	2380      	movs	r3, #128	; 0x80
 8010252:	005b      	lsls	r3, r3, #1
 8010254:	430b      	orrs	r3, r1
 8010256:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8010258:	f7fe fd8c 	bl	800ed74 <HAL_GetTick>
 801025c:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801025e:	4f09      	ldr	r7, [pc, #36]	; (8010284 <HAL_RCC_OscConfig+0x314>)
 8010260:	2680      	movs	r6, #128	; 0x80
 8010262:	0076      	lsls	r6, r6, #1
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	4233      	tst	r3, r6
 8010268:	d10e      	bne.n	8010288 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801026a:	f7fe fd83 	bl	800ed74 <HAL_GetTick>
 801026e:	1b40      	subs	r0, r0, r5
 8010270:	2864      	cmp	r0, #100	; 0x64
 8010272:	d9f7      	bls.n	8010264 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8010274:	2003      	movs	r0, #3
 8010276:	e6b0      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
 8010278:	40021000 	.word	0x40021000
 801027c:	fffeffff 	.word	0xfffeffff
 8010280:	fffbffff 	.word	0xfffbffff
 8010284:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010288:	4b96      	ldr	r3, [pc, #600]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 801028a:	6a1a      	ldr	r2, [r3, #32]
 801028c:	2101      	movs	r1, #1
 801028e:	438a      	bics	r2, r1
 8010290:	621a      	str	r2, [r3, #32]
 8010292:	6a1a      	ldr	r2, [r3, #32]
 8010294:	3103      	adds	r1, #3
 8010296:	438a      	bics	r2, r1
 8010298:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 801029a:	f7fe fd6b 	bl	800ed74 <HAL_GetTick>
 801029e:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102a0:	4f90      	ldr	r7, [pc, #576]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80102a2:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102a4:	4b90      	ldr	r3, [pc, #576]	; (80104e8 <HAL_RCC_OscConfig+0x578>)
 80102a6:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102a8:	6a3b      	ldr	r3, [r7, #32]
 80102aa:	421e      	tst	r6, r3
 80102ac:	d006      	beq.n	80102bc <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102ae:	f7fe fd61 	bl	800ed74 <HAL_GetTick>
 80102b2:	1b40      	subs	r0, r0, r5
 80102b4:	4540      	cmp	r0, r8
 80102b6:	d9f7      	bls.n	80102a8 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 80102b8:	2003      	movs	r0, #3
 80102ba:	e68e      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80102bc:	68a3      	ldr	r3, [r4, #8]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d00b      	beq.n	80102da <HAL_RCC_OscConfig+0x36a>
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d123      	bne.n	801030e <HAL_RCC_OscConfig+0x39e>
 80102c6:	4b87      	ldr	r3, [pc, #540]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80102c8:	6a1a      	ldr	r2, [r3, #32]
 80102ca:	2101      	movs	r1, #1
 80102cc:	438a      	bics	r2, r1
 80102ce:	621a      	str	r2, [r3, #32]
 80102d0:	6a1a      	ldr	r2, [r3, #32]
 80102d2:	3103      	adds	r1, #3
 80102d4:	438a      	bics	r2, r1
 80102d6:	621a      	str	r2, [r3, #32]
 80102d8:	e004      	b.n	80102e4 <HAL_RCC_OscConfig+0x374>
 80102da:	4a82      	ldr	r2, [pc, #520]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80102dc:	6a13      	ldr	r3, [r2, #32]
 80102de:	2101      	movs	r1, #1
 80102e0:	430b      	orrs	r3, r1
 80102e2:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80102e4:	68a3      	ldr	r3, [r4, #8]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d027      	beq.n	801033a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80102ea:	f7fe fd43 	bl	800ed74 <HAL_GetTick>
 80102ee:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102f0:	4f7c      	ldr	r7, [pc, #496]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80102f2:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102f4:	4b7c      	ldr	r3, [pc, #496]	; (80104e8 <HAL_RCC_OscConfig+0x578>)
 80102f6:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102f8:	6a3b      	ldr	r3, [r7, #32]
 80102fa:	421e      	tst	r6, r3
 80102fc:	d000      	beq.n	8010300 <HAL_RCC_OscConfig+0x390>
 80102fe:	e758      	b.n	80101b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010300:	f7fe fd38 	bl	800ed74 <HAL_GetTick>
 8010304:	1b40      	subs	r0, r0, r5
 8010306:	4540      	cmp	r0, r8
 8010308:	d9f6      	bls.n	80102f8 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 801030a:	2003      	movs	r0, #3
 801030c:	e665      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801030e:	2b05      	cmp	r3, #5
 8010310:	d009      	beq.n	8010326 <HAL_RCC_OscConfig+0x3b6>
 8010312:	4b74      	ldr	r3, [pc, #464]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010314:	6a1a      	ldr	r2, [r3, #32]
 8010316:	2101      	movs	r1, #1
 8010318:	438a      	bics	r2, r1
 801031a:	621a      	str	r2, [r3, #32]
 801031c:	6a1a      	ldr	r2, [r3, #32]
 801031e:	3103      	adds	r1, #3
 8010320:	438a      	bics	r2, r1
 8010322:	621a      	str	r2, [r3, #32]
 8010324:	e7de      	b.n	80102e4 <HAL_RCC_OscConfig+0x374>
 8010326:	4b6f      	ldr	r3, [pc, #444]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010328:	6a1a      	ldr	r2, [r3, #32]
 801032a:	2104      	movs	r1, #4
 801032c:	430a      	orrs	r2, r1
 801032e:	621a      	str	r2, [r3, #32]
 8010330:	6a1a      	ldr	r2, [r3, #32]
 8010332:	3903      	subs	r1, #3
 8010334:	430a      	orrs	r2, r1
 8010336:	621a      	str	r2, [r3, #32]
 8010338:	e7d4      	b.n	80102e4 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801033a:	f7fe fd1b 	bl	800ed74 <HAL_GetTick>
 801033e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010340:	4f68      	ldr	r7, [pc, #416]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010342:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010344:	4b68      	ldr	r3, [pc, #416]	; (80104e8 <HAL_RCC_OscConfig+0x578>)
 8010346:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	421e      	tst	r6, r3
 801034c:	d100      	bne.n	8010350 <HAL_RCC_OscConfig+0x3e0>
 801034e:	e730      	b.n	80101b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010350:	f7fe fd10 	bl	800ed74 <HAL_GetTick>
 8010354:	1b40      	subs	r0, r0, r5
 8010356:	4540      	cmp	r0, r8
 8010358:	d9f6      	bls.n	8010348 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 801035a:	2003      	movs	r0, #3
 801035c:	e63d      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801035e:	4b61      	ldr	r3, [pc, #388]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010362:	2104      	movs	r1, #4
 8010364:	430a      	orrs	r2, r1
 8010366:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8010368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801036a:	3903      	subs	r1, #3
 801036c:	430a      	orrs	r2, r1
 801036e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010370:	f7fe fd00 	bl	800ed74 <HAL_GetTick>
 8010374:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010376:	4f5b      	ldr	r7, [pc, #364]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010378:	2602      	movs	r6, #2
 801037a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037c:	421e      	tst	r6, r3
 801037e:	d106      	bne.n	801038e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010380:	f7fe fcf8 	bl	800ed74 <HAL_GetTick>
 8010384:	1b40      	subs	r0, r0, r5
 8010386:	2864      	cmp	r0, #100	; 0x64
 8010388:	d9f7      	bls.n	801037a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 801038a:	2003      	movs	r0, #3
 801038c:	e625      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801038e:	4955      	ldr	r1, [pc, #340]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010390:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010392:	69a3      	ldr	r3, [r4, #24]
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	20f8      	movs	r0, #248	; 0xf8
 8010398:	4382      	bics	r2, r0
 801039a:	4313      	orrs	r3, r2
 801039c:	634b      	str	r3, [r1, #52]	; 0x34
 801039e:	e71e      	b.n	80101de <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80103a0:	4b50      	ldr	r3, [pc, #320]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80103a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103a4:	2104      	movs	r1, #4
 80103a6:	430a      	orrs	r2, r1
 80103a8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80103aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103ac:	3903      	subs	r1, #3
 80103ae:	438a      	bics	r2, r1
 80103b0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80103b2:	f7fe fcdf 	bl	800ed74 <HAL_GetTick>
 80103b6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80103b8:	4f4a      	ldr	r7, [pc, #296]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80103ba:	2602      	movs	r6, #2
 80103bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103be:	421e      	tst	r6, r3
 80103c0:	d100      	bne.n	80103c4 <HAL_RCC_OscConfig+0x454>
 80103c2:	e70c      	b.n	80101de <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80103c4:	f7fe fcd6 	bl	800ed74 <HAL_GetTick>
 80103c8:	1b40      	subs	r0, r0, r5
 80103ca:	2864      	cmp	r0, #100	; 0x64
 80103cc:	d9f6      	bls.n	80103bc <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80103ce:	2003      	movs	r0, #3
 80103d0:	e603      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80103d2:	4b44      	ldr	r3, [pc, #272]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	22c0      	movs	r2, #192	; 0xc0
 80103d8:	0252      	lsls	r2, r2, #9
 80103da:	4013      	ands	r3, r2
 80103dc:	4293      	cmp	r3, r2
 80103de:	d000      	beq.n	80103e2 <HAL_RCC_OscConfig+0x472>
 80103e0:	e70f      	b.n	8010202 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80103e2:	4b40      	ldr	r3, [pc, #256]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80103e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103e6:	03db      	lsls	r3, r3, #15
 80103e8:	d504      	bpl.n	80103f4 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80103ea:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80103ec:	69e3      	ldr	r3, [r4, #28]
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d000      	beq.n	80103f4 <HAL_RCC_OscConfig+0x484>
 80103f2:	e5f2      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80103f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80103f6:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d100      	bne.n	80103fe <HAL_RCC_OscConfig+0x48e>
 80103fc:	e5ed      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80103fe:	4a39      	ldr	r2, [pc, #228]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010400:	6851      	ldr	r1, [r2, #4]
 8010402:	220c      	movs	r2, #12
 8010404:	400a      	ands	r2, r1
 8010406:	2a08      	cmp	r2, #8
 8010408:	d06a      	beq.n	80104e0 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801040a:	2b02      	cmp	r3, #2
 801040c:	d029      	beq.n	8010462 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801040e:	4a35      	ldr	r2, [pc, #212]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010410:	6813      	ldr	r3, [r2, #0]
 8010412:	4936      	ldr	r1, [pc, #216]	; (80104ec <HAL_RCC_OscConfig+0x57c>)
 8010414:	400b      	ands	r3, r1
 8010416:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010418:	f7fe fcac 	bl	800ed74 <HAL_GetTick>
 801041c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801041e:	4e31      	ldr	r6, [pc, #196]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010420:	2580      	movs	r5, #128	; 0x80
 8010422:	04ad      	lsls	r5, r5, #18
 8010424:	6833      	ldr	r3, [r6, #0]
 8010426:	422b      	tst	r3, r5
 8010428:	d056      	beq.n	80104d8 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801042a:	f7fe fca3 	bl	800ed74 <HAL_GetTick>
 801042e:	1b00      	subs	r0, r0, r4
 8010430:	2864      	cmp	r0, #100	; 0x64
 8010432:	d9f7      	bls.n	8010424 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8010434:	2003      	movs	r0, #3
 8010436:	e5d0      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8010438:	4a2a      	ldr	r2, [pc, #168]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 801043a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801043c:	492c      	ldr	r1, [pc, #176]	; (80104f0 <HAL_RCC_OscConfig+0x580>)
 801043e:	400b      	ands	r3, r1
 8010440:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010442:	f7fe fc97 	bl	800ed74 <HAL_GetTick>
 8010446:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010448:	4f26      	ldr	r7, [pc, #152]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 801044a:	2680      	movs	r6, #128	; 0x80
 801044c:	0276      	lsls	r6, r6, #9
 801044e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010450:	4233      	tst	r3, r6
 8010452:	d0cf      	beq.n	80103f4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010454:	f7fe fc8e 	bl	800ed74 <HAL_GetTick>
 8010458:	1b40      	subs	r0, r0, r5
 801045a:	2864      	cmp	r0, #100	; 0x64
 801045c:	d9f7      	bls.n	801044e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801045e:	2003      	movs	r0, #3
 8010460:	e5bb      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8010462:	4a20      	ldr	r2, [pc, #128]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010464:	6813      	ldr	r3, [r2, #0]
 8010466:	4921      	ldr	r1, [pc, #132]	; (80104ec <HAL_RCC_OscConfig+0x57c>)
 8010468:	400b      	ands	r3, r1
 801046a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801046c:	f7fe fc82 	bl	800ed74 <HAL_GetTick>
 8010470:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010472:	4f1c      	ldr	r7, [pc, #112]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 8010474:	2680      	movs	r6, #128	; 0x80
 8010476:	04b6      	lsls	r6, r6, #18
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	4233      	tst	r3, r6
 801047c:	d006      	beq.n	801048c <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801047e:	f7fe fc79 	bl	800ed74 <HAL_GetTick>
 8010482:	1b40      	subs	r0, r0, r5
 8010484:	2864      	cmp	r0, #100	; 0x64
 8010486:	d9f7      	bls.n	8010478 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8010488:	2003      	movs	r0, #3
 801048a:	e5a6      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801048c:	4b15      	ldr	r3, [pc, #84]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 801048e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010490:	210f      	movs	r1, #15
 8010492:	438a      	bics	r2, r1
 8010494:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010496:	430a      	orrs	r2, r1
 8010498:	62da      	str	r2, [r3, #44]	; 0x2c
 801049a:	6859      	ldr	r1, [r3, #4]
 801049c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801049e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80104a0:	4302      	orrs	r2, r0
 80104a2:	4814      	ldr	r0, [pc, #80]	; (80104f4 <HAL_RCC_OscConfig+0x584>)
 80104a4:	4001      	ands	r1, r0
 80104a6:	430a      	orrs	r2, r1
 80104a8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80104aa:	6819      	ldr	r1, [r3, #0]
 80104ac:	2280      	movs	r2, #128	; 0x80
 80104ae:	0452      	lsls	r2, r2, #17
 80104b0:	430a      	orrs	r2, r1
 80104b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80104b4:	f7fe fc5e 	bl	800ed74 <HAL_GetTick>
 80104b8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80104ba:	4e0a      	ldr	r6, [pc, #40]	; (80104e4 <HAL_RCC_OscConfig+0x574>)
 80104bc:	2580      	movs	r5, #128	; 0x80
 80104be:	04ad      	lsls	r5, r5, #18
 80104c0:	6833      	ldr	r3, [r6, #0]
 80104c2:	422b      	tst	r3, r5
 80104c4:	d106      	bne.n	80104d4 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104c6:	f7fe fc55 	bl	800ed74 <HAL_GetTick>
 80104ca:	1b00      	subs	r0, r0, r4
 80104cc:	2864      	cmp	r0, #100	; 0x64
 80104ce:	d9f7      	bls.n	80104c0 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80104d0:	2003      	movs	r0, #3
 80104d2:	e582      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80104d4:	2000      	movs	r0, #0
 80104d6:	e580      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
 80104d8:	2000      	movs	r0, #0
 80104da:	e57e      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 80104dc:	2001      	movs	r0, #1
 80104de:	e57c      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80104e0:	2001      	movs	r0, #1
 80104e2:	e57a      	b.n	800ffda <HAL_RCC_OscConfig+0x6a>
 80104e4:	40021000 	.word	0x40021000
 80104e8:	00001388 	.word	0x00001388
 80104ec:	feffffff 	.word	0xfeffffff
 80104f0:	fffeffff 	.word	0xfffeffff
 80104f4:	ffc27fff 	.word	0xffc27fff

080104f8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80104f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fa:	46ce      	mov	lr, r9
 80104fc:	4647      	mov	r7, r8
 80104fe:	b580      	push	{r7, lr}
 8010500:	0004      	movs	r4, r0
 8010502:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010504:	4b96      	ldr	r3, [pc, #600]	; (8010760 <HAL_RCC_ClockConfig+0x268>)
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	2301      	movs	r3, #1
 801050a:	4013      	ands	r3, r2
 801050c:	428b      	cmp	r3, r1
 801050e:	d300      	bcc.n	8010512 <HAL_RCC_ClockConfig+0x1a>
 8010510:	e086      	b.n	8010620 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010512:	4993      	ldr	r1, [pc, #588]	; (8010760 <HAL_RCC_ClockConfig+0x268>)
 8010514:	680b      	ldr	r3, [r1, #0]
 8010516:	2201      	movs	r2, #1
 8010518:	4393      	bics	r3, r2
 801051a:	432b      	orrs	r3, r5
 801051c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801051e:	680b      	ldr	r3, [r1, #0]
 8010520:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8010522:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010524:	42aa      	cmp	r2, r5
 8010526:	d000      	beq.n	801052a <HAL_RCC_ClockConfig+0x32>
 8010528:	e111      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	079b      	lsls	r3, r3, #30
 801052e:	d506      	bpl.n	801053e <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010530:	4a8c      	ldr	r2, [pc, #560]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010532:	6853      	ldr	r3, [r2, #4]
 8010534:	21f0      	movs	r1, #240	; 0xf0
 8010536:	438b      	bics	r3, r1
 8010538:	68a1      	ldr	r1, [r4, #8]
 801053a:	430b      	orrs	r3, r1
 801053c:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	07db      	lsls	r3, r3, #31
 8010542:	d400      	bmi.n	8010546 <HAL_RCC_ClockConfig+0x4e>
 8010544:	e0f5      	b.n	8010732 <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010546:	6862      	ldr	r2, [r4, #4]
 8010548:	2a01      	cmp	r2, #1
 801054a:	d009      	beq.n	8010560 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801054c:	2a02      	cmp	r2, #2
 801054e:	d02b      	beq.n	80105a8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010550:	2a03      	cmp	r2, #3
 8010552:	d02f      	beq.n	80105b4 <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010554:	4b83      	ldr	r3, [pc, #524]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	079b      	lsls	r3, r3, #30
 801055a:	d406      	bmi.n	801056a <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 801055c:	2001      	movs	r0, #1
 801055e:	e0f6      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010560:	4b80      	ldr	r3, [pc, #512]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	039b      	lsls	r3, r3, #14
 8010566:	d400      	bmi.n	801056a <HAL_RCC_ClockConfig+0x72>
 8010568:	e0f5      	b.n	8010756 <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801056a:	497e      	ldr	r1, [pc, #504]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 801056c:	684b      	ldr	r3, [r1, #4]
 801056e:	2003      	movs	r0, #3
 8010570:	4383      	bics	r3, r0
 8010572:	4313      	orrs	r3, r2
 8010574:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010576:	f7fe fbfd 	bl	800ed74 <HAL_GetTick>
 801057a:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801057c:	6863      	ldr	r3, [r4, #4]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d01e      	beq.n	80105c0 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010582:	2b02      	cmp	r3, #2
 8010584:	d02c      	beq.n	80105e0 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010586:	2b03      	cmp	r3, #3
 8010588:	d03a      	beq.n	8010600 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801058a:	4f76      	ldr	r7, [pc, #472]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 801058c:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801058e:	4b76      	ldr	r3, [pc, #472]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 8010590:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	421e      	tst	r6, r3
 8010596:	d100      	bne.n	801059a <HAL_RCC_ClockConfig+0xa2>
 8010598:	e0cb      	b.n	8010732 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801059a:	f7fe fbeb 	bl	800ed74 <HAL_GetTick>
 801059e:	1b40      	subs	r0, r0, r5
 80105a0:	4540      	cmp	r0, r8
 80105a2:	d9f6      	bls.n	8010592 <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80105a4:	2003      	movs	r0, #3
 80105a6:	e0d2      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80105a8:	4b6e      	ldr	r3, [pc, #440]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	019b      	lsls	r3, r3, #6
 80105ae:	d4dc      	bmi.n	801056a <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80105b0:	2001      	movs	r0, #1
 80105b2:	e0cc      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80105b4:	4b6b      	ldr	r3, [pc, #428]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80105b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b8:	03db      	lsls	r3, r3, #15
 80105ba:	d4d6      	bmi.n	801056a <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80105bc:	2001      	movs	r0, #1
 80105be:	e0c6      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80105c0:	4f68      	ldr	r7, [pc, #416]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80105c2:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105c4:	4b68      	ldr	r3, [pc, #416]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 80105c6:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4033      	ands	r3, r6
 80105cc:	2b04      	cmp	r3, #4
 80105ce:	d100      	bne.n	80105d2 <HAL_RCC_ClockConfig+0xda>
 80105d0:	e0af      	b.n	8010732 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105d2:	f7fe fbcf 	bl	800ed74 <HAL_GetTick>
 80105d6:	1b40      	subs	r0, r0, r5
 80105d8:	4540      	cmp	r0, r8
 80105da:	d9f5      	bls.n	80105c8 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 80105dc:	2003      	movs	r0, #3
 80105de:	e0b6      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80105e0:	4f60      	ldr	r7, [pc, #384]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80105e2:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105e4:	4b60      	ldr	r3, [pc, #384]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 80105e6:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4033      	ands	r3, r6
 80105ec:	2b08      	cmp	r3, #8
 80105ee:	d100      	bne.n	80105f2 <HAL_RCC_ClockConfig+0xfa>
 80105f0:	e09f      	b.n	8010732 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105f2:	f7fe fbbf 	bl	800ed74 <HAL_GetTick>
 80105f6:	1b40      	subs	r0, r0, r5
 80105f8:	4540      	cmp	r0, r8
 80105fa:	d9f5      	bls.n	80105e8 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 80105fc:	2003      	movs	r0, #3
 80105fe:	e0a6      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010600:	4f58      	ldr	r7, [pc, #352]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010602:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010604:	4b58      	ldr	r3, [pc, #352]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 8010606:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4033      	ands	r3, r6
 801060c:	2b0c      	cmp	r3, #12
 801060e:	d100      	bne.n	8010612 <HAL_RCC_ClockConfig+0x11a>
 8010610:	e08f      	b.n	8010732 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010612:	f7fe fbaf 	bl	800ed74 <HAL_GetTick>
 8010616:	1b40      	subs	r0, r0, r5
 8010618:	4540      	cmp	r0, r8
 801061a:	d9f5      	bls.n	8010608 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 801061c:	2003      	movs	r0, #3
 801061e:	e096      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010620:	6803      	ldr	r3, [r0, #0]
 8010622:	079b      	lsls	r3, r3, #30
 8010624:	d506      	bpl.n	8010634 <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010626:	4a4f      	ldr	r2, [pc, #316]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010628:	6853      	ldr	r3, [r2, #4]
 801062a:	21f0      	movs	r1, #240	; 0xf0
 801062c:	438b      	bics	r3, r1
 801062e:	6881      	ldr	r1, [r0, #8]
 8010630:	430b      	orrs	r3, r1
 8010632:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	07db      	lsls	r3, r3, #31
 8010638:	d570      	bpl.n	801071c <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801063a:	6862      	ldr	r2, [r4, #4]
 801063c:	2a01      	cmp	r2, #1
 801063e:	d009      	beq.n	8010654 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010640:	2a02      	cmp	r2, #2
 8010642:	d02c      	beq.n	801069e <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010644:	2a03      	cmp	r2, #3
 8010646:	d030      	beq.n	80106aa <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010648:	4b46      	ldr	r3, [pc, #280]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	079b      	lsls	r3, r3, #30
 801064e:	d406      	bmi.n	801065e <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8010650:	2001      	movs	r0, #1
 8010652:	e07c      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010654:	4b43      	ldr	r3, [pc, #268]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	039b      	lsls	r3, r3, #14
 801065a:	d400      	bmi.n	801065e <HAL_RCC_ClockConfig+0x166>
 801065c:	e07d      	b.n	801075a <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801065e:	4941      	ldr	r1, [pc, #260]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010660:	684b      	ldr	r3, [r1, #4]
 8010662:	2003      	movs	r0, #3
 8010664:	4383      	bics	r3, r0
 8010666:	4313      	orrs	r3, r2
 8010668:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801066a:	f7fe fb83 	bl	800ed74 <HAL_GetTick>
 801066e:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010670:	6863      	ldr	r3, [r4, #4]
 8010672:	2b01      	cmp	r3, #1
 8010674:	d01f      	beq.n	80106b6 <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010676:	2b02      	cmp	r3, #2
 8010678:	d02e      	beq.n	80106d8 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801067a:	2b03      	cmp	r3, #3
 801067c:	d03d      	beq.n	80106fa <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801067e:	4b39      	ldr	r3, [pc, #228]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 8010680:	4698      	mov	r8, r3
 8010682:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010684:	4b38      	ldr	r3, [pc, #224]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 8010686:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010688:	4643      	mov	r3, r8
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	421f      	tst	r7, r3
 801068e:	d045      	beq.n	801071c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010690:	f7fe fb70 	bl	800ed74 <HAL_GetTick>
 8010694:	1b80      	subs	r0, r0, r6
 8010696:	4548      	cmp	r0, r9
 8010698:	d9f6      	bls.n	8010688 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 801069a:	2003      	movs	r0, #3
 801069c:	e057      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801069e:	4b31      	ldr	r3, [pc, #196]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	019b      	lsls	r3, r3, #6
 80106a4:	d4db      	bmi.n	801065e <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80106a6:	2001      	movs	r0, #1
 80106a8:	e051      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80106aa:	4b2e      	ldr	r3, [pc, #184]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80106ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ae:	03db      	lsls	r3, r3, #15
 80106b0:	d4d5      	bmi.n	801065e <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80106b2:	2001      	movs	r0, #1
 80106b4:	e04b      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80106b6:	4b2b      	ldr	r3, [pc, #172]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80106b8:	4698      	mov	r8, r3
 80106ba:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106bc:	4b2a      	ldr	r3, [pc, #168]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 80106be:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80106c0:	4643      	mov	r3, r8
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	403b      	ands	r3, r7
 80106c6:	2b04      	cmp	r3, #4
 80106c8:	d028      	beq.n	801071c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106ca:	f7fe fb53 	bl	800ed74 <HAL_GetTick>
 80106ce:	1b80      	subs	r0, r0, r6
 80106d0:	4548      	cmp	r0, r9
 80106d2:	d9f5      	bls.n	80106c0 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 80106d4:	2003      	movs	r0, #3
 80106d6:	e03a      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80106d8:	4b22      	ldr	r3, [pc, #136]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80106da:	4698      	mov	r8, r3
 80106dc:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106de:	4b22      	ldr	r3, [pc, #136]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 80106e0:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80106e2:	4643      	mov	r3, r8
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	403b      	ands	r3, r7
 80106e8:	2b08      	cmp	r3, #8
 80106ea:	d017      	beq.n	801071c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106ec:	f7fe fb42 	bl	800ed74 <HAL_GetTick>
 80106f0:	1b80      	subs	r0, r0, r6
 80106f2:	4548      	cmp	r0, r9
 80106f4:	d9f5      	bls.n	80106e2 <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 80106f6:	2003      	movs	r0, #3
 80106f8:	e029      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80106fa:	4b1a      	ldr	r3, [pc, #104]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 80106fc:	4698      	mov	r8, r3
 80106fe:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010700:	4b19      	ldr	r3, [pc, #100]	; (8010768 <HAL_RCC_ClockConfig+0x270>)
 8010702:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010704:	4643      	mov	r3, r8
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	403b      	ands	r3, r7
 801070a:	2b0c      	cmp	r3, #12
 801070c:	d006      	beq.n	801071c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801070e:	f7fe fb31 	bl	800ed74 <HAL_GetTick>
 8010712:	1b80      	subs	r0, r0, r6
 8010714:	4548      	cmp	r0, r9
 8010716:	d9f5      	bls.n	8010704 <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8010718:	2003      	movs	r0, #3
 801071a:	e018      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801071c:	4910      	ldr	r1, [pc, #64]	; (8010760 <HAL_RCC_ClockConfig+0x268>)
 801071e:	680b      	ldr	r3, [r1, #0]
 8010720:	2201      	movs	r2, #1
 8010722:	4393      	bics	r3, r2
 8010724:	432b      	orrs	r3, r5
 8010726:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010728:	680b      	ldr	r3, [r1, #0]
 801072a:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801072c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801072e:	42aa      	cmp	r2, r5
 8010730:	d10d      	bne.n	801074e <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	075b      	lsls	r3, r3, #29
 8010736:	d506      	bpl.n	8010746 <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010738:	4a0a      	ldr	r2, [pc, #40]	; (8010764 <HAL_RCC_ClockConfig+0x26c>)
 801073a:	6853      	ldr	r3, [r2, #4]
 801073c:	490b      	ldr	r1, [pc, #44]	; (801076c <HAL_RCC_ClockConfig+0x274>)
 801073e:	400b      	ands	r3, r1
 8010740:	68e1      	ldr	r1, [r4, #12]
 8010742:	430b      	orrs	r3, r1
 8010744:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8010746:	2000      	movs	r0, #0
 8010748:	f7fe faea 	bl	800ed20 <HAL_InitTick>
  
  return HAL_OK;
 801074c:	2000      	movs	r0, #0
}
 801074e:	bcc0      	pop	{r6, r7}
 8010750:	46b9      	mov	r9, r7
 8010752:	46b0      	mov	r8, r6
 8010754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8010756:	2001      	movs	r0, #1
 8010758:	e7f9      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 801075a:	2001      	movs	r0, #1
 801075c:	e7f7      	b.n	801074e <HAL_RCC_ClockConfig+0x256>
 801075e:	46c0      	nop			; (mov r8, r8)
 8010760:	40022000 	.word	0x40022000
 8010764:	40021000 	.word	0x40021000
 8010768:	00001388 	.word	0x00001388
 801076c:	fffff8ff 	.word	0xfffff8ff

08010770 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010770:	b510      	push	{r4, lr}
 8010772:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010774:	aa04      	add	r2, sp, #16
 8010776:	4b20      	ldr	r3, [pc, #128]	; (80107f8 <HAL_RCC_GetSysClockFreq+0x88>)
 8010778:	cb13      	ldmia	r3!, {r0, r1, r4}
 801077a:	c213      	stmia	r2!, {r0, r1, r4}
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010780:	466a      	mov	r2, sp
 8010782:	4b1e      	ldr	r3, [pc, #120]	; (80107fc <HAL_RCC_GetSysClockFreq+0x8c>)
 8010784:	cb13      	ldmia	r3!, {r0, r1, r4}
 8010786:	c213      	stmia	r2!, {r0, r1, r4}
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801078c:	4b1c      	ldr	r3, [pc, #112]	; (8010800 <HAL_RCC_GetSysClockFreq+0x90>)
 801078e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010790:	200c      	movs	r0, #12
 8010792:	4018      	ands	r0, r3
 8010794:	2808      	cmp	r0, #8
 8010796:	d00a      	beq.n	80107ae <HAL_RCC_GetSysClockFreq+0x3e>
 8010798:	380c      	subs	r0, #12
 801079a:	1e43      	subs	r3, r0, #1
 801079c:	4198      	sbcs	r0, r3
 801079e:	4240      	negs	r0, r0
 80107a0:	4b18      	ldr	r3, [pc, #96]	; (8010804 <HAL_RCC_GetSysClockFreq+0x94>)
 80107a2:	4018      	ands	r0, r3
 80107a4:	4b18      	ldr	r3, [pc, #96]	; (8010808 <HAL_RCC_GetSysClockFreq+0x98>)
 80107a6:	469c      	mov	ip, r3
 80107a8:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80107aa:	b008      	add	sp, #32
 80107ac:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80107ae:	0c99      	lsrs	r1, r3, #18
 80107b0:	220f      	movs	r2, #15
 80107b2:	4011      	ands	r1, r2
 80107b4:	a804      	add	r0, sp, #16
 80107b6:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80107b8:	4911      	ldr	r1, [pc, #68]	; (8010800 <HAL_RCC_GetSysClockFreq+0x90>)
 80107ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80107bc:	400a      	ands	r2, r1
 80107be:	4669      	mov	r1, sp
 80107c0:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80107c2:	22c0      	movs	r2, #192	; 0xc0
 80107c4:	0252      	lsls	r2, r2, #9
 80107c6:	4013      	ands	r3, r2
 80107c8:	2280      	movs	r2, #128	; 0x80
 80107ca:	0252      	lsls	r2, r2, #9
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d008      	beq.n	80107e2 <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80107d0:	22c0      	movs	r2, #192	; 0xc0
 80107d2:	0252      	lsls	r2, r2, #9
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d009      	beq.n	80107ec <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80107d8:	480c      	ldr	r0, [pc, #48]	; (801080c <HAL_RCC_GetSysClockFreq+0x9c>)
 80107da:	f7ef fcb9 	bl	8000150 <__udivsi3>
 80107de:	4360      	muls	r0, r4
 80107e0:	e7e3      	b.n	80107aa <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80107e2:	480a      	ldr	r0, [pc, #40]	; (801080c <HAL_RCC_GetSysClockFreq+0x9c>)
 80107e4:	f7ef fcb4 	bl	8000150 <__udivsi3>
 80107e8:	4360      	muls	r0, r4
 80107ea:	e7de      	b.n	80107aa <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80107ec:	4806      	ldr	r0, [pc, #24]	; (8010808 <HAL_RCC_GetSysClockFreq+0x98>)
 80107ee:	f7ef fcaf 	bl	8000150 <__udivsi3>
 80107f2:	4360      	muls	r0, r4
 80107f4:	e7d9      	b.n	80107aa <HAL_RCC_GetSysClockFreq+0x3a>
 80107f6:	46c0      	nop			; (mov r8, r8)
 80107f8:	0801ad20 	.word	0x0801ad20
 80107fc:	0801ad34 	.word	0x0801ad34
 8010800:	40021000 	.word	0x40021000
 8010804:	fd9da600 	.word	0xfd9da600
 8010808:	02dc6c00 	.word	0x02dc6c00
 801080c:	007a1200 	.word	0x007a1200

08010810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010810:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010812:	f7ff ffad 	bl	8010770 <HAL_RCC_GetSysClockFreq>
 8010816:	4b05      	ldr	r3, [pc, #20]	; (801082c <HAL_RCC_GetHCLKFreq+0x1c>)
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	061b      	lsls	r3, r3, #24
 801081c:	0f1b      	lsrs	r3, r3, #28
 801081e:	4a04      	ldr	r2, [pc, #16]	; (8010830 <HAL_RCC_GetHCLKFreq+0x20>)
 8010820:	5cd3      	ldrb	r3, [r2, r3]
 8010822:	40d8      	lsrs	r0, r3
 8010824:	4b03      	ldr	r3, [pc, #12]	; (8010834 <HAL_RCC_GetHCLKFreq+0x24>)
 8010826:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010828:	bd10      	pop	{r4, pc}
 801082a:	46c0      	nop			; (mov r8, r8)
 801082c:	40021000 	.word	0x40021000
 8010830:	0801ad48 	.word	0x0801ad48
 8010834:	20000090 	.word	0x20000090

08010838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010838:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801083a:	f7ff ffe9 	bl	8010810 <HAL_RCC_GetHCLKFreq>
 801083e:	4b04      	ldr	r3, [pc, #16]	; (8010850 <HAL_RCC_GetPCLK1Freq+0x18>)
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	055b      	lsls	r3, r3, #21
 8010844:	0f5b      	lsrs	r3, r3, #29
 8010846:	4a03      	ldr	r2, [pc, #12]	; (8010854 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010848:	5cd3      	ldrb	r3, [r2, r3]
 801084a:	40d8      	lsrs	r0, r3
}    
 801084c:	bd10      	pop	{r4, pc}
 801084e:	46c0      	nop			; (mov r8, r8)
 8010850:	40021000 	.word	0x40021000
 8010854:	0801ad48 	.word	0x0801ad48

08010858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801085a:	46c6      	mov	lr, r8
 801085c:	b500      	push	{lr}
 801085e:	b082      	sub	sp, #8
 8010860:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010862:	6803      	ldr	r3, [r0, #0]
 8010864:	03db      	lsls	r3, r3, #15
 8010866:	d507      	bpl.n	8010878 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010868:	4b43      	ldr	r3, [pc, #268]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801086a:	6a1b      	ldr	r3, [r3, #32]
 801086c:	6842      	ldr	r2, [r0, #4]
 801086e:	4053      	eors	r3, r2
 8010870:	22c0      	movs	r2, #192	; 0xc0
 8010872:	0092      	lsls	r2, r2, #2
 8010874:	4213      	tst	r3, r2
 8010876:	d136      	bne.n	80108e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	07db      	lsls	r3, r3, #31
 801087c:	d506      	bpl.n	801088c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801087e:	4a3e      	ldr	r2, [pc, #248]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010880:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010882:	2103      	movs	r1, #3
 8010884:	438b      	bics	r3, r1
 8010886:	68a1      	ldr	r1, [r4, #8]
 8010888:	430b      	orrs	r3, r1
 801088a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	079b      	lsls	r3, r3, #30
 8010890:	d506      	bpl.n	80108a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010892:	4a39      	ldr	r2, [pc, #228]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010894:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010896:	4939      	ldr	r1, [pc, #228]	; (801097c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8010898:	400b      	ands	r3, r1
 801089a:	68e1      	ldr	r1, [r4, #12]
 801089c:	430b      	orrs	r3, r1
 801089e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	035b      	lsls	r3, r3, #13
 80108a4:	d506      	bpl.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80108a6:	4a34      	ldr	r2, [pc, #208]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80108a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80108aa:	4935      	ldr	r1, [pc, #212]	; (8010980 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80108ac:	400b      	ands	r3, r1
 80108ae:	6921      	ldr	r1, [r4, #16]
 80108b0:	430b      	orrs	r3, r1
 80108b2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	069b      	lsls	r3, r3, #26
 80108b8:	d506      	bpl.n	80108c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80108ba:	4a2f      	ldr	r2, [pc, #188]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80108bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80108be:	2110      	movs	r1, #16
 80108c0:	438b      	bics	r3, r1
 80108c2:	6961      	ldr	r1, [r4, #20]
 80108c4:	430b      	orrs	r3, r1
 80108c6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80108c8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	055b      	lsls	r3, r3, #21
 80108ce:	d506      	bpl.n	80108de <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80108d0:	4a29      	ldr	r2, [pc, #164]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80108d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80108d4:	2140      	movs	r1, #64	; 0x40
 80108d6:	438b      	bics	r3, r1
 80108d8:	69a1      	ldr	r1, [r4, #24]
 80108da:	430b      	orrs	r3, r1
 80108dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80108de:	b002      	add	sp, #8
 80108e0:	bc80      	pop	{r7}
 80108e2:	46b8      	mov	r8, r7
 80108e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80108e6:	4a24      	ldr	r2, [pc, #144]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80108e8:	69d1      	ldr	r1, [r2, #28]
 80108ea:	2080      	movs	r0, #128	; 0x80
 80108ec:	0540      	lsls	r0, r0, #21
 80108ee:	4301      	orrs	r1, r0
 80108f0:	61d1      	str	r1, [r2, #28]
 80108f2:	69d3      	ldr	r3, [r2, #28]
 80108f4:	4003      	ands	r3, r0
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80108fa:	4a22      	ldr	r2, [pc, #136]	; (8010984 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80108fc:	6811      	ldr	r1, [r2, #0]
 80108fe:	2380      	movs	r3, #128	; 0x80
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	430b      	orrs	r3, r1
 8010904:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8010906:	f7fe fa35 	bl	800ed74 <HAL_GetTick>
 801090a:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 801090c:	4f1d      	ldr	r7, [pc, #116]	; (8010984 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801090e:	2680      	movs	r6, #128	; 0x80
 8010910:	0076      	lsls	r6, r6, #1
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	4233      	tst	r3, r6
 8010916:	d106      	bne.n	8010926 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010918:	f7fe fa2c 	bl	800ed74 <HAL_GetTick>
 801091c:	1b40      	subs	r0, r0, r5
 801091e:	2864      	cmp	r0, #100	; 0x64
 8010920:	d9f7      	bls.n	8010912 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8010922:	2003      	movs	r0, #3
 8010924:	e7db      	b.n	80108de <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010926:	4b14      	ldr	r3, [pc, #80]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010928:	6a18      	ldr	r0, [r3, #32]
 801092a:	4a17      	ldr	r2, [pc, #92]	; (8010988 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801092c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801092e:	6a1d      	ldr	r5, [r3, #32]
 8010930:	2180      	movs	r1, #128	; 0x80
 8010932:	0249      	lsls	r1, r1, #9
 8010934:	4329      	orrs	r1, r5
 8010936:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010938:	6a19      	ldr	r1, [r3, #32]
 801093a:	4d14      	ldr	r5, [pc, #80]	; (801098c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801093c:	4029      	ands	r1, r5
 801093e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8010940:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8010942:	0783      	lsls	r3, r0, #30
 8010944:	d407      	bmi.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8010946:	4a0c      	ldr	r2, [pc, #48]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010948:	6a13      	ldr	r3, [r2, #32]
 801094a:	490f      	ldr	r1, [pc, #60]	; (8010988 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801094c:	400b      	ands	r3, r1
 801094e:	6861      	ldr	r1, [r4, #4]
 8010950:	430b      	orrs	r3, r1
 8010952:	6213      	str	r3, [r2, #32]
 8010954:	e790      	b.n	8010878 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8010956:	f7fe fa0d 	bl	800ed74 <HAL_GetTick>
 801095a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801095c:	4f06      	ldr	r7, [pc, #24]	; (8010978 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801095e:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010960:	4b0b      	ldr	r3, [pc, #44]	; (8010990 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8010962:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	421e      	tst	r6, r3
 8010968:	d1ed      	bne.n	8010946 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801096a:	f7fe fa03 	bl	800ed74 <HAL_GetTick>
 801096e:	1b40      	subs	r0, r0, r5
 8010970:	4540      	cmp	r0, r8
 8010972:	d9f7      	bls.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 8010974:	2003      	movs	r0, #3
 8010976:	e7b2      	b.n	80108de <HAL_RCCEx_PeriphCLKConfig+0x86>
 8010978:	40021000 	.word	0x40021000
 801097c:	fffcffff 	.word	0xfffcffff
 8010980:	fff3ffff 	.word	0xfff3ffff
 8010984:	40007000 	.word	0x40007000
 8010988:	fffffcff 	.word	0xfffffcff
 801098c:	fffeffff 	.word	0xfffeffff
 8010990:	00001388 	.word	0x00001388

08010994 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8010994:	4770      	bx	lr

08010996 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8010996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010998:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801099a:	6802      	ldr	r2, [r0, #0]
 801099c:	68d3      	ldr	r3, [r2, #12]
 801099e:	21a0      	movs	r1, #160	; 0xa0
 80109a0:	438b      	bics	r3, r1
 80109a2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80109a4:	f7fe f9e6 	bl	800ed74 <HAL_GetTick>
 80109a8:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80109aa:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80109ac:	27fa      	movs	r7, #250	; 0xfa
 80109ae:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80109b0:	6823      	ldr	r3, [r4, #0]
 80109b2:	68db      	ldr	r3, [r3, #12]
 80109b4:	421e      	tst	r6, r3
 80109b6:	d106      	bne.n	80109c6 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80109b8:	f7fe f9dc 	bl	800ed74 <HAL_GetTick>
 80109bc:	1b40      	subs	r0, r0, r5
 80109be:	42b8      	cmp	r0, r7
 80109c0:	d9f6      	bls.n	80109b0 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80109c2:	2003      	movs	r0, #3
 80109c4:	e000      	b.n	80109c8 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80109c6:	2000      	movs	r0, #0
}
 80109c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80109ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109cc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80109ce:	6803      	ldr	r3, [r0, #0]
 80109d0:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80109d2:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80109d4:	0652      	lsls	r2, r2, #25
 80109d6:	d500      	bpl.n	80109da <RTC_EnterInitMode+0x10>
}
 80109d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80109da:	2201      	movs	r2, #1
 80109dc:	4252      	negs	r2, r2
 80109de:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80109e0:	f7fe f9c8 	bl	800ed74 <HAL_GetTick>
 80109e4:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80109e6:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80109e8:	27fa      	movs	r7, #250	; 0xfa
 80109ea:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	421e      	tst	r6, r3
 80109f2:	d106      	bne.n	8010a02 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80109f4:	f7fe f9be 	bl	800ed74 <HAL_GetTick>
 80109f8:	1b40      	subs	r0, r0, r5
 80109fa:	42b8      	cmp	r0, r7
 80109fc:	d9f6      	bls.n	80109ec <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80109fe:	2003      	movs	r0, #3
 8010a00:	e7ea      	b.n	80109d8 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8010a02:	2000      	movs	r0, #0
 8010a04:	e7e8      	b.n	80109d8 <RTC_EnterInitMode+0xe>
	...

08010a08 <HAL_RTC_Init>:
{
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8010a0c:	d046      	beq.n	8010a9c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8010a0e:	7f43      	ldrb	r3, [r0, #29]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d013      	beq.n	8010a3c <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8010a14:	2302      	movs	r3, #2
 8010a16:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a18:	6823      	ldr	r3, [r4, #0]
 8010a1a:	22ca      	movs	r2, #202	; 0xca
 8010a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8010a1e:	6823      	ldr	r3, [r4, #0]
 8010a20:	3a77      	subs	r2, #119	; 0x77
 8010a22:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010a24:	0020      	movs	r0, r4
 8010a26:	f7ff ffd0 	bl	80109ca <RTC_EnterInitMode>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d00a      	beq.n	8010a44 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8010a2e:	6823      	ldr	r3, [r4, #0]
 8010a30:	22ff      	movs	r2, #255	; 0xff
 8010a32:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010a34:	2304      	movs	r3, #4
 8010a36:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8010a38:	2001      	movs	r0, #1
}
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8010a3c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8010a3e:	f7ff ffa9 	bl	8010994 <HAL_RTC_MspInit>
 8010a42:	e7e7      	b.n	8010a14 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010a44:	6822      	ldr	r2, [r4, #0]
 8010a46:	6893      	ldr	r3, [r2, #8]
 8010a48:	4915      	ldr	r1, [pc, #84]	; (8010aa0 <HAL_RTC_Init+0x98>)
 8010a4a:	400b      	ands	r3, r1
 8010a4c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010a4e:	6822      	ldr	r2, [r4, #0]
 8010a50:	6891      	ldr	r1, [r2, #8]
 8010a52:	6863      	ldr	r3, [r4, #4]
 8010a54:	6925      	ldr	r5, [r4, #16]
 8010a56:	432b      	orrs	r3, r5
 8010a58:	6965      	ldr	r5, [r4, #20]
 8010a5a:	432b      	orrs	r3, r5
 8010a5c:	430b      	orrs	r3, r1
 8010a5e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010a60:	6823      	ldr	r3, [r4, #0]
 8010a62:	68e2      	ldr	r2, [r4, #12]
 8010a64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8010a66:	6822      	ldr	r2, [r4, #0]
 8010a68:	6911      	ldr	r1, [r2, #16]
 8010a6a:	68a3      	ldr	r3, [r4, #8]
 8010a6c:	041b      	lsls	r3, r3, #16
 8010a6e:	430b      	orrs	r3, r1
 8010a70:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8010a72:	6822      	ldr	r2, [r4, #0]
 8010a74:	68d3      	ldr	r3, [r2, #12]
 8010a76:	2180      	movs	r1, #128	; 0x80
 8010a78:	438b      	bics	r3, r1
 8010a7a:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8010a7c:	6822      	ldr	r2, [r4, #0]
 8010a7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010a80:	4908      	ldr	r1, [pc, #32]	; (8010aa4 <HAL_RTC_Init+0x9c>)
 8010a82:	400b      	ands	r3, r1
 8010a84:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8010a86:	6822      	ldr	r2, [r4, #0]
 8010a88:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010a8a:	69a1      	ldr	r1, [r4, #24]
 8010a8c:	430b      	orrs	r3, r1
 8010a8e:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	22ff      	movs	r2, #255	; 0xff
 8010a94:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8010a96:	2301      	movs	r3, #1
 8010a98:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8010a9a:	e7ce      	b.n	8010a3a <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	e7cc      	b.n	8010a3a <HAL_RTC_Init+0x32>
 8010aa0:	ff8fffbf 	.word	0xff8fffbf
 8010aa4:	fffbffff 	.word	0xfffbffff

08010aa8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8010aa8:	2809      	cmp	r0, #9
 8010aaa:	d909      	bls.n	8010ac0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8010aac:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8010aae:	3301      	adds	r3, #1
    Value -= 10;
 8010ab0:	380a      	subs	r0, #10
 8010ab2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8010ab4:	2809      	cmp	r0, #9
 8010ab6:	d8fa      	bhi.n	8010aae <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8010ab8:	011b      	lsls	r3, r3, #4
 8010aba:	4318      	orrs	r0, r3
 8010abc:	b2c0      	uxtb	r0, r0
}
 8010abe:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e7f9      	b.n	8010ab8 <RTC_ByteToBcd2+0x10>

08010ac4 <HAL_RTC_SetTime>:
{
 8010ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac6:	0004      	movs	r4, r0
 8010ac8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8010aca:	7f03      	ldrb	r3, [r0, #28]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d100      	bne.n	8010ad2 <HAL_RTC_SetTime+0xe>
 8010ad0:	e072      	b.n	8010bb8 <HAL_RTC_SetTime+0xf4>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d144      	bne.n	8010b68 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010ade:	6803      	ldr	r3, [r0, #0]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	065b      	lsls	r3, r3, #25
 8010ae4:	d401      	bmi.n	8010aea <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8010aea:	7830      	ldrb	r0, [r6, #0]
 8010aec:	f7ff ffdc 	bl	8010aa8 <RTC_ByteToBcd2>
 8010af0:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8010af2:	7870      	ldrb	r0, [r6, #1]
 8010af4:	f7ff ffd8 	bl	8010aa8 <RTC_ByteToBcd2>
 8010af8:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8010afa:	78b0      	ldrb	r0, [r6, #2]
 8010afc:	f7ff ffd4 	bl	8010aa8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8010b00:	7a33      	ldrb	r3, [r6, #8]
 8010b02:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8010b04:	4303      	orrs	r3, r0
 8010b06:	042d      	lsls	r5, r5, #16
 8010b08:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8010b0a:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8010b0c:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	22ca      	movs	r2, #202	; 0xca
 8010b12:	625a      	str	r2, [r3, #36]	; 0x24
 8010b14:	6823      	ldr	r3, [r4, #0]
 8010b16:	3a77      	subs	r2, #119	; 0x77
 8010b18:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010b1a:	0020      	movs	r0, r4
 8010b1c:	f7ff ff55 	bl	80109ca <RTC_EnterInitMode>
 8010b20:	1e07      	subs	r7, r0, #0
 8010b22:	d132      	bne.n	8010b8a <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010b24:	6823      	ldr	r3, [r4, #0]
 8010b26:	4825      	ldr	r0, [pc, #148]	; (8010bbc <HAL_RTC_SetTime+0xf8>)
 8010b28:	4005      	ands	r5, r0
 8010b2a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8010b2c:	6822      	ldr	r2, [r4, #0]
 8010b2e:	6893      	ldr	r3, [r2, #8]
 8010b30:	4923      	ldr	r1, [pc, #140]	; (8010bc0 <HAL_RTC_SetTime+0xfc>)
 8010b32:	400b      	ands	r3, r1
 8010b34:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010b36:	6822      	ldr	r2, [r4, #0]
 8010b38:	6891      	ldr	r1, [r2, #8]
 8010b3a:	68f3      	ldr	r3, [r6, #12]
 8010b3c:	6930      	ldr	r0, [r6, #16]
 8010b3e:	4303      	orrs	r3, r0
 8010b40:	430b      	orrs	r3, r1
 8010b42:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010b44:	6822      	ldr	r2, [r4, #0]
 8010b46:	68d3      	ldr	r3, [r2, #12]
 8010b48:	2180      	movs	r1, #128	; 0x80
 8010b4a:	438b      	bics	r3, r1
 8010b4c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	069b      	lsls	r3, r3, #26
 8010b54:	d522      	bpl.n	8010b9c <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b56:	6823      	ldr	r3, [r4, #0]
 8010b58:	22ff      	movs	r2, #255	; 0xff
 8010b5a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8010b60:	2300      	movs	r3, #0
 8010b62:	7723      	strb	r3, [r4, #28]
}
 8010b64:	0038      	movs	r0, r7
 8010b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010b68:	6803      	ldr	r3, [r0, #0]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	065b      	lsls	r3, r3, #25
 8010b6e:	d401      	bmi.n	8010b74 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8010b70:	2300      	movs	r3, #0
 8010b72:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8010b74:	7835      	ldrb	r5, [r6, #0]
 8010b76:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8010b78:	7870      	ldrb	r0, [r6, #1]
 8010b7a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8010b7c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8010b7e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8010b80:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8010b82:	7a30      	ldrb	r0, [r6, #8]
 8010b84:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8010b86:	4305      	orrs	r5, r0
 8010b88:	e7c1      	b.n	8010b0e <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	22ff      	movs	r2, #255	; 0xff
 8010b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010b90:	2304      	movs	r3, #4
 8010b92:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010b94:	2300      	movs	r3, #0
 8010b96:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8010b98:	2701      	movs	r7, #1
 8010b9a:	e7e3      	b.n	8010b64 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010b9c:	0020      	movs	r0, r4
 8010b9e:	f7ff fefa 	bl	8010996 <HAL_RTC_WaitForSynchro>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d0d7      	beq.n	8010b56 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	22ff      	movs	r2, #255	; 0xff
 8010baa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010bac:	2304      	movs	r3, #4
 8010bae:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8010bb4:	2701      	movs	r7, #1
 8010bb6:	e7d5      	b.n	8010b64 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8010bb8:	2702      	movs	r7, #2
 8010bba:	e7d3      	b.n	8010b64 <HAL_RTC_SetTime+0xa0>
 8010bbc:	007f7f7f 	.word	0x007f7f7f
 8010bc0:	fffbffff 	.word	0xfffbffff

08010bc4 <HAL_RTC_SetDate>:
{
 8010bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bc6:	46c6      	mov	lr, r8
 8010bc8:	b500      	push	{lr}
 8010bca:	0004      	movs	r4, r0
 8010bcc:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8010bce:	7f03      	ldrb	r3, [r0, #28]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d037      	beq.n	8010c44 <HAL_RTC_SetDate+0x80>
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8010bd8:	3301      	adds	r3, #1
 8010bda:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8010bdc:	2a00      	cmp	r2, #0
 8010bde:	d133      	bne.n	8010c48 <HAL_RTC_SetDate+0x84>
 8010be0:	784b      	ldrb	r3, [r1, #1]
 8010be2:	06da      	lsls	r2, r3, #27
 8010be4:	d503      	bpl.n	8010bee <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8010be6:	2210      	movs	r2, #16
 8010be8:	4393      	bics	r3, r2
 8010bea:	330a      	adds	r3, #10
 8010bec:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010bee:	78f0      	ldrb	r0, [r6, #3]
 8010bf0:	f7ff ff5a 	bl	8010aa8 <RTC_ByteToBcd2>
 8010bf4:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8010bf6:	7870      	ldrb	r0, [r6, #1]
 8010bf8:	f7ff ff56 	bl	8010aa8 <RTC_ByteToBcd2>
 8010bfc:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8010bfe:	78b0      	ldrb	r0, [r6, #2]
 8010c00:	f7ff ff52 	bl	8010aa8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8010c04:	7833      	ldrb	r3, [r6, #0]
 8010c06:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010c08:	4303      	orrs	r3, r0
 8010c0a:	042d      	lsls	r5, r5, #16
 8010c0c:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8010c0e:	4643      	mov	r3, r8
 8010c10:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010c12:	4305      	orrs	r5, r0
 8010c14:	e022      	b.n	8010c5c <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	22ff      	movs	r2, #255	; 0xff
 8010c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010c1c:	2304      	movs	r3, #4
 8010c1e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010c20:	2300      	movs	r3, #0
 8010c22:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8010c24:	2601      	movs	r6, #1
 8010c26:	e038      	b.n	8010c9a <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010c28:	0020      	movs	r0, r4
 8010c2a:	f7ff feb4 	bl	8010996 <HAL_RTC_WaitForSynchro>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d02c      	beq.n	8010c8c <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	22ff      	movs	r2, #255	; 0xff
 8010c36:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010c38:	2304      	movs	r3, #4
 8010c3a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8010c40:	2601      	movs	r6, #1
 8010c42:	e02a      	b.n	8010c9a <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8010c44:	2602      	movs	r6, #2
 8010c46:	e028      	b.n	8010c9a <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010c48:	78cd      	ldrb	r5, [r1, #3]
 8010c4a:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8010c4c:	7848      	ldrb	r0, [r1, #1]
 8010c4e:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010c50:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8010c52:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8010c54:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8010c56:	7808      	ldrb	r0, [r1, #0]
 8010c58:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010c5a:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c5c:	6823      	ldr	r3, [r4, #0]
 8010c5e:	22ca      	movs	r2, #202	; 0xca
 8010c60:	625a      	str	r2, [r3, #36]	; 0x24
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	3a77      	subs	r2, #119	; 0x77
 8010c66:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010c68:	0020      	movs	r0, r4
 8010c6a:	f7ff feae 	bl	80109ca <RTC_EnterInitMode>
 8010c6e:	1e06      	subs	r6, r0, #0
 8010c70:	d1d1      	bne.n	8010c16 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	480b      	ldr	r0, [pc, #44]	; (8010ca4 <HAL_RTC_SetDate+0xe0>)
 8010c76:	4005      	ands	r5, r0
 8010c78:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010c7a:	6822      	ldr	r2, [r4, #0]
 8010c7c:	68d3      	ldr	r3, [r2, #12]
 8010c7e:	2180      	movs	r1, #128	; 0x80
 8010c80:	438b      	bics	r3, r1
 8010c82:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	069b      	lsls	r3, r3, #26
 8010c8a:	d5cd      	bpl.n	8010c28 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8010c8c:	6823      	ldr	r3, [r4, #0]
 8010c8e:	22ff      	movs	r2, #255	; 0xff
 8010c90:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8010c92:	2301      	movs	r3, #1
 8010c94:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010c96:	2300      	movs	r3, #0
 8010c98:	7723      	strb	r3, [r4, #28]
}
 8010c9a:	0030      	movs	r0, r6
 8010c9c:	bc80      	pop	{r7}
 8010c9e:	46b8      	mov	r8, r7
 8010ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ca2:	46c0      	nop			; (mov r8, r8)
 8010ca4:	00ffff3f 	.word	0x00ffff3f

08010ca8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010ca8:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010caa:	0902      	lsrs	r2, r0, #4
 8010cac:	0090      	lsls	r0, r2, #2
 8010cae:	1880      	adds	r0, r0, r2
 8010cb0:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010cb2:	220f      	movs	r2, #15
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	18c0      	adds	r0, r0, r3
 8010cb8:	b2c0      	uxtb	r0, r0
}
 8010cba:	4770      	bx	lr

08010cbc <HAL_RTC_GetTime>:
{
 8010cbc:	b570      	push	{r4, r5, r6, lr}
 8010cbe:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010cc0:	6803      	ldr	r3, [r0, #0]
 8010cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cc4:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8010cc6:	6803      	ldr	r3, [r0, #0]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	490e      	ldr	r1, [pc, #56]	; (8010d04 <HAL_RTC_GetTime+0x48>)
 8010ccc:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010cce:	0c19      	lsrs	r1, r3, #16
 8010cd0:	203f      	movs	r0, #63	; 0x3f
 8010cd2:	4008      	ands	r0, r1
 8010cd4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010cd6:	0a1e      	lsrs	r6, r3, #8
 8010cd8:	b2f6      	uxtb	r6, r6
 8010cda:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010cdc:	b2dd      	uxtb	r5, r3
 8010cde:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ce0:	2340      	movs	r3, #64	; 0x40
 8010ce2:	400b      	ands	r3, r1
 8010ce4:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8010ce6:	2a00      	cmp	r2, #0
 8010ce8:	d10a      	bne.n	8010d00 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010cea:	f7ff ffdd 	bl	8010ca8 <RTC_Bcd2ToByte>
 8010cee:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010cf0:	0030      	movs	r0, r6
 8010cf2:	f7ff ffd9 	bl	8010ca8 <RTC_Bcd2ToByte>
 8010cf6:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8010cf8:	0028      	movs	r0, r5
 8010cfa:	f7ff ffd5 	bl	8010ca8 <RTC_Bcd2ToByte>
 8010cfe:	70a0      	strb	r0, [r4, #2]
}
 8010d00:	2000      	movs	r0, #0
 8010d02:	bd70      	pop	{r4, r5, r6, pc}
 8010d04:	007f7f7f 	.word	0x007f7f7f

08010d08 <HAL_RTC_GetDate>:
{
 8010d08:	b570      	push	{r4, r5, r6, lr}
 8010d0a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	490d      	ldr	r1, [pc, #52]	; (8010d48 <HAL_RTC_GetDate+0x40>)
 8010d12:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010d14:	0c18      	lsrs	r0, r3, #16
 8010d16:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010d18:	04dd      	lsls	r5, r3, #19
 8010d1a:	0eed      	lsrs	r5, r5, #27
 8010d1c:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010d1e:	b2de      	uxtb	r6, r3
 8010d20:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010d22:	041b      	lsls	r3, r3, #16
 8010d24:	0f5b      	lsrs	r3, r3, #29
 8010d26:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8010d28:	2a00      	cmp	r2, #0
 8010d2a:	d10a      	bne.n	8010d42 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010d2c:	f7ff ffbc 	bl	8010ca8 <RTC_Bcd2ToByte>
 8010d30:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010d32:	0028      	movs	r0, r5
 8010d34:	f7ff ffb8 	bl	8010ca8 <RTC_Bcd2ToByte>
 8010d38:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8010d3a:	0030      	movs	r0, r6
 8010d3c:	f7ff ffb4 	bl	8010ca8 <RTC_Bcd2ToByte>
 8010d40:	70a0      	strb	r0, [r4, #2]
}
 8010d42:	2000      	movs	r0, #0
 8010d44:	bd70      	pop	{r4, r5, r6, pc}
 8010d46:	46c0      	nop			; (mov r8, r8)
 8010d48:	00ffff3f 	.word	0x00ffff3f

08010d4c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010d4c:	6803      	ldr	r3, [r0, #0]
 8010d4e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010d50:	0089      	lsls	r1, r1, #2
 8010d52:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010d54:	600a      	str	r2, [r1, #0]
}
 8010d56:	4770      	bx	lr

08010d58 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010d58:	6803      	ldr	r3, [r0, #0]
 8010d5a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010d5c:	0089      	lsls	r1, r1, #2
 8010d5e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8010d60:	6808      	ldr	r0, [r1, #0]
}
 8010d62:	4770      	bx	lr

08010d64 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010d64:	4770      	bx	lr

08010d66 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010d66:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8010d68:	2239      	movs	r2, #57	; 0x39
 8010d6a:	2302      	movs	r3, #2
 8010d6c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010d6e:	6804      	ldr	r4, [r0, #0]
 8010d70:	6823      	ldr	r3, [r4, #0]
 8010d72:	2101      	movs	r1, #1
 8010d74:	430b      	orrs	r3, r1
 8010d76:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8010d78:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8010d7a:	2000      	movs	r0, #0
 8010d7c:	bd10      	pop	{r4, pc}

08010d7e <HAL_TIM_PeriodElapsedCallback>:
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8010d7e:	4770      	bx	lr

08010d80 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010d80:	4770      	bx	lr

08010d82 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010d82:	4770      	bx	lr

08010d84 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d84:	4770      	bx	lr

08010d86 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d86:	4770      	bx	lr

08010d88 <HAL_TIM_IRQHandler>:
{
 8010d88:	b510      	push	{r4, lr}
 8010d8a:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d8c:	6803      	ldr	r3, [r0, #0]
 8010d8e:	691a      	ldr	r2, [r3, #16]
 8010d90:	0792      	lsls	r2, r2, #30
 8010d92:	d50f      	bpl.n	8010db4 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	0792      	lsls	r2, r2, #30
 8010d98:	d50c      	bpl.n	8010db4 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010d9a:	2203      	movs	r2, #3
 8010d9c:	4252      	negs	r2, r2
 8010d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010da0:	2301      	movs	r3, #1
 8010da2:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8010da4:	6803      	ldr	r3, [r0, #0]
 8010da6:	699b      	ldr	r3, [r3, #24]
 8010da8:	079b      	lsls	r3, r3, #30
 8010daa:	d063      	beq.n	8010e74 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8010dac:	f7ff ffe9 	bl	8010d82 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010db0:	2300      	movs	r3, #0
 8010db2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010db4:	6823      	ldr	r3, [r4, #0]
 8010db6:	691a      	ldr	r2, [r3, #16]
 8010db8:	0752      	lsls	r2, r2, #29
 8010dba:	d512      	bpl.n	8010de2 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8010dbc:	68da      	ldr	r2, [r3, #12]
 8010dbe:	0752      	lsls	r2, r2, #29
 8010dc0:	d50f      	bpl.n	8010de2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010dc2:	2205      	movs	r2, #5
 8010dc4:	4252      	negs	r2, r2
 8010dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010dc8:	2302      	movs	r3, #2
 8010dca:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8010dcc:	6823      	ldr	r3, [r4, #0]
 8010dce:	699a      	ldr	r2, [r3, #24]
 8010dd0:	23c0      	movs	r3, #192	; 0xc0
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	421a      	tst	r2, r3
 8010dd6:	d053      	beq.n	8010e80 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8010dd8:	0020      	movs	r0, r4
 8010dda:	f7ff ffd2 	bl	8010d82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dde:	2300      	movs	r3, #0
 8010de0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010de2:	6823      	ldr	r3, [r4, #0]
 8010de4:	691a      	ldr	r2, [r3, #16]
 8010de6:	0712      	lsls	r2, r2, #28
 8010de8:	d510      	bpl.n	8010e0c <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8010dea:	68da      	ldr	r2, [r3, #12]
 8010dec:	0712      	lsls	r2, r2, #28
 8010dee:	d50d      	bpl.n	8010e0c <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010df0:	2209      	movs	r2, #9
 8010df2:	4252      	negs	r2, r2
 8010df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010df6:	2304      	movs	r3, #4
 8010df8:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8010dfa:	6823      	ldr	r3, [r4, #0]
 8010dfc:	69db      	ldr	r3, [r3, #28]
 8010dfe:	079b      	lsls	r3, r3, #30
 8010e00:	d045      	beq.n	8010e8e <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8010e02:	0020      	movs	r0, r4
 8010e04:	f7ff ffbd 	bl	8010d82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010e0c:	6823      	ldr	r3, [r4, #0]
 8010e0e:	691a      	ldr	r2, [r3, #16]
 8010e10:	06d2      	lsls	r2, r2, #27
 8010e12:	d512      	bpl.n	8010e3a <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8010e14:	68da      	ldr	r2, [r3, #12]
 8010e16:	06d2      	lsls	r2, r2, #27
 8010e18:	d50f      	bpl.n	8010e3a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010e1a:	2211      	movs	r2, #17
 8010e1c:	4252      	negs	r2, r2
 8010e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e20:	2308      	movs	r3, #8
 8010e22:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8010e24:	6823      	ldr	r3, [r4, #0]
 8010e26:	69da      	ldr	r2, [r3, #28]
 8010e28:	23c0      	movs	r3, #192	; 0xc0
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	421a      	tst	r2, r3
 8010e2e:	d035      	beq.n	8010e9c <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8010e30:	0020      	movs	r0, r4
 8010e32:	f7ff ffa6 	bl	8010d82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e36:	2300      	movs	r3, #0
 8010e38:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	691a      	ldr	r2, [r3, #16]
 8010e3e:	07d2      	lsls	r2, r2, #31
 8010e40:	d502      	bpl.n	8010e48 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8010e42:	68da      	ldr	r2, [r3, #12]
 8010e44:	07d2      	lsls	r2, r2, #31
 8010e46:	d430      	bmi.n	8010eaa <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e48:	6823      	ldr	r3, [r4, #0]
 8010e4a:	691a      	ldr	r2, [r3, #16]
 8010e4c:	0612      	lsls	r2, r2, #24
 8010e4e:	d502      	bpl.n	8010e56 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8010e50:	68da      	ldr	r2, [r3, #12]
 8010e52:	0612      	lsls	r2, r2, #24
 8010e54:	d430      	bmi.n	8010eb8 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	691a      	ldr	r2, [r3, #16]
 8010e5a:	0652      	lsls	r2, r2, #25
 8010e5c:	d502      	bpl.n	8010e64 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8010e5e:	68da      	ldr	r2, [r3, #12]
 8010e60:	0652      	lsls	r2, r2, #25
 8010e62:	d430      	bmi.n	8010ec6 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e64:	6823      	ldr	r3, [r4, #0]
 8010e66:	691a      	ldr	r2, [r3, #16]
 8010e68:	0692      	lsls	r2, r2, #26
 8010e6a:	d502      	bpl.n	8010e72 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8010e6c:	68da      	ldr	r2, [r3, #12]
 8010e6e:	0692      	lsls	r2, r2, #26
 8010e70:	d430      	bmi.n	8010ed4 <HAL_TIM_IRQHandler+0x14c>
}
 8010e72:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e74:	f7ff ff84 	bl	8010d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e78:	0020      	movs	r0, r4
 8010e7a:	f7ff ff83 	bl	8010d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8010e7e:	e797      	b.n	8010db0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e80:	0020      	movs	r0, r4
 8010e82:	f7ff ff7d 	bl	8010d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e86:	0020      	movs	r0, r4
 8010e88:	f7ff ff7c 	bl	8010d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8010e8c:	e7a7      	b.n	8010dde <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e8e:	0020      	movs	r0, r4
 8010e90:	f7ff ff76 	bl	8010d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e94:	0020      	movs	r0, r4
 8010e96:	f7ff ff75 	bl	8010d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8010e9a:	e7b5      	b.n	8010e08 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e9c:	0020      	movs	r0, r4
 8010e9e:	f7ff ff6f 	bl	8010d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ea2:	0020      	movs	r0, r4
 8010ea4:	f7ff ff6e 	bl	8010d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8010ea8:	e7c5      	b.n	8010e36 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010eaa:	2202      	movs	r2, #2
 8010eac:	4252      	negs	r2, r2
 8010eae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8010eb0:	0020      	movs	r0, r4
 8010eb2:	f7ff ff64 	bl	8010d7e <HAL_TIM_PeriodElapsedCallback>
 8010eb6:	e7c7      	b.n	8010e48 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010eb8:	2281      	movs	r2, #129	; 0x81
 8010eba:	4252      	negs	r2, r2
 8010ebc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010ebe:	0020      	movs	r0, r4
 8010ec0:	f000 f8bf 	bl	8011042 <HAL_TIMEx_BreakCallback>
 8010ec4:	e7c7      	b.n	8010e56 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ec6:	2241      	movs	r2, #65	; 0x41
 8010ec8:	4252      	negs	r2, r2
 8010eca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8010ecc:	0020      	movs	r0, r4
 8010ece:	f7ff ff5a 	bl	8010d86 <HAL_TIM_TriggerCallback>
 8010ed2:	e7c7      	b.n	8010e64 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010ed4:	2221      	movs	r2, #33	; 0x21
 8010ed6:	4252      	negs	r2, r2
 8010ed8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8010eda:	0020      	movs	r0, r4
 8010edc:	f000 f8b0 	bl	8011040 <HAL_TIMEx_CommutationCallback>
}
 8010ee0:	e7c7      	b.n	8010e72 <HAL_TIM_IRQHandler+0xea>
	...

08010ee4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8010ee4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ee6:	4a2f      	ldr	r2, [pc, #188]	; (8010fa4 <TIM_Base_SetConfig+0xc0>)
 8010ee8:	4290      	cmp	r0, r2
 8010eea:	d044      	beq.n	8010f76 <TIM_Base_SetConfig+0x92>
 8010eec:	2280      	movs	r2, #128	; 0x80
 8010eee:	05d2      	lsls	r2, r2, #23
 8010ef0:	4290      	cmp	r0, r2
 8010ef2:	d032      	beq.n	8010f5a <TIM_Base_SetConfig+0x76>
 8010ef4:	4a2c      	ldr	r2, [pc, #176]	; (8010fa8 <TIM_Base_SetConfig+0xc4>)
 8010ef6:	4290      	cmp	r0, r2
 8010ef8:	d04f      	beq.n	8010f9a <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010efa:	4a2c      	ldr	r2, [pc, #176]	; (8010fac <TIM_Base_SetConfig+0xc8>)
 8010efc:	4290      	cmp	r0, r2
 8010efe:	d030      	beq.n	8010f62 <TIM_Base_SetConfig+0x7e>
 8010f00:	4a2b      	ldr	r2, [pc, #172]	; (8010fb0 <TIM_Base_SetConfig+0xcc>)
 8010f02:	4290      	cmp	r0, r2
 8010f04:	d01f      	beq.n	8010f46 <TIM_Base_SetConfig+0x62>
 8010f06:	4a2b      	ldr	r2, [pc, #172]	; (8010fb4 <TIM_Base_SetConfig+0xd0>)
 8010f08:	4290      	cmp	r0, r2
 8010f0a:	d012      	beq.n	8010f32 <TIM_Base_SetConfig+0x4e>
 8010f0c:	4a2a      	ldr	r2, [pc, #168]	; (8010fb8 <TIM_Base_SetConfig+0xd4>)
 8010f0e:	4290      	cmp	r0, r2
 8010f10:	d005      	beq.n	8010f1e <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8010f12:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f14:	688b      	ldr	r3, [r1, #8]
 8010f16:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010f18:	680b      	ldr	r3, [r1, #0]
 8010f1a:	6283      	str	r3, [r0, #40]	; 0x28
 8010f1c:	e03a      	b.n	8010f94 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f1e:	4a27      	ldr	r2, [pc, #156]	; (8010fbc <TIM_Base_SetConfig+0xd8>)
 8010f20:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f22:	68ca      	ldr	r2, [r1, #12]
 8010f24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010f26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f28:	688b      	ldr	r3, [r1, #8]
 8010f2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010f2c:	680b      	ldr	r3, [r1, #0]
 8010f2e:	6283      	str	r3, [r0, #40]	; 0x28
 8010f30:	e02e      	b.n	8010f90 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f32:	4a22      	ldr	r2, [pc, #136]	; (8010fbc <TIM_Base_SetConfig+0xd8>)
 8010f34:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f36:	68ca      	ldr	r2, [r1, #12]
 8010f38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010f3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f3c:	688b      	ldr	r3, [r1, #8]
 8010f3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010f40:	680b      	ldr	r3, [r1, #0]
 8010f42:	6283      	str	r3, [r0, #40]	; 0x28
 8010f44:	e024      	b.n	8010f90 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f46:	4a1d      	ldr	r2, [pc, #116]	; (8010fbc <TIM_Base_SetConfig+0xd8>)
 8010f48:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f4a:	68ca      	ldr	r2, [r1, #12]
 8010f4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010f4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f50:	688b      	ldr	r3, [r1, #8]
 8010f52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010f54:	680b      	ldr	r3, [r1, #0]
 8010f56:	6283      	str	r3, [r0, #40]	; 0x28
 8010f58:	e01a      	b.n	8010f90 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f5a:	2270      	movs	r2, #112	; 0x70
 8010f5c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010f5e:	684a      	ldr	r2, [r1, #4]
 8010f60:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f62:	4a16      	ldr	r2, [pc, #88]	; (8010fbc <TIM_Base_SetConfig+0xd8>)
 8010f64:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f66:	68ca      	ldr	r2, [r1, #12]
 8010f68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010f6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f6c:	688b      	ldr	r3, [r1, #8]
 8010f6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010f70:	680b      	ldr	r3, [r1, #0]
 8010f72:	6283      	str	r3, [r0, #40]	; 0x28
 8010f74:	e00e      	b.n	8010f94 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f76:	2270      	movs	r2, #112	; 0x70
 8010f78:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010f7a:	684a      	ldr	r2, [r1, #4]
 8010f7c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f7e:	4a0f      	ldr	r2, [pc, #60]	; (8010fbc <TIM_Base_SetConfig+0xd8>)
 8010f80:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f82:	68ca      	ldr	r2, [r1, #12]
 8010f84:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010f86:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f88:	688b      	ldr	r3, [r1, #8]
 8010f8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010f8c:	680b      	ldr	r3, [r1, #0]
 8010f8e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f90:	690b      	ldr	r3, [r1, #16]
 8010f92:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8010f94:	2301      	movs	r3, #1
 8010f96:	6143      	str	r3, [r0, #20]
}
 8010f98:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f9a:	2270      	movs	r2, #112	; 0x70
 8010f9c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010f9e:	684a      	ldr	r2, [r1, #4]
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	e7de      	b.n	8010f62 <TIM_Base_SetConfig+0x7e>
 8010fa4:	40012c00 	.word	0x40012c00
 8010fa8:	40000400 	.word	0x40000400
 8010fac:	40002000 	.word	0x40002000
 8010fb0:	40014000 	.word	0x40014000
 8010fb4:	40014400 	.word	0x40014400
 8010fb8:	40014800 	.word	0x40014800
 8010fbc:	fffffcff 	.word	0xfffffcff

08010fc0 <HAL_TIM_Base_Init>:
{
 8010fc0:	b570      	push	{r4, r5, r6, lr}
 8010fc2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8010fc4:	d014      	beq.n	8010ff0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8010fc6:	2339      	movs	r3, #57	; 0x39
 8010fc8:	5cc3      	ldrb	r3, [r0, r3]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00a      	beq.n	8010fe4 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8010fce:	2539      	movs	r5, #57	; 0x39
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010fd4:	0021      	movs	r1, r4
 8010fd6:	c901      	ldmia	r1!, {r0}
 8010fd8:	f7ff ff84 	bl	8010ee4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8010fe0:	2000      	movs	r0, #0
}
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8010fe4:	3338      	adds	r3, #56	; 0x38
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8010fea:	f7ff febb 	bl	8010d64 <HAL_TIM_Base_MspInit>
 8010fee:	e7ee      	b.n	8010fce <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8010ff0:	2001      	movs	r0, #1
 8010ff2:	e7f6      	b.n	8010fe2 <HAL_TIM_Base_Init+0x22>

08010ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8010ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8010ff6:	2338      	movs	r3, #56	; 0x38
 8010ff8:	5cc3      	ldrb	r3, [r0, r3]
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d01e      	beq.n	801103c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8010ffe:	2238      	movs	r2, #56	; 0x38
 8011000:	2501      	movs	r5, #1
 8011002:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011004:	2439      	movs	r4, #57	; 0x39
 8011006:	2302      	movs	r3, #2
 8011008:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801100a:	6806      	ldr	r6, [r0, #0]
 801100c:	6873      	ldr	r3, [r6, #4]
 801100e:	2770      	movs	r7, #112	; 0x70
 8011010:	43bb      	bics	r3, r7
 8011012:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011014:	6806      	ldr	r6, [r0, #0]
 8011016:	6873      	ldr	r3, [r6, #4]
 8011018:	680f      	ldr	r7, [r1, #0]
 801101a:	433b      	orrs	r3, r7
 801101c:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801101e:	6806      	ldr	r6, [r0, #0]
 8011020:	68b3      	ldr	r3, [r6, #8]
 8011022:	2780      	movs	r7, #128	; 0x80
 8011024:	43bb      	bics	r3, r7
 8011026:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011028:	6806      	ldr	r6, [r0, #0]
 801102a:	68b3      	ldr	r3, [r6, #8]
 801102c:	6849      	ldr	r1, [r1, #4]
 801102e:	430b      	orrs	r3, r1
 8011030:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011032:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011034:	2300      	movs	r3, #0
 8011036:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011038:	2000      	movs	r0, #0
}
 801103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 801103c:	2002      	movs	r0, #2
 801103e:	e7fc      	b.n	801103a <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011040 <HAL_TIMEx_CommutationCallback>:
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8011040:	4770      	bx	lr

08011042 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011042:	4770      	bx	lr

08011044 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011044:	4770      	bx	lr

08011046 <HAL_UART_DeInit>:
{
 8011046:	b570      	push	{r4, r5, r6, lr}
 8011048:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801104a:	d016      	beq.n	801107a <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 801104c:	2669      	movs	r6, #105	; 0x69
 801104e:	2302      	movs	r3, #2
 8011050:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8011052:	6802      	ldr	r2, [r0, #0]
 8011054:	6813      	ldr	r3, [r2, #0]
 8011056:	2101      	movs	r1, #1
 8011058:	438b      	bics	r3, r1
 801105a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 801105c:	6803      	ldr	r3, [r0, #0]
 801105e:	2500      	movs	r5, #0
 8011060:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011062:	6803      	ldr	r3, [r0, #0]
 8011064:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011066:	6803      	ldr	r3, [r0, #0]
 8011068:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801106a:	f7ff ffeb 	bl	8011044 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801106e:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011070:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011072:	2368      	movs	r3, #104	; 0x68
 8011074:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8011076:	2000      	movs	r0, #0
}
 8011078:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 801107a:	2001      	movs	r0, #1
 801107c:	e7fc      	b.n	8011078 <HAL_UART_DeInit+0x32>

0801107e <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801107e:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011080:	2369      	movs	r3, #105	; 0x69
 8011082:	5cc3      	ldrb	r3, [r0, r3]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d003      	beq.n	8011090 <HAL_UART_Transmit_IT+0x12>
 8011088:	2369      	movs	r3, #105	; 0x69
 801108a:	5cc3      	ldrb	r3, [r0, r3]
 801108c:	2b22      	cmp	r3, #34	; 0x22
 801108e:	d12b      	bne.n	80110e8 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8011090:	2900      	cmp	r1, #0
 8011092:	d02b      	beq.n	80110ec <HAL_UART_Transmit_IT+0x6e>
 8011094:	2a00      	cmp	r2, #0
 8011096:	d02b      	beq.n	80110f0 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011098:	2368      	movs	r3, #104	; 0x68
 801109a:	5cc3      	ldrb	r3, [r0, r3]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d029      	beq.n	80110f4 <HAL_UART_Transmit_IT+0x76>
 80110a0:	2368      	movs	r3, #104	; 0x68
 80110a2:	2401      	movs	r4, #1
 80110a4:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 80110a6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80110a8:	3b18      	subs	r3, #24
 80110aa:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80110ac:	3302      	adds	r3, #2
 80110ae:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110b0:	2300      	movs	r3, #0
 80110b2:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80110b4:	3369      	adds	r3, #105	; 0x69
 80110b6:	5cc3      	ldrb	r3, [r0, r3]
 80110b8:	2b22      	cmp	r3, #34	; 0x22
 80110ba:	d011      	beq.n	80110e0 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80110bc:	2369      	movs	r3, #105	; 0x69
 80110be:	2212      	movs	r2, #18
 80110c0:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80110c2:	6802      	ldr	r2, [r0, #0]
 80110c4:	6893      	ldr	r3, [r2, #8]
 80110c6:	2101      	movs	r1, #1
 80110c8:	430b      	orrs	r3, r1
 80110ca:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80110cc:	2368      	movs	r3, #104	; 0x68
 80110ce:	2200      	movs	r2, #0
 80110d0:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80110d2:	6802      	ldr	r2, [r0, #0]
 80110d4:	6813      	ldr	r3, [r2, #0]
 80110d6:	317f      	adds	r1, #127	; 0x7f
 80110d8:	430b      	orrs	r3, r1
 80110da:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80110dc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80110de:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80110e0:	3347      	adds	r3, #71	; 0x47
 80110e2:	2232      	movs	r2, #50	; 0x32
 80110e4:	54c2      	strb	r2, [r0, r3]
 80110e6:	e7ec      	b.n	80110c2 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 80110e8:	2002      	movs	r0, #2
 80110ea:	e7f8      	b.n	80110de <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 80110ec:	2001      	movs	r0, #1
 80110ee:	e7f6      	b.n	80110de <HAL_UART_Transmit_IT+0x60>
 80110f0:	2001      	movs	r0, #1
 80110f2:	e7f4      	b.n	80110de <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 80110f4:	2002      	movs	r0, #2
 80110f6:	e7f2      	b.n	80110de <HAL_UART_Transmit_IT+0x60>

080110f8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80110f8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80110fa:	2369      	movs	r3, #105	; 0x69
 80110fc:	5cc3      	ldrb	r3, [r0, r3]
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d003      	beq.n	801110a <HAL_UART_Receive_IT+0x12>
 8011102:	2369      	movs	r3, #105	; 0x69
 8011104:	5cc3      	ldrb	r3, [r0, r3]
 8011106:	2b12      	cmp	r3, #18
 8011108:	d15d      	bne.n	80111c6 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801110a:	2900      	cmp	r1, #0
 801110c:	d05d      	beq.n	80111ca <HAL_UART_Receive_IT+0xd2>
 801110e:	2a00      	cmp	r2, #0
 8011110:	d05d      	beq.n	80111ce <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011112:	2368      	movs	r3, #104	; 0x68
 8011114:	5cc3      	ldrb	r3, [r0, r3]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d05b      	beq.n	80111d2 <HAL_UART_Receive_IT+0xda>
 801111a:	2368      	movs	r3, #104	; 0x68
 801111c:	2401      	movs	r4, #1
 801111e:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8011120:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011122:	3b10      	subs	r3, #16
 8011124:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8011126:	3302      	adds	r3, #2
 8011128:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801112a:	6883      	ldr	r3, [r0, #8]
 801112c:	2280      	movs	r2, #128	; 0x80
 801112e:	0152      	lsls	r2, r2, #5
 8011130:	4293      	cmp	r3, r2
 8011132:	d008      	beq.n	8011146 <HAL_UART_Receive_IT+0x4e>
 8011134:	2b00      	cmp	r3, #0
 8011136:	d115      	bne.n	8011164 <HAL_UART_Receive_IT+0x6c>
 8011138:	6903      	ldr	r3, [r0, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10e      	bne.n	801115c <HAL_UART_Receive_IT+0x64>
 801113e:	335c      	adds	r3, #92	; 0x5c
 8011140:	22ff      	movs	r2, #255	; 0xff
 8011142:	52c2      	strh	r2, [r0, r3]
 8011144:	e012      	b.n	801116c <HAL_UART_Receive_IT+0x74>
 8011146:	6903      	ldr	r3, [r0, #16]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d103      	bne.n	8011154 <HAL_UART_Receive_IT+0x5c>
 801114c:	335c      	adds	r3, #92	; 0x5c
 801114e:	4a22      	ldr	r2, [pc, #136]	; (80111d8 <HAL_UART_Receive_IT+0xe0>)
 8011150:	52c2      	strh	r2, [r0, r3]
 8011152:	e00b      	b.n	801116c <HAL_UART_Receive_IT+0x74>
 8011154:	235c      	movs	r3, #92	; 0x5c
 8011156:	22ff      	movs	r2, #255	; 0xff
 8011158:	52c2      	strh	r2, [r0, r3]
 801115a:	e007      	b.n	801116c <HAL_UART_Receive_IT+0x74>
 801115c:	235c      	movs	r3, #92	; 0x5c
 801115e:	227f      	movs	r2, #127	; 0x7f
 8011160:	52c2      	strh	r2, [r0, r3]
 8011162:	e003      	b.n	801116c <HAL_UART_Receive_IT+0x74>
 8011164:	2280      	movs	r2, #128	; 0x80
 8011166:	0552      	lsls	r2, r2, #21
 8011168:	4293      	cmp	r3, r2
 801116a:	d01d      	beq.n	80111a8 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801116c:	2300      	movs	r3, #0
 801116e:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011170:	3369      	adds	r3, #105	; 0x69
 8011172:	5cc3      	ldrb	r3, [r0, r3]
 8011174:	2b12      	cmp	r3, #18
 8011176:	d022      	beq.n	80111be <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011178:	2369      	movs	r3, #105	; 0x69
 801117a:	2222      	movs	r2, #34	; 0x22
 801117c:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801117e:	6802      	ldr	r2, [r0, #0]
 8011180:	6811      	ldr	r1, [r2, #0]
 8011182:	2380      	movs	r3, #128	; 0x80
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	430b      	orrs	r3, r1
 8011188:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801118a:	6802      	ldr	r2, [r0, #0]
 801118c:	6893      	ldr	r3, [r2, #8]
 801118e:	2101      	movs	r1, #1
 8011190:	430b      	orrs	r3, r1
 8011192:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011194:	2368      	movs	r3, #104	; 0x68
 8011196:	2200      	movs	r2, #0
 8011198:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801119a:	6802      	ldr	r2, [r0, #0]
 801119c:	6813      	ldr	r3, [r2, #0]
 801119e:	311f      	adds	r1, #31
 80111a0:	430b      	orrs	r3, r1
 80111a2:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80111a4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80111a6:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80111a8:	6903      	ldr	r3, [r0, #16]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d103      	bne.n	80111b6 <HAL_UART_Receive_IT+0xbe>
 80111ae:	335c      	adds	r3, #92	; 0x5c
 80111b0:	227f      	movs	r2, #127	; 0x7f
 80111b2:	52c2      	strh	r2, [r0, r3]
 80111b4:	e7da      	b.n	801116c <HAL_UART_Receive_IT+0x74>
 80111b6:	235c      	movs	r3, #92	; 0x5c
 80111b8:	223f      	movs	r2, #63	; 0x3f
 80111ba:	52c2      	strh	r2, [r0, r3]
 80111bc:	e7d6      	b.n	801116c <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80111be:	3357      	adds	r3, #87	; 0x57
 80111c0:	2232      	movs	r2, #50	; 0x32
 80111c2:	54c2      	strb	r2, [r0, r3]
 80111c4:	e7db      	b.n	801117e <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 80111c6:	2002      	movs	r0, #2
 80111c8:	e7ed      	b.n	80111a6 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 80111ca:	2001      	movs	r0, #1
 80111cc:	e7eb      	b.n	80111a6 <HAL_UART_Receive_IT+0xae>
 80111ce:	2001      	movs	r0, #1
 80111d0:	e7e9      	b.n	80111a6 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 80111d2:	2002      	movs	r0, #2
 80111d4:	e7e7      	b.n	80111a6 <HAL_UART_Receive_IT+0xae>
 80111d6:	46c0      	nop			; (mov r8, r8)
 80111d8:	000001ff 	.word	0x000001ff

080111dc <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80111dc:	b510      	push	{r4, lr}
 80111de:	0004      	movs	r4, r0
 80111e0:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80111e2:	2269      	movs	r2, #105	; 0x69
 80111e4:	5c82      	ldrb	r2, [r0, r2]
 80111e6:	2a01      	cmp	r2, #1
 80111e8:	d003      	beq.n	80111f2 <HAL_UART_Transmit_DMA+0x16>
 80111ea:	2269      	movs	r2, #105	; 0x69
 80111ec:	5c82      	ldrb	r2, [r0, r2]
 80111ee:	2a22      	cmp	r2, #34	; 0x22
 80111f0:	d137      	bne.n	8011262 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 80111f2:	2900      	cmp	r1, #0
 80111f4:	d037      	beq.n	8011266 <HAL_UART_Transmit_DMA+0x8a>
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d037      	beq.n	801126a <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80111fa:	2268      	movs	r2, #104	; 0x68
 80111fc:	5ca2      	ldrb	r2, [r4, r2]
 80111fe:	2a01      	cmp	r2, #1
 8011200:	d035      	beq.n	801126e <HAL_UART_Transmit_DMA+0x92>
 8011202:	2268      	movs	r2, #104	; 0x68
 8011204:	2001      	movs	r0, #1
 8011206:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8011208:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801120a:	3a18      	subs	r2, #24
 801120c:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 801120e:	3202      	adds	r2, #2
 8011210:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011212:	2200      	movs	r2, #0
 8011214:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011216:	3269      	adds	r2, #105	; 0x69
 8011218:	5ca2      	ldrb	r2, [r4, r2]
 801121a:	2a22      	cmp	r2, #34	; 0x22
 801121c:	d01d      	beq.n	801125a <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801121e:	2269      	movs	r2, #105	; 0x69
 8011220:	2012      	movs	r0, #18
 8011222:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011224:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011226:	4813      	ldr	r0, [pc, #76]	; (8011274 <HAL_UART_Transmit_DMA+0x98>)
 8011228:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801122a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801122c:	4812      	ldr	r0, [pc, #72]	; (8011278 <HAL_UART_Transmit_DMA+0x9c>)
 801122e:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011230:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011232:	4812      	ldr	r0, [pc, #72]	; (801127c <HAL_UART_Transmit_DMA+0xa0>)
 8011234:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011236:	6822      	ldr	r2, [r4, #0]
 8011238:	3228      	adds	r2, #40	; 0x28
 801123a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801123c:	f7fd ff8c 	bl	800f158 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	2240      	movs	r2, #64	; 0x40
 8011244:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011246:	6822      	ldr	r2, [r4, #0]
 8011248:	6893      	ldr	r3, [r2, #8]
 801124a:	2180      	movs	r1, #128	; 0x80
 801124c:	430b      	orrs	r3, r1
 801124e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011250:	2368      	movs	r3, #104	; 0x68
 8011252:	2200      	movs	r2, #0
 8011254:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8011256:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011258:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801125a:	3247      	adds	r2, #71	; 0x47
 801125c:	3031      	adds	r0, #49	; 0x31
 801125e:	54a0      	strb	r0, [r4, r2]
 8011260:	e7e0      	b.n	8011224 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 8011262:	2002      	movs	r0, #2
 8011264:	e7f8      	b.n	8011258 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8011266:	2001      	movs	r0, #1
 8011268:	e7f6      	b.n	8011258 <HAL_UART_Transmit_DMA+0x7c>
 801126a:	2001      	movs	r0, #1
 801126c:	e7f4      	b.n	8011258 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 801126e:	2002      	movs	r0, #2
 8011270:	e7f2      	b.n	8011258 <HAL_UART_Transmit_DMA+0x7c>
 8011272:	46c0      	nop			; (mov r8, r8)
 8011274:	0801131d 	.word	0x0801131d
 8011278:	0801134f 	.word	0x0801134f
 801127c:	0801139f 	.word	0x0801139f

08011280 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011280:	b510      	push	{r4, lr}
 8011282:	0004      	movs	r4, r0
 8011284:	0008      	movs	r0, r1
 8011286:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011288:	2269      	movs	r2, #105	; 0x69
 801128a:	5ca2      	ldrb	r2, [r4, r2]
 801128c:	2a01      	cmp	r2, #1
 801128e:	d003      	beq.n	8011298 <HAL_UART_Receive_DMA+0x18>
 8011290:	2269      	movs	r2, #105	; 0x69
 8011292:	5ca2      	ldrb	r2, [r4, r2]
 8011294:	2a12      	cmp	r2, #18
 8011296:	d133      	bne.n	8011300 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8011298:	2800      	cmp	r0, #0
 801129a:	d033      	beq.n	8011304 <HAL_UART_Receive_DMA+0x84>
 801129c:	2b00      	cmp	r3, #0
 801129e:	d033      	beq.n	8011308 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80112a0:	2268      	movs	r2, #104	; 0x68
 80112a2:	5ca2      	ldrb	r2, [r4, r2]
 80112a4:	2a01      	cmp	r2, #1
 80112a6:	d031      	beq.n	801130c <HAL_UART_Receive_DMA+0x8c>
 80112a8:	2268      	movs	r2, #104	; 0x68
 80112aa:	2101      	movs	r1, #1
 80112ac:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 80112ae:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80112b0:	3a10      	subs	r2, #16
 80112b2:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112b4:	2200      	movs	r2, #0
 80112b6:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80112b8:	3269      	adds	r2, #105	; 0x69
 80112ba:	5ca2      	ldrb	r2, [r4, r2]
 80112bc:	2a12      	cmp	r2, #18
 80112be:	d01b      	beq.n	80112f8 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80112c0:	2269      	movs	r2, #105	; 0x69
 80112c2:	2122      	movs	r1, #34	; 0x22
 80112c4:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80112c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112c8:	4911      	ldr	r1, [pc, #68]	; (8011310 <HAL_UART_Receive_DMA+0x90>)
 80112ca:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80112cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112ce:	4911      	ldr	r1, [pc, #68]	; (8011314 <HAL_UART_Receive_DMA+0x94>)
 80112d0:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80112d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112d4:	4910      	ldr	r1, [pc, #64]	; (8011318 <HAL_UART_Receive_DMA+0x98>)
 80112d6:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80112d8:	6821      	ldr	r1, [r4, #0]
 80112da:	3124      	adds	r1, #36	; 0x24
 80112dc:	0002      	movs	r2, r0
 80112de:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80112e0:	f7fd ff3a 	bl	800f158 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80112e4:	6822      	ldr	r2, [r4, #0]
 80112e6:	6893      	ldr	r3, [r2, #8]
 80112e8:	2140      	movs	r1, #64	; 0x40
 80112ea:	430b      	orrs	r3, r1
 80112ec:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 80112ee:	2368      	movs	r3, #104	; 0x68
 80112f0:	2200      	movs	r2, #0
 80112f2:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80112f4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80112f6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80112f8:	3257      	adds	r2, #87	; 0x57
 80112fa:	3131      	adds	r1, #49	; 0x31
 80112fc:	54a1      	strb	r1, [r4, r2]
 80112fe:	e7e2      	b.n	80112c6 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8011300:	2002      	movs	r0, #2
 8011302:	e7f8      	b.n	80112f6 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8011304:	2001      	movs	r0, #1
 8011306:	e7f6      	b.n	80112f6 <HAL_UART_Receive_DMA+0x76>
 8011308:	2001      	movs	r0, #1
 801130a:	e7f4      	b.n	80112f6 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 801130c:	2002      	movs	r0, #2
 801130e:	e7f2      	b.n	80112f6 <HAL_UART_Receive_DMA+0x76>
 8011310:	08011359 	.word	0x08011359
 8011314:	08011395 	.word	0x08011395
 8011318:	0801139f 	.word	0x0801139f

0801131c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801131c:	b510      	push	{r4, lr}
 801131e:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011320:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	069b      	lsls	r3, r3, #26
 8011328:	d40d      	bmi.n	8011346 <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 801132a:	2352      	movs	r3, #82	; 0x52
 801132c:	2200      	movs	r2, #0
 801132e:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8011330:	6802      	ldr	r2, [r0, #0]
 8011332:	6893      	ldr	r3, [r2, #8]
 8011334:	2180      	movs	r1, #128	; 0x80
 8011336:	438b      	bics	r3, r1
 8011338:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801133a:	6802      	ldr	r2, [r0, #0]
 801133c:	6813      	ldr	r3, [r2, #0]
 801133e:	3940      	subs	r1, #64	; 0x40
 8011340:	430b      	orrs	r3, r1
 8011342:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8011344:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8011346:	f7fa ff01 	bl	800c14c <HAL_UART_TxCpltCallback>
}
 801134a:	e7fb      	b.n	8011344 <UART_DMATransmitCplt+0x28>

0801134c <HAL_UART_TxHalfCpltCallback>:
}
 801134c:	4770      	bx	lr

0801134e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801134e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8011350:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011352:	f7ff fffb 	bl	801134c <HAL_UART_TxHalfCpltCallback>
}
 8011356:	bd10      	pop	{r4, pc}

08011358 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011358:	b510      	push	{r4, lr}
 801135a:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801135c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	069b      	lsls	r3, r3, #26
 8011364:	d40e      	bmi.n	8011384 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 8011366:	235a      	movs	r3, #90	; 0x5a
 8011368:	2200      	movs	r2, #0
 801136a:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801136c:	6802      	ldr	r2, [r0, #0]
 801136e:	6893      	ldr	r3, [r2, #8]
 8011370:	2140      	movs	r1, #64	; 0x40
 8011372:	438b      	bics	r3, r1
 8011374:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011376:	2369      	movs	r3, #105	; 0x69
 8011378:	5cc3      	ldrb	r3, [r0, r3]
 801137a:	2b32      	cmp	r3, #50	; 0x32
 801137c:	d005      	beq.n	801138a <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801137e:	2369      	movs	r3, #105	; 0x69
 8011380:	2201      	movs	r2, #1
 8011382:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8011384:	f7fa ff26 	bl	800c1d4 <HAL_UART_RxCpltCallback>
}
 8011388:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801138a:	3337      	adds	r3, #55	; 0x37
 801138c:	2212      	movs	r2, #18
 801138e:	54c2      	strb	r2, [r0, r3]
 8011390:	e7f8      	b.n	8011384 <UART_DMAReceiveCplt+0x2c>

08011392 <HAL_UART_RxHalfCpltCallback>:
}
 8011392:	4770      	bx	lr

08011394 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011394:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8011396:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011398:	f7ff fffb 	bl	8011392 <HAL_UART_RxHalfCpltCallback>
}
 801139c:	bd10      	pop	{r4, pc}

0801139e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801139e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80113a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	225a      	movs	r2, #90	; 0x5a
 80113a6:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80113a8:	3a08      	subs	r2, #8
 80113aa:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80113ac:	3369      	adds	r3, #105	; 0x69
 80113ae:	3a51      	subs	r2, #81	; 0x51
 80113b0:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80113b2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80113b4:	320f      	adds	r2, #15
 80113b6:	4313      	orrs	r3, r2
 80113b8:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80113ba:	f7fa fee5 	bl	800c188 <HAL_UART_ErrorCallback>
}
 80113be:	bd10      	pop	{r4, pc}

080113c0 <UART_SetConfig>:
{
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80113c4:	6801      	ldr	r1, [r0, #0]
 80113c6:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80113c8:	6883      	ldr	r3, [r0, #8]
 80113ca:	6900      	ldr	r0, [r0, #16]
 80113cc:	4303      	orrs	r3, r0
 80113ce:	6960      	ldr	r0, [r4, #20]
 80113d0:	4303      	orrs	r3, r0
 80113d2:	69e0      	ldr	r0, [r4, #28]
 80113d4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80113d6:	487a      	ldr	r0, [pc, #488]	; (80115c0 <UART_SetConfig+0x200>)
 80113d8:	4002      	ands	r2, r0
 80113da:	4313      	orrs	r3, r2
 80113dc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113de:	6822      	ldr	r2, [r4, #0]
 80113e0:	6853      	ldr	r3, [r2, #4]
 80113e2:	4978      	ldr	r1, [pc, #480]	; (80115c4 <UART_SetConfig+0x204>)
 80113e4:	400b      	ands	r3, r1
 80113e6:	68e1      	ldr	r1, [r4, #12]
 80113e8:	430b      	orrs	r3, r1
 80113ea:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80113ec:	6821      	ldr	r1, [r4, #0]
 80113ee:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80113f0:	69a3      	ldr	r3, [r4, #24]
 80113f2:	6a20      	ldr	r0, [r4, #32]
 80113f4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80113f6:	4874      	ldr	r0, [pc, #464]	; (80115c8 <UART_SetConfig+0x208>)
 80113f8:	4002      	ands	r2, r0
 80113fa:	4313      	orrs	r3, r2
 80113fc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113fe:	6825      	ldr	r5, [r4, #0]
 8011400:	4b72      	ldr	r3, [pc, #456]	; (80115cc <UART_SetConfig+0x20c>)
 8011402:	429d      	cmp	r5, r3
 8011404:	d021      	beq.n	801144a <UART_SetConfig+0x8a>
 8011406:	4b72      	ldr	r3, [pc, #456]	; (80115d0 <UART_SetConfig+0x210>)
 8011408:	429d      	cmp	r5, r3
 801140a:	d03a      	beq.n	8011482 <UART_SetConfig+0xc2>
 801140c:	4b71      	ldr	r3, [pc, #452]	; (80115d4 <UART_SetConfig+0x214>)
 801140e:	429d      	cmp	r5, r3
 8011410:	d061      	beq.n	80114d6 <UART_SetConfig+0x116>
 8011412:	4b71      	ldr	r3, [pc, #452]	; (80115d8 <UART_SetConfig+0x218>)
 8011414:	429d      	cmp	r5, r3
 8011416:	d100      	bne.n	801141a <UART_SetConfig+0x5a>
 8011418:	e0a8      	b.n	801156c <UART_SetConfig+0x1ac>
 801141a:	4b70      	ldr	r3, [pc, #448]	; (80115dc <UART_SetConfig+0x21c>)
 801141c:	429d      	cmp	r5, r3
 801141e:	d100      	bne.n	8011422 <UART_SetConfig+0x62>
 8011420:	e0a4      	b.n	801156c <UART_SetConfig+0x1ac>
 8011422:	4b6f      	ldr	r3, [pc, #444]	; (80115e0 <UART_SetConfig+0x220>)
 8011424:	429d      	cmp	r5, r3
 8011426:	d100      	bne.n	801142a <UART_SetConfig+0x6a>
 8011428:	e0a0      	b.n	801156c <UART_SetConfig+0x1ac>
 801142a:	4b6e      	ldr	r3, [pc, #440]	; (80115e4 <UART_SetConfig+0x224>)
 801142c:	429d      	cmp	r5, r3
 801142e:	d100      	bne.n	8011432 <UART_SetConfig+0x72>
 8011430:	e09c      	b.n	801156c <UART_SetConfig+0x1ac>
 8011432:	4b6d      	ldr	r3, [pc, #436]	; (80115e8 <UART_SetConfig+0x228>)
 8011434:	429d      	cmp	r5, r3
 8011436:	d100      	bne.n	801143a <UART_SetConfig+0x7a>
 8011438:	e098      	b.n	801156c <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801143a:	2380      	movs	r3, #128	; 0x80
 801143c:	021b      	lsls	r3, r3, #8
 801143e:	69e2      	ldr	r2, [r4, #28]
 8011440:	429a      	cmp	r2, r3
 8011442:	d100      	bne.n	8011446 <UART_SetConfig+0x86>
 8011444:	e08c      	b.n	8011560 <UART_SetConfig+0x1a0>
 8011446:	2001      	movs	r0, #1
 8011448:	e089      	b.n	801155e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801144a:	4b68      	ldr	r3, [pc, #416]	; (80115ec <UART_SetConfig+0x22c>)
 801144c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801144e:	2303      	movs	r3, #3
 8011450:	4013      	ands	r3, r2
 8011452:	2b02      	cmp	r3, #2
 8011454:	d100      	bne.n	8011458 <UART_SetConfig+0x98>
 8011456:	e0a6      	b.n	80115a6 <UART_SetConfig+0x1e6>
 8011458:	d82f      	bhi.n	80114ba <UART_SetConfig+0xfa>
 801145a:	2b00      	cmp	r3, #0
 801145c:	d069      	beq.n	8011532 <UART_SetConfig+0x172>
 801145e:	2b01      	cmp	r3, #1
 8011460:	d120      	bne.n	80114a4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011462:	2380      	movs	r3, #128	; 0x80
 8011464:	021b      	lsls	r3, r3, #8
 8011466:	69e2      	ldr	r2, [r4, #28]
 8011468:	429a      	cmp	r2, r3
 801146a:	d049      	beq.n	8011500 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801146c:	f7ff f980 	bl	8010770 <HAL_RCC_GetSysClockFreq>
 8011470:	6825      	ldr	r5, [r4, #0]
 8011472:	6861      	ldr	r1, [r4, #4]
 8011474:	f7ee fe6c 	bl	8000150 <__udivsi3>
 8011478:	0400      	lsls	r0, r0, #16
 801147a:	0c00      	lsrs	r0, r0, #16
 801147c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801147e:	2000      	movs	r0, #0
        break;
 8011480:	e06d      	b.n	801155e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011482:	4b5a      	ldr	r3, [pc, #360]	; (80115ec <UART_SetConfig+0x22c>)
 8011484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011486:	22c0      	movs	r2, #192	; 0xc0
 8011488:	0292      	lsls	r2, r2, #10
 801148a:	4013      	ands	r3, r2
 801148c:	2280      	movs	r2, #128	; 0x80
 801148e:	0292      	lsls	r2, r2, #10
 8011490:	4293      	cmp	r3, r2
 8011492:	d100      	bne.n	8011496 <UART_SetConfig+0xd6>
 8011494:	e087      	b.n	80115a6 <UART_SetConfig+0x1e6>
 8011496:	d80c      	bhi.n	80114b2 <UART_SetConfig+0xf2>
 8011498:	2b00      	cmp	r3, #0
 801149a:	d04a      	beq.n	8011532 <UART_SetConfig+0x172>
 801149c:	2280      	movs	r2, #128	; 0x80
 801149e:	0252      	lsls	r2, r2, #9
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d0de      	beq.n	8011462 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114a4:	2380      	movs	r3, #128	; 0x80
 80114a6:	021b      	lsls	r3, r3, #8
 80114a8:	69e2      	ldr	r2, [r4, #28]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d05b      	beq.n	8011566 <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 80114ae:	2001      	movs	r0, #1
 80114b0:	e055      	b.n	801155e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80114b2:	22c0      	movs	r2, #192	; 0xc0
 80114b4:	0292      	lsls	r2, r2, #10
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d1f4      	bne.n	80114a4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114ba:	2380      	movs	r3, #128	; 0x80
 80114bc:	021b      	lsls	r3, r3, #8
 80114be:	69e2      	ldr	r2, [r4, #28]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d02f      	beq.n	8011524 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80114c4:	6861      	ldr	r1, [r4, #4]
 80114c6:	484a      	ldr	r0, [pc, #296]	; (80115f0 <UART_SetConfig+0x230>)
 80114c8:	f7ee fe42 	bl	8000150 <__udivsi3>
 80114cc:	0400      	lsls	r0, r0, #16
 80114ce:	0c00      	lsrs	r0, r0, #16
 80114d0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80114d2:	2000      	movs	r0, #0
        break;
 80114d4:	e043      	b.n	801155e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80114d6:	4b45      	ldr	r3, [pc, #276]	; (80115ec <UART_SetConfig+0x22c>)
 80114d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114da:	22c0      	movs	r2, #192	; 0xc0
 80114dc:	0312      	lsls	r2, r2, #12
 80114de:	4013      	ands	r3, r2
 80114e0:	2280      	movs	r2, #128	; 0x80
 80114e2:	0312      	lsls	r2, r2, #12
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d051      	beq.n	801158c <UART_SetConfig+0x1cc>
 80114e8:	d813      	bhi.n	8011512 <UART_SetConfig+0x152>
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d021      	beq.n	8011532 <UART_SetConfig+0x172>
 80114ee:	2280      	movs	r2, #128	; 0x80
 80114f0:	02d2      	lsls	r2, r2, #11
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d1d6      	bne.n	80114a4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114f6:	2380      	movs	r3, #128	; 0x80
 80114f8:	021b      	lsls	r3, r3, #8
 80114fa:	69e2      	ldr	r2, [r4, #28]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d1b5      	bne.n	801146c <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011500:	f7ff f936 	bl	8010770 <HAL_RCC_GetSysClockFreq>
 8011504:	0040      	lsls	r0, r0, #1
 8011506:	6861      	ldr	r1, [r4, #4]
 8011508:	f7ee fe22 	bl	8000150 <__udivsi3>
 801150c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801150e:	2000      	movs	r0, #0
        break;
 8011510:	e01c      	b.n	801154c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011512:	22c0      	movs	r2, #192	; 0xc0
 8011514:	0312      	lsls	r2, r2, #12
 8011516:	4293      	cmp	r3, r2
 8011518:	d1c4      	bne.n	80114a4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801151a:	2380      	movs	r3, #128	; 0x80
 801151c:	021b      	lsls	r3, r3, #8
 801151e:	69e2      	ldr	r2, [r4, #28]
 8011520:	429a      	cmp	r2, r3
 8011522:	d1cf      	bne.n	80114c4 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011524:	6861      	ldr	r1, [r4, #4]
 8011526:	4833      	ldr	r0, [pc, #204]	; (80115f4 <UART_SetConfig+0x234>)
 8011528:	f7ee fe12 	bl	8000150 <__udivsi3>
 801152c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801152e:	2000      	movs	r0, #0
        break;
 8011530:	e00c      	b.n	801154c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011532:	2380      	movs	r3, #128	; 0x80
 8011534:	021b      	lsls	r3, r3, #8
 8011536:	69e2      	ldr	r2, [r4, #28]
 8011538:	429a      	cmp	r2, r3
 801153a:	d11c      	bne.n	8011576 <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801153c:	f7ff f97c 	bl	8010838 <HAL_RCC_GetPCLK1Freq>
 8011540:	0040      	lsls	r0, r0, #1
 8011542:	6861      	ldr	r1, [r4, #4]
 8011544:	f7ee fe04 	bl	8000150 <__udivsi3>
 8011548:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801154a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 801154c:	220f      	movs	r2, #15
 801154e:	0019      	movs	r1, r3
 8011550:	4391      	bics	r1, r2
 8011552:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8011554:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8011556:	071b      	lsls	r3, r3, #28
 8011558:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 801155a:	4313      	orrs	r3, r2
 801155c:	60cb      	str	r3, [r1, #12]
}
 801155e:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8011560:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8011562:	2300      	movs	r3, #0
 8011564:	e7f2      	b.n	801154c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011566:	2001      	movs	r0, #1
 8011568:	2300      	movs	r3, #0
 801156a:	e7ef      	b.n	801154c <UART_SetConfig+0x18c>
 801156c:	2380      	movs	r3, #128	; 0x80
 801156e:	021b      	lsls	r3, r3, #8
 8011570:	69e2      	ldr	r2, [r4, #28]
 8011572:	429a      	cmp	r2, r3
 8011574:	d0e2      	beq.n	801153c <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011576:	f7ff f95f 	bl	8010838 <HAL_RCC_GetPCLK1Freq>
 801157a:	6825      	ldr	r5, [r4, #0]
 801157c:	6861      	ldr	r1, [r4, #4]
 801157e:	f7ee fde7 	bl	8000150 <__udivsi3>
 8011582:	0400      	lsls	r0, r0, #16
 8011584:	0c00      	lsrs	r0, r0, #16
 8011586:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011588:	2000      	movs	r0, #0
  return ret;
 801158a:	e7e8      	b.n	801155e <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801158c:	2380      	movs	r3, #128	; 0x80
 801158e:	021b      	lsls	r3, r3, #8
 8011590:	69e2      	ldr	r2, [r4, #28]
 8011592:	429a      	cmp	r2, r3
 8011594:	d10c      	bne.n	80115b0 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011596:	6861      	ldr	r1, [r4, #4]
 8011598:	2080      	movs	r0, #128	; 0x80
 801159a:	0240      	lsls	r0, r0, #9
 801159c:	f7ee fdd8 	bl	8000150 <__udivsi3>
 80115a0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80115a2:	2000      	movs	r0, #0
        break;
 80115a4:	e7d2      	b.n	801154c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115a6:	2380      	movs	r3, #128	; 0x80
 80115a8:	021b      	lsls	r3, r3, #8
 80115aa:	69e2      	ldr	r2, [r4, #28]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d0f2      	beq.n	8011596 <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80115b0:	6861      	ldr	r1, [r4, #4]
 80115b2:	2080      	movs	r0, #128	; 0x80
 80115b4:	0200      	lsls	r0, r0, #8
 80115b6:	f7ee fdcb 	bl	8000150 <__udivsi3>
 80115ba:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80115bc:	2000      	movs	r0, #0
        break;
 80115be:	e7ce      	b.n	801155e <UART_SetConfig+0x19e>
 80115c0:	efff69f3 	.word	0xefff69f3
 80115c4:	ffffcfff 	.word	0xffffcfff
 80115c8:	fffff4ff 	.word	0xfffff4ff
 80115cc:	40013800 	.word	0x40013800
 80115d0:	40004400 	.word	0x40004400
 80115d4:	40004800 	.word	0x40004800
 80115d8:	40004c00 	.word	0x40004c00
 80115dc:	40005000 	.word	0x40005000
 80115e0:	40011400 	.word	0x40011400
 80115e4:	40011800 	.word	0x40011800
 80115e8:	40011c00 	.word	0x40011c00
 80115ec:	40021000 	.word	0x40021000
 80115f0:	007a1200 	.word	0x007a1200
 80115f4:	00f42400 	.word	0x00f42400

080115f8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80115f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80115fa:	07db      	lsls	r3, r3, #31
 80115fc:	d506      	bpl.n	801160c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80115fe:	6802      	ldr	r2, [r0, #0]
 8011600:	6853      	ldr	r3, [r2, #4]
 8011602:	492c      	ldr	r1, [pc, #176]	; (80116b4 <UART_AdvFeatureConfig+0xbc>)
 8011604:	400b      	ands	r3, r1
 8011606:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8011608:	430b      	orrs	r3, r1
 801160a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801160c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801160e:	079b      	lsls	r3, r3, #30
 8011610:	d506      	bpl.n	8011620 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011612:	6802      	ldr	r2, [r0, #0]
 8011614:	6853      	ldr	r3, [r2, #4]
 8011616:	4928      	ldr	r1, [pc, #160]	; (80116b8 <UART_AdvFeatureConfig+0xc0>)
 8011618:	400b      	ands	r3, r1
 801161a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801161c:	430b      	orrs	r3, r1
 801161e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011622:	075b      	lsls	r3, r3, #29
 8011624:	d506      	bpl.n	8011634 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011626:	6802      	ldr	r2, [r0, #0]
 8011628:	6853      	ldr	r3, [r2, #4]
 801162a:	4924      	ldr	r1, [pc, #144]	; (80116bc <UART_AdvFeatureConfig+0xc4>)
 801162c:	400b      	ands	r3, r1
 801162e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011630:	430b      	orrs	r3, r1
 8011632:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011634:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011636:	071b      	lsls	r3, r3, #28
 8011638:	d506      	bpl.n	8011648 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801163a:	6802      	ldr	r2, [r0, #0]
 801163c:	6853      	ldr	r3, [r2, #4]
 801163e:	4920      	ldr	r1, [pc, #128]	; (80116c0 <UART_AdvFeatureConfig+0xc8>)
 8011640:	400b      	ands	r3, r1
 8011642:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8011644:	430b      	orrs	r3, r1
 8011646:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011648:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801164a:	06db      	lsls	r3, r3, #27
 801164c:	d506      	bpl.n	801165c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801164e:	6802      	ldr	r2, [r0, #0]
 8011650:	6893      	ldr	r3, [r2, #8]
 8011652:	491c      	ldr	r1, [pc, #112]	; (80116c4 <UART_AdvFeatureConfig+0xcc>)
 8011654:	400b      	ands	r3, r1
 8011656:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8011658:	430b      	orrs	r3, r1
 801165a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801165c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801165e:	069b      	lsls	r3, r3, #26
 8011660:	d506      	bpl.n	8011670 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011662:	6802      	ldr	r2, [r0, #0]
 8011664:	6893      	ldr	r3, [r2, #8]
 8011666:	4918      	ldr	r1, [pc, #96]	; (80116c8 <UART_AdvFeatureConfig+0xd0>)
 8011668:	400b      	ands	r3, r1
 801166a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801166c:	430b      	orrs	r3, r1
 801166e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011670:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011672:	065b      	lsls	r3, r3, #25
 8011674:	d50b      	bpl.n	801168e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011676:	6802      	ldr	r2, [r0, #0]
 8011678:	6853      	ldr	r3, [r2, #4]
 801167a:	4914      	ldr	r1, [pc, #80]	; (80116cc <UART_AdvFeatureConfig+0xd4>)
 801167c:	400b      	ands	r3, r1
 801167e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011680:	430b      	orrs	r3, r1
 8011682:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011684:	2380      	movs	r3, #128	; 0x80
 8011686:	035b      	lsls	r3, r3, #13
 8011688:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801168a:	429a      	cmp	r2, r3
 801168c:	d00a      	beq.n	80116a4 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801168e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011690:	061b      	lsls	r3, r3, #24
 8011692:	d506      	bpl.n	80116a2 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011694:	6802      	ldr	r2, [r0, #0]
 8011696:	6853      	ldr	r3, [r2, #4]
 8011698:	490d      	ldr	r1, [pc, #52]	; (80116d0 <UART_AdvFeatureConfig+0xd8>)
 801169a:	400b      	ands	r3, r1
 801169c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801169e:	430b      	orrs	r3, r1
 80116a0:	6053      	str	r3, [r2, #4]
}
 80116a2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80116a4:	6802      	ldr	r2, [r0, #0]
 80116a6:	6853      	ldr	r3, [r2, #4]
 80116a8:	490a      	ldr	r1, [pc, #40]	; (80116d4 <UART_AdvFeatureConfig+0xdc>)
 80116aa:	400b      	ands	r3, r1
 80116ac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80116ae:	430b      	orrs	r3, r1
 80116b0:	6053      	str	r3, [r2, #4]
 80116b2:	e7ec      	b.n	801168e <UART_AdvFeatureConfig+0x96>
 80116b4:	fffdffff 	.word	0xfffdffff
 80116b8:	fffeffff 	.word	0xfffeffff
 80116bc:	fffbffff 	.word	0xfffbffff
 80116c0:	ffff7fff 	.word	0xffff7fff
 80116c4:	ffffefff 	.word	0xffffefff
 80116c8:	ffffdfff 	.word	0xffffdfff
 80116cc:	ffefffff 	.word	0xffefffff
 80116d0:	fff7ffff 	.word	0xfff7ffff
 80116d4:	ff9fffff 	.word	0xff9fffff

080116d8 <UART_WaitOnFlagUntilTimeout>:
{
 80116d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116da:	46c6      	mov	lr, r8
 80116dc:	b500      	push	{lr}
 80116de:	0007      	movs	r7, r0
 80116e0:	000c      	movs	r4, r1
 80116e2:	0016      	movs	r6, r2
 80116e4:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80116e6:	f7fd fb45 	bl	800ed74 <HAL_GetTick>
 80116ea:	4680      	mov	r8, r0
  if(Status == RESET)
 80116ec:	2e00      	cmp	r6, #0
 80116ee:	d029      	beq.n	8011744 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	69da      	ldr	r2, [r3, #28]
 80116f4:	4022      	ands	r2, r4
 80116f6:	42a2      	cmp	r2, r4
 80116f8:	d152      	bne.n	80117a0 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80116fa:	1c6a      	adds	r2, r5, #1
 80116fc:	d0f9      	beq.n	80116f2 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80116fe:	2d00      	cmp	r5, #0
 8011700:	d005      	beq.n	801170e <UART_WaitOnFlagUntilTimeout+0x36>
 8011702:	f7fd fb37 	bl	800ed74 <HAL_GetTick>
 8011706:	4643      	mov	r3, r8
 8011708:	1ac0      	subs	r0, r0, r3
 801170a:	42a8      	cmp	r0, r5
 801170c:	d9f0      	bls.n	80116f0 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	6813      	ldr	r3, [r2, #0]
 8011712:	2180      	movs	r1, #128	; 0x80
 8011714:	438b      	bics	r3, r1
 8011716:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	6813      	ldr	r3, [r2, #0]
 801171c:	3960      	subs	r1, #96	; 0x60
 801171e:	438b      	bics	r3, r1
 8011720:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	6813      	ldr	r3, [r2, #0]
 8011726:	491f      	ldr	r1, [pc, #124]	; (80117a4 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8011728:	400b      	ands	r3, r1
 801172a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801172c:	6839      	ldr	r1, [r7, #0]
 801172e:	688b      	ldr	r3, [r1, #8]
 8011730:	2201      	movs	r2, #1
 8011732:	4393      	bics	r3, r2
 8011734:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8011736:	2369      	movs	r3, #105	; 0x69
 8011738:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 801173a:	3b01      	subs	r3, #1
 801173c:	2200      	movs	r2, #0
 801173e:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011740:	2003      	movs	r0, #3
 8011742:	e02a      	b.n	801179a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	69d9      	ldr	r1, [r3, #28]
 8011748:	4021      	ands	r1, r4
 801174a:	42a1      	cmp	r1, r4
 801174c:	d024      	beq.n	8011798 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801174e:	1c6a      	adds	r2, r5, #1
 8011750:	d0f9      	beq.n	8011746 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011752:	2d00      	cmp	r5, #0
 8011754:	d005      	beq.n	8011762 <UART_WaitOnFlagUntilTimeout+0x8a>
 8011756:	f7fd fb0d 	bl	800ed74 <HAL_GetTick>
 801175a:	4643      	mov	r3, r8
 801175c:	1ac0      	subs	r0, r0, r3
 801175e:	42a8      	cmp	r0, r5
 8011760:	d9f0      	bls.n	8011744 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	6813      	ldr	r3, [r2, #0]
 8011766:	2180      	movs	r1, #128	; 0x80
 8011768:	438b      	bics	r3, r1
 801176a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	6813      	ldr	r3, [r2, #0]
 8011770:	3960      	subs	r1, #96	; 0x60
 8011772:	438b      	bics	r3, r1
 8011774:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	6813      	ldr	r3, [r2, #0]
 801177a:	490a      	ldr	r1, [pc, #40]	; (80117a4 <UART_WaitOnFlagUntilTimeout+0xcc>)
 801177c:	400b      	ands	r3, r1
 801177e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011780:	6839      	ldr	r1, [r7, #0]
 8011782:	688b      	ldr	r3, [r1, #8]
 8011784:	2201      	movs	r2, #1
 8011786:	4393      	bics	r3, r2
 8011788:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801178a:	2369      	movs	r3, #105	; 0x69
 801178c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 801178e:	3b01      	subs	r3, #1
 8011790:	2200      	movs	r2, #0
 8011792:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011794:	2003      	movs	r0, #3
 8011796:	e000      	b.n	801179a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8011798:	0030      	movs	r0, r6
}
 801179a:	bc80      	pop	{r7}
 801179c:	46b8      	mov	r8, r7
 801179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80117a0:	2000      	movs	r0, #0
 80117a2:	e7fa      	b.n	801179a <UART_WaitOnFlagUntilTimeout+0xc2>
 80117a4:	fffffeff 	.word	0xfffffeff

080117a8 <HAL_UART_Transmit>:
{
 80117a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117aa:	46c6      	mov	lr, r8
 80117ac:	b500      	push	{lr}
 80117ae:	0004      	movs	r4, r0
 80117b0:	000d      	movs	r5, r1
 80117b2:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80117b4:	2369      	movs	r3, #105	; 0x69
 80117b6:	5cc3      	ldrb	r3, [r0, r3]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d003      	beq.n	80117c4 <HAL_UART_Transmit+0x1c>
 80117bc:	2369      	movs	r3, #105	; 0x69
 80117be:	5cc3      	ldrb	r3, [r0, r3]
 80117c0:	2b22      	cmp	r3, #34	; 0x22
 80117c2:	d152      	bne.n	801186a <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 80117c4:	2d00      	cmp	r5, #0
 80117c6:	d054      	beq.n	8011872 <HAL_UART_Transmit+0xca>
 80117c8:	2a00      	cmp	r2, #0
 80117ca:	d054      	beq.n	8011876 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 80117cc:	2368      	movs	r3, #104	; 0x68
 80117ce:	5ce3      	ldrb	r3, [r4, r3]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d052      	beq.n	801187a <HAL_UART_Transmit+0xd2>
 80117d4:	2368      	movs	r3, #104	; 0x68
 80117d6:	2101      	movs	r1, #1
 80117d8:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117da:	2300      	movs	r3, #0
 80117dc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80117de:	3369      	adds	r3, #105	; 0x69
 80117e0:	5ce3      	ldrb	r3, [r4, r3]
 80117e2:	2b22      	cmp	r3, #34	; 0x22
 80117e4:	d009      	beq.n	80117fa <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80117e6:	2369      	movs	r3, #105	; 0x69
 80117e8:	2112      	movs	r1, #18
 80117ea:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80117ec:	2350      	movs	r3, #80	; 0x50
 80117ee:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80117f0:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117f2:	2380      	movs	r3, #128	; 0x80
 80117f4:	015b      	lsls	r3, r3, #5
 80117f6:	4698      	mov	r8, r3
 80117f8:	e00a      	b.n	8011810 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80117fa:	3347      	adds	r3, #71	; 0x47
 80117fc:	3131      	adds	r1, #49	; 0x31
 80117fe:	54e1      	strb	r1, [r4, r3]
 8011800:	e7f4      	b.n	80117ec <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8011802:	782b      	ldrb	r3, [r5, #0]
 8011804:	6822      	ldr	r2, [r4, #0]
 8011806:	8513      	strh	r3, [r2, #40]	; 0x28
 8011808:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 801180a:	5ba2      	ldrh	r2, [r4, r6]
 801180c:	2a00      	cmp	r2, #0
 801180e:	d016      	beq.n	801183e <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8011810:	3a01      	subs	r2, #1
 8011812:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8011814:	003b      	movs	r3, r7
 8011816:	2200      	movs	r2, #0
 8011818:	2180      	movs	r1, #128	; 0x80
 801181a:	0020      	movs	r0, r4
 801181c:	f7ff ff5c 	bl	80116d8 <UART_WaitOnFlagUntilTimeout>
 8011820:	2800      	cmp	r0, #0
 8011822:	d12c      	bne.n	801187e <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011824:	68a3      	ldr	r3, [r4, #8]
 8011826:	4543      	cmp	r3, r8
 8011828:	d1eb      	bne.n	8011802 <HAL_UART_Transmit+0x5a>
 801182a:	6923      	ldr	r3, [r4, #16]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d1e8      	bne.n	8011802 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011830:	882b      	ldrh	r3, [r5, #0]
 8011832:	05db      	lsls	r3, r3, #23
 8011834:	0ddb      	lsrs	r3, r3, #23
 8011836:	6822      	ldr	r2, [r4, #0]
 8011838:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 801183a:	3502      	adds	r5, #2
 801183c:	e7e5      	b.n	801180a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801183e:	003b      	movs	r3, r7
 8011840:	2140      	movs	r1, #64	; 0x40
 8011842:	0020      	movs	r0, r4
 8011844:	f7ff ff48 	bl	80116d8 <UART_WaitOnFlagUntilTimeout>
 8011848:	2800      	cmp	r0, #0
 801184a:	d11a      	bne.n	8011882 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801184c:	2369      	movs	r3, #105	; 0x69
 801184e:	5ce3      	ldrb	r3, [r4, r3]
 8011850:	2b32      	cmp	r3, #50	; 0x32
 8011852:	d006      	beq.n	8011862 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8011854:	2369      	movs	r3, #105	; 0x69
 8011856:	2201      	movs	r2, #1
 8011858:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801185a:	2368      	movs	r3, #104	; 0x68
 801185c:	2200      	movs	r2, #0
 801185e:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011860:	e004      	b.n	801186c <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011862:	3337      	adds	r3, #55	; 0x37
 8011864:	2222      	movs	r2, #34	; 0x22
 8011866:	54e2      	strb	r2, [r4, r3]
 8011868:	e7f7      	b.n	801185a <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 801186a:	2002      	movs	r0, #2
}
 801186c:	bc80      	pop	{r7}
 801186e:	46b8      	mov	r8, r7
 8011870:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8011872:	2001      	movs	r0, #1
 8011874:	e7fa      	b.n	801186c <HAL_UART_Transmit+0xc4>
 8011876:	2001      	movs	r0, #1
 8011878:	e7f8      	b.n	801186c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801187a:	2002      	movs	r0, #2
 801187c:	e7f6      	b.n	801186c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 801187e:	2003      	movs	r0, #3
 8011880:	e7f4      	b.n	801186c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8011882:	2003      	movs	r0, #3
 8011884:	e7f2      	b.n	801186c <HAL_UART_Transmit+0xc4>
	...

08011888 <UART_CheckIdleState>:
{
 8011888:	b510      	push	{r4, lr}
 801188a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801188c:	2300      	movs	r3, #0
 801188e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011890:	6803      	ldr	r3, [r0, #0]
 8011892:	4a18      	ldr	r2, [pc, #96]	; (80118f4 <UART_CheckIdleState+0x6c>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d005      	beq.n	80118a4 <UART_CheckIdleState+0x1c>
 8011898:	4a17      	ldr	r2, [pc, #92]	; (80118f8 <UART_CheckIdleState+0x70>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d002      	beq.n	80118a4 <UART_CheckIdleState+0x1c>
 801189e:	4a17      	ldr	r2, [pc, #92]	; (80118fc <UART_CheckIdleState+0x74>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d106      	bne.n	80118b2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	071b      	lsls	r3, r3, #28
 80118a8:	d40b      	bmi.n	80118c2 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80118aa:	6823      	ldr	r3, [r4, #0]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	075b      	lsls	r3, r3, #29
 80118b0:	d413      	bmi.n	80118da <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80118b2:	2369      	movs	r3, #105	; 0x69
 80118b4:	2201      	movs	r2, #1
 80118b6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80118b8:	3b01      	subs	r3, #1
 80118ba:	2200      	movs	r2, #0
 80118bc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80118be:	2000      	movs	r0, #0
}
 80118c0:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80118c2:	23fa      	movs	r3, #250	; 0xfa
 80118c4:	2180      	movs	r1, #128	; 0x80
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	2200      	movs	r2, #0
 80118ca:	0389      	lsls	r1, r1, #14
 80118cc:	0020      	movs	r0, r4
 80118ce:	f7ff ff03 	bl	80116d8 <UART_WaitOnFlagUntilTimeout>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d0e9      	beq.n	80118aa <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80118d6:	2003      	movs	r0, #3
 80118d8:	e7f2      	b.n	80118c0 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80118da:	23fa      	movs	r3, #250	; 0xfa
 80118dc:	2180      	movs	r1, #128	; 0x80
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	2200      	movs	r2, #0
 80118e2:	03c9      	lsls	r1, r1, #15
 80118e4:	0020      	movs	r0, r4
 80118e6:	f7ff fef7 	bl	80116d8 <UART_WaitOnFlagUntilTimeout>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d0e1      	beq.n	80118b2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80118ee:	2003      	movs	r0, #3
 80118f0:	e7e6      	b.n	80118c0 <UART_CheckIdleState+0x38>
 80118f2:	46c0      	nop			; (mov r8, r8)
 80118f4:	40013800 	.word	0x40013800
 80118f8:	40004400 	.word	0x40004400
 80118fc:	40004800 	.word	0x40004800

08011900 <HAL_UART_Init>:
{
 8011900:	b510      	push	{r4, lr}
 8011902:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011904:	d030      	beq.n	8011968 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8011906:	2369      	movs	r3, #105	; 0x69
 8011908:	5cc3      	ldrb	r3, [r0, r3]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d022      	beq.n	8011954 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 801190e:	2369      	movs	r3, #105	; 0x69
 8011910:	2202      	movs	r2, #2
 8011912:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8011914:	6822      	ldr	r2, [r4, #0]
 8011916:	6813      	ldr	r3, [r2, #0]
 8011918:	2101      	movs	r1, #1
 801191a:	438b      	bics	r3, r1
 801191c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801191e:	0020      	movs	r0, r4
 8011920:	f7ff fd4e 	bl	80113c0 <UART_SetConfig>
 8011924:	2801      	cmp	r0, #1
 8011926:	d014      	beq.n	8011952 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801192a:	2b00      	cmp	r3, #0
 801192c:	d118      	bne.n	8011960 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801192e:	6822      	ldr	r2, [r4, #0]
 8011930:	6853      	ldr	r3, [r2, #4]
 8011932:	490e      	ldr	r1, [pc, #56]	; (801196c <HAL_UART_Init+0x6c>)
 8011934:	400b      	ands	r3, r1
 8011936:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011938:	6822      	ldr	r2, [r4, #0]
 801193a:	6893      	ldr	r3, [r2, #8]
 801193c:	212a      	movs	r1, #42	; 0x2a
 801193e:	438b      	bics	r3, r1
 8011940:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8011942:	6822      	ldr	r2, [r4, #0]
 8011944:	6813      	ldr	r3, [r2, #0]
 8011946:	3929      	subs	r1, #41	; 0x29
 8011948:	430b      	orrs	r3, r1
 801194a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801194c:	0020      	movs	r0, r4
 801194e:	f7ff ff9b 	bl	8011888 <UART_CheckIdleState>
}
 8011952:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011954:	3368      	adds	r3, #104	; 0x68
 8011956:	2200      	movs	r2, #0
 8011958:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801195a:	f7fa ff09 	bl	800c770 <HAL_UART_MspInit>
 801195e:	e7d6      	b.n	801190e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8011960:	0020      	movs	r0, r4
 8011962:	f7ff fe49 	bl	80115f8 <UART_AdvFeatureConfig>
 8011966:	e7e2      	b.n	801192e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8011968:	2001      	movs	r0, #1
 801196a:	e7f2      	b.n	8011952 <HAL_UART_Init+0x52>
 801196c:	ffffb7ff 	.word	0xffffb7ff

08011970 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011970:	2369      	movs	r3, #105	; 0x69
 8011972:	5cc3      	ldrb	r3, [r0, r3]
 8011974:	2b12      	cmp	r3, #18
 8011976:	d003      	beq.n	8011980 <UART_Transmit_IT+0x10>
 8011978:	2369      	movs	r3, #105	; 0x69
 801197a:	5cc3      	ldrb	r3, [r0, r3]
 801197c:	2b32      	cmp	r3, #50	; 0x32
 801197e:	d12d      	bne.n	80119dc <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8011980:	2352      	movs	r3, #82	; 0x52
 8011982:	5ac3      	ldrh	r3, [r0, r3]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10b      	bne.n	80119a0 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011988:	6802      	ldr	r2, [r0, #0]
 801198a:	6813      	ldr	r3, [r2, #0]
 801198c:	2180      	movs	r1, #128	; 0x80
 801198e:	438b      	bics	r3, r1
 8011990:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011992:	6802      	ldr	r2, [r0, #0]
 8011994:	6813      	ldr	r3, [r2, #0]
 8011996:	3940      	subs	r1, #64	; 0x40
 8011998:	430b      	orrs	r3, r1
 801199a:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 801199c:	2000      	movs	r0, #0
 801199e:	e00f      	b.n	80119c0 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119a0:	2380      	movs	r3, #128	; 0x80
 80119a2:	015b      	lsls	r3, r3, #5
 80119a4:	6882      	ldr	r2, [r0, #8]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d00b      	beq.n	80119c2 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80119aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	64c2      	str	r2, [r0, #76]	; 0x4c
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	6802      	ldr	r2, [r0, #0]
 80119b4:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 80119b6:	2252      	movs	r2, #82	; 0x52
 80119b8:	5a83      	ldrh	r3, [r0, r2]
 80119ba:	3b01      	subs	r3, #1
 80119bc:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80119be:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80119c0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119c2:	6903      	ldr	r3, [r0, #16]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d1f0      	bne.n	80119aa <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80119c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	05db      	lsls	r3, r3, #23
 80119ce:	0ddb      	lsrs	r3, r3, #23
 80119d0:	6802      	ldr	r2, [r0, #0]
 80119d2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80119d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80119d6:	3302      	adds	r3, #2
 80119d8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80119da:	e7ec      	b.n	80119b6 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 80119dc:	2002      	movs	r0, #2
 80119de:	e7ef      	b.n	80119c0 <UART_Transmit_IT+0x50>

080119e0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80119e0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80119e2:	6802      	ldr	r2, [r0, #0]
 80119e4:	6813      	ldr	r3, [r2, #0]
 80119e6:	2140      	movs	r1, #64	; 0x40
 80119e8:	438b      	bics	r3, r1
 80119ea:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80119ec:	2369      	movs	r3, #105	; 0x69
 80119ee:	5cc3      	ldrb	r3, [r0, r3]
 80119f0:	2b32      	cmp	r3, #50	; 0x32
 80119f2:	d00a      	beq.n	8011a0a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80119f4:	6801      	ldr	r1, [r0, #0]
 80119f6:	688b      	ldr	r3, [r1, #8]
 80119f8:	2201      	movs	r2, #1
 80119fa:	4393      	bics	r3, r2
 80119fc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80119fe:	2369      	movs	r3, #105	; 0x69
 8011a00:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8011a02:	f7fa fba3 	bl	800c14c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8011a06:	2000      	movs	r0, #0
 8011a08:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011a0a:	3337      	adds	r3, #55	; 0x37
 8011a0c:	2222      	movs	r2, #34	; 0x22
 8011a0e:	54c2      	strb	r2, [r0, r3]
 8011a10:	e7f7      	b.n	8011a02 <UART_EndTransmit_IT+0x22>
	...

08011a14 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011a14:	b510      	push	{r4, lr}
 8011a16:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011a18:	2269      	movs	r2, #105	; 0x69
 8011a1a:	5c82      	ldrb	r2, [r0, r2]
 8011a1c:	2a22      	cmp	r2, #34	; 0x22
 8011a1e:	d003      	beq.n	8011a28 <UART_Receive_IT+0x14>
 8011a20:	2269      	movs	r2, #105	; 0x69
 8011a22:	5c82      	ldrb	r2, [r0, r2]
 8011a24:	2a32      	cmp	r2, #50	; 0x32
 8011a26:	d13f      	bne.n	8011aa8 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 8011a28:	225c      	movs	r2, #92	; 0x5c
 8011a2a:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a2c:	2180      	movs	r1, #128	; 0x80
 8011a2e:	0149      	lsls	r1, r1, #5
 8011a30:	689a      	ldr	r2, [r3, #8]
 8011a32:	428a      	cmp	r2, r1
 8011a34:	d028      	beq.n	8011a88 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8011a3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011a3c:	1c4c      	adds	r4, r1, #1
 8011a3e:	655c      	str	r4, [r3, #84]	; 0x54
 8011a40:	4002      	ands	r2, r0
 8011a42:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8011a44:	215a      	movs	r1, #90	; 0x5a
 8011a46:	5a5a      	ldrh	r2, [r3, r1]
 8011a48:	3a01      	subs	r2, #1
 8011a4a:	b292      	uxth	r2, r2
 8011a4c:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8011a4e:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8011a50:	2a00      	cmp	r2, #0
 8011a52:	d118      	bne.n	8011a86 <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011a54:	6819      	ldr	r1, [r3, #0]
 8011a56:	680a      	ldr	r2, [r1, #0]
 8011a58:	3020      	adds	r0, #32
 8011a5a:	4382      	bics	r2, r0
 8011a5c:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011a5e:	2269      	movs	r2, #105	; 0x69
 8011a60:	5c9a      	ldrb	r2, [r3, r2]
 8011a62:	2a32      	cmp	r2, #50	; 0x32
 8011a64:	d01c      	beq.n	8011aa0 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011a66:	6819      	ldr	r1, [r3, #0]
 8011a68:	680a      	ldr	r2, [r1, #0]
 8011a6a:	4810      	ldr	r0, [pc, #64]	; (8011aac <UART_Receive_IT+0x98>)
 8011a6c:	4002      	ands	r2, r0
 8011a6e:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011a70:	6818      	ldr	r0, [r3, #0]
 8011a72:	6882      	ldr	r2, [r0, #8]
 8011a74:	2101      	movs	r1, #1
 8011a76:	438a      	bics	r2, r1
 8011a78:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 8011a7a:	2269      	movs	r2, #105	; 0x69
 8011a7c:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 8011a7e:	0018      	movs	r0, r3
 8011a80:	f7fa fba8 	bl	800c1d4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011a84:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011a86:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a88:	691a      	ldr	r2, [r3, #16]
 8011a8a:	2a00      	cmp	r2, #0
 8011a8c:	d1d3      	bne.n	8011a36 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8011a92:	4002      	ands	r2, r0
 8011a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011a96:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8011a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a9a:	3202      	adds	r2, #2
 8011a9c:	655a      	str	r2, [r3, #84]	; 0x54
 8011a9e:	e7d1      	b.n	8011a44 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011aa0:	3237      	adds	r2, #55	; 0x37
 8011aa2:	2112      	movs	r1, #18
 8011aa4:	5499      	strb	r1, [r3, r2]
 8011aa6:	e7ea      	b.n	8011a7e <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8011aa8:	2002      	movs	r0, #2
 8011aaa:	e7ec      	b.n	8011a86 <UART_Receive_IT+0x72>
 8011aac:	fffffeff 	.word	0xfffffeff

08011ab0 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011ab0:	4770      	bx	lr

08011ab2 <HAL_UART_IRQHandler>:
{
 8011ab2:	b510      	push	{r4, lr}
 8011ab4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011ab6:	6803      	ldr	r3, [r0, #0]
 8011ab8:	69da      	ldr	r2, [r3, #28]
 8011aba:	07d2      	lsls	r2, r2, #31
 8011abc:	d509      	bpl.n	8011ad2 <HAL_UART_IRQHandler+0x20>
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	05d2      	lsls	r2, r2, #23
 8011ac2:	d506      	bpl.n	8011ad2 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ac8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011aca:	4313      	orrs	r3, r2
 8011acc:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011ace:	2369      	movs	r3, #105	; 0x69
 8011ad0:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011ad2:	6823      	ldr	r3, [r4, #0]
 8011ad4:	69da      	ldr	r2, [r3, #28]
 8011ad6:	0792      	lsls	r2, r2, #30
 8011ad8:	d50b      	bpl.n	8011af2 <HAL_UART_IRQHandler+0x40>
 8011ada:	689a      	ldr	r2, [r3, #8]
 8011adc:	07d2      	lsls	r2, r2, #31
 8011ade:	d508      	bpl.n	8011af2 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011ae0:	2202      	movs	r2, #2
 8011ae2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011ae4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011ae6:	3202      	adds	r2, #2
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011aec:	2369      	movs	r3, #105	; 0x69
 8011aee:	3a03      	subs	r2, #3
 8011af0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	69da      	ldr	r2, [r3, #28]
 8011af6:	0752      	lsls	r2, r2, #29
 8011af8:	d50b      	bpl.n	8011b12 <HAL_UART_IRQHandler+0x60>
 8011afa:	689a      	ldr	r2, [r3, #8]
 8011afc:	07d2      	lsls	r2, r2, #31
 8011afe:	d508      	bpl.n	8011b12 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011b00:	2204      	movs	r2, #4
 8011b02:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011b06:	3a02      	subs	r2, #2
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011b0c:	2369      	movs	r3, #105	; 0x69
 8011b0e:	3a01      	subs	r2, #1
 8011b10:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011b12:	6823      	ldr	r3, [r4, #0]
 8011b14:	69da      	ldr	r2, [r3, #28]
 8011b16:	0712      	lsls	r2, r2, #28
 8011b18:	d50a      	bpl.n	8011b30 <HAL_UART_IRQHandler+0x7e>
 8011b1a:	689a      	ldr	r2, [r3, #8]
 8011b1c:	07d2      	lsls	r2, r2, #31
 8011b1e:	d507      	bpl.n	8011b30 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011b20:	2208      	movs	r2, #8
 8011b22:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011b24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011b26:	4313      	orrs	r3, r2
 8011b28:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011b2a:	2369      	movs	r3, #105	; 0x69
 8011b2c:	3a07      	subs	r2, #7
 8011b2e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d11c      	bne.n	8011b70 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	69da      	ldr	r2, [r3, #28]
 8011b3a:	02d2      	lsls	r2, r2, #11
 8011b3c:	d502      	bpl.n	8011b44 <HAL_UART_IRQHandler+0x92>
 8011b3e:	689a      	ldr	r2, [r3, #8]
 8011b40:	0252      	lsls	r2, r2, #9
 8011b42:	d419      	bmi.n	8011b78 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011b44:	6823      	ldr	r3, [r4, #0]
 8011b46:	69da      	ldr	r2, [r3, #28]
 8011b48:	0692      	lsls	r2, r2, #26
 8011b4a:	d502      	bpl.n	8011b52 <HAL_UART_IRQHandler+0xa0>
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	069b      	lsls	r3, r3, #26
 8011b50:	d41c      	bmi.n	8011b8c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011b52:	6823      	ldr	r3, [r4, #0]
 8011b54:	69da      	ldr	r2, [r3, #28]
 8011b56:	0612      	lsls	r2, r2, #24
 8011b58:	d502      	bpl.n	8011b60 <HAL_UART_IRQHandler+0xae>
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	061b      	lsls	r3, r3, #24
 8011b5e:	d41e      	bmi.n	8011b9e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	69da      	ldr	r2, [r3, #28]
 8011b64:	0652      	lsls	r2, r2, #25
 8011b66:	d502      	bpl.n	8011b6e <HAL_UART_IRQHandler+0xbc>
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	065b      	lsls	r3, r3, #25
 8011b6c:	d41b      	bmi.n	8011ba6 <HAL_UART_IRQHandler+0xf4>
}
 8011b6e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8011b70:	0020      	movs	r0, r4
 8011b72:	f7fa fb09 	bl	800c188 <HAL_UART_ErrorCallback>
 8011b76:	e7de      	b.n	8011b36 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011b78:	2280      	movs	r2, #128	; 0x80
 8011b7a:	0352      	lsls	r2, r2, #13
 8011b7c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8011b7e:	2369      	movs	r3, #105	; 0x69
 8011b80:	2201      	movs	r2, #1
 8011b82:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011b84:	0020      	movs	r0, r4
 8011b86:	f7ff ff93 	bl	8011ab0 <HAL_UARTEx_WakeupCallback>
 8011b8a:	e7db      	b.n	8011b44 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8011b8c:	0020      	movs	r0, r4
 8011b8e:	f7ff ff41 	bl	8011a14 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b92:	6822      	ldr	r2, [r4, #0]
 8011b94:	6993      	ldr	r3, [r2, #24]
 8011b96:	2108      	movs	r1, #8
 8011b98:	430b      	orrs	r3, r1
 8011b9a:	6193      	str	r3, [r2, #24]
 8011b9c:	e7d9      	b.n	8011b52 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8011b9e:	0020      	movs	r0, r4
 8011ba0:	f7ff fee6 	bl	8011970 <UART_Transmit_IT>
 8011ba4:	e7dc      	b.n	8011b60 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8011ba6:	0020      	movs	r0, r4
 8011ba8:	f7ff ff1a 	bl	80119e0 <UART_EndTransmit_IT>
}
 8011bac:	e7df      	b.n	8011b6e <HAL_UART_IRQHandler+0xbc>

08011bae <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8011bae:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011bb0:	f7fd f8c8 	bl	800ed44 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8011bb4:	f7f8 fe1e 	bl	800a7f4 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 8011bb8:	f7f2 fa10 	bl	8003fdc <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8011bbc:	f7f5 fe16 	bl	80077ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8011bc0:	f7fb f866 	bl	800cc90 <osKernelStart>
 8011bc4:	e7fe      	b.n	8011bc4 <main+0x16>

08011bc6 <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 8011bc6:	e7fe      	b.n	8011bc6 <UserTask>

08011bc8 <atof>:
 8011bc8:	b510      	push	{r4, lr}
 8011bca:	2100      	movs	r1, #0
 8011bcc:	f001 fb0a 	bl	80131e4 <strtod>
 8011bd0:	bd10      	pop	{r4, pc}

08011bd2 <atoi>:
 8011bd2:	b510      	push	{r4, lr}
 8011bd4:	220a      	movs	r2, #10
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	f001 fbda 	bl	8013390 <strtol>
 8011bdc:	bd10      	pop	{r4, pc}

08011bde <atol>:
 8011bde:	b510      	push	{r4, lr}
 8011be0:	220a      	movs	r2, #10
 8011be2:	2100      	movs	r1, #0
 8011be4:	f001 fbd4 	bl	8013390 <strtol>
 8011be8:	bd10      	pop	{r4, pc}
	...

08011bec <__libc_init_array>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	2600      	movs	r6, #0
 8011bf0:	4d0c      	ldr	r5, [pc, #48]	; (8011c24 <__libc_init_array+0x38>)
 8011bf2:	4c0d      	ldr	r4, [pc, #52]	; (8011c28 <__libc_init_array+0x3c>)
 8011bf4:	1b64      	subs	r4, r4, r5
 8011bf6:	10a4      	asrs	r4, r4, #2
 8011bf8:	42a6      	cmp	r6, r4
 8011bfa:	d109      	bne.n	8011c10 <__libc_init_array+0x24>
 8011bfc:	2600      	movs	r6, #0
 8011bfe:	f006 fb3b 	bl	8018278 <_init>
 8011c02:	4d0a      	ldr	r5, [pc, #40]	; (8011c2c <__libc_init_array+0x40>)
 8011c04:	4c0a      	ldr	r4, [pc, #40]	; (8011c30 <__libc_init_array+0x44>)
 8011c06:	1b64      	subs	r4, r4, r5
 8011c08:	10a4      	asrs	r4, r4, #2
 8011c0a:	42a6      	cmp	r6, r4
 8011c0c:	d105      	bne.n	8011c1a <__libc_init_array+0x2e>
 8011c0e:	bd70      	pop	{r4, r5, r6, pc}
 8011c10:	00b3      	lsls	r3, r6, #2
 8011c12:	58eb      	ldr	r3, [r5, r3]
 8011c14:	4798      	blx	r3
 8011c16:	3601      	adds	r6, #1
 8011c18:	e7ee      	b.n	8011bf8 <__libc_init_array+0xc>
 8011c1a:	00b3      	lsls	r3, r6, #2
 8011c1c:	58eb      	ldr	r3, [r5, r3]
 8011c1e:	4798      	blx	r3
 8011c20:	3601      	adds	r6, #1
 8011c22:	e7f2      	b.n	8011c0a <__libc_init_array+0x1e>
 8011c24:	0801b1c0 	.word	0x0801b1c0
 8011c28:	0801b1c0 	.word	0x0801b1c0
 8011c2c:	0801b1c0 	.word	0x0801b1c0
 8011c30:	0801b1c8 	.word	0x0801b1c8

08011c34 <malloc>:
 8011c34:	b510      	push	{r4, lr}
 8011c36:	4b03      	ldr	r3, [pc, #12]	; (8011c44 <malloc+0x10>)
 8011c38:	0001      	movs	r1, r0
 8011c3a:	6818      	ldr	r0, [r3, #0]
 8011c3c:	f000 f80e 	bl	8011c5c <_malloc_r>
 8011c40:	bd10      	pop	{r4, pc}
 8011c42:	46c0      	nop			; (mov r8, r8)
 8011c44:	200000a8 	.word	0x200000a8

08011c48 <free>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	4b03      	ldr	r3, [pc, #12]	; (8011c58 <free+0x10>)
 8011c4c:	0001      	movs	r1, r0
 8011c4e:	6818      	ldr	r0, [r3, #0]
 8011c50:	f003 fd2e 	bl	80156b0 <_free_r>
 8011c54:	bd10      	pop	{r4, pc}
 8011c56:	46c0      	nop			; (mov r8, r8)
 8011c58:	200000a8 	.word	0x200000a8

08011c5c <_malloc_r>:
 8011c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c5e:	000d      	movs	r5, r1
 8011c60:	b087      	sub	sp, #28
 8011c62:	350b      	adds	r5, #11
 8011c64:	9001      	str	r0, [sp, #4]
 8011c66:	2d16      	cmp	r5, #22
 8011c68:	d908      	bls.n	8011c7c <_malloc_r+0x20>
 8011c6a:	2207      	movs	r2, #7
 8011c6c:	4395      	bics	r5, r2
 8011c6e:	d506      	bpl.n	8011c7e <_malloc_r+0x22>
 8011c70:	230c      	movs	r3, #12
 8011c72:	9a01      	ldr	r2, [sp, #4]
 8011c74:	6013      	str	r3, [r2, #0]
 8011c76:	2000      	movs	r0, #0
 8011c78:	b007      	add	sp, #28
 8011c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c7c:	2510      	movs	r5, #16
 8011c7e:	42a9      	cmp	r1, r5
 8011c80:	d8f6      	bhi.n	8011c70 <_malloc_r+0x14>
 8011c82:	9801      	ldr	r0, [sp, #4]
 8011c84:	f000 fa1e 	bl	80120c4 <__malloc_lock>
 8011c88:	23fc      	movs	r3, #252	; 0xfc
 8011c8a:	48bd      	ldr	r0, [pc, #756]	; (8011f80 <_malloc_r+0x324>)
 8011c8c:	005b      	lsls	r3, r3, #1
 8011c8e:	429d      	cmp	r5, r3
 8011c90:	d21a      	bcs.n	8011cc8 <_malloc_r+0x6c>
 8011c92:	002a      	movs	r2, r5
 8011c94:	3208      	adds	r2, #8
 8011c96:	1882      	adds	r2, r0, r2
 8011c98:	0011      	movs	r1, r2
 8011c9a:	6854      	ldr	r4, [r2, #4]
 8011c9c:	3908      	subs	r1, #8
 8011c9e:	08eb      	lsrs	r3, r5, #3
 8011ca0:	428c      	cmp	r4, r1
 8011ca2:	d103      	bne.n	8011cac <_malloc_r+0x50>
 8011ca4:	68d4      	ldr	r4, [r2, #12]
 8011ca6:	3302      	adds	r3, #2
 8011ca8:	42a2      	cmp	r2, r4
 8011caa:	d023      	beq.n	8011cf4 <_malloc_r+0x98>
 8011cac:	2303      	movs	r3, #3
 8011cae:	6862      	ldr	r2, [r4, #4]
 8011cb0:	68a1      	ldr	r1, [r4, #8]
 8011cb2:	439a      	bics	r2, r3
 8011cb4:	0013      	movs	r3, r2
 8011cb6:	68e2      	ldr	r2, [r4, #12]
 8011cb8:	18e3      	adds	r3, r4, r3
 8011cba:	60ca      	str	r2, [r1, #12]
 8011cbc:	6091      	str	r1, [r2, #8]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	6859      	ldr	r1, [r3, #4]
 8011cc2:	430a      	orrs	r2, r1
 8011cc4:	605a      	str	r2, [r3, #4]
 8011cc6:	e02b      	b.n	8011d20 <_malloc_r+0xc4>
 8011cc8:	233f      	movs	r3, #63	; 0x3f
 8011cca:	0a6a      	lsrs	r2, r5, #9
 8011ccc:	d003      	beq.n	8011cd6 <_malloc_r+0x7a>
 8011cce:	2a04      	cmp	r2, #4
 8011cd0:	d82c      	bhi.n	8011d2c <_malloc_r+0xd0>
 8011cd2:	09ab      	lsrs	r3, r5, #6
 8011cd4:	3338      	adds	r3, #56	; 0x38
 8011cd6:	2203      	movs	r2, #3
 8011cd8:	4694      	mov	ip, r2
 8011cda:	00d9      	lsls	r1, r3, #3
 8011cdc:	1809      	adds	r1, r1, r0
 8011cde:	68cc      	ldr	r4, [r1, #12]
 8011ce0:	428c      	cmp	r4, r1
 8011ce2:	d006      	beq.n	8011cf2 <_malloc_r+0x96>
 8011ce4:	4666      	mov	r6, ip
 8011ce6:	6862      	ldr	r2, [r4, #4]
 8011ce8:	43b2      	bics	r2, r6
 8011cea:	1b57      	subs	r7, r2, r5
 8011cec:	2f0f      	cmp	r7, #15
 8011cee:	dd35      	ble.n	8011d5c <_malloc_r+0x100>
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	6904      	ldr	r4, [r0, #16]
 8011cf6:	49a3      	ldr	r1, [pc, #652]	; (8011f84 <_malloc_r+0x328>)
 8011cf8:	428c      	cmp	r4, r1
 8011cfa:	d056      	beq.n	8011daa <_malloc_r+0x14e>
 8011cfc:	2203      	movs	r2, #3
 8011cfe:	6866      	ldr	r6, [r4, #4]
 8011d00:	4396      	bics	r6, r2
 8011d02:	0032      	movs	r2, r6
 8011d04:	1b76      	subs	r6, r6, r5
 8011d06:	2e0f      	cmp	r6, #15
 8011d08:	dd36      	ble.n	8011d78 <_malloc_r+0x11c>
 8011d0a:	2701      	movs	r7, #1
 8011d0c:	1963      	adds	r3, r4, r5
 8011d0e:	433d      	orrs	r5, r7
 8011d10:	4337      	orrs	r7, r6
 8011d12:	6065      	str	r5, [r4, #4]
 8011d14:	6143      	str	r3, [r0, #20]
 8011d16:	6103      	str	r3, [r0, #16]
 8011d18:	60d9      	str	r1, [r3, #12]
 8011d1a:	6099      	str	r1, [r3, #8]
 8011d1c:	605f      	str	r7, [r3, #4]
 8011d1e:	50a6      	str	r6, [r4, r2]
 8011d20:	9801      	ldr	r0, [sp, #4]
 8011d22:	f000 f9d7 	bl	80120d4 <__malloc_unlock>
 8011d26:	0020      	movs	r0, r4
 8011d28:	3008      	adds	r0, #8
 8011d2a:	e7a5      	b.n	8011c78 <_malloc_r+0x1c>
 8011d2c:	2a14      	cmp	r2, #20
 8011d2e:	d802      	bhi.n	8011d36 <_malloc_r+0xda>
 8011d30:	0013      	movs	r3, r2
 8011d32:	335b      	adds	r3, #91	; 0x5b
 8011d34:	e7cf      	b.n	8011cd6 <_malloc_r+0x7a>
 8011d36:	2a54      	cmp	r2, #84	; 0x54
 8011d38:	d802      	bhi.n	8011d40 <_malloc_r+0xe4>
 8011d3a:	0b2b      	lsrs	r3, r5, #12
 8011d3c:	336e      	adds	r3, #110	; 0x6e
 8011d3e:	e7ca      	b.n	8011cd6 <_malloc_r+0x7a>
 8011d40:	23aa      	movs	r3, #170	; 0xaa
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d802      	bhi.n	8011d4e <_malloc_r+0xf2>
 8011d48:	0beb      	lsrs	r3, r5, #15
 8011d4a:	3377      	adds	r3, #119	; 0x77
 8011d4c:	e7c3      	b.n	8011cd6 <_malloc_r+0x7a>
 8011d4e:	498e      	ldr	r1, [pc, #568]	; (8011f88 <_malloc_r+0x32c>)
 8011d50:	237e      	movs	r3, #126	; 0x7e
 8011d52:	428a      	cmp	r2, r1
 8011d54:	d8bf      	bhi.n	8011cd6 <_malloc_r+0x7a>
 8011d56:	0cab      	lsrs	r3, r5, #18
 8011d58:	337c      	adds	r3, #124	; 0x7c
 8011d5a:	e7bc      	b.n	8011cd6 <_malloc_r+0x7a>
 8011d5c:	68e6      	ldr	r6, [r4, #12]
 8011d5e:	2f00      	cmp	r7, #0
 8011d60:	db08      	blt.n	8011d74 <_malloc_r+0x118>
 8011d62:	68a3      	ldr	r3, [r4, #8]
 8011d64:	60de      	str	r6, [r3, #12]
 8011d66:	60b3      	str	r3, [r6, #8]
 8011d68:	2301      	movs	r3, #1
 8011d6a:	18a2      	adds	r2, r4, r2
 8011d6c:	6851      	ldr	r1, [r2, #4]
 8011d6e:	430b      	orrs	r3, r1
 8011d70:	6053      	str	r3, [r2, #4]
 8011d72:	e7d5      	b.n	8011d20 <_malloc_r+0xc4>
 8011d74:	0034      	movs	r4, r6
 8011d76:	e7b3      	b.n	8011ce0 <_malloc_r+0x84>
 8011d78:	6141      	str	r1, [r0, #20]
 8011d7a:	6101      	str	r1, [r0, #16]
 8011d7c:	2e00      	cmp	r6, #0
 8011d7e:	daf3      	bge.n	8011d68 <_malloc_r+0x10c>
 8011d80:	6841      	ldr	r1, [r0, #4]
 8011d82:	468c      	mov	ip, r1
 8011d84:	2180      	movs	r1, #128	; 0x80
 8011d86:	0089      	lsls	r1, r1, #2
 8011d88:	428a      	cmp	r2, r1
 8011d8a:	d300      	bcc.n	8011d8e <_malloc_r+0x132>
 8011d8c:	e089      	b.n	8011ea2 <_malloc_r+0x246>
 8011d8e:	0956      	lsrs	r6, r2, #5
 8011d90:	08d1      	lsrs	r1, r2, #3
 8011d92:	2201      	movs	r2, #1
 8011d94:	40b2      	lsls	r2, r6
 8011d96:	4666      	mov	r6, ip
 8011d98:	00c9      	lsls	r1, r1, #3
 8011d9a:	4332      	orrs	r2, r6
 8011d9c:	6042      	str	r2, [r0, #4]
 8011d9e:	1808      	adds	r0, r1, r0
 8011da0:	6882      	ldr	r2, [r0, #8]
 8011da2:	60e0      	str	r0, [r4, #12]
 8011da4:	60a2      	str	r2, [r4, #8]
 8011da6:	6084      	str	r4, [r0, #8]
 8011da8:	60d4      	str	r4, [r2, #12]
 8011daa:	2201      	movs	r2, #1
 8011dac:	4874      	ldr	r0, [pc, #464]	; (8011f80 <_malloc_r+0x324>)
 8011dae:	1099      	asrs	r1, r3, #2
 8011db0:	408a      	lsls	r2, r1
 8011db2:	6841      	ldr	r1, [r0, #4]
 8011db4:	4291      	cmp	r1, r2
 8011db6:	d325      	bcc.n	8011e04 <_malloc_r+0x1a8>
 8011db8:	420a      	tst	r2, r1
 8011dba:	d105      	bne.n	8011dc8 <_malloc_r+0x16c>
 8011dbc:	2403      	movs	r4, #3
 8011dbe:	43a3      	bics	r3, r4
 8011dc0:	0052      	lsls	r2, r2, #1
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	420a      	tst	r2, r1
 8011dc6:	d0fb      	beq.n	8011dc0 <_malloc_r+0x164>
 8011dc8:	00d9      	lsls	r1, r3, #3
 8011dca:	1841      	adds	r1, r0, r1
 8011dcc:	468c      	mov	ip, r1
 8011dce:	9302      	str	r3, [sp, #8]
 8011dd0:	68cc      	ldr	r4, [r1, #12]
 8011dd2:	428c      	cmp	r4, r1
 8011dd4:	d000      	beq.n	8011dd8 <_malloc_r+0x17c>
 8011dd6:	e09b      	b.n	8011f10 <_malloc_r+0x2b4>
 8011dd8:	2603      	movs	r6, #3
 8011dda:	9c02      	ldr	r4, [sp, #8]
 8011ddc:	3108      	adds	r1, #8
 8011dde:	3401      	adds	r4, #1
 8011de0:	9402      	str	r4, [sp, #8]
 8011de2:	4234      	tst	r4, r6
 8011de4:	d1f4      	bne.n	8011dd0 <_malloc_r+0x174>
 8011de6:	2103      	movs	r1, #3
 8011de8:	420b      	tst	r3, r1
 8011dea:	d000      	beq.n	8011dee <_malloc_r+0x192>
 8011dec:	e0b7      	b.n	8011f5e <_malloc_r+0x302>
 8011dee:	6843      	ldr	r3, [r0, #4]
 8011df0:	4393      	bics	r3, r2
 8011df2:	6043      	str	r3, [r0, #4]
 8011df4:	4b62      	ldr	r3, [pc, #392]	; (8011f80 <_malloc_r+0x324>)
 8011df6:	0052      	lsls	r2, r2, #1
 8011df8:	6859      	ldr	r1, [r3, #4]
 8011dfa:	4291      	cmp	r1, r2
 8011dfc:	d302      	bcc.n	8011e04 <_malloc_r+0x1a8>
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	d000      	beq.n	8011e04 <_malloc_r+0x1a8>
 8011e02:	e0bb      	b.n	8011f7c <_malloc_r+0x320>
 8011e04:	2303      	movs	r3, #3
 8011e06:	6886      	ldr	r6, [r0, #8]
 8011e08:	6872      	ldr	r2, [r6, #4]
 8011e0a:	439a      	bics	r2, r3
 8011e0c:	9202      	str	r2, [sp, #8]
 8011e0e:	42aa      	cmp	r2, r5
 8011e10:	d303      	bcc.n	8011e1a <_malloc_r+0x1be>
 8011e12:	1b51      	subs	r1, r2, r5
 8011e14:	290f      	cmp	r1, #15
 8011e16:	dd00      	ble.n	8011e1a <_malloc_r+0x1be>
 8011e18:	e125      	b.n	8012066 <_malloc_r+0x40a>
 8011e1a:	9b02      	ldr	r3, [sp, #8]
 8011e1c:	2008      	movs	r0, #8
 8011e1e:	18f3      	adds	r3, r6, r3
 8011e20:	9303      	str	r3, [sp, #12]
 8011e22:	4b5a      	ldr	r3, [pc, #360]	; (8011f8c <_malloc_r+0x330>)
 8011e24:	681f      	ldr	r7, [r3, #0]
 8011e26:	f002 fd43 	bl	80148b0 <sysconf>
 8011e2a:	4b59      	ldr	r3, [pc, #356]	; (8011f90 <_malloc_r+0x334>)
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	197f      	adds	r7, r7, r5
 8011e32:	9004      	str	r0, [sp, #16]
 8011e34:	3301      	adds	r3, #1
 8011e36:	d003      	beq.n	8011e40 <_malloc_r+0x1e4>
 8011e38:	3f01      	subs	r7, #1
 8011e3a:	183f      	adds	r7, r7, r0
 8011e3c:	4243      	negs	r3, r0
 8011e3e:	401f      	ands	r7, r3
 8011e40:	0039      	movs	r1, r7
 8011e42:	9801      	ldr	r0, [sp, #4]
 8011e44:	f000 fb18 	bl	8012478 <_sbrk_r>
 8011e48:	0004      	movs	r4, r0
 8011e4a:	1c43      	adds	r3, r0, #1
 8011e4c:	d100      	bne.n	8011e50 <_malloc_r+0x1f4>
 8011e4e:	e0de      	b.n	801200e <_malloc_r+0x3b2>
 8011e50:	9b03      	ldr	r3, [sp, #12]
 8011e52:	4283      	cmp	r3, r0
 8011e54:	d903      	bls.n	8011e5e <_malloc_r+0x202>
 8011e56:	4b4a      	ldr	r3, [pc, #296]	; (8011f80 <_malloc_r+0x324>)
 8011e58:	429e      	cmp	r6, r3
 8011e5a:	d000      	beq.n	8011e5e <_malloc_r+0x202>
 8011e5c:	e0d7      	b.n	801200e <_malloc_r+0x3b2>
 8011e5e:	4b4d      	ldr	r3, [pc, #308]	; (8011f94 <_malloc_r+0x338>)
 8011e60:	9903      	ldr	r1, [sp, #12]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	18ba      	adds	r2, r7, r2
 8011e66:	601a      	str	r2, [r3, #0]
 8011e68:	9b04      	ldr	r3, [sp, #16]
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	42a1      	cmp	r1, r4
 8011e6e:	d000      	beq.n	8011e72 <_malloc_r+0x216>
 8011e70:	e096      	b.n	8011fa0 <_malloc_r+0x344>
 8011e72:	4219      	tst	r1, r3
 8011e74:	d000      	beq.n	8011e78 <_malloc_r+0x21c>
 8011e76:	e093      	b.n	8011fa0 <_malloc_r+0x344>
 8011e78:	2601      	movs	r6, #1
 8011e7a:	4b41      	ldr	r3, [pc, #260]	; (8011f80 <_malloc_r+0x324>)
 8011e7c:	9a02      	ldr	r2, [sp, #8]
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	19d7      	adds	r7, r2, r7
 8011e82:	433e      	orrs	r6, r7
 8011e84:	605e      	str	r6, [r3, #4]
 8011e86:	4b43      	ldr	r3, [pc, #268]	; (8011f94 <_malloc_r+0x338>)
 8011e88:	4a43      	ldr	r2, [pc, #268]	; (8011f98 <_malloc_r+0x33c>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	6811      	ldr	r1, [r2, #0]
 8011e8e:	428b      	cmp	r3, r1
 8011e90:	d900      	bls.n	8011e94 <_malloc_r+0x238>
 8011e92:	6013      	str	r3, [r2, #0]
 8011e94:	4a41      	ldr	r2, [pc, #260]	; (8011f9c <_malloc_r+0x340>)
 8011e96:	6811      	ldr	r1, [r2, #0]
 8011e98:	428b      	cmp	r3, r1
 8011e9a:	d800      	bhi.n	8011e9e <_malloc_r+0x242>
 8011e9c:	e0b7      	b.n	801200e <_malloc_r+0x3b2>
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	e0b5      	b.n	801200e <_malloc_r+0x3b2>
 8011ea2:	0a56      	lsrs	r6, r2, #9
 8011ea4:	2e04      	cmp	r6, #4
 8011ea6:	d811      	bhi.n	8011ecc <_malloc_r+0x270>
 8011ea8:	0991      	lsrs	r1, r2, #6
 8011eaa:	3138      	adds	r1, #56	; 0x38
 8011eac:	00cf      	lsls	r7, r1, #3
 8011eae:	183f      	adds	r7, r7, r0
 8011eb0:	68be      	ldr	r6, [r7, #8]
 8011eb2:	42b7      	cmp	r7, r6
 8011eb4:	d125      	bne.n	8011f02 <_malloc_r+0x2a6>
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	1089      	asrs	r1, r1, #2
 8011eba:	408a      	lsls	r2, r1
 8011ebc:	4661      	mov	r1, ip
 8011ebe:	430a      	orrs	r2, r1
 8011ec0:	6042      	str	r2, [r0, #4]
 8011ec2:	60e7      	str	r7, [r4, #12]
 8011ec4:	60a6      	str	r6, [r4, #8]
 8011ec6:	60bc      	str	r4, [r7, #8]
 8011ec8:	60f4      	str	r4, [r6, #12]
 8011eca:	e76e      	b.n	8011daa <_malloc_r+0x14e>
 8011ecc:	2e14      	cmp	r6, #20
 8011ece:	d802      	bhi.n	8011ed6 <_malloc_r+0x27a>
 8011ed0:	0031      	movs	r1, r6
 8011ed2:	315b      	adds	r1, #91	; 0x5b
 8011ed4:	e7ea      	b.n	8011eac <_malloc_r+0x250>
 8011ed6:	2e54      	cmp	r6, #84	; 0x54
 8011ed8:	d802      	bhi.n	8011ee0 <_malloc_r+0x284>
 8011eda:	0b11      	lsrs	r1, r2, #12
 8011edc:	316e      	adds	r1, #110	; 0x6e
 8011ede:	e7e5      	b.n	8011eac <_malloc_r+0x250>
 8011ee0:	21aa      	movs	r1, #170	; 0xaa
 8011ee2:	0049      	lsls	r1, r1, #1
 8011ee4:	428e      	cmp	r6, r1
 8011ee6:	d802      	bhi.n	8011eee <_malloc_r+0x292>
 8011ee8:	0bd1      	lsrs	r1, r2, #15
 8011eea:	3177      	adds	r1, #119	; 0x77
 8011eec:	e7de      	b.n	8011eac <_malloc_r+0x250>
 8011eee:	4f26      	ldr	r7, [pc, #152]	; (8011f88 <_malloc_r+0x32c>)
 8011ef0:	217e      	movs	r1, #126	; 0x7e
 8011ef2:	42be      	cmp	r6, r7
 8011ef4:	d8da      	bhi.n	8011eac <_malloc_r+0x250>
 8011ef6:	0c91      	lsrs	r1, r2, #18
 8011ef8:	317c      	adds	r1, #124	; 0x7c
 8011efa:	e7d7      	b.n	8011eac <_malloc_r+0x250>
 8011efc:	68b6      	ldr	r6, [r6, #8]
 8011efe:	42b7      	cmp	r7, r6
 8011f00:	d004      	beq.n	8011f0c <_malloc_r+0x2b0>
 8011f02:	2003      	movs	r0, #3
 8011f04:	6871      	ldr	r1, [r6, #4]
 8011f06:	4381      	bics	r1, r0
 8011f08:	4291      	cmp	r1, r2
 8011f0a:	d8f7      	bhi.n	8011efc <_malloc_r+0x2a0>
 8011f0c:	68f7      	ldr	r7, [r6, #12]
 8011f0e:	e7d8      	b.n	8011ec2 <_malloc_r+0x266>
 8011f10:	2703      	movs	r7, #3
 8011f12:	6866      	ldr	r6, [r4, #4]
 8011f14:	43be      	bics	r6, r7
 8011f16:	9603      	str	r6, [sp, #12]
 8011f18:	1b77      	subs	r7, r6, r5
 8011f1a:	68e6      	ldr	r6, [r4, #12]
 8011f1c:	2f0f      	cmp	r7, #15
 8011f1e:	dd10      	ble.n	8011f42 <_malloc_r+0x2e6>
 8011f20:	2201      	movs	r2, #1
 8011f22:	68a1      	ldr	r1, [r4, #8]
 8011f24:	1963      	adds	r3, r4, r5
 8011f26:	4315      	orrs	r5, r2
 8011f28:	6065      	str	r5, [r4, #4]
 8011f2a:	60ce      	str	r6, [r1, #12]
 8011f2c:	60b1      	str	r1, [r6, #8]
 8011f2e:	6143      	str	r3, [r0, #20]
 8011f30:	6103      	str	r3, [r0, #16]
 8011f32:	4814      	ldr	r0, [pc, #80]	; (8011f84 <_malloc_r+0x328>)
 8011f34:	433a      	orrs	r2, r7
 8011f36:	60d8      	str	r0, [r3, #12]
 8011f38:	6098      	str	r0, [r3, #8]
 8011f3a:	605a      	str	r2, [r3, #4]
 8011f3c:	9b03      	ldr	r3, [sp, #12]
 8011f3e:	50e7      	str	r7, [r4, r3]
 8011f40:	e6ee      	b.n	8011d20 <_malloc_r+0xc4>
 8011f42:	2f00      	cmp	r7, #0
 8011f44:	db09      	blt.n	8011f5a <_malloc_r+0x2fe>
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	18e1      	adds	r1, r4, r3
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	684a      	ldr	r2, [r1, #4]
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	604b      	str	r3, [r1, #4]
 8011f52:	68a3      	ldr	r3, [r4, #8]
 8011f54:	60de      	str	r6, [r3, #12]
 8011f56:	60b3      	str	r3, [r6, #8]
 8011f58:	e6e2      	b.n	8011d20 <_malloc_r+0xc4>
 8011f5a:	0034      	movs	r4, r6
 8011f5c:	e739      	b.n	8011dd2 <_malloc_r+0x176>
 8011f5e:	2108      	movs	r1, #8
 8011f60:	4249      	negs	r1, r1
 8011f62:	448c      	add	ip, r1
 8011f64:	4661      	mov	r1, ip
 8011f66:	6889      	ldr	r1, [r1, #8]
 8011f68:	3b01      	subs	r3, #1
 8011f6a:	4561      	cmp	r1, ip
 8011f6c:	d100      	bne.n	8011f70 <_malloc_r+0x314>
 8011f6e:	e73a      	b.n	8011de6 <_malloc_r+0x18a>
 8011f70:	e740      	b.n	8011df4 <_malloc_r+0x198>
 8011f72:	3304      	adds	r3, #4
 8011f74:	0052      	lsls	r2, r2, #1
 8011f76:	420a      	tst	r2, r1
 8011f78:	d0fb      	beq.n	8011f72 <_malloc_r+0x316>
 8011f7a:	e725      	b.n	8011dc8 <_malloc_r+0x16c>
 8011f7c:	9b02      	ldr	r3, [sp, #8]
 8011f7e:	e7fa      	b.n	8011f76 <_malloc_r+0x31a>
 8011f80:	200004d8 	.word	0x200004d8
 8011f84:	200004e0 	.word	0x200004e0
 8011f88:	00000554 	.word	0x00000554
 8011f8c:	200068bc 	.word	0x200068bc
 8011f90:	200008e0 	.word	0x200008e0
 8011f94:	2000688c 	.word	0x2000688c
 8011f98:	200068b4 	.word	0x200068b4
 8011f9c:	200068b8 	.word	0x200068b8
 8011fa0:	4935      	ldr	r1, [pc, #212]	; (8012078 <_malloc_r+0x41c>)
 8011fa2:	6808      	ldr	r0, [r1, #0]
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	d140      	bne.n	801202a <_malloc_r+0x3ce>
 8011fa8:	600c      	str	r4, [r1, #0]
 8011faa:	2207      	movs	r2, #7
 8011fac:	0021      	movs	r1, r4
 8011fae:	4011      	ands	r1, r2
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	9103      	str	r1, [sp, #12]
 8011fb4:	4214      	tst	r4, r2
 8011fb6:	d002      	beq.n	8011fbe <_malloc_r+0x362>
 8011fb8:	3008      	adds	r0, #8
 8011fba:	1a40      	subs	r0, r0, r1
 8011fbc:	1824      	adds	r4, r4, r0
 8011fbe:	19e2      	adds	r2, r4, r7
 8011fc0:	9205      	str	r2, [sp, #20]
 8011fc2:	9f05      	ldr	r7, [sp, #20]
 8011fc4:	9a04      	ldr	r2, [sp, #16]
 8011fc6:	401f      	ands	r7, r3
 8011fc8:	1810      	adds	r0, r2, r0
 8011fca:	1bc7      	subs	r7, r0, r7
 8011fcc:	401f      	ands	r7, r3
 8011fce:	0039      	movs	r1, r7
 8011fd0:	9801      	ldr	r0, [sp, #4]
 8011fd2:	f000 fa51 	bl	8012478 <_sbrk_r>
 8011fd6:	1c43      	adds	r3, r0, #1
 8011fd8:	d107      	bne.n	8011fea <_malloc_r+0x38e>
 8011fda:	9b03      	ldr	r3, [sp, #12]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d02a      	beq.n	8012036 <_malloc_r+0x3da>
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	2700      	movs	r7, #0
 8011fe4:	9b05      	ldr	r3, [sp, #20]
 8011fe6:	3808      	subs	r0, #8
 8011fe8:	1818      	adds	r0, r3, r0
 8011fea:	4a24      	ldr	r2, [pc, #144]	; (801207c <_malloc_r+0x420>)
 8011fec:	1b00      	subs	r0, r0, r4
 8011fee:	6813      	ldr	r3, [r2, #0]
 8011ff0:	19db      	adds	r3, r3, r7
 8011ff2:	6013      	str	r3, [r2, #0]
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	4b22      	ldr	r3, [pc, #136]	; (8012080 <_malloc_r+0x424>)
 8011ff8:	19c7      	adds	r7, r0, r7
 8011ffa:	4317      	orrs	r7, r2
 8011ffc:	609c      	str	r4, [r3, #8]
 8011ffe:	6067      	str	r7, [r4, #4]
 8012000:	429e      	cmp	r6, r3
 8012002:	d100      	bne.n	8012006 <_malloc_r+0x3aa>
 8012004:	e73f      	b.n	8011e86 <_malloc_r+0x22a>
 8012006:	9b02      	ldr	r3, [sp, #8]
 8012008:	2b0f      	cmp	r3, #15
 801200a:	d817      	bhi.n	801203c <_malloc_r+0x3e0>
 801200c:	6062      	str	r2, [r4, #4]
 801200e:	2203      	movs	r2, #3
 8012010:	4b1b      	ldr	r3, [pc, #108]	; (8012080 <_malloc_r+0x424>)
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	4393      	bics	r3, r2
 8012018:	1b59      	subs	r1, r3, r5
 801201a:	42ab      	cmp	r3, r5
 801201c:	d301      	bcc.n	8012022 <_malloc_r+0x3c6>
 801201e:	290f      	cmp	r1, #15
 8012020:	dc21      	bgt.n	8012066 <_malloc_r+0x40a>
 8012022:	9801      	ldr	r0, [sp, #4]
 8012024:	f000 f856 	bl	80120d4 <__malloc_unlock>
 8012028:	e625      	b.n	8011c76 <_malloc_r+0x1a>
 801202a:	9903      	ldr	r1, [sp, #12]
 801202c:	1a61      	subs	r1, r4, r1
 801202e:	1889      	adds	r1, r1, r2
 8012030:	4a12      	ldr	r2, [pc, #72]	; (801207c <_malloc_r+0x420>)
 8012032:	6011      	str	r1, [r2, #0]
 8012034:	e7b9      	b.n	8011faa <_malloc_r+0x34e>
 8012036:	9805      	ldr	r0, [sp, #20]
 8012038:	9f03      	ldr	r7, [sp, #12]
 801203a:	e7d6      	b.n	8011fea <_malloc_r+0x38e>
 801203c:	2307      	movs	r3, #7
 801203e:	9f02      	ldr	r7, [sp, #8]
 8012040:	3f0c      	subs	r7, #12
 8012042:	439f      	bics	r7, r3
 8012044:	6873      	ldr	r3, [r6, #4]
 8012046:	401a      	ands	r2, r3
 8012048:	433a      	orrs	r2, r7
 801204a:	6072      	str	r2, [r6, #4]
 801204c:	2205      	movs	r2, #5
 801204e:	19f3      	adds	r3, r6, r7
 8012050:	605a      	str	r2, [r3, #4]
 8012052:	609a      	str	r2, [r3, #8]
 8012054:	2f0f      	cmp	r7, #15
 8012056:	d800      	bhi.n	801205a <_malloc_r+0x3fe>
 8012058:	e715      	b.n	8011e86 <_malloc_r+0x22a>
 801205a:	0031      	movs	r1, r6
 801205c:	9801      	ldr	r0, [sp, #4]
 801205e:	3108      	adds	r1, #8
 8012060:	f003 fb26 	bl	80156b0 <_free_r>
 8012064:	e70f      	b.n	8011e86 <_malloc_r+0x22a>
 8012066:	2201      	movs	r2, #1
 8012068:	0013      	movs	r3, r2
 801206a:	4805      	ldr	r0, [pc, #20]	; (8012080 <_malloc_r+0x424>)
 801206c:	432b      	orrs	r3, r5
 801206e:	6884      	ldr	r4, [r0, #8]
 8012070:	6063      	str	r3, [r4, #4]
 8012072:	1963      	adds	r3, r4, r5
 8012074:	6083      	str	r3, [r0, #8]
 8012076:	e624      	b.n	8011cc2 <_malloc_r+0x66>
 8012078:	200008e0 	.word	0x200008e0
 801207c:	2000688c 	.word	0x2000688c
 8012080:	200004d8 	.word	0x200004d8

08012084 <memcmp>:
 8012084:	b530      	push	{r4, r5, lr}
 8012086:	2400      	movs	r4, #0
 8012088:	3901      	subs	r1, #1
 801208a:	42a2      	cmp	r2, r4
 801208c:	d101      	bne.n	8012092 <memcmp+0xe>
 801208e:	2000      	movs	r0, #0
 8012090:	e005      	b.n	801209e <memcmp+0x1a>
 8012092:	5d03      	ldrb	r3, [r0, r4]
 8012094:	3401      	adds	r4, #1
 8012096:	5d0d      	ldrb	r5, [r1, r4]
 8012098:	42ab      	cmp	r3, r5
 801209a:	d0f6      	beq.n	801208a <memcmp+0x6>
 801209c:	1b58      	subs	r0, r3, r5
 801209e:	bd30      	pop	{r4, r5, pc}

080120a0 <memcpy>:
 80120a0:	2300      	movs	r3, #0
 80120a2:	b510      	push	{r4, lr}
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d100      	bne.n	80120aa <memcpy+0xa>
 80120a8:	bd10      	pop	{r4, pc}
 80120aa:	5ccc      	ldrb	r4, [r1, r3]
 80120ac:	54c4      	strb	r4, [r0, r3]
 80120ae:	3301      	adds	r3, #1
 80120b0:	e7f8      	b.n	80120a4 <memcpy+0x4>

080120b2 <memset>:
 80120b2:	0003      	movs	r3, r0
 80120b4:	1882      	adds	r2, r0, r2
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d100      	bne.n	80120bc <memset+0xa>
 80120ba:	4770      	bx	lr
 80120bc:	7019      	strb	r1, [r3, #0]
 80120be:	3301      	adds	r3, #1
 80120c0:	e7f9      	b.n	80120b6 <memset+0x4>
	...

080120c4 <__malloc_lock>:
 80120c4:	b510      	push	{r4, lr}
 80120c6:	4802      	ldr	r0, [pc, #8]	; (80120d0 <__malloc_lock+0xc>)
 80120c8:	f003 ff24 	bl	8015f14 <__retarget_lock_acquire_recursive>
 80120cc:	bd10      	pop	{r4, pc}
 80120ce:	46c0      	nop			; (mov r8, r8)
 80120d0:	20006e5c 	.word	0x20006e5c

080120d4 <__malloc_unlock>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	4802      	ldr	r0, [pc, #8]	; (80120e0 <__malloc_unlock+0xc>)
 80120d8:	f003 ff1d 	bl	8015f16 <__retarget_lock_release_recursive>
 80120dc:	bd10      	pop	{r4, pc}
 80120de:	46c0      	nop			; (mov r8, r8)
 80120e0:	20006e5c 	.word	0x20006e5c

080120e4 <rand>:
 80120e4:	4b09      	ldr	r3, [pc, #36]	; (801210c <rand+0x28>)
 80120e6:	b510      	push	{r4, lr}
 80120e8:	681c      	ldr	r4, [r3, #0]
 80120ea:	4a09      	ldr	r2, [pc, #36]	; (8012110 <rand+0x2c>)
 80120ec:	34a8      	adds	r4, #168	; 0xa8
 80120ee:	6820      	ldr	r0, [r4, #0]
 80120f0:	6861      	ldr	r1, [r4, #4]
 80120f2:	4b08      	ldr	r3, [pc, #32]	; (8012114 <rand+0x30>)
 80120f4:	f7ee fa3a 	bl	800056c <__aeabi_lmul>
 80120f8:	2201      	movs	r2, #1
 80120fa:	2300      	movs	r3, #0
 80120fc:	1880      	adds	r0, r0, r2
 80120fe:	4159      	adcs	r1, r3
 8012100:	6020      	str	r0, [r4, #0]
 8012102:	6061      	str	r1, [r4, #4]
 8012104:	0048      	lsls	r0, r1, #1
 8012106:	0840      	lsrs	r0, r0, #1
 8012108:	bd10      	pop	{r4, pc}
 801210a:	46c0      	nop			; (mov r8, r8)
 801210c:	200000a8 	.word	0x200000a8
 8012110:	4c957f2d 	.word	0x4c957f2d
 8012114:	5851f42d 	.word	0x5851f42d

08012118 <realloc>:
 8012118:	b510      	push	{r4, lr}
 801211a:	4b03      	ldr	r3, [pc, #12]	; (8012128 <realloc+0x10>)
 801211c:	000a      	movs	r2, r1
 801211e:	0001      	movs	r1, r0
 8012120:	6818      	ldr	r0, [r3, #0]
 8012122:	f000 f803 	bl	801212c <_realloc_r>
 8012126:	bd10      	pop	{r4, pc}
 8012128:	200000a8 	.word	0x200000a8

0801212c <_realloc_r>:
 801212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801212e:	b087      	sub	sp, #28
 8012130:	1e0c      	subs	r4, r1, #0
 8012132:	9002      	str	r0, [sp, #8]
 8012134:	9205      	str	r2, [sp, #20]
 8012136:	d106      	bne.n	8012146 <_realloc_r+0x1a>
 8012138:	0011      	movs	r1, r2
 801213a:	f7ff fd8f 	bl	8011c5c <_malloc_r>
 801213e:	0007      	movs	r7, r0
 8012140:	0038      	movs	r0, r7
 8012142:	b007      	add	sp, #28
 8012144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012146:	9802      	ldr	r0, [sp, #8]
 8012148:	f7ff ffbc 	bl	80120c4 <__malloc_lock>
 801214c:	9e05      	ldr	r6, [sp, #20]
 801214e:	360b      	adds	r6, #11
 8012150:	2e16      	cmp	r6, #22
 8012152:	d908      	bls.n	8012166 <_realloc_r+0x3a>
 8012154:	2307      	movs	r3, #7
 8012156:	439e      	bics	r6, r3
 8012158:	9601      	str	r6, [sp, #4]
 801215a:	d506      	bpl.n	801216a <_realloc_r+0x3e>
 801215c:	230c      	movs	r3, #12
 801215e:	9a02      	ldr	r2, [sp, #8]
 8012160:	2700      	movs	r7, #0
 8012162:	6013      	str	r3, [r2, #0]
 8012164:	e7ec      	b.n	8012140 <_realloc_r+0x14>
 8012166:	2310      	movs	r3, #16
 8012168:	9301      	str	r3, [sp, #4]
 801216a:	9b01      	ldr	r3, [sp, #4]
 801216c:	9a05      	ldr	r2, [sp, #20]
 801216e:	4293      	cmp	r3, r2
 8012170:	d3f4      	bcc.n	801215c <_realloc_r+0x30>
 8012172:	0023      	movs	r3, r4
 8012174:	3b08      	subs	r3, #8
 8012176:	685f      	ldr	r7, [r3, #4]
 8012178:	9304      	str	r3, [sp, #16]
 801217a:	003a      	movs	r2, r7
 801217c:	2303      	movs	r3, #3
 801217e:	439a      	bics	r2, r3
 8012180:	9b01      	ldr	r3, [sp, #4]
 8012182:	9203      	str	r2, [sp, #12]
 8012184:	4293      	cmp	r3, r2
 8012186:	dc00      	bgt.n	801218a <_realloc_r+0x5e>
 8012188:	e16b      	b.n	8012462 <_realloc_r+0x336>
 801218a:	9b04      	ldr	r3, [sp, #16]
 801218c:	48b9      	ldr	r0, [pc, #740]	; (8012474 <_realloc_r+0x348>)
 801218e:	189b      	adds	r3, r3, r2
 8012190:	6882      	ldr	r2, [r0, #8]
 8012192:	4694      	mov	ip, r2
 8012194:	685a      	ldr	r2, [r3, #4]
 8012196:	459c      	cmp	ip, r3
 8012198:	d006      	beq.n	80121a8 <_realloc_r+0x7c>
 801219a:	2501      	movs	r5, #1
 801219c:	0011      	movs	r1, r2
 801219e:	43a9      	bics	r1, r5
 80121a0:	1859      	adds	r1, r3, r1
 80121a2:	6849      	ldr	r1, [r1, #4]
 80121a4:	4229      	tst	r1, r5
 80121a6:	d126      	bne.n	80121f6 <_realloc_r+0xca>
 80121a8:	2103      	movs	r1, #3
 80121aa:	438a      	bics	r2, r1
 80121ac:	9903      	ldr	r1, [sp, #12]
 80121ae:	188e      	adds	r6, r1, r2
 80121b0:	9901      	ldr	r1, [sp, #4]
 80121b2:	459c      	cmp	ip, r3
 80121b4:	d117      	bne.n	80121e6 <_realloc_r+0xba>
 80121b6:	3110      	adds	r1, #16
 80121b8:	42b1      	cmp	r1, r6
 80121ba:	dc1e      	bgt.n	80121fa <_realloc_r+0xce>
 80121bc:	9901      	ldr	r1, [sp, #4]
 80121be:	9b04      	ldr	r3, [sp, #16]
 80121c0:	468c      	mov	ip, r1
 80121c2:	4463      	add	r3, ip
 80121c4:	6083      	str	r3, [r0, #8]
 80121c6:	001a      	movs	r2, r3
 80121c8:	1a73      	subs	r3, r6, r1
 80121ca:	2601      	movs	r6, #1
 80121cc:	4333      	orrs	r3, r6
 80121ce:	6053      	str	r3, [r2, #4]
 80121d0:	0023      	movs	r3, r4
 80121d2:	3b08      	subs	r3, #8
 80121d4:	685a      	ldr	r2, [r3, #4]
 80121d6:	9802      	ldr	r0, [sp, #8]
 80121d8:	4016      	ands	r6, r2
 80121da:	430e      	orrs	r6, r1
 80121dc:	605e      	str	r6, [r3, #4]
 80121de:	f7ff ff79 	bl	80120d4 <__malloc_unlock>
 80121e2:	0027      	movs	r7, r4
 80121e4:	e7ac      	b.n	8012140 <_realloc_r+0x14>
 80121e6:	42b1      	cmp	r1, r6
 80121e8:	dc07      	bgt.n	80121fa <_realloc_r+0xce>
 80121ea:	68da      	ldr	r2, [r3, #12]
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	60da      	str	r2, [r3, #12]
 80121f0:	6093      	str	r3, [r2, #8]
 80121f2:	9d04      	ldr	r5, [sp, #16]
 80121f4:	e07f      	b.n	80122f6 <_realloc_r+0x1ca>
 80121f6:	2200      	movs	r2, #0
 80121f8:	0013      	movs	r3, r2
 80121fa:	07f9      	lsls	r1, r7, #31
 80121fc:	d500      	bpl.n	8012200 <_realloc_r+0xd4>
 80121fe:	e0e2      	b.n	80123c6 <_realloc_r+0x29a>
 8012200:	0021      	movs	r1, r4
 8012202:	3908      	subs	r1, #8
 8012204:	680d      	ldr	r5, [r1, #0]
 8012206:	9904      	ldr	r1, [sp, #16]
 8012208:	1b4d      	subs	r5, r1, r5
 801220a:	2103      	movs	r1, #3
 801220c:	686f      	ldr	r7, [r5, #4]
 801220e:	438f      	bics	r7, r1
 8012210:	9903      	ldr	r1, [sp, #12]
 8012212:	187f      	adds	r7, r7, r1
 8012214:	2b00      	cmp	r3, #0
 8012216:	d100      	bne.n	801221a <_realloc_r+0xee>
 8012218:	e0a0      	b.n	801235c <_realloc_r+0x230>
 801221a:	19d6      	adds	r6, r2, r7
 801221c:	459c      	cmp	ip, r3
 801221e:	d149      	bne.n	80122b4 <_realloc_r+0x188>
 8012220:	9b01      	ldr	r3, [sp, #4]
 8012222:	3310      	adds	r3, #16
 8012224:	42b3      	cmp	r3, r6
 8012226:	dd00      	ble.n	801222a <_realloc_r+0xfe>
 8012228:	e098      	b.n	801235c <_realloc_r+0x230>
 801222a:	68aa      	ldr	r2, [r5, #8]
 801222c:	68eb      	ldr	r3, [r5, #12]
 801222e:	002f      	movs	r7, r5
 8012230:	60d3      	str	r3, [r2, #12]
 8012232:	609a      	str	r2, [r3, #8]
 8012234:	000a      	movs	r2, r1
 8012236:	3a04      	subs	r2, #4
 8012238:	3708      	adds	r7, #8
 801223a:	2a24      	cmp	r2, #36	; 0x24
 801223c:	d835      	bhi.n	80122aa <_realloc_r+0x17e>
 801223e:	003b      	movs	r3, r7
 8012240:	2a13      	cmp	r2, #19
 8012242:	d908      	bls.n	8012256 <_realloc_r+0x12a>
 8012244:	6823      	ldr	r3, [r4, #0]
 8012246:	60ab      	str	r3, [r5, #8]
 8012248:	6863      	ldr	r3, [r4, #4]
 801224a:	60eb      	str	r3, [r5, #12]
 801224c:	2a1b      	cmp	r2, #27
 801224e:	d81a      	bhi.n	8012286 <_realloc_r+0x15a>
 8012250:	002b      	movs	r3, r5
 8012252:	3408      	adds	r4, #8
 8012254:	3310      	adds	r3, #16
 8012256:	6822      	ldr	r2, [r4, #0]
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	6862      	ldr	r2, [r4, #4]
 801225c:	605a      	str	r2, [r3, #4]
 801225e:	68a2      	ldr	r2, [r4, #8]
 8012260:	609a      	str	r2, [r3, #8]
 8012262:	9b01      	ldr	r3, [sp, #4]
 8012264:	18ea      	adds	r2, r5, r3
 8012266:	4b83      	ldr	r3, [pc, #524]	; (8012474 <_realloc_r+0x348>)
 8012268:	609a      	str	r2, [r3, #8]
 801226a:	9b01      	ldr	r3, [sp, #4]
 801226c:	1af3      	subs	r3, r6, r3
 801226e:	2601      	movs	r6, #1
 8012270:	4333      	orrs	r3, r6
 8012272:	6053      	str	r3, [r2, #4]
 8012274:	686b      	ldr	r3, [r5, #4]
 8012276:	401e      	ands	r6, r3
 8012278:	9b01      	ldr	r3, [sp, #4]
 801227a:	431e      	orrs	r6, r3
 801227c:	606e      	str	r6, [r5, #4]
 801227e:	9802      	ldr	r0, [sp, #8]
 8012280:	f7ff ff28 	bl	80120d4 <__malloc_unlock>
 8012284:	e75c      	b.n	8012140 <_realloc_r+0x14>
 8012286:	68a3      	ldr	r3, [r4, #8]
 8012288:	612b      	str	r3, [r5, #16]
 801228a:	68e3      	ldr	r3, [r4, #12]
 801228c:	616b      	str	r3, [r5, #20]
 801228e:	2a24      	cmp	r2, #36	; 0x24
 8012290:	d003      	beq.n	801229a <_realloc_r+0x16e>
 8012292:	002b      	movs	r3, r5
 8012294:	3410      	adds	r4, #16
 8012296:	3318      	adds	r3, #24
 8012298:	e7dd      	b.n	8012256 <_realloc_r+0x12a>
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	61ab      	str	r3, [r5, #24]
 801229e:	002b      	movs	r3, r5
 80122a0:	6962      	ldr	r2, [r4, #20]
 80122a2:	3320      	adds	r3, #32
 80122a4:	61ea      	str	r2, [r5, #28]
 80122a6:	3418      	adds	r4, #24
 80122a8:	e7d5      	b.n	8012256 <_realloc_r+0x12a>
 80122aa:	0021      	movs	r1, r4
 80122ac:	0038      	movs	r0, r7
 80122ae:	f003 fe50 	bl	8015f52 <memmove>
 80122b2:	e7d6      	b.n	8012262 <_realloc_r+0x136>
 80122b4:	9a01      	ldr	r2, [sp, #4]
 80122b6:	42b2      	cmp	r2, r6
 80122b8:	dc50      	bgt.n	801235c <_realloc_r+0x230>
 80122ba:	0028      	movs	r0, r5
 80122bc:	68da      	ldr	r2, [r3, #12]
 80122be:	689b      	ldr	r3, [r3, #8]
 80122c0:	3008      	adds	r0, #8
 80122c2:	60da      	str	r2, [r3, #12]
 80122c4:	6093      	str	r3, [r2, #8]
 80122c6:	68aa      	ldr	r2, [r5, #8]
 80122c8:	68eb      	ldr	r3, [r5, #12]
 80122ca:	60d3      	str	r3, [r2, #12]
 80122cc:	609a      	str	r2, [r3, #8]
 80122ce:	9a03      	ldr	r2, [sp, #12]
 80122d0:	3a04      	subs	r2, #4
 80122d2:	2a24      	cmp	r2, #36	; 0x24
 80122d4:	d83e      	bhi.n	8012354 <_realloc_r+0x228>
 80122d6:	2a13      	cmp	r2, #19
 80122d8:	d907      	bls.n	80122ea <_realloc_r+0x1be>
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	60ab      	str	r3, [r5, #8]
 80122de:	6863      	ldr	r3, [r4, #4]
 80122e0:	60eb      	str	r3, [r5, #12]
 80122e2:	2a1b      	cmp	r2, #27
 80122e4:	d824      	bhi.n	8012330 <_realloc_r+0x204>
 80122e6:	3408      	adds	r4, #8
 80122e8:	3008      	adds	r0, #8
 80122ea:	6823      	ldr	r3, [r4, #0]
 80122ec:	6003      	str	r3, [r0, #0]
 80122ee:	6863      	ldr	r3, [r4, #4]
 80122f0:	6043      	str	r3, [r0, #4]
 80122f2:	68a3      	ldr	r3, [r4, #8]
 80122f4:	6083      	str	r3, [r0, #8]
 80122f6:	9b01      	ldr	r3, [sp, #4]
 80122f8:	6868      	ldr	r0, [r5, #4]
 80122fa:	1af4      	subs	r4, r6, r3
 80122fc:	2301      	movs	r3, #1
 80122fe:	19aa      	adds	r2, r5, r6
 8012300:	4018      	ands	r0, r3
 8012302:	2c0f      	cmp	r4, #15
 8012304:	d800      	bhi.n	8012308 <_realloc_r+0x1dc>
 8012306:	e0ae      	b.n	8012466 <_realloc_r+0x33a>
 8012308:	9901      	ldr	r1, [sp, #4]
 801230a:	9e01      	ldr	r6, [sp, #4]
 801230c:	1869      	adds	r1, r5, r1
 801230e:	4330      	orrs	r0, r6
 8012310:	431c      	orrs	r4, r3
 8012312:	6068      	str	r0, [r5, #4]
 8012314:	604c      	str	r4, [r1, #4]
 8012316:	6850      	ldr	r0, [r2, #4]
 8012318:	3108      	adds	r1, #8
 801231a:	4303      	orrs	r3, r0
 801231c:	6053      	str	r3, [r2, #4]
 801231e:	9802      	ldr	r0, [sp, #8]
 8012320:	f003 f9c6 	bl	80156b0 <_free_r>
 8012324:	9802      	ldr	r0, [sp, #8]
 8012326:	3508      	adds	r5, #8
 8012328:	f7ff fed4 	bl	80120d4 <__malloc_unlock>
 801232c:	002f      	movs	r7, r5
 801232e:	e707      	b.n	8012140 <_realloc_r+0x14>
 8012330:	68a3      	ldr	r3, [r4, #8]
 8012332:	612b      	str	r3, [r5, #16]
 8012334:	68e3      	ldr	r3, [r4, #12]
 8012336:	616b      	str	r3, [r5, #20]
 8012338:	2a24      	cmp	r2, #36	; 0x24
 801233a:	d003      	beq.n	8012344 <_realloc_r+0x218>
 801233c:	0028      	movs	r0, r5
 801233e:	3410      	adds	r4, #16
 8012340:	3018      	adds	r0, #24
 8012342:	e7d2      	b.n	80122ea <_realloc_r+0x1be>
 8012344:	0028      	movs	r0, r5
 8012346:	6923      	ldr	r3, [r4, #16]
 8012348:	3020      	adds	r0, #32
 801234a:	61ab      	str	r3, [r5, #24]
 801234c:	6963      	ldr	r3, [r4, #20]
 801234e:	3418      	adds	r4, #24
 8012350:	61eb      	str	r3, [r5, #28]
 8012352:	e7ca      	b.n	80122ea <_realloc_r+0x1be>
 8012354:	0021      	movs	r1, r4
 8012356:	f003 fdfc 	bl	8015f52 <memmove>
 801235a:	e7cc      	b.n	80122f6 <_realloc_r+0x1ca>
 801235c:	9b01      	ldr	r3, [sp, #4]
 801235e:	42bb      	cmp	r3, r7
 8012360:	dc31      	bgt.n	80123c6 <_realloc_r+0x29a>
 8012362:	0028      	movs	r0, r5
 8012364:	68aa      	ldr	r2, [r5, #8]
 8012366:	68eb      	ldr	r3, [r5, #12]
 8012368:	3008      	adds	r0, #8
 801236a:	60d3      	str	r3, [r2, #12]
 801236c:	609a      	str	r2, [r3, #8]
 801236e:	9a03      	ldr	r2, [sp, #12]
 8012370:	3a04      	subs	r2, #4
 8012372:	2a24      	cmp	r2, #36	; 0x24
 8012374:	d823      	bhi.n	80123be <_realloc_r+0x292>
 8012376:	2a13      	cmp	r2, #19
 8012378:	d907      	bls.n	801238a <_realloc_r+0x25e>
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	60ab      	str	r3, [r5, #8]
 801237e:	6863      	ldr	r3, [r4, #4]
 8012380:	60eb      	str	r3, [r5, #12]
 8012382:	2a1b      	cmp	r2, #27
 8012384:	d809      	bhi.n	801239a <_realloc_r+0x26e>
 8012386:	3408      	adds	r4, #8
 8012388:	3008      	adds	r0, #8
 801238a:	6823      	ldr	r3, [r4, #0]
 801238c:	6003      	str	r3, [r0, #0]
 801238e:	6863      	ldr	r3, [r4, #4]
 8012390:	6043      	str	r3, [r0, #4]
 8012392:	68a3      	ldr	r3, [r4, #8]
 8012394:	6083      	str	r3, [r0, #8]
 8012396:	003e      	movs	r6, r7
 8012398:	e7ad      	b.n	80122f6 <_realloc_r+0x1ca>
 801239a:	68a3      	ldr	r3, [r4, #8]
 801239c:	612b      	str	r3, [r5, #16]
 801239e:	68e3      	ldr	r3, [r4, #12]
 80123a0:	616b      	str	r3, [r5, #20]
 80123a2:	2a24      	cmp	r2, #36	; 0x24
 80123a4:	d003      	beq.n	80123ae <_realloc_r+0x282>
 80123a6:	0028      	movs	r0, r5
 80123a8:	3410      	adds	r4, #16
 80123aa:	3018      	adds	r0, #24
 80123ac:	e7ed      	b.n	801238a <_realloc_r+0x25e>
 80123ae:	0028      	movs	r0, r5
 80123b0:	6923      	ldr	r3, [r4, #16]
 80123b2:	3020      	adds	r0, #32
 80123b4:	61ab      	str	r3, [r5, #24]
 80123b6:	6963      	ldr	r3, [r4, #20]
 80123b8:	3418      	adds	r4, #24
 80123ba:	61eb      	str	r3, [r5, #28]
 80123bc:	e7e5      	b.n	801238a <_realloc_r+0x25e>
 80123be:	0021      	movs	r1, r4
 80123c0:	f003 fdc7 	bl	8015f52 <memmove>
 80123c4:	e7e7      	b.n	8012396 <_realloc_r+0x26a>
 80123c6:	9905      	ldr	r1, [sp, #20]
 80123c8:	9802      	ldr	r0, [sp, #8]
 80123ca:	f7ff fc47 	bl	8011c5c <_malloc_r>
 80123ce:	1e07      	subs	r7, r0, #0
 80123d0:	d100      	bne.n	80123d4 <_realloc_r+0x2a8>
 80123d2:	e754      	b.n	801227e <_realloc_r+0x152>
 80123d4:	0023      	movs	r3, r4
 80123d6:	2201      	movs	r2, #1
 80123d8:	3b08      	subs	r3, #8
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	4393      	bics	r3, r2
 80123de:	9a04      	ldr	r2, [sp, #16]
 80123e0:	18d3      	adds	r3, r2, r3
 80123e2:	0002      	movs	r2, r0
 80123e4:	3a08      	subs	r2, #8
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d105      	bne.n	80123f6 <_realloc_r+0x2ca>
 80123ea:	685e      	ldr	r6, [r3, #4]
 80123ec:	2303      	movs	r3, #3
 80123ee:	439e      	bics	r6, r3
 80123f0:	9b03      	ldr	r3, [sp, #12]
 80123f2:	18f6      	adds	r6, r6, r3
 80123f4:	e6fd      	b.n	80121f2 <_realloc_r+0xc6>
 80123f6:	9a03      	ldr	r2, [sp, #12]
 80123f8:	3a04      	subs	r2, #4
 80123fa:	2a24      	cmp	r2, #36	; 0x24
 80123fc:	d82d      	bhi.n	801245a <_realloc_r+0x32e>
 80123fe:	2a13      	cmp	r2, #19
 8012400:	d928      	bls.n	8012454 <_realloc_r+0x328>
 8012402:	6823      	ldr	r3, [r4, #0]
 8012404:	6003      	str	r3, [r0, #0]
 8012406:	6863      	ldr	r3, [r4, #4]
 8012408:	6043      	str	r3, [r0, #4]
 801240a:	2a1b      	cmp	r2, #27
 801240c:	d80e      	bhi.n	801242c <_realloc_r+0x300>
 801240e:	0022      	movs	r2, r4
 8012410:	0003      	movs	r3, r0
 8012412:	3208      	adds	r2, #8
 8012414:	3308      	adds	r3, #8
 8012416:	6811      	ldr	r1, [r2, #0]
 8012418:	6019      	str	r1, [r3, #0]
 801241a:	6851      	ldr	r1, [r2, #4]
 801241c:	6059      	str	r1, [r3, #4]
 801241e:	6892      	ldr	r2, [r2, #8]
 8012420:	609a      	str	r2, [r3, #8]
 8012422:	0021      	movs	r1, r4
 8012424:	9802      	ldr	r0, [sp, #8]
 8012426:	f003 f943 	bl	80156b0 <_free_r>
 801242a:	e728      	b.n	801227e <_realloc_r+0x152>
 801242c:	68a3      	ldr	r3, [r4, #8]
 801242e:	6083      	str	r3, [r0, #8]
 8012430:	68e3      	ldr	r3, [r4, #12]
 8012432:	60c3      	str	r3, [r0, #12]
 8012434:	2a24      	cmp	r2, #36	; 0x24
 8012436:	d004      	beq.n	8012442 <_realloc_r+0x316>
 8012438:	0022      	movs	r2, r4
 801243a:	0003      	movs	r3, r0
 801243c:	3210      	adds	r2, #16
 801243e:	3310      	adds	r3, #16
 8012440:	e7e9      	b.n	8012416 <_realloc_r+0x2ea>
 8012442:	6923      	ldr	r3, [r4, #16]
 8012444:	0022      	movs	r2, r4
 8012446:	6103      	str	r3, [r0, #16]
 8012448:	0003      	movs	r3, r0
 801244a:	6961      	ldr	r1, [r4, #20]
 801244c:	3218      	adds	r2, #24
 801244e:	3318      	adds	r3, #24
 8012450:	6141      	str	r1, [r0, #20]
 8012452:	e7e0      	b.n	8012416 <_realloc_r+0x2ea>
 8012454:	0003      	movs	r3, r0
 8012456:	0022      	movs	r2, r4
 8012458:	e7dd      	b.n	8012416 <_realloc_r+0x2ea>
 801245a:	0021      	movs	r1, r4
 801245c:	f003 fd79 	bl	8015f52 <memmove>
 8012460:	e7df      	b.n	8012422 <_realloc_r+0x2f6>
 8012462:	9e03      	ldr	r6, [sp, #12]
 8012464:	e6c5      	b.n	80121f2 <_realloc_r+0xc6>
 8012466:	4306      	orrs	r6, r0
 8012468:	606e      	str	r6, [r5, #4]
 801246a:	6851      	ldr	r1, [r2, #4]
 801246c:	430b      	orrs	r3, r1
 801246e:	6053      	str	r3, [r2, #4]
 8012470:	e758      	b.n	8012324 <_realloc_r+0x1f8>
 8012472:	46c0      	nop			; (mov r8, r8)
 8012474:	200004d8 	.word	0x200004d8

08012478 <_sbrk_r>:
 8012478:	2300      	movs	r3, #0
 801247a:	b570      	push	{r4, r5, r6, lr}
 801247c:	4d06      	ldr	r5, [pc, #24]	; (8012498 <_sbrk_r+0x20>)
 801247e:	0004      	movs	r4, r0
 8012480:	0008      	movs	r0, r1
 8012482:	602b      	str	r3, [r5, #0]
 8012484:	f005 fede 	bl	8018244 <_sbrk>
 8012488:	1c43      	adds	r3, r0, #1
 801248a:	d103      	bne.n	8012494 <_sbrk_r+0x1c>
 801248c:	682b      	ldr	r3, [r5, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d000      	beq.n	8012494 <_sbrk_r+0x1c>
 8012492:	6023      	str	r3, [r4, #0]
 8012494:	bd70      	pop	{r4, r5, r6, pc}
 8012496:	46c0      	nop			; (mov r8, r8)
 8012498:	20006e64 	.word	0x20006e64

0801249c <sprintf>:
 801249c:	b40e      	push	{r1, r2, r3}
 801249e:	b500      	push	{lr}
 80124a0:	490b      	ldr	r1, [pc, #44]	; (80124d0 <sprintf+0x34>)
 80124a2:	b09c      	sub	sp, #112	; 0x70
 80124a4:	ab1d      	add	r3, sp, #116	; 0x74
 80124a6:	9002      	str	r0, [sp, #8]
 80124a8:	9006      	str	r0, [sp, #24]
 80124aa:	9107      	str	r1, [sp, #28]
 80124ac:	9104      	str	r1, [sp, #16]
 80124ae:	4809      	ldr	r0, [pc, #36]	; (80124d4 <sprintf+0x38>)
 80124b0:	4909      	ldr	r1, [pc, #36]	; (80124d8 <sprintf+0x3c>)
 80124b2:	cb04      	ldmia	r3!, {r2}
 80124b4:	9105      	str	r1, [sp, #20]
 80124b6:	6800      	ldr	r0, [r0, #0]
 80124b8:	a902      	add	r1, sp, #8
 80124ba:	9301      	str	r3, [sp, #4]
 80124bc:	f000 ff74 	bl	80133a8 <_svfprintf_r>
 80124c0:	2300      	movs	r3, #0
 80124c2:	9a02      	ldr	r2, [sp, #8]
 80124c4:	7013      	strb	r3, [r2, #0]
 80124c6:	b01c      	add	sp, #112	; 0x70
 80124c8:	bc08      	pop	{r3}
 80124ca:	b003      	add	sp, #12
 80124cc:	4718      	bx	r3
 80124ce:	46c0      	nop			; (mov r8, r8)
 80124d0:	7fffffff 	.word	0x7fffffff
 80124d4:	200000a8 	.word	0x200000a8
 80124d8:	ffff0208 	.word	0xffff0208

080124dc <strcat>:
 80124dc:	0002      	movs	r2, r0
 80124de:	b510      	push	{r4, lr}
 80124e0:	7813      	ldrb	r3, [r2, #0]
 80124e2:	0014      	movs	r4, r2
 80124e4:	3201      	adds	r2, #1
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1fa      	bne.n	80124e0 <strcat+0x4>
 80124ea:	5cca      	ldrb	r2, [r1, r3]
 80124ec:	54e2      	strb	r2, [r4, r3]
 80124ee:	3301      	adds	r3, #1
 80124f0:	2a00      	cmp	r2, #0
 80124f2:	d1fa      	bne.n	80124ea <strcat+0xe>
 80124f4:	bd10      	pop	{r4, pc}

080124f6 <strchr>:
 80124f6:	b2c9      	uxtb	r1, r1
 80124f8:	7803      	ldrb	r3, [r0, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d004      	beq.n	8012508 <strchr+0x12>
 80124fe:	428b      	cmp	r3, r1
 8012500:	d100      	bne.n	8012504 <strchr+0xe>
 8012502:	4770      	bx	lr
 8012504:	3001      	adds	r0, #1
 8012506:	e7f7      	b.n	80124f8 <strchr+0x2>
 8012508:	424b      	negs	r3, r1
 801250a:	4159      	adcs	r1, r3
 801250c:	4249      	negs	r1, r1
 801250e:	4008      	ands	r0, r1
 8012510:	e7f7      	b.n	8012502 <strchr+0xc>

08012512 <strcpy>:
 8012512:	0003      	movs	r3, r0
 8012514:	780a      	ldrb	r2, [r1, #0]
 8012516:	3101      	adds	r1, #1
 8012518:	701a      	strb	r2, [r3, #0]
 801251a:	3301      	adds	r3, #1
 801251c:	2a00      	cmp	r2, #0
 801251e:	d1f9      	bne.n	8012514 <strcpy+0x2>
 8012520:	4770      	bx	lr

08012522 <strncmp>:
 8012522:	b530      	push	{r4, r5, lr}
 8012524:	0005      	movs	r5, r0
 8012526:	1e10      	subs	r0, r2, #0
 8012528:	d00b      	beq.n	8012542 <strncmp+0x20>
 801252a:	2400      	movs	r4, #0
 801252c:	3a01      	subs	r2, #1
 801252e:	5d2b      	ldrb	r3, [r5, r4]
 8012530:	5d08      	ldrb	r0, [r1, r4]
 8012532:	4283      	cmp	r3, r0
 8012534:	d104      	bne.n	8012540 <strncmp+0x1e>
 8012536:	4294      	cmp	r4, r2
 8012538:	d002      	beq.n	8012540 <strncmp+0x1e>
 801253a:	3401      	adds	r4, #1
 801253c:	2b00      	cmp	r3, #0
 801253e:	d1f6      	bne.n	801252e <strncmp+0xc>
 8012540:	1a18      	subs	r0, r3, r0
 8012542:	bd30      	pop	{r4, r5, pc}

08012544 <strncpy>:
 8012544:	0003      	movs	r3, r0
 8012546:	b530      	push	{r4, r5, lr}
 8012548:	001d      	movs	r5, r3
 801254a:	2a00      	cmp	r2, #0
 801254c:	d006      	beq.n	801255c <strncpy+0x18>
 801254e:	780c      	ldrb	r4, [r1, #0]
 8012550:	3a01      	subs	r2, #1
 8012552:	3301      	adds	r3, #1
 8012554:	702c      	strb	r4, [r5, #0]
 8012556:	3101      	adds	r1, #1
 8012558:	2c00      	cmp	r4, #0
 801255a:	d1f5      	bne.n	8012548 <strncpy+0x4>
 801255c:	2100      	movs	r1, #0
 801255e:	189a      	adds	r2, r3, r2
 8012560:	4293      	cmp	r3, r2
 8012562:	d100      	bne.n	8012566 <strncpy+0x22>
 8012564:	bd30      	pop	{r4, r5, pc}
 8012566:	7019      	strb	r1, [r3, #0]
 8012568:	3301      	adds	r3, #1
 801256a:	e7f9      	b.n	8012560 <strncpy+0x1c>

0801256c <sulp>:
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	0016      	movs	r6, r2
 8012570:	000d      	movs	r5, r1
 8012572:	f004 f837 	bl	80165e4 <__ulp>
 8012576:	2e00      	cmp	r6, #0
 8012578:	d00d      	beq.n	8012596 <sulp+0x2a>
 801257a:	236b      	movs	r3, #107	; 0x6b
 801257c:	006a      	lsls	r2, r5, #1
 801257e:	0d52      	lsrs	r2, r2, #21
 8012580:	1a9b      	subs	r3, r3, r2
 8012582:	2b00      	cmp	r3, #0
 8012584:	dd07      	ble.n	8012596 <sulp+0x2a>
 8012586:	2400      	movs	r4, #0
 8012588:	4a03      	ldr	r2, [pc, #12]	; (8012598 <sulp+0x2c>)
 801258a:	051b      	lsls	r3, r3, #20
 801258c:	189d      	adds	r5, r3, r2
 801258e:	002b      	movs	r3, r5
 8012590:	0022      	movs	r2, r4
 8012592:	f7ef f97d 	bl	8001890 <__aeabi_dmul>
 8012596:	bd70      	pop	{r4, r5, r6, pc}
 8012598:	3ff00000 	.word	0x3ff00000

0801259c <_strtod_l>:
 801259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801259e:	001d      	movs	r5, r3
 80125a0:	2300      	movs	r3, #0
 80125a2:	b0a7      	sub	sp, #156	; 0x9c
 80125a4:	9322      	str	r3, [sp, #136]	; 0x88
 80125a6:	4bae      	ldr	r3, [pc, #696]	; (8012860 <_strtod_l+0x2c4>)
 80125a8:	9005      	str	r0, [sp, #20]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	9108      	str	r1, [sp, #32]
 80125ae:	0018      	movs	r0, r3
 80125b0:	9307      	str	r3, [sp, #28]
 80125b2:	921d      	str	r2, [sp, #116]	; 0x74
 80125b4:	f7ed fdb0 	bl	8000118 <strlen>
 80125b8:	2600      	movs	r6, #0
 80125ba:	0004      	movs	r4, r0
 80125bc:	2700      	movs	r7, #0
 80125be:	9b08      	ldr	r3, [sp, #32]
 80125c0:	9321      	str	r3, [sp, #132]	; 0x84
 80125c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80125c4:	7813      	ldrb	r3, [r2, #0]
 80125c6:	2b2b      	cmp	r3, #43	; 0x2b
 80125c8:	d058      	beq.n	801267c <_strtod_l+0xe0>
 80125ca:	d844      	bhi.n	8012656 <_strtod_l+0xba>
 80125cc:	2b0d      	cmp	r3, #13
 80125ce:	d83d      	bhi.n	801264c <_strtod_l+0xb0>
 80125d0:	2b08      	cmp	r3, #8
 80125d2:	d83d      	bhi.n	8012650 <_strtod_l+0xb4>
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d047      	beq.n	8012668 <_strtod_l+0xcc>
 80125d8:	2300      	movs	r3, #0
 80125da:	9310      	str	r3, [sp, #64]	; 0x40
 80125dc:	2200      	movs	r2, #0
 80125de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125e0:	920a      	str	r2, [sp, #40]	; 0x28
 80125e2:	9306      	str	r3, [sp, #24]
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	2b30      	cmp	r3, #48	; 0x30
 80125e8:	d000      	beq.n	80125ec <_strtod_l+0x50>
 80125ea:	e083      	b.n	80126f4 <_strtod_l+0x158>
 80125ec:	9b06      	ldr	r3, [sp, #24]
 80125ee:	3220      	adds	r2, #32
 80125f0:	785b      	ldrb	r3, [r3, #1]
 80125f2:	4393      	bics	r3, r2
 80125f4:	2b58      	cmp	r3, #88	; 0x58
 80125f6:	d000      	beq.n	80125fa <_strtod_l+0x5e>
 80125f8:	e072      	b.n	80126e0 <_strtod_l+0x144>
 80125fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125fc:	9502      	str	r5, [sp, #8]
 80125fe:	9301      	str	r3, [sp, #4]
 8012600:	ab22      	add	r3, sp, #136	; 0x88
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	4a97      	ldr	r2, [pc, #604]	; (8012864 <_strtod_l+0x2c8>)
 8012606:	ab23      	add	r3, sp, #140	; 0x8c
 8012608:	9805      	ldr	r0, [sp, #20]
 801260a:	a921      	add	r1, sp, #132	; 0x84
 801260c:	f003 f96c 	bl	80158e8 <__gethex>
 8012610:	2307      	movs	r3, #7
 8012612:	0005      	movs	r5, r0
 8012614:	0004      	movs	r4, r0
 8012616:	401d      	ands	r5, r3
 8012618:	4218      	tst	r0, r3
 801261a:	d006      	beq.n	801262a <_strtod_l+0x8e>
 801261c:	2d06      	cmp	r5, #6
 801261e:	d12f      	bne.n	8012680 <_strtod_l+0xe4>
 8012620:	9b06      	ldr	r3, [sp, #24]
 8012622:	3301      	adds	r3, #1
 8012624:	9321      	str	r3, [sp, #132]	; 0x84
 8012626:	2300      	movs	r3, #0
 8012628:	9310      	str	r3, [sp, #64]	; 0x40
 801262a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <_strtod_l+0x9a>
 8012630:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012632:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012634:	601a      	str	r2, [r3, #0]
 8012636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012638:	2b00      	cmp	r3, #0
 801263a:	d01c      	beq.n	8012676 <_strtod_l+0xda>
 801263c:	2380      	movs	r3, #128	; 0x80
 801263e:	0032      	movs	r2, r6
 8012640:	061b      	lsls	r3, r3, #24
 8012642:	18fb      	adds	r3, r7, r3
 8012644:	0010      	movs	r0, r2
 8012646:	0019      	movs	r1, r3
 8012648:	b027      	add	sp, #156	; 0x9c
 801264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801264c:	2b20      	cmp	r3, #32
 801264e:	d1c3      	bne.n	80125d8 <_strtod_l+0x3c>
 8012650:	3201      	adds	r2, #1
 8012652:	9221      	str	r2, [sp, #132]	; 0x84
 8012654:	e7b5      	b.n	80125c2 <_strtod_l+0x26>
 8012656:	2b2d      	cmp	r3, #45	; 0x2d
 8012658:	d1be      	bne.n	80125d8 <_strtod_l+0x3c>
 801265a:	3b2c      	subs	r3, #44	; 0x2c
 801265c:	9310      	str	r3, [sp, #64]	; 0x40
 801265e:	1c53      	adds	r3, r2, #1
 8012660:	9321      	str	r3, [sp, #132]	; 0x84
 8012662:	7853      	ldrb	r3, [r2, #1]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1b9      	bne.n	80125dc <_strtod_l+0x40>
 8012668:	9b08      	ldr	r3, [sp, #32]
 801266a:	9321      	str	r3, [sp, #132]	; 0x84
 801266c:	2300      	movs	r3, #0
 801266e:	9310      	str	r3, [sp, #64]	; 0x40
 8012670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1dc      	bne.n	8012630 <_strtod_l+0x94>
 8012676:	0032      	movs	r2, r6
 8012678:	003b      	movs	r3, r7
 801267a:	e7e3      	b.n	8012644 <_strtod_l+0xa8>
 801267c:	2300      	movs	r3, #0
 801267e:	e7ed      	b.n	801265c <_strtod_l+0xc0>
 8012680:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012682:	2a00      	cmp	r2, #0
 8012684:	d007      	beq.n	8012696 <_strtod_l+0xfa>
 8012686:	2135      	movs	r1, #53	; 0x35
 8012688:	a824      	add	r0, sp, #144	; 0x90
 801268a:	f004 f8aa 	bl	80167e2 <__copybits>
 801268e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012690:	9805      	ldr	r0, [sp, #20]
 8012692:	f003 fc99 	bl	8015fc8 <_Bfree>
 8012696:	1e68      	subs	r0, r5, #1
 8012698:	2805      	cmp	r0, #5
 801269a:	d806      	bhi.n	80126aa <_strtod_l+0x10e>
 801269c:	f7ed fd44 	bl	8000128 <__gnu_thumb1_case_uqi>
 80126a0:	1c190b0e 	.word	0x1c190b0e
 80126a4:	030e      	.short	0x030e
 80126a6:	2700      	movs	r7, #0
 80126a8:	003e      	movs	r6, r7
 80126aa:	0723      	lsls	r3, r4, #28
 80126ac:	d5bd      	bpl.n	801262a <_strtod_l+0x8e>
 80126ae:	2380      	movs	r3, #128	; 0x80
 80126b0:	061b      	lsls	r3, r3, #24
 80126b2:	431f      	orrs	r7, r3
 80126b4:	e7b9      	b.n	801262a <_strtod_l+0x8e>
 80126b6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80126b8:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80126ba:	e7f6      	b.n	80126aa <_strtod_l+0x10e>
 80126bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80126be:	4a6a      	ldr	r2, [pc, #424]	; (8012868 <_strtod_l+0x2cc>)
 80126c0:	496a      	ldr	r1, [pc, #424]	; (801286c <_strtod_l+0x2d0>)
 80126c2:	401a      	ands	r2, r3
 80126c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80126c6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80126c8:	185b      	adds	r3, r3, r1
 80126ca:	051b      	lsls	r3, r3, #20
 80126cc:	431a      	orrs	r2, r3
 80126ce:	0017      	movs	r7, r2
 80126d0:	e7eb      	b.n	80126aa <_strtod_l+0x10e>
 80126d2:	2600      	movs	r6, #0
 80126d4:	4f66      	ldr	r7, [pc, #408]	; (8012870 <_strtod_l+0x2d4>)
 80126d6:	e7e8      	b.n	80126aa <_strtod_l+0x10e>
 80126d8:	2601      	movs	r6, #1
 80126da:	4f66      	ldr	r7, [pc, #408]	; (8012874 <_strtod_l+0x2d8>)
 80126dc:	4276      	negs	r6, r6
 80126de:	e7e4      	b.n	80126aa <_strtod_l+0x10e>
 80126e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	9221      	str	r2, [sp, #132]	; 0x84
 80126e6:	785b      	ldrb	r3, [r3, #1]
 80126e8:	2b30      	cmp	r3, #48	; 0x30
 80126ea:	d0f9      	beq.n	80126e0 <_strtod_l+0x144>
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d09c      	beq.n	801262a <_strtod_l+0x8e>
 80126f0:	2301      	movs	r3, #1
 80126f2:	930a      	str	r3, [sp, #40]	; 0x28
 80126f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126f6:	220a      	movs	r2, #10
 80126f8:	9311      	str	r3, [sp, #68]	; 0x44
 80126fa:	2300      	movs	r3, #0
 80126fc:	930e      	str	r3, [sp, #56]	; 0x38
 80126fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012700:	9309      	str	r3, [sp, #36]	; 0x24
 8012702:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012704:	7805      	ldrb	r5, [r0, #0]
 8012706:	002b      	movs	r3, r5
 8012708:	3b30      	subs	r3, #48	; 0x30
 801270a:	b2d9      	uxtb	r1, r3
 801270c:	2909      	cmp	r1, #9
 801270e:	d927      	bls.n	8012760 <_strtod_l+0x1c4>
 8012710:	0022      	movs	r2, r4
 8012712:	9907      	ldr	r1, [sp, #28]
 8012714:	f7ff ff05 	bl	8012522 <strncmp>
 8012718:	2800      	cmp	r0, #0
 801271a:	d033      	beq.n	8012784 <_strtod_l+0x1e8>
 801271c:	2000      	movs	r0, #0
 801271e:	002b      	movs	r3, r5
 8012720:	4684      	mov	ip, r0
 8012722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012724:	900c      	str	r0, [sp, #48]	; 0x30
 8012726:	9206      	str	r2, [sp, #24]
 8012728:	2220      	movs	r2, #32
 801272a:	0019      	movs	r1, r3
 801272c:	4391      	bics	r1, r2
 801272e:	000a      	movs	r2, r1
 8012730:	2100      	movs	r1, #0
 8012732:	9107      	str	r1, [sp, #28]
 8012734:	2a45      	cmp	r2, #69	; 0x45
 8012736:	d000      	beq.n	801273a <_strtod_l+0x19e>
 8012738:	e0c5      	b.n	80128c6 <_strtod_l+0x32a>
 801273a:	9b06      	ldr	r3, [sp, #24]
 801273c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801273e:	4303      	orrs	r3, r0
 8012740:	4313      	orrs	r3, r2
 8012742:	428b      	cmp	r3, r1
 8012744:	d090      	beq.n	8012668 <_strtod_l+0xcc>
 8012746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012748:	9308      	str	r3, [sp, #32]
 801274a:	3301      	adds	r3, #1
 801274c:	9321      	str	r3, [sp, #132]	; 0x84
 801274e:	9b08      	ldr	r3, [sp, #32]
 8012750:	785b      	ldrb	r3, [r3, #1]
 8012752:	2b2b      	cmp	r3, #43	; 0x2b
 8012754:	d075      	beq.n	8012842 <_strtod_l+0x2a6>
 8012756:	000c      	movs	r4, r1
 8012758:	2b2d      	cmp	r3, #45	; 0x2d
 801275a:	d178      	bne.n	801284e <_strtod_l+0x2b2>
 801275c:	2401      	movs	r4, #1
 801275e:	e071      	b.n	8012844 <_strtod_l+0x2a8>
 8012760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012762:	2908      	cmp	r1, #8
 8012764:	dc09      	bgt.n	801277a <_strtod_l+0x1de>
 8012766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012768:	4351      	muls	r1, r2
 801276a:	185b      	adds	r3, r3, r1
 801276c:	930b      	str	r3, [sp, #44]	; 0x2c
 801276e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012770:	3001      	adds	r0, #1
 8012772:	3301      	adds	r3, #1
 8012774:	9309      	str	r3, [sp, #36]	; 0x24
 8012776:	9021      	str	r0, [sp, #132]	; 0x84
 8012778:	e7c3      	b.n	8012702 <_strtod_l+0x166>
 801277a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801277c:	4351      	muls	r1, r2
 801277e:	185b      	adds	r3, r3, r1
 8012780:	930e      	str	r3, [sp, #56]	; 0x38
 8012782:	e7f4      	b.n	801276e <_strtod_l+0x1d2>
 8012784:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012788:	191c      	adds	r4, r3, r4
 801278a:	9421      	str	r4, [sp, #132]	; 0x84
 801278c:	7823      	ldrb	r3, [r4, #0]
 801278e:	2a00      	cmp	r2, #0
 8012790:	d039      	beq.n	8012806 <_strtod_l+0x26a>
 8012792:	900c      	str	r0, [sp, #48]	; 0x30
 8012794:	9206      	str	r2, [sp, #24]
 8012796:	001a      	movs	r2, r3
 8012798:	3a30      	subs	r2, #48	; 0x30
 801279a:	2a09      	cmp	r2, #9
 801279c:	d912      	bls.n	80127c4 <_strtod_l+0x228>
 801279e:	2201      	movs	r2, #1
 80127a0:	4694      	mov	ip, r2
 80127a2:	e7c1      	b.n	8012728 <_strtod_l+0x18c>
 80127a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127a6:	3001      	adds	r0, #1
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	9221      	str	r2, [sp, #132]	; 0x84
 80127ac:	785b      	ldrb	r3, [r3, #1]
 80127ae:	2b30      	cmp	r3, #48	; 0x30
 80127b0:	d0f8      	beq.n	80127a4 <_strtod_l+0x208>
 80127b2:	001a      	movs	r2, r3
 80127b4:	3a31      	subs	r2, #49	; 0x31
 80127b6:	2a08      	cmp	r2, #8
 80127b8:	d83e      	bhi.n	8012838 <_strtod_l+0x29c>
 80127ba:	900c      	str	r0, [sp, #48]	; 0x30
 80127bc:	2000      	movs	r0, #0
 80127be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127c0:	9006      	str	r0, [sp, #24]
 80127c2:	9211      	str	r2, [sp, #68]	; 0x44
 80127c4:	001a      	movs	r2, r3
 80127c6:	9906      	ldr	r1, [sp, #24]
 80127c8:	1c44      	adds	r4, r0, #1
 80127ca:	3a30      	subs	r2, #48	; 0x30
 80127cc:	2b30      	cmp	r3, #48	; 0x30
 80127ce:	d013      	beq.n	80127f8 <_strtod_l+0x25c>
 80127d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127d2:	191b      	adds	r3, r3, r4
 80127d4:	930c      	str	r3, [sp, #48]	; 0x30
 80127d6:	1844      	adds	r4, r0, r1
 80127d8:	000b      	movs	r3, r1
 80127da:	210a      	movs	r1, #10
 80127dc:	429c      	cmp	r4, r3
 80127de:	d114      	bne.n	801280a <_strtod_l+0x26e>
 80127e0:	9b06      	ldr	r3, [sp, #24]
 80127e2:	1c59      	adds	r1, r3, #1
 80127e4:	1809      	adds	r1, r1, r0
 80127e6:	1818      	adds	r0, r3, r0
 80127e8:	2808      	cmp	r0, #8
 80127ea:	dc1c      	bgt.n	8012826 <_strtod_l+0x28a>
 80127ec:	230a      	movs	r3, #10
 80127ee:	2400      	movs	r4, #0
 80127f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80127f2:	4343      	muls	r3, r0
 80127f4:	18d3      	adds	r3, r2, r3
 80127f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80127f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127fa:	0020      	movs	r0, r4
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	9221      	str	r2, [sp, #132]	; 0x84
 8012800:	785b      	ldrb	r3, [r3, #1]
 8012802:	9106      	str	r1, [sp, #24]
 8012804:	e7c7      	b.n	8012796 <_strtod_l+0x1fa>
 8012806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012808:	e7d1      	b.n	80127ae <_strtod_l+0x212>
 801280a:	2b08      	cmp	r3, #8
 801280c:	dc04      	bgt.n	8012818 <_strtod_l+0x27c>
 801280e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012810:	434d      	muls	r5, r1
 8012812:	950b      	str	r5, [sp, #44]	; 0x2c
 8012814:	3301      	adds	r3, #1
 8012816:	e7e1      	b.n	80127dc <_strtod_l+0x240>
 8012818:	1c5d      	adds	r5, r3, #1
 801281a:	2d10      	cmp	r5, #16
 801281c:	dcfa      	bgt.n	8012814 <_strtod_l+0x278>
 801281e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012820:	434d      	muls	r5, r1
 8012822:	950e      	str	r5, [sp, #56]	; 0x38
 8012824:	e7f6      	b.n	8012814 <_strtod_l+0x278>
 8012826:	2400      	movs	r4, #0
 8012828:	2910      	cmp	r1, #16
 801282a:	dce5      	bgt.n	80127f8 <_strtod_l+0x25c>
 801282c:	230a      	movs	r3, #10
 801282e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012830:	4343      	muls	r3, r0
 8012832:	18d3      	adds	r3, r2, r3
 8012834:	930e      	str	r3, [sp, #56]	; 0x38
 8012836:	e7df      	b.n	80127f8 <_strtod_l+0x25c>
 8012838:	2200      	movs	r2, #0
 801283a:	920c      	str	r2, [sp, #48]	; 0x30
 801283c:	9206      	str	r2, [sp, #24]
 801283e:	3201      	adds	r2, #1
 8012840:	e7ae      	b.n	80127a0 <_strtod_l+0x204>
 8012842:	2400      	movs	r4, #0
 8012844:	9b08      	ldr	r3, [sp, #32]
 8012846:	3302      	adds	r3, #2
 8012848:	9321      	str	r3, [sp, #132]	; 0x84
 801284a:	9b08      	ldr	r3, [sp, #32]
 801284c:	789b      	ldrb	r3, [r3, #2]
 801284e:	001a      	movs	r2, r3
 8012850:	3a30      	subs	r2, #48	; 0x30
 8012852:	2a09      	cmp	r2, #9
 8012854:	d914      	bls.n	8012880 <_strtod_l+0x2e4>
 8012856:	9a08      	ldr	r2, [sp, #32]
 8012858:	9221      	str	r2, [sp, #132]	; 0x84
 801285a:	2200      	movs	r2, #0
 801285c:	e032      	b.n	80128c4 <_strtod_l+0x328>
 801285e:	46c0      	nop			; (mov r8, r8)
 8012860:	0801afec 	.word	0x0801afec
 8012864:	0801ae60 	.word	0x0801ae60
 8012868:	ffefffff 	.word	0xffefffff
 801286c:	00000433 	.word	0x00000433
 8012870:	7ff00000 	.word	0x7ff00000
 8012874:	7fffffff 	.word	0x7fffffff
 8012878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801287a:	1c5a      	adds	r2, r3, #1
 801287c:	9221      	str	r2, [sp, #132]	; 0x84
 801287e:	785b      	ldrb	r3, [r3, #1]
 8012880:	2b30      	cmp	r3, #48	; 0x30
 8012882:	d0f9      	beq.n	8012878 <_strtod_l+0x2dc>
 8012884:	2200      	movs	r2, #0
 8012886:	9207      	str	r2, [sp, #28]
 8012888:	001a      	movs	r2, r3
 801288a:	3a31      	subs	r2, #49	; 0x31
 801288c:	2a08      	cmp	r2, #8
 801288e:	d81a      	bhi.n	80128c6 <_strtod_l+0x32a>
 8012890:	3b30      	subs	r3, #48	; 0x30
 8012892:	001a      	movs	r2, r3
 8012894:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012896:	9307      	str	r3, [sp, #28]
 8012898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801289a:	1c59      	adds	r1, r3, #1
 801289c:	9121      	str	r1, [sp, #132]	; 0x84
 801289e:	785b      	ldrb	r3, [r3, #1]
 80128a0:	001d      	movs	r5, r3
 80128a2:	3d30      	subs	r5, #48	; 0x30
 80128a4:	2d09      	cmp	r5, #9
 80128a6:	d939      	bls.n	801291c <_strtod_l+0x380>
 80128a8:	9d07      	ldr	r5, [sp, #28]
 80128aa:	1b49      	subs	r1, r1, r5
 80128ac:	4daf      	ldr	r5, [pc, #700]	; (8012b6c <_strtod_l+0x5d0>)
 80128ae:	9507      	str	r5, [sp, #28]
 80128b0:	2908      	cmp	r1, #8
 80128b2:	dc03      	bgt.n	80128bc <_strtod_l+0x320>
 80128b4:	9207      	str	r2, [sp, #28]
 80128b6:	42aa      	cmp	r2, r5
 80128b8:	dd00      	ble.n	80128bc <_strtod_l+0x320>
 80128ba:	9507      	str	r5, [sp, #28]
 80128bc:	2c00      	cmp	r4, #0
 80128be:	d002      	beq.n	80128c6 <_strtod_l+0x32a>
 80128c0:	9a07      	ldr	r2, [sp, #28]
 80128c2:	4252      	negs	r2, r2
 80128c4:	9207      	str	r2, [sp, #28]
 80128c6:	9a06      	ldr	r2, [sp, #24]
 80128c8:	2a00      	cmp	r2, #0
 80128ca:	d14b      	bne.n	8012964 <_strtod_l+0x3c8>
 80128cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128ce:	4310      	orrs	r0, r2
 80128d0:	d000      	beq.n	80128d4 <_strtod_l+0x338>
 80128d2:	e6aa      	b.n	801262a <_strtod_l+0x8e>
 80128d4:	4662      	mov	r2, ip
 80128d6:	2a00      	cmp	r2, #0
 80128d8:	d000      	beq.n	80128dc <_strtod_l+0x340>
 80128da:	e6c5      	b.n	8012668 <_strtod_l+0xcc>
 80128dc:	2b69      	cmp	r3, #105	; 0x69
 80128de:	d025      	beq.n	801292c <_strtod_l+0x390>
 80128e0:	dc21      	bgt.n	8012926 <_strtod_l+0x38a>
 80128e2:	2b49      	cmp	r3, #73	; 0x49
 80128e4:	d022      	beq.n	801292c <_strtod_l+0x390>
 80128e6:	2b4e      	cmp	r3, #78	; 0x4e
 80128e8:	d000      	beq.n	80128ec <_strtod_l+0x350>
 80128ea:	e6bd      	b.n	8012668 <_strtod_l+0xcc>
 80128ec:	49a0      	ldr	r1, [pc, #640]	; (8012b70 <_strtod_l+0x5d4>)
 80128ee:	a821      	add	r0, sp, #132	; 0x84
 80128f0:	f003 fa48 	bl	8015d84 <__match>
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d100      	bne.n	80128fa <_strtod_l+0x35e>
 80128f8:	e6b6      	b.n	8012668 <_strtod_l+0xcc>
 80128fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	2b28      	cmp	r3, #40	; 0x28
 8012900:	d12a      	bne.n	8012958 <_strtod_l+0x3bc>
 8012902:	499c      	ldr	r1, [pc, #624]	; (8012b74 <_strtod_l+0x5d8>)
 8012904:	aa24      	add	r2, sp, #144	; 0x90
 8012906:	a821      	add	r0, sp, #132	; 0x84
 8012908:	f003 fa50 	bl	8015dac <__hexnan>
 801290c:	2805      	cmp	r0, #5
 801290e:	d123      	bne.n	8012958 <_strtod_l+0x3bc>
 8012910:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012912:	4a99      	ldr	r2, [pc, #612]	; (8012b78 <_strtod_l+0x5dc>)
 8012914:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012916:	431a      	orrs	r2, r3
 8012918:	0017      	movs	r7, r2
 801291a:	e686      	b.n	801262a <_strtod_l+0x8e>
 801291c:	210a      	movs	r1, #10
 801291e:	434a      	muls	r2, r1
 8012920:	18d2      	adds	r2, r2, r3
 8012922:	3a30      	subs	r2, #48	; 0x30
 8012924:	e7b8      	b.n	8012898 <_strtod_l+0x2fc>
 8012926:	2b6e      	cmp	r3, #110	; 0x6e
 8012928:	d0e0      	beq.n	80128ec <_strtod_l+0x350>
 801292a:	e69d      	b.n	8012668 <_strtod_l+0xcc>
 801292c:	4993      	ldr	r1, [pc, #588]	; (8012b7c <_strtod_l+0x5e0>)
 801292e:	a821      	add	r0, sp, #132	; 0x84
 8012930:	f003 fa28 	bl	8015d84 <__match>
 8012934:	2800      	cmp	r0, #0
 8012936:	d100      	bne.n	801293a <_strtod_l+0x39e>
 8012938:	e696      	b.n	8012668 <_strtod_l+0xcc>
 801293a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801293c:	4990      	ldr	r1, [pc, #576]	; (8012b80 <_strtod_l+0x5e4>)
 801293e:	3b01      	subs	r3, #1
 8012940:	a821      	add	r0, sp, #132	; 0x84
 8012942:	9321      	str	r3, [sp, #132]	; 0x84
 8012944:	f003 fa1e 	bl	8015d84 <__match>
 8012948:	2800      	cmp	r0, #0
 801294a:	d102      	bne.n	8012952 <_strtod_l+0x3b6>
 801294c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801294e:	3301      	adds	r3, #1
 8012950:	9321      	str	r3, [sp, #132]	; 0x84
 8012952:	2600      	movs	r6, #0
 8012954:	4f88      	ldr	r7, [pc, #544]	; (8012b78 <_strtod_l+0x5dc>)
 8012956:	e668      	b.n	801262a <_strtod_l+0x8e>
 8012958:	488a      	ldr	r0, [pc, #552]	; (8012b84 <_strtod_l+0x5e8>)
 801295a:	f003 ffb9 	bl	80168d0 <nan>
 801295e:	0006      	movs	r6, r0
 8012960:	000f      	movs	r7, r1
 8012962:	e662      	b.n	801262a <_strtod_l+0x8e>
 8012964:	9b07      	ldr	r3, [sp, #28]
 8012966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012968:	1a9b      	subs	r3, r3, r2
 801296a:	930a      	str	r3, [sp, #40]	; 0x28
 801296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801296e:	2b00      	cmp	r3, #0
 8012970:	d101      	bne.n	8012976 <_strtod_l+0x3da>
 8012972:	9b06      	ldr	r3, [sp, #24]
 8012974:	9309      	str	r3, [sp, #36]	; 0x24
 8012976:	9c06      	ldr	r4, [sp, #24]
 8012978:	2c10      	cmp	r4, #16
 801297a:	dd00      	ble.n	801297e <_strtod_l+0x3e2>
 801297c:	2410      	movs	r4, #16
 801297e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012980:	f7ef fe08 	bl	8002594 <__aeabi_ui2d>
 8012984:	9b06      	ldr	r3, [sp, #24]
 8012986:	0006      	movs	r6, r0
 8012988:	000f      	movs	r7, r1
 801298a:	2b09      	cmp	r3, #9
 801298c:	dd15      	ble.n	80129ba <_strtod_l+0x41e>
 801298e:	0022      	movs	r2, r4
 8012990:	4b7d      	ldr	r3, [pc, #500]	; (8012b88 <_strtod_l+0x5ec>)
 8012992:	3a09      	subs	r2, #9
 8012994:	00d2      	lsls	r2, r2, #3
 8012996:	189b      	adds	r3, r3, r2
 8012998:	681a      	ldr	r2, [r3, #0]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	f7ee ff78 	bl	8001890 <__aeabi_dmul>
 80129a0:	0006      	movs	r6, r0
 80129a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80129a4:	000f      	movs	r7, r1
 80129a6:	f7ef fdf5 	bl	8002594 <__aeabi_ui2d>
 80129aa:	0002      	movs	r2, r0
 80129ac:	000b      	movs	r3, r1
 80129ae:	0030      	movs	r0, r6
 80129b0:	0039      	movs	r1, r7
 80129b2:	f7ed fffd 	bl	80009b0 <__aeabi_dadd>
 80129b6:	0006      	movs	r6, r0
 80129b8:	000f      	movs	r7, r1
 80129ba:	9b06      	ldr	r3, [sp, #24]
 80129bc:	2b0f      	cmp	r3, #15
 80129be:	dc39      	bgt.n	8012a34 <_strtod_l+0x498>
 80129c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d100      	bne.n	80129c8 <_strtod_l+0x42c>
 80129c6:	e630      	b.n	801262a <_strtod_l+0x8e>
 80129c8:	dd24      	ble.n	8012a14 <_strtod_l+0x478>
 80129ca:	2b16      	cmp	r3, #22
 80129cc:	dc09      	bgt.n	80129e2 <_strtod_l+0x446>
 80129ce:	00dd      	lsls	r5, r3, #3
 80129d0:	0032      	movs	r2, r6
 80129d2:	003b      	movs	r3, r7
 80129d4:	4c6c      	ldr	r4, [pc, #432]	; (8012b88 <_strtod_l+0x5ec>)
 80129d6:	1964      	adds	r4, r4, r5
 80129d8:	6820      	ldr	r0, [r4, #0]
 80129da:	6861      	ldr	r1, [r4, #4]
 80129dc:	f7ee ff58 	bl	8001890 <__aeabi_dmul>
 80129e0:	e7bd      	b.n	801295e <_strtod_l+0x3c2>
 80129e2:	2325      	movs	r3, #37	; 0x25
 80129e4:	9a06      	ldr	r2, [sp, #24]
 80129e6:	1a9b      	subs	r3, r3, r2
 80129e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129ea:	4293      	cmp	r3, r2
 80129ec:	db22      	blt.n	8012a34 <_strtod_l+0x498>
 80129ee:	240f      	movs	r4, #15
 80129f0:	9b06      	ldr	r3, [sp, #24]
 80129f2:	4d65      	ldr	r5, [pc, #404]	; (8012b88 <_strtod_l+0x5ec>)
 80129f4:	1ae4      	subs	r4, r4, r3
 80129f6:	00e1      	lsls	r1, r4, #3
 80129f8:	1869      	adds	r1, r5, r1
 80129fa:	0032      	movs	r2, r6
 80129fc:	6808      	ldr	r0, [r1, #0]
 80129fe:	6849      	ldr	r1, [r1, #4]
 8012a00:	003b      	movs	r3, r7
 8012a02:	f7ee ff45 	bl	8001890 <__aeabi_dmul>
 8012a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a08:	1b1c      	subs	r4, r3, r4
 8012a0a:	00e4      	lsls	r4, r4, #3
 8012a0c:	192c      	adds	r4, r5, r4
 8012a0e:	6822      	ldr	r2, [r4, #0]
 8012a10:	6863      	ldr	r3, [r4, #4]
 8012a12:	e7e3      	b.n	80129dc <_strtod_l+0x440>
 8012a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a16:	3316      	adds	r3, #22
 8012a18:	db0c      	blt.n	8012a34 <_strtod_l+0x498>
 8012a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a1c:	9a07      	ldr	r2, [sp, #28]
 8012a1e:	0030      	movs	r0, r6
 8012a20:	1a9a      	subs	r2, r3, r2
 8012a22:	4b59      	ldr	r3, [pc, #356]	; (8012b88 <_strtod_l+0x5ec>)
 8012a24:	00d2      	lsls	r2, r2, #3
 8012a26:	189b      	adds	r3, r3, r2
 8012a28:	0039      	movs	r1, r7
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	f7ee fb29 	bl	8001084 <__aeabi_ddiv>
 8012a32:	e794      	b.n	801295e <_strtod_l+0x3c2>
 8012a34:	9b06      	ldr	r3, [sp, #24]
 8012a36:	1b1c      	subs	r4, r3, r4
 8012a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a3a:	18e4      	adds	r4, r4, r3
 8012a3c:	2c00      	cmp	r4, #0
 8012a3e:	dd70      	ble.n	8012b22 <_strtod_l+0x586>
 8012a40:	230f      	movs	r3, #15
 8012a42:	0021      	movs	r1, r4
 8012a44:	4019      	ands	r1, r3
 8012a46:	421c      	tst	r4, r3
 8012a48:	d00a      	beq.n	8012a60 <_strtod_l+0x4c4>
 8012a4a:	00cb      	lsls	r3, r1, #3
 8012a4c:	494e      	ldr	r1, [pc, #312]	; (8012b88 <_strtod_l+0x5ec>)
 8012a4e:	0032      	movs	r2, r6
 8012a50:	18c9      	adds	r1, r1, r3
 8012a52:	6808      	ldr	r0, [r1, #0]
 8012a54:	6849      	ldr	r1, [r1, #4]
 8012a56:	003b      	movs	r3, r7
 8012a58:	f7ee ff1a 	bl	8001890 <__aeabi_dmul>
 8012a5c:	0006      	movs	r6, r0
 8012a5e:	000f      	movs	r7, r1
 8012a60:	230f      	movs	r3, #15
 8012a62:	439c      	bics	r4, r3
 8012a64:	d048      	beq.n	8012af8 <_strtod_l+0x55c>
 8012a66:	3326      	adds	r3, #38	; 0x26
 8012a68:	33ff      	adds	r3, #255	; 0xff
 8012a6a:	429c      	cmp	r4, r3
 8012a6c:	dd22      	ble.n	8012ab4 <_strtod_l+0x518>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	9306      	str	r3, [sp, #24]
 8012a72:	9307      	str	r3, [sp, #28]
 8012a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a76:	9309      	str	r3, [sp, #36]	; 0x24
 8012a78:	2322      	movs	r3, #34	; 0x22
 8012a7a:	2600      	movs	r6, #0
 8012a7c:	9a05      	ldr	r2, [sp, #20]
 8012a7e:	4f3e      	ldr	r7, [pc, #248]	; (8012b78 <_strtod_l+0x5dc>)
 8012a80:	6013      	str	r3, [r2, #0]
 8012a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a84:	42b3      	cmp	r3, r6
 8012a86:	d100      	bne.n	8012a8a <_strtod_l+0x4ee>
 8012a88:	e5cf      	b.n	801262a <_strtod_l+0x8e>
 8012a8a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012a8c:	9805      	ldr	r0, [sp, #20]
 8012a8e:	f003 fa9b 	bl	8015fc8 <_Bfree>
 8012a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a94:	9805      	ldr	r0, [sp, #20]
 8012a96:	f003 fa97 	bl	8015fc8 <_Bfree>
 8012a9a:	9907      	ldr	r1, [sp, #28]
 8012a9c:	9805      	ldr	r0, [sp, #20]
 8012a9e:	f003 fa93 	bl	8015fc8 <_Bfree>
 8012aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012aa4:	9805      	ldr	r0, [sp, #20]
 8012aa6:	f003 fa8f 	bl	8015fc8 <_Bfree>
 8012aaa:	9906      	ldr	r1, [sp, #24]
 8012aac:	9805      	ldr	r0, [sp, #20]
 8012aae:	f003 fa8b 	bl	8015fc8 <_Bfree>
 8012ab2:	e5ba      	b.n	801262a <_strtod_l+0x8e>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	0030      	movs	r0, r6
 8012ab8:	0039      	movs	r1, r7
 8012aba:	001d      	movs	r5, r3
 8012abc:	1124      	asrs	r4, r4, #4
 8012abe:	2c01      	cmp	r4, #1
 8012ac0:	dc1d      	bgt.n	8012afe <_strtod_l+0x562>
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <_strtod_l+0x52e>
 8012ac6:	0006      	movs	r6, r0
 8012ac8:	000f      	movs	r7, r1
 8012aca:	4b30      	ldr	r3, [pc, #192]	; (8012b8c <_strtod_l+0x5f0>)
 8012acc:	00ed      	lsls	r5, r5, #3
 8012ace:	18ff      	adds	r7, r7, r3
 8012ad0:	4b2f      	ldr	r3, [pc, #188]	; (8012b90 <_strtod_l+0x5f4>)
 8012ad2:	0032      	movs	r2, r6
 8012ad4:	195d      	adds	r5, r3, r5
 8012ad6:	6828      	ldr	r0, [r5, #0]
 8012ad8:	6869      	ldr	r1, [r5, #4]
 8012ada:	003b      	movs	r3, r7
 8012adc:	f7ee fed8 	bl	8001890 <__aeabi_dmul>
 8012ae0:	4b25      	ldr	r3, [pc, #148]	; (8012b78 <_strtod_l+0x5dc>)
 8012ae2:	4a2c      	ldr	r2, [pc, #176]	; (8012b94 <_strtod_l+0x5f8>)
 8012ae4:	0006      	movs	r6, r0
 8012ae6:	400b      	ands	r3, r1
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d8c0      	bhi.n	8012a6e <_strtod_l+0x4d2>
 8012aec:	4a2a      	ldr	r2, [pc, #168]	; (8012b98 <_strtod_l+0x5fc>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d913      	bls.n	8012b1a <_strtod_l+0x57e>
 8012af2:	2601      	movs	r6, #1
 8012af4:	4f29      	ldr	r7, [pc, #164]	; (8012b9c <_strtod_l+0x600>)
 8012af6:	4276      	negs	r6, r6
 8012af8:	2300      	movs	r3, #0
 8012afa:	9308      	str	r3, [sp, #32]
 8012afc:	e087      	b.n	8012c0e <_strtod_l+0x672>
 8012afe:	2201      	movs	r2, #1
 8012b00:	4214      	tst	r4, r2
 8012b02:	d007      	beq.n	8012b14 <_strtod_l+0x578>
 8012b04:	4a22      	ldr	r2, [pc, #136]	; (8012b90 <_strtod_l+0x5f4>)
 8012b06:	00eb      	lsls	r3, r5, #3
 8012b08:	189b      	adds	r3, r3, r2
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	f7ee febf 	bl	8001890 <__aeabi_dmul>
 8012b12:	2301      	movs	r3, #1
 8012b14:	3501      	adds	r5, #1
 8012b16:	1064      	asrs	r4, r4, #1
 8012b18:	e7d1      	b.n	8012abe <_strtod_l+0x522>
 8012b1a:	23d4      	movs	r3, #212	; 0xd4
 8012b1c:	049b      	lsls	r3, r3, #18
 8012b1e:	18cf      	adds	r7, r1, r3
 8012b20:	e7ea      	b.n	8012af8 <_strtod_l+0x55c>
 8012b22:	2c00      	cmp	r4, #0
 8012b24:	d0e8      	beq.n	8012af8 <_strtod_l+0x55c>
 8012b26:	4264      	negs	r4, r4
 8012b28:	220f      	movs	r2, #15
 8012b2a:	0023      	movs	r3, r4
 8012b2c:	4013      	ands	r3, r2
 8012b2e:	4214      	tst	r4, r2
 8012b30:	d00a      	beq.n	8012b48 <_strtod_l+0x5ac>
 8012b32:	00da      	lsls	r2, r3, #3
 8012b34:	4b14      	ldr	r3, [pc, #80]	; (8012b88 <_strtod_l+0x5ec>)
 8012b36:	0030      	movs	r0, r6
 8012b38:	189b      	adds	r3, r3, r2
 8012b3a:	0039      	movs	r1, r7
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	f7ee faa0 	bl	8001084 <__aeabi_ddiv>
 8012b44:	0006      	movs	r6, r0
 8012b46:	000f      	movs	r7, r1
 8012b48:	1124      	asrs	r4, r4, #4
 8012b4a:	d0d5      	beq.n	8012af8 <_strtod_l+0x55c>
 8012b4c:	2c1f      	cmp	r4, #31
 8012b4e:	dd27      	ble.n	8012ba0 <_strtod_l+0x604>
 8012b50:	2300      	movs	r3, #0
 8012b52:	9306      	str	r3, [sp, #24]
 8012b54:	9307      	str	r3, [sp, #28]
 8012b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b58:	9309      	str	r3, [sp, #36]	; 0x24
 8012b5a:	2322      	movs	r3, #34	; 0x22
 8012b5c:	9a05      	ldr	r2, [sp, #20]
 8012b5e:	2600      	movs	r6, #0
 8012b60:	6013      	str	r3, [r2, #0]
 8012b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b64:	2700      	movs	r7, #0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d18f      	bne.n	8012a8a <_strtod_l+0x4ee>
 8012b6a:	e55e      	b.n	801262a <_strtod_l+0x8e>
 8012b6c:	00004e1f 	.word	0x00004e1f
 8012b70:	0801aebd 	.word	0x0801aebd
 8012b74:	0801ae74 	.word	0x0801ae74
 8012b78:	7ff00000 	.word	0x7ff00000
 8012b7c:	0801aeb5 	.word	0x0801aeb5
 8012b80:	0801af0b 	.word	0x0801af0b
 8012b84:	0801b197 	.word	0x0801b197
 8012b88:	0801b088 	.word	0x0801b088
 8012b8c:	fcb00000 	.word	0xfcb00000
 8012b90:	0801b060 	.word	0x0801b060
 8012b94:	7ca00000 	.word	0x7ca00000
 8012b98:	7c900000 	.word	0x7c900000
 8012b9c:	7fefffff 	.word	0x7fefffff
 8012ba0:	2310      	movs	r3, #16
 8012ba2:	0022      	movs	r2, r4
 8012ba4:	401a      	ands	r2, r3
 8012ba6:	9208      	str	r2, [sp, #32]
 8012ba8:	421c      	tst	r4, r3
 8012baa:	d001      	beq.n	8012bb0 <_strtod_l+0x614>
 8012bac:	335a      	adds	r3, #90	; 0x5a
 8012bae:	9308      	str	r3, [sp, #32]
 8012bb0:	0030      	movs	r0, r6
 8012bb2:	0039      	movs	r1, r7
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	4dca      	ldr	r5, [pc, #808]	; (8012ee0 <_strtod_l+0x944>)
 8012bb8:	2201      	movs	r2, #1
 8012bba:	4214      	tst	r4, r2
 8012bbc:	d004      	beq.n	8012bc8 <_strtod_l+0x62c>
 8012bbe:	682a      	ldr	r2, [r5, #0]
 8012bc0:	686b      	ldr	r3, [r5, #4]
 8012bc2:	f7ee fe65 	bl	8001890 <__aeabi_dmul>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	1064      	asrs	r4, r4, #1
 8012bca:	3508      	adds	r5, #8
 8012bcc:	2c00      	cmp	r4, #0
 8012bce:	d1f3      	bne.n	8012bb8 <_strtod_l+0x61c>
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d001      	beq.n	8012bd8 <_strtod_l+0x63c>
 8012bd4:	0006      	movs	r6, r0
 8012bd6:	000f      	movs	r7, r1
 8012bd8:	9b08      	ldr	r3, [sp, #32]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d00f      	beq.n	8012bfe <_strtod_l+0x662>
 8012bde:	236b      	movs	r3, #107	; 0x6b
 8012be0:	0079      	lsls	r1, r7, #1
 8012be2:	0d49      	lsrs	r1, r1, #21
 8012be4:	003a      	movs	r2, r7
 8012be6:	1a5b      	subs	r3, r3, r1
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dd08      	ble.n	8012bfe <_strtod_l+0x662>
 8012bec:	2b1f      	cmp	r3, #31
 8012bee:	dc00      	bgt.n	8012bf2 <_strtod_l+0x656>
 8012bf0:	e126      	b.n	8012e40 <_strtod_l+0x8a4>
 8012bf2:	2600      	movs	r6, #0
 8012bf4:	2b34      	cmp	r3, #52	; 0x34
 8012bf6:	dc00      	bgt.n	8012bfa <_strtod_l+0x65e>
 8012bf8:	e11b      	b.n	8012e32 <_strtod_l+0x896>
 8012bfa:	27dc      	movs	r7, #220	; 0xdc
 8012bfc:	04bf      	lsls	r7, r7, #18
 8012bfe:	2200      	movs	r2, #0
 8012c00:	2300      	movs	r3, #0
 8012c02:	0030      	movs	r0, r6
 8012c04:	0039      	movs	r1, r7
 8012c06:	f7ed fc29 	bl	800045c <__aeabi_dcmpeq>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d1a0      	bne.n	8012b50 <_strtod_l+0x5b4>
 8012c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c16:	9b06      	ldr	r3, [sp, #24]
 8012c18:	9805      	ldr	r0, [sp, #20]
 8012c1a:	f003 fa23 	bl	8016064 <__s2b>
 8012c1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8012c20:	2800      	cmp	r0, #0
 8012c22:	d100      	bne.n	8012c26 <_strtod_l+0x68a>
 8012c24:	e723      	b.n	8012a6e <_strtod_l+0x4d2>
 8012c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c28:	9907      	ldr	r1, [sp, #28]
 8012c2a:	17da      	asrs	r2, r3, #31
 8012c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c2e:	1a5b      	subs	r3, r3, r1
 8012c30:	401a      	ands	r2, r3
 8012c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c34:	9215      	str	r2, [sp, #84]	; 0x54
 8012c36:	43db      	mvns	r3, r3
 8012c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c3a:	17db      	asrs	r3, r3, #31
 8012c3c:	401a      	ands	r2, r3
 8012c3e:	2300      	movs	r3, #0
 8012c40:	921c      	str	r2, [sp, #112]	; 0x70
 8012c42:	9306      	str	r3, [sp, #24]
 8012c44:	9307      	str	r3, [sp, #28]
 8012c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c48:	9805      	ldr	r0, [sp, #20]
 8012c4a:	6859      	ldr	r1, [r3, #4]
 8012c4c:	f003 f994 	bl	8015f78 <_Balloc>
 8012c50:	9009      	str	r0, [sp, #36]	; 0x24
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d100      	bne.n	8012c58 <_strtod_l+0x6bc>
 8012c56:	e70f      	b.n	8012a78 <_strtod_l+0x4dc>
 8012c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c5c:	691b      	ldr	r3, [r3, #16]
 8012c5e:	310c      	adds	r1, #12
 8012c60:	1c9a      	adds	r2, r3, #2
 8012c62:	0092      	lsls	r2, r2, #2
 8012c64:	300c      	adds	r0, #12
 8012c66:	930c      	str	r3, [sp, #48]	; 0x30
 8012c68:	f7ff fa1a 	bl	80120a0 <memcpy>
 8012c6c:	ab24      	add	r3, sp, #144	; 0x90
 8012c6e:	9301      	str	r3, [sp, #4]
 8012c70:	ab23      	add	r3, sp, #140	; 0x8c
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	0032      	movs	r2, r6
 8012c76:	003b      	movs	r3, r7
 8012c78:	9805      	ldr	r0, [sp, #20]
 8012c7a:	960e      	str	r6, [sp, #56]	; 0x38
 8012c7c:	970f      	str	r7, [sp, #60]	; 0x3c
 8012c7e:	f003 fd25 	bl	80166cc <__d2b>
 8012c82:	9022      	str	r0, [sp, #136]	; 0x88
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d100      	bne.n	8012c8a <_strtod_l+0x6ee>
 8012c88:	e6f6      	b.n	8012a78 <_strtod_l+0x4dc>
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	9805      	ldr	r0, [sp, #20]
 8012c8e:	f003 fa7d 	bl	801618c <__i2b>
 8012c92:	9007      	str	r0, [sp, #28]
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d100      	bne.n	8012c9a <_strtod_l+0x6fe>
 8012c98:	e6ee      	b.n	8012a78 <_strtod_l+0x4dc>
 8012c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	da00      	bge.n	8012ca2 <_strtod_l+0x706>
 8012ca0:	e0d3      	b.n	8012e4a <_strtod_l+0x8ae>
 8012ca2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012ca4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012ca6:	189d      	adds	r5, r3, r2
 8012ca8:	9908      	ldr	r1, [sp, #32]
 8012caa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012cac:	1a5b      	subs	r3, r3, r1
 8012cae:	2136      	movs	r1, #54	; 0x36
 8012cb0:	189b      	adds	r3, r3, r2
 8012cb2:	1a8a      	subs	r2, r1, r2
 8012cb4:	498b      	ldr	r1, [pc, #556]	; (8012ee4 <_strtod_l+0x948>)
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	2001      	movs	r0, #1
 8012cba:	428b      	cmp	r3, r1
 8012cbc:	db00      	blt.n	8012cc0 <_strtod_l+0x724>
 8012cbe:	e0cf      	b.n	8012e60 <_strtod_l+0x8c4>
 8012cc0:	1ac9      	subs	r1, r1, r3
 8012cc2:	1a52      	subs	r2, r2, r1
 8012cc4:	291f      	cmp	r1, #31
 8012cc6:	dd00      	ble.n	8012cca <_strtod_l+0x72e>
 8012cc8:	e0c3      	b.n	8012e52 <_strtod_l+0x8b6>
 8012cca:	4088      	lsls	r0, r1
 8012ccc:	2300      	movs	r3, #0
 8012cce:	9014      	str	r0, [sp, #80]	; 0x50
 8012cd0:	9312      	str	r3, [sp, #72]	; 0x48
 8012cd2:	18ab      	adds	r3, r5, r2
 8012cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8012cd6:	18a4      	adds	r4, r4, r2
 8012cd8:	9b08      	ldr	r3, [sp, #32]
 8012cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cdc:	191c      	adds	r4, r3, r4
 8012cde:	002b      	movs	r3, r5
 8012ce0:	4295      	cmp	r5, r2
 8012ce2:	dd00      	ble.n	8012ce6 <_strtod_l+0x74a>
 8012ce4:	0013      	movs	r3, r2
 8012ce6:	42a3      	cmp	r3, r4
 8012ce8:	dd00      	ble.n	8012cec <_strtod_l+0x750>
 8012cea:	0023      	movs	r3, r4
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	dd04      	ble.n	8012cfa <_strtod_l+0x75e>
 8012cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cf2:	1ae4      	subs	r4, r4, r3
 8012cf4:	1ad2      	subs	r2, r2, r3
 8012cf6:	920c      	str	r2, [sp, #48]	; 0x30
 8012cf8:	1aed      	subs	r5, r5, r3
 8012cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	dd17      	ble.n	8012d30 <_strtod_l+0x794>
 8012d00:	001a      	movs	r2, r3
 8012d02:	9907      	ldr	r1, [sp, #28]
 8012d04:	9805      	ldr	r0, [sp, #20]
 8012d06:	f003 fb07 	bl	8016318 <__pow5mult>
 8012d0a:	9007      	str	r0, [sp, #28]
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d100      	bne.n	8012d12 <_strtod_l+0x776>
 8012d10:	e6b2      	b.n	8012a78 <_strtod_l+0x4dc>
 8012d12:	0001      	movs	r1, r0
 8012d14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012d16:	9805      	ldr	r0, [sp, #20]
 8012d18:	f003 fa4e 	bl	80161b8 <__multiply>
 8012d1c:	9011      	str	r0, [sp, #68]	; 0x44
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	d100      	bne.n	8012d24 <_strtod_l+0x788>
 8012d22:	e6a9      	b.n	8012a78 <_strtod_l+0x4dc>
 8012d24:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012d26:	9805      	ldr	r0, [sp, #20]
 8012d28:	f003 f94e 	bl	8015fc8 <_Bfree>
 8012d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d2e:	9322      	str	r3, [sp, #136]	; 0x88
 8012d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	dd00      	ble.n	8012d38 <_strtod_l+0x79c>
 8012d36:	e096      	b.n	8012e66 <_strtod_l+0x8ca>
 8012d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	dd08      	ble.n	8012d50 <_strtod_l+0x7b4>
 8012d3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d42:	9805      	ldr	r0, [sp, #20]
 8012d44:	f003 fae8 	bl	8016318 <__pow5mult>
 8012d48:	9009      	str	r0, [sp, #36]	; 0x24
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	d100      	bne.n	8012d50 <_strtod_l+0x7b4>
 8012d4e:	e693      	b.n	8012a78 <_strtod_l+0x4dc>
 8012d50:	2c00      	cmp	r4, #0
 8012d52:	dd08      	ble.n	8012d66 <_strtod_l+0x7ca>
 8012d54:	0022      	movs	r2, r4
 8012d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d58:	9805      	ldr	r0, [sp, #20]
 8012d5a:	f003 fb1f 	bl	801639c <__lshift>
 8012d5e:	9009      	str	r0, [sp, #36]	; 0x24
 8012d60:	2800      	cmp	r0, #0
 8012d62:	d100      	bne.n	8012d66 <_strtod_l+0x7ca>
 8012d64:	e688      	b.n	8012a78 <_strtod_l+0x4dc>
 8012d66:	2d00      	cmp	r5, #0
 8012d68:	dd08      	ble.n	8012d7c <_strtod_l+0x7e0>
 8012d6a:	002a      	movs	r2, r5
 8012d6c:	9907      	ldr	r1, [sp, #28]
 8012d6e:	9805      	ldr	r0, [sp, #20]
 8012d70:	f003 fb14 	bl	801639c <__lshift>
 8012d74:	9007      	str	r0, [sp, #28]
 8012d76:	2800      	cmp	r0, #0
 8012d78:	d100      	bne.n	8012d7c <_strtod_l+0x7e0>
 8012d7a:	e67d      	b.n	8012a78 <_strtod_l+0x4dc>
 8012d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012d80:	9805      	ldr	r0, [sp, #20]
 8012d82:	f003 fb97 	bl	80164b4 <__mdiff>
 8012d86:	9006      	str	r0, [sp, #24]
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d100      	bne.n	8012d8e <_strtod_l+0x7f2>
 8012d8c:	e674      	b.n	8012a78 <_strtod_l+0x4dc>
 8012d8e:	2200      	movs	r2, #0
 8012d90:	68c3      	ldr	r3, [r0, #12]
 8012d92:	9907      	ldr	r1, [sp, #28]
 8012d94:	60c2      	str	r2, [r0, #12]
 8012d96:	9311      	str	r3, [sp, #68]	; 0x44
 8012d98:	f003 fb70 	bl	801647c <__mcmp>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	da6c      	bge.n	8012e7a <_strtod_l+0x8de>
 8012da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012da2:	4333      	orrs	r3, r6
 8012da4:	d000      	beq.n	8012da8 <_strtod_l+0x80c>
 8012da6:	e097      	b.n	8012ed8 <_strtod_l+0x93c>
 8012da8:	033b      	lsls	r3, r7, #12
 8012daa:	d000      	beq.n	8012dae <_strtod_l+0x812>
 8012dac:	e094      	b.n	8012ed8 <_strtod_l+0x93c>
 8012dae:	22d6      	movs	r2, #214	; 0xd6
 8012db0:	4b4d      	ldr	r3, [pc, #308]	; (8012ee8 <_strtod_l+0x94c>)
 8012db2:	04d2      	lsls	r2, r2, #19
 8012db4:	403b      	ands	r3, r7
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d800      	bhi.n	8012dbc <_strtod_l+0x820>
 8012dba:	e08d      	b.n	8012ed8 <_strtod_l+0x93c>
 8012dbc:	9b06      	ldr	r3, [sp, #24]
 8012dbe:	695b      	ldr	r3, [r3, #20]
 8012dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d105      	bne.n	8012dd2 <_strtod_l+0x836>
 8012dc6:	9b06      	ldr	r3, [sp, #24]
 8012dc8:	691b      	ldr	r3, [r3, #16]
 8012dca:	930a      	str	r3, [sp, #40]	; 0x28
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	dc00      	bgt.n	8012dd2 <_strtod_l+0x836>
 8012dd0:	e082      	b.n	8012ed8 <_strtod_l+0x93c>
 8012dd2:	9906      	ldr	r1, [sp, #24]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	9805      	ldr	r0, [sp, #20]
 8012dd8:	f003 fae0 	bl	801639c <__lshift>
 8012ddc:	9907      	ldr	r1, [sp, #28]
 8012dde:	9006      	str	r0, [sp, #24]
 8012de0:	f003 fb4c 	bl	801647c <__mcmp>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	dd77      	ble.n	8012ed8 <_strtod_l+0x93c>
 8012de8:	9908      	ldr	r1, [sp, #32]
 8012dea:	003b      	movs	r3, r7
 8012dec:	4a3e      	ldr	r2, [pc, #248]	; (8012ee8 <_strtod_l+0x94c>)
 8012dee:	2900      	cmp	r1, #0
 8012df0:	d100      	bne.n	8012df4 <_strtod_l+0x858>
 8012df2:	e09e      	b.n	8012f32 <_strtod_l+0x996>
 8012df4:	0011      	movs	r1, r2
 8012df6:	20d6      	movs	r0, #214	; 0xd6
 8012df8:	4039      	ands	r1, r7
 8012dfa:	04c0      	lsls	r0, r0, #19
 8012dfc:	4281      	cmp	r1, r0
 8012dfe:	dd00      	ble.n	8012e02 <_strtod_l+0x866>
 8012e00:	e097      	b.n	8012f32 <_strtod_l+0x996>
 8012e02:	23dc      	movs	r3, #220	; 0xdc
 8012e04:	049b      	lsls	r3, r3, #18
 8012e06:	4299      	cmp	r1, r3
 8012e08:	dc00      	bgt.n	8012e0c <_strtod_l+0x870>
 8012e0a:	e6a6      	b.n	8012b5a <_strtod_l+0x5be>
 8012e0c:	4b37      	ldr	r3, [pc, #220]	; (8012eec <_strtod_l+0x950>)
 8012e0e:	0030      	movs	r0, r6
 8012e10:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e12:	2300      	movs	r3, #0
 8012e14:	931a      	str	r3, [sp, #104]	; 0x68
 8012e16:	0039      	movs	r1, r7
 8012e18:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012e1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e1c:	f7ee fd38 	bl	8001890 <__aeabi_dmul>
 8012e20:	0006      	movs	r6, r0
 8012e22:	000f      	movs	r7, r1
 8012e24:	4308      	orrs	r0, r1
 8012e26:	d000      	beq.n	8012e2a <_strtod_l+0x88e>
 8012e28:	e62f      	b.n	8012a8a <_strtod_l+0x4ee>
 8012e2a:	2322      	movs	r3, #34	; 0x22
 8012e2c:	9a05      	ldr	r2, [sp, #20]
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	e62b      	b.n	8012a8a <_strtod_l+0x4ee>
 8012e32:	2101      	movs	r1, #1
 8012e34:	3b20      	subs	r3, #32
 8012e36:	4249      	negs	r1, r1
 8012e38:	4099      	lsls	r1, r3
 8012e3a:	400a      	ands	r2, r1
 8012e3c:	0017      	movs	r7, r2
 8012e3e:	e6de      	b.n	8012bfe <_strtod_l+0x662>
 8012e40:	2201      	movs	r2, #1
 8012e42:	4252      	negs	r2, r2
 8012e44:	409a      	lsls	r2, r3
 8012e46:	4016      	ands	r6, r2
 8012e48:	e6d9      	b.n	8012bfe <_strtod_l+0x662>
 8012e4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012e4c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012e4e:	1ad4      	subs	r4, r2, r3
 8012e50:	e72a      	b.n	8012ca8 <_strtod_l+0x70c>
 8012e52:	4927      	ldr	r1, [pc, #156]	; (8012ef0 <_strtod_l+0x954>)
 8012e54:	1acb      	subs	r3, r1, r3
 8012e56:	0001      	movs	r1, r0
 8012e58:	4099      	lsls	r1, r3
 8012e5a:	9112      	str	r1, [sp, #72]	; 0x48
 8012e5c:	9014      	str	r0, [sp, #80]	; 0x50
 8012e5e:	e738      	b.n	8012cd2 <_strtod_l+0x736>
 8012e60:	2300      	movs	r3, #0
 8012e62:	9312      	str	r3, [sp, #72]	; 0x48
 8012e64:	e7fa      	b.n	8012e5c <_strtod_l+0x8c0>
 8012e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e68:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012e6a:	9805      	ldr	r0, [sp, #20]
 8012e6c:	f003 fa96 	bl	801639c <__lshift>
 8012e70:	9022      	str	r0, [sp, #136]	; 0x88
 8012e72:	2800      	cmp	r0, #0
 8012e74:	d000      	beq.n	8012e78 <_strtod_l+0x8dc>
 8012e76:	e75f      	b.n	8012d38 <_strtod_l+0x79c>
 8012e78:	e5fe      	b.n	8012a78 <_strtod_l+0x4dc>
 8012e7a:	970c      	str	r7, [sp, #48]	; 0x30
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d176      	bne.n	8012f6e <_strtod_l+0x9d2>
 8012e80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012e82:	033b      	lsls	r3, r7, #12
 8012e84:	0b1b      	lsrs	r3, r3, #12
 8012e86:	2a00      	cmp	r2, #0
 8012e88:	d038      	beq.n	8012efc <_strtod_l+0x960>
 8012e8a:	4a1a      	ldr	r2, [pc, #104]	; (8012ef4 <_strtod_l+0x958>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d138      	bne.n	8012f02 <_strtod_l+0x966>
 8012e90:	2201      	movs	r2, #1
 8012e92:	9b08      	ldr	r3, [sp, #32]
 8012e94:	4252      	negs	r2, r2
 8012e96:	0031      	movs	r1, r6
 8012e98:	0010      	movs	r0, r2
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00b      	beq.n	8012eb6 <_strtod_l+0x91a>
 8012e9e:	24d4      	movs	r4, #212	; 0xd4
 8012ea0:	4b11      	ldr	r3, [pc, #68]	; (8012ee8 <_strtod_l+0x94c>)
 8012ea2:	0010      	movs	r0, r2
 8012ea4:	403b      	ands	r3, r7
 8012ea6:	04e4      	lsls	r4, r4, #19
 8012ea8:	42a3      	cmp	r3, r4
 8012eaa:	d804      	bhi.n	8012eb6 <_strtod_l+0x91a>
 8012eac:	306c      	adds	r0, #108	; 0x6c
 8012eae:	0d1b      	lsrs	r3, r3, #20
 8012eb0:	1ac3      	subs	r3, r0, r3
 8012eb2:	409a      	lsls	r2, r3
 8012eb4:	0010      	movs	r0, r2
 8012eb6:	4281      	cmp	r1, r0
 8012eb8:	d123      	bne.n	8012f02 <_strtod_l+0x966>
 8012eba:	4b0f      	ldr	r3, [pc, #60]	; (8012ef8 <_strtod_l+0x95c>)
 8012ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d102      	bne.n	8012ec8 <_strtod_l+0x92c>
 8012ec2:	1c4b      	adds	r3, r1, #1
 8012ec4:	d100      	bne.n	8012ec8 <_strtod_l+0x92c>
 8012ec6:	e5d7      	b.n	8012a78 <_strtod_l+0x4dc>
 8012ec8:	4b07      	ldr	r3, [pc, #28]	; (8012ee8 <_strtod_l+0x94c>)
 8012eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ecc:	2600      	movs	r6, #0
 8012ece:	401a      	ands	r2, r3
 8012ed0:	0013      	movs	r3, r2
 8012ed2:	2280      	movs	r2, #128	; 0x80
 8012ed4:	0352      	lsls	r2, r2, #13
 8012ed6:	189f      	adds	r7, r3, r2
 8012ed8:	9b08      	ldr	r3, [sp, #32]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d196      	bne.n	8012e0c <_strtod_l+0x870>
 8012ede:	e5d4      	b.n	8012a8a <_strtod_l+0x4ee>
 8012ee0:	0801ae88 	.word	0x0801ae88
 8012ee4:	fffffc02 	.word	0xfffffc02
 8012ee8:	7ff00000 	.word	0x7ff00000
 8012eec:	39500000 	.word	0x39500000
 8012ef0:	fffffbe2 	.word	0xfffffbe2
 8012ef4:	000fffff 	.word	0x000fffff
 8012ef8:	7fefffff 	.word	0x7fefffff
 8012efc:	4333      	orrs	r3, r6
 8012efe:	d100      	bne.n	8012f02 <_strtod_l+0x966>
 8012f00:	e772      	b.n	8012de8 <_strtod_l+0x84c>
 8012f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d01d      	beq.n	8012f44 <_strtod_l+0x9a8>
 8012f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012f0c:	4213      	tst	r3, r2
 8012f0e:	d0e3      	beq.n	8012ed8 <_strtod_l+0x93c>
 8012f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f12:	0030      	movs	r0, r6
 8012f14:	0039      	movs	r1, r7
 8012f16:	9a08      	ldr	r2, [sp, #32]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d017      	beq.n	8012f4c <_strtod_l+0x9b0>
 8012f1c:	f7ff fb26 	bl	801256c <sulp>
 8012f20:	0002      	movs	r2, r0
 8012f22:	000b      	movs	r3, r1
 8012f24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012f26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f28:	f7ed fd42 	bl	80009b0 <__aeabi_dadd>
 8012f2c:	0006      	movs	r6, r0
 8012f2e:	000f      	movs	r7, r1
 8012f30:	e7d2      	b.n	8012ed8 <_strtod_l+0x93c>
 8012f32:	2601      	movs	r6, #1
 8012f34:	4013      	ands	r3, r2
 8012f36:	4a9b      	ldr	r2, [pc, #620]	; (80131a4 <_strtod_l+0xc08>)
 8012f38:	4276      	negs	r6, r6
 8012f3a:	189b      	adds	r3, r3, r2
 8012f3c:	4a9a      	ldr	r2, [pc, #616]	; (80131a8 <_strtod_l+0xc0c>)
 8012f3e:	431a      	orrs	r2, r3
 8012f40:	0017      	movs	r7, r2
 8012f42:	e7c9      	b.n	8012ed8 <_strtod_l+0x93c>
 8012f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f46:	4233      	tst	r3, r6
 8012f48:	d0c6      	beq.n	8012ed8 <_strtod_l+0x93c>
 8012f4a:	e7e1      	b.n	8012f10 <_strtod_l+0x974>
 8012f4c:	f7ff fb0e 	bl	801256c <sulp>
 8012f50:	0002      	movs	r2, r0
 8012f52:	000b      	movs	r3, r1
 8012f54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012f56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f58:	f7ee ff06 	bl	8001d68 <__aeabi_dsub>
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2300      	movs	r3, #0
 8012f60:	0006      	movs	r6, r0
 8012f62:	000f      	movs	r7, r1
 8012f64:	f7ed fa7a 	bl	800045c <__aeabi_dcmpeq>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d0b5      	beq.n	8012ed8 <_strtod_l+0x93c>
 8012f6c:	e5f5      	b.n	8012b5a <_strtod_l+0x5be>
 8012f6e:	9907      	ldr	r1, [sp, #28]
 8012f70:	9806      	ldr	r0, [sp, #24]
 8012f72:	f003 fc0f 	bl	8016794 <__ratio>
 8012f76:	2380      	movs	r3, #128	; 0x80
 8012f78:	2200      	movs	r2, #0
 8012f7a:	05db      	lsls	r3, r3, #23
 8012f7c:	0004      	movs	r4, r0
 8012f7e:	000d      	movs	r5, r1
 8012f80:	f7ed fa7c 	bl	800047c <__aeabi_dcmple>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	d079      	beq.n	801307c <_strtod_l+0xae0>
 8012f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d04b      	beq.n	8013026 <_strtod_l+0xa8a>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	4c86      	ldr	r4, [pc, #536]	; (80131ac <_strtod_l+0xc10>)
 8012f92:	2500      	movs	r5, #0
 8012f94:	9312      	str	r3, [sp, #72]	; 0x48
 8012f96:	9413      	str	r4, [sp, #76]	; 0x4c
 8012f98:	4c84      	ldr	r4, [pc, #528]	; (80131ac <_strtod_l+0xc10>)
 8012f9a:	4a85      	ldr	r2, [pc, #532]	; (80131b0 <_strtod_l+0xc14>)
 8012f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f9e:	4013      	ands	r3, r2
 8012fa0:	9314      	str	r3, [sp, #80]	; 0x50
 8012fa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fa4:	4b83      	ldr	r3, [pc, #524]	; (80131b4 <_strtod_l+0xc18>)
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d000      	beq.n	8012fac <_strtod_l+0xa10>
 8012faa:	e0b0      	b.n	801310e <_strtod_l+0xb72>
 8012fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fb0:	921a      	str	r2, [sp, #104]	; 0x68
 8012fb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8012fb4:	4a80      	ldr	r2, [pc, #512]	; (80131b8 <_strtod_l+0xc1c>)
 8012fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fb8:	4694      	mov	ip, r2
 8012fba:	4463      	add	r3, ip
 8012fbc:	001f      	movs	r7, r3
 8012fbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012fc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012fc2:	0030      	movs	r0, r6
 8012fc4:	0039      	movs	r1, r7
 8012fc6:	920c      	str	r2, [sp, #48]	; 0x30
 8012fc8:	930d      	str	r3, [sp, #52]	; 0x34
 8012fca:	f003 fb0b 	bl	80165e4 <__ulp>
 8012fce:	0002      	movs	r2, r0
 8012fd0:	000b      	movs	r3, r1
 8012fd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012fd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012fd6:	f7ee fc5b 	bl	8001890 <__aeabi_dmul>
 8012fda:	0032      	movs	r2, r6
 8012fdc:	003b      	movs	r3, r7
 8012fde:	f7ed fce7 	bl	80009b0 <__aeabi_dadd>
 8012fe2:	4a73      	ldr	r2, [pc, #460]	; (80131b0 <_strtod_l+0xc14>)
 8012fe4:	4b75      	ldr	r3, [pc, #468]	; (80131bc <_strtod_l+0xc20>)
 8012fe6:	0006      	movs	r6, r0
 8012fe8:	400a      	ands	r2, r1
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d95e      	bls.n	80130ac <_strtod_l+0xb10>
 8012fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ff0:	4a73      	ldr	r2, [pc, #460]	; (80131c0 <_strtod_l+0xc24>)
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	d103      	bne.n	8012ffe <_strtod_l+0xa62>
 8012ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	d100      	bne.n	8012ffe <_strtod_l+0xa62>
 8012ffc:	e53c      	b.n	8012a78 <_strtod_l+0x4dc>
 8012ffe:	2601      	movs	r6, #1
 8013000:	4f6f      	ldr	r7, [pc, #444]	; (80131c0 <_strtod_l+0xc24>)
 8013002:	4276      	negs	r6, r6
 8013004:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013006:	9805      	ldr	r0, [sp, #20]
 8013008:	f002 ffde 	bl	8015fc8 <_Bfree>
 801300c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801300e:	9805      	ldr	r0, [sp, #20]
 8013010:	f002 ffda 	bl	8015fc8 <_Bfree>
 8013014:	9907      	ldr	r1, [sp, #28]
 8013016:	9805      	ldr	r0, [sp, #20]
 8013018:	f002 ffd6 	bl	8015fc8 <_Bfree>
 801301c:	9906      	ldr	r1, [sp, #24]
 801301e:	9805      	ldr	r0, [sp, #20]
 8013020:	f002 ffd2 	bl	8015fc8 <_Bfree>
 8013024:	e60f      	b.n	8012c46 <_strtod_l+0x6aa>
 8013026:	2e00      	cmp	r6, #0
 8013028:	d11c      	bne.n	8013064 <_strtod_l+0xac8>
 801302a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801302c:	031b      	lsls	r3, r3, #12
 801302e:	d11f      	bne.n	8013070 <_strtod_l+0xad4>
 8013030:	2200      	movs	r2, #0
 8013032:	0020      	movs	r0, r4
 8013034:	0029      	movs	r1, r5
 8013036:	4b5d      	ldr	r3, [pc, #372]	; (80131ac <_strtod_l+0xc10>)
 8013038:	f7ed fa16 	bl	8000468 <__aeabi_dcmplt>
 801303c:	2800      	cmp	r0, #0
 801303e:	d11a      	bne.n	8013076 <_strtod_l+0xada>
 8013040:	0020      	movs	r0, r4
 8013042:	0029      	movs	r1, r5
 8013044:	2200      	movs	r2, #0
 8013046:	4b5f      	ldr	r3, [pc, #380]	; (80131c4 <_strtod_l+0xc28>)
 8013048:	f7ee fc22 	bl	8001890 <__aeabi_dmul>
 801304c:	0005      	movs	r5, r0
 801304e:	000c      	movs	r4, r1
 8013050:	2380      	movs	r3, #128	; 0x80
 8013052:	061b      	lsls	r3, r3, #24
 8013054:	18e3      	adds	r3, r4, r3
 8013056:	951e      	str	r5, [sp, #120]	; 0x78
 8013058:	931f      	str	r3, [sp, #124]	; 0x7c
 801305a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801305c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801305e:	9212      	str	r2, [sp, #72]	; 0x48
 8013060:	9313      	str	r3, [sp, #76]	; 0x4c
 8013062:	e79a      	b.n	8012f9a <_strtod_l+0x9fe>
 8013064:	2e01      	cmp	r6, #1
 8013066:	d103      	bne.n	8013070 <_strtod_l+0xad4>
 8013068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801306a:	2b00      	cmp	r3, #0
 801306c:	d100      	bne.n	8013070 <_strtod_l+0xad4>
 801306e:	e574      	b.n	8012b5a <_strtod_l+0x5be>
 8013070:	2300      	movs	r3, #0
 8013072:	4c55      	ldr	r4, [pc, #340]	; (80131c8 <_strtod_l+0xc2c>)
 8013074:	e78d      	b.n	8012f92 <_strtod_l+0x9f6>
 8013076:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8013078:	4c52      	ldr	r4, [pc, #328]	; (80131c4 <_strtod_l+0xc28>)
 801307a:	e7e9      	b.n	8013050 <_strtod_l+0xab4>
 801307c:	2200      	movs	r2, #0
 801307e:	0020      	movs	r0, r4
 8013080:	0029      	movs	r1, r5
 8013082:	4b50      	ldr	r3, [pc, #320]	; (80131c4 <_strtod_l+0xc28>)
 8013084:	f7ee fc04 	bl	8001890 <__aeabi_dmul>
 8013088:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801308a:	0005      	movs	r5, r0
 801308c:	000b      	movs	r3, r1
 801308e:	000c      	movs	r4, r1
 8013090:	2a00      	cmp	r2, #0
 8013092:	d107      	bne.n	80130a4 <_strtod_l+0xb08>
 8013094:	2280      	movs	r2, #128	; 0x80
 8013096:	0612      	lsls	r2, r2, #24
 8013098:	188b      	adds	r3, r1, r2
 801309a:	9016      	str	r0, [sp, #88]	; 0x58
 801309c:	9317      	str	r3, [sp, #92]	; 0x5c
 801309e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80130a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130a2:	e7dc      	b.n	801305e <_strtod_l+0xac2>
 80130a4:	0002      	movs	r2, r0
 80130a6:	9216      	str	r2, [sp, #88]	; 0x58
 80130a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80130aa:	e7f8      	b.n	801309e <_strtod_l+0xb02>
 80130ac:	23d4      	movs	r3, #212	; 0xd4
 80130ae:	049b      	lsls	r3, r3, #18
 80130b0:	18cf      	adds	r7, r1, r3
 80130b2:	9b08      	ldr	r3, [sp, #32]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d1a5      	bne.n	8013004 <_strtod_l+0xa68>
 80130b8:	4b3d      	ldr	r3, [pc, #244]	; (80131b0 <_strtod_l+0xc14>)
 80130ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80130bc:	403b      	ands	r3, r7
 80130be:	429a      	cmp	r2, r3
 80130c0:	d1a0      	bne.n	8013004 <_strtod_l+0xa68>
 80130c2:	0028      	movs	r0, r5
 80130c4:	0021      	movs	r1, r4
 80130c6:	f7ed fa97 	bl	80005f8 <__aeabi_d2lz>
 80130ca:	f7ed fad1 	bl	8000670 <__aeabi_l2d>
 80130ce:	0002      	movs	r2, r0
 80130d0:	000b      	movs	r3, r1
 80130d2:	0028      	movs	r0, r5
 80130d4:	0021      	movs	r1, r4
 80130d6:	f7ee fe47 	bl	8001d68 <__aeabi_dsub>
 80130da:	033b      	lsls	r3, r7, #12
 80130dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130de:	0b1b      	lsrs	r3, r3, #12
 80130e0:	4333      	orrs	r3, r6
 80130e2:	4313      	orrs	r3, r2
 80130e4:	0004      	movs	r4, r0
 80130e6:	000d      	movs	r5, r1
 80130e8:	4a38      	ldr	r2, [pc, #224]	; (80131cc <_strtod_l+0xc30>)
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d055      	beq.n	801319a <_strtod_l+0xbfe>
 80130ee:	4b38      	ldr	r3, [pc, #224]	; (80131d0 <_strtod_l+0xc34>)
 80130f0:	f7ed f9ba 	bl	8000468 <__aeabi_dcmplt>
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d000      	beq.n	80130fa <_strtod_l+0xb5e>
 80130f8:	e4c7      	b.n	8012a8a <_strtod_l+0x4ee>
 80130fa:	0020      	movs	r0, r4
 80130fc:	0029      	movs	r1, r5
 80130fe:	4a35      	ldr	r2, [pc, #212]	; (80131d4 <_strtod_l+0xc38>)
 8013100:	4b30      	ldr	r3, [pc, #192]	; (80131c4 <_strtod_l+0xc28>)
 8013102:	f7ed f9c5 	bl	8000490 <__aeabi_dcmpgt>
 8013106:	2800      	cmp	r0, #0
 8013108:	d100      	bne.n	801310c <_strtod_l+0xb70>
 801310a:	e77b      	b.n	8013004 <_strtod_l+0xa68>
 801310c:	e4bd      	b.n	8012a8a <_strtod_l+0x4ee>
 801310e:	9b08      	ldr	r3, [sp, #32]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d02b      	beq.n	801316c <_strtod_l+0xbd0>
 8013114:	23d4      	movs	r3, #212	; 0xd4
 8013116:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013118:	04db      	lsls	r3, r3, #19
 801311a:	429a      	cmp	r2, r3
 801311c:	d826      	bhi.n	801316c <_strtod_l+0xbd0>
 801311e:	0028      	movs	r0, r5
 8013120:	0021      	movs	r1, r4
 8013122:	4a2d      	ldr	r2, [pc, #180]	; (80131d8 <_strtod_l+0xc3c>)
 8013124:	4b2d      	ldr	r3, [pc, #180]	; (80131dc <_strtod_l+0xc40>)
 8013126:	f7ed f9a9 	bl	800047c <__aeabi_dcmple>
 801312a:	2800      	cmp	r0, #0
 801312c:	d017      	beq.n	801315e <_strtod_l+0xbc2>
 801312e:	0028      	movs	r0, r5
 8013130:	0021      	movs	r1, r4
 8013132:	f7ed fa43 	bl	80005bc <__aeabi_d2uiz>
 8013136:	2800      	cmp	r0, #0
 8013138:	d100      	bne.n	801313c <_strtod_l+0xba0>
 801313a:	3001      	adds	r0, #1
 801313c:	f7ef fa2a 	bl	8002594 <__aeabi_ui2d>
 8013140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013142:	0005      	movs	r5, r0
 8013144:	000b      	movs	r3, r1
 8013146:	000c      	movs	r4, r1
 8013148:	2a00      	cmp	r2, #0
 801314a:	d122      	bne.n	8013192 <_strtod_l+0xbf6>
 801314c:	2280      	movs	r2, #128	; 0x80
 801314e:	0612      	lsls	r2, r2, #24
 8013150:	188b      	adds	r3, r1, r2
 8013152:	9018      	str	r0, [sp, #96]	; 0x60
 8013154:	9319      	str	r3, [sp, #100]	; 0x64
 8013156:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013158:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801315a:	9212      	str	r2, [sp, #72]	; 0x48
 801315c:	9313      	str	r3, [sp, #76]	; 0x4c
 801315e:	22d6      	movs	r2, #214	; 0xd6
 8013160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013162:	04d2      	lsls	r2, r2, #19
 8013164:	189b      	adds	r3, r3, r2
 8013166:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	9313      	str	r3, [sp, #76]	; 0x4c
 801316c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801316e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013170:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013172:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8013174:	f003 fa36 	bl	80165e4 <__ulp>
 8013178:	0002      	movs	r2, r0
 801317a:	000b      	movs	r3, r1
 801317c:	0030      	movs	r0, r6
 801317e:	0039      	movs	r1, r7
 8013180:	f7ee fb86 	bl	8001890 <__aeabi_dmul>
 8013184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013188:	f7ed fc12 	bl	80009b0 <__aeabi_dadd>
 801318c:	0006      	movs	r6, r0
 801318e:	000f      	movs	r7, r1
 8013190:	e78f      	b.n	80130b2 <_strtod_l+0xb16>
 8013192:	0002      	movs	r2, r0
 8013194:	9218      	str	r2, [sp, #96]	; 0x60
 8013196:	9319      	str	r3, [sp, #100]	; 0x64
 8013198:	e7dd      	b.n	8013156 <_strtod_l+0xbba>
 801319a:	4b11      	ldr	r3, [pc, #68]	; (80131e0 <_strtod_l+0xc44>)
 801319c:	f7ed f964 	bl	8000468 <__aeabi_dcmplt>
 80131a0:	e7b1      	b.n	8013106 <_strtod_l+0xb6a>
 80131a2:	46c0      	nop			; (mov r8, r8)
 80131a4:	fff00000 	.word	0xfff00000
 80131a8:	000fffff 	.word	0x000fffff
 80131ac:	3ff00000 	.word	0x3ff00000
 80131b0:	7ff00000 	.word	0x7ff00000
 80131b4:	7fe00000 	.word	0x7fe00000
 80131b8:	fcb00000 	.word	0xfcb00000
 80131bc:	7c9fffff 	.word	0x7c9fffff
 80131c0:	7fefffff 	.word	0x7fefffff
 80131c4:	3fe00000 	.word	0x3fe00000
 80131c8:	bff00000 	.word	0xbff00000
 80131cc:	94a03595 	.word	0x94a03595
 80131d0:	3fdfffff 	.word	0x3fdfffff
 80131d4:	35afe535 	.word	0x35afe535
 80131d8:	ffc00000 	.word	0xffc00000
 80131dc:	41dfffff 	.word	0x41dfffff
 80131e0:	3fcfffff 	.word	0x3fcfffff

080131e4 <strtod>:
 80131e4:	b510      	push	{r4, lr}
 80131e6:	000a      	movs	r2, r1
 80131e8:	0001      	movs	r1, r0
 80131ea:	4803      	ldr	r0, [pc, #12]	; (80131f8 <strtod+0x14>)
 80131ec:	4b03      	ldr	r3, [pc, #12]	; (80131fc <strtod+0x18>)
 80131ee:	6800      	ldr	r0, [r0, #0]
 80131f0:	f7ff f9d4 	bl	801259c <_strtod_l>
 80131f4:	bd10      	pop	{r4, pc}
 80131f6:	46c0      	nop			; (mov r8, r8)
 80131f8:	200000a8 	.word	0x200000a8
 80131fc:	200008f0 	.word	0x200008f0

08013200 <strtok>:
 8013200:	4b03      	ldr	r3, [pc, #12]	; (8013210 <strtok+0x10>)
 8013202:	b510      	push	{r4, lr}
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	2301      	movs	r3, #1
 8013208:	325c      	adds	r2, #92	; 0x5c
 801320a:	f000 f803 	bl	8013214 <__strtok_r>
 801320e:	bd10      	pop	{r4, pc}
 8013210:	200000a8 	.word	0x200000a8

08013214 <__strtok_r>:
 8013214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013216:	2800      	cmp	r0, #0
 8013218:	d102      	bne.n	8013220 <__strtok_r+0xc>
 801321a:	6810      	ldr	r0, [r2, #0]
 801321c:	2800      	cmp	r0, #0
 801321e:	d013      	beq.n	8013248 <__strtok_r+0x34>
 8013220:	0004      	movs	r4, r0
 8013222:	0020      	movs	r0, r4
 8013224:	000e      	movs	r6, r1
 8013226:	7805      	ldrb	r5, [r0, #0]
 8013228:	3401      	adds	r4, #1
 801322a:	7837      	ldrb	r7, [r6, #0]
 801322c:	2f00      	cmp	r7, #0
 801322e:	d104      	bne.n	801323a <__strtok_r+0x26>
 8013230:	2d00      	cmp	r5, #0
 8013232:	d10f      	bne.n	8013254 <__strtok_r+0x40>
 8013234:	0028      	movs	r0, r5
 8013236:	6015      	str	r5, [r2, #0]
 8013238:	e006      	b.n	8013248 <__strtok_r+0x34>
 801323a:	3601      	adds	r6, #1
 801323c:	42bd      	cmp	r5, r7
 801323e:	d1f4      	bne.n	801322a <__strtok_r+0x16>
 8013240:	2b00      	cmp	r3, #0
 8013242:	d1ee      	bne.n	8013222 <__strtok_r+0xe>
 8013244:	6014      	str	r4, [r2, #0]
 8013246:	7003      	strb	r3, [r0, #0]
 8013248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801324a:	002f      	movs	r7, r5
 801324c:	e00f      	b.n	801326e <__strtok_r+0x5a>
 801324e:	3301      	adds	r3, #1
 8013250:	2e00      	cmp	r6, #0
 8013252:	d104      	bne.n	801325e <__strtok_r+0x4a>
 8013254:	0023      	movs	r3, r4
 8013256:	3401      	adds	r4, #1
 8013258:	781d      	ldrb	r5, [r3, #0]
 801325a:	0027      	movs	r7, r4
 801325c:	000b      	movs	r3, r1
 801325e:	781e      	ldrb	r6, [r3, #0]
 8013260:	42b5      	cmp	r5, r6
 8013262:	d1f4      	bne.n	801324e <__strtok_r+0x3a>
 8013264:	2d00      	cmp	r5, #0
 8013266:	d0f0      	beq.n	801324a <__strtok_r+0x36>
 8013268:	2300      	movs	r3, #0
 801326a:	3c01      	subs	r4, #1
 801326c:	7023      	strb	r3, [r4, #0]
 801326e:	6017      	str	r7, [r2, #0]
 8013270:	e7ea      	b.n	8013248 <__strtok_r+0x34>
	...

08013274 <_strtol_l.isra.0>:
 8013274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013276:	b087      	sub	sp, #28
 8013278:	001e      	movs	r6, r3
 801327a:	9005      	str	r0, [sp, #20]
 801327c:	9101      	str	r1, [sp, #4]
 801327e:	9202      	str	r2, [sp, #8]
 8013280:	2b01      	cmp	r3, #1
 8013282:	d045      	beq.n	8013310 <_strtol_l.isra.0+0x9c>
 8013284:	0008      	movs	r0, r1
 8013286:	2b24      	cmp	r3, #36	; 0x24
 8013288:	d842      	bhi.n	8013310 <_strtol_l.isra.0+0x9c>
 801328a:	4b3f      	ldr	r3, [pc, #252]	; (8013388 <_strtol_l.isra.0+0x114>)
 801328c:	2208      	movs	r2, #8
 801328e:	469c      	mov	ip, r3
 8013290:	0003      	movs	r3, r0
 8013292:	4661      	mov	r1, ip
 8013294:	781c      	ldrb	r4, [r3, #0]
 8013296:	1c45      	adds	r5, r0, #1
 8013298:	5d09      	ldrb	r1, [r1, r4]
 801329a:	0028      	movs	r0, r5
 801329c:	000f      	movs	r7, r1
 801329e:	4017      	ands	r7, r2
 80132a0:	4211      	tst	r1, r2
 80132a2:	d1f5      	bne.n	8013290 <_strtol_l.isra.0+0x1c>
 80132a4:	2c2d      	cmp	r4, #45	; 0x2d
 80132a6:	d13a      	bne.n	801331e <_strtol_l.isra.0+0xaa>
 80132a8:	2701      	movs	r7, #1
 80132aa:	782c      	ldrb	r4, [r5, #0]
 80132ac:	1c9d      	adds	r5, r3, #2
 80132ae:	2e00      	cmp	r6, #0
 80132b0:	d065      	beq.n	801337e <_strtol_l.isra.0+0x10a>
 80132b2:	2e10      	cmp	r6, #16
 80132b4:	d109      	bne.n	80132ca <_strtol_l.isra.0+0x56>
 80132b6:	2c30      	cmp	r4, #48	; 0x30
 80132b8:	d107      	bne.n	80132ca <_strtol_l.isra.0+0x56>
 80132ba:	2220      	movs	r2, #32
 80132bc:	782b      	ldrb	r3, [r5, #0]
 80132be:	4393      	bics	r3, r2
 80132c0:	2b58      	cmp	r3, #88	; 0x58
 80132c2:	d157      	bne.n	8013374 <_strtol_l.isra.0+0x100>
 80132c4:	2610      	movs	r6, #16
 80132c6:	786c      	ldrb	r4, [r5, #1]
 80132c8:	3502      	adds	r5, #2
 80132ca:	4b30      	ldr	r3, [pc, #192]	; (801338c <_strtol_l.isra.0+0x118>)
 80132cc:	0031      	movs	r1, r6
 80132ce:	18fb      	adds	r3, r7, r3
 80132d0:	0018      	movs	r0, r3
 80132d2:	9303      	str	r3, [sp, #12]
 80132d4:	f7ec ffc2 	bl	800025c <__aeabi_uidivmod>
 80132d8:	2300      	movs	r3, #0
 80132da:	2201      	movs	r2, #1
 80132dc:	4684      	mov	ip, r0
 80132de:	0018      	movs	r0, r3
 80132e0:	9104      	str	r1, [sp, #16]
 80132e2:	4252      	negs	r2, r2
 80132e4:	0021      	movs	r1, r4
 80132e6:	3930      	subs	r1, #48	; 0x30
 80132e8:	2909      	cmp	r1, #9
 80132ea:	d81d      	bhi.n	8013328 <_strtol_l.isra.0+0xb4>
 80132ec:	000c      	movs	r4, r1
 80132ee:	42a6      	cmp	r6, r4
 80132f0:	dd28      	ble.n	8013344 <_strtol_l.isra.0+0xd0>
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	db24      	blt.n	8013340 <_strtol_l.isra.0+0xcc>
 80132f6:	0013      	movs	r3, r2
 80132f8:	4584      	cmp	ip, r0
 80132fa:	d306      	bcc.n	801330a <_strtol_l.isra.0+0x96>
 80132fc:	d102      	bne.n	8013304 <_strtol_l.isra.0+0x90>
 80132fe:	9904      	ldr	r1, [sp, #16]
 8013300:	42a1      	cmp	r1, r4
 8013302:	db02      	blt.n	801330a <_strtol_l.isra.0+0x96>
 8013304:	2301      	movs	r3, #1
 8013306:	4370      	muls	r0, r6
 8013308:	1820      	adds	r0, r4, r0
 801330a:	782c      	ldrb	r4, [r5, #0]
 801330c:	3501      	adds	r5, #1
 801330e:	e7e9      	b.n	80132e4 <_strtol_l.isra.0+0x70>
 8013310:	f002 f960 	bl	80155d4 <__errno>
 8013314:	2316      	movs	r3, #22
 8013316:	6003      	str	r3, [r0, #0]
 8013318:	2000      	movs	r0, #0
 801331a:	b007      	add	sp, #28
 801331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801331e:	2c2b      	cmp	r4, #43	; 0x2b
 8013320:	d1c5      	bne.n	80132ae <_strtol_l.isra.0+0x3a>
 8013322:	782c      	ldrb	r4, [r5, #0]
 8013324:	1c9d      	adds	r5, r3, #2
 8013326:	e7c2      	b.n	80132ae <_strtol_l.isra.0+0x3a>
 8013328:	0021      	movs	r1, r4
 801332a:	3941      	subs	r1, #65	; 0x41
 801332c:	2919      	cmp	r1, #25
 801332e:	d801      	bhi.n	8013334 <_strtol_l.isra.0+0xc0>
 8013330:	3c37      	subs	r4, #55	; 0x37
 8013332:	e7dc      	b.n	80132ee <_strtol_l.isra.0+0x7a>
 8013334:	0021      	movs	r1, r4
 8013336:	3961      	subs	r1, #97	; 0x61
 8013338:	2919      	cmp	r1, #25
 801333a:	d803      	bhi.n	8013344 <_strtol_l.isra.0+0xd0>
 801333c:	3c57      	subs	r4, #87	; 0x57
 801333e:	e7d6      	b.n	80132ee <_strtol_l.isra.0+0x7a>
 8013340:	0013      	movs	r3, r2
 8013342:	e7e2      	b.n	801330a <_strtol_l.isra.0+0x96>
 8013344:	2b00      	cmp	r3, #0
 8013346:	da09      	bge.n	801335c <_strtol_l.isra.0+0xe8>
 8013348:	2322      	movs	r3, #34	; 0x22
 801334a:	9a05      	ldr	r2, [sp, #20]
 801334c:	9803      	ldr	r0, [sp, #12]
 801334e:	6013      	str	r3, [r2, #0]
 8013350:	9b02      	ldr	r3, [sp, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d0e1      	beq.n	801331a <_strtol_l.isra.0+0xa6>
 8013356:	1e6b      	subs	r3, r5, #1
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	e007      	b.n	801336c <_strtol_l.isra.0+0xf8>
 801335c:	2f00      	cmp	r7, #0
 801335e:	d000      	beq.n	8013362 <_strtol_l.isra.0+0xee>
 8013360:	4240      	negs	r0, r0
 8013362:	9a02      	ldr	r2, [sp, #8]
 8013364:	2a00      	cmp	r2, #0
 8013366:	d0d8      	beq.n	801331a <_strtol_l.isra.0+0xa6>
 8013368:	2b00      	cmp	r3, #0
 801336a:	d1f4      	bne.n	8013356 <_strtol_l.isra.0+0xe2>
 801336c:	9b02      	ldr	r3, [sp, #8]
 801336e:	9a01      	ldr	r2, [sp, #4]
 8013370:	601a      	str	r2, [r3, #0]
 8013372:	e7d2      	b.n	801331a <_strtol_l.isra.0+0xa6>
 8013374:	2430      	movs	r4, #48	; 0x30
 8013376:	2e00      	cmp	r6, #0
 8013378:	d1a7      	bne.n	80132ca <_strtol_l.isra.0+0x56>
 801337a:	3608      	adds	r6, #8
 801337c:	e7a5      	b.n	80132ca <_strtol_l.isra.0+0x56>
 801337e:	2c30      	cmp	r4, #48	; 0x30
 8013380:	d09b      	beq.n	80132ba <_strtol_l.isra.0+0x46>
 8013382:	260a      	movs	r6, #10
 8013384:	e7a1      	b.n	80132ca <_strtol_l.isra.0+0x56>
 8013386:	46c0      	nop			; (mov r8, r8)
 8013388:	0801ad59 	.word	0x0801ad59
 801338c:	7fffffff 	.word	0x7fffffff

08013390 <strtol>:
 8013390:	b510      	push	{r4, lr}
 8013392:	0013      	movs	r3, r2
 8013394:	000a      	movs	r2, r1
 8013396:	0001      	movs	r1, r0
 8013398:	4802      	ldr	r0, [pc, #8]	; (80133a4 <strtol+0x14>)
 801339a:	6800      	ldr	r0, [r0, #0]
 801339c:	f7ff ff6a 	bl	8013274 <_strtol_l.isra.0>
 80133a0:	bd10      	pop	{r4, pc}
 80133a2:	46c0      	nop			; (mov r8, r8)
 80133a4:	200000a8 	.word	0x200000a8

080133a8 <_svfprintf_r>:
 80133a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133aa:	b0d9      	sub	sp, #356	; 0x164
 80133ac:	001c      	movs	r4, r3
 80133ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80133b0:	9208      	str	r2, [sp, #32]
 80133b2:	900a      	str	r0, [sp, #40]	; 0x28
 80133b4:	f002 fda8 	bl	8015f08 <_localeconv_r>
 80133b8:	6803      	ldr	r3, [r0, #0]
 80133ba:	0018      	movs	r0, r3
 80133bc:	931c      	str	r3, [sp, #112]	; 0x70
 80133be:	f7ec feab 	bl	8000118 <strlen>
 80133c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133c4:	9016      	str	r0, [sp, #88]	; 0x58
 80133c6:	899b      	ldrh	r3, [r3, #12]
 80133c8:	061b      	lsls	r3, r3, #24
 80133ca:	d518      	bpl.n	80133fe <_svfprintf_r+0x56>
 80133cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	9309      	str	r3, [sp, #36]	; 0x24
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d113      	bne.n	80133fe <_svfprintf_r+0x56>
 80133d6:	2140      	movs	r1, #64	; 0x40
 80133d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80133da:	f7fe fc3f 	bl	8011c5c <_malloc_r>
 80133de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133e0:	6018      	str	r0, [r3, #0]
 80133e2:	6118      	str	r0, [r3, #16]
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d107      	bne.n	80133f8 <_svfprintf_r+0x50>
 80133e8:	230c      	movs	r3, #12
 80133ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133ec:	6013      	str	r3, [r2, #0]
 80133ee:	3b0d      	subs	r3, #13
 80133f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80133f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80133f4:	b059      	add	sp, #356	; 0x164
 80133f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133f8:	2340      	movs	r3, #64	; 0x40
 80133fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133fc:	6153      	str	r3, [r2, #20]
 80133fe:	2300      	movs	r3, #0
 8013400:	2200      	movs	r2, #0
 8013402:	932e      	str	r3, [sp, #184]	; 0xb8
 8013404:	932d      	str	r3, [sp, #180]	; 0xb4
 8013406:	930d      	str	r3, [sp, #52]	; 0x34
 8013408:	2300      	movs	r3, #0
 801340a:	9214      	str	r2, [sp, #80]	; 0x50
 801340c:	9315      	str	r3, [sp, #84]	; 0x54
 801340e:	2300      	movs	r3, #0
 8013410:	af2f      	add	r7, sp, #188	; 0xbc
 8013412:	972c      	str	r7, [sp, #176]	; 0xb0
 8013414:	931f      	str	r3, [sp, #124]	; 0x7c
 8013416:	931e      	str	r3, [sp, #120]	; 0x78
 8013418:	9312      	str	r3, [sp, #72]	; 0x48
 801341a:	931b      	str	r3, [sp, #108]	; 0x6c
 801341c:	931d      	str	r3, [sp, #116]	; 0x74
 801341e:	9317      	str	r3, [sp, #92]	; 0x5c
 8013420:	9d08      	ldr	r5, [sp, #32]
 8013422:	782b      	ldrb	r3, [r5, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <_svfprintf_r+0x86>
 8013428:	2b25      	cmp	r3, #37	; 0x25
 801342a:	d000      	beq.n	801342e <_svfprintf_r+0x86>
 801342c:	e092      	b.n	8013554 <_svfprintf_r+0x1ac>
 801342e:	9b08      	ldr	r3, [sp, #32]
 8013430:	1aee      	subs	r6, r5, r3
 8013432:	429d      	cmp	r5, r3
 8013434:	d017      	beq.n	8013466 <_svfprintf_r+0xbe>
 8013436:	603b      	str	r3, [r7, #0]
 8013438:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801343a:	607e      	str	r6, [r7, #4]
 801343c:	199b      	adds	r3, r3, r6
 801343e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013440:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013442:	3708      	adds	r7, #8
 8013444:	9309      	str	r3, [sp, #36]	; 0x24
 8013446:	3301      	adds	r3, #1
 8013448:	932d      	str	r3, [sp, #180]	; 0xb4
 801344a:	2b07      	cmp	r3, #7
 801344c:	dd08      	ble.n	8013460 <_svfprintf_r+0xb8>
 801344e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013450:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013452:	aa2c      	add	r2, sp, #176	; 0xb0
 8013454:	f003 fa42 	bl	80168dc <__ssprint_r>
 8013458:	2800      	cmp	r0, #0
 801345a:	d000      	beq.n	801345e <_svfprintf_r+0xb6>
 801345c:	e2aa      	b.n	80139b4 <_svfprintf_r+0x60c>
 801345e:	af2f      	add	r7, sp, #188	; 0xbc
 8013460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013462:	199b      	adds	r3, r3, r6
 8013464:	9317      	str	r3, [sp, #92]	; 0x5c
 8013466:	782b      	ldrb	r3, [r5, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d101      	bne.n	8013470 <_svfprintf_r+0xc8>
 801346c:	f001 f9d2 	bl	8014814 <_svfprintf_r+0x146c>
 8013470:	221b      	movs	r2, #27
 8013472:	2300      	movs	r3, #0
 8013474:	a91e      	add	r1, sp, #120	; 0x78
 8013476:	1852      	adds	r2, r2, r1
 8013478:	7013      	strb	r3, [r2, #0]
 801347a:	2201      	movs	r2, #1
 801347c:	001e      	movs	r6, r3
 801347e:	4252      	negs	r2, r2
 8013480:	3501      	adds	r5, #1
 8013482:	9209      	str	r2, [sp, #36]	; 0x24
 8013484:	9318      	str	r3, [sp, #96]	; 0x60
 8013486:	1c6b      	adds	r3, r5, #1
 8013488:	9313      	str	r3, [sp, #76]	; 0x4c
 801348a:	782b      	ldrb	r3, [r5, #0]
 801348c:	930f      	str	r3, [sp, #60]	; 0x3c
 801348e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013490:	3820      	subs	r0, #32
 8013492:	285a      	cmp	r0, #90	; 0x5a
 8013494:	d901      	bls.n	801349a <_svfprintf_r+0xf2>
 8013496:	f000 fe2e 	bl	80140f6 <_svfprintf_r+0xd4e>
 801349a:	f7ec fe4f 	bl	800013c <__gnu_thumb1_case_uhi>
 801349e:	0078      	.short	0x0078
 80134a0:	062c062c 	.word	0x062c062c
 80134a4:	062c0082 	.word	0x062c0082
 80134a8:	062c062c 	.word	0x062c062c
 80134ac:	062c005d 	.word	0x062c005d
 80134b0:	0084062c 	.word	0x0084062c
 80134b4:	062c008c 	.word	0x062c008c
 80134b8:	0091008a 	.word	0x0091008a
 80134bc:	00b2062c 	.word	0x00b2062c
 80134c0:	00b400b4 	.word	0x00b400b4
 80134c4:	00b400b4 	.word	0x00b400b4
 80134c8:	00b400b4 	.word	0x00b400b4
 80134cc:	00b400b4 	.word	0x00b400b4
 80134d0:	062c00b4 	.word	0x062c00b4
 80134d4:	062c062c 	.word	0x062c062c
 80134d8:	062c062c 	.word	0x062c062c
 80134dc:	062c062c 	.word	0x062c062c
 80134e0:	062c0216 	.word	0x062c0216
 80134e4:	01cf00e0 	.word	0x01cf00e0
 80134e8:	02160216 	.word	0x02160216
 80134ec:	062c0216 	.word	0x062c0216
 80134f0:	062c062c 	.word	0x062c062c
 80134f4:	00c7062c 	.word	0x00c7062c
 80134f8:	062c062c 	.word	0x062c062c
 80134fc:	062c04d6 	.word	0x062c04d6
 8013500:	062c062c 	.word	0x062c062c
 8013504:	062c051d 	.word	0x062c051d
 8013508:	062c053d 	.word	0x062c053d
 801350c:	056e062c 	.word	0x056e062c
 8013510:	062c062c 	.word	0x062c062c
 8013514:	062c062c 	.word	0x062c062c
 8013518:	062c062c 	.word	0x062c062c
 801351c:	062c062c 	.word	0x062c062c
 8013520:	062c0216 	.word	0x062c0216
 8013524:	01d100e0 	.word	0x01d100e0
 8013528:	02160216 	.word	0x02160216
 801352c:	00c90216 	.word	0x00c90216
 8013530:	00dc01d1 	.word	0x00dc01d1
 8013534:	00d5062c 	.word	0x00d5062c
 8013538:	04b9062c 	.word	0x04b9062c
 801353c:	050d04d8 	.word	0x050d04d8
 8013540:	062c00dc 	.word	0x062c00dc
 8013544:	0080051d 	.word	0x0080051d
 8013548:	062c053f 	.word	0x062c053f
 801354c:	058e062c 	.word	0x058e062c
 8013550:	0080062c 	.word	0x0080062c
 8013554:	3501      	adds	r5, #1
 8013556:	e764      	b.n	8013422 <_svfprintf_r+0x7a>
 8013558:	980a      	ldr	r0, [sp, #40]	; 0x28
 801355a:	f002 fcd5 	bl	8015f08 <_localeconv_r>
 801355e:	6843      	ldr	r3, [r0, #4]
 8013560:	0018      	movs	r0, r3
 8013562:	931d      	str	r3, [sp, #116]	; 0x74
 8013564:	f7ec fdd8 	bl	8000118 <strlen>
 8013568:	901b      	str	r0, [sp, #108]	; 0x6c
 801356a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801356c:	f002 fccc 	bl	8015f08 <_localeconv_r>
 8013570:	6883      	ldr	r3, [r0, #8]
 8013572:	9312      	str	r3, [sp, #72]	; 0x48
 8013574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013576:	2b00      	cmp	r3, #0
 8013578:	d011      	beq.n	801359e <_svfprintf_r+0x1f6>
 801357a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801357c:	2b00      	cmp	r3, #0
 801357e:	d00e      	beq.n	801359e <_svfprintf_r+0x1f6>
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00b      	beq.n	801359e <_svfprintf_r+0x1f6>
 8013586:	2380      	movs	r3, #128	; 0x80
 8013588:	00db      	lsls	r3, r3, #3
 801358a:	431e      	orrs	r6, r3
 801358c:	e007      	b.n	801359e <_svfprintf_r+0x1f6>
 801358e:	231b      	movs	r3, #27
 8013590:	aa1e      	add	r2, sp, #120	; 0x78
 8013592:	189b      	adds	r3, r3, r2
 8013594:	781a      	ldrb	r2, [r3, #0]
 8013596:	2a00      	cmp	r2, #0
 8013598:	d101      	bne.n	801359e <_svfprintf_r+0x1f6>
 801359a:	3220      	adds	r2, #32
 801359c:	701a      	strb	r2, [r3, #0]
 801359e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80135a0:	e771      	b.n	8013486 <_svfprintf_r+0xde>
 80135a2:	2301      	movs	r3, #1
 80135a4:	e7f1      	b.n	801358a <_svfprintf_r+0x1e2>
 80135a6:	cc08      	ldmia	r4!, {r3}
 80135a8:	9318      	str	r3, [sp, #96]	; 0x60
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	daf7      	bge.n	801359e <_svfprintf_r+0x1f6>
 80135ae:	425b      	negs	r3, r3
 80135b0:	9318      	str	r3, [sp, #96]	; 0x60
 80135b2:	2304      	movs	r3, #4
 80135b4:	e7e9      	b.n	801358a <_svfprintf_r+0x1e2>
 80135b6:	231b      	movs	r3, #27
 80135b8:	aa1e      	add	r2, sp, #120	; 0x78
 80135ba:	189b      	adds	r3, r3, r2
 80135bc:	222b      	movs	r2, #43	; 0x2b
 80135be:	e7ed      	b.n	801359c <_svfprintf_r+0x1f4>
 80135c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80135c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80135c4:	7812      	ldrb	r2, [r2, #0]
 80135c6:	3301      	adds	r3, #1
 80135c8:	920f      	str	r2, [sp, #60]	; 0x3c
 80135ca:	2a2a      	cmp	r2, #42	; 0x2a
 80135cc:	d010      	beq.n	80135f0 <_svfprintf_r+0x248>
 80135ce:	2200      	movs	r2, #0
 80135d0:	9209      	str	r2, [sp, #36]	; 0x24
 80135d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80135d6:	3a30      	subs	r2, #48	; 0x30
 80135d8:	2a09      	cmp	r2, #9
 80135da:	d900      	bls.n	80135de <_svfprintf_r+0x236>
 80135dc:	e757      	b.n	801348e <_svfprintf_r+0xe6>
 80135de:	210a      	movs	r1, #10
 80135e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135e2:	4348      	muls	r0, r1
 80135e4:	1882      	adds	r2, r0, r2
 80135e6:	9209      	str	r2, [sp, #36]	; 0x24
 80135e8:	781a      	ldrb	r2, [r3, #0]
 80135ea:	3301      	adds	r3, #1
 80135ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80135ee:	e7f0      	b.n	80135d2 <_svfprintf_r+0x22a>
 80135f0:	cc04      	ldmia	r4!, {r2}
 80135f2:	9209      	str	r2, [sp, #36]	; 0x24
 80135f4:	2a00      	cmp	r2, #0
 80135f6:	da02      	bge.n	80135fe <_svfprintf_r+0x256>
 80135f8:	2201      	movs	r2, #1
 80135fa:	4252      	negs	r2, r2
 80135fc:	9209      	str	r2, [sp, #36]	; 0x24
 80135fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8013600:	e7cd      	b.n	801359e <_svfprintf_r+0x1f6>
 8013602:	2380      	movs	r3, #128	; 0x80
 8013604:	e7c1      	b.n	801358a <_svfprintf_r+0x1e2>
 8013606:	2200      	movs	r2, #0
 8013608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801360a:	9218      	str	r2, [sp, #96]	; 0x60
 801360c:	210a      	movs	r1, #10
 801360e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013610:	434a      	muls	r2, r1
 8013612:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013614:	3930      	subs	r1, #48	; 0x30
 8013616:	188a      	adds	r2, r1, r2
 8013618:	9218      	str	r2, [sp, #96]	; 0x60
 801361a:	001a      	movs	r2, r3
 801361c:	7812      	ldrb	r2, [r2, #0]
 801361e:	3301      	adds	r3, #1
 8013620:	920f      	str	r2, [sp, #60]	; 0x3c
 8013622:	3a30      	subs	r2, #48	; 0x30
 8013624:	9313      	str	r3, [sp, #76]	; 0x4c
 8013626:	2a09      	cmp	r2, #9
 8013628:	d9f0      	bls.n	801360c <_svfprintf_r+0x264>
 801362a:	e730      	b.n	801348e <_svfprintf_r+0xe6>
 801362c:	2308      	movs	r3, #8
 801362e:	e7ac      	b.n	801358a <_svfprintf_r+0x1e2>
 8013630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	2b68      	cmp	r3, #104	; 0x68
 8013636:	d105      	bne.n	8013644 <_svfprintf_r+0x29c>
 8013638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801363a:	3301      	adds	r3, #1
 801363c:	9313      	str	r3, [sp, #76]	; 0x4c
 801363e:	2380      	movs	r3, #128	; 0x80
 8013640:	009b      	lsls	r3, r3, #2
 8013642:	e7a2      	b.n	801358a <_svfprintf_r+0x1e2>
 8013644:	2340      	movs	r3, #64	; 0x40
 8013646:	e7a0      	b.n	801358a <_svfprintf_r+0x1e2>
 8013648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	2b6c      	cmp	r3, #108	; 0x6c
 801364e:	d104      	bne.n	801365a <_svfprintf_r+0x2b2>
 8013650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013652:	3301      	adds	r3, #1
 8013654:	9313      	str	r3, [sp, #76]	; 0x4c
 8013656:	2320      	movs	r3, #32
 8013658:	e797      	b.n	801358a <_svfprintf_r+0x1e2>
 801365a:	2310      	movs	r3, #16
 801365c:	e795      	b.n	801358a <_svfprintf_r+0x1e2>
 801365e:	0022      	movs	r2, r4
 8013660:	ca08      	ldmia	r2!, {r3}
 8013662:	a83f      	add	r0, sp, #252	; 0xfc
 8013664:	920e      	str	r2, [sp, #56]	; 0x38
 8013666:	221b      	movs	r2, #27
 8013668:	7003      	strb	r3, [r0, #0]
 801366a:	2300      	movs	r3, #0
 801366c:	a91e      	add	r1, sp, #120	; 0x78
 801366e:	1852      	adds	r2, r2, r1
 8013670:	7013      	strb	r3, [r2, #0]
 8013672:	930c      	str	r3, [sp, #48]	; 0x30
 8013674:	3301      	adds	r3, #1
 8013676:	9309      	str	r3, [sp, #36]	; 0x24
 8013678:	2300      	movs	r3, #0
 801367a:	001d      	movs	r5, r3
 801367c:	9319      	str	r3, [sp, #100]	; 0x64
 801367e:	9310      	str	r3, [sp, #64]	; 0x40
 8013680:	9311      	str	r3, [sp, #68]	; 0x44
 8013682:	9008      	str	r0, [sp, #32]
 8013684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013688:	931a      	str	r3, [sp, #104]	; 0x68
 801368a:	4293      	cmp	r3, r2
 801368c:	da00      	bge.n	8013690 <_svfprintf_r+0x2e8>
 801368e:	921a      	str	r2, [sp, #104]	; 0x68
 8013690:	231b      	movs	r3, #27
 8013692:	aa1e      	add	r2, sp, #120	; 0x78
 8013694:	189b      	adds	r3, r3, r2
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	1e5a      	subs	r2, r3, #1
 801369a:	4193      	sbcs	r3, r2
 801369c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801369e:	18d3      	adds	r3, r2, r3
 80136a0:	931a      	str	r3, [sp, #104]	; 0x68
 80136a2:	0032      	movs	r2, r6
 80136a4:	2302      	movs	r3, #2
 80136a6:	401a      	ands	r2, r3
 80136a8:	9220      	str	r2, [sp, #128]	; 0x80
 80136aa:	421e      	tst	r6, r3
 80136ac:	d002      	beq.n	80136b4 <_svfprintf_r+0x30c>
 80136ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80136b0:	3302      	adds	r3, #2
 80136b2:	931a      	str	r3, [sp, #104]	; 0x68
 80136b4:	2384      	movs	r3, #132	; 0x84
 80136b6:	0032      	movs	r2, r6
 80136b8:	401a      	ands	r2, r3
 80136ba:	9221      	str	r2, [sp, #132]	; 0x84
 80136bc:	421e      	tst	r6, r3
 80136be:	d121      	bne.n	8013704 <_svfprintf_r+0x35c>
 80136c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80136c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80136c4:	1a9c      	subs	r4, r3, r2
 80136c6:	2c00      	cmp	r4, #0
 80136c8:	dd1c      	ble.n	8013704 <_svfprintf_r+0x35c>
 80136ca:	0039      	movs	r1, r7
 80136cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80136ce:	48c5      	ldr	r0, [pc, #788]	; (80139e4 <_svfprintf_r+0x63c>)
 80136d0:	9322      	str	r3, [sp, #136]	; 0x88
 80136d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80136d4:	3301      	adds	r3, #1
 80136d6:	3108      	adds	r1, #8
 80136d8:	6038      	str	r0, [r7, #0]
 80136da:	2c10      	cmp	r4, #16
 80136dc:	dd01      	ble.n	80136e2 <_svfprintf_r+0x33a>
 80136de:	f000 fd1d 	bl	801411c <_svfprintf_r+0xd74>
 80136e2:	607c      	str	r4, [r7, #4]
 80136e4:	18a4      	adds	r4, r4, r2
 80136e6:	000f      	movs	r7, r1
 80136e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80136ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80136ec:	2b07      	cmp	r3, #7
 80136ee:	dd09      	ble.n	8013704 <_svfprintf_r+0x35c>
 80136f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80136f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80136f6:	f003 f8f1 	bl	80168dc <__ssprint_r>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d001      	beq.n	8013702 <_svfprintf_r+0x35a>
 80136fe:	f001 f868 	bl	80147d2 <_svfprintf_r+0x142a>
 8013702:	af2f      	add	r7, sp, #188	; 0xbc
 8013704:	231b      	movs	r3, #27
 8013706:	aa1e      	add	r2, sp, #120	; 0x78
 8013708:	189b      	adds	r3, r3, r2
 801370a:	781a      	ldrb	r2, [r3, #0]
 801370c:	2a00      	cmp	r2, #0
 801370e:	d017      	beq.n	8013740 <_svfprintf_r+0x398>
 8013710:	603b      	str	r3, [r7, #0]
 8013712:	2301      	movs	r3, #1
 8013714:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013716:	607b      	str	r3, [r7, #4]
 8013718:	0013      	movs	r3, r2
 801371a:	3301      	adds	r3, #1
 801371c:	932e      	str	r3, [sp, #184]	; 0xb8
 801371e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013720:	3708      	adds	r7, #8
 8013722:	9322      	str	r3, [sp, #136]	; 0x88
 8013724:	3301      	adds	r3, #1
 8013726:	932d      	str	r3, [sp, #180]	; 0xb4
 8013728:	2b07      	cmp	r3, #7
 801372a:	dd09      	ble.n	8013740 <_svfprintf_r+0x398>
 801372c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801372e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013730:	aa2c      	add	r2, sp, #176	; 0xb0
 8013732:	f003 f8d3 	bl	80168dc <__ssprint_r>
 8013736:	2800      	cmp	r0, #0
 8013738:	d001      	beq.n	801373e <_svfprintf_r+0x396>
 801373a:	f001 f84a 	bl	80147d2 <_svfprintf_r+0x142a>
 801373e:	af2f      	add	r7, sp, #188	; 0xbc
 8013740:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013742:	2b00      	cmp	r3, #0
 8013744:	d019      	beq.n	801377a <_svfprintf_r+0x3d2>
 8013746:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013748:	9320      	str	r3, [sp, #128]	; 0x80
 801374a:	ab25      	add	r3, sp, #148	; 0x94
 801374c:	603b      	str	r3, [r7, #0]
 801374e:	2302      	movs	r3, #2
 8013750:	607b      	str	r3, [r7, #4]
 8013752:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013754:	3708      	adds	r7, #8
 8013756:	3302      	adds	r3, #2
 8013758:	932e      	str	r3, [sp, #184]	; 0xb8
 801375a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801375c:	9320      	str	r3, [sp, #128]	; 0x80
 801375e:	3301      	adds	r3, #1
 8013760:	932d      	str	r3, [sp, #180]	; 0xb4
 8013762:	2b07      	cmp	r3, #7
 8013764:	dd09      	ble.n	801377a <_svfprintf_r+0x3d2>
 8013766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013768:	980a      	ldr	r0, [sp, #40]	; 0x28
 801376a:	aa2c      	add	r2, sp, #176	; 0xb0
 801376c:	f003 f8b6 	bl	80168dc <__ssprint_r>
 8013770:	2800      	cmp	r0, #0
 8013772:	d001      	beq.n	8013778 <_svfprintf_r+0x3d0>
 8013774:	f001 f82d 	bl	80147d2 <_svfprintf_r+0x142a>
 8013778:	af2f      	add	r7, sp, #188	; 0xbc
 801377a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801377c:	2b80      	cmp	r3, #128	; 0x80
 801377e:	d121      	bne.n	80137c4 <_svfprintf_r+0x41c>
 8013780:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013782:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013784:	1a9c      	subs	r4, r3, r2
 8013786:	2c00      	cmp	r4, #0
 8013788:	dd1c      	ble.n	80137c4 <_svfprintf_r+0x41c>
 801378a:	0039      	movs	r1, r7
 801378c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801378e:	4896      	ldr	r0, [pc, #600]	; (80139e8 <_svfprintf_r+0x640>)
 8013790:	9320      	str	r3, [sp, #128]	; 0x80
 8013792:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013794:	3301      	adds	r3, #1
 8013796:	3108      	adds	r1, #8
 8013798:	6038      	str	r0, [r7, #0]
 801379a:	2c10      	cmp	r4, #16
 801379c:	dd01      	ble.n	80137a2 <_svfprintf_r+0x3fa>
 801379e:	f000 fcd1 	bl	8014144 <_svfprintf_r+0xd9c>
 80137a2:	607c      	str	r4, [r7, #4]
 80137a4:	18a4      	adds	r4, r4, r2
 80137a6:	000f      	movs	r7, r1
 80137a8:	942e      	str	r4, [sp, #184]	; 0xb8
 80137aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80137ac:	2b07      	cmp	r3, #7
 80137ae:	dd09      	ble.n	80137c4 <_svfprintf_r+0x41c>
 80137b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80137b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80137b6:	f003 f891 	bl	80168dc <__ssprint_r>
 80137ba:	2800      	cmp	r0, #0
 80137bc:	d001      	beq.n	80137c2 <_svfprintf_r+0x41a>
 80137be:	f001 f808 	bl	80147d2 <_svfprintf_r+0x142a>
 80137c2:	af2f      	add	r7, sp, #188	; 0xbc
 80137c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80137c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137c8:	1a9c      	subs	r4, r3, r2
 80137ca:	2c00      	cmp	r4, #0
 80137cc:	dd1c      	ble.n	8013808 <_svfprintf_r+0x460>
 80137ce:	0039      	movs	r1, r7
 80137d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80137d2:	4885      	ldr	r0, [pc, #532]	; (80139e8 <_svfprintf_r+0x640>)
 80137d4:	9319      	str	r3, [sp, #100]	; 0x64
 80137d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80137d8:	3301      	adds	r3, #1
 80137da:	3108      	adds	r1, #8
 80137dc:	6038      	str	r0, [r7, #0]
 80137de:	2c10      	cmp	r4, #16
 80137e0:	dd01      	ble.n	80137e6 <_svfprintf_r+0x43e>
 80137e2:	f000 fcc3 	bl	801416c <_svfprintf_r+0xdc4>
 80137e6:	1912      	adds	r2, r2, r4
 80137e8:	607c      	str	r4, [r7, #4]
 80137ea:	922e      	str	r2, [sp, #184]	; 0xb8
 80137ec:	000f      	movs	r7, r1
 80137ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80137f0:	2b07      	cmp	r3, #7
 80137f2:	dd09      	ble.n	8013808 <_svfprintf_r+0x460>
 80137f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80137f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80137fa:	f003 f86f 	bl	80168dc <__ssprint_r>
 80137fe:	2800      	cmp	r0, #0
 8013800:	d001      	beq.n	8013806 <_svfprintf_r+0x45e>
 8013802:	f000 ffe6 	bl	80147d2 <_svfprintf_r+0x142a>
 8013806:	af2f      	add	r7, sp, #188	; 0xbc
 8013808:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801380a:	9319      	str	r3, [sp, #100]	; 0x64
 801380c:	05f3      	lsls	r3, r6, #23
 801380e:	d501      	bpl.n	8013814 <_svfprintf_r+0x46c>
 8013810:	f000 fcc8 	bl	80141a4 <_svfprintf_r+0xdfc>
 8013814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013816:	9b08      	ldr	r3, [sp, #32]
 8013818:	4694      	mov	ip, r2
 801381a:	603b      	str	r3, [r7, #0]
 801381c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801381e:	607b      	str	r3, [r7, #4]
 8013820:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013822:	4463      	add	r3, ip
 8013824:	932e      	str	r3, [sp, #184]	; 0xb8
 8013826:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013828:	9308      	str	r3, [sp, #32]
 801382a:	3301      	adds	r3, #1
 801382c:	932d      	str	r3, [sp, #180]	; 0xb4
 801382e:	2b07      	cmp	r3, #7
 8013830:	dd01      	ble.n	8013836 <_svfprintf_r+0x48e>
 8013832:	f000 fda8 	bl	8014386 <_svfprintf_r+0xfde>
 8013836:	3708      	adds	r7, #8
 8013838:	f000 fcfb 	bl	8014232 <_svfprintf_r+0xe8a>
 801383c:	2310      	movs	r3, #16
 801383e:	431e      	orrs	r6, r3
 8013840:	06b3      	lsls	r3, r6, #26
 8013842:	d530      	bpl.n	80138a6 <_svfprintf_r+0x4fe>
 8013844:	2307      	movs	r3, #7
 8013846:	3407      	adds	r4, #7
 8013848:	439c      	bics	r4, r3
 801384a:	0022      	movs	r2, r4
 801384c:	ca18      	ldmia	r2!, {r3, r4}
 801384e:	9306      	str	r3, [sp, #24]
 8013850:	9407      	str	r4, [sp, #28]
 8013852:	920e      	str	r2, [sp, #56]	; 0x38
 8013854:	9a07      	ldr	r2, [sp, #28]
 8013856:	2301      	movs	r3, #1
 8013858:	2a00      	cmp	r2, #0
 801385a:	da0b      	bge.n	8013874 <_svfprintf_r+0x4cc>
 801385c:	9c06      	ldr	r4, [sp, #24]
 801385e:	9d07      	ldr	r5, [sp, #28]
 8013860:	2200      	movs	r2, #0
 8013862:	4261      	negs	r1, r4
 8013864:	41aa      	sbcs	r2, r5
 8013866:	9106      	str	r1, [sp, #24]
 8013868:	9207      	str	r2, [sp, #28]
 801386a:	221b      	movs	r2, #27
 801386c:	a91e      	add	r1, sp, #120	; 0x78
 801386e:	1852      	adds	r2, r2, r1
 8013870:	212d      	movs	r1, #45	; 0x2d
 8013872:	7011      	strb	r1, [r2, #0]
 8013874:	9907      	ldr	r1, [sp, #28]
 8013876:	9a06      	ldr	r2, [sp, #24]
 8013878:	430a      	orrs	r2, r1
 801387a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801387c:	3101      	adds	r1, #1
 801387e:	d101      	bne.n	8013884 <_svfprintf_r+0x4dc>
 8013880:	f000 ffd5 	bl	801482e <_svfprintf_r+0x1486>
 8013884:	2180      	movs	r1, #128	; 0x80
 8013886:	0035      	movs	r5, r6
 8013888:	438d      	bics	r5, r1
 801388a:	2a00      	cmp	r2, #0
 801388c:	d001      	beq.n	8013892 <_svfprintf_r+0x4ea>
 801388e:	f000 ffd3 	bl	8014838 <_svfprintf_r+0x1490>
 8013892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013894:	2a00      	cmp	r2, #0
 8013896:	d101      	bne.n	801389c <_svfprintf_r+0x4f4>
 8013898:	f000 fc20 	bl	80140dc <_svfprintf_r+0xd34>
 801389c:	2b01      	cmp	r3, #1
 801389e:	d001      	beq.n	80138a4 <_svfprintf_r+0x4fc>
 80138a0:	f000 ffce 	bl	8014840 <_svfprintf_r+0x1498>
 80138a4:	e3b1      	b.n	801400a <_svfprintf_r+0xc62>
 80138a6:	1d23      	adds	r3, r4, #4
 80138a8:	930e      	str	r3, [sp, #56]	; 0x38
 80138aa:	06f3      	lsls	r3, r6, #27
 80138ac:	d504      	bpl.n	80138b8 <_svfprintf_r+0x510>
 80138ae:	6823      	ldr	r3, [r4, #0]
 80138b0:	9306      	str	r3, [sp, #24]
 80138b2:	17db      	asrs	r3, r3, #31
 80138b4:	9307      	str	r3, [sp, #28]
 80138b6:	e7cd      	b.n	8013854 <_svfprintf_r+0x4ac>
 80138b8:	6823      	ldr	r3, [r4, #0]
 80138ba:	0672      	lsls	r2, r6, #25
 80138bc:	d501      	bpl.n	80138c2 <_svfprintf_r+0x51a>
 80138be:	b21b      	sxth	r3, r3
 80138c0:	e7f6      	b.n	80138b0 <_svfprintf_r+0x508>
 80138c2:	05b2      	lsls	r2, r6, #22
 80138c4:	d5f4      	bpl.n	80138b0 <_svfprintf_r+0x508>
 80138c6:	b25b      	sxtb	r3, r3
 80138c8:	e7f2      	b.n	80138b0 <_svfprintf_r+0x508>
 80138ca:	2307      	movs	r3, #7
 80138cc:	3407      	adds	r4, #7
 80138ce:	439c      	bics	r4, r3
 80138d0:	0022      	movs	r2, r4
 80138d2:	ca18      	ldmia	r2!, {r3, r4}
 80138d4:	920e      	str	r2, [sp, #56]	; 0x38
 80138d6:	2201      	movs	r2, #1
 80138d8:	9314      	str	r3, [sp, #80]	; 0x50
 80138da:	9415      	str	r4, [sp, #84]	; 0x54
 80138dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80138e0:	005c      	lsls	r4, r3, #1
 80138e2:	0864      	lsrs	r4, r4, #1
 80138e4:	0028      	movs	r0, r5
 80138e6:	0021      	movs	r1, r4
 80138e8:	4b40      	ldr	r3, [pc, #256]	; (80139ec <_svfprintf_r+0x644>)
 80138ea:	4252      	negs	r2, r2
 80138ec:	f7ee fdce 	bl	800248c <__aeabi_dcmpun>
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d126      	bne.n	8013942 <_svfprintf_r+0x59a>
 80138f4:	2201      	movs	r2, #1
 80138f6:	0028      	movs	r0, r5
 80138f8:	0021      	movs	r1, r4
 80138fa:	4b3c      	ldr	r3, [pc, #240]	; (80139ec <_svfprintf_r+0x644>)
 80138fc:	4252      	negs	r2, r2
 80138fe:	f7ec fdbd 	bl	800047c <__aeabi_dcmple>
 8013902:	2800      	cmp	r0, #0
 8013904:	d11d      	bne.n	8013942 <_svfprintf_r+0x59a>
 8013906:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013908:	9915      	ldr	r1, [sp, #84]	; 0x54
 801390a:	2200      	movs	r2, #0
 801390c:	2300      	movs	r3, #0
 801390e:	f7ec fdab 	bl	8000468 <__aeabi_dcmplt>
 8013912:	2800      	cmp	r0, #0
 8013914:	d004      	beq.n	8013920 <_svfprintf_r+0x578>
 8013916:	231b      	movs	r3, #27
 8013918:	aa1e      	add	r2, sp, #120	; 0x78
 801391a:	189b      	adds	r3, r3, r2
 801391c:	222d      	movs	r2, #45	; 0x2d
 801391e:	701a      	strb	r2, [r3, #0]
 8013920:	4b33      	ldr	r3, [pc, #204]	; (80139f0 <_svfprintf_r+0x648>)
 8013922:	9308      	str	r3, [sp, #32]
 8013924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013926:	2b47      	cmp	r3, #71	; 0x47
 8013928:	dd01      	ble.n	801392e <_svfprintf_r+0x586>
 801392a:	4b32      	ldr	r3, [pc, #200]	; (80139f4 <_svfprintf_r+0x64c>)
 801392c:	9308      	str	r3, [sp, #32]
 801392e:	2380      	movs	r3, #128	; 0x80
 8013930:	439e      	bics	r6, r3
 8013932:	2300      	movs	r3, #0
 8013934:	930c      	str	r3, [sp, #48]	; 0x30
 8013936:	3303      	adds	r3, #3
 8013938:	9309      	str	r3, [sp, #36]	; 0x24
 801393a:	2300      	movs	r3, #0
 801393c:	9319      	str	r3, [sp, #100]	; 0x64
 801393e:	f000 ffae 	bl	801489e <_svfprintf_r+0x14f6>
 8013942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013946:	0010      	movs	r0, r2
 8013948:	0019      	movs	r1, r3
 801394a:	f7ee fd9f 	bl	800248c <__aeabi_dcmpun>
 801394e:	2800      	cmp	r0, #0
 8013950:	d00e      	beq.n	8013970 <_svfprintf_r+0x5c8>
 8013952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013954:	2b00      	cmp	r3, #0
 8013956:	da04      	bge.n	8013962 <_svfprintf_r+0x5ba>
 8013958:	231b      	movs	r3, #27
 801395a:	aa1e      	add	r2, sp, #120	; 0x78
 801395c:	189b      	adds	r3, r3, r2
 801395e:	222d      	movs	r2, #45	; 0x2d
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	4b25      	ldr	r3, [pc, #148]	; (80139f8 <_svfprintf_r+0x650>)
 8013964:	9308      	str	r3, [sp, #32]
 8013966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013968:	2b47      	cmp	r3, #71	; 0x47
 801396a:	dde0      	ble.n	801392e <_svfprintf_r+0x586>
 801396c:	4b23      	ldr	r3, [pc, #140]	; (80139fc <_svfprintf_r+0x654>)
 801396e:	e7dd      	b.n	801392c <_svfprintf_r+0x584>
 8013970:	2320      	movs	r3, #32
 8013972:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013974:	439a      	bics	r2, r3
 8013976:	9210      	str	r2, [sp, #64]	; 0x40
 8013978:	2a41      	cmp	r2, #65	; 0x41
 801397a:	d123      	bne.n	80139c4 <_svfprintf_r+0x61c>
 801397c:	2230      	movs	r2, #48	; 0x30
 801397e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013980:	ab25      	add	r3, sp, #148	; 0x94
 8013982:	701a      	strb	r2, [r3, #0]
 8013984:	3248      	adds	r2, #72	; 0x48
 8013986:	2961      	cmp	r1, #97	; 0x61
 8013988:	d000      	beq.n	801398c <_svfprintf_r+0x5e4>
 801398a:	3a20      	subs	r2, #32
 801398c:	705a      	strb	r2, [r3, #1]
 801398e:	2302      	movs	r3, #2
 8013990:	431e      	orrs	r6, r3
 8013992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013994:	2b63      	cmp	r3, #99	; 0x63
 8013996:	dd33      	ble.n	8013a00 <_svfprintf_r+0x658>
 8013998:	980a      	ldr	r0, [sp, #40]	; 0x28
 801399a:	1c59      	adds	r1, r3, #1
 801399c:	f7fe f95e 	bl	8011c5c <_malloc_r>
 80139a0:	9008      	str	r0, [sp, #32]
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d000      	beq.n	80139a8 <_svfprintf_r+0x600>
 80139a6:	e141      	b.n	8013c2c <_svfprintf_r+0x884>
 80139a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139aa:	899a      	ldrh	r2, [r3, #12]
 80139ac:	2340      	movs	r3, #64	; 0x40
 80139ae:	4313      	orrs	r3, r2
 80139b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139b2:	8193      	strh	r3, [r2, #12]
 80139b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139b6:	899b      	ldrh	r3, [r3, #12]
 80139b8:	065b      	lsls	r3, r3, #25
 80139ba:	d400      	bmi.n	80139be <_svfprintf_r+0x616>
 80139bc:	e519      	b.n	80133f2 <_svfprintf_r+0x4a>
 80139be:	2301      	movs	r3, #1
 80139c0:	425b      	negs	r3, r3
 80139c2:	e515      	b.n	80133f0 <_svfprintf_r+0x48>
 80139c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139c6:	900c      	str	r0, [sp, #48]	; 0x30
 80139c8:	3301      	adds	r3, #1
 80139ca:	d100      	bne.n	80139ce <_svfprintf_r+0x626>
 80139cc:	e131      	b.n	8013c32 <_svfprintf_r+0x88a>
 80139ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80139d0:	2b47      	cmp	r3, #71	; 0x47
 80139d2:	d119      	bne.n	8013a08 <_svfprintf_r+0x660>
 80139d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d116      	bne.n	8013a08 <_svfprintf_r+0x660>
 80139da:	930c      	str	r3, [sp, #48]	; 0x30
 80139dc:	3301      	adds	r3, #1
 80139de:	9309      	str	r3, [sp, #36]	; 0x24
 80139e0:	e012      	b.n	8013a08 <_svfprintf_r+0x660>
 80139e2:	46c0      	nop			; (mov r8, r8)
 80139e4:	0801aee4 	.word	0x0801aee4
 80139e8:	0801aef4 	.word	0x0801aef4
 80139ec:	7fefffff 	.word	0x7fefffff
 80139f0:	0801aeb0 	.word	0x0801aeb0
 80139f4:	0801aeb4 	.word	0x0801aeb4
 80139f8:	0801aeb8 	.word	0x0801aeb8
 80139fc:	0801aebc 	.word	0x0801aebc
 8013a00:	2300      	movs	r3, #0
 8013a02:	930c      	str	r3, [sp, #48]	; 0x30
 8013a04:	ab3f      	add	r3, sp, #252	; 0xfc
 8013a06:	9308      	str	r3, [sp, #32]
 8013a08:	2380      	movs	r3, #128	; 0x80
 8013a0a:	005b      	lsls	r3, r3, #1
 8013a0c:	4333      	orrs	r3, r6
 8013a0e:	9320      	str	r3, [sp, #128]	; 0x80
 8013a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	db00      	blt.n	8013a1a <_svfprintf_r+0x672>
 8013a18:	e10d      	b.n	8013c36 <_svfprintf_r+0x88e>
 8013a1a:	2280      	movs	r2, #128	; 0x80
 8013a1c:	0612      	lsls	r2, r2, #24
 8013a1e:	4694      	mov	ip, r2
 8013a20:	4463      	add	r3, ip
 8013a22:	930d      	str	r3, [sp, #52]	; 0x34
 8013a24:	232d      	movs	r3, #45	; 0x2d
 8013a26:	9322      	str	r3, [sp, #136]	; 0x88
 8013a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a2a:	2b41      	cmp	r3, #65	; 0x41
 8013a2c:	d000      	beq.n	8013a30 <_svfprintf_r+0x688>
 8013a2e:	e11b      	b.n	8013c68 <_svfprintf_r+0x8c0>
 8013a30:	0020      	movs	r0, r4
 8013a32:	aa26      	add	r2, sp, #152	; 0x98
 8013a34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013a36:	f002 ff19 	bl	801686c <frexp>
 8013a3a:	23ff      	movs	r3, #255	; 0xff
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	059b      	lsls	r3, r3, #22
 8013a40:	f7ed ff26 	bl	8001890 <__aeabi_dmul>
 8013a44:	2200      	movs	r2, #0
 8013a46:	2300      	movs	r3, #0
 8013a48:	0004      	movs	r4, r0
 8013a4a:	000d      	movs	r5, r1
 8013a4c:	f7ec fd06 	bl	800045c <__aeabi_dcmpeq>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d001      	beq.n	8013a58 <_svfprintf_r+0x6b0>
 8013a54:	2301      	movs	r3, #1
 8013a56:	9326      	str	r3, [sp, #152]	; 0x98
 8013a58:	4bc6      	ldr	r3, [pc, #792]	; (8013d74 <_svfprintf_r+0x9cc>)
 8013a5a:	9319      	str	r3, [sp, #100]	; 0x64
 8013a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a5e:	2b61      	cmp	r3, #97	; 0x61
 8013a60:	d001      	beq.n	8013a66 <_svfprintf_r+0x6be>
 8013a62:	4bc5      	ldr	r3, [pc, #788]	; (8013d78 <_svfprintf_r+0x9d0>)
 8013a64:	9319      	str	r3, [sp, #100]	; 0x64
 8013a66:	9b08      	ldr	r3, [sp, #32]
 8013a68:	930d      	str	r3, [sp, #52]	; 0x34
 8013a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a6c:	3b01      	subs	r3, #1
 8013a6e:	9311      	str	r3, [sp, #68]	; 0x44
 8013a70:	2200      	movs	r2, #0
 8013a72:	4bc2      	ldr	r3, [pc, #776]	; (8013d7c <_svfprintf_r+0x9d4>)
 8013a74:	0020      	movs	r0, r4
 8013a76:	0029      	movs	r1, r5
 8013a78:	f7ed ff0a 	bl	8001890 <__aeabi_dmul>
 8013a7c:	000d      	movs	r5, r1
 8013a7e:	0004      	movs	r4, r0
 8013a80:	f7ee fd22 	bl	80024c8 <__aeabi_d2iz>
 8013a84:	9021      	str	r0, [sp, #132]	; 0x84
 8013a86:	f7ee fd55 	bl	8002534 <__aeabi_i2d>
 8013a8a:	0002      	movs	r2, r0
 8013a8c:	000b      	movs	r3, r1
 8013a8e:	0020      	movs	r0, r4
 8013a90:	0029      	movs	r1, r5
 8013a92:	f7ee f969 	bl	8001d68 <__aeabi_dsub>
 8013a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a98:	000d      	movs	r5, r1
 8013a9a:	001a      	movs	r2, r3
 8013a9c:	3201      	adds	r2, #1
 8013a9e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013aa0:	920d      	str	r2, [sp, #52]	; 0x34
 8013aa2:	9223      	str	r2, [sp, #140]	; 0x8c
 8013aa4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013aa6:	0004      	movs	r4, r0
 8013aa8:	5c52      	ldrb	r2, [r2, r1]
 8013aaa:	701a      	strb	r2, [r3, #0]
 8013aac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013aae:	931a      	str	r3, [sp, #104]	; 0x68
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	d00a      	beq.n	8013aca <_svfprintf_r+0x722>
 8013ab4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	3b01      	subs	r3, #1
 8013aba:	9311      	str	r3, [sp, #68]	; 0x44
 8013abc:	0020      	movs	r0, r4
 8013abe:	2300      	movs	r3, #0
 8013ac0:	0029      	movs	r1, r5
 8013ac2:	f7ec fccb 	bl	800045c <__aeabi_dcmpeq>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d0d2      	beq.n	8013a70 <_svfprintf_r+0x6c8>
 8013aca:	2200      	movs	r2, #0
 8013acc:	0020      	movs	r0, r4
 8013ace:	0029      	movs	r1, r5
 8013ad0:	4bab      	ldr	r3, [pc, #684]	; (8013d80 <_svfprintf_r+0x9d8>)
 8013ad2:	f7ec fcdd 	bl	8000490 <__aeabi_dcmpgt>
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d10c      	bne.n	8013af4 <_svfprintf_r+0x74c>
 8013ada:	2200      	movs	r2, #0
 8013adc:	0020      	movs	r0, r4
 8013ade:	0029      	movs	r1, r5
 8013ae0:	4ba7      	ldr	r3, [pc, #668]	; (8013d80 <_svfprintf_r+0x9d8>)
 8013ae2:	f7ec fcbb 	bl	800045c <__aeabi_dcmpeq>
 8013ae6:	2800      	cmp	r0, #0
 8013ae8:	d100      	bne.n	8013aec <_svfprintf_r+0x744>
 8013aea:	e0b7      	b.n	8013c5c <_svfprintf_r+0x8b4>
 8013aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013aee:	07db      	lsls	r3, r3, #31
 8013af0:	d400      	bmi.n	8013af4 <_svfprintf_r+0x74c>
 8013af2:	e0b3      	b.n	8013c5c <_svfprintf_r+0x8b4>
 8013af4:	2030      	movs	r0, #48	; 0x30
 8013af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013af8:	932a      	str	r3, [sp, #168]	; 0xa8
 8013afa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013afc:	7bdb      	ldrb	r3, [r3, #15]
 8013afe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8013b00:	3a01      	subs	r2, #1
 8013b02:	922a      	str	r2, [sp, #168]	; 0xa8
 8013b04:	7811      	ldrb	r1, [r2, #0]
 8013b06:	4299      	cmp	r1, r3
 8013b08:	d100      	bne.n	8013b0c <_svfprintf_r+0x764>
 8013b0a:	e097      	b.n	8013c3c <_svfprintf_r+0x894>
 8013b0c:	1c4b      	adds	r3, r1, #1
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	2939      	cmp	r1, #57	; 0x39
 8013b12:	d101      	bne.n	8013b18 <_svfprintf_r+0x770>
 8013b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b16:	7a9b      	ldrb	r3, [r3, #10]
 8013b18:	7013      	strb	r3, [r2, #0]
 8013b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b1c:	9a08      	ldr	r2, [sp, #32]
 8013b1e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8013b20:	1a9b      	subs	r3, r3, r2
 8013b22:	930d      	str	r3, [sp, #52]	; 0x34
 8013b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b26:	2b47      	cmp	r3, #71	; 0x47
 8013b28:	d000      	beq.n	8013b2c <_svfprintf_r+0x784>
 8013b2a:	e0eb      	b.n	8013d04 <_svfprintf_r+0x95c>
 8013b2c:	1ceb      	adds	r3, r5, #3
 8013b2e:	db03      	blt.n	8013b38 <_svfprintf_r+0x790>
 8013b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b32:	42ab      	cmp	r3, r5
 8013b34:	db00      	blt.n	8013b38 <_svfprintf_r+0x790>
 8013b36:	e113      	b.n	8013d60 <_svfprintf_r+0x9b8>
 8013b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b3a:	3b02      	subs	r3, #2
 8013b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b3e:	223c      	movs	r2, #60	; 0x3c
 8013b40:	466b      	mov	r3, sp
 8013b42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b44:	189b      	adds	r3, r3, r2
 8013b46:	1e6c      	subs	r4, r5, #1
 8013b48:	3a1c      	subs	r2, #28
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	9426      	str	r4, [sp, #152]	; 0x98
 8013b50:	4391      	bics	r1, r2
 8013b52:	2941      	cmp	r1, #65	; 0x41
 8013b54:	d102      	bne.n	8013b5c <_svfprintf_r+0x7b4>
 8013b56:	330f      	adds	r3, #15
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	3001      	adds	r0, #1
 8013b5c:	a928      	add	r1, sp, #160	; 0xa0
 8013b5e:	700b      	strb	r3, [r1, #0]
 8013b60:	232b      	movs	r3, #43	; 0x2b
 8013b62:	2c00      	cmp	r4, #0
 8013b64:	da02      	bge.n	8013b6c <_svfprintf_r+0x7c4>
 8013b66:	2401      	movs	r4, #1
 8013b68:	3302      	adds	r3, #2
 8013b6a:	1b64      	subs	r4, r4, r5
 8013b6c:	704b      	strb	r3, [r1, #1]
 8013b6e:	2c09      	cmp	r4, #9
 8013b70:	dc00      	bgt.n	8013b74 <_svfprintf_r+0x7cc>
 8013b72:	e0e1      	b.n	8013d38 <_svfprintf_r+0x990>
 8013b74:	2337      	movs	r3, #55	; 0x37
 8013b76:	250a      	movs	r5, #10
 8013b78:	aa1e      	add	r2, sp, #120	; 0x78
 8013b7a:	189b      	adds	r3, r3, r2
 8013b7c:	9310      	str	r3, [sp, #64]	; 0x40
 8013b7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b80:	0020      	movs	r0, r4
 8013b82:	9309      	str	r3, [sp, #36]	; 0x24
 8013b84:	0029      	movs	r1, r5
 8013b86:	3b01      	subs	r3, #1
 8013b88:	9310      	str	r3, [sp, #64]	; 0x40
 8013b8a:	f7ec fc51 	bl	8000430 <__aeabi_idivmod>
 8013b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b90:	3130      	adds	r1, #48	; 0x30
 8013b92:	7019      	strb	r1, [r3, #0]
 8013b94:	0020      	movs	r0, r4
 8013b96:	0029      	movs	r1, r5
 8013b98:	9411      	str	r4, [sp, #68]	; 0x44
 8013b9a:	f7ec fb63 	bl	8000264 <__divsi3>
 8013b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ba0:	0004      	movs	r4, r0
 8013ba2:	2b63      	cmp	r3, #99	; 0x63
 8013ba4:	dceb      	bgt.n	8013b7e <_svfprintf_r+0x7d6>
 8013ba6:	222a      	movs	r2, #42	; 0x2a
 8013ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013baa:	a81e      	add	r0, sp, #120	; 0x78
 8013bac:	1e99      	subs	r1, r3, #2
 8013bae:	1812      	adds	r2, r2, r0
 8013bb0:	2037      	movs	r0, #55	; 0x37
 8013bb2:	000b      	movs	r3, r1
 8013bb4:	3430      	adds	r4, #48	; 0x30
 8013bb6:	700c      	strb	r4, [r1, #0]
 8013bb8:	ac1e      	add	r4, sp, #120	; 0x78
 8013bba:	1900      	adds	r0, r0, r4
 8013bbc:	4283      	cmp	r3, r0
 8013bbe:	d200      	bcs.n	8013bc2 <_svfprintf_r+0x81a>
 8013bc0:	e0b5      	b.n	8013d2e <_svfprintf_r+0x986>
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	4281      	cmp	r1, r0
 8013bc6:	d804      	bhi.n	8013bd2 <_svfprintf_r+0x82a>
 8013bc8:	aa1e      	add	r2, sp, #120	; 0x78
 8013bca:	3339      	adds	r3, #57	; 0x39
 8013bcc:	189b      	adds	r3, r3, r2
 8013bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bd0:	1a9b      	subs	r3, r3, r2
 8013bd2:	222a      	movs	r2, #42	; 0x2a
 8013bd4:	a91e      	add	r1, sp, #120	; 0x78
 8013bd6:	1852      	adds	r2, r2, r1
 8013bd8:	18d3      	adds	r3, r2, r3
 8013bda:	aa28      	add	r2, sp, #160	; 0xa0
 8013bdc:	1a9b      	subs	r3, r3, r2
 8013bde:	931e      	str	r3, [sp, #120]	; 0x78
 8013be0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013be4:	4694      	mov	ip, r2
 8013be6:	4463      	add	r3, ip
 8013be8:	9309      	str	r3, [sp, #36]	; 0x24
 8013bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	dc01      	bgt.n	8013bf4 <_svfprintf_r+0x84c>
 8013bf0:	07f3      	lsls	r3, r6, #31
 8013bf2:	d504      	bpl.n	8013bfe <_svfprintf_r+0x856>
 8013bf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bf8:	4694      	mov	ip, r2
 8013bfa:	4463      	add	r3, ip
 8013bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013bfe:	2280      	movs	r2, #128	; 0x80
 8013c00:	4b60      	ldr	r3, [pc, #384]	; (8013d84 <_svfprintf_r+0x9dc>)
 8013c02:	0052      	lsls	r2, r2, #1
 8013c04:	4033      	ands	r3, r6
 8013c06:	431a      	orrs	r2, r3
 8013c08:	2300      	movs	r3, #0
 8013c0a:	001d      	movs	r5, r3
 8013c0c:	9220      	str	r2, [sp, #128]	; 0x80
 8013c0e:	9310      	str	r3, [sp, #64]	; 0x40
 8013c10:	9311      	str	r3, [sp, #68]	; 0x44
 8013c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d100      	bne.n	8013c1a <_svfprintf_r+0x872>
 8013c18:	e27b      	b.n	8014112 <_svfprintf_r+0xd6a>
 8013c1a:	231b      	movs	r3, #27
 8013c1c:	aa1e      	add	r2, sp, #120	; 0x78
 8013c1e:	189b      	adds	r3, r3, r2
 8013c20:	222d      	movs	r2, #45	; 0x2d
 8013c22:	701a      	strb	r2, [r3, #0]
 8013c24:	2300      	movs	r3, #0
 8013c26:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013c28:	9319      	str	r3, [sp, #100]	; 0x64
 8013c2a:	e52b      	b.n	8013684 <_svfprintf_r+0x2dc>
 8013c2c:	9b08      	ldr	r3, [sp, #32]
 8013c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8013c30:	e6ea      	b.n	8013a08 <_svfprintf_r+0x660>
 8013c32:	2306      	movs	r3, #6
 8013c34:	e6d3      	b.n	80139de <_svfprintf_r+0x636>
 8013c36:	930d      	str	r3, [sp, #52]	; 0x34
 8013c38:	2300      	movs	r3, #0
 8013c3a:	e6f4      	b.n	8013a26 <_svfprintf_r+0x67e>
 8013c3c:	7010      	strb	r0, [r2, #0]
 8013c3e:	e75e      	b.n	8013afe <_svfprintf_r+0x756>
 8013c40:	7018      	strb	r0, [r3, #0]
 8013c42:	3301      	adds	r3, #1
 8013c44:	1aca      	subs	r2, r1, r3
 8013c46:	d5fb      	bpl.n	8013c40 <_svfprintf_r+0x898>
 8013c48:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	3201      	adds	r2, #1
 8013c4e:	db01      	blt.n	8013c54 <_svfprintf_r+0x8ac>
 8013c50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013c52:	3301      	adds	r3, #1
 8013c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c56:	18d3      	adds	r3, r2, r3
 8013c58:	9323      	str	r3, [sp, #140]	; 0x8c
 8013c5a:	e75e      	b.n	8013b1a <_svfprintf_r+0x772>
 8013c5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013c60:	2030      	movs	r0, #48	; 0x30
 8013c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c64:	1851      	adds	r1, r2, r1
 8013c66:	e7ed      	b.n	8013c44 <_svfprintf_r+0x89c>
 8013c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c6a:	2b46      	cmp	r3, #70	; 0x46
 8013c6c:	d006      	beq.n	8013c7c <_svfprintf_r+0x8d4>
 8013c6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013c70:	2b45      	cmp	r3, #69	; 0x45
 8013c72:	d101      	bne.n	8013c78 <_svfprintf_r+0x8d0>
 8013c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c76:	1c5d      	adds	r5, r3, #1
 8013c78:	2302      	movs	r3, #2
 8013c7a:	e001      	b.n	8013c80 <_svfprintf_r+0x8d8>
 8013c7c:	2303      	movs	r3, #3
 8013c7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013c80:	aa2a      	add	r2, sp, #168	; 0xa8
 8013c82:	9204      	str	r2, [sp, #16]
 8013c84:	aa27      	add	r2, sp, #156	; 0x9c
 8013c86:	9203      	str	r2, [sp, #12]
 8013c88:	aa26      	add	r2, sp, #152	; 0x98
 8013c8a:	9202      	str	r2, [sp, #8]
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	0022      	movs	r2, r4
 8013c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c94:	9501      	str	r5, [sp, #4]
 8013c96:	f000 feb7 	bl	8014a08 <_dtoa_r>
 8013c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c9c:	9008      	str	r0, [sp, #32]
 8013c9e:	2b47      	cmp	r3, #71	; 0x47
 8013ca0:	d103      	bne.n	8013caa <_svfprintf_r+0x902>
 8013ca2:	07f3      	lsls	r3, r6, #31
 8013ca4:	d401      	bmi.n	8013caa <_svfprintf_r+0x902>
 8013ca6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013ca8:	e738      	b.n	8013b1c <_svfprintf_r+0x774>
 8013caa:	9b08      	ldr	r3, [sp, #32]
 8013cac:	195b      	adds	r3, r3, r5
 8013cae:	9311      	str	r3, [sp, #68]	; 0x44
 8013cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013cb2:	2b46      	cmp	r3, #70	; 0x46
 8013cb4:	d113      	bne.n	8013cde <_svfprintf_r+0x936>
 8013cb6:	9b08      	ldr	r3, [sp, #32]
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	2b30      	cmp	r3, #48	; 0x30
 8013cbc:	d10a      	bne.n	8013cd4 <_svfprintf_r+0x92c>
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	0020      	movs	r0, r4
 8013cc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013cc6:	f7ec fbc9 	bl	800045c <__aeabi_dcmpeq>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d102      	bne.n	8013cd4 <_svfprintf_r+0x92c>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	1b5d      	subs	r5, r3, r5
 8013cd2:	9526      	str	r5, [sp, #152]	; 0x98
 8013cd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013cd8:	4694      	mov	ip, r2
 8013cda:	4463      	add	r3, ip
 8013cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8013cde:	2200      	movs	r2, #0
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	0020      	movs	r0, r4
 8013ce4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ce6:	f7ec fbb9 	bl	800045c <__aeabi_dcmpeq>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	d001      	beq.n	8013cf2 <_svfprintf_r+0x94a>
 8013cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013cf0:	932a      	str	r3, [sp, #168]	; 0xa8
 8013cf2:	2230      	movs	r2, #48	; 0x30
 8013cf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013cf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013cf8:	4299      	cmp	r1, r3
 8013cfa:	d9d4      	bls.n	8013ca6 <_svfprintf_r+0x8fe>
 8013cfc:	1c59      	adds	r1, r3, #1
 8013cfe:	912a      	str	r1, [sp, #168]	; 0xa8
 8013d00:	701a      	strb	r2, [r3, #0]
 8013d02:	e7f7      	b.n	8013cf4 <_svfprintf_r+0x94c>
 8013d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d06:	2b46      	cmp	r3, #70	; 0x46
 8013d08:	d000      	beq.n	8013d0c <_svfprintf_r+0x964>
 8013d0a:	e718      	b.n	8013b3e <_svfprintf_r+0x796>
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	0033      	movs	r3, r6
 8013d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d12:	4013      	ands	r3, r2
 8013d14:	430b      	orrs	r3, r1
 8013d16:	2d00      	cmp	r5, #0
 8013d18:	dd1c      	ble.n	8013d54 <_svfprintf_r+0x9ac>
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d04f      	beq.n	8013dbe <_svfprintf_r+0xa16>
 8013d1e:	000a      	movs	r2, r1
 8013d20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013d22:	18eb      	adds	r3, r5, r3
 8013d24:	18d3      	adds	r3, r2, r3
 8013d26:	9309      	str	r3, [sp, #36]	; 0x24
 8013d28:	2366      	movs	r3, #102	; 0x66
 8013d2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d2c:	e039      	b.n	8013da2 <_svfprintf_r+0x9fa>
 8013d2e:	781c      	ldrb	r4, [r3, #0]
 8013d30:	3301      	adds	r3, #1
 8013d32:	7014      	strb	r4, [r2, #0]
 8013d34:	3201      	adds	r2, #1
 8013d36:	e741      	b.n	8013bbc <_svfprintf_r+0x814>
 8013d38:	222a      	movs	r2, #42	; 0x2a
 8013d3a:	ab1e      	add	r3, sp, #120	; 0x78
 8013d3c:	18d2      	adds	r2, r2, r3
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d104      	bne.n	8013d4c <_svfprintf_r+0x9a4>
 8013d42:	2330      	movs	r3, #48	; 0x30
 8013d44:	222b      	movs	r2, #43	; 0x2b
 8013d46:	708b      	strb	r3, [r1, #2]
 8013d48:	ab1e      	add	r3, sp, #120	; 0x78
 8013d4a:	18d2      	adds	r2, r2, r3
 8013d4c:	3430      	adds	r4, #48	; 0x30
 8013d4e:	1c53      	adds	r3, r2, #1
 8013d50:	7014      	strb	r4, [r2, #0]
 8013d52:	e742      	b.n	8013bda <_svfprintf_r+0x832>
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d034      	beq.n	8013dc2 <_svfprintf_r+0xa1a>
 8013d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	e7e1      	b.n	8013d24 <_svfprintf_r+0x97c>
 8013d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d62:	429d      	cmp	r5, r3
 8013d64:	db10      	blt.n	8013d88 <_svfprintf_r+0x9e0>
 8013d66:	07f3      	lsls	r3, r6, #31
 8013d68:	d52f      	bpl.n	8013dca <_svfprintf_r+0xa22>
 8013d6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013d6c:	18eb      	adds	r3, r5, r3
 8013d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d70:	2367      	movs	r3, #103	; 0x67
 8013d72:	e7da      	b.n	8013d2a <_svfprintf_r+0x982>
 8013d74:	0801aec0 	.word	0x0801aec0
 8013d78:	0801aed1 	.word	0x0801aed1
 8013d7c:	40300000 	.word	0x40300000
 8013d80:	3fe00000 	.word	0x3fe00000
 8013d84:	fffffbff 	.word	0xfffffbff
 8013d88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d8c:	4694      	mov	ip, r2
 8013d8e:	4463      	add	r3, ip
 8013d90:	9309      	str	r3, [sp, #36]	; 0x24
 8013d92:	2367      	movs	r3, #103	; 0x67
 8013d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d96:	2d00      	cmp	r5, #0
 8013d98:	dc03      	bgt.n	8013da2 <_svfprintf_r+0x9fa>
 8013d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d9c:	1b58      	subs	r0, r3, r5
 8013d9e:	1c43      	adds	r3, r0, #1
 8013da0:	9309      	str	r3, [sp, #36]	; 0x24
 8013da2:	2380      	movs	r3, #128	; 0x80
 8013da4:	0032      	movs	r2, r6
 8013da6:	00db      	lsls	r3, r3, #3
 8013da8:	401a      	ands	r2, r3
 8013daa:	9211      	str	r2, [sp, #68]	; 0x44
 8013dac:	2200      	movs	r2, #0
 8013dae:	9210      	str	r2, [sp, #64]	; 0x40
 8013db0:	421e      	tst	r6, r3
 8013db2:	d100      	bne.n	8013db6 <_svfprintf_r+0xa0e>
 8013db4:	e72d      	b.n	8013c12 <_svfprintf_r+0x86a>
 8013db6:	4295      	cmp	r5, r2
 8013db8:	dc27      	bgt.n	8013e0a <_svfprintf_r+0xa62>
 8013dba:	9211      	str	r2, [sp, #68]	; 0x44
 8013dbc:	e729      	b.n	8013c12 <_svfprintf_r+0x86a>
 8013dbe:	9509      	str	r5, [sp, #36]	; 0x24
 8013dc0:	e7b2      	b.n	8013d28 <_svfprintf_r+0x980>
 8013dc2:	2366      	movs	r3, #102	; 0x66
 8013dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8013dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dc8:	e7eb      	b.n	8013da2 <_svfprintf_r+0x9fa>
 8013dca:	9509      	str	r5, [sp, #36]	; 0x24
 8013dcc:	e7d0      	b.n	8013d70 <_svfprintf_r+0x9c8>
 8013dce:	42ab      	cmp	r3, r5
 8013dd0:	da0e      	bge.n	8013df0 <_svfprintf_r+0xa48>
 8013dd2:	1aed      	subs	r5, r5, r3
 8013dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dd6:	785b      	ldrb	r3, [r3, #1]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d012      	beq.n	8013e02 <_svfprintf_r+0xa5a>
 8013ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013dde:	3301      	adds	r3, #1
 8013de0:	9311      	str	r3, [sp, #68]	; 0x44
 8013de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013de4:	3301      	adds	r3, #1
 8013de6:	9312      	str	r3, [sp, #72]	; 0x48
 8013de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	2bff      	cmp	r3, #255	; 0xff
 8013dee:	d1ee      	bne.n	8013dce <_svfprintf_r+0xa26>
 8013df0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013df4:	189b      	adds	r3, r3, r2
 8013df6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013df8:	4353      	muls	r3, r2
 8013dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dfc:	189b      	adds	r3, r3, r2
 8013dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8013e00:	e707      	b.n	8013c12 <_svfprintf_r+0x86a>
 8013e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e04:	3301      	adds	r3, #1
 8013e06:	9310      	str	r3, [sp, #64]	; 0x40
 8013e08:	e7ee      	b.n	8013de8 <_svfprintf_r+0xa40>
 8013e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8013e0e:	e7eb      	b.n	8013de8 <_svfprintf_r+0xa40>
 8013e10:	0022      	movs	r2, r4
 8013e12:	ca08      	ldmia	r2!, {r3}
 8013e14:	920e      	str	r2, [sp, #56]	; 0x38
 8013e16:	06b2      	lsls	r2, r6, #26
 8013e18:	d508      	bpl.n	8013e2c <_svfprintf_r+0xa84>
 8013e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e1c:	601a      	str	r2, [r3, #0]
 8013e1e:	17d2      	asrs	r2, r2, #31
 8013e20:	605a      	str	r2, [r3, #4]
 8013e22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013e26:	9308      	str	r3, [sp, #32]
 8013e28:	f7ff fafa 	bl	8013420 <_svfprintf_r+0x78>
 8013e2c:	06f2      	lsls	r2, r6, #27
 8013e2e:	d502      	bpl.n	8013e36 <_svfprintf_r+0xa8e>
 8013e30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e32:	601a      	str	r2, [r3, #0]
 8013e34:	e7f5      	b.n	8013e22 <_svfprintf_r+0xa7a>
 8013e36:	0672      	lsls	r2, r6, #25
 8013e38:	d502      	bpl.n	8013e40 <_svfprintf_r+0xa98>
 8013e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e3c:	801a      	strh	r2, [r3, #0]
 8013e3e:	e7f0      	b.n	8013e22 <_svfprintf_r+0xa7a>
 8013e40:	05b2      	lsls	r2, r6, #22
 8013e42:	d5f5      	bpl.n	8013e30 <_svfprintf_r+0xa88>
 8013e44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e46:	701a      	strb	r2, [r3, #0]
 8013e48:	e7eb      	b.n	8013e22 <_svfprintf_r+0xa7a>
 8013e4a:	2310      	movs	r3, #16
 8013e4c:	431e      	orrs	r6, r3
 8013e4e:	2320      	movs	r3, #32
 8013e50:	0031      	movs	r1, r6
 8013e52:	4019      	ands	r1, r3
 8013e54:	421e      	tst	r6, r3
 8013e56:	d00f      	beq.n	8013e78 <_svfprintf_r+0xad0>
 8013e58:	3b19      	subs	r3, #25
 8013e5a:	3407      	adds	r4, #7
 8013e5c:	439c      	bics	r4, r3
 8013e5e:	0022      	movs	r2, r4
 8013e60:	ca18      	ldmia	r2!, {r3, r4}
 8013e62:	9306      	str	r3, [sp, #24]
 8013e64:	9407      	str	r4, [sp, #28]
 8013e66:	920e      	str	r2, [sp, #56]	; 0x38
 8013e68:	4bca      	ldr	r3, [pc, #808]	; (8014194 <_svfprintf_r+0xdec>)
 8013e6a:	401e      	ands	r6, r3
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	221b      	movs	r2, #27
 8013e70:	a91e      	add	r1, sp, #120	; 0x78
 8013e72:	1852      	adds	r2, r2, r1
 8013e74:	2100      	movs	r1, #0
 8013e76:	e4fc      	b.n	8013872 <_svfprintf_r+0x4ca>
 8013e78:	1d23      	adds	r3, r4, #4
 8013e7a:	0032      	movs	r2, r6
 8013e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8013e7e:	2310      	movs	r3, #16
 8013e80:	401a      	ands	r2, r3
 8013e82:	421e      	tst	r6, r3
 8013e84:	d003      	beq.n	8013e8e <_svfprintf_r+0xae6>
 8013e86:	6823      	ldr	r3, [r4, #0]
 8013e88:	9306      	str	r3, [sp, #24]
 8013e8a:	9107      	str	r1, [sp, #28]
 8013e8c:	e7ec      	b.n	8013e68 <_svfprintf_r+0xac0>
 8013e8e:	2340      	movs	r3, #64	; 0x40
 8013e90:	0031      	movs	r1, r6
 8013e92:	4019      	ands	r1, r3
 8013e94:	421e      	tst	r6, r3
 8013e96:	d004      	beq.n	8013ea2 <_svfprintf_r+0xafa>
 8013e98:	6823      	ldr	r3, [r4, #0]
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	9306      	str	r3, [sp, #24]
 8013e9e:	9207      	str	r2, [sp, #28]
 8013ea0:	e7e2      	b.n	8013e68 <_svfprintf_r+0xac0>
 8013ea2:	2380      	movs	r3, #128	; 0x80
 8013ea4:	0032      	movs	r2, r6
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	401a      	ands	r2, r3
 8013eaa:	421e      	tst	r6, r3
 8013eac:	d002      	beq.n	8013eb4 <_svfprintf_r+0xb0c>
 8013eae:	6823      	ldr	r3, [r4, #0]
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	e7e9      	b.n	8013e88 <_svfprintf_r+0xae0>
 8013eb4:	6823      	ldr	r3, [r4, #0]
 8013eb6:	e7f1      	b.n	8013e9c <_svfprintf_r+0xaf4>
 8013eb8:	0023      	movs	r3, r4
 8013eba:	cb04      	ldmia	r3!, {r2}
 8013ebc:	49b6      	ldr	r1, [pc, #728]	; (8014198 <_svfprintf_r+0xdf0>)
 8013ebe:	9206      	str	r2, [sp, #24]
 8013ec0:	aa25      	add	r2, sp, #148	; 0x94
 8013ec2:	8011      	strh	r1, [r2, #0]
 8013ec4:	4ab5      	ldr	r2, [pc, #724]	; (801419c <_svfprintf_r+0xdf4>)
 8013ec6:	930e      	str	r3, [sp, #56]	; 0x38
 8013ec8:	2300      	movs	r3, #0
 8013eca:	921f      	str	r2, [sp, #124]	; 0x7c
 8013ecc:	2278      	movs	r2, #120	; 0x78
 8013ece:	9307      	str	r3, [sp, #28]
 8013ed0:	3302      	adds	r3, #2
 8013ed2:	431e      	orrs	r6, r3
 8013ed4:	920f      	str	r2, [sp, #60]	; 0x3c
 8013ed6:	e7ca      	b.n	8013e6e <_svfprintf_r+0xac6>
 8013ed8:	0023      	movs	r3, r4
 8013eda:	cb04      	ldmia	r3!, {r2}
 8013edc:	2400      	movs	r4, #0
 8013ede:	930e      	str	r3, [sp, #56]	; 0x38
 8013ee0:	231b      	movs	r3, #27
 8013ee2:	9208      	str	r2, [sp, #32]
 8013ee4:	aa1e      	add	r2, sp, #120	; 0x78
 8013ee6:	189b      	adds	r3, r3, r2
 8013ee8:	701c      	strb	r4, [r3, #0]
 8013eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eec:	3301      	adds	r3, #1
 8013eee:	d00e      	beq.n	8013f0e <_svfprintf_r+0xb66>
 8013ef0:	0021      	movs	r1, r4
 8013ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ef4:	9808      	ldr	r0, [sp, #32]
 8013ef6:	f002 f821 	bl	8015f3c <memchr>
 8013efa:	900c      	str	r0, [sp, #48]	; 0x30
 8013efc:	42a0      	cmp	r0, r4
 8013efe:	d100      	bne.n	8013f02 <_svfprintf_r+0xb5a>
 8013f00:	e10a      	b.n	8014118 <_svfprintf_r+0xd70>
 8013f02:	9a08      	ldr	r2, [sp, #32]
 8013f04:	1a83      	subs	r3, r0, r2
 8013f06:	9309      	str	r3, [sp, #36]	; 0x24
 8013f08:	0023      	movs	r3, r4
 8013f0a:	940c      	str	r4, [sp, #48]	; 0x30
 8013f0c:	e516      	b.n	801393c <_svfprintf_r+0x594>
 8013f0e:	9808      	ldr	r0, [sp, #32]
 8013f10:	f7ec f902 	bl	8000118 <strlen>
 8013f14:	9009      	str	r0, [sp, #36]	; 0x24
 8013f16:	e7f7      	b.n	8013f08 <_svfprintf_r+0xb60>
 8013f18:	2310      	movs	r3, #16
 8013f1a:	431e      	orrs	r6, r3
 8013f1c:	2320      	movs	r3, #32
 8013f1e:	0031      	movs	r1, r6
 8013f20:	4019      	ands	r1, r3
 8013f22:	421e      	tst	r6, r3
 8013f24:	d009      	beq.n	8013f3a <_svfprintf_r+0xb92>
 8013f26:	3b19      	subs	r3, #25
 8013f28:	3407      	adds	r4, #7
 8013f2a:	439c      	bics	r4, r3
 8013f2c:	0022      	movs	r2, r4
 8013f2e:	ca18      	ldmia	r2!, {r3, r4}
 8013f30:	9306      	str	r3, [sp, #24]
 8013f32:	9407      	str	r4, [sp, #28]
 8013f34:	920e      	str	r2, [sp, #56]	; 0x38
 8013f36:	2301      	movs	r3, #1
 8013f38:	e799      	b.n	8013e6e <_svfprintf_r+0xac6>
 8013f3a:	1d23      	adds	r3, r4, #4
 8013f3c:	0032      	movs	r2, r6
 8013f3e:	930e      	str	r3, [sp, #56]	; 0x38
 8013f40:	2310      	movs	r3, #16
 8013f42:	401a      	ands	r2, r3
 8013f44:	421e      	tst	r6, r3
 8013f46:	d003      	beq.n	8013f50 <_svfprintf_r+0xba8>
 8013f48:	6823      	ldr	r3, [r4, #0]
 8013f4a:	9306      	str	r3, [sp, #24]
 8013f4c:	9107      	str	r1, [sp, #28]
 8013f4e:	e7f2      	b.n	8013f36 <_svfprintf_r+0xb8e>
 8013f50:	2340      	movs	r3, #64	; 0x40
 8013f52:	0031      	movs	r1, r6
 8013f54:	4019      	ands	r1, r3
 8013f56:	421e      	tst	r6, r3
 8013f58:	d004      	beq.n	8013f64 <_svfprintf_r+0xbbc>
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	9306      	str	r3, [sp, #24]
 8013f60:	9207      	str	r2, [sp, #28]
 8013f62:	e7e8      	b.n	8013f36 <_svfprintf_r+0xb8e>
 8013f64:	2380      	movs	r3, #128	; 0x80
 8013f66:	0032      	movs	r2, r6
 8013f68:	009b      	lsls	r3, r3, #2
 8013f6a:	401a      	ands	r2, r3
 8013f6c:	421e      	tst	r6, r3
 8013f6e:	d002      	beq.n	8013f76 <_svfprintf_r+0xbce>
 8013f70:	6823      	ldr	r3, [r4, #0]
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	e7e9      	b.n	8013f4a <_svfprintf_r+0xba2>
 8013f76:	6823      	ldr	r3, [r4, #0]
 8013f78:	e7f1      	b.n	8013f5e <_svfprintf_r+0xbb6>
 8013f7a:	4b89      	ldr	r3, [pc, #548]	; (80141a0 <_svfprintf_r+0xdf8>)
 8013f7c:	0031      	movs	r1, r6
 8013f7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f80:	2320      	movs	r3, #32
 8013f82:	4019      	ands	r1, r3
 8013f84:	421e      	tst	r6, r3
 8013f86:	d01a      	beq.n	8013fbe <_svfprintf_r+0xc16>
 8013f88:	3b19      	subs	r3, #25
 8013f8a:	3407      	adds	r4, #7
 8013f8c:	439c      	bics	r4, r3
 8013f8e:	0022      	movs	r2, r4
 8013f90:	ca18      	ldmia	r2!, {r3, r4}
 8013f92:	9306      	str	r3, [sp, #24]
 8013f94:	9407      	str	r4, [sp, #28]
 8013f96:	920e      	str	r2, [sp, #56]	; 0x38
 8013f98:	07f3      	lsls	r3, r6, #31
 8013f9a:	d50a      	bpl.n	8013fb2 <_svfprintf_r+0xc0a>
 8013f9c:	9b06      	ldr	r3, [sp, #24]
 8013f9e:	9a07      	ldr	r2, [sp, #28]
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	d006      	beq.n	8013fb2 <_svfprintf_r+0xc0a>
 8013fa4:	2230      	movs	r2, #48	; 0x30
 8013fa6:	ab25      	add	r3, sp, #148	; 0x94
 8013fa8:	701a      	strb	r2, [r3, #0]
 8013faa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013fac:	705a      	strb	r2, [r3, #1]
 8013fae:	2302      	movs	r3, #2
 8013fb0:	431e      	orrs	r6, r3
 8013fb2:	4b78      	ldr	r3, [pc, #480]	; (8014194 <_svfprintf_r+0xdec>)
 8013fb4:	401e      	ands	r6, r3
 8013fb6:	2302      	movs	r3, #2
 8013fb8:	e759      	b.n	8013e6e <_svfprintf_r+0xac6>
 8013fba:	4b78      	ldr	r3, [pc, #480]	; (801419c <_svfprintf_r+0xdf4>)
 8013fbc:	e7de      	b.n	8013f7c <_svfprintf_r+0xbd4>
 8013fbe:	1d23      	adds	r3, r4, #4
 8013fc0:	0032      	movs	r2, r6
 8013fc2:	930e      	str	r3, [sp, #56]	; 0x38
 8013fc4:	2310      	movs	r3, #16
 8013fc6:	401a      	ands	r2, r3
 8013fc8:	421e      	tst	r6, r3
 8013fca:	d003      	beq.n	8013fd4 <_svfprintf_r+0xc2c>
 8013fcc:	6823      	ldr	r3, [r4, #0]
 8013fce:	9306      	str	r3, [sp, #24]
 8013fd0:	9107      	str	r1, [sp, #28]
 8013fd2:	e7e1      	b.n	8013f98 <_svfprintf_r+0xbf0>
 8013fd4:	2340      	movs	r3, #64	; 0x40
 8013fd6:	0031      	movs	r1, r6
 8013fd8:	4019      	ands	r1, r3
 8013fda:	421e      	tst	r6, r3
 8013fdc:	d004      	beq.n	8013fe8 <_svfprintf_r+0xc40>
 8013fde:	6823      	ldr	r3, [r4, #0]
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	9306      	str	r3, [sp, #24]
 8013fe4:	9207      	str	r2, [sp, #28]
 8013fe6:	e7d7      	b.n	8013f98 <_svfprintf_r+0xbf0>
 8013fe8:	2380      	movs	r3, #128	; 0x80
 8013fea:	0032      	movs	r2, r6
 8013fec:	009b      	lsls	r3, r3, #2
 8013fee:	401a      	ands	r2, r3
 8013ff0:	421e      	tst	r6, r3
 8013ff2:	d002      	beq.n	8013ffa <_svfprintf_r+0xc52>
 8013ff4:	6823      	ldr	r3, [r4, #0]
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	e7e9      	b.n	8013fce <_svfprintf_r+0xc26>
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	e7f1      	b.n	8013fe2 <_svfprintf_r+0xc3a>
 8013ffe:	9b07      	ldr	r3, [sp, #28]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d10b      	bne.n	801401c <_svfprintf_r+0xc74>
 8014004:	9b06      	ldr	r3, [sp, #24]
 8014006:	2b09      	cmp	r3, #9
 8014008:	d808      	bhi.n	801401c <_svfprintf_r+0xc74>
 801400a:	20e7      	movs	r0, #231	; 0xe7
 801400c:	ab1e      	add	r3, sp, #120	; 0x78
 801400e:	18c0      	adds	r0, r0, r3
 8014010:	9b06      	ldr	r3, [sp, #24]
 8014012:	3330      	adds	r3, #48	; 0x30
 8014014:	7003      	strb	r3, [r0, #0]
 8014016:	9008      	str	r0, [sp, #32]
 8014018:	f000 fc38 	bl	801488c <_svfprintf_r+0x14e4>
 801401c:	2480      	movs	r4, #128	; 0x80
 801401e:	2300      	movs	r3, #0
 8014020:	00e4      	lsls	r4, r4, #3
 8014022:	930d      	str	r3, [sp, #52]	; 0x34
 8014024:	a858      	add	r0, sp, #352	; 0x160
 8014026:	402c      	ands	r4, r5
 8014028:	1e43      	subs	r3, r0, #1
 801402a:	9308      	str	r3, [sp, #32]
 801402c:	220a      	movs	r2, #10
 801402e:	9806      	ldr	r0, [sp, #24]
 8014030:	9907      	ldr	r1, [sp, #28]
 8014032:	2300      	movs	r3, #0
 8014034:	f7ec fa7a 	bl	800052c <__aeabi_uldivmod>
 8014038:	9b08      	ldr	r3, [sp, #32]
 801403a:	3230      	adds	r2, #48	; 0x30
 801403c:	701a      	strb	r2, [r3, #0]
 801403e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014040:	3301      	adds	r3, #1
 8014042:	930d      	str	r3, [sp, #52]	; 0x34
 8014044:	2c00      	cmp	r4, #0
 8014046:	d01d      	beq.n	8014084 <_svfprintf_r+0xcdc>
 8014048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801404a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	429a      	cmp	r2, r3
 8014050:	d118      	bne.n	8014084 <_svfprintf_r+0xcdc>
 8014052:	2aff      	cmp	r2, #255	; 0xff
 8014054:	d016      	beq.n	8014084 <_svfprintf_r+0xcdc>
 8014056:	9b07      	ldr	r3, [sp, #28]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <_svfprintf_r+0xcba>
 801405c:	9b06      	ldr	r3, [sp, #24]
 801405e:	2b09      	cmp	r3, #9
 8014060:	d910      	bls.n	8014084 <_svfprintf_r+0xcdc>
 8014062:	9b08      	ldr	r3, [sp, #32]
 8014064:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014066:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014068:	1a9b      	subs	r3, r3, r2
 801406a:	0018      	movs	r0, r3
 801406c:	9308      	str	r3, [sp, #32]
 801406e:	f7fe fa69 	bl	8012544 <strncpy>
 8014072:	2200      	movs	r2, #0
 8014074:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014076:	920d      	str	r2, [sp, #52]	; 0x34
 8014078:	785b      	ldrb	r3, [r3, #1]
 801407a:	1e5a      	subs	r2, r3, #1
 801407c:	4193      	sbcs	r3, r2
 801407e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014080:	18d3      	adds	r3, r2, r3
 8014082:	9312      	str	r3, [sp, #72]	; 0x48
 8014084:	2300      	movs	r3, #0
 8014086:	9806      	ldr	r0, [sp, #24]
 8014088:	9907      	ldr	r1, [sp, #28]
 801408a:	220a      	movs	r2, #10
 801408c:	f7ec fa4e 	bl	800052c <__aeabi_uldivmod>
 8014090:	9b07      	ldr	r3, [sp, #28]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d104      	bne.n	80140a0 <_svfprintf_r+0xcf8>
 8014096:	9b06      	ldr	r3, [sp, #24]
 8014098:	2b09      	cmp	r3, #9
 801409a:	d801      	bhi.n	80140a0 <_svfprintf_r+0xcf8>
 801409c:	f000 fbf6 	bl	801488c <_svfprintf_r+0x14e4>
 80140a0:	9006      	str	r0, [sp, #24]
 80140a2:	9107      	str	r1, [sp, #28]
 80140a4:	9808      	ldr	r0, [sp, #32]
 80140a6:	e7bf      	b.n	8014028 <_svfprintf_r+0xc80>
 80140a8:	200f      	movs	r0, #15
 80140aa:	ab58      	add	r3, sp, #352	; 0x160
 80140ac:	9308      	str	r3, [sp, #32]
 80140ae:	9b08      	ldr	r3, [sp, #32]
 80140b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80140b2:	3b01      	subs	r3, #1
 80140b4:	9308      	str	r3, [sp, #32]
 80140b6:	9b06      	ldr	r3, [sp, #24]
 80140b8:	4003      	ands	r3, r0
 80140ba:	5cd3      	ldrb	r3, [r2, r3]
 80140bc:	9a08      	ldr	r2, [sp, #32]
 80140be:	7013      	strb	r3, [r2, #0]
 80140c0:	9b07      	ldr	r3, [sp, #28]
 80140c2:	0719      	lsls	r1, r3, #28
 80140c4:	9b06      	ldr	r3, [sp, #24]
 80140c6:	091a      	lsrs	r2, r3, #4
 80140c8:	9b07      	ldr	r3, [sp, #28]
 80140ca:	4311      	orrs	r1, r2
 80140cc:	091b      	lsrs	r3, r3, #4
 80140ce:	9307      	str	r3, [sp, #28]
 80140d0:	000b      	movs	r3, r1
 80140d2:	9a07      	ldr	r2, [sp, #28]
 80140d4:	9106      	str	r1, [sp, #24]
 80140d6:	4313      	orrs	r3, r2
 80140d8:	d1e9      	bne.n	80140ae <_svfprintf_r+0xd06>
 80140da:	e3d7      	b.n	801488c <_svfprintf_r+0x14e4>
 80140dc:	aa58      	add	r2, sp, #352	; 0x160
 80140de:	9208      	str	r2, [sp, #32]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d000      	beq.n	80140e6 <_svfprintf_r+0xd3e>
 80140e4:	e3d2      	b.n	801488c <_svfprintf_r+0x14e4>
 80140e6:	07f3      	lsls	r3, r6, #31
 80140e8:	d400      	bmi.n	80140ec <_svfprintf_r+0xd44>
 80140ea:	e3cf      	b.n	801488c <_svfprintf_r+0x14e4>
 80140ec:	20e7      	movs	r0, #231	; 0xe7
 80140ee:	ab1e      	add	r3, sp, #120	; 0x78
 80140f0:	18c0      	adds	r0, r0, r3
 80140f2:	2330      	movs	r3, #48	; 0x30
 80140f4:	e78e      	b.n	8014014 <_svfprintf_r+0xc6c>
 80140f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d100      	bne.n	80140fe <_svfprintf_r+0xd56>
 80140fc:	e38a      	b.n	8014814 <_svfprintf_r+0x146c>
 80140fe:	221b      	movs	r2, #27
 8014100:	a83f      	add	r0, sp, #252	; 0xfc
 8014102:	7003      	strb	r3, [r0, #0]
 8014104:	2300      	movs	r3, #0
 8014106:	a91e      	add	r1, sp, #120	; 0x78
 8014108:	1852      	adds	r2, r2, r1
 801410a:	7013      	strb	r3, [r2, #0]
 801410c:	940e      	str	r4, [sp, #56]	; 0x38
 801410e:	f7ff fab0 	bl	8013672 <_svfprintf_r+0x2ca>
 8014112:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014114:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014116:	e587      	b.n	8013c28 <_svfprintf_r+0x880>
 8014118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801411a:	e40f      	b.n	801393c <_svfprintf_r+0x594>
 801411c:	2010      	movs	r0, #16
 801411e:	1812      	adds	r2, r2, r0
 8014120:	6078      	str	r0, [r7, #4]
 8014122:	922e      	str	r2, [sp, #184]	; 0xb8
 8014124:	932d      	str	r3, [sp, #180]	; 0xb4
 8014126:	2b07      	cmp	r3, #7
 8014128:	dd08      	ble.n	801413c <_svfprintf_r+0xd94>
 801412a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801412c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801412e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014130:	f002 fbd4 	bl	80168dc <__ssprint_r>
 8014134:	2800      	cmp	r0, #0
 8014136:	d000      	beq.n	801413a <_svfprintf_r+0xd92>
 8014138:	e34b      	b.n	80147d2 <_svfprintf_r+0x142a>
 801413a:	a92f      	add	r1, sp, #188	; 0xbc
 801413c:	000f      	movs	r7, r1
 801413e:	3c10      	subs	r4, #16
 8014140:	f7ff fac3 	bl	80136ca <_svfprintf_r+0x322>
 8014144:	2010      	movs	r0, #16
 8014146:	1812      	adds	r2, r2, r0
 8014148:	6078      	str	r0, [r7, #4]
 801414a:	922e      	str	r2, [sp, #184]	; 0xb8
 801414c:	932d      	str	r3, [sp, #180]	; 0xb4
 801414e:	2b07      	cmp	r3, #7
 8014150:	dd08      	ble.n	8014164 <_svfprintf_r+0xdbc>
 8014152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014156:	aa2c      	add	r2, sp, #176	; 0xb0
 8014158:	f002 fbc0 	bl	80168dc <__ssprint_r>
 801415c:	2800      	cmp	r0, #0
 801415e:	d000      	beq.n	8014162 <_svfprintf_r+0xdba>
 8014160:	e337      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014162:	a92f      	add	r1, sp, #188	; 0xbc
 8014164:	000f      	movs	r7, r1
 8014166:	3c10      	subs	r4, #16
 8014168:	f7ff fb0f 	bl	801378a <_svfprintf_r+0x3e2>
 801416c:	2010      	movs	r0, #16
 801416e:	1812      	adds	r2, r2, r0
 8014170:	6078      	str	r0, [r7, #4]
 8014172:	922e      	str	r2, [sp, #184]	; 0xb8
 8014174:	932d      	str	r3, [sp, #180]	; 0xb4
 8014176:	2b07      	cmp	r3, #7
 8014178:	dd08      	ble.n	801418c <_svfprintf_r+0xde4>
 801417a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801417c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801417e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014180:	f002 fbac 	bl	80168dc <__ssprint_r>
 8014184:	2800      	cmp	r0, #0
 8014186:	d000      	beq.n	801418a <_svfprintf_r+0xde2>
 8014188:	e323      	b.n	80147d2 <_svfprintf_r+0x142a>
 801418a:	a92f      	add	r1, sp, #188	; 0xbc
 801418c:	000f      	movs	r7, r1
 801418e:	3c10      	subs	r4, #16
 8014190:	f7ff fb1d 	bl	80137ce <_svfprintf_r+0x426>
 8014194:	fffffbff 	.word	0xfffffbff
 8014198:	00007830 	.word	0x00007830
 801419c:	0801aec0 	.word	0x0801aec0
 80141a0:	0801aed1 	.word	0x0801aed1
 80141a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141a6:	2b65      	cmp	r3, #101	; 0x65
 80141a8:	dc00      	bgt.n	80141ac <_svfprintf_r+0xe04>
 80141aa:	e258      	b.n	801465e <_svfprintf_r+0x12b6>
 80141ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 80141ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80141b0:	2200      	movs	r2, #0
 80141b2:	2300      	movs	r3, #0
 80141b4:	f7ec f952 	bl	800045c <__aeabi_dcmpeq>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d07c      	beq.n	80142b6 <_svfprintf_r+0xf0e>
 80141bc:	4b80      	ldr	r3, [pc, #512]	; (80143c0 <_svfprintf_r+0x1018>)
 80141be:	603b      	str	r3, [r7, #0]
 80141c0:	2301      	movs	r3, #1
 80141c2:	607b      	str	r3, [r7, #4]
 80141c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141c6:	3708      	adds	r7, #8
 80141c8:	3301      	adds	r3, #1
 80141ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80141cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80141ce:	9308      	str	r3, [sp, #32]
 80141d0:	3301      	adds	r3, #1
 80141d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80141d4:	2b07      	cmp	r3, #7
 80141d6:	dd08      	ble.n	80141ea <_svfprintf_r+0xe42>
 80141d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80141de:	f002 fb7d 	bl	80168dc <__ssprint_r>
 80141e2:	2800      	cmp	r0, #0
 80141e4:	d000      	beq.n	80141e8 <_svfprintf_r+0xe40>
 80141e6:	e2f4      	b.n	80147d2 <_svfprintf_r+0x142a>
 80141e8:	af2f      	add	r7, sp, #188	; 0xbc
 80141ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80141ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141ee:	4293      	cmp	r3, r2
 80141f0:	db01      	blt.n	80141f6 <_svfprintf_r+0xe4e>
 80141f2:	07f3      	lsls	r3, r6, #31
 80141f4:	d51d      	bpl.n	8014232 <_svfprintf_r+0xe8a>
 80141f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80141f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80141fa:	4694      	mov	ip, r2
 80141fc:	603b      	str	r3, [r7, #0]
 80141fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014200:	607b      	str	r3, [r7, #4]
 8014202:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014204:	3708      	adds	r7, #8
 8014206:	4463      	add	r3, ip
 8014208:	932e      	str	r3, [sp, #184]	; 0xb8
 801420a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801420c:	9308      	str	r3, [sp, #32]
 801420e:	3301      	adds	r3, #1
 8014210:	932d      	str	r3, [sp, #180]	; 0xb4
 8014212:	2b07      	cmp	r3, #7
 8014214:	dd08      	ble.n	8014228 <_svfprintf_r+0xe80>
 8014216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014218:	980a      	ldr	r0, [sp, #40]	; 0x28
 801421a:	aa2c      	add	r2, sp, #176	; 0xb0
 801421c:	f002 fb5e 	bl	80168dc <__ssprint_r>
 8014220:	2800      	cmp	r0, #0
 8014222:	d000      	beq.n	8014226 <_svfprintf_r+0xe7e>
 8014224:	e2d5      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014226:	af2f      	add	r7, sp, #188	; 0xbc
 8014228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801422a:	2510      	movs	r5, #16
 801422c:	1e5c      	subs	r4, r3, #1
 801422e:	2c00      	cmp	r4, #0
 8014230:	dc2f      	bgt.n	8014292 <_svfprintf_r+0xeea>
 8014232:	0773      	lsls	r3, r6, #29
 8014234:	d500      	bpl.n	8014238 <_svfprintf_r+0xe90>
 8014236:	e2ae      	b.n	8014796 <_svfprintf_r+0x13ee>
 8014238:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801423a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801423c:	4293      	cmp	r3, r2
 801423e:	da00      	bge.n	8014242 <_svfprintf_r+0xe9a>
 8014240:	0013      	movs	r3, r2
 8014242:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014244:	18d3      	adds	r3, r2, r3
 8014246:	9317      	str	r3, [sp, #92]	; 0x5c
 8014248:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801424a:	9308      	str	r3, [sp, #32]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d007      	beq.n	8014260 <_svfprintf_r+0xeb8>
 8014250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014252:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014254:	aa2c      	add	r2, sp, #176	; 0xb0
 8014256:	f002 fb41 	bl	80168dc <__ssprint_r>
 801425a:	2800      	cmp	r0, #0
 801425c:	d000      	beq.n	8014260 <_svfprintf_r+0xeb8>
 801425e:	e2b8      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014260:	2300      	movs	r3, #0
 8014262:	932d      	str	r3, [sp, #180]	; 0xb4
 8014264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014266:	2b00      	cmp	r3, #0
 8014268:	d000      	beq.n	801426c <_svfprintf_r+0xec4>
 801426a:	e2ce      	b.n	801480a <_svfprintf_r+0x1462>
 801426c:	af2f      	add	r7, sp, #188	; 0xbc
 801426e:	e5d8      	b.n	8013e22 <_svfprintf_r+0xa7a>
 8014270:	3210      	adds	r2, #16
 8014272:	607d      	str	r5, [r7, #4]
 8014274:	922e      	str	r2, [sp, #184]	; 0xb8
 8014276:	932d      	str	r3, [sp, #180]	; 0xb4
 8014278:	2b07      	cmp	r3, #7
 801427a:	dd08      	ble.n	801428e <_svfprintf_r+0xee6>
 801427c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801427e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014280:	aa2c      	add	r2, sp, #176	; 0xb0
 8014282:	f002 fb2b 	bl	80168dc <__ssprint_r>
 8014286:	2800      	cmp	r0, #0
 8014288:	d000      	beq.n	801428c <_svfprintf_r+0xee4>
 801428a:	e2a2      	b.n	80147d2 <_svfprintf_r+0x142a>
 801428c:	a92f      	add	r1, sp, #188	; 0xbc
 801428e:	000f      	movs	r7, r1
 8014290:	3c10      	subs	r4, #16
 8014292:	0039      	movs	r1, r7
 8014294:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014296:	484b      	ldr	r0, [pc, #300]	; (80143c4 <_svfprintf_r+0x101c>)
 8014298:	9308      	str	r3, [sp, #32]
 801429a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801429c:	3301      	adds	r3, #1
 801429e:	3108      	adds	r1, #8
 80142a0:	6038      	str	r0, [r7, #0]
 80142a2:	2c10      	cmp	r4, #16
 80142a4:	dce4      	bgt.n	8014270 <_svfprintf_r+0xec8>
 80142a6:	607c      	str	r4, [r7, #4]
 80142a8:	18a4      	adds	r4, r4, r2
 80142aa:	000f      	movs	r7, r1
 80142ac:	942e      	str	r4, [sp, #184]	; 0xb8
 80142ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80142b0:	2b07      	cmp	r3, #7
 80142b2:	ddbe      	ble.n	8014232 <_svfprintf_r+0xe8a>
 80142b4:	e067      	b.n	8014386 <_svfprintf_r+0xfde>
 80142b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	dd00      	ble.n	80142be <_svfprintf_r+0xf16>
 80142bc:	e084      	b.n	80143c8 <_svfprintf_r+0x1020>
 80142be:	4b40      	ldr	r3, [pc, #256]	; (80143c0 <_svfprintf_r+0x1018>)
 80142c0:	603b      	str	r3, [r7, #0]
 80142c2:	2301      	movs	r3, #1
 80142c4:	607b      	str	r3, [r7, #4]
 80142c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142c8:	3708      	adds	r7, #8
 80142ca:	3301      	adds	r3, #1
 80142cc:	932e      	str	r3, [sp, #184]	; 0xb8
 80142ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80142d0:	9309      	str	r3, [sp, #36]	; 0x24
 80142d2:	3301      	adds	r3, #1
 80142d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80142d6:	2b07      	cmp	r3, #7
 80142d8:	dd08      	ble.n	80142ec <_svfprintf_r+0xf44>
 80142da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142de:	aa2c      	add	r2, sp, #176	; 0xb0
 80142e0:	f002 fafc 	bl	80168dc <__ssprint_r>
 80142e4:	2800      	cmp	r0, #0
 80142e6:	d000      	beq.n	80142ea <_svfprintf_r+0xf42>
 80142e8:	e273      	b.n	80147d2 <_svfprintf_r+0x142a>
 80142ea:	af2f      	add	r7, sp, #188	; 0xbc
 80142ec:	9926      	ldr	r1, [sp, #152]	; 0x98
 80142ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80142f2:	430b      	orrs	r3, r1
 80142f4:	2101      	movs	r1, #1
 80142f6:	4031      	ands	r1, r6
 80142f8:	430b      	orrs	r3, r1
 80142fa:	d09a      	beq.n	8014232 <_svfprintf_r+0xe8a>
 80142fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80142fe:	603b      	str	r3, [r7, #0]
 8014300:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014302:	607b      	str	r3, [r7, #4]
 8014304:	189a      	adds	r2, r3, r2
 8014306:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014308:	922e      	str	r2, [sp, #184]	; 0xb8
 801430a:	9309      	str	r3, [sp, #36]	; 0x24
 801430c:	3301      	adds	r3, #1
 801430e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014310:	3708      	adds	r7, #8
 8014312:	2b07      	cmp	r3, #7
 8014314:	dd08      	ble.n	8014328 <_svfprintf_r+0xf80>
 8014316:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014318:	980a      	ldr	r0, [sp, #40]	; 0x28
 801431a:	aa2c      	add	r2, sp, #176	; 0xb0
 801431c:	f002 fade 	bl	80168dc <__ssprint_r>
 8014320:	2800      	cmp	r0, #0
 8014322:	d000      	beq.n	8014326 <_svfprintf_r+0xf7e>
 8014324:	e255      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014326:	af2f      	add	r7, sp, #188	; 0xbc
 8014328:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801432a:	2c00      	cmp	r4, #0
 801432c:	da1a      	bge.n	8014364 <_svfprintf_r+0xfbc>
 801432e:	0039      	movs	r1, r7
 8014330:	2510      	movs	r5, #16
 8014332:	4264      	negs	r4, r4
 8014334:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014336:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014338:	9309      	str	r3, [sp, #36]	; 0x24
 801433a:	1c5a      	adds	r2, r3, #1
 801433c:	4b21      	ldr	r3, [pc, #132]	; (80143c4 <_svfprintf_r+0x101c>)
 801433e:	3708      	adds	r7, #8
 8014340:	600b      	str	r3, [r1, #0]
 8014342:	2c10      	cmp	r4, #16
 8014344:	dc29      	bgt.n	801439a <_svfprintf_r+0xff2>
 8014346:	604c      	str	r4, [r1, #4]
 8014348:	1824      	adds	r4, r4, r0
 801434a:	942e      	str	r4, [sp, #184]	; 0xb8
 801434c:	922d      	str	r2, [sp, #180]	; 0xb4
 801434e:	2a07      	cmp	r2, #7
 8014350:	dd08      	ble.n	8014364 <_svfprintf_r+0xfbc>
 8014352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014354:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014356:	aa2c      	add	r2, sp, #176	; 0xb0
 8014358:	f002 fac0 	bl	80168dc <__ssprint_r>
 801435c:	2800      	cmp	r0, #0
 801435e:	d000      	beq.n	8014362 <_svfprintf_r+0xfba>
 8014360:	e237      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014362:	af2f      	add	r7, sp, #188	; 0xbc
 8014364:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014366:	9b08      	ldr	r3, [sp, #32]
 8014368:	468c      	mov	ip, r1
 801436a:	603b      	str	r3, [r7, #0]
 801436c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801436e:	607b      	str	r3, [r7, #4]
 8014370:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014372:	4463      	add	r3, ip
 8014374:	932e      	str	r3, [sp, #184]	; 0xb8
 8014376:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014378:	1c5a      	adds	r2, r3, #1
 801437a:	9308      	str	r3, [sp, #32]
 801437c:	922d      	str	r2, [sp, #180]	; 0xb4
 801437e:	2a07      	cmp	r2, #7
 8014380:	dc01      	bgt.n	8014386 <_svfprintf_r+0xfde>
 8014382:	f7ff fa58 	bl	8013836 <_svfprintf_r+0x48e>
 8014386:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014388:	980a      	ldr	r0, [sp, #40]	; 0x28
 801438a:	aa2c      	add	r2, sp, #176	; 0xb0
 801438c:	f002 faa6 	bl	80168dc <__ssprint_r>
 8014390:	2800      	cmp	r0, #0
 8014392:	d000      	beq.n	8014396 <_svfprintf_r+0xfee>
 8014394:	e21d      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014396:	af2f      	add	r7, sp, #188	; 0xbc
 8014398:	e74b      	b.n	8014232 <_svfprintf_r+0xe8a>
 801439a:	3010      	adds	r0, #16
 801439c:	604d      	str	r5, [r1, #4]
 801439e:	902e      	str	r0, [sp, #184]	; 0xb8
 80143a0:	922d      	str	r2, [sp, #180]	; 0xb4
 80143a2:	2a07      	cmp	r2, #7
 80143a4:	dd08      	ble.n	80143b8 <_svfprintf_r+0x1010>
 80143a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80143ac:	f002 fa96 	bl	80168dc <__ssprint_r>
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d000      	beq.n	80143b6 <_svfprintf_r+0x100e>
 80143b4:	e20d      	b.n	80147d2 <_svfprintf_r+0x142a>
 80143b6:	af2f      	add	r7, sp, #188	; 0xbc
 80143b8:	0039      	movs	r1, r7
 80143ba:	3c10      	subs	r4, #16
 80143bc:	e7ba      	b.n	8014334 <_svfprintf_r+0xf8c>
 80143be:	46c0      	nop			; (mov r8, r8)
 80143c0:	0801aee2 	.word	0x0801aee2
 80143c4:	0801aef4 	.word	0x0801aef4
 80143c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143ca:	002c      	movs	r4, r5
 80143cc:	429d      	cmp	r5, r3
 80143ce:	dd00      	ble.n	80143d2 <_svfprintf_r+0x102a>
 80143d0:	001c      	movs	r4, r3
 80143d2:	2c00      	cmp	r4, #0
 80143d4:	dd15      	ble.n	8014402 <_svfprintf_r+0x105a>
 80143d6:	9b08      	ldr	r3, [sp, #32]
 80143d8:	607c      	str	r4, [r7, #4]
 80143da:	603b      	str	r3, [r7, #0]
 80143dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143de:	3708      	adds	r7, #8
 80143e0:	18e3      	adds	r3, r4, r3
 80143e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80143e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80143e6:	9309      	str	r3, [sp, #36]	; 0x24
 80143e8:	3301      	adds	r3, #1
 80143ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80143ec:	2b07      	cmp	r3, #7
 80143ee:	dd08      	ble.n	8014402 <_svfprintf_r+0x105a>
 80143f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80143f6:	f002 fa71 	bl	80168dc <__ssprint_r>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d000      	beq.n	8014400 <_svfprintf_r+0x1058>
 80143fe:	e1e8      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014400:	af2f      	add	r7, sp, #188	; 0xbc
 8014402:	43e3      	mvns	r3, r4
 8014404:	17db      	asrs	r3, r3, #31
 8014406:	401c      	ands	r4, r3
 8014408:	1b2c      	subs	r4, r5, r4
 801440a:	2c00      	cmp	r4, #0
 801440c:	dd1a      	ble.n	8014444 <_svfprintf_r+0x109c>
 801440e:	0039      	movs	r1, r7
 8014410:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014412:	48ca      	ldr	r0, [pc, #808]	; (801473c <_svfprintf_r+0x1394>)
 8014414:	9309      	str	r3, [sp, #36]	; 0x24
 8014416:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014418:	3301      	adds	r3, #1
 801441a:	3108      	adds	r1, #8
 801441c:	6038      	str	r0, [r7, #0]
 801441e:	2c10      	cmp	r4, #16
 8014420:	dd00      	ble.n	8014424 <_svfprintf_r+0x107c>
 8014422:	e08a      	b.n	801453a <_svfprintf_r+0x1192>
 8014424:	607c      	str	r4, [r7, #4]
 8014426:	18a4      	adds	r4, r4, r2
 8014428:	000f      	movs	r7, r1
 801442a:	942e      	str	r4, [sp, #184]	; 0xb8
 801442c:	932d      	str	r3, [sp, #180]	; 0xb4
 801442e:	2b07      	cmp	r3, #7
 8014430:	dd08      	ble.n	8014444 <_svfprintf_r+0x109c>
 8014432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014434:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014436:	aa2c      	add	r2, sp, #176	; 0xb0
 8014438:	f002 fa50 	bl	80168dc <__ssprint_r>
 801443c:	2800      	cmp	r0, #0
 801443e:	d000      	beq.n	8014442 <_svfprintf_r+0x109a>
 8014440:	e1c7      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014442:	af2f      	add	r7, sp, #188	; 0xbc
 8014444:	9b08      	ldr	r3, [sp, #32]
 8014446:	195d      	adds	r5, r3, r5
 8014448:	0573      	lsls	r3, r6, #21
 801444a:	d50d      	bpl.n	8014468 <_svfprintf_r+0x10c0>
 801444c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801444e:	2b00      	cmp	r3, #0
 8014450:	d000      	beq.n	8014454 <_svfprintf_r+0x10ac>
 8014452:	e085      	b.n	8014560 <_svfprintf_r+0x11b8>
 8014454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014456:	2b00      	cmp	r3, #0
 8014458:	d000      	beq.n	801445c <_svfprintf_r+0x10b4>
 801445a:	e084      	b.n	8014566 <_svfprintf_r+0x11be>
 801445c:	9b08      	ldr	r3, [sp, #32]
 801445e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014460:	189b      	adds	r3, r3, r2
 8014462:	429d      	cmp	r5, r3
 8014464:	d900      	bls.n	8014468 <_svfprintf_r+0x10c0>
 8014466:	001d      	movs	r5, r3
 8014468:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801446a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801446c:	4293      	cmp	r3, r2
 801446e:	db01      	blt.n	8014474 <_svfprintf_r+0x10cc>
 8014470:	07f3      	lsls	r3, r6, #31
 8014472:	d518      	bpl.n	80144a6 <_svfprintf_r+0x10fe>
 8014474:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014476:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014478:	4694      	mov	ip, r2
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801447e:	607b      	str	r3, [r7, #4]
 8014480:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014482:	3708      	adds	r7, #8
 8014484:	4463      	add	r3, ip
 8014486:	932e      	str	r3, [sp, #184]	; 0xb8
 8014488:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801448a:	9309      	str	r3, [sp, #36]	; 0x24
 801448c:	3301      	adds	r3, #1
 801448e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014490:	2b07      	cmp	r3, #7
 8014492:	dd08      	ble.n	80144a6 <_svfprintf_r+0x10fe>
 8014494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014496:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014498:	aa2c      	add	r2, sp, #176	; 0xb0
 801449a:	f002 fa1f 	bl	80168dc <__ssprint_r>
 801449e:	2800      	cmp	r0, #0
 80144a0:	d000      	beq.n	80144a4 <_svfprintf_r+0x10fc>
 80144a2:	e196      	b.n	80147d2 <_svfprintf_r+0x142a>
 80144a4:	af2f      	add	r7, sp, #188	; 0xbc
 80144a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144a8:	9b08      	ldr	r3, [sp, #32]
 80144aa:	4694      	mov	ip, r2
 80144ac:	4463      	add	r3, ip
 80144ae:	1b58      	subs	r0, r3, r5
 80144b0:	0013      	movs	r3, r2
 80144b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80144b4:	1a9c      	subs	r4, r3, r2
 80144b6:	4284      	cmp	r4, r0
 80144b8:	dd00      	ble.n	80144bc <_svfprintf_r+0x1114>
 80144ba:	0004      	movs	r4, r0
 80144bc:	2c00      	cmp	r4, #0
 80144be:	dd14      	ble.n	80144ea <_svfprintf_r+0x1142>
 80144c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144c2:	603d      	str	r5, [r7, #0]
 80144c4:	18e3      	adds	r3, r4, r3
 80144c6:	932e      	str	r3, [sp, #184]	; 0xb8
 80144c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144ca:	607c      	str	r4, [r7, #4]
 80144cc:	9308      	str	r3, [sp, #32]
 80144ce:	3301      	adds	r3, #1
 80144d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80144d2:	3708      	adds	r7, #8
 80144d4:	2b07      	cmp	r3, #7
 80144d6:	dd08      	ble.n	80144ea <_svfprintf_r+0x1142>
 80144d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80144de:	f002 f9fd 	bl	80168dc <__ssprint_r>
 80144e2:	2800      	cmp	r0, #0
 80144e4:	d000      	beq.n	80144e8 <_svfprintf_r+0x1140>
 80144e6:	e174      	b.n	80147d2 <_svfprintf_r+0x142a>
 80144e8:	af2f      	add	r7, sp, #188	; 0xbc
 80144ea:	43e3      	mvns	r3, r4
 80144ec:	17db      	asrs	r3, r3, #31
 80144ee:	401c      	ands	r4, r3
 80144f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80144f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144f4:	2510      	movs	r5, #16
 80144f6:	1a9b      	subs	r3, r3, r2
 80144f8:	1b1c      	subs	r4, r3, r4
 80144fa:	2c00      	cmp	r4, #0
 80144fc:	dc00      	bgt.n	8014500 <_svfprintf_r+0x1158>
 80144fe:	e698      	b.n	8014232 <_svfprintf_r+0xe8a>
 8014500:	0039      	movs	r1, r7
 8014502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014504:	488d      	ldr	r0, [pc, #564]	; (801473c <_svfprintf_r+0x1394>)
 8014506:	9308      	str	r3, [sp, #32]
 8014508:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801450a:	3301      	adds	r3, #1
 801450c:	3108      	adds	r1, #8
 801450e:	6038      	str	r0, [r7, #0]
 8014510:	2c10      	cmp	r4, #16
 8014512:	dc00      	bgt.n	8014516 <_svfprintf_r+0x116e>
 8014514:	e6c7      	b.n	80142a6 <_svfprintf_r+0xefe>
 8014516:	3210      	adds	r2, #16
 8014518:	607d      	str	r5, [r7, #4]
 801451a:	922e      	str	r2, [sp, #184]	; 0xb8
 801451c:	932d      	str	r3, [sp, #180]	; 0xb4
 801451e:	2b07      	cmp	r3, #7
 8014520:	dd08      	ble.n	8014534 <_svfprintf_r+0x118c>
 8014522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014524:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014526:	aa2c      	add	r2, sp, #176	; 0xb0
 8014528:	f002 f9d8 	bl	80168dc <__ssprint_r>
 801452c:	2800      	cmp	r0, #0
 801452e:	d000      	beq.n	8014532 <_svfprintf_r+0x118a>
 8014530:	e14f      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014532:	a92f      	add	r1, sp, #188	; 0xbc
 8014534:	000f      	movs	r7, r1
 8014536:	3c10      	subs	r4, #16
 8014538:	e7e2      	b.n	8014500 <_svfprintf_r+0x1158>
 801453a:	2010      	movs	r0, #16
 801453c:	1812      	adds	r2, r2, r0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	922e      	str	r2, [sp, #184]	; 0xb8
 8014542:	932d      	str	r3, [sp, #180]	; 0xb4
 8014544:	2b07      	cmp	r3, #7
 8014546:	dd08      	ble.n	801455a <_svfprintf_r+0x11b2>
 8014548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801454a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801454c:	aa2c      	add	r2, sp, #176	; 0xb0
 801454e:	f002 f9c5 	bl	80168dc <__ssprint_r>
 8014552:	2800      	cmp	r0, #0
 8014554:	d000      	beq.n	8014558 <_svfprintf_r+0x11b0>
 8014556:	e13c      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014558:	a92f      	add	r1, sp, #188	; 0xbc
 801455a:	000f      	movs	r7, r1
 801455c:	3c10      	subs	r4, #16
 801455e:	e756      	b.n	801440e <_svfprintf_r+0x1066>
 8014560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014562:	2b00      	cmp	r3, #0
 8014564:	d061      	beq.n	801462a <_svfprintf_r+0x1282>
 8014566:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014568:	3b01      	subs	r3, #1
 801456a:	9310      	str	r3, [sp, #64]	; 0x40
 801456c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801456e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014570:	4694      	mov	ip, r2
 8014572:	603b      	str	r3, [r7, #0]
 8014574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014576:	607b      	str	r3, [r7, #4]
 8014578:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801457a:	3708      	adds	r7, #8
 801457c:	4463      	add	r3, ip
 801457e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014580:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014582:	9309      	str	r3, [sp, #36]	; 0x24
 8014584:	3301      	adds	r3, #1
 8014586:	932d      	str	r3, [sp, #180]	; 0xb4
 8014588:	2b07      	cmp	r3, #7
 801458a:	dd08      	ble.n	801459e <_svfprintf_r+0x11f6>
 801458c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801458e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014590:	aa2c      	add	r2, sp, #176	; 0xb0
 8014592:	f002 f9a3 	bl	80168dc <__ssprint_r>
 8014596:	2800      	cmp	r0, #0
 8014598:	d000      	beq.n	801459c <_svfprintf_r+0x11f4>
 801459a:	e11a      	b.n	80147d2 <_svfprintf_r+0x142a>
 801459c:	af2f      	add	r7, sp, #188	; 0xbc
 801459e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145a0:	9b08      	ldr	r3, [sp, #32]
 80145a2:	189b      	adds	r3, r3, r2
 80145a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145a6:	1b5b      	subs	r3, r3, r5
 80145a8:	7814      	ldrb	r4, [r2, #0]
 80145aa:	429c      	cmp	r4, r3
 80145ac:	dd00      	ble.n	80145b0 <_svfprintf_r+0x1208>
 80145ae:	001c      	movs	r4, r3
 80145b0:	2c00      	cmp	r4, #0
 80145b2:	dd14      	ble.n	80145de <_svfprintf_r+0x1236>
 80145b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80145b6:	603d      	str	r5, [r7, #0]
 80145b8:	18e3      	adds	r3, r4, r3
 80145ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80145bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145be:	607c      	str	r4, [r7, #4]
 80145c0:	9309      	str	r3, [sp, #36]	; 0x24
 80145c2:	3301      	adds	r3, #1
 80145c4:	932d      	str	r3, [sp, #180]	; 0xb4
 80145c6:	3708      	adds	r7, #8
 80145c8:	2b07      	cmp	r3, #7
 80145ca:	dd08      	ble.n	80145de <_svfprintf_r+0x1236>
 80145cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80145d2:	f002 f983 	bl	80168dc <__ssprint_r>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d000      	beq.n	80145dc <_svfprintf_r+0x1234>
 80145da:	e0fa      	b.n	80147d2 <_svfprintf_r+0x142a>
 80145dc:	af2f      	add	r7, sp, #188	; 0xbc
 80145de:	43e3      	mvns	r3, r4
 80145e0:	17db      	asrs	r3, r3, #31
 80145e2:	401c      	ands	r4, r3
 80145e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	1b1c      	subs	r4, r3, r4
 80145ea:	2c00      	cmp	r4, #0
 80145ec:	dd19      	ble.n	8014622 <_svfprintf_r+0x127a>
 80145ee:	0039      	movs	r1, r7
 80145f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145f2:	4852      	ldr	r0, [pc, #328]	; (801473c <_svfprintf_r+0x1394>)
 80145f4:	9309      	str	r3, [sp, #36]	; 0x24
 80145f6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80145f8:	3301      	adds	r3, #1
 80145fa:	3108      	adds	r1, #8
 80145fc:	6038      	str	r0, [r7, #0]
 80145fe:	2c10      	cmp	r4, #16
 8014600:	dc1a      	bgt.n	8014638 <_svfprintf_r+0x1290>
 8014602:	607c      	str	r4, [r7, #4]
 8014604:	18a4      	adds	r4, r4, r2
 8014606:	000f      	movs	r7, r1
 8014608:	942e      	str	r4, [sp, #184]	; 0xb8
 801460a:	932d      	str	r3, [sp, #180]	; 0xb4
 801460c:	2b07      	cmp	r3, #7
 801460e:	dd08      	ble.n	8014622 <_svfprintf_r+0x127a>
 8014610:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014612:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014614:	aa2c      	add	r2, sp, #176	; 0xb0
 8014616:	f002 f961 	bl	80168dc <__ssprint_r>
 801461a:	2800      	cmp	r0, #0
 801461c:	d000      	beq.n	8014620 <_svfprintf_r+0x1278>
 801461e:	e0d8      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014620:	af2f      	add	r7, sp, #188	; 0xbc
 8014622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	18ed      	adds	r5, r5, r3
 8014628:	e710      	b.n	801444c <_svfprintf_r+0x10a4>
 801462a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801462c:	3b01      	subs	r3, #1
 801462e:	9312      	str	r3, [sp, #72]	; 0x48
 8014630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014632:	3b01      	subs	r3, #1
 8014634:	9311      	str	r3, [sp, #68]	; 0x44
 8014636:	e799      	b.n	801456c <_svfprintf_r+0x11c4>
 8014638:	2010      	movs	r0, #16
 801463a:	1812      	adds	r2, r2, r0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	922e      	str	r2, [sp, #184]	; 0xb8
 8014640:	932d      	str	r3, [sp, #180]	; 0xb4
 8014642:	2b07      	cmp	r3, #7
 8014644:	dd08      	ble.n	8014658 <_svfprintf_r+0x12b0>
 8014646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014648:	980a      	ldr	r0, [sp, #40]	; 0x28
 801464a:	aa2c      	add	r2, sp, #176	; 0xb0
 801464c:	f002 f946 	bl	80168dc <__ssprint_r>
 8014650:	2800      	cmp	r0, #0
 8014652:	d000      	beq.n	8014656 <_svfprintf_r+0x12ae>
 8014654:	e0bd      	b.n	80147d2 <_svfprintf_r+0x142a>
 8014656:	a92f      	add	r1, sp, #188	; 0xbc
 8014658:	000f      	movs	r7, r1
 801465a:	3c10      	subs	r4, #16
 801465c:	e7c7      	b.n	80145ee <_svfprintf_r+0x1246>
 801465e:	003c      	movs	r4, r7
 8014660:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014662:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014666:	9309      	str	r3, [sp, #36]	; 0x24
 8014668:	3101      	adds	r1, #1
 801466a:	3301      	adds	r3, #1
 801466c:	3408      	adds	r4, #8
 801466e:	2a01      	cmp	r2, #1
 8014670:	dc03      	bgt.n	801467a <_svfprintf_r+0x12d2>
 8014672:	2201      	movs	r2, #1
 8014674:	4216      	tst	r6, r2
 8014676:	d100      	bne.n	801467a <_svfprintf_r+0x12d2>
 8014678:	e088      	b.n	801478c <_svfprintf_r+0x13e4>
 801467a:	9a08      	ldr	r2, [sp, #32]
 801467c:	912e      	str	r1, [sp, #184]	; 0xb8
 801467e:	603a      	str	r2, [r7, #0]
 8014680:	2201      	movs	r2, #1
 8014682:	932d      	str	r3, [sp, #180]	; 0xb4
 8014684:	607a      	str	r2, [r7, #4]
 8014686:	2b07      	cmp	r3, #7
 8014688:	dd08      	ble.n	801469c <_svfprintf_r+0x12f4>
 801468a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801468c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801468e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014690:	f002 f924 	bl	80168dc <__ssprint_r>
 8014694:	2800      	cmp	r0, #0
 8014696:	d000      	beq.n	801469a <_svfprintf_r+0x12f2>
 8014698:	e09b      	b.n	80147d2 <_svfprintf_r+0x142a>
 801469a:	ac2f      	add	r4, sp, #188	; 0xbc
 801469c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801469e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80146a0:	4694      	mov	ip, r2
 80146a2:	6023      	str	r3, [r4, #0]
 80146a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80146a6:	6063      	str	r3, [r4, #4]
 80146a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80146aa:	3408      	adds	r4, #8
 80146ac:	4463      	add	r3, ip
 80146ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80146b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146b2:	9309      	str	r3, [sp, #36]	; 0x24
 80146b4:	3301      	adds	r3, #1
 80146b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80146b8:	2b07      	cmp	r3, #7
 80146ba:	dd08      	ble.n	80146ce <_svfprintf_r+0x1326>
 80146bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80146c2:	f002 f90b 	bl	80168dc <__ssprint_r>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d000      	beq.n	80146cc <_svfprintf_r+0x1324>
 80146ca:	e082      	b.n	80147d2 <_svfprintf_r+0x142a>
 80146cc:	ac2f      	add	r4, sp, #188	; 0xbc
 80146ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146d0:	2200      	movs	r2, #0
 80146d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80146d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80146d6:	1e5d      	subs	r5, r3, #1
 80146d8:	2300      	movs	r3, #0
 80146da:	f7eb febf 	bl	800045c <__aeabi_dcmpeq>
 80146de:	2800      	cmp	r0, #0
 80146e0:	d12e      	bne.n	8014740 <_svfprintf_r+0x1398>
 80146e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80146e4:	9808      	ldr	r0, [sp, #32]
 80146e6:	9309      	str	r3, [sp, #36]	; 0x24
 80146e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146ec:	1c59      	adds	r1, r3, #1
 80146ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80146f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f2:	3001      	adds	r0, #1
 80146f4:	3b01      	subs	r3, #1
 80146f6:	189b      	adds	r3, r3, r2
 80146f8:	6020      	str	r0, [r4, #0]
 80146fa:	6065      	str	r5, [r4, #4]
 80146fc:	932e      	str	r3, [sp, #184]	; 0xb8
 80146fe:	912d      	str	r1, [sp, #180]	; 0xb4
 8014700:	3408      	adds	r4, #8
 8014702:	2907      	cmp	r1, #7
 8014704:	dd07      	ble.n	8014716 <_svfprintf_r+0x136e>
 8014706:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014708:	980a      	ldr	r0, [sp, #40]	; 0x28
 801470a:	aa2c      	add	r2, sp, #176	; 0xb0
 801470c:	f002 f8e6 	bl	80168dc <__ssprint_r>
 8014710:	2800      	cmp	r0, #0
 8014712:	d15e      	bne.n	80147d2 <_svfprintf_r+0x142a>
 8014714:	ac2f      	add	r4, sp, #188	; 0xbc
 8014716:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014718:	ab28      	add	r3, sp, #160	; 0xa0
 801471a:	4694      	mov	ip, r2
 801471c:	6023      	str	r3, [r4, #0]
 801471e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014720:	6063      	str	r3, [r4, #4]
 8014722:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014724:	4463      	add	r3, ip
 8014726:	932e      	str	r3, [sp, #184]	; 0xb8
 8014728:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801472a:	9308      	str	r3, [sp, #32]
 801472c:	3301      	adds	r3, #1
 801472e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014730:	2b07      	cmp	r3, #7
 8014732:	dd00      	ble.n	8014736 <_svfprintf_r+0x138e>
 8014734:	e627      	b.n	8014386 <_svfprintf_r+0xfde>
 8014736:	3408      	adds	r4, #8
 8014738:	0027      	movs	r7, r4
 801473a:	e57a      	b.n	8014232 <_svfprintf_r+0xe8a>
 801473c:	0801aef4 	.word	0x0801aef4
 8014740:	2710      	movs	r7, #16
 8014742:	2d00      	cmp	r5, #0
 8014744:	dde7      	ble.n	8014716 <_svfprintf_r+0x136e>
 8014746:	0021      	movs	r1, r4
 8014748:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801474a:	4857      	ldr	r0, [pc, #348]	; (80148a8 <_svfprintf_r+0x1500>)
 801474c:	9308      	str	r3, [sp, #32]
 801474e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014750:	3301      	adds	r3, #1
 8014752:	3108      	adds	r1, #8
 8014754:	6020      	str	r0, [r4, #0]
 8014756:	2d10      	cmp	r5, #16
 8014758:	dc07      	bgt.n	801476a <_svfprintf_r+0x13c2>
 801475a:	6065      	str	r5, [r4, #4]
 801475c:	000c      	movs	r4, r1
 801475e:	18ad      	adds	r5, r5, r2
 8014760:	952e      	str	r5, [sp, #184]	; 0xb8
 8014762:	932d      	str	r3, [sp, #180]	; 0xb4
 8014764:	2b07      	cmp	r3, #7
 8014766:	ddd6      	ble.n	8014716 <_svfprintf_r+0x136e>
 8014768:	e7cd      	b.n	8014706 <_svfprintf_r+0x135e>
 801476a:	3210      	adds	r2, #16
 801476c:	6067      	str	r7, [r4, #4]
 801476e:	922e      	str	r2, [sp, #184]	; 0xb8
 8014770:	932d      	str	r3, [sp, #180]	; 0xb4
 8014772:	2b07      	cmp	r3, #7
 8014774:	dd07      	ble.n	8014786 <_svfprintf_r+0x13de>
 8014776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014778:	980a      	ldr	r0, [sp, #40]	; 0x28
 801477a:	aa2c      	add	r2, sp, #176	; 0xb0
 801477c:	f002 f8ae 	bl	80168dc <__ssprint_r>
 8014780:	2800      	cmp	r0, #0
 8014782:	d126      	bne.n	80147d2 <_svfprintf_r+0x142a>
 8014784:	a92f      	add	r1, sp, #188	; 0xbc
 8014786:	000c      	movs	r4, r1
 8014788:	3d10      	subs	r5, #16
 801478a:	e7dc      	b.n	8014746 <_svfprintf_r+0x139e>
 801478c:	9808      	ldr	r0, [sp, #32]
 801478e:	912e      	str	r1, [sp, #184]	; 0xb8
 8014790:	c705      	stmia	r7!, {r0, r2}
 8014792:	932d      	str	r3, [sp, #180]	; 0xb4
 8014794:	e7e6      	b.n	8014764 <_svfprintf_r+0x13bc>
 8014796:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014798:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801479a:	2510      	movs	r5, #16
 801479c:	1a9c      	subs	r4, r3, r2
 801479e:	2c00      	cmp	r4, #0
 80147a0:	dc00      	bgt.n	80147a4 <_svfprintf_r+0x13fc>
 80147a2:	e549      	b.n	8014238 <_svfprintf_r+0xe90>
 80147a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147a6:	4941      	ldr	r1, [pc, #260]	; (80148ac <_svfprintf_r+0x1504>)
 80147a8:	9308      	str	r3, [sp, #32]
 80147aa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80147ac:	3301      	adds	r3, #1
 80147ae:	6039      	str	r1, [r7, #0]
 80147b0:	2c10      	cmp	r4, #16
 80147b2:	dc19      	bgt.n	80147e8 <_svfprintf_r+0x1440>
 80147b4:	607c      	str	r4, [r7, #4]
 80147b6:	1914      	adds	r4, r2, r4
 80147b8:	942e      	str	r4, [sp, #184]	; 0xb8
 80147ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80147bc:	2b07      	cmp	r3, #7
 80147be:	dc00      	bgt.n	80147c2 <_svfprintf_r+0x141a>
 80147c0:	e53a      	b.n	8014238 <_svfprintf_r+0xe90>
 80147c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80147c8:	f002 f888 	bl	80168dc <__ssprint_r>
 80147cc:	2800      	cmp	r0, #0
 80147ce:	d100      	bne.n	80147d2 <_svfprintf_r+0x142a>
 80147d0:	e532      	b.n	8014238 <_svfprintf_r+0xe90>
 80147d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d101      	bne.n	80147dc <_svfprintf_r+0x1434>
 80147d8:	f7ff f8ec 	bl	80139b4 <_svfprintf_r+0x60c>
 80147dc:	0019      	movs	r1, r3
 80147de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147e0:	f000 ff66 	bl	80156b0 <_free_r>
 80147e4:	f7ff f8e6 	bl	80139b4 <_svfprintf_r+0x60c>
 80147e8:	3210      	adds	r2, #16
 80147ea:	607d      	str	r5, [r7, #4]
 80147ec:	922e      	str	r2, [sp, #184]	; 0xb8
 80147ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80147f0:	3708      	adds	r7, #8
 80147f2:	2b07      	cmp	r3, #7
 80147f4:	dd07      	ble.n	8014806 <_svfprintf_r+0x145e>
 80147f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80147fc:	f002 f86e 	bl	80168dc <__ssprint_r>
 8014800:	2800      	cmp	r0, #0
 8014802:	d1e6      	bne.n	80147d2 <_svfprintf_r+0x142a>
 8014804:	af2f      	add	r7, sp, #188	; 0xbc
 8014806:	3c10      	subs	r4, #16
 8014808:	e7cc      	b.n	80147a4 <_svfprintf_r+0x13fc>
 801480a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801480c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801480e:	f000 ff4f 	bl	80156b0 <_free_r>
 8014812:	e52b      	b.n	801426c <_svfprintf_r+0xec4>
 8014814:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014816:	9306      	str	r3, [sp, #24]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d101      	bne.n	8014820 <_svfprintf_r+0x1478>
 801481c:	f7ff f8ca 	bl	80139b4 <_svfprintf_r+0x60c>
 8014820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014822:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014824:	aa2c      	add	r2, sp, #176	; 0xb0
 8014826:	f002 f859 	bl	80168dc <__ssprint_r>
 801482a:	f7ff f8c3 	bl	80139b4 <_svfprintf_r+0x60c>
 801482e:	0035      	movs	r5, r6
 8014830:	2a00      	cmp	r2, #0
 8014832:	d101      	bne.n	8014838 <_svfprintf_r+0x1490>
 8014834:	f7ff f832 	bl	801389c <_svfprintf_r+0x4f4>
 8014838:	2b01      	cmp	r3, #1
 801483a:	d101      	bne.n	8014840 <_svfprintf_r+0x1498>
 801483c:	f7ff fbdf 	bl	8013ffe <_svfprintf_r+0xc56>
 8014840:	2b02      	cmp	r3, #2
 8014842:	d100      	bne.n	8014846 <_svfprintf_r+0x149e>
 8014844:	e430      	b.n	80140a8 <_svfprintf_r+0xd00>
 8014846:	2607      	movs	r6, #7
 8014848:	ab58      	add	r3, sp, #352	; 0x160
 801484a:	9308      	str	r3, [sp, #32]
 801484c:	9908      	ldr	r1, [sp, #32]
 801484e:	000b      	movs	r3, r1
 8014850:	3b01      	subs	r3, #1
 8014852:	9308      	str	r3, [sp, #32]
 8014854:	9b06      	ldr	r3, [sp, #24]
 8014856:	9a08      	ldr	r2, [sp, #32]
 8014858:	4033      	ands	r3, r6
 801485a:	3330      	adds	r3, #48	; 0x30
 801485c:	7013      	strb	r3, [r2, #0]
 801485e:	9a07      	ldr	r2, [sp, #28]
 8014860:	0754      	lsls	r4, r2, #29
 8014862:	9a06      	ldr	r2, [sp, #24]
 8014864:	08d0      	lsrs	r0, r2, #3
 8014866:	9a07      	ldr	r2, [sp, #28]
 8014868:	4304      	orrs	r4, r0
 801486a:	08d2      	lsrs	r2, r2, #3
 801486c:	9207      	str	r2, [sp, #28]
 801486e:	0022      	movs	r2, r4
 8014870:	9807      	ldr	r0, [sp, #28]
 8014872:	9406      	str	r4, [sp, #24]
 8014874:	4302      	orrs	r2, r0
 8014876:	d1e9      	bne.n	801484c <_svfprintf_r+0x14a4>
 8014878:	07ea      	lsls	r2, r5, #31
 801487a:	d507      	bpl.n	801488c <_svfprintf_r+0x14e4>
 801487c:	2b30      	cmp	r3, #48	; 0x30
 801487e:	d005      	beq.n	801488c <_svfprintf_r+0x14e4>
 8014880:	2330      	movs	r3, #48	; 0x30
 8014882:	9808      	ldr	r0, [sp, #32]
 8014884:	3801      	subs	r0, #1
 8014886:	7003      	strb	r3, [r0, #0]
 8014888:	1e8b      	subs	r3, r1, #2
 801488a:	9308      	str	r3, [sp, #32]
 801488c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801488e:	9a08      	ldr	r2, [sp, #32]
 8014890:	9319      	str	r3, [sp, #100]	; 0x64
 8014892:	ab58      	add	r3, sp, #352	; 0x160
 8014894:	1a9b      	subs	r3, r3, r2
 8014896:	9309      	str	r3, [sp, #36]	; 0x24
 8014898:	2300      	movs	r3, #0
 801489a:	002e      	movs	r6, r5
 801489c:	930c      	str	r3, [sp, #48]	; 0x30
 801489e:	001d      	movs	r5, r3
 80148a0:	9310      	str	r3, [sp, #64]	; 0x40
 80148a2:	9311      	str	r3, [sp, #68]	; 0x44
 80148a4:	f7fe feee 	bl	8013684 <_svfprintf_r+0x2dc>
 80148a8:	0801aef4 	.word	0x0801aef4
 80148ac:	0801aee4 	.word	0x0801aee4

080148b0 <sysconf>:
 80148b0:	2380      	movs	r3, #128	; 0x80
 80148b2:	b510      	push	{r4, lr}
 80148b4:	015b      	lsls	r3, r3, #5
 80148b6:	2808      	cmp	r0, #8
 80148b8:	d004      	beq.n	80148c4 <sysconf+0x14>
 80148ba:	f000 fe8b 	bl	80155d4 <__errno>
 80148be:	2316      	movs	r3, #22
 80148c0:	6003      	str	r3, [r0, #0]
 80148c2:	3b17      	subs	r3, #23
 80148c4:	0018      	movs	r0, r3
 80148c6:	bd10      	pop	{r4, pc}

080148c8 <register_fini>:
 80148c8:	4b03      	ldr	r3, [pc, #12]	; (80148d8 <register_fini+0x10>)
 80148ca:	b510      	push	{r4, lr}
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <register_fini+0xe>
 80148d0:	4802      	ldr	r0, [pc, #8]	; (80148dc <register_fini+0x14>)
 80148d2:	f000 f805 	bl	80148e0 <atexit>
 80148d6:	bd10      	pop	{r4, pc}
 80148d8:	00000000 	.word	0x00000000
 80148dc:	080155e1 	.word	0x080155e1

080148e0 <atexit>:
 80148e0:	2300      	movs	r3, #0
 80148e2:	b510      	push	{r4, lr}
 80148e4:	0001      	movs	r1, r0
 80148e6:	001a      	movs	r2, r3
 80148e8:	0018      	movs	r0, r3
 80148ea:	f002 f885 	bl	80169f8 <__register_exitproc>
 80148ee:	bd10      	pop	{r4, pc}

080148f0 <quorem>:
 80148f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148f2:	0006      	movs	r6, r0
 80148f4:	690d      	ldr	r5, [r1, #16]
 80148f6:	6933      	ldr	r3, [r6, #16]
 80148f8:	b087      	sub	sp, #28
 80148fa:	2000      	movs	r0, #0
 80148fc:	9102      	str	r1, [sp, #8]
 80148fe:	42ab      	cmp	r3, r5
 8014900:	db6b      	blt.n	80149da <quorem+0xea>
 8014902:	000b      	movs	r3, r1
 8014904:	3d01      	subs	r5, #1
 8014906:	00ac      	lsls	r4, r5, #2
 8014908:	3314      	adds	r3, #20
 801490a:	9305      	str	r3, [sp, #20]
 801490c:	191b      	adds	r3, r3, r4
 801490e:	9303      	str	r3, [sp, #12]
 8014910:	0033      	movs	r3, r6
 8014912:	3314      	adds	r3, #20
 8014914:	9301      	str	r3, [sp, #4]
 8014916:	191c      	adds	r4, r3, r4
 8014918:	9b03      	ldr	r3, [sp, #12]
 801491a:	6827      	ldr	r7, [r4, #0]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	0038      	movs	r0, r7
 8014920:	9300      	str	r3, [sp, #0]
 8014922:	3301      	adds	r3, #1
 8014924:	0019      	movs	r1, r3
 8014926:	9304      	str	r3, [sp, #16]
 8014928:	f7eb fc12 	bl	8000150 <__udivsi3>
 801492c:	9b04      	ldr	r3, [sp, #16]
 801492e:	9000      	str	r0, [sp, #0]
 8014930:	429f      	cmp	r7, r3
 8014932:	d329      	bcc.n	8014988 <quorem+0x98>
 8014934:	2300      	movs	r3, #0
 8014936:	469c      	mov	ip, r3
 8014938:	9801      	ldr	r0, [sp, #4]
 801493a:	9f05      	ldr	r7, [sp, #20]
 801493c:	9304      	str	r3, [sp, #16]
 801493e:	cf08      	ldmia	r7!, {r3}
 8014940:	9a00      	ldr	r2, [sp, #0]
 8014942:	b299      	uxth	r1, r3
 8014944:	4351      	muls	r1, r2
 8014946:	0c1b      	lsrs	r3, r3, #16
 8014948:	4353      	muls	r3, r2
 801494a:	4461      	add	r1, ip
 801494c:	0c0a      	lsrs	r2, r1, #16
 801494e:	189b      	adds	r3, r3, r2
 8014950:	0c1a      	lsrs	r2, r3, #16
 8014952:	9305      	str	r3, [sp, #20]
 8014954:	6803      	ldr	r3, [r0, #0]
 8014956:	4694      	mov	ip, r2
 8014958:	b29a      	uxth	r2, r3
 801495a:	9b04      	ldr	r3, [sp, #16]
 801495c:	b289      	uxth	r1, r1
 801495e:	18d2      	adds	r2, r2, r3
 8014960:	6803      	ldr	r3, [r0, #0]
 8014962:	1a52      	subs	r2, r2, r1
 8014964:	0c19      	lsrs	r1, r3, #16
 8014966:	466b      	mov	r3, sp
 8014968:	8a9b      	ldrh	r3, [r3, #20]
 801496a:	1acb      	subs	r3, r1, r3
 801496c:	1411      	asrs	r1, r2, #16
 801496e:	185b      	adds	r3, r3, r1
 8014970:	1419      	asrs	r1, r3, #16
 8014972:	b292      	uxth	r2, r2
 8014974:	041b      	lsls	r3, r3, #16
 8014976:	431a      	orrs	r2, r3
 8014978:	9b03      	ldr	r3, [sp, #12]
 801497a:	9104      	str	r1, [sp, #16]
 801497c:	c004      	stmia	r0!, {r2}
 801497e:	42bb      	cmp	r3, r7
 8014980:	d2dd      	bcs.n	801493e <quorem+0x4e>
 8014982:	6823      	ldr	r3, [r4, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d02e      	beq.n	80149e6 <quorem+0xf6>
 8014988:	0030      	movs	r0, r6
 801498a:	9902      	ldr	r1, [sp, #8]
 801498c:	f001 fd76 	bl	801647c <__mcmp>
 8014990:	2800      	cmp	r0, #0
 8014992:	db21      	blt.n	80149d8 <quorem+0xe8>
 8014994:	0030      	movs	r0, r6
 8014996:	2400      	movs	r4, #0
 8014998:	9b00      	ldr	r3, [sp, #0]
 801499a:	9902      	ldr	r1, [sp, #8]
 801499c:	3301      	adds	r3, #1
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	3014      	adds	r0, #20
 80149a2:	3114      	adds	r1, #20
 80149a4:	6802      	ldr	r2, [r0, #0]
 80149a6:	c908      	ldmia	r1!, {r3}
 80149a8:	b292      	uxth	r2, r2
 80149aa:	1914      	adds	r4, r2, r4
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	1aa2      	subs	r2, r4, r2
 80149b0:	6804      	ldr	r4, [r0, #0]
 80149b2:	0c1b      	lsrs	r3, r3, #16
 80149b4:	0c24      	lsrs	r4, r4, #16
 80149b6:	1ae3      	subs	r3, r4, r3
 80149b8:	1414      	asrs	r4, r2, #16
 80149ba:	191b      	adds	r3, r3, r4
 80149bc:	141c      	asrs	r4, r3, #16
 80149be:	b292      	uxth	r2, r2
 80149c0:	041b      	lsls	r3, r3, #16
 80149c2:	4313      	orrs	r3, r2
 80149c4:	c008      	stmia	r0!, {r3}
 80149c6:	9b03      	ldr	r3, [sp, #12]
 80149c8:	428b      	cmp	r3, r1
 80149ca:	d2eb      	bcs.n	80149a4 <quorem+0xb4>
 80149cc:	9a01      	ldr	r2, [sp, #4]
 80149ce:	00ab      	lsls	r3, r5, #2
 80149d0:	18d3      	adds	r3, r2, r3
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	2a00      	cmp	r2, #0
 80149d6:	d010      	beq.n	80149fa <quorem+0x10a>
 80149d8:	9800      	ldr	r0, [sp, #0]
 80149da:	b007      	add	sp, #28
 80149dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d104      	bne.n	80149ee <quorem+0xfe>
 80149e4:	3d01      	subs	r5, #1
 80149e6:	9b01      	ldr	r3, [sp, #4]
 80149e8:	3c04      	subs	r4, #4
 80149ea:	42a3      	cmp	r3, r4
 80149ec:	d3f7      	bcc.n	80149de <quorem+0xee>
 80149ee:	6135      	str	r5, [r6, #16]
 80149f0:	e7ca      	b.n	8014988 <quorem+0x98>
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	2a00      	cmp	r2, #0
 80149f6:	d104      	bne.n	8014a02 <quorem+0x112>
 80149f8:	3d01      	subs	r5, #1
 80149fa:	9a01      	ldr	r2, [sp, #4]
 80149fc:	3b04      	subs	r3, #4
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d3f7      	bcc.n	80149f2 <quorem+0x102>
 8014a02:	6135      	str	r5, [r6, #16]
 8014a04:	e7e8      	b.n	80149d8 <quorem+0xe8>
	...

08014a08 <_dtoa_r>:
 8014a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a0a:	0014      	movs	r4, r2
 8014a0c:	001d      	movs	r5, r3
 8014a0e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014a10:	b09d      	sub	sp, #116	; 0x74
 8014a12:	940a      	str	r4, [sp, #40]	; 0x28
 8014a14:	950b      	str	r5, [sp, #44]	; 0x2c
 8014a16:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8014a18:	9003      	str	r0, [sp, #12]
 8014a1a:	2900      	cmp	r1, #0
 8014a1c:	d009      	beq.n	8014a32 <_dtoa_r+0x2a>
 8014a1e:	2301      	movs	r3, #1
 8014a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a22:	4093      	lsls	r3, r2
 8014a24:	604a      	str	r2, [r1, #4]
 8014a26:	608b      	str	r3, [r1, #8]
 8014a28:	f001 face 	bl	8015fc8 <_Bfree>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	9a03      	ldr	r2, [sp, #12]
 8014a30:	6413      	str	r3, [r2, #64]	; 0x40
 8014a32:	2d00      	cmp	r5, #0
 8014a34:	da1f      	bge.n	8014a76 <_dtoa_r+0x6e>
 8014a36:	2301      	movs	r3, #1
 8014a38:	6033      	str	r3, [r6, #0]
 8014a3a:	006b      	lsls	r3, r5, #1
 8014a3c:	085b      	lsrs	r3, r3, #1
 8014a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014a42:	4bb9      	ldr	r3, [pc, #740]	; (8014d28 <_dtoa_r+0x320>)
 8014a44:	003a      	movs	r2, r7
 8014a46:	9318      	str	r3, [sp, #96]	; 0x60
 8014a48:	401a      	ands	r2, r3
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d116      	bne.n	8014a7c <_dtoa_r+0x74>
 8014a4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014a50:	4bb6      	ldr	r3, [pc, #728]	; (8014d2c <_dtoa_r+0x324>)
 8014a52:	6013      	str	r3, [r2, #0]
 8014a54:	033a      	lsls	r2, r7, #12
 8014a56:	0b12      	lsrs	r2, r2, #12
 8014a58:	4314      	orrs	r4, r2
 8014a5a:	d101      	bne.n	8014a60 <_dtoa_r+0x58>
 8014a5c:	f000 fda4 	bl	80155a8 <_dtoa_r+0xba0>
 8014a60:	48b3      	ldr	r0, [pc, #716]	; (8014d30 <_dtoa_r+0x328>)
 8014a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014a64:	9005      	str	r0, [sp, #20]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d002      	beq.n	8014a70 <_dtoa_r+0x68>
 8014a6a:	4bb2      	ldr	r3, [pc, #712]	; (8014d34 <_dtoa_r+0x32c>)
 8014a6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a6e:	6013      	str	r3, [r2, #0]
 8014a70:	9805      	ldr	r0, [sp, #20]
 8014a72:	b01d      	add	sp, #116	; 0x74
 8014a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a76:	2300      	movs	r3, #0
 8014a78:	6033      	str	r3, [r6, #0]
 8014a7a:	e7e1      	b.n	8014a40 <_dtoa_r+0x38>
 8014a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a80:	9210      	str	r2, [sp, #64]	; 0x40
 8014a82:	9311      	str	r3, [sp, #68]	; 0x44
 8014a84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014a86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014a88:	2200      	movs	r2, #0
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	f7eb fce6 	bl	800045c <__aeabi_dcmpeq>
 8014a90:	1e06      	subs	r6, r0, #0
 8014a92:	d00b      	beq.n	8014aac <_dtoa_r+0xa4>
 8014a94:	2301      	movs	r3, #1
 8014a96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014a98:	6013      	str	r3, [r2, #0]
 8014a9a:	4ba7      	ldr	r3, [pc, #668]	; (8014d38 <_dtoa_r+0x330>)
 8014a9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a9e:	9305      	str	r3, [sp, #20]
 8014aa0:	2a00      	cmp	r2, #0
 8014aa2:	d0e5      	beq.n	8014a70 <_dtoa_r+0x68>
 8014aa4:	4aa5      	ldr	r2, [pc, #660]	; (8014d3c <_dtoa_r+0x334>)
 8014aa6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014aa8:	600a      	str	r2, [r1, #0]
 8014aaa:	e7e1      	b.n	8014a70 <_dtoa_r+0x68>
 8014aac:	ab1a      	add	r3, sp, #104	; 0x68
 8014aae:	9301      	str	r3, [sp, #4]
 8014ab0:	ab1b      	add	r3, sp, #108	; 0x6c
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	9803      	ldr	r0, [sp, #12]
 8014ab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014aba:	f001 fe07 	bl	80166cc <__d2b>
 8014abe:	007b      	lsls	r3, r7, #1
 8014ac0:	9004      	str	r0, [sp, #16]
 8014ac2:	0d5b      	lsrs	r3, r3, #21
 8014ac4:	d100      	bne.n	8014ac8 <_dtoa_r+0xc0>
 8014ac6:	e07c      	b.n	8014bc2 <_dtoa_r+0x1ba>
 8014ac8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014aca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014acc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ace:	4c9c      	ldr	r4, [pc, #624]	; (8014d40 <_dtoa_r+0x338>)
 8014ad0:	0312      	lsls	r2, r2, #12
 8014ad2:	0b12      	lsrs	r2, r2, #12
 8014ad4:	4314      	orrs	r4, r2
 8014ad6:	0021      	movs	r1, r4
 8014ad8:	4a9a      	ldr	r2, [pc, #616]	; (8014d44 <_dtoa_r+0x33c>)
 8014ada:	9616      	str	r6, [sp, #88]	; 0x58
 8014adc:	189f      	adds	r7, r3, r2
 8014ade:	2200      	movs	r2, #0
 8014ae0:	4b99      	ldr	r3, [pc, #612]	; (8014d48 <_dtoa_r+0x340>)
 8014ae2:	f7ed f941 	bl	8001d68 <__aeabi_dsub>
 8014ae6:	4a99      	ldr	r2, [pc, #612]	; (8014d4c <_dtoa_r+0x344>)
 8014ae8:	4b99      	ldr	r3, [pc, #612]	; (8014d50 <_dtoa_r+0x348>)
 8014aea:	f7ec fed1 	bl	8001890 <__aeabi_dmul>
 8014aee:	4a99      	ldr	r2, [pc, #612]	; (8014d54 <_dtoa_r+0x34c>)
 8014af0:	4b99      	ldr	r3, [pc, #612]	; (8014d58 <_dtoa_r+0x350>)
 8014af2:	f7eb ff5d 	bl	80009b0 <__aeabi_dadd>
 8014af6:	0004      	movs	r4, r0
 8014af8:	0038      	movs	r0, r7
 8014afa:	000d      	movs	r5, r1
 8014afc:	f7ed fd1a 	bl	8002534 <__aeabi_i2d>
 8014b00:	4a96      	ldr	r2, [pc, #600]	; (8014d5c <_dtoa_r+0x354>)
 8014b02:	4b97      	ldr	r3, [pc, #604]	; (8014d60 <_dtoa_r+0x358>)
 8014b04:	f7ec fec4 	bl	8001890 <__aeabi_dmul>
 8014b08:	0002      	movs	r2, r0
 8014b0a:	000b      	movs	r3, r1
 8014b0c:	0020      	movs	r0, r4
 8014b0e:	0029      	movs	r1, r5
 8014b10:	f7eb ff4e 	bl	80009b0 <__aeabi_dadd>
 8014b14:	0004      	movs	r4, r0
 8014b16:	000d      	movs	r5, r1
 8014b18:	f7ed fcd6 	bl	80024c8 <__aeabi_d2iz>
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	9002      	str	r0, [sp, #8]
 8014b20:	2300      	movs	r3, #0
 8014b22:	0020      	movs	r0, r4
 8014b24:	0029      	movs	r1, r5
 8014b26:	f7eb fc9f 	bl	8000468 <__aeabi_dcmplt>
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d00b      	beq.n	8014b46 <_dtoa_r+0x13e>
 8014b2e:	9802      	ldr	r0, [sp, #8]
 8014b30:	f7ed fd00 	bl	8002534 <__aeabi_i2d>
 8014b34:	002b      	movs	r3, r5
 8014b36:	0022      	movs	r2, r4
 8014b38:	f7eb fc90 	bl	800045c <__aeabi_dcmpeq>
 8014b3c:	4243      	negs	r3, r0
 8014b3e:	4158      	adcs	r0, r3
 8014b40:	9b02      	ldr	r3, [sp, #8]
 8014b42:	1a1b      	subs	r3, r3, r0
 8014b44:	9302      	str	r3, [sp, #8]
 8014b46:	2301      	movs	r3, #1
 8014b48:	9314      	str	r3, [sp, #80]	; 0x50
 8014b4a:	9b02      	ldr	r3, [sp, #8]
 8014b4c:	2b16      	cmp	r3, #22
 8014b4e:	d80f      	bhi.n	8014b70 <_dtoa_r+0x168>
 8014b50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014b52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014b54:	00da      	lsls	r2, r3, #3
 8014b56:	4b83      	ldr	r3, [pc, #524]	; (8014d64 <_dtoa_r+0x35c>)
 8014b58:	189b      	adds	r3, r3, r2
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	f7eb fc83 	bl	8000468 <__aeabi_dcmplt>
 8014b62:	2800      	cmp	r0, #0
 8014b64:	d049      	beq.n	8014bfa <_dtoa_r+0x1f2>
 8014b66:	9b02      	ldr	r3, [sp, #8]
 8014b68:	3b01      	subs	r3, #1
 8014b6a:	9302      	str	r3, [sp, #8]
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	9314      	str	r3, [sp, #80]	; 0x50
 8014b70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014b72:	1bdf      	subs	r7, r3, r7
 8014b74:	2300      	movs	r3, #0
 8014b76:	9309      	str	r3, [sp, #36]	; 0x24
 8014b78:	003b      	movs	r3, r7
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8014b7e:	d504      	bpl.n	8014b8a <_dtoa_r+0x182>
 8014b80:	2301      	movs	r3, #1
 8014b82:	1bdb      	subs	r3, r3, r7
 8014b84:	9309      	str	r3, [sp, #36]	; 0x24
 8014b86:	2300      	movs	r3, #0
 8014b88:	930d      	str	r3, [sp, #52]	; 0x34
 8014b8a:	9b02      	ldr	r3, [sp, #8]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	db36      	blt.n	8014bfe <_dtoa_r+0x1f6>
 8014b90:	9a02      	ldr	r2, [sp, #8]
 8014b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b94:	4694      	mov	ip, r2
 8014b96:	4463      	add	r3, ip
 8014b98:	930d      	str	r3, [sp, #52]	; 0x34
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8014b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8014ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ba2:	2401      	movs	r4, #1
 8014ba4:	2b09      	cmp	r3, #9
 8014ba6:	d865      	bhi.n	8014c74 <_dtoa_r+0x26c>
 8014ba8:	2b05      	cmp	r3, #5
 8014baa:	dd02      	ble.n	8014bb2 <_dtoa_r+0x1aa>
 8014bac:	2400      	movs	r4, #0
 8014bae:	3b04      	subs	r3, #4
 8014bb0:	9322      	str	r3, [sp, #136]	; 0x88
 8014bb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014bb4:	1e98      	subs	r0, r3, #2
 8014bb6:	2803      	cmp	r0, #3
 8014bb8:	d865      	bhi.n	8014c86 <_dtoa_r+0x27e>
 8014bba:	f7eb fab5 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014bbe:	3629      	.short	0x3629
 8014bc0:	5934      	.short	0x5934
 8014bc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014bc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014bc6:	189e      	adds	r6, r3, r2
 8014bc8:	4b67      	ldr	r3, [pc, #412]	; (8014d68 <_dtoa_r+0x360>)
 8014bca:	18f2      	adds	r2, r6, r3
 8014bcc:	2a20      	cmp	r2, #32
 8014bce:	dd0f      	ble.n	8014bf0 <_dtoa_r+0x1e8>
 8014bd0:	2340      	movs	r3, #64	; 0x40
 8014bd2:	0038      	movs	r0, r7
 8014bd4:	1a9b      	subs	r3, r3, r2
 8014bd6:	4098      	lsls	r0, r3
 8014bd8:	4b64      	ldr	r3, [pc, #400]	; (8014d6c <_dtoa_r+0x364>)
 8014bda:	18f3      	adds	r3, r6, r3
 8014bdc:	40dc      	lsrs	r4, r3
 8014bde:	4320      	orrs	r0, r4
 8014be0:	f7ed fcd8 	bl	8002594 <__aeabi_ui2d>
 8014be4:	2301      	movs	r3, #1
 8014be6:	4c62      	ldr	r4, [pc, #392]	; (8014d70 <_dtoa_r+0x368>)
 8014be8:	1e77      	subs	r7, r6, #1
 8014bea:	1909      	adds	r1, r1, r4
 8014bec:	9316      	str	r3, [sp, #88]	; 0x58
 8014bee:	e776      	b.n	8014ade <_dtoa_r+0xd6>
 8014bf0:	2320      	movs	r3, #32
 8014bf2:	0020      	movs	r0, r4
 8014bf4:	1a9b      	subs	r3, r3, r2
 8014bf6:	4098      	lsls	r0, r3
 8014bf8:	e7f2      	b.n	8014be0 <_dtoa_r+0x1d8>
 8014bfa:	9014      	str	r0, [sp, #80]	; 0x50
 8014bfc:	e7b8      	b.n	8014b70 <_dtoa_r+0x168>
 8014bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c00:	9a02      	ldr	r2, [sp, #8]
 8014c02:	1a9b      	subs	r3, r3, r2
 8014c04:	9309      	str	r3, [sp, #36]	; 0x24
 8014c06:	4253      	negs	r3, r2
 8014c08:	930e      	str	r3, [sp, #56]	; 0x38
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c0e:	e7c7      	b.n	8014ba0 <_dtoa_r+0x198>
 8014c10:	2300      	movs	r3, #0
 8014c12:	9312      	str	r3, [sp, #72]	; 0x48
 8014c14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	dc39      	bgt.n	8014c8e <_dtoa_r+0x286>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	001a      	movs	r2, r3
 8014c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8014c20:	9308      	str	r3, [sp, #32]
 8014c22:	9223      	str	r2, [sp, #140]	; 0x8c
 8014c24:	e00d      	b.n	8014c42 <_dtoa_r+0x23a>
 8014c26:	2301      	movs	r3, #1
 8014c28:	e7f3      	b.n	8014c12 <_dtoa_r+0x20a>
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014c2e:	9312      	str	r3, [sp, #72]	; 0x48
 8014c30:	4694      	mov	ip, r2
 8014c32:	9b02      	ldr	r3, [sp, #8]
 8014c34:	4463      	add	r3, ip
 8014c36:	930c      	str	r3, [sp, #48]	; 0x30
 8014c38:	3301      	adds	r3, #1
 8014c3a:	9308      	str	r3, [sp, #32]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	dc00      	bgt.n	8014c42 <_dtoa_r+0x23a>
 8014c40:	2301      	movs	r3, #1
 8014c42:	2200      	movs	r2, #0
 8014c44:	9903      	ldr	r1, [sp, #12]
 8014c46:	644a      	str	r2, [r1, #68]	; 0x44
 8014c48:	3204      	adds	r2, #4
 8014c4a:	0010      	movs	r0, r2
 8014c4c:	9903      	ldr	r1, [sp, #12]
 8014c4e:	3014      	adds	r0, #20
 8014c50:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8014c52:	4298      	cmp	r0, r3
 8014c54:	d91f      	bls.n	8014c96 <_dtoa_r+0x28e>
 8014c56:	9803      	ldr	r0, [sp, #12]
 8014c58:	f001 f98e 	bl	8015f78 <_Balloc>
 8014c5c:	9005      	str	r0, [sp, #20]
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	d11e      	bne.n	8014ca0 <_dtoa_r+0x298>
 8014c62:	21d5      	movs	r1, #213	; 0xd5
 8014c64:	0002      	movs	r2, r0
 8014c66:	4b43      	ldr	r3, [pc, #268]	; (8014d74 <_dtoa_r+0x36c>)
 8014c68:	0049      	lsls	r1, r1, #1
 8014c6a:	4843      	ldr	r0, [pc, #268]	; (8014d78 <_dtoa_r+0x370>)
 8014c6c:	f001 ff06 	bl	8016a7c <__assert_func>
 8014c70:	2301      	movs	r3, #1
 8014c72:	e7db      	b.n	8014c2c <_dtoa_r+0x224>
 8014c74:	2300      	movs	r3, #0
 8014c76:	9412      	str	r4, [sp, #72]	; 0x48
 8014c78:	9322      	str	r3, [sp, #136]	; 0x88
 8014c7a:	3b01      	subs	r3, #1
 8014c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8014c7e:	9308      	str	r3, [sp, #32]
 8014c80:	2200      	movs	r2, #0
 8014c82:	3313      	adds	r3, #19
 8014c84:	e7cd      	b.n	8014c22 <_dtoa_r+0x21a>
 8014c86:	2301      	movs	r3, #1
 8014c88:	9312      	str	r3, [sp, #72]	; 0x48
 8014c8a:	3b02      	subs	r3, #2
 8014c8c:	e7f6      	b.n	8014c7c <_dtoa_r+0x274>
 8014c8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c90:	930c      	str	r3, [sp, #48]	; 0x30
 8014c92:	9308      	str	r3, [sp, #32]
 8014c94:	e7d5      	b.n	8014c42 <_dtoa_r+0x23a>
 8014c96:	9803      	ldr	r0, [sp, #12]
 8014c98:	3101      	adds	r1, #1
 8014c9a:	6441      	str	r1, [r0, #68]	; 0x44
 8014c9c:	0052      	lsls	r2, r2, #1
 8014c9e:	e7d4      	b.n	8014c4a <_dtoa_r+0x242>
 8014ca0:	9b03      	ldr	r3, [sp, #12]
 8014ca2:	9a05      	ldr	r2, [sp, #20]
 8014ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8014ca6:	9b08      	ldr	r3, [sp, #32]
 8014ca8:	2b0e      	cmp	r3, #14
 8014caa:	d900      	bls.n	8014cae <_dtoa_r+0x2a6>
 8014cac:	e0df      	b.n	8014e6e <_dtoa_r+0x466>
 8014cae:	2c00      	cmp	r4, #0
 8014cb0:	d100      	bne.n	8014cb4 <_dtoa_r+0x2ac>
 8014cb2:	e0dc      	b.n	8014e6e <_dtoa_r+0x466>
 8014cb4:	9b02      	ldr	r3, [sp, #8]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	dd62      	ble.n	8014d80 <_dtoa_r+0x378>
 8014cba:	001a      	movs	r2, r3
 8014cbc:	210f      	movs	r1, #15
 8014cbe:	4b29      	ldr	r3, [pc, #164]	; (8014d64 <_dtoa_r+0x35c>)
 8014cc0:	400a      	ands	r2, r1
 8014cc2:	00d2      	lsls	r2, r2, #3
 8014cc4:	189b      	adds	r3, r3, r2
 8014cc6:	681d      	ldr	r5, [r3, #0]
 8014cc8:	685e      	ldr	r6, [r3, #4]
 8014cca:	9b02      	ldr	r3, [sp, #8]
 8014ccc:	2702      	movs	r7, #2
 8014cce:	111c      	asrs	r4, r3, #4
 8014cd0:	05db      	lsls	r3, r3, #23
 8014cd2:	d50a      	bpl.n	8014cea <_dtoa_r+0x2e2>
 8014cd4:	4b29      	ldr	r3, [pc, #164]	; (8014d7c <_dtoa_r+0x374>)
 8014cd6:	400c      	ands	r4, r1
 8014cd8:	6a1a      	ldr	r2, [r3, #32]
 8014cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014cde:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014ce0:	f7ec f9d0 	bl	8001084 <__aeabi_ddiv>
 8014ce4:	900a      	str	r0, [sp, #40]	; 0x28
 8014ce6:	910b      	str	r1, [sp, #44]	; 0x2c
 8014ce8:	3701      	adds	r7, #1
 8014cea:	4b24      	ldr	r3, [pc, #144]	; (8014d7c <_dtoa_r+0x374>)
 8014cec:	9306      	str	r3, [sp, #24]
 8014cee:	2c00      	cmp	r4, #0
 8014cf0:	d108      	bne.n	8014d04 <_dtoa_r+0x2fc>
 8014cf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cf6:	002a      	movs	r2, r5
 8014cf8:	0033      	movs	r3, r6
 8014cfa:	f7ec f9c3 	bl	8001084 <__aeabi_ddiv>
 8014cfe:	900a      	str	r0, [sp, #40]	; 0x28
 8014d00:	910b      	str	r1, [sp, #44]	; 0x2c
 8014d02:	e058      	b.n	8014db6 <_dtoa_r+0x3ae>
 8014d04:	2301      	movs	r3, #1
 8014d06:	421c      	tst	r4, r3
 8014d08:	d009      	beq.n	8014d1e <_dtoa_r+0x316>
 8014d0a:	18ff      	adds	r7, r7, r3
 8014d0c:	9b06      	ldr	r3, [sp, #24]
 8014d0e:	0028      	movs	r0, r5
 8014d10:	681a      	ldr	r2, [r3, #0]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	0031      	movs	r1, r6
 8014d16:	f7ec fdbb 	bl	8001890 <__aeabi_dmul>
 8014d1a:	0005      	movs	r5, r0
 8014d1c:	000e      	movs	r6, r1
 8014d1e:	9b06      	ldr	r3, [sp, #24]
 8014d20:	1064      	asrs	r4, r4, #1
 8014d22:	3308      	adds	r3, #8
 8014d24:	e7e2      	b.n	8014cec <_dtoa_r+0x2e4>
 8014d26:	46c0      	nop			; (mov r8, r8)
 8014d28:	7ff00000 	.word	0x7ff00000
 8014d2c:	0000270f 	.word	0x0000270f
 8014d30:	0801af04 	.word	0x0801af04
 8014d34:	0801af07 	.word	0x0801af07
 8014d38:	0801aee2 	.word	0x0801aee2
 8014d3c:	0801aee3 	.word	0x0801aee3
 8014d40:	3ff00000 	.word	0x3ff00000
 8014d44:	fffffc01 	.word	0xfffffc01
 8014d48:	3ff80000 	.word	0x3ff80000
 8014d4c:	636f4361 	.word	0x636f4361
 8014d50:	3fd287a7 	.word	0x3fd287a7
 8014d54:	8b60c8b3 	.word	0x8b60c8b3
 8014d58:	3fc68a28 	.word	0x3fc68a28
 8014d5c:	509f79fb 	.word	0x509f79fb
 8014d60:	3fd34413 	.word	0x3fd34413
 8014d64:	0801b088 	.word	0x0801b088
 8014d68:	00000432 	.word	0x00000432
 8014d6c:	00000412 	.word	0x00000412
 8014d70:	fe100000 	.word	0xfe100000
 8014d74:	0801af11 	.word	0x0801af11
 8014d78:	0801af22 	.word	0x0801af22
 8014d7c:	0801b060 	.word	0x0801b060
 8014d80:	9b02      	ldr	r3, [sp, #8]
 8014d82:	2702      	movs	r7, #2
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d016      	beq.n	8014db6 <_dtoa_r+0x3ae>
 8014d88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014d8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014d8c:	425c      	negs	r4, r3
 8014d8e:	230f      	movs	r3, #15
 8014d90:	4ad4      	ldr	r2, [pc, #848]	; (80150e4 <_dtoa_r+0x6dc>)
 8014d92:	4023      	ands	r3, r4
 8014d94:	00db      	lsls	r3, r3, #3
 8014d96:	18d3      	adds	r3, r2, r3
 8014d98:	681a      	ldr	r2, [r3, #0]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	f7ec fd78 	bl	8001890 <__aeabi_dmul>
 8014da0:	2601      	movs	r6, #1
 8014da2:	2300      	movs	r3, #0
 8014da4:	900a      	str	r0, [sp, #40]	; 0x28
 8014da6:	910b      	str	r1, [sp, #44]	; 0x2c
 8014da8:	4dcf      	ldr	r5, [pc, #828]	; (80150e8 <_dtoa_r+0x6e0>)
 8014daa:	1124      	asrs	r4, r4, #4
 8014dac:	2c00      	cmp	r4, #0
 8014dae:	d000      	beq.n	8014db2 <_dtoa_r+0x3aa>
 8014db0:	e08d      	b.n	8014ece <_dtoa_r+0x4c6>
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d1a3      	bne.n	8014cfe <_dtoa_r+0x2f6>
 8014db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d100      	bne.n	8014dbe <_dtoa_r+0x3b6>
 8014dbc:	e092      	b.n	8014ee4 <_dtoa_r+0x4dc>
 8014dbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014dc0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	0020      	movs	r0, r4
 8014dc6:	0029      	movs	r1, r5
 8014dc8:	4bc8      	ldr	r3, [pc, #800]	; (80150ec <_dtoa_r+0x6e4>)
 8014dca:	f7eb fb4d 	bl	8000468 <__aeabi_dcmplt>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	d100      	bne.n	8014dd4 <_dtoa_r+0x3cc>
 8014dd2:	e087      	b.n	8014ee4 <_dtoa_r+0x4dc>
 8014dd4:	9b08      	ldr	r3, [sp, #32]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d100      	bne.n	8014ddc <_dtoa_r+0x3d4>
 8014dda:	e083      	b.n	8014ee4 <_dtoa_r+0x4dc>
 8014ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	dd41      	ble.n	8014e66 <_dtoa_r+0x45e>
 8014de2:	9b02      	ldr	r3, [sp, #8]
 8014de4:	2200      	movs	r2, #0
 8014de6:	3b01      	subs	r3, #1
 8014de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dea:	0020      	movs	r0, r4
 8014dec:	0029      	movs	r1, r5
 8014dee:	4bc0      	ldr	r3, [pc, #768]	; (80150f0 <_dtoa_r+0x6e8>)
 8014df0:	f7ec fd4e 	bl	8001890 <__aeabi_dmul>
 8014df4:	900a      	str	r0, [sp, #40]	; 0x28
 8014df6:	910b      	str	r1, [sp, #44]	; 0x2c
 8014df8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014dfa:	3701      	adds	r7, #1
 8014dfc:	0038      	movs	r0, r7
 8014dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014e02:	f7ed fb97 	bl	8002534 <__aeabi_i2d>
 8014e06:	0022      	movs	r2, r4
 8014e08:	002b      	movs	r3, r5
 8014e0a:	f7ec fd41 	bl	8001890 <__aeabi_dmul>
 8014e0e:	2200      	movs	r2, #0
 8014e10:	4bb8      	ldr	r3, [pc, #736]	; (80150f4 <_dtoa_r+0x6ec>)
 8014e12:	f7eb fdcd 	bl	80009b0 <__aeabi_dadd>
 8014e16:	900a      	str	r0, [sp, #40]	; 0x28
 8014e18:	910b      	str	r1, [sp, #44]	; 0x2c
 8014e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e1e:	9206      	str	r2, [sp, #24]
 8014e20:	9307      	str	r3, [sp, #28]
 8014e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e24:	4ab4      	ldr	r2, [pc, #720]	; (80150f8 <_dtoa_r+0x6f0>)
 8014e26:	189f      	adds	r7, r3, r2
 8014e28:	9707      	str	r7, [sp, #28]
 8014e2a:	2e00      	cmp	r6, #0
 8014e2c:	d15e      	bne.n	8014eec <_dtoa_r+0x4e4>
 8014e2e:	2200      	movs	r2, #0
 8014e30:	0020      	movs	r0, r4
 8014e32:	0029      	movs	r1, r5
 8014e34:	4bb1      	ldr	r3, [pc, #708]	; (80150fc <_dtoa_r+0x6f4>)
 8014e36:	f7ec ff97 	bl	8001d68 <__aeabi_dsub>
 8014e3a:	003b      	movs	r3, r7
 8014e3c:	9a06      	ldr	r2, [sp, #24]
 8014e3e:	0004      	movs	r4, r0
 8014e40:	000d      	movs	r5, r1
 8014e42:	f7eb fb25 	bl	8000490 <__aeabi_dcmpgt>
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d000      	beq.n	8014e4c <_dtoa_r+0x444>
 8014e4a:	e2aa      	b.n	80153a2 <_dtoa_r+0x99a>
 8014e4c:	48ac      	ldr	r0, [pc, #688]	; (8015100 <_dtoa_r+0x6f8>)
 8014e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e50:	4684      	mov	ip, r0
 8014e52:	4461      	add	r1, ip
 8014e54:	000b      	movs	r3, r1
 8014e56:	0020      	movs	r0, r4
 8014e58:	0029      	movs	r1, r5
 8014e5a:	9a06      	ldr	r2, [sp, #24]
 8014e5c:	f7eb fb04 	bl	8000468 <__aeabi_dcmplt>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	d000      	beq.n	8014e66 <_dtoa_r+0x45e>
 8014e64:	e29b      	b.n	801539e <_dtoa_r+0x996>
 8014e66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e68:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8014e6c:	940b      	str	r4, [sp, #44]	; 0x2c
 8014e6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	da00      	bge.n	8014e76 <_dtoa_r+0x46e>
 8014e74:	e16a      	b.n	801514c <_dtoa_r+0x744>
 8014e76:	9a02      	ldr	r2, [sp, #8]
 8014e78:	2a0e      	cmp	r2, #14
 8014e7a:	dd00      	ble.n	8014e7e <_dtoa_r+0x476>
 8014e7c:	e166      	b.n	801514c <_dtoa_r+0x744>
 8014e7e:	4b99      	ldr	r3, [pc, #612]	; (80150e4 <_dtoa_r+0x6dc>)
 8014e80:	00d2      	lsls	r2, r2, #3
 8014e82:	189b      	adds	r3, r3, r2
 8014e84:	681e      	ldr	r6, [r3, #0]
 8014e86:	685f      	ldr	r7, [r3, #4]
 8014e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	db00      	blt.n	8014e90 <_dtoa_r+0x488>
 8014e8e:	e0d7      	b.n	8015040 <_dtoa_r+0x638>
 8014e90:	9b08      	ldr	r3, [sp, #32]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	dd00      	ble.n	8014e98 <_dtoa_r+0x490>
 8014e96:	e0d3      	b.n	8015040 <_dtoa_r+0x638>
 8014e98:	d000      	beq.n	8014e9c <_dtoa_r+0x494>
 8014e9a:	e27f      	b.n	801539c <_dtoa_r+0x994>
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	0030      	movs	r0, r6
 8014ea0:	0039      	movs	r1, r7
 8014ea2:	4b96      	ldr	r3, [pc, #600]	; (80150fc <_dtoa_r+0x6f4>)
 8014ea4:	f7ec fcf4 	bl	8001890 <__aeabi_dmul>
 8014ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eac:	f7eb fafa 	bl	80004a4 <__aeabi_dcmpge>
 8014eb0:	9e08      	ldr	r6, [sp, #32]
 8014eb2:	0037      	movs	r7, r6
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d000      	beq.n	8014eba <_dtoa_r+0x4b2>
 8014eb8:	e256      	b.n	8015368 <_dtoa_r+0x960>
 8014eba:	9b05      	ldr	r3, [sp, #20]
 8014ebc:	9a05      	ldr	r2, [sp, #20]
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	9306      	str	r3, [sp, #24]
 8014ec2:	2331      	movs	r3, #49	; 0x31
 8014ec4:	7013      	strb	r3, [r2, #0]
 8014ec6:	9b02      	ldr	r3, [sp, #8]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	9302      	str	r3, [sp, #8]
 8014ecc:	e251      	b.n	8015372 <_dtoa_r+0x96a>
 8014ece:	4234      	tst	r4, r6
 8014ed0:	d005      	beq.n	8014ede <_dtoa_r+0x4d6>
 8014ed2:	682a      	ldr	r2, [r5, #0]
 8014ed4:	686b      	ldr	r3, [r5, #4]
 8014ed6:	f7ec fcdb 	bl	8001890 <__aeabi_dmul>
 8014eda:	0033      	movs	r3, r6
 8014edc:	3701      	adds	r7, #1
 8014ede:	1064      	asrs	r4, r4, #1
 8014ee0:	3508      	adds	r5, #8
 8014ee2:	e763      	b.n	8014dac <_dtoa_r+0x3a4>
 8014ee4:	9b02      	ldr	r3, [sp, #8]
 8014ee6:	9e08      	ldr	r6, [sp, #32]
 8014ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014eea:	e787      	b.n	8014dfc <_dtoa_r+0x3f4>
 8014eec:	4b7d      	ldr	r3, [pc, #500]	; (80150e4 <_dtoa_r+0x6dc>)
 8014eee:	1e72      	subs	r2, r6, #1
 8014ef0:	00d2      	lsls	r2, r2, #3
 8014ef2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014ef4:	189b      	adds	r3, r3, r2
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	2900      	cmp	r1, #0
 8014efc:	d04e      	beq.n	8014f9c <_dtoa_r+0x594>
 8014efe:	2000      	movs	r0, #0
 8014f00:	4980      	ldr	r1, [pc, #512]	; (8015104 <_dtoa_r+0x6fc>)
 8014f02:	f7ec f8bf 	bl	8001084 <__aeabi_ddiv>
 8014f06:	9a06      	ldr	r2, [sp, #24]
 8014f08:	9b07      	ldr	r3, [sp, #28]
 8014f0a:	f7ec ff2d 	bl	8001d68 <__aeabi_dsub>
 8014f0e:	9b05      	ldr	r3, [sp, #20]
 8014f10:	900a      	str	r0, [sp, #40]	; 0x28
 8014f12:	910b      	str	r1, [sp, #44]	; 0x2c
 8014f14:	9315      	str	r3, [sp, #84]	; 0x54
 8014f16:	18f3      	adds	r3, r6, r3
 8014f18:	9319      	str	r3, [sp, #100]	; 0x64
 8014f1a:	0020      	movs	r0, r4
 8014f1c:	0029      	movs	r1, r5
 8014f1e:	f7ed fad3 	bl	80024c8 <__aeabi_d2iz>
 8014f22:	9017      	str	r0, [sp, #92]	; 0x5c
 8014f24:	f7ed fb06 	bl	8002534 <__aeabi_i2d>
 8014f28:	0002      	movs	r2, r0
 8014f2a:	000b      	movs	r3, r1
 8014f2c:	0020      	movs	r0, r4
 8014f2e:	0029      	movs	r1, r5
 8014f30:	f7ec ff1a 	bl	8001d68 <__aeabi_dsub>
 8014f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f36:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014f38:	3301      	adds	r3, #1
 8014f3a:	9306      	str	r3, [sp, #24]
 8014f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f3e:	3430      	adds	r4, #48	; 0x30
 8014f40:	701c      	strb	r4, [r3, #0]
 8014f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f46:	0006      	movs	r6, r0
 8014f48:	000f      	movs	r7, r1
 8014f4a:	f7eb fa8d 	bl	8000468 <__aeabi_dcmplt>
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d16c      	bne.n	801502c <_dtoa_r+0x624>
 8014f52:	0032      	movs	r2, r6
 8014f54:	003b      	movs	r3, r7
 8014f56:	2000      	movs	r0, #0
 8014f58:	4964      	ldr	r1, [pc, #400]	; (80150ec <_dtoa_r+0x6e4>)
 8014f5a:	f7ec ff05 	bl	8001d68 <__aeabi_dsub>
 8014f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f62:	f7eb fa81 	bl	8000468 <__aeabi_dcmplt>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	d000      	beq.n	8014f6c <_dtoa_r+0x564>
 8014f6a:	e0cf      	b.n	801510c <_dtoa_r+0x704>
 8014f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f6e:	9a06      	ldr	r2, [sp, #24]
 8014f70:	4293      	cmp	r3, r2
 8014f72:	d100      	bne.n	8014f76 <_dtoa_r+0x56e>
 8014f74:	e777      	b.n	8014e66 <_dtoa_r+0x45e>
 8014f76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	4b5c      	ldr	r3, [pc, #368]	; (80150f0 <_dtoa_r+0x6e8>)
 8014f7e:	f7ec fc87 	bl	8001890 <__aeabi_dmul>
 8014f82:	4b5b      	ldr	r3, [pc, #364]	; (80150f0 <_dtoa_r+0x6e8>)
 8014f84:	900a      	str	r0, [sp, #40]	; 0x28
 8014f86:	910b      	str	r1, [sp, #44]	; 0x2c
 8014f88:	2200      	movs	r2, #0
 8014f8a:	0030      	movs	r0, r6
 8014f8c:	0039      	movs	r1, r7
 8014f8e:	f7ec fc7f 	bl	8001890 <__aeabi_dmul>
 8014f92:	9b06      	ldr	r3, [sp, #24]
 8014f94:	0004      	movs	r4, r0
 8014f96:	000d      	movs	r5, r1
 8014f98:	9315      	str	r3, [sp, #84]	; 0x54
 8014f9a:	e7be      	b.n	8014f1a <_dtoa_r+0x512>
 8014f9c:	9806      	ldr	r0, [sp, #24]
 8014f9e:	9907      	ldr	r1, [sp, #28]
 8014fa0:	f7ec fc76 	bl	8001890 <__aeabi_dmul>
 8014fa4:	9f05      	ldr	r7, [sp, #20]
 8014fa6:	900a      	str	r0, [sp, #40]	; 0x28
 8014fa8:	910b      	str	r1, [sp, #44]	; 0x2c
 8014faa:	19bb      	adds	r3, r7, r6
 8014fac:	9315      	str	r3, [sp, #84]	; 0x54
 8014fae:	0029      	movs	r1, r5
 8014fb0:	0020      	movs	r0, r4
 8014fb2:	f7ed fa89 	bl	80024c8 <__aeabi_d2iz>
 8014fb6:	9006      	str	r0, [sp, #24]
 8014fb8:	f7ed fabc 	bl	8002534 <__aeabi_i2d>
 8014fbc:	000b      	movs	r3, r1
 8014fbe:	0002      	movs	r2, r0
 8014fc0:	0029      	movs	r1, r5
 8014fc2:	0020      	movs	r0, r4
 8014fc4:	f7ec fed0 	bl	8001d68 <__aeabi_dsub>
 8014fc8:	9b06      	ldr	r3, [sp, #24]
 8014fca:	0004      	movs	r4, r0
 8014fcc:	3330      	adds	r3, #48	; 0x30
 8014fce:	703b      	strb	r3, [r7, #0]
 8014fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fd2:	3701      	adds	r7, #1
 8014fd4:	000d      	movs	r5, r1
 8014fd6:	429f      	cmp	r7, r3
 8014fd8:	d12b      	bne.n	8015032 <_dtoa_r+0x62a>
 8014fda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fde:	9b05      	ldr	r3, [sp, #20]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	199b      	adds	r3, r3, r6
 8014fe4:	9306      	str	r3, [sp, #24]
 8014fe6:	4b47      	ldr	r3, [pc, #284]	; (8015104 <_dtoa_r+0x6fc>)
 8014fe8:	f7eb fce2 	bl	80009b0 <__aeabi_dadd>
 8014fec:	0002      	movs	r2, r0
 8014fee:	000b      	movs	r3, r1
 8014ff0:	0020      	movs	r0, r4
 8014ff2:	0029      	movs	r1, r5
 8014ff4:	f7eb fa4c 	bl	8000490 <__aeabi_dcmpgt>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d000      	beq.n	8014ffe <_dtoa_r+0x5f6>
 8014ffc:	e086      	b.n	801510c <_dtoa_r+0x704>
 8014ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015002:	2000      	movs	r0, #0
 8015004:	493f      	ldr	r1, [pc, #252]	; (8015104 <_dtoa_r+0x6fc>)
 8015006:	f7ec feaf 	bl	8001d68 <__aeabi_dsub>
 801500a:	0002      	movs	r2, r0
 801500c:	000b      	movs	r3, r1
 801500e:	0020      	movs	r0, r4
 8015010:	0029      	movs	r1, r5
 8015012:	f7eb fa29 	bl	8000468 <__aeabi_dcmplt>
 8015016:	2800      	cmp	r0, #0
 8015018:	d100      	bne.n	801501c <_dtoa_r+0x614>
 801501a:	e724      	b.n	8014e66 <_dtoa_r+0x45e>
 801501c:	9b06      	ldr	r3, [sp, #24]
 801501e:	001a      	movs	r2, r3
 8015020:	3a01      	subs	r2, #1
 8015022:	9206      	str	r2, [sp, #24]
 8015024:	7812      	ldrb	r2, [r2, #0]
 8015026:	2a30      	cmp	r2, #48	; 0x30
 8015028:	d0f8      	beq.n	801501c <_dtoa_r+0x614>
 801502a:	9306      	str	r3, [sp, #24]
 801502c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801502e:	9302      	str	r3, [sp, #8]
 8015030:	e046      	b.n	80150c0 <_dtoa_r+0x6b8>
 8015032:	2200      	movs	r2, #0
 8015034:	4b2e      	ldr	r3, [pc, #184]	; (80150f0 <_dtoa_r+0x6e8>)
 8015036:	f7ec fc2b 	bl	8001890 <__aeabi_dmul>
 801503a:	0004      	movs	r4, r0
 801503c:	000d      	movs	r5, r1
 801503e:	e7b6      	b.n	8014fae <_dtoa_r+0x5a6>
 8015040:	9b05      	ldr	r3, [sp, #20]
 8015042:	9a05      	ldr	r2, [sp, #20]
 8015044:	9309      	str	r3, [sp, #36]	; 0x24
 8015046:	9b08      	ldr	r3, [sp, #32]
 8015048:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801504a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801504c:	3b01      	subs	r3, #1
 801504e:	189b      	adds	r3, r3, r2
 8015050:	930a      	str	r3, [sp, #40]	; 0x28
 8015052:	0032      	movs	r2, r6
 8015054:	003b      	movs	r3, r7
 8015056:	0020      	movs	r0, r4
 8015058:	0029      	movs	r1, r5
 801505a:	f7ec f813 	bl	8001084 <__aeabi_ddiv>
 801505e:	f7ed fa33 	bl	80024c8 <__aeabi_d2iz>
 8015062:	9008      	str	r0, [sp, #32]
 8015064:	f7ed fa66 	bl	8002534 <__aeabi_i2d>
 8015068:	0032      	movs	r2, r6
 801506a:	003b      	movs	r3, r7
 801506c:	f7ec fc10 	bl	8001890 <__aeabi_dmul>
 8015070:	0002      	movs	r2, r0
 8015072:	000b      	movs	r3, r1
 8015074:	0020      	movs	r0, r4
 8015076:	0029      	movs	r1, r5
 8015078:	f7ec fe76 	bl	8001d68 <__aeabi_dsub>
 801507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801507e:	001a      	movs	r2, r3
 8015080:	3201      	adds	r2, #1
 8015082:	9209      	str	r2, [sp, #36]	; 0x24
 8015084:	9206      	str	r2, [sp, #24]
 8015086:	9a08      	ldr	r2, [sp, #32]
 8015088:	3230      	adds	r2, #48	; 0x30
 801508a:	701a      	strb	r2, [r3, #0]
 801508c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801508e:	429a      	cmp	r2, r3
 8015090:	d14f      	bne.n	8015132 <_dtoa_r+0x72a>
 8015092:	0002      	movs	r2, r0
 8015094:	000b      	movs	r3, r1
 8015096:	f7eb fc8b 	bl	80009b0 <__aeabi_dadd>
 801509a:	0032      	movs	r2, r6
 801509c:	003b      	movs	r3, r7
 801509e:	0004      	movs	r4, r0
 80150a0:	000d      	movs	r5, r1
 80150a2:	f7eb f9f5 	bl	8000490 <__aeabi_dcmpgt>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d12e      	bne.n	8015108 <_dtoa_r+0x700>
 80150aa:	0032      	movs	r2, r6
 80150ac:	003b      	movs	r3, r7
 80150ae:	0020      	movs	r0, r4
 80150b0:	0029      	movs	r1, r5
 80150b2:	f7eb f9d3 	bl	800045c <__aeabi_dcmpeq>
 80150b6:	2800      	cmp	r0, #0
 80150b8:	d002      	beq.n	80150c0 <_dtoa_r+0x6b8>
 80150ba:	9b08      	ldr	r3, [sp, #32]
 80150bc:	07db      	lsls	r3, r3, #31
 80150be:	d423      	bmi.n	8015108 <_dtoa_r+0x700>
 80150c0:	9803      	ldr	r0, [sp, #12]
 80150c2:	9904      	ldr	r1, [sp, #16]
 80150c4:	f000 ff80 	bl	8015fc8 <_Bfree>
 80150c8:	2300      	movs	r3, #0
 80150ca:	9a06      	ldr	r2, [sp, #24]
 80150cc:	9802      	ldr	r0, [sp, #8]
 80150ce:	7013      	strb	r3, [r2, #0]
 80150d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80150d2:	3001      	adds	r0, #1
 80150d4:	6018      	str	r0, [r3, #0]
 80150d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d100      	bne.n	80150de <_dtoa_r+0x6d6>
 80150dc:	e4c8      	b.n	8014a70 <_dtoa_r+0x68>
 80150de:	601a      	str	r2, [r3, #0]
 80150e0:	e4c6      	b.n	8014a70 <_dtoa_r+0x68>
 80150e2:	46c0      	nop			; (mov r8, r8)
 80150e4:	0801b088 	.word	0x0801b088
 80150e8:	0801b060 	.word	0x0801b060
 80150ec:	3ff00000 	.word	0x3ff00000
 80150f0:	40240000 	.word	0x40240000
 80150f4:	401c0000 	.word	0x401c0000
 80150f8:	fcc00000 	.word	0xfcc00000
 80150fc:	40140000 	.word	0x40140000
 8015100:	7cc00000 	.word	0x7cc00000
 8015104:	3fe00000 	.word	0x3fe00000
 8015108:	9b02      	ldr	r3, [sp, #8]
 801510a:	930f      	str	r3, [sp, #60]	; 0x3c
 801510c:	9b06      	ldr	r3, [sp, #24]
 801510e:	9306      	str	r3, [sp, #24]
 8015110:	3b01      	subs	r3, #1
 8015112:	781a      	ldrb	r2, [r3, #0]
 8015114:	2a39      	cmp	r2, #57	; 0x39
 8015116:	d108      	bne.n	801512a <_dtoa_r+0x722>
 8015118:	9a05      	ldr	r2, [sp, #20]
 801511a:	429a      	cmp	r2, r3
 801511c:	d1f7      	bne.n	801510e <_dtoa_r+0x706>
 801511e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015120:	9905      	ldr	r1, [sp, #20]
 8015122:	3201      	adds	r2, #1
 8015124:	920f      	str	r2, [sp, #60]	; 0x3c
 8015126:	2230      	movs	r2, #48	; 0x30
 8015128:	700a      	strb	r2, [r1, #0]
 801512a:	781a      	ldrb	r2, [r3, #0]
 801512c:	3201      	adds	r2, #1
 801512e:	701a      	strb	r2, [r3, #0]
 8015130:	e77c      	b.n	801502c <_dtoa_r+0x624>
 8015132:	2200      	movs	r2, #0
 8015134:	4baa      	ldr	r3, [pc, #680]	; (80153e0 <_dtoa_r+0x9d8>)
 8015136:	f7ec fbab 	bl	8001890 <__aeabi_dmul>
 801513a:	2200      	movs	r2, #0
 801513c:	2300      	movs	r3, #0
 801513e:	0004      	movs	r4, r0
 8015140:	000d      	movs	r5, r1
 8015142:	f7eb f98b 	bl	800045c <__aeabi_dcmpeq>
 8015146:	2800      	cmp	r0, #0
 8015148:	d083      	beq.n	8015052 <_dtoa_r+0x64a>
 801514a:	e7b9      	b.n	80150c0 <_dtoa_r+0x6b8>
 801514c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801514e:	2a00      	cmp	r2, #0
 8015150:	d100      	bne.n	8015154 <_dtoa_r+0x74c>
 8015152:	e08a      	b.n	801526a <_dtoa_r+0x862>
 8015154:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015156:	2a01      	cmp	r2, #1
 8015158:	dc6e      	bgt.n	8015238 <_dtoa_r+0x830>
 801515a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801515c:	2a00      	cmp	r2, #0
 801515e:	d067      	beq.n	8015230 <_dtoa_r+0x828>
 8015160:	4aa0      	ldr	r2, [pc, #640]	; (80153e4 <_dtoa_r+0x9dc>)
 8015162:	189b      	adds	r3, r3, r2
 8015164:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015166:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801516a:	2101      	movs	r1, #1
 801516c:	18d2      	adds	r2, r2, r3
 801516e:	9209      	str	r2, [sp, #36]	; 0x24
 8015170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015172:	9803      	ldr	r0, [sp, #12]
 8015174:	18d3      	adds	r3, r2, r3
 8015176:	930d      	str	r3, [sp, #52]	; 0x34
 8015178:	f001 f808 	bl	801618c <__i2b>
 801517c:	0007      	movs	r7, r0
 801517e:	2c00      	cmp	r4, #0
 8015180:	dd0e      	ble.n	80151a0 <_dtoa_r+0x798>
 8015182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015184:	2b00      	cmp	r3, #0
 8015186:	dd0b      	ble.n	80151a0 <_dtoa_r+0x798>
 8015188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801518a:	0023      	movs	r3, r4
 801518c:	4294      	cmp	r4, r2
 801518e:	dd00      	ble.n	8015192 <_dtoa_r+0x78a>
 8015190:	0013      	movs	r3, r2
 8015192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015194:	1ae4      	subs	r4, r4, r3
 8015196:	1ad2      	subs	r2, r2, r3
 8015198:	9209      	str	r2, [sp, #36]	; 0x24
 801519a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801519c:	1ad3      	subs	r3, r2, r3
 801519e:	930d      	str	r3, [sp, #52]	; 0x34
 80151a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d01e      	beq.n	80151e4 <_dtoa_r+0x7dc>
 80151a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d062      	beq.n	8015272 <_dtoa_r+0x86a>
 80151ac:	2d00      	cmp	r5, #0
 80151ae:	dd10      	ble.n	80151d2 <_dtoa_r+0x7ca>
 80151b0:	0039      	movs	r1, r7
 80151b2:	002a      	movs	r2, r5
 80151b4:	9803      	ldr	r0, [sp, #12]
 80151b6:	f001 f8af 	bl	8016318 <__pow5mult>
 80151ba:	9a04      	ldr	r2, [sp, #16]
 80151bc:	0001      	movs	r1, r0
 80151be:	0007      	movs	r7, r0
 80151c0:	9803      	ldr	r0, [sp, #12]
 80151c2:	f000 fff9 	bl	80161b8 <__multiply>
 80151c6:	0006      	movs	r6, r0
 80151c8:	9904      	ldr	r1, [sp, #16]
 80151ca:	9803      	ldr	r0, [sp, #12]
 80151cc:	f000 fefc 	bl	8015fc8 <_Bfree>
 80151d0:	9604      	str	r6, [sp, #16]
 80151d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151d4:	1b5a      	subs	r2, r3, r5
 80151d6:	42ab      	cmp	r3, r5
 80151d8:	d004      	beq.n	80151e4 <_dtoa_r+0x7dc>
 80151da:	9904      	ldr	r1, [sp, #16]
 80151dc:	9803      	ldr	r0, [sp, #12]
 80151de:	f001 f89b 	bl	8016318 <__pow5mult>
 80151e2:	9004      	str	r0, [sp, #16]
 80151e4:	2101      	movs	r1, #1
 80151e6:	9803      	ldr	r0, [sp, #12]
 80151e8:	f000 ffd0 	bl	801618c <__i2b>
 80151ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80151ee:	0006      	movs	r6, r0
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dd40      	ble.n	8015276 <_dtoa_r+0x86e>
 80151f4:	001a      	movs	r2, r3
 80151f6:	0001      	movs	r1, r0
 80151f8:	9803      	ldr	r0, [sp, #12]
 80151fa:	f001 f88d 	bl	8016318 <__pow5mult>
 80151fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015200:	0006      	movs	r6, r0
 8015202:	2500      	movs	r5, #0
 8015204:	2b01      	cmp	r3, #1
 8015206:	dc3e      	bgt.n	8015286 <_dtoa_r+0x87e>
 8015208:	2500      	movs	r5, #0
 801520a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801520c:	42ab      	cmp	r3, r5
 801520e:	d136      	bne.n	801527e <_dtoa_r+0x876>
 8015210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015212:	031b      	lsls	r3, r3, #12
 8015214:	42ab      	cmp	r3, r5
 8015216:	d132      	bne.n	801527e <_dtoa_r+0x876>
 8015218:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801521a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801521c:	4213      	tst	r3, r2
 801521e:	d02e      	beq.n	801527e <_dtoa_r+0x876>
 8015220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015222:	3501      	adds	r5, #1
 8015224:	3301      	adds	r3, #1
 8015226:	9309      	str	r3, [sp, #36]	; 0x24
 8015228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522a:	3301      	adds	r3, #1
 801522c:	930d      	str	r3, [sp, #52]	; 0x34
 801522e:	e026      	b.n	801527e <_dtoa_r+0x876>
 8015230:	2336      	movs	r3, #54	; 0x36
 8015232:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015234:	1a9b      	subs	r3, r3, r2
 8015236:	e795      	b.n	8015164 <_dtoa_r+0x75c>
 8015238:	9b08      	ldr	r3, [sp, #32]
 801523a:	1e5d      	subs	r5, r3, #1
 801523c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801523e:	42ab      	cmp	r3, r5
 8015240:	db08      	blt.n	8015254 <_dtoa_r+0x84c>
 8015242:	1b5d      	subs	r5, r3, r5
 8015244:	9b08      	ldr	r3, [sp, #32]
 8015246:	2b00      	cmp	r3, #0
 8015248:	da0c      	bge.n	8015264 <_dtoa_r+0x85c>
 801524a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801524c:	9a08      	ldr	r2, [sp, #32]
 801524e:	1a9c      	subs	r4, r3, r2
 8015250:	2300      	movs	r3, #0
 8015252:	e789      	b.n	8015168 <_dtoa_r+0x760>
 8015254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015256:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015258:	1aeb      	subs	r3, r5, r3
 801525a:	18d3      	adds	r3, r2, r3
 801525c:	950e      	str	r5, [sp, #56]	; 0x38
 801525e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015260:	2500      	movs	r5, #0
 8015262:	e7ef      	b.n	8015244 <_dtoa_r+0x83c>
 8015264:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015266:	9b08      	ldr	r3, [sp, #32]
 8015268:	e77e      	b.n	8015168 <_dtoa_r+0x760>
 801526a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801526c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801526e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015270:	e785      	b.n	801517e <_dtoa_r+0x776>
 8015272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015274:	e7b1      	b.n	80151da <_dtoa_r+0x7d2>
 8015276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015278:	2500      	movs	r5, #0
 801527a:	2b01      	cmp	r3, #1
 801527c:	ddc4      	ble.n	8015208 <_dtoa_r+0x800>
 801527e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015280:	2001      	movs	r0, #1
 8015282:	2b00      	cmp	r3, #0
 8015284:	d008      	beq.n	8015298 <_dtoa_r+0x890>
 8015286:	6933      	ldr	r3, [r6, #16]
 8015288:	3303      	adds	r3, #3
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	18f3      	adds	r3, r6, r3
 801528e:	6858      	ldr	r0, [r3, #4]
 8015290:	f000 ff34 	bl	80160fc <__hi0bits>
 8015294:	2320      	movs	r3, #32
 8015296:	1a18      	subs	r0, r3, r0
 8015298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801529a:	221f      	movs	r2, #31
 801529c:	1818      	adds	r0, r3, r0
 801529e:	0003      	movs	r3, r0
 80152a0:	4013      	ands	r3, r2
 80152a2:	4210      	tst	r0, r2
 80152a4:	d046      	beq.n	8015334 <_dtoa_r+0x92c>
 80152a6:	3201      	adds	r2, #1
 80152a8:	1ad2      	subs	r2, r2, r3
 80152aa:	2a04      	cmp	r2, #4
 80152ac:	dd3f      	ble.n	801532e <_dtoa_r+0x926>
 80152ae:	221c      	movs	r2, #28
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152b4:	18e4      	adds	r4, r4, r3
 80152b6:	18d2      	adds	r2, r2, r3
 80152b8:	9209      	str	r2, [sp, #36]	; 0x24
 80152ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152bc:	18d3      	adds	r3, r2, r3
 80152be:	930d      	str	r3, [sp, #52]	; 0x34
 80152c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	dd05      	ble.n	80152d2 <_dtoa_r+0x8ca>
 80152c6:	001a      	movs	r2, r3
 80152c8:	9904      	ldr	r1, [sp, #16]
 80152ca:	9803      	ldr	r0, [sp, #12]
 80152cc:	f001 f866 	bl	801639c <__lshift>
 80152d0:	9004      	str	r0, [sp, #16]
 80152d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	dd05      	ble.n	80152e4 <_dtoa_r+0x8dc>
 80152d8:	0031      	movs	r1, r6
 80152da:	001a      	movs	r2, r3
 80152dc:	9803      	ldr	r0, [sp, #12]
 80152de:	f001 f85d 	bl	801639c <__lshift>
 80152e2:	0006      	movs	r6, r0
 80152e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d026      	beq.n	8015338 <_dtoa_r+0x930>
 80152ea:	0031      	movs	r1, r6
 80152ec:	9804      	ldr	r0, [sp, #16]
 80152ee:	f001 f8c5 	bl	801647c <__mcmp>
 80152f2:	2800      	cmp	r0, #0
 80152f4:	da20      	bge.n	8015338 <_dtoa_r+0x930>
 80152f6:	9b02      	ldr	r3, [sp, #8]
 80152f8:	220a      	movs	r2, #10
 80152fa:	3b01      	subs	r3, #1
 80152fc:	9302      	str	r3, [sp, #8]
 80152fe:	9904      	ldr	r1, [sp, #16]
 8015300:	2300      	movs	r3, #0
 8015302:	9803      	ldr	r0, [sp, #12]
 8015304:	f000 fe6a 	bl	8015fdc <__multadd>
 8015308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801530a:	9004      	str	r0, [sp, #16]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d100      	bne.n	8015312 <_dtoa_r+0x90a>
 8015310:	e154      	b.n	80155bc <_dtoa_r+0xbb4>
 8015312:	2300      	movs	r3, #0
 8015314:	0039      	movs	r1, r7
 8015316:	220a      	movs	r2, #10
 8015318:	9803      	ldr	r0, [sp, #12]
 801531a:	f000 fe5f 	bl	8015fdc <__multadd>
 801531e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015320:	0007      	movs	r7, r0
 8015322:	2b00      	cmp	r3, #0
 8015324:	dc47      	bgt.n	80153b6 <_dtoa_r+0x9ae>
 8015326:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015328:	2b02      	cmp	r3, #2
 801532a:	dc0d      	bgt.n	8015348 <_dtoa_r+0x940>
 801532c:	e043      	b.n	80153b6 <_dtoa_r+0x9ae>
 801532e:	2a04      	cmp	r2, #4
 8015330:	d0c6      	beq.n	80152c0 <_dtoa_r+0x8b8>
 8015332:	0013      	movs	r3, r2
 8015334:	331c      	adds	r3, #28
 8015336:	e7bc      	b.n	80152b2 <_dtoa_r+0x8aa>
 8015338:	9b08      	ldr	r3, [sp, #32]
 801533a:	2b00      	cmp	r3, #0
 801533c:	dc35      	bgt.n	80153aa <_dtoa_r+0x9a2>
 801533e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015340:	2b02      	cmp	r3, #2
 8015342:	dd32      	ble.n	80153aa <_dtoa_r+0x9a2>
 8015344:	9b08      	ldr	r3, [sp, #32]
 8015346:	930c      	str	r3, [sp, #48]	; 0x30
 8015348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801534a:	2b00      	cmp	r3, #0
 801534c:	d10c      	bne.n	8015368 <_dtoa_r+0x960>
 801534e:	0031      	movs	r1, r6
 8015350:	2205      	movs	r2, #5
 8015352:	9803      	ldr	r0, [sp, #12]
 8015354:	f000 fe42 	bl	8015fdc <__multadd>
 8015358:	0006      	movs	r6, r0
 801535a:	0001      	movs	r1, r0
 801535c:	9804      	ldr	r0, [sp, #16]
 801535e:	f001 f88d 	bl	801647c <__mcmp>
 8015362:	2800      	cmp	r0, #0
 8015364:	dd00      	ble.n	8015368 <_dtoa_r+0x960>
 8015366:	e5a8      	b.n	8014eba <_dtoa_r+0x4b2>
 8015368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801536a:	43db      	mvns	r3, r3
 801536c:	9302      	str	r3, [sp, #8]
 801536e:	9b05      	ldr	r3, [sp, #20]
 8015370:	9306      	str	r3, [sp, #24]
 8015372:	2500      	movs	r5, #0
 8015374:	0031      	movs	r1, r6
 8015376:	9803      	ldr	r0, [sp, #12]
 8015378:	f000 fe26 	bl	8015fc8 <_Bfree>
 801537c:	2f00      	cmp	r7, #0
 801537e:	d100      	bne.n	8015382 <_dtoa_r+0x97a>
 8015380:	e69e      	b.n	80150c0 <_dtoa_r+0x6b8>
 8015382:	2d00      	cmp	r5, #0
 8015384:	d005      	beq.n	8015392 <_dtoa_r+0x98a>
 8015386:	42bd      	cmp	r5, r7
 8015388:	d003      	beq.n	8015392 <_dtoa_r+0x98a>
 801538a:	0029      	movs	r1, r5
 801538c:	9803      	ldr	r0, [sp, #12]
 801538e:	f000 fe1b 	bl	8015fc8 <_Bfree>
 8015392:	0039      	movs	r1, r7
 8015394:	9803      	ldr	r0, [sp, #12]
 8015396:	f000 fe17 	bl	8015fc8 <_Bfree>
 801539a:	e691      	b.n	80150c0 <_dtoa_r+0x6b8>
 801539c:	2600      	movs	r6, #0
 801539e:	0037      	movs	r7, r6
 80153a0:	e7e2      	b.n	8015368 <_dtoa_r+0x960>
 80153a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153a4:	0037      	movs	r7, r6
 80153a6:	9302      	str	r3, [sp, #8]
 80153a8:	e587      	b.n	8014eba <_dtoa_r+0x4b2>
 80153aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d100      	bne.n	80153b2 <_dtoa_r+0x9aa>
 80153b0:	e0bc      	b.n	801552c <_dtoa_r+0xb24>
 80153b2:	9b08      	ldr	r3, [sp, #32]
 80153b4:	930c      	str	r3, [sp, #48]	; 0x30
 80153b6:	2c00      	cmp	r4, #0
 80153b8:	dd05      	ble.n	80153c6 <_dtoa_r+0x9be>
 80153ba:	0039      	movs	r1, r7
 80153bc:	0022      	movs	r2, r4
 80153be:	9803      	ldr	r0, [sp, #12]
 80153c0:	f000 ffec 	bl	801639c <__lshift>
 80153c4:	0007      	movs	r7, r0
 80153c6:	0038      	movs	r0, r7
 80153c8:	2d00      	cmp	r5, #0
 80153ca:	d01e      	beq.n	801540a <_dtoa_r+0xa02>
 80153cc:	6879      	ldr	r1, [r7, #4]
 80153ce:	9803      	ldr	r0, [sp, #12]
 80153d0:	f000 fdd2 	bl	8015f78 <_Balloc>
 80153d4:	1e04      	subs	r4, r0, #0
 80153d6:	d10b      	bne.n	80153f0 <_dtoa_r+0x9e8>
 80153d8:	0002      	movs	r2, r0
 80153da:	4b03      	ldr	r3, [pc, #12]	; (80153e8 <_dtoa_r+0x9e0>)
 80153dc:	4903      	ldr	r1, [pc, #12]	; (80153ec <_dtoa_r+0x9e4>)
 80153de:	e444      	b.n	8014c6a <_dtoa_r+0x262>
 80153e0:	40240000 	.word	0x40240000
 80153e4:	00000433 	.word	0x00000433
 80153e8:	0801af11 	.word	0x0801af11
 80153ec:	000002ea 	.word	0x000002ea
 80153f0:	0039      	movs	r1, r7
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	310c      	adds	r1, #12
 80153f6:	1c9a      	adds	r2, r3, #2
 80153f8:	0092      	lsls	r2, r2, #2
 80153fa:	300c      	adds	r0, #12
 80153fc:	f7fc fe50 	bl	80120a0 <memcpy>
 8015400:	2201      	movs	r2, #1
 8015402:	0021      	movs	r1, r4
 8015404:	9803      	ldr	r0, [sp, #12]
 8015406:	f000 ffc9 	bl	801639c <__lshift>
 801540a:	003d      	movs	r5, r7
 801540c:	0007      	movs	r7, r0
 801540e:	9b05      	ldr	r3, [sp, #20]
 8015410:	9308      	str	r3, [sp, #32]
 8015412:	0031      	movs	r1, r6
 8015414:	9804      	ldr	r0, [sp, #16]
 8015416:	f7ff fa6b 	bl	80148f0 <quorem>
 801541a:	0029      	movs	r1, r5
 801541c:	0004      	movs	r4, r0
 801541e:	900d      	str	r0, [sp, #52]	; 0x34
 8015420:	9804      	ldr	r0, [sp, #16]
 8015422:	f001 f82b 	bl	801647c <__mcmp>
 8015426:	003a      	movs	r2, r7
 8015428:	900e      	str	r0, [sp, #56]	; 0x38
 801542a:	0031      	movs	r1, r6
 801542c:	9803      	ldr	r0, [sp, #12]
 801542e:	f001 f841 	bl	80164b4 <__mdiff>
 8015432:	68c3      	ldr	r3, [r0, #12]
 8015434:	3430      	adds	r4, #48	; 0x30
 8015436:	930f      	str	r3, [sp, #60]	; 0x3c
 8015438:	2301      	movs	r3, #1
 801543a:	9309      	str	r3, [sp, #36]	; 0x24
 801543c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801543e:	9006      	str	r0, [sp, #24]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d104      	bne.n	801544e <_dtoa_r+0xa46>
 8015444:	0001      	movs	r1, r0
 8015446:	9804      	ldr	r0, [sp, #16]
 8015448:	f001 f818 	bl	801647c <__mcmp>
 801544c:	9009      	str	r0, [sp, #36]	; 0x24
 801544e:	9803      	ldr	r0, [sp, #12]
 8015450:	9906      	ldr	r1, [sp, #24]
 8015452:	f000 fdb9 	bl	8015fc8 <_Bfree>
 8015456:	2301      	movs	r3, #1
 8015458:	980a      	ldr	r0, [sp, #40]	; 0x28
 801545a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801545c:	4018      	ands	r0, r3
 801545e:	9b08      	ldr	r3, [sp, #32]
 8015460:	3301      	adds	r3, #1
 8015462:	9306      	str	r3, [sp, #24]
 8015464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015466:	4313      	orrs	r3, r2
 8015468:	4303      	orrs	r3, r0
 801546a:	d109      	bne.n	8015480 <_dtoa_r+0xa78>
 801546c:	2c39      	cmp	r4, #57	; 0x39
 801546e:	d021      	beq.n	80154b4 <_dtoa_r+0xaac>
 8015470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015472:	2b00      	cmp	r3, #0
 8015474:	dd01      	ble.n	801547a <_dtoa_r+0xa72>
 8015476:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015478:	3431      	adds	r4, #49	; 0x31
 801547a:	9b08      	ldr	r3, [sp, #32]
 801547c:	701c      	strb	r4, [r3, #0]
 801547e:	e779      	b.n	8015374 <_dtoa_r+0x96c>
 8015480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015482:	2b00      	cmp	r3, #0
 8015484:	db03      	blt.n	801548e <_dtoa_r+0xa86>
 8015486:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015488:	4313      	orrs	r3, r2
 801548a:	4303      	orrs	r3, r0
 801548c:	d11e      	bne.n	80154cc <_dtoa_r+0xac4>
 801548e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015490:	2b00      	cmp	r3, #0
 8015492:	ddf2      	ble.n	801547a <_dtoa_r+0xa72>
 8015494:	9904      	ldr	r1, [sp, #16]
 8015496:	2201      	movs	r2, #1
 8015498:	9803      	ldr	r0, [sp, #12]
 801549a:	f000 ff7f 	bl	801639c <__lshift>
 801549e:	0031      	movs	r1, r6
 80154a0:	9004      	str	r0, [sp, #16]
 80154a2:	f000 ffeb 	bl	801647c <__mcmp>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	dc02      	bgt.n	80154b0 <_dtoa_r+0xaa8>
 80154aa:	d1e6      	bne.n	801547a <_dtoa_r+0xa72>
 80154ac:	07e3      	lsls	r3, r4, #31
 80154ae:	d5e4      	bpl.n	801547a <_dtoa_r+0xa72>
 80154b0:	2c39      	cmp	r4, #57	; 0x39
 80154b2:	d1e0      	bne.n	8015476 <_dtoa_r+0xa6e>
 80154b4:	2339      	movs	r3, #57	; 0x39
 80154b6:	9a08      	ldr	r2, [sp, #32]
 80154b8:	7013      	strb	r3, [r2, #0]
 80154ba:	9b06      	ldr	r3, [sp, #24]
 80154bc:	9306      	str	r3, [sp, #24]
 80154be:	3b01      	subs	r3, #1
 80154c0:	781a      	ldrb	r2, [r3, #0]
 80154c2:	2a39      	cmp	r2, #57	; 0x39
 80154c4:	d067      	beq.n	8015596 <_dtoa_r+0xb8e>
 80154c6:	3201      	adds	r2, #1
 80154c8:	701a      	strb	r2, [r3, #0]
 80154ca:	e753      	b.n	8015374 <_dtoa_r+0x96c>
 80154cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	dd03      	ble.n	80154da <_dtoa_r+0xad2>
 80154d2:	2c39      	cmp	r4, #57	; 0x39
 80154d4:	d0ee      	beq.n	80154b4 <_dtoa_r+0xaac>
 80154d6:	3401      	adds	r4, #1
 80154d8:	e7cf      	b.n	801547a <_dtoa_r+0xa72>
 80154da:	9b08      	ldr	r3, [sp, #32]
 80154dc:	9a05      	ldr	r2, [sp, #20]
 80154de:	701c      	strb	r4, [r3, #0]
 80154e0:	2301      	movs	r3, #1
 80154e2:	1a9b      	subs	r3, r3, r2
 80154e4:	9a08      	ldr	r2, [sp, #32]
 80154e6:	189b      	adds	r3, r3, r2
 80154e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d03e      	beq.n	801556c <_dtoa_r+0xb64>
 80154ee:	2300      	movs	r3, #0
 80154f0:	220a      	movs	r2, #10
 80154f2:	9904      	ldr	r1, [sp, #16]
 80154f4:	9803      	ldr	r0, [sp, #12]
 80154f6:	f000 fd71 	bl	8015fdc <__multadd>
 80154fa:	2300      	movs	r3, #0
 80154fc:	9004      	str	r0, [sp, #16]
 80154fe:	220a      	movs	r2, #10
 8015500:	0029      	movs	r1, r5
 8015502:	9803      	ldr	r0, [sp, #12]
 8015504:	42bd      	cmp	r5, r7
 8015506:	d106      	bne.n	8015516 <_dtoa_r+0xb0e>
 8015508:	f000 fd68 	bl	8015fdc <__multadd>
 801550c:	0005      	movs	r5, r0
 801550e:	0007      	movs	r7, r0
 8015510:	9b06      	ldr	r3, [sp, #24]
 8015512:	9308      	str	r3, [sp, #32]
 8015514:	e77d      	b.n	8015412 <_dtoa_r+0xa0a>
 8015516:	f000 fd61 	bl	8015fdc <__multadd>
 801551a:	0039      	movs	r1, r7
 801551c:	0005      	movs	r5, r0
 801551e:	2300      	movs	r3, #0
 8015520:	220a      	movs	r2, #10
 8015522:	9803      	ldr	r0, [sp, #12]
 8015524:	f000 fd5a 	bl	8015fdc <__multadd>
 8015528:	0007      	movs	r7, r0
 801552a:	e7f1      	b.n	8015510 <_dtoa_r+0xb08>
 801552c:	9b08      	ldr	r3, [sp, #32]
 801552e:	930c      	str	r3, [sp, #48]	; 0x30
 8015530:	2500      	movs	r5, #0
 8015532:	0031      	movs	r1, r6
 8015534:	9804      	ldr	r0, [sp, #16]
 8015536:	f7ff f9db 	bl	80148f0 <quorem>
 801553a:	9b05      	ldr	r3, [sp, #20]
 801553c:	3030      	adds	r0, #48	; 0x30
 801553e:	5558      	strb	r0, [r3, r5]
 8015540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015542:	3501      	adds	r5, #1
 8015544:	0004      	movs	r4, r0
 8015546:	42ab      	cmp	r3, r5
 8015548:	dd07      	ble.n	801555a <_dtoa_r+0xb52>
 801554a:	2300      	movs	r3, #0
 801554c:	220a      	movs	r2, #10
 801554e:	9904      	ldr	r1, [sp, #16]
 8015550:	9803      	ldr	r0, [sp, #12]
 8015552:	f000 fd43 	bl	8015fdc <__multadd>
 8015556:	9004      	str	r0, [sp, #16]
 8015558:	e7eb      	b.n	8015532 <_dtoa_r+0xb2a>
 801555a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801555c:	2001      	movs	r0, #1
 801555e:	2b00      	cmp	r3, #0
 8015560:	dd00      	ble.n	8015564 <_dtoa_r+0xb5c>
 8015562:	0018      	movs	r0, r3
 8015564:	2500      	movs	r5, #0
 8015566:	9b05      	ldr	r3, [sp, #20]
 8015568:	181b      	adds	r3, r3, r0
 801556a:	9306      	str	r3, [sp, #24]
 801556c:	9904      	ldr	r1, [sp, #16]
 801556e:	2201      	movs	r2, #1
 8015570:	9803      	ldr	r0, [sp, #12]
 8015572:	f000 ff13 	bl	801639c <__lshift>
 8015576:	0031      	movs	r1, r6
 8015578:	9004      	str	r0, [sp, #16]
 801557a:	f000 ff7f 	bl	801647c <__mcmp>
 801557e:	2800      	cmp	r0, #0
 8015580:	dc9b      	bgt.n	80154ba <_dtoa_r+0xab2>
 8015582:	d101      	bne.n	8015588 <_dtoa_r+0xb80>
 8015584:	07e3      	lsls	r3, r4, #31
 8015586:	d498      	bmi.n	80154ba <_dtoa_r+0xab2>
 8015588:	9b06      	ldr	r3, [sp, #24]
 801558a:	9306      	str	r3, [sp, #24]
 801558c:	3b01      	subs	r3, #1
 801558e:	781a      	ldrb	r2, [r3, #0]
 8015590:	2a30      	cmp	r2, #48	; 0x30
 8015592:	d0fa      	beq.n	801558a <_dtoa_r+0xb82>
 8015594:	e6ee      	b.n	8015374 <_dtoa_r+0x96c>
 8015596:	9a05      	ldr	r2, [sp, #20]
 8015598:	429a      	cmp	r2, r3
 801559a:	d18f      	bne.n	80154bc <_dtoa_r+0xab4>
 801559c:	9b02      	ldr	r3, [sp, #8]
 801559e:	3301      	adds	r3, #1
 80155a0:	9302      	str	r3, [sp, #8]
 80155a2:	2331      	movs	r3, #49	; 0x31
 80155a4:	7013      	strb	r3, [r2, #0]
 80155a6:	e6e5      	b.n	8015374 <_dtoa_r+0x96c>
 80155a8:	4b08      	ldr	r3, [pc, #32]	; (80155cc <_dtoa_r+0xbc4>)
 80155aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80155ac:	9305      	str	r3, [sp, #20]
 80155ae:	4b08      	ldr	r3, [pc, #32]	; (80155d0 <_dtoa_r+0xbc8>)
 80155b0:	2a00      	cmp	r2, #0
 80155b2:	d001      	beq.n	80155b8 <_dtoa_r+0xbb0>
 80155b4:	f7ff fa5a 	bl	8014a6c <_dtoa_r+0x64>
 80155b8:	f7ff fa5a 	bl	8014a70 <_dtoa_r+0x68>
 80155bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155be:	2b00      	cmp	r3, #0
 80155c0:	dcb6      	bgt.n	8015530 <_dtoa_r+0xb28>
 80155c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	dd00      	ble.n	80155ca <_dtoa_r+0xbc2>
 80155c8:	e6be      	b.n	8015348 <_dtoa_r+0x940>
 80155ca:	e7b1      	b.n	8015530 <_dtoa_r+0xb28>
 80155cc:	0801af08 	.word	0x0801af08
 80155d0:	0801af10 	.word	0x0801af10

080155d4 <__errno>:
 80155d4:	4b01      	ldr	r3, [pc, #4]	; (80155dc <__errno+0x8>)
 80155d6:	6818      	ldr	r0, [r3, #0]
 80155d8:	4770      	bx	lr
 80155da:	46c0      	nop			; (mov r8, r8)
 80155dc:	200000a8 	.word	0x200000a8

080155e0 <__libc_fini_array>:
 80155e0:	b570      	push	{r4, r5, r6, lr}
 80155e2:	4d07      	ldr	r5, [pc, #28]	; (8015600 <__libc_fini_array+0x20>)
 80155e4:	4c07      	ldr	r4, [pc, #28]	; (8015604 <__libc_fini_array+0x24>)
 80155e6:	1b64      	subs	r4, r4, r5
 80155e8:	10a4      	asrs	r4, r4, #2
 80155ea:	2c00      	cmp	r4, #0
 80155ec:	d102      	bne.n	80155f4 <__libc_fini_array+0x14>
 80155ee:	f002 fe49 	bl	8018284 <_fini>
 80155f2:	bd70      	pop	{r4, r5, r6, pc}
 80155f4:	3c01      	subs	r4, #1
 80155f6:	00a3      	lsls	r3, r4, #2
 80155f8:	58eb      	ldr	r3, [r5, r3]
 80155fa:	4798      	blx	r3
 80155fc:	e7f5      	b.n	80155ea <__libc_fini_array+0xa>
 80155fe:	46c0      	nop			; (mov r8, r8)
 8015600:	0801b1c8 	.word	0x0801b1c8
 8015604:	0801b1cc 	.word	0x0801b1cc

08015608 <_malloc_trim_r>:
 8015608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801560a:	0004      	movs	r4, r0
 801560c:	2008      	movs	r0, #8
 801560e:	000d      	movs	r5, r1
 8015610:	f7ff f94e 	bl	80148b0 <sysconf>
 8015614:	0006      	movs	r6, r0
 8015616:	0020      	movs	r0, r4
 8015618:	f7fc fd54 	bl	80120c4 <__malloc_lock>
 801561c:	2203      	movs	r2, #3
 801561e:	4f21      	ldr	r7, [pc, #132]	; (80156a4 <_malloc_trim_r+0x9c>)
 8015620:	0031      	movs	r1, r6
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	4393      	bics	r3, r2
 8015628:	1b58      	subs	r0, r3, r5
 801562a:	3811      	subs	r0, #17
 801562c:	1980      	adds	r0, r0, r6
 801562e:	9301      	str	r3, [sp, #4]
 8015630:	f7ea fd8e 	bl	8000150 <__udivsi3>
 8015634:	1e45      	subs	r5, r0, #1
 8015636:	4375      	muls	r5, r6
 8015638:	42ae      	cmp	r6, r5
 801563a:	dd04      	ble.n	8015646 <_malloc_trim_r+0x3e>
 801563c:	0020      	movs	r0, r4
 801563e:	f7fc fd49 	bl	80120d4 <__malloc_unlock>
 8015642:	2000      	movs	r0, #0
 8015644:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015646:	2100      	movs	r1, #0
 8015648:	0020      	movs	r0, r4
 801564a:	f7fc ff15 	bl	8012478 <_sbrk_r>
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	9a01      	ldr	r2, [sp, #4]
 8015652:	189b      	adds	r3, r3, r2
 8015654:	4298      	cmp	r0, r3
 8015656:	d1f1      	bne.n	801563c <_malloc_trim_r+0x34>
 8015658:	0020      	movs	r0, r4
 801565a:	4269      	negs	r1, r5
 801565c:	f7fc ff0c 	bl	8012478 <_sbrk_r>
 8015660:	1c43      	adds	r3, r0, #1
 8015662:	d110      	bne.n	8015686 <_malloc_trim_r+0x7e>
 8015664:	2100      	movs	r1, #0
 8015666:	0020      	movs	r0, r4
 8015668:	f7fc ff06 	bl	8012478 <_sbrk_r>
 801566c:	68ba      	ldr	r2, [r7, #8]
 801566e:	1a81      	subs	r1, r0, r2
 8015670:	290f      	cmp	r1, #15
 8015672:	dde3      	ble.n	801563c <_malloc_trim_r+0x34>
 8015674:	4b0c      	ldr	r3, [pc, #48]	; (80156a8 <_malloc_trim_r+0xa0>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	1ac0      	subs	r0, r0, r3
 801567a:	4b0c      	ldr	r3, [pc, #48]	; (80156ac <_malloc_trim_r+0xa4>)
 801567c:	6018      	str	r0, [r3, #0]
 801567e:	2301      	movs	r3, #1
 8015680:	430b      	orrs	r3, r1
 8015682:	6053      	str	r3, [r2, #4]
 8015684:	e7da      	b.n	801563c <_malloc_trim_r+0x34>
 8015686:	2601      	movs	r6, #1
 8015688:	9b01      	ldr	r3, [sp, #4]
 801568a:	68ba      	ldr	r2, [r7, #8]
 801568c:	1b5b      	subs	r3, r3, r5
 801568e:	4333      	orrs	r3, r6
 8015690:	6053      	str	r3, [r2, #4]
 8015692:	4b06      	ldr	r3, [pc, #24]	; (80156ac <_malloc_trim_r+0xa4>)
 8015694:	0020      	movs	r0, r4
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	1b55      	subs	r5, r2, r5
 801569a:	601d      	str	r5, [r3, #0]
 801569c:	f7fc fd1a 	bl	80120d4 <__malloc_unlock>
 80156a0:	0030      	movs	r0, r6
 80156a2:	e7cf      	b.n	8015644 <_malloc_trim_r+0x3c>
 80156a4:	200004d8 	.word	0x200004d8
 80156a8:	200008e0 	.word	0x200008e0
 80156ac:	2000688c 	.word	0x2000688c

080156b0 <_free_r>:
 80156b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156b2:	1e0d      	subs	r5, r1, #0
 80156b4:	9001      	str	r0, [sp, #4]
 80156b6:	d02d      	beq.n	8015714 <_free_r+0x64>
 80156b8:	f7fc fd04 	bl	80120c4 <__malloc_lock>
 80156bc:	2301      	movs	r3, #1
 80156be:	0029      	movs	r1, r5
 80156c0:	469c      	mov	ip, r3
 80156c2:	3908      	subs	r1, #8
 80156c4:	684f      	ldr	r7, [r1, #4]
 80156c6:	4662      	mov	r2, ip
 80156c8:	003b      	movs	r3, r7
 80156ca:	4666      	mov	r6, ip
 80156cc:	4393      	bics	r3, r2
 80156ce:	18c8      	adds	r0, r1, r3
 80156d0:	6845      	ldr	r5, [r0, #4]
 80156d2:	3202      	adds	r2, #2
 80156d4:	4395      	bics	r5, r2
 80156d6:	4a4a      	ldr	r2, [pc, #296]	; (8015800 <_free_r+0x150>)
 80156d8:	4037      	ands	r7, r6
 80156da:	6896      	ldr	r6, [r2, #8]
 80156dc:	4286      	cmp	r6, r0
 80156de:	d11a      	bne.n	8015716 <_free_r+0x66>
 80156e0:	195b      	adds	r3, r3, r5
 80156e2:	2f00      	cmp	r7, #0
 80156e4:	d106      	bne.n	80156f4 <_free_r+0x44>
 80156e6:	6808      	ldr	r0, [r1, #0]
 80156e8:	1a09      	subs	r1, r1, r0
 80156ea:	688d      	ldr	r5, [r1, #8]
 80156ec:	181b      	adds	r3, r3, r0
 80156ee:	68c8      	ldr	r0, [r1, #12]
 80156f0:	60e8      	str	r0, [r5, #12]
 80156f2:	6085      	str	r5, [r0, #8]
 80156f4:	2001      	movs	r0, #1
 80156f6:	4318      	orrs	r0, r3
 80156f8:	6048      	str	r0, [r1, #4]
 80156fa:	6091      	str	r1, [r2, #8]
 80156fc:	4a41      	ldr	r2, [pc, #260]	; (8015804 <_free_r+0x154>)
 80156fe:	6812      	ldr	r2, [r2, #0]
 8015700:	429a      	cmp	r2, r3
 8015702:	d804      	bhi.n	801570e <_free_r+0x5e>
 8015704:	4b40      	ldr	r3, [pc, #256]	; (8015808 <_free_r+0x158>)
 8015706:	9801      	ldr	r0, [sp, #4]
 8015708:	6819      	ldr	r1, [r3, #0]
 801570a:	f7ff ff7d 	bl	8015608 <_malloc_trim_r>
 801570e:	9801      	ldr	r0, [sp, #4]
 8015710:	f7fc fce0 	bl	80120d4 <__malloc_unlock>
 8015714:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015716:	2600      	movs	r6, #0
 8015718:	6045      	str	r5, [r0, #4]
 801571a:	42b7      	cmp	r7, r6
 801571c:	d109      	bne.n	8015732 <_free_r+0x82>
 801571e:	680f      	ldr	r7, [r1, #0]
 8015720:	4c3a      	ldr	r4, [pc, #232]	; (801580c <_free_r+0x15c>)
 8015722:	1bc9      	subs	r1, r1, r7
 8015724:	19db      	adds	r3, r3, r7
 8015726:	688f      	ldr	r7, [r1, #8]
 8015728:	42a7      	cmp	r7, r4
 801572a:	d02c      	beq.n	8015786 <_free_r+0xd6>
 801572c:	68cc      	ldr	r4, [r1, #12]
 801572e:	60fc      	str	r4, [r7, #12]
 8015730:	60a7      	str	r7, [r4, #8]
 8015732:	1947      	adds	r7, r0, r5
 8015734:	687c      	ldr	r4, [r7, #4]
 8015736:	2701      	movs	r7, #1
 8015738:	423c      	tst	r4, r7
 801573a:	d10b      	bne.n	8015754 <_free_r+0xa4>
 801573c:	195b      	adds	r3, r3, r5
 801573e:	6885      	ldr	r5, [r0, #8]
 8015740:	2e00      	cmp	r6, #0
 8015742:	d122      	bne.n	801578a <_free_r+0xda>
 8015744:	4c31      	ldr	r4, [pc, #196]	; (801580c <_free_r+0x15c>)
 8015746:	42a5      	cmp	r5, r4
 8015748:	d11f      	bne.n	801578a <_free_r+0xda>
 801574a:	003e      	movs	r6, r7
 801574c:	6151      	str	r1, [r2, #20]
 801574e:	6111      	str	r1, [r2, #16]
 8015750:	60cd      	str	r5, [r1, #12]
 8015752:	608d      	str	r5, [r1, #8]
 8015754:	2501      	movs	r5, #1
 8015756:	0028      	movs	r0, r5
 8015758:	4318      	orrs	r0, r3
 801575a:	6048      	str	r0, [r1, #4]
 801575c:	50cb      	str	r3, [r1, r3]
 801575e:	2e00      	cmp	r6, #0
 8015760:	d1d5      	bne.n	801570e <_free_r+0x5e>
 8015762:	2080      	movs	r0, #128	; 0x80
 8015764:	0080      	lsls	r0, r0, #2
 8015766:	4283      	cmp	r3, r0
 8015768:	d213      	bcs.n	8015792 <_free_r+0xe2>
 801576a:	08d8      	lsrs	r0, r3, #3
 801576c:	095b      	lsrs	r3, r3, #5
 801576e:	409d      	lsls	r5, r3
 8015770:	6853      	ldr	r3, [r2, #4]
 8015772:	00c0      	lsls	r0, r0, #3
 8015774:	431d      	orrs	r5, r3
 8015776:	6055      	str	r5, [r2, #4]
 8015778:	1882      	adds	r2, r0, r2
 801577a:	6893      	ldr	r3, [r2, #8]
 801577c:	60ca      	str	r2, [r1, #12]
 801577e:	608b      	str	r3, [r1, #8]
 8015780:	6091      	str	r1, [r2, #8]
 8015782:	60d9      	str	r1, [r3, #12]
 8015784:	e7c3      	b.n	801570e <_free_r+0x5e>
 8015786:	4666      	mov	r6, ip
 8015788:	e7d3      	b.n	8015732 <_free_r+0x82>
 801578a:	68c0      	ldr	r0, [r0, #12]
 801578c:	60e8      	str	r0, [r5, #12]
 801578e:	6085      	str	r5, [r0, #8]
 8015790:	e7e0      	b.n	8015754 <_free_r+0xa4>
 8015792:	0a5d      	lsrs	r5, r3, #9
 8015794:	2d04      	cmp	r5, #4
 8015796:	d812      	bhi.n	80157be <_free_r+0x10e>
 8015798:	0998      	lsrs	r0, r3, #6
 801579a:	3038      	adds	r0, #56	; 0x38
 801579c:	00c6      	lsls	r6, r0, #3
 801579e:	18b6      	adds	r6, r6, r2
 80157a0:	68b5      	ldr	r5, [r6, #8]
 80157a2:	2703      	movs	r7, #3
 80157a4:	42ae      	cmp	r6, r5
 80157a6:	d125      	bne.n	80157f4 <_free_r+0x144>
 80157a8:	2301      	movs	r3, #1
 80157aa:	1080      	asrs	r0, r0, #2
 80157ac:	4083      	lsls	r3, r0
 80157ae:	6850      	ldr	r0, [r2, #4]
 80157b0:	4303      	orrs	r3, r0
 80157b2:	6053      	str	r3, [r2, #4]
 80157b4:	60ce      	str	r6, [r1, #12]
 80157b6:	608d      	str	r5, [r1, #8]
 80157b8:	60b1      	str	r1, [r6, #8]
 80157ba:	60e9      	str	r1, [r5, #12]
 80157bc:	e7a7      	b.n	801570e <_free_r+0x5e>
 80157be:	2d14      	cmp	r5, #20
 80157c0:	d802      	bhi.n	80157c8 <_free_r+0x118>
 80157c2:	0028      	movs	r0, r5
 80157c4:	305b      	adds	r0, #91	; 0x5b
 80157c6:	e7e9      	b.n	801579c <_free_r+0xec>
 80157c8:	2d54      	cmp	r5, #84	; 0x54
 80157ca:	d802      	bhi.n	80157d2 <_free_r+0x122>
 80157cc:	0b18      	lsrs	r0, r3, #12
 80157ce:	306e      	adds	r0, #110	; 0x6e
 80157d0:	e7e4      	b.n	801579c <_free_r+0xec>
 80157d2:	20aa      	movs	r0, #170	; 0xaa
 80157d4:	0040      	lsls	r0, r0, #1
 80157d6:	4285      	cmp	r5, r0
 80157d8:	d802      	bhi.n	80157e0 <_free_r+0x130>
 80157da:	0bd8      	lsrs	r0, r3, #15
 80157dc:	3077      	adds	r0, #119	; 0x77
 80157de:	e7dd      	b.n	801579c <_free_r+0xec>
 80157e0:	4e0b      	ldr	r6, [pc, #44]	; (8015810 <_free_r+0x160>)
 80157e2:	207e      	movs	r0, #126	; 0x7e
 80157e4:	42b5      	cmp	r5, r6
 80157e6:	d8d9      	bhi.n	801579c <_free_r+0xec>
 80157e8:	0c98      	lsrs	r0, r3, #18
 80157ea:	307c      	adds	r0, #124	; 0x7c
 80157ec:	e7d6      	b.n	801579c <_free_r+0xec>
 80157ee:	68ad      	ldr	r5, [r5, #8]
 80157f0:	42ae      	cmp	r6, r5
 80157f2:	d003      	beq.n	80157fc <_free_r+0x14c>
 80157f4:	686a      	ldr	r2, [r5, #4]
 80157f6:	43ba      	bics	r2, r7
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d8f8      	bhi.n	80157ee <_free_r+0x13e>
 80157fc:	68ee      	ldr	r6, [r5, #12]
 80157fe:	e7d9      	b.n	80157b4 <_free_r+0x104>
 8015800:	200004d8 	.word	0x200004d8
 8015804:	200008e4 	.word	0x200008e4
 8015808:	200068bc 	.word	0x200068bc
 801580c:	200004e0 	.word	0x200004e0
 8015810:	00000554 	.word	0x00000554

08015814 <rshift>:
 8015814:	0002      	movs	r2, r0
 8015816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015818:	6907      	ldr	r7, [r0, #16]
 801581a:	3214      	adds	r2, #20
 801581c:	0013      	movs	r3, r2
 801581e:	b085      	sub	sp, #20
 8015820:	114e      	asrs	r6, r1, #5
 8015822:	42b7      	cmp	r7, r6
 8015824:	dd31      	ble.n	801588a <rshift+0x76>
 8015826:	00b3      	lsls	r3, r6, #2
 8015828:	18d3      	adds	r3, r2, r3
 801582a:	251f      	movs	r5, #31
 801582c:	9301      	str	r3, [sp, #4]
 801582e:	000b      	movs	r3, r1
 8015830:	00bc      	lsls	r4, r7, #2
 8015832:	402b      	ands	r3, r5
 8015834:	1914      	adds	r4, r2, r4
 8015836:	9302      	str	r3, [sp, #8]
 8015838:	4229      	tst	r1, r5
 801583a:	d10c      	bne.n	8015856 <rshift+0x42>
 801583c:	0015      	movs	r5, r2
 801583e:	9901      	ldr	r1, [sp, #4]
 8015840:	428c      	cmp	r4, r1
 8015842:	d838      	bhi.n	80158b6 <rshift+0xa2>
 8015844:	9901      	ldr	r1, [sp, #4]
 8015846:	2300      	movs	r3, #0
 8015848:	3903      	subs	r1, #3
 801584a:	428c      	cmp	r4, r1
 801584c:	d301      	bcc.n	8015852 <rshift+0x3e>
 801584e:	1bbb      	subs	r3, r7, r6
 8015850:	009b      	lsls	r3, r3, #2
 8015852:	18d3      	adds	r3, r2, r3
 8015854:	e019      	b.n	801588a <rshift+0x76>
 8015856:	2120      	movs	r1, #32
 8015858:	9b02      	ldr	r3, [sp, #8]
 801585a:	9d01      	ldr	r5, [sp, #4]
 801585c:	1acb      	subs	r3, r1, r3
 801585e:	9303      	str	r3, [sp, #12]
 8015860:	cd02      	ldmia	r5!, {r1}
 8015862:	9b02      	ldr	r3, [sp, #8]
 8015864:	4694      	mov	ip, r2
 8015866:	40d9      	lsrs	r1, r3
 8015868:	9100      	str	r1, [sp, #0]
 801586a:	42ac      	cmp	r4, r5
 801586c:	d816      	bhi.n	801589c <rshift+0x88>
 801586e:	9d01      	ldr	r5, [sp, #4]
 8015870:	2300      	movs	r3, #0
 8015872:	3501      	adds	r5, #1
 8015874:	42ac      	cmp	r4, r5
 8015876:	d302      	bcc.n	801587e <rshift+0x6a>
 8015878:	1bbb      	subs	r3, r7, r6
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	3b04      	subs	r3, #4
 801587e:	9900      	ldr	r1, [sp, #0]
 8015880:	18d3      	adds	r3, r2, r3
 8015882:	6019      	str	r1, [r3, #0]
 8015884:	2900      	cmp	r1, #0
 8015886:	d000      	beq.n	801588a <rshift+0x76>
 8015888:	3304      	adds	r3, #4
 801588a:	1a99      	subs	r1, r3, r2
 801588c:	1089      	asrs	r1, r1, #2
 801588e:	6101      	str	r1, [r0, #16]
 8015890:	4293      	cmp	r3, r2
 8015892:	d101      	bne.n	8015898 <rshift+0x84>
 8015894:	2300      	movs	r3, #0
 8015896:	6143      	str	r3, [r0, #20]
 8015898:	b005      	add	sp, #20
 801589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	9903      	ldr	r1, [sp, #12]
 80158a0:	408b      	lsls	r3, r1
 80158a2:	9900      	ldr	r1, [sp, #0]
 80158a4:	4319      	orrs	r1, r3
 80158a6:	4663      	mov	r3, ip
 80158a8:	c302      	stmia	r3!, {r1}
 80158aa:	469c      	mov	ip, r3
 80158ac:	cd02      	ldmia	r5!, {r1}
 80158ae:	9b02      	ldr	r3, [sp, #8]
 80158b0:	40d9      	lsrs	r1, r3
 80158b2:	9100      	str	r1, [sp, #0]
 80158b4:	e7d9      	b.n	801586a <rshift+0x56>
 80158b6:	c908      	ldmia	r1!, {r3}
 80158b8:	c508      	stmia	r5!, {r3}
 80158ba:	e7c1      	b.n	8015840 <rshift+0x2c>

080158bc <__hexdig_fun>:
 80158bc:	0002      	movs	r2, r0
 80158be:	3a30      	subs	r2, #48	; 0x30
 80158c0:	0003      	movs	r3, r0
 80158c2:	2a09      	cmp	r2, #9
 80158c4:	d802      	bhi.n	80158cc <__hexdig_fun+0x10>
 80158c6:	3b20      	subs	r3, #32
 80158c8:	b2d8      	uxtb	r0, r3
 80158ca:	4770      	bx	lr
 80158cc:	0002      	movs	r2, r0
 80158ce:	3a61      	subs	r2, #97	; 0x61
 80158d0:	2a05      	cmp	r2, #5
 80158d2:	d801      	bhi.n	80158d8 <__hexdig_fun+0x1c>
 80158d4:	3b47      	subs	r3, #71	; 0x47
 80158d6:	e7f7      	b.n	80158c8 <__hexdig_fun+0xc>
 80158d8:	001a      	movs	r2, r3
 80158da:	3a41      	subs	r2, #65	; 0x41
 80158dc:	2000      	movs	r0, #0
 80158de:	2a05      	cmp	r2, #5
 80158e0:	d8f3      	bhi.n	80158ca <__hexdig_fun+0xe>
 80158e2:	3b27      	subs	r3, #39	; 0x27
 80158e4:	e7f0      	b.n	80158c8 <__hexdig_fun+0xc>
	...

080158e8 <__gethex>:
 80158e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ea:	b08d      	sub	sp, #52	; 0x34
 80158ec:	930a      	str	r3, [sp, #40]	; 0x28
 80158ee:	4bbd      	ldr	r3, [pc, #756]	; (8015be4 <__gethex+0x2fc>)
 80158f0:	9005      	str	r0, [sp, #20]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	9109      	str	r1, [sp, #36]	; 0x24
 80158f6:	0018      	movs	r0, r3
 80158f8:	9202      	str	r2, [sp, #8]
 80158fa:	9307      	str	r3, [sp, #28]
 80158fc:	f7ea fc0c 	bl	8000118 <strlen>
 8015900:	2202      	movs	r2, #2
 8015902:	9b07      	ldr	r3, [sp, #28]
 8015904:	4252      	negs	r2, r2
 8015906:	181b      	adds	r3, r3, r0
 8015908:	3b01      	subs	r3, #1
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	9003      	str	r0, [sp, #12]
 801590e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015912:	6819      	ldr	r1, [r3, #0]
 8015914:	1c8b      	adds	r3, r1, #2
 8015916:	1a52      	subs	r2, r2, r1
 8015918:	18d1      	adds	r1, r2, r3
 801591a:	9301      	str	r3, [sp, #4]
 801591c:	9108      	str	r1, [sp, #32]
 801591e:	9901      	ldr	r1, [sp, #4]
 8015920:	3301      	adds	r3, #1
 8015922:	7808      	ldrb	r0, [r1, #0]
 8015924:	2830      	cmp	r0, #48	; 0x30
 8015926:	d0f7      	beq.n	8015918 <__gethex+0x30>
 8015928:	f7ff ffc8 	bl	80158bc <__hexdig_fun>
 801592c:	1e04      	subs	r4, r0, #0
 801592e:	d13e      	bne.n	80159ae <__gethex+0xc6>
 8015930:	9a03      	ldr	r2, [sp, #12]
 8015932:	9907      	ldr	r1, [sp, #28]
 8015934:	9801      	ldr	r0, [sp, #4]
 8015936:	f7fc fdf4 	bl	8012522 <strncmp>
 801593a:	1e07      	subs	r7, r0, #0
 801593c:	d000      	beq.n	8015940 <__gethex+0x58>
 801593e:	e06f      	b.n	8015a20 <__gethex+0x138>
 8015940:	9b01      	ldr	r3, [sp, #4]
 8015942:	9a03      	ldr	r2, [sp, #12]
 8015944:	5c98      	ldrb	r0, [r3, r2]
 8015946:	189d      	adds	r5, r3, r2
 8015948:	f7ff ffb8 	bl	80158bc <__hexdig_fun>
 801594c:	2301      	movs	r3, #1
 801594e:	9304      	str	r3, [sp, #16]
 8015950:	2800      	cmp	r0, #0
 8015952:	d034      	beq.n	80159be <__gethex+0xd6>
 8015954:	9501      	str	r5, [sp, #4]
 8015956:	9b01      	ldr	r3, [sp, #4]
 8015958:	7818      	ldrb	r0, [r3, #0]
 801595a:	2830      	cmp	r0, #48	; 0x30
 801595c:	d009      	beq.n	8015972 <__gethex+0x8a>
 801595e:	f7ff ffad 	bl	80158bc <__hexdig_fun>
 8015962:	4243      	negs	r3, r0
 8015964:	4143      	adcs	r3, r0
 8015966:	9304      	str	r3, [sp, #16]
 8015968:	2301      	movs	r3, #1
 801596a:	002c      	movs	r4, r5
 801596c:	9308      	str	r3, [sp, #32]
 801596e:	9d01      	ldr	r5, [sp, #4]
 8015970:	e004      	b.n	801597c <__gethex+0x94>
 8015972:	9b01      	ldr	r3, [sp, #4]
 8015974:	3301      	adds	r3, #1
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	e7ed      	b.n	8015956 <__gethex+0x6e>
 801597a:	3501      	adds	r5, #1
 801597c:	7828      	ldrb	r0, [r5, #0]
 801597e:	f7ff ff9d 	bl	80158bc <__hexdig_fun>
 8015982:	1e07      	subs	r7, r0, #0
 8015984:	d1f9      	bne.n	801597a <__gethex+0x92>
 8015986:	0028      	movs	r0, r5
 8015988:	9a03      	ldr	r2, [sp, #12]
 801598a:	9907      	ldr	r1, [sp, #28]
 801598c:	f7fc fdc9 	bl	8012522 <strncmp>
 8015990:	2800      	cmp	r0, #0
 8015992:	d112      	bne.n	80159ba <__gethex+0xd2>
 8015994:	2c00      	cmp	r4, #0
 8015996:	d107      	bne.n	80159a8 <__gethex+0xc0>
 8015998:	9b03      	ldr	r3, [sp, #12]
 801599a:	18ed      	adds	r5, r5, r3
 801599c:	002c      	movs	r4, r5
 801599e:	7828      	ldrb	r0, [r5, #0]
 80159a0:	f7ff ff8c 	bl	80158bc <__hexdig_fun>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d106      	bne.n	80159b6 <__gethex+0xce>
 80159a8:	1b67      	subs	r7, r4, r5
 80159aa:	00bf      	lsls	r7, r7, #2
 80159ac:	e007      	b.n	80159be <__gethex+0xd6>
 80159ae:	2300      	movs	r3, #0
 80159b0:	001c      	movs	r4, r3
 80159b2:	9304      	str	r3, [sp, #16]
 80159b4:	e7db      	b.n	801596e <__gethex+0x86>
 80159b6:	3501      	adds	r5, #1
 80159b8:	e7f1      	b.n	801599e <__gethex+0xb6>
 80159ba:	2c00      	cmp	r4, #0
 80159bc:	d1f4      	bne.n	80159a8 <__gethex+0xc0>
 80159be:	2220      	movs	r2, #32
 80159c0:	782b      	ldrb	r3, [r5, #0]
 80159c2:	002e      	movs	r6, r5
 80159c4:	4393      	bics	r3, r2
 80159c6:	2b50      	cmp	r3, #80	; 0x50
 80159c8:	d11d      	bne.n	8015a06 <__gethex+0x11e>
 80159ca:	786b      	ldrb	r3, [r5, #1]
 80159cc:	2b2b      	cmp	r3, #43	; 0x2b
 80159ce:	d02c      	beq.n	8015a2a <__gethex+0x142>
 80159d0:	2b2d      	cmp	r3, #45	; 0x2d
 80159d2:	d02e      	beq.n	8015a32 <__gethex+0x14a>
 80159d4:	2300      	movs	r3, #0
 80159d6:	1c6e      	adds	r6, r5, #1
 80159d8:	9306      	str	r3, [sp, #24]
 80159da:	7830      	ldrb	r0, [r6, #0]
 80159dc:	f7ff ff6e 	bl	80158bc <__hexdig_fun>
 80159e0:	1e43      	subs	r3, r0, #1
 80159e2:	b2db      	uxtb	r3, r3
 80159e4:	2b18      	cmp	r3, #24
 80159e6:	d82b      	bhi.n	8015a40 <__gethex+0x158>
 80159e8:	3810      	subs	r0, #16
 80159ea:	0004      	movs	r4, r0
 80159ec:	7870      	ldrb	r0, [r6, #1]
 80159ee:	f7ff ff65 	bl	80158bc <__hexdig_fun>
 80159f2:	1e43      	subs	r3, r0, #1
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	3601      	adds	r6, #1
 80159f8:	2b18      	cmp	r3, #24
 80159fa:	d91c      	bls.n	8015a36 <__gethex+0x14e>
 80159fc:	9b06      	ldr	r3, [sp, #24]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d000      	beq.n	8015a04 <__gethex+0x11c>
 8015a02:	4264      	negs	r4, r4
 8015a04:	193f      	adds	r7, r7, r4
 8015a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a08:	601e      	str	r6, [r3, #0]
 8015a0a:	9b04      	ldr	r3, [sp, #16]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d019      	beq.n	8015a44 <__gethex+0x15c>
 8015a10:	2600      	movs	r6, #0
 8015a12:	9b08      	ldr	r3, [sp, #32]
 8015a14:	42b3      	cmp	r3, r6
 8015a16:	d100      	bne.n	8015a1a <__gethex+0x132>
 8015a18:	3606      	adds	r6, #6
 8015a1a:	0030      	movs	r0, r6
 8015a1c:	b00d      	add	sp, #52	; 0x34
 8015a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a20:	2301      	movs	r3, #1
 8015a22:	0027      	movs	r7, r4
 8015a24:	9d01      	ldr	r5, [sp, #4]
 8015a26:	9304      	str	r3, [sp, #16]
 8015a28:	e7c9      	b.n	80159be <__gethex+0xd6>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	9306      	str	r3, [sp, #24]
 8015a2e:	1cae      	adds	r6, r5, #2
 8015a30:	e7d3      	b.n	80159da <__gethex+0xf2>
 8015a32:	2301      	movs	r3, #1
 8015a34:	e7fa      	b.n	8015a2c <__gethex+0x144>
 8015a36:	230a      	movs	r3, #10
 8015a38:	435c      	muls	r4, r3
 8015a3a:	1824      	adds	r4, r4, r0
 8015a3c:	3c10      	subs	r4, #16
 8015a3e:	e7d5      	b.n	80159ec <__gethex+0x104>
 8015a40:	002e      	movs	r6, r5
 8015a42:	e7e0      	b.n	8015a06 <__gethex+0x11e>
 8015a44:	9b01      	ldr	r3, [sp, #4]
 8015a46:	9904      	ldr	r1, [sp, #16]
 8015a48:	1aeb      	subs	r3, r5, r3
 8015a4a:	3b01      	subs	r3, #1
 8015a4c:	2b07      	cmp	r3, #7
 8015a4e:	dc0a      	bgt.n	8015a66 <__gethex+0x17e>
 8015a50:	9805      	ldr	r0, [sp, #20]
 8015a52:	f000 fa91 	bl	8015f78 <_Balloc>
 8015a56:	1e04      	subs	r4, r0, #0
 8015a58:	d108      	bne.n	8015a6c <__gethex+0x184>
 8015a5a:	0002      	movs	r2, r0
 8015a5c:	21de      	movs	r1, #222	; 0xde
 8015a5e:	4b62      	ldr	r3, [pc, #392]	; (8015be8 <__gethex+0x300>)
 8015a60:	4862      	ldr	r0, [pc, #392]	; (8015bec <__gethex+0x304>)
 8015a62:	f001 f80b 	bl	8016a7c <__assert_func>
 8015a66:	3101      	adds	r1, #1
 8015a68:	105b      	asrs	r3, r3, #1
 8015a6a:	e7ef      	b.n	8015a4c <__gethex+0x164>
 8015a6c:	0003      	movs	r3, r0
 8015a6e:	3314      	adds	r3, #20
 8015a70:	9304      	str	r3, [sp, #16]
 8015a72:	9309      	str	r3, [sp, #36]	; 0x24
 8015a74:	2300      	movs	r3, #0
 8015a76:	001e      	movs	r6, r3
 8015a78:	9306      	str	r3, [sp, #24]
 8015a7a:	9b01      	ldr	r3, [sp, #4]
 8015a7c:	42ab      	cmp	r3, r5
 8015a7e:	d340      	bcc.n	8015b02 <__gethex+0x21a>
 8015a80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015a82:	9b04      	ldr	r3, [sp, #16]
 8015a84:	c540      	stmia	r5!, {r6}
 8015a86:	1aed      	subs	r5, r5, r3
 8015a88:	10ad      	asrs	r5, r5, #2
 8015a8a:	0030      	movs	r0, r6
 8015a8c:	6125      	str	r5, [r4, #16]
 8015a8e:	f000 fb35 	bl	80160fc <__hi0bits>
 8015a92:	9b02      	ldr	r3, [sp, #8]
 8015a94:	016d      	lsls	r5, r5, #5
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	1a2e      	subs	r6, r5, r0
 8015a9a:	9301      	str	r3, [sp, #4]
 8015a9c:	429e      	cmp	r6, r3
 8015a9e:	dd5a      	ble.n	8015b56 <__gethex+0x26e>
 8015aa0:	1af6      	subs	r6, r6, r3
 8015aa2:	0031      	movs	r1, r6
 8015aa4:	0020      	movs	r0, r4
 8015aa6:	f000 febe 	bl	8016826 <__any_on>
 8015aaa:	1e05      	subs	r5, r0, #0
 8015aac:	d016      	beq.n	8015adc <__gethex+0x1f4>
 8015aae:	2501      	movs	r5, #1
 8015ab0:	211f      	movs	r1, #31
 8015ab2:	0028      	movs	r0, r5
 8015ab4:	1e73      	subs	r3, r6, #1
 8015ab6:	4019      	ands	r1, r3
 8015ab8:	4088      	lsls	r0, r1
 8015aba:	0001      	movs	r1, r0
 8015abc:	115a      	asrs	r2, r3, #5
 8015abe:	9804      	ldr	r0, [sp, #16]
 8015ac0:	0092      	lsls	r2, r2, #2
 8015ac2:	5812      	ldr	r2, [r2, r0]
 8015ac4:	420a      	tst	r2, r1
 8015ac6:	d009      	beq.n	8015adc <__gethex+0x1f4>
 8015ac8:	42ab      	cmp	r3, r5
 8015aca:	dd06      	ble.n	8015ada <__gethex+0x1f2>
 8015acc:	0020      	movs	r0, r4
 8015ace:	1eb1      	subs	r1, r6, #2
 8015ad0:	f000 fea9 	bl	8016826 <__any_on>
 8015ad4:	3502      	adds	r5, #2
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d100      	bne.n	8015adc <__gethex+0x1f4>
 8015ada:	2502      	movs	r5, #2
 8015adc:	0031      	movs	r1, r6
 8015ade:	0020      	movs	r0, r4
 8015ae0:	f7ff fe98 	bl	8015814 <rshift>
 8015ae4:	19bf      	adds	r7, r7, r6
 8015ae6:	9b02      	ldr	r3, [sp, #8]
 8015ae8:	689b      	ldr	r3, [r3, #8]
 8015aea:	9303      	str	r3, [sp, #12]
 8015aec:	42bb      	cmp	r3, r7
 8015aee:	da42      	bge.n	8015b76 <__gethex+0x28e>
 8015af0:	0021      	movs	r1, r4
 8015af2:	9805      	ldr	r0, [sp, #20]
 8015af4:	f000 fa68 	bl	8015fc8 <_Bfree>
 8015af8:	2300      	movs	r3, #0
 8015afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015afc:	26a3      	movs	r6, #163	; 0xa3
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	e78b      	b.n	8015a1a <__gethex+0x132>
 8015b02:	1e6b      	subs	r3, r5, #1
 8015b04:	9308      	str	r3, [sp, #32]
 8015b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d014      	beq.n	8015b38 <__gethex+0x250>
 8015b0e:	9b06      	ldr	r3, [sp, #24]
 8015b10:	2b20      	cmp	r3, #32
 8015b12:	d104      	bne.n	8015b1e <__gethex+0x236>
 8015b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b16:	c340      	stmia	r3!, {r6}
 8015b18:	2600      	movs	r6, #0
 8015b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8015b1c:	9606      	str	r6, [sp, #24]
 8015b1e:	9b08      	ldr	r3, [sp, #32]
 8015b20:	7818      	ldrb	r0, [r3, #0]
 8015b22:	f7ff fecb 	bl	80158bc <__hexdig_fun>
 8015b26:	230f      	movs	r3, #15
 8015b28:	4018      	ands	r0, r3
 8015b2a:	9b06      	ldr	r3, [sp, #24]
 8015b2c:	9d08      	ldr	r5, [sp, #32]
 8015b2e:	4098      	lsls	r0, r3
 8015b30:	3304      	adds	r3, #4
 8015b32:	4306      	orrs	r6, r0
 8015b34:	9306      	str	r3, [sp, #24]
 8015b36:	e7a0      	b.n	8015a7a <__gethex+0x192>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	9a03      	ldr	r2, [sp, #12]
 8015b3c:	1a9d      	subs	r5, r3, r2
 8015b3e:	9b08      	ldr	r3, [sp, #32]
 8015b40:	195d      	adds	r5, r3, r5
 8015b42:	9b01      	ldr	r3, [sp, #4]
 8015b44:	429d      	cmp	r5, r3
 8015b46:	d3e2      	bcc.n	8015b0e <__gethex+0x226>
 8015b48:	0028      	movs	r0, r5
 8015b4a:	9907      	ldr	r1, [sp, #28]
 8015b4c:	f7fc fce9 	bl	8012522 <strncmp>
 8015b50:	2800      	cmp	r0, #0
 8015b52:	d1dc      	bne.n	8015b0e <__gethex+0x226>
 8015b54:	e791      	b.n	8015a7a <__gethex+0x192>
 8015b56:	9b01      	ldr	r3, [sp, #4]
 8015b58:	2500      	movs	r5, #0
 8015b5a:	429e      	cmp	r6, r3
 8015b5c:	dac3      	bge.n	8015ae6 <__gethex+0x1fe>
 8015b5e:	1b9e      	subs	r6, r3, r6
 8015b60:	0021      	movs	r1, r4
 8015b62:	0032      	movs	r2, r6
 8015b64:	9805      	ldr	r0, [sp, #20]
 8015b66:	f000 fc19 	bl	801639c <__lshift>
 8015b6a:	0003      	movs	r3, r0
 8015b6c:	3314      	adds	r3, #20
 8015b6e:	0004      	movs	r4, r0
 8015b70:	1bbf      	subs	r7, r7, r6
 8015b72:	9304      	str	r3, [sp, #16]
 8015b74:	e7b7      	b.n	8015ae6 <__gethex+0x1fe>
 8015b76:	9b02      	ldr	r3, [sp, #8]
 8015b78:	685e      	ldr	r6, [r3, #4]
 8015b7a:	42be      	cmp	r6, r7
 8015b7c:	dd71      	ble.n	8015c62 <__gethex+0x37a>
 8015b7e:	9b01      	ldr	r3, [sp, #4]
 8015b80:	1bf6      	subs	r6, r6, r7
 8015b82:	42b3      	cmp	r3, r6
 8015b84:	dc38      	bgt.n	8015bf8 <__gethex+0x310>
 8015b86:	9b02      	ldr	r3, [sp, #8]
 8015b88:	68db      	ldr	r3, [r3, #12]
 8015b8a:	2b02      	cmp	r3, #2
 8015b8c:	d026      	beq.n	8015bdc <__gethex+0x2f4>
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d02e      	beq.n	8015bf0 <__gethex+0x308>
 8015b92:	2b01      	cmp	r3, #1
 8015b94:	d119      	bne.n	8015bca <__gethex+0x2e2>
 8015b96:	9b01      	ldr	r3, [sp, #4]
 8015b98:	42b3      	cmp	r3, r6
 8015b9a:	d116      	bne.n	8015bca <__gethex+0x2e2>
 8015b9c:	2b01      	cmp	r3, #1
 8015b9e:	d10d      	bne.n	8015bbc <__gethex+0x2d4>
 8015ba0:	9b02      	ldr	r3, [sp, #8]
 8015ba2:	2662      	movs	r6, #98	; 0x62
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	9301      	str	r3, [sp, #4]
 8015ba8:	9a01      	ldr	r2, [sp, #4]
 8015baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	2301      	movs	r3, #1
 8015bb0:	9a04      	ldr	r2, [sp, #16]
 8015bb2:	6123      	str	r3, [r4, #16]
 8015bb4:	6013      	str	r3, [r2, #0]
 8015bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015bb8:	601c      	str	r4, [r3, #0]
 8015bba:	e72e      	b.n	8015a1a <__gethex+0x132>
 8015bbc:	9901      	ldr	r1, [sp, #4]
 8015bbe:	0020      	movs	r0, r4
 8015bc0:	3901      	subs	r1, #1
 8015bc2:	f000 fe30 	bl	8016826 <__any_on>
 8015bc6:	2800      	cmp	r0, #0
 8015bc8:	d1ea      	bne.n	8015ba0 <__gethex+0x2b8>
 8015bca:	0021      	movs	r1, r4
 8015bcc:	9805      	ldr	r0, [sp, #20]
 8015bce:	f000 f9fb 	bl	8015fc8 <_Bfree>
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015bd6:	2650      	movs	r6, #80	; 0x50
 8015bd8:	6013      	str	r3, [r2, #0]
 8015bda:	e71e      	b.n	8015a1a <__gethex+0x132>
 8015bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d1f3      	bne.n	8015bca <__gethex+0x2e2>
 8015be2:	e7dd      	b.n	8015ba0 <__gethex+0x2b8>
 8015be4:	0801afec 	.word	0x0801afec
 8015be8:	0801af11 	.word	0x0801af11
 8015bec:	0801af81 	.word	0x0801af81
 8015bf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d1d4      	bne.n	8015ba0 <__gethex+0x2b8>
 8015bf6:	e7e8      	b.n	8015bca <__gethex+0x2e2>
 8015bf8:	1e77      	subs	r7, r6, #1
 8015bfa:	2d00      	cmp	r5, #0
 8015bfc:	d12f      	bne.n	8015c5e <__gethex+0x376>
 8015bfe:	2f00      	cmp	r7, #0
 8015c00:	d004      	beq.n	8015c0c <__gethex+0x324>
 8015c02:	0039      	movs	r1, r7
 8015c04:	0020      	movs	r0, r4
 8015c06:	f000 fe0e 	bl	8016826 <__any_on>
 8015c0a:	0005      	movs	r5, r0
 8015c0c:	231f      	movs	r3, #31
 8015c0e:	117a      	asrs	r2, r7, #5
 8015c10:	401f      	ands	r7, r3
 8015c12:	3b1e      	subs	r3, #30
 8015c14:	40bb      	lsls	r3, r7
 8015c16:	9904      	ldr	r1, [sp, #16]
 8015c18:	0092      	lsls	r2, r2, #2
 8015c1a:	5852      	ldr	r2, [r2, r1]
 8015c1c:	421a      	tst	r2, r3
 8015c1e:	d001      	beq.n	8015c24 <__gethex+0x33c>
 8015c20:	2302      	movs	r3, #2
 8015c22:	431d      	orrs	r5, r3
 8015c24:	9b01      	ldr	r3, [sp, #4]
 8015c26:	0031      	movs	r1, r6
 8015c28:	1b9b      	subs	r3, r3, r6
 8015c2a:	2602      	movs	r6, #2
 8015c2c:	0020      	movs	r0, r4
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	f7ff fdf0 	bl	8015814 <rshift>
 8015c34:	9b02      	ldr	r3, [sp, #8]
 8015c36:	685f      	ldr	r7, [r3, #4]
 8015c38:	2d00      	cmp	r5, #0
 8015c3a:	d041      	beq.n	8015cc0 <__gethex+0x3d8>
 8015c3c:	9b02      	ldr	r3, [sp, #8]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	2b02      	cmp	r3, #2
 8015c42:	d010      	beq.n	8015c66 <__gethex+0x37e>
 8015c44:	2b03      	cmp	r3, #3
 8015c46:	d012      	beq.n	8015c6e <__gethex+0x386>
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d106      	bne.n	8015c5a <__gethex+0x372>
 8015c4c:	07aa      	lsls	r2, r5, #30
 8015c4e:	d504      	bpl.n	8015c5a <__gethex+0x372>
 8015c50:	9a04      	ldr	r2, [sp, #16]
 8015c52:	6810      	ldr	r0, [r2, #0]
 8015c54:	4305      	orrs	r5, r0
 8015c56:	421d      	tst	r5, r3
 8015c58:	d10c      	bne.n	8015c74 <__gethex+0x38c>
 8015c5a:	2310      	movs	r3, #16
 8015c5c:	e02f      	b.n	8015cbe <__gethex+0x3d6>
 8015c5e:	2501      	movs	r5, #1
 8015c60:	e7d4      	b.n	8015c0c <__gethex+0x324>
 8015c62:	2601      	movs	r6, #1
 8015c64:	e7e8      	b.n	8015c38 <__gethex+0x350>
 8015c66:	2301      	movs	r3, #1
 8015c68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015c6a:	1a9b      	subs	r3, r3, r2
 8015c6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d0f2      	beq.n	8015c5a <__gethex+0x372>
 8015c74:	6923      	ldr	r3, [r4, #16]
 8015c76:	2000      	movs	r0, #0
 8015c78:	9303      	str	r3, [sp, #12]
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	9304      	str	r3, [sp, #16]
 8015c7e:	0023      	movs	r3, r4
 8015c80:	9a04      	ldr	r2, [sp, #16]
 8015c82:	3314      	adds	r3, #20
 8015c84:	1899      	adds	r1, r3, r2
 8015c86:	681a      	ldr	r2, [r3, #0]
 8015c88:	1c55      	adds	r5, r2, #1
 8015c8a:	d01e      	beq.n	8015cca <__gethex+0x3e2>
 8015c8c:	3201      	adds	r2, #1
 8015c8e:	601a      	str	r2, [r3, #0]
 8015c90:	0023      	movs	r3, r4
 8015c92:	3314      	adds	r3, #20
 8015c94:	2e02      	cmp	r6, #2
 8015c96:	d140      	bne.n	8015d1a <__gethex+0x432>
 8015c98:	9a02      	ldr	r2, [sp, #8]
 8015c9a:	9901      	ldr	r1, [sp, #4]
 8015c9c:	6812      	ldr	r2, [r2, #0]
 8015c9e:	3a01      	subs	r2, #1
 8015ca0:	428a      	cmp	r2, r1
 8015ca2:	d10b      	bne.n	8015cbc <__gethex+0x3d4>
 8015ca4:	114a      	asrs	r2, r1, #5
 8015ca6:	211f      	movs	r1, #31
 8015ca8:	9801      	ldr	r0, [sp, #4]
 8015caa:	0092      	lsls	r2, r2, #2
 8015cac:	4001      	ands	r1, r0
 8015cae:	2001      	movs	r0, #1
 8015cb0:	0005      	movs	r5, r0
 8015cb2:	408d      	lsls	r5, r1
 8015cb4:	58d3      	ldr	r3, [r2, r3]
 8015cb6:	422b      	tst	r3, r5
 8015cb8:	d000      	beq.n	8015cbc <__gethex+0x3d4>
 8015cba:	2601      	movs	r6, #1
 8015cbc:	2320      	movs	r3, #32
 8015cbe:	431e      	orrs	r6, r3
 8015cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015cc2:	601c      	str	r4, [r3, #0]
 8015cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc6:	601f      	str	r7, [r3, #0]
 8015cc8:	e6a7      	b.n	8015a1a <__gethex+0x132>
 8015cca:	c301      	stmia	r3!, {r0}
 8015ccc:	4299      	cmp	r1, r3
 8015cce:	d8da      	bhi.n	8015c86 <__gethex+0x39e>
 8015cd0:	9b03      	ldr	r3, [sp, #12]
 8015cd2:	68a2      	ldr	r2, [r4, #8]
 8015cd4:	4293      	cmp	r3, r2
 8015cd6:	db17      	blt.n	8015d08 <__gethex+0x420>
 8015cd8:	6863      	ldr	r3, [r4, #4]
 8015cda:	9805      	ldr	r0, [sp, #20]
 8015cdc:	1c59      	adds	r1, r3, #1
 8015cde:	f000 f94b 	bl	8015f78 <_Balloc>
 8015ce2:	1e05      	subs	r5, r0, #0
 8015ce4:	d103      	bne.n	8015cee <__gethex+0x406>
 8015ce6:	0002      	movs	r2, r0
 8015ce8:	2184      	movs	r1, #132	; 0x84
 8015cea:	4b1c      	ldr	r3, [pc, #112]	; (8015d5c <__gethex+0x474>)
 8015cec:	e6b8      	b.n	8015a60 <__gethex+0x178>
 8015cee:	0021      	movs	r1, r4
 8015cf0:	6923      	ldr	r3, [r4, #16]
 8015cf2:	310c      	adds	r1, #12
 8015cf4:	1c9a      	adds	r2, r3, #2
 8015cf6:	0092      	lsls	r2, r2, #2
 8015cf8:	300c      	adds	r0, #12
 8015cfa:	f7fc f9d1 	bl	80120a0 <memcpy>
 8015cfe:	0021      	movs	r1, r4
 8015d00:	9805      	ldr	r0, [sp, #20]
 8015d02:	f000 f961 	bl	8015fc8 <_Bfree>
 8015d06:	002c      	movs	r4, r5
 8015d08:	6923      	ldr	r3, [r4, #16]
 8015d0a:	1c5a      	adds	r2, r3, #1
 8015d0c:	6122      	str	r2, [r4, #16]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	3304      	adds	r3, #4
 8015d12:	009b      	lsls	r3, r3, #2
 8015d14:	18e3      	adds	r3, r4, r3
 8015d16:	605a      	str	r2, [r3, #4]
 8015d18:	e7ba      	b.n	8015c90 <__gethex+0x3a8>
 8015d1a:	6922      	ldr	r2, [r4, #16]
 8015d1c:	9903      	ldr	r1, [sp, #12]
 8015d1e:	428a      	cmp	r2, r1
 8015d20:	dd09      	ble.n	8015d36 <__gethex+0x44e>
 8015d22:	2101      	movs	r1, #1
 8015d24:	0020      	movs	r0, r4
 8015d26:	f7ff fd75 	bl	8015814 <rshift>
 8015d2a:	9b02      	ldr	r3, [sp, #8]
 8015d2c:	3701      	adds	r7, #1
 8015d2e:	689b      	ldr	r3, [r3, #8]
 8015d30:	42bb      	cmp	r3, r7
 8015d32:	dac2      	bge.n	8015cba <__gethex+0x3d2>
 8015d34:	e6dc      	b.n	8015af0 <__gethex+0x208>
 8015d36:	221f      	movs	r2, #31
 8015d38:	9d01      	ldr	r5, [sp, #4]
 8015d3a:	9901      	ldr	r1, [sp, #4]
 8015d3c:	2601      	movs	r6, #1
 8015d3e:	4015      	ands	r5, r2
 8015d40:	4211      	tst	r1, r2
 8015d42:	d0bb      	beq.n	8015cbc <__gethex+0x3d4>
 8015d44:	9a04      	ldr	r2, [sp, #16]
 8015d46:	189b      	adds	r3, r3, r2
 8015d48:	3b04      	subs	r3, #4
 8015d4a:	6818      	ldr	r0, [r3, #0]
 8015d4c:	f000 f9d6 	bl	80160fc <__hi0bits>
 8015d50:	2320      	movs	r3, #32
 8015d52:	1b5d      	subs	r5, r3, r5
 8015d54:	42a8      	cmp	r0, r5
 8015d56:	dbe4      	blt.n	8015d22 <__gethex+0x43a>
 8015d58:	e7b0      	b.n	8015cbc <__gethex+0x3d4>
 8015d5a:	46c0      	nop			; (mov r8, r8)
 8015d5c:	0801af11 	.word	0x0801af11

08015d60 <L_shift>:
 8015d60:	2308      	movs	r3, #8
 8015d62:	b570      	push	{r4, r5, r6, lr}
 8015d64:	2520      	movs	r5, #32
 8015d66:	1a9a      	subs	r2, r3, r2
 8015d68:	0092      	lsls	r2, r2, #2
 8015d6a:	1aad      	subs	r5, r5, r2
 8015d6c:	6843      	ldr	r3, [r0, #4]
 8015d6e:	6806      	ldr	r6, [r0, #0]
 8015d70:	001c      	movs	r4, r3
 8015d72:	40ac      	lsls	r4, r5
 8015d74:	40d3      	lsrs	r3, r2
 8015d76:	4334      	orrs	r4, r6
 8015d78:	6004      	str	r4, [r0, #0]
 8015d7a:	6043      	str	r3, [r0, #4]
 8015d7c:	3004      	adds	r0, #4
 8015d7e:	4288      	cmp	r0, r1
 8015d80:	d3f4      	bcc.n	8015d6c <L_shift+0xc>
 8015d82:	bd70      	pop	{r4, r5, r6, pc}

08015d84 <__match>:
 8015d84:	b530      	push	{r4, r5, lr}
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	780c      	ldrb	r4, [r1, #0]
 8015d8a:	3301      	adds	r3, #1
 8015d8c:	2c00      	cmp	r4, #0
 8015d8e:	d102      	bne.n	8015d96 <__match+0x12>
 8015d90:	6003      	str	r3, [r0, #0]
 8015d92:	2001      	movs	r0, #1
 8015d94:	bd30      	pop	{r4, r5, pc}
 8015d96:	781a      	ldrb	r2, [r3, #0]
 8015d98:	0015      	movs	r5, r2
 8015d9a:	3d41      	subs	r5, #65	; 0x41
 8015d9c:	2d19      	cmp	r5, #25
 8015d9e:	d800      	bhi.n	8015da2 <__match+0x1e>
 8015da0:	3220      	adds	r2, #32
 8015da2:	3101      	adds	r1, #1
 8015da4:	42a2      	cmp	r2, r4
 8015da6:	d0ef      	beq.n	8015d88 <__match+0x4>
 8015da8:	2000      	movs	r0, #0
 8015daa:	e7f3      	b.n	8015d94 <__match+0x10>

08015dac <__hexnan>:
 8015dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dae:	680b      	ldr	r3, [r1, #0]
 8015db0:	b08b      	sub	sp, #44	; 0x2c
 8015db2:	115c      	asrs	r4, r3, #5
 8015db4:	00a4      	lsls	r4, r4, #2
 8015db6:	9201      	str	r2, [sp, #4]
 8015db8:	1912      	adds	r2, r2, r4
 8015dba:	0019      	movs	r1, r3
 8015dbc:	9202      	str	r2, [sp, #8]
 8015dbe:	221f      	movs	r2, #31
 8015dc0:	4011      	ands	r1, r2
 8015dc2:	9008      	str	r0, [sp, #32]
 8015dc4:	9106      	str	r1, [sp, #24]
 8015dc6:	4213      	tst	r3, r2
 8015dc8:	d002      	beq.n	8015dd0 <__hexnan+0x24>
 8015dca:	9b02      	ldr	r3, [sp, #8]
 8015dcc:	3304      	adds	r3, #4
 8015dce:	9302      	str	r3, [sp, #8]
 8015dd0:	9b02      	ldr	r3, [sp, #8]
 8015dd2:	2500      	movs	r5, #0
 8015dd4:	1f1e      	subs	r6, r3, #4
 8015dd6:	0037      	movs	r7, r6
 8015dd8:	0034      	movs	r4, r6
 8015dda:	9b08      	ldr	r3, [sp, #32]
 8015ddc:	6035      	str	r5, [r6, #0]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	9507      	str	r5, [sp, #28]
 8015de2:	9305      	str	r3, [sp, #20]
 8015de4:	9503      	str	r5, [sp, #12]
 8015de6:	9b05      	ldr	r3, [sp, #20]
 8015de8:	3301      	adds	r3, #1
 8015dea:	9309      	str	r3, [sp, #36]	; 0x24
 8015dec:	9b05      	ldr	r3, [sp, #20]
 8015dee:	785b      	ldrb	r3, [r3, #1]
 8015df0:	9304      	str	r3, [sp, #16]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d028      	beq.n	8015e48 <__hexnan+0x9c>
 8015df6:	9804      	ldr	r0, [sp, #16]
 8015df8:	f7ff fd60 	bl	80158bc <__hexdig_fun>
 8015dfc:	2800      	cmp	r0, #0
 8015dfe:	d154      	bne.n	8015eaa <__hexnan+0xfe>
 8015e00:	9b04      	ldr	r3, [sp, #16]
 8015e02:	2b20      	cmp	r3, #32
 8015e04:	d819      	bhi.n	8015e3a <__hexnan+0x8e>
 8015e06:	9b03      	ldr	r3, [sp, #12]
 8015e08:	9a07      	ldr	r2, [sp, #28]
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	dd12      	ble.n	8015e34 <__hexnan+0x88>
 8015e0e:	42bc      	cmp	r4, r7
 8015e10:	d206      	bcs.n	8015e20 <__hexnan+0x74>
 8015e12:	2d07      	cmp	r5, #7
 8015e14:	dc04      	bgt.n	8015e20 <__hexnan+0x74>
 8015e16:	002a      	movs	r2, r5
 8015e18:	0039      	movs	r1, r7
 8015e1a:	0020      	movs	r0, r4
 8015e1c:	f7ff ffa0 	bl	8015d60 <L_shift>
 8015e20:	9b01      	ldr	r3, [sp, #4]
 8015e22:	2508      	movs	r5, #8
 8015e24:	429c      	cmp	r4, r3
 8015e26:	d905      	bls.n	8015e34 <__hexnan+0x88>
 8015e28:	1f27      	subs	r7, r4, #4
 8015e2a:	2500      	movs	r5, #0
 8015e2c:	003c      	movs	r4, r7
 8015e2e:	9b03      	ldr	r3, [sp, #12]
 8015e30:	603d      	str	r5, [r7, #0]
 8015e32:	9307      	str	r3, [sp, #28]
 8015e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e36:	9305      	str	r3, [sp, #20]
 8015e38:	e7d5      	b.n	8015de6 <__hexnan+0x3a>
 8015e3a:	9b04      	ldr	r3, [sp, #16]
 8015e3c:	2b29      	cmp	r3, #41	; 0x29
 8015e3e:	d158      	bne.n	8015ef2 <__hexnan+0x146>
 8015e40:	9b05      	ldr	r3, [sp, #20]
 8015e42:	9a08      	ldr	r2, [sp, #32]
 8015e44:	3302      	adds	r3, #2
 8015e46:	6013      	str	r3, [r2, #0]
 8015e48:	9b03      	ldr	r3, [sp, #12]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d051      	beq.n	8015ef2 <__hexnan+0x146>
 8015e4e:	42bc      	cmp	r4, r7
 8015e50:	d206      	bcs.n	8015e60 <__hexnan+0xb4>
 8015e52:	2d07      	cmp	r5, #7
 8015e54:	dc04      	bgt.n	8015e60 <__hexnan+0xb4>
 8015e56:	002a      	movs	r2, r5
 8015e58:	0039      	movs	r1, r7
 8015e5a:	0020      	movs	r0, r4
 8015e5c:	f7ff ff80 	bl	8015d60 <L_shift>
 8015e60:	9b01      	ldr	r3, [sp, #4]
 8015e62:	429c      	cmp	r4, r3
 8015e64:	d935      	bls.n	8015ed2 <__hexnan+0x126>
 8015e66:	001a      	movs	r2, r3
 8015e68:	0023      	movs	r3, r4
 8015e6a:	cb02      	ldmia	r3!, {r1}
 8015e6c:	c202      	stmia	r2!, {r1}
 8015e6e:	429e      	cmp	r6, r3
 8015e70:	d2fb      	bcs.n	8015e6a <__hexnan+0xbe>
 8015e72:	9b02      	ldr	r3, [sp, #8]
 8015e74:	1c61      	adds	r1, r4, #1
 8015e76:	1eda      	subs	r2, r3, #3
 8015e78:	2304      	movs	r3, #4
 8015e7a:	4291      	cmp	r1, r2
 8015e7c:	d805      	bhi.n	8015e8a <__hexnan+0xde>
 8015e7e:	9b02      	ldr	r3, [sp, #8]
 8015e80:	3b04      	subs	r3, #4
 8015e82:	1b1c      	subs	r4, r3, r4
 8015e84:	08a4      	lsrs	r4, r4, #2
 8015e86:	3401      	adds	r4, #1
 8015e88:	00a3      	lsls	r3, r4, #2
 8015e8a:	9a01      	ldr	r2, [sp, #4]
 8015e8c:	18d4      	adds	r4, r2, r3
 8015e8e:	2300      	movs	r3, #0
 8015e90:	c408      	stmia	r4!, {r3}
 8015e92:	42a6      	cmp	r6, r4
 8015e94:	d2fc      	bcs.n	8015e90 <__hexnan+0xe4>
 8015e96:	6833      	ldr	r3, [r6, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d104      	bne.n	8015ea6 <__hexnan+0xfa>
 8015e9c:	9b01      	ldr	r3, [sp, #4]
 8015e9e:	429e      	cmp	r6, r3
 8015ea0:	d125      	bne.n	8015eee <__hexnan+0x142>
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	6033      	str	r3, [r6, #0]
 8015ea6:	2005      	movs	r0, #5
 8015ea8:	e024      	b.n	8015ef4 <__hexnan+0x148>
 8015eaa:	9b03      	ldr	r3, [sp, #12]
 8015eac:	3501      	adds	r5, #1
 8015eae:	3301      	adds	r3, #1
 8015eb0:	9303      	str	r3, [sp, #12]
 8015eb2:	2d08      	cmp	r5, #8
 8015eb4:	dd06      	ble.n	8015ec4 <__hexnan+0x118>
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	429c      	cmp	r4, r3
 8015eba:	d9bb      	bls.n	8015e34 <__hexnan+0x88>
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	2501      	movs	r5, #1
 8015ec0:	3c04      	subs	r4, #4
 8015ec2:	6023      	str	r3, [r4, #0]
 8015ec4:	220f      	movs	r2, #15
 8015ec6:	6823      	ldr	r3, [r4, #0]
 8015ec8:	4010      	ands	r0, r2
 8015eca:	011b      	lsls	r3, r3, #4
 8015ecc:	4318      	orrs	r0, r3
 8015ece:	6020      	str	r0, [r4, #0]
 8015ed0:	e7b0      	b.n	8015e34 <__hexnan+0x88>
 8015ed2:	9b06      	ldr	r3, [sp, #24]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d0de      	beq.n	8015e96 <__hexnan+0xea>
 8015ed8:	2220      	movs	r2, #32
 8015eda:	1ad2      	subs	r2, r2, r3
 8015edc:	2301      	movs	r3, #1
 8015ede:	425b      	negs	r3, r3
 8015ee0:	40d3      	lsrs	r3, r2
 8015ee2:	9c02      	ldr	r4, [sp, #8]
 8015ee4:	3c04      	subs	r4, #4
 8015ee6:	6822      	ldr	r2, [r4, #0]
 8015ee8:	4013      	ands	r3, r2
 8015eea:	6023      	str	r3, [r4, #0]
 8015eec:	e7d3      	b.n	8015e96 <__hexnan+0xea>
 8015eee:	3e04      	subs	r6, #4
 8015ef0:	e7d1      	b.n	8015e96 <__hexnan+0xea>
 8015ef2:	2004      	movs	r0, #4
 8015ef4:	b00b      	add	sp, #44	; 0x2c
 8015ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ef8 <__locale_mb_cur_max>:
 8015ef8:	2394      	movs	r3, #148	; 0x94
 8015efa:	4a02      	ldr	r2, [pc, #8]	; (8015f04 <__locale_mb_cur_max+0xc>)
 8015efc:	005b      	lsls	r3, r3, #1
 8015efe:	5cd0      	ldrb	r0, [r2, r3]
 8015f00:	4770      	bx	lr
 8015f02:	46c0      	nop			; (mov r8, r8)
 8015f04:	200008f0 	.word	0x200008f0

08015f08 <_localeconv_r>:
 8015f08:	4800      	ldr	r0, [pc, #0]	; (8015f0c <_localeconv_r+0x4>)
 8015f0a:	4770      	bx	lr
 8015f0c:	200009e0 	.word	0x200009e0

08015f10 <__retarget_lock_init_recursive>:
 8015f10:	4770      	bx	lr

08015f12 <__retarget_lock_close_recursive>:
 8015f12:	4770      	bx	lr

08015f14 <__retarget_lock_acquire_recursive>:
 8015f14:	4770      	bx	lr

08015f16 <__retarget_lock_release_recursive>:
 8015f16:	4770      	bx	lr

08015f18 <__ascii_mbtowc>:
 8015f18:	b082      	sub	sp, #8
 8015f1a:	2900      	cmp	r1, #0
 8015f1c:	d100      	bne.n	8015f20 <__ascii_mbtowc+0x8>
 8015f1e:	a901      	add	r1, sp, #4
 8015f20:	1e10      	subs	r0, r2, #0
 8015f22:	d006      	beq.n	8015f32 <__ascii_mbtowc+0x1a>
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d006      	beq.n	8015f36 <__ascii_mbtowc+0x1e>
 8015f28:	7813      	ldrb	r3, [r2, #0]
 8015f2a:	600b      	str	r3, [r1, #0]
 8015f2c:	7810      	ldrb	r0, [r2, #0]
 8015f2e:	1e43      	subs	r3, r0, #1
 8015f30:	4198      	sbcs	r0, r3
 8015f32:	b002      	add	sp, #8
 8015f34:	4770      	bx	lr
 8015f36:	2002      	movs	r0, #2
 8015f38:	4240      	negs	r0, r0
 8015f3a:	e7fa      	b.n	8015f32 <__ascii_mbtowc+0x1a>

08015f3c <memchr>:
 8015f3c:	b2c9      	uxtb	r1, r1
 8015f3e:	1882      	adds	r2, r0, r2
 8015f40:	4290      	cmp	r0, r2
 8015f42:	d101      	bne.n	8015f48 <memchr+0xc>
 8015f44:	2000      	movs	r0, #0
 8015f46:	4770      	bx	lr
 8015f48:	7803      	ldrb	r3, [r0, #0]
 8015f4a:	428b      	cmp	r3, r1
 8015f4c:	d0fb      	beq.n	8015f46 <memchr+0xa>
 8015f4e:	3001      	adds	r0, #1
 8015f50:	e7f6      	b.n	8015f40 <memchr+0x4>

08015f52 <memmove>:
 8015f52:	b510      	push	{r4, lr}
 8015f54:	4288      	cmp	r0, r1
 8015f56:	d902      	bls.n	8015f5e <memmove+0xc>
 8015f58:	188b      	adds	r3, r1, r2
 8015f5a:	4298      	cmp	r0, r3
 8015f5c:	d303      	bcc.n	8015f66 <memmove+0x14>
 8015f5e:	2300      	movs	r3, #0
 8015f60:	e007      	b.n	8015f72 <memmove+0x20>
 8015f62:	5c8b      	ldrb	r3, [r1, r2]
 8015f64:	5483      	strb	r3, [r0, r2]
 8015f66:	3a01      	subs	r2, #1
 8015f68:	d2fb      	bcs.n	8015f62 <memmove+0x10>
 8015f6a:	bd10      	pop	{r4, pc}
 8015f6c:	5ccc      	ldrb	r4, [r1, r3]
 8015f6e:	54c4      	strb	r4, [r0, r3]
 8015f70:	3301      	adds	r3, #1
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d1fa      	bne.n	8015f6c <memmove+0x1a>
 8015f76:	e7f8      	b.n	8015f6a <memmove+0x18>

08015f78 <_Balloc>:
 8015f78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015f7a:	b570      	push	{r4, r5, r6, lr}
 8015f7c:	0006      	movs	r6, r0
 8015f7e:	000c      	movs	r4, r1
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d012      	beq.n	8015faa <_Balloc+0x32>
 8015f84:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8015f86:	00a3      	lsls	r3, r4, #2
 8015f88:	18d3      	adds	r3, r2, r3
 8015f8a:	6818      	ldr	r0, [r3, #0]
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	d115      	bne.n	8015fbc <_Balloc+0x44>
 8015f90:	2101      	movs	r1, #1
 8015f92:	000d      	movs	r5, r1
 8015f94:	40a5      	lsls	r5, r4
 8015f96:	1d6a      	adds	r2, r5, #5
 8015f98:	0030      	movs	r0, r6
 8015f9a:	0092      	lsls	r2, r2, #2
 8015f9c:	f000 fd8c 	bl	8016ab8 <_calloc_r>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d009      	beq.n	8015fb8 <_Balloc+0x40>
 8015fa4:	6044      	str	r4, [r0, #4]
 8015fa6:	6085      	str	r5, [r0, #8]
 8015fa8:	e00a      	b.n	8015fc0 <_Balloc+0x48>
 8015faa:	2221      	movs	r2, #33	; 0x21
 8015fac:	2104      	movs	r1, #4
 8015fae:	f000 fd83 	bl	8016ab8 <_calloc_r>
 8015fb2:	64f0      	str	r0, [r6, #76]	; 0x4c
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	d1e5      	bne.n	8015f84 <_Balloc+0xc>
 8015fb8:	2000      	movs	r0, #0
 8015fba:	bd70      	pop	{r4, r5, r6, pc}
 8015fbc:	6802      	ldr	r2, [r0, #0]
 8015fbe:	601a      	str	r2, [r3, #0]
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	6103      	str	r3, [r0, #16]
 8015fc4:	60c3      	str	r3, [r0, #12]
 8015fc6:	e7f8      	b.n	8015fba <_Balloc+0x42>

08015fc8 <_Bfree>:
 8015fc8:	2900      	cmp	r1, #0
 8015fca:	d006      	beq.n	8015fda <_Bfree+0x12>
 8015fcc:	684b      	ldr	r3, [r1, #4]
 8015fce:	009a      	lsls	r2, r3, #2
 8015fd0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015fd2:	189b      	adds	r3, r3, r2
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	600a      	str	r2, [r1, #0]
 8015fd8:	6019      	str	r1, [r3, #0]
 8015fda:	4770      	bx	lr

08015fdc <__multadd>:
 8015fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fde:	000e      	movs	r6, r1
 8015fe0:	9001      	str	r0, [sp, #4]
 8015fe2:	000c      	movs	r4, r1
 8015fe4:	001d      	movs	r5, r3
 8015fe6:	2000      	movs	r0, #0
 8015fe8:	690f      	ldr	r7, [r1, #16]
 8015fea:	3614      	adds	r6, #20
 8015fec:	6833      	ldr	r3, [r6, #0]
 8015fee:	3001      	adds	r0, #1
 8015ff0:	b299      	uxth	r1, r3
 8015ff2:	4351      	muls	r1, r2
 8015ff4:	0c1b      	lsrs	r3, r3, #16
 8015ff6:	4353      	muls	r3, r2
 8015ff8:	1949      	adds	r1, r1, r5
 8015ffa:	0c0d      	lsrs	r5, r1, #16
 8015ffc:	195b      	adds	r3, r3, r5
 8015ffe:	0c1d      	lsrs	r5, r3, #16
 8016000:	b289      	uxth	r1, r1
 8016002:	041b      	lsls	r3, r3, #16
 8016004:	185b      	adds	r3, r3, r1
 8016006:	c608      	stmia	r6!, {r3}
 8016008:	4287      	cmp	r7, r0
 801600a:	dcef      	bgt.n	8015fec <__multadd+0x10>
 801600c:	2d00      	cmp	r5, #0
 801600e:	d022      	beq.n	8016056 <__multadd+0x7a>
 8016010:	68a3      	ldr	r3, [r4, #8]
 8016012:	42bb      	cmp	r3, r7
 8016014:	dc19      	bgt.n	801604a <__multadd+0x6e>
 8016016:	6863      	ldr	r3, [r4, #4]
 8016018:	9801      	ldr	r0, [sp, #4]
 801601a:	1c59      	adds	r1, r3, #1
 801601c:	f7ff ffac 	bl	8015f78 <_Balloc>
 8016020:	1e06      	subs	r6, r0, #0
 8016022:	d105      	bne.n	8016030 <__multadd+0x54>
 8016024:	0002      	movs	r2, r0
 8016026:	21b5      	movs	r1, #181	; 0xb5
 8016028:	4b0c      	ldr	r3, [pc, #48]	; (801605c <__multadd+0x80>)
 801602a:	480d      	ldr	r0, [pc, #52]	; (8016060 <__multadd+0x84>)
 801602c:	f000 fd26 	bl	8016a7c <__assert_func>
 8016030:	0021      	movs	r1, r4
 8016032:	6923      	ldr	r3, [r4, #16]
 8016034:	310c      	adds	r1, #12
 8016036:	1c9a      	adds	r2, r3, #2
 8016038:	0092      	lsls	r2, r2, #2
 801603a:	300c      	adds	r0, #12
 801603c:	f7fc f830 	bl	80120a0 <memcpy>
 8016040:	0021      	movs	r1, r4
 8016042:	9801      	ldr	r0, [sp, #4]
 8016044:	f7ff ffc0 	bl	8015fc8 <_Bfree>
 8016048:	0034      	movs	r4, r6
 801604a:	1d3b      	adds	r3, r7, #4
 801604c:	009b      	lsls	r3, r3, #2
 801604e:	18e3      	adds	r3, r4, r3
 8016050:	605d      	str	r5, [r3, #4]
 8016052:	1c7b      	adds	r3, r7, #1
 8016054:	6123      	str	r3, [r4, #16]
 8016056:	0020      	movs	r0, r4
 8016058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801605a:	46c0      	nop			; (mov r8, r8)
 801605c:	0801af11 	.word	0x0801af11
 8016060:	0801b000 	.word	0x0801b000

08016064 <__s2b>:
 8016064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016066:	0006      	movs	r6, r0
 8016068:	0018      	movs	r0, r3
 801606a:	000c      	movs	r4, r1
 801606c:	3008      	adds	r0, #8
 801606e:	2109      	movs	r1, #9
 8016070:	9301      	str	r3, [sp, #4]
 8016072:	0015      	movs	r5, r2
 8016074:	f7ea f8f6 	bl	8000264 <__divsi3>
 8016078:	2301      	movs	r3, #1
 801607a:	2100      	movs	r1, #0
 801607c:	4283      	cmp	r3, r0
 801607e:	db0a      	blt.n	8016096 <__s2b+0x32>
 8016080:	0030      	movs	r0, r6
 8016082:	f7ff ff79 	bl	8015f78 <_Balloc>
 8016086:	1e01      	subs	r1, r0, #0
 8016088:	d108      	bne.n	801609c <__s2b+0x38>
 801608a:	0002      	movs	r2, r0
 801608c:	4b19      	ldr	r3, [pc, #100]	; (80160f4 <__s2b+0x90>)
 801608e:	481a      	ldr	r0, [pc, #104]	; (80160f8 <__s2b+0x94>)
 8016090:	31ce      	adds	r1, #206	; 0xce
 8016092:	f000 fcf3 	bl	8016a7c <__assert_func>
 8016096:	005b      	lsls	r3, r3, #1
 8016098:	3101      	adds	r1, #1
 801609a:	e7ef      	b.n	801607c <__s2b+0x18>
 801609c:	9b08      	ldr	r3, [sp, #32]
 801609e:	6143      	str	r3, [r0, #20]
 80160a0:	2301      	movs	r3, #1
 80160a2:	6103      	str	r3, [r0, #16]
 80160a4:	2d09      	cmp	r5, #9
 80160a6:	dd18      	ble.n	80160da <__s2b+0x76>
 80160a8:	0023      	movs	r3, r4
 80160aa:	3309      	adds	r3, #9
 80160ac:	001f      	movs	r7, r3
 80160ae:	9300      	str	r3, [sp, #0]
 80160b0:	1964      	adds	r4, r4, r5
 80160b2:	783b      	ldrb	r3, [r7, #0]
 80160b4:	220a      	movs	r2, #10
 80160b6:	0030      	movs	r0, r6
 80160b8:	3b30      	subs	r3, #48	; 0x30
 80160ba:	f7ff ff8f 	bl	8015fdc <__multadd>
 80160be:	3701      	adds	r7, #1
 80160c0:	0001      	movs	r1, r0
 80160c2:	42a7      	cmp	r7, r4
 80160c4:	d1f5      	bne.n	80160b2 <__s2b+0x4e>
 80160c6:	002c      	movs	r4, r5
 80160c8:	9b00      	ldr	r3, [sp, #0]
 80160ca:	3c08      	subs	r4, #8
 80160cc:	191c      	adds	r4, r3, r4
 80160ce:	002f      	movs	r7, r5
 80160d0:	9b01      	ldr	r3, [sp, #4]
 80160d2:	429f      	cmp	r7, r3
 80160d4:	db04      	blt.n	80160e0 <__s2b+0x7c>
 80160d6:	0008      	movs	r0, r1
 80160d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80160da:	2509      	movs	r5, #9
 80160dc:	340a      	adds	r4, #10
 80160de:	e7f6      	b.n	80160ce <__s2b+0x6a>
 80160e0:	1b63      	subs	r3, r4, r5
 80160e2:	5ddb      	ldrb	r3, [r3, r7]
 80160e4:	220a      	movs	r2, #10
 80160e6:	0030      	movs	r0, r6
 80160e8:	3b30      	subs	r3, #48	; 0x30
 80160ea:	f7ff ff77 	bl	8015fdc <__multadd>
 80160ee:	3701      	adds	r7, #1
 80160f0:	0001      	movs	r1, r0
 80160f2:	e7ed      	b.n	80160d0 <__s2b+0x6c>
 80160f4:	0801af11 	.word	0x0801af11
 80160f8:	0801b000 	.word	0x0801b000

080160fc <__hi0bits>:
 80160fc:	0003      	movs	r3, r0
 80160fe:	0c02      	lsrs	r2, r0, #16
 8016100:	2000      	movs	r0, #0
 8016102:	4282      	cmp	r2, r0
 8016104:	d101      	bne.n	801610a <__hi0bits+0xe>
 8016106:	041b      	lsls	r3, r3, #16
 8016108:	3010      	adds	r0, #16
 801610a:	0e1a      	lsrs	r2, r3, #24
 801610c:	d101      	bne.n	8016112 <__hi0bits+0x16>
 801610e:	3008      	adds	r0, #8
 8016110:	021b      	lsls	r3, r3, #8
 8016112:	0f1a      	lsrs	r2, r3, #28
 8016114:	d101      	bne.n	801611a <__hi0bits+0x1e>
 8016116:	3004      	adds	r0, #4
 8016118:	011b      	lsls	r3, r3, #4
 801611a:	0f9a      	lsrs	r2, r3, #30
 801611c:	d101      	bne.n	8016122 <__hi0bits+0x26>
 801611e:	3002      	adds	r0, #2
 8016120:	009b      	lsls	r3, r3, #2
 8016122:	2b00      	cmp	r3, #0
 8016124:	db03      	blt.n	801612e <__hi0bits+0x32>
 8016126:	3001      	adds	r0, #1
 8016128:	005b      	lsls	r3, r3, #1
 801612a:	d400      	bmi.n	801612e <__hi0bits+0x32>
 801612c:	2020      	movs	r0, #32
 801612e:	4770      	bx	lr

08016130 <__lo0bits>:
 8016130:	6803      	ldr	r3, [r0, #0]
 8016132:	0002      	movs	r2, r0
 8016134:	2107      	movs	r1, #7
 8016136:	0018      	movs	r0, r3
 8016138:	4008      	ands	r0, r1
 801613a:	420b      	tst	r3, r1
 801613c:	d00d      	beq.n	801615a <__lo0bits+0x2a>
 801613e:	3906      	subs	r1, #6
 8016140:	2000      	movs	r0, #0
 8016142:	420b      	tst	r3, r1
 8016144:	d105      	bne.n	8016152 <__lo0bits+0x22>
 8016146:	3002      	adds	r0, #2
 8016148:	4203      	tst	r3, r0
 801614a:	d003      	beq.n	8016154 <__lo0bits+0x24>
 801614c:	40cb      	lsrs	r3, r1
 801614e:	0008      	movs	r0, r1
 8016150:	6013      	str	r3, [r2, #0]
 8016152:	4770      	bx	lr
 8016154:	089b      	lsrs	r3, r3, #2
 8016156:	6013      	str	r3, [r2, #0]
 8016158:	e7fb      	b.n	8016152 <__lo0bits+0x22>
 801615a:	b299      	uxth	r1, r3
 801615c:	2900      	cmp	r1, #0
 801615e:	d101      	bne.n	8016164 <__lo0bits+0x34>
 8016160:	2010      	movs	r0, #16
 8016162:	0c1b      	lsrs	r3, r3, #16
 8016164:	b2d9      	uxtb	r1, r3
 8016166:	2900      	cmp	r1, #0
 8016168:	d101      	bne.n	801616e <__lo0bits+0x3e>
 801616a:	3008      	adds	r0, #8
 801616c:	0a1b      	lsrs	r3, r3, #8
 801616e:	0719      	lsls	r1, r3, #28
 8016170:	d101      	bne.n	8016176 <__lo0bits+0x46>
 8016172:	3004      	adds	r0, #4
 8016174:	091b      	lsrs	r3, r3, #4
 8016176:	0799      	lsls	r1, r3, #30
 8016178:	d101      	bne.n	801617e <__lo0bits+0x4e>
 801617a:	3002      	adds	r0, #2
 801617c:	089b      	lsrs	r3, r3, #2
 801617e:	07d9      	lsls	r1, r3, #31
 8016180:	d4e9      	bmi.n	8016156 <__lo0bits+0x26>
 8016182:	3001      	adds	r0, #1
 8016184:	085b      	lsrs	r3, r3, #1
 8016186:	d1e6      	bne.n	8016156 <__lo0bits+0x26>
 8016188:	2020      	movs	r0, #32
 801618a:	e7e2      	b.n	8016152 <__lo0bits+0x22>

0801618c <__i2b>:
 801618c:	b510      	push	{r4, lr}
 801618e:	000c      	movs	r4, r1
 8016190:	2101      	movs	r1, #1
 8016192:	f7ff fef1 	bl	8015f78 <_Balloc>
 8016196:	2800      	cmp	r0, #0
 8016198:	d106      	bne.n	80161a8 <__i2b+0x1c>
 801619a:	21a0      	movs	r1, #160	; 0xa0
 801619c:	0002      	movs	r2, r0
 801619e:	4b04      	ldr	r3, [pc, #16]	; (80161b0 <__i2b+0x24>)
 80161a0:	4804      	ldr	r0, [pc, #16]	; (80161b4 <__i2b+0x28>)
 80161a2:	0049      	lsls	r1, r1, #1
 80161a4:	f000 fc6a 	bl	8016a7c <__assert_func>
 80161a8:	2301      	movs	r3, #1
 80161aa:	6144      	str	r4, [r0, #20]
 80161ac:	6103      	str	r3, [r0, #16]
 80161ae:	bd10      	pop	{r4, pc}
 80161b0:	0801af11 	.word	0x0801af11
 80161b4:	0801b000 	.word	0x0801b000

080161b8 <__multiply>:
 80161b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ba:	690b      	ldr	r3, [r1, #16]
 80161bc:	0014      	movs	r4, r2
 80161be:	6912      	ldr	r2, [r2, #16]
 80161c0:	000d      	movs	r5, r1
 80161c2:	b089      	sub	sp, #36	; 0x24
 80161c4:	4293      	cmp	r3, r2
 80161c6:	da01      	bge.n	80161cc <__multiply+0x14>
 80161c8:	0025      	movs	r5, r4
 80161ca:	000c      	movs	r4, r1
 80161cc:	692f      	ldr	r7, [r5, #16]
 80161ce:	6926      	ldr	r6, [r4, #16]
 80161d0:	6869      	ldr	r1, [r5, #4]
 80161d2:	19bb      	adds	r3, r7, r6
 80161d4:	9302      	str	r3, [sp, #8]
 80161d6:	68ab      	ldr	r3, [r5, #8]
 80161d8:	19ba      	adds	r2, r7, r6
 80161da:	4293      	cmp	r3, r2
 80161dc:	da00      	bge.n	80161e0 <__multiply+0x28>
 80161de:	3101      	adds	r1, #1
 80161e0:	f7ff feca 	bl	8015f78 <_Balloc>
 80161e4:	9001      	str	r0, [sp, #4]
 80161e6:	2800      	cmp	r0, #0
 80161e8:	d106      	bne.n	80161f8 <__multiply+0x40>
 80161ea:	215e      	movs	r1, #94	; 0x5e
 80161ec:	0002      	movs	r2, r0
 80161ee:	4b48      	ldr	r3, [pc, #288]	; (8016310 <__multiply+0x158>)
 80161f0:	4848      	ldr	r0, [pc, #288]	; (8016314 <__multiply+0x15c>)
 80161f2:	31ff      	adds	r1, #255	; 0xff
 80161f4:	f000 fc42 	bl	8016a7c <__assert_func>
 80161f8:	9b01      	ldr	r3, [sp, #4]
 80161fa:	2200      	movs	r2, #0
 80161fc:	3314      	adds	r3, #20
 80161fe:	469c      	mov	ip, r3
 8016200:	19bb      	adds	r3, r7, r6
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	4463      	add	r3, ip
 8016206:	9303      	str	r3, [sp, #12]
 8016208:	4663      	mov	r3, ip
 801620a:	9903      	ldr	r1, [sp, #12]
 801620c:	428b      	cmp	r3, r1
 801620e:	d32c      	bcc.n	801626a <__multiply+0xb2>
 8016210:	002b      	movs	r3, r5
 8016212:	0022      	movs	r2, r4
 8016214:	3314      	adds	r3, #20
 8016216:	00bf      	lsls	r7, r7, #2
 8016218:	3214      	adds	r2, #20
 801621a:	9306      	str	r3, [sp, #24]
 801621c:	00b6      	lsls	r6, r6, #2
 801621e:	19db      	adds	r3, r3, r7
 8016220:	9304      	str	r3, [sp, #16]
 8016222:	1993      	adds	r3, r2, r6
 8016224:	9307      	str	r3, [sp, #28]
 8016226:	2304      	movs	r3, #4
 8016228:	9305      	str	r3, [sp, #20]
 801622a:	002b      	movs	r3, r5
 801622c:	9904      	ldr	r1, [sp, #16]
 801622e:	3315      	adds	r3, #21
 8016230:	9200      	str	r2, [sp, #0]
 8016232:	4299      	cmp	r1, r3
 8016234:	d305      	bcc.n	8016242 <__multiply+0x8a>
 8016236:	1b4b      	subs	r3, r1, r5
 8016238:	3b15      	subs	r3, #21
 801623a:	089b      	lsrs	r3, r3, #2
 801623c:	3301      	adds	r3, #1
 801623e:	009b      	lsls	r3, r3, #2
 8016240:	9305      	str	r3, [sp, #20]
 8016242:	9b07      	ldr	r3, [sp, #28]
 8016244:	9a00      	ldr	r2, [sp, #0]
 8016246:	429a      	cmp	r2, r3
 8016248:	d311      	bcc.n	801626e <__multiply+0xb6>
 801624a:	9b02      	ldr	r3, [sp, #8]
 801624c:	2b00      	cmp	r3, #0
 801624e:	dd06      	ble.n	801625e <__multiply+0xa6>
 8016250:	9b03      	ldr	r3, [sp, #12]
 8016252:	3b04      	subs	r3, #4
 8016254:	9303      	str	r3, [sp, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	9300      	str	r3, [sp, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d054      	beq.n	8016308 <__multiply+0x150>
 801625e:	9b01      	ldr	r3, [sp, #4]
 8016260:	9a02      	ldr	r2, [sp, #8]
 8016262:	0018      	movs	r0, r3
 8016264:	611a      	str	r2, [r3, #16]
 8016266:	b009      	add	sp, #36	; 0x24
 8016268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801626a:	c304      	stmia	r3!, {r2}
 801626c:	e7cd      	b.n	801620a <__multiply+0x52>
 801626e:	9b00      	ldr	r3, [sp, #0]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	b298      	uxth	r0, r3
 8016274:	2800      	cmp	r0, #0
 8016276:	d01c      	beq.n	80162b2 <__multiply+0xfa>
 8016278:	4667      	mov	r7, ip
 801627a:	2400      	movs	r4, #0
 801627c:	9e06      	ldr	r6, [sp, #24]
 801627e:	ce02      	ldmia	r6!, {r1}
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	b28b      	uxth	r3, r1
 8016284:	4343      	muls	r3, r0
 8016286:	0c09      	lsrs	r1, r1, #16
 8016288:	4341      	muls	r1, r0
 801628a:	b292      	uxth	r2, r2
 801628c:	189b      	adds	r3, r3, r2
 801628e:	191b      	adds	r3, r3, r4
 8016290:	000c      	movs	r4, r1
 8016292:	683a      	ldr	r2, [r7, #0]
 8016294:	0c11      	lsrs	r1, r2, #16
 8016296:	1861      	adds	r1, r4, r1
 8016298:	0c1c      	lsrs	r4, r3, #16
 801629a:	1909      	adds	r1, r1, r4
 801629c:	0c0c      	lsrs	r4, r1, #16
 801629e:	b29b      	uxth	r3, r3
 80162a0:	0409      	lsls	r1, r1, #16
 80162a2:	430b      	orrs	r3, r1
 80162a4:	c708      	stmia	r7!, {r3}
 80162a6:	9b04      	ldr	r3, [sp, #16]
 80162a8:	42b3      	cmp	r3, r6
 80162aa:	d8e8      	bhi.n	801627e <__multiply+0xc6>
 80162ac:	4663      	mov	r3, ip
 80162ae:	9a05      	ldr	r2, [sp, #20]
 80162b0:	509c      	str	r4, [r3, r2]
 80162b2:	9b00      	ldr	r3, [sp, #0]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	0c1e      	lsrs	r6, r3, #16
 80162b8:	d020      	beq.n	80162fc <__multiply+0x144>
 80162ba:	4663      	mov	r3, ip
 80162bc:	002c      	movs	r4, r5
 80162be:	4660      	mov	r0, ip
 80162c0:	2700      	movs	r7, #0
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	3414      	adds	r4, #20
 80162c6:	6822      	ldr	r2, [r4, #0]
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	b291      	uxth	r1, r2
 80162cc:	4371      	muls	r1, r6
 80162ce:	6802      	ldr	r2, [r0, #0]
 80162d0:	0c12      	lsrs	r2, r2, #16
 80162d2:	1889      	adds	r1, r1, r2
 80162d4:	19cf      	adds	r7, r1, r7
 80162d6:	0439      	lsls	r1, r7, #16
 80162d8:	430b      	orrs	r3, r1
 80162da:	6003      	str	r3, [r0, #0]
 80162dc:	cc02      	ldmia	r4!, {r1}
 80162de:	6843      	ldr	r3, [r0, #4]
 80162e0:	0c09      	lsrs	r1, r1, #16
 80162e2:	4371      	muls	r1, r6
 80162e4:	b29b      	uxth	r3, r3
 80162e6:	0c3f      	lsrs	r7, r7, #16
 80162e8:	18cb      	adds	r3, r1, r3
 80162ea:	9a04      	ldr	r2, [sp, #16]
 80162ec:	19db      	adds	r3, r3, r7
 80162ee:	0c1f      	lsrs	r7, r3, #16
 80162f0:	3004      	adds	r0, #4
 80162f2:	42a2      	cmp	r2, r4
 80162f4:	d8e7      	bhi.n	80162c6 <__multiply+0x10e>
 80162f6:	4662      	mov	r2, ip
 80162f8:	9905      	ldr	r1, [sp, #20]
 80162fa:	5053      	str	r3, [r2, r1]
 80162fc:	9b00      	ldr	r3, [sp, #0]
 80162fe:	3304      	adds	r3, #4
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	2304      	movs	r3, #4
 8016304:	449c      	add	ip, r3
 8016306:	e79c      	b.n	8016242 <__multiply+0x8a>
 8016308:	9b02      	ldr	r3, [sp, #8]
 801630a:	3b01      	subs	r3, #1
 801630c:	9302      	str	r3, [sp, #8]
 801630e:	e79c      	b.n	801624a <__multiply+0x92>
 8016310:	0801af11 	.word	0x0801af11
 8016314:	0801b000 	.word	0x0801b000

08016318 <__pow5mult>:
 8016318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801631a:	2303      	movs	r3, #3
 801631c:	0015      	movs	r5, r2
 801631e:	0007      	movs	r7, r0
 8016320:	000e      	movs	r6, r1
 8016322:	401a      	ands	r2, r3
 8016324:	421d      	tst	r5, r3
 8016326:	d008      	beq.n	801633a <__pow5mult+0x22>
 8016328:	491a      	ldr	r1, [pc, #104]	; (8016394 <__pow5mult+0x7c>)
 801632a:	3a01      	subs	r2, #1
 801632c:	0092      	lsls	r2, r2, #2
 801632e:	5852      	ldr	r2, [r2, r1]
 8016330:	2300      	movs	r3, #0
 8016332:	0031      	movs	r1, r6
 8016334:	f7ff fe52 	bl	8015fdc <__multadd>
 8016338:	0006      	movs	r6, r0
 801633a:	10ad      	asrs	r5, r5, #2
 801633c:	d027      	beq.n	801638e <__pow5mult+0x76>
 801633e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8016340:	2c00      	cmp	r4, #0
 8016342:	d107      	bne.n	8016354 <__pow5mult+0x3c>
 8016344:	0038      	movs	r0, r7
 8016346:	4914      	ldr	r1, [pc, #80]	; (8016398 <__pow5mult+0x80>)
 8016348:	f7ff ff20 	bl	801618c <__i2b>
 801634c:	2300      	movs	r3, #0
 801634e:	0004      	movs	r4, r0
 8016350:	64b8      	str	r0, [r7, #72]	; 0x48
 8016352:	6003      	str	r3, [r0, #0]
 8016354:	2301      	movs	r3, #1
 8016356:	421d      	tst	r5, r3
 8016358:	d00a      	beq.n	8016370 <__pow5mult+0x58>
 801635a:	0031      	movs	r1, r6
 801635c:	0022      	movs	r2, r4
 801635e:	0038      	movs	r0, r7
 8016360:	f7ff ff2a 	bl	80161b8 <__multiply>
 8016364:	0031      	movs	r1, r6
 8016366:	9001      	str	r0, [sp, #4]
 8016368:	0038      	movs	r0, r7
 801636a:	f7ff fe2d 	bl	8015fc8 <_Bfree>
 801636e:	9e01      	ldr	r6, [sp, #4]
 8016370:	106d      	asrs	r5, r5, #1
 8016372:	d00c      	beq.n	801638e <__pow5mult+0x76>
 8016374:	6820      	ldr	r0, [r4, #0]
 8016376:	2800      	cmp	r0, #0
 8016378:	d107      	bne.n	801638a <__pow5mult+0x72>
 801637a:	0022      	movs	r2, r4
 801637c:	0021      	movs	r1, r4
 801637e:	0038      	movs	r0, r7
 8016380:	f7ff ff1a 	bl	80161b8 <__multiply>
 8016384:	2300      	movs	r3, #0
 8016386:	6020      	str	r0, [r4, #0]
 8016388:	6003      	str	r3, [r0, #0]
 801638a:	0004      	movs	r4, r0
 801638c:	e7e2      	b.n	8016354 <__pow5mult+0x3c>
 801638e:	0030      	movs	r0, r6
 8016390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016392:	46c0      	nop			; (mov r8, r8)
 8016394:	0801b150 	.word	0x0801b150
 8016398:	00000271 	.word	0x00000271

0801639c <__lshift>:
 801639c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801639e:	000c      	movs	r4, r1
 80163a0:	0017      	movs	r7, r2
 80163a2:	6923      	ldr	r3, [r4, #16]
 80163a4:	1155      	asrs	r5, r2, #5
 80163a6:	b087      	sub	sp, #28
 80163a8:	18eb      	adds	r3, r5, r3
 80163aa:	9302      	str	r3, [sp, #8]
 80163ac:	3301      	adds	r3, #1
 80163ae:	9301      	str	r3, [sp, #4]
 80163b0:	6849      	ldr	r1, [r1, #4]
 80163b2:	68a3      	ldr	r3, [r4, #8]
 80163b4:	9004      	str	r0, [sp, #16]
 80163b6:	9a01      	ldr	r2, [sp, #4]
 80163b8:	4293      	cmp	r3, r2
 80163ba:	db11      	blt.n	80163e0 <__lshift+0x44>
 80163bc:	9804      	ldr	r0, [sp, #16]
 80163be:	f7ff fddb 	bl	8015f78 <_Balloc>
 80163c2:	0002      	movs	r2, r0
 80163c4:	2300      	movs	r3, #0
 80163c6:	3214      	adds	r2, #20
 80163c8:	0006      	movs	r6, r0
 80163ca:	0011      	movs	r1, r2
 80163cc:	9203      	str	r2, [sp, #12]
 80163ce:	4298      	cmp	r0, r3
 80163d0:	d10d      	bne.n	80163ee <__lshift+0x52>
 80163d2:	21da      	movs	r1, #218	; 0xda
 80163d4:	0002      	movs	r2, r0
 80163d6:	4b27      	ldr	r3, [pc, #156]	; (8016474 <__lshift+0xd8>)
 80163d8:	4827      	ldr	r0, [pc, #156]	; (8016478 <__lshift+0xdc>)
 80163da:	31ff      	adds	r1, #255	; 0xff
 80163dc:	f000 fb4e 	bl	8016a7c <__assert_func>
 80163e0:	3101      	adds	r1, #1
 80163e2:	005b      	lsls	r3, r3, #1
 80163e4:	e7e7      	b.n	80163b6 <__lshift+0x1a>
 80163e6:	2200      	movs	r2, #0
 80163e8:	0098      	lsls	r0, r3, #2
 80163ea:	500a      	str	r2, [r1, r0]
 80163ec:	3301      	adds	r3, #1
 80163ee:	42ab      	cmp	r3, r5
 80163f0:	dbf9      	blt.n	80163e6 <__lshift+0x4a>
 80163f2:	43eb      	mvns	r3, r5
 80163f4:	17db      	asrs	r3, r3, #31
 80163f6:	401d      	ands	r5, r3
 80163f8:	9b03      	ldr	r3, [sp, #12]
 80163fa:	00ad      	lsls	r5, r5, #2
 80163fc:	211f      	movs	r1, #31
 80163fe:	0038      	movs	r0, r7
 8016400:	195d      	adds	r5, r3, r5
 8016402:	0023      	movs	r3, r4
 8016404:	6922      	ldr	r2, [r4, #16]
 8016406:	3314      	adds	r3, #20
 8016408:	0092      	lsls	r2, r2, #2
 801640a:	4008      	ands	r0, r1
 801640c:	4684      	mov	ip, r0
 801640e:	189a      	adds	r2, r3, r2
 8016410:	420f      	tst	r7, r1
 8016412:	d02a      	beq.n	801646a <__lshift+0xce>
 8016414:	3101      	adds	r1, #1
 8016416:	1a09      	subs	r1, r1, r0
 8016418:	9105      	str	r1, [sp, #20]
 801641a:	2100      	movs	r1, #0
 801641c:	9503      	str	r5, [sp, #12]
 801641e:	4667      	mov	r7, ip
 8016420:	6818      	ldr	r0, [r3, #0]
 8016422:	40b8      	lsls	r0, r7
 8016424:	4301      	orrs	r1, r0
 8016426:	9803      	ldr	r0, [sp, #12]
 8016428:	c002      	stmia	r0!, {r1}
 801642a:	cb02      	ldmia	r3!, {r1}
 801642c:	9003      	str	r0, [sp, #12]
 801642e:	9805      	ldr	r0, [sp, #20]
 8016430:	40c1      	lsrs	r1, r0
 8016432:	429a      	cmp	r2, r3
 8016434:	d8f3      	bhi.n	801641e <__lshift+0x82>
 8016436:	0020      	movs	r0, r4
 8016438:	3015      	adds	r0, #21
 801643a:	2304      	movs	r3, #4
 801643c:	4282      	cmp	r2, r0
 801643e:	d304      	bcc.n	801644a <__lshift+0xae>
 8016440:	1b13      	subs	r3, r2, r4
 8016442:	3b15      	subs	r3, #21
 8016444:	089b      	lsrs	r3, r3, #2
 8016446:	3301      	adds	r3, #1
 8016448:	009b      	lsls	r3, r3, #2
 801644a:	50e9      	str	r1, [r5, r3]
 801644c:	2900      	cmp	r1, #0
 801644e:	d002      	beq.n	8016456 <__lshift+0xba>
 8016450:	9b02      	ldr	r3, [sp, #8]
 8016452:	3302      	adds	r3, #2
 8016454:	9301      	str	r3, [sp, #4]
 8016456:	9b01      	ldr	r3, [sp, #4]
 8016458:	9804      	ldr	r0, [sp, #16]
 801645a:	3b01      	subs	r3, #1
 801645c:	0021      	movs	r1, r4
 801645e:	6133      	str	r3, [r6, #16]
 8016460:	f7ff fdb2 	bl	8015fc8 <_Bfree>
 8016464:	0030      	movs	r0, r6
 8016466:	b007      	add	sp, #28
 8016468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646a:	cb02      	ldmia	r3!, {r1}
 801646c:	c502      	stmia	r5!, {r1}
 801646e:	429a      	cmp	r2, r3
 8016470:	d8fb      	bhi.n	801646a <__lshift+0xce>
 8016472:	e7f0      	b.n	8016456 <__lshift+0xba>
 8016474:	0801af11 	.word	0x0801af11
 8016478:	0801b000 	.word	0x0801b000

0801647c <__mcmp>:
 801647c:	6902      	ldr	r2, [r0, #16]
 801647e:	690b      	ldr	r3, [r1, #16]
 8016480:	b530      	push	{r4, r5, lr}
 8016482:	0004      	movs	r4, r0
 8016484:	1ad0      	subs	r0, r2, r3
 8016486:	429a      	cmp	r2, r3
 8016488:	d10d      	bne.n	80164a6 <__mcmp+0x2a>
 801648a:	009b      	lsls	r3, r3, #2
 801648c:	3414      	adds	r4, #20
 801648e:	3114      	adds	r1, #20
 8016490:	18e2      	adds	r2, r4, r3
 8016492:	18c9      	adds	r1, r1, r3
 8016494:	3a04      	subs	r2, #4
 8016496:	3904      	subs	r1, #4
 8016498:	6815      	ldr	r5, [r2, #0]
 801649a:	680b      	ldr	r3, [r1, #0]
 801649c:	429d      	cmp	r5, r3
 801649e:	d003      	beq.n	80164a8 <__mcmp+0x2c>
 80164a0:	2001      	movs	r0, #1
 80164a2:	429d      	cmp	r5, r3
 80164a4:	d303      	bcc.n	80164ae <__mcmp+0x32>
 80164a6:	bd30      	pop	{r4, r5, pc}
 80164a8:	4294      	cmp	r4, r2
 80164aa:	d3f3      	bcc.n	8016494 <__mcmp+0x18>
 80164ac:	e7fb      	b.n	80164a6 <__mcmp+0x2a>
 80164ae:	4240      	negs	r0, r0
 80164b0:	e7f9      	b.n	80164a6 <__mcmp+0x2a>
	...

080164b4 <__mdiff>:
 80164b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164b6:	000e      	movs	r6, r1
 80164b8:	0007      	movs	r7, r0
 80164ba:	0011      	movs	r1, r2
 80164bc:	0030      	movs	r0, r6
 80164be:	b087      	sub	sp, #28
 80164c0:	0014      	movs	r4, r2
 80164c2:	f7ff ffdb 	bl	801647c <__mcmp>
 80164c6:	1e05      	subs	r5, r0, #0
 80164c8:	d110      	bne.n	80164ec <__mdiff+0x38>
 80164ca:	0001      	movs	r1, r0
 80164cc:	0038      	movs	r0, r7
 80164ce:	f7ff fd53 	bl	8015f78 <_Balloc>
 80164d2:	1e02      	subs	r2, r0, #0
 80164d4:	d104      	bne.n	80164e0 <__mdiff+0x2c>
 80164d6:	4b40      	ldr	r3, [pc, #256]	; (80165d8 <__mdiff+0x124>)
 80164d8:	4940      	ldr	r1, [pc, #256]	; (80165dc <__mdiff+0x128>)
 80164da:	4841      	ldr	r0, [pc, #260]	; (80165e0 <__mdiff+0x12c>)
 80164dc:	f000 face 	bl	8016a7c <__assert_func>
 80164e0:	2301      	movs	r3, #1
 80164e2:	6145      	str	r5, [r0, #20]
 80164e4:	6103      	str	r3, [r0, #16]
 80164e6:	0010      	movs	r0, r2
 80164e8:	b007      	add	sp, #28
 80164ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ec:	2301      	movs	r3, #1
 80164ee:	9301      	str	r3, [sp, #4]
 80164f0:	2800      	cmp	r0, #0
 80164f2:	db04      	blt.n	80164fe <__mdiff+0x4a>
 80164f4:	0023      	movs	r3, r4
 80164f6:	0034      	movs	r4, r6
 80164f8:	001e      	movs	r6, r3
 80164fa:	2300      	movs	r3, #0
 80164fc:	9301      	str	r3, [sp, #4]
 80164fe:	0038      	movs	r0, r7
 8016500:	6861      	ldr	r1, [r4, #4]
 8016502:	f7ff fd39 	bl	8015f78 <_Balloc>
 8016506:	1e02      	subs	r2, r0, #0
 8016508:	d103      	bne.n	8016512 <__mdiff+0x5e>
 801650a:	2190      	movs	r1, #144	; 0x90
 801650c:	4b32      	ldr	r3, [pc, #200]	; (80165d8 <__mdiff+0x124>)
 801650e:	0089      	lsls	r1, r1, #2
 8016510:	e7e3      	b.n	80164da <__mdiff+0x26>
 8016512:	9b01      	ldr	r3, [sp, #4]
 8016514:	2700      	movs	r7, #0
 8016516:	60c3      	str	r3, [r0, #12]
 8016518:	6920      	ldr	r0, [r4, #16]
 801651a:	3414      	adds	r4, #20
 801651c:	9401      	str	r4, [sp, #4]
 801651e:	9b01      	ldr	r3, [sp, #4]
 8016520:	0084      	lsls	r4, r0, #2
 8016522:	191b      	adds	r3, r3, r4
 8016524:	0034      	movs	r4, r6
 8016526:	9302      	str	r3, [sp, #8]
 8016528:	6933      	ldr	r3, [r6, #16]
 801652a:	3414      	adds	r4, #20
 801652c:	0099      	lsls	r1, r3, #2
 801652e:	1863      	adds	r3, r4, r1
 8016530:	9303      	str	r3, [sp, #12]
 8016532:	0013      	movs	r3, r2
 8016534:	3314      	adds	r3, #20
 8016536:	469c      	mov	ip, r3
 8016538:	9305      	str	r3, [sp, #20]
 801653a:	9b01      	ldr	r3, [sp, #4]
 801653c:	9304      	str	r3, [sp, #16]
 801653e:	9b04      	ldr	r3, [sp, #16]
 8016540:	cc02      	ldmia	r4!, {r1}
 8016542:	cb20      	ldmia	r3!, {r5}
 8016544:	9304      	str	r3, [sp, #16]
 8016546:	b2ab      	uxth	r3, r5
 8016548:	19df      	adds	r7, r3, r7
 801654a:	b28b      	uxth	r3, r1
 801654c:	1afb      	subs	r3, r7, r3
 801654e:	0c2d      	lsrs	r5, r5, #16
 8016550:	0c09      	lsrs	r1, r1, #16
 8016552:	1a69      	subs	r1, r5, r1
 8016554:	141d      	asrs	r5, r3, #16
 8016556:	1949      	adds	r1, r1, r5
 8016558:	140f      	asrs	r7, r1, #16
 801655a:	b29b      	uxth	r3, r3
 801655c:	0409      	lsls	r1, r1, #16
 801655e:	430b      	orrs	r3, r1
 8016560:	4661      	mov	r1, ip
 8016562:	c108      	stmia	r1!, {r3}
 8016564:	9b03      	ldr	r3, [sp, #12]
 8016566:	468c      	mov	ip, r1
 8016568:	42a3      	cmp	r3, r4
 801656a:	d8e8      	bhi.n	801653e <__mdiff+0x8a>
 801656c:	0031      	movs	r1, r6
 801656e:	9c03      	ldr	r4, [sp, #12]
 8016570:	3115      	adds	r1, #21
 8016572:	2304      	movs	r3, #4
 8016574:	428c      	cmp	r4, r1
 8016576:	d304      	bcc.n	8016582 <__mdiff+0xce>
 8016578:	1ba3      	subs	r3, r4, r6
 801657a:	3b15      	subs	r3, #21
 801657c:	089b      	lsrs	r3, r3, #2
 801657e:	3301      	adds	r3, #1
 8016580:	009b      	lsls	r3, r3, #2
 8016582:	9901      	ldr	r1, [sp, #4]
 8016584:	18cc      	adds	r4, r1, r3
 8016586:	9905      	ldr	r1, [sp, #20]
 8016588:	0026      	movs	r6, r4
 801658a:	18cb      	adds	r3, r1, r3
 801658c:	469c      	mov	ip, r3
 801658e:	9902      	ldr	r1, [sp, #8]
 8016590:	428e      	cmp	r6, r1
 8016592:	d310      	bcc.n	80165b6 <__mdiff+0x102>
 8016594:	9e02      	ldr	r6, [sp, #8]
 8016596:	1ee5      	subs	r5, r4, #3
 8016598:	2100      	movs	r1, #0
 801659a:	42ae      	cmp	r6, r5
 801659c:	d304      	bcc.n	80165a8 <__mdiff+0xf4>
 801659e:	0031      	movs	r1, r6
 80165a0:	3103      	adds	r1, #3
 80165a2:	1b09      	subs	r1, r1, r4
 80165a4:	0889      	lsrs	r1, r1, #2
 80165a6:	0089      	lsls	r1, r1, #2
 80165a8:	185b      	adds	r3, r3, r1
 80165aa:	3b04      	subs	r3, #4
 80165ac:	6819      	ldr	r1, [r3, #0]
 80165ae:	2900      	cmp	r1, #0
 80165b0:	d00f      	beq.n	80165d2 <__mdiff+0x11e>
 80165b2:	6110      	str	r0, [r2, #16]
 80165b4:	e797      	b.n	80164e6 <__mdiff+0x32>
 80165b6:	ce02      	ldmia	r6!, {r1}
 80165b8:	b28d      	uxth	r5, r1
 80165ba:	19ed      	adds	r5, r5, r7
 80165bc:	0c0f      	lsrs	r7, r1, #16
 80165be:	1429      	asrs	r1, r5, #16
 80165c0:	1879      	adds	r1, r7, r1
 80165c2:	140f      	asrs	r7, r1, #16
 80165c4:	b2ad      	uxth	r5, r5
 80165c6:	0409      	lsls	r1, r1, #16
 80165c8:	430d      	orrs	r5, r1
 80165ca:	4661      	mov	r1, ip
 80165cc:	c120      	stmia	r1!, {r5}
 80165ce:	468c      	mov	ip, r1
 80165d0:	e7dd      	b.n	801658e <__mdiff+0xda>
 80165d2:	3801      	subs	r0, #1
 80165d4:	e7e9      	b.n	80165aa <__mdiff+0xf6>
 80165d6:	46c0      	nop			; (mov r8, r8)
 80165d8:	0801af11 	.word	0x0801af11
 80165dc:	00000232 	.word	0x00000232
 80165e0:	0801b000 	.word	0x0801b000

080165e4 <__ulp>:
 80165e4:	4b0f      	ldr	r3, [pc, #60]	; (8016624 <__ulp+0x40>)
 80165e6:	4019      	ands	r1, r3
 80165e8:	4b0f      	ldr	r3, [pc, #60]	; (8016628 <__ulp+0x44>)
 80165ea:	18c9      	adds	r1, r1, r3
 80165ec:	2900      	cmp	r1, #0
 80165ee:	dd04      	ble.n	80165fa <__ulp+0x16>
 80165f0:	2200      	movs	r2, #0
 80165f2:	000b      	movs	r3, r1
 80165f4:	0010      	movs	r0, r2
 80165f6:	0019      	movs	r1, r3
 80165f8:	4770      	bx	lr
 80165fa:	4249      	negs	r1, r1
 80165fc:	2200      	movs	r2, #0
 80165fe:	2300      	movs	r3, #0
 8016600:	1509      	asrs	r1, r1, #20
 8016602:	2913      	cmp	r1, #19
 8016604:	dc04      	bgt.n	8016610 <__ulp+0x2c>
 8016606:	2080      	movs	r0, #128	; 0x80
 8016608:	0300      	lsls	r0, r0, #12
 801660a:	4108      	asrs	r0, r1
 801660c:	0003      	movs	r3, r0
 801660e:	e7f1      	b.n	80165f4 <__ulp+0x10>
 8016610:	3914      	subs	r1, #20
 8016612:	2001      	movs	r0, #1
 8016614:	291e      	cmp	r1, #30
 8016616:	dc02      	bgt.n	801661e <__ulp+0x3a>
 8016618:	2080      	movs	r0, #128	; 0x80
 801661a:	0600      	lsls	r0, r0, #24
 801661c:	40c8      	lsrs	r0, r1
 801661e:	0002      	movs	r2, r0
 8016620:	e7e8      	b.n	80165f4 <__ulp+0x10>
 8016622:	46c0      	nop			; (mov r8, r8)
 8016624:	7ff00000 	.word	0x7ff00000
 8016628:	fcc00000 	.word	0xfcc00000

0801662c <__b2d>:
 801662c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801662e:	0006      	movs	r6, r0
 8016630:	6903      	ldr	r3, [r0, #16]
 8016632:	3614      	adds	r6, #20
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	18f3      	adds	r3, r6, r3
 8016638:	1f1d      	subs	r5, r3, #4
 801663a:	682c      	ldr	r4, [r5, #0]
 801663c:	000f      	movs	r7, r1
 801663e:	0020      	movs	r0, r4
 8016640:	9301      	str	r3, [sp, #4]
 8016642:	f7ff fd5b 	bl	80160fc <__hi0bits>
 8016646:	2320      	movs	r3, #32
 8016648:	1a1b      	subs	r3, r3, r0
 801664a:	491f      	ldr	r1, [pc, #124]	; (80166c8 <__b2d+0x9c>)
 801664c:	603b      	str	r3, [r7, #0]
 801664e:	280a      	cmp	r0, #10
 8016650:	dc16      	bgt.n	8016680 <__b2d+0x54>
 8016652:	230b      	movs	r3, #11
 8016654:	0027      	movs	r7, r4
 8016656:	1a1b      	subs	r3, r3, r0
 8016658:	40df      	lsrs	r7, r3
 801665a:	4339      	orrs	r1, r7
 801665c:	469c      	mov	ip, r3
 801665e:	000b      	movs	r3, r1
 8016660:	2100      	movs	r1, #0
 8016662:	42ae      	cmp	r6, r5
 8016664:	d202      	bcs.n	801666c <__b2d+0x40>
 8016666:	9901      	ldr	r1, [sp, #4]
 8016668:	3908      	subs	r1, #8
 801666a:	6809      	ldr	r1, [r1, #0]
 801666c:	3015      	adds	r0, #21
 801666e:	4084      	lsls	r4, r0
 8016670:	4660      	mov	r0, ip
 8016672:	40c1      	lsrs	r1, r0
 8016674:	430c      	orrs	r4, r1
 8016676:	0022      	movs	r2, r4
 8016678:	0010      	movs	r0, r2
 801667a:	0019      	movs	r1, r3
 801667c:	b003      	add	sp, #12
 801667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016680:	2700      	movs	r7, #0
 8016682:	42ae      	cmp	r6, r5
 8016684:	d202      	bcs.n	801668c <__b2d+0x60>
 8016686:	9d01      	ldr	r5, [sp, #4]
 8016688:	3d08      	subs	r5, #8
 801668a:	682f      	ldr	r7, [r5, #0]
 801668c:	230b      	movs	r3, #11
 801668e:	425b      	negs	r3, r3
 8016690:	469c      	mov	ip, r3
 8016692:	4484      	add	ip, r0
 8016694:	280b      	cmp	r0, #11
 8016696:	d013      	beq.n	80166c0 <__b2d+0x94>
 8016698:	4663      	mov	r3, ip
 801669a:	2020      	movs	r0, #32
 801669c:	409c      	lsls	r4, r3
 801669e:	1ac0      	subs	r0, r0, r3
 80166a0:	003b      	movs	r3, r7
 80166a2:	40c3      	lsrs	r3, r0
 80166a4:	431c      	orrs	r4, r3
 80166a6:	4321      	orrs	r1, r4
 80166a8:	000b      	movs	r3, r1
 80166aa:	2100      	movs	r1, #0
 80166ac:	42b5      	cmp	r5, r6
 80166ae:	d901      	bls.n	80166b4 <__b2d+0x88>
 80166b0:	3d04      	subs	r5, #4
 80166b2:	6829      	ldr	r1, [r5, #0]
 80166b4:	4664      	mov	r4, ip
 80166b6:	40c1      	lsrs	r1, r0
 80166b8:	40a7      	lsls	r7, r4
 80166ba:	430f      	orrs	r7, r1
 80166bc:	003a      	movs	r2, r7
 80166be:	e7db      	b.n	8016678 <__b2d+0x4c>
 80166c0:	4321      	orrs	r1, r4
 80166c2:	000b      	movs	r3, r1
 80166c4:	e7fa      	b.n	80166bc <__b2d+0x90>
 80166c6:	46c0      	nop			; (mov r8, r8)
 80166c8:	3ff00000 	.word	0x3ff00000

080166cc <__d2b>:
 80166cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166ce:	2101      	movs	r1, #1
 80166d0:	0014      	movs	r4, r2
 80166d2:	001e      	movs	r6, r3
 80166d4:	9f08      	ldr	r7, [sp, #32]
 80166d6:	f7ff fc4f 	bl	8015f78 <_Balloc>
 80166da:	1e05      	subs	r5, r0, #0
 80166dc:	d105      	bne.n	80166ea <__d2b+0x1e>
 80166de:	0002      	movs	r2, r0
 80166e0:	4b26      	ldr	r3, [pc, #152]	; (801677c <__d2b+0xb0>)
 80166e2:	4927      	ldr	r1, [pc, #156]	; (8016780 <__d2b+0xb4>)
 80166e4:	4827      	ldr	r0, [pc, #156]	; (8016784 <__d2b+0xb8>)
 80166e6:	f000 f9c9 	bl	8016a7c <__assert_func>
 80166ea:	0333      	lsls	r3, r6, #12
 80166ec:	0076      	lsls	r6, r6, #1
 80166ee:	0b1b      	lsrs	r3, r3, #12
 80166f0:	0d76      	lsrs	r6, r6, #21
 80166f2:	d124      	bne.n	801673e <__d2b+0x72>
 80166f4:	9301      	str	r3, [sp, #4]
 80166f6:	2c00      	cmp	r4, #0
 80166f8:	d027      	beq.n	801674a <__d2b+0x7e>
 80166fa:	4668      	mov	r0, sp
 80166fc:	9400      	str	r4, [sp, #0]
 80166fe:	f7ff fd17 	bl	8016130 <__lo0bits>
 8016702:	9c00      	ldr	r4, [sp, #0]
 8016704:	2800      	cmp	r0, #0
 8016706:	d01e      	beq.n	8016746 <__d2b+0x7a>
 8016708:	9b01      	ldr	r3, [sp, #4]
 801670a:	2120      	movs	r1, #32
 801670c:	001a      	movs	r2, r3
 801670e:	1a09      	subs	r1, r1, r0
 8016710:	408a      	lsls	r2, r1
 8016712:	40c3      	lsrs	r3, r0
 8016714:	4322      	orrs	r2, r4
 8016716:	616a      	str	r2, [r5, #20]
 8016718:	9301      	str	r3, [sp, #4]
 801671a:	9c01      	ldr	r4, [sp, #4]
 801671c:	61ac      	str	r4, [r5, #24]
 801671e:	1e63      	subs	r3, r4, #1
 8016720:	419c      	sbcs	r4, r3
 8016722:	3401      	adds	r4, #1
 8016724:	612c      	str	r4, [r5, #16]
 8016726:	2e00      	cmp	r6, #0
 8016728:	d018      	beq.n	801675c <__d2b+0x90>
 801672a:	4b17      	ldr	r3, [pc, #92]	; (8016788 <__d2b+0xbc>)
 801672c:	18f6      	adds	r6, r6, r3
 801672e:	2335      	movs	r3, #53	; 0x35
 8016730:	1836      	adds	r6, r6, r0
 8016732:	1a18      	subs	r0, r3, r0
 8016734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016736:	603e      	str	r6, [r7, #0]
 8016738:	6018      	str	r0, [r3, #0]
 801673a:	0028      	movs	r0, r5
 801673c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801673e:	2280      	movs	r2, #128	; 0x80
 8016740:	0352      	lsls	r2, r2, #13
 8016742:	4313      	orrs	r3, r2
 8016744:	e7d6      	b.n	80166f4 <__d2b+0x28>
 8016746:	616c      	str	r4, [r5, #20]
 8016748:	e7e7      	b.n	801671a <__d2b+0x4e>
 801674a:	a801      	add	r0, sp, #4
 801674c:	f7ff fcf0 	bl	8016130 <__lo0bits>
 8016750:	2401      	movs	r4, #1
 8016752:	9b01      	ldr	r3, [sp, #4]
 8016754:	612c      	str	r4, [r5, #16]
 8016756:	616b      	str	r3, [r5, #20]
 8016758:	3020      	adds	r0, #32
 801675a:	e7e4      	b.n	8016726 <__d2b+0x5a>
 801675c:	4b0b      	ldr	r3, [pc, #44]	; (801678c <__d2b+0xc0>)
 801675e:	18c0      	adds	r0, r0, r3
 8016760:	4b0b      	ldr	r3, [pc, #44]	; (8016790 <__d2b+0xc4>)
 8016762:	6038      	str	r0, [r7, #0]
 8016764:	18e3      	adds	r3, r4, r3
 8016766:	009b      	lsls	r3, r3, #2
 8016768:	18eb      	adds	r3, r5, r3
 801676a:	6958      	ldr	r0, [r3, #20]
 801676c:	f7ff fcc6 	bl	80160fc <__hi0bits>
 8016770:	0164      	lsls	r4, r4, #5
 8016772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016774:	1a24      	subs	r4, r4, r0
 8016776:	601c      	str	r4, [r3, #0]
 8016778:	e7df      	b.n	801673a <__d2b+0x6e>
 801677a:	46c0      	nop			; (mov r8, r8)
 801677c:	0801af11 	.word	0x0801af11
 8016780:	0000030a 	.word	0x0000030a
 8016784:	0801b000 	.word	0x0801b000
 8016788:	fffffbcd 	.word	0xfffffbcd
 801678c:	fffffbce 	.word	0xfffffbce
 8016790:	3fffffff 	.word	0x3fffffff

08016794 <__ratio>:
 8016794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016796:	b085      	sub	sp, #20
 8016798:	000d      	movs	r5, r1
 801679a:	a902      	add	r1, sp, #8
 801679c:	0004      	movs	r4, r0
 801679e:	f7ff ff45 	bl	801662c <__b2d>
 80167a2:	9000      	str	r0, [sp, #0]
 80167a4:	9101      	str	r1, [sp, #4]
 80167a6:	9e00      	ldr	r6, [sp, #0]
 80167a8:	9f01      	ldr	r7, [sp, #4]
 80167aa:	0028      	movs	r0, r5
 80167ac:	a903      	add	r1, sp, #12
 80167ae:	f7ff ff3d 	bl	801662c <__b2d>
 80167b2:	6924      	ldr	r4, [r4, #16]
 80167b4:	692d      	ldr	r5, [r5, #16]
 80167b6:	0002      	movs	r2, r0
 80167b8:	1b65      	subs	r5, r4, r5
 80167ba:	016c      	lsls	r4, r5, #5
 80167bc:	46a4      	mov	ip, r4
 80167be:	9d03      	ldr	r5, [sp, #12]
 80167c0:	9c02      	ldr	r4, [sp, #8]
 80167c2:	000b      	movs	r3, r1
 80167c4:	1b64      	subs	r4, r4, r5
 80167c6:	4464      	add	r4, ip
 80167c8:	0525      	lsls	r5, r4, #20
 80167ca:	2c00      	cmp	r4, #0
 80167cc:	dd07      	ble.n	80167de <__ratio+0x4a>
 80167ce:	9901      	ldr	r1, [sp, #4]
 80167d0:	186f      	adds	r7, r5, r1
 80167d2:	0030      	movs	r0, r6
 80167d4:	0039      	movs	r1, r7
 80167d6:	f7ea fc55 	bl	8001084 <__aeabi_ddiv>
 80167da:	b005      	add	sp, #20
 80167dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167de:	1b4b      	subs	r3, r1, r5
 80167e0:	e7f7      	b.n	80167d2 <__ratio+0x3e>

080167e2 <__copybits>:
 80167e2:	b570      	push	{r4, r5, r6, lr}
 80167e4:	0015      	movs	r5, r2
 80167e6:	6913      	ldr	r3, [r2, #16]
 80167e8:	3514      	adds	r5, #20
 80167ea:	009c      	lsls	r4, r3, #2
 80167ec:	0006      	movs	r6, r0
 80167ee:	002b      	movs	r3, r5
 80167f0:	3901      	subs	r1, #1
 80167f2:	1149      	asrs	r1, r1, #5
 80167f4:	3101      	adds	r1, #1
 80167f6:	0089      	lsls	r1, r1, #2
 80167f8:	1841      	adds	r1, r0, r1
 80167fa:	192c      	adds	r4, r5, r4
 80167fc:	429c      	cmp	r4, r3
 80167fe:	d80d      	bhi.n	801681c <__copybits+0x3a>
 8016800:	0015      	movs	r5, r2
 8016802:	3511      	adds	r5, #17
 8016804:	2300      	movs	r3, #0
 8016806:	42a5      	cmp	r5, r4
 8016808:	d803      	bhi.n	8016812 <__copybits+0x30>
 801680a:	1aa3      	subs	r3, r4, r2
 801680c:	3b11      	subs	r3, #17
 801680e:	089b      	lsrs	r3, r3, #2
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	18c0      	adds	r0, r0, r3
 8016814:	2300      	movs	r3, #0
 8016816:	4281      	cmp	r1, r0
 8016818:	d803      	bhi.n	8016822 <__copybits+0x40>
 801681a:	bd70      	pop	{r4, r5, r6, pc}
 801681c:	cb20      	ldmia	r3!, {r5}
 801681e:	c620      	stmia	r6!, {r5}
 8016820:	e7ec      	b.n	80167fc <__copybits+0x1a>
 8016822:	c008      	stmia	r0!, {r3}
 8016824:	e7f7      	b.n	8016816 <__copybits+0x34>

08016826 <__any_on>:
 8016826:	0002      	movs	r2, r0
 8016828:	6900      	ldr	r0, [r0, #16]
 801682a:	b510      	push	{r4, lr}
 801682c:	3214      	adds	r2, #20
 801682e:	114b      	asrs	r3, r1, #5
 8016830:	4298      	cmp	r0, r3
 8016832:	db13      	blt.n	801685c <__any_on+0x36>
 8016834:	dd0c      	ble.n	8016850 <__any_on+0x2a>
 8016836:	241f      	movs	r4, #31
 8016838:	0008      	movs	r0, r1
 801683a:	4020      	ands	r0, r4
 801683c:	4221      	tst	r1, r4
 801683e:	d007      	beq.n	8016850 <__any_on+0x2a>
 8016840:	0099      	lsls	r1, r3, #2
 8016842:	588c      	ldr	r4, [r1, r2]
 8016844:	0021      	movs	r1, r4
 8016846:	40c1      	lsrs	r1, r0
 8016848:	4081      	lsls	r1, r0
 801684a:	2001      	movs	r0, #1
 801684c:	428c      	cmp	r4, r1
 801684e:	d104      	bne.n	801685a <__any_on+0x34>
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	18d3      	adds	r3, r2, r3
 8016854:	4293      	cmp	r3, r2
 8016856:	d803      	bhi.n	8016860 <__any_on+0x3a>
 8016858:	2000      	movs	r0, #0
 801685a:	bd10      	pop	{r4, pc}
 801685c:	0003      	movs	r3, r0
 801685e:	e7f7      	b.n	8016850 <__any_on+0x2a>
 8016860:	3b04      	subs	r3, #4
 8016862:	6819      	ldr	r1, [r3, #0]
 8016864:	2900      	cmp	r1, #0
 8016866:	d0f5      	beq.n	8016854 <__any_on+0x2e>
 8016868:	2001      	movs	r0, #1
 801686a:	e7f6      	b.n	801685a <__any_on+0x34>

0801686c <frexp>:
 801686c:	b570      	push	{r4, r5, r6, lr}
 801686e:	0014      	movs	r4, r2
 8016870:	2500      	movs	r5, #0
 8016872:	6025      	str	r5, [r4, #0]
 8016874:	4d10      	ldr	r5, [pc, #64]	; (80168b8 <frexp+0x4c>)
 8016876:	004b      	lsls	r3, r1, #1
 8016878:	000a      	movs	r2, r1
 801687a:	085b      	lsrs	r3, r3, #1
 801687c:	42ab      	cmp	r3, r5
 801687e:	dc1a      	bgt.n	80168b6 <frexp+0x4a>
 8016880:	001d      	movs	r5, r3
 8016882:	4305      	orrs	r5, r0
 8016884:	d017      	beq.n	80168b6 <frexp+0x4a>
 8016886:	4d0d      	ldr	r5, [pc, #52]	; (80168bc <frexp+0x50>)
 8016888:	4229      	tst	r1, r5
 801688a:	d109      	bne.n	80168a0 <frexp+0x34>
 801688c:	2200      	movs	r2, #0
 801688e:	4b0c      	ldr	r3, [pc, #48]	; (80168c0 <frexp+0x54>)
 8016890:	f7ea fffe 	bl	8001890 <__aeabi_dmul>
 8016894:	2536      	movs	r5, #54	; 0x36
 8016896:	000a      	movs	r2, r1
 8016898:	004b      	lsls	r3, r1, #1
 801689a:	426d      	negs	r5, r5
 801689c:	085b      	lsrs	r3, r3, #1
 801689e:	6025      	str	r5, [r4, #0]
 80168a0:	4d08      	ldr	r5, [pc, #32]	; (80168c4 <frexp+0x58>)
 80168a2:	151b      	asrs	r3, r3, #20
 80168a4:	195b      	adds	r3, r3, r5
 80168a6:	6825      	ldr	r5, [r4, #0]
 80168a8:	18eb      	adds	r3, r5, r3
 80168aa:	6023      	str	r3, [r4, #0]
 80168ac:	4b06      	ldr	r3, [pc, #24]	; (80168c8 <frexp+0x5c>)
 80168ae:	401a      	ands	r2, r3
 80168b0:	4b06      	ldr	r3, [pc, #24]	; (80168cc <frexp+0x60>)
 80168b2:	4313      	orrs	r3, r2
 80168b4:	0019      	movs	r1, r3
 80168b6:	bd70      	pop	{r4, r5, r6, pc}
 80168b8:	7fefffff 	.word	0x7fefffff
 80168bc:	7ff00000 	.word	0x7ff00000
 80168c0:	43500000 	.word	0x43500000
 80168c4:	fffffc02 	.word	0xfffffc02
 80168c8:	800fffff 	.word	0x800fffff
 80168cc:	3fe00000 	.word	0x3fe00000

080168d0 <nan>:
 80168d0:	2000      	movs	r0, #0
 80168d2:	4901      	ldr	r1, [pc, #4]	; (80168d8 <nan+0x8>)
 80168d4:	4770      	bx	lr
 80168d6:	46c0      	nop			; (mov r8, r8)
 80168d8:	7ff80000 	.word	0x7ff80000

080168dc <__ssprint_r>:
 80168dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168de:	6893      	ldr	r3, [r2, #8]
 80168e0:	b087      	sub	sp, #28
 80168e2:	000c      	movs	r4, r1
 80168e4:	0017      	movs	r7, r2
 80168e6:	9002      	str	r0, [sp, #8]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d065      	beq.n	80169b8 <__ssprint_r+0xdc>
 80168ec:	6813      	ldr	r3, [r2, #0]
 80168ee:	9303      	str	r3, [sp, #12]
 80168f0:	2300      	movs	r3, #0
 80168f2:	9305      	str	r3, [sp, #20]
 80168f4:	9301      	str	r3, [sp, #4]
 80168f6:	9b01      	ldr	r3, [sp, #4]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d02d      	beq.n	8016958 <__ssprint_r+0x7c>
 80168fc:	68a6      	ldr	r6, [r4, #8]
 80168fe:	42b3      	cmp	r3, r6
 8016900:	d346      	bcc.n	8016990 <__ssprint_r+0xb4>
 8016902:	2390      	movs	r3, #144	; 0x90
 8016904:	89a2      	ldrh	r2, [r4, #12]
 8016906:	00db      	lsls	r3, r3, #3
 8016908:	421a      	tst	r2, r3
 801690a:	d041      	beq.n	8016990 <__ssprint_r+0xb4>
 801690c:	6921      	ldr	r1, [r4, #16]
 801690e:	6823      	ldr	r3, [r4, #0]
 8016910:	6965      	ldr	r5, [r4, #20]
 8016912:	1a5b      	subs	r3, r3, r1
 8016914:	9304      	str	r3, [sp, #16]
 8016916:	2303      	movs	r3, #3
 8016918:	435d      	muls	r5, r3
 801691a:	0feb      	lsrs	r3, r5, #31
 801691c:	195d      	adds	r5, r3, r5
 801691e:	9b04      	ldr	r3, [sp, #16]
 8016920:	9801      	ldr	r0, [sp, #4]
 8016922:	3301      	adds	r3, #1
 8016924:	181b      	adds	r3, r3, r0
 8016926:	106d      	asrs	r5, r5, #1
 8016928:	42ab      	cmp	r3, r5
 801692a:	d900      	bls.n	801692e <__ssprint_r+0x52>
 801692c:	001d      	movs	r5, r3
 801692e:	0553      	lsls	r3, r2, #21
 8016930:	d546      	bpl.n	80169c0 <__ssprint_r+0xe4>
 8016932:	0029      	movs	r1, r5
 8016934:	9802      	ldr	r0, [sp, #8]
 8016936:	f7fb f991 	bl	8011c5c <_malloc_r>
 801693a:	1e06      	subs	r6, r0, #0
 801693c:	d116      	bne.n	801696c <__ssprint_r+0x90>
 801693e:	230c      	movs	r3, #12
 8016940:	9a02      	ldr	r2, [sp, #8]
 8016942:	2001      	movs	r0, #1
 8016944:	6013      	str	r3, [r2, #0]
 8016946:	2340      	movs	r3, #64	; 0x40
 8016948:	89a2      	ldrh	r2, [r4, #12]
 801694a:	4240      	negs	r0, r0
 801694c:	4313      	orrs	r3, r2
 801694e:	81a3      	strh	r3, [r4, #12]
 8016950:	2300      	movs	r3, #0
 8016952:	60bb      	str	r3, [r7, #8]
 8016954:	607b      	str	r3, [r7, #4]
 8016956:	e031      	b.n	80169bc <__ssprint_r+0xe0>
 8016958:	9b03      	ldr	r3, [sp, #12]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	9305      	str	r3, [sp, #20]
 801695e:	9b03      	ldr	r3, [sp, #12]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	9301      	str	r3, [sp, #4]
 8016964:	9b03      	ldr	r3, [sp, #12]
 8016966:	3308      	adds	r3, #8
 8016968:	9303      	str	r3, [sp, #12]
 801696a:	e7c4      	b.n	80168f6 <__ssprint_r+0x1a>
 801696c:	9a04      	ldr	r2, [sp, #16]
 801696e:	6921      	ldr	r1, [r4, #16]
 8016970:	f7fb fb96 	bl	80120a0 <memcpy>
 8016974:	89a3      	ldrh	r3, [r4, #12]
 8016976:	4a18      	ldr	r2, [pc, #96]	; (80169d8 <__ssprint_r+0xfc>)
 8016978:	401a      	ands	r2, r3
 801697a:	2380      	movs	r3, #128	; 0x80
 801697c:	4313      	orrs	r3, r2
 801697e:	81a3      	strh	r3, [r4, #12]
 8016980:	9b04      	ldr	r3, [sp, #16]
 8016982:	6126      	str	r6, [r4, #16]
 8016984:	18f6      	adds	r6, r6, r3
 8016986:	6026      	str	r6, [r4, #0]
 8016988:	6165      	str	r5, [r4, #20]
 801698a:	9e01      	ldr	r6, [sp, #4]
 801698c:	1aed      	subs	r5, r5, r3
 801698e:	60a5      	str	r5, [r4, #8]
 8016990:	9b01      	ldr	r3, [sp, #4]
 8016992:	429e      	cmp	r6, r3
 8016994:	d900      	bls.n	8016998 <__ssprint_r+0xbc>
 8016996:	001e      	movs	r6, r3
 8016998:	0032      	movs	r2, r6
 801699a:	9905      	ldr	r1, [sp, #20]
 801699c:	6820      	ldr	r0, [r4, #0]
 801699e:	f7ff fad8 	bl	8015f52 <memmove>
 80169a2:	68a3      	ldr	r3, [r4, #8]
 80169a4:	9a01      	ldr	r2, [sp, #4]
 80169a6:	1b9b      	subs	r3, r3, r6
 80169a8:	60a3      	str	r3, [r4, #8]
 80169aa:	6823      	ldr	r3, [r4, #0]
 80169ac:	199e      	adds	r6, r3, r6
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	6026      	str	r6, [r4, #0]
 80169b2:	1a9b      	subs	r3, r3, r2
 80169b4:	60bb      	str	r3, [r7, #8]
 80169b6:	d1cf      	bne.n	8016958 <__ssprint_r+0x7c>
 80169b8:	2000      	movs	r0, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	b007      	add	sp, #28
 80169be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169c0:	002a      	movs	r2, r5
 80169c2:	9802      	ldr	r0, [sp, #8]
 80169c4:	f7fb fbb2 	bl	801212c <_realloc_r>
 80169c8:	1e06      	subs	r6, r0, #0
 80169ca:	d1d9      	bne.n	8016980 <__ssprint_r+0xa4>
 80169cc:	6921      	ldr	r1, [r4, #16]
 80169ce:	9802      	ldr	r0, [sp, #8]
 80169d0:	f7fe fe6e 	bl	80156b0 <_free_r>
 80169d4:	e7b3      	b.n	801693e <__ssprint_r+0x62>
 80169d6:	46c0      	nop			; (mov r8, r8)
 80169d8:	fffffb7f 	.word	0xfffffb7f

080169dc <__ascii_wctomb>:
 80169dc:	0003      	movs	r3, r0
 80169de:	1e08      	subs	r0, r1, #0
 80169e0:	d005      	beq.n	80169ee <__ascii_wctomb+0x12>
 80169e2:	2aff      	cmp	r2, #255	; 0xff
 80169e4:	d904      	bls.n	80169f0 <__ascii_wctomb+0x14>
 80169e6:	228a      	movs	r2, #138	; 0x8a
 80169e8:	2001      	movs	r0, #1
 80169ea:	601a      	str	r2, [r3, #0]
 80169ec:	4240      	negs	r0, r0
 80169ee:	4770      	bx	lr
 80169f0:	2001      	movs	r0, #1
 80169f2:	700a      	strb	r2, [r1, #0]
 80169f4:	e7fb      	b.n	80169ee <__ascii_wctomb+0x12>
	...

080169f8 <__register_exitproc>:
 80169f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169fa:	4f1e      	ldr	r7, [pc, #120]	; (8016a74 <__register_exitproc+0x7c>)
 80169fc:	0004      	movs	r4, r0
 80169fe:	6838      	ldr	r0, [r7, #0]
 8016a00:	0016      	movs	r6, r2
 8016a02:	9100      	str	r1, [sp, #0]
 8016a04:	9301      	str	r3, [sp, #4]
 8016a06:	f7ff fa85 	bl	8015f14 <__retarget_lock_acquire_recursive>
 8016a0a:	4b1b      	ldr	r3, [pc, #108]	; (8016a78 <__register_exitproc+0x80>)
 8016a0c:	6819      	ldr	r1, [r3, #0]
 8016a0e:	000b      	movs	r3, r1
 8016a10:	33fc      	adds	r3, #252	; 0xfc
 8016a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016a14:	2a00      	cmp	r2, #0
 8016a16:	d103      	bne.n	8016a20 <__register_exitproc+0x28>
 8016a18:	000a      	movs	r2, r1
 8016a1a:	324d      	adds	r2, #77	; 0x4d
 8016a1c:	32ff      	adds	r2, #255	; 0xff
 8016a1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8016a20:	6853      	ldr	r3, [r2, #4]
 8016a22:	6838      	ldr	r0, [r7, #0]
 8016a24:	2b1f      	cmp	r3, #31
 8016a26:	dd04      	ble.n	8016a32 <__register_exitproc+0x3a>
 8016a28:	f7ff fa75 	bl	8015f16 <__retarget_lock_release_recursive>
 8016a2c:	2001      	movs	r0, #1
 8016a2e:	4240      	negs	r0, r0
 8016a30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a32:	2c00      	cmp	r4, #0
 8016a34:	d014      	beq.n	8016a60 <__register_exitproc+0x68>
 8016a36:	0099      	lsls	r1, r3, #2
 8016a38:	1851      	adds	r1, r2, r1
 8016a3a:	000f      	movs	r7, r1
 8016a3c:	3788      	adds	r7, #136	; 0x88
 8016a3e:	603e      	str	r6, [r7, #0]
 8016a40:	2701      	movs	r7, #1
 8016a42:	0016      	movs	r6, r2
 8016a44:	409f      	lsls	r7, r3
 8016a46:	3685      	adds	r6, #133	; 0x85
 8016a48:	36ff      	adds	r6, #255	; 0xff
 8016a4a:	6875      	ldr	r5, [r6, #4]
 8016a4c:	31fc      	adds	r1, #252	; 0xfc
 8016a4e:	433d      	orrs	r5, r7
 8016a50:	6075      	str	r5, [r6, #4]
 8016a52:	9d01      	ldr	r5, [sp, #4]
 8016a54:	60cd      	str	r5, [r1, #12]
 8016a56:	2c02      	cmp	r4, #2
 8016a58:	d102      	bne.n	8016a60 <__register_exitproc+0x68>
 8016a5a:	68b1      	ldr	r1, [r6, #8]
 8016a5c:	430f      	orrs	r7, r1
 8016a5e:	60b7      	str	r7, [r6, #8]
 8016a60:	1c59      	adds	r1, r3, #1
 8016a62:	6051      	str	r1, [r2, #4]
 8016a64:	3302      	adds	r3, #2
 8016a66:	9900      	ldr	r1, [sp, #0]
 8016a68:	009b      	lsls	r3, r3, #2
 8016a6a:	5099      	str	r1, [r3, r2]
 8016a6c:	f7ff fa53 	bl	8015f16 <__retarget_lock_release_recursive>
 8016a70:	2000      	movs	r0, #0
 8016a72:	e7dd      	b.n	8016a30 <__register_exitproc+0x38>
 8016a74:	200008e8 	.word	0x200008e8
 8016a78:	0801ae5c 	.word	0x0801ae5c

08016a7c <__assert_func>:
 8016a7c:	b530      	push	{r4, r5, lr}
 8016a7e:	0014      	movs	r4, r2
 8016a80:	001a      	movs	r2, r3
 8016a82:	4b09      	ldr	r3, [pc, #36]	; (8016aa8 <__assert_func+0x2c>)
 8016a84:	0005      	movs	r5, r0
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	b085      	sub	sp, #20
 8016a8a:	68d8      	ldr	r0, [r3, #12]
 8016a8c:	4b07      	ldr	r3, [pc, #28]	; (8016aac <__assert_func+0x30>)
 8016a8e:	2c00      	cmp	r4, #0
 8016a90:	d101      	bne.n	8016a96 <__assert_func+0x1a>
 8016a92:	4b07      	ldr	r3, [pc, #28]	; (8016ab0 <__assert_func+0x34>)
 8016a94:	001c      	movs	r4, r3
 8016a96:	9301      	str	r3, [sp, #4]
 8016a98:	9100      	str	r1, [sp, #0]
 8016a9a:	002b      	movs	r3, r5
 8016a9c:	4905      	ldr	r1, [pc, #20]	; (8016ab4 <__assert_func+0x38>)
 8016a9e:	9402      	str	r4, [sp, #8]
 8016aa0:	f000 f836 	bl	8016b10 <fiprintf>
 8016aa4:	f000 fe1e 	bl	80176e4 <abort>
 8016aa8:	200000a8 	.word	0x200000a8
 8016aac:	0801b15c 	.word	0x0801b15c
 8016ab0:	0801b197 	.word	0x0801b197
 8016ab4:	0801b169 	.word	0x0801b169

08016ab8 <_calloc_r>:
 8016ab8:	b510      	push	{r4, lr}
 8016aba:	4351      	muls	r1, r2
 8016abc:	f7fb f8ce 	bl	8011c5c <_malloc_r>
 8016ac0:	1e04      	subs	r4, r0, #0
 8016ac2:	d01a      	beq.n	8016afa <_calloc_r+0x42>
 8016ac4:	0003      	movs	r3, r0
 8016ac6:	3b08      	subs	r3, #8
 8016ac8:	685a      	ldr	r2, [r3, #4]
 8016aca:	2303      	movs	r3, #3
 8016acc:	439a      	bics	r2, r3
 8016ace:	3a04      	subs	r2, #4
 8016ad0:	2a24      	cmp	r2, #36	; 0x24
 8016ad2:	d819      	bhi.n	8016b08 <_calloc_r+0x50>
 8016ad4:	0003      	movs	r3, r0
 8016ad6:	2a13      	cmp	r2, #19
 8016ad8:	d90b      	bls.n	8016af2 <_calloc_r+0x3a>
 8016ada:	2100      	movs	r1, #0
 8016adc:	3308      	adds	r3, #8
 8016ade:	6001      	str	r1, [r0, #0]
 8016ae0:	6041      	str	r1, [r0, #4]
 8016ae2:	2a1b      	cmp	r2, #27
 8016ae4:	d905      	bls.n	8016af2 <_calloc_r+0x3a>
 8016ae6:	6081      	str	r1, [r0, #8]
 8016ae8:	60c1      	str	r1, [r0, #12]
 8016aea:	2a24      	cmp	r2, #36	; 0x24
 8016aec:	d007      	beq.n	8016afe <_calloc_r+0x46>
 8016aee:	0003      	movs	r3, r0
 8016af0:	3310      	adds	r3, #16
 8016af2:	2200      	movs	r2, #0
 8016af4:	601a      	str	r2, [r3, #0]
 8016af6:	605a      	str	r2, [r3, #4]
 8016af8:	609a      	str	r2, [r3, #8]
 8016afa:	0020      	movs	r0, r4
 8016afc:	bd10      	pop	{r4, pc}
 8016afe:	0003      	movs	r3, r0
 8016b00:	6101      	str	r1, [r0, #16]
 8016b02:	3318      	adds	r3, #24
 8016b04:	6141      	str	r1, [r0, #20]
 8016b06:	e7f4      	b.n	8016af2 <_calloc_r+0x3a>
 8016b08:	2100      	movs	r1, #0
 8016b0a:	f7fb fad2 	bl	80120b2 <memset>
 8016b0e:	e7f4      	b.n	8016afa <_calloc_r+0x42>

08016b10 <fiprintf>:
 8016b10:	b40e      	push	{r1, r2, r3}
 8016b12:	b503      	push	{r0, r1, lr}
 8016b14:	0001      	movs	r1, r0
 8016b16:	ab03      	add	r3, sp, #12
 8016b18:	4804      	ldr	r0, [pc, #16]	; (8016b2c <fiprintf+0x1c>)
 8016b1a:	cb04      	ldmia	r3!, {r2}
 8016b1c:	6800      	ldr	r0, [r0, #0]
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	f000 f83a 	bl	8016b98 <_vfiprintf_r>
 8016b24:	b002      	add	sp, #8
 8016b26:	bc08      	pop	{r3}
 8016b28:	b003      	add	sp, #12
 8016b2a:	4718      	bx	r3
 8016b2c:	200000a8 	.word	0x200000a8

08016b30 <__sprint_r>:
 8016b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b32:	b085      	sub	sp, #20
 8016b34:	9001      	str	r0, [sp, #4]
 8016b36:	6890      	ldr	r0, [r2, #8]
 8016b38:	000d      	movs	r5, r1
 8016b3a:	0014      	movs	r4, r2
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	d102      	bne.n	8016b46 <__sprint_r+0x16>
 8016b40:	6050      	str	r0, [r2, #4]
 8016b42:	b005      	add	sp, #20
 8016b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b46:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8016b48:	049b      	lsls	r3, r3, #18
 8016b4a:	d521      	bpl.n	8016b90 <__sprint_r+0x60>
 8016b4c:	6817      	ldr	r7, [r2, #0]
 8016b4e:	2600      	movs	r6, #0
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	9302      	str	r3, [sp, #8]
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	9300      	str	r3, [sp, #0]
 8016b58:	089b      	lsrs	r3, r3, #2
 8016b5a:	9303      	str	r3, [sp, #12]
 8016b5c:	9b03      	ldr	r3, [sp, #12]
 8016b5e:	42b3      	cmp	r3, r6
 8016b60:	dc0b      	bgt.n	8016b7a <__sprint_r+0x4a>
 8016b62:	2303      	movs	r3, #3
 8016b64:	9800      	ldr	r0, [sp, #0]
 8016b66:	3708      	adds	r7, #8
 8016b68:	4398      	bics	r0, r3
 8016b6a:	68a3      	ldr	r3, [r4, #8]
 8016b6c:	1a18      	subs	r0, r3, r0
 8016b6e:	60a0      	str	r0, [r4, #8]
 8016b70:	d1ed      	bne.n	8016b4e <__sprint_r+0x1e>
 8016b72:	2300      	movs	r3, #0
 8016b74:	60a3      	str	r3, [r4, #8]
 8016b76:	6063      	str	r3, [r4, #4]
 8016b78:	e7e3      	b.n	8016b42 <__sprint_r+0x12>
 8016b7a:	9902      	ldr	r1, [sp, #8]
 8016b7c:	00b3      	lsls	r3, r6, #2
 8016b7e:	58c9      	ldr	r1, [r1, r3]
 8016b80:	002a      	movs	r2, r5
 8016b82:	9801      	ldr	r0, [sp, #4]
 8016b84:	f000 ff2c 	bl	80179e0 <_fputwc_r>
 8016b88:	1c43      	adds	r3, r0, #1
 8016b8a:	d0f2      	beq.n	8016b72 <__sprint_r+0x42>
 8016b8c:	3601      	adds	r6, #1
 8016b8e:	e7e5      	b.n	8016b5c <__sprint_r+0x2c>
 8016b90:	9801      	ldr	r0, [sp, #4]
 8016b92:	f000 ff4f 	bl	8017a34 <__sfvwrite_r>
 8016b96:	e7ec      	b.n	8016b72 <__sprint_r+0x42>

08016b98 <_vfiprintf_r>:
 8016b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b9a:	b0c3      	sub	sp, #268	; 0x10c
 8016b9c:	001c      	movs	r4, r3
 8016b9e:	001d      	movs	r5, r3
 8016ba0:	9006      	str	r0, [sp, #24]
 8016ba2:	9103      	str	r1, [sp, #12]
 8016ba4:	9207      	str	r2, [sp, #28]
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	d005      	beq.n	8016bb6 <_vfiprintf_r+0x1e>
 8016baa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016bac:	9304      	str	r3, [sp, #16]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d101      	bne.n	8016bb6 <_vfiprintf_r+0x1e>
 8016bb2:	f000 fead 	bl	8017910 <__sinit>
 8016bb6:	9b03      	ldr	r3, [sp, #12]
 8016bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bba:	07db      	lsls	r3, r3, #31
 8016bbc:	d407      	bmi.n	8016bce <_vfiprintf_r+0x36>
 8016bbe:	9b03      	ldr	r3, [sp, #12]
 8016bc0:	899b      	ldrh	r3, [r3, #12]
 8016bc2:	059b      	lsls	r3, r3, #22
 8016bc4:	d403      	bmi.n	8016bce <_vfiprintf_r+0x36>
 8016bc6:	9b03      	ldr	r3, [sp, #12]
 8016bc8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016bca:	f7ff f9a3 	bl	8015f14 <__retarget_lock_acquire_recursive>
 8016bce:	9b03      	ldr	r3, [sp, #12]
 8016bd0:	220c      	movs	r2, #12
 8016bd2:	5e9a      	ldrsh	r2, [r3, r2]
 8016bd4:	2380      	movs	r3, #128	; 0x80
 8016bd6:	019b      	lsls	r3, r3, #6
 8016bd8:	421a      	tst	r2, r3
 8016bda:	d107      	bne.n	8016bec <_vfiprintf_r+0x54>
 8016bdc:	4313      	orrs	r3, r2
 8016bde:	9a03      	ldr	r2, [sp, #12]
 8016be0:	8193      	strh	r3, [r2, #12]
 8016be2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8016be4:	4ba7      	ldr	r3, [pc, #668]	; (8016e84 <_vfiprintf_r+0x2ec>)
 8016be6:	4013      	ands	r3, r2
 8016be8:	9a03      	ldr	r2, [sp, #12]
 8016bea:	6653      	str	r3, [r2, #100]	; 0x64
 8016bec:	9b03      	ldr	r3, [sp, #12]
 8016bee:	899b      	ldrh	r3, [r3, #12]
 8016bf0:	071b      	lsls	r3, r3, #28
 8016bf2:	d503      	bpl.n	8016bfc <_vfiprintf_r+0x64>
 8016bf4:	9b03      	ldr	r3, [sp, #12]
 8016bf6:	691b      	ldr	r3, [r3, #16]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d118      	bne.n	8016c2e <_vfiprintf_r+0x96>
 8016bfc:	9903      	ldr	r1, [sp, #12]
 8016bfe:	9806      	ldr	r0, [sp, #24]
 8016c00:	f000 fd0c 	bl	801761c <__swsetup_r>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d012      	beq.n	8016c2e <_vfiprintf_r+0x96>
 8016c08:	9b03      	ldr	r3, [sp, #12]
 8016c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c0c:	07db      	lsls	r3, r3, #31
 8016c0e:	d505      	bpl.n	8016c1c <_vfiprintf_r+0x84>
 8016c10:	2301      	movs	r3, #1
 8016c12:	425b      	negs	r3, r3
 8016c14:	9308      	str	r3, [sp, #32]
 8016c16:	9808      	ldr	r0, [sp, #32]
 8016c18:	b043      	add	sp, #268	; 0x10c
 8016c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c1c:	9b03      	ldr	r3, [sp, #12]
 8016c1e:	899b      	ldrh	r3, [r3, #12]
 8016c20:	059b      	lsls	r3, r3, #22
 8016c22:	d4f5      	bmi.n	8016c10 <_vfiprintf_r+0x78>
 8016c24:	9b03      	ldr	r3, [sp, #12]
 8016c26:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016c28:	f7ff f975 	bl	8015f16 <__retarget_lock_release_recursive>
 8016c2c:	e7f0      	b.n	8016c10 <_vfiprintf_r+0x78>
 8016c2e:	9b03      	ldr	r3, [sp, #12]
 8016c30:	899a      	ldrh	r2, [r3, #12]
 8016c32:	231a      	movs	r3, #26
 8016c34:	4013      	ands	r3, r2
 8016c36:	2b0a      	cmp	r3, #10
 8016c38:	d116      	bne.n	8016c68 <_vfiprintf_r+0xd0>
 8016c3a:	9b03      	ldr	r3, [sp, #12]
 8016c3c:	210e      	movs	r1, #14
 8016c3e:	5e5b      	ldrsh	r3, [r3, r1]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	db11      	blt.n	8016c68 <_vfiprintf_r+0xd0>
 8016c44:	9b03      	ldr	r3, [sp, #12]
 8016c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c48:	07db      	lsls	r3, r3, #31
 8016c4a:	d405      	bmi.n	8016c58 <_vfiprintf_r+0xc0>
 8016c4c:	0593      	lsls	r3, r2, #22
 8016c4e:	d403      	bmi.n	8016c58 <_vfiprintf_r+0xc0>
 8016c50:	9b03      	ldr	r3, [sp, #12]
 8016c52:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016c54:	f7ff f95f 	bl	8015f16 <__retarget_lock_release_recursive>
 8016c58:	0023      	movs	r3, r4
 8016c5a:	9a07      	ldr	r2, [sp, #28]
 8016c5c:	9903      	ldr	r1, [sp, #12]
 8016c5e:	9806      	ldr	r0, [sp, #24]
 8016c60:	f000 fc98 	bl	8017594 <__sbprintf>
 8016c64:	9008      	str	r0, [sp, #32]
 8016c66:	e7d6      	b.n	8016c16 <_vfiprintf_r+0x7e>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	af19      	add	r7, sp, #100	; 0x64
 8016c6c:	9716      	str	r7, [sp, #88]	; 0x58
 8016c6e:	9318      	str	r3, [sp, #96]	; 0x60
 8016c70:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c72:	930c      	str	r3, [sp, #48]	; 0x30
 8016c74:	930d      	str	r3, [sp, #52]	; 0x34
 8016c76:	930e      	str	r3, [sp, #56]	; 0x38
 8016c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c7a:	9308      	str	r3, [sp, #32]
 8016c7c:	9c07      	ldr	r4, [sp, #28]
 8016c7e:	7823      	ldrb	r3, [r4, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <_vfiprintf_r+0xf2>
 8016c84:	2b25      	cmp	r3, #37	; 0x25
 8016c86:	d000      	beq.n	8016c8a <_vfiprintf_r+0xf2>
 8016c88:	e093      	b.n	8016db2 <_vfiprintf_r+0x21a>
 8016c8a:	9b07      	ldr	r3, [sp, #28]
 8016c8c:	1ae3      	subs	r3, r4, r3
 8016c8e:	001e      	movs	r6, r3
 8016c90:	9b07      	ldr	r3, [sp, #28]
 8016c92:	429c      	cmp	r4, r3
 8016c94:	d01a      	beq.n	8016ccc <_vfiprintf_r+0x134>
 8016c96:	46b4      	mov	ip, r6
 8016c98:	603b      	str	r3, [r7, #0]
 8016c9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016c9c:	607e      	str	r6, [r7, #4]
 8016c9e:	4463      	add	r3, ip
 8016ca0:	9318      	str	r3, [sp, #96]	; 0x60
 8016ca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ca4:	3708      	adds	r7, #8
 8016ca6:	9304      	str	r3, [sp, #16]
 8016ca8:	3301      	adds	r3, #1
 8016caa:	9317      	str	r3, [sp, #92]	; 0x5c
 8016cac:	2b07      	cmp	r3, #7
 8016cae:	dd09      	ble.n	8016cc4 <_vfiprintf_r+0x12c>
 8016cb0:	9903      	ldr	r1, [sp, #12]
 8016cb2:	9806      	ldr	r0, [sp, #24]
 8016cb4:	aa16      	add	r2, sp, #88	; 0x58
 8016cb6:	f7ff ff3b 	bl	8016b30 <__sprint_r>
 8016cba:	2800      	cmp	r0, #0
 8016cbc:	d001      	beq.n	8016cc2 <_vfiprintf_r+0x12a>
 8016cbe:	f000 fc00 	bl	80174c2 <_vfiprintf_r+0x92a>
 8016cc2:	af19      	add	r7, sp, #100	; 0x64
 8016cc4:	46b4      	mov	ip, r6
 8016cc6:	9b08      	ldr	r3, [sp, #32]
 8016cc8:	4463      	add	r3, ip
 8016cca:	9308      	str	r3, [sp, #32]
 8016ccc:	7823      	ldrb	r3, [r4, #0]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d101      	bne.n	8016cd6 <_vfiprintf_r+0x13e>
 8016cd2:	f000 fc1b 	bl	801750c <_vfiprintf_r+0x974>
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	a914      	add	r1, sp, #80	; 0x50
 8016cda:	70ca      	strb	r2, [r1, #3]
 8016cdc:	2101      	movs	r1, #1
 8016cde:	1c63      	adds	r3, r4, #1
 8016ce0:	0014      	movs	r4, r2
 8016ce2:	4249      	negs	r1, r1
 8016ce4:	9105      	str	r1, [sp, #20]
 8016ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8016ce8:	1c5a      	adds	r2, r3, #1
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	9207      	str	r2, [sp, #28]
 8016cee:	0018      	movs	r0, r3
 8016cf0:	3820      	subs	r0, #32
 8016cf2:	285a      	cmp	r0, #90	; 0x5a
 8016cf4:	d900      	bls.n	8016cf8 <_vfiprintf_r+0x160>
 8016cf6:	e37c      	b.n	80173f2 <_vfiprintf_r+0x85a>
 8016cf8:	f7e9 fa20 	bl	800013c <__gnu_thumb1_case_uhi>
 8016cfc:	037b0098 	.word	0x037b0098
 8016d00:	00a1037b 	.word	0x00a1037b
 8016d04:	037b037b 	.word	0x037b037b
 8016d08:	007d037b 	.word	0x007d037b
 8016d0c:	037b037b 	.word	0x037b037b
 8016d10:	00ab00a3 	.word	0x00ab00a3
 8016d14:	00a9037b 	.word	0x00a9037b
 8016d18:	037b00af 	.word	0x037b00af
 8016d1c:	00d500d3 	.word	0x00d500d3
 8016d20:	00d500d5 	.word	0x00d500d5
 8016d24:	00d500d5 	.word	0x00d500d5
 8016d28:	00d500d5 	.word	0x00d500d5
 8016d2c:	00d500d5 	.word	0x00d500d5
 8016d30:	037b037b 	.word	0x037b037b
 8016d34:	037b037b 	.word	0x037b037b
 8016d38:	037b037b 	.word	0x037b037b
 8016d3c:	037b037b 	.word	0x037b037b
 8016d40:	00fe037b 	.word	0x00fe037b
 8016d44:	037b01f9 	.word	0x037b01f9
 8016d48:	037b037b 	.word	0x037b037b
 8016d4c:	037b037b 	.word	0x037b037b
 8016d50:	037b037b 	.word	0x037b037b
 8016d54:	037b037b 	.word	0x037b037b
 8016d58:	0252037b 	.word	0x0252037b
 8016d5c:	037b037b 	.word	0x037b037b
 8016d60:	0295037b 	.word	0x0295037b
 8016d64:	02b1037b 	.word	0x02b1037b
 8016d68:	037b037b 	.word	0x037b037b
 8016d6c:	037b02ec 	.word	0x037b02ec
 8016d70:	037b037b 	.word	0x037b037b
 8016d74:	037b037b 	.word	0x037b037b
 8016d78:	037b037b 	.word	0x037b037b
 8016d7c:	037b037b 	.word	0x037b037b
 8016d80:	00fe037b 	.word	0x00fe037b
 8016d84:	037b01fb 	.word	0x037b01fb
 8016d88:	037b037b 	.word	0x037b037b
 8016d8c:	01fb00e7 	.word	0x01fb00e7
 8016d90:	037b00fa 	.word	0x037b00fa
 8016d94:	037b00f3 	.word	0x037b00f3
 8016d98:	0254023b 	.word	0x0254023b
 8016d9c:	00fa0287 	.word	0x00fa0287
 8016da0:	0295037b 	.word	0x0295037b
 8016da4:	02b3009f 	.word	0x02b3009f
 8016da8:	037b037b 	.word	0x037b037b
 8016dac:	037b005d 	.word	0x037b005d
 8016db0:	009f      	.short	0x009f
 8016db2:	3401      	adds	r4, #1
 8016db4:	e763      	b.n	8016c7e <_vfiprintf_r+0xe6>
 8016db6:	4a34      	ldr	r2, [pc, #208]	; (8016e88 <_vfiprintf_r+0x2f0>)
 8016db8:	0020      	movs	r0, r4
 8016dba:	920c      	str	r2, [sp, #48]	; 0x30
 8016dbc:	2220      	movs	r2, #32
 8016dbe:	4010      	ands	r0, r2
 8016dc0:	4214      	tst	r4, r2
 8016dc2:	d100      	bne.n	8016dc6 <_vfiprintf_r+0x22e>
 8016dc4:	e288      	b.n	80172d8 <_vfiprintf_r+0x740>
 8016dc6:	3a19      	subs	r2, #25
 8016dc8:	3507      	adds	r5, #7
 8016dca:	4395      	bics	r5, r2
 8016dcc:	0028      	movs	r0, r5
 8016dce:	c806      	ldmia	r0!, {r1, r2}
 8016dd0:	9100      	str	r1, [sp, #0]
 8016dd2:	9201      	str	r2, [sp, #4]
 8016dd4:	9004      	str	r0, [sp, #16]
 8016dd6:	07e2      	lsls	r2, r4, #31
 8016dd8:	d509      	bpl.n	8016dee <_vfiprintf_r+0x256>
 8016dda:	9a00      	ldr	r2, [sp, #0]
 8016ddc:	9901      	ldr	r1, [sp, #4]
 8016dde:	430a      	orrs	r2, r1
 8016de0:	d005      	beq.n	8016dee <_vfiprintf_r+0x256>
 8016de2:	aa15      	add	r2, sp, #84	; 0x54
 8016de4:	2130      	movs	r1, #48	; 0x30
 8016de6:	7053      	strb	r3, [r2, #1]
 8016de8:	2302      	movs	r3, #2
 8016dea:	7011      	strb	r1, [r2, #0]
 8016dec:	431c      	orrs	r4, r3
 8016dee:	4b27      	ldr	r3, [pc, #156]	; (8016e8c <_vfiprintf_r+0x2f4>)
 8016df0:	401c      	ands	r4, r3
 8016df2:	2302      	movs	r3, #2
 8016df4:	e1e6      	b.n	80171c4 <_vfiprintf_r+0x62c>
 8016df6:	9806      	ldr	r0, [sp, #24]
 8016df8:	f7ff f886 	bl	8015f08 <_localeconv_r>
 8016dfc:	6843      	ldr	r3, [r0, #4]
 8016dfe:	0018      	movs	r0, r3
 8016e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e02:	f7e9 f989 	bl	8000118 <strlen>
 8016e06:	900e      	str	r0, [sp, #56]	; 0x38
 8016e08:	9806      	ldr	r0, [sp, #24]
 8016e0a:	f7ff f87d 	bl	8015f08 <_localeconv_r>
 8016e0e:	6883      	ldr	r3, [r0, #8]
 8016e10:	930d      	str	r3, [sp, #52]	; 0x34
 8016e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d010      	beq.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d00d      	beq.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d00a      	beq.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e24:	2380      	movs	r3, #128	; 0x80
 8016e26:	00db      	lsls	r3, r3, #3
 8016e28:	431c      	orrs	r4, r3
 8016e2a:	e006      	b.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e2c:	ab14      	add	r3, sp, #80	; 0x50
 8016e2e:	78da      	ldrb	r2, [r3, #3]
 8016e30:	3303      	adds	r3, #3
 8016e32:	2a00      	cmp	r2, #0
 8016e34:	d101      	bne.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e36:	3220      	adds	r2, #32
 8016e38:	701a      	strb	r2, [r3, #0]
 8016e3a:	9b07      	ldr	r3, [sp, #28]
 8016e3c:	e754      	b.n	8016ce8 <_vfiprintf_r+0x150>
 8016e3e:	2301      	movs	r3, #1
 8016e40:	e7f2      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016e42:	cd08      	ldmia	r5!, {r3}
 8016e44:	9309      	str	r3, [sp, #36]	; 0x24
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	daf7      	bge.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e4a:	425b      	negs	r3, r3
 8016e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e4e:	2304      	movs	r3, #4
 8016e50:	e7ea      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016e52:	222b      	movs	r2, #43	; 0x2b
 8016e54:	ab14      	add	r3, sp, #80	; 0x50
 8016e56:	70da      	strb	r2, [r3, #3]
 8016e58:	e7ef      	b.n	8016e3a <_vfiprintf_r+0x2a2>
 8016e5a:	9b07      	ldr	r3, [sp, #28]
 8016e5c:	1c5a      	adds	r2, r3, #1
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	2b2a      	cmp	r3, #42	; 0x2a
 8016e62:	d015      	beq.n	8016e90 <_vfiprintf_r+0x2f8>
 8016e64:	2100      	movs	r1, #0
 8016e66:	9105      	str	r1, [sp, #20]
 8016e68:	0019      	movs	r1, r3
 8016e6a:	3930      	subs	r1, #48	; 0x30
 8016e6c:	9207      	str	r2, [sp, #28]
 8016e6e:	2909      	cmp	r1, #9
 8016e70:	d900      	bls.n	8016e74 <_vfiprintf_r+0x2dc>
 8016e72:	e73c      	b.n	8016cee <_vfiprintf_r+0x156>
 8016e74:	230a      	movs	r3, #10
 8016e76:	9805      	ldr	r0, [sp, #20]
 8016e78:	4358      	muls	r0, r3
 8016e7a:	1843      	adds	r3, r0, r1
 8016e7c:	9305      	str	r3, [sp, #20]
 8016e7e:	7813      	ldrb	r3, [r2, #0]
 8016e80:	3201      	adds	r2, #1
 8016e82:	e7f1      	b.n	8016e68 <_vfiprintf_r+0x2d0>
 8016e84:	ffffdfff 	.word	0xffffdfff
 8016e88:	0801aec0 	.word	0x0801aec0
 8016e8c:	fffffbff 	.word	0xfffffbff
 8016e90:	cd08      	ldmia	r5!, {r3}
 8016e92:	9305      	str	r3, [sp, #20]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	da02      	bge.n	8016e9e <_vfiprintf_r+0x306>
 8016e98:	2301      	movs	r3, #1
 8016e9a:	425b      	negs	r3, r3
 8016e9c:	9305      	str	r3, [sp, #20]
 8016e9e:	9207      	str	r2, [sp, #28]
 8016ea0:	e7cb      	b.n	8016e3a <_vfiprintf_r+0x2a2>
 8016ea2:	2380      	movs	r3, #128	; 0x80
 8016ea4:	e7c0      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016ea6:	2100      	movs	r1, #0
 8016ea8:	9a07      	ldr	r2, [sp, #28]
 8016eaa:	9109      	str	r1, [sp, #36]	; 0x24
 8016eac:	200a      	movs	r0, #10
 8016eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016eb0:	3b30      	subs	r3, #48	; 0x30
 8016eb2:	4341      	muls	r1, r0
 8016eb4:	185b      	adds	r3, r3, r1
 8016eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8016eb8:	0013      	movs	r3, r2
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	3201      	adds	r2, #1
 8016ebe:	0019      	movs	r1, r3
 8016ec0:	3930      	subs	r1, #48	; 0x30
 8016ec2:	9207      	str	r2, [sp, #28]
 8016ec4:	2909      	cmp	r1, #9
 8016ec6:	d9f1      	bls.n	8016eac <_vfiprintf_r+0x314>
 8016ec8:	e711      	b.n	8016cee <_vfiprintf_r+0x156>
 8016eca:	9b07      	ldr	r3, [sp, #28]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	2b68      	cmp	r3, #104	; 0x68
 8016ed0:	d105      	bne.n	8016ede <_vfiprintf_r+0x346>
 8016ed2:	9b07      	ldr	r3, [sp, #28]
 8016ed4:	3301      	adds	r3, #1
 8016ed6:	9307      	str	r3, [sp, #28]
 8016ed8:	2380      	movs	r3, #128	; 0x80
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	e7a4      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016ede:	2340      	movs	r3, #64	; 0x40
 8016ee0:	e7a2      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016ee2:	9b07      	ldr	r3, [sp, #28]
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	2b6c      	cmp	r3, #108	; 0x6c
 8016ee8:	d104      	bne.n	8016ef4 <_vfiprintf_r+0x35c>
 8016eea:	9b07      	ldr	r3, [sp, #28]
 8016eec:	3301      	adds	r3, #1
 8016eee:	9307      	str	r3, [sp, #28]
 8016ef0:	2320      	movs	r3, #32
 8016ef2:	e799      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016ef4:	2310      	movs	r3, #16
 8016ef6:	e797      	b.n	8016e28 <_vfiprintf_r+0x290>
 8016ef8:	9504      	str	r5, [sp, #16]
 8016efa:	9a04      	ldr	r2, [sp, #16]
 8016efc:	ad29      	add	r5, sp, #164	; 0xa4
 8016efe:	ca08      	ldmia	r2!, {r3}
 8016f00:	9204      	str	r2, [sp, #16]
 8016f02:	2200      	movs	r2, #0
 8016f04:	702b      	strb	r3, [r5, #0]
 8016f06:	ab14      	add	r3, sp, #80	; 0x50
 8016f08:	70da      	strb	r2, [r3, #3]
 8016f0a:	2301      	movs	r3, #1
 8016f0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f12:	9a05      	ldr	r2, [sp, #20]
 8016f14:	930a      	str	r3, [sp, #40]	; 0x28
 8016f16:	4293      	cmp	r3, r2
 8016f18:	da00      	bge.n	8016f1c <_vfiprintf_r+0x384>
 8016f1a:	920a      	str	r2, [sp, #40]	; 0x28
 8016f1c:	ab14      	add	r3, sp, #80	; 0x50
 8016f1e:	3303      	adds	r3, #3
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	1e5a      	subs	r2, r3, #1
 8016f24:	4193      	sbcs	r3, r2
 8016f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f28:	18d3      	adds	r3, r2, r3
 8016f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f2c:	0022      	movs	r2, r4
 8016f2e:	2302      	movs	r3, #2
 8016f30:	401a      	ands	r2, r3
 8016f32:	9210      	str	r2, [sp, #64]	; 0x40
 8016f34:	421c      	tst	r4, r3
 8016f36:	d002      	beq.n	8016f3e <_vfiprintf_r+0x3a6>
 8016f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f3a:	3302      	adds	r3, #2
 8016f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8016f3e:	2384      	movs	r3, #132	; 0x84
 8016f40:	0022      	movs	r2, r4
 8016f42:	401a      	ands	r2, r3
 8016f44:	9211      	str	r2, [sp, #68]	; 0x44
 8016f46:	421c      	tst	r4, r3
 8016f48:	d11f      	bne.n	8016f8a <_vfiprintf_r+0x3f2>
 8016f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f4e:	1a9b      	subs	r3, r3, r2
 8016f50:	1e1e      	subs	r6, r3, #0
 8016f52:	dd1a      	ble.n	8016f8a <_vfiprintf_r+0x3f2>
 8016f54:	0039      	movs	r1, r7
 8016f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f58:	48c9      	ldr	r0, [pc, #804]	; (8017280 <_vfiprintf_r+0x6e8>)
 8016f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8016f5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016f5e:	3301      	adds	r3, #1
 8016f60:	3108      	adds	r1, #8
 8016f62:	6038      	str	r0, [r7, #0]
 8016f64:	2e10      	cmp	r6, #16
 8016f66:	dd00      	ble.n	8016f6a <_vfiprintf_r+0x3d2>
 8016f68:	e251      	b.n	801740e <_vfiprintf_r+0x876>
 8016f6a:	18b2      	adds	r2, r6, r2
 8016f6c:	607e      	str	r6, [r7, #4]
 8016f6e:	9218      	str	r2, [sp, #96]	; 0x60
 8016f70:	000f      	movs	r7, r1
 8016f72:	9317      	str	r3, [sp, #92]	; 0x5c
 8016f74:	2b07      	cmp	r3, #7
 8016f76:	dd08      	ble.n	8016f8a <_vfiprintf_r+0x3f2>
 8016f78:	9903      	ldr	r1, [sp, #12]
 8016f7a:	9806      	ldr	r0, [sp, #24]
 8016f7c:	aa16      	add	r2, sp, #88	; 0x58
 8016f7e:	f7ff fdd7 	bl	8016b30 <__sprint_r>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	d000      	beq.n	8016f88 <_vfiprintf_r+0x3f0>
 8016f86:	e29c      	b.n	80174c2 <_vfiprintf_r+0x92a>
 8016f88:	af19      	add	r7, sp, #100	; 0x64
 8016f8a:	ab14      	add	r3, sp, #80	; 0x50
 8016f8c:	1cda      	adds	r2, r3, #3
 8016f8e:	78db      	ldrb	r3, [r3, #3]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d017      	beq.n	8016fc4 <_vfiprintf_r+0x42c>
 8016f94:	603a      	str	r2, [r7, #0]
 8016f96:	2201      	movs	r2, #1
 8016f98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016f9a:	607a      	str	r2, [r7, #4]
 8016f9c:	9312      	str	r3, [sp, #72]	; 0x48
 8016f9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fa2:	3201      	adds	r2, #1
 8016fa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	9218      	str	r2, [sp, #96]	; 0x60
 8016faa:	9317      	str	r3, [sp, #92]	; 0x5c
 8016fac:	3708      	adds	r7, #8
 8016fae:	2b07      	cmp	r3, #7
 8016fb0:	dd08      	ble.n	8016fc4 <_vfiprintf_r+0x42c>
 8016fb2:	9903      	ldr	r1, [sp, #12]
 8016fb4:	9806      	ldr	r0, [sp, #24]
 8016fb6:	aa16      	add	r2, sp, #88	; 0x58
 8016fb8:	f7ff fdba 	bl	8016b30 <__sprint_r>
 8016fbc:	2800      	cmp	r0, #0
 8016fbe:	d000      	beq.n	8016fc2 <_vfiprintf_r+0x42a>
 8016fc0:	e27f      	b.n	80174c2 <_vfiprintf_r+0x92a>
 8016fc2:	af19      	add	r7, sp, #100	; 0x64
 8016fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d018      	beq.n	8016ffc <_vfiprintf_r+0x464>
 8016fca:	aa15      	add	r2, sp, #84	; 0x54
 8016fcc:	603a      	str	r2, [r7, #0]
 8016fce:	2202      	movs	r2, #2
 8016fd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016fd2:	607a      	str	r2, [r7, #4]
 8016fd4:	9310      	str	r3, [sp, #64]	; 0x40
 8016fd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fda:	3202      	adds	r2, #2
 8016fdc:	9312      	str	r3, [sp, #72]	; 0x48
 8016fde:	3301      	adds	r3, #1
 8016fe0:	9218      	str	r2, [sp, #96]	; 0x60
 8016fe2:	9317      	str	r3, [sp, #92]	; 0x5c
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	2b07      	cmp	r3, #7
 8016fe8:	dd08      	ble.n	8016ffc <_vfiprintf_r+0x464>
 8016fea:	9903      	ldr	r1, [sp, #12]
 8016fec:	9806      	ldr	r0, [sp, #24]
 8016fee:	aa16      	add	r2, sp, #88	; 0x58
 8016ff0:	f7ff fd9e 	bl	8016b30 <__sprint_r>
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	d000      	beq.n	8016ffa <_vfiprintf_r+0x462>
 8016ff8:	e263      	b.n	80174c2 <_vfiprintf_r+0x92a>
 8016ffa:	af19      	add	r7, sp, #100	; 0x64
 8016ffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ffe:	2b80      	cmp	r3, #128	; 0x80
 8017000:	d11f      	bne.n	8017042 <_vfiprintf_r+0x4aa>
 8017002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017006:	1a9b      	subs	r3, r3, r2
 8017008:	1e1e      	subs	r6, r3, #0
 801700a:	dd1a      	ble.n	8017042 <_vfiprintf_r+0x4aa>
 801700c:	0039      	movs	r1, r7
 801700e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017010:	489c      	ldr	r0, [pc, #624]	; (8017284 <_vfiprintf_r+0x6ec>)
 8017012:	9310      	str	r3, [sp, #64]	; 0x40
 8017014:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017016:	3301      	adds	r3, #1
 8017018:	3108      	adds	r1, #8
 801701a:	6038      	str	r0, [r7, #0]
 801701c:	2e10      	cmp	r6, #16
 801701e:	dd00      	ble.n	8017022 <_vfiprintf_r+0x48a>
 8017020:	e209      	b.n	8017436 <_vfiprintf_r+0x89e>
 8017022:	18b2      	adds	r2, r6, r2
 8017024:	607e      	str	r6, [r7, #4]
 8017026:	9218      	str	r2, [sp, #96]	; 0x60
 8017028:	000f      	movs	r7, r1
 801702a:	9317      	str	r3, [sp, #92]	; 0x5c
 801702c:	2b07      	cmp	r3, #7
 801702e:	dd08      	ble.n	8017042 <_vfiprintf_r+0x4aa>
 8017030:	9903      	ldr	r1, [sp, #12]
 8017032:	9806      	ldr	r0, [sp, #24]
 8017034:	aa16      	add	r2, sp, #88	; 0x58
 8017036:	f7ff fd7b 	bl	8016b30 <__sprint_r>
 801703a:	2800      	cmp	r0, #0
 801703c:	d000      	beq.n	8017040 <_vfiprintf_r+0x4a8>
 801703e:	e240      	b.n	80174c2 <_vfiprintf_r+0x92a>
 8017040:	af19      	add	r7, sp, #100	; 0x64
 8017042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017044:	9a05      	ldr	r2, [sp, #20]
 8017046:	1a9b      	subs	r3, r3, r2
 8017048:	1e1e      	subs	r6, r3, #0
 801704a:	dd1a      	ble.n	8017082 <_vfiprintf_r+0x4ea>
 801704c:	0039      	movs	r1, r7
 801704e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017050:	488c      	ldr	r0, [pc, #560]	; (8017284 <_vfiprintf_r+0x6ec>)
 8017052:	930b      	str	r3, [sp, #44]	; 0x2c
 8017054:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017056:	3301      	adds	r3, #1
 8017058:	3108      	adds	r1, #8
 801705a:	6038      	str	r0, [r7, #0]
 801705c:	2e10      	cmp	r6, #16
 801705e:	dd00      	ble.n	8017062 <_vfiprintf_r+0x4ca>
 8017060:	e1fd      	b.n	801745e <_vfiprintf_r+0x8c6>
 8017062:	18b2      	adds	r2, r6, r2
 8017064:	607e      	str	r6, [r7, #4]
 8017066:	9218      	str	r2, [sp, #96]	; 0x60
 8017068:	000f      	movs	r7, r1
 801706a:	9317      	str	r3, [sp, #92]	; 0x5c
 801706c:	2b07      	cmp	r3, #7
 801706e:	dd08      	ble.n	8017082 <_vfiprintf_r+0x4ea>
 8017070:	9903      	ldr	r1, [sp, #12]
 8017072:	9806      	ldr	r0, [sp, #24]
 8017074:	aa16      	add	r2, sp, #88	; 0x58
 8017076:	f7ff fd5b 	bl	8016b30 <__sprint_r>
 801707a:	2800      	cmp	r0, #0
 801707c:	d000      	beq.n	8017080 <_vfiprintf_r+0x4e8>
 801707e:	e220      	b.n	80174c2 <_vfiprintf_r+0x92a>
 8017080:	af19      	add	r7, sp, #100	; 0x64
 8017082:	9b05      	ldr	r3, [sp, #20]
 8017084:	603d      	str	r5, [r7, #0]
 8017086:	607b      	str	r3, [r7, #4]
 8017088:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801708a:	3708      	adds	r7, #8
 801708c:	930b      	str	r3, [sp, #44]	; 0x2c
 801708e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017090:	9b05      	ldr	r3, [sp, #20]
 8017092:	4694      	mov	ip, r2
 8017094:	4463      	add	r3, ip
 8017096:	9318      	str	r3, [sp, #96]	; 0x60
 8017098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801709a:	9305      	str	r3, [sp, #20]
 801709c:	3301      	adds	r3, #1
 801709e:	9317      	str	r3, [sp, #92]	; 0x5c
 80170a0:	2b07      	cmp	r3, #7
 80170a2:	dd08      	ble.n	80170b6 <_vfiprintf_r+0x51e>
 80170a4:	9903      	ldr	r1, [sp, #12]
 80170a6:	9806      	ldr	r0, [sp, #24]
 80170a8:	aa16      	add	r2, sp, #88	; 0x58
 80170aa:	f7ff fd41 	bl	8016b30 <__sprint_r>
 80170ae:	2800      	cmp	r0, #0
 80170b0:	d000      	beq.n	80170b4 <_vfiprintf_r+0x51c>
 80170b2:	e206      	b.n	80174c2 <_vfiprintf_r+0x92a>
 80170b4:	af19      	add	r7, sp, #100	; 0x64
 80170b6:	0763      	lsls	r3, r4, #29
 80170b8:	d500      	bpl.n	80170bc <_vfiprintf_r+0x524>
 80170ba:	e1e4      	b.n	8017486 <_vfiprintf_r+0x8ee>
 80170bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170c0:	4293      	cmp	r3, r2
 80170c2:	da00      	bge.n	80170c6 <_vfiprintf_r+0x52e>
 80170c4:	0013      	movs	r3, r2
 80170c6:	9a08      	ldr	r2, [sp, #32]
 80170c8:	18d3      	adds	r3, r2, r3
 80170ca:	9308      	str	r3, [sp, #32]
 80170cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80170ce:	9305      	str	r3, [sp, #20]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d007      	beq.n	80170e4 <_vfiprintf_r+0x54c>
 80170d4:	9903      	ldr	r1, [sp, #12]
 80170d6:	9806      	ldr	r0, [sp, #24]
 80170d8:	aa16      	add	r2, sp, #88	; 0x58
 80170da:	f7ff fd29 	bl	8016b30 <__sprint_r>
 80170de:	2800      	cmp	r0, #0
 80170e0:	d000      	beq.n	80170e4 <_vfiprintf_r+0x54c>
 80170e2:	e1ee      	b.n	80174c2 <_vfiprintf_r+0x92a>
 80170e4:	2300      	movs	r3, #0
 80170e6:	9d04      	ldr	r5, [sp, #16]
 80170e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80170ea:	af19      	add	r7, sp, #100	; 0x64
 80170ec:	e5c6      	b.n	8016c7c <_vfiprintf_r+0xe4>
 80170ee:	2310      	movs	r3, #16
 80170f0:	431c      	orrs	r4, r3
 80170f2:	06a3      	lsls	r3, r4, #26
 80170f4:	d52b      	bpl.n	801714e <_vfiprintf_r+0x5b6>
 80170f6:	2307      	movs	r3, #7
 80170f8:	3507      	adds	r5, #7
 80170fa:	439d      	bics	r5, r3
 80170fc:	0029      	movs	r1, r5
 80170fe:	c90c      	ldmia	r1!, {r2, r3}
 8017100:	9200      	str	r2, [sp, #0]
 8017102:	9301      	str	r3, [sp, #4]
 8017104:	9104      	str	r1, [sp, #16]
 8017106:	9a01      	ldr	r2, [sp, #4]
 8017108:	2301      	movs	r3, #1
 801710a:	2a00      	cmp	r2, #0
 801710c:	da09      	bge.n	8017122 <_vfiprintf_r+0x58a>
 801710e:	9d00      	ldr	r5, [sp, #0]
 8017110:	9e01      	ldr	r6, [sp, #4]
 8017112:	2200      	movs	r2, #0
 8017114:	4269      	negs	r1, r5
 8017116:	41b2      	sbcs	r2, r6
 8017118:	9100      	str	r1, [sp, #0]
 801711a:	9201      	str	r2, [sp, #4]
 801711c:	212d      	movs	r1, #45	; 0x2d
 801711e:	aa14      	add	r2, sp, #80	; 0x50
 8017120:	70d1      	strb	r1, [r2, #3]
 8017122:	9901      	ldr	r1, [sp, #4]
 8017124:	9a00      	ldr	r2, [sp, #0]
 8017126:	430a      	orrs	r2, r1
 8017128:	9905      	ldr	r1, [sp, #20]
 801712a:	3101      	adds	r1, #1
 801712c:	d100      	bne.n	8017130 <_vfiprintf_r+0x598>
 801712e:	e1fc      	b.n	801752a <_vfiprintf_r+0x992>
 8017130:	2180      	movs	r1, #128	; 0x80
 8017132:	0020      	movs	r0, r4
 8017134:	4388      	bics	r0, r1
 8017136:	0006      	movs	r6, r0
 8017138:	2a00      	cmp	r2, #0
 801713a:	d000      	beq.n	801713e <_vfiprintf_r+0x5a6>
 801713c:	e1f9      	b.n	8017532 <_vfiprintf_r+0x99a>
 801713e:	9a05      	ldr	r2, [sp, #20]
 8017140:	2a00      	cmp	r2, #0
 8017142:	d100      	bne.n	8017146 <_vfiprintf_r+0x5ae>
 8017144:	e149      	b.n	80173da <_vfiprintf_r+0x842>
 8017146:	2b01      	cmp	r3, #1
 8017148:	d000      	beq.n	801714c <_vfiprintf_r+0x5b4>
 801714a:	e1f5      	b.n	8017538 <_vfiprintf_r+0x9a0>
 801714c:	e0ea      	b.n	8017324 <_vfiprintf_r+0x78c>
 801714e:	1d2b      	adds	r3, r5, #4
 8017150:	9304      	str	r3, [sp, #16]
 8017152:	06e3      	lsls	r3, r4, #27
 8017154:	d504      	bpl.n	8017160 <_vfiprintf_r+0x5c8>
 8017156:	682b      	ldr	r3, [r5, #0]
 8017158:	9300      	str	r3, [sp, #0]
 801715a:	17db      	asrs	r3, r3, #31
 801715c:	9301      	str	r3, [sp, #4]
 801715e:	e7d2      	b.n	8017106 <_vfiprintf_r+0x56e>
 8017160:	682b      	ldr	r3, [r5, #0]
 8017162:	0662      	lsls	r2, r4, #25
 8017164:	d501      	bpl.n	801716a <_vfiprintf_r+0x5d2>
 8017166:	b21b      	sxth	r3, r3
 8017168:	e7f6      	b.n	8017158 <_vfiprintf_r+0x5c0>
 801716a:	05a2      	lsls	r2, r4, #22
 801716c:	d5f4      	bpl.n	8017158 <_vfiprintf_r+0x5c0>
 801716e:	b25b      	sxtb	r3, r3
 8017170:	e7f2      	b.n	8017158 <_vfiprintf_r+0x5c0>
 8017172:	cd08      	ldmia	r5!, {r3}
 8017174:	06a2      	lsls	r2, r4, #26
 8017176:	d504      	bpl.n	8017182 <_vfiprintf_r+0x5ea>
 8017178:	9a08      	ldr	r2, [sp, #32]
 801717a:	601a      	str	r2, [r3, #0]
 801717c:	17d2      	asrs	r2, r2, #31
 801717e:	605a      	str	r2, [r3, #4]
 8017180:	e57c      	b.n	8016c7c <_vfiprintf_r+0xe4>
 8017182:	06e2      	lsls	r2, r4, #27
 8017184:	d502      	bpl.n	801718c <_vfiprintf_r+0x5f4>
 8017186:	9a08      	ldr	r2, [sp, #32]
 8017188:	601a      	str	r2, [r3, #0]
 801718a:	e577      	b.n	8016c7c <_vfiprintf_r+0xe4>
 801718c:	0662      	lsls	r2, r4, #25
 801718e:	d502      	bpl.n	8017196 <_vfiprintf_r+0x5fe>
 8017190:	9a08      	ldr	r2, [sp, #32]
 8017192:	801a      	strh	r2, [r3, #0]
 8017194:	e572      	b.n	8016c7c <_vfiprintf_r+0xe4>
 8017196:	05a2      	lsls	r2, r4, #22
 8017198:	d5f5      	bpl.n	8017186 <_vfiprintf_r+0x5ee>
 801719a:	9a08      	ldr	r2, [sp, #32]
 801719c:	701a      	strb	r2, [r3, #0]
 801719e:	e56d      	b.n	8016c7c <_vfiprintf_r+0xe4>
 80171a0:	2310      	movs	r3, #16
 80171a2:	431c      	orrs	r4, r3
 80171a4:	2320      	movs	r3, #32
 80171a6:	0021      	movs	r1, r4
 80171a8:	4019      	ands	r1, r3
 80171aa:	421c      	tst	r4, r3
 80171ac:	d00d      	beq.n	80171ca <_vfiprintf_r+0x632>
 80171ae:	3b19      	subs	r3, #25
 80171b0:	3507      	adds	r5, #7
 80171b2:	439d      	bics	r5, r3
 80171b4:	0029      	movs	r1, r5
 80171b6:	c90c      	ldmia	r1!, {r2, r3}
 80171b8:	9200      	str	r2, [sp, #0]
 80171ba:	9301      	str	r3, [sp, #4]
 80171bc:	9104      	str	r1, [sp, #16]
 80171be:	4b32      	ldr	r3, [pc, #200]	; (8017288 <_vfiprintf_r+0x6f0>)
 80171c0:	401c      	ands	r4, r3
 80171c2:	2300      	movs	r3, #0
 80171c4:	2100      	movs	r1, #0
 80171c6:	aa14      	add	r2, sp, #80	; 0x50
 80171c8:	e7aa      	b.n	8017120 <_vfiprintf_r+0x588>
 80171ca:	1d2b      	adds	r3, r5, #4
 80171cc:	0022      	movs	r2, r4
 80171ce:	9304      	str	r3, [sp, #16]
 80171d0:	2310      	movs	r3, #16
 80171d2:	401a      	ands	r2, r3
 80171d4:	421c      	tst	r4, r3
 80171d6:	d003      	beq.n	80171e0 <_vfiprintf_r+0x648>
 80171d8:	682b      	ldr	r3, [r5, #0]
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	9101      	str	r1, [sp, #4]
 80171de:	e7ee      	b.n	80171be <_vfiprintf_r+0x626>
 80171e0:	2340      	movs	r3, #64	; 0x40
 80171e2:	0021      	movs	r1, r4
 80171e4:	4019      	ands	r1, r3
 80171e6:	421c      	tst	r4, r3
 80171e8:	d004      	beq.n	80171f4 <_vfiprintf_r+0x65c>
 80171ea:	682b      	ldr	r3, [r5, #0]
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	9300      	str	r3, [sp, #0]
 80171f0:	9201      	str	r2, [sp, #4]
 80171f2:	e7e4      	b.n	80171be <_vfiprintf_r+0x626>
 80171f4:	2380      	movs	r3, #128	; 0x80
 80171f6:	0022      	movs	r2, r4
 80171f8:	009b      	lsls	r3, r3, #2
 80171fa:	401a      	ands	r2, r3
 80171fc:	421c      	tst	r4, r3
 80171fe:	d002      	beq.n	8017206 <_vfiprintf_r+0x66e>
 8017200:	682b      	ldr	r3, [r5, #0]
 8017202:	b2db      	uxtb	r3, r3
 8017204:	e7e9      	b.n	80171da <_vfiprintf_r+0x642>
 8017206:	682b      	ldr	r3, [r5, #0]
 8017208:	e7f1      	b.n	80171ee <_vfiprintf_r+0x656>
 801720a:	002b      	movs	r3, r5
 801720c:	cb04      	ldmia	r3!, {r2}
 801720e:	491f      	ldr	r1, [pc, #124]	; (801728c <_vfiprintf_r+0x6f4>)
 8017210:	9304      	str	r3, [sp, #16]
 8017212:	2300      	movs	r3, #0
 8017214:	9200      	str	r2, [sp, #0]
 8017216:	aa15      	add	r2, sp, #84	; 0x54
 8017218:	8011      	strh	r1, [r2, #0]
 801721a:	4a1d      	ldr	r2, [pc, #116]	; (8017290 <_vfiprintf_r+0x6f8>)
 801721c:	9301      	str	r3, [sp, #4]
 801721e:	3302      	adds	r3, #2
 8017220:	431c      	orrs	r4, r3
 8017222:	920c      	str	r2, [sp, #48]	; 0x30
 8017224:	e7ce      	b.n	80171c4 <_vfiprintf_r+0x62c>
 8017226:	002b      	movs	r3, r5
 8017228:	2200      	movs	r2, #0
 801722a:	cb20      	ldmia	r3!, {r5}
 801722c:	9304      	str	r3, [sp, #16]
 801722e:	ab14      	add	r3, sp, #80	; 0x50
 8017230:	70da      	strb	r2, [r3, #3]
 8017232:	9b05      	ldr	r3, [sp, #20]
 8017234:	3301      	adds	r3, #1
 8017236:	d00d      	beq.n	8017254 <_vfiprintf_r+0x6bc>
 8017238:	2100      	movs	r1, #0
 801723a:	0028      	movs	r0, r5
 801723c:	9a05      	ldr	r2, [sp, #20]
 801723e:	f7fe fe7d 	bl	8015f3c <memchr>
 8017242:	900b      	str	r0, [sp, #44]	; 0x2c
 8017244:	2800      	cmp	r0, #0
 8017246:	d100      	bne.n	801724a <_vfiprintf_r+0x6b2>
 8017248:	e662      	b.n	8016f10 <_vfiprintf_r+0x378>
 801724a:	1b43      	subs	r3, r0, r5
 801724c:	9305      	str	r3, [sp, #20]
 801724e:	2300      	movs	r3, #0
 8017250:	930b      	str	r3, [sp, #44]	; 0x2c
 8017252:	e65d      	b.n	8016f10 <_vfiprintf_r+0x378>
 8017254:	0028      	movs	r0, r5
 8017256:	f7e8 ff5f 	bl	8000118 <strlen>
 801725a:	9005      	str	r0, [sp, #20]
 801725c:	e7f7      	b.n	801724e <_vfiprintf_r+0x6b6>
 801725e:	2310      	movs	r3, #16
 8017260:	431c      	orrs	r4, r3
 8017262:	2320      	movs	r3, #32
 8017264:	0021      	movs	r1, r4
 8017266:	4019      	ands	r1, r3
 8017268:	421c      	tst	r4, r3
 801726a:	d013      	beq.n	8017294 <_vfiprintf_r+0x6fc>
 801726c:	3b19      	subs	r3, #25
 801726e:	3507      	adds	r5, #7
 8017270:	439d      	bics	r5, r3
 8017272:	0029      	movs	r1, r5
 8017274:	c90c      	ldmia	r1!, {r2, r3}
 8017276:	9200      	str	r2, [sp, #0]
 8017278:	9301      	str	r3, [sp, #4]
 801727a:	9104      	str	r1, [sp, #16]
 801727c:	2301      	movs	r3, #1
 801727e:	e7a1      	b.n	80171c4 <_vfiprintf_r+0x62c>
 8017280:	0801b198 	.word	0x0801b198
 8017284:	0801b1a8 	.word	0x0801b1a8
 8017288:	fffffbff 	.word	0xfffffbff
 801728c:	00007830 	.word	0x00007830
 8017290:	0801aec0 	.word	0x0801aec0
 8017294:	1d2b      	adds	r3, r5, #4
 8017296:	0022      	movs	r2, r4
 8017298:	9304      	str	r3, [sp, #16]
 801729a:	2310      	movs	r3, #16
 801729c:	401a      	ands	r2, r3
 801729e:	421c      	tst	r4, r3
 80172a0:	d003      	beq.n	80172aa <_vfiprintf_r+0x712>
 80172a2:	682b      	ldr	r3, [r5, #0]
 80172a4:	9300      	str	r3, [sp, #0]
 80172a6:	9101      	str	r1, [sp, #4]
 80172a8:	e7e8      	b.n	801727c <_vfiprintf_r+0x6e4>
 80172aa:	2340      	movs	r3, #64	; 0x40
 80172ac:	0021      	movs	r1, r4
 80172ae:	4019      	ands	r1, r3
 80172b0:	421c      	tst	r4, r3
 80172b2:	d004      	beq.n	80172be <_vfiprintf_r+0x726>
 80172b4:	682b      	ldr	r3, [r5, #0]
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	9300      	str	r3, [sp, #0]
 80172ba:	9201      	str	r2, [sp, #4]
 80172bc:	e7de      	b.n	801727c <_vfiprintf_r+0x6e4>
 80172be:	2380      	movs	r3, #128	; 0x80
 80172c0:	0022      	movs	r2, r4
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	401a      	ands	r2, r3
 80172c6:	421c      	tst	r4, r3
 80172c8:	d002      	beq.n	80172d0 <_vfiprintf_r+0x738>
 80172ca:	682b      	ldr	r3, [r5, #0]
 80172cc:	b2db      	uxtb	r3, r3
 80172ce:	e7e9      	b.n	80172a4 <_vfiprintf_r+0x70c>
 80172d0:	682b      	ldr	r3, [r5, #0]
 80172d2:	e7f1      	b.n	80172b8 <_vfiprintf_r+0x720>
 80172d4:	4aad      	ldr	r2, [pc, #692]	; (801758c <_vfiprintf_r+0x9f4>)
 80172d6:	e56f      	b.n	8016db8 <_vfiprintf_r+0x220>
 80172d8:	1d2a      	adds	r2, r5, #4
 80172da:	0021      	movs	r1, r4
 80172dc:	9204      	str	r2, [sp, #16]
 80172de:	2210      	movs	r2, #16
 80172e0:	4011      	ands	r1, r2
 80172e2:	4214      	tst	r4, r2
 80172e4:	d003      	beq.n	80172ee <_vfiprintf_r+0x756>
 80172e6:	682a      	ldr	r2, [r5, #0]
 80172e8:	9200      	str	r2, [sp, #0]
 80172ea:	9001      	str	r0, [sp, #4]
 80172ec:	e573      	b.n	8016dd6 <_vfiprintf_r+0x23e>
 80172ee:	2240      	movs	r2, #64	; 0x40
 80172f0:	0020      	movs	r0, r4
 80172f2:	4010      	ands	r0, r2
 80172f4:	4214      	tst	r4, r2
 80172f6:	d004      	beq.n	8017302 <_vfiprintf_r+0x76a>
 80172f8:	682a      	ldr	r2, [r5, #0]
 80172fa:	b292      	uxth	r2, r2
 80172fc:	9200      	str	r2, [sp, #0]
 80172fe:	9101      	str	r1, [sp, #4]
 8017300:	e569      	b.n	8016dd6 <_vfiprintf_r+0x23e>
 8017302:	2280      	movs	r2, #128	; 0x80
 8017304:	0021      	movs	r1, r4
 8017306:	0092      	lsls	r2, r2, #2
 8017308:	4011      	ands	r1, r2
 801730a:	4214      	tst	r4, r2
 801730c:	d002      	beq.n	8017314 <_vfiprintf_r+0x77c>
 801730e:	682a      	ldr	r2, [r5, #0]
 8017310:	b2d2      	uxtb	r2, r2
 8017312:	e7e9      	b.n	80172e8 <_vfiprintf_r+0x750>
 8017314:	682a      	ldr	r2, [r5, #0]
 8017316:	e7f1      	b.n	80172fc <_vfiprintf_r+0x764>
 8017318:	9b01      	ldr	r3, [sp, #4]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d109      	bne.n	8017332 <_vfiprintf_r+0x79a>
 801731e:	9b00      	ldr	r3, [sp, #0]
 8017320:	2b09      	cmp	r3, #9
 8017322:	d806      	bhi.n	8017332 <_vfiprintf_r+0x79a>
 8017324:	25b7      	movs	r5, #183	; 0xb7
 8017326:	ab14      	add	r3, sp, #80	; 0x50
 8017328:	18ed      	adds	r5, r5, r3
 801732a:	9b00      	ldr	r3, [sp, #0]
 801732c:	3330      	adds	r3, #48	; 0x30
 801732e:	702b      	strb	r3, [r5, #0]
 8017330:	e125      	b.n	801757e <_vfiprintf_r+0x9e6>
 8017332:	2380      	movs	r3, #128	; 0x80
 8017334:	0032      	movs	r2, r6
 8017336:	2400      	movs	r4, #0
 8017338:	00db      	lsls	r3, r3, #3
 801733a:	401a      	ands	r2, r3
 801733c:	ad42      	add	r5, sp, #264	; 0x108
 801733e:	920a      	str	r2, [sp, #40]	; 0x28
 8017340:	220a      	movs	r2, #10
 8017342:	9800      	ldr	r0, [sp, #0]
 8017344:	9901      	ldr	r1, [sp, #4]
 8017346:	2300      	movs	r3, #0
 8017348:	f7e9 f8f0 	bl	800052c <__aeabi_uldivmod>
 801734c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801734e:	3d01      	subs	r5, #1
 8017350:	3230      	adds	r2, #48	; 0x30
 8017352:	702a      	strb	r2, [r5, #0]
 8017354:	3401      	adds	r4, #1
 8017356:	2b00      	cmp	r3, #0
 8017358:	d01a      	beq.n	8017390 <_vfiprintf_r+0x7f8>
 801735a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	42a3      	cmp	r3, r4
 8017360:	d116      	bne.n	8017390 <_vfiprintf_r+0x7f8>
 8017362:	2cff      	cmp	r4, #255	; 0xff
 8017364:	d014      	beq.n	8017390 <_vfiprintf_r+0x7f8>
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <_vfiprintf_r+0x7da>
 801736c:	9b00      	ldr	r3, [sp, #0]
 801736e:	2b09      	cmp	r3, #9
 8017370:	d90e      	bls.n	8017390 <_vfiprintf_r+0x7f8>
 8017372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017374:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017376:	1aed      	subs	r5, r5, r3
 8017378:	001a      	movs	r2, r3
 801737a:	0028      	movs	r0, r5
 801737c:	f7fb f8e2 	bl	8012544 <strncpy>
 8017380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017382:	2400      	movs	r4, #0
 8017384:	785b      	ldrb	r3, [r3, #1]
 8017386:	1e5a      	subs	r2, r3, #1
 8017388:	4193      	sbcs	r3, r2
 801738a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801738c:	18d3      	adds	r3, r2, r3
 801738e:	930d      	str	r3, [sp, #52]	; 0x34
 8017390:	2300      	movs	r3, #0
 8017392:	9800      	ldr	r0, [sp, #0]
 8017394:	9901      	ldr	r1, [sp, #4]
 8017396:	220a      	movs	r2, #10
 8017398:	f7e9 f8c8 	bl	800052c <__aeabi_uldivmod>
 801739c:	9b01      	ldr	r3, [sp, #4]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d103      	bne.n	80173aa <_vfiprintf_r+0x812>
 80173a2:	9b00      	ldr	r3, [sp, #0]
 80173a4:	2b09      	cmp	r3, #9
 80173a6:	d800      	bhi.n	80173aa <_vfiprintf_r+0x812>
 80173a8:	e0e9      	b.n	801757e <_vfiprintf_r+0x9e6>
 80173aa:	9000      	str	r0, [sp, #0]
 80173ac:	9101      	str	r1, [sp, #4]
 80173ae:	e7c7      	b.n	8017340 <_vfiprintf_r+0x7a8>
 80173b0:	200f      	movs	r0, #15
 80173b2:	9b00      	ldr	r3, [sp, #0]
 80173b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173b6:	4003      	ands	r3, r0
 80173b8:	5cd3      	ldrb	r3, [r2, r3]
 80173ba:	3d01      	subs	r5, #1
 80173bc:	702b      	strb	r3, [r5, #0]
 80173be:	9b01      	ldr	r3, [sp, #4]
 80173c0:	0719      	lsls	r1, r3, #28
 80173c2:	9b00      	ldr	r3, [sp, #0]
 80173c4:	091a      	lsrs	r2, r3, #4
 80173c6:	9b01      	ldr	r3, [sp, #4]
 80173c8:	4311      	orrs	r1, r2
 80173ca:	091b      	lsrs	r3, r3, #4
 80173cc:	9301      	str	r3, [sp, #4]
 80173ce:	000b      	movs	r3, r1
 80173d0:	9a01      	ldr	r2, [sp, #4]
 80173d2:	9100      	str	r1, [sp, #0]
 80173d4:	4313      	orrs	r3, r2
 80173d6:	d1ec      	bne.n	80173b2 <_vfiprintf_r+0x81a>
 80173d8:	e0d1      	b.n	801757e <_vfiprintf_r+0x9e6>
 80173da:	ad42      	add	r5, sp, #264	; 0x108
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d000      	beq.n	80173e2 <_vfiprintf_r+0x84a>
 80173e0:	e0cd      	b.n	801757e <_vfiprintf_r+0x9e6>
 80173e2:	07e3      	lsls	r3, r4, #31
 80173e4:	d400      	bmi.n	80173e8 <_vfiprintf_r+0x850>
 80173e6:	e0ca      	b.n	801757e <_vfiprintf_r+0x9e6>
 80173e8:	25b7      	movs	r5, #183	; 0xb7
 80173ea:	ab14      	add	r3, sp, #80	; 0x50
 80173ec:	18ed      	adds	r5, r5, r3
 80173ee:	2330      	movs	r3, #48	; 0x30
 80173f0:	e79d      	b.n	801732e <_vfiprintf_r+0x796>
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d100      	bne.n	80173f8 <_vfiprintf_r+0x860>
 80173f6:	e089      	b.n	801750c <_vfiprintf_r+0x974>
 80173f8:	2100      	movs	r1, #0
 80173fa:	aa29      	add	r2, sp, #164	; 0xa4
 80173fc:	7013      	strb	r3, [r2, #0]
 80173fe:	ab14      	add	r3, sp, #80	; 0x50
 8017400:	70d9      	strb	r1, [r3, #3]
 8017402:	2301      	movs	r3, #1
 8017404:	9504      	str	r5, [sp, #16]
 8017406:	9305      	str	r3, [sp, #20]
 8017408:	0015      	movs	r5, r2
 801740a:	910b      	str	r1, [sp, #44]	; 0x2c
 801740c:	e580      	b.n	8016f10 <_vfiprintf_r+0x378>
 801740e:	2010      	movs	r0, #16
 8017410:	1812      	adds	r2, r2, r0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	9218      	str	r2, [sp, #96]	; 0x60
 8017416:	9317      	str	r3, [sp, #92]	; 0x5c
 8017418:	2b07      	cmp	r3, #7
 801741a:	dd07      	ble.n	801742c <_vfiprintf_r+0x894>
 801741c:	9903      	ldr	r1, [sp, #12]
 801741e:	9806      	ldr	r0, [sp, #24]
 8017420:	aa16      	add	r2, sp, #88	; 0x58
 8017422:	f7ff fb85 	bl	8016b30 <__sprint_r>
 8017426:	2800      	cmp	r0, #0
 8017428:	d14b      	bne.n	80174c2 <_vfiprintf_r+0x92a>
 801742a:	a919      	add	r1, sp, #100	; 0x64
 801742c:	0033      	movs	r3, r6
 801742e:	3b10      	subs	r3, #16
 8017430:	001e      	movs	r6, r3
 8017432:	000f      	movs	r7, r1
 8017434:	e58e      	b.n	8016f54 <_vfiprintf_r+0x3bc>
 8017436:	2010      	movs	r0, #16
 8017438:	1812      	adds	r2, r2, r0
 801743a:	6078      	str	r0, [r7, #4]
 801743c:	9218      	str	r2, [sp, #96]	; 0x60
 801743e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017440:	2b07      	cmp	r3, #7
 8017442:	dd07      	ble.n	8017454 <_vfiprintf_r+0x8bc>
 8017444:	9903      	ldr	r1, [sp, #12]
 8017446:	9806      	ldr	r0, [sp, #24]
 8017448:	aa16      	add	r2, sp, #88	; 0x58
 801744a:	f7ff fb71 	bl	8016b30 <__sprint_r>
 801744e:	2800      	cmp	r0, #0
 8017450:	d137      	bne.n	80174c2 <_vfiprintf_r+0x92a>
 8017452:	a919      	add	r1, sp, #100	; 0x64
 8017454:	0033      	movs	r3, r6
 8017456:	3b10      	subs	r3, #16
 8017458:	001e      	movs	r6, r3
 801745a:	000f      	movs	r7, r1
 801745c:	e5d6      	b.n	801700c <_vfiprintf_r+0x474>
 801745e:	2010      	movs	r0, #16
 8017460:	1812      	adds	r2, r2, r0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	9218      	str	r2, [sp, #96]	; 0x60
 8017466:	9317      	str	r3, [sp, #92]	; 0x5c
 8017468:	2b07      	cmp	r3, #7
 801746a:	dd07      	ble.n	801747c <_vfiprintf_r+0x8e4>
 801746c:	9903      	ldr	r1, [sp, #12]
 801746e:	9806      	ldr	r0, [sp, #24]
 8017470:	aa16      	add	r2, sp, #88	; 0x58
 8017472:	f7ff fb5d 	bl	8016b30 <__sprint_r>
 8017476:	2800      	cmp	r0, #0
 8017478:	d123      	bne.n	80174c2 <_vfiprintf_r+0x92a>
 801747a:	a919      	add	r1, sp, #100	; 0x64
 801747c:	0033      	movs	r3, r6
 801747e:	3b10      	subs	r3, #16
 8017480:	001e      	movs	r6, r3
 8017482:	000f      	movs	r7, r1
 8017484:	e5e2      	b.n	801704c <_vfiprintf_r+0x4b4>
 8017486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801748a:	2510      	movs	r5, #16
 801748c:	1a9c      	subs	r4, r3, r2
 801748e:	2c00      	cmp	r4, #0
 8017490:	dc00      	bgt.n	8017494 <_vfiprintf_r+0x8fc>
 8017492:	e613      	b.n	80170bc <_vfiprintf_r+0x524>
 8017494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017496:	483e      	ldr	r0, [pc, #248]	; (8017590 <_vfiprintf_r+0x9f8>)
 8017498:	9918      	ldr	r1, [sp, #96]	; 0x60
 801749a:	9305      	str	r3, [sp, #20]
 801749c:	1c5a      	adds	r2, r3, #1
 801749e:	6038      	str	r0, [r7, #0]
 80174a0:	2c10      	cmp	r4, #16
 80174a2:	dc22      	bgt.n	80174ea <_vfiprintf_r+0x952>
 80174a4:	607c      	str	r4, [r7, #4]
 80174a6:	190c      	adds	r4, r1, r4
 80174a8:	9418      	str	r4, [sp, #96]	; 0x60
 80174aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80174ac:	2a07      	cmp	r2, #7
 80174ae:	dc00      	bgt.n	80174b2 <_vfiprintf_r+0x91a>
 80174b0:	e604      	b.n	80170bc <_vfiprintf_r+0x524>
 80174b2:	9903      	ldr	r1, [sp, #12]
 80174b4:	9806      	ldr	r0, [sp, #24]
 80174b6:	aa16      	add	r2, sp, #88	; 0x58
 80174b8:	f7ff fb3a 	bl	8016b30 <__sprint_r>
 80174bc:	2800      	cmp	r0, #0
 80174be:	d100      	bne.n	80174c2 <_vfiprintf_r+0x92a>
 80174c0:	e5fc      	b.n	80170bc <_vfiprintf_r+0x524>
 80174c2:	9b03      	ldr	r3, [sp, #12]
 80174c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80174c6:	07db      	lsls	r3, r3, #31
 80174c8:	d407      	bmi.n	80174da <_vfiprintf_r+0x942>
 80174ca:	9b03      	ldr	r3, [sp, #12]
 80174cc:	899b      	ldrh	r3, [r3, #12]
 80174ce:	059b      	lsls	r3, r3, #22
 80174d0:	d403      	bmi.n	80174da <_vfiprintf_r+0x942>
 80174d2:	9b03      	ldr	r3, [sp, #12]
 80174d4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80174d6:	f7fe fd1e 	bl	8015f16 <__retarget_lock_release_recursive>
 80174da:	9b03      	ldr	r3, [sp, #12]
 80174dc:	899b      	ldrh	r3, [r3, #12]
 80174de:	065b      	lsls	r3, r3, #25
 80174e0:	d401      	bmi.n	80174e6 <_vfiprintf_r+0x94e>
 80174e2:	f7ff fb98 	bl	8016c16 <_vfiprintf_r+0x7e>
 80174e6:	f7ff fb93 	bl	8016c10 <_vfiprintf_r+0x78>
 80174ea:	3110      	adds	r1, #16
 80174ec:	607d      	str	r5, [r7, #4]
 80174ee:	9118      	str	r1, [sp, #96]	; 0x60
 80174f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80174f2:	3708      	adds	r7, #8
 80174f4:	2a07      	cmp	r2, #7
 80174f6:	dd07      	ble.n	8017508 <_vfiprintf_r+0x970>
 80174f8:	9903      	ldr	r1, [sp, #12]
 80174fa:	9806      	ldr	r0, [sp, #24]
 80174fc:	aa16      	add	r2, sp, #88	; 0x58
 80174fe:	f7ff fb17 	bl	8016b30 <__sprint_r>
 8017502:	2800      	cmp	r0, #0
 8017504:	d1dd      	bne.n	80174c2 <_vfiprintf_r+0x92a>
 8017506:	af19      	add	r7, sp, #100	; 0x64
 8017508:	3c10      	subs	r4, #16
 801750a:	e7c3      	b.n	8017494 <_vfiprintf_r+0x8fc>
 801750c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801750e:	9300      	str	r3, [sp, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d102      	bne.n	801751a <_vfiprintf_r+0x982>
 8017514:	2300      	movs	r3, #0
 8017516:	9317      	str	r3, [sp, #92]	; 0x5c
 8017518:	e7d3      	b.n	80174c2 <_vfiprintf_r+0x92a>
 801751a:	9903      	ldr	r1, [sp, #12]
 801751c:	9806      	ldr	r0, [sp, #24]
 801751e:	aa16      	add	r2, sp, #88	; 0x58
 8017520:	f7ff fb06 	bl	8016b30 <__sprint_r>
 8017524:	2800      	cmp	r0, #0
 8017526:	d0f5      	beq.n	8017514 <_vfiprintf_r+0x97c>
 8017528:	e7cb      	b.n	80174c2 <_vfiprintf_r+0x92a>
 801752a:	0026      	movs	r6, r4
 801752c:	2a00      	cmp	r2, #0
 801752e:	d100      	bne.n	8017532 <_vfiprintf_r+0x99a>
 8017530:	e609      	b.n	8017146 <_vfiprintf_r+0x5ae>
 8017532:	2b01      	cmp	r3, #1
 8017534:	d100      	bne.n	8017538 <_vfiprintf_r+0x9a0>
 8017536:	e6ef      	b.n	8017318 <_vfiprintf_r+0x780>
 8017538:	ad42      	add	r5, sp, #264	; 0x108
 801753a:	2b02      	cmp	r3, #2
 801753c:	d100      	bne.n	8017540 <_vfiprintf_r+0x9a8>
 801753e:	e737      	b.n	80173b0 <_vfiprintf_r+0x818>
 8017540:	2307      	movs	r3, #7
 8017542:	469c      	mov	ip, r3
 8017544:	4663      	mov	r3, ip
 8017546:	9900      	ldr	r1, [sp, #0]
 8017548:	002a      	movs	r2, r5
 801754a:	400b      	ands	r3, r1
 801754c:	9901      	ldr	r1, [sp, #4]
 801754e:	3d01      	subs	r5, #1
 8017550:	074c      	lsls	r4, r1, #29
 8017552:	9900      	ldr	r1, [sp, #0]
 8017554:	3330      	adds	r3, #48	; 0x30
 8017556:	08c8      	lsrs	r0, r1, #3
 8017558:	9901      	ldr	r1, [sp, #4]
 801755a:	4304      	orrs	r4, r0
 801755c:	08c9      	lsrs	r1, r1, #3
 801755e:	9101      	str	r1, [sp, #4]
 8017560:	0021      	movs	r1, r4
 8017562:	9801      	ldr	r0, [sp, #4]
 8017564:	702b      	strb	r3, [r5, #0]
 8017566:	9400      	str	r4, [sp, #0]
 8017568:	4301      	orrs	r1, r0
 801756a:	d1eb      	bne.n	8017544 <_vfiprintf_r+0x9ac>
 801756c:	0031      	movs	r1, r6
 801756e:	07c9      	lsls	r1, r1, #31
 8017570:	d505      	bpl.n	801757e <_vfiprintf_r+0x9e6>
 8017572:	2b30      	cmp	r3, #48	; 0x30
 8017574:	d003      	beq.n	801757e <_vfiprintf_r+0x9e6>
 8017576:	2330      	movs	r3, #48	; 0x30
 8017578:	3d01      	subs	r5, #1
 801757a:	702b      	strb	r3, [r5, #0]
 801757c:	1e95      	subs	r5, r2, #2
 801757e:	9b05      	ldr	r3, [sp, #20]
 8017580:	0034      	movs	r4, r6
 8017582:	930b      	str	r3, [sp, #44]	; 0x2c
 8017584:	ab42      	add	r3, sp, #264	; 0x108
 8017586:	1b5b      	subs	r3, r3, r5
 8017588:	9305      	str	r3, [sp, #20]
 801758a:	e4c1      	b.n	8016f10 <_vfiprintf_r+0x378>
 801758c:	0801aed1 	.word	0x0801aed1
 8017590:	0801b198 	.word	0x0801b198

08017594 <__sbprintf>:
 8017594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017596:	0015      	movs	r5, r2
 8017598:	2202      	movs	r2, #2
 801759a:	4c1e      	ldr	r4, [pc, #120]	; (8017614 <__sbprintf+0x80>)
 801759c:	001f      	movs	r7, r3
 801759e:	898b      	ldrh	r3, [r1, #12]
 80175a0:	44a5      	add	sp, r4
 80175a2:	4393      	bics	r3, r2
 80175a4:	466a      	mov	r2, sp
 80175a6:	8193      	strh	r3, [r2, #12]
 80175a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80175aa:	0006      	movs	r6, r0
 80175ac:	9319      	str	r3, [sp, #100]	; 0x64
 80175ae:	89cb      	ldrh	r3, [r1, #14]
 80175b0:	a816      	add	r0, sp, #88	; 0x58
 80175b2:	81d3      	strh	r3, [r2, #14]
 80175b4:	69cb      	ldr	r3, [r1, #28]
 80175b6:	000c      	movs	r4, r1
 80175b8:	9307      	str	r3, [sp, #28]
 80175ba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80175bc:	9309      	str	r3, [sp, #36]	; 0x24
 80175be:	ab1a      	add	r3, sp, #104	; 0x68
 80175c0:	9300      	str	r3, [sp, #0]
 80175c2:	9304      	str	r3, [sp, #16]
 80175c4:	2380      	movs	r3, #128	; 0x80
 80175c6:	00db      	lsls	r3, r3, #3
 80175c8:	9302      	str	r3, [sp, #8]
 80175ca:	9305      	str	r3, [sp, #20]
 80175cc:	2300      	movs	r3, #0
 80175ce:	9306      	str	r3, [sp, #24]
 80175d0:	f7fe fc9e 	bl	8015f10 <__retarget_lock_init_recursive>
 80175d4:	002a      	movs	r2, r5
 80175d6:	003b      	movs	r3, r7
 80175d8:	4669      	mov	r1, sp
 80175da:	0030      	movs	r0, r6
 80175dc:	f7ff fadc 	bl	8016b98 <_vfiprintf_r>
 80175e0:	1e05      	subs	r5, r0, #0
 80175e2:	db07      	blt.n	80175f4 <__sbprintf+0x60>
 80175e4:	4669      	mov	r1, sp
 80175e6:	0030      	movs	r0, r6
 80175e8:	f000 f91c 	bl	8017824 <_fflush_r>
 80175ec:	2800      	cmp	r0, #0
 80175ee:	d001      	beq.n	80175f4 <__sbprintf+0x60>
 80175f0:	2501      	movs	r5, #1
 80175f2:	426d      	negs	r5, r5
 80175f4:	466b      	mov	r3, sp
 80175f6:	899a      	ldrh	r2, [r3, #12]
 80175f8:	2340      	movs	r3, #64	; 0x40
 80175fa:	421a      	tst	r2, r3
 80175fc:	d002      	beq.n	8017604 <__sbprintf+0x70>
 80175fe:	89a2      	ldrh	r2, [r4, #12]
 8017600:	4313      	orrs	r3, r2
 8017602:	81a3      	strh	r3, [r4, #12]
 8017604:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017606:	f7fe fc84 	bl	8015f12 <__retarget_lock_close_recursive>
 801760a:	0028      	movs	r0, r5
 801760c:	4b02      	ldr	r3, [pc, #8]	; (8017618 <__sbprintf+0x84>)
 801760e:	449d      	add	sp, r3
 8017610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017612:	46c0      	nop			; (mov r8, r8)
 8017614:	fffffb94 	.word	0xfffffb94
 8017618:	0000046c 	.word	0x0000046c

0801761c <__swsetup_r>:
 801761c:	4b30      	ldr	r3, [pc, #192]	; (80176e0 <__swsetup_r+0xc4>)
 801761e:	b570      	push	{r4, r5, r6, lr}
 8017620:	0005      	movs	r5, r0
 8017622:	6818      	ldr	r0, [r3, #0]
 8017624:	000c      	movs	r4, r1
 8017626:	2800      	cmp	r0, #0
 8017628:	d004      	beq.n	8017634 <__swsetup_r+0x18>
 801762a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801762c:	2b00      	cmp	r3, #0
 801762e:	d101      	bne.n	8017634 <__swsetup_r+0x18>
 8017630:	f000 f96e 	bl	8017910 <__sinit>
 8017634:	230c      	movs	r3, #12
 8017636:	5ee2      	ldrsh	r2, [r4, r3]
 8017638:	b293      	uxth	r3, r2
 801763a:	0711      	lsls	r1, r2, #28
 801763c:	d423      	bmi.n	8017686 <__swsetup_r+0x6a>
 801763e:	06d9      	lsls	r1, r3, #27
 8017640:	d407      	bmi.n	8017652 <__swsetup_r+0x36>
 8017642:	2309      	movs	r3, #9
 8017644:	2001      	movs	r0, #1
 8017646:	602b      	str	r3, [r5, #0]
 8017648:	3337      	adds	r3, #55	; 0x37
 801764a:	4313      	orrs	r3, r2
 801764c:	81a3      	strh	r3, [r4, #12]
 801764e:	4240      	negs	r0, r0
 8017650:	bd70      	pop	{r4, r5, r6, pc}
 8017652:	075b      	lsls	r3, r3, #29
 8017654:	d513      	bpl.n	801767e <__swsetup_r+0x62>
 8017656:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017658:	2900      	cmp	r1, #0
 801765a:	d008      	beq.n	801766e <__swsetup_r+0x52>
 801765c:	0023      	movs	r3, r4
 801765e:	3340      	adds	r3, #64	; 0x40
 8017660:	4299      	cmp	r1, r3
 8017662:	d002      	beq.n	801766a <__swsetup_r+0x4e>
 8017664:	0028      	movs	r0, r5
 8017666:	f7fe f823 	bl	80156b0 <_free_r>
 801766a:	2300      	movs	r3, #0
 801766c:	6323      	str	r3, [r4, #48]	; 0x30
 801766e:	2224      	movs	r2, #36	; 0x24
 8017670:	89a3      	ldrh	r3, [r4, #12]
 8017672:	4393      	bics	r3, r2
 8017674:	81a3      	strh	r3, [r4, #12]
 8017676:	2300      	movs	r3, #0
 8017678:	6063      	str	r3, [r4, #4]
 801767a:	6923      	ldr	r3, [r4, #16]
 801767c:	6023      	str	r3, [r4, #0]
 801767e:	2308      	movs	r3, #8
 8017680:	89a2      	ldrh	r2, [r4, #12]
 8017682:	4313      	orrs	r3, r2
 8017684:	81a3      	strh	r3, [r4, #12]
 8017686:	6923      	ldr	r3, [r4, #16]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d10b      	bne.n	80176a4 <__swsetup_r+0x88>
 801768c:	21a0      	movs	r1, #160	; 0xa0
 801768e:	2280      	movs	r2, #128	; 0x80
 8017690:	89a3      	ldrh	r3, [r4, #12]
 8017692:	0089      	lsls	r1, r1, #2
 8017694:	0092      	lsls	r2, r2, #2
 8017696:	400b      	ands	r3, r1
 8017698:	4293      	cmp	r3, r2
 801769a:	d003      	beq.n	80176a4 <__swsetup_r+0x88>
 801769c:	0021      	movs	r1, r4
 801769e:	0028      	movs	r0, r5
 80176a0:	f000 fb80 	bl	8017da4 <__smakebuf_r>
 80176a4:	220c      	movs	r2, #12
 80176a6:	5ea3      	ldrsh	r3, [r4, r2]
 80176a8:	2001      	movs	r0, #1
 80176aa:	001a      	movs	r2, r3
 80176ac:	b299      	uxth	r1, r3
 80176ae:	4002      	ands	r2, r0
 80176b0:	4203      	tst	r3, r0
 80176b2:	d00f      	beq.n	80176d4 <__swsetup_r+0xb8>
 80176b4:	2200      	movs	r2, #0
 80176b6:	60a2      	str	r2, [r4, #8]
 80176b8:	6962      	ldr	r2, [r4, #20]
 80176ba:	4252      	negs	r2, r2
 80176bc:	61a2      	str	r2, [r4, #24]
 80176be:	2000      	movs	r0, #0
 80176c0:	6922      	ldr	r2, [r4, #16]
 80176c2:	4282      	cmp	r2, r0
 80176c4:	d1c4      	bne.n	8017650 <__swsetup_r+0x34>
 80176c6:	060a      	lsls	r2, r1, #24
 80176c8:	d5c2      	bpl.n	8017650 <__swsetup_r+0x34>
 80176ca:	2240      	movs	r2, #64	; 0x40
 80176cc:	4313      	orrs	r3, r2
 80176ce:	81a3      	strh	r3, [r4, #12]
 80176d0:	3801      	subs	r0, #1
 80176d2:	e7bd      	b.n	8017650 <__swsetup_r+0x34>
 80176d4:	0788      	lsls	r0, r1, #30
 80176d6:	d400      	bmi.n	80176da <__swsetup_r+0xbe>
 80176d8:	6962      	ldr	r2, [r4, #20]
 80176da:	60a2      	str	r2, [r4, #8]
 80176dc:	e7ef      	b.n	80176be <__swsetup_r+0xa2>
 80176de:	46c0      	nop			; (mov r8, r8)
 80176e0:	200000a8 	.word	0x200000a8

080176e4 <abort>:
 80176e4:	2006      	movs	r0, #6
 80176e6:	b510      	push	{r4, lr}
 80176e8:	f000 fbcc 	bl	8017e84 <raise>
 80176ec:	2001      	movs	r0, #1
 80176ee:	f000 fdc1 	bl	8018274 <_exit>
	...

080176f4 <__sflush_r>:
 80176f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176f6:	230c      	movs	r3, #12
 80176f8:	5eca      	ldrsh	r2, [r1, r3]
 80176fa:	000c      	movs	r4, r1
 80176fc:	0005      	movs	r5, r0
 80176fe:	b291      	uxth	r1, r2
 8017700:	0713      	lsls	r3, r2, #28
 8017702:	d467      	bmi.n	80177d4 <__sflush_r+0xe0>
 8017704:	2380      	movs	r3, #128	; 0x80
 8017706:	011b      	lsls	r3, r3, #4
 8017708:	4313      	orrs	r3, r2
 801770a:	6862      	ldr	r2, [r4, #4]
 801770c:	81a3      	strh	r3, [r4, #12]
 801770e:	2a00      	cmp	r2, #0
 8017710:	dc04      	bgt.n	801771c <__sflush_r+0x28>
 8017712:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017714:	2a00      	cmp	r2, #0
 8017716:	dc01      	bgt.n	801771c <__sflush_r+0x28>
 8017718:	2000      	movs	r0, #0
 801771a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801771c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801771e:	2f00      	cmp	r7, #0
 8017720:	d0fa      	beq.n	8017718 <__sflush_r+0x24>
 8017722:	2200      	movs	r2, #0
 8017724:	2180      	movs	r1, #128	; 0x80
 8017726:	682e      	ldr	r6, [r5, #0]
 8017728:	602a      	str	r2, [r5, #0]
 801772a:	001a      	movs	r2, r3
 801772c:	0149      	lsls	r1, r1, #5
 801772e:	400a      	ands	r2, r1
 8017730:	420b      	tst	r3, r1
 8017732:	d038      	beq.n	80177a6 <__sflush_r+0xb2>
 8017734:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017736:	89a3      	ldrh	r3, [r4, #12]
 8017738:	075b      	lsls	r3, r3, #29
 801773a:	d506      	bpl.n	801774a <__sflush_r+0x56>
 801773c:	6863      	ldr	r3, [r4, #4]
 801773e:	1ac0      	subs	r0, r0, r3
 8017740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017742:	2b00      	cmp	r3, #0
 8017744:	d001      	beq.n	801774a <__sflush_r+0x56>
 8017746:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017748:	1ac0      	subs	r0, r0, r3
 801774a:	0002      	movs	r2, r0
 801774c:	69e1      	ldr	r1, [r4, #28]
 801774e:	2300      	movs	r3, #0
 8017750:	0028      	movs	r0, r5
 8017752:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8017754:	47b8      	blx	r7
 8017756:	89a1      	ldrh	r1, [r4, #12]
 8017758:	1c43      	adds	r3, r0, #1
 801775a:	d106      	bne.n	801776a <__sflush_r+0x76>
 801775c:	682b      	ldr	r3, [r5, #0]
 801775e:	2b1d      	cmp	r3, #29
 8017760:	d835      	bhi.n	80177ce <__sflush_r+0xda>
 8017762:	4a2e      	ldr	r2, [pc, #184]	; (801781c <__sflush_r+0x128>)
 8017764:	40da      	lsrs	r2, r3
 8017766:	07d3      	lsls	r3, r2, #31
 8017768:	d531      	bpl.n	80177ce <__sflush_r+0xda>
 801776a:	2200      	movs	r2, #0
 801776c:	4b2c      	ldr	r3, [pc, #176]	; (8017820 <__sflush_r+0x12c>)
 801776e:	6062      	str	r2, [r4, #4]
 8017770:	400b      	ands	r3, r1
 8017772:	6922      	ldr	r2, [r4, #16]
 8017774:	b21b      	sxth	r3, r3
 8017776:	81a3      	strh	r3, [r4, #12]
 8017778:	6022      	str	r2, [r4, #0]
 801777a:	04db      	lsls	r3, r3, #19
 801777c:	d505      	bpl.n	801778a <__sflush_r+0x96>
 801777e:	1c43      	adds	r3, r0, #1
 8017780:	d102      	bne.n	8017788 <__sflush_r+0x94>
 8017782:	682b      	ldr	r3, [r5, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d100      	bne.n	801778a <__sflush_r+0x96>
 8017788:	6520      	str	r0, [r4, #80]	; 0x50
 801778a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801778c:	602e      	str	r6, [r5, #0]
 801778e:	2900      	cmp	r1, #0
 8017790:	d0c2      	beq.n	8017718 <__sflush_r+0x24>
 8017792:	0023      	movs	r3, r4
 8017794:	3340      	adds	r3, #64	; 0x40
 8017796:	4299      	cmp	r1, r3
 8017798:	d002      	beq.n	80177a0 <__sflush_r+0xac>
 801779a:	0028      	movs	r0, r5
 801779c:	f7fd ff88 	bl	80156b0 <_free_r>
 80177a0:	2000      	movs	r0, #0
 80177a2:	6320      	str	r0, [r4, #48]	; 0x30
 80177a4:	e7b9      	b.n	801771a <__sflush_r+0x26>
 80177a6:	2301      	movs	r3, #1
 80177a8:	0028      	movs	r0, r5
 80177aa:	69e1      	ldr	r1, [r4, #28]
 80177ac:	47b8      	blx	r7
 80177ae:	1c43      	adds	r3, r0, #1
 80177b0:	d1c1      	bne.n	8017736 <__sflush_r+0x42>
 80177b2:	682b      	ldr	r3, [r5, #0]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d0be      	beq.n	8017736 <__sflush_r+0x42>
 80177b8:	2b1d      	cmp	r3, #29
 80177ba:	d001      	beq.n	80177c0 <__sflush_r+0xcc>
 80177bc:	2b16      	cmp	r3, #22
 80177be:	d101      	bne.n	80177c4 <__sflush_r+0xd0>
 80177c0:	602e      	str	r6, [r5, #0]
 80177c2:	e7a9      	b.n	8017718 <__sflush_r+0x24>
 80177c4:	2340      	movs	r3, #64	; 0x40
 80177c6:	89a2      	ldrh	r2, [r4, #12]
 80177c8:	4313      	orrs	r3, r2
 80177ca:	81a3      	strh	r3, [r4, #12]
 80177cc:	e7a5      	b.n	801771a <__sflush_r+0x26>
 80177ce:	2340      	movs	r3, #64	; 0x40
 80177d0:	430b      	orrs	r3, r1
 80177d2:	e7fa      	b.n	80177ca <__sflush_r+0xd6>
 80177d4:	6927      	ldr	r7, [r4, #16]
 80177d6:	2f00      	cmp	r7, #0
 80177d8:	d09e      	beq.n	8017718 <__sflush_r+0x24>
 80177da:	6823      	ldr	r3, [r4, #0]
 80177dc:	6027      	str	r7, [r4, #0]
 80177de:	1bdb      	subs	r3, r3, r7
 80177e0:	9301      	str	r3, [sp, #4]
 80177e2:	2300      	movs	r3, #0
 80177e4:	078a      	lsls	r2, r1, #30
 80177e6:	d100      	bne.n	80177ea <__sflush_r+0xf6>
 80177e8:	6963      	ldr	r3, [r4, #20]
 80177ea:	60a3      	str	r3, [r4, #8]
 80177ec:	9b01      	ldr	r3, [sp, #4]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	dc00      	bgt.n	80177f4 <__sflush_r+0x100>
 80177f2:	e791      	b.n	8017718 <__sflush_r+0x24>
 80177f4:	003a      	movs	r2, r7
 80177f6:	0028      	movs	r0, r5
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	69e1      	ldr	r1, [r4, #28]
 80177fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80177fe:	47b0      	blx	r6
 8017800:	2800      	cmp	r0, #0
 8017802:	dc06      	bgt.n	8017812 <__sflush_r+0x11e>
 8017804:	2340      	movs	r3, #64	; 0x40
 8017806:	2001      	movs	r0, #1
 8017808:	89a2      	ldrh	r2, [r4, #12]
 801780a:	4240      	negs	r0, r0
 801780c:	4313      	orrs	r3, r2
 801780e:	81a3      	strh	r3, [r4, #12]
 8017810:	e783      	b.n	801771a <__sflush_r+0x26>
 8017812:	9b01      	ldr	r3, [sp, #4]
 8017814:	183f      	adds	r7, r7, r0
 8017816:	1a1b      	subs	r3, r3, r0
 8017818:	9301      	str	r3, [sp, #4]
 801781a:	e7e7      	b.n	80177ec <__sflush_r+0xf8>
 801781c:	20400001 	.word	0x20400001
 8017820:	fffff7ff 	.word	0xfffff7ff

08017824 <_fflush_r>:
 8017824:	b570      	push	{r4, r5, r6, lr}
 8017826:	0005      	movs	r5, r0
 8017828:	000c      	movs	r4, r1
 801782a:	2800      	cmp	r0, #0
 801782c:	d004      	beq.n	8017838 <_fflush_r+0x14>
 801782e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017830:	2b00      	cmp	r3, #0
 8017832:	d101      	bne.n	8017838 <_fflush_r+0x14>
 8017834:	f000 f86c 	bl	8017910 <__sinit>
 8017838:	220c      	movs	r2, #12
 801783a:	5ea3      	ldrsh	r3, [r4, r2]
 801783c:	1e1e      	subs	r6, r3, #0
 801783e:	d015      	beq.n	801786c <_fflush_r+0x48>
 8017840:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017842:	07d2      	lsls	r2, r2, #31
 8017844:	d404      	bmi.n	8017850 <_fflush_r+0x2c>
 8017846:	059b      	lsls	r3, r3, #22
 8017848:	d402      	bmi.n	8017850 <_fflush_r+0x2c>
 801784a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801784c:	f7fe fb62 	bl	8015f14 <__retarget_lock_acquire_recursive>
 8017850:	0021      	movs	r1, r4
 8017852:	0028      	movs	r0, r5
 8017854:	f7ff ff4e 	bl	80176f4 <__sflush_r>
 8017858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801785a:	0006      	movs	r6, r0
 801785c:	07db      	lsls	r3, r3, #31
 801785e:	d405      	bmi.n	801786c <_fflush_r+0x48>
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	059b      	lsls	r3, r3, #22
 8017864:	d402      	bmi.n	801786c <_fflush_r+0x48>
 8017866:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017868:	f7fe fb55 	bl	8015f16 <__retarget_lock_release_recursive>
 801786c:	0030      	movs	r0, r6
 801786e:	bd70      	pop	{r4, r5, r6, pc}

08017870 <std>:
 8017870:	2300      	movs	r3, #0
 8017872:	b510      	push	{r4, lr}
 8017874:	0004      	movs	r4, r0
 8017876:	6003      	str	r3, [r0, #0]
 8017878:	6043      	str	r3, [r0, #4]
 801787a:	6083      	str	r3, [r0, #8]
 801787c:	8181      	strh	r1, [r0, #12]
 801787e:	6643      	str	r3, [r0, #100]	; 0x64
 8017880:	0019      	movs	r1, r3
 8017882:	81c2      	strh	r2, [r0, #14]
 8017884:	6103      	str	r3, [r0, #16]
 8017886:	2208      	movs	r2, #8
 8017888:	6143      	str	r3, [r0, #20]
 801788a:	6183      	str	r3, [r0, #24]
 801788c:	305c      	adds	r0, #92	; 0x5c
 801788e:	f7fa fc10 	bl	80120b2 <memset>
 8017892:	0020      	movs	r0, r4
 8017894:	4b06      	ldr	r3, [pc, #24]	; (80178b0 <std+0x40>)
 8017896:	61e4      	str	r4, [r4, #28]
 8017898:	6223      	str	r3, [r4, #32]
 801789a:	4b06      	ldr	r3, [pc, #24]	; (80178b4 <std+0x44>)
 801789c:	3058      	adds	r0, #88	; 0x58
 801789e:	6263      	str	r3, [r4, #36]	; 0x24
 80178a0:	4b05      	ldr	r3, [pc, #20]	; (80178b8 <std+0x48>)
 80178a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80178a4:	4b05      	ldr	r3, [pc, #20]	; (80178bc <std+0x4c>)
 80178a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80178a8:	f7fe fb32 	bl	8015f10 <__retarget_lock_init_recursive>
 80178ac:	bd10      	pop	{r4, pc}
 80178ae:	46c0      	nop			; (mov r8, r8)
 80178b0:	08017ec5 	.word	0x08017ec5
 80178b4:	08017eed 	.word	0x08017eed
 80178b8:	08017f25 	.word	0x08017f25
 80178bc:	08017f51 	.word	0x08017f51

080178c0 <_cleanup_r>:
 80178c0:	b510      	push	{r4, lr}
 80178c2:	4902      	ldr	r1, [pc, #8]	; (80178cc <_cleanup_r+0xc>)
 80178c4:	f000 fa1c 	bl	8017d00 <_fwalk_reent>
 80178c8:	bd10      	pop	{r4, pc}
 80178ca:	46c0      	nop			; (mov r8, r8)
 80178cc:	0801807d 	.word	0x0801807d

080178d0 <__sfp_lock_acquire>:
 80178d0:	b510      	push	{r4, lr}
 80178d2:	4802      	ldr	r0, [pc, #8]	; (80178dc <__sfp_lock_acquire+0xc>)
 80178d4:	f7fe fb1e 	bl	8015f14 <__retarget_lock_acquire_recursive>
 80178d8:	bd10      	pop	{r4, pc}
 80178da:	46c0      	nop			; (mov r8, r8)
 80178dc:	20006e60 	.word	0x20006e60

080178e0 <__sfp_lock_release>:
 80178e0:	b510      	push	{r4, lr}
 80178e2:	4802      	ldr	r0, [pc, #8]	; (80178ec <__sfp_lock_release+0xc>)
 80178e4:	f7fe fb17 	bl	8015f16 <__retarget_lock_release_recursive>
 80178e8:	bd10      	pop	{r4, pc}
 80178ea:	46c0      	nop			; (mov r8, r8)
 80178ec:	20006e60 	.word	0x20006e60

080178f0 <__sinit_lock_acquire>:
 80178f0:	b510      	push	{r4, lr}
 80178f2:	4802      	ldr	r0, [pc, #8]	; (80178fc <__sinit_lock_acquire+0xc>)
 80178f4:	f7fe fb0e 	bl	8015f14 <__retarget_lock_acquire_recursive>
 80178f8:	bd10      	pop	{r4, pc}
 80178fa:	46c0      	nop			; (mov r8, r8)
 80178fc:	20006e5b 	.word	0x20006e5b

08017900 <__sinit_lock_release>:
 8017900:	b510      	push	{r4, lr}
 8017902:	4802      	ldr	r0, [pc, #8]	; (801790c <__sinit_lock_release+0xc>)
 8017904:	f7fe fb07 	bl	8015f16 <__retarget_lock_release_recursive>
 8017908:	bd10      	pop	{r4, pc}
 801790a:	46c0      	nop			; (mov r8, r8)
 801790c:	20006e5b 	.word	0x20006e5b

08017910 <__sinit>:
 8017910:	b510      	push	{r4, lr}
 8017912:	0004      	movs	r4, r0
 8017914:	f7ff ffec 	bl	80178f0 <__sinit_lock_acquire>
 8017918:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801791a:	2a00      	cmp	r2, #0
 801791c:	d002      	beq.n	8017924 <__sinit+0x14>
 801791e:	f7ff ffef 	bl	8017900 <__sinit_lock_release>
 8017922:	bd10      	pop	{r4, pc}
 8017924:	4b0e      	ldr	r3, [pc, #56]	; (8017960 <__sinit+0x50>)
 8017926:	2103      	movs	r1, #3
 8017928:	63e3      	str	r3, [r4, #60]	; 0x3c
 801792a:	23b8      	movs	r3, #184	; 0xb8
 801792c:	009b      	lsls	r3, r3, #2
 801792e:	50e2      	str	r2, [r4, r3]
 8017930:	3304      	adds	r3, #4
 8017932:	50e1      	str	r1, [r4, r3]
 8017934:	3308      	adds	r3, #8
 8017936:	18e1      	adds	r1, r4, r3
 8017938:	3b04      	subs	r3, #4
 801793a:	50e1      	str	r1, [r4, r3]
 801793c:	6860      	ldr	r0, [r4, #4]
 801793e:	2104      	movs	r1, #4
 8017940:	f7ff ff96 	bl	8017870 <std>
 8017944:	2201      	movs	r2, #1
 8017946:	2109      	movs	r1, #9
 8017948:	68a0      	ldr	r0, [r4, #8]
 801794a:	f7ff ff91 	bl	8017870 <std>
 801794e:	2202      	movs	r2, #2
 8017950:	2112      	movs	r1, #18
 8017952:	68e0      	ldr	r0, [r4, #12]
 8017954:	f7ff ff8c 	bl	8017870 <std>
 8017958:	2301      	movs	r3, #1
 801795a:	63a3      	str	r3, [r4, #56]	; 0x38
 801795c:	e7df      	b.n	801791e <__sinit+0xe>
 801795e:	46c0      	nop			; (mov r8, r8)
 8017960:	080178c1 	.word	0x080178c1

08017964 <__fputwc>:
 8017964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017966:	b085      	sub	sp, #20
 8017968:	000e      	movs	r6, r1
 801796a:	0015      	movs	r5, r2
 801796c:	9001      	str	r0, [sp, #4]
 801796e:	f7fe fac3 	bl	8015ef8 <__locale_mb_cur_max>
 8017972:	0004      	movs	r4, r0
 8017974:	2801      	cmp	r0, #1
 8017976:	d119      	bne.n	80179ac <__fputwc+0x48>
 8017978:	1e73      	subs	r3, r6, #1
 801797a:	2bfe      	cmp	r3, #254	; 0xfe
 801797c:	d816      	bhi.n	80179ac <__fputwc+0x48>
 801797e:	ab02      	add	r3, sp, #8
 8017980:	711e      	strb	r6, [r3, #4]
 8017982:	2700      	movs	r7, #0
 8017984:	42a7      	cmp	r7, r4
 8017986:	d020      	beq.n	80179ca <__fputwc+0x66>
 8017988:	ab03      	add	r3, sp, #12
 801798a:	5dd9      	ldrb	r1, [r3, r7]
 801798c:	68ab      	ldr	r3, [r5, #8]
 801798e:	3b01      	subs	r3, #1
 8017990:	60ab      	str	r3, [r5, #8]
 8017992:	2b00      	cmp	r3, #0
 8017994:	da04      	bge.n	80179a0 <__fputwc+0x3c>
 8017996:	69aa      	ldr	r2, [r5, #24]
 8017998:	4293      	cmp	r3, r2
 801799a:	db19      	blt.n	80179d0 <__fputwc+0x6c>
 801799c:	290a      	cmp	r1, #10
 801799e:	d017      	beq.n	80179d0 <__fputwc+0x6c>
 80179a0:	682b      	ldr	r3, [r5, #0]
 80179a2:	1c5a      	adds	r2, r3, #1
 80179a4:	602a      	str	r2, [r5, #0]
 80179a6:	7019      	strb	r1, [r3, #0]
 80179a8:	3701      	adds	r7, #1
 80179aa:	e7eb      	b.n	8017984 <__fputwc+0x20>
 80179ac:	002b      	movs	r3, r5
 80179ae:	0032      	movs	r2, r6
 80179b0:	9801      	ldr	r0, [sp, #4]
 80179b2:	335c      	adds	r3, #92	; 0x5c
 80179b4:	a903      	add	r1, sp, #12
 80179b6:	f000 fb23 	bl	8018000 <_wcrtomb_r>
 80179ba:	0004      	movs	r4, r0
 80179bc:	1c43      	adds	r3, r0, #1
 80179be:	d1e0      	bne.n	8017982 <__fputwc+0x1e>
 80179c0:	2340      	movs	r3, #64	; 0x40
 80179c2:	0006      	movs	r6, r0
 80179c4:	89aa      	ldrh	r2, [r5, #12]
 80179c6:	4313      	orrs	r3, r2
 80179c8:	81ab      	strh	r3, [r5, #12]
 80179ca:	0030      	movs	r0, r6
 80179cc:	b005      	add	sp, #20
 80179ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179d0:	002a      	movs	r2, r5
 80179d2:	9801      	ldr	r0, [sp, #4]
 80179d4:	f000 fac2 	bl	8017f5c <__swbuf_r>
 80179d8:	1c43      	adds	r3, r0, #1
 80179da:	d1e5      	bne.n	80179a8 <__fputwc+0x44>
 80179dc:	0006      	movs	r6, r0
 80179de:	e7f4      	b.n	80179ca <__fputwc+0x66>

080179e0 <_fputwc_r>:
 80179e0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80179e2:	b570      	push	{r4, r5, r6, lr}
 80179e4:	0005      	movs	r5, r0
 80179e6:	000e      	movs	r6, r1
 80179e8:	0014      	movs	r4, r2
 80179ea:	07db      	lsls	r3, r3, #31
 80179ec:	d405      	bmi.n	80179fa <_fputwc_r+0x1a>
 80179ee:	8993      	ldrh	r3, [r2, #12]
 80179f0:	059b      	lsls	r3, r3, #22
 80179f2:	d402      	bmi.n	80179fa <_fputwc_r+0x1a>
 80179f4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80179f6:	f7fe fa8d 	bl	8015f14 <__retarget_lock_acquire_recursive>
 80179fa:	230c      	movs	r3, #12
 80179fc:	5ee2      	ldrsh	r2, [r4, r3]
 80179fe:	2380      	movs	r3, #128	; 0x80
 8017a00:	019b      	lsls	r3, r3, #6
 8017a02:	421a      	tst	r2, r3
 8017a04:	d104      	bne.n	8017a10 <_fputwc_r+0x30>
 8017a06:	431a      	orrs	r2, r3
 8017a08:	81a2      	strh	r2, [r4, #12]
 8017a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017a0c:	4313      	orrs	r3, r2
 8017a0e:	6663      	str	r3, [r4, #100]	; 0x64
 8017a10:	0028      	movs	r0, r5
 8017a12:	0022      	movs	r2, r4
 8017a14:	0031      	movs	r1, r6
 8017a16:	f7ff ffa5 	bl	8017964 <__fputwc>
 8017a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a1c:	0005      	movs	r5, r0
 8017a1e:	07db      	lsls	r3, r3, #31
 8017a20:	d405      	bmi.n	8017a2e <_fputwc_r+0x4e>
 8017a22:	89a3      	ldrh	r3, [r4, #12]
 8017a24:	059b      	lsls	r3, r3, #22
 8017a26:	d402      	bmi.n	8017a2e <_fputwc_r+0x4e>
 8017a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a2a:	f7fe fa74 	bl	8015f16 <__retarget_lock_release_recursive>
 8017a2e:	0028      	movs	r0, r5
 8017a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a34 <__sfvwrite_r>:
 8017a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a36:	6893      	ldr	r3, [r2, #8]
 8017a38:	b087      	sub	sp, #28
 8017a3a:	000c      	movs	r4, r1
 8017a3c:	9002      	str	r0, [sp, #8]
 8017a3e:	9203      	str	r2, [sp, #12]
 8017a40:	9300      	str	r3, [sp, #0]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d102      	bne.n	8017a4c <__sfvwrite_r+0x18>
 8017a46:	2000      	movs	r0, #0
 8017a48:	b007      	add	sp, #28
 8017a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a4c:	898b      	ldrh	r3, [r1, #12]
 8017a4e:	071b      	lsls	r3, r3, #28
 8017a50:	d559      	bpl.n	8017b06 <__sfvwrite_r+0xd2>
 8017a52:	690b      	ldr	r3, [r1, #16]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d056      	beq.n	8017b06 <__sfvwrite_r+0xd2>
 8017a58:	9b03      	ldr	r3, [sp, #12]
 8017a5a:	2202      	movs	r2, #2
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	9301      	str	r3, [sp, #4]
 8017a60:	89a3      	ldrh	r3, [r4, #12]
 8017a62:	001f      	movs	r7, r3
 8017a64:	4017      	ands	r7, r2
 8017a66:	4213      	tst	r3, r2
 8017a68:	d173      	bne.n	8017b52 <__sfvwrite_r+0x11e>
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	0019      	movs	r1, r3
 8017a6e:	4011      	ands	r1, r2
 8017a70:	4213      	tst	r3, r2
 8017a72:	d100      	bne.n	8017a76 <__sfvwrite_r+0x42>
 8017a74:	e0a8      	b.n	8017bc8 <__sfvwrite_r+0x194>
 8017a76:	0038      	movs	r0, r7
 8017a78:	003e      	movs	r6, r7
 8017a7a:	9700      	str	r7, [sp, #0]
 8017a7c:	9205      	str	r2, [sp, #20]
 8017a7e:	9b00      	ldr	r3, [sp, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d100      	bne.n	8017a86 <__sfvwrite_r+0x52>
 8017a84:	e112      	b.n	8017cac <__sfvwrite_r+0x278>
 8017a86:	2800      	cmp	r0, #0
 8017a88:	d10a      	bne.n	8017aa0 <__sfvwrite_r+0x6c>
 8017a8a:	001a      	movs	r2, r3
 8017a8c:	210a      	movs	r1, #10
 8017a8e:	0030      	movs	r0, r6
 8017a90:	f7fe fa54 	bl	8015f3c <memchr>
 8017a94:	9b00      	ldr	r3, [sp, #0]
 8017a96:	1c5f      	adds	r7, r3, #1
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	d001      	beq.n	8017aa0 <__sfvwrite_r+0x6c>
 8017a9c:	3001      	adds	r0, #1
 8017a9e:	1b87      	subs	r7, r0, r6
 8017aa0:	9b00      	ldr	r3, [sp, #0]
 8017aa2:	9704      	str	r7, [sp, #16]
 8017aa4:	429f      	cmp	r7, r3
 8017aa6:	d900      	bls.n	8017aaa <__sfvwrite_r+0x76>
 8017aa8:	9304      	str	r3, [sp, #16]
 8017aaa:	6820      	ldr	r0, [r4, #0]
 8017aac:	6922      	ldr	r2, [r4, #16]
 8017aae:	6963      	ldr	r3, [r4, #20]
 8017ab0:	4290      	cmp	r0, r2
 8017ab2:	d800      	bhi.n	8017ab6 <__sfvwrite_r+0x82>
 8017ab4:	e103      	b.n	8017cbe <__sfvwrite_r+0x28a>
 8017ab6:	68a2      	ldr	r2, [r4, #8]
 8017ab8:	189d      	adds	r5, r3, r2
 8017aba:	9a04      	ldr	r2, [sp, #16]
 8017abc:	42aa      	cmp	r2, r5
 8017abe:	dc00      	bgt.n	8017ac2 <__sfvwrite_r+0x8e>
 8017ac0:	e0fd      	b.n	8017cbe <__sfvwrite_r+0x28a>
 8017ac2:	0031      	movs	r1, r6
 8017ac4:	002a      	movs	r2, r5
 8017ac6:	f7fe fa44 	bl	8015f52 <memmove>
 8017aca:	6823      	ldr	r3, [r4, #0]
 8017acc:	0021      	movs	r1, r4
 8017ace:	195b      	adds	r3, r3, r5
 8017ad0:	9802      	ldr	r0, [sp, #8]
 8017ad2:	6023      	str	r3, [r4, #0]
 8017ad4:	f7ff fea6 	bl	8017824 <_fflush_r>
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d170      	bne.n	8017bbe <__sfvwrite_r+0x18a>
 8017adc:	9805      	ldr	r0, [sp, #20]
 8017ade:	1b7f      	subs	r7, r7, r5
 8017ae0:	d105      	bne.n	8017aee <__sfvwrite_r+0xba>
 8017ae2:	0021      	movs	r1, r4
 8017ae4:	9802      	ldr	r0, [sp, #8]
 8017ae6:	f7ff fe9d 	bl	8017824 <_fflush_r>
 8017aea:	2800      	cmp	r0, #0
 8017aec:	d167      	bne.n	8017bbe <__sfvwrite_r+0x18a>
 8017aee:	9b00      	ldr	r3, [sp, #0]
 8017af0:	1976      	adds	r6, r6, r5
 8017af2:	1b5b      	subs	r3, r3, r5
 8017af4:	9300      	str	r3, [sp, #0]
 8017af6:	9b03      	ldr	r3, [sp, #12]
 8017af8:	689b      	ldr	r3, [r3, #8]
 8017afa:	1b5d      	subs	r5, r3, r5
 8017afc:	9304      	str	r3, [sp, #16]
 8017afe:	9b03      	ldr	r3, [sp, #12]
 8017b00:	609d      	str	r5, [r3, #8]
 8017b02:	d1bc      	bne.n	8017a7e <__sfvwrite_r+0x4a>
 8017b04:	e79f      	b.n	8017a46 <__sfvwrite_r+0x12>
 8017b06:	0021      	movs	r1, r4
 8017b08:	9802      	ldr	r0, [sp, #8]
 8017b0a:	f7ff fd87 	bl	801761c <__swsetup_r>
 8017b0e:	2800      	cmp	r0, #0
 8017b10:	d0a2      	beq.n	8017a58 <__sfvwrite_r+0x24>
 8017b12:	2001      	movs	r0, #1
 8017b14:	4240      	negs	r0, r0
 8017b16:	e797      	b.n	8017a48 <__sfvwrite_r+0x14>
 8017b18:	9b01      	ldr	r3, [sp, #4]
 8017b1a:	681e      	ldr	r6, [r3, #0]
 8017b1c:	685d      	ldr	r5, [r3, #4]
 8017b1e:	3308      	adds	r3, #8
 8017b20:	9301      	str	r3, [sp, #4]
 8017b22:	2d00      	cmp	r5, #0
 8017b24:	d0f8      	beq.n	8017b18 <__sfvwrite_r+0xe4>
 8017b26:	4a72      	ldr	r2, [pc, #456]	; (8017cf0 <__sfvwrite_r+0x2bc>)
 8017b28:	002b      	movs	r3, r5
 8017b2a:	4295      	cmp	r5, r2
 8017b2c:	d900      	bls.n	8017b30 <__sfvwrite_r+0xfc>
 8017b2e:	0013      	movs	r3, r2
 8017b30:	0032      	movs	r2, r6
 8017b32:	69e1      	ldr	r1, [r4, #28]
 8017b34:	9802      	ldr	r0, [sp, #8]
 8017b36:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8017b38:	47b8      	blx	r7
 8017b3a:	2800      	cmp	r0, #0
 8017b3c:	dd3f      	ble.n	8017bbe <__sfvwrite_r+0x18a>
 8017b3e:	9b03      	ldr	r3, [sp, #12]
 8017b40:	1836      	adds	r6, r6, r0
 8017b42:	689b      	ldr	r3, [r3, #8]
 8017b44:	1a2d      	subs	r5, r5, r0
 8017b46:	9300      	str	r3, [sp, #0]
 8017b48:	1a18      	subs	r0, r3, r0
 8017b4a:	9b03      	ldr	r3, [sp, #12]
 8017b4c:	6098      	str	r0, [r3, #8]
 8017b4e:	d1e8      	bne.n	8017b22 <__sfvwrite_r+0xee>
 8017b50:	e779      	b.n	8017a46 <__sfvwrite_r+0x12>
 8017b52:	2600      	movs	r6, #0
 8017b54:	0035      	movs	r5, r6
 8017b56:	e7e4      	b.n	8017b22 <__sfvwrite_r+0xee>
 8017b58:	9b01      	ldr	r3, [sp, #4]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	9304      	str	r3, [sp, #16]
 8017b5e:	9b01      	ldr	r3, [sp, #4]
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	9300      	str	r3, [sp, #0]
 8017b64:	9b01      	ldr	r3, [sp, #4]
 8017b66:	3308      	adds	r3, #8
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	9b00      	ldr	r3, [sp, #0]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d0f3      	beq.n	8017b58 <__sfvwrite_r+0x124>
 8017b70:	2380      	movs	r3, #128	; 0x80
 8017b72:	89a2      	ldrh	r2, [r4, #12]
 8017b74:	009b      	lsls	r3, r3, #2
 8017b76:	68a5      	ldr	r5, [r4, #8]
 8017b78:	6820      	ldr	r0, [r4, #0]
 8017b7a:	421a      	tst	r2, r3
 8017b7c:	d064      	beq.n	8017c48 <__sfvwrite_r+0x214>
 8017b7e:	9b00      	ldr	r3, [sp, #0]
 8017b80:	429d      	cmp	r5, r3
 8017b82:	d835      	bhi.n	8017bf0 <__sfvwrite_r+0x1bc>
 8017b84:	2390      	movs	r3, #144	; 0x90
 8017b86:	00db      	lsls	r3, r3, #3
 8017b88:	421a      	tst	r2, r3
 8017b8a:	d031      	beq.n	8017bf0 <__sfvwrite_r+0x1bc>
 8017b8c:	2603      	movs	r6, #3
 8017b8e:	6963      	ldr	r3, [r4, #20]
 8017b90:	6921      	ldr	r1, [r4, #16]
 8017b92:	435e      	muls	r6, r3
 8017b94:	1a47      	subs	r7, r0, r1
 8017b96:	0ff0      	lsrs	r0, r6, #31
 8017b98:	1986      	adds	r6, r0, r6
 8017b9a:	9800      	ldr	r0, [sp, #0]
 8017b9c:	1c7b      	adds	r3, r7, #1
 8017b9e:	181b      	adds	r3, r3, r0
 8017ba0:	1076      	asrs	r6, r6, #1
 8017ba2:	42b3      	cmp	r3, r6
 8017ba4:	d900      	bls.n	8017ba8 <__sfvwrite_r+0x174>
 8017ba6:	001e      	movs	r6, r3
 8017ba8:	0553      	lsls	r3, r2, #21
 8017baa:	d53e      	bpl.n	8017c2a <__sfvwrite_r+0x1f6>
 8017bac:	0031      	movs	r1, r6
 8017bae:	9802      	ldr	r0, [sp, #8]
 8017bb0:	f7fa f854 	bl	8011c5c <_malloc_r>
 8017bb4:	1e05      	subs	r5, r0, #0
 8017bb6:	d10a      	bne.n	8017bce <__sfvwrite_r+0x19a>
 8017bb8:	230c      	movs	r3, #12
 8017bba:	9a02      	ldr	r2, [sp, #8]
 8017bbc:	6013      	str	r3, [r2, #0]
 8017bbe:	2340      	movs	r3, #64	; 0x40
 8017bc0:	89a2      	ldrh	r2, [r4, #12]
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	81a3      	strh	r3, [r4, #12]
 8017bc6:	e7a4      	b.n	8017b12 <__sfvwrite_r+0xde>
 8017bc8:	9104      	str	r1, [sp, #16]
 8017bca:	9100      	str	r1, [sp, #0]
 8017bcc:	e7cd      	b.n	8017b6a <__sfvwrite_r+0x136>
 8017bce:	003a      	movs	r2, r7
 8017bd0:	6921      	ldr	r1, [r4, #16]
 8017bd2:	f7fa fa65 	bl	80120a0 <memcpy>
 8017bd6:	89a3      	ldrh	r3, [r4, #12]
 8017bd8:	4a46      	ldr	r2, [pc, #280]	; (8017cf4 <__sfvwrite_r+0x2c0>)
 8017bda:	401a      	ands	r2, r3
 8017bdc:	2380      	movs	r3, #128	; 0x80
 8017bde:	4313      	orrs	r3, r2
 8017be0:	81a3      	strh	r3, [r4, #12]
 8017be2:	6125      	str	r5, [r4, #16]
 8017be4:	19ed      	adds	r5, r5, r7
 8017be6:	6025      	str	r5, [r4, #0]
 8017be8:	6166      	str	r6, [r4, #20]
 8017bea:	9d00      	ldr	r5, [sp, #0]
 8017bec:	1bf6      	subs	r6, r6, r7
 8017bee:	60a6      	str	r6, [r4, #8]
 8017bf0:	9f00      	ldr	r7, [sp, #0]
 8017bf2:	42bd      	cmp	r5, r7
 8017bf4:	d900      	bls.n	8017bf8 <__sfvwrite_r+0x1c4>
 8017bf6:	003d      	movs	r5, r7
 8017bf8:	002a      	movs	r2, r5
 8017bfa:	9904      	ldr	r1, [sp, #16]
 8017bfc:	6820      	ldr	r0, [r4, #0]
 8017bfe:	f7fe f9a8 	bl	8015f52 <memmove>
 8017c02:	68a3      	ldr	r3, [r4, #8]
 8017c04:	1b5b      	subs	r3, r3, r5
 8017c06:	60a3      	str	r3, [r4, #8]
 8017c08:	6823      	ldr	r3, [r4, #0]
 8017c0a:	195d      	adds	r5, r3, r5
 8017c0c:	6025      	str	r5, [r4, #0]
 8017c0e:	9b04      	ldr	r3, [sp, #16]
 8017c10:	19db      	adds	r3, r3, r7
 8017c12:	9304      	str	r3, [sp, #16]
 8017c14:	9b00      	ldr	r3, [sp, #0]
 8017c16:	1bdb      	subs	r3, r3, r7
 8017c18:	9300      	str	r3, [sp, #0]
 8017c1a:	9b03      	ldr	r3, [sp, #12]
 8017c1c:	689b      	ldr	r3, [r3, #8]
 8017c1e:	1bdf      	subs	r7, r3, r7
 8017c20:	9305      	str	r3, [sp, #20]
 8017c22:	9b03      	ldr	r3, [sp, #12]
 8017c24:	609f      	str	r7, [r3, #8]
 8017c26:	d1a0      	bne.n	8017b6a <__sfvwrite_r+0x136>
 8017c28:	e70d      	b.n	8017a46 <__sfvwrite_r+0x12>
 8017c2a:	0032      	movs	r2, r6
 8017c2c:	9802      	ldr	r0, [sp, #8]
 8017c2e:	f7fa fa7d 	bl	801212c <_realloc_r>
 8017c32:	1e05      	subs	r5, r0, #0
 8017c34:	d1d5      	bne.n	8017be2 <__sfvwrite_r+0x1ae>
 8017c36:	6921      	ldr	r1, [r4, #16]
 8017c38:	9802      	ldr	r0, [sp, #8]
 8017c3a:	f7fd fd39 	bl	80156b0 <_free_r>
 8017c3e:	2280      	movs	r2, #128	; 0x80
 8017c40:	89a3      	ldrh	r3, [r4, #12]
 8017c42:	4393      	bics	r3, r2
 8017c44:	81a3      	strh	r3, [r4, #12]
 8017c46:	e7b7      	b.n	8017bb8 <__sfvwrite_r+0x184>
 8017c48:	6923      	ldr	r3, [r4, #16]
 8017c4a:	4283      	cmp	r3, r0
 8017c4c:	d303      	bcc.n	8017c56 <__sfvwrite_r+0x222>
 8017c4e:	6967      	ldr	r7, [r4, #20]
 8017c50:	9b00      	ldr	r3, [sp, #0]
 8017c52:	429f      	cmp	r7, r3
 8017c54:	d917      	bls.n	8017c86 <__sfvwrite_r+0x252>
 8017c56:	9b00      	ldr	r3, [sp, #0]
 8017c58:	429d      	cmp	r5, r3
 8017c5a:	d900      	bls.n	8017c5e <__sfvwrite_r+0x22a>
 8017c5c:	001d      	movs	r5, r3
 8017c5e:	002a      	movs	r2, r5
 8017c60:	9904      	ldr	r1, [sp, #16]
 8017c62:	f7fe f976 	bl	8015f52 <memmove>
 8017c66:	68a3      	ldr	r3, [r4, #8]
 8017c68:	6822      	ldr	r2, [r4, #0]
 8017c6a:	1b5b      	subs	r3, r3, r5
 8017c6c:	1952      	adds	r2, r2, r5
 8017c6e:	002f      	movs	r7, r5
 8017c70:	60a3      	str	r3, [r4, #8]
 8017c72:	6022      	str	r2, [r4, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d1ca      	bne.n	8017c0e <__sfvwrite_r+0x1da>
 8017c78:	0021      	movs	r1, r4
 8017c7a:	9802      	ldr	r0, [sp, #8]
 8017c7c:	f7ff fdd2 	bl	8017824 <_fflush_r>
 8017c80:	2800      	cmp	r0, #0
 8017c82:	d0c4      	beq.n	8017c0e <__sfvwrite_r+0x1da>
 8017c84:	e79b      	b.n	8017bbe <__sfvwrite_r+0x18a>
 8017c86:	9a00      	ldr	r2, [sp, #0]
 8017c88:	4b1b      	ldr	r3, [pc, #108]	; (8017cf8 <__sfvwrite_r+0x2c4>)
 8017c8a:	0010      	movs	r0, r2
 8017c8c:	429a      	cmp	r2, r3
 8017c8e:	d900      	bls.n	8017c92 <__sfvwrite_r+0x25e>
 8017c90:	481a      	ldr	r0, [pc, #104]	; (8017cfc <__sfvwrite_r+0x2c8>)
 8017c92:	0039      	movs	r1, r7
 8017c94:	f7e8 fae6 	bl	8000264 <__divsi3>
 8017c98:	003b      	movs	r3, r7
 8017c9a:	9a04      	ldr	r2, [sp, #16]
 8017c9c:	4343      	muls	r3, r0
 8017c9e:	69e1      	ldr	r1, [r4, #28]
 8017ca0:	9802      	ldr	r0, [sp, #8]
 8017ca2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017ca4:	47a8      	blx	r5
 8017ca6:	1e07      	subs	r7, r0, #0
 8017ca8:	dcb1      	bgt.n	8017c0e <__sfvwrite_r+0x1da>
 8017caa:	e788      	b.n	8017bbe <__sfvwrite_r+0x18a>
 8017cac:	9b01      	ldr	r3, [sp, #4]
 8017cae:	2000      	movs	r0, #0
 8017cb0:	681e      	ldr	r6, [r3, #0]
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	9300      	str	r3, [sp, #0]
 8017cb6:	9b01      	ldr	r3, [sp, #4]
 8017cb8:	3308      	adds	r3, #8
 8017cba:	9301      	str	r3, [sp, #4]
 8017cbc:	e6df      	b.n	8017a7e <__sfvwrite_r+0x4a>
 8017cbe:	9a04      	ldr	r2, [sp, #16]
 8017cc0:	4293      	cmp	r3, r2
 8017cc2:	dc08      	bgt.n	8017cd6 <__sfvwrite_r+0x2a2>
 8017cc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017cc6:	0032      	movs	r2, r6
 8017cc8:	69e1      	ldr	r1, [r4, #28]
 8017cca:	9802      	ldr	r0, [sp, #8]
 8017ccc:	47a8      	blx	r5
 8017cce:	1e05      	subs	r5, r0, #0
 8017cd0:	dd00      	ble.n	8017cd4 <__sfvwrite_r+0x2a0>
 8017cd2:	e703      	b.n	8017adc <__sfvwrite_r+0xa8>
 8017cd4:	e773      	b.n	8017bbe <__sfvwrite_r+0x18a>
 8017cd6:	9a04      	ldr	r2, [sp, #16]
 8017cd8:	0031      	movs	r1, r6
 8017cda:	f7fe f93a 	bl	8015f52 <memmove>
 8017cde:	9a04      	ldr	r2, [sp, #16]
 8017ce0:	68a3      	ldr	r3, [r4, #8]
 8017ce2:	0015      	movs	r5, r2
 8017ce4:	1a9b      	subs	r3, r3, r2
 8017ce6:	60a3      	str	r3, [r4, #8]
 8017ce8:	6823      	ldr	r3, [r4, #0]
 8017cea:	189b      	adds	r3, r3, r2
 8017cec:	6023      	str	r3, [r4, #0]
 8017cee:	e6f5      	b.n	8017adc <__sfvwrite_r+0xa8>
 8017cf0:	7ffffc00 	.word	0x7ffffc00
 8017cf4:	fffffb7f 	.word	0xfffffb7f
 8017cf8:	7ffffffe 	.word	0x7ffffffe
 8017cfc:	7fffffff 	.word	0x7fffffff

08017d00 <_fwalk_reent>:
 8017d00:	23b8      	movs	r3, #184	; 0xb8
 8017d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d04:	0006      	movs	r6, r0
 8017d06:	2700      	movs	r7, #0
 8017d08:	009b      	lsls	r3, r3, #2
 8017d0a:	9101      	str	r1, [sp, #4]
 8017d0c:	18c4      	adds	r4, r0, r3
 8017d0e:	6863      	ldr	r3, [r4, #4]
 8017d10:	68a5      	ldr	r5, [r4, #8]
 8017d12:	9300      	str	r3, [sp, #0]
 8017d14:	9b00      	ldr	r3, [sp, #0]
 8017d16:	3b01      	subs	r3, #1
 8017d18:	9300      	str	r3, [sp, #0]
 8017d1a:	d504      	bpl.n	8017d26 <_fwalk_reent+0x26>
 8017d1c:	6824      	ldr	r4, [r4, #0]
 8017d1e:	2c00      	cmp	r4, #0
 8017d20:	d1f5      	bne.n	8017d0e <_fwalk_reent+0xe>
 8017d22:	0038      	movs	r0, r7
 8017d24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017d26:	89ab      	ldrh	r3, [r5, #12]
 8017d28:	2b01      	cmp	r3, #1
 8017d2a:	d908      	bls.n	8017d3e <_fwalk_reent+0x3e>
 8017d2c:	220e      	movs	r2, #14
 8017d2e:	5eab      	ldrsh	r3, [r5, r2]
 8017d30:	3301      	adds	r3, #1
 8017d32:	d004      	beq.n	8017d3e <_fwalk_reent+0x3e>
 8017d34:	0029      	movs	r1, r5
 8017d36:	0030      	movs	r0, r6
 8017d38:	9b01      	ldr	r3, [sp, #4]
 8017d3a:	4798      	blx	r3
 8017d3c:	4307      	orrs	r7, r0
 8017d3e:	3568      	adds	r5, #104	; 0x68
 8017d40:	e7e8      	b.n	8017d14 <_fwalk_reent+0x14>
	...

08017d44 <__swhatbuf_r>:
 8017d44:	b570      	push	{r4, r5, r6, lr}
 8017d46:	000e      	movs	r6, r1
 8017d48:	001d      	movs	r5, r3
 8017d4a:	230e      	movs	r3, #14
 8017d4c:	5ec9      	ldrsh	r1, [r1, r3]
 8017d4e:	0014      	movs	r4, r2
 8017d50:	b096      	sub	sp, #88	; 0x58
 8017d52:	2900      	cmp	r1, #0
 8017d54:	da0b      	bge.n	8017d6e <__swhatbuf_r+0x2a>
 8017d56:	2300      	movs	r3, #0
 8017d58:	602b      	str	r3, [r5, #0]
 8017d5a:	89b1      	ldrh	r1, [r6, #12]
 8017d5c:	2280      	movs	r2, #128	; 0x80
 8017d5e:	0008      	movs	r0, r1
 8017d60:	4010      	ands	r0, r2
 8017d62:	4211      	tst	r1, r2
 8017d64:	d117      	bne.n	8017d96 <__swhatbuf_r+0x52>
 8017d66:	2380      	movs	r3, #128	; 0x80
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	6023      	str	r3, [r4, #0]
 8017d6c:	e016      	b.n	8017d9c <__swhatbuf_r+0x58>
 8017d6e:	466a      	mov	r2, sp
 8017d70:	f000 f9e4 	bl	801813c <_fstat_r>
 8017d74:	2800      	cmp	r0, #0
 8017d76:	dbee      	blt.n	8017d56 <__swhatbuf_r+0x12>
 8017d78:	23f0      	movs	r3, #240	; 0xf0
 8017d7a:	9901      	ldr	r1, [sp, #4]
 8017d7c:	021b      	lsls	r3, r3, #8
 8017d7e:	4019      	ands	r1, r3
 8017d80:	4b07      	ldr	r3, [pc, #28]	; (8017da0 <__swhatbuf_r+0x5c>)
 8017d82:	2080      	movs	r0, #128	; 0x80
 8017d84:	18c9      	adds	r1, r1, r3
 8017d86:	424b      	negs	r3, r1
 8017d88:	4159      	adcs	r1, r3
 8017d8a:	2380      	movs	r3, #128	; 0x80
 8017d8c:	00db      	lsls	r3, r3, #3
 8017d8e:	6029      	str	r1, [r5, #0]
 8017d90:	0100      	lsls	r0, r0, #4
 8017d92:	6023      	str	r3, [r4, #0]
 8017d94:	e002      	b.n	8017d9c <__swhatbuf_r+0x58>
 8017d96:	2240      	movs	r2, #64	; 0x40
 8017d98:	0018      	movs	r0, r3
 8017d9a:	6022      	str	r2, [r4, #0]
 8017d9c:	b016      	add	sp, #88	; 0x58
 8017d9e:	bd70      	pop	{r4, r5, r6, pc}
 8017da0:	ffffe000 	.word	0xffffe000

08017da4 <__smakebuf_r>:
 8017da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017da6:	2602      	movs	r6, #2
 8017da8:	898b      	ldrh	r3, [r1, #12]
 8017daa:	0005      	movs	r5, r0
 8017dac:	000c      	movs	r4, r1
 8017dae:	4233      	tst	r3, r6
 8017db0:	d006      	beq.n	8017dc0 <__smakebuf_r+0x1c>
 8017db2:	0023      	movs	r3, r4
 8017db4:	3343      	adds	r3, #67	; 0x43
 8017db6:	6023      	str	r3, [r4, #0]
 8017db8:	6123      	str	r3, [r4, #16]
 8017dba:	2301      	movs	r3, #1
 8017dbc:	6163      	str	r3, [r4, #20]
 8017dbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017dc0:	466a      	mov	r2, sp
 8017dc2:	ab01      	add	r3, sp, #4
 8017dc4:	f7ff ffbe 	bl	8017d44 <__swhatbuf_r>
 8017dc8:	9900      	ldr	r1, [sp, #0]
 8017dca:	0007      	movs	r7, r0
 8017dcc:	0028      	movs	r0, r5
 8017dce:	f7f9 ff45 	bl	8011c5c <_malloc_r>
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d108      	bne.n	8017de8 <__smakebuf_r+0x44>
 8017dd6:	220c      	movs	r2, #12
 8017dd8:	5ea3      	ldrsh	r3, [r4, r2]
 8017dda:	059a      	lsls	r2, r3, #22
 8017ddc:	d4ef      	bmi.n	8017dbe <__smakebuf_r+0x1a>
 8017dde:	2203      	movs	r2, #3
 8017de0:	4393      	bics	r3, r2
 8017de2:	431e      	orrs	r6, r3
 8017de4:	81a6      	strh	r6, [r4, #12]
 8017de6:	e7e4      	b.n	8017db2 <__smakebuf_r+0xe>
 8017de8:	4b0f      	ldr	r3, [pc, #60]	; (8017e28 <__smakebuf_r+0x84>)
 8017dea:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017dec:	2380      	movs	r3, #128	; 0x80
 8017dee:	89a2      	ldrh	r2, [r4, #12]
 8017df0:	6020      	str	r0, [r4, #0]
 8017df2:	4313      	orrs	r3, r2
 8017df4:	81a3      	strh	r3, [r4, #12]
 8017df6:	9b00      	ldr	r3, [sp, #0]
 8017df8:	6120      	str	r0, [r4, #16]
 8017dfa:	6163      	str	r3, [r4, #20]
 8017dfc:	9b01      	ldr	r3, [sp, #4]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d00d      	beq.n	8017e1e <__smakebuf_r+0x7a>
 8017e02:	0028      	movs	r0, r5
 8017e04:	230e      	movs	r3, #14
 8017e06:	5ee1      	ldrsh	r1, [r4, r3]
 8017e08:	f000 f9aa 	bl	8018160 <_isatty_r>
 8017e0c:	2800      	cmp	r0, #0
 8017e0e:	d006      	beq.n	8017e1e <__smakebuf_r+0x7a>
 8017e10:	2203      	movs	r2, #3
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	4393      	bics	r3, r2
 8017e16:	001a      	movs	r2, r3
 8017e18:	2301      	movs	r3, #1
 8017e1a:	4313      	orrs	r3, r2
 8017e1c:	81a3      	strh	r3, [r4, #12]
 8017e1e:	89a0      	ldrh	r0, [r4, #12]
 8017e20:	4307      	orrs	r7, r0
 8017e22:	81a7      	strh	r7, [r4, #12]
 8017e24:	e7cb      	b.n	8017dbe <__smakebuf_r+0x1a>
 8017e26:	46c0      	nop			; (mov r8, r8)
 8017e28:	080178c1 	.word	0x080178c1

08017e2c <_raise_r>:
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	0004      	movs	r4, r0
 8017e30:	000d      	movs	r5, r1
 8017e32:	291f      	cmp	r1, #31
 8017e34:	d904      	bls.n	8017e40 <_raise_r+0x14>
 8017e36:	2316      	movs	r3, #22
 8017e38:	6003      	str	r3, [r0, #0]
 8017e3a:	2001      	movs	r0, #1
 8017e3c:	4240      	negs	r0, r0
 8017e3e:	bd70      	pop	{r4, r5, r6, pc}
 8017e40:	23b7      	movs	r3, #183	; 0xb7
 8017e42:	009b      	lsls	r3, r3, #2
 8017e44:	58c3      	ldr	r3, [r0, r3]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d004      	beq.n	8017e54 <_raise_r+0x28>
 8017e4a:	008a      	lsls	r2, r1, #2
 8017e4c:	189b      	adds	r3, r3, r2
 8017e4e:	681a      	ldr	r2, [r3, #0]
 8017e50:	2a00      	cmp	r2, #0
 8017e52:	d108      	bne.n	8017e66 <_raise_r+0x3a>
 8017e54:	0020      	movs	r0, r4
 8017e56:	f000 f831 	bl	8017ebc <_getpid_r>
 8017e5a:	002a      	movs	r2, r5
 8017e5c:	0001      	movs	r1, r0
 8017e5e:	0020      	movs	r0, r4
 8017e60:	f000 f81a 	bl	8017e98 <_kill_r>
 8017e64:	e7eb      	b.n	8017e3e <_raise_r+0x12>
 8017e66:	2000      	movs	r0, #0
 8017e68:	2a01      	cmp	r2, #1
 8017e6a:	d0e8      	beq.n	8017e3e <_raise_r+0x12>
 8017e6c:	1c51      	adds	r1, r2, #1
 8017e6e:	d103      	bne.n	8017e78 <_raise_r+0x4c>
 8017e70:	2316      	movs	r3, #22
 8017e72:	3001      	adds	r0, #1
 8017e74:	6023      	str	r3, [r4, #0]
 8017e76:	e7e2      	b.n	8017e3e <_raise_r+0x12>
 8017e78:	2400      	movs	r4, #0
 8017e7a:	0028      	movs	r0, r5
 8017e7c:	601c      	str	r4, [r3, #0]
 8017e7e:	4790      	blx	r2
 8017e80:	0020      	movs	r0, r4
 8017e82:	e7dc      	b.n	8017e3e <_raise_r+0x12>

08017e84 <raise>:
 8017e84:	b510      	push	{r4, lr}
 8017e86:	4b03      	ldr	r3, [pc, #12]	; (8017e94 <raise+0x10>)
 8017e88:	0001      	movs	r1, r0
 8017e8a:	6818      	ldr	r0, [r3, #0]
 8017e8c:	f7ff ffce 	bl	8017e2c <_raise_r>
 8017e90:	bd10      	pop	{r4, pc}
 8017e92:	46c0      	nop			; (mov r8, r8)
 8017e94:	200000a8 	.word	0x200000a8

08017e98 <_kill_r>:
 8017e98:	2300      	movs	r3, #0
 8017e9a:	b570      	push	{r4, r5, r6, lr}
 8017e9c:	4d06      	ldr	r5, [pc, #24]	; (8017eb8 <_kill_r+0x20>)
 8017e9e:	0004      	movs	r4, r0
 8017ea0:	0008      	movs	r0, r1
 8017ea2:	0011      	movs	r1, r2
 8017ea4:	602b      	str	r3, [r5, #0]
 8017ea6:	f000 f9b5 	bl	8018214 <_kill>
 8017eaa:	1c43      	adds	r3, r0, #1
 8017eac:	d103      	bne.n	8017eb6 <_kill_r+0x1e>
 8017eae:	682b      	ldr	r3, [r5, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d000      	beq.n	8017eb6 <_kill_r+0x1e>
 8017eb4:	6023      	str	r3, [r4, #0]
 8017eb6:	bd70      	pop	{r4, r5, r6, pc}
 8017eb8:	20006e64 	.word	0x20006e64

08017ebc <_getpid_r>:
 8017ebc:	b510      	push	{r4, lr}
 8017ebe:	f000 f999 	bl	80181f4 <_getpid>
 8017ec2:	bd10      	pop	{r4, pc}

08017ec4 <__sread>:
 8017ec4:	b570      	push	{r4, r5, r6, lr}
 8017ec6:	000c      	movs	r4, r1
 8017ec8:	250e      	movs	r5, #14
 8017eca:	5f49      	ldrsh	r1, [r1, r5]
 8017ecc:	f000 f96e 	bl	80181ac <_read_r>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	db03      	blt.n	8017edc <__sread+0x18>
 8017ed4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017ed6:	181b      	adds	r3, r3, r0
 8017ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8017eda:	bd70      	pop	{r4, r5, r6, pc}
 8017edc:	89a3      	ldrh	r3, [r4, #12]
 8017ede:	4a02      	ldr	r2, [pc, #8]	; (8017ee8 <__sread+0x24>)
 8017ee0:	4013      	ands	r3, r2
 8017ee2:	81a3      	strh	r3, [r4, #12]
 8017ee4:	e7f9      	b.n	8017eda <__sread+0x16>
 8017ee6:	46c0      	nop			; (mov r8, r8)
 8017ee8:	ffffefff 	.word	0xffffefff

08017eec <__swrite>:
 8017eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eee:	001f      	movs	r7, r3
 8017ef0:	898b      	ldrh	r3, [r1, #12]
 8017ef2:	0005      	movs	r5, r0
 8017ef4:	000c      	movs	r4, r1
 8017ef6:	0016      	movs	r6, r2
 8017ef8:	05db      	lsls	r3, r3, #23
 8017efa:	d505      	bpl.n	8017f08 <__swrite+0x1c>
 8017efc:	230e      	movs	r3, #14
 8017efe:	5ec9      	ldrsh	r1, [r1, r3]
 8017f00:	2200      	movs	r2, #0
 8017f02:	2302      	movs	r3, #2
 8017f04:	f000 f93e 	bl	8018184 <_lseek_r>
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	4a05      	ldr	r2, [pc, #20]	; (8017f20 <__swrite+0x34>)
 8017f0c:	0028      	movs	r0, r5
 8017f0e:	4013      	ands	r3, r2
 8017f10:	81a3      	strh	r3, [r4, #12]
 8017f12:	0032      	movs	r2, r6
 8017f14:	230e      	movs	r3, #14
 8017f16:	5ee1      	ldrsh	r1, [r4, r3]
 8017f18:	003b      	movs	r3, r7
 8017f1a:	f000 f889 	bl	8018030 <_write_r>
 8017f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f20:	ffffefff 	.word	0xffffefff

08017f24 <__sseek>:
 8017f24:	b570      	push	{r4, r5, r6, lr}
 8017f26:	000c      	movs	r4, r1
 8017f28:	250e      	movs	r5, #14
 8017f2a:	5f49      	ldrsh	r1, [r1, r5]
 8017f2c:	f000 f92a 	bl	8018184 <_lseek_r>
 8017f30:	89a3      	ldrh	r3, [r4, #12]
 8017f32:	1c42      	adds	r2, r0, #1
 8017f34:	d103      	bne.n	8017f3e <__sseek+0x1a>
 8017f36:	4a05      	ldr	r2, [pc, #20]	; (8017f4c <__sseek+0x28>)
 8017f38:	4013      	ands	r3, r2
 8017f3a:	81a3      	strh	r3, [r4, #12]
 8017f3c:	bd70      	pop	{r4, r5, r6, pc}
 8017f3e:	2280      	movs	r2, #128	; 0x80
 8017f40:	0152      	lsls	r2, r2, #5
 8017f42:	4313      	orrs	r3, r2
 8017f44:	81a3      	strh	r3, [r4, #12]
 8017f46:	6520      	str	r0, [r4, #80]	; 0x50
 8017f48:	e7f8      	b.n	8017f3c <__sseek+0x18>
 8017f4a:	46c0      	nop			; (mov r8, r8)
 8017f4c:	ffffefff 	.word	0xffffefff

08017f50 <__sclose>:
 8017f50:	b510      	push	{r4, lr}
 8017f52:	230e      	movs	r3, #14
 8017f54:	5ec9      	ldrsh	r1, [r1, r3]
 8017f56:	f000 f87f 	bl	8018058 <_close_r>
 8017f5a:	bd10      	pop	{r4, pc}

08017f5c <__swbuf_r>:
 8017f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f5e:	0006      	movs	r6, r0
 8017f60:	000d      	movs	r5, r1
 8017f62:	0014      	movs	r4, r2
 8017f64:	2800      	cmp	r0, #0
 8017f66:	d004      	beq.n	8017f72 <__swbuf_r+0x16>
 8017f68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d101      	bne.n	8017f72 <__swbuf_r+0x16>
 8017f6e:	f7ff fccf 	bl	8017910 <__sinit>
 8017f72:	69a3      	ldr	r3, [r4, #24]
 8017f74:	60a3      	str	r3, [r4, #8]
 8017f76:	89a3      	ldrh	r3, [r4, #12]
 8017f78:	071b      	lsls	r3, r3, #28
 8017f7a:	d52e      	bpl.n	8017fda <__swbuf_r+0x7e>
 8017f7c:	6923      	ldr	r3, [r4, #16]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d02b      	beq.n	8017fda <__swbuf_r+0x7e>
 8017f82:	230c      	movs	r3, #12
 8017f84:	5ee2      	ldrsh	r2, [r4, r3]
 8017f86:	2380      	movs	r3, #128	; 0x80
 8017f88:	019b      	lsls	r3, r3, #6
 8017f8a:	b2ef      	uxtb	r7, r5
 8017f8c:	b2ed      	uxtb	r5, r5
 8017f8e:	421a      	tst	r2, r3
 8017f90:	d02c      	beq.n	8017fec <__swbuf_r+0x90>
 8017f92:	6823      	ldr	r3, [r4, #0]
 8017f94:	6922      	ldr	r2, [r4, #16]
 8017f96:	1a98      	subs	r0, r3, r2
 8017f98:	6963      	ldr	r3, [r4, #20]
 8017f9a:	4283      	cmp	r3, r0
 8017f9c:	dc05      	bgt.n	8017faa <__swbuf_r+0x4e>
 8017f9e:	0021      	movs	r1, r4
 8017fa0:	0030      	movs	r0, r6
 8017fa2:	f7ff fc3f 	bl	8017824 <_fflush_r>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	d11d      	bne.n	8017fe6 <__swbuf_r+0x8a>
 8017faa:	68a3      	ldr	r3, [r4, #8]
 8017fac:	3001      	adds	r0, #1
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	60a3      	str	r3, [r4, #8]
 8017fb2:	6823      	ldr	r3, [r4, #0]
 8017fb4:	1c5a      	adds	r2, r3, #1
 8017fb6:	6022      	str	r2, [r4, #0]
 8017fb8:	701f      	strb	r7, [r3, #0]
 8017fba:	6963      	ldr	r3, [r4, #20]
 8017fbc:	4283      	cmp	r3, r0
 8017fbe:	d004      	beq.n	8017fca <__swbuf_r+0x6e>
 8017fc0:	89a3      	ldrh	r3, [r4, #12]
 8017fc2:	07db      	lsls	r3, r3, #31
 8017fc4:	d507      	bpl.n	8017fd6 <__swbuf_r+0x7a>
 8017fc6:	2d0a      	cmp	r5, #10
 8017fc8:	d105      	bne.n	8017fd6 <__swbuf_r+0x7a>
 8017fca:	0021      	movs	r1, r4
 8017fcc:	0030      	movs	r0, r6
 8017fce:	f7ff fc29 	bl	8017824 <_fflush_r>
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d107      	bne.n	8017fe6 <__swbuf_r+0x8a>
 8017fd6:	0028      	movs	r0, r5
 8017fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fda:	0021      	movs	r1, r4
 8017fdc:	0030      	movs	r0, r6
 8017fde:	f7ff fb1d 	bl	801761c <__swsetup_r>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d0cd      	beq.n	8017f82 <__swbuf_r+0x26>
 8017fe6:	2501      	movs	r5, #1
 8017fe8:	426d      	negs	r5, r5
 8017fea:	e7f4      	b.n	8017fd6 <__swbuf_r+0x7a>
 8017fec:	4313      	orrs	r3, r2
 8017fee:	81a3      	strh	r3, [r4, #12]
 8017ff0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ff2:	4b02      	ldr	r3, [pc, #8]	; (8017ffc <__swbuf_r+0xa0>)
 8017ff4:	4013      	ands	r3, r2
 8017ff6:	6663      	str	r3, [r4, #100]	; 0x64
 8017ff8:	e7cb      	b.n	8017f92 <__swbuf_r+0x36>
 8017ffa:	46c0      	nop			; (mov r8, r8)
 8017ffc:	ffffdfff 	.word	0xffffdfff

08018000 <_wcrtomb_r>:
 8018000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018002:	001d      	movs	r5, r3
 8018004:	4b09      	ldr	r3, [pc, #36]	; (801802c <_wcrtomb_r+0x2c>)
 8018006:	0004      	movs	r4, r0
 8018008:	33e0      	adds	r3, #224	; 0xe0
 801800a:	681e      	ldr	r6, [r3, #0]
 801800c:	002b      	movs	r3, r5
 801800e:	2900      	cmp	r1, #0
 8018010:	d101      	bne.n	8018016 <_wcrtomb_r+0x16>
 8018012:	000a      	movs	r2, r1
 8018014:	a901      	add	r1, sp, #4
 8018016:	0020      	movs	r0, r4
 8018018:	47b0      	blx	r6
 801801a:	1c43      	adds	r3, r0, #1
 801801c:	d103      	bne.n	8018026 <_wcrtomb_r+0x26>
 801801e:	2300      	movs	r3, #0
 8018020:	602b      	str	r3, [r5, #0]
 8018022:	338a      	adds	r3, #138	; 0x8a
 8018024:	6023      	str	r3, [r4, #0]
 8018026:	b004      	add	sp, #16
 8018028:	bd70      	pop	{r4, r5, r6, pc}
 801802a:	46c0      	nop			; (mov r8, r8)
 801802c:	200008f0 	.word	0x200008f0

08018030 <_write_r>:
 8018030:	b570      	push	{r4, r5, r6, lr}
 8018032:	0004      	movs	r4, r0
 8018034:	0008      	movs	r0, r1
 8018036:	0011      	movs	r1, r2
 8018038:	001a      	movs	r2, r3
 801803a:	2300      	movs	r3, #0
 801803c:	4d05      	ldr	r5, [pc, #20]	; (8018054 <_write_r+0x24>)
 801803e:	602b      	str	r3, [r5, #0]
 8018040:	f000 f910 	bl	8018264 <_write>
 8018044:	1c43      	adds	r3, r0, #1
 8018046:	d103      	bne.n	8018050 <_write_r+0x20>
 8018048:	682b      	ldr	r3, [r5, #0]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d000      	beq.n	8018050 <_write_r+0x20>
 801804e:	6023      	str	r3, [r4, #0]
 8018050:	bd70      	pop	{r4, r5, r6, pc}
 8018052:	46c0      	nop			; (mov r8, r8)
 8018054:	20006e64 	.word	0x20006e64

08018058 <_close_r>:
 8018058:	2300      	movs	r3, #0
 801805a:	b570      	push	{r4, r5, r6, lr}
 801805c:	4d06      	ldr	r5, [pc, #24]	; (8018078 <_close_r+0x20>)
 801805e:	0004      	movs	r4, r0
 8018060:	0008      	movs	r0, r1
 8018062:	602b      	str	r3, [r5, #0]
 8018064:	f000 f8b6 	bl	80181d4 <_close>
 8018068:	1c43      	adds	r3, r0, #1
 801806a:	d103      	bne.n	8018074 <_close_r+0x1c>
 801806c:	682b      	ldr	r3, [r5, #0]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d000      	beq.n	8018074 <_close_r+0x1c>
 8018072:	6023      	str	r3, [r4, #0]
 8018074:	bd70      	pop	{r4, r5, r6, pc}
 8018076:	46c0      	nop			; (mov r8, r8)
 8018078:	20006e64 	.word	0x20006e64

0801807c <_fclose_r>:
 801807c:	b570      	push	{r4, r5, r6, lr}
 801807e:	0005      	movs	r5, r0
 8018080:	1e0c      	subs	r4, r1, #0
 8018082:	d102      	bne.n	801808a <_fclose_r+0xe>
 8018084:	2600      	movs	r6, #0
 8018086:	0030      	movs	r0, r6
 8018088:	bd70      	pop	{r4, r5, r6, pc}
 801808a:	2800      	cmp	r0, #0
 801808c:	d004      	beq.n	8018098 <_fclose_r+0x1c>
 801808e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018090:	2b00      	cmp	r3, #0
 8018092:	d101      	bne.n	8018098 <_fclose_r+0x1c>
 8018094:	f7ff fc3c 	bl	8017910 <__sinit>
 8018098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801809a:	07db      	lsls	r3, r3, #31
 801809c:	d405      	bmi.n	80180aa <_fclose_r+0x2e>
 801809e:	89a3      	ldrh	r3, [r4, #12]
 80180a0:	059b      	lsls	r3, r3, #22
 80180a2:	d402      	bmi.n	80180aa <_fclose_r+0x2e>
 80180a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180a6:	f7fd ff35 	bl	8015f14 <__retarget_lock_acquire_recursive>
 80180aa:	220c      	movs	r2, #12
 80180ac:	5ea3      	ldrsh	r3, [r4, r2]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d109      	bne.n	80180c6 <_fclose_r+0x4a>
 80180b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80180b4:	3301      	adds	r3, #1
 80180b6:	0016      	movs	r6, r2
 80180b8:	401e      	ands	r6, r3
 80180ba:	421a      	tst	r2, r3
 80180bc:	d1e2      	bne.n	8018084 <_fclose_r+0x8>
 80180be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180c0:	f7fd ff29 	bl	8015f16 <__retarget_lock_release_recursive>
 80180c4:	e7df      	b.n	8018086 <_fclose_r+0xa>
 80180c6:	0021      	movs	r1, r4
 80180c8:	0028      	movs	r0, r5
 80180ca:	f7ff fb13 	bl	80176f4 <__sflush_r>
 80180ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80180d0:	0006      	movs	r6, r0
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d006      	beq.n	80180e4 <_fclose_r+0x68>
 80180d6:	0028      	movs	r0, r5
 80180d8:	69e1      	ldr	r1, [r4, #28]
 80180da:	4798      	blx	r3
 80180dc:	2800      	cmp	r0, #0
 80180de:	da01      	bge.n	80180e4 <_fclose_r+0x68>
 80180e0:	2601      	movs	r6, #1
 80180e2:	4276      	negs	r6, r6
 80180e4:	89a3      	ldrh	r3, [r4, #12]
 80180e6:	061b      	lsls	r3, r3, #24
 80180e8:	d503      	bpl.n	80180f2 <_fclose_r+0x76>
 80180ea:	0028      	movs	r0, r5
 80180ec:	6921      	ldr	r1, [r4, #16]
 80180ee:	f7fd fadf 	bl	80156b0 <_free_r>
 80180f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80180f4:	2900      	cmp	r1, #0
 80180f6:	d008      	beq.n	801810a <_fclose_r+0x8e>
 80180f8:	0023      	movs	r3, r4
 80180fa:	3340      	adds	r3, #64	; 0x40
 80180fc:	4299      	cmp	r1, r3
 80180fe:	d002      	beq.n	8018106 <_fclose_r+0x8a>
 8018100:	0028      	movs	r0, r5
 8018102:	f7fd fad5 	bl	80156b0 <_free_r>
 8018106:	2300      	movs	r3, #0
 8018108:	6323      	str	r3, [r4, #48]	; 0x30
 801810a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801810c:	2900      	cmp	r1, #0
 801810e:	d004      	beq.n	801811a <_fclose_r+0x9e>
 8018110:	0028      	movs	r0, r5
 8018112:	f7fd facd 	bl	80156b0 <_free_r>
 8018116:	2300      	movs	r3, #0
 8018118:	6463      	str	r3, [r4, #68]	; 0x44
 801811a:	f7ff fbd9 	bl	80178d0 <__sfp_lock_acquire>
 801811e:	2300      	movs	r3, #0
 8018120:	81a3      	strh	r3, [r4, #12]
 8018122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018124:	07db      	lsls	r3, r3, #31
 8018126:	d402      	bmi.n	801812e <_fclose_r+0xb2>
 8018128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801812a:	f7fd fef4 	bl	8015f16 <__retarget_lock_release_recursive>
 801812e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018130:	f7fd feef 	bl	8015f12 <__retarget_lock_close_recursive>
 8018134:	f7ff fbd4 	bl	80178e0 <__sfp_lock_release>
 8018138:	e7a5      	b.n	8018086 <_fclose_r+0xa>
	...

0801813c <_fstat_r>:
 801813c:	2300      	movs	r3, #0
 801813e:	b570      	push	{r4, r5, r6, lr}
 8018140:	4d06      	ldr	r5, [pc, #24]	; (801815c <_fstat_r+0x20>)
 8018142:	0004      	movs	r4, r0
 8018144:	0008      	movs	r0, r1
 8018146:	0011      	movs	r1, r2
 8018148:	602b      	str	r3, [r5, #0]
 801814a:	f000 f84b 	bl	80181e4 <_fstat>
 801814e:	1c43      	adds	r3, r0, #1
 8018150:	d103      	bne.n	801815a <_fstat_r+0x1e>
 8018152:	682b      	ldr	r3, [r5, #0]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d000      	beq.n	801815a <_fstat_r+0x1e>
 8018158:	6023      	str	r3, [r4, #0]
 801815a:	bd70      	pop	{r4, r5, r6, pc}
 801815c:	20006e64 	.word	0x20006e64

08018160 <_isatty_r>:
 8018160:	2300      	movs	r3, #0
 8018162:	b570      	push	{r4, r5, r6, lr}
 8018164:	4d06      	ldr	r5, [pc, #24]	; (8018180 <_isatty_r+0x20>)
 8018166:	0004      	movs	r4, r0
 8018168:	0008      	movs	r0, r1
 801816a:	602b      	str	r3, [r5, #0]
 801816c:	f000 f84a 	bl	8018204 <_isatty>
 8018170:	1c43      	adds	r3, r0, #1
 8018172:	d103      	bne.n	801817c <_isatty_r+0x1c>
 8018174:	682b      	ldr	r3, [r5, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d000      	beq.n	801817c <_isatty_r+0x1c>
 801817a:	6023      	str	r3, [r4, #0]
 801817c:	bd70      	pop	{r4, r5, r6, pc}
 801817e:	46c0      	nop			; (mov r8, r8)
 8018180:	20006e64 	.word	0x20006e64

08018184 <_lseek_r>:
 8018184:	b570      	push	{r4, r5, r6, lr}
 8018186:	0004      	movs	r4, r0
 8018188:	0008      	movs	r0, r1
 801818a:	0011      	movs	r1, r2
 801818c:	001a      	movs	r2, r3
 801818e:	2300      	movs	r3, #0
 8018190:	4d05      	ldr	r5, [pc, #20]	; (80181a8 <_lseek_r+0x24>)
 8018192:	602b      	str	r3, [r5, #0]
 8018194:	f000 f846 	bl	8018224 <_lseek>
 8018198:	1c43      	adds	r3, r0, #1
 801819a:	d103      	bne.n	80181a4 <_lseek_r+0x20>
 801819c:	682b      	ldr	r3, [r5, #0]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d000      	beq.n	80181a4 <_lseek_r+0x20>
 80181a2:	6023      	str	r3, [r4, #0]
 80181a4:	bd70      	pop	{r4, r5, r6, pc}
 80181a6:	46c0      	nop			; (mov r8, r8)
 80181a8:	20006e64 	.word	0x20006e64

080181ac <_read_r>:
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	0004      	movs	r4, r0
 80181b0:	0008      	movs	r0, r1
 80181b2:	0011      	movs	r1, r2
 80181b4:	001a      	movs	r2, r3
 80181b6:	2300      	movs	r3, #0
 80181b8:	4d05      	ldr	r5, [pc, #20]	; (80181d0 <_read_r+0x24>)
 80181ba:	602b      	str	r3, [r5, #0]
 80181bc:	f000 f83a 	bl	8018234 <_read>
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	d103      	bne.n	80181cc <_read_r+0x20>
 80181c4:	682b      	ldr	r3, [r5, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d000      	beq.n	80181cc <_read_r+0x20>
 80181ca:	6023      	str	r3, [r4, #0]
 80181cc:	bd70      	pop	{r4, r5, r6, pc}
 80181ce:	46c0      	nop			; (mov r8, r8)
 80181d0:	20006e64 	.word	0x20006e64

080181d4 <_close>:
 80181d4:	2258      	movs	r2, #88	; 0x58
 80181d6:	2001      	movs	r0, #1
 80181d8:	4b01      	ldr	r3, [pc, #4]	; (80181e0 <_close+0xc>)
 80181da:	4240      	negs	r0, r0
 80181dc:	601a      	str	r2, [r3, #0]
 80181de:	4770      	bx	lr
 80181e0:	20006e64 	.word	0x20006e64

080181e4 <_fstat>:
 80181e4:	2258      	movs	r2, #88	; 0x58
 80181e6:	2001      	movs	r0, #1
 80181e8:	4b01      	ldr	r3, [pc, #4]	; (80181f0 <_fstat+0xc>)
 80181ea:	4240      	negs	r0, r0
 80181ec:	601a      	str	r2, [r3, #0]
 80181ee:	4770      	bx	lr
 80181f0:	20006e64 	.word	0x20006e64

080181f4 <_getpid>:
 80181f4:	2258      	movs	r2, #88	; 0x58
 80181f6:	2001      	movs	r0, #1
 80181f8:	4b01      	ldr	r3, [pc, #4]	; (8018200 <_getpid+0xc>)
 80181fa:	4240      	negs	r0, r0
 80181fc:	601a      	str	r2, [r3, #0]
 80181fe:	4770      	bx	lr
 8018200:	20006e64 	.word	0x20006e64

08018204 <_isatty>:
 8018204:	2258      	movs	r2, #88	; 0x58
 8018206:	4b02      	ldr	r3, [pc, #8]	; (8018210 <_isatty+0xc>)
 8018208:	2000      	movs	r0, #0
 801820a:	601a      	str	r2, [r3, #0]
 801820c:	4770      	bx	lr
 801820e:	46c0      	nop			; (mov r8, r8)
 8018210:	20006e64 	.word	0x20006e64

08018214 <_kill>:
 8018214:	2258      	movs	r2, #88	; 0x58
 8018216:	2001      	movs	r0, #1
 8018218:	4b01      	ldr	r3, [pc, #4]	; (8018220 <_kill+0xc>)
 801821a:	4240      	negs	r0, r0
 801821c:	601a      	str	r2, [r3, #0]
 801821e:	4770      	bx	lr
 8018220:	20006e64 	.word	0x20006e64

08018224 <_lseek>:
 8018224:	2258      	movs	r2, #88	; 0x58
 8018226:	2001      	movs	r0, #1
 8018228:	4b01      	ldr	r3, [pc, #4]	; (8018230 <_lseek+0xc>)
 801822a:	4240      	negs	r0, r0
 801822c:	601a      	str	r2, [r3, #0]
 801822e:	4770      	bx	lr
 8018230:	20006e64 	.word	0x20006e64

08018234 <_read>:
 8018234:	2258      	movs	r2, #88	; 0x58
 8018236:	2001      	movs	r0, #1
 8018238:	4b01      	ldr	r3, [pc, #4]	; (8018240 <_read+0xc>)
 801823a:	4240      	negs	r0, r0
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	4770      	bx	lr
 8018240:	20006e64 	.word	0x20006e64

08018244 <_sbrk>:
 8018244:	4a05      	ldr	r2, [pc, #20]	; (801825c <_sbrk+0x18>)
 8018246:	0003      	movs	r3, r0
 8018248:	6811      	ldr	r1, [r2, #0]
 801824a:	2900      	cmp	r1, #0
 801824c:	d101      	bne.n	8018252 <_sbrk+0xe>
 801824e:	4904      	ldr	r1, [pc, #16]	; (8018260 <_sbrk+0x1c>)
 8018250:	6011      	str	r1, [r2, #0]
 8018252:	6810      	ldr	r0, [r2, #0]
 8018254:	18c3      	adds	r3, r0, r3
 8018256:	6013      	str	r3, [r2, #0]
 8018258:	4770      	bx	lr
 801825a:	46c0      	nop			; (mov r8, r8)
 801825c:	200068c0 	.word	0x200068c0
 8018260:	20006e68 	.word	0x20006e68

08018264 <_write>:
 8018264:	2258      	movs	r2, #88	; 0x58
 8018266:	2001      	movs	r0, #1
 8018268:	4b01      	ldr	r3, [pc, #4]	; (8018270 <_write+0xc>)
 801826a:	4240      	negs	r0, r0
 801826c:	601a      	str	r2, [r3, #0]
 801826e:	4770      	bx	lr
 8018270:	20006e64 	.word	0x20006e64

08018274 <_exit>:
 8018274:	e7fe      	b.n	8018274 <_exit>
	...

08018278 <_init>:
 8018278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801827a:	46c0      	nop			; (mov r8, r8)
 801827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801827e:	bc08      	pop	{r3}
 8018280:	469e      	mov	lr, r3
 8018282:	4770      	bx	lr

08018284 <_fini>:
 8018284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018286:	46c0      	nop			; (mov r8, r8)
 8018288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801828a:	bc08      	pop	{r3}
 801828c:	469e      	mov	lr, r3
 801828e:	4770      	bx	lr
