
H1DR1x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000317c  08016d30  08016d30  00026d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019eac  08019eac  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  08019eac  08019eac  00029eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019eb4  08019eb4  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019eb4  08019eb4  00029eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019ebc  08019ebc  00029ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  08019ec0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  08019ec8  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000067c8  20000a78  0801a938  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20007240  0801a938  00037240  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054cf4  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000097a5  00000000  00000000  00085794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a878  00000000  00000000  0008ef39  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a68  00000000  00000000  000a97b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002ea0  00000000  00000000  000ab220  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017791  00000000  00000000  000ae0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a5e3  00000000  00000000  000c5851  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cfe34  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006368  00000000  00000000  000cfeb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08016d18 	.word	0x08016d18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08016d18 	.word	0x08016d18

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017384 	.word	0x08017384
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	080173c4 	.word	0x080173c4
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017404 	.word	0x08017404
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	46c6      	mov	lr, r8
 8002d28:	b500      	push	{lr}
 8002d2a:	0006      	movs	r6, r0
 8002d2c:	000d      	movs	r5, r1
 8002d2e:	4690      	mov	r8, r2
 8002d30:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002d32:	f00a f85f 	bl	800cdf4 <GetUart>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d01c      	beq.n	8002d74 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <Send_BOS_Message+0x60>)
 8002d3c:	00b2      	lsls	r2, r6, #2
 8002d3e:	58d0      	ldr	r0, [r2, r3]
 8002d40:	0021      	movs	r1, r4
 8002d42:	f00a f9c9 	bl	800d0d8 <osSemaphoreWait>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d114      	bne.n	8002d74 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <Send_BOS_Message+0x50>
 8002d50:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d52:	0030      	movs	r0, r6
 8002d54:	f00a f84e 	bl	800cdf4 <GetUart>
 8002d58:	0029      	movs	r1, r5
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f00e fcac 	bl	80116b8 <HAL_UART_Transmit_IT>
			for(uint8_t i=0;i<n;i++)
 8002d60:	3401      	adds	r4, #1
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d62:	0007      	movs	r7, r0
			for(uint8_t i=0;i<n;i++)
 8002d64:	b2e4      	uxtb	r4, r4
				buffer++;
				//Delay_us(500);
				Delay_ms(2);
 8002d66:	2002      	movs	r0, #2
				buffer++;
 8002d68:	3501      	adds	r5, #1
				Delay_ms(2);
 8002d6a:	f00c f80f 	bl	800ed8c <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002d6e:	4544      	cmp	r4, r8
 8002d70:	d3ef      	bcc.n	8002d52 <Send_BOS_Message+0x2e>
 8002d72:	e000      	b.n	8002d76 <Send_BOS_Message+0x52>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d74:	2701      	movs	r7, #1
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002d76:	200a      	movs	r0, #10
 8002d78:	f00c f808 	bl	800ed8c <HAL_Delay>
	return result;
}
 8002d7c:	0038      	movs	r0, r7
 8002d7e:	bc04      	pop	{r2}
 8002d80:	4690      	mov	r8, r2
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d84:	20006d04 	.word	0x20006d04

08002d88 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8e:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d90:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d92:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d035      	beq.n	8002e04 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d98:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d9a:	d02c      	beq.n	8002df6 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <LoadROtopology+0x94>)
 8002d9e:	b2f6      	uxtb	r6, r6
 8002da0:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <LoadROtopology+0x98>)
 8002da4:	7013      	strb	r3, [r2, #0]
 8002da6:	466b      	mov	r3, sp
 8002da8:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002daa:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002dac:	2202      	movs	r2, #2
 8002dae:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002db0:	469c      	mov	ip, r3
 8002db2:	4d1c      	ldr	r5, [pc, #112]	; (8002e24 <LoadROtopology+0x9c>)
 8002db4:	4663      	mov	r3, ip
 8002db6:	700b      	strb	r3, [r1, #0]
 8002db8:	780b      	ldrb	r3, [r1, #0]
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d814      	bhi.n	8002de8 <LoadROtopology+0x60>
 8002dbe:	1e63      	subs	r3, r4, #1
 8002dc0:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002dc2:	18c0      	adds	r0, r0, r3
 8002dc4:	0040      	lsls	r0, r0, #1
 8002dc6:	18c0      	adds	r0, r0, r3
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <LoadROtopology+0x8c>)
 8002dca:	18d7      	adds	r7, r2, r3
 8002dcc:	780b      	ldrb	r3, [r1, #0]
 8002dce:	883f      	ldrh	r7, [r7, #0]
 8002dd0:	18c3      	adds	r3, r0, r3
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dd6:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002dd8:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	700b      	strb	r3, [r1, #0]
 8002de0:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002de2:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	d9ef      	bls.n	8002dc8 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	42b4      	cmp	r4, r6
 8002dee:	d9e1      	bls.n	8002db4 <LoadROtopology+0x2c>
 8002df0:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002df2:	b003      	add	sp, #12
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002df6:	2101      	movs	r1, #1
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002dfa:	2601      	movs	r6, #1
			N =1;
 8002dfc:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <LoadROtopology+0x98>)
 8002e00:	7013      	strb	r3, [r2, #0]
 8002e02:	e7d0      	b.n	8002da6 <LoadROtopology+0x1e>
		N =1;
 8002e04:	2201      	movs	r2, #1
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002e08:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002e0a:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <LoadROtopology+0x98>)
 8002e10:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002e12:	e7ee      	b.n	8002df2 <LoadROtopology+0x6a>
 8002e14:	0801d800 	.word	0x0801d800
 8002e18:	0000ffff 	.word	0x0000ffff
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	20000a98 	.word	0x20000a98
 8002e24:	20000f0c 	.word	0x20000f0c

08002e28 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	46c6      	mov	lr, r8
 8002e2c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002e2e:	4e0f      	ldr	r6, [pc, #60]	; (8002e6c <LoadEEportsDir+0x44>)
 8002e30:	7833      	ldrb	r3, [r6, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002e36:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002e38:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002e3a:	4698      	mov	r8, r3
 8002e3c:	4f0c      	ldr	r7, [pc, #48]	; (8002e70 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e3e:	1e61      	subs	r1, r4, #1
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	1c65      	adds	r5, r4, #1
 8002e44:	1879      	adds	r1, r7, r1
 8002e46:	b2a8      	uxth	r0, r5
 8002e48:	f007 fe14 	bl	800aa74 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e4c:	2c19      	cmp	r4, #25
 8002e4e:	d901      	bls.n	8002e54 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002e50:	230a      	movs	r3, #10
 8002e52:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002e54:	7833      	ldrb	r3, [r6, #0]
 8002e56:	b2ec      	uxtb	r4, r5
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d2f0      	bcs.n	8002e3e <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	bc04      	pop	{r2}
 8002e60:	4690      	mov	r8, r2
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	4698      	mov	r8, r3
 8002e68:	e7f8      	b.n	8002e5c <LoadEEportsDir+0x34>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	2000719c 	.word	0x2000719c

08002e74 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	464e      	mov	r6, r9
 8002e78:	46de      	mov	lr, fp
 8002e7a:	4657      	mov	r7, sl
 8002e7c:	4645      	mov	r5, r8
 8002e7e:	b5e0      	push	{r5, r6, r7, lr}
 8002e80:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e82:	466b      	mov	r3, sp
 8002e84:	1d9e      	adds	r6, r3, #6
 8002e86:	2300      	movs	r3, #0
 8002e88:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e8e:	241c      	movs	r4, #28
 8002e90:	469a      	mov	sl, r3
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <LoadEEalias+0x7c>)
 8002e94:	469b      	mov	fp, r3
 8002e96:	4643      	mov	r3, r8
 8002e98:	009f      	lsls	r7, r3, #2
 8002e9a:	18fd      	adds	r5, r7, r3
 8002e9c:	1d63      	adds	r3, r4, #5
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	006d      	lsls	r5, r5, #1
 8002ea4:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	0031      	movs	r1, r6
 8002eaa:	f007 fde3 	bl	800aa74 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002eae:	8833      	ldrh	r3, [r6, #0]
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	706b      	strb	r3, [r5, #1]
 8002eb4:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	702b      	strb	r3, [r5, #0]
 8002eba:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002ebc:	454c      	cmp	r4, r9
 8002ebe:	d1f2      	bne.n	8002ea6 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4447      	add	r7, r8
 8002ec4:	007f      	lsls	r7, r7, #1
 8002ec6:	4457      	add	r7, sl
 8002ec8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002eca:	4643      	mov	r3, r8
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	465b      	mov	r3, fp
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4543      	cmp	r3, r8
 8002ed8:	d2dd      	bcs.n	8002e96 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002eda:	2000      	movs	r0, #0
 8002edc:	b003      	add	sp, #12
 8002ede:	bc3c      	pop	{r2, r3, r4, r5}
 8002ee0:	4690      	mov	r8, r2
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	46a2      	mov	sl, r4
 8002ee6:	46ab      	mov	fp, r5
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000dfc 	.word	0x20000dfc
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	4646      	mov	r6, r8
 8002ef8:	46d6      	mov	lr, sl
 8002efa:	464f      	mov	r7, r9
 8002efc:	b5c0      	push	{r6, r7, lr}
 8002efe:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f00:	466b      	mov	r3, sp
 8002f02:	1d9e      	adds	r6, r3, #6
 8002f04:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002f06:	4c22      	ldr	r4, [pc, #136]	; (8002f90 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002f08:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002f0a:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002f0c:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03a      	beq.n	8002f88 <LoadEEgroup+0x94>
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f14:	2100      	movs	r1, #0
 8002f16:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f18:	1d1f      	adds	r7, r3, #4
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	30cb      	adds	r0, #203	; 0xcb
 8002f20:	1879      	adds	r1, r7, r1
 8002f22:	b280      	uxth	r0, r0
		add++;
 8002f24:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f26:	f007 fda5 	bl	800aa74 <EE_ReadVariable>
		add++;
 8002f2a:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002f2c:	7823      	ldrb	r3, [r4, #0]
 8002f2e:	b2e9      	uxtb	r1, r5
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d8f2      	bhi.n	8002f1a <LoadEEgroup+0x26>
 8002f34:	2338      	movs	r3, #56	; 0x38
 8002f36:	002c      	movs	r4, r5
 8002f38:	35cb      	adds	r5, #203	; 0xcb
 8002f3a:	469c      	mov	ip, r3
 8002f3c:	b2ab      	uxth	r3, r5
 8002f3e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f40:	2300      	movs	r3, #0
 8002f42:	469a      	mov	sl, r3
 8002f44:	3499      	adds	r4, #153	; 0x99
 8002f46:	44e1      	add	r9, ip
 8002f48:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002f4a:	464d      	mov	r5, r9
 8002f4c:	1d67      	adds	r7, r4, #5
 8002f4e:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f50:	0020      	movs	r0, r4
 8002f52:	0031      	movs	r1, r6
 8002f54:	f007 fd8e 	bl	800aa74 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f58:	8833      	ldrh	r3, [r6, #0]
 8002f5a:	3401      	adds	r4, #1
 8002f5c:	706b      	strb	r3, [r5, #1]
 8002f5e:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	702b      	strb	r3, [r5, #0]
 8002f64:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f66:	42bc      	cmp	r4, r7
 8002f68:	d1f2      	bne.n	8002f50 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	4652      	mov	r2, sl
 8002f6e:	725a      	strb	r2, [r3, #9]
 8002f70:	230a      	movs	r3, #10
 8002f72:	469c      	mov	ip, r3
 8002f74:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f76:	45a0      	cmp	r8, r4
 8002f78:	d1e7      	bne.n	8002f4a <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bc1c      	pop	{r2, r3, r4}
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	46a2      	mov	sl, r4
 8002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	e7d2      	b.n	8002f34 <LoadEEgroup+0x40>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000a98 	.word	0x20000a98

08002f98 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	46ce      	mov	lr, r9
 8002f9c:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f9e:	260e      	movs	r6, #14
 8002fa0:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fa6:	ac03      	add	r4, sp, #12
 8002fa8:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fae:	8023      	strh	r3, [r4, #0]
 8002fb0:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002fb2:	f007 fd5f 	bl	800aa74 <EE_ReadVariable>
	uint8_t direction =0;
 8002fb6:	2700      	movs	r7, #0
	if(!status1){
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d100      	bne.n	8002fbe <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002fbc:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	20e5      	movs	r0, #229	; 0xe5
 8002fc2:	f007 fd57 	bl	800aa74 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fc6:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fc8:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fca:	20e6      	movs	r0, #230	; 0xe6
 8002fcc:	f007 fd52 	bl	800aa74 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002fd0:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002fd6:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	d104      	bne.n	8002fe6 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002fdc:	8823      	ldrh	r3, [r4, #0]
 8002fde:	8832      	ldrh	r2, [r6, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	20e7      	movs	r0, #231	; 0xe7
 8002fea:	f007 fd43 	bl	800aa74 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002fee:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002ff0:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002ff2:	20e8      	movs	r0, #232	; 0xe8
 8002ff4:	f007 fd3e 	bl	800aa74 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002ff8:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002ffe:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003000:	2d00      	cmp	r5, #0
 8003002:	d104      	bne.n	800300e <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003004:	8823      	ldrh	r3, [r4, #0]
 8003006:	8832      	ldrh	r2, [r6, #0]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	4699      	mov	r9, r3
 800300c:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800300e:	0021      	movs	r1, r4
 8003010:	20e9      	movs	r0, #233	; 0xe9
 8003012:	f007 fd2f 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 8003016:	2800      	cmp	r0, #0
 8003018:	d030      	beq.n	800307c <LoadEEstreams+0xe4>
 800301a:	4d26      	ldr	r5, [pc, #152]	; (80030b4 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800301c:	0021      	movs	r1, r4
 800301e:	20ea      	movs	r0, #234	; 0xea
 8003020:	f007 fd28 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 8003024:	2800      	cmp	r0, #0
 8003026:	d103      	bne.n	8003030 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8003028:	8823      	ldrh	r3, [r4, #0]
 800302a:	0a1a      	lsrs	r2, r3, #8
 800302c:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 800302e:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003030:	0021      	movs	r1, r4
 8003032:	20eb      	movs	r0, #235	; 0xeb
 8003034:	f007 fd1e 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 8003038:	2800      	cmp	r0, #0
 800303a:	d105      	bne.n	8003048 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 800303c:	2220      	movs	r2, #32
 800303e:	8823      	ldrh	r3, [r4, #0]
 8003040:	0a19      	lsrs	r1, r3, #8
 8003042:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8003044:	3201      	adds	r2, #1
 8003046:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003048:	7f2b      	ldrb	r3, [r5, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <LoadEEstreams+0xbc>
 800304e:	7f6a      	ldrb	r2, [r5, #29]
 8003050:	2a00      	cmp	r2, #0
 8003052:	d120      	bne.n	8003096 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003054:	7fab      	ldrb	r3, [r5, #30]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <LoadEEstreams+0xc8>
 800305a:	7fea      	ldrb	r2, [r5, #31]
 800305c:	2a00      	cmp	r2, #0
 800305e:	d121      	bne.n	80030a4 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003060:	2320      	movs	r3, #32
 8003062:	5ceb      	ldrb	r3, [r5, r3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <LoadEEstreams+0xd8>
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	5caa      	ldrb	r2, [r5, r2]
 800306c:	2a00      	cmp	r2, #0
 800306e:	d10b      	bne.n	8003088 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003070:	2000      	movs	r0, #0
 8003072:	b005      	add	sp, #20
 8003074:	bc0c      	pop	{r2, r3}
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 800307c:	8823      	ldrh	r3, [r4, #0]
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <LoadEEstreams+0x11c>)
 8003080:	0a1a      	lsrs	r2, r3, #8
 8003082:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003084:	776b      	strb	r3, [r5, #29]
 8003086:	e7c9      	b.n	800301c <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	4641      	mov	r1, r8
 800308c:	464a      	mov	r2, r9
 800308e:	0038      	movs	r0, r7
 8003090:	f004 fd14 	bl	8007abc <SetupDMAStreams>
 8003094:	e7ec      	b.n	8003070 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	4641      	mov	r1, r8
 800309a:	464a      	mov	r2, r9
 800309c:	0038      	movs	r0, r7
 800309e:	f004 fd0d 	bl	8007abc <SetupDMAStreams>
 80030a2:	e7d7      	b.n	8003054 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	4641      	mov	r1, r8
 80030a8:	464a      	mov	r2, r9
 80030aa:	0038      	movs	r0, r7
 80030ac:	f004 fd06 	bl	8007abc <SetupDMAStreams>
 80030b0:	e7d6      	b.n	8003060 <LoadEEstreams+0xc8>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000b18 	.word	0x20000b18

080030b8 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030b8:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030be:	ac01      	add	r4, sp, #4
 80030c0:	0021      	movs	r1, r4
 80030c2:	0040      	lsls	r0, r0, #1
 80030c4:	f007 fcd6 	bl	800aa74 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d15d      	bne.n	8003188 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030cc:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80030ce:	8823      	ldrh	r3, [r4, #0]
 80030d0:	4d54      	ldr	r5, [pc, #336]	; (8003224 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d2:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80030d4:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d6:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030dc:	f007 fcca 	bl	800aa74 <EE_ReadVariable>

	if(!status1){
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d15e      	bne.n	80031a2 <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e4:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030e6:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e8:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030ea:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030ec:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ee:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030f0:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030f2:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030f4:	f007 fcbe 	bl	800aa74 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 80030f8:	4d4b      	ldr	r5, [pc, #300]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d15e      	bne.n	80031bc <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030fe:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003100:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003102:	0021      	movs	r1, r4
 8003104:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 8003106:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003108:	f007 fcb4 	bl	800aa74 <EE_ReadVariable>
	if(!status1)
 800310c:	2800      	cmp	r0, #0
 800310e:	d15f      	bne.n	80031d0 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003110:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003112:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003114:	0021      	movs	r1, r4
 8003116:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 8003118:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800311a:	f007 fcab 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 800311e:	2800      	cmp	r0, #0
 8003120:	d160      	bne.n	80031e4 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003122:	8823      	ldrh	r3, [r4, #0]
 8003124:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800312a:	208c      	movs	r0, #140	; 0x8c
 800312c:	0021      	movs	r1, r4
 800312e:	0040      	lsls	r0, r0, #1
 8003130:	f007 fca0 	bl	800aa74 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003134:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003136:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003138:	201a      	movs	r0, #26
 800313a:	1d99      	adds	r1, r3, #6
 800313c:	30ff      	adds	r0, #255	; 0xff
 800313e:	f007 fc99 	bl	800aa74 <EE_ReadVariable>
	if(!status1 && !status2){
 8003142:	4306      	orrs	r6, r0
 8003144:	b2b6      	uxth	r6, r6
 8003146:	2e00      	cmp	r6, #0
 8003148:	d15f      	bne.n	800320a <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800314a:	466b      	mov	r3, sp
 800314c:	88db      	ldrh	r3, [r3, #6]
 800314e:	8822      	ldrh	r2, [r4, #0]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	4313      	orrs	r3, r2
 8003154:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003156:	208d      	movs	r0, #141	; 0x8d
 8003158:	0021      	movs	r1, r4
 800315a:	0040      	lsls	r0, r0, #1
 800315c:	f007 fc8a 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 8003160:	2800      	cmp	r0, #0
 8003162:	d145      	bne.n	80031f0 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003164:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003166:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003168:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 800316a:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800316c:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003172:	f007 fc7f 	bl	800aa74 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003176:	2800      	cmp	r0, #0
 8003178:	d044      	beq.n	8003204 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800317a:	2326      	movs	r3, #38	; 0x26
 800317c:	4a2b      	ldr	r2, [pc, #172]	; (800322c <LoadEEparams+0x174>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 8003182:	2000      	movs	r0, #0
 8003184:	b002      	add	sp, #8
 8003186:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003188:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <LoadEEparams+0x174>)
 800318c:	4d25      	ldr	r5, [pc, #148]	; (8003224 <LoadEEparams+0x16c>)
 800318e:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003190:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 8003192:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003194:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003196:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003198:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800319a:	f007 fc6b 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0a0      	beq.n	80030e4 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a2:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a6:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a8:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031aa:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031ac:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031ae:	895b      	ldrh	r3, [r3, #10]
 80031b0:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031b2:	f007 fc5f 	bl	800aa74 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80031b6:	4d1c      	ldr	r5, [pc, #112]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0a0      	beq.n	80030fe <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031bc:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c0:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c2:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c4:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c6:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c8:	f007 fc54 	bl	800aa74 <EE_ReadVariable>
	if(!status1)
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d09f      	beq.n	8003110 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d0:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d4:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d6:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d8:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031da:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031dc:	f007 fc4a 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d09e      	beq.n	8003122 <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <LoadEEparams+0x174>)
 80031e6:	7c1a      	ldrb	r2, [r3, #16]
 80031e8:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031ea:	7c5b      	ldrb	r3, [r3, #17]
 80031ec:	716b      	strb	r3, [r5, #5]
 80031ee:	e79c      	b.n	800312a <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f0:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f2:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f8:	0021      	movs	r1, r4
 80031fa:	30ff      	adds	r0, #255	; 0xff
 80031fc:	f007 fc3a 	bl	800aa74 <EE_ReadVariable>
	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d1ba      	bne.n	800317a <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003204:	8823      	ldrh	r3, [r4, #0]
 8003206:	76ab      	strb	r3, [r5, #26]
 8003208:	e7bb      	b.n	8003182 <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 800320a:	2322      	movs	r3, #34	; 0x22
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <LoadEEparams+0x178>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003214:	23e1      	movs	r3, #225	; 0xe1
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	60ab      	str	r3, [r5, #8]
 800321a:	e79c      	b.n	8003156 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <LoadEEparams+0x174>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	60ab      	str	r3, [r5, #8]
 8003222:	e798      	b.n	8003156 <LoadEEparams+0x9e>
 8003224:	20006c00 	.word	0x20006c00
 8003228:	20006c80 	.word	0x20006c80
 800322c:	20000008 	.word	0x20000008
 8003230:	20000b18 	.word	0x20000b18

08003234 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	46de      	mov	lr, fp
 8003238:	4657      	mov	r7, sl
 800323a:	464e      	mov	r6, r9
 800323c:	4645      	mov	r5, r8
 800323e:	b5e0      	push	{r5, r6, r7, lr}
 8003240:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003242:	ab02      	add	r3, sp, #8
 8003244:	469c      	mov	ip, r3
 8003246:	261e      	movs	r6, #30
 8003248:	2300      	movs	r3, #0
 800324a:	4466      	add	r6, ip
 800324c:	8033      	strh	r3, [r6, #0]
 800324e:	330f      	adds	r3, #15
 8003250:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003252:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003254:	2501      	movs	r5, #1
 8003256:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003258:	469b      	mov	fp, r3
 800325a:	e004      	b.n	8003266 <LoadEEbuttons+0x32>
 800325c:	3404      	adds	r4, #4
 800325e:	3501      	adds	r5, #1
 8003260:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003262:	2d08      	cmp	r5, #8
 8003264:	d05e      	beq.n	8003324 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003266:	0031      	movs	r1, r6
 8003268:	0020      	movs	r0, r4
 800326a:	f007 fc03 	bl	800aa74 <EE_ReadVariable>
 800326e:	b2eb      	uxtb	r3, r5
 8003270:	1e07      	subs	r7, r0, #0
 8003272:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003274:	d1f2      	bne.n	800325c <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003276:	8832      	ldrh	r2, [r6, #0]
 8003278:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800327a:	0919      	lsrs	r1, r3, #4
 800327c:	42a9      	cmp	r1, r5
 800327e:	d1ed      	bne.n	800325c <LoadEEbuttons+0x28>
 8003280:	4651      	mov	r1, sl
 8003282:	400b      	ands	r3, r1
 8003284:	d0ea      	beq.n	800325c <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003286:	482b      	ldr	r0, [pc, #172]	; (8003334 <LoadEEbuttons+0x100>)
 8003288:	00e9      	lsls	r1, r5, #3
 800328a:	4680      	mov	r8, r0
 800328c:	1949      	adds	r1, r1, r5
 800328e:	4488      	add	r8, r1
 8003290:	4641      	mov	r1, r8
 8003292:	00a8      	lsls	r0, r5, #2
 8003294:	704b      	strb	r3, [r1, #1]
 8003296:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003298:	0018      	movs	r0, r3
 800329a:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 800329c:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800329e:	b280      	uxth	r0, r0
 80032a0:	0031      	movs	r1, r6
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	f007 fbe6 	bl	800aa74 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032a8:	4641      	mov	r1, r8
 80032aa:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032ac:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032ae:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b0:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032b2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80032b4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b6:	b280      	uxth	r0, r0
 80032b8:	0031      	movs	r1, r6
 80032ba:	f007 fbdb 	bl	800aa74 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032be:	4641      	mov	r1, r8
 80032c0:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c2:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c4:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c6:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80032ca:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032cc:	b280      	uxth	r0, r0
 80032ce:	0031      	movs	r1, r6
 80032d0:	f007 fbd0 	bl	800aa74 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032d4:	4641      	mov	r1, r8
 80032d6:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80032d8:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032da:	0a1a      	lsrs	r2, r3, #8
 80032dc:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032de:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 80032e0:	4649      	mov	r1, r9
 80032e2:	f007 ff89 	bl	800b1f8 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032e6:	4643      	mov	r3, r8
 80032e8:	4658      	mov	r0, fp
 80032ea:	7a19      	ldrb	r1, [r3, #8]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	104a      	asrs	r2, r1, #1
 80032f0:	4002      	ands	r2, r0
 80032f2:	4001      	ands	r1, r0
 80032f4:	4640      	mov	r0, r8
 80032f6:	9705      	str	r7, [sp, #20]
 80032f8:	79c0      	ldrb	r0, [r0, #7]
 80032fa:	3404      	adds	r4, #4
 80032fc:	9004      	str	r0, [sp, #16]
 80032fe:	4640      	mov	r0, r8
 8003300:	7980      	ldrb	r0, [r0, #6]
 8003302:	3501      	adds	r5, #1
 8003304:	9003      	str	r0, [sp, #12]
 8003306:	4640      	mov	r0, r8
 8003308:	7940      	ldrb	r0, [r0, #5]
 800330a:	b2a4      	uxth	r4, r4
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	4640      	mov	r0, r8
 8003310:	7900      	ldrb	r0, [r0, #4]
 8003312:	9001      	str	r0, [sp, #4]
 8003314:	4640      	mov	r0, r8
 8003316:	78c0      	ldrb	r0, [r0, #3]
 8003318:	9000      	str	r0, [sp, #0]
 800331a:	4648      	mov	r0, r9
 800331c:	f008 f876 	bl	800b40c <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003320:	2d08      	cmp	r5, #8
 8003322:	d1a0      	bne.n	8003266 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 8003324:	2000      	movs	r0, #0
 8003326:	b00b      	add	sp, #44	; 0x2c
 8003328:	bc3c      	pop	{r2, r3, r4, r5}
 800332a:	4690      	mov	r8, r2
 800332c:	4699      	mov	r9, r3
 800332e:	46a2      	mov	sl, r4
 8003330:	46ab      	mov	fp, r5
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	200027c8 	.word	0x200027c8

08003338 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	46de      	mov	lr, fp
 800333c:	4645      	mov	r5, r8
 800333e:	4657      	mov	r7, sl
 8003340:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003342:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003344:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003346:	f00e fed1 	bl	80120ec <malloc>
 800334a:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 800334c:	d065      	beq.n	800341a <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800334e:	4c3b      	ldr	r4, [pc, #236]	; (800343c <LoadROsnippets+0x104>)
		return BOS_ERROR;
 8003350:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003352:	7822      	ldrb	r2, [r4, #0]
 8003354:	2afe      	cmp	r2, #254	; 0xfe
 8003356:	d156      	bne.n	8003406 <LoadROsnippets+0xce>
 8003358:	1c6b      	adds	r3, r5, #1
 800335a:	4698      	mov	r8, r3
 800335c:	2364      	movs	r3, #100	; 0x64
 800335e:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <LoadROsnippets+0x108>)
 8003362:	4e38      	ldr	r6, [pc, #224]	; (8003444 <LoadROsnippets+0x10c>)
 8003364:	469b      	mov	fp, r3
 8003366:	44b1      	add	r9, r6
 8003368:	0020      	movs	r0, r4
 800336a:	46a2      	mov	sl, r4
 800336c:	3014      	adds	r0, #20
 800336e:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003370:	7822      	ldrb	r2, [r4, #0]
 8003372:	550a      	strb	r2, [r1, r4]
 8003374:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003376:	4284      	cmp	r4, r0
 8003378:	d1fa      	bne.n	8003370 <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800337a:	2214      	movs	r2, #20
 800337c:	4641      	mov	r1, r8
 800337e:	0030      	movs	r0, r6
 8003380:	f00f f901 	bl	8012586 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003384:	2100      	movs	r1, #0
 8003386:	2214      	movs	r2, #20
 8003388:	0028      	movs	r0, r5
 800338a:	f00f f905 	bl	8012598 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800338e:	7821      	ldrb	r1, [r4, #0]
 8003390:	1c8b      	adds	r3, r1, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d942      	bls.n	800341e <LoadROsnippets+0xe6>
 8003398:	4657      	mov	r7, sl
 800339a:	0028      	movs	r0, r5
 800339c:	3746      	adds	r7, #70	; 0x46
		i =0;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <LoadROsnippets+0x70>
 80033a2:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a4:	42a7      	cmp	r7, r4
 80033a6:	d034      	beq.n	8003412 <LoadROsnippets+0xda>
			++currentAdd;
 80033a8:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033aa:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ac:	7821      	ldrb	r1, [r4, #0]
			++i;
 80033ae:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b0:	1c8a      	adds	r2, r1, #2
 80033b2:	b2d2      	uxtb	r2, r2
			++i;
 80033b4:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b6:	2a01      	cmp	r2, #1
 80033b8:	d8f3      	bhi.n	80033a2 <LoadROsnippets+0x6a>
 80033ba:	469a      	mov	sl, r3
 80033bc:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80033be:	5caa      	ldrb	r2, [r5, r2]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d002      	beq.n	80033ca <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80033ca:	4650      	mov	r0, sl
 80033cc:	f00e fe8e 	bl	80120ec <malloc>
 80033d0:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d028      	beq.n	8003428 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80033d6:	4652      	mov	r2, sl
 80033d8:	0029      	movs	r1, r5
 80033da:	f00f f8d4 	bl	8012586 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033de:	465b      	mov	r3, fp
 80033e0:	465a      	mov	r2, fp
 80033e2:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 80033e4:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033e6:	3301      	adds	r3, #1
 80033e8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80033ea:	0028      	movs	r0, r5
 80033ec:	4652      	mov	r2, sl
 80033ee:	f00f f8d3 	bl	8012598 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80033f2:	7823      	ldrb	r3, [r4, #0]
 80033f4:	2bfe      	cmp	r3, #254	; 0xfe
 80033f6:	d102      	bne.n	80033fe <LoadROsnippets+0xc6>
 80033f8:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80033fa:	45b1      	cmp	r9, r6
 80033fc:	d1b4      	bne.n	8003368 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 80033fe:	0028      	movs	r0, r5
 8003400:	f00e fe7e 	bl	8012100 <free>
	return BOS_OK;
 8003404:	2000      	movs	r0, #0
}
 8003406:	bc3c      	pop	{r2, r3, r4, r5}
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	46a2      	mov	sl, r4
 800340e:	46ab      	mov	fp, r5
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003412:	2332      	movs	r3, #50	; 0x32
 8003414:	2231      	movs	r2, #49	; 0x31
 8003416:	469a      	mov	sl, r3
 8003418:	e7d1      	b.n	80033be <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 800341a:	20fb      	movs	r0, #251	; 0xfb
 800341c:	e7f3      	b.n	8003406 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800341e:	2201      	movs	r2, #1
 8003420:	2300      	movs	r3, #0
 8003422:	4252      	negs	r2, r2
 8003424:	469a      	mov	sl, r3
 8003426:	e7ca      	b.n	80033be <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003428:	2214      	movs	r2, #20
 800342a:	2100      	movs	r1, #0
 800342c:	0030      	movs	r0, r6
 800342e:	f00f f8b3 	bl	8012598 <memset>
			free(snipBuffer);
 8003432:	0028      	movs	r0, r5
 8003434:	f00e fe64 	bl	8012100 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003438:	200e      	movs	r0, #14
 800343a:	e7e4      	b.n	8003406 <LoadROsnippets+0xce>
 800343c:	0801dc00 	.word	0x0801dc00
 8003440:	2000182c 	.word	0x2000182c
 8003444:	20006c9c 	.word	0x20006c9c

08003448 <LoadEEvars>:
void LoadEEvars(void){
 8003448:	b510      	push	{r4, lr}
	LoadROtopology();
 800344a:	f7ff fc9d 	bl	8002d88 <LoadROtopology>
	LoadEEportsDir();
 800344e:	f7ff fceb 	bl	8002e28 <LoadEEportsDir>
	LoadEEalias();
 8003452:	f7ff fd0f 	bl	8002e74 <LoadEEalias>
	LoadEEgroup();
 8003456:	f7ff fd4d 	bl	8002ef4 <LoadEEgroup>
	LoadEEstreams();
 800345a:	f7ff fd9d 	bl	8002f98 <LoadEEstreams>
	LoadEEparams();
 800345e:	f7ff fe2b 	bl	80030b8 <LoadEEparams>
	LoadEEbuttons();
 8003462:	f7ff fee7 	bl	8003234 <LoadEEbuttons>
	LoadROsnippets();
 8003466:	f7ff ff67 	bl	8003338 <LoadROsnippets>
}
 800346a:	bd10      	pop	{r4, pc}

0800346c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	46c6      	mov	lr, r8
 8003470:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003472:	4e10      	ldr	r6, [pc, #64]	; (80034b4 <SaveEEportsDir+0x48>)
 8003474:	7833      	ldrb	r3, [r6, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800347a:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800347c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800347e:	4698      	mov	r8, r3
 8003480:	4f0d      	ldr	r7, [pc, #52]	; (80034b8 <SaveEEportsDir+0x4c>)
 8003482:	e007      	b.n	8003494 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003484:	2c19      	cmp	r4, #25
 8003486:	d901      	bls.n	800348c <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003488:	230a      	movs	r3, #10
 800348a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800348c:	7833      	ldrb	r3, [r6, #0]
 800348e:	b2ec      	uxtb	r4, r5
 8003490:	42a3      	cmp	r3, r4
 8003492:	d30b      	bcc.n	80034ac <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003494:	1e63      	subs	r3, r4, #1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	5af9      	ldrh	r1, [r7, r3]
 800349a:	1c65      	adds	r5, r4, #1
 800349c:	2900      	cmp	r1, #0
 800349e:	d0f1      	beq.n	8003484 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80034a0:	b2a8      	uxth	r0, r5
 80034a2:	f007 fb17 	bl	800aad4 <EE_WriteVariable>
 80034a6:	e7ed      	b.n	8003484 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	4698      	mov	r8, r3
	}
	
	return result;
}
 80034ac:	4640      	mov	r0, r8
 80034ae:	bc04      	pop	{r2}
 80034b0:	4690      	mov	r8, r2
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	20000008 	.word	0x20000008
 80034b8:	2000719c 	.word	0x2000719c

080034bc <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80034bc:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80034be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c0:	4646      	mov	r6, r8
 80034c2:	46d6      	mov	lr, sl
 80034c4:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80034c6:	4698      	mov	r8, r3
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80034ca:	b5c0      	push	{r6, r7, lr}
 80034cc:	4699      	mov	r9, r3
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034d0:	2600      	movs	r6, #0
 80034d2:	469a      	mov	sl, r3
 80034d4:	e005      	b.n	80034e2 <SaveEEalias+0x26>
 80034d6:	4653      	mov	r3, sl
 80034d8:	3601      	adds	r6, #1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2f6      	uxtb	r6, r6
 80034de:	42b3      	cmp	r3, r6
 80034e0:	d325      	bcc.n	800352e <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 80034e2:	464b      	mov	r3, r9
 80034e4:	00b4      	lsls	r4, r6, #2
 80034e6:	19a4      	adds	r4, r4, r6
 80034e8:	0064      	lsls	r4, r4, #1
 80034ea:	5d1b      	ldrb	r3, [r3, r4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f2      	beq.n	80034d6 <SaveEEalias+0x1a>
 80034f0:	4645      	mov	r5, r8
 80034f2:	4647      	mov	r7, r8
 80034f4:	351c      	adds	r5, #28
 80034f6:	3721      	adds	r7, #33	; 0x21
 80034f8:	444c      	add	r4, r9
 80034fa:	b2ad      	uxth	r5, r5
 80034fc:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034fe:	7861      	ldrb	r1, [r4, #1]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003504:	0028      	movs	r0, r5
 8003506:	3501      	adds	r5, #1
 8003508:	b289      	uxth	r1, r1
 800350a:	b2ad      	uxth	r5, r5
 800350c:	f007 fae2 	bl	800aad4 <EE_WriteVariable>
 8003510:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003512:	42bd      	cmp	r5, r7
 8003514:	d001      	beq.n	800351a <SaveEEalias+0x5e>
 8003516:	7823      	ldrb	r3, [r4, #0]
 8003518:	e7f1      	b.n	80034fe <SaveEEalias+0x42>
 800351a:	4643      	mov	r3, r8
 800351c:	3305      	adds	r3, #5
 800351e:	b29b      	uxth	r3, r3
 8003520:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003522:	4653      	mov	r3, sl
 8003524:	3601      	adds	r6, #1
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2f6      	uxtb	r6, r6
 800352a:	42b3      	cmp	r3, r6
 800352c:	d2d9      	bcs.n	80034e2 <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 800352e:	2000      	movs	r0, #0
 8003530:	bc1c      	pop	{r2, r3, r4}
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	46a2      	mov	sl, r4
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000dfc 	.word	0x20000dfc
 8003540:	20000008 	.word	0x20000008

08003544 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	46de      	mov	lr, fp
 8003548:	4657      	mov	r7, sl
 800354a:	464e      	mov	r6, r9
 800354c:	4645      	mov	r5, r8
 800354e:	468b      	mov	fp, r1
 8003550:	b5e0      	push	{r5, r6, r7, lr}
 8003552:	001e      	movs	r6, r3
 8003554:	ab0a      	add	r3, sp, #40	; 0x28
 8003556:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003558:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800355a:	469a      	mov	sl, r3
 800355c:	ab0b      	add	r3, sp, #44	; 0x2c
 800355e:	781d      	ldrb	r5, [r3, #0]
 8003560:	ab0c      	add	r3, sp, #48	; 0x30
 8003562:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003564:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003566:	4698      	mov	r8, r3
 8003568:	ab0d      	add	r3, sp, #52	; 0x34
 800356a:	781c      	ldrb	r4, [r3, #0]
 800356c:	ab0e      	add	r3, sp, #56	; 0x38
 800356e:	4691      	mov	r9, r2
 8003570:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003572:	f007 faaf 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003576:	465b      	mov	r3, fp
 8003578:	0a19      	lsrs	r1, r3, #8
 800357a:	b289      	uxth	r1, r1
 800357c:	20e5      	movs	r0, #229	; 0xe5
 800357e:	f007 faa9 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003582:	465b      	mov	r3, fp
 8003584:	20e6      	movs	r0, #230	; 0xe6
 8003586:	b299      	uxth	r1, r3
 8003588:	f007 faa4 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800358c:	464b      	mov	r3, r9
 800358e:	0a19      	lsrs	r1, r3, #8
 8003590:	b289      	uxth	r1, r1
 8003592:	20e7      	movs	r0, #231	; 0xe7
 8003594:	f007 fa9e 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003598:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359a:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800359c:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359e:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a0:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a2:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a4:	f007 fa96 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a8:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035aa:	b2b1      	uxth	r1, r6
 80035ac:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035ae:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035b0:	f007 fa90 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035b4:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035b6:	b2a9      	uxth	r1, r5
 80035b8:	20ea      	movs	r0, #234	; 0xea
 80035ba:	f007 fa8b 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035be:	b2a1      	uxth	r1, r4
 80035c0:	20eb      	movs	r0, #235	; 0xeb
 80035c2:	f007 fa87 	bl	800aad4 <EE_WriteVariable>
	
	return result;
}
 80035c6:	2000      	movs	r0, #0
 80035c8:	bc3c      	pop	{r2, r3, r4, r5}
 80035ca:	4690      	mov	r8, r2
 80035cc:	4699      	mov	r9, r3
 80035ce:	46a2      	mov	sl, r4
 80035d0:	46ab      	mov	fp, r5
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035d4 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d4:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80035d6:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d8:	4c1e      	ldr	r4, [pc, #120]	; (8003654 <SaveEEparams+0x80>)
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	7863      	ldrb	r3, [r4, #1]
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	4319      	orrs	r1, r3
 80035e4:	f007 fa76 	bl	800aad4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035e8:	208e      	movs	r0, #142	; 0x8e
 80035ea:	7921      	ldrb	r1, [r4, #4]
 80035ec:	88e3      	ldrh	r3, [r4, #6]
 80035ee:	03c9      	lsls	r1, r1, #15
 80035f0:	4319      	orrs	r1, r3
 80035f2:	b289      	uxth	r1, r1
 80035f4:	0040      	lsls	r0, r0, #1
 80035f6:	f007 fa6d 	bl	800aad4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035fa:	2016      	movs	r0, #22
 80035fc:	4c16      	ldr	r4, [pc, #88]	; (8003658 <SaveEEparams+0x84>)
 80035fe:	30ff      	adds	r0, #255	; 0xff
 8003600:	8821      	ldrh	r1, [r4, #0]
 8003602:	f007 fa67 	bl	800aad4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003606:	208b      	movs	r0, #139	; 0x8b
 8003608:	8861      	ldrh	r1, [r4, #2]
 800360a:	0040      	lsls	r0, r0, #1
 800360c:	f007 fa62 	bl	800aad4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003610:	2018      	movs	r0, #24
 8003612:	7963      	ldrb	r3, [r4, #5]
 8003614:	7b21      	ldrb	r1, [r4, #12]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4319      	orrs	r1, r3
 800361a:	30ff      	adds	r0, #255	; 0xff
 800361c:	f007 fa5a 	bl	800aad4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003620:	208c      	movs	r0, #140	; 0x8c
 8003622:	8921      	ldrh	r1, [r4, #8]
 8003624:	0040      	lsls	r0, r0, #1
 8003626:	f007 fa55 	bl	800aad4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800362a:	201a      	movs	r0, #26
 800362c:	8961      	ldrh	r1, [r4, #10]
 800362e:	30ff      	adds	r0, #255	; 0xff
 8003630:	f007 fa50 	bl	800aad4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003634:	208d      	movs	r0, #141	; 0x8d
 8003636:	7b63      	ldrb	r3, [r4, #13]
 8003638:	7921      	ldrb	r1, [r4, #4]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4319      	orrs	r1, r3
 800363e:	0040      	lsls	r0, r0, #1
 8003640:	f007 fa48 	bl	800aad4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003644:	201c      	movs	r0, #28
 8003646:	7ea1      	ldrb	r1, [r4, #26]
 8003648:	30ff      	adds	r0, #255	; 0xff
 800364a:	f007 fa43 	bl	800aad4 <EE_WriteVariable>
	
	return result;
}
 800364e:	2000      	movs	r0, #0
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20006c00 	.word	0x20006c00
 8003658:	20006c80 	.word	0x20006c80

0800365c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003660:	4f12      	ldr	r7, [pc, #72]	; (80036ac <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 8003662:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003664:	2234      	movs	r2, #52	; 0x34
 8003666:	2100      	movs	r1, #0
 8003668:	0038      	movs	r0, r7
 800366a:	f00e ff95 	bl	8012598 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800366e:	4e10      	ldr	r6, [pc, #64]	; (80036b0 <ClearEEportsDir+0x54>)
 8003670:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 8003672:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003678:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800367a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800367c:	4698      	mov	r8, r3
 800367e:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003680:	2c19      	cmp	r4, #25
 8003682:	d901      	bls.n	8003688 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003684:	230a      	movs	r3, #10
 8003686:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003688:	7833      	ldrb	r3, [r6, #0]
 800368a:	b2ec      	uxtb	r4, r5
 800368c:	42a3      	cmp	r3, r4
 800368e:	d309      	bcc.n	80036a4 <ClearEEportsDir+0x48>
 8003690:	1e63      	subs	r3, r4, #1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003696:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003698:	2900      	cmp	r1, #0
 800369a:	d0f1      	beq.n	8003680 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800369c:	b2a8      	uxth	r0, r5
 800369e:	f007 fa19 	bl	800aad4 <EE_WriteVariable>
 80036a2:	e7ed      	b.n	8003680 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80036a4:	4640      	mov	r0, r8
 80036a6:	bc04      	pop	{r2}
 80036a8:	4690      	mov	r8, r2
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ac:	2000719c 	.word	0x2000719c
 80036b0:	20000008 	.word	0x20000008

080036b4 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036b4:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80036b6:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80036ba:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036bc:	ad03      	add	r5, sp, #12
 80036be:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036c0:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	002a      	movs	r2, r5
 80036c6:	ab06      	add	r3, sp, #24
 80036c8:	a905      	add	r1, sp, #20
 80036ca:	2001      	movs	r0, #1
 80036cc:	f007 fcae 	bl	800b02c <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036d0:	aa04      	add	r2, sp, #16
 80036d2:	ab08      	add	r3, sp, #32
 80036d4:	a907      	add	r1, sp, #28
 80036d6:	9400      	str	r4, [sp, #0]
 80036d8:	2002      	movs	r0, #2
 80036da:	f007 fca7 	bl	800b02c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036e4:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036e6:	a909      	add	r1, sp, #36	; 0x24
 80036e8:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036ea:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036ee:	f00c fdf9 	bl	80102e4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f2:	2302      	movs	r3, #2
 80036f4:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036f6:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036f8:	a909      	add	r1, sp, #36	; 0x24
 80036fa:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003700:	f00c fdf0 	bl	80102e4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003704:	8829      	ldrh	r1, [r5, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	9805      	ldr	r0, [sp, #20]
 800370a:	f00c ff8b 	bl	8010624 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800370e:	2005      	movs	r0, #5
 8003710:	f009 f930 	bl	800c974 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003714:	8821      	ldrh	r1, [r4, #0]
 8003716:	9808      	ldr	r0, [sp, #32]
 8003718:	f00c ff7e 	bl	8010618 <HAL_GPIO_ReadPin>
 800371c:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800371e:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003724:	8829      	ldrh	r1, [r5, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	9805      	ldr	r0, [sp, #20]
 800372a:	f00c ff7b 	bl	8010624 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800372e:	2005      	movs	r0, #5
 8003730:	f009 f920 	bl	800c974 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003734:	8821      	ldrh	r1, [r4, #0]
 8003736:	9808      	ldr	r0, [sp, #32]
 8003738:	f00c ff6e 	bl	8010618 <HAL_GPIO_ReadPin>
 800373c:	3801      	subs	r0, #1
 800373e:	4243      	negs	r3, r0
 8003740:	4158      	adcs	r0, r3
			return 1;
 8003742:	b2c0      	uxtb	r0, r0
}
 8003744:	b00e      	add	sp, #56	; 0x38
 8003746:	bd70      	pop	{r4, r5, r6, pc}

08003748 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 800374a:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	f7fc fcd9 	bl	8000104 <strcmp>
 8003752:	4243      	negs	r3, r0
 8003754:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 8003756:	b2c0      	uxtb	r0, r0
 8003758:	bd10      	pop	{r4, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000094 	.word	0x20000094

08003760 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	46de      	mov	lr, fp
 8003764:	4657      	mov	r7, sl
 8003766:	464e      	mov	r6, r9
 8003768:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800376a:	4923      	ldr	r1, [pc, #140]	; (80037f8 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 800376c:	b5e0      	push	{r5, r6, r7, lr}
 800376e:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003770:	f7fc fcc8 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 8003776:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003778:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 800377c:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 800377e:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 8003782:	4f21      	ldr	r7, [pc, #132]	; (8003808 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 8003784:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <IsMathOperator+0xac>)
 8003788:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 800378a:	2e00      	cmp	r6, #0
 800378c:	d028      	beq.n	80037e0 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 800378e:	0039      	movs	r1, r7
 8003790:	0020      	movs	r0, r4
 8003792:	f7fc fcb7 	bl	8000104 <strcmp>
 8003796:	2800      	cmp	r0, #0
 8003798:	d024      	beq.n	80037e4 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 800379a:	4641      	mov	r1, r8
 800379c:	0020      	movs	r0, r4
 800379e:	f7fc fcb1 	bl	8000104 <strcmp>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d020      	beq.n	80037e8 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80037a6:	4649      	mov	r1, r9
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fc fcab 	bl	8000104 <strcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d01c      	beq.n	80037ec <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80037b2:	4651      	mov	r1, sl
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7fc fca5 	bl	8000104 <strcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d018      	beq.n	80037f0 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80037be:	4659      	mov	r1, fp
 80037c0:	0020      	movs	r0, r4
 80037c2:	f7fc fc9f 	bl	8000104 <strcmp>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d014      	beq.n	80037f4 <IsMathOperator+0x94>
 80037ca:	3d01      	subs	r5, #1
 80037cc:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	d1db      	bne.n	800378a <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037d2:	2000      	movs	r0, #0
}
 80037d4:	bc3c      	pop	{r2, r3, r4, r5}
 80037d6:	4690      	mov	r8, r2
 80037d8:	4699      	mov	r9, r3
 80037da:	46a2      	mov	sl, r4
 80037dc:	46ab      	mov	fp, r5
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037e0:	2001      	movs	r0, #1
 80037e2:	e7f7      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER;
 80037e4:	2002      	movs	r0, #2
 80037e6:	e7f5      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037e8:	2003      	movs	r0, #3
 80037ea:	e7f3      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037ec:	2004      	movs	r0, #4
 80037ee:	e7f1      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037f0:	2005      	movs	r0, #5
 80037f2:	e7ef      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037f4:	2006      	movs	r0, #6
 80037f6:	e7ed      	b.n	80037d4 <IsMathOperator+0x74>
 80037f8:	08017444 	.word	0x08017444
 80037fc:	0801744c 	.word	0x0801744c
 8003800:	08017450 	.word	0x08017450
 8003804:	08017454 	.word	0x08017454
 8003808:	08017448 	.word	0x08017448
 800380c:	08017458 	.word	0x08017458

08003810 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003810:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003812:	f008 ff63 	bl	800c6dc <RTC_Init>
	GetTimeDate();
 8003816:	f009 f807 	bl	800c828 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800381a:	f007 fa41 	bl	800aca0 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 800381e:	f007 fbaf 	bl	800af80 <GPIO_Init>
	DMA_Init();
 8003822:	f006 fadb 	bl	8009ddc <DMA_Init>
	TIM_USEC_Init();
 8003826:	f009 f831 	bl	800c88c <TIM_USEC_Init>
	CRC_Init();
 800382a:	f007 f859 	bl	800a8e0 <CRC_Init>
	TIM_MSEC_Init();
 800382e:	f009 f85f 	bl	800c8f0 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003832:	f007 fc69 	bl	800b108 <IsFactoryReset>
 8003836:	2800      	cmp	r0, #0
 8003838:	d15e      	bne.n	80038f8 <BOS_Init+0xe8>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800383a:	f7ff ff3b 	bl	80036b4 <IsLowerCLIbaud>
 800383e:	2800      	cmp	r0, #0
 8003840:	d04e      	beq.n	80038e0 <BOS_Init+0xd0>
		CLI_LOW_Baudrate_Flag =1;
 8003842:	2322      	movs	r3, #34	; 0x22
 8003844:	2201      	movs	r2, #1
 8003846:	4e36      	ldr	r6, [pc, #216]	; (8003920 <BOS_Init+0x110>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003848:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800384a:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 800384c:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800384e:	f009 f891 	bl	800c974 <StartMilliDelay>
		Module_Peripheral_Init();
 8003852:	f006 fa1d 	bl	8009c90 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003856:	21e1      	movs	r1, #225	; 0xe1
 8003858:	4d32      	ldr	r5, [pc, #200]	; (8003924 <BOS_Init+0x114>)
			UpdateBaudrate(port,BOS.clibaudrate);
 800385a:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800385c:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800385e:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003860:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003862:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003864:	f009 fab4 	bl	800cdd0 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003868:	2c07      	cmp	r4, #7
 800386a:	d007      	beq.n	800387c <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 800386c:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800386e:	3401      	adds	r4, #1
 8003870:	68a9      	ldr	r1, [r5, #8]
 8003872:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003874:	f009 faac 	bl	800cdd0 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003878:	2c07      	cmp	r4, #7
 800387a:	d1f7      	bne.n	800386c <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 800387c:	f7ff fde4 	bl	8003448 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003880:	f009 fb3a 	bl	800cef8 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003884:	f006 ff74 	bl	800a770 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003888:	2180      	movs	r1, #128	; 0x80
	if(myID == 0) /* Native module */
 800388a:	4b27      	ldr	r3, [pc, #156]	; (8003928 <BOS_Init+0x118>)
		IND_ON();
 800388c:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 800388e:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003890:	01c9      	lsls	r1, r1, #7
 8003892:	4826      	ldr	r0, [pc, #152]	; (800392c <BOS_Init+0x11c>)
	if(myID == 0) /* Native module */
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02a      	beq.n	80038ee <BOS_Init+0xde>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003898:	f00c fec4 	bl	8010624 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800389c:	20fa      	movs	r0, #250	; 0xfa
 800389e:	0040      	lsls	r0, r0, #1
 80038a0:	f009 f868 	bl	800c974 <StartMilliDelay>
		IND_OFF();
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	2200      	movs	r2, #0
 80038a8:	01c9      	lsls	r1, r1, #7
 80038aa:	4820      	ldr	r0, [pc, #128]	; (800392c <BOS_Init+0x11c>)
 80038ac:	f00c feba 	bl	8010624 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038b0:	2064      	movs	r0, #100	; 0x64
 80038b2:	f009 f85f 	bl	800c974 <StartMilliDelay>
		IND_ON();
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	481c      	ldr	r0, [pc, #112]	; (800392c <BOS_Init+0x11c>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	01c9      	lsls	r1, r1, #7
 80038be:	f00c feb1 	bl	8010624 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038c2:	2064      	movs	r0, #100	; 0x64
 80038c4:	f009 f856 	bl	800c974 <StartMilliDelay>
		IND_OFF();
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	2200      	movs	r2, #0
 80038cc:	01c9      	lsls	r1, r1, #7
 80038ce:	4817      	ldr	r0, [pc, #92]	; (800392c <BOS_Init+0x11c>)
 80038d0:	f00c fea8 	bl	8010624 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80038d4:	f003 fd5e 	bl	8007394 <ResetUartORE>
	
	BOS_initialized =1;
 80038d8:	2323      	movs	r3, #35	; 0x23
 80038da:	2201      	movs	r2, #1
 80038dc:	54f2      	strb	r2, [r6, r3]
}
 80038de:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80038e0:	2032      	movs	r0, #50	; 0x32
 80038e2:	f009 f847 	bl	800c974 <StartMilliDelay>
		Module_Peripheral_Init();
 80038e6:	f006 f9d3 	bl	8009c90 <Module_Peripheral_Init>
 80038ea:	4e0d      	ldr	r6, [pc, #52]	; (8003920 <BOS_Init+0x110>)
 80038ec:	e7c6      	b.n	800387c <BOS_Init+0x6c>
		IND_ON();
 80038ee:	f00c fe99 	bl	8010624 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80038f2:	20fa      	movs	r0, #250	; 0xfa
 80038f4:	0040      	lsls	r0, r0, #1
 80038f6:	e7e5      	b.n	80038c4 <BOS_Init+0xb4>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80038f8:	4c0d      	ldr	r4, [pc, #52]	; (8003930 <BOS_Init+0x120>)
 80038fa:	4d0e      	ldr	r5, [pc, #56]	; (8003934 <BOS_Init+0x124>)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	42ab      	cmp	r3, r5
 8003900:	d004      	beq.n	800390c <BOS_Init+0xfc>
		if(EE_Format() == HAL_OK){
 8003902:	f007 f97d 	bl	800ac00 <EE_Format>
 8003906:	2800      	cmp	r0, #0
 8003908:	d100      	bne.n	800390c <BOS_Init+0xfc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 800390a:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800390c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <BOS_Init+0x128>)
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <BOS_Init+0x12c>)
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	e7fd      	b.n	800391a <BOS_Init+0x10a>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	20000b18 	.word	0x20000b18
 8003924:	20006c80 	.word	0x20006c80
 8003928:	20000a98 	.word	0x20000a98
 800392c:	48000400 	.word	0x48000400
 8003930:	20007ff0 	.word	0x20007ff0
 8003934:	beefdead 	.word	0xbeefdead
 8003938:	e000ed00 	.word	0xe000ed00
 800393c:	05fa0004 	.word	0x05fa0004

08003940 <Module_Init>:
void Module_Init(void){
 8003940:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003942:	f00b fa05 	bl	800ed50 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003946:	f005 ffc5 	bl	80098d4 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 800394a:	f7ff ff61 	bl	8003810 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800394e:	f003 fd41 	bl	80073d4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003952:	f009 fb79 	bl	800d048 <osKernelStart>
}
 8003956:	bd10      	pop	{r4, pc}

08003958 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 800395c:	4e12      	ldr	r6, [pc, #72]	; (80039a8 <ExploreNeighbors+0x50>)
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003960:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003962:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003964:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003966:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003968:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 800396a:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 800396c:	b082      	sub	sp, #8
		if(port != ignore){
 800396e:	42a7      	cmp	r7, r4
 8003970:	d011      	beq.n	8003996 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003972:	4643      	mov	r3, r8
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	2224      	movs	r2, #36	; 0x24
 8003978:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 800397a:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800397c:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 800397e:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003980:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003982:	2200      	movs	r2, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2100      	movs	r1, #0
 8003988:	3307      	adds	r3, #7
 800398a:	0020      	movs	r0, r4
 800398c:	f004 f98a 	bl	8007ca4 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003990:	200a      	movs	r0, #10
 8003992:	f009 fb5f 	bl	800d054 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003996:	3401      	adds	r4, #1
 8003998:	b2e4      	uxtb	r4, r4
 800399a:	2c07      	cmp	r4, #7
 800399c:	d1e7      	bne.n	800396e <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800399e:	2000      	movs	r0, #0
 80039a0:	b002      	add	sp, #8
 80039a2:	bc04      	pop	{r2}
 80039a4:	4690      	mov	r8, r2
 80039a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a8:	20000b18 	.word	0x20000b18
 80039ac:	20000008 	.word	0x20000008

080039b0 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b2:	4657      	mov	r7, sl
 80039b4:	464e      	mov	r6, r9
 80039b6:	4645      	mov	r5, r8
 80039b8:	46de      	mov	lr, fp
 80039ba:	b5e0      	push	{r5, r6, r7, lr}
 80039bc:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039be:	466a      	mov	r2, sp
 80039c0:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039c2:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039c4:	781d      	ldrb	r5, [r3, #0]
 80039c6:	1deb      	adds	r3, r5, #7
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	469d      	mov	sp, r3
 80039d0:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80039d2:	2d00      	cmp	r5, #0
 80039d4:	d00c      	beq.n	80039f0 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 80039d6:	2100      	movs	r1, #0
 80039d8:	1e6c      	subs	r4, r5, #1
 80039da:	4a46      	ldr	r2, [pc, #280]	; (8003af4 <FindBroadcastRoutes+0x144>)
 80039dc:	b2e4      	uxtb	r4, r4
 80039de:	3401      	adds	r4, #1
 80039e0:	3254      	adds	r2, #84	; 0x54
 80039e2:	446c      	add	r4, sp
 80039e4:	7019      	strb	r1, [r3, #0]
 80039e6:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 80039e8:	8011      	strh	r1, [r2, #0]
 80039ea:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d1f9      	bne.n	80039e4 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 80039f0:	2301      	movs	r3, #1
 80039f2:	2216      	movs	r2, #22
 80039f4:	3801      	subs	r0, #1
 80039f6:	5433      	strb	r3, [r6, r0]
 80039f8:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <FindBroadcastRoutes+0x148>)
 80039fa:	4342      	muls	r2, r0
 80039fc:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039fe:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <FindBroadcastRoutes+0x144>)
 8003a00:	0040      	lsls	r0, r0, #1
 8003a02:	1818      	adds	r0, r3, r0
 8003a04:	2301      	movs	r3, #1
 8003a06:	3202      	adds	r2, #2
 8003a08:	4462      	add	r2, ip
 8003a0a:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a0c:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003a0e:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a10:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a12:	469a      	mov	sl, r3
 8003a14:	46b3      	mov	fp, r6
 8003a16:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003a18:	8813      	ldrh	r3, [r2, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a1e:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a20:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a22:	46a8      	mov	r8, r5
 8003a24:	4665      	mov	r5, ip
 8003a26:	408d      	lsls	r5, r1
 8003a28:	46a9      	mov	r9, r5
 8003a2a:	4645      	mov	r5, r8
 8003a2c:	464e      	mov	r6, r9
 8003a2e:	4335      	orrs	r5, r6
 8003a30:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a32:	4655      	mov	r5, sl
 8003a34:	445b      	add	r3, fp
 8003a36:	3b01      	subs	r3, #1
 8003a38:	701d      	strb	r5, [r3, #0]
 8003a3a:	3101      	adds	r1, #1
 8003a3c:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003a3e:	2906      	cmp	r1, #6
 8003a40:	d1ea      	bne.n	8003a18 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a42:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003a44:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a46:	4692      	mov	sl, r2
 8003a48:	465e      	mov	r6, fp
	++level;												// Move one level
 8003a4a:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a4c:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <FindBroadcastRoutes+0x144>)
 8003a4e:	687d      	ldr	r5, [r7, #4]
 8003a50:	449a      	add	sl, r3
 8003a52:	4653      	mov	r3, sl
 8003a54:	46a8      	mov	r8, r5
 8003a56:	465d      	mov	r5, fp
 8003a58:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a5a:	4643      	mov	r3, r8
		++level;											// Move one level
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03b      	beq.n	8003adc <FindBroadcastRoutes+0x12c>
 8003a64:	1e6b      	subs	r3, r5, #1
 8003a66:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003a68:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a6a:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a6c:	469c      	mov	ip, r3
 8003a6e:	46ab      	mov	fp, r5
 8003a70:	e003      	b.n	8003a7a <FindBroadcastRoutes+0xca>
 8003a72:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a74:	b2d3      	uxtb	r3, r2
 8003a76:	4598      	cmp	r8, r3
 8003a78:	d92c      	bls.n	8003ad4 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a7a:	5cb3      	ldrb	r3, [r6, r2]
 8003a7c:	454b      	cmp	r3, r9
 8003a7e:	d1f8      	bne.n	8003a72 <FindBroadcastRoutes+0xc2>
 8003a80:	2116      	movs	r1, #22
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <FindBroadcastRoutes+0x14c>)
 8003a84:	4351      	muls	r1, r2
 8003a86:	469a      	mov	sl, r3
 8003a88:	2000      	movs	r0, #0
 8003a8a:	4451      	add	r1, sl
 8003a8c:	46e2      	mov	sl, ip
 8003a8e:	4694      	mov	ip, r2
 8003a90:	0055      	lsls	r5, r2, #1
 8003a92:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a94:	880b      	ldrh	r3, [r1, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <FindBroadcastRoutes+0x110>
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	5cf2      	ldrb	r2, [r6, r3]
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d10d      	bne.n	8003ac0 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003aa4:	683c      	ldr	r4, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	5b15      	ldrh	r5, [r2, r4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4082      	lsls	r2, r0
 8003aae:	4315      	orrs	r5, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003ab4:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ab6:	465a      	mov	r2, fp
						++untaged;
 8003ab8:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003aba:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003abc:	b2e3      	uxtb	r3, r4
 8003abe:	469a      	mov	sl, r3
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003ac4:	2806      	cmp	r0, #6
 8003ac6:	d1e5      	bne.n	8003a94 <FindBroadcastRoutes+0xe4>
 8003ac8:	4662      	mov	r2, ip
 8003aca:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003acc:	b2d3      	uxtb	r3, r2
 8003ace:	46d4      	mov	ip, sl
 8003ad0:	4598      	cmp	r8, r3
 8003ad2:	d8d2      	bhi.n	8003a7a <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003ad4:	4663      	mov	r3, ip
 8003ad6:	465d      	mov	r5, fp
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1be      	bne.n	8003a5a <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b003      	add	sp, #12
 8003ae2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ae4:	4690      	mov	r8, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	46a2      	mov	sl, r4
 8003aea:	46ab      	mov	fp, r5
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	20000008 	.word	0x20000008
 8003af4:	20000b18 	.word	0x20000b18
 8003af8:	20000f0c 	.word	0x20000f0c
 8003afc:	20000f0e 	.word	0x20000f0e

08003b00 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b02:	46de      	mov	lr, fp
 8003b04:	464e      	mov	r6, r9
 8003b06:	4645      	mov	r5, r8
 8003b08:	4657      	mov	r7, sl
 8003b0a:	b5e0      	push	{r5, r6, r7, lr}
 8003b0c:	b091      	sub	sp, #68	; 0x44
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b0e:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b10:	0005      	movs	r5, r0
 8003b12:	000e      	movs	r6, r1
 8003b14:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b16:	2232      	movs	r2, #50	; 0x32
 8003b18:	2100      	movs	r1, #0
 8003b1a:	0020      	movs	r0, r4
 8003b1c:	f00e fd3c 	bl	8012598 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003b20:	221a      	movs	r2, #26
 8003b22:	2100      	movs	r1, #0
 8003b24:	4862      	ldr	r0, [pc, #392]	; (8003cb0 <FindRoute+0x1b0>)
 8003b26:	f00e fd37 	bl	8012598 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b2a:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b2c:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b2e:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <FindRoute+0x1b4>)
 8003b30:	1e6a      	subs	r2, r5, #1
 8003b32:	469c      	mov	ip, r3
 8003b34:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b36:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b38:	7219      	strb	r1, [r3, #8]
 8003b3a:	2316      	movs	r3, #22
 8003b3c:	4353      	muls	r3, r2
 8003b3e:	4a5e      	ldr	r2, [pc, #376]	; (8003cb8 <FindRoute+0x1b8>)
 8003b40:	3302      	adds	r3, #2
 8003b42:	4693      	mov	fp, r2
 8003b44:	445b      	add	r3, fp
 8003b46:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b48:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003b4a:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b4c:	b2b1      	uxth	r1, r6
 8003b4e:	8813      	ldrh	r3, [r2, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <FindRoute+0x5c>
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d100      	bne.n	8003b5c <FindRoute+0x5c>
 8003b5a:	e099      	b.n	8003c90 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	3202      	adds	r2, #2
 8003b60:	2807      	cmp	r0, #7
 8003b62:	d1f4      	bne.n	8003b4e <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003b64:	4b55      	ldr	r3, [pc, #340]	; (8003cbc <FindRoute+0x1bc>)
 8003b66:	7819      	ldrb	r1, [r3, #0]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	d100      	bne.n	8003b70 <FindRoute+0x70>
 8003b6e:	e09a      	b.n	8003ca6 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b70:	2208      	movs	r2, #8
 8003b72:	4462      	add	r2, ip
 8003b74:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b76:	2200      	movs	r2, #0
 8003b78:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b7a:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b7c:	4692      	mov	sl, r2
 8003b7e:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b80:	429d      	cmp	r5, r3
 8003b82:	d005      	beq.n	8003b90 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b84:	4640      	mov	r0, r8
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b8a:	4650      	mov	r0, sl
 8003b8c:	18b2      	adds	r2, r6, r2
 8003b8e:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003b90:	3301      	adds	r3, #1
 8003b92:	428b      	cmp	r3, r1
 8003b94:	ddf4      	ble.n	8003b80 <FindRoute+0x80>
 8003b96:	2308      	movs	r3, #8
 8003b98:	4463      	add	r3, ip
	uint8_t u =0;
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003b9e:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003ba0:	2300      	movs	r3, #0
		temp &=Q[i];
 8003ba2:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003ba4:	3301      	adds	r3, #1
		temp &=Q[i];
 8003ba6:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	dbfa      	blt.n	8003ba2 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	d000      	beq.n	8003bb2 <FindRoute+0xb2>
 8003bb0:	e07c      	b.n	8003cac <FindRoute+0x1ac>
 8003bb2:	4663      	mov	r3, ip
 8003bb4:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003bb6:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003bb8:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d000      	beq.n	8003bc0 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003bbe:	20ff      	movs	r0, #255	; 0xff
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e001      	b.n	8003bca <FindRoute+0xca>
 8003bc6:	4642      	mov	r2, r8
 8003bc8:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003bca:	4290      	cmp	r0, r2
 8003bcc:	d904      	bls.n	8003bd8 <FindRoute+0xd8>
 8003bce:	5ce6      	ldrb	r6, [r4, r3]
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	d101      	bne.n	8003bd8 <FindRoute+0xd8>
			index =i;
 8003bd4:	0010      	movs	r0, r2
 8003bd6:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003bd8:	3301      	adds	r3, #1
 8003bda:	428b      	cmp	r3, r1
 8003bdc:	dbf3      	blt.n	8003bc6 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003bde:	3501      	adds	r5, #1
		if(u == desID){
 8003be0:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003be2:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003be4:	429d      	cmp	r5, r3
 8003be6:	d023      	beq.n	8003c30 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003be8:	2301      	movs	r3, #1
 8003bea:	1e6f      	subs	r7, r5, #1
 8003bec:	55e3      	strb	r3, [r4, r7]
 8003bee:	2316      	movs	r3, #22
 8003bf0:	465e      	mov	r6, fp
 8003bf2:	437b      	muls	r3, r7
 8003bf4:	360e      	adds	r6, #14
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	445a      	add	r2, fp
 8003bfa:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bfc:	4467      	add	r7, ip
 8003bfe:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003c00:	8813      	ldrh	r3, [r2, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00f      	beq.n	8003c26 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003c06:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	5ce0      	ldrb	r0, [r4, r3]
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d109      	bne.n	8003c26 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c12:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c14:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c16:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c18:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c1a:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c1c:	4281      	cmp	r1, r0
 8003c1e:	d902      	bls.n	8003c26 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003c20:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003c22:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003c24:	545d      	strb	r5, [r3, r1]
 8003c26:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003c28:	42b2      	cmp	r2, r6
 8003c2a:	d1e9      	bne.n	8003c00 <FindRoute+0x100>
 8003c2c:	9900      	ldr	r1, [sp, #0]
 8003c2e:	e7b6      	b.n	8003b9e <FindRoute+0x9e>
 8003c30:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c32:	2224      	movs	r2, #36	; 0x24
 8003c34:	4463      	add	r3, ip
 8003c36:	5c9a      	ldrb	r2, [r3, r2]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	d101      	bne.n	8003c42 <FindRoute+0x142>
 8003c3e:	e00b      	b.n	8003c58 <FindRoute+0x158>
 8003c40:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003c42:	491b      	ldr	r1, [pc, #108]	; (8003cb0 <FindRoute+0x1b0>)
 8003c44:	1c58      	adds	r0, r3, #1
 8003c46:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c48:	4663      	mov	r3, ip
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	3323      	adds	r3, #35	; 0x23
 8003c4e:	7819      	ldrb	r1, [r3, #0]
 8003c50:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c52:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d1f3      	bne.n	8003c40 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003c58:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c5a:	464c      	mov	r4, r9
 8003c5c:	9b01      	ldr	r3, [sp, #4]
 8003c5e:	4463      	add	r3, ip
 8003c60:	8822      	ldrh	r2, [r4, #0]
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	d008      	beq.n	8003c78 <FindRoute+0x178>
 8003c66:	4d12      	ldr	r5, [pc, #72]	; (8003cb0 <FindRoute+0x1b0>)
 8003c68:	79d9      	ldrb	r1, [r3, #7]
 8003c6a:	46ac      	mov	ip, r5
 8003c6c:	4461      	add	r1, ip
 8003c6e:	3901      	subs	r1, #1
 8003c70:	7809      	ldrb	r1, [r1, #0]
 8003c72:	08d2      	lsrs	r2, r2, #3
 8003c74:	4291      	cmp	r1, r2
 8003c76:	d014      	beq.n	8003ca2 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003c78:	3001      	adds	r0, #1
 8003c7a:	3402      	adds	r4, #2
 8003c7c:	2807      	cmp	r0, #7
 8003c7e:	d1ef      	bne.n	8003c60 <FindRoute+0x160>
	return 0;
 8003c80:	2000      	movs	r0, #0
}
 8003c82:	b011      	add	sp, #68	; 0x44
 8003c84:	bc3c      	pop	{r2, r3, r4, r5}
 8003c86:	4690      	mov	r8, r2
 8003c88:	4699      	mov	r9, r3
 8003c8a:	46a2      	mov	sl, r4
 8003c8c:	46ab      	mov	fp, r5
 8003c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003c90:	9901      	ldr	r1, [sp, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	000b      	movs	r3, r1
 8003c96:	4463      	add	r3, ip
 8003c98:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <FindRoute+0x1b0>)
			return col;
 8003c9c:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003c9e:	7019      	strb	r1, [r3, #0]
			return col;
 8003ca0:	e7ef      	b.n	8003c82 <FindRoute+0x182>
			return col;
 8003ca2:	b2c0      	uxtb	r0, r0
 8003ca4:	e7ed      	b.n	8003c82 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003ca6:	425b      	negs	r3, r3
 8003ca8:	2500      	movs	r5, #0
 8003caa:	e7c2      	b.n	8003c32 <FindRoute+0x132>
 8003cac:	1e6b      	subs	r3, r5, #1
 8003cae:	e7c0      	b.n	8003c32 <FindRoute+0x132>
 8003cb0:	20006d48 	.word	0x20006d48
 8003cb4:	20000b98 	.word	0x20000b98
 8003cb8:	20000f0c 	.word	0x20000f0c
 8003cbc:	20000008 	.word	0x20000008

08003cc0 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc0:	4b5c      	ldr	r3, [pc, #368]	; (8003e34 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc4:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003cc6:	4645      	mov	r5, r8
 8003cc8:	464e      	mov	r6, r9
 8003cca:	46de      	mov	lr, fp
 8003ccc:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cce:	3440      	adds	r4, #64	; 0x40
 8003cd0:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003cd2:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd4:	4698      	mov	r8, r3
 8003cd6:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003cd8:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cda:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003cdc:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cde:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce0:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003ce2:	b085      	sub	sp, #20
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce4:	6011      	str	r1, [r2, #0]
 8003ce6:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ce8:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cea:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cec:	0021      	movs	r1, r4
 8003cee:	2332      	movs	r3, #50	; 0x32
 8003cf0:	9500      	str	r5, [sp, #0]
 8003cf2:	2211      	movs	r2, #17
 8003cf4:	0038      	movs	r0, r7
 8003cf6:	f009 f819 	bl	800cd2c <writePxMutex>
 8003cfa:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <DisplayTopology+0x17c>)
 8003cfc:	2601      	movs	r6, #1
 8003cfe:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003d00:	0032      	movs	r2, r6
 8003d02:	4649      	mov	r1, r9
 8003d04:	0020      	movs	r0, r4
 8003d06:	f00e fe41 	bl	801298c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f7fc fa04 	bl	8000118 <strlen>
 8003d10:	3601      	adds	r6, #1
 8003d12:	b282      	uxth	r2, r0
 8003d14:	9500      	str	r5, [sp, #0]
 8003d16:	2332      	movs	r3, #50	; 0x32
 8003d18:	0021      	movs	r1, r4
 8003d1a:	0038      	movs	r0, r7
 8003d1c:	f009 f806 	bl	800cd2c <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d20:	2e07      	cmp	r6, #7
 8003d22:	d1ed      	bne.n	8003d00 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d24:	2332      	movs	r3, #50	; 0x32
 8003d26:	9500      	str	r5, [sp, #0]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4945      	ldr	r1, [pc, #276]	; (8003e40 <DisplayTopology+0x180>)
 8003d2c:	0038      	movs	r0, r7
 8003d2e:	f008 fffd 	bl	800cd2c <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d32:	4b44      	ldr	r3, [pc, #272]	; (8003e44 <DisplayTopology+0x184>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <DisplayTopology+0x154>
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <DisplayTopology+0x188>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d3c:	4645      	mov	r5, r8
 8003d3e:	469b      	mov	fp, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d40:	2301      	movs	r3, #1
 8003d42:	425b      	negs	r3, r3
 8003d44:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <DisplayTopology+0x18c>)
	for(uint8_t row =0; row < N; row++){
 8003d48:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d4a:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"%d\t",0);
 8003d4c:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <DisplayTopology+0x190>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d4e:	3540      	adds	r5, #64	; 0x40
				sprintf(pcUserMessage,"%d\t",0);
 8003d50:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d52:	1c63      	adds	r3, r4, #1
 8003d54:	001a      	movs	r2, r3
 8003d56:	493f      	ldr	r1, [pc, #252]	; (8003e54 <DisplayTopology+0x194>)
 8003d58:	0028      	movs	r0, r5
 8003d5a:	9303      	str	r3, [sp, #12]
 8003d5c:	f00e fe16 	bl	801298c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d60:	0028      	movs	r0, r5
 8003d62:	f7fc f9d9 	bl	8000118 <strlen>
 8003d66:	4643      	mov	r3, r8
 8003d68:	b282      	uxth	r2, r0
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	2332      	movs	r3, #50	; 0x32
 8003d70:	0038      	movs	r0, r7
 8003d72:	f008 ffdb 	bl	800cd2c <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d76:	2316      	movs	r3, #22
 8003d78:	435c      	muls	r4, r3
 8003d7a:	465b      	mov	r3, fp
 8003d7c:	5b1b      	ldrh	r3, [r3, r4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	0059      	lsls	r1, r3, #1
 8003d82:	18c9      	adds	r1, r1, r3
 8003d84:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <DisplayTopology+0x198>)
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	469c      	mov	ip, r3
 8003d8a:	0028      	movs	r0, r5
 8003d8c:	4461      	add	r1, ip
 8003d8e:	f00e fe52 	bl	8012a36 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d92:	4643      	mov	r3, r8
 8003d94:	2205      	movs	r2, #5
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	0029      	movs	r1, r5
 8003d9a:	2332      	movs	r3, #50	; 0x32
 8003d9c:	0038      	movs	r0, r7
 8003d9e:	f008 ffc5 	bl	800cd2c <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003da2:	4643      	mov	r3, r8
 8003da4:	2201      	movs	r2, #1
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	492c      	ldr	r1, [pc, #176]	; (8003e5c <DisplayTopology+0x19c>)
 8003daa:	2332      	movs	r3, #50	; 0x32
 8003dac:	0038      	movs	r0, r7
 8003dae:	f008 ffbd 	bl	800cd2c <writePxMutex>
 8003db2:	465b      	mov	r3, fp
 8003db4:	1ca6      	adds	r6, r4, #2
 8003db6:	330e      	adds	r3, #14
 8003db8:	445e      	add	r6, fp
 8003dba:	191c      	adds	r4, r3, r4
 8003dbc:	e011      	b.n	8003de2 <DisplayTopology+0x122>
				sprintf(pcUserMessage,"%d\t",0);
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	f00e fde3 	bl	801298c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dc6:	0028      	movs	r0, r5
 8003dc8:	f7fc f9a6 	bl	8000118 <strlen>
 8003dcc:	4643      	mov	r3, r8
 8003dce:	b282      	uxth	r2, r0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	0029      	movs	r1, r5
 8003dd4:	2332      	movs	r3, #50	; 0x32
 8003dd6:	0038      	movs	r0, r7
 8003dd8:	3602      	adds	r6, #2
 8003dda:	f008 ffa7 	bl	800cd2c <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d00a      	beq.n	8003df8 <DisplayTopology+0x138>
			if(!array[row][col])
 8003de2:	8832      	ldrh	r2, [r6, #0]
 8003de4:	2a00      	cmp	r2, #0
 8003de6:	d0ea      	beq.n	8003dbe <DisplayTopology+0xfe>
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003de8:	2307      	movs	r3, #7
 8003dea:	4651      	mov	r1, sl
 8003dec:	4013      	ands	r3, r2
 8003dee:	0028      	movs	r0, r5
 8003df0:	08d2      	lsrs	r2, r2, #3
 8003df2:	f00e fdcb 	bl	801298c <sprintf>
 8003df6:	e7e6      	b.n	8003dc6 <DisplayTopology+0x106>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003df8:	4643      	mov	r3, r8
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4918      	ldr	r1, [pc, #96]	; (8003e60 <DisplayTopology+0x1a0>)
 8003e00:	2332      	movs	r3, #50	; 0x32
 8003e02:	0038      	movs	r0, r7
 8003e04:	f008 ff92 	bl	800cd2c <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003e08:	466b      	mov	r3, sp
 8003e0a:	7b1c      	ldrb	r4, [r3, #12]
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <DisplayTopology+0x184>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	d89e      	bhi.n	8003d52 <DisplayTopology+0x92>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e14:	2301      	movs	r3, #1
 8003e16:	425b      	negs	r3, r3
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	3333      	adds	r3, #51	; 0x33
 8003e1e:	4911      	ldr	r1, [pc, #68]	; (8003e64 <DisplayTopology+0x1a4>)
 8003e20:	0038      	movs	r0, r7
 8003e22:	f008 ff83 	bl	800cd2c <writePxMutex>
}
 8003e26:	b005      	add	sp, #20
 8003e28:	bc3c      	pop	{r2, r3, r4, r5}
 8003e2a:	4690      	mov	r8, r2
 8003e2c:	4699      	mov	r9, r3
 8003e2e:	46a2      	mov	sl, r4
 8003e30:	46ab      	mov	fp, r5
 8003e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e34:	20000b98 	.word	0x20000b98
 8003e38:	0801745c 	.word	0x0801745c
 8003e3c:	08017470 	.word	0x08017470
 8003e40:	080182fc 	.word	0x080182fc
 8003e44:	20000008 	.word	0x20000008
 8003e48:	20000f0c 	.word	0x20000f0c
 8003e4c:	08017488 	.word	0x08017488
 8003e50:	08017484 	.word	0x08017484
 8003e54:	08017478 	.word	0x08017478
 8003e58:	08016ddc 	.word	0x08016ddc
 8003e5c:	0801746c 	.word	0x0801746c
 8003e60:	08017594 	.word	0x08017594
 8003e64:	08018d70 	.word	0x08018d70

08003e68 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6a:	4645      	mov	r5, r8
 8003e6c:	46de      	mov	lr, fp
 8003e6e:	4657      	mov	r7, sl
 8003e70:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e72:	4934      	ldr	r1, [pc, #208]	; (8003f44 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e74:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e76:	3140      	adds	r1, #64	; 0x40
 8003e78:	000a      	movs	r2, r1
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e7c:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e7e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e80:	c231      	stmia	r2!, {r0, r4, r5}
 8003e82:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e84:	c231      	stmia	r2!, {r0, r4, r5}
 8003e86:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e88:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e8a:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	425b      	negs	r3, r3
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	221b      	movs	r2, #27
 8003e94:	3333      	adds	r3, #51	; 0x33
 8003e96:	4650      	mov	r0, sl
 8003e98:	f008 ff48 	bl	800cd2c <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <DisplayPortsDir+0xe4>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d035      	beq.n	8003f10 <DisplayPortsDir+0xa8>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4699      	mov	r9, r3
 8003ea8:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <DisplayPortsDir+0xe8>)
 8003eaa:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <DisplayPortsDir+0xec>)
 8003eae:	469b      	mov	fp, r3
 8003eb0:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eb2:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eb4:	4f23      	ldr	r7, [pc, #140]	; (8003f44 <DisplayPortsDir+0xdc>)
 8003eb6:	1e5d      	subs	r5, r3, #1
 8003eb8:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003eba:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ebc:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ebe:	3740      	adds	r7, #64	; 0x40
 8003ec0:	e002      	b.n	8003ec8 <DisplayPortsDir+0x60>
 8003ec2:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003ec4:	2c0a      	cmp	r4, #10
 8003ec6:	d01b      	beq.n	8003f00 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ec8:	0031      	movs	r1, r6
 8003eca:	4642      	mov	r2, r8
 8003ecc:	4119      	asrs	r1, r3
 8003ece:	5b52      	ldrh	r2, [r2, r5]
 8003ed0:	1c5c      	adds	r4, r3, #1
 8003ed2:	4211      	tst	r1, r2
 8003ed4:	d0f5      	beq.n	8003ec2 <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ed6:	0023      	movs	r3, r4
 8003ed8:	464a      	mov	r2, r9
 8003eda:	4659      	mov	r1, fp
 8003edc:	0038      	movs	r0, r7
 8003ede:	f00e fd55 	bl	801298c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003ee2:	0038      	movs	r0, r7
 8003ee4:	f7fc f918 	bl	8000118 <strlen>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	425b      	negs	r3, r3
 8003eec:	b282      	uxth	r2, r0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	0039      	movs	r1, r7
 8003ef2:	3333      	adds	r3, #51	; 0x33
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	f008 ff19 	bl	800cd2c <writePxMutex>
 8003efa:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003efc:	2c0a      	cmp	r4, #10
 8003efe:	d1e3      	bne.n	8003ec8 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003f00:	464b      	mov	r3, r9
 8003f02:	3301      	adds	r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4699      	mov	r9, r3
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <DisplayPortsDir+0xe4>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	454b      	cmp	r3, r9
 8003f0e:	d2cf      	bcs.n	8003eb0 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003f10:	490c      	ldr	r1, [pc, #48]	; (8003f44 <DisplayPortsDir+0xdc>)
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <DisplayPortsDir+0xf0>)
 8003f14:	3140      	adds	r1, #64	; 0x40
 8003f16:	000a      	movs	r2, r1
 8003f18:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f1a:	c231      	stmia	r2!, {r0, r4, r5}
 8003f1c:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f1e:	c231      	stmia	r2!, {r0, r4, r5}
 8003f20:	cb11      	ldmia	r3!, {r0, r4}
 8003f22:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f24:	2301      	movs	r3, #1
 8003f26:	425b      	negs	r3, r3
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	221f      	movs	r2, #31
 8003f2c:	3333      	adds	r3, #51	; 0x33
 8003f2e:	4650      	mov	r0, sl
 8003f30:	f008 fefc 	bl	800cd2c <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f34:	b003      	add	sp, #12
 8003f36:	bc3c      	pop	{r2, r3, r4, r5}
 8003f38:	4690      	mov	r8, r2
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	46a2      	mov	sl, r4
 8003f3e:	46ab      	mov	fp, r5
 8003f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	20000b98 	.word	0x20000b98
 8003f48:	08017490 	.word	0x08017490
 8003f4c:	20000008 	.word	0x20000008
 8003f50:	2000719c 	.word	0x2000719c
 8003f54:	080174ac 	.word	0x080174ac
 8003f58:	080174c0 	.word	0x080174c0

08003f5c <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	46de      	mov	lr, fp
 8003f60:	464e      	mov	r6, r9
 8003f62:	4645      	mov	r5, r8
 8003f64:	4657      	mov	r7, sl
 8003f66:	b5e0      	push	{r5, r6, r7, lr}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	9002      	str	r0, [sp, #8]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f6c:	f009 f97a 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f70:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f72:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f74:	4d97      	ldr	r5, [pc, #604]	; (80041d4 <DisplayModuleStatus+0x278>)
	strcpy((char* )pcOutputString,"");
 8003f76:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f78:	4b97      	ldr	r3, [pc, #604]	; (80041d8 <DisplayModuleStatus+0x27c>)
 8003f7a:	3540      	adds	r5, #64	; 0x40
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	4997      	ldr	r1, [pc, #604]	; (80041dc <DisplayModuleStatus+0x280>)
 8003f80:	0028      	movs	r0, r5
 8003f82:	469a      	mov	sl, r3
 8003f84:	f00e fd02 	bl	801298c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	0029      	movs	r1, r5
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f00e fd1e 	bl	80129cc <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f90:	4b93      	ldr	r3, [pc, #588]	; (80041e0 <DisplayModuleStatus+0x284>)
 8003f92:	4994      	ldr	r1, [pc, #592]	; (80041e4 <DisplayModuleStatus+0x288>)
 8003f94:	7c1a      	ldrb	r2, [r3, #16]
 8003f96:	0028      	movs	r0, r5
 8003f98:	4698      	mov	r8, r3
 8003f9a:	f00e fcf7 	bl	801298c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f9e:	0029      	movs	r1, r5
 8003fa0:	0020      	movs	r0, r4
 8003fa2:	f00e fd13 	bl	80129cc <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	498e      	ldr	r1, [pc, #568]	; (80041e8 <DisplayModuleStatus+0x28c>)
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	0028      	movs	r0, r5
 8003fb2:	f00e fceb 	bl	801298c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003fb6:	0029      	movs	r1, r5
 8003fb8:	0020      	movs	r0, r4
 8003fba:	f00e fd07 	bl	80129cc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003fbe:	4a8b      	ldr	r2, [pc, #556]	; (80041ec <DisplayModuleStatus+0x290>)
 8003fc0:	498b      	ldr	r1, [pc, #556]	; (80041f0 <DisplayModuleStatus+0x294>)
 8003fc2:	0028      	movs	r0, r5
 8003fc4:	f00e fce2 	bl	801298c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fc8:	0029      	movs	r1, r5
 8003fca:	0020      	movs	r0, r4
 8003fcc:	f00e fcfe 	bl	80129cc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fd0:	4a88      	ldr	r2, [pc, #544]	; (80041f4 <DisplayModuleStatus+0x298>)
 8003fd2:	4989      	ldr	r1, [pc, #548]	; (80041f8 <DisplayModuleStatus+0x29c>)
 8003fd4:	0028      	movs	r0, r5
 8003fd6:	f00e fcd9 	bl	801298c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fda:	0029      	movs	r1, r5
 8003fdc:	0020      	movs	r0, r4
 8003fde:	f00e fcf5 	bl	80129cc <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fe2:	002a      	movs	r2, r5
 8003fe4:	4b85      	ldr	r3, [pc, #532]	; (80041fc <DisplayModuleStatus+0x2a0>)
 8003fe6:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe8:	c243      	stmia	r2!, {r0, r1, r6}
 8003fea:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fec:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fee:	6011      	str	r1, [r2, #0]
 8003ff0:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff2:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ff4:	8091      	strh	r1, [r2, #4]
 8003ff6:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff8:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ffa:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ffc:	f00e fce6 	bl	80129cc <strcat>
 8004000:	4b7f      	ldr	r3, [pc, #508]	; (8004200 <DisplayModuleStatus+0x2a4>)
 8004002:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004004:	4b7f      	ldr	r3, [pc, #508]	; (8004204 <DisplayModuleStatus+0x2a8>)
 8004006:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8004008:	0032      	movs	r2, r6
 800400a:	4649      	mov	r1, r9
 800400c:	0028      	movs	r0, r5
 800400e:	f00e fcbd 	bl	801298c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004012:	0029      	movs	r1, r5
 8004014:	0020      	movs	r0, r4
 8004016:	f00e fcd9 	bl	80129cc <strcat>
		switch(portStatus[i]){
 800401a:	4643      	mov	r3, r8
 800401c:	3314      	adds	r3, #20
 800401e:	5cf3      	ldrb	r3, [r6, r3]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d80b      	bhi.n	800403c <DisplayModuleStatus+0xe0>
 8004024:	465a      	mov	r2, fp
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	58d3      	ldr	r3, [r2, r3]
 800402a:	469f      	mov	pc, r3
				break;
			case STREAM:
				sprintf(pcUserMessage,"Streaming\n\r");
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800402c:	002a      	movs	r2, r5
 800402e:	4b76      	ldr	r3, [pc, #472]	; (8004208 <DisplayModuleStatus+0x2ac>)
 8004030:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004032:	c283      	stmia	r2!, {r0, r1, r7}
 8004034:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004036:	c283      	stmia	r2!, {r0, r1, r7}
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	8013      	strh	r3, [r2, #0]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 800403c:	0029      	movs	r1, r5
 800403e:	0020      	movs	r0, r4
 8004040:	3601      	adds	r6, #1
 8004042:	f00e fcc3 	bl	80129cc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004046:	2e07      	cmp	r6, #7
 8004048:	d1de      	bne.n	8004008 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800404a:	002a      	movs	r2, r5
 800404c:	4b6f      	ldr	r3, [pc, #444]	; (800420c <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800404e:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004050:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004052:	c243      	stmia	r2!, {r0, r1, r6}
 8004054:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004056:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004058:	0029      	movs	r1, r5
 800405a:	0020      	movs	r0, r4
 800405c:	f00e fcb6 	bl	80129cc <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004060:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <DisplayModuleStatus+0x2b4>)
 8004062:	4e6c      	ldr	r6, [pc, #432]	; (8004214 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004064:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004066:	469b      	mov	fp, r3
 8004068:	e01d      	b.n	80040a6 <DisplayModuleStatus+0x14a>
 800406a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800406c:	f005 fe2a 	bl	8009cc4 <GetPort>
 8004070:	465a      	mov	r2, fp
 8004072:	00ab      	lsls	r3, r5, #2
 8004074:	3b04      	subs	r3, #4
 8004076:	0004      	movs	r4, r0
 8004078:	58d0      	ldr	r0, [r2, r3]
 800407a:	f005 fe23 	bl	8009cc4 <GetPort>
 800407e:	2340      	movs	r3, #64	; 0x40
 8004080:	4699      	mov	r9, r3
 8004082:	4b54      	ldr	r3, [pc, #336]	; (80041d4 <DisplayModuleStatus+0x278>)
 8004084:	002a      	movs	r2, r5
 8004086:	469c      	mov	ip, r3
 8004088:	44e1      	add	r9, ip
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	0023      	movs	r3, r4
 800408e:	4962      	ldr	r1, [pc, #392]	; (8004218 <DisplayModuleStatus+0x2bc>)
 8004090:	4648      	mov	r0, r9
 8004092:	f00e fc7b 	bl	801298c <sprintf>
 8004096:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004098:	4649      	mov	r1, r9
 800409a:	4640      	mov	r0, r8
 800409c:	f00e fc96 	bl	80129cc <strcat>
 80040a0:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a2:	2d07      	cmp	r5, #7
 80040a4:	d011      	beq.n	80040ca <DisplayModuleStatus+0x16e>
		if(streamDMA[i - 1].Instance == 0){
 80040a6:	6833      	ldr	r3, [r6, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1de      	bne.n	800406a <DisplayModuleStatus+0x10e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80040ac:	4c49      	ldr	r4, [pc, #292]	; (80041d4 <DisplayModuleStatus+0x278>)
 80040ae:	002a      	movs	r2, r5
 80040b0:	3440      	adds	r4, #64	; 0x40
 80040b2:	495a      	ldr	r1, [pc, #360]	; (800421c <DisplayModuleStatus+0x2c0>)
 80040b4:	0020      	movs	r0, r4
 80040b6:	f00e fc69 	bl	801298c <sprintf>
 80040ba:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80040bc:	0021      	movs	r1, r4
 80040be:	4640      	mov	r0, r8
 80040c0:	f00e fc84 	bl	80129cc <strcat>
 80040c4:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040c6:	2d07      	cmp	r5, #7
 80040c8:	d1ed      	bne.n	80040a6 <DisplayModuleStatus+0x14a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040ca:	4640      	mov	r0, r8
 80040cc:	f7fc f824 	bl	8000118 <strlen>
 80040d0:	4644      	mov	r4, r8
 80040d2:	0005      	movs	r5, r0
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
	temp =strlen((char* )pcOutputString);
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040d4:	2680      	movs	r6, #128	; 0x80
	strcat((char* )pcOutputString,"\n\r");
 80040d6:	4b52      	ldr	r3, [pc, #328]	; (8004220 <DisplayModuleStatus+0x2c4>)
 80040d8:	2202      	movs	r2, #2
 80040da:	0019      	movs	r1, r3
 80040dc:	1820      	adds	r0, r4, r0
 80040de:	4699      	mov	r9, r3
 80040e0:	f00e fa51 	bl	8012586 <memcpy>
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040e4:	1ca8      	adds	r0, r5, #2
 80040e6:	221d      	movs	r2, #29
 80040e8:	1820      	adds	r0, r4, r0
 80040ea:	494e      	ldr	r1, [pc, #312]	; (8004224 <DisplayModuleStatus+0x2c8>)
 80040ec:	f00e fa4b 	bl	8012586 <memcpy>
 80040f0:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <DisplayModuleStatus+0x2cc>)
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040f2:	4f38      	ldr	r7, [pc, #224]	; (80041d4 <DisplayModuleStatus+0x278>)
 80040f4:	4698      	mov	r8, r3
 80040f6:	4b4d      	ldr	r3, [pc, #308]	; (800422c <DisplayModuleStatus+0x2d0>)
	temp =strlen((char* )pcOutputString);
 80040f8:	351e      	adds	r5, #30
 80040fa:	9503      	str	r5, [sp, #12]
 80040fc:	2200      	movs	r2, #0
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040fe:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004100:	469b      	mov	fp, r3
 8004102:	3740      	adds	r7, #64	; 0x40
 8004104:	e002      	b.n	800410c <DisplayModuleStatus+0x1b0>
 8004106:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004108:	2d06      	cmp	r5, #6
 800410a:	d016      	beq.n	800413a <DisplayModuleStatus+0x1de>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800410c:	4653      	mov	r3, sl
 800410e:	4641      	mov	r1, r8
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	1c55      	adds	r5, r2, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	5acb      	ldrh	r3, [r1, r3]
 800411a:	0031      	movs	r1, r6
 800411c:	4111      	asrs	r1, r2
 800411e:	4219      	tst	r1, r3
 8004120:	d0f1      	beq.n	8004106 <DisplayModuleStatus+0x1aa>
			sprintf(pcUserMessage,"P%d ",p);
 8004122:	002a      	movs	r2, r5
 8004124:	4659      	mov	r1, fp
 8004126:	0038      	movs	r0, r7
 8004128:	f00e fc30 	bl	801298c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800412c:	0039      	movs	r1, r7
 800412e:	0020      	movs	r0, r4
 8004130:	f00e fc4c 	bl	80129cc <strcat>
 8004134:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004136:	2d06      	cmp	r5, #6
 8004138:	d1e8      	bne.n	800410c <DisplayModuleStatus+0x1b0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800413a:	0020      	movs	r0, r4
 800413c:	f7fb ffec 	bl	8000118 <strlen>
 8004140:	466b      	mov	r3, sp
 8004142:	899b      	ldrh	r3, [r3, #12]
 8004144:	0005      	movs	r5, r0
 8004146:	1820      	adds	r0, r4, r0
 8004148:	42ab      	cmp	r3, r5
 800414a:	d03c      	beq.n	80041c6 <DisplayModuleStatus+0x26a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 800414c:	2203      	movs	r2, #3
 800414e:	4649      	mov	r1, r9
 8004150:	f00e fa19 	bl	8012586 <memcpy>
	
	/* Display output */
	if(port)
 8004154:	9b02      	ldr	r3, [sp, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800415a:	0020      	movs	r0, r4
 800415c:	f7fb ffdc 	bl	8000118 <strlen>
 8004160:	2301      	movs	r3, #1
 8004162:	425b      	negs	r3, r3
 8004164:	b282      	uxth	r2, r0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	0021      	movs	r1, r4
 800416a:	3333      	adds	r3, #51	; 0x33
 800416c:	9802      	ldr	r0, [sp, #8]
 800416e:	f008 fddd 	bl	800cd2c <writePxMutex>
	
}
 8004172:	b005      	add	sp, #20
 8004174:	bc3c      	pop	{r2, r3, r4, r5}
 8004176:	4690      	mov	r8, r2
 8004178:	4699      	mov	r9, r3
 800417a:	46a2      	mov	sl, r4
 800417c:	46ab      	mov	fp, r5
 800417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004180:	002a      	movs	r2, r5
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <DisplayModuleStatus+0x2d4>)
 8004184:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004186:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004188:	e758      	b.n	800403c <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800418a:	002a      	movs	r2, r5
 800418c:	4b29      	ldr	r3, [pc, #164]	; (8004234 <DisplayModuleStatus+0x2d8>)
 800418e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004190:	c283      	stmia	r2!, {r0, r1, r7}
 8004192:	cb03      	ldmia	r3!, {r0, r1}
 8004194:	c203      	stmia	r2!, {r0, r1}
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	7013      	strb	r3, [r2, #0]
				break;
 800419a:	e74f      	b.n	800403c <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800419c:	002b      	movs	r3, r5
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <DisplayModuleStatus+0x2dc>)
 80041a0:	ca83      	ldmia	r2!, {r0, r1, r7}
 80041a2:	c383      	stmia	r3!, {r0, r1, r7}
 80041a4:	ca83      	ldmia	r2!, {r0, r1, r7}
 80041a6:	c383      	stmia	r3!, {r0, r1, r7}
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	6019      	str	r1, [r3, #0]
 80041ac:	8891      	ldrh	r1, [r2, #4]
 80041ae:	8099      	strh	r1, [r3, #4]
 80041b0:	7992      	ldrb	r2, [r2, #6]
 80041b2:	719a      	strb	r2, [r3, #6]
				break;
 80041b4:	e742      	b.n	800403c <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Free\n\r");
 80041b6:	4b21      	ldr	r3, [pc, #132]	; (800423c <DisplayModuleStatus+0x2e0>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	602a      	str	r2, [r5, #0]
 80041bc:	889a      	ldrh	r2, [r3, #4]
 80041be:	80aa      	strh	r2, [r5, #4]
 80041c0:	799b      	ldrb	r3, [r3, #6]
 80041c2:	71ab      	strb	r3, [r5, #6]
				break;
 80041c4:	e73a      	b.n	800403c <DisplayModuleStatus+0xe0>
		strcat((char* )pcOutputString,"None");
 80041c6:	2205      	movs	r2, #5
 80041c8:	491d      	ldr	r1, [pc, #116]	; (8004240 <DisplayModuleStatus+0x2e4>)
 80041ca:	f00e f9dc 	bl	8012586 <memcpy>
 80041ce:	1d28      	adds	r0, r5, #4
 80041d0:	1820      	adds	r0, r4, r0
 80041d2:	e7bb      	b.n	800414c <DisplayModuleStatus+0x1f0>
 80041d4:	20000b98 	.word	0x20000b98
 80041d8:	20000a98 	.word	0x20000a98
 80041dc:	080174e0 	.word	0x080174e0
 80041e0:	20000c18 	.word	0x20000c18
 80041e4:	080174fc 	.word	0x080174fc
 80041e8:	08017518 	.word	0x08017518
 80041ec:	08017538 	.word	0x08017538
 80041f0:	08017544 	.word	0x08017544
 80041f4:	0801755c 	.word	0x0801755c
 80041f8:	08017568 	.word	0x08017568
 80041fc:	08017584 	.word	0x08017584
 8004200:	08017598 	.word	0x08017598
 8004204:	08016d30 	.word	0x08016d30
 8004208:	080175cc 	.word	0x080175cc
 800420c:	08017608 	.word	0x08017608
 8004210:	200019a8 	.word	0x200019a8
 8004214:	2000247c 	.word	0x2000247c
 8004218:	0801763c 	.word	0x0801763c
 800421c:	08017620 	.word	0x08017620
 8004220:	08017594 	.word	0x08017594
 8004224:	0801766c 	.word	0x0801766c
 8004228:	2000719c 	.word	0x2000719c
 800422c:	0801768c 	.word	0x0801768c
 8004230:	080175c0 	.word	0x080175c0
 8004234:	080175a8 	.word	0x080175a8
 8004238:	080175e8 	.word	0x080175e8
 800423c:	080175a0 	.word	0x080175a0
 8004240:	08017694 	.word	0x08017694

08004244 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004248:	4929      	ldr	r1, [pc, #164]	; (80042f0 <GetID+0xac>)
int16_t GetID(char *string){
 800424a:	b500      	push	{lr}
 800424c:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 800424e:	f7fb ff59 	bl	8000104 <strcmp>
 8004252:	2800      	cmp	r0, #0
 8004254:	d02c      	beq.n	80042b0 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 8004256:	4927      	ldr	r1, [pc, #156]	; (80042f4 <GetID+0xb0>)
 8004258:	0030      	movs	r0, r6
 800425a:	f7fb ff53 	bl	8000104 <strcmp>
 800425e:	2800      	cmp	r0, #0
 8004260:	d02b      	beq.n	80042ba <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004262:	7833      	ldrb	r3, [r6, #0]
 8004264:	4698      	mov	r8, r3
 8004266:	2b23      	cmp	r3, #35	; 0x23
 8004268:	d030      	beq.n	80042cc <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <GetID+0xb4>)
 800426c:	781f      	ldrb	r7, [r3, #0]
 800426e:	2f00      	cmp	r7, #0
 8004270:	d00f      	beq.n	8004292 <GetID+0x4e>
 8004272:	2400      	movs	r4, #0
 8004274:	4d21      	ldr	r5, [pc, #132]	; (80042fc <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004276:	0029      	movs	r1, r5
 8004278:	0030      	movs	r0, r6
 800427a:	f7fb ff43 	bl	8000104 <strcmp>
 800427e:	2800      	cmp	r0, #0
 8004280:	d102      	bne.n	8004288 <GetID+0x44>
 8004282:	4643      	mov	r3, r8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11a      	bne.n	80042be <GetID+0x7a>
		for(i =0; i < N; i++){
 8004288:	3401      	adds	r4, #1
 800428a:	b2e4      	uxtb	r4, r4
 800428c:	350a      	adds	r5, #10
 800428e:	42a7      	cmp	r7, r4
 8004290:	d1f1      	bne.n	8004276 <GetID+0x32>
 8004292:	2400      	movs	r4, #0
 8004294:	4d1a      	ldr	r5, [pc, #104]	; (8004300 <GetID+0xbc>)
 8004296:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004298:	0029      	movs	r1, r5
 800429a:	0030      	movs	r0, r6
 800429c:	f7fb ff32 	bl	8000104 <strcmp>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d00e      	beq.n	80042c2 <GetID+0x7e>
 80042a4:	3401      	adds	r4, #1
 80042a6:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80042a8:	2c0a      	cmp	r4, #10
 80042aa:	d1f5      	bne.n	8004298 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80042ac:	2064      	movs	r0, #100	; 0x64
 80042ae:	e001      	b.n	80042b4 <GetID+0x70>
		return myID;
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <GetID+0xbc>)
 80042b2:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80042b4:	bc04      	pop	{r2}
 80042b6:	4690      	mov	r8, r2
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80042ba:	20ff      	movs	r0, #255	; 0xff
 80042bc:	e7fa      	b.n	80042b4 <GetID+0x70>
				return (i);
 80042be:	b220      	sxth	r0, r4
 80042c0:	e7f8      	b.n	80042b4 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80042c2:	20fe      	movs	r0, #254	; 0xfe
 80042c4:	0224      	lsls	r4, r4, #8
 80042c6:	4320      	orrs	r0, r4
 80042c8:	b200      	sxth	r0, r0
 80042ca:	e7f3      	b.n	80042b4 <GetID+0x70>
		id =atol(string + 1);
 80042cc:	1c70      	adds	r0, r6, #1
 80042ce:	f00d fe9a 	bl	8012006 <atol>
 80042d2:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <GetID+0x9c>
 80042d8:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <GetID+0xb4>)
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d204      	bcs.n	80042ea <GetID+0xa6>
		else if(id == myID)
 80042e0:	4a07      	ldr	r2, [pc, #28]	; (8004300 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 80042e2:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d1e4      	bne.n	80042b4 <GetID+0x70>
			return myID;
 80042ea:	b218      	sxth	r0, r3
 80042ec:	e7e2      	b.n	80042b4 <GetID+0x70>
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	0801769c 	.word	0x0801769c
 80042f4:	080176a0 	.word	0x080176a0
 80042f8:	20000008 	.word	0x20000008
 80042fc:	20000dfc 	.word	0x20000dfc
 8004300:	20000a98 	.word	0x20000a98

08004304 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	46c6      	mov	lr, r8
 8004308:	4c2c      	ldr	r4, [pc, #176]	; (80043bc <NameModule+0xb8>)
 800430a:	0007      	movs	r7, r0
 800430c:	0026      	movs	r6, r4
 800430e:	000d      	movs	r5, r1
 8004310:	b500      	push	{lr}
 8004312:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 8004314:	0021      	movs	r1, r4
 8004316:	0028      	movs	r0, r5
 8004318:	f7fb fef4 	bl	8000104 <strcmp>
 800431c:	2800      	cmp	r0, #0
 800431e:	d040      	beq.n	80043a2 <NameModule+0x9e>
 8004320:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 8004322:	42a6      	cmp	r6, r4
 8004324:	d1f6      	bne.n	8004314 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <NameModule+0xbc>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d914      	bls.n	8004358 <NameModule+0x54>
 800432e:	4c25      	ldr	r4, [pc, #148]	; (80043c4 <NameModule+0xc0>)
 8004330:	009e      	lsls	r6, r3, #2
 8004332:	18f6      	adds	r6, r6, r3
 8004334:	0023      	movs	r3, r4
 8004336:	0076      	lsls	r6, r6, #1
 8004338:	3b0a      	subs	r3, #10
 800433a:	18f6      	adds	r6, r6, r3
 800433c:	e002      	b.n	8004344 <NameModule+0x40>
 800433e:	340a      	adds	r4, #10
 8004340:	42b4      	cmp	r4, r6
 8004342:	d009      	beq.n	8004358 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 8004344:	0021      	movs	r1, r4
 8004346:	0028      	movs	r0, r5
 8004348:	f7fb fedc 	bl	8000104 <strcmp>
 800434c:	2800      	cmp	r0, #0
 800434e:	d1f6      	bne.n	800433e <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 8004350:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 8004352:	bc04      	pop	{r2}
 8004354:	4690      	mov	r8, r2
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004358:	4e1b      	ldr	r6, [pc, #108]	; (80043c8 <NameModule+0xc4>)
 800435a:	0034      	movs	r4, r6
 800435c:	369c      	adds	r6, #156	; 0x9c
 800435e:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004360:	0021      	movs	r1, r4
 8004362:	0028      	movs	r0, r5
 8004364:	f7fb fece 	bl	8000104 <strcmp>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0f1      	beq.n	8004350 <NameModule+0x4c>
 800436c:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800436e:	42a6      	cmp	r6, r4
 8004370:	d1f6      	bne.n	8004360 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004372:	4b16      	ldr	r3, [pc, #88]	; (80043cc <NameModule+0xc8>)
 8004374:	4c16      	ldr	r4, [pc, #88]	; (80043d0 <NameModule+0xcc>)
 8004376:	4698      	mov	r8, r3
 8004378:	61dc      	str	r4, [r3, #28]
 800437a:	e004      	b.n	8004386 <NameModule+0x82>
 800437c:	4643      	mov	r3, r8
 800437e:	6864      	ldr	r4, [r4, #4]
 8004380:	61dc      	str	r4, [r3, #28]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d00f      	beq.n	80043a6 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800438a:	0030      	movs	r0, r6
 800438c:	f7fb fec4 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004390:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004392:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004394:	0028      	movs	r0, r5
 8004396:	f00e fb3d 	bl	8012a14 <strncmp>
 800439a:	2800      	cmp	r0, #0
 800439c:	d1ee      	bne.n	800437c <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800439e:	2008      	movs	r0, #8
 80043a0:	e7d7      	b.n	8004352 <NameModule+0x4e>
			return BOS_ERR_Keyword;
 80043a2:	2006      	movs	r0, #6
 80043a4:	e7d5      	b.n	8004352 <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80043a6:	00b8      	lsls	r0, r7, #2
 80043a8:	19c0      	adds	r0, r0, r7
 80043aa:	4f0a      	ldr	r7, [pc, #40]	; (80043d4 <NameModule+0xd0>)
 80043ac:	0040      	lsls	r0, r0, #1
 80043ae:	0029      	movs	r1, r5
 80043b0:	19c0      	adds	r0, r0, r7
 80043b2:	f00e fb27 	bl	8012a04 <strcpy>
	result =SaveEEalias();
 80043b6:	f7ff f881 	bl	80034bc <SaveEEalias>
	return result;
 80043ba:	e7ca      	b.n	8004352 <NameModule+0x4e>
 80043bc:	08016d8c 	.word	0x08016d8c
 80043c0:	20000008 	.word	0x20000008
 80043c4:	20000e06 	.word	0x20000e06
 80043c8:	20000a98 	.word	0x20000a98
 80043cc:	20000c18 	.word	0x20000c18
 80043d0:	200000bc 	.word	0x200000bc
 80043d4:	20000dfc 	.word	0x20000dfc

080043d8 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	464f      	mov	r7, r9
 80043dc:	4646      	mov	r6, r8
 80043de:	46d6      	mov	lr, sl
 80043e0:	4b3e      	ldr	r3, [pc, #248]	; (80044dc <AddModuleToGroup+0x104>)
 80043e2:	b5c0      	push	{r6, r7, lr}
 80043e4:	001f      	movs	r7, r3
 80043e6:	3738      	adds	r7, #56	; 0x38
 80043e8:	4680      	mov	r8, r0
 80043ea:	000e      	movs	r6, r1
 80043ec:	4699      	mov	r9, r3
 80043ee:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043f0:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043f2:	0021      	movs	r1, r4
 80043f4:	0030      	movs	r0, r6
 80043f6:	f7fb fe85 	bl	8000104 <strcmp>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d02a      	beq.n	8004454 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 80043fe:	3501      	adds	r5, #1
 8004400:	340a      	adds	r4, #10
 8004402:	2d0a      	cmp	r5, #10
 8004404:	d1f5      	bne.n	80043f2 <AddModuleToGroup+0x1a>
 8004406:	4c36      	ldr	r4, [pc, #216]	; (80044e0 <AddModuleToGroup+0x108>)
 8004408:	0025      	movs	r5, r4
 800440a:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 800440c:	0021      	movs	r1, r4
 800440e:	0030      	movs	r0, r6
 8004410:	f7fb fe78 	bl	8000104 <strcmp>
 8004414:	2800      	cmp	r0, #0
 8004416:	d051      	beq.n	80044bc <AddModuleToGroup+0xe4>
 8004418:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 800441a:	42a5      	cmp	r5, r4
 800441c:	d1f6      	bne.n	800440c <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <AddModuleToGroup+0x10c>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d920      	bls.n	8004468 <AddModuleToGroup+0x90>
 8004426:	4c30      	ldr	r4, [pc, #192]	; (80044e8 <AddModuleToGroup+0x110>)
 8004428:	009d      	lsls	r5, r3, #2
 800442a:	18ed      	adds	r5, r5, r3
 800442c:	0023      	movs	r3, r4
 800442e:	006d      	lsls	r5, r5, #1
 8004430:	3b0a      	subs	r3, #10
 8004432:	18ed      	adds	r5, r5, r3
 8004434:	e002      	b.n	800443c <AddModuleToGroup+0x64>
 8004436:	340a      	adds	r4, #10
 8004438:	42a5      	cmp	r5, r4
 800443a:	d015      	beq.n	8004468 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 800443c:	0021      	movs	r1, r4
 800443e:	0030      	movs	r0, r6
 8004440:	f7fb fe60 	bl	8000104 <strcmp>
 8004444:	2800      	cmp	r0, #0
 8004446:	d1f6      	bne.n	8004436 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 8004448:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 800444a:	bc1c      	pop	{r2, r3, r4}
 800444c:	4690      	mov	r8, r2
 800444e:	4699      	mov	r9, r3
 8004450:	46a2      	mov	sl, r4
 8004452:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 8004454:	2201      	movs	r2, #1
 8004456:	4647      	mov	r7, r8
 8004458:	40aa      	lsls	r2, r5
 800445a:	3f01      	subs	r7, #1
 800445c:	007f      	lsls	r7, r7, #1
 800445e:	444f      	add	r7, r9
 8004460:	88bb      	ldrh	r3, [r7, #4]
 8004462:	4313      	orrs	r3, r2
 8004464:	80bb      	strh	r3, [r7, #4]
			return result;
 8004466:	e7f0      	b.n	800444a <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004468:	4b20      	ldr	r3, [pc, #128]	; (80044ec <AddModuleToGroup+0x114>)
 800446a:	4c21      	ldr	r4, [pc, #132]	; (80044f0 <AddModuleToGroup+0x118>)
 800446c:	469a      	mov	sl, r3
 800446e:	621c      	str	r4, [r3, #32]
 8004470:	e004      	b.n	800447c <AddModuleToGroup+0xa4>
 8004472:	4653      	mov	r3, sl
 8004474:	6864      	ldr	r4, [r4, #4]
 8004476:	621c      	str	r4, [r3, #32]
 8004478:	2c00      	cmp	r4, #0
 800447a:	d00d      	beq.n	8004498 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004480:	0028      	movs	r0, r5
 8004482:	f7fb fe49 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004486:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004488:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800448a:	0030      	movs	r0, r6
 800448c:	f00e fac2 	bl	8012a14 <strncmp>
 8004490:	2800      	cmp	r0, #0
 8004492:	d1ee      	bne.n	8004472 <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004494:	2008      	movs	r0, #8
 8004496:	e7d8      	b.n	800444a <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004498:	783b      	ldrb	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d010      	beq.n	80044c0 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800449e:	3401      	adds	r4, #1
 80044a0:	370a      	adds	r7, #10
 80044a2:	2c0a      	cmp	r4, #10
 80044a4:	d1f8      	bne.n	8004498 <AddModuleToGroup+0xc0>
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80044aa:	4647      	mov	r7, r8
 80044ac:	3f01      	subs	r7, #1
 80044ae:	007f      	lsls	r7, r7, #1
 80044b0:	444f      	add	r7, r9
 80044b2:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80044b4:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80044b6:	4313      	orrs	r3, r2
 80044b8:	80bb      	strh	r3, [r7, #4]
	return result;
 80044ba:	e7c6      	b.n	800444a <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80044bc:	2006      	movs	r0, #6
 80044be:	e7c4      	b.n	800444a <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80044c0:	464b      	mov	r3, r9
 80044c2:	00a0      	lsls	r0, r4, #2
 80044c4:	1900      	adds	r0, r0, r4
 80044c6:	3338      	adds	r3, #56	; 0x38
 80044c8:	0040      	lsls	r0, r0, #1
 80044ca:	1818      	adds	r0, r3, r0
 80044cc:	0031      	movs	r1, r6
 80044ce:	f00e fa99 	bl	8012a04 <strcpy>
 80044d2:	2301      	movs	r3, #1
 80044d4:	40a3      	lsls	r3, r4
 80044d6:	b21b      	sxth	r3, r3
			break;
 80044d8:	e7e7      	b.n	80044aa <AddModuleToGroup+0xd2>
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	20000a98 	.word	0x20000a98
 80044e0:	08016d8c 	.word	0x08016d8c
 80044e4:	20000008 	.word	0x20000008
 80044e8:	20000e06 	.word	0x20000e06
 80044ec:	20000c18 	.word	0x20000c18
 80044f0:	200000bc 	.word	0x200000bc

080044f4 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f6:	4645      	mov	r5, r8
 80044f8:	4657      	mov	r7, sl
 80044fa:	464e      	mov	r6, r9
 80044fc:	46de      	mov	lr, fp
 80044fe:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004500:	4f82      	ldr	r7, [pc, #520]	; (800470c <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004502:	b083      	sub	sp, #12
 8004504:	ac0c      	add	r4, sp, #48	; 0x30
 8004506:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 8004508:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800450a:	9001      	str	r0, [sp, #4]
 800450c:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 800450e:	46a8      	mov	r8, r5
	if(timeout)
 8004510:	2e00      	cmp	r6, #0
 8004512:	d059      	beq.n	80045c8 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004514:	2520      	movs	r5, #32
 8004516:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 8004518:	4265      	negs	r5, r4
 800451a:	416c      	adcs	r4, r5
 800451c:	2501      	movs	r5, #1
 800451e:	2022      	movs	r0, #34	; 0x22
 8004520:	4264      	negs	r4, r4
 8004522:	43ac      	bics	r4, r5
 8004524:	46a3      	mov	fp, r4
 8004526:	4684      	mov	ip, r0
 8004528:	b2d5      	uxtb	r5, r2
 800452a:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 800452c:	4d78      	ldr	r5, [pc, #480]	; (8004710 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 800452e:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004530:	42aa      	cmp	r2, r5
 8004532:	d829      	bhi.n	8004588 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004534:	2224      	movs	r2, #36	; 0x24
 8004536:	464c      	mov	r4, r9
 8004538:	4d76      	ldr	r5, [pc, #472]	; (8004714 <WriteToRemote+0x220>)
 800453a:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 800453c:	002a      	movs	r2, r5
 800453e:	3224      	adds	r2, #36	; 0x24
 8004540:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004542:	2b08      	cmp	r3, #8
 8004544:	d814      	bhi.n	8004570 <WriteToRemote+0x7c>
 8004546:	4a74      	ldr	r2, [pc, #464]	; (8004718 <WriteToRemote+0x224>)
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	58d3      	ldr	r3, [r2, r3]
 800454c:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800454e:	680b      	ldr	r3, [r1, #0]
 8004550:	3524      	adds	r5, #36	; 0x24
 8004552:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004554:	680b      	ldr	r3, [r1, #0]
 8004556:	121b      	asrs	r3, r3, #8
 8004558:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800455a:	680b      	ldr	r3, [r1, #0]
 800455c:	141b      	asrs	r3, r3, #16
 800455e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004560:	680b      	ldr	r3, [r1, #0]
 8004562:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004564:	220a      	movs	r2, #10
 8004566:	4659      	mov	r1, fp
 8004568:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800456a:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 800456c:	f003 fdfa 	bl	8008164 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004570:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004572:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004574:	703b      	strb	r3, [r7, #0]
	if(timeout){
 8004576:	2e00      	cmp	r6, #0
 8004578:	d128      	bne.n	80045cc <WriteToRemote+0xd8>
}
 800457a:	b003      	add	sp, #12
 800457c:	bc3c      	pop	{r2, r3, r4, r5}
 800457e:	4690      	mov	r8, r2
 8004580:	4699      	mov	r9, r3
 8004582:	46a2      	mov	sl, r4
 8004584:	46ab      	mov	fp, r5
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 8004588:	2024      	movs	r0, #36	; 0x24
 800458a:	4684      	mov	ip, r0
 800458c:	2000      	movs	r0, #0
 800458e:	4682      	mov	sl, r0
 8004590:	4660      	mov	r0, ip
 8004592:	4654      	mov	r4, sl
 8004594:	4d5f      	ldr	r5, [pc, #380]	; (8004714 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 8004596:	44ac      	add	ip, r5
		messageParams[0] =0;
 8004598:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 800459a:	4660      	mov	r0, ip
 800459c:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 800459e:	0e10      	lsrs	r0, r2, #24
 80045a0:	4682      	mov	sl, r0
 80045a2:	4660      	mov	r0, ip
 80045a4:	4654      	mov	r4, sl
 80045a6:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045a8:	0c10      	lsrs	r0, r2, #16
 80045aa:	4682      	mov	sl, r0
 80045ac:	4660      	mov	r0, ip
 80045ae:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80045b0:	0a12      	lsrs	r2, r2, #8
 80045b2:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045b4:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80045b6:	4662      	mov	r2, ip
 80045b8:	4648      	mov	r0, r9
 80045ba:	7150      	strb	r0, [r2, #5]
		switch(format){
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d8d7      	bhi.n	8004570 <WriteToRemote+0x7c>
 80045c0:	4a56      	ldr	r2, [pc, #344]	; (800471c <WriteToRemote+0x228>)
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	58d3      	ldr	r3, [r2, r3]
 80045c6:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80045c8:	703e      	strb	r6, [r7, #0]
 80045ca:	e7a5      	b.n	8004518 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80045cc:	f00a fbd8 	bl	800ed80 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045d0:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80045d2:	0007      	movs	r7, r0
 80045d4:	4d52      	ldr	r5, [pc, #328]	; (8004720 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045d6:	5d28      	ldrb	r0, [r5, r4]
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0ce      	beq.n	800457a <WriteToRemote+0x86>
 80045dc:	f00a fbd0 	bl	800ed80 <HAL_GetTick>
 80045e0:	1bc0      	subs	r0, r0, r7
 80045e2:	42b0      	cmp	r0, r6
 80045e4:	d3f7      	bcc.n	80045d6 <WriteToRemote+0xe2>
 80045e6:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80045e8:	e7c7      	b.n	800457a <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045ea:	780b      	ldrb	r3, [r1, #0]
 80045ec:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045ee:	2203      	movs	r2, #3
 80045f0:	2120      	movs	r1, #32
 80045f2:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045f4:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045f6:	f003 fdb5 	bl	8008164 <SendMessageToModule>
				break;
 80045fa:	e7b9      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 80045fc:	780b      	ldrb	r3, [r1, #0]
 80045fe:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004600:	2207      	movs	r2, #7
 8004602:	4659      	mov	r1, fp
 8004604:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004606:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004608:	f003 fdac 	bl	8008164 <SendMessageToModule>
				break;
 800460c:	e7b0      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 800460e:	680b      	ldr	r3, [r1, #0]
 8004610:	3524      	adds	r5, #36	; 0x24
 8004612:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004614:	680b      	ldr	r3, [r1, #0]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	e79e      	b.n	8004564 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 8004626:	780b      	ldrb	r3, [r1, #0]
 8004628:	3524      	adds	r5, #36	; 0x24
 800462a:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 800462c:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800462e:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004630:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004632:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004634:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004636:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004638:	78cb      	ldrb	r3, [r1, #3]
 800463a:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 800463c:	790b      	ldrb	r3, [r1, #4]
 800463e:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004640:	794b      	ldrb	r3, [r1, #5]
 8004642:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004644:	798b      	ldrb	r3, [r1, #6]
 8004646:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004648:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800464a:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800464c:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800464e:	f003 fd89 	bl	8008164 <SendMessageToModule>
				break;
 8004652:	e78d      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004654:	780b      	ldrb	r3, [r1, #0]
 8004656:	3524      	adds	r5, #36	; 0x24
 8004658:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800465a:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 800465c:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800465e:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004660:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004662:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004664:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004666:	78cb      	ldrb	r3, [r1, #3]
 8004668:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800466a:	790b      	ldrb	r3, [r1, #4]
 800466c:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800466e:	794b      	ldrb	r3, [r1, #5]
 8004670:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004672:	798b      	ldrb	r3, [r1, #6]
 8004674:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004676:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 8004678:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800467a:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 800467c:	f003 fd72 	bl	8008164 <SendMessageToModule>
				break;
 8004680:	e776      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004682:	880b      	ldrh	r3, [r1, #0]
 8004684:	3524      	adds	r5, #36	; 0x24
 8004686:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004688:	880b      	ldrh	r3, [r1, #0]
 800468a:	b21b      	sxth	r3, r3
 800468c:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 800468e:	2208      	movs	r2, #8
 8004690:	4659      	mov	r1, fp
 8004692:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004694:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 8004696:	f003 fd65 	bl	8008164 <SendMessageToModule>
				break;
 800469a:	e769      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 800469c:	880b      	ldrh	r3, [r1, #0]
 800469e:	3524      	adds	r5, #36	; 0x24
 80046a0:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80046a2:	880b      	ldrh	r3, [r1, #0]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	e7f2      	b.n	800468e <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80046a8:	680b      	ldr	r3, [r1, #0]
 80046aa:	3524      	adds	r5, #36	; 0x24
 80046ac:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80046ae:	680b      	ldr	r3, [r1, #0]
 80046b0:	121b      	asrs	r3, r3, #8
 80046b2:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80046b4:	680b      	ldr	r3, [r1, #0]
 80046b6:	141b      	asrs	r3, r3, #16
 80046b8:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046ba:	680b      	ldr	r3, [r1, #0]
 80046bc:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046be:	2206      	movs	r2, #6
 80046c0:	2120      	movs	r1, #32
 80046c2:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046c4:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046c6:	f003 fd4d 	bl	8008164 <SendMessageToModule>
				break;
 80046ca:	e751      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80046cc:	680b      	ldr	r3, [r1, #0]
 80046ce:	3524      	adds	r5, #36	; 0x24
 80046d0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80046d2:	680b      	ldr	r3, [r1, #0]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80046d8:	680b      	ldr	r3, [r1, #0]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80046de:	680b      	ldr	r3, [r1, #0]
 80046e0:	0e1b      	lsrs	r3, r3, #24
 80046e2:	e7ec      	b.n	80046be <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80046e4:	880b      	ldrh	r3, [r1, #0]
 80046e6:	3524      	adds	r5, #36	; 0x24
 80046e8:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046ea:	880b      	ldrh	r3, [r1, #0]
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046f0:	2204      	movs	r2, #4
 80046f2:	2120      	movs	r1, #32
 80046f4:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046f6:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046f8:	f003 fd34 	bl	8008164 <SendMessageToModule>
				break;
 80046fc:	e738      	b.n	8004570 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80046fe:	880b      	ldrh	r3, [r1, #0]
 8004700:	3524      	adds	r5, #36	; 0x24
 8004702:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004704:	880b      	ldrh	r3, [r1, #0]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	e7f2      	b.n	80046f0 <WriteToRemote+0x1fc>
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	20006c00 	.word	0x20006c00
 8004710:	07ffffff 	.word	0x07ffffff
 8004714:	20000b18 	.word	0x20000b18
 8004718:	08016d44 	.word	0x08016d44
 800471c:	08016d68 	.word	0x08016d68
 8004720:	20000c18 	.word	0x20000c18

08004724 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004724:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004726:	2101      	movs	r1, #1
char* GetDateString(void){
 8004728:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 800472a:	201e      	movs	r0, #30
 800472c:	f00d fc72 	bl	8012014 <calloc>
 8004730:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004732:	4809      	ldr	r0, [pc, #36]	; (8004758 <GetDateString+0x34>)
 8004734:	4909      	ldr	r1, [pc, #36]	; (800475c <GetDateString+0x38>)
 8004736:	7d02      	ldrb	r2, [r0, #20]
 8004738:	8b05      	ldrh	r5, [r0, #24]
 800473a:	7d83      	ldrb	r3, [r0, #22]
 800473c:	3a01      	subs	r2, #1
 800473e:	9501      	str	r5, [sp, #4]
 8004740:	7d40      	ldrb	r0, [r0, #21]
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	188a      	adds	r2, r1, r2
 8004746:	9000      	str	r0, [sp, #0]
 8004748:	6912      	ldr	r2, [r2, #16]
 800474a:	312c      	adds	r1, #44	; 0x2c
 800474c:	0020      	movs	r0, r4
 800474e:	f00e f91d 	bl	801298c <sprintf>
	return buffer;
}
 8004752:	0020      	movs	r0, r4
 8004754:	b003      	add	sp, #12
 8004756:	bd30      	pop	{r4, r5, pc}
 8004758:	20006c80 	.word	0x20006c80
 800475c:	08016d8c 	.word	0x08016d8c

08004760 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004760:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004764:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004766:	7819      	ldrb	r1, [r3, #0]
 8004768:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800476a:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	3b02      	subs	r3, #2
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	3303      	adds	r3, #3
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	000b      	movs	r3, r1
 800477a:	f003 fd17 	bl	80081ac <StartScastDMAStream>
}
 800477e:	b005      	add	sp, #20
 8004780:	bd00      	pop	{pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	20000a98 	.word	0x20000a98

08004788 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004788:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800478a:	b530      	push	{r4, r5, lr}
 800478c:	0004      	movs	r4, r0
 800478e:	000d      	movs	r5, r1
 8004790:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004792:	9304      	str	r3, [sp, #16]
 8004794:	9303      	str	r3, [sp, #12]
 8004796:	9302      	str	r3, [sp, #8]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	2000      	movs	r0, #0
 80047a2:	f7fe fecf 	bl	8003544 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047a6:	1e60      	subs	r0, r4, #1
 80047a8:	00c3      	lsls	r3, r0, #3
 80047aa:	4912      	ldr	r1, [pc, #72]	; (80047f4 <Unbridge+0x6c>)
 80047ac:	1a1b      	subs	r3, r3, r0
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	585b      	ldr	r3, [r3, r1]
 80047b2:	1e6a      	subs	r2, r5, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <Unbridge+0x56>
 80047b8:	00d3      	lsls	r3, r2, #3
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80047c0:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80047c6:	f006 f81f 	bl	800a808 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047ca:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80047cc:	b007      	add	sp, #28
 80047ce:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80047d0:	f006 f81a 	bl	800a808 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80047d4:	0028      	movs	r0, r5
 80047d6:	f006 f817 	bl	800a808 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047da:	2000      	movs	r0, #0
 80047dc:	e7f6      	b.n	80047cc <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80047de:	00d3      	lsls	r3, r2, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	585b      	ldr	r3, [r3, r1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80047ea:	0028      	movs	r0, r5
 80047ec:	e7eb      	b.n	80047c6 <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 80047ee:	2068      	movs	r0, #104	; 0x68
 80047f0:	e7ec      	b.n	80047cc <Unbridge+0x44>
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	2000247c 	.word	0x2000247c

080047f8 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	46d6      	mov	lr, sl
 80047fc:	4646      	mov	r6, r8
 80047fe:	464f      	mov	r7, r9
 8004800:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004802:	4e27      	ldr	r6, [pc, #156]	; (80048a0 <AddSnippet.part.0+0xa8>)
 8004804:	4d27      	ldr	r5, [pc, #156]	; (80048a4 <AddSnippet.part.0+0xac>)
 8004806:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004808:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 800480a:	3b01      	subs	r3, #1
 800480c:	009c      	lsls	r4, r3, #2
 800480e:	18e4      	adds	r4, r4, r3
 8004810:	00a4      	lsls	r4, r4, #2
 8004812:	192c      	adds	r4, r5, r4
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	469a      	mov	sl, r3
 8004818:	f7fb fc7e 	bl	8000118 <strlen>
 800481c:	4653      	mov	r3, sl
 800481e:	4681      	mov	r9, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02e      	beq.n	8004882 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004824:	4650      	mov	r0, sl
 8004826:	f7fb fc77 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800482a:	4649      	mov	r1, r9
 800482c:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 800482e:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004830:	1809      	adds	r1, r1, r0
 8004832:	4650      	mov	r0, sl
 8004834:	f00d fee2 	bl	80125fc <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004838:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800483a:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 800483c:	3a01      	subs	r2, #1
 800483e:	0093      	lsls	r3, r2, #2
 8004840:	189b      	adds	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	18eb      	adds	r3, r5, r3
 8004846:	68d8      	ldr	r0, [r3, #12]
 8004848:	1c7a      	adds	r2, r7, #1
 800484a:	1880      	adds	r0, r0, r2
 800484c:	4641      	mov	r1, r8
 800484e:	f00e f8d9 	bl	8012a04 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004852:	7832      	ldrb	r2, [r6, #0]
 8004854:	3a01      	subs	r2, #1
 8004856:	0093      	lsls	r3, r2, #2
 8004858:	189b      	adds	r3, r3, r2
 800485a:	2213      	movs	r2, #19
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	18eb      	adds	r3, r5, r3
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	55da      	strb	r2, [r3, r7]
 8004864:	7833      	ldrb	r3, [r6, #0]
 8004866:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004868:	0098      	lsls	r0, r3, #2
 800486a:	18c0      	adds	r0, r0, r3
 800486c:	0080      	lsls	r0, r0, #2
 800486e:	1828      	adds	r0, r5, r0
 8004870:	68c3      	ldr	r3, [r0, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004876:	2000      	movs	r0, #0
}
 8004878:	bc1c      	pop	{r2, r3, r4}
 800487a:	4690      	mov	r8, r2
 800487c:	4699      	mov	r9, r3
 800487e:	46a2      	mov	sl, r4
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004882:	3001      	adds	r0, #1
 8004884:	f00d fc32 	bl	80120ec <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004888:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800488a:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 800488c:	f00e f8ba 	bl	8012a04 <strcpy>
 8004890:	e7f1      	b.n	8004876 <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004892:	2214      	movs	r2, #20
 8004894:	2100      	movs	r1, #0
 8004896:	f00d fe7f 	bl	8012598 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800489a:	200e      	movs	r0, #14
 800489c:	e7ec      	b.n	8004878 <AddSnippet.part.0+0x80>
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	2000182c 	.word	0x2000182c
 80048a4:	20006c9c 	.word	0x20006c9c

080048a8 <StringToLowerCase>:
void StringToLowerCase(char *string){
 80048a8:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 80048aa:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 80048ac:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	d00d      	beq.n	80048ce <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 80048b2:	2603      	movs	r6, #3
 80048b4:	f00d fc0c 	bl	80120d0 <__locale_ctype_ptr>
 80048b8:	1900      	adds	r0, r0, r4
 80048ba:	7842      	ldrb	r2, [r0, #1]
 80048bc:	4032      	ands	r2, r6
 80048be:	2a01      	cmp	r2, #1
 80048c0:	d100      	bne.n	80048c4 <StringToLowerCase+0x1c>
 80048c2:	3420      	adds	r4, #32
 80048c4:	702c      	strb	r4, [r5, #0]
 80048c6:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80048c8:	782c      	ldrb	r4, [r5, #0]
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d1f2      	bne.n	80048b4 <StringToLowerCase+0xc>
}
 80048ce:	bd70      	pop	{r4, r5, r6, pc}

080048d0 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	4657      	mov	r7, sl
 80048d4:	464e      	mov	r6, r9
 80048d6:	46de      	mov	lr, fp
 80048d8:	4645      	mov	r5, r8
 80048da:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048dc:	4ed8      	ldr	r6, [pc, #864]	; (8004c40 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 80048de:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e0:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 80048e2:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e4:	2c05      	cmp	r4, #5
 80048e6:	d067      	beq.n	80049b8 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048e8:	00a3      	lsls	r3, r4, #2
 80048ea:	4dd6      	ldr	r5, [pc, #856]	; (8004c44 <ParseSnippetCondition+0x374>)
 80048ec:	1918      	adds	r0, r3, r4
 80048ee:	0080      	lsls	r0, r0, #2
 80048f0:	469a      	mov	sl, r3
 80048f2:	182b      	adds	r3, r5, r0
 80048f4:	4699      	mov	r9, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80048fa:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048fc:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80048fe:	1828      	adds	r0, r5, r0
 8004900:	2204      	movs	r2, #4
 8004902:	2100      	movs	r1, #0
 8004904:	f00d fe48 	bl	8012598 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004908:	783b      	ldrb	r3, [r7, #0]
 800490a:	2b62      	cmp	r3, #98	; 0x62
 800490c:	d102      	bne.n	8004914 <ParseSnippetCondition+0x44>
 800490e:	78bb      	ldrb	r3, [r7, #2]
 8004910:	2b2e      	cmp	r3, #46	; 0x2e
 8004912:	d057      	beq.n	80049c4 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004914:	1d33      	adds	r3, r6, #4
 8004916:	4698      	mov	r8, r3
 8004918:	0018      	movs	r0, r3
 800491a:	0039      	movs	r1, r7
 800491c:	f00e f872 	bl	8012a04 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004920:	4cc9      	ldr	r4, [pc, #804]	; (8004c48 <ParseSnippetCondition+0x378>)
 8004922:	4640      	mov	r0, r8
 8004924:	0021      	movs	r1, r4
 8004926:	f00e feed 	bl	8013704 <strtok>
		secondPart =strtok( NULL," ");
 800492a:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 800492c:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 800492e:	2000      	movs	r0, #0
 8004930:	f00e fee8 	bl	8013704 <strtok>
		thirdPart =strtok( NULL," ");
 8004934:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004936:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004938:	2000      	movs	r0, #0
 800493a:	f00e fee3 	bl	8013704 <strtok>
 800493e:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004940:	2f00      	cmp	r7, #0
 8004942:	d02f      	beq.n	80049a4 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004944:	0038      	movs	r0, r7
 8004946:	f7fe feff 	bl	8003748 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800494a:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 800494c:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800494e:	d036      	beq.n	80049be <ParseSnippetCondition+0xee>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d024      	beq.n	800499e <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004954:	2c00      	cmp	r4, #0
 8004956:	d025      	beq.n	80049a4 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004958:	0020      	movs	r0, r4
 800495a:	f7fe fef5 	bl	8003748 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 800495e:	2800      	cmp	r0, #0
 8004960:	d06b      	beq.n	8004a3a <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004962:	2204      	movs	r2, #4
 8004964:	7833      	ldrb	r3, [r6, #0]
 8004966:	009c      	lsls	r4, r3, #2
 8004968:	4699      	mov	r9, r3
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004970:	18eb      	adds	r3, r5, r3
 8004972:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004974:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004976:	4640      	mov	r0, r8
 8004978:	f7fe fef2 	bl	8003760 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800497c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800497e:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004980:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004982:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004984:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004986:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004988:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800498a:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800498c:	18ed      	adds	r5, r5, r3
 800498e:	786b      	ldrb	r3, [r5, #1]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004994:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004996:	3201      	adds	r2, #1
 8004998:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 800499a:	4698      	mov	r8, r3
 800499c:	e004      	b.n	80049a8 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800499e:	2c00      	cmp	r4, #0
 80049a0:	d100      	bne.n	80049a4 <ParseSnippetCondition+0xd4>
 80049a2:	e07f      	b.n	8004aa4 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 80049a4:	2367      	movs	r3, #103	; 0x67
 80049a6:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049a8:	4640      	mov	r0, r8
 80049aa:	b00b      	add	sp, #44	; 0x2c
 80049ac:	bc3c      	pop	{r2, r3, r4, r5}
 80049ae:	4690      	mov	r8, r2
 80049b0:	4699      	mov	r9, r3
 80049b2:	46a2      	mov	sl, r4
 80049b4:	46ab      	mov	fp, r5
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 80049b8:	230e      	movs	r3, #14
 80049ba:	4698      	mov	r8, r3
 80049bc:	e7f4      	b.n	80049a8 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1c8      	bne.n	8004954 <ParseSnippetCondition+0x84>
 80049c2:	e7ef      	b.n	80049a4 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	3b30      	subs	r3, #48	; 0x30
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049d0:	465b      	mov	r3, fp
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d8e8      	bhi.n	80049a8 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049d6:	4649      	mov	r1, r9
 80049d8:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049da:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049dc:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049de:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049e0:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049e2:	2207      	movs	r2, #7
 80049e4:	4999      	ldr	r1, [pc, #612]	; (8004c4c <ParseSnippetCondition+0x37c>)
 80049e6:	0018      	movs	r0, r3
 80049e8:	9307      	str	r3, [sp, #28]
 80049ea:	f00e f813 	bl	8012a14 <strncmp>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d03d      	beq.n	8004a6e <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80049f2:	220e      	movs	r2, #14
 80049f4:	4996      	ldr	r1, [pc, #600]	; (8004c50 <ParseSnippetCondition+0x380>)
 80049f6:	9807      	ldr	r0, [sp, #28]
 80049f8:	f00e f80c 	bl	8012a14 <strncmp>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d15e      	bne.n	8004abe <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004a00:	2306      	movs	r3, #6
 8004a02:	464a      	mov	r2, r9
 8004a04:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004a06:	465b      	mov	r3, fp
 8004a08:	00da      	lsls	r2, r3, #3
 8004a0a:	4b92      	ldr	r3, [pc, #584]	; (8004c54 <ParseSnippetCondition+0x384>)
 8004a0c:	445a      	add	r2, fp
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	7a1b      	ldrb	r3, [r3, #8]
 8004a12:	079b      	lsls	r3, r3, #30
 8004a14:	d40e      	bmi.n	8004a34 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a16:	2301      	movs	r3, #1
 8004a18:	9305      	str	r3, [sp, #20]
 8004a1a:	4643      	mov	r3, r8
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	9303      	str	r3, [sp, #12]
 8004a22:	9302      	str	r3, [sp, #8]
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	f006 fced 	bl	800b40c <SetButtonEvents>
 8004a32:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004a34:	3401      	adds	r4, #1
 8004a36:	7034      	strb	r4, [r6, #0]
 8004a38:	e7b6      	b.n	80049a8 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a3a:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004a3c:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a3e:	0093      	lsls	r3, r2, #2
 8004a40:	189b      	adds	r3, r3, r2
 8004a42:	2203      	movs	r2, #3
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a48:	18eb      	adds	r3, r5, r3
 8004a4a:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004a4c:	f00d fad0 	bl	8011ff0 <atof>
 8004a50:	f7fe f8ba 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a54:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004a56:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a58:	009c      	lsls	r4, r3, #2
 8004a5a:	18e0      	adds	r0, r4, r3
 8004a5c:	0080      	lsls	r0, r0, #2
 8004a5e:	3006      	adds	r0, #6
 8004a60:	1828      	adds	r0, r5, r0
 8004a62:	2204      	movs	r2, #4
 8004a64:	a909      	add	r1, sp, #36	; 0x24
 8004a66:	4699      	mov	r9, r3
 8004a68:	f00d fd8d 	bl	8012586 <memcpy>
 8004a6c:	e783      	b.n	8004976 <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004a6e:	2305      	movs	r3, #5
 8004a70:	4649      	mov	r1, r9
 8004a72:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004a74:	4659      	mov	r1, fp
 8004a76:	4b77      	ldr	r3, [pc, #476]	; (8004c54 <ParseSnippetCondition+0x384>)
 8004a78:	00ca      	lsls	r2, r1, #3
 8004a7a:	445a      	add	r2, fp
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	2201      	movs	r2, #1
 8004a80:	7a1b      	ldrb	r3, [r3, #8]
 8004a82:	421a      	tst	r2, r3
 8004a84:	d1d6      	bne.n	8004a34 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a86:	2301      	movs	r3, #1
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	4643      	mov	r3, r8
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	9302      	str	r3, [sp, #8]
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4658      	mov	r0, fp
 8004a9c:	f006 fcb6 	bl	800b40c <SetButtonEvents>
 8004aa0:	7834      	ldrb	r4, [r6, #0]
 8004aa2:	e7c7      	b.n	8004a34 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	7832      	ldrb	r2, [r6, #0]
 8004aa8:	0093      	lsls	r3, r2, #2
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ab0:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004ab2:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ab4:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ab6:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ab8:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004aba:	4698      	mov	r8, r3
 8004abc:	e774      	b.n	80049a8 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004abe:	220c      	movs	r2, #12
 8004ac0:	4965      	ldr	r1, [pc, #404]	; (8004c58 <ParseSnippetCondition+0x388>)
 8004ac2:	9807      	ldr	r0, [sp, #28]
 8004ac4:	f00d ffa6 	bl	8012a14 <strncmp>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d131      	bne.n	8004b30 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004acc:	465b      	mov	r3, fp
 8004ace:	00da      	lsls	r2, r3, #3
 8004ad0:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <ParseSnippetCondition+0x384>)
 8004ad2:	445a      	add	r2, fp
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	789a      	ldrb	r2, [r3, #2]
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	d063      	beq.n	8004ba4 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004adc:	78da      	ldrb	r2, [r3, #3]
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d07d      	beq.n	8004bde <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ae2:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004ae4:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ae6:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1a3      	bne.n	8004a34 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004aec:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004aee:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004af0:	4453      	add	r3, sl
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18eb      	adds	r3, r5, r3
 8004af6:	3a01      	subs	r2, #1
 8004af8:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004afa:	300f      	adds	r0, #15
 8004afc:	f00d fa7d 	bl	8011ffa <atoi>
 8004b00:	7832      	ldrb	r2, [r6, #0]
 8004b02:	b2c0      	uxtb	r0, r0
 8004b04:	0093      	lsls	r3, r2, #2
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b0c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b0e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b10:	9305      	str	r3, [sp, #20]
 8004b12:	2300      	movs	r3, #0
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	9304      	str	r3, [sp, #16]
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	9001      	str	r0, [sp, #4]
 8004b20:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b22:	4658      	mov	r0, fp
 8004b24:	f006 fc72 	bl	800b40c <SetButtonEvents>
					status =BOS_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	7834      	ldrb	r4, [r6, #0]
 8004b2c:	4698      	mov	r8, r3
 8004b2e:	e781      	b.n	8004a34 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b30:	220d      	movs	r2, #13
 8004b32:	494a      	ldr	r1, [pc, #296]	; (8004c5c <ParseSnippetCondition+0x38c>)
 8004b34:	9807      	ldr	r0, [sp, #28]
 8004b36:	f00d ff6d 	bl	8012a14 <strncmp>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d000      	beq.n	8004b40 <ParseSnippetCondition+0x270>
 8004b3e:	e779      	b.n	8004a34 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004b40:	465b      	mov	r3, fp
 8004b42:	4a44      	ldr	r2, [pc, #272]	; (8004c54 <ParseSnippetCondition+0x384>)
 8004b44:	00d9      	lsls	r1, r3, #3
 8004b46:	18cb      	adds	r3, r1, r3
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	7958      	ldrb	r0, [r3, #5]
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d05e      	beq.n	8004c0e <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004b50:	799b      	ldrb	r3, [r3, #6]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d100      	bne.n	8004b58 <ParseSnippetCondition+0x288>
 8004b56:	e083      	b.n	8004c60 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004b58:	4459      	add	r1, fp
 8004b5a:	1852      	adds	r2, r2, r1
 8004b5c:	79d3      	ldrb	r3, [r2, #7]
 8004b5e:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004b60:	230d      	movs	r3, #13
 8004b62:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004b64:	464b      	mov	r3, r9
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d000      	beq.n	8004b6c <ParseSnippetCondition+0x29c>
 8004b6a:	e763      	b.n	8004a34 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b6c:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b6e:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b70:	4698      	mov	r8, r3
 8004b72:	435c      	muls	r4, r3
 8004b74:	3b06      	subs	r3, #6
 8004b76:	192c      	adds	r4, r5, r4
 8004b78:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b7a:	3010      	adds	r0, #16
 8004b7c:	f00d fa3d 	bl	8011ffa <atoi>
 8004b80:	4642      	mov	r2, r8
 8004b82:	7833      	ldrb	r3, [r6, #0]
 8004b84:	b2c0      	uxtb	r0, r0
 8004b86:	4353      	muls	r3, r2
 8004b88:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b8a:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b8c:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b8e:	9305      	str	r3, [sp, #20]
 8004b90:	464b      	mov	r3, r9
 8004b92:	9303      	str	r3, [sp, #12]
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9004      	str	r0, [sp, #16]
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	e7be      	b.n	8004b22 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004ba4:	2309      	movs	r3, #9
 8004ba6:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004ba8:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004baa:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bac:	300f      	adds	r0, #15
 8004bae:	f00d fa24 	bl	8011ffa <atoi>
 8004bb2:	7831      	ldrb	r1, [r6, #0]
 8004bb4:	b2c3      	uxtb	r3, r0
 8004bb6:	008a      	lsls	r2, r1, #2
 8004bb8:	1852      	adds	r2, r2, r1
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bbe:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bc0:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bc2:	9205      	str	r2, [sp, #20]
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	9204      	str	r2, [sp, #16]
 8004bc8:	9203      	str	r2, [sp, #12]
 8004bca:	9202      	str	r2, [sp, #8]
 8004bcc:	9201      	str	r2, [sp, #4]
 8004bce:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4658      	mov	r0, fp
 8004bd6:	f006 fc19 	bl	800b40c <SetButtonEvents>
 8004bda:	7834      	ldrb	r4, [r6, #0]
 8004bdc:	e72a      	b.n	8004a34 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004bde:	230a      	movs	r3, #10
 8004be0:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004be2:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004be4:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004be6:	300f      	adds	r0, #15
 8004be8:	f00d fa07 	bl	8011ffa <atoi>
 8004bec:	7832      	ldrb	r2, [r6, #0]
 8004bee:	b2c0      	uxtb	r0, r0
 8004bf0:	0093      	lsls	r3, r2, #2
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bf8:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bfa:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bfc:	9305      	str	r3, [sp, #20]
 8004bfe:	4643      	mov	r3, r8
 8004c00:	9000      	str	r0, [sp, #0]
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	9303      	str	r3, [sp, #12]
 8004c06:	9302      	str	r3, [sp, #8]
 8004c08:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e7e0      	b.n	8004bd0 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c0e:	230c      	movs	r3, #12
 8004c10:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c12:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c14:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c16:	3010      	adds	r0, #16
 8004c18:	f00d f9ef 	bl	8011ffa <atoi>
 8004c1c:	7832      	ldrb	r2, [r6, #0]
 8004c1e:	b2c0      	uxtb	r0, r0
 8004c20:	0093      	lsls	r3, r2, #2
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c28:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c2a:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c2c:	9305      	str	r3, [sp, #20]
 8004c2e:	4643      	mov	r3, r8
 8004c30:	9002      	str	r0, [sp, #8]
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e7c8      	b.n	8004bd0 <ParseSnippetCondition+0x300>
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	2000182c 	.word	0x2000182c
 8004c44:	20006c9c 	.word	0x20006c9c
 8004c48:	0801759c 	.word	0x0801759c
 8004c4c:	08018330 	.word	0x08018330
 8004c50:	08017b64 	.word	0x08017b64
 8004c54:	200027c8 	.word	0x200027c8
 8004c58:	08017b74 	.word	0x08017b74
 8004c5c:	08017b84 	.word	0x08017b84
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c60:	0023      	movs	r3, r4
 8004c62:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c64:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c66:	4453      	add	r3, sl
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	18eb      	adds	r3, r5, r3
 8004c6c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c6e:	3010      	adds	r0, #16
 8004c70:	f00d f9c3 	bl	8011ffa <atoi>
 8004c74:	7832      	ldrb	r2, [r6, #0]
 8004c76:	b2c0      	uxtb	r0, r0
 8004c78:	0093      	lsls	r3, r2, #2
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c80:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c82:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9003      	str	r0, [sp, #12]
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	2100      	movs	r1, #0
 8004c96:	e744      	b.n	8004b22 <ParseSnippetCondition+0x252>

08004c98 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	46de      	mov	lr, fp
 8004c9c:	4657      	mov	r7, sl
 8004c9e:	4645      	mov	r5, r8
 8004ca0:	464e      	mov	r6, r9
 8004ca2:	468a      	mov	sl, r1
 8004ca4:	b5e0      	push	{r5, r6, r7, lr}
 8004ca6:	b08b      	sub	sp, #44	; 0x2c
 8004ca8:	9002      	str	r0, [sp, #8]
 8004caa:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004cac:	2100      	movs	r1, #0
 8004cae:	2209      	movs	r2, #9
 8004cb0:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004cb2:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cb4:	f00d fc70 	bl	8012598 <memset>
 8004cb8:	4bcd      	ldr	r3, [pc, #820]	; (8004ff0 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004cba:	4656      	mov	r6, sl
 8004cbc:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cbe:	4bcd      	ldr	r3, [pc, #820]	; (8004ff4 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004cc0:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cc2:	469b      	mov	fp, r3
 8004cc4:	e02d      	b.n	8004d22 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004cc6:	2206      	movs	r2, #6
 8004cc8:	49cb      	ldr	r1, [pc, #812]	; (8004ff8 <CLI_CommandParser+0x360>)
 8004cca:	0028      	movs	r0, r5
 8004ccc:	f00d fea2 	bl	8012a14 <strncmp>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d057      	beq.n	8004d84 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004cd4:	2f02      	cmp	r7, #2
 8004cd6:	d100      	bne.n	8004cda <CLI_CommandParser+0x42>
 8004cd8:	e0d2      	b.n	8004e80 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004cda:	212e      	movs	r1, #46	; 0x2e
 8004cdc:	0028      	movs	r0, r5
 8004cde:	f00d fe83 	bl	80129e8 <strchr>
 8004ce2:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ce4:	d007      	beq.n	8004cf6 <CLI_CommandParser+0x5e>
 8004ce6:	3803      	subs	r0, #3
 8004ce8:	2203      	movs	r2, #3
 8004cea:	4659      	mov	r1, fp
 8004cec:	f00d fe92 	bl	8012a14 <strncmp>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d000      	beq.n	8004cf6 <CLI_CommandParser+0x5e>
 8004cf4:	e079      	b.n	8004dea <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004cf6:	2299      	movs	r2, #153	; 0x99
 8004cf8:	0021      	movs	r1, r4
 8004cfa:	0092      	lsls	r2, r2, #2
 8004cfc:	0028      	movs	r0, r5
 8004cfe:	f008 fa39 	bl	800d174 <FreeRTOS_CLIProcessCommand>
 8004d02:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d04:	7823      	ldrb	r3, [r4, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d139      	bne.n	8004d7e <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d0a:	0020      	movs	r0, r4
 8004d0c:	f7fb fa04 	bl	8000118 <strlen>
 8004d10:	2100      	movs	r1, #0
 8004d12:	0002      	movs	r2, r0
 8004d14:	0020      	movs	r0, r4
 8004d16:	f00d fc3f 	bl	8012598 <memset>
	} while(xReturned != pdFALSE);
 8004d1a:	4653      	mov	r3, sl
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d100      	bne.n	8004d22 <CLI_CommandParser+0x8a>
 8004d20:	e1d0      	b.n	80050c4 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004d22:	0028      	movs	r0, r5
 8004d24:	f7ff fdc0 	bl	80048a8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d28:	2336      	movs	r3, #54	; 0x36
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	464a      	mov	r2, r9
 8004d30:	5c9f      	ldrb	r7, [r3, r2]
 8004d32:	2f00      	cmp	r7, #0
 8004d34:	d1c7      	bne.n	8004cc6 <CLI_CommandParser+0x2e>
 8004d36:	3a33      	subs	r2, #51	; 0x33
 8004d38:	49b0      	ldr	r1, [pc, #704]	; (8004ffc <CLI_CommandParser+0x364>)
 8004d3a:	0028      	movs	r0, r5
 8004d3c:	f00d fe6a 	bl	8012a14 <strncmp>
 8004d40:	1e07      	subs	r7, r0, #0
 8004d42:	d1ca      	bne.n	8004cda <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d44:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004d46:	f7ff fdc3 	bl	80048d0 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d000      	beq.n	8004d50 <CLI_CommandParser+0xb8>
 8004d4e:	e09f      	b.n	8004e90 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004d50:	2302      	movs	r3, #2
 8004d52:	4642      	mov	r2, r8
 8004d54:	4649      	mov	r1, r9
 8004d56:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004d58:	330b      	adds	r3, #11
 8004d5a:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	d027      	beq.n	8004db0 <CLI_CommandParser+0x118>
 8004d60:	2300      	movs	r3, #0
 8004d62:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d64:	0020      	movs	r0, r4
 8004d66:	f7fb f9d7 	bl	8000118 <strlen>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	b282      	uxth	r2, r0
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	0021      	movs	r1, r4
 8004d74:	3333      	adds	r3, #51	; 0x33
 8004d76:	9802      	ldr	r0, [sp, #8]
 8004d78:	f007 ffd8 	bl	800cd2c <writePxMutex>
 8004d7c:	e7c5      	b.n	8004d0a <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	d0c3      	beq.n	8004d0a <CLI_CommandParser+0x72>
 8004d82:	e7ef      	b.n	8004d64 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004d84:	4643      	mov	r3, r8
 8004d86:	464a      	mov	r2, r9
 8004d88:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	0093      	lsls	r3, r2, #2
 8004d90:	189b      	adds	r3, r3, r2
 8004d92:	4a9b      	ldr	r2, [pc, #620]	; (8005000 <CLI_CommandParser+0x368>)
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	18d3      	adds	r3, r2, r3
 8004d98:	2201      	movs	r2, #1
 8004d9a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004d9c:	f004 fdf2 	bl	8009984 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004da0:	2241      	movs	r2, #65	; 0x41
 8004da2:	4998      	ldr	r1, [pc, #608]	; (8005004 <CLI_CommandParser+0x36c>)
 8004da4:	0020      	movs	r0, r4
 8004da6:	f00d fbee 	bl	8012586 <memcpy>
 8004daa:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1d5      	bne.n	8004d5c <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004db0:	0020      	movs	r0, r4
 8004db2:	f7fb f9b1 	bl	8000118 <strlen>
 8004db6:	2100      	movs	r1, #0
 8004db8:	0002      	movs	r2, r0
 8004dba:	0020      	movs	r0, r4
 8004dbc:	46b2      	mov	sl, r6
 8004dbe:	f00d fbeb 	bl	8012598 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004dc2:	2209      	movs	r2, #9
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	a807      	add	r0, sp, #28
 8004dc8:	f00d fbe6 	bl	8012598 <memset>
	if(!recordSnippet && enableOutput)
 8004dcc:	2336      	movs	r3, #54	; 0x36
 8004dce:	4642      	mov	r2, r8
 8004dd0:	5cd3      	ldrb	r3, [r2, r3]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <CLI_CommandParser+0x144>
 8004dd6:	4653      	mov	r3, sl
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d16a      	bne.n	8004eb2 <CLI_CommandParser+0x21a>
}
 8004ddc:	b00b      	add	sp, #44	; 0x2c
 8004dde:	bc3c      	pop	{r2, r3, r4, r5}
 8004de0:	4690      	mov	r8, r2
 8004de2:	4699      	mov	r9, r3
 8004de4:	46a2      	mov	sl, r4
 8004de6:	46ab      	mov	fp, r5
 8004de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004dea:	f00d f971 	bl	80120d0 <__locale_ctype_ptr>
 8004dee:	787b      	ldrb	r3, [r7, #1]
 8004df0:	18c0      	adds	r0, r0, r3
 8004df2:	7843      	ldrb	r3, [r0, #1]
 8004df4:	075b      	lsls	r3, r3, #29
 8004df6:	d500      	bpl.n	8004dfa <CLI_CommandParser+0x162>
 8004df8:	e77d      	b.n	8004cf6 <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004dfa:	1b7a      	subs	r2, r7, r5
 8004dfc:	0029      	movs	r1, r5
 8004dfe:	a807      	add	r0, sp, #28
 8004e00:	f00d fe19 	bl	8012a36 <strncpy>
				id =GetID(idString);
 8004e04:	a807      	add	r0, sp, #28
 8004e06:	f7ff fa1d 	bl	8004244 <GetID>
				if(id == myID){
 8004e0a:	4b7f      	ldr	r3, [pc, #508]	; (8005008 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8004e0c:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	4298      	cmp	r0, r3
 8004e14:	d057      	beq.n	8004ec6 <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	2b64      	cmp	r3, #100	; 0x64
 8004e1a:	d100      	bne.n	8004e1e <CLI_CommandParser+0x186>
 8004e1c:	e0da      	b.n	8004fd4 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	2b66      	cmp	r3, #102	; 0x66
 8004e22:	d100      	bne.n	8004e26 <CLI_CommandParser+0x18e>
 8004e24:	e0dd      	b.n	8004fe2 <CLI_CommandParser+0x34a>
 8004e26:	1c7b      	adds	r3, r7, #1
 8004e28:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	2bff      	cmp	r3, #255	; 0xff
 8004e2e:	d100      	bne.n	8004e32 <CLI_CommandParser+0x19a>
 8004e30:	e08b      	b.n	8004f4a <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e32:	466b      	mov	r3, sp
 8004e34:	7b1b      	ldrb	r3, [r3, #12]
 8004e36:	4699      	mov	r9, r3
 8004e38:	2bfe      	cmp	r3, #254	; 0xfe
 8004e3a:	d100      	bne.n	8004e3e <CLI_CommandParser+0x1a6>
 8004e3c:	e102      	b.n	8005044 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e3e:	2206      	movs	r2, #6
 8004e40:	4972      	ldr	r1, [pc, #456]	; (800500c <CLI_CommandParser+0x374>)
 8004e42:	9804      	ldr	r0, [sp, #16]
 8004e44:	f00d fde6 	bl	8012a14 <strncmp>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d144      	bne.n	8004ed6 <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e4c:	4b70      	ldr	r3, [pc, #448]	; (8005010 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e4e:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e50:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e52:	2119      	movs	r1, #25
 8004e54:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e56:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e58:	f003 f984 	bl	8008164 <SendMessageToModule>
						osDelay(100);
 8004e5c:	2064      	movs	r0, #100	; 0x64
 8004e5e:	f008 f8f9 	bl	800d054 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e62:	4b6c      	ldr	r3, [pc, #432]	; (8005014 <CLI_CommandParser+0x37c>)
 8004e64:	4649      	mov	r1, r9
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	4b67      	ldr	r3, [pc, #412]	; (8005008 <CLI_CommandParser+0x370>)
 8004e6a:	7818      	ldrb	r0, [r3, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f004 fead 	bl	8009bcc <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004e72:	4653      	mov	r3, sl
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b60      	cmp	r3, #96	; 0x60
 8004e78:	d100      	bne.n	8004e7c <CLI_CommandParser+0x1e4>
 8004e7a:	e095      	b.n	8004fa8 <CLI_CommandParser+0x310>
 8004e7c:	7823      	ldrb	r3, [r4, #0]
 8004e7e:	e795      	b.n	8004dac <CLI_CommandParser+0x114>
 8004e80:	0028      	movs	r0, r5
 8004e82:	f7ff fcb9 	bl	80047f8 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d10c      	bne.n	8004ea4 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 8004e8a:	230d      	movs	r3, #13
 8004e8c:	7023      	strb	r3, [r4, #0]
 8004e8e:	e765      	b.n	8004d5c <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e90:	2252      	movs	r2, #82	; 0x52
 8004e92:	4961      	ldr	r1, [pc, #388]	; (8005018 <CLI_CommandParser+0x380>)
 8004e94:	0020      	movs	r0, r4
 8004e96:	f00d fb76 	bl	8012586 <memcpy>
				recordSnippet =0;
 8004e9a:	4643      	mov	r3, r8
 8004e9c:	464a      	mov	r2, r9
 8004e9e:	549f      	strb	r7, [r3, r2]
 8004ea0:	7823      	ldrb	r3, [r4, #0]
 8004ea2:	e783      	b.n	8004dac <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004ea4:	2252      	movs	r2, #82	; 0x52
 8004ea6:	495c      	ldr	r1, [pc, #368]	; (8005018 <CLI_CommandParser+0x380>)
 8004ea8:	0020      	movs	r0, r4
 8004eaa:	f00d fb6c 	bl	8012586 <memcpy>
 8004eae:	7823      	ldrb	r3, [r4, #0]
 8004eb0:	e77c      	b.n	8004dac <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	425b      	negs	r3, r3
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2238      	movs	r2, #56	; 0x38
 8004eba:	3333      	adds	r3, #51	; 0x33
 8004ebc:	4957      	ldr	r1, [pc, #348]	; (800501c <CLI_CommandParser+0x384>)
 8004ebe:	9802      	ldr	r0, [sp, #8]
 8004ec0:	f007 ff34 	bl	800cd2c <writePxMutex>
}
 8004ec4:	e78a      	b.n	8004ddc <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ec6:	2299      	movs	r2, #153	; 0x99
 8004ec8:	1c78      	adds	r0, r7, #1
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	0021      	movs	r1, r4
 8004ece:	f008 f951 	bl	800d174 <FreeRTOS_CLIProcessCommand>
 8004ed2:	4682      	mov	sl, r0
 8004ed4:	e716      	b.n	8004d04 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ed6:	0028      	movs	r0, r5
 8004ed8:	f7fb f91e 	bl	8000118 <strlen>
 8004edc:	0007      	movs	r7, r0
 8004ede:	a807      	add	r0, sp, #28
 8004ee0:	f7fb f91a 	bl	8000118 <strlen>
 8004ee4:	4682      	mov	sl, r0
 8004ee6:	1e7a      	subs	r2, r7, #1
 8004ee8:	1a12      	subs	r2, r2, r0
 8004eea:	9904      	ldr	r1, [sp, #16]
 8004eec:	484c      	ldr	r0, [pc, #304]	; (8005020 <CLI_CommandParser+0x388>)
 8004eee:	f00d fda2 	bl	8012a36 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004ef2:	0028      	movs	r0, r5
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	4653      	mov	r3, sl
 8004efa:	3801      	subs	r0, #1
 8004efc:	1ac2      	subs	r2, r0, r3
 8004efe:	b292      	uxth	r2, r2
 8004f00:	2117      	movs	r1, #23
 8004f02:	4648      	mov	r0, r9
 8004f04:	f003 f92e 	bl	8008164 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004f08:	9a03      	ldr	r2, [sp, #12]
 8004f0a:	4946      	ldr	r1, [pc, #280]	; (8005024 <CLI_CommandParser+0x38c>)
 8004f0c:	0020      	movs	r0, r4
 8004f0e:	f00d fd3d 	bl	801298c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004f12:	7823      	ldrb	r3, [r4, #0]
 8004f14:	0020      	movs	r0, r4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <CLI_CommandParser+0x29e>
 8004f1a:	f7fb f8fd 	bl	8000118 <strlen>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	2e00      	cmp	r6, #0
 8004f22:	d00b      	beq.n	8004f3c <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004f24:	2301      	movs	r3, #1
 8004f26:	b282      	uxth	r2, r0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	0021      	movs	r1, r4
 8004f2c:	3331      	adds	r3, #49	; 0x31
 8004f2e:	9802      	ldr	r0, [sp, #8]
 8004f30:	f007 fefc 	bl	800cd2c <writePxMutex>
 8004f34:	0020      	movs	r0, r4
 8004f36:	f7fb f8ef 	bl	8000118 <strlen>
 8004f3a:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	0020      	movs	r0, r4
 8004f40:	f00d fb2a 	bl	8012598 <memset>
 8004f44:	4b32      	ldr	r3, [pc, #200]	; (8005010 <CLI_CommandParser+0x378>)
 8004f46:	469a      	mov	sl, r3
 8004f48:	e793      	b.n	8004e72 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f4a:	221a      	movs	r2, #26
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4836      	ldr	r0, [pc, #216]	; (8005028 <CLI_CommandParser+0x390>)
 8004f50:	f00d fb22 	bl	8012598 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f54:	0028      	movs	r0, r5
 8004f56:	f7fb f8df 	bl	8000118 <strlen>
 8004f5a:	0007      	movs	r7, r0
 8004f5c:	a807      	add	r0, sp, #28
 8004f5e:	f7fb f8db 	bl	8000118 <strlen>
 8004f62:	4681      	mov	r9, r0
 8004f64:	3f01      	subs	r7, #1
 8004f66:	1a3a      	subs	r2, r7, r0
 8004f68:	9f04      	ldr	r7, [sp, #16]
 8004f6a:	482d      	ldr	r0, [pc, #180]	; (8005020 <CLI_CommandParser+0x388>)
 8004f6c:	0039      	movs	r1, r7
 8004f6e:	f00d fd62 	bl	8012a36 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f72:	0028      	movs	r0, r5
 8004f74:	f7fb f8d0 	bl	8000118 <strlen>
 8004f78:	464b      	mov	r3, r9
 8004f7a:	1ac3      	subs	r3, r0, r3
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2217      	movs	r2, #23
 8004f80:	21ff      	movs	r1, #255	; 0xff
 8004f82:	9805      	ldr	r0, [sp, #20]
 8004f84:	f003 f8a8 	bl	80080d8 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f88:	2299      	movs	r2, #153	; 0x99
 8004f8a:	0021      	movs	r1, r4
 8004f8c:	0092      	lsls	r2, r2, #2
 8004f8e:	0038      	movs	r0, r7
 8004f90:	f008 f8f0 	bl	800d174 <FreeRTOS_CLIProcessCommand>
 8004f94:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f96:	0020      	movs	r0, r4
 8004f98:	f7fb f8be 	bl	8000118 <strlen>
 8004f9c:	221d      	movs	r2, #29
 8004f9e:	1820      	adds	r0, r4, r0
 8004fa0:	4922      	ldr	r1, [pc, #136]	; (800502c <CLI_CommandParser+0x394>)
 8004fa2:	f00d faf0 	bl	8012586 <memcpy>
 8004fa6:	e6ad      	b.n	8004d04 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004fa8:	21fa      	movs	r1, #250	; 0xfa
 8004faa:	2001      	movs	r0, #1
 8004fac:	0089      	lsls	r1, r1, #2
 8004fae:	f009 fb09 	bl	800e5c4 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	; (8005030 <CLI_CommandParser+0x398>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d100      	bne.n	8004fbc <CLI_CommandParser+0x324>
 8004fba:	e75f      	b.n	8004e7c <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fbe:	491e      	ldr	r1, [pc, #120]	; (8005038 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 8004fc0:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc2:	0020      	movs	r0, r4
							++timedoutMsg;
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	0022      	movs	r2, r4
 8004fcc:	f00d fcde 	bl	801298c <sprintf>
 8004fd0:	7823      	ldrb	r3, [r4, #0]
 8004fd2:	e6eb      	b.n	8004dac <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004fd4:	2227      	movs	r2, #39	; 0x27
 8004fd6:	4919      	ldr	r1, [pc, #100]	; (800503c <CLI_CommandParser+0x3a4>)
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f00d fad4 	bl	8012586 <memcpy>
 8004fde:	7823      	ldrb	r3, [r4, #0]
 8004fe0:	e6e4      	b.n	8004dac <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004fe2:	2225      	movs	r2, #37	; 0x25
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <CLI_CommandParser+0x3a8>)
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	f00d facd 	bl	8012586 <memcpy>
 8004fec:	7823      	ldrb	r3, [r4, #0]
 8004fee:	e6dd      	b.n	8004dac <CLI_CommandParser+0x114>
 8004ff0:	2000182c 	.word	0x2000182c
 8004ff4:	08017c38 	.word	0x08017c38
 8004ff8:	08017bec 	.word	0x08017bec
 8004ffc:	08017b94 	.word	0x08017b94
 8005000:	20006c9c 	.word	0x20006c9c
 8005004:	08017bf4 	.word	0x08017bf4
 8005008:	20000a98 	.word	0x20000a98
 800500c:	08017cd8 	.word	0x08017cd8
 8005010:	20006c00 	.word	0x20006c00
 8005014:	20000c28 	.word	0x20000c28
 8005018:	08017b98 	.word	0x08017b98
 800501c:	08017d24 	.word	0x08017d24
 8005020:	20000b3c 	.word	0x20000b3c
 8005024:	08017ce0 	.word	0x08017ce0
 8005028:	20000de0 	.word	0x20000de0
 800502c:	08017c8c 	.word	0x08017c8c
 8005030:	20000c3c 	.word	0x20000c3c
 8005034:	200021cc 	.word	0x200021cc
 8005038:	08017d04 	.word	0x08017d04
 800503c:	08017c3c 	.word	0x08017c3c
 8005040:	08017c64 	.word	0x08017c64
					group =id >> 8;
 8005044:	4640      	mov	r0, r8
 8005046:	2237      	movs	r2, #55	; 0x37
 8005048:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800504a:	2100      	movs	r1, #0
					group =id >> 8;
 800504c:	121f      	asrs	r7, r3, #8
 800504e:	b2fb      	uxtb	r3, r7
 8005050:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005052:	3a1d      	subs	r2, #29
 8005054:	481c      	ldr	r0, [pc, #112]	; (80050c8 <CLI_CommandParser+0x430>)
					group =id >> 8;
 8005056:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005058:	f00d fa9e 	bl	8012598 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800505c:	0028      	movs	r0, r5
 800505e:	f7fb f85b 	bl	8000118 <strlen>
 8005062:	0007      	movs	r7, r0
 8005064:	a807      	add	r0, sp, #28
 8005066:	f7fb f857 	bl	8000118 <strlen>
 800506a:	4681      	mov	r9, r0
 800506c:	3f01      	subs	r7, #1
 800506e:	1a3a      	subs	r2, r7, r0
 8005070:	9904      	ldr	r1, [sp, #16]
 8005072:	4816      	ldr	r0, [pc, #88]	; (80050cc <CLI_CommandParser+0x434>)
 8005074:	f00d fcdf 	bl	8012a36 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005078:	0028      	movs	r0, r5
 800507a:	f7fb f84d 	bl	8000118 <strlen>
 800507e:	464f      	mov	r7, r9
 8005080:	1bc3      	subs	r3, r0, r7
 8005082:	b29b      	uxth	r3, r3
 8005084:	2217      	movs	r2, #23
 8005086:	9903      	ldr	r1, [sp, #12]
 8005088:	9805      	ldr	r0, [sp, #20]
 800508a:	f003 f825 	bl	80080d8 <BroadcastMessage>
					if(InGroup(myID,group))
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <CLI_CommandParser+0x438>)
 8005090:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <CLI_CommandParser+0x43c>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	4641      	mov	r1, r8
 8005096:	3b01      	subs	r3, #1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	5a9b      	ldrh	r3, [r3, r2]
 800509c:	2237      	movs	r2, #55	; 0x37
 800509e:	5c8a      	ldrb	r2, [r1, r2]
 80050a0:	4113      	asrs	r3, r2
 80050a2:	07db      	lsls	r3, r3, #31
 80050a4:	d406      	bmi.n	80050b4 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80050a6:	ab07      	add	r3, sp, #28
 80050a8:	0022      	movs	r2, r4
 80050aa:	490b      	ldr	r1, [pc, #44]	; (80050d8 <CLI_CommandParser+0x440>)
 80050ac:	0020      	movs	r0, r4
 80050ae:	f00d fc6d 	bl	801298c <sprintf>
 80050b2:	e627      	b.n	8004d04 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050b4:	2299      	movs	r2, #153	; 0x99
 80050b6:	0021      	movs	r1, r4
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	9804      	ldr	r0, [sp, #16]
 80050bc:	f008 f85a 	bl	800d174 <FreeRTOS_CLIProcessCommand>
 80050c0:	4682      	mov	sl, r0
 80050c2:	e7f0      	b.n	80050a6 <CLI_CommandParser+0x40e>
 80050c4:	46b2      	mov	sl, r6
 80050c6:	e67c      	b.n	8004dc2 <CLI_CommandParser+0x12a>
 80050c8:	20000de0 	.word	0x20000de0
 80050cc:	20000b3c 	.word	0x20000b3c
 80050d0:	20000a98 	.word	0x20000a98
 80050d4:	20000a9c 	.word	0x20000a9c
 80050d8:	08017cac 	.word	0x08017cac

080050dc <prvCLITask>:
void prvCLITask(void *pvParameters){
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	46de      	mov	lr, fp
 80050e0:	4645      	mov	r5, r8
 80050e2:	4657      	mov	r7, sl
 80050e4:	464e      	mov	r6, r9
 80050e6:	b5e0      	push	{r5, r6, r7, lr}
 80050e8:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80050ea:	ab02      	add	r3, sp, #8
 80050ec:	469c      	mov	ip, r3
 80050ee:	250f      	movs	r5, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050f0:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80050f2:	2300      	movs	r3, #0
 80050f4:	4465      	add	r5, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050f6:	4249      	negs	r1, r1
 80050f8:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 80050fa:	702b      	strb	r3, [r5, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050fc:	f009 fa62 	bl	800e5c4 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005100:	f008 f8b0 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005104:	23e1      	movs	r3, #225	; 0xe1
 8005106:	4a50      	ldr	r2, [pc, #320]	; (8005248 <prvCLITask+0x16c>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005108:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800510a:	6892      	ldr	r2, [r2, #8]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	429a      	cmp	r2, r3
 8005110:	d100      	bne.n	8005114 <prvCLITask+0x38>
 8005112:	e094      	b.n	800523e <prvCLITask+0x162>
 8005114:	4b4d      	ldr	r3, [pc, #308]	; (800524c <prvCLITask+0x170>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005116:	2401      	movs	r4, #1
 8005118:	001e      	movs	r6, r3
 800511a:	7819      	ldrb	r1, [r3, #0]
			if(port != PcPort)
 800511c:	428c      	cmp	r4, r1
 800511e:	d005      	beq.n	800512c <prvCLITask+0x50>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005120:	21e1      	movs	r1, #225	; 0xe1
 8005122:	0020      	movs	r0, r4
 8005124:	0309      	lsls	r1, r1, #12
 8005126:	f007 fe53 	bl	800cdd0 <UpdateBaudrate>
 800512a:	7831      	ldrb	r1, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800512c:	3401      	adds	r4, #1
 800512e:	b2e4      	uxtb	r4, r4
 8005130:	2c07      	cmp	r4, #7
 8005132:	d1f3      	bne.n	800511c <prvCLITask+0x40>
 8005134:	46b1      	mov	r9, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005136:	4846      	ldr	r0, [pc, #280]	; (8005250 <prvCLITask+0x174>)
 8005138:	4b46      	ldr	r3, [pc, #280]	; (8005254 <prvCLITask+0x178>)
 800513a:	0004      	movs	r4, r0
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	3438      	adds	r4, #56	; 0x38
 8005140:	0053      	lsls	r3, r2, #1
 8005142:	189b      	adds	r3, r3, r2
 8005144:	4a44      	ldr	r2, [pc, #272]	; (8005258 <prvCLITask+0x17c>)
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	189b      	adds	r3, r3, r2
 800514a:	4a44      	ldr	r2, [pc, #272]	; (800525c <prvCLITask+0x180>)
 800514c:	4683      	mov	fp, r0
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	0020      	movs	r0, r4
 8005152:	9100      	str	r1, [sp, #0]
 8005154:	4942      	ldr	r1, [pc, #264]	; (8005260 <prvCLITask+0x184>)
 8005156:	f00d fc19 	bl	801298c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800515a:	464b      	mov	r3, r9
 800515c:	22a4      	movs	r2, #164	; 0xa4
 800515e:	4941      	ldr	r1, [pc, #260]	; (8005264 <prvCLITask+0x188>)
 8005160:	0092      	lsls	r2, r2, #2
 8005162:	7818      	ldrb	r0, [r3, #0]
 8005164:	230a      	movs	r3, #10
 8005166:	f007 fe13 	bl	800cd90 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800516a:	0020      	movs	r0, r4
 800516c:	f7fa ffd4 	bl	8000118 <strlen>
 8005170:	464b      	mov	r3, r9
 8005172:	b282      	uxth	r2, r0
 8005174:	0021      	movs	r1, r4
 8005176:	7818      	ldrb	r0, [r3, #0]
 8005178:	230a      	movs	r3, #10
 800517a:	f007 fe09 	bl	800cd90 <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800517e:	2214      	movs	r2, #20
 8005180:	4694      	mov	ip, r2
 8005182:	4b39      	ldr	r3, [pc, #228]	; (8005268 <prvCLITask+0x18c>)
	int8_t cInputIndex =0, *pcOutputString;
 8005184:	2600      	movs	r6, #0
 8005186:	4698      	mov	r8, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005188:	4b38      	ldr	r3, [pc, #224]	; (800526c <prvCLITask+0x190>)
 800518a:	4c39      	ldr	r4, [pc, #228]	; (8005270 <prvCLITask+0x194>)
 800518c:	4463      	add	r3, ip
 800518e:	469a      	mov	sl, r3
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005190:	2360      	movs	r3, #96	; 0x60
 8005192:	469c      	mov	ip, r3
			Rx_Data[PcPort - 1] = 0;
 8005194:	2700      	movs	r7, #0
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005196:	44e3      	add	fp, ip
 8005198:	e001      	b.n	800519e <prvCLITask+0xc2>
		taskYIELD();
 800519a:	f009 fcab 	bl	800eaf4 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 800519e:	7823      	ldrb	r3, [r4, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d1fa      	bne.n	800519a <prvCLITask+0xbe>
			cRxedChar = Rx_Data[PcPort - 1];
 80051a4:	464b      	mov	r3, r9
 80051a6:	4642      	mov	r2, r8
 80051a8:	7818      	ldrb	r0, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051aa:	0029      	movs	r1, r5
			cRxedChar = Rx_Data[PcPort - 1];
 80051ac:	1e43      	subs	r3, r0, #1
 80051ae:	5cd2      	ldrb	r2, [r2, r3]
			Read_In_CLI_Task_Flag = 0;
 80051b0:	7027      	strb	r7, [r4, #0]
			cRxedChar = Rx_Data[PcPort - 1];
 80051b2:	702a      	strb	r2, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 80051b4:	4642      	mov	r2, r8
 80051b6:	54d7      	strb	r7, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051b8:	230a      	movs	r3, #10
 80051ba:	2201      	movs	r2, #1
 80051bc:	f007 fde8 	bl	800cd90 <writePxITMutex>
			if(cRxedChar == '\r'){
 80051c0:	782b      	ldrb	r3, [r5, #0]
 80051c2:	2b0d      	cmp	r3, #13
 80051c4:	d01b      	beq.n	80051fe <prvCLITask+0x122>
				if(cRxedChar == '\n'){
 80051c6:	2b0a      	cmp	r3, #10
 80051c8:	d0e7      	beq.n	800519a <prvCLITask+0xbe>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d00d      	beq.n	80051ea <prvCLITask+0x10e>
 80051ce:	2b7f      	cmp	r3, #127	; 0x7f
 80051d0:	d00b      	beq.n	80051ea <prvCLITask+0x10e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051d2:	001a      	movs	r2, r3
 80051d4:	3a20      	subs	r2, #32
 80051d6:	2a5e      	cmp	r2, #94	; 0x5e
 80051d8:	d8df      	bhi.n	800519a <prvCLITask+0xbe>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051da:	2e31      	cmp	r6, #49	; 0x31
 80051dc:	dcdd      	bgt.n	800519a <prvCLITask+0xbe>
							cInputString[cInputIndex] =cRxedChar;
 80051de:	4a23      	ldr	r2, [pc, #140]	; (800526c <prvCLITask+0x190>)
 80051e0:	1992      	adds	r2, r2, r6
							cInputIndex++;
 80051e2:	3601      	adds	r6, #1
							cInputString[cInputIndex] =cRxedChar;
 80051e4:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 80051e6:	b276      	sxtb	r6, r6
 80051e8:	e7d7      	b.n	800519a <prvCLITask+0xbe>
					if(cInputIndex > 0){
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	d0d5      	beq.n	800519a <prvCLITask+0xbe>
						cInputString[cInputIndex] ='\0';
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <prvCLITask+0x190>)
						cInputIndex--;
 80051f0:	3e01      	subs	r6, #1
						cInputString[cInputIndex] ='\0';
 80051f2:	4694      	mov	ip, r2
						cInputIndex--;
 80051f4:	b2f3      	uxtb	r3, r6
 80051f6:	b25e      	sxtb	r6, r3
						cInputString[cInputIndex] ='\0';
 80051f8:	4463      	add	r3, ip
 80051fa:	751f      	strb	r7, [r3, #20]
 80051fc:	e7cd      	b.n	800519a <prvCLITask+0xbe>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80051fe:	464b      	mov	r3, r9
 8005200:	2202      	movs	r2, #2
 8005202:	7818      	ldrb	r0, [r3, #0]
 8005204:	491b      	ldr	r1, [pc, #108]	; (8005274 <prvCLITask+0x198>)
 8005206:	230a      	movs	r3, #10
 8005208:	f007 fdc2 	bl	800cd90 <writePxITMutex>
				if(cInputIndex == 0){
 800520c:	2e00      	cmp	r6, #0
 800520e:	d011      	beq.n	8005234 <prvCLITask+0x158>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005210:	464b      	mov	r3, r9
 8005212:	4652      	mov	r2, sl
 8005214:	7818      	ldrb	r0, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	f7ff fd3d 	bl	8004c98 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 800521e:	4651      	mov	r1, sl
 8005220:	4658      	mov	r0, fp
 8005222:	f00d fbef 	bl	8012a04 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005226:	2232      	movs	r2, #50	; 0x32
 8005228:	2100      	movs	r1, #0
 800522a:	4650      	mov	r0, sl
 800522c:	f00d f9b4 	bl	8012598 <memset>
				cInputIndex =0;
 8005230:	2600      	movs	r6, #0
 8005232:	e7b2      	b.n	800519a <prvCLITask+0xbe>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8005234:	4659      	mov	r1, fp
 8005236:	4650      	mov	r0, sl
 8005238:	f00d fbe4 	bl	8012a04 <strcpy>
 800523c:	e7e8      	b.n	8005210 <prvCLITask+0x134>
 800523e:	4b03      	ldr	r3, [pc, #12]	; (800524c <prvCLITask+0x170>)
 8005240:	4699      	mov	r9, r3
 8005242:	7819      	ldrb	r1, [r3, #0]
 8005244:	e777      	b.n	8005136 <prvCLITask+0x5a>
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	20006c80 	.word	0x20006c80
 800524c:	20000c28 	.word	0x20000c28
 8005250:	2000182c 	.word	0x2000182c
 8005254:	20000030 	.word	0x20000030
 8005258:	08016ddc 	.word	0x08016ddc
 800525c:	20000a98 	.word	0x20000a98
 8005260:	08017d60 	.word	0x08017d60
 8005264:	08017d8c 	.word	0x08017d8c
 8005268:	20001eb8 	.word	0x20001eb8
 800526c:	200018ac 	.word	0x200018ac
 8005270:	2000182a 	.word	0x2000182a
 8005274:	0801957c 	.word	0x0801957c

08005278 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800527a:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800527c:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	3a01      	subs	r2, #1
 8005282:	0093      	lsls	r3, r2, #2
 8005284:	189b      	adds	r3, r3, r2
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <ParseSnippetCommand+0x70>)
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	18d3      	adds	r3, r2, r3
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d018      	beq.n	80052c4 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005292:	4e16      	ldr	r6, [pc, #88]	; (80052ec <ParseSnippetCommand+0x74>)
 8005294:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 8005296:	2d00      	cmp	r5, #0
 8005298:	d016      	beq.n	80052c8 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800529a:	782b      	ldrb	r3, [r5, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00e      	beq.n	80052be <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80052a0:	2113      	movs	r1, #19
 80052a2:	0028      	movs	r0, r5
 80052a4:	f00d fba0 	bl	80129e8 <strchr>
 80052a8:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80052aa:	d010      	beq.n	80052ce <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80052ac:	1b42      	subs	r2, r0, r5
 80052ae:	0029      	movs	r1, r5
 80052b0:	0020      	movs	r0, r4
 80052b2:	f00d fbc0 	bl	8012a36 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80052b6:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80052b8:	3701      	adds	r7, #1
 80052ba:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80052bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80052be:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80052c0:	2000      	movs	r0, #0
 80052c2:	e7fb      	b.n	80052bc <ParseSnippetCommand+0x44>
		return false;
 80052c4:	2000      	movs	r0, #0
 80052c6:	e7f9      	b.n	80052bc <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80052c8:	64b0      	str	r0, [r6, #72]	; 0x48
 80052ca:	0005      	movs	r5, r0
 80052cc:	e7e5      	b.n	800529a <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80052ce:	0029      	movs	r1, r5
 80052d0:	0020      	movs	r0, r4
 80052d2:	f00d fb97 	bl	8012a04 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80052d6:	0020      	movs	r0, r4
 80052d8:	f7fa ff1e 	bl	8000118 <strlen>
 80052dc:	182d      	adds	r5, r5, r0
 80052de:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 80052e0:	2001      	movs	r0, #1
 80052e2:	e7eb      	b.n	80052bc <ParseSnippetCommand+0x44>
 80052e4:	2000182c 	.word	0x2000182c
 80052e8:	20006c9c 	.word	0x20006c9c
 80052ec:	200018ac 	.word	0x200018ac

080052f0 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80052f0:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 80052f2:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 80052f4:	1818      	adds	r0, r3, r0
 80052f6:	492e      	ldr	r1, [pc, #184]	; (80053b0 <CheckSnippetCondition+0xc0>)
 80052f8:	0080      	lsls	r0, r0, #2
 80052fa:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 80052fc:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d020      	beq.n	8005344 <CheckSnippetCondition+0x54>
 8005302:	2b03      	cmp	r3, #3
 8005304:	d11b      	bne.n	800533e <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005306:	180c      	adds	r4, r1, r0
 8005308:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800530a:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800530c:	3a01      	subs	r2, #1
 800530e:	0053      	lsls	r3, r2, #1
 8005310:	189b      	adds	r3, r3, r2
 8005312:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <CheckSnippetCondition+0xc4>)
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005318:	1841      	adds	r1, r0, r1
 800531a:	2204      	movs	r2, #4
 800531c:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800531e:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005320:	f00d f931 	bl	8012586 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005324:	7863      	ldrb	r3, [r4, #1]
 8005326:	2b06      	cmp	r3, #6
 8005328:	d809      	bhi.n	800533e <CheckSnippetCondition+0x4e>
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <CheckSnippetCondition+0xc8>)
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	58d3      	ldr	r3, [r2, r3]
 8005330:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005332:	1c29      	adds	r1, r5, #0
 8005334:	9801      	ldr	r0, [sp, #4]
 8005336:	f7fb f8e5 	bl	8000504 <__aeabi_fcmpgt>
 800533a:	2800      	cmp	r0, #0
 800533c:	d114      	bne.n	8005368 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 800533e:	2000      	movs	r0, #0
}
 8005340:	b003      	add	sp, #12
 8005342:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005344:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005346:	7882      	ldrb	r2, [r0, #2]
 8005348:	78c0      	ldrb	r0, [r0, #3]
 800534a:	00d3      	lsls	r3, r2, #3
 800534c:	189b      	adds	r3, r3, r2
 800534e:	4a1b      	ldr	r2, [pc, #108]	; (80053bc <CheckSnippetCondition+0xcc>)
 8005350:	5c9b      	ldrb	r3, [r3, r2]
 8005352:	1a18      	subs	r0, r3, r0
 8005354:	4243      	negs	r3, r0
 8005356:	4158      	adcs	r0, r3
 8005358:	b2c0      	uxtb	r0, r0
 800535a:	e7f1      	b.n	8005340 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 800535c:	1c29      	adds	r1, r5, #0
 800535e:	9801      	ldr	r0, [sp, #4]
 8005360:	f7fb f8b6 	bl	80004d0 <__aeabi_fcmpeq>
 8005364:	2800      	cmp	r0, #0
 8005366:	d1ea      	bne.n	800533e <CheckSnippetCondition+0x4e>
 8005368:	2100      	movs	r1, #0
 800536a:	1c28      	adds	r0, r5, #0
 800536c:	f7fb f8b0 	bl	80004d0 <__aeabi_fcmpeq>
 8005370:	4243      	negs	r3, r0
 8005372:	4158      	adcs	r0, r3
 8005374:	e7e4      	b.n	8005340 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 8005376:	1c29      	adds	r1, r5, #0
 8005378:	9801      	ldr	r0, [sp, #4]
 800537a:	f7fb f8a9 	bl	80004d0 <__aeabi_fcmpeq>
 800537e:	1e43      	subs	r3, r0, #1
 8005380:	4198      	sbcs	r0, r3
 8005382:	e7dd      	b.n	8005340 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 8005384:	1c29      	adds	r1, r5, #0
 8005386:	9801      	ldr	r0, [sp, #4]
 8005388:	f7fb f8a8 	bl	80004dc <__aeabi_fcmplt>
 800538c:	1e43      	subs	r3, r0, #1
 800538e:	4198      	sbcs	r0, r3
 8005390:	e7d6      	b.n	8005340 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 8005392:	1c29      	adds	r1, r5, #0
 8005394:	9801      	ldr	r0, [sp, #4]
 8005396:	f7fb f8ab 	bl	80004f0 <__aeabi_fcmple>
 800539a:	1e43      	subs	r3, r0, #1
 800539c:	4198      	sbcs	r0, r3
 800539e:	e7cf      	b.n	8005340 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80053a0:	1c29      	adds	r1, r5, #0
 80053a2:	9801      	ldr	r0, [sp, #4]
 80053a4:	f7fb f8b8 	bl	8000518 <__aeabi_fcmpge>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d1dd      	bne.n	8005368 <CheckSnippetCondition+0x78>
 80053ac:	e7c7      	b.n	800533e <CheckSnippetCondition+0x4e>
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	20006c9c 	.word	0x20006c9c
 80053b4:	20000094 	.word	0x20000094
 80053b8:	08016e90 	.word	0x08016e90
 80053bc:	200027c8 	.word	0x200027c8

080053c0 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	46de      	mov	lr, fp
 80053c4:	464e      	mov	r6, r9
 80053c6:	4645      	mov	r5, r8
 80053c8:	4657      	mov	r7, sl
 80053ca:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053cc:	f007 ff4a 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d0:	4b23      	ldr	r3, [pc, #140]	; (8005460 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053d2:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d4:	4698      	mov	r8, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d039      	beq.n	8005450 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80053dc:	4b21      	ldr	r3, [pc, #132]	; (8005464 <ExecuteSnippet+0xa4>)
 80053de:	4f22      	ldr	r7, [pc, #136]	; (8005468 <ExecuteSnippet+0xa8>)
 80053e0:	469b      	mov	fp, r3
 80053e2:	2320      	movs	r3, #32
 80053e4:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <ExecuteSnippet+0xac>)
 80053e8:	4d21      	ldr	r5, [pc, #132]	; (8005470 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 80053ea:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053ec:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053ee:	4699      	mov	r9, r3
 80053f0:	e006      	b.n	8005400 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 80053f2:	4643      	mov	r3, r8
 80053f4:	3401      	adds	r4, #1
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b2a4      	uxth	r4, r4
 80053fa:	3514      	adds	r5, #20
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d927      	bls.n	8005450 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005400:	7c2b      	ldrb	r3, [r5, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f5      	beq.n	80053f2 <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005406:	b2e0      	uxtb	r0, r4
 8005408:	f7ff ff72 	bl	80052f0 <CheckSnippetCondition>
 800540c:	2800      	cmp	r0, #0
 800540e:	d0f0      	beq.n	80053f2 <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005410:	465b      	mov	r3, fp
 8005412:	4652      	mov	r2, sl
 8005414:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005416:	e00e      	b.n	8005436 <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005418:	464b      	mov	r3, r9
 800541a:	003a      	movs	r2, r7
 800541c:	7818      	ldrb	r0, [r3, #0]
 800541e:	2100      	movs	r1, #0
 8005420:	0033      	movs	r3, r6
 8005422:	f7ff fc39 	bl	8004c98 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005426:	0030      	movs	r0, r6
 8005428:	f7fa fe76 	bl	8000118 <strlen>
 800542c:	2100      	movs	r1, #0
 800542e:	0002      	movs	r2, r0
 8005430:	0030      	movs	r0, r6
 8005432:	f00d f8b1 	bl	8012598 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005436:	0039      	movs	r1, r7
 8005438:	68e8      	ldr	r0, [r5, #12]
 800543a:	f7ff ff1d 	bl	8005278 <ParseSnippetCommand>
 800543e:	2800      	cmp	r0, #0
 8005440:	d1ea      	bne.n	8005418 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005442:	4643      	mov	r3, r8
 8005444:	3401      	adds	r4, #1
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	b2a4      	uxth	r4, r4
 800544a:	3514      	adds	r5, #20
 800544c:	42a3      	cmp	r3, r4
 800544e:	d8d7      	bhi.n	8005400 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005450:	2000      	movs	r0, #0
 8005452:	bc3c      	pop	{r2, r3, r4, r5}
 8005454:	4690      	mov	r8, r2
 8005456:	4699      	mov	r9, r3
 8005458:	46a2      	mov	sl, r4
 800545a:	46ab      	mov	fp, r5
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	2000182c 	.word	0x2000182c
 8005464:	20006c00 	.word	0x20006c00
 8005468:	200018ac 	.word	0x200018ac
 800546c:	20000c28 	.word	0x20000c28
 8005470:	20006c9c 	.word	0x20006c9c

08005474 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005474:	2000      	movs	r0, #0
 8005476:	4770      	bx	lr

08005478 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005478:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800547a:	4b03      	ldr	r3, [pc, #12]	; (8005488 <flashsizeCommand+0x10>)
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <flashsizeCommand+0x14>)
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	f00d fa84 	bl	801298c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005484:	2000      	movs	r0, #0
 8005486:	bd10      	pop	{r4, pc}
 8005488:	1ffff7cc 	.word	0x1ffff7cc
 800548c:	08018020 	.word	0x08018020

08005490 <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005490:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005492:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005494:	0004      	movs	r4, r0
 8005496:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005498:	a901      	add	r1, sp, #4
 800549a:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054a0:	f006 f92c 	bl	800b6fc <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054a4:	4669      	mov	r1, sp
 80054a6:	0020      	movs	r0, r4
 80054a8:	f00d faac 	bl	8012a04 <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80054ac:	9801      	ldr	r0, [sp, #4]
 80054ae:	f7fd fb39 	bl	8002b24 <__aeabi_f2d>
 80054b2:	0002      	movs	r2, r0
 80054b4:	000b      	movs	r3, r1
 80054b6:	0020      	movs	r0, r4
 80054b8:	4902      	ldr	r1, [pc, #8]	; (80054c4 <ReadVrefCommand+0x34>)
 80054ba:	f00d fa67 	bl	801298c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80054be:	2000      	movs	r0, #0
 80054c0:	b002      	add	sp, #8
 80054c2:	bd10      	pop	{r4, pc}
 80054c4:	08018040 	.word	0x08018040

080054c8 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054c8:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054ca:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054cc:	0004      	movs	r4, r0
 80054ce:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054d0:	a901      	add	r1, sp, #4
 80054d2:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054d8:	f006 f910 	bl	800b6fc <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054dc:	4669      	mov	r1, sp
 80054de:	0020      	movs	r0, r4
 80054e0:	f00d fa90 	bl	8012a04 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80054e4:	9800      	ldr	r0, [sp, #0]
 80054e6:	f7fd fb1d 	bl	8002b24 <__aeabi_f2d>
 80054ea:	0002      	movs	r2, r0
 80054ec:	000b      	movs	r3, r1
 80054ee:	0020      	movs	r0, r4
 80054f0:	4902      	ldr	r1, [pc, #8]	; (80054fc <ReadTempCommand+0x34>)
 80054f2:	f00d fa4b 	bl	801298c <sprintf>
}
 80054f6:	2000      	movs	r0, #0
 80054f8:	b002      	add	sp, #8
 80054fa:	bd10      	pop	{r4, pc}
 80054fc:	08018068 	.word	0x08018068

08005500 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005500:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005504:	0014      	movs	r4, r2
 8005506:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005508:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800550a:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800550c:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800550e:	aa01      	add	r2, sp, #4
 8005510:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005512:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005514:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 8005516:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005518:	f007 fea8 	bl	800d26c <FreeRTOS_CLIGetParameter>
 800551c:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800551e:	aa02      	add	r2, sp, #8
 8005520:	2102      	movs	r1, #2
 8005522:	0020      	movs	r0, r4
 8005524:	f007 fea2 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005528:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800552a:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800552c:	3b32      	subs	r3, #50	; 0x32
 800552e:	2b01      	cmp	r3, #1
 8005530:	d907      	bls.n	8005542 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005532:	2215      	movs	r2, #21
 8005534:	4919      	ldr	r1, [pc, #100]	; (800559c <ADCReadCommand+0x9c>)
 8005536:	0030      	movs	r0, r6
 8005538:	f00d f825 	bl	8012586 <memcpy>
}
 800553c:	2000      	movs	r0, #0
 800553e:	b005      	add	sp, #20
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005542:	0028      	movs	r0, r5
 8005544:	f00c fd5f 	bl	8012006 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005548:	4d15      	ldr	r5, [pc, #84]	; (80055a0 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800554a:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800554c:	0029      	movs	r1, r5
 800554e:	0038      	movs	r0, r7
 8005550:	f7fa fdd8 	bl	8000104 <strcmp>
 8005554:	2800      	cmp	r0, #0
 8005556:	d005      	beq.n	8005564 <ADCReadCommand+0x64>
 8005558:	4912      	ldr	r1, [pc, #72]	; (80055a4 <ADCReadCommand+0xa4>)
 800555a:	0038      	movs	r0, r7
 800555c:	f7fa fdd2 	bl	8000104 <strcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	d115      	bne.n	8005590 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005564:	0029      	movs	r1, r5
 8005566:	0020      	movs	r0, r4
 8005568:	f006 fa9a 	bl	800baa0 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 800556c:	aa03      	add	r2, sp, #12
 800556e:	0029      	movs	r1, r5
 8005570:	0020      	movs	r0, r4
 8005572:	f006 faed 	bl	800bb50 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005576:	a903      	add	r1, sp, #12
 8005578:	0030      	movs	r0, r6
 800557a:	f00d fa43 	bl	8012a04 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800557e:	9803      	ldr	r0, [sp, #12]
 8005580:	f7fb f81e 	bl	80005c0 <__aeabi_f2uiz>
 8005584:	4908      	ldr	r1, [pc, #32]	; (80055a8 <ADCReadCommand+0xa8>)
 8005586:	b282      	uxth	r2, r0
 8005588:	0030      	movs	r0, r6
 800558a:	f00d f9ff 	bl	801298c <sprintf>
 800558e:	e7d5      	b.n	800553c <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005590:	2212      	movs	r2, #18
 8005592:	4906      	ldr	r1, [pc, #24]	; (80055ac <ADCReadCommand+0xac>)
 8005594:	0030      	movs	r0, r6
 8005596:	f00c fff6 	bl	8012586 <memcpy>
 800559a:	e7cf      	b.n	800553c <ADCReadCommand+0x3c>
 800559c:	080180bc 	.word	0x080180bc
 80055a0:	0801808c 	.word	0x0801808c
 80055a4:	08018090 	.word	0x08018090
 80055a8:	08018098 	.word	0x08018098
 80055ac:	080180a8 	.word	0x080180a8

080055b0 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	4657      	mov	r7, sl
 80055b4:	46de      	mov	lr, fp
 80055b6:	464e      	mov	r6, r9
 80055b8:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 80055ba:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055bc:	b5e0      	push	{r5, r6, r7, lr}
 80055be:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80055c0:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80055c2:	4b5b      	ldr	r3, [pc, #364]	; (8005730 <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c4:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80055c6:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c8:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80055ca:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055cc:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055ce:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80055d0:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d2:	f007 fe4b 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055d6:	4957      	ldr	r1, [pc, #348]	; (8005734 <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d8:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055da:	f7fa fd93 	bl	8000104 <strcmp>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d15c      	bne.n	800569c <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80055e2:	4d55      	ldr	r5, [pc, #340]	; (8005738 <testportCommand+0x188>)
 80055e4:	4a55      	ldr	r2, [pc, #340]	; (800573c <testportCommand+0x18c>)
 80055e6:	782b      	ldrb	r3, [r5, #0]
 80055e8:	2401      	movs	r4, #1
 80055ea:	18d2      	adds	r2, r2, r3
 80055ec:	3a01      	subs	r2, #1
 80055ee:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055f0:	4a53      	ldr	r2, [pc, #332]	; (8005740 <testportCommand+0x190>)
 80055f2:	4691      	mov	r9, r2
 80055f4:	e003      	b.n	80055fe <testportCommand+0x4e>
 80055f6:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80055f8:	2c07      	cmp	r4, #7
 80055fa:	d047      	beq.n	800568c <testportCommand+0xdc>
 80055fc:	782b      	ldrb	r3, [r5, #0]
 80055fe:	b2e2      	uxtb	r2, r4
 8005600:	4690      	mov	r8, r2
			if(PcPort != ports){
 8005602:	4293      	cmp	r3, r2
 8005604:	d0f7      	beq.n	80055f6 <testportCommand+0x46>
				WriteVaule[0] =rand();
 8005606:	f00c ffdf 	bl	80125c8 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 800560a:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 800560c:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 800560e:	2201      	movs	r2, #1
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	0039      	movs	r1, r7
 8005614:	469b      	mov	fp, r3
 8005616:	4640      	mov	r0, r8
 8005618:	3b5a      	subs	r3, #90	; 0x5a
 800561a:	f007 fb87 	bl	800cd2c <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800561e:	4640      	mov	r0, r8
 8005620:	f007 fbe8 	bl	800cdf4 <GetUart>
 8005624:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005626:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005628:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 800562a:	b2db      	uxtb	r3, r3
 800562c:	429a      	cmp	r2, r3
 800562e:	d03f      	beq.n	80056b0 <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005630:	0022      	movs	r2, r4
 8005632:	4944      	ldr	r1, [pc, #272]	; (8005744 <testportCommand+0x194>)
 8005634:	4650      	mov	r0, sl
 8005636:	f00d f9a9 	bl	801298c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800563a:	4650      	mov	r0, sl
 800563c:	f7fa fd6c 	bl	8000118 <strlen>
 8005640:	465b      	mov	r3, fp
 8005642:	b282      	uxth	r2, r0
 8005644:	4651      	mov	r1, sl
 8005646:	7828      	ldrb	r0, [r5, #0]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	230a      	movs	r3, #10
 800564c:	f007 fb6e 	bl	800cd2c <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005650:	2254      	movs	r2, #84	; 0x54
 8005652:	493d      	ldr	r1, [pc, #244]	; (8005748 <testportCommand+0x198>)
 8005654:	4650      	mov	r0, sl
 8005656:	f00c ff96 	bl	8012586 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800565a:	2364      	movs	r3, #100	; 0x64
 800565c:	7828      	ldrb	r0, [r5, #0]
 800565e:	2253      	movs	r2, #83	; 0x53
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4651      	mov	r1, sl
 8005664:	3b5a      	subs	r3, #90	; 0x5a
 8005666:	f007 fb61 	bl	800cd2c <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800566a:	3601      	adds	r6, #1
 800566c:	e002      	b.n	8005674 <testportCommand+0xc4>
					Delay_ms(1);
 800566e:	2001      	movs	r0, #1
 8005670:	f009 fb8c 	bl	800ed8c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005674:	782a      	ldrb	r2, [r5, #0]
 8005676:	3a01      	subs	r2, #1
 8005678:	0053      	lsls	r3, r2, #1
 800567a:	189b      	adds	r3, r3, r2
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	444b      	add	r3, r9
 8005680:	5d9b      	ldrb	r3, [r3, r6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f3      	beq.n	800566e <testportCommand+0xbe>
 8005686:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005688:	2c07      	cmp	r4, #7
 800568a:	d1b7      	bne.n	80055fc <testportCommand+0x4c>
}
 800568c:	2000      	movs	r0, #0
 800568e:	b005      	add	sp, #20
 8005690:	bc3c      	pop	{r2, r3, r4, r5}
 8005692:	4690      	mov	r8, r2
 8005694:	4699      	mov	r9, r3
 8005696:	46a2      	mov	sl, r4
 8005698:	46ab      	mov	fp, r5
 800569a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 800569c:	2300      	movs	r3, #0
 800569e:	56e3      	ldrsb	r3, [r4, r3]
 80056a0:	2b70      	cmp	r3, #112	; 0x70
 80056a2:	d016      	beq.n	80056d2 <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80056a4:	220f      	movs	r2, #15
 80056a6:	4929      	ldr	r1, [pc, #164]	; (800574c <testportCommand+0x19c>)
 80056a8:	4650      	mov	r0, sl
 80056aa:	f00c ff6c 	bl	8012586 <memcpy>
 80056ae:	e7ed      	b.n	800568c <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80056b0:	0022      	movs	r2, r4
 80056b2:	4927      	ldr	r1, [pc, #156]	; (8005750 <testportCommand+0x1a0>)
 80056b4:	4650      	mov	r0, sl
 80056b6:	f00d f969 	bl	801298c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80056ba:	4650      	mov	r0, sl
 80056bc:	f7fa fd2c 	bl	8000118 <strlen>
 80056c0:	465b      	mov	r3, fp
 80056c2:	b282      	uxth	r2, r0
 80056c4:	4651      	mov	r1, sl
 80056c6:	7828      	ldrb	r0, [r5, #0]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	3b5a      	subs	r3, #90	; 0x5a
 80056cc:	f007 fb2e 	bl	800cd2c <writePxMutex>
 80056d0:	e7be      	b.n	8005650 <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056d2:	1c60      	adds	r0, r4, #1
 80056d4:	f00c fc97 	bl	8012006 <atol>
 80056d8:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056da:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056dc:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d905      	bls.n	80056ee <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056e2:	221b      	movs	r2, #27
 80056e4:	491b      	ldr	r1, [pc, #108]	; (8005754 <testportCommand+0x1a4>)
 80056e6:	4650      	mov	r0, sl
 80056e8:	f00c ff4d 	bl	8012586 <memcpy>
 80056ec:	e7ce      	b.n	800568c <testportCommand+0xdc>
				WriteVaule[0] =rand();
 80056ee:	f00c ff6b 	bl	80125c8 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056f2:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 80056f4:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056f6:	2201      	movs	r2, #1
 80056f8:	0039      	movs	r1, r7
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	0028      	movs	r0, r5
 80056fe:	3b32      	subs	r3, #50	; 0x32
 8005700:	f007 fb14 	bl	800cd2c <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005704:	2000      	movs	r0, #0
 8005706:	f007 fb75 	bl	800cdf4 <GetUart>
 800570a:	22ff      	movs	r2, #255	; 0xff
 800570c:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 800570e:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005712:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 8005714:	b2db      	uxtb	r3, r3
 8005716:	4299      	cmp	r1, r3
 8005718:	d004      	beq.n	8005724 <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 800571a:	490a      	ldr	r1, [pc, #40]	; (8005744 <testportCommand+0x194>)
 800571c:	4650      	mov	r0, sl
 800571e:	f00d f935 	bl	801298c <sprintf>
 8005722:	e7b3      	b.n	800568c <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005724:	490a      	ldr	r1, [pc, #40]	; (8005750 <testportCommand+0x1a0>)
 8005726:	4650      	mov	r0, sl
 8005728:	f00d f930 	bl	801298c <sprintf>
 800572c:	e7ae      	b.n	800568c <testportCommand+0xdc>
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	08017108 	.word	0x08017108
 8005734:	080176a0 	.word	0x080176a0
 8005738:	20000c28 	.word	0x20000c28
 800573c:	200019f8 	.word	0x200019f8
 8005740:	20001a38 	.word	0x20001a38
 8005744:	080180f0 	.word	0x080180f0
 8005748:	08018104 	.word	0x08018104
 800574c:	08018174 	.word	0x08018174
 8005750:	080180d4 	.word	0x080180d4
 8005754:	08018158 	.word	0x08018158

08005758 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800575c:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800575e:	b082      	sub	sp, #8
 8005760:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005762:	466a      	mov	r2, sp
 8005764:	2101      	movs	r1, #1
 8005766:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800576c:	f007 fd7e 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005770:	2300      	movs	r3, #0
 8005772:	56c3      	ldrsb	r3, [r0, r3]
 8005774:	2b70      	cmp	r3, #112	; 0x70
 8005776:	d010      	beq.n	800579a <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005778:	aa01      	add	r2, sp, #4
 800577a:	2102      	movs	r1, #2
 800577c:	0020      	movs	r0, r4
 800577e:	f007 fd75 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005782:	2300      	movs	r3, #0
 8005784:	56c3      	ldrsb	r3, [r0, r3]
 8005786:	2b70      	cmp	r3, #112	; 0x70
 8005788:	d027      	beq.n	80057da <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800578a:	220f      	movs	r2, #15
 800578c:	4919      	ldr	r1, [pc, #100]	; (80057f4 <unbridgeCommand+0x9c>)
 800578e:	0028      	movs	r0, r5
 8005790:	f00c fef9 	bl	8012586 <memcpy>
}
 8005794:	2000      	movs	r0, #0
 8005796:	b002      	add	sp, #8
 8005798:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800579a:	3001      	adds	r0, #1
 800579c:	f00c fc33 	bl	8012006 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a0:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80057a2:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a4:	2102      	movs	r1, #2
 80057a6:	0020      	movs	r0, r4
 80057a8:	f007 fd60 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057ac:	2300      	movs	r3, #0
 80057ae:	56c3      	ldrsb	r3, [r0, r3]
 80057b0:	2b70      	cmp	r3, #112	; 0x70
 80057b2:	d1ea      	bne.n	800578a <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057b4:	3001      	adds	r0, #1
 80057b6:	f00c fc26 	bl	8012006 <atol>
 80057ba:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80057bc:	b2c1      	uxtb	r1, r0
 80057be:	b2f0      	uxtb	r0, r6
 80057c0:	f7fe ffe2 	bl	8004788 <Unbridge>
	if(result == BOS_OK)
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d10c      	bne.n	80057e2 <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80057c8:	22ff      	movs	r2, #255	; 0xff
 80057ca:	0023      	movs	r3, r4
 80057cc:	490a      	ldr	r1, [pc, #40]	; (80057f8 <unbridgeCommand+0xa0>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	0028      	movs	r0, r5
 80057d2:	4032      	ands	r2, r6
 80057d4:	f00d f8da 	bl	801298c <sprintf>
 80057d8:	e7dc      	b.n	8005794 <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057da:	3001      	adds	r0, #1
 80057dc:	f00c fc13 	bl	8012006 <atol>
 80057e0:	e7d3      	b.n	800578a <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 80057e2:	2867      	cmp	r0, #103	; 0x67
 80057e4:	d0d1      	beq.n	800578a <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80057e6:	2219      	movs	r2, #25
 80057e8:	4904      	ldr	r1, [pc, #16]	; (80057fc <unbridgeCommand+0xa4>)
 80057ea:	0028      	movs	r0, r5
 80057ec:	f00c fecb 	bl	8012586 <memcpy>
	return pdFALSE;
 80057f0:	e7d0      	b.n	8005794 <unbridgeCommand+0x3c>
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	08018174 	.word	0x08018174
 80057f8:	08018184 	.word	0x08018184
 80057fc:	080181a4 	.word	0x080181a4

08005800 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005804:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005806:	b082      	sub	sp, #8
 8005808:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800580a:	466a      	mov	r2, sp
 800580c:	2101      	movs	r1, #1
 800580e:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005814:	f007 fd2a 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005818:	2300      	movs	r3, #0
 800581a:	56c3      	ldrsb	r3, [r0, r3]
 800581c:	2b70      	cmp	r3, #112	; 0x70
 800581e:	d010      	beq.n	8005842 <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005820:	aa01      	add	r2, sp, #4
 8005822:	2102      	movs	r1, #2
 8005824:	0020      	movs	r0, r4
 8005826:	f007 fd21 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800582a:	2300      	movs	r3, #0
 800582c:	56c3      	ldrsb	r3, [r0, r3]
 800582e:	2b70      	cmp	r3, #112	; 0x70
 8005830:	d027      	beq.n	8005882 <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005832:	220f      	movs	r2, #15
 8005834:	4919      	ldr	r1, [pc, #100]	; (800589c <bridgeCommand+0x9c>)
 8005836:	0028      	movs	r0, r5
 8005838:	f00c fea5 	bl	8012586 <memcpy>
}
 800583c:	2000      	movs	r0, #0
 800583e:	b002      	add	sp, #8
 8005840:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005842:	3001      	adds	r0, #1
 8005844:	f00c fbdf 	bl	8012006 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005848:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800584a:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800584c:	2102      	movs	r1, #2
 800584e:	0020      	movs	r0, r4
 8005850:	f007 fd0c 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005854:	2300      	movs	r3, #0
 8005856:	56c3      	ldrsb	r3, [r0, r3]
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d1ea      	bne.n	8005832 <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800585c:	3001      	adds	r0, #1
 800585e:	f00c fbd2 	bl	8012006 <atol>
 8005862:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005864:	b2c1      	uxtb	r1, r0
 8005866:	b2f0      	uxtb	r0, r6
 8005868:	f7fe ff7a 	bl	8004760 <Bridge>
	if(result == BOS_OK)
 800586c:	2800      	cmp	r0, #0
 800586e:	d10c      	bne.n	800588a <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005870:	22ff      	movs	r2, #255	; 0xff
 8005872:	0023      	movs	r3, r4
 8005874:	490a      	ldr	r1, [pc, #40]	; (80058a0 <bridgeCommand+0xa0>)
 8005876:	4013      	ands	r3, r2
 8005878:	0028      	movs	r0, r5
 800587a:	4032      	ands	r2, r6
 800587c:	f00d f886 	bl	801298c <sprintf>
 8005880:	e7dc      	b.n	800583c <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005882:	3001      	adds	r0, #1
 8005884:	f00c fbbf 	bl	8012006 <atol>
 8005888:	e7d3      	b.n	8005832 <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 800588a:	2867      	cmp	r0, #103	; 0x67
 800588c:	d0d1      	beq.n	8005832 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800588e:	2217      	movs	r2, #23
 8005890:	4904      	ldr	r1, [pc, #16]	; (80058a4 <bridgeCommand+0xa4>)
 8005892:	0028      	movs	r0, r5
 8005894:	f00c fe77 	bl	8012586 <memcpy>
	return pdFALSE;
 8005898:	e7d0      	b.n	800583c <bridgeCommand+0x3c>
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	08018174 	.word	0x08018174
 80058a0:	080181c0 	.word	0x080181c0
 80058a4:	080181e4 	.word	0x080181e4

080058a8 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	46d6      	mov	lr, sl
 80058ac:	4646      	mov	r6, r8
 80058ae:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 80058b0:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058b2:	b5c0      	push	{r6, r7, lr}
 80058b4:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058b6:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058b8:	0006      	movs	r6, r0
 80058ba:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058bc:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80058be:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058c0:	f007 fcd4 	bl	800d26c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80058c4:	f00c fb99 	bl	8011ffa <atoi>
 80058c8:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	d003      	beq.n	80058d6 <delSnipCommand+0x2e>
 80058ce:	4f30      	ldr	r7, [pc, #192]	; (8005990 <delSnipCommand+0xe8>)
 80058d0:	783b      	ldrb	r3, [r7, #0]
 80058d2:	42ab      	cmp	r3, r5
 80058d4:	d20b      	bcs.n	80058ee <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058d6:	2223      	movs	r2, #35	; 0x23
 80058d8:	492e      	ldr	r1, [pc, #184]	; (8005994 <delSnipCommand+0xec>)
 80058da:	0030      	movs	r0, r6
 80058dc:	f00c fe53 	bl	8012586 <memcpy>
}
 80058e0:	2000      	movs	r0, #0
 80058e2:	b002      	add	sp, #8
 80058e4:	bc1c      	pop	{r2, r3, r4}
 80058e6:	4690      	mov	r8, r2
 80058e8:	4699      	mov	r9, r3
 80058ea:	46a2      	mov	sl, r4
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80058ee:	23ff      	movs	r3, #255	; 0xff
 80058f0:	4003      	ands	r3, r0
 80058f2:	469a      	mov	sl, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	0098      	lsls	r0, r3, #2
 80058f8:	18c0      	adds	r0, r0, r3
 80058fa:	4b27      	ldr	r3, [pc, #156]	; (8005998 <delSnipCommand+0xf0>)
 80058fc:	0080      	lsls	r0, r0, #2
 80058fe:	4699      	mov	r9, r3
 8005900:	4680      	mov	r8, r0
 8005902:	44c8      	add	r8, r9
 8005904:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005906:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 8005908:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 800590a:	2204      	movs	r2, #4
 800590c:	2100      	movs	r1, #0
 800590e:	4448      	add	r0, r9
 8005910:	f00c fe42 	bl	8012598 <memset>
		snippets[index - 1].state = false;
 8005914:	2300      	movs	r3, #0
 8005916:	4642      	mov	r2, r8
 8005918:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 800591a:	68d0      	ldr	r0, [r2, #12]
 800591c:	f00c fbf0 	bl	8012100 <free>
		snippets[index - 1].cmd = NULL;
 8005920:	4643      	mov	r3, r8
 8005922:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005924:	783b      	ldrb	r3, [r7, #0]
 8005926:	42ab      	cmp	r3, r5
 8005928:	d92e      	bls.n	8005988 <delSnipCommand+0xe0>
 800592a:	3b01      	subs	r3, #1
 800592c:	1b58      	subs	r0, r3, r5
 800592e:	b2c0      	uxtb	r0, r0
 8005930:	4450      	add	r0, sl
 8005932:	4652      	mov	r2, sl
 8005934:	0085      	lsls	r5, r0, #2
 8005936:	182d      	adds	r5, r5, r0
 8005938:	4648      	mov	r0, r9
 800593a:	0094      	lsls	r4, r2, #2
 800593c:	4454      	add	r4, sl
 800593e:	00a4      	lsls	r4, r4, #2
 8005940:	00ad      	lsls	r5, r5, #2
 8005942:	3014      	adds	r0, #20
 8005944:	444c      	add	r4, r9
 8005946:	4698      	mov	r8, r3
 8005948:	182d      	adds	r5, r5, r0
 800594a:	e002      	b.n	8005952 <delSnipCommand+0xaa>
 800594c:	3414      	adds	r4, #20
 800594e:	42ac      	cmp	r4, r5
 8005950:	d010      	beq.n	8005974 <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 8005952:	7823      	ldrb	r3, [r4, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f9      	beq.n	800594c <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005958:	0020      	movs	r0, r4
 800595a:	0021      	movs	r1, r4
 800595c:	2214      	movs	r2, #20
 800595e:	3814      	subs	r0, #20
 8005960:	f00c fe11 	bl	8012586 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005964:	0020      	movs	r0, r4
 8005966:	2214      	movs	r2, #20
 8005968:	2100      	movs	r1, #0
 800596a:	3414      	adds	r4, #20
 800596c:	f00c fe14 	bl	8012598 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005970:	42ac      	cmp	r4, r5
 8005972:	d1ee      	bne.n	8005952 <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005974:	4643      	mov	r3, r8
 8005976:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 8005978:	f004 f804 	bl	8009984 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800597c:	2236      	movs	r2, #54	; 0x36
 800597e:	4907      	ldr	r1, [pc, #28]	; (800599c <delSnipCommand+0xf4>)
 8005980:	0030      	movs	r0, r6
 8005982:	f00c fe00 	bl	8012586 <memcpy>
 8005986:	e7ab      	b.n	80058e0 <delSnipCommand+0x38>
 8005988:	3b01      	subs	r3, #1
 800598a:	4698      	mov	r8, r3
 800598c:	e7f2      	b.n	8005974 <delSnipCommand+0xcc>
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	2000182c 	.word	0x2000182c
 8005994:	08018234 	.word	0x08018234
 8005998:	20006c9c 	.word	0x20006c9c
 800599c:	080181fc 	.word	0x080181fc

080059a0 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a0:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 80059a2:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a4:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059a6:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a8:	0005      	movs	r5, r0
 80059aa:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059ac:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80059ae:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059b0:	f007 fc5c 	bl	800d26c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80059b4:	f00c fb21 	bl	8011ffa <atoi>
 80059b8:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <pauseSnipCommand+0x26>
 80059be:	4a0e      	ldr	r2, [pc, #56]	; (80059f8 <pauseSnipCommand+0x58>)
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d207      	bcs.n	80059d6 <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059c6:	2223      	movs	r2, #35	; 0x23
 80059c8:	490c      	ldr	r1, [pc, #48]	; (80059fc <pauseSnipCommand+0x5c>)
 80059ca:	0028      	movs	r0, r5
 80059cc:	f00c fddb 	bl	8012586 <memcpy>
}
 80059d0:	2000      	movs	r0, #0
 80059d2:	b003      	add	sp, #12
 80059d4:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 80059d6:	23ff      	movs	r3, #255	; 0xff
 80059d8:	4018      	ands	r0, r3
 80059da:	3801      	subs	r0, #1
 80059dc:	0083      	lsls	r3, r0, #2
 80059de:	1818      	adds	r0, r3, r0
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pauseSnipCommand+0x60>)
 80059e2:	0080      	lsls	r0, r0, #2
 80059e4:	1818      	adds	r0, r3, r0
 80059e6:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 80059e8:	f003 ffcc 	bl	8009984 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80059ec:	2235      	movs	r2, #53	; 0x35
 80059ee:	4905      	ldr	r1, [pc, #20]	; (8005a04 <pauseSnipCommand+0x64>)
 80059f0:	0028      	movs	r0, r5
 80059f2:	f00c fdc8 	bl	8012586 <memcpy>
 80059f6:	e7eb      	b.n	80059d0 <pauseSnipCommand+0x30>
 80059f8:	2000182c 	.word	0x2000182c
 80059fc:	08018234 	.word	0x08018234
 8005a00:	20006c9c 	.word	0x20006c9c
 8005a04:	08018258 	.word	0x08018258

08005a08 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005a08:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a0e:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a10:	0004      	movs	r4, r0
 8005a12:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a14:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005a16:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a18:	f007 fc28 	bl	800d26c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a1c:	f00c faed 	bl	8011ffa <atoi>
 8005a20:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <actSnipCommand+0x26>
 8005a26:	4a0f      	ldr	r2, [pc, #60]	; (8005a64 <actSnipCommand+0x5c>)
 8005a28:	7812      	ldrb	r2, [r2, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d207      	bcs.n	8005a3e <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a2e:	2223      	movs	r2, #35	; 0x23
 8005a30:	490d      	ldr	r1, [pc, #52]	; (8005a68 <actSnipCommand+0x60>)
 8005a32:	0020      	movs	r0, r4
 8005a34:	f00c fda7 	bl	8012586 <memcpy>
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	b002      	add	sp, #8
 8005a3c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005a3e:	23ff      	movs	r3, #255	; 0xff
 8005a40:	4018      	ands	r0, r3
 8005a42:	3801      	subs	r0, #1
 8005a44:	0083      	lsls	r3, r0, #2
 8005a46:	1818      	adds	r0, r3, r0
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <actSnipCommand+0x64>)
 8005a4a:	0080      	lsls	r0, r0, #2
 8005a4c:	1818      	adds	r0, r3, r0
 8005a4e:	2301      	movs	r3, #1
 8005a50:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005a52:	f003 ff97 	bl	8009984 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a56:	2238      	movs	r2, #56	; 0x38
 8005a58:	4905      	ldr	r1, [pc, #20]	; (8005a70 <actSnipCommand+0x68>)
 8005a5a:	0020      	movs	r0, r4
 8005a5c:	f00c fd93 	bl	8012586 <memcpy>
 8005a60:	e7ea      	b.n	8005a38 <actSnipCommand+0x30>
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	2000182c 	.word	0x2000182c
 8005a68:	08018234 	.word	0x08018234
 8005a6c:	20006c9c 	.word	0x20006c9c
 8005a70:	08018290 	.word	0x08018290

08005a74 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a76:	46de      	mov	lr, fp
 8005a78:	4657      	mov	r7, sl
 8005a7a:	464e      	mov	r6, r9
 8005a7c:	4645      	mov	r5, r8
 8005a7e:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005a80:	4b7c      	ldr	r3, [pc, #496]	; (8005c74 <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a82:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005a84:	3304      	adds	r3, #4
 8005a86:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a88:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005a8a:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005a8c:	c213      	stmia	r2!, {r0, r1, r4}
 8005a8e:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a90:	4979      	ldr	r1, [pc, #484]	; (8005c78 <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005a92:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a94:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <snipCommand+0x208>)
 8005a96:	2237      	movs	r2, #55	; 0x37
 8005a98:	7818      	ldrb	r0, [r3, #0]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	3333      	adds	r3, #51	; 0x33
 8005aa2:	f007 f943 	bl	800cd2c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005aa6:	4b76      	ldr	r3, [pc, #472]	; (8005c80 <snipCommand+0x20c>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d044      	beq.n	8005b38 <snipCommand+0xc4>
 8005aae:	2500      	movs	r5, #0
 8005ab0:	4b74      	ldr	r3, [pc, #464]	; (8005c84 <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005ab2:	46a8      	mov	r8, r5
 8005ab4:	469a      	mov	sl, r3
 8005ab6:	4c74      	ldr	r4, [pc, #464]	; (8005c88 <snipCommand+0x214>)
 8005ab8:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005aba:	009d      	lsls	r5, r3, #2
 8005abc:	18e9      	adds	r1, r5, r3
 8005abe:	1c5e      	adds	r6, r3, #1
 8005ac0:	008b      	lsls	r3, r1, #2
 8005ac2:	469b      	mov	fp, r3
 8005ac4:	4653      	mov	r3, sl
 8005ac6:	465a      	mov	r2, fp
 8005ac8:	5c9b      	ldrb	r3, [r3, r2]
 8005aca:	b2f6      	uxtb	r6, r6
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d140      	bne.n	8005b52 <snipCommand+0xde>
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	4451      	add	r1, sl
 8005ad4:	68c8      	ldr	r0, [r1, #12]
 8005ad6:	4445      	add	r5, r8
 8005ad8:	00ad      	lsls	r5, r5, #2
 8005ada:	4455      	add	r5, sl
 8005adc:	e00e      	b.n	8005afc <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ade:	0023      	movs	r3, r4
 8005ae0:	003a      	movs	r2, r7
 8005ae2:	496a      	ldr	r1, [pc, #424]	; (8005c8c <snipCommand+0x218>)
 8005ae4:	0038      	movs	r0, r7
 8005ae6:	f00c ff51 	bl	801298c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005aea:	0020      	movs	r0, r4
 8005aec:	f7fa fb14 	bl	8000118 <strlen>
 8005af0:	2100      	movs	r1, #0
 8005af2:	0002      	movs	r2, r0
 8005af4:	0020      	movs	r0, r4
 8005af6:	f00c fd4f 	bl	8012598 <memset>
 8005afa:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005afc:	0021      	movs	r1, r4
 8005afe:	f7ff fbbb 	bl	8005278 <ParseSnippetCommand>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d1eb      	bne.n	8005ade <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005b06:	0038      	movs	r0, r7
 8005b08:	f7fa fb06 	bl	8000118 <strlen>
 8005b0c:	220c      	movs	r2, #12
 8005b0e:	0005      	movs	r5, r0
 8005b10:	495f      	ldr	r1, [pc, #380]	; (8005c90 <snipCommand+0x21c>)
 8005b12:	1838      	adds	r0, r7, r0
 8005b14:	f00c fd37 	bl	8012586 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005b18:	4b58      	ldr	r3, [pc, #352]	; (8005c7c <snipCommand+0x208>)
 8005b1a:	350b      	adds	r5, #11
 8005b1c:	7818      	ldrb	r0, [r3, #0]
 8005b1e:	2301      	movs	r3, #1
 8005b20:	425b      	negs	r3, r3
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	b2aa      	uxth	r2, r5
 8005b26:	3333      	adds	r3, #51	; 0x33
 8005b28:	0039      	movs	r1, r7
 8005b2a:	f007 f8ff 	bl	800cd2c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005b2e:	4b54      	ldr	r3, [pc, #336]	; (8005c80 <snipCommand+0x20c>)
 8005b30:	46b0      	mov	r8, r6
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	42b3      	cmp	r3, r6
 8005b36:	d8bf      	bhi.n	8005ab8 <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005b38:	22b5      	movs	r2, #181	; 0xb5
 8005b3a:	4956      	ldr	r1, [pc, #344]	; (8005c94 <snipCommand+0x220>)
 8005b3c:	0038      	movs	r0, r7
 8005b3e:	f00c fd22 	bl	8012586 <memcpy>
}
 8005b42:	2000      	movs	r0, #0
 8005b44:	b00b      	add	sp, #44	; 0x2c
 8005b46:	bc3c      	pop	{r2, r3, r4, r5}
 8005b48:	4690      	mov	r8, r2
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	46ab      	mov	fp, r5
 8005b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005b52:	46d1      	mov	r9, sl
 8005b54:	44d9      	add	r9, fp
 8005b56:	464b      	mov	r3, r9
 8005b58:	7c1a      	ldrb	r2, [r3, #16]
 8005b5a:	494f      	ldr	r1, [pc, #316]	; (8005c98 <snipCommand+0x224>)
 8005b5c:	00d3      	lsls	r3, r2, #3
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	aa06      	add	r2, sp, #24
 8005b62:	4694      	mov	ip, r2
 8005b64:	0038      	movs	r0, r7
 8005b66:	4463      	add	r3, ip
 8005b68:	0032      	movs	r2, r6
 8005b6a:	f00c ff0f 	bl	801298c <sprintf>
		switch(snippets[s].cond.conditionType){
 8005b6e:	4653      	mov	r3, sl
 8005b70:	465a      	mov	r2, fp
 8005b72:	5c9b      	ldrb	r3, [r3, r2]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d029      	beq.n	8005bcc <snipCommand+0x158>
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d175      	bne.n	8005c68 <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	3106      	adds	r1, #6
 8005b80:	4451      	add	r1, sl
 8005b82:	2204      	movs	r2, #4
 8005b84:	a805      	add	r0, sp, #20
 8005b86:	f00c fcfe 	bl	8012586 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	78da      	ldrb	r2, [r3, #3]
 8005b8e:	9805      	ldr	r0, [sp, #20]
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0053      	lsls	r3, r2, #1
 8005b94:	189b      	adds	r3, r3, r2
 8005b96:	4a41      	ldr	r2, [pc, #260]	; (8005c9c <snipCommand+0x228>)
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	18d3      	adds	r3, r2, r3
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	469b      	mov	fp, r3
 8005ba0:	f7fc ffc0 	bl	8002b24 <__aeabi_f2d>
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	9002      	str	r0, [sp, #8]
 8005ba8:	9103      	str	r1, [sp, #12]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	4a31      	ldr	r2, [pc, #196]	; (8005c74 <snipCommand+0x200>)
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	0059      	lsls	r1, r3, #1
 8005bb2:	3214      	adds	r2, #20
 8005bb4:	18cb      	adds	r3, r1, r3
 8005bb6:	18d3      	adds	r3, r2, r3
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	003a      	movs	r2, r7
 8005bbc:	465b      	mov	r3, fp
 8005bbe:	4938      	ldr	r1, [pc, #224]	; (8005ca0 <snipCommand+0x22c>)
 8005bc0:	0038      	movs	r0, r7
 8005bc2:	f00c fee3 	bl	801298c <sprintf>
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	68d8      	ldr	r0, [r3, #12]
				break;
 8005bca:	e784      	b.n	8005ad6 <snipCommand+0x62>
 8005bcc:	464b      	mov	r3, r9
 8005bce:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005bd0:	78db      	ldrb	r3, [r3, #3]
 8005bd2:	3b05      	subs	r3, #5
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d900      	bls.n	8005bdc <snipCommand+0x168>
 8005bda:	e77c      	b.n	8005ad6 <snipCommand+0x62>
 8005bdc:	4a31      	ldr	r2, [pc, #196]	; (8005ca4 <snipCommand+0x230>)
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	58d3      	ldr	r3, [r2, r3]
 8005be2:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005be4:	4643      	mov	r3, r8
 8005be6:	18eb      	adds	r3, r5, r3
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4453      	add	r3, sl
 8005bec:	4699      	mov	r9, r3
 8005bee:	464a      	mov	r2, r9
 8005bf0:	789b      	ldrb	r3, [r3, #2]
 8005bf2:	9001      	str	r0, [sp, #4]
 8005bf4:	7912      	ldrb	r2, [r2, #4]
 8005bf6:	492c      	ldr	r1, [pc, #176]	; (8005ca8 <snipCommand+0x234>)
 8005bf8:	9200      	str	r2, [sp, #0]
 8005bfa:	0038      	movs	r0, r7
 8005bfc:	003a      	movs	r2, r7
 8005bfe:	f00c fec5 	bl	801298c <sprintf>
 8005c02:	464b      	mov	r3, r9
 8005c04:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c06:	e766      	b.n	8005ad6 <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c08:	4643      	mov	r3, r8
 8005c0a:	18eb      	adds	r3, r5, r3
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4453      	add	r3, sl
 8005c10:	4699      	mov	r9, r3
 8005c12:	464a      	mov	r2, r9
 8005c14:	789b      	ldrb	r3, [r3, #2]
 8005c16:	9001      	str	r0, [sp, #4]
 8005c18:	7912      	ldrb	r2, [r2, #4]
 8005c1a:	4924      	ldr	r1, [pc, #144]	; (8005cac <snipCommand+0x238>)
 8005c1c:	9200      	str	r2, [sp, #0]
 8005c1e:	0038      	movs	r0, r7
 8005c20:	003a      	movs	r2, r7
 8005c22:	f00c feb3 	bl	801298c <sprintf>
 8005c26:	464b      	mov	r3, r9
 8005c28:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c2a:	e754      	b.n	8005ad6 <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	18eb      	adds	r3, r5, r3
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4453      	add	r3, sl
 8005c34:	4699      	mov	r9, r3
 8005c36:	003a      	movs	r2, r7
 8005c38:	789b      	ldrb	r3, [r3, #2]
 8005c3a:	491d      	ldr	r1, [pc, #116]	; (8005cb0 <snipCommand+0x23c>)
 8005c3c:	9000      	str	r0, [sp, #0]
 8005c3e:	0038      	movs	r0, r7
 8005c40:	f00c fea4 	bl	801298c <sprintf>
 8005c44:	464b      	mov	r3, r9
 8005c46:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c48:	e745      	b.n	8005ad6 <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c4a:	4643      	mov	r3, r8
 8005c4c:	18eb      	adds	r3, r5, r3
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4453      	add	r3, sl
 8005c52:	4699      	mov	r9, r3
 8005c54:	003a      	movs	r2, r7
 8005c56:	789b      	ldrb	r3, [r3, #2]
 8005c58:	4916      	ldr	r1, [pc, #88]	; (8005cb4 <snipCommand+0x240>)
 8005c5a:	9000      	str	r0, [sp, #0]
 8005c5c:	0038      	movs	r0, r7
 8005c5e:	f00c fe95 	bl	801298c <sprintf>
 8005c62:	464b      	mov	r3, r9
 8005c64:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c66:	e736      	b.n	8005ad6 <snipCommand+0x62>
 8005c68:	2314      	movs	r3, #20
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	4353      	muls	r3, r2
 8005c6e:	4453      	add	r3, sl
 8005c70:	68d8      	ldr	r0, [r3, #12]
 8005c72:	e730      	b.n	8005ad6 <snipCommand+0x62>
 8005c74:	08017108 	.word	0x08017108
 8005c78:	080182c8 	.word	0x080182c8
 8005c7c:	20000c28 	.word	0x20000c28
 8005c80:	2000182c 	.word	0x2000182c
 8005c84:	20006c9c 	.word	0x20006c9c
 8005c88:	2000192c 	.word	0x2000192c
 8005c8c:	0801837c 	.word	0x0801837c
 8005c90:	08018384 	.word	0x08018384
 8005c94:	08018390 	.word	0x08018390
 8005c98:	08018300 	.word	0x08018300
 8005c9c:	20000094 	.word	0x20000094
 8005ca0:	0801836c 	.word	0x0801836c
 8005ca4:	08016eac 	.word	0x08016eac
 8005ca8:	08018350 	.word	0x08018350
 8005cac:	08018338 	.word	0x08018338
 8005cb0:	08018320 	.word	0x08018320
 8005cb4:	0801830c 	.word	0x0801830c

08005cb8 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005cbc:	f009 f87a 	bl	800edb4 <HAL_GetDEVID>
	switch(dev){
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <idcodeCommand+0x78>)
 8005cc2:	0400      	lsls	r0, r0, #16
 8005cc4:	469c      	mov	ip, r3
 8005cc6:	0c00      	lsrs	r0, r0, #16
 8005cc8:	4460      	add	r0, ip
 8005cca:	2808      	cmp	r0, #8
 8005ccc:	d82a      	bhi.n	8005d24 <idcodeCommand+0x6c>
 8005cce:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <idcodeCommand+0x7c>)
 8005cd0:	0080      	lsls	r0, r0, #2
 8005cd2:	581b      	ldr	r3, [r3, r0]
 8005cd4:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <idcodeCommand+0x80>)
 8005cd8:	4918      	ldr	r1, [pc, #96]	; (8005d3c <idcodeCommand+0x84>)
 8005cda:	0020      	movs	r0, r4
 8005cdc:	f00c fe56 	bl	801298c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005ce0:	f009 f862 	bl	800eda8 <HAL_GetREVID>
 8005ce4:	0022      	movs	r2, r4
 8005ce6:	0b03      	lsrs	r3, r0, #12
 8005ce8:	4915      	ldr	r1, [pc, #84]	; (8005d40 <idcodeCommand+0x88>)
 8005cea:	0020      	movs	r0, r4
 8005cec:	f00c fe4e 	bl	801298c <sprintf>
}
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cf4:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <idcodeCommand+0x8c>)
 8005cf6:	4911      	ldr	r1, [pc, #68]	; (8005d3c <idcodeCommand+0x84>)
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	f00c fe47 	bl	801298c <sprintf>
			break;
 8005cfe:	e7ef      	b.n	8005ce0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005d00:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <idcodeCommand+0x90>)
 8005d02:	490e      	ldr	r1, [pc, #56]	; (8005d3c <idcodeCommand+0x84>)
 8005d04:	0020      	movs	r0, r4
 8005d06:	f00c fe41 	bl	801298c <sprintf>
			break;
 8005d0a:	e7e9      	b.n	8005ce0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005d0c:	4a0f      	ldr	r2, [pc, #60]	; (8005d4c <idcodeCommand+0x94>)
 8005d0e:	490b      	ldr	r1, [pc, #44]	; (8005d3c <idcodeCommand+0x84>)
 8005d10:	0020      	movs	r0, r4
 8005d12:	f00c fe3b 	bl	801298c <sprintf>
			break;
 8005d16:	e7e3      	b.n	8005ce0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005d18:	4a0d      	ldr	r2, [pc, #52]	; (8005d50 <idcodeCommand+0x98>)
 8005d1a:	4908      	ldr	r1, [pc, #32]	; (8005d3c <idcodeCommand+0x84>)
 8005d1c:	0020      	movs	r0, r4
 8005d1e:	f00c fe35 	bl	801298c <sprintf>
			break;
 8005d22:	e7dd      	b.n	8005ce0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005d24:	4a0b      	ldr	r2, [pc, #44]	; (8005d54 <idcodeCommand+0x9c>)
 8005d26:	4905      	ldr	r1, [pc, #20]	; (8005d3c <idcodeCommand+0x84>)
 8005d28:	0020      	movs	r0, r4
 8005d2a:	f00c fe2f 	bl	801298c <sprintf>
			break;
 8005d2e:	e7d7      	b.n	8005ce0 <idcodeCommand+0x28>
 8005d30:	fffffbc0 	.word	0xfffffbc0
 8005d34:	08016ed4 	.word	0x08016ed4
 8005d38:	08018480 	.word	0x08018480
 8005d3c:	08018454 	.word	0x08018454
 8005d40:	080184a0 	.word	0x080184a0
 8005d44:	08018474 	.word	0x08018474
 8005d48:	0801848c 	.word	0x0801848c
 8005d4c:	08018448 	.word	0x08018448
 8005d50:	08018468 	.word	0x08018468
 8005d54:	08018498 	.word	0x08018498

08005d58 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d5c:	220e      	movs	r2, #14
 8005d5e:	4911      	ldr	r1, [pc, #68]	; (8005da4 <uuidCommand+0x4c>)
 8005d60:	f00c fc11 	bl	8012586 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d64:	4d10      	ldr	r5, [pc, #64]	; (8005da8 <uuidCommand+0x50>)
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <uuidCommand+0x54>)
 8005d68:	0029      	movs	r1, r5
 8005d6a:	0022      	movs	r2, r4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	0020      	movs	r0, r4
 8005d70:	f00c fe0c 	bl	801298c <sprintf>
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <uuidCommand+0x58>)
 8005d76:	0029      	movs	r1, r5
 8005d78:	0022      	movs	r2, r4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f00c fe05 	bl	801298c <sprintf>
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <uuidCommand+0x5c>)
 8005d84:	0029      	movs	r1, r5
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	0022      	movs	r2, r4
 8005d8a:	0020      	movs	r0, r4
 8005d8c:	f00c fdfe 	bl	801298c <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d90:	0020      	movs	r0, r4
 8005d92:	f7fa f9c1 	bl	8000118 <strlen>
 8005d96:	2203      	movs	r2, #3
 8005d98:	1820      	adds	r0, r4, r0
 8005d9a:	4907      	ldr	r1, [pc, #28]	; (8005db8 <uuidCommand+0x60>)
 8005d9c:	f00c fbf3 	bl	8012586 <memcpy>
}
 8005da0:	2000      	movs	r0, #0
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	080184b8 	.word	0x080184b8
 8005da8:	080184c8 	.word	0x080184c8
 8005dac:	1ffff7ac 	.word	0x1ffff7ac
 8005db0:	1ffff7b0 	.word	0x1ffff7b0
 8005db4:	1ffff7b4 	.word	0x1ffff7b4
 8005db8:	0801957c 	.word	0x0801957c

08005dbc <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	0004      	movs	r4, r0
	GetTimeDate();
 8005dc0:	f006 fd32 	bl	800c828 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005dc4:	f7fe fcae 	bl	8004724 <GetDateString>
 8005dc8:	4903      	ldr	r1, [pc, #12]	; (8005dd8 <dateCommand+0x1c>)
 8005dca:	0002      	movs	r2, r0
 8005dcc:	0020      	movs	r0, r4
 8005dce:	f00c fddd 	bl	801298c <sprintf>
}
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	080184d0 	.word	0x080184d0

08005ddc <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dde:	46ce      	mov	lr, r9
 8005de0:	4647      	mov	r7, r8
 8005de2:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005de4:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dea:	466a      	mov	r2, sp
 8005dec:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dee:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005df0:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005df6:	f007 fa39 	bl	800d26c <FreeRTOS_CLIGetParameter>
 8005dfa:	4b6b      	ldr	r3, [pc, #428]	; (8005fa8 <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	496b      	ldr	r1, [pc, #428]	; (8005fac <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e00:	0004      	movs	r4, r0
 8005e02:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e04:	f00c fe06 	bl	8012a14 <strncmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d119      	bne.n	8005e40 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005e0c:	9b00      	ldr	r3, [sp, #0]
 8005e0e:	1d27      	adds	r7, r4, #4
 8005e10:	1f1d      	subs	r5, r3, #4
 8005e12:	002a      	movs	r2, r5
 8005e14:	4966      	ldr	r1, [pc, #408]	; (8005fb0 <getCommand+0x1d4>)
 8005e16:	0038      	movs	r0, r7
 8005e18:	f00c fdfc 	bl	8012a14 <strncmp>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d121      	bne.n	8005e64 <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e20:	4b64      	ldr	r3, [pc, #400]	; (8005fb4 <getCommand+0x1d8>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b60      	cmp	r3, #96	; 0x60
 8005e26:	d100      	bne.n	8005e2a <getCommand+0x4e>
 8005e28:	e071      	b.n	8005f0e <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d069      	beq.n	8005f02 <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d100      	bne.n	8005e34 <getCommand+0x58>
 8005e32:	e096      	b.n	8005f62 <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e34:	0022      	movs	r2, r4
 8005e36:	4960      	ldr	r1, [pc, #384]	; (8005fb8 <getCommand+0x1dc>)
 8005e38:	0030      	movs	r0, r6
 8005e3a:	f00c fda7 	bl	801298c <sprintf>
 8005e3e:	e00b      	b.n	8005e58 <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005e40:	2205      	movs	r2, #5
 8005e42:	495e      	ldr	r1, [pc, #376]	; (8005fbc <getCommand+0x1e0>)
 8005e44:	0020      	movs	r0, r4
 8005e46:	f00c fde5 	bl	8012a14 <strncmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d03b      	beq.n	8005ec6 <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005e4e:	2213      	movs	r2, #19
 8005e50:	495b      	ldr	r1, [pc, #364]	; (8005fc0 <getCommand+0x1e4>)
 8005e52:	0030      	movs	r0, r6
 8005e54:	f00c fb97 	bl	8012586 <memcpy>
}
 8005e58:	2000      	movs	r0, #0
 8005e5a:	b003      	add	sp, #12
 8005e5c:	bc0c      	pop	{r2, r3}
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005e64:	002a      	movs	r2, r5
 8005e66:	4957      	ldr	r1, [pc, #348]	; (8005fc4 <getCommand+0x1e8>)
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f00c fdd3 	bl	8012a14 <strncmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d041      	beq.n	8005ef6 <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005e72:	002a      	movs	r2, r5
 8005e74:	4954      	ldr	r1, [pc, #336]	; (8005fc8 <getCommand+0x1ec>)
 8005e76:	0038      	movs	r0, r7
 8005e78:	f00c fdcc 	bl	8012a14 <strncmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d07d      	beq.n	8005f7c <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005e80:	002a      	movs	r2, r5
 8005e82:	4952      	ldr	r1, [pc, #328]	; (8005fcc <getCommand+0x1f0>)
 8005e84:	0038      	movs	r0, r7
 8005e86:	f00c fdc5 	bl	8012a14 <strncmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d07d      	beq.n	8005f8a <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005e8e:	002a      	movs	r2, r5
 8005e90:	494f      	ldr	r1, [pc, #316]	; (8005fd0 <getCommand+0x1f4>)
 8005e92:	0038      	movs	r0, r7
 8005e94:	f00c fdbe 	bl	8012a14 <strncmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d068      	beq.n	8005f6e <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005e9c:	002a      	movs	r2, r5
 8005e9e:	494d      	ldr	r1, [pc, #308]	; (8005fd4 <getCommand+0x1f8>)
 8005ea0:	0038      	movs	r0, r7
 8005ea2:	f00c fdb7 	bl	8012a14 <strncmp>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d076      	beq.n	8005f98 <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005eaa:	002a      	movs	r2, r5
 8005eac:	494a      	ldr	r1, [pc, #296]	; (8005fd8 <getCommand+0x1fc>)
 8005eae:	0038      	movs	r0, r7
 8005eb0:	f00c fdb0 	bl	8012a14 <strncmp>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d1ca      	bne.n	8005e4e <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005eb8:	4b48      	ldr	r3, [pc, #288]	; (8005fdc <getCommand+0x200>)
 8005eba:	4949      	ldr	r1, [pc, #292]	; (8005fe0 <getCommand+0x204>)
 8005ebc:	795a      	ldrb	r2, [r3, #5]
 8005ebe:	0030      	movs	r0, r6
 8005ec0:	f00c fd64 	bl	801298c <sprintf>
 8005ec4:	e7c8      	b.n	8005e58 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ec6:	0028      	movs	r0, r5
 8005ec8:	aa01      	add	r2, sp, #4
 8005eca:	2102      	movs	r1, #2
 8005ecc:	f007 f9ce 	bl	800d26c <FreeRTOS_CLIGetParameter>
 8005ed0:	2400      	movs	r4, #0
 8005ed2:	0007      	movs	r7, r0
 8005ed4:	4d43      	ldr	r5, [pc, #268]	; (8005fe4 <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005ed6:	0029      	movs	r1, r5
 8005ed8:	0038      	movs	r0, r7
 8005eda:	f7fa f913 	bl	8000104 <strcmp>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d01b      	beq.n	8005f1a <getCommand+0x13e>
 8005ee2:	3401      	adds	r4, #1
 8005ee4:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8005ee6:	2c0a      	cmp	r4, #10
 8005ee8:	d1f5      	bne.n	8005ed6 <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005eea:	003a      	movs	r2, r7
 8005eec:	493e      	ldr	r1, [pc, #248]	; (8005fe8 <getCommand+0x20c>)
 8005eee:	0030      	movs	r0, r6
 8005ef0:	f00c fd4c 	bl	801298c <sprintf>
			return pdFALSE;
 8005ef4:	e7b0      	b.n	8005e58 <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <getCommand+0x1d8>)
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d007      	beq.n	8005f0e <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d195      	bne.n	8005e2e <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005f02:	4a3a      	ldr	r2, [pc, #232]	; (8005fec <getCommand+0x210>)
 8005f04:	493a      	ldr	r1, [pc, #232]	; (8005ff0 <getCommand+0x214>)
 8005f06:	0030      	movs	r0, r6
 8005f08:	f00c fd40 	bl	801298c <sprintf>
 8005f0c:	e7a4      	b.n	8005e58 <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005f0e:	4a39      	ldr	r2, [pc, #228]	; (8005ff4 <getCommand+0x218>)
 8005f10:	4937      	ldr	r1, [pc, #220]	; (8005ff0 <getCommand+0x214>)
 8005f12:	0030      	movs	r0, r6
 8005f14:	f00c fd3a 	bl	801298c <sprintf>
 8005f18:	e79e      	b.n	8005e58 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005f1a:	003a      	movs	r2, r7
 8005f1c:	4936      	ldr	r1, [pc, #216]	; (8005ff8 <getCommand+0x21c>)
 8005f1e:	0030      	movs	r0, r6
 8005f20:	f00c fd34 	bl	801298c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8005f24:	4f35      	ldr	r7, [pc, #212]	; (8005ffc <getCommand+0x220>)
 8005f26:	783b      	ldrb	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d095      	beq.n	8005e58 <getCommand+0x7c>
 8005f2c:	2501      	movs	r5, #1
 8005f2e:	4b34      	ldr	r3, [pc, #208]	; (8006000 <getCommand+0x224>)
 8005f30:	40a5      	lsls	r5, r4
 8005f32:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f34:	4b33      	ldr	r3, [pc, #204]	; (8006004 <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 8005f36:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f38:	4699      	mov	r9, r3
 8005f3a:	e005      	b.n	8005f48 <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8005f3c:	3401      	adds	r4, #1
 8005f3e:	783b      	ldrb	r3, [r7, #0]
 8005f40:	b2e4      	uxtb	r4, r4
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	d200      	bcs.n	8005f48 <getCommand+0x16c>
 8005f46:	e787      	b.n	8005e58 <getCommand+0x7c>
				if(InGroup(j,i)){
 8005f48:	4642      	mov	r2, r8
 8005f4a:	1e63      	subs	r3, r4, #1
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	5ad3      	ldrh	r3, [r2, r3]
 8005f50:	421d      	tst	r5, r3
 8005f52:	d0f3      	beq.n	8005f3c <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f54:	0023      	movs	r3, r4
 8005f56:	0032      	movs	r2, r6
 8005f58:	4649      	mov	r1, r9
 8005f5a:	0030      	movs	r0, r6
 8005f5c:	f00c fd16 	bl	801298c <sprintf>
 8005f60:	e7ec      	b.n	8005f3c <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005f62:	4a29      	ldr	r2, [pc, #164]	; (8006008 <getCommand+0x22c>)
 8005f64:	4922      	ldr	r1, [pc, #136]	; (8005ff0 <getCommand+0x214>)
 8005f66:	0030      	movs	r0, r6
 8005f68:	f00c fd10 	bl	801298c <sprintf>
 8005f6c:	e774      	b.n	8005e58 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <getCommand+0x200>)
 8005f70:	491b      	ldr	r1, [pc, #108]	; (8005fe0 <getCommand+0x204>)
 8005f72:	885a      	ldrh	r2, [r3, #2]
 8005f74:	0030      	movs	r0, r6
 8005f76:	f00c fd09 	bl	801298c <sprintf>
 8005f7a:	e76d      	b.n	8005e58 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f7c:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <getCommand+0x200>)
 8005f7e:	4918      	ldr	r1, [pc, #96]	; (8005fe0 <getCommand+0x204>)
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	0030      	movs	r0, r6
 8005f84:	f00c fd02 	bl	801298c <sprintf>
 8005f88:	e766      	b.n	8005e58 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f8a:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <getCommand+0x200>)
 8005f8c:	4914      	ldr	r1, [pc, #80]	; (8005fe0 <getCommand+0x204>)
 8005f8e:	881a      	ldrh	r2, [r3, #0]
 8005f90:	0030      	movs	r0, r6
 8005f92:	f00c fcfb 	bl	801298c <sprintf>
 8005f96:	e75f      	b.n	8005e58 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f98:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <getCommand+0x200>)
 8005f9a:	4911      	ldr	r1, [pc, #68]	; (8005fe0 <getCommand+0x204>)
 8005f9c:	791a      	ldrb	r2, [r3, #4]
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	f00c fcf4 	bl	801298c <sprintf>
 8005fa4:	e758      	b.n	8005e58 <getCommand+0x7c>
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	2000192c 	.word	0x2000192c
 8005fac:	080184e8 	.word	0x080184e8
 8005fb0:	080184f0 	.word	0x080184f0
 8005fb4:	20006c00 	.word	0x20006c00
 8005fb8:	08018584 	.word	0x08018584
 8005fbc:	08018560 	.word	0x08018560
 8005fc0:	08018570 	.word	0x08018570
 8005fc4:	08018508 	.word	0x08018508
 8005fc8:	08018510 	.word	0x08018510
 8005fcc:	0801851c 	.word	0x0801851c
 8005fd0:	08018528 	.word	0x08018528
 8005fd4:	08018538 	.word	0x08018538
 8005fd8:	0801854c 	.word	0x0801854c
 8005fdc:	20006c80 	.word	0x20006c80
 8005fe0:	08017cfc 	.word	0x08017cfc
 8005fe4:	20000ad0 	.word	0x20000ad0
 8005fe8:	080185a4 	.word	0x080185a4
 8005fec:	080184fc 	.word	0x080184fc
 8005ff0:	0801757c 	.word	0x0801757c
 8005ff4:	080176a0 	.word	0x080176a0
 8005ff8:	080185c0 	.word	0x080185c0
 8005ffc:	20000008 	.word	0x20000008
 8006000:	20000a9c 	.word	0x20000a9c
 8006004:	08018568 	.word	0x08018568
 8006008:	08018500 	.word	0x08018500

0800600c <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 800600c:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800600e:	b570      	push	{r4, r5, r6, lr}
 8006010:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006012:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006014:	0006      	movs	r6, r0
 8006016:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006018:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 800601a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800601c:	f007 f926 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006020:	9d01      	ldr	r5, [sp, #4]
 8006022:	491f      	ldr	r1, [pc, #124]	; (80060a0 <defaultCommand+0x94>)
 8006024:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006026:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006028:	f00c fcf4 	bl	8012a14 <strncmp>
 800602c:	2800      	cmp	r0, #0
 800602e:	d026      	beq.n	800607e <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006030:	002a      	movs	r2, r5
 8006032:	491c      	ldr	r1, [pc, #112]	; (80060a4 <defaultCommand+0x98>)
 8006034:	0020      	movs	r0, r4
 8006036:	f00c fced 	bl	8012a14 <strncmp>
 800603a:	2800      	cmp	r0, #0
 800603c:	d119      	bne.n	8006072 <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800603e:	2116      	movs	r1, #22
 8006040:	2200      	movs	r2, #0
 8006042:	20ff      	movs	r0, #255	; 0xff
 8006044:	f002 f88e 	bl	8008164 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006048:	2202      	movs	r2, #2
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <defaultCommand+0x9c>)
		osDelay(100);
 800604c:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 800604e:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006050:	f007 f800 	bl	800d054 <osDelay>
		ClearEEportsDir();
 8006054:	f7fd fb02 	bl	800365c <ClearEEportsDir>
		ClearROtopology();
 8006058:	f003 fd8c 	bl	8009b74 <ClearROtopology>
		osDelay(100);
 800605c:	2064      	movs	r0, #100	; 0x64
 800605e:	f006 fff9 	bl	800d054 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006062:	2240      	movs	r2, #64	; 0x40
 8006064:	4911      	ldr	r1, [pc, #68]	; (80060ac <defaultCommand+0xa0>)
 8006066:	0030      	movs	r0, r6
 8006068:	f00c fa8d 	bl	8012586 <memcpy>
}
 800606c:	2000      	movs	r0, #0
 800606e:	b002      	add	sp, #8
 8006070:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006072:	220f      	movs	r2, #15
 8006074:	490e      	ldr	r1, [pc, #56]	; (80060b0 <defaultCommand+0xa4>)
 8006076:	0030      	movs	r0, r6
 8006078:	f00c fa85 	bl	8012586 <memcpy>
 800607c:	e7f6      	b.n	800606c <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800607e:	490d      	ldr	r1, [pc, #52]	; (80060b4 <defaultCommand+0xa8>)
 8006080:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <defaultCommand+0xac>)
 8006082:	000a      	movs	r2, r1
 8006084:	cb13      	ldmia	r3!, {r0, r1, r4}
 8006086:	c213      	stmia	r2!, {r0, r1, r4}
 8006088:	cb13      	ldmia	r3!, {r0, r1, r4}
 800608a:	c213      	stmia	r2!, {r0, r1, r4}
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006090:	f7fd faa0 	bl	80035d4 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006094:	2227      	movs	r2, #39	; 0x27
 8006096:	4909      	ldr	r1, [pc, #36]	; (80060bc <defaultCommand+0xb0>)
 8006098:	0030      	movs	r0, r6
 800609a:	f00c fa74 	bl	8012586 <memcpy>
 800609e:	e7e5      	b.n	800606c <defaultCommand+0x60>
 80060a0:	080185d4 	.word	0x080185d4
 80060a4:	08018604 	.word	0x08018604
 80060a8:	2000117e 	.word	0x2000117e
 80060ac:	0801861c 	.word	0x0801861c
 80060b0:	0801860c 	.word	0x0801860c
 80060b4:	20006c80 	.word	0x20006c80
 80060b8:	20000014 	.word	0x20000014
 80060bc:	080185dc 	.word	0x080185dc

080060c0 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	46de      	mov	lr, fp
 80060c4:	4657      	mov	r7, sl
 80060c6:	464e      	mov	r6, r9
 80060c8:	4645      	mov	r5, r8
 80060ca:	b5e0      	push	{r5, r6, r7, lr}
 80060cc:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060ce:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d0:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d2:	aa09      	add	r2, sp, #36	; 0x24
 80060d4:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d6:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d8:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
 80060dc:	930a      	str	r3, [sp, #40]	; 0x28
 80060de:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80060e0:	930c      	str	r3, [sp, #48]	; 0x30
 80060e2:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e4:	f007 f8c2 	bl	800d26c <FreeRTOS_CLIGetParameter>
 80060e8:	4ccf      	ldr	r4, [pc, #828]	; (8006428 <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ea:	2204      	movs	r2, #4
 80060ec:	49cf      	ldr	r1, [pc, #828]	; (800642c <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060ee:	0006      	movs	r6, r0
 80060f0:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f2:	f00c fc8f 	bl	8012a14 <strncmp>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d100      	bne.n	80060fc <setCommand+0x3c>
 80060fa:	e082      	b.n	8006202 <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80060fc:	2204      	movs	r2, #4
 80060fe:	49cc      	ldr	r1, [pc, #816]	; (8006430 <setCommand+0x370>)
 8006100:	0030      	movs	r0, r6
 8006102:	f00c fc87 	bl	8012a14 <strncmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	d014      	beq.n	8006134 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800610a:	2204      	movs	r2, #4
 800610c:	49c9      	ldr	r1, [pc, #804]	; (8006434 <setCommand+0x374>)
 800610e:	0030      	movs	r0, r6
 8006110:	f00c fc80 	bl	8012a14 <strncmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	d100      	bne.n	800611a <setCommand+0x5a>
 8006118:	e0e0      	b.n	80062dc <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800611a:	2213      	movs	r2, #19
 800611c:	49c6      	ldr	r1, [pc, #792]	; (8006438 <setCommand+0x378>)
 800611e:	0028      	movs	r0, r5
 8006120:	f00c fa31 	bl	8012586 <memcpy>
}
 8006124:	2000      	movs	r0, #0
 8006126:	b00f      	add	sp, #60	; 0x3c
 8006128:	bc3c      	pop	{r2, r3, r4, r5}
 800612a:	4690      	mov	r8, r2
 800612c:	4699      	mov	r9, r3
 800612e:	46a2      	mov	sl, r4
 8006130:	46ab      	mov	fp, r5
 8006132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006134:	aa0a      	add	r2, sp, #40	; 0x28
 8006136:	2102      	movs	r1, #2
 8006138:	0038      	movs	r0, r7
 800613a:	f007 f897 	bl	800d26c <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800613e:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006140:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006142:	2103      	movs	r1, #3
 8006144:	0038      	movs	r0, r7
 8006146:	f007 f891 	bl	800d26c <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800614a:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800614c:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800614e:	2104      	movs	r1, #4
 8006150:	0038      	movs	r0, r7
 8006152:	f007 f88b 	bl	800d26c <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006156:	aa0d      	add	r2, sp, #52	; 0x34
 8006158:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800615a:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800615c:	0038      	movs	r0, r7
 800615e:	f007 f885 	bl	800d26c <FreeRTOS_CLIGetParameter>
 8006162:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006164:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006166:	f00b ff48 	bl	8011ffa <atoi>
 800616a:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800616c:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800616e:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006170:	f00b ff43 	bl	8011ffa <atoi>
 8006174:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006176:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006178:	f00b ff3f 	bl	8011ffa <atoi>
		if(pcParameterString5 != NULL){
 800617c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800617e:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 8006180:	2e00      	cmp	r6, #0
 8006182:	d010      	beq.n	80061a6 <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006184:	2202      	movs	r2, #2
 8006186:	49ad      	ldr	r1, [pc, #692]	; (800643c <setCommand+0x37c>)
 8006188:	0030      	movs	r0, r6
 800618a:	f00c fc43 	bl	8012a14 <strncmp>
 800618e:	2800      	cmp	r0, #0
 8006190:	d100      	bne.n	8006194 <setCommand+0xd4>
 8006192:	e145      	b.n	8006420 <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006194:	2202      	movs	r2, #2
 8006196:	49aa      	ldr	r1, [pc, #680]	; (8006440 <setCommand+0x380>)
 8006198:	0030      	movs	r0, r6
 800619a:	f00c fc3b 	bl	8012a14 <strncmp>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d129      	bne.n	80061f6 <setCommand+0x136>
				temp84 =RTC_PM;
 80061a2:	2302      	movs	r3, #2
 80061a4:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061a6:	464b      	mov	r3, r9
 80061a8:	2b17      	cmp	r3, #23
 80061aa:	d824      	bhi.n	80061f6 <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80061ac:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061ae:	2f3b      	cmp	r7, #59	; 0x3b
 80061b0:	d821      	bhi.n	80061f6 <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80061b2:	4653      	mov	r3, sl
 80061b4:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061b6:	2e3b      	cmp	r6, #59	; 0x3b
 80061b8:	d81d      	bhi.n	80061f6 <setCommand+0x136>
				GetTimeDate();
 80061ba:	f006 fb35 	bl	800c828 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80061be:	4ba1      	ldr	r3, [pc, #644]	; (8006444 <setCommand+0x384>)
 80061c0:	7d1a      	ldrb	r2, [r3, #20]
 80061c2:	7d59      	ldrb	r1, [r3, #21]
 80061c4:	7d98      	ldrb	r0, [r3, #22]
 80061c6:	4694      	mov	ip, r2
 80061c8:	8b1a      	ldrh	r2, [r3, #24]
 80061ca:	7b1b      	ldrb	r3, [r3, #12]
 80061cc:	9701      	str	r7, [sp, #4]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	4643      	mov	r3, r8
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	464b      	mov	r3, r9
 80061d8:	9600      	str	r6, [sp, #0]
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	4663      	mov	r3, ip
 80061de:	f006 fac9 	bl	800c774 <BOS_CalendarConfig>
 80061e2:	4681      	mov	r9, r0
	if(result == BOS_OK){
 80061e4:	464b      	mov	r3, r9
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d100      	bne.n	80061ec <setCommand+0x12c>
 80061ea:	e24d      	b.n	8006688 <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 80061ec:	464b      	mov	r3, r9
 80061ee:	2b67      	cmp	r3, #103	; 0x67
 80061f0:	d093      	beq.n	800611a <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 80061f2:	2b68      	cmp	r3, #104	; 0x68
 80061f4:	d196      	bne.n	8006124 <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061f6:	220f      	movs	r2, #15
 80061f8:	4993      	ldr	r1, [pc, #588]	; (8006448 <setCommand+0x388>)
 80061fa:	0028      	movs	r0, r5
 80061fc:	f00c f9c3 	bl	8012586 <memcpy>
 8006200:	e790      	b.n	8006124 <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006202:	aa0a      	add	r2, sp, #40	; 0x28
 8006204:	2102      	movs	r1, #2
 8006206:	0038      	movs	r0, r7
 8006208:	f007 f830 	bl	800d26c <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800620c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800620e:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006210:	1d1e      	adds	r6, r3, #4
 8006212:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006214:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006216:	1f1f      	subs	r7, r3, #4
 8006218:	4b8c      	ldr	r3, [pc, #560]	; (800644c <setCommand+0x38c>)
 800621a:	003a      	movs	r2, r7
 800621c:	0019      	movs	r1, r3
 800621e:	0030      	movs	r0, r6
 8006220:	4699      	mov	r9, r3
 8006222:	f00c fbf7 	bl	8012a14 <strncmp>
 8006226:	2800      	cmp	r0, #0
 8006228:	d128      	bne.n	800627c <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800622a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800622c:	4988      	ldr	r1, [pc, #544]	; (8006450 <setCommand+0x390>)
 800622e:	0032      	movs	r2, r6
 8006230:	4640      	mov	r0, r8
 8006232:	f00c fbef 	bl	8012a14 <strncmp>
 8006236:	2800      	cmp	r0, #0
 8006238:	d100      	bne.n	800623c <setCommand+0x17c>
 800623a:	e21a      	b.n	8006672 <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800623c:	0032      	movs	r2, r6
 800623e:	4985      	ldr	r1, [pc, #532]	; (8006454 <setCommand+0x394>)
 8006240:	4640      	mov	r0, r8
 8006242:	f00c fbe7 	bl	8012a14 <strncmp>
 8006246:	2800      	cmp	r0, #0
 8006248:	d100      	bne.n	800624c <setCommand+0x18c>
 800624a:	e256      	b.n	80066fa <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 800624c:	0032      	movs	r2, r6
 800624e:	4982      	ldr	r1, [pc, #520]	; (8006458 <setCommand+0x398>)
 8006250:	4640      	mov	r0, r8
 8006252:	f00c fbdf 	bl	8012a14 <strncmp>
 8006256:	2800      	cmp	r0, #0
 8006258:	d100      	bne.n	800625c <setCommand+0x19c>
 800625a:	e222      	b.n	80066a2 <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800625c:	0032      	movs	r2, r6
 800625e:	497f      	ldr	r1, [pc, #508]	; (800645c <setCommand+0x39c>)
 8006260:	4640      	mov	r0, r8
 8006262:	f00c fbd7 	bl	8012a14 <strncmp>
 8006266:	2800      	cmp	r0, #0
 8006268:	d1c5      	bne.n	80061f6 <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800626a:	4b7d      	ldr	r3, [pc, #500]	; (8006460 <setCommand+0x3a0>)
 800626c:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800626e:	208a      	movs	r0, #138	; 0x8a
 8006270:	7859      	ldrb	r1, [r3, #1]
 8006272:	0040      	lsls	r0, r0, #1
 8006274:	0209      	lsls	r1, r1, #8
 8006276:	f004 fc2d 	bl	800aad4 <EE_WriteVariable>
 800627a:	e205      	b.n	8006688 <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800627c:	003a      	movs	r2, r7
 800627e:	4979      	ldr	r1, [pc, #484]	; (8006464 <setCommand+0x3a4>)
 8006280:	0030      	movs	r0, r6
 8006282:	f00c fbc7 	bl	8012a14 <strncmp>
 8006286:	2800      	cmp	r0, #0
 8006288:	d000      	beq.n	800628c <setCommand+0x1cc>
 800628a:	e08d      	b.n	80063a8 <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800628c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800628e:	4970      	ldr	r1, [pc, #448]	; (8006450 <setCommand+0x390>)
 8006290:	0032      	movs	r2, r6
 8006292:	4640      	mov	r0, r8
 8006294:	f00c fbbe 	bl	8012a14 <strncmp>
 8006298:	2800      	cmp	r0, #0
 800629a:	d100      	bne.n	800629e <setCommand+0x1de>
 800629c:	e239      	b.n	8006712 <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800629e:	0032      	movs	r2, r6
 80062a0:	496c      	ldr	r1, [pc, #432]	; (8006454 <setCommand+0x394>)
 80062a2:	4640      	mov	r0, r8
 80062a4:	f00c fbb6 	bl	8012a14 <strncmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d100      	bne.n	80062ae <setCommand+0x1ee>
 80062ac:	e213      	b.n	80066d6 <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80062ae:	0032      	movs	r2, r6
 80062b0:	4649      	mov	r1, r9
 80062b2:	4640      	mov	r0, r8
 80062b4:	f00c fbae 	bl	8012a14 <strncmp>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d100      	bne.n	80062be <setCommand+0x1fe>
 80062bc:	e274      	b.n	80067a8 <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062be:	0032      	movs	r2, r6
 80062c0:	4966      	ldr	r1, [pc, #408]	; (800645c <setCommand+0x39c>)
 80062c2:	4640      	mov	r0, r8
 80062c4:	f00c fba6 	bl	8012a14 <strncmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d194      	bne.n	80061f6 <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80062cc:	4b64      	ldr	r3, [pc, #400]	; (8006460 <setCommand+0x3a0>)
 80062ce:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062d0:	3015      	adds	r0, #21
 80062d2:	7819      	ldrb	r1, [r3, #0]
 80062d4:	30ff      	adds	r0, #255	; 0xff
 80062d6:	f004 fbfd 	bl	800aad4 <EE_WriteVariable>
 80062da:	e1d5      	b.n	8006688 <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062dc:	aa0a      	add	r2, sp, #40	; 0x28
 80062de:	2102      	movs	r1, #2
 80062e0:	0038      	movs	r0, r7
 80062e2:	f006 ffc3 	bl	800d26c <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062e6:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062e8:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ea:	2103      	movs	r1, #3
 80062ec:	0038      	movs	r0, r7
 80062ee:	f006 ffbd 	bl	800d26c <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062f2:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062f4:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062f6:	2104      	movs	r1, #4
 80062f8:	0038      	movs	r0, r7
 80062fa:	f006 ffb7 	bl	800d26c <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80062fe:	aa0d      	add	r2, sp, #52	; 0x34
 8006300:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006302:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006304:	0038      	movs	r0, r7
 8006306:	f006 ffb1 	bl	800d26c <FreeRTOS_CLIGetParameter>
 800630a:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 800630c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800630e:	f00b fe74 	bl	8011ffa <atoi>
 8006312:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006314:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006316:	f00b fe70 	bl	8011ffa <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800631a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 800631c:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800631e:	2206      	movs	r2, #6
 8006320:	4951      	ldr	r1, [pc, #324]	; (8006468 <setCommand+0x3a8>)
 8006322:	0038      	movs	r0, r7
 8006324:	f00c fb76 	bl	8012a14 <strncmp>
 8006328:	2800      	cmp	r0, #0
 800632a:	d100      	bne.n	800632e <setCommand+0x26e>
 800632c:	e0b6      	b.n	800649c <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 800632e:	2207      	movs	r2, #7
 8006330:	494e      	ldr	r1, [pc, #312]	; (800646c <setCommand+0x3ac>)
 8006332:	0038      	movs	r0, r7
 8006334:	f00c fb6e 	bl	8012a14 <strncmp>
 8006338:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800633a:	9006      	str	r0, [sp, #24]
 800633c:	2207      	movs	r2, #7
 800633e:	494c      	ldr	r1, [pc, #304]	; (8006470 <setCommand+0x3b0>)
 8006340:	0030      	movs	r0, r6
 8006342:	f00c fb67 	bl	8012a14 <strncmp>
 8006346:	9b06      	ldr	r3, [sp, #24]
 8006348:	4681      	mov	r9, r0
 800634a:	9007      	str	r0, [sp, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d100      	bne.n	8006352 <setCommand+0x292>
 8006350:	e1a4      	b.n	800669c <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006352:	2209      	movs	r2, #9
 8006354:	4947      	ldr	r1, [pc, #284]	; (8006474 <setCommand+0x3b4>)
 8006356:	0038      	movs	r0, r7
 8006358:	f00c fb5c 	bl	8012a14 <strncmp>
 800635c:	2800      	cmp	r0, #0
 800635e:	d100      	bne.n	8006362 <setCommand+0x2a2>
 8006360:	e211      	b.n	8006786 <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006362:	2208      	movs	r2, #8
 8006364:	4944      	ldr	r1, [pc, #272]	; (8006478 <setCommand+0x3b8>)
 8006366:	0038      	movs	r0, r7
 8006368:	f00c fb54 	bl	8012a14 <strncmp>
 800636c:	2800      	cmp	r0, #0
 800636e:	d100      	bne.n	8006372 <setCommand+0x2b2>
 8006370:	e220      	b.n	80067b4 <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006372:	2206      	movs	r2, #6
 8006374:	4941      	ldr	r1, [pc, #260]	; (800647c <setCommand+0x3bc>)
 8006376:	0038      	movs	r0, r7
 8006378:	f00c fb4c 	bl	8012a14 <strncmp>
 800637c:	2800      	cmp	r0, #0
 800637e:	d100      	bne.n	8006382 <setCommand+0x2c2>
 8006380:	e22e      	b.n	80067e0 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006382:	2208      	movs	r2, #8
 8006384:	493e      	ldr	r1, [pc, #248]	; (8006480 <setCommand+0x3c0>)
 8006386:	0038      	movs	r0, r7
 8006388:	f00c fb44 	bl	8012a14 <strncmp>
 800638c:	2800      	cmp	r0, #0
 800638e:	d100      	bne.n	8006392 <setCommand+0x2d2>
 8006390:	e229      	b.n	80067e6 <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006392:	2206      	movs	r2, #6
 8006394:	493b      	ldr	r1, [pc, #236]	; (8006484 <setCommand+0x3c4>)
 8006396:	0038      	movs	r0, r7
 8006398:	f00c fb3c 	bl	8012a14 <strncmp>
 800639c:	2800      	cmp	r0, #0
 800639e:	d000      	beq.n	80063a2 <setCommand+0x2e2>
 80063a0:	e262      	b.n	8006868 <setCommand+0x7a8>
			temp81 =SUNDAY;
 80063a2:	2307      	movs	r3, #7
 80063a4:	469b      	mov	fp, r3
 80063a6:	e082      	b.n	80064ae <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80063a8:	003a      	movs	r2, r7
 80063aa:	4937      	ldr	r1, [pc, #220]	; (8006488 <setCommand+0x3c8>)
 80063ac:	0030      	movs	r0, r6
 80063ae:	f00c fb31 	bl	8012a14 <strncmp>
 80063b2:	4681      	mov	r9, r0
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d100      	bne.n	80063ba <setCommand+0x2fa>
 80063b8:	e1b7      	b.n	800672a <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80063ba:	003a      	movs	r2, r7
 80063bc:	4933      	ldr	r1, [pc, #204]	; (800648c <setCommand+0x3cc>)
 80063be:	0030      	movs	r0, r6
 80063c0:	f00c fb28 	bl	8012a14 <strncmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d100      	bne.n	80063ca <setCommand+0x30a>
 80063c8:	e177      	b.n	80066ba <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80063ca:	003a      	movs	r2, r7
 80063cc:	4930      	ldr	r1, [pc, #192]	; (8006490 <setCommand+0x3d0>)
 80063ce:	0030      	movs	r0, r6
 80063d0:	f00c fb20 	bl	8012a14 <strncmp>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d100      	bne.n	80063da <setCommand+0x31a>
 80063d8:	e1d8      	b.n	800678c <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80063da:	003a      	movs	r2, r7
 80063dc:	492d      	ldr	r1, [pc, #180]	; (8006494 <setCommand+0x3d4>)
 80063de:	0030      	movs	r0, r6
 80063e0:	f00c fb18 	bl	8012a14 <strncmp>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d100      	bne.n	80063ea <setCommand+0x32a>
 80063e8:	e1e7      	b.n	80067ba <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80063ea:	003a      	movs	r2, r7
 80063ec:	492a      	ldr	r1, [pc, #168]	; (8006498 <setCommand+0x3d8>)
 80063ee:	0030      	movs	r0, r6
 80063f0:	f00c fb10 	bl	8012a14 <strncmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d000      	beq.n	80063fa <setCommand+0x33a>
 80063f8:	e68f      	b.n	800611a <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 80063fa:	4640      	mov	r0, r8
 80063fc:	f00b fdfd 	bl	8011ffa <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006400:	1e43      	subs	r3, r0, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	2bfe      	cmp	r3, #254	; 0xfe
 8006406:	d900      	bls.n	800640a <setCommand+0x34a>
 8006408:	e6f5      	b.n	80061f6 <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 800640a:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800640c:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 800640e:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006410:	0200      	lsls	r0, r0, #8
 8006412:	4301      	orrs	r1, r0
 8006414:	2018      	movs	r0, #24
 8006416:	b289      	uxth	r1, r1
 8006418:	30ff      	adds	r0, #255	; 0xff
 800641a:	f004 fb5b 	bl	800aad4 <EE_WriteVariable>
 800641e:	e133      	b.n	8006688 <setCommand+0x5c8>
				temp84 =RTC_AM;
 8006420:	2301      	movs	r3, #1
 8006422:	4698      	mov	r8, r3
 8006424:	e6bf      	b.n	80061a6 <setCommand+0xe6>
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	2000192c 	.word	0x2000192c
 800642c:	080184e8 	.word	0x080184e8
 8006430:	08018760 	.word	0x08018760
 8006434:	08018770 	.word	0x08018770
 8006438:	08018570 	.word	0x08018570
 800643c:	08018768 	.word	0x08018768
 8006440:	0801876c 	.word	0x0801876c
 8006444:	20006c80 	.word	0x20006c80
 8006448:	0801860c 	.word	0x0801860c
 800644c:	080184f0 	.word	0x080184f0
 8006450:	080176a0 	.word	0x080176a0
 8006454:	0801865c 	.word	0x0801865c
 8006458:	08018664 	.word	0x08018664
 800645c:	08018500 	.word	0x08018500
 8006460:	20006c00 	.word	0x20006c00
 8006464:	08018508 	.word	0x08018508
 8006468:	08018778 	.word	0x08018778
 800646c:	08018780 	.word	0x08018780
 8006470:	08018788 	.word	0x08018788
 8006474:	08018790 	.word	0x08018790
 8006478:	0801879c 	.word	0x0801879c
 800647c:	080187a8 	.word	0x080187a8
 8006480:	080187b0 	.word	0x080187b0
 8006484:	080187bc 	.word	0x080187bc
 8006488:	08018510 	.word	0x08018510
 800648c:	0801851c 	.word	0x0801851c
 8006490:	08018528 	.word	0x08018528
 8006494:	08018538 	.word	0x08018538
 8006498:	0801854c 	.word	0x0801854c
 800649c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800649e:	2207      	movs	r2, #7
 80064a0:	49d3      	ldr	r1, [pc, #844]	; (80067f0 <setCommand+0x730>)
 80064a2:	0030      	movs	r0, r6
 80064a4:	f00c fab6 	bl	8012a14 <strncmp>
			temp81 =MONDAY;
 80064a8:	2301      	movs	r3, #1
 80064aa:	4681      	mov	r9, r0
 80064ac:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064ae:	464b      	mov	r3, r9
			temp82 =JANUARY;
 80064b0:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d123      	bne.n	80064fe <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064b6:	4643      	mov	r3, r8
 80064b8:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064ba:	1e73      	subs	r3, r6, #1
 80064bc:	2b1e      	cmp	r3, #30
 80064be:	d900      	bls.n	80064c2 <setCommand+0x402>
 80064c0:	e699      	b.n	80061f6 <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064c2:	4653      	mov	r3, sl
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064c8:	4bca      	ldr	r3, [pc, #808]	; (80067f4 <setCommand+0x734>)
 80064ca:	4453      	add	r3, sl
 80064cc:	2b64      	cmp	r3, #100	; 0x64
 80064ce:	d900      	bls.n	80064d2 <setCommand+0x412>
 80064d0:	e691      	b.n	80061f6 <setCommand+0x136>
				GetTimeDate();
 80064d2:	f006 f9a9 	bl	800c828 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80064d6:	220c      	movs	r2, #12
 80064d8:	4bc7      	ldr	r3, [pc, #796]	; (80067f8 <setCommand+0x738>)
 80064da:	0031      	movs	r1, r6
 80064dc:	569a      	ldrsb	r2, [r3, r2]
 80064de:	0038      	movs	r0, r7
 80064e0:	9204      	str	r2, [sp, #16]
 80064e2:	7cda      	ldrb	r2, [r3, #19]
 80064e4:	9203      	str	r2, [sp, #12]
 80064e6:	7c9a      	ldrb	r2, [r3, #18]
 80064e8:	9202      	str	r2, [sp, #8]
 80064ea:	7c5a      	ldrb	r2, [r3, #17]
 80064ec:	9201      	str	r2, [sp, #4]
 80064ee:	7c1b      	ldrb	r3, [r3, #16]
 80064f0:	4652      	mov	r2, sl
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	465b      	mov	r3, fp
 80064f6:	f006 f93d 	bl	800c774 <BOS_CalendarConfig>
 80064fa:	4681      	mov	r9, r0
 80064fc:	e672      	b.n	80061e4 <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064fe:	2202      	movs	r2, #2
 8006500:	49be      	ldr	r1, [pc, #760]	; (80067fc <setCommand+0x73c>)
 8006502:	0030      	movs	r0, r6
 8006504:	f00c fa86 	bl	8012a14 <strncmp>
 8006508:	2800      	cmp	r0, #0
 800650a:	d0d4      	beq.n	80064b6 <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800650c:	2208      	movs	r2, #8
 800650e:	49bc      	ldr	r1, [pc, #752]	; (8006800 <setCommand+0x740>)
 8006510:	0030      	movs	r0, r6
 8006512:	f00c fa7f 	bl	8012a14 <strncmp>
 8006516:	2800      	cmp	r0, #0
 8006518:	d100      	bne.n	800651c <setCommand+0x45c>
 800651a:	e1c8      	b.n	80068ae <setCommand+0x7ee>
 800651c:	2202      	movs	r2, #2
 800651e:	49b9      	ldr	r1, [pc, #740]	; (8006804 <setCommand+0x744>)
 8006520:	0030      	movs	r0, r6
 8006522:	f00c fa77 	bl	8012a14 <strncmp>
 8006526:	2800      	cmp	r0, #0
 8006528:	d100      	bne.n	800652c <setCommand+0x46c>
 800652a:	e1c0      	b.n	80068ae <setCommand+0x7ee>
 800652c:	2300      	movs	r3, #0
 800652e:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006530:	2205      	movs	r2, #5
 8006532:	49b5      	ldr	r1, [pc, #724]	; (8006808 <setCommand+0x748>)
 8006534:	0030      	movs	r0, r6
 8006536:	f00c fa6d 	bl	8012a14 <strncmp>
 800653a:	2800      	cmp	r0, #0
 800653c:	d100      	bne.n	8006540 <setCommand+0x480>
 800653e:	e0d6      	b.n	80066ee <setCommand+0x62e>
 8006540:	2202      	movs	r2, #2
 8006542:	49b2      	ldr	r1, [pc, #712]	; (800680c <setCommand+0x74c>)
 8006544:	0030      	movs	r0, r6
 8006546:	f00c fa65 	bl	8012a14 <strncmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	d100      	bne.n	8006550 <setCommand+0x490>
 800654e:	e0ce      	b.n	80066ee <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006550:	2205      	movs	r2, #5
 8006552:	49af      	ldr	r1, [pc, #700]	; (8006810 <setCommand+0x750>)
 8006554:	0030      	movs	r0, r6
 8006556:	f00c fa5d 	bl	8012a14 <strncmp>
 800655a:	2800      	cmp	r0, #0
 800655c:	d100      	bne.n	8006560 <setCommand+0x4a0>
 800655e:	e145      	b.n	80067ec <setCommand+0x72c>
 8006560:	2202      	movs	r2, #2
 8006562:	49ac      	ldr	r1, [pc, #688]	; (8006814 <setCommand+0x754>)
 8006564:	0030      	movs	r0, r6
 8006566:	f00c fa55 	bl	8012a14 <strncmp>
 800656a:	2800      	cmp	r0, #0
 800656c:	d100      	bne.n	8006570 <setCommand+0x4b0>
 800656e:	e13d      	b.n	80067ec <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006570:	2203      	movs	r2, #3
 8006572:	49a9      	ldr	r1, [pc, #676]	; (8006818 <setCommand+0x758>)
 8006574:	0030      	movs	r0, r6
 8006576:	f00c fa4d 	bl	8012a14 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d100      	bne.n	8006580 <setCommand+0x4c0>
 800657e:	e192      	b.n	80068a6 <setCommand+0x7e6>
 8006580:	2202      	movs	r2, #2
 8006582:	49a6      	ldr	r1, [pc, #664]	; (800681c <setCommand+0x75c>)
 8006584:	0030      	movs	r0, r6
 8006586:	f00c fa45 	bl	8012a14 <strncmp>
 800658a:	2800      	cmp	r0, #0
 800658c:	d100      	bne.n	8006590 <setCommand+0x4d0>
 800658e:	e18a      	b.n	80068a6 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006590:	2204      	movs	r2, #4
 8006592:	49a3      	ldr	r1, [pc, #652]	; (8006820 <setCommand+0x760>)
 8006594:	0030      	movs	r0, r6
 8006596:	f00c fa3d 	bl	8012a14 <strncmp>
 800659a:	2800      	cmp	r0, #0
 800659c:	d100      	bne.n	80065a0 <setCommand+0x4e0>
 800659e:	e184      	b.n	80068aa <setCommand+0x7ea>
 80065a0:	2202      	movs	r2, #2
 80065a2:	49a0      	ldr	r1, [pc, #640]	; (8006824 <setCommand+0x764>)
 80065a4:	0030      	movs	r0, r6
 80065a6:	f00c fa35 	bl	8012a14 <strncmp>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d100      	bne.n	80065b0 <setCommand+0x4f0>
 80065ae:	e17c      	b.n	80068aa <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80065b0:	2204      	movs	r2, #4
 80065b2:	499d      	ldr	r1, [pc, #628]	; (8006828 <setCommand+0x768>)
 80065b4:	0030      	movs	r0, r6
 80065b6:	f00c fa2d 	bl	8012a14 <strncmp>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d100      	bne.n	80065c0 <setCommand+0x500>
 80065be:	e178      	b.n	80068b2 <setCommand+0x7f2>
 80065c0:	2202      	movs	r2, #2
 80065c2:	499a      	ldr	r1, [pc, #616]	; (800682c <setCommand+0x76c>)
 80065c4:	0030      	movs	r0, r6
 80065c6:	f00c fa25 	bl	8012a14 <strncmp>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d100      	bne.n	80065d0 <setCommand+0x510>
 80065ce:	e170      	b.n	80068b2 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80065d0:	2205      	movs	r2, #5
 80065d2:	4997      	ldr	r1, [pc, #604]	; (8006830 <setCommand+0x770>)
 80065d4:	0030      	movs	r0, r6
 80065d6:	f00c fa1d 	bl	8012a14 <strncmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d100      	bne.n	80065e0 <setCommand+0x520>
 80065de:	e170      	b.n	80068c2 <setCommand+0x802>
 80065e0:	2202      	movs	r2, #2
 80065e2:	4994      	ldr	r1, [pc, #592]	; (8006834 <setCommand+0x774>)
 80065e4:	0030      	movs	r0, r6
 80065e6:	f00c fa15 	bl	8012a14 <strncmp>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d100      	bne.n	80065f0 <setCommand+0x530>
 80065ee:	e168      	b.n	80068c2 <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80065f0:	2209      	movs	r2, #9
 80065f2:	4991      	ldr	r1, [pc, #580]	; (8006838 <setCommand+0x778>)
 80065f4:	0030      	movs	r0, r6
 80065f6:	f00c fa0d 	bl	8012a14 <strncmp>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d100      	bne.n	8006600 <setCommand+0x540>
 80065fe:	e15e      	b.n	80068be <setCommand+0x7fe>
 8006600:	2202      	movs	r2, #2
 8006602:	498e      	ldr	r1, [pc, #568]	; (800683c <setCommand+0x77c>)
 8006604:	0030      	movs	r0, r6
 8006606:	f00c fa05 	bl	8012a14 <strncmp>
 800660a:	2800      	cmp	r0, #0
 800660c:	d100      	bne.n	8006610 <setCommand+0x550>
 800660e:	e156      	b.n	80068be <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006610:	2207      	movs	r2, #7
 8006612:	498b      	ldr	r1, [pc, #556]	; (8006840 <setCommand+0x780>)
 8006614:	0030      	movs	r0, r6
 8006616:	f00c f9fd 	bl	8012a14 <strncmp>
 800661a:	2800      	cmp	r0, #0
 800661c:	d100      	bne.n	8006620 <setCommand+0x560>
 800661e:	e14c      	b.n	80068ba <setCommand+0x7fa>
 8006620:	2202      	movs	r2, #2
 8006622:	4988      	ldr	r1, [pc, #544]	; (8006844 <setCommand+0x784>)
 8006624:	0030      	movs	r0, r6
 8006626:	f00c f9f5 	bl	8012a14 <strncmp>
 800662a:	2800      	cmp	r0, #0
 800662c:	d100      	bne.n	8006630 <setCommand+0x570>
 800662e:	e144      	b.n	80068ba <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006630:	2208      	movs	r2, #8
 8006632:	4985      	ldr	r1, [pc, #532]	; (8006848 <setCommand+0x788>)
 8006634:	0030      	movs	r0, r6
 8006636:	f00c f9ed 	bl	8012a14 <strncmp>
 800663a:	2800      	cmp	r0, #0
 800663c:	d100      	bne.n	8006640 <setCommand+0x580>
 800663e:	e13a      	b.n	80068b6 <setCommand+0x7f6>
 8006640:	2202      	movs	r2, #2
 8006642:	4982      	ldr	r1, [pc, #520]	; (800684c <setCommand+0x78c>)
 8006644:	0030      	movs	r0, r6
 8006646:	f00c f9e5 	bl	8012a14 <strncmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	d100      	bne.n	8006650 <setCommand+0x590>
 800664e:	e132      	b.n	80068b6 <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006650:	2208      	movs	r2, #8
 8006652:	497f      	ldr	r1, [pc, #508]	; (8006850 <setCommand+0x790>)
 8006654:	0030      	movs	r0, r6
 8006656:	f00c f9dd 	bl	8012a14 <strncmp>
 800665a:	2800      	cmp	r0, #0
 800665c:	d007      	beq.n	800666e <setCommand+0x5ae>
 800665e:	2202      	movs	r2, #2
 8006660:	497c      	ldr	r1, [pc, #496]	; (8006854 <setCommand+0x794>)
 8006662:	0030      	movs	r0, r6
 8006664:	f00c f9d6 	bl	8012a14 <strncmp>
 8006668:	2800      	cmp	r0, #0
 800666a:	d000      	beq.n	800666e <setCommand+0x5ae>
 800666c:	e5c3      	b.n	80061f6 <setCommand+0x136>
			temp82 =DECEMBER;
 800666e:	270c      	movs	r7, #12
 8006670:	e03e      	b.n	80066f0 <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006672:	2260      	movs	r2, #96	; 0x60
 8006674:	4b78      	ldr	r3, [pc, #480]	; (8006858 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006676:	3015      	adds	r0, #21
 8006678:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800667a:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800667c:	2360      	movs	r3, #96	; 0x60
 800667e:	0209      	lsls	r1, r1, #8
 8006680:	4319      	orrs	r1, r3
 8006682:	30ff      	adds	r0, #255	; 0xff
 8006684:	f004 fa26 	bl	800aad4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006688:	2300      	movs	r3, #0
 800668a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800668c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800668e:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006690:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006694:	4971      	ldr	r1, [pc, #452]	; (800685c <setCommand+0x79c>)
 8006696:	f00c f979 	bl	801298c <sprintf>
	return pdFALSE;
 800669a:	e543      	b.n	8006124 <setCommand+0x64>
			temp81 =TUESDAY;
 800669c:	2302      	movs	r3, #2
 800669e:	469b      	mov	fp, r3
 80066a0:	e705      	b.n	80064ae <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066a2:	2240      	movs	r2, #64	; 0x40
 80066a4:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a6:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066a8:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066aa:	7859      	ldrb	r1, [r3, #1]
 80066ac:	2340      	movs	r3, #64	; 0x40
 80066ae:	0209      	lsls	r1, r1, #8
 80066b0:	4319      	orrs	r1, r3
 80066b2:	30ff      	adds	r0, #255	; 0xff
 80066b4:	f004 fa0e 	bl	800aad4 <EE_WriteVariable>
 80066b8:	e7e6      	b.n	8006688 <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 80066ba:	4640      	mov	r0, r8
 80066bc:	f00b fc9d 	bl	8011ffa <atoi>
 80066c0:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d100      	bne.n	80066c8 <setCommand+0x608>
 80066c6:	e596      	b.n	80061f6 <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066c8:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80066ca:	4b4b      	ldr	r3, [pc, #300]	; (80067f8 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066cc:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80066ce:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066d0:	f004 fa00 	bl	800aad4 <EE_WriteVariable>
 80066d4:	e7d8      	b.n	8006688 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80066d6:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066d8:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 80066da:	4b5f      	ldr	r3, [pc, #380]	; (8006858 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066dc:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 80066de:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	3015      	adds	r0, #21
 80066e4:	4319      	orrs	r1, r3
 80066e6:	30ff      	adds	r0, #255	; 0xff
 80066e8:	f004 f9f4 	bl	800aad4 <EE_WriteVariable>
 80066ec:	e7cc      	b.n	8006688 <setCommand+0x5c8>
			temp82 =MARCH;
 80066ee:	2703      	movs	r7, #3
		if(result == BOS_OK){
 80066f0:	464b      	mov	r3, r9
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d000      	beq.n	80066f8 <setCommand+0x638>
 80066f6:	e579      	b.n	80061ec <setCommand+0x12c>
 80066f8:	e6dd      	b.n	80064b6 <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066fa:	2220      	movs	r2, #32
 80066fc:	4b56      	ldr	r3, [pc, #344]	; (8006858 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066fe:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006700:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006702:	7859      	ldrb	r1, [r3, #1]
 8006704:	2320      	movs	r3, #32
 8006706:	0209      	lsls	r1, r1, #8
 8006708:	4319      	orrs	r1, r3
 800670a:	30ff      	adds	r0, #255	; 0xff
 800670c:	f004 f9e2 	bl	800aad4 <EE_WriteVariable>
 8006710:	e7ba      	b.n	8006688 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 8006712:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006714:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006716:	4b50      	ldr	r3, [pc, #320]	; (8006858 <setCommand+0x798>)
 8006718:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800671a:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800671c:	0089      	lsls	r1, r1, #2
 800671e:	3015      	adds	r0, #21
 8006720:	4319      	orrs	r1, r3
 8006722:	30ff      	adds	r0, #255	; 0xff
 8006724:	f004 f9d6 	bl	800aad4 <EE_WriteVariable>
 8006728:	e7ae      	b.n	8006688 <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 800672a:	4640      	mov	r0, r8
 800672c:	f00b fc65 	bl	8011ffa <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006730:	23e1      	movs	r3, #225	; 0xe1
 8006732:	031b      	lsls	r3, r3, #12
 8006734:	4298      	cmp	r0, r3
 8006736:	d900      	bls.n	800673a <setCommand+0x67a>
 8006738:	e55d      	b.n	80061f6 <setCommand+0x136>
				BOS.clibaudrate =temp2;
 800673a:	4e2f      	ldr	r6, [pc, #188]	; (80067f8 <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800673c:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 800673e:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006740:	208c      	movs	r0, #140	; 0x8c
 8006742:	0040      	lsls	r0, r0, #1
 8006744:	f004 f9c6 	bl	800aad4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006748:	201a      	movs	r0, #26
 800674a:	8971      	ldrh	r1, [r6, #10]
 800674c:	30ff      	adds	r0, #255	; 0xff
 800674e:	f004 f9c1 	bl	800aad4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006752:	4649      	mov	r1, r9
 8006754:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006756:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006758:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800675a:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800675c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800675e:	493f      	ldr	r1, [pc, #252]	; (800685c <setCommand+0x79c>)
 8006760:	f00c f914 	bl	801298c <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006764:	0028      	movs	r0, r5
 8006766:	f7f9 fcd7 	bl	8000118 <strlen>
 800676a:	0004      	movs	r4, r0
 800676c:	2230      	movs	r2, #48	; 0x30
 800676e:	1828      	adds	r0, r5, r0
 8006770:	493b      	ldr	r1, [pc, #236]	; (8006860 <setCommand+0x7a0>)
 8006772:	f00b ff08 	bl	8012586 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006776:	0020      	movs	r0, r4
 8006778:	302f      	adds	r0, #47	; 0x2f
 800677a:	1828      	adds	r0, r5, r0
 800677c:	22b2      	movs	r2, #178	; 0xb2
 800677e:	4939      	ldr	r1, [pc, #228]	; (8006864 <setCommand+0x7a4>)
 8006780:	f00b ff01 	bl	8012586 <memcpy>
 8006784:	e4ce      	b.n	8006124 <setCommand+0x64>
			temp81 =WEDNESDAY;
 8006786:	2303      	movs	r3, #3
 8006788:	469b      	mov	fp, r3
 800678a:	e690      	b.n	80064ae <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 800678c:	4640      	mov	r0, r8
 800678e:	f00b fc34 	bl	8011ffa <atoi>
 8006792:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006794:	2900      	cmp	r1, #0
 8006796:	d100      	bne.n	800679a <setCommand+0x6da>
 8006798:	e52d      	b.n	80061f6 <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800679a:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 800679c:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800679e:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 80067a0:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067a2:	f004 f997 	bl	800aad4 <EE_WriteVariable>
 80067a6:	e76f      	b.n	8006688 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 80067a8:	2202      	movs	r2, #2
 80067aa:	4b2b      	ldr	r3, [pc, #172]	; (8006858 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067ac:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80067ae:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	e7b3      	b.n	800671c <setCommand+0x65c>
			temp81 =THURSDAY;
 80067b4:	2304      	movs	r3, #4
 80067b6:	469b      	mov	fp, r3
 80067b8:	e679      	b.n	80064ae <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80067ba:	4640      	mov	r0, r8
 80067bc:	f00b fc1d 	bl	8011ffa <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067c0:	1e43      	subs	r3, r0, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2bfe      	cmp	r3, #254	; 0xfe
 80067c6:	d900      	bls.n	80067ca <setCommand+0x70a>
 80067c8:	e515      	b.n	80061f6 <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <setCommand+0x738>)
 80067cc:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067ce:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80067d0:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067d2:	0209      	lsls	r1, r1, #8
 80067d4:	4301      	orrs	r1, r0
 80067d6:	2018      	movs	r0, #24
 80067d8:	30ff      	adds	r0, #255	; 0xff
 80067da:	f004 f97b 	bl	800aad4 <EE_WriteVariable>
 80067de:	e753      	b.n	8006688 <setCommand+0x5c8>
			temp81 =FRIDAY;
 80067e0:	2305      	movs	r3, #5
 80067e2:	469b      	mov	fp, r3
 80067e4:	e663      	b.n	80064ae <setCommand+0x3ee>
			temp81 =SATURDAY;
 80067e6:	2306      	movs	r3, #6
 80067e8:	469b      	mov	fp, r3
 80067ea:	e660      	b.n	80064ae <setCommand+0x3ee>
			temp82 =APRIL;
 80067ec:	2704      	movs	r7, #4
 80067ee:	e77f      	b.n	80066f0 <setCommand+0x630>
 80067f0:	08018788 	.word	0x08018788
 80067f4:	fffff830 	.word	0xfffff830
 80067f8:	20006c80 	.word	0x20006c80
 80067fc:	08018844 	.word	0x08018844
 8006800:	08018848 	.word	0x08018848
 8006804:	08018854 	.word	0x08018854
 8006808:	080187c4 	.word	0x080187c4
 800680c:	080187cc 	.word	0x080187cc
 8006810:	080187d0 	.word	0x080187d0
 8006814:	080187d8 	.word	0x080187d8
 8006818:	080187dc 	.word	0x080187dc
 800681c:	080187e0 	.word	0x080187e0
 8006820:	080187e4 	.word	0x080187e4
 8006824:	080187ec 	.word	0x080187ec
 8006828:	080187f0 	.word	0x080187f0
 800682c:	080187f8 	.word	0x080187f8
 8006830:	080187fc 	.word	0x080187fc
 8006834:	08018804 	.word	0x08018804
 8006838:	08018808 	.word	0x08018808
 800683c:	08018814 	.word	0x08018814
 8006840:	08018818 	.word	0x08018818
 8006844:	08018820 	.word	0x08018820
 8006848:	08018824 	.word	0x08018824
 800684c:	08018830 	.word	0x08018830
 8006850:	08018834 	.word	0x08018834
 8006854:	08018840 	.word	0x08018840
 8006858:	20006c00 	.word	0x20006c00
 800685c:	08018668 	.word	0x08018668
 8006860:	0801867c 	.word	0x0801867c
 8006864:	080186ac 	.word	0x080186ac
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006868:	9b07      	ldr	r3, [sp, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d100      	bne.n	8006870 <setCommand+0x7b0>
 800686e:	e4c2      	b.n	80061f6 <setCommand+0x136>
 8006870:	2202      	movs	r2, #2
 8006872:	4915      	ldr	r1, [pc, #84]	; (80068c8 <setCommand+0x808>)
 8006874:	0030      	movs	r0, r6
 8006876:	f00c f8cd 	bl	8012a14 <strncmp>
 800687a:	2800      	cmp	r0, #0
 800687c:	d100      	bne.n	8006880 <setCommand+0x7c0>
 800687e:	e4ba      	b.n	80061f6 <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006880:	2208      	movs	r2, #8
 8006882:	4912      	ldr	r1, [pc, #72]	; (80068cc <setCommand+0x80c>)
 8006884:	0030      	movs	r0, r6
 8006886:	f00c f8c5 	bl	8012a14 <strncmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	d100      	bne.n	8006890 <setCommand+0x7d0>
 800688e:	e4b2      	b.n	80061f6 <setCommand+0x136>
 8006890:	2202      	movs	r2, #2
 8006892:	490f      	ldr	r1, [pc, #60]	; (80068d0 <setCommand+0x810>)
 8006894:	0030      	movs	r0, r6
 8006896:	f00c f8bd 	bl	8012a14 <strncmp>
 800689a:	2800      	cmp	r0, #0
 800689c:	d100      	bne.n	80068a0 <setCommand+0x7e0>
 800689e:	e4aa      	b.n	80061f6 <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 80068a0:	2368      	movs	r3, #104	; 0x68
 80068a2:	4699      	mov	r9, r3
 80068a4:	e644      	b.n	8006530 <setCommand+0x470>
			temp82 =MAY;
 80068a6:	2705      	movs	r7, #5
 80068a8:	e722      	b.n	80066f0 <setCommand+0x630>
			temp82 =JUNE;
 80068aa:	2706      	movs	r7, #6
 80068ac:	e720      	b.n	80066f0 <setCommand+0x630>
			temp82 =FEBRUARY;
 80068ae:	2702      	movs	r7, #2
 80068b0:	e601      	b.n	80064b6 <setCommand+0x3f6>
			temp82 =JULY;
 80068b2:	2707      	movs	r7, #7
 80068b4:	e71c      	b.n	80066f0 <setCommand+0x630>
			temp82 =NOVEMBER;
 80068b6:	270b      	movs	r7, #11
 80068b8:	e71a      	b.n	80066f0 <setCommand+0x630>
			temp82 =OCTOBER;
 80068ba:	270a      	movs	r7, #10
 80068bc:	e718      	b.n	80066f0 <setCommand+0x630>
			temp82 =SEPTEMBER;
 80068be:	2709      	movs	r7, #9
 80068c0:	e716      	b.n	80066f0 <setCommand+0x630>
			temp82 =AUGUST;
 80068c2:	2708      	movs	r7, #8
 80068c4:	e714      	b.n	80066f0 <setCommand+0x630>
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	08018844 	.word	0x08018844
 80068cc:	08018848 	.word	0x08018848
 80068d0:	08018854 	.word	0x08018854

080068d4 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80068d4:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068d6:	b530      	push	{r4, r5, lr}
 80068d8:	b083      	sub	sp, #12
 80068da:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068dc:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068de:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80068e2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e4:	f006 fcc2 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80068e8:	2300      	movs	r3, #0
 80068ea:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 80068ec:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 80068ee:	2b70      	cmp	r3, #112	; 0x70
 80068f0:	d00d      	beq.n	800690e <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 80068f2:	0020      	movs	r0, r4
 80068f4:	f004 fcfa 	bl	800b2ec <RemovePortButton>
	if(result == BOS_OK){
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d105      	bne.n	8006908 <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 80068fc:	0023      	movs	r3, r4
 80068fe:	0022      	movs	r2, r4
 8006900:	4905      	ldr	r1, [pc, #20]	; (8006918 <removebuttonCommand+0x44>)
 8006902:	0028      	movs	r0, r5
 8006904:	f00c f842 	bl	801298c <sprintf>
}
 8006908:	2000      	movs	r0, #0
 800690a:	b003      	add	sp, #12
 800690c:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800690e:	3001      	adds	r0, #1
 8006910:	f00b fb79 	bl	8012006 <atol>
 8006914:	b2c4      	uxtb	r4, r0
 8006916:	e7ec      	b.n	80068f2 <removebuttonCommand+0x1e>
 8006918:	08018858 	.word	0x08018858

0800691c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	46ce      	mov	lr, r9
 8006920:	4647      	mov	r7, r8
 8006922:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006924:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006926:	b580      	push	{r7, lr}
 8006928:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800692a:	aa02      	add	r2, sp, #8
 800692c:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800692e:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006930:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006932:	9302      	str	r3, [sp, #8]
 8006934:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006936:	f006 fc99 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800693a:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800693c:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800693e:	003a      	movs	r2, r7
 8006940:	4924      	ldr	r1, [pc, #144]	; (80069d4 <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006942:	0004      	movs	r4, r0
 8006944:	4699      	mov	r9, r3
 8006946:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006948:	f00c f864 	bl	8012a14 <strncmp>
		type =MOMENTARY_NO;
 800694c:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800694e:	2800      	cmp	r0, #0
 8006950:	d007      	beq.n	8006962 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006952:	003a      	movs	r2, r7
 8006954:	4920      	ldr	r1, [pc, #128]	; (80069d8 <addbuttonCommand+0xbc>)
 8006956:	0020      	movs	r0, r4
 8006958:	f00c f85c 	bl	8012a14 <strncmp>
		type =MOMENTARY_NC;
 800695c:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800695e:	2800      	cmp	r0, #0
 8006960:	d11f      	bne.n	80069a2 <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006962:	aa03      	add	r2, sp, #12
 8006964:	2102      	movs	r1, #2
 8006966:	0030      	movs	r0, r6
 8006968:	f006 fc80 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800696c:	2300      	movs	r3, #0
 800696e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006970:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006972:	2b70      	cmp	r3, #112	; 0x70
 8006974:	d026      	beq.n	80069c4 <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 8006976:	0021      	movs	r1, r4
 8006978:	0028      	movs	r0, r5
 800697a:	f004 fc3d 	bl	800b1f8 <AddPortButton>
	if(result == BOS_OK){
 800697e:	2800      	cmp	r0, #0
 8006980:	d109      	bne.n	8006996 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006982:	464b      	mov	r3, r9
 8006984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006986:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006988:	4914      	ldr	r1, [pc, #80]	; (80069dc <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 800698a:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 800698c:	9400      	str	r4, [sp, #0]
 800698e:	0023      	movs	r3, r4
 8006990:	4640      	mov	r0, r8
 8006992:	f00b fffb 	bl	801298c <sprintf>
}
 8006996:	2000      	movs	r0, #0
 8006998:	b005      	add	sp, #20
 800699a:	bc0c      	pop	{r2, r3}
 800699c:	4690      	mov	r8, r2
 800699e:	4699      	mov	r9, r3
 80069a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069a2:	003a      	movs	r2, r7
 80069a4:	490e      	ldr	r1, [pc, #56]	; (80069e0 <addbuttonCommand+0xc4>)
 80069a6:	0020      	movs	r0, r4
 80069a8:	f00c f834 	bl	8012a14 <strncmp>
		type =ONOFF_NO;
 80069ac:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0d7      	beq.n	8006962 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80069b2:	003a      	movs	r2, r7
 80069b4:	490b      	ldr	r1, [pc, #44]	; (80069e4 <addbuttonCommand+0xc8>)
 80069b6:	0020      	movs	r0, r4
 80069b8:	f00c f82c 	bl	8012a14 <strncmp>
		type =ONOFF_NC;
 80069bc:	4245      	negs	r5, r0
 80069be:	4145      	adcs	r5, r0
 80069c0:	00ad      	lsls	r5, r5, #2
 80069c2:	e7ce      	b.n	8006962 <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80069c4:	3001      	adds	r0, #1
 80069c6:	f00b fb1e 	bl	8012006 <atol>
 80069ca:	b2c4      	uxtb	r4, r0
 80069cc:	e7d3      	b.n	8006976 <addbuttonCommand+0x5a>
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	2000192c 	.word	0x2000192c
 80069d4:	08018880 	.word	0x08018880
 80069d8:	08018890 	.word	0x08018890
 80069dc:	080188b8 	.word	0x080188b8
 80069e0:	080188a0 	.word	0x080188a0
 80069e4:	080188ac 	.word	0x080188ac

080069e8 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ea:	46de      	mov	lr, fp
 80069ec:	464e      	mov	r6, r9
 80069ee:	4657      	mov	r7, sl
 80069f0:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069f2:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069f4:	0014      	movs	r4, r2
 80069f6:	b5e0      	push	{r5, r6, r7, lr}
 80069f8:	b099      	sub	sp, #100	; 0x64
 80069fa:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80069fc:	220a      	movs	r2, #10
 80069fe:	2100      	movs	r1, #0
 8006a00:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	9309      	str	r3, [sp, #36]	; 0x24
 8006a06:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a0c:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006a0e:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a10:	f00b fdc2 	bl	8012598 <memset>
 8006a14:	220a      	movs	r2, #10
 8006a16:	2100      	movs	r1, #0
 8006a18:	a812      	add	r0, sp, #72	; 0x48
 8006a1a:	f00b fdbd 	bl	8012598 <memset>
 8006a1e:	220a      	movs	r2, #10
 8006a20:	2100      	movs	r1, #0
 8006a22:	a815      	add	r0, sp, #84	; 0x54
 8006a24:	f00b fdb8 	bl	8012598 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a28:	aa08      	add	r2, sp, #32
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	0020      	movs	r0, r4
 8006a2e:	f006 fc1d 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a32:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a34:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006a36:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a38:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006a3a:	2b50      	cmp	r3, #80	; 0x50
 8006a3c:	d100      	bne.n	8006a40 <scastCommand+0x58>
 8006a3e:	e085      	b.n	8006b4c <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a40:	aa09      	add	r2, sp, #36	; 0x24
 8006a42:	2102      	movs	r1, #2
 8006a44:	0020      	movs	r0, r4
 8006a46:	f006 fc11 	bl	800d26c <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a4c:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a4e:	a80f      	add	r0, sp, #60	; 0x3c
 8006a50:	f00b fff1 	bl	8012a36 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006a54:	a80f      	add	r0, sp, #60	; 0x3c
 8006a56:	f7fd fbf5 	bl	8004244 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a5a:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006a5c:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a5e:	2103      	movs	r1, #3
 8006a60:	0020      	movs	r0, r4
 8006a62:	f006 fc03 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006a66:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a68:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006a6a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a6c:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006a6e:	2b70      	cmp	r3, #112	; 0x70
 8006a70:	d066      	beq.n	8006b40 <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a72:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a74:	2104      	movs	r1, #4
 8006a76:	0020      	movs	r0, r4
 8006a78:	f006 fbf8 	bl	800d26c <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a7e:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a80:	a812      	add	r0, sp, #72	; 0x48
 8006a82:	f00b ffd8 	bl	8012a36 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006a86:	a812      	add	r0, sp, #72	; 0x48
 8006a88:	f7fd fbdc 	bl	8004244 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a8c:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006a8e:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a90:	2105      	movs	r1, #5
 8006a92:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006a94:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a96:	f006 fbe9 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a9c:	492e      	ldr	r1, [pc, #184]	; (8006b58 <scastCommand+0x170>)
 8006a9e:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006aa0:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aa2:	4698      	mov	r8, r3
 8006aa4:	f00b ffb6 	bl	8012a14 <strncmp>
		direction =FORWARD;
 8006aa8:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d007      	beq.n	8006abe <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006aae:	4642      	mov	r2, r8
 8006ab0:	492a      	ldr	r1, [pc, #168]	; (8006b5c <scastCommand+0x174>)
 8006ab2:	0038      	movs	r0, r7
 8006ab4:	f00b ffae 	bl	8012a14 <strncmp>
		direction =BACKWARD;
 8006ab8:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d137      	bne.n	8006b2e <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006abe:	0039      	movs	r1, r7
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	a815      	add	r0, sp, #84	; 0x54
 8006ac4:	f00b ffb7 	bl	8012a36 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006ac8:	aa0d      	add	r2, sp, #52	; 0x34
 8006aca:	2106      	movs	r1, #6
 8006acc:	0020      	movs	r0, r4
 8006ace:	f006 fbcd 	bl	800d26c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ad2:	f00b fa98 	bl	8012006 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ad6:	aa0e      	add	r2, sp, #56	; 0x38
 8006ad8:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ada:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006adc:	0020      	movs	r0, r4
 8006ade:	f006 fbc5 	bl	800d26c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ae2:	f00b fa90 	bl	8012006 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006ae6:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ae8:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006aea:	9303      	str	r3, [sp, #12]
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	9701      	str	r7, [sp, #4]
 8006af0:	9600      	str	r6, [sp, #0]
 8006af2:	465b      	mov	r3, fp
 8006af4:	4652      	mov	r2, sl
 8006af6:	0029      	movs	r1, r5
 8006af8:	4648      	mov	r0, r9
 8006afa:	f001 fb57 	bl	80081ac <StartScastDMAStream>
	if(result == BOS_OK){
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d10d      	bne.n	8006b1e <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006b02:	ab12      	add	r3, sp, #72	; 0x48
 8006b04:	9302      	str	r3, [sp, #8]
 8006b06:	4653      	mov	r3, sl
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	ab0f      	add	r3, sp, #60	; 0x3c
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	9404      	str	r4, [sp, #16]
 8006b10:	9703      	str	r7, [sp, #12]
 8006b12:	464b      	mov	r3, r9
 8006b14:	aa15      	add	r2, sp, #84	; 0x54
 8006b16:	4912      	ldr	r1, [pc, #72]	; (8006b60 <scastCommand+0x178>)
 8006b18:	9807      	ldr	r0, [sp, #28]
 8006b1a:	f00b ff37 	bl	801298c <sprintf>
}
 8006b1e:	2000      	movs	r0, #0
 8006b20:	b019      	add	sp, #100	; 0x64
 8006b22:	bc3c      	pop	{r2, r3, r4, r5}
 8006b24:	4690      	mov	r8, r2
 8006b26:	4699      	mov	r9, r3
 8006b28:	46a2      	mov	sl, r4
 8006b2a:	46ab      	mov	fp, r5
 8006b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b2e:	4642      	mov	r2, r8
 8006b30:	490c      	ldr	r1, [pc, #48]	; (8006b64 <scastCommand+0x17c>)
 8006b32:	0038      	movs	r0, r7
 8006b34:	f00b ff6e 	bl	8012a14 <strncmp>
		direction =BIDIRECTIONAL;
 8006b38:	4246      	negs	r6, r0
 8006b3a:	4146      	adcs	r6, r0
 8006b3c:	0076      	lsls	r6, r6, #1
 8006b3e:	e7be      	b.n	8006abe <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b40:	3001      	adds	r0, #1
 8006b42:	f00b fa60 	bl	8012006 <atol>
 8006b46:	b2c3      	uxtb	r3, r0
 8006b48:	469a      	mov	sl, r3
 8006b4a:	e792      	b.n	8006a72 <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f00b fa5a 	bl	8012006 <atol>
 8006b52:	b2c3      	uxtb	r3, r0
 8006b54:	4699      	mov	r9, r3
 8006b56:	e773      	b.n	8006a40 <scastCommand+0x58>
 8006b58:	080188ec 	.word	0x080188ec
 8006b5c:	080188f4 	.word	0x080188f4
 8006b60:	08018910 	.word	0x08018910
 8006b64:	08018900 	.word	0x08018900

08006b68 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006b6a:	4d22      	ldr	r5, [pc, #136]	; (8006bf4 <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b6c:	b083      	sub	sp, #12
	if(N > 1)
 8006b6e:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b70:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006b72:	2700      	movs	r7, #0
	if(N > 1)
 8006b74:	2a01      	cmp	r2, #1
 8006b76:	d903      	bls.n	8006b80 <infoCommand+0x18>
		result =ReadPortsDir();
 8006b78:	f006 f96e 	bl	800ce58 <ReadPortsDir>
 8006b7c:	0007      	movs	r7, r0
 8006b7e:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006b80:	491d      	ldr	r1, [pc, #116]	; (8006bf8 <infoCommand+0x90>)
 8006b82:	0020      	movs	r0, r4
 8006b84:	f00b ff02 	bl	801298c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006b88:	2601      	movs	r6, #1
 8006b8a:	0020      	movs	r0, r4
 8006b8c:	f7f9 fac4 	bl	8000118 <strlen>
 8006b90:	4d1a      	ldr	r5, [pc, #104]	; (8006bfc <infoCommand+0x94>)
 8006b92:	4276      	negs	r6, r6
 8006b94:	b282      	uxth	r2, r0
 8006b96:	2332      	movs	r3, #50	; 0x32
 8006b98:	7828      	ldrb	r0, [r5, #0]
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	9600      	str	r6, [sp, #0]
 8006b9e:	f006 f8c5 	bl	800cd2c <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006ba2:	2213      	movs	r2, #19
 8006ba4:	4916      	ldr	r1, [pc, #88]	; (8006c00 <infoCommand+0x98>)
 8006ba6:	0020      	movs	r0, r4
 8006ba8:	f00b fced 	bl	8012586 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006bac:	7828      	ldrb	r0, [r5, #0]
 8006bae:	2332      	movs	r3, #50	; 0x32
 8006bb0:	2212      	movs	r2, #18
 8006bb2:	0021      	movs	r1, r4
 8006bb4:	9600      	str	r6, [sp, #0]
 8006bb6:	f006 f8b9 	bl	800cd2c <writePxMutex>
	DisplayTopology(PcPort);
 8006bba:	7828      	ldrb	r0, [r5, #0]
 8006bbc:	f7fd f880 	bl	8003cc0 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006bc0:	7828      	ldrb	r0, [r5, #0]
 8006bc2:	f7fd f951 	bl	8003e68 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006bc6:	2f02      	cmp	r7, #2
 8006bc8:	d007      	beq.n	8006bda <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006bca:	2202      	movs	r2, #2
 8006bcc:	490d      	ldr	r1, [pc, #52]	; (8006c04 <infoCommand+0x9c>)
 8006bce:	0020      	movs	r0, r4
 8006bd0:	f00b fcd9 	bl	8012586 <memcpy>
}
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	b003      	add	sp, #12
 8006bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006bda:	2244      	movs	r2, #68	; 0x44
 8006bdc:	490a      	ldr	r1, [pc, #40]	; (8006c08 <infoCommand+0xa0>)
 8006bde:	0020      	movs	r0, r4
 8006be0:	f00b fcd1 	bl	8012586 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006be4:	7828      	ldrb	r0, [r5, #0]
 8006be6:	2332      	movs	r3, #50	; 0x32
 8006be8:	9600      	str	r6, [sp, #0]
 8006bea:	2243      	movs	r2, #67	; 0x43
 8006bec:	0021      	movs	r1, r4
 8006bee:	f006 f89d 	bl	800cd2c <writePxMutex>
 8006bf2:	e7ea      	b.n	8006bca <infoCommand+0x62>
 8006bf4:	20000008 	.word	0x20000008
 8006bf8:	08018998 	.word	0x08018998
 8006bfc:	20000c28 	.word	0x20000c28
 8006c00:	080189b4 	.word	0x080189b4
 8006c04:	0801759c 	.word	0x0801759c
 8006c08:	080189c8 	.word	0x080189c8

08006c0c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c0c:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f7fd f9a4 	bl	8003f5c <DisplayModuleStatus>
}
 8006c14:	2000      	movs	r0, #0
 8006c16:	bd10      	pop	{r4, pc}

08006c18 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	46de      	mov	lr, fp
 8006c1c:	464e      	mov	r6, r9
 8006c1e:	4645      	mov	r5, r8
 8006c20:	4657      	mov	r7, sl
 8006c22:	b5e0      	push	{r5, r6, r7, lr}
 8006c24:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006c26:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c28:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c2e:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006c30:	0030      	movs	r0, r6
 8006c32:	f00b fcb1 	bl	8012598 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006c36:	220a      	movs	r2, #10
 8006c38:	2100      	movs	r1, #0
 8006c3a:	a803      	add	r0, sp, #12
 8006c3c:	f00b fcac 	bl	8012598 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c40:	4d52      	ldr	r5, [pc, #328]	; (8006d8c <groupCommand+0x174>)
 8006c42:	2101      	movs	r1, #1
 8006c44:	002a      	movs	r2, r5
 8006c46:	4648      	mov	r0, r9
 8006c48:	3250      	adds	r2, #80	; 0x50
 8006c4a:	f006 fb0f 	bl	800d26c <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c50:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c52:	a803      	add	r0, sp, #12
 8006c54:	f00b feef 	bl	8012a36 <strncpy>
 8006c58:	4c4d      	ldr	r4, [pc, #308]	; (8006d90 <groupCommand+0x178>)
 8006c5a:	0027      	movs	r7, r4
 8006c5c:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006c5e:	0021      	movs	r1, r4
 8006c60:	a803      	add	r0, sp, #12
 8006c62:	f7f9 fa4f 	bl	8000104 <strcmp>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d049      	beq.n	8006cfe <groupCommand+0xe6>
 8006c6a:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006c6c:	42a7      	cmp	r7, r4
 8006c6e:	d1f6      	bne.n	8006c5e <groupCommand+0x46>
	type =1;
 8006c70:	2301      	movs	r3, #1
 8006c72:	9301      	str	r3, [sp, #4]
	count =2;
 8006c74:	2302      	movs	r3, #2
 8006c76:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c78:	220a      	movs	r2, #10
 8006c7a:	4946      	ldr	r1, [pc, #280]	; (8006d94 <groupCommand+0x17c>)
 8006c7c:	4640      	mov	r0, r8
	count =2;
 8006c7e:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c80:	f00b fc81 	bl	8012586 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006c84:	002a      	movs	r2, r5
 8006c86:	2102      	movs	r1, #2
 8006c88:	3258      	adds	r2, #88	; 0x58
 8006c8a:	4648      	mov	r0, r9
 8006c8c:	f006 faee 	bl	800d26c <FreeRTOS_CLIGetParameter>
 8006c90:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d069      	beq.n	8006d6a <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006c96:	2300      	movs	r3, #0
 8006c98:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006c9a:	4b3f      	ldr	r3, [pc, #252]	; (8006d98 <groupCommand+0x180>)
		if(count > 2)
 8006c9c:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006c9e:	469b      	mov	fp, r3
 8006ca0:	e00e      	b.n	8006cc0 <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006ca2:	0031      	movs	r1, r6
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	f00b fe91 	bl	80129cc <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006caa:	002a      	movs	r2, r5
 8006cac:	3401      	adds	r4, #1
 8006cae:	b261      	sxtb	r1, r4
 8006cb0:	3258      	adds	r2, #88	; 0x58
 8006cb2:	4648      	mov	r0, r9
 8006cb4:	55e9      	strb	r1, [r5, r7]
 8006cb6:	f006 fad9 	bl	800d26c <FreeRTOS_CLIGetParameter>
 8006cba:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d03e      	beq.n	8006d3e <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006cc0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006cc2:	0001      	movs	r1, r0
 8006cc4:	0022      	movs	r2, r4
 8006cc6:	0030      	movs	r0, r6
 8006cc8:	f00b feb5 	bl	8012a36 <strncpy>
		module[xParameterStringLength] ='\0';
 8006ccc:	4653      	mov	r3, sl
		modID =GetID(module);
 8006cce:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006cd0:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006cd2:	f7fd fab7 	bl	8004244 <GetID>
		if(modID < 0)
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	db14      	blt.n	8006d04 <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006cda:	b2c0      	uxtb	r0, r0
 8006cdc:	a903      	add	r1, sp, #12
 8006cde:	f7fd fb7b 	bl	80043d8 <AddModuleToGroup>
		if(result != BOS_OK)
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d11b      	bne.n	8006d1e <groupCommand+0x106>
		if(count > 2)
 8006ce6:	57ec      	ldrsb	r4, [r5, r7]
 8006ce8:	2c02      	cmp	r4, #2
 8006cea:	ddda      	ble.n	8006ca2 <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006cec:	4640      	mov	r0, r8
 8006cee:	f7f9 fa13 	bl	8000118 <strlen>
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	4440      	add	r0, r8
 8006cf6:	4659      	mov	r1, fp
 8006cf8:	f00b fc45 	bl	8012586 <memcpy>
 8006cfc:	e7d1      	b.n	8006ca2 <groupCommand+0x8a>
			type =0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	e7b7      	b.n	8006c74 <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006d04:	0032      	movs	r2, r6
 8006d06:	4925      	ldr	r1, [pc, #148]	; (8006d9c <groupCommand+0x184>)
 8006d08:	4640      	mov	r0, r8
 8006d0a:	f00b fe3f 	bl	801298c <sprintf>
}
 8006d0e:	2000      	movs	r0, #0
 8006d10:	b011      	add	sp, #68	; 0x44
 8006d12:	bc3c      	pop	{r2, r3, r4, r5}
 8006d14:	4690      	mov	r8, r2
 8006d16:	4699      	mov	r9, r3
 8006d18:	46a2      	mov	sl, r4
 8006d1a:	46ab      	mov	fp, r5
 8006d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006d1e:	2354      	movs	r3, #84	; 0x54
 8006d20:	56eb      	ldrsb	r3, [r5, r3]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d024      	beq.n	8006d70 <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006d26:	2806      	cmp	r0, #6
 8006d28:	d019      	beq.n	8006d5e <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006d2a:	2807      	cmp	r0, #7
 8006d2c:	d028      	beq.n	8006d80 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006d2e:	2808      	cmp	r0, #8
 8006d30:	d1ed      	bne.n	8006d0e <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006d32:	aa03      	add	r2, sp, #12
 8006d34:	491a      	ldr	r1, [pc, #104]	; (8006da0 <groupCommand+0x188>)
 8006d36:	4640      	mov	r0, r8
 8006d38:	f00b fe28 	bl	801298c <sprintf>
 8006d3c:	e7e7      	b.n	8006d0e <groupCommand+0xf6>
	else if(count == 2)
 8006d3e:	57eb      	ldrsb	r3, [r5, r7]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d015      	beq.n	8006d70 <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006d44:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d46:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d117      	bne.n	8006d7c <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006d4c:	4915      	ldr	r1, [pc, #84]	; (8006da4 <groupCommand+0x18c>)
 8006d4e:	0030      	movs	r0, r6
 8006d50:	f00b fe1c 	bl	801298c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d54:	0031      	movs	r1, r6
 8006d56:	4640      	mov	r0, r8
 8006d58:	f00b fe38 	bl	80129cc <strcat>
 8006d5c:	e7d7      	b.n	8006d0e <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d5e:	aa03      	add	r2, sp, #12
 8006d60:	4911      	ldr	r1, [pc, #68]	; (8006da8 <groupCommand+0x190>)
 8006d62:	4640      	mov	r0, r8
 8006d64:	f00b fe12 	bl	801298c <sprintf>
 8006d68:	e7d1      	b.n	8006d0e <groupCommand+0xf6>
	else if(count == 2)
 8006d6a:	572b      	ldrsb	r3, [r5, r4]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d1e9      	bne.n	8006d44 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d70:	aa03      	add	r2, sp, #12
 8006d72:	490e      	ldr	r1, [pc, #56]	; (8006dac <groupCommand+0x194>)
 8006d74:	4640      	mov	r0, r8
 8006d76:	f00b fe09 	bl	801298c <sprintf>
 8006d7a:	e7c8      	b.n	8006d0e <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d7c:	490c      	ldr	r1, [pc, #48]	; (8006db0 <groupCommand+0x198>)
 8006d7e:	e7e6      	b.n	8006d4e <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006d80:	aa03      	add	r2, sp, #12
 8006d82:	490c      	ldr	r1, [pc, #48]	; (8006db4 <groupCommand+0x19c>)
 8006d84:	4640      	mov	r0, r8
 8006d86:	f00b fe01 	bl	801298c <sprintf>
 8006d8a:	e7c0      	b.n	8006d0e <groupCommand+0xf6>
 8006d8c:	2000192c 	.word	0x2000192c
 8006d90:	20000ad0 	.word	0x20000ad0
 8006d94:	08018a0c 	.word	0x08018a0c
 8006d98:	08018a18 	.word	0x08018a18
 8006d9c:	08018b38 	.word	0x08018b38
 8006da0:	08018af8 	.word	0x08018af8
 8006da4:	08018a64 	.word	0x08018a64
 8006da8:	08018a84 	.word	0x08018a84
 8006dac:	08018a1c 	.word	0x08018a1c
 8006db0:	08018a48 	.word	0x08018a48
 8006db4:	08018ac4 	.word	0x08018ac4

08006db8 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006db8:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dba:	4c1b      	ldr	r4, [pc, #108]	; (8006e28 <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dbc:	0006      	movs	r6, r0
 8006dbe:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dc0:	0022      	movs	r2, r4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	3260      	adds	r2, #96	; 0x60
 8006dc6:	f006 fa51 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dca:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dcc:	0001      	movs	r1, r0
 8006dce:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	dd01      	ble.n	8006dd8 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006dd8:	4d14      	ldr	r5, [pc, #80]	; (8006e2c <nameCommand+0x74>)
 8006dda:	7828      	ldrb	r0, [r5, #0]
 8006ddc:	f7fd fa92 	bl	8004304 <NameModule>
	if(result == BOS_OK)
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d007      	beq.n	8006df4 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006de4:	2806      	cmp	r0, #6
 8006de6:	d012      	beq.n	8006e0e <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8006de8:	2807      	cmp	r0, #7
 8006dea:	d00a      	beq.n	8006e02 <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8006dec:	2808      	cmp	r0, #8
 8006dee:	d014      	beq.n	8006e1a <nameCommand+0x62>
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df6:	782a      	ldrb	r2, [r5, #0]
 8006df8:	490d      	ldr	r1, [pc, #52]	; (8006e30 <nameCommand+0x78>)
 8006dfa:	0030      	movs	r0, r6
 8006dfc:	f00b fdc6 	bl	801298c <sprintf>
 8006e00:	e7f6      	b.n	8006df0 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e04:	490b      	ldr	r1, [pc, #44]	; (8006e34 <nameCommand+0x7c>)
 8006e06:	0030      	movs	r0, r6
 8006e08:	f00b fdc0 	bl	801298c <sprintf>
 8006e0c:	e7f0      	b.n	8006df0 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e10:	4909      	ldr	r1, [pc, #36]	; (8006e38 <nameCommand+0x80>)
 8006e12:	0030      	movs	r0, r6
 8006e14:	f00b fdba 	bl	801298c <sprintf>
 8006e18:	e7ea      	b.n	8006df0 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e1c:	4907      	ldr	r1, [pc, #28]	; (8006e3c <nameCommand+0x84>)
 8006e1e:	0030      	movs	r0, r6
 8006e20:	f00b fdb4 	bl	801298c <sprintf>
 8006e24:	e7e4      	b.n	8006df0 <nameCommand+0x38>
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	2000192c 	.word	0x2000192c
 8006e2c:	20000a98 	.word	0x20000a98
 8006e30:	08018b5c 	.word	0x08018b5c
 8006e34:	08018ac4 	.word	0x08018ac4
 8006e38:	08018a84 	.word	0x08018a84
 8006e3c:	08018af8 	.word	0x08018af8

08006e40 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e42:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e44:	4c50      	ldr	r4, [pc, #320]	; (8006f88 <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e46:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e48:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4a:	b500      	push	{lr}
 8006e4c:	0006      	movs	r6, r0
 8006e4e:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e50:	3268      	adds	r2, #104	; 0x68
 8006e52:	2101      	movs	r1, #1
 8006e54:	0028      	movs	r0, r5
 8006e56:	f006 fa09 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d069      	beq.n	8006f32 <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006e5e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006e60:	494a      	ldr	r1, [pc, #296]	; (8006f8c <bootloaderUpdateCommand+0x14c>)
 8006e62:	f00b fdd7 	bl	8012a14 <strncmp>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d133      	bne.n	8006ed2 <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e6a:	0022      	movs	r2, r4
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	326c      	adds	r2, #108	; 0x6c
 8006e70:	0028      	movs	r0, r5
 8006e72:	f006 f9fb 	bl	800d26c <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e76:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e78:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e7a:	3274      	adds	r2, #116	; 0x74
 8006e7c:	0028      	movs	r0, r5
 8006e7e:	2103      	movs	r1, #3
 8006e80:	f006 f9f4 	bl	800d26c <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8006e84:	2200      	movs	r2, #0
 8006e86:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e88:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 8006e8a:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 8006e8c:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006e8e:	2a23      	cmp	r2, #35	; 0x23
 8006e90:	d029      	beq.n	8006ee6 <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 8006e92:	2300      	movs	r3, #0
 8006e94:	56c3      	ldrsb	r3, [r0, r3]
 8006e96:	2b70      	cmp	r3, #112	; 0x70
 8006e98:	d02f      	beq.n	8006efa <bootloaderUpdateCommand+0xba>
			if(module != myID){
 8006e9a:	4c3d      	ldr	r4, [pc, #244]	; (8006f90 <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 8006e9c:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 8006e9e:	7823      	ldrb	r3, [r4, #0]
 8006ea0:	42bb      	cmp	r3, r7
 8006ea2:	d033      	beq.n	8006f0c <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4b3b      	ldr	r3, [pc, #236]	; (8006f94 <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006ea8:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006eaa:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006eac:	4642      	mov	r2, r8
 8006eae:	4b3a      	ldr	r3, [pc, #232]	; (8006f98 <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb0:	0038      	movs	r0, r7
				messageParams[0] =port;
 8006eb2:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f001 f955 	bl	8008164 <SendMessageToModule>
				osDelay(100);
 8006eba:	2064      	movs	r0, #100	; 0x64
 8006ebc:	f006 f8ca 	bl	800d054 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006ec0:	4b36      	ldr	r3, [pc, #216]	; (8006f9c <bootloaderUpdateCommand+0x15c>)
 8006ec2:	7820      	ldrb	r0, [r4, #0]
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	0039      	movs	r1, r7
 8006ec8:	4643      	mov	r3, r8
 8006eca:	f002 fe7f 	bl	8009bcc <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006ece:	2d68      	cmp	r5, #104	; 0x68
 8006ed0:	d104      	bne.n	8006edc <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006ed2:	220f      	movs	r2, #15
 8006ed4:	4932      	ldr	r1, [pc, #200]	; (8006fa0 <bootloaderUpdateCommand+0x160>)
 8006ed6:	0030      	movs	r0, r6
 8006ed8:	f00b fb55 	bl	8012586 <memcpy>
}
 8006edc:	2000      	movs	r0, #0
 8006ede:	b002      	add	sp, #8
 8006ee0:	bc04      	pop	{r2}
 8006ee2:	4690      	mov	r8, r2
 8006ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ee6:	1c58      	adds	r0, r3, #1
 8006ee8:	f00b f88d 	bl	8012006 <atol>
			if(pcParameterString3[0] == 'p'){
 8006eec:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006eee:	b2c7      	uxtb	r7, r0
 8006ef0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 8006ef2:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 8006ef4:	56c3      	ldrsb	r3, [r0, r3]
 8006ef6:	2b70      	cmp	r3, #112	; 0x70
 8006ef8:	d1cf      	bne.n	8006e9a <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006efa:	3001      	adds	r0, #1
 8006efc:	f00b f883 	bl	8012006 <atol>
			if(module != myID){
 8006f00:	4c23      	ldr	r4, [pc, #140]	; (8006f90 <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f02:	b2c3      	uxtb	r3, r0
 8006f04:	4698      	mov	r8, r3
			if(module != myID){
 8006f06:	7823      	ldrb	r3, [r4, #0]
 8006f08:	42bb      	cmp	r3, r7
 8006f0a:	d1cb      	bne.n	8006ea4 <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2200      	movs	r2, #0
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	2100      	movs	r1, #0
 8006f14:	3319      	adds	r3, #25
 8006f16:	4640      	mov	r0, r8
 8006f18:	f000 fec4 	bl	8007ca4 <SendMessageFromPort>
				osDelay(100);
 8006f1c:	2064      	movs	r0, #100	; 0x64
 8006f1e:	f006 f899 	bl	800d054 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006f22:	7820      	ldrb	r0, [r4, #0]
 8006f24:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <bootloaderUpdateCommand+0x15c>)
 8006f26:	0001      	movs	r1, r0
 8006f28:	781a      	ldrb	r2, [r3, #0]
 8006f2a:	4643      	mov	r3, r8
 8006f2c:	f002 fe4e 	bl	8009bcc <remoteBootloaderUpdate>
 8006f30:	e7cd      	b.n	8006ece <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <bootloaderUpdateCommand+0x150>)
 8006f34:	491b      	ldr	r1, [pc, #108]	; (8006fa4 <bootloaderUpdateCommand+0x164>)
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	0030      	movs	r0, r6
 8006f3a:	f00b fd27 	bl	801298c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f3e:	4b1a      	ldr	r3, [pc, #104]	; (8006fa8 <bootloaderUpdateCommand+0x168>)
 8006f40:	0030      	movs	r0, r6
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	f00b fd42 	bl	80129cc <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f48:	0030      	movs	r0, r6
 8006f4a:	f7f9 f8e5 	bl	8000118 <strlen>
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <bootloaderUpdateCommand+0x15c>)
 8006f50:	b282      	uxth	r2, r0
 8006f52:	7818      	ldrb	r0, [r3, #0]
 8006f54:	2301      	movs	r3, #1
 8006f56:	425b      	negs	r3, r3
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	0031      	movs	r1, r6
 8006f5c:	3333      	adds	r3, #51	; 0x33
 8006f5e:	f005 fee5 	bl	800cd2c <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <bootloaderUpdateCommand+0x16c>)
 8006f64:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8006f66:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f68:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <bootloaderUpdateCommand+0x174>)
 8006f6e:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f70:	f006 f870 	bl	800d054 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <bootloaderUpdateCommand+0x178>)
 8006f7a:	4a10      	ldr	r2, [pc, #64]	; (8006fbc <bootloaderUpdateCommand+0x17c>)
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	e7fd      	b.n	8006f82 <bootloaderUpdateCommand+0x142>
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	2000192c 	.word	0x2000192c
 8006f8c:	08018b94 	.word	0x08018b94
 8006f90:	20000a98 	.word	0x20000a98
 8006f94:	20006c00 	.word	0x20006c00
 8006f98:	20000b3c 	.word	0x20000b3c
 8006f9c:	20000c28 	.word	0x20000c28
 8006fa0:	0801860c 	.word	0x0801860c
 8006fa4:	08018b74 	.word	0x08018b74
 8006fa8:	20000060 	.word	0x20000060
 8006fac:	20007ff0 	.word	0x20007ff0
 8006fb0:	deadbeef 	.word	0xdeadbeef
 8006fb4:	2000117e 	.word	0x2000117e
 8006fb8:	e000ed00 	.word	0xe000ed00
 8006fbc:	05fa0004 	.word	0x05fa0004

08006fc0 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fc0:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <pingCommand+0x48>)
 8006fc4:	4911      	ldr	r1, [pc, #68]	; (800700c <pingCommand+0x4c>)
 8006fc6:	781a      	ldrb	r2, [r3, #0]
 8006fc8:	0093      	lsls	r3, r2, #2
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	5c5c      	ldrb	r4, [r3, r1]
 8006fd0:	2c00      	cmp	r4, #0
 8006fd2:	d014      	beq.n	8006ffe <pingCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006fd4:	185b      	adds	r3, r3, r1
 8006fd6:	490e      	ldr	r1, [pc, #56]	; (8007010 <pingCommand+0x50>)
 8006fd8:	f00b fcd8 	bl	801298c <sprintf>
	RTOS_IND_blink(200);
 8006fdc:	2180      	movs	r1, #128	; 0x80
 8006fde:	2201      	movs	r2, #1
 8006fe0:	01c9      	lsls	r1, r1, #7
 8006fe2:	480c      	ldr	r0, [pc, #48]	; (8007014 <pingCommand+0x54>)
 8006fe4:	f009 fb1e 	bl	8010624 <HAL_GPIO_WritePin>
 8006fe8:	20c8      	movs	r0, #200	; 0xc8
 8006fea:	f006 f833 	bl	800d054 <osDelay>
 8006fee:	2180      	movs	r1, #128	; 0x80
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	01c9      	lsls	r1, r1, #7
 8006ff4:	4807      	ldr	r0, [pc, #28]	; (8007014 <pingCommand+0x54>)
 8006ff6:	f009 fb15 	bl	8010624 <HAL_GPIO_WritePin>
}
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8006ffe:	4906      	ldr	r1, [pc, #24]	; (8007018 <pingCommand+0x58>)
 8007000:	f00b fcc4 	bl	801298c <sprintf>
 8007004:	e7ea      	b.n	8006fdc <pingCommand+0x1c>
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	20000a98 	.word	0x20000a98
 800700c:	20000dfc 	.word	0x20000dfc
 8007010:	08018bac 	.word	0x08018bac
 8007014:	48000400 	.word	0x48000400
 8007018:	08018b98 	.word	0x08018b98

0800701c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800701c:	b510      	push	{r4, lr}
 800701e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007020:	2241      	movs	r2, #65	; 0x41
 8007022:	4904      	ldr	r1, [pc, #16]	; (8007034 <prvRunTimeStatsCommand+0x18>)
 8007024:	f00b faaf 	bl	8012586 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007028:	0020      	movs	r0, r4
 800702a:	3040      	adds	r0, #64	; 0x40
 800702c:	f007 fa62 	bl	800e4f4 <vTaskGetRunTimeStats>
}
 8007030:	2000      	movs	r0, #0
 8007032:	bd10      	pop	{r4, pc}
 8007034:	08018bc8 	.word	0x08018bc8

08007038 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007038:	b510      	push	{r4, lr}
 800703a:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800703c:	2250      	movs	r2, #80	; 0x50
 800703e:	4904      	ldr	r1, [pc, #16]	; (8007050 <prvTaskStatsCommand+0x18>)
 8007040:	f00b faa1 	bl	8012586 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007044:	0020      	movs	r0, r4
 8007046:	304f      	adds	r0, #79	; 0x4f
 8007048:	f007 f9fa 	bl	800e440 <vTaskList>
}
 800704c:	2000      	movs	r0, #0
 800704e:	bd10      	pop	{r4, pc}
 8007050:	08018c0c 	.word	0x08018c0c

08007054 <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8007058:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800705a:	b082      	sub	sp, #8
 800705c:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800705e:	466a      	mov	r2, sp
 8007060:	2101      	movs	r1, #1
 8007062:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 8007064:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 8007066:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007068:	f006 f900 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800706c:	2300      	movs	r3, #0
 800706e:	56c3      	ldrsb	r3, [r0, r3]
 8007070:	2b70      	cmp	r3, #112	; 0x70
 8007072:	d00e      	beq.n	8007092 <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007074:	aa01      	add	r2, sp, #4
 8007076:	2102      	movs	r1, #2
 8007078:	0020      	movs	r0, r4
 800707a:	f006 f8f7 	bl	800d26c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800707e:	f00a ffc2 	bl	8012006 <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8007082:	2213      	movs	r2, #19
 8007084:	490f      	ldr	r1, [pc, #60]	; (80070c4 <setBaudrateCommand+0x70>)
 8007086:	0028      	movs	r0, r5
 8007088:	f00b fa7d 	bl	8012586 <memcpy>
}
 800708c:	2000      	movs	r0, #0
 800708e:	b002      	add	sp, #8
 8007090:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007092:	3001      	adds	r0, #1
 8007094:	f00a ffb7 	bl	8012006 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007098:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800709a:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800709c:	2102      	movs	r1, #2
 800709e:	0020      	movs	r0, r4
 80070a0:	f006 f8e4 	bl	800d26c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80070a4:	f00a ffaf 	bl	8012006 <atol>
 80070a8:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80070aa:	b2f0      	uxtb	r0, r6
 80070ac:	0021      	movs	r1, r4
 80070ae:	f005 fe8f 	bl	800cdd0 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80070b2:	23ff      	movs	r3, #255	; 0xff
 80070b4:	0022      	movs	r2, r4
 80070b6:	4033      	ands	r3, r6
 80070b8:	4903      	ldr	r1, [pc, #12]	; (80070c8 <setBaudrateCommand+0x74>)
 80070ba:	0028      	movs	r0, r5
 80070bc:	f00b fc66 	bl	801298c <sprintf>
 80070c0:	e7e4      	b.n	800708c <setBaudrateCommand+0x38>
 80070c2:	46c0      	nop			; (mov r8, r8)
 80070c4:	08018c84 	.word	0x08018c84
 80070c8:	08018c5c 	.word	0x08018c5c

080070cc <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80070cc:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070ce:	b510      	push	{r4, lr}
 80070d0:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80070d2:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80070d4:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d6:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070d8:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070da:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070dc:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 80070de:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e0:	f006 f8c4 	bl	800d26c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80070e4:	7803      	ldrb	r3, [r0, #0]
 80070e6:	3b32      	subs	r3, #50	; 0x32
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d907      	bls.n	80070fc <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80070ec:	2215      	movs	r2, #21
 80070ee:	490b      	ldr	r1, [pc, #44]	; (800711c <GetReadPrecentageCommand+0x50>)
 80070f0:	0020      	movs	r0, r4
 80070f2:	f00b fa48 	bl	8012586 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80070f6:	2000      	movs	r0, #0
 80070f8:	b002      	add	sp, #8
 80070fa:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80070fc:	f00a ff83 	bl	8012006 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8007100:	a901      	add	r1, sp, #4
 8007102:	b2c0      	uxtb	r0, r0
 8007104:	f004 fbc8 	bl	800b898 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8007108:	9801      	ldr	r0, [sp, #4]
 800710a:	f7fb fd0b 	bl	8002b24 <__aeabi_f2d>
 800710e:	0002      	movs	r2, r0
 8007110:	000b      	movs	r3, r1
 8007112:	0020      	movs	r0, r4
 8007114:	4902      	ldr	r1, [pc, #8]	; (8007120 <GetReadPrecentageCommand+0x54>)
 8007116:	f00b fc39 	bl	801298c <sprintf>
 800711a:	e7ec      	b.n	80070f6 <GetReadPrecentageCommand+0x2a>
 800711c:	080180bc 	.word	0x080180bc
 8007120:	08018c98 	.word	0x08018c98

08007124 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007124:	b510      	push	{r4, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	0004      	movs	r4, r0
	GetTimeDate();
 800712a:	f005 fb7d 	bl	800c828 <GetTimeDate>
	if(BOS.hourformat == 24)
 800712e:	4915      	ldr	r1, [pc, #84]	; (8007184 <timeCommand+0x60>)
 8007130:	7b4b      	ldrb	r3, [r1, #13]
 8007132:	2b18      	cmp	r3, #24
 8007134:	d016      	beq.n	8007164 <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 8007136:	2b0c      	cmp	r3, #12
 8007138:	d002      	beq.n	8007140 <timeCommand+0x1c>
}
 800713a:	2000      	movs	r0, #0
 800713c:	b004      	add	sp, #16
 800713e:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007140:	7ccb      	ldrb	r3, [r1, #19]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d019      	beq.n	800717a <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 8007146:	2b02      	cmp	r3, #2
 8007148:	d1f7      	bne.n	800713a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800714a:	7c4b      	ldrb	r3, [r1, #17]
 800714c:	7c8a      	ldrb	r2, [r1, #18]
 800714e:	480e      	ldr	r0, [pc, #56]	; (8007188 <timeCommand+0x64>)
 8007150:	9002      	str	r0, [sp, #8]
 8007152:	89c8      	ldrh	r0, [r1, #14]
 8007154:	9001      	str	r0, [sp, #4]
 8007156:	7c09      	ldrb	r1, [r1, #16]
 8007158:	0020      	movs	r0, r4
 800715a:	9100      	str	r1, [sp, #0]
 800715c:	490b      	ldr	r1, [pc, #44]	; (800718c <timeCommand+0x68>)
 800715e:	f00b fc15 	bl	801298c <sprintf>
 8007162:	e7ea      	b.n	800713a <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007164:	89c8      	ldrh	r0, [r1, #14]
 8007166:	7c4b      	ldrb	r3, [r1, #17]
 8007168:	7c8a      	ldrb	r2, [r1, #18]
 800716a:	9001      	str	r0, [sp, #4]
 800716c:	7c09      	ldrb	r1, [r1, #16]
 800716e:	0020      	movs	r0, r4
 8007170:	9100      	str	r1, [sp, #0]
 8007172:	4907      	ldr	r1, [pc, #28]	; (8007190 <timeCommand+0x6c>)
 8007174:	f00b fc0a 	bl	801298c <sprintf>
 8007178:	e7df      	b.n	800713a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800717a:	7c4b      	ldrb	r3, [r1, #17]
 800717c:	7c8a      	ldrb	r2, [r1, #18]
 800717e:	4805      	ldr	r0, [pc, #20]	; (8007194 <timeCommand+0x70>)
 8007180:	e7e6      	b.n	8007150 <timeCommand+0x2c>
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	20006c80 	.word	0x20006c80
 8007188:	08018d14 	.word	0x08018d14
 800718c:	08018ce4 	.word	0x08018ce4
 8007190:	08018cbc 	.word	0x08018cbc
 8007194:	08018d10 	.word	0x08018d10

08007198 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	4b03      	ldr	r3, [pc, #12]	; (80071ac <resetCommand+0x14>)
 800719e:	4a04      	ldr	r2, [pc, #16]	; (80071b0 <resetCommand+0x18>)
 80071a0:	60da      	str	r2, [r3, #12]
 80071a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	e7fd      	b.n	80071a6 <resetCommand+0xe>
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	e000ed00 	.word	0xe000ed00
 80071b0:	05fa0004 	.word	0x05fa0004

080071b4 <RegisterUserCLICommands>:
}
 80071b4:	4770      	bx	lr
 80071b6:	46c0      	nop			; (mov r8, r8)

080071b8 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80071b8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80071ba:	4c45      	ldr	r4, [pc, #276]	; (80072d0 <vRegisterCLICommands+0x118>)
 80071bc:	0020      	movs	r0, r4
 80071be:	f005 ffc1 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80071c2:	0020      	movs	r0, r4
 80071c4:	3010      	adds	r0, #16
 80071c6:	f005 ffbd 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80071ca:	0020      	movs	r0, r4
 80071cc:	3020      	adds	r0, #32
 80071ce:	f005 ffb9 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80071d2:	0020      	movs	r0, r4
 80071d4:	3030      	adds	r0, #48	; 0x30
 80071d6:	f005 ffb5 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80071da:	0020      	movs	r0, r4
 80071dc:	3040      	adds	r0, #64	; 0x40
 80071de:	f005 ffb1 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80071e2:	0020      	movs	r0, r4
 80071e4:	3050      	adds	r0, #80	; 0x50
 80071e6:	f005 ffad 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80071ea:	0020      	movs	r0, r4
 80071ec:	3060      	adds	r0, #96	; 0x60
 80071ee:	f005 ffa9 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80071f2:	0020      	movs	r0, r4
 80071f4:	3070      	adds	r0, #112	; 0x70
 80071f6:	f005 ffa5 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80071fa:	4c36      	ldr	r4, [pc, #216]	; (80072d4 <vRegisterCLICommands+0x11c>)
 80071fc:	0020      	movs	r0, r4
 80071fe:	f005 ffa1 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007202:	0020      	movs	r0, r4
 8007204:	3010      	adds	r0, #16
 8007206:	f005 ff9d 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800720a:	0020      	movs	r0, r4
 800720c:	3020      	adds	r0, #32
 800720e:	f005 ff99 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007212:	0020      	movs	r0, r4
 8007214:	3030      	adds	r0, #48	; 0x30
 8007216:	f005 ff95 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 800721a:	0020      	movs	r0, r4
 800721c:	3040      	adds	r0, #64	; 0x40
 800721e:	f005 ff91 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007222:	0020      	movs	r0, r4
 8007224:	3050      	adds	r0, #80	; 0x50
 8007226:	f005 ff8d 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800722a:	0020      	movs	r0, r4
 800722c:	3060      	adds	r0, #96	; 0x60
 800722e:	f005 ff89 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007232:	0020      	movs	r0, r4
 8007234:	3070      	adds	r0, #112	; 0x70
 8007236:	f005 ff85 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800723a:	4c27      	ldr	r4, [pc, #156]	; (80072d8 <vRegisterCLICommands+0x120>)
 800723c:	0020      	movs	r0, r4
 800723e:	f005 ff81 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007242:	0020      	movs	r0, r4
 8007244:	3010      	adds	r0, #16
 8007246:	f005 ff7d 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800724a:	0020      	movs	r0, r4
 800724c:	3020      	adds	r0, #32
 800724e:	f005 ff79 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007252:	0020      	movs	r0, r4
 8007254:	3030      	adds	r0, #48	; 0x30
 8007256:	f005 ff75 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800725a:	0020      	movs	r0, r4
 800725c:	3040      	adds	r0, #64	; 0x40
 800725e:	f005 ff71 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007262:	0020      	movs	r0, r4
 8007264:	3050      	adds	r0, #80	; 0x50
 8007266:	f005 ff6d 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800726a:	0020      	movs	r0, r4
 800726c:	3060      	adds	r0, #96	; 0x60
 800726e:	f005 ff69 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007272:	0020      	movs	r0, r4
 8007274:	3070      	adds	r0, #112	; 0x70
 8007276:	f005 ff65 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800727a:	4c18      	ldr	r4, [pc, #96]	; (80072dc <vRegisterCLICommands+0x124>)
 800727c:	0020      	movs	r0, r4
 800727e:	f005 ff61 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007282:	0020      	movs	r0, r4
 8007284:	3010      	adds	r0, #16
 8007286:	f005 ff5d 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800728a:	0020      	movs	r0, r4
 800728c:	3020      	adds	r0, #32
 800728e:	f005 ff59 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007292:	0020      	movs	r0, r4
 8007294:	3030      	adds	r0, #48	; 0x30
 8007296:	f005 ff55 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800729a:	0020      	movs	r0, r4
 800729c:	3040      	adds	r0, #64	; 0x40
 800729e:	f005 ff51 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80072a2:	0020      	movs	r0, r4
 80072a4:	3050      	adds	r0, #80	; 0x50
 80072a6:	f005 ff4d 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80072aa:	0020      	movs	r0, r4
 80072ac:	3060      	adds	r0, #96	; 0x60
 80072ae:	f005 ff49 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80072b2:	0020      	movs	r0, r4
 80072b4:	3070      	adds	r0, #112	; 0x70
 80072b6:	f005 ff45 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80072ba:	4809      	ldr	r0, [pc, #36]	; (80072e0 <vRegisterCLICommands+0x128>)
 80072bc:	f005 ff42 	bl	800d144 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80072c0:	2223      	movs	r2, #35	; 0x23
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <vRegisterCLICommands+0x12c>)
 80072c4:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80072c6:	f002 fcfb 	bl	8009cc0 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80072ca:	f7ff ff73 	bl	80071b4 <RegisterUserCLICommands>
}
 80072ce:	bd10      	pop	{r4, pc}
 80072d0:	08016ef8 	.word	0x08016ef8
 80072d4:	08016f78 	.word	0x08016f78
 80072d8:	08016ff8 	.word	0x08016ff8
 80072dc:	08017078 	.word	0x08017078
 80072e0:	080170f8 	.word	0x080170f8
 80072e4:	20006bfc 	.word	0x20006bfc

080072e8 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	46c6      	mov	lr, r8
 80072ec:	b500      	push	{lr}
 80072ee:	0005      	movs	r5, r0
 80072f0:	000e      	movs	r6, r1
 80072f2:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80072f4:	f002 fce6 	bl	8009cc4 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072f8:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 80072fa:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072fc:	4698      	mov	r8, r3
 80072fe:	5c1b      	ldrb	r3, [r3, r0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d902      	bls.n	800730a <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007304:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007306:	2b03      	cmp	r3, #3
 8007308:	d112      	bne.n	8007330 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 800730a:	0020      	movs	r0, r4
 800730c:	f002 fe5c 	bl	8009fc8 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <StartDMAstream+0x54>)
 8007312:	1e62      	subs	r2, r4, #1
 8007314:	0092      	lsls	r2, r2, #2
 8007316:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007318:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 800731a:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 800731c:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 800731e:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007320:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 8007322:	619a      	str	r2, [r3, #24]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007324:	0028      	movs	r0, r5
 8007326:	003a      	movs	r2, r7
 8007328:	0031      	movs	r1, r6
 800732a:	f003 fab9 	bl	800a8a0 <DMA_STREAM_Setup>
	
	return BOS_OK;
 800732e:	2000      	movs	r0, #0
}
 8007330:	bc04      	pop	{r2}
 8007332:	4690      	mov	r8, r2
 8007334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	20000c2c 	.word	0x20000c2c
 800733c:	200019a8 	.word	0x200019a8

08007340 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <DMA_IRQHandler+0x44>)
 8007346:	1e44      	subs	r4, r0, #1
 8007348:	00e0      	lsls	r0, r4, #3
 800734a:	5d5b      	ldrb	r3, [r3, r5]
 800734c:	1b00      	subs	r0, r0, r4
 800734e:	00c0      	lsls	r0, r0, #3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d004      	beq.n	800735e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <DMA_IRQHandler+0x48>)
 8007356:	18c0      	adds	r0, r0, r3
 8007358:	f008 f9e2 	bl	800f720 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 800735c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007360:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007362:	18c0      	adds	r0, r0, r3
 8007364:	f008 f9dc 	bl	800f720 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <DMA_IRQHandler+0x50>)
 800736a:	191c      	adds	r4, r3, r4
 800736c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800736e:	2a00      	cmp	r2, #0
 8007370:	d004      	beq.n	800737c <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 8007372:	69a3      	ldr	r3, [r4, #24]
 8007374:	3301      	adds	r3, #1
 8007376:	61a3      	str	r3, [r4, #24]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007378:	429a      	cmp	r2, r3
 800737a:	d8ef      	bhi.n	800735c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800737c:	0028      	movs	r0, r5
 800737e:	f002 fe0b 	bl	8009f98 <StopStreamDMA>
 8007382:	e7eb      	b.n	800735c <DMA_IRQHandler+0x1c>
 8007384:	20000c2c 	.word	0x20000c2c
 8007388:	20002674 	.word	0x20002674
 800738c:	2000247c 	.word	0x2000247c
 8007390:	200019a8 	.word	0x200019a8

08007394 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <ResetUartORE+0x28>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2308      	movs	r3, #8
 800739a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800739c:	4a08      	ldr	r2, [pc, #32]	; (80073c0 <ResetUartORE+0x2c>)
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <ResetUartORE+0x30>)
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 80073a8:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <ResetUartORE+0x34>)
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80073ae:	4a07      	ldr	r2, [pc, #28]	; (80073cc <ResetUartORE+0x38>)
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80073b4:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <ResetUartORE+0x3c>)
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	6213      	str	r3, [r2, #32]
#endif
}
 80073ba:	4770      	bx	lr
 80073bc:	20006e88 	.word	0x20006e88
 80073c0:	20006fe8 	.word	0x20006fe8
 80073c4:	20006da4 	.word	0x20006da4
 80073c8:	20006f74 	.word	0x20006f74
 80073cc:	20006e18 	.word	0x20006e18
 80073d0:	20006f04 	.word	0x20006f04

080073d4 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80073d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073d6:	2400      	movs	r4, #0
 80073d8:	2603      	movs	r6, #3
 80073da:	4d63      	ldr	r5, [pc, #396]	; (8007568 <MX_FREERTOS_Init+0x194>)
void MX_FREERTOS_Init(void){
 80073dc:	b091      	sub	sp, #68	; 0x44
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073de:	9501      	str	r5, [sp, #4]
 80073e0:	9600      	str	r6, [sp, #0]
 80073e2:	9403      	str	r4, [sp, #12]
 80073e4:	9402      	str	r4, [sp, #8]
 80073e6:	2300      	movs	r3, #0
 80073e8:	22f0      	movs	r2, #240	; 0xf0
 80073ea:	4960      	ldr	r1, [pc, #384]	; (800756c <MX_FREERTOS_Init+0x198>)
 80073ec:	4860      	ldr	r0, [pc, #384]	; (8007570 <MX_FREERTOS_Init+0x19c>)
 80073ee:	f006 fbef 	bl	800dbd0 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80073f2:	1d2b      	adds	r3, r5, #4
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	9600      	str	r6, [sp, #0]
 80073f8:	9403      	str	r4, [sp, #12]
 80073fa:	9402      	str	r4, [sp, #8]
 80073fc:	2300      	movs	r3, #0
 80073fe:	22f0      	movs	r2, #240	; 0xf0
 8007400:	495c      	ldr	r1, [pc, #368]	; (8007574 <MX_FREERTOS_Init+0x1a0>)
 8007402:	485d      	ldr	r0, [pc, #372]	; (8007578 <MX_FREERTOS_Init+0x1a4>)
 8007404:	f006 fbe4 	bl	800dbd0 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007408:	002b      	movs	r3, r5
 800740a:	3308      	adds	r3, #8
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	9600      	str	r6, [sp, #0]
 8007410:	2300      	movs	r3, #0
 8007412:	22f0      	movs	r2, #240	; 0xf0
 8007414:	4959      	ldr	r1, [pc, #356]	; (800757c <MX_FREERTOS_Init+0x1a8>)
 8007416:	9403      	str	r4, [sp, #12]
 8007418:	9402      	str	r4, [sp, #8]
 800741a:	4859      	ldr	r0, [pc, #356]	; (8007580 <MX_FREERTOS_Init+0x1ac>)
 800741c:	f006 fbd8 	bl	800dbd0 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007420:	f7ff feca 	bl	80071b8 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007424:	002b      	movs	r3, r5
 8007426:	228c      	movs	r2, #140	; 0x8c
 8007428:	330c      	adds	r3, #12
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	9600      	str	r6, [sp, #0]
 800742e:	9403      	str	r4, [sp, #12]
 8007430:	9402      	str	r4, [sp, #8]
 8007432:	2300      	movs	r3, #0
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	4953      	ldr	r1, [pc, #332]	; (8007584 <MX_FREERTOS_Init+0x1b0>)
 8007438:	4853      	ldr	r0, [pc, #332]	; (8007588 <MX_FREERTOS_Init+0x1b4>)
 800743a:	f006 fbc9 	bl	800dbd0 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 800743e:	002b      	movs	r3, r5
 8007440:	2704      	movs	r7, #4
 8007442:	4e52      	ldr	r6, [pc, #328]	; (800758c <MX_FREERTOS_Init+0x1b8>)
 8007444:	3310      	adds	r3, #16
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	9403      	str	r4, [sp, #12]
 800744a:	9402      	str	r4, [sp, #8]
 800744c:	9700      	str	r7, [sp, #0]
 800744e:	2301      	movs	r3, #1
 8007450:	22f0      	movs	r2, #240	; 0xf0
 8007452:	494f      	ldr	r1, [pc, #316]	; (8007590 <MX_FREERTOS_Init+0x1bc>)
 8007454:	0030      	movs	r0, r6
 8007456:	f006 fbbb 	bl	800dbd0 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800745a:	002b      	movs	r3, r5
 800745c:	3314      	adds	r3, #20
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	9403      	str	r4, [sp, #12]
 8007462:	9402      	str	r4, [sp, #8]
 8007464:	9700      	str	r7, [sp, #0]
 8007466:	2302      	movs	r3, #2
 8007468:	22f0      	movs	r2, #240	; 0xf0
 800746a:	494a      	ldr	r1, [pc, #296]	; (8007594 <MX_FREERTOS_Init+0x1c0>)
 800746c:	0030      	movs	r0, r6
 800746e:	f006 fbaf 	bl	800dbd0 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007472:	002b      	movs	r3, r5
 8007474:	3318      	adds	r3, #24
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	9403      	str	r4, [sp, #12]
 800747a:	9402      	str	r4, [sp, #8]
 800747c:	9700      	str	r7, [sp, #0]
 800747e:	2303      	movs	r3, #3
 8007480:	22f0      	movs	r2, #240	; 0xf0
 8007482:	4945      	ldr	r1, [pc, #276]	; (8007598 <MX_FREERTOS_Init+0x1c4>)
 8007484:	0030      	movs	r0, r6
 8007486:	f006 fba3 	bl	800dbd0 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 800748a:	002b      	movs	r3, r5
 800748c:	331c      	adds	r3, #28
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	9403      	str	r4, [sp, #12]
 8007492:	9402      	str	r4, [sp, #8]
 8007494:	9700      	str	r7, [sp, #0]
 8007496:	2304      	movs	r3, #4
 8007498:	22f0      	movs	r2, #240	; 0xf0
 800749a:	4940      	ldr	r1, [pc, #256]	; (800759c <MX_FREERTOS_Init+0x1c8>)
 800749c:	0030      	movs	r0, r6
 800749e:	f006 fb97 	bl	800dbd0 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80074a2:	002b      	movs	r3, r5
 80074a4:	3320      	adds	r3, #32
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	9403      	str	r4, [sp, #12]
 80074aa:	9402      	str	r4, [sp, #8]
 80074ac:	9700      	str	r7, [sp, #0]
 80074ae:	2305      	movs	r3, #5
 80074b0:	22f0      	movs	r2, #240	; 0xf0
 80074b2:	493b      	ldr	r1, [pc, #236]	; (80075a0 <MX_FREERTOS_Init+0x1cc>)
 80074b4:	0030      	movs	r0, r6
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 80074b6:	3524      	adds	r5, #36	; 0x24
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80074b8:	f006 fb8a 	bl	800dbd0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 80074bc:	2306      	movs	r3, #6
 80074be:	22f0      	movs	r2, #240	; 0xf0
 80074c0:	9501      	str	r5, [sp, #4]
 80074c2:	9403      	str	r4, [sp, #12]
 80074c4:	9402      	str	r4, [sp, #8]
 80074c6:	9700      	str	r7, [sp, #0]
 80074c8:	4936      	ldr	r1, [pc, #216]	; (80075a4 <MX_FREERTOS_Init+0x1d0>)
 80074ca:	0030      	movs	r0, r6
 80074cc:	f006 fb80 	bl	800dbd0 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074d0:	2101      	movs	r1, #1
 80074d2:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80074d4:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074d6:	f005 fde9 	bl	800d0ac <osSemaphoreCreate>
 80074da:	4e33      	ldr	r6, [pc, #204]	; (80075a8 <MX_FREERTOS_Init+0x1d4>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074dc:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074de:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074e0:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80074e2:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074e4:	f005 fde2 	bl	800d0ac <osSemaphoreCreate>
 80074e8:	4d30      	ldr	r5, [pc, #192]	; (80075ac <MX_FREERTOS_Init+0x1d8>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ea:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074ec:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ee:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80074f0:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074f2:	f005 fddb 	bl	800d0ac <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074f6:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074f8:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074fa:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 80074fc:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074fe:	f005 fdd5 	bl	800d0ac <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007502:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007504:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007506:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007508:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800750a:	f005 fdcf 	bl	800d0ac <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800750e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007510:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007512:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007514:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007516:	f005 fdc9 	bl	800d0ac <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800751a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800751c:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800751e:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007520:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007522:	f005 fdc3 	bl	800d0ac <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007526:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007528:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800752a:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 800752c:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800752e:	f005 fdbd 	bl	800d0ac <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007532:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007534:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007536:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007538:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800753a:	f005 fdb7 	bl	800d0ac <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800753e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007540:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007542:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007544:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007546:	f005 fdb1 	bl	800d0ac <osSemaphoreCreate>
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 800754a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800754c:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 800754e:	a80e      	add	r0, sp, #56	; 0x38
	osSemaphoreDef(SemaphoreP11);
 8007550:	940e      	str	r4, [sp, #56]	; 0x38
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007552:	f005 fdab 	bl	800d0ac <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007556:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007558:	61b0      	str	r0, [r6, #24]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 800755a:	a80f      	add	r0, sp, #60	; 0x3c
	osSemaphoreDef(SemaphoreP12);
 800755c:	940f      	str	r4, [sp, #60]	; 0x3c
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 800755e:	f005 fda5 	bl	800d0ac <osSemaphoreCreate>
 8007562:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007564:	b011      	add	sp, #68	; 0x44
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	20001ec0 	.word	0x20001ec0
 800756c:	08019994 	.word	0x08019994
 8007570:	080079b1 	.word	0x080079b1
 8007574:	080199a0 	.word	0x080199a0
 8007578:	08008325 	.word	0x08008325
 800757c:	080199ac 	.word	0x080199ac
 8007580:	08011fed 	.word	0x08011fed
 8007584:	080199b8 	.word	0x080199b8
 8007588:	080050dd 	.word	0x080050dd
 800758c:	0800848d 	.word	0x0800848d
 8007590:	080199c0 	.word	0x080199c0
 8007594:	080199cc 	.word	0x080199cc
 8007598:	080199d8 	.word	0x080199d8
 800759c:	080199e4 	.word	0x080199e4
 80075a0:	080199f0 	.word	0x080199f0
 80075a4:	080199fc 	.word	0x080199fc
 80075a8:	20006d24 	.word	0x20006d24
 80075ac:	20006d04 	.word	0x20006d04

080075b0 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 80075b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b2:	46de      	mov	lr, fp
 80075b4:	4657      	mov	r7, sl
 80075b6:	464e      	mov	r6, r9
 80075b8:	4645      	mov	r5, r8
 80075ba:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80075bc:	4bd4      	ldr	r3, [pc, #848]	; (8007910 <ExecuteMonitor+0x360>)
{
 80075be:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 80075c0:	469b      	mov	fp, r3
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d006      	beq.n	80075d6 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 80075c8:	b005      	add	sp, #20
 80075ca:	bc3c      	pop	{r2, r3, r4, r5}
 80075cc:	4690      	mov	r8, r2
 80075ce:	4699      	mov	r9, r3
 80075d0:	46a2      	mov	sl, r4
 80075d2:	46ab      	mov	fp, r5
 80075d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	465a      	mov	r2, fp
 80075da:	6013      	str	r3, [r2, #0]
	flag=0;
 80075dc:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 80075de:	3320      	adds	r3, #32
 80075e0:	7153      	strb	r3, [r2, #5]
 80075e2:	4bcc      	ldr	r3, [pc, #816]	; (8007914 <ExecuteMonitor+0x364>)
 80075e4:	4ecc      	ldr	r6, [pc, #816]	; (8007918 <ExecuteMonitor+0x368>)
 80075e6:	4699      	mov	r9, r3
 80075e8:	4bcc      	ldr	r3, [pc, #816]	; (800791c <ExecuteMonitor+0x36c>)
 80075ea:	4dcd      	ldr	r5, [pc, #820]	; (8007920 <ExecuteMonitor+0x370>)
 80075ec:	469a      	mov	sl, r3
 80075ee:	4ccd      	ldr	r4, [pc, #820]	; (8007924 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 80075f0:	2200      	movs	r2, #0
 80075f2:	4bcd      	ldr	r3, [pc, #820]	; (8007928 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 80075f4:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80075f6:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075f8:	2320      	movs	r3, #32
 80075fa:	4698      	mov	r8, r3
 80075fc:	e004      	b.n	8007608 <ExecuteMonitor+0x58>
 80075fe:	2a01      	cmp	r2, #1
 8007600:	d04c      	beq.n	800769c <ExecuteMonitor+0xec>
 8007602:	2a02      	cmp	r2, #2
 8007604:	d100      	bne.n	8007608 <ExecuteMonitor+0x58>
 8007606:	e0a8      	b.n	800775a <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 8007608:	464b      	mov	r3, r9
		            	    Delay_us(100);
 800760a:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 800760c:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 800760e:	f005 f99f 	bl	800c950 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007612:	465b      	mov	r3, fp
 8007614:	464a      	mov	r2, r9
 8007616:	795b      	ldrb	r3, [r3, #5]
 8007618:	7812      	ldrb	r2, [r2, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d00b      	beq.n	8007636 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 800761e:	4ac2      	ldr	r2, [pc, #776]	; (8007928 <ExecuteMonitor+0x378>)
 8007620:	48c1      	ldr	r0, [pc, #772]	; (8007928 <ExecuteMonitor+0x378>)
 8007622:	7812      	ldrb	r2, [r2, #0]
 8007624:	1c51      	adds	r1, r2, #1
 8007626:	7001      	strb	r1, [r0, #0]
 8007628:	2128      	movs	r1, #40	; 0x28
 800762a:	4452      	add	r2, sl
 800762c:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 800762e:	464a      	mov	r2, r9
 8007630:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007632:	465a      	mov	r2, fp
 8007634:	7157      	strb	r7, [r2, #5]
 8007636:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007638:	4641      	mov	r1, r8
 800763a:	7912      	ldrb	r2, [r2, #4]
 800763c:	438b      	bics	r3, r1
 800763e:	d1de      	bne.n	80075fe <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007640:	2a00      	cmp	r2, #0
 8007642:	d129      	bne.n	8007698 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007644:	4bb8      	ldr	r3, [pc, #736]	; (8007928 <ExecuteMonitor+0x378>)
 8007646:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007648:	4653      	mov	r3, sl
 800764a:	3228      	adds	r2, #40	; 0x28
 800764c:	5c9b      	ldrb	r3, [r3, r2]
 800764e:	2b5b      	cmp	r3, #91	; 0x5b
 8007650:	d100      	bne.n	8007654 <ExecuteMonitor+0xa4>
 8007652:	e0eb      	b.n	800782c <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007654:	2b23      	cmp	r3, #35	; 0x23
 8007656:	d100      	bne.n	800765a <ExecuteMonitor+0xaa>
 8007658:	e141      	b.n	80078de <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 800765a:	2b3d      	cmp	r3, #61	; 0x3d
 800765c:	d100      	bne.n	8007660 <ExecuteMonitor+0xb0>
 800765e:	e175      	b.n	800794c <ExecuteMonitor+0x39c>
 8007660:	233c      	movs	r3, #60	; 0x3c
 8007662:	4652      	mov	r2, sl
 8007664:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007666:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007668:	4bb0      	ldr	r3, [pc, #704]	; (800792c <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800766a:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 800766c:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800766e:	3050      	adds	r0, #80	; 0x50
 8007670:	1bcf      	subs	r7, r1, r7
 8007672:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007674:	4657      	mov	r7, sl
 8007676:	373c      	adds	r7, #60	; 0x3c
 8007678:	0039      	movs	r1, r7
 800767a:	220f      	movs	r2, #15
 800767c:	f00a ff83 	bl	8012586 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007680:	4650      	mov	r0, sl
 8007682:	2214      	movs	r2, #20
 8007684:	2100      	movs	r1, #0
 8007686:	3028      	adds	r0, #40	; 0x28
 8007688:	f00a ff86 	bl	8012598 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 800768c:	2214      	movs	r2, #20
 800768e:	2100      	movs	r1, #0
 8007690:	0038      	movs	r0, r7
 8007692:	f00a ff81 	bl	8012598 <memset>
 8007696:	e7ab      	b.n	80075f0 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007698:	2a01      	cmp	r2, #1
 800769a:	d15b      	bne.n	8007754 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 800769c:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800769e:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 80076a0:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 80076a2:	4ba3      	ldr	r3, [pc, #652]	; (8007930 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 80076a4:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 80076a6:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80076a8:	4ba2      	ldr	r3, [pc, #648]	; (8007934 <ExecuteMonitor+0x384>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d02e      	beq.n	800770e <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076b0:	2250      	movs	r2, #80	; 0x50
		           while(counter != numCommandParameters)
 80076b2:	2100      	movs	r1, #0
 80076b4:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076b6:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 80076b8:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076ba:	0010      	movs	r0, r2
 80076bc:	2720      	movs	r7, #32
 80076be:	001a      	movs	r2, r3
 80076c0:	0003      	movs	r3, r0
 80076c2:	e002      	b.n	80076ca <ExecuteMonitor+0x11a>
 80076c4:	4b9a      	ldr	r3, [pc, #616]	; (8007930 <ExecuteMonitor+0x380>)
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076ca:	1c58      	adds	r0, r3, #1
 80076cc:	7028      	strb	r0, [r5, #0]
 80076ce:	1c48      	adds	r0, r1, #1
 80076d0:	7030      	strb	r0, [r6, #0]
 80076d2:	0110      	lsls	r0, r2, #4
 80076d4:	1a82      	subs	r2, r0, r2
 80076d6:	4452      	add	r2, sl
 80076d8:	18d2      	adds	r2, r2, r3
 80076da:	4643      	mov	r3, r8
 80076dc:	5cd3      	ldrb	r3, [r2, r3]
 80076de:	2248      	movs	r2, #72	; 0x48
 80076e0:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 80076e2:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076e4:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80076e6:	f007 fb51 	bl	800ed8c <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076ea:	7831      	ldrb	r1, [r6, #0]
 80076ec:	1863      	adds	r3, r4, r1
 80076ee:	3347      	adds	r3, #71	; 0x47
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	43bb      	bics	r3, r7
 80076f4:	d1e6      	bne.n	80076c4 <ExecuteMonitor+0x114>
		                   counter++;
 80076f6:	4b8e      	ldr	r3, [pc, #568]	; (8007930 <ExecuteMonitor+0x380>)
 80076f8:	4a8d      	ldr	r2, [pc, #564]	; (8007930 <ExecuteMonitor+0x380>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8007702:	2201      	movs	r2, #1
 8007704:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 8007706:	4a8b      	ldr	r2, [pc, #556]	; (8007934 <ExecuteMonitor+0x384>)
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d1d4      	bne.n	80076b8 <ExecuteMonitor+0x108>
		          		   flag=0;
 800770e:	2300      	movs	r3, #0
 8007710:	465a      	mov	r2, fp
 8007712:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007714:	4a86      	ldr	r2, [pc, #536]	; (8007930 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007716:	2748      	movs	r7, #72	; 0x48
		          		   counter=0;
 8007718:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800771a:	4a87      	ldr	r2, [pc, #540]	; (8007938 <ExecuteMonitor+0x388>)
 800771c:	7013      	strb	r3, [r2, #0]
 800771e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007720:	4a86      	ldr	r2, [pc, #536]	; (800793c <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 8007722:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007724:	18d2      	adds	r2, r2, r3
 8007726:	18e3      	adds	r3, r4, r3
 8007728:	5ddb      	ldrb	r3, [r3, r7]
 800772a:	3281      	adds	r2, #129	; 0x81
 800772c:	32ff      	adds	r2, #255	; 0xff
 800772e:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8007730:	f007 fb2c 	bl	800ed8c <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007734:	4b80      	ldr	r3, [pc, #512]	; (8007938 <ExecuteMonitor+0x388>)
 8007736:	4a80      	ldr	r2, [pc, #512]	; (8007938 <ExecuteMonitor+0x388>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	b2db      	uxtb	r3, r3
 800773e:	7013      	strb	r3, [r2, #0]
 8007740:	2b3f      	cmp	r3, #63	; 0x3f
 8007742:	d9ed      	bls.n	8007720 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007744:	0020      	movs	r0, r4
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	3048      	adds	r0, #72	; 0x48
 800774a:	2100      	movs	r1, #0
 800774c:	f00a ff24 	bl	8012598 <memset>
 8007750:	465b      	mov	r3, fp
 8007752:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8007754:	2a02      	cmp	r2, #2
 8007756:	d000      	beq.n	800775a <ExecuteMonitor+0x1aa>
 8007758:	e74a      	b.n	80075f0 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 800775a:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800775c:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800775e:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 8007760:	4b73      	ldr	r3, [pc, #460]	; (8007930 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007762:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8007764:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 8007766:	4b73      	ldr	r3, [pc, #460]	; (8007934 <ExecuteMonitor+0x384>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d033      	beq.n	80077d6 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800776e:	2250      	movs	r2, #80	; 0x50
   		           while(counter != numCommandParameters)
 8007770:	2100      	movs	r1, #0
 8007772:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007774:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 8007776:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007778:	0010      	movs	r0, r2
 800777a:	2720      	movs	r7, #32
 800777c:	001a      	movs	r2, r3
 800777e:	0003      	movs	r3, r0
 8007780:	e001      	b.n	8007786 <ExecuteMonitor+0x1d6>
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007786:	1c58      	adds	r0, r3, #1
 8007788:	7028      	strb	r0, [r5, #0]
 800778a:	1c48      	adds	r0, r1, #1
 800778c:	7030      	strb	r0, [r6, #0]
 800778e:	0110      	lsls	r0, r2, #4
 8007790:	1a82      	subs	r2, r0, r2
 8007792:	4452      	add	r2, sl
 8007794:	18d2      	adds	r2, r2, r3
 8007796:	4643      	mov	r3, r8
 8007798:	5cd3      	ldrb	r3, [r2, r3]
 800779a:	2248      	movs	r2, #72	; 0x48
 800779c:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 800779e:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80077a0:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 80077a2:	f007 faf3 	bl	800ed8c <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80077a6:	7831      	ldrb	r1, [r6, #0]
 80077a8:	1863      	adds	r3, r4, r1
 80077aa:	3347      	adds	r3, #71	; 0x47
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	4b60      	ldr	r3, [pc, #384]	; (8007930 <ExecuteMonitor+0x380>)
 80077b0:	43ba      	bics	r2, r7
 80077b2:	d1e6      	bne.n	8007782 <ExecuteMonitor+0x1d2>
   		             counter++;
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	485e      	ldr	r0, [pc, #376]	; (8007930 <ExecuteMonitor+0x380>)
 80077b8:	3301      	adds	r3, #1
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 80077be:	2001      	movs	r0, #1
 80077c0:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 80077c2:	485c      	ldr	r0, [pc, #368]	; (8007934 <ExecuteMonitor+0x384>)
 80077c4:	7800      	ldrb	r0, [r0, #0]
 80077c6:	4298      	cmp	r0, r3
 80077c8:	d1d5      	bne.n	8007776 <ExecuteMonitor+0x1c6>
 80077ca:	465b      	mov	r3, fp
		            counter=0;
 80077cc:	4958      	ldr	r1, [pc, #352]	; (8007930 <ExecuteMonitor+0x380>)
 80077ce:	791b      	ldrb	r3, [r3, #4]
 80077d0:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01e      	beq.n	8007814 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077d6:	2748      	movs	r7, #72	; 0x48
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077d8:	2200      	movs	r2, #0
 80077da:	4b57      	ldr	r3, [pc, #348]	; (8007938 <ExecuteMonitor+0x388>)
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077e0:	4a56      	ldr	r2, [pc, #344]	; (800793c <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 80077e2:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077e4:	18d2      	adds	r2, r2, r3
 80077e6:	18e3      	adds	r3, r4, r3
 80077e8:	5ddb      	ldrb	r3, [r3, r7]
 80077ea:	3281      	adds	r2, #129	; 0x81
 80077ec:	32ff      	adds	r2, #255	; 0xff
 80077ee:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80077f0:	f005 f8ae 	bl	800c950 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077f4:	4b50      	ldr	r3, [pc, #320]	; (8007938 <ExecuteMonitor+0x388>)
 80077f6:	4a50      	ldr	r2, [pc, #320]	; (8007938 <ExecuteMonitor+0x388>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	7013      	strb	r3, [r2, #0]
 8007800:	2b3f      	cmp	r3, #63	; 0x3f
 8007802:	d9ed      	bls.n	80077e0 <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 8007804:	465b      	mov	r3, fp
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	f007 fac0 	bl	800ed8c <HAL_Delay>
                  while(flag != NonActive)
 800780c:	465b      	mov	r3, fp
 800780e:	791b      	ldrb	r3, [r3, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e1      	bne.n	80077d8 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007814:	0020      	movs	r0, r4
 8007816:	2240      	movs	r2, #64	; 0x40
 8007818:	2100      	movs	r1, #0
 800781a:	3048      	adds	r0, #72	; 0x48
 800781c:	f00a febc 	bl	8012598 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007820:	22c0      	movs	r2, #192	; 0xc0
 8007822:	2100      	movs	r1, #0
 8007824:	4846      	ldr	r0, [pc, #280]	; (8007940 <ExecuteMonitor+0x390>)
 8007826:	f00a feb7 	bl	8012598 <memset>
 800782a:	e6e1      	b.n	80075f0 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 800782c:	4a3e      	ldr	r2, [pc, #248]	; (8007928 <ExecuteMonitor+0x378>)
 800782e:	3b5a      	subs	r3, #90	; 0x5a
 8007830:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007832:	4b44      	ldr	r3, [pc, #272]	; (8007944 <ExecuteMonitor+0x394>)
 8007834:	210a      	movs	r1, #10
 8007836:	781f      	ldrb	r7, [r3, #0]
 8007838:	4653      	mov	r3, sl
 800783a:	9701      	str	r7, [sp, #4]
 800783c:	3328      	adds	r3, #40	; 0x28
 800783e:	7858      	ldrb	r0, [r3, #1]
 8007840:	f7f8 fd0c 	bl	800025c <__aeabi_uidivmod>
 8007844:	2303      	movs	r3, #3
 8007846:	b2c9      	uxtb	r1, r1
 8007848:	4698      	mov	r8, r3
 800784a:	42b9      	cmp	r1, r7
 800784c:	d101      	bne.n	8007852 <ExecuteMonitor+0x2a2>
 800784e:	e0a1      	b.n	8007994 <ExecuteMonitor+0x3e4>
 8007850:	46b8      	mov	r8, r7
 8007852:	4643      	mov	r3, r8
 8007854:	1c9f      	adds	r7, r3, #2
 8007856:	4653      	mov	r3, sl
 8007858:	2228      	movs	r2, #40	; 0x28
 800785a:	4443      	add	r3, r8
 800785c:	5c98      	ldrb	r0, [r3, r2]
 800785e:	210a      	movs	r1, #10
 8007860:	f7f8 fcfc 	bl	800025c <__aeabi_uidivmod>
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	b2c9      	uxtb	r1, r1
 8007868:	b2ff      	uxtb	r7, r7
 800786a:	4299      	cmp	r1, r3
 800786c:	d1f0      	bne.n	8007850 <ExecuteMonitor+0x2a0>
 800786e:	4643      	mov	r3, r8
 8007870:	46b8      	mov	r8, r7
 8007872:	3301      	adds	r3, #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	9301      	str	r3, [sp, #4]
 8007878:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 800787a:	4a2b      	ldr	r2, [pc, #172]	; (8007928 <ExecuteMonitor+0x378>)
 800787c:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 800787e:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 8007880:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007882:	2228      	movs	r2, #40	; 0x28
 8007884:	5c9b      	ldrb	r3, [r3, r2]
 8007886:	210a      	movs	r1, #10
 8007888:	0018      	movs	r0, r3
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	f7f8 fce6 	bl	800025c <__aeabi_uidivmod>
 8007890:	233c      	movs	r3, #60	; 0x3c
 8007892:	4652      	mov	r2, sl
 8007894:	b2cf      	uxtb	r7, r1
 8007896:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	2b5d      	cmp	r3, #93	; 0x5d
 800789c:	d00d      	beq.n	80078ba <ExecuteMonitor+0x30a>
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	3301      	adds	r3, #1
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	e000      	b.n	80078a8 <ExecuteMonitor+0x2f8>
 80078a6:	0013      	movs	r3, r2
 80078a8:	2128      	movs	r1, #40	; 0x28
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	4453      	add	r3, sl
 80078ae:	5c5b      	ldrb	r3, [r3, r1]
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	2b5d      	cmp	r3, #93	; 0x5d
 80078b4:	d1f7      	bne.n	80078a6 <ExecuteMonitor+0x2f6>
 80078b6:	4690      	mov	r8, r2
 80078b8:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 80078ba:	4642      	mov	r2, r8
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078be:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 80078c0:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 80078c2:	2301      	movs	r3, #1
 80078c4:	4a20      	ldr	r2, [pc, #128]	; (8007948 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078c6:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 80078c8:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078ca:	9b02      	ldr	r3, [sp, #8]
 80078cc:	2214      	movs	r2, #20
 80078ce:	469c      	mov	ip, r3
 80078d0:	3128      	adds	r1, #40	; 0x28
 80078d2:	1ad2      	subs	r2, r2, r3
 80078d4:	4461      	add	r1, ip
 80078d6:	303d      	adds	r0, #61	; 0x3d
 80078d8:	f00a fe55 	bl	8012586 <memcpy>
 80078dc:	e6c3      	b.n	8007666 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078de:	4653      	mov	r3, sl
 80078e0:	3328      	adds	r3, #40	; 0x28
 80078e2:	7858      	ldrb	r0, [r3, #1]
 80078e4:	210a      	movs	r1, #10
 80078e6:	f7f8 fcb9 	bl	800025c <__aeabi_uidivmod>
 80078ea:	4652      	mov	r2, sl
 80078ec:	233c      	movs	r3, #60	; 0x3c
 80078ee:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078f0:	4650      	mov	r0, sl
 80078f2:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078f4:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 80078f6:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <ExecuteMonitor+0x378>)
 80078f8:	3b3a      	subs	r3, #58	; 0x3a
 80078fa:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 80078fc:	4a12      	ldr	r2, [pc, #72]	; (8007948 <ExecuteMonitor+0x398>)
 80078fe:	3b01      	subs	r3, #1
 8007900:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007902:	312a      	adds	r1, #42	; 0x2a
 8007904:	2212      	movs	r2, #18
 8007906:	303d      	adds	r0, #61	; 0x3d
 8007908:	f00a fe3d 	bl	8012586 <memcpy>
 800790c:	e6ab      	b.n	8007666 <ExecuteMonitor+0xb6>
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	20000000 	.word	0x20000000
 8007914:	20006d00 	.word	0x20006d00
 8007918:	20006d44 	.word	0x20006d44
 800791c:	20001ec0 	.word	0x20001ec0
 8007920:	20006d41 	.word	0x20006d41
 8007924:	20001f40 	.word	0x20001f40
 8007928:	20006d21 	.word	0x20006d21
 800792c:	20006d43 	.word	0x20006d43
 8007930:	20006d22 	.word	0x20006d22
 8007934:	20006d40 	.word	0x20006d40
 8007938:	20006d01 	.word	0x20006d01
 800793c:	20001a38 	.word	0x20001a38
 8007940:	20001bb8 	.word	0x20001bb8
 8007944:	20006d42 	.word	0x20006d42
 8007948:	20006d20 	.word	0x20006d20
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800794c:	4657      	mov	r7, sl
 800794e:	3728      	adds	r7, #40	; 0x28
 8007950:	7878      	ldrb	r0, [r7, #1]
 8007952:	210a      	movs	r1, #10
 8007954:	f7f8 fc82 	bl	800025c <__aeabi_uidivmod>
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <ExecuteMonitor+0x3f0>)
 800795a:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800795c:	78b8      	ldrb	r0, [r7, #2]
 800795e:	210a      	movs	r1, #10
 8007960:	f7f8 fc7c 	bl	800025c <__aeabi_uidivmod>
 8007964:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <ExecuteMonitor+0x3f4>)
 8007966:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007968:	78f8      	ldrb	r0, [r7, #3]
 800796a:	210a      	movs	r1, #10
 800796c:	f7f8 fc76 	bl	800025c <__aeabi_uidivmod>
 8007970:	4652      	mov	r2, sl
 8007972:	233c      	movs	r3, #60	; 0x3c
 8007974:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007976:	4650      	mov	r0, sl
 8007978:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800797a:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <ExecuteMonitor+0x3f8>)
 800797e:	3b38      	subs	r3, #56	; 0x38
 8007980:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 8007982:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <ExecuteMonitor+0x3fc>)
 8007984:	3b03      	subs	r3, #3
 8007986:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007988:	312c      	adds	r1, #44	; 0x2c
 800798a:	2210      	movs	r2, #16
 800798c:	303d      	adds	r0, #61	; 0x3d
 800798e:	f00a fdfa 	bl	8012586 <memcpy>
 8007992:	e668      	b.n	8007666 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007994:	2202      	movs	r2, #2
 8007996:	9302      	str	r3, [sp, #8]
 8007998:	9201      	str	r2, [sp, #4]
 800799a:	3b01      	subs	r3, #1
 800799c:	e76d      	b.n	800787a <ExecuteMonitor+0x2ca>
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	20006d42 	.word	0x20006d42
 80079a4:	20006d40 	.word	0x20006d40
 80079a8:	20006d21 	.word	0x20006d21
 80079ac:	20006d20 	.word	0x20006d20

080079b0 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	4c1c      	ldr	r4, [pc, #112]	; (8007a24 <StartDefaultTask+0x74>)
 80079b4:	4d1c      	ldr	r5, [pc, #112]	; (8007a28 <StartDefaultTask+0x78>)
 80079b6:	4e1d      	ldr	r6, [pc, #116]	; (8007a2c <StartDefaultTask+0x7c>)
 80079b8:	e00f      	b.n	80079da <StartDefaultTask+0x2a>
		switch(indMode){
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d022      	beq.n	8007a04 <StartDefaultTask+0x54>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d028      	beq.n	8007a14 <StartDefaultTask+0x64>
		CheckAttachedButtons();
 80079c2:	f004 f959 	bl	800bc78 <CheckAttachedButtons>
		ExecuteSnippet();
 80079c6:	f7fd fcfb 	bl	80053c0 <ExecuteSnippet>
		ExecuteMonitor();
 80079ca:	f7ff fdf1 	bl	80075b0 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 80079ce:	782b      	ldrb	r3, [r5, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d100      	bne.n	80079d6 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 80079d4:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 80079d6:	f007 f88d 	bl	800eaf4 <vPortYield>
		switch(indMode){
 80079da:	7823      	ldrb	r3, [r4, #0]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d1ec      	bne.n	80079ba <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 80079e0:	2180      	movs	r1, #128	; 0x80
 80079e2:	4813      	ldr	r0, [pc, #76]	; (8007a30 <StartDefaultTask+0x80>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	01c9      	lsls	r1, r1, #7
 80079e8:	f008 fe1c 	bl	8010624 <HAL_GPIO_WritePin>
 80079ec:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 80079ee:	f005 fb31 	bl	800d054 <osDelay>
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	2200      	movs	r2, #0
 80079f6:	01c9      	lsls	r1, r1, #7
 80079f8:	480d      	ldr	r0, [pc, #52]	; (8007a30 <StartDefaultTask+0x80>)
 80079fa:	f008 fe13 	bl	8010624 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80079fe:	2300      	movs	r3, #0
 8007a00:	7023      	strb	r3, [r4, #0]
				break;
 8007a02:	e7de      	b.n	80079c2 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8007a04:	2180      	movs	r1, #128	; 0x80
 8007a06:	480a      	ldr	r0, [pc, #40]	; (8007a30 <StartDefaultTask+0x80>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	01c9      	lsls	r1, r1, #7
 8007a0c:	f008 fe0a 	bl	8010624 <HAL_GPIO_WritePin>
 8007a10:	201e      	movs	r0, #30
 8007a12:	e7ec      	b.n	80079ee <StartDefaultTask+0x3e>
				RTOS_IND_blink(200);
 8007a14:	2180      	movs	r1, #128	; 0x80
 8007a16:	4806      	ldr	r0, [pc, #24]	; (8007a30 <StartDefaultTask+0x80>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	01c9      	lsls	r1, r1, #7
 8007a1c:	f008 fe02 	bl	8010624 <HAL_GPIO_WritePin>
 8007a20:	20c8      	movs	r0, #200	; 0xc8
 8007a22:	e7e4      	b.n	80079ee <StartDefaultTask+0x3e>
 8007a24:	2000117e 	.word	0x2000117e
 8007a28:	20002878 	.word	0x20002878
 8007a2c:	2000286c 	.word	0x2000286c
 8007a30:	48000400 	.word	0x48000400

08007a34 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007a36:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	4904      	ldr	r1, [pc, #16]	; (8007a4c <vMainConfigureTimerForRunTimeStats+0x18>)
 8007a3c:	f7f8 fb88 	bl	8000150 <__udivsi3>
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007a42:	6098      	str	r0, [r3, #8]
}
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	200000b4 	.word	0x200000b4
 8007a4c:	00002710 	.word	0x00002710
 8007a50:	20001fc0 	.word	0x20001fc0

08007a54 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a54:	21fa      	movs	r1, #250	; 0xfa
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007a58:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	0089      	lsls	r1, r1, #2
 8007a5e:	f7f8 fb77 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a62:	4c0d      	ldr	r4, [pc, #52]	; (8007a98 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a64:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a66:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007a68:	f006 fa20 	bl	800deac <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <ulMainGetRunTimeCounterValue+0x48>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	015b      	lsls	r3, r3, #5
 8007a72:	d50c      	bpl.n	8007a8e <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a74:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007a76:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a78:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a7a:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007a7c:	0084      	lsls	r4, r0, #2
 8007a7e:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a80:	6899      	ldr	r1, [r3, #8]
 8007a82:	0028      	movs	r0, r5
 8007a84:	f7f8 fb64 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007a88:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a8a:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a8e:	1bad      	subs	r5, r5, r6
 8007a90:	e7f3      	b.n	8007a7a <ulMainGetRunTimeCounterValue+0x26>
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	200000b4 	.word	0x200000b4
 8007a98:	e000e018 	.word	0xe000e018
 8007a9c:	e000ed04 	.word	0xe000ed04
 8007aa0:	20001fc0 	.word	0x20001fc0

08007aa4 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007aa4:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007aa6:	f006 ffcd 	bl	800ea44 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007aaa:	b2c4      	uxtb	r4, r0
 8007aac:	0020      	movs	r0, r4
 8007aae:	f002 fa73 	bl	8009f98 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007ab2:	0020      	movs	r0, r4
 8007ab4:	f002 fea8 	bl	800a808 <SwitchStreamDMAToMsg>
}
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	46c0      	nop			; (mov r8, r8)

08007abc <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007abe:	46ce      	mov	lr, r9
 8007ac0:	4647      	mov	r7, r8
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	0015      	movs	r5, r2
 8007ac8:	466a      	mov	r2, sp
 8007aca:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007acc:	aa0c      	add	r2, sp, #48	; 0x30
 8007ace:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007ad0:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d06b      	beq.n	8007bae <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d051      	beq.n	8007b7e <SetupDMAStreams+0xc2>
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d04f      	beq.n	8007b7e <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d06a      	beq.n	8007bb8 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007ae2:	2801      	cmp	r0, #1
 8007ae4:	d052      	beq.n	8007b8c <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007ae6:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007ae8:	2802      	cmp	r0, #2
 8007aea:	d149      	bne.n	8007b80 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007aec:	0018      	movs	r0, r3
 8007aee:	f005 f981 	bl	800cdf4 <GetUart>
 8007af2:	ab0c      	add	r3, sp, #48	; 0x30
 8007af4:	0004      	movs	r4, r0
 8007af6:	7818      	ldrb	r0, [r3, #0]
 8007af8:	f005 f97c 	bl	800cdf4 <GetUart>
 8007afc:	2201      	movs	r2, #1
 8007afe:	0001      	movs	r1, r0
 8007b00:	0020      	movs	r0, r4
 8007b02:	f7ff fbf1 	bl	80072e8 <StartDMAstream>
 8007b06:	2817      	cmp	r0, #23
 8007b08:	d04f      	beq.n	8007baa <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b0a:	21fa      	movs	r1, #250	; 0xfa
 8007b0c:	0168      	lsls	r0, r5, #5
 8007b0e:	1b40      	subs	r0, r0, r5
 8007b10:	0080      	lsls	r0, r0, #2
 8007b12:	1940      	adds	r0, r0, r5
 8007b14:	0089      	lsls	r1, r1, #2
 8007b16:	00c0      	lsls	r0, r0, #3
 8007b18:	f7f8 fb1a 	bl	8000150 <__udivsi3>
 8007b1c:	4b49      	ldr	r3, [pc, #292]	; (8007c44 <SetupDMAStreams+0x188>)
 8007b1e:	4d4a      	ldr	r5, [pc, #296]	; (8007c48 <SetupDMAStreams+0x18c>)
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	4698      	mov	r8, r3
 8007b24:	230f      	movs	r3, #15
 8007b26:	0001      	movs	r1, r0
 8007b28:	2200      	movs	r2, #0
 8007b2a:	446b      	add	r3, sp
 8007b2c:	0007      	movs	r7, r0
 8007b2e:	0028      	movs	r0, r5
 8007b30:	f006 fe38 	bl	800e7a4 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007b34:	466b      	mov	r3, sp
 8007b36:	7bdb      	ldrb	r3, [r3, #15]
 8007b38:	4c44      	ldr	r4, [pc, #272]	; (8007c4c <SetupDMAStreams+0x190>)
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b40:	ab0c      	add	r3, sp, #48	; 0x30
 8007b42:	7818      	ldrb	r0, [r3, #0]
 8007b44:	f005 f956 	bl	800cdf4 <GetUart>
 8007b48:	466b      	mov	r3, sp
 8007b4a:	4681      	mov	r9, r0
 8007b4c:	7bd8      	ldrb	r0, [r3, #15]
 8007b4e:	f005 f951 	bl	800cdf4 <GetUart>
 8007b52:	2201      	movs	r2, #1
 8007b54:	0001      	movs	r1, r0
 8007b56:	4648      	mov	r0, r9
 8007b58:	f7ff fbc6 	bl	80072e8 <StartDMAstream>
 8007b5c:	2817      	cmp	r0, #23
 8007b5e:	d024      	beq.n	8007baa <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b60:	4643      	mov	r3, r8
 8007b62:	0028      	movs	r0, r5
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2200      	movs	r2, #0
 8007b68:	ab0c      	add	r3, sp, #48	; 0x30
 8007b6a:	0039      	movs	r1, r7
 8007b6c:	f006 fe1a 	bl	800e7a4 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007b70:	ab0c      	add	r3, sp, #48	; 0x30
 8007b72:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b74:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007b76:	3b01      	subs	r3, #1
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	511e      	str	r6, [r3, r4]
 8007b7c:	e044      	b.n	8007c08 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007b7e:	2467      	movs	r4, #103	; 0x67
}
 8007b80:	0020      	movs	r0, r4
 8007b82:	b005      	add	sp, #20
 8007b84:	bc0c      	pop	{r2, r3}
 8007b86:	4690      	mov	r8, r2
 8007b88:	4699      	mov	r9, r3
 8007b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b8c:	0010      	movs	r0, r2
 8007b8e:	f005 f931 	bl	800cdf4 <GetUart>
 8007b92:	466b      	mov	r3, sp
 8007b94:	0004      	movs	r4, r0
 8007b96:	7bd8      	ldrb	r0, [r3, #15]
 8007b98:	f005 f92c 	bl	800cdf4 <GetUart>
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	0001      	movs	r1, r0
 8007ba0:	0020      	movs	r0, r4
 8007ba2:	f7ff fba1 	bl	80072e8 <StartDMAstream>
 8007ba6:	2817      	cmp	r0, #23
 8007ba8:	d13d      	bne.n	8007c26 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007baa:	2417      	movs	r4, #23
 8007bac:	e7e8      	b.n	8007b80 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007bae:	2102      	movs	r1, #2
 8007bb0:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007bb2:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007bb4:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007bb6:	e7e3      	b.n	8007b80 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f005 f91b 	bl	800cdf4 <GetUart>
 8007bbe:	ab0c      	add	r3, sp, #48	; 0x30
 8007bc0:	0004      	movs	r4, r0
 8007bc2:	7818      	ldrb	r0, [r3, #0]
 8007bc4:	f005 f916 	bl	800cdf4 <GetUart>
 8007bc8:	2201      	movs	r2, #1
 8007bca:	0001      	movs	r1, r0
 8007bcc:	0020      	movs	r0, r4
 8007bce:	f7ff fb8b 	bl	80072e8 <StartDMAstream>
 8007bd2:	2817      	cmp	r0, #23
 8007bd4:	d0e9      	beq.n	8007baa <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007bd6:	21fa      	movs	r1, #250	; 0xfa
 8007bd8:	0168      	lsls	r0, r5, #5
 8007bda:	1b40      	subs	r0, r0, r5
 8007bdc:	0080      	lsls	r0, r0, #2
 8007bde:	1940      	adds	r0, r0, r5
 8007be0:	0089      	lsls	r1, r1, #2
 8007be2:	00c0      	lsls	r0, r0, #3
 8007be4:	f7f8 fab4 	bl	8000150 <__udivsi3>
 8007be8:	4b16      	ldr	r3, [pc, #88]	; (8007c44 <SetupDMAStreams+0x188>)
 8007bea:	0001      	movs	r1, r0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	230f      	movs	r3, #15
 8007bf0:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4814      	ldr	r0, [pc, #80]	; (8007c48 <SetupDMAStreams+0x18c>)
 8007bf6:	f006 fdd5 	bl	800e7a4 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007bfa:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bfc:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007bfe:	7bdb      	ldrb	r3, [r3, #15]
 8007c00:	4a12      	ldr	r2, [pc, #72]	; (8007c4c <SetupDMAStreams+0x190>)
 8007c02:	3b01      	subs	r3, #1
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007c08:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	d0b8      	beq.n	8007b80 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007c0e:	f006 f947 	bl	800dea0 <xTaskGetTickCount>
 8007c12:	2301      	movs	r3, #1
 8007c14:	425b      	negs	r3, r3
 8007c16:	0002      	movs	r2, r0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	0028      	movs	r0, r5
 8007c20:	f006 fde0 	bl	800e7e4 <xTimerGenericCommand>
 8007c24:	e7ac      	b.n	8007b80 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c26:	21fa      	movs	r1, #250	; 0xfa
 8007c28:	0168      	lsls	r0, r5, #5
 8007c2a:	1b40      	subs	r0, r0, r5
 8007c2c:	0080      	lsls	r0, r0, #2
 8007c2e:	1940      	adds	r0, r0, r5
 8007c30:	0089      	lsls	r1, r1, #2
 8007c32:	00c0      	lsls	r0, r0, #3
 8007c34:	f7f8 fa8c 	bl	8000150 <__udivsi3>
 8007c38:	4b02      	ldr	r3, [pc, #8]	; (8007c44 <SetupDMAStreams+0x188>)
 8007c3a:	0001      	movs	r1, r0
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	ab0c      	add	r3, sp, #48	; 0x30
 8007c40:	e7d7      	b.n	8007bf2 <SetupDMAStreams+0x136>
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	08007aa5 	.word	0x08007aa5
 8007c48:	08019a08 	.word	0x08019a08
 8007c4c:	200019d8 	.word	0x200019d8
 8007c50:	20000c2c 	.word	0x20000c2c

08007c54 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007c54:	b510      	push	{r4, lr}
	switch(port){
 8007c56:	2806      	cmp	r0, #6
 8007c58:	d80a      	bhi.n	8007c70 <NotifyMessagingTask+0x1c>
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <NotifyMessagingTask+0x34>)
 8007c5c:	0080      	lsls	r0, r0, #2
 8007c5e:	581b      	ldr	r3, [r3, r0]
 8007c60:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P6
		case P6:
			xTaskNotifyGive(P6MsgTaskHandle)
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <NotifyMessagingTask+0x38>)
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	2202      	movs	r2, #2
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	f006 fcea 	bl	800e644 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007c70:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007c72:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <NotifyMessagingTask+0x3c>)
 8007c74:	e7f6      	b.n	8007c64 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <NotifyMessagingTask+0x40>)
 8007c78:	e7f4      	b.n	8007c64 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <NotifyMessagingTask+0x44>)
 8007c7c:	e7f2      	b.n	8007c64 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <NotifyMessagingTask+0x48>)
 8007c80:	e7f0      	b.n	8007c64 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <NotifyMessagingTask+0x4c>)
 8007c84:	e7ee      	b.n	8007c64 <NotifyMessagingTask+0x10>
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	08017130 	.word	0x08017130
 8007c8c:	20001ee4 	.word	0x20001ee4
 8007c90:	20001ed0 	.word	0x20001ed0
 8007c94:	20001ed4 	.word	0x20001ed4
 8007c98:	20001ed8 	.word	0x20001ed8
 8007c9c:	20001edc 	.word	0x20001edc
 8007ca0:	20001ee0 	.word	0x20001ee0

08007ca4 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	ac06      	add	r4, sp, #24
 8007caa:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007cac:	0004      	movs	r4, r0
 8007cae:	4314      	orrs	r4, r2
 8007cb0:	d011      	beq.n	8007cd6 <SendMessageFromPort+0x32>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d10b      	bne.n	8007cce <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007cb6:	1c96      	adds	r6, r2, #2
 8007cb8:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007cba:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007cbc:	2e01      	cmp	r6, #1
 8007cbe:	d803      	bhi.n	8007cc8 <SendMessageFromPort+0x24>
 8007cc0:	9500      	str	r5, [sp, #0]
 8007cc2:	f000 f80b 	bl	8007cdc <SendMessageFromPort.part.0>
 8007cc6:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007cc8:	0020      	movs	r0, r4
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	d0f6      	beq.n	8007cc0 <SendMessageFromPort+0x1c>
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	d1f4      	bne.n	8007cc0 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007cd6:	2467      	movs	r4, #103	; 0x67
 8007cd8:	e7f6      	b.n	8007cc8 <SendMessageFromPort+0x24>
 8007cda:	46c0      	nop			; (mov r8, r8)

08007cdc <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cde:	46de      	mov	lr, fp
 8007ce0:	464e      	mov	r6, r9
 8007ce2:	4645      	mov	r5, r8
 8007ce4:	4657      	mov	r7, sl
 8007ce6:	b5e0      	push	{r5, r6, r7, lr}
 8007ce8:	b087      	sub	sp, #28
 8007cea:	0005      	movs	r5, r0
 8007cec:	9003      	str	r0, [sp, #12]
 8007cee:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cf0:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007cf2:	ab10      	add	r3, sp, #64	; 0x40
 8007cf4:	4689      	mov	r9, r1
 8007cf6:	4690      	mov	r8, r2
 8007cf8:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cfa:	f006 f83b 	bl	800dd74 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cfe:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d00:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d02:	2000      	movs	r0, #0
 8007d04:	f006 f846 	bl	800dd94 <vTaskPrioritySet>
	message[0] ='H';
 8007d08:	2348      	movs	r3, #72	; 0x48
 8007d0a:	4cd2      	ldr	r4, [pc, #840]	; (8008054 <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d0c:	464a      	mov	r2, r9
	message[0] ='H';
 8007d0e:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007d10:	3312      	adds	r3, #18
 8007d12:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d14:	002b      	movs	r3, r5
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d000      	beq.n	8007d1c <SendMessageFromPort.part.0+0x40>
 8007d1a:	e094      	b.n	8007e46 <SendMessageFromPort.part.0+0x16a>
 8007d1c:	4643      	mov	r3, r8
 8007d1e:	1c9f      	adds	r7, r3, #2
 8007d20:	b2ff      	uxtb	r7, r7
 8007d22:	2f01      	cmp	r7, #1
 8007d24:	d800      	bhi.n	8007d28 <SendMessageFromPort.part.0+0x4c>
 8007d26:	e095      	b.n	8007e54 <SendMessageFromPort.part.0+0x178>
 8007d28:	465b      	mov	r3, fp
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d100      	bne.n	8007d30 <SendMessageFromPort.part.0+0x54>
 8007d2e:	e091      	b.n	8007e54 <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007d30:	4bc9      	ldr	r3, [pc, #804]	; (8008058 <SendMessageFromPort.part.0+0x37c>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	4699      	mov	r9, r3
		message[2] =length;
 8007d36:	2300      	movs	r3, #0
 8007d38:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007d3a:	4643      	mov	r3, r8
 8007d3c:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007d3e:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d40:	4ac6      	ldr	r2, [pc, #792]	; (800805c <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007d42:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d44:	7913      	ldrb	r3, [r2, #4]
 8007d46:	7851      	ldrb	r1, [r2, #1]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	0089      	lsls	r1, r1, #2
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	455a      	cmp	r2, fp
 8007d56:	4192      	sbcs	r2, r2
 8007d58:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d5a:	0052      	lsls	r2, r2, #1
 8007d5c:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007d5e:	465a      	mov	r2, fp
 8007d60:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007d62:	2200      	movs	r2, #0
 8007d64:	4692      	mov	sl, r2
 8007d66:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007d6c:	2aff      	cmp	r2, #255	; 0xff
 8007d6e:	d903      	bls.n	8007d78 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007d70:	0a12      	lsrs	r2, r2, #8
 8007d72:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007d74:	2201      	movs	r2, #1
 8007d76:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007d78:	2e2e      	cmp	r6, #46	; 0x2e
 8007d7a:	d800      	bhi.n	8007d7e <SendMessageFromPort.part.0+0xa2>
 8007d7c:	e157      	b.n	800802e <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007d7e:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007d80:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007d82:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007d84:	4db6      	ldr	r5, [pc, #728]	; (8008060 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007d86:	4313      	orrs	r3, r2
 8007d88:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007d8a:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007d8c:	2e2d      	cmp	r6, #45	; 0x2d
 8007d8e:	d900      	bls.n	8007d92 <SendMessageFromPort.part.0+0xb6>
 8007d90:	e136      	b.n	8008000 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d92:	237f      	movs	r3, #127	; 0x7f
 8007d94:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d96:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d98:	4013      	ands	r3, r2
 8007d9a:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d9c:	4653      	mov	r3, sl
 8007d9e:	1dd8      	adds	r0, r3, #7
 8007da0:	4bb0      	ldr	r3, [pc, #704]	; (8008064 <SendMessageFromPort.part.0+0x388>)
 8007da2:	1820      	adds	r0, r4, r0
 8007da4:	18c9      	adds	r1, r1, r3
 8007da6:	0032      	movs	r2, r6
 8007da8:	f00a fbed 	bl	8012586 <memcpy>
					ptrShift =0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007db0:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007db2:	4653      	mov	r3, sl
 8007db4:	1d1d      	adds	r5, r3, #4
 8007db6:	19ad      	adds	r5, r5, r6
 8007db8:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007dba:	4bab      	ldr	r3, [pc, #684]	; (8008068 <SendMessageFromPort.part.0+0x38c>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d03d      	beq.n	8007e3e <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007dc2:	4baa      	ldr	r3, [pc, #680]	; (800806c <SendMessageFromPort.part.0+0x390>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2bff      	cmp	r3, #255	; 0xff
 8007dc8:	d100      	bne.n	8007dcc <SendMessageFromPort.part.0+0xf0>
 8007dca:	e106      	b.n	8007fda <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007dcc:	4aa8      	ldr	r2, [pc, #672]	; (8008070 <SendMessageFromPort.part.0+0x394>)
 8007dce:	7817      	ldrb	r7, [r2, #0]
 8007dd0:	2f00      	cmp	r7, #0
 8007dd2:	d100      	bne.n	8007dd6 <SendMessageFromPort.part.0+0xfa>
 8007dd4:	e139      	b.n	800804a <SendMessageFromPort.part.0+0x36e>
 8007dd6:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dd8:	0021      	movs	r1, r4
 8007dda:	409a      	lsls	r2, r3
 8007ddc:	4451      	add	r1, sl
 8007dde:	4694      	mov	ip, r2
 8007de0:	9105      	str	r1, [sp, #20]
 8007de2:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007de4:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007de6:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007de8:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dea:	46ac      	mov	ip, r5
 8007dec:	000d      	movs	r5, r1
 8007dee:	48a1      	ldr	r0, [pc, #644]	; (8008074 <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007df0:	8801      	ldrh	r1, [r0, #0]
 8007df2:	420f      	tst	r7, r1
 8007df4:	d009      	beq.n	8007e0a <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007df6:	3201      	adds	r2, #1
 8007df8:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007dfa:	1991      	adds	r1, r2, r6
 8007dfc:	292c      	cmp	r1, #44	; 0x2c
 8007dfe:	dd00      	ble.n	8007e02 <SendMessageFromPort.part.0+0x126>
 8007e00:	e0fc      	b.n	8007ffc <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007e02:	9905      	ldr	r1, [sp, #20]
 8007e04:	1889      	adds	r1, r1, r2
 8007e06:	1989      	adds	r1, r1, r6
 8007e08:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3002      	adds	r0, #2
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	d9ed      	bls.n	8007df0 <SendMessageFromPort.part.0+0x114>
 8007e14:	4665      	mov	r5, ip
 8007e16:	0010      	movs	r0, r2
 8007e18:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007e1a:	4653      	mov	r3, sl
 8007e1c:	3307      	adds	r3, #7
 8007e1e:	199e      	adds	r6, r3, r6
 8007e20:	1836      	adds	r6, r6, r0
 8007e22:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007e24:	292b      	cmp	r1, #43	; 0x2b
 8007e26:	dd00      	ble.n	8007e2a <SendMessageFromPort.part.0+0x14e>
 8007e28:	e0e8      	b.n	8007ffc <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007e2a:	4993      	ldr	r1, [pc, #588]	; (8008078 <SendMessageFromPort.part.0+0x39c>)
 8007e2c:	3502      	adds	r5, #2
 8007e2e:	780b      	ldrb	r3, [r1, #0]
 8007e30:	19a6      	adds	r6, r4, r6
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007e36:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007e38:	700b      	strb	r3, [r1, #0]
 8007e3a:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007e3c:	b2ed      	uxtb	r5, r5
 8007e3e:	4647      	mov	r7, r8
 8007e40:	3702      	adds	r7, #2
 8007e42:	b2ff      	uxtb	r7, r7
 8007e44:	e012      	b.n	8007e6c <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007e46:	465b      	mov	r3, fp
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d000      	beq.n	8007e4e <SendMessageFromPort.part.0+0x172>
 8007e4c:	e0af      	b.n	8007fae <SendMessageFromPort.part.0+0x2d2>
 8007e4e:	4647      	mov	r7, r8
 8007e50:	3702      	adds	r7, #2
 8007e52:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8007e54:	3e01      	subs	r6, #1
 8007e56:	4b89      	ldr	r3, [pc, #548]	; (800807c <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e58:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8007e5a:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e5c:	1b89      	subs	r1, r1, r6
 8007e5e:	4e88      	ldr	r6, [pc, #544]	; (8008080 <SendMessageFromPort.part.0+0x3a4>)
 8007e60:	00c9      	lsls	r1, r1, #3
 8007e62:	1989      	adds	r1, r1, r6
 8007e64:	002a      	movs	r2, r5
 8007e66:	4887      	ldr	r0, [pc, #540]	; (8008084 <SendMessageFromPort.part.0+0x3a8>)
 8007e68:	f00a fb8d 	bl	8012586 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007e6c:	1ceb      	adds	r3, r5, #3
 8007e6e:	469a      	mov	sl, r3
 8007e70:	4e85      	ldr	r6, [pc, #532]	; (8008088 <SendMessageFromPort.part.0+0x3ac>)
 8007e72:	001a      	movs	r2, r3
 8007e74:	0021      	movs	r1, r4
 8007e76:	0030      	movs	r0, r6
	message[2] =length;
 8007e78:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007e7a:	f00a fb84 	bl	8012586 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e7e:	b2ab      	uxth	r3, r5
 8007e80:	4651      	mov	r1, sl
 8007e82:	0030      	movs	r0, r6
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	f002 fd4d 	bl	800a924 <CalculateCRC8>
 8007e8a:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e8c:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e8e:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e90:	2100      	movs	r1, #0
 8007e92:	0030      	movs	r0, r6
 8007e94:	f00a fb80 	bl	8012598 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e98:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007e9a:	2f01      	cmp	r7, #1
 8007e9c:	d94a      	bls.n	8007f34 <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e9e:	3b2c      	subs	r3, #44	; 0x2c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d800      	bhi.n	8007ea6 <SendMessageFromPort.part.0+0x1ca>
 8007ea4:	e08d      	b.n	8007fc2 <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007ea6:	4b6d      	ldr	r3, [pc, #436]	; (800805c <SendMessageFromPort.part.0+0x380>)
 8007ea8:	4698      	mov	r8, r3
 8007eaa:	88db      	ldrh	r3, [r3, #6]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d100      	bne.n	8007eb2 <SendMessageFromPort.part.0+0x1d6>
 8007eb0:	e08f      	b.n	8007fd2 <SendMessageFromPort.part.0+0x2f6>
 8007eb2:	9e05      	ldr	r6, [sp, #20]
 8007eb4:	4f75      	ldr	r7, [pc, #468]	; (800808c <SendMessageFromPort.part.0+0x3b0>)
 8007eb6:	4b76      	ldr	r3, [pc, #472]	; (8008090 <SendMessageFromPort.part.0+0x3b4>)
 8007eb8:	3604      	adds	r6, #4
 8007eba:	46ba      	mov	sl, r7
 8007ebc:	b2b6      	uxth	r6, r6
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	4699      	mov	r9, r3
 8007ec2:	9f03      	ldr	r7, [sp, #12]
 8007ec4:	e005      	b.n	8007ed2 <SendMessageFromPort.part.0+0x1f6>
 8007ec6:	4643      	mov	r3, r8
 8007ec8:	3501      	adds	r5, #1
 8007eca:	88db      	ldrh	r3, [r3, #6]
 8007ecc:	b2ed      	uxtb	r5, r5
 8007ece:	42ab      	cmp	r3, r5
 8007ed0:	d91c      	bls.n	8007f0c <SendMessageFromPort.part.0+0x230>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007ed2:	2332      	movs	r3, #50	; 0x32
 8007ed4:	0032      	movs	r2, r6
 8007ed6:	0021      	movs	r1, r4
 8007ed8:	0038      	movs	r0, r7
 8007eda:	f7fa ff23 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007ede:	20c8      	movs	r0, #200	; 0xc8
 8007ee0:	f005 f8b8 	bl	800d054 <osDelay>
				if(ACK_FLAG == true)
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10f      	bne.n	8007f0c <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8007eec:	4653      	mov	r3, sl
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0e8      	beq.n	8007ec6 <SendMessageFromPort.part.0+0x1ea>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007ef4:	2332      	movs	r3, #50	; 0x32
 8007ef6:	0032      	movs	r2, r6
 8007ef8:	0021      	movs	r1, r4
 8007efa:	0038      	movs	r0, r7
 8007efc:	f7fa ff12 	bl	8002d24 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007f00:	4643      	mov	r3, r8
 8007f02:	3501      	adds	r5, #1
 8007f04:	88db      	ldrh	r3, [r3, #6]
 8007f06:	b2ed      	uxtb	r5, r5
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	d8e2      	bhi.n	8007ed2 <SendMessageFromPort.part.0+0x1f6>
 8007f0c:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	464a      	mov	r2, r9
 8007f12:	703b      	strb	r3, [r7, #0]
 8007f14:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8007f16:	2000      	movs	r0, #0
 8007f18:	9904      	ldr	r1, [sp, #16]
 8007f1a:	f005 ff3b 	bl	800dd94 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8007f1e:	2202      	movs	r2, #2
	return result;
 8007f20:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8007f22:	4b5c      	ldr	r3, [pc, #368]	; (8008094 <SendMessageFromPort.part.0+0x3b8>)
 8007f24:	701a      	strb	r2, [r3, #0]
}
 8007f26:	b007      	add	sp, #28
 8007f28:	bc3c      	pop	{r2, r3, r4, r5}
 8007f2a:	4690      	mov	r8, r2
 8007f2c:	4699      	mov	r9, r3
 8007f2e:	46a2      	mov	sl, r4
 8007f30:	46ab      	mov	fp, r5
 8007f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03e      	beq.n	8007fb6 <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f7fb fd39 	bl	80039b0 <FindBroadcastRoutes>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4698      	mov	r8, r3
 8007f42:	4b45      	ldr	r3, [pc, #276]	; (8008058 <SendMessageFromPort.part.0+0x37c>)
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f44:	9e05      	ldr	r6, [sp, #20]
 8007f46:	4699      	mov	r9, r3
 8007f48:	4b53      	ldr	r3, [pc, #332]	; (8008098 <SendMessageFromPort.part.0+0x3bc>)
 8007f4a:	3604      	adds	r6, #4
 8007f4c:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f4e:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f50:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f52:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f54:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f56:	2501      	movs	r5, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f58:	4646      	mov	r6, r8
 8007f5a:	4f4c      	ldr	r7, [pc, #304]	; (800808c <SendMessageFromPort.part.0+0x3b0>)
 8007f5c:	4698      	mov	r8, r3
 8007f5e:	e009      	b.n	8007f74 <SendMessageFromPort.part.0+0x298>
			rejected_FLAG=false;
 8007f60:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f62:	3501      	adds	r5, #1
			Delay_us(10);
 8007f64:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f66:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8007f68:	703b      	strb	r3, [r7, #0]
 8007f6a:	3601      	adds	r6, #1
			Delay_us(10);
 8007f6c:	f004 fcf0 	bl	800c950 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f70:	2d07      	cmp	r5, #7
 8007f72:	d0d0      	beq.n	8007f16 <SendMessageFromPort.part.0+0x23a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f74:	464b      	mov	r3, r9
 8007f76:	465a      	mov	r2, fp
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	5ad3      	ldrh	r3, [r2, r3]
 8007f80:	4652      	mov	r2, sl
 8007f82:	4133      	asrs	r3, r6
 8007f84:	421a      	tst	r2, r3
 8007f86:	d0eb      	beq.n	8007f60 <SendMessageFromPort.part.0+0x284>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f88:	2332      	movs	r3, #50	; 0x32
 8007f8a:	4642      	mov	r2, r8
 8007f8c:	0021      	movs	r1, r4
 8007f8e:	0028      	movs	r0, r5
 8007f90:	f7fa fec8 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007f94:	20c8      	movs	r0, #200	; 0xc8
 8007f96:	f005 f85d 	bl	800d054 <osDelay>
				if(rejected_FLAG == true)
 8007f9a:	783b      	ldrb	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0df      	beq.n	8007f60 <SendMessageFromPort.part.0+0x284>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007fa0:	2332      	movs	r3, #50	; 0x32
 8007fa2:	4642      	mov	r2, r8
 8007fa4:	0021      	movs	r1, r4
 8007fa6:	9803      	ldr	r0, [sp, #12]
 8007fa8:	f7fa febc 	bl	8002d24 <Send_BOS_Message>
 8007fac:	e7d8      	b.n	8007f60 <SendMessageFromPort.part.0+0x284>
		if(src == 0)
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	d000      	beq.n	8007fb4 <SendMessageFromPort.part.0+0x2d8>
 8007fb2:	e6c0      	b.n	8007d36 <SendMessageFromPort.part.0+0x5a>
 8007fb4:	e6bc      	b.n	8007d30 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1bd      	bne.n	8007f38 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8007fbc:	7923      	ldrb	r3, [r4, #4]
 8007fbe:	4699      	mov	r9, r3
 8007fc0:	e7ba      	b.n	8007f38 <SendMessageFromPort.part.0+0x25c>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007fc2:	9a05      	ldr	r2, [sp, #20]
 8007fc4:	2332      	movs	r3, #50	; 0x32
 8007fc6:	3204      	adds	r2, #4
 8007fc8:	b292      	uxth	r2, r2
 8007fca:	0021      	movs	r1, r4
 8007fcc:	9803      	ldr	r0, [sp, #12]
 8007fce:	f7fa fea9 	bl	8002d24 <Send_BOS_Message>
 8007fd2:	4b2f      	ldr	r3, [pc, #188]	; (8008090 <SendMessageFromPort.part.0+0x3b4>)
 8007fd4:	4f2d      	ldr	r7, [pc, #180]	; (800808c <SendMessageFromPort.part.0+0x3b0>)
 8007fd6:	4699      	mov	r9, r3
 8007fd8:	e799      	b.n	8007f0e <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007fda:	2e2c      	cmp	r6, #44	; 0x2c
 8007fdc:	d80e      	bhi.n	8007ffc <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8007fde:	4a26      	ldr	r2, [pc, #152]	; (8008078 <SendMessageFromPort.part.0+0x39c>)
 8007fe0:	4647      	mov	r7, r8
 8007fe2:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8007fe4:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	7013      	strb	r3, [r2, #0]
 8007fec:	4652      	mov	r2, sl
 8007fee:	18a2      	adds	r2, r4, r2
 8007ff0:	1996      	adds	r6, r2, r6
 8007ff2:	3702      	adds	r7, #2
 8007ff4:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 8007ff6:	b2ed      	uxtb	r5, r5
 8007ff8:	b2ff      	uxtb	r7, r7
 8007ffa:	e737      	b.n	8007e6c <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8007ffc:	2069      	movs	r0, #105	; 0x69
 8007ffe:	e792      	b.n	8007f26 <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8008000:	465b      	mov	r3, fp
 8008002:	4642      	mov	r2, r8
 8008004:	4649      	mov	r1, r9
 8008006:	9700      	str	r7, [sp, #0]
 8008008:	9803      	ldr	r0, [sp, #12]
 800800a:	f7ff fe4b 	bl	8007ca4 <SendMessageFromPort>
					osDelay(10);
 800800e:	200a      	movs	r0, #10
 8008010:	f005 f820 	bl	800d054 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8008014:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8008016:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8008018:	3e2e      	subs	r6, #46	; 0x2e
 800801a:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 800801c:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 800801e:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8008020:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 8008022:	2e00      	cmp	r6, #0
 8008024:	d000      	beq.n	8008028 <SendMessageFromPort.part.0+0x34c>
 8008026:	e6b1      	b.n	8007d8c <SendMessageFromPort.part.0+0xb0>
 8008028:	2500      	movs	r5, #0
 800802a:	362e      	adds	r6, #46	; 0x2e
 800802c:	e6c5      	b.n	8007dba <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800802e:	4653      	mov	r3, sl
 8008030:	1dd8      	adds	r0, r3, #7
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8008034:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008036:	8819      	ldrh	r1, [r3, #0]
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <SendMessageFromPort.part.0+0x388>)
 800803a:	1820      	adds	r0, r4, r0
 800803c:	18c9      	adds	r1, r1, r3
 800803e:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8008040:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008042:	f00a faa0 	bl	8012586 <memcpy>
			length =numberOfParams + shift + 4;
 8008046:	b2ed      	uxtb	r5, r5
 8008048:	e6b7      	b.n	8007dba <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800804a:	0031      	movs	r1, r6
 800804c:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 800804e:	2200      	movs	r2, #0
 8008050:	e6e3      	b.n	8007e1a <SendMessageFromPort.part.0+0x13e>
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	20000c58 	.word	0x20000c58
 8008058:	20000a98 	.word	0x20000a98
 800805c:	20006c00 	.word	0x20006c00
 8008060:	20001fcc 	.word	0x20001fcc
 8008064:	20000b3c 	.word	0x20000b3c
 8008068:	20001148 	.word	0x20001148
 800806c:	20000050 	.word	0x20000050
 8008070:	20000008 	.word	0x20000008
 8008074:	20000a9c 	.word	0x20000a9c
 8008078:	20000c48 	.word	0x20000c48
 800807c:	20000c50 	.word	0x20000c50
 8008080:	20000c90 	.word	0x20000c90
 8008084:	20000c5b 	.word	0x20000c5b
 8008088:	20001a00 	.word	0x20001a00
 800808c:	2000117c 	.word	0x2000117c
 8008090:	2000117d 	.word	0x2000117d
 8008094:	20000c3c 	.word	0x20000c3c
 8008098:	20000b6c 	.word	0x20000b6c

0800809c <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 800809c:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800809e:	b500      	push	{lr}
	AddBcastPayload = false;
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80080a2:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080a4:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <BroadcastReceivedMessage+0x38>)
 80080a8:	b289      	uxth	r1, r1
 80080aa:	7018      	strb	r0, [r3, #0]
 80080ac:	9100      	str	r1, [sp, #0]
 80080ae:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 80080b0:	28ff      	cmp	r0, #255	; 0xff
 80080b2:	d007      	beq.n	80080c4 <BroadcastReceivedMessage+0x28>
 80080b4:	22fe      	movs	r2, #254	; 0xfe
 80080b6:	2100      	movs	r1, #0
 80080b8:	2000      	movs	r0, #0
 80080ba:	f7ff fe0f 	bl	8007cdc <SendMessageFromPort.part.0>
}
 80080be:	2000      	movs	r0, #0
 80080c0:	b003      	add	sp, #12
 80080c2:	bd00      	pop	{pc}
 80080c4:	32ff      	adds	r2, #255	; 0xff
 80080c6:	2100      	movs	r1, #0
 80080c8:	2000      	movs	r0, #0
 80080ca:	f7ff fe07 	bl	8007cdc <SendMessageFromPort.part.0>
 80080ce:	e7f6      	b.n	80080be <BroadcastReceivedMessage+0x22>
 80080d0:	20001148 	.word	0x20001148
 80080d4:	20000050 	.word	0x20000050

080080d8 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080d8:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80080da:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080dc:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080e0:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80080e2:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <BroadcastMessage+0x44>)
 80080e6:	7019      	strb	r1, [r3, #0]
 80080e8:	9400      	str	r4, [sp, #0]
 80080ea:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80080ec:	29ff      	cmp	r1, #255	; 0xff
 80080ee:	d00c      	beq.n	800810a <BroadcastMessage+0x32>
 80080f0:	0001      	movs	r1, r0
 80080f2:	22fe      	movs	r2, #254	; 0xfe
 80080f4:	2000      	movs	r0, #0
 80080f6:	f7ff fdf1 	bl	8007cdc <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80080fa:	0022      	movs	r2, r4
 80080fc:	2100      	movs	r1, #0
 80080fe:	4808      	ldr	r0, [pc, #32]	; (8008120 <BroadcastMessage+0x48>)
 8008100:	f00a fa4a 	bl	8012598 <memset>
}
 8008104:	2000      	movs	r0, #0
 8008106:	b003      	add	sp, #12
 8008108:	bd30      	pop	{r4, r5, pc}
 800810a:	0001      	movs	r1, r0
 800810c:	22ff      	movs	r2, #255	; 0xff
 800810e:	2000      	movs	r0, #0
 8008110:	f7ff fde4 	bl	8007cdc <SendMessageFromPort.part.0>
 8008114:	e7f1      	b.n	80080fa <BroadcastMessage+0x22>
 8008116:	46c0      	nop			; (mov r8, r8)
 8008118:	20001148 	.word	0x20001148
 800811c:	20000050 	.word	0x20000050
 8008120:	20000b3c 	.word	0x20000b3c

08008124 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8008124:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008126:	b530      	push	{r4, r5, lr}
 8008128:	0005      	movs	r5, r0
	AddBcastPayload = false;
 800812a:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 800812c:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800812e:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8008130:	1e42      	subs	r2, r0, #1
 8008132:	00d3      	lsls	r3, r2, #3
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	4a09      	ldr	r2, [pc, #36]	; (800815c <ForwardReceivedMessage+0x38>)
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <ForwardReceivedMessage+0x3c>)
 800813e:	0021      	movs	r1, r4
 8008140:	7818      	ldrb	r0, [r3, #0]
 8008142:	f7fb fcdd 	bl	8003b00 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8008146:	9500      	str	r5, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	0022      	movs	r2, r4
 800814c:	2100      	movs	r1, #0
 800814e:	f7ff fda9 	bl	8007ca4 <SendMessageFromPort>
}
 8008152:	2000      	movs	r0, #0
 8008154:	b003      	add	sp, #12
 8008156:	bd30      	pop	{r4, r5, pc}
 8008158:	20001148 	.word	0x20001148
 800815c:	20000c90 	.word	0x20000c90
 8008160:	20000a98 	.word	0x20000a98

08008164 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	4d0f      	ldr	r5, [pc, #60]	; (80081a4 <SendMessageToModule+0x40>)
 8008168:	0004      	movs	r4, r0
 800816a:	b083      	sub	sp, #12
 800816c:	000f      	movs	r7, r1
 800816e:	0016      	movs	r6, r2
 8008170:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8008172:	2cff      	cmp	r4, #255	; 0xff
 8008174:	d010      	beq.n	8008198 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 8008176:	0021      	movs	r1, r4
 8008178:	f7fb fcc2 	bl	8003b00 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 800817c:	7829      	ldrb	r1, [r5, #0]
 800817e:	0022      	movs	r2, r4
 8008180:	9600      	str	r6, [sp, #0]
 8008182:	003b      	movs	r3, r7
 8008184:	f7ff fd8e 	bl	8007ca4 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008188:	0032      	movs	r2, r6
 800818a:	2100      	movs	r1, #0
 800818c:	4806      	ldr	r0, [pc, #24]	; (80081a8 <SendMessageToModule+0x44>)
 800818e:	f00a fa03 	bl	8012598 <memset>
}
 8008192:	2000      	movs	r0, #0
 8008194:	b003      	add	sp, #12
 8008196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008198:	0013      	movs	r3, r2
 800819a:	000a      	movs	r2, r1
 800819c:	21ff      	movs	r1, #255	; 0xff
 800819e:	f7ff ff9b 	bl	80080d8 <BroadcastMessage>
 80081a2:	e7f6      	b.n	8008192 <SendMessageToModule+0x2e>
 80081a4:	20000a98 	.word	0x20000a98
 80081a8:	20000b3c 	.word	0x20000b3c

080081ac <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	4657      	mov	r7, sl
 80081b0:	46de      	mov	lr, fp
 80081b2:	464e      	mov	r6, r9
 80081b4:	4645      	mov	r5, r8
 80081b6:	b5e0      	push	{r5, r6, r7, lr}
 80081b8:	b08f      	sub	sp, #60	; 0x3c
 80081ba:	001e      	movs	r6, r3
 80081bc:	ab18      	add	r3, sp, #96	; 0x60
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	4693      	mov	fp, r2
 80081c2:	469a      	mov	sl, r3
 80081c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80081c6:	781a      	ldrb	r2, [r3, #0]
 80081c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081ca:	000f      	movs	r7, r1
 80081cc:	0e19      	lsrs	r1, r3, #24
 80081ce:	0c1b      	lsrs	r3, r3, #16
 80081d0:	b2dc      	uxtb	r4, r3
 80081d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081d4:	4684      	mov	ip, r0
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	b2dd      	uxtb	r5, r3
 80081da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081dc:	900d      	str	r0, [sp, #52]	; 0x34
 80081de:	0e1b      	lsrs	r3, r3, #24
 80081e0:	0018      	movs	r0, r3
 80081e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081e6:	9206      	str	r2, [sp, #24]
 80081e8:	0c1b      	lsrs	r3, r3, #16
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	9307      	str	r3, [sp, #28]
 80081ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081f0:	9109      	str	r1, [sp, #36]	; 0x24
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80081f8:	4b47      	ldr	r3, [pc, #284]	; (8008318 <StartScastDMAStream+0x16c>)
 80081fa:	940a      	str	r4, [sp, #40]	; 0x28
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	950c      	str	r5, [sp, #48]	; 0x30
 8008200:	42bb      	cmp	r3, r7
 8008202:	d16d      	bne.n	80082e0 <StartScastDMAStream+0x134>
 8008204:	231a      	movs	r3, #26
 8008206:	4698      	mov	r8, r3
 8008208:	4d44      	ldr	r5, [pc, #272]	; (800831c <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800820a:	4c45      	ldr	r4, [pc, #276]	; (8008320 <StartScastDMAStream+0x174>)
 800820c:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 800820e:	0031      	movs	r1, r6
 8008210:	0038      	movs	r0, r7
 8008212:	f7fb fc75 	bl	8003b00 <FindRoute>
		if(route[i]){
 8008216:	7868      	ldrb	r0, [r5, #1]
 8008218:	2800      	cmp	r0, #0
 800821a:	d035      	beq.n	8008288 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 800821c:	78a9      	ldrb	r1, [r5, #2]
 800821e:	2900      	cmp	r1, #0
 8008220:	d100      	bne.n	8008224 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8008222:	0039      	movs	r1, r7
 8008224:	f7fb fc6c 	bl	8003b00 <FindRoute>
			FindRoute(srcM,dstM);
 8008228:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 800822a:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 800822c:	0038      	movs	r0, r7
 800822e:	f7fb fc67 	bl	8003b00 <FindRoute>
			if(route[i] == dstM){
 8008232:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8008234:	465b      	mov	r3, fp
			if(route[i] == dstM){
 8008236:	42b0      	cmp	r0, r6
 8008238:	d003      	beq.n	8008242 <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 800823a:	7829      	ldrb	r1, [r5, #0]
 800823c:	f7fb fc60 	bl	8003b00 <FindRoute>
 8008240:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008242:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8008244:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008246:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 800824a:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 800824c:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 800824e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8008250:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8008252:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8008254:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8008256:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8008258:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800825a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 800825c:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800825e:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008260:	9a07      	ldr	r2, [sp, #28]
 8008262:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008264:	9a08      	ldr	r2, [sp, #32]
 8008266:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8008268:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800826a:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 800826c:	4652      	mov	r2, sl
 800826e:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008270:	464a      	mov	r2, r9
 8008272:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8008274:	f7fb fc44 	bl	8003b00 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008278:	7868      	ldrb	r0, [r5, #1]
 800827a:	220c      	movs	r2, #12
 800827c:	211b      	movs	r1, #27
 800827e:	f7ff ff71 	bl	8008164 <SendMessageToModule>
			osDelay(10);
 8008282:	200a      	movs	r0, #10
 8008284:	f004 fee6 	bl	800d054 <osDelay>
 8008288:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 800828a:	4545      	cmp	r5, r8
 800828c:	d1bf      	bne.n	800820e <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 800828e:	42b7      	cmp	r7, r6
 8008290:	d112      	bne.n	80082b8 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008292:	465b      	mov	r3, fp
 8008294:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	9919      	ldr	r1, [sp, #100]	; 0x64
 800829a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829c:	4650      	mov	r0, sl
 800829e:	f7ff fc0d 	bl	8007abc <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 80082a2:	9b06      	ldr	r3, [sp, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10d      	bne.n	80082c4 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80082a8:	2000      	movs	r0, #0
 80082aa:	b00f      	add	sp, #60	; 0x3c
 80082ac:	bc3c      	pop	{r2, r3, r4, r5}
 80082ae:	4690      	mov	r8, r2
 80082b0:	4699      	mov	r9, r3
 80082b2:	46a2      	mov	sl, r4
 80082b4:	46ab      	mov	fp, r5
 80082b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 80082b8:	0031      	movs	r1, r6
 80082ba:	0038      	movs	r0, r7
 80082bc:	f7fb fc20 	bl	8003b00 <FindRoute>
 80082c0:	4683      	mov	fp, r0
 80082c2:	e7e6      	b.n	8008292 <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 80082c4:	2300      	movs	r3, #0
 80082c6:	9304      	str	r3, [sp, #16]
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	465b      	mov	r3, fp
 80082d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80082d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d8:	4650      	mov	r0, sl
 80082da:	f7fb f933 	bl	8003544 <SaveEEstreams>
 80082de:	e7e3      	b.n	80082a8 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082e0:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <StartScastDMAStream+0x174>)
 80082e2:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082e4:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 80082e6:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082e8:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082ea:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80082ec:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082ee:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80082f0:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082f2:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80082f4:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80082f6:	4651      	mov	r1, sl
 80082f8:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80082fa:	4661      	mov	r1, ip
 80082fc:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80082fe:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 8008300:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 8008302:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008304:	220d      	movs	r2, #13
 8008306:	211c      	movs	r1, #28
 8008308:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 800830a:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800830c:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 800830e:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008310:	f7ff ff28 	bl	8008164 <SendMessageToModule>
		return result;
 8008314:	e7c8      	b.n	80082a8 <StartScastDMAStream+0xfc>
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	20000a98 	.word	0x20000a98
 800831c:	20006d47 	.word	0x20006d47
 8008320:	20000b3c 	.word	0x20000b3c

08008324 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008324:	4b4e      	ldr	r3, [pc, #312]	; (8008460 <BackEndTask+0x13c>)
 8008326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008328:	4657      	mov	r7, sl
 800832a:	46de      	mov	lr, fp
 800832c:	464e      	mov	r6, r9
 800832e:	4645      	mov	r5, r8
 8008330:	4699      	mov	r9, r3
 8008332:	4b4c      	ldr	r3, [pc, #304]	; (8008464 <BackEndTask+0x140>)
 8008334:	b5e0      	push	{r5, r6, r7, lr}
 8008336:	469b      	mov	fp, r3
 8008338:	4b4b      	ldr	r3, [pc, #300]	; (8008468 <BackEndTask+0x144>)
 800833a:	4f4c      	ldr	r7, [pc, #304]	; (800846c <BackEndTask+0x148>)
 800833c:	4698      	mov	r8, r3
 800833e:	4b4c      	ldr	r3, [pc, #304]	; (8008470 <BackEndTask+0x14c>)
 8008340:	b083      	sub	sp, #12
 8008342:	469a      	mov	sl, r3


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008344:	464b      	mov	r3, r9
 8008346:	4a4b      	ldr	r2, [pc, #300]	; (8008474 <BackEndTask+0x150>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	7812      	ldrb	r2, [r2, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d054      	beq.n	80083fa <BackEndTask+0xd6>
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008350:	4a49      	ldr	r2, [pc, #292]	; (8008478 <BackEndTask+0x154>)
			port_index = port_number - 1;
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008352:	2048      	movs	r0, #72	; 0x48
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008354:	5cd3      	ldrb	r3, [r2, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008356:	255a      	movs	r5, #90	; 0x5a
			port_index = port_number - 1;
 8008358:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800835a:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 800835c:	465b      	mov	r3, fp
			port_index = port_number - 1;
 800835e:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008360:	5d19      	ldrb	r1, [r3, r4]
 8008362:	00a6      	lsls	r6, r4, #2
 8008364:	00cb      	lsls	r3, r1, #3
 8008366:	1a59      	subs	r1, r3, r1
 8008368:	1933      	adds	r3, r6, r4
 800836a:	00da      	lsls	r2, r3, #3
 800836c:	1ad2      	subs	r2, r2, r3
 800836e:	00c9      	lsls	r1, r1, #3
 8008370:	00d2      	lsls	r2, r2, #3
 8008372:	188b      	adds	r3, r1, r2
 8008374:	54f8      	strb	r0, [r7, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008376:	18f8      	adds	r0, r7, r3
 8008378:	7045      	strb	r5, [r0, #1]

			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800837a:	7885      	ldrb	r5, [r0, #2]

			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800837c:	4640      	mov	r0, r8
 800837e:	5cfb      	ldrb	r3, [r7, r3]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008380:	7085      	strb	r5, [r0, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008382:	7003      	strb	r3, [r0, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 8008384:	235a      	movs	r3, #90	; 0x5a
 8008386:	7043      	strb	r3, [r0, #1]
			for(int i=0;i<length;i++)
 8008388:	2d00      	cmp	r5, #0
 800838a:	d00b      	beq.n	80083a4 <BackEndTask+0x80>
 800838c:	1cd3      	adds	r3, r2, #3
 800838e:	4642      	mov	r2, r8
 8008390:	185b      	adds	r3, r3, r1
 8008392:	3203      	adds	r2, #3
 8008394:	18fb      	adds	r3, r7, r3
 8008396:	1950      	adds	r0, r2, r5
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008398:	7819      	ldrb	r1, [r3, #0]
 800839a:	3301      	adds	r3, #1
 800839c:	7011      	strb	r1, [r2, #0]
 800839e:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 80083a0:	4282      	cmp	r2, r0
 80083a2:	d1f9      	bne.n	8008398 <BackEndTask+0x74>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 80083a4:	1ce9      	adds	r1, r5, #3
 80083a6:	4640      	mov	r0, r8
 80083a8:	f002 fabc 	bl	800a924 <CalculateCRC8>
				length + 3);


			Message_counter++;
 80083ac:	4653      	mov	r3, sl
 80083ae:	4652      	mov	r2, sl
 80083b0:	881b      	ldrh	r3, [r3, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 80083b2:	1936      	adds	r6, r6, r4
			Message_counter++;
 80083b4:	3301      	adds	r3, #1
 80083b6:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 80083b8:	465b      	mov	r3, fp
 80083ba:	5d1b      	ldrb	r3, [r3, r4]
 80083bc:	00f2      	lsls	r2, r6, #3
 80083be:	00d9      	lsls	r1, r3, #3
 80083c0:	1b92      	subs	r2, r2, r6
 80083c2:	1ac9      	subs	r1, r1, r3
 80083c4:	00c9      	lsls	r1, r1, #3
 80083c6:	00d2      	lsls	r2, r2, #3
 80083c8:	188e      	adds	r6, r1, r2
 80083ca:	19be      	adds	r6, r7, r6
 80083cc:	1976      	adds	r6, r6, r5
 80083ce:	78f6      	ldrb	r6, [r6, #3]
 80083d0:	4286      	cmp	r6, r0
 80083d2:	d01d      	beq.n	8008410 <BackEndTask+0xec>


			}
			else
			{
				Rejected_Messages++;
 80083d4:	4652      	mov	r2, sl
 80083d6:	4651      	mov	r1, sl
 80083d8:	8892      	ldrh	r2, [r2, #4]
 80083da:	3201      	adds	r2, #1
 80083dc:	808a      	strh	r2, [r1, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 80083de:	3301      	adds	r3, #1
 80083e0:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d010      	beq.n	8008408 <BackEndTask+0xe4>
			MSG_Buffer_Index_Start[port_index]++;
 80083e6:	465a      	mov	r2, fp
 80083e8:	5513      	strb	r3, [r2, r4]

			Process_Message_Buffer_Index_Start++;
 80083ea:	464b      	mov	r3, r9
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	3301      	adds	r3, #1
 80083f0:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d004      	beq.n	8008400 <BackEndTask+0xdc>
			Process_Message_Buffer_Index_Start++;
 80083f6:	464a      	mov	r2, r9
 80083f8:	7013      	strb	r3, [r2, #0]
		}

		taskYIELD();
 80083fa:	f006 fb7b 	bl	800eaf4 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80083fe:	e7a1      	b.n	8008344 <BackEndTask+0x20>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008400:	464b      	mov	r3, r9
 8008402:	2200      	movs	r2, #0
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e7f8      	b.n	80083fa <BackEndTask+0xd6>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008408:	465b      	mov	r3, fp
 800840a:	2200      	movs	r2, #0
 800840c:	551a      	strb	r2, [r3, r4]
 800840e:	e7ec      	b.n	80083ea <BackEndTask+0xc6>
				Accepted_Messages++;
 8008410:	4653      	mov	r3, sl
 8008412:	4650      	mov	r0, sl
 8008414:	885b      	ldrh	r3, [r3, #2]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008416:	00e6      	lsls	r6, r4, #3
				Accepted_Messages++;
 8008418:	3301      	adds	r3, #1
 800841a:	8043      	strh	r3, [r0, #2]
				messageLength[port_index] =length;
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <BackEndTask+0x158>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 800841e:	3203      	adds	r2, #3
				messageLength[port_index] =length;
 8008420:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008422:	1b36      	subs	r6, r6, r4
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <BackEndTask+0x15c>)
 8008426:	00f6      	lsls	r6, r6, #3
 8008428:	1851      	adds	r1, r2, r1
 800842a:	1998      	adds	r0, r3, r6
 800842c:	002a      	movs	r2, r5
 800842e:	1879      	adds	r1, r7, r1
 8008430:	f00a f8a9 	bl	8012586 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <BackEndTask+0x15c>)
 8008436:	4a13      	ldr	r2, [pc, #76]	; (8008484 <BackEndTask+0x160>)
 8008438:	5d9b      	ldrb	r3, [r3, r6]
 800843a:	7812      	ldrb	r2, [r2, #0]
					NotifyMessagingTask(port_number);
 800843c:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 800843e:	429a      	cmp	r2, r3
 8008440:	d008      	beq.n	8008454 <BackEndTask+0x130>
 8008442:	3302      	adds	r3, #2
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b01      	cmp	r3, #1
 8008448:	d904      	bls.n	8008454 <BackEndTask+0x130>
					ForwardReceivedMessage(port_number);
 800844a:	f7ff fe6b 	bl	8008124 <ForwardReceivedMessage>
 800844e:	465b      	mov	r3, fp
 8008450:	5d1b      	ldrb	r3, [r3, r4]
 8008452:	e7c4      	b.n	80083de <BackEndTask+0xba>
					NotifyMessagingTask(port_number);
 8008454:	f7ff fbfe 	bl	8007c54 <NotifyMessagingTask>
 8008458:	465b      	mov	r3, fp
 800845a:	5d1b      	ldrb	r3, [r3, r4]
 800845c:	e7bf      	b.n	80083de <BackEndTask+0xba>
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	20001180 	.word	0x20001180
 8008464:	20001824 	.word	0x20001824
 8008468:	20006d68 	.word	0x20006d68
 800846c:	2000118c 	.word	0x2000118c
 8008470:	20001fd4 	.word	0x20001fd4
 8008474:	2000117f 	.word	0x2000117f
 8008478:	20001184 	.word	0x20001184
 800847c:	20000c50 	.word	0x20000c50
 8008480:	20000c90 	.word	0x20000c90
 8008484:	20000a98 	.word	0x20000a98

08008488 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008488:	2001      	movs	r0, #1
 800848a:	4770      	bx	lr

0800848c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848e:	464e      	mov	r6, r9
 8008490:	46de      	mov	lr, fp
 8008492:	4645      	mov	r5, r8
 8008494:	4657      	mov	r7, sl
 8008496:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 8008498:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 800849a:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 800849c:	930d      	str	r3, [sp, #52]	; 0x34
 800849e:	23ff      	movs	r3, #255	; 0xff
 80084a0:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 80084a2:	1e5c      	subs	r4, r3, #1
 80084a4:	930a      	str	r3, [sp, #40]	; 0x28
 80084a6:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80084a8:	4ae3      	ldr	r2, [pc, #908]	; (8008838 <PxMessagingTask+0x3ac>)
 80084aa:	9306      	str	r3, [sp, #24]
 80084ac:	1b1b      	subs	r3, r3, r4
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4693      	mov	fp, r2
 80084b2:	001a      	movs	r2, r3
 80084b4:	445a      	add	r2, fp
 80084b6:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 80084b8:	2200      	movs	r2, #0
 80084ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80084bc:	4adf      	ldr	r2, [pc, #892]	; (800883c <PxMessagingTask+0x3b0>)
 80084be:	930e      	str	r3, [sp, #56]	; 0x38
 80084c0:	4691      	mov	r9, r2
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	3305      	adds	r3, #5
 80084c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80084c8:	4bdd      	ldr	r3, [pc, #884]	; (8008840 <PxMessagingTask+0x3b4>)
	BOS_Status result =BOS_OK;
 80084ca:	2600      	movs	r6, #0
 80084cc:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80084ce:	2338      	movs	r3, #56	; 0x38
 80084d0:	4363      	muls	r3, r4
 80084d2:	9216      	str	r2, [sp, #88]	; 0x58
 80084d4:	445b      	add	r3, fp
 80084d6:	00a2      	lsls	r2, r4, #2
 80084d8:	9210      	str	r2, [sp, #64]	; 0x40
 80084da:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80084dc:	2101      	movs	r1, #1
 80084de:	2001      	movs	r0, #1
 80084e0:	4249      	negs	r1, r1
 80084e2:	f006 f86f 	bl	800e5c4 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 80084e6:	464b      	mov	r3, r9
 80084e8:	5d1f      	ldrb	r7, [r3, r4]
 80084ea:	2f00      	cmp	r7, #0
 80084ec:	d100      	bne.n	80084f0 <PxMessagingTask+0x64>
 80084ee:	e085      	b.n	80085fc <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 80084f0:	9b06      	ldr	r3, [sp, #24]
 80084f2:	1b1b      	subs	r3, r3, r4
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	445b      	add	r3, fp
 80084f8:	7899      	ldrb	r1, [r3, #2]
 80084fa:	b24b      	sxtb	r3, r1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da01      	bge.n	8008504 <PxMessagingTask+0x78>
 8008500:	f000 fcc7 	bl	8008e92 <PxMessagingTask+0xa06>
				longMessage =0;
 8008504:	2300      	movs	r3, #0
 8008506:	4acf      	ldr	r2, [pc, #828]	; (8008844 <PxMessagingTask+0x3b8>)
 8008508:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 800850a:	465a      	mov	r2, fp
 800850c:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800850e:	4fce      	ldr	r7, [pc, #824]	; (8008848 <PxMessagingTask+0x3bc>)
			dst =cMessage[port - 1][0];
 8008510:	1b1b      	subs	r3, r3, r4
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 8008516:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 8008518:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 800851a:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800851c:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800851e:	4692      	mov	sl, r2
 8008520:	2201      	movs	r2, #1
 8008522:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008524:	0f80      	lsrs	r0, r0, #30
 8008526:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008528:	0908      	lsrs	r0, r1, #4
 800852a:	400d      	ands	r5, r1
 800852c:	4002      	ands	r2, r0
 800852e:	46ac      	mov	ip, r5
 8008530:	b2d0      	uxtb	r0, r2
 8008532:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008534:	2260      	movs	r2, #96	; 0x60
 8008536:	4463      	add	r3, ip
 8008538:	400a      	ands	r2, r1
 800853a:	950c      	str	r5, [sp, #48]	; 0x30
 800853c:	703a      	strb	r2, [r7, #0]
 800853e:	002a      	movs	r2, r5
 8008540:	78dd      	ldrb	r5, [r3, #3]
 8008542:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 8008544:	0789      	lsls	r1, r1, #30
 8008546:	d507      	bpl.n	8008558 <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008548:	46ac      	mov	ip, r5
 800854a:	791b      	ldrb	r3, [r3, #4]
				++shift;
 800854c:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	4463      	add	r3, ip
 8008552:	b29b      	uxth	r3, r3
 8008554:	9308      	str	r3, [sp, #32]
				++shift;
 8008556:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 8008558:	2800      	cmp	r0, #0
 800855a:	d007      	beq.n	800856c <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 800855c:	2300      	movs	r3, #0
 800855e:	4aba      	ldr	r2, [pc, #744]	; (8008848 <PxMessagingTask+0x3bc>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008560:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 8008562:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008564:	4650      	mov	r0, sl
 8008566:	2200      	movs	r2, #0
 8008568:	f7ff fdfc 	bl	8008164 <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800856c:	9a07      	ldr	r2, [sp, #28]
 800856e:	1e53      	subs	r3, r2, #1
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2bfc      	cmp	r3, #252	; 0xfc
 8008574:	d801      	bhi.n	800857a <PxMessagingTask+0xee>
 8008576:	f000 fc71 	bl	8008e5c <PxMessagingTask+0x9d0>
 800857a:	464b      	mov	r3, r9
 800857c:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	2bff      	cmp	r3, #255	; 0xff
 8008582:	d001      	beq.n	8008588 <PxMessagingTask+0xfc>
 8008584:	f000 fcb5 	bl	8008ef2 <PxMessagingTask+0xa66>
 8008588:	9b06      	ldr	r3, [sp, #24]
 800858a:	4ab0      	ldr	r2, [pc, #704]	; (800884c <PxMessagingTask+0x3c0>)
 800858c:	1b1d      	subs	r5, r3, r4
 800858e:	00ed      	lsls	r5, r5, #3
 8008590:	445d      	add	r5, fp
 8008592:	19eb      	adds	r3, r5, r7
 8008594:	3b01      	subs	r3, #1
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 800859a:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800859c:	429a      	cmp	r2, r3
 800859e:	d02d      	beq.n	80085fc <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80085a0:	4aaa      	ldr	r2, [pc, #680]	; (800884c <PxMessagingTask+0x3c0>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80085a2:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80085a4:	7193      	strb	r3, [r2, #6]
 80085a6:	4aaa      	ldr	r2, [pc, #680]	; (8008850 <PxMessagingTask+0x3c4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80085a8:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80085aa:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80085ac:	f7ff fd76 	bl	800809c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80085b0:	464b      	mov	r3, r9
 80085b2:	5d1f      	ldrb	r7, [r3, r4]
 80085b4:	2300      	movs	r3, #0
 80085b6:	19ed      	adds	r5, r5, r7
 80085b8:	3d01      	subs	r5, #1
 80085ba:	702b      	strb	r3, [r5, #0]
				shift +=4;
 80085bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085be:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 80085c0:	1b7a      	subs	r2, r7, r5
 80085c2:	b2d3      	uxtb	r3, r2
 80085c4:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	2b2d      	cmp	r3, #45	; 0x2d
 80085ca:	d901      	bls.n	80085d0 <PxMessagingTask+0x144>
 80085cc:	f000 fc79 	bl	8008ec2 <PxMessagingTask+0xa36>
 80085d0:	4aa0      	ldr	r2, [pc, #640]	; (8008854 <PxMessagingTask+0x3c8>)
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	58d3      	ldr	r3, [r2, r3]
 80085d6:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80085d8:	9b06      	ldr	r3, [sp, #24]
 80085da:	1b1b      	subs	r3, r3, r4
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	445b      	add	r3, fp
 80085e0:	5d5b      	ldrb	r3, [r3, r5]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <PxMessagingTask+0x15e>
 80085e6:	f000 fd6d 	bl	80090c4 <PxMessagingTask+0xc38>
								myID =cMessage[port - 1][1 + shift];
 80085ea:	9b05      	ldr	r3, [sp, #20]
 80085ec:	4a9a      	ldr	r2, [pc, #616]	; (8008858 <PxMessagingTask+0x3cc>)
 80085ee:	469c      	mov	ip, r3
 80085f0:	4465      	add	r5, ip
 80085f2:	786b      	ldrb	r3, [r5, #1]
 80085f4:	7013      	strb	r3, [r2, #0]
 80085f6:	464b      	mov	r3, r9
 80085f8:	2600      	movs	r6, #0
 80085fa:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80085fc:	003a      	movs	r2, r7
 80085fe:	2100      	movs	r1, #0
 8008600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008602:	f009 ffc9 	bl	8012598 <memset>
		messageLength[port - 1] =0;
 8008606:	464b      	mov	r3, r9
 8008608:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800860a:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 800860c:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800860e:	4b93      	ldr	r3, [pc, #588]	; (800885c <PxMessagingTask+0x3d0>)
 8008610:	5c5b      	ldrb	r3, [r3, r1]
 8008612:	3b02      	subs	r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d901      	bls.n	800861c <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 8008618:	4b90      	ldr	r3, [pc, #576]	; (800885c <PxMessagingTask+0x3d0>)
 800861a:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800861c:	f006 fa6a 	bl	800eaf4 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008620:	e75c      	b.n	80084dc <PxMessagingTask+0x50>
 8008622:	2308      	movs	r3, #8
 8008624:	469a      	mov	sl, r3
 8008626:	3301      	adds	r3, #1
 8008628:	469c      	mov	ip, r3
 800862a:	44ac      	add	ip, r5
 800862c:	4663      	mov	r3, ip
 800862e:	9308      	str	r3, [sp, #32]
 8008630:	230a      	movs	r3, #10
 8008632:	469c      	mov	ip, r3
 8008634:	44ac      	add	ip, r5
 8008636:	4663      	mov	r3, ip
 8008638:	930c      	str	r3, [sp, #48]	; 0x30
 800863a:	230b      	movs	r3, #11
 800863c:	469c      	mov	ip, r3
 800863e:	44ac      	add	ip, r5
 8008640:	4663      	mov	r3, ip
 8008642:	9307      	str	r3, [sp, #28]
 8008644:	230c      	movs	r3, #12
 8008646:	469c      	mov	ip, r3
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	1da8      	adds	r0, r5, #6
 800864c:	1b1b      	subs	r3, r3, r4
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	445b      	add	r3, fp
 8008652:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 8008654:	5d5b      	ldrb	r3, [r3, r5]
 8008656:	1def      	adds	r7, r5, #7
 8008658:	44aa      	add	sl, r5
 800865a:	44ac      	add	ip, r5
 800865c:	7852      	ldrb	r2, [r2, #1]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <PxMessagingTask+0x1da>
 8008662:	f000 fd01 	bl	8009068 <PxMessagingTask+0xbdc>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <PxMessagingTask+0x1e2>
 800866a:	f000 fccf 	bl	800900c <PxMessagingTask+0xb80>
 800866e:	2b02      	cmp	r3, #2
 8008670:	d10c      	bne.n	800868c <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	1959      	adds	r1, r3, r5
 8008676:	788b      	ldrb	r3, [r1, #2]
 8008678:	78c8      	ldrb	r0, [r1, #3]
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	0400      	lsls	r0, r0, #16
 800867e:	181b      	adds	r3, r3, r0
 8008680:	189a      	adds	r2, r3, r2
 8008682:	790b      	ldrb	r3, [r1, #4]
 8008684:	061b      	lsls	r3, r3, #24
 8008686:	18d2      	adds	r2, r2, r3
 8008688:	4b75      	ldr	r3, [pc, #468]	; (8008860 <PxMessagingTask+0x3d4>)
 800868a:	625a      	str	r2, [r3, #36]	; 0x24
							ADCPort =cMessage[port - 1][shift];
 800868c:	9b06      	ldr	r3, [sp, #24]
 800868e:	4a74      	ldr	r2, [pc, #464]	; (8008860 <PxMessagingTask+0x3d4>)
 8008690:	1b1b      	subs	r3, r3, r4
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	445b      	add	r3, fp
 8008696:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 8008698:	195b      	adds	r3, r3, r5
 800869a:	785b      	ldrb	r3, [r3, #1]
							ADCPort =cMessage[port - 1][shift];
 800869c:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 800869e:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <PxMessagingTask+0x21c>
 80086a4:	f000 fc7e 	bl	8008fa4 <PxMessagingTask+0xb18>
							else if(1 == ADCSide){
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d10a      	bne.n	80086c2 <PxMessagingTask+0x236>
								ADCSelectChannel(ADCPort,"bottom");
 80086ac:	496d      	ldr	r1, [pc, #436]	; (8008864 <PxMessagingTask+0x3d8>)
 80086ae:	f003 f9f7 	bl	800baa0 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 80086b2:	4b6b      	ldr	r3, [pc, #428]	; (8008860 <PxMessagingTask+0x3d4>)
 80086b4:	4a6a      	ldr	r2, [pc, #424]	; (8008860 <PxMessagingTask+0x3d4>)
 80086b6:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 80086b8:	3234      	adds	r2, #52	; 0x34
 80086ba:	b2c0      	uxtb	r0, r0
 80086bc:	4969      	ldr	r1, [pc, #420]	; (8008864 <PxMessagingTask+0x3d8>)
 80086be:	f003 fa47 	bl	800bb50 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80086c2:	4967      	ldr	r1, [pc, #412]	; (8008860 <PxMessagingTask+0x3d4>)
 80086c4:	4866      	ldr	r0, [pc, #408]	; (8008860 <PxMessagingTask+0x3d4>)
 80086c6:	3138      	adds	r1, #56	; 0x38
 80086c8:	303c      	adds	r0, #60	; 0x3c
 80086ca:	f003 f817 	bl	800b6fc <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 80086ce:	9b06      	ldr	r3, [sp, #24]
 80086d0:	1b1e      	subs	r6, r3, r4
 80086d2:	4b63      	ldr	r3, [pc, #396]	; (8008860 <PxMessagingTask+0x3d4>)
 80086d4:	00f6      	lsls	r6, r6, #3
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086d6:	0019      	movs	r1, r3
							ADCPort =cMessage[port - 1][shift];
 80086d8:	445e      	add	r6, fp
 80086da:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086dc:	3140      	adds	r1, #64	; 0x40
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086de:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 80086e0:	8618      	strh	r0, [r3, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086e2:	f003 f8d9 	bl	800b898 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086e6:	79ab      	ldrb	r3, [r5, #6]
 80086e8:	79ea      	ldrb	r2, [r5, #7]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	0412      	lsls	r2, r2, #16
 80086ee:	189b      	adds	r3, r3, r2
 80086f0:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80086f2:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086f4:	189b      	adds	r3, r3, r2
 80086f6:	7a2a      	ldrb	r2, [r5, #8]
 80086f8:	0612      	lsls	r2, r2, #24
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	4a58      	ldr	r2, [pc, #352]	; (8008860 <PxMessagingTask+0x3d4>)
 80086fe:	6293      	str	r3, [r2, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008700:	7aab      	ldrb	r3, [r5, #10]
 8008702:	7aea      	ldrb	r2, [r5, #11]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	0412      	lsls	r2, r2, #16
 8008708:	189b      	adds	r3, r3, r2
 800870a:	7a6a      	ldrb	r2, [r5, #9]
 800870c:	189b      	adds	r3, r3, r2
 800870e:	7b2a      	ldrb	r2, [r5, #12]
 8008710:	0612      	lsls	r2, r2, #24
 8008712:	189b      	adds	r3, r3, r2
 8008714:	4a52      	ldr	r2, [pc, #328]	; (8008860 <PxMessagingTask+0x3d4>)
 8008716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008718:	464b      	mov	r3, r9
 800871a:	5d1f      	ldrb	r7, [r3, r4]
 800871c:	e76e      	b.n	80085fc <PxMessagingTask+0x170>
							rejected_FLAG =1;
 800871e:	2301      	movs	r3, #1
 8008720:	4a51      	ldr	r2, [pc, #324]	; (8008868 <PxMessagingTask+0x3dc>)
 8008722:	7013      	strb	r3, [r2, #0]
 8008724:	e767      	b.n	80085f6 <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 8008726:	2301      	movs	r3, #1
 8008728:	4a50      	ldr	r2, [pc, #320]	; (800886c <PxMessagingTask+0x3e0>)
 800872a:	2600      	movs	r6, #0
 800872c:	7013      	strb	r3, [r2, #0]
 800872e:	464b      	mov	r3, r9
 8008730:	5d1f      	ldrb	r7, [r3, r4]
 8008732:	e763      	b.n	80085fc <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8008734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008738:	469c      	mov	ip, r3
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	1c69      	adds	r1, r5, #1
 800873e:	1b1b      	subs	r3, r3, r4
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	445b      	add	r3, fp
 8008744:	5d58      	ldrb	r0, [r3, r5]
 8008746:	230a      	movs	r3, #10
 8008748:	4461      	add	r1, ip
 800874a:	3a01      	subs	r2, #1
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	b292      	uxth	r2, r2
 8008750:	4459      	add	r1, fp
 8008752:	f004 faeb 	bl	800cd2c <writePxMutex>
 8008756:	464b      	mov	r3, r9
 8008758:	2600      	movs	r6, #0
 800875a:	5d1f      	ldrb	r7, [r3, r4]
 800875c:	e74e      	b.n	80085fc <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800875e:	9b06      	ldr	r3, [sp, #24]
 8008760:	1b1b      	subs	r3, r3, r4
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	445b      	add	r3, fp
 8008766:	5d5b      	ldrb	r3, [r3, r5]
 8008768:	4a41      	ldr	r2, [pc, #260]	; (8008870 <PxMessagingTask+0x3e4>)
 800876a:	2600      	movs	r6, #0
 800876c:	7013      	strb	r3, [r2, #0]
 800876e:	464b      	mov	r3, r9
 8008770:	5d1f      	ldrb	r7, [r3, r4]
 8008772:	e743      	b.n	80085fc <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 8008774:	2300      	movs	r3, #0
 8008776:	4a3e      	ldr	r2, [pc, #248]	; (8008870 <PxMessagingTask+0x3e4>)
 8008778:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800877a:	9b06      	ldr	r3, [sp, #24]
 800877c:	1b1b      	subs	r3, r3, r4
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	445b      	add	r3, fp
 8008782:	5d5e      	ldrb	r6, [r3, r5]
 8008784:	2e00      	cmp	r6, #0
 8008786:	d101      	bne.n	800878c <PxMessagingTask+0x300>
 8008788:	f000 ff54 	bl	8009634 <PxMessagingTask+0x11a8>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800878c:	2e1e      	cmp	r6, #30
 800878e:	d901      	bls.n	8008794 <PxMessagingTask+0x308>
 8008790:	f000 ff4c 	bl	800962c <PxMessagingTask+0x11a0>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008794:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008796:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008798:	0592      	lsls	r2, r2, #22
 800879a:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800879c:	1c6a      	adds	r2, r5, #1
 800879e:	5c8f      	ldrb	r7, [r1, r2]
 80087a0:	9207      	str	r2, [sp, #28]
 80087a2:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80087a4:	3e01      	subs	r6, #1
 80087a6:	4b33      	ldr	r3, [pc, #204]	; (8008874 <PxMessagingTask+0x3e8>)
 80087a8:	00b6      	lsls	r6, r6, #2
 80087aa:	599b      	ldr	r3, [r3, r6]
 80087ac:	0c18      	lsrs	r0, r3, #16
 80087ae:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 80087b0:	1e7a      	subs	r2, r7, #1
 80087b2:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80087b4:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80087b6:	2a07      	cmp	r2, #7
 80087b8:	d901      	bls.n	80087be <PxMessagingTask+0x332>
 80087ba:	f000 fdbd 	bl	8009338 <PxMessagingTask+0xeac>
 80087be:	492e      	ldr	r1, [pc, #184]	; (8008878 <PxMessagingTask+0x3ec>)
 80087c0:	0092      	lsls	r2, r2, #2
 80087c2:	588a      	ldr	r2, [r1, r2]
 80087c4:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80087c6:	2202      	movs	r2, #2
 80087c8:	4252      	negs	r2, r2
 80087ca:	17d3      	asrs	r3, r2, #31
 80087cc:	4641      	mov	r1, r8
 80087ce:	6808      	ldr	r0, [r1, #0]
 80087d0:	6849      	ldr	r1, [r1, #4]
 80087d2:	1812      	adds	r2, r2, r0
 80087d4:	414b      	adcs	r3, r1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <PxMessagingTask+0x352>
 80087da:	f000 fcb7 	bl	800914c <PxMessagingTask+0xcc0>
 80087de:	464b      	mov	r3, r9
 80087e0:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80087e2:	4b23      	ldr	r3, [pc, #140]	; (8008870 <PxMessagingTask+0x3e4>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b10      	cmp	r3, #16
 80087e8:	d101      	bne.n	80087ee <PxMessagingTask+0x362>
 80087ea:	f000 fcac 	bl	8009146 <PxMessagingTask+0xcba>
								responseStatus =BOS_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <PxMessagingTask+0x3e4>)
 80087f2:	2600      	movs	r6, #0
 80087f4:	7013      	strb	r3, [r2, #0]
 80087f6:	e701      	b.n	80085fc <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	1b1b      	subs	r3, r3, r4
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	445b      	add	r3, fp
 8008800:	5d5b      	ldrb	r3, [r3, r5]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <PxMessagingTask+0x37e>
 8008806:	f000 fd6a 	bl	80092de <PxMessagingTask+0xe52>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800880a:	9b05      	ldr	r3, [sp, #20]
 800880c:	469c      	mov	ip, r3
 800880e:	4465      	add	r5, ip
 8008810:	78ab      	ldrb	r3, [r5, #2]
 8008812:	78ea      	ldrb	r2, [r5, #3]
 8008814:	061b      	lsls	r3, r3, #24
 8008816:	0412      	lsls	r2, r2, #16
 8008818:	189b      	adds	r3, r3, r2
 800881a:	796a      	ldrb	r2, [r5, #5]
 800881c:	189b      	adds	r3, r3, r2
 800881e:	792a      	ldrb	r2, [r5, #4]
 8008820:	0212      	lsls	r2, r2, #8
 8008822:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008824:	786a      	ldrb	r2, [r5, #1]
 8008826:	3a01      	subs	r2, #1
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	2a07      	cmp	r2, #7
 800882c:	d900      	bls.n	8008830 <PxMessagingTask+0x3a4>
 800882e:	e6e2      	b.n	80085f6 <PxMessagingTask+0x16a>
 8008830:	4912      	ldr	r1, [pc, #72]	; (800887c <PxMessagingTask+0x3f0>)
 8008832:	0092      	lsls	r2, r2, #2
 8008834:	588a      	ldr	r2, [r1, r2]
 8008836:	4697      	mov	pc, r2
 8008838:	20000c90 	.word	0x20000c90
 800883c:	20000c50 	.word	0x20000c50
 8008840:	20000c40 	.word	0x20000c40
 8008844:	20000c4c 	.word	0x20000c4c
 8008848:	20006c00 	.word	0x20006c00
 800884c:	20001fd4 	.word	0x20001fd4
 8008850:	20000c48 	.word	0x20000c48
 8008854:	0801714c 	.word	0x0801714c
 8008858:	20000a98 	.word	0x20000a98
 800885c:	20000c2c 	.word	0x20000c2c
 8008860:	20002054 	.word	0x20002054
 8008864:	08018090 	.word	0x08018090
 8008868:	2000117c 	.word	0x2000117c
 800886c:	2000117d 	.word	0x2000117d
 8008870:	20000c3c 	.word	0x20000c3c
 8008874:	20006c08 	.word	0x20006c08
 8008878:	08017204 	.word	0x08017204
 800887c:	08017224 	.word	0x08017224
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008880:	9b06      	ldr	r3, [sp, #24]
 8008882:	49dd      	ldr	r1, [pc, #884]	; (8008bf8 <PxMessagingTask+0x76c>)
 8008884:	1b18      	subs	r0, r3, r4
 8008886:	00c0      	lsls	r0, r0, #3
 8008888:	7809      	ldrb	r1, [r1, #0]
 800888a:	4458      	add	r0, fp
 800888c:	1942      	adds	r2, r0, r5
 800888e:	468c      	mov	ip, r1
 8008890:	7a51      	ldrb	r1, [r2, #9]
 8008892:	7ad7      	ldrb	r7, [r2, #11]
 8008894:	468a      	mov	sl, r1
 8008896:	7b11      	ldrb	r1, [r2, #12]
 8008898:	7a93      	ldrb	r3, [r2, #10]
 800889a:	000e      	movs	r6, r1
 800889c:	1e71      	subs	r1, r6, #1
 800889e:	418e      	sbcs	r6, r1
 80088a0:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80088a2:	7916      	ldrb	r6, [r2, #4]
 80088a4:	7951      	ldrb	r1, [r2, #5]
 80088a6:	0636      	lsls	r6, r6, #24
 80088a8:	0409      	lsls	r1, r1, #16
 80088aa:	1871      	adds	r1, r6, r1
 80088ac:	79d6      	ldrb	r6, [r2, #7]
 80088ae:	1989      	adds	r1, r1, r6
 80088b0:	7996      	ldrb	r6, [r2, #6]
 80088b2:	0236      	lsls	r6, r6, #8
 80088b4:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80088b6:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80088b8:	5d41      	ldrb	r1, [r0, r5]
 80088ba:	78d0      	ldrb	r0, [r2, #3]
 80088bc:	0609      	lsls	r1, r1, #24
 80088be:	1809      	adds	r1, r1, r0
 80088c0:	7850      	ldrb	r0, [r2, #1]
 80088c2:	0400      	lsls	r0, r0, #16
 80088c4:	1809      	adds	r1, r1, r0
 80088c6:	7890      	ldrb	r0, [r2, #2]
 80088c8:	0200      	lsls	r0, r0, #8
 80088ca:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80088cc:	9101      	str	r1, [sp, #4]
 80088ce:	7a12      	ldrb	r2, [r2, #8]
 80088d0:	4661      	mov	r1, ip
 80088d2:	9200      	str	r2, [sp, #0]
 80088d4:	4650      	mov	r0, sl
 80088d6:	003a      	movs	r2, r7
 80088d8:	f7ff fc68 	bl	80081ac <StartScastDMAStream>
 80088dc:	e68b      	b.n	80085f6 <PxMessagingTask+0x16a>
							SaveToRO();
 80088de:	f001 f851 	bl	8009984 <SaveToRO>
							SaveEEportsDir();
 80088e2:	f7fa fdc3 	bl	800346c <SaveEEportsDir>
							indMode =IND_PING;
 80088e6:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 80088e8:	4ac4      	ldr	r2, [pc, #784]	; (8008bfc <PxMessagingTask+0x770>)
 80088ea:	2600      	movs	r6, #0
 80088ec:	7013      	strb	r3, [r2, #0]
 80088ee:	464b      	mov	r3, r9
 80088f0:	5d1f      	ldrb	r7, [r3, r4]
 80088f2:	e683      	b.n	80085fc <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 80088f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01d      	beq.n	8008936 <PxMessagingTask+0x4aa>
 80088fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088fc:	4659      	mov	r1, fp
 80088fe:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008900:	4652      	mov	r2, sl
 8008902:	1970      	adds	r0, r6, r5
 8008904:	2680      	movs	r6, #128	; 0x80
 8008906:	3101      	adds	r1, #1
 8008908:	4461      	add	r1, ip
 800890a:	194d      	adds	r5, r1, r5
 800890c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800890e:	3a01      	subs	r2, #1
 8008910:	4bbb      	ldr	r3, [pc, #748]	; (8008c00 <PxMessagingTask+0x774>)
 8008912:	0052      	lsls	r2, r2, #1
 8008914:	3901      	subs	r1, #1
 8008916:	b2c9      	uxtb	r1, r1
 8008918:	5a9b      	ldrh	r3, [r3, r2]
 800891a:	4458      	add	r0, fp
 800891c:	186d      	adds	r5, r5, r1
 800891e:	0236      	lsls	r6, r6, #8
 8008920:	0037      	movs	r7, r6
 8008922:	7801      	ldrb	r1, [r0, #0]
 8008924:	3001      	adds	r0, #1
 8008926:	3901      	subs	r1, #1
 8008928:	410f      	asrs	r7, r1
 800892a:	433b      	orrs	r3, r7
 800892c:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800892e:	4285      	cmp	r5, r0
 8008930:	d1f6      	bne.n	8008920 <PxMessagingTask+0x494>
 8008932:	49b3      	ldr	r1, [pc, #716]	; (8008c00 <PxMessagingTask+0x774>)
 8008934:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	e716      	b.n	8008768 <PxMessagingTask+0x2dc>
							ReadPortsDirMSG(src);
 800893a:	4650      	mov	r0, sl
 800893c:	f004 faba 	bl	800ceb4 <ReadPortsDirMSG>
 8008940:	464b      	mov	r3, r9
 8008942:	2600      	movs	r6, #0
 8008944:	5d1f      	ldrb	r7, [r3, r4]
 8008946:	e659      	b.n	80085fc <PxMessagingTask+0x170>
 8008948:	4bae      	ldr	r3, [pc, #696]	; (8008c04 <PxMessagingTask+0x778>)
 800894a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800894c:	881e      	ldrh	r6, [r3, #0]
 800894e:	4bae      	ldr	r3, [pc, #696]	; (8008c08 <PxMessagingTask+0x77c>)
 8008950:	4694      	mov	ip, r2
 8008952:	1998      	adds	r0, r3, r6
 8008954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008956:	4466      	add	r6, ip
 8008958:	18e9      	adds	r1, r5, r3
 800895a:	464b      	mov	r3, r9
 800895c:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 800895e:	4bab      	ldr	r3, [pc, #684]	; (8008c0c <PxMessagingTask+0x780>)
 8008960:	b2b6      	uxth	r6, r6
 8008962:	781d      	ldrb	r5, [r3, #0]
 8008964:	4459      	add	r1, fp
 8008966:	2d00      	cmp	r5, #0
 8008968:	d101      	bne.n	800896e <PxMessagingTask+0x4e2>
 800896a:	f000 fc69 	bl	8009240 <PxMessagingTask+0xdb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800896e:	f009 fe0a 	bl	8012586 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008972:	4ba4      	ldr	r3, [pc, #656]	; (8008c04 <PxMessagingTask+0x778>)
 8008974:	801e      	strh	r6, [r3, #0]
 8008976:	2600      	movs	r6, #0
 8008978:	e640      	b.n	80085fc <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800897a:	2601      	movs	r6, #1
 800897c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800897e:	18ef      	adds	r7, r5, r3
 8008980:	445f      	add	r7, fp
								if(p != port)
 8008982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008984:	42b3      	cmp	r3, r6
 8008986:	d005      	beq.n	8008994 <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008988:	0030      	movs	r0, r6
 800898a:	f004 fa33 	bl	800cdf4 <GetUart>
 800898e:	7839      	ldrb	r1, [r7, #0]
 8008990:	f004 fa3c 	bl	800ce0c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008994:	3601      	adds	r6, #1
 8008996:	b2f6      	uxtb	r6, r6
 8008998:	3701      	adds	r7, #1
 800899a:	2e07      	cmp	r6, #7
 800899c:	d1f1      	bne.n	8008982 <PxMessagingTask+0x4f6>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800899e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089a0:	f004 fa28 	bl	800cdf4 <GetUart>
 80089a4:	9b06      	ldr	r3, [sp, #24]
 80089a6:	2600      	movs	r6, #0
 80089a8:	1b1b      	subs	r3, r3, r4
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	445b      	add	r3, fp
 80089ae:	195d      	adds	r5, r3, r5
 80089b0:	7aa9      	ldrb	r1, [r5, #10]
 80089b2:	f004 fa2b 	bl	800ce0c <SwapUartPins>
 80089b6:	464b      	mov	r3, r9
 80089b8:	5d1f      	ldrb	r7, [r3, r4]
 80089ba:	e61f      	b.n	80085fc <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80089bc:	9b06      	ldr	r3, [sp, #24]
 80089be:	1b1b      	subs	r3, r3, r4
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	445b      	add	r3, fp
 80089c4:	5d5f      	ldrb	r7, [r3, r5]
 80089c6:	195b      	adds	r3, r3, r5
 80089c8:	78da      	ldrb	r2, [r3, #3]
 80089ca:	063f      	lsls	r7, r7, #24
 80089cc:	18bf      	adds	r7, r7, r2
 80089ce:	785a      	ldrb	r2, [r3, #1]
 80089d0:	0412      	lsls	r2, r2, #16
 80089d2:	18bf      	adds	r7, r7, r2
 80089d4:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80089d6:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80089d8:	0212      	lsls	r2, r2, #8
 80089da:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80089dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80089de:	2bff      	cmp	r3, #255	; 0xff
 80089e0:	d101      	bne.n	80089e6 <PxMessagingTask+0x55a>
 80089e2:	f000 fc4e 	bl	8009282 <PxMessagingTask+0xdf6>
								for(p =0; p < numOfParams; p++){
 80089e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	d101      	bne.n	80089f0 <PxMessagingTask+0x564>
 80089ec:	f000 fc42 	bl	8009274 <PxMessagingTask+0xde8>
 80089f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089f4:	195e      	adds	r6, r3, r5
 80089f6:	465b      	mov	r3, fp
 80089f8:	468c      	mov	ip, r1
 80089fa:	3305      	adds	r3, #5
 80089fc:	4463      	add	r3, ip
 80089fe:	195d      	adds	r5, r3, r5
 8008a00:	0013      	movs	r3, r2
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 8008a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0a:	445e      	add	r6, fp
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b05      	cmp	r3, #5
 8008a12:	d90a      	bls.n	8008a2a <PxMessagingTask+0x59e>
								for(p =0; p < numOfParams; p++){
 8008a14:	42b5      	cmp	r5, r6
 8008a16:	d100      	bne.n	8008a1a <PxMessagingTask+0x58e>
 8008a18:	e5ed      	b.n	80085f6 <PxMessagingTask+0x16a>
 8008a1a:	7833      	ldrb	r3, [r6, #0]
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 8008a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d8f4      	bhi.n	8008a14 <PxMessagingTask+0x588>
										UpdateBaudrate(temp,temp32);
 8008a2a:	0039      	movs	r1, r7
 8008a2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a2e:	f004 f9cf 	bl	800cdd0 <UpdateBaudrate>
 8008a32:	e7ef      	b.n	8008a14 <PxMessagingTask+0x588>
							temp =numOfParams / 5;
 8008a34:	2105      	movs	r1, #5
 8008a36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a38:	f7f7 fb8a 	bl	8000150 <__udivsi3>
 8008a3c:	b2c2      	uxtb	r2, r0
 8008a3e:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	d100      	bne.n	8008a46 <PxMessagingTask+0x5ba>
 8008a44:	e777      	b.n	8008936 <PxMessagingTask+0x4aa>
 8008a46:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a48:	465b      	mov	r3, fp
 8008a4a:	468c      	mov	ip, r1
 8008a4c:	3305      	adds	r3, #5
 8008a4e:	4463      	add	r3, ip
 8008a50:	194e      	adds	r6, r1, r5
 8008a52:	195d      	adds	r5, r3, r5
 8008a54:	1e53      	subs	r3, r2, #1
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	009a      	lsls	r2, r3, #2
 8008a5a:	18d3      	adds	r3, r2, r3
 8008a5c:	445e      	add	r6, fp
 8008a5e:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008a60:	4b6b      	ldr	r3, [pc, #428]	; (8008c10 <PxMessagingTask+0x784>)
 8008a62:	7830      	ldrb	r0, [r6, #0]
 8008a64:	469c      	mov	ip, r3
 8008a66:	3801      	subs	r0, #1
 8008a68:	0080      	lsls	r0, r0, #2
 8008a6a:	1c71      	adds	r1, r6, #1
 8008a6c:	4460      	add	r0, ip
 8008a6e:	2204      	movs	r2, #4
 8008a70:	3605      	adds	r6, #5
 8008a72:	f009 fd88 	bl	8012586 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008a76:	42b5      	cmp	r5, r6
 8008a78:	d1f2      	bne.n	8008a60 <PxMessagingTask+0x5d4>
							responseStatus =BOS_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e674      	b.n	8008768 <PxMessagingTask+0x2dc>
							ExploreNeighbors(port);
 8008a7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a80:	f7fa ff6a 	bl	8003958 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008a84:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a86:	2501      	movs	r5, #1
							temp =0;
 8008a88:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008a8a:	4a5c      	ldr	r2, [pc, #368]	; (8008bfc <PxMessagingTask+0x770>)
							osDelay(10);
 8008a8c:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008a8e:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008a90:	f004 fae0 	bl	800d054 <osDelay>
 8008a94:	4e5f      	ldr	r6, [pc, #380]	; (8008c14 <PxMessagingTask+0x788>)
								if(neighbors[p - 1][0]){
 8008a96:	8833      	ldrh	r3, [r6, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <PxMessagingTask+0x626>
									messageParams[temp] =p;
 8008a9c:	4b5e      	ldr	r3, [pc, #376]	; (8008c18 <PxMessagingTask+0x78c>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008a9e:	1c78      	adds	r0, r7, #1
 8008aa0:	469c      	mov	ip, r3
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	4460      	add	r0, ip
 8008aa6:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008aa8:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008aaa:	f009 fd6c 	bl	8012586 <memcpy>
									temp +=5;
 8008aae:	3705      	adds	r7, #5
 8008ab0:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008ab2:	3501      	adds	r5, #1
 8008ab4:	b2ed      	uxtb	r5, r5
 8008ab6:	3604      	adds	r6, #4
 8008ab8:	2d07      	cmp	r5, #7
 8008aba:	d1ec      	bne.n	8008a96 <PxMessagingTask+0x60a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008abc:	210d      	movs	r1, #13
 8008abe:	970b      	str	r7, [sp, #44]	; 0x2c
 8008ac0:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	f7ff fb4e 	bl	8008164 <SendMessageToModule>
 8008ac8:	e595      	b.n	80085f6 <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008aca:	4651      	mov	r1, sl
 8008acc:	9b06      	ldr	r3, [sp, #24]
 8008ace:	0209      	lsls	r1, r1, #8
 8008ad0:	1b1b      	subs	r3, r3, r4
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	445b      	add	r3, fp
 8008ad6:	1958      	adds	r0, r3, r5
 8008ad8:	7882      	ldrb	r2, [r0, #2]
 8008ada:	4e4e      	ldr	r6, [pc, #312]	; (8008c14 <PxMessagingTask+0x788>)
 8008adc:	1852      	adds	r2, r2, r1
 8008ade:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ae0:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008ae2:	468c      	mov	ip, r1
 8008ae4:	0032      	movs	r2, r6
 8008ae6:	5d59      	ldrb	r1, [r3, r5]
 8008ae8:	7843      	ldrb	r3, [r0, #1]
 8008aea:	0209      	lsls	r1, r1, #8
 8008aec:	185b      	adds	r3, r3, r1
 8008aee:	4462      	add	r2, ip
 8008af0:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e638      	b.n	8008768 <PxMessagingTask+0x2dc>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008af6:	4651      	mov	r1, sl
 8008af8:	9b06      	ldr	r3, [sp, #24]
 8008afa:	0209      	lsls	r1, r1, #8
 8008afc:	1b1b      	subs	r3, r3, r4
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	445b      	add	r3, fp
 8008b02:	1958      	adds	r0, r3, r5
 8008b04:	7882      	ldrb	r2, [r0, #2]
 8008b06:	4e43      	ldr	r6, [pc, #268]	; (8008c14 <PxMessagingTask+0x788>)
 8008b08:	1852      	adds	r2, r2, r1
 8008b0a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b0c:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008b0e:	468c      	mov	ip, r1
 8008b10:	0032      	movs	r2, r6
 8008b12:	5d59      	ldrb	r1, [r3, r5]
 8008b14:	7843      	ldrb	r3, [r0, #1]
 8008b16:	0209      	lsls	r1, r1, #8
 8008b18:	4462      	add	r2, ip
 8008b1a:	185b      	adds	r3, r3, r1
 8008b1c:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008b1e:	4b3f      	ldr	r3, [pc, #252]	; (8008c1c <PxMessagingTask+0x790>)
 8008b20:	4a3d      	ldr	r2, [pc, #244]	; (8008c18 <PxMessagingTask+0x78c>)
 8008b22:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008b24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008b26:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008b28:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008b2e:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008b30:	f004 fa90 	bl	800d054 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008b34:	2303      	movs	r3, #3
 8008b36:	2200      	movs	r2, #0
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	0028      	movs	r0, r5
 8008b40:	f7ff f8b0 	bl	8007ca4 <SendMessageFromPort>
 8008b44:	464b      	mov	r3, r9
 8008b46:	2600      	movs	r6, #0
 8008b48:	5d1f      	ldrb	r7, [r3, r4]
 8008b4a:	e557      	b.n	80085fc <PxMessagingTask+0x170>
							IND_toggle();
 8008b4c:	2180      	movs	r1, #128	; 0x80
 8008b4e:	4834      	ldr	r0, [pc, #208]	; (8008c20 <PxMessagingTask+0x794>)
 8008b50:	01c9      	lsls	r1, r1, #7
 8008b52:	f007 fd6d 	bl	8010630 <HAL_GPIO_TogglePin>
 8008b56:	464b      	mov	r3, r9
 8008b58:	2600      	movs	r6, #0
 8008b5a:	5d1f      	ldrb	r7, [r3, r4]
 8008b5c:	e54e      	b.n	80085fc <PxMessagingTask+0x170>
							IND_OFF();
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2180      	movs	r1, #128	; 0x80
 8008b62:	482f      	ldr	r0, [pc, #188]	; (8008c20 <PxMessagingTask+0x794>)
 8008b64:	01c9      	lsls	r1, r1, #7
 8008b66:	f007 fd5d 	bl	8010624 <HAL_GPIO_WritePin>
 8008b6a:	e544      	b.n	80085f6 <PxMessagingTask+0x16a>
							IND_ON();
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	e7f7      	b.n	8008b60 <PxMessagingTask+0x6d4>
							if(!moduleAlias[myID][0])
 8008b70:	4b21      	ldr	r3, [pc, #132]	; (8008bf8 <PxMessagingTask+0x76c>)
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	0093      	lsls	r3, r2, #2
 8008b76:	189b      	adds	r3, r3, r2
 8008b78:	4a2a      	ldr	r2, [pc, #168]	; (8008c24 <PxMessagingTask+0x798>)
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	5cd3      	ldrb	r3, [r2, r3]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d000      	beq.n	8008b84 <PxMessagingTask+0x6f8>
 8008b82:	e2d3      	b.n	800912c <PxMessagingTask+0xca0>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008b84:	4828      	ldr	r0, [pc, #160]	; (8008c28 <PxMessagingTask+0x79c>)
 8008b86:	4652      	mov	r2, sl
 8008b88:	3008      	adds	r0, #8
 8008b8a:	4928      	ldr	r1, [pc, #160]	; (8008c2c <PxMessagingTask+0x7a0>)
 8008b8c:	f009 fefe 	bl	801298c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008b90:	4d25      	ldr	r5, [pc, #148]	; (8008c28 <PxMessagingTask+0x79c>)
 8008b92:	3508      	adds	r5, #8
 8008b94:	0028      	movs	r0, r5
 8008b96:	f7f7 fabf 	bl	8000118 <strlen>
 8008b9a:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <PxMessagingTask+0x7a4>)
 8008b9c:	b282      	uxth	r2, r0
 8008b9e:	7818      	ldrb	r0, [r3, #0]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	425b      	negs	r3, r3
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	0029      	movs	r1, r5
 8008ba8:	3333      	adds	r3, #51	; 0x33
 8008baa:	f004 f8bf 	bl	800cd2c <writePxMutex>
							responseStatus =BOS_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e5da      	b.n	8008768 <PxMessagingTask+0x2dc>
							indMode =IND_PING;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <PxMessagingTask+0x770>)
							osDelay(10);
 8008bb6:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008bb8:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008bba:	f004 fa4b 	bl	800d054 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008bbe:	2240      	movs	r2, #64	; 0x40
 8008bc0:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <PxMessagingTask+0x7a8>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	4393      	bics	r3, r2
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d000      	beq.n	8008bcc <PxMessagingTask+0x740>
 8008bca:	e514      	b.n	80085f6 <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2102      	movs	r1, #2
 8008bd0:	e777      	b.n	8008ac2 <PxMessagingTask+0x636>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008bd2:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <PxMessagingTask+0x7ac>)
 8008bd4:	4a19      	ldr	r2, [pc, #100]	; (8008c3c <PxMessagingTask+0x7b0>)
							osDelay(10);
 8008bd6:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008bd8:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4a07      	ldr	r2, [pc, #28]	; (8008bfc <PxMessagingTask+0x770>)
 8008bde:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008be0:	f004 fa38 	bl	800d054 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <PxMessagingTask+0x7b4>)
 8008bea:	4a16      	ldr	r2, [pc, #88]	; (8008c44 <PxMessagingTask+0x7b8>)
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	e7fd      	b.n	8008bf2 <PxMessagingTask+0x766>
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	20000a98 	.word	0x20000a98
 8008bfc:	2000117e 	.word	0x2000117e
 8008c00:	2000719c 	.word	0x2000719c
 8008c04:	20000c4a 	.word	0x20000c4a
 8008c08:	20002098 	.word	0x20002098
 8008c0c:	20000c4c 	.word	0x20000c4c
 8008c10:	2000114c 	.word	0x2000114c
 8008c14:	20001164 	.word	0x20001164
 8008c18:	20000b3c 	.word	0x20000b3c
 8008c1c:	20000030 	.word	0x20000030
 8008c20:	48000400 	.word	0x48000400
 8008c24:	20000dfc 	.word	0x20000dfc
 8008c28:	20001fd4 	.word	0x20001fd4
 8008c2c:	08018b98 	.word	0x08018b98
 8008c30:	20000c28 	.word	0x20000c28
 8008c34:	20006c00 	.word	0x20006c00
 8008c38:	20007ff0 	.word	0x20007ff0
 8008c3c:	deadbeef 	.word	0xdeadbeef
 8008c40:	e000ed00 	.word	0xe000ed00
 8008c44:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008c48:	230b      	movs	r3, #11
 8008c4a:	469c      	mov	ip, r3
 8008c4c:	44ac      	add	ip, r5
 8008c4e:	4662      	mov	r2, ip
 8008c50:	9b06      	ldr	r3, [sp, #24]
 8008c52:	9207      	str	r2, [sp, #28]
 8008c54:	1b1b      	subs	r3, r3, r4
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	445b      	add	r3, fp
 8008c5a:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c5e:	2a0f      	cmp	r2, #15
 8008c60:	d100      	bne.n	8008c64 <PxMessagingTask+0x7d8>
 8008c62:	e318      	b.n	8009296 <PxMessagingTask+0xe0a>
							if(numOfParams == 17)
 8008c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008c66:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008c68:	2a11      	cmp	r2, #17
 8008c6a:	d100      	bne.n	8008c6e <PxMessagingTask+0x7e2>
 8008c6c:	e317      	b.n	800929e <PxMessagingTask+0xe12>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c6e:	9f06      	ldr	r7, [sp, #24]
 8008c70:	1caa      	adds	r2, r5, #2
 8008c72:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c74:	1b3a      	subs	r2, r7, r4
 8008c76:	00d2      	lsls	r2, r2, #3
 8008c78:	445a      	add	r2, fp
 8008c7a:	1ce8      	adds	r0, r5, #3
 8008c7c:	5d57      	ldrb	r7, [r2, r5]
 8008c7e:	9011      	str	r0, [sp, #68]	; 0x44
 8008c80:	5c10      	ldrb	r0, [r2, r0]
 8008c82:	1c6e      	adds	r6, r5, #1
 8008c84:	063f      	lsls	r7, r7, #24
 8008c86:	183f      	adds	r7, r7, r0
 8008c88:	5d90      	ldrb	r0, [r2, r6]
 8008c8a:	9608      	str	r6, [sp, #32]
 8008c8c:	0400      	lsls	r0, r0, #16
 8008c8e:	183f      	adds	r7, r7, r0
 8008c90:	1ca8      	adds	r0, r5, #2
 8008c92:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c94:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c96:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c98:	9613      	str	r6, [sp, #76]	; 0x4c
 8008c9a:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c9c:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c9e:	9614      	str	r6, [sp, #80]	; 0x50
 8008ca0:	1d28      	adds	r0, r5, #4
 8008ca2:	1dee      	adds	r6, r5, #7
 8008ca4:	9012      	str	r0, [sp, #72]	; 0x48
 8008ca6:	9615      	str	r6, [sp, #84]	; 0x54
 8008ca8:	5c16      	ldrb	r6, [r2, r0]
 8008caa:	1d68      	adds	r0, r5, #5
 8008cac:	5c10      	ldrb	r0, [r2, r0]
 8008cae:	0636      	lsls	r6, r6, #24
 8008cb0:	0400      	lsls	r0, r0, #16
 8008cb2:	1836      	adds	r6, r6, r0
 8008cb4:	1de8      	adds	r0, r5, #7
 8008cb6:	5c10      	ldrb	r0, [r2, r0]
 8008cb8:	1836      	adds	r6, r6, r0
 8008cba:	1da8      	adds	r0, r5, #6
 8008cbc:	5c10      	ldrb	r0, [r2, r0]
 8008cbe:	0200      	lsls	r0, r0, #8
 8008cc0:	1836      	adds	r6, r6, r0
 8008cc2:	0028      	movs	r0, r5
 8008cc4:	3009      	adds	r0, #9
							if(temp == false){
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	d000      	beq.n	8008ccc <PxMessagingTask+0x840>
 8008cca:	e24f      	b.n	800916c <PxMessagingTask+0xce0>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008ccc:	5c12      	ldrb	r2, [r2, r0]
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	d00e      	beq.n	8008cf0 <PxMessagingTask+0x864>
 8008cd2:	9905      	ldr	r1, [sp, #20]
 8008cd4:	1948      	adds	r0, r1, r5
 8008cd6:	7a81      	ldrb	r1, [r0, #10]
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d009      	beq.n	8008cf0 <PxMessagingTask+0x864>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008cdc:	0013      	movs	r3, r2
 8008cde:	7a00      	ldrb	r0, [r0, #8]
 8008ce0:	0032      	movs	r2, r6
 8008ce2:	9100      	str	r1, [sp, #0]
 8008ce4:	0039      	movs	r1, r7
 8008ce6:	f7fe fee9 	bl	8007abc <SetupDMAStreams>
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	9a07      	ldr	r2, [sp, #28]
 8008cee:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <PxMessagingTask+0x87e>
 8008cf4:	9a05      	ldr	r2, [sp, #20]
 8008cf6:	1951      	adds	r1, r2, r5
 8008cf8:	7b0a      	ldrb	r2, [r1, #12]
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	d005      	beq.n	8008d0a <PxMessagingTask+0x87e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008cfe:	7a08      	ldrb	r0, [r1, #8]
 8008d00:	9200      	str	r2, [sp, #0]
 8008d02:	0039      	movs	r1, r7
 8008d04:	0032      	movs	r2, r6
 8008d06:	f7fe fed9 	bl	8007abc <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	1b1b      	subs	r3, r3, r4
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	445b      	add	r3, fp
 8008d12:	195b      	adds	r3, r3, r5
 8008d14:	7b5b      	ldrb	r3, [r3, #13]
 8008d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d100      	bne.n	8008d1e <PxMessagingTask+0x892>
 8008d1c:	e46b      	b.n	80085f6 <PxMessagingTask+0x16a>
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	469c      	mov	ip, r3
 8008d22:	4465      	add	r5, ip
 8008d24:	7bab      	ldrb	r3, [r5, #14]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d000      	beq.n	8008d2c <PxMessagingTask+0x8a0>
 8008d2a:	e29c      	b.n	8009266 <PxMessagingTask+0xdda>
 8008d2c:	464a      	mov	r2, r9
 8008d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d30:	5d17      	ldrb	r7, [r2, r4]
 8008d32:	001e      	movs	r6, r3
 8008d34:	e462      	b.n	80085fc <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008d36:	9b06      	ldr	r3, [sp, #24]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	1b1e      	subs	r6, r3, r4
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	00f6      	lsls	r6, r6, #3
 8008d40:	445e      	add	r6, fp
 8008d42:	5d70      	ldrb	r0, [r6, r5]
 8008d44:	2100      	movs	r1, #0
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	3319      	adds	r3, #25
 8008d4a:	f7fe ffab 	bl	8007ca4 <SendMessageFromPort>
							osDelay(100);
 8008d4e:	2064      	movs	r0, #100	; 0x64
 8008d50:	f004 f980 	bl	800d054 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008d54:	4ae8      	ldr	r2, [pc, #928]	; (80090f8 <PxMessagingTask+0xc6c>)
 8008d56:	5d73      	ldrb	r3, [r6, r5]
 8008d58:	7811      	ldrb	r1, [r2, #0]
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d5e:	f000 ff35 	bl	8009bcc <remoteBootloaderUpdate>
 8008d62:	464b      	mov	r3, r9
 8008d64:	2600      	movs	r6, #0
 8008d66:	5d1f      	ldrb	r7, [r3, r4]
 8008d68:	e448      	b.n	80085fc <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008d6a:	f004 fa7b 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
 8008d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d70:	0006      	movs	r6, r0
 8008d72:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	4459      	add	r1, fp
 8008d78:	2bff      	cmp	r3, #255	; 0xff
 8008d7a:	d100      	bne.n	8008d7e <PxMessagingTask+0x8f2>
 8008d7c:	e13f      	b.n	8008ffe <PxMessagingTask+0xb72>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d7e:	48df      	ldr	r0, [pc, #892]	; (80090fc <PxMessagingTask+0xc70>)
							else if(dst == BOS_MULTICAST)
 8008d80:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d82:	3058      	adds	r0, #88	; 0x58
							else if(dst == BOS_MULTICAST)
 8008d84:	2bfe      	cmp	r3, #254	; 0xfe
 8008d86:	d100      	bne.n	8008d8a <PxMessagingTask+0x8fe>
 8008d88:	e132      	b.n	8008ff0 <PxMessagingTask+0xb64>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d8c:	f009 fbfb 	bl	8012586 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d90:	4fda      	ldr	r7, [pc, #872]	; (80090fc <PxMessagingTask+0xc70>)
 8008d92:	3758      	adds	r7, #88	; 0x58
 8008d94:	e001      	b.n	8008d9a <PxMessagingTask+0x90e>
							} while(xReturned != pdFALSE);
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	d028      	beq.n	8008dec <PxMessagingTask+0x960>
								PcPort =port;
 8008d9a:	4ad9      	ldr	r2, [pc, #868]	; (8009100 <PxMessagingTask+0xc74>)
 8008d9c:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008d9e:	4bd8      	ldr	r3, [pc, #864]	; (8009100 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008da0:	0038      	movs	r0, r7
								temp =PcPort;
 8008da2:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008da4:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008da6:	2299      	movs	r2, #153	; 0x99
 8008da8:	0031      	movs	r1, r6
 8008daa:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008dac:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008dae:	f004 f9e1 	bl	800d174 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db4:	4ad2      	ldr	r2, [pc, #840]	; (8009100 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008db6:	0005      	movs	r5, r0
								PcPort =temp;
 8008db8:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008dba:	4bd2      	ldr	r3, [pc, #840]	; (8009104 <PxMessagingTask+0xc78>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b60      	cmp	r3, #96	; 0x60
 8008dc0:	d1e9      	bne.n	8008d96 <PxMessagingTask+0x90a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008dc2:	0030      	movs	r0, r6
 8008dc4:	f7f7 f9a8 	bl	8000118 <strlen>
 8008dc8:	0031      	movs	r1, r6
 8008dca:	0002      	movs	r2, r0
 8008dcc:	48ce      	ldr	r0, [pc, #824]	; (8009108 <PxMessagingTask+0xc7c>)
 8008dce:	f009 fbda 	bl	8012586 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008dd2:	0030      	movs	r0, r6
 8008dd4:	f7f7 f9a0 	bl	8000118 <strlen>
 8008dd8:	2118      	movs	r1, #24
 8008dda:	b282      	uxth	r2, r0
 8008ddc:	4650      	mov	r0, sl
 8008dde:	f7ff f9c1 	bl	8008164 <SendMessageToModule>
									osDelay(10);
 8008de2:	200a      	movs	r0, #10
 8008de4:	f004 f936 	bl	800d054 <osDelay>
							} while(xReturned != pdFALSE);
 8008de8:	2d00      	cmp	r5, #0
 8008dea:	d1d6      	bne.n	8008d9a <PxMessagingTask+0x90e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008dec:	48c3      	ldr	r0, [pc, #780]	; (80090fc <PxMessagingTask+0xc70>)
 8008dee:	2232      	movs	r2, #50	; 0x32
 8008df0:	3058      	adds	r0, #88	; 0x58
 8008df2:	2100      	movs	r1, #0
 8008df4:	f009 fbd0 	bl	8012598 <memset>
 8008df8:	464b      	mov	r3, r9
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	5d1f      	ldrb	r7, [r3, r4]
 8008dfe:	f7ff fbfd 	bl	80085fc <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008e02:	f004 fa2f 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
 8008e06:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008e08:	f7f7 f986 	bl	8000118 <strlen>
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	0002      	movs	r2, r0
 8008e10:	0030      	movs	r0, r6
 8008e12:	f009 fbc1 	bl	8012598 <memset>
 8008e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e18:	18e9      	adds	r1, r5, r3
							if(longMessage){
 8008e1a:	4bbc      	ldr	r3, [pc, #752]	; (800910c <PxMessagingTask+0xc80>)
 8008e1c:	4459      	add	r1, fp
 8008e1e:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e20:	4bbb      	ldr	r3, [pc, #748]	; (8009110 <PxMessagingTask+0xc84>)
 8008e22:	8818      	ldrh	r0, [r3, #0]
 8008e24:	1830      	adds	r0, r6, r0
							if(longMessage){
 8008e26:	2f00      	cmp	r7, #0
 8008e28:	d100      	bne.n	8008e2c <PxMessagingTask+0x9a0>
 8008e2a:	e0ce      	b.n	8008fca <PxMessagingTask+0xb3e>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 8008e2e:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e30:	002a      	movs	r2, r5
 8008e32:	f009 fba8 	bl	8012586 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008e36:	46ac      	mov	ip, r5
 8008e38:	4bb5      	ldr	r3, [pc, #724]	; (8009110 <PxMessagingTask+0xc84>)
 8008e3a:	881a      	ldrh	r2, [r3, #0]
 8008e3c:	4bb4      	ldr	r3, [pc, #720]	; (8009110 <PxMessagingTask+0xc84>)
 8008e3e:	4462      	add	r2, ip
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	464b      	mov	r3, r9
 8008e44:	5d1f      	ldrb	r7, [r3, r4]
 8008e46:	f7ff fbd9 	bl	80085fc <PxMessagingTask+0x170>
							ClearEEportsDir();
 8008e4a:	f7fa fc07 	bl	800365c <ClearEEportsDir>
							ClearROtopology();
 8008e4e:	f000 fe91 	bl	8009b74 <ClearROtopology>
							osDelay(100);
 8008e52:	2064      	movs	r0, #100	; 0x64
 8008e54:	f004 f8fe 	bl	800d054 <osDelay>
							indMode =IND_TOPOLOGY;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e545      	b.n	80088e8 <PxMessagingTask+0x45c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e5c:	4ba6      	ldr	r3, [pc, #664]	; (80090f8 <PxMessagingTask+0xc6c>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d01e      	beq.n	8008ea2 <PxMessagingTask+0xa16>
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d019      	beq.n	8008e9c <PxMessagingTask+0xa10>
				ForwardReceivedMessage(port);
 8008e68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e6a:	f7ff f95b 	bl	8008124 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008e6e:	4ba5      	ldr	r3, [pc, #660]	; (8009104 <PxMessagingTask+0xc78>)
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <PxMessagingTask+0x9f0>
					indMode =IND_SHORT_BLINK;
 8008e76:	2303      	movs	r3, #3
 8008e78:	4aa6      	ldr	r2, [pc, #664]	; (8009114 <PxMessagingTask+0xc88>)
 8008e7a:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008e7c:	9b08      	ldr	r3, [sp, #32]
 8008e7e:	2b19      	cmp	r3, #25
 8008e80:	d07c      	beq.n	8008f7c <PxMessagingTask+0xaf0>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008e82:	9b08      	ldr	r3, [sp, #32]
 8008e84:	2b1a      	cmp	r3, #26
 8008e86:	d100      	bne.n	8008e8a <PxMessagingTask+0x9fe>
 8008e88:	e082      	b.n	8008f90 <PxMessagingTask+0xb04>
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	5d1f      	ldrb	r7, [r3, r4]
 8008e8e:	f7ff fbb5 	bl	80085fc <PxMessagingTask+0x170>
				longMessage =1;
 8008e92:	2301      	movs	r3, #1
 8008e94:	4a9d      	ldr	r2, [pc, #628]	; (800910c <PxMessagingTask+0xc80>)
 8008e96:	7013      	strb	r3, [r2, #0]
 8008e98:	f7ff fb37 	bl	800850a <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e9c:	9b08      	ldr	r3, [sp, #32]
 8008e9e:	2b10      	cmp	r3, #16
 8008ea0:	d1e2      	bne.n	8008e68 <PxMessagingTask+0x9dc>
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d001      	beq.n	8008eae <PxMessagingTask+0xa22>
 8008eaa:	f7ff fba7 	bl	80085fc <PxMessagingTask+0x170>
				shift +=4;
 8008eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008eb0:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8008eb2:	1b7a      	subs	r2, r7, r5
 8008eb4:	b2d3      	uxtb	r3, r2
 8008eb6:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	2b2d      	cmp	r3, #45	; 0x2d
 8008ebc:	d801      	bhi.n	8008ec2 <PxMessagingTask+0xa36>
 8008ebe:	f7ff fb87 	bl	80085d0 <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8008ec2:	9500      	str	r5, [sp, #0]
 8008ec4:	9b07      	ldr	r3, [sp, #28]
 8008ec6:	4652      	mov	r2, sl
 8008ec8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008eca:	9808      	ldr	r0, [sp, #32]
 8008ecc:	f7ff fadc 	bl	8008488 <User_MessagingParser>
 8008ed0:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 8008ed2:	2801      	cmp	r0, #1
 8008ed4:	d1d9      	bne.n	8008e8a <PxMessagingTask+0x9fe>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008ed6:	4652      	mov	r2, sl
 8008ed8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008eda:	9500      	str	r5, [sp, #0]
 8008edc:	9b07      	ldr	r3, [sp, #28]
 8008ede:	9808      	ldr	r0, [sp, #32]
 8008ee0:	f000 ff54 	bl	8009d8c <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008ee4:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008ee6:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008ee8:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 8008eea:	2801      	cmp	r0, #1
 8008eec:	d100      	bne.n	8008ef0 <PxMessagingTask+0xa64>
 8008eee:	e5e8      	b.n	8008ac2 <PxMessagingTask+0x636>
 8008ef0:	e7cb      	b.n	8008e8a <PxMessagingTask+0x9fe>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ef2:	9b07      	ldr	r3, [sp, #28]
 8008ef4:	2bfe      	cmp	r3, #254	; 0xfe
 8008ef6:	d1d6      	bne.n	8008ea6 <PxMessagingTask+0xa1a>
 8008ef8:	9b06      	ldr	r3, [sp, #24]
 8008efa:	4a80      	ldr	r2, [pc, #512]	; (80090fc <PxMessagingTask+0xc70>)
 8008efc:	1b1d      	subs	r5, r3, r4
 8008efe:	00ed      	lsls	r5, r5, #3
 8008f00:	445d      	add	r5, fp
 8008f02:	19eb      	adds	r3, r5, r7
 8008f04:	3b01      	subs	r3, #1
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 8008f0a:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d101      	bne.n	8008f14 <PxMessagingTask+0xa88>
 8008f10:	f7ff fb74 	bl	80085fc <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008f14:	4a79      	ldr	r2, [pc, #484]	; (80090fc <PxMessagingTask+0xc70>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008f16:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008f18:	7193      	strb	r3, [r2, #6]
 8008f1a:	4a7f      	ldr	r2, [pc, #508]	; (8009118 <PxMessagingTask+0xc8c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008f1c:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008f1e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008f20:	f7ff f8bc 	bl	800809c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008f24:	464b      	mov	r3, r9
 8008f26:	2200      	movs	r2, #0
 8008f28:	5d1f      	ldrb	r7, [r3, r4]
 8008f2a:	19eb      	adds	r3, r5, r7
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008f30:	1eb8      	subs	r0, r7, #2
 8008f32:	5c2e      	ldrb	r6, [r5, r0]
 8008f34:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d01d      	beq.n	8008f76 <PxMessagingTask+0xaea>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008f3a:	4b6f      	ldr	r3, [pc, #444]	; (80090f8 <PxMessagingTask+0xc6c>)
 8008f3c:	1b80      	subs	r0, r0, r6
 8008f3e:	7819      	ldrb	r1, [r3, #0]
 8008f40:	5c2b      	ldrb	r3, [r5, r0]
 8008f42:	428b      	cmp	r3, r1
 8008f44:	d101      	bne.n	8008f4a <PxMessagingTask+0xabe>
 8008f46:	f7ff fb39 	bl	80085bc <PxMessagingTask+0x130>
 8008f4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f4c:	465a      	mov	r2, fp
 8008f4e:	46ac      	mov	ip, r5
 8008f50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f52:	3201      	adds	r2, #1
 8008f54:	1e75      	subs	r5, r6, #1
 8008f56:	4462      	add	r2, ip
 8008f58:	b2ed      	uxtb	r5, r5
 8008f5a:	181b      	adds	r3, r3, r0
 8008f5c:	1952      	adds	r2, r2, r5
 8008f5e:	445b      	add	r3, fp
 8008f60:	1812      	adds	r2, r2, r0
 8008f62:	e006      	b.n	8008f72 <PxMessagingTask+0xae6>
 8008f64:	3301      	adds	r3, #1
 8008f66:	1e58      	subs	r0, r3, #1
 8008f68:	7800      	ldrb	r0, [r0, #0]
 8008f6a:	4288      	cmp	r0, r1
 8008f6c:	d101      	bne.n	8008f72 <PxMessagingTask+0xae6>
 8008f6e:	f7ff fb25 	bl	80085bc <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d1f6      	bne.n	8008f64 <PxMessagingTask+0xad8>
					result =BOS_ERR_WrongID;
 8008f76:	2666      	movs	r6, #102	; 0x66
 8008f78:	f7ff fb40 	bl	80085fc <PxMessagingTask+0x170>
					Delay_ms(100);
 8008f7c:	2064      	movs	r0, #100	; 0x64
 8008f7e:	f005 ff05 	bl	800ed8c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008f82:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f86:	9907      	ldr	r1, [sp, #28]
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f000 fe1f 	bl	8009bcc <remoteBootloaderUpdate>
 8008f8e:	e77c      	b.n	8008e8a <PxMessagingTask+0x9fe>
					Delay_ms(100);
 8008f90:	2064      	movs	r0, #100	; 0x64
 8008f92:	f005 fefb 	bl	800ed8c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f96:	9b06      	ldr	r3, [sp, #24]
 8008f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f9a:	1b1b      	subs	r3, r3, r4
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	445b      	add	r3, fp
 8008fa0:	5c9b      	ldrb	r3, [r3, r2]
 8008fa2:	e7ef      	b.n	8008f84 <PxMessagingTask+0xaf8>
								ADCSelectChannel(ADCPort,"top");
 8008fa4:	495d      	ldr	r1, [pc, #372]	; (800911c <PxMessagingTask+0xc90>)
 8008fa6:	f002 fd7b 	bl	800baa0 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8008faa:	4b5d      	ldr	r3, [pc, #372]	; (8009120 <PxMessagingTask+0xc94>)
 8008fac:	4a5c      	ldr	r2, [pc, #368]	; (8009120 <PxMessagingTask+0xc94>)
 8008fae:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8008fb0:	3234      	adds	r2, #52	; 0x34
 8008fb2:	b2c0      	uxtb	r0, r0
 8008fb4:	4959      	ldr	r1, [pc, #356]	; (800911c <PxMessagingTask+0xc90>)
 8008fb6:	f002 fdcb 	bl	800bb50 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008fba:	4959      	ldr	r1, [pc, #356]	; (8009120 <PxMessagingTask+0xc94>)
 8008fbc:	4858      	ldr	r0, [pc, #352]	; (8009120 <PxMessagingTask+0xc94>)
 8008fbe:	3138      	adds	r1, #56	; 0x38
 8008fc0:	303c      	adds	r0, #60	; 0x3c
 8008fc2:	f002 fb9b 	bl	800b6fc <ReadTempAndVref>
 8008fc6:	f7ff fb82 	bl	80086ce <PxMessagingTask+0x242>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fcc:	f009 fadb 	bl	8012586 <memcpy>
								longMessageLastPtr =0;
 8008fd0:	4b4f      	ldr	r3, [pc, #316]	; (8009110 <PxMessagingTask+0xc84>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fd2:	4854      	ldr	r0, [pc, #336]	; (8009124 <PxMessagingTask+0xc98>)
								longMessageLastPtr =0;
 8008fd4:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 8008fd6:	4b54      	ldr	r3, [pc, #336]	; (8009128 <PxMessagingTask+0xc9c>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fd8:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 8008fda:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fdc:	2300      	movs	r3, #0
 8008fde:	001a      	movs	r2, r3
 8008fe0:	0019      	movs	r1, r3
 8008fe2:	f005 fb2f 	bl	800e644 <xTaskGenericNotify>
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	2600      	movs	r6, #0
 8008fea:	5d1f      	ldrb	r7, [r3, r4]
 8008fec:	f7ff fb06 	bl	80085fc <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ff4:	1a9a      	subs	r2, r3, r2
 8008ff6:	3a02      	subs	r2, #2
 8008ff8:	f009 fac5 	bl	8012586 <memcpy>
 8008ffc:	e6c8      	b.n	8008d90 <PxMessagingTask+0x904>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009000:	483e      	ldr	r0, [pc, #248]	; (80090fc <PxMessagingTask+0xc70>)
 8009002:	3a01      	subs	r2, #1
 8009004:	3058      	adds	r0, #88	; 0x58
 8009006:	f009 fabe 	bl	8012586 <memcpy>
 800900a:	e6c1      	b.n	8008d90 <PxMessagingTask+0x904>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800900c:	9905      	ldr	r1, [sp, #20]
 800900e:	1949      	adds	r1, r1, r5
 8009010:	788b      	ldrb	r3, [r1, #2]
 8009012:	78ce      	ldrb	r6, [r1, #3]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	0436      	lsls	r6, r6, #16
 8009018:	199b      	adds	r3, r3, r6
 800901a:	189b      	adds	r3, r3, r2
 800901c:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800901e:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009020:	0612      	lsls	r2, r2, #24
 8009022:	189b      	adds	r3, r3, r2
 8009024:	4a3e      	ldr	r2, [pc, #248]	; (8009120 <PxMessagingTask+0xc94>)
 8009026:	60d3      	str	r3, [r2, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009028:	5c0b      	ldrb	r3, [r1, r0]
 800902a:	5dca      	ldrb	r2, [r1, r7]
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	0412      	lsls	r2, r2, #16
 8009030:	189b      	adds	r3, r3, r2
 8009032:	1d6a      	adds	r2, r5, #5
 8009034:	5c8a      	ldrb	r2, [r1, r2]
 8009036:	189b      	adds	r3, r3, r2
 8009038:	4652      	mov	r2, sl
 800903a:	5c8a      	ldrb	r2, [r1, r2]
 800903c:	0612      	lsls	r2, r2, #24
 800903e:	189b      	adds	r3, r3, r2
 8009040:	4a37      	ldr	r2, [pc, #220]	; (8009120 <PxMessagingTask+0xc94>)
 8009042:	6113      	str	r3, [r2, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009046:	9a07      	ldr	r2, [sp, #28]
 8009048:	5ccb      	ldrb	r3, [r1, r3]
 800904a:	5c8a      	ldrb	r2, [r1, r2]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	0412      	lsls	r2, r2, #16
 8009050:	189b      	adds	r3, r3, r2
 8009052:	9a08      	ldr	r2, [sp, #32]
 8009054:	5c8a      	ldrb	r2, [r1, r2]
 8009056:	189b      	adds	r3, r3, r2
 8009058:	4662      	mov	r2, ip
 800905a:	5c8a      	ldrb	r2, [r1, r2]
 800905c:	0612      	lsls	r2, r2, #24
 800905e:	189b      	adds	r3, r3, r2
 8009060:	4a2f      	ldr	r2, [pc, #188]	; (8009120 <PxMessagingTask+0xc94>)
 8009062:	6153      	str	r3, [r2, #20]
									break;
 8009064:	f7ff fb12 	bl	800868c <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009068:	9905      	ldr	r1, [sp, #20]
 800906a:	1949      	adds	r1, r1, r5
 800906c:	788b      	ldrb	r3, [r1, #2]
 800906e:	78ce      	ldrb	r6, [r1, #3]
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	0436      	lsls	r6, r6, #16
 8009074:	199b      	adds	r3, r3, r6
 8009076:	189b      	adds	r3, r3, r2
 8009078:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800907a:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800907c:	0612      	lsls	r2, r2, #24
 800907e:	189b      	adds	r3, r3, r2
 8009080:	4a27      	ldr	r2, [pc, #156]	; (8009120 <PxMessagingTask+0xc94>)
 8009082:	6193      	str	r3, [r2, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009084:	5c0b      	ldrb	r3, [r1, r0]
 8009086:	5dca      	ldrb	r2, [r1, r7]
 8009088:	021b      	lsls	r3, r3, #8
 800908a:	0412      	lsls	r2, r2, #16
 800908c:	189b      	adds	r3, r3, r2
 800908e:	1d6a      	adds	r2, r5, #5
 8009090:	5c8a      	ldrb	r2, [r1, r2]
 8009092:	189b      	adds	r3, r3, r2
 8009094:	4652      	mov	r2, sl
 8009096:	5c8a      	ldrb	r2, [r1, r2]
 8009098:	0612      	lsls	r2, r2, #24
 800909a:	189b      	adds	r3, r3, r2
 800909c:	4a20      	ldr	r2, [pc, #128]	; (8009120 <PxMessagingTask+0xc94>)
 800909e:	61d3      	str	r3, [r2, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80090a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a2:	9a07      	ldr	r2, [sp, #28]
 80090a4:	5ccb      	ldrb	r3, [r1, r3]
 80090a6:	5c8a      	ldrb	r2, [r1, r2]
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	0412      	lsls	r2, r2, #16
 80090ac:	189b      	adds	r3, r3, r2
 80090ae:	9a08      	ldr	r2, [sp, #32]
 80090b0:	5c8a      	ldrb	r2, [r1, r2]
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	4662      	mov	r2, ip
 80090b6:	5c8a      	ldrb	r2, [r1, r2]
 80090b8:	0612      	lsls	r2, r2, #24
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	4a18      	ldr	r2, [pc, #96]	; (8009120 <PxMessagingTask+0xc94>)
 80090be:	6213      	str	r3, [r2, #32]
									break;
 80090c0:	f7ff fae4 	bl	800868c <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d001      	beq.n	80090cc <PxMessagingTask+0xc40>
 80090c8:	f7ff fa95 	bl	80085f6 <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 80090cc:	2600      	movs	r6, #0
 80090ce:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <PxMessagingTask+0xc7c>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090d0:	4a0d      	ldr	r2, [pc, #52]	; (8009108 <PxMessagingTask+0xc7c>)
								messageParams[0] =0; /* change own ID */
 80090d2:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090d4:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090d6:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090d8:	469c      	mov	ip, r3
 80090da:	4465      	add	r5, ip
 80090dc:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090de:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090e0:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090e2:	2303      	movs	r3, #3
 80090e4:	0032      	movs	r2, r6
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	330d      	adds	r3, #13
 80090ea:	f7fe fddb 	bl	8007ca4 <SendMessageFromPort>
 80090ee:	464b      	mov	r3, r9
 80090f0:	5d1f      	ldrb	r7, [r3, r4]
 80090f2:	f7ff fa83 	bl	80085fc <PxMessagingTask+0x170>
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	20000a98 	.word	0x20000a98
 80090fc:	20001fd4 	.word	0x20001fd4
 8009100:	20000c28 	.word	0x20000c28
 8009104:	20006c00 	.word	0x20006c00
 8009108:	20000b3c 	.word	0x20000b3c
 800910c:	20000c4c 	.word	0x20000c4c
 8009110:	20000c4a 	.word	0x20000c4a
 8009114:	2000117e 	.word	0x2000117e
 8009118:	20000c48 	.word	0x20000c48
 800911c:	0801808c 	.word	0x0801808c
 8009120:	20002054 	.word	0x20002054
 8009124:	20001ecc 	.word	0x20001ecc
 8009128:	20000c3c 	.word	0x20000c3c
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800912c:	4652      	mov	r2, sl
 800912e:	230a      	movs	r3, #10
 8009130:	4353      	muls	r3, r2
 8009132:	4adf      	ldr	r2, [pc, #892]	; (80094b0 <PxMessagingTask+0x1024>)
 8009134:	48df      	ldr	r0, [pc, #892]	; (80094b4 <PxMessagingTask+0x1028>)
 8009136:	4694      	mov	ip, r2
 8009138:	49df      	ldr	r1, [pc, #892]	; (80094b8 <PxMessagingTask+0x102c>)
 800913a:	4463      	add	r3, ip
 800913c:	4652      	mov	r2, sl
 800913e:	3008      	adds	r0, #8
 8009140:	f009 fc24 	bl	801298c <sprintf>
 8009144:	e524      	b.n	8008b90 <PxMessagingTask+0x704>
 8009146:	2600      	movs	r6, #0
 8009148:	f7ff fa58 	bl	80085fc <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800914c:	2a01      	cmp	r2, #1
 800914e:	d901      	bls.n	8009154 <PxMessagingTask+0xcc8>
 8009150:	f7ff fb45 	bl	80087de <PxMessagingTask+0x352>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009154:	9b05      	ldr	r3, [sp, #20]
 8009156:	4ad9      	ldr	r2, [pc, #868]	; (80094bc <PxMessagingTask+0x1030>)
 8009158:	5d5b      	ldrb	r3, [r3, r5]
 800915a:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800915c:	2b08      	cmp	r3, #8
 800915e:	d901      	bls.n	8009164 <PxMessagingTask+0xcd8>
 8009160:	f7ff fb3d 	bl	80087de <PxMessagingTask+0x352>
 8009164:	4ad6      	ldr	r2, [pc, #856]	; (80094c0 <PxMessagingTask+0x1034>)
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	58d3      	ldr	r3, [r2, r3]
 800916a:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800916c:	2338      	movs	r3, #56	; 0x38
 800916e:	46aa      	mov	sl, r5
 8009170:	435c      	muls	r4, r3
 8009172:	445c      	add	r4, fp
 8009174:	1965      	adds	r5, r4, r5
 8009176:	0007      	movs	r7, r0
 8009178:	7a29      	ldrb	r1, [r5, #8]
 800917a:	20e4      	movs	r0, #228	; 0xe4
 800917c:	f001 fcaa 	bl	800aad4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009180:	4653      	mov	r3, sl
 8009182:	9a08      	ldr	r2, [sp, #32]
 8009184:	5ce3      	ldrb	r3, [r4, r3]
 8009186:	5ca1      	ldrb	r1, [r4, r2]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	18c9      	adds	r1, r1, r3
 800918c:	b289      	uxth	r1, r1
 800918e:	20e5      	movs	r0, #229	; 0xe5
 8009190:	f001 fca0 	bl	800aad4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009198:	5ce3      	ldrb	r3, [r4, r3]
 800919a:	5ca1      	ldrb	r1, [r4, r2]
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	18c9      	adds	r1, r1, r3
 80091a0:	b289      	uxth	r1, r1
 80091a2:	20e6      	movs	r0, #230	; 0xe6
 80091a4:	f001 fc96 	bl	800aad4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80091a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091ac:	5ce3      	ldrb	r3, [r4, r3]
 80091ae:	5ca1      	ldrb	r1, [r4, r2]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	18c9      	adds	r1, r1, r3
 80091b4:	b289      	uxth	r1, r1
 80091b6:	20e7      	movs	r0, #231	; 0xe7
 80091b8:	f001 fc8c 	bl	800aad4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80091bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091c0:	5ce3      	ldrb	r3, [r4, r3]
 80091c2:	5ca1      	ldrb	r1, [r4, r2]
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	18c9      	adds	r1, r1, r3
 80091c8:	b289      	uxth	r1, r1
 80091ca:	20e8      	movs	r0, #232	; 0xe8
 80091cc:	f001 fc82 	bl	800aad4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 80091d0:	5de3      	ldrb	r3, [r4, r7]
 80091d2:	7aa9      	ldrb	r1, [r5, #10]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	18c9      	adds	r1, r1, r3
 80091d8:	b289      	uxth	r1, r1
 80091da:	20e9      	movs	r0, #233	; 0xe9
 80091dc:	f001 fc7a 	bl	800aad4 <EE_WriteVariable>
								if(numOfParams == 19)
 80091e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e2:	2b13      	cmp	r3, #19
 80091e4:	d013      	beq.n	800920e <PxMessagingTask+0xd82>
								if(numOfParams == 21)
 80091e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e8:	2b15      	cmp	r3, #21
 80091ea:	d107      	bne.n	80091fc <PxMessagingTask+0xd70>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80091ec:	7b6b      	ldrb	r3, [r5, #13]
 80091ee:	7ba9      	ldrb	r1, [r5, #14]
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	18c9      	adds	r1, r1, r3
 80091f4:	b289      	uxth	r1, r1
 80091f6:	20eb      	movs	r0, #235	; 0xeb
 80091f8:	f001 fc6c 	bl	800aad4 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	4bb0      	ldr	r3, [pc, #704]	; (80094c4 <PxMessagingTask+0x1038>)
 8009202:	4ab1      	ldr	r2, [pc, #708]	; (80094c8 <PxMessagingTask+0x103c>)
 8009204:	60da      	str	r2, [r3, #12]
 8009206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	e7fd      	b.n	800920a <PxMessagingTask+0xd7e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800920e:	9b07      	ldr	r3, [sp, #28]
 8009210:	7b29      	ldrb	r1, [r5, #12]
 8009212:	5ce3      	ldrb	r3, [r4, r3]
 8009214:	20ea      	movs	r0, #234	; 0xea
 8009216:	021b      	lsls	r3, r3, #8
 8009218:	18c9      	adds	r1, r1, r3
 800921a:	b289      	uxth	r1, r1
 800921c:	f001 fc5a 	bl	800aad4 <EE_WriteVariable>
 8009220:	e7ec      	b.n	80091fc <PxMessagingTask+0xd70>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	49a9      	ldr	r1, [pc, #676]	; (80094cc <PxMessagingTask+0x1040>)
 8009226:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	0a12      	lsrs	r2, r2, #8
 800922c:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	0c12      	lsrs	r2, r2, #16
 8009232:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 8009234:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 800923c:	211f      	movs	r1, #31
 800923e:	e440      	b.n	8008ac2 <PxMessagingTask+0x636>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009242:	f009 f9a0 	bl	8012586 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009246:	2116      	movs	r1, #22
 8009248:	0030      	movs	r0, r6
 800924a:	f7f6 ff81 	bl	8000150 <__udivsi3>
 800924e:	4ba0      	ldr	r3, [pc, #640]	; (80094d0 <PxMessagingTask+0x1044>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009250:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009252:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009254:	499f      	ldr	r1, [pc, #636]	; (80094d4 <PxMessagingTask+0x1048>)
 8009256:	48a0      	ldr	r0, [pc, #640]	; (80094d8 <PxMessagingTask+0x104c>)
 8009258:	f009 f995 	bl	8012586 <memcpy>
								longMessageLastPtr =0;
 800925c:	4b9f      	ldr	r3, [pc, #636]	; (80094dc <PxMessagingTask+0x1050>)
 800925e:	2600      	movs	r6, #0
 8009260:	801d      	strh	r5, [r3, #0]
 8009262:	f7ff f9cb 	bl	80085fc <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8009266:	7a28      	ldrb	r0, [r5, #8]
 8009268:	0032      	movs	r2, r6
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	0039      	movs	r1, r7
 800926e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009270:	f7fe fc24 	bl	8007abc <SetupDMAStreams>
 8009274:	464b      	mov	r3, r9
 8009276:	5d1f      	ldrb	r7, [r3, r4]
 8009278:	2300      	movs	r3, #0
 800927a:	930b      	str	r3, [sp, #44]	; 0x2c
 800927c:	001e      	movs	r6, r3
 800927e:	f7ff f9bd 	bl	80085fc <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 8009282:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 8009284:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 8009286:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 8009288:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800928a:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 800928c:	f003 fda0 	bl	800cdd0 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009290:	2d07      	cmp	r5, #7
 8009292:	d1f7      	bne.n	8009284 <PxMessagingTask+0xdf8>
 8009294:	e7ee      	b.n	8009274 <PxMessagingTask+0xde8>
								temp =cMessage[port - 1][13 + shift];
 8009296:	9a05      	ldr	r2, [sp, #20]
 8009298:	1952      	adds	r2, r2, r5
 800929a:	7b51      	ldrb	r1, [r2, #13]
 800929c:	e4e7      	b.n	8008c6e <PxMessagingTask+0x7e2>
								temp =cMessage[port - 1][15 + shift];
 800929e:	9a05      	ldr	r2, [sp, #20]
 80092a0:	1952      	adds	r2, r2, r5
 80092a2:	7bd1      	ldrb	r1, [r2, #15]
 80092a4:	e4e3      	b.n	8008c6e <PxMessagingTask+0x7e2>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80092a6:	881a      	ldrh	r2, [r3, #0]
 80092a8:	4988      	ldr	r1, [pc, #544]	; (80094cc <PxMessagingTask+0x1040>)
 80092aa:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80092ac:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80092ae:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80092b0:	b21b      	sxth	r3, r3
 80092b2:	121b      	asrs	r3, r3, #8
 80092b4:	704b      	strb	r3, [r1, #1]
 80092b6:	e7c1      	b.n	800923c <PxMessagingTask+0xdb0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80092b8:	881a      	ldrh	r2, [r3, #0]
 80092ba:	4984      	ldr	r1, [pc, #528]	; (80094cc <PxMessagingTask+0x1040>)
 80092bc:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80092be:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80092c0:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80092c2:	0a1b      	lsrs	r3, r3, #8
 80092c4:	704b      	strb	r3, [r1, #1]
 80092c6:	e7b9      	b.n	800923c <PxMessagingTask+0xdb0>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	4980      	ldr	r1, [pc, #512]	; (80094cc <PxMessagingTask+0x1040>)
 80092cc:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80092ce:	785a      	ldrb	r2, [r3, #1]
 80092d0:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80092d2:	789a      	ldrb	r2, [r3, #2]
 80092d4:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80092d6:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 80092d8:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80092da:	70cb      	strb	r3, [r1, #3]
 80092dc:	e7ae      	b.n	800923c <PxMessagingTask+0xdb0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d100      	bne.n	80092e4 <PxMessagingTask+0xe58>
 80092e2:	e0be      	b.n	8009462 <PxMessagingTask+0xfd6>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80092e4:	d801      	bhi.n	80092ea <PxMessagingTask+0xe5e>
 80092e6:	f7ff f986 	bl	80085f6 <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80092ea:	260f      	movs	r6, #15
 80092ec:	3b04      	subs	r3, #4
 80092ee:	4a7c      	ldr	r2, [pc, #496]	; (80094e0 <PxMessagingTask+0x1054>)
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	58d2      	ldr	r2, [r2, r3]
 80092f4:	4b75      	ldr	r3, [pc, #468]	; (80094cc <PxMessagingTask+0x1040>)
 80092f6:	4016      	ands	r6, r2
 80092f8:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80092fa:	d100      	bne.n	80092fe <PxMessagingTask+0xe72>
 80092fc:	e0a8      	b.n	8009450 <PxMessagingTask+0xfc4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092fe:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 8009300:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009302:	0c12      	lsrs	r2, r2, #16
 8009304:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 8009306:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009308:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800930a:	2e07      	cmp	r6, #7
 800930c:	d901      	bls.n	8009312 <PxMessagingTask+0xe86>
 800930e:	f7ff f972 	bl	80085f6 <PxMessagingTask+0x16a>
 8009312:	4974      	ldr	r1, [pc, #464]	; (80094e4 <PxMessagingTask+0x1058>)
 8009314:	00b6      	lsls	r6, r6, #2
 8009316:	5989      	ldr	r1, [r1, r6]
 8009318:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800931a:	2b00      	cmp	r3, #0
 800931c:	d031      	beq.n	8009382 <PxMessagingTask+0xef6>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	195a      	adds	r2, r3, r5
 8009322:	78d3      	ldrb	r3, [r2, #3]
 8009324:	7891      	ldrb	r1, [r2, #2]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	185b      	adds	r3, r3, r1
 800932a:	7911      	ldrb	r1, [r2, #4]
 800932c:	0409      	lsls	r1, r1, #16
 800932e:	7952      	ldrb	r2, [r2, #5]
 8009330:	185b      	adds	r3, r3, r1
 8009332:	0612      	lsls	r2, r2, #24
 8009334:	189b      	adds	r3, r3, r2
 8009336:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009338:	9905      	ldr	r1, [sp, #20]
 800933a:	9807      	ldr	r0, [sp, #28]
 800933c:	5d4b      	ldrb	r3, [r1, r5]
 800933e:	5c09      	ldrb	r1, [r1, r0]
 8009340:	200f      	movs	r0, #15
 8009342:	3b01      	subs	r3, #1
 8009344:	4a66      	ldr	r2, [pc, #408]	; (80094e0 <PxMessagingTask+0x1054>)
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	58d2      	ldr	r2, [r2, r3]
 800934a:	4010      	ands	r0, r2
 800934c:	4288      	cmp	r0, r1
 800934e:	d008      	beq.n	8009362 <PxMessagingTask+0xed6>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009350:	4865      	ldr	r0, [pc, #404]	; (80094e8 <PxMessagingTask+0x105c>)
 8009352:	4684      	mov	ip, r0
 8009354:	4461      	add	r1, ip
 8009356:	400a      	ands	r2, r1
 8009358:	4961      	ldr	r1, [pc, #388]	; (80094e0 <PxMessagingTask+0x1054>)
 800935a:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800935c:	2314      	movs	r3, #20
 800935e:	4a63      	ldr	r2, [pc, #396]	; (80094ec <PxMessagingTask+0x1060>)
 8009360:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009362:	2240      	movs	r2, #64	; 0x40
 8009364:	4b62      	ldr	r3, [pc, #392]	; (80094f0 <PxMessagingTask+0x1064>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	4393      	bics	r3, r2
 800936a:	2b20      	cmp	r3, #32
 800936c:	d001      	beq.n	8009372 <PxMessagingTask+0xee6>
 800936e:	f7ff f942 	bl	80085f6 <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 8009372:	4b5e      	ldr	r3, [pc, #376]	; (80094ec <PxMessagingTask+0x1060>)
 8009374:	4a55      	ldr	r2, [pc, #340]	; (80094cc <PxMessagingTask+0x1040>)
 8009376:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009378:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800937a:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800937c:	2201      	movs	r2, #1
 800937e:	f7ff fba0 	bl	8008ac2 <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009382:	2004      	movs	r0, #4
 8009384:	f008 feb2 	bl	80120ec <malloc>
												if(temp32 != 0){
 8009388:	2800      	cmp	r0, #0
 800938a:	d00f      	beq.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800938c:	0403      	lsls	r3, r0, #16
 800938e:	4a54      	ldr	r2, [pc, #336]	; (80094e0 <PxMessagingTask+0x1054>)
 8009390:	3306      	adds	r3, #6
 8009392:	5193      	str	r3, [r2, r6]
 8009394:	e7c3      	b.n	800931e <PxMessagingTask+0xe92>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00c      	beq.n	80093b4 <PxMessagingTask+0xf28>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	195a      	adds	r2, r3, r5
 800939e:	78d3      	ldrb	r3, [r2, #3]
 80093a0:	7911      	ldrb	r1, [r2, #4]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	0409      	lsls	r1, r1, #16
 80093a6:	185b      	adds	r3, r3, r1
 80093a8:	7891      	ldrb	r1, [r2, #2]
 80093aa:	e7c0      	b.n	800932e <PxMessagingTask+0xea2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80093ac:	2312      	movs	r3, #18
 80093ae:	4a4f      	ldr	r2, [pc, #316]	; (80094ec <PxMessagingTask+0x1060>)
 80093b0:	7013      	strb	r3, [r2, #0]
 80093b2:	e7c1      	b.n	8009338 <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80093b4:	2004      	movs	r0, #4
 80093b6:	f008 fe99 	bl	80120ec <malloc>
												if(temp32 != 0){
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0f6      	beq.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80093be:	0403      	lsls	r3, r0, #16
 80093c0:	4a47      	ldr	r2, [pc, #284]	; (80094e0 <PxMessagingTask+0x1054>)
 80093c2:	3305      	adds	r3, #5
 80093c4:	5193      	str	r3, [r2, r6]
 80093c6:	e7e8      	b.n	800939a <PxMessagingTask+0xf0e>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	4940      	ldr	r1, [pc, #256]	; (80094cc <PxMessagingTask+0x1040>)
 80093cc:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	0a12      	lsrs	r2, r2, #8
 80093d2:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	0c12      	lsrs	r2, r2, #16
 80093d8:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093da:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80093dc:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093de:	0e1b      	lsrs	r3, r3, #24
 80093e0:	710b      	strb	r3, [r1, #4]
 80093e2:	e72b      	b.n	800923c <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80093e4:	881a      	ldrh	r2, [r3, #0]
 80093e6:	4939      	ldr	r1, [pc, #228]	; (80094cc <PxMessagingTask+0x1040>)
 80093e8:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093ea:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093ec:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093ee:	b21b      	sxth	r3, r3
 80093f0:	121b      	asrs	r3, r3, #8
 80093f2:	708b      	strb	r3, [r1, #2]
 80093f4:	e722      	b.n	800923c <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80093f6:	881a      	ldrh	r2, [r3, #0]
 80093f8:	4934      	ldr	r1, [pc, #208]	; (80094cc <PxMessagingTask+0x1040>)
 80093fa:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80093fc:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093fe:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009400:	0a1b      	lsrs	r3, r3, #8
 8009402:	708b      	strb	r3, [r1, #2]
 8009404:	e71a      	b.n	800923c <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009406:	4a31      	ldr	r2, [pc, #196]	; (80094cc <PxMessagingTask+0x1040>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800940c:	2202      	movs	r2, #2
 800940e:	e715      	b.n	800923c <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	492e      	ldr	r1, [pc, #184]	; (80094cc <PxMessagingTask+0x1040>)
 8009414:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	1212      	asrs	r2, r2, #8
 800941a:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	1412      	asrs	r2, r2, #16
 8009420:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009422:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009424:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009426:	161b      	asrs	r3, r3, #24
 8009428:	710b      	strb	r3, [r1, #4]
 800942a:	e707      	b.n	800923c <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	4927      	ldr	r1, [pc, #156]	; (80094cc <PxMessagingTask+0x1040>)
 8009430:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009432:	4b30      	ldr	r3, [pc, #192]	; (80094f4 <PxMessagingTask+0x1068>)
 8009434:	18d3      	adds	r3, r2, r3
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800943a:	4b2f      	ldr	r3, [pc, #188]	; (80094f8 <PxMessagingTask+0x106c>)
 800943c:	18d3      	adds	r3, r2, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009442:	4b2e      	ldr	r3, [pc, #184]	; (80094fc <PxMessagingTask+0x1070>)
 8009444:	469c      	mov	ip, r3
 8009446:	4462      	add	r2, ip
 8009448:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800944a:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800944c:	710b      	strb	r3, [r1, #4]
 800944e:	e6f5      	b.n	800923c <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 8009450:	2201      	movs	r2, #1
 8009452:	211f      	movs	r1, #31
 8009454:	4650      	mov	r0, sl
 8009456:	f7fe fe85 	bl	8008164 <SendMessageToModule>
 800945a:	464b      	mov	r3, r9
 800945c:	5d1f      	ldrb	r7, [r3, r4]
 800945e:	f7ff f8cd 	bl	80085fc <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009462:	9b05      	ldr	r3, [sp, #20]
 8009464:	2600      	movs	r6, #0
 8009466:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800946a:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800946c:	469c      	mov	ip, r3
 800946e:	1c68      	adds	r0, r5, #1
 8009470:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009472:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009474:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009476:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009478:	f7fa f966 	bl	8003748 <IsModuleParameter>
 800947c:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 800947e:	42b0      	cmp	r0, r6
 8009480:	d100      	bne.n	8009484 <PxMessagingTask+0xff8>
 8009482:	e0a4      	b.n	80095ce <PxMessagingTask+0x1142>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009484:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009486:	491e      	ldr	r1, [pc, #120]	; (8009500 <PxMessagingTask+0x1074>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 800948a:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800948c:	3b01      	subs	r3, #1
 800948e:	435a      	muls	r2, r3
 8009490:	4b1b      	ldr	r3, [pc, #108]	; (8009500 <PxMessagingTask+0x1074>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009492:	490e      	ldr	r1, [pc, #56]	; (80094cc <PxMessagingTask+0x1040>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009494:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009496:	4462      	add	r2, ip
 8009498:	7912      	ldrb	r2, [r2, #4]
 800949a:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800949c:	3a01      	subs	r2, #1
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	2a07      	cmp	r2, #7
 80094a2:	d900      	bls.n	80094a6 <PxMessagingTask+0x101a>
 80094a4:	e4f1      	b.n	8008e8a <PxMessagingTask+0x9fe>
 80094a6:	4917      	ldr	r1, [pc, #92]	; (8009504 <PxMessagingTask+0x1078>)
 80094a8:	0092      	lsls	r2, r2, #2
 80094aa:	588a      	ldr	r2, [r1, r2]
 80094ac:	4697      	mov	pc, r2
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	20000dfc 	.word	0x20000dfc
 80094b4:	20001fd4 	.word	0x20001fd4
 80094b8:	08018bac 	.word	0x08018bac
 80094bc:	20000032 	.word	0x20000032
 80094c0:	08017244 	.word	0x08017244
 80094c4:	e000ed00 	.word	0xe000ed00
 80094c8:	05fa0004 	.word	0x05fa0004
 80094cc:	20000b3c 	.word	0x20000b3c
 80094d0:	20000008 	.word	0x20000008
 80094d4:	20002098 	.word	0x20002098
 80094d8:	20000f0c 	.word	0x20000f0c
 80094dc:	20000c4a 	.word	0x20000c4a
 80094e0:	20006c08 	.word	0x20006c08
 80094e4:	08017268 	.word	0x08017268
 80094e8:	0000fff0 	.word	0x0000fff0
 80094ec:	20000c3c 	.word	0x20000c3c
 80094f0:	20006c00 	.word	0x20006c00
 80094f4:	20000001 	.word	0x20000001
 80094f8:	20000002 	.word	0x20000002
 80094fc:	20000003 	.word	0x20000003
 8009500:	20000094 	.word	0x20000094
 8009504:	08017288 	.word	0x08017288
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009508:	2b00      	cmp	r3, #0
 800950a:	d100      	bne.n	800950e <PxMessagingTask+0x1082>
 800950c:	e0ce      	b.n	80096ac <PxMessagingTask+0x1220>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800950e:	9b05      	ldr	r3, [sp, #20]
 8009510:	1959      	adds	r1, r3, r5
 8009512:	78ca      	ldrb	r2, [r1, #3]
 8009514:	788b      	ldrb	r3, [r1, #2]
 8009516:	0212      	lsls	r2, r2, #8
 8009518:	189b      	adds	r3, r3, r2
 800951a:	b21b      	sxth	r3, r3
 800951c:	8003      	strh	r3, [r0, #0]
 800951e:	e70b      	b.n	8009338 <PxMessagingTask+0xeac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	49d7      	ldr	r1, [pc, #860]	; (8009880 <PxMessagingTask+0x13f4>)
 8009524:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	1212      	asrs	r2, r2, #8
 800952a:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	1412      	asrs	r2, r2, #16
 8009530:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009532:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009534:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009536:	161b      	asrs	r3, r3, #24
 8009538:	70cb      	strb	r3, [r1, #3]
 800953a:	e67f      	b.n	800923c <PxMessagingTask+0xdb0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800953c:	2b00      	cmp	r3, #0
 800953e:	d100      	bne.n	8009542 <PxMessagingTask+0x10b6>
 8009540:	e0df      	b.n	8009702 <PxMessagingTask+0x1276>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009542:	9b05      	ldr	r3, [sp, #20]
 8009544:	195a      	adds	r2, r3, r5
 8009546:	78d3      	ldrb	r3, [r2, #3]
 8009548:	7911      	ldrb	r1, [r2, #4]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	0409      	lsls	r1, r1, #16
 800954e:	185b      	adds	r3, r3, r1
 8009550:	7891      	ldrb	r1, [r2, #2]
 8009552:	7952      	ldrb	r2, [r2, #5]
 8009554:	185b      	adds	r3, r3, r1
 8009556:	0612      	lsls	r2, r2, #24
 8009558:	189b      	adds	r3, r3, r2
 800955a:	4642      	mov	r2, r8
 800955c:	4641      	mov	r1, r8
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	2200      	movs	r2, #0
 8009562:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	e6e7      	b.n	8009338 <PxMessagingTask+0xeac>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009568:	9b05      	ldr	r3, [sp, #20]
 800956a:	4642      	mov	r2, r8
 800956c:	469c      	mov	ip, r3
 800956e:	2301      	movs	r3, #1
 8009570:	4465      	add	r5, ip
 8009572:	56eb      	ldrsb	r3, [r5, r3]
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	17db      	asrs	r3, r3, #31
 8009578:	6053      	str	r3, [r2, #4]
										break;
 800957a:	f7ff f930 	bl	80087de <PxMessagingTask+0x352>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00f      	beq.n	80095a2 <PxMessagingTask+0x1116>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	1959      	adds	r1, r3, r5
 8009586:	78ca      	ldrb	r2, [r1, #3]
 8009588:	788b      	ldrb	r3, [r1, #2]
 800958a:	0212      	lsls	r2, r2, #8
 800958c:	189b      	adds	r3, r3, r2
 800958e:	b29b      	uxth	r3, r3
 8009590:	8003      	strh	r3, [r0, #0]
 8009592:	e6d1      	b.n	8009338 <PxMessagingTask+0xeac>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009594:	4aba      	ldr	r2, [pc, #744]	; (8009880 <PxMessagingTask+0x13f4>)
 8009596:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 8009598:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 800959a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800959c:	2202      	movs	r2, #2
 800959e:	f7ff fa90 	bl	8008ac2 <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 80095a2:	2002      	movs	r0, #2
 80095a4:	f008 fda2 	bl	80120ec <malloc>
												if(temp32 != 0){
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d100      	bne.n	80095ae <PxMessagingTask+0x1122>
 80095ac:	e6fe      	b.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095ae:	0403      	lsls	r3, r0, #16
 80095b0:	4ab4      	ldr	r2, [pc, #720]	; (8009884 <PxMessagingTask+0x13f8>)
 80095b2:	3303      	adds	r3, #3
 80095b4:	5193      	str	r3, [r2, r6]
 80095b6:	e7e4      	b.n	8009582 <PxMessagingTask+0x10f6>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80095b8:	781a      	ldrb	r2, [r3, #0]
 80095ba:	49b1      	ldr	r1, [pc, #708]	; (8009880 <PxMessagingTask+0x13f4>)
 80095bc:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80095be:	785a      	ldrb	r2, [r3, #1]
 80095c0:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80095c2:	789a      	ldrb	r2, [r3, #2]
 80095c4:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80095c6:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 80095c8:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80095ca:	710b      	strb	r3, [r1, #4]
 80095cc:	e636      	b.n	800923c <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 80095ce:	2201      	movs	r2, #1
 80095d0:	211f      	movs	r1, #31
 80095d2:	4650      	mov	r0, sl
 80095d4:	f7fe fdc6 	bl	8008164 <SendMessageToModule>
 80095d8:	464b      	mov	r3, r9
 80095da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095dc:	5d1f      	ldrb	r7, [r3, r4]
 80095de:	f7ff f80d 	bl	80085fc <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00c      	beq.n	8009600 <PxMessagingTask+0x1174>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80095e6:	9b05      	ldr	r3, [sp, #20]
 80095e8:	195b      	adds	r3, r3, r5
 80095ea:	789b      	ldrb	r3, [r3, #2]
 80095ec:	b25b      	sxtb	r3, r3
 80095ee:	7003      	strb	r3, [r0, #0]
 80095f0:	e6a2      	b.n	8009338 <PxMessagingTask+0xeac>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00f      	beq.n	8009616 <PxMessagingTask+0x118a>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80095f6:	9b05      	ldr	r3, [sp, #20]
 80095f8:	195b      	adds	r3, r3, r5
 80095fa:	789b      	ldrb	r3, [r3, #2]
 80095fc:	7003      	strb	r3, [r0, #0]
 80095fe:	e69b      	b.n	8009338 <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009600:	2001      	movs	r0, #1
 8009602:	f008 fd73 	bl	80120ec <malloc>
												if(temp32 != 0){
 8009606:	2800      	cmp	r0, #0
 8009608:	d100      	bne.n	800960c <PxMessagingTask+0x1180>
 800960a:	e6cf      	b.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800960c:	0403      	lsls	r3, r0, #16
 800960e:	4a9d      	ldr	r2, [pc, #628]	; (8009884 <PxMessagingTask+0x13f8>)
 8009610:	3302      	adds	r3, #2
 8009612:	5193      	str	r3, [r2, r6]
 8009614:	e7e7      	b.n	80095e6 <PxMessagingTask+0x115a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009616:	2001      	movs	r0, #1
 8009618:	f008 fd68 	bl	80120ec <malloc>
												if(temp32 != 0){
 800961c:	2800      	cmp	r0, #0
 800961e:	d100      	bne.n	8009622 <PxMessagingTask+0x1196>
 8009620:	e6c4      	b.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009622:	0403      	lsls	r3, r0, #16
 8009624:	19df      	adds	r7, r3, r7
 8009626:	4b97      	ldr	r3, [pc, #604]	; (8009884 <PxMessagingTask+0x13f8>)
 8009628:	519f      	str	r7, [r3, r6]
 800962a:	e7e4      	b.n	80095f6 <PxMessagingTask+0x116a>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800962c:	2313      	movs	r3, #19
 800962e:	4a96      	ldr	r2, [pc, #600]	; (8009888 <PxMessagingTask+0x13fc>)
 8009630:	7013      	strb	r3, [r2, #0]
 8009632:	e696      	b.n	8009362 <PxMessagingTask+0xed6>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009634:	9b05      	ldr	r3, [sp, #20]
 8009636:	195b      	adds	r3, r3, r5
 8009638:	789e      	ldrb	r6, [r3, #2]
 800963a:	78da      	ldrb	r2, [r3, #3]
 800963c:	0636      	lsls	r6, r6, #24
 800963e:	0412      	lsls	r2, r2, #16
 8009640:	18b6      	adds	r6, r6, r2
 8009642:	795a      	ldrb	r2, [r3, #5]
 8009644:	18b6      	adds	r6, r6, r2
 8009646:	791a      	ldrb	r2, [r3, #4]
 8009648:	0212      	lsls	r2, r2, #8
 800964a:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800964c:	22e0      	movs	r2, #224	; 0xe0
 800964e:	0612      	lsls	r2, r2, #24
 8009650:	18b1      	adds	r1, r6, r2
 8009652:	4a8e      	ldr	r2, [pc, #568]	; (800988c <PxMessagingTask+0x1400>)
 8009654:	4291      	cmp	r1, r2
 8009656:	d900      	bls.n	800965a <PxMessagingTask+0x11ce>
 8009658:	e0ac      	b.n	80097b4 <PxMessagingTask+0x1328>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	3b01      	subs	r3, #1
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b07      	cmp	r3, #7
 8009662:	d900      	bls.n	8009666 <PxMessagingTask+0x11da>
 8009664:	e67d      	b.n	8009362 <PxMessagingTask+0xed6>
 8009666:	4a8a      	ldr	r2, [pc, #552]	; (8009890 <PxMessagingTask+0x1404>)
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	58d3      	ldr	r3, [r2, r3]
 800966c:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800966e:	9b05      	ldr	r3, [sp, #20]
 8009670:	469c      	mov	ip, r3
 8009672:	4465      	add	r5, ip
 8009674:	78ab      	ldrb	r3, [r5, #2]
 8009676:	786a      	ldrb	r2, [r5, #1]
 8009678:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800967a:	189b      	adds	r3, r3, r2
 800967c:	4642      	mov	r2, r8
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	17db      	asrs	r3, r3, #31
 8009682:	6053      	str	r3, [r2, #4]
										break;
 8009684:	f7ff f8ab 	bl	80087de <PxMessagingTask+0x352>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	469c      	mov	ip, r3
 800968c:	4465      	add	r5, ip
 800968e:	78ab      	ldrb	r3, [r5, #2]
 8009690:	786a      	ldrb	r2, [r5, #1]
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	189b      	adds	r3, r3, r2
 8009696:	78ea      	ldrb	r2, [r5, #3]
 8009698:	0412      	lsls	r2, r2, #16
 800969a:	189b      	adds	r3, r3, r2
 800969c:	792a      	ldrb	r2, [r5, #4]
 800969e:	0612      	lsls	r2, r2, #24
 80096a0:	e7eb      	b.n	800967a <PxMessagingTask+0x11ee>
										messageParams[0] =*(__IO uint8_t* )temp32;
 80096a2:	4a77      	ldr	r2, [pc, #476]	; (8009880 <PxMessagingTask+0x13f4>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 80096a8:	2201      	movs	r2, #1
 80096aa:	e5c7      	b.n	800923c <PxMessagingTask+0xdb0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 80096ac:	2002      	movs	r0, #2
 80096ae:	f008 fd1d 	bl	80120ec <malloc>
												if(temp32 != 0){
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d100      	bne.n	80096b8 <PxMessagingTask+0x122c>
 80096b6:	e679      	b.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80096b8:	0403      	lsls	r3, r0, #16
 80096ba:	4a72      	ldr	r2, [pc, #456]	; (8009884 <PxMessagingTask+0x13f8>)
 80096bc:	3304      	adds	r3, #4
 80096be:	5193      	str	r3, [r2, r6]
 80096c0:	e725      	b.n	800950e <PxMessagingTask+0x1082>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80096c2:	2310      	movs	r3, #16
 80096c4:	f7ff f850 	bl	8008768 <PxMessagingTask+0x2dc>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80096c8:	9b05      	ldr	r3, [sp, #20]
 80096ca:	469c      	mov	ip, r3
 80096cc:	4465      	add	r5, ip
 80096ce:	78ab      	ldrb	r3, [r5, #2]
 80096d0:	78ea      	ldrb	r2, [r5, #3]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	0412      	lsls	r2, r2, #16
 80096d6:	189b      	adds	r3, r3, r2
 80096d8:	786a      	ldrb	r2, [r5, #1]
 80096da:	189b      	adds	r3, r3, r2
 80096dc:	792a      	ldrb	r2, [r5, #4]
 80096de:	0612      	lsls	r2, r2, #24
 80096e0:	189b      	adds	r3, r3, r2
 80096e2:	4642      	mov	r2, r8
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	2300      	movs	r3, #0
 80096e8:	6053      	str	r3, [r2, #4]
										break;
 80096ea:	f7ff f878 	bl	80087de <PxMessagingTask+0x352>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	4642      	mov	r2, r8
 80096f2:	469c      	mov	ip, r3
 80096f4:	4465      	add	r5, ip
 80096f6:	786b      	ldrb	r3, [r5, #1]
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	2300      	movs	r3, #0
 80096fc:	6053      	str	r3, [r2, #4]
										break;
 80096fe:	f7ff f86e 	bl	80087de <PxMessagingTask+0x352>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009702:	2004      	movs	r0, #4
 8009704:	f008 fcf2 	bl	80120ec <malloc>
												if(temp32 != 0){
 8009708:	2800      	cmp	r0, #0
 800970a:	d100      	bne.n	800970e <PxMessagingTask+0x1282>
 800970c:	e64e      	b.n	80093ac <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800970e:	0403      	lsls	r3, r0, #16
 8009710:	4a5c      	ldr	r2, [pc, #368]	; (8009884 <PxMessagingTask+0x13f8>)
 8009712:	3307      	adds	r3, #7
 8009714:	5193      	str	r3, [r2, r6]
 8009716:	e714      	b.n	8009542 <PxMessagingTask+0x10b6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009718:	9b05      	ldr	r3, [sp, #20]
 800971a:	469c      	mov	ip, r3
 800971c:	4465      	add	r5, ip
 800971e:	79eb      	ldrb	r3, [r5, #7]
 8009720:	79aa      	ldrb	r2, [r5, #6]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	189b      	adds	r3, r3, r2
 8009726:	7a2a      	ldrb	r2, [r5, #8]
 8009728:	0412      	lsls	r2, r2, #16
 800972a:	189b      	adds	r3, r3, r2
 800972c:	7a6a      	ldrb	r2, [r5, #9]
 800972e:	0612      	lsls	r2, r2, #24
 8009730:	189b      	adds	r3, r3, r2
 8009732:	6033      	str	r3, [r6, #0]
											break;
 8009734:	e615      	b.n	8009362 <PxMessagingTask+0xed6>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	469c      	mov	ip, r3
 800973a:	4465      	add	r5, ip
 800973c:	79eb      	ldrb	r3, [r5, #7]
 800973e:	7a2a      	ldrb	r2, [r5, #8]
 8009740:	021b      	lsls	r3, r3, #8
 8009742:	0412      	lsls	r2, r2, #16
 8009744:	189b      	adds	r3, r3, r2
 8009746:	79aa      	ldrb	r2, [r5, #6]
 8009748:	e7ef      	b.n	800972a <PxMessagingTask+0x129e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800974a:	9b05      	ldr	r3, [sp, #20]
 800974c:	469c      	mov	ip, r3
 800974e:	4465      	add	r5, ip
 8009750:	79ea      	ldrb	r2, [r5, #7]
 8009752:	79ab      	ldrb	r3, [r5, #6]
 8009754:	0212      	lsls	r2, r2, #8
 8009756:	189b      	adds	r3, r3, r2
 8009758:	b21b      	sxth	r3, r3
 800975a:	8033      	strh	r3, [r6, #0]
											break;
 800975c:	e601      	b.n	8009362 <PxMessagingTask+0xed6>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	469c      	mov	ip, r3
 8009762:	4465      	add	r5, ip
 8009764:	79ea      	ldrb	r2, [r5, #7]
 8009766:	79ab      	ldrb	r3, [r5, #6]
 8009768:	0212      	lsls	r2, r2, #8
 800976a:	189b      	adds	r3, r3, r2
 800976c:	b29b      	uxth	r3, r3
 800976e:	8033      	strh	r3, [r6, #0]
											break;
 8009770:	e5f7      	b.n	8009362 <PxMessagingTask+0xed6>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009772:	9b05      	ldr	r3, [sp, #20]
 8009774:	469c      	mov	ip, r3
 8009776:	2306      	movs	r3, #6
 8009778:	4465      	add	r5, ip
 800977a:	56eb      	ldrsb	r3, [r5, r3]
 800977c:	7033      	strb	r3, [r6, #0]
											break;
 800977e:	e5f0      	b.n	8009362 <PxMessagingTask+0xed6>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009780:	9b05      	ldr	r3, [sp, #20]
 8009782:	469c      	mov	ip, r3
 8009784:	4465      	add	r5, ip
 8009786:	79ab      	ldrb	r3, [r5, #6]
 8009788:	7033      	strb	r3, [r6, #0]
											break;
 800978a:	e5ea      	b.n	8009362 <PxMessagingTask+0xed6>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800978c:	9b05      	ldr	r3, [sp, #20]
 800978e:	4641      	mov	r1, r8
 8009790:	469c      	mov	ip, r3
 8009792:	4465      	add	r5, ip
 8009794:	79eb      	ldrb	r3, [r5, #7]
 8009796:	7a2a      	ldrb	r2, [r5, #8]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	0412      	lsls	r2, r2, #16
 800979c:	189b      	adds	r3, r3, r2
 800979e:	79aa      	ldrb	r2, [r5, #6]
 80097a0:	189b      	adds	r3, r3, r2
 80097a2:	7a6a      	ldrb	r2, [r5, #9]
 80097a4:	0612      	lsls	r2, r2, #24
 80097a6:	189b      	adds	r3, r3, r2
 80097a8:	4642      	mov	r2, r8
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	2200      	movs	r2, #0
 80097ae:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 80097b0:	6033      	str	r3, [r6, #0]
											break;
 80097b2:	e5d6      	b.n	8009362 <PxMessagingTask+0xed6>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80097b4:	23f8      	movs	r3, #248	; 0xf8
 80097b6:	4a37      	ldr	r2, [pc, #220]	; (8009894 <PxMessagingTask+0x1408>)
 80097b8:	061b      	lsls	r3, r3, #24
 80097ba:	18f3      	adds	r3, r6, r3
 80097bc:	4293      	cmp	r3, r2
 80097be:	d903      	bls.n	80097c8 <PxMessagingTask+0x133c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 80097c0:	2215      	movs	r2, #21
 80097c2:	4b31      	ldr	r3, [pc, #196]	; (8009888 <PxMessagingTask+0x13fc>)
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	e5cc      	b.n	8009362 <PxMessagingTask+0xed6>
									HAL_FLASH_Unlock();
 80097c8:	f006 fc4a 	bl	8010060 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 80097cc:	9b08      	ldr	r3, [sp, #32]
 80097ce:	2b22      	cmp	r3, #34	; 0x22
 80097d0:	d102      	bne.n	80097d8 <PxMessagingTask+0x134c>
										EraseSector(temp32);
 80097d2:	0030      	movs	r0, r6
 80097d4:	f001 fbbc 	bl	800af50 <EraseSector>
									if(responseStatus == BOS_OK){
 80097d8:	4b2b      	ldr	r3, [pc, #172]	; (8009888 <PxMessagingTask+0x13fc>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d110      	bne.n	8009802 <PxMessagingTask+0x1376>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 80097e0:	9b05      	ldr	r3, [sp, #20]
 80097e2:	195b      	adds	r3, r3, r5
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b07      	cmp	r3, #7
 80097ec:	d809      	bhi.n	8009802 <PxMessagingTask+0x1376>
 80097ee:	4a2a      	ldr	r2, [pc, #168]	; (8009898 <PxMessagingTask+0x140c>)
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	58d3      	ldr	r3, [r2, r3]
 80097f4:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80097f6:	6833      	ldr	r3, [r6, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	d020      	beq.n	800983e <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80097fc:	2316      	movs	r3, #22
 80097fe:	4a22      	ldr	r2, [pc, #136]	; (8009888 <PxMessagingTask+0x13fc>)
 8009800:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 8009802:	f006 fc3f 	bl	8010084 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d100      	bne.n	800980e <PxMessagingTask+0x1382>
 800980c:	e5a9      	b.n	8009362 <PxMessagingTask+0xed6>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800980e:	2316      	movs	r3, #22
 8009810:	4a1d      	ldr	r2, [pc, #116]	; (8009888 <PxMessagingTask+0x13fc>)
 8009812:	7013      	strb	r3, [r2, #0]
 8009814:	e5a5      	b.n	8009362 <PxMessagingTask+0xed6>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009816:	8832      	ldrh	r2, [r6, #0]
 8009818:	4b20      	ldr	r3, [pc, #128]	; (800989c <PxMessagingTask+0x1410>)
 800981a:	429a      	cmp	r2, r3
 800981c:	d1ee      	bne.n	80097fc <PxMessagingTask+0x1370>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800981e:	9b05      	ldr	r3, [sp, #20]
 8009820:	469c      	mov	ip, r3
 8009822:	4465      	add	r5, ip
 8009824:	79ea      	ldrb	r2, [r5, #7]
 8009826:	79ab      	ldrb	r3, [r5, #6]
 8009828:	0212      	lsls	r2, r2, #8
 800982a:	18d2      	adds	r2, r2, r3
 800982c:	17d3      	asrs	r3, r2, #31
 800982e:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 8009830:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009832:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009834:	0031      	movs	r1, r6
 8009836:	f006 fc73 	bl	8010120 <HAL_FLASH_Program>
 800983a:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800983c:	e7e1      	b.n	8009802 <PxMessagingTask+0x1376>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800983e:	9b05      	ldr	r3, [sp, #20]
 8009840:	4641      	mov	r1, r8
 8009842:	469c      	mov	ip, r3
 8009844:	4465      	add	r5, ip
 8009846:	79ea      	ldrb	r2, [r5, #7]
 8009848:	7a2b      	ldrb	r3, [r5, #8]
 800984a:	0212      	lsls	r2, r2, #8
 800984c:	041b      	lsls	r3, r3, #16
 800984e:	18d2      	adds	r2, r2, r3
 8009850:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009852:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009854:	18d2      	adds	r2, r2, r3
 8009856:	7a6b      	ldrb	r3, [r5, #9]
 8009858:	061b      	lsls	r3, r3, #24
 800985a:	18d2      	adds	r2, r2, r3
 800985c:	2300      	movs	r3, #0
 800985e:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009860:	0031      	movs	r1, r6
 8009862:	f006 fc5d 	bl	8010120 <HAL_FLASH_Program>
 8009866:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009868:	e7cb      	b.n	8009802 <PxMessagingTask+0x1376>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800986a:	8832      	ldrh	r2, [r6, #0]
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <PxMessagingTask+0x1410>)
 800986e:	429a      	cmp	r2, r3
 8009870:	d1c4      	bne.n	80097fc <PxMessagingTask+0x1370>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009872:	9b05      	ldr	r3, [sp, #20]
 8009874:	469c      	mov	ip, r3
 8009876:	4465      	add	r5, ip
 8009878:	79aa      	ldrb	r2, [r5, #6]
 800987a:	2300      	movs	r3, #0
 800987c:	e7d7      	b.n	800982e <PxMessagingTask+0x13a2>
 800987e:	46c0      	nop			; (mov r8, r8)
 8009880:	20000b3c 	.word	0x20000b3c
 8009884:	20006c08 	.word	0x20006c08
 8009888:	20000c3c 	.word	0x20000c3c
 800988c:	00007fff 	.word	0x00007fff
 8009890:	080172a8 	.word	0x080172a8
 8009894:	0001ffff 	.word	0x0001ffff
 8009898:	080172c8 	.word	0x080172c8
 800989c:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80098a0:	6833      	ldr	r3, [r6, #0]
 80098a2:	3301      	adds	r3, #1
 80098a4:	d1aa      	bne.n	80097fc <PxMessagingTask+0x1370>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80098a6:	9b05      	ldr	r3, [sp, #20]
 80098a8:	4641      	mov	r1, r8
 80098aa:	469c      	mov	ip, r3
 80098ac:	4465      	add	r5, ip
 80098ae:	79ea      	ldrb	r2, [r5, #7]
 80098b0:	7a2b      	ldrb	r3, [r5, #8]
 80098b2:	0212      	lsls	r2, r2, #8
 80098b4:	041b      	lsls	r3, r3, #16
 80098b6:	18d2      	adds	r2, r2, r3
 80098b8:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 80098ba:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80098bc:	18d2      	adds	r2, r2, r3
 80098be:	7a6b      	ldrb	r3, [r5, #9]
 80098c0:	061b      	lsls	r3, r3, #24
 80098c2:	18d2      	adds	r2, r2, r3
 80098c4:	2300      	movs	r3, #0
 80098c6:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 80098c8:	0031      	movs	r1, r6
 80098ca:	f006 fc29 	bl	8010120 <HAL_FLASH_Program>
 80098ce:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 80098d0:	e797      	b.n	8009802 <PxMessagingTask+0x1376>
 80098d2:	46c0      	nop			; (mov r8, r8)

080098d4 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80098d4:	2310      	movs	r3, #16
{
 80098d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d8:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80098da:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098dc:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098de:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80098e0:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098e2:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098e4:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098e6:	0276      	lsls	r6, r6, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098e8:	035b      	lsls	r3, r3, #13
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80098ea:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098ec:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80098ee:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80098f0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098f2:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80098f4:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098f6:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098f8:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80098fa:	f006 fea9 	bl	8010650 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80098fe:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009900:	2101      	movs	r1, #1
 8009902:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8009904:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009906:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009908:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800990a:	9703      	str	r7, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800990c:	f007 f942 	bl	8010b94 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8009910:	4b1a      	ldr	r3, [pc, #104]	; (800997c <SystemClock_Config+0xa8>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009912:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8009914:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009916:	9508      	str	r5, [sp, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009918:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800991a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800991c:	f007 fac6 	bl	8010eac <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 8009920:	2180      	movs	r1, #128	; 0x80
 8009922:	4d17      	ldr	r5, [pc, #92]	; (8009980 <SystemClock_Config+0xac>)
 8009924:	0549      	lsls	r1, r1, #21
 8009926:	69ea      	ldr	r2, [r5, #28]
 8009928:	430a      	orrs	r2, r1
 800992a:	61ea      	str	r2, [r5, #28]
 800992c:	69eb      	ldr	r3, [r5, #28]
 800992e:	400b      	ands	r3, r1
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 8009934:	f006 fe82 	bl	801063c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009938:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800993a:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009940:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009942:	f007 fab3 	bl	8010eac <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8009946:	f007 fa83 	bl	8010e50 <HAL_RCC_GetHCLKFreq>
 800994a:	21fa      	movs	r1, #250	; 0xfa
 800994c:	0089      	lsls	r1, r1, #2
 800994e:	f7f6 fbff 	bl	8000150 <__udivsi3>
 8009952:	f005 fd1d 	bl	800f390 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009956:	2004      	movs	r0, #4
 8009958:	f005 fd36 	bl	800f3c8 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800995c:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE();
 800995e:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009960:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE();
 8009962:	4323      	orrs	r3, r4
 8009964:	61ab      	str	r3, [r5, #24]
 8009966:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009968:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE();
 800996a:	401c      	ands	r4, r3
 800996c:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800996e:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE();
 8009970:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009972:	f005 fccd 	bl	800f310 <HAL_NVIC_SetPriority>
	
}
 8009976:	b01b      	add	sp, #108	; 0x6c
 8009978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	00040003 	.word	0x00040003
 8009980:	40021000 	.word	0x40021000

08009984 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 8009984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009986:	46de      	mov	lr, fp
 8009988:	4657      	mov	r7, sl
 800998a:	464e      	mov	r6, r9
 800998c:	4645      	mov	r5, r8
 800998e:	b5e0      	push	{r5, r6, r7, lr}
 8009990:	b087      	sub	sp, #28
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 8009992:	2215      	movs	r2, #21
 8009994:	2100      	movs	r1, #0
 8009996:	4668      	mov	r0, sp
 8009998:	f008 fdfe 	bl	8012598 <memset>
	
	HAL_FLASH_Unlock();
 800999c:	f006 fb60 	bl	8010060 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 80099a0:	486a      	ldr	r0, [pc, #424]	; (8009b4c <SaveToRO+0x1c8>)
 80099a2:	f006 fc8d 	bl	80102c0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80099a6:	486a      	ldr	r0, [pc, #424]	; (8009b50 <SaveToRO+0x1cc>)
 80099a8:	f006 fb76 	bl	8010098 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d16e      	bne.n	8009a8e <SaveToRO+0x10a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80099b0:	2202      	movs	r2, #2
 80099b2:	4c68      	ldr	r4, [pc, #416]	; (8009b54 <SaveToRO+0x1d0>)
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	4393      	bics	r3, r2
 80099b8:	6123      	str	r3, [r4, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 80099ba:	4b67      	ldr	r3, [pc, #412]	; (8009b58 <SaveToRO+0x1d4>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d000      	beq.n	80099c4 <SaveToRO+0x40>
 80099c2:	e06e      	b.n	8009aa2 <SaveToRO+0x11e>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80099c4:	4b65      	ldr	r3, [pc, #404]	; (8009b5c <SaveToRO+0x1d8>)
 80099c6:	469a      	mov	sl, r3
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d100      	bne.n	80099d0 <SaveToRO+0x4c>
 80099ce:	e0b8      	b.n	8009b42 <SaveToRO+0x1be>
 80099d0:	4b63      	ldr	r3, [pc, #396]	; (8009b60 <SaveToRO+0x1dc>)
 80099d2:	2500      	movs	r5, #0
 80099d4:	4c63      	ldr	r4, [pc, #396]	; (8009b64 <SaveToRO+0x1e0>)
 80099d6:	4699      	mov	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
				if (FlashStatus != HAL_OK) {
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80099d8:	4f5e      	ldr	r7, [pc, #376]	; (8009b54 <SaveToRO+0x1d0>)
 80099da:	e006      	b.n	80099ea <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80099dc:	4653      	mov	r3, sl
 80099de:	3501      	adds	r5, #1
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b2ed      	uxtb	r5, r5
 80099e4:	42ab      	cmp	r3, r5
 80099e6:	d800      	bhi.n	80099ea <SaveToRO+0x66>
 80099e8:	e0ab      	b.n	8009b42 <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 80099ea:	00ab      	lsls	r3, r5, #2
 80099ec:	1959      	adds	r1, r3, r5
 80099ee:	4698      	mov	r8, r3
 80099f0:	464b      	mov	r3, r9
 80099f2:	0089      	lsls	r1, r1, #2
 80099f4:	5c5b      	ldrb	r3, [r3, r1]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0f0      	beq.n	80099dc <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 80099fa:	466b      	mov	r3, sp
 80099fc:	22fe      	movs	r2, #254	; 0xfe
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 80099fe:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009a00:	701a      	strb	r2, [r3, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 8009a02:	4449      	add	r1, r9
 8009a04:	2214      	movs	r2, #20
 8009a06:	f008 fdbe 	bl	8012586 <memcpy>
 8009a0a:	2314      	movs	r3, #20
 8009a0c:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 8009a0e:	466b      	mov	r3, sp
 8009a10:	44a3      	add	fp, r4
 8009a12:	1b1e      	subs	r6, r3, r4
 8009a14:	465b      	mov	r3, fp
 8009a16:	46ab      	mov	fp, r5
 8009a18:	001d      	movs	r5, r3
 8009a1a:	5b32      	ldrh	r2, [r6, r4]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	0021      	movs	r1, r4
 8009a20:	2001      	movs	r0, #1
 8009a22:	f006 fb7d 	bl	8010120 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a26:	484a      	ldr	r0, [pc, #296]	; (8009b50 <SaveToRO+0x1cc>)
 8009a28:	f006 fb36 	bl	8010098 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d12e      	bne.n	8009a8e <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a30:	2201      	movs	r2, #1
 8009a32:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009a34:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a36:	4393      	bics	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 8009a3a:	42ac      	cmp	r4, r5
 8009a3c:	d1ed      	bne.n	8009a1a <SaveToRO+0x96>
 8009a3e:	465d      	mov	r5, fp
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a40:	4643      	mov	r3, r8
 8009a42:	195b      	adds	r3, r3, r5
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	444b      	add	r3, r9
 8009a48:	2600      	movs	r6, #0
 8009a4a:	4698      	mov	r8, r3
 8009a4c:	0025      	movs	r5, r4
 8009a4e:	e012      	b.n	8009a76 <SaveToRO+0xf2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 8009a50:	0073      	lsls	r3, r6, #1
 8009a52:	5ae2      	ldrh	r2, [r4, r3]
 8009a54:	0029      	movs	r1, r5
 8009a56:	2300      	movs	r3, #0
 8009a58:	2001      	movs	r0, #1
 8009a5a:	f006 fb61 	bl	8010120 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a5e:	483c      	ldr	r0, [pc, #240]	; (8009b50 <SaveToRO+0x1cc>)
 8009a60:	f006 fb1a 	bl	8010098 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d112      	bne.n	8009a8e <SaveToRO+0x10a>
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a68:	2201      	movs	r2, #1
 8009a6a:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a6c:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a6e:	4393      	bics	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009a72:	3502      	adds	r5, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a74:	b2f6      	uxtb	r6, r6
 8009a76:	4643      	mov	r3, r8
 8009a78:	68dc      	ldr	r4, [r3, #12]
 8009a7a:	0020      	movs	r0, r4
 8009a7c:	f7f6 fb4c 	bl	8000118 <strlen>
 8009a80:	3001      	adds	r0, #1
 8009a82:	0840      	lsrs	r0, r0, #1
 8009a84:	4286      	cmp	r6, r0
 8009a86:	d3e3      	bcc.n	8009a50 <SaveToRO+0xcc>
 8009a88:	002c      	movs	r4, r5
 8009a8a:	465d      	mov	r5, fp
 8009a8c:	e7a6      	b.n	80099dc <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009a8e:	4b36      	ldr	r3, [pc, #216]	; (8009b68 <SaveToRO+0x1e4>)
 8009a90:	69d8      	ldr	r0, [r3, #28]
 8009a92:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 8009a94:	b007      	add	sp, #28
 8009a96:	bc3c      	pop	{r2, r3, r4, r5}
 8009a98:	4690      	mov	r8, r2
 8009a9a:	4699      	mov	r9, r3
 8009a9c:	46a2      	mov	sl, r4
 8009a9e:	46ab      	mov	fp, r5
 8009aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 8009aa2:	4a32      	ldr	r2, [pc, #200]	; (8009b6c <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009aa4:	4929      	ldr	r1, [pc, #164]	; (8009b4c <SaveToRO+0x1c8>)
		temp = (uint16_t) (N<<8) + myID;
 8009aa6:	4693      	mov	fp, r2
 8009aa8:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009aaa:	2001      	movs	r0, #1
		temp = (uint16_t) (N<<8) + myID;
 8009aac:	0212      	lsls	r2, r2, #8
 8009aae:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009ab0:	b292      	uxth	r2, r2
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f006 fb34 	bl	8010120 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009ab8:	4825      	ldr	r0, [pc, #148]	; (8009b50 <SaveToRO+0x1cc>)
 8009aba:	f006 faed 	bl	8010098 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d1e5      	bne.n	8009a8e <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	4393      	bics	r3, r2
 8009ac8:	6123      	str	r3, [r4, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 8009aca:	465b      	mov	r3, fp
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d100      	bne.n	8009ad4 <SaveToRO+0x150>
 8009ad2:	e777      	b.n	80099c4 <SaveToRO+0x40>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	469a      	mov	sl, r3
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009ada:	2602      	movs	r6, #2
 8009adc:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ade:	46a0      	mov	r8, r4
 8009ae0:	4653      	mov	r3, sl
 8009ae2:	1e5d      	subs	r5, r3, #1
 8009ae4:	2316      	movs	r3, #22
 8009ae6:	464f      	mov	r7, r9
 8009ae8:	435d      	muls	r5, r3
 8009aea:	464b      	mov	r3, r9
 8009aec:	3716      	adds	r7, #22
 8009aee:	195c      	adds	r4, r3, r5
 8009af0:	197f      	adds	r7, r7, r5
 8009af2:	e002      	b.n	8009afa <SaveToRO+0x176>
 8009af4:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009af6:	42a7      	cmp	r7, r4
 8009af8:	d01a      	beq.n	8009b30 <SaveToRO+0x1ac>
				if (array[i-1][0]) {
 8009afa:	464b      	mov	r3, r9
 8009afc:	5b5b      	ldrh	r3, [r3, r5]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0f8      	beq.n	8009af4 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <SaveToRO+0x1c8>)
 8009b04:	8822      	ldrh	r2, [r4, #0]
 8009b06:	18f1      	adds	r1, r6, r3
 8009b08:	2001      	movs	r0, #1
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f006 fb08 	bl	8010120 <HAL_FLASH_Program>
					add += 2;
 8009b10:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009b12:	480f      	ldr	r0, [pc, #60]	; (8009b50 <SaveToRO+0x1cc>)
					add += 2;
 8009b14:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009b16:	f006 fabf 	bl	8010098 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d1b7      	bne.n	8009a8e <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009b1e:	4643      	mov	r3, r8
 8009b20:	2201      	movs	r2, #1
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	3402      	adds	r4, #2
 8009b26:	4393      	bics	r3, r2
 8009b28:	4642      	mov	r2, r8
 8009b2a:	6113      	str	r3, [r2, #16]
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009b2c:	42a7      	cmp	r7, r4
 8009b2e:	d1e4      	bne.n	8009afa <SaveToRO+0x176>
		for(uint8_t i=1 ; i<=N ; i++)
 8009b30:	4653      	mov	r3, sl
 8009b32:	3301      	adds	r3, #1
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	469a      	mov	sl, r3
 8009b38:	465b      	mov	r3, fp
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	4553      	cmp	r3, sl
 8009b3e:	d2cf      	bcs.n	8009ae0 <SaveToRO+0x15c>
 8009b40:	e740      	b.n	80099c4 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009b42:	f006 fa9f 	bl	8010084 <HAL_FLASH_Lock>
	return result;
 8009b46:	2000      	movs	r0, #0
 8009b48:	e7a4      	b.n	8009a94 <SaveToRO+0x110>
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	0801d800 	.word	0x0801d800
 8009b50:	0000c350 	.word	0x0000c350
 8009b54:	40022000 	.word	0x40022000
 8009b58:	20000a98 	.word	0x20000a98
 8009b5c:	2000182c 	.word	0x2000182c
 8009b60:	20006c9c 	.word	0x20006c9c
 8009b64:	0801dc00 	.word	0x0801dc00
 8009b68:	20007210 	.word	0x20007210
 8009b6c:	20000008 	.word	0x20000008
 8009b70:	20000f0c 	.word	0x20000f0c

08009b74 <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
	// Clear the array 
	memset(array, 0, sizeof(array));
 8009b74:	228f      	movs	r2, #143	; 0x8f
{
 8009b76:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009b78:	0092      	lsls	r2, r2, #2
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4805      	ldr	r0, [pc, #20]	; (8009b94 <ClearROtopology+0x20>)
 8009b7e:	f008 fd0b 	bl	8012598 <memset>
	N = 1; myID = 0;
 8009b82:	2201      	movs	r2, #1
 8009b84:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <ClearROtopology+0x24>)
 8009b86:	701a      	strb	r2, [r3, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <ClearROtopology+0x28>)
 8009b8c:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 8009b8e:	f7ff fef9 	bl	8009984 <SaveToRO>
}
 8009b92:	bd10      	pop	{r4, pc}
 8009b94:	20000f0c 	.word	0x20000f0c
 8009b98:	20000008 	.word	0x20000008
 8009b9c:	20000a98 	.word	0x20000a98

08009ba0 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009ba0:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009ba2:	f003 f927 	bl	800cdf4 <GetUart>

	huart->Init.BaudRate =57600;
 8009ba6:	23e1      	movs	r3, #225	; 0xe1
 8009ba8:	021b      	lsls	r3, r3, #8
 8009baa:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009bac:	2380      	movs	r3, #128	; 0x80
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009bb2:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8009bb4:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009bb6:	015b      	lsls	r3, r3, #5
 8009bb8:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009bba:	f008 f8c9 	bl	8011d50 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009bbe:	2120      	movs	r1, #32
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	6813      	ldr	r3, [r2, #0]
 8009bc4:	430b      	orrs	r3, r1
 8009bc6:	6013      	str	r3, [r2, #0]
}
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	46c0      	nop			; (mov r8, r8)

08009bcc <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bce:	46ce      	mov	lr, r9
 8009bd0:	4647      	mov	r7, r8
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 8009bd6:	4c2a      	ldr	r4, [pc, #168]	; (8009c80 <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009bd8:	b085      	sub	sp, #20
 8009bda:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 8009bdc:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009bde:	000f      	movs	r7, r1
 8009be0:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8009be2:	f7f9 ff8d 	bl	8003b00 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009be6:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 8009be8:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d11a      	bne.n	8009c24 <remoteBootloaderUpdate+0x58>
	if(src == myID){
 8009bee:	7823      	ldrb	r3, [r4, #0]
 8009bf0:	454b      	cmp	r3, r9
 8009bf2:	d03b      	beq.n	8009c6c <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009bf4:	0028      	movs	r0, r5
 8009bf6:	f7ff ffd3 	bl	8009ba0 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009bfa:	0030      	movs	r0, r6
 8009bfc:	f7ff ffd0 	bl	8009ba0 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009c00:	2300      	movs	r3, #0
 8009c02:	7821      	ldrb	r1, [r4, #0]
 8009c04:	9303      	str	r3, [sp, #12]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	9302      	str	r3, [sp, #8]
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	3303      	adds	r3, #3
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	0032      	movs	r2, r6
 8009c12:	000b      	movs	r3, r1
 8009c14:	0028      	movs	r0, r5
 8009c16:	f7fe fac9 	bl	80081ac <StartScastDMAStream>
}
 8009c1a:	b005      	add	sp, #20
 8009c1c:	bc0c      	pop	{r2, r3}
 8009c1e:	4690      	mov	r8, r2
 8009c20:	4699      	mov	r9, r3
 8009c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009c24:	7823      	ldrb	r3, [r4, #0]
 8009c26:	42bb      	cmp	r3, r7
 8009c28:	d01c      	beq.n	8009c64 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8009c2a:	454b      	cmp	r3, r9
 8009c2c:	d1e2      	bne.n	8009bf4 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c2e:	f003 fb19 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c32:	4b14      	ldr	r3, [pc, #80]	; (8009c84 <remoteBootloaderUpdate+0xb8>)
 8009c34:	003a      	movs	r2, r7
 8009c36:	6819      	ldr	r1, [r3, #0]
 8009c38:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c3a:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c3c:	f008 fea6 	bl	801298c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <remoteBootloaderUpdate+0xbc>)
 8009c42:	4648      	mov	r0, r9
 8009c44:	6819      	ldr	r1, [r3, #0]
 8009c46:	f008 fec1 	bl	80129cc <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009c4a:	4648      	mov	r0, r9
 8009c4c:	f7f6 fa64 	bl	8000118 <strlen>
 8009c50:	2332      	movs	r3, #50	; 0x32
 8009c52:	b282      	uxth	r2, r0
 8009c54:	4649      	mov	r1, r9
 8009c56:	0028      	movs	r0, r5
 8009c58:	f003 f89a 	bl	800cd90 <writePxITMutex>
		Delay_ms(100);
 8009c5c:	2064      	movs	r0, #100	; 0x64
 8009c5e:	f005 f895 	bl	800ed8c <HAL_Delay>
 8009c62:	e7c7      	b.n	8009bf4 <remoteBootloaderUpdate+0x28>
 8009c64:	4646      	mov	r6, r8
	if(src == myID){
 8009c66:	454f      	cmp	r7, r9
 8009c68:	d1c4      	bne.n	8009bf4 <remoteBootloaderUpdate+0x28>
 8009c6a:	e7e0      	b.n	8009c2e <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c6c:	f003 fafa 	bl	800d264 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009c70:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <remoteBootloaderUpdate+0xc0>)
 8009c72:	003a      	movs	r2, r7
 8009c74:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c76:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009c78:	f008 fe88 	bl	801298c <sprintf>
 8009c7c:	e7e0      	b.n	8009c40 <remoteBootloaderUpdate+0x74>
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	20000a98 	.word	0x20000a98
 8009c84:	20000058 	.word	0x20000058
 8009c88:	20000054 	.word	0x20000054
 8009c8c:	2000005c 	.word	0x2000005c

08009c90 <Module_Peripheral_Init>:
/*-----------------------------------------------------------*/
/* --- H1DR1 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 8009c90:	b510      	push	{r4, lr}
	/* Array ports */
	MX_USART1_UART_Init();
 8009c92:	f002 feb9 	bl	800ca08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009c96:	f002 fec1 	bl	800ca1c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009c9a:	f002 fed7 	bl	800ca4c <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 8009c9e:	f002 feed 	bl	800ca7c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8009ca2:	f002 ff03 	bl	800caac <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8009ca6:	f002 ff19 	bl	800cadc <MX_USART6_UART_Init>
	
	/* RS485 port */
	RS485_DE_RE_Init();
 8009caa:	f001 f9ad 	bl	800b008 <RS485_DE_RE_Init>
	RS485_RECEIVER_EN();
 8009cae:	2180      	movs	r1, #128	; 0x80
 8009cb0:	2090      	movs	r0, #144	; 0x90
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	0149      	lsls	r1, r1, #5
 8009cb6:	05c0      	lsls	r0, r0, #23
 8009cb8:	f006 fcb4 	bl	8010624 <HAL_GPIO_WritePin>

}
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	46c0      	nop			; (mov r8, r8)

08009cc0 <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 8009cc0:	4770      	bx	lr
 8009cc2:	46c0      	nop			; (mov r8, r8)

08009cc4 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 8009cc4:	6800      	ldr	r0, [r0, #0]
 8009cc6:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <GetPort+0x48>)
 8009cc8:	4298      	cmp	r0, r3
 8009cca:	d014      	beq.n	8009cf6 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 8009ccc:	4b10      	ldr	r3, [pc, #64]	; (8009d10 <GetPort+0x4c>)
 8009cce:	4298      	cmp	r0, r3
 8009cd0:	d015      	beq.n	8009cfe <GetPort+0x3a>
			return P2;
	else if (huart->Instance == USART6)
 8009cd2:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <GetPort+0x50>)
 8009cd4:	4298      	cmp	r0, r3
 8009cd6:	d014      	beq.n	8009d02 <GetPort+0x3e>
			return P3;
	else if (huart->Instance == USART3)
 8009cd8:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <GetPort+0x54>)
 8009cda:	4298      	cmp	r0, r3
 8009cdc:	d00d      	beq.n	8009cfa <GetPort+0x36>
			return P4;
	else if (huart->Instance == USART5)
 8009cde:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <GetPort+0x58>)
 8009ce0:	4298      	cmp	r0, r3
 8009ce2:	d010      	beq.n	8009d06 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART1)
			return P6;
		
	return 0;
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <GetPort+0x5c>)
 8009ce6:	469c      	mov	ip, r3
 8009ce8:	4460      	add	r0, ip
 8009cea:	4243      	negs	r3, r0
 8009cec:	4158      	adcs	r0, r3
 8009cee:	2306      	movs	r3, #6
 8009cf0:	4240      	negs	r0, r0
 8009cf2:	4018      	ands	r0, r3
}
 8009cf4:	4770      	bx	lr
			return P1;
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	e7fc      	b.n	8009cf4 <GetPort+0x30>
			return P4;
 8009cfa:	2004      	movs	r0, #4
 8009cfc:	e7fa      	b.n	8009cf4 <GetPort+0x30>
			return P2;
 8009cfe:	2002      	movs	r0, #2
 8009d00:	e7f8      	b.n	8009cf4 <GetPort+0x30>
			return P3;
 8009d02:	2003      	movs	r0, #3
 8009d04:	e7f6      	b.n	8009cf4 <GetPort+0x30>
			return P5;
 8009d06:	2005      	movs	r0, #5
 8009d08:	e7f4      	b.n	8009cf4 <GetPort+0x30>
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	40004c00 	.word	0x40004c00
 8009d10:	40004400 	.word	0x40004400
 8009d14:	40011400 	.word	0x40011400
 8009d18:	40004800 	.word	0x40004800
 8009d1c:	40005000 	.word	0x40005000
 8009d20:	bffec800 	.word	0xbffec800

08009d24 <SetupBridgeMode>:
*/
Module_Status SetupBridgeMode(uint8_t Source_p, uint32_t baud_rate)
{

	// Set module mode
	H1DR1_Mode=BRIDGE;
 8009d24:	2201      	movs	r2, #1
 8009d26:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <SetupBridgeMode+0x58>)
{
 8009d28:	b570      	push	{r4, r5, r6, lr}
	H1DR1_Mode=BRIDGE;
 8009d2a:	701a      	strb	r2, [r3, #0]
	Src_port=Source_p;
 8009d2c:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <SetupBridgeMode+0x5c>)
{
 8009d2e:	0006      	movs	r6, r0
	Src_port=Source_p;
 8009d30:	7018      	strb	r0, [r3, #0]
	if(baud_rate<=19200 && baud_rate>=2400)
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <SetupBridgeMode+0x60>)
{
 8009d34:	000d      	movs	r5, r1
	if(baud_rate<=19200 && baud_rate>=2400)
 8009d36:	18ca      	adds	r2, r1, r3
 8009d38:	4b13      	ldr	r3, [pc, #76]	; (8009d88 <SetupBridgeMode+0x64>)
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d81b      	bhi.n	8009d76 <SetupBridgeMode+0x52>
	{
	// Reinit the RS485 port to required settings 
		if ( MB_PORT_Init(baud_rate, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1) == H1DR1_OK )
 8009d3e:	2300      	movs	r3, #0
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	0028      	movs	r0, r5
 8009d46:	f002 fe43 	bl	800c9d0 <MB_PORT_Init>
 8009d4a:	1e04      	subs	r4, r0, #0
 8009d4c:	d113      	bne.n	8009d76 <SetupBridgeMode+0x52>
		{    
		// Set the baud rate of the src port to baud_rate
			if ( UpdateBaudrate(Source_p, baud_rate) == BOS_OK )
 8009d4e:	0029      	movs	r1, r5
 8009d50:	0030      	movs	r0, r6
 8009d52:	f003 f83d 	bl	800cdd0 <UpdateBaudrate>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d10d      	bne.n	8009d76 <SetupBridgeMode+0x52>
			{
			// Bridge between the src port and RS485 port
				if ( Bridge(Source_p, P_RS485) == BOS_OK )
 8009d5a:	2106      	movs	r1, #6
 8009d5c:	0030      	movs	r0, r6
 8009d5e:	f7fa fcff 	bl	8004760 <Bridge>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d107      	bne.n	8009d76 <SetupBridgeMode+0x52>
				{
				// Set the RS485 to Receiver
					RS485_RECEIVER_EN();
 8009d66:	2180      	movs	r1, #128	; 0x80
 8009d68:	2090      	movs	r0, #144	; 0x90
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	0149      	lsls	r1, r1, #5
 8009d6e:	05c0      	lsls	r0, r0, #23
 8009d70:	f006 fc58 	bl	8010624 <HAL_GPIO_WritePin>
 8009d74:	e000      	b.n	8009d78 <SetupBridgeMode+0x54>
			}
			else return H1DR1_ERROR;
		}
		else return H1DR1_ERROR;	
	}
	else return H1DR1_ERROR;	
 8009d76:	24ff      	movs	r4, #255	; 0xff
}
 8009d78:	0020      	movs	r0, r4
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	20006fe4 	.word	0x20006fe4
 8009d80:	20006ef8 	.word	0x20006ef8
 8009d84:	fffff6a0 	.word	0xfffff6a0
 8009d88:	000041a0 	.word	0x000041a0

08009d8c <Module_MessagingTask>:
{
 8009d8c:	b510      	push	{r4, lr}
 8009d8e:	ab02      	add	r3, sp, #8
 8009d90:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 8009d92:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <Module_MessagingTask+0x44>)
 8009d94:	4298      	cmp	r0, r3
 8009d96:	d108      	bne.n	8009daa <Module_MessagingTask+0x1e>
			switch(cMessage[port-1][shift])
 8009d98:	3901      	subs	r1, #1
 8009d9a:	00cb      	lsls	r3, r1, #3
 8009d9c:	1a5b      	subs	r3, r3, r1
 8009d9e:	490d      	ldr	r1, [pc, #52]	; (8009dd4 <Module_MessagingTask+0x48>)
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	18c9      	adds	r1, r1, r3
 8009da4:	5c8b      	ldrb	r3, [r1, r2]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d001      	beq.n	8009dae <Module_MessagingTask+0x22>
}
 8009daa:	2001      	movs	r0, #1
 8009dac:	bd10      	pop	{r4, pc}
					Src_port = cMessage[port-1][1+shift];
 8009dae:	1889      	adds	r1, r1, r2
 8009db0:	7848      	ldrb	r0, [r1, #1]
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <Module_MessagingTask+0x4c>)
					Br_baud_rate = ( (uint32_t) cMessage[port-1][2+shift]  ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + ( (uint32_t) cMessage[port-1][4+shift] << 16 ) + ( (uint32_t)cMessage[port-1][5+shift] <<24);
 8009db4:	790a      	ldrb	r2, [r1, #4]
					Src_port = cMessage[port-1][1+shift];
 8009db6:	7018      	strb	r0, [r3, #0]
					Br_baud_rate = ( (uint32_t) cMessage[port-1][2+shift]  ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + ( (uint32_t) cMessage[port-1][4+shift] << 16 ) + ( (uint32_t)cMessage[port-1][5+shift] <<24);
 8009db8:	78cb      	ldrb	r3, [r1, #3]
 8009dba:	0412      	lsls	r2, r2, #16
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	189b      	adds	r3, r3, r2
 8009dc0:	788a      	ldrb	r2, [r1, #2]
 8009dc2:	7949      	ldrb	r1, [r1, #5]
 8009dc4:	189b      	adds	r3, r3, r2
 8009dc6:	0609      	lsls	r1, r1, #24
 8009dc8:	1859      	adds	r1, r3, r1
					SetupBridgeMode(Src_port,Br_baud_rate);
 8009dca:	f7ff ffab 	bl	8009d24 <SetupBridgeMode>
					break;
 8009dce:	e7ec      	b.n	8009daa <Module_MessagingTask+0x1e>
 8009dd0:	00000b54 	.word	0x00000b54
 8009dd4:	20000c90 	.word	0x20000c90
 8009dd8:	20006ef8 	.word	0x20006ef8

08009ddc <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 8009ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dde:	46de      	mov	lr, fp
 8009de0:	4657      	mov	r7, sl
 8009de2:	464e      	mov	r6, r9
 8009de4:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 8009de6:	2201      	movs	r2, #1
 8009de8:	4b5f      	ldr	r3, [pc, #380]	; (8009f68 <DMA_Init+0x18c>)
{
 8009dea:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 8009dec:	6959      	ldr	r1, [r3, #20]
{
 8009dee:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 8009df0:	4311      	orrs	r1, r2
 8009df2:	6159      	str	r1, [r3, #20]
 8009df4:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009df6:	4c5d      	ldr	r4, [pc, #372]	; (8009f6c <DMA_Init+0x190>)
	__DMA1_CLK_ENABLE();
 8009df8:	400a      	ands	r2, r1
 8009dfa:	9200      	str	r2, [sp, #0]
 8009dfc:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 8009dfe:	2202      	movs	r2, #2
 8009e00:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e02:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 8009e04:	4311      	orrs	r1, r2
 8009e06:	6159      	str	r1, [r3, #20]
 8009e08:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e0a:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 8009e0c:	401a      	ands	r2, r3
 8009e0e:	9201      	str	r2, [sp, #4]
 8009e10:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 8009e12:	4b57      	ldr	r3, [pc, #348]	; (8009f70 <DMA_Init+0x194>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e14:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 8009e16:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e18:	2320      	movs	r3, #32
 8009e1a:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e1c:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e1e:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e20:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e22:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e24:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e26:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e28:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e2a:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 8009e2c:	0020      	movs	r0, r4
 8009e2e:	f005 fbf7 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e32:	4b50      	ldr	r3, [pc, #320]	; (8009f74 <DMA_Init+0x198>)
	HAL_DMA_Init(hDMA);		
 8009e34:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009e36:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e38:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e3a:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e3c:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e3e:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e40:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e42:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e44:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e46:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 8009e48:	3038      	adds	r0, #56	; 0x38
 8009e4a:	f005 fbe9 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e4e:	4b4a      	ldr	r3, [pc, #296]	; (8009f78 <DMA_Init+0x19c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e50:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 8009e52:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e54:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 8009e56:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e58:	50e5      	str	r5, [r4, r3]
 8009e5a:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	50e2      	str	r2, [r4, r3]
 8009e60:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e62:	3304      	adds	r3, #4
 8009e64:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e66:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e68:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e6a:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e6c:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 8009e6e:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e70:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 8009e72:	f005 fbd5 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e76:	23a8      	movs	r3, #168	; 0xa8
 8009e78:	4a40      	ldr	r2, [pc, #256]	; (8009f7c <DMA_Init+0x1a0>)
	HAL_DMA_Init(hDMA);		
 8009e7a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009e7c:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e7e:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e80:	3304      	adds	r3, #4
 8009e82:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e84:	3304      	adds	r3, #4
 8009e86:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e88:	3304      	adds	r3, #4
 8009e8a:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e90:	3304      	adds	r3, #4
 8009e92:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e94:	3304      	adds	r3, #4
 8009e96:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e98:	3304      	adds	r3, #4
 8009e9a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e9c:	30a8      	adds	r0, #168	; 0xa8
 8009e9e:	f005 fbbf 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009ea2:	23e0      	movs	r3, #224	; 0xe0
 8009ea4:	4a36      	ldr	r2, [pc, #216]	; (8009f80 <DMA_Init+0x1a4>)
	HAL_DMA_Init(hDMA);		
 8009ea6:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009ea8:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009eaa:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009eac:	3304      	adds	r3, #4
 8009eae:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009eb8:	3304      	adds	r3, #4
 8009eba:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009ec8:	30e0      	adds	r0, #224	; 0xe0
 8009eca:	f005 fba9 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009ece:	238c      	movs	r3, #140	; 0x8c
 8009ed0:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <DMA_Init+0x1a8>)
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009ed6:	0020      	movs	r0, r4
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009ed8:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009eda:	3304      	adds	r3, #4
 8009edc:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009ede:	3304      	adds	r3, #4
 8009ee0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009eea:	3304      	adds	r3, #4
 8009eec:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009eee:	3304      	adds	r3, #4
 8009ef0:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009ef2:	3019      	adds	r0, #25
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009ef8:	30ff      	adds	r0, #255	; 0xff
 8009efa:	f005 fb91 	bl	800f620 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009efe:	4c22      	ldr	r4, [pc, #136]	; (8009f88 <DMA_Init+0x1ac>)
 8009f00:	4b22      	ldr	r3, [pc, #136]	; (8009f8c <DMA_Init+0x1b0>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009f02:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 8009f04:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f06:	2310      	movs	r3, #16
 8009f08:	469b      	mov	fp, r3
 8009f0a:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009f0c:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f0e:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f10:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 8009f12:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009f14:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 8009f16:	0020      	movs	r0, r4
 8009f18:	f005 fb82 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009f1c:	4b1c      	ldr	r3, [pc, #112]	; (8009f90 <DMA_Init+0x1b4>)
	HAL_DMA_Init(hDMA);		
 8009f1e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009f20:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f22:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009f24:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f26:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009f28:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f2a:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f2c:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 8009f2e:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009f30:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 8009f32:	3038      	adds	r0, #56	; 0x38
 8009f34:	f005 fb74 	bl	800f620 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009f38:	4b16      	ldr	r3, [pc, #88]	; (8009f94 <DMA_Init+0x1b8>)
	HAL_DMA_Init(hDMA);		
 8009f3a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009f3c:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f3e:	465b      	mov	r3, fp
 8009f40:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f42:	4653      	mov	r3, sl
 8009f44:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 8009f46:	464b      	mov	r3, r9
 8009f48:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009f4a:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009f4c:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009f4e:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f50:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009f52:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009f54:	3070      	adds	r0, #112	; 0x70
 8009f56:	f005 fb63 	bl	800f620 <HAL_DMA_Init>
}
 8009f5a:	b003      	add	sp, #12
 8009f5c:	bc3c      	pop	{r2, r3, r4, r5}
 8009f5e:	4690      	mov	r8, r2
 8009f60:	4699      	mov	r9, r3
 8009f62:	46a2      	mov	sl, r4
 8009f64:	46ab      	mov	fp, r5
 8009f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f68:	40021000 	.word	0x40021000
 8009f6c:	20002674 	.word	0x20002674
 8009f70:	40020008 	.word	0x40020008
 8009f74:	40020030 	.word	0x40020030
 8009f78:	40020058 	.word	0x40020058
 8009f7c:	4002006c 	.word	0x4002006c
 8009f80:	4002041c 	.word	0x4002041c
 8009f84:	40020430 	.word	0x40020430
 8009f88:	200025cc 	.word	0x200025cc
 8009f8c:	4002001c 	.word	0x4002001c
 8009f90:	40020044 	.word	0x40020044
 8009f94:	40020080 	.word	0x40020080

08009f98 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 8009f98:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 8009f9a:	1e44      	subs	r4, r0, #1
 8009f9c:	00e5      	lsls	r5, r4, #3
 8009f9e:	4e07      	ldr	r6, [pc, #28]	; (8009fbc <StopStreamDMA+0x24>)
 8009fa0:	1b2d      	subs	r5, r5, r4
 8009fa2:	00ed      	lsls	r5, r5, #3
 8009fa4:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 8009fa6:	f005 fb93 	bl	800f6d0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 8009fae:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 8009fb0:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 8009fb2:	4a03      	ldr	r2, [pc, #12]	; (8009fc0 <StopStreamDMA+0x28>)
 8009fb4:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 8009fb6:	4a03      	ldr	r2, [pc, #12]	; (8009fc4 <StopStreamDMA+0x2c>)
 8009fb8:	50a3      	str	r3, [r4, r2]

}
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	2000247c 	.word	0x2000247c
 8009fc0:	200019c0 	.word	0x200019c0
 8009fc4:	200019d8 	.word	0x200019d8

08009fc8 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 8009fc8:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 8009fca:	b570      	push	{r4, r5, r6, lr}
 8009fcc:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 8009fce:	4d0c      	ldr	r5, [pc, #48]	; (800a000 <SwitchMsgDMAToStream+0x38>)
 8009fd0:	1a24      	subs	r4, r4, r0
 8009fd2:	00e4      	lsls	r4, r4, #3
 8009fd4:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 8009fd6:	f005 fb7b 	bl	800f6d0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 8009fde:	4809      	ldr	r0, [pc, #36]	; (800a004 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 8009fe0:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 8009fe2:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009fe4:	1900      	adds	r0, r0, r4
 8009fe6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009fe8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 8009fea:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009fec:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009fee:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009ff0:	3320      	adds	r3, #32
 8009ff2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	015b      	lsls	r3, r3, #5
 8009ff8:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 8009ffa:	f005 fb11 	bl	800f620 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}
 800a000:	20002674 	.word	0x20002674
 800a004:	2000247c 	.word	0x2000247c

0800a008 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800a008:	6803      	ldr	r3, [r0, #0]
 800a00a:	4a21      	ldr	r2, [pc, #132]	; (800a090 <SetupDMAInterrupts+0x88>)
{
 800a00c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d01c      	beq.n	800a04c <SetupDMAInterrupts+0x44>
 800a012:	d80e      	bhi.n	800a032 <SetupDMAInterrupts+0x2a>
 800a014:	4a1f      	ldr	r2, [pc, #124]	; (800a094 <SetupDMAInterrupts+0x8c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d026      	beq.n	800a068 <SetupDMAInterrupts+0x60>
 800a01a:	d82d      	bhi.n	800a078 <SetupDMAInterrupts+0x70>
 800a01c:	4a1e      	ldr	r2, [pc, #120]	; (800a098 <SetupDMAInterrupts+0x90>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d131      	bne.n	800a086 <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800a022:	2009      	movs	r0, #9
 800a024:	2200      	movs	r2, #0
 800a026:	f005 f973 	bl	800f310 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800a02a:	2009      	movs	r0, #9
 800a02c:	f005 f99c 	bl	800f368 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a030:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a032:	4a1a      	ldr	r2, [pc, #104]	; (800a09c <SetupDMAInterrupts+0x94>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d017      	beq.n	800a068 <SetupDMAInterrupts+0x60>
 800a038:	d910      	bls.n	800a05c <SetupDMAInterrupts+0x54>
 800a03a:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <SetupDMAInterrupts+0x98>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d005      	beq.n	800a04c <SetupDMAInterrupts+0x44>
 800a040:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <SetupDMAInterrupts+0x9c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d002      	beq.n	800a04c <SetupDMAInterrupts+0x44>
 800a046:	4a18      	ldr	r2, [pc, #96]	; (800a0a8 <SetupDMAInterrupts+0xa0>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d1f1      	bne.n	800a030 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800a04c:	2200      	movs	r2, #0
 800a04e:	200b      	movs	r0, #11
 800a050:	f005 f95e 	bl	800f310 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a054:	200b      	movs	r0, #11
 800a056:	f005 f987 	bl	800f368 <HAL_NVIC_EnableIRQ>
}
 800a05a:	e7e9      	b.n	800a030 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a05c:	4a13      	ldr	r2, [pc, #76]	; (800a0ac <SetupDMAInterrupts+0xa4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d0f4      	beq.n	800a04c <SetupDMAInterrupts+0x44>
 800a062:	4a13      	ldr	r2, [pc, #76]	; (800a0b0 <SetupDMAInterrupts+0xa8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d1e3      	bne.n	800a030 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800a068:	2200      	movs	r2, #0
 800a06a:	200a      	movs	r0, #10
 800a06c:	f005 f950 	bl	800f310 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a070:	200a      	movs	r0, #10
 800a072:	f005 f979 	bl	800f368 <HAL_NVIC_EnableIRQ>
			break;
 800a076:	e7db      	b.n	800a030 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a078:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <SetupDMAInterrupts+0xac>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d0e6      	beq.n	800a04c <SetupDMAInterrupts+0x44>
 800a07e:	4a0e      	ldr	r2, [pc, #56]	; (800a0b8 <SetupDMAInterrupts+0xb0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d1d5      	bne.n	800a030 <SetupDMAInterrupts+0x28>
 800a084:	e7e2      	b.n	800a04c <SetupDMAInterrupts+0x44>
 800a086:	4a0d      	ldr	r2, [pc, #52]	; (800a0bc <SetupDMAInterrupts+0xb4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d0ed      	beq.n	800a068 <SetupDMAInterrupts+0x60>
 800a08c:	e7d0      	b.n	800a030 <SetupDMAInterrupts+0x28>
 800a08e:	46c0      	nop			; (mov r8, r8)
 800a090:	4002006c 	.word	0x4002006c
 800a094:	40020030 	.word	0x40020030
 800a098:	40020008 	.word	0x40020008
 800a09c:	4002041c 	.word	0x4002041c
 800a0a0:	40020444 	.word	0x40020444
 800a0a4:	40020458 	.word	0x40020458
 800a0a8:	40020430 	.word	0x40020430
 800a0ac:	40020080 	.word	0x40020080
 800a0b0:	40020408 	.word	0x40020408
 800a0b4:	40020044 	.word	0x40020044
 800a0b8:	40020058 	.word	0x40020058
 800a0bc:	4002001c 	.word	0x4002001c

0800a0c0 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800a0c0:	6803      	ldr	r3, [r0, #0]
 800a0c2:	4a1b      	ldr	r2, [pc, #108]	; (800a130 <UnSetupDMAInterrupts+0x70>)
{
 800a0c4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d018      	beq.n	800a0fc <UnSetupDMAInterrupts+0x3c>
 800a0ca:	d80a      	bhi.n	800a0e2 <UnSetupDMAInterrupts+0x22>
 800a0cc:	4a19      	ldr	r2, [pc, #100]	; (800a134 <UnSetupDMAInterrupts+0x74>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d01e      	beq.n	800a110 <UnSetupDMAInterrupts+0x50>
 800a0d2:	d821      	bhi.n	800a118 <UnSetupDMAInterrupts+0x58>
 800a0d4:	4a18      	ldr	r2, [pc, #96]	; (800a138 <UnSetupDMAInterrupts+0x78>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d125      	bne.n	800a126 <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800a0da:	2009      	movs	r0, #9
 800a0dc:	f005 f94e 	bl	800f37c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a0e0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a0e2:	4a16      	ldr	r2, [pc, #88]	; (800a13c <UnSetupDMAInterrupts+0x7c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d013      	beq.n	800a110 <UnSetupDMAInterrupts+0x50>
 800a0e8:	d90c      	bls.n	800a104 <UnSetupDMAInterrupts+0x44>
 800a0ea:	4a15      	ldr	r2, [pc, #84]	; (800a140 <UnSetupDMAInterrupts+0x80>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d005      	beq.n	800a0fc <UnSetupDMAInterrupts+0x3c>
 800a0f0:	4a14      	ldr	r2, [pc, #80]	; (800a144 <UnSetupDMAInterrupts+0x84>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d002      	beq.n	800a0fc <UnSetupDMAInterrupts+0x3c>
 800a0f6:	4a14      	ldr	r2, [pc, #80]	; (800a148 <UnSetupDMAInterrupts+0x88>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d1f1      	bne.n	800a0e0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a0fc:	200b      	movs	r0, #11
 800a0fe:	f005 f93d 	bl	800f37c <HAL_NVIC_DisableIRQ>
}
 800a102:	e7ed      	b.n	800a0e0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <UnSetupDMAInterrupts+0x8c>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d0f8      	beq.n	800a0fc <UnSetupDMAInterrupts+0x3c>
 800a10a:	4a11      	ldr	r2, [pc, #68]	; (800a150 <UnSetupDMAInterrupts+0x90>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d1e7      	bne.n	800a0e0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a110:	200a      	movs	r0, #10
 800a112:	f005 f933 	bl	800f37c <HAL_NVIC_DisableIRQ>
			break;
 800a116:	e7e3      	b.n	800a0e0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a118:	4a0e      	ldr	r2, [pc, #56]	; (800a154 <UnSetupDMAInterrupts+0x94>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d0ee      	beq.n	800a0fc <UnSetupDMAInterrupts+0x3c>
 800a11e:	4a0e      	ldr	r2, [pc, #56]	; (800a158 <UnSetupDMAInterrupts+0x98>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d1dd      	bne.n	800a0e0 <UnSetupDMAInterrupts+0x20>
 800a124:	e7ea      	b.n	800a0fc <UnSetupDMAInterrupts+0x3c>
 800a126:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <UnSetupDMAInterrupts+0x9c>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d0f1      	beq.n	800a110 <UnSetupDMAInterrupts+0x50>
 800a12c:	e7d8      	b.n	800a0e0 <UnSetupDMAInterrupts+0x20>
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	4002006c 	.word	0x4002006c
 800a134:	40020030 	.word	0x40020030
 800a138:	40020008 	.word	0x40020008
 800a13c:	4002041c 	.word	0x4002041c
 800a140:	40020444 	.word	0x40020444
 800a144:	40020458 	.word	0x40020458
 800a148:	40020430 	.word	0x40020430
 800a14c:	40020080 	.word	0x40020080
 800a150:	40020408 	.word	0x40020408
 800a154:	40020044 	.word	0x40020044
 800a158:	40020058 	.word	0x40020058
 800a15c:	4002001c 	.word	0x4002001c

0800a160 <DMA_MSG_TX_UnSetup>:
{	
 800a160:	b510      	push	{r4, lr}
 800a162:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a164:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a166:	f7ff ffab 	bl	800a0c0 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a16e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a170:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a172:	bd10      	pop	{r4, pc}

0800a174 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a174:	6803      	ldr	r3, [r0, #0]
 800a176:	4ac6      	ldr	r2, [pc, #792]	; (800a490 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800a178:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d03a      	beq.n	800a1f4 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a17e:	4ac5      	ldr	r2, [pc, #788]	; (800a494 <RemapAndLinkDMAtoUARTRx+0x320>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d058      	beq.n	800a236 <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a184:	4ac4      	ldr	r2, [pc, #784]	; (800a498 <RemapAndLinkDMAtoUARTRx+0x324>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d100      	bne.n	800a18c <RemapAndLinkDMAtoUARTRx+0x18>
 800a18a:	e093      	b.n	800a2b4 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a18c:	4ac3      	ldr	r2, [pc, #780]	; (800a49c <RemapAndLinkDMAtoUARTRx+0x328>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d100      	bne.n	800a194 <RemapAndLinkDMAtoUARTRx+0x20>
 800a192:	e0c0      	b.n	800a316 <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a194:	4ac2      	ldr	r2, [pc, #776]	; (800a4a0 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d100      	bne.n	800a19c <RemapAndLinkDMAtoUARTRx+0x28>
 800a19a:	e19d      	b.n	800a4d8 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a19c:	4ac1      	ldr	r2, [pc, #772]	; (800a4a4 <RemapAndLinkDMAtoUARTRx+0x330>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d100      	bne.n	800a1a4 <RemapAndLinkDMAtoUARTRx+0x30>
 800a1a2:	e1b9      	b.n	800a518 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a1a4:	4ac0      	ldr	r2, [pc, #768]	; (800a4a8 <RemapAndLinkDMAtoUARTRx+0x334>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d000      	beq.n	800a1ac <RemapAndLinkDMAtoUARTRx+0x38>
 800a1aa:	e265      	b.n	800a678 <RemapAndLinkDMAtoUARTRx+0x504>
 800a1ac:	680b      	ldr	r3, [r1, #0]
 800a1ae:	4abf      	ldr	r2, [pc, #764]	; (800a4ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d100      	bne.n	800a1b6 <RemapAndLinkDMAtoUARTRx+0x42>
 800a1b4:	e230      	b.n	800a618 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a1b6:	4abe      	ldr	r2, [pc, #760]	; (800a4b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d100      	bne.n	800a1be <RemapAndLinkDMAtoUARTRx+0x4a>
 800a1bc:	e237      	b.n	800a62e <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a1be:	4abd      	ldr	r2, [pc, #756]	; (800a4b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d100      	bne.n	800a1c6 <RemapAndLinkDMAtoUARTRx+0x52>
 800a1c4:	e235      	b.n	800a632 <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a1c6:	4abc      	ldr	r2, [pc, #752]	; (800a4b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d100      	bne.n	800a1ce <RemapAndLinkDMAtoUARTRx+0x5a>
 800a1cc:	e23d      	b.n	800a64a <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a1ce:	4abb      	ldr	r2, [pc, #748]	; (800a4bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d100      	bne.n	800a1d6 <RemapAndLinkDMAtoUARTRx+0x62>
 800a1d4:	e245      	b.n	800a662 <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a1d6:	4aba      	ldr	r2, [pc, #744]	; (800a4c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d145      	bne.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800a1dc:	4ab9      	ldr	r2, [pc, #740]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a1de:	23a8      	movs	r3, #168	; 0xa8
 800a1e0:	4db9      	ldr	r5, [pc, #740]	; (800a4c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a1e2:	58d4      	ldr	r4, [r2, r3]
 800a1e4:	402c      	ands	r4, r5
 800a1e6:	50d4      	str	r4, [r2, r3]
 800a1e8:	24e0      	movs	r4, #224	; 0xe0
 800a1ea:	58d5      	ldr	r5, [r2, r3]
 800a1ec:	0124      	lsls	r4, r4, #4
 800a1ee:	432c      	orrs	r4, r5
 800a1f0:	50d4      	str	r4, [r2, r3]
 800a1f2:	e039      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a1f4:	680b      	ldr	r3, [r1, #0]
 800a1f6:	4aad      	ldr	r2, [pc, #692]	; (800a4ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d100      	bne.n	800a1fe <RemapAndLinkDMAtoUARTRx+0x8a>
 800a1fc:	e07e      	b.n	800a2fc <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a1fe:	4aac      	ldr	r2, [pc, #688]	; (800a4b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d100      	bne.n	800a206 <RemapAndLinkDMAtoUARTRx+0x92>
 800a204:	e085      	b.n	800a312 <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a206:	4aab      	ldr	r2, [pc, #684]	; (800a4b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d030      	beq.n	800a26e <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a20c:	4aaa      	ldr	r2, [pc, #680]	; (800a4b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d039      	beq.n	800a286 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a212:	4aaa      	ldr	r2, [pc, #680]	; (800a4bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d042      	beq.n	800a29e <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a218:	4aa9      	ldr	r2, [pc, #676]	; (800a4c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d124      	bne.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800a21e:	4aa9      	ldr	r2, [pc, #676]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a220:	23a8      	movs	r3, #168	; 0xa8
 800a222:	4da9      	ldr	r5, [pc, #676]	; (800a4c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a224:	58d4      	ldr	r4, [r2, r3]
 800a226:	402c      	ands	r4, r5
 800a228:	50d4      	str	r4, [r2, r3]
 800a22a:	2480      	movs	r4, #128	; 0x80
 800a22c:	58d5      	ldr	r5, [r2, r3]
 800a22e:	0124      	lsls	r4, r4, #4
 800a230:	432c      	orrs	r4, r5
 800a232:	50d4      	str	r4, [r2, r3]
 800a234:	e018      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a236:	680b      	ldr	r3, [r1, #0]
 800a238:	4a9c      	ldr	r2, [pc, #624]	; (800a4ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d100      	bne.n	800a240 <RemapAndLinkDMAtoUARTRx+0xcc>
 800a23e:	e0b0      	b.n	800a3a2 <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a240:	4a9b      	ldr	r2, [pc, #620]	; (800a4b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d100      	bne.n	800a248 <RemapAndLinkDMAtoUARTRx+0xd4>
 800a246:	e0b7      	b.n	800a3b8 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a248:	4a9a      	ldr	r2, [pc, #616]	; (800a4b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d100      	bne.n	800a250 <RemapAndLinkDMAtoUARTRx+0xdc>
 800a24e:	e0bf      	b.n	800a3d0 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a250:	4a99      	ldr	r2, [pc, #612]	; (800a4b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d100      	bne.n	800a258 <RemapAndLinkDMAtoUARTRx+0xe4>
 800a256:	e0c7      	b.n	800a3e8 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a258:	4a98      	ldr	r2, [pc, #608]	; (800a4bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d100      	bne.n	800a260 <RemapAndLinkDMAtoUARTRx+0xec>
 800a25e:	e0cf      	b.n	800a400 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a260:	4a97      	ldr	r2, [pc, #604]	; (800a4c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d100      	bne.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a266:	e0d6      	b.n	800a416 <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800a268:	6641      	str	r1, [r0, #100]	; 0x64
 800a26a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800a26e:	23a8      	movs	r3, #168	; 0xa8
 800a270:	4a96      	ldr	r2, [pc, #600]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a272:	4d97      	ldr	r5, [pc, #604]	; (800a4d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a274:	58d4      	ldr	r4, [r2, r3]
 800a276:	402c      	ands	r4, r5
 800a278:	50d4      	str	r4, [r2, r3]
 800a27a:	2480      	movs	r4, #128	; 0x80
 800a27c:	58d5      	ldr	r5, [r2, r3]
 800a27e:	0324      	lsls	r4, r4, #12
 800a280:	432c      	orrs	r4, r5
 800a282:	50d4      	str	r4, [r2, r3]
 800a284:	e7f0      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800a286:	23a8      	movs	r3, #168	; 0xa8
 800a288:	4a90      	ldr	r2, [pc, #576]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a28a:	4d92      	ldr	r5, [pc, #584]	; (800a4d4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a28c:	58d4      	ldr	r4, [r2, r3]
 800a28e:	402c      	ands	r4, r5
 800a290:	50d4      	str	r4, [r2, r3]
 800a292:	2480      	movs	r4, #128	; 0x80
 800a294:	58d5      	ldr	r5, [r2, r3]
 800a296:	0424      	lsls	r4, r4, #16
 800a298:	432c      	orrs	r4, r5
 800a29a:	50d4      	str	r4, [r2, r3]
 800a29c:	e7e4      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800a29e:	23a8      	movs	r3, #168	; 0xa8
 800a2a0:	25f0      	movs	r5, #240	; 0xf0
 800a2a2:	4a88      	ldr	r2, [pc, #544]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a2a4:	58d4      	ldr	r4, [r2, r3]
 800a2a6:	43ac      	bics	r4, r5
 800a2a8:	50d4      	str	r4, [r2, r3]
 800a2aa:	58d4      	ldr	r4, [r2, r3]
 800a2ac:	3d70      	subs	r5, #112	; 0x70
 800a2ae:	432c      	orrs	r4, r5
 800a2b0:	50d4      	str	r4, [r2, r3]
 800a2b2:	e7d9      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a2b4:	680b      	ldr	r3, [r1, #0]
 800a2b6:	4a7d      	ldr	r2, [pc, #500]	; (800a4ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d100      	bne.n	800a2be <RemapAndLinkDMAtoUARTRx+0x14a>
 800a2bc:	e0ad      	b.n	800a41a <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a2be:	4a7c      	ldr	r2, [pc, #496]	; (800a4b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d100      	bne.n	800a2c6 <RemapAndLinkDMAtoUARTRx+0x152>
 800a2c4:	e0b4      	b.n	800a430 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a2c6:	4a7b      	ldr	r2, [pc, #492]	; (800a4b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d100      	bne.n	800a2ce <RemapAndLinkDMAtoUARTRx+0x15a>
 800a2cc:	e0b2      	b.n	800a434 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a2ce:	4a7a      	ldr	r2, [pc, #488]	; (800a4b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d100      	bne.n	800a2d6 <RemapAndLinkDMAtoUARTRx+0x162>
 800a2d4:	e0ba      	b.n	800a44c <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a2d6:	4a79      	ldr	r2, [pc, #484]	; (800a4bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d100      	bne.n	800a2de <RemapAndLinkDMAtoUARTRx+0x16a>
 800a2dc:	e0c2      	b.n	800a464 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a2de:	4a78      	ldr	r2, [pc, #480]	; (800a4c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d1c1      	bne.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800a2e4:	4a77      	ldr	r2, [pc, #476]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a2e6:	23a8      	movs	r3, #168	; 0xa8
 800a2e8:	4d77      	ldr	r5, [pc, #476]	; (800a4c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a2ea:	58d4      	ldr	r4, [r2, r3]
 800a2ec:	402c      	ands	r4, r5
 800a2ee:	50d4      	str	r4, [r2, r3]
 800a2f0:	24a0      	movs	r4, #160	; 0xa0
 800a2f2:	58d5      	ldr	r5, [r2, r3]
 800a2f4:	0124      	lsls	r4, r4, #4
 800a2f6:	432c      	orrs	r4, r5
 800a2f8:	50d4      	str	r4, [r2, r3]
 800a2fa:	e7b5      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a2fc:	23a8      	movs	r3, #168	; 0xa8
 800a2fe:	250f      	movs	r5, #15
 800a300:	4a72      	ldr	r2, [pc, #456]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a302:	58d4      	ldr	r4, [r2, r3]
 800a304:	43ac      	bics	r4, r5
 800a306:	50d4      	str	r4, [r2, r3]
 800a308:	58d4      	ldr	r4, [r2, r3]
 800a30a:	3d07      	subs	r5, #7
 800a30c:	432c      	orrs	r4, r5
 800a30e:	50d4      	str	r4, [r2, r3]
 800a310:	e7aa      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a312:	4a6e      	ldr	r2, [pc, #440]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a314:	e784      	b.n	800a220 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a316:	680b      	ldr	r3, [r1, #0]
 800a318:	4a64      	ldr	r2, [pc, #400]	; (800a4ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d01c      	beq.n	800a358 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a31e:	4a64      	ldr	r2, [pc, #400]	; (800a4b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d024      	beq.n	800a36e <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a324:	4a63      	ldr	r2, [pc, #396]	; (800a4b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d023      	beq.n	800a372 <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a32a:	4a63      	ldr	r2, [pc, #396]	; (800a4b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d02c      	beq.n	800a38a <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a330:	4a62      	ldr	r2, [pc, #392]	; (800a4bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d100      	bne.n	800a338 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800a336:	e0a0      	b.n	800a47a <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a338:	4a61      	ldr	r2, [pc, #388]	; (800a4c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d000      	beq.n	800a340 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800a33e:	e793      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800a340:	4a60      	ldr	r2, [pc, #384]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a342:	23a8      	movs	r3, #168	; 0xa8
 800a344:	4d60      	ldr	r5, [pc, #384]	; (800a4c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a346:	58d4      	ldr	r4, [r2, r3]
 800a348:	402c      	ands	r4, r5
 800a34a:	50d4      	str	r4, [r2, r3]
 800a34c:	24b0      	movs	r4, #176	; 0xb0
 800a34e:	58d5      	ldr	r5, [r2, r3]
 800a350:	0124      	lsls	r4, r4, #4
 800a352:	432c      	orrs	r4, r5
 800a354:	50d4      	str	r4, [r2, r3]
 800a356:	e787      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800a358:	23a8      	movs	r3, #168	; 0xa8
 800a35a:	250f      	movs	r5, #15
 800a35c:	4a5b      	ldr	r2, [pc, #364]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a35e:	58d4      	ldr	r4, [r2, r3]
 800a360:	43ac      	bics	r4, r5
 800a362:	50d4      	str	r4, [r2, r3]
 800a364:	58d4      	ldr	r4, [r2, r3]
 800a366:	3d04      	subs	r5, #4
 800a368:	432c      	orrs	r4, r5
 800a36a:	50d4      	str	r4, [r2, r3]
 800a36c:	e77c      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800a36e:	4a57      	ldr	r2, [pc, #348]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a370:	e7e7      	b.n	800a342 <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800a372:	23a8      	movs	r3, #168	; 0xa8
 800a374:	4a55      	ldr	r2, [pc, #340]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a376:	4d56      	ldr	r5, [pc, #344]	; (800a4d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a378:	58d4      	ldr	r4, [r2, r3]
 800a37a:	402c      	ands	r4, r5
 800a37c:	50d4      	str	r4, [r2, r3]
 800a37e:	24b0      	movs	r4, #176	; 0xb0
 800a380:	58d5      	ldr	r5, [r2, r3]
 800a382:	0324      	lsls	r4, r4, #12
 800a384:	432c      	orrs	r4, r5
 800a386:	50d4      	str	r4, [r2, r3]
 800a388:	e76e      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800a38a:	23a8      	movs	r3, #168	; 0xa8
 800a38c:	4a4f      	ldr	r2, [pc, #316]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a38e:	4d51      	ldr	r5, [pc, #324]	; (800a4d4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a390:	58d4      	ldr	r4, [r2, r3]
 800a392:	402c      	ands	r4, r5
 800a394:	50d4      	str	r4, [r2, r3]
 800a396:	24b0      	movs	r4, #176	; 0xb0
 800a398:	58d5      	ldr	r5, [r2, r3]
 800a39a:	0424      	lsls	r4, r4, #16
 800a39c:	432c      	orrs	r4, r5
 800a39e:	50d4      	str	r4, [r2, r3]
 800a3a0:	e762      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800a3a2:	23a8      	movs	r3, #168	; 0xa8
 800a3a4:	250f      	movs	r5, #15
 800a3a6:	4a49      	ldr	r2, [pc, #292]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a3a8:	58d4      	ldr	r4, [r2, r3]
 800a3aa:	43ac      	bics	r4, r5
 800a3ac:	50d4      	str	r4, [r2, r3]
 800a3ae:	58d4      	ldr	r4, [r2, r3]
 800a3b0:	3d06      	subs	r5, #6
 800a3b2:	432c      	orrs	r4, r5
 800a3b4:	50d4      	str	r4, [r2, r3]
 800a3b6:	e757      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800a3b8:	4a44      	ldr	r2, [pc, #272]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a3ba:	23a8      	movs	r3, #168	; 0xa8
 800a3bc:	4d42      	ldr	r5, [pc, #264]	; (800a4c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a3be:	58d4      	ldr	r4, [r2, r3]
 800a3c0:	402c      	ands	r4, r5
 800a3c2:	50d4      	str	r4, [r2, r3]
 800a3c4:	2490      	movs	r4, #144	; 0x90
 800a3c6:	58d5      	ldr	r5, [r2, r3]
 800a3c8:	0124      	lsls	r4, r4, #4
 800a3ca:	432c      	orrs	r4, r5
 800a3cc:	50d4      	str	r4, [r2, r3]
 800a3ce:	e74b      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800a3d0:	23a8      	movs	r3, #168	; 0xa8
 800a3d2:	4a3e      	ldr	r2, [pc, #248]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a3d4:	4d3e      	ldr	r5, [pc, #248]	; (800a4d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a3d6:	58d4      	ldr	r4, [r2, r3]
 800a3d8:	402c      	ands	r4, r5
 800a3da:	50d4      	str	r4, [r2, r3]
 800a3dc:	2490      	movs	r4, #144	; 0x90
 800a3de:	58d5      	ldr	r5, [r2, r3]
 800a3e0:	0324      	lsls	r4, r4, #12
 800a3e2:	432c      	orrs	r4, r5
 800a3e4:	50d4      	str	r4, [r2, r3]
 800a3e6:	e73f      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800a3e8:	23a8      	movs	r3, #168	; 0xa8
 800a3ea:	4a38      	ldr	r2, [pc, #224]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a3ec:	4d39      	ldr	r5, [pc, #228]	; (800a4d4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a3ee:	58d4      	ldr	r4, [r2, r3]
 800a3f0:	402c      	ands	r4, r5
 800a3f2:	50d4      	str	r4, [r2, r3]
 800a3f4:	2490      	movs	r4, #144	; 0x90
 800a3f6:	58d5      	ldr	r5, [r2, r3]
 800a3f8:	0424      	lsls	r4, r4, #16
 800a3fa:	432c      	orrs	r4, r5
 800a3fc:	50d4      	str	r4, [r2, r3]
 800a3fe:	e733      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800a400:	23a8      	movs	r3, #168	; 0xa8
 800a402:	25f0      	movs	r5, #240	; 0xf0
 800a404:	4a2f      	ldr	r2, [pc, #188]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a406:	58d4      	ldr	r4, [r2, r3]
 800a408:	43ac      	bics	r4, r5
 800a40a:	50d4      	str	r4, [r2, r3]
 800a40c:	58d4      	ldr	r4, [r2, r3]
 800a40e:	3d60      	subs	r5, #96	; 0x60
 800a410:	432c      	orrs	r4, r5
 800a412:	50d4      	str	r4, [r2, r3]
 800a414:	e728      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a416:	4a2b      	ldr	r2, [pc, #172]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a418:	e7cf      	b.n	800a3ba <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800a41a:	23a8      	movs	r3, #168	; 0xa8
 800a41c:	250f      	movs	r5, #15
 800a41e:	4a2b      	ldr	r2, [pc, #172]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a420:	58d4      	ldr	r4, [r2, r3]
 800a422:	43ac      	bics	r4, r5
 800a424:	50d4      	str	r4, [r2, r3]
 800a426:	58d4      	ldr	r4, [r2, r3]
 800a428:	3d05      	subs	r5, #5
 800a42a:	432c      	orrs	r4, r5
 800a42c:	50d4      	str	r4, [r2, r3]
 800a42e:	e71b      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800a430:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a432:	e758      	b.n	800a2e6 <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800a434:	23a8      	movs	r3, #168	; 0xa8
 800a436:	4a25      	ldr	r2, [pc, #148]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a438:	4d25      	ldr	r5, [pc, #148]	; (800a4d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a43a:	58d4      	ldr	r4, [r2, r3]
 800a43c:	402c      	ands	r4, r5
 800a43e:	50d4      	str	r4, [r2, r3]
 800a440:	24a0      	movs	r4, #160	; 0xa0
 800a442:	58d5      	ldr	r5, [r2, r3]
 800a444:	0324      	lsls	r4, r4, #12
 800a446:	432c      	orrs	r4, r5
 800a448:	50d4      	str	r4, [r2, r3]
 800a44a:	e70d      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800a44c:	23a8      	movs	r3, #168	; 0xa8
 800a44e:	4a1f      	ldr	r2, [pc, #124]	; (800a4cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800a450:	4d20      	ldr	r5, [pc, #128]	; (800a4d4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a452:	58d4      	ldr	r4, [r2, r3]
 800a454:	402c      	ands	r4, r5
 800a456:	50d4      	str	r4, [r2, r3]
 800a458:	24a0      	movs	r4, #160	; 0xa0
 800a45a:	58d5      	ldr	r5, [r2, r3]
 800a45c:	0424      	lsls	r4, r4, #16
 800a45e:	432c      	orrs	r4, r5
 800a460:	50d4      	str	r4, [r2, r3]
 800a462:	e701      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800a464:	23a8      	movs	r3, #168	; 0xa8
 800a466:	25f0      	movs	r5, #240	; 0xf0
 800a468:	4a16      	ldr	r2, [pc, #88]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a46a:	58d4      	ldr	r4, [r2, r3]
 800a46c:	43ac      	bics	r4, r5
 800a46e:	50d4      	str	r4, [r2, r3]
 800a470:	58d4      	ldr	r4, [r2, r3]
 800a472:	3d50      	subs	r5, #80	; 0x50
 800a474:	432c      	orrs	r4, r5
 800a476:	50d4      	str	r4, [r2, r3]
 800a478:	e6f6      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800a47a:	23a8      	movs	r3, #168	; 0xa8
 800a47c:	25f0      	movs	r5, #240	; 0xf0
 800a47e:	4a11      	ldr	r2, [pc, #68]	; (800a4c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a480:	58d4      	ldr	r4, [r2, r3]
 800a482:	43ac      	bics	r4, r5
 800a484:	50d4      	str	r4, [r2, r3]
 800a486:	58d4      	ldr	r4, [r2, r3]
 800a488:	3d40      	subs	r5, #64	; 0x40
 800a48a:	432c      	orrs	r4, r5
 800a48c:	50d4      	str	r4, [r2, r3]
 800a48e:	e6eb      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a490:	40013800 	.word	0x40013800
 800a494:	40004400 	.word	0x40004400
 800a498:	40004800 	.word	0x40004800
 800a49c:	40004c00 	.word	0x40004c00
 800a4a0:	40005000 	.word	0x40005000
 800a4a4:	40011400 	.word	0x40011400
 800a4a8:	40011800 	.word	0x40011800
 800a4ac:	40020008 	.word	0x40020008
 800a4b0:	40020030 	.word	0x40020030
 800a4b4:	40020058 	.word	0x40020058
 800a4b8:	4002006c 	.word	0x4002006c
 800a4bc:	4002041c 	.word	0x4002041c
 800a4c0:	40020430 	.word	0x40020430
 800a4c4:	40020400 	.word	0x40020400
 800a4c8:	fffff0ff 	.word	0xfffff0ff
 800a4cc:	40020000 	.word	0x40020000
 800a4d0:	fff0ffff 	.word	0xfff0ffff
 800a4d4:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a4d8:	680b      	ldr	r3, [r1, #0]
 800a4da:	4a8e      	ldr	r2, [pc, #568]	; (800a714 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d03b      	beq.n	800a558 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800a4e0:	4a8d      	ldr	r2, [pc, #564]	; (800a718 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d043      	beq.n	800a56e <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800a4e6:	4a8d      	ldr	r2, [pc, #564]	; (800a71c <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d042      	beq.n	800a572 <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800a4ec:	4a8c      	ldr	r2, [pc, #560]	; (800a720 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d04b      	beq.n	800a58a <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800a4f2:	4a8c      	ldr	r2, [pc, #560]	; (800a724 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d054      	beq.n	800a5a2 <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800a4f8:	4a8b      	ldr	r2, [pc, #556]	; (800a728 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d000      	beq.n	800a500 <RemapAndLinkDMAtoUARTRx+0x38c>
 800a4fe:	e6b3      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800a500:	4a8a      	ldr	r2, [pc, #552]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a502:	23a8      	movs	r3, #168	; 0xa8
 800a504:	4d8a      	ldr	r5, [pc, #552]	; (800a730 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a506:	58d4      	ldr	r4, [r2, r3]
 800a508:	402c      	ands	r4, r5
 800a50a:	50d4      	str	r4, [r2, r3]
 800a50c:	24c0      	movs	r4, #192	; 0xc0
 800a50e:	58d5      	ldr	r5, [r2, r3]
 800a510:	0124      	lsls	r4, r4, #4
 800a512:	432c      	orrs	r4, r5
 800a514:	50d4      	str	r4, [r2, r3]
 800a516:	e6a7      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a518:	680b      	ldr	r3, [r1, #0]
 800a51a:	4a7e      	ldr	r2, [pc, #504]	; (800a714 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d04b      	beq.n	800a5b8 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800a520:	4a7d      	ldr	r2, [pc, #500]	; (800a718 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d053      	beq.n	800a5ce <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800a526:	4a7d      	ldr	r2, [pc, #500]	; (800a71c <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d052      	beq.n	800a5d2 <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800a52c:	4a7c      	ldr	r2, [pc, #496]	; (800a720 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d05b      	beq.n	800a5ea <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800a532:	4a7c      	ldr	r2, [pc, #496]	; (800a724 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d064      	beq.n	800a602 <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800a538:	4a7b      	ldr	r2, [pc, #492]	; (800a728 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d000      	beq.n	800a540 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800a53e:	e693      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800a540:	4a7a      	ldr	r2, [pc, #488]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a542:	23a8      	movs	r3, #168	; 0xa8
 800a544:	4d7a      	ldr	r5, [pc, #488]	; (800a730 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a546:	58d4      	ldr	r4, [r2, r3]
 800a548:	402c      	ands	r4, r5
 800a54a:	50d4      	str	r4, [r2, r3]
 800a54c:	24d0      	movs	r4, #208	; 0xd0
 800a54e:	58d5      	ldr	r5, [r2, r3]
 800a550:	0124      	lsls	r4, r4, #4
 800a552:	432c      	orrs	r4, r5
 800a554:	50d4      	str	r4, [r2, r3]
 800a556:	e687      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800a558:	23a8      	movs	r3, #168	; 0xa8
 800a55a:	250f      	movs	r5, #15
 800a55c:	4a75      	ldr	r2, [pc, #468]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a55e:	58d4      	ldr	r4, [r2, r3]
 800a560:	43ac      	bics	r4, r5
 800a562:	50d4      	str	r4, [r2, r3]
 800a564:	58d4      	ldr	r4, [r2, r3]
 800a566:	3d03      	subs	r5, #3
 800a568:	432c      	orrs	r4, r5
 800a56a:	50d4      	str	r4, [r2, r3]
 800a56c:	e67c      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800a56e:	4a71      	ldr	r2, [pc, #452]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a570:	e7c7      	b.n	800a502 <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800a572:	23a8      	movs	r3, #168	; 0xa8
 800a574:	4a6f      	ldr	r2, [pc, #444]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a576:	4d70      	ldr	r5, [pc, #448]	; (800a738 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a578:	58d4      	ldr	r4, [r2, r3]
 800a57a:	402c      	ands	r4, r5
 800a57c:	50d4      	str	r4, [r2, r3]
 800a57e:	24c0      	movs	r4, #192	; 0xc0
 800a580:	58d5      	ldr	r5, [r2, r3]
 800a582:	0324      	lsls	r4, r4, #12
 800a584:	432c      	orrs	r4, r5
 800a586:	50d4      	str	r4, [r2, r3]
 800a588:	e66e      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800a58a:	23a8      	movs	r3, #168	; 0xa8
 800a58c:	4a69      	ldr	r2, [pc, #420]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a58e:	4d6b      	ldr	r5, [pc, #428]	; (800a73c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a590:	58d4      	ldr	r4, [r2, r3]
 800a592:	402c      	ands	r4, r5
 800a594:	50d4      	str	r4, [r2, r3]
 800a596:	24c0      	movs	r4, #192	; 0xc0
 800a598:	58d5      	ldr	r5, [r2, r3]
 800a59a:	0424      	lsls	r4, r4, #16
 800a59c:	432c      	orrs	r4, r5
 800a59e:	50d4      	str	r4, [r2, r3]
 800a5a0:	e662      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800a5a2:	23a8      	movs	r3, #168	; 0xa8
 800a5a4:	25f0      	movs	r5, #240	; 0xf0
 800a5a6:	4a61      	ldr	r2, [pc, #388]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a5a8:	58d4      	ldr	r4, [r2, r3]
 800a5aa:	43ac      	bics	r4, r5
 800a5ac:	50d4      	str	r4, [r2, r3]
 800a5ae:	58d4      	ldr	r4, [r2, r3]
 800a5b0:	3d30      	subs	r5, #48	; 0x30
 800a5b2:	432c      	orrs	r4, r5
 800a5b4:	50d4      	str	r4, [r2, r3]
 800a5b6:	e657      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800a5b8:	23a8      	movs	r3, #168	; 0xa8
 800a5ba:	250f      	movs	r5, #15
 800a5bc:	4a5d      	ldr	r2, [pc, #372]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5be:	58d4      	ldr	r4, [r2, r3]
 800a5c0:	43ac      	bics	r4, r5
 800a5c2:	50d4      	str	r4, [r2, r3]
 800a5c4:	58d4      	ldr	r4, [r2, r3]
 800a5c6:	3d02      	subs	r5, #2
 800a5c8:	432c      	orrs	r4, r5
 800a5ca:	50d4      	str	r4, [r2, r3]
 800a5cc:	e64c      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800a5ce:	4a59      	ldr	r2, [pc, #356]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5d0:	e7b7      	b.n	800a542 <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800a5d2:	23a8      	movs	r3, #168	; 0xa8
 800a5d4:	4a57      	ldr	r2, [pc, #348]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5d6:	4d58      	ldr	r5, [pc, #352]	; (800a738 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a5d8:	58d4      	ldr	r4, [r2, r3]
 800a5da:	402c      	ands	r4, r5
 800a5dc:	50d4      	str	r4, [r2, r3]
 800a5de:	24d0      	movs	r4, #208	; 0xd0
 800a5e0:	58d5      	ldr	r5, [r2, r3]
 800a5e2:	0324      	lsls	r4, r4, #12
 800a5e4:	432c      	orrs	r4, r5
 800a5e6:	50d4      	str	r4, [r2, r3]
 800a5e8:	e63e      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800a5ea:	23a8      	movs	r3, #168	; 0xa8
 800a5ec:	4a51      	ldr	r2, [pc, #324]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5ee:	4d53      	ldr	r5, [pc, #332]	; (800a73c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a5f0:	58d4      	ldr	r4, [r2, r3]
 800a5f2:	402c      	ands	r4, r5
 800a5f4:	50d4      	str	r4, [r2, r3]
 800a5f6:	24d0      	movs	r4, #208	; 0xd0
 800a5f8:	58d5      	ldr	r5, [r2, r3]
 800a5fa:	0424      	lsls	r4, r4, #16
 800a5fc:	432c      	orrs	r4, r5
 800a5fe:	50d4      	str	r4, [r2, r3]
 800a600:	e632      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800a602:	23a8      	movs	r3, #168	; 0xa8
 800a604:	25f0      	movs	r5, #240	; 0xf0
 800a606:	4a49      	ldr	r2, [pc, #292]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a608:	58d4      	ldr	r4, [r2, r3]
 800a60a:	43ac      	bics	r4, r5
 800a60c:	50d4      	str	r4, [r2, r3]
 800a60e:	58d4      	ldr	r4, [r2, r3]
 800a610:	3d20      	subs	r5, #32
 800a612:	432c      	orrs	r4, r5
 800a614:	50d4      	str	r4, [r2, r3]
 800a616:	e627      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800a618:	23a8      	movs	r3, #168	; 0xa8
 800a61a:	250f      	movs	r5, #15
 800a61c:	4a45      	ldr	r2, [pc, #276]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a61e:	58d4      	ldr	r4, [r2, r3]
 800a620:	43ac      	bics	r4, r5
 800a622:	50d4      	str	r4, [r2, r3]
 800a624:	58d4      	ldr	r4, [r2, r3]
 800a626:	3d01      	subs	r5, #1
 800a628:	432c      	orrs	r4, r5
 800a62a:	50d4      	str	r4, [r2, r3]
 800a62c:	e61c      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800a62e:	4a41      	ldr	r2, [pc, #260]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a630:	e5d5      	b.n	800a1de <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800a632:	23a8      	movs	r3, #168	; 0xa8
 800a634:	4a3f      	ldr	r2, [pc, #252]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a636:	4d40      	ldr	r5, [pc, #256]	; (800a738 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a638:	58d4      	ldr	r4, [r2, r3]
 800a63a:	402c      	ands	r4, r5
 800a63c:	50d4      	str	r4, [r2, r3]
 800a63e:	24e0      	movs	r4, #224	; 0xe0
 800a640:	58d5      	ldr	r5, [r2, r3]
 800a642:	0324      	lsls	r4, r4, #12
 800a644:	432c      	orrs	r4, r5
 800a646:	50d4      	str	r4, [r2, r3]
 800a648:	e60e      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800a64a:	23a8      	movs	r3, #168	; 0xa8
 800a64c:	4a39      	ldr	r2, [pc, #228]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a64e:	4d3b      	ldr	r5, [pc, #236]	; (800a73c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a650:	58d4      	ldr	r4, [r2, r3]
 800a652:	402c      	ands	r4, r5
 800a654:	50d4      	str	r4, [r2, r3]
 800a656:	24e0      	movs	r4, #224	; 0xe0
 800a658:	58d5      	ldr	r5, [r2, r3]
 800a65a:	0424      	lsls	r4, r4, #16
 800a65c:	432c      	orrs	r4, r5
 800a65e:	50d4      	str	r4, [r2, r3]
 800a660:	e602      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800a662:	23a8      	movs	r3, #168	; 0xa8
 800a664:	25f0      	movs	r5, #240	; 0xf0
 800a666:	4a31      	ldr	r2, [pc, #196]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a668:	58d4      	ldr	r4, [r2, r3]
 800a66a:	43ac      	bics	r4, r5
 800a66c:	50d4      	str	r4, [r2, r3]
 800a66e:	58d4      	ldr	r4, [r2, r3]
 800a670:	3d10      	subs	r5, #16
 800a672:	432c      	orrs	r4, r5
 800a674:	50d4      	str	r4, [r2, r3]
 800a676:	e5f7      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800a678:	4a31      	ldr	r2, [pc, #196]	; (800a740 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d000      	beq.n	800a680 <RemapAndLinkDMAtoUARTRx+0x50c>
 800a67e:	e5f3      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a680:	680b      	ldr	r3, [r1, #0]
 800a682:	4a24      	ldr	r2, [pc, #144]	; (800a714 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d01b      	beq.n	800a6c0 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800a688:	4a23      	ldr	r2, [pc, #140]	; (800a718 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d022      	beq.n	800a6d4 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800a68e:	4a23      	ldr	r2, [pc, #140]	; (800a71c <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d021      	beq.n	800a6d8 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800a694:	4a22      	ldr	r2, [pc, #136]	; (800a720 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d02a      	beq.n	800a6f0 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800a69a:	4a22      	ldr	r2, [pc, #136]	; (800a724 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d033      	beq.n	800a708 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800a6a0:	4a21      	ldr	r2, [pc, #132]	; (800a728 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d000      	beq.n	800a6a8 <RemapAndLinkDMAtoUARTRx+0x534>
 800a6a6:	e5df      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800a6a8:	4a20      	ldr	r2, [pc, #128]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a6aa:	23a8      	movs	r3, #168	; 0xa8
 800a6ac:	4d20      	ldr	r5, [pc, #128]	; (800a730 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a6ae:	58d4      	ldr	r4, [r2, r3]
 800a6b0:	402c      	ands	r4, r5
 800a6b2:	50d4      	str	r4, [r2, r3]
 800a6b4:	24f0      	movs	r4, #240	; 0xf0
 800a6b6:	58d5      	ldr	r5, [r2, r3]
 800a6b8:	0124      	lsls	r4, r4, #4
 800a6ba:	432c      	orrs	r4, r5
 800a6bc:	50d4      	str	r4, [r2, r3]
 800a6be:	e5d3      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800a6c0:	23a8      	movs	r3, #168	; 0xa8
 800a6c2:	260f      	movs	r6, #15
 800a6c4:	4a1b      	ldr	r2, [pc, #108]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a6c6:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800a6c8:	43b5      	bics	r5, r6
 800a6ca:	50d5      	str	r5, [r2, r3]
 800a6cc:	58d4      	ldr	r4, [r2, r3]
 800a6ce:	4334      	orrs	r4, r6
 800a6d0:	50d4      	str	r4, [r2, r3]
 800a6d2:	e5c9      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800a6d4:	4a17      	ldr	r2, [pc, #92]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a6d6:	e7e8      	b.n	800a6aa <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800a6d8:	23a8      	movs	r3, #168	; 0xa8
 800a6da:	4a16      	ldr	r2, [pc, #88]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a6dc:	4d16      	ldr	r5, [pc, #88]	; (800a738 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a6de:	58d4      	ldr	r4, [r2, r3]
 800a6e0:	402c      	ands	r4, r5
 800a6e2:	50d4      	str	r4, [r2, r3]
 800a6e4:	24f0      	movs	r4, #240	; 0xf0
 800a6e6:	58d5      	ldr	r5, [r2, r3]
 800a6e8:	0324      	lsls	r4, r4, #12
 800a6ea:	432c      	orrs	r4, r5
 800a6ec:	50d4      	str	r4, [r2, r3]
 800a6ee:	e5bb      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800a6f0:	23a8      	movs	r3, #168	; 0xa8
 800a6f2:	4a10      	ldr	r2, [pc, #64]	; (800a734 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a6f4:	4d11      	ldr	r5, [pc, #68]	; (800a73c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a6f6:	58d4      	ldr	r4, [r2, r3]
 800a6f8:	402c      	ands	r4, r5
 800a6fa:	50d4      	str	r4, [r2, r3]
 800a6fc:	24f0      	movs	r4, #240	; 0xf0
 800a6fe:	58d5      	ldr	r5, [r2, r3]
 800a700:	0424      	lsls	r4, r4, #16
 800a702:	432c      	orrs	r4, r5
 800a704:	50d4      	str	r4, [r2, r3]
 800a706:	e5af      	b.n	800a268 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800a708:	23a8      	movs	r3, #168	; 0xa8
 800a70a:	4a08      	ldr	r2, [pc, #32]	; (800a72c <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a70c:	26f0      	movs	r6, #240	; 0xf0
 800a70e:	58d5      	ldr	r5, [r2, r3]
 800a710:	e7da      	b.n	800a6c8 <RemapAndLinkDMAtoUARTRx+0x554>
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	40020008 	.word	0x40020008
 800a718:	40020030 	.word	0x40020030
 800a71c:	40020058 	.word	0x40020058
 800a720:	4002006c 	.word	0x4002006c
 800a724:	4002041c 	.word	0x4002041c
 800a728:	40020430 	.word	0x40020430
 800a72c:	40020400 	.word	0x40020400
 800a730:	fffff0ff 	.word	0xfffff0ff
 800a734:	40020000 	.word	0x40020000
 800a738:	fff0ffff 	.word	0xfff0ffff
 800a73c:	ff0fffff 	.word	0xff0fffff
 800a740:	40011c00 	.word	0x40011c00

0800a744 <DMA_MSG_RX_Setup>:
{	
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	000d      	movs	r5, r1
 800a748:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800a74a:	f7ff fd13 	bl	800a174 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800a74e:	0028      	movs	r0, r5
 800a750:	2100      	movs	r1, #0
 800a752:	f7ff fc59 	bl	800a008 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800a756:	0020      	movs	r0, r4
 800a758:	f7ff fab4 	bl	8009cc4 <GetPort>
 800a75c:	1e41      	subs	r1, r0, #1
 800a75e:	4803      	ldr	r0, [pc, #12]	; (800a76c <DMA_MSG_RX_Setup+0x28>)
 800a760:	2201      	movs	r2, #1
 800a762:	1809      	adds	r1, r1, r0
 800a764:	0020      	movs	r0, r4
 800a766:	f007 f839 	bl	80117dc <HAL_UART_Receive_DMA>
}
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	20001eb8 	.word	0x20001eb8

0800a770 <SetupMessagingRxDMAs>:
{	
 800a770:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800a772:	4c18      	ldr	r4, [pc, #96]	; (800a7d4 <SetupMessagingRxDMAs+0x64>)
 800a774:	7863      	ldrb	r3, [r4, #1]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d027      	beq.n	800a7ca <SetupMessagingRxDMAs+0x5a>
	if (portStatus[P2] == FREE)	
 800a77a:	78a3      	ldrb	r3, [r4, #2]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01f      	beq.n	800a7c0 <SetupMessagingRxDMAs+0x50>
	if (portStatus[P3] == FREE)
 800a780:	78e3      	ldrb	r3, [r4, #3]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d017      	beq.n	800a7b6 <SetupMessagingRxDMAs+0x46>
	if (portStatus[P4] == FREE)
 800a786:	7923      	ldrb	r3, [r4, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00f      	beq.n	800a7ac <SetupMessagingRxDMAs+0x3c>
	if (portStatus[P5] == FREE)
 800a78c:	7963      	ldrb	r3, [r4, #5]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <SetupMessagingRxDMAs+0x32>
	if (portStatus[P6] == FREE)
 800a792:	79a3      	ldrb	r3, [r4, #6]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d103      	bne.n	800a7a0 <SetupMessagingRxDMAs+0x30>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800a798:	490f      	ldr	r1, [pc, #60]	; (800a7d8 <SetupMessagingRxDMAs+0x68>)
 800a79a:	4810      	ldr	r0, [pc, #64]	; (800a7dc <SetupMessagingRxDMAs+0x6c>)
 800a79c:	f7ff ffd2 	bl	800a744 <DMA_MSG_RX_Setup>
}
 800a7a0:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800a7a2:	490f      	ldr	r1, [pc, #60]	; (800a7e0 <SetupMessagingRxDMAs+0x70>)
 800a7a4:	480f      	ldr	r0, [pc, #60]	; (800a7e4 <SetupMessagingRxDMAs+0x74>)
 800a7a6:	f7ff ffcd 	bl	800a744 <DMA_MSG_RX_Setup>
 800a7aa:	e7f2      	b.n	800a792 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800a7ac:	490e      	ldr	r1, [pc, #56]	; (800a7e8 <SetupMessagingRxDMAs+0x78>)
 800a7ae:	480f      	ldr	r0, [pc, #60]	; (800a7ec <SetupMessagingRxDMAs+0x7c>)
 800a7b0:	f7ff ffc8 	bl	800a744 <DMA_MSG_RX_Setup>
 800a7b4:	e7ea      	b.n	800a78c <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800a7b6:	490e      	ldr	r1, [pc, #56]	; (800a7f0 <SetupMessagingRxDMAs+0x80>)
 800a7b8:	480e      	ldr	r0, [pc, #56]	; (800a7f4 <SetupMessagingRxDMAs+0x84>)
 800a7ba:	f7ff ffc3 	bl	800a744 <DMA_MSG_RX_Setup>
 800a7be:	e7e2      	b.n	800a786 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800a7c0:	490d      	ldr	r1, [pc, #52]	; (800a7f8 <SetupMessagingRxDMAs+0x88>)
 800a7c2:	480e      	ldr	r0, [pc, #56]	; (800a7fc <SetupMessagingRxDMAs+0x8c>)
 800a7c4:	f7ff ffbe 	bl	800a744 <DMA_MSG_RX_Setup>
 800a7c8:	e7da      	b.n	800a780 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800a7ca:	490d      	ldr	r1, [pc, #52]	; (800a800 <SetupMessagingRxDMAs+0x90>)
 800a7cc:	480d      	ldr	r0, [pc, #52]	; (800a804 <SetupMessagingRxDMAs+0x94>)
 800a7ce:	f7ff ffb9 	bl	800a744 <DMA_MSG_RX_Setup>
 800a7d2:	e7d2      	b.n	800a77a <SetupMessagingRxDMAs+0xa>
 800a7d4:	20000c2c 	.word	0x20000c2c
 800a7d8:	2000278c 	.word	0x2000278c
 800a7dc:	20006e88 	.word	0x20006e88
 800a7e0:	20002754 	.word	0x20002754
 800a7e4:	20006e18 	.word	0x20006e18
 800a7e8:	2000271c 	.word	0x2000271c
 800a7ec:	20006da4 	.word	0x20006da4
 800a7f0:	200026e4 	.word	0x200026e4
 800a7f4:	20006f04 	.word	0x20006f04
 800a7f8:	200026ac 	.word	0x200026ac
 800a7fc:	20006fe8 	.word	0x20006fe8
 800a800:	20002674 	.word	0x20002674
 800a804:	20006f74 	.word	0x20006f74

0800a808 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80a:	46d6      	mov	lr, sl
 800a80c:	464f      	mov	r7, r9
 800a80e:	4646      	mov	r6, r8
 800a810:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800a812:	1e47      	subs	r7, r0, #1
 800a814:	00fe      	lsls	r6, r7, #3
 800a816:	4b1c      	ldr	r3, [pc, #112]	; (800a888 <SwitchStreamDMAToMsg+0x80>)
 800a818:	1bf6      	subs	r6, r6, r7
 800a81a:	00f6      	lsls	r6, r6, #3
 800a81c:	4698      	mov	r8, r3
 800a81e:	46b2      	mov	sl, r6
 800a820:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800a822:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800a824:	4650      	mov	r0, sl
 800a826:	f004 ff53 	bl	800f6d0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a82a:	4643      	mov	r3, r8
 800a82c:	2400      	movs	r4, #0
 800a82e:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800a830:	4b16      	ldr	r3, [pc, #88]	; (800a88c <SwitchStreamDMAToMsg+0x84>)
 800a832:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800a834:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a836:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800a838:	4b15      	ldr	r3, [pc, #84]	; (800a890 <SwitchStreamDMAToMsg+0x88>)
 800a83a:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800a83c:	4b15      	ldr	r3, [pc, #84]	; (800a894 <SwitchStreamDMAToMsg+0x8c>)
 800a83e:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800a840:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a842:	2380      	movs	r3, #128	; 0x80
 800a844:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a846:	3b60      	subs	r3, #96	; 0x60
 800a848:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a84a:	2380      	movs	r3, #128	; 0x80
 800a84c:	019b      	lsls	r3, r3, #6
 800a84e:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a850:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a852:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a854:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a856:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800a858:	0028      	movs	r0, r5
 800a85a:	f004 fee1 	bl	800f620 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800a85e:	4653      	mov	r3, sl
 800a860:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a862:	f7ff fa2f 	bl	8009cc4 <GetPort>
 800a866:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <SwitchStreamDMAToMsg+0x90>)
 800a868:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800a86a:	4643      	mov	r3, r8
 800a86c:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800a870:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800a872:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800a874:	f002 fabe 	bl	800cdf4 <GetUart>
 800a878:	0029      	movs	r1, r5
 800a87a:	f7ff ff63 	bl	800a744 <DMA_MSG_RX_Setup>
}
 800a87e:	bc1c      	pop	{r2, r3, r4}
 800a880:	4690      	mov	r8, r2
 800a882:	4699      	mov	r9, r3
 800a884:	46a2      	mov	sl, r4
 800a886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a888:	2000247c 	.word	0x2000247c
 800a88c:	200019c0 	.word	0x200019c0
 800a890:	200019d8 	.word	0x200019d8
 800a894:	20002674 	.word	0x20002674
 800a898:	20000c2c 	.word	0x20000c2c
 800a89c:	200019a8 	.word	0x200019a8

0800a8a0 <DMA_STREAM_Setup>:
{	
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	0016      	movs	r6, r2
 800a8a4:	0005      	movs	r5, r0
 800a8a6:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800a8a8:	f7ff fa0c 	bl	8009cc4 <GetPort>
	hDMA = &streamDMA[port-1];
 800a8ac:	3801      	subs	r0, #1
 800a8ae:	00c4      	lsls	r4, r0, #3
 800a8b0:	1a24      	subs	r4, r4, r0
 800a8b2:	480a      	ldr	r0, [pc, #40]	; (800a8dc <DMA_STREAM_Setup+0x3c>)
 800a8b4:	00e4      	lsls	r4, r4, #3
 800a8b6:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800a8b8:	0021      	movs	r1, r4
 800a8ba:	0028      	movs	r0, r5
 800a8bc:	f7ff fc5a 	bl	800a174 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800a8c0:	0020      	movs	r0, r4
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	f7ff fba0 	bl	800a008 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800a8c8:	2369      	movs	r3, #105	; 0x69
 800a8ca:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800a8cc:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800a8ce:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800a8d0:	0028      	movs	r0, r5
 800a8d2:	0032      	movs	r2, r6
 800a8d4:	3128      	adds	r1, #40	; 0x28
 800a8d6:	f006 ff81 	bl	80117dc <HAL_UART_Receive_DMA>
}
 800a8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8dc:	2000247c 	.word	0x2000247c

0800a8e0 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800a8e0:	2310      	movs	r3, #16
 800a8e2:	4807      	ldr	r0, [pc, #28]	; (800a900 <CRC_Init+0x20>)
{
 800a8e4:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800a8e6:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <CRC_Init+0x24>)
 800a8ea:	6003      	str	r3, [r0, #0]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a8f0:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a8f2:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800a8f8:	f004 fdc0 	bl	800f47c <HAL_CRC_Init>
}
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	46c0      	nop			; (mov r8, r8)
 800a900:	20007058 	.word	0x20007058
 800a904:	40023000 	.word	0x40023000

0800a908 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800a908:	2340      	movs	r3, #64	; 0x40
 800a90a:	4a05      	ldr	r2, [pc, #20]	; (800a920 <HAL_CRC_MspInit+0x18>)
{
 800a90c:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800a90e:	6951      	ldr	r1, [r2, #20]
 800a910:	4319      	orrs	r1, r3
 800a912:	6151      	str	r1, [r2, #20]
 800a914:	6952      	ldr	r2, [r2, #20]
 800a916:	4013      	ands	r3, r2
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	9b01      	ldr	r3, [sp, #4]
}
 800a91c:	b002      	add	sp, #8
 800a91e:	4770      	bx	lr
 800a920:	40021000 	.word	0x40021000

0800a924 <CalculateCRC8>:

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800a924:	2300      	movs	r3, #0
{
 800a926:	b570      	push	{r4, r5, r6, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	0005      	movs	r5, r0
 800a92c:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800a92e:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800a930:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800a932:	2d00      	cmp	r5, #0
 800a934:	d019      	beq.n	800a96a <CalculateCRC8+0x46>
 800a936:	2900      	cmp	r1, #0
 800a938:	d017      	beq.n	800a96a <CalculateCRC8+0x46>
	if(size < 4)
 800a93a:	2903      	cmp	r1, #3
 800a93c:	d817      	bhi.n	800a96e <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800a93e:	466a      	mov	r2, sp
 800a940:	782b      	ldrb	r3, [r5, #0]
 800a942:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800a944:	2901      	cmp	r1, #1
 800a946:	d00a      	beq.n	800a95e <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800a948:	2300      	movs	r3, #0
 800a94a:	3c02      	subs	r4, #2
 800a94c:	b2a4      	uxth	r4, r4
 800a94e:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800a950:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800a952:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800a954:	5cea      	ldrb	r2, [r5, r3]
 800a956:	3104      	adds	r1, #4
 800a958:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d1f8      	bne.n	800a950 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800a95e:	2201      	movs	r2, #1
 800a960:	a901      	add	r1, sp, #4
 800a962:	4814      	ldr	r0, [pc, #80]	; (800a9b4 <CalculateCRC8+0x90>)
 800a964:	f004 fde8 	bl	800f538 <HAL_CRC_Calculate>
 800a968:	b2c0      	uxtb	r0, r0
}
 800a96a:	b002      	add	sp, #8
 800a96c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800a96e:	4e11      	ldr	r6, [pc, #68]	; (800a9b4 <CalculateCRC8+0x90>)
 800a970:	088a      	lsrs	r2, r1, #2
 800a972:	0030      	movs	r0, r6
 800a974:	0029      	movs	r1, r5
 800a976:	f004 fddf 	bl	800f538 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800a97a:	2203      	movs	r2, #3
 800a97c:	0013      	movs	r3, r2
 800a97e:	4023      	ands	r3, r4
 800a980:	d015      	beq.n	800a9ae <CalculateCRC8+0x8a>
 800a982:	3b01      	subs	r3, #1
 800a984:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800a986:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800a988:	4394      	bics	r4, r2
 800a98a:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800a98c:	1c62      	adds	r2, r4, #1
 800a98e:	5d28      	ldrb	r0, [r5, r4]
 800a990:	466c      	mov	r4, sp
 800a992:	3404      	adds	r4, #4
 800a994:	b2d2      	uxtb	r2, r2
 800a996:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800a998:	4299      	cmp	r1, r3
 800a99a:	d003      	beq.n	800a9a4 <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800a99c:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800a99e:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d1f3      	bne.n	800a98c <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	a901      	add	r1, sp, #4
 800a9a8:	0030      	movs	r0, r6
 800a9aa:	f004 fd9b 	bl	800f4e4 <HAL_CRC_Accumulate>
 800a9ae:	b2c0      	uxtb	r0, r0
 800a9b0:	e7db      	b.n	800a96a <CalculateCRC8+0x46>
 800a9b2:	46c0      	nop			; (mov r8, r8)
 800a9b4:	20007058 	.word	0x20007058

0800a9b8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	000d      	movs	r5, r1
 800a9bc:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a9be:	4c25      	ldr	r4, [pc, #148]	; (800aa54 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800a9c0:	f005 fb4e 	bl	8010060 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a9c4:	4924      	ldr	r1, [pc, #144]	; (800aa58 <EE_VerifyPageFullWriteVariable+0xa0>)
 800a9c6:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a9c8:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a9ca:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a9cc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d105      	bne.n	800a9de <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800a9d2:	4b22      	ldr	r3, [pc, #136]	; (800aa5c <EE_VerifyPageFullWriteVariable+0xa4>)
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d007      	beq.n	800a9e8 <EE_VerifyPageFullWriteVariable+0x30>
 800a9d8:	4a21      	ldr	r2, [pc, #132]	; (800aa60 <EE_VerifyPageFullWriteVariable+0xa8>)
 800a9da:	0023      	movs	r3, r4
 800a9dc:	e007      	b.n	800a9ee <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d122      	bne.n	800aa28 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <EE_VerifyPageFullWriteVariable+0xa4>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d0f7      	beq.n	800a9d8 <EE_VerifyPageFullWriteVariable+0x20>
 800a9e8:	000c      	movs	r4, r1
 800a9ea:	000b      	movs	r3, r1
 800a9ec:	4a1d      	ldr	r2, [pc, #116]	; (800aa64 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	d103      	bne.n	800a9fc <EE_VerifyPageFullWriteVariable+0x44>
 800a9f4:	e009      	b.n	800aa0a <EE_VerifyPageFullWriteVariable+0x52>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	d006      	beq.n	800aa0a <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800a9fc:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800a9fe:	42a2      	cmp	r2, r4
 800aa00:	d8f9      	bhi.n	800a9f6 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800aa02:	f005 fb3f 	bl	8010084 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800aa06:	2080      	movs	r0, #128	; 0x80
}
 800aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800aa0a:	002a      	movs	r2, r5
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	0021      	movs	r1, r4
 800aa10:	2001      	movs	r0, #1
 800aa12:	f005 fb85 	bl	8010120 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aa16:	4814      	ldr	r0, [pc, #80]	; (800aa68 <EE_VerifyPageFullWriteVariable+0xb0>)
 800aa18:	f005 fb3e 	bl	8010098 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d005      	beq.n	800aa2c <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800aa20:	4b12      	ldr	r3, [pc, #72]	; (800aa6c <EE_VerifyPageFullWriteVariable+0xb4>)
 800aa22:	69d8      	ldr	r0, [r3, #28]
 800aa24:	b280      	uxth	r0, r0
 800aa26:	e7ef      	b.n	800aa08 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800aa28:	20ab      	movs	r0, #171	; 0xab
 800aa2a:	e7ed      	b.n	800aa08 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa2c:	2701      	movs	r7, #1
 800aa2e:	4d10      	ldr	r5, [pc, #64]	; (800aa70 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800aa30:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa32:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800aa34:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa36:	43bb      	bics	r3, r7
 800aa38:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800aa3a:	2001      	movs	r0, #1
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f005 fb6f 	bl	8010120 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aa42:	4809      	ldr	r0, [pc, #36]	; (800aa68 <EE_VerifyPageFullWriteVariable+0xb0>)
 800aa44:	f005 fb28 	bl	8010098 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d1e9      	bne.n	800aa20 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa4c:	692b      	ldr	r3, [r5, #16]
 800aa4e:	43bb      	bics	r3, r7
 800aa50:	612b      	str	r3, [r5, #16]
 800aa52:	e7e5      	b.n	800aa20 <EE_VerifyPageFullWriteVariable+0x68>
 800aa54:	0801f000 	.word	0x0801f000
 800aa58:	0801e000 	.word	0x0801e000
 800aa5c:	0000eeee 	.word	0x0000eeee
 800aa60:	0801fffe 	.word	0x0801fffe
 800aa64:	0801effe 	.word	0x0801effe
 800aa68:	0000c350 	.word	0x0000c350
 800aa6c:	20007210 	.word	0x20007210
 800aa70:	40022000 	.word	0x40022000

0800aa74 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800aa74:	4b11      	ldr	r3, [pc, #68]	; (800aabc <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800aa76:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800aa78:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800aa7a:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <EE_ReadVariable+0x4c>)
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d005      	beq.n	800aa90 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d117      	bne.n	800aab8 <EE_ReadVariable+0x44>
 800aa88:	4b0e      	ldr	r3, [pc, #56]	; (800aac4 <EE_ReadVariable+0x50>)
 800aa8a:	4c0f      	ldr	r4, [pc, #60]	; (800aac8 <EE_ReadVariable+0x54>)
 800aa8c:	001a      	movs	r2, r3
 800aa8e:	e002      	b.n	800aa96 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800aa90:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <EE_ReadVariable+0x58>)
 800aa92:	4c0f      	ldr	r4, [pc, #60]	; (800aad0 <EE_ReadVariable+0x5c>)
 800aa94:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800aa96:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800aa98:	4290      	cmp	r0, r2
 800aa9a:	d103      	bne.n	800aaa4 <EE_ReadVariable+0x30>
 800aa9c:	e007      	b.n	800aaae <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800aa9e:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800aaa0:	4282      	cmp	r2, r0
 800aaa2:	d004      	beq.n	800aaae <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800aaa4:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800aaa6:	42a3      	cmp	r3, r4
 800aaa8:	d8f9      	bhi.n	800aa9e <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800aaaa:	2001      	movs	r0, #1
}
 800aaac:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800aaae:	3b02      	subs	r3, #2
 800aab0:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800aab2:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800aab4:	800b      	strh	r3, [r1, #0]
			break;
 800aab6:	e7f9      	b.n	800aaac <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800aab8:	20ab      	movs	r0, #171	; 0xab
 800aaba:	e7f7      	b.n	800aaac <EE_ReadVariable+0x38>
 800aabc:	0801e000 	.word	0x0801e000
 800aac0:	0801f000 	.word	0x0801f000
 800aac4:	0801fffe 	.word	0x0801fffe
 800aac8:	0801f002 	.word	0x0801f002
 800aacc:	0801effe 	.word	0x0801effe
 800aad0:	0801e002 	.word	0x0801e002

0800aad4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800aad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad6:	46d6      	mov	lr, sl
 800aad8:	4646      	mov	r6, r8
 800aada:	464f      	mov	r7, r9
 800aadc:	000c      	movs	r4, r1
 800aade:	b5c0      	push	{r6, r7, lr}
 800aae0:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800aae2:	f005 fabd 	bl	8010060 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800aae6:	0021      	movs	r1, r4
 800aae8:	0030      	movs	r0, r6
 800aaea:	f7ff ff65 	bl	800a9b8 <EE_VerifyPageFullWriteVariable>
 800aaee:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800aaf0:	2880      	cmp	r0, #128	; 0x80
 800aaf2:	d007      	beq.n	800ab04 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800aaf4:	f005 fac6 	bl	8010084 <HAL_FLASH_Lock>
}
 800aaf8:	0028      	movs	r0, r5
 800aafa:	bc1c      	pop	{r2, r3, r4}
 800aafc:	4690      	mov	r8, r2
 800aafe:	4699      	mov	r9, r3
 800ab00:	46a2      	mov	sl, r4
 800ab02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800ab04:	f005 faac 	bl	8010060 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ab08:	4935      	ldr	r1, [pc, #212]	; (800abe0 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ab0a:	4a36      	ldr	r2, [pc, #216]	; (800abe4 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ab0c:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ab0e:	8813      	ldrh	r3, [r2, #0]
 800ab10:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d013      	beq.n	800ab3e <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800ab16:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1eb      	bne.n	800aaf4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800ab1c:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800ab1e:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800ab20:	4a31      	ldr	r2, [pc, #196]	; (800abe8 <EE_WriteVariable+0x114>)
 800ab22:	2300      	movs	r3, #0
 800ab24:	4641      	mov	r1, r8
 800ab26:	2001      	movs	r0, #1
 800ab28:	f005 fafa 	bl	8010120 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab2c:	482f      	ldr	r0, [pc, #188]	; (800abec <EE_WriteVariable+0x118>)
 800ab2e:	f005 fab3 	bl	8010098 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d006      	beq.n	800ab44 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800ab36:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <EE_WriteVariable+0x11c>)
 800ab38:	69dd      	ldr	r5, [r3, #28]
 800ab3a:	b2ad      	uxth	r5, r5
 800ab3c:	e7da      	b.n	800aaf4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800ab3e:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800ab40:	4690      	mov	r8, r2
 800ab42:	e7ed      	b.n	800ab20 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ab44:	2101      	movs	r1, #1
 800ab46:	4a2b      	ldr	r2, [pc, #172]	; (800abf4 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800ab48:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ab4a:	6913      	ldr	r3, [r2, #16]
 800ab4c:	438b      	bics	r3, r1
 800ab4e:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800ab50:	0021      	movs	r1, r4
 800ab52:	f7ff ff31 	bl	800a9b8 <EE_VerifyPageFullWriteVariable>
 800ab56:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800ab58:	d1cc      	bne.n	800aaf4 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ab5a:	4b27      	ldr	r3, [pc, #156]	; (800abf8 <EE_WriteVariable+0x124>)
 800ab5c:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ab5e:	4f27      	ldr	r7, [pc, #156]	; (800abfc <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ab60:	469a      	mov	sl, r3
 800ab62:	e003      	b.n	800ab6c <EE_WriteVariable+0x98>
 800ab64:	3401      	adds	r4, #1
 800ab66:	b2a4      	uxth	r4, r4
 800ab68:	4554      	cmp	r4, sl
 800ab6a:	d00f      	beq.n	800ab8c <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800ab6c:	42a6      	cmp	r6, r4
 800ab6e:	d0f9      	beq.n	800ab64 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ab70:	0039      	movs	r1, r7
 800ab72:	0020      	movs	r0, r4
 800ab74:	f7ff ff7e 	bl	800aa74 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800ab78:	2801      	cmp	r0, #1
 800ab7a:	d0f3      	beq.n	800ab64 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ab7c:	8839      	ldrh	r1, [r7, #0]
 800ab7e:	0020      	movs	r0, r4
 800ab80:	f7ff ff1a 	bl	800a9b8 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d0ed      	beq.n	800ab64 <EE_WriteVariable+0x90>
 800ab88:	0005      	movs	r5, r0
 800ab8a:	e7b3      	b.n	800aaf4 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	f005 fb97 	bl	80102c0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab92:	4816      	ldr	r0, [pc, #88]	; (800abec <EE_WriteVariable+0x118>)
 800ab94:	f005 fa80 	bl	8010098 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d1cc      	bne.n	800ab36 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800ab9c:	2080      	movs	r0, #128	; 0x80
 800ab9e:	0100      	lsls	r0, r0, #4
 800aba0:	4448      	add	r0, r9
 800aba2:	f005 fb8d 	bl	80102c0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aba6:	4811      	ldr	r0, [pc, #68]	; (800abec <EE_WriteVariable+0x118>)
 800aba8:	f005 fa76 	bl	8010098 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800abac:	2800      	cmp	r0, #0
 800abae:	d1c2      	bne.n	800ab36 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800abb0:	2202      	movs	r2, #2
 800abb2:	4c10      	ldr	r4, [pc, #64]	; (800abf4 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800abb4:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800abb6:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800abb8:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800abba:	4393      	bics	r3, r2
 800abbc:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800abbe:	2200      	movs	r2, #0
 800abc0:	2300      	movs	r3, #0
 800abc2:	f005 faad 	bl	8010120 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800abc6:	4809      	ldr	r0, [pc, #36]	; (800abec <EE_WriteVariable+0x118>)
 800abc8:	f005 fa66 	bl	8010098 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800abcc:	2800      	cmp	r0, #0
 800abce:	d1b2      	bne.n	800ab36 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800abd0:	2201      	movs	r2, #1
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	4393      	bics	r3, r2
 800abd6:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800abd8:	f005 fa54 	bl	8010084 <HAL_FLASH_Lock>
 800abdc:	e78a      	b.n	800aaf4 <EE_WriteVariable+0x20>
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	0801e000 	.word	0x0801e000
 800abe4:	0801f000 	.word	0x0801f000
 800abe8:	0000eeee 	.word	0x0000eeee
 800abec:	0000c350 	.word	0x0000c350
 800abf0:	20007210 	.word	0x20007210
 800abf4:	40022000 	.word	0x40022000
 800abf8:	00000401 	.word	0x00000401
 800abfc:	200027c4 	.word	0x200027c4

0800ac00 <EE_Format>:
uint16_t EE_Format(void){
 800ac00:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800ac02:	f005 fa2d 	bl	8010060 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ac06:	481f      	ldr	r0, [pc, #124]	; (800ac84 <EE_Format+0x84>)
 800ac08:	f005 fb5a 	bl	80102c0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac0c:	481e      	ldr	r0, [pc, #120]	; (800ac88 <EE_Format+0x88>)
 800ac0e:	f005 fa43 	bl	8010098 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d003      	beq.n	800ac1e <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800ac16:	4b1d      	ldr	r3, [pc, #116]	; (800ac8c <EE_Format+0x8c>)
 800ac18:	69d8      	ldr	r0, [r3, #28]
 800ac1a:	b280      	uxth	r0, r0
}
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ac1e:	481c      	ldr	r0, [pc, #112]	; (800ac90 <EE_Format+0x90>)
 800ac20:	f005 fb4e 	bl	80102c0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac24:	4818      	ldr	r0, [pc, #96]	; (800ac88 <EE_Format+0x88>)
 800ac26:	f005 fa37 	bl	8010098 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d1f3      	bne.n	800ac16 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ac2e:	2202      	movs	r2, #2
 800ac30:	4c18      	ldr	r4, [pc, #96]	; (800ac94 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ac32:	4914      	ldr	r1, [pc, #80]	; (800ac84 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ac34:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ac36:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ac38:	4393      	bics	r3, r2
 800ac3a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f005 fa6e 	bl	8010120 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac44:	4810      	ldr	r0, [pc, #64]	; (800ac88 <EE_Format+0x88>)
 800ac46:	f005 fa27 	bl	8010098 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d1e3      	bne.n	800ac16 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ac4e:	2501      	movs	r5, #1
 800ac50:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ac52:	4811      	ldr	r0, [pc, #68]	; (800ac98 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ac54:	43ab      	bics	r3, r5
 800ac56:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ac58:	f005 fb32 	bl	80102c0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac5c:	480a      	ldr	r0, [pc, #40]	; (800ac88 <EE_Format+0x88>)
 800ac5e:	f005 fa1b 	bl	8010098 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d1d7      	bne.n	800ac16 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ac66:	480d      	ldr	r0, [pc, #52]	; (800ac9c <EE_Format+0x9c>)
 800ac68:	f005 fb2a 	bl	80102c0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac6c:	4806      	ldr	r0, [pc, #24]	; (800ac88 <EE_Format+0x88>)
 800ac6e:	f005 fa13 	bl	8010098 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d1cf      	bne.n	800ac16 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	43ab      	bics	r3, r5
 800ac7a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800ac7c:	f005 fa02 	bl	8010084 <HAL_FLASH_Lock>
	return FlashStatus;
 800ac80:	2000      	movs	r0, #0
 800ac82:	e7cb      	b.n	800ac1c <EE_Format+0x1c>
 800ac84:	0801e000 	.word	0x0801e000
 800ac88:	0000c350 	.word	0x0000c350
 800ac8c:	20007210 	.word	0x20007210
 800ac90:	0801e800 	.word	0x0801e800
 800ac94:	40022000 	.word	0x40022000
 800ac98:	0801f000 	.word	0x0801f000
 800ac9c:	0801f800 	.word	0x0801f800

0800aca0 <EE_Init>:
uint16_t EE_Init(void){
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800aca4:	4c9d      	ldr	r4, [pc, #628]	; (800af1c <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800aca6:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800aca8:	4d9d      	ldr	r5, [pc, #628]	; (800af20 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800acaa:	f005 f9d9 	bl	8010060 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800acae:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800acb0:	499c      	ldr	r1, [pc, #624]	; (800af24 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800acb2:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800acb4:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800acb6:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800acb8:	428b      	cmp	r3, r1
 800acba:	d100      	bne.n	800acbe <EE_Init+0x1e>
 800acbc:	e06f      	b.n	800ad9e <EE_Init+0xfe>
 800acbe:	489a      	ldr	r0, [pc, #616]	; (800af28 <EE_Init+0x288>)
 800acc0:	4283      	cmp	r3, r0
 800acc2:	d05c      	beq.n	800ad7e <EE_Init+0xde>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <EE_Init+0x46>
			FlashStatus =EE_Format();
 800acc8:	f7ff ff9a 	bl	800ac00 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800accc:	4897      	ldr	r0, [pc, #604]	; (800af2c <EE_Init+0x28c>)
 800acce:	f005 f9e3 	bl	8010098 <FLASH_WaitForLastOperation>
 800acd2:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	d102      	bne.n	800acde <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800acd8:	f005 f9d4 	bl	8010084 <HAL_FLASH_Lock>
	return HAL_OK;
 800acdc:	2500      	movs	r5, #0
}
 800acde:	0028      	movs	r0, r5
 800ace0:	bc04      	pop	{r2}
 800ace2:	4690      	mov	r8, r2
 800ace4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	d0ee      	beq.n	800acc8 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800acea:	4282      	cmp	r2, r0
 800acec:	d100      	bne.n	800acf0 <EE_Init+0x50>
 800acee:	e103      	b.n	800aef8 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800acf0:	4b8f      	ldr	r3, [pc, #572]	; (800af30 <EE_Init+0x290>)
	int16_t x =-1;
 800acf2:	2601      	movs	r6, #1
 800acf4:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800acf6:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800acf8:	4f8e      	ldr	r7, [pc, #568]	; (800af34 <EE_Init+0x294>)
	int16_t x =-1;
 800acfa:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800acfc:	883b      	ldrh	r3, [r7, #0]
 800acfe:	b2a5      	uxth	r5, r4
 800ad00:	42ab      	cmp	r3, r5
 800ad02:	d100      	bne.n	800ad06 <EE_Init+0x66>
						x =VarIdx;
 800ad04:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800ad06:	42b4      	cmp	r4, r6
 800ad08:	d010      	beq.n	800ad2c <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ad0a:	4641      	mov	r1, r8
 800ad0c:	0028      	movs	r0, r5
 800ad0e:	f7ff feb1 	bl	800aa74 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800ad12:	2801      	cmp	r0, #1
 800ad14:	d00a      	beq.n	800ad2c <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ad16:	4643      	mov	r3, r8
 800ad18:	0028      	movs	r0, r5
 800ad1a:	8819      	ldrh	r1, [r3, #0]
 800ad1c:	f7ff fe4c 	bl	800a9b8 <EE_VerifyPageFullWriteVariable>
 800ad20:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad22:	4882      	ldr	r0, [pc, #520]	; (800af2c <EE_Init+0x28c>)
 800ad24:	f005 f9b8 	bl	8010098 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1d8      	bne.n	800acde <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ad2c:	4b82      	ldr	r3, [pc, #520]	; (800af38 <EE_Init+0x298>)
 800ad2e:	3401      	adds	r4, #1
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d1e3      	bne.n	800acfc <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800ad34:	2200      	movs	r2, #0
 800ad36:	2300      	movs	r3, #0
 800ad38:	4979      	ldr	r1, [pc, #484]	; (800af20 <EE_Init+0x280>)
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	f005 f9f0 	bl	8010120 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad40:	487a      	ldr	r0, [pc, #488]	; (800af2c <EE_Init+0x28c>)
 800ad42:	f005 f9a9 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d125      	bne.n	800ad96 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	4c7b      	ldr	r4, [pc, #492]	; (800af3c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ad4e:	4873      	ldr	r0, [pc, #460]	; (800af1c <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	4393      	bics	r3, r2
 800ad54:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ad56:	f005 fab3 	bl	80102c0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad5a:	4874      	ldr	r0, [pc, #464]	; (800af2c <EE_Init+0x28c>)
 800ad5c:	f005 f99c 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d118      	bne.n	800ad96 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ad64:	4876      	ldr	r0, [pc, #472]	; (800af40 <EE_Init+0x2a0>)
 800ad66:	f005 faab 	bl	80102c0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad6a:	4870      	ldr	r0, [pc, #448]	; (800af2c <EE_Init+0x28c>)
 800ad6c:	f005 f994 	bl	8010098 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d110      	bne.n	800ad96 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad74:	2202      	movs	r2, #2
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	4393      	bics	r3, r2
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	e7ac      	b.n	800acd8 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	d07b      	beq.n	800ae7a <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800ad82:	428a      	cmp	r2, r1
 800ad84:	d100      	bne.n	800ad88 <EE_Init+0xe8>
 800ad86:	e08f      	b.n	800aea8 <EE_Init+0x208>
				FlashStatus =EE_Format();
 800ad88:	f7ff ff3a 	bl	800ac00 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad8c:	4867      	ldr	r0, [pc, #412]	; (800af2c <EE_Init+0x28c>)
 800ad8e:	f005 f983 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d0a0      	beq.n	800acd8 <EE_Init+0x38>
						return pFlash.ErrorCode;
 800ad96:	4b6b      	ldr	r3, [pc, #428]	; (800af44 <EE_Init+0x2a4>)
 800ad98:	69dd      	ldr	r5, [r3, #28]
 800ad9a:	b2ad      	uxth	r5, r5
 800ad9c:	e79f      	b.n	800acde <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800ad9e:	2a00      	cmp	r2, #0
 800ada0:	d143      	bne.n	800ae2a <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ada2:	4b63      	ldr	r3, [pc, #396]	; (800af30 <EE_Init+0x290>)
	int16_t x =-1;
 800ada4:	2601      	movs	r6, #1
 800ada6:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ada8:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800adaa:	4f67      	ldr	r7, [pc, #412]	; (800af48 <EE_Init+0x2a8>)
	int16_t x =-1;
 800adac:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800adae:	883b      	ldrh	r3, [r7, #0]
 800adb0:	b2a5      	uxth	r5, r4
 800adb2:	42ab      	cmp	r3, r5
 800adb4:	d100      	bne.n	800adb8 <EE_Init+0x118>
						x =VarIdx;
 800adb6:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800adb8:	42b4      	cmp	r4, r6
 800adba:	d011      	beq.n	800ade0 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800adbc:	4641      	mov	r1, r8
 800adbe:	0028      	movs	r0, r5
 800adc0:	f7ff fe58 	bl	800aa74 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800adc4:	2801      	cmp	r0, #1
 800adc6:	d00b      	beq.n	800ade0 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800adc8:	4643      	mov	r3, r8
 800adca:	0028      	movs	r0, r5
 800adcc:	8819      	ldrh	r1, [r3, #0]
 800adce:	f7ff fdf3 	bl	800a9b8 <EE_VerifyPageFullWriteVariable>
 800add2:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800add4:	4855      	ldr	r0, [pc, #340]	; (800af2c <EE_Init+0x28c>)
 800add6:	f005 f95f 	bl	8010098 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800adda:	2800      	cmp	r0, #0
 800addc:	d000      	beq.n	800ade0 <EE_Init+0x140>
 800adde:	e77e      	b.n	800acde <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ade0:	4b55      	ldr	r3, [pc, #340]	; (800af38 <EE_Init+0x298>)
 800ade2:	3401      	adds	r4, #1
 800ade4:	429c      	cmp	r4, r3
 800ade6:	d1e2      	bne.n	800adae <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	494b      	ldr	r1, [pc, #300]	; (800af1c <EE_Init+0x27c>)
 800adee:	2001      	movs	r0, #1
 800adf0:	f005 f996 	bl	8010120 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adf4:	484d      	ldr	r0, [pc, #308]	; (800af2c <EE_Init+0x28c>)
 800adf6:	f005 f94f 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d1cb      	bne.n	800ad96 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800adfe:	2201      	movs	r2, #1
 800ae00:	4c4e      	ldr	r4, [pc, #312]	; (800af3c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ae02:	4847      	ldr	r0, [pc, #284]	; (800af20 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	4393      	bics	r3, r2
 800ae08:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ae0a:	f005 fa59 	bl	80102c0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae0e:	4847      	ldr	r0, [pc, #284]	; (800af2c <EE_Init+0x28c>)
 800ae10:	f005 f942 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d1be      	bne.n	800ad96 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ae18:	484c      	ldr	r0, [pc, #304]	; (800af4c <EE_Init+0x2ac>)
 800ae1a:	f005 fa51 	bl	80102c0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae1e:	4843      	ldr	r0, [pc, #268]	; (800af2c <EE_Init+0x28c>)
 800ae20:	f005 f93a 	bl	8010098 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d0a5      	beq.n	800ad74 <EE_Init+0xd4>
 800ae28:	e7b5      	b.n	800ad96 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800ae2a:	4b3f      	ldr	r3, [pc, #252]	; (800af28 <EE_Init+0x288>)
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d1ab      	bne.n	800ad88 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ae30:	0028      	movs	r0, r5
 800ae32:	f005 fa45 	bl	80102c0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae36:	483d      	ldr	r0, [pc, #244]	; (800af2c <EE_Init+0x28c>)
 800ae38:	f005 f92e 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d1aa      	bne.n	800ad96 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ae40:	4842      	ldr	r0, [pc, #264]	; (800af4c <EE_Init+0x2ac>)
 800ae42:	f005 fa3d 	bl	80102c0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae46:	4839      	ldr	r0, [pc, #228]	; (800af2c <EE_Init+0x28c>)
 800ae48:	f005 f926 	bl	8010098 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d1a2      	bne.n	800ad96 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae50:	2202      	movs	r2, #2
 800ae52:	4d3a      	ldr	r5, [pc, #232]	; (800af3c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ae54:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae56:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ae58:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae5a:	4393      	bics	r3, r2
 800ae5c:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2300      	movs	r3, #0
 800ae62:	f005 f95d 	bl	8010120 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae66:	4831      	ldr	r0, [pc, #196]	; (800af2c <EE_Init+0x28c>)
 800ae68:	f005 f916 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d192      	bne.n	800ad96 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ae70:	2201      	movs	r2, #1
 800ae72:	692b      	ldr	r3, [r5, #16]
 800ae74:	4393      	bics	r3, r2
 800ae76:	612b      	str	r3, [r5, #16]
 800ae78:	e72e      	b.n	800acd8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ae7a:	0020      	movs	r0, r4
 800ae7c:	f005 fa20 	bl	80102c0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae80:	482a      	ldr	r0, [pc, #168]	; (800af2c <EE_Init+0x28c>)
 800ae82:	f005 f909 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d185      	bne.n	800ad96 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ae8a:	482d      	ldr	r0, [pc, #180]	; (800af40 <EE_Init+0x2a0>)
 800ae8c:	f005 fa18 	bl	80102c0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae90:	4826      	ldr	r0, [pc, #152]	; (800af2c <EE_Init+0x28c>)
 800ae92:	f005 f901 	bl	8010098 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d000      	beq.n	800ae9c <EE_Init+0x1fc>
 800ae9a:	e77c      	b.n	800ad96 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae9c:	2102      	movs	r1, #2
 800ae9e:	4a27      	ldr	r2, [pc, #156]	; (800af3c <EE_Init+0x29c>)
 800aea0:	6913      	ldr	r3, [r2, #16]
 800aea2:	438b      	bics	r3, r1
 800aea4:	6113      	str	r3, [r2, #16]
 800aea6:	e717      	b.n	800acd8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aea8:	0020      	movs	r0, r4
 800aeaa:	f005 fa09 	bl	80102c0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aeae:	481f      	ldr	r0, [pc, #124]	; (800af2c <EE_Init+0x28c>)
 800aeb0:	f005 f8f2 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d000      	beq.n	800aeba <EE_Init+0x21a>
 800aeb8:	e76d      	b.n	800ad96 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800aeba:	4821      	ldr	r0, [pc, #132]	; (800af40 <EE_Init+0x2a0>)
 800aebc:	f005 fa00 	bl	80102c0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aec0:	481a      	ldr	r0, [pc, #104]	; (800af2c <EE_Init+0x28c>)
 800aec2:	f005 f8e9 	bl	8010098 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d000      	beq.n	800aecc <EE_Init+0x22c>
 800aeca:	e764      	b.n	800ad96 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aecc:	2202      	movs	r2, #2
 800aece:	4c1b      	ldr	r4, [pc, #108]	; (800af3c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800aed0:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aed2:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800aed4:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aed6:	4393      	bics	r3, r2
 800aed8:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800aeda:	2200      	movs	r2, #0
 800aedc:	2300      	movs	r3, #0
 800aede:	f005 f91f 	bl	8010120 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aee2:	4812      	ldr	r0, [pc, #72]	; (800af2c <EE_Init+0x28c>)
 800aee4:	f005 f8d8 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d000      	beq.n	800aeee <EE_Init+0x24e>
 800aeec:	e753      	b.n	800ad96 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aeee:	2201      	movs	r2, #1
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	4393      	bics	r3, r2
 800aef4:	6123      	str	r3, [r4, #16]
 800aef6:	e6ef      	b.n	800acd8 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800aef8:	0028      	movs	r0, r5
 800aefa:	f005 f9e1 	bl	80102c0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aefe:	480b      	ldr	r0, [pc, #44]	; (800af2c <EE_Init+0x28c>)
 800af00:	f005 f8ca 	bl	8010098 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800af04:	2800      	cmp	r0, #0
 800af06:	d000      	beq.n	800af0a <EE_Init+0x26a>
 800af08:	e745      	b.n	800ad96 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800af0a:	4810      	ldr	r0, [pc, #64]	; (800af4c <EE_Init+0x2ac>)
 800af0c:	f005 f9d8 	bl	80102c0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800af10:	4806      	ldr	r0, [pc, #24]	; (800af2c <EE_Init+0x28c>)
 800af12:	f005 f8c1 	bl	8010098 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800af16:	2800      	cmp	r0, #0
 800af18:	d0c0      	beq.n	800ae9c <EE_Init+0x1fc>
 800af1a:	e73c      	b.n	800ad96 <EE_Init+0xf6>
 800af1c:	0801e000 	.word	0x0801e000
 800af20:	0801f000 	.word	0x0801f000
 800af24:	0000eeee 	.word	0x0000eeee
 800af28:	0000ffff 	.word	0x0000ffff
 800af2c:	0000c350 	.word	0x0000c350
 800af30:	200027c4 	.word	0x200027c4
 800af34:	0801f006 	.word	0x0801f006
 800af38:	00000401 	.word	0x00000401
 800af3c:	40022000 	.word	0x40022000
 800af40:	0801e800 	.word	0x0801e800
 800af44:	20007210 	.word	0x20007210
 800af48:	0801e006 	.word	0x0801e006
 800af4c:	0801f800 	.word	0x0801f800

0800af50 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800af50:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800af52:	b500      	push	{lr}
 800af54:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800af56:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800af58:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800af5a:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800af5c:	4669      	mov	r1, sp
 800af5e:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800af60:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800af62:	f005 f941 	bl	80101e8 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800af66:	2800      	cmp	r0, #0
 800af68:	d102      	bne.n	800af70 <EraseSector+0x20>
 800af6a:	9b00      	ldr	r3, [sp, #0]
 800af6c:	3301      	adds	r3, #1
 800af6e:	d002      	beq.n	800af76 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af70:	2216      	movs	r2, #22
 800af72:	4b02      	ldr	r3, [pc, #8]	; (800af7c <EraseSector+0x2c>)
 800af74:	701a      	strb	r2, [r3, #0]

	return result;
}
 800af76:	2000      	movs	r0, #0
 800af78:	b005      	add	sp, #20
 800af7a:	bd00      	pop	{pc}
 800af7c:	20000c3c 	.word	0x20000c3c

0800af80 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800af80:	2080      	movs	r0, #128	; 0x80
 800af82:	4b1f      	ldr	r3, [pc, #124]	; (800b000 <GPIO_Init+0x80>)
 800af84:	0300      	lsls	r0, r0, #12
 800af86:	6959      	ldr	r1, [r3, #20]
{
 800af88:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800af8a:	4301      	orrs	r1, r0
 800af8c:	6159      	str	r1, [r3, #20]
 800af8e:	695a      	ldr	r2, [r3, #20]
{
 800af90:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800af92:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800af94:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800af96:	9200      	str	r2, [sp, #0]
 800af98:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800af9a:	6959      	ldr	r1, [r3, #20]
 800af9c:	0280      	lsls	r0, r0, #10
 800af9e:	4301      	orrs	r1, r0
 800afa0:	6159      	str	r1, [r3, #20]
 800afa2:	695a      	ldr	r2, [r3, #20]
 800afa4:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800afa6:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800afa8:	9201      	str	r2, [sp, #4]
 800afaa:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800afac:	6959      	ldr	r1, [r3, #20]
 800afae:	0340      	lsls	r0, r0, #13
 800afb0:	4301      	orrs	r1, r0
 800afb2:	6159      	str	r1, [r3, #20]
 800afb4:	695a      	ldr	r2, [r3, #20]
 800afb6:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800afb8:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800afba:	9202      	str	r2, [sp, #8]
 800afbc:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800afbe:	6959      	ldr	r1, [r3, #20]
 800afc0:	02c0      	lsls	r0, r0, #11
 800afc2:	4301      	orrs	r1, r0
 800afc4:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800afc6:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800afc8:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800afca:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800afcc:	4002      	ands	r2, r0
 800afce:	9203      	str	r2, [sp, #12]
 800afd0:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800afd2:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800afd4:	480b      	ldr	r0, [pc, #44]	; (800b004 <GPIO_Init+0x84>)
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800afd6:	430a      	orrs	r2, r1
 800afd8:	615a      	str	r2, [r3, #20]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	400b      	ands	r3, r1
 800afde:	9304      	str	r3, [sp, #16]
 800afe0:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800afe2:	2380      	movs	r3, #128	; 0x80
 800afe4:	01db      	lsls	r3, r3, #7
 800afe6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afe8:	2301      	movs	r3, #1
 800afea:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afec:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800afee:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800aff2:	3303      	adds	r3, #3
 800aff4:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800aff6:	f005 f975 	bl	80102e4 <HAL_GPIO_Init>
}
 800affa:	b00b      	add	sp, #44	; 0x2c
 800affc:	bd00      	pop	{pc}
 800affe:	46c0      	nop			; (mov r8, r8)
 800b000:	40021000 	.word	0x40021000
 800b004:	48000400 	.word	0x48000400

0800b008 <RS485_DE_RE_Init>:
//-- Configure MAX14840EASA+ \RE and DE
void RS485_DE_RE_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b008:	2301      	movs	r3, #1
{
 800b00a:	b500      	push	{lr}
 800b00c:	b087      	sub	sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b00e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b010:	2300      	movs	r3, #0
	
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800b012:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b014:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b016:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800b018:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800b01a:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800b01c:	015b      	lsls	r3, r3, #5
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800b01e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800b020:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800b022:	f005 f95f 	bl	80102e4 <HAL_GPIO_Init>
	
}
 800b026:	b007      	add	sp, #28
 800b028:	bd00      	pop	{pc}
 800b02a:	46c0      	nop			; (mov r8, r8)

0800b02c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	0015      	movs	r5, r2
 800b030:	001c      	movs	r4, r3
 800b032:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800b034:	f001 fede 	bl	800cdf4 <GetUart>
	
	if (huart == &huart1) 
 800b038:	4a2c      	ldr	r2, [pc, #176]	; (800b0ec <GetPortGPIOs+0xc0>)
	UART_HandleTypeDef* huart = GetUart(port);
 800b03a:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800b03c:	4290      	cmp	r0, r2
 800b03e:	d010      	beq.n	800b062 <GetPortGPIOs+0x36>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800b040:	4a2b      	ldr	r2, [pc, #172]	; (800b0f0 <GetPortGPIOs+0xc4>)
 800b042:	4290      	cmp	r0, r2
 800b044:	d031      	beq.n	800b0aa <GetPortGPIOs+0x7e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800b046:	4a2b      	ldr	r2, [pc, #172]	; (800b0f4 <GetPortGPIOs+0xc8>)
 800b048:	4290      	cmp	r0, r2
 800b04a:	d017      	beq.n	800b07c <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800b04c:	4a2a      	ldr	r2, [pc, #168]	; (800b0f8 <GetPortGPIOs+0xcc>)
 800b04e:	4290      	cmp	r0, r2
 800b050:	d036      	beq.n	800b0c0 <GetPortGPIOs+0x94>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800b052:	4a2a      	ldr	r2, [pc, #168]	; (800b0fc <GetPortGPIOs+0xd0>)
 800b054:	4290      	cmp	r0, r2
 800b056:	d03e      	beq.n	800b0d6 <GetPortGPIOs+0xaa>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800b058:	4a29      	ldr	r2, [pc, #164]	; (800b100 <GetPortGPIOs+0xd4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800b05a:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d019      	beq.n	800b094 <GetPortGPIOs+0x68>
	
	return result;	
}
 800b060:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b062:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800b064:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b066:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800b068:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b06a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800b06c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800b06e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800b070:	2380      	movs	r3, #128	; 0x80
 800b072:	9a04      	ldr	r2, [sp, #16]
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b078:	2000      	movs	r0, #0
 800b07a:	e7f1      	b.n	800b060 <GetPortGPIOs+0x34>
		*TX_Pin = USART3_TX_PIN;
 800b07c:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b07e:	4b21      	ldr	r3, [pc, #132]	; (800b104 <GetPortGPIOs+0xd8>)
		*TX_Pin = USART3_TX_PIN;
 800b080:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b082:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800b084:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800b086:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800b088:	2380      	movs	r3, #128	; 0x80
 800b08a:	9a04      	ldr	r2, [sp, #16]
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b090:	2000      	movs	r0, #0
 800b092:	e7e5      	b.n	800b060 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b094:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800b096:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b098:	05db      	lsls	r3, r3, #23
 800b09a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800b09c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800b09e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b0a4:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800b0a6:	8013      	strh	r3, [r2, #0]
 800b0a8:	e7da      	b.n	800b060 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b0aa:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800b0ac:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b0ae:	05db      	lsls	r3, r3, #23
 800b0b0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800b0b2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800b0b4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800b0b6:	2308      	movs	r3, #8
 800b0b8:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b0ba:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800b0bc:	8013      	strh	r3, [r2, #0]
 800b0be:	e7cf      	b.n	800b060 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800b0c0:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800b0c2:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800b0c4:	05db      	lsls	r3, r3, #23
 800b0c6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800b0c8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800b0ca:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800b0d0:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800b0d2:	8013      	strh	r3, [r2, #0]
 800b0d4:	e7c4      	b.n	800b060 <GetPortGPIOs+0x34>
		*TX_Pin = USART5_TX_PIN;
 800b0d6:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <GetPortGPIOs+0xd8>)
	BOS_Status result = BOS_OK;
 800b0da:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b0dc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800b0de:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800b0e0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800b0e2:	2310      	movs	r3, #16
 800b0e4:	9a04      	ldr	r2, [sp, #16]
 800b0e6:	8013      	strh	r3, [r2, #0]
 800b0e8:	e7ba      	b.n	800b060 <GetPortGPIOs+0x34>
 800b0ea:	46c0      	nop			; (mov r8, r8)
 800b0ec:	20006e88 	.word	0x20006e88
 800b0f0:	20006fe8 	.word	0x20006fe8
 800b0f4:	20006da4 	.word	0x20006da4
 800b0f8:	20006f74 	.word	0x20006f74
 800b0fc:	20006e18 	.word	0x20006e18
 800b100:	20006f04 	.word	0x20006f04
 800b104:	48000400 	.word	0x48000400

0800b108 <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800b108:	2080      	movs	r0, #128	; 0x80
 800b10a:	4b38      	ldr	r3, [pc, #224]	; (800b1ec <IsFactoryReset+0xe4>)
 800b10c:	0280      	lsls	r0, r0, #10
 800b10e:	6959      	ldr	r1, [r3, #20]
{
 800b110:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800b112:	4301      	orrs	r1, r0
 800b114:	6159      	str	r1, [r3, #20]
 800b116:	695a      	ldr	r2, [r3, #20]
{
 800b118:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800b11a:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b11c:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b11e:	9209      	str	r2, [sp, #36]	; 0x24
 800b120:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800b122:	6959      	ldr	r1, [r3, #20]
 800b124:	02c0      	lsls	r0, r0, #11
 800b126:	4301      	orrs	r1, r0
 800b128:	6159      	str	r1, [r3, #20]
 800b12a:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b12c:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800b12e:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800b130:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b132:	920a      	str	r2, [sp, #40]	; 0x28
 800b134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800b136:	6959      	ldr	r1, [r3, #20]
 800b138:	0300      	lsls	r0, r0, #12
 800b13a:	4301      	orrs	r1, r0
 800b13c:	6159      	str	r1, [r3, #20]
  __GPIOD_CLK_ENABLE();
 800b13e:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b140:	695a      	ldr	r2, [r3, #20]
  __GPIOD_CLK_ENABLE();
 800b142:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800b144:	4002      	ands	r2, r0
 800b146:	920b      	str	r2, [sp, #44]	; 0x2c
 800b148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __GPIOD_CLK_ENABLE();
 800b14a:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b14c:	ad03      	add	r5, sp, #12
  __GPIOD_CLK_ENABLE();
 800b14e:	430a      	orrs	r2, r1
 800b150:	615a      	str	r2, [r3, #20]
 800b152:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b154:	446c      	add	r4, sp
  __GPIOD_CLK_ENABLE();
 800b156:	400b      	ands	r3, r1
 800b158:	930c      	str	r3, [sp, #48]	; 0x30
 800b15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b15c:	230e      	movs	r3, #14
 800b15e:	446b      	add	r3, sp
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	002a      	movs	r2, r5
 800b164:	ab06      	add	r3, sp, #24
 800b166:	a905      	add	r1, sp, #20
 800b168:	2001      	movs	r0, #1
 800b16a:	f7ff ff5f 	bl	800b02c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b16e:	aa04      	add	r2, sp, #16
 800b170:	ab08      	add	r3, sp, #32
 800b172:	a907      	add	r1, sp, #28
 800b174:	9400      	str	r4, [sp, #0]
 800b176:	2006      	movs	r0, #6
 800b178:	f7ff ff58 	bl	800b02c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b17c:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17e:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b180:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b182:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b184:	a90d      	add	r1, sp, #52	; 0x34
 800b186:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b188:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18a:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b18c:	f005 f8aa 	bl	80102e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800b190:	2302      	movs	r3, #2
 800b192:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b194:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b196:	a90d      	add	r1, sp, #52	; 0x34
 800b198:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b19a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b19c:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b19e:	f005 f8a1 	bl	80102e4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800b1a2:	8829      	ldrh	r1, [r5, #0]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	9805      	ldr	r0, [sp, #20]
 800b1a8:	f005 fa3c 	bl	8010624 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800b1ac:	2005      	movs	r0, #5
 800b1ae:	f001 fbe1 	bl	800c974 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800b1b2:	8821      	ldrh	r1, [r4, #0]
 800b1b4:	9808      	ldr	r0, [sp, #32]
 800b1b6:	f005 fa2f 	bl	8010618 <HAL_GPIO_ReadPin>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d006      	beq.n	800b1cc <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b1be:	2201      	movs	r2, #1
	return 0;
 800b1c0:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b1c2:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <IsFactoryReset+0xe8>)
 800b1c4:	4252      	negs	r2, r2
 800b1c6:	601a      	str	r2, [r3, #0]
}
 800b1c8:	b012      	add	sp, #72	; 0x48
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800b1cc:	8829      	ldrh	r1, [r5, #0]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	9805      	ldr	r0, [sp, #20]
 800b1d2:	f005 fa27 	bl	8010624 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800b1d6:	2005      	movs	r0, #5
 800b1d8:	f001 fbcc 	bl	800c974 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800b1dc:	8821      	ldrh	r1, [r4, #0]
 800b1de:	9808      	ldr	r0, [sp, #32]
 800b1e0:	f005 fa1a 	bl	8010618 <HAL_GPIO_ReadPin>
 800b1e4:	2801      	cmp	r0, #1
 800b1e6:	d1ea      	bne.n	800b1be <IsFactoryReset+0xb6>
 800b1e8:	e7ee      	b.n	800b1c8 <IsFactoryReset+0xc0>
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	40021000 	.word	0x40021000
 800b1f0:	20007ff0 	.word	0x20007ff0

0800b1f4 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800b1f4:	4770      	bx	lr
 800b1f6:	46c0      	nop			; (mov r8, r8)

0800b1f8 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800b1fa:	4d37      	ldr	r5, [pc, #220]	; (800b2d8 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b1fc:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800b1fe:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b200:	0006      	movs	r6, r0
 800b202:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800b204:	2b00      	cmp	r3, #0
 800b206:	d152      	bne.n	800b2ae <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800b208:	2204      	movs	r2, #4
 800b20a:	4b34      	ldr	r3, [pc, #208]	; (800b2dc <AddPortButton+0xe4>)
 800b20c:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800b20e:	250e      	movs	r5, #14
 800b210:	af04      	add	r7, sp, #16
 800b212:	446d      	add	r5, sp
 800b214:	002a      	movs	r2, r5
 800b216:	ab06      	add	r3, sp, #24
 800b218:	a905      	add	r1, sp, #20
 800b21a:	9700      	str	r7, [sp, #0]
 800b21c:	0020      	movs	r0, r4
 800b21e:	f7ff ff05 	bl	800b02c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800b222:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b224:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800b226:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b228:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b22a:	a907      	add	r1, sp, #28
 800b22c:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b22e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b230:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b232:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b234:	f005 f856 	bl	80102e4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800b238:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b23a:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800b23c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b23e:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b240:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b242:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b244:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b246:	f005 f84d 	bl	80102e4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800b24a:	00e2      	lsls	r2, r4, #3
 800b24c:	4b24      	ldr	r3, [pc, #144]	; (800b2e0 <AddPortButton+0xe8>)
 800b24e:	1912      	adds	r2, r2, r4
 800b250:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b252:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800b254:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b256:	2312      	movs	r3, #18
 800b258:	353a      	adds	r5, #58	; 0x3a
 800b25a:	00ad      	lsls	r5, r5, #2
 800b25c:	446b      	add	r3, sp
 800b25e:	0019      	movs	r1, r3
 800b260:	0028      	movs	r0, r5
 800b262:	f7ff fc07 	bl	800aa74 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b266:	2800      	cmp	r0, #0
 800b268:	d109      	bne.n	800b27e <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800b26a:	466b      	mov	r3, sp
 800b26c:	8a5b      	ldrh	r3, [r3, #18]
 800b26e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800b270:	091a      	lsrs	r2, r3, #4
 800b272:	42a2      	cmp	r2, r4
 800b274:	d103      	bne.n	800b27e <AddPortButton+0x86>
 800b276:	220f      	movs	r2, #15
 800b278:	4013      	ands	r3, r2
 800b27a:	42b3      	cmp	r3, r6
 800b27c:	d014      	beq.n	800b2a8 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b27e:	466b      	mov	r3, sp
 800b280:	0324      	lsls	r4, r4, #12
 800b282:	0231      	lsls	r1, r6, #8
 800b284:	4321      	orrs	r1, r4
 800b286:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b288:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b28a:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b28c:	f7ff fc22 	bl	800aad4 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b290:	2100      	movs	r1, #0
 800b292:	1c68      	adds	r0, r5, #1
 800b294:	f7ff fc1e 	bl	800aad4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b298:	2100      	movs	r1, #0
 800b29a:	1ca8      	adds	r0, r5, #2
 800b29c:	f7ff fc1a 	bl	800aad4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b2a0:	1ce8      	adds	r0, r5, #3
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	f7ff fc16 	bl	800aad4 <EE_WriteVariable>
	}

	return result;
}
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	b00d      	add	sp, #52	; 0x34
 800b2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800b2ae:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <AddPortButton+0xec>)
 800b2b0:	008f      	lsls	r7, r1, #2
 800b2b2:	58f8      	ldr	r0, [r7, r3]
 800b2b4:	f001 ff3a 	bl	800d12c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800b2b8:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <AddPortButton+0xf0>)
 800b2ba:	58f8      	ldr	r0, [r7, r3]
 800b2bc:	f001 ff36 	bl	800d12c <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800b2c0:	2104      	movs	r1, #4
 800b2c2:	4a06      	ldr	r2, [pc, #24]	; (800b2dc <AddPortButton+0xe4>)
 800b2c4:	782b      	ldrb	r3, [r5, #0]
 800b2c6:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0a0      	beq.n	800b20e <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800b2cc:	0020      	movs	r0, r4
 800b2ce:	f001 fd91 	bl	800cdf4 <GetUart>
 800b2d2:	f006 f9d7 	bl	8011684 <HAL_UART_DeInit>
 800b2d6:	e79a      	b.n	800b20e <AddPortButton+0x16>
 800b2d8:	20000b3b 	.word	0x20000b3b
 800b2dc:	20000c2c 	.word	0x20000c2c
 800b2e0:	200027c8 	.word	0x200027c8
 800b2e4:	20006d24 	.word	0x20006d24
 800b2e8:	20006d04 	.word	0x20006d04

0800b2ec <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	483b      	ldr	r0, [pc, #236]	; (800b3e0 <RemovePortButton+0xf4>)
 800b2f4:	00e9      	lsls	r1, r5, #3
 800b2f6:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b2f8:	002c      	movs	r4, r5
	button[port].type = NONE;
 800b2fa:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800b2fc:	b082      	sub	sp, #8
	button[port].state = NONE;
 800b2fe:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800b300:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800b302:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800b304:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800b306:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800b308:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800b30a:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800b30c:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800b30e:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b310:	466b      	mov	r3, sp
 800b312:	343a      	adds	r4, #58	; 0x3a
 800b314:	00a4      	lsls	r4, r4, #2
 800b316:	1d99      	adds	r1, r3, #6
 800b318:	0020      	movs	r0, r4
 800b31a:	f7ff fbab 	bl	800aa74 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800b31e:	2800      	cmp	r0, #0
 800b320:	d02b      	beq.n	800b37a <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800b322:	0028      	movs	r0, r5
 800b324:	f001 fd66 	bl	800cdf4 <GetUart>

	if (huart->Instance == USART1) {
 800b328:	4a2e      	ldr	r2, [pc, #184]	; (800b3e4 <RemovePortButton+0xf8>)
 800b32a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b32c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b32e:	4293      	cmp	r3, r2
 800b330:	d03b      	beq.n	800b3aa <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800b332:	4a2d      	ldr	r2, [pc, #180]	; (800b3e8 <RemovePortButton+0xfc>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d040      	beq.n	800b3ba <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800b338:	4a2c      	ldr	r2, [pc, #176]	; (800b3ec <RemovePortButton+0x100>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d041      	beq.n	800b3c2 <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800b33e:	4a2c      	ldr	r2, [pc, #176]	; (800b3f0 <RemovePortButton+0x104>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d044      	beq.n	800b3ce <RemovePortButton+0xe2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800b344:	4a2b      	ldr	r2, [pc, #172]	; (800b3f4 <RemovePortButton+0x108>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d033      	beq.n	800b3b2 <RemovePortButton+0xc6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800b34a:	4a2b      	ldr	r2, [pc, #172]	; (800b3f8 <RemovePortButton+0x10c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d042      	beq.n	800b3d6 <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800b350:	4a2a      	ldr	r2, [pc, #168]	; (800b3fc <RemovePortButton+0x110>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d039      	beq.n	800b3ca <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800b356:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <RemovePortButton+0x114>)
 800b358:	4694      	mov	ip, r2
 800b35a:	4463      	add	r3, ip
 800b35c:	1e5c      	subs	r4, r3, #1
 800b35e:	41a3      	sbcs	r3, r4
 800b360:	425c      	negs	r4, r3
 800b362:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800b364:	2200      	movs	r2, #0
 800b366:	4b27      	ldr	r3, [pc, #156]	; (800b404 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b368:	4927      	ldr	r1, [pc, #156]	; (800b408 <RemovePortButton+0x11c>)
	portStatus[port] = FREE;
 800b36a:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b36c:	0030      	movs	r0, r6
 800b36e:	3201      	adds	r2, #1
 800b370:	f006 f9d6 	bl	8011720 <HAL_UART_Receive_IT>

	return result;
}
 800b374:	0020      	movs	r0, r4
 800b376:	b002      	add	sp, #8
 800b378:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800b37a:	2100      	movs	r1, #0
 800b37c:	0020      	movs	r0, r4
 800b37e:	f7ff fba9 	bl	800aad4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b382:	2100      	movs	r1, #0
 800b384:	1c60      	adds	r0, r4, #1
 800b386:	f7ff fba5 	bl	800aad4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b38a:	2100      	movs	r1, #0
 800b38c:	1ca0      	adds	r0, r4, #2
 800b38e:	f7ff fba1 	bl	800aad4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b392:	2100      	movs	r1, #0
 800b394:	1ce0      	adds	r0, r4, #3
 800b396:	f7ff fb9d 	bl	800aad4 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800b39a:	0028      	movs	r0, r5
 800b39c:	f001 fd2a 	bl	800cdf4 <GetUart>
	if (huart->Instance == USART1) {
 800b3a0:	4a10      	ldr	r2, [pc, #64]	; (800b3e4 <RemovePortButton+0xf8>)
 800b3a2:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b3a4:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d1c3      	bne.n	800b332 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800b3aa:	f001 fb2d 	bl	800ca08 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800b3ae:	2400      	movs	r4, #0
 800b3b0:	e7d8      	b.n	800b364 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800b3b2:	f001 fb7b 	bl	800caac <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800b3b6:	2400      	movs	r4, #0
 800b3b8:	e7d4      	b.n	800b364 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800b3ba:	f001 fb2f 	bl	800ca1c <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800b3be:	2400      	movs	r4, #0
 800b3c0:	e7d0      	b.n	800b364 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800b3c2:	f001 fb43 	bl	800ca4c <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800b3c6:	2400      	movs	r4, #0
 800b3c8:	e7cc      	b.n	800b364 <RemovePortButton+0x78>
 800b3ca:	2400      	movs	r4, #0
 800b3cc:	e7ca      	b.n	800b364 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800b3ce:	f001 fb55 	bl	800ca7c <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800b3d2:	2400      	movs	r4, #0
 800b3d4:	e7c6      	b.n	800b364 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800b3d6:	f001 fb81 	bl	800cadc <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800b3da:	2400      	movs	r4, #0
 800b3dc:	e7c2      	b.n	800b364 <RemovePortButton+0x78>
 800b3de:	46c0      	nop			; (mov r8, r8)
 800b3e0:	200027c8 	.word	0x200027c8
 800b3e4:	40013800 	.word	0x40013800
 800b3e8:	40004400 	.word	0x40004400
 800b3ec:	40004800 	.word	0x40004800
 800b3f0:	40004c00 	.word	0x40004c00
 800b3f4:	40005000 	.word	0x40005000
 800b3f8:	40011400 	.word	0x40011400
 800b3fc:	40011800 	.word	0x40011800
 800b400:	bffee400 	.word	0xbffee400
 800b404:	20000c2c 	.word	0x20000c2c
 800b408:	20000c4d 	.word	0x20000c4d

0800b40c <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b40e:	464e      	mov	r6, r9
 800b410:	4645      	mov	r5, r8
 800b412:	46de      	mov	lr, fp
 800b414:	4657      	mov	r7, sl
 800b416:	b5e0      	push	{r5, r6, r7, lr}
 800b418:	b087      	sub	sp, #28
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	ab10      	add	r3, sp, #64	; 0x40
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	0005      	movs	r5, r0
 800b422:	9302      	str	r3, [sp, #8]
 800b424:	ab11      	add	r3, sp, #68	; 0x44
 800b426:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800b428:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	ab12      	add	r3, sp, #72	; 0x48
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	469a      	mov	sl, r3
 800b432:	ab13      	add	r3, sp, #76	; 0x4c
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	4699      	mov	r9, r3
 800b438:	ab14      	add	r3, sp, #80	; 0x50
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	469b      	mov	fp, r3
 800b43e:	ab15      	add	r3, sp, #84	; 0x54
 800b440:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800b442:	4b80      	ldr	r3, [pc, #512]	; (800b644 <SetButtonEvents+0x238>)
 800b444:	4698      	mov	r8, r3
 800b446:	1963      	adds	r3, r4, r5
 800b448:	4443      	add	r3, r8
 800b44a:	785e      	ldrb	r6, [r3, #1]
 800b44c:	2e00      	cmp	r6, #0
 800b44e:	d050      	beq.n	800b4f2 <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800b450:	9e01      	ldr	r6, [sp, #4]
 800b452:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800b454:	9e02      	ldr	r6, [sp, #8]
 800b456:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800b458:	9e03      	ldr	r6, [sp, #12]
 800b45a:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800b45c:	4656      	mov	r6, sl
 800b45e:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800b460:	464e      	mov	r6, r9
 800b462:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800b464:	465e      	mov	r6, fp
 800b466:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800b468:	2801      	cmp	r0, #1
 800b46a:	d04b      	beq.n	800b504 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d000      	beq.n	800b472 <SetButtonEvents+0x66>
 800b470:	e076      	b.n	800b560 <SetButtonEvents+0x154>
 800b472:	2900      	cmp	r1, #0
 800b474:	d000      	beq.n	800b478 <SetButtonEvents+0x6c>
 800b476:	e0bf      	b.n	800b5f8 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800b478:	2601      	movs	r6, #1
 800b47a:	7a19      	ldrb	r1, [r3, #8]
 800b47c:	43b1      	bics	r1, r6
 800b47e:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800b480:	2a00      	cmp	r2, #0
 800b482:	d142      	bne.n	800b50a <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800b484:	2302      	movs	r3, #2
 800b486:	4399      	bics	r1, r3
 800b488:	1963      	adds	r3, r4, r5
 800b48a:	4443      	add	r3, r8
 800b48c:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d143      	bne.n	800b51c <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b494:	2304      	movs	r3, #4
 800b496:	4399      	bics	r1, r3
 800b498:	1963      	adds	r3, r4, r5
 800b49a:	4443      	add	r3, r8
 800b49c:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b49e:	9b02      	ldr	r3, [sp, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d144      	bne.n	800b52e <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	4399      	bics	r1, r3
 800b4a8:	1963      	adds	r3, r4, r5
 800b4aa:	4443      	add	r3, r8
 800b4ac:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d145      	bne.n	800b540 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	000a      	movs	r2, r1
 800b4b8:	439a      	bics	r2, r3
 800b4ba:	1963      	adds	r3, r4, r5
 800b4bc:	4443      	add	r3, r8
 800b4be:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b4c0:	4653      	mov	r3, sl
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d100      	bne.n	800b4c8 <SetButtonEvents+0xbc>
 800b4c6:	e09c      	b.n	800b602 <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b4c8:	2120      	movs	r1, #32
 800b4ca:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b4cc:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b4ce:	1963      	adds	r3, r4, r5
 800b4d0:	4443      	add	r3, r8
 800b4d2:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	d100      	bne.n	800b4da <SetButtonEvents+0xce>
 800b4d8:	e09d      	b.n	800b616 <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b4da:	2240      	movs	r2, #64	; 0x40
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800b4e0:	465b      	mov	r3, fp
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d136      	bne.n	800b554 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b4e6:	217f      	movs	r1, #127	; 0x7f
 800b4e8:	1963      	adds	r3, r4, r5
 800b4ea:	4443      	add	r3, r8
 800b4ec:	4011      	ands	r1, r2
 800b4ee:	7219      	strb	r1, [r3, #8]
 800b4f0:	e036      	b.n	800b560 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800b4f2:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800b4f4:	0020      	movs	r0, r4
 800b4f6:	b007      	add	sp, #28
 800b4f8:	bc3c      	pop	{r2, r3, r4, r5}
 800b4fa:	4690      	mov	r8, r2
 800b4fc:	4699      	mov	r9, r3
 800b4fe:	46a2      	mov	sl, r4
 800b500:	46ab      	mov	fp, r5
 800b502:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b504:	7a19      	ldrb	r1, [r3, #8]
 800b506:	2301      	movs	r3, #1
 800b508:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800b50a:	2202      	movs	r2, #2
 800b50c:	1963      	adds	r3, r4, r5
 800b50e:	4443      	add	r3, r8
 800b510:	4311      	orrs	r1, r2
 800b512:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b514:	2801      	cmp	r0, #1
 800b516:	d000      	beq.n	800b51a <SetButtonEvents+0x10e>
 800b518:	e08c      	b.n	800b634 <SetButtonEvents+0x228>
 800b51a:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b51c:	2204      	movs	r2, #4
 800b51e:	1963      	adds	r3, r4, r5
 800b520:	4443      	add	r3, r8
 800b522:	4311      	orrs	r1, r2
 800b524:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b526:	2801      	cmp	r0, #1
 800b528:	d000      	beq.n	800b52c <SetButtonEvents+0x120>
 800b52a:	e07f      	b.n	800b62c <SetButtonEvents+0x220>
 800b52c:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b52e:	2208      	movs	r2, #8
 800b530:	1963      	adds	r3, r4, r5
 800b532:	4443      	add	r3, r8
 800b534:	4311      	orrs	r1, r2
 800b536:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b538:	2801      	cmp	r0, #1
 800b53a:	d000      	beq.n	800b53e <SetButtonEvents+0x132>
 800b53c:	e07e      	b.n	800b63c <SetButtonEvents+0x230>
 800b53e:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b540:	2210      	movs	r2, #16
 800b542:	1963      	adds	r3, r4, r5
 800b544:	4443      	add	r3, r8
 800b546:	4311      	orrs	r1, r2
 800b548:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b54a:	2801      	cmp	r0, #1
 800b54c:	d16a      	bne.n	800b624 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b54e:	2260      	movs	r2, #96	; 0x60
 800b550:	b2c9      	uxtb	r1, r1
 800b552:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b554:	2180      	movs	r1, #128	; 0x80
 800b556:	1963      	adds	r3, r4, r5
 800b558:	4249      	negs	r1, r1
 800b55a:	4443      	add	r3, r8
 800b55c:	4311      	orrs	r1, r2
 800b55e:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b560:	002e      	movs	r6, r5
 800b562:	ab04      	add	r3, sp, #16
 800b564:	363a      	adds	r6, #58	; 0x3a
 800b566:	00b6      	lsls	r6, r6, #2
 800b568:	1d9f      	adds	r7, r3, #6
 800b56a:	0039      	movs	r1, r7
 800b56c:	0030      	movs	r0, r6
 800b56e:	f7ff fa81 	bl	800aa74 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b572:	2800      	cmp	r0, #0
 800b574:	d1bd      	bne.n	800b4f2 <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b576:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800b578:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b57a:	4444      	add	r4, r8
 800b57c:	7a22      	ldrb	r2, [r4, #8]
 800b57e:	b2d9      	uxtb	r1, r3
 800b580:	4291      	cmp	r1, r2
 800b582:	d006      	beq.n	800b592 <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b584:	0a19      	lsrs	r1, r3, #8
 800b586:	0209      	lsls	r1, r1, #8
 800b588:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b58a:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b58c:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b58e:	f7ff faa1 	bl	800aad4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800b592:	1c74      	adds	r4, r6, #1
 800b594:	0039      	movs	r1, r7
 800b596:	0020      	movs	r0, r4
 800b598:	f7ff fa6c 	bl	800aa74 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800b59c:	4652      	mov	r2, sl
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	0219      	lsls	r1, r3, #8
 800b5a2:	883b      	ldrh	r3, [r7, #0]
 800b5a4:	430a      	orrs	r2, r1
		if (temp16
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d003      	beq.n	800b5b2 <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800b5aa:	b291      	uxth	r1, r2
 800b5ac:	0020      	movs	r0, r4
 800b5ae:	f7ff fa91 	bl	800aad4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800b5b2:	1cb4      	adds	r4, r6, #2
 800b5b4:	0039      	movs	r1, r7
 800b5b6:	0020      	movs	r0, r4
 800b5b8:	f7ff fa5c 	bl	800aa74 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800b5bc:	464a      	mov	r2, r9
 800b5be:	9b02      	ldr	r3, [sp, #8]
 800b5c0:	0219      	lsls	r1, r3, #8
 800b5c2:	883b      	ldrh	r3, [r7, #0]
 800b5c4:	430a      	orrs	r2, r1
		if (temp16
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d003      	beq.n	800b5d2 <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800b5ca:	b291      	uxth	r1, r2
 800b5cc:	0020      	movs	r0, r4
 800b5ce:	f7ff fa81 	bl	800aad4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800b5d2:	3603      	adds	r6, #3
 800b5d4:	0039      	movs	r1, r7
 800b5d6:	0030      	movs	r0, r6
 800b5d8:	f7ff fa4c 	bl	800aa74 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b5dc:	465a      	mov	r2, fp
 800b5de:	9b03      	ldr	r3, [sp, #12]
	return result;
 800b5e0:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b5e2:	0219      	lsls	r1, r3, #8
 800b5e4:	883b      	ldrh	r3, [r7, #0]
 800b5e6:	430a      	orrs	r2, r1
		if (temp16
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d100      	bne.n	800b5ee <SetButtonEvents+0x1e2>
 800b5ec:	e782      	b.n	800b4f4 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800b5ee:	b291      	uxth	r1, r2
 800b5f0:	0030      	movs	r0, r6
 800b5f2:	f7ff fa6f 	bl	800aad4 <EE_WriteVariable>
 800b5f6:	e77d      	b.n	800b4f4 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b5f8:	2601      	movs	r6, #1
 800b5fa:	7a19      	ldrb	r1, [r3, #8]
 800b5fc:	4331      	orrs	r1, r6
 800b5fe:	7219      	strb	r1, [r3, #8]
 800b600:	e73e      	b.n	800b480 <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b602:	2320      	movs	r3, #32
 800b604:	439a      	bics	r2, r3
 800b606:	1963      	adds	r3, r4, r5
 800b608:	4443      	add	r3, r8
 800b60a:	0011      	movs	r1, r2
 800b60c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b60e:	464a      	mov	r2, r9
 800b610:	2a00      	cmp	r2, #0
 800b612:	d000      	beq.n	800b616 <SetButtonEvents+0x20a>
 800b614:	e761      	b.n	800b4da <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b616:	2340      	movs	r3, #64	; 0x40
 800b618:	000a      	movs	r2, r1
 800b61a:	439a      	bics	r2, r3
 800b61c:	1963      	adds	r3, r4, r5
 800b61e:	4443      	add	r3, r8
 800b620:	721a      	strb	r2, [r3, #8]
 800b622:	e75d      	b.n	800b4e0 <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b624:	2800      	cmp	r0, #0
 800b626:	d19b      	bne.n	800b560 <SetButtonEvents+0x154>
 800b628:	7a1a      	ldrb	r2, [r3, #8]
 800b62a:	e749      	b.n	800b4c0 <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d197      	bne.n	800b560 <SetButtonEvents+0x154>
 800b630:	7a19      	ldrb	r1, [r3, #8]
 800b632:	e734      	b.n	800b49e <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b634:	2800      	cmp	r0, #0
 800b636:	d193      	bne.n	800b560 <SetButtonEvents+0x154>
 800b638:	7a19      	ldrb	r1, [r3, #8]
 800b63a:	e728      	b.n	800b48e <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d18f      	bne.n	800b560 <SetButtonEvents+0x154>
 800b640:	7a19      	ldrb	r1, [r3, #8]
 800b642:	e734      	b.n	800b4ae <SetButtonEvents+0xa2>
 800b644:	200027c8 	.word	0x200027c8

0800b648 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800b648:	4811      	ldr	r0, [pc, #68]	; (800b690 <MX_ADC_Init+0x48>)
 800b64a:	4b12      	ldr	r3, [pc, #72]	; (800b694 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800b64c:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b64e:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800b650:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b652:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b654:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b656:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b658:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b65a:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b65c:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b65e:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b660:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b662:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b664:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b666:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800b668:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800b66a:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800b66c:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800b66e:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b670:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b672:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800b674:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b676:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800b678:	f003 fc62 	bl	800ef40 <HAL_ADC_Init>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d002      	beq.n	800b686 <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800b680:	2064      	movs	r0, #100	; 0x64
 800b682:	f003 fb83 	bl	800ed8c <HAL_Delay>
	ADC_flag = 1;
 800b686:	2378      	movs	r3, #120	; 0x78
 800b688:	2101      	movs	r1, #1
 800b68a:	4a03      	ldr	r2, [pc, #12]	; (800b698 <MX_ADC_Init+0x50>)
 800b68c:	54d1      	strb	r1, [r2, r3]
}
 800b68e:	bd10      	pop	{r4, pc}
 800b690:	2000707c 	.word	0x2000707c
 800b694:	40012400 	.word	0x40012400
 800b698:	200027c8 	.word	0x200027c8

0800b69c <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800b69c:	b500      	push	{lr}
 800b69e:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b6a0:	2214      	movs	r2, #20
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	a803      	add	r0, sp, #12
 800b6a6:	f006 ff77 	bl	8012598 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b6aa:	2080      	movs	r0, #128	; 0x80
 800b6ac:	4b11      	ldr	r3, [pc, #68]	; (800b6f4 <HAL_ADC_MspInit+0x58>)
 800b6ae:	0080      	lsls	r0, r0, #2
 800b6b0:	6999      	ldr	r1, [r3, #24]
 800b6b2:	4301      	orrs	r1, r0
 800b6b4:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b6b6:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b6b8:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b6ba:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b6bc:	4002      	ands	r2, r0
 800b6be:	9201      	str	r2, [sp, #4]
 800b6c0:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b6c2:	695a      	ldr	r2, [r3, #20]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	615a      	str	r2, [r3, #20]
 800b6c8:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800b6ca:	4a0b      	ldr	r2, [pc, #44]	; (800b6f8 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b6cc:	400b      	ands	r3, r1
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800b6d2:	2379      	movs	r3, #121	; 0x79
 800b6d4:	5cd3      	ldrb	r3, [r2, r3]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d001      	beq.n	800b6de <HAL_ADC_MspInit+0x42>
}
 800b6da:	b009      	add	sp, #36	; 0x24
 800b6dc:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b6de:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800b6e0:	333b      	adds	r3, #59	; 0x3b
 800b6e2:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b6e4:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b6e6:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b6e8:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b6ea:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b6ec:	f004 fdfa 	bl	80102e4 <HAL_GPIO_Init>
}
 800b6f0:	e7f3      	b.n	800b6da <HAL_ADC_MspInit+0x3e>
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	40021000 	.word	0x40021000
 800b6f8:	200027c8 	.word	0x200027c8

0800b6fc <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	46ce      	mov	lr, r9
 800b700:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800b702:	2378      	movs	r3, #120	; 0x78
void ReadTempAndVref(float *temp, float *Vref) {
 800b704:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800b706:	4c57      	ldr	r4, [pc, #348]	; (800b864 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp, float *Vref) {
 800b708:	0007      	movs	r7, r0
	if (0 == ADC_flag)
 800b70a:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800b70c:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d100      	bne.n	800b714 <ReadTempAndVref+0x18>
 800b712:	e0a4      	b.n	800b85e <ReadTempAndVref+0x162>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b714:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b716:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b718:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b71a:	0152      	lsls	r2, r2, #5
 800b71c:	3370      	adds	r3, #112	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b71e:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b720:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b722:	2201      	movs	r2, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b724:	4d50      	ldr	r5, [pc, #320]	; (800b868 <ReadTempAndVref+0x16c>)
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b726:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b728:	317c      	adds	r1, #124	; 0x7c
 800b72a:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b72c:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b72e:	f003 fd5f 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800b732:	2800      	cmp	r0, #0
 800b734:	d000      	beq.n	800b738 <ReadTempAndVref+0x3c>
 800b736:	e08e      	b.n	800b856 <ReadTempAndVref+0x15a>
	HAL_ADC_Start(&hadc);
 800b738:	0028      	movs	r0, r5
 800b73a:	f003 fca3 	bl	800f084 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b73e:	2164      	movs	r1, #100	; 0x64
 800b740:	0028      	movs	r0, r5
 800b742:	f003 fceb 	bl	800f11c <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800b746:	0028      	movs	r0, r5
 800b748:	f003 fd4c 	bl	800f1e4 <HAL_ADC_GetValue>
 800b74c:	4e47      	ldr	r6, [pc, #284]	; (800b86c <ReadTempAndVref+0x170>)
 800b74e:	8130      	strh	r0, [r6, #8]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800b750:	0400      	lsls	r0, r0, #16
 800b752:	0c00      	lsrs	r0, r0, #16
 800b754:	f7f7 f97a 	bl	8002a4c <__aeabi_i2d>
 800b758:	4a45      	ldr	r2, [pc, #276]	; (800b870 <ReadTempAndVref+0x174>)
 800b75a:	4b46      	ldr	r3, [pc, #280]	; (800b874 <ReadTempAndVref+0x178>)
 800b75c:	f7f6 fb6a 	bl	8001e34 <__aeabi_dmul>
 800b760:	2200      	movs	r2, #0
 800b762:	4b45      	ldr	r3, [pc, #276]	; (800b878 <ReadTempAndVref+0x17c>)
 800b764:	f7f5 ff5c 	bl	8001620 <__aeabi_ddiv>
 800b768:	4a44      	ldr	r2, [pc, #272]	; (800b87c <ReadTempAndVref+0x180>)
 800b76a:	4b45      	ldr	r3, [pc, #276]	; (800b880 <ReadTempAndVref+0x184>)
 800b76c:	f7f6 fdd4 	bl	8002318 <__aeabi_dsub>
 800b770:	4a44      	ldr	r2, [pc, #272]	; (800b884 <ReadTempAndVref+0x188>)
 800b772:	4b45      	ldr	r3, [pc, #276]	; (800b888 <ReadTempAndVref+0x18c>)
 800b774:	f7f5 ff54 	bl	8001620 <__aeabi_ddiv>
 800b778:	2200      	movs	r2, #0
 800b77a:	4b44      	ldr	r3, [pc, #272]	; (800b88c <ReadTempAndVref+0x190>)
 800b77c:	f7f5 fc34 	bl	8000fe8 <__aeabi_dadd>
 800b780:	f7f7 fa22 	bl	8002bc8 <__aeabi_d2f>
 800b784:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800b786:	0028      	movs	r0, r5
 800b788:	f003 fca8 	bl	800f0dc <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b78c:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_NONE;
 800b78e:	4a40      	ldr	r2, [pc, #256]	; (800b890 <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b790:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b792:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b794:	3370      	adds	r3, #112	; 0x70
 800b796:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b798:	2201      	movs	r2, #1
 800b79a:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b79c:	317c      	adds	r1, #124	; 0x7c
 800b79e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b7a0:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b7a2:	f003 fd25 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d151      	bne.n	800b84e <ReadTempAndVref+0x152>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b7aa:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b7ac:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b7ae:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b7b0:	0152      	lsls	r2, r2, #5
 800b7b2:	336f      	adds	r3, #111	; 0x6f
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b7b4:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b7b6:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b7b8:	2205      	movs	r2, #5
 800b7ba:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b7bc:	317c      	adds	r1, #124	; 0x7c
 800b7be:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b7c0:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b7c2:	f003 fd15 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d13d      	bne.n	800b846 <ReadTempAndVref+0x14a>
	HAL_ADC_Start(&hadc);
 800b7ca:	0028      	movs	r0, r5
 800b7cc:	f003 fc5a 	bl	800f084 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b7d0:	2164      	movs	r1, #100	; 0x64
 800b7d2:	0028      	movs	r0, r5
 800b7d4:	f003 fca2 	bl	800f11c <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800b7d8:	0028      	movs	r0, r5
 800b7da:	f003 fd03 	bl	800f1e4 <HAL_ADC_GetValue>
 800b7de:	4680      	mov	r8, r0
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800b7e0:	4b2c      	ldr	r3, [pc, #176]	; (800b894 <ReadTempAndVref+0x198>)
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800b7e2:	8170      	strh	r0, [r6, #10]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800b7e4:	8818      	ldrh	r0, [r3, #0]
 800b7e6:	f7f7 f931 	bl	8002a4c <__aeabi_i2d>
 800b7ea:	4a21      	ldr	r2, [pc, #132]	; (800b870 <ReadTempAndVref+0x174>)
 800b7ec:	4b21      	ldr	r3, [pc, #132]	; (800b874 <ReadTempAndVref+0x178>)
 800b7ee:	f7f6 fb21 	bl	8001e34 <__aeabi_dmul>
 800b7f2:	4643      	mov	r3, r8
 800b7f4:	0006      	movs	r6, r0
 800b7f6:	0418      	lsls	r0, r3, #16
 800b7f8:	0c00      	lsrs	r0, r0, #16
 800b7fa:	000f      	movs	r7, r1
 800b7fc:	f7f7 f926 	bl	8002a4c <__aeabi_i2d>
 800b800:	0002      	movs	r2, r0
 800b802:	000b      	movs	r3, r1
 800b804:	0030      	movs	r0, r6
 800b806:	0039      	movs	r1, r7
 800b808:	f7f5 ff0a 	bl	8001620 <__aeabi_ddiv>
 800b80c:	f7f7 f9dc 	bl	8002bc8 <__aeabi_d2f>
 800b810:	464b      	mov	r3, r9
 800b812:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800b814:	0028      	movs	r0, r5
 800b816:	f003 fc61 	bl	800f0dc <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b81a:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_NONE;
 800b81c:	4a1c      	ldr	r2, [pc, #112]	; (800b890 <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b81e:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b820:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b822:	336f      	adds	r3, #111	; 0x6f
 800b824:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b826:	2201      	movs	r2, #1
 800b828:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b82a:	317c      	adds	r1, #124	; 0x7c
 800b82c:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b82e:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b830:	f003 fcde 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800b834:	2800      	cmp	r0, #0
 800b836:	d002      	beq.n	800b83e <ReadTempAndVref+0x142>
	HAL_Delay(100);
 800b838:	2064      	movs	r0, #100	; 0x64
 800b83a:	f003 faa7 	bl	800ed8c <HAL_Delay>
}
 800b83e:	bc0c      	pop	{r2, r3}
 800b840:	4690      	mov	r8, r2
 800b842:	4699      	mov	r9, r3
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800b846:	2064      	movs	r0, #100	; 0x64
 800b848:	f003 faa0 	bl	800ed8c <HAL_Delay>
 800b84c:	e7bd      	b.n	800b7ca <ReadTempAndVref+0xce>
 800b84e:	2064      	movs	r0, #100	; 0x64
 800b850:	f003 fa9c 	bl	800ed8c <HAL_Delay>
 800b854:	e7a9      	b.n	800b7aa <ReadTempAndVref+0xae>
 800b856:	2064      	movs	r0, #100	; 0x64
 800b858:	f003 fa98 	bl	800ed8c <HAL_Delay>
 800b85c:	e76c      	b.n	800b738 <ReadTempAndVref+0x3c>
		MX_ADC_Init();
 800b85e:	f7ff fef3 	bl	800b648 <MX_ADC_Init>
 800b862:	e757      	b.n	800b714 <ReadTempAndVref+0x18>
 800b864:	200027c8 	.word	0x200027c8
 800b868:	2000707c 	.word	0x2000707c
 800b86c:	20002848 	.word	0x20002848
 800b870:	66666666 	.word	0x66666666
 800b874:	400a6666 	.word	0x400a6666
 800b878:	40affe00 	.word	0x40affe00
 800b87c:	28f5c28f 	.word	0x28f5c28f
 800b880:	3ff68f5c 	.word	0x3ff68f5c
 800b884:	33333333 	.word	0x33333333
 800b888:	40113333 	.word	0x40113333
 800b88c:	40390000 	.word	0x40390000
 800b890:	00001001 	.word	0x00001001
 800b894:	1ffff7ba 	.word	0x1ffff7ba

0800b898 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800b898:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800b89a:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800b89c:	b087      	sub	sp, #28
 800b89e:	0005      	movs	r5, r0
 800b8a0:	000f      	movs	r7, r1
	if (port == 2 || port == 3) {
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d901      	bls.n	800b8aa <GetReadPrecentage+0x12>
}
 800b8a6:	b007      	add	sp, #28
 800b8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800b8aa:	2378      	movs	r3, #120	; 0x78
 800b8ac:	4c59      	ldr	r4, [pc, #356]	; (800ba14 <GetReadPrecentage+0x17c>)
 800b8ae:	5ce3      	ldrb	r3, [r4, r3]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d065      	beq.n	800b980 <GetReadPrecentage+0xe8>
		Channel = Get_channel(GetUart(port), "bottom");
 800b8b4:	0028      	movs	r0, r5
 800b8b6:	f001 fa9d 	bl	800cdf4 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800b8ba:	4a57      	ldr	r2, [pc, #348]	; (800ba18 <GetReadPrecentage+0x180>)
 800b8bc:	6803      	ldr	r3, [r0, #0]
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d100      	bne.n	800b8c4 <GetReadPrecentage+0x2c>
 800b8c2:	e080      	b.n	800b9c6 <GetReadPrecentage+0x12e>
	else if (huart->Instance == USART6 && side == "top")
 800b8c4:	4a55      	ldr	r2, [pc, #340]	; (800ba1c <GetReadPrecentage+0x184>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d04f      	beq.n	800b96a <GetReadPrecentage+0xd2>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	001a      	movs	r2, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800b8ce:	4e54      	ldr	r6, [pc, #336]	; (800ba20 <GetReadPrecentage+0x188>)
		sConfig.Channel = Channel;
 800b8d0:	67e2      	str	r2, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b8d2:	2280      	movs	r2, #128	; 0x80
		Channel = Get_channel(GetUart(port), "bottom");
 800b8d4:	7333      	strb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b8d6:	2380      	movs	r3, #128	; 0x80
 800b8d8:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b8da:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b8dc:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b8de:	2201      	movs	r2, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b8e0:	4d50      	ldr	r5, [pc, #320]	; (800ba24 <GetReadPrecentage+0x18c>)
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b8e2:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b8e4:	317c      	adds	r1, #124	; 0x7c
 800b8e6:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b8e8:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b8ea:	f003 fc81 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d142      	bne.n	800b978 <GetReadPrecentage+0xe0>
		HAL_ADC_Start(&hadc);
 800b8f2:	0028      	movs	r0, r5
 800b8f4:	f003 fbc6 	bl	800f084 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800b8f8:	2164      	movs	r1, #100	; 0x64
 800b8fa:	0028      	movs	r0, r5
 800b8fc:	f003 fc0e 	bl	800f11c <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800b900:	0028      	movs	r0, r5
 800b902:	f003 fc6f 	bl	800f1e4 <HAL_ADC_GetValue>
 800b906:	f7f5 fb2f 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800b90a:	f7f7 f90b 	bl	8002b24 <__aeabi_f2d>
 800b90e:	4a46      	ldr	r2, [pc, #280]	; (800ba28 <GetReadPrecentage+0x190>)
 800b910:	4b46      	ldr	r3, [pc, #280]	; (800ba2c <GetReadPrecentage+0x194>)
 800b912:	f7f6 fa8f 	bl	8001e34 <__aeabi_dmul>
 800b916:	2200      	movs	r2, #0
 800b918:	4b45      	ldr	r3, [pc, #276]	; (800ba30 <GetReadPrecentage+0x198>)
 800b91a:	f7f5 fe81 	bl	8001620 <__aeabi_ddiv>
 800b91e:	f7f7 f953 	bl	8002bc8 <__aeabi_d2f>
		current = (100 * percentage) / 3.3;
 800b922:	4944      	ldr	r1, [pc, #272]	; (800ba34 <GetReadPrecentage+0x19c>)
		percentage = 3.3 * percentage / 4095;
 800b924:	6130      	str	r0, [r6, #16]
		current = (100 * percentage) / 3.3;
 800b926:	f7f5 f809 	bl	800093c <__aeabi_fmul>
 800b92a:	f7f7 f8fb 	bl	8002b24 <__aeabi_f2d>
 800b92e:	4a3e      	ldr	r2, [pc, #248]	; (800ba28 <GetReadPrecentage+0x190>)
 800b930:	4b3e      	ldr	r3, [pc, #248]	; (800ba2c <GetReadPrecentage+0x194>)
 800b932:	f7f5 fe75 	bl	8001620 <__aeabi_ddiv>
 800b936:	f7f7 f947 	bl	8002bc8 <__aeabi_d2f>
 800b93a:	6170      	str	r0, [r6, #20]
		*precentageValue = current;
 800b93c:	6038      	str	r0, [r7, #0]
		HAL_ADC_Stop(&hadc);
 800b93e:	0028      	movs	r0, r5
 800b940:	f003 fbcc 	bl	800f0dc <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800b944:	7b33      	ldrb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_NONE;
 800b946:	4a3c      	ldr	r2, [pc, #240]	; (800ba38 <GetReadPrecentage+0x1a0>)
		sConfig.Channel = Channel;
 800b948:	67e3      	str	r3, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 800b94a:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b94c:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_NONE;
 800b94e:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b950:	2201      	movs	r2, #1
 800b952:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b954:	317c      	adds	r1, #124	; 0x7c
 800b956:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b958:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b95a:	f003 fc49 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d0a1      	beq.n	800b8a6 <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800b962:	2064      	movs	r0, #100	; 0x64
 800b964:	f003 fa12 	bl	800ed8c <HAL_Delay>
 800b968:	e79d      	b.n	800b8a6 <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800b96a:	4a34      	ldr	r2, [pc, #208]	; (800ba3c <GetReadPrecentage+0x1a4>)
 800b96c:	4b34      	ldr	r3, [pc, #208]	; (800ba40 <GetReadPrecentage+0x1a8>)
 800b96e:	429a      	cmp	r2, r3
 800b970:	d04c      	beq.n	800ba0c <GetReadPrecentage+0x174>
 800b972:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 800b974:	2305      	movs	r3, #5
 800b976:	e7aa      	b.n	800b8ce <GetReadPrecentage+0x36>
	HAL_Delay(100);
 800b978:	2064      	movs	r0, #100	; 0x64
 800b97a:	f003 fa07 	bl	800ed8c <HAL_Delay>
 800b97e:	e7b8      	b.n	800b8f2 <GetReadPrecentage+0x5a>
			MX_ADC_Init();
 800b980:	f7ff fe62 	bl	800b648 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800b984:	0028      	movs	r0, r5
 800b986:	f001 fa35 	bl	800cdf4 <GetUart>
 800b98a:	f005 fe7b 	bl	8011684 <HAL_UART_DeInit>
			if (port == 3) {
 800b98e:	2d03      	cmp	r5, #3
 800b990:	d020      	beq.n	800b9d4 <GetReadPrecentage+0x13c>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800b992:	2090      	movs	r0, #144	; 0x90
 800b994:	2104      	movs	r1, #4
 800b996:	05c0      	lsls	r0, r0, #23
 800b998:	f004 fda0 	bl	80104dc <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b99c:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b99e:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b9a0:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9a2:	3b03      	subs	r3, #3
 800b9a4:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9a6:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b9a8:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9aa:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b9ac:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9ae:	f004 fc99 	bl	80102e4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800b9b2:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b9b4:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800b9b6:	4b23      	ldr	r3, [pc, #140]	; (800ba44 <GetReadPrecentage+0x1ac>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b9b8:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800b9ba:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b9bc:	05c0      	lsls	r0, r0, #23
 800b9be:	3a05      	subs	r2, #5
 800b9c0:	f004 fe30 	bl	8010624 <HAL_GPIO_WritePin>
 800b9c4:	e776      	b.n	800b8b4 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800b9c6:	4a1d      	ldr	r2, [pc, #116]	; (800ba3c <GetReadPrecentage+0x1a4>)
 800b9c8:	4b1d      	ldr	r3, [pc, #116]	; (800ba40 <GetReadPrecentage+0x1a8>)
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d01b      	beq.n	800ba06 <GetReadPrecentage+0x16e>
 800b9ce:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e77c      	b.n	800b8ce <GetReadPrecentage+0x36>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800b9d4:	2090      	movs	r0, #144	; 0x90
 800b9d6:	2110      	movs	r1, #16
 800b9d8:	05c0      	lsls	r0, r0, #23
 800b9da:	f004 fd7f 	bl	80104dc <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b9de:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9e0:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b9e2:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9e4:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9e6:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9e8:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9ea:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b9ec:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9ee:	f004 fc79 	bl	80102e4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800b9f2:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b9f4:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <GetReadPrecentage+0x1ac>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b9f8:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800b9fa:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b9fc:	05c0      	lsls	r0, r0, #23
 800b9fe:	3a05      	subs	r2, #5
 800ba00:	f004 fe10 	bl	8010624 <HAL_GPIO_WritePin>
 800ba04:	e756      	b.n	800b8b4 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800ba06:	2202      	movs	r2, #2
		return ADC_CHANNEL_2;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e760      	b.n	800b8ce <GetReadPrecentage+0x36>
	else if (huart->Instance == USART6 && side == "top")
 800ba0c:	2204      	movs	r2, #4
		return ADC_CHANNEL_4;
 800ba0e:	2304      	movs	r3, #4
 800ba10:	e75d      	b.n	800b8ce <GetReadPrecentage+0x36>
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	200027c8 	.word	0x200027c8
 800ba18:	40004400 	.word	0x40004400
 800ba1c:	40011400 	.word	0x40011400
 800ba20:	20002848 	.word	0x20002848
 800ba24:	2000707c 	.word	0x2000707c
 800ba28:	66666666 	.word	0x66666666
 800ba2c:	400a6666 	.word	0x400a6666
 800ba30:	40affe00 	.word	0x40affe00
 800ba34:	42c80000 	.word	0x42c80000
 800ba38:	00001001 	.word	0x00001001
 800ba3c:	08018090 	.word	0x08018090
 800ba40:	0801808c 	.word	0x0801808c
 800ba44:	20000c2c 	.word	0x20000c2c

0800ba48 <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800ba48:	2802      	cmp	r0, #2
 800ba4a:	d00e      	beq.n	800ba6a <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800ba4c:	2803      	cmp	r0, #3
 800ba4e:	d002      	beq.n	800ba56 <Get_Rank+0xe>
 800ba50:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <Get_Rank+0x4c>)
 800ba52:	7e18      	ldrb	r0, [r3, #24]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800ba54:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800ba56:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <Get_Rank+0x50>)
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	d016      	beq.n	800ba8a <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800ba5c:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <Get_Rank+0x54>)
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	d1f6      	bne.n	800ba50 <Get_Rank+0x8>
		Rank_t = 3;
 800ba62:	4b0c      	ldr	r3, [pc, #48]	; (800ba94 <Get_Rank+0x4c>)
 800ba64:	7618      	strb	r0, [r3, #24]
 800ba66:	2003      	movs	r0, #3
 800ba68:	e7f4      	b.n	800ba54 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800ba6a:	4b0b      	ldr	r3, [pc, #44]	; (800ba98 <Get_Rank+0x50>)
 800ba6c:	4299      	cmp	r1, r3
 800ba6e:	d007      	beq.n	800ba80 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800ba70:	4b0a      	ldr	r3, [pc, #40]	; (800ba9c <Get_Rank+0x54>)
 800ba72:	4299      	cmp	r1, r3
 800ba74:	d1ec      	bne.n	800ba50 <Get_Rank+0x8>
		Rank_t = 1;
 800ba76:	2201      	movs	r2, #1
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <Get_Rank+0x4c>)
 800ba7a:	2001      	movs	r0, #1
 800ba7c:	761a      	strb	r2, [r3, #24]
 800ba7e:	e7e9      	b.n	800ba54 <Get_Rank+0xc>
		Rank_t = 0;
 800ba80:	2200      	movs	r2, #0
 800ba82:	4b04      	ldr	r3, [pc, #16]	; (800ba94 <Get_Rank+0x4c>)
 800ba84:	2000      	movs	r0, #0
 800ba86:	761a      	strb	r2, [r3, #24]
 800ba88:	e7e4      	b.n	800ba54 <Get_Rank+0xc>
		Rank_t = 2;
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	4b01      	ldr	r3, [pc, #4]	; (800ba94 <Get_Rank+0x4c>)
 800ba8e:	3801      	subs	r0, #1
 800ba90:	761a      	strb	r2, [r3, #24]
 800ba92:	e7df      	b.n	800ba54 <Get_Rank+0xc>
 800ba94:	20002848 	.word	0x20002848
 800ba98:	0801808c 	.word	0x0801808c
 800ba9c:	08018090 	.word	0x08018090

0800baa0 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	46c6      	mov	lr, r8
	if (ADC_port == 2 || ADC_port == 3) {
 800baa4:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800baa6:	b500      	push	{lr}
 800baa8:	0004      	movs	r4, r0
 800baaa:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800baac:	2b01      	cmp	r3, #1
 800baae:	d902      	bls.n	800bab6 <ADCSelectChannel+0x16>
}
 800bab0:	bc04      	pop	{r2}
 800bab2:	4690      	mov	r8, r2
 800bab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800bab6:	2379      	movs	r3, #121	; 0x79
 800bab8:	2201      	movs	r2, #1
 800baba:	4e1e      	ldr	r6, [pc, #120]	; (800bb34 <ADCSelectChannel+0x94>)
 800babc:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800babe:	f001 f999 	bl	800cdf4 <GetUart>
 800bac2:	f005 fddf 	bl	8011684 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800bac6:	2206      	movs	r2, #6
 800bac8:	4b1b      	ldr	r3, [pc, #108]	; (800bb38 <ADCSelectChannel+0x98>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800baca:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800bacc:	191b      	adds	r3, r3, r4
 800bace:	3b01      	subs	r3, #1
 800bad0:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800bad2:	f001 f98f 	bl	800cdf4 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800bad6:	4a19      	ldr	r2, [pc, #100]	; (800bb3c <ADCSelectChannel+0x9c>)
 800bad8:	6803      	ldr	r3, [r0, #0]
 800bada:	4293      	cmp	r3, r2
 800badc:	d011      	beq.n	800bb02 <ADCSelectChannel+0x62>
	else if (huart->Instance == USART6 && side == "top")
 800bade:	4a18      	ldr	r2, [pc, #96]	; (800bb40 <ADCSelectChannel+0xa0>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d017      	beq.n	800bb14 <ADCSelectChannel+0x74>
		Channel = Get_channel(GetUart(ADC_port), side);
 800bae4:	4643      	mov	r3, r8
 800bae6:	4f17      	ldr	r7, [pc, #92]	; (800bb44 <ADCSelectChannel+0xa4>)
		Rank_t = Get_Rank(ADC_port, side);
 800bae8:	0029      	movs	r1, r5
 800baea:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800baec:	733b      	strb	r3, [r7, #12]
		Rank_t = Get_Rank(ADC_port, side);
 800baee:	f7ff ffab 	bl	800ba48 <Get_Rank>
		if (ADC_flag == 0)
 800baf2:	2378      	movs	r3, #120	; 0x78
 800baf4:	5cf3      	ldrb	r3, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800baf6:	7638      	strb	r0, [r7, #24]
		if (ADC_flag == 0)
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1d9      	bne.n	800bab0 <ADCSelectChannel+0x10>
			MX_ADC_Init();
 800bafc:	f7ff fda4 	bl	800b648 <MX_ADC_Init>
}
 800bb00:	e7d6      	b.n	800bab0 <ADCSelectChannel+0x10>
	if (huart->Instance == USART2 && side == "top")
 800bb02:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <ADCSelectChannel+0xa8>)
 800bb04:	429d      	cmp	r5, r3
 800bb06:	d011      	beq.n	800bb2c <ADCSelectChannel+0x8c>
	else if (huart->Instance == USART2 && side == "bottom")
 800bb08:	4b10      	ldr	r3, [pc, #64]	; (800bb4c <ADCSelectChannel+0xac>)
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	d1ea      	bne.n	800bae4 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_3;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	4698      	mov	r8, r3
 800bb12:	e7e7      	b.n	800bae4 <ADCSelectChannel+0x44>
	else if (huart->Instance == USART6 && side == "top")
 800bb14:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <ADCSelectChannel+0xa8>)
 800bb16:	429d      	cmp	r5, r3
 800bb18:	d005      	beq.n	800bb26 <ADCSelectChannel+0x86>
	else if (huart->Instance == USART6 && side == "bottom")
 800bb1a:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <ADCSelectChannel+0xac>)
 800bb1c:	429d      	cmp	r5, r3
 800bb1e:	d1e1      	bne.n	800bae4 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_5;
 800bb20:	2305      	movs	r3, #5
 800bb22:	4698      	mov	r8, r3
 800bb24:	e7de      	b.n	800bae4 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_4;
 800bb26:	2304      	movs	r3, #4
 800bb28:	4698      	mov	r8, r3
 800bb2a:	e7db      	b.n	800bae4 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_2;
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	4698      	mov	r8, r3
 800bb30:	e7d8      	b.n	800bae4 <ADCSelectChannel+0x44>
 800bb32:	46c0      	nop			; (mov r8, r8)
 800bb34:	200027c8 	.word	0x200027c8
 800bb38:	20000c2c 	.word	0x20000c2c
 800bb3c:	40004400 	.word	0x40004400
 800bb40:	40011400 	.word	0x40011400
 800bb44:	20002848 	.word	0x20002848
 800bb48:	0801808c 	.word	0x0801808c
 800bb4c:	08018090 	.word	0x08018090

0800bb50 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	4647      	mov	r7, r8
 800bb54:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800bb56:	2378      	movs	r3, #120	; 0x78
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bb58:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800bb5a:	4d3a      	ldr	r5, [pc, #232]	; (800bc44 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bb5c:	4680      	mov	r8, r0
	if (ADC_flag == 1) {
 800bb5e:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800bb60:	000f      	movs	r7, r1
 800bb62:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d00b      	beq.n	800bb80 <ReadADCChannel+0x30>
 800bb68:	4c37      	ldr	r4, [pc, #220]	; (800bc48 <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800bb6a:	7e23      	ldrb	r3, [r4, #24]
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	18e4      	adds	r4, r4, r3
 800bb70:	8ba0      	ldrh	r0, [r4, #28]
 800bb72:	f7f5 f9f9 	bl	8000f68 <__aeabi_ui2f>
 800bb76:	6030      	str	r0, [r6, #0]
}
 800bb78:	bc0c      	pop	{r2, r3}
 800bb7a:	4690      	mov	r8, r2
 800bb7c:	4699      	mov	r9, r3
 800bb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800bb80:	f001 f938 	bl	800cdf4 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800bb84:	4a31      	ldr	r2, [pc, #196]	; (800bc4c <ReadADCChannel+0xfc>)
 800bb86:	6803      	ldr	r3, [r0, #0]
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d03f      	beq.n	800bc0c <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800bb8c:	4a30      	ldr	r2, [pc, #192]	; (800bc50 <ReadADCChannel+0x100>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d049      	beq.n	800bc26 <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800bb92:	464b      	mov	r3, r9
 800bb94:	4c2c      	ldr	r4, [pc, #176]	; (800bc48 <ReadADCChannel+0xf8>)
		Rank_t = Get_Rank(Port, side);
 800bb96:	0039      	movs	r1, r7
 800bb98:	4640      	mov	r0, r8
		Channel = Get_channel(GetUart(Port), side);
 800bb9a:	7323      	strb	r3, [r4, #12]
		Rank_t = Get_Rank(Port, side);
 800bb9c:	f7ff ff54 	bl	800ba48 <Get_Rank>
		sConfig.Channel = Channel;
 800bba0:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bba2:	2280      	movs	r2, #128	; 0x80
		sConfig.Channel = Channel;
 800bba4:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bba6:	2380      	movs	r3, #128	; 0x80
 800bba8:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbaa:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bbac:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bbae:	2203      	movs	r2, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbb0:	4f28      	ldr	r7, [pc, #160]	; (800bc54 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800bbb2:	7620      	strb	r0, [r4, #24]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bbb4:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbb6:	317c      	adds	r1, #124	; 0x7c
 800bbb8:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bbba:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbbc:	f003 fb18 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d12c      	bne.n	800bc1e <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800bbc4:	0038      	movs	r0, r7
 800bbc6:	f003 fa5d 	bl	800f084 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800bbca:	2164      	movs	r1, #100	; 0x64
 800bbcc:	0038      	movs	r0, r7
 800bbce:	f003 faa5 	bl	800f11c <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800bbd2:	0038      	movs	r0, r7
 800bbd4:	f003 fb06 	bl	800f1e4 <HAL_ADC_GetValue>
 800bbd8:	7e23      	ldrb	r3, [r4, #24]
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	18e3      	adds	r3, r4, r3
 800bbde:	8398      	strh	r0, [r3, #28]
		HAL_ADC_Stop(&hadc);
 800bbe0:	0038      	movs	r0, r7
 800bbe2:	f003 fa7b 	bl	800f0dc <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800bbe6:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_NONE;
 800bbe8:	4a1b      	ldr	r2, [pc, #108]	; (800bc58 <ReadADCChannel+0x108>)
		sConfig.Channel = Channel;
 800bbea:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 800bbec:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbee:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_NONE;
 800bbf0:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbf6:	317c      	adds	r1, #124	; 0x7c
 800bbf8:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bbfa:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bbfc:	f003 faf8 	bl	800f1f0 <HAL_ADC_ConfigChannel>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d0b2      	beq.n	800bb6a <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800bc04:	2064      	movs	r0, #100	; 0x64
 800bc06:	f003 f8c1 	bl	800ed8c <HAL_Delay>
 800bc0a:	e7ae      	b.n	800bb6a <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800bc0c:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <ReadADCChannel+0x10c>)
 800bc0e:	429f      	cmp	r7, r3
 800bc10:	d012      	beq.n	800bc38 <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800bc12:	4b13      	ldr	r3, [pc, #76]	; (800bc60 <ReadADCChannel+0x110>)
 800bc14:	429f      	cmp	r7, r3
 800bc16:	d1bc      	bne.n	800bb92 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	4699      	mov	r9, r3
 800bc1c:	e7b9      	b.n	800bb92 <ReadADCChannel+0x42>
	HAL_Delay(100);
 800bc1e:	2064      	movs	r0, #100	; 0x64
 800bc20:	f003 f8b4 	bl	800ed8c <HAL_Delay>
 800bc24:	e7ce      	b.n	800bbc4 <ReadADCChannel+0x74>
	else if (huart->Instance == USART6 && side == "top")
 800bc26:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <ReadADCChannel+0x10c>)
 800bc28:	429f      	cmp	r7, r3
 800bc2a:	d008      	beq.n	800bc3e <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800bc2c:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <ReadADCChannel+0x110>)
 800bc2e:	429f      	cmp	r7, r3
 800bc30:	d1af      	bne.n	800bb92 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800bc32:	2305      	movs	r3, #5
 800bc34:	4699      	mov	r9, r3
 800bc36:	e7ac      	b.n	800bb92 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800bc38:	2302      	movs	r3, #2
 800bc3a:	4699      	mov	r9, r3
 800bc3c:	e7a9      	b.n	800bb92 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800bc3e:	2304      	movs	r3, #4
 800bc40:	4699      	mov	r9, r3
 800bc42:	e7a6      	b.n	800bb92 <ReadADCChannel+0x42>
 800bc44:	200027c8 	.word	0x200027c8
 800bc48:	20002848 	.word	0x20002848
 800bc4c:	40004400 	.word	0x40004400
 800bc50:	40011400 	.word	0x40011400
 800bc54:	2000707c 	.word	0x2000707c
 800bc58:	00001001 	.word	0x00001001
 800bc5c:	0801808c 	.word	0x0801808c
 800bc60:	08018090 	.word	0x08018090

0800bc64 <buttonReleasedCallback>:
 800bc64:	4770      	bx	lr
 800bc66:	46c0      	nop			; (mov r8, r8)

0800bc68 <buttonClickedCallback>:
 800bc68:	4770      	bx	lr
 800bc6a:	46c0      	nop			; (mov r8, r8)

0800bc6c <buttonDblClickedCallback>:
 800bc6c:	4770      	bx	lr
 800bc6e:	46c0      	nop			; (mov r8, r8)

0800bc70 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800bc70:	4770      	bx	lr
 800bc72:	46c0      	nop			; (mov r8, r8)

0800bc74 <buttonReleasedForYCallback>:
 800bc74:	4770      	bx	lr
 800bc76:	46c0      	nop			; (mov r8, r8)

0800bc78 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800bc78:	4bc2      	ldr	r3, [pc, #776]	; (800bf84 <CheckAttachedButtons+0x30c>)
 800bc7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7c:	4645      	mov	r5, r8
 800bc7e:	001c      	movs	r4, r3
 800bc80:	4698      	mov	r8, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bc82:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800bc84:	46de      	mov	lr, fp
 800bc86:	464e      	mov	r6, r9
 800bc88:	4657      	mov	r7, sl
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bc8a:	469b      	mov	fp, r3
void CheckAttachedButtons(void) {
 800bc8c:	b5e0      	push	{r5, r6, r7, lr}
 800bc8e:	b08d      	sub	sp, #52	; 0x34
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bc90:	9306      	str	r3, [sp, #24]
			if (delayButtonStateReset == false)
 800bc92:	4bbd      	ldr	r3, [pc, #756]	; (800bf88 <CheckAttachedButtons+0x310>)
void CheckAttachedButtons(void) {
 800bc94:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800bc96:	4699      	mov	r9, r3
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800bc98:	465b      	mov	r3, fp
 800bc9a:	3409      	adds	r4, #9
 800bc9c:	9305      	str	r3, [sp, #20]
 800bc9e:	b2eb      	uxtb	r3, r5
 800bca0:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800bca2:	7863      	ldrb	r3, [r4, #1]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d100      	bne.n	800bcaa <CheckAttachedButtons+0x32>
 800bca8:	e0ec      	b.n	800be84 <CheckAttachedButtons+0x20c>
			if (delayButtonStateReset == false)
 800bcaa:	2324      	movs	r3, #36	; 0x24
 800bcac:	464a      	mov	r2, r9
 800bcae:	5cd3      	ldrb	r3, [r2, r3]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d100      	bne.n	800bcb6 <CheckAttachedButtons+0x3e>
				button[i].state = NONE;
 800bcb4:	7023      	strb	r3, [r4, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bcb6:	ab06      	add	r3, sp, #24
 800bcb8:	469c      	mov	ip, r3
 800bcba:	270e      	movs	r7, #14
 800bcbc:	ae09      	add	r6, sp, #36	; 0x24
 800bcbe:	4467      	add	r7, ip
 800bcc0:	ab0b      	add	r3, sp, #44	; 0x2c
 800bcc2:	0032      	movs	r2, r6
 800bcc4:	a90a      	add	r1, sp, #40	; 0x28
 800bcc6:	9700      	str	r7, [sp, #0]
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f7ff f9af 	bl	800b02c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800bcce:	8831      	ldrh	r1, [r6, #0]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bcd4:	f004 fca6 	bl	8010624 <HAL_GPIO_WritePin>
			Delay_us(10);
 800bcd8:	200a      	movs	r0, #10
 800bcda:	f000 fe39 	bl	800c950 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800bcde:	8839      	ldrh	r1, [r7, #0]
 800bce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bce2:	f004 fc99 	bl	8010618 <HAL_GPIO_ReadPin>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d100      	bne.n	800bcec <CheckAttachedButtons+0x74>
 800bcea:	e122      	b.n	800bf32 <CheckAttachedButtons+0x2ba>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800bcec:	8831      	ldrh	r1, [r6, #0]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bcf2:	f004 fc97 	bl	8010624 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800bcf6:	7863      	ldrb	r3, [r4, #1]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d100      	bne.n	800bcfe <CheckAttachedButtons+0x86>
 800bcfc:	e0d0      	b.n	800bea0 <CheckAttachedButtons+0x228>
 800bcfe:	d800      	bhi.n	800bd02 <CheckAttachedButtons+0x8a>
 800bd00:	e0cc      	b.n	800be9c <CheckAttachedButtons+0x224>
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d100      	bne.n	800bd08 <CheckAttachedButtons+0x90>
 800bd06:	e14d      	b.n	800bfa4 <CheckAttachedButtons+0x32c>
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d000      	beq.n	800bd0e <CheckAttachedButtons+0x96>
 800bd0c:	e11f      	b.n	800bf4e <CheckAttachedButtons+0x2d6>
 800bd0e:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bd10:	9e05      	ldr	r6, [sp, #20]
 800bd12:	00aa      	lsls	r2, r5, #2
 800bd14:	3140      	adds	r1, #64	; 0x40
 800bd16:	588b      	ldr	r3, [r1, r2]
 800bd18:	2e01      	cmp	r6, #1
 800bd1a:	d100      	bne.n	800bd1e <CheckAttachedButtons+0xa6>
 800bd1c:	e14d      	b.n	800bfba <CheckAttachedButtons+0x342>
				else if (connected == GPIO_PIN_RESET)
 800bd1e:	2e00      	cmp	r6, #0
 800bd20:	d100      	bne.n	800bd24 <CheckAttachedButtons+0xac>
 800bd22:	e233      	b.n	800c18c <CheckAttachedButtons+0x514>
			if (state == CLOSED || state == ON) {
 800bd24:	9906      	ldr	r1, [sp, #24]
 800bd26:	2904      	cmp	r1, #4
 800bd28:	d100      	bne.n	800bd2c <CheckAttachedButtons+0xb4>
 800bd2a:	e118      	b.n	800bf5e <CheckAttachedButtons+0x2e6>
 800bd2c:	9906      	ldr	r1, [sp, #24]
 800bd2e:	2902      	cmp	r1, #2
 800bd30:	d100      	bne.n	800bd34 <CheckAttachedButtons+0xbc>
 800bd32:	e114      	b.n	800bf5e <CheckAttachedButtons+0x2e6>
			if (state == OPEN || state == OFF) {
 800bd34:	9906      	ldr	r1, [sp, #24]
 800bd36:	2903      	cmp	r1, #3
 800bd38:	d003      	beq.n	800bd42 <CheckAttachedButtons+0xca>
 800bd3a:	4894      	ldr	r0, [pc, #592]	; (800bf8c <CheckAttachedButtons+0x314>)
 800bd3c:	9004      	str	r0, [sp, #16]
 800bd3e:	2901      	cmp	r1, #1
 800bd40:	d116      	bne.n	800bd70 <CheckAttachedButtons+0xf8>
				if (releaseCounter[i] < 0xFFFF)
 800bd42:	4640      	mov	r0, r8
 800bd44:	305c      	adds	r0, #92	; 0x5c
 800bd46:	5881      	ldr	r1, [r0, r2]
 800bd48:	4e91      	ldr	r6, [pc, #580]	; (800bf90 <CheckAttachedButtons+0x318>)
 800bd4a:	42b1      	cmp	r1, r6
 800bd4c:	d900      	bls.n	800bd50 <CheckAttachedButtons+0xd8>
 800bd4e:	e0bc      	b.n	800beca <CheckAttachedButtons+0x252>
					++releaseCounter[i];		// Advance the debounce counter
 800bd50:	3101      	adds	r1, #1
 800bd52:	5081      	str	r1, [r0, r2]
 800bd54:	488d      	ldr	r0, [pc, #564]	; (800bf8c <CheckAttachedButtons+0x314>)
				if (clicked == 2
 800bd56:	272f      	movs	r7, #47	; 0x2f
 800bd58:	9004      	str	r0, [sp, #16]
 800bd5a:	7946      	ldrb	r6, [r0, #5]
 800bd5c:	4648      	mov	r0, r9
 800bd5e:	498d      	ldr	r1, [pc, #564]	; (800bf94 <CheckAttachedButtons+0x31c>)
 800bd60:	5dc7      	ldrb	r7, [r0, r7]
 800bd62:	5c69      	ldrb	r1, [r5, r1]
 800bd64:	2f02      	cmp	r7, #2
 800bd66:	d100      	bne.n	800bd6a <CheckAttachedButtons+0xf2>
 800bd68:	e103      	b.n	800bf72 <CheckAttachedButtons+0x2fa>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800bd6a:	42b1      	cmp	r1, r6
 800bd6c:	d900      	bls.n	800bd70 <CheckAttachedButtons+0xf8>
 800bd6e:	e102      	b.n	800bf76 <CheckAttachedButtons+0x2fe>
 800bd70:	4646      	mov	r6, r8
			if (pressCounter[i] < BOS.buttons.debounce) {
 800bd72:	9904      	ldr	r1, [sp, #16]
 800bd74:	365c      	adds	r6, #92	; 0x5c
 800bd76:	58b0      	ldr	r0, [r6, r2]
 800bd78:	8809      	ldrh	r1, [r1, #0]
 800bd7a:	9003      	str	r0, [sp, #12]
 800bd7c:	4299      	cmp	r1, r3
 800bd7e:	d84d      	bhi.n	800be1c <CheckAttachedButtons+0x1a4>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800bd80:	d105      	bne.n	800bd8e <CheckAttachedButtons+0x116>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800bd82:	2707      	movs	r7, #7
 800bd84:	7027      	strb	r7, [r4, #0]
					++pressCounter[i];
 800bd86:	4647      	mov	r7, r8
 800bd88:	3301      	adds	r3, #1
 800bd8a:	3740      	adds	r7, #64	; 0x40
 800bd8c:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800bd8e:	9803      	ldr	r0, [sp, #12]
 800bd90:	4281      	cmp	r1, r0
 800bd92:	d205      	bcs.n	800bda0 <CheckAttachedButtons+0x128>
					releaseCounter[i] = 0;
 800bd94:	4646      	mov	r6, r8
 800bd96:	2700      	movs	r7, #0
 800bd98:	2000      	movs	r0, #0
 800bd9a:	365c      	adds	r6, #92	; 0x5c
 800bd9c:	50b7      	str	r7, [r6, r2]
 800bd9e:	9003      	str	r0, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800bda0:	9804      	ldr	r0, [sp, #16]
 800bda2:	8840      	ldrh	r0, [r0, #2]
 800bda4:	9007      	str	r0, [sp, #28]
 800bda6:	4298      	cmp	r0, r3
 800bda8:	d204      	bcs.n	800bdb4 <CheckAttachedButtons+0x13c>
						&& pressCounter[i] < 500) {
 800bdaa:	20f4      	movs	r0, #244	; 0xf4
 800bdac:	30ff      	adds	r0, #255	; 0xff
 800bdae:	4283      	cmp	r3, r0
 800bdb0:	d800      	bhi.n	800bdb4 <CheckAttachedButtons+0x13c>
 800bdb2:	e10c      	b.n	800bfce <CheckAttachedButtons+0x356>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800bdb4:	4878      	ldr	r0, [pc, #480]	; (800bf98 <CheckAttachedButtons+0x320>)
 800bdb6:	4684      	mov	ip, r0
 800bdb8:	4878      	ldr	r0, [pc, #480]	; (800bf9c <CheckAttachedButtons+0x324>)
 800bdba:	449c      	add	ip, r3
 800bdbc:	4584      	cmp	ip, r0
 800bdbe:	d82d      	bhi.n	800be1c <CheckAttachedButtons+0x1a4>
					if (clicked)
 800bdc0:	202f      	movs	r0, #47	; 0x2f
 800bdc2:	4684      	mov	ip, r0
 800bdc4:	4648      	mov	r0, r9
 800bdc6:	4667      	mov	r7, ip
 800bdc8:	5dc0      	ldrb	r0, [r0, r7]
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d002      	beq.n	800bdd4 <CheckAttachedButtons+0x15c>
						clicked = 0;						// Cannot be a click
 800bdce:	4648      	mov	r0, r9
 800bdd0:	2600      	movs	r6, #0
 800bdd2:	55c6      	strb	r6, [r0, r7]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bdd4:	78a0      	ldrb	r0, [r4, #2]
	t1 *= 1000;
 800bdd6:	0147      	lsls	r7, r0, #5
 800bdd8:	1a3f      	subs	r7, r7, r0
 800bdda:	00bf      	lsls	r7, r7, #2
 800bddc:	4683      	mov	fp, r0
 800bdde:	46bc      	mov	ip, r7
 800bde0:	44dc      	add	ip, fp
 800bde2:	4660      	mov	r0, ip
 800bde4:	00c0      	lsls	r0, r0, #3
	if (pressCounter[port] == t1) {
 800bde6:	4298      	cmp	r0, r3
 800bde8:	d100      	bne.n	800bdec <CheckAttachedButtons+0x174>
 800bdea:	e169      	b.n	800c0c0 <CheckAttachedButtons+0x448>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bdec:	78e0      	ldrb	r0, [r4, #3]
	t2 *= 1000;
 800bdee:	0147      	lsls	r7, r0, #5
 800bdf0:	1a3f      	subs	r7, r7, r0
 800bdf2:	00bf      	lsls	r7, r7, #2
 800bdf4:	4683      	mov	fp, r0
 800bdf6:	46bc      	mov	ip, r7
 800bdf8:	44dc      	add	ip, fp
 800bdfa:	4660      	mov	r0, ip
 800bdfc:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t2) {
 800bdfe:	4298      	cmp	r0, r3
 800be00:	d100      	bne.n	800be04 <CheckAttachedButtons+0x18c>
 800be02:	e175      	b.n	800c0f0 <CheckAttachedButtons+0x478>
			t3 = button[port].pressedX3Sec;
 800be04:	7920      	ldrb	r0, [r4, #4]
	t3 *= 1000;
 800be06:	0146      	lsls	r6, r0, #5
 800be08:	1a36      	subs	r6, r6, r0
 800be0a:	00b6      	lsls	r6, r6, #2
 800be0c:	4683      	mov	fp, r0
 800be0e:	46b4      	mov	ip, r6
 800be10:	44dc      	add	ip, fp
 800be12:	4660      	mov	r0, ip
 800be14:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t3) {
 800be16:	4298      	cmp	r0, r3
 800be18:	d100      	bne.n	800be1c <CheckAttachedButtons+0x1a4>
 800be1a:	e169      	b.n	800c0f0 <CheckAttachedButtons+0x478>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	4299      	cmp	r1, r3
 800be20:	d822      	bhi.n	800be68 <CheckAttachedButtons+0x1f0>
 800be22:	4643      	mov	r3, r8
 800be24:	9804      	ldr	r0, [sp, #16]
 800be26:	3340      	adds	r3, #64	; 0x40
 800be28:	8840      	ldrh	r0, [r0, #2]
 800be2a:	589b      	ldr	r3, [r3, r2]
 800be2c:	9007      	str	r0, [sp, #28]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800be2e:	9803      	ldr	r0, [sp, #12]
 800be30:	4281      	cmp	r1, r0
 800be32:	d100      	bne.n	800be36 <CheckAttachedButtons+0x1be>
 800be34:	e0c4      	b.n	800bfc0 <CheckAttachedButtons+0x348>
 800be36:	4640      	mov	r0, r8
 800be38:	305c      	adds	r0, #92	; 0x5c
 800be3a:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800be3c:	4299      	cmp	r1, r3
 800be3e:	d203      	bcs.n	800be48 <CheckAttachedButtons+0x1d0>
					pressCounter[i] = 0;
 800be40:	4643      	mov	r3, r8
 800be42:	2100      	movs	r1, #0
 800be44:	3340      	adds	r3, #64	; 0x40
 800be46:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800be48:	9b07      	ldr	r3, [sp, #28]
 800be4a:	4283      	cmp	r3, r0
 800be4c:	d240      	bcs.n	800bed0 <CheckAttachedButtons+0x258>
						&& releaseCounter[i] < 500) {
 800be4e:	23f4      	movs	r3, #244	; 0xf4
 800be50:	33ff      	adds	r3, #255	; 0xff
 800be52:	4298      	cmp	r0, r3
 800be54:	d83c      	bhi.n	800bed0 <CheckAttachedButtons+0x258>
					if (clicked == 1) {
 800be56:	222f      	movs	r2, #47	; 0x2f
 800be58:	464b      	mov	r3, r9
 800be5a:	5c9b      	ldrb	r3, [r3, r2]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d100      	bne.n	800be62 <CheckAttachedButtons+0x1ea>
 800be60:	e15e      	b.n	800c120 <CheckAttachedButtons+0x4a8>
					} else if (clicked == 3) {
 800be62:	2b03      	cmp	r3, #3
 800be64:	d100      	bne.n	800be68 <CheckAttachedButtons+0x1f0>
 800be66:	e115      	b.n	800c094 <CheckAttachedButtons+0x41c>
			switch (button[i].state) {
 800be68:	7823      	ldrb	r3, [r4, #0]
 800be6a:	3b05      	subs	r3, #5
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b09      	cmp	r3, #9
 800be70:	d808      	bhi.n	800be84 <CheckAttachedButtons+0x20c>
 800be72:	4a4b      	ldr	r2, [pc, #300]	; (800bfa0 <CheckAttachedButtons+0x328>)
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	58d3      	ldr	r3, [r2, r3]
 800be78:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800be7a:	4650      	mov	r0, sl
 800be7c:	f7ff f9ba 	bl	800b1f4 <buttonPressedCallback>
				button[i].state = NONE;
 800be80:	2300      	movs	r3, #0
 800be82:	7023      	strb	r3, [r4, #0]
 800be84:	3501      	adds	r5, #1
 800be86:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800be88:	2d07      	cmp	r5, #7
 800be8a:	d000      	beq.n	800be8e <CheckAttachedButtons+0x216>
 800be8c:	e707      	b.n	800bc9e <CheckAttachedButtons+0x26>
}
 800be8e:	b00d      	add	sp, #52	; 0x34
 800be90:	bc3c      	pop	{r2, r3, r4, r5}
 800be92:	4690      	mov	r8, r2
 800be94:	4699      	mov	r9, r3
 800be96:	46a2      	mov	sl, r4
 800be98:	46ab      	mov	fp, r5
 800be9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d156      	bne.n	800bf4e <CheckAttachedButtons+0x2d6>
 800bea0:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	00aa      	lsls	r2, r5, #2
 800bea6:	3140      	adds	r1, #64	; 0x40
 800bea8:	588b      	ldr	r3, [r1, r2]
 800beaa:	2801      	cmp	r0, #1
 800beac:	d100      	bne.n	800beb0 <CheckAttachedButtons+0x238>
 800beae:	e161      	b.n	800c174 <CheckAttachedButtons+0x4fc>
				else if (connected == GPIO_PIN_RESET)
 800beb0:	9905      	ldr	r1, [sp, #20]
 800beb2:	2900      	cmp	r1, #0
 800beb4:	d000      	beq.n	800beb8 <CheckAttachedButtons+0x240>
 800beb6:	e735      	b.n	800bd24 <CheckAttachedButtons+0xac>
				if (releaseCounter[i] < 0xFFFF)
 800beb8:	4640      	mov	r0, r8
 800beba:	2103      	movs	r1, #3
 800bebc:	305c      	adds	r0, #92	; 0x5c
 800bebe:	9106      	str	r1, [sp, #24]
 800bec0:	4e33      	ldr	r6, [pc, #204]	; (800bf90 <CheckAttachedButtons+0x318>)
 800bec2:	5881      	ldr	r1, [r0, r2]
 800bec4:	42b1      	cmp	r1, r6
 800bec6:	d800      	bhi.n	800beca <CheckAttachedButtons+0x252>
 800bec8:	e742      	b.n	800bd50 <CheckAttachedButtons+0xd8>
					releaseCounter[i] = 0;		// Reset debounce counter
 800beca:	2100      	movs	r1, #0
 800becc:	5081      	str	r1, [r0, r2]
 800bece:	e741      	b.n	800bd54 <CheckAttachedButtons+0xdc>
				} else if (releaseCounter[i] >= 500
 800bed0:	0003      	movs	r3, r0
 800bed2:	4a32      	ldr	r2, [pc, #200]	; (800bf9c <CheckAttachedButtons+0x324>)
 800bed4:	3bf5      	subs	r3, #245	; 0xf5
 800bed6:	3bff      	subs	r3, #255	; 0xff
 800bed8:	4293      	cmp	r3, r2
 800beda:	d8c5      	bhi.n	800be68 <CheckAttachedButtons+0x1f0>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800bedc:	7961      	ldrb	r1, [r4, #5]
	t1 *= 1000;
 800bede:	014b      	lsls	r3, r1, #5
 800bee0:	1a5b      	subs	r3, r3, r1
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	185b      	adds	r3, r3, r1
 800bee6:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800bee8:	4283      	cmp	r3, r0
 800beea:	d100      	bne.n	800beee <CheckAttachedButtons+0x276>
 800beec:	e12e      	b.n	800c14c <CheckAttachedButtons+0x4d4>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800beee:	79a1      	ldrb	r1, [r4, #6]
	t2 *= 1000;
 800bef0:	014b      	lsls	r3, r1, #5
 800bef2:	1a5b      	subs	r3, r3, r1
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	185b      	adds	r3, r3, r1
 800bef8:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800befa:	4283      	cmp	r3, r0
 800befc:	d007      	beq.n	800bf0e <CheckAttachedButtons+0x296>
			t3 = button[port].releasedY3Sec;
 800befe:	79e1      	ldrb	r1, [r4, #7]
	t3 *= 1000;
 800bf00:	014b      	lsls	r3, r1, #5
 800bf02:	1a5b      	subs	r3, r3, r1
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	185b      	adds	r3, r3, r1
 800bf08:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800bf0a:	4283      	cmp	r3, r0
 800bf0c:	d1ac      	bne.n	800be68 <CheckAttachedButtons+0x1f0>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800bf0e:	230d      	movs	r3, #13
 800bf10:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 800bf12:	2324      	movs	r3, #36	; 0x24
 800bf14:	464a      	mov	r2, r9
 800bf16:	5cd2      	ldrb	r2, [r2, r3]
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	d1b3      	bne.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800bf1c:	7a22      	ldrb	r2, [r4, #8]
 800bf1e:	0652      	lsls	r2, r2, #25
 800bf20:	d5b0      	bpl.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800bf22:	4649      	mov	r1, r9
 800bf24:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800bf26:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf28:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800bf2a:	2102      	movs	r1, #2
 800bf2c:	f7ff fea2 	bl	800bc74 <buttonReleasedForYCallback>
 800bf30:	e7a8      	b.n	800be84 <CheckAttachedButtons+0x20c>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800bf32:	8831      	ldrh	r1, [r6, #0]
 800bf34:	2201      	movs	r2, #1
 800bf36:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf38:	f004 fb74 	bl	8010624 <HAL_GPIO_WritePin>
				Delay_us(10);
 800bf3c:	200a      	movs	r0, #10
 800bf3e:	f000 fd07 	bl	800c950 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800bf42:	8839      	ldrh	r1, [r7, #0]
 800bf44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bf46:	f004 fb67 	bl	8010618 <HAL_GPIO_ReadPin>
 800bf4a:	9005      	str	r0, [sp, #20]
 800bf4c:	e6ce      	b.n	800bcec <CheckAttachedButtons+0x74>
 800bf4e:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800bf50:	9906      	ldr	r1, [sp, #24]
 800bf52:	3340      	adds	r3, #64	; 0x40
 800bf54:	00aa      	lsls	r2, r5, #2
 800bf56:	589b      	ldr	r3, [r3, r2]
 800bf58:	2904      	cmp	r1, #4
 800bf5a:	d000      	beq.n	800bf5e <CheckAttachedButtons+0x2e6>
 800bf5c:	e6e6      	b.n	800bd2c <CheckAttachedButtons+0xb4>
				if (pressCounter[i] < 0xFFFF)
 800bf5e:	490c      	ldr	r1, [pc, #48]	; (800bf90 <CheckAttachedButtons+0x318>)
 800bf60:	428b      	cmp	r3, r1
 800bf62:	d84f      	bhi.n	800c004 <CheckAttachedButtons+0x38c>
					++pressCounter[i];			// Advance the debounce counter
 800bf64:	4641      	mov	r1, r8
 800bf66:	3301      	adds	r3, #1
 800bf68:	3140      	adds	r1, #64	; 0x40
 800bf6a:	508b      	str	r3, [r1, r2]
 800bf6c:	4907      	ldr	r1, [pc, #28]	; (800bf8c <CheckAttachedButtons+0x314>)
 800bf6e:	9104      	str	r1, [sp, #16]
 800bf70:	e6fe      	b.n	800bd70 <CheckAttachedButtons+0xf8>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800bf72:	42b1      	cmp	r1, r6
 800bf74:	d94e      	bls.n	800c014 <CheckAttachedButtons+0x39c>
					clicked = 0;
 800bf76:	2100      	movs	r1, #0
 800bf78:	4648      	mov	r0, r9
 800bf7a:	262f      	movs	r6, #47	; 0x2f
 800bf7c:	5581      	strb	r1, [r0, r6]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800bf7e:	4805      	ldr	r0, [pc, #20]	; (800bf94 <CheckAttachedButtons+0x31c>)
 800bf80:	5429      	strb	r1, [r5, r0]
 800bf82:	e6f5      	b.n	800bd70 <CheckAttachedButtons+0xf8>
 800bf84:	200027c8 	.word	0x200027c8
 800bf88:	20002848 	.word	0x20002848
 800bf8c:	20006c80 	.word	0x20006c80
 800bf90:	0000fffe 	.word	0x0000fffe
 800bf94:	20002870 	.word	0x20002870
 800bf98:	fffffe0c 	.word	0xfffffe0c
 800bf9c:	0000fe0a 	.word	0x0000fe0a
 800bfa0:	080172e8 	.word	0x080172e8
 800bfa4:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bfa6:	9805      	ldr	r0, [sp, #20]
 800bfa8:	00aa      	lsls	r2, r5, #2
 800bfaa:	3140      	adds	r1, #64	; 0x40
 800bfac:	588b      	ldr	r3, [r1, r2]
 800bfae:	2801      	cmp	r0, #1
 800bfb0:	d063      	beq.n	800c07a <CheckAttachedButtons+0x402>
				else if (connected == GPIO_PIN_RESET)
 800bfb2:	9905      	ldr	r1, [sp, #20]
 800bfb4:	2900      	cmp	r1, #0
 800bfb6:	d000      	beq.n	800bfba <CheckAttachedButtons+0x342>
 800bfb8:	e6b4      	b.n	800bd24 <CheckAttachedButtons+0xac>
					state = OFF;
 800bfba:	2101      	movs	r1, #1
 800bfbc:	9106      	str	r1, [sp, #24]
 800bfbe:	e6c0      	b.n	800bd42 <CheckAttachedButtons+0xca>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800bfc0:	2008      	movs	r0, #8
					++releaseCounter[i];
 800bfc2:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800bfc4:	7020      	strb	r0, [r4, #0]
					++releaseCounter[i];
 800bfc6:	365c      	adds	r6, #92	; 0x5c
 800bfc8:	1c48      	adds	r0, r1, #1
 800bfca:	50b0      	str	r0, [r6, r2]
 800bfcc:	e736      	b.n	800be3c <CheckAttachedButtons+0x1c4>
					if (clicked == 0)
 800bfce:	232f      	movs	r3, #47	; 0x2f
 800bfd0:	4648      	mov	r0, r9
 800bfd2:	5cc7      	ldrb	r7, [r0, r3]
 800bfd4:	2f00      	cmp	r7, #0
 800bfd6:	d100      	bne.n	800bfda <CheckAttachedButtons+0x362>
 800bfd8:	e0e3      	b.n	800c1a2 <CheckAttachedButtons+0x52a>
					else if (clicked == 2) {
 800bfda:	2f02      	cmp	r7, #2
 800bfdc:	d000      	beq.n	800bfe0 <CheckAttachedButtons+0x368>
 800bfde:	e71d      	b.n	800be1c <CheckAttachedButtons+0x1a4>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800bfe0:	4875      	ldr	r0, [pc, #468]	; (800c1b8 <CheckAttachedButtons+0x540>)
 800bfe2:	9e04      	ldr	r6, [sp, #16]
 800bfe4:	5c2f      	ldrb	r7, [r5, r0]
 800bfe6:	7930      	ldrb	r0, [r6, #4]
 800bfe8:	42b8      	cmp	r0, r7
 800bfea:	d300      	bcc.n	800bfee <CheckAttachedButtons+0x376>
 800bfec:	e716      	b.n	800be1c <CheckAttachedButtons+0x1a4>
								&& dblCounter[i]
 800bfee:	7970      	ldrb	r0, [r6, #5]
 800bff0:	42b8      	cmp	r0, r7
 800bff2:	d800      	bhi.n	800bff6 <CheckAttachedButtons+0x37e>
 800bff4:	e712      	b.n	800be1c <CheckAttachedButtons+0x1a4>
							clicked = 3;	// Record a possible double click
 800bff6:	4648      	mov	r0, r9
 800bff8:	2703      	movs	r7, #3
 800bffa:	54c7      	strb	r7, [r0, r3]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800bffc:	2300      	movs	r3, #0
 800bffe:	486e      	ldr	r0, [pc, #440]	; (800c1b8 <CheckAttachedButtons+0x540>)
 800c000:	542b      	strb	r3, [r5, r0]
 800c002:	e70b      	b.n	800be1c <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 800c004:	4643      	mov	r3, r8
 800c006:	2100      	movs	r1, #0
 800c008:	3340      	adds	r3, #64	; 0x40
 800c00a:	5099      	str	r1, [r3, r2]
 800c00c:	496b      	ldr	r1, [pc, #428]	; (800c1bc <CheckAttachedButtons+0x544>)
 800c00e:	2300      	movs	r3, #0
 800c010:	9104      	str	r1, [sp, #16]
 800c012:	e6ad      	b.n	800bd70 <CheckAttachedButtons+0xf8>
					++dblCounter[i];
 800c014:	4868      	ldr	r0, [pc, #416]	; (800c1b8 <CheckAttachedButtons+0x540>)
 800c016:	3101      	adds	r1, #1
 800c018:	5429      	strb	r1, [r5, r0]
 800c01a:	e6a9      	b.n	800bd70 <CheckAttachedButtons+0xf8>
				if (!delayButtonStateReset
 800c01c:	2324      	movs	r3, #36	; 0x24
 800c01e:	464a      	mov	r2, r9
 800c020:	5cd2      	ldrb	r2, [r2, r3]
 800c022:	2a00      	cmp	r2, #0
 800c024:	d000      	beq.n	800c028 <CheckAttachedButtons+0x3b0>
 800c026:	e72d      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800c028:	7a22      	ldrb	r2, [r4, #8]
 800c02a:	2a7f      	cmp	r2, #127	; 0x7f
 800c02c:	d800      	bhi.n	800c030 <CheckAttachedButtons+0x3b8>
 800c02e:	e729      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c030:	4649      	mov	r1, r9
 800c032:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800c034:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c036:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800c038:	2103      	movs	r1, #3
 800c03a:	f7ff fe1b 	bl	800bc74 <buttonReleasedForYCallback>
 800c03e:	e721      	b.n	800be84 <CheckAttachedButtons+0x20c>
				if (!delayButtonStateReset
 800c040:	2324      	movs	r3, #36	; 0x24
 800c042:	464a      	mov	r2, r9
 800c044:	5cd2      	ldrb	r2, [r2, r3]
 800c046:	2a00      	cmp	r2, #0
 800c048:	d000      	beq.n	800c04c <CheckAttachedButtons+0x3d4>
 800c04a:	e71b      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800c04c:	7a22      	ldrb	r2, [r4, #8]
 800c04e:	06d2      	lsls	r2, r2, #27
 800c050:	d400      	bmi.n	800c054 <CheckAttachedButtons+0x3dc>
 800c052:	e717      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c054:	4649      	mov	r1, r9
 800c056:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800c058:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c05a:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800c05c:	2103      	movs	r1, #3
 800c05e:	f7ff fe07 	bl	800bc70 <buttonPressedForXCallback>
 800c062:	e70f      	b.n	800be84 <CheckAttachedButtons+0x20c>
				buttonReleasedCallback(i);
 800c064:	4650      	mov	r0, sl
 800c066:	f7ff fdfd 	bl	800bc64 <buttonReleasedCallback>
				button[i].state = NONE;
 800c06a:	2300      	movs	r3, #0
 800c06c:	3501      	adds	r5, #1
 800c06e:	7023      	strb	r3, [r4, #0]
 800c070:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c072:	2d07      	cmp	r5, #7
 800c074:	d000      	beq.n	800c078 <CheckAttachedButtons+0x400>
 800c076:	e612      	b.n	800bc9e <CheckAttachedButtons+0x26>
 800c078:	e709      	b.n	800be8e <CheckAttachedButtons+0x216>
				if (pressCounter[i] < 0xFFFF)
 800c07a:	4851      	ldr	r0, [pc, #324]	; (800c1c0 <CheckAttachedButtons+0x548>)
 800c07c:	4283      	cmp	r3, r0
 800c07e:	d900      	bls.n	800c082 <CheckAttachedButtons+0x40a>
 800c080:	e092      	b.n	800c1a8 <CheckAttachedButtons+0x530>
					state = ON;
 800c082:	2102      	movs	r1, #2
 800c084:	9106      	str	r1, [sp, #24]
					++pressCounter[i];			// Advance the debounce counter
 800c086:	4641      	mov	r1, r8
 800c088:	3301      	adds	r3, #1
 800c08a:	3140      	adds	r1, #64	; 0x40
 800c08c:	508b      	str	r3, [r1, r2]
 800c08e:	494b      	ldr	r1, [pc, #300]	; (800c1bc <CheckAttachedButtons+0x544>)
 800c090:	9104      	str	r1, [sp, #16]
 800c092:	e66d      	b.n	800bd70 <CheckAttachedButtons+0xf8>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800c094:	3303      	adds	r3, #3
 800c096:	7023      	strb	r3, [r4, #0]
						clicked = 0;			// Prepare for a single click
 800c098:	4649      	mov	r1, r9
 800c09a:	2300      	movs	r3, #0
 800c09c:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800c09e:	2324      	movs	r3, #36	; 0x24
 800c0a0:	464a      	mov	r2, r9
 800c0a2:	5cd2      	ldrb	r2, [r2, r3]
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	d000      	beq.n	800c0aa <CheckAttachedButtons+0x432>
 800c0a8:	e6ec      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800c0aa:	7a22      	ldrb	r2, [r4, #8]
 800c0ac:	0792      	lsls	r2, r2, #30
 800c0ae:	d400      	bmi.n	800c0b2 <CheckAttachedButtons+0x43a>
 800c0b0:	e6e8      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	4649      	mov	r1, r9
					buttonDblClickedCallback(i);
 800c0b6:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c0b8:	54ca      	strb	r2, [r1, r3]
					buttonDblClickedCallback(i);
 800c0ba:	f7ff fdd7 	bl	800bc6c <buttonDblClickedCallback>
 800c0be:	e6e1      	b.n	800be84 <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c0c0:	2009      	movs	r0, #9
 800c0c2:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c0c4:	9803      	ldr	r0, [sp, #12]
 800c0c6:	4281      	cmp	r1, r0
 800c0c8:	d800      	bhi.n	800c0cc <CheckAttachedButtons+0x454>
 800c0ca:	e6b0      	b.n	800be2e <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 800c0cc:	2324      	movs	r3, #36	; 0x24
 800c0ce:	464a      	mov	r2, r9
 800c0d0:	5cd2      	ldrb	r2, [r2, r3]
 800c0d2:	2a00      	cmp	r2, #0
 800c0d4:	d000      	beq.n	800c0d8 <CheckAttachedButtons+0x460>
 800c0d6:	e6d5      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800c0d8:	7a22      	ldrb	r2, [r4, #8]
 800c0da:	0752      	lsls	r2, r2, #29
 800c0dc:	d400      	bmi.n	800c0e0 <CheckAttachedButtons+0x468>
 800c0de:	e6d1      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c0e4:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c0e6:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	f7ff fdc1 	bl	800bc70 <buttonPressedForXCallback>
 800c0ee:	e6c9      	b.n	800be84 <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c0f0:	200a      	movs	r0, #10
 800c0f2:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c0f4:	9803      	ldr	r0, [sp, #12]
 800c0f6:	4281      	cmp	r1, r0
 800c0f8:	d800      	bhi.n	800c0fc <CheckAttachedButtons+0x484>
 800c0fa:	e698      	b.n	800be2e <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 800c0fc:	2324      	movs	r3, #36	; 0x24
 800c0fe:	464a      	mov	r2, r9
 800c100:	5cd2      	ldrb	r2, [r2, r3]
 800c102:	2a00      	cmp	r2, #0
 800c104:	d000      	beq.n	800c108 <CheckAttachedButtons+0x490>
 800c106:	e6bd      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800c108:	7a22      	ldrb	r2, [r4, #8]
 800c10a:	0712      	lsls	r2, r2, #28
 800c10c:	d400      	bmi.n	800c110 <CheckAttachedButtons+0x498>
 800c10e:	e6b9      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c110:	4649      	mov	r1, r9
 800c112:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c114:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c116:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c118:	2102      	movs	r1, #2
 800c11a:	f7ff fda9 	bl	800bc70 <buttonPressedForXCallback>
 800c11e:	e6b1      	b.n	800be84 <CheckAttachedButtons+0x20c>
						clicked = 2;			// Prepare for a double click
 800c120:	4649      	mov	r1, r9
						button[i].state = CLICKED;// Record a single button click event
 800c122:	3304      	adds	r3, #4
 800c124:	7023      	strb	r3, [r4, #0]
						clicked = 2;			// Prepare for a double click
 800c126:	3b03      	subs	r3, #3
 800c128:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800c12a:	2324      	movs	r3, #36	; 0x24
 800c12c:	464a      	mov	r2, r9
 800c12e:	5cd2      	ldrb	r2, [r2, r3]
 800c130:	2a00      	cmp	r2, #0
 800c132:	d000      	beq.n	800c136 <CheckAttachedButtons+0x4be>
 800c134:	e6a6      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800c136:	7a21      	ldrb	r1, [r4, #8]
 800c138:	3201      	adds	r2, #1
 800c13a:	420a      	tst	r2, r1
 800c13c:	d100      	bne.n	800c140 <CheckAttachedButtons+0x4c8>
 800c13e:	e6a1      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c140:	4649      	mov	r1, r9
					buttonClickedCallback(i);
 800c142:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c144:	54ca      	strb	r2, [r1, r3]
					buttonClickedCallback(i);
 800c146:	f7ff fd8f 	bl	800bc68 <buttonClickedCallback>
 800c14a:	e69b      	b.n	800be84 <CheckAttachedButtons+0x20c>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c14c:	230c      	movs	r3, #12
 800c14e:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 800c150:	2324      	movs	r3, #36	; 0x24
 800c152:	464a      	mov	r2, r9
 800c154:	5cd2      	ldrb	r2, [r2, r3]
 800c156:	2a00      	cmp	r2, #0
 800c158:	d000      	beq.n	800c15c <CheckAttachedButtons+0x4e4>
 800c15a:	e693      	b.n	800be84 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800c15c:	7a22      	ldrb	r2, [r4, #8]
 800c15e:	0692      	lsls	r2, r2, #26
 800c160:	d400      	bmi.n	800c164 <CheckAttachedButtons+0x4ec>
 800c162:	e68f      	b.n	800be84 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c164:	4649      	mov	r1, r9
 800c166:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c168:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c16a:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c16c:	2101      	movs	r1, #1
 800c16e:	f7ff fd81 	bl	800bc74 <buttonReleasedForYCallback>
 800c172:	e687      	b.n	800be84 <CheckAttachedButtons+0x20c>
				if (pressCounter[i] < 0xFFFF)
 800c174:	4812      	ldr	r0, [pc, #72]	; (800c1c0 <CheckAttachedButtons+0x548>)
 800c176:	4283      	cmp	r3, r0
 800c178:	d806      	bhi.n	800c188 <CheckAttachedButtons+0x510>
					++pressCounter[i];			// Advance the debounce counter
 800c17a:	3301      	adds	r3, #1
					pressCounter[i] = 0;			// Reset debounce counter
 800c17c:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800c17e:	2104      	movs	r1, #4
 800c180:	9106      	str	r1, [sp, #24]
 800c182:	490e      	ldr	r1, [pc, #56]	; (800c1bc <CheckAttachedButtons+0x544>)
 800c184:	9104      	str	r1, [sp, #16]
 800c186:	e5f3      	b.n	800bd70 <CheckAttachedButtons+0xf8>
					pressCounter[i] = 0;			// Reset debounce counter
 800c188:	2300      	movs	r3, #0
 800c18a:	e7f7      	b.n	800c17c <CheckAttachedButtons+0x504>
				if (pressCounter[i] < 0xFFFF)
 800c18c:	480c      	ldr	r0, [pc, #48]	; (800c1c0 <CheckAttachedButtons+0x548>)
 800c18e:	4283      	cmp	r3, r0
 800c190:	d800      	bhi.n	800c194 <CheckAttachedButtons+0x51c>
 800c192:	e776      	b.n	800c082 <CheckAttachedButtons+0x40a>
					pressCounter[i] = 0;			// Reset debounce counter
 800c194:	508e      	str	r6, [r1, r2]
					state = ON;
 800c196:	2102      	movs	r1, #2
 800c198:	9106      	str	r1, [sp, #24]
 800c19a:	4908      	ldr	r1, [pc, #32]	; (800c1bc <CheckAttachedButtons+0x544>)
					pressCounter[i] = 0;			// Reset debounce counter
 800c19c:	2300      	movs	r3, #0
 800c19e:	9104      	str	r1, [sp, #16]
 800c1a0:	e5e6      	b.n	800bd70 <CheckAttachedButtons+0xf8>
						clicked = 1;		// Record a possible single click
 800c1a2:	3701      	adds	r7, #1
 800c1a4:	54c7      	strb	r7, [r0, r3]
 800c1a6:	e639      	b.n	800be1c <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	508b      	str	r3, [r1, r2]
 800c1ac:	2102      	movs	r1, #2
 800c1ae:	9106      	str	r1, [sp, #24]
 800c1b0:	4902      	ldr	r1, [pc, #8]	; (800c1bc <CheckAttachedButtons+0x544>)
 800c1b2:	9104      	str	r1, [sp, #16]
 800c1b4:	e5dc      	b.n	800bd70 <CheckAttachedButtons+0xf8>
 800c1b6:	46c0      	nop			; (mov r8, r8)
 800c1b8:	20002870 	.word	0x20002870
 800c1bc:	20006c80 	.word	0x20006c80
 800c1c0:	0000fffe 	.word	0x0000fffe

0800c1c4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <NVIC_SystemReset+0x14>)
 800c1ca:	4a04      	ldr	r2, [pc, #16]	; (800c1dc <NVIC_SystemReset+0x18>)
 800c1cc:	60da      	str	r2, [r3, #12]
 800c1ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	e7fd      	b.n	800c1d2 <NVIC_SystemReset+0xe>
 800c1d6:	46c0      	nop			; (mov r8, r8)
 800c1d8:	e000ed00 	.word	0xe000ed00
 800c1dc:	05fa0004 	.word	0x05fa0004

0800c1e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c1e0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800c1e2:	f002 fdc5 	bl	800ed70 <HAL_IncTick>
  osSystickHandler();  
 800c1e6:	f000 ffa5 	bl	800d134 <osSystickHandler>

}
 800c1ea:	bd10      	pop	{r4, pc}

0800c1ec <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800c1ec:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c1ee:	24ff      	movs	r4, #255	; 0xff
 800c1f0:	4d09      	ldr	r5, [pc, #36]	; (800c218 <HardFault_Handler+0x2c>)
{
 800c1f2:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c1f4:	7828      	ldrb	r0, [r5, #0]
 800c1f6:	23ff      	movs	r3, #255	; 0xff
 800c1f8:	2211      	movs	r2, #17
 800c1fa:	4908      	ldr	r1, [pc, #32]	; (800c21c <HardFault_Handler+0x30>)
 800c1fc:	9400      	str	r4, [sp, #0]
 800c1fe:	f000 fd95 	bl	800cd2c <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <HardFault_Handler+0x34>)
 800c204:	7828      	ldrb	r0, [r5, #0]
 800c206:	6819      	ldr	r1, [r3, #0]
 800c208:	220f      	movs	r2, #15
 800c20a:	23ff      	movs	r3, #255	; 0xff
 800c20c:	9400      	str	r4, [sp, #0]
 800c20e:	f000 fd8d 	bl	800cd2c <writePxMutex>
	NVIC_SystemReset();
 800c212:	f7ff ffd7 	bl	800c1c4 <NVIC_SystemReset>
 800c216:	46c0      	nop			; (mov r8, r8)
 800c218:	20000c28 	.word	0x20000c28
 800c21c:	08019a1c 	.word	0x08019a1c
 800c220:	200000a0 	.word	0x200000a0

0800c224 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800c224:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800c226:	4802      	ldr	r0, [pc, #8]	; (800c230 <USART1_IRQHandler+0xc>)
 800c228:	f005 fe58 	bl	8011edc <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */	
	
}
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	46c0      	nop			; (mov r8, r8)
 800c230:	20006e88 	.word	0x20006e88

0800c234 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800c234:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800c236:	4802      	ldr	r0, [pc, #8]	; (800c240 <USART2_IRQHandler+0xc>)
 800c238:	f005 fe50 	bl	8011edc <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c23c:	bd10      	pop	{r4, pc}
 800c23e:	46c0      	nop			; (mov r8, r8)
 800c240:	20006fe8 	.word	0x20006fe8

0800c244 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800c244:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800c246:	4806      	ldr	r0, [pc, #24]	; (800c260 <USART3_8_IRQHandler+0x1c>)
 800c248:	f005 fe48 	bl	8011edc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800c24c:	4805      	ldr	r0, [pc, #20]	; (800c264 <USART3_8_IRQHandler+0x20>)
 800c24e:	f005 fe45 	bl	8011edc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800c252:	4805      	ldr	r0, [pc, #20]	; (800c268 <USART3_8_IRQHandler+0x24>)
 800c254:	f005 fe42 	bl	8011edc <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800c258:	4804      	ldr	r0, [pc, #16]	; (800c26c <USART3_8_IRQHandler+0x28>)
 800c25a:	f005 fe3f 	bl	8011edc <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c25e:	bd10      	pop	{r4, pc}
 800c260:	20006da4 	.word	0x20006da4
 800c264:	20006f74 	.word	0x20006f74
 800c268:	20006e18 	.word	0x20006e18
 800c26c:	20006f04 	.word	0x20006f04

0800c270 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800c270:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800c272:	2001      	movs	r0, #1
 800c274:	f7fb f864 	bl	8007340 <DMA_IRQHandler>
	
}
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	46c0      	nop			; (mov r8, r8)

0800c27c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c27c:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800c27e:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	2310      	movs	r3, #16
 800c284:	4213      	tst	r3, r2
 800c286:	d10e      	bne.n	800c2a6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800c288:	4a0a      	ldr	r2, [pc, #40]	; (800c2b4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c28a:	6811      	ldr	r1, [r2, #0]
 800c28c:	05c9      	lsls	r1, r1, #23
 800c28e:	d406      	bmi.n	800c29e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	4213      	tst	r3, r2
 800c294:	d002      	beq.n	800c29c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800c296:	4808      	ldr	r0, [pc, #32]	; (800c2b8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800c298:	f003 fa42 	bl	800f720 <HAL_DMA_IRQHandler>
	}
}
 800c29c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800c29e:	2002      	movs	r0, #2
 800c2a0:	f7fb f84e 	bl	8007340 <DMA_IRQHandler>
 800c2a4:	e7fa      	b.n	800c29c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800c2a6:	2005      	movs	r0, #5
 800c2a8:	f7fb f84a 	bl	8007340 <DMA_IRQHandler>
 800c2ac:	e7f6      	b.n	800c29c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	40020400 	.word	0x40020400
 800c2b4:	40020000 	.word	0x40020000
 800c2b8:	200025cc 	.word	0x200025cc

0800c2bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c2bc:	4b12      	ldr	r3, [pc, #72]	; (800c308 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800c2be:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	03d2      	lsls	r2, r2, #15
 800c2c4:	d414      	bmi.n	800c2f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	02d2      	lsls	r2, r2, #11
 800c2ca:	d40d      	bmi.n	800c2e8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800c2cc:	4a0f      	ldr	r2, [pc, #60]	; (800c30c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800c2ce:	6812      	ldr	r2, [r2, #0]
 800c2d0:	05d2      	lsls	r2, r2, #23
 800c2d2:	d411      	bmi.n	800c2f8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	04d2      	lsls	r2, r2, #19
 800c2d8:	d412      	bmi.n	800c300 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	01db      	lsls	r3, r3, #7
 800c2de:	d506      	bpl.n	800c2ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800c2e0:	480b      	ldr	r0, [pc, #44]	; (800c310 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c2e2:	f003 fa1d 	bl	800f720 <HAL_DMA_IRQHandler>
	}
}
 800c2e6:	e002      	b.n	800c2ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800c2e8:	2004      	movs	r0, #4
 800c2ea:	f7fb f829 	bl	8007340 <DMA_IRQHandler>
}
 800c2ee:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800c2f0:	2003      	movs	r0, #3
 800c2f2:	f7fb f825 	bl	8007340 <DMA_IRQHandler>
 800c2f6:	e7fa      	b.n	800c2ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800c2f8:	2006      	movs	r0, #6
 800c2fa:	f7fb f821 	bl	8007340 <DMA_IRQHandler>
 800c2fe:	e7f6      	b.n	800c2ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800c300:	4804      	ldr	r0, [pc, #16]	; (800c314 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800c302:	f003 fa0d 	bl	800f720 <HAL_DMA_IRQHandler>
 800c306:	e7f2      	b.n	800c2ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800c308:	40020000 	.word	0x40020000
 800c30c:	40020400 	.word	0x40020400
 800c310:	2000263c 	.word	0x2000263c
 800c314:	20002604 	.word	0x20002604

0800c318 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 800c318:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
	HAL_TIM_IRQHandler(&htim16);
 800c31a:	4802      	ldr	r0, [pc, #8]	; (800c324 <TIM16_IRQHandler+0xc>)
 800c31c:	f005 f870 	bl	8011400 <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
	
}
 800c320:	bd10      	pop	{r4, pc}
 800c322:	46c0      	nop			; (mov r8, r8)
 800c324:	200070c8 	.word	0x200070c8

0800c328 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c328:	2300      	movs	r3, #0
{
 800c32a:	b510      	push	{r4, lr}
 800c32c:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c32e:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800c330:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800c332:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800c338:	f7fd ff12 	bl	800a160 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800c33c:	0020      	movs	r0, r4
 800c33e:	f7fd fcc1 	bl	8009cc4 <GetPort>
 800c342:	4b07      	ldr	r3, [pc, #28]	; (800c360 <HAL_UART_TxCpltCallback+0x38>)
 800c344:	0080      	lsls	r0, r0, #2
 800c346:	58c0      	ldr	r0, [r0, r3]
 800c348:	a901      	add	r1, sp, #4
 800c34a:	f001 fa2b 	bl	800d7a4 <xQueueGiveFromISR>
	

	
	RS485_RECEIVER_EN();                        // Enable receiver mode
 800c34e:	2180      	movs	r1, #128	; 0x80
 800c350:	2090      	movs	r0, #144	; 0x90
 800c352:	2200      	movs	r2, #0
 800c354:	0149      	lsls	r1, r1, #5
 800c356:	05c0      	lsls	r0, r0, #23
 800c358:	f004 f964 	bl	8010624 <HAL_GPIO_WritePin>

}
 800c35c:	b002      	add	sp, #8
 800c35e:	bd10      	pop	{r4, pc}
 800c360:	20006d04 	.word	0x20006d04

0800c364 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c364:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800c366:	2369      	movs	r3, #105	; 0x69
 800c368:	2501      	movs	r5, #1
 800c36a:	54c5      	strb	r5, [r0, r3]
{
 800c36c:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800c36e:	f7fd fca9 	bl	8009cc4 <GetPort>
	if (portStatus[port] == STREAM) {
 800c372:	4b0b      	ldr	r3, [pc, #44]	; (800c3a0 <HAL_UART_ErrorCallback+0x3c>)
 800c374:	5c1b      	ldrb	r3, [r3, r0]
 800c376:	2b02      	cmp	r3, #2
 800c378:	d004      	beq.n	800c384 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800c37a:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <HAL_UART_ErrorCallback+0x40>)
 800c37c:	1818      	adds	r0, r3, r0
 800c37e:	3801      	subs	r0, #1
 800c380:	7005      	strb	r5, [r0, #0]
	}	
}
 800c382:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800c384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c386:	3801      	subs	r0, #1
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	0080      	lsls	r0, r0, #2
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	4b06      	ldr	r3, [pc, #24]	; (800c3a8 <HAL_UART_ErrorCallback+0x44>)
 800c390:	b292      	uxth	r2, r2
 800c392:	58c3      	ldr	r3, [r0, r3]
 800c394:	0020      	movs	r0, r4
 800c396:	6819      	ldr	r1, [r3, #0]
 800c398:	3128      	adds	r1, #40	; 0x28
 800c39a:	f005 fa1f 	bl	80117dc <HAL_UART_Receive_DMA>
 800c39e:	e7f0      	b.n	800c382 <HAL_UART_ErrorCallback+0x1e>
 800c3a0:	20000c2c 	.word	0x20000c2c
 800c3a4:	200019f0 	.word	0x200019f0
 800c3a8:	200019a8 	.word	0x200019a8

0800c3ac <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800c3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ae:	46de      	mov	lr, fp
 800c3b0:	464e      	mov	r6, r9
 800c3b2:	4645      	mov	r5, r8
 800c3b4:	4657      	mov	r7, sl
 800c3b6:	b5e0      	push	{r5, r6, r7, lr}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800c3bc:	f7fd fc82 	bl	8009cc4 <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c3c0:	4e60      	ldr	r6, [pc, #384]	; (800c544 <HAL_UART_RxCpltCallback+0x198>)
	uint8_t port_index = port_number - 1;
 800c3c2:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	4a60      	ldr	r2, [pc, #384]	; (800c548 <HAL_UART_RxCpltCallback+0x19c>)
 800c3c8:	5cf5      	ldrb	r5, [r6, r3]
 800c3ca:	5c11      	ldrb	r1, [r2, r0]
 800c3cc:	2d0d      	cmp	r5, #13
 800c3ce:	d00a      	beq.n	800c3e6 <HAL_UART_RxCpltCallback+0x3a>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800c3d0:	2903      	cmp	r1, #3
 800c3d2:	d00c      	beq.n	800c3ee <HAL_UART_RxCpltCallback+0x42>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c3d4:	2d48      	cmp	r5, #72	; 0x48
 800c3d6:	d067      	beq.n	800c4a8 <HAL_UART_RxCpltCallback+0xfc>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800c3d8:	2d5a      	cmp	r5, #90	; 0x5a
 800c3da:	d11b      	bne.n	800c414 <HAL_UART_RxCpltCallback+0x68>
 800c3dc:	2907      	cmp	r1, #7
 800c3de:	d11b      	bne.n	800c418 <HAL_UART_RxCpltCallback+0x6c>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	5413      	strb	r3, [r2, r0]
 800c3e4:	e006      	b.n	800c3f4 <HAL_UART_RxCpltCallback+0x48>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c3e6:	2900      	cmp	r1, #0
 800c3e8:	d046      	beq.n	800c478 <HAL_UART_RxCpltCallback+0xcc>
	else if(portStatus[port_number] == CLI)
 800c3ea:	2903      	cmp	r1, #3
 800c3ec:	d112      	bne.n	800c414 <HAL_UART_RxCpltCallback+0x68>
		Read_In_CLI_Task_Flag = 1;
 800c3ee:	4b57      	ldr	r3, [pc, #348]	; (800c54c <HAL_UART_RxCpltCallback+0x1a0>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800c3f4:	0020      	movs	r0, r4
 800c3f6:	f7fd fc65 	bl	8009cc4 <GetPort>
 800c3fa:	1e41      	subs	r1, r0, #1
 800c3fc:	1871      	adds	r1, r6, r1
 800c3fe:	2201      	movs	r2, #1
 800c400:	0020      	movs	r0, r4
 800c402:	f005 f9eb 	bl	80117dc <HAL_UART_Receive_DMA>
}
 800c406:	b005      	add	sp, #20
 800c408:	bc3c      	pop	{r2, r3, r4, r5}
 800c40a:	4690      	mov	r8, r2
 800c40c:	4699      	mov	r9, r3
 800c40e:	46a2      	mov	sl, r4
 800c410:	46ab      	mov	fp, r5
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800c414:	2907      	cmp	r1, #7
 800c416:	d07c      	beq.n	800c512 <HAL_UART_RxCpltCallback+0x166>
	else if(portStatus[port_number] == Z_Status)
 800c418:	2908      	cmp	r1, #8
 800c41a:	d07d      	beq.n	800c518 <HAL_UART_RxCpltCallback+0x16c>
	else if(portStatus[port_number] == MSG)
 800c41c:	2901      	cmp	r1, #1
 800c41e:	d1e9      	bne.n	800c3f4 <HAL_UART_RxCpltCallback+0x48>
 800c420:	4f4b      	ldr	r7, [pc, #300]	; (800c550 <HAL_UART_RxCpltCallback+0x1a4>)
		if(temp_length[port_index] > 1)
 800c422:	494b      	ldr	r1, [pc, #300]	; (800c550 <HAL_UART_RxCpltCallback+0x1a4>)
 800c424:	5cff      	ldrb	r7, [r7, r3]
 800c426:	18c9      	adds	r1, r1, r3
 800c428:	46b9      	mov	r9, r7
 800c42a:	2701      	movs	r7, #1
 800c42c:	444f      	add	r7, r9
 800c42e:	b2ff      	uxtb	r7, r7
 800c430:	4688      	mov	r8, r1
 800c432:	7a09      	ldrb	r1, [r1, #8]
 800c434:	9701      	str	r7, [sp, #4]
 800c436:	2701      	movs	r7, #1
 800c438:	468c      	mov	ip, r1
 800c43a:	427f      	negs	r7, r7
 800c43c:	4467      	add	r7, ip
 800c43e:	b2ff      	uxtb	r7, r7
 800c440:	9702      	str	r7, [sp, #8]
 800c442:	4667      	mov	r7, ip
 800c444:	4943      	ldr	r1, [pc, #268]	; (800c554 <HAL_UART_RxCpltCallback+0x1a8>)
 800c446:	468a      	mov	sl, r1
 800c448:	5cc9      	ldrb	r1, [r1, r3]
 800c44a:	9100      	str	r1, [sp, #0]
 800c44c:	2f01      	cmp	r7, #1
 800c44e:	d930      	bls.n	800c4b2 <HAL_UART_RxCpltCallback+0x106>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c450:	00ca      	lsls	r2, r1, #3
 800c452:	1a52      	subs	r2, r2, r1
 800c454:	4694      	mov	ip, r2
 800c456:	0099      	lsls	r1, r3, #2
 800c458:	18c9      	adds	r1, r1, r3
 800c45a:	00ca      	lsls	r2, r1, #3
 800c45c:	1a51      	subs	r1, r2, r1
 800c45e:	4461      	add	r1, ip
 800c460:	4a3d      	ldr	r2, [pc, #244]	; (800c558 <HAL_UART_RxCpltCallback+0x1ac>)
 800c462:	00c9      	lsls	r1, r1, #3
 800c464:	1851      	adds	r1, r2, r1
 800c466:	464a      	mov	r2, r9
			temp_index[port_index]++;
 800c468:	9f01      	ldr	r7, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c46a:	548d      	strb	r5, [r1, r2]
			temp_index[port_index]++;
 800c46c:	4a38      	ldr	r2, [pc, #224]	; (800c550 <HAL_UART_RxCpltCallback+0x1a4>)
 800c46e:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800c470:	4643      	mov	r3, r8
 800c472:	9f02      	ldr	r7, [sp, #8]
 800c474:	721f      	strb	r7, [r3, #8]
 800c476:	e7bd      	b.n	800c3f4 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c478:	2303      	movs	r3, #3
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800c47a:	7011      	strb	r1, [r2, #0]
 800c47c:	7051      	strb	r1, [r2, #1]
 800c47e:	7091      	strb	r1, [r2, #2]
 800c480:	70d1      	strb	r1, [r2, #3]
 800c482:	7111      	strb	r1, [r2, #4]
 800c484:	7151      	strb	r1, [r2, #5]
 800c486:	7191      	strb	r1, [r2, #6]
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c488:	5413      	strb	r3, [r2, r0]
		PcPort = port_number;
 800c48a:	4b34      	ldr	r3, [pc, #208]	; (800c55c <HAL_UART_RxCpltCallback+0x1b0>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c48c:	2202      	movs	r2, #2
		PcPort = port_number;
 800c48e:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c490:	4b33      	ldr	r3, [pc, #204]	; (800c560 <HAL_UART_RxCpltCallback+0x1b4>)
 800c492:	6818      	ldr	r0, [r3, #0]
 800c494:	2300      	movs	r3, #0
 800c496:	f002 f8d5 	bl	800e644 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800c49a:	4b32      	ldr	r3, [pc, #200]	; (800c564 <HAL_UART_RxCpltCallback+0x1b8>)
 800c49c:	781a      	ldrb	r2, [r3, #0]
 800c49e:	2a01      	cmp	r2, #1
 800c4a0:	d1a6      	bne.n	800c3f0 <HAL_UART_RxCpltCallback+0x44>
 800c4a2:	492a      	ldr	r1, [pc, #168]	; (800c54c <HAL_UART_RxCpltCallback+0x1a0>)
 800c4a4:	700a      	strb	r2, [r1, #0]
 800c4a6:	e7a3      	b.n	800c3f0 <HAL_UART_RxCpltCallback+0x44>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	d1b3      	bne.n	800c414 <HAL_UART_RxCpltCallback+0x68>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800c4ac:	2307      	movs	r3, #7
 800c4ae:	5413      	strb	r3, [r2, r0]
 800c4b0:	e7a0      	b.n	800c3f4 <HAL_UART_RxCpltCallback+0x48>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c4b2:	9900      	ldr	r1, [sp, #0]
 800c4b4:	00cf      	lsls	r7, r1, #3
 800c4b6:	1a7f      	subs	r7, r7, r1
 800c4b8:	9703      	str	r7, [sp, #12]
 800c4ba:	009f      	lsls	r7, r3, #2
 800c4bc:	46bb      	mov	fp, r7
 800c4be:	449b      	add	fp, r3
 800c4c0:	465f      	mov	r7, fp
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	00ff      	lsls	r7, r7, #3
 800c4c6:	1a7f      	subs	r7, r7, r1
 800c4c8:	46bc      	mov	ip, r7
 800c4ca:	9f03      	ldr	r7, [sp, #12]
 800c4cc:	46bb      	mov	fp, r7
 800c4ce:	44dc      	add	ip, fp
 800c4d0:	4661      	mov	r1, ip
 800c4d2:	00c9      	lsls	r1, r1, #3
 800c4d4:	468c      	mov	ip, r1
 800c4d6:	4920      	ldr	r1, [pc, #128]	; (800c558 <HAL_UART_RxCpltCallback+0x1ac>)
 800c4d8:	464f      	mov	r7, r9
 800c4da:	468b      	mov	fp, r1
 800c4dc:	44dc      	add	ip, fp
 800c4de:	4661      	mov	r1, ip
 800c4e0:	55cd      	strb	r5, [r1, r7]
			temp_index[port_index]++;
 800c4e2:	9901      	ldr	r1, [sp, #4]
 800c4e4:	4d1a      	ldr	r5, [pc, #104]	; (800c550 <HAL_UART_RxCpltCallback+0x1a4>)
 800c4e6:	54e9      	strb	r1, [r5, r3]
			temp_length[port_index]--;
 800c4e8:	4641      	mov	r1, r8
 800c4ea:	9d02      	ldr	r5, [sp, #8]
 800c4ec:	720d      	strb	r5, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800c4ee:	9900      	ldr	r1, [sp, #0]
 800c4f0:	3101      	adds	r1, #1
 800c4f2:	b2c9      	uxtb	r1, r1
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800c4f4:	2905      	cmp	r1, #5
 800c4f6:	d100      	bne.n	800c4fa <HAL_UART_RxCpltCallback+0x14e>
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	4655      	mov	r5, sl
 800c4fc:	54e9      	strb	r1, [r5, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800c4fe:	491a      	ldr	r1, [pc, #104]	; (800c568 <HAL_UART_RxCpltCallback+0x1bc>)
 800c500:	4d1a      	ldr	r5, [pc, #104]	; (800c56c <HAL_UART_RxCpltCallback+0x1c0>)
 800c502:	780b      	ldrb	r3, [r1, #0]
 800c504:	54e8      	strb	r0, [r5, r3]
			Process_Message_Buffer_Index_End++;
 800c506:	3301      	adds	r3, #1
 800c508:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d100      	bne.n	800c510 <HAL_UART_RxCpltCallback+0x164>
 800c50e:	2300      	movs	r3, #0
 800c510:	700b      	strb	r3, [r1, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800c512:	2300      	movs	r3, #0
 800c514:	5413      	strb	r3, [r2, r0]
 800c516:	e76d      	b.n	800c3f4 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =MSG; // Receive length byte.
 800c518:	3907      	subs	r1, #7
 800c51a:	5411      	strb	r1, [r2, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c51c:	4a0d      	ldr	r2, [pc, #52]	; (800c554 <HAL_UART_RxCpltCallback+0x1a8>)
 800c51e:	5cd7      	ldrb	r7, [r2, r3]
 800c520:	00fa      	lsls	r2, r7, #3
 800c522:	1bd7      	subs	r7, r2, r7
 800c524:	009a      	lsls	r2, r3, #2
 800c526:	18d2      	adds	r2, r2, r3
 800c528:	00d1      	lsls	r1, r2, #3
 800c52a:	1a8a      	subs	r2, r1, r2
 800c52c:	19d2      	adds	r2, r2, r7
 800c52e:	490a      	ldr	r1, [pc, #40]	; (800c558 <HAL_UART_RxCpltCallback+0x1ac>)
 800c530:	00d2      	lsls	r2, r2, #3
 800c532:	188a      	adds	r2, r1, r2
		temp_index[port_index] = 3;
 800c534:	2103      	movs	r1, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c536:	7095      	strb	r5, [r2, #2]
		temp_index[port_index] = 3;
 800c538:	4a05      	ldr	r2, [pc, #20]	; (800c550 <HAL_UART_RxCpltCallback+0x1a4>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c53a:	3501      	adds	r5, #1
		temp_index[port_index] = 3;
 800c53c:	54d1      	strb	r1, [r2, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c53e:	18d3      	adds	r3, r2, r3
 800c540:	721d      	strb	r5, [r3, #8]
 800c542:	e757      	b.n	800c3f4 <HAL_UART_RxCpltCallback+0x48>
 800c544:	20001eb8 	.word	0x20001eb8
 800c548:	20000c2c 	.word	0x20000c2c
 800c54c:	2000182a 	.word	0x2000182a
 800c550:	2000287c 	.word	0x2000287c
 800c554:	2000181c 	.word	0x2000181c
 800c558:	2000118c 	.word	0x2000118c
 800c55c:	20000c28 	.word	0x20000c28
 800c560:	20001ecc 	.word	0x20001ecc
 800c564:	2000182b 	.word	0x2000182b
 800c568:	2000117f 	.word	0x2000117f
 800c56c:	20001184 	.word	0x20001184

0800c570 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c570:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c572:	24ff      	movs	r4, #255	; 0xff
 800c574:	4d09      	ldr	r5, [pc, #36]	; (800c59c <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c576:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c578:	7828      	ldrb	r0, [r5, #0]
 800c57a:	23ff      	movs	r3, #255	; 0xff
 800c57c:	2210      	movs	r2, #16
 800c57e:	4908      	ldr	r1, [pc, #32]	; (800c5a0 <vApplicationStackOverflowHook+0x30>)
 800c580:	9400      	str	r4, [sp, #0]
 800c582:	f000 fbd3 	bl	800cd2c <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c586:	4b07      	ldr	r3, [pc, #28]	; (800c5a4 <vApplicationStackOverflowHook+0x34>)
 800c588:	7828      	ldrb	r0, [r5, #0]
 800c58a:	6819      	ldr	r1, [r3, #0]
 800c58c:	220f      	movs	r2, #15
 800c58e:	23ff      	movs	r3, #255	; 0xff
 800c590:	9400      	str	r4, [sp, #0]
 800c592:	f000 fbcb 	bl	800cd2c <writePxMutex>
	NVIC_SystemReset();
 800c596:	f7ff fe15 	bl	800c1c4 <NVIC_SystemReset>
 800c59a:	46c0      	nop			; (mov r8, r8)
 800c59c:	20000c28 	.word	0x20000c28
 800c5a0:	08019a30 	.word	0x08019a30
 800c5a4:	200000a0 	.word	0x200000a0

0800c5a8 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800c5a8:	b530      	push	{r4, r5, lr}
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c5aa:	24ff      	movs	r4, #255	; 0xff
 800c5ac:	4d09      	ldr	r5, [pc, #36]	; (800c5d4 <vApplicationMallocFailedHook+0x2c>)
void vApplicationMallocFailedHook(void){
 800c5ae:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c5b0:	7828      	ldrb	r0, [r5, #0]
 800c5b2:	23ff      	movs	r3, #255	; 0xff
 800c5b4:	2214      	movs	r2, #20
 800c5b6:	4908      	ldr	r1, [pc, #32]	; (800c5d8 <vApplicationMallocFailedHook+0x30>)
 800c5b8:	9400      	str	r4, [sp, #0]
 800c5ba:	f000 fbb7 	bl	800cd2c <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c5be:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <vApplicationMallocFailedHook+0x34>)
 800c5c0:	7828      	ldrb	r0, [r5, #0]
 800c5c2:	6819      	ldr	r1, [r3, #0]
 800c5c4:	220f      	movs	r2, #15
 800c5c6:	23ff      	movs	r3, #255	; 0xff
 800c5c8:	9400      	str	r4, [sp, #0]
 800c5ca:	f000 fbaf 	bl	800cd2c <writePxMutex>
	NVIC_SystemReset();
 800c5ce:	f7ff fdf9 	bl	800c1c4 <NVIC_SystemReset>
 800c5d2:	46c0      	nop			; (mov r8, r8)
 800c5d4:	20000c28 	.word	0x20000c28
 800c5d8:	08019a44 	.word	0x08019a44
 800c5dc:	200000a0 	.word	0x200000a0

0800c5e0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5e2:	46de      	mov	lr, fp
 800c5e4:	464e      	mov	r6, r9
 800c5e6:	4645      	mov	r5, r8
 800c5e8:	4657      	mov	r7, sl
 800c5ea:	b5e0      	push	{r5, r6, r7, lr}
 800c5ec:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c5ee:	ae04      	add	r6, sp, #16
 800c5f0:	0032      	movs	r2, r6
 800c5f2:	4b34      	ldr	r3, [pc, #208]	; (800c6c4 <RTC_CalendarConfig+0xe4>)
 800c5f4:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c5f6:	c213      	stmia	r2!, {r0, r1, r4}
 800c5f8:	ab01      	add	r3, sp, #4
 800c5fa:	4698      	mov	r8, r3
 800c5fc:	4642      	mov	r2, r8
 800c5fe:	4b32      	ldr	r3, [pc, #200]	; (800c6c8 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800c600:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c602:	cb03      	ldmia	r3!, {r0, r1}
 800c604:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800c606:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c608:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c60a:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c60c:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c60e:	f005 fcf4 	bl	8011ffa <atoi>
 800c612:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800c614:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800c616:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800c618:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800c61a:	f005 fcee 	bl	8011ffa <atoi>
 800c61e:	b2c3      	uxtb	r3, r0
 800c620:	4699      	mov	r9, r3
 800c622:	4d2a      	ldr	r5, [pc, #168]	; (800c6cc <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800c624:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800c626:	6829      	ldr	r1, [r5, #0]
 800c628:	0030      	movs	r0, r6
 800c62a:	f7f3 fd6b 	bl	8000104 <strcmp>
 800c62e:	3401      	adds	r4, #1
 800c630:	b2e4      	uxtb	r4, r4
 800c632:	2800      	cmp	r0, #0
 800c634:	d100      	bne.n	800c638 <RTC_CalendarConfig+0x58>
 800c636:	0027      	movs	r7, r4
 800c638:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800c63a:	2c0c      	cmp	r4, #12
 800c63c:	d1f3      	bne.n	800c626 <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800c63e:	200a      	movs	r0, #10
 800c640:	4468      	add	r0, sp
 800c642:	f005 fcda 	bl	8011ffa <atoi>
	*(comDate + 5) = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	7173      	strb	r3, [r6, #5]
 800c64a:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800c64c:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800c64e:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800c650:	1dd8      	adds	r0, r3, #7
 800c652:	f005 fcd2 	bl	8011ffa <atoi>
	*(comDate + 2) = 0;
 800c656:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800c658:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800c65a:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800c65c:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800c65e:	f005 fccc 	bl	8011ffa <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800c662:	466b      	mov	r3, sp
 800c664:	4652      	mov	r2, sl
 800c666:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800c668:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800c66a:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800c66c:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c66e:	466a      	mov	r2, sp
 800c670:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c672:	4f17      	ldr	r7, [pc, #92]	; (800c6d0 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800c674:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c676:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c678:	4669      	mov	r1, sp
 800c67a:	2200      	movs	r2, #0
 800c67c:	0038      	movs	r0, r7
 800c67e:	f004 fe1f 	bl	80112c0 <HAL_RTC_SetDate>
 800c682:	2800      	cmp	r0, #0
 800c684:	d116      	bne.n	800c6b4 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c686:	2218      	movs	r2, #24
 800c688:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800c68a:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c68c:	7208      	strb	r0, [r1, #8]
 800c68e:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c690:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c692:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c694:	2200      	movs	r2, #0
 800c696:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800c698:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800c69a:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800c69c:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c69e:	f004 fd7b 	bl	8011198 <HAL_RTC_SetTime>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d106      	bne.n	800c6b4 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c6a6:	0038      	movs	r0, r7
 800c6a8:	4a0b      	ldr	r2, [pc, #44]	; (800c6d8 <RTC_CalendarConfig+0xf8>)
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	f004 fe84 	bl	80113b8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e000      	b.n	800c6b6 <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800c6b4:	20ff      	movs	r0, #255	; 0xff
}
 800c6b6:	b00d      	add	sp, #52	; 0x34
 800c6b8:	bc3c      	pop	{r2, r3, r4, r5}
 800c6ba:	4690      	mov	r8, r2
 800c6bc:	4699      	mov	r9, r3
 800c6be:	46a2      	mov	sl, r4
 800c6c0:	46ab      	mov	fp, r5
 800c6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c4:	08017538 	.word	0x08017538
 800c6c8:	08019a6c 	.word	0x08019a6c
 800c6cc:	20000064 	.word	0x20000064
 800c6d0:	20007104 	.word	0x20007104
 800c6d4:	20006c80 	.word	0x20006c80
 800c6d8:	000032f2 	.word	0x000032f2

0800c6dc <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800c6dc:	2380      	movs	r3, #128	; 0x80
{
 800c6de:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800c6e0:	4d1e      	ldr	r5, [pc, #120]	; (800c75c <RTC_Init+0x80>)
 800c6e2:	021b      	lsls	r3, r3, #8
 800c6e4:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800c6e6:	4c1e      	ldr	r4, [pc, #120]	; (800c760 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800c6ec:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800c6ee:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800c6f0:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800c6f2:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c6f4:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800c6f6:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c6f8:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c6fa:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800c6fc:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c6fe:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c700:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c702:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c704:	f004 fd00 	bl	8011108 <HAL_RTC_Init>
 800c708:	0006      	movs	r6, r0
 800c70a:	20ff      	movs	r0, #255	; 0xff
 800c70c:	2e00      	cmp	r6, #0
 800c70e:	d119      	bne.n	800c744 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800c710:	2101      	movs	r1, #1
 800c712:	0020      	movs	r0, r4
 800c714:	f004 fe56 	bl	80113c4 <HAL_RTCEx_BKUPRead>
 800c718:	4b14      	ldr	r3, [pc, #80]	; (800c76c <RTC_Init+0x90>)
 800c71a:	4298      	cmp	r0, r3
 800c71c:	d113      	bne.n	800c746 <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800c71e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c720:	011b      	lsls	r3, r3, #4
 800c722:	d501      	bpl.n	800c728 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800c724:	4b12      	ldr	r3, [pc, #72]	; (800c770 <RTC_Init+0x94>)
 800c726:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800c728:	4b0c      	ldr	r3, [pc, #48]	; (800c75c <RTC_Init+0x80>)
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	015b      	lsls	r3, r3, #5
 800c72e:	d50c      	bpl.n	800c74a <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800c730:	2201      	movs	r2, #1
 800c732:	4b0f      	ldr	r3, [pc, #60]	; (800c770 <RTC_Init+0x94>)
	return BOS_OK;
 800c734:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800c736:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c738:	2380      	movs	r3, #128	; 0x80
 800c73a:	4a08      	ldr	r2, [pc, #32]	; (800c75c <RTC_Init+0x80>)
 800c73c:	045b      	lsls	r3, r3, #17
 800c73e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c740:	430b      	orrs	r3, r1
 800c742:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c744:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800c746:	f7ff ff4b 	bl	800c5e0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c74a:	2380      	movs	r3, #128	; 0x80
 800c74c:	4a03      	ldr	r2, [pc, #12]	; (800c75c <RTC_Init+0x80>)
 800c74e:	045b      	lsls	r3, r3, #17
 800c750:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800c752:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c754:	430b      	orrs	r3, r1
 800c756:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800c758:	e7f4      	b.n	800c744 <RTC_Init+0x68>
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	40021000 	.word	0x40021000
 800c760:	20007104 	.word	0x20007104
 800c764:	40002800 	.word	0x40002800
 800c768:	000007cf 	.word	0x000007cf
 800c76c:	000032f2 	.word	0x000032f2
 800c770:	2000288a 	.word	0x2000288a

0800c774 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800c774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c776:	46c6      	mov	lr, r8
 800c778:	b500      	push	{lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	ac0c      	add	r4, sp, #48	; 0x30
 800c77e:	7827      	ldrb	r7, [r4, #0]
 800c780:	ac0d      	add	r4, sp, #52	; 0x34
 800c782:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800c784:	3230      	adds	r2, #48	; 0x30
{
 800c786:	46a0      	mov	r8, r4
 800c788:	ac0e      	add	r4, sp, #56	; 0x38
 800c78a:	7825      	ldrb	r5, [r4, #0]
 800c78c:	ac0f      	add	r4, sp, #60	; 0x3c
 800c78e:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800c790:	466c      	mov	r4, sp
 800c792:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800c794:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800c796:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800c798:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c79a:	4c20      	ldr	r4, [pc, #128]	; (800c81c <BOS_CalendarConfig+0xa8>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	4669      	mov	r1, sp
 800c7a0:	0020      	movs	r0, r4
 800c7a2:	f004 fd8d 	bl	80112c0 <HAL_RTC_SetDate>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d123      	bne.n	800c7f2 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800c7aa:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800c7ac:	a901      	add	r1, sp, #4
 800c7ae:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800c7b0:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800c7b2:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800c7b4:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800c7b6:	2d0c      	cmp	r5, #12
 800c7b8:	d820      	bhi.n	800c7fc <BOS_CalendarConfig+0x88>
 800c7ba:	4d19      	ldr	r5, [pc, #100]	; (800c820 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800c7bc:	2e01      	cmp	r6, #1
 800c7be:	d022      	beq.n	800c806 <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800c7c0:	2e02      	cmp	r6, #2
 800c7c2:	d025      	beq.n	800c810 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c7c4:	2318      	movs	r3, #24
 800c7c6:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	0020      	movs	r0, r4
 800c7cc:	f004 fce4 	bl	8011198 <HAL_RTC_SetTime>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d10e      	bne.n	800c7f2 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c7d4:	7b6b      	ldrb	r3, [r5, #13]
 800c7d6:	7929      	ldrb	r1, [r5, #4]
 800c7d8:	021b      	lsls	r3, r3, #8
 800c7da:	301b      	adds	r0, #27
 800c7dc:	4319      	orrs	r1, r3
 800c7de:	30ff      	adds	r0, #255	; 0xff
 800c7e0:	f7fe f978 	bl	800aad4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c7e4:	0020      	movs	r0, r4
 800c7e6:	4a0f      	ldr	r2, [pc, #60]	; (800c824 <BOS_CalendarConfig+0xb0>)
 800c7e8:	2101      	movs	r1, #1
 800c7ea:	f004 fde5 	bl	80113b8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	e000      	b.n	800c7f4 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800c7f2:	20ff      	movs	r0, #255	; 0xff
}
 800c7f4:	b006      	add	sp, #24
 800c7f6:	bc04      	pop	{r2}
 800c7f8:	4690      	mov	r8, r2
 800c7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800c7fc:	2318      	movs	r3, #24
 800c7fe:	4d08      	ldr	r5, [pc, #32]	; (800c820 <BOS_CalendarConfig+0xac>)
 800c800:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800c802:	2e01      	cmp	r6, #1
 800c804:	d1dc      	bne.n	800c7c0 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c806:	2300      	movs	r3, #0
 800c808:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c80a:	330c      	adds	r3, #12
 800c80c:	736b      	strb	r3, [r5, #13]
 800c80e:	e7db      	b.n	800c7c8 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c810:	2340      	movs	r3, #64	; 0x40
 800c812:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c814:	3b34      	subs	r3, #52	; 0x34
 800c816:	736b      	strb	r3, [r5, #13]
 800c818:	e7d6      	b.n	800c7c8 <BOS_CalendarConfig+0x54>
 800c81a:	46c0      	nop			; (mov r8, r8)
 800c81c:	20007104 	.word	0x20007104
 800c820:	20006c80 	.word	0x20006c80
 800c824:	000032f2 	.word	0x000032f2

0800c828 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c828:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c82a:	4d16      	ldr	r5, [pc, #88]	; (800c884 <GetTimeDate+0x5c>)
{
 800c82c:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c82e:	ac01      	add	r4, sp, #4
 800c830:	0021      	movs	r1, r4
 800c832:	2200      	movs	r2, #0
 800c834:	0028      	movs	r0, r5
 800c836:	f004 fbcf 	bl	8010fd8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c83a:	4669      	mov	r1, sp
 800c83c:	2200      	movs	r2, #0
 800c83e:	0028      	movs	r0, r5
 800c840:	f004 fbfa 	bl	8011038 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c844:	7a22      	ldrb	r2, [r4, #8]
 800c846:	4b10      	ldr	r3, [pc, #64]	; (800c888 <GetTimeDate+0x60>)
 800c848:	09d2      	lsrs	r2, r2, #7
 800c84a:	3201      	adds	r2, #1
 800c84c:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c84e:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800c850:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c852:	0852      	lsrs	r2, r2, #1
 800c854:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c856:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c858:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800c85a:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c85c:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c85e:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800c860:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c862:	7822      	ldrb	r2, [r4, #0]
 800c864:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c866:	466a      	mov	r2, sp
 800c868:	7892      	ldrb	r2, [r2, #2]
 800c86a:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c86c:	466a      	mov	r2, sp
 800c86e:	7852      	ldrb	r2, [r2, #1]
 800c870:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c872:	466a      	mov	r2, sp
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c878:	466a      	mov	r2, sp
 800c87a:	78d2      	ldrb	r2, [r2, #3]
 800c87c:	4462      	add	r2, ip
 800c87e:	831a      	strh	r2, [r3, #24]
}
 800c880:	b007      	add	sp, #28
 800c882:	bd30      	pop	{r4, r5, pc}
 800c884:	20007104 	.word	0x20007104
 800c888:	20006c80 	.word	0x20006c80

0800c88c <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c88c:	2080      	movs	r0, #128	; 0x80
 800c88e:	4a13      	ldr	r2, [pc, #76]	; (800c8dc <TIM_USEC_Init+0x50>)
{
 800c890:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800c892:	69d1      	ldr	r1, [r2, #28]
 800c894:	0040      	lsls	r0, r0, #1
 800c896:	4301      	orrs	r1, r0
 800c898:	61d1      	str	r1, [r2, #28]
 800c89a:	69d3      	ldr	r3, [r2, #28]
{
 800c89c:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800c89e:	4003      	ands	r3, r0
 800c8a0:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c8a2:	4c0f      	ldr	r4, [pc, #60]	; (800c8e0 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800c8a4:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800c8a6:	4b0f      	ldr	r3, [pc, #60]	; (800c8e4 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8a8:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800c8aa:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c8ac:	f004 fae4 	bl	8010e78 <HAL_RCC_GetPCLK1Freq>
 800c8b0:	490d      	ldr	r1, [pc, #52]	; (800c8e8 <TIM_USEC_Init+0x5c>)
 800c8b2:	f7f3 fc4d 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c8b8:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800c8ba:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800c8bc:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8be:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800c8c0:	f004 fe9e 	bl	8011600 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c8c4:	a902      	add	r1, sp, #8
 800c8c6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c8c8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8ca:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c8cc:	f004 feb2 	bl	8011634 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c8d0:	0020      	movs	r0, r4
 800c8d2:	f004 fd7f 	bl	80113d4 <HAL_TIM_Base_Start>
}
 800c8d6:	b005      	add	sp, #20
 800c8d8:	bd30      	pop	{r4, r5, pc}
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	40021000 	.word	0x40021000
 800c8e0:	20007160 	.word	0x20007160
 800c8e4:	40002000 	.word	0x40002000
 800c8e8:	000f4240 	.word	0x000f4240
 800c8ec:	0000ffff 	.word	0x0000ffff

0800c8f0 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c8f0:	2080      	movs	r0, #128	; 0x80
 800c8f2:	4a13      	ldr	r2, [pc, #76]	; (800c940 <TIM_MSEC_Init+0x50>)
{
 800c8f4:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800c8f6:	6991      	ldr	r1, [r2, #24]
 800c8f8:	0240      	lsls	r0, r0, #9
 800c8fa:	4301      	orrs	r1, r0
 800c8fc:	6191      	str	r1, [r2, #24]
 800c8fe:	6993      	ldr	r3, [r2, #24]
{
 800c900:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800c902:	4003      	ands	r3, r0
 800c904:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800c906:	4c0f      	ldr	r4, [pc, #60]	; (800c944 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800c908:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c90c:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800c90e:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c910:	f004 fab2 	bl	8010e78 <HAL_RCC_GetPCLK1Freq>
 800c914:	21fa      	movs	r1, #250	; 0xfa
 800c916:	0089      	lsls	r1, r1, #2
 800c918:	f7f3 fc1a 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800c91c:	4b0b      	ldr	r3, [pc, #44]	; (800c94c <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c91e:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800c920:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800c922:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c924:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800c926:	f004 fe6b 	bl	8011600 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c92a:	a902      	add	r1, sp, #8
 800c92c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c92e:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c930:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c932:	f004 fe7f 	bl	8011634 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800c936:	0020      	movs	r0, r4
 800c938:	f004 fd4c 	bl	80113d4 <HAL_TIM_Base_Start>
}
 800c93c:	b005      	add	sp, #20
 800c93e:	bd30      	pop	{r4, r5, pc}
 800c940:	40021000 	.word	0x40021000
 800c944:	20007124 	.word	0x20007124
 800c948:	40014000 	.word	0x40014000
 800c94c:	0000ffff 	.word	0x0000ffff

0800c950 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800c950:	b510      	push	{r4, lr}
 800c952:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800c954:	f002 f8da 	bl	800eb0c <vPortEnterCritical>
	
	if (Delay)
 800c958:	2c00      	cmp	r4, #0
 800c95a:	d006      	beq.n	800c96a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800c95c:	4b04      	ldr	r3, [pc, #16]	; (800c970 <StartMicroDelay+0x20>)
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800c962:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c964:	1a5b      	subs	r3, r3, r1
 800c966:	42a3      	cmp	r3, r4
 800c968:	d9fb      	bls.n	800c962 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c96a:	f002 f8db 	bl	800eb24 <vPortExitCritical>
}
 800c96e:	bd10      	pop	{r4, pc}
 800c970:	20007160 	.word	0x20007160

0800c974 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800c974:	b510      	push	{r4, lr}
 800c976:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800c978:	f002 f8c8 	bl	800eb0c <vPortEnterCritical>
	
	if (Delay)
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	d006      	beq.n	800c98e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800c980:	4b04      	ldr	r3, [pc, #16]	; (800c994 <StartMilliDelay+0x20>)
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800c986:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c988:	1a5b      	subs	r3, r3, r1
 800c98a:	42a3      	cmp	r3, r4
 800c98c:	d9fb      	bls.n	800c986 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c98e:	f002 f8c9 	bl	800eb24 <vPortExitCritical>
}
 800c992:	bd10      	pop	{r4, pc}
 800c994:	20007124 	.word	0x20007124

0800c998 <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c99c:	f7fd f992 	bl	8009cc4 <GetPort>
 800c9a0:	2180      	movs	r1, #128	; 0x80
 800c9a2:	0209      	lsls	r1, r1, #8
 800c9a4:	000a      	movs	r2, r1
 800c9a6:	3801      	subs	r0, #1
 800c9a8:	4102      	asrs	r2, r0
 800c9aa:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <SwapUartPins.part.0+0x30>)
 800c9ac:	4d07      	ldr	r5, [pc, #28]	; (800c9cc <SwapUartPins.part.0+0x34>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c9b0:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	5b58      	ldrh	r0, [r3, r5]
 800c9b8:	4302      	orrs	r2, r0
 800c9ba:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c9bc:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800c9be:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c9c0:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800c9c2:	f005 f9c5 	bl	8011d50 <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	20000a98 	.word	0x20000a98
 800c9cc:	2000719c 	.word	0x2000719c

0800c9d0 <MB_PORT_Init>:
{
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	0004      	movs	r4, r0
  huart1.Instance = USART1;
 800c9d4:	480a      	ldr	r0, [pc, #40]	; (800ca00 <MB_PORT_Init+0x30>)
 800c9d6:	4d0b      	ldr	r5, [pc, #44]	; (800ca04 <MB_PORT_Init+0x34>)
  huart1.Init.StopBits = STOP_BIT;
 800c9d8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c9da:	230c      	movs	r3, #12
 800c9dc:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c9e2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c9e4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800c9e6:	3310      	adds	r3, #16
 800c9e8:	6243      	str	r3, [r0, #36]	; 0x24
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800c9ea:	2380      	movs	r3, #128	; 0x80
 800c9ec:	015b      	lsls	r3, r3, #5
  huart1.Instance = USART1;
 800c9ee:	6005      	str	r5, [r0, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 800c9f0:	6044      	str	r4, [r0, #4]
  huart1.Init.WordLength = DataBitsN;
 800c9f2:	6081      	str	r1, [r0, #8]
  huart1.Init.Parity = PARITY_BIT;
 800c9f4:	6102      	str	r2, [r0, #16]
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800c9f6:	6383      	str	r3, [r0, #56]	; 0x38
	HAL_UART_Init(&huart1);
 800c9f8:	f005 f9aa 	bl	8011d50 <HAL_UART_Init>
}
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	20006e88 	.word	0x20006e88
 800ca04:	40013800 	.word	0x40013800

0800ca08 <MX_USART1_UART_Init>:
	MB_PORT_Init(9600, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800ca08:	2096      	movs	r0, #150	; 0x96
{
 800ca0a:	b510      	push	{r4, lr}
	MB_PORT_Init(9600, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2100      	movs	r1, #0
 800ca12:	0180      	lsls	r0, r0, #6
 800ca14:	f7ff ffdc 	bl	800c9d0 <MB_PORT_Init>
}
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	46c0      	nop			; (mov r8, r8)

0800ca1c <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800ca1c:	4809      	ldr	r0, [pc, #36]	; (800ca44 <MX_USART2_UART_Init+0x28>)
 800ca1e:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <MX_USART2_UART_Init+0x2c>)
{
 800ca20:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800ca22:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800ca24:	23e1      	movs	r3, #225	; 0xe1
 800ca26:	031b      	lsls	r3, r3, #12
 800ca28:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ca2a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ca2c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ca2e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ca30:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ca32:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ca34:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca36:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca38:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800ca3a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ca3c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800ca3e:	f005 f987 	bl	8011d50 <HAL_UART_Init>
}
 800ca42:	bd10      	pop	{r4, pc}
 800ca44:	20006fe8 	.word	0x20006fe8
 800ca48:	40004400 	.word	0x40004400

0800ca4c <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800ca4c:	4809      	ldr	r0, [pc, #36]	; (800ca74 <MX_USART3_UART_Init+0x28>)
 800ca4e:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <MX_USART3_UART_Init+0x2c>)
{
 800ca50:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800ca52:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800ca54:	23e1      	movs	r3, #225	; 0xe1
 800ca56:	031b      	lsls	r3, r3, #12
 800ca58:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ca5a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ca5c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ca5e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ca60:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ca62:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ca64:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca66:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca68:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800ca6a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ca6c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800ca6e:	f005 f96f 	bl	8011d50 <HAL_UART_Init>
}
 800ca72:	bd10      	pop	{r4, pc}
 800ca74:	20006da4 	.word	0x20006da4
 800ca78:	40004800 	.word	0x40004800

0800ca7c <MX_USART4_UART_Init>:
  huart4.Instance = USART4;
 800ca7c:	4809      	ldr	r0, [pc, #36]	; (800caa4 <MX_USART4_UART_Init+0x28>)
 800ca7e:	4b0a      	ldr	r3, [pc, #40]	; (800caa8 <MX_USART4_UART_Init+0x2c>)
{
 800ca80:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800ca82:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800ca84:	23e1      	movs	r3, #225	; 0xe1
 800ca86:	031b      	lsls	r3, r3, #12
 800ca88:	6043      	str	r3, [r0, #4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ca8a:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ca8c:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ca8e:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ca90:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ca92:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ca94:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca96:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca98:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800ca9a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ca9c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800ca9e:	f005 f957 	bl	8011d50 <HAL_UART_Init>
}
 800caa2:	bd10      	pop	{r4, pc}
 800caa4:	20006f74 	.word	0x20006f74
 800caa8:	40004c00 	.word	0x40004c00

0800caac <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800caac:	4809      	ldr	r0, [pc, #36]	; (800cad4 <MX_USART5_UART_Init+0x28>)
 800caae:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <MX_USART5_UART_Init+0x2c>)
{
 800cab0:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800cab2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cab4:	23e1      	movs	r3, #225	; 0xe1
 800cab6:	031b      	lsls	r3, r3, #12
 800cab8:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800caba:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800cabc:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800cabe:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800cac0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800cac2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800cac4:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cac6:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800cac8:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800caca:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cacc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800cace:	f005 f93f 	bl	8011d50 <HAL_UART_Init>
}
 800cad2:	bd10      	pop	{r4, pc}
 800cad4:	20006e18 	.word	0x20006e18
 800cad8:	40005000 	.word	0x40005000

0800cadc <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800cadc:	4809      	ldr	r0, [pc, #36]	; (800cb04 <MX_USART6_UART_Init+0x28>)
 800cade:	4b0a      	ldr	r3, [pc, #40]	; (800cb08 <MX_USART6_UART_Init+0x2c>)
{
 800cae0:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800cae2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cae4:	23e1      	movs	r3, #225	; 0xe1
 800cae6:	031b      	lsls	r3, r3, #12
 800cae8:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800caea:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800caec:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800caee:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800caf0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800caf2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800caf4:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800caf6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800caf8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cafa:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cafc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800cafe:	f005 f927 	bl	8011d50 <HAL_UART_Init>
}
 800cb02:	bd10      	pop	{r4, pc}
 800cb04:	20006f04 	.word	0x20006f04
 800cb08:	40011400 	.word	0x40011400

0800cb0c <HAL_UART_MspInit>:
{
 800cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0e:	46c6      	mov	lr, r8
 800cb10:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800cb12:	6803      	ldr	r3, [r0, #0]
 800cb14:	4a7d      	ldr	r2, [pc, #500]	; (800cd0c <HAL_UART_MspInit+0x200>)
{
 800cb16:	b08c      	sub	sp, #48	; 0x30
  if(huart->Instance==USART1)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d040      	beq.n	800cb9e <HAL_UART_MspInit+0x92>
  else if(huart->Instance==USART2)
 800cb1c:	4a7c      	ldr	r2, [pc, #496]	; (800cd10 <HAL_UART_MspInit+0x204>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d06b      	beq.n	800cbfa <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART3)
 800cb22:	4a7c      	ldr	r2, [pc, #496]	; (800cd14 <HAL_UART_MspInit+0x208>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d100      	bne.n	800cb2a <HAL_UART_MspInit+0x1e>
 800cb28:	e093      	b.n	800cc52 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART4)
 800cb2a:	4a7b      	ldr	r2, [pc, #492]	; (800cd18 <HAL_UART_MspInit+0x20c>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d100      	bne.n	800cb32 <HAL_UART_MspInit+0x26>
 800cb30:	e0ab      	b.n	800cc8a <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART5)
 800cb32:	4a7a      	ldr	r2, [pc, #488]	; (800cd1c <HAL_UART_MspInit+0x210>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d007      	beq.n	800cb48 <HAL_UART_MspInit+0x3c>
  else if(huart->Instance==USART6)
 800cb38:	4a79      	ldr	r2, [pc, #484]	; (800cd20 <HAL_UART_MspInit+0x214>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d100      	bne.n	800cb40 <HAL_UART_MspInit+0x34>
 800cb3e:	e0c5      	b.n	800cccc <HAL_UART_MspInit+0x1c0>
}
 800cb40:	b00c      	add	sp, #48	; 0x30
 800cb42:	bc04      	pop	{r2}
 800cb44:	4690      	mov	r8, r2
 800cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART5_CLK_ENABLE();
 800cb48:	2080      	movs	r0, #128	; 0x80
 800cb4a:	4a76      	ldr	r2, [pc, #472]	; (800cd24 <HAL_UART_MspInit+0x218>)
 800cb4c:	0340      	lsls	r0, r0, #13
 800cb4e:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb50:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800cb52:	4301      	orrs	r1, r0
 800cb54:	61d1      	str	r1, [r2, #28]
 800cb56:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb58:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800cb5a:	4003      	ands	r3, r0
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb60:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800cb62:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800cb64:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800cb66:	a907      	add	r1, sp, #28
 800cb68:	486f      	ldr	r0, [pc, #444]	; (800cd28 <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800cb6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb6c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb6e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb70:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800cb72:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800cb74:	f003 fbb6 	bl	80102e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART5_RX_PIN;
 800cb78:	2310      	movs	r3, #16
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800cb7a:	486b      	ldr	r0, [pc, #428]	; (800cd28 <HAL_UART_MspInit+0x21c>)
	GPIO_InitStruct.Pin = USART5_RX_PIN;
 800cb7c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb7e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb80:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb82:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800cb84:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800cb86:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800cb88:	f003 fbac 	bl	80102e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2101      	movs	r1, #1
 800cb90:	201d      	movs	r0, #29
 800cb92:	f002 fbbd 	bl	800f310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800cb96:	201d      	movs	r0, #29
 800cb98:	f002 fbe6 	bl	800f368 <HAL_NVIC_EnableIRQ>
}
 800cb9c:	e7d0      	b.n	800cb40 <HAL_UART_MspInit+0x34>
    __USART1_CLK_ENABLE();
 800cb9e:	2080      	movs	r0, #128	; 0x80
 800cba0:	4a60      	ldr	r2, [pc, #384]	; (800cd24 <HAL_UART_MspInit+0x218>)
 800cba2:	01c0      	lsls	r0, r0, #7
 800cba4:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cba6:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800cba8:	4301      	orrs	r1, r0
 800cbaa:	6191      	str	r1, [r2, #24]
 800cbac:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbae:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800cbb0:	4003      	ands	r3, r0
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cbb6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cbb8:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbba:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cbbc:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cbbe:	a907      	add	r1, sp, #28
 800cbc0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cbc2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbc4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbc6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbc8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800cbca:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cbcc:	f003 fb8a 	bl	80102e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cbd0:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cbd2:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cbd4:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cbd6:	a907      	add	r1, sp, #28
 800cbd8:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cbda:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbdc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbde:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbe0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800cbe2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cbe4:	f003 fb7e 	bl	80102e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2101      	movs	r1, #1
 800cbec:	201b      	movs	r0, #27
 800cbee:	f002 fb8f 	bl	800f310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cbf2:	201b      	movs	r0, #27
 800cbf4:	f002 fbb8 	bl	800f368 <HAL_NVIC_EnableIRQ>
 800cbf8:	e7a2      	b.n	800cb40 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800cbfa:	2080      	movs	r0, #128	; 0x80
 800cbfc:	4a49      	ldr	r2, [pc, #292]	; (800cd24 <HAL_UART_MspInit+0x218>)
 800cbfe:	0280      	lsls	r0, r0, #10
 800cc00:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc02:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800cc04:	4301      	orrs	r1, r0
 800cc06:	61d1      	str	r1, [r2, #28]
 800cc08:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc0a:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800cc0c:	4003      	ands	r3, r0
 800cc0e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cc10:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800cc12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc14:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800cc16:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cc18:	a907      	add	r1, sp, #28
 800cc1a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800cc1c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc1e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc20:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc22:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800cc24:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cc26:	f003 fb5d 	bl	80102e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cc2a:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800cc2c:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cc2e:	a907      	add	r1, sp, #28
 800cc30:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800cc32:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc34:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc36:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc38:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800cc3a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cc3c:	f003 fb52 	bl	80102e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800cc40:	2200      	movs	r2, #0
 800cc42:	2101      	movs	r1, #1
 800cc44:	201c      	movs	r0, #28
 800cc46:	f002 fb63 	bl	800f310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cc4a:	201c      	movs	r0, #28
 800cc4c:	f002 fb8c 	bl	800f368 <HAL_NVIC_EnableIRQ>
 800cc50:	e776      	b.n	800cb40 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800cc52:	2080      	movs	r0, #128	; 0x80
 800cc54:	4a33      	ldr	r2, [pc, #204]	; (800cd24 <HAL_UART_MspInit+0x218>)
 800cc56:	02c0      	lsls	r0, r0, #11
 800cc58:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc5a:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800cc5c:	4301      	orrs	r1, r0
 800cc5e:	61d1      	str	r1, [r2, #28]
 800cc60:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc62:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800cc64:	4003      	ands	r3, r0
 800cc66:	9303      	str	r3, [sp, #12]
 800cc68:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cc6a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc6c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cc6e:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cc70:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cc72:	a907      	add	r1, sp, #28
 800cc74:	482c      	ldr	r0, [pc, #176]	; (800cd28 <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cc76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc78:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc7a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc7c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cc7e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cc80:	f003 fb30 	bl	80102e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800cc84:	2380      	movs	r3, #128	; 0x80
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	e777      	b.n	800cb7a <HAL_UART_MspInit+0x6e>
    __USART4_CLK_ENABLE();
 800cc8a:	2080      	movs	r0, #128	; 0x80
 800cc8c:	4a25      	ldr	r2, [pc, #148]	; (800cd24 <HAL_UART_MspInit+0x218>)
 800cc8e:	0300      	lsls	r0, r0, #12
 800cc90:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800cc92:	2401      	movs	r4, #1
    __USART4_CLK_ENABLE();
 800cc94:	4301      	orrs	r1, r0
 800cc96:	61d1      	str	r1, [r2, #28]
 800cc98:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc9a:	2502      	movs	r5, #2
    __USART4_CLK_ENABLE();
 800cc9c:	4003      	ands	r3, r0
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cc9e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cca0:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = USART4_AF;	
 800cca2:	2604      	movs	r6, #4
    __USART4_CLK_ENABLE();
 800cca4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cca6:	a907      	add	r1, sp, #28
 800cca8:	05c0      	lsls	r0, r0, #23
    __USART4_CLK_ENABLE();
 800ccaa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800ccac:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccae:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccb0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccb2:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800ccb4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800ccb6:	f003 fb15 	bl	80102e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART4_RX_PIN;
 800ccba:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccbc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccbe:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccc0:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800ccc2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800ccc4:	2090      	movs	r0, #144	; 0x90
 800ccc6:	a907      	add	r1, sp, #28
 800ccc8:	05c0      	lsls	r0, r0, #23
 800ccca:	e75d      	b.n	800cb88 <HAL_UART_MspInit+0x7c>
    __USART6_CLK_ENABLE();
 800cccc:	2420      	movs	r4, #32
 800ccce:	4b15      	ldr	r3, [pc, #84]	; (800cd24 <HAL_UART_MspInit+0x218>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800ccd0:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800ccd2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccd4:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800ccd6:	4322      	orrs	r2, r4
 800ccd8:	619a      	str	r2, [r3, #24]
 800ccda:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccdc:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800ccde:	4023      	ands	r3, r4
 800cce0:	9306      	str	r3, [sp, #24]
 800cce2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800cce4:	2310      	movs	r3, #16
 800cce6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cce8:	3b0e      	subs	r3, #14
 800ccea:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800ccec:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800ccee:	a907      	add	r1, sp, #28
 800ccf0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccf2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccf4:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccf6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800ccf8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800ccfa:	f003 faf3 	bl	80102e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccfe:	4643      	mov	r3, r8
	GPIO_InitStruct.Pin = USART6_RX_PIN;
 800cd00:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd02:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd04:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd06:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800cd08:	950b      	str	r5, [sp, #44]	; 0x2c
 800cd0a:	e7db      	b.n	800ccc4 <HAL_UART_MspInit+0x1b8>
 800cd0c:	40013800 	.word	0x40013800
 800cd10:	40004400 	.word	0x40004400
 800cd14:	40004800 	.word	0x40004800
 800cd18:	40004c00 	.word	0x40004c00
 800cd1c:	40005000 	.word	0x40005000
 800cd20:	40011400 	.word	0x40011400
 800cd24:	40021000 	.word	0x40021000
 800cd28:	48000400 	.word	0x48000400

0800cd2c <writePxMutex>:
{
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	4647      	mov	r7, r8
 800cd30:	46ce      	mov	lr, r9
 800cd32:	b580      	push	{r7, lr}
 800cd34:	0017      	movs	r7, r2
 800cd36:	1e42      	subs	r2, r0, #1
 800cd38:	b2d2      	uxtb	r2, r2
 800cd3a:	000e      	movs	r6, r1
 800cd3c:	2a05      	cmp	r2, #5
 800cd3e:	d80e      	bhi.n	800cd5e <writePxMutex+0x32>
 800cd40:	4911      	ldr	r1, [pc, #68]	; (800cd88 <writePxMutex+0x5c>)
 800cd42:	0092      	lsls	r2, r2, #2
 800cd44:	5852      	ldr	r2, [r2, r1]
 800cd46:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800cd48:	2a00      	cmp	r2, #0
 800cd4a:	d008      	beq.n	800cd5e <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cd4c:	4a0f      	ldr	r2, [pc, #60]	; (800cd8c <writePxMutex+0x60>)
 800cd4e:	0085      	lsls	r5, r0, #2
 800cd50:	0019      	movs	r1, r3
 800cd52:	5950      	ldr	r0, [r2, r5]
 800cd54:	4691      	mov	r9, r2
 800cd56:	f000 f9bf 	bl	800d0d8 <osSemaphoreWait>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d007      	beq.n	800cd6e <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800cd5e:	2401      	movs	r4, #1
}
 800cd60:	0020      	movs	r0, r4
 800cd62:	bc0c      	pop	{r2, r3}
 800cd64:	4690      	mov	r8, r2
 800cd66:	4699      	mov	r9, r3
 800cd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cd6a:	2803      	cmp	r0, #3
 800cd6c:	d007      	beq.n	800cd7e <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800cd6e:	9b08      	ldr	r3, [sp, #32]
 800cd70:	003a      	movs	r2, r7
 800cd72:	0031      	movs	r1, r6
 800cd74:	4640      	mov	r0, r8
 800cd76:	f004 ff49 	bl	8011c0c <HAL_UART_Transmit>
 800cd7a:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cd7c:	d1f5      	bne.n	800cd6a <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800cd7e:	464b      	mov	r3, r9
 800cd80:	5958      	ldr	r0, [r3, r5]
 800cd82:	f000 f9d3 	bl	800d12c <osSemaphoreRelease>
 800cd86:	e7eb      	b.n	800cd60 <writePxMutex+0x34>
 800cd88:	08017310 	.word	0x08017310
 800cd8c:	20006d04 	.word	0x20006d04

0800cd90 <writePxITMutex>:
{
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	0015      	movs	r5, r2
 800cd94:	1e42      	subs	r2, r0, #1
 800cd96:	b2d2      	uxtb	r2, r2
 800cd98:	000c      	movs	r4, r1
 800cd9a:	2a05      	cmp	r2, #5
 800cd9c:	d80c      	bhi.n	800cdb8 <writePxITMutex+0x28>
 800cd9e:	490a      	ldr	r1, [pc, #40]	; (800cdc8 <writePxITMutex+0x38>)
 800cda0:	0092      	lsls	r2, r2, #2
 800cda2:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800cda4:	2e00      	cmp	r6, #0
 800cda6:	d007      	beq.n	800cdb8 <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cda8:	4a08      	ldr	r2, [pc, #32]	; (800cdcc <writePxITMutex+0x3c>)
 800cdaa:	0080      	lsls	r0, r0, #2
 800cdac:	5880      	ldr	r0, [r0, r2]
 800cdae:	0019      	movs	r1, r3
 800cdb0:	f000 f992 	bl	800d0d8 <osSemaphoreWait>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d001      	beq.n	800cdbc <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800cdb8:	2001      	movs	r0, #1
}
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800cdbc:	002a      	movs	r2, r5
 800cdbe:	0021      	movs	r1, r4
 800cdc0:	0030      	movs	r0, r6
 800cdc2:	f004 fc79 	bl	80116b8 <HAL_UART_Transmit_IT>
 800cdc6:	e7f8      	b.n	800cdba <writePxITMutex+0x2a>
 800cdc8:	08017310 	.word	0x08017310
 800cdcc:	20006d04 	.word	0x20006d04

0800cdd0 <UpdateBaudrate>:
{
 800cdd0:	3801      	subs	r0, #1
 800cdd2:	b2c0      	uxtb	r0, r0
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	2805      	cmp	r0, #5
 800cdd8:	d807      	bhi.n	800cdea <UpdateBaudrate+0x1a>
 800cdda:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <UpdateBaudrate+0x20>)
 800cddc:	0080      	lsls	r0, r0, #2
 800cdde:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800cde0:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800cde2:	f004 ffb5 	bl	8011d50 <HAL_UART_Init>
}
 800cde6:	2000      	movs	r0, #0
 800cde8:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800cdea:	2300      	movs	r3, #0
 800cdec:	605b      	str	r3, [r3, #4]
 800cdee:	deff      	udf	#255	; 0xff
 800cdf0:	08017310 	.word	0x08017310

0800cdf4 <GetUart>:
{
 800cdf4:	3801      	subs	r0, #1
 800cdf6:	b2c3      	uxtb	r3, r0
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	2b05      	cmp	r3, #5
 800cdfc:	d802      	bhi.n	800ce04 <GetUart+0x10>
 800cdfe:	4a02      	ldr	r2, [pc, #8]	; (800ce08 <GetUart+0x14>)
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	5898      	ldr	r0, [r3, r2]
}
 800ce04:	4770      	bx	lr
 800ce06:	46c0      	nop			; (mov r8, r8)
 800ce08:	08017310 	.word	0x08017310

0800ce0c <SwapUartPins>:
{
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	0004      	movs	r4, r0
 800ce10:	000d      	movs	r5, r1
	if (huart != NULL) {
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d003      	beq.n	800ce1e <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800ce16:	2901      	cmp	r1, #1
 800ce18:	d017      	beq.n	800ce4a <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800ce1a:	2900      	cmp	r1, #0
 800ce1c:	d000      	beq.n	800ce20 <SwapUartPins+0x14>
}
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ce20:	f7fc ff50 	bl	8009cc4 <GetPort>
 800ce24:	2180      	movs	r1, #128	; 0x80
 800ce26:	3801      	subs	r0, #1
 800ce28:	0209      	lsls	r1, r1, #8
 800ce2a:	4101      	asrs	r1, r0
 800ce2c:	4b08      	ldr	r3, [pc, #32]	; (800ce50 <SwapUartPins+0x44>)
 800ce2e:	4e09      	ldr	r6, [pc, #36]	; (800ce54 <SwapUartPins+0x48>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800ce32:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ce34:	3b01      	subs	r3, #1
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800ce3a:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ce3c:	438a      	bics	r2, r1
 800ce3e:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ce40:	2308      	movs	r3, #8
 800ce42:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800ce44:	f004 ff84 	bl	8011d50 <HAL_UART_Init>
}
 800ce48:	e7e9      	b.n	800ce1e <SwapUartPins+0x12>
 800ce4a:	f7ff fda5 	bl	800c998 <SwapUartPins.part.0>
 800ce4e:	e7e6      	b.n	800ce1e <SwapUartPins+0x12>
 800ce50:	20000a98 	.word	0x20000a98
 800ce54:	2000719c 	.word	0x2000719c

0800ce58 <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800ce58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce5a:	46c6      	mov	lr, r8
 800ce5c:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800ce5e:	4d12      	ldr	r5, [pc, #72]	; (800cea8 <ReadPortsDir+0x50>)
 800ce60:	782b      	ldrb	r3, [r5, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d01d      	beq.n	800cea2 <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800ce66:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800ce68:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800ce6a:	4698      	mov	r8, r3
 800ce6c:	4e0f      	ldr	r6, [pc, #60]	; (800ceac <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800ce6e:	4f10      	ldr	r7, [pc, #64]	; (800ceb0 <ReadPortsDir+0x58>)
		if (i != myID) {
 800ce70:	7833      	ldrb	r3, [r6, #0]
 800ce72:	42a3      	cmp	r3, r4
 800ce74:	d00c      	beq.n	800ce90 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800ce76:	2200      	movs	r2, #0
 800ce78:	2113      	movs	r1, #19
 800ce7a:	0020      	movs	r0, r4
 800ce7c:	f7fb f972 	bl	8008164 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800ce80:	2032      	movs	r0, #50	; 0x32
 800ce82:	f7ff fd77 	bl	800c974 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800ce86:	783b      	ldrb	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800ce90:	3401      	adds	r4, #1
 800ce92:	782b      	ldrb	r3, [r5, #0]
 800ce94:	b2e4      	uxtb	r4, r4
 800ce96:	42a3      	cmp	r3, r4
 800ce98:	d2ea      	bcs.n	800ce70 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	bc04      	pop	{r2}
 800ce9e:	4690      	mov	r8, r2
 800cea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	4698      	mov	r8, r3
 800cea6:	e7f8      	b.n	800ce9a <ReadPortsDir+0x42>
 800cea8:	20000008 	.word	0x20000008
 800ceac:	20000a98 	.word	0x20000a98
 800ceb0:	20000c3c 	.word	0x20000c3c

0800ceb4 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800ceb6:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800ceb8:	490c      	ldr	r1, [pc, #48]	; (800ceec <ReadPortsDirMSG+0x38>)
	for (int p = 1; p <= NumOfPorts; p++) {
 800ceba:	2301      	movs	r3, #1
	uint16_t temp =0;
 800cebc:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cebe:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800cec0:	4f0b      	ldr	r7, [pc, #44]	; (800cef0 <ReadPortsDirMSG+0x3c>)
 800cec2:	4e0c      	ldr	r6, [pc, #48]	; (800cef4 <ReadPortsDirMSG+0x40>)
 800cec4:	e002      	b.n	800cecc <ReadPortsDirMSG+0x18>
 800cec6:	0099      	lsls	r1, r3, #2
 800cec8:	3904      	subs	r1, #4
 800ceca:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cecc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cece:	b2dc      	uxtb	r4, r3
 800ced0:	42a9      	cmp	r1, r5
 800ced2:	d102      	bne.n	800ceda <ReadPortsDirMSG+0x26>
			messageParams[temp++] = p;
 800ced4:	1c51      	adds	r1, r2, #1
 800ced6:	54bc      	strb	r4, [r7, r2]
 800ced8:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800ceda:	3301      	adds	r3, #1
 800cedc:	2b07      	cmp	r3, #7
 800cede:	d1f2      	bne.n	800cec6 <ReadPortsDirMSG+0x12>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800cee0:	2114      	movs	r1, #20
 800cee2:	f7fb f93f 	bl	8008164 <SendMessageToModule>
	return result;
}
 800cee6:	2000      	movs	r0, #0
 800cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceea:	46c0      	nop			; (mov r8, r8)
 800ceec:	20006f74 	.word	0x20006f74
 800cef0:	20000b3c 	.word	0x20000b3c
 800cef4:	08017310 	.word	0x08017310

0800cef8 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cefa:	46c6      	mov	lr, r8
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cefc:	2580      	movs	r5, #128	; 0x80
 800cefe:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <UpdateMyPortsDir+0x50>)
{
 800cf00:	b500      	push	{lr}
 800cf02:	2400      	movs	r4, #0
 800cf04:	4811      	ldr	r0, [pc, #68]	; (800cf4c <UpdateMyPortsDir+0x54>)
 800cf06:	4f12      	ldr	r7, [pc, #72]	; (800cf50 <UpdateMyPortsDir+0x58>)
 800cf08:	4e12      	ldr	r6, [pc, #72]	; (800cf54 <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cf0a:	022d      	lsls	r5, r5, #8
 800cf0c:	4698      	mov	r8, r3
 800cf0e:	e009      	b.n	800cf24 <UpdateMyPortsDir+0x2c>
	if (huart != NULL) {
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d001      	beq.n	800cf18 <UpdateMyPortsDir+0x20>
 800cf14:	f7ff fd40 	bl	800c998 <SwapUartPins.part.0>
 800cf18:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800cf1a:	2c06      	cmp	r4, #6
 800cf1c:	d010      	beq.n	800cf40 <UpdateMyPortsDir+0x48>
 800cf1e:	4642      	mov	r2, r8
 800cf20:	00a3      	lsls	r3, r4, #2
 800cf22:	5898      	ldr	r0, [r3, r2]
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cf24:	002a      	movs	r2, r5
 800cf26:	4122      	asrs	r2, r4
 800cf28:	7833      	ldrb	r3, [r6, #0]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	5afb      	ldrh	r3, [r7, r3]
 800cf30:	421a      	tst	r2, r3
 800cf32:	d1ed      	bne.n	800cf10 <UpdateMyPortsDir+0x18>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800cf34:	2100      	movs	r1, #0
 800cf36:	3401      	adds	r4, #1
 800cf38:	f7ff ff68 	bl	800ce0c <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800cf3c:	2c06      	cmp	r4, #6
 800cf3e:	d1ee      	bne.n	800cf1e <UpdateMyPortsDir+0x26>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800cf40:	2000      	movs	r0, #0
 800cf42:	bc04      	pop	{r2}
 800cf44:	4690      	mov	r8, r2
 800cf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf48:	08017310 	.word	0x08017310
 800cf4c:	20006f74 	.word	0x20006f74
 800cf50:	2000719c 	.word	0x2000719c
 800cf54:	20000a98 	.word	0x20000a98

0800cf58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800cf58:	4816      	ldr	r0, [pc, #88]	; (800cfb4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800cf5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800cf5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800cf5e:	e003      	b.n	800cf68 <LoopCopyDataInit>

0800cf60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800cf60:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800cf62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800cf64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800cf66:	3104      	adds	r1, #4

0800cf68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800cf68:	4814      	ldr	r0, [pc, #80]	; (800cfbc <LoopForever+0xc>)
  ldr r3, =_edata
 800cf6a:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <LoopForever+0x10>)
  adds r2, r0, r1
 800cf6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800cf6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800cf70:	d3f6      	bcc.n	800cf60 <CopyDataInit>
  ldr r2, =_sbss
 800cf72:	4a14      	ldr	r2, [pc, #80]	; (800cfc4 <LoopForever+0x14>)
  b LoopFillZerobss
 800cf74:	e002      	b.n	800cf7c <LoopFillZerobss>

0800cf76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800cf76:	2300      	movs	r3, #0
  str  r3, [r2]
 800cf78:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cf7a:	3204      	adds	r2, #4

0800cf7c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800cf7c:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <LoopForever+0x18>)
  cmp r2, r3
 800cf7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800cf80:	d3f9      	bcc.n	800cf76 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800cf82:	4812      	ldr	r0, [pc, #72]	; (800cfcc <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800cf84:	4912      	ldr	r1, [pc, #72]	; (800cfd0 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800cf86:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800cf88:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800cf8a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800cf8c:	d005      	beq.n	800cf9a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800cf8e:	f000 f82b 	bl	800cfe8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800cf92:	f005 f875 	bl	8012080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800cf96:	f005 f825 	bl	8011fe4 <main>

0800cf9a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800cf9a:	480e      	ldr	r0, [pc, #56]	; (800cfd4 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800cf9c:	490e      	ldr	r1, [pc, #56]	; (800cfd8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800cf9e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800cfa0:	480e      	ldr	r0, [pc, #56]	; (800cfdc <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800cfa2:	490d      	ldr	r1, [pc, #52]	; (800cfd8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800cfa4:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800cfa6:	480e      	ldr	r0, [pc, #56]	; (800cfe0 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800cfa8:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800cfaa:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800cfac:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800cfae:	4700      	bx	r0

0800cfb0 <LoopForever>:


LoopForever:
    b LoopForever
 800cfb0:	e7fe      	b.n	800cfb0 <LoopForever>
 800cfb2:	0000      	.short	0x0000
  ldr   r0, =_estack
 800cfb4:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800cfb8:	08019ec8 	.word	0x08019ec8
  ldr r0, =_sdata
 800cfbc:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800cfc0:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800cfc4:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800cfc8:	20007240 	.word	0x20007240
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800cfcc:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800cfd0:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800cfd4:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800cfd8:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800cfdc:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800cfe0:	1fffd800 	.word	0x1fffd800

0800cfe4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800cfe4:	e7fe      	b.n	800cfe4 <ADC1_COMP_IRQHandler>
	...

0800cfe8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cfe8:	2101      	movs	r1, #1
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cfec:	4811      	ldr	r0, [pc, #68]	; (800d034 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	430a      	orrs	r2, r1
 800cff2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	4002      	ands	r2, r0
 800cff8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	480e      	ldr	r0, [pc, #56]	; (800d038 <SystemInit+0x50>)
 800cffe:	4002      	ands	r2, r0
 800d000:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	480d      	ldr	r0, [pc, #52]	; (800d03c <SystemInit+0x54>)
 800d006:	4002      	ands	r2, r0
 800d008:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	480c      	ldr	r0, [pc, #48]	; (800d040 <SystemInit+0x58>)
 800d00e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d010:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d012:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d016:	4382      	bics	r2, r0
 800d018:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d01a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d01c:	4809      	ldr	r0, [pc, #36]	; (800d044 <SystemInit+0x5c>)
 800d01e:	4002      	ands	r2, r0
 800d020:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d024:	438a      	bics	r2, r1
 800d026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d028:	2200      	movs	r2, #0
 800d02a:	609a      	str	r2, [r3, #8]

}
 800d02c:	4770      	bx	lr
 800d02e:	46c0      	nop			; (mov r8, r8)
 800d030:	40021000 	.word	0x40021000
 800d034:	08ffb80c 	.word	0x08ffb80c
 800d038:	fef6ffff 	.word	0xfef6ffff
 800d03c:	fffbffff 	.word	0xfffbffff
 800d040:	ffc0ffff 	.word	0xffc0ffff
 800d044:	fff0feac 	.word	0xfff0feac

0800d048 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d048:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d04a:	f000 fef9 	bl	800de40 <vTaskStartScheduler>
  
  return osOK;
}
 800d04e:	2000      	movs	r0, #0
 800d050:	bd10      	pop	{r4, pc}
 800d052:	46c0      	nop			; (mov r8, r8)

0800d054 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d054:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d056:	2800      	cmp	r0, #0
 800d058:	d100      	bne.n	800d05c <osDelay+0x8>
 800d05a:	3001      	adds	r0, #1
 800d05c:	f001 f814 	bl	800e088 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d060:	2000      	movs	r0, #0
 800d062:	bd10      	pop	{r4, pc}

0800d064 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d064:	2300      	movs	r3, #0
{
 800d066:	b500      	push	{lr}
 800d068:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d06a:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d06c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00a      	beq.n	800d08a <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d074:	a901      	add	r1, sp, #4
 800d076:	f000 fb95 	bl	800d7a4 <xQueueGiveFromISR>
 800d07a:	2801      	cmp	r0, #1
 800d07c:	d10c      	bne.n	800d098 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <osMutexRelease+0x38>
  osStatus result = osOK;
 800d084:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d086:	b003      	add	sp, #12
 800d088:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d08a:	2300      	movs	r3, #0
 800d08c:	2200      	movs	r2, #0
 800d08e:	2100      	movs	r1, #0
 800d090:	f000 fad4 	bl	800d63c <xQueueGenericSend>
 800d094:	2801      	cmp	r0, #1
 800d096:	d0f5      	beq.n	800d084 <osMutexRelease+0x20>
    result = osErrorOS;
 800d098:	20ff      	movs	r0, #255	; 0xff
 800d09a:	e7f4      	b.n	800d086 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d09c:	2280      	movs	r2, #128	; 0x80
 800d09e:	4b02      	ldr	r3, [pc, #8]	; (800d0a8 <osMutexRelease+0x44>)
 800d0a0:	0552      	lsls	r2, r2, #21
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	e7ee      	b.n	800d084 <osMutexRelease+0x20>
 800d0a6:	46c0      	nop			; (mov r8, r8)
 800d0a8:	e000ed04 	.word	0xe000ed04

0800d0ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d0b0:	2901      	cmp	r1, #1
 800d0b2:	d005      	beq.n	800d0c0 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	f000 fab7 	bl	800d628 <xQueueCreateCountingSemaphore>
 800d0ba:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d0bc:	0020      	movs	r0, r4
 800d0be:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	f000 fa8e 	bl	800d5e4 <xQueueGenericCreate>
 800d0c8:	1e04      	subs	r4, r0, #0
 800d0ca:	d0f7      	beq.n	800d0bc <osSemaphoreCreate+0x10>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	f000 fab3 	bl	800d63c <xQueueGenericSend>
 800d0d6:	e7f1      	b.n	800d0bc <osSemaphoreCreate+0x10>

0800d0d8 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d0d8:	2300      	movs	r3, #0
{
 800d0da:	b500      	push	{lr}
 800d0dc:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d0de:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d01e      	beq.n	800d122 <osSemaphoreWait+0x4a>
 800d0e4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d0ec:	aa01      	add	r2, sp, #4
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	f000 fc1e 	bl	800d930 <xQueueReceiveFromISR>
 800d0f4:	2801      	cmp	r0, #1
 800d0f6:	d10c      	bne.n	800d112 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10b      	bne.n	800d116 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d0fe:	2000      	movs	r0, #0
}
 800d100:	b003      	add	sp, #12
 800d102:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d104:	000a      	movs	r2, r1
 800d106:	2300      	movs	r3, #0
 800d108:	2100      	movs	r1, #0
 800d10a:	f000 fb75 	bl	800d7f8 <xQueueGenericReceive>
 800d10e:	2801      	cmp	r0, #1
 800d110:	d0f5      	beq.n	800d0fe <osSemaphoreWait+0x26>
      return osErrorOS;
 800d112:	20ff      	movs	r0, #255	; 0xff
 800d114:	e7f4      	b.n	800d100 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d116:	2280      	movs	r2, #128	; 0x80
 800d118:	4b03      	ldr	r3, [pc, #12]	; (800d128 <osSemaphoreWait+0x50>)
 800d11a:	0552      	lsls	r2, r2, #21
 800d11c:	601a      	str	r2, [r3, #0]
  return osOK;
 800d11e:	2000      	movs	r0, #0
 800d120:	e7ee      	b.n	800d100 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d122:	2080      	movs	r0, #128	; 0x80
 800d124:	e7ec      	b.n	800d100 <osSemaphoreWait+0x28>
 800d126:	46c0      	nop			; (mov r8, r8)
 800d128:	e000ed04 	.word	0xe000ed04

0800d12c <osSemaphoreRelease>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	f7ff ff99 	bl	800d064 <osMutexRelease>
 800d132:	bd10      	pop	{r4, pc}

0800d134 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d134:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d136:	f001 f919 	bl	800e36c <xTaskGetSchedulerState>
 800d13a:	2801      	cmp	r0, #1
 800d13c:	d001      	beq.n	800d142 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d13e:	f001 fd27 	bl	800eb90 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d142:	bd10      	pop	{r4, pc}

0800d144 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d148:	2008      	movs	r0, #8
 800d14a:	f001 fd59 	bl	800ec00 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800d14e:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d150:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800d152:	d00a      	beq.n	800d16a <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800d154:	f001 fcda 	bl	800eb0c <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d158:	4b05      	ldr	r3, [pc, #20]	; (800d170 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800d15a:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d15c:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d15e:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d160:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d162:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d164:	f001 fcde 	bl	800eb24 <vPortExitCritical>

		xReturn = pdPASS;
 800d168:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800d16a:	0028      	movs	r0, r5
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	200000b8 	.word	0x200000b8

0800d174 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	4657      	mov	r7, sl
 800d178:	46de      	mov	lr, fp
 800d17a:	464e      	mov	r6, r9
 800d17c:	4645      	mov	r5, r8
 800d17e:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d180:	4f34      	ldr	r7, [pc, #208]	; (800d254 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d182:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d184:	683b      	ldr	r3, [r7, #0]
{
 800d186:	468a      	mov	sl, r1
 800d188:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00e      	beq.n	800d1ac <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	0032      	movs	r2, r6
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	4659      	mov	r1, fp
 800d196:	4650      	mov	r0, sl
 800d198:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d100      	bne.n	800d1a0 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d19e:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d1a0:	bc3c      	pop	{r2, r3, r4, r5}
 800d1a2:	4690      	mov	r8, r2
 800d1a4:	4699      	mov	r9, r3
 800d1a6:	46a2      	mov	sl, r4
 800d1a8:	46ab      	mov	fp, r5
 800d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d1ac:	3320      	adds	r3, #32
 800d1ae:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d1b0:	4c29      	ldr	r4, [pc, #164]	; (800d258 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d1b2:	3404      	adds	r4, #4
 800d1b4:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	681d      	ldr	r5, [r3, #0]
 800d1ba:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d1bc:	0028      	movs	r0, r5
 800d1be:	f7f2 ffab 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d1c2:	464a      	mov	r2, r9
 800d1c4:	5c33      	ldrb	r3, [r6, r0]
 800d1c6:	4393      	bics	r3, r2
 800d1c8:	d106      	bne.n	800d1d8 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d1ca:	0002      	movs	r2, r0
 800d1cc:	0029      	movs	r1, r5
 800d1ce:	0030      	movs	r0, r6
 800d1d0:	f005 fc20 	bl	8012a14 <strncmp>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d00a      	beq.n	800d1ee <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d1d8:	6864      	ldr	r4, [r4, #4]
 800d1da:	603c      	str	r4, [r7, #0]
 800d1dc:	2c00      	cmp	r4, #0
 800d1de:	d1ea      	bne.n	800d1b6 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d1e0:	465a      	mov	r2, fp
 800d1e2:	491e      	ldr	r1, [pc, #120]	; (800d25c <FreeRTOS_CLIProcessCommand+0xe8>)
 800d1e4:	4650      	mov	r0, sl
 800d1e6:	f005 fc26 	bl	8012a36 <strncpy>
		xReturn = pdFALSE;
 800d1ea:	2000      	movs	r0, #0
	return xReturn;
 800d1ec:	e7d8      	b.n	800d1a0 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d1ee:	4643      	mov	r3, r8
 800d1f0:	250c      	movs	r5, #12
 800d1f2:	575d      	ldrsb	r5, [r3, r5]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2d00      	cmp	r5, #0
 800d1f8:	db26      	blt.n	800d248 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	56b2      	ldrsb	r2, [r6, r2]
 800d1fe:	2a00      	cmp	r2, #0
 800d200:	d025      	beq.n	800d24e <FreeRTOS_CLIProcessCommand+0xda>
 800d202:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d204:	2400      	movs	r4, #0
 800d206:	e005      	b.n	800d214 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d208:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d20a:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d20c:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d20e:	568a      	ldrsb	r2, [r1, r2]
 800d210:	2a00      	cmp	r2, #0
 800d212:	d007      	beq.n	800d224 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d214:	2a20      	cmp	r2, #32
 800d216:	d1f7      	bne.n	800d208 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d218:	2801      	cmp	r0, #1
 800d21a:	d0f6      	beq.n	800d20a <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d21c:	3401      	adds	r4, #1
 800d21e:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d220:	2001      	movs	r0, #1
 800d222:	e7f2      	b.n	800d20a <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d224:	2801      	cmp	r0, #1
 800d226:	d00c      	beq.n	800d242 <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d228:	42a5      	cmp	r5, r4
 800d22a:	d00d      	beq.n	800d248 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d0d7      	beq.n	800d1e0 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d230:	465a      	mov	r2, fp
 800d232:	490b      	ldr	r1, [pc, #44]	; (800d260 <FreeRTOS_CLIProcessCommand+0xec>)
 800d234:	4650      	mov	r0, sl
 800d236:	f005 fbfe 	bl	8012a36 <strncpy>
		pxCommand = NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	2000      	movs	r0, #0
 800d23e:	603b      	str	r3, [r7, #0]
 800d240:	e7ae      	b.n	800d1a0 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d242:	3c01      	subs	r4, #1
 800d244:	b264      	sxtb	r4, r4
 800d246:	e7ef      	b.n	800d228 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1a0      	bne.n	800d18e <FreeRTOS_CLIProcessCommand+0x1a>
 800d24c:	e7c8      	b.n	800d1e0 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d24e:	2400      	movs	r4, #0
 800d250:	e7ea      	b.n	800d228 <FreeRTOS_CLIProcessCommand+0xb4>
 800d252:	46c0      	nop			; (mov r8, r8)
 800d254:	2000288c 	.word	0x2000288c
 800d258:	200000b8 	.word	0x200000b8
 800d25c:	08019ad0 	.word	0x08019ad0
 800d260:	08019a78 	.word	0x08019a78

0800d264 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d264:	4800      	ldr	r0, [pc, #0]	; (800d268 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d266:	4770      	bx	lr
 800d268:	2000289c 	.word	0x2000289c

0800d26c <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d26c:	2300      	movs	r3, #0
{
 800d26e:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d270:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d272:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d274:	2900      	cmp	r1, #0
 800d276:	d021      	beq.n	800d2bc <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d278:	2300      	movs	r3, #0
 800d27a:	56c3      	ldrsb	r3, [r0, r3]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d105      	bne.n	800d28c <FreeRTOS_CLIGetParameter+0x20>
 800d280:	e01c      	b.n	800d2bc <FreeRTOS_CLIGetParameter+0x50>
 800d282:	2300      	movs	r3, #0
			pcCommandString++;
 800d284:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d286:	56c3      	ldrsb	r3, [r0, r3]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d017      	beq.n	800d2bc <FreeRTOS_CLIGetParameter+0x50>
 800d28c:	2b20      	cmp	r3, #32
 800d28e:	d1f8      	bne.n	800d282 <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d290:	2300      	movs	r3, #0
			pcCommandString++;
 800d292:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d294:	56c3      	ldrsb	r3, [r0, r3]
 800d296:	2b20      	cmp	r3, #32
 800d298:	d0fa      	beq.n	800d290 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00e      	beq.n	800d2bc <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d29e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d2a0:	42a1      	cmp	r1, r4
 800d2a2:	d1e9      	bne.n	800d278 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d2a4:	2120      	movs	r1, #32
 800d2a6:	7803      	ldrb	r3, [r0, #0]
 800d2a8:	438b      	bics	r3, r1
 800d2aa:	d007      	beq.n	800d2bc <FreeRTOS_CLIGetParameter+0x50>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d2b4:	5cc1      	ldrb	r1, [r0, r3]
 800d2b6:	43a1      	bics	r1, r4
 800d2b8:	d1fa      	bne.n	800d2b0 <FreeRTOS_CLIGetParameter+0x44>
 800d2ba:	e000      	b.n	800d2be <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d2bc:	2000      	movs	r0, #0
}
 800d2be:	bd10      	pop	{r4, pc}

0800d2c0 <prvHelpCommand>:
{
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	46ce      	mov	lr, r9
 800d2c4:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d2c6:	2300      	movs	r3, #0
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	0004      	movs	r4, r0
 800d2ce:	000d      	movs	r5, r1
 800d2d0:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d2d6:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d2d8:	f7ff ffc8 	bl	800d26c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d024      	beq.n	800d32a <prvHelpCommand+0x6a>
 800d2e0:	2206      	movs	r2, #6
 800d2e2:	4931      	ldr	r1, [pc, #196]	; (800d3a8 <prvHelpCommand+0xe8>)
 800d2e4:	f005 fb96 	bl	8012a14 <strncmp>
 800d2e8:	1e07      	subs	r7, r0, #0
 800d2ea:	d118      	bne.n	800d31e <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d2ec:	4b2f      	ldr	r3, [pc, #188]	; (800d3ac <prvHelpCommand+0xec>)
 800d2ee:	4698      	mov	r8, r3
 800d2f0:	791b      	ldrb	r3, [r3, #4]
 800d2f2:	2b07      	cmp	r3, #7
 800d2f4:	d047      	beq.n	800d386 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	b2d2      	uxtb	r2, r2
 800d2fa:	4691      	mov	r9, r2
 800d2fc:	4642      	mov	r2, r8
 800d2fe:	4649      	mov	r1, r9
 800d300:	7111      	strb	r1, [r2, #4]
 800d302:	4a2b      	ldr	r2, [pc, #172]	; (800d3b0 <prvHelpCommand+0xf0>)
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	5899      	ldr	r1, [r3, r2]
 800d308:	0020      	movs	r0, r4
 800d30a:	002a      	movs	r2, r5
 800d30c:	f005 fb93 	bl	8012a36 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d310:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d312:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d314:	2b07      	cmp	r3, #7
 800d316:	d102      	bne.n	800d31e <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d318:	4643      	mov	r3, r8
 800d31a:	2600      	movs	r6, #0
 800d31c:	711f      	strb	r7, [r3, #4]
}
 800d31e:	0030      	movs	r0, r6
 800d320:	b003      	add	sp, #12
 800d322:	bc0c      	pop	{r2, r3}
 800d324:	4690      	mov	r8, r2
 800d326:	4699      	mov	r9, r3
 800d328:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d32a:	4f20      	ldr	r7, [pc, #128]	; (800d3ac <prvHelpCommand+0xec>)
 800d32c:	68be      	ldr	r6, [r7, #8]
 800d32e:	2e00      	cmp	r6, #0
 800d330:	d020      	beq.n	800d374 <prvHelpCommand+0xb4>
 800d332:	7b3b      	ldrb	r3, [r7, #12]
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	b2d2      	uxtb	r2, r2
 800d338:	4690      	mov	r8, r2
 800d33a:	6832      	ldr	r2, [r6, #0]
 800d33c:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d33e:	4a1d      	ldr	r2, [pc, #116]	; (800d3b4 <prvHelpCommand+0xf4>)
 800d340:	7812      	ldrb	r2, [r2, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d22a      	bcs.n	800d39c <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d346:	002a      	movs	r2, r5
 800d348:	0020      	movs	r0, r4
 800d34a:	3a08      	subs	r2, #8
 800d34c:	3008      	adds	r0, #8
 800d34e:	f005 fb72 	bl	8012a36 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d352:	1c60      	adds	r0, r4, #1
 800d354:	4918      	ldr	r1, [pc, #96]	; (800d3b8 <prvHelpCommand+0xf8>)
 800d356:	f005 fb55 	bl	8012a04 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d35a:	2328      	movs	r3, #40	; 0x28
 800d35c:	7023      	strb	r3, [r4, #0]
 800d35e:	3301      	adds	r3, #1
 800d360:	71a3      	strb	r3, [r4, #6]
 800d362:	3b09      	subs	r3, #9
 800d364:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d366:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d368:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d36a:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d36c:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d36e:	1e73      	subs	r3, r6, #1
 800d370:	419e      	sbcs	r6, r3
 800d372:	e7d4      	b.n	800d31e <prvHelpCommand+0x5e>
			counter = 1;
 800d374:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d376:	4e11      	ldr	r6, [pc, #68]	; (800d3bc <prvHelpCommand+0xfc>)
			counter = 1;
 800d378:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d37a:	3604      	adds	r6, #4
			counter = 1;
 800d37c:	3301      	adds	r3, #1
 800d37e:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d380:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d382:	3b01      	subs	r3, #1
 800d384:	e7d9      	b.n	800d33a <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d386:	4642      	mov	r2, r8
 800d388:	3b06      	subs	r3, #6
 800d38a:	7113      	strb	r3, [r2, #4]
 800d38c:	4b08      	ldr	r3, [pc, #32]	; (800d3b0 <prvHelpCommand+0xf0>)
 800d38e:	002a      	movs	r2, r5
 800d390:	6819      	ldr	r1, [r3, #0]
 800d392:	0020      	movs	r0, r4
 800d394:	f005 fb4f 	bl	8012a36 <strncpy>
			xReturn = pdTRUE;
 800d398:	2601      	movs	r6, #1
 800d39a:	e7c0      	b.n	800d31e <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d39c:	002a      	movs	r2, r5
 800d39e:	0020      	movs	r0, r4
 800d3a0:	f005 fb49 	bl	8012a36 <strncpy>
 800d3a4:	e7df      	b.n	800d366 <prvHelpCommand+0xa6>
 800d3a6:	46c0      	nop			; (mov r8, r8)
 800d3a8:	080185d4 	.word	0x080185d4
 800d3ac:	2000288c 	.word	0x2000288c
 800d3b0:	20000034 	.word	0x20000034
 800d3b4:	20006bfc 	.word	0x20006bfc
 800d3b8:	08016e4e 	.word	0x08016e4e
 800d3bc:	200000b8 	.word	0x200000b8

0800d3c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c0:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3c2:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c4:	3308      	adds	r3, #8
 800d3c6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3c8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3ca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3cc:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3ce:	4252      	negs	r2, r2
 800d3d0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3d2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3d4:	4770      	bx	lr
 800d3d6:	46c0      	nop			; (mov r8, r8)

0800d3d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3dc:	4770      	bx	lr
 800d3de:	46c0      	nop			; (mov r8, r8)

0800d3e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3e0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3e2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d3e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3e8:	689a      	ldr	r2, [r3, #8]
 800d3ea:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d3ec:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d3ee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d3f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	6003      	str	r3, [r0, #0]
}
 800d3f6:	4770      	bx	lr

0800d3f8 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3f8:	0002      	movs	r2, r0
{
 800d3fa:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d3fc:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3fe:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d400:	1c63      	adds	r3, r4, #1
 800d402:	d101      	bne.n	800d408 <vListInsert+0x10>
 800d404:	e00d      	b.n	800d422 <vListInsert+0x2a>
 800d406:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d408:	6853      	ldr	r3, [r2, #4]
 800d40a:	681d      	ldr	r5, [r3, #0]
 800d40c:	42a5      	cmp	r5, r4
 800d40e:	d9fa      	bls.n	800d406 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d410:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d412:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d414:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800d416:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800d418:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800d41a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d41c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d41e:	6003      	str	r3, [r0, #0]
}
 800d420:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d422:	6902      	ldr	r2, [r0, #16]
 800d424:	6853      	ldr	r3, [r2, #4]
 800d426:	e7f3      	b.n	800d410 <vListInsert+0x18>

0800d428 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d428:	6842      	ldr	r2, [r0, #4]
 800d42a:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d42c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d42e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d430:	6881      	ldr	r1, [r0, #8]
 800d432:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	4282      	cmp	r2, r0
 800d438:	d100      	bne.n	800d43c <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d43a:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d43c:	2200      	movs	r2, #0
 800d43e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	1e50      	subs	r0, r2, #1
 800d444:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d446:	4770      	bx	lr

0800d448 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d44c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d44e:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d450:	2a00      	cmp	r2, #0
 800d452:	d107      	bne.n	800d464 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d454:	6805      	ldr	r5, [r0, #0]
 800d456:	2d00      	cmp	r5, #0
 800d458:	d02d      	beq.n	800d4b6 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800d45a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d45c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d45e:	3301      	adds	r3, #1
 800d460:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d462:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d464:	2d00      	cmp	r5, #0
 800d466:	d10e      	bne.n	800d486 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d468:	6880      	ldr	r0, [r0, #8]
 800d46a:	f005 f88c 	bl	8012586 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d46e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d470:	68a3      	ldr	r3, [r4, #8]
 800d472:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d474:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d476:	4463      	add	r3, ip
 800d478:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d3ed      	bcc.n	800d45a <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d47e:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800d480:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d482:	60a3      	str	r3, [r4, #8]
 800d484:	e7ea      	b.n	800d45c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d486:	68c0      	ldr	r0, [r0, #12]
 800d488:	f005 f87d 	bl	8012586 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d48c:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d48e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d490:	425a      	negs	r2, r3
 800d492:	68e3      	ldr	r3, [r4, #12]
 800d494:	189b      	adds	r3, r3, r2
 800d496:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d498:	428b      	cmp	r3, r1
 800d49a:	d203      	bcs.n	800d4a4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d49c:	6863      	ldr	r3, [r4, #4]
 800d49e:	469c      	mov	ip, r3
 800d4a0:	4462      	add	r2, ip
 800d4a2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d4a4:	2d02      	cmp	r5, #2
 800d4a6:	d1d8      	bne.n	800d45a <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0d5      	beq.n	800d45a <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800d4ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d4b4:	e7d1      	b.n	800d45a <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d4b6:	6840      	ldr	r0, [r0, #4]
 800d4b8:	f000 ff98 	bl	800e3ec <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d4bc:	6065      	str	r5, [r4, #4]
 800d4be:	e7cd      	b.n	800d45c <prvCopyDataToQueue+0x14>

0800d4c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d4c2:	b510      	push	{r4, lr}
 800d4c4:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4c6:	2a00      	cmp	r2, #0
 800d4c8:	d008      	beq.n	800d4dc <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d4ca:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4cc:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d4ce:	1889      	adds	r1, r1, r2
 800d4d0:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4d2:	42a1      	cmp	r1, r4
 800d4d4:	d203      	bcs.n	800d4de <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	f005 f855 	bl	8012586 <memcpy>
	}
}
 800d4dc:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d4de:	6801      	ldr	r1, [r0, #0]
 800d4e0:	60c1      	str	r1, [r0, #12]
 800d4e2:	e7f8      	b.n	800d4d6 <prvCopyDataFromQueue+0x16>

0800d4e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4e8:	f001 fb10 	bl	800eb0c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d4ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	dd1b      	ble.n	800d52a <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d018      	beq.n	800d52a <prvUnlockQueue+0x46>
 800d4f8:	0025      	movs	r5, r4
 800d4fa:	3524      	adds	r5, #36	; 0x24
 800d4fc:	e008      	b.n	800d510 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800d4fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d500:	3b01      	subs	r3, #1
 800d502:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d504:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d506:	2b00      	cmp	r3, #0
 800d508:	dd0f      	ble.n	800d52a <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00c      	beq.n	800d52a <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d510:	0028      	movs	r0, r5
 800d512:	f000 feb7 	bl	800e284 <xTaskRemoveFromEventList>
 800d516:	2800      	cmp	r0, #0
 800d518:	d0f1      	beq.n	800d4fe <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800d51a:	f000 ff21 	bl	800e360 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800d51e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d520:	3b01      	subs	r3, #1
 800d522:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d524:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d526:	2b00      	cmp	r3, #0
 800d528:	dcef      	bgt.n	800d50a <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800d52a:	2301      	movs	r3, #1
 800d52c:	425b      	negs	r3, r3
 800d52e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800d530:	f001 faf8 	bl	800eb24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d534:	f001 faea 	bl	800eb0c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d538:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	dd1b      	ble.n	800d576 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d018      	beq.n	800d576 <prvUnlockQueue+0x92>
 800d544:	0025      	movs	r5, r4
 800d546:	3510      	adds	r5, #16
 800d548:	e008      	b.n	800d55c <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800d54a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d54c:	3b01      	subs	r3, #1
 800d54e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d550:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d552:	2b00      	cmp	r3, #0
 800d554:	dd0f      	ble.n	800d576 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00c      	beq.n	800d576 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d55c:	0028      	movs	r0, r5
 800d55e:	f000 fe91 	bl	800e284 <xTaskRemoveFromEventList>
 800d562:	2800      	cmp	r0, #0
 800d564:	d0f1      	beq.n	800d54a <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d566:	f000 fefb 	bl	800e360 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800d56a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d56c:	3b01      	subs	r3, #1
 800d56e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d572:	2b00      	cmp	r3, #0
 800d574:	dcef      	bgt.n	800d556 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800d576:	2301      	movs	r3, #1
 800d578:	425b      	negs	r3, r3
 800d57a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d57c:	f001 fad2 	bl	800eb24 <vPortExitCritical>
}
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	46c0      	nop			; (mov r8, r8)

0800d584 <xQueueGenericReset>:
{
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	0004      	movs	r4, r0
 800d588:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800d58a:	f001 fabf 	bl	800eb0c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d58e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d592:	6822      	ldr	r2, [r4, #0]
 800d594:	434b      	muls	r3, r1
 800d596:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d598:	1a5b      	subs	r3, r3, r1
 800d59a:	18d3      	adds	r3, r2, r3
 800d59c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800d59e:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d5a0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5a2:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800d5a4:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5a6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5a8:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800d5aa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800d5ac:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	d10f      	bne.n	800d5d2 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d103      	bne.n	800d5c0 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800d5b8:	f001 fab4 	bl	800eb24 <vPortExitCritical>
}
 800d5bc:	2001      	movs	r0, #1
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d5c0:	0020      	movs	r0, r4
 800d5c2:	3010      	adds	r0, #16
 800d5c4:	f000 fe5e 	bl	800e284 <xTaskRemoveFromEventList>
 800d5c8:	2801      	cmp	r0, #1
 800d5ca:	d1f5      	bne.n	800d5b8 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800d5cc:	f001 fa92 	bl	800eaf4 <vPortYield>
 800d5d0:	e7f2      	b.n	800d5b8 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5d2:	0020      	movs	r0, r4
 800d5d4:	3010      	adds	r0, #16
 800d5d6:	f7ff fef3 	bl	800d3c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5da:	0020      	movs	r0, r4
 800d5dc:	3024      	adds	r0, #36	; 0x24
 800d5de:	f7ff feef 	bl	800d3c0 <vListInitialise>
 800d5e2:	e7e9      	b.n	800d5b8 <xQueueGenericReset+0x34>

0800d5e4 <xQueueGenericCreate>:
{
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	0006      	movs	r6, r0
 800d5e8:	000d      	movs	r5, r1
 800d5ea:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5ec:	2900      	cmp	r1, #0
 800d5ee:	d009      	beq.n	800d604 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5f0:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d5f2:	3055      	adds	r0, #85	; 0x55
 800d5f4:	f001 fb04 	bl	800ec00 <pvPortMalloc>
 800d5f8:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d5fa:	d013      	beq.n	800d624 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800d5fc:	0003      	movs	r3, r0
 800d5fe:	3354      	adds	r3, #84	; 0x54
 800d600:	6003      	str	r3, [r0, #0]
 800d602:	e005      	b.n	800d610 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d604:	2054      	movs	r0, #84	; 0x54
 800d606:	f001 fafb 	bl	800ec00 <pvPortMalloc>
 800d60a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d60c:	d00a      	beq.n	800d624 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d60e:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800d610:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800d612:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d614:	2101      	movs	r1, #1
 800d616:	0020      	movs	r0, r4
 800d618:	f7ff ffb4 	bl	800d584 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800d61c:	2350      	movs	r3, #80	; 0x50
 800d61e:	54e7      	strb	r7, [r4, r3]
}
 800d620:	0020      	movs	r0, r4
 800d622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800d624:	2400      	movs	r4, #0
 800d626:	e7fb      	b.n	800d620 <xQueueGenericCreate+0x3c>

0800d628 <xQueueCreateCountingSemaphore>:
	{
 800d628:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d62a:	2202      	movs	r2, #2
	{
 800d62c:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d62e:	2100      	movs	r1, #0
 800d630:	f7ff ffd8 	bl	800d5e4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d634:	2800      	cmp	r0, #0
 800d636:	d000      	beq.n	800d63a <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d638:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800d63a:	bd10      	pop	{r4, pc}

0800d63c <xQueueGenericSend>:
{
 800d63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d63e:	46c6      	mov	lr, r8
 800d640:	0004      	movs	r4, r0
 800d642:	b500      	push	{lr}
 800d644:	b084      	sub	sp, #16
 800d646:	9201      	str	r2, [sp, #4]
 800d648:	001e      	movs	r6, r3
 800d64a:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800d64c:	f001 fa5e 	bl	800eb0c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d652:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d654:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d656:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d658:	4293      	cmp	r3, r2
 800d65a:	d330      	bcc.n	800d6be <xQueueGenericSend+0x82>
 800d65c:	2e02      	cmp	r6, #2
 800d65e:	d02e      	beq.n	800d6be <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d660:	9b01      	ldr	r3, [sp, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d052      	beq.n	800d70c <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800d666:	2d00      	cmp	r5, #0
 800d668:	d03a      	beq.n	800d6e0 <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800d66a:	f001 fa5b 	bl	800eb24 <vPortExitCritical>
		vTaskSuspendAll();
 800d66e:	f000 fc0f 	bl	800de90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d672:	f001 fa4b 	bl	800eb0c <vPortEnterCritical>
 800d676:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d678:	3301      	adds	r3, #1
 800d67a:	d100      	bne.n	800d67e <xQueueGenericSend+0x42>
 800d67c:	6467      	str	r7, [r4, #68]	; 0x44
 800d67e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d680:	3301      	adds	r3, #1
 800d682:	d100      	bne.n	800d686 <xQueueGenericSend+0x4a>
 800d684:	64a7      	str	r7, [r4, #72]	; 0x48
 800d686:	f001 fa4d 	bl	800eb24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d68a:	a901      	add	r1, sp, #4
 800d68c:	a802      	add	r0, sp, #8
 800d68e:	f000 fe3b 	bl	800e308 <xTaskCheckForTimeOut>
 800d692:	2800      	cmp	r0, #0
 800d694:	d13e      	bne.n	800d714 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d696:	f001 fa39 	bl	800eb0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d69a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d69c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d022      	beq.n	800d6e8 <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d6a2:	f001 fa3f 	bl	800eb24 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d6a6:	0020      	movs	r0, r4
 800d6a8:	f7ff ff1c 	bl	800d4e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ac:	f000 fc8e 	bl	800dfcc <xTaskResumeAll>
 800d6b0:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800d6b2:	f001 fa2b 	bl	800eb0c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d2ce      	bcs.n	800d65c <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6be:	0032      	movs	r2, r6
 800d6c0:	4641      	mov	r1, r8
 800d6c2:	0020      	movs	r0, r4
 800d6c4:	f7ff fec0 	bl	800d448 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d129      	bne.n	800d722 <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d12d      	bne.n	800d72e <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800d6d2:	f001 fa27 	bl	800eb24 <vPortExitCritical>
				return pdPASS;
 800d6d6:	2001      	movs	r0, #1
}
 800d6d8:	b004      	add	sp, #16
 800d6da:	bc04      	pop	{r2}
 800d6dc:	4690      	mov	r8, r2
 800d6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800d6e0:	a802      	add	r0, sp, #8
 800d6e2:	f000 fe05 	bl	800e2f0 <vTaskSetTimeOutState>
 800d6e6:	e7c0      	b.n	800d66a <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800d6e8:	f001 fa1c 	bl	800eb24 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d6ec:	0020      	movs	r0, r4
 800d6ee:	9901      	ldr	r1, [sp, #4]
 800d6f0:	3010      	adds	r0, #16
 800d6f2:	f000 fd99 	bl	800e228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6f6:	0020      	movs	r0, r4
 800d6f8:	f7ff fef4 	bl	800d4e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6fc:	f000 fc66 	bl	800dfcc <xTaskResumeAll>
 800d700:	2800      	cmp	r0, #0
 800d702:	d1d5      	bne.n	800d6b0 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800d704:	f001 f9f6 	bl	800eaf4 <vPortYield>
 800d708:	2501      	movs	r5, #1
 800d70a:	e7d2      	b.n	800d6b2 <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800d70c:	f001 fa0a 	bl	800eb24 <vPortExitCritical>
					return errQUEUE_FULL;
 800d710:	2000      	movs	r0, #0
 800d712:	e7e1      	b.n	800d6d8 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800d714:	0020      	movs	r0, r4
 800d716:	f7ff fee5 	bl	800d4e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d71a:	f000 fc57 	bl	800dfcc <xTaskResumeAll>
			return errQUEUE_FULL;
 800d71e:	2000      	movs	r0, #0
 800d720:	e7da      	b.n	800d6d8 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800d722:	0020      	movs	r0, r4
 800d724:	3024      	adds	r0, #36	; 0x24
 800d726:	f000 fdad 	bl	800e284 <xTaskRemoveFromEventList>
 800d72a:	2801      	cmp	r0, #1
 800d72c:	d1d1      	bne.n	800d6d2 <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800d72e:	f001 f9e1 	bl	800eaf4 <vPortYield>
 800d732:	e7ce      	b.n	800d6d2 <xQueueGenericSend+0x96>

0800d734 <xQueueGenericSendFromISR>:
{
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	46ce      	mov	lr, r9
 800d738:	4647      	mov	r7, r8
 800d73a:	0004      	movs	r4, r0
 800d73c:	b580      	push	{r7, lr}
 800d73e:	4691      	mov	r9, r2
 800d740:	001d      	movs	r5, r3
 800d742:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d744:	f001 f9f8 	bl	800eb38 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d74a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d74c:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d74e:	4293      	cmp	r3, r2
 800d750:	d30a      	bcc.n	800d768 <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800d752:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d754:	2d02      	cmp	r5, #2
 800d756:	d007      	beq.n	800d768 <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d758:	0038      	movs	r0, r7
 800d75a:	f001 f9f3 	bl	800eb44 <vClearInterruptMaskFromISR>
}
 800d75e:	0030      	movs	r0, r6
 800d760:	bc0c      	pop	{r2, r3}
 800d762:	4690      	mov	r8, r2
 800d764:	4699      	mov	r9, r3
 800d766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d768:	002a      	movs	r2, r5
 800d76a:	4641      	mov	r1, r8
 800d76c:	0020      	movs	r0, r4
 800d76e:	f7ff fe6b 	bl	800d448 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d772:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d774:	3301      	adds	r3, #1
 800d776:	d004      	beq.n	800d782 <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800d778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d77a:	3301      	adds	r3, #1
 800d77c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d77e:	2601      	movs	r6, #1
 800d780:	e7ea      	b.n	800d758 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d784:	2b00      	cmp	r3, #0
 800d786:	d0fa      	beq.n	800d77e <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d788:	0020      	movs	r0, r4
 800d78a:	3024      	adds	r0, #36	; 0x24
 800d78c:	f000 fd7a 	bl	800e284 <xTaskRemoveFromEventList>
 800d790:	2800      	cmp	r0, #0
 800d792:	d0f4      	beq.n	800d77e <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800d794:	464b      	mov	r3, r9
 800d796:	2b00      	cmp	r3, #0
 800d798:	d0f1      	beq.n	800d77e <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d79a:	2301      	movs	r3, #1
 800d79c:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800d79e:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	e7d9      	b.n	800d758 <xQueueGenericSendFromISR+0x24>

0800d7a4 <xQueueGiveFromISR>:
{
 800d7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a6:	0004      	movs	r4, r0
 800d7a8:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7aa:	f001 f9c5 	bl	800eb38 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d7ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7b2:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800d7b4:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d209      	bcs.n	800d7ce <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800d7ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7bc:	3301      	adds	r3, #1
 800d7be:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d7c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	d008      	beq.n	800d7d8 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800d7c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d7cc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d7ce:	0030      	movs	r0, r6
 800d7d0:	f001 f9b8 	bl	800eb44 <vClearInterruptMaskFromISR>
}
 800d7d4:	0028      	movs	r0, r5
 800d7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d0f6      	beq.n	800d7cc <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7de:	0020      	movs	r0, r4
 800d7e0:	3024      	adds	r0, #36	; 0x24
 800d7e2:	f000 fd4f 	bl	800e284 <xTaskRemoveFromEventList>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d0f0      	beq.n	800d7cc <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800d7ea:	2f00      	cmp	r7, #0
 800d7ec:	d0ee      	beq.n	800d7cc <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7ee:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800d7f0:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	e7eb      	b.n	800d7ce <xQueueGiveFromISR+0x2a>
 800d7f6:	46c0      	nop			; (mov r8, r8)

0800d7f8 <xQueueGenericReceive>:
{
 800d7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7fa:	46c6      	mov	lr, r8
 800d7fc:	0004      	movs	r4, r0
 800d7fe:	b500      	push	{lr}
 800d800:	b084      	sub	sp, #16
 800d802:	4698      	mov	r8, r3
 800d804:	000f      	movs	r7, r1
 800d806:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800d808:	f001 f980 	bl	800eb0c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d80c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d148      	bne.n	800d8a4 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d812:	9b01      	ldr	r3, [sp, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d06a      	beq.n	800d8ee <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d818:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800d81a:	a802      	add	r0, sp, #8
 800d81c:	f000 fd68 	bl	800e2f0 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800d820:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d822:	3624      	adds	r6, #36	; 0x24
 800d824:	e017      	b.n	800d856 <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800d826:	f001 f97d 	bl	800eb24 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d056      	beq.n	800d8de <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d830:	9901      	ldr	r1, [sp, #4]
 800d832:	0030      	movs	r0, r6
 800d834:	f000 fcf8 	bl	800e228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d838:	0020      	movs	r0, r4
 800d83a:	f7ff fe53 	bl	800d4e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d83e:	f000 fbc5 	bl	800dfcc <xTaskResumeAll>
 800d842:	2800      	cmp	r0, #0
 800d844:	d048      	beq.n	800d8d8 <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800d846:	f001 f961 	bl	800eb0c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d84a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d129      	bne.n	800d8a4 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d04b      	beq.n	800d8ee <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800d856:	f001 f965 	bl	800eb24 <vPortExitCritical>
		vTaskSuspendAll();
 800d85a:	f000 fb19 	bl	800de90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d85e:	f001 f955 	bl	800eb0c <vPortEnterCritical>
 800d862:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d864:	3301      	adds	r3, #1
 800d866:	d100      	bne.n	800d86a <xQueueGenericReceive+0x72>
 800d868:	6465      	str	r5, [r4, #68]	; 0x44
 800d86a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d86c:	3301      	adds	r3, #1
 800d86e:	d100      	bne.n	800d872 <xQueueGenericReceive+0x7a>
 800d870:	64a5      	str	r5, [r4, #72]	; 0x48
 800d872:	f001 f957 	bl	800eb24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d876:	a901      	add	r1, sp, #4
 800d878:	a802      	add	r0, sp, #8
 800d87a:	f000 fd45 	bl	800e308 <xTaskCheckForTimeOut>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d13c      	bne.n	800d8fc <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800d882:	f001 f943 	bl	800eb0c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0cc      	beq.n	800d826 <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800d88c:	f001 f94a 	bl	800eb24 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d890:	0020      	movs	r0, r4
 800d892:	f7ff fe27 	bl	800d4e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d896:	f000 fb99 	bl	800dfcc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800d89a:	f001 f937 	bl	800eb0c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d89e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0d5      	beq.n	800d850 <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8a4:	0039      	movs	r1, r7
 800d8a6:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d8a8:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8aa:	f7ff fe09 	bl	800d4c0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d8ae:	4643      	mov	r3, r8
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d12a      	bne.n	800d90a <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800d8b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d033      	beq.n	800d928 <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d025      	beq.n	800d912 <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d8c6:	0020      	movs	r0, r4
 800d8c8:	3010      	adds	r0, #16
 800d8ca:	f000 fcdb 	bl	800e284 <xTaskRemoveFromEventList>
 800d8ce:	2801      	cmp	r0, #1
 800d8d0:	d11f      	bne.n	800d912 <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800d8d2:	f001 f90f 	bl	800eaf4 <vPortYield>
 800d8d6:	e01c      	b.n	800d912 <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800d8d8:	f001 f90c 	bl	800eaf4 <vPortYield>
 800d8dc:	e7b3      	b.n	800d846 <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800d8de:	f001 f915 	bl	800eb0c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d8e2:	6860      	ldr	r0, [r4, #4]
 800d8e4:	f000 fd4e 	bl	800e384 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d8e8:	f001 f91c 	bl	800eb24 <vPortExitCritical>
 800d8ec:	e7a0      	b.n	800d830 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800d8ee:	f001 f919 	bl	800eb24 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d8f2:	2000      	movs	r0, #0
}
 800d8f4:	b004      	add	sp, #16
 800d8f6:	bc04      	pop	{r2}
 800d8f8:	4690      	mov	r8, r2
 800d8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800d8fc:	0020      	movs	r0, r4
 800d8fe:	f7ff fdf1 	bl	800d4e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d902:	f000 fb63 	bl	800dfcc <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d906:	2000      	movs	r0, #0
 800d908:	e7f4      	b.n	800d8f4 <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d90c:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d103      	bne.n	800d91a <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800d912:	f001 f907 	bl	800eb24 <vPortExitCritical>
				return pdPASS;
 800d916:	2001      	movs	r0, #1
 800d918:	e7ec      	b.n	800d8f4 <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d91a:	0020      	movs	r0, r4
 800d91c:	3024      	adds	r0, #36	; 0x24
 800d91e:	f000 fcb1 	bl	800e284 <xTaskRemoveFromEventList>
 800d922:	2800      	cmp	r0, #0
 800d924:	d0f5      	beq.n	800d912 <xQueueGenericReceive+0x11a>
 800d926:	e7d4      	b.n	800d8d2 <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d928:	f000 fe40 	bl	800e5ac <pvTaskIncrementMutexHeldCount>
 800d92c:	6060      	str	r0, [r4, #4]
 800d92e:	e7c7      	b.n	800d8c0 <xQueueGenericReceive+0xc8>

0800d930 <xQueueReceiveFromISR>:
{
 800d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d932:	46c6      	mov	lr, r8
 800d934:	0004      	movs	r4, r0
 800d936:	b500      	push	{lr}
 800d938:	000f      	movs	r7, r1
 800d93a:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d93c:	f001 f8fc 	bl	800eb38 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d942:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800d944:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d94a:	0030      	movs	r0, r6
 800d94c:	f001 f8fa 	bl	800eb44 <vClearInterruptMaskFromISR>
}
 800d950:	0028      	movs	r0, r5
 800d952:	bc04      	pop	{r2}
 800d954:	4690      	mov	r8, r2
 800d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d958:	0039      	movs	r1, r7
 800d95a:	0020      	movs	r0, r4
 800d95c:	f7ff fdb0 	bl	800d4c0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d962:	3b01      	subs	r3, #1
 800d964:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d966:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d968:	3301      	adds	r3, #1
 800d96a:	d004      	beq.n	800d976 <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800d96c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d96e:	3301      	adds	r3, #1
 800d970:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d972:	2501      	movs	r5, #1
 800d974:	e7e9      	b.n	800d94a <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d976:	6923      	ldr	r3, [r4, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0fa      	beq.n	800d972 <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d97c:	0020      	movs	r0, r4
 800d97e:	3010      	adds	r0, #16
 800d980:	f000 fc80 	bl	800e284 <xTaskRemoveFromEventList>
 800d984:	2800      	cmp	r0, #0
 800d986:	d0f4      	beq.n	800d972 <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800d988:	4643      	mov	r3, r8
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0f1      	beq.n	800d972 <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d98e:	2301      	movs	r3, #1
 800d990:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800d992:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	e7d8      	b.n	800d94a <xQueueReceiveFromISR+0x1a>

0800d998 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d998:	2300      	movs	r3, #0
	{
 800d99a:	b570      	push	{r4, r5, r6, lr}
 800d99c:	4d06      	ldr	r5, [pc, #24]	; (800d9b8 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d99e:	00dc      	lsls	r4, r3, #3
 800d9a0:	192a      	adds	r2, r5, r4
 800d9a2:	6816      	ldr	r6, [r2, #0]
 800d9a4:	2e00      	cmp	r6, #0
 800d9a6:	d003      	beq.n	800d9b0 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	2b08      	cmp	r3, #8
 800d9ac:	d1f7      	bne.n	800d99e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9b0:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9b2:	6050      	str	r0, [r2, #4]
				break;
 800d9b4:	e7fb      	b.n	800d9ae <vQueueAddToRegistry+0x16>
 800d9b6:	46c0      	nop			; (mov r8, r8)
 800d9b8:	200071d0 	.word	0x200071d0

0800d9bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	0004      	movs	r4, r0
 800d9c0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9c2:	f001 f8a3 	bl	800eb0c <vPortEnterCritical>
 800d9c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	d101      	bne.n	800d9d0 <vQueueWaitForMessageRestricted+0x14>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	6463      	str	r3, [r4, #68]	; 0x44
 800d9d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	d101      	bne.n	800d9da <vQueueWaitForMessageRestricted+0x1e>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800d9da:	f001 f8a3 	bl	800eb24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d9de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d104      	bne.n	800d9ee <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9e4:	0020      	movs	r0, r4
 800d9e6:	0029      	movs	r1, r5
 800d9e8:	3024      	adds	r0, #36	; 0x24
 800d9ea:	f000 fc39 	bl	800e260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9ee:	0020      	movs	r0, r4
 800d9f0:	f7ff fd78 	bl	800d4e4 <prvUnlockQueue>
	}
 800d9f4:	bd70      	pop	{r4, r5, r6, pc}
 800d9f6:	46c0      	nop			; (mov r8, r8)

0800d9f8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d9fc:	f005 f802 	bl	8012a04 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800da00:	0020      	movs	r0, r4
 800da02:	f7f2 fb89 	bl	8000118 <strlen>
 800da06:	0003      	movs	r3, r0
 800da08:	280b      	cmp	r0, #11
 800da0a:	d808      	bhi.n	800da1e <prvWriteNameToBuffer+0x26>
 800da0c:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800da0e:	2320      	movs	r3, #32
 800da10:	1820      	adds	r0, r4, r0
 800da12:	320c      	adds	r2, #12
 800da14:	7003      	strb	r3, [r0, #0]
 800da16:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800da18:	4290      	cmp	r0, r2
 800da1a:	d1fb      	bne.n	800da14 <prvWriteNameToBuffer+0x1c>
 800da1c:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800da1e:	18e0      	adds	r0, r4, r3
 800da20:	2300      	movs	r3, #0
 800da22:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800da24:	bd10      	pop	{r4, pc}
 800da26:	46c0      	nop			; (mov r8, r8)

0800da28 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800da28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2a:	46d6      	mov	lr, sl
 800da2c:	464f      	mov	r7, r9
 800da2e:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800da30:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800da32:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800da34:	685f      	ldr	r7, [r3, #4]
 800da36:	2308      	movs	r3, #8
 800da38:	469c      	mov	ip, r3
 800da3a:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800da3c:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800da3e:	604f      	str	r7, [r1, #4]
 800da40:	4567      	cmp	r7, ip
 800da42:	d042      	beq.n	800daca <prvListTaskWithinSingleList.part.1+0xa2>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	0005      	movs	r5, r0
 800da48:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800da4a:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800da4c:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800da4e:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800da50:	687f      	ldr	r7, [r7, #4]
 800da52:	604f      	str	r7, [r1, #4]
 800da54:	45bc      	cmp	ip, r7
 800da56:	d035      	beq.n	800dac4 <prvListTaskWithinSingleList.part.1+0x9c>
 800da58:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800da5a:	0033      	movs	r3, r6
 800da5c:	3334      	adds	r3, #52	; 0x34
 800da5e:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800da60:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800da62:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800da64:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800da66:	4653      	mov	r3, sl
 800da68:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800da6a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800da6c:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800da6e:	4653      	mov	r3, sl
 800da70:	2b03      	cmp	r3, #3
 800da72:	d018      	beq.n	800daa6 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800da74:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800da76:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800da78:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800da7a:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800da7c:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800da7e:	7813      	ldrb	r3, [r2, #0]
 800da80:	2ba5      	cmp	r3, #165	; 0xa5
 800da82:	d11d      	bne.n	800dac0 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800da84:	2300      	movs	r3, #0
			ulCount++;
 800da86:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800da88:	5cd4      	ldrb	r4, [r2, r3]
 800da8a:	2ca5      	cmp	r4, #165	; 0xa5
 800da8c:	d0fb      	beq.n	800da86 <prvListTaskWithinSingleList.part.1+0x5e>
 800da8e:	089b      	lsrs	r3, r3, #2
 800da90:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800da92:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800da94:	3001      	adds	r0, #1
 800da96:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800da98:	45b0      	cmp	r8, r6
 800da9a:	d1d9      	bne.n	800da50 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800da9c:	bc1c      	pop	{r2, r3, r4}
 800da9e:	4690      	mov	r8, r2
 800daa0:	4699      	mov	r9, r3
 800daa2:	46a2      	mov	sl, r4
 800daa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800daa6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d0e3      	beq.n	800da74 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800daac:	464b      	mov	r3, r9
 800daae:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800dab0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800dab2:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800dab4:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800dab6:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800dab8:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800daba:	7813      	ldrb	r3, [r2, #0]
 800dabc:	2ba5      	cmp	r3, #165	; 0xa5
 800dabe:	d0e1      	beq.n	800da84 <prvListTaskWithinSingleList.part.1+0x5c>
 800dac0:	2300      	movs	r3, #0
 800dac2:	e7e6      	b.n	800da92 <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800dac4:	68cf      	ldr	r7, [r1, #12]
 800dac6:	604f      	str	r7, [r1, #4]
 800dac8:	e7c6      	b.n	800da58 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800daca:	68cf      	ldr	r7, [r1, #12]
 800dacc:	e7ba      	b.n	800da44 <prvListTaskWithinSingleList.part.1+0x1c>
 800dace:	46c0      	nop			; (mov r8, r8)

0800dad0 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dad0:	4b03      	ldr	r3, [pc, #12]	; (800dae0 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	4b02      	ldr	r3, [pc, #8]	; (800dae4 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800dadc:	601a      	str	r2, [r3, #0]
}
 800dade:	4770      	bx	lr
 800dae0:	20002b00 	.word	0x20002b00
 800dae4:	200000c4 	.word	0x200000c4

0800dae8 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <prvAddCurrentTaskToDelayedList+0x34>)
{
 800daea:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800daec:	685a      	ldr	r2, [r3, #4]
{
 800daee:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800daf0:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800daf2:	689a      	ldr	r2, [r3, #8]
 800daf4:	4282      	cmp	r2, r0
 800daf6:	d80a      	bhi.n	800db0e <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	6859      	ldr	r1, [r3, #4]
 800dafc:	3104      	adds	r1, #4
 800dafe:	f7ff fc7b 	bl	800d3f8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800db02:	4b07      	ldr	r3, [pc, #28]	; (800db20 <prvAddCurrentTaskToDelayedList+0x38>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	42a2      	cmp	r2, r4
 800db08:	d900      	bls.n	800db0c <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800db0a:	601c      	str	r4, [r3, #0]
}
 800db0c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800db0e:	68d8      	ldr	r0, [r3, #12]
 800db10:	6859      	ldr	r1, [r3, #4]
 800db12:	3104      	adds	r1, #4
 800db14:	f7ff fc70 	bl	800d3f8 <vListInsert>
 800db18:	e7f8      	b.n	800db0c <prvAddCurrentTaskToDelayedList+0x24>
 800db1a:	46c0      	nop			; (mov r8, r8)
 800db1c:	20002b00 	.word	0x20002b00
 800db20:	200000c4 	.word	0x200000c4

0800db24 <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800db24:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800db26:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800db28:	4c26      	ldr	r4, [pc, #152]	; (800dbc4 <vTaskSwitchContext.part.5+0xa0>)
 800db2a:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800db2c:	f7f9 ff92 	bl	8007a54 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800db30:	6963      	ldr	r3, [r4, #20]
 800db32:	4298      	cmp	r0, r3
 800db34:	d904      	bls.n	800db40 <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800db36:	6862      	ldr	r2, [r4, #4]
 800db38:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800db3a:	1acb      	subs	r3, r1, r3
 800db3c:	181b      	adds	r3, r3, r0
 800db3e:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800db40:	6862      	ldr	r2, [r4, #4]
 800db42:	6863      	ldr	r3, [r4, #4]
 800db44:	6812      	ldr	r2, [r2, #0]
 800db46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800db48:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d923      	bls.n	800db96 <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800db4e:	6863      	ldr	r3, [r4, #4]
 800db50:	2214      	movs	r2, #20
 800db52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800db54:	491c      	ldr	r1, [pc, #112]	; (800dbc8 <vTaskSwitchContext.part.5+0xa4>)
 800db56:	f004 fd07 	bl	8012568 <memcmp>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d128      	bne.n	800dbb0 <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800db5e:	69a2      	ldr	r2, [r4, #24]
 800db60:	491a      	ldr	r1, [pc, #104]	; (800dbcc <vTaskSwitchContext.part.5+0xa8>)
 800db62:	e003      	b.n	800db6c <vTaskSwitchContext.part.5+0x48>
 800db64:	69a3      	ldr	r3, [r4, #24]
 800db66:	3b01      	subs	r3, #1
 800db68:	61a3      	str	r3, [r4, #24]
 800db6a:	69a2      	ldr	r2, [r4, #24]
 800db6c:	0093      	lsls	r3, r2, #2
 800db6e:	189b      	adds	r3, r3, r2
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	58cb      	ldr	r3, [r1, r3]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d0f5      	beq.n	800db64 <vTaskSwitchContext.part.5+0x40>
 800db78:	69a2      	ldr	r2, [r4, #24]
 800db7a:	0093      	lsls	r3, r2, #2
 800db7c:	189b      	adds	r3, r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	18c8      	adds	r0, r1, r3
 800db82:	6842      	ldr	r2, [r0, #4]
 800db84:	3308      	adds	r3, #8
 800db86:	6852      	ldr	r2, [r2, #4]
 800db88:	18c9      	adds	r1, r1, r3
 800db8a:	6042      	str	r2, [r0, #4]
 800db8c:	428a      	cmp	r2, r1
 800db8e:	d015      	beq.n	800dbbc <vTaskSwitchContext.part.5+0x98>
 800db90:	68d3      	ldr	r3, [r2, #12]
 800db92:	6063      	str	r3, [r4, #4]
}
 800db94:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800db96:	6860      	ldr	r0, [r4, #4]
 800db98:	6861      	ldr	r1, [r4, #4]
 800db9a:	3134      	adds	r1, #52	; 0x34
 800db9c:	f7fe fce8 	bl	800c570 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dba0:	6863      	ldr	r3, [r4, #4]
 800dba2:	2214      	movs	r2, #20
 800dba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dba6:	4908      	ldr	r1, [pc, #32]	; (800dbc8 <vTaskSwitchContext.part.5+0xa4>)
 800dba8:	f004 fcde 	bl	8012568 <memcmp>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d0d6      	beq.n	800db5e <vTaskSwitchContext.part.5+0x3a>
 800dbb0:	6860      	ldr	r0, [r4, #4]
 800dbb2:	6861      	ldr	r1, [r4, #4]
 800dbb4:	3134      	adds	r1, #52	; 0x34
 800dbb6:	f7fe fcdb 	bl	800c570 <vApplicationStackOverflowHook>
 800dbba:	e7d0      	b.n	800db5e <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dbbc:	6852      	ldr	r2, [r2, #4]
 800dbbe:	6042      	str	r2, [r0, #4]
 800dbc0:	e7e6      	b.n	800db90 <vTaskSwitchContext.part.5+0x6c>
 800dbc2:	46c0      	nop			; (mov r8, r8)
 800dbc4:	20002b00 	.word	0x20002b00
 800dbc8:	08017338 	.word	0x08017338
 800dbcc:	20002b9c 	.word	0x20002b9c

0800dbd0 <xTaskGenericCreate>:
{
 800dbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd2:	464f      	mov	r7, r9
 800dbd4:	4646      	mov	r6, r8
 800dbd6:	46d6      	mov	lr, sl
 800dbd8:	b5c0      	push	{r6, r7, lr}
 800dbda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dbdc:	4680      	mov	r8, r0
 800dbde:	000c      	movs	r4, r1
 800dbe0:	0015      	movs	r5, r2
 800dbe2:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbe4:	2f00      	cmp	r7, #0
 800dbe6:	d100      	bne.n	800dbea <xTaskGenericCreate+0x1a>
 800dbe8:	e0ae      	b.n	800dd48 <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800dbea:	2060      	movs	r0, #96	; 0x60
 800dbec:	f001 f808 	bl	800ec00 <pvPortMalloc>
 800dbf0:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800dbf2:	d100      	bne.n	800dbf6 <xTaskGenericCreate+0x26>
 800dbf4:	e0b1      	b.n	800dd5a <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800dbf6:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800dbf8:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800dbfa:	002a      	movs	r2, r5
 800dbfc:	0038      	movs	r0, r7
 800dbfe:	21a5      	movs	r1, #165	; 0xa5
 800dc00:	f004 fcca 	bl	8012598 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800dc04:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800dc06:	1f2f      	subs	r7, r5, #4
 800dc08:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dc0a:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800dc0c:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dc0e:	439f      	bics	r7, r3
 800dc10:	0030      	movs	r0, r6
 800dc12:	0033      	movs	r3, r6
 800dc14:	3041      	adds	r0, #65	; 0x41
 800dc16:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800dc18:	7822      	ldrb	r2, [r4, #0]
 800dc1a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800dc1c:	7822      	ldrb	r2, [r4, #0]
 800dc1e:	2a00      	cmp	r2, #0
 800dc20:	d003      	beq.n	800dc2a <xTaskGenericCreate+0x5a>
 800dc22:	3301      	adds	r3, #1
 800dc24:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc26:	4298      	cmp	r0, r3
 800dc28:	d1f6      	bne.n	800dc18 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc2a:	2340      	movs	r3, #64	; 0x40
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	9d08      	ldr	r5, [sp, #32]
 800dc30:	54f2      	strb	r2, [r6, r3]
 800dc32:	2d06      	cmp	r5, #6
 800dc34:	d84f      	bhi.n	800dcd6 <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800dc36:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800dc38:	1d33      	adds	r3, r6, #4
 800dc3a:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800dc3c:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800dc3e:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800dc40:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800dc42:	469a      	mov	sl, r3
 800dc44:	f7ff fbc8 	bl	800d3d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800dc48:	0030      	movs	r0, r6
 800dc4a:	3018      	adds	r0, #24
 800dc4c:	f7ff fbc4 	bl	800d3d8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc50:	2307      	movs	r3, #7
 800dc52:	1b5b      	subs	r3, r3, r5
 800dc54:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800dc56:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800dc58:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800dc5a:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800dc5c:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800dc5e:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc60:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800dc62:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc64:	4641      	mov	r1, r8
 800dc66:	0038      	movs	r0, r7
 800dc68:	f000 ff08 	bl	800ea7c <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800dc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc6e:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d000      	beq.n	800dc76 <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc74:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800dc76:	f000 ff49 	bl	800eb0c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800dc7a:	4c3b      	ldr	r4, [pc, #236]	; (800dd68 <xTaskGenericCreate+0x198>)
 800dc7c:	69e3      	ldr	r3, [r4, #28]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800dc82:	6863      	ldr	r3, [r4, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d02f      	beq.n	800dce8 <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800dc88:	4d38      	ldr	r5, [pc, #224]	; (800dd6c <xTaskGenericCreate+0x19c>)
 800dc8a:	686b      	ldr	r3, [r5, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d024      	beq.n	800dcda <xTaskGenericCreate+0x10a>
 800dc90:	4f37      	ldr	r7, [pc, #220]	; (800dd70 <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800dc92:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800dc94:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800dc96:	3301      	adds	r3, #1
 800dc98:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc9a:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800dc9c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d817      	bhi.n	800dcd2 <xTaskGenericCreate+0x102>
 800dca2:	0098      	lsls	r0, r3, #2
 800dca4:	18c0      	adds	r0, r0, r3
 800dca6:	0080      	lsls	r0, r0, #2
 800dca8:	1838      	adds	r0, r7, r0
 800dcaa:	4651      	mov	r1, sl
 800dcac:	f7ff fb98 	bl	800d3e0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800dcb0:	f000 ff38 	bl	800eb24 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800dcb4:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800dcb6:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d004      	beq.n	800dcc6 <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800dcbc:	6863      	ldr	r3, [r4, #4]
 800dcbe:	9a08      	ldr	r2, [sp, #32]
 800dcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d317      	bcc.n	800dcf6 <xTaskGenericCreate+0x126>
}
 800dcc6:	0028      	movs	r0, r5
 800dcc8:	bc1c      	pop	{r2, r3, r4}
 800dcca:	4690      	mov	r8, r2
 800dccc:	4699      	mov	r9, r3
 800dcce:	46a2      	mov	sl, r4
 800dcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800dcd2:	61a3      	str	r3, [r4, #24]
 800dcd4:	e7e5      	b.n	800dca2 <xTaskGenericCreate+0xd2>
 800dcd6:	2506      	movs	r5, #6
 800dcd8:	e7ad      	b.n	800dc36 <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800dcda:	6863      	ldr	r3, [r4, #4]
 800dcdc:	9a08      	ldr	r2, [sp, #32]
 800dcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d8d5      	bhi.n	800dc90 <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800dce4:	6066      	str	r6, [r4, #4]
 800dce6:	e7d3      	b.n	800dc90 <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800dce8:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcea:	69e3      	ldr	r3, [r4, #28]
 800dcec:	4f20      	ldr	r7, [pc, #128]	; (800dd70 <xTaskGenericCreate+0x1a0>)
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d004      	beq.n	800dcfc <xTaskGenericCreate+0x12c>
 800dcf2:	4d1e      	ldr	r5, [pc, #120]	; (800dd6c <xTaskGenericCreate+0x19c>)
 800dcf4:	e7cd      	b.n	800dc92 <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800dcf6:	f000 fefd 	bl	800eaf4 <vPortYield>
 800dcfa:	e7e4      	b.n	800dcc6 <xTaskGenericCreate+0xf6>
 800dcfc:	238c      	movs	r3, #140	; 0x8c
 800dcfe:	4698      	mov	r8, r3
 800dd00:	003d      	movs	r5, r7
 800dd02:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd04:	0028      	movs	r0, r5
 800dd06:	3514      	adds	r5, #20
 800dd08:	f7ff fb5a 	bl	800d3c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd0c:	4545      	cmp	r5, r8
 800dd0e:	d1f9      	bne.n	800dd04 <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800dd10:	2320      	movs	r3, #32
 800dd12:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800dd14:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800dd16:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800dd18:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800dd1a:	4640      	mov	r0, r8
 800dd1c:	f7ff fb50 	bl	800d3c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd20:	0028      	movs	r0, r5
 800dd22:	f7ff fb4d 	bl	800d3c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd26:	0020      	movs	r0, r4
 800dd28:	3048      	adds	r0, #72	; 0x48
 800dd2a:	f7ff fb49 	bl	800d3c0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dd2e:	0020      	movs	r0, r4
 800dd30:	305c      	adds	r0, #92	; 0x5c
 800dd32:	f7ff fb45 	bl	800d3c0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dd36:	0020      	movs	r0, r4
 800dd38:	3070      	adds	r0, #112	; 0x70
 800dd3a:	f7ff fb41 	bl	800d3c0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd3e:	4643      	mov	r3, r8
 800dd40:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd42:	60e5      	str	r5, [r4, #12]
 800dd44:	4d09      	ldr	r5, [pc, #36]	; (800dd6c <xTaskGenericCreate+0x19c>)
 800dd46:	e7a4      	b.n	800dc92 <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd48:	0090      	lsls	r0, r2, #2
 800dd4a:	f000 ff59 	bl	800ec00 <pvPortMalloc>
 800dd4e:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800dd50:	d000      	beq.n	800dd54 <xTaskGenericCreate+0x184>
 800dd52:	e74a      	b.n	800dbea <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd54:	2501      	movs	r5, #1
 800dd56:	426d      	negs	r5, r5
 800dd58:	e7b5      	b.n	800dcc6 <xTaskGenericCreate+0xf6>
 800dd5a:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800dd5c:	0038      	movs	r0, r7
 800dd5e:	f000 ffc5 	bl	800ecec <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd62:	426d      	negs	r5, r5
 800dd64:	e7af      	b.n	800dcc6 <xTaskGenericCreate+0xf6>
 800dd66:	46c0      	nop			; (mov r8, r8)
 800dd68:	20002b00 	.word	0x20002b00
 800dd6c:	20002b80 	.word	0x20002b80
 800dd70:	20002b9c 	.word	0x20002b9c

0800dd74 <uxTaskPriorityGet>:
	{
 800dd74:	b510      	push	{r4, lr}
 800dd76:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800dd78:	f000 fec8 	bl	800eb0c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dd7c:	2c00      	cmp	r4, #0
 800dd7e:	d101      	bne.n	800dd84 <uxTaskPriorityGet+0x10>
 800dd80:	4b03      	ldr	r3, [pc, #12]	; (800dd90 <uxTaskPriorityGet+0x1c>)
 800dd82:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800dd84:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800dd86:	f000 fecd 	bl	800eb24 <vPortExitCritical>
	}
 800dd8a:	0020      	movs	r0, r4
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	46c0      	nop			; (mov r8, r8)
 800dd90:	20002b00 	.word	0x20002b00

0800dd94 <vTaskPrioritySet>:
	{
 800dd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd96:	46c6      	mov	lr, r8
 800dd98:	0004      	movs	r4, r0
 800dd9a:	b500      	push	{lr}
 800dd9c:	000d      	movs	r5, r1
 800dd9e:	2906      	cmp	r1, #6
 800dda0:	d900      	bls.n	800dda4 <vTaskPrioritySet+0x10>
 800dda2:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800dda4:	f000 feb2 	bl	800eb0c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dda8:	2c00      	cmp	r4, #0
 800ddaa:	d02b      	beq.n	800de04 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ddac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ddae:	42aa      	cmp	r2, r5
 800ddb0:	d01a      	beq.n	800dde8 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800ddb2:	4f21      	ldr	r7, [pc, #132]	; (800de38 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800ddb4:	d31d      	bcc.n	800ddf2 <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800ddb6:	687e      	ldr	r6, [r7, #4]
 800ddb8:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800ddba:	4273      	negs	r3, r6
 800ddbc:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ddbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ddc0:	428a      	cmp	r2, r1
 800ddc2:	d100      	bne.n	800ddc6 <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800ddc4:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddc6:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800ddc8:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	db02      	blt.n	800ddd4 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddce:	2307      	movs	r3, #7
 800ddd0:	1b5d      	subs	r5, r3, r5
 800ddd2:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ddd4:	008b      	lsls	r3, r1, #2
 800ddd6:	185b      	adds	r3, r3, r1
 800ddd8:	4d18      	ldr	r5, [pc, #96]	; (800de3c <vTaskPrioritySet+0xa8>)
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	6962      	ldr	r2, [r4, #20]
 800ddde:	18eb      	adds	r3, r5, r3
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d015      	beq.n	800de10 <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800dde4:	2e01      	cmp	r6, #1
 800dde6:	d010      	beq.n	800de0a <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800dde8:	f000 fe9c 	bl	800eb24 <vPortExitCritical>
	}
 800ddec:	bc04      	pop	{r2}
 800ddee:	4690      	mov	r8, r2
 800ddf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	d01d      	beq.n	800de34 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ddf8:	2600      	movs	r6, #0
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfe:	429d      	cmp	r5, r3
 800de00:	4176      	adcs	r6, r6
 800de02:	e7dc      	b.n	800ddbe <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800de04:	4b0c      	ldr	r3, [pc, #48]	; (800de38 <vTaskPrioritySet+0xa4>)
 800de06:	685c      	ldr	r4, [r3, #4]
 800de08:	e7d0      	b.n	800ddac <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800de0a:	f000 fe73 	bl	800eaf4 <vPortYield>
 800de0e:	e7eb      	b.n	800dde8 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800de10:	1d23      	adds	r3, r4, #4
 800de12:	0018      	movs	r0, r3
 800de14:	4698      	mov	r8, r3
 800de16:	f7ff fb07 	bl	800d428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	4293      	cmp	r3, r2
 800de20:	d900      	bls.n	800de24 <vTaskPrioritySet+0x90>
 800de22:	61bb      	str	r3, [r7, #24]
 800de24:	0098      	lsls	r0, r3, #2
 800de26:	18c0      	adds	r0, r0, r3
 800de28:	0080      	lsls	r0, r0, #2
 800de2a:	1828      	adds	r0, r5, r0
 800de2c:	4641      	mov	r1, r8
 800de2e:	f7ff fad7 	bl	800d3e0 <vListInsertEnd>
 800de32:	e7d7      	b.n	800dde4 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800de34:	2600      	movs	r6, #0
 800de36:	e7c2      	b.n	800ddbe <vTaskPrioritySet+0x2a>
 800de38:	20002b00 	.word	0x20002b00
 800de3c:	20002b9c 	.word	0x20002b9c

0800de40 <vTaskStartScheduler>:
{
 800de40:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800de42:	2400      	movs	r4, #0
{
 800de44:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800de46:	9403      	str	r4, [sp, #12]
 800de48:	9402      	str	r4, [sp, #8]
 800de4a:	9401      	str	r4, [sp, #4]
 800de4c:	9400      	str	r4, [sp, #0]
 800de4e:	2300      	movs	r3, #0
 800de50:	2296      	movs	r2, #150	; 0x96
 800de52:	490b      	ldr	r1, [pc, #44]	; (800de80 <vTaskStartScheduler+0x40>)
 800de54:	480b      	ldr	r0, [pc, #44]	; (800de84 <vTaskStartScheduler+0x44>)
 800de56:	f7ff febb 	bl	800dbd0 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800de5a:	2801      	cmp	r0, #1
 800de5c:	d001      	beq.n	800de62 <vTaskStartScheduler+0x22>
}
 800de5e:	b004      	add	sp, #16
 800de60:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800de62:	f000 fc83 	bl	800e76c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800de66:	2801      	cmp	r0, #1
 800de68:	d1f9      	bne.n	800de5e <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800de6a:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800de6c:	4b06      	ldr	r3, [pc, #24]	; (800de88 <vTaskStartScheduler+0x48>)
 800de6e:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800de70:	4b06      	ldr	r3, [pc, #24]	; (800de8c <vTaskStartScheduler+0x4c>)
 800de72:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800de74:	f7f9 fdde 	bl	8007a34 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800de78:	f000 fe12 	bl	800eaa0 <xPortStartScheduler>
}
 800de7c:	e7ef      	b.n	800de5e <vTaskStartScheduler+0x1e>
 800de7e:	46c0      	nop			; (mov r8, r8)
 800de80:	08019ba4 	.word	0x08019ba4
 800de84:	0800e0c1 	.word	0x0800e0c1
 800de88:	20002b80 	.word	0x20002b80
 800de8c:	20002b00 	.word	0x20002b00

0800de90 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800de90:	4a02      	ldr	r2, [pc, #8]	; (800de9c <vTaskSuspendAll+0xc>)
 800de92:	6913      	ldr	r3, [r2, #16]
 800de94:	3301      	adds	r3, #1
 800de96:	6113      	str	r3, [r2, #16]
}
 800de98:	4770      	bx	lr
 800de9a:	46c0      	nop			; (mov r8, r8)
 800de9c:	20002b80 	.word	0x20002b80

0800dea0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800dea0:	4b01      	ldr	r3, [pc, #4]	; (800dea8 <xTaskGetTickCount+0x8>)
 800dea2:	6898      	ldr	r0, [r3, #8]
}
 800dea4:	4770      	bx	lr
 800dea6:	46c0      	nop			; (mov r8, r8)
 800dea8:	20002b00 	.word	0x20002b00

0800deac <xTaskGetTickCountFromISR>:
 800deac:	4b01      	ldr	r3, [pc, #4]	; (800deb4 <xTaskGetTickCountFromISR+0x8>)
 800deae:	6898      	ldr	r0, [r3, #8]
 800deb0:	4770      	bx	lr
 800deb2:	46c0      	nop			; (mov r8, r8)
 800deb4:	20002b00 	.word	0x20002b00

0800deb8 <xTaskIncrementTick>:
{
 800deb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deba:	46d6      	mov	lr, sl
 800debc:	464f      	mov	r7, r9
 800debe:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dec0:	4b3e      	ldr	r3, [pc, #248]	; (800dfbc <xTaskIncrementTick+0x104>)
{
 800dec2:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dec4:	691a      	ldr	r2, [r3, #16]
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	d11b      	bne.n	800df02 <xTaskIncrementTick+0x4a>
		++xTickCount;
 800deca:	4c3d      	ldr	r4, [pc, #244]	; (800dfc0 <xTaskIncrementTick+0x108>)
 800decc:	68a2      	ldr	r2, [r4, #8]
 800dece:	3201      	adds	r2, #1
 800ded0:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800ded2:	68a2      	ldr	r2, [r4, #8]
 800ded4:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800ded6:	2a00      	cmp	r2, #0
 800ded8:	d022      	beq.n	800df20 <xTaskIncrementTick+0x68>
 800deda:	4b3a      	ldr	r3, [pc, #232]	; (800dfc4 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800dedc:	2700      	movs	r7, #0
 800dede:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800dee0:	4653      	mov	r3, sl
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4543      	cmp	r3, r8
 800dee6:	d931      	bls.n	800df4c <xTaskIncrementTick+0x94>
 800dee8:	4b37      	ldr	r3, [pc, #220]	; (800dfc8 <xTaskIncrementTick+0x110>)
 800deea:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def0:	0093      	lsls	r3, r2, #2
 800def2:	189b      	adds	r3, r3, r2
 800def4:	464a      	mov	r2, r9
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	58d3      	ldr	r3, [r2, r3]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d906      	bls.n	800df0c <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800defe:	2701      	movs	r7, #1
 800df00:	e004      	b.n	800df0c <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800df02:	2700      	movs	r7, #0
		++uxPendedTicks;
 800df04:	699a      	ldr	r2, [r3, #24]
 800df06:	4c2e      	ldr	r4, [pc, #184]	; (800dfc0 <xTaskIncrementTick+0x108>)
 800df08:	3201      	adds	r2, #1
 800df0a:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800df0c:	6923      	ldr	r3, [r4, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d000      	beq.n	800df14 <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800df12:	2701      	movs	r7, #1
}
 800df14:	0038      	movs	r0, r7
 800df16:	bc1c      	pop	{r2, r3, r4}
 800df18:	4690      	mov	r8, r2
 800df1a:	4699      	mov	r9, r3
 800df1c:	46a2      	mov	sl, r4
 800df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800df20:	6822      	ldr	r2, [r4, #0]
 800df22:	68e1      	ldr	r1, [r4, #12]
 800df24:	6021      	str	r1, [r4, #0]
 800df26:	60e2      	str	r2, [r4, #12]
 800df28:	695a      	ldr	r2, [r3, #20]
 800df2a:	3201      	adds	r2, #1
 800df2c:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df2e:	6823      	ldr	r3, [r4, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d13b      	bne.n	800dfae <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800df36:	4b23      	ldr	r3, [pc, #140]	; (800dfc4 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800df38:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800df3a:	469a      	mov	sl, r3
 800df3c:	2301      	movs	r3, #1
 800df3e:	4652      	mov	r2, sl
 800df40:	425b      	negs	r3, r3
 800df42:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800df44:	4653      	mov	r3, sl
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4543      	cmp	r3, r8
 800df4a:	d8cd      	bhi.n	800dee8 <xTaskIncrementTick+0x30>
 800df4c:	4b1e      	ldr	r3, [pc, #120]	; (800dfc8 <xTaskIncrementTick+0x110>)
 800df4e:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df50:	6823      	ldr	r3, [r4, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d026      	beq.n	800dfa6 <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800df5e:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800df60:	4598      	cmp	r8, r3
 800df62:	d327      	bcc.n	800dfb4 <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800df64:	1d2e      	adds	r6, r5, #4
 800df66:	0030      	movs	r0, r6
 800df68:	f7ff fa5e 	bl	800d428 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d003      	beq.n	800df7a <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df72:	0028      	movs	r0, r5
 800df74:	3018      	adds	r0, #24
 800df76:	f7ff fa57 	bl	800d428 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800df7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800df7c:	69a2      	ldr	r2, [r4, #24]
 800df7e:	4293      	cmp	r3, r2
 800df80:	d900      	bls.n	800df84 <xTaskIncrementTick+0xcc>
 800df82:	61a3      	str	r3, [r4, #24]
 800df84:	0098      	lsls	r0, r3, #2
 800df86:	18c0      	adds	r0, r0, r3
 800df88:	0080      	lsls	r0, r0, #2
 800df8a:	4448      	add	r0, r9
 800df8c:	0031      	movs	r1, r6
 800df8e:	f7ff fa27 	bl	800d3e0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df92:	6863      	ldr	r3, [r4, #4]
 800df94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800df96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df98:	429a      	cmp	r2, r3
 800df9a:	d3d9      	bcc.n	800df50 <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df9c:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800df9e:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1d8      	bne.n	800df58 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800dfa6:	4652      	mov	r2, sl
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	6013      	str	r3, [r2, #0]
						break;
 800dfac:	e79e      	b.n	800deec <xTaskIncrementTick+0x34>
 800dfae:	f7ff fd8f 	bl	800dad0 <prvResetNextTaskUnblockTime.part.2>
 800dfb2:	e792      	b.n	800deda <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800dfb4:	4652      	mov	r2, sl
 800dfb6:	6013      	str	r3, [r2, #0]
							break;
 800dfb8:	e798      	b.n	800deec <xTaskIncrementTick+0x34>
 800dfba:	46c0      	nop			; (mov r8, r8)
 800dfbc:	20002b80 	.word	0x20002b80
 800dfc0:	20002b00 	.word	0x20002b00
 800dfc4:	200000c4 	.word	0x200000c4
 800dfc8:	20002b9c 	.word	0x20002b9c

0800dfcc <xTaskResumeAll>:
{
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	46ce      	mov	lr, r9
 800dfd0:	4647      	mov	r7, r8
 800dfd2:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800dfd4:	f000 fd9a 	bl	800eb0c <vPortEnterCritical>
		--uxSchedulerSuspended;
 800dfd8:	4f28      	ldr	r7, [pc, #160]	; (800e07c <xTaskResumeAll+0xb0>)
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d13b      	bne.n	800e05e <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dfe6:	4c26      	ldr	r4, [pc, #152]	; (800e080 <xTaskResumeAll+0xb4>)
 800dfe8:	69e3      	ldr	r3, [r4, #28]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d037      	beq.n	800e05e <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800dfee:	4b25      	ldr	r3, [pc, #148]	; (800e084 <xTaskResumeAll+0xb8>)
 800dff0:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800dff2:	2301      	movs	r3, #1
 800dff4:	4699      	mov	r9, r3
 800dff6:	e01a      	b.n	800e02e <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dff8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dffa:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dffc:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dffe:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e000:	3018      	adds	r0, #24
 800e002:	f7ff fa11 	bl	800d428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e006:	0030      	movs	r0, r6
 800e008:	f7ff fa0e 	bl	800d428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e00c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e00e:	69a2      	ldr	r2, [r4, #24]
 800e010:	4293      	cmp	r3, r2
 800e012:	d900      	bls.n	800e016 <xTaskResumeAll+0x4a>
 800e014:	61a3      	str	r3, [r4, #24]
 800e016:	0098      	lsls	r0, r3, #2
 800e018:	18c0      	adds	r0, r0, r3
 800e01a:	0080      	lsls	r0, r0, #2
 800e01c:	4440      	add	r0, r8
 800e01e:	0031      	movs	r1, r6
 800e020:	f7ff f9de 	bl	800d3e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d21f      	bcs.n	800e06e <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e02e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1e1      	bne.n	800dff8 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00e      	beq.n	800e058 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800e040:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800e042:	f7ff ff39 	bl	800deb8 <xTaskIncrementTick>
 800e046:	2800      	cmp	r0, #0
 800e048:	d000      	beq.n	800e04c <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800e04a:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	3b01      	subs	r3, #1
 800e050:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1f4      	bne.n	800e042 <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800e058:	6923      	ldr	r3, [r4, #16]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d00a      	beq.n	800e074 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800e05e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e060:	f000 fd60 	bl	800eb24 <vPortExitCritical>
}
 800e064:	0020      	movs	r0, r4
 800e066:	bc0c      	pop	{r2, r3}
 800e068:	4690      	mov	r8, r2
 800e06a:	4699      	mov	r9, r3
 800e06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e06e:	464b      	mov	r3, r9
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	e7dc      	b.n	800e02e <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800e074:	f000 fd3e 	bl	800eaf4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e078:	2401      	movs	r4, #1
 800e07a:	e7f1      	b.n	800e060 <xTaskResumeAll+0x94>
 800e07c:	20002b80 	.word	0x20002b80
 800e080:	20002b00 	.word	0x20002b00
 800e084:	20002b9c 	.word	0x20002b9c

0800e088 <vTaskDelay>:
	{
 800e088:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d011      	beq.n	800e0b2 <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800e08e:	4a0a      	ldr	r2, [pc, #40]	; (800e0b8 <vTaskDelay+0x30>)
 800e090:	6913      	ldr	r3, [r2, #16]
 800e092:	3301      	adds	r3, #1
 800e094:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e096:	4b09      	ldr	r3, [pc, #36]	; (800e0bc <vTaskDelay+0x34>)
 800e098:	689c      	ldr	r4, [r3, #8]
 800e09a:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e09c:	6858      	ldr	r0, [r3, #4]
 800e09e:	3004      	adds	r0, #4
 800e0a0:	f7ff f9c2 	bl	800d428 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e0a4:	0020      	movs	r0, r4
 800e0a6:	f7ff fd1f 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e0aa:	f7ff ff8f 	bl	800dfcc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d101      	bne.n	800e0b6 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800e0b2:	f000 fd1f 	bl	800eaf4 <vPortYield>
	}
 800e0b6:	bd10      	pop	{r4, pc}
 800e0b8:	20002b80 	.word	0x20002b80
 800e0bc:	20002b00 	.word	0x20002b00

0800e0c0 <prvIdleTask>:
{
 800e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c2:	4e15      	ldr	r6, [pc, #84]	; (800e118 <prvIdleTask+0x58>)
 800e0c4:	4c15      	ldr	r4, [pc, #84]	; (800e11c <prvIdleTask+0x5c>)
 800e0c6:	4f16      	ldr	r7, [pc, #88]	; (800e120 <prvIdleTask+0x60>)
 800e0c8:	e007      	b.n	800e0da <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e0ca:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e0cc:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e0d2:	f7ff ff7b 	bl	800dfcc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e0d6:	2d00      	cmp	r5, #0
 800e0d8:	d108      	bne.n	800e0ec <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e0da:	68e3      	ldr	r3, [r4, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1f4      	bne.n	800e0ca <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d9f9      	bls.n	800e0da <prvIdleTask+0x1a>
				taskYIELD();
 800e0e6:	f000 fd05 	bl	800eaf4 <vPortYield>
 800e0ea:	e7f6      	b.n	800e0da <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e0ec:	f000 fd0e 	bl	800eb0c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e0f0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800e0f2:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e0f4:	1d28      	adds	r0, r5, #4
 800e0f6:	f7ff f997 	bl	800d428 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e0fa:	69f3      	ldr	r3, [r6, #28]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800e100:	68e3      	ldr	r3, [r4, #12]
 800e102:	3b01      	subs	r3, #1
 800e104:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e106:	f000 fd0d 	bl	800eb24 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e10a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e10c:	f000 fdee 	bl	800ecec <vPortFree>
		vPortFree( pxTCB );
 800e110:	0028      	movs	r0, r5
 800e112:	f000 fdeb 	bl	800ecec <vPortFree>
 800e116:	e7e0      	b.n	800e0da <prvIdleTask+0x1a>
 800e118:	20002b00 	.word	0x20002b00
 800e11c:	20002b80 	.word	0x20002b80
 800e120:	20002b9c 	.word	0x20002b9c

0800e124 <uxTaskGetSystemState>:
	{
 800e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e126:	4647      	mov	r7, r8
 800e128:	46ce      	mov	lr, r9
 800e12a:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e12c:	4a33      	ldr	r2, [pc, #204]	; (800e1fc <uxTaskGetSystemState+0xd8>)
	{
 800e12e:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e130:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e132:	4f33      	ldr	r7, [pc, #204]	; (800e200 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e134:	3301      	adds	r3, #1
 800e136:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e138:	69fb      	ldr	r3, [r7, #28]
	{
 800e13a:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e13c:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e13e:	428b      	cmp	r3, r1
 800e140:	d82c      	bhi.n	800e19c <uxTaskGetSystemState+0x78>
 800e142:	238c      	movs	r3, #140	; 0x8c
 800e144:	425b      	negs	r3, r3
 800e146:	4699      	mov	r9, r3
 800e148:	4c2e      	ldr	r4, [pc, #184]	; (800e204 <uxTaskGetSystemState+0xe0>)
 800e14a:	2300      	movs	r3, #0
 800e14c:	44a1      	add	r9, r4
 800e14e:	e002      	b.n	800e156 <uxTaskGetSystemState+0x32>
 800e150:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e152:	454c      	cmp	r4, r9
 800e154:	d00d      	beq.n	800e172 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e156:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e158:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	d0f8      	beq.n	800e150 <uxTaskGetSystemState+0x2c>
 800e15e:	0021      	movs	r1, r4
 800e160:	2201      	movs	r2, #1
 800e162:	f7ff fc61 	bl	800da28 <prvListTaskWithinSingleList.part.1>
 800e166:	182d      	adds	r5, r5, r0
 800e168:	016b      	lsls	r3, r5, #5
 800e16a:	3c14      	subs	r4, #20
 800e16c:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e16e:	454c      	cmp	r4, r9
 800e170:	d1f1      	bne.n	800e156 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e172:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e174:	680b      	ldr	r3, [r1, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d121      	bne.n	800e1be <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e17a:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e17c:	680b      	ldr	r3, [r1, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d127      	bne.n	800e1d2 <uxTaskGetSystemState+0xae>
 800e182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e184:	2b00      	cmp	r3, #0
 800e186:	d12d      	bne.n	800e1e4 <uxTaskGetSystemState+0xc0>
 800e188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10d      	bne.n	800e1aa <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e18e:	4643      	mov	r3, r8
 800e190:	2b00      	cmp	r3, #0
 800e192:	d003      	beq.n	800e19c <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e194:	f7f9 fc5e 	bl	8007a54 <ulMainGetRunTimeCounterValue>
 800e198:	4643      	mov	r3, r8
 800e19a:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e19c:	f7ff ff16 	bl	800dfcc <xTaskResumeAll>
	}
 800e1a0:	0028      	movs	r0, r5
 800e1a2:	bc0c      	pop	{r2, r3}
 800e1a4:	4690      	mov	r8, r2
 800e1a6:	4699      	mov	r9, r3
 800e1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1aa:	0039      	movs	r1, r7
 800e1ac:	2203      	movs	r2, #3
 800e1ae:	3170      	adds	r1, #112	; 0x70
 800e1b0:	f7ff fc3a 	bl	800da28 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e1b4:	4643      	mov	r3, r8
 800e1b6:	182d      	adds	r5, r5, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1eb      	bne.n	800e194 <uxTaskGetSystemState+0x70>
 800e1bc:	e7ee      	b.n	800e19c <uxTaskGetSystemState+0x78>
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f7ff fc32 	bl	800da28 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e1c4:	68f9      	ldr	r1, [r7, #12]
 800e1c6:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e1c8:	680b      	ldr	r3, [r1, #0]
 800e1ca:	0168      	lsls	r0, r5, #5
 800e1cc:	1830      	adds	r0, r6, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d0d7      	beq.n	800e182 <uxTaskGetSystemState+0x5e>
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	f7ff fc28 	bl	800da28 <prvListTaskWithinSingleList.part.1>
 800e1d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1da:	182d      	adds	r5, r5, r0
 800e1dc:	0168      	lsls	r0, r5, #5
 800e1de:	1830      	adds	r0, r6, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d0d1      	beq.n	800e188 <uxTaskGetSystemState+0x64>
 800e1e4:	0039      	movs	r1, r7
 800e1e6:	2204      	movs	r2, #4
 800e1e8:	315c      	adds	r1, #92	; 0x5c
 800e1ea:	f7ff fc1d 	bl	800da28 <prvListTaskWithinSingleList.part.1>
 800e1ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1f0:	182d      	adds	r5, r5, r0
 800e1f2:	0168      	lsls	r0, r5, #5
 800e1f4:	1830      	adds	r0, r6, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0c9      	beq.n	800e18e <uxTaskGetSystemState+0x6a>
 800e1fa:	e7d6      	b.n	800e1aa <uxTaskGetSystemState+0x86>
 800e1fc:	20002b80 	.word	0x20002b80
 800e200:	20002b00 	.word	0x20002b00
 800e204:	20002c14 	.word	0x20002c14

0800e208 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e208:	4b05      	ldr	r3, [pc, #20]	; (800e220 <vTaskSwitchContext+0x18>)
{
 800e20a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d003      	beq.n	800e21a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e212:	2201      	movs	r2, #1
 800e214:	4b03      	ldr	r3, [pc, #12]	; (800e224 <vTaskSwitchContext+0x1c>)
 800e216:	611a      	str	r2, [r3, #16]
}
 800e218:	bd10      	pop	{r4, pc}
 800e21a:	f7ff fc83 	bl	800db24 <vTaskSwitchContext.part.5>
 800e21e:	e7fb      	b.n	800e218 <vTaskSwitchContext+0x10>
 800e220:	20002b80 	.word	0x20002b80
 800e224:	20002b00 	.word	0x20002b00

0800e228 <vTaskPlaceOnEventList>:
{
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e22c:	4c0b      	ldr	r4, [pc, #44]	; (800e25c <vTaskPlaceOnEventList+0x34>)
 800e22e:	6861      	ldr	r1, [r4, #4]
 800e230:	3118      	adds	r1, #24
 800e232:	f7ff f8e1 	bl	800d3f8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e236:	6860      	ldr	r0, [r4, #4]
 800e238:	3004      	adds	r0, #4
 800e23a:	f7ff f8f5 	bl	800d428 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e23e:	1c6b      	adds	r3, r5, #1
 800e240:	d004      	beq.n	800e24c <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800e242:	68a0      	ldr	r0, [r4, #8]
 800e244:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e246:	f7ff fc4f 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
}
 800e24a:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e24c:	0020      	movs	r0, r4
 800e24e:	6861      	ldr	r1, [r4, #4]
 800e250:	3070      	adds	r0, #112	; 0x70
 800e252:	3104      	adds	r1, #4
 800e254:	f7ff f8c4 	bl	800d3e0 <vListInsertEnd>
 800e258:	e7f7      	b.n	800e24a <vTaskPlaceOnEventList+0x22>
 800e25a:	46c0      	nop			; (mov r8, r8)
 800e25c:	20002b00 	.word	0x20002b00

0800e260 <vTaskPlaceOnEventListRestricted>:
	{
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e264:	4c06      	ldr	r4, [pc, #24]	; (800e280 <vTaskPlaceOnEventListRestricted+0x20>)
 800e266:	6861      	ldr	r1, [r4, #4]
 800e268:	3118      	adds	r1, #24
 800e26a:	f7ff f8b9 	bl	800d3e0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e26e:	6860      	ldr	r0, [r4, #4]
 800e270:	3004      	adds	r0, #4
 800e272:	f7ff f8d9 	bl	800d428 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e276:	68a0      	ldr	r0, [r4, #8]
 800e278:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e27a:	f7ff fc35 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
	}
 800e27e:	bd70      	pop	{r4, r5, r6, pc}
 800e280:	20002b00 	.word	0x20002b00

0800e284 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e284:	68c3      	ldr	r3, [r0, #12]
{
 800e286:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e288:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e28a:	0026      	movs	r6, r4
 800e28c:	3618      	adds	r6, #24
 800e28e:	0030      	movs	r0, r6
 800e290:	f7ff f8ca 	bl	800d428 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e294:	4b13      	ldr	r3, [pc, #76]	; (800e2e4 <xTaskRemoveFromEventList+0x60>)
 800e296:	691b      	ldr	r3, [r3, #16]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d11a      	bne.n	800e2d2 <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e29c:	1d26      	adds	r6, r4, #4
 800e29e:	0030      	movs	r0, r6
 800e2a0:	f7ff f8c2 	bl	800d428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2a4:	4d10      	ldr	r5, [pc, #64]	; (800e2e8 <xTaskRemoveFromEventList+0x64>)
 800e2a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e2a8:	69aa      	ldr	r2, [r5, #24]
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d818      	bhi.n	800e2e0 <xTaskRemoveFromEventList+0x5c>
 800e2ae:	0098      	lsls	r0, r3, #2
 800e2b0:	18c0      	adds	r0, r0, r3
 800e2b2:	4b0e      	ldr	r3, [pc, #56]	; (800e2ec <xTaskRemoveFromEventList+0x68>)
 800e2b4:	0080      	lsls	r0, r0, #2
 800e2b6:	18c0      	adds	r0, r0, r3
 800e2b8:	0031      	movs	r1, r6
 800e2ba:	f7ff f891 	bl	800d3e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2be:	686b      	ldr	r3, [r5, #4]
 800e2c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e2c4:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d902      	bls.n	800e2d0 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800e2ca:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e2cc:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e2ce:	612b      	str	r3, [r5, #16]
}
 800e2d0:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2d2:	4d05      	ldr	r5, [pc, #20]	; (800e2e8 <xTaskRemoveFromEventList+0x64>)
 800e2d4:	0031      	movs	r1, r6
 800e2d6:	0028      	movs	r0, r5
 800e2d8:	3048      	adds	r0, #72	; 0x48
 800e2da:	f7ff f881 	bl	800d3e0 <vListInsertEnd>
 800e2de:	e7ee      	b.n	800e2be <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2e0:	61ab      	str	r3, [r5, #24]
 800e2e2:	e7e4      	b.n	800e2ae <xTaskRemoveFromEventList+0x2a>
 800e2e4:	20002b80 	.word	0x20002b80
 800e2e8:	20002b00 	.word	0x20002b00
 800e2ec:	20002b9c 	.word	0x20002b9c

0800e2f0 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2f0:	4b03      	ldr	r3, [pc, #12]	; (800e300 <vTaskSetTimeOutState+0x10>)
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2f6:	4b03      	ldr	r3, [pc, #12]	; (800e304 <vTaskSetTimeOutState+0x14>)
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	6043      	str	r3, [r0, #4]
}
 800e2fc:	4770      	bx	lr
 800e2fe:	46c0      	nop			; (mov r8, r8)
 800e300:	20002b80 	.word	0x20002b80
 800e304:	20002b00 	.word	0x20002b00

0800e308 <xTaskCheckForTimeOut>:
{
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	000e      	movs	r6, r1
 800e30c:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e30e:	f000 fbfd 	bl	800eb0c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e312:	4911      	ldr	r1, [pc, #68]	; (800e358 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800e314:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800e316:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800e318:	1c53      	adds	r3, r2, #1
 800e31a:	d01a      	beq.n	800e352 <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <xTaskCheckForTimeOut+0x54>)
 800e31e:	6827      	ldr	r7, [r4, #0]
 800e320:	695d      	ldr	r5, [r3, #20]
 800e322:	469c      	mov	ip, r3
 800e324:	6863      	ldr	r3, [r4, #4]
 800e326:	42af      	cmp	r7, r5
 800e328:	d002      	beq.n	800e330 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800e32a:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e32c:	4298      	cmp	r0, r3
 800e32e:	d20c      	bcs.n	800e34a <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e330:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800e332:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e334:	42ba      	cmp	r2, r7
 800e336:	d908      	bls.n	800e34a <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800e338:	1a1b      	subs	r3, r3, r0
 800e33a:	189b      	adds	r3, r3, r2
 800e33c:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e33e:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800e340:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e346:	688b      	ldr	r3, [r1, #8]
 800e348:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800e34a:	f000 fbeb 	bl	800eb24 <vPortExitCritical>
}
 800e34e:	0028      	movs	r0, r5
 800e350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800e352:	2500      	movs	r5, #0
 800e354:	e7f9      	b.n	800e34a <xTaskCheckForTimeOut+0x42>
 800e356:	46c0      	nop			; (mov r8, r8)
 800e358:	20002b00 	.word	0x20002b00
 800e35c:	20002b80 	.word	0x20002b80

0800e360 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e360:	2201      	movs	r2, #1
 800e362:	4b01      	ldr	r3, [pc, #4]	; (800e368 <vTaskMissedYield+0x8>)
 800e364:	611a      	str	r2, [r3, #16]
}
 800e366:	4770      	bx	lr
 800e368:	20002b00 	.word	0x20002b00

0800e36c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e36c:	4b04      	ldr	r3, [pc, #16]	; (800e380 <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e36e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	2a00      	cmp	r2, #0
 800e374:	d003      	beq.n	800e37e <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e376:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800e378:	4243      	negs	r3, r0
 800e37a:	4158      	adcs	r0, r3
 800e37c:	0040      	lsls	r0, r0, #1
	}
 800e37e:	4770      	bx	lr
 800e380:	20002b80 	.word	0x20002b80

0800e384 <vTaskPriorityInherit>:
	{
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e388:	d018      	beq.n	800e3bc <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e38a:	4d16      	ldr	r5, [pc, #88]	; (800e3e4 <vTaskPriorityInherit+0x60>)
 800e38c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e38e:	686b      	ldr	r3, [r5, #4]
 800e390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e392:	429a      	cmp	r2, r3
 800e394:	d212      	bcs.n	800e3bc <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e396:	6983      	ldr	r3, [r0, #24]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	db04      	blt.n	800e3a6 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39c:	686b      	ldr	r3, [r5, #4]
 800e39e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e3a0:	2307      	movs	r3, #7
 800e3a2:	1a5b      	subs	r3, r3, r1
 800e3a4:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e3a6:	0093      	lsls	r3, r2, #2
 800e3a8:	189b      	adds	r3, r3, r2
 800e3aa:	4e0f      	ldr	r6, [pc, #60]	; (800e3e8 <vTaskPriorityInherit+0x64>)
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	6962      	ldr	r2, [r4, #20]
 800e3b0:	18f3      	adds	r3, r6, r3
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d003      	beq.n	800e3be <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3b6:	686b      	ldr	r3, [r5, #4]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ba:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800e3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e3be:	1d27      	adds	r7, r4, #4
 800e3c0:	0038      	movs	r0, r7
 800e3c2:	f7ff f831 	bl	800d428 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3c6:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800e3c8:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d900      	bls.n	800e3d4 <vTaskPriorityInherit+0x50>
 800e3d2:	61ab      	str	r3, [r5, #24]
 800e3d4:	0098      	lsls	r0, r3, #2
 800e3d6:	18c0      	adds	r0, r0, r3
 800e3d8:	0080      	lsls	r0, r0, #2
 800e3da:	1830      	adds	r0, r6, r0
 800e3dc:	0039      	movs	r1, r7
 800e3de:	f7fe ffff 	bl	800d3e0 <vListInsertEnd>
	}
 800e3e2:	e7eb      	b.n	800e3bc <vTaskPriorityInherit+0x38>
 800e3e4:	20002b00 	.word	0x20002b00
 800e3e8:	20002b9c 	.word	0x20002b9c

0800e3ec <xTaskPriorityDisinherit>:
	{
 800e3ec:	b570      	push	{r4, r5, r6, lr}
 800e3ee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e3f0:	d008      	beq.n	800e404 <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800e3f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e3f6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3fc:	428a      	cmp	r2, r1
 800e3fe:	d001      	beq.n	800e404 <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800e404:	2000      	movs	r0, #0
	}
 800e406:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e408:	1d05      	adds	r5, r0, #4
 800e40a:	0028      	movs	r0, r5
 800e40c:	f7ff f80c 	bl	800d428 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e410:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e412:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e414:	1ad2      	subs	r2, r2, r3
 800e416:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e418:	4a07      	ldr	r2, [pc, #28]	; (800e438 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e41a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e41c:	6991      	ldr	r1, [r2, #24]
 800e41e:	428b      	cmp	r3, r1
 800e420:	d900      	bls.n	800e424 <xTaskPriorityDisinherit+0x38>
 800e422:	6193      	str	r3, [r2, #24]
 800e424:	0098      	lsls	r0, r3, #2
 800e426:	18c0      	adds	r0, r0, r3
 800e428:	4b04      	ldr	r3, [pc, #16]	; (800e43c <xTaskPriorityDisinherit+0x50>)
 800e42a:	0080      	lsls	r0, r0, #2
 800e42c:	18c0      	adds	r0, r0, r3
 800e42e:	0029      	movs	r1, r5
 800e430:	f7fe ffd6 	bl	800d3e0 <vListInsertEnd>
					xReturn = pdTRUE;
 800e434:	2001      	movs	r0, #1
		return xReturn;
 800e436:	e7e6      	b.n	800e406 <xTaskPriorityDisinherit+0x1a>
 800e438:	20002b00 	.word	0x20002b00
 800e43c:	20002b9c 	.word	0x20002b9c

0800e440 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e442:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e444:	2600      	movs	r6, #0
	{
 800e446:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e448:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <vTaskList+0xa8>)
	{
 800e44a:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e44c:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e44e:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e450:	9202      	str	r2, [sp, #8]
	{
 800e452:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e454:	69d8      	ldr	r0, [r3, #28]
 800e456:	0140      	lsls	r0, r0, #5
 800e458:	f000 fbd2 	bl	800ec00 <pvPortMalloc>
 800e45c:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e45e:	d03f      	beq.n	800e4e0 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e460:	2200      	movs	r2, #0
 800e462:	9902      	ldr	r1, [sp, #8]
 800e464:	f7ff fe5e 	bl	800e124 <uxTaskGetSystemState>
 800e468:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e46a:	9603      	str	r6, [sp, #12]
 800e46c:	9b03      	ldr	r3, [sp, #12]
 800e46e:	9a02      	ldr	r2, [sp, #8]
 800e470:	429a      	cmp	r2, r3
 800e472:	d932      	bls.n	800e4da <vTaskList+0x9a>
 800e474:	4b1d      	ldr	r3, [pc, #116]	; (800e4ec <vTaskList+0xac>)
 800e476:	4e1e      	ldr	r6, [pc, #120]	; (800e4f0 <vTaskList+0xb0>)
 800e478:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e47a:	9b03      	ldr	r3, [sp, #12]
 800e47c:	2700      	movs	r7, #0
 800e47e:	015b      	lsls	r3, r3, #5
 800e480:	18eb      	adds	r3, r5, r3
 800e482:	7b1b      	ldrb	r3, [r3, #12]
 800e484:	3b01      	subs	r3, #1
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2b03      	cmp	r3, #3
 800e48a:	d801      	bhi.n	800e490 <vTaskList+0x50>
 800e48c:	4443      	add	r3, r8
 800e48e:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	0020      	movs	r0, r4
 800e494:	015b      	lsls	r3, r3, #5
 800e496:	18eb      	adds	r3, r5, r3
 800e498:	6859      	ldr	r1, [r3, #4]
 800e49a:	f7ff faad 	bl	800d9f8 <prvWriteNameToBuffer>
 800e49e:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800e4a0:	9b03      	ldr	r3, [sp, #12]
 800e4a2:	9a03      	ldr	r2, [sp, #12]
 800e4a4:	9903      	ldr	r1, [sp, #12]
 800e4a6:	015b      	lsls	r3, r3, #5
 800e4a8:	0149      	lsls	r1, r1, #5
 800e4aa:	1869      	adds	r1, r5, r1
 800e4ac:	6889      	ldr	r1, [r1, #8]
 800e4ae:	18eb      	adds	r3, r5, r3
 800e4b0:	0152      	lsls	r2, r2, #5
 800e4b2:	691b      	ldr	r3, [r3, #16]
 800e4b4:	18aa      	adds	r2, r5, r2
 800e4b6:	9101      	str	r1, [sp, #4]
 800e4b8:	8b92      	ldrh	r2, [r2, #28]
 800e4ba:	0031      	movs	r1, r6
 800e4bc:	9200      	str	r2, [sp, #0]
 800e4be:	003a      	movs	r2, r7
 800e4c0:	f004 fa64 	bl	801298c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e4c4:	0020      	movs	r0, r4
 800e4c6:	f7f1 fe27 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800e4ca:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e4cc:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	9303      	str	r3, [sp, #12]
 800e4d2:	9a03      	ldr	r2, [sp, #12]
 800e4d4:	9b02      	ldr	r3, [sp, #8]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d3cf      	bcc.n	800e47a <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e4da:	0028      	movs	r0, r5
 800e4dc:	f000 fc06 	bl	800ecec <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4e0:	b004      	add	sp, #16
 800e4e2:	bc04      	pop	{r2}
 800e4e4:	4690      	mov	r8, r2
 800e4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e8:	20002b00 	.word	0x20002b00
 800e4ec:	08017338 	.word	0x08017338
 800e4f0:	08019bac 	.word	0x08019bac

0800e4f4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4f6:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e4f8:	2600      	movs	r6, #0
	{
 800e4fa:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e4fc:	4b28      	ldr	r3, [pc, #160]	; (800e5a0 <vTaskGetRunTimeStats+0xac>)
	{
 800e4fe:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e500:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e502:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e504:	9201      	str	r2, [sp, #4]
	{
 800e506:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e508:	69d8      	ldr	r0, [r3, #28]
 800e50a:	0140      	lsls	r0, r0, #5
 800e50c:	f000 fb78 	bl	800ec00 <pvPortMalloc>
 800e510:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e512:	d040      	beq.n	800e596 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e514:	9901      	ldr	r1, [sp, #4]
 800e516:	aa03      	add	r2, sp, #12
 800e518:	f7ff fe04 	bl	800e124 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e51c:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e51e:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800e520:	9803      	ldr	r0, [sp, #12]
 800e522:	f7f1 fe15 	bl	8000150 <__udivsi3>
 800e526:	1e01      	subs	r1, r0, #0
 800e528:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800e52a:	d031      	beq.n	800e590 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e52c:	9602      	str	r6, [sp, #8]
 800e52e:	9b02      	ldr	r3, [sp, #8]
 800e530:	9a01      	ldr	r2, [sp, #4]
 800e532:	429a      	cmp	r2, r3
 800e534:	d92c      	bls.n	800e590 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e536:	4b1b      	ldr	r3, [pc, #108]	; (800e5a4 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e538:	4f1b      	ldr	r7, [pc, #108]	; (800e5a8 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e53a:	4698      	mov	r8, r3
 800e53c:	e00f      	b.n	800e55e <vTaskGetRunTimeStats+0x6a>
 800e53e:	0033      	movs	r3, r6
 800e540:	4641      	mov	r1, r8
 800e542:	f004 fa23 	bl	801298c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800e546:	0020      	movs	r0, r4
 800e548:	f7f1 fde6 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800e54c:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800e54e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800e550:	3301      	adds	r3, #1
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	9a02      	ldr	r2, [sp, #8]
 800e556:	9b01      	ldr	r3, [sp, #4]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d219      	bcs.n	800e590 <vTaskGetRunTimeStats+0x9c>
 800e55c:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e55e:	9b02      	ldr	r3, [sp, #8]
 800e560:	015b      	lsls	r3, r3, #5
 800e562:	18eb      	adds	r3, r5, r3
 800e564:	6998      	ldr	r0, [r3, #24]
 800e566:	f7f1 fdf3 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e56a:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e56c:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e56e:	015b      	lsls	r3, r3, #5
 800e570:	18eb      	adds	r3, r5, r3
 800e572:	6859      	ldr	r1, [r3, #4]
 800e574:	0020      	movs	r0, r4
 800e576:	f7ff fa3f 	bl	800d9f8 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e57a:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e57c:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e57e:	015b      	lsls	r3, r3, #5
 800e580:	18eb      	adds	r3, r5, r3
 800e582:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800e584:	2e00      	cmp	r6, #0
 800e586:	d1da      	bne.n	800e53e <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e588:	0039      	movs	r1, r7
 800e58a:	f004 f9ff 	bl	801298c <sprintf>
 800e58e:	e7da      	b.n	800e546 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e590:	0028      	movs	r0, r5
 800e592:	f000 fbab 	bl	800ecec <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e596:	b004      	add	sp, #16
 800e598:	bc04      	pop	{r2}
 800e59a:	4690      	mov	r8, r2
 800e59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e59e:	46c0      	nop			; (mov r8, r8)
 800e5a0:	20002b00 	.word	0x20002b00
 800e5a4:	08019bbc 	.word	0x08019bbc
 800e5a8:	08019bc8 	.word	0x08019bc8

0800e5ac <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <pvTaskIncrementMutexHeldCount+0x14>)
 800e5ae:	685a      	ldr	r2, [r3, #4]
 800e5b0:	2a00      	cmp	r2, #0
 800e5b2:	d003      	beq.n	800e5bc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e5b4:	6859      	ldr	r1, [r3, #4]
 800e5b6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e5bc:	6858      	ldr	r0, [r3, #4]
	}
 800e5be:	4770      	bx	lr
 800e5c0:	20002b00 	.word	0x20002b00

0800e5c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e5c4:	b570      	push	{r4, r5, r6, lr}
 800e5c6:	0006      	movs	r6, r0
 800e5c8:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e5ca:	f000 fa9f 	bl	800eb0c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e5ce:	4c1c      	ldr	r4, [pc, #112]	; (800e640 <ulTaskNotifyTake+0x7c>)
 800e5d0:	6863      	ldr	r3, [r4, #4]
 800e5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d105      	bne.n	800e5e4 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e5d8:	2101      	movs	r1, #1
 800e5da:	6862      	ldr	r2, [r4, #4]
 800e5dc:	335c      	adds	r3, #92	; 0x5c
 800e5de:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	d119      	bne.n	800e618 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e5e4:	f000 fa9e 	bl	800eb24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e5e8:	f000 fa90 	bl	800eb0c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e5ec:	6863      	ldr	r3, [r4, #4]
 800e5ee:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e5f0:	2d00      	cmp	r5, #0
 800e5f2:	d005      	beq.n	800e600 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	d10b      	bne.n	800e610 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800e5f8:	6862      	ldr	r2, [r4, #4]
 800e5fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e600:	235c      	movs	r3, #92	; 0x5c
 800e602:	2100      	movs	r1, #0
 800e604:	6862      	ldr	r2, [r4, #4]
 800e606:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e608:	f000 fa8c 	bl	800eb24 <vPortExitCritical>

		return ulReturn;
	}
 800e60c:	0028      	movs	r0, r5
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e610:	2200      	movs	r2, #0
 800e612:	6863      	ldr	r3, [r4, #4]
 800e614:	659a      	str	r2, [r3, #88]	; 0x58
 800e616:	e7f3      	b.n	800e600 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e618:	6860      	ldr	r0, [r4, #4]
 800e61a:	3004      	adds	r0, #4
 800e61c:	f7fe ff04 	bl	800d428 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e620:	1c6b      	adds	r3, r5, #1
 800e622:	d006      	beq.n	800e632 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800e624:	68a0      	ldr	r0, [r4, #8]
 800e626:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e628:	f7ff fa5e 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e62c:	f000 fa62 	bl	800eaf4 <vPortYield>
 800e630:	e7d8      	b.n	800e5e4 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e632:	0020      	movs	r0, r4
 800e634:	6861      	ldr	r1, [r4, #4]
 800e636:	3070      	adds	r0, #112	; 0x70
 800e638:	3104      	adds	r1, #4
 800e63a:	f7fe fed1 	bl	800d3e0 <vListInsertEnd>
 800e63e:	e7f5      	b.n	800e62c <ulTaskNotifyTake+0x68>
 800e640:	20002b00 	.word	0x20002b00

0800e644 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	001e      	movs	r6, r3
 800e648:	0004      	movs	r4, r0
 800e64a:	000f      	movs	r7, r1
 800e64c:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e64e:	f000 fa5d 	bl	800eb0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e652:	2e00      	cmp	r6, #0
 800e654:	d001      	beq.n	800e65a <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e658:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e65a:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800e65c:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e65e:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800e660:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e662:	b2db      	uxtb	r3, r3

			switch( eAction )
 800e664:	2d02      	cmp	r5, #2
 800e666:	d02e      	beq.n	800e6c6 <xTaskGenericNotify+0x82>
 800e668:	d927      	bls.n	800e6ba <xTaskGenericNotify+0x76>
 800e66a:	2d03      	cmp	r5, #3
 800e66c:	d003      	beq.n	800e676 <xTaskGenericNotify+0x32>
 800e66e:	2d04      	cmp	r5, #4
 800e670:	d102      	bne.n	800e678 <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e672:	2b02      	cmp	r3, #2
 800e674:	d02b      	beq.n	800e6ce <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e676:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d004      	beq.n	800e686 <xTaskGenericNotify+0x42>
 800e67c:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e67e:	f000 fa51 	bl	800eb24 <vPortExitCritical>

		return xReturn;
	}
 800e682:	0020      	movs	r0, r4
 800e684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e686:	1d26      	adds	r6, r4, #4
 800e688:	0030      	movs	r0, r6
 800e68a:	f7fe fecd 	bl	800d428 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e68e:	4d11      	ldr	r5, [pc, #68]	; (800e6d4 <xTaskGenericNotify+0x90>)
 800e690:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e692:	69aa      	ldr	r2, [r5, #24]
 800e694:	4293      	cmp	r3, r2
 800e696:	d900      	bls.n	800e69a <xTaskGenericNotify+0x56>
 800e698:	61ab      	str	r3, [r5, #24]
 800e69a:	0098      	lsls	r0, r3, #2
 800e69c:	18c0      	adds	r0, r0, r3
 800e69e:	4b0e      	ldr	r3, [pc, #56]	; (800e6d8 <xTaskGenericNotify+0x94>)
 800e6a0:	0080      	lsls	r0, r0, #2
 800e6a2:	18c0      	adds	r0, r0, r3
 800e6a4:	0031      	movs	r1, r6
 800e6a6:	f7fe fe9b 	bl	800d3e0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6aa:	686b      	ldr	r3, [r5, #4]
 800e6ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d9e3      	bls.n	800e67c <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800e6b4:	f000 fa1e 	bl	800eaf4 <vPortYield>
 800e6b8:	e7e0      	b.n	800e67c <xTaskGenericNotify+0x38>
			switch( eAction )
 800e6ba:	2d01      	cmp	r5, #1
 800e6bc:	d1dc      	bne.n	800e678 <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800e6be:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e6c0:	4317      	orrs	r7, r2
 800e6c2:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800e6c4:	e7d8      	b.n	800e678 <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800e6c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e6c8:	3201      	adds	r2, #1
 800e6ca:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e6cc:	e7d4      	b.n	800e678 <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800e6ce:	2400      	movs	r4, #0
 800e6d0:	e7d5      	b.n	800e67e <xTaskGenericNotify+0x3a>
 800e6d2:	46c0      	nop			; (mov r8, r8)
 800e6d4:	20002b00 	.word	0x20002b00
 800e6d8:	20002b9c 	.word	0x20002b9c

0800e6dc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e6dc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e6de:	f000 fa15 	bl	800eb0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e6e2:	4c0f      	ldr	r4, [pc, #60]	; (800e720 <prvCheckForValidListAndQueue+0x44>)
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d002      	beq.n	800e6f0 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6ea:	f000 fa1b 	bl	800eb24 <vPortExitCritical>
}
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800e6f0:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800e6f2:	1d26      	adds	r6, r4, #4
 800e6f4:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800e6f6:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800e6f8:	f7fe fe62 	bl	800d3c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6fc:	0028      	movs	r0, r5
 800e6fe:	f7fe fe5f 	bl	800d3c0 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e702:	2200      	movs	r2, #0
 800e704:	2110      	movs	r1, #16
 800e706:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800e708:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800e70a:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e70c:	f7fe ff6a 	bl	800d5e4 <xQueueGenericCreate>
 800e710:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e712:	2800      	cmp	r0, #0
 800e714:	d0e9      	beq.n	800e6ea <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e716:	4903      	ldr	r1, [pc, #12]	; (800e724 <prvCheckForValidListAndQueue+0x48>)
 800e718:	f7ff f93e 	bl	800d998 <vQueueAddToRegistry>
 800e71c:	e7e5      	b.n	800e6ea <prvCheckForValidListAndQueue+0xe>
 800e71e:	46c0      	nop			; (mov r8, r8)
 800e720:	20002c28 	.word	0x20002c28
 800e724:	08019bd4 	.word	0x08019bd4

0800e728 <prvInsertTimerInActiveList>:
{
 800e728:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e72a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e72c:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e72e:	4291      	cmp	r1, r2
 800e730:	d806      	bhi.n	800e740 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e732:	1ad2      	subs	r2, r2, r3
 800e734:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800e736:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e738:	429a      	cmp	r2, r3
 800e73a:	d30d      	bcc.n	800e758 <prvInsertTimerInActiveList+0x30>
}
 800e73c:	0020      	movs	r0, r4
 800e73e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e740:	429a      	cmp	r2, r3
 800e742:	d202      	bcs.n	800e74a <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800e744:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e746:	4299      	cmp	r1, r3
 800e748:	d2f8      	bcs.n	800e73c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e74a:	4b07      	ldr	r3, [pc, #28]	; (800e768 <prvInsertTimerInActiveList+0x40>)
 800e74c:	1d01      	adds	r1, r0, #4
 800e74e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e750:	f7fe fe52 	bl	800d3f8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e754:	2400      	movs	r4, #0
 800e756:	e7f1      	b.n	800e73c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e758:	4b03      	ldr	r3, [pc, #12]	; (800e768 <prvInsertTimerInActiveList+0x40>)
 800e75a:	1d01      	adds	r1, r0, #4
 800e75c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e75e:	f7fe fe4b 	bl	800d3f8 <vListInsert>
 800e762:	2400      	movs	r4, #0
 800e764:	e7ea      	b.n	800e73c <prvInsertTimerInActiveList+0x14>
 800e766:	46c0      	nop			; (mov r8, r8)
 800e768:	20002c28 	.word	0x20002c28

0800e76c <xTimerCreateTimerTask>:
{
 800e76c:	b500      	push	{lr}
 800e76e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e770:	f7ff ffb4 	bl	800e6dc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e774:	4b08      	ldr	r3, [pc, #32]	; (800e798 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800e776:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00a      	beq.n	800e794 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e77e:	2303      	movs	r3, #3
 800e780:	9003      	str	r0, [sp, #12]
 800e782:	9002      	str	r0, [sp, #8]
 800e784:	9001      	str	r0, [sp, #4]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	2296      	movs	r2, #150	; 0x96
 800e78a:	2300      	movs	r3, #0
 800e78c:	4903      	ldr	r1, [pc, #12]	; (800e79c <xTimerCreateTimerTask+0x30>)
 800e78e:	4804      	ldr	r0, [pc, #16]	; (800e7a0 <xTimerCreateTimerTask+0x34>)
 800e790:	f7ff fa1e 	bl	800dbd0 <xTaskGenericCreate>
}
 800e794:	b005      	add	sp, #20
 800e796:	bd00      	pop	{pc}
 800e798:	20002c28 	.word	0x20002c28
 800e79c:	08019bdc 	.word	0x08019bdc
 800e7a0:	0800e8a5 	.word	0x0800e8a5

0800e7a4 <xTimerCreate>:
{
 800e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7a6:	46c6      	mov	lr, r8
 800e7a8:	000d      	movs	r5, r1
 800e7aa:	b500      	push	{lr}
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	0017      	movs	r7, r2
 800e7b0:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e7b2:	2900      	cmp	r1, #0
 800e7b4:	d014      	beq.n	800e7e0 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e7b6:	202c      	movs	r0, #44	; 0x2c
 800e7b8:	f000 fa22 	bl	800ec00 <pvPortMalloc>
 800e7bc:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e7be:	d00b      	beq.n	800e7d8 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e7c0:	f7ff ff8c 	bl	800e6dc <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e7c4:	4643      	mov	r3, r8
 800e7c6:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e7c8:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e7ca:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e7cc:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e7ce:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e7d0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e7d2:	1d20      	adds	r0, r4, #4
 800e7d4:	f7fe fe00 	bl	800d3d8 <vListInitialiseItem>
}
 800e7d8:	0020      	movs	r0, r4
 800e7da:	bc04      	pop	{r2}
 800e7dc:	4690      	mov	r8, r2
 800e7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800e7e0:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800e7e2:	e7f9      	b.n	800e7d8 <xTimerCreate+0x34>

0800e7e4 <xTimerGenericCommand>:
{
 800e7e4:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800e7e6:	4d13      	ldr	r5, [pc, #76]	; (800e834 <xTimerGenericCommand+0x50>)
{
 800e7e8:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800e7ea:	682c      	ldr	r4, [r5, #0]
{
 800e7ec:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800e7ee:	2c00      	cmp	r4, #0
 800e7f0:	d017      	beq.n	800e822 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800e7f2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e7f4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e7f6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e7f8:	2905      	cmp	r1, #5
 800e7fa:	dc0a      	bgt.n	800e812 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e7fc:	f7ff fdb6 	bl	800e36c <xTaskGetSchedulerState>
 800e800:	2802      	cmp	r0, #2
 800e802:	d010      	beq.n	800e826 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e804:	6828      	ldr	r0, [r5, #0]
 800e806:	2300      	movs	r3, #0
 800e808:	2200      	movs	r2, #0
 800e80a:	4669      	mov	r1, sp
 800e80c:	f7fe ff16 	bl	800d63c <xQueueGenericSend>
 800e810:	e005      	b.n	800e81e <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e812:	2300      	movs	r3, #0
 800e814:	0032      	movs	r2, r6
 800e816:	4669      	mov	r1, sp
 800e818:	0020      	movs	r0, r4
 800e81a:	f7fe ff8b 	bl	800d734 <xQueueGenericSendFromISR>
}
 800e81e:	b004      	add	sp, #16
 800e820:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800e822:	2000      	movs	r0, #0
	return xReturn;
 800e824:	e7fb      	b.n	800e81e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e826:	6828      	ldr	r0, [r5, #0]
 800e828:	2300      	movs	r3, #0
 800e82a:	9a08      	ldr	r2, [sp, #32]
 800e82c:	4669      	mov	r1, sp
 800e82e:	f7fe ff05 	bl	800d63c <xQueueGenericSend>
 800e832:	e7f4      	b.n	800e81e <xTimerGenericCommand+0x3a>
 800e834:	20002c28 	.word	0x20002c28

0800e838 <prvSwitchTimerLists>:
{
 800e838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83a:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e83c:	2300      	movs	r3, #0
{
 800e83e:	b500      	push	{lr}
 800e840:	4e17      	ldr	r6, [pc, #92]	; (800e8a0 <prvSwitchTimerLists+0x68>)
 800e842:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e844:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e846:	e00c      	b.n	800e862 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e848:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e84a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e84c:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e84e:	1d25      	adds	r5, r4, #4
 800e850:	0028      	movs	r0, r5
 800e852:	f7fe fde9 	bl	800d428 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e858:	0020      	movs	r0, r4
 800e85a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e85c:	69e3      	ldr	r3, [r4, #28]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d00a      	beq.n	800e878 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e862:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	2a00      	cmp	r2, #0
 800e868:	d1ee      	bne.n	800e848 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800e86a:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800e86c:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800e86e:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800e870:	b002      	add	sp, #8
 800e872:	bc04      	pop	{r2}
 800e874:	4690      	mov	r8, r2
 800e876:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e878:	69a3      	ldr	r3, [r4, #24]
 800e87a:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800e87c:	429f      	cmp	r7, r3
 800e87e:	d206      	bcs.n	800e88e <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e880:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e882:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e884:	0029      	movs	r1, r5
 800e886:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800e888:	f7fe fdb6 	bl	800d3f8 <vListInsert>
 800e88c:	e7e9      	b.n	800e862 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e88e:	4643      	mov	r3, r8
 800e890:	003a      	movs	r2, r7
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	2100      	movs	r1, #0
 800e896:	2300      	movs	r3, #0
 800e898:	0020      	movs	r0, r4
 800e89a:	f7ff ffa3 	bl	800e7e4 <xTimerGenericCommand>
 800e89e:	e7e0      	b.n	800e862 <prvSwitchTimerLists+0x2a>
 800e8a0:	20002c28 	.word	0x20002c28

0800e8a4 <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800e8a4:	2300      	movs	r3, #0
{
 800e8a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a8:	4645      	mov	r5, r8
 800e8aa:	4657      	mov	r7, sl
 800e8ac:	46de      	mov	lr, fp
 800e8ae:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800e8b0:	4698      	mov	r8, r3
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	469a      	mov	sl, r3
{
 800e8b6:	b5e0      	push	{r5, r6, r7, lr}
 800e8b8:	4d61      	ldr	r5, [pc, #388]	; (800ea40 <prvTimerTask+0x19c>)
 800e8ba:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	2a00      	cmp	r2, #0
 800e8c2:	d050      	beq.n	800e966 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800e8c8:	f7ff fae2 	bl	800de90 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e8cc:	f7ff fae8 	bl	800dea0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e8d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e8d2:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e8d4:	4283      	cmp	r3, r0
 800e8d6:	d84e      	bhi.n	800e976 <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800e8d8:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e8da:	4286      	cmp	r6, r0
 800e8dc:	d961      	bls.n	800e9a2 <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e8de:	1b31      	subs	r1, r6, r4
 800e8e0:	6828      	ldr	r0, [r5, #0]
 800e8e2:	f7ff f86b 	bl	800d9bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e8e6:	f7ff fb71 	bl	800dfcc <xTaskResumeAll>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d056      	beq.n	800e99c <prvTimerTask+0xf8>
 800e8ee:	2784      	movs	r7, #132	; 0x84
 800e8f0:	00bf      	lsls	r7, r7, #2
 800e8f2:	23c7      	movs	r3, #199	; 0xc7
 800e8f4:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	a904      	add	r1, sp, #16
 800e8fc:	6828      	ldr	r0, [r5, #0]
 800e8fe:	f7fe ff7b 	bl	800d7f8 <xQueueGenericReceive>
 800e902:	2800      	cmp	r0, #0
 800e904:	d0da      	beq.n	800e8bc <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e906:	9b04      	ldr	r3, [sp, #16]
 800e908:	9c06      	ldr	r4, [sp, #24]
 800e90a:	9302      	str	r3, [sp, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	da0b      	bge.n	800e928 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e910:	9b07      	ldr	r3, [sp, #28]
 800e912:	0020      	movs	r0, r4
 800e914:	9302      	str	r3, [sp, #8]
 800e916:	9b05      	ldr	r3, [sp, #20]
 800e918:	9902      	ldr	r1, [sp, #8]
 800e91a:	9303      	str	r3, [sp, #12]
 800e91c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e91e:	9b04      	ldr	r3, [sp, #16]
 800e920:	9302      	str	r3, [sp, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	dbe7      	blt.n	800e8f6 <prvTimerTask+0x52>
 800e926:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e928:	6963      	ldr	r3, [r4, #20]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e92e:	1d20      	adds	r0, r4, #4
 800e930:	f7fe fd7a 	bl	800d428 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e934:	f7ff fab4 	bl	800dea0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e938:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e93a:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800e93c:	4298      	cmp	r0, r3
 800e93e:	d320      	bcc.n	800e982 <prvTimerTask+0xde>
 800e940:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800e942:	636e      	str	r6, [r5, #52]	; 0x34
 800e944:	2b09      	cmp	r3, #9
 800e946:	d8d6      	bhi.n	800e8f6 <prvTimerTask+0x52>
 800e948:	4652      	mov	r2, sl
 800e94a:	409a      	lsls	r2, r3
 800e94c:	0013      	movs	r3, r2
 800e94e:	403a      	ands	r2, r7
 800e950:	4693      	mov	fp, r2
 800e952:	d16b      	bne.n	800ea2c <prvTimerTask+0x188>
 800e954:	464a      	mov	r2, r9
 800e956:	421a      	tst	r2, r3
 800e958:	d144      	bne.n	800e9e4 <prvTimerTask+0x140>
 800e95a:	069b      	lsls	r3, r3, #26
 800e95c:	d5cb      	bpl.n	800e8f6 <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800e95e:	0020      	movs	r0, r4
 800e960:	f000 f9c4 	bl	800ecec <vPortFree>
 800e964:	e7c5      	b.n	800e8f2 <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800e966:	f7ff fa93 	bl	800de90 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e96a:	f7ff fa99 	bl	800dea0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e96e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e970:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e972:	4283      	cmp	r3, r0
 800e974:	d908      	bls.n	800e988 <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800e976:	f7ff ff5f 	bl	800e838 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e97a:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800e97c:	f7ff fb26 	bl	800dfcc <xTaskResumeAll>
 800e980:	e7b5      	b.n	800e8ee <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800e982:	f7ff ff59 	bl	800e838 <prvSwitchTimerLists>
 800e986:	e7db      	b.n	800e940 <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800e988:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e98a:	6828      	ldr	r0, [r5, #0]
 800e98c:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800e98e:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e990:	f7ff f814 	bl	800d9bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e994:	f7ff fb1a 	bl	800dfcc <xTaskResumeAll>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d1a8      	bne.n	800e8ee <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800e99c:	f000 f8aa 	bl	800eaf4 <vPortYield>
 800e9a0:	e7a5      	b.n	800e8ee <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800e9a2:	f7ff fb13 	bl	800dfcc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e9a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9ac:	1d38      	adds	r0, r7, #4
 800e9ae:	f7fe fd3b 	bl	800d428 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d003      	beq.n	800e9c0 <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ba:	0038      	movs	r0, r7
 800e9bc:	4798      	blx	r3
 800e9be:	e796      	b.n	800e8ee <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	0022      	movs	r2, r4
 800e9c4:	18f1      	adds	r1, r6, r3
 800e9c6:	0038      	movs	r0, r7
 800e9c8:	0033      	movs	r3, r6
 800e9ca:	f7ff fead 	bl	800e728 <prvInsertTimerInActiveList>
 800e9ce:	2801      	cmp	r0, #1
 800e9d0:	d1f2      	bne.n	800e9b8 <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9d2:	4643      	mov	r3, r8
 800e9d4:	0032      	movs	r2, r6
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	2100      	movs	r1, #0
 800e9da:	2300      	movs	r3, #0
 800e9dc:	0038      	movs	r0, r7
 800e9de:	f7ff ff01 	bl	800e7e4 <xTimerGenericCommand>
 800e9e2:	e7e9      	b.n	800e9b8 <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800e9e4:	9b05      	ldr	r3, [sp, #20]
 800e9e6:	0020      	movs	r0, r4
 800e9e8:	9302      	str	r3, [sp, #8]
 800e9ea:	9a02      	ldr	r2, [sp, #8]
 800e9ec:	69a3      	ldr	r3, [r4, #24]
 800e9ee:	4694      	mov	ip, r2
 800e9f0:	4463      	add	r3, ip
 800e9f2:	0019      	movs	r1, r3
 800e9f4:	0013      	movs	r3, r2
 800e9f6:	0032      	movs	r2, r6
 800e9f8:	f7ff fe96 	bl	800e728 <prvInsertTimerInActiveList>
 800e9fc:	2801      	cmp	r0, #1
 800e9fe:	d000      	beq.n	800ea02 <prvTimerTask+0x15e>
 800ea00:	e777      	b.n	800e8f2 <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea04:	0020      	movs	r0, r4
 800ea06:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ea08:	69e3      	ldr	r3, [r4, #28]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d000      	beq.n	800ea10 <prvTimerTask+0x16c>
 800ea0e:	e770      	b.n	800e8f2 <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea10:	69a1      	ldr	r1, [r4, #24]
 800ea12:	9b05      	ldr	r3, [sp, #20]
 800ea14:	468c      	mov	ip, r1
 800ea16:	9302      	str	r3, [sp, #8]
 800ea18:	4463      	add	r3, ip
 800ea1a:	001a      	movs	r2, r3
 800ea1c:	465b      	mov	r3, fp
 800ea1e:	2100      	movs	r1, #0
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	0020      	movs	r0, r4
 800ea24:	2300      	movs	r3, #0
 800ea26:	f7ff fedd 	bl	800e7e4 <xTimerGenericCommand>
 800ea2a:	e762      	b.n	800e8f2 <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea2c:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea2e:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea30:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea32:	0032      	movs	r2, r6
 800ea34:	1989      	adds	r1, r1, r6
 800ea36:	0020      	movs	r0, r4
 800ea38:	f7ff fe76 	bl	800e728 <prvInsertTimerInActiveList>
 800ea3c:	e759      	b.n	800e8f2 <prvTimerTask+0x4e>
 800ea3e:	46c0      	nop			; (mov r8, r8)
 800ea40:	20002c28 	.word	0x20002c28

0800ea44 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ea44:	b510      	push	{r4, lr}
 800ea46:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800ea48:	f000 f860 	bl	800eb0c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ea4c:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800ea4e:	f000 f869 	bl	800eb24 <vPortExitCritical>

	return pvReturn;
}
 800ea52:	0020      	movs	r0, r4
 800ea54:	bd10      	pop	{r4, pc}
 800ea56:	46c0      	nop			; (mov r8, r8)

0800ea58 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800ea58:	b672      	cpsid	i
 800ea5a:	e7fe      	b.n	800ea5a <prvTaskExitError+0x2>

0800ea5c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800ea5c:	4a06      	ldr	r2, [pc, #24]	; (800ea78 <pxCurrentTCBConst2>)
 800ea5e:	6813      	ldr	r3, [r2, #0]
 800ea60:	6818      	ldr	r0, [r3, #0]
 800ea62:	3020      	adds	r0, #32
 800ea64:	f380 8809 	msr	PSP, r0
 800ea68:	2002      	movs	r0, #2
 800ea6a:	f380 8814 	msr	CONTROL, r0
 800ea6e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800ea70:	46ae      	mov	lr, r5
 800ea72:	b662      	cpsie	i
 800ea74:	bd00      	pop	{pc}
 800ea76:	46c0      	nop			; (mov r8, r8)

0800ea78 <pxCurrentTCBConst2>:
 800ea78:	20002b04 	.word	0x20002b04

0800ea7c <pxPortInitialiseStack>:
{
 800ea7c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea7e:	2480      	movs	r4, #128	; 0x80
 800ea80:	1f03      	subs	r3, r0, #4
 800ea82:	0464      	lsls	r4, r4, #17
 800ea84:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800ea86:	3b04      	subs	r3, #4
 800ea88:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea8a:	4903      	ldr	r1, [pc, #12]	; (800ea98 <pxPortInitialiseStack+0x1c>)
 800ea8c:	3b04      	subs	r3, #4
 800ea8e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea90:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800ea92:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea94:	601a      	str	r2, [r3, #0]
}
 800ea96:	bd10      	pop	{r4, pc}
 800ea98:	0800ea59 	.word	0x0800ea59

0800ea9c <SVC_Handler>:
 800ea9c:	4770      	bx	lr
 800ea9e:	46c0      	nop			; (mov r8, r8)

0800eaa0 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800eaa0:	22ff      	movs	r2, #255	; 0xff
 800eaa2:	4b0f      	ldr	r3, [pc, #60]	; (800eae0 <xPortStartScheduler+0x40>)
 800eaa4:	0412      	lsls	r2, r2, #16
 800eaa6:	6819      	ldr	r1, [r3, #0]
{
 800eaa8:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800eaae:	22ff      	movs	r2, #255	; 0xff
 800eab0:	6819      	ldr	r1, [r3, #0]
 800eab2:	0612      	lsls	r2, r2, #24
 800eab4:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eab6:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800eab8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eaba:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <xPortStartScheduler+0x44>)
 800eabc:	0089      	lsls	r1, r1, #2
 800eabe:	6818      	ldr	r0, [r3, #0]
 800eac0:	f7f1 fb46 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800eac4:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eac6:	4b08      	ldr	r3, [pc, #32]	; (800eae8 <xPortStartScheduler+0x48>)
 800eac8:	3801      	subs	r0, #1
 800eaca:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800eacc:	4b07      	ldr	r3, [pc, #28]	; (800eaec <xPortStartScheduler+0x4c>)
 800eace:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800ead0:	2200      	movs	r2, #0
 800ead2:	4b07      	ldr	r3, [pc, #28]	; (800eaf0 <xPortStartScheduler+0x50>)
 800ead4:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800ead6:	f7ff ffc1 	bl	800ea5c <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800eada:	b672      	cpsid	i
 800eadc:	e7fe      	b.n	800eadc <xPortStartScheduler+0x3c>
 800eade:	46c0      	nop			; (mov r8, r8)
 800eae0:	e000ed20 	.word	0xe000ed20
 800eae4:	200000b4 	.word	0x200000b4
 800eae8:	e000e014 	.word	0xe000e014
 800eaec:	e000e010 	.word	0xe000e010
 800eaf0:	200000c8 	.word	0x200000c8

0800eaf4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800eaf4:	2280      	movs	r2, #128	; 0x80
 800eaf6:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <vPortYield+0x14>)
 800eaf8:	0552      	lsls	r2, r2, #21
 800eafa:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800eafc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800eb00:	f3bf 8f6f 	isb	sy
}
 800eb04:	4770      	bx	lr
 800eb06:	46c0      	nop			; (mov r8, r8)
 800eb08:	e000ed04 	.word	0xe000ed04

0800eb0c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800eb0c:	b672      	cpsid	i
    uxCriticalNesting++;
 800eb0e:	4a04      	ldr	r2, [pc, #16]	; (800eb20 <vPortEnterCritical+0x14>)
 800eb10:	6813      	ldr	r3, [r2, #0]
 800eb12:	3301      	adds	r3, #1
 800eb14:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800eb16:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800eb1a:	f3bf 8f6f 	isb	sy
}
 800eb1e:	4770      	bx	lr
 800eb20:	200000c8 	.word	0x200000c8

0800eb24 <vPortExitCritical>:
    uxCriticalNesting--;
 800eb24:	4a03      	ldr	r2, [pc, #12]	; (800eb34 <vPortExitCritical+0x10>)
 800eb26:	6813      	ldr	r3, [r2, #0]
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d100      	bne.n	800eb32 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800eb30:	b662      	cpsie	i
}
 800eb32:	4770      	bx	lr
 800eb34:	200000c8 	.word	0x200000c8

0800eb38 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800eb38:	f3ef 8010 	mrs	r0, PRIMASK
 800eb3c:	b672      	cpsid	i
 800eb3e:	4770      	bx	lr
}
 800eb40:	2000      	movs	r0, #0
 800eb42:	46c0      	nop			; (mov r8, r8)

0800eb44 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800eb44:	f380 8810 	msr	PRIMASK, r0
 800eb48:	4770      	bx	lr
 800eb4a:	46c0      	nop			; (mov r8, r8)

0800eb4c <PendSV_Handler>:
	__asm volatile
 800eb4c:	f3ef 8009 	mrs	r0, PSP
 800eb50:	4b0e      	ldr	r3, [pc, #56]	; (800eb8c <pxCurrentTCBConst>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	3820      	subs	r0, #32
 800eb56:	6010      	str	r0, [r2, #0]
 800eb58:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800eb5a:	4644      	mov	r4, r8
 800eb5c:	464d      	mov	r5, r9
 800eb5e:	4656      	mov	r6, sl
 800eb60:	465f      	mov	r7, fp
 800eb62:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800eb64:	b508      	push	{r3, lr}
 800eb66:	b672      	cpsid	i
 800eb68:	f7ff fb4e 	bl	800e208 <vTaskSwitchContext>
 800eb6c:	b662      	cpsie	i
 800eb6e:	bc0c      	pop	{r2, r3}
 800eb70:	6811      	ldr	r1, [r2, #0]
 800eb72:	6808      	ldr	r0, [r1, #0]
 800eb74:	3010      	adds	r0, #16
 800eb76:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800eb78:	46a0      	mov	r8, r4
 800eb7a:	46a9      	mov	r9, r5
 800eb7c:	46b2      	mov	sl, r6
 800eb7e:	46bb      	mov	fp, r7
 800eb80:	f380 8809 	msr	PSP, r0
 800eb84:	3820      	subs	r0, #32
 800eb86:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800eb88:	4718      	bx	r3
 800eb8a:	46c0      	nop			; (mov r8, r8)

0800eb8c <pxCurrentTCBConst>:
 800eb8c:	20002b04 	.word	0x20002b04

0800eb90 <xPortSysTickHandler>:
{
 800eb90:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb92:	f7ff ffd1 	bl	800eb38 <ulSetInterruptMaskFromISR>
 800eb96:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800eb98:	f7ff f98e 	bl	800deb8 <xTaskIncrementTick>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	d003      	beq.n	800eba8 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800eba0:	2280      	movs	r2, #128	; 0x80
 800eba2:	4b03      	ldr	r3, [pc, #12]	; (800ebb0 <xPortSysTickHandler+0x20>)
 800eba4:	0552      	lsls	r2, r2, #21
 800eba6:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800eba8:	0020      	movs	r0, r4
 800ebaa:	f7ff ffcb 	bl	800eb44 <vClearInterruptMaskFromISR>
}
 800ebae:	bd10      	pop	{r4, pc}
 800ebb0:	e000ed04 	.word	0xe000ed04

0800ebb4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebb4:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebb6:	4c11      	ldr	r4, [pc, #68]	; (800ebfc <prvInsertBlockIntoFreeList+0x48>)
 800ebb8:	0022      	movs	r2, r4
 800ebba:	e000      	b.n	800ebbe <prvInsertBlockIntoFreeList+0xa>
 800ebbc:	001a      	movs	r2, r3
 800ebbe:	6813      	ldr	r3, [r2, #0]
 800ebc0:	4283      	cmp	r3, r0
 800ebc2:	d3fb      	bcc.n	800ebbc <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebc4:	6851      	ldr	r1, [r2, #4]
 800ebc6:	1855      	adds	r5, r2, r1
 800ebc8:	42a8      	cmp	r0, r5
 800ebca:	d012      	beq.n	800ebf2 <prvInsertBlockIntoFreeList+0x3e>
 800ebcc:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebce:	1845      	adds	r5, r0, r1
 800ebd0:	42ab      	cmp	r3, r5
 800ebd2:	d004      	beq.n	800ebde <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebd4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebd6:	4290      	cmp	r0, r2
 800ebd8:	d000      	beq.n	800ebdc <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebda:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebdc:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebde:	68a4      	ldr	r4, [r4, #8]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d0f7      	beq.n	800ebd4 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebe4:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebe6:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebe8:	46a4      	mov	ip, r4
 800ebea:	4461      	add	r1, ip
 800ebec:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebee:	6003      	str	r3, [r0, #0]
 800ebf0:	e7f1      	b.n	800ebd6 <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebf2:	6840      	ldr	r0, [r0, #4]
 800ebf4:	1809      	adds	r1, r1, r0
 800ebf6:	6051      	str	r1, [r2, #4]
 800ebf8:	0010      	movs	r0, r2
 800ebfa:	e7e8      	b.n	800ebce <prvInsertBlockIntoFreeList+0x1a>
 800ebfc:	20002c60 	.word	0x20002c60

0800ec00 <pvPortMalloc>:
{
 800ec00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec02:	46c6      	mov	lr, r8
 800ec04:	b500      	push	{lr}
 800ec06:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800ec08:	f7ff f942 	bl	800de90 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ec0c:	4d35      	ldr	r5, [pc, #212]	; (800ece4 <pvPortMalloc+0xe4>)
 800ec0e:	68ab      	ldr	r3, [r5, #8]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d03d      	beq.n	800ec90 <pvPortMalloc+0x90>
 800ec14:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec16:	4226      	tst	r6, r4
 800ec18:	d101      	bne.n	800ec1e <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800ec1a:	2c00      	cmp	r4, #0
 800ec1c:	d108      	bne.n	800ec30 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800ec1e:	f7ff f9d5 	bl	800dfcc <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800ec22:	f7fd fcc1 	bl	800c5a8 <vApplicationMallocFailedHook>
 800ec26:	2700      	movs	r7, #0
}
 800ec28:	0038      	movs	r0, r7
 800ec2a:	bc04      	pop	{r2}
 800ec2c:	4690      	mov	r8, r2
 800ec2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800ec30:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec32:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800ec34:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec36:	421a      	tst	r2, r3
 800ec38:	d145      	bne.n	800ecc6 <pvPortMalloc+0xc6>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0ef      	beq.n	800ec1e <pvPortMalloc+0x1e>
 800ec3e:	696a      	ldr	r2, [r5, #20]
 800ec40:	4690      	mov	r8, r2
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d3eb      	bcc.n	800ec1e <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800ec46:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800ec48:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec4a:	e004      	b.n	800ec56 <pvPortMalloc+0x56>
 800ec4c:	6822      	ldr	r2, [r4, #0]
 800ec4e:	2a00      	cmp	r2, #0
 800ec50:	d004      	beq.n	800ec5c <pvPortMalloc+0x5c>
 800ec52:	0020      	movs	r0, r4
 800ec54:	0014      	movs	r4, r2
 800ec56:	6861      	ldr	r1, [r4, #4]
 800ec58:	4299      	cmp	r1, r3
 800ec5a:	d3f7      	bcc.n	800ec4c <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800ec5c:	68aa      	ldr	r2, [r5, #8]
 800ec5e:	42a2      	cmp	r2, r4
 800ec60:	d0dd      	beq.n	800ec1e <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec62:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec64:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec66:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec68:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec6a:	1aca      	subs	r2, r1, r3
 800ec6c:	2a10      	cmp	r2, #16
 800ec6e:	d831      	bhi.n	800ecd4 <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec70:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec72:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec74:	1a5b      	subs	r3, r3, r1
 800ec76:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d200      	bcs.n	800ec7e <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec7c:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800ec7e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec80:	4331      	orrs	r1, r6
 800ec82:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec84:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800ec86:	f7ff f9a1 	bl	800dfcc <xTaskResumeAll>
		if( pvReturn == NULL )
 800ec8a:	2f00      	cmp	r7, #0
 800ec8c:	d1cc      	bne.n	800ec28 <pvPortMalloc+0x28>
 800ec8e:	e7c8      	b.n	800ec22 <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec90:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800ec92:	4b15      	ldr	r3, [pc, #84]	; (800ece8 <pvPortMalloc+0xe8>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec94:	4219      	tst	r1, r3
 800ec96:	d119      	bne.n	800eccc <pvPortMalloc+0xcc>
 800ec98:	001a      	movs	r2, r3
 800ec9a:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800ec9c:	26fd      	movs	r6, #253	; 0xfd
 800ec9e:	01b6      	lsls	r6, r6, #6
 800eca0:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800eca2:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800eca4:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800eca6:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eca8:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800ecaa:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ecac:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecae:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800ecb0:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecb2:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800ecb4:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ecb6:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800ecb8:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ecba:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ecbc:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecbe:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecc0:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecc2:	60ee      	str	r6, [r5, #12]
 800ecc4:	e7a7      	b.n	800ec16 <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecc6:	4393      	bics	r3, r2
 800ecc8:	3308      	adds	r3, #8
 800ecca:	e7b6      	b.n	800ec3a <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800eccc:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ecce:	438a      	bics	r2, r1
 800ecd0:	0011      	movs	r1, r2
 800ecd2:	e7e3      	b.n	800ec9c <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ecd4:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ecd6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecd8:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ecda:	f7ff ff6b 	bl	800ebb4 <prvInsertBlockIntoFreeList>
 800ecde:	6861      	ldr	r1, [r4, #4]
 800ece0:	e7c6      	b.n	800ec70 <pvPortMalloc+0x70>
 800ece2:	46c0      	nop			; (mov r8, r8)
 800ece4:	20002c60 	.word	0x20002c60
 800ece8:	20002c78 	.word	0x20002c78

0800ecec <vPortFree>:
{
 800ecec:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d009      	beq.n	800ed06 <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecf2:	4d0d      	ldr	r5, [pc, #52]	; (800ed28 <vPortFree+0x3c>)
 800ecf4:	3808      	subs	r0, #8
 800ecf6:	6843      	ldr	r3, [r0, #4]
 800ecf8:	68ea      	ldr	r2, [r5, #12]
 800ecfa:	0004      	movs	r4, r0
 800ecfc:	421a      	tst	r2, r3
 800ecfe:	d002      	beq.n	800ed06 <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800ed00:	6801      	ldr	r1, [r0, #0]
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d000      	beq.n	800ed08 <vPortFree+0x1c>
}
 800ed06:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed08:	4393      	bics	r3, r2
 800ed0a:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ed0c:	f7ff f8c0 	bl	800de90 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed10:	696a      	ldr	r2, [r5, #20]
 800ed12:	6863      	ldr	r3, [r4, #4]
 800ed14:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed16:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed18:	4463      	add	r3, ip
 800ed1a:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed1c:	f7ff ff4a 	bl	800ebb4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ed20:	f7ff f954 	bl	800dfcc <xTaskResumeAll>
}
 800ed24:	e7ef      	b.n	800ed06 <vPortFree+0x1a>
 800ed26:	46c0      	nop			; (mov r8, r8)
 800ed28:	20002c60 	.word	0x20002c60

0800ed2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ed2c:	b510      	push	{r4, lr}
 800ed2e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ed30:	f002 f88e 	bl	8010e50 <HAL_RCC_GetHCLKFreq>
 800ed34:	21fa      	movs	r1, #250	; 0xfa
 800ed36:	0089      	lsls	r1, r1, #2
 800ed38:	f7f1 fa0a 	bl	8000150 <__udivsi3>
 800ed3c:	f000 fb28 	bl	800f390 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ed40:	2001      	movs	r0, #1
 800ed42:	2200      	movs	r2, #0
 800ed44:	0021      	movs	r1, r4
 800ed46:	4240      	negs	r0, r0
 800ed48:	f000 fae2 	bl	800f310 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	bd10      	pop	{r4, pc}

0800ed50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed50:	2110      	movs	r1, #16
 800ed52:	4a06      	ldr	r2, [pc, #24]	; (800ed6c <HAL_Init+0x1c>)
{
 800ed54:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed56:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ed58:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed5a:	430b      	orrs	r3, r1
 800ed5c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ed5e:	f7ff ffe5 	bl	800ed2c <HAL_InitTick>
  HAL_MspInit();
 800ed62:	f001 fc69 	bl	8010638 <HAL_MspInit>
}
 800ed66:	2000      	movs	r0, #0
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	46c0      	nop			; (mov r8, r8)
 800ed6c:	40022000 	.word	0x40022000

0800ed70 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ed70:	4a02      	ldr	r2, [pc, #8]	; (800ed7c <HAL_IncTick+0xc>)
 800ed72:	6813      	ldr	r3, [r2, #0]
 800ed74:	3301      	adds	r3, #1
 800ed76:	6013      	str	r3, [r2, #0]
}
 800ed78:	4770      	bx	lr
 800ed7a:	46c0      	nop			; (mov r8, r8)
 800ed7c:	20006bc0 	.word	0x20006bc0

0800ed80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ed80:	4b01      	ldr	r3, [pc, #4]	; (800ed88 <HAL_GetTick+0x8>)
 800ed82:	6818      	ldr	r0, [r3, #0]
}
 800ed84:	4770      	bx	lr
 800ed86:	46c0      	nop			; (mov r8, r8)
 800ed88:	20006bc0 	.word	0x20006bc0

0800ed8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ed8c:	b510      	push	{r4, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ed92:	f7ff fff5 	bl	800ed80 <HAL_GetTick>
 800ed96:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800ed98:	f7ff fff2 	bl	800ed80 <HAL_GetTick>
 800ed9c:	9b01      	ldr	r3, [sp, #4]
 800ed9e:	1b00      	subs	r0, r0, r4
 800eda0:	4298      	cmp	r0, r3
 800eda2:	d3f9      	bcc.n	800ed98 <HAL_Delay+0xc>
  {
  }
}
 800eda4:	b002      	add	sp, #8
 800eda6:	bd10      	pop	{r4, pc}

0800eda8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800eda8:	4b01      	ldr	r3, [pc, #4]	; (800edb0 <HAL_GetREVID+0x8>)
 800edaa:	6818      	ldr	r0, [r3, #0]
 800edac:	0c00      	lsrs	r0, r0, #16
}
 800edae:	4770      	bx	lr
 800edb0:	40015800 	.word	0x40015800

0800edb4 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800edb4:	4b02      	ldr	r3, [pc, #8]	; (800edc0 <HAL_GetDEVID+0xc>)
 800edb6:	6818      	ldr	r0, [r3, #0]
 800edb8:	0500      	lsls	r0, r0, #20
 800edba:	0d00      	lsrs	r0, r0, #20
}
 800edbc:	4770      	bx	lr
 800edbe:	46c0      	nop			; (mov r8, r8)
 800edc0:	40015800 	.word	0x40015800

0800edc4 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800edc4:	2303      	movs	r3, #3
 800edc6:	6802      	ldr	r2, [r0, #0]
{
 800edc8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800edca:	6891      	ldr	r1, [r2, #8]
{
 800edcc:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800edce:	400b      	ands	r3, r1
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d001      	beq.n	800edd8 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800edd4:	2000      	movs	r0, #0
}
 800edd6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800edd8:	6811      	ldr	r1, [r2, #0]
 800edda:	420b      	tst	r3, r1
 800eddc:	d00e      	beq.n	800edfc <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800edde:	2305      	movs	r3, #5
 800ede0:	6891      	ldr	r1, [r2, #8]
 800ede2:	400b      	ands	r3, r1
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d00d      	beq.n	800ee04 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ede8:	2210      	movs	r2, #16
 800edea:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800edec:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edee:	4313      	orrs	r3, r2
 800edf0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800edf4:	3a0f      	subs	r2, #15
 800edf6:	4313      	orrs	r3, r2
 800edf8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800edfa:	e7ec      	b.n	800edd6 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800edfc:	68d3      	ldr	r3, [r2, #12]
 800edfe:	041b      	lsls	r3, r3, #16
 800ee00:	d4ed      	bmi.n	800edde <ADC_Disable+0x1a>
 800ee02:	e7e7      	b.n	800edd4 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800ee04:	2102      	movs	r1, #2
 800ee06:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ee08:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800ee0a:	430b      	orrs	r3, r1
 800ee0c:	6093      	str	r3, [r2, #8]
 800ee0e:	2303      	movs	r3, #3
 800ee10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ee12:	f7ff ffb5 	bl	800ed80 <HAL_GetTick>
 800ee16:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ee18:	e004      	b.n	800ee24 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ee1a:	f7ff ffb1 	bl	800ed80 <HAL_GetTick>
 800ee1e:	1b80      	subs	r0, r0, r6
 800ee20:	2802      	cmp	r0, #2
 800ee22:	d804      	bhi.n	800ee2e <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ee24:	6823      	ldr	r3, [r4, #0]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	421d      	tst	r5, r3
 800ee2a:	d1f6      	bne.n	800ee1a <ADC_Disable+0x56>
 800ee2c:	e7d2      	b.n	800edd4 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee2e:	2210      	movs	r2, #16
 800ee30:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800ee32:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee34:	4313      	orrs	r3, r2
 800ee36:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ee38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee3a:	431d      	orrs	r5, r3
 800ee3c:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ee3e:	e7ca      	b.n	800edd6 <ADC_Disable+0x12>

0800ee40 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800ee40:	2300      	movs	r3, #0
{
 800ee42:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ee44:	6802      	ldr	r2, [r0, #0]
{
 800ee46:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800ee48:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ee4a:	6891      	ldr	r1, [r2, #8]
 800ee4c:	3303      	adds	r3, #3
{
 800ee4e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ee50:	400b      	ands	r3, r1
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d031      	beq.n	800eeba <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ee56:	6891      	ldr	r1, [r2, #8]
 800ee58:	4b20      	ldr	r3, [pc, #128]	; (800eedc <ADC_Enable+0x9c>)
 800ee5a:	4219      	tst	r1, r3
 800ee5c:	d122      	bne.n	800eea4 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800ee5e:	2101      	movs	r1, #1
 800ee60:	6893      	ldr	r3, [r2, #8]
 800ee62:	430b      	orrs	r3, r1
 800ee64:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800ee66:	4b1e      	ldr	r3, [pc, #120]	; (800eee0 <ADC_Enable+0xa0>)
 800ee68:	491e      	ldr	r1, [pc, #120]	; (800eee4 <ADC_Enable+0xa4>)
 800ee6a:	6818      	ldr	r0, [r3, #0]
 800ee6c:	f7f1 f970 	bl	8000150 <__udivsi3>
 800ee70:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800ee72:	9b01      	ldr	r3, [sp, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d005      	beq.n	800ee84 <ADC_Enable+0x44>
      wait_loop_index--;
 800ee78:	9b01      	ldr	r3, [sp, #4]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800ee7e:	9b01      	ldr	r3, [sp, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1f9      	bne.n	800ee78 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800ee84:	f7ff ff7c 	bl	800ed80 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ee88:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800ee8a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ee8c:	e004      	b.n	800ee98 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ee8e:	f7ff ff77 	bl	800ed80 <HAL_GetTick>
 800ee92:	1b80      	subs	r0, r0, r6
 800ee94:	2802      	cmp	r0, #2
 800ee96:	d818      	bhi.n	800eeca <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	421d      	tst	r5, r3
 800ee9e:	d0f6      	beq.n	800ee8e <ADC_Enable+0x4e>
  return HAL_OK;
 800eea0:	2000      	movs	r0, #0
 800eea2:	e008      	b.n	800eeb6 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eea4:	2210      	movs	r2, #16
      return HAL_ERROR;
 800eea6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eeae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eeb0:	3a0f      	subs	r2, #15
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800eeb6:	b002      	add	sp, #8
 800eeb8:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800eeba:	6811      	ldr	r1, [r2, #0]
 800eebc:	420b      	tst	r3, r1
 800eebe:	d1ef      	bne.n	800eea0 <ADC_Enable+0x60>
 800eec0:	68d3      	ldr	r3, [r2, #12]
 800eec2:	041b      	lsls	r3, r3, #16
 800eec4:	d5c7      	bpl.n	800ee56 <ADC_Enable+0x16>
  return HAL_OK;
 800eec6:	2000      	movs	r0, #0
 800eec8:	e7f5      	b.n	800eeb6 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eeca:	2210      	movs	r2, #16
 800eecc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800eece:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eed0:	4313      	orrs	r3, r2
 800eed2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eed4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eed6:	431d      	orrs	r5, r3
 800eed8:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800eeda:	e7ec      	b.n	800eeb6 <ADC_Enable+0x76>
 800eedc:	80000017 	.word	0x80000017
 800eee0:	200000b4 	.word	0x200000b4
 800eee4:	000f4240 	.word	0x000f4240

0800eee8 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800eee8:	2204      	movs	r2, #4
 800eeea:	6803      	ldr	r3, [r0, #0]
{
 800eeec:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800eeee:	6899      	ldr	r1, [r3, #8]
{
 800eef0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800eef2:	420a      	tst	r2, r1
 800eef4:	d010      	beq.n	800ef18 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800eef6:	6899      	ldr	r1, [r3, #8]
 800eef8:	420a      	tst	r2, r1
 800eefa:	d10f      	bne.n	800ef1c <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800eefc:	f7ff ff40 	bl	800ed80 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ef00:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800ef02:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ef04:	e004      	b.n	800ef10 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800ef06:	f7ff ff3b 	bl	800ed80 <HAL_GetTick>
 800ef0a:	1b80      	subs	r0, r0, r6
 800ef0c:	2802      	cmp	r0, #2
 800ef0e:	d80d      	bhi.n	800ef2c <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ef10:	6823      	ldr	r3, [r4, #0]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	421d      	tst	r5, r3
 800ef16:	d1f6      	bne.n	800ef06 <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800ef18:	2000      	movs	r0, #0
}
 800ef1a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800ef1c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ef1e:	0792      	lsls	r2, r2, #30
 800ef20:	d4ec      	bmi.n	800eefc <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800ef22:	2110      	movs	r1, #16
 800ef24:	689a      	ldr	r2, [r3, #8]
 800ef26:	430a      	orrs	r2, r1
 800ef28:	609a      	str	r2, [r3, #8]
 800ef2a:	e7e7      	b.n	800eefc <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef2c:	2210      	movs	r2, #16
 800ef2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef30:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef32:	4313      	orrs	r3, r2
 800ef34:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef38:	3a0f      	subs	r2, #15
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ef3e:	e7ec      	b.n	800ef1a <ADC_ConversionStop+0x32>

0800ef40 <HAL_ADC_Init>:
{
 800ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef42:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800ef44:	d100      	bne.n	800ef48 <HAL_ADC_Init+0x8>
 800ef46:	e075      	b.n	800f034 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ef48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d068      	beq.n	800f020 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ef4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef50:	06db      	lsls	r3, r3, #27
 800ef52:	d505      	bpl.n	800ef60 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef54:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800ef56:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800ef60:	2004      	movs	r0, #4
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	689a      	ldr	r2, [r3, #8]
 800ef66:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800ef68:	d1f4      	bne.n	800ef54 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800ef6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ef6c:	4942      	ldr	r1, [pc, #264]	; (800f078 <HAL_ADC_Init+0x138>)
 800ef6e:	400a      	ands	r2, r1
 800ef70:	3106      	adds	r1, #6
 800ef72:	31ff      	adds	r1, #255	; 0xff
 800ef74:	430a      	orrs	r2, r1
 800ef76:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ef78:	2203      	movs	r2, #3
 800ef7a:	6899      	ldr	r1, [r3, #8]
 800ef7c:	400a      	ands	r2, r1
 800ef7e:	2a01      	cmp	r2, #1
 800ef80:	d073      	beq.n	800f06a <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800ef82:	2118      	movs	r1, #24
 800ef84:	68da      	ldr	r2, [r3, #12]
 800ef86:	438a      	bics	r2, r1
 800ef88:	68a1      	ldr	r1, [r4, #8]
 800ef8a:	430a      	orrs	r2, r1
 800ef8c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800ef8e:	691a      	ldr	r2, [r3, #16]
 800ef90:	6861      	ldr	r1, [r4, #4]
 800ef92:	0092      	lsls	r2, r2, #2
 800ef94:	0892      	lsrs	r2, r2, #2
 800ef96:	430a      	orrs	r2, r1
 800ef98:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800ef9a:	68da      	ldr	r2, [r3, #12]
 800ef9c:	4937      	ldr	r1, [pc, #220]	; (800f07c <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800ef9e:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800efa0:	400a      	ands	r2, r1
 800efa2:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800efa4:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800efa6:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800efa8:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800efaa:	69e2      	ldr	r2, [r4, #28]
 800efac:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800efae:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800efb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800efb2:	3a01      	subs	r2, #1
 800efb4:	1e55      	subs	r5, r2, #1
 800efb6:	41aa      	sbcs	r2, r5
 800efb8:	0315      	lsls	r5, r2, #12
 800efba:	68e2      	ldr	r2, [r4, #12]
 800efbc:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800efbe:	6922      	ldr	r2, [r4, #16]
 800efc0:	4339      	orrs	r1, r7
 800efc2:	2a02      	cmp	r2, #2
 800efc4:	d100      	bne.n	800efc8 <HAL_ADC_Init+0x88>
 800efc6:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800efc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800efca:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800efcc:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800efce:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800efd0:	432a      	orrs	r2, r5
 800efd2:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800efd4:	2901      	cmp	r1, #1
 800efd6:	d042      	beq.n	800f05e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800efd8:	20c2      	movs	r0, #194	; 0xc2
 800efda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800efdc:	30ff      	adds	r0, #255	; 0xff
 800efde:	4281      	cmp	r1, r0
 800efe0:	d002      	beq.n	800efe8 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800efe2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800efe4:	4301      	orrs	r1, r0
 800efe6:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800efe8:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800efea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800efec:	4311      	orrs	r1, r2
 800efee:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800eff0:	2180      	movs	r1, #128	; 0x80
 800eff2:	0549      	lsls	r1, r1, #21
 800eff4:	428d      	cmp	r5, r1
 800eff6:	d01f      	beq.n	800f038 <HAL_ADC_Init+0xf8>
 800eff8:	1e69      	subs	r1, r5, #1
 800effa:	2906      	cmp	r1, #6
 800effc:	d91c      	bls.n	800f038 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	491f      	ldr	r1, [pc, #124]	; (800f080 <HAL_ADC_Init+0x140>)
 800f002:	400b      	ands	r3, r1
 800f004:	4293      	cmp	r3, r2
 800f006:	d020      	beq.n	800f04a <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f008:	2212      	movs	r2, #18
 800f00a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f00c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f00e:	4393      	bics	r3, r2
 800f010:	3a02      	subs	r2, #2
 800f012:	4313      	orrs	r3, r2
 800f014:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f016:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f018:	3a0f      	subs	r2, #15
 800f01a:	4313      	orrs	r3, r2
 800f01c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f01e:	e79e      	b.n	800ef5e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f020:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f022:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f024:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f026:	f7fc fb39 	bl	800b69c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f02a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f02c:	06db      	lsls	r3, r3, #27
 800f02e:	d500      	bpl.n	800f032 <HAL_ADC_Init+0xf2>
 800f030:	e790      	b.n	800ef54 <HAL_ADC_Init+0x14>
 800f032:	e795      	b.n	800ef60 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f034:	2001      	movs	r0, #1
 800f036:	e792      	b.n	800ef5e <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f038:	2107      	movs	r1, #7
 800f03a:	6958      	ldr	r0, [r3, #20]
 800f03c:	4388      	bics	r0, r1
 800f03e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f040:	6958      	ldr	r0, [r3, #20]
 800f042:	4029      	ands	r1, r5
 800f044:	4301      	orrs	r1, r0
 800f046:	6159      	str	r1, [r3, #20]
 800f048:	e7d9      	b.n	800effe <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f04a:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f04c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f04e:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f050:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f052:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f054:	4393      	bics	r3, r2
 800f056:	3a02      	subs	r2, #2
 800f058:	4313      	orrs	r3, r2
 800f05a:	6463      	str	r3, [r4, #68]	; 0x44
 800f05c:	e77f      	b.n	800ef5e <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f05e:	2e00      	cmp	r6, #0
 800f060:	d1ba      	bne.n	800efd8 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f062:	2180      	movs	r1, #128	; 0x80
 800f064:	0249      	lsls	r1, r1, #9
 800f066:	430a      	orrs	r2, r1
 800f068:	e7b6      	b.n	800efd8 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f06a:	6819      	ldr	r1, [r3, #0]
 800f06c:	420a      	tst	r2, r1
 800f06e:	d194      	bne.n	800ef9a <HAL_ADC_Init+0x5a>
 800f070:	68da      	ldr	r2, [r3, #12]
 800f072:	0412      	lsls	r2, r2, #16
 800f074:	d491      	bmi.n	800ef9a <HAL_ADC_Init+0x5a>
 800f076:	e784      	b.n	800ef82 <HAL_ADC_Init+0x42>
 800f078:	fffffefd 	.word	0xfffffefd
 800f07c:	fffe0219 	.word	0xfffe0219
 800f080:	833fffe7 	.word	0x833fffe7

0800f084 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f084:	6803      	ldr	r3, [r0, #0]
{
 800f086:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f088:	689a      	ldr	r2, [r3, #8]
{
 800f08a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f08c:	0752      	lsls	r2, r2, #29
 800f08e:	d421      	bmi.n	800f0d4 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f090:	2240      	movs	r2, #64	; 0x40
 800f092:	5c81      	ldrb	r1, [r0, r2]
 800f094:	2901      	cmp	r1, #1
 800f096:	d01d      	beq.n	800f0d4 <HAL_ADC_Start+0x50>
 800f098:	2101      	movs	r1, #1
 800f09a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f09c:	69c2      	ldr	r2, [r0, #28]
 800f09e:	2a01      	cmp	r2, #1
 800f0a0:	d112      	bne.n	800f0c8 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f0a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f0a4:	490c      	ldr	r1, [pc, #48]	; (800f0d8 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f0a6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f0a8:	4011      	ands	r1, r2
 800f0aa:	2280      	movs	r2, #128	; 0x80
 800f0ac:	0052      	lsls	r2, r2, #1
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f0b2:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f0b8:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f0ba:	321c      	adds	r2, #28
 800f0bc:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f0be:	689a      	ldr	r2, [r3, #8]
 800f0c0:	393c      	subs	r1, #60	; 0x3c
 800f0c2:	430a      	orrs	r2, r1
 800f0c4:	609a      	str	r2, [r3, #8]
}
 800f0c6:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f0c8:	f7ff feba 	bl	800ee40 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d1fa      	bne.n	800f0c6 <HAL_ADC_Start+0x42>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	e7e6      	b.n	800f0a2 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f0d4:	2002      	movs	r0, #2
 800f0d6:	e7f6      	b.n	800f0c6 <HAL_ADC_Start+0x42>
 800f0d8:	fffff0fe 	.word	0xfffff0fe

0800f0dc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f0dc:	2340      	movs	r3, #64	; 0x40
{ 
 800f0de:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f0e0:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f0e2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f0e4:	2a01      	cmp	r2, #1
 800f0e6:	d014      	beq.n	800f112 <HAL_ADC_Stop+0x36>
 800f0e8:	2501      	movs	r5, #1
 800f0ea:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f0ec:	f7ff fefc 	bl	800eee8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	d003      	beq.n	800f0fc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f0f4:	2340      	movs	r3, #64	; 0x40
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	54e2      	strb	r2, [r4, r3]
}
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f0fc:	0020      	movs	r0, r4
 800f0fe:	f7ff fe61 	bl	800edc4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f102:	2800      	cmp	r0, #0
 800f104:	d1f6      	bne.n	800f0f4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f106:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f108:	4a03      	ldr	r2, [pc, #12]	; (800f118 <HAL_ADC_Stop+0x3c>)
 800f10a:	4013      	ands	r3, r2
 800f10c:	431d      	orrs	r5, r3
 800f10e:	6465      	str	r5, [r4, #68]	; 0x44
 800f110:	e7f0      	b.n	800f0f4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f112:	2002      	movs	r0, #2
 800f114:	e7f1      	b.n	800f0fa <HAL_ADC_Stop+0x1e>
 800f116:	46c0      	nop			; (mov r8, r8)
 800f118:	fffffefe 	.word	0xfffffefe

0800f11c <HAL_ADC_PollForConversion>:
{
 800f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f11e:	6943      	ldr	r3, [r0, #20]
{
 800f120:	0006      	movs	r6, r0
 800f122:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f124:	2b08      	cmp	r3, #8
 800f126:	d04c      	beq.n	800f1c2 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f128:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f12a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	07db      	lsls	r3, r3, #31
 800f130:	d43e      	bmi.n	800f1b0 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f132:	f7ff fe25 	bl	800ed80 <HAL_GetTick>
 800f136:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f138:	6832      	ldr	r2, [r6, #0]
 800f13a:	e001      	b.n	800f140 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f13c:	1c63      	adds	r3, r4, #1
 800f13e:	d127      	bne.n	800f190 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f140:	6813      	ldr	r3, [r2, #0]
 800f142:	421d      	tst	r5, r3
 800f144:	d0fa      	beq.n	800f13c <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f146:	2380      	movs	r3, #128	; 0x80
 800f148:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	430b      	orrs	r3, r1
 800f14e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f150:	23c0      	movs	r3, #192	; 0xc0
 800f152:	68d1      	ldr	r1, [r2, #12]
 800f154:	011b      	lsls	r3, r3, #4
 800f156:	4219      	tst	r1, r3
 800f158:	d113      	bne.n	800f182 <HAL_ADC_PollForConversion+0x66>
 800f15a:	6a33      	ldr	r3, [r6, #32]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d110      	bne.n	800f182 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f160:	6813      	ldr	r3, [r2, #0]
 800f162:	071b      	lsls	r3, r3, #28
 800f164:	d50d      	bpl.n	800f182 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f166:	6893      	ldr	r3, [r2, #8]
 800f168:	075b      	lsls	r3, r3, #29
 800f16a:	d42f      	bmi.n	800f1cc <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f16c:	210c      	movs	r1, #12
 800f16e:	6853      	ldr	r3, [r2, #4]
 800f170:	438b      	bics	r3, r1
 800f172:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f174:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f176:	491a      	ldr	r1, [pc, #104]	; (800f1e0 <HAL_ADC_PollForConversion+0xc4>)
 800f178:	400b      	ands	r3, r1
 800f17a:	3104      	adds	r1, #4
 800f17c:	31ff      	adds	r1, #255	; 0xff
 800f17e:	430b      	orrs	r3, r1
 800f180:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f182:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f184:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f186:	2b00      	cmp	r3, #0
 800f188:	d101      	bne.n	800f18e <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f18a:	330c      	adds	r3, #12
 800f18c:	6013      	str	r3, [r2, #0]
}
 800f18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f190:	2c00      	cmp	r4, #0
 800f192:	d004      	beq.n	800f19e <HAL_ADC_PollForConversion+0x82>
 800f194:	f7ff fdf4 	bl	800ed80 <HAL_GetTick>
 800f198:	1bc0      	subs	r0, r0, r7
 800f19a:	42a0      	cmp	r0, r4
 800f19c:	d9cc      	bls.n	800f138 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f19e:	2204      	movs	r2, #4
 800f1a0:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f1a2:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	2340      	movs	r3, #64	; 0x40
 800f1ac:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f1ae:	e7ee      	b.n	800f18e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1b0:	2220      	movs	r2, #32
 800f1b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2340      	movs	r3, #64	; 0x40
 800f1bc:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f1be:	2001      	movs	r0, #1
 800f1c0:	e7e5      	b.n	800f18e <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f1c2:	f7ff fddd 	bl	800ed80 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f1c6:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f1c8:	0007      	movs	r7, r0
 800f1ca:	e7b5      	b.n	800f138 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1cc:	2120      	movs	r1, #32
 800f1ce:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f1d0:	430b      	orrs	r3, r1
 800f1d2:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f1d4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f1d6:	391f      	subs	r1, #31
 800f1d8:	430b      	orrs	r3, r1
 800f1da:	64b3      	str	r3, [r6, #72]	; 0x48
 800f1dc:	e7d1      	b.n	800f182 <HAL_ADC_PollForConversion+0x66>
 800f1de:	46c0      	nop			; (mov r8, r8)
 800f1e0:	fffffefe 	.word	0xfffffefe

0800f1e4 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f1e4:	2208      	movs	r2, #8
 800f1e6:	6803      	ldr	r3, [r0, #0]
 800f1e8:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f1ea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f1ec:	4770      	bx	lr
 800f1ee:	46c0      	nop			; (mov r8, r8)

0800f1f0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f1f0:	2300      	movs	r3, #0
{
 800f1f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1f4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f1f6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f1f8:	3340      	adds	r3, #64	; 0x40
 800f1fa:	5cc2      	ldrb	r2, [r0, r3]
{
 800f1fc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f1fe:	2a01      	cmp	r2, #1
 800f200:	d044      	beq.n	800f28c <HAL_ADC_ConfigChannel+0x9c>
 800f202:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f204:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f206:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f208:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f20a:	68b3      	ldr	r3, [r6, #8]
 800f20c:	075b      	lsls	r3, r3, #29
 800f20e:	d509      	bpl.n	800f224 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f210:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f212:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f216:	4313      	orrs	r3, r2
 800f218:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f21a:	2340      	movs	r3, #64	; 0x40
 800f21c:	2200      	movs	r2, #0
 800f21e:	54e2      	strb	r2, [r4, r3]
}
 800f220:	b003      	add	sp, #12
 800f222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f224:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f226:	4d33      	ldr	r5, [pc, #204]	; (800f2f4 <HAL_ADC_ConfigChannel+0x104>)
 800f228:	001f      	movs	r7, r3
 800f22a:	46ac      	mov	ip, r5
 800f22c:	684d      	ldr	r5, [r1, #4]
 800f22e:	409a      	lsls	r2, r3
 800f230:	3f10      	subs	r7, #16
 800f232:	4565      	cmp	r5, ip
 800f234:	d02c      	beq.n	800f290 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f236:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f238:	432a      	orrs	r2, r5
 800f23a:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f23c:	2280      	movs	r2, #128	; 0x80
 800f23e:	0552      	lsls	r2, r2, #21
 800f240:	4290      	cmp	r0, r2
 800f242:	d00f      	beq.n	800f264 <HAL_ADC_ConfigChannel+0x74>
 800f244:	3801      	subs	r0, #1
 800f246:	2806      	cmp	r0, #6
 800f248:	d90c      	bls.n	800f264 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800f24a:	2207      	movs	r2, #7
 800f24c:	6888      	ldr	r0, [r1, #8]
 800f24e:	6971      	ldr	r1, [r6, #20]
 800f250:	4011      	ands	r1, r2
 800f252:	4288      	cmp	r0, r1
 800f254:	d006      	beq.n	800f264 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f256:	6971      	ldr	r1, [r6, #20]
 800f258:	4391      	bics	r1, r2
 800f25a:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800f25c:	6971      	ldr	r1, [r6, #20]
 800f25e:	4002      	ands	r2, r0
 800f260:	430a      	orrs	r2, r1
 800f262:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f264:	2f02      	cmp	r7, #2
 800f266:	d80f      	bhi.n	800f288 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f268:	4923      	ldr	r1, [pc, #140]	; (800f2f8 <HAL_ADC_ConfigChannel+0x108>)
 800f26a:	680a      	ldr	r2, [r1, #0]
 800f26c:	2b10      	cmp	r3, #16
 800f26e:	d029      	beq.n	800f2c4 <HAL_ADC_ConfigChannel+0xd4>
 800f270:	3b11      	subs	r3, #17
 800f272:	4258      	negs	r0, r3
 800f274:	4143      	adcs	r3, r0
 800f276:	4821      	ldr	r0, [pc, #132]	; (800f2fc <HAL_ADC_ConfigChannel+0x10c>)
 800f278:	425b      	negs	r3, r3
 800f27a:	4003      	ands	r3, r0
 800f27c:	2080      	movs	r0, #128	; 0x80
 800f27e:	0440      	lsls	r0, r0, #17
 800f280:	4684      	mov	ip, r0
 800f282:	4463      	add	r3, ip
 800f284:	4313      	orrs	r3, r2
 800f286:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f288:	2000      	movs	r0, #0
 800f28a:	e7c6      	b.n	800f21a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800f28c:	2002      	movs	r0, #2
 800f28e:	e7c7      	b.n	800f220 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f290:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800f292:	4391      	bics	r1, r2
 800f294:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f296:	2f02      	cmp	r7, #2
 800f298:	d8f6      	bhi.n	800f288 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f29a:	4a17      	ldr	r2, [pc, #92]	; (800f2f8 <HAL_ADC_ConfigChannel+0x108>)
 800f29c:	6811      	ldr	r1, [r2, #0]
 800f29e:	2b10      	cmp	r3, #16
 800f2a0:	d00e      	beq.n	800f2c0 <HAL_ADC_ConfigChannel+0xd0>
 800f2a2:	3b11      	subs	r3, #17
 800f2a4:	001a      	movs	r2, r3
 800f2a6:	1e53      	subs	r3, r2, #1
 800f2a8:	419a      	sbcs	r2, r3
 800f2aa:	4b14      	ldr	r3, [pc, #80]	; (800f2fc <HAL_ADC_ConfigChannel+0x10c>)
 800f2ac:	4252      	negs	r2, r2
 800f2ae:	4013      	ands	r3, r2
 800f2b0:	4a13      	ldr	r2, [pc, #76]	; (800f300 <HAL_ADC_ConfigChannel+0x110>)
 800f2b2:	4694      	mov	ip, r2
 800f2b4:	4463      	add	r3, ip
 800f2b6:	4a10      	ldr	r2, [pc, #64]	; (800f2f8 <HAL_ADC_ConfigChannel+0x108>)
 800f2b8:	400b      	ands	r3, r1
 800f2ba:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7ac      	b.n	800f21a <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f2c0:	4b10      	ldr	r3, [pc, #64]	; (800f304 <HAL_ADC_ConfigChannel+0x114>)
 800f2c2:	e7f8      	b.n	800f2b6 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f2c4:	2380      	movs	r3, #128	; 0x80
 800f2c6:	041b      	lsls	r3, r3, #16
 800f2c8:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f2ca:	4b0f      	ldr	r3, [pc, #60]	; (800f308 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f2cc:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f2ce:	6818      	ldr	r0, [r3, #0]
 800f2d0:	490e      	ldr	r1, [pc, #56]	; (800f30c <HAL_ADC_ConfigChannel+0x11c>)
 800f2d2:	f7f0 ff3d 	bl	8000150 <__udivsi3>
 800f2d6:	0083      	lsls	r3, r0, #2
 800f2d8:	1818      	adds	r0, r3, r0
 800f2da:	0040      	lsls	r0, r0, #1
 800f2dc:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800f2de:	9b01      	ldr	r3, [sp, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d0d1      	beq.n	800f288 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800f2e4:	9b01      	ldr	r3, [sp, #4]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800f2ea:	9b01      	ldr	r3, [sp, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1f9      	bne.n	800f2e4 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	e792      	b.n	800f21a <HAL_ADC_ConfigChannel+0x2a>
 800f2f4:	00001001 	.word	0x00001001
 800f2f8:	40012708 	.word	0x40012708
 800f2fc:	ff400000 	.word	0xff400000
 800f300:	ffbfffff 	.word	0xffbfffff
 800f304:	ff7fffff 	.word	0xff7fffff
 800f308:	200000b4 	.word	0x200000b4
 800f30c:	000f4240 	.word	0x000f4240

0800f310 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f310:	22ff      	movs	r2, #255	; 0xff
 800f312:	2303      	movs	r3, #3
 800f314:	b530      	push	{r4, r5, lr}
 800f316:	0014      	movs	r4, r2
 800f318:	b2c5      	uxtb	r5, r0
 800f31a:	402b      	ands	r3, r5
 800f31c:	00db      	lsls	r3, r3, #3
 800f31e:	409c      	lsls	r4, r3
 800f320:	0189      	lsls	r1, r1, #6
 800f322:	400a      	ands	r2, r1
 800f324:	43e4      	mvns	r4, r4
 800f326:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800f328:	2800      	cmp	r0, #0
 800f32a:	db0b      	blt.n	800f344 <HAL_NVIC_SetPriority+0x34>
 800f32c:	4b0c      	ldr	r3, [pc, #48]	; (800f360 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f32e:	0880      	lsrs	r0, r0, #2
 800f330:	469c      	mov	ip, r3
 800f332:	23c0      	movs	r3, #192	; 0xc0
 800f334:	0080      	lsls	r0, r0, #2
 800f336:	4460      	add	r0, ip
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	58c1      	ldr	r1, [r0, r3]
 800f33c:	400c      	ands	r4, r1
 800f33e:	4322      	orrs	r2, r4
 800f340:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f342:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f344:	230f      	movs	r3, #15
 800f346:	4907      	ldr	r1, [pc, #28]	; (800f364 <HAL_NVIC_SetPriority+0x54>)
 800f348:	402b      	ands	r3, r5
 800f34a:	468c      	mov	ip, r1
 800f34c:	3b08      	subs	r3, #8
 800f34e:	089b      	lsrs	r3, r3, #2
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	4463      	add	r3, ip
 800f354:	69d9      	ldr	r1, [r3, #28]
 800f356:	400c      	ands	r4, r1
 800f358:	4322      	orrs	r2, r4
 800f35a:	61da      	str	r2, [r3, #28]
 800f35c:	e7f1      	b.n	800f342 <HAL_NVIC_SetPriority+0x32>
 800f35e:	46c0      	nop			; (mov r8, r8)
 800f360:	e000e100 	.word	0xe000e100
 800f364:	e000ed00 	.word	0xe000ed00

0800f368 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f368:	231f      	movs	r3, #31
 800f36a:	4018      	ands	r0, r3
 800f36c:	3b1e      	subs	r3, #30
 800f36e:	4083      	lsls	r3, r0
 800f370:	4a01      	ldr	r2, [pc, #4]	; (800f378 <HAL_NVIC_EnableIRQ+0x10>)
 800f372:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f374:	4770      	bx	lr
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	e000e100 	.word	0xe000e100

0800f37c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f37c:	231f      	movs	r3, #31
 800f37e:	4018      	ands	r0, r3
 800f380:	3b1e      	subs	r3, #30
 800f382:	4083      	lsls	r3, r0
 800f384:	2280      	movs	r2, #128	; 0x80
 800f386:	4901      	ldr	r1, [pc, #4]	; (800f38c <HAL_NVIC_DisableIRQ+0x10>)
 800f388:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f38a:	4770      	bx	lr
 800f38c:	e000e100 	.word	0xe000e100

0800f390 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800f390:	4a0a      	ldr	r2, [pc, #40]	; (800f3bc <HAL_SYSTICK_Config+0x2c>)
 800f392:	1e43      	subs	r3, r0, #1
 800f394:	2001      	movs	r0, #1
 800f396:	4293      	cmp	r3, r2
 800f398:	d80e      	bhi.n	800f3b8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f39a:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f39c:	4a08      	ldr	r2, [pc, #32]	; (800f3c0 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f39e:	4809      	ldr	r0, [pc, #36]	; (800f3c4 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f3a0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f3a2:	6a03      	ldr	r3, [r0, #32]
 800f3a4:	0609      	lsls	r1, r1, #24
 800f3a6:	021b      	lsls	r3, r3, #8
 800f3a8:	0a1b      	lsrs	r3, r3, #8
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f3ae:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f3b0:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f3b2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f3b4:	3307      	adds	r3, #7
 800f3b6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f3b8:	4770      	bx	lr
 800f3ba:	46c0      	nop			; (mov r8, r8)
 800f3bc:	00ffffff 	.word	0x00ffffff
 800f3c0:	e000e010 	.word	0xe000e010
 800f3c4:	e000ed00 	.word	0xe000ed00

0800f3c8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f3c8:	4a05      	ldr	r2, [pc, #20]	; (800f3e0 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800f3ca:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f3cc:	2804      	cmp	r0, #4
 800f3ce:	d003      	beq.n	800f3d8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f3d0:	2104      	movs	r1, #4
 800f3d2:	438b      	bics	r3, r1
 800f3d4:	6013      	str	r3, [r2, #0]
  }
}
 800f3d6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f3d8:	4318      	orrs	r0, r3
 800f3da:	6010      	str	r0, [r2, #0]
 800f3dc:	e7fb      	b.n	800f3d6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800f3de:	46c0      	nop			; (mov r8, r8)
 800f3e0:	e000e010 	.word	0xe000e010

0800f3e4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800f3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3e6:	468c      	mov	ip, r1
 800f3e8:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800f3ea:	0891      	lsrs	r1, r2, #2
 800f3ec:	d010      	beq.n	800f410 <CRC_Handle_8+0x2c>
 800f3ee:	4664      	mov	r4, ip
 800f3f0:	008f      	lsls	r7, r1, #2
 800f3f2:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800f3f4:	7823      	ldrb	r3, [r4, #0]
 800f3f6:	7865      	ldrb	r5, [r4, #1]
 800f3f8:	061b      	lsls	r3, r3, #24
 800f3fa:	042d      	lsls	r5, r5, #16
 800f3fc:	432b      	orrs	r3, r5
 800f3fe:	78e5      	ldrb	r5, [r4, #3]
 800f400:	432b      	orrs	r3, r5
 800f402:	78a5      	ldrb	r5, [r4, #2]
 800f404:	3404      	adds	r4, #4
 800f406:	022d      	lsls	r5, r5, #8
 800f408:	432b      	orrs	r3, r5
 800f40a:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800f40c:	42a7      	cmp	r7, r4
 800f40e:	d1f1      	bne.n	800f3f4 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800f410:	2303      	movs	r3, #3
 800f412:	401a      	ands	r2, r3
 800f414:	d00b      	beq.n	800f42e <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f416:	0089      	lsls	r1, r1, #2
 800f418:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800f41a:	2a01      	cmp	r2, #1
 800f41c:	d013      	beq.n	800f446 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800f41e:	2a02      	cmp	r2, #2
 800f420:	d107      	bne.n	800f432 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f422:	5c5a      	ldrb	r2, [r3, r1]
 800f424:	4461      	add	r1, ip
 800f426:	784b      	ldrb	r3, [r1, #1]
 800f428:	0212      	lsls	r2, r2, #8
 800f42a:	4313      	orrs	r3, r2
 800f42c:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f42e:	6830      	ldr	r0, [r6, #0]
}
 800f430:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f432:	5c5a      	ldrb	r2, [r3, r1]
 800f434:	4461      	add	r1, ip
 800f436:	784b      	ldrb	r3, [r1, #1]
 800f438:	0212      	lsls	r2, r2, #8
 800f43a:	4313      	orrs	r3, r2
 800f43c:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800f43e:	788b      	ldrb	r3, [r1, #2]
 800f440:	7033      	strb	r3, [r6, #0]
 800f442:	6806      	ldr	r6, [r0, #0]
 800f444:	e7f3      	b.n	800f42e <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f446:	5ccb      	ldrb	r3, [r1, r3]
 800f448:	7033      	strb	r3, [r6, #0]
 800f44a:	6806      	ldr	r6, [r0, #0]
 800f44c:	e7ef      	b.n	800f42e <CRC_Handle_8+0x4a>
 800f44e:	46c0      	nop			; (mov r8, r8)

0800f450 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800f450:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800f452:	0857      	lsrs	r7, r2, #1
 800f454:	6805      	ldr	r5, [r0, #0]
 800f456:	d00a      	beq.n	800f46e <CRC_Handle_16+0x1e>
 800f458:	0008      	movs	r0, r1
 800f45a:	00be      	lsls	r6, r7, #2
 800f45c:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800f45e:	8803      	ldrh	r3, [r0, #0]
 800f460:	8844      	ldrh	r4, [r0, #2]
 800f462:	041b      	lsls	r3, r3, #16
 800f464:	4323      	orrs	r3, r4
 800f466:	3004      	adds	r0, #4
 800f468:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800f46a:	4286      	cmp	r6, r0
 800f46c:	d1f7      	bne.n	800f45e <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800f46e:	07d3      	lsls	r3, r2, #31
 800f470:	d502      	bpl.n	800f478 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800f472:	00bf      	lsls	r7, r7, #2
 800f474:	5a7b      	ldrh	r3, [r7, r1]
 800f476:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f478:	6828      	ldr	r0, [r5, #0]
}
 800f47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f47c <HAL_CRC_Init>:
{
 800f47c:	b510      	push	{r4, lr}
 800f47e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800f480:	d01f      	beq.n	800f4c2 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800f482:	7f43      	ldrb	r3, [r0, #29]
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d01d      	beq.n	800f4c6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f48a:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f48c:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f48e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f490:	f000 f8ae 	bl	800f5f0 <HAL_CRCEx_Init>
 800f494:	2800      	cmp	r0, #0
 800f496:	d114      	bne.n	800f4c2 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f498:	7963      	ldrb	r3, [r4, #5]
 800f49a:	6822      	ldr	r2, [r4, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d01d      	beq.n	800f4dc <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f4a0:	6923      	ldr	r3, [r4, #16]
 800f4a2:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f4a4:	2160      	movs	r1, #96	; 0x60
 800f4a6:	6893      	ldr	r3, [r2, #8]
 800f4a8:	438b      	bics	r3, r1
 800f4aa:	6961      	ldr	r1, [r4, #20]
 800f4ac:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f4ae:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f4b0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f4b2:	6893      	ldr	r3, [r2, #8]
 800f4b4:	438b      	bics	r3, r1
 800f4b6:	69a1      	ldr	r1, [r4, #24]
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800f4c0:	e000      	b.n	800f4c4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800f4c2:	2001      	movs	r0, #1
}
 800f4c4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f4c6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f4c8:	f7fb fa1e 	bl	800a908 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f4cc:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f4ce:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f4d0:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f4d2:	f000 f88d 	bl	800f5f0 <HAL_CRCEx_Init>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d0de      	beq.n	800f498 <HAL_CRC_Init+0x1c>
 800f4da:	e7f2      	b.n	800f4c2 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	6113      	str	r3, [r2, #16]
 800f4e0:	e7e0      	b.n	800f4a4 <HAL_CRC_Init+0x28>
 800f4e2:	46c0      	nop			; (mov r8, r8)

0800f4e4 <HAL_CRC_Accumulate>:
{
 800f4e4:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800f4e6:	7f03      	ldrb	r3, [r0, #28]
{
 800f4e8:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d021      	beq.n	800f532 <HAL_CRC_Accumulate+0x4e>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800f4f6:	6a03      	ldr	r3, [r0, #32]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d017      	beq.n	800f52c <HAL_CRC_Accumulate+0x48>
 800f4fc:	2b03      	cmp	r3, #3
 800f4fe:	d00a      	beq.n	800f516 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f500:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f502:	2b01      	cmp	r3, #1
 800f504:	d102      	bne.n	800f50c <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f506:	0020      	movs	r0, r4
 800f508:	f7ff ff6c 	bl	800f3e4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f50c:	2301      	movs	r3, #1
 800f50e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f510:	2300      	movs	r3, #0
 800f512:	7723      	strb	r3, [r4, #28]
}
 800f514:	bd10      	pop	{r4, pc}
 800f516:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f518:	2a00      	cmp	r2, #0
 800f51a:	d005      	beq.n	800f528 <HAL_CRC_Accumulate+0x44>
 800f51c:	0092      	lsls	r2, r2, #2
 800f51e:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f520:	c908      	ldmia	r1!, {r3}
 800f522:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f524:	428a      	cmp	r2, r1
 800f526:	d1fb      	bne.n	800f520 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800f528:	6800      	ldr	r0, [r0, #0]
      break;
 800f52a:	e7ef      	b.n	800f50c <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f52c:	f7ff ff90 	bl	800f450 <CRC_Handle_16>
      break;
 800f530:	e7ec      	b.n	800f50c <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800f532:	2002      	movs	r0, #2
 800f534:	e7ee      	b.n	800f514 <HAL_CRC_Accumulate+0x30>
 800f536:	46c0      	nop			; (mov r8, r8)

0800f538 <HAL_CRC_Calculate>:
{
 800f538:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800f53a:	7f03      	ldrb	r3, [r0, #28]
{
 800f53c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d026      	beq.n	800f590 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f542:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800f544:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f546:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f548:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800f54a:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800f54c:	6898      	ldr	r0, [r3, #8]
 800f54e:	4328      	orrs	r0, r5
 800f550:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800f552:	6a20      	ldr	r0, [r4, #32]
 800f554:	2802      	cmp	r0, #2
 800f556:	d017      	beq.n	800f588 <HAL_CRC_Calculate+0x50>
 800f558:	2803      	cmp	r0, #3
 800f55a:	d007      	beq.n	800f56c <HAL_CRC_Calculate+0x34>
 800f55c:	2801      	cmp	r0, #1
 800f55e:	d00f      	beq.n	800f580 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f560:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800f562:	2301      	movs	r3, #1
 800f564:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f566:	2300      	movs	r3, #0
 800f568:	7723      	strb	r3, [r4, #28]
}
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f56c:	2a00      	cmp	r2, #0
 800f56e:	d005      	beq.n	800f57c <HAL_CRC_Calculate+0x44>
 800f570:	0092      	lsls	r2, r2, #2
 800f572:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f574:	c901      	ldmia	r1!, {r0}
 800f576:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800f578:	4291      	cmp	r1, r2
 800f57a:	d1fb      	bne.n	800f574 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800f57c:	6818      	ldr	r0, [r3, #0]
      break;
 800f57e:	e7f0      	b.n	800f562 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f580:	0020      	movs	r0, r4
 800f582:	f7ff ff2f 	bl	800f3e4 <CRC_Handle_8>
      break;
 800f586:	e7ec      	b.n	800f562 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f588:	0020      	movs	r0, r4
 800f58a:	f7ff ff61 	bl	800f450 <CRC_Handle_16>
      break;
 800f58e:	e7e8      	b.n	800f562 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f590:	2002      	movs	r0, #2
 800f592:	e7ea      	b.n	800f56a <HAL_CRC_Calculate+0x32>

0800f594 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f594:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f596:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f598:	2501      	movs	r5, #1
 800f59a:	e001      	b.n	800f5a0 <HAL_CRCEx_Polynomial_Set+0xc>
 800f59c:	3b01      	subs	r3, #1
 800f59e:	d312      	bcc.n	800f5c6 <HAL_CRCEx_Polynomial_Set+0x32>
 800f5a0:	002c      	movs	r4, r5
 800f5a2:	409c      	lsls	r4, r3
 800f5a4:	4221      	tst	r1, r4
 800f5a6:	d0f9      	beq.n	800f59c <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800f5a8:	2a10      	cmp	r2, #16
 800f5aa:	d01c      	beq.n	800f5e6 <HAL_CRCEx_Polynomial_Set+0x52>
 800f5ac:	2a18      	cmp	r2, #24
 800f5ae:	d012      	beq.n	800f5d6 <HAL_CRCEx_Polynomial_Set+0x42>
 800f5b0:	2a08      	cmp	r2, #8
 800f5b2:	d014      	beq.n	800f5de <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f5b4:	6800      	ldr	r0, [r0, #0]
 800f5b6:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f5b8:	2118      	movs	r1, #24
 800f5ba:	6883      	ldr	r3, [r0, #8]
 800f5bc:	438b      	bics	r3, r1
 800f5be:	431a      	orrs	r2, r3
 800f5c0:	6082      	str	r2, [r0, #8]
 800f5c2:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800f5c4:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800f5c6:	2a10      	cmp	r2, #16
 800f5c8:	d003      	beq.n	800f5d2 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f5ca:	2a18      	cmp	r2, #24
 800f5cc:	d001      	beq.n	800f5d2 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f5ce:	2a08      	cmp	r2, #8
 800f5d0:	d1f0      	bne.n	800f5b4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	e7f6      	b.n	800f5c4 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800f5d6:	2b06      	cmp	r3, #6
 800f5d8:	d9ec      	bls.n	800f5b4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f5da:	2001      	movs	r0, #1
 800f5dc:	e7f2      	b.n	800f5c4 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800f5de:	2b0f      	cmp	r3, #15
 800f5e0:	d9e8      	bls.n	800f5b4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f5e2:	2001      	movs	r0, #1
 800f5e4:	e7ee      	b.n	800f5c4 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800f5e6:	2b07      	cmp	r3, #7
 800f5e8:	d9e4      	bls.n	800f5b4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f5ea:	2001      	movs	r0, #1
 800f5ec:	e7ea      	b.n	800f5c4 <HAL_CRCEx_Polynomial_Set+0x30>
 800f5ee:	46c0      	nop			; (mov r8, r8)

0800f5f0 <HAL_CRCEx_Init>:
{
 800f5f0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f5f2:	7903      	ldrb	r3, [r0, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d108      	bne.n	800f60a <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f5f8:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f5fa:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800f5fc:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f5fe:	4a07      	ldr	r2, [pc, #28]	; (800f61c <HAL_CRCEx_Init+0x2c>)
 800f600:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f602:	689a      	ldr	r2, [r3, #8]
 800f604:	438a      	bics	r2, r1
 800f606:	609a      	str	r2, [r3, #8]
}
 800f608:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f60a:	68c2      	ldr	r2, [r0, #12]
 800f60c:	6881      	ldr	r1, [r0, #8]
 800f60e:	f7ff ffc1 	bl	800f594 <HAL_CRCEx_Polynomial_Set>
 800f612:	1e43      	subs	r3, r0, #1
 800f614:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f616:	b2c0      	uxtb	r0, r0
 800f618:	e7f6      	b.n	800f608 <HAL_CRCEx_Init+0x18>
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	04c11db7 	.word	0x04c11db7

0800f620 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f620:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f622:	2800      	cmp	r0, #0
 800f624:	d023      	beq.n	800f66e <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f626:	2321      	movs	r3, #33	; 0x21
 800f628:	5cc3      	ldrb	r3, [r0, r3]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01b      	beq.n	800f668 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f630:	2121      	movs	r1, #33	; 0x21
 800f632:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f634:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f636:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800f638:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f63a:	4a0e      	ldr	r2, [pc, #56]	; (800f674 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f63c:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f63e:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800f640:	6843      	ldr	r3, [r0, #4]
 800f642:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f644:	68c5      	ldr	r5, [r0, #12]
 800f646:	432b      	orrs	r3, r5
 800f648:	6905      	ldr	r5, [r0, #16]
 800f64a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f64c:	6945      	ldr	r5, [r0, #20]
 800f64e:	432b      	orrs	r3, r5
 800f650:	6985      	ldr	r5, [r0, #24]
 800f652:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f654:	69c5      	ldr	r5, [r0, #28]
 800f656:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f658:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f65a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f65c:	2300      	movs	r3, #0
 800f65e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f660:	3301      	adds	r3, #1
 800f662:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f664:	2000      	movs	r0, #0
}  
 800f666:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800f668:	2220      	movs	r2, #32
 800f66a:	5483      	strb	r3, [r0, r2]
 800f66c:	e7e0      	b.n	800f630 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800f66e:	2001      	movs	r0, #1
 800f670:	e7f9      	b.n	800f666 <HAL_DMA_Init+0x46>
 800f672:	46c0      	nop			; (mov r8, r8)
 800f674:	ffffc00f 	.word	0xffffc00f

0800f678 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f678:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f67a:	2420      	movs	r4, #32
 800f67c:	5d05      	ldrb	r5, [r0, r4]
 800f67e:	2d01      	cmp	r5, #1
 800f680:	d023      	beq.n	800f6ca <HAL_DMA_Start_IT+0x52>
 800f682:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f684:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800f686:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f688:	3401      	adds	r4, #1
 800f68a:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f68c:	6804      	ldr	r4, [r0, #0]
 800f68e:	6825      	ldr	r5, [r4, #0]
 800f690:	43b5      	bics	r5, r6
 800f692:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f694:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f696:	6843      	ldr	r3, [r0, #4]
 800f698:	2b10      	cmp	r3, #16
 800f69a:	d013      	beq.n	800f6c4 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f69c:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f69e:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f6a0:	2202      	movs	r2, #2
  return HAL_OK;    
 800f6a2:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	3202      	adds	r2, #2
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f6b2:	6823      	ldr	r3, [r4, #0]
 800f6b4:	3204      	adds	r2, #4
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	3a07      	subs	r2, #7
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	6023      	str	r3, [r4, #0]
} 
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f6c4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f6c6:	60e1      	str	r1, [r4, #12]
 800f6c8:	e7ea      	b.n	800f6a0 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800f6ca:	2002      	movs	r0, #2
 800f6cc:	e7f9      	b.n	800f6c2 <HAL_DMA_Start_IT+0x4a>
 800f6ce:	46c0      	nop			; (mov r8, r8)

0800f6d0 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	6802      	ldr	r2, [r0, #0]
{
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800f6d6:	6813      	ldr	r3, [r2, #0]
{
 800f6d8:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f6da:	438b      	bics	r3, r1
 800f6dc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f6de:	f7ff fb4f 	bl	800ed80 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f6e2:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800f6e4:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f6e6:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f6e8:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f6ea:	e004      	b.n	800f6f6 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f6ec:	f7ff fb48 	bl	800ed80 <HAL_GetTick>
 800f6f0:	1bc0      	subs	r0, r0, r7
 800f6f2:	42b0      	cmp	r0, r6
 800f6f4:	d809      	bhi.n	800f70a <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	402b      	ands	r3, r5
 800f6fc:	d1f6      	bne.n	800f6ec <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800f6fe:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800f700:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800f702:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800f704:	3a01      	subs	r2, #1
 800f706:	54a3      	strb	r3, [r4, r2]
}
 800f708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f70a:	2220      	movs	r2, #32
 800f70c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f70e:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f710:	4313      	orrs	r3, r2
 800f712:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f714:	2321      	movs	r3, #33	; 0x21
 800f716:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f718:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800f71a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800f71c:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800f71e:	e7f3      	b.n	800f708 <HAL_DMA_Abort+0x38>

0800f720 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f720:	6803      	ldr	r3, [r0, #0]
 800f722:	4aa2      	ldr	r2, [pc, #648]	; (800f9ac <HAL_DMA_IRQHandler+0x28c>)
{        
 800f724:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f726:	0019      	movs	r1, r3
{        
 800f728:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d937      	bls.n	800f79e <HAL_DMA_IRQHandler+0x7e>
 800f72e:	48a0      	ldr	r0, [pc, #640]	; (800f9b0 <HAL_DMA_IRQHandler+0x290>)
 800f730:	4da0      	ldr	r5, [pc, #640]	; (800f9b4 <HAL_DMA_IRQHandler+0x294>)
 800f732:	6806      	ldr	r6, [r0, #0]
 800f734:	42ab      	cmp	r3, r5
 800f736:	d100      	bne.n	800f73a <HAL_DMA_IRQHandler+0x1a>
 800f738:	e0ed      	b.n	800f916 <HAL_DMA_IRQHandler+0x1f6>
 800f73a:	4d9f      	ldr	r5, [pc, #636]	; (800f9b8 <HAL_DMA_IRQHandler+0x298>)
 800f73c:	42ab      	cmp	r3, r5
 800f73e:	d100      	bne.n	800f742 <HAL_DMA_IRQHandler+0x22>
 800f740:	e334      	b.n	800fdac <HAL_DMA_IRQHandler+0x68c>
 800f742:	4d9e      	ldr	r5, [pc, #632]	; (800f9bc <HAL_DMA_IRQHandler+0x29c>)
 800f744:	42ab      	cmp	r3, r5
 800f746:	d100      	bne.n	800f74a <HAL_DMA_IRQHandler+0x2a>
 800f748:	e129      	b.n	800f99e <HAL_DMA_IRQHandler+0x27e>
 800f74a:	4d9d      	ldr	r5, [pc, #628]	; (800f9c0 <HAL_DMA_IRQHandler+0x2a0>)
 800f74c:	42ab      	cmp	r3, r5
 800f74e:	d100      	bne.n	800f752 <HAL_DMA_IRQHandler+0x32>
 800f750:	e34b      	b.n	800fdea <HAL_DMA_IRQHandler+0x6ca>
 800f752:	4d9c      	ldr	r5, [pc, #624]	; (800f9c4 <HAL_DMA_IRQHandler+0x2a4>)
 800f754:	42ab      	cmp	r3, r5
 800f756:	d100      	bne.n	800f75a <HAL_DMA_IRQHandler+0x3a>
 800f758:	e38b      	b.n	800fe72 <HAL_DMA_IRQHandler+0x752>
 800f75a:	4d9b      	ldr	r5, [pc, #620]	; (800f9c8 <HAL_DMA_IRQHandler+0x2a8>)
 800f75c:	42ab      	cmp	r3, r5
 800f75e:	d100      	bne.n	800f762 <HAL_DMA_IRQHandler+0x42>
 800f760:	e3cf      	b.n	800ff02 <HAL_DMA_IRQHandler+0x7e2>
 800f762:	4293      	cmp	r3, r2
 800f764:	d100      	bne.n	800f768 <HAL_DMA_IRQHandler+0x48>
 800f766:	e35e      	b.n	800fe26 <HAL_DMA_IRQHandler+0x706>
 800f768:	4a98      	ldr	r2, [pc, #608]	; (800f9cc <HAL_DMA_IRQHandler+0x2ac>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d101      	bne.n	800f772 <HAL_DMA_IRQHandler+0x52>
 800f76e:	f000 fbe8 	bl	800ff42 <HAL_DMA_IRQHandler+0x822>
 800f772:	4a97      	ldr	r2, [pc, #604]	; (800f9d0 <HAL_DMA_IRQHandler+0x2b0>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d101      	bne.n	800f77c <HAL_DMA_IRQHandler+0x5c>
 800f778:	f000 fc04 	bl	800ff84 <HAL_DMA_IRQHandler+0x864>
 800f77c:	4a95      	ldr	r2, [pc, #596]	; (800f9d4 <HAL_DMA_IRQHandler+0x2b4>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d101      	bne.n	800f786 <HAL_DMA_IRQHandler+0x66>
 800f782:	f000 fc21 	bl	800ffc8 <HAL_DMA_IRQHandler+0x8a8>
 800f786:	4a94      	ldr	r2, [pc, #592]	; (800f9d8 <HAL_DMA_IRQHandler+0x2b8>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d101      	bne.n	800f790 <HAL_DMA_IRQHandler+0x70>
 800f78c:	f000 fc37 	bl	800fffe <HAL_DMA_IRQHandler+0x8de>
 800f790:	0332      	lsls	r2, r6, #12
 800f792:	d43c      	bmi.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f794:	4a86      	ldr	r2, [pc, #536]	; (800f9b0 <HAL_DMA_IRQHandler+0x290>)
 800f796:	6810      	ldr	r0, [r2, #0]
 800f798:	2280      	movs	r2, #128	; 0x80
 800f79a:	02d2      	lsls	r2, r2, #11
 800f79c:	e0c0      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f79e:	488f      	ldr	r0, [pc, #572]	; (800f9dc <HAL_DMA_IRQHandler+0x2bc>)
 800f7a0:	4d84      	ldr	r5, [pc, #528]	; (800f9b4 <HAL_DMA_IRQHandler+0x294>)
 800f7a2:	6806      	ldr	r6, [r0, #0]
 800f7a4:	42ab      	cmp	r3, r5
 800f7a6:	d02e      	beq.n	800f806 <HAL_DMA_IRQHandler+0xe6>
 800f7a8:	4d83      	ldr	r5, [pc, #524]	; (800f9b8 <HAL_DMA_IRQHandler+0x298>)
 800f7aa:	42ab      	cmp	r3, r5
 800f7ac:	d100      	bne.n	800f7b0 <HAL_DMA_IRQHandler+0x90>
 800f7ae:	e2f6      	b.n	800fd9e <HAL_DMA_IRQHandler+0x67e>
 800f7b0:	4d82      	ldr	r5, [pc, #520]	; (800f9bc <HAL_DMA_IRQHandler+0x29c>)
 800f7b2:	42ab      	cmp	r3, r5
 800f7b4:	d100      	bne.n	800f7b8 <HAL_DMA_IRQHandler+0x98>
 800f7b6:	e0ea      	b.n	800f98e <HAL_DMA_IRQHandler+0x26e>
 800f7b8:	4d81      	ldr	r5, [pc, #516]	; (800f9c0 <HAL_DMA_IRQHandler+0x2a0>)
 800f7ba:	42ab      	cmp	r3, r5
 800f7bc:	d100      	bne.n	800f7c0 <HAL_DMA_IRQHandler+0xa0>
 800f7be:	e30c      	b.n	800fdda <HAL_DMA_IRQHandler+0x6ba>
 800f7c0:	4d80      	ldr	r5, [pc, #512]	; (800f9c4 <HAL_DMA_IRQHandler+0x2a4>)
 800f7c2:	42ab      	cmp	r3, r5
 800f7c4:	d100      	bne.n	800f7c8 <HAL_DMA_IRQHandler+0xa8>
 800f7c6:	e35b      	b.n	800fe80 <HAL_DMA_IRQHandler+0x760>
 800f7c8:	4d7f      	ldr	r5, [pc, #508]	; (800f9c8 <HAL_DMA_IRQHandler+0x2a8>)
 800f7ca:	42ab      	cmp	r3, r5
 800f7cc:	d100      	bne.n	800f7d0 <HAL_DMA_IRQHandler+0xb0>
 800f7ce:	e390      	b.n	800fef2 <HAL_DMA_IRQHandler+0x7d2>
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d100      	bne.n	800f7d6 <HAL_DMA_IRQHandler+0xb6>
 800f7d4:	e31f      	b.n	800fe16 <HAL_DMA_IRQHandler+0x6f6>
 800f7d6:	4a7d      	ldr	r2, [pc, #500]	; (800f9cc <HAL_DMA_IRQHandler+0x2ac>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d100      	bne.n	800f7de <HAL_DMA_IRQHandler+0xbe>
 800f7dc:	e3aa      	b.n	800ff34 <HAL_DMA_IRQHandler+0x814>
 800f7de:	4a7c      	ldr	r2, [pc, #496]	; (800f9d0 <HAL_DMA_IRQHandler+0x2b0>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d100      	bne.n	800f7e6 <HAL_DMA_IRQHandler+0xc6>
 800f7e4:	e3c7      	b.n	800ff76 <HAL_DMA_IRQHandler+0x856>
 800f7e6:	4a7b      	ldr	r2, [pc, #492]	; (800f9d4 <HAL_DMA_IRQHandler+0x2b4>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d101      	bne.n	800f7f0 <HAL_DMA_IRQHandler+0xd0>
 800f7ec:	f000 fbe4 	bl	800ffb8 <HAL_DMA_IRQHandler+0x898>
 800f7f0:	4a79      	ldr	r2, [pc, #484]	; (800f9d8 <HAL_DMA_IRQHandler+0x2b8>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d100      	bne.n	800f7f8 <HAL_DMA_IRQHandler+0xd8>
 800f7f6:	e2e8      	b.n	800fdca <HAL_DMA_IRQHandler+0x6aa>
 800f7f8:	0332      	lsls	r2, r6, #12
 800f7fa:	d408      	bmi.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f7fc:	4a77      	ldr	r2, [pc, #476]	; (800f9dc <HAL_DMA_IRQHandler+0x2bc>)
 800f7fe:	6810      	ldr	r0, [r2, #0]
 800f800:	2280      	movs	r2, #128	; 0x80
 800f802:	02d2      	lsls	r2, r2, #11
 800f804:	e15f      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f806:	0732      	lsls	r2, r6, #28
 800f808:	d401      	bmi.n	800f80e <HAL_DMA_IRQHandler+0xee>
 800f80a:	f000 fc0a 	bl	8010022 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f80e:	2208      	movs	r2, #8
 800f810:	6818      	ldr	r0, [r3, #0]
 800f812:	4202      	tst	r2, r0
 800f814:	d100      	bne.n	800f818 <HAL_DMA_IRQHandler+0xf8>
 800f816:	e1f4      	b.n	800fc02 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f818:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f81a:	4d66      	ldr	r5, [pc, #408]	; (800f9b4 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f81c:	4390      	bics	r0, r2
 800f81e:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f820:	4862      	ldr	r0, [pc, #392]	; (800f9ac <HAL_DMA_IRQHandler+0x28c>)
 800f822:	4283      	cmp	r3, r0
 800f824:	d800      	bhi.n	800f828 <HAL_DMA_IRQHandler+0x108>
 800f826:	e1a9      	b.n	800fb7c <HAL_DMA_IRQHandler+0x45c>
 800f828:	42ab      	cmp	r3, r5
 800f82a:	d100      	bne.n	800f82e <HAL_DMA_IRQHandler+0x10e>
 800f82c:	e310      	b.n	800fe50 <HAL_DMA_IRQHandler+0x730>
 800f82e:	4a62      	ldr	r2, [pc, #392]	; (800f9b8 <HAL_DMA_IRQHandler+0x298>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d100      	bne.n	800f836 <HAL_DMA_IRQHandler+0x116>
 800f834:	e337      	b.n	800fea6 <HAL_DMA_IRQHandler+0x786>
 800f836:	4a61      	ldr	r2, [pc, #388]	; (800f9bc <HAL_DMA_IRQHandler+0x29c>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d100      	bne.n	800f83e <HAL_DMA_IRQHandler+0x11e>
 800f83c:	e2df      	b.n	800fdfe <HAL_DMA_IRQHandler+0x6de>
 800f83e:	4a60      	ldr	r2, [pc, #384]	; (800f9c0 <HAL_DMA_IRQHandler+0x2a0>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d100      	bne.n	800f846 <HAL_DMA_IRQHandler+0x126>
 800f844:	e370      	b.n	800ff28 <HAL_DMA_IRQHandler+0x808>
 800f846:	4a5f      	ldr	r2, [pc, #380]	; (800f9c4 <HAL_DMA_IRQHandler+0x2a4>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d100      	bne.n	800f84e <HAL_DMA_IRQHandler+0x12e>
 800f84c:	e38a      	b.n	800ff64 <HAL_DMA_IRQHandler+0x844>
 800f84e:	4a5e      	ldr	r2, [pc, #376]	; (800f9c8 <HAL_DMA_IRQHandler+0x2a8>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d100      	bne.n	800f856 <HAL_DMA_IRQHandler+0x136>
 800f854:	e3a4      	b.n	800ffa0 <HAL_DMA_IRQHandler+0x880>
 800f856:	4283      	cmp	r3, r0
 800f858:	d100      	bne.n	800f85c <HAL_DMA_IRQHandler+0x13c>
 800f85a:	e3cd      	b.n	800fff8 <HAL_DMA_IRQHandler+0x8d8>
 800f85c:	4a5b      	ldr	r2, [pc, #364]	; (800f9cc <HAL_DMA_IRQHandler+0x2ac>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d100      	bne.n	800f864 <HAL_DMA_IRQHandler+0x144>
 800f862:	e3d8      	b.n	8010016 <HAL_DMA_IRQHandler+0x8f6>
 800f864:	4a5a      	ldr	r2, [pc, #360]	; (800f9d0 <HAL_DMA_IRQHandler+0x2b0>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d100      	bne.n	800f86c <HAL_DMA_IRQHandler+0x14c>
 800f86a:	e3d8      	b.n	801001e <HAL_DMA_IRQHandler+0x8fe>
 800f86c:	4a59      	ldr	r2, [pc, #356]	; (800f9d4 <HAL_DMA_IRQHandler+0x2b4>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d100      	bne.n	800f874 <HAL_DMA_IRQHandler+0x154>
 800f872:	e2c4      	b.n	800fdfe <HAL_DMA_IRQHandler+0x6de>
 800f874:	4a5a      	ldr	r2, [pc, #360]	; (800f9e0 <HAL_DMA_IRQHandler+0x2c0>)
 800f876:	189a      	adds	r2, r3, r2
 800f878:	4250      	negs	r0, r2
 800f87a:	4142      	adcs	r2, r0
 800f87c:	4859      	ldr	r0, [pc, #356]	; (800f9e4 <HAL_DMA_IRQHandler+0x2c4>)
 800f87e:	4252      	negs	r2, r2
 800f880:	4002      	ands	r2, r0
 800f882:	2080      	movs	r0, #128	; 0x80
 800f884:	0300      	lsls	r0, r0, #12
 800f886:	4684      	mov	ip, r0
 800f888:	4462      	add	r2, ip
 800f88a:	4849      	ldr	r0, [pc, #292]	; (800f9b0 <HAL_DMA_IRQHandler+0x290>)
 800f88c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f88e:	2001      	movs	r0, #1
 800f890:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f892:	4302      	orrs	r2, r0
 800f894:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f896:	2221      	movs	r2, #33	; 0x21
 800f898:	3003      	adds	r0, #3
 800f89a:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800f89c:	2000      	movs	r0, #0
 800f89e:	3a01      	subs	r2, #1
 800f8a0:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f8a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f8a4:	2a00      	cmp	r2, #0
 800f8a6:	d000      	beq.n	800f8aa <HAL_DMA_IRQHandler+0x18a>
 800f8a8:	e1a7      	b.n	800fbfa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f8aa:	4a41      	ldr	r2, [pc, #260]	; (800f9b0 <HAL_DMA_IRQHandler+0x290>)
 800f8ac:	4d41      	ldr	r5, [pc, #260]	; (800f9b4 <HAL_DMA_IRQHandler+0x294>)
 800f8ae:	6810      	ldr	r0, [r2, #0]
 800f8b0:	2204      	movs	r2, #4
 800f8b2:	42ab      	cmp	r3, r5
 800f8b4:	d034      	beq.n	800f920 <HAL_DMA_IRQHandler+0x200>
 800f8b6:	4d40      	ldr	r5, [pc, #256]	; (800f9b8 <HAL_DMA_IRQHandler+0x298>)
 800f8b8:	2240      	movs	r2, #64	; 0x40
 800f8ba:	42ab      	cmp	r3, r5
 800f8bc:	d030      	beq.n	800f920 <HAL_DMA_IRQHandler+0x200>
 800f8be:	4a3f      	ldr	r2, [pc, #252]	; (800f9bc <HAL_DMA_IRQHandler+0x29c>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d100      	bne.n	800f8c6 <HAL_DMA_IRQHandler+0x1a6>
 800f8c4:	e3b1      	b.n	801002a <HAL_DMA_IRQHandler+0x90a>
 800f8c6:	4a3e      	ldr	r2, [pc, #248]	; (800f9c0 <HAL_DMA_IRQHandler+0x2a0>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d100      	bne.n	800f8ce <HAL_DMA_IRQHandler+0x1ae>
 800f8cc:	e39e      	b.n	801000c <HAL_DMA_IRQHandler+0x8ec>
 800f8ce:	4a3d      	ldr	r2, [pc, #244]	; (800f9c4 <HAL_DMA_IRQHandler+0x2a4>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d100      	bne.n	800f8d6 <HAL_DMA_IRQHandler+0x1b6>
 800f8d4:	e760      	b.n	800f798 <HAL_DMA_IRQHandler+0x78>
 800f8d6:	4a3c      	ldr	r2, [pc, #240]	; (800f9c8 <HAL_DMA_IRQHandler+0x2a8>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d100      	bne.n	800f8de <HAL_DMA_IRQHandler+0x1be>
 800f8dc:	e315      	b.n	800ff0a <HAL_DMA_IRQHandler+0x7ea>
 800f8de:	4a33      	ldr	r2, [pc, #204]	; (800f9ac <HAL_DMA_IRQHandler+0x28c>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d100      	bne.n	800f8e6 <HAL_DMA_IRQHandler+0x1c6>
 800f8e4:	e2a3      	b.n	800fe2e <HAL_DMA_IRQHandler+0x70e>
 800f8e6:	4d39      	ldr	r5, [pc, #228]	; (800f9cc <HAL_DMA_IRQHandler+0x2ac>)
 800f8e8:	2204      	movs	r2, #4
 800f8ea:	42ab      	cmp	r3, r5
 800f8ec:	d018      	beq.n	800f920 <HAL_DMA_IRQHandler+0x200>
 800f8ee:	4d38      	ldr	r5, [pc, #224]	; (800f9d0 <HAL_DMA_IRQHandler+0x2b0>)
 800f8f0:	323c      	adds	r2, #60	; 0x3c
 800f8f2:	42ab      	cmp	r3, r5
 800f8f4:	d014      	beq.n	800f920 <HAL_DMA_IRQHandler+0x200>
 800f8f6:	4a37      	ldr	r2, [pc, #220]	; (800f9d4 <HAL_DMA_IRQHandler+0x2b4>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d100      	bne.n	800f8fe <HAL_DMA_IRQHandler+0x1de>
 800f8fc:	e395      	b.n	801002a <HAL_DMA_IRQHandler+0x90a>
 800f8fe:	4a38      	ldr	r2, [pc, #224]	; (800f9e0 <HAL_DMA_IRQHandler+0x2c0>)
 800f900:	189a      	adds	r2, r3, r2
 800f902:	4255      	negs	r5, r2
 800f904:	416a      	adcs	r2, r5
 800f906:	4d38      	ldr	r5, [pc, #224]	; (800f9e8 <HAL_DMA_IRQHandler+0x2c8>)
 800f908:	4252      	negs	r2, r2
 800f90a:	402a      	ands	r2, r5
 800f90c:	2580      	movs	r5, #128	; 0x80
 800f90e:	02ed      	lsls	r5, r5, #11
 800f910:	46ac      	mov	ip, r5
 800f912:	4462      	add	r2, ip
 800f914:	e004      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f916:	0732      	lsls	r2, r6, #28
 800f918:	d500      	bpl.n	800f91c <HAL_DMA_IRQHandler+0x1fc>
 800f91a:	e778      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f91c:	2204      	movs	r2, #4
 800f91e:	6800      	ldr	r0, [r0, #0]
 800f920:	4210      	tst	r0, r2
 800f922:	d000      	beq.n	800f926 <HAL_DMA_IRQHandler+0x206>
 800f924:	e0d1      	b.n	800faca <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f926:	4a22      	ldr	r2, [pc, #136]	; (800f9b0 <HAL_DMA_IRQHandler+0x290>)
 800f928:	6810      	ldr	r0, [r2, #0]
 800f92a:	4a22      	ldr	r2, [pc, #136]	; (800f9b4 <HAL_DMA_IRQHandler+0x294>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d100      	bne.n	800f932 <HAL_DMA_IRQHandler+0x212>
 800f930:	e122      	b.n	800fb78 <HAL_DMA_IRQHandler+0x458>
 800f932:	4a21      	ldr	r2, [pc, #132]	; (800f9b8 <HAL_DMA_IRQHandler+0x298>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d05b      	beq.n	800f9f0 <HAL_DMA_IRQHandler+0x2d0>
 800f938:	4a20      	ldr	r2, [pc, #128]	; (800f9bc <HAL_DMA_IRQHandler+0x29c>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d100      	bne.n	800f940 <HAL_DMA_IRQHandler+0x220>
 800f93e:	e19a      	b.n	800fc76 <HAL_DMA_IRQHandler+0x556>
 800f940:	4a1f      	ldr	r2, [pc, #124]	; (800f9c0 <HAL_DMA_IRQHandler+0x2a0>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d100      	bne.n	800f948 <HAL_DMA_IRQHandler+0x228>
 800f946:	e237      	b.n	800fdb8 <HAL_DMA_IRQHandler+0x698>
 800f948:	4a1e      	ldr	r2, [pc, #120]	; (800f9c4 <HAL_DMA_IRQHandler+0x2a4>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d100      	bne.n	800f950 <HAL_DMA_IRQHandler+0x230>
 800f94e:	e239      	b.n	800fdc4 <HAL_DMA_IRQHandler+0x6a4>
 800f950:	4a1d      	ldr	r2, [pc, #116]	; (800f9c8 <HAL_DMA_IRQHandler+0x2a8>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d100      	bne.n	800f958 <HAL_DMA_IRQHandler+0x238>
 800f956:	e24f      	b.n	800fdf8 <HAL_DMA_IRQHandler+0x6d8>
 800f958:	4a14      	ldr	r2, [pc, #80]	; (800f9ac <HAL_DMA_IRQHandler+0x28c>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d100      	bne.n	800f960 <HAL_DMA_IRQHandler+0x240>
 800f95e:	e297      	b.n	800fe90 <HAL_DMA_IRQHandler+0x770>
 800f960:	4a1a      	ldr	r2, [pc, #104]	; (800f9cc <HAL_DMA_IRQHandler+0x2ac>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d100      	bne.n	800f968 <HAL_DMA_IRQHandler+0x248>
 800f966:	e107      	b.n	800fb78 <HAL_DMA_IRQHandler+0x458>
 800f968:	4a19      	ldr	r2, [pc, #100]	; (800f9d0 <HAL_DMA_IRQHandler+0x2b0>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d040      	beq.n	800f9f0 <HAL_DMA_IRQHandler+0x2d0>
 800f96e:	4a19      	ldr	r2, [pc, #100]	; (800f9d4 <HAL_DMA_IRQHandler+0x2b4>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d100      	bne.n	800f976 <HAL_DMA_IRQHandler+0x256>
 800f974:	e17f      	b.n	800fc76 <HAL_DMA_IRQHandler+0x556>
 800f976:	4a1a      	ldr	r2, [pc, #104]	; (800f9e0 <HAL_DMA_IRQHandler+0x2c0>)
 800f978:	1899      	adds	r1, r3, r2
 800f97a:	424a      	negs	r2, r1
 800f97c:	4151      	adcs	r1, r2
 800f97e:	4a1b      	ldr	r2, [pc, #108]	; (800f9ec <HAL_DMA_IRQHandler+0x2cc>)
 800f980:	4249      	negs	r1, r1
 800f982:	400a      	ands	r2, r1
 800f984:	2180      	movs	r1, #128	; 0x80
 800f986:	0289      	lsls	r1, r1, #10
 800f988:	468c      	mov	ip, r1
 800f98a:	4462      	add	r2, ip
 800f98c:	e031      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f98e:	0532      	lsls	r2, r6, #20
 800f990:	d500      	bpl.n	800f994 <HAL_DMA_IRQHandler+0x274>
 800f992:	e73c      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f994:	2280      	movs	r2, #128	; 0x80
 800f996:	6800      	ldr	r0, [r0, #0]
 800f998:	0019      	movs	r1, r3
 800f99a:	00d2      	lsls	r2, r2, #3
 800f99c:	e093      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f99e:	0532      	lsls	r2, r6, #20
 800f9a0:	d500      	bpl.n	800f9a4 <HAL_DMA_IRQHandler+0x284>
 800f9a2:	e734      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f9a4:	2280      	movs	r2, #128	; 0x80
 800f9a6:	6800      	ldr	r0, [r0, #0]
 800f9a8:	00d2      	lsls	r2, r2, #3
 800f9aa:	e7b9      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
 800f9ac:	40020080 	.word	0x40020080
 800f9b0:	40020400 	.word	0x40020400
 800f9b4:	40020008 	.word	0x40020008
 800f9b8:	4002001c 	.word	0x4002001c
 800f9bc:	40020030 	.word	0x40020030
 800f9c0:	40020044 	.word	0x40020044
 800f9c4:	40020058 	.word	0x40020058
 800f9c8:	4002006c 	.word	0x4002006c
 800f9cc:	40020408 	.word	0x40020408
 800f9d0:	4002041c 	.word	0x4002041c
 800f9d4:	40020430 	.word	0x40020430
 800f9d8:	40020444 	.word	0x40020444
 800f9dc:	40020000 	.word	0x40020000
 800f9e0:	bffdfbbc 	.word	0xbffdfbbc
 800f9e4:	fff88000 	.word	0xfff88000
 800f9e8:	fffc4000 	.word	0xfffc4000
 800f9ec:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f9f0:	2220      	movs	r2, #32
 800f9f2:	4002      	ands	r2, r0
 800f9f4:	1e51      	subs	r1, r2, #1
 800f9f6:	418a      	sbcs	r2, r1
 800f9f8:	b2d2      	uxtb	r2, r2
 800f9fa:	2a00      	cmp	r2, #0
 800f9fc:	d050      	beq.n	800faa0 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f9fe:	2202      	movs	r2, #2
 800fa00:	6819      	ldr	r1, [r3, #0]
 800fa02:	420a      	tst	r2, r1
 800fa04:	d04c      	beq.n	800faa0 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800fa06:	6819      	ldr	r1, [r3, #0]
 800fa08:	0689      	lsls	r1, r1, #26
 800fa0a:	d402      	bmi.n	800fa12 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800fa0c:	6819      	ldr	r1, [r3, #0]
 800fa0e:	4391      	bics	r1, r2
 800fa10:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fa12:	4ab5      	ldr	r2, [pc, #724]	; (800fce8 <HAL_DMA_IRQHandler+0x5c8>)
 800fa14:	49b5      	ldr	r1, [pc, #724]	; (800fcec <HAL_DMA_IRQHandler+0x5cc>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d800      	bhi.n	800fa1c <HAL_DMA_IRQHandler+0x2fc>
 800fa1a:	e12f      	b.n	800fc7c <HAL_DMA_IRQHandler+0x55c>
 800fa1c:	428b      	cmp	r3, r1
 800fa1e:	d100      	bne.n	800fa22 <HAL_DMA_IRQHandler+0x302>
 800fa20:	e20e      	b.n	800fe40 <HAL_DMA_IRQHandler+0x720>
 800fa22:	49b3      	ldr	r1, [pc, #716]	; (800fcf0 <HAL_DMA_IRQHandler+0x5d0>)
 800fa24:	428b      	cmp	r3, r1
 800fa26:	d100      	bne.n	800fa2a <HAL_DMA_IRQHandler+0x30a>
 800fa28:	e237      	b.n	800fe9a <HAL_DMA_IRQHandler+0x77a>
 800fa2a:	49b2      	ldr	r1, [pc, #712]	; (800fcf4 <HAL_DMA_IRQHandler+0x5d4>)
 800fa2c:	428b      	cmp	r3, r1
 800fa2e:	d100      	bne.n	800fa32 <HAL_DMA_IRQHandler+0x312>
 800fa30:	e271      	b.n	800ff16 <HAL_DMA_IRQHandler+0x7f6>
 800fa32:	49b1      	ldr	r1, [pc, #708]	; (800fcf8 <HAL_DMA_IRQHandler+0x5d8>)
 800fa34:	428b      	cmp	r3, r1
 800fa36:	d100      	bne.n	800fa3a <HAL_DMA_IRQHandler+0x31a>
 800fa38:	e1fc      	b.n	800fe34 <HAL_DMA_IRQHandler+0x714>
 800fa3a:	49b0      	ldr	r1, [pc, #704]	; (800fcfc <HAL_DMA_IRQHandler+0x5dc>)
 800fa3c:	428b      	cmp	r3, r1
 800fa3e:	d100      	bne.n	800fa42 <HAL_DMA_IRQHandler+0x322>
 800fa40:	e28a      	b.n	800ff58 <HAL_DMA_IRQHandler+0x838>
 800fa42:	49af      	ldr	r1, [pc, #700]	; (800fd00 <HAL_DMA_IRQHandler+0x5e0>)
 800fa44:	428b      	cmp	r3, r1
 800fa46:	d100      	bne.n	800fa4a <HAL_DMA_IRQHandler+0x32a>
 800fa48:	e2a7      	b.n	800ff9a <HAL_DMA_IRQHandler+0x87a>
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d100      	bne.n	800fa50 <HAL_DMA_IRQHandler+0x330>
 800fa4e:	e2c4      	b.n	800ffda <HAL_DMA_IRQHandler+0x8ba>
 800fa50:	4aac      	ldr	r2, [pc, #688]	; (800fd04 <HAL_DMA_IRQHandler+0x5e4>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d100      	bne.n	800fa58 <HAL_DMA_IRQHandler+0x338>
 800fa56:	e1f3      	b.n	800fe40 <HAL_DMA_IRQHandler+0x720>
 800fa58:	4aab      	ldr	r2, [pc, #684]	; (800fd08 <HAL_DMA_IRQHandler+0x5e8>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d100      	bne.n	800fa60 <HAL_DMA_IRQHandler+0x340>
 800fa5e:	e21c      	b.n	800fe9a <HAL_DMA_IRQHandler+0x77a>
 800fa60:	4aaa      	ldr	r2, [pc, #680]	; (800fd0c <HAL_DMA_IRQHandler+0x5ec>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d100      	bne.n	800fa68 <HAL_DMA_IRQHandler+0x348>
 800fa66:	e256      	b.n	800ff16 <HAL_DMA_IRQHandler+0x7f6>
 800fa68:	4aa9      	ldr	r2, [pc, #676]	; (800fd10 <HAL_DMA_IRQHandler+0x5f0>)
 800fa6a:	4694      	mov	ip, r2
 800fa6c:	4463      	add	r3, ip
 800fa6e:	1e5a      	subs	r2, r3, #1
 800fa70:	4193      	sbcs	r3, r2
 800fa72:	22f0      	movs	r2, #240	; 0xf0
 800fa74:	425b      	negs	r3, r3
 800fa76:	0252      	lsls	r2, r2, #9
 800fa78:	4013      	ands	r3, r2
 800fa7a:	2280      	movs	r2, #128	; 0x80
 800fa7c:	0192      	lsls	r2, r2, #6
 800fa7e:	4694      	mov	ip, r2
 800fa80:	4463      	add	r3, ip
 800fa82:	4aa4      	ldr	r2, [pc, #656]	; (800fd14 <HAL_DMA_IRQHandler+0x5f4>)
 800fa84:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800fa86:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800fa88:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800fa8a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800fa8c:	2321      	movs	r3, #33	; 0x21
 800fa8e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800fa90:	2200      	movs	r2, #0
 800fa92:	3b01      	subs	r3, #1
 800fa94:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fa96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d001      	beq.n	800faa0 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 800fa9c:	0020      	movs	r0, r4
 800fa9e:	4798      	blx	r3
}  
 800faa0:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800faa2:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800faa4:	489c      	ldr	r0, [pc, #624]	; (800fd18 <HAL_DMA_IRQHandler+0x5f8>)
 800faa6:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800faa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800faaa:	432a      	orrs	r2, r5
 800faac:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800faae:	2221      	movs	r2, #33	; 0x21
 800fab0:	3503      	adds	r5, #3
 800fab2:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fab4:	2500      	movs	r5, #0
 800fab6:	3a01      	subs	r2, #1
 800fab8:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800faba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fabc:	2a00      	cmp	r2, #0
 800fabe:	d000      	beq.n	800fac2 <HAL_DMA_IRQHandler+0x3a2>
 800fac0:	e09b      	b.n	800fbfa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fac2:	6800      	ldr	r0, [r0, #0]
 800fac4:	2204      	movs	r2, #4
 800fac6:	4210      	tst	r0, r2
 800fac8:	d050      	beq.n	800fb6c <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800faca:	2204      	movs	r2, #4
 800facc:	6818      	ldr	r0, [r3, #0]
 800face:	4202      	tst	r2, r0
 800fad0:	d048      	beq.n	800fb64 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800fad2:	6818      	ldr	r0, [r3, #0]
 800fad4:	0680      	lsls	r0, r0, #26
 800fad6:	d402      	bmi.n	800fade <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fad8:	6818      	ldr	r0, [r3, #0]
 800fada:	4390      	bics	r0, r2
 800fadc:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fade:	4a82      	ldr	r2, [pc, #520]	; (800fce8 <HAL_DMA_IRQHandler+0x5c8>)
 800fae0:	4291      	cmp	r1, r2
 800fae2:	d800      	bhi.n	800fae6 <HAL_DMA_IRQHandler+0x3c6>
 800fae4:	e11e      	b.n	800fd24 <HAL_DMA_IRQHandler+0x604>
 800fae6:	4981      	ldr	r1, [pc, #516]	; (800fcec <HAL_DMA_IRQHandler+0x5cc>)
 800fae8:	428b      	cmp	r3, r1
 800faea:	d100      	bne.n	800faee <HAL_DMA_IRQHandler+0x3ce>
 800faec:	e1ac      	b.n	800fe48 <HAL_DMA_IRQHandler+0x728>
 800faee:	4980      	ldr	r1, [pc, #512]	; (800fcf0 <HAL_DMA_IRQHandler+0x5d0>)
 800faf0:	428b      	cmp	r3, r1
 800faf2:	d100      	bne.n	800faf6 <HAL_DMA_IRQHandler+0x3d6>
 800faf4:	e1d5      	b.n	800fea2 <HAL_DMA_IRQHandler+0x782>
 800faf6:	497f      	ldr	r1, [pc, #508]	; (800fcf4 <HAL_DMA_IRQHandler+0x5d4>)
 800faf8:	428b      	cmp	r3, r1
 800fafa:	d100      	bne.n	800fafe <HAL_DMA_IRQHandler+0x3de>
 800fafc:	e188      	b.n	800fe10 <HAL_DMA_IRQHandler+0x6f0>
 800fafe:	497e      	ldr	r1, [pc, #504]	; (800fcf8 <HAL_DMA_IRQHandler+0x5d8>)
 800fb00:	428b      	cmp	r3, r1
 800fb02:	d100      	bne.n	800fb06 <HAL_DMA_IRQHandler+0x3e6>
 800fb04:	e20a      	b.n	800ff1c <HAL_DMA_IRQHandler+0x7fc>
 800fb06:	497d      	ldr	r1, [pc, #500]	; (800fcfc <HAL_DMA_IRQHandler+0x5dc>)
 800fb08:	428b      	cmp	r3, r1
 800fb0a:	d100      	bne.n	800fb0e <HAL_DMA_IRQHandler+0x3ee>
 800fb0c:	e22d      	b.n	800ff6a <HAL_DMA_IRQHandler+0x84a>
 800fb0e:	497c      	ldr	r1, [pc, #496]	; (800fd00 <HAL_DMA_IRQHandler+0x5e0>)
 800fb10:	428b      	cmp	r3, r1
 800fb12:	d100      	bne.n	800fb16 <HAL_DMA_IRQHandler+0x3f6>
 800fb14:	e247      	b.n	800ffa6 <HAL_DMA_IRQHandler+0x886>
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d100      	bne.n	800fb1c <HAL_DMA_IRQHandler+0x3fc>
 800fb1a:	e264      	b.n	800ffe6 <HAL_DMA_IRQHandler+0x8c6>
 800fb1c:	4a79      	ldr	r2, [pc, #484]	; (800fd04 <HAL_DMA_IRQHandler+0x5e4>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d100      	bne.n	800fb24 <HAL_DMA_IRQHandler+0x404>
 800fb22:	e191      	b.n	800fe48 <HAL_DMA_IRQHandler+0x728>
 800fb24:	4a78      	ldr	r2, [pc, #480]	; (800fd08 <HAL_DMA_IRQHandler+0x5e8>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d100      	bne.n	800fb2c <HAL_DMA_IRQHandler+0x40c>
 800fb2a:	e1ba      	b.n	800fea2 <HAL_DMA_IRQHandler+0x782>
 800fb2c:	4a77      	ldr	r2, [pc, #476]	; (800fd0c <HAL_DMA_IRQHandler+0x5ec>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d100      	bne.n	800fb34 <HAL_DMA_IRQHandler+0x414>
 800fb32:	e16d      	b.n	800fe10 <HAL_DMA_IRQHandler+0x6f0>
 800fb34:	4a76      	ldr	r2, [pc, #472]	; (800fd10 <HAL_DMA_IRQHandler+0x5f0>)
 800fb36:	189a      	adds	r2, r3, r2
 800fb38:	1e51      	subs	r1, r2, #1
 800fb3a:	418a      	sbcs	r2, r1
 800fb3c:	21f0      	movs	r1, #240	; 0xf0
 800fb3e:	4252      	negs	r2, r2
 800fb40:	0289      	lsls	r1, r1, #10
 800fb42:	400a      	ands	r2, r1
 800fb44:	2180      	movs	r1, #128	; 0x80
 800fb46:	01c9      	lsls	r1, r1, #7
 800fb48:	468c      	mov	ip, r1
 800fb4a:	4462      	add	r2, ip
 800fb4c:	4971      	ldr	r1, [pc, #452]	; (800fd14 <HAL_DMA_IRQHandler+0x5f4>)
 800fb4e:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fb50:	2221      	movs	r2, #33	; 0x21
 800fb52:	2111      	movs	r1, #17
 800fb54:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fb56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fb58:	2a00      	cmp	r2, #0
 800fb5a:	d100      	bne.n	800fb5e <HAL_DMA_IRQHandler+0x43e>
 800fb5c:	e6e3      	b.n	800f926 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 800fb5e:	0020      	movs	r0, r4
 800fb60:	4790      	blx	r2
 800fb62:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fb64:	4a60      	ldr	r2, [pc, #384]	; (800fce8 <HAL_DMA_IRQHandler+0x5c8>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d900      	bls.n	800fb6c <HAL_DMA_IRQHandler+0x44c>
 800fb6a:	e6dc      	b.n	800f926 <HAL_DMA_IRQHandler+0x206>
 800fb6c:	4a6a      	ldr	r2, [pc, #424]	; (800fd18 <HAL_DMA_IRQHandler+0x5f8>)
 800fb6e:	6810      	ldr	r0, [r2, #0]
 800fb70:	4a5e      	ldr	r2, [pc, #376]	; (800fcec <HAL_DMA_IRQHandler+0x5cc>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d000      	beq.n	800fb78 <HAL_DMA_IRQHandler+0x458>
 800fb76:	e6dc      	b.n	800f932 <HAL_DMA_IRQHandler+0x212>
 800fb78:	2202      	movs	r2, #2
 800fb7a:	e73a      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fb7c:	42ab      	cmp	r3, r5
 800fb7e:	d090      	beq.n	800faa2 <HAL_DMA_IRQHandler+0x382>
 800fb80:	4a5b      	ldr	r2, [pc, #364]	; (800fcf0 <HAL_DMA_IRQHandler+0x5d0>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d100      	bne.n	800fb88 <HAL_DMA_IRQHandler+0x468>
 800fb86:	e1a1      	b.n	800fecc <HAL_DMA_IRQHandler+0x7ac>
 800fb88:	4a5a      	ldr	r2, [pc, #360]	; (800fcf4 <HAL_DMA_IRQHandler+0x5d4>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d100      	bne.n	800fb90 <HAL_DMA_IRQHandler+0x470>
 800fb8e:	e13c      	b.n	800fe0a <HAL_DMA_IRQHandler+0x6ea>
 800fb90:	4a59      	ldr	r2, [pc, #356]	; (800fcf8 <HAL_DMA_IRQHandler+0x5d8>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d100      	bne.n	800fb98 <HAL_DMA_IRQHandler+0x478>
 800fb96:	e1ca      	b.n	800ff2e <HAL_DMA_IRQHandler+0x80e>
 800fb98:	4a58      	ldr	r2, [pc, #352]	; (800fcfc <HAL_DMA_IRQHandler+0x5dc>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d100      	bne.n	800fba0 <HAL_DMA_IRQHandler+0x480>
 800fb9e:	e1de      	b.n	800ff5e <HAL_DMA_IRQHandler+0x83e>
 800fba0:	4a57      	ldr	r2, [pc, #348]	; (800fd00 <HAL_DMA_IRQHandler+0x5e0>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d100      	bne.n	800fba8 <HAL_DMA_IRQHandler+0x488>
 800fba6:	e201      	b.n	800ffac <HAL_DMA_IRQHandler+0x88c>
 800fba8:	4283      	cmp	r3, r0
 800fbaa:	d100      	bne.n	800fbae <HAL_DMA_IRQHandler+0x48e>
 800fbac:	e21e      	b.n	800ffec <HAL_DMA_IRQHandler+0x8cc>
 800fbae:	4a55      	ldr	r2, [pc, #340]	; (800fd04 <HAL_DMA_IRQHandler+0x5e4>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d100      	bne.n	800fbb6 <HAL_DMA_IRQHandler+0x496>
 800fbb4:	e22d      	b.n	8010012 <HAL_DMA_IRQHandler+0x8f2>
 800fbb6:	4a54      	ldr	r2, [pc, #336]	; (800fd08 <HAL_DMA_IRQHandler+0x5e8>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d100      	bne.n	800fbbe <HAL_DMA_IRQHandler+0x49e>
 800fbbc:	e22d      	b.n	801001a <HAL_DMA_IRQHandler+0x8fa>
 800fbbe:	4a53      	ldr	r2, [pc, #332]	; (800fd0c <HAL_DMA_IRQHandler+0x5ec>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d100      	bne.n	800fbc6 <HAL_DMA_IRQHandler+0x4a6>
 800fbc4:	e121      	b.n	800fe0a <HAL_DMA_IRQHandler+0x6ea>
 800fbc6:	4a52      	ldr	r2, [pc, #328]	; (800fd10 <HAL_DMA_IRQHandler+0x5f0>)
 800fbc8:	189a      	adds	r2, r3, r2
 800fbca:	4250      	negs	r0, r2
 800fbcc:	4142      	adcs	r2, r0
 800fbce:	4853      	ldr	r0, [pc, #332]	; (800fd1c <HAL_DMA_IRQHandler+0x5fc>)
 800fbd0:	4252      	negs	r2, r2
 800fbd2:	4002      	ands	r2, r0
 800fbd4:	2080      	movs	r0, #128	; 0x80
 800fbd6:	0300      	lsls	r0, r0, #12
 800fbd8:	4684      	mov	ip, r0
 800fbda:	4462      	add	r2, ip
 800fbdc:	484e      	ldr	r0, [pc, #312]	; (800fd18 <HAL_DMA_IRQHandler+0x5f8>)
 800fbde:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fbe0:	2001      	movs	r0, #1
 800fbe2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fbe4:	4302      	orrs	r2, r0
 800fbe6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fbe8:	2221      	movs	r2, #33	; 0x21
 800fbea:	3003      	adds	r0, #3
 800fbec:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fbee:	2000      	movs	r0, #0
 800fbf0:	3a01      	subs	r2, #1
 800fbf2:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fbf4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fbf6:	2a00      	cmp	r2, #0
 800fbf8:	d007      	beq.n	800fc0a <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 800fbfa:	0020      	movs	r0, r4
 800fbfc:	4790      	blx	r2
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fc02:	4a39      	ldr	r2, [pc, #228]	; (800fce8 <HAL_DMA_IRQHandler+0x5c8>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d900      	bls.n	800fc0a <HAL_DMA_IRQHandler+0x4ea>
 800fc08:	e64f      	b.n	800f8aa <HAL_DMA_IRQHandler+0x18a>
 800fc0a:	4a43      	ldr	r2, [pc, #268]	; (800fd18 <HAL_DMA_IRQHandler+0x5f8>)
 800fc0c:	6810      	ldr	r0, [r2, #0]
 800fc0e:	4a37      	ldr	r2, [pc, #220]	; (800fcec <HAL_DMA_IRQHandler+0x5cc>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d100      	bne.n	800fc16 <HAL_DMA_IRQHandler+0x4f6>
 800fc14:	e756      	b.n	800fac4 <HAL_DMA_IRQHandler+0x3a4>
 800fc16:	4a36      	ldr	r2, [pc, #216]	; (800fcf0 <HAL_DMA_IRQHandler+0x5d0>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d100      	bne.n	800fc1e <HAL_DMA_IRQHandler+0x4fe>
 800fc1c:	e0c4      	b.n	800fda8 <HAL_DMA_IRQHandler+0x688>
 800fc1e:	4a35      	ldr	r2, [pc, #212]	; (800fcf4 <HAL_DMA_IRQHandler+0x5d4>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d100      	bne.n	800fc26 <HAL_DMA_IRQHandler+0x506>
 800fc24:	e0cb      	b.n	800fdbe <HAL_DMA_IRQHandler+0x69e>
 800fc26:	4a34      	ldr	r2, [pc, #208]	; (800fcf8 <HAL_DMA_IRQHandler+0x5d8>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d100      	bne.n	800fc2e <HAL_DMA_IRQHandler+0x50e>
 800fc2c:	e0d2      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x6b4>
 800fc2e:	4a33      	ldr	r2, [pc, #204]	; (800fcfc <HAL_DMA_IRQHandler+0x5dc>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d100      	bne.n	800fc36 <HAL_DMA_IRQHandler+0x516>
 800fc34:	e5e4      	b.n	800f800 <HAL_DMA_IRQHandler+0xe0>
 800fc36:	4a32      	ldr	r2, [pc, #200]	; (800fd00 <HAL_DMA_IRQHandler+0x5e0>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d100      	bne.n	800fc3e <HAL_DMA_IRQHandler+0x51e>
 800fc3c:	e15e      	b.n	800fefc <HAL_DMA_IRQHandler+0x7dc>
 800fc3e:	4a2a      	ldr	r2, [pc, #168]	; (800fce8 <HAL_DMA_IRQHandler+0x5c8>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d100      	bne.n	800fc46 <HAL_DMA_IRQHandler+0x526>
 800fc44:	e0ec      	b.n	800fe20 <HAL_DMA_IRQHandler+0x700>
 800fc46:	4a2f      	ldr	r2, [pc, #188]	; (800fd04 <HAL_DMA_IRQHandler+0x5e4>)
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d100      	bne.n	800fc4e <HAL_DMA_IRQHandler+0x52e>
 800fc4c:	e73a      	b.n	800fac4 <HAL_DMA_IRQHandler+0x3a4>
 800fc4e:	4a2e      	ldr	r2, [pc, #184]	; (800fd08 <HAL_DMA_IRQHandler+0x5e8>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d100      	bne.n	800fc56 <HAL_DMA_IRQHandler+0x536>
 800fc54:	e0a8      	b.n	800fda8 <HAL_DMA_IRQHandler+0x688>
 800fc56:	4a2d      	ldr	r2, [pc, #180]	; (800fd0c <HAL_DMA_IRQHandler+0x5ec>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d100      	bne.n	800fc5e <HAL_DMA_IRQHandler+0x53e>
 800fc5c:	e0af      	b.n	800fdbe <HAL_DMA_IRQHandler+0x69e>
 800fc5e:	4a2c      	ldr	r2, [pc, #176]	; (800fd10 <HAL_DMA_IRQHandler+0x5f0>)
 800fc60:	189a      	adds	r2, r3, r2
 800fc62:	4255      	negs	r5, r2
 800fc64:	416a      	adcs	r2, r5
 800fc66:	4d2e      	ldr	r5, [pc, #184]	; (800fd20 <HAL_DMA_IRQHandler+0x600>)
 800fc68:	4252      	negs	r2, r2
 800fc6a:	402a      	ands	r2, r5
 800fc6c:	2580      	movs	r5, #128	; 0x80
 800fc6e:	02ed      	lsls	r5, r5, #11
 800fc70:	46ac      	mov	ip, r5
 800fc72:	4462      	add	r2, ip
 800fc74:	e727      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fc76:	2280      	movs	r2, #128	; 0x80
 800fc78:	0092      	lsls	r2, r2, #2
 800fc7a:	e6ba      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	d100      	bne.n	800fc82 <HAL_DMA_IRQHandler+0x562>
 800fc80:	e0e0      	b.n	800fe44 <HAL_DMA_IRQHandler+0x724>
 800fc82:	491b      	ldr	r1, [pc, #108]	; (800fcf0 <HAL_DMA_IRQHandler+0x5d0>)
 800fc84:	428b      	cmp	r3, r1
 800fc86:	d100      	bne.n	800fc8a <HAL_DMA_IRQHandler+0x56a>
 800fc88:	e105      	b.n	800fe96 <HAL_DMA_IRQHandler+0x776>
 800fc8a:	491a      	ldr	r1, [pc, #104]	; (800fcf4 <HAL_DMA_IRQHandler+0x5d4>)
 800fc8c:	428b      	cmp	r3, r1
 800fc8e:	d100      	bne.n	800fc92 <HAL_DMA_IRQHandler+0x572>
 800fc90:	e13e      	b.n	800ff10 <HAL_DMA_IRQHandler+0x7f0>
 800fc92:	4919      	ldr	r1, [pc, #100]	; (800fcf8 <HAL_DMA_IRQHandler+0x5d8>)
 800fc94:	428b      	cmp	r3, r1
 800fc96:	d100      	bne.n	800fc9a <HAL_DMA_IRQHandler+0x57a>
 800fc98:	e0cf      	b.n	800fe3a <HAL_DMA_IRQHandler+0x71a>
 800fc9a:	4918      	ldr	r1, [pc, #96]	; (800fcfc <HAL_DMA_IRQHandler+0x5dc>)
 800fc9c:	428b      	cmp	r3, r1
 800fc9e:	d100      	bne.n	800fca2 <HAL_DMA_IRQHandler+0x582>
 800fca0:	e157      	b.n	800ff52 <HAL_DMA_IRQHandler+0x832>
 800fca2:	4917      	ldr	r1, [pc, #92]	; (800fd00 <HAL_DMA_IRQHandler+0x5e0>)
 800fca4:	428b      	cmp	r3, r1
 800fca6:	d100      	bne.n	800fcaa <HAL_DMA_IRQHandler+0x58a>
 800fca8:	e174      	b.n	800ff94 <HAL_DMA_IRQHandler+0x874>
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d100      	bne.n	800fcb0 <HAL_DMA_IRQHandler+0x590>
 800fcae:	e197      	b.n	800ffe0 <HAL_DMA_IRQHandler+0x8c0>
 800fcb0:	4a14      	ldr	r2, [pc, #80]	; (800fd04 <HAL_DMA_IRQHandler+0x5e4>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d100      	bne.n	800fcb8 <HAL_DMA_IRQHandler+0x598>
 800fcb6:	e0c5      	b.n	800fe44 <HAL_DMA_IRQHandler+0x724>
 800fcb8:	4a13      	ldr	r2, [pc, #76]	; (800fd08 <HAL_DMA_IRQHandler+0x5e8>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d100      	bne.n	800fcc0 <HAL_DMA_IRQHandler+0x5a0>
 800fcbe:	e0ea      	b.n	800fe96 <HAL_DMA_IRQHandler+0x776>
 800fcc0:	4a12      	ldr	r2, [pc, #72]	; (800fd0c <HAL_DMA_IRQHandler+0x5ec>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d100      	bne.n	800fcc8 <HAL_DMA_IRQHandler+0x5a8>
 800fcc6:	e123      	b.n	800ff10 <HAL_DMA_IRQHandler+0x7f0>
 800fcc8:	4a11      	ldr	r2, [pc, #68]	; (800fd10 <HAL_DMA_IRQHandler+0x5f0>)
 800fcca:	4694      	mov	ip, r2
 800fccc:	4463      	add	r3, ip
 800fcce:	1e5a      	subs	r2, r3, #1
 800fcd0:	4193      	sbcs	r3, r2
 800fcd2:	22f0      	movs	r2, #240	; 0xf0
 800fcd4:	425b      	negs	r3, r3
 800fcd6:	0252      	lsls	r2, r2, #9
 800fcd8:	4013      	ands	r3, r2
 800fcda:	2280      	movs	r2, #128	; 0x80
 800fcdc:	0192      	lsls	r2, r2, #6
 800fcde:	4694      	mov	ip, r2
 800fce0:	4463      	add	r3, ip
 800fce2:	4a0d      	ldr	r2, [pc, #52]	; (800fd18 <HAL_DMA_IRQHandler+0x5f8>)
 800fce4:	6053      	str	r3, [r2, #4]
 800fce6:	e6ce      	b.n	800fa86 <HAL_DMA_IRQHandler+0x366>
 800fce8:	40020080 	.word	0x40020080
 800fcec:	40020008 	.word	0x40020008
 800fcf0:	4002001c 	.word	0x4002001c
 800fcf4:	40020030 	.word	0x40020030
 800fcf8:	40020044 	.word	0x40020044
 800fcfc:	40020058 	.word	0x40020058
 800fd00:	4002006c 	.word	0x4002006c
 800fd04:	40020408 	.word	0x40020408
 800fd08:	4002041c 	.word	0x4002041c
 800fd0c:	40020430 	.word	0x40020430
 800fd10:	bffdfbbc 	.word	0xbffdfbbc
 800fd14:	40020400 	.word	0x40020400
 800fd18:	40020000 	.word	0x40020000
 800fd1c:	fff88000 	.word	0xfff88000
 800fd20:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd24:	49c2      	ldr	r1, [pc, #776]	; (8010030 <HAL_DMA_IRQHandler+0x910>)
 800fd26:	428b      	cmp	r3, r1
 800fd28:	d100      	bne.n	800fd2c <HAL_DMA_IRQHandler+0x60c>
 800fd2a:	e08f      	b.n	800fe4c <HAL_DMA_IRQHandler+0x72c>
 800fd2c:	49c1      	ldr	r1, [pc, #772]	; (8010034 <HAL_DMA_IRQHandler+0x914>)
 800fd2e:	428b      	cmp	r3, r1
 800fd30:	d100      	bne.n	800fd34 <HAL_DMA_IRQHandler+0x614>
 800fd32:	e0b4      	b.n	800fe9e <HAL_DMA_IRQHandler+0x77e>
 800fd34:	49c0      	ldr	r1, [pc, #768]	; (8010038 <HAL_DMA_IRQHandler+0x918>)
 800fd36:	428b      	cmp	r3, r1
 800fd38:	d064      	beq.n	800fe04 <HAL_DMA_IRQHandler+0x6e4>
 800fd3a:	49c0      	ldr	r1, [pc, #768]	; (801003c <HAL_DMA_IRQHandler+0x91c>)
 800fd3c:	428b      	cmp	r3, r1
 800fd3e:	d100      	bne.n	800fd42 <HAL_DMA_IRQHandler+0x622>
 800fd40:	e0ef      	b.n	800ff22 <HAL_DMA_IRQHandler+0x802>
 800fd42:	49bf      	ldr	r1, [pc, #764]	; (8010040 <HAL_DMA_IRQHandler+0x920>)
 800fd44:	428b      	cmp	r3, r1
 800fd46:	d100      	bne.n	800fd4a <HAL_DMA_IRQHandler+0x62a>
 800fd48:	e112      	b.n	800ff70 <HAL_DMA_IRQHandler+0x850>
 800fd4a:	49be      	ldr	r1, [pc, #760]	; (8010044 <HAL_DMA_IRQHandler+0x924>)
 800fd4c:	428b      	cmp	r3, r1
 800fd4e:	d100      	bne.n	800fd52 <HAL_DMA_IRQHandler+0x632>
 800fd50:	e12f      	b.n	800ffb2 <HAL_DMA_IRQHandler+0x892>
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d100      	bne.n	800fd58 <HAL_DMA_IRQHandler+0x638>
 800fd56:	e14c      	b.n	800fff2 <HAL_DMA_IRQHandler+0x8d2>
 800fd58:	4abb      	ldr	r2, [pc, #748]	; (8010048 <HAL_DMA_IRQHandler+0x928>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d076      	beq.n	800fe4c <HAL_DMA_IRQHandler+0x72c>
 800fd5e:	4abb      	ldr	r2, [pc, #748]	; (801004c <HAL_DMA_IRQHandler+0x92c>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d100      	bne.n	800fd66 <HAL_DMA_IRQHandler+0x646>
 800fd64:	e09b      	b.n	800fe9e <HAL_DMA_IRQHandler+0x77e>
 800fd66:	4aba      	ldr	r2, [pc, #744]	; (8010050 <HAL_DMA_IRQHandler+0x930>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d04b      	beq.n	800fe04 <HAL_DMA_IRQHandler+0x6e4>
 800fd6c:	4ab9      	ldr	r2, [pc, #740]	; (8010054 <HAL_DMA_IRQHandler+0x934>)
 800fd6e:	189a      	adds	r2, r3, r2
 800fd70:	1e51      	subs	r1, r2, #1
 800fd72:	418a      	sbcs	r2, r1
 800fd74:	21f0      	movs	r1, #240	; 0xf0
 800fd76:	4252      	negs	r2, r2
 800fd78:	0289      	lsls	r1, r1, #10
 800fd7a:	400a      	ands	r2, r1
 800fd7c:	2180      	movs	r1, #128	; 0x80
 800fd7e:	01c9      	lsls	r1, r1, #7
 800fd80:	468c      	mov	ip, r1
 800fd82:	4462      	add	r2, ip
 800fd84:	49b4      	ldr	r1, [pc, #720]	; (8010058 <HAL_DMA_IRQHandler+0x938>)
 800fd86:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fd88:	2221      	movs	r2, #33	; 0x21
 800fd8a:	2111      	movs	r1, #17
 800fd8c:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fd8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fd90:	2a00      	cmp	r2, #0
 800fd92:	d100      	bne.n	800fd96 <HAL_DMA_IRQHandler+0x676>
 800fd94:	e6ea      	b.n	800fb6c <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 800fd96:	0020      	movs	r0, r4
 800fd98:	4790      	blx	r2
 800fd9a:	6823      	ldr	r3, [r4, #0]
 800fd9c:	e6e2      	b.n	800fb64 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd9e:	0632      	lsls	r2, r6, #24
 800fda0:	d500      	bpl.n	800fda4 <HAL_DMA_IRQHandler+0x684>
 800fda2:	e534      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fda4:	0019      	movs	r1, r3
 800fda6:	6800      	ldr	r0, [r0, #0]
 800fda8:	2240      	movs	r2, #64	; 0x40
 800fdaa:	e68c      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fdac:	0632      	lsls	r2, r6, #24
 800fdae:	d500      	bpl.n	800fdb2 <HAL_DMA_IRQHandler+0x692>
 800fdb0:	e52d      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdb2:	6800      	ldr	r0, [r0, #0]
 800fdb4:	2240      	movs	r2, #64	; 0x40
 800fdb6:	e5b3      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fdb8:	2280      	movs	r2, #128	; 0x80
 800fdba:	0192      	lsls	r2, r2, #6
 800fdbc:	e619      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdbe:	2280      	movs	r2, #128	; 0x80
 800fdc0:	00d2      	lsls	r2, r2, #3
 800fdc2:	e680      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fdc4:	2280      	movs	r2, #128	; 0x80
 800fdc6:	0292      	lsls	r2, r2, #10
 800fdc8:	e613      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fdca:	0432      	lsls	r2, r6, #16
 800fdcc:	d500      	bpl.n	800fdd0 <HAL_DMA_IRQHandler+0x6b0>
 800fdce:	e51e      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdd0:	4aa1      	ldr	r2, [pc, #644]	; (8010058 <HAL_DMA_IRQHandler+0x938>)
 800fdd2:	6810      	ldr	r0, [r2, #0]
 800fdd4:	2280      	movs	r2, #128	; 0x80
 800fdd6:	01d2      	lsls	r2, r2, #7
 800fdd8:	e675      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fdda:	0432      	lsls	r2, r6, #16
 800fddc:	d500      	bpl.n	800fde0 <HAL_DMA_IRQHandler+0x6c0>
 800fdde:	e516      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fde0:	2280      	movs	r2, #128	; 0x80
 800fde2:	6800      	ldr	r0, [r0, #0]
 800fde4:	0019      	movs	r1, r3
 800fde6:	01d2      	lsls	r2, r2, #7
 800fde8:	e66d      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fdea:	0432      	lsls	r2, r6, #16
 800fdec:	d500      	bpl.n	800fdf0 <HAL_DMA_IRQHandler+0x6d0>
 800fdee:	e50e      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdf0:	2280      	movs	r2, #128	; 0x80
 800fdf2:	6800      	ldr	r0, [r0, #0]
 800fdf4:	01d2      	lsls	r2, r2, #7
 800fdf6:	e593      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fdf8:	2280      	movs	r2, #128	; 0x80
 800fdfa:	0392      	lsls	r2, r2, #14
 800fdfc:	e5f9      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fdfe:	2280      	movs	r2, #128	; 0x80
 800fe00:	0112      	lsls	r2, r2, #4
 800fe02:	e542      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe04:	2280      	movs	r2, #128	; 0x80
 800fe06:	00d2      	lsls	r2, r2, #3
 800fe08:	e7bc      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe0a:	2280      	movs	r2, #128	; 0x80
 800fe0c:	0112      	lsls	r2, r2, #4
 800fe0e:	e6e5      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe10:	2280      	movs	r2, #128	; 0x80
 800fe12:	00d2      	lsls	r2, r2, #3
 800fe14:	e69a      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe16:	0132      	lsls	r2, r6, #4
 800fe18:	d500      	bpl.n	800fe1c <HAL_DMA_IRQHandler+0x6fc>
 800fe1a:	e4f8      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe1c:	0019      	movs	r1, r3
 800fe1e:	6800      	ldr	r0, [r0, #0]
 800fe20:	2280      	movs	r2, #128	; 0x80
 800fe22:	04d2      	lsls	r2, r2, #19
 800fe24:	e64f      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe26:	0132      	lsls	r2, r6, #4
 800fe28:	d500      	bpl.n	800fe2c <HAL_DMA_IRQHandler+0x70c>
 800fe2a:	e4f0      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe2c:	6800      	ldr	r0, [r0, #0]
 800fe2e:	2280      	movs	r2, #128	; 0x80
 800fe30:	04d2      	lsls	r2, r2, #19
 800fe32:	e575      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe34:	2380      	movs	r3, #128	; 0x80
 800fe36:	019b      	lsls	r3, r3, #6
 800fe38:	e623      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
 800fe3a:	2380      	movs	r3, #128	; 0x80
 800fe3c:	019b      	lsls	r3, r3, #6
 800fe3e:	e750      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
 800fe40:	2302      	movs	r3, #2
 800fe42:	e61e      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
 800fe44:	2302      	movs	r3, #2
 800fe46:	e74c      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe48:	2204      	movs	r2, #4
 800fe4a:	e67f      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
 800fe4c:	2204      	movs	r2, #4
 800fe4e:	e799      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fe50:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe52:	4882      	ldr	r0, [pc, #520]	; (801005c <HAL_DMA_IRQHandler+0x93c>)
 800fe54:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fe56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fe58:	432a      	orrs	r2, r5
 800fe5a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fe5c:	2221      	movs	r2, #33	; 0x21
 800fe5e:	3503      	adds	r5, #3
 800fe60:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fe62:	2500      	movs	r5, #0
 800fe64:	3a01      	subs	r2, #1
 800fe66:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fe68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe6a:	2a00      	cmp	r2, #0
 800fe6c:	d000      	beq.n	800fe70 <HAL_DMA_IRQHandler+0x750>
 800fe6e:	e6c4      	b.n	800fbfa <HAL_DMA_IRQHandler+0x4da>
 800fe70:	e554      	b.n	800f91c <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe72:	0332      	lsls	r2, r6, #12
 800fe74:	d500      	bpl.n	800fe78 <HAL_DMA_IRQHandler+0x758>
 800fe76:	e4ca      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe78:	2280      	movs	r2, #128	; 0x80
 800fe7a:	6800      	ldr	r0, [r0, #0]
 800fe7c:	02d2      	lsls	r2, r2, #11
 800fe7e:	e54f      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe80:	0332      	lsls	r2, r6, #12
 800fe82:	d500      	bpl.n	800fe86 <HAL_DMA_IRQHandler+0x766>
 800fe84:	e4c3      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe86:	2280      	movs	r2, #128	; 0x80
 800fe88:	6800      	ldr	r0, [r0, #0]
 800fe8a:	0019      	movs	r1, r3
 800fe8c:	02d2      	lsls	r2, r2, #11
 800fe8e:	e61a      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fe90:	2280      	movs	r2, #128	; 0x80
 800fe92:	0492      	lsls	r2, r2, #18
 800fe94:	e5ad      	b.n	800f9f2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe96:	2320      	movs	r3, #32
 800fe98:	e723      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
 800fe9a:	2320      	movs	r3, #32
 800fe9c:	e5f1      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe9e:	2240      	movs	r2, #64	; 0x40
 800fea0:	e770      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
 800fea2:	2240      	movs	r2, #64	; 0x40
 800fea4:	e652      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fea6:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fea8:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800feaa:	486c      	ldr	r0, [pc, #432]	; (801005c <HAL_DMA_IRQHandler+0x93c>)
 800feac:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800feae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800feb0:	432a      	orrs	r2, r5
 800feb2:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800feb4:	2221      	movs	r2, #33	; 0x21
 800feb6:	3503      	adds	r5, #3
 800feb8:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800feba:	2500      	movs	r5, #0
 800febc:	3a01      	subs	r2, #1
 800febe:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fec0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fec2:	2a00      	cmp	r2, #0
 800fec4:	d000      	beq.n	800fec8 <HAL_DMA_IRQHandler+0x7a8>
 800fec6:	e698      	b.n	800fbfa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fec8:	6800      	ldr	r0, [r0, #0]
 800feca:	e4f4      	b.n	800f8b6 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fecc:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fece:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fed0:	4861      	ldr	r0, [pc, #388]	; (8010058 <HAL_DMA_IRQHandler+0x938>)
 800fed2:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fed4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fed6:	432a      	orrs	r2, r5
 800fed8:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800feda:	2221      	movs	r2, #33	; 0x21
 800fedc:	3503      	adds	r5, #3
 800fede:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fee0:	2500      	movs	r5, #0
 800fee2:	3a01      	subs	r2, #1
 800fee4:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fee6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fee8:	2a00      	cmp	r2, #0
 800feea:	d000      	beq.n	800feee <HAL_DMA_IRQHandler+0x7ce>
 800feec:	e685      	b.n	800fbfa <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800feee:	6800      	ldr	r0, [r0, #0]
 800fef0:	e691      	b.n	800fc16 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fef2:	0232      	lsls	r2, r6, #8
 800fef4:	d500      	bpl.n	800fef8 <HAL_DMA_IRQHandler+0x7d8>
 800fef6:	e48a      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fef8:	0019      	movs	r1, r3
 800fefa:	6800      	ldr	r0, [r0, #0]
 800fefc:	2280      	movs	r2, #128	; 0x80
 800fefe:	03d2      	lsls	r2, r2, #15
 800ff00:	e5e1      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff02:	0232      	lsls	r2, r6, #8
 800ff04:	d500      	bpl.n	800ff08 <HAL_DMA_IRQHandler+0x7e8>
 800ff06:	e482      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff08:	6800      	ldr	r0, [r0, #0]
 800ff0a:	2280      	movs	r2, #128	; 0x80
 800ff0c:	03d2      	lsls	r2, r2, #15
 800ff0e:	e507      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ff10:	2380      	movs	r3, #128	; 0x80
 800ff12:	009b      	lsls	r3, r3, #2
 800ff14:	e6e5      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
 800ff16:	2380      	movs	r3, #128	; 0x80
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	e5b2      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ff1c:	2280      	movs	r2, #128	; 0x80
 800ff1e:	01d2      	lsls	r2, r2, #7
 800ff20:	e614      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
 800ff22:	2280      	movs	r2, #128	; 0x80
 800ff24:	01d2      	lsls	r2, r2, #7
 800ff26:	e72d      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ff28:	2280      	movs	r2, #128	; 0x80
 800ff2a:	0212      	lsls	r2, r2, #8
 800ff2c:	e4ad      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
 800ff2e:	2280      	movs	r2, #128	; 0x80
 800ff30:	0212      	lsls	r2, r2, #8
 800ff32:	e653      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff34:	0732      	lsls	r2, r6, #28
 800ff36:	d500      	bpl.n	800ff3a <HAL_DMA_IRQHandler+0x81a>
 800ff38:	e469      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff3a:	4a47      	ldr	r2, [pc, #284]	; (8010058 <HAL_DMA_IRQHandler+0x938>)
 800ff3c:	6810      	ldr	r0, [r2, #0]
 800ff3e:	2204      	movs	r2, #4
 800ff40:	e5c1      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff42:	0732      	lsls	r2, r6, #28
 800ff44:	d500      	bpl.n	800ff48 <HAL_DMA_IRQHandler+0x828>
 800ff46:	e462      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff48:	4a44      	ldr	r2, [pc, #272]	; (801005c <HAL_DMA_IRQHandler+0x93c>)
 800ff4a:	493f      	ldr	r1, [pc, #252]	; (8010048 <HAL_DMA_IRQHandler+0x928>)
 800ff4c:	6810      	ldr	r0, [r2, #0]
 800ff4e:	2204      	movs	r2, #4
 800ff50:	e4e6      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ff52:	2380      	movs	r3, #128	; 0x80
 800ff54:	029b      	lsls	r3, r3, #10
 800ff56:	e6c4      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
 800ff58:	2380      	movs	r3, #128	; 0x80
 800ff5a:	029b      	lsls	r3, r3, #10
 800ff5c:	e591      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ff5e:	2280      	movs	r2, #128	; 0x80
 800ff60:	0312      	lsls	r2, r2, #12
 800ff62:	e63b      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
 800ff64:	2280      	movs	r2, #128	; 0x80
 800ff66:	0312      	lsls	r2, r2, #12
 800ff68:	e48f      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ff6a:	2280      	movs	r2, #128	; 0x80
 800ff6c:	02d2      	lsls	r2, r2, #11
 800ff6e:	e5ed      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
 800ff70:	2280      	movs	r2, #128	; 0x80
 800ff72:	02d2      	lsls	r2, r2, #11
 800ff74:	e706      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff76:	0632      	lsls	r2, r6, #24
 800ff78:	d500      	bpl.n	800ff7c <HAL_DMA_IRQHandler+0x85c>
 800ff7a:	e448      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff7c:	4a36      	ldr	r2, [pc, #216]	; (8010058 <HAL_DMA_IRQHandler+0x938>)
 800ff7e:	6810      	ldr	r0, [r2, #0]
 800ff80:	2240      	movs	r2, #64	; 0x40
 800ff82:	e5a0      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff84:	0632      	lsls	r2, r6, #24
 800ff86:	d500      	bpl.n	800ff8a <HAL_DMA_IRQHandler+0x86a>
 800ff88:	e441      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff8a:	4a34      	ldr	r2, [pc, #208]	; (801005c <HAL_DMA_IRQHandler+0x93c>)
 800ff8c:	492f      	ldr	r1, [pc, #188]	; (801004c <HAL_DMA_IRQHandler+0x92c>)
 800ff8e:	6810      	ldr	r0, [r2, #0]
 800ff90:	2240      	movs	r2, #64	; 0x40
 800ff92:	e4c5      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ff94:	2380      	movs	r3, #128	; 0x80
 800ff96:	039b      	lsls	r3, r3, #14
 800ff98:	e6a3      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
 800ff9a:	2380      	movs	r3, #128	; 0x80
 800ff9c:	039b      	lsls	r3, r3, #14
 800ff9e:	e570      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ffa0:	2280      	movs	r2, #128	; 0x80
 800ffa2:	0412      	lsls	r2, r2, #16
 800ffa4:	e471      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ffa6:	2280      	movs	r2, #128	; 0x80
 800ffa8:	03d2      	lsls	r2, r2, #15
 800ffaa:	e5cf      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ffac:	2280      	movs	r2, #128	; 0x80
 800ffae:	0412      	lsls	r2, r2, #16
 800ffb0:	e614      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ffb2:	2280      	movs	r2, #128	; 0x80
 800ffb4:	03d2      	lsls	r2, r2, #15
 800ffb6:	e6e5      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffb8:	0532      	lsls	r2, r6, #20
 800ffba:	d500      	bpl.n	800ffbe <HAL_DMA_IRQHandler+0x89e>
 800ffbc:	e427      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffbe:	4a26      	ldr	r2, [pc, #152]	; (8010058 <HAL_DMA_IRQHandler+0x938>)
 800ffc0:	6810      	ldr	r0, [r2, #0]
 800ffc2:	2280      	movs	r2, #128	; 0x80
 800ffc4:	00d2      	lsls	r2, r2, #3
 800ffc6:	e57e      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffc8:	0532      	lsls	r2, r6, #20
 800ffca:	d500      	bpl.n	800ffce <HAL_DMA_IRQHandler+0x8ae>
 800ffcc:	e41f      	b.n	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffce:	4a23      	ldr	r2, [pc, #140]	; (801005c <HAL_DMA_IRQHandler+0x93c>)
 800ffd0:	0019      	movs	r1, r3
 800ffd2:	6810      	ldr	r0, [r2, #0]
 800ffd4:	2280      	movs	r2, #128	; 0x80
 800ffd6:	00d2      	lsls	r2, r2, #3
 800ffd8:	e4a2      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ffda:	2380      	movs	r3, #128	; 0x80
 800ffdc:	049b      	lsls	r3, r3, #18
 800ffde:	e550      	b.n	800fa82 <HAL_DMA_IRQHandler+0x362>
 800ffe0:	2380      	movs	r3, #128	; 0x80
 800ffe2:	049b      	lsls	r3, r3, #18
 800ffe4:	e67d      	b.n	800fce2 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ffe6:	2280      	movs	r2, #128	; 0x80
 800ffe8:	04d2      	lsls	r2, r2, #19
 800ffea:	e5af      	b.n	800fb4c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ffec:	2280      	movs	r2, #128	; 0x80
 800ffee:	0512      	lsls	r2, r2, #20
 800fff0:	e5f4      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fff2:	2280      	movs	r2, #128	; 0x80
 800fff4:	04d2      	lsls	r2, r2, #19
 800fff6:	e6c5      	b.n	800fd84 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fff8:	2280      	movs	r2, #128	; 0x80
 800fffa:	0512      	lsls	r2, r2, #20
 800fffc:	e445      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fffe:	0432      	lsls	r2, r6, #16
 8010000:	d501      	bpl.n	8010006 <HAL_DMA_IRQHandler+0x8e6>
 8010002:	f7ff fc04 	bl	800f80e <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010006:	0019      	movs	r1, r3
 8010008:	4a14      	ldr	r2, [pc, #80]	; (801005c <HAL_DMA_IRQHandler+0x93c>)
 801000a:	6810      	ldr	r0, [r2, #0]
 801000c:	2280      	movs	r2, #128	; 0x80
 801000e:	01d2      	lsls	r2, r2, #7
 8010010:	e486      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010012:	2208      	movs	r2, #8
 8010014:	e5e2      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
 8010016:	2208      	movs	r2, #8
 8010018:	e437      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
 801001a:	2280      	movs	r2, #128	; 0x80
 801001c:	e5de      	b.n	800fbdc <HAL_DMA_IRQHandler+0x4bc>
 801001e:	2280      	movs	r2, #128	; 0x80
 8010020:	e433      	b.n	800f88a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010022:	6800      	ldr	r0, [r0, #0]
 8010024:	0019      	movs	r1, r3
 8010026:	2204      	movs	r2, #4
 8010028:	e54d      	b.n	800fac6 <HAL_DMA_IRQHandler+0x3a6>
 801002a:	2280      	movs	r2, #128	; 0x80
 801002c:	00d2      	lsls	r2, r2, #3
 801002e:	e477      	b.n	800f920 <HAL_DMA_IRQHandler+0x200>
 8010030:	40020008 	.word	0x40020008
 8010034:	4002001c 	.word	0x4002001c
 8010038:	40020030 	.word	0x40020030
 801003c:	40020044 	.word	0x40020044
 8010040:	40020058 	.word	0x40020058
 8010044:	4002006c 	.word	0x4002006c
 8010048:	40020408 	.word	0x40020408
 801004c:	4002041c 	.word	0x4002041c
 8010050:	40020430 	.word	0x40020430
 8010054:	bffdfbbc 	.word	0xbffdfbbc
 8010058:	40020000 	.word	0x40020000
 801005c:	40020400 	.word	0x40020400

08010060 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010060:	4b05      	ldr	r3, [pc, #20]	; (8010078 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 8010062:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010064:	691a      	ldr	r2, [r3, #16]
 8010066:	0612      	lsls	r2, r2, #24
 8010068:	d504      	bpl.n	8010074 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 801006a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801006c:	4a03      	ldr	r2, [pc, #12]	; (801007c <HAL_FLASH_Unlock+0x1c>)
 801006e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010070:	4a03      	ldr	r2, [pc, #12]	; (8010080 <HAL_FLASH_Unlock+0x20>)
 8010072:	605a      	str	r2, [r3, #4]
}
 8010074:	4770      	bx	lr
 8010076:	46c0      	nop			; (mov r8, r8)
 8010078:	40022000 	.word	0x40022000
 801007c:	45670123 	.word	0x45670123
 8010080:	cdef89ab 	.word	0xcdef89ab

08010084 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010084:	2180      	movs	r1, #128	; 0x80
 8010086:	4a03      	ldr	r2, [pc, #12]	; (8010094 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 8010088:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801008a:	6913      	ldr	r3, [r2, #16]
 801008c:	430b      	orrs	r3, r1
 801008e:	6113      	str	r3, [r2, #16]
}
 8010090:	4770      	bx	lr
 8010092:	46c0      	nop			; (mov r8, r8)
 8010094:	40022000 	.word	0x40022000

08010098 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801009a:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 801009c:	f7fe fe70 	bl	800ed80 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80100a0:	4c1d      	ldr	r4, [pc, #116]	; (8010118 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 80100a2:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80100a4:	2601      	movs	r6, #1
 80100a6:	e001      	b.n	80100ac <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80100a8:	1c6b      	adds	r3, r5, #1
 80100aa:	d11d      	bne.n	80100e8 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80100ac:	68e3      	ldr	r3, [r4, #12]
 80100ae:	421e      	tst	r6, r3
 80100b0:	d1fa      	bne.n	80100a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80100b2:	2320      	movs	r3, #32
 80100b4:	68e2      	ldr	r2, [r4, #12]
 80100b6:	4213      	tst	r3, r2
 80100b8:	d000      	beq.n	80100bc <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80100ba:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80100bc:	4b16      	ldr	r3, [pc, #88]	; (8010118 <FLASH_WaitForLastOperation+0x80>)
 80100be:	68da      	ldr	r2, [r3, #12]
 80100c0:	06d2      	lsls	r2, r2, #27
 80100c2:	d51a      	bpl.n	80100fa <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80100c4:	4b14      	ldr	r3, [pc, #80]	; (8010118 <FLASH_WaitForLastOperation+0x80>)
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	06db      	lsls	r3, r3, #27
 80100ca:	d504      	bpl.n	80100d6 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80100cc:	2102      	movs	r1, #2
 80100ce:	4a13      	ldr	r2, [pc, #76]	; (801011c <FLASH_WaitForLastOperation+0x84>)
 80100d0:	69d3      	ldr	r3, [r2, #28]
 80100d2:	430b      	orrs	r3, r1
 80100d4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80100d6:	4b10      	ldr	r3, [pc, #64]	; (8010118 <FLASH_WaitForLastOperation+0x80>)
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	075b      	lsls	r3, r3, #29
 80100dc:	d416      	bmi.n	801010c <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80100de:	2214      	movs	r2, #20
    return HAL_ERROR;
 80100e0:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80100e2:	4b0d      	ldr	r3, [pc, #52]	; (8010118 <FLASH_WaitForLastOperation+0x80>)
 80100e4:	60da      	str	r2, [r3, #12]
}
 80100e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80100e8:	2d00      	cmp	r5, #0
 80100ea:	d004      	beq.n	80100f6 <FLASH_WaitForLastOperation+0x5e>
 80100ec:	f7fe fe48 	bl	800ed80 <HAL_GetTick>
 80100f0:	1bc0      	subs	r0, r0, r7
 80100f2:	42a8      	cmp	r0, r5
 80100f4:	d9da      	bls.n	80100ac <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 80100f6:	2003      	movs	r0, #3
 80100f8:	e7f5      	b.n	80100e6 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80100fa:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80100fc:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80100fe:	075b      	lsls	r3, r3, #29
 8010100:	d5f1      	bpl.n	80100e6 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010102:	4b05      	ldr	r3, [pc, #20]	; (8010118 <FLASH_WaitForLastOperation+0x80>)
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	06db      	lsls	r3, r3, #27
 8010108:	d5e5      	bpl.n	80100d6 <FLASH_WaitForLastOperation+0x3e>
 801010a:	e7df      	b.n	80100cc <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801010c:	2101      	movs	r1, #1
 801010e:	4a03      	ldr	r2, [pc, #12]	; (801011c <FLASH_WaitForLastOperation+0x84>)
 8010110:	69d3      	ldr	r3, [r2, #28]
 8010112:	430b      	orrs	r3, r1
 8010114:	61d3      	str	r3, [r2, #28]
 8010116:	e7e2      	b.n	80100de <FLASH_WaitForLastOperation+0x46>
 8010118:	40022000 	.word	0x40022000
 801011c:	20007210 	.word	0x20007210

08010120 <HAL_FLASH_Program>:
{
 8010120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010122:	464e      	mov	r6, r9
 8010124:	4657      	mov	r7, sl
 8010126:	46de      	mov	lr, fp
 8010128:	4645      	mov	r5, r8
 801012a:	b5e0      	push	{r5, r6, r7, lr}
 801012c:	469a      	mov	sl, r3
 801012e:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010130:	4b2a      	ldr	r3, [pc, #168]	; (80101dc <HAL_FLASH_Program+0xbc>)
{
 8010132:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010134:	4699      	mov	r9, r3
 8010136:	7e1b      	ldrb	r3, [r3, #24]
{
 8010138:	0004      	movs	r4, r0
 801013a:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801013c:	2b01      	cmp	r3, #1
 801013e:	d048      	beq.n	80101d2 <HAL_FLASH_Program+0xb2>
 8010140:	2501      	movs	r5, #1
 8010142:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010144:	4826      	ldr	r0, [pc, #152]	; (80101e0 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010146:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010148:	f7ff ffa6 	bl	8010098 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801014c:	2800      	cmp	r0, #0
 801014e:	d136      	bne.n	80101be <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010150:	2c01      	cmp	r4, #1
 8010152:	d040      	beq.n	80101d6 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010154:	3c02      	subs	r4, #2
 8010156:	4263      	negs	r3, r4
 8010158:	415c      	adcs	r4, r3
 801015a:	2304      	movs	r3, #4
 801015c:	4264      	negs	r4, r4
 801015e:	43ac      	bics	r4, r5
 8010160:	46a0      	mov	r8, r4
 8010162:	469c      	mov	ip, r3
 8010164:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010166:	2300      	movs	r3, #0
      nbiterations = 4;
 8010168:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801016a:	469b      	mov	fp, r3
 801016c:	e018      	b.n	80101a0 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801016e:	4653      	mov	r3, sl
 8010170:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010172:	464a      	mov	r2, r9
 8010174:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010176:	2701      	movs	r7, #1
 8010178:	4c1a      	ldr	r4, [pc, #104]	; (80101e4 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801017a:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801017c:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801017e:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010180:	433a      	orrs	r2, r7
 8010182:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010184:	4816      	ldr	r0, [pc, #88]	; (80101e0 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010186:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010188:	f7ff ff86 	bl	8010098 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801018c:	6923      	ldr	r3, [r4, #16]
 801018e:	43bb      	bics	r3, r7
 8010190:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010192:	2800      	cmp	r0, #0
 8010194:	d113      	bne.n	80101be <HAL_FLASH_Program+0x9e>
 8010196:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8010198:	b2eb      	uxtb	r3, r5
 801019a:	3602      	adds	r6, #2
 801019c:	4598      	cmp	r8, r3
 801019e:	d90e      	bls.n	80101be <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80101a0:	2220      	movs	r2, #32
 80101a2:	012b      	lsls	r3, r5, #4
 80101a4:	4252      	negs	r2, r2
 80101a6:	189a      	adds	r2, r3, r2
 80101a8:	d5e1      	bpl.n	801016e <HAL_FLASH_Program+0x4e>
 80101aa:	2220      	movs	r2, #32
 80101ac:	4651      	mov	r1, sl
 80101ae:	1ad2      	subs	r2, r2, r3
 80101b0:	4091      	lsls	r1, r2
 80101b2:	000a      	movs	r2, r1
 80101b4:	9901      	ldr	r1, [sp, #4]
 80101b6:	40d9      	lsrs	r1, r3
 80101b8:	000b      	movs	r3, r1
 80101ba:	4313      	orrs	r3, r2
 80101bc:	e7d9      	b.n	8010172 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80101be:	2300      	movs	r3, #0
 80101c0:	464a      	mov	r2, r9
 80101c2:	7613      	strb	r3, [r2, #24]
}
 80101c4:	b003      	add	sp, #12
 80101c6:	bc3c      	pop	{r2, r3, r4, r5}
 80101c8:	4690      	mov	r8, r2
 80101ca:	4699      	mov	r9, r3
 80101cc:	46a2      	mov	sl, r4
 80101ce:	46ab      	mov	fp, r5
 80101d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80101d2:	2002      	movs	r0, #2
 80101d4:	e7f6      	b.n	80101c4 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 80101d6:	2301      	movs	r3, #1
 80101d8:	4698      	mov	r8, r3
 80101da:	e7c4      	b.n	8010166 <HAL_FLASH_Program+0x46>
 80101dc:	20007210 	.word	0x20007210
 80101e0:	0000c350 	.word	0x0000c350
 80101e4:	40022000 	.word	0x40022000

080101e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80101e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ea:	464f      	mov	r7, r9
 80101ec:	4646      	mov	r6, r8
 80101ee:	46d6      	mov	lr, sl
 80101f0:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80101f2:	4f30      	ldr	r7, [pc, #192]	; (80102b4 <HAL_FLASHEx_Erase+0xcc>)
{
 80101f4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80101f6:	7e3b      	ldrb	r3, [r7, #24]
{
 80101f8:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d057      	beq.n	80102ae <HAL_FLASHEx_Erase+0xc6>
 80101fe:	2301      	movs	r3, #1
 8010200:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010202:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010204:	482c      	ldr	r0, [pc, #176]	; (80102b8 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010206:	2b01      	cmp	r3, #1
 8010208:	d034      	beq.n	8010274 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801020a:	f7ff ff45 	bl	8010098 <FLASH_WaitForLastOperation>
 801020e:	2800      	cmp	r0, #0
 8010210:	d134      	bne.n	801027c <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010212:	2301      	movs	r3, #1
 8010214:	464a      	mov	r2, r9
 8010216:	425b      	negs	r3, r3
 8010218:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801021a:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 801021c:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801021e:	02db      	lsls	r3, r3, #11
 8010220:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010222:	429d      	cmp	r5, r3
 8010224:	d22a      	bcs.n	801027c <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010226:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010228:	4c24      	ldr	r4, [pc, #144]	; (80102bc <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801022a:	4698      	mov	r8, r3
 801022c:	e00a      	b.n	8010244 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 801022e:	2380      	movs	r3, #128	; 0x80
 8010230:	011b      	lsls	r3, r3, #4
 8010232:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010234:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010236:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010238:	4694      	mov	ip, r2
 801023a:	68b3      	ldr	r3, [r6, #8]
 801023c:	02db      	lsls	r3, r3, #11
 801023e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010240:	42ab      	cmp	r3, r5
 8010242:	d91c      	bls.n	801027e <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010244:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010246:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010248:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801024a:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801024c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801024e:	481a      	ldr	r0, [pc, #104]	; (80102b8 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010250:	4313      	orrs	r3, r2
 8010252:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010254:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010256:	6923      	ldr	r3, [r4, #16]
 8010258:	323e      	adds	r2, #62	; 0x3e
 801025a:	4313      	orrs	r3, r2
 801025c:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801025e:	f7ff ff1b 	bl	8010098 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010262:	4652      	mov	r2, sl
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	4393      	bics	r3, r2
 8010268:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 801026a:	2800      	cmp	r0, #0
 801026c:	d0df      	beq.n	801022e <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 801026e:	464b      	mov	r3, r9
 8010270:	601d      	str	r5, [r3, #0]
            break;
 8010272:	e004      	b.n	801027e <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010274:	f7ff ff10 	bl	8010098 <FLASH_WaitForLastOperation>
 8010278:	2800      	cmp	r0, #0
 801027a:	d007      	beq.n	801028c <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 801027c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 801027e:	2300      	movs	r3, #0
 8010280:	763b      	strb	r3, [r7, #24]
}
 8010282:	bc1c      	pop	{r2, r3, r4}
 8010284:	4690      	mov	r8, r2
 8010286:	4699      	mov	r9, r3
 8010288:	46a2      	mov	sl, r4
 801028a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801028c:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801028e:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010290:	4c0a      	ldr	r4, [pc, #40]	; (80102bc <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010292:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010294:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010296:	4808      	ldr	r0, [pc, #32]	; (80102b8 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010298:	432b      	orrs	r3, r5
 801029a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801029c:	6923      	ldr	r3, [r4, #16]
 801029e:	4313      	orrs	r3, r2
 80102a0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80102a2:	f7ff fef9 	bl	8010098 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80102a6:	6923      	ldr	r3, [r4, #16]
 80102a8:	43ab      	bics	r3, r5
 80102aa:	6123      	str	r3, [r4, #16]
 80102ac:	e7e7      	b.n	801027e <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 80102ae:	2002      	movs	r0, #2
 80102b0:	e7e7      	b.n	8010282 <HAL_FLASHEx_Erase+0x9a>
 80102b2:	46c0      	nop			; (mov r8, r8)
 80102b4:	20007210 	.word	0x20007210
 80102b8:	0000c350 	.word	0x0000c350
 80102bc:	40022000 	.word	0x40022000

080102c0 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80102c0:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80102c2:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80102c4:	4b05      	ldr	r3, [pc, #20]	; (80102dc <FLASH_PageErase+0x1c>)
 80102c6:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80102c8:	4b05      	ldr	r3, [pc, #20]	; (80102e0 <FLASH_PageErase+0x20>)
 80102ca:	691a      	ldr	r2, [r3, #16]
 80102cc:	430a      	orrs	r2, r1
 80102ce:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80102d0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80102d2:	691a      	ldr	r2, [r3, #16]
 80102d4:	313e      	adds	r1, #62	; 0x3e
 80102d6:	430a      	orrs	r2, r1
 80102d8:	611a      	str	r2, [r3, #16]
}
 80102da:	4770      	bx	lr
 80102dc:	20007210 	.word	0x20007210
 80102e0:	40022000 	.word	0x40022000

080102e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80102e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102e6:	464e      	mov	r6, r9
 80102e8:	46de      	mov	lr, fp
 80102ea:	4657      	mov	r7, sl
 80102ec:	4645      	mov	r5, r8
 80102ee:	b5e0      	push	{r5, r6, r7, lr}
 80102f0:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80102f2:	6809      	ldr	r1, [r1, #0]
{ 
 80102f4:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 80102f6:	2900      	cmp	r1, #0
 80102f8:	d100      	bne.n	80102fc <HAL_GPIO_Init+0x18>
 80102fa:	e080      	b.n	80103fe <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80102fc:	4b70      	ldr	r3, [pc, #448]	; (80104c0 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 80102fe:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010300:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010302:	4b70      	ldr	r3, [pc, #448]	; (80104c4 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010304:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010306:	4698      	mov	r8, r3
 8010308:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801030a:	0033      	movs	r3, r6
 801030c:	4652      	mov	r2, sl
 801030e:	40a3      	lsls	r3, r4
 8010310:	4013      	ands	r3, r2
 8010312:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010314:	d06f      	beq.n	80103f6 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010316:	464b      	mov	r3, r9
 8010318:	6859      	ldr	r1, [r3, #4]
 801031a:	2310      	movs	r3, #16
 801031c:	000f      	movs	r7, r1
 801031e:	439f      	bics	r7, r3
 8010320:	003b      	movs	r3, r7
 8010322:	9701      	str	r7, [sp, #4]
 8010324:	2f02      	cmp	r7, #2
 8010326:	d100      	bne.n	801032a <HAL_GPIO_Init+0x46>
 8010328:	e070      	b.n	801040c <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801032a:	2203      	movs	r2, #3
 801032c:	0065      	lsls	r5, r4, #1
 801032e:	40aa      	lsls	r2, r5
 8010330:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010332:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010334:	4013      	ands	r3, r2
 8010336:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010338:	2303      	movs	r3, #3
 801033a:	400b      	ands	r3, r1
 801033c:	40ab      	lsls	r3, r5
 801033e:	469c      	mov	ip, r3
 8010340:	003b      	movs	r3, r7
 8010342:	4667      	mov	r7, ip
 8010344:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010346:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010348:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801034a:	3f01      	subs	r7, #1
 801034c:	2f01      	cmp	r7, #1
 801034e:	d800      	bhi.n	8010352 <HAL_GPIO_Init+0x6e>
 8010350:	e079      	b.n	8010446 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010352:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010354:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010356:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010358:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801035a:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801035c:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801035e:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010360:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010362:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010364:	4219      	tst	r1, r3
 8010366:	d046      	beq.n	80103f6 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010368:	465b      	mov	r3, fp
 801036a:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801036c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801036e:	4332      	orrs	r2, r6
 8010370:	619a      	str	r2, [r3, #24]
 8010372:	699a      	ldr	r2, [r3, #24]
 8010374:	4b54      	ldr	r3, [pc, #336]	; (80104c8 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010376:	4027      	ands	r7, r4
 8010378:	469c      	mov	ip, r3
 801037a:	230f      	movs	r3, #15
 801037c:	00bf      	lsls	r7, r7, #2
 801037e:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010380:	4032      	ands	r2, r6
 8010382:	9203      	str	r2, [sp, #12]
 8010384:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010386:	08a2      	lsrs	r2, r4, #2
 8010388:	0092      	lsls	r2, r2, #2
 801038a:	4462      	add	r2, ip
 801038c:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801038e:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010390:	2390      	movs	r3, #144	; 0x90
 8010392:	05db      	lsls	r3, r3, #23
 8010394:	4298      	cmp	r0, r3
 8010396:	d012      	beq.n	80103be <HAL_GPIO_Init+0xda>
 8010398:	4b4c      	ldr	r3, [pc, #304]	; (80104cc <HAL_GPIO_Init+0x1e8>)
 801039a:	4298      	cmp	r0, r3
 801039c:	d100      	bne.n	80103a0 <HAL_GPIO_Init+0xbc>
 801039e:	e083      	b.n	80104a8 <HAL_GPIO_Init+0x1c4>
 80103a0:	4b4b      	ldr	r3, [pc, #300]	; (80104d0 <HAL_GPIO_Init+0x1ec>)
 80103a2:	4298      	cmp	r0, r3
 80103a4:	d100      	bne.n	80103a8 <HAL_GPIO_Init+0xc4>
 80103a6:	e07b      	b.n	80104a0 <HAL_GPIO_Init+0x1bc>
 80103a8:	4b4a      	ldr	r3, [pc, #296]	; (80104d4 <HAL_GPIO_Init+0x1f0>)
 80103aa:	4298      	cmp	r0, r3
 80103ac:	d100      	bne.n	80103b0 <HAL_GPIO_Init+0xcc>
 80103ae:	e07f      	b.n	80104b0 <HAL_GPIO_Init+0x1cc>
 80103b0:	4b49      	ldr	r3, [pc, #292]	; (80104d8 <HAL_GPIO_Init+0x1f4>)
 80103b2:	4298      	cmp	r0, r3
 80103b4:	d100      	bne.n	80103b8 <HAL_GPIO_Init+0xd4>
 80103b6:	e07f      	b.n	80104b8 <HAL_GPIO_Init+0x1d4>
 80103b8:	2305      	movs	r3, #5
 80103ba:	40bb      	lsls	r3, r7
 80103bc:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 80103be:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 80103c0:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 80103c2:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80103c4:	9b00      	ldr	r3, [sp, #0]
 80103c6:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80103c8:	03cb      	lsls	r3, r1, #15
 80103ca:	d451      	bmi.n	8010470 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80103cc:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80103ce:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 80103d0:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80103d2:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80103d4:	038b      	lsls	r3, r1, #14
 80103d6:	d452      	bmi.n	801047e <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80103d8:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80103da:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 80103dc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80103de:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80103e0:	02cb      	lsls	r3, r1, #11
 80103e2:	d453      	bmi.n	801048c <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80103e4:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80103e6:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 80103e8:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80103ea:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80103ec:	028b      	lsls	r3, r1, #10
 80103ee:	d454      	bmi.n	801049a <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80103f0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80103f2:	4643      	mov	r3, r8
 80103f4:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 80103f6:	4653      	mov	r3, sl
      }
    }
    
    position++;
 80103f8:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 80103fa:	40e3      	lsrs	r3, r4
 80103fc:	d185      	bne.n	801030a <HAL_GPIO_Init+0x26>
  } 
}
 80103fe:	b005      	add	sp, #20
 8010400:	bc3c      	pop	{r2, r3, r4, r5}
 8010402:	4690      	mov	r8, r2
 8010404:	4699      	mov	r9, r3
 8010406:	46a2      	mov	sl, r4
 8010408:	46ab      	mov	fp, r5
 801040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801040c:	2507      	movs	r5, #7
 801040e:	4025      	ands	r5, r4
 8010410:	00ad      	lsls	r5, r5, #2
 8010412:	330d      	adds	r3, #13
 8010414:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010416:	08e2      	lsrs	r2, r4, #3
 8010418:	0092      	lsls	r2, r2, #2
 801041a:	1882      	adds	r2, r0, r2
 801041c:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801041e:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010420:	464b      	mov	r3, r9
 8010422:	691b      	ldr	r3, [r3, #16]
 8010424:	40ab      	lsls	r3, r5
 8010426:	001d      	movs	r5, r3
 8010428:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 801042a:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801042c:	2203      	movs	r2, #3
 801042e:	0065      	lsls	r5, r4, #1
 8010430:	40aa      	lsls	r2, r5
 8010432:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010434:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010436:	4017      	ands	r7, r2
 8010438:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801043a:	2703      	movs	r7, #3
 801043c:	400f      	ands	r7, r1
 801043e:	40af      	lsls	r7, r5
 8010440:	4663      	mov	r3, ip
 8010442:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010444:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010446:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010448:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801044a:	4017      	ands	r7, r2
 801044c:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801044e:	68df      	ldr	r7, [r3, #12]
 8010450:	4663      	mov	r3, ip
 8010452:	40af      	lsls	r7, r5
 8010454:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010456:	0033      	movs	r3, r6
 8010458:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 801045a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801045c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801045e:	439f      	bics	r7, r3
 8010460:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010462:	090f      	lsrs	r7, r1, #4
 8010464:	4037      	ands	r7, r6
 8010466:	40a7      	lsls	r7, r4
 8010468:	4663      	mov	r3, ip
 801046a:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 801046c:	6047      	str	r7, [r0, #4]
 801046e:	e770      	b.n	8010352 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010470:	9b00      	ldr	r3, [sp, #0]
 8010472:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010474:	4643      	mov	r3, r8
 8010476:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010478:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801047a:	038b      	lsls	r3, r1, #14
 801047c:	d5ac      	bpl.n	80103d8 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 801047e:	9b00      	ldr	r3, [sp, #0]
 8010480:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010482:	4643      	mov	r3, r8
 8010484:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010486:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010488:	02cb      	lsls	r3, r1, #11
 801048a:	d5ab      	bpl.n	80103e4 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 801048c:	9b00      	ldr	r3, [sp, #0]
 801048e:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010490:	4643      	mov	r3, r8
 8010492:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010494:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010496:	028b      	lsls	r3, r1, #10
 8010498:	d5aa      	bpl.n	80103f0 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 801049a:	9b00      	ldr	r3, [sp, #0]
 801049c:	431a      	orrs	r2, r3
 801049e:	e7a8      	b.n	80103f2 <HAL_GPIO_Init+0x10e>
 80104a0:	2302      	movs	r3, #2
 80104a2:	40bb      	lsls	r3, r7
 80104a4:	431d      	orrs	r5, r3
 80104a6:	e78a      	b.n	80103be <HAL_GPIO_Init+0xda>
 80104a8:	0033      	movs	r3, r6
 80104aa:	40bb      	lsls	r3, r7
 80104ac:	431d      	orrs	r5, r3
 80104ae:	e786      	b.n	80103be <HAL_GPIO_Init+0xda>
 80104b0:	2303      	movs	r3, #3
 80104b2:	40bb      	lsls	r3, r7
 80104b4:	431d      	orrs	r5, r3
 80104b6:	e782      	b.n	80103be <HAL_GPIO_Init+0xda>
 80104b8:	2304      	movs	r3, #4
 80104ba:	40bb      	lsls	r3, r7
 80104bc:	431d      	orrs	r5, r3
 80104be:	e77e      	b.n	80103be <HAL_GPIO_Init+0xda>
 80104c0:	40021000 	.word	0x40021000
 80104c4:	40010400 	.word	0x40010400
 80104c8:	40010000 	.word	0x40010000
 80104cc:	48000400 	.word	0x48000400
 80104d0:	48000800 	.word	0x48000800
 80104d4:	48000c00 	.word	0x48000c00
 80104d8:	48001000 	.word	0x48001000

080104dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80104dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104de:	46de      	mov	lr, fp
 80104e0:	4657      	mov	r7, sl
 80104e2:	464e      	mov	r6, r9
 80104e4:	4645      	mov	r5, r8
 80104e6:	b5e0      	push	{r5, r6, r7, lr}
 80104e8:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80104ea:	2900      	cmp	r1, #0
 80104ec:	d055      	beq.n	801059a <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 80104ee:	2201      	movs	r2, #1
 80104f0:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80104f2:	3202      	adds	r2, #2
 80104f4:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80104f6:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 80104f8:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80104fa:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 80104fc:	4666      	mov	r6, ip
 80104fe:	000d      	movs	r5, r1
 8010500:	409e      	lsls	r6, r3
 8010502:	4035      	ands	r5, r6
    if (iocurrent)
 8010504:	d045      	beq.n	8010592 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010506:	4647      	mov	r7, r8
 8010508:	005c      	lsls	r4, r3, #1
 801050a:	40a7      	lsls	r7, r4
 801050c:	43fc      	mvns	r4, r7
 801050e:	6802      	ldr	r2, [r0, #0]
 8010510:	4022      	ands	r2, r4
 8010512:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010514:	08da      	lsrs	r2, r3, #3
 8010516:	0092      	lsls	r2, r2, #2
 8010518:	1887      	adds	r7, r0, r2
 801051a:	9701      	str	r7, [sp, #4]
 801051c:	6a3f      	ldr	r7, [r7, #32]
 801051e:	46ba      	mov	sl, r7
 8010520:	2707      	movs	r7, #7
 8010522:	401f      	ands	r7, r3
 8010524:	00bf      	lsls	r7, r7, #2
 8010526:	46bb      	mov	fp, r7
 8010528:	464f      	mov	r7, r9
 801052a:	465a      	mov	r2, fp
 801052c:	4097      	lsls	r7, r2
 801052e:	46bb      	mov	fp, r7
 8010530:	4657      	mov	r7, sl
 8010532:	465a      	mov	r2, fp
 8010534:	4397      	bics	r7, r2
 8010536:	003a      	movs	r2, r7
 8010538:	9f01      	ldr	r7, [sp, #4]
 801053a:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801053c:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801053e:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010540:	4022      	ands	r2, r4
 8010542:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010544:	6842      	ldr	r2, [r0, #4]
 8010546:	43b2      	bics	r2, r6
 8010548:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801054a:	68c2      	ldr	r2, [r0, #12]
 801054c:	4014      	ands	r4, r2
 801054e:	60c4      	str	r4, [r0, #12]
 8010550:	4c2b      	ldr	r4, [pc, #172]	; (8010600 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010552:	089a      	lsrs	r2, r3, #2
 8010554:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010556:	4644      	mov	r4, r8
 8010558:	401c      	ands	r4, r3
 801055a:	00a4      	lsls	r4, r4, #2
 801055c:	40a7      	lsls	r7, r4
 801055e:	0092      	lsls	r2, r2, #2
 8010560:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010562:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010564:	46ba      	mov	sl, r7
 8010566:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010568:	2790      	movs	r7, #144	; 0x90
 801056a:	05ff      	lsls	r7, r7, #23
 801056c:	42b8      	cmp	r0, r7
 801056e:	d01b      	beq.n	80105a8 <HAL_GPIO_DeInit+0xcc>
 8010570:	4f24      	ldr	r7, [pc, #144]	; (8010604 <HAL_GPIO_DeInit+0x128>)
 8010572:	42b8      	cmp	r0, r7
 8010574:	d033      	beq.n	80105de <HAL_GPIO_DeInit+0x102>
 8010576:	4f24      	ldr	r7, [pc, #144]	; (8010608 <HAL_GPIO_DeInit+0x12c>)
 8010578:	42b8      	cmp	r0, r7
 801057a:	d038      	beq.n	80105ee <HAL_GPIO_DeInit+0x112>
 801057c:	4f23      	ldr	r7, [pc, #140]	; (801060c <HAL_GPIO_DeInit+0x130>)
 801057e:	42b8      	cmp	r0, r7
 8010580:	d039      	beq.n	80105f6 <HAL_GPIO_DeInit+0x11a>
 8010582:	4f23      	ldr	r7, [pc, #140]	; (8010610 <HAL_GPIO_DeInit+0x134>)
 8010584:	42b8      	cmp	r0, r7
 8010586:	d02e      	beq.n	80105e6 <HAL_GPIO_DeInit+0x10a>
 8010588:	2705      	movs	r7, #5
 801058a:	40a7      	lsls	r7, r4
 801058c:	003c      	movs	r4, r7
 801058e:	42a6      	cmp	r6, r4
 8010590:	d00d      	beq.n	80105ae <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010592:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010594:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010596:	40da      	lsrs	r2, r3
 8010598:	d1b0      	bne.n	80104fc <HAL_GPIO_DeInit+0x20>
  }
}
 801059a:	b003      	add	sp, #12
 801059c:	bc3c      	pop	{r2, r3, r4, r5}
 801059e:	4690      	mov	r8, r2
 80105a0:	4699      	mov	r9, r3
 80105a2:	46a2      	mov	sl, r4
 80105a4:	46ab      	mov	fp, r5
 80105a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105a8:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80105aa:	42a6      	cmp	r6, r4
 80105ac:	d1f1      	bne.n	8010592 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80105ae:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80105b0:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80105b2:	6894      	ldr	r4, [r2, #8]
    position++;
 80105b4:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80105b6:	43b4      	bics	r4, r6
 80105b8:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80105ba:	4c16      	ldr	r4, [pc, #88]	; (8010614 <HAL_GPIO_DeInit+0x138>)
 80105bc:	6822      	ldr	r2, [r4, #0]
 80105be:	402a      	ands	r2, r5
 80105c0:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80105c2:	6862      	ldr	r2, [r4, #4]
 80105c4:	402a      	ands	r2, r5
 80105c6:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80105c8:	68a2      	ldr	r2, [r4, #8]
 80105ca:	402a      	ands	r2, r5
 80105cc:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80105ce:	68e2      	ldr	r2, [r4, #12]
 80105d0:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 80105d2:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80105d4:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 80105d6:	40da      	lsrs	r2, r3
 80105d8:	d000      	beq.n	80105dc <HAL_GPIO_DeInit+0x100>
 80105da:	e78f      	b.n	80104fc <HAL_GPIO_DeInit+0x20>
 80105dc:	e7dd      	b.n	801059a <HAL_GPIO_DeInit+0xbe>
 80105de:	4667      	mov	r7, ip
 80105e0:	40a7      	lsls	r7, r4
 80105e2:	003c      	movs	r4, r7
 80105e4:	e7e1      	b.n	80105aa <HAL_GPIO_DeInit+0xce>
 80105e6:	2704      	movs	r7, #4
 80105e8:	40a7      	lsls	r7, r4
 80105ea:	003c      	movs	r4, r7
 80105ec:	e7dd      	b.n	80105aa <HAL_GPIO_DeInit+0xce>
 80105ee:	2702      	movs	r7, #2
 80105f0:	40a7      	lsls	r7, r4
 80105f2:	003c      	movs	r4, r7
 80105f4:	e7d9      	b.n	80105aa <HAL_GPIO_DeInit+0xce>
 80105f6:	4647      	mov	r7, r8
 80105f8:	40a7      	lsls	r7, r4
 80105fa:	003c      	movs	r4, r7
 80105fc:	e7d5      	b.n	80105aa <HAL_GPIO_DeInit+0xce>
 80105fe:	46c0      	nop			; (mov r8, r8)
 8010600:	40010000 	.word	0x40010000
 8010604:	48000400 	.word	0x48000400
 8010608:	48000800 	.word	0x48000800
 801060c:	48000c00 	.word	0x48000c00
 8010610:	48001000 	.word	0x48001000
 8010614:	40010400 	.word	0x40010400

08010618 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010618:	6900      	ldr	r0, [r0, #16]
 801061a:	4008      	ands	r0, r1
 801061c:	1e41      	subs	r1, r0, #1
 801061e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010620:	b2c0      	uxtb	r0, r0
  }
 8010622:	4770      	bx	lr

08010624 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010624:	2a00      	cmp	r2, #0
 8010626:	d101      	bne.n	801062c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010628:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801062a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801062c:	6181      	str	r1, [r0, #24]
 801062e:	e7fc      	b.n	801062a <HAL_GPIO_WritePin+0x6>

08010630 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010630:	6943      	ldr	r3, [r0, #20]
 8010632:	4059      	eors	r1, r3
 8010634:	6141      	str	r1, [r0, #20]
}
 8010636:	4770      	bx	lr

08010638 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010638:	4770      	bx	lr
 801063a:	46c0      	nop			; (mov r8, r8)

0801063c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801063c:	2380      	movs	r3, #128	; 0x80
 801063e:	4a03      	ldr	r2, [pc, #12]	; (801064c <HAL_PWR_EnableBkUpAccess+0x10>)
 8010640:	005b      	lsls	r3, r3, #1
 8010642:	6811      	ldr	r1, [r2, #0]
 8010644:	430b      	orrs	r3, r1
 8010646:	6013      	str	r3, [r2, #0]
}
 8010648:	4770      	bx	lr
 801064a:	46c0      	nop			; (mov r8, r8)
 801064c:	40007000 	.word	0x40007000

08010650 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010652:	46c6      	mov	lr, r8
 8010654:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010656:	6803      	ldr	r3, [r0, #0]
{
 8010658:	b082      	sub	sp, #8
 801065a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801065c:	07da      	lsls	r2, r3, #31
 801065e:	d54b      	bpl.n	80106f8 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010660:	210c      	movs	r1, #12
 8010662:	48c4      	ldr	r0, [pc, #784]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 8010664:	6842      	ldr	r2, [r0, #4]
 8010666:	400a      	ands	r2, r1
 8010668:	2a04      	cmp	r2, #4
 801066a:	d100      	bne.n	801066e <HAL_RCC_OscConfig+0x1e>
 801066c:	e153      	b.n	8010916 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801066e:	6842      	ldr	r2, [r0, #4]
 8010670:	4011      	ands	r1, r2
 8010672:	2908      	cmp	r1, #8
 8010674:	d108      	bne.n	8010688 <HAL_RCC_OscConfig+0x38>
 8010676:	21c0      	movs	r1, #192	; 0xc0
 8010678:	6842      	ldr	r2, [r0, #4]
 801067a:	0249      	lsls	r1, r1, #9
 801067c:	400a      	ands	r2, r1
 801067e:	2180      	movs	r1, #128	; 0x80
 8010680:	0249      	lsls	r1, r1, #9
 8010682:	428a      	cmp	r2, r1
 8010684:	d100      	bne.n	8010688 <HAL_RCC_OscConfig+0x38>
 8010686:	e146      	b.n	8010916 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010688:	4dba      	ldr	r5, [pc, #744]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 801068a:	4abb      	ldr	r2, [pc, #748]	; (8010978 <HAL_RCC_OscConfig+0x328>)
 801068c:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801068e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010690:	4013      	ands	r3, r2
 8010692:	602b      	str	r3, [r5, #0]
 8010694:	682b      	ldr	r3, [r5, #0]
 8010696:	4ab9      	ldr	r2, [pc, #740]	; (801097c <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010698:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801069a:	4013      	ands	r3, r2
 801069c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801069e:	f7fe fb6f 	bl	800ed80 <HAL_GetTick>
 80106a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106a4:	e005      	b.n	80106b2 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106a6:	f7fe fb6b 	bl	800ed80 <HAL_GetTick>
 80106aa:	1bc0      	subs	r0, r0, r7
 80106ac:	2864      	cmp	r0, #100	; 0x64
 80106ae:	d900      	bls.n	80106b2 <HAL_RCC_OscConfig+0x62>
 80106b0:	e13b      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106b2:	682b      	ldr	r3, [r5, #0]
 80106b4:	4233      	tst	r3, r6
 80106b6:	d1f6      	bne.n	80106a6 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80106b8:	6863      	ldr	r3, [r4, #4]
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d100      	bne.n	80106c0 <HAL_RCC_OscConfig+0x70>
 80106be:	e196      	b.n	80109ee <HAL_RCC_OscConfig+0x39e>
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d000      	beq.n	80106c6 <HAL_RCC_OscConfig+0x76>
 80106c4:	e1bc      	b.n	8010a40 <HAL_RCC_OscConfig+0x3f0>
 80106c6:	682b      	ldr	r3, [r5, #0]
 80106c8:	4aab      	ldr	r2, [pc, #684]	; (8010978 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106ca:	4eaa      	ldr	r6, [pc, #680]	; (8010974 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80106cc:	4013      	ands	r3, r2
 80106ce:	602b      	str	r3, [r5, #0]
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	4aaa      	ldr	r2, [pc, #680]	; (801097c <HAL_RCC_OscConfig+0x32c>)
 80106d4:	4013      	ands	r3, r2
 80106d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80106d8:	f7fe fb52 	bl	800ed80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106dc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80106de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106e0:	02ad      	lsls	r5, r5, #10
 80106e2:	e005      	b.n	80106f0 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106e4:	f7fe fb4c 	bl	800ed80 <HAL_GetTick>
 80106e8:	1bc0      	subs	r0, r0, r7
 80106ea:	2864      	cmp	r0, #100	; 0x64
 80106ec:	d900      	bls.n	80106f0 <HAL_RCC_OscConfig+0xa0>
 80106ee:	e11c      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106f0:	6833      	ldr	r3, [r6, #0]
 80106f2:	422b      	tst	r3, r5
 80106f4:	d1f6      	bne.n	80106e4 <HAL_RCC_OscConfig+0x94>
 80106f6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80106f8:	079a      	lsls	r2, r3, #30
 80106fa:	d529      	bpl.n	8010750 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80106fc:	220c      	movs	r2, #12
 80106fe:	499d      	ldr	r1, [pc, #628]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 8010700:	6848      	ldr	r0, [r1, #4]
 8010702:	4202      	tst	r2, r0
 8010704:	d100      	bne.n	8010708 <HAL_RCC_OscConfig+0xb8>
 8010706:	e0fd      	b.n	8010904 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010708:	6848      	ldr	r0, [r1, #4]
 801070a:	4002      	ands	r2, r0
 801070c:	2a08      	cmp	r2, #8
 801070e:	d100      	bne.n	8010712 <HAL_RCC_OscConfig+0xc2>
 8010710:	e0ef      	b.n	80108f2 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010712:	68e3      	ldr	r3, [r4, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d100      	bne.n	801071a <HAL_RCC_OscConfig+0xca>
 8010718:	e138      	b.n	801098c <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801071a:	2201      	movs	r2, #1
 801071c:	4f95      	ldr	r7, [pc, #596]	; (8010974 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801071e:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	4313      	orrs	r3, r2
 8010724:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8010726:	f7fe fb2b 	bl	800ed80 <HAL_GetTick>
 801072a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801072c:	e005      	b.n	801073a <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801072e:	f7fe fb27 	bl	800ed80 <HAL_GetTick>
 8010732:	1b80      	subs	r0, r0, r6
 8010734:	2864      	cmp	r0, #100	; 0x64
 8010736:	d900      	bls.n	801073a <HAL_RCC_OscConfig+0xea>
 8010738:	e0f7      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	421d      	tst	r5, r3
 801073e:	d0f6      	beq.n	801072e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010740:	21f8      	movs	r1, #248	; 0xf8
 8010742:	683a      	ldr	r2, [r7, #0]
 8010744:	6923      	ldr	r3, [r4, #16]
 8010746:	438a      	bics	r2, r1
 8010748:	00db      	lsls	r3, r3, #3
 801074a:	4313      	orrs	r3, r2
 801074c:	603b      	str	r3, [r7, #0]
 801074e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010750:	071a      	lsls	r2, r3, #28
 8010752:	d45d      	bmi.n	8010810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010754:	075a      	lsls	r2, r3, #29
 8010756:	d474      	bmi.n	8010842 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8010758:	06da      	lsls	r2, r3, #27
 801075a:	d512      	bpl.n	8010782 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801075c:	6962      	ldr	r2, [r4, #20]
 801075e:	2a01      	cmp	r2, #1
 8010760:	d100      	bne.n	8010764 <HAL_RCC_OscConfig+0x114>
 8010762:	e18c      	b.n	8010a7e <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010764:	3205      	adds	r2, #5
 8010766:	d000      	beq.n	801076a <HAL_RCC_OscConfig+0x11a>
 8010768:	e124      	b.n	80109b4 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 801076a:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801076c:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 801076e:	4981      	ldr	r1, [pc, #516]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 8010770:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010772:	4382      	bics	r2, r0
 8010774:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010776:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010778:	69a2      	ldr	r2, [r4, #24]
 801077a:	43a8      	bics	r0, r5
 801077c:	00d2      	lsls	r2, r2, #3
 801077e:	4302      	orrs	r2, r0
 8010780:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010782:	069b      	lsls	r3, r3, #26
 8010784:	d522      	bpl.n	80107cc <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010786:	220c      	movs	r2, #12
 8010788:	497a      	ldr	r1, [pc, #488]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 801078a:	684b      	ldr	r3, [r1, #4]
 801078c:	4013      	ands	r3, r2
 801078e:	2b0c      	cmp	r3, #12
 8010790:	d100      	bne.n	8010794 <HAL_RCC_OscConfig+0x144>
 8010792:	e14a      	b.n	8010a2a <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010794:	684b      	ldr	r3, [r1, #4]
 8010796:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010798:	2a08      	cmp	r2, #8
 801079a:	d100      	bne.n	801079e <HAL_RCC_OscConfig+0x14e>
 801079c:	e13e      	b.n	8010a1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801079e:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80107a0:	4d74      	ldr	r5, [pc, #464]	; (8010974 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d100      	bne.n	80107a8 <HAL_RCC_OscConfig+0x158>
 80107a6:	e156      	b.n	8010a56 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80107a8:	2680      	movs	r6, #128	; 0x80
 80107aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80107ac:	0276      	lsls	r6, r6, #9
 80107ae:	4333      	orrs	r3, r6
 80107b0:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 80107b2:	f7fe fae5 	bl	800ed80 <HAL_GetTick>
 80107b6:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80107b8:	e005      	b.n	80107c6 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80107ba:	f7fe fae1 	bl	800ed80 <HAL_GetTick>
 80107be:	1bc0      	subs	r0, r0, r7
 80107c0:	2864      	cmp	r0, #100	; 0x64
 80107c2:	d900      	bls.n	80107c6 <HAL_RCC_OscConfig+0x176>
 80107c4:	e0b1      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80107c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80107c8:	4233      	tst	r3, r6
 80107ca:	d0f6      	beq.n	80107ba <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80107cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d01c      	beq.n	801080c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80107d2:	220c      	movs	r2, #12
 80107d4:	4d67      	ldr	r5, [pc, #412]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 80107d6:	6869      	ldr	r1, [r5, #4]
 80107d8:	400a      	ands	r2, r1
 80107da:	2a08      	cmp	r2, #8
 80107dc:	d100      	bne.n	80107e0 <HAL_RCC_OscConfig+0x190>
 80107de:	e098      	b.n	8010912 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80107e0:	2b02      	cmp	r3, #2
 80107e2:	d100      	bne.n	80107e6 <HAL_RCC_OscConfig+0x196>
 80107e4:	e16a      	b.n	8010abc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80107e6:	682b      	ldr	r3, [r5, #0]
 80107e8:	4a65      	ldr	r2, [pc, #404]	; (8010980 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80107ea:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80107ec:	4013      	ands	r3, r2
 80107ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80107f0:	f7fe fac6 	bl	800ed80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80107f4:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 80107f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80107f8:	e005      	b.n	8010806 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80107fa:	f7fe fac1 	bl	800ed80 <HAL_GetTick>
 80107fe:	1b80      	subs	r0, r0, r6
 8010800:	2864      	cmp	r0, #100	; 0x64
 8010802:	d900      	bls.n	8010806 <HAL_RCC_OscConfig+0x1b6>
 8010804:	e091      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010806:	682b      	ldr	r3, [r5, #0]
 8010808:	4223      	tst	r3, r4
 801080a:	d1f6      	bne.n	80107fa <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 801080c:	2000      	movs	r0, #0
 801080e:	e08d      	b.n	801092c <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010810:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8010812:	4d58      	ldr	r5, [pc, #352]	; (8010974 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010814:	2b00      	cmp	r3, #0
 8010816:	d100      	bne.n	801081a <HAL_RCC_OscConfig+0x1ca>
 8010818:	e08c      	b.n	8010934 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801081a:	2201      	movs	r2, #1
 801081c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801081e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8010820:	4313      	orrs	r3, r2
 8010822:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010824:	f7fe faac 	bl	800ed80 <HAL_GetTick>
 8010828:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801082a:	e004      	b.n	8010836 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801082c:	f7fe faa8 	bl	800ed80 <HAL_GetTick>
 8010830:	1bc0      	subs	r0, r0, r7
 8010832:	2864      	cmp	r0, #100	; 0x64
 8010834:	d879      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010838:	421e      	tst	r6, r3
 801083a:	d0f7      	beq.n	801082c <HAL_RCC_OscConfig+0x1dc>
 801083c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801083e:	075a      	lsls	r2, r3, #29
 8010840:	d58a      	bpl.n	8010758 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010842:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010844:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8010846:	4a4b      	ldr	r2, [pc, #300]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 8010848:	0540      	lsls	r0, r0, #21
 801084a:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801084c:	4d4d      	ldr	r5, [pc, #308]	; (8010984 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 801084e:	4301      	orrs	r1, r0
 8010850:	61d1      	str	r1, [r2, #28]
 8010852:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010854:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8010856:	4003      	ands	r3, r0
 8010858:	9301      	str	r3, [sp, #4]
 801085a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	4333      	orrs	r3, r6
 8010860:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8010862:	f7fe fa8d 	bl	800ed80 <HAL_GetTick>
 8010866:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010868:	e004      	b.n	8010874 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801086a:	f7fe fa89 	bl	800ed80 <HAL_GetTick>
 801086e:	1bc0      	subs	r0, r0, r7
 8010870:	2864      	cmp	r0, #100	; 0x64
 8010872:	d85a      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	4233      	tst	r3, r6
 8010878:	d0f7      	beq.n	801086a <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801087a:	2201      	movs	r2, #1
 801087c:	4d3d      	ldr	r5, [pc, #244]	; (8010974 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801087e:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010880:	6a2b      	ldr	r3, [r5, #32]
 8010882:	4393      	bics	r3, r2
 8010884:	622b      	str	r3, [r5, #32]
 8010886:	6a2b      	ldr	r3, [r5, #32]
 8010888:	3203      	adds	r2, #3
 801088a:	4393      	bics	r3, r2
 801088c:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 801088e:	f7fe fa77 	bl	800ed80 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010892:	4b3d      	ldr	r3, [pc, #244]	; (8010988 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8010894:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010896:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010898:	e004      	b.n	80108a4 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801089a:	f7fe fa71 	bl	800ed80 <HAL_GetTick>
 801089e:	1bc0      	subs	r0, r0, r7
 80108a0:	4540      	cmp	r0, r8
 80108a2:	d842      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108a4:	6a2b      	ldr	r3, [r5, #32]
 80108a6:	421e      	tst	r6, r3
 80108a8:	d1f7      	bne.n	801089a <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80108aa:	68a3      	ldr	r3, [r4, #8]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d100      	bne.n	80108b2 <HAL_RCC_OscConfig+0x262>
 80108b0:	e157      	b.n	8010b62 <HAL_RCC_OscConfig+0x512>
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d100      	bne.n	80108b8 <HAL_RCC_OscConfig+0x268>
 80108b6:	e139      	b.n	8010b2c <HAL_RCC_OscConfig+0x4dc>
 80108b8:	2b05      	cmp	r3, #5
 80108ba:	d100      	bne.n	80108be <HAL_RCC_OscConfig+0x26e>
 80108bc:	e155      	b.n	8010b6a <HAL_RCC_OscConfig+0x51a>
 80108be:	2201      	movs	r2, #1
 80108c0:	6a2b      	ldr	r3, [r5, #32]
 80108c2:	4393      	bics	r3, r2
 80108c4:	622b      	str	r3, [r5, #32]
 80108c6:	6a2b      	ldr	r3, [r5, #32]
 80108c8:	3203      	adds	r2, #3
 80108ca:	4393      	bics	r3, r2
 80108cc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80108ce:	f7fe fa57 	bl	800ed80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80108d2:	4e28      	ldr	r6, [pc, #160]	; (8010974 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 80108d4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80108d6:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80108d8:	4f2b      	ldr	r7, [pc, #172]	; (8010988 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80108da:	e005      	b.n	80108e8 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80108dc:	f7fe fa50 	bl	800ed80 <HAL_GetTick>
 80108e0:	4643      	mov	r3, r8
 80108e2:	1ac0      	subs	r0, r0, r3
 80108e4:	42b8      	cmp	r0, r7
 80108e6:	d820      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80108e8:	6a33      	ldr	r3, [r6, #32]
 80108ea:	421d      	tst	r5, r3
 80108ec:	d0f6      	beq.n	80108dc <HAL_RCC_OscConfig+0x28c>
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	e732      	b.n	8010758 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80108f2:	684a      	ldr	r2, [r1, #4]
 80108f4:	21c0      	movs	r1, #192	; 0xc0
 80108f6:	0249      	lsls	r1, r1, #9
 80108f8:	400a      	ands	r2, r1
 80108fa:	2180      	movs	r1, #128	; 0x80
 80108fc:	0209      	lsls	r1, r1, #8
 80108fe:	428a      	cmp	r2, r1
 8010900:	d000      	beq.n	8010904 <HAL_RCC_OscConfig+0x2b4>
 8010902:	e706      	b.n	8010712 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010904:	4a1b      	ldr	r2, [pc, #108]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 8010906:	6812      	ldr	r2, [r2, #0]
 8010908:	0792      	lsls	r2, r2, #30
 801090a:	d526      	bpl.n	801095a <HAL_RCC_OscConfig+0x30a>
 801090c:	68e2      	ldr	r2, [r4, #12]
 801090e:	2a01      	cmp	r2, #1
 8010910:	d023      	beq.n	801095a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8010912:	2001      	movs	r0, #1
 8010914:	e00a      	b.n	801092c <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010916:	4a17      	ldr	r2, [pc, #92]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 8010918:	6812      	ldr	r2, [r2, #0]
 801091a:	0392      	lsls	r2, r2, #14
 801091c:	d400      	bmi.n	8010920 <HAL_RCC_OscConfig+0x2d0>
 801091e:	e6eb      	b.n	80106f8 <HAL_RCC_OscConfig+0xa8>
 8010920:	6862      	ldr	r2, [r4, #4]
 8010922:	2a00      	cmp	r2, #0
 8010924:	d000      	beq.n	8010928 <HAL_RCC_OscConfig+0x2d8>
 8010926:	e6e7      	b.n	80106f8 <HAL_RCC_OscConfig+0xa8>
 8010928:	e7f3      	b.n	8010912 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801092a:	2003      	movs	r0, #3
}
 801092c:	b002      	add	sp, #8
 801092e:	bc04      	pop	{r2}
 8010930:	4690      	mov	r8, r2
 8010932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8010934:	2201      	movs	r2, #1
 8010936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010938:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 801093a:	4393      	bics	r3, r2
 801093c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801093e:	f7fe fa1f 	bl	800ed80 <HAL_GetTick>
 8010942:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010944:	e004      	b.n	8010950 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010946:	f7fe fa1b 	bl	800ed80 <HAL_GetTick>
 801094a:	1bc0      	subs	r0, r0, r7
 801094c:	2864      	cmp	r0, #100	; 0x64
 801094e:	d8ec      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010950:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010952:	421e      	tst	r6, r3
 8010954:	d1f7      	bne.n	8010946 <HAL_RCC_OscConfig+0x2f6>
 8010956:	6823      	ldr	r3, [r4, #0]
 8010958:	e771      	b.n	801083e <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801095a:	25f8      	movs	r5, #248	; 0xf8
 801095c:	4805      	ldr	r0, [pc, #20]	; (8010974 <HAL_RCC_OscConfig+0x324>)
 801095e:	6922      	ldr	r2, [r4, #16]
 8010960:	6801      	ldr	r1, [r0, #0]
 8010962:	00d2      	lsls	r2, r2, #3
 8010964:	43a9      	bics	r1, r5
 8010966:	430a      	orrs	r2, r1
 8010968:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801096a:	071a      	lsls	r2, r3, #28
 801096c:	d400      	bmi.n	8010970 <HAL_RCC_OscConfig+0x320>
 801096e:	e6f1      	b.n	8010754 <HAL_RCC_OscConfig+0x104>
 8010970:	e74e      	b.n	8010810 <HAL_RCC_OscConfig+0x1c0>
 8010972:	46c0      	nop			; (mov r8, r8)
 8010974:	40021000 	.word	0x40021000
 8010978:	fffeffff 	.word	0xfffeffff
 801097c:	fffbffff 	.word	0xfffbffff
 8010980:	feffffff 	.word	0xfeffffff
 8010984:	40007000 	.word	0x40007000
 8010988:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 801098c:	2201      	movs	r2, #1
 801098e:	4d7b      	ldr	r5, [pc, #492]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010990:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8010992:	682b      	ldr	r3, [r5, #0]
 8010994:	4393      	bics	r3, r2
 8010996:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010998:	f7fe f9f2 	bl	800ed80 <HAL_GetTick>
 801099c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801099e:	e004      	b.n	80109aa <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80109a0:	f7fe f9ee 	bl	800ed80 <HAL_GetTick>
 80109a4:	1bc0      	subs	r0, r0, r7
 80109a6:	2864      	cmp	r0, #100	; 0x64
 80109a8:	d8bf      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109aa:	682b      	ldr	r3, [r5, #0]
 80109ac:	421e      	tst	r6, r3
 80109ae:	d1f7      	bne.n	80109a0 <HAL_RCC_OscConfig+0x350>
 80109b0:	6823      	ldr	r3, [r4, #0]
 80109b2:	e6cd      	b.n	8010750 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 80109b4:	2204      	movs	r2, #4
 80109b6:	4d71      	ldr	r5, [pc, #452]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80109b8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80109ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80109bc:	4313      	orrs	r3, r2
 80109be:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80109c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80109c2:	3a03      	subs	r2, #3
 80109c4:	4393      	bics	r3, r2
 80109c6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80109c8:	f7fe f9da 	bl	800ed80 <HAL_GetTick>
 80109cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80109ce:	e004      	b.n	80109da <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80109d0:	f7fe f9d6 	bl	800ed80 <HAL_GetTick>
 80109d4:	1bc0      	subs	r0, r0, r7
 80109d6:	2864      	cmp	r0, #100	; 0x64
 80109d8:	d8a7      	bhi.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80109da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80109dc:	421e      	tst	r6, r3
 80109de:	d1f7      	bne.n	80109d0 <HAL_RCC_OscConfig+0x380>
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	e6ce      	b.n	8010782 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80109e4:	2380      	movs	r3, #128	; 0x80
 80109e6:	682a      	ldr	r2, [r5, #0]
 80109e8:	02db      	lsls	r3, r3, #11
 80109ea:	4313      	orrs	r3, r2
 80109ec:	602b      	str	r3, [r5, #0]
 80109ee:	2380      	movs	r3, #128	; 0x80
 80109f0:	682a      	ldr	r2, [r5, #0]
 80109f2:	025b      	lsls	r3, r3, #9
 80109f4:	4313      	orrs	r3, r2
 80109f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80109f8:	f7fe f9c2 	bl	800ed80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80109fc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80109fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010a00:	4e5e      	ldr	r6, [pc, #376]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
 8010a02:	02ad      	lsls	r5, r5, #10
 8010a04:	e005      	b.n	8010a12 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010a06:	f7fe f9bb 	bl	800ed80 <HAL_GetTick>
 8010a0a:	1bc0      	subs	r0, r0, r7
 8010a0c:	2864      	cmp	r0, #100	; 0x64
 8010a0e:	d900      	bls.n	8010a12 <HAL_RCC_OscConfig+0x3c2>
 8010a10:	e78b      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010a12:	6833      	ldr	r3, [r6, #0]
 8010a14:	422b      	tst	r3, r5
 8010a16:	d0f6      	beq.n	8010a06 <HAL_RCC_OscConfig+0x3b6>
 8010a18:	6823      	ldr	r3, [r4, #0]
 8010a1a:	e66d      	b.n	80106f8 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010a1c:	22c0      	movs	r2, #192	; 0xc0
 8010a1e:	684b      	ldr	r3, [r1, #4]
 8010a20:	0252      	lsls	r2, r2, #9
 8010a22:	4013      	ands	r3, r2
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d000      	beq.n	8010a2a <HAL_RCC_OscConfig+0x3da>
 8010a28:	e6b9      	b.n	801079e <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010a2a:	4b54      	ldr	r3, [pc, #336]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
 8010a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2e:	03db      	lsls	r3, r3, #15
 8010a30:	d400      	bmi.n	8010a34 <HAL_RCC_OscConfig+0x3e4>
 8010a32:	e6cb      	b.n	80107cc <HAL_RCC_OscConfig+0x17c>
 8010a34:	69e3      	ldr	r3, [r4, #28]
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d100      	bne.n	8010a3c <HAL_RCC_OscConfig+0x3ec>
 8010a3a:	e6c7      	b.n	80107cc <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 8010a3c:	2001      	movs	r0, #1
 8010a3e:	e775      	b.n	801092c <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010a40:	2b05      	cmp	r3, #5
 8010a42:	d0cf      	beq.n	80109e4 <HAL_RCC_OscConfig+0x394>
 8010a44:	682b      	ldr	r3, [r5, #0]
 8010a46:	4a4e      	ldr	r2, [pc, #312]	; (8010b80 <HAL_RCC_OscConfig+0x530>)
 8010a48:	4013      	ands	r3, r2
 8010a4a:	602b      	str	r3, [r5, #0]
 8010a4c:	682b      	ldr	r3, [r5, #0]
 8010a4e:	4a4d      	ldr	r2, [pc, #308]	; (8010b84 <HAL_RCC_OscConfig+0x534>)
 8010a50:	4013      	ands	r3, r2
 8010a52:	602b      	str	r3, [r5, #0]
 8010a54:	e7d0      	b.n	80109f8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 8010a56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010a58:	4a49      	ldr	r2, [pc, #292]	; (8010b80 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010a5a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010a60:	f7fe f98e 	bl	800ed80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010a64:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 8010a66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010a68:	e005      	b.n	8010a76 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010a6a:	f7fe f989 	bl	800ed80 <HAL_GetTick>
 8010a6e:	1bc0      	subs	r0, r0, r7
 8010a70:	2864      	cmp	r0, #100	; 0x64
 8010a72:	d900      	bls.n	8010a76 <HAL_RCC_OscConfig+0x426>
 8010a74:	e759      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010a76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010a78:	4233      	tst	r3, r6
 8010a7a:	d1f6      	bne.n	8010a6a <HAL_RCC_OscConfig+0x41a>
 8010a7c:	e6a6      	b.n	80107cc <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010a7e:	2104      	movs	r1, #4
 8010a80:	4d3e      	ldr	r5, [pc, #248]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010a82:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8010a84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010a86:	430b      	orrs	r3, r1
 8010a88:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8010a8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010a8c:	431a      	orrs	r2, r3
 8010a8e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010a90:	f7fe f976 	bl	800ed80 <HAL_GetTick>
 8010a94:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010a96:	e005      	b.n	8010aa4 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010a98:	f7fe f972 	bl	800ed80 <HAL_GetTick>
 8010a9c:	1bc0      	subs	r0, r0, r7
 8010a9e:	2864      	cmp	r0, #100	; 0x64
 8010aa0:	d900      	bls.n	8010aa4 <HAL_RCC_OscConfig+0x454>
 8010aa2:	e742      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010aa4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010aa6:	421e      	tst	r6, r3
 8010aa8:	d0f6      	beq.n	8010a98 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010aaa:	21f8      	movs	r1, #248	; 0xf8
 8010aac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8010aae:	69a3      	ldr	r3, [r4, #24]
 8010ab0:	438a      	bics	r2, r1
 8010ab2:	00db      	lsls	r3, r3, #3
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	636b      	str	r3, [r5, #52]	; 0x34
 8010ab8:	6823      	ldr	r3, [r4, #0]
 8010aba:	e662      	b.n	8010782 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	4a32      	ldr	r2, [pc, #200]	; (8010b88 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010ac0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8010ac2:	4013      	ands	r3, r2
 8010ac4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010ac6:	f7fe f95b 	bl	800ed80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010aca:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8010acc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010ace:	e005      	b.n	8010adc <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ad0:	f7fe f956 	bl	800ed80 <HAL_GetTick>
 8010ad4:	1bc0      	subs	r0, r0, r7
 8010ad6:	2864      	cmp	r0, #100	; 0x64
 8010ad8:	d900      	bls.n	8010adc <HAL_RCC_OscConfig+0x48c>
 8010ada:	e726      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010adc:	682b      	ldr	r3, [r5, #0]
 8010ade:	4233      	tst	r3, r6
 8010ae0:	d1f6      	bne.n	8010ad0 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010ae2:	220f      	movs	r2, #15
 8010ae4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010ae6:	4393      	bics	r3, r2
 8010ae8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010aea:	4313      	orrs	r3, r2
 8010aec:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010aee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010af2:	686a      	ldr	r2, [r5, #4]
 8010af4:	430b      	orrs	r3, r1
 8010af6:	4925      	ldr	r1, [pc, #148]	; (8010b8c <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010af8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010afa:	400a      	ands	r2, r1
 8010afc:	4313      	orrs	r3, r2
 8010afe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8010b00:	2380      	movs	r3, #128	; 0x80
 8010b02:	682a      	ldr	r2, [r5, #0]
 8010b04:	045b      	lsls	r3, r3, #17
 8010b06:	4313      	orrs	r3, r2
 8010b08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010b0a:	f7fe f939 	bl	800ed80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010b0e:	4d1b      	ldr	r5, [pc, #108]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8010b10:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010b12:	04a4      	lsls	r4, r4, #18
 8010b14:	e005      	b.n	8010b22 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010b16:	f7fe f933 	bl	800ed80 <HAL_GetTick>
 8010b1a:	1b80      	subs	r0, r0, r6
 8010b1c:	2864      	cmp	r0, #100	; 0x64
 8010b1e:	d900      	bls.n	8010b22 <HAL_RCC_OscConfig+0x4d2>
 8010b20:	e703      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010b22:	682b      	ldr	r3, [r5, #0]
 8010b24:	4223      	tst	r3, r4
 8010b26:	d0f6      	beq.n	8010b16 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8010b28:	2000      	movs	r0, #0
 8010b2a:	e6ff      	b.n	801092c <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b30:	4e12      	ldr	r6, [pc, #72]	; (8010b7c <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b32:	4393      	bics	r3, r2
 8010b34:	622b      	str	r3, [r5, #32]
 8010b36:	6a2b      	ldr	r3, [r5, #32]
 8010b38:	3203      	adds	r2, #3
 8010b3a:	4393      	bics	r3, r2
 8010b3c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8010b3e:	f7fe f91f 	bl	800ed80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b42:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8010b44:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b46:	4f12      	ldr	r7, [pc, #72]	; (8010b90 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b48:	e006      	b.n	8010b58 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b4a:	f7fe f919 	bl	800ed80 <HAL_GetTick>
 8010b4e:	4643      	mov	r3, r8
 8010b50:	1ac0      	subs	r0, r0, r3
 8010b52:	42b8      	cmp	r0, r7
 8010b54:	d900      	bls.n	8010b58 <HAL_RCC_OscConfig+0x508>
 8010b56:	e6e8      	b.n	801092a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b58:	6a33      	ldr	r3, [r6, #32]
 8010b5a:	421d      	tst	r5, r3
 8010b5c:	d1f5      	bne.n	8010b4a <HAL_RCC_OscConfig+0x4fa>
 8010b5e:	6823      	ldr	r3, [r4, #0]
 8010b60:	e5fa      	b.n	8010758 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b62:	6a2a      	ldr	r2, [r5, #32]
 8010b64:	4313      	orrs	r3, r2
 8010b66:	622b      	str	r3, [r5, #32]
 8010b68:	e6b1      	b.n	80108ce <HAL_RCC_OscConfig+0x27e>
 8010b6a:	2204      	movs	r2, #4
 8010b6c:	6a2b      	ldr	r3, [r5, #32]
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	622b      	str	r3, [r5, #32]
 8010b72:	6a2b      	ldr	r3, [r5, #32]
 8010b74:	3a03      	subs	r2, #3
 8010b76:	4313      	orrs	r3, r2
 8010b78:	622b      	str	r3, [r5, #32]
 8010b7a:	e6a8      	b.n	80108ce <HAL_RCC_OscConfig+0x27e>
 8010b7c:	40021000 	.word	0x40021000
 8010b80:	fffeffff 	.word	0xfffeffff
 8010b84:	fffbffff 	.word	0xfffbffff
 8010b88:	feffffff 	.word	0xfeffffff
 8010b8c:	ffc27fff 	.word	0xffc27fff
 8010b90:	00001388 	.word	0x00001388

08010b94 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b96:	46ce      	mov	lr, r9
 8010b98:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010b9a:	2301      	movs	r3, #1
{
 8010b9c:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010b9e:	4985      	ldr	r1, [pc, #532]	; (8010db4 <HAL_RCC_ClockConfig+0x220>)
{
 8010ba0:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010ba2:	680a      	ldr	r2, [r1, #0]
{
 8010ba4:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010ba6:	401a      	ands	r2, r3
 8010ba8:	42a2      	cmp	r2, r4
 8010baa:	d20c      	bcs.n	8010bc6 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010bac:	680a      	ldr	r2, [r1, #0]
 8010bae:	439a      	bics	r2, r3
 8010bb0:	4322      	orrs	r2, r4
 8010bb2:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010bb4:	680a      	ldr	r2, [r1, #0]
 8010bb6:	4013      	ands	r3, r2
 8010bb8:	42a3      	cmp	r3, r4
 8010bba:	d054      	beq.n	8010c66 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8010bbc:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010bbe:	bc0c      	pop	{r2, r3}
 8010bc0:	4690      	mov	r8, r2
 8010bc2:	4699      	mov	r9, r3
 8010bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010bc6:	6803      	ldr	r3, [r0, #0]
 8010bc8:	079a      	lsls	r2, r3, #30
 8010bca:	d506      	bpl.n	8010bda <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010bcc:	20f0      	movs	r0, #240	; 0xf0
 8010bce:	497a      	ldr	r1, [pc, #488]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
 8010bd0:	684a      	ldr	r2, [r1, #4]
 8010bd2:	4382      	bics	r2, r0
 8010bd4:	68a8      	ldr	r0, [r5, #8]
 8010bd6:	4302      	orrs	r2, r0
 8010bd8:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010bda:	07db      	lsls	r3, r3, #31
 8010bdc:	d52a      	bpl.n	8010c34 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010bde:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010be0:	4a75      	ldr	r2, [pc, #468]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d073      	beq.n	8010cce <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d075      	beq.n	8010cd6 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010bea:	2b03      	cmp	r3, #3
 8010bec:	d100      	bne.n	8010bf0 <HAL_RCC_ClockConfig+0x5c>
 8010bee:	e09c      	b.n	8010d2a <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010bf0:	6812      	ldr	r2, [r2, #0]
 8010bf2:	0792      	lsls	r2, r2, #30
 8010bf4:	d5e2      	bpl.n	8010bbc <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010bf6:	2103      	movs	r1, #3
 8010bf8:	4e6f      	ldr	r6, [pc, #444]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
 8010bfa:	6872      	ldr	r2, [r6, #4]
 8010bfc:	438a      	bics	r2, r1
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8010c02:	f7fe f8bd 	bl	800ed80 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010c06:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010c08:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d07d      	beq.n	8010d0a <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d100      	bne.n	8010c14 <HAL_RCC_ClockConfig+0x80>
 8010c12:	e093      	b.n	8010d3c <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010c14:	2b03      	cmp	r3, #3
 8010c16:	d066      	beq.n	8010ce6 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010c18:	230c      	movs	r3, #12
 8010c1a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c1c:	4b67      	ldr	r3, [pc, #412]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010c1e:	4699      	mov	r9, r3
 8010c20:	e004      	b.n	8010c2c <HAL_RCC_ClockConfig+0x98>
 8010c22:	f7fe f8ad 	bl	800ed80 <HAL_GetTick>
 8010c26:	1bc0      	subs	r0, r0, r7
 8010c28:	4548      	cmp	r0, r9
 8010c2a:	d86c      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010c2c:	4642      	mov	r2, r8
 8010c2e:	6873      	ldr	r3, [r6, #4]
 8010c30:	421a      	tst	r2, r3
 8010c32:	d1f6      	bne.n	8010c22 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c34:	2201      	movs	r2, #1
 8010c36:	495f      	ldr	r1, [pc, #380]	; (8010db4 <HAL_RCC_ClockConfig+0x220>)
 8010c38:	680b      	ldr	r3, [r1, #0]
 8010c3a:	4393      	bics	r3, r2
 8010c3c:	4323      	orrs	r3, r4
 8010c3e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010c40:	680b      	ldr	r3, [r1, #0]
 8010c42:	401a      	ands	r2, r3
 8010c44:	42a2      	cmp	r2, r4
 8010c46:	d1b9      	bne.n	8010bbc <HAL_RCC_ClockConfig+0x28>
 8010c48:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010c4a:	075b      	lsls	r3, r3, #29
 8010c4c:	d506      	bpl.n	8010c5c <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010c4e:	4a5a      	ldr	r2, [pc, #360]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
 8010c50:	495b      	ldr	r1, [pc, #364]	; (8010dc0 <HAL_RCC_ClockConfig+0x22c>)
 8010c52:	6853      	ldr	r3, [r2, #4]
 8010c54:	400b      	ands	r3, r1
 8010c56:	68e9      	ldr	r1, [r5, #12]
 8010c58:	430b      	orrs	r3, r1
 8010c5a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	f7fe f865 	bl	800ed2c <HAL_InitTick>
  return HAL_OK;
 8010c62:	2000      	movs	r0, #0
 8010c64:	e7ab      	b.n	8010bbe <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010c66:	6803      	ldr	r3, [r0, #0]
 8010c68:	079a      	lsls	r2, r3, #30
 8010c6a:	d506      	bpl.n	8010c7a <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010c6c:	20f0      	movs	r0, #240	; 0xf0
 8010c6e:	4952      	ldr	r1, [pc, #328]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
 8010c70:	684a      	ldr	r2, [r1, #4]
 8010c72:	4382      	bics	r2, r0
 8010c74:	68a8      	ldr	r0, [r5, #8]
 8010c76:	4302      	orrs	r2, r0
 8010c78:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010c7a:	07da      	lsls	r2, r3, #31
 8010c7c:	d5e5      	bpl.n	8010c4a <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010c7e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010c80:	4a4d      	ldr	r2, [pc, #308]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d056      	beq.n	8010d34 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010c86:	2b02      	cmp	r3, #2
 8010c88:	d029      	beq.n	8010cde <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010c8a:	2b03      	cmp	r3, #3
 8010c8c:	d073      	beq.n	8010d76 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c8e:	6812      	ldr	r2, [r2, #0]
 8010c90:	0792      	lsls	r2, r2, #30
 8010c92:	d593      	bpl.n	8010bbc <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010c94:	2103      	movs	r1, #3
 8010c96:	4c48      	ldr	r4, [pc, #288]	; (8010db8 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c98:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010c9a:	6862      	ldr	r2, [r4, #4]
 8010c9c:	438a      	bics	r2, r1
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8010ca2:	f7fe f86d 	bl	800ed80 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ca6:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010ca8:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d056      	beq.n	8010d5c <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d065      	beq.n	8010d7e <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d070      	beq.n	8010d98 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010cb6:	4b41      	ldr	r3, [pc, #260]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010cb8:	4698      	mov	r8, r3
 8010cba:	e004      	b.n	8010cc6 <HAL_RCC_ClockConfig+0x132>
 8010cbc:	f7fe f860 	bl	800ed80 <HAL_GetTick>
 8010cc0:	1b80      	subs	r0, r0, r6
 8010cc2:	4540      	cmp	r0, r8
 8010cc4:	d81f      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010cc6:	6863      	ldr	r3, [r4, #4]
 8010cc8:	421f      	tst	r7, r3
 8010cca:	d1f7      	bne.n	8010cbc <HAL_RCC_ClockConfig+0x128>
 8010ccc:	e7bc      	b.n	8010c48 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010cce:	6812      	ldr	r2, [r2, #0]
 8010cd0:	0392      	lsls	r2, r2, #14
 8010cd2:	d490      	bmi.n	8010bf6 <HAL_RCC_ClockConfig+0x62>
 8010cd4:	e772      	b.n	8010bbc <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010cd6:	6812      	ldr	r2, [r2, #0]
 8010cd8:	0192      	lsls	r2, r2, #6
 8010cda:	d48c      	bmi.n	8010bf6 <HAL_RCC_ClockConfig+0x62>
 8010cdc:	e76e      	b.n	8010bbc <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010cde:	6812      	ldr	r2, [r2, #0]
 8010ce0:	0192      	lsls	r2, r2, #6
 8010ce2:	d4d7      	bmi.n	8010c94 <HAL_RCC_ClockConfig+0x100>
 8010ce4:	e76a      	b.n	8010bbc <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010ce6:	3309      	adds	r3, #9
 8010ce8:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010cea:	4b34      	ldr	r3, [pc, #208]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010cec:	4699      	mov	r9, r3
 8010cee:	e004      	b.n	8010cfa <HAL_RCC_ClockConfig+0x166>
 8010cf0:	f7fe f846 	bl	800ed80 <HAL_GetTick>
 8010cf4:	1bc0      	subs	r0, r0, r7
 8010cf6:	4548      	cmp	r0, r9
 8010cf8:	d805      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010cfa:	4642      	mov	r2, r8
 8010cfc:	6873      	ldr	r3, [r6, #4]
 8010cfe:	4013      	ands	r3, r2
 8010d00:	2b0c      	cmp	r3, #12
 8010d02:	d1f5      	bne.n	8010cf0 <HAL_RCC_ClockConfig+0x15c>
 8010d04:	e796      	b.n	8010c34 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8010d06:	2003      	movs	r0, #3
 8010d08:	e759      	b.n	8010bbe <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010d0a:	330b      	adds	r3, #11
 8010d0c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d0e:	4b2b      	ldr	r3, [pc, #172]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010d10:	4699      	mov	r9, r3
 8010d12:	e004      	b.n	8010d1e <HAL_RCC_ClockConfig+0x18a>
 8010d14:	f7fe f834 	bl	800ed80 <HAL_GetTick>
 8010d18:	1bc0      	subs	r0, r0, r7
 8010d1a:	4548      	cmp	r0, r9
 8010d1c:	d8f3      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010d1e:	4642      	mov	r2, r8
 8010d20:	6873      	ldr	r3, [r6, #4]
 8010d22:	4013      	ands	r3, r2
 8010d24:	2b04      	cmp	r3, #4
 8010d26:	d1f5      	bne.n	8010d14 <HAL_RCC_ClockConfig+0x180>
 8010d28:	e784      	b.n	8010c34 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010d2c:	03d2      	lsls	r2, r2, #15
 8010d2e:	d500      	bpl.n	8010d32 <HAL_RCC_ClockConfig+0x19e>
 8010d30:	e761      	b.n	8010bf6 <HAL_RCC_ClockConfig+0x62>
 8010d32:	e743      	b.n	8010bbc <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d34:	6812      	ldr	r2, [r2, #0]
 8010d36:	0392      	lsls	r2, r2, #14
 8010d38:	d4ac      	bmi.n	8010c94 <HAL_RCC_ClockConfig+0x100>
 8010d3a:	e73f      	b.n	8010bbc <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010d3c:	330a      	adds	r3, #10
 8010d3e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d40:	4b1e      	ldr	r3, [pc, #120]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010d42:	4699      	mov	r9, r3
 8010d44:	e004      	b.n	8010d50 <HAL_RCC_ClockConfig+0x1bc>
 8010d46:	f7fe f81b 	bl	800ed80 <HAL_GetTick>
 8010d4a:	1bc0      	subs	r0, r0, r7
 8010d4c:	4548      	cmp	r0, r9
 8010d4e:	d8da      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010d50:	4642      	mov	r2, r8
 8010d52:	6873      	ldr	r3, [r6, #4]
 8010d54:	4013      	ands	r3, r2
 8010d56:	2b08      	cmp	r3, #8
 8010d58:	d1f5      	bne.n	8010d46 <HAL_RCC_ClockConfig+0x1b2>
 8010d5a:	e76b      	b.n	8010c34 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d5c:	4b17      	ldr	r3, [pc, #92]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010d5e:	4698      	mov	r8, r3
 8010d60:	e004      	b.n	8010d6c <HAL_RCC_ClockConfig+0x1d8>
 8010d62:	f7fe f80d 	bl	800ed80 <HAL_GetTick>
 8010d66:	1b80      	subs	r0, r0, r6
 8010d68:	4540      	cmp	r0, r8
 8010d6a:	d8cc      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010d6c:	6863      	ldr	r3, [r4, #4]
 8010d6e:	403b      	ands	r3, r7
 8010d70:	2b04      	cmp	r3, #4
 8010d72:	d1f6      	bne.n	8010d62 <HAL_RCC_ClockConfig+0x1ce>
 8010d74:	e768      	b.n	8010c48 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010d78:	03d2      	lsls	r2, r2, #15
 8010d7a:	d48b      	bmi.n	8010c94 <HAL_RCC_ClockConfig+0x100>
 8010d7c:	e71e      	b.n	8010bbc <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d7e:	4b0f      	ldr	r3, [pc, #60]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010d80:	4698      	mov	r8, r3
 8010d82:	e004      	b.n	8010d8e <HAL_RCC_ClockConfig+0x1fa>
 8010d84:	f7fd fffc 	bl	800ed80 <HAL_GetTick>
 8010d88:	1b80      	subs	r0, r0, r6
 8010d8a:	4540      	cmp	r0, r8
 8010d8c:	d8bb      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010d8e:	6863      	ldr	r3, [r4, #4]
 8010d90:	403b      	ands	r3, r7
 8010d92:	2b08      	cmp	r3, #8
 8010d94:	d1f6      	bne.n	8010d84 <HAL_RCC_ClockConfig+0x1f0>
 8010d96:	e757      	b.n	8010c48 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d98:	4b08      	ldr	r3, [pc, #32]	; (8010dbc <HAL_RCC_ClockConfig+0x228>)
 8010d9a:	4698      	mov	r8, r3
 8010d9c:	e004      	b.n	8010da8 <HAL_RCC_ClockConfig+0x214>
 8010d9e:	f7fd ffef 	bl	800ed80 <HAL_GetTick>
 8010da2:	1b80      	subs	r0, r0, r6
 8010da4:	4540      	cmp	r0, r8
 8010da6:	d8ae      	bhi.n	8010d06 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010da8:	6863      	ldr	r3, [r4, #4]
 8010daa:	403b      	ands	r3, r7
 8010dac:	2b0c      	cmp	r3, #12
 8010dae:	d1f6      	bne.n	8010d9e <HAL_RCC_ClockConfig+0x20a>
 8010db0:	e74a      	b.n	8010c48 <HAL_RCC_ClockConfig+0xb4>
 8010db2:	46c0      	nop			; (mov r8, r8)
 8010db4:	40022000 	.word	0x40022000
 8010db8:	40021000 	.word	0x40021000
 8010dbc:	00001388 	.word	0x00001388
 8010dc0:	fffff8ff 	.word	0xfffff8ff

08010dc4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010dc4:	b570      	push	{r4, r5, r6, lr}
 8010dc6:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010dc8:	4669      	mov	r1, sp
 8010dca:	4b1c      	ldr	r3, [pc, #112]	; (8010e3c <HAL_RCC_GetSysClockFreq+0x78>)
 8010dcc:	000a      	movs	r2, r1
 8010dce:	0018      	movs	r0, r3
 8010dd0:	c870      	ldmia	r0!, {r4, r5, r6}
 8010dd2:	c270      	stmia	r2!, {r4, r5, r6}
 8010dd4:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010dd6:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010dd8:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010dda:	aa04      	add	r2, sp, #16
 8010ddc:	0010      	movs	r0, r2
 8010dde:	cb70      	ldmia	r3!, {r4, r5, r6}
 8010de0:	c070      	stmia	r0!, {r4, r5, r6}
 8010de2:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010de4:	4d16      	ldr	r5, [pc, #88]	; (8010e40 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010de6:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010de8:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8010dea:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8010dec:	4018      	ands	r0, r3
 8010dee:	2808      	cmp	r0, #8
 8010df0:	d00a      	beq.n	8010e08 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010df2:	380c      	subs	r0, #12
 8010df4:	4243      	negs	r3, r0
 8010df6:	4158      	adcs	r0, r3
 8010df8:	4b12      	ldr	r3, [pc, #72]	; (8010e44 <HAL_RCC_GetSysClockFreq+0x80>)
 8010dfa:	4240      	negs	r0, r0
 8010dfc:	4018      	ands	r0, r3
 8010dfe:	4b12      	ldr	r3, [pc, #72]	; (8010e48 <HAL_RCC_GetSysClockFreq+0x84>)
 8010e00:	469c      	mov	ip, r3
 8010e02:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010e04:	b008      	add	sp, #32
 8010e06:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010e08:	200f      	movs	r0, #15
 8010e0a:	0c9c      	lsrs	r4, r3, #18
 8010e0c:	4004      	ands	r4, r0
 8010e0e:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010e10:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8010e12:	4008      	ands	r0, r1
 8010e14:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010e16:	22c0      	movs	r2, #192	; 0xc0
 8010e18:	2080      	movs	r0, #128	; 0x80
 8010e1a:	0252      	lsls	r2, r2, #9
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	0240      	lsls	r0, r0, #9
 8010e20:	4283      	cmp	r3, r0
 8010e22:	d001      	beq.n	8010e28 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d004      	beq.n	8010e32 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010e28:	4807      	ldr	r0, [pc, #28]	; (8010e48 <HAL_RCC_GetSysClockFreq+0x84>)
 8010e2a:	f7ef f991 	bl	8000150 <__udivsi3>
 8010e2e:	4360      	muls	r0, r4
 8010e30:	e7e8      	b.n	8010e04 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8010e32:	4806      	ldr	r0, [pc, #24]	; (8010e4c <HAL_RCC_GetSysClockFreq+0x88>)
 8010e34:	f7ef f98c 	bl	8000150 <__udivsi3>
 8010e38:	4360      	muls	r0, r4
 8010e3a:	e7e3      	b.n	8010e04 <HAL_RCC_GetSysClockFreq+0x40>
 8010e3c:	08017350 	.word	0x08017350
 8010e40:	40021000 	.word	0x40021000
 8010e44:	02625a00 	.word	0x02625a00
 8010e48:	007a1200 	.word	0x007a1200
 8010e4c:	02dc6c00 	.word	0x02dc6c00

08010e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010e50:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010e52:	f7ff ffb7 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 8010e56:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <HAL_RCC_GetHCLKFreq+0x1c>)
 8010e58:	4a05      	ldr	r2, [pc, #20]	; (8010e70 <HAL_RCC_GetHCLKFreq+0x20>)
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	3220      	adds	r2, #32
 8010e5e:	061b      	lsls	r3, r3, #24
 8010e60:	0f1b      	lsrs	r3, r3, #28
 8010e62:	5cd3      	ldrb	r3, [r2, r3]
 8010e64:	40d8      	lsrs	r0, r3
 8010e66:	4b03      	ldr	r3, [pc, #12]	; (8010e74 <HAL_RCC_GetHCLKFreq+0x24>)
 8010e68:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010e6a:	bd10      	pop	{r4, pc}
 8010e6c:	40021000 	.word	0x40021000
 8010e70:	08017350 	.word	0x08017350
 8010e74:	200000b4 	.word	0x200000b4

08010e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010e78:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010e7a:	f7ff ffa3 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 8010e7e:	4908      	ldr	r1, [pc, #32]	; (8010ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010e80:	4a08      	ldr	r2, [pc, #32]	; (8010ea4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8010e82:	684b      	ldr	r3, [r1, #4]
 8010e84:	3220      	adds	r2, #32
 8010e86:	061b      	lsls	r3, r3, #24
 8010e88:	0f1b      	lsrs	r3, r3, #28
 8010e8a:	5cd3      	ldrb	r3, [r2, r3]
 8010e8c:	40d8      	lsrs	r0, r3
 8010e8e:	4b06      	ldr	r3, [pc, #24]	; (8010ea8 <HAL_RCC_GetPCLK1Freq+0x30>)
 8010e90:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8010e92:	684b      	ldr	r3, [r1, #4]
 8010e94:	055b      	lsls	r3, r3, #21
 8010e96:	0f5b      	lsrs	r3, r3, #29
 8010e98:	5cd3      	ldrb	r3, [r2, r3]
 8010e9a:	40d8      	lsrs	r0, r3
}    
 8010e9c:	bd10      	pop	{r4, pc}
 8010e9e:	46c0      	nop			; (mov r8, r8)
 8010ea0:	40021000 	.word	0x40021000
 8010ea4:	08017350 	.word	0x08017350
 8010ea8:	200000b4 	.word	0x200000b4

08010eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eae:	46c6      	mov	lr, r8
 8010eb0:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010eb2:	6803      	ldr	r3, [r0, #0]
{
 8010eb4:	b082      	sub	sp, #8
 8010eb6:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010eb8:	03da      	lsls	r2, r3, #15
 8010eba:	d507      	bpl.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010ebc:	493e      	ldr	r1, [pc, #248]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010ebe:	6840      	ldr	r0, [r0, #4]
 8010ec0:	6a0a      	ldr	r2, [r1, #32]
 8010ec2:	4042      	eors	r2, r0
 8010ec4:	20c0      	movs	r0, #192	; 0xc0
 8010ec6:	0080      	lsls	r0, r0, #2
 8010ec8:	4202      	tst	r2, r0
 8010eca:	d131      	bne.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010ecc:	07da      	lsls	r2, r3, #31
 8010ece:	d506      	bpl.n	8010ede <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010ed0:	2003      	movs	r0, #3
 8010ed2:	4939      	ldr	r1, [pc, #228]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010ed4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010ed6:	4382      	bics	r2, r0
 8010ed8:	68a0      	ldr	r0, [r4, #8]
 8010eda:	4302      	orrs	r2, r0
 8010edc:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010ede:	079a      	lsls	r2, r3, #30
 8010ee0:	d506      	bpl.n	8010ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010ee2:	4935      	ldr	r1, [pc, #212]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010ee4:	4835      	ldr	r0, [pc, #212]	; (8010fbc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8010ee6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010ee8:	4002      	ands	r2, r0
 8010eea:	68e0      	ldr	r0, [r4, #12]
 8010eec:	4302      	orrs	r2, r0
 8010eee:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010ef0:	035a      	lsls	r2, r3, #13
 8010ef2:	d506      	bpl.n	8010f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010ef4:	4930      	ldr	r1, [pc, #192]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010ef6:	4832      	ldr	r0, [pc, #200]	; (8010fc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8010ef8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010efa:	4002      	ands	r2, r0
 8010efc:	6920      	ldr	r0, [r4, #16]
 8010efe:	4302      	orrs	r2, r0
 8010f00:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010f02:	069a      	lsls	r2, r3, #26
 8010f04:	d506      	bpl.n	8010f14 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010f06:	2010      	movs	r0, #16
 8010f08:	492b      	ldr	r1, [pc, #172]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010f0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010f0c:	4382      	bics	r2, r0
 8010f0e:	6960      	ldr	r0, [r4, #20]
 8010f10:	4302      	orrs	r2, r0
 8010f12:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8010f14:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010f16:	055b      	lsls	r3, r3, #21
 8010f18:	d506      	bpl.n	8010f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010f1a:	2140      	movs	r1, #64	; 0x40
 8010f1c:	4a26      	ldr	r2, [pc, #152]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010f20:	438b      	bics	r3, r1
 8010f22:	69a1      	ldr	r1, [r4, #24]
 8010f24:	430b      	orrs	r3, r1
 8010f26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8010f28:	b002      	add	sp, #8
 8010f2a:	bc04      	pop	{r2}
 8010f2c:	4690      	mov	r8, r2
 8010f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f30:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010f32:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f34:	69ca      	ldr	r2, [r1, #28]
 8010f36:	0540      	lsls	r0, r0, #21
 8010f38:	4302      	orrs	r2, r0
 8010f3a:	61ca      	str	r2, [r1, #28]
 8010f3c:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010f3e:	4d21      	ldr	r5, [pc, #132]	; (8010fc4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f40:	4003      	ands	r3, r0
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010f46:	682b      	ldr	r3, [r5, #0]
 8010f48:	0076      	lsls	r6, r6, #1
 8010f4a:	4333      	orrs	r3, r6
 8010f4c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010f4e:	f7fd ff17 	bl	800ed80 <HAL_GetTick>
 8010f52:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010f54:	e004      	b.n	8010f60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f56:	f7fd ff13 	bl	800ed80 <HAL_GetTick>
 8010f5a:	1bc0      	subs	r0, r0, r7
 8010f5c:	2864      	cmp	r0, #100	; 0x64
 8010f5e:	d829      	bhi.n	8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010f60:	682b      	ldr	r3, [r5, #0]
 8010f62:	4233      	tst	r3, r6
 8010f64:	d0f7      	beq.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8010f66:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010f68:	4d13      	ldr	r5, [pc, #76]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8010f6a:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010f6c:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8010f6e:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010f70:	4b15      	ldr	r3, [pc, #84]	; (8010fc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8010f72:	4302      	orrs	r2, r0
 8010f74:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010f76:	6a2a      	ldr	r2, [r5, #32]
 8010f78:	4814      	ldr	r0, [pc, #80]	; (8010fcc <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010f7a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010f7c:	4002      	ands	r2, r0
 8010f7e:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8010f80:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8010f82:	078b      	lsls	r3, r1, #30
 8010f84:	d408      	bmi.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8010f86:	4a0c      	ldr	r2, [pc, #48]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010f88:	490f      	ldr	r1, [pc, #60]	; (8010fc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8010f8a:	6a13      	ldr	r3, [r2, #32]
 8010f8c:	400b      	ands	r3, r1
 8010f8e:	6861      	ldr	r1, [r4, #4]
 8010f90:	430b      	orrs	r3, r1
 8010f92:	6213      	str	r3, [r2, #32]
 8010f94:	6823      	ldr	r3, [r4, #0]
 8010f96:	e799      	b.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8010f98:	f7fd fef2 	bl	800ed80 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010f9c:	4b0c      	ldr	r3, [pc, #48]	; (8010fd0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8010f9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010fa0:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fa2:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010fa4:	6a2b      	ldr	r3, [r5, #32]
 8010fa6:	421e      	tst	r6, r3
 8010fa8:	d1ed      	bne.n	8010f86 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010faa:	f7fd fee9 	bl	800ed80 <HAL_GetTick>
 8010fae:	1bc0      	subs	r0, r0, r7
 8010fb0:	4540      	cmp	r0, r8
 8010fb2:	d9f7      	bls.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8010fb4:	2003      	movs	r0, #3
 8010fb6:	e7b7      	b.n	8010f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010fb8:	40021000 	.word	0x40021000
 8010fbc:	fffcffff 	.word	0xfffcffff
 8010fc0:	fff3ffff 	.word	0xfff3ffff
 8010fc4:	40007000 	.word	0x40007000
 8010fc8:	fffffcff 	.word	0xfffffcff
 8010fcc:	fffeffff 	.word	0xfffeffff
 8010fd0:	00001388 	.word	0x00001388

08010fd4 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8010fd4:	4770      	bx	lr
 8010fd6:	46c0      	nop			; (mov r8, r8)

08010fd8 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010fd8:	6803      	ldr	r3, [r0, #0]
{
 8010fda:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010fdc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010fde:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010fe0:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010fe2:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8010fe4:	681c      	ldr	r4, [r3, #0]
 8010fe6:	4b13      	ldr	r3, [pc, #76]	; (8011034 <HAL_RTC_GetTime+0x5c>)
 8010fe8:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010fea:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010fec:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010fee:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010ff0:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010ff2:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ff4:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ff6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010ff8:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010ffa:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ffc:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010ffe:	2a00      	cmp	r2, #0
 8011000:	d115      	bne.n	801102e <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011002:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011004:	0900      	lsrs	r0, r0, #4
 8011006:	0082      	lsls	r2, r0, #2
 8011008:	1810      	adds	r0, r2, r0
 801100a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801100c:	4035      	ands	r5, r6
 801100e:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011010:	0918      	lsrs	r0, r3, #4
 8011012:	0082      	lsls	r2, r0, #2
 8011014:	1812      	adds	r2, r2, r0
 8011016:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011018:	4033      	ands	r3, r6
 801101a:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801101c:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801101e:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011020:	0093      	lsls	r3, r2, #2
 8011022:	189b      	adds	r3, r3, r2
 8011024:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011026:	4034      	ands	r4, r6
 8011028:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801102a:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 801102c:	708c      	strb	r4, [r1, #2]
}
 801102e:	2000      	movs	r0, #0
 8011030:	bd70      	pop	{r4, r5, r6, pc}
 8011032:	46c0      	nop			; (mov r8, r8)
 8011034:	007f7f7f 	.word	0x007f7f7f

08011038 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011038:	6803      	ldr	r3, [r0, #0]
 801103a:	4815      	ldr	r0, [pc, #84]	; (8011090 <HAL_RTC_GetDate+0x58>)
 801103c:	685b      	ldr	r3, [r3, #4]
{
 801103e:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011040:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011042:	201f      	movs	r0, #31
 8011044:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011046:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011048:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801104a:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801104c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801104e:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011050:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011052:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011054:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011056:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011058:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 801105a:	2a00      	cmp	r2, #0
 801105c:	d115      	bne.n	801108a <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 801105e:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011060:	093b      	lsrs	r3, r7, #4
 8011062:	009a      	lsls	r2, r3, #2
 8011064:	18d2      	adds	r2, r2, r3
 8011066:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011068:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801106a:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 801106c:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801106e:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011070:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011072:	092a      	lsrs	r2, r5, #4
 8011074:	18c0      	adds	r0, r0, r3
 8011076:	0093      	lsls	r3, r2, #2
 8011078:	189b      	adds	r3, r3, r2
 801107a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801107c:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801107e:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011080:	4035      	ands	r5, r6
 8011082:	1904      	adds	r4, r0, r4
 8011084:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011086:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011088:	708b      	strb	r3, [r1, #2]
}
 801108a:	2000      	movs	r0, #0
 801108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801108e:	46c0      	nop			; (mov r8, r8)
 8011090:	00ffff3f 	.word	0x00ffff3f

08011094 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011094:	21a0      	movs	r1, #160	; 0xa0
 8011096:	6802      	ldr	r2, [r0, #0]
{
 8011098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801109a:	68d3      	ldr	r3, [r2, #12]
{
 801109c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801109e:	438b      	bics	r3, r1
 80110a0:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 80110a2:	f7fd fe6d 	bl	800ed80 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80110a6:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 80110a8:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80110aa:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80110ac:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80110ae:	e004      	b.n	80110ba <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80110b0:	f7fd fe66 	bl	800ed80 <HAL_GetTick>
 80110b4:	1bc0      	subs	r0, r0, r7
 80110b6:	42b0      	cmp	r0, r6
 80110b8:	d805      	bhi.n	80110c6 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	421d      	tst	r5, r3
 80110c0:	d0f6      	beq.n	80110b0 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 80110c2:	2000      	movs	r0, #0
}
 80110c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 80110c6:	2003      	movs	r0, #3
 80110c8:	e7fc      	b.n	80110c4 <HAL_RTC_WaitForSynchro+0x30>
 80110ca:	46c0      	nop			; (mov r8, r8)

080110cc <RTC_EnterInitMode>:
{
 80110cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80110ce:	6803      	ldr	r3, [r0, #0]
{
 80110d0:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80110d2:	68da      	ldr	r2, [r3, #12]
 80110d4:	0652      	lsls	r2, r2, #25
 80110d6:	d501      	bpl.n	80110dc <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 80110d8:	2000      	movs	r0, #0
}
 80110da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80110dc:	2201      	movs	r2, #1
 80110de:	4252      	negs	r2, r2
 80110e0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80110e2:	f7fd fe4d 	bl	800ed80 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80110e6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80110e8:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80110ea:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80110ec:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80110ee:	e004      	b.n	80110fa <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80110f0:	f7fd fe46 	bl	800ed80 <HAL_GetTick>
 80110f4:	1bc0      	subs	r0, r0, r7
 80110f6:	42b0      	cmp	r0, r6
 80110f8:	d804      	bhi.n	8011104 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80110fa:	6823      	ldr	r3, [r4, #0]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	421d      	tst	r5, r3
 8011100:	d0f6      	beq.n	80110f0 <RTC_EnterInitMode+0x24>
 8011102:	e7e9      	b.n	80110d8 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011104:	2003      	movs	r0, #3
 8011106:	e7e8      	b.n	80110da <RTC_EnterInitMode+0xe>

08011108 <HAL_RTC_Init>:
{
 8011108:	b570      	push	{r4, r5, r6, lr}
 801110a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801110c:	d03e      	beq.n	801118c <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801110e:	7f43      	ldrb	r3, [r0, #29]
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d036      	beq.n	8011184 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011116:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011118:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801111a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801111c:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801111e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011120:	625a      	str	r2, [r3, #36]	; 0x24
 8011122:	3a77      	subs	r2, #119	; 0x77
 8011124:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011126:	f7ff ffd1 	bl	80110cc <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801112a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801112c:	2800      	cmp	r0, #0
 801112e:	d123      	bne.n	8011178 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011130:	689a      	ldr	r2, [r3, #8]
 8011132:	4917      	ldr	r1, [pc, #92]	; (8011190 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011134:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011136:	400a      	ands	r2, r1
 8011138:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801113a:	6862      	ldr	r2, [r4, #4]
 801113c:	6899      	ldr	r1, [r3, #8]
 801113e:	432a      	orrs	r2, r5
 8011140:	6965      	ldr	r5, [r4, #20]
 8011142:	432a      	orrs	r2, r5
 8011144:	430a      	orrs	r2, r1
 8011146:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011148:	68e2      	ldr	r2, [r4, #12]
 801114a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801114c:	68a2      	ldr	r2, [r4, #8]
 801114e:	6919      	ldr	r1, [r3, #16]
 8011150:	0412      	lsls	r2, r2, #16
 8011152:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011154:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011156:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	438a      	bics	r2, r1
 801115c:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801115e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011160:	490c      	ldr	r1, [pc, #48]	; (8011194 <HAL_RTC_Init+0x8c>)
 8011162:	400a      	ands	r2, r1
 8011164:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011168:	69a1      	ldr	r1, [r4, #24]
 801116a:	430a      	orrs	r2, r1
 801116c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801116e:	22ff      	movs	r2, #255	; 0xff
 8011170:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011172:	2301      	movs	r3, #1
 8011174:	7763      	strb	r3, [r4, #29]
}
 8011176:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011178:	22ff      	movs	r2, #255	; 0xff
 801117a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801117c:	2304      	movs	r3, #4
    return HAL_ERROR;
 801117e:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011180:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011182:	e7f8      	b.n	8011176 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011184:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011186:	f7ff ff25 	bl	8010fd4 <HAL_RTC_MspInit>
 801118a:	e7c4      	b.n	8011116 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 801118c:	2001      	movs	r0, #1
 801118e:	e7f2      	b.n	8011176 <HAL_RTC_Init+0x6e>
 8011190:	ff8fffbf 	.word	0xff8fffbf
 8011194:	fffbffff 	.word	0xfffbffff

08011198 <HAL_RTC_SetTime>:
{
 8011198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801119a:	7f03      	ldrb	r3, [r0, #28]
{
 801119c:	0004      	movs	r4, r0
 801119e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d100      	bne.n	80111a6 <HAL_RTC_SetTime+0xe>
 80111a4:	e074      	b.n	8011290 <HAL_RTC_SetTime+0xf8>
 80111a6:	2301      	movs	r3, #1
 80111a8:	6806      	ldr	r6, [r0, #0]
 80111aa:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80111ac:	3301      	adds	r3, #1
 80111ae:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80111b0:	68b3      	ldr	r3, [r6, #8]
 80111b2:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 80111b4:	2a00      	cmp	r2, #0
 80111b6:	d031      	beq.n	801121c <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80111b8:	403b      	ands	r3, r7
 80111ba:	d065      	beq.n	8011288 <HAL_RTC_SetTime+0xf0>
 80111bc:	7a0b      	ldrb	r3, [r1, #8]
 80111be:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80111c0:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80111c2:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80111c4:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80111c6:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80111c8:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 80111ca:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80111cc:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80111ce:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111d0:	23ca      	movs	r3, #202	; 0xca
 80111d2:	6273      	str	r3, [r6, #36]	; 0x24
 80111d4:	3b77      	subs	r3, #119	; 0x77
 80111d6:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111d8:	0020      	movs	r0, r4
 80111da:	f7ff ff77 	bl	80110cc <RTC_EnterInitMode>
 80111de:	1e06      	subs	r6, r0, #0
 80111e0:	d149      	bne.n	8011276 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80111e2:	4935      	ldr	r1, [pc, #212]	; (80112b8 <HAL_RTC_SetTime+0x120>)
 80111e4:	6822      	ldr	r2, [r4, #0]
 80111e6:	4039      	ands	r1, r7
 80111e8:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80111ea:	6893      	ldr	r3, [r2, #8]
 80111ec:	4933      	ldr	r1, [pc, #204]	; (80112bc <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80111ee:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80111f0:	400b      	ands	r3, r1
 80111f2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80111f4:	68eb      	ldr	r3, [r5, #12]
 80111f6:	6891      	ldr	r1, [r2, #8]
 80111f8:	4303      	orrs	r3, r0
 80111fa:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111fc:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80111fe:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011200:	68d3      	ldr	r3, [r2, #12]
 8011202:	438b      	bics	r3, r1
 8011204:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011206:	6893      	ldr	r3, [r2, #8]
 8011208:	069b      	lsls	r3, r3, #26
 801120a:	d543      	bpl.n	8011294 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801120c:	23ff      	movs	r3, #255	; 0xff
 801120e:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011210:	3bfe      	subs	r3, #254	; 0xfe
 8011212:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011214:	2300      	movs	r3, #0
 8011216:	7723      	strb	r3, [r4, #28]
}
 8011218:	0030      	movs	r0, r6
 801121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801121c:	401f      	ands	r7, r3
 801121e:	d035      	beq.n	801128c <HAL_RTC_SetTime+0xf4>
 8011220:	7a0f      	ldrb	r7, [r1, #8]
 8011222:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011224:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8011226:	2300      	movs	r3, #0
  while(Value >= 10)
 8011228:	2809      	cmp	r0, #9
 801122a:	d906      	bls.n	801123a <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 801122c:	380a      	subs	r0, #10
 801122e:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011230:	3301      	adds	r3, #1
  while(Value >= 10)
 8011232:	2809      	cmp	r0, #9
 8011234:	d8fa      	bhi.n	801122c <HAL_RTC_SetTime+0x94>
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801123a:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801123c:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801123e:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011240:	2100      	movs	r1, #0
  while(Value >= 10)
 8011242:	2b09      	cmp	r3, #9
 8011244:	d906      	bls.n	8011254 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011246:	3b0a      	subs	r3, #10
 8011248:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801124a:	3101      	adds	r1, #1
  while(Value >= 10)
 801124c:	2b09      	cmp	r3, #9
 801124e:	d8fa      	bhi.n	8011246 <HAL_RTC_SetTime+0xae>
 8011250:	0109      	lsls	r1, r1, #4
 8011252:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011254:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011256:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011258:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 801125a:	2909      	cmp	r1, #9
 801125c:	d929      	bls.n	80112b2 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 801125e:	390a      	subs	r1, #10
 8011260:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011262:	3201      	adds	r2, #1
  while(Value >= 10)
 8011264:	2909      	cmp	r1, #9
 8011266:	d8fa      	bhi.n	801125e <HAL_RTC_SetTime+0xc6>
 8011268:	0112      	lsls	r2, r2, #4
 801126a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801126c:	4307      	orrs	r7, r0
 801126e:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011270:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011272:	430f      	orrs	r7, r1
 8011274:	e7ac      	b.n	80111d0 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011276:	22ff      	movs	r2, #255	; 0xff
 8011278:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 801127a:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801127c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801127e:	2304      	movs	r3, #4
 8011280:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011282:	2300      	movs	r3, #0
 8011284:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011286:	e7c7      	b.n	8011218 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011288:	720b      	strb	r3, [r1, #8]
 801128a:	e799      	b.n	80111c0 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 801128c:	720f      	strb	r7, [r1, #8]
 801128e:	e7c9      	b.n	8011224 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011290:	2602      	movs	r6, #2
 8011292:	e7c1      	b.n	8011218 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011294:	0020      	movs	r0, r4
 8011296:	f7ff fefd 	bl	8011094 <HAL_RTC_WaitForSynchro>
 801129a:	2800      	cmp	r0, #0
 801129c:	d101      	bne.n	80112a2 <HAL_RTC_SetTime+0x10a>
 801129e:	6822      	ldr	r2, [r4, #0]
 80112a0:	e7b4      	b.n	801120c <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80112a2:	22ff      	movs	r2, #255	; 0xff
 80112a4:	6823      	ldr	r3, [r4, #0]
 80112a6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80112a8:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80112aa:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80112ac:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80112ae:	2601      	movs	r6, #1
 80112b0:	e7b2      	b.n	8011218 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 80112b2:	2200      	movs	r2, #0
 80112b4:	e7da      	b.n	801126c <HAL_RTC_SetTime+0xd4>
 80112b6:	46c0      	nop			; (mov r8, r8)
 80112b8:	007f7f7f 	.word	0x007f7f7f
 80112bc:	fffbffff 	.word	0xfffbffff

080112c0 <HAL_RTC_SetDate>:
{
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80112c2:	7f03      	ldrb	r3, [r0, #28]
{
 80112c4:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d062      	beq.n	8011390 <HAL_RTC_SetDate+0xd0>
 80112ca:	2301      	movs	r3, #1
 80112cc:	780f      	ldrb	r7, [r1, #0]
 80112ce:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80112d0:	3301      	adds	r3, #1
 80112d2:	7743      	strb	r3, [r0, #29]
 80112d4:	7848      	ldrb	r0, [r1, #1]
 80112d6:	788e      	ldrb	r6, [r1, #2]
 80112d8:	78cb      	ldrb	r3, [r1, #3]
 80112da:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80112dc:	2a00      	cmp	r2, #0
 80112de:	d022      	beq.n	8011326 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80112e0:	041b      	lsls	r3, r3, #16
 80112e2:	433b      	orrs	r3, r7
 80112e4:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 80112e6:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80112e8:	4334      	orrs	r4, r6
 80112ea:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112ec:	22ca      	movs	r2, #202	; 0xca
 80112ee:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80112f0:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112f2:	625a      	str	r2, [r3, #36]	; 0x24
 80112f4:	3a77      	subs	r2, #119	; 0x77
 80112f6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80112f8:	f7ff fee8 	bl	80110cc <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80112fc:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80112fe:	1e06      	subs	r6, r0, #0
 8011300:	d13e      	bne.n	8011380 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011302:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011304:	4a2b      	ldr	r2, [pc, #172]	; (80113b4 <HAL_RTC_SetDate+0xf4>)
 8011306:	4014      	ands	r4, r2
 8011308:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801130a:	68da      	ldr	r2, [r3, #12]
 801130c:	438a      	bics	r2, r1
 801130e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011310:	689a      	ldr	r2, [r3, #8]
 8011312:	0692      	lsls	r2, r2, #26
 8011314:	d53e      	bpl.n	8011394 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011316:	22ff      	movs	r2, #255	; 0xff
 8011318:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801131a:	2301      	movs	r3, #1
 801131c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801131e:	2300      	movs	r3, #0
 8011320:	772b      	strb	r3, [r5, #28]
}
 8011322:	0030      	movs	r0, r6
 8011324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011326:	2410      	movs	r4, #16
 8011328:	4204      	tst	r4, r0
 801132a:	d003      	beq.n	8011334 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 801132c:	43a0      	bics	r0, r4
 801132e:	300a      	adds	r0, #10
 8011330:	b2c0      	uxtb	r0, r0
 8011332:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011334:	2100      	movs	r1, #0
  while(Value >= 10)
 8011336:	2b09      	cmp	r3, #9
 8011338:	d906      	bls.n	8011348 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 801133a:	3b0a      	subs	r3, #10
 801133c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801133e:	3101      	adds	r1, #1
  while(Value >= 10)
 8011340:	2b09      	cmp	r3, #9
 8011342:	d8fa      	bhi.n	801133a <HAL_RTC_SetDate+0x7a>
 8011344:	0109      	lsls	r1, r1, #4
 8011346:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011348:	430b      	orrs	r3, r1
 801134a:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 801134c:	2100      	movs	r1, #0
  while(Value >= 10)
 801134e:	2809      	cmp	r0, #9
 8011350:	d906      	bls.n	8011360 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011352:	380a      	subs	r0, #10
 8011354:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011356:	3101      	adds	r1, #1
  while(Value >= 10)
 8011358:	2809      	cmp	r0, #9
 801135a:	d8fa      	bhi.n	8011352 <HAL_RTC_SetDate+0x92>
 801135c:	0109      	lsls	r1, r1, #4
 801135e:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011360:	4308      	orrs	r0, r1
 8011362:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011364:	2e09      	cmp	r6, #9
 8011366:	d922      	bls.n	80113ae <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011368:	3e0a      	subs	r6, #10
 801136a:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 801136c:	3201      	adds	r2, #1
  while(Value >= 10)
 801136e:	2e09      	cmp	r6, #9
 8011370:	d8fa      	bhi.n	8011368 <HAL_RTC_SetDate+0xa8>
 8011372:	0112      	lsls	r2, r2, #4
 8011374:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011376:	433b      	orrs	r3, r7
 8011378:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801137a:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801137c:	431c      	orrs	r4, r3
 801137e:	e7b5      	b.n	80112ec <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011380:	22ff      	movs	r2, #255	; 0xff
 8011382:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011384:	2304      	movs	r3, #4
 8011386:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011388:	2300      	movs	r3, #0
    return HAL_ERROR;
 801138a:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 801138c:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 801138e:	e7c8      	b.n	8011322 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011390:	2602      	movs	r6, #2
 8011392:	e7c6      	b.n	8011322 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011394:	0028      	movs	r0, r5
 8011396:	f7ff fe7d 	bl	8011094 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801139a:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801139c:	2800      	cmp	r0, #0
 801139e:	d0ba      	beq.n	8011316 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80113a0:	22ff      	movs	r2, #255	; 0xff
 80113a2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80113a4:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80113a6:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80113a8:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 80113aa:	2601      	movs	r6, #1
 80113ac:	e7b9      	b.n	8011322 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 80113ae:	2400      	movs	r4, #0
 80113b0:	e7e1      	b.n	8011376 <HAL_RTC_SetDate+0xb6>
 80113b2:	46c0      	nop			; (mov r8, r8)
 80113b4:	00ffff3f 	.word	0x00ffff3f

080113b8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80113b8:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80113ba:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80113bc:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80113be:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80113c0:	600a      	str	r2, [r1, #0]
}
 80113c2:	4770      	bx	lr

080113c4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80113c4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80113c6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80113c8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80113ca:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80113cc:	6808      	ldr	r0, [r1, #0]
}
 80113ce:	4770      	bx	lr

080113d0 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80113d0:	4770      	bx	lr
 80113d2:	46c0      	nop			; (mov r8, r8)

080113d4 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80113d4:	2239      	movs	r2, #57	; 0x39
 80113d6:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80113d8:	2101      	movs	r1, #1
{
 80113da:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80113dc:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80113de:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80113e0:	6823      	ldr	r3, [r4, #0]
 80113e2:	430b      	orrs	r3, r1
 80113e4:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80113e6:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80113e8:	2000      	movs	r0, #0
 80113ea:	bd10      	pop	{r4, pc}

080113ec <HAL_TIM_PeriodElapsedCallback>:
 80113ec:	4770      	bx	lr
 80113ee:	46c0      	nop			; (mov r8, r8)

080113f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80113f0:	4770      	bx	lr
 80113f2:	46c0      	nop			; (mov r8, r8)

080113f4 <HAL_TIM_IC_CaptureCallback>:
 80113f4:	4770      	bx	lr
 80113f6:	46c0      	nop			; (mov r8, r8)

080113f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80113f8:	4770      	bx	lr
 80113fa:	46c0      	nop			; (mov r8, r8)

080113fc <HAL_TIM_TriggerCallback>:
 80113fc:	4770      	bx	lr
 80113fe:	46c0      	nop			; (mov r8, r8)

08011400 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011400:	2202      	movs	r2, #2
 8011402:	6803      	ldr	r3, [r0, #0]
{
 8011404:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011406:	6919      	ldr	r1, [r3, #16]
{
 8011408:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801140a:	420a      	tst	r2, r1
 801140c:	d002      	beq.n	8011414 <HAL_TIM_IRQHandler+0x14>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 801140e:	68d9      	ldr	r1, [r3, #12]
 8011410:	420a      	tst	r2, r1
 8011412:	d165      	bne.n	80114e0 <HAL_TIM_IRQHandler+0xe0>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011414:	2204      	movs	r2, #4
 8011416:	6919      	ldr	r1, [r3, #16]
 8011418:	420a      	tst	r2, r1
 801141a:	d002      	beq.n	8011422 <HAL_TIM_IRQHandler+0x22>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 801141c:	68d9      	ldr	r1, [r3, #12]
 801141e:	420a      	tst	r2, r1
 8011420:	d14b      	bne.n	80114ba <HAL_TIM_IRQHandler+0xba>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011422:	2208      	movs	r2, #8
 8011424:	6919      	ldr	r1, [r3, #16]
 8011426:	420a      	tst	r2, r1
 8011428:	d002      	beq.n	8011430 <HAL_TIM_IRQHandler+0x30>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 801142a:	68d9      	ldr	r1, [r3, #12]
 801142c:	420a      	tst	r2, r1
 801142e:	d133      	bne.n	8011498 <HAL_TIM_IRQHandler+0x98>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011430:	2210      	movs	r2, #16
 8011432:	6919      	ldr	r1, [r3, #16]
 8011434:	420a      	tst	r2, r1
 8011436:	d002      	beq.n	801143e <HAL_TIM_IRQHandler+0x3e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8011438:	68d9      	ldr	r1, [r3, #12]
 801143a:	420a      	tst	r2, r1
 801143c:	d11c      	bne.n	8011478 <HAL_TIM_IRQHandler+0x78>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801143e:	2201      	movs	r2, #1
 8011440:	6919      	ldr	r1, [r3, #16]
 8011442:	420a      	tst	r2, r1
 8011444:	d002      	beq.n	801144c <HAL_TIM_IRQHandler+0x4c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8011446:	68d9      	ldr	r1, [r3, #12]
 8011448:	420a      	tst	r2, r1
 801144a:	d15c      	bne.n	8011506 <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
      HAL_TIM_PeriodElapsedCallback(htim);
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801144c:	2280      	movs	r2, #128	; 0x80
 801144e:	6919      	ldr	r1, [r3, #16]
 8011450:	420a      	tst	r2, r1
 8011452:	d002      	beq.n	801145a <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8011454:	68d9      	ldr	r1, [r3, #12]
 8011456:	420a      	tst	r2, r1
 8011458:	d15c      	bne.n	8011514 <HAL_TIM_IRQHandler+0x114>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
      HAL_TIMEx_BreakCallback(htim);
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801145a:	2240      	movs	r2, #64	; 0x40
 801145c:	6919      	ldr	r1, [r3, #16]
 801145e:	420a      	tst	r2, r1
 8011460:	d002      	beq.n	8011468 <HAL_TIM_IRQHandler+0x68>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8011462:	68d9      	ldr	r1, [r3, #12]
 8011464:	420a      	tst	r2, r1
 8011466:	d15d      	bne.n	8011524 <HAL_TIM_IRQHandler+0x124>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
      HAL_TIM_TriggerCallback(htim);
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011468:	2220      	movs	r2, #32
 801146a:	6919      	ldr	r1, [r3, #16]
 801146c:	420a      	tst	r2, r1
 801146e:	d002      	beq.n	8011476 <HAL_TIM_IRQHandler+0x76>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8011470:	68d9      	ldr	r1, [r3, #12]
 8011472:	420a      	tst	r2, r1
 8011474:	d141      	bne.n	80114fa <HAL_TIM_IRQHandler+0xfa>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8011476:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011478:	3a21      	subs	r2, #33	; 0x21
 801147a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801147c:	3219      	adds	r2, #25
 801147e:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8011480:	69da      	ldr	r2, [r3, #28]
 8011482:	23c0      	movs	r3, #192	; 0xc0
 8011484:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8011486:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8011488:	421a      	tst	r2, r3
 801148a:	d05e      	beq.n	801154a <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 801148c:	f7ff ffb2 	bl	80113f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011490:	2300      	movs	r3, #0
 8011492:	7623      	strb	r3, [r4, #24]
 8011494:	6823      	ldr	r3, [r4, #0]
 8011496:	e7d2      	b.n	801143e <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011498:	3a11      	subs	r2, #17
 801149a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 801149c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801149e:	320d      	adds	r2, #13
 80114a0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80114a2:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80114a4:	079b      	lsls	r3, r3, #30
 80114a6:	d14d      	bne.n	8011544 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80114a8:	f7ff ffa2 	bl	80113f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80114ac:	0020      	movs	r0, r4
 80114ae:	f7ff ffa3 	bl	80113f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114b2:	2300      	movs	r3, #0
 80114b4:	7623      	strb	r3, [r4, #24]
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	e7ba      	b.n	8011430 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80114ba:	3a09      	subs	r2, #9
 80114bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80114be:	3207      	adds	r2, #7
 80114c0:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80114c2:	699a      	ldr	r2, [r3, #24]
 80114c4:	23c0      	movs	r3, #192	; 0xc0
 80114c6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80114c8:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80114ca:	421a      	tst	r2, r3
 80114cc:	d137      	bne.n	801153e <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80114ce:	f7ff ff8f 	bl	80113f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80114d2:	0020      	movs	r0, r4
 80114d4:	f7ff ff90 	bl	80113f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114d8:	2300      	movs	r3, #0
 80114da:	7623      	strb	r3, [r4, #24]
 80114dc:	6823      	ldr	r3, [r4, #0]
 80114de:	e7a0      	b.n	8011422 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80114e0:	3a05      	subs	r2, #5
 80114e2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80114e4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80114e6:	3204      	adds	r2, #4
 80114e8:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80114ea:	079b      	lsls	r3, r3, #30
 80114ec:	d021      	beq.n	8011532 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 80114ee:	f7ff ff81 	bl	80113f4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114f2:	2300      	movs	r3, #0
 80114f4:	7623      	strb	r3, [r4, #24]
 80114f6:	6823      	ldr	r3, [r4, #0]
 80114f8:	e78c      	b.n	8011414 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80114fa:	3a41      	subs	r2, #65	; 0x41
 80114fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80114fe:	0020      	movs	r0, r4
 8011500:	f000 f8ba 	bl	8011678 <HAL_TIMEx_CommutationCallback>
}
 8011504:	e7b7      	b.n	8011476 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011506:	3a03      	subs	r2, #3
 8011508:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801150a:	0020      	movs	r0, r4
 801150c:	f7ff ff6e 	bl	80113ec <HAL_TIM_PeriodElapsedCallback>
 8011510:	6823      	ldr	r3, [r4, #0]
 8011512:	e79b      	b.n	801144c <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011514:	3a02      	subs	r2, #2
 8011516:	3aff      	subs	r2, #255	; 0xff
 8011518:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801151a:	0020      	movs	r0, r4
 801151c:	f000 f8ae 	bl	801167c <HAL_TIMEx_BreakCallback>
 8011520:	6823      	ldr	r3, [r4, #0]
 8011522:	e79a      	b.n	801145a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011524:	3a81      	subs	r2, #129	; 0x81
 8011526:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8011528:	0020      	movs	r0, r4
 801152a:	f7ff ff67 	bl	80113fc <HAL_TIM_TriggerCallback>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	e79a      	b.n	8011468 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011532:	f7ff ff5d 	bl	80113f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011536:	0020      	movs	r0, r4
 8011538:	f7ff ff5e 	bl	80113f8 <HAL_TIM_PWM_PulseFinishedCallback>
 801153c:	e7d9      	b.n	80114f2 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 801153e:	f7ff ff59 	bl	80113f4 <HAL_TIM_IC_CaptureCallback>
 8011542:	e7c9      	b.n	80114d8 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8011544:	f7ff ff56 	bl	80113f4 <HAL_TIM_IC_CaptureCallback>
 8011548:	e7b3      	b.n	80114b2 <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801154a:	f7ff ff51 	bl	80113f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801154e:	0020      	movs	r0, r4
 8011550:	f7ff ff52 	bl	80113f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8011554:	e79c      	b.n	8011490 <HAL_TIM_IRQHandler+0x90>
 8011556:	46c0      	nop			; (mov r8, r8)

08011558 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011558:	4a22      	ldr	r2, [pc, #136]	; (80115e4 <TIM_Base_SetConfig+0x8c>)
{
 801155a:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 801155c:	6803      	ldr	r3, [r0, #0]
 801155e:	688d      	ldr	r5, [r1, #8]
 8011560:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011562:	4290      	cmp	r0, r2
 8011564:	d02c      	beq.n	80115c0 <TIM_Base_SetConfig+0x68>
 8011566:	2280      	movs	r2, #128	; 0x80
 8011568:	05d2      	lsls	r2, r2, #23
 801156a:	4290      	cmp	r0, r2
 801156c:	d012      	beq.n	8011594 <TIM_Base_SetConfig+0x3c>
 801156e:	4a1e      	ldr	r2, [pc, #120]	; (80115e8 <TIM_Base_SetConfig+0x90>)
 8011570:	4290      	cmp	r0, r2
 8011572:	d00f      	beq.n	8011594 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011574:	4a1d      	ldr	r2, [pc, #116]	; (80115ec <TIM_Base_SetConfig+0x94>)
 8011576:	4290      	cmp	r0, r2
 8011578:	d02e      	beq.n	80115d8 <TIM_Base_SetConfig+0x80>
 801157a:	4a1d      	ldr	r2, [pc, #116]	; (80115f0 <TIM_Base_SetConfig+0x98>)
 801157c:	4290      	cmp	r0, r2
 801157e:	d023      	beq.n	80115c8 <TIM_Base_SetConfig+0x70>
 8011580:	4a1c      	ldr	r2, [pc, #112]	; (80115f4 <TIM_Base_SetConfig+0x9c>)
 8011582:	4290      	cmp	r0, r2
 8011584:	d020      	beq.n	80115c8 <TIM_Base_SetConfig+0x70>
 8011586:	4a1c      	ldr	r2, [pc, #112]	; (80115f8 <TIM_Base_SetConfig+0xa0>)
 8011588:	4290      	cmp	r0, r2
 801158a:	d01d      	beq.n	80115c8 <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 801158c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801158e:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011590:	6284      	str	r4, [r0, #40]	; 0x28
 8011592:	e012      	b.n	80115ba <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011594:	2270      	movs	r2, #112	; 0x70
 8011596:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011598:	684a      	ldr	r2, [r1, #4]
 801159a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801159c:	4a17      	ldr	r2, [pc, #92]	; (80115fc <TIM_Base_SetConfig+0xa4>)
 801159e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115a0:	68ca      	ldr	r2, [r1, #12]
 80115a2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80115a4:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115a6:	4b13      	ldr	r3, [pc, #76]	; (80115f4 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115a8:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80115aa:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115ac:	4298      	cmp	r0, r3
 80115ae:	d002      	beq.n	80115b6 <TIM_Base_SetConfig+0x5e>
 80115b0:	4b11      	ldr	r3, [pc, #68]	; (80115f8 <TIM_Base_SetConfig+0xa0>)
 80115b2:	4298      	cmp	r0, r3
 80115b4:	d101      	bne.n	80115ba <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80115b6:	690b      	ldr	r3, [r1, #16]
 80115b8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80115ba:	2301      	movs	r3, #1
 80115bc:	6143      	str	r3, [r0, #20]
}
 80115be:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115c0:	2270      	movs	r2, #112	; 0x70
 80115c2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80115c4:	684a      	ldr	r2, [r1, #4]
 80115c6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80115c8:	4a0c      	ldr	r2, [pc, #48]	; (80115fc <TIM_Base_SetConfig+0xa4>)
 80115ca:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115cc:	68ca      	ldr	r2, [r1, #12]
 80115ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80115d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115d2:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80115d4:	6284      	str	r4, [r0, #40]	; 0x28
 80115d6:	e7ee      	b.n	80115b6 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 80115d8:	4a08      	ldr	r2, [pc, #32]	; (80115fc <TIM_Base_SetConfig+0xa4>)
 80115da:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115dc:	68ca      	ldr	r2, [r1, #12]
 80115de:	4313      	orrs	r3, r2
 80115e0:	e7d4      	b.n	801158c <TIM_Base_SetConfig+0x34>
 80115e2:	46c0      	nop			; (mov r8, r8)
 80115e4:	40012c00 	.word	0x40012c00
 80115e8:	40000400 	.word	0x40000400
 80115ec:	40002000 	.word	0x40002000
 80115f0:	40014000 	.word	0x40014000
 80115f4:	40014400 	.word	0x40014400
 80115f8:	40014800 	.word	0x40014800
 80115fc:	fffffcff 	.word	0xfffffcff

08011600 <HAL_TIM_Base_Init>:
{
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011604:	d014      	beq.n	8011630 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011606:	2339      	movs	r3, #57	; 0x39
 8011608:	5cc3      	ldrb	r3, [r0, r3]
 801160a:	b2db      	uxtb	r3, r3
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00a      	beq.n	8011626 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011610:	2302      	movs	r3, #2
 8011612:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011614:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011616:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011618:	1d21      	adds	r1, r4, #4
 801161a:	f7ff ff9d 	bl	8011558 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 801161e:	2301      	movs	r3, #1
  return HAL_OK;
 8011620:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011622:	5563      	strb	r3, [r4, r5]
}
 8011624:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011626:	2238      	movs	r2, #56	; 0x38
 8011628:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 801162a:	f7ff fed1 	bl	80113d0 <HAL_TIM_Base_MspInit>
 801162e:	e7ef      	b.n	8011610 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011630:	2001      	movs	r0, #1
 8011632:	e7f7      	b.n	8011624 <HAL_TIM_Base_Init+0x24>

08011634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011634:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011636:	2438      	movs	r4, #56	; 0x38
 8011638:	5d03      	ldrb	r3, [r0, r4]
 801163a:	2b01      	cmp	r3, #1
 801163c:	d019      	beq.n	8011672 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 801163e:	2539      	movs	r5, #57	; 0x39
 8011640:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011642:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011644:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011646:	6803      	ldr	r3, [r0, #0]
 8011648:	685a      	ldr	r2, [r3, #4]
 801164a:	43b2      	bics	r2, r6
 801164c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801164e:	685a      	ldr	r2, [r3, #4]
 8011650:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011652:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011654:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011656:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011658:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801165a:	689a      	ldr	r2, [r3, #8]
 801165c:	43b2      	bics	r2, r6
 801165e:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011660:	689a      	ldr	r2, [r3, #8]
 8011662:	430a      	orrs	r2, r1
 8011664:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011666:	2301      	movs	r3, #1
 8011668:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 801166a:	2300      	movs	r3, #0
 801166c:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 801166e:	2000      	movs	r0, #0
}
 8011670:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8011672:	2002      	movs	r0, #2
 8011674:	e7fc      	b.n	8011670 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8011676:	46c0      	nop			; (mov r8, r8)

08011678 <HAL_TIMEx_CommutationCallback>:
 8011678:	4770      	bx	lr
 801167a:	46c0      	nop			; (mov r8, r8)

0801167c <HAL_TIMEx_BreakCallback>:
 801167c:	4770      	bx	lr
 801167e:	46c0      	nop			; (mov r8, r8)

08011680 <HAL_UART_MspDeInit>:
 8011680:	4770      	bx	lr
 8011682:	46c0      	nop			; (mov r8, r8)

08011684 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011684:	b570      	push	{r4, r5, r6, lr}
 8011686:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011688:	2001      	movs	r0, #1
  if(huart == NULL)
 801168a:	2c00      	cmp	r4, #0
 801168c:	d012      	beq.n	80116b4 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 801168e:	2669      	movs	r6, #105	; 0x69
 8011690:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8011692:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011694:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011696:	6823      	ldr	r3, [r4, #0]
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	4382      	bics	r2, r0
 801169c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801169e:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 80116a0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80116a2:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80116a4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80116a6:	f7ff ffeb 	bl	8011680 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80116aa:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 80116ac:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116ae:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80116b0:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80116b2:	54e5      	strb	r5, [r4, r3]
}
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
 80116b6:	46c0      	nop			; (mov r8, r8)

080116b8 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116b8:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80116ba:	2069      	movs	r0, #105	; 0x69
{
 80116bc:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80116be:	5c1c      	ldrb	r4, [r3, r0]
 80116c0:	2c01      	cmp	r4, #1
 80116c2:	d003      	beq.n	80116cc <HAL_UART_Transmit_IT+0x14>
 80116c4:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80116c6:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80116c8:	2c22      	cmp	r4, #34	; 0x22
 80116ca:	d122      	bne.n	8011712 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 80116cc:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80116ce:	2900      	cmp	r1, #0
 80116d0:	d01f      	beq.n	8011712 <HAL_UART_Transmit_IT+0x5a>
 80116d2:	2a00      	cmp	r2, #0
 80116d4:	d01d      	beq.n	8011712 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 80116d6:	2468      	movs	r4, #104	; 0x68
 80116d8:	5d1d      	ldrb	r5, [r3, r4]
 80116da:	2d01      	cmp	r5, #1
 80116dc:	d01d      	beq.n	801171a <HAL_UART_Transmit_IT+0x62>
 80116de:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 80116e0:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80116e2:	2150      	movs	r1, #80	; 0x50
 80116e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80116e6:	3102      	adds	r1, #2
 80116e8:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116ea:	2200      	movs	r2, #0
 80116ec:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80116ee:	3269      	adds	r2, #105	; 0x69
 80116f0:	5c99      	ldrb	r1, [r3, r2]
 80116f2:	2922      	cmp	r1, #34	; 0x22
 80116f4:	d00e      	beq.n	8011714 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80116f6:	2112      	movs	r1, #18
 80116f8:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80116fa:	2001      	movs	r0, #1
 80116fc:	681a      	ldr	r2, [r3, #0]
 80116fe:	6891      	ldr	r1, [r2, #8]
 8011700:	4301      	orrs	r1, r0
 8011702:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011704:	2000      	movs	r0, #0
 8011706:	2168      	movs	r1, #104	; 0x68
 8011708:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801170a:	6813      	ldr	r3, [r2, #0]
 801170c:	3118      	adds	r1, #24
 801170e:	430b      	orrs	r3, r1
 8011710:	6013      	str	r3, [r2, #0]
  }
}
 8011712:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011714:	3110      	adds	r1, #16
 8011716:	5499      	strb	r1, [r3, r2]
 8011718:	e7ef      	b.n	80116fa <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 801171a:	2002      	movs	r0, #2
 801171c:	e7f9      	b.n	8011712 <HAL_UART_Transmit_IT+0x5a>
 801171e:	46c0      	nop			; (mov r8, r8)

08011720 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011720:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011722:	2069      	movs	r0, #105	; 0x69
{
 8011724:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011726:	5c1c      	ldrb	r4, [r3, r0]
 8011728:	2c01      	cmp	r4, #1
 801172a:	d003      	beq.n	8011734 <HAL_UART_Receive_IT+0x14>
 801172c:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801172e:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011730:	2c12      	cmp	r4, #18
 8011732:	d134      	bne.n	801179e <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8011734:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011736:	2900      	cmp	r1, #0
 8011738:	d031      	beq.n	801179e <HAL_UART_Receive_IT+0x7e>
 801173a:	2a00      	cmp	r2, #0
 801173c:	d02f      	beq.n	801179e <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 801173e:	2468      	movs	r4, #104	; 0x68
 8011740:	5d1d      	ldrb	r5, [r3, r4]
 8011742:	2d01      	cmp	r5, #1
 8011744:	d041      	beq.n	80117ca <HAL_UART_Receive_IT+0xaa>
 8011746:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8011748:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 801174a:	2158      	movs	r1, #88	; 0x58
 801174c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 801174e:	3102      	adds	r1, #2
 8011750:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8011752:	2180      	movs	r1, #128	; 0x80
 8011754:	689a      	ldr	r2, [r3, #8]
 8011756:	0149      	lsls	r1, r1, #5
 8011758:	428a      	cmp	r2, r1
 801175a:	d021      	beq.n	80117a0 <HAL_UART_Receive_IT+0x80>
 801175c:	2a00      	cmp	r2, #0
 801175e:	d129      	bne.n	80117b4 <HAL_UART_Receive_IT+0x94>
 8011760:	691a      	ldr	r2, [r3, #16]
 8011762:	2a00      	cmp	r2, #0
 8011764:	d133      	bne.n	80117ce <HAL_UART_Receive_IT+0xae>
 8011766:	225c      	movs	r2, #92	; 0x5c
 8011768:	21ff      	movs	r1, #255	; 0xff
 801176a:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801176c:	2200      	movs	r2, #0
 801176e:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011770:	3269      	adds	r2, #105	; 0x69
 8011772:	5c99      	ldrb	r1, [r3, r2]
 8011774:	2912      	cmp	r1, #18
 8011776:	d01a      	beq.n	80117ae <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011778:	2122      	movs	r1, #34	; 0x22
 801177a:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801177c:	2180      	movs	r1, #128	; 0x80
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	0049      	lsls	r1, r1, #1
 8011782:	6810      	ldr	r0, [r2, #0]
 8011784:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011786:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011788:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801178a:	6891      	ldr	r1, [r2, #8]
 801178c:	4301      	orrs	r1, r0
 801178e:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011790:	2000      	movs	r0, #0
 8011792:	2168      	movs	r1, #104	; 0x68
 8011794:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011796:	6813      	ldr	r3, [r2, #0]
 8011798:	3948      	subs	r1, #72	; 0x48
 801179a:	430b      	orrs	r3, r1
 801179c:	6013      	str	r3, [r2, #0]
  }
}
 801179e:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 80117a0:	691a      	ldr	r2, [r3, #16]
 80117a2:	2a00      	cmp	r2, #0
 80117a4:	d1df      	bne.n	8011766 <HAL_UART_Receive_IT+0x46>
 80117a6:	490c      	ldr	r1, [pc, #48]	; (80117d8 <HAL_UART_Receive_IT+0xb8>)
 80117a8:	325c      	adds	r2, #92	; 0x5c
 80117aa:	5299      	strh	r1, [r3, r2]
 80117ac:	e7de      	b.n	801176c <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80117ae:	3120      	adds	r1, #32
 80117b0:	5499      	strb	r1, [r3, r2]
 80117b2:	e7e3      	b.n	801177c <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 80117b4:	2180      	movs	r1, #128	; 0x80
 80117b6:	0549      	lsls	r1, r1, #21
 80117b8:	428a      	cmp	r2, r1
 80117ba:	d1d7      	bne.n	801176c <HAL_UART_Receive_IT+0x4c>
 80117bc:	691a      	ldr	r2, [r3, #16]
 80117be:	2a00      	cmp	r2, #0
 80117c0:	d005      	beq.n	80117ce <HAL_UART_Receive_IT+0xae>
 80117c2:	225c      	movs	r2, #92	; 0x5c
 80117c4:	213f      	movs	r1, #63	; 0x3f
 80117c6:	5299      	strh	r1, [r3, r2]
 80117c8:	e7d0      	b.n	801176c <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 80117ca:	2002      	movs	r0, #2
 80117cc:	e7e7      	b.n	801179e <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 80117ce:	225c      	movs	r2, #92	; 0x5c
 80117d0:	217f      	movs	r1, #127	; 0x7f
 80117d2:	5299      	strh	r1, [r3, r2]
 80117d4:	e7ca      	b.n	801176c <HAL_UART_Receive_IT+0x4c>
 80117d6:	46c0      	nop			; (mov r8, r8)
 80117d8:	000001ff 	.word	0x000001ff

080117dc <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80117e0:	2069      	movs	r0, #105	; 0x69
 80117e2:	5c25      	ldrb	r5, [r4, r0]
 80117e4:	2d01      	cmp	r5, #1
 80117e6:	d003      	beq.n	80117f0 <HAL_UART_Receive_DMA+0x14>
 80117e8:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80117ea:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80117ec:	2b12      	cmp	r3, #18
 80117ee:	d12b      	bne.n	8011848 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 80117f0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80117f2:	2900      	cmp	r1, #0
 80117f4:	d028      	beq.n	8011848 <HAL_UART_Receive_DMA+0x6c>
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	d026      	beq.n	8011848 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 80117fa:	2368      	movs	r3, #104	; 0x68
 80117fc:	5ce5      	ldrb	r5, [r4, r3]
 80117fe:	2d01      	cmp	r5, #1
 8011800:	d026      	beq.n	8011850 <HAL_UART_Receive_DMA+0x74>
 8011802:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011804:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011806:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011808:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801180a:	2300      	movs	r3, #0
 801180c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801180e:	3369      	adds	r3, #105	; 0x69
 8011810:	5ce0      	ldrb	r0, [r4, r3]
 8011812:	2812      	cmp	r0, #18
 8011814:	d019      	beq.n	801184a <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011816:	2022      	movs	r0, #34	; 0x22
 8011818:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801181a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801181c:	4b0d      	ldr	r3, [pc, #52]	; (8011854 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801181e:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011820:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011824:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011826:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011828:	4b0c      	ldr	r3, [pc, #48]	; (801185c <HAL_UART_Receive_DMA+0x80>)
 801182a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801182c:	0013      	movs	r3, r2
 801182e:	000a      	movs	r2, r1
 8011830:	0029      	movs	r1, r5
 8011832:	f7fd ff21 	bl	800f678 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011836:	2140      	movs	r1, #64	; 0x40
 8011838:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 801183a:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801183c:	6893      	ldr	r3, [r2, #8]
 801183e:	430b      	orrs	r3, r1
 8011840:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8011842:	2368      	movs	r3, #104	; 0x68
 8011844:	2200      	movs	r2, #0
 8011846:	54e2      	strb	r2, [r4, r3]
  }
}
 8011848:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801184a:	3020      	adds	r0, #32
 801184c:	54e0      	strb	r0, [r4, r3]
 801184e:	e7e4      	b.n	801181a <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8011850:	2002      	movs	r0, #2
 8011852:	e7f9      	b.n	8011848 <HAL_UART_Receive_DMA+0x6c>
 8011854:	08011861 	.word	0x08011861
 8011858:	0801189d 	.word	0x0801189d
 801185c:	080118a9 	.word	0x080118a9

08011860 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011860:	6803      	ldr	r3, [r0, #0]
{
 8011862:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011864:	6819      	ldr	r1, [r3, #0]
 8011866:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011868:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801186a:	400b      	ands	r3, r1
 801186c:	d10c      	bne.n	8011888 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 801186e:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011870:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 8011872:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011874:	6811      	ldr	r1, [r2, #0]
 8011876:	688b      	ldr	r3, [r1, #8]
 8011878:	4383      	bics	r3, r0
 801187a:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801187c:	2369      	movs	r3, #105	; 0x69
 801187e:	5cd1      	ldrb	r1, [r2, r3]
 8011880:	2932      	cmp	r1, #50	; 0x32
 8011882:	d005      	beq.n	8011890 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8011884:	2101      	movs	r1, #1
 8011886:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8011888:	0010      	movs	r0, r2
 801188a:	f7fa fd8f 	bl	800c3ac <HAL_UART_RxCpltCallback>
}
 801188e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011890:	3920      	subs	r1, #32
 8011892:	54d1      	strb	r1, [r2, r3]
 8011894:	e7f8      	b.n	8011888 <UART_DMAReceiveCplt+0x28>
 8011896:	46c0      	nop			; (mov r8, r8)

08011898 <HAL_UART_RxHalfCpltCallback>:
 8011898:	4770      	bx	lr
 801189a:	46c0      	nop			; (mov r8, r8)

0801189c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801189c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801189e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80118a0:	f7ff fffa 	bl	8011898 <HAL_UART_RxHalfCpltCallback>
}
 80118a4:	bd10      	pop	{r4, pc}
 80118a6:	46c0      	nop			; (mov r8, r8)

080118a8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 80118a8:	2300      	movs	r3, #0
 80118aa:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80118ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80118ae:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 80118b0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80118b2:	3a08      	subs	r2, #8
 80118b4:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80118b6:	3369      	adds	r3, #105	; 0x69
 80118b8:	3a51      	subs	r2, #81	; 0x51
 80118ba:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80118bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80118be:	320f      	adds	r2, #15
 80118c0:	4313      	orrs	r3, r2
 80118c2:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80118c4:	f7fa fd4e 	bl	800c364 <HAL_UART_ErrorCallback>
}
 80118c8:	bd10      	pop	{r4, pc}
 80118ca:	46c0      	nop			; (mov r8, r8)

080118cc <UART_SetConfig>:
{
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80118d0:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80118d2:	69c1      	ldr	r1, [r0, #28]
 80118d4:	6883      	ldr	r3, [r0, #8]
 80118d6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80118d8:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80118da:	4303      	orrs	r3, r0
 80118dc:	6968      	ldr	r0, [r5, #20]
 80118de:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80118e0:	4861      	ldr	r0, [pc, #388]	; (8011a68 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80118e2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80118e4:	4002      	ands	r2, r0
 80118e6:	4313      	orrs	r3, r2
 80118e8:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80118ea:	6863      	ldr	r3, [r4, #4]
 80118ec:	4a5f      	ldr	r2, [pc, #380]	; (8011a6c <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80118ee:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80118f0:	4013      	ands	r3, r2
 80118f2:	68ea      	ldr	r2, [r5, #12]
 80118f4:	4313      	orrs	r3, r2
 80118f6:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80118f8:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80118fa:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80118fc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80118fe:	485c      	ldr	r0, [pc, #368]	; (8011a70 <UART_SetConfig+0x1a4>)
 8011900:	4002      	ands	r2, r0
 8011902:	4313      	orrs	r3, r2
 8011904:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011906:	4b5b      	ldr	r3, [pc, #364]	; (8011a74 <UART_SetConfig+0x1a8>)
 8011908:	429c      	cmp	r4, r3
 801190a:	d044      	beq.n	8011996 <UART_SetConfig+0xca>
 801190c:	4b5a      	ldr	r3, [pc, #360]	; (8011a78 <UART_SetConfig+0x1ac>)
 801190e:	429c      	cmp	r4, r3
 8011910:	d018      	beq.n	8011944 <UART_SetConfig+0x78>
 8011912:	4b5a      	ldr	r3, [pc, #360]	; (8011a7c <UART_SetConfig+0x1b0>)
 8011914:	429c      	cmp	r4, r3
 8011916:	d100      	bne.n	801191a <UART_SetConfig+0x4e>
 8011918:	e085      	b.n	8011a26 <UART_SetConfig+0x15a>
 801191a:	4b59      	ldr	r3, [pc, #356]	; (8011a80 <UART_SetConfig+0x1b4>)
 801191c:	429c      	cmp	r4, r3
 801191e:	d031      	beq.n	8011984 <UART_SetConfig+0xb8>
 8011920:	4b58      	ldr	r3, [pc, #352]	; (8011a84 <UART_SetConfig+0x1b8>)
 8011922:	429c      	cmp	r4, r3
 8011924:	d02e      	beq.n	8011984 <UART_SetConfig+0xb8>
 8011926:	4b58      	ldr	r3, [pc, #352]	; (8011a88 <UART_SetConfig+0x1bc>)
 8011928:	429c      	cmp	r4, r3
 801192a:	d02b      	beq.n	8011984 <UART_SetConfig+0xb8>
 801192c:	4b57      	ldr	r3, [pc, #348]	; (8011a8c <UART_SetConfig+0x1c0>)
 801192e:	429c      	cmp	r4, r3
 8011930:	d028      	beq.n	8011984 <UART_SetConfig+0xb8>
 8011932:	4b57      	ldr	r3, [pc, #348]	; (8011a90 <UART_SetConfig+0x1c4>)
 8011934:	429c      	cmp	r4, r3
 8011936:	d025      	beq.n	8011984 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011938:	2380      	movs	r3, #128	; 0x80
 801193a:	021b      	lsls	r3, r3, #8
 801193c:	4299      	cmp	r1, r3
 801193e:	d050      	beq.n	80119e2 <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 8011940:	2001      	movs	r0, #1
 8011942:	e01c      	b.n	801197e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011944:	20c0      	movs	r0, #192	; 0xc0
 8011946:	2280      	movs	r2, #128	; 0x80
 8011948:	4b52      	ldr	r3, [pc, #328]	; (8011a94 <UART_SetConfig+0x1c8>)
 801194a:	0280      	lsls	r0, r0, #10
 801194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801194e:	0252      	lsls	r2, r2, #9
 8011950:	4003      	ands	r3, r0
 8011952:	4293      	cmp	r3, r2
 8011954:	d049      	beq.n	80119ea <UART_SetConfig+0x11e>
 8011956:	d913      	bls.n	8011980 <UART_SetConfig+0xb4>
 8011958:	2280      	movs	r2, #128	; 0x80
 801195a:	0292      	lsls	r2, r2, #10
 801195c:	4293      	cmp	r3, r2
 801195e:	d100      	bne.n	8011962 <UART_SetConfig+0x96>
 8011960:	e070      	b.n	8011a44 <UART_SetConfig+0x178>
 8011962:	4283      	cmp	r3, r0
 8011964:	d1e8      	bne.n	8011938 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011966:	2380      	movs	r3, #128	; 0x80
 8011968:	021b      	lsls	r3, r3, #8
 801196a:	4299      	cmp	r1, r3
 801196c:	d056      	beq.n	8011a1c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801196e:	6869      	ldr	r1, [r5, #4]
 8011970:	4849      	ldr	r0, [pc, #292]	; (8011a98 <UART_SetConfig+0x1cc>)
 8011972:	f7ee fbed 	bl	8000150 <__udivsi3>
 8011976:	0400      	lsls	r0, r0, #16
 8011978:	0c00      	lsrs	r0, r0, #16
 801197a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801197c:	2000      	movs	r0, #0
}
 801197e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1d9      	bne.n	8011938 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011984:	2380      	movs	r3, #128	; 0x80
 8011986:	021b      	lsls	r3, r3, #8
 8011988:	4299      	cmp	r1, r3
 801198a:	d060      	beq.n	8011a4e <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801198c:	f7ff fa74 	bl	8010e78 <HAL_RCC_GetPCLK1Freq>
 8011990:	682c      	ldr	r4, [r5, #0]
 8011992:	6869      	ldr	r1, [r5, #4]
 8011994:	e7ed      	b.n	8011972 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011996:	4b3f      	ldr	r3, [pc, #252]	; (8011a94 <UART_SetConfig+0x1c8>)
 8011998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801199a:	2303      	movs	r3, #3
 801199c:	4013      	ands	r3, r2
 801199e:	4a3f      	ldr	r2, [pc, #252]	; (8011a9c <UART_SetConfig+0x1d0>)
 80119a0:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119a2:	2280      	movs	r2, #128	; 0x80
 80119a4:	0212      	lsls	r2, r2, #8
 80119a6:	4291      	cmp	r1, r2
 80119a8:	d00e      	beq.n	80119c8 <UART_SetConfig+0xfc>
    switch (clocksource)
 80119aa:	2b02      	cmp	r3, #2
 80119ac:	d0df      	beq.n	801196e <UART_SetConfig+0xa2>
 80119ae:	d956      	bls.n	8011a5e <UART_SetConfig+0x192>
 80119b0:	2b04      	cmp	r3, #4
 80119b2:	d01e      	beq.n	80119f2 <UART_SetConfig+0x126>
 80119b4:	2b08      	cmp	r3, #8
 80119b6:	d1c3      	bne.n	8011940 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80119b8:	2080      	movs	r0, #128	; 0x80
 80119ba:	6869      	ldr	r1, [r5, #4]
 80119bc:	0200      	lsls	r0, r0, #8
 80119be:	f7ee fbc7 	bl	8000150 <__udivsi3>
 80119c2:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80119c4:	2000      	movs	r0, #0
        break;
 80119c6:	e7da      	b.n	801197e <UART_SetConfig+0xb2>
    switch (clocksource)
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d027      	beq.n	8011a1c <UART_SetConfig+0x150>
 80119cc:	d907      	bls.n	80119de <UART_SetConfig+0x112>
 80119ce:	2b04      	cmp	r3, #4
 80119d0:	d014      	beq.n	80119fc <UART_SetConfig+0x130>
 80119d2:	2b08      	cmp	r3, #8
 80119d4:	d105      	bne.n	80119e2 <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80119d6:	2080      	movs	r0, #128	; 0x80
 80119d8:	6869      	ldr	r1, [r5, #4]
 80119da:	0240      	lsls	r0, r0, #9
 80119dc:	e020      	b.n	8011a20 <UART_SetConfig+0x154>
    switch (clocksource)
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d035      	beq.n	8011a4e <UART_SetConfig+0x182>
 80119e2:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80119e4:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80119e6:	60e3      	str	r3, [r4, #12]
 80119e8:	e7c9      	b.n	801197e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119ea:	2380      	movs	r3, #128	; 0x80
 80119ec:	021b      	lsls	r3, r3, #8
 80119ee:	4299      	cmp	r1, r3
 80119f0:	d004      	beq.n	80119fc <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80119f2:	f7ff f9e7 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 80119f6:	682c      	ldr	r4, [r5, #0]
 80119f8:	6869      	ldr	r1, [r5, #4]
 80119fa:	e7ba      	b.n	8011972 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80119fc:	f7ff f9e2 	bl	8010dc4 <HAL_RCC_GetSysClockFreq>
 8011a00:	6869      	ldr	r1, [r5, #4]
 8011a02:	0040      	lsls	r0, r0, #1
 8011a04:	f7ee fba4 	bl	8000150 <__udivsi3>
 8011a08:	682c      	ldr	r4, [r5, #0]
 8011a0a:	220f      	movs	r2, #15
 8011a0c:	0703      	lsls	r3, r0, #28
 8011a0e:	0f5b      	lsrs	r3, r3, #29
 8011a10:	4390      	bics	r0, r2
 8011a12:	4303      	orrs	r3, r0
 8011a14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a16:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8011a18:	60e3      	str	r3, [r4, #12]
 8011a1a:	e7b0      	b.n	801197e <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011a1c:	6869      	ldr	r1, [r5, #4]
 8011a1e:	4820      	ldr	r0, [pc, #128]	; (8011aa0 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011a20:	f7ee fb96 	bl	8000150 <__udivsi3>
 8011a24:	e7f1      	b.n	8011a0a <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011a26:	20c0      	movs	r0, #192	; 0xc0
 8011a28:	2280      	movs	r2, #128	; 0x80
 8011a2a:	4b1a      	ldr	r3, [pc, #104]	; (8011a94 <UART_SetConfig+0x1c8>)
 8011a2c:	0300      	lsls	r0, r0, #12
 8011a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a30:	02d2      	lsls	r2, r2, #11
 8011a32:	4003      	ands	r3, r0
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d0d8      	beq.n	80119ea <UART_SetConfig+0x11e>
 8011a38:	d9a2      	bls.n	8011980 <UART_SetConfig+0xb4>
 8011a3a:	2280      	movs	r2, #128	; 0x80
 8011a3c:	0312      	lsls	r2, r2, #12
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d000      	beq.n	8011a44 <UART_SetConfig+0x178>
 8011a42:	e78e      	b.n	8011962 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a44:	2380      	movs	r3, #128	; 0x80
 8011a46:	021b      	lsls	r3, r3, #8
 8011a48:	4299      	cmp	r1, r3
 8011a4a:	d1b5      	bne.n	80119b8 <UART_SetConfig+0xec>
 8011a4c:	e7c3      	b.n	80119d6 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011a4e:	f7ff fa13 	bl	8010e78 <HAL_RCC_GetPCLK1Freq>
 8011a52:	6869      	ldr	r1, [r5, #4]
 8011a54:	0040      	lsls	r0, r0, #1
 8011a56:	f7ee fb7b 	bl	8000150 <__udivsi3>
 8011a5a:	682c      	ldr	r4, [r5, #0]
 8011a5c:	e7d5      	b.n	8011a0a <UART_SetConfig+0x13e>
    switch (clocksource)
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d094      	beq.n	801198c <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 8011a62:	2001      	movs	r0, #1
 8011a64:	e78b      	b.n	801197e <UART_SetConfig+0xb2>
 8011a66:	46c0      	nop			; (mov r8, r8)
 8011a68:	efff69f3 	.word	0xefff69f3
 8011a6c:	ffffcfff 	.word	0xffffcfff
 8011a70:	fffff4ff 	.word	0xfffff4ff
 8011a74:	40013800 	.word	0x40013800
 8011a78:	40004400 	.word	0x40004400
 8011a7c:	40004800 	.word	0x40004800
 8011a80:	40004c00 	.word	0x40004c00
 8011a84:	40005000 	.word	0x40005000
 8011a88:	40011400 	.word	0x40011400
 8011a8c:	40011800 	.word	0x40011800
 8011a90:	40011c00 	.word	0x40011c00
 8011a94:	40021000 	.word	0x40021000
 8011a98:	007a1200 	.word	0x007a1200
 8011a9c:	08017380 	.word	0x08017380
 8011aa0:	00f42400 	.word	0x00f42400

08011aa4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011aa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8011aa6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011aa8:	07da      	lsls	r2, r3, #31
 8011aaa:	d506      	bpl.n	8011aba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011aac:	6801      	ldr	r1, [r0, #0]
 8011aae:	4c28      	ldr	r4, [pc, #160]	; (8011b50 <UART_AdvFeatureConfig+0xac>)
 8011ab0:	684a      	ldr	r2, [r1, #4]
 8011ab2:	4022      	ands	r2, r4
 8011ab4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011ab6:	4322      	orrs	r2, r4
 8011ab8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011aba:	079a      	lsls	r2, r3, #30
 8011abc:	d506      	bpl.n	8011acc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011abe:	6801      	ldr	r1, [r0, #0]
 8011ac0:	4c24      	ldr	r4, [pc, #144]	; (8011b54 <UART_AdvFeatureConfig+0xb0>)
 8011ac2:	684a      	ldr	r2, [r1, #4]
 8011ac4:	4022      	ands	r2, r4
 8011ac6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011ac8:	4322      	orrs	r2, r4
 8011aca:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011acc:	075a      	lsls	r2, r3, #29
 8011ace:	d506      	bpl.n	8011ade <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011ad0:	6801      	ldr	r1, [r0, #0]
 8011ad2:	4c21      	ldr	r4, [pc, #132]	; (8011b58 <UART_AdvFeatureConfig+0xb4>)
 8011ad4:	684a      	ldr	r2, [r1, #4]
 8011ad6:	4022      	ands	r2, r4
 8011ad8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011ada:	4322      	orrs	r2, r4
 8011adc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011ade:	071a      	lsls	r2, r3, #28
 8011ae0:	d506      	bpl.n	8011af0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ae2:	6801      	ldr	r1, [r0, #0]
 8011ae4:	4c1d      	ldr	r4, [pc, #116]	; (8011b5c <UART_AdvFeatureConfig+0xb8>)
 8011ae6:	684a      	ldr	r2, [r1, #4]
 8011ae8:	4022      	ands	r2, r4
 8011aea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011aec:	4322      	orrs	r2, r4
 8011aee:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011af0:	06da      	lsls	r2, r3, #27
 8011af2:	d506      	bpl.n	8011b02 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011af4:	6801      	ldr	r1, [r0, #0]
 8011af6:	4c1a      	ldr	r4, [pc, #104]	; (8011b60 <UART_AdvFeatureConfig+0xbc>)
 8011af8:	688a      	ldr	r2, [r1, #8]
 8011afa:	4022      	ands	r2, r4
 8011afc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8011afe:	4322      	orrs	r2, r4
 8011b00:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b02:	069a      	lsls	r2, r3, #26
 8011b04:	d506      	bpl.n	8011b14 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b06:	6801      	ldr	r1, [r0, #0]
 8011b08:	4c16      	ldr	r4, [pc, #88]	; (8011b64 <UART_AdvFeatureConfig+0xc0>)
 8011b0a:	688a      	ldr	r2, [r1, #8]
 8011b0c:	4022      	ands	r2, r4
 8011b0e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8011b10:	4322      	orrs	r2, r4
 8011b12:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b14:	065a      	lsls	r2, r3, #25
 8011b16:	d50a      	bpl.n	8011b2e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b18:	6801      	ldr	r1, [r0, #0]
 8011b1a:	4d13      	ldr	r5, [pc, #76]	; (8011b68 <UART_AdvFeatureConfig+0xc4>)
 8011b1c:	684a      	ldr	r2, [r1, #4]
 8011b1e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8011b20:	402a      	ands	r2, r5
 8011b22:	4322      	orrs	r2, r4
 8011b24:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b26:	2280      	movs	r2, #128	; 0x80
 8011b28:	0352      	lsls	r2, r2, #13
 8011b2a:	4294      	cmp	r4, r2
 8011b2c:	d009      	beq.n	8011b42 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b2e:	061b      	lsls	r3, r3, #24
 8011b30:	d506      	bpl.n	8011b40 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b32:	6802      	ldr	r2, [r0, #0]
 8011b34:	490d      	ldr	r1, [pc, #52]	; (8011b6c <UART_AdvFeatureConfig+0xc8>)
 8011b36:	6853      	ldr	r3, [r2, #4]
 8011b38:	400b      	ands	r3, r1
 8011b3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8011b3c:	430b      	orrs	r3, r1
 8011b3e:	6053      	str	r3, [r2, #4]
}
 8011b40:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b42:	684a      	ldr	r2, [r1, #4]
 8011b44:	4c0a      	ldr	r4, [pc, #40]	; (8011b70 <UART_AdvFeatureConfig+0xcc>)
 8011b46:	4022      	ands	r2, r4
 8011b48:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8011b4a:	4322      	orrs	r2, r4
 8011b4c:	604a      	str	r2, [r1, #4]
 8011b4e:	e7ee      	b.n	8011b2e <UART_AdvFeatureConfig+0x8a>
 8011b50:	fffdffff 	.word	0xfffdffff
 8011b54:	fffeffff 	.word	0xfffeffff
 8011b58:	fffbffff 	.word	0xfffbffff
 8011b5c:	ffff7fff 	.word	0xffff7fff
 8011b60:	ffffefff 	.word	0xffffefff
 8011b64:	ffffdfff 	.word	0xffffdfff
 8011b68:	ffefffff 	.word	0xffefffff
 8011b6c:	fff7ffff 	.word	0xfff7ffff
 8011b70:	ff9fffff 	.word	0xff9fffff

08011b74 <UART_WaitOnFlagUntilTimeout>:
{
 8011b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b76:	46c6      	mov	lr, r8
 8011b78:	4690      	mov	r8, r2
 8011b7a:	b500      	push	{lr}
 8011b7c:	001d      	movs	r5, r3
 8011b7e:	0006      	movs	r6, r0
 8011b80:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8011b82:	f7fd f8fd 	bl	800ed80 <HAL_GetTick>
  if(Status == RESET)
 8011b86:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8011b88:	0007      	movs	r7, r0
  if(Status == RESET)
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d112      	bne.n	8011bb4 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011b8e:	6832      	ldr	r2, [r6, #0]
 8011b90:	e001      	b.n	8011b96 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8011b92:	1c6b      	adds	r3, r5, #1
 8011b94:	d117      	bne.n	8011bc6 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011b96:	69d3      	ldr	r3, [r2, #28]
 8011b98:	4023      	ands	r3, r4
 8011b9a:	42a3      	cmp	r3, r4
 8011b9c:	d1f9      	bne.n	8011b92 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8011b9e:	2000      	movs	r0, #0
}
 8011ba0:	bc04      	pop	{r2}
 8011ba2:	4690      	mov	r8, r2
 8011ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011ba6:	2d00      	cmp	r5, #0
 8011ba8:	d015      	beq.n	8011bd6 <UART_WaitOnFlagUntilTimeout+0x62>
 8011baa:	f7fd f8e9 	bl	800ed80 <HAL_GetTick>
 8011bae:	1bc0      	subs	r0, r0, r7
 8011bb0:	42a8      	cmp	r0, r5
 8011bb2:	d80f      	bhi.n	8011bd4 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011bb4:	6832      	ldr	r2, [r6, #0]
 8011bb6:	e001      	b.n	8011bbc <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8011bb8:	1c6b      	adds	r3, r5, #1
 8011bba:	d1f4      	bne.n	8011ba6 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011bbc:	69d3      	ldr	r3, [r2, #28]
 8011bbe:	4023      	ands	r3, r4
 8011bc0:	42a3      	cmp	r3, r4
 8011bc2:	d0f9      	beq.n	8011bb8 <UART_WaitOnFlagUntilTimeout+0x44>
 8011bc4:	e7eb      	b.n	8011b9e <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011bc6:	2d00      	cmp	r5, #0
 8011bc8:	d005      	beq.n	8011bd6 <UART_WaitOnFlagUntilTimeout+0x62>
 8011bca:	f7fd f8d9 	bl	800ed80 <HAL_GetTick>
 8011bce:	1bc0      	subs	r0, r0, r7
 8011bd0:	42a8      	cmp	r0, r5
 8011bd2:	d9dc      	bls.n	8011b8e <UART_WaitOnFlagUntilTimeout+0x1a>
 8011bd4:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011bd6:	2180      	movs	r1, #128	; 0x80
 8011bd8:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8011bda:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011bdc:	438b      	bics	r3, r1
 8011bde:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011be0:	6813      	ldr	r3, [r2, #0]
 8011be2:	3960      	subs	r1, #96	; 0x60
 8011be4:	438b      	bics	r3, r1
 8011be6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011be8:	6813      	ldr	r3, [r2, #0]
 8011bea:	4907      	ldr	r1, [pc, #28]	; (8011c08 <UART_WaitOnFlagUntilTimeout+0x94>)
 8011bec:	400b      	ands	r3, r1
 8011bee:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011bf0:	6893      	ldr	r3, [r2, #8]
 8011bf2:	3103      	adds	r1, #3
 8011bf4:	31ff      	adds	r1, #255	; 0xff
 8011bf6:	438b      	bics	r3, r1
 8011bf8:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 8011bfa:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8011bfc:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 8011bfe:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8011c00:	3b01      	subs	r3, #1
 8011c02:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011c04:	e7cc      	b.n	8011ba0 <UART_WaitOnFlagUntilTimeout+0x2c>
 8011c06:	46c0      	nop			; (mov r8, r8)
 8011c08:	fffffeff 	.word	0xfffffeff

08011c0c <HAL_UART_Transmit>:
{
 8011c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c0e:	46c6      	mov	lr, r8
 8011c10:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c12:	2369      	movs	r3, #105	; 0x69
{
 8011c14:	b500      	push	{lr}
 8011c16:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c18:	5cc1      	ldrb	r1, [r0, r3]
{
 8011c1a:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c1c:	2901      	cmp	r1, #1
 8011c1e:	d003      	beq.n	8011c28 <HAL_UART_Transmit+0x1c>
 8011c20:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8011c22:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011c24:	2b22      	cmp	r3, #34	; 0x22
 8011c26:	d147      	bne.n	8011cb8 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8011c28:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011c2a:	2d00      	cmp	r5, #0
 8011c2c:	d044      	beq.n	8011cb8 <HAL_UART_Transmit+0xac>
 8011c2e:	2a00      	cmp	r2, #0
 8011c30:	d042      	beq.n	8011cb8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8011c32:	2368      	movs	r3, #104	; 0x68
 8011c34:	5ce1      	ldrb	r1, [r4, r3]
 8011c36:	2901      	cmp	r1, #1
 8011c38:	d046      	beq.n	8011cc8 <HAL_UART_Transmit+0xbc>
 8011c3a:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011c40:	3369      	adds	r3, #105	; 0x69
 8011c42:	5ce1      	ldrb	r1, [r4, r3]
 8011c44:	2922      	cmp	r1, #34	; 0x22
 8011c46:	d03a      	beq.n	8011cbe <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011c48:	2112      	movs	r1, #18
 8011c4a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8011c4c:	2350      	movs	r3, #80	; 0x50
 8011c4e:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c50:	2380      	movs	r3, #128	; 0x80
 8011c52:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 8011c54:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c56:	4698      	mov	r8, r3
 8011c58:	e005      	b.n	8011c66 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8011c5a:	782a      	ldrb	r2, [r5, #0]
 8011c5c:	3501      	adds	r5, #1
 8011c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8011c60:	5ba2      	ldrh	r2, [r4, r6]
 8011c62:	2a00      	cmp	r2, #0
 8011c64:	d018      	beq.n	8011c98 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 8011c66:	3a01      	subs	r2, #1
 8011c68:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8011c6a:	003b      	movs	r3, r7
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2180      	movs	r1, #128	; 0x80
 8011c70:	0020      	movs	r0, r4
 8011c72:	f7ff ff7f 	bl	8011b74 <UART_WaitOnFlagUntilTimeout>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d124      	bne.n	8011cc4 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c7a:	68a2      	ldr	r2, [r4, #8]
 8011c7c:	6823      	ldr	r3, [r4, #0]
 8011c7e:	4542      	cmp	r2, r8
 8011c80:	d1eb      	bne.n	8011c5a <HAL_UART_Transmit+0x4e>
 8011c82:	6922      	ldr	r2, [r4, #16]
 8011c84:	2a00      	cmp	r2, #0
 8011c86:	d1e8      	bne.n	8011c5a <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011c88:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8011c8a:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011c8c:	05d2      	lsls	r2, r2, #23
 8011c8e:	0dd2      	lsrs	r2, r2, #23
 8011c90:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8011c92:	5ba2      	ldrh	r2, [r4, r6]
 8011c94:	2a00      	cmp	r2, #0
 8011c96:	d1e6      	bne.n	8011c66 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8011c98:	003b      	movs	r3, r7
 8011c9a:	2140      	movs	r1, #64	; 0x40
 8011c9c:	0020      	movs	r0, r4
 8011c9e:	f7ff ff69 	bl	8011b74 <UART_WaitOnFlagUntilTimeout>
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d10e      	bne.n	8011cc4 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011ca6:	2369      	movs	r3, #105	; 0x69
 8011ca8:	5ce2      	ldrb	r2, [r4, r3]
 8011caa:	2a32      	cmp	r2, #50	; 0x32
 8011cac:	d00e      	beq.n	8011ccc <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 8011cae:	2201      	movs	r2, #1
 8011cb0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8011cb2:	2368      	movs	r3, #104	; 0x68
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	54e2      	strb	r2, [r4, r3]
}
 8011cb8:	bc04      	pop	{r2}
 8011cba:	4690      	mov	r8, r2
 8011cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011cbe:	3110      	adds	r1, #16
 8011cc0:	54e1      	strb	r1, [r4, r3]
 8011cc2:	e7c3      	b.n	8011c4c <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8011cc4:	2003      	movs	r0, #3
 8011cc6:	e7f7      	b.n	8011cb8 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8011cc8:	2002      	movs	r0, #2
 8011cca:	e7f5      	b.n	8011cb8 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011ccc:	3a10      	subs	r2, #16
 8011cce:	54e2      	strb	r2, [r4, r3]
 8011cd0:	e7ef      	b.n	8011cb2 <HAL_UART_Transmit+0xa6>
 8011cd2:	46c0      	nop			; (mov r8, r8)

08011cd4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cd4:	2300      	movs	r3, #0
{
 8011cd6:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011cd8:	4a1a      	ldr	r2, [pc, #104]	; (8011d44 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cda:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011cdc:	6803      	ldr	r3, [r0, #0]
{
 8011cde:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d00d      	beq.n	8011d00 <UART_CheckIdleState+0x2c>
 8011ce4:	4a18      	ldr	r2, [pc, #96]	; (8011d48 <UART_CheckIdleState+0x74>)
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d00a      	beq.n	8011d00 <UART_CheckIdleState+0x2c>
 8011cea:	4a18      	ldr	r2, [pc, #96]	; (8011d4c <UART_CheckIdleState+0x78>)
 8011cec:	4293      	cmp	r3, r2
 8011cee:	d007      	beq.n	8011d00 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8011cf0:	2369      	movs	r3, #105	; 0x69
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011cf6:	2200      	movs	r2, #0
  return HAL_OK;
 8011cf8:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8011cfa:	3b01      	subs	r3, #1
 8011cfc:	54e2      	strb	r2, [r4, r3]
}
 8011cfe:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	0712      	lsls	r2, r2, #28
 8011d04:	d40e      	bmi.n	8011d24 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	075b      	lsls	r3, r3, #29
 8011d0a:	d5f1      	bpl.n	8011cf0 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011d0c:	23fa      	movs	r3, #250	; 0xfa
 8011d0e:	2180      	movs	r1, #128	; 0x80
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	2200      	movs	r2, #0
 8011d14:	03c9      	lsls	r1, r1, #15
 8011d16:	0020      	movs	r0, r4
 8011d18:	f7ff ff2c 	bl	8011b74 <UART_WaitOnFlagUntilTimeout>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d0e7      	beq.n	8011cf0 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8011d20:	2003      	movs	r0, #3
 8011d22:	e7ec      	b.n	8011cfe <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011d24:	23fa      	movs	r3, #250	; 0xfa
 8011d26:	2180      	movs	r1, #128	; 0x80
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	0389      	lsls	r1, r1, #14
 8011d2e:	0020      	movs	r0, r4
 8011d30:	f7ff ff20 	bl	8011b74 <UART_WaitOnFlagUntilTimeout>
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d1f3      	bne.n	8011d20 <UART_CheckIdleState+0x4c>
 8011d38:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	075b      	lsls	r3, r3, #29
 8011d3e:	d5d7      	bpl.n	8011cf0 <UART_CheckIdleState+0x1c>
 8011d40:	e7e4      	b.n	8011d0c <UART_CheckIdleState+0x38>
 8011d42:	46c0      	nop			; (mov r8, r8)
 8011d44:	40013800 	.word	0x40013800
 8011d48:	40004400 	.word	0x40004400
 8011d4c:	40004800 	.word	0x40004800

08011d50 <HAL_UART_Init>:
{
 8011d50:	b510      	push	{r4, lr}
 8011d52:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011d54:	d02a      	beq.n	8011dac <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8011d56:	2369      	movs	r3, #105	; 0x69
 8011d58:	5cc3      	ldrb	r3, [r0, r3]
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d020      	beq.n	8011da2 <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8011d60:	2369      	movs	r3, #105	; 0x69
 8011d62:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8011d64:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8011d66:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8011d68:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d6a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8011d6c:	6813      	ldr	r3, [r2, #0]
 8011d6e:	438b      	bics	r3, r1
 8011d70:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d72:	f7ff fdab 	bl	80118cc <UART_SetConfig>
 8011d76:	2801      	cmp	r0, #1
 8011d78:	d018      	beq.n	8011dac <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d117      	bne.n	8011db0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011d80:	6823      	ldr	r3, [r4, #0]
 8011d82:	490d      	ldr	r1, [pc, #52]	; (8011db8 <HAL_UART_Init+0x68>)
 8011d84:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8011d86:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011d88:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011d8a:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011d8c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011d8e:	689a      	ldr	r2, [r3, #8]
 8011d90:	438a      	bics	r2, r1
 8011d92:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	3929      	subs	r1, #41	; 0x29
 8011d98:	430a      	orrs	r2, r1
 8011d9a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011d9c:	f7ff ff9a 	bl	8011cd4 <UART_CheckIdleState>
}
 8011da0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011da2:	2268      	movs	r2, #104	; 0x68
 8011da4:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8011da6:	f7fa feb1 	bl	800cb0c <HAL_UART_MspInit>
 8011daa:	e7d9      	b.n	8011d60 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8011dac:	2001      	movs	r0, #1
 8011dae:	e7f7      	b.n	8011da0 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8011db0:	0020      	movs	r0, r4
 8011db2:	f7ff fe77 	bl	8011aa4 <UART_AdvFeatureConfig>
 8011db6:	e7e3      	b.n	8011d80 <HAL_UART_Init+0x30>
 8011db8:	ffffb7ff 	.word	0xffffb7ff

08011dbc <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dbc:	2269      	movs	r2, #105	; 0x69
{
 8011dbe:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dc0:	5c81      	ldrb	r1, [r0, r2]
{
 8011dc2:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dc4:	2912      	cmp	r1, #18
 8011dc6:	d003      	beq.n	8011dd0 <UART_Transmit_IT+0x14>
 8011dc8:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8011dca:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011dcc:	2a32      	cmp	r2, #50	; 0x32
 8011dce:	d112      	bne.n	8011df6 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8011dd0:	2252      	movs	r2, #82	; 0x52
 8011dd2:	5a9a      	ldrh	r2, [r3, r2]
 8011dd4:	6819      	ldr	r1, [r3, #0]
 8011dd6:	2a00      	cmp	r2, #0
 8011dd8:	d00e      	beq.n	8011df8 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dda:	2480      	movs	r4, #128	; 0x80
 8011ddc:	689d      	ldr	r5, [r3, #8]
 8011dde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011de0:	0164      	lsls	r4, r4, #5
 8011de2:	42a5      	cmp	r5, r4
 8011de4:	d012      	beq.n	8011e0c <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8011de6:	1c44      	adds	r4, r0, #1
 8011de8:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011dea:	7800      	ldrb	r0, [r0, #0]
 8011dec:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8011dee:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8011df0:	2000      	movs	r0, #0
      huart->TxXferCount--;
 8011df2:	3a01      	subs	r2, #1
 8011df4:	525a      	strh	r2, [r3, r1]
  }
}
 8011df6:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011df8:	680b      	ldr	r3, [r1, #0]
 8011dfa:	3280      	adds	r2, #128	; 0x80
 8011dfc:	4393      	bics	r3, r2
 8011dfe:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e00:	680b      	ldr	r3, [r1, #0]
 8011e02:	3a40      	subs	r2, #64	; 0x40
 8011e04:	4313      	orrs	r3, r2
 8011e06:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8011e08:	2000      	movs	r0, #0
 8011e0a:	e7f4      	b.n	8011df6 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e0c:	691c      	ldr	r4, [r3, #16]
 8011e0e:	2c00      	cmp	r4, #0
 8011e10:	d1e9      	bne.n	8011de6 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011e12:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8011e14:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011e16:	05e4      	lsls	r4, r4, #23
 8011e18:	0de4      	lsrs	r4, r4, #23
 8011e1a:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011e1c:	64d8      	str	r0, [r3, #76]	; 0x4c
 8011e1e:	e7e6      	b.n	8011dee <UART_Transmit_IT+0x32>

08011e20 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e20:	2140      	movs	r1, #64	; 0x40
 8011e22:	6803      	ldr	r3, [r0, #0]
{
 8011e24:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	438a      	bics	r2, r1
 8011e2a:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011e2c:	2269      	movs	r2, #105	; 0x69
 8011e2e:	5c81      	ldrb	r1, [r0, r2]
 8011e30:	2932      	cmp	r1, #50	; 0x32
 8011e32:	d008      	beq.n	8011e46 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011e34:	2401      	movs	r4, #1
 8011e36:	6899      	ldr	r1, [r3, #8]
 8011e38:	43a1      	bics	r1, r4
 8011e3a:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8011e3c:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8011e3e:	f7fa fa73 	bl	800c328 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8011e42:	2000      	movs	r0, #0
 8011e44:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011e46:	2322      	movs	r3, #34	; 0x22
 8011e48:	5483      	strb	r3, [r0, r2]
 8011e4a:	e7f8      	b.n	8011e3e <UART_EndTransmit_IT+0x1e>

08011e4c <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011e4c:	2369      	movs	r3, #105	; 0x69
{
 8011e4e:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011e50:	5cc2      	ldrb	r2, [r0, r3]
 8011e52:	2a22      	cmp	r2, #34	; 0x22
 8011e54:	d003      	beq.n	8011e5e <UART_Receive_IT+0x12>
 8011e56:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e58:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011e5a:	2b32      	cmp	r3, #50	; 0x32
 8011e5c:	d12b      	bne.n	8011eb6 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 8011e5e:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e60:	2180      	movs	r1, #128	; 0x80
 8011e62:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8011e64:	5ac3      	ldrh	r3, [r0, r3]
 8011e66:	6804      	ldr	r4, [r0, #0]
 8011e68:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e6a:	0149      	lsls	r1, r1, #5
 8011e6c:	428d      	cmp	r5, r1
 8011e6e:	d024      	beq.n	8011eba <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011e70:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011e72:	1c54      	adds	r4, r2, #1
 8011e74:	400b      	ands	r3, r1
 8011e76:	6544      	str	r4, [r0, #84]	; 0x54
 8011e78:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8011e7a:	225a      	movs	r2, #90	; 0x5a
 8011e7c:	5a83      	ldrh	r3, [r0, r2]
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8011e84:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d115      	bne.n	8011eb6 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011e8a:	2120      	movs	r1, #32
 8011e8c:	6803      	ldr	r3, [r0, #0]
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	438a      	bics	r2, r1
 8011e92:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011e94:	2269      	movs	r2, #105	; 0x69
 8011e96:	5c81      	ldrb	r1, [r0, r2]
 8011e98:	2932      	cmp	r1, #50	; 0x32
 8011e9a:	d017      	beq.n	8011ecc <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011e9c:	6819      	ldr	r1, [r3, #0]
 8011e9e:	4c0d      	ldr	r4, [pc, #52]	; (8011ed4 <UART_Receive_IT+0x88>)
 8011ea0:	4021      	ands	r1, r4
 8011ea2:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011ea4:	6899      	ldr	r1, [r3, #8]
 8011ea6:	3403      	adds	r4, #3
 8011ea8:	34ff      	adds	r4, #255	; 0xff
 8011eaa:	43a1      	bics	r1, r4
 8011eac:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 8011eae:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8011eb0:	f7fa fa7c 	bl	800c3ac <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011eb4:	2200      	movs	r2, #0
  }
}
 8011eb6:	0010      	movs	r0, r2
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011eba:	6901      	ldr	r1, [r0, #16]
 8011ebc:	2900      	cmp	r1, #0
 8011ebe:	d1d7      	bne.n	8011e70 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8011ec0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011ec2:	400b      	ands	r3, r1
 8011ec4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8011ec6:	3202      	adds	r2, #2
 8011ec8:	6542      	str	r2, [r0, #84]	; 0x54
 8011eca:	e7d6      	b.n	8011e7a <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011ecc:	2312      	movs	r3, #18
 8011ece:	5483      	strb	r3, [r0, r2]
 8011ed0:	e7ee      	b.n	8011eb0 <UART_Receive_IT+0x64>
 8011ed2:	46c0      	nop			; (mov r8, r8)
 8011ed4:	fffffeff 	.word	0xfffffeff

08011ed8 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011ed8:	4770      	bx	lr
 8011eda:	46c0      	nop			; (mov r8, r8)

08011edc <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011edc:	2201      	movs	r2, #1
 8011ede:	6803      	ldr	r3, [r0, #0]
{
 8011ee0:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011ee2:	69d9      	ldr	r1, [r3, #28]
{
 8011ee4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011ee6:	420a      	tst	r2, r1
 8011ee8:	d002      	beq.n	8011ef0 <HAL_UART_IRQHandler+0x14>
 8011eea:	6819      	ldr	r1, [r3, #0]
 8011eec:	05c9      	lsls	r1, r1, #23
 8011eee:	d456      	bmi.n	8011f9e <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011ef0:	2202      	movs	r2, #2
 8011ef2:	69d9      	ldr	r1, [r3, #28]
 8011ef4:	420a      	tst	r2, r1
 8011ef6:	d003      	beq.n	8011f00 <HAL_UART_IRQHandler+0x24>
 8011ef8:	2101      	movs	r1, #1
 8011efa:	6898      	ldr	r0, [r3, #8]
 8011efc:	4201      	tst	r1, r0
 8011efe:	d146      	bne.n	8011f8e <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011f00:	2204      	movs	r2, #4
 8011f02:	69d9      	ldr	r1, [r3, #28]
 8011f04:	420a      	tst	r2, r1
 8011f06:	d003      	beq.n	8011f10 <HAL_UART_IRQHandler+0x34>
 8011f08:	2101      	movs	r1, #1
 8011f0a:	6898      	ldr	r0, [r3, #8]
 8011f0c:	4201      	tst	r1, r0
 8011f0e:	d136      	bne.n	8011f7e <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011f10:	2208      	movs	r2, #8
 8011f12:	69d9      	ldr	r1, [r3, #28]
 8011f14:	420a      	tst	r2, r1
 8011f16:	d003      	beq.n	8011f20 <HAL_UART_IRQHandler+0x44>
 8011f18:	2101      	movs	r1, #1
 8011f1a:	6898      	ldr	r0, [r3, #8]
 8011f1c:	4201      	tst	r1, r0
 8011f1e:	d120      	bne.n	8011f62 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f20:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f22:	2a00      	cmp	r2, #0
 8011f24:	d126      	bne.n	8011f74 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8011f26:	2280      	movs	r2, #128	; 0x80
 8011f28:	69d9      	ldr	r1, [r3, #28]
 8011f2a:	0352      	lsls	r2, r2, #13
 8011f2c:	4211      	tst	r1, r2
 8011f2e:	d002      	beq.n	8011f36 <HAL_UART_IRQHandler+0x5a>
 8011f30:	6899      	ldr	r1, [r3, #8]
 8011f32:	0249      	lsls	r1, r1, #9
 8011f34:	d43e      	bmi.n	8011fb4 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011f36:	2220      	movs	r2, #32
 8011f38:	69d9      	ldr	r1, [r3, #28]
 8011f3a:	420a      	tst	r2, r1
 8011f3c:	d002      	beq.n	8011f44 <HAL_UART_IRQHandler+0x68>
 8011f3e:	6819      	ldr	r1, [r3, #0]
 8011f40:	420a      	tst	r2, r1
 8011f42:	d140      	bne.n	8011fc6 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011f44:	2280      	movs	r2, #128	; 0x80
 8011f46:	69d9      	ldr	r1, [r3, #28]
 8011f48:	420a      	tst	r2, r1
 8011f4a:	d002      	beq.n	8011f52 <HAL_UART_IRQHandler+0x76>
 8011f4c:	6819      	ldr	r1, [r3, #0]
 8011f4e:	420a      	tst	r2, r1
 8011f50:	d142      	bne.n	8011fd8 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011f52:	2240      	movs	r2, #64	; 0x40
 8011f54:	69d9      	ldr	r1, [r3, #28]
 8011f56:	420a      	tst	r2, r1
 8011f58:	d002      	beq.n	8011f60 <HAL_UART_IRQHandler+0x84>
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	421a      	tst	r2, r3
 8011f5e:	d125      	bne.n	8011fac <HAL_UART_IRQHandler+0xd0>
}
 8011f60:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011f62:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011f64:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011f66:	4302      	orrs	r2, r0
 8011f68:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011f6a:	2269      	movs	r2, #105	; 0x69
 8011f6c:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f6e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f70:	2a00      	cmp	r2, #0
 8011f72:	d0d8      	beq.n	8011f26 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8011f74:	0020      	movs	r0, r4
 8011f76:	f7fa f9f5 	bl	800c364 <HAL_UART_ErrorCallback>
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	e7d3      	b.n	8011f26 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f7e:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011f80:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f82:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f84:	4302      	orrs	r2, r0
 8011f86:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011f88:	2269      	movs	r2, #105	; 0x69
 8011f8a:	54a1      	strb	r1, [r4, r2]
 8011f8c:	e7c0      	b.n	8011f10 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f8e:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011f90:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f92:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011f94:	4302      	orrs	r2, r0
 8011f96:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011f98:	2269      	movs	r2, #105	; 0x69
 8011f9a:	54a1      	strb	r1, [r4, r2]
 8011f9c:	e7b0      	b.n	8011f00 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011f9e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011fa0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8011fa2:	4311      	orrs	r1, r2
 8011fa4:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011fa6:	2169      	movs	r1, #105	; 0x69
 8011fa8:	5442      	strb	r2, [r0, r1]
 8011faa:	e7a1      	b.n	8011ef0 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8011fac:	0020      	movs	r0, r4
 8011fae:	f7ff ff37 	bl	8011e20 <UART_EndTransmit_IT>
}
 8011fb2:	e7d5      	b.n	8011f60 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011fb4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8011fb6:	2369      	movs	r3, #105	; 0x69
 8011fb8:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8011fba:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8011fbc:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011fbe:	f7ff ff8b 	bl	8011ed8 <HAL_UARTEx_WakeupCallback>
 8011fc2:	6823      	ldr	r3, [r4, #0]
 8011fc4:	e7b7      	b.n	8011f36 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8011fc6:	0020      	movs	r0, r4
 8011fc8:	f7ff ff40 	bl	8011e4c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011fcc:	2108      	movs	r1, #8
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	699a      	ldr	r2, [r3, #24]
 8011fd2:	430a      	orrs	r2, r1
 8011fd4:	619a      	str	r2, [r3, #24]
 8011fd6:	e7b5      	b.n	8011f44 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8011fd8:	0020      	movs	r0, r4
 8011fda:	f7ff feef 	bl	8011dbc <UART_Transmit_IT>
 8011fde:	6823      	ldr	r3, [r4, #0]
 8011fe0:	e7b7      	b.n	8011f52 <HAL_UART_IRQHandler+0x76>
 8011fe2:	46c0      	nop			; (mov r8, r8)

08011fe4 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8011fe4:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8011fe6:	f7f1 fcab 	bl	8003940 <Module_Init>
 8011fea:	e7fe      	b.n	8011fea <main+0x6>

08011fec <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8011fec:	e7fe      	b.n	8011fec <UserTask>
 8011fee:	46c0      	nop			; (mov r8, r8)

08011ff0 <atof>:
 8011ff0:	b510      	push	{r4, lr}
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	f001 fb74 	bl	80136e0 <strtod>
 8011ff8:	bd10      	pop	{r4, pc}

08011ffa <atoi>:
 8011ffa:	b510      	push	{r4, lr}
 8011ffc:	220a      	movs	r2, #10
 8011ffe:	2100      	movs	r1, #0
 8012000:	f001 fc3a 	bl	8013878 <strtol>
 8012004:	bd10      	pop	{r4, pc}

08012006 <atol>:
 8012006:	b510      	push	{r4, lr}
 8012008:	220a      	movs	r2, #10
 801200a:	2100      	movs	r1, #0
 801200c:	f001 fc34 	bl	8013878 <strtol>
 8012010:	bd10      	pop	{r4, pc}
	...

08012014 <calloc>:
 8012014:	b510      	push	{r4, lr}
 8012016:	4b03      	ldr	r3, [pc, #12]	; (8012024 <calloc+0x10>)
 8012018:	000a      	movs	r2, r1
 801201a:	0001      	movs	r1, r0
 801201c:	6818      	ldr	r0, [r3, #0]
 801201e:	f000 f803 	bl	8012028 <_calloc_r>
 8012022:	bd10      	pop	{r4, pc}
 8012024:	200000cc 	.word	0x200000cc

08012028 <_calloc_r>:
 8012028:	b510      	push	{r4, lr}
 801202a:	4351      	muls	r1, r2
 801202c:	f000 f872 	bl	8012114 <_malloc_r>
 8012030:	1e04      	subs	r4, r0, #0
 8012032:	d01a      	beq.n	801206a <_calloc_r+0x42>
 8012034:	0003      	movs	r3, r0
 8012036:	3b08      	subs	r3, #8
 8012038:	685a      	ldr	r2, [r3, #4]
 801203a:	2303      	movs	r3, #3
 801203c:	439a      	bics	r2, r3
 801203e:	3a04      	subs	r2, #4
 8012040:	2a24      	cmp	r2, #36	; 0x24
 8012042:	d819      	bhi.n	8012078 <_calloc_r+0x50>
 8012044:	0003      	movs	r3, r0
 8012046:	2a13      	cmp	r2, #19
 8012048:	d90b      	bls.n	8012062 <_calloc_r+0x3a>
 801204a:	2100      	movs	r1, #0
 801204c:	3308      	adds	r3, #8
 801204e:	6001      	str	r1, [r0, #0]
 8012050:	6041      	str	r1, [r0, #4]
 8012052:	2a1b      	cmp	r2, #27
 8012054:	d905      	bls.n	8012062 <_calloc_r+0x3a>
 8012056:	6081      	str	r1, [r0, #8]
 8012058:	60c1      	str	r1, [r0, #12]
 801205a:	2a24      	cmp	r2, #36	; 0x24
 801205c:	d007      	beq.n	801206e <_calloc_r+0x46>
 801205e:	0003      	movs	r3, r0
 8012060:	3310      	adds	r3, #16
 8012062:	2200      	movs	r2, #0
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	605a      	str	r2, [r3, #4]
 8012068:	609a      	str	r2, [r3, #8]
 801206a:	0020      	movs	r0, r4
 801206c:	bd10      	pop	{r4, pc}
 801206e:	0003      	movs	r3, r0
 8012070:	6101      	str	r1, [r0, #16]
 8012072:	3318      	adds	r3, #24
 8012074:	6141      	str	r1, [r0, #20]
 8012076:	e7f4      	b.n	8012062 <_calloc_r+0x3a>
 8012078:	2100      	movs	r1, #0
 801207a:	f000 fa8d 	bl	8012598 <memset>
 801207e:	e7f4      	b.n	801206a <_calloc_r+0x42>

08012080 <__libc_init_array>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	2600      	movs	r6, #0
 8012084:	4d0c      	ldr	r5, [pc, #48]	; (80120b8 <__libc_init_array+0x38>)
 8012086:	4c0d      	ldr	r4, [pc, #52]	; (80120bc <__libc_init_array+0x3c>)
 8012088:	1b64      	subs	r4, r4, r5
 801208a:	10a4      	asrs	r4, r4, #2
 801208c:	42a6      	cmp	r6, r4
 801208e:	d109      	bne.n	80120a4 <__libc_init_array+0x24>
 8012090:	2600      	movs	r6, #0
 8012092:	f004 fe41 	bl	8016d18 <_init>
 8012096:	4d0a      	ldr	r5, [pc, #40]	; (80120c0 <__libc_init_array+0x40>)
 8012098:	4c0a      	ldr	r4, [pc, #40]	; (80120c4 <__libc_init_array+0x44>)
 801209a:	1b64      	subs	r4, r4, r5
 801209c:	10a4      	asrs	r4, r4, #2
 801209e:	42a6      	cmp	r6, r4
 80120a0:	d105      	bne.n	80120ae <__libc_init_array+0x2e>
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	00b3      	lsls	r3, r6, #2
 80120a6:	58eb      	ldr	r3, [r5, r3]
 80120a8:	4798      	blx	r3
 80120aa:	3601      	adds	r6, #1
 80120ac:	e7ee      	b.n	801208c <__libc_init_array+0xc>
 80120ae:	00b3      	lsls	r3, r6, #2
 80120b0:	58eb      	ldr	r3, [r5, r3]
 80120b2:	4798      	blx	r3
 80120b4:	3601      	adds	r6, #1
 80120b6:	e7f2      	b.n	801209e <__libc_init_array+0x1e>
 80120b8:	08019eb4 	.word	0x08019eb4
 80120bc:	08019eb4 	.word	0x08019eb4
 80120c0:	08019eb4 	.word	0x08019eb4
 80120c4:	08019ebc 	.word	0x08019ebc

080120c8 <__locale_ctype_ptr_l>:
 80120c8:	30ec      	adds	r0, #236	; 0xec
 80120ca:	6800      	ldr	r0, [r0, #0]
 80120cc:	4770      	bx	lr
	...

080120d0 <__locale_ctype_ptr>:
 80120d0:	4b04      	ldr	r3, [pc, #16]	; (80120e4 <__locale_ctype_ptr+0x14>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d100      	bne.n	80120dc <__locale_ctype_ptr+0xc>
 80120da:	4b03      	ldr	r3, [pc, #12]	; (80120e8 <__locale_ctype_ptr+0x18>)
 80120dc:	33ec      	adds	r3, #236	; 0xec
 80120de:	6818      	ldr	r0, [r3, #0]
 80120e0:	4770      	bx	lr
 80120e2:	46c0      	nop			; (mov r8, r8)
 80120e4:	200000cc 	.word	0x200000cc
 80120e8:	200004f8 	.word	0x200004f8

080120ec <malloc>:
 80120ec:	b510      	push	{r4, lr}
 80120ee:	4b03      	ldr	r3, [pc, #12]	; (80120fc <malloc+0x10>)
 80120f0:	0001      	movs	r1, r0
 80120f2:	6818      	ldr	r0, [r3, #0]
 80120f4:	f000 f80e 	bl	8012114 <_malloc_r>
 80120f8:	bd10      	pop	{r4, pc}
 80120fa:	46c0      	nop			; (mov r8, r8)
 80120fc:	200000cc 	.word	0x200000cc

08012100 <free>:
 8012100:	b510      	push	{r4, lr}
 8012102:	4b03      	ldr	r3, [pc, #12]	; (8012110 <free+0x10>)
 8012104:	0001      	movs	r1, r0
 8012106:	6818      	ldr	r0, [r3, #0]
 8012108:	f003 fd10 	bl	8015b2c <_free_r>
 801210c:	bd10      	pop	{r4, pc}
 801210e:	46c0      	nop			; (mov r8, r8)
 8012110:	200000cc 	.word	0x200000cc

08012114 <_malloc_r>:
 8012114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012116:	000d      	movs	r5, r1
 8012118:	b085      	sub	sp, #20
 801211a:	350b      	adds	r5, #11
 801211c:	9001      	str	r0, [sp, #4]
 801211e:	2d16      	cmp	r5, #22
 8012120:	d908      	bls.n	8012134 <_malloc_r+0x20>
 8012122:	2307      	movs	r3, #7
 8012124:	439d      	bics	r5, r3
 8012126:	d506      	bpl.n	8012136 <_malloc_r+0x22>
 8012128:	230c      	movs	r3, #12
 801212a:	9a01      	ldr	r2, [sp, #4]
 801212c:	6013      	str	r3, [r2, #0]
 801212e:	2000      	movs	r0, #0
 8012130:	b005      	add	sp, #20
 8012132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012134:	2510      	movs	r5, #16
 8012136:	428d      	cmp	r5, r1
 8012138:	d3f6      	bcc.n	8012128 <_malloc_r+0x14>
 801213a:	9801      	ldr	r0, [sp, #4]
 801213c:	f000 fa34 	bl	80125a8 <__malloc_lock>
 8012140:	23f8      	movs	r3, #248	; 0xf8
 8012142:	33ff      	adds	r3, #255	; 0xff
 8012144:	4ac4      	ldr	r2, [pc, #784]	; (8012458 <_malloc_r+0x344>)
 8012146:	429d      	cmp	r5, r3
 8012148:	d820      	bhi.n	801218c <_malloc_r+0x78>
 801214a:	0029      	movs	r1, r5
 801214c:	3108      	adds	r1, #8
 801214e:	1851      	adds	r1, r2, r1
 8012150:	0008      	movs	r0, r1
 8012152:	684c      	ldr	r4, [r1, #4]
 8012154:	3808      	subs	r0, #8
 8012156:	08eb      	lsrs	r3, r5, #3
 8012158:	4284      	cmp	r4, r0
 801215a:	d104      	bne.n	8012166 <_malloc_r+0x52>
 801215c:	68cc      	ldr	r4, [r1, #12]
 801215e:	3302      	adds	r3, #2
 8012160:	469c      	mov	ip, r3
 8012162:	42a1      	cmp	r1, r4
 8012164:	d02a      	beq.n	80121bc <_malloc_r+0xa8>
 8012166:	2303      	movs	r3, #3
 8012168:	6862      	ldr	r2, [r4, #4]
 801216a:	68a1      	ldr	r1, [r4, #8]
 801216c:	439a      	bics	r2, r3
 801216e:	0013      	movs	r3, r2
 8012170:	68e2      	ldr	r2, [r4, #12]
 8012172:	18e3      	adds	r3, r4, r3
 8012174:	60ca      	str	r2, [r1, #12]
 8012176:	6091      	str	r1, [r2, #8]
 8012178:	2201      	movs	r2, #1
 801217a:	6859      	ldr	r1, [r3, #4]
 801217c:	430a      	orrs	r2, r1
 801217e:	605a      	str	r2, [r3, #4]
 8012180:	9801      	ldr	r0, [sp, #4]
 8012182:	f000 fa19 	bl	80125b8 <__malloc_unlock>
 8012186:	0020      	movs	r0, r4
 8012188:	3008      	adds	r0, #8
 801218a:	e7d1      	b.n	8012130 <_malloc_r+0x1c>
 801218c:	0a69      	lsrs	r1, r5, #9
 801218e:	233f      	movs	r3, #63	; 0x3f
 8012190:	2900      	cmp	r1, #0
 8012192:	d003      	beq.n	801219c <_malloc_r+0x88>
 8012194:	2904      	cmp	r1, #4
 8012196:	d828      	bhi.n	80121ea <_malloc_r+0xd6>
 8012198:	09ab      	lsrs	r3, r5, #6
 801219a:	3338      	adds	r3, #56	; 0x38
 801219c:	2103      	movs	r1, #3
 801219e:	468c      	mov	ip, r1
 80121a0:	00d8      	lsls	r0, r3, #3
 80121a2:	1880      	adds	r0, r0, r2
 80121a4:	68c4      	ldr	r4, [r0, #12]
 80121a6:	4284      	cmp	r4, r0
 80121a8:	d006      	beq.n	80121b8 <_malloc_r+0xa4>
 80121aa:	4666      	mov	r6, ip
 80121ac:	6861      	ldr	r1, [r4, #4]
 80121ae:	43b1      	bics	r1, r6
 80121b0:	1b4f      	subs	r7, r1, r5
 80121b2:	2f0f      	cmp	r7, #15
 80121b4:	dd31      	ble.n	801221a <_malloc_r+0x106>
 80121b6:	3b01      	subs	r3, #1
 80121b8:	3301      	adds	r3, #1
 80121ba:	469c      	mov	ip, r3
 80121bc:	6914      	ldr	r4, [r2, #16]
 80121be:	49a7      	ldr	r1, [pc, #668]	; (801245c <_malloc_r+0x348>)
 80121c0:	428c      	cmp	r4, r1
 80121c2:	d055      	beq.n	8012270 <_malloc_r+0x15c>
 80121c4:	2303      	movs	r3, #3
 80121c6:	6860      	ldr	r0, [r4, #4]
 80121c8:	4398      	bics	r0, r3
 80121ca:	0003      	movs	r3, r0
 80121cc:	1b46      	subs	r6, r0, r5
 80121ce:	2e0f      	cmp	r6, #15
 80121d0:	dd31      	ble.n	8012236 <_malloc_r+0x122>
 80121d2:	2701      	movs	r7, #1
 80121d4:	1960      	adds	r0, r4, r5
 80121d6:	433d      	orrs	r5, r7
 80121d8:	4337      	orrs	r7, r6
 80121da:	6065      	str	r5, [r4, #4]
 80121dc:	6150      	str	r0, [r2, #20]
 80121de:	6110      	str	r0, [r2, #16]
 80121e0:	60c1      	str	r1, [r0, #12]
 80121e2:	6081      	str	r1, [r0, #8]
 80121e4:	6047      	str	r7, [r0, #4]
 80121e6:	50e6      	str	r6, [r4, r3]
 80121e8:	e7ca      	b.n	8012180 <_malloc_r+0x6c>
 80121ea:	2914      	cmp	r1, #20
 80121ec:	d802      	bhi.n	80121f4 <_malloc_r+0xe0>
 80121ee:	000b      	movs	r3, r1
 80121f0:	335b      	adds	r3, #91	; 0x5b
 80121f2:	e7d3      	b.n	801219c <_malloc_r+0x88>
 80121f4:	2954      	cmp	r1, #84	; 0x54
 80121f6:	d802      	bhi.n	80121fe <_malloc_r+0xea>
 80121f8:	0b2b      	lsrs	r3, r5, #12
 80121fa:	336e      	adds	r3, #110	; 0x6e
 80121fc:	e7ce      	b.n	801219c <_malloc_r+0x88>
 80121fe:	23aa      	movs	r3, #170	; 0xaa
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	4299      	cmp	r1, r3
 8012204:	d802      	bhi.n	801220c <_malloc_r+0xf8>
 8012206:	0beb      	lsrs	r3, r5, #15
 8012208:	3377      	adds	r3, #119	; 0x77
 801220a:	e7c7      	b.n	801219c <_malloc_r+0x88>
 801220c:	4894      	ldr	r0, [pc, #592]	; (8012460 <_malloc_r+0x34c>)
 801220e:	237e      	movs	r3, #126	; 0x7e
 8012210:	4281      	cmp	r1, r0
 8012212:	d8c3      	bhi.n	801219c <_malloc_r+0x88>
 8012214:	0cab      	lsrs	r3, r5, #18
 8012216:	337c      	adds	r3, #124	; 0x7c
 8012218:	e7c0      	b.n	801219c <_malloc_r+0x88>
 801221a:	68e6      	ldr	r6, [r4, #12]
 801221c:	2f00      	cmp	r7, #0
 801221e:	db08      	blt.n	8012232 <_malloc_r+0x11e>
 8012220:	68a3      	ldr	r3, [r4, #8]
 8012222:	1861      	adds	r1, r4, r1
 8012224:	60de      	str	r6, [r3, #12]
 8012226:	60b3      	str	r3, [r6, #8]
 8012228:	2301      	movs	r3, #1
 801222a:	684a      	ldr	r2, [r1, #4]
 801222c:	4313      	orrs	r3, r2
 801222e:	604b      	str	r3, [r1, #4]
 8012230:	e7a6      	b.n	8012180 <_malloc_r+0x6c>
 8012232:	0034      	movs	r4, r6
 8012234:	e7b7      	b.n	80121a6 <_malloc_r+0x92>
 8012236:	6151      	str	r1, [r2, #20]
 8012238:	6111      	str	r1, [r2, #16]
 801223a:	2e00      	cmp	r6, #0
 801223c:	db05      	blt.n	801224a <_malloc_r+0x136>
 801223e:	2101      	movs	r1, #1
 8012240:	1823      	adds	r3, r4, r0
 8012242:	685a      	ldr	r2, [r3, #4]
 8012244:	4311      	orrs	r1, r2
 8012246:	6059      	str	r1, [r3, #4]
 8012248:	e79a      	b.n	8012180 <_malloc_r+0x6c>
 801224a:	4986      	ldr	r1, [pc, #536]	; (8012464 <_malloc_r+0x350>)
 801224c:	6857      	ldr	r7, [r2, #4]
 801224e:	4288      	cmp	r0, r1
 8012250:	d900      	bls.n	8012254 <_malloc_r+0x140>
 8012252:	e090      	b.n	8012376 <_malloc_r+0x262>
 8012254:	08c3      	lsrs	r3, r0, #3
 8012256:	39ff      	subs	r1, #255	; 0xff
 8012258:	1098      	asrs	r0, r3, #2
 801225a:	39ff      	subs	r1, #255	; 0xff
 801225c:	4081      	lsls	r1, r0
 801225e:	00db      	lsls	r3, r3, #3
 8012260:	4339      	orrs	r1, r7
 8012262:	6051      	str	r1, [r2, #4]
 8012264:	189a      	adds	r2, r3, r2
 8012266:	6893      	ldr	r3, [r2, #8]
 8012268:	60e2      	str	r2, [r4, #12]
 801226a:	60a3      	str	r3, [r4, #8]
 801226c:	6094      	str	r4, [r2, #8]
 801226e:	60dc      	str	r4, [r3, #12]
 8012270:	4663      	mov	r3, ip
 8012272:	2201      	movs	r2, #1
 8012274:	4978      	ldr	r1, [pc, #480]	; (8012458 <_malloc_r+0x344>)
 8012276:	109b      	asrs	r3, r3, #2
 8012278:	6848      	ldr	r0, [r1, #4]
 801227a:	409a      	lsls	r2, r3
 801227c:	4290      	cmp	r0, r2
 801227e:	d32d      	bcc.n	80122dc <_malloc_r+0x1c8>
 8012280:	4202      	tst	r2, r0
 8012282:	d109      	bne.n	8012298 <_malloc_r+0x184>
 8012284:	2303      	movs	r3, #3
 8012286:	4664      	mov	r4, ip
 8012288:	439c      	bics	r4, r3
 801228a:	0023      	movs	r3, r4
 801228c:	3304      	adds	r3, #4
 801228e:	469c      	mov	ip, r3
 8012290:	0052      	lsls	r2, r2, #1
 8012292:	4202      	tst	r2, r0
 8012294:	d100      	bne.n	8012298 <_malloc_r+0x184>
 8012296:	e0a4      	b.n	80123e2 <_malloc_r+0x2ce>
 8012298:	4663      	mov	r3, ip
 801229a:	00db      	lsls	r3, r3, #3
 801229c:	18cb      	adds	r3, r1, r3
 801229e:	9303      	str	r3, [sp, #12]
 80122a0:	001f      	movs	r7, r3
 80122a2:	4663      	mov	r3, ip
 80122a4:	9302      	str	r3, [sp, #8]
 80122a6:	68fc      	ldr	r4, [r7, #12]
 80122a8:	42bc      	cmp	r4, r7
 80122aa:	d000      	beq.n	80122ae <_malloc_r+0x19a>
 80122ac:	e09c      	b.n	80123e8 <_malloc_r+0x2d4>
 80122ae:	2003      	movs	r0, #3
 80122b0:	9b02      	ldr	r3, [sp, #8]
 80122b2:	3708      	adds	r7, #8
 80122b4:	3301      	adds	r3, #1
 80122b6:	9302      	str	r3, [sp, #8]
 80122b8:	4203      	tst	r3, r0
 80122ba:	d1f4      	bne.n	80122a6 <_malloc_r+0x192>
 80122bc:	4663      	mov	r3, ip
 80122be:	2003      	movs	r0, #3
 80122c0:	4203      	tst	r3, r0
 80122c2:	d000      	beq.n	80122c6 <_malloc_r+0x1b2>
 80122c4:	e0b3      	b.n	801242e <_malloc_r+0x31a>
 80122c6:	684b      	ldr	r3, [r1, #4]
 80122c8:	4393      	bics	r3, r2
 80122ca:	604b      	str	r3, [r1, #4]
 80122cc:	4b62      	ldr	r3, [pc, #392]	; (8012458 <_malloc_r+0x344>)
 80122ce:	0052      	lsls	r2, r2, #1
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d302      	bcc.n	80122dc <_malloc_r+0x1c8>
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	d000      	beq.n	80122dc <_malloc_r+0x1c8>
 80122da:	e0b9      	b.n	8012450 <_malloc_r+0x33c>
 80122dc:	2303      	movs	r3, #3
 80122de:	688f      	ldr	r7, [r1, #8]
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	439a      	bics	r2, r3
 80122e4:	9202      	str	r2, [sp, #8]
 80122e6:	42aa      	cmp	r2, r5
 80122e8:	d303      	bcc.n	80122f2 <_malloc_r+0x1de>
 80122ea:	1b52      	subs	r2, r2, r5
 80122ec:	2a0f      	cmp	r2, #15
 80122ee:	dd00      	ble.n	80122f2 <_malloc_r+0x1de>
 80122f0:	e116      	b.n	8012520 <_malloc_r+0x40c>
 80122f2:	4b5d      	ldr	r3, [pc, #372]	; (8012468 <_malloc_r+0x354>)
 80122f4:	2008      	movs	r0, #8
 80122f6:	681e      	ldr	r6, [r3, #0]
 80122f8:	f002 fd26 	bl	8014d48 <sysconf>
 80122fc:	4b5b      	ldr	r3, [pc, #364]	; (801246c <_malloc_r+0x358>)
 80122fe:	3610      	adds	r6, #16
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	1976      	adds	r6, r6, r5
 8012304:	9003      	str	r0, [sp, #12]
 8012306:	3301      	adds	r3, #1
 8012308:	d003      	beq.n	8012312 <_malloc_r+0x1fe>
 801230a:	3e01      	subs	r6, #1
 801230c:	1836      	adds	r6, r6, r0
 801230e:	4243      	negs	r3, r0
 8012310:	401e      	ands	r6, r3
 8012312:	0031      	movs	r1, r6
 8012314:	9801      	ldr	r0, [sp, #4]
 8012316:	f000 fb27 	bl	8012968 <_sbrk_r>
 801231a:	0004      	movs	r4, r0
 801231c:	1c43      	adds	r3, r0, #1
 801231e:	d100      	bne.n	8012322 <_malloc_r+0x20e>
 8012320:	e0d6      	b.n	80124d0 <_malloc_r+0x3bc>
 8012322:	9b02      	ldr	r3, [sp, #8]
 8012324:	18fb      	adds	r3, r7, r3
 8012326:	4283      	cmp	r3, r0
 8012328:	d903      	bls.n	8012332 <_malloc_r+0x21e>
 801232a:	4a4b      	ldr	r2, [pc, #300]	; (8012458 <_malloc_r+0x344>)
 801232c:	4297      	cmp	r7, r2
 801232e:	d000      	beq.n	8012332 <_malloc_r+0x21e>
 8012330:	e0ce      	b.n	80124d0 <_malloc_r+0x3bc>
 8012332:	494f      	ldr	r1, [pc, #316]	; (8012470 <_malloc_r+0x35c>)
 8012334:	680a      	ldr	r2, [r1, #0]
 8012336:	18b2      	adds	r2, r6, r2
 8012338:	600a      	str	r2, [r1, #0]
 801233a:	9903      	ldr	r1, [sp, #12]
 801233c:	4694      	mov	ip, r2
 801233e:	1e48      	subs	r0, r1, #1
 8012340:	42a3      	cmp	r3, r4
 8012342:	d000      	beq.n	8012346 <_malloc_r+0x232>
 8012344:	e09a      	b.n	801247c <_malloc_r+0x368>
 8012346:	4203      	tst	r3, r0
 8012348:	d000      	beq.n	801234c <_malloc_r+0x238>
 801234a:	e097      	b.n	801247c <_malloc_r+0x368>
 801234c:	9a02      	ldr	r2, [sp, #8]
 801234e:	4b42      	ldr	r3, [pc, #264]	; (8012458 <_malloc_r+0x344>)
 8012350:	1992      	adds	r2, r2, r6
 8012352:	2601      	movs	r6, #1
 8012354:	689b      	ldr	r3, [r3, #8]
 8012356:	4316      	orrs	r6, r2
 8012358:	605e      	str	r6, [r3, #4]
 801235a:	4b45      	ldr	r3, [pc, #276]	; (8012470 <_malloc_r+0x35c>)
 801235c:	4a45      	ldr	r2, [pc, #276]	; (8012474 <_malloc_r+0x360>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	6811      	ldr	r1, [r2, #0]
 8012362:	428b      	cmp	r3, r1
 8012364:	d900      	bls.n	8012368 <_malloc_r+0x254>
 8012366:	6013      	str	r3, [r2, #0]
 8012368:	4a43      	ldr	r2, [pc, #268]	; (8012478 <_malloc_r+0x364>)
 801236a:	6811      	ldr	r1, [r2, #0]
 801236c:	428b      	cmp	r3, r1
 801236e:	d800      	bhi.n	8012372 <_malloc_r+0x25e>
 8012370:	e0ae      	b.n	80124d0 <_malloc_r+0x3bc>
 8012372:	6013      	str	r3, [r2, #0]
 8012374:	e0ac      	b.n	80124d0 <_malloc_r+0x3bc>
 8012376:	0a40      	lsrs	r0, r0, #9
 8012378:	2804      	cmp	r0, #4
 801237a:	d810      	bhi.n	801239e <_malloc_r+0x28a>
 801237c:	0999      	lsrs	r1, r3, #6
 801237e:	3138      	adds	r1, #56	; 0x38
 8012380:	00ce      	lsls	r6, r1, #3
 8012382:	18b6      	adds	r6, r6, r2
 8012384:	68b0      	ldr	r0, [r6, #8]
 8012386:	4286      	cmp	r6, r0
 8012388:	d124      	bne.n	80123d4 <_malloc_r+0x2c0>
 801238a:	2301      	movs	r3, #1
 801238c:	1089      	asrs	r1, r1, #2
 801238e:	408b      	lsls	r3, r1
 8012390:	433b      	orrs	r3, r7
 8012392:	6053      	str	r3, [r2, #4]
 8012394:	60e6      	str	r6, [r4, #12]
 8012396:	60a0      	str	r0, [r4, #8]
 8012398:	60b4      	str	r4, [r6, #8]
 801239a:	60c4      	str	r4, [r0, #12]
 801239c:	e768      	b.n	8012270 <_malloc_r+0x15c>
 801239e:	2814      	cmp	r0, #20
 80123a0:	d802      	bhi.n	80123a8 <_malloc_r+0x294>
 80123a2:	0001      	movs	r1, r0
 80123a4:	315b      	adds	r1, #91	; 0x5b
 80123a6:	e7eb      	b.n	8012380 <_malloc_r+0x26c>
 80123a8:	2854      	cmp	r0, #84	; 0x54
 80123aa:	d802      	bhi.n	80123b2 <_malloc_r+0x29e>
 80123ac:	0b19      	lsrs	r1, r3, #12
 80123ae:	316e      	adds	r1, #110	; 0x6e
 80123b0:	e7e6      	b.n	8012380 <_malloc_r+0x26c>
 80123b2:	21aa      	movs	r1, #170	; 0xaa
 80123b4:	0049      	lsls	r1, r1, #1
 80123b6:	4288      	cmp	r0, r1
 80123b8:	d802      	bhi.n	80123c0 <_malloc_r+0x2ac>
 80123ba:	0bd9      	lsrs	r1, r3, #15
 80123bc:	3177      	adds	r1, #119	; 0x77
 80123be:	e7df      	b.n	8012380 <_malloc_r+0x26c>
 80123c0:	4e27      	ldr	r6, [pc, #156]	; (8012460 <_malloc_r+0x34c>)
 80123c2:	217e      	movs	r1, #126	; 0x7e
 80123c4:	42b0      	cmp	r0, r6
 80123c6:	d8db      	bhi.n	8012380 <_malloc_r+0x26c>
 80123c8:	0c99      	lsrs	r1, r3, #18
 80123ca:	317c      	adds	r1, #124	; 0x7c
 80123cc:	e7d8      	b.n	8012380 <_malloc_r+0x26c>
 80123ce:	6880      	ldr	r0, [r0, #8]
 80123d0:	4286      	cmp	r6, r0
 80123d2:	d004      	beq.n	80123de <_malloc_r+0x2ca>
 80123d4:	2103      	movs	r1, #3
 80123d6:	6842      	ldr	r2, [r0, #4]
 80123d8:	438a      	bics	r2, r1
 80123da:	429a      	cmp	r2, r3
 80123dc:	d8f7      	bhi.n	80123ce <_malloc_r+0x2ba>
 80123de:	68c6      	ldr	r6, [r0, #12]
 80123e0:	e7d8      	b.n	8012394 <_malloc_r+0x280>
 80123e2:	2304      	movs	r3, #4
 80123e4:	449c      	add	ip, r3
 80123e6:	e753      	b.n	8012290 <_malloc_r+0x17c>
 80123e8:	2003      	movs	r0, #3
 80123ea:	6863      	ldr	r3, [r4, #4]
 80123ec:	4383      	bics	r3, r0
 80123ee:	1b5e      	subs	r6, r3, r5
 80123f0:	68e0      	ldr	r0, [r4, #12]
 80123f2:	2e0f      	cmp	r6, #15
 80123f4:	dd0e      	ble.n	8012414 <_malloc_r+0x300>
 80123f6:	2701      	movs	r7, #1
 80123f8:	1962      	adds	r2, r4, r5
 80123fa:	433d      	orrs	r5, r7
 80123fc:	6065      	str	r5, [r4, #4]
 80123fe:	68a5      	ldr	r5, [r4, #8]
 8012400:	4337      	orrs	r7, r6
 8012402:	60e8      	str	r0, [r5, #12]
 8012404:	6085      	str	r5, [r0, #8]
 8012406:	614a      	str	r2, [r1, #20]
 8012408:	610a      	str	r2, [r1, #16]
 801240a:	4914      	ldr	r1, [pc, #80]	; (801245c <_malloc_r+0x348>)
 801240c:	6057      	str	r7, [r2, #4]
 801240e:	60d1      	str	r1, [r2, #12]
 8012410:	6091      	str	r1, [r2, #8]
 8012412:	e6e8      	b.n	80121e6 <_malloc_r+0xd2>
 8012414:	2e00      	cmp	r6, #0
 8012416:	db08      	blt.n	801242a <_malloc_r+0x316>
 8012418:	2201      	movs	r2, #1
 801241a:	18e3      	adds	r3, r4, r3
 801241c:	6859      	ldr	r1, [r3, #4]
 801241e:	430a      	orrs	r2, r1
 8012420:	605a      	str	r2, [r3, #4]
 8012422:	68a3      	ldr	r3, [r4, #8]
 8012424:	60d8      	str	r0, [r3, #12]
 8012426:	6083      	str	r3, [r0, #8]
 8012428:	e6aa      	b.n	8012180 <_malloc_r+0x6c>
 801242a:	0004      	movs	r4, r0
 801242c:	e73c      	b.n	80122a8 <_malloc_r+0x194>
 801242e:	2301      	movs	r3, #1
 8012430:	425b      	negs	r3, r3
 8012432:	449c      	add	ip, r3
 8012434:	9b03      	ldr	r3, [sp, #12]
 8012436:	6818      	ldr	r0, [r3, #0]
 8012438:	3b08      	subs	r3, #8
 801243a:	9003      	str	r0, [sp, #12]
 801243c:	4298      	cmp	r0, r3
 801243e:	d100      	bne.n	8012442 <_malloc_r+0x32e>
 8012440:	e73c      	b.n	80122bc <_malloc_r+0x1a8>
 8012442:	e743      	b.n	80122cc <_malloc_r+0x1b8>
 8012444:	2004      	movs	r0, #4
 8012446:	0052      	lsls	r2, r2, #1
 8012448:	4484      	add	ip, r0
 801244a:	421a      	tst	r2, r3
 801244c:	d0fa      	beq.n	8012444 <_malloc_r+0x330>
 801244e:	e723      	b.n	8012298 <_malloc_r+0x184>
 8012450:	9802      	ldr	r0, [sp, #8]
 8012452:	4684      	mov	ip, r0
 8012454:	e7f9      	b.n	801244a <_malloc_r+0x336>
 8012456:	46c0      	nop			; (mov r8, r8)
 8012458:	20000664 	.word	0x20000664
 801245c:	2000066c 	.word	0x2000066c
 8012460:	00000554 	.word	0x00000554
 8012464:	000001ff 	.word	0x000001ff
 8012468:	20006bf4 	.word	0x20006bf4
 801246c:	20000a6c 	.word	0x20000a6c
 8012470:	20006bc4 	.word	0x20006bc4
 8012474:	20006bec 	.word	0x20006bec
 8012478:	20006bf0 	.word	0x20006bf0
 801247c:	492e      	ldr	r1, [pc, #184]	; (8012538 <_malloc_r+0x424>)
 801247e:	680a      	ldr	r2, [r1, #0]
 8012480:	3201      	adds	r2, #1
 8012482:	d133      	bne.n	80124ec <_malloc_r+0x3d8>
 8012484:	600c      	str	r4, [r1, #0]
 8012486:	2307      	movs	r3, #7
 8012488:	4023      	ands	r3, r4
 801248a:	d002      	beq.n	8012492 <_malloc_r+0x37e>
 801248c:	2208      	movs	r2, #8
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	18e4      	adds	r4, r4, r3
 8012492:	9a03      	ldr	r2, [sp, #12]
 8012494:	19a6      	adds	r6, r4, r6
 8012496:	18d3      	adds	r3, r2, r3
 8012498:	4006      	ands	r6, r0
 801249a:	1b9e      	subs	r6, r3, r6
 801249c:	0031      	movs	r1, r6
 801249e:	9801      	ldr	r0, [sp, #4]
 80124a0:	f000 fa62 	bl	8012968 <_sbrk_r>
 80124a4:	1c43      	adds	r3, r0, #1
 80124a6:	d101      	bne.n	80124ac <_malloc_r+0x398>
 80124a8:	0020      	movs	r0, r4
 80124aa:	2600      	movs	r6, #0
 80124ac:	4a23      	ldr	r2, [pc, #140]	; (801253c <_malloc_r+0x428>)
 80124ae:	1b00      	subs	r0, r0, r4
 80124b0:	6813      	ldr	r3, [r2, #0]
 80124b2:	199b      	adds	r3, r3, r6
 80124b4:	6013      	str	r3, [r2, #0]
 80124b6:	2301      	movs	r3, #1
 80124b8:	4a21      	ldr	r2, [pc, #132]	; (8012540 <_malloc_r+0x42c>)
 80124ba:	1986      	adds	r6, r0, r6
 80124bc:	431e      	orrs	r6, r3
 80124be:	6094      	str	r4, [r2, #8]
 80124c0:	6066      	str	r6, [r4, #4]
 80124c2:	4297      	cmp	r7, r2
 80124c4:	d100      	bne.n	80124c8 <_malloc_r+0x3b4>
 80124c6:	e748      	b.n	801235a <_malloc_r+0x246>
 80124c8:	9a02      	ldr	r2, [sp, #8]
 80124ca:	2a0f      	cmp	r2, #15
 80124cc:	d813      	bhi.n	80124f6 <_malloc_r+0x3e2>
 80124ce:	6063      	str	r3, [r4, #4]
 80124d0:	2203      	movs	r2, #3
 80124d2:	4b1b      	ldr	r3, [pc, #108]	; (8012540 <_malloc_r+0x42c>)
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	4393      	bics	r3, r2
 80124da:	1b5a      	subs	r2, r3, r5
 80124dc:	42ab      	cmp	r3, r5
 80124de:	d301      	bcc.n	80124e4 <_malloc_r+0x3d0>
 80124e0:	2a0f      	cmp	r2, #15
 80124e2:	dc1d      	bgt.n	8012520 <_malloc_r+0x40c>
 80124e4:	9801      	ldr	r0, [sp, #4]
 80124e6:	f000 f867 	bl	80125b8 <__malloc_unlock>
 80124ea:	e620      	b.n	801212e <_malloc_r+0x1a>
 80124ec:	1ae3      	subs	r3, r4, r3
 80124ee:	4a13      	ldr	r2, [pc, #76]	; (801253c <_malloc_r+0x428>)
 80124f0:	4463      	add	r3, ip
 80124f2:	6013      	str	r3, [r2, #0]
 80124f4:	e7c7      	b.n	8012486 <_malloc_r+0x372>
 80124f6:	2207      	movs	r2, #7
 80124f8:	9e02      	ldr	r6, [sp, #8]
 80124fa:	3e0c      	subs	r6, #12
 80124fc:	4396      	bics	r6, r2
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	4013      	ands	r3, r2
 8012502:	2205      	movs	r2, #5
 8012504:	4333      	orrs	r3, r6
 8012506:	607b      	str	r3, [r7, #4]
 8012508:	19bb      	adds	r3, r7, r6
 801250a:	605a      	str	r2, [r3, #4]
 801250c:	609a      	str	r2, [r3, #8]
 801250e:	2e0f      	cmp	r6, #15
 8012510:	d800      	bhi.n	8012514 <_malloc_r+0x400>
 8012512:	e722      	b.n	801235a <_malloc_r+0x246>
 8012514:	0039      	movs	r1, r7
 8012516:	9801      	ldr	r0, [sp, #4]
 8012518:	3108      	adds	r1, #8
 801251a:	f003 fb07 	bl	8015b2c <_free_r>
 801251e:	e71c      	b.n	801235a <_malloc_r+0x246>
 8012520:	2301      	movs	r3, #1
 8012522:	0018      	movs	r0, r3
 8012524:	4906      	ldr	r1, [pc, #24]	; (8012540 <_malloc_r+0x42c>)
 8012526:	4328      	orrs	r0, r5
 8012528:	688c      	ldr	r4, [r1, #8]
 801252a:	4313      	orrs	r3, r2
 801252c:	1965      	adds	r5, r4, r5
 801252e:	6060      	str	r0, [r4, #4]
 8012530:	608d      	str	r5, [r1, #8]
 8012532:	606b      	str	r3, [r5, #4]
 8012534:	e624      	b.n	8012180 <_malloc_r+0x6c>
 8012536:	46c0      	nop			; (mov r8, r8)
 8012538:	20000a6c 	.word	0x20000a6c
 801253c:	20006bc4 	.word	0x20006bc4
 8012540:	20000664 	.word	0x20000664

08012544 <__ascii_mbtowc>:
 8012544:	b082      	sub	sp, #8
 8012546:	2900      	cmp	r1, #0
 8012548:	d100      	bne.n	801254c <__ascii_mbtowc+0x8>
 801254a:	a901      	add	r1, sp, #4
 801254c:	1e10      	subs	r0, r2, #0
 801254e:	d006      	beq.n	801255e <__ascii_mbtowc+0x1a>
 8012550:	2b00      	cmp	r3, #0
 8012552:	d006      	beq.n	8012562 <__ascii_mbtowc+0x1e>
 8012554:	7813      	ldrb	r3, [r2, #0]
 8012556:	600b      	str	r3, [r1, #0]
 8012558:	7810      	ldrb	r0, [r2, #0]
 801255a:	1e43      	subs	r3, r0, #1
 801255c:	4198      	sbcs	r0, r3
 801255e:	b002      	add	sp, #8
 8012560:	4770      	bx	lr
 8012562:	2002      	movs	r0, #2
 8012564:	4240      	negs	r0, r0
 8012566:	e7fa      	b.n	801255e <__ascii_mbtowc+0x1a>

08012568 <memcmp>:
 8012568:	b530      	push	{r4, r5, lr}
 801256a:	2400      	movs	r4, #0
 801256c:	42a2      	cmp	r2, r4
 801256e:	d101      	bne.n	8012574 <memcmp+0xc>
 8012570:	2000      	movs	r0, #0
 8012572:	e005      	b.n	8012580 <memcmp+0x18>
 8012574:	5d03      	ldrb	r3, [r0, r4]
 8012576:	1c65      	adds	r5, r4, #1
 8012578:	5d0c      	ldrb	r4, [r1, r4]
 801257a:	42a3      	cmp	r3, r4
 801257c:	d001      	beq.n	8012582 <memcmp+0x1a>
 801257e:	1b18      	subs	r0, r3, r4
 8012580:	bd30      	pop	{r4, r5, pc}
 8012582:	002c      	movs	r4, r5
 8012584:	e7f2      	b.n	801256c <memcmp+0x4>

08012586 <memcpy>:
 8012586:	2300      	movs	r3, #0
 8012588:	b510      	push	{r4, lr}
 801258a:	429a      	cmp	r2, r3
 801258c:	d100      	bne.n	8012590 <memcpy+0xa>
 801258e:	bd10      	pop	{r4, pc}
 8012590:	5ccc      	ldrb	r4, [r1, r3]
 8012592:	54c4      	strb	r4, [r0, r3]
 8012594:	3301      	adds	r3, #1
 8012596:	e7f8      	b.n	801258a <memcpy+0x4>

08012598 <memset>:
 8012598:	0003      	movs	r3, r0
 801259a:	1812      	adds	r2, r2, r0
 801259c:	4293      	cmp	r3, r2
 801259e:	d100      	bne.n	80125a2 <memset+0xa>
 80125a0:	4770      	bx	lr
 80125a2:	7019      	strb	r1, [r3, #0]
 80125a4:	3301      	adds	r3, #1
 80125a6:	e7f9      	b.n	801259c <memset+0x4>

080125a8 <__malloc_lock>:
 80125a8:	b510      	push	{r4, lr}
 80125aa:	4802      	ldr	r0, [pc, #8]	; (80125b4 <__malloc_lock+0xc>)
 80125ac:	f003 feb2 	bl	8016314 <__retarget_lock_acquire_recursive>
 80125b0:	bd10      	pop	{r4, pc}
 80125b2:	46c0      	nop			; (mov r8, r8)
 80125b4:	20007234 	.word	0x20007234

080125b8 <__malloc_unlock>:
 80125b8:	b510      	push	{r4, lr}
 80125ba:	4802      	ldr	r0, [pc, #8]	; (80125c4 <__malloc_unlock+0xc>)
 80125bc:	f003 feab 	bl	8016316 <__retarget_lock_release_recursive>
 80125c0:	bd10      	pop	{r4, pc}
 80125c2:	46c0      	nop			; (mov r8, r8)
 80125c4:	20007234 	.word	0x20007234

080125c8 <rand>:
 80125c8:	4b09      	ldr	r3, [pc, #36]	; (80125f0 <rand+0x28>)
 80125ca:	b510      	push	{r4, lr}
 80125cc:	681c      	ldr	r4, [r3, #0]
 80125ce:	4a09      	ldr	r2, [pc, #36]	; (80125f4 <rand+0x2c>)
 80125d0:	34a8      	adds	r4, #168	; 0xa8
 80125d2:	6820      	ldr	r0, [r4, #0]
 80125d4:	6861      	ldr	r1, [r4, #4]
 80125d6:	4b08      	ldr	r3, [pc, #32]	; (80125f8 <rand+0x30>)
 80125d8:	f7ed ffc8 	bl	800056c <__aeabi_lmul>
 80125dc:	2201      	movs	r2, #1
 80125de:	2300      	movs	r3, #0
 80125e0:	1880      	adds	r0, r0, r2
 80125e2:	4159      	adcs	r1, r3
 80125e4:	6020      	str	r0, [r4, #0]
 80125e6:	6061      	str	r1, [r4, #4]
 80125e8:	0048      	lsls	r0, r1, #1
 80125ea:	0840      	lsrs	r0, r0, #1
 80125ec:	bd10      	pop	{r4, pc}
 80125ee:	46c0      	nop			; (mov r8, r8)
 80125f0:	200000cc 	.word	0x200000cc
 80125f4:	4c957f2d 	.word	0x4c957f2d
 80125f8:	5851f42d 	.word	0x5851f42d

080125fc <realloc>:
 80125fc:	b510      	push	{r4, lr}
 80125fe:	4b03      	ldr	r3, [pc, #12]	; (801260c <realloc+0x10>)
 8012600:	000a      	movs	r2, r1
 8012602:	0001      	movs	r1, r0
 8012604:	6818      	ldr	r0, [r3, #0]
 8012606:	f000 f803 	bl	8012610 <_realloc_r>
 801260a:	bd10      	pop	{r4, pc}
 801260c:	200000cc 	.word	0x200000cc

08012610 <_realloc_r>:
 8012610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012612:	b087      	sub	sp, #28
 8012614:	9003      	str	r0, [sp, #12]
 8012616:	1e0c      	subs	r4, r1, #0
 8012618:	9205      	str	r2, [sp, #20]
 801261a:	d106      	bne.n	801262a <_realloc_r+0x1a>
 801261c:	0011      	movs	r1, r2
 801261e:	f7ff fd79 	bl	8012114 <_malloc_r>
 8012622:	0007      	movs	r7, r0
 8012624:	0038      	movs	r0, r7
 8012626:	b007      	add	sp, #28
 8012628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801262a:	9803      	ldr	r0, [sp, #12]
 801262c:	f7ff ffbc 	bl	80125a8 <__malloc_lock>
 8012630:	0023      	movs	r3, r4
 8012632:	3b08      	subs	r3, #8
 8012634:	685f      	ldr	r7, [r3, #4]
 8012636:	9302      	str	r3, [sp, #8]
 8012638:	003a      	movs	r2, r7
 801263a:	2303      	movs	r3, #3
 801263c:	9e05      	ldr	r6, [sp, #20]
 801263e:	439a      	bics	r2, r3
 8012640:	360b      	adds	r6, #11
 8012642:	9204      	str	r2, [sp, #16]
 8012644:	2e16      	cmp	r6, #22
 8012646:	d908      	bls.n	801265a <_realloc_r+0x4a>
 8012648:	3304      	adds	r3, #4
 801264a:	439e      	bics	r6, r3
 801264c:	9601      	str	r6, [sp, #4]
 801264e:	d506      	bpl.n	801265e <_realloc_r+0x4e>
 8012650:	230c      	movs	r3, #12
 8012652:	9a03      	ldr	r2, [sp, #12]
 8012654:	2700      	movs	r7, #0
 8012656:	6013      	str	r3, [r2, #0]
 8012658:	e7e4      	b.n	8012624 <_realloc_r+0x14>
 801265a:	2310      	movs	r3, #16
 801265c:	9301      	str	r3, [sp, #4]
 801265e:	9b01      	ldr	r3, [sp, #4]
 8012660:	9a05      	ldr	r2, [sp, #20]
 8012662:	4293      	cmp	r3, r2
 8012664:	d3f4      	bcc.n	8012650 <_realloc_r+0x40>
 8012666:	9b01      	ldr	r3, [sp, #4]
 8012668:	9a04      	ldr	r2, [sp, #16]
 801266a:	4293      	cmp	r3, r2
 801266c:	dc00      	bgt.n	8012670 <_realloc_r+0x60>
 801266e:	e16f      	b.n	8012950 <_realloc_r+0x340>
 8012670:	9b02      	ldr	r3, [sp, #8]
 8012672:	48bc      	ldr	r0, [pc, #752]	; (8012964 <_realloc_r+0x354>)
 8012674:	189b      	adds	r3, r3, r2
 8012676:	6882      	ldr	r2, [r0, #8]
 8012678:	4694      	mov	ip, r2
 801267a:	685a      	ldr	r2, [r3, #4]
 801267c:	459c      	cmp	ip, r3
 801267e:	d006      	beq.n	801268e <_realloc_r+0x7e>
 8012680:	2501      	movs	r5, #1
 8012682:	0011      	movs	r1, r2
 8012684:	43a9      	bics	r1, r5
 8012686:	1859      	adds	r1, r3, r1
 8012688:	6849      	ldr	r1, [r1, #4]
 801268a:	4229      	tst	r1, r5
 801268c:	d146      	bne.n	801271c <_realloc_r+0x10c>
 801268e:	2103      	movs	r1, #3
 8012690:	438a      	bics	r2, r1
 8012692:	9904      	ldr	r1, [sp, #16]
 8012694:	188e      	adds	r6, r1, r2
 8012696:	9901      	ldr	r1, [sp, #4]
 8012698:	459c      	cmp	ip, r3
 801269a:	d117      	bne.n	80126cc <_realloc_r+0xbc>
 801269c:	3110      	adds	r1, #16
 801269e:	42b1      	cmp	r1, r6
 80126a0:	dc3e      	bgt.n	8012720 <_realloc_r+0x110>
 80126a2:	9901      	ldr	r1, [sp, #4]
 80126a4:	9b02      	ldr	r3, [sp, #8]
 80126a6:	468c      	mov	ip, r1
 80126a8:	4463      	add	r3, ip
 80126aa:	6083      	str	r3, [r0, #8]
 80126ac:	001a      	movs	r2, r3
 80126ae:	1a73      	subs	r3, r6, r1
 80126b0:	2601      	movs	r6, #1
 80126b2:	4333      	orrs	r3, r6
 80126b4:	6053      	str	r3, [r2, #4]
 80126b6:	0023      	movs	r3, r4
 80126b8:	3b08      	subs	r3, #8
 80126ba:	685a      	ldr	r2, [r3, #4]
 80126bc:	9803      	ldr	r0, [sp, #12]
 80126be:	4016      	ands	r6, r2
 80126c0:	430e      	orrs	r6, r1
 80126c2:	605e      	str	r6, [r3, #4]
 80126c4:	f7ff ff78 	bl	80125b8 <__malloc_unlock>
 80126c8:	0027      	movs	r7, r4
 80126ca:	e7ab      	b.n	8012624 <_realloc_r+0x14>
 80126cc:	42b1      	cmp	r1, r6
 80126ce:	dc27      	bgt.n	8012720 <_realloc_r+0x110>
 80126d0:	68da      	ldr	r2, [r3, #12]
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	60da      	str	r2, [r3, #12]
 80126d6:	6093      	str	r3, [r2, #8]
 80126d8:	9b01      	ldr	r3, [sp, #4]
 80126da:	9a02      	ldr	r2, [sp, #8]
 80126dc:	1af4      	subs	r4, r6, r3
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	1992      	adds	r2, r2, r6
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	9304      	str	r3, [sp, #16]
 80126e6:	2301      	movs	r3, #1
 80126e8:	9804      	ldr	r0, [sp, #16]
 80126ea:	4018      	ands	r0, r3
 80126ec:	2c0f      	cmp	r4, #15
 80126ee:	d800      	bhi.n	80126f2 <_realloc_r+0xe2>
 80126f0:	e130      	b.n	8012954 <_realloc_r+0x344>
 80126f2:	9d01      	ldr	r5, [sp, #4]
 80126f4:	9902      	ldr	r1, [sp, #8]
 80126f6:	4328      	orrs	r0, r5
 80126f8:	1949      	adds	r1, r1, r5
 80126fa:	9d02      	ldr	r5, [sp, #8]
 80126fc:	431c      	orrs	r4, r3
 80126fe:	6068      	str	r0, [r5, #4]
 8012700:	604c      	str	r4, [r1, #4]
 8012702:	6850      	ldr	r0, [r2, #4]
 8012704:	3108      	adds	r1, #8
 8012706:	4303      	orrs	r3, r0
 8012708:	6053      	str	r3, [r2, #4]
 801270a:	9803      	ldr	r0, [sp, #12]
 801270c:	f003 fa0e 	bl	8015b2c <_free_r>
 8012710:	9803      	ldr	r0, [sp, #12]
 8012712:	f7ff ff51 	bl	80125b8 <__malloc_unlock>
 8012716:	9f02      	ldr	r7, [sp, #8]
 8012718:	3708      	adds	r7, #8
 801271a:	e783      	b.n	8012624 <_realloc_r+0x14>
 801271c:	2200      	movs	r2, #0
 801271e:	0013      	movs	r3, r2
 8012720:	07f9      	lsls	r1, r7, #31
 8012722:	d500      	bpl.n	8012726 <_realloc_r+0x116>
 8012724:	e0c6      	b.n	80128b4 <_realloc_r+0x2a4>
 8012726:	0021      	movs	r1, r4
 8012728:	3908      	subs	r1, #8
 801272a:	680d      	ldr	r5, [r1, #0]
 801272c:	9902      	ldr	r1, [sp, #8]
 801272e:	1b4d      	subs	r5, r1, r5
 8012730:	2103      	movs	r1, #3
 8012732:	686f      	ldr	r7, [r5, #4]
 8012734:	438f      	bics	r7, r1
 8012736:	9904      	ldr	r1, [sp, #16]
 8012738:	187f      	adds	r7, r7, r1
 801273a:	2b00      	cmp	r3, #0
 801273c:	d100      	bne.n	8012740 <_realloc_r+0x130>
 801273e:	e084      	b.n	801284a <_realloc_r+0x23a>
 8012740:	19d6      	adds	r6, r2, r7
 8012742:	459c      	cmp	ip, r3
 8012744:	d148      	bne.n	80127d8 <_realloc_r+0x1c8>
 8012746:	9b01      	ldr	r3, [sp, #4]
 8012748:	3310      	adds	r3, #16
 801274a:	42b3      	cmp	r3, r6
 801274c:	dc7d      	bgt.n	801284a <_realloc_r+0x23a>
 801274e:	68aa      	ldr	r2, [r5, #8]
 8012750:	68eb      	ldr	r3, [r5, #12]
 8012752:	002f      	movs	r7, r5
 8012754:	60d3      	str	r3, [r2, #12]
 8012756:	609a      	str	r2, [r3, #8]
 8012758:	000a      	movs	r2, r1
 801275a:	3a04      	subs	r2, #4
 801275c:	3708      	adds	r7, #8
 801275e:	2a24      	cmp	r2, #36	; 0x24
 8012760:	d835      	bhi.n	80127ce <_realloc_r+0x1be>
 8012762:	003b      	movs	r3, r7
 8012764:	2a13      	cmp	r2, #19
 8012766:	d908      	bls.n	801277a <_realloc_r+0x16a>
 8012768:	6823      	ldr	r3, [r4, #0]
 801276a:	60ab      	str	r3, [r5, #8]
 801276c:	6863      	ldr	r3, [r4, #4]
 801276e:	60eb      	str	r3, [r5, #12]
 8012770:	2a1b      	cmp	r2, #27
 8012772:	d81a      	bhi.n	80127aa <_realloc_r+0x19a>
 8012774:	002b      	movs	r3, r5
 8012776:	3408      	adds	r4, #8
 8012778:	3310      	adds	r3, #16
 801277a:	6822      	ldr	r2, [r4, #0]
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	6862      	ldr	r2, [r4, #4]
 8012780:	605a      	str	r2, [r3, #4]
 8012782:	68a2      	ldr	r2, [r4, #8]
 8012784:	609a      	str	r2, [r3, #8]
 8012786:	9b01      	ldr	r3, [sp, #4]
 8012788:	18ea      	adds	r2, r5, r3
 801278a:	4b76      	ldr	r3, [pc, #472]	; (8012964 <_realloc_r+0x354>)
 801278c:	609a      	str	r2, [r3, #8]
 801278e:	9b01      	ldr	r3, [sp, #4]
 8012790:	1af3      	subs	r3, r6, r3
 8012792:	2601      	movs	r6, #1
 8012794:	4333      	orrs	r3, r6
 8012796:	6053      	str	r3, [r2, #4]
 8012798:	686b      	ldr	r3, [r5, #4]
 801279a:	401e      	ands	r6, r3
 801279c:	9b01      	ldr	r3, [sp, #4]
 801279e:	431e      	orrs	r6, r3
 80127a0:	606e      	str	r6, [r5, #4]
 80127a2:	9803      	ldr	r0, [sp, #12]
 80127a4:	f7ff ff08 	bl	80125b8 <__malloc_unlock>
 80127a8:	e73c      	b.n	8012624 <_realloc_r+0x14>
 80127aa:	68a3      	ldr	r3, [r4, #8]
 80127ac:	612b      	str	r3, [r5, #16]
 80127ae:	68e3      	ldr	r3, [r4, #12]
 80127b0:	616b      	str	r3, [r5, #20]
 80127b2:	2a24      	cmp	r2, #36	; 0x24
 80127b4:	d003      	beq.n	80127be <_realloc_r+0x1ae>
 80127b6:	002b      	movs	r3, r5
 80127b8:	3410      	adds	r4, #16
 80127ba:	3318      	adds	r3, #24
 80127bc:	e7dd      	b.n	801277a <_realloc_r+0x16a>
 80127be:	6923      	ldr	r3, [r4, #16]
 80127c0:	61ab      	str	r3, [r5, #24]
 80127c2:	002b      	movs	r3, r5
 80127c4:	6962      	ldr	r2, [r4, #20]
 80127c6:	3320      	adds	r3, #32
 80127c8:	61ea      	str	r2, [r5, #28]
 80127ca:	3418      	adds	r4, #24
 80127cc:	e7d5      	b.n	801277a <_realloc_r+0x16a>
 80127ce:	0021      	movs	r1, r4
 80127d0:	0038      	movs	r0, r7
 80127d2:	f003 fdac 	bl	801632e <memmove>
 80127d6:	e7d6      	b.n	8012786 <_realloc_r+0x176>
 80127d8:	9a01      	ldr	r2, [sp, #4]
 80127da:	42b2      	cmp	r2, r6
 80127dc:	dc35      	bgt.n	801284a <_realloc_r+0x23a>
 80127de:	0028      	movs	r0, r5
 80127e0:	68da      	ldr	r2, [r3, #12]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	3008      	adds	r0, #8
 80127e6:	60da      	str	r2, [r3, #12]
 80127e8:	6093      	str	r3, [r2, #8]
 80127ea:	68aa      	ldr	r2, [r5, #8]
 80127ec:	68eb      	ldr	r3, [r5, #12]
 80127ee:	60d3      	str	r3, [r2, #12]
 80127f0:	609a      	str	r2, [r3, #8]
 80127f2:	9a04      	ldr	r2, [sp, #16]
 80127f4:	3a04      	subs	r2, #4
 80127f6:	2a24      	cmp	r2, #36	; 0x24
 80127f8:	d823      	bhi.n	8012842 <_realloc_r+0x232>
 80127fa:	2a13      	cmp	r2, #19
 80127fc:	d907      	bls.n	801280e <_realloc_r+0x1fe>
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	60ab      	str	r3, [r5, #8]
 8012802:	6863      	ldr	r3, [r4, #4]
 8012804:	60eb      	str	r3, [r5, #12]
 8012806:	2a1b      	cmp	r2, #27
 8012808:	d809      	bhi.n	801281e <_realloc_r+0x20e>
 801280a:	3408      	adds	r4, #8
 801280c:	3008      	adds	r0, #8
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	6003      	str	r3, [r0, #0]
 8012812:	6863      	ldr	r3, [r4, #4]
 8012814:	6043      	str	r3, [r0, #4]
 8012816:	68a3      	ldr	r3, [r4, #8]
 8012818:	6083      	str	r3, [r0, #8]
 801281a:	9502      	str	r5, [sp, #8]
 801281c:	e75c      	b.n	80126d8 <_realloc_r+0xc8>
 801281e:	68a3      	ldr	r3, [r4, #8]
 8012820:	612b      	str	r3, [r5, #16]
 8012822:	68e3      	ldr	r3, [r4, #12]
 8012824:	616b      	str	r3, [r5, #20]
 8012826:	2a24      	cmp	r2, #36	; 0x24
 8012828:	d003      	beq.n	8012832 <_realloc_r+0x222>
 801282a:	0028      	movs	r0, r5
 801282c:	3410      	adds	r4, #16
 801282e:	3018      	adds	r0, #24
 8012830:	e7ed      	b.n	801280e <_realloc_r+0x1fe>
 8012832:	0028      	movs	r0, r5
 8012834:	6923      	ldr	r3, [r4, #16]
 8012836:	3020      	adds	r0, #32
 8012838:	61ab      	str	r3, [r5, #24]
 801283a:	6963      	ldr	r3, [r4, #20]
 801283c:	3418      	adds	r4, #24
 801283e:	61eb      	str	r3, [r5, #28]
 8012840:	e7e5      	b.n	801280e <_realloc_r+0x1fe>
 8012842:	0021      	movs	r1, r4
 8012844:	f003 fd73 	bl	801632e <memmove>
 8012848:	e7e7      	b.n	801281a <_realloc_r+0x20a>
 801284a:	9b01      	ldr	r3, [sp, #4]
 801284c:	42bb      	cmp	r3, r7
 801284e:	dc31      	bgt.n	80128b4 <_realloc_r+0x2a4>
 8012850:	0028      	movs	r0, r5
 8012852:	68aa      	ldr	r2, [r5, #8]
 8012854:	68eb      	ldr	r3, [r5, #12]
 8012856:	3008      	adds	r0, #8
 8012858:	60d3      	str	r3, [r2, #12]
 801285a:	609a      	str	r2, [r3, #8]
 801285c:	9a04      	ldr	r2, [sp, #16]
 801285e:	3a04      	subs	r2, #4
 8012860:	2a24      	cmp	r2, #36	; 0x24
 8012862:	d823      	bhi.n	80128ac <_realloc_r+0x29c>
 8012864:	2a13      	cmp	r2, #19
 8012866:	d907      	bls.n	8012878 <_realloc_r+0x268>
 8012868:	6823      	ldr	r3, [r4, #0]
 801286a:	60ab      	str	r3, [r5, #8]
 801286c:	6863      	ldr	r3, [r4, #4]
 801286e:	60eb      	str	r3, [r5, #12]
 8012870:	2a1b      	cmp	r2, #27
 8012872:	d809      	bhi.n	8012888 <_realloc_r+0x278>
 8012874:	3408      	adds	r4, #8
 8012876:	3008      	adds	r0, #8
 8012878:	6823      	ldr	r3, [r4, #0]
 801287a:	6003      	str	r3, [r0, #0]
 801287c:	6863      	ldr	r3, [r4, #4]
 801287e:	6043      	str	r3, [r0, #4]
 8012880:	68a3      	ldr	r3, [r4, #8]
 8012882:	6083      	str	r3, [r0, #8]
 8012884:	003e      	movs	r6, r7
 8012886:	e7c8      	b.n	801281a <_realloc_r+0x20a>
 8012888:	68a3      	ldr	r3, [r4, #8]
 801288a:	612b      	str	r3, [r5, #16]
 801288c:	68e3      	ldr	r3, [r4, #12]
 801288e:	616b      	str	r3, [r5, #20]
 8012890:	2a24      	cmp	r2, #36	; 0x24
 8012892:	d003      	beq.n	801289c <_realloc_r+0x28c>
 8012894:	0028      	movs	r0, r5
 8012896:	3410      	adds	r4, #16
 8012898:	3018      	adds	r0, #24
 801289a:	e7ed      	b.n	8012878 <_realloc_r+0x268>
 801289c:	0028      	movs	r0, r5
 801289e:	6923      	ldr	r3, [r4, #16]
 80128a0:	3020      	adds	r0, #32
 80128a2:	61ab      	str	r3, [r5, #24]
 80128a4:	6963      	ldr	r3, [r4, #20]
 80128a6:	3418      	adds	r4, #24
 80128a8:	61eb      	str	r3, [r5, #28]
 80128aa:	e7e5      	b.n	8012878 <_realloc_r+0x268>
 80128ac:	0021      	movs	r1, r4
 80128ae:	f003 fd3e 	bl	801632e <memmove>
 80128b2:	e7e7      	b.n	8012884 <_realloc_r+0x274>
 80128b4:	9905      	ldr	r1, [sp, #20]
 80128b6:	9803      	ldr	r0, [sp, #12]
 80128b8:	f7ff fc2c 	bl	8012114 <_malloc_r>
 80128bc:	1e07      	subs	r7, r0, #0
 80128be:	d100      	bne.n	80128c2 <_realloc_r+0x2b2>
 80128c0:	e76f      	b.n	80127a2 <_realloc_r+0x192>
 80128c2:	0023      	movs	r3, r4
 80128c4:	2201      	movs	r2, #1
 80128c6:	3b08      	subs	r3, #8
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	4393      	bics	r3, r2
 80128cc:	9a02      	ldr	r2, [sp, #8]
 80128ce:	18d3      	adds	r3, r2, r3
 80128d0:	0002      	movs	r2, r0
 80128d2:	3a08      	subs	r2, #8
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d105      	bne.n	80128e4 <_realloc_r+0x2d4>
 80128d8:	685e      	ldr	r6, [r3, #4]
 80128da:	2303      	movs	r3, #3
 80128dc:	439e      	bics	r6, r3
 80128de:	9b04      	ldr	r3, [sp, #16]
 80128e0:	18f6      	adds	r6, r6, r3
 80128e2:	e6f9      	b.n	80126d8 <_realloc_r+0xc8>
 80128e4:	9a04      	ldr	r2, [sp, #16]
 80128e6:	3a04      	subs	r2, #4
 80128e8:	2a24      	cmp	r2, #36	; 0x24
 80128ea:	d82d      	bhi.n	8012948 <_realloc_r+0x338>
 80128ec:	2a13      	cmp	r2, #19
 80128ee:	d928      	bls.n	8012942 <_realloc_r+0x332>
 80128f0:	6823      	ldr	r3, [r4, #0]
 80128f2:	6003      	str	r3, [r0, #0]
 80128f4:	6863      	ldr	r3, [r4, #4]
 80128f6:	6043      	str	r3, [r0, #4]
 80128f8:	2a1b      	cmp	r2, #27
 80128fa:	d80e      	bhi.n	801291a <_realloc_r+0x30a>
 80128fc:	0022      	movs	r2, r4
 80128fe:	0003      	movs	r3, r0
 8012900:	3208      	adds	r2, #8
 8012902:	3308      	adds	r3, #8
 8012904:	6811      	ldr	r1, [r2, #0]
 8012906:	6019      	str	r1, [r3, #0]
 8012908:	6851      	ldr	r1, [r2, #4]
 801290a:	6059      	str	r1, [r3, #4]
 801290c:	6892      	ldr	r2, [r2, #8]
 801290e:	609a      	str	r2, [r3, #8]
 8012910:	0021      	movs	r1, r4
 8012912:	9803      	ldr	r0, [sp, #12]
 8012914:	f003 f90a 	bl	8015b2c <_free_r>
 8012918:	e743      	b.n	80127a2 <_realloc_r+0x192>
 801291a:	68a3      	ldr	r3, [r4, #8]
 801291c:	6083      	str	r3, [r0, #8]
 801291e:	68e3      	ldr	r3, [r4, #12]
 8012920:	60c3      	str	r3, [r0, #12]
 8012922:	2a24      	cmp	r2, #36	; 0x24
 8012924:	d004      	beq.n	8012930 <_realloc_r+0x320>
 8012926:	0022      	movs	r2, r4
 8012928:	0003      	movs	r3, r0
 801292a:	3210      	adds	r2, #16
 801292c:	3310      	adds	r3, #16
 801292e:	e7e9      	b.n	8012904 <_realloc_r+0x2f4>
 8012930:	6923      	ldr	r3, [r4, #16]
 8012932:	0022      	movs	r2, r4
 8012934:	6103      	str	r3, [r0, #16]
 8012936:	0003      	movs	r3, r0
 8012938:	6961      	ldr	r1, [r4, #20]
 801293a:	3218      	adds	r2, #24
 801293c:	3318      	adds	r3, #24
 801293e:	6141      	str	r1, [r0, #20]
 8012940:	e7e0      	b.n	8012904 <_realloc_r+0x2f4>
 8012942:	0003      	movs	r3, r0
 8012944:	0022      	movs	r2, r4
 8012946:	e7dd      	b.n	8012904 <_realloc_r+0x2f4>
 8012948:	0021      	movs	r1, r4
 801294a:	f003 fcf0 	bl	801632e <memmove>
 801294e:	e7df      	b.n	8012910 <_realloc_r+0x300>
 8012950:	9e04      	ldr	r6, [sp, #16]
 8012952:	e6c1      	b.n	80126d8 <_realloc_r+0xc8>
 8012954:	9902      	ldr	r1, [sp, #8]
 8012956:	4306      	orrs	r6, r0
 8012958:	604e      	str	r6, [r1, #4]
 801295a:	6851      	ldr	r1, [r2, #4]
 801295c:	430b      	orrs	r3, r1
 801295e:	6053      	str	r3, [r2, #4]
 8012960:	e6d6      	b.n	8012710 <_realloc_r+0x100>
 8012962:	46c0      	nop			; (mov r8, r8)
 8012964:	20000664 	.word	0x20000664

08012968 <_sbrk_r>:
 8012968:	2300      	movs	r3, #0
 801296a:	b570      	push	{r4, r5, r6, lr}
 801296c:	4c06      	ldr	r4, [pc, #24]	; (8012988 <_sbrk_r+0x20>)
 801296e:	0005      	movs	r5, r0
 8012970:	0008      	movs	r0, r1
 8012972:	6023      	str	r3, [r4, #0]
 8012974:	f004 f9c0 	bl	8016cf8 <_sbrk>
 8012978:	1c43      	adds	r3, r0, #1
 801297a:	d103      	bne.n	8012984 <_sbrk_r+0x1c>
 801297c:	6823      	ldr	r3, [r4, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d000      	beq.n	8012984 <_sbrk_r+0x1c>
 8012982:	602b      	str	r3, [r5, #0]
 8012984:	bd70      	pop	{r4, r5, r6, pc}
 8012986:	46c0      	nop			; (mov r8, r8)
 8012988:	2000723c 	.word	0x2000723c

0801298c <sprintf>:
 801298c:	b40e      	push	{r1, r2, r3}
 801298e:	b500      	push	{lr}
 8012990:	490b      	ldr	r1, [pc, #44]	; (80129c0 <sprintf+0x34>)
 8012992:	b09c      	sub	sp, #112	; 0x70
 8012994:	ab1d      	add	r3, sp, #116	; 0x74
 8012996:	9002      	str	r0, [sp, #8]
 8012998:	9006      	str	r0, [sp, #24]
 801299a:	9107      	str	r1, [sp, #28]
 801299c:	9104      	str	r1, [sp, #16]
 801299e:	4809      	ldr	r0, [pc, #36]	; (80129c4 <sprintf+0x38>)
 80129a0:	4909      	ldr	r1, [pc, #36]	; (80129c8 <sprintf+0x3c>)
 80129a2:	cb04      	ldmia	r3!, {r2}
 80129a4:	9105      	str	r1, [sp, #20]
 80129a6:	6800      	ldr	r0, [r0, #0]
 80129a8:	a902      	add	r1, sp, #8
 80129aa:	9301      	str	r3, [sp, #4]
 80129ac:	f000 ff78 	bl	80138a0 <_svfprintf_r>
 80129b0:	2300      	movs	r3, #0
 80129b2:	9a02      	ldr	r2, [sp, #8]
 80129b4:	7013      	strb	r3, [r2, #0]
 80129b6:	b01c      	add	sp, #112	; 0x70
 80129b8:	bc08      	pop	{r3}
 80129ba:	b003      	add	sp, #12
 80129bc:	4718      	bx	r3
 80129be:	46c0      	nop			; (mov r8, r8)
 80129c0:	7fffffff 	.word	0x7fffffff
 80129c4:	200000cc 	.word	0x200000cc
 80129c8:	ffff0208 	.word	0xffff0208

080129cc <strcat>:
 80129cc:	0002      	movs	r2, r0
 80129ce:	b510      	push	{r4, lr}
 80129d0:	7813      	ldrb	r3, [r2, #0]
 80129d2:	1c54      	adds	r4, r2, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d105      	bne.n	80129e4 <strcat+0x18>
 80129d8:	5ccc      	ldrb	r4, [r1, r3]
 80129da:	54d4      	strb	r4, [r2, r3]
 80129dc:	3301      	adds	r3, #1
 80129de:	2c00      	cmp	r4, #0
 80129e0:	d1fa      	bne.n	80129d8 <strcat+0xc>
 80129e2:	bd10      	pop	{r4, pc}
 80129e4:	0022      	movs	r2, r4
 80129e6:	e7f3      	b.n	80129d0 <strcat+0x4>

080129e8 <strchr>:
 80129e8:	b2c9      	uxtb	r1, r1
 80129ea:	7803      	ldrb	r3, [r0, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d004      	beq.n	80129fa <strchr+0x12>
 80129f0:	428b      	cmp	r3, r1
 80129f2:	d100      	bne.n	80129f6 <strchr+0xe>
 80129f4:	4770      	bx	lr
 80129f6:	3001      	adds	r0, #1
 80129f8:	e7f7      	b.n	80129ea <strchr+0x2>
 80129fa:	424b      	negs	r3, r1
 80129fc:	4159      	adcs	r1, r3
 80129fe:	4249      	negs	r1, r1
 8012a00:	4008      	ands	r0, r1
 8012a02:	e7f7      	b.n	80129f4 <strchr+0xc>

08012a04 <strcpy>:
 8012a04:	0003      	movs	r3, r0
 8012a06:	780a      	ldrb	r2, [r1, #0]
 8012a08:	3101      	adds	r1, #1
 8012a0a:	701a      	strb	r2, [r3, #0]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	d1f9      	bne.n	8012a06 <strcpy+0x2>
 8012a12:	4770      	bx	lr

08012a14 <strncmp>:
 8012a14:	2300      	movs	r3, #0
 8012a16:	b530      	push	{r4, r5, lr}
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d00a      	beq.n	8012a32 <strncmp+0x1e>
 8012a1c:	3a01      	subs	r2, #1
 8012a1e:	5cc4      	ldrb	r4, [r0, r3]
 8012a20:	5ccd      	ldrb	r5, [r1, r3]
 8012a22:	42ac      	cmp	r4, r5
 8012a24:	d104      	bne.n	8012a30 <strncmp+0x1c>
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d002      	beq.n	8012a30 <strncmp+0x1c>
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	2c00      	cmp	r4, #0
 8012a2e:	d1f6      	bne.n	8012a1e <strncmp+0xa>
 8012a30:	1b63      	subs	r3, r4, r5
 8012a32:	0018      	movs	r0, r3
 8012a34:	bd30      	pop	{r4, r5, pc}

08012a36 <strncpy>:
 8012a36:	b530      	push	{r4, r5, lr}
 8012a38:	0005      	movs	r5, r0
 8012a3a:	2a00      	cmp	r2, #0
 8012a3c:	d100      	bne.n	8012a40 <strncpy+0xa>
 8012a3e:	bd30      	pop	{r4, r5, pc}
 8012a40:	780c      	ldrb	r4, [r1, #0]
 8012a42:	3a01      	subs	r2, #1
 8012a44:	1c6b      	adds	r3, r5, #1
 8012a46:	702c      	strb	r4, [r5, #0]
 8012a48:	3101      	adds	r1, #1
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	d105      	bne.n	8012a5a <strncpy+0x24>
 8012a4e:	189a      	adds	r2, r3, r2
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d0f4      	beq.n	8012a3e <strncpy+0x8>
 8012a54:	701c      	strb	r4, [r3, #0]
 8012a56:	3301      	adds	r3, #1
 8012a58:	e7fa      	b.n	8012a50 <strncpy+0x1a>
 8012a5a:	001d      	movs	r5, r3
 8012a5c:	e7ed      	b.n	8012a3a <strncpy+0x4>
	...

08012a60 <sulp>:
 8012a60:	b570      	push	{r4, r5, r6, lr}
 8012a62:	0016      	movs	r6, r2
 8012a64:	000d      	movs	r5, r1
 8012a66:	f003 ff17 	bl	8016898 <__ulp>
 8012a6a:	2e00      	cmp	r6, #0
 8012a6c:	d00d      	beq.n	8012a8a <sulp+0x2a>
 8012a6e:	236b      	movs	r3, #107	; 0x6b
 8012a70:	006a      	lsls	r2, r5, #1
 8012a72:	0d52      	lsrs	r2, r2, #21
 8012a74:	1a9b      	subs	r3, r3, r2
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	dd07      	ble.n	8012a8a <sulp+0x2a>
 8012a7a:	2400      	movs	r4, #0
 8012a7c:	4a03      	ldr	r2, [pc, #12]	; (8012a8c <sulp+0x2c>)
 8012a7e:	051b      	lsls	r3, r3, #20
 8012a80:	189d      	adds	r5, r3, r2
 8012a82:	002b      	movs	r3, r5
 8012a84:	0022      	movs	r2, r4
 8012a86:	f7ef f9d5 	bl	8001e34 <__aeabi_dmul>
 8012a8a:	bd70      	pop	{r4, r5, r6, pc}
 8012a8c:	3ff00000 	.word	0x3ff00000

08012a90 <_strtod_l>:
 8012a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a92:	b0a7      	sub	sp, #156	; 0x9c
 8012a94:	9307      	str	r3, [sp, #28]
 8012a96:	2300      	movs	r3, #0
 8012a98:	9004      	str	r0, [sp, #16]
 8012a9a:	9807      	ldr	r0, [sp, #28]
 8012a9c:	9322      	str	r3, [sp, #136]	; 0x88
 8012a9e:	9106      	str	r1, [sp, #24]
 8012aa0:	921d      	str	r2, [sp, #116]	; 0x74
 8012aa2:	f003 fc28 	bl	80162f6 <__localeconv_l>
 8012aa6:	0005      	movs	r5, r0
 8012aa8:	6800      	ldr	r0, [r0, #0]
 8012aaa:	f7ed fb35 	bl	8000118 <strlen>
 8012aae:	2600      	movs	r6, #0
 8012ab0:	2700      	movs	r7, #0
 8012ab2:	9b06      	ldr	r3, [sp, #24]
 8012ab4:	9005      	str	r0, [sp, #20]
 8012ab6:	9321      	str	r3, [sp, #132]	; 0x84
 8012ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012aba:	781a      	ldrb	r2, [r3, #0]
 8012abc:	2a0d      	cmp	r2, #13
 8012abe:	d839      	bhi.n	8012b34 <_strtod_l+0xa4>
 8012ac0:	2a09      	cmp	r2, #9
 8012ac2:	d23d      	bcs.n	8012b40 <_strtod_l+0xb0>
 8012ac4:	2a00      	cmp	r2, #0
 8012ac6:	d044      	beq.n	8012b52 <_strtod_l+0xc2>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	9313      	str	r3, [sp, #76]	; 0x4c
 8012acc:	2200      	movs	r2, #0
 8012ace:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012ad0:	920c      	str	r2, [sp, #48]	; 0x30
 8012ad2:	7823      	ldrb	r3, [r4, #0]
 8012ad4:	2b30      	cmp	r3, #48	; 0x30
 8012ad6:	d000      	beq.n	8012ada <_strtod_l+0x4a>
 8012ad8:	e07e      	b.n	8012bd8 <_strtod_l+0x148>
 8012ada:	7863      	ldrb	r3, [r4, #1]
 8012adc:	2b58      	cmp	r3, #88	; 0x58
 8012ade:	d002      	beq.n	8012ae6 <_strtod_l+0x56>
 8012ae0:	2b78      	cmp	r3, #120	; 0x78
 8012ae2:	d000      	beq.n	8012ae6 <_strtod_l+0x56>
 8012ae4:	e06e      	b.n	8012bc4 <_strtod_l+0x134>
 8012ae6:	9b07      	ldr	r3, [sp, #28]
 8012ae8:	4a96      	ldr	r2, [pc, #600]	; (8012d44 <_strtod_l+0x2b4>)
 8012aea:	9302      	str	r3, [sp, #8]
 8012aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012aee:	a921      	add	r1, sp, #132	; 0x84
 8012af0:	9301      	str	r3, [sp, #4]
 8012af2:	ab22      	add	r3, sp, #136	; 0x88
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	9804      	ldr	r0, [sp, #16]
 8012af8:	ab23      	add	r3, sp, #140	; 0x8c
 8012afa:	f003 f914 	bl	8015d26 <__gethex>
 8012afe:	2507      	movs	r5, #7
 8012b00:	9005      	str	r0, [sp, #20]
 8012b02:	4005      	ands	r5, r0
 8012b04:	d005      	beq.n	8012b12 <_strtod_l+0x82>
 8012b06:	2d06      	cmp	r5, #6
 8012b08:	d12f      	bne.n	8012b6a <_strtod_l+0xda>
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	3401      	adds	r4, #1
 8012b0e:	9421      	str	r4, [sp, #132]	; 0x84
 8012b10:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <_strtod_l+0x8e>
 8012b18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012b1c:	601a      	str	r2, [r3, #0]
 8012b1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d01d      	beq.n	8012b60 <_strtod_l+0xd0>
 8012b24:	2380      	movs	r3, #128	; 0x80
 8012b26:	0032      	movs	r2, r6
 8012b28:	061b      	lsls	r3, r3, #24
 8012b2a:	18fb      	adds	r3, r7, r3
 8012b2c:	0010      	movs	r0, r2
 8012b2e:	0019      	movs	r1, r3
 8012b30:	b027      	add	sp, #156	; 0x9c
 8012b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b34:	2a2b      	cmp	r2, #43	; 0x2b
 8012b36:	d016      	beq.n	8012b66 <_strtod_l+0xd6>
 8012b38:	2a2d      	cmp	r2, #45	; 0x2d
 8012b3a:	d003      	beq.n	8012b44 <_strtod_l+0xb4>
 8012b3c:	2a20      	cmp	r2, #32
 8012b3e:	d1c3      	bne.n	8012ac8 <_strtod_l+0x38>
 8012b40:	3301      	adds	r3, #1
 8012b42:	e7b8      	b.n	8012ab6 <_strtod_l+0x26>
 8012b44:	2201      	movs	r2, #1
 8012b46:	9213      	str	r2, [sp, #76]	; 0x4c
 8012b48:	1c5a      	adds	r2, r3, #1
 8012b4a:	9221      	str	r2, [sp, #132]	; 0x84
 8012b4c:	785b      	ldrb	r3, [r3, #1]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1bc      	bne.n	8012acc <_strtod_l+0x3c>
 8012b52:	9b06      	ldr	r3, [sp, #24]
 8012b54:	9321      	str	r3, [sp, #132]	; 0x84
 8012b56:	2300      	movs	r3, #0
 8012b58:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1db      	bne.n	8012b18 <_strtod_l+0x88>
 8012b60:	0032      	movs	r2, r6
 8012b62:	003b      	movs	r3, r7
 8012b64:	e7e2      	b.n	8012b2c <_strtod_l+0x9c>
 8012b66:	2200      	movs	r2, #0
 8012b68:	e7ed      	b.n	8012b46 <_strtod_l+0xb6>
 8012b6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012b6c:	2a00      	cmp	r2, #0
 8012b6e:	d007      	beq.n	8012b80 <_strtod_l+0xf0>
 8012b70:	2135      	movs	r1, #53	; 0x35
 8012b72:	a824      	add	r0, sp, #144	; 0x90
 8012b74:	f003 ff7d 	bl	8016a72 <__copybits>
 8012b78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012b7a:	9804      	ldr	r0, [sp, #16]
 8012b7c:	f003 fc12 	bl	80163a4 <_Bfree>
 8012b80:	1e68      	subs	r0, r5, #1
 8012b82:	2804      	cmp	r0, #4
 8012b84:	d806      	bhi.n	8012b94 <_strtod_l+0x104>
 8012b86:	f7ed facf 	bl	8000128 <__gnu_thumb1_case_uqi>
 8012b8a:	030c      	.short	0x030c
 8012b8c:	1917      	.short	0x1917
 8012b8e:	0c          	.byte	0x0c
 8012b8f:	00          	.byte	0x00
 8012b90:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012b92:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012b94:	9b05      	ldr	r3, [sp, #20]
 8012b96:	071b      	lsls	r3, r3, #28
 8012b98:	d5bb      	bpl.n	8012b12 <_strtod_l+0x82>
 8012b9a:	2380      	movs	r3, #128	; 0x80
 8012b9c:	061b      	lsls	r3, r3, #24
 8012b9e:	431f      	orrs	r7, r3
 8012ba0:	e7b7      	b.n	8012b12 <_strtod_l+0x82>
 8012ba2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012ba4:	4a68      	ldr	r2, [pc, #416]	; (8012d48 <_strtod_l+0x2b8>)
 8012ba6:	4969      	ldr	r1, [pc, #420]	; (8012d4c <_strtod_l+0x2bc>)
 8012ba8:	401a      	ands	r2, r3
 8012baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012bac:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012bae:	185b      	adds	r3, r3, r1
 8012bb0:	051b      	lsls	r3, r3, #20
 8012bb2:	431a      	orrs	r2, r3
 8012bb4:	0017      	movs	r7, r2
 8012bb6:	e7ed      	b.n	8012b94 <_strtod_l+0x104>
 8012bb8:	4f65      	ldr	r7, [pc, #404]	; (8012d50 <_strtod_l+0x2c0>)
 8012bba:	e7eb      	b.n	8012b94 <_strtod_l+0x104>
 8012bbc:	2601      	movs	r6, #1
 8012bbe:	4f65      	ldr	r7, [pc, #404]	; (8012d54 <_strtod_l+0x2c4>)
 8012bc0:	4276      	negs	r6, r6
 8012bc2:	e7e7      	b.n	8012b94 <_strtod_l+0x104>
 8012bc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	9221      	str	r2, [sp, #132]	; 0x84
 8012bca:	785b      	ldrb	r3, [r3, #1]
 8012bcc:	2b30      	cmp	r3, #48	; 0x30
 8012bce:	d0f9      	beq.n	8012bc4 <_strtod_l+0x134>
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d09e      	beq.n	8012b12 <_strtod_l+0x82>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8012bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bda:	220a      	movs	r2, #10
 8012bdc:	9312      	str	r3, [sp, #72]	; 0x48
 8012bde:	2300      	movs	r3, #0
 8012be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012be2:	9308      	str	r3, [sp, #32]
 8012be4:	930a      	str	r3, [sp, #40]	; 0x28
 8012be6:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012be8:	7804      	ldrb	r4, [r0, #0]
 8012bea:	0023      	movs	r3, r4
 8012bec:	3b30      	subs	r3, #48	; 0x30
 8012bee:	b2d9      	uxtb	r1, r3
 8012bf0:	2909      	cmp	r1, #9
 8012bf2:	d934      	bls.n	8012c5e <_strtod_l+0x1ce>
 8012bf4:	9a05      	ldr	r2, [sp, #20]
 8012bf6:	6829      	ldr	r1, [r5, #0]
 8012bf8:	f7ff ff0c 	bl	8012a14 <strncmp>
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d040      	beq.n	8012c82 <_strtod_l+0x1f2>
 8012c00:	2000      	movs	r0, #0
 8012c02:	0023      	movs	r3, r4
 8012c04:	4684      	mov	ip, r0
 8012c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c08:	9007      	str	r0, [sp, #28]
 8012c0a:	9205      	str	r2, [sp, #20]
 8012c0c:	2220      	movs	r2, #32
 8012c0e:	0019      	movs	r1, r3
 8012c10:	4391      	bics	r1, r2
 8012c12:	000a      	movs	r2, r1
 8012c14:	2100      	movs	r1, #0
 8012c16:	2a45      	cmp	r2, #69	; 0x45
 8012c18:	d000      	beq.n	8012c1c <_strtod_l+0x18c>
 8012c1a:	e0bf      	b.n	8012d9c <_strtod_l+0x30c>
 8012c1c:	9b05      	ldr	r3, [sp, #20]
 8012c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c20:	4303      	orrs	r3, r0
 8012c22:	4313      	orrs	r3, r2
 8012c24:	428b      	cmp	r3, r1
 8012c26:	d094      	beq.n	8012b52 <_strtod_l+0xc2>
 8012c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c2a:	9306      	str	r3, [sp, #24]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	9321      	str	r3, [sp, #132]	; 0x84
 8012c30:	9b06      	ldr	r3, [sp, #24]
 8012c32:	785b      	ldrb	r3, [r3, #1]
 8012c34:	2b2b      	cmp	r3, #43	; 0x2b
 8012c36:	d100      	bne.n	8012c3a <_strtod_l+0x1aa>
 8012c38:	e082      	b.n	8012d40 <_strtod_l+0x2b0>
 8012c3a:	000c      	movs	r4, r1
 8012c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8012c3e:	d105      	bne.n	8012c4c <_strtod_l+0x1bc>
 8012c40:	2401      	movs	r4, #1
 8012c42:	9b06      	ldr	r3, [sp, #24]
 8012c44:	3302      	adds	r3, #2
 8012c46:	9321      	str	r3, [sp, #132]	; 0x84
 8012c48:	9b06      	ldr	r3, [sp, #24]
 8012c4a:	789b      	ldrb	r3, [r3, #2]
 8012c4c:	001a      	movs	r2, r3
 8012c4e:	3a30      	subs	r2, #48	; 0x30
 8012c50:	2a09      	cmp	r2, #9
 8012c52:	d800      	bhi.n	8012c56 <_strtod_l+0x1c6>
 8012c54:	e084      	b.n	8012d60 <_strtod_l+0x2d0>
 8012c56:	9a06      	ldr	r2, [sp, #24]
 8012c58:	2100      	movs	r1, #0
 8012c5a:	9221      	str	r2, [sp, #132]	; 0x84
 8012c5c:	e09e      	b.n	8012d9c <_strtod_l+0x30c>
 8012c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c60:	2908      	cmp	r1, #8
 8012c62:	dc09      	bgt.n	8012c78 <_strtod_l+0x1e8>
 8012c64:	9908      	ldr	r1, [sp, #32]
 8012c66:	4351      	muls	r1, r2
 8012c68:	18cb      	adds	r3, r1, r3
 8012c6a:	9308      	str	r3, [sp, #32]
 8012c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c6e:	3001      	adds	r0, #1
 8012c70:	3301      	adds	r3, #1
 8012c72:	930a      	str	r3, [sp, #40]	; 0x28
 8012c74:	9021      	str	r0, [sp, #132]	; 0x84
 8012c76:	e7b6      	b.n	8012be6 <_strtod_l+0x156>
 8012c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c7a:	4351      	muls	r1, r2
 8012c7c:	18cb      	adds	r3, r1, r3
 8012c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c80:	e7f4      	b.n	8012c6c <_strtod_l+0x1dc>
 8012c82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c84:	9b05      	ldr	r3, [sp, #20]
 8012c86:	4694      	mov	ip, r2
 8012c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c8a:	4463      	add	r3, ip
 8012c8c:	9321      	str	r3, [sp, #132]	; 0x84
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	2a00      	cmp	r2, #0
 8012c92:	d036      	beq.n	8012d02 <_strtod_l+0x272>
 8012c94:	4684      	mov	ip, r0
 8012c96:	9205      	str	r2, [sp, #20]
 8012c98:	001a      	movs	r2, r3
 8012c9a:	3a30      	subs	r2, #48	; 0x30
 8012c9c:	2a09      	cmp	r2, #9
 8012c9e:	d912      	bls.n	8012cc6 <_strtod_l+0x236>
 8012ca0:	2201      	movs	r2, #1
 8012ca2:	9207      	str	r2, [sp, #28]
 8012ca4:	e7b2      	b.n	8012c0c <_strtod_l+0x17c>
 8012ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ca8:	3001      	adds	r0, #1
 8012caa:	1c5a      	adds	r2, r3, #1
 8012cac:	9221      	str	r2, [sp, #132]	; 0x84
 8012cae:	785b      	ldrb	r3, [r3, #1]
 8012cb0:	2b30      	cmp	r3, #48	; 0x30
 8012cb2:	d0f8      	beq.n	8012ca6 <_strtod_l+0x216>
 8012cb4:	001a      	movs	r2, r3
 8012cb6:	3a31      	subs	r2, #49	; 0x31
 8012cb8:	2a08      	cmp	r2, #8
 8012cba:	d83c      	bhi.n	8012d36 <_strtod_l+0x2a6>
 8012cbc:	4684      	mov	ip, r0
 8012cbe:	2000      	movs	r0, #0
 8012cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cc2:	9005      	str	r0, [sp, #20]
 8012cc4:	9212      	str	r2, [sp, #72]	; 0x48
 8012cc6:	3b30      	subs	r3, #48	; 0x30
 8012cc8:	1c42      	adds	r2, r0, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d013      	beq.n	8012cf6 <_strtod_l+0x266>
 8012cce:	210a      	movs	r1, #10
 8012cd0:	4494      	add	ip, r2
 8012cd2:	9a05      	ldr	r2, [sp, #20]
 8012cd4:	1885      	adds	r5, r0, r2
 8012cd6:	42aa      	cmp	r2, r5
 8012cd8:	d115      	bne.n	8012d06 <_strtod_l+0x276>
 8012cda:	9905      	ldr	r1, [sp, #20]
 8012cdc:	9a05      	ldr	r2, [sp, #20]
 8012cde:	3101      	adds	r1, #1
 8012ce0:	1809      	adds	r1, r1, r0
 8012ce2:	1812      	adds	r2, r2, r0
 8012ce4:	9105      	str	r1, [sp, #20]
 8012ce6:	2a08      	cmp	r2, #8
 8012ce8:	dc1b      	bgt.n	8012d22 <_strtod_l+0x292>
 8012cea:	220a      	movs	r2, #10
 8012cec:	9908      	ldr	r1, [sp, #32]
 8012cee:	434a      	muls	r2, r1
 8012cf0:	189b      	adds	r3, r3, r2
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	9308      	str	r3, [sp, #32]
 8012cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cf8:	0010      	movs	r0, r2
 8012cfa:	1c59      	adds	r1, r3, #1
 8012cfc:	9121      	str	r1, [sp, #132]	; 0x84
 8012cfe:	785b      	ldrb	r3, [r3, #1]
 8012d00:	e7ca      	b.n	8012c98 <_strtod_l+0x208>
 8012d02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012d04:	e7d4      	b.n	8012cb0 <_strtod_l+0x220>
 8012d06:	1c54      	adds	r4, r2, #1
 8012d08:	2a08      	cmp	r2, #8
 8012d0a:	dc04      	bgt.n	8012d16 <_strtod_l+0x286>
 8012d0c:	9a08      	ldr	r2, [sp, #32]
 8012d0e:	434a      	muls	r2, r1
 8012d10:	9208      	str	r2, [sp, #32]
 8012d12:	0022      	movs	r2, r4
 8012d14:	e7df      	b.n	8012cd6 <_strtod_l+0x246>
 8012d16:	2c10      	cmp	r4, #16
 8012d18:	dcfb      	bgt.n	8012d12 <_strtod_l+0x282>
 8012d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d1c:	434a      	muls	r2, r1
 8012d1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d20:	e7f7      	b.n	8012d12 <_strtod_l+0x282>
 8012d22:	9905      	ldr	r1, [sp, #20]
 8012d24:	2200      	movs	r2, #0
 8012d26:	2910      	cmp	r1, #16
 8012d28:	dce5      	bgt.n	8012cf6 <_strtod_l+0x266>
 8012d2a:	210a      	movs	r1, #10
 8012d2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012d2e:	4341      	muls	r1, r0
 8012d30:	185b      	adds	r3, r3, r1
 8012d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d34:	e7df      	b.n	8012cf6 <_strtod_l+0x266>
 8012d36:	2200      	movs	r2, #0
 8012d38:	4694      	mov	ip, r2
 8012d3a:	9205      	str	r2, [sp, #20]
 8012d3c:	3201      	adds	r2, #1
 8012d3e:	e7b0      	b.n	8012ca2 <_strtod_l+0x212>
 8012d40:	000c      	movs	r4, r1
 8012d42:	e77e      	b.n	8012c42 <_strtod_l+0x1b2>
 8012d44:	08019bf4 	.word	0x08019bf4
 8012d48:	ffefffff 	.word	0xffefffff
 8012d4c:	00000433 	.word	0x00000433
 8012d50:	7ff00000 	.word	0x7ff00000
 8012d54:	7fffffff 	.word	0x7fffffff
 8012d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d5a:	1c5a      	adds	r2, r3, #1
 8012d5c:	9221      	str	r2, [sp, #132]	; 0x84
 8012d5e:	785b      	ldrb	r3, [r3, #1]
 8012d60:	2b30      	cmp	r3, #48	; 0x30
 8012d62:	d0f9      	beq.n	8012d58 <_strtod_l+0x2c8>
 8012d64:	001a      	movs	r2, r3
 8012d66:	3a31      	subs	r2, #49	; 0x31
 8012d68:	2100      	movs	r1, #0
 8012d6a:	2a08      	cmp	r2, #8
 8012d6c:	d816      	bhi.n	8012d9c <_strtod_l+0x30c>
 8012d6e:	3b30      	subs	r3, #48	; 0x30
 8012d70:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8012d72:	930e      	str	r3, [sp, #56]	; 0x38
 8012d74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d76:	1c59      	adds	r1, r3, #1
 8012d78:	9121      	str	r1, [sp, #132]	; 0x84
 8012d7a:	785b      	ldrb	r3, [r3, #1]
 8012d7c:	001a      	movs	r2, r3
 8012d7e:	3a30      	subs	r2, #48	; 0x30
 8012d80:	2a09      	cmp	r2, #9
 8012d82:	d932      	bls.n	8012dea <_strtod_l+0x35a>
 8012d84:	1b4a      	subs	r2, r1, r5
 8012d86:	4dad      	ldr	r5, [pc, #692]	; (801303c <_strtod_l+0x5ac>)
 8012d88:	0029      	movs	r1, r5
 8012d8a:	2a08      	cmp	r2, #8
 8012d8c:	dc03      	bgt.n	8012d96 <_strtod_l+0x306>
 8012d8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012d90:	42a9      	cmp	r1, r5
 8012d92:	dd00      	ble.n	8012d96 <_strtod_l+0x306>
 8012d94:	0029      	movs	r1, r5
 8012d96:	2c00      	cmp	r4, #0
 8012d98:	d000      	beq.n	8012d9c <_strtod_l+0x30c>
 8012d9a:	4249      	negs	r1, r1
 8012d9c:	9a05      	ldr	r2, [sp, #20]
 8012d9e:	2a00      	cmp	r2, #0
 8012da0:	d149      	bne.n	8012e36 <_strtod_l+0x3a6>
 8012da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012da4:	4310      	orrs	r0, r2
 8012da6:	d000      	beq.n	8012daa <_strtod_l+0x31a>
 8012da8:	e6b3      	b.n	8012b12 <_strtod_l+0x82>
 8012daa:	9a07      	ldr	r2, [sp, #28]
 8012dac:	2a00      	cmp	r2, #0
 8012dae:	d000      	beq.n	8012db2 <_strtod_l+0x322>
 8012db0:	e6cf      	b.n	8012b52 <_strtod_l+0xc2>
 8012db2:	2b4e      	cmp	r3, #78	; 0x4e
 8012db4:	d025      	beq.n	8012e02 <_strtod_l+0x372>
 8012db6:	dc1f      	bgt.n	8012df8 <_strtod_l+0x368>
 8012db8:	2b49      	cmp	r3, #73	; 0x49
 8012dba:	d000      	beq.n	8012dbe <_strtod_l+0x32e>
 8012dbc:	e6c9      	b.n	8012b52 <_strtod_l+0xc2>
 8012dbe:	49a0      	ldr	r1, [pc, #640]	; (8013040 <_strtod_l+0x5b0>)
 8012dc0:	a821      	add	r0, sp, #132	; 0x84
 8012dc2:	f003 f9ed 	bl	80161a0 <__match>
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	d100      	bne.n	8012dcc <_strtod_l+0x33c>
 8012dca:	e6c2      	b.n	8012b52 <_strtod_l+0xc2>
 8012dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012dce:	499d      	ldr	r1, [pc, #628]	; (8013044 <_strtod_l+0x5b4>)
 8012dd0:	3b01      	subs	r3, #1
 8012dd2:	a821      	add	r0, sp, #132	; 0x84
 8012dd4:	9321      	str	r3, [sp, #132]	; 0x84
 8012dd6:	f003 f9e3 	bl	80161a0 <__match>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d102      	bne.n	8012de4 <_strtod_l+0x354>
 8012dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012de0:	3301      	adds	r3, #1
 8012de2:	9321      	str	r3, [sp, #132]	; 0x84
 8012de4:	4f98      	ldr	r7, [pc, #608]	; (8013048 <_strtod_l+0x5b8>)
 8012de6:	2600      	movs	r6, #0
 8012de8:	e693      	b.n	8012b12 <_strtod_l+0x82>
 8012dea:	220a      	movs	r2, #10
 8012dec:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012dee:	434a      	muls	r2, r1
 8012df0:	18d2      	adds	r2, r2, r3
 8012df2:	3a30      	subs	r2, #48	; 0x30
 8012df4:	920e      	str	r2, [sp, #56]	; 0x38
 8012df6:	e7bd      	b.n	8012d74 <_strtod_l+0x2e4>
 8012df8:	2b69      	cmp	r3, #105	; 0x69
 8012dfa:	d0e0      	beq.n	8012dbe <_strtod_l+0x32e>
 8012dfc:	2b6e      	cmp	r3, #110	; 0x6e
 8012dfe:	d000      	beq.n	8012e02 <_strtod_l+0x372>
 8012e00:	e6a7      	b.n	8012b52 <_strtod_l+0xc2>
 8012e02:	4992      	ldr	r1, [pc, #584]	; (801304c <_strtod_l+0x5bc>)
 8012e04:	a821      	add	r0, sp, #132	; 0x84
 8012e06:	f003 f9cb 	bl	80161a0 <__match>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	d100      	bne.n	8012e10 <_strtod_l+0x380>
 8012e0e:	e6a0      	b.n	8012b52 <_strtod_l+0xc2>
 8012e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	2b28      	cmp	r3, #40	; 0x28
 8012e16:	d10c      	bne.n	8012e32 <_strtod_l+0x3a2>
 8012e18:	aa24      	add	r2, sp, #144	; 0x90
 8012e1a:	498d      	ldr	r1, [pc, #564]	; (8013050 <_strtod_l+0x5c0>)
 8012e1c:	a821      	add	r0, sp, #132	; 0x84
 8012e1e:	f003 f9d3 	bl	80161c8 <__hexnan>
 8012e22:	2805      	cmp	r0, #5
 8012e24:	d105      	bne.n	8012e32 <_strtod_l+0x3a2>
 8012e26:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012e28:	4a87      	ldr	r2, [pc, #540]	; (8013048 <_strtod_l+0x5b8>)
 8012e2a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012e2c:	431a      	orrs	r2, r3
 8012e2e:	0017      	movs	r7, r2
 8012e30:	e66f      	b.n	8012b12 <_strtod_l+0x82>
 8012e32:	4f88      	ldr	r7, [pc, #544]	; (8013054 <_strtod_l+0x5c4>)
 8012e34:	e7d7      	b.n	8012de6 <_strtod_l+0x356>
 8012e36:	4663      	mov	r3, ip
 8012e38:	1acb      	subs	r3, r1, r3
 8012e3a:	9307      	str	r3, [sp, #28]
 8012e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d101      	bne.n	8012e46 <_strtod_l+0x3b6>
 8012e42:	9b05      	ldr	r3, [sp, #20]
 8012e44:	930a      	str	r3, [sp, #40]	; 0x28
 8012e46:	9c05      	ldr	r4, [sp, #20]
 8012e48:	2c10      	cmp	r4, #16
 8012e4a:	dd00      	ble.n	8012e4e <_strtod_l+0x3be>
 8012e4c:	2410      	movs	r4, #16
 8012e4e:	9808      	ldr	r0, [sp, #32]
 8012e50:	f7ef fe36 	bl	8002ac0 <__aeabi_ui2d>
 8012e54:	9b05      	ldr	r3, [sp, #20]
 8012e56:	0006      	movs	r6, r0
 8012e58:	000f      	movs	r7, r1
 8012e5a:	2b09      	cmp	r3, #9
 8012e5c:	dc15      	bgt.n	8012e8a <_strtod_l+0x3fa>
 8012e5e:	9b07      	ldr	r3, [sp, #28]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d100      	bne.n	8012e66 <_strtod_l+0x3d6>
 8012e64:	e655      	b.n	8012b12 <_strtod_l+0x82>
 8012e66:	9b07      	ldr	r3, [sp, #28]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	dc00      	bgt.n	8012e6e <_strtod_l+0x3de>
 8012e6c:	e07d      	b.n	8012f6a <_strtod_l+0x4da>
 8012e6e:	2b16      	cmp	r3, #22
 8012e70:	dc62      	bgt.n	8012f38 <_strtod_l+0x4a8>
 8012e72:	00dc      	lsls	r4, r3, #3
 8012e74:	4b78      	ldr	r3, [pc, #480]	; (8013058 <_strtod_l+0x5c8>)
 8012e76:	0032      	movs	r2, r6
 8012e78:	1919      	adds	r1, r3, r4
 8012e7a:	003b      	movs	r3, r7
 8012e7c:	6808      	ldr	r0, [r1, #0]
 8012e7e:	6849      	ldr	r1, [r1, #4]
 8012e80:	f7ee ffd8 	bl	8001e34 <__aeabi_dmul>
 8012e84:	0006      	movs	r6, r0
 8012e86:	000f      	movs	r7, r1
 8012e88:	e643      	b.n	8012b12 <_strtod_l+0x82>
 8012e8a:	0022      	movs	r2, r4
 8012e8c:	4b72      	ldr	r3, [pc, #456]	; (8013058 <_strtod_l+0x5c8>)
 8012e8e:	3a09      	subs	r2, #9
 8012e90:	00d2      	lsls	r2, r2, #3
 8012e92:	189b      	adds	r3, r3, r2
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	f7ee ffcc 	bl	8001e34 <__aeabi_dmul>
 8012e9c:	0006      	movs	r6, r0
 8012e9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012ea0:	000f      	movs	r7, r1
 8012ea2:	f7ef fe0d 	bl	8002ac0 <__aeabi_ui2d>
 8012ea6:	000b      	movs	r3, r1
 8012ea8:	0002      	movs	r2, r0
 8012eaa:	0039      	movs	r1, r7
 8012eac:	0030      	movs	r0, r6
 8012eae:	f7ee f89b 	bl	8000fe8 <__aeabi_dadd>
 8012eb2:	9b05      	ldr	r3, [sp, #20]
 8012eb4:	0006      	movs	r6, r0
 8012eb6:	000f      	movs	r7, r1
 8012eb8:	2b0f      	cmp	r3, #15
 8012eba:	ddd0      	ble.n	8012e5e <_strtod_l+0x3ce>
 8012ebc:	9b05      	ldr	r3, [sp, #20]
 8012ebe:	1b1c      	subs	r4, r3, r4
 8012ec0:	9b07      	ldr	r3, [sp, #28]
 8012ec2:	18e4      	adds	r4, r4, r3
 8012ec4:	2c00      	cmp	r4, #0
 8012ec6:	dc00      	bgt.n	8012eca <_strtod_l+0x43a>
 8012ec8:	e094      	b.n	8012ff4 <_strtod_l+0x564>
 8012eca:	230f      	movs	r3, #15
 8012ecc:	4023      	ands	r3, r4
 8012ece:	d00a      	beq.n	8012ee6 <_strtod_l+0x456>
 8012ed0:	4961      	ldr	r1, [pc, #388]	; (8013058 <_strtod_l+0x5c8>)
 8012ed2:	00db      	lsls	r3, r3, #3
 8012ed4:	18c9      	adds	r1, r1, r3
 8012ed6:	0032      	movs	r2, r6
 8012ed8:	6808      	ldr	r0, [r1, #0]
 8012eda:	6849      	ldr	r1, [r1, #4]
 8012edc:	003b      	movs	r3, r7
 8012ede:	f7ee ffa9 	bl	8001e34 <__aeabi_dmul>
 8012ee2:	0006      	movs	r6, r0
 8012ee4:	000f      	movs	r7, r1
 8012ee6:	230f      	movs	r3, #15
 8012ee8:	439c      	bics	r4, r3
 8012eea:	d06e      	beq.n	8012fca <_strtod_l+0x53a>
 8012eec:	3326      	adds	r3, #38	; 0x26
 8012eee:	33ff      	adds	r3, #255	; 0xff
 8012ef0:	429c      	cmp	r4, r3
 8012ef2:	dd48      	ble.n	8012f86 <_strtod_l+0x4f6>
 8012ef4:	2400      	movs	r4, #0
 8012ef6:	9405      	str	r4, [sp, #20]
 8012ef8:	940b      	str	r4, [sp, #44]	; 0x2c
 8012efa:	940a      	str	r4, [sp, #40]	; 0x28
 8012efc:	2322      	movs	r3, #34	; 0x22
 8012efe:	2600      	movs	r6, #0
 8012f00:	9a04      	ldr	r2, [sp, #16]
 8012f02:	4f51      	ldr	r7, [pc, #324]	; (8013048 <_strtod_l+0x5b8>)
 8012f04:	6013      	str	r3, [r2, #0]
 8012f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f08:	42b3      	cmp	r3, r6
 8012f0a:	d100      	bne.n	8012f0e <_strtod_l+0x47e>
 8012f0c:	e601      	b.n	8012b12 <_strtod_l+0x82>
 8012f0e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012f10:	9804      	ldr	r0, [sp, #16]
 8012f12:	f003 fa47 	bl	80163a4 <_Bfree>
 8012f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f18:	9804      	ldr	r0, [sp, #16]
 8012f1a:	f003 fa43 	bl	80163a4 <_Bfree>
 8012f1e:	9905      	ldr	r1, [sp, #20]
 8012f20:	9804      	ldr	r0, [sp, #16]
 8012f22:	f003 fa3f 	bl	80163a4 <_Bfree>
 8012f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f28:	9804      	ldr	r0, [sp, #16]
 8012f2a:	f003 fa3b 	bl	80163a4 <_Bfree>
 8012f2e:	0021      	movs	r1, r4
 8012f30:	9804      	ldr	r0, [sp, #16]
 8012f32:	f003 fa37 	bl	80163a4 <_Bfree>
 8012f36:	e5ec      	b.n	8012b12 <_strtod_l+0x82>
 8012f38:	2325      	movs	r3, #37	; 0x25
 8012f3a:	9a05      	ldr	r2, [sp, #20]
 8012f3c:	1a9b      	subs	r3, r3, r2
 8012f3e:	9a07      	ldr	r2, [sp, #28]
 8012f40:	4293      	cmp	r3, r2
 8012f42:	dbbb      	blt.n	8012ebc <_strtod_l+0x42c>
 8012f44:	230f      	movs	r3, #15
 8012f46:	9a05      	ldr	r2, [sp, #20]
 8012f48:	4c43      	ldr	r4, [pc, #268]	; (8013058 <_strtod_l+0x5c8>)
 8012f4a:	1a9d      	subs	r5, r3, r2
 8012f4c:	00e9      	lsls	r1, r5, #3
 8012f4e:	1861      	adds	r1, r4, r1
 8012f50:	0032      	movs	r2, r6
 8012f52:	6808      	ldr	r0, [r1, #0]
 8012f54:	6849      	ldr	r1, [r1, #4]
 8012f56:	003b      	movs	r3, r7
 8012f58:	f7ee ff6c 	bl	8001e34 <__aeabi_dmul>
 8012f5c:	9b07      	ldr	r3, [sp, #28]
 8012f5e:	1b5e      	subs	r6, r3, r5
 8012f60:	00f6      	lsls	r6, r6, #3
 8012f62:	19a6      	adds	r6, r4, r6
 8012f64:	6832      	ldr	r2, [r6, #0]
 8012f66:	6873      	ldr	r3, [r6, #4]
 8012f68:	e78a      	b.n	8012e80 <_strtod_l+0x3f0>
 8012f6a:	9b07      	ldr	r3, [sp, #28]
 8012f6c:	3316      	adds	r3, #22
 8012f6e:	dba5      	blt.n	8012ebc <_strtod_l+0x42c>
 8012f70:	9b07      	ldr	r3, [sp, #28]
 8012f72:	0030      	movs	r0, r6
 8012f74:	00da      	lsls	r2, r3, #3
 8012f76:	4b38      	ldr	r3, [pc, #224]	; (8013058 <_strtod_l+0x5c8>)
 8012f78:	0039      	movs	r1, r7
 8012f7a:	1a9b      	subs	r3, r3, r2
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	f7ee fb4e 	bl	8001620 <__aeabi_ddiv>
 8012f84:	e77e      	b.n	8012e84 <_strtod_l+0x3f4>
 8012f86:	2300      	movs	r3, #0
 8012f88:	0030      	movs	r0, r6
 8012f8a:	0039      	movs	r1, r7
 8012f8c:	001d      	movs	r5, r3
 8012f8e:	1124      	asrs	r4, r4, #4
 8012f90:	2c01      	cmp	r4, #1
 8012f92:	dc1d      	bgt.n	8012fd0 <_strtod_l+0x540>
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d001      	beq.n	8012f9c <_strtod_l+0x50c>
 8012f98:	0006      	movs	r6, r0
 8012f9a:	000f      	movs	r7, r1
 8012f9c:	4b2f      	ldr	r3, [pc, #188]	; (801305c <_strtod_l+0x5cc>)
 8012f9e:	00ed      	lsls	r5, r5, #3
 8012fa0:	18ff      	adds	r7, r7, r3
 8012fa2:	4b2f      	ldr	r3, [pc, #188]	; (8013060 <_strtod_l+0x5d0>)
 8012fa4:	0032      	movs	r2, r6
 8012fa6:	195d      	adds	r5, r3, r5
 8012fa8:	6828      	ldr	r0, [r5, #0]
 8012faa:	6869      	ldr	r1, [r5, #4]
 8012fac:	003b      	movs	r3, r7
 8012fae:	f7ee ff41 	bl	8001e34 <__aeabi_dmul>
 8012fb2:	4b25      	ldr	r3, [pc, #148]	; (8013048 <_strtod_l+0x5b8>)
 8012fb4:	4a2b      	ldr	r2, [pc, #172]	; (8013064 <_strtod_l+0x5d4>)
 8012fb6:	0006      	movs	r6, r0
 8012fb8:	400b      	ands	r3, r1
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d89a      	bhi.n	8012ef4 <_strtod_l+0x464>
 8012fbe:	4a2a      	ldr	r2, [pc, #168]	; (8013068 <_strtod_l+0x5d8>)
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d913      	bls.n	8012fec <_strtod_l+0x55c>
 8012fc4:	2601      	movs	r6, #1
 8012fc6:	4f29      	ldr	r7, [pc, #164]	; (801306c <_strtod_l+0x5dc>)
 8012fc8:	4276      	negs	r6, r6
 8012fca:	2300      	movs	r3, #0
 8012fcc:	9306      	str	r3, [sp, #24]
 8012fce:	e07b      	b.n	80130c8 <_strtod_l+0x638>
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	4214      	tst	r4, r2
 8012fd4:	d007      	beq.n	8012fe6 <_strtod_l+0x556>
 8012fd6:	4a22      	ldr	r2, [pc, #136]	; (8013060 <_strtod_l+0x5d0>)
 8012fd8:	00eb      	lsls	r3, r5, #3
 8012fda:	189b      	adds	r3, r3, r2
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	f7ee ff28 	bl	8001e34 <__aeabi_dmul>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	3501      	adds	r5, #1
 8012fe8:	1064      	asrs	r4, r4, #1
 8012fea:	e7d1      	b.n	8012f90 <_strtod_l+0x500>
 8012fec:	23d4      	movs	r3, #212	; 0xd4
 8012fee:	049b      	lsls	r3, r3, #18
 8012ff0:	18cf      	adds	r7, r1, r3
 8012ff2:	e7ea      	b.n	8012fca <_strtod_l+0x53a>
 8012ff4:	2c00      	cmp	r4, #0
 8012ff6:	d0e8      	beq.n	8012fca <_strtod_l+0x53a>
 8012ff8:	230f      	movs	r3, #15
 8012ffa:	4264      	negs	r4, r4
 8012ffc:	4023      	ands	r3, r4
 8012ffe:	d00a      	beq.n	8013016 <_strtod_l+0x586>
 8013000:	4a15      	ldr	r2, [pc, #84]	; (8013058 <_strtod_l+0x5c8>)
 8013002:	00db      	lsls	r3, r3, #3
 8013004:	18d3      	adds	r3, r2, r3
 8013006:	0030      	movs	r0, r6
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	0039      	movs	r1, r7
 801300e:	f7ee fb07 	bl	8001620 <__aeabi_ddiv>
 8013012:	0006      	movs	r6, r0
 8013014:	000f      	movs	r7, r1
 8013016:	1124      	asrs	r4, r4, #4
 8013018:	d0d7      	beq.n	8012fca <_strtod_l+0x53a>
 801301a:	2c1f      	cmp	r4, #31
 801301c:	dd28      	ble.n	8013070 <_strtod_l+0x5e0>
 801301e:	2400      	movs	r4, #0
 8013020:	9405      	str	r4, [sp, #20]
 8013022:	940b      	str	r4, [sp, #44]	; 0x2c
 8013024:	940a      	str	r4, [sp, #40]	; 0x28
 8013026:	2322      	movs	r3, #34	; 0x22
 8013028:	9a04      	ldr	r2, [sp, #16]
 801302a:	2600      	movs	r6, #0
 801302c:	6013      	str	r3, [r2, #0]
 801302e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013030:	2700      	movs	r7, #0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d000      	beq.n	8013038 <_strtod_l+0x5a8>
 8013036:	e76a      	b.n	8012f0e <_strtod_l+0x47e>
 8013038:	e56b      	b.n	8012b12 <_strtod_l+0x82>
 801303a:	46c0      	nop			; (mov r8, r8)
 801303c:	00004e1f 	.word	0x00004e1f
 8013040:	08019c4d 	.word	0x08019c4d
 8013044:	08019da0 	.word	0x08019da0
 8013048:	7ff00000 	.word	0x7ff00000
 801304c:	08019c55 	.word	0x08019c55
 8013050:	08019c08 	.word	0x08019c08
 8013054:	fff80000 	.word	0xfff80000
 8013058:	08019dd8 	.word	0x08019dd8
 801305c:	fcb00000 	.word	0xfcb00000
 8013060:	08019db0 	.word	0x08019db0
 8013064:	7ca00000 	.word	0x7ca00000
 8013068:	7c900000 	.word	0x7c900000
 801306c:	7fefffff 	.word	0x7fefffff
 8013070:	2310      	movs	r3, #16
 8013072:	4023      	ands	r3, r4
 8013074:	9306      	str	r3, [sp, #24]
 8013076:	d001      	beq.n	801307c <_strtod_l+0x5ec>
 8013078:	236a      	movs	r3, #106	; 0x6a
 801307a:	9306      	str	r3, [sp, #24]
 801307c:	2300      	movs	r3, #0
 801307e:	0030      	movs	r0, r6
 8013080:	0039      	movs	r1, r7
 8013082:	001d      	movs	r5, r3
 8013084:	2c00      	cmp	r4, #0
 8013086:	dd00      	ble.n	801308a <_strtod_l+0x5fa>
 8013088:	e10e      	b.n	80132a8 <_strtod_l+0x818>
 801308a:	2b00      	cmp	r3, #0
 801308c:	d001      	beq.n	8013092 <_strtod_l+0x602>
 801308e:	0006      	movs	r6, r0
 8013090:	000f      	movs	r7, r1
 8013092:	9b06      	ldr	r3, [sp, #24]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d00f      	beq.n	80130b8 <_strtod_l+0x628>
 8013098:	236b      	movs	r3, #107	; 0x6b
 801309a:	0079      	lsls	r1, r7, #1
 801309c:	0d49      	lsrs	r1, r1, #21
 801309e:	003a      	movs	r2, r7
 80130a0:	1a5b      	subs	r3, r3, r1
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	dd08      	ble.n	80130b8 <_strtod_l+0x628>
 80130a6:	2b1f      	cmp	r3, #31
 80130a8:	dc00      	bgt.n	80130ac <_strtod_l+0x61c>
 80130aa:	e112      	b.n	80132d2 <_strtod_l+0x842>
 80130ac:	2600      	movs	r6, #0
 80130ae:	2b34      	cmp	r3, #52	; 0x34
 80130b0:	dc00      	bgt.n	80130b4 <_strtod_l+0x624>
 80130b2:	e107      	b.n	80132c4 <_strtod_l+0x834>
 80130b4:	27dc      	movs	r7, #220	; 0xdc
 80130b6:	04bf      	lsls	r7, r7, #18
 80130b8:	2200      	movs	r2, #0
 80130ba:	2300      	movs	r3, #0
 80130bc:	0030      	movs	r0, r6
 80130be:	0039      	movs	r1, r7
 80130c0:	f7ed f9cc 	bl	800045c <__aeabi_dcmpeq>
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d1aa      	bne.n	801301e <_strtod_l+0x58e>
 80130c8:	9b08      	ldr	r3, [sp, #32]
 80130ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80130d0:	9b05      	ldr	r3, [sp, #20]
 80130d2:	9804      	ldr	r0, [sp, #16]
 80130d4:	f003 f9ae 	bl	8016434 <__s2b>
 80130d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80130da:	2800      	cmp	r0, #0
 80130dc:	d100      	bne.n	80130e0 <_strtod_l+0x650>
 80130de:	e709      	b.n	8012ef4 <_strtod_l+0x464>
 80130e0:	9b07      	ldr	r3, [sp, #28]
 80130e2:	9a07      	ldr	r2, [sp, #28]
 80130e4:	17db      	asrs	r3, r3, #31
 80130e6:	4252      	negs	r2, r2
 80130e8:	4013      	ands	r3, r2
 80130ea:	9315      	str	r3, [sp, #84]	; 0x54
 80130ec:	9b07      	ldr	r3, [sp, #28]
 80130ee:	2400      	movs	r4, #0
 80130f0:	43db      	mvns	r3, r3
 80130f2:	9a07      	ldr	r2, [sp, #28]
 80130f4:	17db      	asrs	r3, r3, #31
 80130f6:	401a      	ands	r2, r3
 80130f8:	921c      	str	r2, [sp, #112]	; 0x70
 80130fa:	9405      	str	r4, [sp, #20]
 80130fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130fe:	9804      	ldr	r0, [sp, #16]
 8013100:	6859      	ldr	r1, [r3, #4]
 8013102:	f003 f927 	bl	8016354 <_Balloc>
 8013106:	900a      	str	r0, [sp, #40]	; 0x28
 8013108:	2800      	cmp	r0, #0
 801310a:	d100      	bne.n	801310e <_strtod_l+0x67e>
 801310c:	e6f6      	b.n	8012efc <_strtod_l+0x46c>
 801310e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013110:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013112:	691b      	ldr	r3, [r3, #16]
 8013114:	310c      	adds	r1, #12
 8013116:	1c9a      	adds	r2, r3, #2
 8013118:	0092      	lsls	r2, r2, #2
 801311a:	300c      	adds	r0, #12
 801311c:	9308      	str	r3, [sp, #32]
 801311e:	f7ff fa32 	bl	8012586 <memcpy>
 8013122:	ab24      	add	r3, sp, #144	; 0x90
 8013124:	9301      	str	r3, [sp, #4]
 8013126:	ab23      	add	r3, sp, #140	; 0x8c
 8013128:	9300      	str	r3, [sp, #0]
 801312a:	0032      	movs	r2, r6
 801312c:	003b      	movs	r3, r7
 801312e:	9804      	ldr	r0, [sp, #16]
 8013130:	960e      	str	r6, [sp, #56]	; 0x38
 8013132:	970f      	str	r7, [sp, #60]	; 0x3c
 8013134:	f003 fc22 	bl	801697c <__d2b>
 8013138:	9022      	str	r0, [sp, #136]	; 0x88
 801313a:	2800      	cmp	r0, #0
 801313c:	d100      	bne.n	8013140 <_strtod_l+0x6b0>
 801313e:	e6dd      	b.n	8012efc <_strtod_l+0x46c>
 8013140:	2101      	movs	r1, #1
 8013142:	9804      	ldr	r0, [sp, #16]
 8013144:	f003 f9fd 	bl	8016542 <__i2b>
 8013148:	9005      	str	r0, [sp, #20]
 801314a:	2800      	cmp	r0, #0
 801314c:	d100      	bne.n	8013150 <_strtod_l+0x6c0>
 801314e:	e6d5      	b.n	8012efc <_strtod_l+0x46c>
 8013150:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013152:	2b00      	cmp	r3, #0
 8013154:	da00      	bge.n	8013158 <_strtod_l+0x6c8>
 8013156:	e0c1      	b.n	80132dc <_strtod_l+0x84c>
 8013158:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801315a:	189d      	adds	r5, r3, r2
 801315c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801315e:	4694      	mov	ip, r2
 8013160:	9906      	ldr	r1, [sp, #24]
 8013162:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013164:	1a5b      	subs	r3, r3, r1
 8013166:	2136      	movs	r1, #54	; 0x36
 8013168:	189b      	adds	r3, r3, r2
 801316a:	1a8a      	subs	r2, r1, r2
 801316c:	49b2      	ldr	r1, [pc, #712]	; (8013438 <_strtod_l+0x9a8>)
 801316e:	3b01      	subs	r3, #1
 8013170:	2001      	movs	r0, #1
 8013172:	428b      	cmp	r3, r1
 8013174:	db00      	blt.n	8013178 <_strtod_l+0x6e8>
 8013176:	e0bd      	b.n	80132f4 <_strtod_l+0x864>
 8013178:	1ac9      	subs	r1, r1, r3
 801317a:	1a52      	subs	r2, r2, r1
 801317c:	291f      	cmp	r1, #31
 801317e:	dd00      	ble.n	8013182 <_strtod_l+0x6f2>
 8013180:	e0b1      	b.n	80132e6 <_strtod_l+0x856>
 8013182:	4088      	lsls	r0, r1
 8013184:	2300      	movs	r3, #0
 8013186:	9014      	str	r0, [sp, #80]	; 0x50
 8013188:	9310      	str	r3, [sp, #64]	; 0x40
 801318a:	18ab      	adds	r3, r5, r2
 801318c:	9308      	str	r3, [sp, #32]
 801318e:	0013      	movs	r3, r2
 8013190:	9a06      	ldr	r2, [sp, #24]
 8013192:	4463      	add	r3, ip
 8013194:	18d3      	adds	r3, r2, r3
 8013196:	9a08      	ldr	r2, [sp, #32]
 8013198:	930c      	str	r3, [sp, #48]	; 0x30
 801319a:	002b      	movs	r3, r5
 801319c:	4295      	cmp	r5, r2
 801319e:	dd00      	ble.n	80131a2 <_strtod_l+0x712>
 80131a0:	0013      	movs	r3, r2
 80131a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131a4:	4293      	cmp	r3, r2
 80131a6:	dd00      	ble.n	80131aa <_strtod_l+0x71a>
 80131a8:	0013      	movs	r3, r2
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	dd06      	ble.n	80131bc <_strtod_l+0x72c>
 80131ae:	9a08      	ldr	r2, [sp, #32]
 80131b0:	1aed      	subs	r5, r5, r3
 80131b2:	1ad2      	subs	r2, r2, r3
 80131b4:	9208      	str	r2, [sp, #32]
 80131b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131b8:	1ad2      	subs	r2, r2, r3
 80131ba:	920c      	str	r2, [sp, #48]	; 0x30
 80131bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d017      	beq.n	80131f2 <_strtod_l+0x762>
 80131c2:	001a      	movs	r2, r3
 80131c4:	9905      	ldr	r1, [sp, #20]
 80131c6:	9804      	ldr	r0, [sp, #16]
 80131c8:	f003 fa54 	bl	8016674 <__pow5mult>
 80131cc:	9005      	str	r0, [sp, #20]
 80131ce:	2800      	cmp	r0, #0
 80131d0:	d100      	bne.n	80131d4 <_strtod_l+0x744>
 80131d2:	e693      	b.n	8012efc <_strtod_l+0x46c>
 80131d4:	0001      	movs	r1, r0
 80131d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80131d8:	9804      	ldr	r0, [sp, #16]
 80131da:	f003 f9bb 	bl	8016554 <__multiply>
 80131de:	9012      	str	r0, [sp, #72]	; 0x48
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d100      	bne.n	80131e6 <_strtod_l+0x756>
 80131e4:	e68a      	b.n	8012efc <_strtod_l+0x46c>
 80131e6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80131e8:	9804      	ldr	r0, [sp, #16]
 80131ea:	f003 f8db 	bl	80163a4 <_Bfree>
 80131ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80131f0:	9322      	str	r3, [sp, #136]	; 0x88
 80131f2:	9b08      	ldr	r3, [sp, #32]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	dd00      	ble.n	80131fa <_strtod_l+0x76a>
 80131f8:	e07f      	b.n	80132fa <_strtod_l+0x86a>
 80131fa:	9b07      	ldr	r3, [sp, #28]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	dd08      	ble.n	8013212 <_strtod_l+0x782>
 8013200:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013202:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013204:	9804      	ldr	r0, [sp, #16]
 8013206:	f003 fa35 	bl	8016674 <__pow5mult>
 801320a:	900a      	str	r0, [sp, #40]	; 0x28
 801320c:	2800      	cmp	r0, #0
 801320e:	d100      	bne.n	8013212 <_strtod_l+0x782>
 8013210:	e674      	b.n	8012efc <_strtod_l+0x46c>
 8013212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013214:	2b00      	cmp	r3, #0
 8013216:	dd08      	ble.n	801322a <_strtod_l+0x79a>
 8013218:	001a      	movs	r2, r3
 801321a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801321c:	9804      	ldr	r0, [sp, #16]
 801321e:	f003 fa6b 	bl	80166f8 <__lshift>
 8013222:	900a      	str	r0, [sp, #40]	; 0x28
 8013224:	2800      	cmp	r0, #0
 8013226:	d100      	bne.n	801322a <_strtod_l+0x79a>
 8013228:	e668      	b.n	8012efc <_strtod_l+0x46c>
 801322a:	2d00      	cmp	r5, #0
 801322c:	dd08      	ble.n	8013240 <_strtod_l+0x7b0>
 801322e:	002a      	movs	r2, r5
 8013230:	9905      	ldr	r1, [sp, #20]
 8013232:	9804      	ldr	r0, [sp, #16]
 8013234:	f003 fa60 	bl	80166f8 <__lshift>
 8013238:	9005      	str	r0, [sp, #20]
 801323a:	2800      	cmp	r0, #0
 801323c:	d100      	bne.n	8013240 <_strtod_l+0x7b0>
 801323e:	e65d      	b.n	8012efc <_strtod_l+0x46c>
 8013240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013242:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013244:	9804      	ldr	r0, [sp, #16]
 8013246:	f003 fac3 	bl	80167d0 <__mdiff>
 801324a:	1e04      	subs	r4, r0, #0
 801324c:	d100      	bne.n	8013250 <_strtod_l+0x7c0>
 801324e:	e655      	b.n	8012efc <_strtod_l+0x46c>
 8013250:	2500      	movs	r5, #0
 8013252:	68c3      	ldr	r3, [r0, #12]
 8013254:	9905      	ldr	r1, [sp, #20]
 8013256:	60c5      	str	r5, [r0, #12]
 8013258:	9312      	str	r3, [sp, #72]	; 0x48
 801325a:	f003 fa9f 	bl	801679c <__mcmp>
 801325e:	42a8      	cmp	r0, r5
 8013260:	da55      	bge.n	801330e <_strtod_l+0x87e>
 8013262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013264:	42ab      	cmp	r3, r5
 8013266:	d11b      	bne.n	80132a0 <_strtod_l+0x810>
 8013268:	42ae      	cmp	r6, r5
 801326a:	d119      	bne.n	80132a0 <_strtod_l+0x810>
 801326c:	033b      	lsls	r3, r7, #12
 801326e:	42ab      	cmp	r3, r5
 8013270:	d116      	bne.n	80132a0 <_strtod_l+0x810>
 8013272:	22d6      	movs	r2, #214	; 0xd6
 8013274:	4b71      	ldr	r3, [pc, #452]	; (801343c <_strtod_l+0x9ac>)
 8013276:	04d2      	lsls	r2, r2, #19
 8013278:	403b      	ands	r3, r7
 801327a:	4293      	cmp	r3, r2
 801327c:	d910      	bls.n	80132a0 <_strtod_l+0x810>
 801327e:	6963      	ldr	r3, [r4, #20]
 8013280:	42ab      	cmp	r3, r5
 8013282:	d102      	bne.n	801328a <_strtod_l+0x7fa>
 8013284:	6923      	ldr	r3, [r4, #16]
 8013286:	2b01      	cmp	r3, #1
 8013288:	dd0a      	ble.n	80132a0 <_strtod_l+0x810>
 801328a:	0021      	movs	r1, r4
 801328c:	2201      	movs	r2, #1
 801328e:	9804      	ldr	r0, [sp, #16]
 8013290:	f003 fa32 	bl	80166f8 <__lshift>
 8013294:	9905      	ldr	r1, [sp, #20]
 8013296:	0004      	movs	r4, r0
 8013298:	f003 fa80 	bl	801679c <__mcmp>
 801329c:	2800      	cmp	r0, #0
 801329e:	dc6b      	bgt.n	8013378 <_strtod_l+0x8e8>
 80132a0:	9b06      	ldr	r3, [sp, #24]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d178      	bne.n	8013398 <_strtod_l+0x908>
 80132a6:	e632      	b.n	8012f0e <_strtod_l+0x47e>
 80132a8:	2201      	movs	r2, #1
 80132aa:	4214      	tst	r4, r2
 80132ac:	d007      	beq.n	80132be <_strtod_l+0x82e>
 80132ae:	4a64      	ldr	r2, [pc, #400]	; (8013440 <_strtod_l+0x9b0>)
 80132b0:	00eb      	lsls	r3, r5, #3
 80132b2:	18d3      	adds	r3, r2, r3
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	f7ee fdbc 	bl	8001e34 <__aeabi_dmul>
 80132bc:	2301      	movs	r3, #1
 80132be:	3501      	adds	r5, #1
 80132c0:	1064      	asrs	r4, r4, #1
 80132c2:	e6df      	b.n	8013084 <_strtod_l+0x5f4>
 80132c4:	2101      	movs	r1, #1
 80132c6:	3b20      	subs	r3, #32
 80132c8:	4249      	negs	r1, r1
 80132ca:	4099      	lsls	r1, r3
 80132cc:	400a      	ands	r2, r1
 80132ce:	0017      	movs	r7, r2
 80132d0:	e6f2      	b.n	80130b8 <_strtod_l+0x628>
 80132d2:	2201      	movs	r2, #1
 80132d4:	4252      	negs	r2, r2
 80132d6:	409a      	lsls	r2, r3
 80132d8:	4016      	ands	r6, r2
 80132da:	e6ed      	b.n	80130b8 <_strtod_l+0x628>
 80132dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80132de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80132e0:	1ad2      	subs	r2, r2, r3
 80132e2:	4694      	mov	ip, r2
 80132e4:	e73c      	b.n	8013160 <_strtod_l+0x6d0>
 80132e6:	4957      	ldr	r1, [pc, #348]	; (8013444 <_strtod_l+0x9b4>)
 80132e8:	1acb      	subs	r3, r1, r3
 80132ea:	0001      	movs	r1, r0
 80132ec:	4099      	lsls	r1, r3
 80132ee:	9110      	str	r1, [sp, #64]	; 0x40
 80132f0:	9014      	str	r0, [sp, #80]	; 0x50
 80132f2:	e74a      	b.n	801318a <_strtod_l+0x6fa>
 80132f4:	2300      	movs	r3, #0
 80132f6:	9310      	str	r3, [sp, #64]	; 0x40
 80132f8:	e7fa      	b.n	80132f0 <_strtod_l+0x860>
 80132fa:	9a08      	ldr	r2, [sp, #32]
 80132fc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80132fe:	9804      	ldr	r0, [sp, #16]
 8013300:	f003 f9fa 	bl	80166f8 <__lshift>
 8013304:	9022      	str	r0, [sp, #136]	; 0x88
 8013306:	2800      	cmp	r0, #0
 8013308:	d000      	beq.n	801330c <_strtod_l+0x87c>
 801330a:	e776      	b.n	80131fa <_strtod_l+0x76a>
 801330c:	e5f6      	b.n	8012efc <_strtod_l+0x46c>
 801330e:	970c      	str	r7, [sp, #48]	; 0x30
 8013310:	2800      	cmp	r0, #0
 8013312:	d000      	beq.n	8013316 <_strtod_l+0x886>
 8013314:	e0a0      	b.n	8013458 <_strtod_l+0x9c8>
 8013316:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013318:	033b      	lsls	r3, r7, #12
 801331a:	0b1b      	lsrs	r3, r3, #12
 801331c:	2a00      	cmp	r2, #0
 801331e:	d027      	beq.n	8013370 <_strtod_l+0x8e0>
 8013320:	4a49      	ldr	r2, [pc, #292]	; (8013448 <_strtod_l+0x9b8>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d157      	bne.n	80133d6 <_strtod_l+0x946>
 8013326:	2201      	movs	r2, #1
 8013328:	9b06      	ldr	r3, [sp, #24]
 801332a:	4252      	negs	r2, r2
 801332c:	0031      	movs	r1, r6
 801332e:	0010      	movs	r0, r2
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00b      	beq.n	801334c <_strtod_l+0x8bc>
 8013334:	25d4      	movs	r5, #212	; 0xd4
 8013336:	4b41      	ldr	r3, [pc, #260]	; (801343c <_strtod_l+0x9ac>)
 8013338:	04ed      	lsls	r5, r5, #19
 801333a:	403b      	ands	r3, r7
 801333c:	0010      	movs	r0, r2
 801333e:	42ab      	cmp	r3, r5
 8013340:	d804      	bhi.n	801334c <_strtod_l+0x8bc>
 8013342:	306c      	adds	r0, #108	; 0x6c
 8013344:	0d1b      	lsrs	r3, r3, #20
 8013346:	1ac3      	subs	r3, r0, r3
 8013348:	409a      	lsls	r2, r3
 801334a:	0010      	movs	r0, r2
 801334c:	4281      	cmp	r1, r0
 801334e:	d142      	bne.n	80133d6 <_strtod_l+0x946>
 8013350:	4b3e      	ldr	r3, [pc, #248]	; (801344c <_strtod_l+0x9bc>)
 8013352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013354:	429a      	cmp	r2, r3
 8013356:	d102      	bne.n	801335e <_strtod_l+0x8ce>
 8013358:	1c4b      	adds	r3, r1, #1
 801335a:	d100      	bne.n	801335e <_strtod_l+0x8ce>
 801335c:	e5ce      	b.n	8012efc <_strtod_l+0x46c>
 801335e:	4b37      	ldr	r3, [pc, #220]	; (801343c <_strtod_l+0x9ac>)
 8013360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013362:	2600      	movs	r6, #0
 8013364:	401a      	ands	r2, r3
 8013366:	0013      	movs	r3, r2
 8013368:	2280      	movs	r2, #128	; 0x80
 801336a:	0352      	lsls	r2, r2, #13
 801336c:	189f      	adds	r7, r3, r2
 801336e:	e797      	b.n	80132a0 <_strtod_l+0x810>
 8013370:	2b00      	cmp	r3, #0
 8013372:	d130      	bne.n	80133d6 <_strtod_l+0x946>
 8013374:	2e00      	cmp	r6, #0
 8013376:	d12e      	bne.n	80133d6 <_strtod_l+0x946>
 8013378:	9906      	ldr	r1, [sp, #24]
 801337a:	003b      	movs	r3, r7
 801337c:	4a2f      	ldr	r2, [pc, #188]	; (801343c <_strtod_l+0x9ac>)
 801337e:	2900      	cmp	r1, #0
 8013380:	d020      	beq.n	80133c4 <_strtod_l+0x934>
 8013382:	0011      	movs	r1, r2
 8013384:	20d6      	movs	r0, #214	; 0xd6
 8013386:	4039      	ands	r1, r7
 8013388:	04c0      	lsls	r0, r0, #19
 801338a:	4281      	cmp	r1, r0
 801338c:	dc1a      	bgt.n	80133c4 <_strtod_l+0x934>
 801338e:	23dc      	movs	r3, #220	; 0xdc
 8013390:	049b      	lsls	r3, r3, #18
 8013392:	4299      	cmp	r1, r3
 8013394:	dc00      	bgt.n	8013398 <_strtod_l+0x908>
 8013396:	e646      	b.n	8013026 <_strtod_l+0x596>
 8013398:	4b2d      	ldr	r3, [pc, #180]	; (8013450 <_strtod_l+0x9c0>)
 801339a:	0030      	movs	r0, r6
 801339c:	931b      	str	r3, [sp, #108]	; 0x6c
 801339e:	2300      	movs	r3, #0
 80133a0:	931a      	str	r3, [sp, #104]	; 0x68
 80133a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80133a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133a6:	0039      	movs	r1, r7
 80133a8:	f7ee fd44 	bl	8001e34 <__aeabi_dmul>
 80133ac:	0006      	movs	r6, r0
 80133ae:	000f      	movs	r7, r1
 80133b0:	1e0b      	subs	r3, r1, #0
 80133b2:	d000      	beq.n	80133b6 <_strtod_l+0x926>
 80133b4:	e5ab      	b.n	8012f0e <_strtod_l+0x47e>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d000      	beq.n	80133bc <_strtod_l+0x92c>
 80133ba:	e5a8      	b.n	8012f0e <_strtod_l+0x47e>
 80133bc:	9a04      	ldr	r2, [sp, #16]
 80133be:	3322      	adds	r3, #34	; 0x22
 80133c0:	6013      	str	r3, [r2, #0]
 80133c2:	e5a4      	b.n	8012f0e <_strtod_l+0x47e>
 80133c4:	2601      	movs	r6, #1
 80133c6:	4013      	ands	r3, r2
 80133c8:	4a22      	ldr	r2, [pc, #136]	; (8013454 <_strtod_l+0x9c4>)
 80133ca:	4276      	negs	r6, r6
 80133cc:	189b      	adds	r3, r3, r2
 80133ce:	4a1e      	ldr	r2, [pc, #120]	; (8013448 <_strtod_l+0x9b8>)
 80133d0:	431a      	orrs	r2, r3
 80133d2:	0017      	movs	r7, r2
 80133d4:	e764      	b.n	80132a0 <_strtod_l+0x810>
 80133d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d015      	beq.n	8013408 <_strtod_l+0x978>
 80133dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80133e0:	4213      	tst	r3, r2
 80133e2:	d100      	bne.n	80133e6 <_strtod_l+0x956>
 80133e4:	e75c      	b.n	80132a0 <_strtod_l+0x810>
 80133e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133e8:	9a06      	ldr	r2, [sp, #24]
 80133ea:	0030      	movs	r0, r6
 80133ec:	0039      	movs	r1, r7
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00f      	beq.n	8013412 <_strtod_l+0x982>
 80133f2:	f7ff fb35 	bl	8012a60 <sulp>
 80133f6:	0002      	movs	r2, r0
 80133f8:	000b      	movs	r3, r1
 80133fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80133fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80133fe:	f7ed fdf3 	bl	8000fe8 <__aeabi_dadd>
 8013402:	0006      	movs	r6, r0
 8013404:	000f      	movs	r7, r1
 8013406:	e74b      	b.n	80132a0 <_strtod_l+0x810>
 8013408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801340a:	4233      	tst	r3, r6
 801340c:	d100      	bne.n	8013410 <_strtod_l+0x980>
 801340e:	e747      	b.n	80132a0 <_strtod_l+0x810>
 8013410:	e7e9      	b.n	80133e6 <_strtod_l+0x956>
 8013412:	f7ff fb25 	bl	8012a60 <sulp>
 8013416:	0002      	movs	r2, r0
 8013418:	000b      	movs	r3, r1
 801341a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801341c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801341e:	f7ee ff7b 	bl	8002318 <__aeabi_dsub>
 8013422:	2200      	movs	r2, #0
 8013424:	2300      	movs	r3, #0
 8013426:	0006      	movs	r6, r0
 8013428:	000f      	movs	r7, r1
 801342a:	f7ed f817 	bl	800045c <__aeabi_dcmpeq>
 801342e:	2800      	cmp	r0, #0
 8013430:	d000      	beq.n	8013434 <_strtod_l+0x9a4>
 8013432:	e5f8      	b.n	8013026 <_strtod_l+0x596>
 8013434:	e734      	b.n	80132a0 <_strtod_l+0x810>
 8013436:	46c0      	nop			; (mov r8, r8)
 8013438:	fffffc02 	.word	0xfffffc02
 801343c:	7ff00000 	.word	0x7ff00000
 8013440:	08019c20 	.word	0x08019c20
 8013444:	fffffbe2 	.word	0xfffffbe2
 8013448:	000fffff 	.word	0x000fffff
 801344c:	7fefffff 	.word	0x7fefffff
 8013450:	39500000 	.word	0x39500000
 8013454:	fff00000 	.word	0xfff00000
 8013458:	9905      	ldr	r1, [sp, #20]
 801345a:	0020      	movs	r0, r4
 801345c:	f003 fae2 	bl	8016a24 <__ratio>
 8013460:	2380      	movs	r3, #128	; 0x80
 8013462:	2200      	movs	r2, #0
 8013464:	05db      	lsls	r3, r3, #23
 8013466:	9008      	str	r0, [sp, #32]
 8013468:	9109      	str	r1, [sp, #36]	; 0x24
 801346a:	f7ed f807 	bl	800047c <__aeabi_dcmple>
 801346e:	2800      	cmp	r0, #0
 8013470:	d100      	bne.n	8013474 <_strtod_l+0x9e4>
 8013472:	e07f      	b.n	8013574 <_strtod_l+0xae4>
 8013474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013476:	2b00      	cmp	r3, #0
 8013478:	d04b      	beq.n	8013512 <_strtod_l+0xa82>
 801347a:	2200      	movs	r2, #0
 801347c:	4b8a      	ldr	r3, [pc, #552]	; (80136a8 <_strtod_l+0xc18>)
 801347e:	9210      	str	r2, [sp, #64]	; 0x40
 8013480:	9311      	str	r3, [sp, #68]	; 0x44
 8013482:	4b89      	ldr	r3, [pc, #548]	; (80136a8 <_strtod_l+0xc18>)
 8013484:	9308      	str	r3, [sp, #32]
 8013486:	4a89      	ldr	r2, [pc, #548]	; (80136ac <_strtod_l+0xc1c>)
 8013488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801348a:	4013      	ands	r3, r2
 801348c:	9314      	str	r3, [sp, #80]	; 0x50
 801348e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013490:	4b87      	ldr	r3, [pc, #540]	; (80136b0 <_strtod_l+0xc20>)
 8013492:	429a      	cmp	r2, r3
 8013494:	d000      	beq.n	8013498 <_strtod_l+0xa08>
 8013496:	e0ba      	b.n	801360e <_strtod_l+0xb7e>
 8013498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801349a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801349c:	921a      	str	r2, [sp, #104]	; 0x68
 801349e:	931b      	str	r3, [sp, #108]	; 0x6c
 80134a0:	4a84      	ldr	r2, [pc, #528]	; (80136b4 <_strtod_l+0xc24>)
 80134a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134a4:	4694      	mov	ip, r2
 80134a6:	4463      	add	r3, ip
 80134a8:	001f      	movs	r7, r3
 80134aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80134ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80134ae:	0030      	movs	r0, r6
 80134b0:	0039      	movs	r1, r7
 80134b2:	920c      	str	r2, [sp, #48]	; 0x30
 80134b4:	930d      	str	r3, [sp, #52]	; 0x34
 80134b6:	f003 f9ef 	bl	8016898 <__ulp>
 80134ba:	0002      	movs	r2, r0
 80134bc:	000b      	movs	r3, r1
 80134be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80134c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80134c2:	f7ee fcb7 	bl	8001e34 <__aeabi_dmul>
 80134c6:	0032      	movs	r2, r6
 80134c8:	003b      	movs	r3, r7
 80134ca:	f7ed fd8d 	bl	8000fe8 <__aeabi_dadd>
 80134ce:	4a77      	ldr	r2, [pc, #476]	; (80136ac <_strtod_l+0xc1c>)
 80134d0:	4b79      	ldr	r3, [pc, #484]	; (80136b8 <_strtod_l+0xc28>)
 80134d2:	0006      	movs	r6, r0
 80134d4:	400a      	ands	r2, r1
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d964      	bls.n	80135a4 <_strtod_l+0xb14>
 80134da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134dc:	4a77      	ldr	r2, [pc, #476]	; (80136bc <_strtod_l+0xc2c>)
 80134de:	4293      	cmp	r3, r2
 80134e0:	d103      	bne.n	80134ea <_strtod_l+0xa5a>
 80134e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134e4:	3301      	adds	r3, #1
 80134e6:	d100      	bne.n	80134ea <_strtod_l+0xa5a>
 80134e8:	e508      	b.n	8012efc <_strtod_l+0x46c>
 80134ea:	2601      	movs	r6, #1
 80134ec:	4f73      	ldr	r7, [pc, #460]	; (80136bc <_strtod_l+0xc2c>)
 80134ee:	4276      	negs	r6, r6
 80134f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80134f2:	9804      	ldr	r0, [sp, #16]
 80134f4:	f002 ff56 	bl	80163a4 <_Bfree>
 80134f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80134fa:	9804      	ldr	r0, [sp, #16]
 80134fc:	f002 ff52 	bl	80163a4 <_Bfree>
 8013500:	9905      	ldr	r1, [sp, #20]
 8013502:	9804      	ldr	r0, [sp, #16]
 8013504:	f002 ff4e 	bl	80163a4 <_Bfree>
 8013508:	0021      	movs	r1, r4
 801350a:	9804      	ldr	r0, [sp, #16]
 801350c:	f002 ff4a 	bl	80163a4 <_Bfree>
 8013510:	e5f4      	b.n	80130fc <_strtod_l+0x66c>
 8013512:	2e00      	cmp	r6, #0
 8013514:	d11e      	bne.n	8013554 <_strtod_l+0xac4>
 8013516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013518:	031b      	lsls	r3, r3, #12
 801351a:	d121      	bne.n	8013560 <_strtod_l+0xad0>
 801351c:	9808      	ldr	r0, [sp, #32]
 801351e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013520:	2200      	movs	r2, #0
 8013522:	4b61      	ldr	r3, [pc, #388]	; (80136a8 <_strtod_l+0xc18>)
 8013524:	f7ec ffa0 	bl	8000468 <__aeabi_dcmplt>
 8013528:	2800      	cmp	r0, #0
 801352a:	d11f      	bne.n	801356c <_strtod_l+0xadc>
 801352c:	9808      	ldr	r0, [sp, #32]
 801352e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013530:	2200      	movs	r2, #0
 8013532:	4b63      	ldr	r3, [pc, #396]	; (80136c0 <_strtod_l+0xc30>)
 8013534:	f7ee fc7e 	bl	8001e34 <__aeabi_dmul>
 8013538:	0005      	movs	r5, r0
 801353a:	9108      	str	r1, [sp, #32]
 801353c:	2280      	movs	r2, #128	; 0x80
 801353e:	0612      	lsls	r2, r2, #24
 8013540:	4694      	mov	ip, r2
 8013542:	9b08      	ldr	r3, [sp, #32]
 8013544:	951e      	str	r5, [sp, #120]	; 0x78
 8013546:	4463      	add	r3, ip
 8013548:	931f      	str	r3, [sp, #124]	; 0x7c
 801354a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801354c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801354e:	9210      	str	r2, [sp, #64]	; 0x40
 8013550:	9311      	str	r3, [sp, #68]	; 0x44
 8013552:	e798      	b.n	8013486 <_strtod_l+0x9f6>
 8013554:	2e01      	cmp	r6, #1
 8013556:	d103      	bne.n	8013560 <_strtod_l+0xad0>
 8013558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801355a:	2b00      	cmp	r3, #0
 801355c:	d100      	bne.n	8013560 <_strtod_l+0xad0>
 801355e:	e562      	b.n	8013026 <_strtod_l+0x596>
 8013560:	2200      	movs	r2, #0
 8013562:	4b58      	ldr	r3, [pc, #352]	; (80136c4 <_strtod_l+0xc34>)
 8013564:	2500      	movs	r5, #0
 8013566:	9210      	str	r2, [sp, #64]	; 0x40
 8013568:	9311      	str	r3, [sp, #68]	; 0x44
 801356a:	e78a      	b.n	8013482 <_strtod_l+0x9f2>
 801356c:	4b54      	ldr	r3, [pc, #336]	; (80136c0 <_strtod_l+0xc30>)
 801356e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013570:	9308      	str	r3, [sp, #32]
 8013572:	e7e3      	b.n	801353c <_strtod_l+0xaac>
 8013574:	4b52      	ldr	r3, [pc, #328]	; (80136c0 <_strtod_l+0xc30>)
 8013576:	9808      	ldr	r0, [sp, #32]
 8013578:	9909      	ldr	r1, [sp, #36]	; 0x24
 801357a:	2200      	movs	r2, #0
 801357c:	f7ee fc5a 	bl	8001e34 <__aeabi_dmul>
 8013580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013582:	0005      	movs	r5, r0
 8013584:	9108      	str	r1, [sp, #32]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d107      	bne.n	801359a <_strtod_l+0xb0a>
 801358a:	2380      	movs	r3, #128	; 0x80
 801358c:	061b      	lsls	r3, r3, #24
 801358e:	18cb      	adds	r3, r1, r3
 8013590:	9016      	str	r0, [sp, #88]	; 0x58
 8013592:	9317      	str	r3, [sp, #92]	; 0x5c
 8013594:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013598:	e7d9      	b.n	801354e <_strtod_l+0xabe>
 801359a:	0002      	movs	r2, r0
 801359c:	9b08      	ldr	r3, [sp, #32]
 801359e:	9216      	str	r2, [sp, #88]	; 0x58
 80135a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80135a2:	e7f7      	b.n	8013594 <_strtod_l+0xb04>
 80135a4:	23d4      	movs	r3, #212	; 0xd4
 80135a6:	049b      	lsls	r3, r3, #18
 80135a8:	18cf      	adds	r7, r1, r3
 80135aa:	9b06      	ldr	r3, [sp, #24]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d19f      	bne.n	80134f0 <_strtod_l+0xa60>
 80135b0:	4b3e      	ldr	r3, [pc, #248]	; (80136ac <_strtod_l+0xc1c>)
 80135b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80135b4:	970c      	str	r7, [sp, #48]	; 0x30
 80135b6:	403b      	ands	r3, r7
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d199      	bne.n	80134f0 <_strtod_l+0xa60>
 80135bc:	9908      	ldr	r1, [sp, #32]
 80135be:	0028      	movs	r0, r5
 80135c0:	f7ef fa0e 	bl	80029e0 <__aeabi_d2iz>
 80135c4:	f7ef fa42 	bl	8002a4c <__aeabi_i2d>
 80135c8:	000b      	movs	r3, r1
 80135ca:	0002      	movs	r2, r0
 80135cc:	9908      	ldr	r1, [sp, #32]
 80135ce:	0028      	movs	r0, r5
 80135d0:	f7ee fea2 	bl	8002318 <__aeabi_dsub>
 80135d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80135d6:	9008      	str	r0, [sp, #32]
 80135d8:	9109      	str	r1, [sp, #36]	; 0x24
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d104      	bne.n	80135e8 <_strtod_l+0xb58>
 80135de:	2e00      	cmp	r6, #0
 80135e0:	d102      	bne.n	80135e8 <_strtod_l+0xb58>
 80135e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135e4:	031b      	lsls	r3, r3, #12
 80135e6:	d058      	beq.n	801369a <_strtod_l+0xc0a>
 80135e8:	9808      	ldr	r0, [sp, #32]
 80135ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135ec:	4a36      	ldr	r2, [pc, #216]	; (80136c8 <_strtod_l+0xc38>)
 80135ee:	4b37      	ldr	r3, [pc, #220]	; (80136cc <_strtod_l+0xc3c>)
 80135f0:	f7ec ff3a 	bl	8000468 <__aeabi_dcmplt>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d000      	beq.n	80135fa <_strtod_l+0xb6a>
 80135f8:	e489      	b.n	8012f0e <_strtod_l+0x47e>
 80135fa:	9808      	ldr	r0, [sp, #32]
 80135fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135fe:	4a34      	ldr	r2, [pc, #208]	; (80136d0 <_strtod_l+0xc40>)
 8013600:	4b2f      	ldr	r3, [pc, #188]	; (80136c0 <_strtod_l+0xc30>)
 8013602:	f7ec ff45 	bl	8000490 <__aeabi_dcmpgt>
 8013606:	2800      	cmp	r0, #0
 8013608:	d100      	bne.n	801360c <_strtod_l+0xb7c>
 801360a:	e771      	b.n	80134f0 <_strtod_l+0xa60>
 801360c:	e47f      	b.n	8012f0e <_strtod_l+0x47e>
 801360e:	9b06      	ldr	r3, [sp, #24]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d02a      	beq.n	801366a <_strtod_l+0xbda>
 8013614:	23d4      	movs	r3, #212	; 0xd4
 8013616:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013618:	04db      	lsls	r3, r3, #19
 801361a:	429a      	cmp	r2, r3
 801361c:	d825      	bhi.n	801366a <_strtod_l+0xbda>
 801361e:	4a2d      	ldr	r2, [pc, #180]	; (80136d4 <_strtod_l+0xc44>)
 8013620:	4b2d      	ldr	r3, [pc, #180]	; (80136d8 <_strtod_l+0xc48>)
 8013622:	0028      	movs	r0, r5
 8013624:	9908      	ldr	r1, [sp, #32]
 8013626:	f7ec ff29 	bl	800047c <__aeabi_dcmple>
 801362a:	2800      	cmp	r0, #0
 801362c:	d016      	beq.n	801365c <_strtod_l+0xbcc>
 801362e:	0028      	movs	r0, r5
 8013630:	9908      	ldr	r1, [sp, #32]
 8013632:	f7ec ffdd 	bl	80005f0 <__aeabi_d2uiz>
 8013636:	2800      	cmp	r0, #0
 8013638:	d100      	bne.n	801363c <_strtod_l+0xbac>
 801363a:	3001      	adds	r0, #1
 801363c:	f7ef fa40 	bl	8002ac0 <__aeabi_ui2d>
 8013640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013642:	0005      	movs	r5, r0
 8013644:	9108      	str	r1, [sp, #32]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d122      	bne.n	8013690 <_strtod_l+0xc00>
 801364a:	2380      	movs	r3, #128	; 0x80
 801364c:	061b      	lsls	r3, r3, #24
 801364e:	18cb      	adds	r3, r1, r3
 8013650:	9018      	str	r0, [sp, #96]	; 0x60
 8013652:	9319      	str	r3, [sp, #100]	; 0x64
 8013654:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013656:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013658:	9210      	str	r2, [sp, #64]	; 0x40
 801365a:	9311      	str	r3, [sp, #68]	; 0x44
 801365c:	22d6      	movs	r2, #214	; 0xd6
 801365e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013660:	04d2      	lsls	r2, r2, #19
 8013662:	189b      	adds	r3, r3, r2
 8013664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013666:	1a9b      	subs	r3, r3, r2
 8013668:	9311      	str	r3, [sp, #68]	; 0x44
 801366a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801366c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801366e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013670:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013672:	f003 f911 	bl	8016898 <__ulp>
 8013676:	0002      	movs	r2, r0
 8013678:	000b      	movs	r3, r1
 801367a:	0030      	movs	r0, r6
 801367c:	0039      	movs	r1, r7
 801367e:	f7ee fbd9 	bl	8001e34 <__aeabi_dmul>
 8013682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013686:	f7ed fcaf 	bl	8000fe8 <__aeabi_dadd>
 801368a:	0006      	movs	r6, r0
 801368c:	000f      	movs	r7, r1
 801368e:	e78c      	b.n	80135aa <_strtod_l+0xb1a>
 8013690:	0002      	movs	r2, r0
 8013692:	9b08      	ldr	r3, [sp, #32]
 8013694:	9218      	str	r2, [sp, #96]	; 0x60
 8013696:	9319      	str	r3, [sp, #100]	; 0x64
 8013698:	e7dc      	b.n	8013654 <_strtod_l+0xbc4>
 801369a:	4a0b      	ldr	r2, [pc, #44]	; (80136c8 <_strtod_l+0xc38>)
 801369c:	4b0f      	ldr	r3, [pc, #60]	; (80136dc <_strtod_l+0xc4c>)
 801369e:	9808      	ldr	r0, [sp, #32]
 80136a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136a2:	f7ec fee1 	bl	8000468 <__aeabi_dcmplt>
 80136a6:	e7ae      	b.n	8013606 <_strtod_l+0xb76>
 80136a8:	3ff00000 	.word	0x3ff00000
 80136ac:	7ff00000 	.word	0x7ff00000
 80136b0:	7fe00000 	.word	0x7fe00000
 80136b4:	fcb00000 	.word	0xfcb00000
 80136b8:	7c9fffff 	.word	0x7c9fffff
 80136bc:	7fefffff 	.word	0x7fefffff
 80136c0:	3fe00000 	.word	0x3fe00000
 80136c4:	bff00000 	.word	0xbff00000
 80136c8:	94a03595 	.word	0x94a03595
 80136cc:	3fdfffff 	.word	0x3fdfffff
 80136d0:	35afe535 	.word	0x35afe535
 80136d4:	ffc00000 	.word	0xffc00000
 80136d8:	41dfffff 	.word	0x41dfffff
 80136dc:	3fcfffff 	.word	0x3fcfffff

080136e0 <strtod>:
 80136e0:	4b06      	ldr	r3, [pc, #24]	; (80136fc <strtod+0x1c>)
 80136e2:	b510      	push	{r4, lr}
 80136e4:	0004      	movs	r4, r0
 80136e6:	6818      	ldr	r0, [r3, #0]
 80136e8:	000a      	movs	r2, r1
 80136ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d100      	bne.n	80136f2 <strtod+0x12>
 80136f0:	4b03      	ldr	r3, [pc, #12]	; (8013700 <strtod+0x20>)
 80136f2:	0021      	movs	r1, r4
 80136f4:	f7ff f9cc 	bl	8012a90 <_strtod_l>
 80136f8:	bd10      	pop	{r4, pc}
 80136fa:	46c0      	nop			; (mov r8, r8)
 80136fc:	200000cc 	.word	0x200000cc
 8013700:	200004f8 	.word	0x200004f8

08013704 <strtok>:
 8013704:	4b03      	ldr	r3, [pc, #12]	; (8013714 <strtok+0x10>)
 8013706:	b510      	push	{r4, lr}
 8013708:	681a      	ldr	r2, [r3, #0]
 801370a:	2301      	movs	r3, #1
 801370c:	325c      	adds	r2, #92	; 0x5c
 801370e:	f000 f803 	bl	8013718 <__strtok_r>
 8013712:	bd10      	pop	{r4, pc}
 8013714:	200000cc 	.word	0x200000cc

08013718 <__strtok_r>:
 8013718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801371a:	2800      	cmp	r0, #0
 801371c:	d104      	bne.n	8013728 <__strtok_r+0x10>
 801371e:	6810      	ldr	r0, [r2, #0]
 8013720:	2800      	cmp	r0, #0
 8013722:	d101      	bne.n	8013728 <__strtok_r+0x10>
 8013724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013726:	0020      	movs	r0, r4
 8013728:	000e      	movs	r6, r1
 801372a:	7805      	ldrb	r5, [r0, #0]
 801372c:	1c44      	adds	r4, r0, #1
 801372e:	7837      	ldrb	r7, [r6, #0]
 8013730:	2f00      	cmp	r7, #0
 8013732:	d104      	bne.n	801373e <__strtok_r+0x26>
 8013734:	2d00      	cmp	r5, #0
 8013736:	d110      	bne.n	801375a <__strtok_r+0x42>
 8013738:	6015      	str	r5, [r2, #0]
 801373a:	0028      	movs	r0, r5
 801373c:	e7f2      	b.n	8013724 <__strtok_r+0xc>
 801373e:	3601      	adds	r6, #1
 8013740:	42bd      	cmp	r5, r7
 8013742:	d1f4      	bne.n	801372e <__strtok_r+0x16>
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1ee      	bne.n	8013726 <__strtok_r+0xe>
 8013748:	6014      	str	r4, [r2, #0]
 801374a:	7003      	strb	r3, [r0, #0]
 801374c:	e7ea      	b.n	8013724 <__strtok_r+0xc>
 801374e:	0033      	movs	r3, r6
 8013750:	e00d      	b.n	801376e <__strtok_r+0x56>
 8013752:	3501      	adds	r5, #1
 8013754:	2f00      	cmp	r7, #0
 8013756:	d103      	bne.n	8013760 <__strtok_r+0x48>
 8013758:	001c      	movs	r4, r3
 801375a:	000d      	movs	r5, r1
 801375c:	7826      	ldrb	r6, [r4, #0]
 801375e:	1c63      	adds	r3, r4, #1
 8013760:	782f      	ldrb	r7, [r5, #0]
 8013762:	42be      	cmp	r6, r7
 8013764:	d1f5      	bne.n	8013752 <__strtok_r+0x3a>
 8013766:	2e00      	cmp	r6, #0
 8013768:	d0f1      	beq.n	801374e <__strtok_r+0x36>
 801376a:	2100      	movs	r1, #0
 801376c:	7021      	strb	r1, [r4, #0]
 801376e:	6013      	str	r3, [r2, #0]
 8013770:	e7d8      	b.n	8013724 <__strtok_r+0xc>
	...

08013774 <_strtol_l.isra.0>:
 8013774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013776:	001f      	movs	r7, r3
 8013778:	000e      	movs	r6, r1
 801377a:	b087      	sub	sp, #28
 801377c:	9005      	str	r0, [sp, #20]
 801377e:	9101      	str	r1, [sp, #4]
 8013780:	9202      	str	r2, [sp, #8]
 8013782:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013784:	7834      	ldrb	r4, [r6, #0]
 8013786:	f7fe fc9f 	bl	80120c8 <__locale_ctype_ptr_l>
 801378a:	2208      	movs	r2, #8
 801378c:	1900      	adds	r0, r0, r4
 801378e:	7843      	ldrb	r3, [r0, #1]
 8013790:	1c75      	adds	r5, r6, #1
 8013792:	4013      	ands	r3, r2
 8013794:	d136      	bne.n	8013804 <_strtol_l.isra.0+0x90>
 8013796:	2c2d      	cmp	r4, #45	; 0x2d
 8013798:	d136      	bne.n	8013808 <_strtol_l.isra.0+0x94>
 801379a:	1cb5      	adds	r5, r6, #2
 801379c:	7874      	ldrb	r4, [r6, #1]
 801379e:	2601      	movs	r6, #1
 80137a0:	2f00      	cmp	r7, #0
 80137a2:	d062      	beq.n	801386a <_strtol_l.isra.0+0xf6>
 80137a4:	2f10      	cmp	r7, #16
 80137a6:	d109      	bne.n	80137bc <_strtol_l.isra.0+0x48>
 80137a8:	2c30      	cmp	r4, #48	; 0x30
 80137aa:	d107      	bne.n	80137bc <_strtol_l.isra.0+0x48>
 80137ac:	2220      	movs	r2, #32
 80137ae:	782b      	ldrb	r3, [r5, #0]
 80137b0:	4393      	bics	r3, r2
 80137b2:	2b58      	cmp	r3, #88	; 0x58
 80137b4:	d154      	bne.n	8013860 <_strtol_l.isra.0+0xec>
 80137b6:	2710      	movs	r7, #16
 80137b8:	786c      	ldrb	r4, [r5, #1]
 80137ba:	3502      	adds	r5, #2
 80137bc:	4b2d      	ldr	r3, [pc, #180]	; (8013874 <_strtol_l.isra.0+0x100>)
 80137be:	0039      	movs	r1, r7
 80137c0:	18f3      	adds	r3, r6, r3
 80137c2:	0018      	movs	r0, r3
 80137c4:	9303      	str	r3, [sp, #12]
 80137c6:	f7ec fd49 	bl	800025c <__aeabi_uidivmod>
 80137ca:	9104      	str	r1, [sp, #16]
 80137cc:	2101      	movs	r1, #1
 80137ce:	2300      	movs	r3, #0
 80137d0:	4249      	negs	r1, r1
 80137d2:	0002      	movs	r2, r0
 80137d4:	468c      	mov	ip, r1
 80137d6:	0018      	movs	r0, r3
 80137d8:	0021      	movs	r1, r4
 80137da:	3930      	subs	r1, #48	; 0x30
 80137dc:	2909      	cmp	r1, #9
 80137de:	d81a      	bhi.n	8013816 <_strtol_l.isra.0+0xa2>
 80137e0:	000c      	movs	r4, r1
 80137e2:	42a7      	cmp	r7, r4
 80137e4:	dd23      	ble.n	801382e <_strtol_l.isra.0+0xba>
 80137e6:	1c59      	adds	r1, r3, #1
 80137e8:	d009      	beq.n	80137fe <_strtol_l.isra.0+0x8a>
 80137ea:	4663      	mov	r3, ip
 80137ec:	4282      	cmp	r2, r0
 80137ee:	d306      	bcc.n	80137fe <_strtol_l.isra.0+0x8a>
 80137f0:	d102      	bne.n	80137f8 <_strtol_l.isra.0+0x84>
 80137f2:	9904      	ldr	r1, [sp, #16]
 80137f4:	42a1      	cmp	r1, r4
 80137f6:	db02      	blt.n	80137fe <_strtol_l.isra.0+0x8a>
 80137f8:	2301      	movs	r3, #1
 80137fa:	4378      	muls	r0, r7
 80137fc:	1820      	adds	r0, r4, r0
 80137fe:	782c      	ldrb	r4, [r5, #0]
 8013800:	3501      	adds	r5, #1
 8013802:	e7e9      	b.n	80137d8 <_strtol_l.isra.0+0x64>
 8013804:	002e      	movs	r6, r5
 8013806:	e7bc      	b.n	8013782 <_strtol_l.isra.0+0xe>
 8013808:	2c2b      	cmp	r4, #43	; 0x2b
 801380a:	d001      	beq.n	8013810 <_strtol_l.isra.0+0x9c>
 801380c:	001e      	movs	r6, r3
 801380e:	e7c7      	b.n	80137a0 <_strtol_l.isra.0+0x2c>
 8013810:	1cb5      	adds	r5, r6, #2
 8013812:	7874      	ldrb	r4, [r6, #1]
 8013814:	e7fa      	b.n	801380c <_strtol_l.isra.0+0x98>
 8013816:	0021      	movs	r1, r4
 8013818:	3941      	subs	r1, #65	; 0x41
 801381a:	2919      	cmp	r1, #25
 801381c:	d801      	bhi.n	8013822 <_strtol_l.isra.0+0xae>
 801381e:	3c37      	subs	r4, #55	; 0x37
 8013820:	e7df      	b.n	80137e2 <_strtol_l.isra.0+0x6e>
 8013822:	0021      	movs	r1, r4
 8013824:	3961      	subs	r1, #97	; 0x61
 8013826:	2919      	cmp	r1, #25
 8013828:	d801      	bhi.n	801382e <_strtol_l.isra.0+0xba>
 801382a:	3c57      	subs	r4, #87	; 0x57
 801382c:	e7d9      	b.n	80137e2 <_strtol_l.isra.0+0x6e>
 801382e:	1c5a      	adds	r2, r3, #1
 8013830:	d108      	bne.n	8013844 <_strtol_l.isra.0+0xd0>
 8013832:	9a05      	ldr	r2, [sp, #20]
 8013834:	3323      	adds	r3, #35	; 0x23
 8013836:	6013      	str	r3, [r2, #0]
 8013838:	9b02      	ldr	r3, [sp, #8]
 801383a:	9803      	ldr	r0, [sp, #12]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d109      	bne.n	8013854 <_strtol_l.isra.0+0xe0>
 8013840:	b007      	add	sp, #28
 8013842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013844:	2e00      	cmp	r6, #0
 8013846:	d000      	beq.n	801384a <_strtol_l.isra.0+0xd6>
 8013848:	4240      	negs	r0, r0
 801384a:	9a02      	ldr	r2, [sp, #8]
 801384c:	2a00      	cmp	r2, #0
 801384e:	d0f7      	beq.n	8013840 <_strtol_l.isra.0+0xcc>
 8013850:	2b00      	cmp	r3, #0
 8013852:	d001      	beq.n	8013858 <_strtol_l.isra.0+0xe4>
 8013854:	1e6b      	subs	r3, r5, #1
 8013856:	9301      	str	r3, [sp, #4]
 8013858:	9b02      	ldr	r3, [sp, #8]
 801385a:	9a01      	ldr	r2, [sp, #4]
 801385c:	601a      	str	r2, [r3, #0]
 801385e:	e7ef      	b.n	8013840 <_strtol_l.isra.0+0xcc>
 8013860:	2430      	movs	r4, #48	; 0x30
 8013862:	2f00      	cmp	r7, #0
 8013864:	d1aa      	bne.n	80137bc <_strtol_l.isra.0+0x48>
 8013866:	2708      	movs	r7, #8
 8013868:	e7a8      	b.n	80137bc <_strtol_l.isra.0+0x48>
 801386a:	2c30      	cmp	r4, #48	; 0x30
 801386c:	d09e      	beq.n	80137ac <_strtol_l.isra.0+0x38>
 801386e:	270a      	movs	r7, #10
 8013870:	e7a4      	b.n	80137bc <_strtol_l.isra.0+0x48>
 8013872:	46c0      	nop			; (mov r8, r8)
 8013874:	7fffffff 	.word	0x7fffffff

08013878 <strtol>:
 8013878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801387a:	0013      	movs	r3, r2
 801387c:	4a06      	ldr	r2, [pc, #24]	; (8013898 <strtol+0x20>)
 801387e:	0005      	movs	r5, r0
 8013880:	6810      	ldr	r0, [r2, #0]
 8013882:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013884:	2c00      	cmp	r4, #0
 8013886:	d100      	bne.n	801388a <strtol+0x12>
 8013888:	4c04      	ldr	r4, [pc, #16]	; (801389c <strtol+0x24>)
 801388a:	000a      	movs	r2, r1
 801388c:	9400      	str	r4, [sp, #0]
 801388e:	0029      	movs	r1, r5
 8013890:	f7ff ff70 	bl	8013774 <_strtol_l.isra.0>
 8013894:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013896:	46c0      	nop			; (mov r8, r8)
 8013898:	200000cc 	.word	0x200000cc
 801389c:	200004f8 	.word	0x200004f8

080138a0 <_svfprintf_r>:
 80138a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138a2:	b0d9      	sub	sp, #356	; 0x164
 80138a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80138a6:	9209      	str	r2, [sp, #36]	; 0x24
 80138a8:	001c      	movs	r4, r3
 80138aa:	900a      	str	r0, [sp, #40]	; 0x28
 80138ac:	f002 fd26 	bl	80162fc <_localeconv_r>
 80138b0:	6803      	ldr	r3, [r0, #0]
 80138b2:	0018      	movs	r0, r3
 80138b4:	931c      	str	r3, [sp, #112]	; 0x70
 80138b6:	f7ec fc2f 	bl	8000118 <strlen>
 80138ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138bc:	9014      	str	r0, [sp, #80]	; 0x50
 80138be:	899b      	ldrh	r3, [r3, #12]
 80138c0:	061b      	lsls	r3, r3, #24
 80138c2:	d518      	bpl.n	80138f6 <_svfprintf_r+0x56>
 80138c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138c6:	691b      	ldr	r3, [r3, #16]
 80138c8:	9308      	str	r3, [sp, #32]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d113      	bne.n	80138f6 <_svfprintf_r+0x56>
 80138ce:	2140      	movs	r1, #64	; 0x40
 80138d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80138d2:	f7fe fc1f 	bl	8012114 <_malloc_r>
 80138d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138d8:	6018      	str	r0, [r3, #0]
 80138da:	6118      	str	r0, [r3, #16]
 80138dc:	2800      	cmp	r0, #0
 80138de:	d107      	bne.n	80138f0 <_svfprintf_r+0x50>
 80138e0:	230c      	movs	r3, #12
 80138e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138e4:	6013      	str	r3, [r2, #0]
 80138e6:	3b0d      	subs	r3, #13
 80138e8:	9315      	str	r3, [sp, #84]	; 0x54
 80138ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80138ec:	b059      	add	sp, #356	; 0x164
 80138ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f0:	2340      	movs	r3, #64	; 0x40
 80138f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80138f4:	6153      	str	r3, [r2, #20]
 80138f6:	2600      	movs	r6, #0
 80138f8:	af2f      	add	r7, sp, #188	; 0xbc
 80138fa:	972c      	str	r7, [sp, #176]	; 0xb0
 80138fc:	962e      	str	r6, [sp, #184]	; 0xb8
 80138fe:	962d      	str	r6, [sp, #180]	; 0xb4
 8013900:	960d      	str	r6, [sp, #52]	; 0x34
 8013902:	961a      	str	r6, [sp, #104]	; 0x68
 8013904:	9619      	str	r6, [sp, #100]	; 0x64
 8013906:	961e      	str	r6, [sp, #120]	; 0x78
 8013908:	961d      	str	r6, [sp, #116]	; 0x74
 801390a:	9613      	str	r6, [sp, #76]	; 0x4c
 801390c:	961b      	str	r6, [sp, #108]	; 0x6c
 801390e:	961f      	str	r6, [sp, #124]	; 0x7c
 8013910:	9615      	str	r6, [sp, #84]	; 0x54
 8013912:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013914:	782b      	ldrb	r3, [r5, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d002      	beq.n	8013920 <_svfprintf_r+0x80>
 801391a:	2b25      	cmp	r3, #37	; 0x25
 801391c:	d000      	beq.n	8013920 <_svfprintf_r+0x80>
 801391e:	e095      	b.n	8013a4c <_svfprintf_r+0x1ac>
 8013920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013922:	1aee      	subs	r6, r5, r3
 8013924:	d017      	beq.n	8013956 <_svfprintf_r+0xb6>
 8013926:	603b      	str	r3, [r7, #0]
 8013928:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801392a:	607e      	str	r6, [r7, #4]
 801392c:	199b      	adds	r3, r3, r6
 801392e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013930:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013932:	3708      	adds	r7, #8
 8013934:	9308      	str	r3, [sp, #32]
 8013936:	3301      	adds	r3, #1
 8013938:	932d      	str	r3, [sp, #180]	; 0xb4
 801393a:	2b07      	cmp	r3, #7
 801393c:	dd08      	ble.n	8013950 <_svfprintf_r+0xb0>
 801393e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013942:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013944:	f003 f900 	bl	8016b48 <__ssprint_r>
 8013948:	2800      	cmp	r0, #0
 801394a:	d000      	beq.n	801394e <_svfprintf_r+0xae>
 801394c:	e2d9      	b.n	8013f02 <_svfprintf_r+0x662>
 801394e:	af2f      	add	r7, sp, #188	; 0xbc
 8013950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013952:	199b      	adds	r3, r3, r6
 8013954:	9315      	str	r3, [sp, #84]	; 0x54
 8013956:	782b      	ldrb	r3, [r5, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d101      	bne.n	8013960 <_svfprintf_r+0xc0>
 801395c:	f001 f9e5 	bl	8014d2a <_svfprintf_r+0x148a>
 8013960:	1c6b      	adds	r3, r5, #1
 8013962:	221b      	movs	r2, #27
 8013964:	9311      	str	r3, [sp, #68]	; 0x44
 8013966:	2300      	movs	r3, #0
 8013968:	a91e      	add	r1, sp, #120	; 0x78
 801396a:	1852      	adds	r2, r2, r1
 801396c:	7013      	strb	r3, [r2, #0]
 801396e:	2201      	movs	r2, #1
 8013970:	001e      	movs	r6, r3
 8013972:	2520      	movs	r5, #32
 8013974:	4252      	negs	r2, r2
 8013976:	9208      	str	r2, [sp, #32]
 8013978:	9316      	str	r3, [sp, #88]	; 0x58
 801397a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	930e      	str	r3, [sp, #56]	; 0x38
 8013980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013982:	3301      	adds	r3, #1
 8013984:	9311      	str	r3, [sp, #68]	; 0x44
 8013986:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013988:	3820      	subs	r0, #32
 801398a:	285a      	cmp	r0, #90	; 0x5a
 801398c:	d901      	bls.n	8013992 <_svfprintf_r+0xf2>
 801398e:	f000 fe3d 	bl	801460c <_svfprintf_r+0xd6c>
 8013992:	f7ec fbd3 	bl	800013c <__gnu_thumb1_case_shi>
 8013996:	009e      	.short	0x009e
 8013998:	063b063b 	.word	0x063b063b
 801399c:	063b00a7 	.word	0x063b00a7
 80139a0:	063b063b 	.word	0x063b063b
 80139a4:	063b0080 	.word	0x063b0080
 80139a8:	00a9063b 	.word	0x00a9063b
 80139ac:	063b00b3 	.word	0x063b00b3
 80139b0:	00b900b1 	.word	0x00b900b1
 80139b4:	00dd063b 	.word	0x00dd063b
 80139b8:	00df00df 	.word	0x00df00df
 80139bc:	00df00df 	.word	0x00df00df
 80139c0:	00df00df 	.word	0x00df00df
 80139c4:	00df00df 	.word	0x00df00df
 80139c8:	063b00df 	.word	0x063b00df
 80139cc:	063b063b 	.word	0x063b063b
 80139d0:	063b063b 	.word	0x063b063b
 80139d4:	063b063b 	.word	0x063b063b
 80139d8:	063b0240 	.word	0x063b0240
 80139dc:	01fd010a 	.word	0x01fd010a
 80139e0:	02400240 	.word	0x02400240
 80139e4:	063b0240 	.word	0x063b0240
 80139e8:	063b063b 	.word	0x063b063b
 80139ec:	00f1063b 	.word	0x00f1063b
 80139f0:	063b063b 	.word	0x063b063b
 80139f4:	063b04e2 	.word	0x063b04e2
 80139f8:	063b063b 	.word	0x063b063b
 80139fc:	063b0537 	.word	0x063b0537
 8013a00:	063b0557 	.word	0x063b0557
 8013a04:	005d063b 	.word	0x005d063b
 8013a08:	063b063b 	.word	0x063b063b
 8013a0c:	063b063b 	.word	0x063b063b
 8013a10:	063b063b 	.word	0x063b063b
 8013a14:	063b063b 	.word	0x063b063b
 8013a18:	063b0240 	.word	0x063b0240
 8013a1c:	01ff010a 	.word	0x01ff010a
 8013a20:	02400240 	.word	0x02400240
 8013a24:	00f30240 	.word	0x00f30240
 8013a28:	010601ff 	.word	0x010601ff
 8013a2c:	00ff063b 	.word	0x00ff063b
 8013a30:	04c5063b 	.word	0x04c5063b
 8013a34:	052704e4 	.word	0x052704e4
 8013a38:	063b0106 	.word	0x063b0106
 8013a3c:	fff20537 	.word	0xfff20537
 8013a40:	063b0559 	.word	0x063b0559
 8013a44:	0582063b 	.word	0x0582063b
 8013a48:	fff2063b 	.word	0xfff2063b
 8013a4c:	3501      	adds	r5, #1
 8013a4e:	e761      	b.n	8013914 <_svfprintf_r+0x74>
 8013a50:	4bcb      	ldr	r3, [pc, #812]	; (8013d80 <_svfprintf_r+0x4e0>)
 8013a52:	2220      	movs	r2, #32
 8013a54:	931e      	str	r3, [sp, #120]	; 0x78
 8013a56:	4032      	ands	r2, r6
 8013a58:	d101      	bne.n	8013a5e <_svfprintf_r+0x1be>
 8013a5a:	f000 fd21 	bl	80144a0 <_svfprintf_r+0xc00>
 8013a5e:	2307      	movs	r3, #7
 8013a60:	3407      	adds	r4, #7
 8013a62:	439c      	bics	r4, r3
 8013a64:	0023      	movs	r3, r4
 8013a66:	3308      	adds	r3, #8
 8013a68:	9312      	str	r3, [sp, #72]	; 0x48
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	6864      	ldr	r4, [r4, #4]
 8013a6e:	9306      	str	r3, [sp, #24]
 8013a70:	9407      	str	r4, [sp, #28]
 8013a72:	07f3      	lsls	r3, r6, #31
 8013a74:	d50a      	bpl.n	8013a8c <_svfprintf_r+0x1ec>
 8013a76:	9b06      	ldr	r3, [sp, #24]
 8013a78:	9a07      	ldr	r2, [sp, #28]
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	d006      	beq.n	8013a8c <_svfprintf_r+0x1ec>
 8013a7e:	2230      	movs	r2, #48	; 0x30
 8013a80:	ab25      	add	r3, sp, #148	; 0x94
 8013a82:	701a      	strb	r2, [r3, #0]
 8013a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a86:	705a      	strb	r2, [r3, #1]
 8013a88:	2302      	movs	r3, #2
 8013a8a:	431e      	orrs	r6, r3
 8013a8c:	4bbd      	ldr	r3, [pc, #756]	; (8013d84 <_svfprintf_r+0x4e4>)
 8013a8e:	401e      	ands	r6, r3
 8013a90:	2302      	movs	r3, #2
 8013a92:	f000 fc74 	bl	801437e <_svfprintf_r+0xade>
 8013a96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a98:	f002 fc30 	bl	80162fc <_localeconv_r>
 8013a9c:	6843      	ldr	r3, [r0, #4]
 8013a9e:	0018      	movs	r0, r3
 8013aa0:	931f      	str	r3, [sp, #124]	; 0x7c
 8013aa2:	f7ec fb39 	bl	8000118 <strlen>
 8013aa6:	901b      	str	r0, [sp, #108]	; 0x6c
 8013aa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013aaa:	f002 fc27 	bl	80162fc <_localeconv_r>
 8013aae:	6883      	ldr	r3, [r0, #8]
 8013ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8013ab2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d100      	bne.n	8013aba <_svfprintf_r+0x21a>
 8013ab8:	e75f      	b.n	801397a <_svfprintf_r+0xda>
 8013aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d100      	bne.n	8013ac2 <_svfprintf_r+0x222>
 8013ac0:	e75b      	b.n	801397a <_svfprintf_r+0xda>
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d100      	bne.n	8013aca <_svfprintf_r+0x22a>
 8013ac8:	e757      	b.n	801397a <_svfprintf_r+0xda>
 8013aca:	2380      	movs	r3, #128	; 0x80
 8013acc:	00db      	lsls	r3, r3, #3
 8013ace:	431e      	orrs	r6, r3
 8013ad0:	e753      	b.n	801397a <_svfprintf_r+0xda>
 8013ad2:	231b      	movs	r3, #27
 8013ad4:	aa1e      	add	r2, sp, #120	; 0x78
 8013ad6:	189b      	adds	r3, r3, r2
 8013ad8:	781a      	ldrb	r2, [r3, #0]
 8013ada:	2a00      	cmp	r2, #0
 8013adc:	d000      	beq.n	8013ae0 <_svfprintf_r+0x240>
 8013ade:	e74c      	b.n	801397a <_svfprintf_r+0xda>
 8013ae0:	701d      	strb	r5, [r3, #0]
 8013ae2:	e74a      	b.n	801397a <_svfprintf_r+0xda>
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e7f2      	b.n	8013ace <_svfprintf_r+0x22e>
 8013ae8:	6823      	ldr	r3, [r4, #0]
 8013aea:	3404      	adds	r4, #4
 8013aec:	9316      	str	r3, [sp, #88]	; 0x58
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	db00      	blt.n	8013af4 <_svfprintf_r+0x254>
 8013af2:	e742      	b.n	801397a <_svfprintf_r+0xda>
 8013af4:	425b      	negs	r3, r3
 8013af6:	9316      	str	r3, [sp, #88]	; 0x58
 8013af8:	2304      	movs	r3, #4
 8013afa:	e7e8      	b.n	8013ace <_svfprintf_r+0x22e>
 8013afc:	231b      	movs	r3, #27
 8013afe:	aa1e      	add	r2, sp, #120	; 0x78
 8013b00:	189b      	adds	r3, r3, r2
 8013b02:	222b      	movs	r2, #43	; 0x2b
 8013b04:	701a      	strb	r2, [r3, #0]
 8013b06:	e738      	b.n	801397a <_svfprintf_r+0xda>
 8013b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b0c:	7812      	ldrb	r2, [r2, #0]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	920e      	str	r2, [sp, #56]	; 0x38
 8013b12:	2a2a      	cmp	r2, #42	; 0x2a
 8013b14:	d008      	beq.n	8013b28 <_svfprintf_r+0x288>
 8013b16:	2200      	movs	r2, #0
 8013b18:	9208      	str	r2, [sp, #32]
 8013b1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013b1c:	001a      	movs	r2, r3
 8013b1e:	3930      	subs	r1, #48	; 0x30
 8013b20:	2909      	cmp	r1, #9
 8013b22:	d90c      	bls.n	8013b3e <_svfprintf_r+0x29e>
 8013b24:	9211      	str	r2, [sp, #68]	; 0x44
 8013b26:	e72e      	b.n	8013986 <_svfprintf_r+0xe6>
 8013b28:	6821      	ldr	r1, [r4, #0]
 8013b2a:	1d22      	adds	r2, r4, #4
 8013b2c:	9108      	str	r1, [sp, #32]
 8013b2e:	2900      	cmp	r1, #0
 8013b30:	da02      	bge.n	8013b38 <_svfprintf_r+0x298>
 8013b32:	2101      	movs	r1, #1
 8013b34:	4249      	negs	r1, r1
 8013b36:	9108      	str	r1, [sp, #32]
 8013b38:	0014      	movs	r4, r2
 8013b3a:	9311      	str	r3, [sp, #68]	; 0x44
 8013b3c:	e71d      	b.n	801397a <_svfprintf_r+0xda>
 8013b3e:	200a      	movs	r0, #10
 8013b40:	9a08      	ldr	r2, [sp, #32]
 8013b42:	4342      	muls	r2, r0
 8013b44:	1852      	adds	r2, r2, r1
 8013b46:	9208      	str	r2, [sp, #32]
 8013b48:	781a      	ldrb	r2, [r3, #0]
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	920e      	str	r2, [sp, #56]	; 0x38
 8013b4e:	e7e4      	b.n	8013b1a <_svfprintf_r+0x27a>
 8013b50:	2380      	movs	r3, #128	; 0x80
 8013b52:	e7bc      	b.n	8013ace <_svfprintf_r+0x22e>
 8013b54:	2300      	movs	r3, #0
 8013b56:	9316      	str	r3, [sp, #88]	; 0x58
 8013b58:	220a      	movs	r2, #10
 8013b5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013b5c:	4353      	muls	r3, r2
 8013b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b60:	3a30      	subs	r2, #48	; 0x30
 8013b62:	18d3      	adds	r3, r2, r3
 8013b64:	9316      	str	r3, [sp, #88]	; 0x58
 8013b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b68:	1c5a      	adds	r2, r3, #1
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	9211      	str	r2, [sp, #68]	; 0x44
 8013b6e:	930e      	str	r3, [sp, #56]	; 0x38
 8013b70:	3b30      	subs	r3, #48	; 0x30
 8013b72:	2b09      	cmp	r3, #9
 8013b74:	d9f0      	bls.n	8013b58 <_svfprintf_r+0x2b8>
 8013b76:	e7d5      	b.n	8013b24 <_svfprintf_r+0x284>
 8013b78:	2308      	movs	r3, #8
 8013b7a:	e7a8      	b.n	8013ace <_svfprintf_r+0x22e>
 8013b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b68      	cmp	r3, #104	; 0x68
 8013b82:	d105      	bne.n	8013b90 <_svfprintf_r+0x2f0>
 8013b84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b86:	3301      	adds	r3, #1
 8013b88:	9311      	str	r3, [sp, #68]	; 0x44
 8013b8a:	2380      	movs	r3, #128	; 0x80
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	e79e      	b.n	8013ace <_svfprintf_r+0x22e>
 8013b90:	2340      	movs	r3, #64	; 0x40
 8013b92:	e79c      	b.n	8013ace <_svfprintf_r+0x22e>
 8013b94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	2b6c      	cmp	r3, #108	; 0x6c
 8013b9a:	d104      	bne.n	8013ba6 <_svfprintf_r+0x306>
 8013b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	9311      	str	r3, [sp, #68]	; 0x44
 8013ba2:	432e      	orrs	r6, r5
 8013ba4:	e6e9      	b.n	801397a <_svfprintf_r+0xda>
 8013ba6:	2310      	movs	r3, #16
 8013ba8:	e791      	b.n	8013ace <_svfprintf_r+0x22e>
 8013baa:	1d23      	adds	r3, r4, #4
 8013bac:	6822      	ldr	r2, [r4, #0]
 8013bae:	9312      	str	r3, [sp, #72]	; 0x48
 8013bb0:	ab3f      	add	r3, sp, #252	; 0xfc
 8013bb2:	701a      	strb	r2, [r3, #0]
 8013bb4:	221b      	movs	r2, #27
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	a91e      	add	r1, sp, #120	; 0x78
 8013bba:	1852      	adds	r2, r2, r1
 8013bbc:	7010      	strb	r0, [r2, #0]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	0005      	movs	r5, r0
 8013bc2:	900c      	str	r0, [sp, #48]	; 0x30
 8013bc4:	9208      	str	r2, [sp, #32]
 8013bc6:	9017      	str	r0, [sp, #92]	; 0x5c
 8013bc8:	9010      	str	r0, [sp, #64]	; 0x40
 8013bca:	900f      	str	r0, [sp, #60]	; 0x3c
 8013bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8013bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bd0:	9a08      	ldr	r2, [sp, #32]
 8013bd2:	9318      	str	r3, [sp, #96]	; 0x60
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	da00      	bge.n	8013bda <_svfprintf_r+0x33a>
 8013bd8:	9218      	str	r2, [sp, #96]	; 0x60
 8013bda:	231b      	movs	r3, #27
 8013bdc:	aa1e      	add	r2, sp, #120	; 0x78
 8013bde:	189b      	adds	r3, r3, r2
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	1e5a      	subs	r2, r3, #1
 8013be4:	4193      	sbcs	r3, r2
 8013be6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013be8:	18d3      	adds	r3, r2, r3
 8013bea:	9318      	str	r3, [sp, #96]	; 0x60
 8013bec:	2302      	movs	r3, #2
 8013bee:	4033      	ands	r3, r6
 8013bf0:	9320      	str	r3, [sp, #128]	; 0x80
 8013bf2:	d002      	beq.n	8013bfa <_svfprintf_r+0x35a>
 8013bf4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013bf6:	3302      	adds	r3, #2
 8013bf8:	9318      	str	r3, [sp, #96]	; 0x60
 8013bfa:	2384      	movs	r3, #132	; 0x84
 8013bfc:	4033      	ands	r3, r6
 8013bfe:	9321      	str	r3, [sp, #132]	; 0x84
 8013c00:	d121      	bne.n	8013c46 <_svfprintf_r+0x3a6>
 8013c02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013c04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c06:	1a9c      	subs	r4, r3, r2
 8013c08:	2c00      	cmp	r4, #0
 8013c0a:	dd1c      	ble.n	8013c46 <_svfprintf_r+0x3a6>
 8013c0c:	0039      	movs	r1, r7
 8013c0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c10:	485d      	ldr	r0, [pc, #372]	; (8013d88 <_svfprintf_r+0x4e8>)
 8013c12:	9322      	str	r3, [sp, #136]	; 0x88
 8013c14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013c16:	3301      	adds	r3, #1
 8013c18:	3108      	adds	r1, #8
 8013c1a:	6038      	str	r0, [r7, #0]
 8013c1c:	2c10      	cmp	r4, #16
 8013c1e:	dd01      	ble.n	8013c24 <_svfprintf_r+0x384>
 8013c20:	f000 fd08 	bl	8014634 <_svfprintf_r+0xd94>
 8013c24:	607c      	str	r4, [r7, #4]
 8013c26:	18a4      	adds	r4, r4, r2
 8013c28:	942e      	str	r4, [sp, #184]	; 0xb8
 8013c2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c2c:	000f      	movs	r7, r1
 8013c2e:	2b07      	cmp	r3, #7
 8013c30:	dd09      	ble.n	8013c46 <_svfprintf_r+0x3a6>
 8013c32:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c38:	f002 ff86 	bl	8016b48 <__ssprint_r>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	d001      	beq.n	8013c44 <_svfprintf_r+0x3a4>
 8013c40:	f001 f852 	bl	8014ce8 <_svfprintf_r+0x1448>
 8013c44:	af2f      	add	r7, sp, #188	; 0xbc
 8013c46:	231b      	movs	r3, #27
 8013c48:	aa1e      	add	r2, sp, #120	; 0x78
 8013c4a:	189b      	adds	r3, r3, r2
 8013c4c:	781a      	ldrb	r2, [r3, #0]
 8013c4e:	2a00      	cmp	r2, #0
 8013c50:	d017      	beq.n	8013c82 <_svfprintf_r+0x3e2>
 8013c52:	603b      	str	r3, [r7, #0]
 8013c54:	2301      	movs	r3, #1
 8013c56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013c58:	607b      	str	r3, [r7, #4]
 8013c5a:	0013      	movs	r3, r2
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013c60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c62:	3708      	adds	r7, #8
 8013c64:	9322      	str	r3, [sp, #136]	; 0x88
 8013c66:	3301      	adds	r3, #1
 8013c68:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c6a:	2b07      	cmp	r3, #7
 8013c6c:	dd09      	ble.n	8013c82 <_svfprintf_r+0x3e2>
 8013c6e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c74:	f002 ff68 	bl	8016b48 <__ssprint_r>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d001      	beq.n	8013c80 <_svfprintf_r+0x3e0>
 8013c7c:	f001 f834 	bl	8014ce8 <_svfprintf_r+0x1448>
 8013c80:	af2f      	add	r7, sp, #188	; 0xbc
 8013c82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d019      	beq.n	8013cbc <_svfprintf_r+0x41c>
 8013c88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013c8a:	9320      	str	r3, [sp, #128]	; 0x80
 8013c8c:	ab25      	add	r3, sp, #148	; 0x94
 8013c8e:	603b      	str	r3, [r7, #0]
 8013c90:	2302      	movs	r3, #2
 8013c92:	607b      	str	r3, [r7, #4]
 8013c94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013c96:	3708      	adds	r7, #8
 8013c98:	3302      	adds	r3, #2
 8013c9a:	932e      	str	r3, [sp, #184]	; 0xb8
 8013c9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c9e:	9320      	str	r3, [sp, #128]	; 0x80
 8013ca0:	3301      	adds	r3, #1
 8013ca2:	932d      	str	r3, [sp, #180]	; 0xb4
 8013ca4:	2b07      	cmp	r3, #7
 8013ca6:	dd09      	ble.n	8013cbc <_svfprintf_r+0x41c>
 8013ca8:	aa2c      	add	r2, sp, #176	; 0xb0
 8013caa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cae:	f002 ff4b 	bl	8016b48 <__ssprint_r>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d001      	beq.n	8013cba <_svfprintf_r+0x41a>
 8013cb6:	f001 f817 	bl	8014ce8 <_svfprintf_r+0x1448>
 8013cba:	af2f      	add	r7, sp, #188	; 0xbc
 8013cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cbe:	2b80      	cmp	r3, #128	; 0x80
 8013cc0:	d121      	bne.n	8013d06 <_svfprintf_r+0x466>
 8013cc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013cc4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013cc6:	1a9c      	subs	r4, r3, r2
 8013cc8:	2c00      	cmp	r4, #0
 8013cca:	dd1c      	ble.n	8013d06 <_svfprintf_r+0x466>
 8013ccc:	0039      	movs	r1, r7
 8013cce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013cd0:	482e      	ldr	r0, [pc, #184]	; (8013d8c <_svfprintf_r+0x4ec>)
 8013cd2:	9320      	str	r3, [sp, #128]	; 0x80
 8013cd4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	3108      	adds	r1, #8
 8013cda:	6038      	str	r0, [r7, #0]
 8013cdc:	2c10      	cmp	r4, #16
 8013cde:	dd01      	ble.n	8013ce4 <_svfprintf_r+0x444>
 8013ce0:	f000 fcbc 	bl	801465c <_svfprintf_r+0xdbc>
 8013ce4:	607c      	str	r4, [r7, #4]
 8013ce6:	18a4      	adds	r4, r4, r2
 8013ce8:	942e      	str	r4, [sp, #184]	; 0xb8
 8013cea:	932d      	str	r3, [sp, #180]	; 0xb4
 8013cec:	000f      	movs	r7, r1
 8013cee:	2b07      	cmp	r3, #7
 8013cf0:	dd09      	ble.n	8013d06 <_svfprintf_r+0x466>
 8013cf2:	aa2c      	add	r2, sp, #176	; 0xb0
 8013cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cf8:	f002 ff26 	bl	8016b48 <__ssprint_r>
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d001      	beq.n	8013d04 <_svfprintf_r+0x464>
 8013d00:	f000 fff2 	bl	8014ce8 <_svfprintf_r+0x1448>
 8013d04:	af2f      	add	r7, sp, #188	; 0xbc
 8013d06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d08:	9a08      	ldr	r2, [sp, #32]
 8013d0a:	1a9c      	subs	r4, r3, r2
 8013d0c:	2c00      	cmp	r4, #0
 8013d0e:	dd1c      	ble.n	8013d4a <_svfprintf_r+0x4aa>
 8013d10:	0039      	movs	r1, r7
 8013d12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d14:	481d      	ldr	r0, [pc, #116]	; (8013d8c <_svfprintf_r+0x4ec>)
 8013d16:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d18:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	3108      	adds	r1, #8
 8013d1e:	6038      	str	r0, [r7, #0]
 8013d20:	2c10      	cmp	r4, #16
 8013d22:	dd01      	ble.n	8013d28 <_svfprintf_r+0x488>
 8013d24:	f000 fcb4 	bl	8014690 <_svfprintf_r+0xdf0>
 8013d28:	18a2      	adds	r2, r4, r2
 8013d2a:	607c      	str	r4, [r7, #4]
 8013d2c:	922e      	str	r2, [sp, #184]	; 0xb8
 8013d2e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d30:	000f      	movs	r7, r1
 8013d32:	2b07      	cmp	r3, #7
 8013d34:	dd09      	ble.n	8013d4a <_svfprintf_r+0x4aa>
 8013d36:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d3c:	f002 ff04 	bl	8016b48 <__ssprint_r>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d001      	beq.n	8013d48 <_svfprintf_r+0x4a8>
 8013d44:	f000 ffd0 	bl	8014ce8 <_svfprintf_r+0x1448>
 8013d48:	af2f      	add	r7, sp, #188	; 0xbc
 8013d4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013d4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d4e:	05f3      	lsls	r3, r6, #23
 8013d50:	d501      	bpl.n	8013d56 <_svfprintf_r+0x4b6>
 8013d52:	f000 fcb1 	bl	80146b8 <_svfprintf_r+0xe18>
 8013d56:	9a08      	ldr	r2, [sp, #32]
 8013d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d5a:	4694      	mov	ip, r2
 8013d5c:	603b      	str	r3, [r7, #0]
 8013d5e:	9b08      	ldr	r3, [sp, #32]
 8013d60:	607b      	str	r3, [r7, #4]
 8013d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d64:	4463      	add	r3, ip
 8013d66:	932e      	str	r3, [sp, #184]	; 0xb8
 8013d68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d6a:	9308      	str	r3, [sp, #32]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d70:	2b07      	cmp	r3, #7
 8013d72:	dd01      	ble.n	8013d78 <_svfprintf_r+0x4d8>
 8013d74:	f000 fd94 	bl	80148a0 <_svfprintf_r+0x1000>
 8013d78:	3708      	adds	r7, #8
 8013d7a:	f000 fce4 	bl	8014746 <_svfprintf_r+0xea6>
 8013d7e:	46c0      	nop			; (mov r8, r8)
 8013d80:	08019c69 	.word	0x08019c69
 8013d84:	fffffbff 	.word	0xfffffbff
 8013d88:	08019c7c 	.word	0x08019c7c
 8013d8c:	08019c8c 	.word	0x08019c8c
 8013d90:	2310      	movs	r3, #16
 8013d92:	431e      	orrs	r6, r3
 8013d94:	06b3      	lsls	r3, r6, #26
 8013d96:	d52c      	bpl.n	8013df2 <_svfprintf_r+0x552>
 8013d98:	2307      	movs	r3, #7
 8013d9a:	3407      	adds	r4, #7
 8013d9c:	439c      	bics	r4, r3
 8013d9e:	0023      	movs	r3, r4
 8013da0:	3308      	adds	r3, #8
 8013da2:	9312      	str	r3, [sp, #72]	; 0x48
 8013da4:	6823      	ldr	r3, [r4, #0]
 8013da6:	6864      	ldr	r4, [r4, #4]
 8013da8:	9306      	str	r3, [sp, #24]
 8013daa:	9407      	str	r4, [sp, #28]
 8013dac:	9b07      	ldr	r3, [sp, #28]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	da0b      	bge.n	8013dca <_svfprintf_r+0x52a>
 8013db2:	9906      	ldr	r1, [sp, #24]
 8013db4:	9a07      	ldr	r2, [sp, #28]
 8013db6:	2400      	movs	r4, #0
 8013db8:	424b      	negs	r3, r1
 8013dba:	4194      	sbcs	r4, r2
 8013dbc:	9306      	str	r3, [sp, #24]
 8013dbe:	9407      	str	r4, [sp, #28]
 8013dc0:	231b      	movs	r3, #27
 8013dc2:	aa1e      	add	r2, sp, #120	; 0x78
 8013dc4:	189b      	adds	r3, r3, r2
 8013dc6:	222d      	movs	r2, #45	; 0x2d
 8013dc8:	701a      	strb	r2, [r3, #0]
 8013dca:	9b08      	ldr	r3, [sp, #32]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	d000      	beq.n	8013dd2 <_svfprintf_r+0x532>
 8013dd0:	e382      	b.n	80144d8 <_svfprintf_r+0xc38>
 8013dd2:	9b07      	ldr	r3, [sp, #28]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d000      	beq.n	8013dda <_svfprintf_r+0x53a>
 8013dd8:	e3b0      	b.n	801453c <_svfprintf_r+0xc9c>
 8013dda:	9b06      	ldr	r3, [sp, #24]
 8013ddc:	2b09      	cmp	r3, #9
 8013dde:	d900      	bls.n	8013de2 <_svfprintf_r+0x542>
 8013de0:	e3ac      	b.n	801453c <_svfprintf_r+0xc9c>
 8013de2:	23e7      	movs	r3, #231	; 0xe7
 8013de4:	aa1e      	add	r2, sp, #120	; 0x78
 8013de6:	189b      	adds	r3, r3, r2
 8013de8:	9a06      	ldr	r2, [sp, #24]
 8013dea:	3230      	adds	r2, #48	; 0x30
 8013dec:	701a      	strb	r2, [r3, #0]
 8013dee:	9309      	str	r3, [sp, #36]	; 0x24
 8013df0:	e395      	b.n	801451e <_svfprintf_r+0xc7e>
 8013df2:	1d23      	adds	r3, r4, #4
 8013df4:	9312      	str	r3, [sp, #72]	; 0x48
 8013df6:	06f3      	lsls	r3, r6, #27
 8013df8:	d504      	bpl.n	8013e04 <_svfprintf_r+0x564>
 8013dfa:	6823      	ldr	r3, [r4, #0]
 8013dfc:	9306      	str	r3, [sp, #24]
 8013dfe:	17db      	asrs	r3, r3, #31
 8013e00:	9307      	str	r3, [sp, #28]
 8013e02:	e7d3      	b.n	8013dac <_svfprintf_r+0x50c>
 8013e04:	6823      	ldr	r3, [r4, #0]
 8013e06:	0672      	lsls	r2, r6, #25
 8013e08:	d501      	bpl.n	8013e0e <_svfprintf_r+0x56e>
 8013e0a:	b21b      	sxth	r3, r3
 8013e0c:	e7f6      	b.n	8013dfc <_svfprintf_r+0x55c>
 8013e0e:	05b2      	lsls	r2, r6, #22
 8013e10:	d5f4      	bpl.n	8013dfc <_svfprintf_r+0x55c>
 8013e12:	b25b      	sxtb	r3, r3
 8013e14:	e7f2      	b.n	8013dfc <_svfprintf_r+0x55c>
 8013e16:	2307      	movs	r3, #7
 8013e18:	3407      	adds	r4, #7
 8013e1a:	439c      	bics	r4, r3
 8013e1c:	0023      	movs	r3, r4
 8013e1e:	2201      	movs	r2, #1
 8013e20:	3308      	adds	r3, #8
 8013e22:	9312      	str	r3, [sp, #72]	; 0x48
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	4252      	negs	r2, r2
 8013e28:	931a      	str	r3, [sp, #104]	; 0x68
 8013e2a:	6863      	ldr	r3, [r4, #4]
 8013e2c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013e2e:	005c      	lsls	r4, r3, #1
 8013e30:	0864      	lsrs	r4, r4, #1
 8013e32:	9319      	str	r3, [sp, #100]	; 0x64
 8013e34:	0028      	movs	r0, r5
 8013e36:	4bcf      	ldr	r3, [pc, #828]	; (8014174 <_svfprintf_r+0x8d4>)
 8013e38:	0021      	movs	r1, r4
 8013e3a:	f7ee fdb5 	bl	80029a8 <__aeabi_dcmpun>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	d125      	bne.n	8013e8e <_svfprintf_r+0x5ee>
 8013e42:	2201      	movs	r2, #1
 8013e44:	4bcb      	ldr	r3, [pc, #812]	; (8014174 <_svfprintf_r+0x8d4>)
 8013e46:	4252      	negs	r2, r2
 8013e48:	0028      	movs	r0, r5
 8013e4a:	0021      	movs	r1, r4
 8013e4c:	f7ec fb16 	bl	800047c <__aeabi_dcmple>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d11c      	bne.n	8013e8e <_svfprintf_r+0x5ee>
 8013e54:	2200      	movs	r2, #0
 8013e56:	2300      	movs	r3, #0
 8013e58:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013e5a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013e5c:	f7ec fb04 	bl	8000468 <__aeabi_dcmplt>
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d004      	beq.n	8013e6e <_svfprintf_r+0x5ce>
 8013e64:	231b      	movs	r3, #27
 8013e66:	aa1e      	add	r2, sp, #120	; 0x78
 8013e68:	189b      	adds	r3, r3, r2
 8013e6a:	222d      	movs	r2, #45	; 0x2d
 8013e6c:	701a      	strb	r2, [r3, #0]
 8013e6e:	4bc2      	ldr	r3, [pc, #776]	; (8014178 <_svfprintf_r+0x8d8>)
 8013e70:	9309      	str	r3, [sp, #36]	; 0x24
 8013e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e74:	2b47      	cmp	r3, #71	; 0x47
 8013e76:	dc01      	bgt.n	8013e7c <_svfprintf_r+0x5dc>
 8013e78:	4bc0      	ldr	r3, [pc, #768]	; (801417c <_svfprintf_r+0x8dc>)
 8013e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e7c:	2380      	movs	r3, #128	; 0x80
 8013e7e:	439e      	bics	r6, r3
 8013e80:	2300      	movs	r3, #0
 8013e82:	930c      	str	r3, [sp, #48]	; 0x30
 8013e84:	3303      	adds	r3, #3
 8013e86:	9308      	str	r3, [sp, #32]
 8013e88:	2300      	movs	r3, #0
 8013e8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8013e8c:	e34f      	b.n	801452e <_svfprintf_r+0xc8e>
 8013e8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e92:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013e94:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013e96:	f7ee fd87 	bl	80029a8 <__aeabi_dcmpun>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d00e      	beq.n	8013ebc <_svfprintf_r+0x61c>
 8013e9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	da04      	bge.n	8013eae <_svfprintf_r+0x60e>
 8013ea4:	231b      	movs	r3, #27
 8013ea6:	aa1e      	add	r2, sp, #120	; 0x78
 8013ea8:	189b      	adds	r3, r3, r2
 8013eaa:	222d      	movs	r2, #45	; 0x2d
 8013eac:	701a      	strb	r2, [r3, #0]
 8013eae:	4bb4      	ldr	r3, [pc, #720]	; (8014180 <_svfprintf_r+0x8e0>)
 8013eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013eb4:	2b47      	cmp	r3, #71	; 0x47
 8013eb6:	dce1      	bgt.n	8013e7c <_svfprintf_r+0x5dc>
 8013eb8:	4bb2      	ldr	r3, [pc, #712]	; (8014184 <_svfprintf_r+0x8e4>)
 8013eba:	e7de      	b.n	8013e7a <_svfprintf_r+0x5da>
 8013ebc:	2320      	movs	r3, #32
 8013ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ec0:	439a      	bics	r2, r3
 8013ec2:	920f      	str	r2, [sp, #60]	; 0x3c
 8013ec4:	2a41      	cmp	r2, #65	; 0x41
 8013ec6:	d124      	bne.n	8013f12 <_svfprintf_r+0x672>
 8013ec8:	2230      	movs	r2, #48	; 0x30
 8013eca:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013ecc:	ab25      	add	r3, sp, #148	; 0x94
 8013ece:	701a      	strb	r2, [r3, #0]
 8013ed0:	3228      	adds	r2, #40	; 0x28
 8013ed2:	2961      	cmp	r1, #97	; 0x61
 8013ed4:	d100      	bne.n	8013ed8 <_svfprintf_r+0x638>
 8013ed6:	3220      	adds	r2, #32
 8013ed8:	705a      	strb	r2, [r3, #1]
 8013eda:	2302      	movs	r3, #2
 8013edc:	431e      	orrs	r6, r3
 8013ede:	9b08      	ldr	r3, [sp, #32]
 8013ee0:	2b63      	cmp	r3, #99	; 0x63
 8013ee2:	dc00      	bgt.n	8013ee6 <_svfprintf_r+0x646>
 8013ee4:	e09e      	b.n	8014024 <_svfprintf_r+0x784>
 8013ee6:	1c59      	adds	r1, r3, #1
 8013ee8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013eea:	f7fe f913 	bl	8012114 <_malloc_r>
 8013eee:	9009      	str	r0, [sp, #36]	; 0x24
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d000      	beq.n	8013ef6 <_svfprintf_r+0x656>
 8013ef4:	e09b      	b.n	801402e <_svfprintf_r+0x78e>
 8013ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ef8:	899a      	ldrh	r2, [r3, #12]
 8013efa:	2340      	movs	r3, #64	; 0x40
 8013efc:	4313      	orrs	r3, r2
 8013efe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f00:	8193      	strh	r3, [r2, #12]
 8013f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f04:	899b      	ldrh	r3, [r3, #12]
 8013f06:	065b      	lsls	r3, r3, #25
 8013f08:	d400      	bmi.n	8013f0c <_svfprintf_r+0x66c>
 8013f0a:	e4ee      	b.n	80138ea <_svfprintf_r+0x4a>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	425b      	negs	r3, r3
 8013f10:	e4ea      	b.n	80138e8 <_svfprintf_r+0x48>
 8013f12:	9b08      	ldr	r3, [sp, #32]
 8013f14:	900c      	str	r0, [sp, #48]	; 0x30
 8013f16:	3301      	adds	r3, #1
 8013f18:	d100      	bne.n	8013f1c <_svfprintf_r+0x67c>
 8013f1a:	e08b      	b.n	8014034 <_svfprintf_r+0x794>
 8013f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f1e:	2b47      	cmp	r3, #71	; 0x47
 8013f20:	d103      	bne.n	8013f2a <_svfprintf_r+0x68a>
 8013f22:	9b08      	ldr	r3, [sp, #32]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d100      	bne.n	8013f2a <_svfprintf_r+0x68a>
 8013f28:	e087      	b.n	801403a <_svfprintf_r+0x79a>
 8013f2a:	2380      	movs	r3, #128	; 0x80
 8013f2c:	005b      	lsls	r3, r3, #1
 8013f2e:	4333      	orrs	r3, r6
 8013f30:	9320      	str	r3, [sp, #128]	; 0x80
 8013f32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f34:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	db00      	blt.n	8013f3c <_svfprintf_r+0x69c>
 8013f3a:	e082      	b.n	8014042 <_svfprintf_r+0x7a2>
 8013f3c:	2280      	movs	r2, #128	; 0x80
 8013f3e:	0612      	lsls	r2, r2, #24
 8013f40:	4694      	mov	ip, r2
 8013f42:	4463      	add	r3, ip
 8013f44:	930d      	str	r3, [sp, #52]	; 0x34
 8013f46:	232d      	movs	r3, #45	; 0x2d
 8013f48:	9322      	str	r3, [sp, #136]	; 0x88
 8013f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f4c:	2b41      	cmp	r3, #65	; 0x41
 8013f4e:	d000      	beq.n	8013f52 <_svfprintf_r+0x6b2>
 8013f50:	e105      	b.n	801415e <_svfprintf_r+0x8be>
 8013f52:	aa26      	add	r2, sp, #152	; 0x98
 8013f54:	0020      	movs	r0, r4
 8013f56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f58:	f002 fdc4 	bl	8016ae4 <frexp>
 8013f5c:	23ff      	movs	r3, #255	; 0xff
 8013f5e:	2200      	movs	r2, #0
 8013f60:	059b      	lsls	r3, r3, #22
 8013f62:	f7ed ff67 	bl	8001e34 <__aeabi_dmul>
 8013f66:	2200      	movs	r2, #0
 8013f68:	2300      	movs	r3, #0
 8013f6a:	0004      	movs	r4, r0
 8013f6c:	000d      	movs	r5, r1
 8013f6e:	f7ec fa75 	bl	800045c <__aeabi_dcmpeq>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d001      	beq.n	8013f7a <_svfprintf_r+0x6da>
 8013f76:	2301      	movs	r3, #1
 8013f78:	9326      	str	r3, [sp, #152]	; 0x98
 8013f7a:	4b83      	ldr	r3, [pc, #524]	; (8014188 <_svfprintf_r+0x8e8>)
 8013f7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f80:	2b61      	cmp	r3, #97	; 0x61
 8013f82:	d101      	bne.n	8013f88 <_svfprintf_r+0x6e8>
 8013f84:	4b81      	ldr	r3, [pc, #516]	; (801418c <_svfprintf_r+0x8ec>)
 8013f86:	9317      	str	r3, [sp, #92]	; 0x5c
 8013f88:	9b08      	ldr	r3, [sp, #32]
 8013f8a:	3b01      	subs	r3, #1
 8013f8c:	9310      	str	r3, [sp, #64]	; 0x40
 8013f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f90:	9318      	str	r3, [sp, #96]	; 0x60
 8013f92:	2200      	movs	r2, #0
 8013f94:	4b7e      	ldr	r3, [pc, #504]	; (8014190 <_svfprintf_r+0x8f0>)
 8013f96:	0020      	movs	r0, r4
 8013f98:	0029      	movs	r1, r5
 8013f9a:	f7ed ff4b 	bl	8001e34 <__aeabi_dmul>
 8013f9e:	000d      	movs	r5, r1
 8013fa0:	0004      	movs	r4, r0
 8013fa2:	f7ee fd1d 	bl	80029e0 <__aeabi_d2iz>
 8013fa6:	9021      	str	r0, [sp, #132]	; 0x84
 8013fa8:	f7ee fd50 	bl	8002a4c <__aeabi_i2d>
 8013fac:	0002      	movs	r2, r0
 8013fae:	000b      	movs	r3, r1
 8013fb0:	0020      	movs	r0, r4
 8013fb2:	0029      	movs	r1, r5
 8013fb4:	f7ee f9b0 	bl	8002318 <__aeabi_dsub>
 8013fb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013fba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8013fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fc2:	0004      	movs	r4, r0
 8013fc4:	5c9b      	ldrb	r3, [r3, r2]
 8013fc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013fc8:	000d      	movs	r5, r1
 8013fca:	7013      	strb	r3, [r2, #0]
 8013fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fce:	9323      	str	r3, [sp, #140]	; 0x8c
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	d00a      	beq.n	8013fea <_svfprintf_r+0x74a>
 8013fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	9310      	str	r3, [sp, #64]	; 0x40
 8013fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fde:	9318      	str	r3, [sp, #96]	; 0x60
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	f7ec fa3b 	bl	800045c <__aeabi_dcmpeq>
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	d0d3      	beq.n	8013f92 <_svfprintf_r+0x6f2>
 8013fea:	2200      	movs	r2, #0
 8013fec:	4b69      	ldr	r3, [pc, #420]	; (8014194 <_svfprintf_r+0x8f4>)
 8013fee:	0020      	movs	r0, r4
 8013ff0:	0029      	movs	r1, r5
 8013ff2:	f7ec fa4d 	bl	8000490 <__aeabi_dcmpgt>
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	d126      	bne.n	8014048 <_svfprintf_r+0x7a8>
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	4b65      	ldr	r3, [pc, #404]	; (8014194 <_svfprintf_r+0x8f4>)
 8013ffe:	0020      	movs	r0, r4
 8014000:	0029      	movs	r1, r5
 8014002:	f7ec fa2b 	bl	800045c <__aeabi_dcmpeq>
 8014006:	2800      	cmp	r0, #0
 8014008:	d002      	beq.n	8014010 <_svfprintf_r+0x770>
 801400a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801400c:	07db      	lsls	r3, r3, #31
 801400e:	d41b      	bmi.n	8014048 <_svfprintf_r+0x7a8>
 8014010:	2130      	movs	r1, #48	; 0x30
 8014012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014014:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014016:	1898      	adds	r0, r3, r2
 8014018:	930d      	str	r3, [sp, #52]	; 0x34
 801401a:	1ac2      	subs	r2, r0, r3
 801401c:	d426      	bmi.n	801406c <_svfprintf_r+0x7cc>
 801401e:	7019      	strb	r1, [r3, #0]
 8014020:	3301      	adds	r3, #1
 8014022:	e7f9      	b.n	8014018 <_svfprintf_r+0x778>
 8014024:	2300      	movs	r3, #0
 8014026:	930c      	str	r3, [sp, #48]	; 0x30
 8014028:	ab3f      	add	r3, sp, #252	; 0xfc
 801402a:	9309      	str	r3, [sp, #36]	; 0x24
 801402c:	e77d      	b.n	8013f2a <_svfprintf_r+0x68a>
 801402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014030:	930c      	str	r3, [sp, #48]	; 0x30
 8014032:	e77a      	b.n	8013f2a <_svfprintf_r+0x68a>
 8014034:	2306      	movs	r3, #6
 8014036:	9308      	str	r3, [sp, #32]
 8014038:	e777      	b.n	8013f2a <_svfprintf_r+0x68a>
 801403a:	9b08      	ldr	r3, [sp, #32]
 801403c:	930c      	str	r3, [sp, #48]	; 0x30
 801403e:	2301      	movs	r3, #1
 8014040:	e7f9      	b.n	8014036 <_svfprintf_r+0x796>
 8014042:	930d      	str	r3, [sp, #52]	; 0x34
 8014044:	2300      	movs	r3, #0
 8014046:	e77f      	b.n	8013f48 <_svfprintf_r+0x6a8>
 8014048:	2030      	movs	r0, #48	; 0x30
 801404a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801404c:	932a      	str	r3, [sp, #168]	; 0xa8
 801404e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014050:	7bda      	ldrb	r2, [r3, #15]
 8014052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014054:	3b01      	subs	r3, #1
 8014056:	932a      	str	r3, [sp, #168]	; 0xa8
 8014058:	7819      	ldrb	r1, [r3, #0]
 801405a:	4291      	cmp	r1, r2
 801405c:	d07d      	beq.n	801415a <_svfprintf_r+0x8ba>
 801405e:	1c4a      	adds	r2, r1, #1
 8014060:	b2d2      	uxtb	r2, r2
 8014062:	2939      	cmp	r1, #57	; 0x39
 8014064:	d101      	bne.n	801406a <_svfprintf_r+0x7ca>
 8014066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014068:	7a92      	ldrb	r2, [r2, #10]
 801406a:	701a      	strb	r2, [r3, #0]
 801406c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801406e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014070:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014072:	1a9b      	subs	r3, r3, r2
 8014074:	930d      	str	r3, [sp, #52]	; 0x34
 8014076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014078:	2b47      	cmp	r3, #71	; 0x47
 801407a:	d000      	beq.n	801407e <_svfprintf_r+0x7de>
 801407c:	e0d2      	b.n	8014224 <_svfprintf_r+0x984>
 801407e:	1ceb      	adds	r3, r5, #3
 8014080:	db03      	blt.n	801408a <_svfprintf_r+0x7ea>
 8014082:	9b08      	ldr	r3, [sp, #32]
 8014084:	42ab      	cmp	r3, r5
 8014086:	db00      	blt.n	801408a <_svfprintf_r+0x7ea>
 8014088:	e0fd      	b.n	8014286 <_svfprintf_r+0x9e6>
 801408a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801408c:	3b02      	subs	r3, #2
 801408e:	930e      	str	r3, [sp, #56]	; 0x38
 8014090:	2238      	movs	r2, #56	; 0x38
 8014092:	466b      	mov	r3, sp
 8014094:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014096:	189b      	adds	r3, r3, r2
 8014098:	3a18      	subs	r2, #24
 801409a:	4391      	bics	r1, r2
 801409c:	1e6c      	subs	r4, r5, #1
 801409e:	000a      	movs	r2, r1
 80140a0:	9426      	str	r4, [sp, #152]	; 0x98
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	2100      	movs	r1, #0
 80140a6:	2a41      	cmp	r2, #65	; 0x41
 80140a8:	d102      	bne.n	80140b0 <_svfprintf_r+0x810>
 80140aa:	330f      	adds	r3, #15
 80140ac:	b2db      	uxtb	r3, r3
 80140ae:	3101      	adds	r1, #1
 80140b0:	aa28      	add	r2, sp, #160	; 0xa0
 80140b2:	7013      	strb	r3, [r2, #0]
 80140b4:	232b      	movs	r3, #43	; 0x2b
 80140b6:	2c00      	cmp	r4, #0
 80140b8:	da02      	bge.n	80140c0 <_svfprintf_r+0x820>
 80140ba:	2401      	movs	r4, #1
 80140bc:	232d      	movs	r3, #45	; 0x2d
 80140be:	1b64      	subs	r4, r4, r5
 80140c0:	7053      	strb	r3, [r2, #1]
 80140c2:	2c09      	cmp	r4, #9
 80140c4:	dc00      	bgt.n	80140c8 <_svfprintf_r+0x828>
 80140c6:	e0c7      	b.n	8014258 <_svfprintf_r+0x9b8>
 80140c8:	2537      	movs	r5, #55	; 0x37
 80140ca:	ab1e      	add	r3, sp, #120	; 0x78
 80140cc:	18ed      	adds	r5, r5, r3
 80140ce:	1e6b      	subs	r3, r5, #1
 80140d0:	0020      	movs	r0, r4
 80140d2:	210a      	movs	r1, #10
 80140d4:	9308      	str	r3, [sp, #32]
 80140d6:	f7ec f9ab 	bl	8000430 <__aeabi_idivmod>
 80140da:	1e6b      	subs	r3, r5, #1
 80140dc:	3130      	adds	r1, #48	; 0x30
 80140de:	7019      	strb	r1, [r3, #0]
 80140e0:	0020      	movs	r0, r4
 80140e2:	210a      	movs	r1, #10
 80140e4:	f7ec f8be 	bl	8000264 <__divsi3>
 80140e8:	0004      	movs	r4, r0
 80140ea:	2809      	cmp	r0, #9
 80140ec:	dd00      	ble.n	80140f0 <_svfprintf_r+0x850>
 80140ee:	e0ac      	b.n	801424a <_svfprintf_r+0x9aa>
 80140f0:	232a      	movs	r3, #42	; 0x2a
 80140f2:	2137      	movs	r1, #55	; 0x37
 80140f4:	aa1e      	add	r2, sp, #120	; 0x78
 80140f6:	3d02      	subs	r5, #2
 80140f8:	3430      	adds	r4, #48	; 0x30
 80140fa:	702c      	strb	r4, [r5, #0]
 80140fc:	189b      	adds	r3, r3, r2
 80140fe:	1889      	adds	r1, r1, r2
 8014100:	001a      	movs	r2, r3
 8014102:	428d      	cmp	r5, r1
 8014104:	d200      	bcs.n	8014108 <_svfprintf_r+0x868>
 8014106:	e0a2      	b.n	801424e <_svfprintf_r+0x9ae>
 8014108:	ab28      	add	r3, sp, #160	; 0xa0
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	931d      	str	r3, [sp, #116]	; 0x74
 801410e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014112:	4694      	mov	ip, r2
 8014114:	4463      	add	r3, ip
 8014116:	9308      	str	r3, [sp, #32]
 8014118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801411a:	2b01      	cmp	r3, #1
 801411c:	dc01      	bgt.n	8014122 <_svfprintf_r+0x882>
 801411e:	07f3      	lsls	r3, r6, #31
 8014120:	d504      	bpl.n	801412c <_svfprintf_r+0x88c>
 8014122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014124:	9b08      	ldr	r3, [sp, #32]
 8014126:	4694      	mov	ip, r2
 8014128:	4463      	add	r3, ip
 801412a:	9308      	str	r3, [sp, #32]
 801412c:	2280      	movs	r2, #128	; 0x80
 801412e:	4b1a      	ldr	r3, [pc, #104]	; (8014198 <_svfprintf_r+0x8f8>)
 8014130:	0052      	lsls	r2, r2, #1
 8014132:	4033      	ands	r3, r6
 8014134:	431a      	orrs	r2, r3
 8014136:	2300      	movs	r3, #0
 8014138:	001d      	movs	r5, r3
 801413a:	9220      	str	r2, [sp, #128]	; 0x80
 801413c:	9310      	str	r3, [sp, #64]	; 0x40
 801413e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014142:	2b00      	cmp	r3, #0
 8014144:	d100      	bne.n	8014148 <_svfprintf_r+0x8a8>
 8014146:	e270      	b.n	801462a <_svfprintf_r+0xd8a>
 8014148:	231b      	movs	r3, #27
 801414a:	aa1e      	add	r2, sp, #120	; 0x78
 801414c:	189b      	adds	r3, r3, r2
 801414e:	222d      	movs	r2, #45	; 0x2d
 8014150:	701a      	strb	r2, [r3, #0]
 8014152:	2300      	movs	r3, #0
 8014154:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014156:	9317      	str	r3, [sp, #92]	; 0x5c
 8014158:	e539      	b.n	8013bce <_svfprintf_r+0x32e>
 801415a:	7018      	strb	r0, [r3, #0]
 801415c:	e779      	b.n	8014052 <_svfprintf_r+0x7b2>
 801415e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014160:	2b46      	cmp	r3, #70	; 0x46
 8014162:	d01b      	beq.n	801419c <_svfprintf_r+0x8fc>
 8014164:	9d08      	ldr	r5, [sp, #32]
 8014166:	2b45      	cmp	r3, #69	; 0x45
 8014168:	d101      	bne.n	801416e <_svfprintf_r+0x8ce>
 801416a:	9b08      	ldr	r3, [sp, #32]
 801416c:	1c5d      	adds	r5, r3, #1
 801416e:	2302      	movs	r3, #2
 8014170:	e016      	b.n	80141a0 <_svfprintf_r+0x900>
 8014172:	46c0      	nop			; (mov r8, r8)
 8014174:	7fefffff 	.word	0x7fefffff
 8014178:	08019c4c 	.word	0x08019c4c
 801417c:	08019c48 	.word	0x08019c48
 8014180:	08019c54 	.word	0x08019c54
 8014184:	08019c50 	.word	0x08019c50
 8014188:	08019c69 	.word	0x08019c69
 801418c:	08019c58 	.word	0x08019c58
 8014190:	40300000 	.word	0x40300000
 8014194:	3fe00000 	.word	0x3fe00000
 8014198:	fffffbff 	.word	0xfffffbff
 801419c:	2303      	movs	r3, #3
 801419e:	9d08      	ldr	r5, [sp, #32]
 80141a0:	aa2a      	add	r2, sp, #168	; 0xa8
 80141a2:	9204      	str	r2, [sp, #16]
 80141a4:	aa27      	add	r2, sp, #156	; 0x9c
 80141a6:	9203      	str	r2, [sp, #12]
 80141a8:	aa26      	add	r2, sp, #152	; 0x98
 80141aa:	9202      	str	r2, [sp, #8]
 80141ac:	9300      	str	r3, [sp, #0]
 80141ae:	9501      	str	r5, [sp, #4]
 80141b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141b2:	0022      	movs	r2, r4
 80141b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141b6:	f000 fe79 	bl	8014eac <_dtoa_r>
 80141ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141bc:	9009      	str	r0, [sp, #36]	; 0x24
 80141be:	2b47      	cmp	r3, #71	; 0x47
 80141c0:	d101      	bne.n	80141c6 <_svfprintf_r+0x926>
 80141c2:	07f3      	lsls	r3, r6, #31
 80141c4:	d524      	bpl.n	8014210 <_svfprintf_r+0x970>
 80141c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c8:	195b      	adds	r3, r3, r5
 80141ca:	9310      	str	r3, [sp, #64]	; 0x40
 80141cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141ce:	2b46      	cmp	r3, #70	; 0x46
 80141d0:	d113      	bne.n	80141fa <_svfprintf_r+0x95a>
 80141d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	2b30      	cmp	r3, #48	; 0x30
 80141d8:	d10a      	bne.n	80141f0 <_svfprintf_r+0x950>
 80141da:	2200      	movs	r2, #0
 80141dc:	2300      	movs	r3, #0
 80141de:	0020      	movs	r0, r4
 80141e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80141e2:	f7ec f93b 	bl	800045c <__aeabi_dcmpeq>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d102      	bne.n	80141f0 <_svfprintf_r+0x950>
 80141ea:	2301      	movs	r3, #1
 80141ec:	1b5d      	subs	r5, r3, r5
 80141ee:	9526      	str	r5, [sp, #152]	; 0x98
 80141f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80141f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80141f4:	4694      	mov	ip, r2
 80141f6:	4463      	add	r3, ip
 80141f8:	9310      	str	r3, [sp, #64]	; 0x40
 80141fa:	2200      	movs	r2, #0
 80141fc:	2300      	movs	r3, #0
 80141fe:	0020      	movs	r0, r4
 8014200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014202:	f7ec f92b 	bl	800045c <__aeabi_dcmpeq>
 8014206:	2230      	movs	r2, #48	; 0x30
 8014208:	2800      	cmp	r0, #0
 801420a:	d006      	beq.n	801421a <_svfprintf_r+0x97a>
 801420c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801420e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014212:	e72c      	b.n	801406e <_svfprintf_r+0x7ce>
 8014214:	1c59      	adds	r1, r3, #1
 8014216:	912a      	str	r1, [sp, #168]	; 0xa8
 8014218:	701a      	strb	r2, [r3, #0]
 801421a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801421c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801421e:	4299      	cmp	r1, r3
 8014220:	d8f8      	bhi.n	8014214 <_svfprintf_r+0x974>
 8014222:	e7f5      	b.n	8014210 <_svfprintf_r+0x970>
 8014224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014226:	2b46      	cmp	r3, #70	; 0x46
 8014228:	d000      	beq.n	801422c <_svfprintf_r+0x98c>
 801422a:	e731      	b.n	8014090 <_svfprintf_r+0x7f0>
 801422c:	9b08      	ldr	r3, [sp, #32]
 801422e:	2d00      	cmp	r5, #0
 8014230:	dd21      	ble.n	8014276 <_svfprintf_r+0x9d6>
 8014232:	2b00      	cmp	r3, #0
 8014234:	d101      	bne.n	801423a <_svfprintf_r+0x99a>
 8014236:	07f3      	lsls	r3, r6, #31
 8014238:	d54a      	bpl.n	80142d0 <_svfprintf_r+0xa30>
 801423a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801423c:	18eb      	adds	r3, r5, r3
 801423e:	9a08      	ldr	r2, [sp, #32]
 8014240:	18d3      	adds	r3, r2, r3
 8014242:	9308      	str	r3, [sp, #32]
 8014244:	2366      	movs	r3, #102	; 0x66
 8014246:	930e      	str	r3, [sp, #56]	; 0x38
 8014248:	e034      	b.n	80142b4 <_svfprintf_r+0xa14>
 801424a:	9d08      	ldr	r5, [sp, #32]
 801424c:	e73f      	b.n	80140ce <_svfprintf_r+0x82e>
 801424e:	782a      	ldrb	r2, [r5, #0]
 8014250:	3501      	adds	r5, #1
 8014252:	701a      	strb	r2, [r3, #0]
 8014254:	3301      	adds	r3, #1
 8014256:	e753      	b.n	8014100 <_svfprintf_r+0x860>
 8014258:	232a      	movs	r3, #42	; 0x2a
 801425a:	aa1e      	add	r2, sp, #120	; 0x78
 801425c:	189b      	adds	r3, r3, r2
 801425e:	2900      	cmp	r1, #0
 8014260:	d105      	bne.n	801426e <_svfprintf_r+0x9ce>
 8014262:	2230      	movs	r2, #48	; 0x30
 8014264:	ab28      	add	r3, sp, #160	; 0xa0
 8014266:	709a      	strb	r2, [r3, #2]
 8014268:	232b      	movs	r3, #43	; 0x2b
 801426a:	aa1e      	add	r2, sp, #120	; 0x78
 801426c:	189b      	adds	r3, r3, r2
 801426e:	3430      	adds	r4, #48	; 0x30
 8014270:	1c5a      	adds	r2, r3, #1
 8014272:	701c      	strb	r4, [r3, #0]
 8014274:	e748      	b.n	8014108 <_svfprintf_r+0x868>
 8014276:	2b00      	cmp	r3, #0
 8014278:	d102      	bne.n	8014280 <_svfprintf_r+0x9e0>
 801427a:	3301      	adds	r3, #1
 801427c:	421e      	tst	r6, r3
 801427e:	d029      	beq.n	80142d4 <_svfprintf_r+0xa34>
 8014280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014282:	3301      	adds	r3, #1
 8014284:	e7db      	b.n	801423e <_svfprintf_r+0x99e>
 8014286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014288:	42ab      	cmp	r3, r5
 801428a:	dc06      	bgt.n	801429a <_svfprintf_r+0x9fa>
 801428c:	07f3      	lsls	r3, r6, #31
 801428e:	d524      	bpl.n	80142da <_svfprintf_r+0xa3a>
 8014290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014292:	18eb      	adds	r3, r5, r3
 8014294:	9308      	str	r3, [sp, #32]
 8014296:	2367      	movs	r3, #103	; 0x67
 8014298:	e7d5      	b.n	8014246 <_svfprintf_r+0x9a6>
 801429a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801429c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801429e:	4694      	mov	ip, r2
 80142a0:	4463      	add	r3, ip
 80142a2:	9308      	str	r3, [sp, #32]
 80142a4:	2367      	movs	r3, #103	; 0x67
 80142a6:	930e      	str	r3, [sp, #56]	; 0x38
 80142a8:	2d00      	cmp	r5, #0
 80142aa:	dc03      	bgt.n	80142b4 <_svfprintf_r+0xa14>
 80142ac:	9b08      	ldr	r3, [sp, #32]
 80142ae:	1b5b      	subs	r3, r3, r5
 80142b0:	3301      	adds	r3, #1
 80142b2:	9308      	str	r3, [sp, #32]
 80142b4:	2380      	movs	r3, #128	; 0x80
 80142b6:	00db      	lsls	r3, r3, #3
 80142b8:	401e      	ands	r6, r3
 80142ba:	2300      	movs	r3, #0
 80142bc:	960f      	str	r6, [sp, #60]	; 0x3c
 80142be:	9310      	str	r3, [sp, #64]	; 0x40
 80142c0:	2e00      	cmp	r6, #0
 80142c2:	d100      	bne.n	80142c6 <_svfprintf_r+0xa26>
 80142c4:	e73c      	b.n	8014140 <_svfprintf_r+0x8a0>
 80142c6:	2d00      	cmp	r5, #0
 80142c8:	dc27      	bgt.n	801431a <_svfprintf_r+0xa7a>
 80142ca:	2300      	movs	r3, #0
 80142cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80142ce:	e737      	b.n	8014140 <_svfprintf_r+0x8a0>
 80142d0:	9508      	str	r5, [sp, #32]
 80142d2:	e7b7      	b.n	8014244 <_svfprintf_r+0x9a4>
 80142d4:	2266      	movs	r2, #102	; 0x66
 80142d6:	920e      	str	r2, [sp, #56]	; 0x38
 80142d8:	e7eb      	b.n	80142b2 <_svfprintf_r+0xa12>
 80142da:	9508      	str	r5, [sp, #32]
 80142dc:	e7db      	b.n	8014296 <_svfprintf_r+0x9f6>
 80142de:	42ab      	cmp	r3, r5
 80142e0:	da0e      	bge.n	8014300 <_svfprintf_r+0xa60>
 80142e2:	1aed      	subs	r5, r5, r3
 80142e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142e6:	785b      	ldrb	r3, [r3, #1]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d012      	beq.n	8014312 <_svfprintf_r+0xa72>
 80142ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142ee:	3301      	adds	r3, #1
 80142f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80142f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142f4:	3301      	adds	r3, #1
 80142f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80142f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	2bff      	cmp	r3, #255	; 0xff
 80142fe:	d1ee      	bne.n	80142de <_svfprintf_r+0xa3e>
 8014300:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014304:	189b      	adds	r3, r3, r2
 8014306:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014308:	4353      	muls	r3, r2
 801430a:	9a08      	ldr	r2, [sp, #32]
 801430c:	189b      	adds	r3, r3, r2
 801430e:	9308      	str	r3, [sp, #32]
 8014310:	e716      	b.n	8014140 <_svfprintf_r+0x8a0>
 8014312:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014314:	3301      	adds	r3, #1
 8014316:	9310      	str	r3, [sp, #64]	; 0x40
 8014318:	e7ee      	b.n	80142f8 <_svfprintf_r+0xa58>
 801431a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801431c:	930f      	str	r3, [sp, #60]	; 0x3c
 801431e:	e7eb      	b.n	80142f8 <_svfprintf_r+0xa58>
 8014320:	0022      	movs	r2, r4
 8014322:	ca08      	ldmia	r2!, {r3}
 8014324:	9212      	str	r2, [sp, #72]	; 0x48
 8014326:	06b2      	lsls	r2, r6, #26
 8014328:	d508      	bpl.n	801433c <_svfprintf_r+0xa9c>
 801432a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801432c:	601a      	str	r2, [r3, #0]
 801432e:	17d2      	asrs	r2, r2, #31
 8014330:	605a      	str	r2, [r3, #4]
 8014332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014334:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014336:	9309      	str	r3, [sp, #36]	; 0x24
 8014338:	f7ff faeb 	bl	8013912 <_svfprintf_r+0x72>
 801433c:	06f2      	lsls	r2, r6, #27
 801433e:	d502      	bpl.n	8014346 <_svfprintf_r+0xaa6>
 8014340:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014342:	601a      	str	r2, [r3, #0]
 8014344:	e7f5      	b.n	8014332 <_svfprintf_r+0xa92>
 8014346:	0672      	lsls	r2, r6, #25
 8014348:	d502      	bpl.n	8014350 <_svfprintf_r+0xab0>
 801434a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801434c:	801a      	strh	r2, [r3, #0]
 801434e:	e7f0      	b.n	8014332 <_svfprintf_r+0xa92>
 8014350:	05b2      	lsls	r2, r6, #22
 8014352:	d5f5      	bpl.n	8014340 <_svfprintf_r+0xaa0>
 8014354:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014356:	701a      	strb	r2, [r3, #0]
 8014358:	e7eb      	b.n	8014332 <_svfprintf_r+0xa92>
 801435a:	2310      	movs	r3, #16
 801435c:	431e      	orrs	r6, r3
 801435e:	2220      	movs	r2, #32
 8014360:	4032      	ands	r2, r6
 8014362:	d025      	beq.n	80143b0 <_svfprintf_r+0xb10>
 8014364:	2307      	movs	r3, #7
 8014366:	3407      	adds	r4, #7
 8014368:	439c      	bics	r4, r3
 801436a:	0023      	movs	r3, r4
 801436c:	3308      	adds	r3, #8
 801436e:	9312      	str	r3, [sp, #72]	; 0x48
 8014370:	6823      	ldr	r3, [r4, #0]
 8014372:	6864      	ldr	r4, [r4, #4]
 8014374:	9306      	str	r3, [sp, #24]
 8014376:	9407      	str	r4, [sp, #28]
 8014378:	4bc2      	ldr	r3, [pc, #776]	; (8014684 <_svfprintf_r+0xde4>)
 801437a:	401e      	ands	r6, r3
 801437c:	2300      	movs	r3, #0
 801437e:	221b      	movs	r2, #27
 8014380:	a91e      	add	r1, sp, #120	; 0x78
 8014382:	1852      	adds	r2, r2, r1
 8014384:	2100      	movs	r1, #0
 8014386:	7011      	strb	r1, [r2, #0]
 8014388:	9a08      	ldr	r2, [sp, #32]
 801438a:	3201      	adds	r2, #1
 801438c:	d100      	bne.n	8014390 <_svfprintf_r+0xaf0>
 801438e:	e0a6      	b.n	80144de <_svfprintf_r+0xc3e>
 8014390:	0032      	movs	r2, r6
 8014392:	2180      	movs	r1, #128	; 0x80
 8014394:	9807      	ldr	r0, [sp, #28]
 8014396:	438e      	bics	r6, r1
 8014398:	9906      	ldr	r1, [sp, #24]
 801439a:	4301      	orrs	r1, r0
 801439c:	d000      	beq.n	80143a0 <_svfprintf_r+0xb00>
 801439e:	e09e      	b.n	80144de <_svfprintf_r+0xc3e>
 80143a0:	9908      	ldr	r1, [sp, #32]
 80143a2:	2900      	cmp	r1, #0
 80143a4:	d100      	bne.n	80143a8 <_svfprintf_r+0xb08>
 80143a6:	e125      	b.n	80145f4 <_svfprintf_r+0xd54>
 80143a8:	2b01      	cmp	r3, #1
 80143aa:	d000      	beq.n	80143ae <_svfprintf_r+0xb0e>
 80143ac:	e09a      	b.n	80144e4 <_svfprintf_r+0xc44>
 80143ae:	e518      	b.n	8013de2 <_svfprintf_r+0x542>
 80143b0:	1d23      	adds	r3, r4, #4
 80143b2:	9312      	str	r3, [sp, #72]	; 0x48
 80143b4:	2310      	movs	r3, #16
 80143b6:	4033      	ands	r3, r6
 80143b8:	d003      	beq.n	80143c2 <_svfprintf_r+0xb22>
 80143ba:	6823      	ldr	r3, [r4, #0]
 80143bc:	9306      	str	r3, [sp, #24]
 80143be:	9207      	str	r2, [sp, #28]
 80143c0:	e7da      	b.n	8014378 <_svfprintf_r+0xad8>
 80143c2:	2240      	movs	r2, #64	; 0x40
 80143c4:	4032      	ands	r2, r6
 80143c6:	d004      	beq.n	80143d2 <_svfprintf_r+0xb32>
 80143c8:	6822      	ldr	r2, [r4, #0]
 80143ca:	b292      	uxth	r2, r2
 80143cc:	9206      	str	r2, [sp, #24]
 80143ce:	9307      	str	r3, [sp, #28]
 80143d0:	e7d2      	b.n	8014378 <_svfprintf_r+0xad8>
 80143d2:	2380      	movs	r3, #128	; 0x80
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	4033      	ands	r3, r6
 80143d8:	d002      	beq.n	80143e0 <_svfprintf_r+0xb40>
 80143da:	6823      	ldr	r3, [r4, #0]
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	e7ed      	b.n	80143bc <_svfprintf_r+0xb1c>
 80143e0:	6822      	ldr	r2, [r4, #0]
 80143e2:	e7f3      	b.n	80143cc <_svfprintf_r+0xb2c>
 80143e4:	1d23      	adds	r3, r4, #4
 80143e6:	49a8      	ldr	r1, [pc, #672]	; (8014688 <_svfprintf_r+0xde8>)
 80143e8:	aa25      	add	r2, sp, #148	; 0x94
 80143ea:	9312      	str	r3, [sp, #72]	; 0x48
 80143ec:	6823      	ldr	r3, [r4, #0]
 80143ee:	8011      	strh	r1, [r2, #0]
 80143f0:	4aa6      	ldr	r2, [pc, #664]	; (801468c <_svfprintf_r+0xdec>)
 80143f2:	9306      	str	r3, [sp, #24]
 80143f4:	2300      	movs	r3, #0
 80143f6:	921e      	str	r2, [sp, #120]	; 0x78
 80143f8:	2278      	movs	r2, #120	; 0x78
 80143fa:	9307      	str	r3, [sp, #28]
 80143fc:	3302      	adds	r3, #2
 80143fe:	431e      	orrs	r6, r3
 8014400:	920e      	str	r2, [sp, #56]	; 0x38
 8014402:	e7bc      	b.n	801437e <_svfprintf_r+0xade>
 8014404:	1d23      	adds	r3, r4, #4
 8014406:	9312      	str	r3, [sp, #72]	; 0x48
 8014408:	6823      	ldr	r3, [r4, #0]
 801440a:	2400      	movs	r4, #0
 801440c:	9309      	str	r3, [sp, #36]	; 0x24
 801440e:	231b      	movs	r3, #27
 8014410:	aa1e      	add	r2, sp, #120	; 0x78
 8014412:	189b      	adds	r3, r3, r2
 8014414:	701c      	strb	r4, [r3, #0]
 8014416:	9b08      	ldr	r3, [sp, #32]
 8014418:	3301      	adds	r3, #1
 801441a:	d00e      	beq.n	801443a <_svfprintf_r+0xb9a>
 801441c:	9a08      	ldr	r2, [sp, #32]
 801441e:	0021      	movs	r1, r4
 8014420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014422:	f001 ff79 	bl	8016318 <memchr>
 8014426:	900c      	str	r0, [sp, #48]	; 0x30
 8014428:	42a0      	cmp	r0, r4
 801442a:	d100      	bne.n	801442e <_svfprintf_r+0xb8e>
 801442c:	e100      	b.n	8014630 <_svfprintf_r+0xd90>
 801442e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014430:	1a83      	subs	r3, r0, r2
 8014432:	9308      	str	r3, [sp, #32]
 8014434:	940c      	str	r4, [sp, #48]	; 0x30
 8014436:	0023      	movs	r3, r4
 8014438:	e527      	b.n	8013e8a <_svfprintf_r+0x5ea>
 801443a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801443c:	f7eb fe6c 	bl	8000118 <strlen>
 8014440:	9008      	str	r0, [sp, #32]
 8014442:	e7f7      	b.n	8014434 <_svfprintf_r+0xb94>
 8014444:	2310      	movs	r3, #16
 8014446:	431e      	orrs	r6, r3
 8014448:	2220      	movs	r2, #32
 801444a:	4032      	ands	r2, r6
 801444c:	d00b      	beq.n	8014466 <_svfprintf_r+0xbc6>
 801444e:	2307      	movs	r3, #7
 8014450:	3407      	adds	r4, #7
 8014452:	439c      	bics	r4, r3
 8014454:	0023      	movs	r3, r4
 8014456:	3308      	adds	r3, #8
 8014458:	9312      	str	r3, [sp, #72]	; 0x48
 801445a:	6823      	ldr	r3, [r4, #0]
 801445c:	6864      	ldr	r4, [r4, #4]
 801445e:	9306      	str	r3, [sp, #24]
 8014460:	9407      	str	r4, [sp, #28]
 8014462:	2301      	movs	r3, #1
 8014464:	e78b      	b.n	801437e <_svfprintf_r+0xade>
 8014466:	1d23      	adds	r3, r4, #4
 8014468:	9312      	str	r3, [sp, #72]	; 0x48
 801446a:	2310      	movs	r3, #16
 801446c:	4033      	ands	r3, r6
 801446e:	d003      	beq.n	8014478 <_svfprintf_r+0xbd8>
 8014470:	6823      	ldr	r3, [r4, #0]
 8014472:	9306      	str	r3, [sp, #24]
 8014474:	9207      	str	r2, [sp, #28]
 8014476:	e7f4      	b.n	8014462 <_svfprintf_r+0xbc2>
 8014478:	2240      	movs	r2, #64	; 0x40
 801447a:	4032      	ands	r2, r6
 801447c:	d004      	beq.n	8014488 <_svfprintf_r+0xbe8>
 801447e:	6822      	ldr	r2, [r4, #0]
 8014480:	b292      	uxth	r2, r2
 8014482:	9206      	str	r2, [sp, #24]
 8014484:	9307      	str	r3, [sp, #28]
 8014486:	e7ec      	b.n	8014462 <_svfprintf_r+0xbc2>
 8014488:	2380      	movs	r3, #128	; 0x80
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	4033      	ands	r3, r6
 801448e:	d002      	beq.n	8014496 <_svfprintf_r+0xbf6>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	b2db      	uxtb	r3, r3
 8014494:	e7ed      	b.n	8014472 <_svfprintf_r+0xbd2>
 8014496:	6822      	ldr	r2, [r4, #0]
 8014498:	e7f3      	b.n	8014482 <_svfprintf_r+0xbe2>
 801449a:	4b7c      	ldr	r3, [pc, #496]	; (801468c <_svfprintf_r+0xdec>)
 801449c:	f7ff fad9 	bl	8013a52 <_svfprintf_r+0x1b2>
 80144a0:	1d23      	adds	r3, r4, #4
 80144a2:	9312      	str	r3, [sp, #72]	; 0x48
 80144a4:	2310      	movs	r3, #16
 80144a6:	4033      	ands	r3, r6
 80144a8:	d004      	beq.n	80144b4 <_svfprintf_r+0xc14>
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	9306      	str	r3, [sp, #24]
 80144ae:	9207      	str	r2, [sp, #28]
 80144b0:	f7ff fadf 	bl	8013a72 <_svfprintf_r+0x1d2>
 80144b4:	2240      	movs	r2, #64	; 0x40
 80144b6:	4032      	ands	r2, r6
 80144b8:	d005      	beq.n	80144c6 <_svfprintf_r+0xc26>
 80144ba:	6822      	ldr	r2, [r4, #0]
 80144bc:	b292      	uxth	r2, r2
 80144be:	9206      	str	r2, [sp, #24]
 80144c0:	9307      	str	r3, [sp, #28]
 80144c2:	f7ff fad6 	bl	8013a72 <_svfprintf_r+0x1d2>
 80144c6:	2380      	movs	r3, #128	; 0x80
 80144c8:	009b      	lsls	r3, r3, #2
 80144ca:	4033      	ands	r3, r6
 80144cc:	d002      	beq.n	80144d4 <_svfprintf_r+0xc34>
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	e7eb      	b.n	80144ac <_svfprintf_r+0xc0c>
 80144d4:	6822      	ldr	r2, [r4, #0]
 80144d6:	e7f2      	b.n	80144be <_svfprintf_r+0xc1e>
 80144d8:	0032      	movs	r2, r6
 80144da:	2301      	movs	r3, #1
 80144dc:	e759      	b.n	8014392 <_svfprintf_r+0xaf2>
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d100      	bne.n	80144e4 <_svfprintf_r+0xc44>
 80144e2:	e476      	b.n	8013dd2 <_svfprintf_r+0x532>
 80144e4:	2b02      	cmp	r3, #2
 80144e6:	d06b      	beq.n	80145c0 <_svfprintf_r+0xd20>
 80144e8:	2507      	movs	r5, #7
 80144ea:	ab58      	add	r3, sp, #352	; 0x160
 80144ec:	1e5a      	subs	r2, r3, #1
 80144ee:	9209      	str	r2, [sp, #36]	; 0x24
 80144f0:	9a06      	ldr	r2, [sp, #24]
 80144f2:	1e59      	subs	r1, r3, #1
 80144f4:	402a      	ands	r2, r5
 80144f6:	3230      	adds	r2, #48	; 0x30
 80144f8:	700a      	strb	r2, [r1, #0]
 80144fa:	9907      	ldr	r1, [sp, #28]
 80144fc:	074c      	lsls	r4, r1, #29
 80144fe:	9906      	ldr	r1, [sp, #24]
 8014500:	08c8      	lsrs	r0, r1, #3
 8014502:	9907      	ldr	r1, [sp, #28]
 8014504:	4304      	orrs	r4, r0
 8014506:	08c9      	lsrs	r1, r1, #3
 8014508:	9107      	str	r1, [sp, #28]
 801450a:	0021      	movs	r1, r4
 801450c:	9807      	ldr	r0, [sp, #28]
 801450e:	9406      	str	r4, [sp, #24]
 8014510:	4301      	orrs	r1, r0
 8014512:	d111      	bne.n	8014538 <_svfprintf_r+0xc98>
 8014514:	07f1      	lsls	r1, r6, #31
 8014516:	d502      	bpl.n	801451e <_svfprintf_r+0xc7e>
 8014518:	3b02      	subs	r3, #2
 801451a:	2a30      	cmp	r2, #48	; 0x30
 801451c:	d173      	bne.n	8014606 <_svfprintf_r+0xd66>
 801451e:	9b08      	ldr	r3, [sp, #32]
 8014520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014522:	9317      	str	r3, [sp, #92]	; 0x5c
 8014524:	ab58      	add	r3, sp, #352	; 0x160
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	9308      	str	r3, [sp, #32]
 801452a:	2300      	movs	r3, #0
 801452c:	930c      	str	r3, [sp, #48]	; 0x30
 801452e:	9310      	str	r3, [sp, #64]	; 0x40
 8014530:	930f      	str	r3, [sp, #60]	; 0x3c
 8014532:	001d      	movs	r5, r3
 8014534:	f7ff fb4b 	bl	8013bce <_svfprintf_r+0x32e>
 8014538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801453a:	e7d7      	b.n	80144ec <_svfprintf_r+0xc4c>
 801453c:	2480      	movs	r4, #128	; 0x80
 801453e:	2300      	movs	r3, #0
 8014540:	00e4      	lsls	r4, r4, #3
 8014542:	930d      	str	r3, [sp, #52]	; 0x34
 8014544:	4034      	ands	r4, r6
 8014546:	ab58      	add	r3, sp, #352	; 0x160
 8014548:	3b01      	subs	r3, #1
 801454a:	9309      	str	r3, [sp, #36]	; 0x24
 801454c:	220a      	movs	r2, #10
 801454e:	9806      	ldr	r0, [sp, #24]
 8014550:	9907      	ldr	r1, [sp, #28]
 8014552:	2300      	movs	r3, #0
 8014554:	f7eb ffea 	bl	800052c <__aeabi_uldivmod>
 8014558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801455a:	3230      	adds	r2, #48	; 0x30
 801455c:	701a      	strb	r2, [r3, #0]
 801455e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014560:	3301      	adds	r3, #1
 8014562:	930d      	str	r3, [sp, #52]	; 0x34
 8014564:	2c00      	cmp	r4, #0
 8014566:	d01d      	beq.n	80145a4 <_svfprintf_r+0xd04>
 8014568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801456a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	429a      	cmp	r2, r3
 8014570:	d118      	bne.n	80145a4 <_svfprintf_r+0xd04>
 8014572:	2aff      	cmp	r2, #255	; 0xff
 8014574:	d016      	beq.n	80145a4 <_svfprintf_r+0xd04>
 8014576:	9b07      	ldr	r3, [sp, #28]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d102      	bne.n	8014582 <_svfprintf_r+0xce2>
 801457c:	9b06      	ldr	r3, [sp, #24]
 801457e:	2b09      	cmp	r3, #9
 8014580:	d910      	bls.n	80145a4 <_svfprintf_r+0xd04>
 8014582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014584:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014586:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014588:	1a9b      	subs	r3, r3, r2
 801458a:	0018      	movs	r0, r3
 801458c:	9309      	str	r3, [sp, #36]	; 0x24
 801458e:	f7fe fa52 	bl	8012a36 <strncpy>
 8014592:	2200      	movs	r2, #0
 8014594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014596:	920d      	str	r2, [sp, #52]	; 0x34
 8014598:	785b      	ldrb	r3, [r3, #1]
 801459a:	1e5a      	subs	r2, r3, #1
 801459c:	4193      	sbcs	r3, r2
 801459e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80145a0:	18d3      	adds	r3, r2, r3
 80145a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80145a4:	220a      	movs	r2, #10
 80145a6:	9806      	ldr	r0, [sp, #24]
 80145a8:	9907      	ldr	r1, [sp, #28]
 80145aa:	2300      	movs	r3, #0
 80145ac:	f7eb ffbe 	bl	800052c <__aeabi_uldivmod>
 80145b0:	9006      	str	r0, [sp, #24]
 80145b2:	9107      	str	r1, [sp, #28]
 80145b4:	9b06      	ldr	r3, [sp, #24]
 80145b6:	9a07      	ldr	r2, [sp, #28]
 80145b8:	4313      	orrs	r3, r2
 80145ba:	d0b0      	beq.n	801451e <_svfprintf_r+0xc7e>
 80145bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145be:	e7c3      	b.n	8014548 <_svfprintf_r+0xca8>
 80145c0:	200f      	movs	r0, #15
 80145c2:	ab58      	add	r3, sp, #352	; 0x160
 80145c4:	9309      	str	r3, [sp, #36]	; 0x24
 80145c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80145ca:	3b01      	subs	r3, #1
 80145cc:	9309      	str	r3, [sp, #36]	; 0x24
 80145ce:	9b06      	ldr	r3, [sp, #24]
 80145d0:	4003      	ands	r3, r0
 80145d2:	5cd3      	ldrb	r3, [r2, r3]
 80145d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145d6:	7013      	strb	r3, [r2, #0]
 80145d8:	9b07      	ldr	r3, [sp, #28]
 80145da:	0719      	lsls	r1, r3, #28
 80145dc:	9b06      	ldr	r3, [sp, #24]
 80145de:	091a      	lsrs	r2, r3, #4
 80145e0:	9b07      	ldr	r3, [sp, #28]
 80145e2:	4311      	orrs	r1, r2
 80145e4:	091b      	lsrs	r3, r3, #4
 80145e6:	9307      	str	r3, [sp, #28]
 80145e8:	000b      	movs	r3, r1
 80145ea:	9a07      	ldr	r2, [sp, #28]
 80145ec:	9106      	str	r1, [sp, #24]
 80145ee:	4313      	orrs	r3, r2
 80145f0:	d1e9      	bne.n	80145c6 <_svfprintf_r+0xd26>
 80145f2:	e794      	b.n	801451e <_svfprintf_r+0xc7e>
 80145f4:	a958      	add	r1, sp, #352	; 0x160
 80145f6:	9109      	str	r1, [sp, #36]	; 0x24
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d190      	bne.n	801451e <_svfprintf_r+0xc7e>
 80145fc:	07d3      	lsls	r3, r2, #31
 80145fe:	d58e      	bpl.n	801451e <_svfprintf_r+0xc7e>
 8014600:	23e7      	movs	r3, #231	; 0xe7
 8014602:	aa1e      	add	r2, sp, #120	; 0x78
 8014604:	189b      	adds	r3, r3, r2
 8014606:	2230      	movs	r2, #48	; 0x30
 8014608:	f7ff fbf0 	bl	8013dec <_svfprintf_r+0x54c>
 801460c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801460e:	2b00      	cmp	r3, #0
 8014610:	d100      	bne.n	8014614 <_svfprintf_r+0xd74>
 8014612:	e38a      	b.n	8014d2a <_svfprintf_r+0x148a>
 8014614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014616:	ab3f      	add	r3, sp, #252	; 0xfc
 8014618:	701a      	strb	r2, [r3, #0]
 801461a:	221b      	movs	r2, #27
 801461c:	2000      	movs	r0, #0
 801461e:	a91e      	add	r1, sp, #120	; 0x78
 8014620:	1852      	adds	r2, r2, r1
 8014622:	7010      	strb	r0, [r2, #0]
 8014624:	9412      	str	r4, [sp, #72]	; 0x48
 8014626:	f7ff faca 	bl	8013bbe <_svfprintf_r+0x31e>
 801462a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801462c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801462e:	e592      	b.n	8014156 <_svfprintf_r+0x8b6>
 8014630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014632:	e42a      	b.n	8013e8a <_svfprintf_r+0x5ea>
 8014634:	2010      	movs	r0, #16
 8014636:	1812      	adds	r2, r2, r0
 8014638:	6078      	str	r0, [r7, #4]
 801463a:	922e      	str	r2, [sp, #184]	; 0xb8
 801463c:	932d      	str	r3, [sp, #180]	; 0xb4
 801463e:	2b07      	cmp	r3, #7
 8014640:	dd08      	ble.n	8014654 <_svfprintf_r+0xdb4>
 8014642:	aa2c      	add	r2, sp, #176	; 0xb0
 8014644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014646:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014648:	f002 fa7e 	bl	8016b48 <__ssprint_r>
 801464c:	2800      	cmp	r0, #0
 801464e:	d000      	beq.n	8014652 <_svfprintf_r+0xdb2>
 8014650:	e34a      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014652:	a92f      	add	r1, sp, #188	; 0xbc
 8014654:	3c10      	subs	r4, #16
 8014656:	000f      	movs	r7, r1
 8014658:	f7ff fad8 	bl	8013c0c <_svfprintf_r+0x36c>
 801465c:	2010      	movs	r0, #16
 801465e:	1812      	adds	r2, r2, r0
 8014660:	6078      	str	r0, [r7, #4]
 8014662:	922e      	str	r2, [sp, #184]	; 0xb8
 8014664:	932d      	str	r3, [sp, #180]	; 0xb4
 8014666:	2b07      	cmp	r3, #7
 8014668:	dd08      	ble.n	801467c <_svfprintf_r+0xddc>
 801466a:	aa2c      	add	r2, sp, #176	; 0xb0
 801466c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801466e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014670:	f002 fa6a 	bl	8016b48 <__ssprint_r>
 8014674:	2800      	cmp	r0, #0
 8014676:	d000      	beq.n	801467a <_svfprintf_r+0xdda>
 8014678:	e336      	b.n	8014ce8 <_svfprintf_r+0x1448>
 801467a:	a92f      	add	r1, sp, #188	; 0xbc
 801467c:	3c10      	subs	r4, #16
 801467e:	000f      	movs	r7, r1
 8014680:	f7ff fb24 	bl	8013ccc <_svfprintf_r+0x42c>
 8014684:	fffffbff 	.word	0xfffffbff
 8014688:	00007830 	.word	0x00007830
 801468c:	08019c58 	.word	0x08019c58
 8014690:	2010      	movs	r0, #16
 8014692:	1812      	adds	r2, r2, r0
 8014694:	6078      	str	r0, [r7, #4]
 8014696:	922e      	str	r2, [sp, #184]	; 0xb8
 8014698:	932d      	str	r3, [sp, #180]	; 0xb4
 801469a:	2b07      	cmp	r3, #7
 801469c:	dd08      	ble.n	80146b0 <_svfprintf_r+0xe10>
 801469e:	aa2c      	add	r2, sp, #176	; 0xb0
 80146a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146a4:	f002 fa50 	bl	8016b48 <__ssprint_r>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d000      	beq.n	80146ae <_svfprintf_r+0xe0e>
 80146ac:	e31c      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80146ae:	a92f      	add	r1, sp, #188	; 0xbc
 80146b0:	3c10      	subs	r4, #16
 80146b2:	000f      	movs	r7, r1
 80146b4:	f7ff fb2c 	bl	8013d10 <_svfprintf_r+0x470>
 80146b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146ba:	2b65      	cmp	r3, #101	; 0x65
 80146bc:	dc00      	bgt.n	80146c0 <_svfprintf_r+0xe20>
 80146be:	e259      	b.n	8014b74 <_svfprintf_r+0x12d4>
 80146c0:	2200      	movs	r2, #0
 80146c2:	2300      	movs	r3, #0
 80146c4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80146c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80146c8:	f7eb fec8 	bl	800045c <__aeabi_dcmpeq>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d07c      	beq.n	80147ca <_svfprintf_r+0xf2a>
 80146d0:	4b81      	ldr	r3, [pc, #516]	; (80148d8 <_svfprintf_r+0x1038>)
 80146d2:	603b      	str	r3, [r7, #0]
 80146d4:	2301      	movs	r3, #1
 80146d6:	607b      	str	r3, [r7, #4]
 80146d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146da:	3708      	adds	r7, #8
 80146dc:	3301      	adds	r3, #1
 80146de:	932e      	str	r3, [sp, #184]	; 0xb8
 80146e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146e2:	9308      	str	r3, [sp, #32]
 80146e4:	3301      	adds	r3, #1
 80146e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80146e8:	2b07      	cmp	r3, #7
 80146ea:	dd08      	ble.n	80146fe <_svfprintf_r+0xe5e>
 80146ec:	aa2c      	add	r2, sp, #176	; 0xb0
 80146ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146f2:	f002 fa29 	bl	8016b48 <__ssprint_r>
 80146f6:	2800      	cmp	r0, #0
 80146f8:	d000      	beq.n	80146fc <_svfprintf_r+0xe5c>
 80146fa:	e2f5      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80146fc:	af2f      	add	r7, sp, #188	; 0xbc
 80146fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014702:	4293      	cmp	r3, r2
 8014704:	db01      	blt.n	801470a <_svfprintf_r+0xe6a>
 8014706:	07f3      	lsls	r3, r6, #31
 8014708:	d51d      	bpl.n	8014746 <_svfprintf_r+0xea6>
 801470a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801470c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801470e:	4694      	mov	ip, r2
 8014710:	603b      	str	r3, [r7, #0]
 8014712:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014714:	607b      	str	r3, [r7, #4]
 8014716:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014718:	3708      	adds	r7, #8
 801471a:	4463      	add	r3, ip
 801471c:	932e      	str	r3, [sp, #184]	; 0xb8
 801471e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014720:	9308      	str	r3, [sp, #32]
 8014722:	3301      	adds	r3, #1
 8014724:	932d      	str	r3, [sp, #180]	; 0xb4
 8014726:	2b07      	cmp	r3, #7
 8014728:	dd08      	ble.n	801473c <_svfprintf_r+0xe9c>
 801472a:	aa2c      	add	r2, sp, #176	; 0xb0
 801472c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801472e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014730:	f002 fa0a 	bl	8016b48 <__ssprint_r>
 8014734:	2800      	cmp	r0, #0
 8014736:	d000      	beq.n	801473a <_svfprintf_r+0xe9a>
 8014738:	e2d6      	b.n	8014ce8 <_svfprintf_r+0x1448>
 801473a:	af2f      	add	r7, sp, #188	; 0xbc
 801473c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801473e:	2510      	movs	r5, #16
 8014740:	1e5c      	subs	r4, r3, #1
 8014742:	2c00      	cmp	r4, #0
 8014744:	dc2f      	bgt.n	80147a6 <_svfprintf_r+0xf06>
 8014746:	0773      	lsls	r3, r6, #29
 8014748:	d500      	bpl.n	801474c <_svfprintf_r+0xeac>
 801474a:	e2af      	b.n	8014cac <_svfprintf_r+0x140c>
 801474c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801474e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014750:	4293      	cmp	r3, r2
 8014752:	da00      	bge.n	8014756 <_svfprintf_r+0xeb6>
 8014754:	0013      	movs	r3, r2
 8014756:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014758:	18d3      	adds	r3, r2, r3
 801475a:	9315      	str	r3, [sp, #84]	; 0x54
 801475c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801475e:	9308      	str	r3, [sp, #32]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d007      	beq.n	8014774 <_svfprintf_r+0xed4>
 8014764:	aa2c      	add	r2, sp, #176	; 0xb0
 8014766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014768:	980a      	ldr	r0, [sp, #40]	; 0x28
 801476a:	f002 f9ed 	bl	8016b48 <__ssprint_r>
 801476e:	2800      	cmp	r0, #0
 8014770:	d000      	beq.n	8014774 <_svfprintf_r+0xed4>
 8014772:	e2b9      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014774:	2300      	movs	r3, #0
 8014776:	932d      	str	r3, [sp, #180]	; 0xb4
 8014778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801477a:	2b00      	cmp	r3, #0
 801477c:	d000      	beq.n	8014780 <_svfprintf_r+0xee0>
 801477e:	e2cf      	b.n	8014d20 <_svfprintf_r+0x1480>
 8014780:	af2f      	add	r7, sp, #188	; 0xbc
 8014782:	e5d6      	b.n	8014332 <_svfprintf_r+0xa92>
 8014784:	3210      	adds	r2, #16
 8014786:	607d      	str	r5, [r7, #4]
 8014788:	922e      	str	r2, [sp, #184]	; 0xb8
 801478a:	932d      	str	r3, [sp, #180]	; 0xb4
 801478c:	2b07      	cmp	r3, #7
 801478e:	dd08      	ble.n	80147a2 <_svfprintf_r+0xf02>
 8014790:	aa2c      	add	r2, sp, #176	; 0xb0
 8014792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014794:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014796:	f002 f9d7 	bl	8016b48 <__ssprint_r>
 801479a:	2800      	cmp	r0, #0
 801479c:	d000      	beq.n	80147a0 <_svfprintf_r+0xf00>
 801479e:	e2a3      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80147a0:	a92f      	add	r1, sp, #188	; 0xbc
 80147a2:	000f      	movs	r7, r1
 80147a4:	3c10      	subs	r4, #16
 80147a6:	0039      	movs	r1, r7
 80147a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147aa:	484c      	ldr	r0, [pc, #304]	; (80148dc <_svfprintf_r+0x103c>)
 80147ac:	9308      	str	r3, [sp, #32]
 80147ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80147b0:	3301      	adds	r3, #1
 80147b2:	3108      	adds	r1, #8
 80147b4:	6038      	str	r0, [r7, #0]
 80147b6:	2c10      	cmp	r4, #16
 80147b8:	dce4      	bgt.n	8014784 <_svfprintf_r+0xee4>
 80147ba:	607c      	str	r4, [r7, #4]
 80147bc:	18a4      	adds	r4, r4, r2
 80147be:	942e      	str	r4, [sp, #184]	; 0xb8
 80147c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80147c2:	000f      	movs	r7, r1
 80147c4:	2b07      	cmp	r3, #7
 80147c6:	ddbe      	ble.n	8014746 <_svfprintf_r+0xea6>
 80147c8:	e06a      	b.n	80148a0 <_svfprintf_r+0x1000>
 80147ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	dd00      	ble.n	80147d2 <_svfprintf_r+0xf32>
 80147d0:	e086      	b.n	80148e0 <_svfprintf_r+0x1040>
 80147d2:	4b41      	ldr	r3, [pc, #260]	; (80148d8 <_svfprintf_r+0x1038>)
 80147d4:	603b      	str	r3, [r7, #0]
 80147d6:	2301      	movs	r3, #1
 80147d8:	607b      	str	r3, [r7, #4]
 80147da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147dc:	3708      	adds	r7, #8
 80147de:	3301      	adds	r3, #1
 80147e0:	932e      	str	r3, [sp, #184]	; 0xb8
 80147e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147e4:	9308      	str	r3, [sp, #32]
 80147e6:	3301      	adds	r3, #1
 80147e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80147ea:	2b07      	cmp	r3, #7
 80147ec:	dd08      	ble.n	8014800 <_svfprintf_r+0xf60>
 80147ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80147f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147f4:	f002 f9a8 	bl	8016b48 <__ssprint_r>
 80147f8:	2800      	cmp	r0, #0
 80147fa:	d000      	beq.n	80147fe <_svfprintf_r+0xf5e>
 80147fc:	e274      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80147fe:	af2f      	add	r7, sp, #188	; 0xbc
 8014800:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014802:	2b00      	cmp	r3, #0
 8014804:	d104      	bne.n	8014810 <_svfprintf_r+0xf70>
 8014806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014808:	2b00      	cmp	r3, #0
 801480a:	d101      	bne.n	8014810 <_svfprintf_r+0xf70>
 801480c:	07f3      	lsls	r3, r6, #31
 801480e:	d59a      	bpl.n	8014746 <_svfprintf_r+0xea6>
 8014810:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014812:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014814:	4694      	mov	ip, r2
 8014816:	603b      	str	r3, [r7, #0]
 8014818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801481a:	607b      	str	r3, [r7, #4]
 801481c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801481e:	3708      	adds	r7, #8
 8014820:	4463      	add	r3, ip
 8014822:	932e      	str	r3, [sp, #184]	; 0xb8
 8014824:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014826:	9308      	str	r3, [sp, #32]
 8014828:	3301      	adds	r3, #1
 801482a:	932d      	str	r3, [sp, #180]	; 0xb4
 801482c:	2b07      	cmp	r3, #7
 801482e:	dd08      	ble.n	8014842 <_svfprintf_r+0xfa2>
 8014830:	aa2c      	add	r2, sp, #176	; 0xb0
 8014832:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014834:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014836:	f002 f987 	bl	8016b48 <__ssprint_r>
 801483a:	2800      	cmp	r0, #0
 801483c:	d000      	beq.n	8014840 <_svfprintf_r+0xfa0>
 801483e:	e253      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014840:	af2f      	add	r7, sp, #188	; 0xbc
 8014842:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8014844:	2c00      	cmp	r4, #0
 8014846:	da1a      	bge.n	801487e <_svfprintf_r+0xfde>
 8014848:	0039      	movs	r1, r7
 801484a:	2510      	movs	r5, #16
 801484c:	4264      	negs	r4, r4
 801484e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014850:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014852:	9308      	str	r3, [sp, #32]
 8014854:	1c5a      	adds	r2, r3, #1
 8014856:	4b21      	ldr	r3, [pc, #132]	; (80148dc <_svfprintf_r+0x103c>)
 8014858:	3708      	adds	r7, #8
 801485a:	600b      	str	r3, [r1, #0]
 801485c:	2c10      	cmp	r4, #16
 801485e:	dc29      	bgt.n	80148b4 <_svfprintf_r+0x1014>
 8014860:	604c      	str	r4, [r1, #4]
 8014862:	1824      	adds	r4, r4, r0
 8014864:	942e      	str	r4, [sp, #184]	; 0xb8
 8014866:	922d      	str	r2, [sp, #180]	; 0xb4
 8014868:	2a07      	cmp	r2, #7
 801486a:	dd08      	ble.n	801487e <_svfprintf_r+0xfde>
 801486c:	aa2c      	add	r2, sp, #176	; 0xb0
 801486e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014870:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014872:	f002 f969 	bl	8016b48 <__ssprint_r>
 8014876:	2800      	cmp	r0, #0
 8014878:	d000      	beq.n	801487c <_svfprintf_r+0xfdc>
 801487a:	e235      	b.n	8014ce8 <_svfprintf_r+0x1448>
 801487c:	af2f      	add	r7, sp, #188	; 0xbc
 801487e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014882:	468c      	mov	ip, r1
 8014884:	603b      	str	r3, [r7, #0]
 8014886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014888:	607b      	str	r3, [r7, #4]
 801488a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801488c:	4463      	add	r3, ip
 801488e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014890:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014892:	1c5a      	adds	r2, r3, #1
 8014894:	9308      	str	r3, [sp, #32]
 8014896:	922d      	str	r2, [sp, #180]	; 0xb4
 8014898:	2a07      	cmp	r2, #7
 801489a:	dc01      	bgt.n	80148a0 <_svfprintf_r+0x1000>
 801489c:	f7ff fa6c 	bl	8013d78 <_svfprintf_r+0x4d8>
 80148a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80148a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148a6:	f002 f94f 	bl	8016b48 <__ssprint_r>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d000      	beq.n	80148b0 <_svfprintf_r+0x1010>
 80148ae:	e21b      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80148b0:	af2f      	add	r7, sp, #188	; 0xbc
 80148b2:	e748      	b.n	8014746 <_svfprintf_r+0xea6>
 80148b4:	3010      	adds	r0, #16
 80148b6:	604d      	str	r5, [r1, #4]
 80148b8:	902e      	str	r0, [sp, #184]	; 0xb8
 80148ba:	922d      	str	r2, [sp, #180]	; 0xb4
 80148bc:	2a07      	cmp	r2, #7
 80148be:	dd08      	ble.n	80148d2 <_svfprintf_r+0x1032>
 80148c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80148c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148c6:	f002 f93f 	bl	8016b48 <__ssprint_r>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d000      	beq.n	80148d0 <_svfprintf_r+0x1030>
 80148ce:	e20b      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80148d0:	af2f      	add	r7, sp, #188	; 0xbc
 80148d2:	3c10      	subs	r4, #16
 80148d4:	0039      	movs	r1, r7
 80148d6:	e7ba      	b.n	801484e <_svfprintf_r+0xfae>
 80148d8:	08019c7a 	.word	0x08019c7a
 80148dc:	08019c8c 	.word	0x08019c8c
 80148e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148e2:	002c      	movs	r4, r5
 80148e4:	429d      	cmp	r5, r3
 80148e6:	dd00      	ble.n	80148ea <_svfprintf_r+0x104a>
 80148e8:	001c      	movs	r4, r3
 80148ea:	2c00      	cmp	r4, #0
 80148ec:	dd15      	ble.n	801491a <_svfprintf_r+0x107a>
 80148ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148f0:	607c      	str	r4, [r7, #4]
 80148f2:	603b      	str	r3, [r7, #0]
 80148f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148f6:	3708      	adds	r7, #8
 80148f8:	18e3      	adds	r3, r4, r3
 80148fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80148fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80148fe:	9308      	str	r3, [sp, #32]
 8014900:	3301      	adds	r3, #1
 8014902:	932d      	str	r3, [sp, #180]	; 0xb4
 8014904:	2b07      	cmp	r3, #7
 8014906:	dd08      	ble.n	801491a <_svfprintf_r+0x107a>
 8014908:	aa2c      	add	r2, sp, #176	; 0xb0
 801490a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801490c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801490e:	f002 f91b 	bl	8016b48 <__ssprint_r>
 8014912:	2800      	cmp	r0, #0
 8014914:	d000      	beq.n	8014918 <_svfprintf_r+0x1078>
 8014916:	e1e7      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014918:	af2f      	add	r7, sp, #188	; 0xbc
 801491a:	43e3      	mvns	r3, r4
 801491c:	17db      	asrs	r3, r3, #31
 801491e:	401c      	ands	r4, r3
 8014920:	1b2c      	subs	r4, r5, r4
 8014922:	2c00      	cmp	r4, #0
 8014924:	dd1a      	ble.n	801495c <_svfprintf_r+0x10bc>
 8014926:	0039      	movs	r1, r7
 8014928:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801492a:	48d4      	ldr	r0, [pc, #848]	; (8014c7c <_svfprintf_r+0x13dc>)
 801492c:	9308      	str	r3, [sp, #32]
 801492e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014930:	3301      	adds	r3, #1
 8014932:	3108      	adds	r1, #8
 8014934:	6038      	str	r0, [r7, #0]
 8014936:	2c10      	cmp	r4, #16
 8014938:	dd00      	ble.n	801493c <_svfprintf_r+0x109c>
 801493a:	e089      	b.n	8014a50 <_svfprintf_r+0x11b0>
 801493c:	607c      	str	r4, [r7, #4]
 801493e:	18a4      	adds	r4, r4, r2
 8014940:	942e      	str	r4, [sp, #184]	; 0xb8
 8014942:	932d      	str	r3, [sp, #180]	; 0xb4
 8014944:	000f      	movs	r7, r1
 8014946:	2b07      	cmp	r3, #7
 8014948:	dd08      	ble.n	801495c <_svfprintf_r+0x10bc>
 801494a:	aa2c      	add	r2, sp, #176	; 0xb0
 801494c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801494e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014950:	f002 f8fa 	bl	8016b48 <__ssprint_r>
 8014954:	2800      	cmp	r0, #0
 8014956:	d000      	beq.n	801495a <_svfprintf_r+0x10ba>
 8014958:	e1c6      	b.n	8014ce8 <_svfprintf_r+0x1448>
 801495a:	af2f      	add	r7, sp, #188	; 0xbc
 801495c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801495e:	195d      	adds	r5, r3, r5
 8014960:	0573      	lsls	r3, r6, #21
 8014962:	d50d      	bpl.n	8014980 <_svfprintf_r+0x10e0>
 8014964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014966:	2b00      	cmp	r3, #0
 8014968:	d000      	beq.n	801496c <_svfprintf_r+0x10cc>
 801496a:	e084      	b.n	8014a76 <_svfprintf_r+0x11d6>
 801496c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801496e:	2b00      	cmp	r3, #0
 8014970:	d000      	beq.n	8014974 <_svfprintf_r+0x10d4>
 8014972:	e083      	b.n	8014a7c <_svfprintf_r+0x11dc>
 8014974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014978:	189b      	adds	r3, r3, r2
 801497a:	429d      	cmp	r5, r3
 801497c:	d900      	bls.n	8014980 <_svfprintf_r+0x10e0>
 801497e:	001d      	movs	r5, r3
 8014980:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014984:	4293      	cmp	r3, r2
 8014986:	db01      	blt.n	801498c <_svfprintf_r+0x10ec>
 8014988:	07f3      	lsls	r3, r6, #31
 801498a:	d518      	bpl.n	80149be <_svfprintf_r+0x111e>
 801498c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801498e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014990:	4694      	mov	ip, r2
 8014992:	603b      	str	r3, [r7, #0]
 8014994:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014996:	607b      	str	r3, [r7, #4]
 8014998:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801499a:	3708      	adds	r7, #8
 801499c:	4463      	add	r3, ip
 801499e:	932e      	str	r3, [sp, #184]	; 0xb8
 80149a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149a2:	9308      	str	r3, [sp, #32]
 80149a4:	3301      	adds	r3, #1
 80149a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80149a8:	2b07      	cmp	r3, #7
 80149aa:	dd08      	ble.n	80149be <_svfprintf_r+0x111e>
 80149ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80149ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149b2:	f002 f8c9 	bl	8016b48 <__ssprint_r>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d000      	beq.n	80149bc <_svfprintf_r+0x111c>
 80149ba:	e195      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80149bc:	af2f      	add	r7, sp, #188	; 0xbc
 80149be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80149c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149c2:	4694      	mov	ip, r2
 80149c4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80149c6:	4463      	add	r3, ip
 80149c8:	1b5b      	subs	r3, r3, r5
 80149ca:	1a54      	subs	r4, r2, r1
 80149cc:	429c      	cmp	r4, r3
 80149ce:	dd00      	ble.n	80149d2 <_svfprintf_r+0x1132>
 80149d0:	001c      	movs	r4, r3
 80149d2:	2c00      	cmp	r4, #0
 80149d4:	dd14      	ble.n	8014a00 <_svfprintf_r+0x1160>
 80149d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80149d8:	603d      	str	r5, [r7, #0]
 80149da:	18e3      	adds	r3, r4, r3
 80149dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80149de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149e0:	607c      	str	r4, [r7, #4]
 80149e2:	9308      	str	r3, [sp, #32]
 80149e4:	3301      	adds	r3, #1
 80149e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80149e8:	3708      	adds	r7, #8
 80149ea:	2b07      	cmp	r3, #7
 80149ec:	dd08      	ble.n	8014a00 <_svfprintf_r+0x1160>
 80149ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80149f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149f4:	f002 f8a8 	bl	8016b48 <__ssprint_r>
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d000      	beq.n	80149fe <_svfprintf_r+0x115e>
 80149fc:	e174      	b.n	8014ce8 <_svfprintf_r+0x1448>
 80149fe:	af2f      	add	r7, sp, #188	; 0xbc
 8014a00:	43e3      	mvns	r3, r4
 8014a02:	17db      	asrs	r3, r3, #31
 8014a04:	401c      	ands	r4, r3
 8014a06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a0a:	2510      	movs	r5, #16
 8014a0c:	1a9b      	subs	r3, r3, r2
 8014a0e:	1b1c      	subs	r4, r3, r4
 8014a10:	2c00      	cmp	r4, #0
 8014a12:	dc00      	bgt.n	8014a16 <_svfprintf_r+0x1176>
 8014a14:	e697      	b.n	8014746 <_svfprintf_r+0xea6>
 8014a16:	0039      	movs	r1, r7
 8014a18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a1a:	4898      	ldr	r0, [pc, #608]	; (8014c7c <_svfprintf_r+0x13dc>)
 8014a1c:	9308      	str	r3, [sp, #32]
 8014a1e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014a20:	3301      	adds	r3, #1
 8014a22:	3108      	adds	r1, #8
 8014a24:	6038      	str	r0, [r7, #0]
 8014a26:	2c10      	cmp	r4, #16
 8014a28:	dc00      	bgt.n	8014a2c <_svfprintf_r+0x118c>
 8014a2a:	e6c6      	b.n	80147ba <_svfprintf_r+0xf1a>
 8014a2c:	3210      	adds	r2, #16
 8014a2e:	607d      	str	r5, [r7, #4]
 8014a30:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a32:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a34:	2b07      	cmp	r3, #7
 8014a36:	dd08      	ble.n	8014a4a <_svfprintf_r+0x11aa>
 8014a38:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a3e:	f002 f883 	bl	8016b48 <__ssprint_r>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	d000      	beq.n	8014a48 <_svfprintf_r+0x11a8>
 8014a46:	e14f      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014a48:	a92f      	add	r1, sp, #188	; 0xbc
 8014a4a:	3c10      	subs	r4, #16
 8014a4c:	000f      	movs	r7, r1
 8014a4e:	e7e2      	b.n	8014a16 <_svfprintf_r+0x1176>
 8014a50:	2010      	movs	r0, #16
 8014a52:	1812      	adds	r2, r2, r0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a58:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a5a:	2b07      	cmp	r3, #7
 8014a5c:	dd08      	ble.n	8014a70 <_svfprintf_r+0x11d0>
 8014a5e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a64:	f002 f870 	bl	8016b48 <__ssprint_r>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d000      	beq.n	8014a6e <_svfprintf_r+0x11ce>
 8014a6c:	e13c      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014a6e:	a92f      	add	r1, sp, #188	; 0xbc
 8014a70:	3c10      	subs	r4, #16
 8014a72:	000f      	movs	r7, r1
 8014a74:	e757      	b.n	8014926 <_svfprintf_r+0x1086>
 8014a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d061      	beq.n	8014b40 <_svfprintf_r+0x12a0>
 8014a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	9310      	str	r3, [sp, #64]	; 0x40
 8014a82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014a84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014a86:	4694      	mov	ip, r2
 8014a88:	603b      	str	r3, [r7, #0]
 8014a8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a8c:	607b      	str	r3, [r7, #4]
 8014a8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014a90:	3708      	adds	r7, #8
 8014a92:	4463      	add	r3, ip
 8014a94:	932e      	str	r3, [sp, #184]	; 0xb8
 8014a96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a98:	9308      	str	r3, [sp, #32]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a9e:	2b07      	cmp	r3, #7
 8014aa0:	dd08      	ble.n	8014ab4 <_svfprintf_r+0x1214>
 8014aa2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014aa8:	f002 f84e 	bl	8016b48 <__ssprint_r>
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d000      	beq.n	8014ab2 <_svfprintf_r+0x1212>
 8014ab0:	e11a      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014ab2:	af2f      	add	r7, sp, #188	; 0xbc
 8014ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab8:	189b      	adds	r3, r3, r2
 8014aba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014abc:	1b5b      	subs	r3, r3, r5
 8014abe:	7814      	ldrb	r4, [r2, #0]
 8014ac0:	429c      	cmp	r4, r3
 8014ac2:	dd00      	ble.n	8014ac6 <_svfprintf_r+0x1226>
 8014ac4:	001c      	movs	r4, r3
 8014ac6:	2c00      	cmp	r4, #0
 8014ac8:	dd14      	ble.n	8014af4 <_svfprintf_r+0x1254>
 8014aca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014acc:	603d      	str	r5, [r7, #0]
 8014ace:	18e3      	adds	r3, r4, r3
 8014ad0:	932e      	str	r3, [sp, #184]	; 0xb8
 8014ad2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ad4:	607c      	str	r4, [r7, #4]
 8014ad6:	9308      	str	r3, [sp, #32]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	932d      	str	r3, [sp, #180]	; 0xb4
 8014adc:	3708      	adds	r7, #8
 8014ade:	2b07      	cmp	r3, #7
 8014ae0:	dd08      	ble.n	8014af4 <_svfprintf_r+0x1254>
 8014ae2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ae6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ae8:	f002 f82e 	bl	8016b48 <__ssprint_r>
 8014aec:	2800      	cmp	r0, #0
 8014aee:	d000      	beq.n	8014af2 <_svfprintf_r+0x1252>
 8014af0:	e0fa      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014af2:	af2f      	add	r7, sp, #188	; 0xbc
 8014af4:	43e3      	mvns	r3, r4
 8014af6:	17db      	asrs	r3, r3, #31
 8014af8:	401c      	ands	r4, r3
 8014afa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	1b1c      	subs	r4, r3, r4
 8014b00:	2c00      	cmp	r4, #0
 8014b02:	dd19      	ble.n	8014b38 <_svfprintf_r+0x1298>
 8014b04:	0039      	movs	r1, r7
 8014b06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b08:	485c      	ldr	r0, [pc, #368]	; (8014c7c <_svfprintf_r+0x13dc>)
 8014b0a:	9308      	str	r3, [sp, #32]
 8014b0c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014b0e:	3301      	adds	r3, #1
 8014b10:	3108      	adds	r1, #8
 8014b12:	6038      	str	r0, [r7, #0]
 8014b14:	2c10      	cmp	r4, #16
 8014b16:	dc1a      	bgt.n	8014b4e <_svfprintf_r+0x12ae>
 8014b18:	607c      	str	r4, [r7, #4]
 8014b1a:	18a4      	adds	r4, r4, r2
 8014b1c:	942e      	str	r4, [sp, #184]	; 0xb8
 8014b1e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014b20:	000f      	movs	r7, r1
 8014b22:	2b07      	cmp	r3, #7
 8014b24:	dd08      	ble.n	8014b38 <_svfprintf_r+0x1298>
 8014b26:	aa2c      	add	r2, sp, #176	; 0xb0
 8014b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b2c:	f002 f80c 	bl	8016b48 <__ssprint_r>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d000      	beq.n	8014b36 <_svfprintf_r+0x1296>
 8014b34:	e0d8      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014b36:	af2f      	add	r7, sp, #188	; 0xbc
 8014b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	18ed      	adds	r5, r5, r3
 8014b3e:	e711      	b.n	8014964 <_svfprintf_r+0x10c4>
 8014b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b42:	3b01      	subs	r3, #1
 8014b44:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b48:	3b01      	subs	r3, #1
 8014b4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b4c:	e799      	b.n	8014a82 <_svfprintf_r+0x11e2>
 8014b4e:	2010      	movs	r0, #16
 8014b50:	1812      	adds	r2, r2, r0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	922e      	str	r2, [sp, #184]	; 0xb8
 8014b56:	932d      	str	r3, [sp, #180]	; 0xb4
 8014b58:	2b07      	cmp	r3, #7
 8014b5a:	dd08      	ble.n	8014b6e <_svfprintf_r+0x12ce>
 8014b5c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014b5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b62:	f001 fff1 	bl	8016b48 <__ssprint_r>
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d000      	beq.n	8014b6c <_svfprintf_r+0x12cc>
 8014b6a:	e0bd      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014b6c:	a92f      	add	r1, sp, #188	; 0xbc
 8014b6e:	3c10      	subs	r4, #16
 8014b70:	000f      	movs	r7, r1
 8014b72:	e7c7      	b.n	8014b04 <_svfprintf_r+0x1264>
 8014b74:	003c      	movs	r4, r7
 8014b76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b7c:	9308      	str	r3, [sp, #32]
 8014b7e:	3101      	adds	r1, #1
 8014b80:	3301      	adds	r3, #1
 8014b82:	3408      	adds	r4, #8
 8014b84:	2a01      	cmp	r2, #1
 8014b86:	dc03      	bgt.n	8014b90 <_svfprintf_r+0x12f0>
 8014b88:	2201      	movs	r2, #1
 8014b8a:	4216      	tst	r6, r2
 8014b8c:	d100      	bne.n	8014b90 <_svfprintf_r+0x12f0>
 8014b8e:	e088      	b.n	8014ca2 <_svfprintf_r+0x1402>
 8014b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b92:	912e      	str	r1, [sp, #184]	; 0xb8
 8014b94:	603a      	str	r2, [r7, #0]
 8014b96:	2201      	movs	r2, #1
 8014b98:	932d      	str	r3, [sp, #180]	; 0xb4
 8014b9a:	607a      	str	r2, [r7, #4]
 8014b9c:	2b07      	cmp	r3, #7
 8014b9e:	dd08      	ble.n	8014bb2 <_svfprintf_r+0x1312>
 8014ba0:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ba4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ba6:	f001 ffcf 	bl	8016b48 <__ssprint_r>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d000      	beq.n	8014bb0 <_svfprintf_r+0x1310>
 8014bae:	e09b      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014bb0:	ac2f      	add	r4, sp, #188	; 0xbc
 8014bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014bb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014bb6:	4694      	mov	ip, r2
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bbc:	6063      	str	r3, [r4, #4]
 8014bbe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014bc0:	3408      	adds	r4, #8
 8014bc2:	4463      	add	r3, ip
 8014bc4:	932e      	str	r3, [sp, #184]	; 0xb8
 8014bc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014bc8:	9308      	str	r3, [sp, #32]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	932d      	str	r3, [sp, #180]	; 0xb4
 8014bce:	2b07      	cmp	r3, #7
 8014bd0:	dd08      	ble.n	8014be4 <_svfprintf_r+0x1344>
 8014bd2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014bd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bd8:	f001 ffb6 	bl	8016b48 <__ssprint_r>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d000      	beq.n	8014be2 <_svfprintf_r+0x1342>
 8014be0:	e082      	b.n	8014ce8 <_svfprintf_r+0x1448>
 8014be2:	ac2f      	add	r4, sp, #188	; 0xbc
 8014be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014be6:	2200      	movs	r2, #0
 8014be8:	1e5d      	subs	r5, r3, #1
 8014bea:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014bec:	2300      	movs	r3, #0
 8014bee:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014bf0:	f7eb fc34 	bl	800045c <__aeabi_dcmpeq>
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	d12c      	bne.n	8014c52 <_svfprintf_r+0x13b2>
 8014bf8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014bfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bfc:	9308      	str	r3, [sp, #32]
 8014bfe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c00:	6065      	str	r5, [r4, #4]
 8014c02:	1c5a      	adds	r2, r3, #1
 8014c04:	930e      	str	r3, [sp, #56]	; 0x38
 8014c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c08:	922d      	str	r2, [sp, #180]	; 0xb4
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	6023      	str	r3, [r4, #0]
 8014c0e:	9b08      	ldr	r3, [sp, #32]
 8014c10:	3408      	adds	r4, #8
 8014c12:	3b01      	subs	r3, #1
 8014c14:	185b      	adds	r3, r3, r1
 8014c16:	932e      	str	r3, [sp, #184]	; 0xb8
 8014c18:	2a07      	cmp	r2, #7
 8014c1a:	dd07      	ble.n	8014c2c <_svfprintf_r+0x138c>
 8014c1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c22:	f001 ff91 	bl	8016b48 <__ssprint_r>
 8014c26:	2800      	cmp	r0, #0
 8014c28:	d15e      	bne.n	8014ce8 <_svfprintf_r+0x1448>
 8014c2a:	ac2f      	add	r4, sp, #188	; 0xbc
 8014c2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014c2e:	ab28      	add	r3, sp, #160	; 0xa0
 8014c30:	4694      	mov	ip, r2
 8014c32:	6023      	str	r3, [r4, #0]
 8014c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c36:	6063      	str	r3, [r4, #4]
 8014c38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014c3a:	4463      	add	r3, ip
 8014c3c:	932e      	str	r3, [sp, #184]	; 0xb8
 8014c3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c40:	9308      	str	r3, [sp, #32]
 8014c42:	3301      	adds	r3, #1
 8014c44:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c46:	2b07      	cmp	r3, #7
 8014c48:	dd00      	ble.n	8014c4c <_svfprintf_r+0x13ac>
 8014c4a:	e629      	b.n	80148a0 <_svfprintf_r+0x1000>
 8014c4c:	3408      	adds	r4, #8
 8014c4e:	0027      	movs	r7, r4
 8014c50:	e579      	b.n	8014746 <_svfprintf_r+0xea6>
 8014c52:	2710      	movs	r7, #16
 8014c54:	2d00      	cmp	r5, #0
 8014c56:	dde9      	ble.n	8014c2c <_svfprintf_r+0x138c>
 8014c58:	0021      	movs	r1, r4
 8014c5a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c5c:	4807      	ldr	r0, [pc, #28]	; (8014c7c <_svfprintf_r+0x13dc>)
 8014c5e:	9308      	str	r3, [sp, #32]
 8014c60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014c62:	3301      	adds	r3, #1
 8014c64:	3108      	adds	r1, #8
 8014c66:	6020      	str	r0, [r4, #0]
 8014c68:	2d10      	cmp	r5, #16
 8014c6a:	dc09      	bgt.n	8014c80 <_svfprintf_r+0x13e0>
 8014c6c:	6065      	str	r5, [r4, #4]
 8014c6e:	000c      	movs	r4, r1
 8014c70:	18ad      	adds	r5, r5, r2
 8014c72:	952e      	str	r5, [sp, #184]	; 0xb8
 8014c74:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c76:	2b07      	cmp	r3, #7
 8014c78:	ddd8      	ble.n	8014c2c <_svfprintf_r+0x138c>
 8014c7a:	e7cf      	b.n	8014c1c <_svfprintf_r+0x137c>
 8014c7c:	08019c8c 	.word	0x08019c8c
 8014c80:	3210      	adds	r2, #16
 8014c82:	6067      	str	r7, [r4, #4]
 8014c84:	922e      	str	r2, [sp, #184]	; 0xb8
 8014c86:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c88:	2b07      	cmp	r3, #7
 8014c8a:	dd07      	ble.n	8014c9c <_svfprintf_r+0x13fc>
 8014c8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c92:	f001 ff59 	bl	8016b48 <__ssprint_r>
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d126      	bne.n	8014ce8 <_svfprintf_r+0x1448>
 8014c9a:	a92f      	add	r1, sp, #188	; 0xbc
 8014c9c:	3d10      	subs	r5, #16
 8014c9e:	000c      	movs	r4, r1
 8014ca0:	e7da      	b.n	8014c58 <_svfprintf_r+0x13b8>
 8014ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ca4:	912e      	str	r1, [sp, #184]	; 0xb8
 8014ca6:	c705      	stmia	r7!, {r0, r2}
 8014ca8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014caa:	e7e4      	b.n	8014c76 <_svfprintf_r+0x13d6>
 8014cac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014cae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014cb0:	2510      	movs	r5, #16
 8014cb2:	1a9c      	subs	r4, r3, r2
 8014cb4:	2c00      	cmp	r4, #0
 8014cb6:	dc00      	bgt.n	8014cba <_svfprintf_r+0x141a>
 8014cb8:	e548      	b.n	801474c <_svfprintf_r+0xeac>
 8014cba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014cbc:	4921      	ldr	r1, [pc, #132]	; (8014d44 <_svfprintf_r+0x14a4>)
 8014cbe:	9308      	str	r3, [sp, #32]
 8014cc0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	6039      	str	r1, [r7, #0]
 8014cc6:	2c10      	cmp	r4, #16
 8014cc8:	dc19      	bgt.n	8014cfe <_svfprintf_r+0x145e>
 8014cca:	607c      	str	r4, [r7, #4]
 8014ccc:	18a4      	adds	r4, r4, r2
 8014cce:	942e      	str	r4, [sp, #184]	; 0xb8
 8014cd0:	932d      	str	r3, [sp, #180]	; 0xb4
 8014cd2:	2b07      	cmp	r3, #7
 8014cd4:	dc00      	bgt.n	8014cd8 <_svfprintf_r+0x1438>
 8014cd6:	e539      	b.n	801474c <_svfprintf_r+0xeac>
 8014cd8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cde:	f001 ff33 	bl	8016b48 <__ssprint_r>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d100      	bne.n	8014ce8 <_svfprintf_r+0x1448>
 8014ce6:	e531      	b.n	801474c <_svfprintf_r+0xeac>
 8014ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d101      	bne.n	8014cf2 <_svfprintf_r+0x1452>
 8014cee:	f7ff f908 	bl	8013f02 <_svfprintf_r+0x662>
 8014cf2:	0019      	movs	r1, r3
 8014cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014cf6:	f000 ff19 	bl	8015b2c <_free_r>
 8014cfa:	f7ff f902 	bl	8013f02 <_svfprintf_r+0x662>
 8014cfe:	3210      	adds	r2, #16
 8014d00:	607d      	str	r5, [r7, #4]
 8014d02:	922e      	str	r2, [sp, #184]	; 0xb8
 8014d04:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d06:	3708      	adds	r7, #8
 8014d08:	2b07      	cmp	r3, #7
 8014d0a:	dd07      	ble.n	8014d1c <_svfprintf_r+0x147c>
 8014d0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d12:	f001 ff19 	bl	8016b48 <__ssprint_r>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	d1e6      	bne.n	8014ce8 <_svfprintf_r+0x1448>
 8014d1a:	af2f      	add	r7, sp, #188	; 0xbc
 8014d1c:	3c10      	subs	r4, #16
 8014d1e:	e7cc      	b.n	8014cba <_svfprintf_r+0x141a>
 8014d20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d24:	f000 ff02 	bl	8015b2c <_free_r>
 8014d28:	e52a      	b.n	8014780 <_svfprintf_r+0xee0>
 8014d2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014d2c:	9306      	str	r3, [sp, #24]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d101      	bne.n	8014d36 <_svfprintf_r+0x1496>
 8014d32:	f7ff f8e6 	bl	8013f02 <_svfprintf_r+0x662>
 8014d36:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d3c:	f001 ff04 	bl	8016b48 <__ssprint_r>
 8014d40:	f7ff f8df 	bl	8013f02 <_svfprintf_r+0x662>
 8014d44:	08019c7c 	.word	0x08019c7c

08014d48 <sysconf>:
 8014d48:	2380      	movs	r3, #128	; 0x80
 8014d4a:	b510      	push	{r4, lr}
 8014d4c:	015b      	lsls	r3, r3, #5
 8014d4e:	2808      	cmp	r0, #8
 8014d50:	d004      	beq.n	8014d5c <sysconf+0x14>
 8014d52:	f000 fe7d 	bl	8015a50 <__errno>
 8014d56:	2316      	movs	r3, #22
 8014d58:	6003      	str	r3, [r0, #0]
 8014d5a:	3b17      	subs	r3, #23
 8014d5c:	0018      	movs	r0, r3
 8014d5e:	bd10      	pop	{r4, pc}

08014d60 <__ascii_wctomb>:
 8014d60:	1e0b      	subs	r3, r1, #0
 8014d62:	d004      	beq.n	8014d6e <__ascii_wctomb+0xe>
 8014d64:	2aff      	cmp	r2, #255	; 0xff
 8014d66:	d904      	bls.n	8014d72 <__ascii_wctomb+0x12>
 8014d68:	238a      	movs	r3, #138	; 0x8a
 8014d6a:	6003      	str	r3, [r0, #0]
 8014d6c:	3b8b      	subs	r3, #139	; 0x8b
 8014d6e:	0018      	movs	r0, r3
 8014d70:	4770      	bx	lr
 8014d72:	700a      	strb	r2, [r1, #0]
 8014d74:	2301      	movs	r3, #1
 8014d76:	e7fa      	b.n	8014d6e <__ascii_wctomb+0xe>

08014d78 <register_fini>:
 8014d78:	4b03      	ldr	r3, [pc, #12]	; (8014d88 <register_fini+0x10>)
 8014d7a:	b510      	push	{r4, lr}
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d002      	beq.n	8014d86 <register_fini+0xe>
 8014d80:	4802      	ldr	r0, [pc, #8]	; (8014d8c <register_fini+0x14>)
 8014d82:	f000 f805 	bl	8014d90 <atexit>
 8014d86:	bd10      	pop	{r4, pc}
 8014d88:	00000000 	.word	0x00000000
 8014d8c:	08015a5d 	.word	0x08015a5d

08014d90 <atexit>:
 8014d90:	2300      	movs	r3, #0
 8014d92:	b510      	push	{r4, lr}
 8014d94:	0001      	movs	r1, r0
 8014d96:	001a      	movs	r2, r3
 8014d98:	0018      	movs	r0, r3
 8014d9a:	f001 ff53 	bl	8016c44 <__register_exitproc>
 8014d9e:	bd10      	pop	{r4, pc}

08014da0 <quorem>:
 8014da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014da2:	6903      	ldr	r3, [r0, #16]
 8014da4:	690c      	ldr	r4, [r1, #16]
 8014da6:	b089      	sub	sp, #36	; 0x24
 8014da8:	0007      	movs	r7, r0
 8014daa:	9105      	str	r1, [sp, #20]
 8014dac:	2600      	movs	r6, #0
 8014dae:	42a3      	cmp	r3, r4
 8014db0:	db65      	blt.n	8014e7e <quorem+0xde>
 8014db2:	000b      	movs	r3, r1
 8014db4:	3c01      	subs	r4, #1
 8014db6:	3314      	adds	r3, #20
 8014db8:	00a5      	lsls	r5, r4, #2
 8014dba:	9303      	str	r3, [sp, #12]
 8014dbc:	195b      	adds	r3, r3, r5
 8014dbe:	9304      	str	r3, [sp, #16]
 8014dc0:	0003      	movs	r3, r0
 8014dc2:	3314      	adds	r3, #20
 8014dc4:	9302      	str	r3, [sp, #8]
 8014dc6:	195d      	adds	r5, r3, r5
 8014dc8:	9b04      	ldr	r3, [sp, #16]
 8014dca:	6828      	ldr	r0, [r5, #0]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	1c59      	adds	r1, r3, #1
 8014dd0:	9301      	str	r3, [sp, #4]
 8014dd2:	f7eb f9bd 	bl	8000150 <__udivsi3>
 8014dd6:	9001      	str	r0, [sp, #4]
 8014dd8:	42b0      	cmp	r0, r6
 8014dda:	d029      	beq.n	8014e30 <quorem+0x90>
 8014ddc:	9b03      	ldr	r3, [sp, #12]
 8014dde:	9802      	ldr	r0, [sp, #8]
 8014de0:	469c      	mov	ip, r3
 8014de2:	9606      	str	r6, [sp, #24]
 8014de4:	4662      	mov	r2, ip
 8014de6:	ca08      	ldmia	r2!, {r3}
 8014de8:	4694      	mov	ip, r2
 8014dea:	9a01      	ldr	r2, [sp, #4]
 8014dec:	b299      	uxth	r1, r3
 8014dee:	4351      	muls	r1, r2
 8014df0:	0c1b      	lsrs	r3, r3, #16
 8014df2:	4353      	muls	r3, r2
 8014df4:	1989      	adds	r1, r1, r6
 8014df6:	0c0a      	lsrs	r2, r1, #16
 8014df8:	189b      	adds	r3, r3, r2
 8014dfa:	9307      	str	r3, [sp, #28]
 8014dfc:	0c1e      	lsrs	r6, r3, #16
 8014dfe:	6803      	ldr	r3, [r0, #0]
 8014e00:	b289      	uxth	r1, r1
 8014e02:	b29a      	uxth	r2, r3
 8014e04:	9b06      	ldr	r3, [sp, #24]
 8014e06:	18d2      	adds	r2, r2, r3
 8014e08:	6803      	ldr	r3, [r0, #0]
 8014e0a:	1a52      	subs	r2, r2, r1
 8014e0c:	0c19      	lsrs	r1, r3, #16
 8014e0e:	466b      	mov	r3, sp
 8014e10:	8b9b      	ldrh	r3, [r3, #28]
 8014e12:	1acb      	subs	r3, r1, r3
 8014e14:	1411      	asrs	r1, r2, #16
 8014e16:	185b      	adds	r3, r3, r1
 8014e18:	1419      	asrs	r1, r3, #16
 8014e1a:	b292      	uxth	r2, r2
 8014e1c:	041b      	lsls	r3, r3, #16
 8014e1e:	431a      	orrs	r2, r3
 8014e20:	9b04      	ldr	r3, [sp, #16]
 8014e22:	9106      	str	r1, [sp, #24]
 8014e24:	c004      	stmia	r0!, {r2}
 8014e26:	4563      	cmp	r3, ip
 8014e28:	d2dc      	bcs.n	8014de4 <quorem+0x44>
 8014e2a:	682b      	ldr	r3, [r5, #0]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d02d      	beq.n	8014e8c <quorem+0xec>
 8014e30:	9905      	ldr	r1, [sp, #20]
 8014e32:	0038      	movs	r0, r7
 8014e34:	f001 fcb2 	bl	801679c <__mcmp>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	db1f      	blt.n	8014e7c <quorem+0xdc>
 8014e3c:	2500      	movs	r5, #0
 8014e3e:	9b01      	ldr	r3, [sp, #4]
 8014e40:	9802      	ldr	r0, [sp, #8]
 8014e42:	3301      	adds	r3, #1
 8014e44:	9903      	ldr	r1, [sp, #12]
 8014e46:	9301      	str	r3, [sp, #4]
 8014e48:	6802      	ldr	r2, [r0, #0]
 8014e4a:	c908      	ldmia	r1!, {r3}
 8014e4c:	b292      	uxth	r2, r2
 8014e4e:	1955      	adds	r5, r2, r5
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	1aaa      	subs	r2, r5, r2
 8014e54:	6805      	ldr	r5, [r0, #0]
 8014e56:	0c1b      	lsrs	r3, r3, #16
 8014e58:	0c2d      	lsrs	r5, r5, #16
 8014e5a:	1aeb      	subs	r3, r5, r3
 8014e5c:	1415      	asrs	r5, r2, #16
 8014e5e:	195b      	adds	r3, r3, r5
 8014e60:	141d      	asrs	r5, r3, #16
 8014e62:	b292      	uxth	r2, r2
 8014e64:	041b      	lsls	r3, r3, #16
 8014e66:	4313      	orrs	r3, r2
 8014e68:	c008      	stmia	r0!, {r3}
 8014e6a:	9b04      	ldr	r3, [sp, #16]
 8014e6c:	428b      	cmp	r3, r1
 8014e6e:	d2eb      	bcs.n	8014e48 <quorem+0xa8>
 8014e70:	9a02      	ldr	r2, [sp, #8]
 8014e72:	00a3      	lsls	r3, r4, #2
 8014e74:	18d3      	adds	r3, r2, r3
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	2a00      	cmp	r2, #0
 8014e7a:	d011      	beq.n	8014ea0 <quorem+0x100>
 8014e7c:	9e01      	ldr	r6, [sp, #4]
 8014e7e:	0030      	movs	r0, r6
 8014e80:	b009      	add	sp, #36	; 0x24
 8014e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e84:	682b      	ldr	r3, [r5, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d104      	bne.n	8014e94 <quorem+0xf4>
 8014e8a:	3c01      	subs	r4, #1
 8014e8c:	9b02      	ldr	r3, [sp, #8]
 8014e8e:	3d04      	subs	r5, #4
 8014e90:	42ab      	cmp	r3, r5
 8014e92:	d3f7      	bcc.n	8014e84 <quorem+0xe4>
 8014e94:	613c      	str	r4, [r7, #16]
 8014e96:	e7cb      	b.n	8014e30 <quorem+0x90>
 8014e98:	681a      	ldr	r2, [r3, #0]
 8014e9a:	2a00      	cmp	r2, #0
 8014e9c:	d104      	bne.n	8014ea8 <quorem+0x108>
 8014e9e:	3c01      	subs	r4, #1
 8014ea0:	9a02      	ldr	r2, [sp, #8]
 8014ea2:	3b04      	subs	r3, #4
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d3f7      	bcc.n	8014e98 <quorem+0xf8>
 8014ea8:	613c      	str	r4, [r7, #16]
 8014eaa:	e7e7      	b.n	8014e7c <quorem+0xdc>

08014eac <_dtoa_r>:
 8014eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eae:	0014      	movs	r4, r2
 8014eb0:	001d      	movs	r5, r3
 8014eb2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014eb4:	b09b      	sub	sp, #108	; 0x6c
 8014eb6:	9002      	str	r0, [sp, #8]
 8014eb8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8014eba:	9406      	str	r4, [sp, #24]
 8014ebc:	9507      	str	r5, [sp, #28]
 8014ebe:	2900      	cmp	r1, #0
 8014ec0:	d009      	beq.n	8014ed6 <_dtoa_r+0x2a>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014ec6:	4093      	lsls	r3, r2
 8014ec8:	604a      	str	r2, [r1, #4]
 8014eca:	608b      	str	r3, [r1, #8]
 8014ecc:	f001 fa6a 	bl	80163a4 <_Bfree>
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	9a02      	ldr	r2, [sp, #8]
 8014ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8014ed6:	2d00      	cmp	r5, #0
 8014ed8:	da20      	bge.n	8014f1c <_dtoa_r+0x70>
 8014eda:	2301      	movs	r3, #1
 8014edc:	6033      	str	r3, [r6, #0]
 8014ede:	006b      	lsls	r3, r5, #1
 8014ee0:	085b      	lsrs	r3, r3, #1
 8014ee2:	9307      	str	r3, [sp, #28]
 8014ee4:	9c07      	ldr	r4, [sp, #28]
 8014ee6:	4bb2      	ldr	r3, [pc, #712]	; (80151b0 <_dtoa_r+0x304>)
 8014ee8:	0022      	movs	r2, r4
 8014eea:	9317      	str	r3, [sp, #92]	; 0x5c
 8014eec:	401a      	ands	r2, r3
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d117      	bne.n	8014f22 <_dtoa_r+0x76>
 8014ef2:	4bb0      	ldr	r3, [pc, #704]	; (80151b4 <_dtoa_r+0x308>)
 8014ef4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014ef6:	6013      	str	r3, [r2, #0]
 8014ef8:	9b06      	ldr	r3, [sp, #24]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d103      	bne.n	8014f06 <_dtoa_r+0x5a>
 8014efe:	0324      	lsls	r4, r4, #12
 8014f00:	d101      	bne.n	8014f06 <_dtoa_r+0x5a>
 8014f02:	f000 fd89 	bl	8015a18 <_dtoa_r+0xb6c>
 8014f06:	4bac      	ldr	r3, [pc, #688]	; (80151b8 <_dtoa_r+0x30c>)
 8014f08:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f0a:	9308      	str	r3, [sp, #32]
 8014f0c:	2a00      	cmp	r2, #0
 8014f0e:	d002      	beq.n	8014f16 <_dtoa_r+0x6a>
 8014f10:	4baa      	ldr	r3, [pc, #680]	; (80151bc <_dtoa_r+0x310>)
 8014f12:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f14:	6013      	str	r3, [r2, #0]
 8014f16:	9808      	ldr	r0, [sp, #32]
 8014f18:	b01b      	add	sp, #108	; 0x6c
 8014f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	6033      	str	r3, [r6, #0]
 8014f20:	e7e0      	b.n	8014ee4 <_dtoa_r+0x38>
 8014f22:	9e06      	ldr	r6, [sp, #24]
 8014f24:	9f07      	ldr	r7, [sp, #28]
 8014f26:	2200      	movs	r2, #0
 8014f28:	2300      	movs	r3, #0
 8014f2a:	0030      	movs	r0, r6
 8014f2c:	0039      	movs	r1, r7
 8014f2e:	f7eb fa95 	bl	800045c <__aeabi_dcmpeq>
 8014f32:	1e05      	subs	r5, r0, #0
 8014f34:	d00b      	beq.n	8014f4e <_dtoa_r+0xa2>
 8014f36:	2301      	movs	r3, #1
 8014f38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f3a:	6013      	str	r3, [r2, #0]
 8014f3c:	4ba0      	ldr	r3, [pc, #640]	; (80151c0 <_dtoa_r+0x314>)
 8014f3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f40:	9308      	str	r3, [sp, #32]
 8014f42:	2a00      	cmp	r2, #0
 8014f44:	d0e7      	beq.n	8014f16 <_dtoa_r+0x6a>
 8014f46:	4a9f      	ldr	r2, [pc, #636]	; (80151c4 <_dtoa_r+0x318>)
 8014f48:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014f4a:	600a      	str	r2, [r1, #0]
 8014f4c:	e7e3      	b.n	8014f16 <_dtoa_r+0x6a>
 8014f4e:	ab18      	add	r3, sp, #96	; 0x60
 8014f50:	9301      	str	r3, [sp, #4]
 8014f52:	ab19      	add	r3, sp, #100	; 0x64
 8014f54:	9300      	str	r3, [sp, #0]
 8014f56:	0032      	movs	r2, r6
 8014f58:	003b      	movs	r3, r7
 8014f5a:	9802      	ldr	r0, [sp, #8]
 8014f5c:	f001 fd0e 	bl	801697c <__d2b>
 8014f60:	0063      	lsls	r3, r4, #1
 8014f62:	9003      	str	r0, [sp, #12]
 8014f64:	0d5b      	lsrs	r3, r3, #21
 8014f66:	d074      	beq.n	8015052 <_dtoa_r+0x1a6>
 8014f68:	033a      	lsls	r2, r7, #12
 8014f6a:	4c97      	ldr	r4, [pc, #604]	; (80151c8 <_dtoa_r+0x31c>)
 8014f6c:	0b12      	lsrs	r2, r2, #12
 8014f6e:	4314      	orrs	r4, r2
 8014f70:	0021      	movs	r1, r4
 8014f72:	4a96      	ldr	r2, [pc, #600]	; (80151cc <_dtoa_r+0x320>)
 8014f74:	0030      	movs	r0, r6
 8014f76:	9516      	str	r5, [sp, #88]	; 0x58
 8014f78:	189e      	adds	r6, r3, r2
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	4b94      	ldr	r3, [pc, #592]	; (80151d0 <_dtoa_r+0x324>)
 8014f7e:	f7ed f9cb 	bl	8002318 <__aeabi_dsub>
 8014f82:	4a94      	ldr	r2, [pc, #592]	; (80151d4 <_dtoa_r+0x328>)
 8014f84:	4b94      	ldr	r3, [pc, #592]	; (80151d8 <_dtoa_r+0x32c>)
 8014f86:	f7ec ff55 	bl	8001e34 <__aeabi_dmul>
 8014f8a:	4a94      	ldr	r2, [pc, #592]	; (80151dc <_dtoa_r+0x330>)
 8014f8c:	4b94      	ldr	r3, [pc, #592]	; (80151e0 <_dtoa_r+0x334>)
 8014f8e:	f7ec f82b 	bl	8000fe8 <__aeabi_dadd>
 8014f92:	0004      	movs	r4, r0
 8014f94:	0030      	movs	r0, r6
 8014f96:	000d      	movs	r5, r1
 8014f98:	f7ed fd58 	bl	8002a4c <__aeabi_i2d>
 8014f9c:	4a91      	ldr	r2, [pc, #580]	; (80151e4 <_dtoa_r+0x338>)
 8014f9e:	4b92      	ldr	r3, [pc, #584]	; (80151e8 <_dtoa_r+0x33c>)
 8014fa0:	f7ec ff48 	bl	8001e34 <__aeabi_dmul>
 8014fa4:	0002      	movs	r2, r0
 8014fa6:	000b      	movs	r3, r1
 8014fa8:	0020      	movs	r0, r4
 8014faa:	0029      	movs	r1, r5
 8014fac:	f7ec f81c 	bl	8000fe8 <__aeabi_dadd>
 8014fb0:	0004      	movs	r4, r0
 8014fb2:	000d      	movs	r5, r1
 8014fb4:	f7ed fd14 	bl	80029e0 <__aeabi_d2iz>
 8014fb8:	2200      	movs	r2, #0
 8014fba:	0007      	movs	r7, r0
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	0020      	movs	r0, r4
 8014fc0:	0029      	movs	r1, r5
 8014fc2:	f7eb fa51 	bl	8000468 <__aeabi_dcmplt>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	d009      	beq.n	8014fde <_dtoa_r+0x132>
 8014fca:	0038      	movs	r0, r7
 8014fcc:	f7ed fd3e 	bl	8002a4c <__aeabi_i2d>
 8014fd0:	002b      	movs	r3, r5
 8014fd2:	0022      	movs	r2, r4
 8014fd4:	f7eb fa42 	bl	800045c <__aeabi_dcmpeq>
 8014fd8:	4243      	negs	r3, r0
 8014fda:	4158      	adcs	r0, r3
 8014fdc:	1a3f      	subs	r7, r7, r0
 8014fde:	2301      	movs	r3, #1
 8014fe0:	9314      	str	r3, [sp, #80]	; 0x50
 8014fe2:	2f16      	cmp	r7, #22
 8014fe4:	d80d      	bhi.n	8015002 <_dtoa_r+0x156>
 8014fe6:	4981      	ldr	r1, [pc, #516]	; (80151ec <_dtoa_r+0x340>)
 8014fe8:	00fb      	lsls	r3, r7, #3
 8014fea:	18c9      	adds	r1, r1, r3
 8014fec:	6808      	ldr	r0, [r1, #0]
 8014fee:	6849      	ldr	r1, [r1, #4]
 8014ff0:	9a06      	ldr	r2, [sp, #24]
 8014ff2:	9b07      	ldr	r3, [sp, #28]
 8014ff4:	f7eb fa4c 	bl	8000490 <__aeabi_dcmpgt>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d046      	beq.n	801508a <_dtoa_r+0x1de>
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	3f01      	subs	r7, #1
 8015000:	9314      	str	r3, [sp, #80]	; 0x50
 8015002:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015004:	1b9e      	subs	r6, r3, r6
 8015006:	2300      	movs	r3, #0
 8015008:	930a      	str	r3, [sp, #40]	; 0x28
 801500a:	0033      	movs	r3, r6
 801500c:	3b01      	subs	r3, #1
 801500e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015010:	d504      	bpl.n	801501c <_dtoa_r+0x170>
 8015012:	2301      	movs	r3, #1
 8015014:	1b9b      	subs	r3, r3, r6
 8015016:	930a      	str	r3, [sp, #40]	; 0x28
 8015018:	2300      	movs	r3, #0
 801501a:	930b      	str	r3, [sp, #44]	; 0x2c
 801501c:	2f00      	cmp	r7, #0
 801501e:	db36      	blt.n	801508e <_dtoa_r+0x1e2>
 8015020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015022:	9711      	str	r7, [sp, #68]	; 0x44
 8015024:	19db      	adds	r3, r3, r7
 8015026:	930b      	str	r3, [sp, #44]	; 0x2c
 8015028:	2300      	movs	r3, #0
 801502a:	9304      	str	r3, [sp, #16]
 801502c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801502e:	2401      	movs	r4, #1
 8015030:	2b09      	cmp	r3, #9
 8015032:	d900      	bls.n	8015036 <_dtoa_r+0x18a>
 8015034:	e082      	b.n	801513c <_dtoa_r+0x290>
 8015036:	2b05      	cmp	r3, #5
 8015038:	dd02      	ble.n	8015040 <_dtoa_r+0x194>
 801503a:	2400      	movs	r4, #0
 801503c:	3b04      	subs	r3, #4
 801503e:	9320      	str	r3, [sp, #128]	; 0x80
 8015040:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015042:	1e98      	subs	r0, r3, #2
 8015044:	2803      	cmp	r0, #3
 8015046:	d900      	bls.n	801504a <_dtoa_r+0x19e>
 8015048:	e082      	b.n	8015150 <_dtoa_r+0x2a4>
 801504a:	f7eb f86d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801504e:	7573      	.short	0x7573
 8015050:	6828      	.short	0x6828
 8015052:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015054:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015056:	189e      	adds	r6, r3, r2
 8015058:	4b65      	ldr	r3, [pc, #404]	; (80151f0 <_dtoa_r+0x344>)
 801505a:	18f2      	adds	r2, r6, r3
 801505c:	2a20      	cmp	r2, #32
 801505e:	dd0f      	ble.n	8015080 <_dtoa_r+0x1d4>
 8015060:	2340      	movs	r3, #64	; 0x40
 8015062:	1a9b      	subs	r3, r3, r2
 8015064:	409c      	lsls	r4, r3
 8015066:	4b63      	ldr	r3, [pc, #396]	; (80151f4 <_dtoa_r+0x348>)
 8015068:	9806      	ldr	r0, [sp, #24]
 801506a:	18f3      	adds	r3, r6, r3
 801506c:	40d8      	lsrs	r0, r3
 801506e:	4320      	orrs	r0, r4
 8015070:	f7ed fd26 	bl	8002ac0 <__aeabi_ui2d>
 8015074:	2301      	movs	r3, #1
 8015076:	4c60      	ldr	r4, [pc, #384]	; (80151f8 <_dtoa_r+0x34c>)
 8015078:	3e01      	subs	r6, #1
 801507a:	1909      	adds	r1, r1, r4
 801507c:	9316      	str	r3, [sp, #88]	; 0x58
 801507e:	e77c      	b.n	8014f7a <_dtoa_r+0xce>
 8015080:	2320      	movs	r3, #32
 8015082:	9806      	ldr	r0, [sp, #24]
 8015084:	1a9b      	subs	r3, r3, r2
 8015086:	4098      	lsls	r0, r3
 8015088:	e7f2      	b.n	8015070 <_dtoa_r+0x1c4>
 801508a:	9014      	str	r0, [sp, #80]	; 0x50
 801508c:	e7b9      	b.n	8015002 <_dtoa_r+0x156>
 801508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015090:	1bdb      	subs	r3, r3, r7
 8015092:	930a      	str	r3, [sp, #40]	; 0x28
 8015094:	427b      	negs	r3, r7
 8015096:	9304      	str	r3, [sp, #16]
 8015098:	2300      	movs	r3, #0
 801509a:	9311      	str	r3, [sp, #68]	; 0x44
 801509c:	e7c6      	b.n	801502c <_dtoa_r+0x180>
 801509e:	2301      	movs	r3, #1
 80150a0:	930d      	str	r3, [sp, #52]	; 0x34
 80150a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	dd57      	ble.n	8015158 <_dtoa_r+0x2ac>
 80150a8:	930c      	str	r3, [sp, #48]	; 0x30
 80150aa:	9309      	str	r3, [sp, #36]	; 0x24
 80150ac:	2200      	movs	r2, #0
 80150ae:	9902      	ldr	r1, [sp, #8]
 80150b0:	644a      	str	r2, [r1, #68]	; 0x44
 80150b2:	3204      	adds	r2, #4
 80150b4:	0010      	movs	r0, r2
 80150b6:	9902      	ldr	r1, [sp, #8]
 80150b8:	3014      	adds	r0, #20
 80150ba:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80150bc:	4298      	cmp	r0, r3
 80150be:	d950      	bls.n	8015162 <_dtoa_r+0x2b6>
 80150c0:	9802      	ldr	r0, [sp, #8]
 80150c2:	f001 f947 	bl	8016354 <_Balloc>
 80150c6:	9b02      	ldr	r3, [sp, #8]
 80150c8:	9008      	str	r0, [sp, #32]
 80150ca:	6418      	str	r0, [r3, #64]	; 0x40
 80150cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ce:	2b0e      	cmp	r3, #14
 80150d0:	d900      	bls.n	80150d4 <_dtoa_r+0x228>
 80150d2:	e10c      	b.n	80152ee <_dtoa_r+0x442>
 80150d4:	2c00      	cmp	r4, #0
 80150d6:	d100      	bne.n	80150da <_dtoa_r+0x22e>
 80150d8:	e109      	b.n	80152ee <_dtoa_r+0x442>
 80150da:	9b06      	ldr	r3, [sp, #24]
 80150dc:	9c07      	ldr	r4, [sp, #28]
 80150de:	9312      	str	r3, [sp, #72]	; 0x48
 80150e0:	9413      	str	r4, [sp, #76]	; 0x4c
 80150e2:	2f00      	cmp	r7, #0
 80150e4:	dc00      	bgt.n	80150e8 <_dtoa_r+0x23c>
 80150e6:	e08b      	b.n	8015200 <_dtoa_r+0x354>
 80150e8:	210f      	movs	r1, #15
 80150ea:	003a      	movs	r2, r7
 80150ec:	4b3f      	ldr	r3, [pc, #252]	; (80151ec <_dtoa_r+0x340>)
 80150ee:	400a      	ands	r2, r1
 80150f0:	00d2      	lsls	r2, r2, #3
 80150f2:	189b      	adds	r3, r3, r2
 80150f4:	681d      	ldr	r5, [r3, #0]
 80150f6:	685e      	ldr	r6, [r3, #4]
 80150f8:	2302      	movs	r3, #2
 80150fa:	113c      	asrs	r4, r7, #4
 80150fc:	930e      	str	r3, [sp, #56]	; 0x38
 80150fe:	06e3      	lsls	r3, r4, #27
 8015100:	d50b      	bpl.n	801511a <_dtoa_r+0x26e>
 8015102:	4b3e      	ldr	r3, [pc, #248]	; (80151fc <_dtoa_r+0x350>)
 8015104:	400c      	ands	r4, r1
 8015106:	6a1a      	ldr	r2, [r3, #32]
 8015108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801510a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801510c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801510e:	f7ec fa87 	bl	8001620 <__aeabi_ddiv>
 8015112:	2303      	movs	r3, #3
 8015114:	9006      	str	r0, [sp, #24]
 8015116:	9107      	str	r1, [sp, #28]
 8015118:	930e      	str	r3, [sp, #56]	; 0x38
 801511a:	2300      	movs	r3, #0
 801511c:	e03b      	b.n	8015196 <_dtoa_r+0x2ea>
 801511e:	2301      	movs	r3, #1
 8015120:	930d      	str	r3, [sp, #52]	; 0x34
 8015122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015124:	18fb      	adds	r3, r7, r3
 8015126:	930c      	str	r3, [sp, #48]	; 0x30
 8015128:	3301      	adds	r3, #1
 801512a:	9309      	str	r3, [sp, #36]	; 0x24
 801512c:	2b00      	cmp	r3, #0
 801512e:	dcbd      	bgt.n	80150ac <_dtoa_r+0x200>
 8015130:	2301      	movs	r3, #1
 8015132:	e7bb      	b.n	80150ac <_dtoa_r+0x200>
 8015134:	2300      	movs	r3, #0
 8015136:	e7b3      	b.n	80150a0 <_dtoa_r+0x1f4>
 8015138:	2300      	movs	r3, #0
 801513a:	e7f1      	b.n	8015120 <_dtoa_r+0x274>
 801513c:	2300      	movs	r3, #0
 801513e:	940d      	str	r4, [sp, #52]	; 0x34
 8015140:	9320      	str	r3, [sp, #128]	; 0x80
 8015142:	3b01      	subs	r3, #1
 8015144:	2200      	movs	r2, #0
 8015146:	930c      	str	r3, [sp, #48]	; 0x30
 8015148:	9309      	str	r3, [sp, #36]	; 0x24
 801514a:	3313      	adds	r3, #19
 801514c:	9221      	str	r2, [sp, #132]	; 0x84
 801514e:	e7ad      	b.n	80150ac <_dtoa_r+0x200>
 8015150:	2301      	movs	r3, #1
 8015152:	930d      	str	r3, [sp, #52]	; 0x34
 8015154:	3b02      	subs	r3, #2
 8015156:	e7f5      	b.n	8015144 <_dtoa_r+0x298>
 8015158:	2301      	movs	r3, #1
 801515a:	930c      	str	r3, [sp, #48]	; 0x30
 801515c:	9309      	str	r3, [sp, #36]	; 0x24
 801515e:	001a      	movs	r2, r3
 8015160:	e7f4      	b.n	801514c <_dtoa_r+0x2a0>
 8015162:	9802      	ldr	r0, [sp, #8]
 8015164:	3101      	adds	r1, #1
 8015166:	6441      	str	r1, [r0, #68]	; 0x44
 8015168:	0052      	lsls	r2, r2, #1
 801516a:	e7a3      	b.n	80150b4 <_dtoa_r+0x208>
 801516c:	2301      	movs	r3, #1
 801516e:	421c      	tst	r4, r3
 8015170:	d00e      	beq.n	8015190 <_dtoa_r+0x2e4>
 8015172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015174:	4a21      	ldr	r2, [pc, #132]	; (80151fc <_dtoa_r+0x350>)
 8015176:	3301      	adds	r3, #1
 8015178:	930e      	str	r3, [sp, #56]	; 0x38
 801517a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801517c:	0028      	movs	r0, r5
 801517e:	00db      	lsls	r3, r3, #3
 8015180:	189b      	adds	r3, r3, r2
 8015182:	0031      	movs	r1, r6
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	f7ec fe54 	bl	8001e34 <__aeabi_dmul>
 801518c:	0005      	movs	r5, r0
 801518e:	000e      	movs	r6, r1
 8015190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015192:	1064      	asrs	r4, r4, #1
 8015194:	3301      	adds	r3, #1
 8015196:	9310      	str	r3, [sp, #64]	; 0x40
 8015198:	2c00      	cmp	r4, #0
 801519a:	d1e7      	bne.n	801516c <_dtoa_r+0x2c0>
 801519c:	9806      	ldr	r0, [sp, #24]
 801519e:	9907      	ldr	r1, [sp, #28]
 80151a0:	002a      	movs	r2, r5
 80151a2:	0033      	movs	r3, r6
 80151a4:	f7ec fa3c 	bl	8001620 <__aeabi_ddiv>
 80151a8:	9006      	str	r0, [sp, #24]
 80151aa:	9107      	str	r1, [sp, #28]
 80151ac:	e043      	b.n	8015236 <_dtoa_r+0x38a>
 80151ae:	46c0      	nop			; (mov r8, r8)
 80151b0:	7ff00000 	.word	0x7ff00000
 80151b4:	0000270f 	.word	0x0000270f
 80151b8:	08019da6 	.word	0x08019da6
 80151bc:	08019da9 	.word	0x08019da9
 80151c0:	08019c7a 	.word	0x08019c7a
 80151c4:	08019c7b 	.word	0x08019c7b
 80151c8:	3ff00000 	.word	0x3ff00000
 80151cc:	fffffc01 	.word	0xfffffc01
 80151d0:	3ff80000 	.word	0x3ff80000
 80151d4:	636f4361 	.word	0x636f4361
 80151d8:	3fd287a7 	.word	0x3fd287a7
 80151dc:	8b60c8b3 	.word	0x8b60c8b3
 80151e0:	3fc68a28 	.word	0x3fc68a28
 80151e4:	509f79fb 	.word	0x509f79fb
 80151e8:	3fd34413 	.word	0x3fd34413
 80151ec:	08019dd8 	.word	0x08019dd8
 80151f0:	00000432 	.word	0x00000432
 80151f4:	00000412 	.word	0x00000412
 80151f8:	fe100000 	.word	0xfe100000
 80151fc:	08019db0 	.word	0x08019db0
 8015200:	2302      	movs	r3, #2
 8015202:	930e      	str	r3, [sp, #56]	; 0x38
 8015204:	2f00      	cmp	r7, #0
 8015206:	d016      	beq.n	8015236 <_dtoa_r+0x38a>
 8015208:	9812      	ldr	r0, [sp, #72]	; 0x48
 801520a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801520c:	427c      	negs	r4, r7
 801520e:	330d      	adds	r3, #13
 8015210:	4023      	ands	r3, r4
 8015212:	4acf      	ldr	r2, [pc, #828]	; (8015550 <_dtoa_r+0x6a4>)
 8015214:	00db      	lsls	r3, r3, #3
 8015216:	18d3      	adds	r3, r2, r3
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	f7ec fe0a 	bl	8001e34 <__aeabi_dmul>
 8015220:	2300      	movs	r3, #0
 8015222:	2601      	movs	r6, #1
 8015224:	001d      	movs	r5, r3
 8015226:	9006      	str	r0, [sp, #24]
 8015228:	9107      	str	r1, [sp, #28]
 801522a:	1124      	asrs	r4, r4, #4
 801522c:	2c00      	cmp	r4, #0
 801522e:	d000      	beq.n	8015232 <_dtoa_r+0x386>
 8015230:	e08c      	b.n	801534c <_dtoa_r+0x4a0>
 8015232:	2b00      	cmp	r3, #0
 8015234:	d1b8      	bne.n	80151a8 <_dtoa_r+0x2fc>
 8015236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015238:	2b00      	cmp	r3, #0
 801523a:	d100      	bne.n	801523e <_dtoa_r+0x392>
 801523c:	e096      	b.n	801536c <_dtoa_r+0x4c0>
 801523e:	9c06      	ldr	r4, [sp, #24]
 8015240:	9d07      	ldr	r5, [sp, #28]
 8015242:	2200      	movs	r2, #0
 8015244:	4bc3      	ldr	r3, [pc, #780]	; (8015554 <_dtoa_r+0x6a8>)
 8015246:	0020      	movs	r0, r4
 8015248:	0029      	movs	r1, r5
 801524a:	f7eb f90d 	bl	8000468 <__aeabi_dcmplt>
 801524e:	2800      	cmp	r0, #0
 8015250:	d100      	bne.n	8015254 <_dtoa_r+0x3a8>
 8015252:	e08b      	b.n	801536c <_dtoa_r+0x4c0>
 8015254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015256:	2b00      	cmp	r3, #0
 8015258:	d100      	bne.n	801525c <_dtoa_r+0x3b0>
 801525a:	e087      	b.n	801536c <_dtoa_r+0x4c0>
 801525c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801525e:	2b00      	cmp	r3, #0
 8015260:	dd41      	ble.n	80152e6 <_dtoa_r+0x43a>
 8015262:	4bbd      	ldr	r3, [pc, #756]	; (8015558 <_dtoa_r+0x6ac>)
 8015264:	2200      	movs	r2, #0
 8015266:	0020      	movs	r0, r4
 8015268:	0029      	movs	r1, r5
 801526a:	f7ec fde3 	bl	8001e34 <__aeabi_dmul>
 801526e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015270:	9006      	str	r0, [sp, #24]
 8015272:	9107      	str	r1, [sp, #28]
 8015274:	3301      	adds	r3, #1
 8015276:	930e      	str	r3, [sp, #56]	; 0x38
 8015278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801527a:	1e7e      	subs	r6, r7, #1
 801527c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801527e:	9310      	str	r3, [sp, #64]	; 0x40
 8015280:	f7ed fbe4 	bl	8002a4c <__aeabi_i2d>
 8015284:	9a06      	ldr	r2, [sp, #24]
 8015286:	9b07      	ldr	r3, [sp, #28]
 8015288:	f7ec fdd4 	bl	8001e34 <__aeabi_dmul>
 801528c:	2200      	movs	r2, #0
 801528e:	4bb3      	ldr	r3, [pc, #716]	; (801555c <_dtoa_r+0x6b0>)
 8015290:	f7eb feaa 	bl	8000fe8 <__aeabi_dadd>
 8015294:	4ab2      	ldr	r2, [pc, #712]	; (8015560 <_dtoa_r+0x6b4>)
 8015296:	900e      	str	r0, [sp, #56]	; 0x38
 8015298:	910f      	str	r1, [sp, #60]	; 0x3c
 801529a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801529c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801529e:	4694      	mov	ip, r2
 80152a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152a2:	4463      	add	r3, ip
 80152a4:	9315      	str	r3, [sp, #84]	; 0x54
 80152a6:	001d      	movs	r5, r3
 80152a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d161      	bne.n	8015372 <_dtoa_r+0x4c6>
 80152ae:	9806      	ldr	r0, [sp, #24]
 80152b0:	9907      	ldr	r1, [sp, #28]
 80152b2:	2200      	movs	r2, #0
 80152b4:	4bab      	ldr	r3, [pc, #684]	; (8015564 <_dtoa_r+0x6b8>)
 80152b6:	f7ed f82f 	bl	8002318 <__aeabi_dsub>
 80152ba:	0022      	movs	r2, r4
 80152bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152be:	9006      	str	r0, [sp, #24]
 80152c0:	9107      	str	r1, [sp, #28]
 80152c2:	f7eb f8e5 	bl	8000490 <__aeabi_dcmpgt>
 80152c6:	2800      	cmp	r0, #0
 80152c8:	d000      	beq.n	80152cc <_dtoa_r+0x420>
 80152ca:	e2aa      	b.n	8015822 <_dtoa_r+0x976>
 80152cc:	48a6      	ldr	r0, [pc, #664]	; (8015568 <_dtoa_r+0x6bc>)
 80152ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152d0:	4684      	mov	ip, r0
 80152d2:	4461      	add	r1, ip
 80152d4:	000b      	movs	r3, r1
 80152d6:	9806      	ldr	r0, [sp, #24]
 80152d8:	9907      	ldr	r1, [sp, #28]
 80152da:	0022      	movs	r2, r4
 80152dc:	f7eb f8c4 	bl	8000468 <__aeabi_dcmplt>
 80152e0:	2800      	cmp	r0, #0
 80152e2:	d000      	beq.n	80152e6 <_dtoa_r+0x43a>
 80152e4:	e297      	b.n	8015816 <_dtoa_r+0x96a>
 80152e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80152e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80152ea:	9306      	str	r3, [sp, #24]
 80152ec:	9407      	str	r4, [sp, #28]
 80152ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	da00      	bge.n	80152f6 <_dtoa_r+0x44a>
 80152f4:	e15e      	b.n	80155b4 <_dtoa_r+0x708>
 80152f6:	2f0e      	cmp	r7, #14
 80152f8:	dd00      	ble.n	80152fc <_dtoa_r+0x450>
 80152fa:	e15b      	b.n	80155b4 <_dtoa_r+0x708>
 80152fc:	4b94      	ldr	r3, [pc, #592]	; (8015550 <_dtoa_r+0x6a4>)
 80152fe:	00fa      	lsls	r2, r7, #3
 8015300:	189b      	adds	r3, r3, r2
 8015302:	685c      	ldr	r4, [r3, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	9304      	str	r3, [sp, #16]
 8015308:	9405      	str	r4, [sp, #20]
 801530a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801530c:	2b00      	cmp	r3, #0
 801530e:	db00      	blt.n	8015312 <_dtoa_r+0x466>
 8015310:	e0da      	b.n	80154c8 <_dtoa_r+0x61c>
 8015312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015314:	2b00      	cmp	r3, #0
 8015316:	dd00      	ble.n	801531a <_dtoa_r+0x46e>
 8015318:	e0d6      	b.n	80154c8 <_dtoa_r+0x61c>
 801531a:	d000      	beq.n	801531e <_dtoa_r+0x472>
 801531c:	e27f      	b.n	801581e <_dtoa_r+0x972>
 801531e:	9804      	ldr	r0, [sp, #16]
 8015320:	9905      	ldr	r1, [sp, #20]
 8015322:	2200      	movs	r2, #0
 8015324:	4b8f      	ldr	r3, [pc, #572]	; (8015564 <_dtoa_r+0x6b8>)
 8015326:	f7ec fd85 	bl	8001e34 <__aeabi_dmul>
 801532a:	9a06      	ldr	r2, [sp, #24]
 801532c:	9b07      	ldr	r3, [sp, #28]
 801532e:	f7eb f8b9 	bl	80004a4 <__aeabi_dcmpge>
 8015332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015334:	9304      	str	r3, [sp, #16]
 8015336:	001e      	movs	r6, r3
 8015338:	2800      	cmp	r0, #0
 801533a:	d000      	beq.n	801533e <_dtoa_r+0x492>
 801533c:	e251      	b.n	80157e2 <_dtoa_r+0x936>
 801533e:	9b08      	ldr	r3, [sp, #32]
 8015340:	9a08      	ldr	r2, [sp, #32]
 8015342:	1c5d      	adds	r5, r3, #1
 8015344:	2331      	movs	r3, #49	; 0x31
 8015346:	3701      	adds	r7, #1
 8015348:	7013      	strb	r3, [r2, #0]
 801534a:	e24d      	b.n	80157e8 <_dtoa_r+0x93c>
 801534c:	4234      	tst	r4, r6
 801534e:	d00a      	beq.n	8015366 <_dtoa_r+0x4ba>
 8015350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015352:	4a86      	ldr	r2, [pc, #536]	; (801556c <_dtoa_r+0x6c0>)
 8015354:	3301      	adds	r3, #1
 8015356:	930e      	str	r3, [sp, #56]	; 0x38
 8015358:	00eb      	lsls	r3, r5, #3
 801535a:	189b      	adds	r3, r3, r2
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	685b      	ldr	r3, [r3, #4]
 8015360:	f7ec fd68 	bl	8001e34 <__aeabi_dmul>
 8015364:	0033      	movs	r3, r6
 8015366:	1064      	asrs	r4, r4, #1
 8015368:	3501      	adds	r5, #1
 801536a:	e75f      	b.n	801522c <_dtoa_r+0x380>
 801536c:	003e      	movs	r6, r7
 801536e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015370:	e784      	b.n	801527c <_dtoa_r+0x3d0>
 8015372:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015374:	1e5a      	subs	r2, r3, #1
 8015376:	4b76      	ldr	r3, [pc, #472]	; (8015550 <_dtoa_r+0x6a4>)
 8015378:	00d2      	lsls	r2, r2, #3
 801537a:	189b      	adds	r3, r3, r2
 801537c:	6818      	ldr	r0, [r3, #0]
 801537e:	6859      	ldr	r1, [r3, #4]
 8015380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015382:	2b00      	cmp	r3, #0
 8015384:	d04b      	beq.n	801541e <_dtoa_r+0x572>
 8015386:	0002      	movs	r2, r0
 8015388:	000b      	movs	r3, r1
 801538a:	2000      	movs	r0, #0
 801538c:	4978      	ldr	r1, [pc, #480]	; (8015570 <_dtoa_r+0x6c4>)
 801538e:	f7ec f947 	bl	8001620 <__aeabi_ddiv>
 8015392:	002b      	movs	r3, r5
 8015394:	0022      	movs	r2, r4
 8015396:	f7ec ffbf 	bl	8002318 <__aeabi_dsub>
 801539a:	9b08      	ldr	r3, [sp, #32]
 801539c:	900e      	str	r0, [sp, #56]	; 0x38
 801539e:	910f      	str	r1, [sp, #60]	; 0x3c
 80153a0:	9315      	str	r3, [sp, #84]	; 0x54
 80153a2:	9806      	ldr	r0, [sp, #24]
 80153a4:	9907      	ldr	r1, [sp, #28]
 80153a6:	f7ed fb1b 	bl	80029e0 <__aeabi_d2iz>
 80153aa:	0004      	movs	r4, r0
 80153ac:	f7ed fb4e 	bl	8002a4c <__aeabi_i2d>
 80153b0:	0002      	movs	r2, r0
 80153b2:	000b      	movs	r3, r1
 80153b4:	9806      	ldr	r0, [sp, #24]
 80153b6:	9907      	ldr	r1, [sp, #28]
 80153b8:	f7ec ffae 	bl	8002318 <__aeabi_dsub>
 80153bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153be:	3430      	adds	r4, #48	; 0x30
 80153c0:	1c5d      	adds	r5, r3, #1
 80153c2:	701c      	strb	r4, [r3, #0]
 80153c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153c8:	9006      	str	r0, [sp, #24]
 80153ca:	9107      	str	r1, [sp, #28]
 80153cc:	f7eb f84c 	bl	8000468 <__aeabi_dcmplt>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	d16c      	bne.n	80154ae <_dtoa_r+0x602>
 80153d4:	9a06      	ldr	r2, [sp, #24]
 80153d6:	9b07      	ldr	r3, [sp, #28]
 80153d8:	2000      	movs	r0, #0
 80153da:	495e      	ldr	r1, [pc, #376]	; (8015554 <_dtoa_r+0x6a8>)
 80153dc:	f7ec ff9c 	bl	8002318 <__aeabi_dsub>
 80153e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153e4:	f7eb f840 	bl	8000468 <__aeabi_dcmplt>
 80153e8:	2800      	cmp	r0, #0
 80153ea:	d000      	beq.n	80153ee <_dtoa_r+0x542>
 80153ec:	e0c3      	b.n	8015576 <_dtoa_r+0x6ca>
 80153ee:	9b08      	ldr	r3, [sp, #32]
 80153f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153f2:	1aeb      	subs	r3, r5, r3
 80153f4:	429a      	cmp	r2, r3
 80153f6:	dc00      	bgt.n	80153fa <_dtoa_r+0x54e>
 80153f8:	e775      	b.n	80152e6 <_dtoa_r+0x43a>
 80153fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80153fe:	2200      	movs	r2, #0
 8015400:	4b55      	ldr	r3, [pc, #340]	; (8015558 <_dtoa_r+0x6ac>)
 8015402:	f7ec fd17 	bl	8001e34 <__aeabi_dmul>
 8015406:	2200      	movs	r2, #0
 8015408:	900e      	str	r0, [sp, #56]	; 0x38
 801540a:	910f      	str	r1, [sp, #60]	; 0x3c
 801540c:	9806      	ldr	r0, [sp, #24]
 801540e:	9907      	ldr	r1, [sp, #28]
 8015410:	4b51      	ldr	r3, [pc, #324]	; (8015558 <_dtoa_r+0x6ac>)
 8015412:	f7ec fd0f 	bl	8001e34 <__aeabi_dmul>
 8015416:	9515      	str	r5, [sp, #84]	; 0x54
 8015418:	9006      	str	r0, [sp, #24]
 801541a:	9107      	str	r1, [sp, #28]
 801541c:	e7c1      	b.n	80153a2 <_dtoa_r+0x4f6>
 801541e:	0022      	movs	r2, r4
 8015420:	002b      	movs	r3, r5
 8015422:	f7ec fd07 	bl	8001e34 <__aeabi_dmul>
 8015426:	9c08      	ldr	r4, [sp, #32]
 8015428:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801542a:	0023      	movs	r3, r4
 801542c:	4694      	mov	ip, r2
 801542e:	900e      	str	r0, [sp, #56]	; 0x38
 8015430:	910f      	str	r1, [sp, #60]	; 0x3c
 8015432:	4463      	add	r3, ip
 8015434:	9315      	str	r3, [sp, #84]	; 0x54
 8015436:	9806      	ldr	r0, [sp, #24]
 8015438:	9907      	ldr	r1, [sp, #28]
 801543a:	f7ed fad1 	bl	80029e0 <__aeabi_d2iz>
 801543e:	0005      	movs	r5, r0
 8015440:	f7ed fb04 	bl	8002a4c <__aeabi_i2d>
 8015444:	000b      	movs	r3, r1
 8015446:	0002      	movs	r2, r0
 8015448:	9806      	ldr	r0, [sp, #24]
 801544a:	9907      	ldr	r1, [sp, #28]
 801544c:	f7ec ff64 	bl	8002318 <__aeabi_dsub>
 8015450:	3530      	adds	r5, #48	; 0x30
 8015452:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015454:	7025      	strb	r5, [r4, #0]
 8015456:	3401      	adds	r4, #1
 8015458:	9006      	str	r0, [sp, #24]
 801545a:	9107      	str	r1, [sp, #28]
 801545c:	42a3      	cmp	r3, r4
 801545e:	d12a      	bne.n	80154b6 <_dtoa_r+0x60a>
 8015460:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015462:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015464:	9a08      	ldr	r2, [sp, #32]
 8015466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015468:	4694      	mov	ip, r2
 801546a:	4463      	add	r3, ip
 801546c:	2200      	movs	r2, #0
 801546e:	001d      	movs	r5, r3
 8015470:	4b3f      	ldr	r3, [pc, #252]	; (8015570 <_dtoa_r+0x6c4>)
 8015472:	f7eb fdb9 	bl	8000fe8 <__aeabi_dadd>
 8015476:	0002      	movs	r2, r0
 8015478:	000b      	movs	r3, r1
 801547a:	9806      	ldr	r0, [sp, #24]
 801547c:	9907      	ldr	r1, [sp, #28]
 801547e:	f7eb f807 	bl	8000490 <__aeabi_dcmpgt>
 8015482:	2800      	cmp	r0, #0
 8015484:	d000      	beq.n	8015488 <_dtoa_r+0x5dc>
 8015486:	e076      	b.n	8015576 <_dtoa_r+0x6ca>
 8015488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801548a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801548c:	2000      	movs	r0, #0
 801548e:	4938      	ldr	r1, [pc, #224]	; (8015570 <_dtoa_r+0x6c4>)
 8015490:	f7ec ff42 	bl	8002318 <__aeabi_dsub>
 8015494:	0002      	movs	r2, r0
 8015496:	000b      	movs	r3, r1
 8015498:	9806      	ldr	r0, [sp, #24]
 801549a:	9907      	ldr	r1, [sp, #28]
 801549c:	f7ea ffe4 	bl	8000468 <__aeabi_dcmplt>
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d100      	bne.n	80154a6 <_dtoa_r+0x5fa>
 80154a4:	e71f      	b.n	80152e6 <_dtoa_r+0x43a>
 80154a6:	1e6b      	subs	r3, r5, #1
 80154a8:	781a      	ldrb	r2, [r3, #0]
 80154aa:	2a30      	cmp	r2, #48	; 0x30
 80154ac:	d001      	beq.n	80154b2 <_dtoa_r+0x606>
 80154ae:	0037      	movs	r7, r6
 80154b0:	e03f      	b.n	8015532 <_dtoa_r+0x686>
 80154b2:	001d      	movs	r5, r3
 80154b4:	e7f7      	b.n	80154a6 <_dtoa_r+0x5fa>
 80154b6:	9806      	ldr	r0, [sp, #24]
 80154b8:	9907      	ldr	r1, [sp, #28]
 80154ba:	2200      	movs	r2, #0
 80154bc:	4b26      	ldr	r3, [pc, #152]	; (8015558 <_dtoa_r+0x6ac>)
 80154be:	f7ec fcb9 	bl	8001e34 <__aeabi_dmul>
 80154c2:	9006      	str	r0, [sp, #24]
 80154c4:	9107      	str	r1, [sp, #28]
 80154c6:	e7b6      	b.n	8015436 <_dtoa_r+0x58a>
 80154c8:	9e08      	ldr	r6, [sp, #32]
 80154ca:	9a04      	ldr	r2, [sp, #16]
 80154cc:	9b05      	ldr	r3, [sp, #20]
 80154ce:	9806      	ldr	r0, [sp, #24]
 80154d0:	9907      	ldr	r1, [sp, #28]
 80154d2:	f7ec f8a5 	bl	8001620 <__aeabi_ddiv>
 80154d6:	f7ed fa83 	bl	80029e0 <__aeabi_d2iz>
 80154da:	0004      	movs	r4, r0
 80154dc:	f7ed fab6 	bl	8002a4c <__aeabi_i2d>
 80154e0:	9a04      	ldr	r2, [sp, #16]
 80154e2:	9b05      	ldr	r3, [sp, #20]
 80154e4:	f7ec fca6 	bl	8001e34 <__aeabi_dmul>
 80154e8:	0002      	movs	r2, r0
 80154ea:	000b      	movs	r3, r1
 80154ec:	9806      	ldr	r0, [sp, #24]
 80154ee:	9907      	ldr	r1, [sp, #28]
 80154f0:	f7ec ff12 	bl	8002318 <__aeabi_dsub>
 80154f4:	0023      	movs	r3, r4
 80154f6:	3330      	adds	r3, #48	; 0x30
 80154f8:	7033      	strb	r3, [r6, #0]
 80154fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154fc:	9b08      	ldr	r3, [sp, #32]
 80154fe:	1c75      	adds	r5, r6, #1
 8015500:	1aeb      	subs	r3, r5, r3
 8015502:	429a      	cmp	r2, r3
 8015504:	d148      	bne.n	8015598 <_dtoa_r+0x6ec>
 8015506:	0002      	movs	r2, r0
 8015508:	000b      	movs	r3, r1
 801550a:	f7eb fd6d 	bl	8000fe8 <__aeabi_dadd>
 801550e:	9a04      	ldr	r2, [sp, #16]
 8015510:	9b05      	ldr	r3, [sp, #20]
 8015512:	9006      	str	r0, [sp, #24]
 8015514:	9107      	str	r1, [sp, #28]
 8015516:	f7ea ffbb 	bl	8000490 <__aeabi_dcmpgt>
 801551a:	2800      	cmp	r0, #0
 801551c:	d12a      	bne.n	8015574 <_dtoa_r+0x6c8>
 801551e:	9a04      	ldr	r2, [sp, #16]
 8015520:	9b05      	ldr	r3, [sp, #20]
 8015522:	9806      	ldr	r0, [sp, #24]
 8015524:	9907      	ldr	r1, [sp, #28]
 8015526:	f7ea ff99 	bl	800045c <__aeabi_dcmpeq>
 801552a:	2800      	cmp	r0, #0
 801552c:	d001      	beq.n	8015532 <_dtoa_r+0x686>
 801552e:	07e3      	lsls	r3, r4, #31
 8015530:	d420      	bmi.n	8015574 <_dtoa_r+0x6c8>
 8015532:	9903      	ldr	r1, [sp, #12]
 8015534:	9802      	ldr	r0, [sp, #8]
 8015536:	f000 ff35 	bl	80163a4 <_Bfree>
 801553a:	2300      	movs	r3, #0
 801553c:	702b      	strb	r3, [r5, #0]
 801553e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015540:	3701      	adds	r7, #1
 8015542:	601f      	str	r7, [r3, #0]
 8015544:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015546:	2b00      	cmp	r3, #0
 8015548:	d100      	bne.n	801554c <_dtoa_r+0x6a0>
 801554a:	e4e4      	b.n	8014f16 <_dtoa_r+0x6a>
 801554c:	601d      	str	r5, [r3, #0]
 801554e:	e4e2      	b.n	8014f16 <_dtoa_r+0x6a>
 8015550:	08019dd8 	.word	0x08019dd8
 8015554:	3ff00000 	.word	0x3ff00000
 8015558:	40240000 	.word	0x40240000
 801555c:	401c0000 	.word	0x401c0000
 8015560:	fcc00000 	.word	0xfcc00000
 8015564:	40140000 	.word	0x40140000
 8015568:	7cc00000 	.word	0x7cc00000
 801556c:	08019db0 	.word	0x08019db0
 8015570:	3fe00000 	.word	0x3fe00000
 8015574:	003e      	movs	r6, r7
 8015576:	1e6b      	subs	r3, r5, #1
 8015578:	781a      	ldrb	r2, [r3, #0]
 801557a:	2a39      	cmp	r2, #57	; 0x39
 801557c:	d106      	bne.n	801558c <_dtoa_r+0x6e0>
 801557e:	9a08      	ldr	r2, [sp, #32]
 8015580:	429a      	cmp	r2, r3
 8015582:	d107      	bne.n	8015594 <_dtoa_r+0x6e8>
 8015584:	2330      	movs	r3, #48	; 0x30
 8015586:	7013      	strb	r3, [r2, #0]
 8015588:	0013      	movs	r3, r2
 801558a:	3601      	adds	r6, #1
 801558c:	781a      	ldrb	r2, [r3, #0]
 801558e:	3201      	adds	r2, #1
 8015590:	701a      	strb	r2, [r3, #0]
 8015592:	e78c      	b.n	80154ae <_dtoa_r+0x602>
 8015594:	001d      	movs	r5, r3
 8015596:	e7ee      	b.n	8015576 <_dtoa_r+0x6ca>
 8015598:	2200      	movs	r2, #0
 801559a:	4ba4      	ldr	r3, [pc, #656]	; (801582c <_dtoa_r+0x980>)
 801559c:	f7ec fc4a 	bl	8001e34 <__aeabi_dmul>
 80155a0:	2200      	movs	r2, #0
 80155a2:	2300      	movs	r3, #0
 80155a4:	9006      	str	r0, [sp, #24]
 80155a6:	9107      	str	r1, [sp, #28]
 80155a8:	002e      	movs	r6, r5
 80155aa:	f7ea ff57 	bl	800045c <__aeabi_dcmpeq>
 80155ae:	2800      	cmp	r0, #0
 80155b0:	d08b      	beq.n	80154ca <_dtoa_r+0x61e>
 80155b2:	e7be      	b.n	8015532 <_dtoa_r+0x686>
 80155b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155b6:	2a00      	cmp	r2, #0
 80155b8:	d100      	bne.n	80155bc <_dtoa_r+0x710>
 80155ba:	e0da      	b.n	8015772 <_dtoa_r+0x8c6>
 80155bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155be:	2a01      	cmp	r2, #1
 80155c0:	dd00      	ble.n	80155c4 <_dtoa_r+0x718>
 80155c2:	e0bd      	b.n	8015740 <_dtoa_r+0x894>
 80155c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80155c6:	2a00      	cmp	r2, #0
 80155c8:	d100      	bne.n	80155cc <_dtoa_r+0x720>
 80155ca:	e0b5      	b.n	8015738 <_dtoa_r+0x88c>
 80155cc:	4a98      	ldr	r2, [pc, #608]	; (8015830 <_dtoa_r+0x984>)
 80155ce:	189b      	adds	r3, r3, r2
 80155d0:	9d04      	ldr	r5, [sp, #16]
 80155d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80155d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155d6:	2101      	movs	r1, #1
 80155d8:	18d2      	adds	r2, r2, r3
 80155da:	920a      	str	r2, [sp, #40]	; 0x28
 80155dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155de:	9802      	ldr	r0, [sp, #8]
 80155e0:	18d3      	adds	r3, r2, r3
 80155e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80155e4:	f000 ffad 	bl	8016542 <__i2b>
 80155e8:	0006      	movs	r6, r0
 80155ea:	2c00      	cmp	r4, #0
 80155ec:	dd0e      	ble.n	801560c <_dtoa_r+0x760>
 80155ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	dd0b      	ble.n	801560c <_dtoa_r+0x760>
 80155f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155f6:	0023      	movs	r3, r4
 80155f8:	4294      	cmp	r4, r2
 80155fa:	dd00      	ble.n	80155fe <_dtoa_r+0x752>
 80155fc:	0013      	movs	r3, r2
 80155fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015600:	1ae4      	subs	r4, r4, r3
 8015602:	1ad2      	subs	r2, r2, r3
 8015604:	920a      	str	r2, [sp, #40]	; 0x28
 8015606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015608:	1ad3      	subs	r3, r2, r3
 801560a:	930b      	str	r3, [sp, #44]	; 0x2c
 801560c:	9b04      	ldr	r3, [sp, #16]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d01f      	beq.n	8015652 <_dtoa_r+0x7a6>
 8015612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015614:	2b00      	cmp	r3, #0
 8015616:	d100      	bne.n	801561a <_dtoa_r+0x76e>
 8015618:	e0af      	b.n	801577a <_dtoa_r+0x8ce>
 801561a:	2d00      	cmp	r5, #0
 801561c:	d011      	beq.n	8015642 <_dtoa_r+0x796>
 801561e:	0031      	movs	r1, r6
 8015620:	002a      	movs	r2, r5
 8015622:	9802      	ldr	r0, [sp, #8]
 8015624:	f001 f826 	bl	8016674 <__pow5mult>
 8015628:	9a03      	ldr	r2, [sp, #12]
 801562a:	0001      	movs	r1, r0
 801562c:	0006      	movs	r6, r0
 801562e:	9802      	ldr	r0, [sp, #8]
 8015630:	f000 ff90 	bl	8016554 <__multiply>
 8015634:	9903      	ldr	r1, [sp, #12]
 8015636:	9010      	str	r0, [sp, #64]	; 0x40
 8015638:	9802      	ldr	r0, [sp, #8]
 801563a:	f000 feb3 	bl	80163a4 <_Bfree>
 801563e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015640:	9303      	str	r3, [sp, #12]
 8015642:	9b04      	ldr	r3, [sp, #16]
 8015644:	1b5a      	subs	r2, r3, r5
 8015646:	d004      	beq.n	8015652 <_dtoa_r+0x7a6>
 8015648:	9903      	ldr	r1, [sp, #12]
 801564a:	9802      	ldr	r0, [sp, #8]
 801564c:	f001 f812 	bl	8016674 <__pow5mult>
 8015650:	9003      	str	r0, [sp, #12]
 8015652:	2101      	movs	r1, #1
 8015654:	9802      	ldr	r0, [sp, #8]
 8015656:	f000 ff74 	bl	8016542 <__i2b>
 801565a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801565c:	9004      	str	r0, [sp, #16]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d100      	bne.n	8015664 <_dtoa_r+0x7b8>
 8015662:	e1e3      	b.n	8015a2c <_dtoa_r+0xb80>
 8015664:	001a      	movs	r2, r3
 8015666:	0001      	movs	r1, r0
 8015668:	9802      	ldr	r0, [sp, #8]
 801566a:	f001 f803 	bl	8016674 <__pow5mult>
 801566e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015670:	9004      	str	r0, [sp, #16]
 8015672:	2b01      	cmp	r3, #1
 8015674:	dd00      	ble.n	8015678 <_dtoa_r+0x7cc>
 8015676:	e082      	b.n	801577e <_dtoa_r+0x8d2>
 8015678:	2500      	movs	r5, #0
 801567a:	9b06      	ldr	r3, [sp, #24]
 801567c:	42ab      	cmp	r3, r5
 801567e:	d10e      	bne.n	801569e <_dtoa_r+0x7f2>
 8015680:	9b07      	ldr	r3, [sp, #28]
 8015682:	031b      	lsls	r3, r3, #12
 8015684:	42ab      	cmp	r3, r5
 8015686:	d10a      	bne.n	801569e <_dtoa_r+0x7f2>
 8015688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801568a:	9a07      	ldr	r2, [sp, #28]
 801568c:	4213      	tst	r3, r2
 801568e:	d006      	beq.n	801569e <_dtoa_r+0x7f2>
 8015690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015692:	3501      	adds	r5, #1
 8015694:	3301      	adds	r3, #1
 8015696:	930a      	str	r3, [sp, #40]	; 0x28
 8015698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801569a:	3301      	adds	r3, #1
 801569c:	930b      	str	r3, [sp, #44]	; 0x2c
 801569e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156a0:	2001      	movs	r0, #1
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d16c      	bne.n	8015780 <_dtoa_r+0x8d4>
 80156a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156a8:	1818      	adds	r0, r3, r0
 80156aa:	231f      	movs	r3, #31
 80156ac:	4018      	ands	r0, r3
 80156ae:	d07e      	beq.n	80157ae <_dtoa_r+0x902>
 80156b0:	3301      	adds	r3, #1
 80156b2:	1a1b      	subs	r3, r3, r0
 80156b4:	2b04      	cmp	r3, #4
 80156b6:	dd70      	ble.n	801579a <_dtoa_r+0x8ee>
 80156b8:	231c      	movs	r3, #28
 80156ba:	1a18      	subs	r0, r3, r0
 80156bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156be:	1824      	adds	r4, r4, r0
 80156c0:	181b      	adds	r3, r3, r0
 80156c2:	930a      	str	r3, [sp, #40]	; 0x28
 80156c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c6:	181b      	adds	r3, r3, r0
 80156c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80156ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	dd05      	ble.n	80156dc <_dtoa_r+0x830>
 80156d0:	001a      	movs	r2, r3
 80156d2:	9903      	ldr	r1, [sp, #12]
 80156d4:	9802      	ldr	r0, [sp, #8]
 80156d6:	f001 f80f 	bl	80166f8 <__lshift>
 80156da:	9003      	str	r0, [sp, #12]
 80156dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156de:	2b00      	cmp	r3, #0
 80156e0:	dd05      	ble.n	80156ee <_dtoa_r+0x842>
 80156e2:	001a      	movs	r2, r3
 80156e4:	9904      	ldr	r1, [sp, #16]
 80156e6:	9802      	ldr	r0, [sp, #8]
 80156e8:	f001 f806 	bl	80166f8 <__lshift>
 80156ec:	9004      	str	r0, [sp, #16]
 80156ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d05e      	beq.n	80157b2 <_dtoa_r+0x906>
 80156f4:	9904      	ldr	r1, [sp, #16]
 80156f6:	9803      	ldr	r0, [sp, #12]
 80156f8:	f001 f850 	bl	801679c <__mcmp>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	da58      	bge.n	80157b2 <_dtoa_r+0x906>
 8015700:	2300      	movs	r3, #0
 8015702:	220a      	movs	r2, #10
 8015704:	9903      	ldr	r1, [sp, #12]
 8015706:	9802      	ldr	r0, [sp, #8]
 8015708:	f000 fe56 	bl	80163b8 <__multadd>
 801570c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801570e:	3f01      	subs	r7, #1
 8015710:	9003      	str	r0, [sp, #12]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d100      	bne.n	8015718 <_dtoa_r+0x86c>
 8015716:	e190      	b.n	8015a3a <_dtoa_r+0xb8e>
 8015718:	2300      	movs	r3, #0
 801571a:	0031      	movs	r1, r6
 801571c:	220a      	movs	r2, #10
 801571e:	9802      	ldr	r0, [sp, #8]
 8015720:	f000 fe4a 	bl	80163b8 <__multadd>
 8015724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015726:	0006      	movs	r6, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	dd00      	ble.n	801572e <_dtoa_r+0x882>
 801572c:	e088      	b.n	8015840 <_dtoa_r+0x994>
 801572e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015730:	2b02      	cmp	r3, #2
 8015732:	dc00      	bgt.n	8015736 <_dtoa_r+0x88a>
 8015734:	e084      	b.n	8015840 <_dtoa_r+0x994>
 8015736:	e044      	b.n	80157c2 <_dtoa_r+0x916>
 8015738:	2336      	movs	r3, #54	; 0x36
 801573a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801573c:	1a9b      	subs	r3, r3, r2
 801573e:	e747      	b.n	80155d0 <_dtoa_r+0x724>
 8015740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015742:	1e5d      	subs	r5, r3, #1
 8015744:	9b04      	ldr	r3, [sp, #16]
 8015746:	42ab      	cmp	r3, r5
 8015748:	db08      	blt.n	801575c <_dtoa_r+0x8b0>
 801574a:	1b5d      	subs	r5, r3, r5
 801574c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801574e:	2b00      	cmp	r3, #0
 8015750:	da0c      	bge.n	801576c <_dtoa_r+0x8c0>
 8015752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015756:	1a9c      	subs	r4, r3, r2
 8015758:	2300      	movs	r3, #0
 801575a:	e73b      	b.n	80155d4 <_dtoa_r+0x728>
 801575c:	9b04      	ldr	r3, [sp, #16]
 801575e:	9504      	str	r5, [sp, #16]
 8015760:	1aea      	subs	r2, r5, r3
 8015762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015764:	2500      	movs	r5, #0
 8015766:	189b      	adds	r3, r3, r2
 8015768:	9311      	str	r3, [sp, #68]	; 0x44
 801576a:	e7ef      	b.n	801574c <_dtoa_r+0x8a0>
 801576c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801576e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015770:	e730      	b.n	80155d4 <_dtoa_r+0x728>
 8015772:	9d04      	ldr	r5, [sp, #16]
 8015774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015776:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015778:	e737      	b.n	80155ea <_dtoa_r+0x73e>
 801577a:	9a04      	ldr	r2, [sp, #16]
 801577c:	e764      	b.n	8015648 <_dtoa_r+0x79c>
 801577e:	2500      	movs	r5, #0
 8015780:	9b04      	ldr	r3, [sp, #16]
 8015782:	9a04      	ldr	r2, [sp, #16]
 8015784:	691b      	ldr	r3, [r3, #16]
 8015786:	9310      	str	r3, [sp, #64]	; 0x40
 8015788:	3303      	adds	r3, #3
 801578a:	009b      	lsls	r3, r3, #2
 801578c:	18d3      	adds	r3, r2, r3
 801578e:	6858      	ldr	r0, [r3, #4]
 8015790:	f000 fe8e 	bl	80164b0 <__hi0bits>
 8015794:	2320      	movs	r3, #32
 8015796:	1a18      	subs	r0, r3, r0
 8015798:	e785      	b.n	80156a6 <_dtoa_r+0x7fa>
 801579a:	2b04      	cmp	r3, #4
 801579c:	d095      	beq.n	80156ca <_dtoa_r+0x81e>
 801579e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157a0:	331c      	adds	r3, #28
 80157a2:	18d2      	adds	r2, r2, r3
 80157a4:	920a      	str	r2, [sp, #40]	; 0x28
 80157a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80157a8:	18e4      	adds	r4, r4, r3
 80157aa:	18d3      	adds	r3, r2, r3
 80157ac:	e78c      	b.n	80156c8 <_dtoa_r+0x81c>
 80157ae:	0003      	movs	r3, r0
 80157b0:	e7f5      	b.n	801579e <_dtoa_r+0x8f2>
 80157b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	dc3d      	bgt.n	8015834 <_dtoa_r+0x988>
 80157b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157ba:	2b02      	cmp	r3, #2
 80157bc:	dd3a      	ble.n	8015834 <_dtoa_r+0x988>
 80157be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157c0:	930c      	str	r3, [sp, #48]	; 0x30
 80157c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d10c      	bne.n	80157e2 <_dtoa_r+0x936>
 80157c8:	9904      	ldr	r1, [sp, #16]
 80157ca:	2205      	movs	r2, #5
 80157cc:	9802      	ldr	r0, [sp, #8]
 80157ce:	f000 fdf3 	bl	80163b8 <__multadd>
 80157d2:	9004      	str	r0, [sp, #16]
 80157d4:	0001      	movs	r1, r0
 80157d6:	9803      	ldr	r0, [sp, #12]
 80157d8:	f000 ffe0 	bl	801679c <__mcmp>
 80157dc:	2800      	cmp	r0, #0
 80157de:	dd00      	ble.n	80157e2 <_dtoa_r+0x936>
 80157e0:	e5ad      	b.n	801533e <_dtoa_r+0x492>
 80157e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157e4:	9d08      	ldr	r5, [sp, #32]
 80157e6:	43df      	mvns	r7, r3
 80157e8:	2300      	movs	r3, #0
 80157ea:	9309      	str	r3, [sp, #36]	; 0x24
 80157ec:	9904      	ldr	r1, [sp, #16]
 80157ee:	9802      	ldr	r0, [sp, #8]
 80157f0:	f000 fdd8 	bl	80163a4 <_Bfree>
 80157f4:	2e00      	cmp	r6, #0
 80157f6:	d100      	bne.n	80157fa <_dtoa_r+0x94e>
 80157f8:	e69b      	b.n	8015532 <_dtoa_r+0x686>
 80157fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d005      	beq.n	801580c <_dtoa_r+0x960>
 8015800:	42b3      	cmp	r3, r6
 8015802:	d003      	beq.n	801580c <_dtoa_r+0x960>
 8015804:	0019      	movs	r1, r3
 8015806:	9802      	ldr	r0, [sp, #8]
 8015808:	f000 fdcc 	bl	80163a4 <_Bfree>
 801580c:	0031      	movs	r1, r6
 801580e:	9802      	ldr	r0, [sp, #8]
 8015810:	f000 fdc8 	bl	80163a4 <_Bfree>
 8015814:	e68d      	b.n	8015532 <_dtoa_r+0x686>
 8015816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015818:	9304      	str	r3, [sp, #16]
 801581a:	001e      	movs	r6, r3
 801581c:	e7e1      	b.n	80157e2 <_dtoa_r+0x936>
 801581e:	2300      	movs	r3, #0
 8015820:	e7fa      	b.n	8015818 <_dtoa_r+0x96c>
 8015822:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015824:	0037      	movs	r7, r6
 8015826:	9304      	str	r3, [sp, #16]
 8015828:	001e      	movs	r6, r3
 801582a:	e588      	b.n	801533e <_dtoa_r+0x492>
 801582c:	40240000 	.word	0x40240000
 8015830:	00000433 	.word	0x00000433
 8015834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015836:	2b00      	cmp	r3, #0
 8015838:	d100      	bne.n	801583c <_dtoa_r+0x990>
 801583a:	e0b2      	b.n	80159a2 <_dtoa_r+0xaf6>
 801583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801583e:	930c      	str	r3, [sp, #48]	; 0x30
 8015840:	2c00      	cmp	r4, #0
 8015842:	dd05      	ble.n	8015850 <_dtoa_r+0x9a4>
 8015844:	0031      	movs	r1, r6
 8015846:	0022      	movs	r2, r4
 8015848:	9802      	ldr	r0, [sp, #8]
 801584a:	f000 ff55 	bl	80166f8 <__lshift>
 801584e:	0006      	movs	r6, r0
 8015850:	0030      	movs	r0, r6
 8015852:	2d00      	cmp	r5, #0
 8015854:	d011      	beq.n	801587a <_dtoa_r+0x9ce>
 8015856:	6871      	ldr	r1, [r6, #4]
 8015858:	9802      	ldr	r0, [sp, #8]
 801585a:	f000 fd7b 	bl	8016354 <_Balloc>
 801585e:	0031      	movs	r1, r6
 8015860:	0004      	movs	r4, r0
 8015862:	6933      	ldr	r3, [r6, #16]
 8015864:	310c      	adds	r1, #12
 8015866:	1c9a      	adds	r2, r3, #2
 8015868:	0092      	lsls	r2, r2, #2
 801586a:	300c      	adds	r0, #12
 801586c:	f7fc fe8b 	bl	8012586 <memcpy>
 8015870:	2201      	movs	r2, #1
 8015872:	0021      	movs	r1, r4
 8015874:	9802      	ldr	r0, [sp, #8]
 8015876:	f000 ff3f 	bl	80166f8 <__lshift>
 801587a:	9609      	str	r6, [sp, #36]	; 0x24
 801587c:	0006      	movs	r6, r0
 801587e:	9b08      	ldr	r3, [sp, #32]
 8015880:	930a      	str	r3, [sp, #40]	; 0x28
 8015882:	9904      	ldr	r1, [sp, #16]
 8015884:	9803      	ldr	r0, [sp, #12]
 8015886:	f7ff fa8b 	bl	8014da0 <quorem>
 801588a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801588c:	900d      	str	r0, [sp, #52]	; 0x34
 801588e:	0004      	movs	r4, r0
 8015890:	9803      	ldr	r0, [sp, #12]
 8015892:	f000 ff83 	bl	801679c <__mcmp>
 8015896:	0032      	movs	r2, r6
 8015898:	9010      	str	r0, [sp, #64]	; 0x40
 801589a:	9904      	ldr	r1, [sp, #16]
 801589c:	9802      	ldr	r0, [sp, #8]
 801589e:	f000 ff97 	bl	80167d0 <__mdiff>
 80158a2:	2301      	movs	r3, #1
 80158a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80158a6:	68c3      	ldr	r3, [r0, #12]
 80158a8:	3430      	adds	r4, #48	; 0x30
 80158aa:	0005      	movs	r5, r0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d104      	bne.n	80158ba <_dtoa_r+0xa0e>
 80158b0:	0001      	movs	r1, r0
 80158b2:	9803      	ldr	r0, [sp, #12]
 80158b4:	f000 ff72 	bl	801679c <__mcmp>
 80158b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80158ba:	0029      	movs	r1, r5
 80158bc:	9802      	ldr	r0, [sp, #8]
 80158be:	f000 fd71 	bl	80163a4 <_Bfree>
 80158c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80158c6:	4313      	orrs	r3, r2
 80158c8:	d10e      	bne.n	80158e8 <_dtoa_r+0xa3c>
 80158ca:	9a06      	ldr	r2, [sp, #24]
 80158cc:	3301      	adds	r3, #1
 80158ce:	4213      	tst	r3, r2
 80158d0:	d10a      	bne.n	80158e8 <_dtoa_r+0xa3c>
 80158d2:	2c39      	cmp	r4, #57	; 0x39
 80158d4:	d026      	beq.n	8015924 <_dtoa_r+0xa78>
 80158d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158d8:	2b00      	cmp	r3, #0
 80158da:	dd01      	ble.n	80158e0 <_dtoa_r+0xa34>
 80158dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80158de:	3431      	adds	r4, #49	; 0x31
 80158e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e2:	1c5d      	adds	r5, r3, #1
 80158e4:	701c      	strb	r4, [r3, #0]
 80158e6:	e781      	b.n	80157ec <_dtoa_r+0x940>
 80158e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	db07      	blt.n	80158fe <_dtoa_r+0xa52>
 80158ee:	001d      	movs	r5, r3
 80158f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158f2:	431d      	orrs	r5, r3
 80158f4:	d122      	bne.n	801593c <_dtoa_r+0xa90>
 80158f6:	2301      	movs	r3, #1
 80158f8:	9a06      	ldr	r2, [sp, #24]
 80158fa:	4213      	tst	r3, r2
 80158fc:	d11e      	bne.n	801593c <_dtoa_r+0xa90>
 80158fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015900:	2b00      	cmp	r3, #0
 8015902:	dded      	ble.n	80158e0 <_dtoa_r+0xa34>
 8015904:	9903      	ldr	r1, [sp, #12]
 8015906:	2201      	movs	r2, #1
 8015908:	9802      	ldr	r0, [sp, #8]
 801590a:	f000 fef5 	bl	80166f8 <__lshift>
 801590e:	9904      	ldr	r1, [sp, #16]
 8015910:	9003      	str	r0, [sp, #12]
 8015912:	f000 ff43 	bl	801679c <__mcmp>
 8015916:	2800      	cmp	r0, #0
 8015918:	dc02      	bgt.n	8015920 <_dtoa_r+0xa74>
 801591a:	d1e1      	bne.n	80158e0 <_dtoa_r+0xa34>
 801591c:	07e3      	lsls	r3, r4, #31
 801591e:	d5df      	bpl.n	80158e0 <_dtoa_r+0xa34>
 8015920:	2c39      	cmp	r4, #57	; 0x39
 8015922:	d1db      	bne.n	80158dc <_dtoa_r+0xa30>
 8015924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015928:	1c5d      	adds	r5, r3, #1
 801592a:	2339      	movs	r3, #57	; 0x39
 801592c:	7013      	strb	r3, [r2, #0]
 801592e:	1e6b      	subs	r3, r5, #1
 8015930:	781a      	ldrb	r2, [r3, #0]
 8015932:	2a39      	cmp	r2, #57	; 0x39
 8015934:	d067      	beq.n	8015a06 <_dtoa_r+0xb5a>
 8015936:	3201      	adds	r2, #1
 8015938:	701a      	strb	r2, [r3, #0]
 801593a:	e757      	b.n	80157ec <_dtoa_r+0x940>
 801593c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801593e:	1c5d      	adds	r5, r3, #1
 8015940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015942:	2b00      	cmp	r3, #0
 8015944:	dd04      	ble.n	8015950 <_dtoa_r+0xaa4>
 8015946:	2c39      	cmp	r4, #57	; 0x39
 8015948:	d0ec      	beq.n	8015924 <_dtoa_r+0xa78>
 801594a:	3401      	adds	r4, #1
 801594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801594e:	e7c9      	b.n	80158e4 <_dtoa_r+0xa38>
 8015950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015954:	701c      	strb	r4, [r3, #0]
 8015956:	9b08      	ldr	r3, [sp, #32]
 8015958:	1aeb      	subs	r3, r5, r3
 801595a:	4293      	cmp	r3, r2
 801595c:	d03e      	beq.n	80159dc <_dtoa_r+0xb30>
 801595e:	2300      	movs	r3, #0
 8015960:	220a      	movs	r2, #10
 8015962:	9903      	ldr	r1, [sp, #12]
 8015964:	9802      	ldr	r0, [sp, #8]
 8015966:	f000 fd27 	bl	80163b8 <__multadd>
 801596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596c:	9003      	str	r0, [sp, #12]
 801596e:	42b3      	cmp	r3, r6
 8015970:	d109      	bne.n	8015986 <_dtoa_r+0xada>
 8015972:	2300      	movs	r3, #0
 8015974:	220a      	movs	r2, #10
 8015976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015978:	9802      	ldr	r0, [sp, #8]
 801597a:	f000 fd1d 	bl	80163b8 <__multadd>
 801597e:	9009      	str	r0, [sp, #36]	; 0x24
 8015980:	0006      	movs	r6, r0
 8015982:	950a      	str	r5, [sp, #40]	; 0x28
 8015984:	e77d      	b.n	8015882 <_dtoa_r+0x9d6>
 8015986:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015988:	2300      	movs	r3, #0
 801598a:	220a      	movs	r2, #10
 801598c:	9802      	ldr	r0, [sp, #8]
 801598e:	f000 fd13 	bl	80163b8 <__multadd>
 8015992:	2300      	movs	r3, #0
 8015994:	9009      	str	r0, [sp, #36]	; 0x24
 8015996:	220a      	movs	r2, #10
 8015998:	0031      	movs	r1, r6
 801599a:	9802      	ldr	r0, [sp, #8]
 801599c:	f000 fd0c 	bl	80163b8 <__multadd>
 80159a0:	e7ee      	b.n	8015980 <_dtoa_r+0xad4>
 80159a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159a4:	930c      	str	r3, [sp, #48]	; 0x30
 80159a6:	9b08      	ldr	r3, [sp, #32]
 80159a8:	9306      	str	r3, [sp, #24]
 80159aa:	9904      	ldr	r1, [sp, #16]
 80159ac:	9803      	ldr	r0, [sp, #12]
 80159ae:	f7ff f9f7 	bl	8014da0 <quorem>
 80159b2:	9b06      	ldr	r3, [sp, #24]
 80159b4:	3030      	adds	r0, #48	; 0x30
 80159b6:	1c5d      	adds	r5, r3, #1
 80159b8:	7018      	strb	r0, [r3, #0]
 80159ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159bc:	9b08      	ldr	r3, [sp, #32]
 80159be:	0004      	movs	r4, r0
 80159c0:	1aeb      	subs	r3, r5, r3
 80159c2:	429a      	cmp	r2, r3
 80159c4:	dd08      	ble.n	80159d8 <_dtoa_r+0xb2c>
 80159c6:	2300      	movs	r3, #0
 80159c8:	220a      	movs	r2, #10
 80159ca:	9903      	ldr	r1, [sp, #12]
 80159cc:	9802      	ldr	r0, [sp, #8]
 80159ce:	f000 fcf3 	bl	80163b8 <__multadd>
 80159d2:	9506      	str	r5, [sp, #24]
 80159d4:	9003      	str	r0, [sp, #12]
 80159d6:	e7e8      	b.n	80159aa <_dtoa_r+0xafe>
 80159d8:	2300      	movs	r3, #0
 80159da:	9309      	str	r3, [sp, #36]	; 0x24
 80159dc:	9903      	ldr	r1, [sp, #12]
 80159de:	2201      	movs	r2, #1
 80159e0:	9802      	ldr	r0, [sp, #8]
 80159e2:	f000 fe89 	bl	80166f8 <__lshift>
 80159e6:	9904      	ldr	r1, [sp, #16]
 80159e8:	9003      	str	r0, [sp, #12]
 80159ea:	f000 fed7 	bl	801679c <__mcmp>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	dc9d      	bgt.n	801592e <_dtoa_r+0xa82>
 80159f2:	d101      	bne.n	80159f8 <_dtoa_r+0xb4c>
 80159f4:	07e3      	lsls	r3, r4, #31
 80159f6:	d49a      	bmi.n	801592e <_dtoa_r+0xa82>
 80159f8:	1e6b      	subs	r3, r5, #1
 80159fa:	781a      	ldrb	r2, [r3, #0]
 80159fc:	2a30      	cmp	r2, #48	; 0x30
 80159fe:	d000      	beq.n	8015a02 <_dtoa_r+0xb56>
 8015a00:	e6f4      	b.n	80157ec <_dtoa_r+0x940>
 8015a02:	001d      	movs	r5, r3
 8015a04:	e7f8      	b.n	80159f8 <_dtoa_r+0xb4c>
 8015a06:	9a08      	ldr	r2, [sp, #32]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d103      	bne.n	8015a14 <_dtoa_r+0xb68>
 8015a0c:	2331      	movs	r3, #49	; 0x31
 8015a0e:	3701      	adds	r7, #1
 8015a10:	7013      	strb	r3, [r2, #0]
 8015a12:	e6eb      	b.n	80157ec <_dtoa_r+0x940>
 8015a14:	001d      	movs	r5, r3
 8015a16:	e78a      	b.n	801592e <_dtoa_r+0xa82>
 8015a18:	4b0b      	ldr	r3, [pc, #44]	; (8015a48 <_dtoa_r+0xb9c>)
 8015a1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a1c:	9308      	str	r3, [sp, #32]
 8015a1e:	4b0b      	ldr	r3, [pc, #44]	; (8015a4c <_dtoa_r+0xba0>)
 8015a20:	2a00      	cmp	r2, #0
 8015a22:	d001      	beq.n	8015a28 <_dtoa_r+0xb7c>
 8015a24:	f7ff fa75 	bl	8014f12 <_dtoa_r+0x66>
 8015a28:	f7ff fa75 	bl	8014f16 <_dtoa_r+0x6a>
 8015a2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a2e:	2b01      	cmp	r3, #1
 8015a30:	dc00      	bgt.n	8015a34 <_dtoa_r+0xb88>
 8015a32:	e621      	b.n	8015678 <_dtoa_r+0x7cc>
 8015a34:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015a36:	2001      	movs	r0, #1
 8015a38:	e635      	b.n	80156a6 <_dtoa_r+0x7fa>
 8015a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	dcb2      	bgt.n	80159a6 <_dtoa_r+0xafa>
 8015a40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a42:	2b02      	cmp	r3, #2
 8015a44:	ddaf      	ble.n	80159a6 <_dtoa_r+0xafa>
 8015a46:	e6bc      	b.n	80157c2 <_dtoa_r+0x916>
 8015a48:	08019d9d 	.word	0x08019d9d
 8015a4c:	08019da5 	.word	0x08019da5

08015a50 <__errno>:
 8015a50:	4b01      	ldr	r3, [pc, #4]	; (8015a58 <__errno+0x8>)
 8015a52:	6818      	ldr	r0, [r3, #0]
 8015a54:	4770      	bx	lr
 8015a56:	46c0      	nop			; (mov r8, r8)
 8015a58:	200000cc 	.word	0x200000cc

08015a5c <__libc_fini_array>:
 8015a5c:	b570      	push	{r4, r5, r6, lr}
 8015a5e:	4d07      	ldr	r5, [pc, #28]	; (8015a7c <__libc_fini_array+0x20>)
 8015a60:	4c07      	ldr	r4, [pc, #28]	; (8015a80 <__libc_fini_array+0x24>)
 8015a62:	1b64      	subs	r4, r4, r5
 8015a64:	10a4      	asrs	r4, r4, #2
 8015a66:	2c00      	cmp	r4, #0
 8015a68:	d102      	bne.n	8015a70 <__libc_fini_array+0x14>
 8015a6a:	f001 f95b 	bl	8016d24 <_fini>
 8015a6e:	bd70      	pop	{r4, r5, r6, pc}
 8015a70:	3c01      	subs	r4, #1
 8015a72:	00a3      	lsls	r3, r4, #2
 8015a74:	58eb      	ldr	r3, [r5, r3]
 8015a76:	4798      	blx	r3
 8015a78:	e7f5      	b.n	8015a66 <__libc_fini_array+0xa>
 8015a7a:	46c0      	nop			; (mov r8, r8)
 8015a7c:	08019ebc 	.word	0x08019ebc
 8015a80:	08019ec0 	.word	0x08019ec0

08015a84 <_malloc_trim_r>:
 8015a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a86:	0005      	movs	r5, r0
 8015a88:	2008      	movs	r0, #8
 8015a8a:	000c      	movs	r4, r1
 8015a8c:	f7ff f95c 	bl	8014d48 <sysconf>
 8015a90:	0007      	movs	r7, r0
 8015a92:	0028      	movs	r0, r5
 8015a94:	f7fc fd88 	bl	80125a8 <__malloc_lock>
 8015a98:	2203      	movs	r2, #3
 8015a9a:	4e21      	ldr	r6, [pc, #132]	; (8015b20 <_malloc_trim_r+0x9c>)
 8015a9c:	0039      	movs	r1, r7
 8015a9e:	68b3      	ldr	r3, [r6, #8]
 8015aa0:	685b      	ldr	r3, [r3, #4]
 8015aa2:	4393      	bics	r3, r2
 8015aa4:	1b18      	subs	r0, r3, r4
 8015aa6:	3811      	subs	r0, #17
 8015aa8:	19c0      	adds	r0, r0, r7
 8015aaa:	9301      	str	r3, [sp, #4]
 8015aac:	f7ea fb50 	bl	8000150 <__udivsi3>
 8015ab0:	1e44      	subs	r4, r0, #1
 8015ab2:	437c      	muls	r4, r7
 8015ab4:	42a7      	cmp	r7, r4
 8015ab6:	dd04      	ble.n	8015ac2 <_malloc_trim_r+0x3e>
 8015ab8:	0028      	movs	r0, r5
 8015aba:	f7fc fd7d 	bl	80125b8 <__malloc_unlock>
 8015abe:	2000      	movs	r0, #0
 8015ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	0028      	movs	r0, r5
 8015ac6:	f7fc ff4f 	bl	8012968 <_sbrk_r>
 8015aca:	68b3      	ldr	r3, [r6, #8]
 8015acc:	9a01      	ldr	r2, [sp, #4]
 8015ace:	189b      	adds	r3, r3, r2
 8015ad0:	4298      	cmp	r0, r3
 8015ad2:	d1f1      	bne.n	8015ab8 <_malloc_trim_r+0x34>
 8015ad4:	4261      	negs	r1, r4
 8015ad6:	0028      	movs	r0, r5
 8015ad8:	f7fc ff46 	bl	8012968 <_sbrk_r>
 8015adc:	1c43      	adds	r3, r0, #1
 8015ade:	d110      	bne.n	8015b02 <_malloc_trim_r+0x7e>
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	0028      	movs	r0, r5
 8015ae4:	f7fc ff40 	bl	8012968 <_sbrk_r>
 8015ae8:	68b2      	ldr	r2, [r6, #8]
 8015aea:	1a81      	subs	r1, r0, r2
 8015aec:	290f      	cmp	r1, #15
 8015aee:	dde3      	ble.n	8015ab8 <_malloc_trim_r+0x34>
 8015af0:	4b0c      	ldr	r3, [pc, #48]	; (8015b24 <_malloc_trim_r+0xa0>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	1ac0      	subs	r0, r0, r3
 8015af6:	4b0c      	ldr	r3, [pc, #48]	; (8015b28 <_malloc_trim_r+0xa4>)
 8015af8:	6018      	str	r0, [r3, #0]
 8015afa:	2301      	movs	r3, #1
 8015afc:	430b      	orrs	r3, r1
 8015afe:	6053      	str	r3, [r2, #4]
 8015b00:	e7da      	b.n	8015ab8 <_malloc_trim_r+0x34>
 8015b02:	68b2      	ldr	r2, [r6, #8]
 8015b04:	2601      	movs	r6, #1
 8015b06:	9b01      	ldr	r3, [sp, #4]
 8015b08:	0028      	movs	r0, r5
 8015b0a:	1b1b      	subs	r3, r3, r4
 8015b0c:	4333      	orrs	r3, r6
 8015b0e:	6053      	str	r3, [r2, #4]
 8015b10:	4b05      	ldr	r3, [pc, #20]	; (8015b28 <_malloc_trim_r+0xa4>)
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	1b14      	subs	r4, r2, r4
 8015b16:	601c      	str	r4, [r3, #0]
 8015b18:	f7fc fd4e 	bl	80125b8 <__malloc_unlock>
 8015b1c:	0030      	movs	r0, r6
 8015b1e:	e7cf      	b.n	8015ac0 <_malloc_trim_r+0x3c>
 8015b20:	20000664 	.word	0x20000664
 8015b24:	20000a6c 	.word	0x20000a6c
 8015b28:	20006bc4 	.word	0x20006bc4

08015b2c <_free_r>:
 8015b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b2e:	1e0d      	subs	r5, r1, #0
 8015b30:	9001      	str	r0, [sp, #4]
 8015b32:	d02d      	beq.n	8015b90 <_free_r+0x64>
 8015b34:	f7fc fd38 	bl	80125a8 <__malloc_lock>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	0029      	movs	r1, r5
 8015b3c:	469c      	mov	ip, r3
 8015b3e:	3908      	subs	r1, #8
 8015b40:	684f      	ldr	r7, [r1, #4]
 8015b42:	4662      	mov	r2, ip
 8015b44:	003b      	movs	r3, r7
 8015b46:	4666      	mov	r6, ip
 8015b48:	4393      	bics	r3, r2
 8015b4a:	18c8      	adds	r0, r1, r3
 8015b4c:	6845      	ldr	r5, [r0, #4]
 8015b4e:	3202      	adds	r2, #2
 8015b50:	4395      	bics	r5, r2
 8015b52:	4a4a      	ldr	r2, [pc, #296]	; (8015c7c <_free_r+0x150>)
 8015b54:	4037      	ands	r7, r6
 8015b56:	6896      	ldr	r6, [r2, #8]
 8015b58:	4286      	cmp	r6, r0
 8015b5a:	d11a      	bne.n	8015b92 <_free_r+0x66>
 8015b5c:	195b      	adds	r3, r3, r5
 8015b5e:	2f00      	cmp	r7, #0
 8015b60:	d106      	bne.n	8015b70 <_free_r+0x44>
 8015b62:	6808      	ldr	r0, [r1, #0]
 8015b64:	1a09      	subs	r1, r1, r0
 8015b66:	688d      	ldr	r5, [r1, #8]
 8015b68:	181b      	adds	r3, r3, r0
 8015b6a:	68c8      	ldr	r0, [r1, #12]
 8015b6c:	60e8      	str	r0, [r5, #12]
 8015b6e:	6085      	str	r5, [r0, #8]
 8015b70:	2001      	movs	r0, #1
 8015b72:	4318      	orrs	r0, r3
 8015b74:	6048      	str	r0, [r1, #4]
 8015b76:	6091      	str	r1, [r2, #8]
 8015b78:	4a41      	ldr	r2, [pc, #260]	; (8015c80 <_free_r+0x154>)
 8015b7a:	6812      	ldr	r2, [r2, #0]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d804      	bhi.n	8015b8a <_free_r+0x5e>
 8015b80:	4b40      	ldr	r3, [pc, #256]	; (8015c84 <_free_r+0x158>)
 8015b82:	9801      	ldr	r0, [sp, #4]
 8015b84:	6819      	ldr	r1, [r3, #0]
 8015b86:	f7ff ff7d 	bl	8015a84 <_malloc_trim_r>
 8015b8a:	9801      	ldr	r0, [sp, #4]
 8015b8c:	f7fc fd14 	bl	80125b8 <__malloc_unlock>
 8015b90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015b92:	2600      	movs	r6, #0
 8015b94:	6045      	str	r5, [r0, #4]
 8015b96:	42b7      	cmp	r7, r6
 8015b98:	d109      	bne.n	8015bae <_free_r+0x82>
 8015b9a:	680f      	ldr	r7, [r1, #0]
 8015b9c:	4c3a      	ldr	r4, [pc, #232]	; (8015c88 <_free_r+0x15c>)
 8015b9e:	1bc9      	subs	r1, r1, r7
 8015ba0:	19db      	adds	r3, r3, r7
 8015ba2:	688f      	ldr	r7, [r1, #8]
 8015ba4:	42a7      	cmp	r7, r4
 8015ba6:	d02b      	beq.n	8015c00 <_free_r+0xd4>
 8015ba8:	68cc      	ldr	r4, [r1, #12]
 8015baa:	60fc      	str	r4, [r7, #12]
 8015bac:	60a7      	str	r7, [r4, #8]
 8015bae:	1947      	adds	r7, r0, r5
 8015bb0:	687c      	ldr	r4, [r7, #4]
 8015bb2:	2701      	movs	r7, #1
 8015bb4:	423c      	tst	r4, r7
 8015bb6:	d10b      	bne.n	8015bd0 <_free_r+0xa4>
 8015bb8:	195b      	adds	r3, r3, r5
 8015bba:	6885      	ldr	r5, [r0, #8]
 8015bbc:	2e00      	cmp	r6, #0
 8015bbe:	d121      	bne.n	8015c04 <_free_r+0xd8>
 8015bc0:	4c31      	ldr	r4, [pc, #196]	; (8015c88 <_free_r+0x15c>)
 8015bc2:	42a5      	cmp	r5, r4
 8015bc4:	d11e      	bne.n	8015c04 <_free_r+0xd8>
 8015bc6:	003e      	movs	r6, r7
 8015bc8:	6151      	str	r1, [r2, #20]
 8015bca:	6111      	str	r1, [r2, #16]
 8015bcc:	60cd      	str	r5, [r1, #12]
 8015bce:	608d      	str	r5, [r1, #8]
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	0005      	movs	r5, r0
 8015bd4:	431d      	orrs	r5, r3
 8015bd6:	604d      	str	r5, [r1, #4]
 8015bd8:	50cb      	str	r3, [r1, r3]
 8015bda:	2e00      	cmp	r6, #0
 8015bdc:	d1d5      	bne.n	8015b8a <_free_r+0x5e>
 8015bde:	4d2b      	ldr	r5, [pc, #172]	; (8015c8c <_free_r+0x160>)
 8015be0:	42ab      	cmp	r3, r5
 8015be2:	d813      	bhi.n	8015c0c <_free_r+0xe0>
 8015be4:	08db      	lsrs	r3, r3, #3
 8015be6:	109d      	asrs	r5, r3, #2
 8015be8:	40a8      	lsls	r0, r5
 8015bea:	6854      	ldr	r4, [r2, #4]
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	4320      	orrs	r0, r4
 8015bf0:	6050      	str	r0, [r2, #4]
 8015bf2:	189a      	adds	r2, r3, r2
 8015bf4:	6893      	ldr	r3, [r2, #8]
 8015bf6:	60ca      	str	r2, [r1, #12]
 8015bf8:	608b      	str	r3, [r1, #8]
 8015bfa:	6091      	str	r1, [r2, #8]
 8015bfc:	60d9      	str	r1, [r3, #12]
 8015bfe:	e7c4      	b.n	8015b8a <_free_r+0x5e>
 8015c00:	4666      	mov	r6, ip
 8015c02:	e7d4      	b.n	8015bae <_free_r+0x82>
 8015c04:	68c0      	ldr	r0, [r0, #12]
 8015c06:	60e8      	str	r0, [r5, #12]
 8015c08:	6085      	str	r5, [r0, #8]
 8015c0a:	e7e1      	b.n	8015bd0 <_free_r+0xa4>
 8015c0c:	0a5d      	lsrs	r5, r3, #9
 8015c0e:	2d04      	cmp	r5, #4
 8015c10:	d812      	bhi.n	8015c38 <_free_r+0x10c>
 8015c12:	0998      	lsrs	r0, r3, #6
 8015c14:	3038      	adds	r0, #56	; 0x38
 8015c16:	00c6      	lsls	r6, r0, #3
 8015c18:	18b6      	adds	r6, r6, r2
 8015c1a:	68b5      	ldr	r5, [r6, #8]
 8015c1c:	2703      	movs	r7, #3
 8015c1e:	42ae      	cmp	r6, r5
 8015c20:	d125      	bne.n	8015c6e <_free_r+0x142>
 8015c22:	2301      	movs	r3, #1
 8015c24:	1080      	asrs	r0, r0, #2
 8015c26:	4083      	lsls	r3, r0
 8015c28:	6850      	ldr	r0, [r2, #4]
 8015c2a:	4303      	orrs	r3, r0
 8015c2c:	6053      	str	r3, [r2, #4]
 8015c2e:	60ce      	str	r6, [r1, #12]
 8015c30:	608d      	str	r5, [r1, #8]
 8015c32:	60b1      	str	r1, [r6, #8]
 8015c34:	60e9      	str	r1, [r5, #12]
 8015c36:	e7a8      	b.n	8015b8a <_free_r+0x5e>
 8015c38:	2d14      	cmp	r5, #20
 8015c3a:	d802      	bhi.n	8015c42 <_free_r+0x116>
 8015c3c:	0028      	movs	r0, r5
 8015c3e:	305b      	adds	r0, #91	; 0x5b
 8015c40:	e7e9      	b.n	8015c16 <_free_r+0xea>
 8015c42:	2d54      	cmp	r5, #84	; 0x54
 8015c44:	d802      	bhi.n	8015c4c <_free_r+0x120>
 8015c46:	0b18      	lsrs	r0, r3, #12
 8015c48:	306e      	adds	r0, #110	; 0x6e
 8015c4a:	e7e4      	b.n	8015c16 <_free_r+0xea>
 8015c4c:	20aa      	movs	r0, #170	; 0xaa
 8015c4e:	0040      	lsls	r0, r0, #1
 8015c50:	4285      	cmp	r5, r0
 8015c52:	d802      	bhi.n	8015c5a <_free_r+0x12e>
 8015c54:	0bd8      	lsrs	r0, r3, #15
 8015c56:	3077      	adds	r0, #119	; 0x77
 8015c58:	e7dd      	b.n	8015c16 <_free_r+0xea>
 8015c5a:	4e0d      	ldr	r6, [pc, #52]	; (8015c90 <_free_r+0x164>)
 8015c5c:	207e      	movs	r0, #126	; 0x7e
 8015c5e:	42b5      	cmp	r5, r6
 8015c60:	d8d9      	bhi.n	8015c16 <_free_r+0xea>
 8015c62:	0c98      	lsrs	r0, r3, #18
 8015c64:	307c      	adds	r0, #124	; 0x7c
 8015c66:	e7d6      	b.n	8015c16 <_free_r+0xea>
 8015c68:	68ad      	ldr	r5, [r5, #8]
 8015c6a:	42ae      	cmp	r6, r5
 8015c6c:	d003      	beq.n	8015c76 <_free_r+0x14a>
 8015c6e:	686a      	ldr	r2, [r5, #4]
 8015c70:	43ba      	bics	r2, r7
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d8f8      	bhi.n	8015c68 <_free_r+0x13c>
 8015c76:	68ee      	ldr	r6, [r5, #12]
 8015c78:	e7d9      	b.n	8015c2e <_free_r+0x102>
 8015c7a:	46c0      	nop			; (mov r8, r8)
 8015c7c:	20000664 	.word	0x20000664
 8015c80:	20000a70 	.word	0x20000a70
 8015c84:	20006bf4 	.word	0x20006bf4
 8015c88:	2000066c 	.word	0x2000066c
 8015c8c:	000001ff 	.word	0x000001ff
 8015c90:	00000554 	.word	0x00000554

08015c94 <rshift>:
 8015c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c96:	0004      	movs	r4, r0
 8015c98:	6905      	ldr	r5, [r0, #16]
 8015c9a:	3414      	adds	r4, #20
 8015c9c:	114b      	asrs	r3, r1, #5
 8015c9e:	0026      	movs	r6, r4
 8015ca0:	429d      	cmp	r5, r3
 8015ca2:	dd14      	ble.n	8015cce <rshift+0x3a>
 8015ca4:	221f      	movs	r2, #31
 8015ca6:	00ad      	lsls	r5, r5, #2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	4011      	ands	r1, r2
 8015cac:	1965      	adds	r5, r4, r5
 8015cae:	18e3      	adds	r3, r4, r3
 8015cb0:	0022      	movs	r2, r4
 8015cb2:	2900      	cmp	r1, #0
 8015cb4:	d01e      	beq.n	8015cf4 <rshift+0x60>
 8015cb6:	cb04      	ldmia	r3!, {r2}
 8015cb8:	2720      	movs	r7, #32
 8015cba:	40ca      	lsrs	r2, r1
 8015cbc:	46a4      	mov	ip, r4
 8015cbe:	1a7f      	subs	r7, r7, r1
 8015cc0:	4666      	mov	r6, ip
 8015cc2:	429d      	cmp	r5, r3
 8015cc4:	d80b      	bhi.n	8015cde <rshift+0x4a>
 8015cc6:	6032      	str	r2, [r6, #0]
 8015cc8:	2a00      	cmp	r2, #0
 8015cca:	d000      	beq.n	8015cce <rshift+0x3a>
 8015ccc:	3604      	adds	r6, #4
 8015cce:	1b33      	subs	r3, r6, r4
 8015cd0:	109b      	asrs	r3, r3, #2
 8015cd2:	6103      	str	r3, [r0, #16]
 8015cd4:	42a6      	cmp	r6, r4
 8015cd6:	d101      	bne.n	8015cdc <rshift+0x48>
 8015cd8:	2300      	movs	r3, #0
 8015cda:	6143      	str	r3, [r0, #20]
 8015cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cde:	681e      	ldr	r6, [r3, #0]
 8015ce0:	40be      	lsls	r6, r7
 8015ce2:	4332      	orrs	r2, r6
 8015ce4:	4666      	mov	r6, ip
 8015ce6:	c604      	stmia	r6!, {r2}
 8015ce8:	cb04      	ldmia	r3!, {r2}
 8015cea:	46b4      	mov	ip, r6
 8015cec:	40ca      	lsrs	r2, r1
 8015cee:	e7e7      	b.n	8015cc0 <rshift+0x2c>
 8015cf0:	cb02      	ldmia	r3!, {r1}
 8015cf2:	c202      	stmia	r2!, {r1}
 8015cf4:	0016      	movs	r6, r2
 8015cf6:	429d      	cmp	r5, r3
 8015cf8:	d8fa      	bhi.n	8015cf0 <rshift+0x5c>
 8015cfa:	e7e8      	b.n	8015cce <rshift+0x3a>

08015cfc <__hexdig_fun>:
 8015cfc:	0003      	movs	r3, r0
 8015cfe:	3b30      	subs	r3, #48	; 0x30
 8015d00:	2b09      	cmp	r3, #9
 8015d02:	d803      	bhi.n	8015d0c <__hexdig_fun+0x10>
 8015d04:	3820      	subs	r0, #32
 8015d06:	b2c3      	uxtb	r3, r0
 8015d08:	0018      	movs	r0, r3
 8015d0a:	4770      	bx	lr
 8015d0c:	0003      	movs	r3, r0
 8015d0e:	3b61      	subs	r3, #97	; 0x61
 8015d10:	2b05      	cmp	r3, #5
 8015d12:	d801      	bhi.n	8015d18 <__hexdig_fun+0x1c>
 8015d14:	3847      	subs	r0, #71	; 0x47
 8015d16:	e7f6      	b.n	8015d06 <__hexdig_fun+0xa>
 8015d18:	0002      	movs	r2, r0
 8015d1a:	3a41      	subs	r2, #65	; 0x41
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	2a05      	cmp	r2, #5
 8015d20:	d8f2      	bhi.n	8015d08 <__hexdig_fun+0xc>
 8015d22:	3827      	subs	r0, #39	; 0x27
 8015d24:	e7ef      	b.n	8015d06 <__hexdig_fun+0xa>

08015d26 <__gethex>:
 8015d26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d28:	b08d      	sub	sp, #52	; 0x34
 8015d2a:	9005      	str	r0, [sp, #20]
 8015d2c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015d2e:	9109      	str	r1, [sp, #36]	; 0x24
 8015d30:	9202      	str	r2, [sp, #8]
 8015d32:	930a      	str	r3, [sp, #40]	; 0x28
 8015d34:	f000 fadf 	bl	80162f6 <__localeconv_l>
 8015d38:	6803      	ldr	r3, [r0, #0]
 8015d3a:	0018      	movs	r0, r3
 8015d3c:	9307      	str	r3, [sp, #28]
 8015d3e:	f7ea f9eb 	bl	8000118 <strlen>
 8015d42:	2202      	movs	r2, #2
 8015d44:	9b07      	ldr	r3, [sp, #28]
 8015d46:	4252      	negs	r2, r2
 8015d48:	181b      	adds	r3, r3, r0
 8015d4a:	3b01      	subs	r3, #1
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	9004      	str	r0, [sp, #16]
 8015d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d54:	6819      	ldr	r1, [r3, #0]
 8015d56:	1c8b      	adds	r3, r1, #2
 8015d58:	1a52      	subs	r2, r2, r1
 8015d5a:	18d1      	adds	r1, r2, r3
 8015d5c:	9301      	str	r3, [sp, #4]
 8015d5e:	9108      	str	r1, [sp, #32]
 8015d60:	9901      	ldr	r1, [sp, #4]
 8015d62:	3301      	adds	r3, #1
 8015d64:	7808      	ldrb	r0, [r1, #0]
 8015d66:	2830      	cmp	r0, #48	; 0x30
 8015d68:	d0f7      	beq.n	8015d5a <__gethex+0x34>
 8015d6a:	f7ff ffc7 	bl	8015cfc <__hexdig_fun>
 8015d6e:	1e07      	subs	r7, r0, #0
 8015d70:	d000      	beq.n	8015d74 <__gethex+0x4e>
 8015d72:	e06f      	b.n	8015e54 <__gethex+0x12e>
 8015d74:	9a04      	ldr	r2, [sp, #16]
 8015d76:	9907      	ldr	r1, [sp, #28]
 8015d78:	9801      	ldr	r0, [sp, #4]
 8015d7a:	f7fc fe4b 	bl	8012a14 <strncmp>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d000      	beq.n	8015d84 <__gethex+0x5e>
 8015d82:	e06d      	b.n	8015e60 <__gethex+0x13a>
 8015d84:	9b01      	ldr	r3, [sp, #4]
 8015d86:	9a04      	ldr	r2, [sp, #16]
 8015d88:	189c      	adds	r4, r3, r2
 8015d8a:	7820      	ldrb	r0, [r4, #0]
 8015d8c:	f7ff ffb6 	bl	8015cfc <__hexdig_fun>
 8015d90:	2800      	cmp	r0, #0
 8015d92:	d069      	beq.n	8015e68 <__gethex+0x142>
 8015d94:	9401      	str	r4, [sp, #4]
 8015d96:	9b01      	ldr	r3, [sp, #4]
 8015d98:	7818      	ldrb	r0, [r3, #0]
 8015d9a:	2830      	cmp	r0, #48	; 0x30
 8015d9c:	d009      	beq.n	8015db2 <__gethex+0x8c>
 8015d9e:	f7ff ffad 	bl	8015cfc <__hexdig_fun>
 8015da2:	4243      	negs	r3, r0
 8015da4:	4143      	adcs	r3, r0
 8015da6:	9303      	str	r3, [sp, #12]
 8015da8:	2301      	movs	r3, #1
 8015daa:	0026      	movs	r6, r4
 8015dac:	9308      	str	r3, [sp, #32]
 8015dae:	9c01      	ldr	r4, [sp, #4]
 8015db0:	e004      	b.n	8015dbc <__gethex+0x96>
 8015db2:	9b01      	ldr	r3, [sp, #4]
 8015db4:	3301      	adds	r3, #1
 8015db6:	9301      	str	r3, [sp, #4]
 8015db8:	e7ed      	b.n	8015d96 <__gethex+0x70>
 8015dba:	3401      	adds	r4, #1
 8015dbc:	7820      	ldrb	r0, [r4, #0]
 8015dbe:	f7ff ff9d 	bl	8015cfc <__hexdig_fun>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d1f9      	bne.n	8015dba <__gethex+0x94>
 8015dc6:	9a04      	ldr	r2, [sp, #16]
 8015dc8:	9907      	ldr	r1, [sp, #28]
 8015dca:	0020      	movs	r0, r4
 8015dcc:	f7fc fe22 	bl	8012a14 <strncmp>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d109      	bne.n	8015de8 <__gethex+0xc2>
 8015dd4:	2e00      	cmp	r6, #0
 8015dd6:	d10a      	bne.n	8015dee <__gethex+0xc8>
 8015dd8:	9b04      	ldr	r3, [sp, #16]
 8015dda:	18e4      	adds	r4, r4, r3
 8015ddc:	0026      	movs	r6, r4
 8015dde:	7820      	ldrb	r0, [r4, #0]
 8015de0:	f7ff ff8c 	bl	8015cfc <__hexdig_fun>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d139      	bne.n	8015e5c <__gethex+0x136>
 8015de8:	2700      	movs	r7, #0
 8015dea:	42be      	cmp	r6, r7
 8015dec:	d001      	beq.n	8015df2 <__gethex+0xcc>
 8015dee:	1b37      	subs	r7, r6, r4
 8015df0:	00bf      	lsls	r7, r7, #2
 8015df2:	7823      	ldrb	r3, [r4, #0]
 8015df4:	2b50      	cmp	r3, #80	; 0x50
 8015df6:	d001      	beq.n	8015dfc <__gethex+0xd6>
 8015df8:	2b70      	cmp	r3, #112	; 0x70
 8015dfa:	d142      	bne.n	8015e82 <__gethex+0x15c>
 8015dfc:	7863      	ldrb	r3, [r4, #1]
 8015dfe:	2b2b      	cmp	r3, #43	; 0x2b
 8015e00:	d034      	beq.n	8015e6c <__gethex+0x146>
 8015e02:	2b2d      	cmp	r3, #45	; 0x2d
 8015e04:	d036      	beq.n	8015e74 <__gethex+0x14e>
 8015e06:	2300      	movs	r3, #0
 8015e08:	1c66      	adds	r6, r4, #1
 8015e0a:	9306      	str	r3, [sp, #24]
 8015e0c:	7830      	ldrb	r0, [r6, #0]
 8015e0e:	f7ff ff75 	bl	8015cfc <__hexdig_fun>
 8015e12:	1e43      	subs	r3, r0, #1
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	2b18      	cmp	r3, #24
 8015e18:	d833      	bhi.n	8015e82 <__gethex+0x15c>
 8015e1a:	3810      	subs	r0, #16
 8015e1c:	0005      	movs	r5, r0
 8015e1e:	3601      	adds	r6, #1
 8015e20:	7830      	ldrb	r0, [r6, #0]
 8015e22:	f7ff ff6b 	bl	8015cfc <__hexdig_fun>
 8015e26:	1e43      	subs	r3, r0, #1
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	2b18      	cmp	r3, #24
 8015e2c:	d924      	bls.n	8015e78 <__gethex+0x152>
 8015e2e:	9b06      	ldr	r3, [sp, #24]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d000      	beq.n	8015e36 <__gethex+0x110>
 8015e34:	426d      	negs	r5, r5
 8015e36:	197f      	adds	r7, r7, r5
 8015e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e3a:	601e      	str	r6, [r3, #0]
 8015e3c:	9b03      	ldr	r3, [sp, #12]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d021      	beq.n	8015e86 <__gethex+0x160>
 8015e42:	9b08      	ldr	r3, [sp, #32]
 8015e44:	2606      	movs	r6, #6
 8015e46:	425a      	negs	r2, r3
 8015e48:	4153      	adcs	r3, r2
 8015e4a:	425b      	negs	r3, r3
 8015e4c:	401e      	ands	r6, r3
 8015e4e:	0030      	movs	r0, r6
 8015e50:	b00d      	add	sp, #52	; 0x34
 8015e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e54:	2300      	movs	r3, #0
 8015e56:	9303      	str	r3, [sp, #12]
 8015e58:	001e      	movs	r6, r3
 8015e5a:	e7a8      	b.n	8015dae <__gethex+0x88>
 8015e5c:	3401      	adds	r4, #1
 8015e5e:	e7be      	b.n	8015dde <__gethex+0xb8>
 8015e60:	9c01      	ldr	r4, [sp, #4]
 8015e62:	2301      	movs	r3, #1
 8015e64:	9303      	str	r3, [sp, #12]
 8015e66:	e7c4      	b.n	8015df2 <__gethex+0xcc>
 8015e68:	0007      	movs	r7, r0
 8015e6a:	e7fa      	b.n	8015e62 <__gethex+0x13c>
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	9306      	str	r3, [sp, #24]
 8015e70:	1ca6      	adds	r6, r4, #2
 8015e72:	e7cb      	b.n	8015e0c <__gethex+0xe6>
 8015e74:	2301      	movs	r3, #1
 8015e76:	e7fa      	b.n	8015e6e <__gethex+0x148>
 8015e78:	230a      	movs	r3, #10
 8015e7a:	435d      	muls	r5, r3
 8015e7c:	182d      	adds	r5, r5, r0
 8015e7e:	3d10      	subs	r5, #16
 8015e80:	e7cd      	b.n	8015e1e <__gethex+0xf8>
 8015e82:	0026      	movs	r6, r4
 8015e84:	e7d8      	b.n	8015e38 <__gethex+0x112>
 8015e86:	9b01      	ldr	r3, [sp, #4]
 8015e88:	9903      	ldr	r1, [sp, #12]
 8015e8a:	1ae3      	subs	r3, r4, r3
 8015e8c:	3b01      	subs	r3, #1
 8015e8e:	2b07      	cmp	r3, #7
 8015e90:	dc47      	bgt.n	8015f22 <__gethex+0x1fc>
 8015e92:	9805      	ldr	r0, [sp, #20]
 8015e94:	f000 fa5e 	bl	8016354 <_Balloc>
 8015e98:	0003      	movs	r3, r0
 8015e9a:	3314      	adds	r3, #20
 8015e9c:	9303      	str	r3, [sp, #12]
 8015e9e:	9308      	str	r3, [sp, #32]
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	0005      	movs	r5, r0
 8015ea4:	001e      	movs	r6, r3
 8015ea6:	9306      	str	r3, [sp, #24]
 8015ea8:	9b01      	ldr	r3, [sp, #4]
 8015eaa:	42a3      	cmp	r3, r4
 8015eac:	d33c      	bcc.n	8015f28 <__gethex+0x202>
 8015eae:	9c08      	ldr	r4, [sp, #32]
 8015eb0:	9b03      	ldr	r3, [sp, #12]
 8015eb2:	c440      	stmia	r4!, {r6}
 8015eb4:	1ae4      	subs	r4, r4, r3
 8015eb6:	10a4      	asrs	r4, r4, #2
 8015eb8:	612c      	str	r4, [r5, #16]
 8015eba:	0030      	movs	r0, r6
 8015ebc:	f000 faf8 	bl	80164b0 <__hi0bits>
 8015ec0:	9b02      	ldr	r3, [sp, #8]
 8015ec2:	0164      	lsls	r4, r4, #5
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	1a26      	subs	r6, r4, r0
 8015ec8:	9301      	str	r3, [sp, #4]
 8015eca:	429e      	cmp	r6, r3
 8015ecc:	dd5f      	ble.n	8015f8e <__gethex+0x268>
 8015ece:	1af6      	subs	r6, r6, r3
 8015ed0:	0031      	movs	r1, r6
 8015ed2:	0028      	movs	r0, r5
 8015ed4:	f000 fde3 	bl	8016a9e <__any_on>
 8015ed8:	1e04      	subs	r4, r0, #0
 8015eda:	d00f      	beq.n	8015efc <__gethex+0x1d6>
 8015edc:	2401      	movs	r4, #1
 8015ede:	211f      	movs	r1, #31
 8015ee0:	0020      	movs	r0, r4
 8015ee2:	1e73      	subs	r3, r6, #1
 8015ee4:	4019      	ands	r1, r3
 8015ee6:	4088      	lsls	r0, r1
 8015ee8:	0001      	movs	r1, r0
 8015eea:	115a      	asrs	r2, r3, #5
 8015eec:	9803      	ldr	r0, [sp, #12]
 8015eee:	0092      	lsls	r2, r2, #2
 8015ef0:	5812      	ldr	r2, [r2, r0]
 8015ef2:	420a      	tst	r2, r1
 8015ef4:	d002      	beq.n	8015efc <__gethex+0x1d6>
 8015ef6:	42a3      	cmp	r3, r4
 8015ef8:	dc41      	bgt.n	8015f7e <__gethex+0x258>
 8015efa:	2402      	movs	r4, #2
 8015efc:	0031      	movs	r1, r6
 8015efe:	0028      	movs	r0, r5
 8015f00:	f7ff fec8 	bl	8015c94 <rshift>
 8015f04:	19bf      	adds	r7, r7, r6
 8015f06:	9b02      	ldr	r3, [sp, #8]
 8015f08:	689b      	ldr	r3, [r3, #8]
 8015f0a:	9304      	str	r3, [sp, #16]
 8015f0c:	42bb      	cmp	r3, r7
 8015f0e:	da4e      	bge.n	8015fae <__gethex+0x288>
 8015f10:	0029      	movs	r1, r5
 8015f12:	9805      	ldr	r0, [sp, #20]
 8015f14:	f000 fa46 	bl	80163a4 <_Bfree>
 8015f18:	2300      	movs	r3, #0
 8015f1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f1c:	26a3      	movs	r6, #163	; 0xa3
 8015f1e:	6013      	str	r3, [r2, #0]
 8015f20:	e795      	b.n	8015e4e <__gethex+0x128>
 8015f22:	3101      	adds	r1, #1
 8015f24:	105b      	asrs	r3, r3, #1
 8015f26:	e7b2      	b.n	8015e8e <__gethex+0x168>
 8015f28:	1e63      	subs	r3, r4, #1
 8015f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8015f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	4293      	cmp	r3, r2
 8015f32:	d015      	beq.n	8015f60 <__gethex+0x23a>
 8015f34:	9b06      	ldr	r3, [sp, #24]
 8015f36:	2b20      	cmp	r3, #32
 8015f38:	d105      	bne.n	8015f46 <__gethex+0x220>
 8015f3a:	9b08      	ldr	r3, [sp, #32]
 8015f3c:	601e      	str	r6, [r3, #0]
 8015f3e:	2600      	movs	r6, #0
 8015f40:	3304      	adds	r3, #4
 8015f42:	9308      	str	r3, [sp, #32]
 8015f44:	9606      	str	r6, [sp, #24]
 8015f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f48:	7818      	ldrb	r0, [r3, #0]
 8015f4a:	f7ff fed7 	bl	8015cfc <__hexdig_fun>
 8015f4e:	230f      	movs	r3, #15
 8015f50:	4018      	ands	r0, r3
 8015f52:	9b06      	ldr	r3, [sp, #24]
 8015f54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015f56:	4098      	lsls	r0, r3
 8015f58:	3304      	adds	r3, #4
 8015f5a:	4306      	orrs	r6, r0
 8015f5c:	9306      	str	r3, [sp, #24]
 8015f5e:	e7a3      	b.n	8015ea8 <__gethex+0x182>
 8015f60:	2301      	movs	r3, #1
 8015f62:	9a04      	ldr	r2, [sp, #16]
 8015f64:	1a9c      	subs	r4, r3, r2
 8015f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f68:	191c      	adds	r4, r3, r4
 8015f6a:	9b01      	ldr	r3, [sp, #4]
 8015f6c:	429c      	cmp	r4, r3
 8015f6e:	d3e1      	bcc.n	8015f34 <__gethex+0x20e>
 8015f70:	9907      	ldr	r1, [sp, #28]
 8015f72:	0020      	movs	r0, r4
 8015f74:	f7fc fd4e 	bl	8012a14 <strncmp>
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d1db      	bne.n	8015f34 <__gethex+0x20e>
 8015f7c:	e794      	b.n	8015ea8 <__gethex+0x182>
 8015f7e:	1eb1      	subs	r1, r6, #2
 8015f80:	0028      	movs	r0, r5
 8015f82:	f000 fd8c 	bl	8016a9e <__any_on>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d0b7      	beq.n	8015efa <__gethex+0x1d4>
 8015f8a:	2403      	movs	r4, #3
 8015f8c:	e7b6      	b.n	8015efc <__gethex+0x1d6>
 8015f8e:	9b01      	ldr	r3, [sp, #4]
 8015f90:	2400      	movs	r4, #0
 8015f92:	429e      	cmp	r6, r3
 8015f94:	dab7      	bge.n	8015f06 <__gethex+0x1e0>
 8015f96:	1b9e      	subs	r6, r3, r6
 8015f98:	0029      	movs	r1, r5
 8015f9a:	0032      	movs	r2, r6
 8015f9c:	9805      	ldr	r0, [sp, #20]
 8015f9e:	f000 fbab 	bl	80166f8 <__lshift>
 8015fa2:	0003      	movs	r3, r0
 8015fa4:	3314      	adds	r3, #20
 8015fa6:	0005      	movs	r5, r0
 8015fa8:	1bbf      	subs	r7, r7, r6
 8015faa:	9303      	str	r3, [sp, #12]
 8015fac:	e7ab      	b.n	8015f06 <__gethex+0x1e0>
 8015fae:	9b02      	ldr	r3, [sp, #8]
 8015fb0:	685e      	ldr	r6, [r3, #4]
 8015fb2:	42be      	cmp	r6, r7
 8015fb4:	dd6b      	ble.n	801608e <__gethex+0x368>
 8015fb6:	9b01      	ldr	r3, [sp, #4]
 8015fb8:	1bf6      	subs	r6, r6, r7
 8015fba:	42b3      	cmp	r3, r6
 8015fbc:	dc32      	bgt.n	8016024 <__gethex+0x2fe>
 8015fbe:	9b02      	ldr	r3, [sp, #8]
 8015fc0:	68db      	ldr	r3, [r3, #12]
 8015fc2:	2b02      	cmp	r3, #2
 8015fc4:	d026      	beq.n	8016014 <__gethex+0x2ee>
 8015fc6:	2b03      	cmp	r3, #3
 8015fc8:	d028      	beq.n	801601c <__gethex+0x2f6>
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	d119      	bne.n	8016002 <__gethex+0x2dc>
 8015fce:	9b01      	ldr	r3, [sp, #4]
 8015fd0:	42b3      	cmp	r3, r6
 8015fd2:	d116      	bne.n	8016002 <__gethex+0x2dc>
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	dc0d      	bgt.n	8015ff4 <__gethex+0x2ce>
 8015fd8:	9b02      	ldr	r3, [sp, #8]
 8015fda:	2662      	movs	r6, #98	; 0x62
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	9301      	str	r3, [sp, #4]
 8015fe0:	9a01      	ldr	r2, [sp, #4]
 8015fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fe4:	601a      	str	r2, [r3, #0]
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	9a03      	ldr	r2, [sp, #12]
 8015fea:	612b      	str	r3, [r5, #16]
 8015fec:	6013      	str	r3, [r2, #0]
 8015fee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ff0:	601d      	str	r5, [r3, #0]
 8015ff2:	e72c      	b.n	8015e4e <__gethex+0x128>
 8015ff4:	9901      	ldr	r1, [sp, #4]
 8015ff6:	0028      	movs	r0, r5
 8015ff8:	3901      	subs	r1, #1
 8015ffa:	f000 fd50 	bl	8016a9e <__any_on>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	d1ea      	bne.n	8015fd8 <__gethex+0x2b2>
 8016002:	0029      	movs	r1, r5
 8016004:	9805      	ldr	r0, [sp, #20]
 8016006:	f000 f9cd 	bl	80163a4 <_Bfree>
 801600a:	2300      	movs	r3, #0
 801600c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801600e:	2650      	movs	r6, #80	; 0x50
 8016010:	6013      	str	r3, [r2, #0]
 8016012:	e71c      	b.n	8015e4e <__gethex+0x128>
 8016014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016016:	2b00      	cmp	r3, #0
 8016018:	d0de      	beq.n	8015fd8 <__gethex+0x2b2>
 801601a:	e7f2      	b.n	8016002 <__gethex+0x2dc>
 801601c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801601e:	2b00      	cmp	r3, #0
 8016020:	d1da      	bne.n	8015fd8 <__gethex+0x2b2>
 8016022:	e7ee      	b.n	8016002 <__gethex+0x2dc>
 8016024:	1e77      	subs	r7, r6, #1
 8016026:	2c00      	cmp	r4, #0
 8016028:	d12f      	bne.n	801608a <__gethex+0x364>
 801602a:	2f00      	cmp	r7, #0
 801602c:	d004      	beq.n	8016038 <__gethex+0x312>
 801602e:	0039      	movs	r1, r7
 8016030:	0028      	movs	r0, r5
 8016032:	f000 fd34 	bl	8016a9e <__any_on>
 8016036:	0004      	movs	r4, r0
 8016038:	231f      	movs	r3, #31
 801603a:	117a      	asrs	r2, r7, #5
 801603c:	401f      	ands	r7, r3
 801603e:	3b1e      	subs	r3, #30
 8016040:	40bb      	lsls	r3, r7
 8016042:	9903      	ldr	r1, [sp, #12]
 8016044:	0092      	lsls	r2, r2, #2
 8016046:	5852      	ldr	r2, [r2, r1]
 8016048:	421a      	tst	r2, r3
 801604a:	d001      	beq.n	8016050 <__gethex+0x32a>
 801604c:	2302      	movs	r3, #2
 801604e:	431c      	orrs	r4, r3
 8016050:	9b01      	ldr	r3, [sp, #4]
 8016052:	0031      	movs	r1, r6
 8016054:	1b9b      	subs	r3, r3, r6
 8016056:	2602      	movs	r6, #2
 8016058:	0028      	movs	r0, r5
 801605a:	9301      	str	r3, [sp, #4]
 801605c:	f7ff fe1a 	bl	8015c94 <rshift>
 8016060:	9b02      	ldr	r3, [sp, #8]
 8016062:	685f      	ldr	r7, [r3, #4]
 8016064:	2c00      	cmp	r4, #0
 8016066:	d040      	beq.n	80160ea <__gethex+0x3c4>
 8016068:	9b02      	ldr	r3, [sp, #8]
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	2b02      	cmp	r3, #2
 801606e:	d010      	beq.n	8016092 <__gethex+0x36c>
 8016070:	2b03      	cmp	r3, #3
 8016072:	d012      	beq.n	801609a <__gethex+0x374>
 8016074:	2b01      	cmp	r3, #1
 8016076:	d106      	bne.n	8016086 <__gethex+0x360>
 8016078:	07a2      	lsls	r2, r4, #30
 801607a:	d504      	bpl.n	8016086 <__gethex+0x360>
 801607c:	9a03      	ldr	r2, [sp, #12]
 801607e:	6812      	ldr	r2, [r2, #0]
 8016080:	4314      	orrs	r4, r2
 8016082:	421c      	tst	r4, r3
 8016084:	d10c      	bne.n	80160a0 <__gethex+0x37a>
 8016086:	2310      	movs	r3, #16
 8016088:	e02e      	b.n	80160e8 <__gethex+0x3c2>
 801608a:	2401      	movs	r4, #1
 801608c:	e7d4      	b.n	8016038 <__gethex+0x312>
 801608e:	2601      	movs	r6, #1
 8016090:	e7e8      	b.n	8016064 <__gethex+0x33e>
 8016092:	2301      	movs	r3, #1
 8016094:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016096:	1a9b      	subs	r3, r3, r2
 8016098:	9313      	str	r3, [sp, #76]	; 0x4c
 801609a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801609c:	2b00      	cmp	r3, #0
 801609e:	d0f2      	beq.n	8016086 <__gethex+0x360>
 80160a0:	692c      	ldr	r4, [r5, #16]
 80160a2:	00a3      	lsls	r3, r4, #2
 80160a4:	9304      	str	r3, [sp, #16]
 80160a6:	002b      	movs	r3, r5
 80160a8:	00a2      	lsls	r2, r4, #2
 80160aa:	3314      	adds	r3, #20
 80160ac:	1899      	adds	r1, r3, r2
 80160ae:	2200      	movs	r2, #0
 80160b0:	4694      	mov	ip, r2
 80160b2:	681a      	ldr	r2, [r3, #0]
 80160b4:	1c50      	adds	r0, r2, #1
 80160b6:	d01d      	beq.n	80160f4 <__gethex+0x3ce>
 80160b8:	3201      	adds	r2, #1
 80160ba:	601a      	str	r2, [r3, #0]
 80160bc:	002b      	movs	r3, r5
 80160be:	3314      	adds	r3, #20
 80160c0:	2e02      	cmp	r6, #2
 80160c2:	d13a      	bne.n	801613a <__gethex+0x414>
 80160c4:	9a02      	ldr	r2, [sp, #8]
 80160c6:	9901      	ldr	r1, [sp, #4]
 80160c8:	6812      	ldr	r2, [r2, #0]
 80160ca:	3a01      	subs	r2, #1
 80160cc:	428a      	cmp	r2, r1
 80160ce:	d10a      	bne.n	80160e6 <__gethex+0x3c0>
 80160d0:	114a      	asrs	r2, r1, #5
 80160d2:	211f      	movs	r1, #31
 80160d4:	9801      	ldr	r0, [sp, #4]
 80160d6:	0092      	lsls	r2, r2, #2
 80160d8:	4001      	ands	r1, r0
 80160da:	2001      	movs	r0, #1
 80160dc:	0004      	movs	r4, r0
 80160de:	408c      	lsls	r4, r1
 80160e0:	58d3      	ldr	r3, [r2, r3]
 80160e2:	4223      	tst	r3, r4
 80160e4:	d148      	bne.n	8016178 <__gethex+0x452>
 80160e6:	2320      	movs	r3, #32
 80160e8:	431e      	orrs	r6, r3
 80160ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80160ec:	601d      	str	r5, [r3, #0]
 80160ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160f0:	601f      	str	r7, [r3, #0]
 80160f2:	e6ac      	b.n	8015e4e <__gethex+0x128>
 80160f4:	4662      	mov	r2, ip
 80160f6:	c304      	stmia	r3!, {r2}
 80160f8:	4299      	cmp	r1, r3
 80160fa:	d8da      	bhi.n	80160b2 <__gethex+0x38c>
 80160fc:	68ab      	ldr	r3, [r5, #8]
 80160fe:	429c      	cmp	r4, r3
 8016100:	db12      	blt.n	8016128 <__gethex+0x402>
 8016102:	686b      	ldr	r3, [r5, #4]
 8016104:	9805      	ldr	r0, [sp, #20]
 8016106:	1c59      	adds	r1, r3, #1
 8016108:	f000 f924 	bl	8016354 <_Balloc>
 801610c:	0029      	movs	r1, r5
 801610e:	692b      	ldr	r3, [r5, #16]
 8016110:	9003      	str	r0, [sp, #12]
 8016112:	1c9a      	adds	r2, r3, #2
 8016114:	0092      	lsls	r2, r2, #2
 8016116:	310c      	adds	r1, #12
 8016118:	300c      	adds	r0, #12
 801611a:	f7fc fa34 	bl	8012586 <memcpy>
 801611e:	0029      	movs	r1, r5
 8016120:	9805      	ldr	r0, [sp, #20]
 8016122:	f000 f93f 	bl	80163a4 <_Bfree>
 8016126:	9d03      	ldr	r5, [sp, #12]
 8016128:	692b      	ldr	r3, [r5, #16]
 801612a:	1c5a      	adds	r2, r3, #1
 801612c:	612a      	str	r2, [r5, #16]
 801612e:	2201      	movs	r2, #1
 8016130:	3304      	adds	r3, #4
 8016132:	009b      	lsls	r3, r3, #2
 8016134:	18eb      	adds	r3, r5, r3
 8016136:	605a      	str	r2, [r3, #4]
 8016138:	e7c0      	b.n	80160bc <__gethex+0x396>
 801613a:	692a      	ldr	r2, [r5, #16]
 801613c:	42a2      	cmp	r2, r4
 801613e:	dd0a      	ble.n	8016156 <__gethex+0x430>
 8016140:	2101      	movs	r1, #1
 8016142:	0028      	movs	r0, r5
 8016144:	f7ff fda6 	bl	8015c94 <rshift>
 8016148:	9b02      	ldr	r3, [sp, #8]
 801614a:	3701      	adds	r7, #1
 801614c:	689b      	ldr	r3, [r3, #8]
 801614e:	2601      	movs	r6, #1
 8016150:	42bb      	cmp	r3, r7
 8016152:	dac8      	bge.n	80160e6 <__gethex+0x3c0>
 8016154:	e6dc      	b.n	8015f10 <__gethex+0x1ea>
 8016156:	241f      	movs	r4, #31
 8016158:	9a01      	ldr	r2, [sp, #4]
 801615a:	2601      	movs	r6, #1
 801615c:	4022      	ands	r2, r4
 801615e:	1e14      	subs	r4, r2, #0
 8016160:	d0c1      	beq.n	80160e6 <__gethex+0x3c0>
 8016162:	9a04      	ldr	r2, [sp, #16]
 8016164:	189b      	adds	r3, r3, r2
 8016166:	3b04      	subs	r3, #4
 8016168:	6818      	ldr	r0, [r3, #0]
 801616a:	f000 f9a1 	bl	80164b0 <__hi0bits>
 801616e:	2120      	movs	r1, #32
 8016170:	1b0c      	subs	r4, r1, r4
 8016172:	42a0      	cmp	r0, r4
 8016174:	dbe4      	blt.n	8016140 <__gethex+0x41a>
 8016176:	e7b6      	b.n	80160e6 <__gethex+0x3c0>
 8016178:	0006      	movs	r6, r0
 801617a:	e7b4      	b.n	80160e6 <__gethex+0x3c0>

0801617c <L_shift>:
 801617c:	2308      	movs	r3, #8
 801617e:	b570      	push	{r4, r5, r6, lr}
 8016180:	2520      	movs	r5, #32
 8016182:	1a9a      	subs	r2, r3, r2
 8016184:	0092      	lsls	r2, r2, #2
 8016186:	1aad      	subs	r5, r5, r2
 8016188:	6843      	ldr	r3, [r0, #4]
 801618a:	6806      	ldr	r6, [r0, #0]
 801618c:	001c      	movs	r4, r3
 801618e:	40ac      	lsls	r4, r5
 8016190:	40d3      	lsrs	r3, r2
 8016192:	4334      	orrs	r4, r6
 8016194:	6004      	str	r4, [r0, #0]
 8016196:	6043      	str	r3, [r0, #4]
 8016198:	3004      	adds	r0, #4
 801619a:	4288      	cmp	r0, r1
 801619c:	d3f4      	bcc.n	8016188 <L_shift+0xc>
 801619e:	bd70      	pop	{r4, r5, r6, pc}

080161a0 <__match>:
 80161a0:	b530      	push	{r4, r5, lr}
 80161a2:	6803      	ldr	r3, [r0, #0]
 80161a4:	780c      	ldrb	r4, [r1, #0]
 80161a6:	3301      	adds	r3, #1
 80161a8:	2c00      	cmp	r4, #0
 80161aa:	d102      	bne.n	80161b2 <__match+0x12>
 80161ac:	6003      	str	r3, [r0, #0]
 80161ae:	2001      	movs	r0, #1
 80161b0:	bd30      	pop	{r4, r5, pc}
 80161b2:	781a      	ldrb	r2, [r3, #0]
 80161b4:	0015      	movs	r5, r2
 80161b6:	3d41      	subs	r5, #65	; 0x41
 80161b8:	2d19      	cmp	r5, #25
 80161ba:	d800      	bhi.n	80161be <__match+0x1e>
 80161bc:	3220      	adds	r2, #32
 80161be:	3101      	adds	r1, #1
 80161c0:	42a2      	cmp	r2, r4
 80161c2:	d0ef      	beq.n	80161a4 <__match+0x4>
 80161c4:	2000      	movs	r0, #0
 80161c6:	e7f3      	b.n	80161b0 <__match+0x10>

080161c8 <__hexnan>:
 80161c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ca:	b08b      	sub	sp, #44	; 0x2c
 80161cc:	9201      	str	r2, [sp, #4]
 80161ce:	680a      	ldr	r2, [r1, #0]
 80161d0:	9901      	ldr	r1, [sp, #4]
 80161d2:	1153      	asrs	r3, r2, #5
 80161d4:	009b      	lsls	r3, r3, #2
 80161d6:	18cb      	adds	r3, r1, r3
 80161d8:	9304      	str	r3, [sp, #16]
 80161da:	231f      	movs	r3, #31
 80161dc:	401a      	ands	r2, r3
 80161de:	9008      	str	r0, [sp, #32]
 80161e0:	9206      	str	r2, [sp, #24]
 80161e2:	d002      	beq.n	80161ea <__hexnan+0x22>
 80161e4:	9b04      	ldr	r3, [sp, #16]
 80161e6:	3304      	adds	r3, #4
 80161e8:	9304      	str	r3, [sp, #16]
 80161ea:	9b04      	ldr	r3, [sp, #16]
 80161ec:	2500      	movs	r5, #0
 80161ee:	1f1e      	subs	r6, r3, #4
 80161f0:	0037      	movs	r7, r6
 80161f2:	0034      	movs	r4, r6
 80161f4:	9b08      	ldr	r3, [sp, #32]
 80161f6:	6035      	str	r5, [r6, #0]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	9507      	str	r5, [sp, #28]
 80161fc:	9305      	str	r3, [sp, #20]
 80161fe:	9502      	str	r5, [sp, #8]
 8016200:	9b05      	ldr	r3, [sp, #20]
 8016202:	3301      	adds	r3, #1
 8016204:	9309      	str	r3, [sp, #36]	; 0x24
 8016206:	9b05      	ldr	r3, [sp, #20]
 8016208:	785b      	ldrb	r3, [r3, #1]
 801620a:	9303      	str	r3, [sp, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d028      	beq.n	8016262 <__hexnan+0x9a>
 8016210:	9803      	ldr	r0, [sp, #12]
 8016212:	f7ff fd73 	bl	8015cfc <__hexdig_fun>
 8016216:	2800      	cmp	r0, #0
 8016218:	d145      	bne.n	80162a6 <__hexnan+0xde>
 801621a:	9b03      	ldr	r3, [sp, #12]
 801621c:	2b20      	cmp	r3, #32
 801621e:	d819      	bhi.n	8016254 <__hexnan+0x8c>
 8016220:	9b02      	ldr	r3, [sp, #8]
 8016222:	9a07      	ldr	r2, [sp, #28]
 8016224:	4293      	cmp	r3, r2
 8016226:	dd12      	ble.n	801624e <__hexnan+0x86>
 8016228:	42bc      	cmp	r4, r7
 801622a:	d206      	bcs.n	801623a <__hexnan+0x72>
 801622c:	2d07      	cmp	r5, #7
 801622e:	dc04      	bgt.n	801623a <__hexnan+0x72>
 8016230:	002a      	movs	r2, r5
 8016232:	0039      	movs	r1, r7
 8016234:	0020      	movs	r0, r4
 8016236:	f7ff ffa1 	bl	801617c <L_shift>
 801623a:	9b01      	ldr	r3, [sp, #4]
 801623c:	2508      	movs	r5, #8
 801623e:	429c      	cmp	r4, r3
 8016240:	d905      	bls.n	801624e <__hexnan+0x86>
 8016242:	1f27      	subs	r7, r4, #4
 8016244:	2500      	movs	r5, #0
 8016246:	003c      	movs	r4, r7
 8016248:	9b02      	ldr	r3, [sp, #8]
 801624a:	603d      	str	r5, [r7, #0]
 801624c:	9307      	str	r3, [sp, #28]
 801624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016250:	9305      	str	r3, [sp, #20]
 8016252:	e7d5      	b.n	8016200 <__hexnan+0x38>
 8016254:	9b03      	ldr	r3, [sp, #12]
 8016256:	2b29      	cmp	r3, #41	; 0x29
 8016258:	d14a      	bne.n	80162f0 <__hexnan+0x128>
 801625a:	9b05      	ldr	r3, [sp, #20]
 801625c:	9a08      	ldr	r2, [sp, #32]
 801625e:	3302      	adds	r3, #2
 8016260:	6013      	str	r3, [r2, #0]
 8016262:	9b02      	ldr	r3, [sp, #8]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d043      	beq.n	80162f0 <__hexnan+0x128>
 8016268:	42bc      	cmp	r4, r7
 801626a:	d206      	bcs.n	801627a <__hexnan+0xb2>
 801626c:	2d07      	cmp	r5, #7
 801626e:	dc04      	bgt.n	801627a <__hexnan+0xb2>
 8016270:	002a      	movs	r2, r5
 8016272:	0039      	movs	r1, r7
 8016274:	0020      	movs	r0, r4
 8016276:	f7ff ff81 	bl	801617c <L_shift>
 801627a:	9b01      	ldr	r3, [sp, #4]
 801627c:	429c      	cmp	r4, r3
 801627e:	d926      	bls.n	80162ce <__hexnan+0x106>
 8016280:	cc04      	ldmia	r4!, {r2}
 8016282:	601a      	str	r2, [r3, #0]
 8016284:	3304      	adds	r3, #4
 8016286:	42a6      	cmp	r6, r4
 8016288:	d2fa      	bcs.n	8016280 <__hexnan+0xb8>
 801628a:	2200      	movs	r2, #0
 801628c:	c304      	stmia	r3!, {r2}
 801628e:	429e      	cmp	r6, r3
 8016290:	d2fc      	bcs.n	801628c <__hexnan+0xc4>
 8016292:	6833      	ldr	r3, [r6, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d104      	bne.n	80162a2 <__hexnan+0xda>
 8016298:	9b01      	ldr	r3, [sp, #4]
 801629a:	429e      	cmp	r6, r3
 801629c:	d126      	bne.n	80162ec <__hexnan+0x124>
 801629e:	2301      	movs	r3, #1
 80162a0:	6033      	str	r3, [r6, #0]
 80162a2:	2005      	movs	r0, #5
 80162a4:	e025      	b.n	80162f2 <__hexnan+0x12a>
 80162a6:	9b02      	ldr	r3, [sp, #8]
 80162a8:	3501      	adds	r5, #1
 80162aa:	3301      	adds	r3, #1
 80162ac:	9302      	str	r3, [sp, #8]
 80162ae:	2d08      	cmp	r5, #8
 80162b0:	dd06      	ble.n	80162c0 <__hexnan+0xf8>
 80162b2:	9b01      	ldr	r3, [sp, #4]
 80162b4:	429c      	cmp	r4, r3
 80162b6:	d9ca      	bls.n	801624e <__hexnan+0x86>
 80162b8:	2300      	movs	r3, #0
 80162ba:	2501      	movs	r5, #1
 80162bc:	3c04      	subs	r4, #4
 80162be:	6023      	str	r3, [r4, #0]
 80162c0:	220f      	movs	r2, #15
 80162c2:	6823      	ldr	r3, [r4, #0]
 80162c4:	4010      	ands	r0, r2
 80162c6:	011b      	lsls	r3, r3, #4
 80162c8:	4318      	orrs	r0, r3
 80162ca:	6020      	str	r0, [r4, #0]
 80162cc:	e7bf      	b.n	801624e <__hexnan+0x86>
 80162ce:	9b06      	ldr	r3, [sp, #24]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d0de      	beq.n	8016292 <__hexnan+0xca>
 80162d4:	2120      	movs	r1, #32
 80162d6:	9a06      	ldr	r2, [sp, #24]
 80162d8:	9b04      	ldr	r3, [sp, #16]
 80162da:	1a89      	subs	r1, r1, r2
 80162dc:	2201      	movs	r2, #1
 80162de:	4252      	negs	r2, r2
 80162e0:	40ca      	lsrs	r2, r1
 80162e2:	3b04      	subs	r3, #4
 80162e4:	6819      	ldr	r1, [r3, #0]
 80162e6:	400a      	ands	r2, r1
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	e7d2      	b.n	8016292 <__hexnan+0xca>
 80162ec:	3e04      	subs	r6, #4
 80162ee:	e7d0      	b.n	8016292 <__hexnan+0xca>
 80162f0:	2004      	movs	r0, #4
 80162f2:	b00b      	add	sp, #44	; 0x2c
 80162f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080162f6 <__localeconv_l>:
 80162f6:	30f0      	adds	r0, #240	; 0xf0
 80162f8:	4770      	bx	lr
	...

080162fc <_localeconv_r>:
 80162fc:	4b03      	ldr	r3, [pc, #12]	; (801630c <_localeconv_r+0x10>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016302:	2800      	cmp	r0, #0
 8016304:	d100      	bne.n	8016308 <_localeconv_r+0xc>
 8016306:	4802      	ldr	r0, [pc, #8]	; (8016310 <_localeconv_r+0x14>)
 8016308:	30f0      	adds	r0, #240	; 0xf0
 801630a:	4770      	bx	lr
 801630c:	200000cc 	.word	0x200000cc
 8016310:	200004f8 	.word	0x200004f8

08016314 <__retarget_lock_acquire_recursive>:
 8016314:	4770      	bx	lr

08016316 <__retarget_lock_release_recursive>:
 8016316:	4770      	bx	lr

08016318 <memchr>:
 8016318:	b2c9      	uxtb	r1, r1
 801631a:	1882      	adds	r2, r0, r2
 801631c:	4290      	cmp	r0, r2
 801631e:	d101      	bne.n	8016324 <memchr+0xc>
 8016320:	2000      	movs	r0, #0
 8016322:	4770      	bx	lr
 8016324:	7803      	ldrb	r3, [r0, #0]
 8016326:	428b      	cmp	r3, r1
 8016328:	d0fb      	beq.n	8016322 <memchr+0xa>
 801632a:	3001      	adds	r0, #1
 801632c:	e7f6      	b.n	801631c <memchr+0x4>

0801632e <memmove>:
 801632e:	b510      	push	{r4, lr}
 8016330:	4288      	cmp	r0, r1
 8016332:	d902      	bls.n	801633a <memmove+0xc>
 8016334:	188b      	adds	r3, r1, r2
 8016336:	4298      	cmp	r0, r3
 8016338:	d303      	bcc.n	8016342 <memmove+0x14>
 801633a:	2300      	movs	r3, #0
 801633c:	e007      	b.n	801634e <memmove+0x20>
 801633e:	5c8b      	ldrb	r3, [r1, r2]
 8016340:	5483      	strb	r3, [r0, r2]
 8016342:	3a01      	subs	r2, #1
 8016344:	d2fb      	bcs.n	801633e <memmove+0x10>
 8016346:	bd10      	pop	{r4, pc}
 8016348:	5ccc      	ldrb	r4, [r1, r3]
 801634a:	54c4      	strb	r4, [r0, r3]
 801634c:	3301      	adds	r3, #1
 801634e:	429a      	cmp	r2, r3
 8016350:	d1fa      	bne.n	8016348 <memmove+0x1a>
 8016352:	e7f8      	b.n	8016346 <memmove+0x18>

08016354 <_Balloc>:
 8016354:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016356:	b570      	push	{r4, r5, r6, lr}
 8016358:	0004      	movs	r4, r0
 801635a:	000d      	movs	r5, r1
 801635c:	2b00      	cmp	r3, #0
 801635e:	d012      	beq.n	8016386 <_Balloc+0x32>
 8016360:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016362:	00ab      	lsls	r3, r5, #2
 8016364:	18d3      	adds	r3, r2, r3
 8016366:	6818      	ldr	r0, [r3, #0]
 8016368:	2800      	cmp	r0, #0
 801636a:	d115      	bne.n	8016398 <_Balloc+0x44>
 801636c:	2101      	movs	r1, #1
 801636e:	000e      	movs	r6, r1
 8016370:	40ae      	lsls	r6, r5
 8016372:	1d72      	adds	r2, r6, #5
 8016374:	0092      	lsls	r2, r2, #2
 8016376:	0020      	movs	r0, r4
 8016378:	f7fb fe56 	bl	8012028 <_calloc_r>
 801637c:	2800      	cmp	r0, #0
 801637e:	d009      	beq.n	8016394 <_Balloc+0x40>
 8016380:	6045      	str	r5, [r0, #4]
 8016382:	6086      	str	r6, [r0, #8]
 8016384:	e00a      	b.n	801639c <_Balloc+0x48>
 8016386:	2221      	movs	r2, #33	; 0x21
 8016388:	2104      	movs	r1, #4
 801638a:	f7fb fe4d 	bl	8012028 <_calloc_r>
 801638e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016390:	2800      	cmp	r0, #0
 8016392:	d1e5      	bne.n	8016360 <_Balloc+0xc>
 8016394:	2000      	movs	r0, #0
 8016396:	bd70      	pop	{r4, r5, r6, pc}
 8016398:	6802      	ldr	r2, [r0, #0]
 801639a:	601a      	str	r2, [r3, #0]
 801639c:	2300      	movs	r3, #0
 801639e:	6103      	str	r3, [r0, #16]
 80163a0:	60c3      	str	r3, [r0, #12]
 80163a2:	e7f8      	b.n	8016396 <_Balloc+0x42>

080163a4 <_Bfree>:
 80163a4:	2900      	cmp	r1, #0
 80163a6:	d006      	beq.n	80163b6 <_Bfree+0x12>
 80163a8:	684b      	ldr	r3, [r1, #4]
 80163aa:	009a      	lsls	r2, r3, #2
 80163ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80163ae:	189b      	adds	r3, r3, r2
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	600a      	str	r2, [r1, #0]
 80163b4:	6019      	str	r1, [r3, #0]
 80163b6:	4770      	bx	lr

080163b8 <__multadd>:
 80163b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163ba:	001e      	movs	r6, r3
 80163bc:	2314      	movs	r3, #20
 80163be:	469c      	mov	ip, r3
 80163c0:	0007      	movs	r7, r0
 80163c2:	000c      	movs	r4, r1
 80163c4:	2000      	movs	r0, #0
 80163c6:	690d      	ldr	r5, [r1, #16]
 80163c8:	448c      	add	ip, r1
 80163ca:	4663      	mov	r3, ip
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	3001      	adds	r0, #1
 80163d0:	b299      	uxth	r1, r3
 80163d2:	4663      	mov	r3, ip
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4351      	muls	r1, r2
 80163d8:	0c1b      	lsrs	r3, r3, #16
 80163da:	4353      	muls	r3, r2
 80163dc:	1989      	adds	r1, r1, r6
 80163de:	0c0e      	lsrs	r6, r1, #16
 80163e0:	199b      	adds	r3, r3, r6
 80163e2:	b289      	uxth	r1, r1
 80163e4:	0c1e      	lsrs	r6, r3, #16
 80163e6:	041b      	lsls	r3, r3, #16
 80163e8:	185b      	adds	r3, r3, r1
 80163ea:	4661      	mov	r1, ip
 80163ec:	c108      	stmia	r1!, {r3}
 80163ee:	468c      	mov	ip, r1
 80163f0:	4285      	cmp	r5, r0
 80163f2:	dcea      	bgt.n	80163ca <__multadd+0x12>
 80163f4:	2e00      	cmp	r6, #0
 80163f6:	d01b      	beq.n	8016430 <__multadd+0x78>
 80163f8:	68a3      	ldr	r3, [r4, #8]
 80163fa:	42ab      	cmp	r3, r5
 80163fc:	dc12      	bgt.n	8016424 <__multadd+0x6c>
 80163fe:	6863      	ldr	r3, [r4, #4]
 8016400:	0038      	movs	r0, r7
 8016402:	1c59      	adds	r1, r3, #1
 8016404:	f7ff ffa6 	bl	8016354 <_Balloc>
 8016408:	0021      	movs	r1, r4
 801640a:	6923      	ldr	r3, [r4, #16]
 801640c:	9001      	str	r0, [sp, #4]
 801640e:	1c9a      	adds	r2, r3, #2
 8016410:	0092      	lsls	r2, r2, #2
 8016412:	310c      	adds	r1, #12
 8016414:	300c      	adds	r0, #12
 8016416:	f7fc f8b6 	bl	8012586 <memcpy>
 801641a:	0021      	movs	r1, r4
 801641c:	0038      	movs	r0, r7
 801641e:	f7ff ffc1 	bl	80163a4 <_Bfree>
 8016422:	9c01      	ldr	r4, [sp, #4]
 8016424:	1d2b      	adds	r3, r5, #4
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	18e3      	adds	r3, r4, r3
 801642a:	3501      	adds	r5, #1
 801642c:	605e      	str	r6, [r3, #4]
 801642e:	6125      	str	r5, [r4, #16]
 8016430:	0020      	movs	r0, r4
 8016432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016434 <__s2b>:
 8016434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016436:	0006      	movs	r6, r0
 8016438:	0018      	movs	r0, r3
 801643a:	000c      	movs	r4, r1
 801643c:	3008      	adds	r0, #8
 801643e:	2109      	movs	r1, #9
 8016440:	9301      	str	r3, [sp, #4]
 8016442:	0015      	movs	r5, r2
 8016444:	f7e9 ff0e 	bl	8000264 <__divsi3>
 8016448:	2301      	movs	r3, #1
 801644a:	2100      	movs	r1, #0
 801644c:	4283      	cmp	r3, r0
 801644e:	db1f      	blt.n	8016490 <__s2b+0x5c>
 8016450:	0030      	movs	r0, r6
 8016452:	f7ff ff7f 	bl	8016354 <_Balloc>
 8016456:	9b08      	ldr	r3, [sp, #32]
 8016458:	6143      	str	r3, [r0, #20]
 801645a:	2301      	movs	r3, #1
 801645c:	6103      	str	r3, [r0, #16]
 801645e:	2d09      	cmp	r5, #9
 8016460:	dd19      	ble.n	8016496 <__s2b+0x62>
 8016462:	0023      	movs	r3, r4
 8016464:	3309      	adds	r3, #9
 8016466:	001f      	movs	r7, r3
 8016468:	9300      	str	r3, [sp, #0]
 801646a:	1964      	adds	r4, r4, r5
 801646c:	783b      	ldrb	r3, [r7, #0]
 801646e:	0001      	movs	r1, r0
 8016470:	3b30      	subs	r3, #48	; 0x30
 8016472:	220a      	movs	r2, #10
 8016474:	0030      	movs	r0, r6
 8016476:	3701      	adds	r7, #1
 8016478:	f7ff ff9e 	bl	80163b8 <__multadd>
 801647c:	42a7      	cmp	r7, r4
 801647e:	d1f5      	bne.n	801646c <__s2b+0x38>
 8016480:	9b00      	ldr	r3, [sp, #0]
 8016482:	195c      	adds	r4, r3, r5
 8016484:	3c08      	subs	r4, #8
 8016486:	002f      	movs	r7, r5
 8016488:	9b01      	ldr	r3, [sp, #4]
 801648a:	429f      	cmp	r7, r3
 801648c:	db06      	blt.n	801649c <__s2b+0x68>
 801648e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016490:	005b      	lsls	r3, r3, #1
 8016492:	3101      	adds	r1, #1
 8016494:	e7da      	b.n	801644c <__s2b+0x18>
 8016496:	340a      	adds	r4, #10
 8016498:	2509      	movs	r5, #9
 801649a:	e7f4      	b.n	8016486 <__s2b+0x52>
 801649c:	1b63      	subs	r3, r4, r5
 801649e:	5ddb      	ldrb	r3, [r3, r7]
 80164a0:	0001      	movs	r1, r0
 80164a2:	3b30      	subs	r3, #48	; 0x30
 80164a4:	220a      	movs	r2, #10
 80164a6:	0030      	movs	r0, r6
 80164a8:	f7ff ff86 	bl	80163b8 <__multadd>
 80164ac:	3701      	adds	r7, #1
 80164ae:	e7eb      	b.n	8016488 <__s2b+0x54>

080164b0 <__hi0bits>:
 80164b0:	0003      	movs	r3, r0
 80164b2:	0c02      	lsrs	r2, r0, #16
 80164b4:	2000      	movs	r0, #0
 80164b6:	4282      	cmp	r2, r0
 80164b8:	d101      	bne.n	80164be <__hi0bits+0xe>
 80164ba:	041b      	lsls	r3, r3, #16
 80164bc:	3010      	adds	r0, #16
 80164be:	0e1a      	lsrs	r2, r3, #24
 80164c0:	d101      	bne.n	80164c6 <__hi0bits+0x16>
 80164c2:	3008      	adds	r0, #8
 80164c4:	021b      	lsls	r3, r3, #8
 80164c6:	0f1a      	lsrs	r2, r3, #28
 80164c8:	d101      	bne.n	80164ce <__hi0bits+0x1e>
 80164ca:	3004      	adds	r0, #4
 80164cc:	011b      	lsls	r3, r3, #4
 80164ce:	0f9a      	lsrs	r2, r3, #30
 80164d0:	d101      	bne.n	80164d6 <__hi0bits+0x26>
 80164d2:	3002      	adds	r0, #2
 80164d4:	009b      	lsls	r3, r3, #2
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	db03      	blt.n	80164e2 <__hi0bits+0x32>
 80164da:	3001      	adds	r0, #1
 80164dc:	005b      	lsls	r3, r3, #1
 80164de:	d400      	bmi.n	80164e2 <__hi0bits+0x32>
 80164e0:	2020      	movs	r0, #32
 80164e2:	4770      	bx	lr

080164e4 <__lo0bits>:
 80164e4:	2207      	movs	r2, #7
 80164e6:	6803      	ldr	r3, [r0, #0]
 80164e8:	b510      	push	{r4, lr}
 80164ea:	0001      	movs	r1, r0
 80164ec:	401a      	ands	r2, r3
 80164ee:	d00d      	beq.n	801650c <__lo0bits+0x28>
 80164f0:	2401      	movs	r4, #1
 80164f2:	2000      	movs	r0, #0
 80164f4:	4223      	tst	r3, r4
 80164f6:	d105      	bne.n	8016504 <__lo0bits+0x20>
 80164f8:	3002      	adds	r0, #2
 80164fa:	4203      	tst	r3, r0
 80164fc:	d003      	beq.n	8016506 <__lo0bits+0x22>
 80164fe:	40e3      	lsrs	r3, r4
 8016500:	0020      	movs	r0, r4
 8016502:	600b      	str	r3, [r1, #0]
 8016504:	bd10      	pop	{r4, pc}
 8016506:	089b      	lsrs	r3, r3, #2
 8016508:	600b      	str	r3, [r1, #0]
 801650a:	e7fb      	b.n	8016504 <__lo0bits+0x20>
 801650c:	b29c      	uxth	r4, r3
 801650e:	0010      	movs	r0, r2
 8016510:	2c00      	cmp	r4, #0
 8016512:	d101      	bne.n	8016518 <__lo0bits+0x34>
 8016514:	2010      	movs	r0, #16
 8016516:	0c1b      	lsrs	r3, r3, #16
 8016518:	b2da      	uxtb	r2, r3
 801651a:	2a00      	cmp	r2, #0
 801651c:	d101      	bne.n	8016522 <__lo0bits+0x3e>
 801651e:	3008      	adds	r0, #8
 8016520:	0a1b      	lsrs	r3, r3, #8
 8016522:	071a      	lsls	r2, r3, #28
 8016524:	d101      	bne.n	801652a <__lo0bits+0x46>
 8016526:	3004      	adds	r0, #4
 8016528:	091b      	lsrs	r3, r3, #4
 801652a:	079a      	lsls	r2, r3, #30
 801652c:	d101      	bne.n	8016532 <__lo0bits+0x4e>
 801652e:	3002      	adds	r0, #2
 8016530:	089b      	lsrs	r3, r3, #2
 8016532:	07da      	lsls	r2, r3, #31
 8016534:	d4e8      	bmi.n	8016508 <__lo0bits+0x24>
 8016536:	085b      	lsrs	r3, r3, #1
 8016538:	d001      	beq.n	801653e <__lo0bits+0x5a>
 801653a:	3001      	adds	r0, #1
 801653c:	e7e4      	b.n	8016508 <__lo0bits+0x24>
 801653e:	2020      	movs	r0, #32
 8016540:	e7e0      	b.n	8016504 <__lo0bits+0x20>

08016542 <__i2b>:
 8016542:	b510      	push	{r4, lr}
 8016544:	000c      	movs	r4, r1
 8016546:	2101      	movs	r1, #1
 8016548:	f7ff ff04 	bl	8016354 <_Balloc>
 801654c:	2301      	movs	r3, #1
 801654e:	6144      	str	r4, [r0, #20]
 8016550:	6103      	str	r3, [r0, #16]
 8016552:	bd10      	pop	{r4, pc}

08016554 <__multiply>:
 8016554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016556:	690b      	ldr	r3, [r1, #16]
 8016558:	0014      	movs	r4, r2
 801655a:	6912      	ldr	r2, [r2, #16]
 801655c:	b089      	sub	sp, #36	; 0x24
 801655e:	000d      	movs	r5, r1
 8016560:	4293      	cmp	r3, r2
 8016562:	da01      	bge.n	8016568 <__multiply+0x14>
 8016564:	0025      	movs	r5, r4
 8016566:	000c      	movs	r4, r1
 8016568:	692f      	ldr	r7, [r5, #16]
 801656a:	6926      	ldr	r6, [r4, #16]
 801656c:	6869      	ldr	r1, [r5, #4]
 801656e:	19bb      	adds	r3, r7, r6
 8016570:	9302      	str	r3, [sp, #8]
 8016572:	68ab      	ldr	r3, [r5, #8]
 8016574:	19ba      	adds	r2, r7, r6
 8016576:	4293      	cmp	r3, r2
 8016578:	da00      	bge.n	801657c <__multiply+0x28>
 801657a:	3101      	adds	r1, #1
 801657c:	f7ff feea 	bl	8016354 <_Balloc>
 8016580:	0002      	movs	r2, r0
 8016582:	19bb      	adds	r3, r7, r6
 8016584:	3214      	adds	r2, #20
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	18d3      	adds	r3, r2, r3
 801658a:	469c      	mov	ip, r3
 801658c:	2100      	movs	r1, #0
 801658e:	0013      	movs	r3, r2
 8016590:	9004      	str	r0, [sp, #16]
 8016592:	4563      	cmp	r3, ip
 8016594:	d31d      	bcc.n	80165d2 <__multiply+0x7e>
 8016596:	3514      	adds	r5, #20
 8016598:	00bf      	lsls	r7, r7, #2
 801659a:	19eb      	adds	r3, r5, r7
 801659c:	3414      	adds	r4, #20
 801659e:	00b6      	lsls	r6, r6, #2
 80165a0:	9305      	str	r3, [sp, #20]
 80165a2:	19a3      	adds	r3, r4, r6
 80165a4:	9503      	str	r5, [sp, #12]
 80165a6:	9401      	str	r4, [sp, #4]
 80165a8:	9307      	str	r3, [sp, #28]
 80165aa:	9b07      	ldr	r3, [sp, #28]
 80165ac:	9901      	ldr	r1, [sp, #4]
 80165ae:	4299      	cmp	r1, r3
 80165b0:	d311      	bcc.n	80165d6 <__multiply+0x82>
 80165b2:	9b02      	ldr	r3, [sp, #8]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	dd06      	ble.n	80165c6 <__multiply+0x72>
 80165b8:	2304      	movs	r3, #4
 80165ba:	425b      	negs	r3, r3
 80165bc:	449c      	add	ip, r3
 80165be:	4663      	mov	r3, ip
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d051      	beq.n	801666a <__multiply+0x116>
 80165c6:	9b04      	ldr	r3, [sp, #16]
 80165c8:	9a02      	ldr	r2, [sp, #8]
 80165ca:	0018      	movs	r0, r3
 80165cc:	611a      	str	r2, [r3, #16]
 80165ce:	b009      	add	sp, #36	; 0x24
 80165d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165d2:	c302      	stmia	r3!, {r1}
 80165d4:	e7dd      	b.n	8016592 <__multiply+0x3e>
 80165d6:	9b01      	ldr	r3, [sp, #4]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	b298      	uxth	r0, r3
 80165dc:	2800      	cmp	r0, #0
 80165de:	d01c      	beq.n	801661a <__multiply+0xc6>
 80165e0:	0015      	movs	r5, r2
 80165e2:	2600      	movs	r6, #0
 80165e4:	9f03      	ldr	r7, [sp, #12]
 80165e6:	cf02      	ldmia	r7!, {r1}
 80165e8:	682c      	ldr	r4, [r5, #0]
 80165ea:	b28b      	uxth	r3, r1
 80165ec:	4343      	muls	r3, r0
 80165ee:	0c09      	lsrs	r1, r1, #16
 80165f0:	4341      	muls	r1, r0
 80165f2:	b2a4      	uxth	r4, r4
 80165f4:	191b      	adds	r3, r3, r4
 80165f6:	199b      	adds	r3, r3, r6
 80165f8:	000e      	movs	r6, r1
 80165fa:	6829      	ldr	r1, [r5, #0]
 80165fc:	9506      	str	r5, [sp, #24]
 80165fe:	0c09      	lsrs	r1, r1, #16
 8016600:	1871      	adds	r1, r6, r1
 8016602:	0c1e      	lsrs	r6, r3, #16
 8016604:	1989      	adds	r1, r1, r6
 8016606:	0c0e      	lsrs	r6, r1, #16
 8016608:	b29b      	uxth	r3, r3
 801660a:	0409      	lsls	r1, r1, #16
 801660c:	430b      	orrs	r3, r1
 801660e:	c508      	stmia	r5!, {r3}
 8016610:	9b05      	ldr	r3, [sp, #20]
 8016612:	42bb      	cmp	r3, r7
 8016614:	d8e7      	bhi.n	80165e6 <__multiply+0x92>
 8016616:	9b06      	ldr	r3, [sp, #24]
 8016618:	605e      	str	r6, [r3, #4]
 801661a:	9b01      	ldr	r3, [sp, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	0c1d      	lsrs	r5, r3, #16
 8016620:	d01e      	beq.n	8016660 <__multiply+0x10c>
 8016622:	0010      	movs	r0, r2
 8016624:	2700      	movs	r7, #0
 8016626:	6813      	ldr	r3, [r2, #0]
 8016628:	9e03      	ldr	r6, [sp, #12]
 801662a:	6831      	ldr	r1, [r6, #0]
 801662c:	6804      	ldr	r4, [r0, #0]
 801662e:	b289      	uxth	r1, r1
 8016630:	4369      	muls	r1, r5
 8016632:	0c24      	lsrs	r4, r4, #16
 8016634:	1909      	adds	r1, r1, r4
 8016636:	19c9      	adds	r1, r1, r7
 8016638:	040f      	lsls	r7, r1, #16
 801663a:	b29b      	uxth	r3, r3
 801663c:	433b      	orrs	r3, r7
 801663e:	6003      	str	r3, [r0, #0]
 8016640:	ce80      	ldmia	r6!, {r7}
 8016642:	6843      	ldr	r3, [r0, #4]
 8016644:	0c3f      	lsrs	r7, r7, #16
 8016646:	436f      	muls	r7, r5
 8016648:	b29b      	uxth	r3, r3
 801664a:	18fb      	adds	r3, r7, r3
 801664c:	0c09      	lsrs	r1, r1, #16
 801664e:	185b      	adds	r3, r3, r1
 8016650:	9905      	ldr	r1, [sp, #20]
 8016652:	9006      	str	r0, [sp, #24]
 8016654:	0c1f      	lsrs	r7, r3, #16
 8016656:	3004      	adds	r0, #4
 8016658:	42b1      	cmp	r1, r6
 801665a:	d8e6      	bhi.n	801662a <__multiply+0xd6>
 801665c:	9906      	ldr	r1, [sp, #24]
 801665e:	604b      	str	r3, [r1, #4]
 8016660:	9b01      	ldr	r3, [sp, #4]
 8016662:	3204      	adds	r2, #4
 8016664:	3304      	adds	r3, #4
 8016666:	9301      	str	r3, [sp, #4]
 8016668:	e79f      	b.n	80165aa <__multiply+0x56>
 801666a:	9b02      	ldr	r3, [sp, #8]
 801666c:	3b01      	subs	r3, #1
 801666e:	9302      	str	r3, [sp, #8]
 8016670:	e79f      	b.n	80165b2 <__multiply+0x5e>
	...

08016674 <__pow5mult>:
 8016674:	2303      	movs	r3, #3
 8016676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016678:	4013      	ands	r3, r2
 801667a:	0006      	movs	r6, r0
 801667c:	000f      	movs	r7, r1
 801667e:	0015      	movs	r5, r2
 8016680:	2b00      	cmp	r3, #0
 8016682:	d008      	beq.n	8016696 <__pow5mult+0x22>
 8016684:	491a      	ldr	r1, [pc, #104]	; (80166f0 <__pow5mult+0x7c>)
 8016686:	3b01      	subs	r3, #1
 8016688:	009a      	lsls	r2, r3, #2
 801668a:	5852      	ldr	r2, [r2, r1]
 801668c:	2300      	movs	r3, #0
 801668e:	0039      	movs	r1, r7
 8016690:	f7ff fe92 	bl	80163b8 <__multadd>
 8016694:	0007      	movs	r7, r0
 8016696:	10ad      	asrs	r5, r5, #2
 8016698:	d027      	beq.n	80166ea <__pow5mult+0x76>
 801669a:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801669c:	2c00      	cmp	r4, #0
 801669e:	d107      	bne.n	80166b0 <__pow5mult+0x3c>
 80166a0:	4914      	ldr	r1, [pc, #80]	; (80166f4 <__pow5mult+0x80>)
 80166a2:	0030      	movs	r0, r6
 80166a4:	f7ff ff4d 	bl	8016542 <__i2b>
 80166a8:	2300      	movs	r3, #0
 80166aa:	0004      	movs	r4, r0
 80166ac:	64b0      	str	r0, [r6, #72]	; 0x48
 80166ae:	6003      	str	r3, [r0, #0]
 80166b0:	2301      	movs	r3, #1
 80166b2:	421d      	tst	r5, r3
 80166b4:	d00a      	beq.n	80166cc <__pow5mult+0x58>
 80166b6:	0039      	movs	r1, r7
 80166b8:	0022      	movs	r2, r4
 80166ba:	0030      	movs	r0, r6
 80166bc:	f7ff ff4a 	bl	8016554 <__multiply>
 80166c0:	0039      	movs	r1, r7
 80166c2:	9001      	str	r0, [sp, #4]
 80166c4:	0030      	movs	r0, r6
 80166c6:	f7ff fe6d 	bl	80163a4 <_Bfree>
 80166ca:	9f01      	ldr	r7, [sp, #4]
 80166cc:	106d      	asrs	r5, r5, #1
 80166ce:	d00c      	beq.n	80166ea <__pow5mult+0x76>
 80166d0:	6820      	ldr	r0, [r4, #0]
 80166d2:	2800      	cmp	r0, #0
 80166d4:	d107      	bne.n	80166e6 <__pow5mult+0x72>
 80166d6:	0022      	movs	r2, r4
 80166d8:	0021      	movs	r1, r4
 80166da:	0030      	movs	r0, r6
 80166dc:	f7ff ff3a 	bl	8016554 <__multiply>
 80166e0:	2300      	movs	r3, #0
 80166e2:	6020      	str	r0, [r4, #0]
 80166e4:	6003      	str	r3, [r0, #0]
 80166e6:	0004      	movs	r4, r0
 80166e8:	e7e2      	b.n	80166b0 <__pow5mult+0x3c>
 80166ea:	0038      	movs	r0, r7
 80166ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80166ee:	46c0      	nop			; (mov r8, r8)
 80166f0:	08019ea0 	.word	0x08019ea0
 80166f4:	00000271 	.word	0x00000271

080166f8 <__lshift>:
 80166f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166fa:	000d      	movs	r5, r1
 80166fc:	0017      	movs	r7, r2
 80166fe:	692b      	ldr	r3, [r5, #16]
 8016700:	1154      	asrs	r4, r2, #5
 8016702:	b085      	sub	sp, #20
 8016704:	18e3      	adds	r3, r4, r3
 8016706:	9301      	str	r3, [sp, #4]
 8016708:	3301      	adds	r3, #1
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	6849      	ldr	r1, [r1, #4]
 801670e:	68ab      	ldr	r3, [r5, #8]
 8016710:	9002      	str	r0, [sp, #8]
 8016712:	9a00      	ldr	r2, [sp, #0]
 8016714:	4293      	cmp	r3, r2
 8016716:	db35      	blt.n	8016784 <__lshift+0x8c>
 8016718:	9802      	ldr	r0, [sp, #8]
 801671a:	f7ff fe1b 	bl	8016354 <_Balloc>
 801671e:	2300      	movs	r3, #0
 8016720:	0002      	movs	r2, r0
 8016722:	0006      	movs	r6, r0
 8016724:	0019      	movs	r1, r3
 8016726:	3214      	adds	r2, #20
 8016728:	42a3      	cmp	r3, r4
 801672a:	db2e      	blt.n	801678a <__lshift+0x92>
 801672c:	43e3      	mvns	r3, r4
 801672e:	17db      	asrs	r3, r3, #31
 8016730:	401c      	ands	r4, r3
 8016732:	002b      	movs	r3, r5
 8016734:	00a4      	lsls	r4, r4, #2
 8016736:	1914      	adds	r4, r2, r4
 8016738:	692a      	ldr	r2, [r5, #16]
 801673a:	3314      	adds	r3, #20
 801673c:	0092      	lsls	r2, r2, #2
 801673e:	189a      	adds	r2, r3, r2
 8016740:	4694      	mov	ip, r2
 8016742:	221f      	movs	r2, #31
 8016744:	4017      	ands	r7, r2
 8016746:	d024      	beq.n	8016792 <__lshift+0x9a>
 8016748:	3201      	adds	r2, #1
 801674a:	1bd2      	subs	r2, r2, r7
 801674c:	9203      	str	r2, [sp, #12]
 801674e:	2200      	movs	r2, #0
 8016750:	6819      	ldr	r1, [r3, #0]
 8016752:	0020      	movs	r0, r4
 8016754:	40b9      	lsls	r1, r7
 8016756:	430a      	orrs	r2, r1
 8016758:	c404      	stmia	r4!, {r2}
 801675a:	cb04      	ldmia	r3!, {r2}
 801675c:	9903      	ldr	r1, [sp, #12]
 801675e:	40ca      	lsrs	r2, r1
 8016760:	459c      	cmp	ip, r3
 8016762:	d8f5      	bhi.n	8016750 <__lshift+0x58>
 8016764:	6042      	str	r2, [r0, #4]
 8016766:	2a00      	cmp	r2, #0
 8016768:	d002      	beq.n	8016770 <__lshift+0x78>
 801676a:	9b01      	ldr	r3, [sp, #4]
 801676c:	3302      	adds	r3, #2
 801676e:	9300      	str	r3, [sp, #0]
 8016770:	9b00      	ldr	r3, [sp, #0]
 8016772:	9802      	ldr	r0, [sp, #8]
 8016774:	3b01      	subs	r3, #1
 8016776:	6133      	str	r3, [r6, #16]
 8016778:	0029      	movs	r1, r5
 801677a:	f7ff fe13 	bl	80163a4 <_Bfree>
 801677e:	0030      	movs	r0, r6
 8016780:	b005      	add	sp, #20
 8016782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016784:	3101      	adds	r1, #1
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	e7c3      	b.n	8016712 <__lshift+0x1a>
 801678a:	0098      	lsls	r0, r3, #2
 801678c:	5011      	str	r1, [r2, r0]
 801678e:	3301      	adds	r3, #1
 8016790:	e7ca      	b.n	8016728 <__lshift+0x30>
 8016792:	cb04      	ldmia	r3!, {r2}
 8016794:	c404      	stmia	r4!, {r2}
 8016796:	459c      	cmp	ip, r3
 8016798:	d8fb      	bhi.n	8016792 <__lshift+0x9a>
 801679a:	e7e9      	b.n	8016770 <__lshift+0x78>

0801679c <__mcmp>:
 801679c:	690a      	ldr	r2, [r1, #16]
 801679e:	6903      	ldr	r3, [r0, #16]
 80167a0:	b530      	push	{r4, r5, lr}
 80167a2:	1a9b      	subs	r3, r3, r2
 80167a4:	d10d      	bne.n	80167c2 <__mcmp+0x26>
 80167a6:	0092      	lsls	r2, r2, #2
 80167a8:	3014      	adds	r0, #20
 80167aa:	3114      	adds	r1, #20
 80167ac:	1884      	adds	r4, r0, r2
 80167ae:	1889      	adds	r1, r1, r2
 80167b0:	3c04      	subs	r4, #4
 80167b2:	3904      	subs	r1, #4
 80167b4:	6825      	ldr	r5, [r4, #0]
 80167b6:	680a      	ldr	r2, [r1, #0]
 80167b8:	4295      	cmp	r5, r2
 80167ba:	d004      	beq.n	80167c6 <__mcmp+0x2a>
 80167bc:	2301      	movs	r3, #1
 80167be:	4295      	cmp	r5, r2
 80167c0:	d304      	bcc.n	80167cc <__mcmp+0x30>
 80167c2:	0018      	movs	r0, r3
 80167c4:	bd30      	pop	{r4, r5, pc}
 80167c6:	42a0      	cmp	r0, r4
 80167c8:	d3f2      	bcc.n	80167b0 <__mcmp+0x14>
 80167ca:	e7fa      	b.n	80167c2 <__mcmp+0x26>
 80167cc:	425b      	negs	r3, r3
 80167ce:	e7f8      	b.n	80167c2 <__mcmp+0x26>

080167d0 <__mdiff>:
 80167d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167d2:	000d      	movs	r5, r1
 80167d4:	b085      	sub	sp, #20
 80167d6:	0007      	movs	r7, r0
 80167d8:	0011      	movs	r1, r2
 80167da:	0028      	movs	r0, r5
 80167dc:	0014      	movs	r4, r2
 80167de:	f7ff ffdd 	bl	801679c <__mcmp>
 80167e2:	1e06      	subs	r6, r0, #0
 80167e4:	d108      	bne.n	80167f8 <__mdiff+0x28>
 80167e6:	0001      	movs	r1, r0
 80167e8:	0038      	movs	r0, r7
 80167ea:	f7ff fdb3 	bl	8016354 <_Balloc>
 80167ee:	2301      	movs	r3, #1
 80167f0:	6146      	str	r6, [r0, #20]
 80167f2:	6103      	str	r3, [r0, #16]
 80167f4:	b005      	add	sp, #20
 80167f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167f8:	2301      	movs	r3, #1
 80167fa:	9301      	str	r3, [sp, #4]
 80167fc:	2800      	cmp	r0, #0
 80167fe:	db04      	blt.n	801680a <__mdiff+0x3a>
 8016800:	0023      	movs	r3, r4
 8016802:	002c      	movs	r4, r5
 8016804:	001d      	movs	r5, r3
 8016806:	2300      	movs	r3, #0
 8016808:	9301      	str	r3, [sp, #4]
 801680a:	6861      	ldr	r1, [r4, #4]
 801680c:	0038      	movs	r0, r7
 801680e:	f7ff fda1 	bl	8016354 <_Balloc>
 8016812:	002f      	movs	r7, r5
 8016814:	2200      	movs	r2, #0
 8016816:	9b01      	ldr	r3, [sp, #4]
 8016818:	6926      	ldr	r6, [r4, #16]
 801681a:	60c3      	str	r3, [r0, #12]
 801681c:	3414      	adds	r4, #20
 801681e:	00b3      	lsls	r3, r6, #2
 8016820:	18e3      	adds	r3, r4, r3
 8016822:	9302      	str	r3, [sp, #8]
 8016824:	692b      	ldr	r3, [r5, #16]
 8016826:	3714      	adds	r7, #20
 8016828:	009b      	lsls	r3, r3, #2
 801682a:	18fb      	adds	r3, r7, r3
 801682c:	9303      	str	r3, [sp, #12]
 801682e:	0003      	movs	r3, r0
 8016830:	4694      	mov	ip, r2
 8016832:	3314      	adds	r3, #20
 8016834:	cc20      	ldmia	r4!, {r5}
 8016836:	cf04      	ldmia	r7!, {r2}
 8016838:	9201      	str	r2, [sp, #4]
 801683a:	b2aa      	uxth	r2, r5
 801683c:	4494      	add	ip, r2
 801683e:	466a      	mov	r2, sp
 8016840:	4661      	mov	r1, ip
 8016842:	8892      	ldrh	r2, [r2, #4]
 8016844:	0c2d      	lsrs	r5, r5, #16
 8016846:	1a8a      	subs	r2, r1, r2
 8016848:	9901      	ldr	r1, [sp, #4]
 801684a:	0c09      	lsrs	r1, r1, #16
 801684c:	1a69      	subs	r1, r5, r1
 801684e:	1415      	asrs	r5, r2, #16
 8016850:	1949      	adds	r1, r1, r5
 8016852:	140d      	asrs	r5, r1, #16
 8016854:	b292      	uxth	r2, r2
 8016856:	0409      	lsls	r1, r1, #16
 8016858:	430a      	orrs	r2, r1
 801685a:	601a      	str	r2, [r3, #0]
 801685c:	9a03      	ldr	r2, [sp, #12]
 801685e:	46ac      	mov	ip, r5
 8016860:	3304      	adds	r3, #4
 8016862:	42ba      	cmp	r2, r7
 8016864:	d8e6      	bhi.n	8016834 <__mdiff+0x64>
 8016866:	9902      	ldr	r1, [sp, #8]
 8016868:	001a      	movs	r2, r3
 801686a:	428c      	cmp	r4, r1
 801686c:	d305      	bcc.n	801687a <__mdiff+0xaa>
 801686e:	3a04      	subs	r2, #4
 8016870:	6813      	ldr	r3, [r2, #0]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d00e      	beq.n	8016894 <__mdiff+0xc4>
 8016876:	6106      	str	r6, [r0, #16]
 8016878:	e7bc      	b.n	80167f4 <__mdiff+0x24>
 801687a:	cc04      	ldmia	r4!, {r2}
 801687c:	b291      	uxth	r1, r2
 801687e:	4461      	add	r1, ip
 8016880:	140d      	asrs	r5, r1, #16
 8016882:	0c12      	lsrs	r2, r2, #16
 8016884:	1952      	adds	r2, r2, r5
 8016886:	1415      	asrs	r5, r2, #16
 8016888:	b289      	uxth	r1, r1
 801688a:	0412      	lsls	r2, r2, #16
 801688c:	430a      	orrs	r2, r1
 801688e:	46ac      	mov	ip, r5
 8016890:	c304      	stmia	r3!, {r2}
 8016892:	e7e8      	b.n	8016866 <__mdiff+0x96>
 8016894:	3e01      	subs	r6, #1
 8016896:	e7ea      	b.n	801686e <__mdiff+0x9e>

08016898 <__ulp>:
 8016898:	000b      	movs	r3, r1
 801689a:	4910      	ldr	r1, [pc, #64]	; (80168dc <__ulp+0x44>)
 801689c:	b510      	push	{r4, lr}
 801689e:	4019      	ands	r1, r3
 80168a0:	4b0f      	ldr	r3, [pc, #60]	; (80168e0 <__ulp+0x48>)
 80168a2:	18c9      	adds	r1, r1, r3
 80168a4:	2900      	cmp	r1, #0
 80168a6:	dd04      	ble.n	80168b2 <__ulp+0x1a>
 80168a8:	2200      	movs	r2, #0
 80168aa:	000b      	movs	r3, r1
 80168ac:	0010      	movs	r0, r2
 80168ae:	0019      	movs	r1, r3
 80168b0:	bd10      	pop	{r4, pc}
 80168b2:	4249      	negs	r1, r1
 80168b4:	1509      	asrs	r1, r1, #20
 80168b6:	2200      	movs	r2, #0
 80168b8:	2300      	movs	r3, #0
 80168ba:	2913      	cmp	r1, #19
 80168bc:	dc04      	bgt.n	80168c8 <__ulp+0x30>
 80168be:	2080      	movs	r0, #128	; 0x80
 80168c0:	0300      	lsls	r0, r0, #12
 80168c2:	4108      	asrs	r0, r1
 80168c4:	0003      	movs	r3, r0
 80168c6:	e7f1      	b.n	80168ac <__ulp+0x14>
 80168c8:	3914      	subs	r1, #20
 80168ca:	2001      	movs	r0, #1
 80168cc:	291e      	cmp	r1, #30
 80168ce:	dc02      	bgt.n	80168d6 <__ulp+0x3e>
 80168d0:	241f      	movs	r4, #31
 80168d2:	1a61      	subs	r1, r4, r1
 80168d4:	4088      	lsls	r0, r1
 80168d6:	0002      	movs	r2, r0
 80168d8:	e7e8      	b.n	80168ac <__ulp+0x14>
 80168da:	46c0      	nop			; (mov r8, r8)
 80168dc:	7ff00000 	.word	0x7ff00000
 80168e0:	fcc00000 	.word	0xfcc00000

080168e4 <__b2d>:
 80168e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168e6:	0006      	movs	r6, r0
 80168e8:	6903      	ldr	r3, [r0, #16]
 80168ea:	3614      	adds	r6, #20
 80168ec:	009b      	lsls	r3, r3, #2
 80168ee:	18f3      	adds	r3, r6, r3
 80168f0:	1f1d      	subs	r5, r3, #4
 80168f2:	682c      	ldr	r4, [r5, #0]
 80168f4:	000f      	movs	r7, r1
 80168f6:	0020      	movs	r0, r4
 80168f8:	9301      	str	r3, [sp, #4]
 80168fa:	f7ff fdd9 	bl	80164b0 <__hi0bits>
 80168fe:	2320      	movs	r3, #32
 8016900:	1a1b      	subs	r3, r3, r0
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	491c      	ldr	r1, [pc, #112]	; (8016978 <__b2d+0x94>)
 8016906:	280a      	cmp	r0, #10
 8016908:	dc16      	bgt.n	8016938 <__b2d+0x54>
 801690a:	230b      	movs	r3, #11
 801690c:	0027      	movs	r7, r4
 801690e:	1a1b      	subs	r3, r3, r0
 8016910:	40df      	lsrs	r7, r3
 8016912:	4339      	orrs	r1, r7
 8016914:	469c      	mov	ip, r3
 8016916:	000b      	movs	r3, r1
 8016918:	2100      	movs	r1, #0
 801691a:	42ae      	cmp	r6, r5
 801691c:	d202      	bcs.n	8016924 <__b2d+0x40>
 801691e:	9901      	ldr	r1, [sp, #4]
 8016920:	3908      	subs	r1, #8
 8016922:	6809      	ldr	r1, [r1, #0]
 8016924:	3015      	adds	r0, #21
 8016926:	4084      	lsls	r4, r0
 8016928:	4660      	mov	r0, ip
 801692a:	40c1      	lsrs	r1, r0
 801692c:	430c      	orrs	r4, r1
 801692e:	0022      	movs	r2, r4
 8016930:	0010      	movs	r0, r2
 8016932:	0019      	movs	r1, r3
 8016934:	b003      	add	sp, #12
 8016936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016938:	2700      	movs	r7, #0
 801693a:	42ae      	cmp	r6, r5
 801693c:	d202      	bcs.n	8016944 <__b2d+0x60>
 801693e:	9d01      	ldr	r5, [sp, #4]
 8016940:	3d08      	subs	r5, #8
 8016942:	682f      	ldr	r7, [r5, #0]
 8016944:	380b      	subs	r0, #11
 8016946:	4684      	mov	ip, r0
 8016948:	1e03      	subs	r3, r0, #0
 801694a:	d012      	beq.n	8016972 <__b2d+0x8e>
 801694c:	409c      	lsls	r4, r3
 801694e:	2020      	movs	r0, #32
 8016950:	4321      	orrs	r1, r4
 8016952:	003c      	movs	r4, r7
 8016954:	1ac0      	subs	r0, r0, r3
 8016956:	40c4      	lsrs	r4, r0
 8016958:	4321      	orrs	r1, r4
 801695a:	000b      	movs	r3, r1
 801695c:	2100      	movs	r1, #0
 801695e:	42b5      	cmp	r5, r6
 8016960:	d901      	bls.n	8016966 <__b2d+0x82>
 8016962:	3d04      	subs	r5, #4
 8016964:	6829      	ldr	r1, [r5, #0]
 8016966:	4664      	mov	r4, ip
 8016968:	40c1      	lsrs	r1, r0
 801696a:	40a7      	lsls	r7, r4
 801696c:	430f      	orrs	r7, r1
 801696e:	003a      	movs	r2, r7
 8016970:	e7de      	b.n	8016930 <__b2d+0x4c>
 8016972:	4321      	orrs	r1, r4
 8016974:	000b      	movs	r3, r1
 8016976:	e7fa      	b.n	801696e <__b2d+0x8a>
 8016978:	3ff00000 	.word	0x3ff00000

0801697c <__d2b>:
 801697c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801697e:	001d      	movs	r5, r3
 8016980:	2101      	movs	r1, #1
 8016982:	0014      	movs	r4, r2
 8016984:	9f08      	ldr	r7, [sp, #32]
 8016986:	f7ff fce5 	bl	8016354 <_Balloc>
 801698a:	032b      	lsls	r3, r5, #12
 801698c:	006d      	lsls	r5, r5, #1
 801698e:	0006      	movs	r6, r0
 8016990:	0b1b      	lsrs	r3, r3, #12
 8016992:	0d6d      	lsrs	r5, r5, #21
 8016994:	d124      	bne.n	80169e0 <__d2b+0x64>
 8016996:	9301      	str	r3, [sp, #4]
 8016998:	2c00      	cmp	r4, #0
 801699a:	d027      	beq.n	80169ec <__d2b+0x70>
 801699c:	4668      	mov	r0, sp
 801699e:	9400      	str	r4, [sp, #0]
 80169a0:	f7ff fda0 	bl	80164e4 <__lo0bits>
 80169a4:	9c00      	ldr	r4, [sp, #0]
 80169a6:	2800      	cmp	r0, #0
 80169a8:	d01e      	beq.n	80169e8 <__d2b+0x6c>
 80169aa:	9b01      	ldr	r3, [sp, #4]
 80169ac:	2120      	movs	r1, #32
 80169ae:	001a      	movs	r2, r3
 80169b0:	1a09      	subs	r1, r1, r0
 80169b2:	408a      	lsls	r2, r1
 80169b4:	40c3      	lsrs	r3, r0
 80169b6:	4322      	orrs	r2, r4
 80169b8:	6172      	str	r2, [r6, #20]
 80169ba:	9301      	str	r3, [sp, #4]
 80169bc:	9c01      	ldr	r4, [sp, #4]
 80169be:	61b4      	str	r4, [r6, #24]
 80169c0:	1e63      	subs	r3, r4, #1
 80169c2:	419c      	sbcs	r4, r3
 80169c4:	3401      	adds	r4, #1
 80169c6:	6134      	str	r4, [r6, #16]
 80169c8:	2d00      	cmp	r5, #0
 80169ca:	d018      	beq.n	80169fe <__d2b+0x82>
 80169cc:	4b12      	ldr	r3, [pc, #72]	; (8016a18 <__d2b+0x9c>)
 80169ce:	18ed      	adds	r5, r5, r3
 80169d0:	2335      	movs	r3, #53	; 0x35
 80169d2:	182d      	adds	r5, r5, r0
 80169d4:	603d      	str	r5, [r7, #0]
 80169d6:	1a18      	subs	r0, r3, r0
 80169d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169da:	6018      	str	r0, [r3, #0]
 80169dc:	0030      	movs	r0, r6
 80169de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169e0:	2280      	movs	r2, #128	; 0x80
 80169e2:	0352      	lsls	r2, r2, #13
 80169e4:	4313      	orrs	r3, r2
 80169e6:	e7d6      	b.n	8016996 <__d2b+0x1a>
 80169e8:	6174      	str	r4, [r6, #20]
 80169ea:	e7e7      	b.n	80169bc <__d2b+0x40>
 80169ec:	a801      	add	r0, sp, #4
 80169ee:	f7ff fd79 	bl	80164e4 <__lo0bits>
 80169f2:	2401      	movs	r4, #1
 80169f4:	9b01      	ldr	r3, [sp, #4]
 80169f6:	6134      	str	r4, [r6, #16]
 80169f8:	6173      	str	r3, [r6, #20]
 80169fa:	3020      	adds	r0, #32
 80169fc:	e7e4      	b.n	80169c8 <__d2b+0x4c>
 80169fe:	4b07      	ldr	r3, [pc, #28]	; (8016a1c <__d2b+0xa0>)
 8016a00:	18c0      	adds	r0, r0, r3
 8016a02:	4b07      	ldr	r3, [pc, #28]	; (8016a20 <__d2b+0xa4>)
 8016a04:	6038      	str	r0, [r7, #0]
 8016a06:	18e3      	adds	r3, r4, r3
 8016a08:	009b      	lsls	r3, r3, #2
 8016a0a:	18f3      	adds	r3, r6, r3
 8016a0c:	6958      	ldr	r0, [r3, #20]
 8016a0e:	f7ff fd4f 	bl	80164b0 <__hi0bits>
 8016a12:	0164      	lsls	r4, r4, #5
 8016a14:	1a20      	subs	r0, r4, r0
 8016a16:	e7df      	b.n	80169d8 <__d2b+0x5c>
 8016a18:	fffffbcd 	.word	0xfffffbcd
 8016a1c:	fffffbce 	.word	0xfffffbce
 8016a20:	3fffffff 	.word	0x3fffffff

08016a24 <__ratio>:
 8016a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a26:	b085      	sub	sp, #20
 8016a28:	000f      	movs	r7, r1
 8016a2a:	a902      	add	r1, sp, #8
 8016a2c:	0006      	movs	r6, r0
 8016a2e:	f7ff ff59 	bl	80168e4 <__b2d>
 8016a32:	0004      	movs	r4, r0
 8016a34:	000d      	movs	r5, r1
 8016a36:	0038      	movs	r0, r7
 8016a38:	a903      	add	r1, sp, #12
 8016a3a:	9400      	str	r4, [sp, #0]
 8016a3c:	9501      	str	r5, [sp, #4]
 8016a3e:	f7ff ff51 	bl	80168e4 <__b2d>
 8016a42:	6936      	ldr	r6, [r6, #16]
 8016a44:	693f      	ldr	r7, [r7, #16]
 8016a46:	0002      	movs	r2, r0
 8016a48:	1bf7      	subs	r7, r6, r7
 8016a4a:	017e      	lsls	r6, r7, #5
 8016a4c:	46b4      	mov	ip, r6
 8016a4e:	9f03      	ldr	r7, [sp, #12]
 8016a50:	9e02      	ldr	r6, [sp, #8]
 8016a52:	000b      	movs	r3, r1
 8016a54:	1bf6      	subs	r6, r6, r7
 8016a56:	4466      	add	r6, ip
 8016a58:	0537      	lsls	r7, r6, #20
 8016a5a:	2e00      	cmp	r6, #0
 8016a5c:	dd07      	ble.n	8016a6e <__ratio+0x4a>
 8016a5e:	1979      	adds	r1, r7, r5
 8016a60:	9101      	str	r1, [sp, #4]
 8016a62:	9800      	ldr	r0, [sp, #0]
 8016a64:	9901      	ldr	r1, [sp, #4]
 8016a66:	f7ea fddb 	bl	8001620 <__aeabi_ddiv>
 8016a6a:	b005      	add	sp, #20
 8016a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a6e:	1bcb      	subs	r3, r1, r7
 8016a70:	e7f7      	b.n	8016a62 <__ratio+0x3e>

08016a72 <__copybits>:
 8016a72:	0013      	movs	r3, r2
 8016a74:	3901      	subs	r1, #1
 8016a76:	b510      	push	{r4, lr}
 8016a78:	1149      	asrs	r1, r1, #5
 8016a7a:	6912      	ldr	r2, [r2, #16]
 8016a7c:	3101      	adds	r1, #1
 8016a7e:	0089      	lsls	r1, r1, #2
 8016a80:	3314      	adds	r3, #20
 8016a82:	0092      	lsls	r2, r2, #2
 8016a84:	1841      	adds	r1, r0, r1
 8016a86:	189a      	adds	r2, r3, r2
 8016a88:	429a      	cmp	r2, r3
 8016a8a:	d803      	bhi.n	8016a94 <__copybits+0x22>
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	4281      	cmp	r1, r0
 8016a90:	d803      	bhi.n	8016a9a <__copybits+0x28>
 8016a92:	bd10      	pop	{r4, pc}
 8016a94:	cb10      	ldmia	r3!, {r4}
 8016a96:	c010      	stmia	r0!, {r4}
 8016a98:	e7f6      	b.n	8016a88 <__copybits+0x16>
 8016a9a:	c008      	stmia	r0!, {r3}
 8016a9c:	e7f7      	b.n	8016a8e <__copybits+0x1c>

08016a9e <__any_on>:
 8016a9e:	0002      	movs	r2, r0
 8016aa0:	6900      	ldr	r0, [r0, #16]
 8016aa2:	b510      	push	{r4, lr}
 8016aa4:	3214      	adds	r2, #20
 8016aa6:	114b      	asrs	r3, r1, #5
 8016aa8:	4298      	cmp	r0, r3
 8016aaa:	db12      	blt.n	8016ad2 <__any_on+0x34>
 8016aac:	dd0b      	ble.n	8016ac6 <__any_on+0x28>
 8016aae:	201f      	movs	r0, #31
 8016ab0:	4001      	ands	r1, r0
 8016ab2:	d008      	beq.n	8016ac6 <__any_on+0x28>
 8016ab4:	0098      	lsls	r0, r3, #2
 8016ab6:	5884      	ldr	r4, [r0, r2]
 8016ab8:	0020      	movs	r0, r4
 8016aba:	40c8      	lsrs	r0, r1
 8016abc:	4088      	lsls	r0, r1
 8016abe:	0001      	movs	r1, r0
 8016ac0:	2001      	movs	r0, #1
 8016ac2:	428c      	cmp	r4, r1
 8016ac4:	d104      	bne.n	8016ad0 <__any_on+0x32>
 8016ac6:	009b      	lsls	r3, r3, #2
 8016ac8:	18d3      	adds	r3, r2, r3
 8016aca:	4293      	cmp	r3, r2
 8016acc:	d803      	bhi.n	8016ad6 <__any_on+0x38>
 8016ace:	2000      	movs	r0, #0
 8016ad0:	bd10      	pop	{r4, pc}
 8016ad2:	0003      	movs	r3, r0
 8016ad4:	e7f7      	b.n	8016ac6 <__any_on+0x28>
 8016ad6:	3b04      	subs	r3, #4
 8016ad8:	6819      	ldr	r1, [r3, #0]
 8016ada:	2900      	cmp	r1, #0
 8016adc:	d0f5      	beq.n	8016aca <__any_on+0x2c>
 8016ade:	2001      	movs	r0, #1
 8016ae0:	e7f6      	b.n	8016ad0 <__any_on+0x32>
	...

08016ae4 <frexp>:
 8016ae4:	b570      	push	{r4, r5, r6, lr}
 8016ae6:	0014      	movs	r4, r2
 8016ae8:	2500      	movs	r5, #0
 8016aea:	6025      	str	r5, [r4, #0]
 8016aec:	4d10      	ldr	r5, [pc, #64]	; (8016b30 <frexp+0x4c>)
 8016aee:	004b      	lsls	r3, r1, #1
 8016af0:	000a      	movs	r2, r1
 8016af2:	085b      	lsrs	r3, r3, #1
 8016af4:	42ab      	cmp	r3, r5
 8016af6:	dc1a      	bgt.n	8016b2e <frexp+0x4a>
 8016af8:	001d      	movs	r5, r3
 8016afa:	4305      	orrs	r5, r0
 8016afc:	d017      	beq.n	8016b2e <frexp+0x4a>
 8016afe:	4d0d      	ldr	r5, [pc, #52]	; (8016b34 <frexp+0x50>)
 8016b00:	42ab      	cmp	r3, r5
 8016b02:	dc09      	bgt.n	8016b18 <frexp+0x34>
 8016b04:	2200      	movs	r2, #0
 8016b06:	4b0c      	ldr	r3, [pc, #48]	; (8016b38 <frexp+0x54>)
 8016b08:	f7eb f994 	bl	8001e34 <__aeabi_dmul>
 8016b0c:	2536      	movs	r5, #54	; 0x36
 8016b0e:	000a      	movs	r2, r1
 8016b10:	004b      	lsls	r3, r1, #1
 8016b12:	426d      	negs	r5, r5
 8016b14:	085b      	lsrs	r3, r3, #1
 8016b16:	6025      	str	r5, [r4, #0]
 8016b18:	4d08      	ldr	r5, [pc, #32]	; (8016b3c <frexp+0x58>)
 8016b1a:	151b      	asrs	r3, r3, #20
 8016b1c:	195b      	adds	r3, r3, r5
 8016b1e:	6825      	ldr	r5, [r4, #0]
 8016b20:	18eb      	adds	r3, r5, r3
 8016b22:	6023      	str	r3, [r4, #0]
 8016b24:	4b06      	ldr	r3, [pc, #24]	; (8016b40 <frexp+0x5c>)
 8016b26:	401a      	ands	r2, r3
 8016b28:	4b06      	ldr	r3, [pc, #24]	; (8016b44 <frexp+0x60>)
 8016b2a:	4313      	orrs	r3, r2
 8016b2c:	0019      	movs	r1, r3
 8016b2e:	bd70      	pop	{r4, r5, r6, pc}
 8016b30:	7fefffff 	.word	0x7fefffff
 8016b34:	000fffff 	.word	0x000fffff
 8016b38:	43500000 	.word	0x43500000
 8016b3c:	fffffc02 	.word	0xfffffc02
 8016b40:	800fffff 	.word	0x800fffff
 8016b44:	3fe00000 	.word	0x3fe00000

08016b48 <__ssprint_r>:
 8016b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b4a:	6893      	ldr	r3, [r2, #8]
 8016b4c:	b087      	sub	sp, #28
 8016b4e:	9002      	str	r0, [sp, #8]
 8016b50:	000c      	movs	r4, r1
 8016b52:	0016      	movs	r6, r2
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d063      	beq.n	8016c20 <__ssprint_r+0xd8>
 8016b58:	6813      	ldr	r3, [r2, #0]
 8016b5a:	9303      	str	r3, [sp, #12]
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	001f      	movs	r7, r3
 8016b60:	9305      	str	r3, [sp, #20]
 8016b62:	2f00      	cmp	r7, #0
 8016b64:	d02e      	beq.n	8016bc4 <__ssprint_r+0x7c>
 8016b66:	68a5      	ldr	r5, [r4, #8]
 8016b68:	42af      	cmp	r7, r5
 8016b6a:	d347      	bcc.n	8016bfc <__ssprint_r+0xb4>
 8016b6c:	2390      	movs	r3, #144	; 0x90
 8016b6e:	89a2      	ldrh	r2, [r4, #12]
 8016b70:	00db      	lsls	r3, r3, #3
 8016b72:	421a      	tst	r2, r3
 8016b74:	d042      	beq.n	8016bfc <__ssprint_r+0xb4>
 8016b76:	2003      	movs	r0, #3
 8016b78:	6921      	ldr	r1, [r4, #16]
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	1a5b      	subs	r3, r3, r1
 8016b7e:	9304      	str	r3, [sp, #16]
 8016b80:	6963      	ldr	r3, [r4, #20]
 8016b82:	4343      	muls	r3, r0
 8016b84:	0fd8      	lsrs	r0, r3, #31
 8016b86:	18c3      	adds	r3, r0, r3
 8016b88:	105b      	asrs	r3, r3, #1
 8016b8a:	9301      	str	r3, [sp, #4]
 8016b8c:	9b04      	ldr	r3, [sp, #16]
 8016b8e:	9801      	ldr	r0, [sp, #4]
 8016b90:	3301      	adds	r3, #1
 8016b92:	19db      	adds	r3, r3, r7
 8016b94:	4283      	cmp	r3, r0
 8016b96:	d900      	bls.n	8016b9a <__ssprint_r+0x52>
 8016b98:	9301      	str	r3, [sp, #4]
 8016b9a:	0553      	lsls	r3, r2, #21
 8016b9c:	d544      	bpl.n	8016c28 <__ssprint_r+0xe0>
 8016b9e:	9901      	ldr	r1, [sp, #4]
 8016ba0:	9802      	ldr	r0, [sp, #8]
 8016ba2:	f7fb fab7 	bl	8012114 <_malloc_r>
 8016ba6:	1e05      	subs	r5, r0, #0
 8016ba8:	d114      	bne.n	8016bd4 <__ssprint_r+0x8c>
 8016baa:	230c      	movs	r3, #12
 8016bac:	9a02      	ldr	r2, [sp, #8]
 8016bae:	2001      	movs	r0, #1
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	2340      	movs	r3, #64	; 0x40
 8016bb4:	89a2      	ldrh	r2, [r4, #12]
 8016bb6:	4240      	negs	r0, r0
 8016bb8:	4313      	orrs	r3, r2
 8016bba:	81a3      	strh	r3, [r4, #12]
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	60b3      	str	r3, [r6, #8]
 8016bc0:	6073      	str	r3, [r6, #4]
 8016bc2:	e02f      	b.n	8016c24 <__ssprint_r+0xdc>
 8016bc4:	9b03      	ldr	r3, [sp, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	9305      	str	r3, [sp, #20]
 8016bca:	9b03      	ldr	r3, [sp, #12]
 8016bcc:	685f      	ldr	r7, [r3, #4]
 8016bce:	3308      	adds	r3, #8
 8016bd0:	9303      	str	r3, [sp, #12]
 8016bd2:	e7c6      	b.n	8016b62 <__ssprint_r+0x1a>
 8016bd4:	9a04      	ldr	r2, [sp, #16]
 8016bd6:	6921      	ldr	r1, [r4, #16]
 8016bd8:	f7fb fcd5 	bl	8012586 <memcpy>
 8016bdc:	89a3      	ldrh	r3, [r4, #12]
 8016bde:	4a18      	ldr	r2, [pc, #96]	; (8016c40 <__ssprint_r+0xf8>)
 8016be0:	401a      	ands	r2, r3
 8016be2:	2380      	movs	r3, #128	; 0x80
 8016be4:	4313      	orrs	r3, r2
 8016be6:	81a3      	strh	r3, [r4, #12]
 8016be8:	9b04      	ldr	r3, [sp, #16]
 8016bea:	6125      	str	r5, [r4, #16]
 8016bec:	18ed      	adds	r5, r5, r3
 8016bee:	6025      	str	r5, [r4, #0]
 8016bf0:	003d      	movs	r5, r7
 8016bf2:	9b01      	ldr	r3, [sp, #4]
 8016bf4:	9a04      	ldr	r2, [sp, #16]
 8016bf6:	6163      	str	r3, [r4, #20]
 8016bf8:	1a9b      	subs	r3, r3, r2
 8016bfa:	60a3      	str	r3, [r4, #8]
 8016bfc:	42bd      	cmp	r5, r7
 8016bfe:	d900      	bls.n	8016c02 <__ssprint_r+0xba>
 8016c00:	003d      	movs	r5, r7
 8016c02:	002a      	movs	r2, r5
 8016c04:	9905      	ldr	r1, [sp, #20]
 8016c06:	6820      	ldr	r0, [r4, #0]
 8016c08:	f7ff fb91 	bl	801632e <memmove>
 8016c0c:	68a3      	ldr	r3, [r4, #8]
 8016c0e:	1b5b      	subs	r3, r3, r5
 8016c10:	60a3      	str	r3, [r4, #8]
 8016c12:	6823      	ldr	r3, [r4, #0]
 8016c14:	195d      	adds	r5, r3, r5
 8016c16:	68b3      	ldr	r3, [r6, #8]
 8016c18:	6025      	str	r5, [r4, #0]
 8016c1a:	1bdb      	subs	r3, r3, r7
 8016c1c:	60b3      	str	r3, [r6, #8]
 8016c1e:	d1d1      	bne.n	8016bc4 <__ssprint_r+0x7c>
 8016c20:	2000      	movs	r0, #0
 8016c22:	6070      	str	r0, [r6, #4]
 8016c24:	b007      	add	sp, #28
 8016c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c28:	9a01      	ldr	r2, [sp, #4]
 8016c2a:	9802      	ldr	r0, [sp, #8]
 8016c2c:	f7fb fcf0 	bl	8012610 <_realloc_r>
 8016c30:	1e05      	subs	r5, r0, #0
 8016c32:	d1d9      	bne.n	8016be8 <__ssprint_r+0xa0>
 8016c34:	6921      	ldr	r1, [r4, #16]
 8016c36:	9802      	ldr	r0, [sp, #8]
 8016c38:	f7fe ff78 	bl	8015b2c <_free_r>
 8016c3c:	e7b5      	b.n	8016baa <__ssprint_r+0x62>
 8016c3e:	46c0      	nop			; (mov r8, r8)
 8016c40:	fffffb7f 	.word	0xfffffb7f

08016c44 <__register_exitproc>:
 8016c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c46:	4d29      	ldr	r5, [pc, #164]	; (8016cec <__register_exitproc+0xa8>)
 8016c48:	0006      	movs	r6, r0
 8016c4a:	6828      	ldr	r0, [r5, #0]
 8016c4c:	9301      	str	r3, [sp, #4]
 8016c4e:	9100      	str	r1, [sp, #0]
 8016c50:	0017      	movs	r7, r2
 8016c52:	f7ff fb5f 	bl	8016314 <__retarget_lock_acquire_recursive>
 8016c56:	4b26      	ldr	r3, [pc, #152]	; (8016cf0 <__register_exitproc+0xac>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	001c      	movs	r4, r3
 8016c5c:	34fc      	adds	r4, #252	; 0xfc
 8016c5e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d103      	bne.n	8016c6c <__register_exitproc+0x28>
 8016c64:	334d      	adds	r3, #77	; 0x4d
 8016c66:	33ff      	adds	r3, #255	; 0xff
 8016c68:	0018      	movs	r0, r3
 8016c6a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016c6c:	6843      	ldr	r3, [r0, #4]
 8016c6e:	2b1f      	cmp	r3, #31
 8016c70:	dd18      	ble.n	8016ca4 <__register_exitproc+0x60>
 8016c72:	4b20      	ldr	r3, [pc, #128]	; (8016cf4 <__register_exitproc+0xb0>)
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d105      	bne.n	8016c84 <__register_exitproc+0x40>
 8016c78:	6828      	ldr	r0, [r5, #0]
 8016c7a:	f7ff fb4c 	bl	8016316 <__retarget_lock_release_recursive>
 8016c7e:	2001      	movs	r0, #1
 8016c80:	4240      	negs	r0, r0
 8016c82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016c84:	20c8      	movs	r0, #200	; 0xc8
 8016c86:	0040      	lsls	r0, r0, #1
 8016c88:	f7fb fa30 	bl	80120ec <malloc>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	d0f3      	beq.n	8016c78 <__register_exitproc+0x34>
 8016c90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016c92:	2300      	movs	r3, #0
 8016c94:	6002      	str	r2, [r0, #0]
 8016c96:	22c4      	movs	r2, #196	; 0xc4
 8016c98:	0052      	lsls	r2, r2, #1
 8016c9a:	6043      	str	r3, [r0, #4]
 8016c9c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016c9e:	5083      	str	r3, [r0, r2]
 8016ca0:	3204      	adds	r2, #4
 8016ca2:	5083      	str	r3, [r0, r2]
 8016ca4:	6843      	ldr	r3, [r0, #4]
 8016ca6:	2e00      	cmp	r6, #0
 8016ca8:	d014      	beq.n	8016cd4 <__register_exitproc+0x90>
 8016caa:	009a      	lsls	r2, r3, #2
 8016cac:	1882      	adds	r2, r0, r2
 8016cae:	0011      	movs	r1, r2
 8016cb0:	3188      	adds	r1, #136	; 0x88
 8016cb2:	600f      	str	r7, [r1, #0]
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	0004      	movs	r4, r0
 8016cb8:	4099      	lsls	r1, r3
 8016cba:	3485      	adds	r4, #133	; 0x85
 8016cbc:	34ff      	adds	r4, #255	; 0xff
 8016cbe:	6865      	ldr	r5, [r4, #4]
 8016cc0:	32fc      	adds	r2, #252	; 0xfc
 8016cc2:	430d      	orrs	r5, r1
 8016cc4:	6065      	str	r5, [r4, #4]
 8016cc6:	9d01      	ldr	r5, [sp, #4]
 8016cc8:	60d5      	str	r5, [r2, #12]
 8016cca:	2e02      	cmp	r6, #2
 8016ccc:	d102      	bne.n	8016cd4 <__register_exitproc+0x90>
 8016cce:	68a2      	ldr	r2, [r4, #8]
 8016cd0:	4311      	orrs	r1, r2
 8016cd2:	60a1      	str	r1, [r4, #8]
 8016cd4:	1c5a      	adds	r2, r3, #1
 8016cd6:	6042      	str	r2, [r0, #4]
 8016cd8:	3302      	adds	r3, #2
 8016cda:	9a00      	ldr	r2, [sp, #0]
 8016cdc:	009b      	lsls	r3, r3, #2
 8016cde:	501a      	str	r2, [r3, r0]
 8016ce0:	4b02      	ldr	r3, [pc, #8]	; (8016cec <__register_exitproc+0xa8>)
 8016ce2:	6818      	ldr	r0, [r3, #0]
 8016ce4:	f7ff fb17 	bl	8016316 <__retarget_lock_release_recursive>
 8016ce8:	2000      	movs	r0, #0
 8016cea:	e7ca      	b.n	8016c82 <__register_exitproc+0x3e>
 8016cec:	20000a74 	.word	0x20000a74
 8016cf0:	08019be4 	.word	0x08019be4
 8016cf4:	080120ed 	.word	0x080120ed

08016cf8 <_sbrk>:
 8016cf8:	4b05      	ldr	r3, [pc, #20]	; (8016d10 <_sbrk+0x18>)
 8016cfa:	0002      	movs	r2, r0
 8016cfc:	6819      	ldr	r1, [r3, #0]
 8016cfe:	2900      	cmp	r1, #0
 8016d00:	d101      	bne.n	8016d06 <_sbrk+0xe>
 8016d02:	4904      	ldr	r1, [pc, #16]	; (8016d14 <_sbrk+0x1c>)
 8016d04:	6019      	str	r1, [r3, #0]
 8016d06:	6818      	ldr	r0, [r3, #0]
 8016d08:	1882      	adds	r2, r0, r2
 8016d0a:	601a      	str	r2, [r3, #0]
 8016d0c:	4770      	bx	lr
 8016d0e:	46c0      	nop			; (mov r8, r8)
 8016d10:	20006bf8 	.word	0x20006bf8
 8016d14:	20007240 	.word	0x20007240

08016d18 <_init>:
 8016d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d1a:	46c0      	nop			; (mov r8, r8)
 8016d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d1e:	bc08      	pop	{r3}
 8016d20:	469e      	mov	lr, r3
 8016d22:	4770      	bx	lr

08016d24 <_fini>:
 8016d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d26:	46c0      	nop			; (mov r8, r8)
 8016d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d2a:	bc08      	pop	{r3}
 8016d2c:	469e      	mov	lr, r3
 8016d2e:	4770      	bx	lr
