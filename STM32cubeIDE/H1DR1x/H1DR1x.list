
H1DR1x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003164  08017a90  08017a90  00027a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801abf4  0801abf4  00030a58  2**0
                  CONTENTS
  4 .ARM          00000008  0801abf4  0801abf4  0002abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801abfc  0801abfc  00030a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801abfc  0801abfc  0002abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac04  0801ac04  0002ac04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a58  20000000  0801ac08  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064e8  20000a58  0801b660  00030a58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006f40  0801b660  00036f40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000492e  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014c1  00000000  00000000  000353ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c90  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bf0  00000000  00000000  00038500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a9b3  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004f90  00000000  00000000  00044aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00049a33  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006128  00000000  00000000  00049ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a58 	.word	0x20000a58
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017a74 	.word	0x08017a74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a5c 	.word	0x20000a5c
 8000100:	08017a74 	.word	0x08017a74

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017ac4 	.word	0x08017ac4
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017b04 	.word	0x08017b04
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017b44 	.word	0x08017b44
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	20001076 	.word	0x20001076
 8002dc8:	20000a78 	.word	0x20000a78

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 fcd0 	bl	8007780 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f004 fcc1 	bl	8007780 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	2000001c 	.word	0x2000001c
 8002e10:	20006e98 	.word	0x20006e98

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f004 fc8b 	bl	8007780 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000f68 	.word	0x20000f68
 8002e94:	2000001c 	.word	0x2000001c

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f004 fc5c 	bl	8007780 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f004 fc38 	bl	8007780 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000ec0 	.word	0x20000ec0
 8002f3c:	20000e5c 	.word	0x20000e5c

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f004 fc15 	bl	8007780 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f004 fc0a 	bl	8007780 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f004 fc05 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f004 fbf4 	bl	8007780 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f004 fbef 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f004 fbde 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f004 fbcf 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f004 fbc0 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f005 ffeb 	bl	800902c <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f005 ffe4 	bl	800902c <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f005 ffdd 	bl	800902c <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	2000114a 	.word	0x2000114a
 8003078:	20000e59 	.word	0x20000e59
 800307c:	2000114b 	.word	0x2000114b
 8003080:	20000e5a 	.word	0x20000e5a
 8003084:	2000114c 	.word	0x2000114c
 8003088:	20000e5b 	.word	0x20000e5b

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f004 fb72 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e064      	b.n	800316c <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <LoadEEparams+0x144>)
 80030aa:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030b0:	2016      	movs	r0, #22
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	30ff      	adds	r0, #255	; 0xff
 80030b8:	f004 fb62 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030bc:	2800      	cmp	r0, #0
 80030be:	d15c      	bne.n	800317a <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 80030c0:	466b      	mov	r3, sp
 80030c2:	88da      	ldrh	r2, [r3, #6]
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <LoadEEparams+0x144>)
 80030c6:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030c8:	208b      	movs	r0, #139	; 0x8b
 80030ca:	466b      	mov	r3, sp
 80030cc:	1d99      	adds	r1, r3, #6
 80030ce:	0040      	lsls	r0, r0, #1
 80030d0:	f004 fb56 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d155      	bne.n	8003184 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime =temp1;
 80030d8:	466b      	mov	r3, sp
 80030da:	88da      	ldrh	r2, [r3, #6]
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <LoadEEparams+0x144>)
 80030de:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030e0:	2018      	movs	r0, #24
 80030e2:	466b      	mov	r3, sp
 80030e4:	1d99      	adds	r1, r3, #6
 80030e6:	30ff      	adds	r0, #255	; 0xff
 80030e8:	f004 fb4a 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d14e      	bne.n	800318e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030f0:	466b      	mov	r3, sp
 80030f2:	3306      	adds	r3, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <LoadEEparams+0x144>)
 80030f8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030fe:	208c      	movs	r0, #140	; 0x8c
 8003100:	466b      	mov	r3, sp
 8003102:	1d99      	adds	r1, r3, #6
 8003104:	0040      	lsls	r0, r0, #1
 8003106:	f004 fb3b 	bl	8007780 <EE_ReadVariable>
 800310a:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800310c:	201a      	movs	r0, #26
 800310e:	a901      	add	r1, sp, #4
 8003110:	30ff      	adds	r0, #255	; 0xff
 8003112:	f004 fb35 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8003116:	4304      	orrs	r4, r0
 8003118:	b2a4      	uxth	r4, r4
 800311a:	2c00      	cmp	r4, #0
 800311c:	d13e      	bne.n	800319c <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800311e:	ab01      	add	r3, sp, #4
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	466a      	mov	r2, sp
 8003126:	3206      	adds	r2, #6
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <LoadEEparams+0x144>)
 800312e:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003130:	208d      	movs	r0, #141	; 0x8d
 8003132:	466b      	mov	r3, sp
 8003134:	1d99      	adds	r1, r3, #6
 8003136:	0040      	lsls	r0, r0, #1
 8003138:	f004 fb22 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 800313c:	2800      	cmp	r0, #0
 800313e:	d13b      	bne.n	80031b8 <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t )temp1;
 8003140:	466b      	mov	r3, sp
 8003142:	3306      	adds	r3, #6
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <LoadEEparams+0x144>)
 8003148:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800314e:	201c      	movs	r0, #28
 8003150:	466b      	mov	r3, sp
 8003152:	1d99      	adds	r1, r3, #6
 8003154:	30ff      	adds	r0, #255	; 0xff
 8003156:	f004 fb13 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800315a:	2800      	cmp	r0, #0
 800315c:	d032      	beq.n	80031c4 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <LoadEEparams+0x148>)
 8003160:	7eda      	ldrb	r2, [r3, #27]
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <LoadEEparams+0x144>)
 8003164:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003166:	2000      	movs	r0, #0
 8003168:	b002      	add	sp, #8
 800316a:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <LoadEEparams+0x144>)
 800316e:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <LoadEEparams+0x148>)
 8003170:	7991      	ldrb	r1, [r2, #6]
 8003172:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8003174:	79d2      	ldrb	r2, [r2, #7]
 8003176:	71da      	strb	r2, [r3, #7]
 8003178:	e79a      	b.n	80030b0 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <LoadEEparams+0x148>)
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <LoadEEparams+0x144>)
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e7a1      	b.n	80030c8 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <LoadEEparams+0x148>)
 8003186:	885a      	ldrh	r2, [r3, #2]
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <LoadEEparams+0x144>)
 800318a:	805a      	strh	r2, [r3, #2]
 800318c:	e7a8      	b.n	80030e0 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <LoadEEparams+0x144>)
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <LoadEEparams+0x148>)
 8003192:	7911      	ldrb	r1, [r2, #4]
 8003194:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003196:	7952      	ldrb	r2, [r2, #5]
 8003198:	715a      	strb	r2, [r3, #5]
 800319a:	e7b0      	b.n	80030fe <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <LoadEEparams+0x14c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <LoadEEparams+0x144>)
 80031a6:	22e1      	movs	r2, #225	; 0xe1
 80031a8:	0252      	lsls	r2, r2, #9
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e7c0      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <LoadEEparams+0x148>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <LoadEEparams+0x144>)
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e7bb      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LoadEEparams+0x144>)
 80031ba:	2218      	movs	r2, #24
 80031bc:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031be:	2200      	movs	r2, #0
 80031c0:	731a      	strb	r2, [r3, #12]
 80031c2:	e7c4      	b.n	800314e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031c4:	466b      	mov	r3, sp
 80031c6:	88da      	ldrh	r2, [r3, #6]
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <LoadEEparams+0x144>)
 80031ca:	76da      	strb	r2, [r3, #27]
 80031cc:	e7cb      	b.n	8003166 <LoadEEparams+0xda>
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	200069c8 	.word	0x200069c8
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000a76 	.word	0x20000a76

080031dc <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	46ce      	mov	lr, r9
 80031e0:	4647      	mov	r7, r8
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031e6:	231e      	movs	r3, #30
 80031e8:	446b      	add	r3, sp
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	2501      	movs	r5, #1
 80031f0:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80031f2:	001e      	movs	r6, r3
 80031f4:	230f      	movs	r3, #15
 80031f6:	4698      	mov	r8, r3
 80031f8:	e004      	b.n	8003204 <LoadEEbuttons+0x28>
 80031fa:	3404      	adds	r4, #4
 80031fc:	b2a4      	uxth	r4, r4
 80031fe:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003200:	2d08      	cmp	r5, #8
 8003202:	d058      	beq.n	80032b6 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003204:	0031      	movs	r1, r6
 8003206:	0020      	movs	r0, r4
 8003208:	f004 faba 	bl	8007780 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 800320c:	2800      	cmp	r0, #0
 800320e:	d1f4      	bne.n	80031fa <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003210:	8831      	ldrh	r1, [r6, #0]
 8003212:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003214:	091a      	lsrs	r2, r3, #4
 8003216:	42aa      	cmp	r2, r5
 8003218:	d1ef      	bne.n	80031fa <LoadEEbuttons+0x1e>
 800321a:	4640      	mov	r0, r8
 800321c:	4003      	ands	r3, r0
 800321e:	d0ec      	beq.n	80031fa <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	1882      	adds	r2, r0, r2
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <LoadEEbuttons+0xe8>)
 8003226:	4681      	mov	r9, r0
 8003228:	4491      	add	r9, r2
 800322a:	464a      	mov	r2, r9
 800322c:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 800322e:	7211      	strb	r1, [r2, #8]
 8003230:	00af      	lsls	r7, r5, #2
 8003232:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0038      	movs	r0, r7
 8003236:	30e9      	adds	r0, #233	; 0xe9
 8003238:	b280      	uxth	r0, r0
 800323a:	0031      	movs	r1, r6
 800323c:	f004 faa0 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003240:	8833      	ldrh	r3, [r6, #0]
 8003242:	0a1a      	lsrs	r2, r3, #8
 8003244:	4649      	mov	r1, r9
 8003246:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003248:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324a:	0038      	movs	r0, r7
 800324c:	30ea      	adds	r0, #234	; 0xea
 800324e:	b280      	uxth	r0, r0
 8003250:	0031      	movs	r1, r6
 8003252:	f004 fa95 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003256:	8833      	ldrh	r3, [r6, #0]
 8003258:	0a1a      	lsrs	r2, r3, #8
 800325a:	4649      	mov	r1, r9
 800325c:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800325e:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003260:	37eb      	adds	r7, #235	; 0xeb
 8003262:	b2b8      	uxth	r0, r7
 8003264:	0031      	movs	r1, r6
 8003266:	f004 fa8b 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800326a:	8833      	ldrh	r3, [r6, #0]
 800326c:	0a1a      	lsrs	r2, r3, #8
 800326e:	4649      	mov	r1, r9
 8003270:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003272:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	b2ef      	uxtb	r7, r5
 8003276:	7848      	ldrb	r0, [r1, #1]
 8003278:	0039      	movs	r1, r7
 800327a:	f004 ff95 	bl	80081a8 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800327e:	464b      	mov	r3, r9
 8003280:	7a19      	ldrb	r1, [r3, #8]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	104a      	asrs	r2, r1, #1
 8003286:	2001      	movs	r0, #1
 8003288:	4002      	ands	r2, r0
 800328a:	4001      	ands	r1, r0
 800328c:	2000      	movs	r0, #0
 800328e:	9005      	str	r0, [sp, #20]
 8003290:	4648      	mov	r0, r9
 8003292:	79c0      	ldrb	r0, [r0, #7]
 8003294:	9004      	str	r0, [sp, #16]
 8003296:	4648      	mov	r0, r9
 8003298:	7980      	ldrb	r0, [r0, #6]
 800329a:	9003      	str	r0, [sp, #12]
 800329c:	4648      	mov	r0, r9
 800329e:	7940      	ldrb	r0, [r0, #5]
 80032a0:	9002      	str	r0, [sp, #8]
 80032a2:	4648      	mov	r0, r9
 80032a4:	7900      	ldrb	r0, [r0, #4]
 80032a6:	9001      	str	r0, [sp, #4]
 80032a8:	4648      	mov	r0, r9
 80032aa:	78c0      	ldrb	r0, [r0, #3]
 80032ac:	9000      	str	r0, [sp, #0]
 80032ae:	0038      	movs	r0, r7
 80032b0:	f005 f894 	bl	80083dc <SetButtonEvents>
 80032b4:	e7a1      	b.n	80031fa <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032b6:	2000      	movs	r0, #0
 80032b8:	b009      	add	sp, #36	; 0x24
 80032ba:	bc0c      	pop	{r2, r3}
 80032bc:	4690      	mov	r8, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000151c 	.word	0x2000151c

080032c8 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	46de      	mov	lr, fp
 80032cc:	4657      	mov	r7, sl
 80032ce:	464e      	mov	r6, r9
 80032d0:	b5c0      	push	{r6, r7, lr}
 80032d2:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032d4:	2032      	movs	r0, #50	; 0x32
 80032d6:	f00f fd8b 	bl	8012df0 <malloc>
 80032da:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 80032dc:	d100      	bne.n	80032e0 <LoadROsnippets+0x18>
 80032de:	e071      	b.n	80033c4 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <LoadROsnippets+0x100>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 80032e4:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e6:	2bfe      	cmp	r3, #254	; 0xfe
 80032e8:	d166      	bne.n	80033b8 <LoadROsnippets+0xf0>
 80032ea:	4e38      	ldr	r6, [pc, #224]	; (80033cc <LoadROsnippets+0x104>)
 80032ec:	3b9a      	subs	r3, #154	; 0x9a
 80032ee:	469b      	mov	fp, r3
 80032f0:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 80032f2:	4d35      	ldr	r5, [pc, #212]	; (80033c8 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80032f4:	1c7b      	adds	r3, r7, #1
 80032f6:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <LoadROsnippets+0x108>)
 80032fa:	4699      	mov	r9, r3
 80032fc:	e023      	b.n	8003346 <LoadROsnippets+0x7e>
		i =0;
 80032fe:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003300:	193b      	adds	r3, r7, r4
 8003302:	3b01      	subs	r3, #1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 800330a:	3401      	adds	r4, #1
 800330c:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 800330e:	0020      	movs	r0, r4
 8003310:	f00f fd6e 	bl	8012df0 <malloc>
 8003314:	4653      	mov	r3, sl
 8003316:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003318:	2800      	cmp	r0, #0
 800331a:	d03f      	beq.n	800339c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 800331c:	0022      	movs	r2, r4
 800331e:	0039      	movs	r1, r7
 8003320:	f00f ffb3 	bl	801328a <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003324:	464b      	mov	r3, r9
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	464a      	mov	r2, r9
 800332c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800332e:	0022      	movs	r2, r4
 8003330:	2100      	movs	r1, #0
 8003332:	0038      	movs	r0, r7
 8003334:	f00f ffb2 	bl	801329c <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003338:	9b00      	ldr	r3, [sp, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2bfe      	cmp	r3, #254	; 0xfe
 800333e:	d137      	bne.n	80033b0 <LoadROsnippets+0xe8>
 8003340:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003342:	455e      	cmp	r6, fp
 8003344:	d034      	beq.n	80033b0 <LoadROsnippets+0xe8>
 8003346:	0028      	movs	r0, r5
 8003348:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 800334a:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800334c:	1b79      	subs	r1, r7, r5
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	54ca      	strb	r2, [r1, r3]
 8003352:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003354:	4283      	cmp	r3, r0
 8003356:	d1fa      	bne.n	800334e <LoadROsnippets+0x86>
 8003358:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800335a:	46b2      	mov	sl, r6
 800335c:	2214      	movs	r2, #20
 800335e:	9901      	ldr	r1, [sp, #4]
 8003360:	0030      	movs	r0, r6
 8003362:	f00f ff92 	bl	801328a <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003366:	2214      	movs	r2, #20
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f00f ff96 	bl	801329c <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003370:	9500      	str	r5, [sp, #0]
 8003372:	782a      	ldrb	r2, [r5, #0]
 8003374:	1c93      	adds	r3, r2, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d9c0      	bls.n	80032fe <LoadROsnippets+0x36>
 800337c:	0039      	movs	r1, r7
		i =0;
 800337e:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003380:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8003382:	3501      	adds	r5, #1
			++i;
 8003384:	3401      	adds	r4, #1
 8003386:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003388:	9500      	str	r5, [sp, #0]
 800338a:	782a      	ldrb	r2, [r5, #0]
 800338c:	1c93      	adds	r3, r2, #2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d9b5      	bls.n	8003300 <LoadROsnippets+0x38>
 8003394:	3101      	adds	r1, #1
 8003396:	2c32      	cmp	r4, #50	; 0x32
 8003398:	d1f2      	bne.n	8003380 <LoadROsnippets+0xb8>
 800339a:	e7b1      	b.n	8003300 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 800339c:	2214      	movs	r2, #20
 800339e:	2100      	movs	r1, #0
 80033a0:	4650      	mov	r0, sl
 80033a2:	f00f ff7b 	bl	801329c <memset>
			free(snipBuffer);
 80033a6:	0038      	movs	r0, r7
 80033a8:	f00f fd2c 	bl	8012e04 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033ac:	200e      	movs	r0, #14
 80033ae:	e003      	b.n	80033b8 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033b0:	0038      	movs	r0, r7
 80033b2:	f00f fd27 	bl	8012e04 <free>
	return BOS_OK;
 80033b6:	2000      	movs	r0, #0
}
 80033b8:	b002      	add	sp, #8
 80033ba:	bc1c      	pop	{r2, r3, r4}
 80033bc:	4691      	mov	r9, r2
 80033be:	469a      	mov	sl, r3
 80033c0:	46a3      	mov	fp, r4
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033c4:	20fb      	movs	r0, #251	; 0xfb
 80033c6:	e7f7      	b.n	80033b8 <LoadROsnippets+0xf0>
 80033c8:	0801dc00 	.word	0x0801dc00
 80033cc:	200069e4 	.word	0x200069e4
 80033d0:	2000121f 	.word	0x2000121f

080033d4 <LoadEEvars>:
void LoadEEvars(void){
 80033d4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033d6:	f7ff fca5 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033da:	f7ff fcf7 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 80033de:	f7ff fd19 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 80033e2:	f7ff fd59 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 80033e6:	f7ff fdab 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 80033ea:	f7ff fe4f 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 80033ee:	f7ff fef5 	bl	80031dc <LoadEEbuttons>
	LoadROsnippets();
 80033f2:	f7ff ff69 	bl	80032c8 <LoadROsnippets>
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <SaveEEportsDir+0x4c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <SaveEEportsDir+0x42>
 8003404:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800340a:	4e0f      	ldr	r6, [pc, #60]	; (8003448 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 800340c:	4f0d      	ldr	r7, [pc, #52]	; (8003444 <SaveEEportsDir+0x4c>)
 800340e:	e008      	b.n	8003422 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003410:	1c60      	adds	r0, r4, #1
 8003412:	f004 f9e5 	bl	80077e0 <EE_WriteVariable>
 8003416:	e00a      	b.n	800342e <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003418:	3401      	adds	r4, #1
 800341a:	b2e4      	uxtb	r4, r4
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	42a3      	cmp	r3, r4
 8003420:	d30d      	bcc.n	800343e <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 8003422:	0025      	movs	r5, r4
 8003424:	1e63      	subs	r3, r4, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	5b99      	ldrh	r1, [r3, r6]
 800342a:	2900      	cmp	r1, #0
 800342c:	d1f0      	bne.n	8003410 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800342e:	3502      	adds	r5, #2
 8003430:	2d1b      	cmp	r5, #27
 8003432:	ddf1      	ble.n	8003418 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003434:	230a      	movs	r3, #10
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	e7ee      	b.n	8003418 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800343e:	9801      	ldr	r0, [sp, #4]
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	2000001c 	.word	0x2000001c
 8003448:	20006e98 	.word	0x20006e98

0800344c <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	46d6      	mov	lr, sl
 8003450:	464f      	mov	r7, r9
 8003452:	4646      	mov	r6, r8
 8003454:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003456:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
 800345a:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <SaveEEalias+0x7c>)
 800345e:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <SaveEEalias+0x80>)
 8003462:	4699      	mov	r9, r3
 8003464:	e005      	b.n	8003472 <SaveEEalias+0x26>
 8003466:	3601      	adds	r6, #1
 8003468:	b2f6      	uxtb	r6, r6
 800346a:	464b      	mov	r3, r9
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	42b3      	cmp	r3, r6
 8003470:	d324      	bcc.n	80034bc <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 8003472:	00b3      	lsls	r3, r6, #2
 8003474:	199b      	adds	r3, r3, r6
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f2      	beq.n	8003466 <SaveEEalias+0x1a>
 8003480:	00b5      	lsls	r5, r6, #2
 8003482:	19ad      	adds	r5, r5, r6
 8003484:	006d      	lsls	r5, r5, #1
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <SaveEEalias+0x7c>)
 8003488:	469c      	mov	ip, r3
 800348a:	4465      	add	r5, ip
 800348c:	4644      	mov	r4, r8
 800348e:	341c      	adds	r4, #28
 8003490:	b2a4      	uxth	r4, r4
 8003492:	4647      	mov	r7, r8
 8003494:	3721      	adds	r7, #33	; 0x21
 8003496:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003498:	782b      	ldrb	r3, [r5, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	7869      	ldrb	r1, [r5, #1]
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	b289      	uxth	r1, r1
 80034a2:	0020      	movs	r0, r4
 80034a4:	f004 f99c 	bl	80077e0 <EE_WriteVariable>
 80034a8:	3502      	adds	r5, #2
 80034aa:	3401      	adds	r4, #1
 80034ac:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bc      	cmp	r4, r7
 80034b0:	d1f2      	bne.n	8003498 <SaveEEalias+0x4c>
 80034b2:	4643      	mov	r3, r8
 80034b4:	3305      	adds	r3, #5
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4698      	mov	r8, r3
 80034ba:	e7d4      	b.n	8003466 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034bc:	2000      	movs	r0, #0
 80034be:	bc1c      	pop	{r2, r3, r4}
 80034c0:	4690      	mov	r8, r2
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	20000f68 	.word	0x20000f68
 80034cc:	2000001c 	.word	0x2000001c

080034d0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46de      	mov	lr, fp
 80034d4:	4657      	mov	r7, sl
 80034d6:	464e      	mov	r6, r9
 80034d8:	4645      	mov	r5, r8
 80034da:	b5e0      	push	{r5, r6, r7, lr}
 80034dc:	000f      	movs	r7, r1
 80034de:	0016      	movs	r6, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	ab0a      	add	r3, sp, #40	; 0x28
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	469b      	mov	fp, r3
 80034e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034ea:	781d      	ldrb	r5, [r3, #0]
 80034ec:	ab0c      	add	r3, sp, #48	; 0x30
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	469a      	mov	sl, r3
 80034f2:	ab0d      	add	r3, sp, #52	; 0x34
 80034f4:	781c      	ldrb	r4, [r3, #0]
 80034f6:	ab0e      	add	r3, sp, #56	; 0x38
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034fc:	b281      	uxth	r1, r0
 80034fe:	20e4      	movs	r0, #228	; 0xe4
 8003500:	f004 f96e 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003504:	0a39      	lsrs	r1, r7, #8
 8003506:	b289      	uxth	r1, r1
 8003508:	20e5      	movs	r0, #229	; 0xe5
 800350a:	f004 f969 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800350e:	b2b9      	uxth	r1, r7
 8003510:	20e6      	movs	r0, #230	; 0xe6
 8003512:	f004 f965 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003516:	0a31      	lsrs	r1, r6, #8
 8003518:	b289      	uxth	r1, r1
 800351a:	20e7      	movs	r0, #231	; 0xe7
 800351c:	f004 f960 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003520:	b2b1      	uxth	r1, r6
 8003522:	20e8      	movs	r0, #232	; 0xe8
 8003524:	f004 f95c 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003528:	464b      	mov	r3, r9
 800352a:	0219      	lsls	r1, r3, #8
 800352c:	4459      	add	r1, fp
 800352e:	b289      	uxth	r1, r1
 8003530:	20e9      	movs	r0, #233	; 0xe9
 8003532:	f004 f955 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003536:	022d      	lsls	r5, r5, #8
 8003538:	4455      	add	r5, sl
 800353a:	b2a9      	uxth	r1, r5
 800353c:	20ea      	movs	r0, #234	; 0xea
 800353e:	f004 f94f 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003542:	0224      	lsls	r4, r4, #8
 8003544:	4444      	add	r4, r8
 8003546:	b2a1      	uxth	r1, r4
 8003548:	20eb      	movs	r0, #235	; 0xeb
 800354a:	f004 f949 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 800354e:	2000      	movs	r0, #0
 8003550:	bc3c      	pop	{r2, r3, r4, r5}
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	46a2      	mov	sl, r4
 8003558:	46ab      	mov	fp, r5
 800355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800355c <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 800355c:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 800355e:	4c1a      	ldr	r4, [pc, #104]	; (80035c8 <SaveEEparams+0x6c>)
 8003560:	79e3      	ldrb	r3, [r4, #7]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	79a1      	ldrb	r1, [r4, #6]
 8003566:	4319      	orrs	r1, r3
 8003568:	208a      	movs	r0, #138	; 0x8a
 800356a:	0040      	lsls	r0, r0, #1
 800356c:	f004 f938 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003570:	8821      	ldrh	r1, [r4, #0]
 8003572:	2016      	movs	r0, #22
 8003574:	30ff      	adds	r0, #255	; 0xff
 8003576:	f004 f933 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800357a:	8861      	ldrh	r1, [r4, #2]
 800357c:	208b      	movs	r0, #139	; 0x8b
 800357e:	0040      	lsls	r0, r0, #1
 8003580:	f004 f92e 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003584:	7963      	ldrb	r3, [r4, #5]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	7b21      	ldrb	r1, [r4, #12]
 800358a:	4319      	orrs	r1, r3
 800358c:	2018      	movs	r0, #24
 800358e:	30ff      	adds	r0, #255	; 0xff
 8003590:	f004 f926 	bl	80077e0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003594:	8921      	ldrh	r1, [r4, #8]
 8003596:	208c      	movs	r0, #140	; 0x8c
 8003598:	0040      	lsls	r0, r0, #1
 800359a:	f004 f921 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800359e:	8961      	ldrh	r1, [r4, #10]
 80035a0:	201a      	movs	r0, #26
 80035a2:	30ff      	adds	r0, #255	; 0xff
 80035a4:	f004 f91c 	bl	80077e0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035a8:	7b63      	ldrb	r3, [r4, #13]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	7921      	ldrb	r1, [r4, #4]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	208d      	movs	r0, #141	; 0x8d
 80035b2:	0040      	lsls	r0, r0, #1
 80035b4:	f004 f914 	bl	80077e0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035b8:	7ee1      	ldrb	r1, [r4, #27]
 80035ba:	201c      	movs	r0, #28
 80035bc:	30ff      	adds	r0, #255	; 0xff
 80035be:	f004 f90f 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	200069c8 	.word	0x200069c8

080035cc <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035d0:	2234      	movs	r2, #52	; 0x34
 80035d2:	2100      	movs	r1, #0
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <ClearEEportsDir+0x58>)
 80035d6:	f00f fe61 	bl	801329c <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <ClearEEportsDir+0x5c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <ClearEEportsDir+0x4c>
 80035e2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80035e8:	4e0e      	ldr	r6, [pc, #56]	; (8003624 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 80035ea:	4f0f      	ldr	r7, [pc, #60]	; (8003628 <ClearEEportsDir+0x5c>)
 80035ec:	e008      	b.n	8003600 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80035ee:	1c60      	adds	r0, r4, #1
 80035f0:	f004 f8f6 	bl	80077e0 <EE_WriteVariable>
 80035f4:	e00a      	b.n	800360c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80035f6:	3401      	adds	r4, #1
 80035f8:	b2e4      	uxtb	r4, r4
 80035fa:	783b      	ldrb	r3, [r7, #0]
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d30d      	bcc.n	800361c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003600:	0025      	movs	r5, r4
 8003602:	1e63      	subs	r3, r4, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	5b99      	ldrh	r1, [r3, r6]
 8003608:	2900      	cmp	r1, #0
 800360a:	d1f0      	bne.n	80035ee <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800360c:	3502      	adds	r5, #2
 800360e:	2d1b      	cmp	r5, #27
 8003610:	ddf1      	ble.n	80035f6 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003612:	230a      	movs	r3, #10
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	e7ee      	b.n	80035f6 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800361c:	9801      	ldr	r0, [sp, #4]
 800361e:	b003      	add	sp, #12
 8003620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20006e98 	.word	0x20006e98
 8003628:	2000001c 	.word	0x2000001c

0800362c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800362c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d006      	beq.n	8003646 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003638:	f004 f97a 	bl	8007930 <EE_Format>
 800363c:	2800      	cmp	r0, #0
 800363e:	d102      	bne.n	8003646 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003642:	4a01      	ldr	r2, [pc, #4]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003644:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003646:	bd10      	pop	{r4, pc}
 8003648:	beefdead 	.word	0xbeefdead
 800364c:	20007ff0 	.word	0x20007ff0

08003650 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003654:	2512      	movs	r5, #18
 8003656:	446d      	add	r5, sp
 8003658:	ab04      	add	r3, sp, #16
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	ab07      	add	r3, sp, #28
 800365e:	002a      	movs	r2, r5
 8003660:	a908      	add	r1, sp, #32
 8003662:	2001      	movs	r0, #1
 8003664:	f009 f998 	bl	800c998 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003668:	ac03      	add	r4, sp, #12
 800366a:	9400      	str	r4, [sp, #0]
 800366c:	ab05      	add	r3, sp, #20
 800366e:	220e      	movs	r2, #14
 8003670:	446a      	add	r2, sp
 8003672:	a906      	add	r1, sp, #24
 8003674:	2002      	movs	r0, #2
 8003676:	f009 f98f 	bl	800c998 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2600      	movs	r6, #0
 8003680:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003682:	882b      	ldrh	r3, [r5, #0]
 8003684:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003686:	a909      	add	r1, sp, #36	; 0x24
 8003688:	9808      	ldr	r0, [sp, #32]
 800368a:	f00d fbb1 	bl	8010df0 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003690:	2302      	movs	r3, #2
 8003692:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003694:	8823      	ldrh	r3, [r4, #0]
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003698:	a909      	add	r1, sp, #36	; 0x24
 800369a:	9805      	ldr	r0, [sp, #20]
 800369c:	f00d fba8 	bl	8010df0 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9808      	ldr	r0, [sp, #32]
 80036a6:	f00d fd17 	bl	80110d8 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fd48 	bl	800d140 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9805      	ldr	r0, [sp, #20]
 80036b4:	f00d fd0a 	bl	80110cc <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036b8:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d002      	beq.n	80036c4 <IsLowerCLIbaud+0x74>
}
 80036be:	0018      	movs	r0, r3
 80036c0:	b00e      	add	sp, #56	; 0x38
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c4:	3312      	adds	r3, #18
 80036c6:	446b      	add	r3, sp
 80036c8:	8819      	ldrh	r1, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	9808      	ldr	r0, [sp, #32]
 80036ce:	f00d fd03 	bl	80110d8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036d2:	2005      	movs	r0, #5
 80036d4:	f009 fd34 	bl	800d140 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d8:	ab03      	add	r3, sp, #12
 80036da:	8819      	ldrh	r1, [r3, #0]
 80036dc:	9805      	ldr	r0, [sp, #20]
 80036de:	f00d fcf5 	bl	80110cc <HAL_GPIO_ReadPin>
 80036e2:	3801      	subs	r0, #1
 80036e4:	4243      	negs	r3, r0
 80036e6:	4143      	adcs	r3, r0
			return 1;
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e7e8      	b.n	80036be <IsLowerCLIbaud+0x6e>

080036ec <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036ec:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036ee:	f009 ff0f 	bl	800d510 <GetUart>
 80036f2:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 80036f4:	23e1      	movs	r3, #225	; 0xe1
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	015b      	lsls	r3, r3, #5
 8003704:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003706:	f00f f9d1 	bl	8012aac <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	2120      	movs	r1, #32
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bd10      	pop	{r4, pc}
	...

08003718 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003718:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <IsModuleParameter+0x14>)
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	f7fc fcf1 	bl	8000104 <strcmp>
 8003722:	4243      	negs	r3, r0
 8003724:	4158      	adcs	r0, r3
 8003726:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 8003728:	bd10      	pop	{r4, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000084 	.word	0x20000084

08003730 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003734:	491b      	ldr	r1, [pc, #108]	; (80037a4 <IsMathOperator+0x74>)
 8003736:	f7fc fce5 	bl	8000104 <strcmp>
 800373a:	0006      	movs	r6, r0
 800373c:	2506      	movs	r5, #6
 800373e:	2e00      	cmp	r6, #0
 8003740:	d023      	beq.n	800378a <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003742:	4919      	ldr	r1, [pc, #100]	; (80037a8 <IsMathOperator+0x78>)
 8003744:	0020      	movs	r0, r4
 8003746:	f7fc fcdd 	bl	8000104 <strcmp>
 800374a:	2800      	cmp	r0, #0
 800374c:	d01f      	beq.n	800378e <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800374e:	4917      	ldr	r1, [pc, #92]	; (80037ac <IsMathOperator+0x7c>)
 8003750:	0020      	movs	r0, r4
 8003752:	f7fc fcd7 	bl	8000104 <strcmp>
 8003756:	2800      	cmp	r0, #0
 8003758:	d01b      	beq.n	8003792 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800375a:	4915      	ldr	r1, [pc, #84]	; (80037b0 <IsMathOperator+0x80>)
 800375c:	0020      	movs	r0, r4
 800375e:	f7fc fcd1 	bl	8000104 <strcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	d017      	beq.n	8003796 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003766:	4913      	ldr	r1, [pc, #76]	; (80037b4 <IsMathOperator+0x84>)
 8003768:	0020      	movs	r0, r4
 800376a:	f7fc fccb 	bl	8000104 <strcmp>
 800376e:	2800      	cmp	r0, #0
 8003770:	d013      	beq.n	800379a <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003772:	4911      	ldr	r1, [pc, #68]	; (80037b8 <IsMathOperator+0x88>)
 8003774:	0020      	movs	r0, r4
 8003776:	f7fc fcc5 	bl	8000104 <strcmp>
 800377a:	2800      	cmp	r0, #0
 800377c:	d00f      	beq.n	800379e <IsMathOperator+0x6e>
 800377e:	3d01      	subs	r5, #1
 8003780:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003782:	2d00      	cmp	r5, #0
 8003784:	d1db      	bne.n	800373e <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003786:	2000      	movs	r0, #0
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800378a:	2001      	movs	r0, #1
 800378c:	e7fc      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER;
 800378e:	2002      	movs	r0, #2
 8003790:	e7fa      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003792:	2003      	movs	r0, #3
 8003794:	e7f8      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003796:	2004      	movs	r0, #4
 8003798:	e7f6      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800379a:	2005      	movs	r0, #5
 800379c:	e7f4      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 800379e:	2006      	movs	r0, #6
 80037a0:	e7f2      	b.n	8003788 <IsMathOperator+0x58>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	08017df0 	.word	0x08017df0
 80037a8:	08017df4 	.word	0x08017df4
 80037ac:	08017df8 	.word	0x08017df8
 80037b0:	08017dfc 	.word	0x08017dfc
 80037b4:	08017e00 	.word	0x08017e00
 80037b8:	08017e04 	.word	0x08017e04

080037bc <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	46c6      	mov	lr, r8
 80037c0:	b500      	push	{lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037c6:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <ExploreNeighbors+0x4c>)
 80037ca:	4698      	mov	r8, r3
 80037cc:	4d0f      	ldr	r5, [pc, #60]	; (800380c <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037ce:	2703      	movs	r7, #3
		if(port != ignore){
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d00f      	beq.n	80037f4 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037d4:	4643      	mov	r3, r8
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	0a1a      	lsrs	r2, r3, #8
 80037da:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 80037dc:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 80037de:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037e0:	9700      	str	r7, [sp, #0]
 80037e2:	230a      	movs	r3, #10
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	0020      	movs	r0, r4
 80037ea:	f005 fd41 	bl	8009270 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80037ee:	200a      	movs	r0, #10
 80037f0:	f009 ffdd 	bl	800d7ae <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037f4:	3401      	adds	r4, #1
 80037f6:	b2e4      	uxtb	r4, r4
 80037f8:	2c07      	cmp	r4, #7
 80037fa:	d1e9      	bne.n	80037d0 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	b002      	add	sp, #8
 8003800:	bc04      	pop	{r2}
 8003802:	4690      	mov	r8, r2
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000050 	.word	0x20000050
 800380c:	20000f38 	.word	0x20000f38

08003810 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	46de      	mov	lr, fp
 8003814:	4657      	mov	r7, sl
 8003816:	464e      	mov	r6, r9
 8003818:	4645      	mov	r5, r8
 800381a:	b5e0      	push	{r5, r6, r7, lr}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003820:	4b47      	ldr	r3, [pc, #284]	; (8003940 <FindBroadcastRoutes+0x130>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	469c      	mov	ip, r3
 8003826:	3307      	adds	r3, #7
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	466a      	mov	r2, sp
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	469d      	mov	sp, r3
 8003832:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003834:	4663      	mov	r3, ip
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <FindBroadcastRoutes+0x46>
 800383a:	0023      	movs	r3, r4
 800383c:	4a41      	ldr	r2, [pc, #260]	; (8003944 <FindBroadcastRoutes+0x134>)
 800383e:	4661      	mov	r1, ip
 8003840:	1e4d      	subs	r5, r1, #1
 8003842:	b2ed      	uxtb	r5, r5
 8003844:	3501      	adds	r5, #1
 8003846:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003848:	2100      	movs	r1, #0
 800384a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 800384c:	8011      	strh	r1, [r2, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003852:	42ab      	cmp	r3, r5
 8003854:	d1f9      	bne.n	800384a <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003856:	3801      	subs	r0, #1
 8003858:	2301      	movs	r3, #1
 800385a:	5423      	strb	r3, [r4, r0]
 800385c:	2216      	movs	r2, #22
 800385e:	4342      	muls	r2, r0
 8003860:	3202      	adds	r2, #2
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <FindBroadcastRoutes+0x138>)
 8003864:	18d2      	adds	r2, r2, r3
 8003866:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003868:	4d36      	ldr	r5, [pc, #216]	; (8003944 <FindBroadcastRoutes+0x134>)
 800386a:	0040      	lsls	r0, r0, #1
 800386c:	2301      	movs	r3, #1
 800386e:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003870:	46a3      	mov	fp, r4
 8003872:	e003      	b.n	800387c <FindBroadcastRoutes+0x6c>
 8003874:	3101      	adds	r1, #1
 8003876:	3202      	adds	r2, #2
	for(p =1; p <= NumOfPorts; p++){
 8003878:	2906      	cmp	r1, #6
 800387a:	d011      	beq.n	80038a0 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 800387c:	8813      	ldrh	r3, [r2, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f8      	beq.n	8003874 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003882:	5b46      	ldrh	r6, [r0, r5]
 8003884:	46b1      	mov	r9, r6
 8003886:	4646      	mov	r6, r8
 8003888:	408e      	lsls	r6, r1
 800388a:	46b2      	mov	sl, r6
 800388c:	464e      	mov	r6, r9
 800388e:	4654      	mov	r4, sl
 8003890:	4326      	orrs	r6, r4
 8003892:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	445b      	add	r3, fp
 8003898:	3b01      	subs	r3, #1
 800389a:	2402      	movs	r4, #2
 800389c:	701c      	strb	r4, [r3, #0]
 800389e:	e7e9      	b.n	8003874 <FindBroadcastRoutes+0x64>
 80038a0:	465c      	mov	r4, fp
	++level;												// Move one level
 80038a2:	2602      	movs	r6, #2
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <FindBroadcastRoutes+0x138>)
 80038a6:	3302      	adds	r3, #2
 80038a8:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038aa:	2301      	movs	r3, #1
 80038ac:	469b      	mov	fp, r3
 80038ae:	46b0      	mov	r8, r6
 80038b0:	0026      	movs	r6, r4
		++level;											// Move one level
 80038b2:	4643      	mov	r3, r8
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ba:	4663      	mov	r3, ip
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d035      	beq.n	800392c <FindBroadcastRoutes+0x11c>
 80038c0:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4443      	add	r3, r8
 80038ca:	4699      	mov	r9, r3
 80038cc:	e01e      	b.n	800390c <FindBroadcastRoutes+0xfc>
 80038ce:	3001      	adds	r0, #1
 80038d0:	3102      	adds	r1, #2
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 80038d2:	2806      	cmp	r0, #6
 80038d4:	d015      	beq.n	8003902 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 80038d6:	880b      	ldrh	r3, [r1, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f8      	beq.n	80038ce <FindBroadcastRoutes+0xbe>
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	3b01      	subs	r3, #1
 80038e0:	5cf5      	ldrb	r5, [r6, r3]
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	d1f3      	bne.n	80038ce <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038e8:	5aa5      	ldrh	r5, [r4, r2]
 80038ea:	465a      	mov	r2, fp
 80038ec:	4082      	lsls	r2, r0
 80038ee:	4315      	orrs	r5, r2
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038f2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 80038f4:	4642      	mov	r2, r8
 80038f6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e7e5      	b.n	80038ce <FindBroadcastRoutes+0xbe>
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	4563      	cmp	r3, ip
 800390a:	d20c      	bcs.n	8003926 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800390c:	5cb3      	ldrb	r3, [r6, r2]
 800390e:	454b      	cmp	r3, r9
 8003910:	d1f8      	bne.n	8003904 <FindBroadcastRoutes+0xf4>
 8003912:	2116      	movs	r1, #22
 8003914:	4351      	muls	r1, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	469a      	mov	sl, r3
 800391a:	4451      	add	r1, sl
 800391c:	0053      	lsls	r3, r2, #1
 800391e:	2000      	movs	r0, #0
 8003920:	60ba      	str	r2, [r7, #8]
 8003922:	001c      	movs	r4, r3
 8003924:	e7d7      	b.n	80038d6 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1c2      	bne.n	80038b2 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 800392c:	2000      	movs	r0, #0
 800392e:	46bd      	mov	sp, r7
 8003930:	b005      	add	sp, #20
 8003932:	bc3c      	pop	{r2, r3, r4, r5}
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	46a2      	mov	sl, r4
 800393a:	46ab      	mov	fp, r5
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000001c 	.word	0x2000001c
 8003944:	20000cb8 	.word	0x20000cb8
 8003948:	20000a78 	.word	0x20000a78

0800394c <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 800394e:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003950:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003952:	2b00      	cmp	r3, #0
 8003954:	d100      	bne.n	8003958 <minArr+0xc>
		smallest =arr[0];
 8003956:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <minArr+0x38>)
 800395a:	781d      	ldrb	r5, [r3, #0]
 800395c:	2d00      	cmp	r5, #0
 800395e:	dd0e      	ble.n	800397e <minArr+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	2700      	movs	r7, #0
 8003964:	e002      	b.n	800396c <minArr+0x20>
 8003966:	3301      	adds	r3, #1
 8003968:	42ab      	cmp	r3, r5
 800396a:	da09      	bge.n	8003980 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 800396c:	5cc2      	ldrb	r2, [r0, r3]
 800396e:	42a2      	cmp	r2, r4
 8003970:	d2f9      	bcs.n	8003966 <minArr+0x1a>
 8003972:	5cce      	ldrb	r6, [r1, r3]
 8003974:	2e00      	cmp	r6, #0
 8003976:	d1f6      	bne.n	8003966 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003978:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 800397a:	0014      	movs	r4, r2
 800397c:	e7f3      	b.n	8003966 <minArr+0x1a>
	for(int i =0; i < N; i++){
 800397e:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003980:	0038      	movs	r0, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	2000001c 	.word	0x2000001c

08003988 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <QnotEmpty+0x20>)
 800398a:	7819      	ldrb	r1, [r3, #0]
 800398c:	2900      	cmp	r1, #0
 800398e:	d008      	beq.n	80039a2 <QnotEmpty+0x1a>
 8003990:	0003      	movs	r3, r0
 8003992:	1841      	adds	r1, r0, r1
	char temp =1;
 8003994:	2001      	movs	r0, #1
		temp &=Q[i];
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	4010      	ands	r0, r2
 800399a:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 800399c:	428b      	cmp	r3, r1
 800399e:	d1fa      	bne.n	8003996 <QnotEmpty+0xe>
	}
	
	return temp;
}
 80039a0:	4770      	bx	lr
	char temp =1;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e7fc      	b.n	80039a0 <QnotEmpty+0x18>
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	2000001c 	.word	0x2000001c

080039ac <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	46de      	mov	lr, fp
 80039b0:	4657      	mov	r7, sl
 80039b2:	464e      	mov	r6, r9
 80039b4:	4645      	mov	r5, r8
 80039b6:	b5e0      	push	{r5, r6, r7, lr}
 80039b8:	b08f      	sub	sp, #60	; 0x3c
 80039ba:	0005      	movs	r5, r0
 80039bc:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	2100      	movs	r1, #0
 80039c2:	a801      	add	r0, sp, #4
 80039c4:	f00f fc6a 	bl	801329c <memset>
	memset(route,0,sizeof(route));
 80039c8:	221a      	movs	r2, #26
 80039ca:	2100      	movs	r1, #0
 80039cc:	485a      	ldr	r0, [pc, #360]	; (8003b38 <FindRoute+0x18c>)
 80039ce:	f00f fc65 	bl	801329c <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039d2:	0029      	movs	r1, r5
 80039d4:	1e68      	subs	r0, r5, #1
 80039d6:	2300      	movs	r3, #0
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <FindRoute+0x190>)
 80039da:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <FindRoute+0x194>)
 80039de:	5413      	strb	r3, [r2, r0]
 80039e0:	2516      	movs	r5, #22
 80039e2:	4345      	muls	r5, r0
 80039e4:	3502      	adds	r5, #2
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <FindRoute+0x198>)
 80039e8:	18ed      	adds	r5, r5, r3
 80039ea:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 80039ec:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039ee:	4653      	mov	r3, sl
 80039f0:	b29c      	uxth	r4, r3
 80039f2:	e003      	b.n	80039fc <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 80039f4:	3001      	adds	r0, #1
 80039f6:	3202      	adds	r2, #2
 80039f8:	2807      	cmp	r0, #7
 80039fa:	d00f      	beq.n	8003a1c <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039fc:	8813      	ldrh	r3, [r2, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f8      	beq.n	80039f4 <FindRoute+0x48>
 8003a02:	08db      	lsrs	r3, r3, #3
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d1f5      	bne.n	80039f4 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <FindRoute+0x190>)
 8003a0a:	4453      	add	r3, sl
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <FindRoute+0x18c>)
 8003a14:	4652      	mov	r2, sl
 8003a16:	701a      	strb	r2, [r3, #0]
			return col;
 8003a18:	b2c0      	uxtb	r0, r0
 8003a1a:	e085      	b.n	8003b28 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <FindRoute+0x19c>)
 8003a1e:	781e      	ldrb	r6, [r3, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	dd11      	ble.n	8003a48 <FindRoute+0x9c>
 8003a24:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a26:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a28:	4f45      	ldr	r7, [pc, #276]	; (8003b40 <FindRoute+0x194>)
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	46ac      	mov	ip, r5
 8003a2e:	e002      	b.n	8003a36 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003a30:	3301      	adds	r3, #1
 8003a32:	42b3      	cmp	r3, r6
 8003a34:	dc07      	bgt.n	8003a46 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a36:	4299      	cmp	r1, r3
 8003a38:	d0fa      	beq.n	8003a30 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	4d3f      	ldr	r5, [pc, #252]	; (8003b3c <FindRoute+0x190>)
 8003a3e:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a40:	18ba      	adds	r2, r7, r2
 8003a42:	7010      	strb	r0, [r2, #0]
 8003a44:	e7f4      	b.n	8003a30 <FindRoute+0x84>
 8003a46:	4665      	mov	r5, ip
	uint8_t u =0;
 8003a48:	2400      	movs	r4, #0
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <FindRoute+0x198>)
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	230e      	movs	r3, #14
 8003a50:	4443      	add	r3, r8
 8003a52:	4656      	mov	r6, sl
 8003a54:	469b      	mov	fp, r3
 8003a56:	46a9      	mov	r9, r5
 8003a58:	e01d      	b.n	8003a96 <FindRoute+0xea>
 8003a5a:	464d      	mov	r5, r9
 8003a5c:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	0034      	movs	r4, r6
 8003a60:	e034      	b.n	8003acc <FindRoute+0x120>
 8003a62:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003a64:	4281      	cmp	r1, r0
 8003a66:	d015      	beq.n	8003a94 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a68:	880b      	ldrh	r3, [r1, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f9      	beq.n	8003a62 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003a6e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	5cd7      	ldrb	r7, [r2, r3]
 8003a76:	2f00      	cmp	r7, #0
 8003a78:	d1f3      	bne.n	8003a62 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7a:	4f30      	ldr	r7, [pc, #192]	; (8003b3c <FindRoute+0x190>)
 8003a7c:	5d7f      	ldrb	r7, [r7, r5]
 8003a7e:	3701      	adds	r7, #1
 8003a80:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a82:	4e2e      	ldr	r6, [pc, #184]	; (8003b3c <FindRoute+0x190>)
 8003a84:	5cf6      	ldrb	r6, [r6, r3]
 8003a86:	42be      	cmp	r6, r7
 8003a88:	d9eb      	bls.n	8003a62 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003a8a:	4e2c      	ldr	r6, [pc, #176]	; (8003b3c <FindRoute+0x190>)
 8003a8c:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003a8e:	4e2c      	ldr	r6, [pc, #176]	; (8003b40 <FindRoute+0x194>)
 8003a90:	54f4      	strb	r4, [r6, r3]
 8003a92:	e7e6      	b.n	8003a62 <FindRoute+0xb6>
 8003a94:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7ff ff76 	bl	8003988 <QnotEmpty>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d113      	bne.n	8003ac8 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003aa0:	a901      	add	r1, sp, #4
 8003aa2:	4826      	ldr	r0, [pc, #152]	; (8003b3c <FindRoute+0x190>)
 8003aa4:	f7ff ff52 	bl	800394c <minArr>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003aac:	42b4      	cmp	r4, r6
 8003aae:	d0d4      	beq.n	8003a5a <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003ab0:	1e65      	subs	r5, r4, #1
 8003ab2:	ab01      	add	r3, sp, #4
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	555a      	strb	r2, [r3, r5]
 8003ab8:	2016      	movs	r0, #22
 8003aba:	4368      	muls	r0, r5
 8003abc:	1c81      	adds	r1, r0, #2
 8003abe:	4441      	add	r1, r8
 8003ac0:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	46b2      	mov	sl, r6
 8003ac6:	e7cf      	b.n	8003a68 <FindRoute+0xbc>
 8003ac8:	464d      	mov	r5, r9
 8003aca:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <FindRoute+0x194>)
 8003ace:	191b      	adds	r3, r3, r4
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d00e      	beq.n	8003af8 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <FindRoute+0x18c>)
 8003adc:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ade:	4e18      	ldr	r6, [pc, #96]	; (8003b40 <FindRoute+0x194>)
 8003ae0:	e000      	b.n	8003ae4 <FindRoute+0x138>
 8003ae2:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ae4:	1c58      	adds	r0, r3, #1
 8003ae6:	4661      	mov	r1, ip
 8003ae8:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003aea:	18b3      	adds	r3, r6, r2
 8003aec:	3b01      	subs	r3, #1
 8003aee:	7819      	ldrb	r1, [r3, #0]
 8003af0:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003af2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d1f4      	bne.n	8003ae2 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003af8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003afa:	490f      	ldr	r1, [pc, #60]	; (8003b38 <FindRoute+0x18c>)
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <FindRoute+0x190>)
 8003afe:	4453      	add	r3, sl
 8003b00:	001f      	movs	r7, r3
 8003b02:	3f01      	subs	r7, #1
 8003b04:	e003      	b.n	8003b0e <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003b06:	3001      	adds	r0, #1
 8003b08:	3502      	adds	r5, #2
 8003b0a:	2807      	cmp	r0, #7
 8003b0c:	d00b      	beq.n	8003b26 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b0e:	882b      	ldrh	r3, [r5, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f8      	beq.n	8003b06 <FindRoute+0x15a>
 8003b14:	783a      	ldrb	r2, [r7, #0]
 8003b16:	188a      	adds	r2, r1, r2
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d1f1      	bne.n	8003b06 <FindRoute+0x15a>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e000      	b.n	8003b28 <FindRoute+0x17c>
	return 0;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	b00f      	add	sp, #60	; 0x3c
 8003b2a:	bc3c      	pop	{r2, r3, r4, r5}
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	46a2      	mov	sl, r4
 8003b32:	46ab      	mov	fp, r5
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20006acc 	.word	0x20006acc
 8003b3c:	20001114 	.word	0x20001114
 8003b40:	20001130 	.word	0x20001130
 8003b44:	20000a78 	.word	0x20000a78
 8003b48:	2000001c 	.word	0x2000001c

08003b4c <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	0007      	movs	r7, r0
 8003b52:	000e      	movs	r6, r1
 8003b54:	9205      	str	r2, [sp, #20]
 8003b56:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003b58:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b5a:	7818      	ldrb	r0, [r3, #0]
 8003b5c:	f7ff ff26 	bl	80039ac <FindRoute>
 8003b60:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d020      	beq.n	8003ba8 <remoteBootloaderUpdate+0x5c>
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b68:	781c      	ldrb	r4, [r3, #0]
 8003b6a:	42b4      	cmp	r4, r6
 8003b6c:	d05f      	beq.n	8003c2e <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003b6e:	42bc      	cmp	r4, r7
 8003b70:	d034      	beq.n	8003bdc <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003b72:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003b74:	9805      	ldr	r0, [sp, #20]
 8003b76:	f7ff fdb9 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003b7a:	9804      	ldr	r0, [sp, #16]
 8003b7c:	f7ff fdb6 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d046      	beq.n	8003c16 <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	3303      	adds	r3, #3
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	9a04      	ldr	r2, [sp, #16]
 8003b9e:	9805      	ldr	r0, [sp, #20]
 8003ba0:	f005 fdb4 	bl	800970c <StartScastDMAStream>
}
 8003ba4:	b007      	add	sp, #28
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <remoteBootloaderUpdate+0xf0>)
 8003baa:	199b      	adds	r3, r3, r6
 8003bac:	3b01      	subs	r3, #1
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	d010      	beq.n	8003bd6 <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <remoteBootloaderUpdate+0xf4>)
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	42bb      	cmp	r3, r7
 8003bc2:	d1d7      	bne.n	8003b74 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bc4:	f009 ff08 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 8003bc8:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <remoteBootloaderUpdate+0xf8>)
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	0032      	movs	r2, r6
 8003bd0:	f00f fd5e 	bl	8013690 <sprintf>
 8003bd4:	e00d      	b.n	8003bf2 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bd8:	781c      	ldrb	r4, [r3, #0]
 8003bda:	e7ef      	b.n	8003bbc <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bdc:	f009 fefc 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 8003be0:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003be2:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <remoteBootloaderUpdate+0xfc>)
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	002b      	movs	r3, r5
 8003bea:	0032      	movs	r2, r6
 8003bec:	0038      	movs	r0, r7
 8003bee:	f00f fd4f 	bl	8013690 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <remoteBootloaderUpdate+0x100>)
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	0038      	movs	r0, r7
 8003bf8:	f00f fd6a 	bl	80136d0 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003bfc:	0038      	movs	r0, r7
 8003bfe:	f7fc fa8b 	bl	8000118 <strlen>
 8003c02:	b282      	uxth	r2, r0
 8003c04:	2332      	movs	r3, #50	; 0x32
 8003c06:	0039      	movs	r1, r7
 8003c08:	9805      	ldr	r0, [sp, #20]
 8003c0a:	f009 fccb 	bl	800d5a4 <writePxITMutex>
		Delay_ms(100);
 8003c0e:	2064      	movs	r0, #100	; 0x64
 8003c10:	f00b fdf8 	bl	800f804 <HAL_Delay>
 8003c14:	e7ae      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003c16:	9804      	ldr	r0, [sp, #16]
 8003c18:	f009 fc7a 	bl	800d510 <GetUart>
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f009 fd11 	bl	800d644 <SwapUartPins>
 8003c22:	e7b1      	b.n	8003b88 <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c24:	f009 fed8 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 8003c28:	0007      	movs	r7, r0
		myOutport =outport;
 8003c2a:	9504      	str	r5, [sp, #16]
 8003c2c:	e7da      	b.n	8003be4 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003c2e:	42bc      	cmp	r4, r7
 8003c30:	d0f8      	beq.n	8003c24 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003c32:	9504      	str	r5, [sp, #16]
 8003c34:	e79e      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20001076 	.word	0x20001076
 8003c3c:	20001114 	.word	0x20001114
 8003c40:	20006acc 	.word	0x20006acc
 8003c44:	20000078 	.word	0x20000078
 8003c48:	2000007c 	.word	0x2000007c
 8003c4c:	20000080 	.word	0x20000080

08003c50 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	46d6      	mov	lr, sl
 8003c54:	464f      	mov	r7, r9
 8003c56:	4646      	mov	r6, r8
 8003c58:	b5c0      	push	{r6, r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	0005      	movs	r5, r0
 8003c5e:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	4c56      	ldr	r4, [pc, #344]	; (8003dbc <DisplayTopology+0x16c>)
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <DisplayTopology+0x170>)
 8003c64:	0022      	movs	r2, r4
 8003c66:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003c68:	c243      	stmia	r2!, {r0, r1, r6}
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c72:	0020      	movs	r0, r4
 8003c74:	f7fc fa50 	bl	8000118 <strlen>
 8003c78:	b282      	uxth	r2, r0
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	3333      	adds	r3, #51	; 0x33
 8003c82:	0021      	movs	r1, r4
 8003c84:	0028      	movs	r0, r5
 8003c86:	f009 fc65 	bl	800d554 <writePxMutex>
 8003c8a:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c8c:	4f4d      	ldr	r7, [pc, #308]	; (8003dc4 <DisplayTopology+0x174>)
 8003c8e:	4d4b      	ldr	r5, [pc, #300]	; (8003dbc <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c90:	2601      	movs	r6, #1
 8003c92:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003c94:	0022      	movs	r2, r4
 8003c96:	0039      	movs	r1, r7
 8003c98:	0028      	movs	r0, r5
 8003c9a:	f00f fcf9 	bl	8013690 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	f7fc fa3a 	bl	8000118 <strlen>
 8003ca4:	b282      	uxth	r2, r0
 8003ca6:	9600      	str	r6, [sp, #0]
 8003ca8:	2332      	movs	r3, #50	; 0x32
 8003caa:	0029      	movs	r1, r5
 8003cac:	9803      	ldr	r0, [sp, #12]
 8003cae:	f009 fc51 	bl	800d554 <writePxMutex>
 8003cb2:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cb4:	2c07      	cmp	r4, #7
 8003cb6:	d1ed      	bne.n	8003c94 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cb8:	2301      	movs	r3, #1
 8003cba:	425b      	negs	r3, r3
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	3333      	adds	r3, #51	; 0x33
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <DisplayTopology+0x178>)
 8003cc4:	9803      	ldr	r0, [sp, #12]
 8003cc6:	f009 fc45 	bl	800d554 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <DisplayTopology+0x17c>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d065      	beq.n	8003d9e <DisplayTopology+0x14e>
 8003cd2:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cd4:	2701      	movs	r7, #1
 8003cd6:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <DisplayTopology+0x180>)
 8003cda:	4699      	mov	r9, r3
 8003cdc:	230e      	movs	r3, #14
 8003cde:	444b      	add	r3, r9
 8003ce0:	469a      	mov	sl, r3
 8003ce2:	e02a      	b.n	8003d3a <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce4:	2307      	movs	r3, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	08d2      	lsrs	r2, r2, #3
 8003cea:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <DisplayTopology+0x184>)
 8003cec:	4833      	ldr	r0, [pc, #204]	; (8003dbc <DisplayTopology+0x16c>)
 8003cee:	f00f fccf 	bl	8013690 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf2:	4d32      	ldr	r5, [pc, #200]	; (8003dbc <DisplayTopology+0x16c>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f7fc fa0f 	bl	8000118 <strlen>
 8003cfa:	b282      	uxth	r2, r0
 8003cfc:	9700      	str	r7, [sp, #0]
 8003cfe:	2332      	movs	r3, #50	; 0x32
 8003d00:	0029      	movs	r1, r5
 8003d02:	9803      	ldr	r0, [sp, #12]
 8003d04:	f009 fc26 	bl	800d554 <writePxMutex>
 8003d08:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d0a:	42b4      	cmp	r4, r6
 8003d0c:	d007      	beq.n	8003d1e <DisplayTopology+0xce>
			if(!array[row][col])
 8003d0e:	8822      	ldrh	r2, [r4, #0]
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d1e7      	bne.n	8003ce4 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d14:	4930      	ldr	r1, [pc, #192]	; (8003dd8 <DisplayTopology+0x188>)
 8003d16:	4829      	ldr	r0, [pc, #164]	; (8003dbc <DisplayTopology+0x16c>)
 8003d18:	f00f fcba 	bl	8013690 <sprintf>
 8003d1c:	e7e9      	b.n	8003cf2 <DisplayTopology+0xa2>
 8003d1e:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d20:	9700      	str	r7, [sp, #0]
 8003d22:	2332      	movs	r3, #50	; 0x32
 8003d24:	2202      	movs	r2, #2
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <DisplayTopology+0x18c>)
 8003d28:	9803      	ldr	r0, [sp, #12]
 8003d2a:	f009 fc13 	bl	800d554 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d2e:	3601      	adds	r6, #1
 8003d30:	b2f6      	uxtb	r6, r6
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <DisplayTopology+0x17c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	42b3      	cmp	r3, r6
 8003d38:	d931      	bls.n	8003d9e <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d3a:	1c72      	adds	r2, r6, #1
 8003d3c:	4c1f      	ldr	r4, [pc, #124]	; (8003dbc <DisplayTopology+0x16c>)
 8003d3e:	4928      	ldr	r1, [pc, #160]	; (8003de0 <DisplayTopology+0x190>)
 8003d40:	0020      	movs	r0, r4
 8003d42:	f00f fca5 	bl	8013690 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d46:	0020      	movs	r0, r4
 8003d48:	f7fc f9e6 	bl	8000118 <strlen>
 8003d4c:	b282      	uxth	r2, r0
 8003d4e:	9700      	str	r7, [sp, #0]
 8003d50:	2332      	movs	r3, #50	; 0x32
 8003d52:	0021      	movs	r1, r4
 8003d54:	9803      	ldr	r0, [sp, #12]
 8003d56:	f009 fbfd 	bl	800d554 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d5a:	2516      	movs	r5, #22
 8003d5c:	4375      	muls	r5, r6
 8003d5e:	464b      	mov	r3, r9
 8003d60:	5aeb      	ldrh	r3, [r5, r3]
 8003d62:	0059      	lsls	r1, r3, #1
 8003d64:	18c9      	adds	r1, r1, r3
 8003d66:	0049      	lsls	r1, r1, #1
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <DisplayTopology+0x194>)
 8003d6a:	18c9      	adds	r1, r1, r3
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f00f fce3 	bl	801373a <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d74:	9700      	str	r7, [sp, #0]
 8003d76:	2332      	movs	r3, #50	; 0x32
 8003d78:	2205      	movs	r2, #5
 8003d7a:	0021      	movs	r1, r4
 8003d7c:	9c03      	ldr	r4, [sp, #12]
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f009 fbe8 	bl	800d554 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d84:	9700      	str	r7, [sp, #0]
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4917      	ldr	r1, [pc, #92]	; (8003de8 <DisplayTopology+0x198>)
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f009 fbe1 	bl	800d554 <writePxMutex>
 8003d92:	1cac      	adds	r4, r5, #2
 8003d94:	444c      	add	r4, r9
 8003d96:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003d98:	46b0      	mov	r8, r6
 8003d9a:	002e      	movs	r6, r5
 8003d9c:	e7b7      	b.n	8003d0e <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d9e:	2301      	movs	r3, #1
 8003da0:	425b      	negs	r3, r3
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	3333      	adds	r3, #51	; 0x33
 8003da6:	2201      	movs	r2, #1
 8003da8:	4910      	ldr	r1, [pc, #64]	; (8003dec <DisplayTopology+0x19c>)
 8003daa:	9803      	ldr	r0, [sp, #12]
 8003dac:	f009 fbd2 	bl	800d554 <writePxMutex>
}
 8003db0:	b004      	add	sp, #16
 8003db2:	bc1c      	pop	{r2, r3, r4}
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	200010a8 	.word	0x200010a8
 8003dc0:	08017db4 	.word	0x08017db4
 8003dc4:	08017dc8 	.word	0x08017dc8
 8003dc8:	0801924c 	.word	0x0801924c
 8003dcc:	2000001c 	.word	0x2000001c
 8003dd0:	20000a78 	.word	0x20000a78
 8003dd4:	08017de0 	.word	0x08017de0
 8003dd8:	08017ddc 	.word	0x08017ddc
 8003ddc:	08017c5c 	.word	0x08017c5c
 8003de0:	08017dd0 	.word	0x08017dd0
 8003de4:	08017e1c 	.word	0x08017e1c
 8003de8:	08017dc4 	.word	0x08017dc4
 8003dec:	08019410 	.word	0x08019410

08003df0 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df2:	46c6      	mov	lr, r8
 8003df4:	b500      	push	{lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	0005      	movs	r5, r0
 8003dfa:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003dfc:	4c30      	ldr	r4, [pc, #192]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <DisplayPortsDir+0xd4>)
 8003e00:	0022      	movs	r2, r4
 8003e02:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e04:	c243      	stmia	r2!, {r0, r1, r6}
 8003e06:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e08:	c243      	stmia	r2!, {r0, r1, r6}
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7fc f982 	bl	8000118 <strlen>
 8003e14:	b282      	uxth	r2, r0
 8003e16:	2301      	movs	r3, #1
 8003e18:	425b      	negs	r3, r3
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	3333      	adds	r3, #51	; 0x33
 8003e1e:	0021      	movs	r1, r4
 8003e20:	0028      	movs	r0, r5
 8003e22:	f009 fb97 	bl	800d554 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02c      	beq.n	8003e8c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e32:	4e26      	ldr	r6, [pc, #152]	; (8003ecc <DisplayPortsDir+0xdc>)
 8003e34:	e025      	b.n	8003e82 <DisplayPortsDir+0x92>
 8003e36:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e38:	2c0a      	cmp	r4, #10
 8003e3a:	d01a      	beq.n	8003e72 <DisplayPortsDir+0x82>
 8003e3c:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e3e:	5ba9      	ldrh	r1, [r5, r6]
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	411a      	asrs	r2, r3
 8003e46:	420a      	tst	r2, r1
 8003e48:	d0f5      	beq.n	8003e36 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e4a:	4f1d      	ldr	r7, [pc, #116]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	4642      	mov	r2, r8
 8003e50:	491f      	ldr	r1, [pc, #124]	; (8003ed0 <DisplayPortsDir+0xe0>)
 8003e52:	0038      	movs	r0, r7
 8003e54:	f00f fc1c 	bl	8013690 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e58:	0038      	movs	r0, r7
 8003e5a:	f7fc f95d 	bl	8000118 <strlen>
 8003e5e:	b282      	uxth	r2, r0
 8003e60:	2301      	movs	r3, #1
 8003e62:	425b      	negs	r3, r3
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	3333      	adds	r3, #51	; 0x33
 8003e68:	0039      	movs	r1, r7
 8003e6a:	9803      	ldr	r0, [sp, #12]
 8003e6c:	f009 fb72 	bl	800d554 <writePxMutex>
 8003e70:	e7e1      	b.n	8003e36 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003e72:	4643      	mov	r3, r8
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4698      	mov	r8, r3
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4543      	cmp	r3, r8
 8003e80:	d304      	bcc.n	8003e8c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003e82:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e84:	4642      	mov	r2, r8
 8003e86:	1e55      	subs	r5, r2, #1
 8003e88:	006d      	lsls	r5, r5, #1
 8003e8a:	e7d7      	b.n	8003e3c <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003e8c:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <DisplayPortsDir+0xe4>)
 8003e90:	0022      	movs	r2, r4
 8003e92:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e94:	c223      	stmia	r2!, {r0, r1, r5}
 8003e96:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e98:	c223      	stmia	r2!, {r0, r1, r5}
 8003e9a:	cb03      	ldmia	r3!, {r0, r1}
 8003e9c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	f7fc f93a 	bl	8000118 <strlen>
 8003ea4:	b282      	uxth	r2, r0
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	3333      	adds	r3, #51	; 0x33
 8003eae:	0021      	movs	r1, r4
 8003eb0:	9803      	ldr	r0, [sp, #12]
 8003eb2:	f009 fb4f 	bl	800d554 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bc04      	pop	{r2}
 8003eba:	4690      	mov	r8, r2
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	200010a8 	.word	0x200010a8
 8003ec4:	08017d64 	.word	0x08017d64
 8003ec8:	2000001c 	.word	0x2000001c
 8003ecc:	20006e98 	.word	0x20006e98
 8003ed0:	08017d80 	.word	0x08017d80
 8003ed4:	08017d94 	.word	0x08017d94

08003ed8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	46d6      	mov	lr, sl
 8003edc:	b500      	push	{lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003ee2:	f009 fd79 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 8003ee6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003ee8:	2300      	movs	r3, #0
 8003eea:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <DisplayModuleStatus+0x24c>)
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4d8d      	ldr	r5, [pc, #564]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ef2:	498e      	ldr	r1, [pc, #568]	; (800412c <DisplayModuleStatus+0x254>)
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	f00f fbcb 	bl	8013690 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003efa:	0029      	movs	r1, r5
 8003efc:	0020      	movs	r0, r4
 8003efe:	f00f fbe7 	bl	80136d0 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <DisplayModuleStatus+0x258>)
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	498b      	ldr	r1, [pc, #556]	; (8004134 <DisplayModuleStatus+0x25c>)
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f00f fbc1 	bl	8013690 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f0e:	0029      	movs	r1, r5
 8003f10:	0020      	movs	r0, r4
 8003f12:	f00f fbdd 	bl	80136d0 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	3b03      	subs	r3, #3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4986      	ldr	r1, [pc, #536]	; (8004138 <DisplayModuleStatus+0x260>)
 8003f20:	0028      	movs	r0, r5
 8003f22:	f00f fbb5 	bl	8013690 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f26:	0029      	movs	r1, r5
 8003f28:	0020      	movs	r0, r4
 8003f2a:	f00f fbd1 	bl	80136d0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f2e:	4a83      	ldr	r2, [pc, #524]	; (800413c <DisplayModuleStatus+0x264>)
 8003f30:	4983      	ldr	r1, [pc, #524]	; (8004140 <DisplayModuleStatus+0x268>)
 8003f32:	0028      	movs	r0, r5
 8003f34:	f00f fbac 	bl	8013690 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f38:	0029      	movs	r1, r5
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f00f fbc8 	bl	80136d0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f40:	4a80      	ldr	r2, [pc, #512]	; (8004144 <DisplayModuleStatus+0x26c>)
 8003f42:	4981      	ldr	r1, [pc, #516]	; (8004148 <DisplayModuleStatus+0x270>)
 8003f44:	0028      	movs	r0, r5
 8003f46:	f00f fba3 	bl	8013690 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f00f fbbf 	bl	80136d0 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f52:	4b7e      	ldr	r3, [pc, #504]	; (800414c <DisplayModuleStatus+0x274>)
 8003f54:	002a      	movs	r2, r5
 8003f56:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f58:	c243      	stmia	r2!, {r0, r1, r6}
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	8899      	ldrh	r1, [r3, #4]
 8003f60:	8091      	strh	r1, [r2, #4]
 8003f62:	799b      	ldrb	r3, [r3, #6]
 8003f64:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f66:	0029      	movs	r1, r5
 8003f68:	0020      	movs	r0, r4
 8003f6a:	f00f fbb1 	bl	80136d0 <strcat>
 8003f6e:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003f70:	4d6d      	ldr	r5, [pc, #436]	; (8004128 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <DisplayModuleStatus+0x278>)
 8003f74:	469a      	mov	sl, r3
 8003f76:	e00e      	b.n	8003f96 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f7a:	4a76      	ldr	r2, [pc, #472]	; (8004154 <DisplayModuleStatus+0x27c>)
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	8891      	ldrh	r1, [r2, #4]
 8003f82:	8099      	strh	r1, [r3, #4]
 8003f84:	7992      	ldrb	r2, [r2, #6]
 8003f86:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	4967      	ldr	r1, [pc, #412]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f00f fba0 	bl	80136d0 <strcat>
 8003f90:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f92:	2f07      	cmp	r7, #7
 8003f94:	d039      	beq.n	800400a <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003f96:	003a      	movs	r2, r7
 8003f98:	496f      	ldr	r1, [pc, #444]	; (8004158 <DisplayModuleStatus+0x280>)
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f00f fb78 	bl	8013690 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fa0:	0029      	movs	r1, r5
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	f00f fb94 	bl	80136d0 <strcat>
		switch(portStatus[i]){
 8003fa8:	4653      	mov	r3, sl
 8003faa:	5cfb      	ldrb	r3, [r7, r3]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d8eb      	bhi.n	8003f88 <DisplayModuleStatus+0xb0>
 8003fb0:	4653      	mov	r3, sl
 8003fb2:	5cfb      	ldrb	r3, [r7, r3]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <DisplayModuleStatus+0x284>)
 8003fb8:	58d3      	ldr	r3, [r2, r3]
 8003fba:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003fbc:	495a      	ldr	r1, [pc, #360]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fbe:	4b68      	ldr	r3, [pc, #416]	; (8004160 <DisplayModuleStatus+0x288>)
 8003fc0:	000a      	movs	r2, r1
 8003fc2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fc4:	c243      	stmia	r2!, {r0, r1, r6}
 8003fc6:	cb03      	ldmia	r3!, {r0, r1}
 8003fc8:	c203      	stmia	r2!, {r0, r1}
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7013      	strb	r3, [r2, #0]
				break;
 8003fce:	e7db      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003fd0:	4a55      	ldr	r2, [pc, #340]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <DisplayModuleStatus+0x28c>)
 8003fd4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fd6:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8003fd8:	e7d6      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fda:	4953      	ldr	r1, [pc, #332]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fdc:	4b62      	ldr	r3, [pc, #392]	; (8004168 <DisplayModuleStatus+0x290>)
 8003fde:	000a      	movs	r2, r1
 8003fe0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe2:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe6:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	8013      	strh	r3, [r2, #0]
				break;
 8003fec:	e7cc      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003fee:	494e      	ldr	r1, [pc, #312]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <DisplayModuleStatus+0x294>)
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff6:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff8:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ffa:	c243      	stmia	r2!, {r0, r1, r6}
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	8899      	ldrh	r1, [r3, #4]
 8004002:	8091      	strh	r1, [r2, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	7193      	strb	r3, [r2, #6]
				break;
 8004008:	e7be      	b.n	8003f88 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800400a:	4947      	ldr	r1, [pc, #284]	; (8004128 <DisplayModuleStatus+0x250>)
 800400c:	4b58      	ldr	r3, [pc, #352]	; (8004170 <DisplayModuleStatus+0x298>)
 800400e:	000a      	movs	r2, r1
 8004010:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004012:	c261      	stmia	r2!, {r0, r5, r6}
 8004014:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004016:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004018:	0020      	movs	r0, r4
 800401a:	f00f fb59 	bl	80136d0 <strcat>
 800401e:	4f55      	ldr	r7, [pc, #340]	; (8004174 <DisplayModuleStatus+0x29c>)
 8004020:	2601      	movs	r6, #1
 8004022:	e00d      	b.n	8004040 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004024:	4d40      	ldr	r5, [pc, #256]	; (8004128 <DisplayModuleStatus+0x250>)
 8004026:	0032      	movs	r2, r6
 8004028:	4953      	ldr	r1, [pc, #332]	; (8004178 <DisplayModuleStatus+0x2a0>)
 800402a:	0028      	movs	r0, r5
 800402c:	f00f fb30 	bl	8013690 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004030:	0029      	movs	r1, r5
 8004032:	0020      	movs	r0, r4
 8004034:	f00f fb4c 	bl	80136d0 <strcat>
 8004038:	3601      	adds	r6, #1
 800403a:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403c:	2e07      	cmp	r6, #7
 800403e:	d018      	beq.n	8004072 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004048:	f007 fb1c 	bl	800b684 <GetPort>
 800404c:	0005      	movs	r5, r0
 800404e:	00b3      	lsls	r3, r6, #2
 8004050:	3b04      	subs	r3, #4
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <DisplayModuleStatus+0x2a4>)
 8004054:	58d0      	ldr	r0, [r2, r3]
 8004056:	f007 fb15 	bl	800b684 <GetPort>
 800405a:	9000      	str	r0, [sp, #0]
 800405c:	002b      	movs	r3, r5
 800405e:	0032      	movs	r2, r6
 8004060:	4947      	ldr	r1, [pc, #284]	; (8004180 <DisplayModuleStatus+0x2a8>)
 8004062:	4831      	ldr	r0, [pc, #196]	; (8004128 <DisplayModuleStatus+0x250>)
 8004064:	f00f fb14 	bl	8013690 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004068:	492f      	ldr	r1, [pc, #188]	; (8004128 <DisplayModuleStatus+0x250>)
 800406a:	0020      	movs	r0, r4
 800406c:	f00f fb30 	bl	80136d0 <strcat>
 8004070:	e7e2      	b.n	8004038 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004072:	0020      	movs	r0, r4
 8004074:	f7fc f850 	bl	8000118 <strlen>
 8004078:	1820      	adds	r0, r4, r0
 800407a:	2203      	movs	r2, #3
 800407c:	4941      	ldr	r1, [pc, #260]	; (8004184 <DisplayModuleStatus+0x2ac>)
 800407e:	f00f f904 	bl	801328a <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004082:	0020      	movs	r0, r4
 8004084:	f7fc f848 	bl	8000118 <strlen>
 8004088:	1820      	adds	r0, r4, r0
 800408a:	221d      	movs	r2, #29
 800408c:	493e      	ldr	r1, [pc, #248]	; (8004188 <DisplayModuleStatus+0x2b0>)
 800408e:	f00f f8fc 	bl	801328a <memcpy>
	temp =strlen((char* )pcOutputString);
 8004092:	0020      	movs	r0, r4
 8004094:	f7fc f840 	bl	8000118 <strlen>
 8004098:	4682      	mov	sl, r0
 800409a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409c:	4f3b      	ldr	r7, [pc, #236]	; (800418c <DisplayModuleStatus+0x2b4>)
 800409e:	4e21      	ldr	r6, [pc, #132]	; (8004124 <DisplayModuleStatus+0x24c>)
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1d0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d013      	beq.n	80040d0 <DisplayModuleStatus+0x1f8>
 80040a8:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040aa:	7833      	ldrb	r3, [r6, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	5bd9      	ldrh	r1, [r3, r7]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4113      	asrs	r3, r2
 80040b8:	420b      	tst	r3, r1
 80040ba:	d0f2      	beq.n	80040a2 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040bc:	002a      	movs	r2, r5
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <DisplayModuleStatus+0x2b8>)
 80040c0:	4819      	ldr	r0, [pc, #100]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c2:	f00f fae5 	bl	8013690 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c6:	4918      	ldr	r1, [pc, #96]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c8:	0020      	movs	r0, r4
 80040ca:	f00f fb01 	bl	80136d0 <strcat>
 80040ce:	e7e8      	b.n	80040a2 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7fc f821 	bl	8000118 <strlen>
 80040d6:	4653      	mov	r3, sl
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	4298      	cmp	r0, r3
 80040de:	d00e      	beq.n	80040fe <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7fc f819 	bl	8000118 <strlen>
 80040e6:	1820      	adds	r0, r4, r0
 80040e8:	2203      	movs	r2, #3
 80040ea:	4926      	ldr	r1, [pc, #152]	; (8004184 <DisplayModuleStatus+0x2ac>)
 80040ec:	f00f f8cd 	bl	801328a <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80040f6:	b004      	add	sp, #16
 80040f8:	bc04      	pop	{r2}
 80040fa:	4692      	mov	sl, r2
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80040fe:	1820      	adds	r0, r4, r0
 8004100:	2205      	movs	r2, #5
 8004102:	4924      	ldr	r1, [pc, #144]	; (8004194 <DisplayModuleStatus+0x2bc>)
 8004104:	f00f f8c1 	bl	801328a <memcpy>
 8004108:	e7ea      	b.n	80040e0 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800410a:	0020      	movs	r0, r4
 800410c:	f7fc f804 	bl	8000118 <strlen>
 8004110:	b282      	uxth	r2, r0
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	3333      	adds	r3, #51	; 0x33
 800411a:	0021      	movs	r1, r4
 800411c:	9803      	ldr	r0, [sp, #12]
 800411e:	f009 fa19 	bl	800d554 <writePxMutex>
}
 8004122:	e7e8      	b.n	80040f6 <DisplayModuleStatus+0x21e>
 8004124:	20001076 	.word	0x20001076
 8004128:	200010a8 	.word	0x200010a8
 800412c:	08017ba8 	.word	0x08017ba8
 8004130:	20000a77 	.word	0x20000a77
 8004134:	08017bc4 	.word	0x08017bc4
 8004138:	08017be0 	.word	0x08017be0
 800413c:	08017c00 	.word	0x08017c00
 8004140:	08017c0c 	.word	0x08017c0c
 8004144:	08017c24 	.word	0x08017c24
 8004148:	08017c30 	.word	0x08017c30
 800414c:	08017c4c 	.word	0x08017c4c
 8004150:	200010f8 	.word	0x200010f8
 8004154:	08017c68 	.word	0x08017c68
 8004158:	08017c60 	.word	0x08017c60
 800415c:	08017b84 	.word	0x08017b84
 8004160:	08017c70 	.word	0x08017c70
 8004164:	08017c88 	.word	0x08017c88
 8004168:	08017c94 	.word	0x08017c94
 800416c:	08017cb0 	.word	0x08017cb0
 8004170:	08017cd0 	.word	0x08017cd0
 8004174:	20001998 	.word	0x20001998
 8004178:	08017ce8 	.word	0x08017ce8
 800417c:	200014a8 	.word	0x200014a8
 8004180:	08017d04 	.word	0x08017d04
 8004184:	08017c5c 	.word	0x08017c5c
 8004188:	08017d34 	.word	0x08017d34
 800418c:	20006e98 	.word	0x20006e98
 8004190:	08017d54 	.word	0x08017d54
 8004194:	08017d5c 	.word	0x08017d5c

08004198 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	46c6      	mov	lr, r8
 800419c:	b500      	push	{lr}
 800419e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041a0:	4929      	ldr	r1, [pc, #164]	; (8004248 <GetID+0xb0>)
 80041a2:	f7fb ffaf 	bl	8000104 <strcmp>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d010      	beq.n	80041cc <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 80041aa:	4928      	ldr	r1, [pc, #160]	; (800424c <GetID+0xb4>)
 80041ac:	0028      	movs	r0, r5
 80041ae:	f7fb ffa9 	bl	8000104 <strcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d045      	beq.n	8004242 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041b6:	782b      	ldrb	r3, [r5, #0]
 80041b8:	4698      	mov	r8, r3
 80041ba:	2b23      	cmp	r3, #35	; 0x23
 80041bc:	d00b      	beq.n	80041d6 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <GetID+0xb8>)
 80041c0:	781f      	ldrb	r7, [r3, #0]
 80041c2:	2f00      	cmp	r7, #0
 80041c4:	d02a      	beq.n	800421c <GetID+0x84>
 80041c6:	4e23      	ldr	r6, [pc, #140]	; (8004254 <GetID+0xbc>)
 80041c8:	2400      	movs	r4, #0
 80041ca:	e01c      	b.n	8004206 <GetID+0x6e>
		return myID;
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <GetID+0xc0>)
 80041ce:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80041d0:	bc04      	pop	{r2}
 80041d2:	4690      	mov	r8, r2
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 80041d6:	1c68      	adds	r0, r5, #1
 80041d8:	f00e fdcd 	bl	8012d76 <atol>
 80041dc:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <GetID+0x52>
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <GetID+0xb8>)
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d206      	bcs.n	80041f8 <GetID+0x60>
		else if(id == myID)
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <GetID+0xc0>)
 80041ec:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80041ee:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1ed      	bne.n	80041d0 <GetID+0x38>
			return myID;
 80041f4:	b210      	sxth	r0, r2
 80041f6:	e7eb      	b.n	80041d0 <GetID+0x38>
			return id;
 80041f8:	b218      	sxth	r0, r3
 80041fa:	e7e9      	b.n	80041d0 <GetID+0x38>
		for(i =0; i < N; i++){
 80041fc:	3401      	adds	r4, #1
 80041fe:	b2e4      	uxtb	r4, r4
 8004200:	360a      	adds	r6, #10
 8004202:	42bc      	cmp	r4, r7
 8004204:	d00a      	beq.n	800421c <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004206:	0031      	movs	r1, r6
 8004208:	0028      	movs	r0, r5
 800420a:	f7fb ff7b 	bl	8000104 <strcmp>
 800420e:	2800      	cmp	r0, #0
 8004210:	d1f4      	bne.n	80041fc <GetID+0x64>
 8004212:	4643      	mov	r3, r8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f1      	beq.n	80041fc <GetID+0x64>
				return (i);
 8004218:	b220      	sxth	r0, r4
 800421a:	e7d9      	b.n	80041d0 <GetID+0x38>
 800421c:	4f0f      	ldr	r7, [pc, #60]	; (800425c <GetID+0xc4>)
		for(i =0; i < N; i++){
 800421e:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004220:	0039      	movs	r1, r7
 8004222:	0028      	movs	r0, r5
 8004224:	f7fb ff6e 	bl	8000104 <strcmp>
 8004228:	2800      	cmp	r0, #0
 800422a:	d005      	beq.n	8004238 <GetID+0xa0>
 800422c:	3601      	adds	r6, #1
 800422e:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004230:	2e0a      	cmp	r6, #10
 8004232:	d1f5      	bne.n	8004220 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	e7cb      	b.n	80041d0 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004238:	0234      	lsls	r4, r6, #8
 800423a:	20fe      	movs	r0, #254	; 0xfe
 800423c:	4320      	orrs	r0, r4
 800423e:	b200      	sxth	r0, r0
 8004240:	e7c6      	b.n	80041d0 <GetID+0x38>
		return BOS_BROADCAST;
 8004242:	20ff      	movs	r0, #255	; 0xff
 8004244:	e7c4      	b.n	80041d0 <GetID+0x38>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	08017de8 	.word	0x08017de8
 800424c:	08017dec 	.word	0x08017dec
 8004250:	2000001c 	.word	0x2000001c
 8004254:	20000f68 	.word	0x20000f68
 8004258:	20001076 	.word	0x20001076
 800425c:	20000e5c 	.word	0x20000e5c

08004260 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b083      	sub	sp, #12
 8004264:	9001      	str	r0, [sp, #4]
 8004266:	000d      	movs	r5, r1
 8004268:	4c2a      	ldr	r4, [pc, #168]	; (8004314 <NameModule+0xb4>)
 800426a:	0027      	movs	r7, r4
 800426c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800426e:	0021      	movs	r1, r4
 8004270:	0028      	movs	r0, r5
 8004272:	f7fb ff47 	bl	8000104 <strcmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	d043      	beq.n	8004302 <NameModule+0xa2>
 800427a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800427c:	42bc      	cmp	r4, r7
 800427e:	d1f6      	bne.n	800426e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <NameModule+0xb8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d90f      	bls.n	80042a8 <NameModule+0x48>
 8004288:	4c24      	ldr	r4, [pc, #144]	; (800431c <NameModule+0xbc>)
 800428a:	009f      	lsls	r7, r3, #2
 800428c:	18ff      	adds	r7, r7, r3
 800428e:	007f      	lsls	r7, r7, #1
 8004290:	0023      	movs	r3, r4
 8004292:	3b0a      	subs	r3, #10
 8004294:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004296:	0021      	movs	r1, r4
 8004298:	0028      	movs	r0, r5
 800429a:	f7fb ff33 	bl	8000104 <strcmp>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d031      	beq.n	8004306 <NameModule+0xa6>
 80042a2:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 80042a4:	42bc      	cmp	r4, r7
 80042a6:	d1f6      	bne.n	8004296 <NameModule+0x36>
 80042a8:	4c1d      	ldr	r4, [pc, #116]	; (8004320 <NameModule+0xc0>)
 80042aa:	0027      	movs	r7, r4
 80042ac:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 80042ae:	0021      	movs	r1, r4
 80042b0:	0028      	movs	r0, r5
 80042b2:	f7fb ff27 	bl	8000104 <strcmp>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d028      	beq.n	800430c <NameModule+0xac>
 80042ba:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80042bc:	42bc      	cmp	r4, r7
 80042be:	d1f6      	bne.n	80042ae <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042c0:	4c18      	ldr	r4, [pc, #96]	; (8004324 <NameModule+0xc4>)
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <NameModule+0xc8>)
 80042c4:	601c      	str	r4, [r3, #0]
 80042c6:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80042cc:	0038      	movs	r0, r7
 80042ce:	f7fb ff23 	bl	8000118 <strlen>
 80042d2:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80042d4:	0039      	movs	r1, r7
 80042d6:	0028      	movs	r0, r5
 80042d8:	f00f fa1e 	bl	8013718 <strncmp>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d017      	beq.n	8004310 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042e0:	6864      	ldr	r4, [r4, #4]
 80042e2:	6034      	str	r4, [r6, #0]
 80042e4:	2c00      	cmp	r4, #0
 80042e6:	d1ef      	bne.n	80042c8 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	0098      	lsls	r0, r3, #2
 80042ec:	469c      	mov	ip, r3
 80042ee:	4460      	add	r0, ip
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	4e0e      	ldr	r6, [pc, #56]	; (800432c <NameModule+0xcc>)
 80042f4:	1980      	adds	r0, r0, r6
 80042f6:	0029      	movs	r1, r5
 80042f8:	f00f fa06 	bl	8013708 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80042fc:	f7ff f8a6 	bl	800344c <SaveEEalias>
	
	return result;
 8004300:	e002      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004302:	2006      	movs	r0, #6
 8004304:	e000      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 8004306:	2007      	movs	r0, #7
}
 8004308:	b003      	add	sp, #12
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800430c:	2007      	movs	r0, #7
 800430e:	e7fb      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004310:	2008      	movs	r0, #8
 8004312:	e7f9      	b.n	8004308 <NameModule+0xa8>
 8004314:	08017b98 	.word	0x08017b98
 8004318:	2000001c 	.word	0x2000001c
 800431c:	20000f72 	.word	0x20000f72
 8004320:	20000e5c 	.word	0x20000e5c
 8004324:	20000098 	.word	0x20000098
 8004328:	20001100 	.word	0x20001100
 800432c:	20000f68 	.word	0x20000f68

08004330 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	46c6      	mov	lr, r8
 8004334:	b500      	push	{lr}
 8004336:	0007      	movs	r7, r0
 8004338:	000e      	movs	r6, r1
 800433a:	4d3a      	ldr	r5, [pc, #232]	; (8004424 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800433c:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800433e:	0029      	movs	r1, r5
 8004340:	0030      	movs	r0, r6
 8004342:	f7fb fedf 	bl	8000104 <strcmp>
 8004346:	2800      	cmp	r0, #0
 8004348:	d050      	beq.n	80043ec <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 800434a:	3401      	adds	r4, #1
 800434c:	350a      	adds	r5, #10
 800434e:	2c0a      	cmp	r4, #10
 8004350:	d1f5      	bne.n	800433e <AddModuleToGroup+0xe>
 8004352:	4c35      	ldr	r4, [pc, #212]	; (8004428 <AddModuleToGroup+0xf8>)
 8004354:	0025      	movs	r5, r4
 8004356:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004358:	0021      	movs	r1, r4
 800435a:	0030      	movs	r0, r6
 800435c:	f7fb fed2 	bl	8000104 <strcmp>
 8004360:	2800      	cmp	r0, #0
 8004362:	d058      	beq.n	8004416 <AddModuleToGroup+0xe6>
 8004364:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004366:	42ac      	cmp	r4, r5
 8004368:	d1f6      	bne.n	8004358 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800436a:	4b30      	ldr	r3, [pc, #192]	; (800442c <AddModuleToGroup+0xfc>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d90f      	bls.n	8004392 <AddModuleToGroup+0x62>
 8004372:	4c2f      	ldr	r4, [pc, #188]	; (8004430 <AddModuleToGroup+0x100>)
 8004374:	009d      	lsls	r5, r3, #2
 8004376:	18ed      	adds	r5, r5, r3
 8004378:	006d      	lsls	r5, r5, #1
 800437a:	0023      	movs	r3, r4
 800437c:	3b0a      	subs	r3, #10
 800437e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004380:	0021      	movs	r1, r4
 8004382:	0030      	movs	r0, r6
 8004384:	f7fb febe 	bl	8000104 <strcmp>
 8004388:	2800      	cmp	r0, #0
 800438a:	d046      	beq.n	800441a <AddModuleToGroup+0xea>
 800438c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800438e:	42ac      	cmp	r4, r5
 8004390:	d1f6      	bne.n	8004380 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004392:	4c28      	ldr	r4, [pc, #160]	; (8004434 <AddModuleToGroup+0x104>)
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <AddModuleToGroup+0x108>)
 8004396:	601c      	str	r4, [r3, #0]
 8004398:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800439e:	0028      	movs	r0, r5
 80043a0:	f7fb feba 	bl	8000118 <strlen>
 80043a4:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80043a6:	0029      	movs	r1, r5
 80043a8:	0030      	movs	r0, r6
 80043aa:	f00f f9b5 	bl	8013718 <strncmp>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d035      	beq.n	800441e <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043b2:	6864      	ldr	r4, [r4, #4]
 80043b4:	4643      	mov	r3, r8
 80043b6:	601c      	str	r4, [r3, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1ee      	bne.n	800439a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <AddModuleToGroup+0xf4>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01e      	beq.n	8004402 <AddModuleToGroup+0xd2>
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <AddModuleToGroup+0xf4>)
 80043c6:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80043c8:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d019      	beq.n	8004404 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 80043d0:	3401      	adds	r4, #1
 80043d2:	330a      	adds	r3, #10
 80043d4:	2c0a      	cmp	r4, #10
 80043d6:	d1f8      	bne.n	80043ca <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 80043d8:	3f01      	subs	r7, #1
 80043da:	4918      	ldr	r1, [pc, #96]	; (800443c <AddModuleToGroup+0x10c>)
 80043dc:	007f      	lsls	r7, r7, #1
 80043de:	2201      	movs	r2, #1
 80043e0:	40a2      	lsls	r2, r4
 80043e2:	5a7b      	ldrh	r3, [r7, r1]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80043e8:	2000      	movs	r0, #0
 80043ea:	e007      	b.n	80043fc <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 80043ec:	3f01      	subs	r7, #1
 80043ee:	4913      	ldr	r1, [pc, #76]	; (800443c <AddModuleToGroup+0x10c>)
 80043f0:	007f      	lsls	r7, r7, #1
 80043f2:	2201      	movs	r2, #1
 80043f4:	40a2      	lsls	r2, r4
 80043f6:	5a7b      	ldrh	r3, [r7, r1]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	527b      	strh	r3, [r7, r1]
}
 80043fc:	bc04      	pop	{r2}
 80043fe:	4690      	mov	r8, r2
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004402:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004404:	00a0      	lsls	r0, r4, #2
 8004406:	1900      	adds	r0, r0, r4
 8004408:	0040      	lsls	r0, r0, #1
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <AddModuleToGroup+0xf4>)
 800440c:	1818      	adds	r0, r3, r0
 800440e:	0031      	movs	r1, r6
 8004410:	f00f f97a 	bl	8013708 <strcpy>
			break;
 8004414:	e7e0      	b.n	80043d8 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 8004416:	2006      	movs	r0, #6
 8004418:	e7f0      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800441a:	2007      	movs	r0, #7
 800441c:	e7ee      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 800441e:	2008      	movs	r0, #8
 8004420:	e7ec      	b.n	80043fc <AddModuleToGroup+0xcc>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000e5c 	.word	0x20000e5c
 8004428:	08017b98 	.word	0x08017b98
 800442c:	2000001c 	.word	0x2000001c
 8004430:	20000f72 	.word	0x20000f72
 8004434:	20000098 	.word	0x20000098
 8004438:	20001104 	.word	0x20001104
 800443c:	20000ec0 	.word	0x20000ec0

08004440 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	46ce      	mov	lr, r9
 8004444:	4647      	mov	r7, r8
 8004446:	b580      	push	{r7, lr}
 8004448:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <ReadPortsDir+0x9c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <ReadPortsDir+0x8c>
 8004452:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	9301      	str	r3, [sp, #4]
		if(i != myID){
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <ReadPortsDir+0xa0>)
 800445a:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <ReadPortsDir+0xa4>)
 800445e:	4698      	mov	r8, r3
 8004460:	e021      	b.n	80044a6 <ReadPortsDir+0x66>
 8004462:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004464:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004466:	2780      	movs	r7, #128	; 0x80
 8004468:	023f      	lsls	r7, r7, #8
 800446a:	e004      	b.n	8004476 <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 800446c:	3401      	adds	r4, #1
 800446e:	b2e4      	uxtb	r4, r4
 8004470:	3601      	adds	r6, #1
 8004472:	2c07      	cmp	r4, #7
 8004474:	d011      	beq.n	800449a <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004476:	0020      	movs	r0, r4
 8004478:	f009 f84a 	bl	800d510 <GetUart>
 800447c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800447e:	42bb      	cmp	r3, r7
 8004480:	d1f4      	bne.n	800446c <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <ReadPortsDir+0xa0>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4642      	mov	r2, r8
 800448c:	5a9a      	ldrh	r2, [r3, r2]
 800448e:	0039      	movs	r1, r7
 8004490:	4131      	asrs	r1, r6
 8004492:	430a      	orrs	r2, r1
 8004494:	4641      	mov	r1, r8
 8004496:	525a      	strh	r2, [r3, r1]
 8004498:	e7e8      	b.n	800446c <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 800449a:	3501      	adds	r5, #1
 800449c:	b2ed      	uxtb	r5, r5
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <ReadPortsDir+0x9c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	d314      	bcc.n	80044d0 <ReadPortsDir+0x90>
		if(i != myID){
 80044a6:	464b      	mov	r3, r9
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	42ab      	cmp	r3, r5
 80044ac:	d0d9      	beq.n	8004462 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	2113      	movs	r1, #19
 80044b2:	0028      	movs	r0, r5
 80044b4:	f005 f904 	bl	80096c0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044b8:	2032      	movs	r0, #50	; 0x32
 80044ba:	f008 fe41 	bl	800d140 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <ReadPortsDir+0xa8>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0e9      	beq.n	800449a <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 80044c6:	2302      	movs	r3, #2
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	e7e6      	b.n	800449a <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	b003      	add	sp, #12
 80044d4:	bc0c      	pop	{r2, r3}
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044dc:	2000001c 	.word	0x2000001c
 80044e0:	20001076 	.word	0x20001076
 80044e4:	20006e98 	.word	0x20006e98
 80044e8:	20001110 	.word	0x20001110

080044ec <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	46c6      	mov	lr, r8
 80044f0:	b500      	push	{lr}
 80044f2:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f4:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <UpdateMyPortsDir+0x54>)
 80044f8:	4698      	mov	r8, r3
 80044fa:	4f12      	ldr	r7, [pc, #72]	; (8004544 <UpdateMyPortsDir+0x58>)
 80044fc:	2680      	movs	r6, #128	; 0x80
 80044fe:	0236      	lsls	r6, r6, #8
 8004500:	e00a      	b.n	8004518 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004502:	0020      	movs	r0, r4
 8004504:	f009 f804 	bl	800d510 <GetUart>
 8004508:	2101      	movs	r1, #1
 800450a:	f009 f89b 	bl	800d644 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800450e:	3401      	adds	r4, #1
 8004510:	b2e4      	uxtb	r4, r4
 8004512:	3501      	adds	r5, #1
 8004514:	2c07      	cmp	r4, #7
 8004516:	d00f      	beq.n	8004538 <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004518:	783b      	ldrb	r3, [r7, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4642      	mov	r2, r8
 8004520:	5a9b      	ldrh	r3, [r3, r2]
 8004522:	0032      	movs	r2, r6
 8004524:	412a      	asrs	r2, r5
 8004526:	421a      	tst	r2, r3
 8004528:	d1eb      	bne.n	8004502 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 800452a:	0020      	movs	r0, r4
 800452c:	f008 fff0 	bl	800d510 <GetUart>
 8004530:	2100      	movs	r1, #0
 8004532:	f009 f887 	bl	800d644 <SwapUartPins>
 8004536:	e7ea      	b.n	800450e <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 8004538:	2000      	movs	r0, #0
 800453a:	bc04      	pop	{r2}
 800453c:	4690      	mov	r8, r2
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	20006e98 	.word	0x20006e98
 8004544:	20001076 	.word	0x20001076

08004548 <BOS_Init>:
void BOS_Init(void){
 8004548:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800454a:	f008 fcb1 	bl	800ceb0 <RTC_Init>
	GetTimeDate();
 800454e:	f008 fd4f 	bl	800cff0 <GetTimeDate>
	EE_Init();
 8004552:	f003 fa51 	bl	80079f8 <EE_Init>
	GPIO_Init();
 8004556:	f008 f9d7 	bl	800c908 <GPIO_Init>
	DMA_Init();
 800455a:	f007 f955 	bl	800b808 <DMA_Init>
	TIM_USEC_Init();
 800455e:	f008 fd7b 	bl	800d058 <TIM_USEC_Init>
	CRC_Init();
 8004562:	f008 f97b 	bl	800c85c <CRC_Init>
	TIM_MSEC_Init();
 8004566:	f008 fda9 	bl	800d0bc <TIM_MSEC_Init>
	if(IsFactoryReset()){
 800456a:	f008 fa81 	bl	800ca70 <IsFactoryReset>
 800456e:	2800      	cmp	r0, #0
 8004570:	d11a      	bne.n	80045a8 <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 8004572:	f7ff f86d 	bl	8003650 <IsLowerCLIbaud>
 8004576:	2800      	cmp	r0, #0
 8004578:	d021      	beq.n	80045be <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 800457a:	4b35      	ldr	r3, [pc, #212]	; (8004650 <BOS_Init+0x108>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004580:	2032      	movs	r0, #50	; 0x32
 8004582:	f008 fddd 	bl	800d140 <StartMilliDelay>
		Module_Peripheral_Init();
 8004586:	f007 f865 	bl	800b654 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800458a:	4b32      	ldr	r3, [pc, #200]	; (8004654 <BOS_Init+0x10c>)
 800458c:	22e1      	movs	r2, #225	; 0xe1
 800458e:	0252      	lsls	r2, r2, #9
 8004590:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004592:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8004594:	001d      	movs	r5, r3
 8004596:	68a9      	ldr	r1, [r5, #8]
 8004598:	0020      	movs	r0, r4
 800459a:	f009 f849 	bl	800d630 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800459e:	3401      	adds	r4, #1
 80045a0:	b2e4      	uxtb	r4, r4
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1f7      	bne.n	8004596 <BOS_Init+0x4e>
 80045a6:	e00f      	b.n	80045c8 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80045a8:	f7ff f840 	bl	800362c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045ac:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	4b29      	ldr	r3, [pc, #164]	; (8004658 <BOS_Init+0x110>)
 80045b2:	4a2a      	ldr	r2, [pc, #168]	; (800465c <BOS_Init+0x114>)
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	e7fd      	b.n	80045ba <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045be:	2032      	movs	r0, #50	; 0x32
 80045c0:	f008 fdbe 	bl	800d140 <StartMilliDelay>
		Module_Peripheral_Init();
 80045c4:	f007 f846 	bl	800b654 <Module_Peripheral_Init>
	LoadEEvars();
 80045c8:	f7fe ff04 	bl	80033d4 <LoadEEvars>
	UpdateMyPortsDir();
 80045cc:	f7ff ff8e 	bl	80044ec <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80045d0:	f007 fd82 	bl	800c0d8 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 80045d4:	4b22      	ldr	r3, [pc, #136]	; (8004660 <BOS_Init+0x118>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d026      	beq.n	800462a <BOS_Init+0xe2>
		IND_ON();
 80045dc:	2580      	movs	r5, #128	; 0x80
 80045de:	01ed      	lsls	r5, r5, #7
 80045e0:	4c20      	ldr	r4, [pc, #128]	; (8004664 <BOS_Init+0x11c>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	0029      	movs	r1, r5
 80045e6:	0020      	movs	r0, r4
 80045e8:	f00c fd76 	bl	80110d8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80045ec:	20fa      	movs	r0, #250	; 0xfa
 80045ee:	0040      	lsls	r0, r0, #1
 80045f0:	f008 fda6 	bl	800d140 <StartMilliDelay>
		IND_OFF();
 80045f4:	2200      	movs	r2, #0
 80045f6:	0029      	movs	r1, r5
 80045f8:	0020      	movs	r0, r4
 80045fa:	f00c fd6d 	bl	80110d8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80045fe:	2064      	movs	r0, #100	; 0x64
 8004600:	f008 fd9e 	bl	800d140 <StartMilliDelay>
		IND_ON();
 8004604:	2201      	movs	r2, #1
 8004606:	0029      	movs	r1, r5
 8004608:	0020      	movs	r0, r4
 800460a:	f00c fd65 	bl	80110d8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800460e:	2064      	movs	r0, #100	; 0x64
 8004610:	f008 fd96 	bl	800d140 <StartMilliDelay>
		IND_OFF();
 8004614:	2200      	movs	r2, #0
 8004616:	0029      	movs	r1, r5
 8004618:	0020      	movs	r0, r4
 800461a:	f00c fd5d 	bl	80110d8 <HAL_GPIO_WritePin>
	ResetUartORE();
 800461e:	f003 f827 	bl	8007670 <ResetUartORE>
	BOS_initialized =1;
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <BOS_Init+0x120>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
}
 8004628:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800462a:	2580      	movs	r5, #128	; 0x80
 800462c:	01ed      	lsls	r5, r5, #7
 800462e:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <BOS_Init+0x11c>)
 8004630:	2201      	movs	r2, #1
 8004632:	0029      	movs	r1, r5
 8004634:	0020      	movs	r0, r4
 8004636:	f00c fd4f 	bl	80110d8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800463a:	20fa      	movs	r0, #250	; 0xfa
 800463c:	0040      	lsls	r0, r0, #1
 800463e:	f008 fd7f 	bl	800d140 <StartMilliDelay>
 8004642:	2200      	movs	r2, #0
 8004644:	0029      	movs	r1, r5
 8004646:	0020      	movs	r0, r4
 8004648:	f00c fd46 	bl	80110d8 <HAL_GPIO_WritePin>
 800464c:	e7e7      	b.n	800461e <BOS_Init+0xd6>
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	20000a76 	.word	0x20000a76
 8004654:	200069c8 	.word	0x200069c8
 8004658:	e000ed00 	.word	0xe000ed00
 800465c:	05fa0004 	.word	0x05fa0004
 8004660:	20001076 	.word	0x20001076
 8004664:	48000400 	.word	0x48000400
 8004668:	20000a75 	.word	0x20000a75

0800466c <Module_Init>:
void Module_Init(void){
 800466c:	b510      	push	{r4, lr}
	HAL_Init();
 800466e:	f00b f8ab 	bl	800f7c8 <HAL_Init>
	SystemClock_Config();
 8004672:	f006 fe79 	bl	800b368 <SystemClock_Config>
	BOS_Init();
 8004676:	f7ff ff67 	bl	8004548 <BOS_Init>
	MX_FREERTOS_Init();
 800467a:	f003 fbe5 	bl	8007e48 <MX_FREERTOS_Init>
	osKernelStart();
 800467e:	f009 f891 	bl	800d7a4 <osKernelStart>
}
 8004682:	bd10      	pop	{r4, pc}

08004684 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004684:	b510      	push	{r4, lr}
 8004686:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004688:	201e      	movs	r0, #30
 800468a:	f00e fbb1 	bl	8012df0 <malloc>
 800468e:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004690:	221e      	movs	r2, #30
 8004692:	2100      	movs	r1, #0
 8004694:	f00e fe02 	bl	801329c <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004698:	4908      	ldr	r1, [pc, #32]	; (80046bc <GetDateString+0x38>)
 800469a:	7d8b      	ldrb	r3, [r1, #22]
 800469c:	7d0a      	ldrb	r2, [r1, #20]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <GetDateString+0x3c>)
 80046a4:	5812      	ldr	r2, [r2, r0]
 80046a6:	8b08      	ldrh	r0, [r1, #24]
 80046a8:	9001      	str	r0, [sp, #4]
 80046aa:	7d49      	ldrb	r1, [r1, #21]
 80046ac:	9100      	str	r1, [sp, #0]
 80046ae:	4905      	ldr	r1, [pc, #20]	; (80046c4 <GetDateString+0x40>)
 80046b0:	0020      	movs	r0, r4
 80046b2:	f00e ffed 	bl	8013690 <sprintf>
	return buffer;
}
 80046b6:	0020      	movs	r0, r4
 80046b8:	b002      	add	sp, #8
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	200069c8 	.word	0x200069c8
 80046c0:	080180fc 	.word	0x080180fc
 80046c4:	08017e08 	.word	0x08017e08

080046c8 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 80046c8:	b500      	push	{lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <Bridge+0x24>)
 80046d0:	7819      	ldrb	r1, [r3, #0]
 80046d2:	2301      	movs	r3, #1
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	3b02      	subs	r3, #2
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	3303      	adds	r3, #3
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	000b      	movs	r3, r1
 80046e2:	f005 f813 	bl	800970c <StartScastDMAStream>
}
 80046e6:	b005      	add	sp, #20
 80046e8:	bd00      	pop	{pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20001076 	.word	0x20001076

080046f0 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80046f0:	b530      	push	{r4, r5, lr}
 80046f2:	b087      	sub	sp, #28
 80046f4:	0004      	movs	r4, r0
 80046f6:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80046f8:	2300      	movs	r3, #0
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fee1 	bl	80034d0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800470e:	1e62      	subs	r2, r4, #1
 8004710:	00d3      	lsls	r3, r2, #3
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4a14      	ldr	r2, [pc, #80]	; (8004768 <Unbridge+0x78>)
 8004718:	589b      	ldr	r3, [r3, r2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <Unbridge+0x5a>
 800471e:	1e6a      	subs	r2, r5, #1
 8004720:	00d3      	lsls	r3, r2, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <Unbridge+0x78>)
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800472e:	0020      	movs	r0, r4
 8004730:	f002 ff12 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e006      	b.n	8004746 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004738:	0020      	movs	r0, r4
 800473a:	f002 ff0d 	bl	8007558 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800473e:	0028      	movs	r0, r5
 8004740:	f002 ff0a 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004744:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004746:	b007      	add	sp, #28
 8004748:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 800474a:	1e6a      	subs	r2, r5, #1
 800474c:	00d3      	lsls	r3, r2, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <Unbridge+0x78>)
 8004754:	589b      	ldr	r3, [r3, r2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 800475a:	0028      	movs	r0, r5
 800475c:	f002 fefc 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004760:	2000      	movs	r0, #0
 8004762:	e7f0      	b.n	8004746 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004764:	2068      	movs	r0, #104	; 0x68
 8004766:	e7ee      	b.n	8004746 <Unbridge+0x56>
 8004768:	20001998 	.word	0x20001998

0800476c <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004770:	7804      	ldrb	r4, [r0, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d010      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004776:	2603      	movs	r6, #3
 8004778:	e004      	b.n	8004784 <StringToLowerCase+0x18>
 800477a:	702a      	strb	r2, [r5, #0]
 800477c:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 800477e:	782c      	ldrb	r4, [r5, #0]
 8004780:	2c00      	cmp	r4, #0
 8004782:	d009      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004784:	f00e fb26 	bl	8012dd4 <__locale_ctype_ptr>
 8004788:	1900      	adds	r0, r0, r4
 800478a:	7843      	ldrb	r3, [r0, #1]
 800478c:	4033      	ands	r3, r6
 800478e:	0022      	movs	r2, r4
 8004790:	2b01      	cmp	r3, #1
 8004792:	d1f2      	bne.n	800477a <StringToLowerCase+0xe>
 8004794:	3220      	adds	r2, #32
 8004796:	e7f0      	b.n	800477a <StringToLowerCase+0xe>
	}
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800479c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	46c6      	mov	lr, r8
 80047a0:	b500      	push	{lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80047a6:	4bdc      	ldr	r3, [pc, #880]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80047a8:	781c      	ldrb	r4, [r3, #0]
 80047aa:	2c05      	cmp	r4, #5
 80047ac:	d100      	bne.n	80047b0 <ParseSnippetCondition+0x14>
 80047ae:	e210      	b.n	8004bd2 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80047b0:	49da      	ldr	r1, [pc, #872]	; (8004b1c <ParseSnippetCondition+0x380>)
 80047b2:	00a3      	lsls	r3, r4, #2
 80047b4:	191a      	adds	r2, r3, r4
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	2000      	movs	r0, #0
 80047ba:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80047bc:	191a      	adds	r2, r3, r4
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	188a      	adds	r2, r1, r2
 80047c2:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80047c4:	1918      	adds	r0, r3, r4
 80047c6:	0080      	lsls	r0, r0, #2
 80047c8:	3002      	adds	r0, #2
 80047ca:	1840      	adds	r0, r0, r1
 80047cc:	2204      	movs	r2, #4
 80047ce:	2100      	movs	r1, #0
 80047d0:	f00e fd64 	bl	801329c <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	2b62      	cmp	r3, #98	; 0x62
 80047d8:	d102      	bne.n	80047e0 <ParseSnippetCondition+0x44>
 80047da:	78ab      	ldrb	r3, [r5, #2]
 80047dc:	2b2e      	cmp	r3, #46	; 0x2e
 80047de:	d032      	beq.n	8004846 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 80047e0:	4ecf      	ldr	r6, [pc, #828]	; (8004b20 <ParseSnippetCondition+0x384>)
 80047e2:	0029      	movs	r1, r5
 80047e4:	0030      	movs	r0, r6
 80047e6:	f00e ff8f 	bl	8013708 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 80047ea:	4cce      	ldr	r4, [pc, #824]	; (8004b24 <ParseSnippetCondition+0x388>)
 80047ec:	0021      	movs	r1, r4
 80047ee:	0030      	movs	r0, r6
 80047f0:	f00f fe0a 	bl	8014408 <strtok>
 80047f4:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 80047f6:	0021      	movs	r1, r4
 80047f8:	2000      	movs	r0, #0
 80047fa:	f00f fe05 	bl	8014408 <strtok>
 80047fe:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004800:	0021      	movs	r1, r4
 8004802:	2000      	movs	r0, #0
 8004804:	f00f fe00 	bl	8014408 <strtok>
 8004808:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800480a:	2d00      	cmp	r5, #0
 800480c:	d100      	bne.n	8004810 <ParseSnippetCondition+0x74>
 800480e:	e1e5      	b.n	8004bdc <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004810:	0028      	movs	r0, r5
 8004812:	f7fe ff81 	bl	8003718 <IsModuleParameter>
 8004816:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004818:	d100      	bne.n	800481c <ParseSnippetCondition+0x80>
 800481a:	e18f      	b.n	8004b3c <ParseSnippetCondition+0x3a0>
 800481c:	2e00      	cmp	r6, #0
 800481e:	d000      	beq.n	8004822 <ParseSnippetCondition+0x86>
 8004820:	e18e      	b.n	8004b40 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004822:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004824:	2c00      	cmp	r4, #0
 8004826:	d000      	beq.n	800482a <ParseSnippetCondition+0x8e>
 8004828:	e1d4      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 800482a:	4cbb      	ldr	r4, [pc, #748]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	49bb      	ldr	r1, [pc, #748]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	18d0      	adds	r0, r2, r3
 8004834:	0080      	lsls	r0, r0, #2
 8004836:	3602      	adds	r6, #2
 8004838:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800483a:	180a      	adds	r2, r1, r0
 800483c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800483e:	3301      	adds	r3, #1
 8004840:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004842:	2000      	movs	r0, #0
 8004844:	e1c6      	b.n	8004bd4 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004846:	786e      	ldrb	r6, [r5, #1]
 8004848:	3e30      	subs	r6, #48	; 0x30
 800484a:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 800484c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800484e:	2e06      	cmp	r6, #6
 8004850:	d900      	bls.n	8004854 <ParseSnippetCondition+0xb8>
 8004852:	e1bf      	b.n	8004bd4 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004854:	4ab1      	ldr	r2, [pc, #708]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004856:	00a3      	lsls	r3, r4, #2
 8004858:	1919      	adds	r1, r3, r4
 800485a:	0089      	lsls	r1, r1, #2
 800485c:	3001      	adds	r0, #1
 800485e:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004860:	1853      	adds	r3, r2, r1
 8004862:	2200      	movs	r2, #0
 8004864:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004866:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004868:	1cef      	adds	r7, r5, #3
 800486a:	3207      	adds	r2, #7
 800486c:	49ae      	ldr	r1, [pc, #696]	; (8004b28 <ParseSnippetCondition+0x38c>)
 800486e:	0038      	movs	r0, r7
 8004870:	f00e ff52 	bl	8013718 <strncmp>
 8004874:	2800      	cmp	r0, #0
 8004876:	d121      	bne.n	80048bc <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004878:	00a3      	lsls	r3, r4, #2
 800487a:	191c      	adds	r4, r3, r4
 800487c:	00a4      	lsls	r4, r4, #2
 800487e:	4ba7      	ldr	r3, [pc, #668]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004880:	191c      	adds	r4, r3, r4
 8004882:	2305      	movs	r3, #5
 8004884:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004886:	00f2      	lsls	r2, r6, #3
 8004888:	1992      	adds	r2, r2, r6
 800488a:	4ba8      	ldr	r3, [pc, #672]	; (8004b2c <ParseSnippetCondition+0x390>)
 800488c:	189b      	adds	r3, r3, r2
 800488e:	7a1b      	ldrb	r3, [r3, #8]
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d504      	bpl.n	800489e <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004894:	4aa0      	ldr	r2, [pc, #640]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004896:	7813      	ldrb	r3, [r2, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	7013      	strb	r3, [r2, #0]
 800489c:	e19a      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800489e:	2301      	movs	r3, #1
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	2300      	movs	r3, #0
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2101      	movs	r1, #1
 80048b2:	0030      	movs	r0, r6
 80048b4:	f003 fd92 	bl	80083dc <SetButtonEvents>
				status =BOS_OK;
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7eb      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80048bc:	220e      	movs	r2, #14
 80048be:	499c      	ldr	r1, [pc, #624]	; (8004b30 <ParseSnippetCondition+0x394>)
 80048c0:	0038      	movs	r0, r7
 80048c2:	f00e ff29 	bl	8013718 <strncmp>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d11c      	bne.n	8004904 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80048ca:	00a3      	lsls	r3, r4, #2
 80048cc:	191c      	adds	r4, r3, r4
 80048ce:	00a4      	lsls	r4, r4, #2
 80048d0:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <ParseSnippetCondition+0x380>)
 80048d2:	191c      	adds	r4, r3, r4
 80048d4:	2306      	movs	r3, #6
 80048d6:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80048d8:	00f2      	lsls	r2, r6, #3
 80048da:	1992      	adds	r2, r2, r6
 80048dc:	4b93      	ldr	r3, [pc, #588]	; (8004b2c <ParseSnippetCondition+0x390>)
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	7a1b      	ldrb	r3, [r3, #8]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d4d6      	bmi.n	8004894 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048e6:	2301      	movs	r3, #1
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9302      	str	r3, [sp, #8]
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	2100      	movs	r1, #0
 80048fa:	0030      	movs	r0, r6
 80048fc:	f003 fd6e 	bl	80083dc <SetButtonEvents>
				status =BOS_OK;
 8004900:	2000      	movs	r0, #0
 8004902:	e7c7      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004904:	220c      	movs	r2, #12
 8004906:	498b      	ldr	r1, [pc, #556]	; (8004b34 <ParseSnippetCondition+0x398>)
 8004908:	0038      	movs	r0, r7
 800490a:	f00e ff05 	bl	8013718 <strncmp>
 800490e:	2800      	cmp	r0, #0
 8004910:	d17a      	bne.n	8004a08 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004912:	00f2      	lsls	r2, r6, #3
 8004914:	1992      	adds	r2, r2, r6
 8004916:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004918:	189b      	adds	r3, r3, r2
 800491a:	789b      	ldrb	r3, [r3, #2]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d030      	beq.n	8004982 <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004920:	00f2      	lsls	r2, r6, #3
 8004922:	1992      	adds	r2, r2, r6
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004926:	189b      	adds	r3, r3, r2
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04a      	beq.n	80049c4 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800492e:	00f2      	lsls	r2, r6, #3
 8004930:	1992      	adds	r2, r2, r6
 8004932:	4b7e      	ldr	r3, [pc, #504]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004934:	189b      	adds	r3, r3, r2
 8004936:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004938:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1aa      	bne.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800493e:	4f77      	ldr	r7, [pc, #476]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004940:	00a3      	lsls	r3, r4, #2
 8004942:	191b      	adds	r3, r3, r4
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	220b      	movs	r2, #11
 800494a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800494c:	0028      	movs	r0, r5
 800494e:	300f      	adds	r0, #15
 8004950:	f00e fa0b 	bl	8012d6a <atoi>
 8004954:	b2c0      	uxtb	r0, r0
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	0093      	lsls	r3, r2, #2
 800495c:	189b      	adds	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	18ff      	adds	r7, r7, r3
 8004962:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004964:	2301      	movs	r3, #1
 8004966:	9305      	str	r3, [sp, #20]
 8004968:	2300      	movs	r3, #0
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9001      	str	r0, [sp, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	0030      	movs	r0, r6
 800497a:	f003 fd2f 	bl	80083dc <SetButtonEvents>
					status =BOS_OK;
 800497e:	2000      	movs	r0, #0
 8004980:	e788      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004982:	4f66      	ldr	r7, [pc, #408]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004984:	00a3      	lsls	r3, r4, #2
 8004986:	191b      	adds	r3, r3, r4
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2209      	movs	r2, #9
 800498e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004990:	0028      	movs	r0, r5
 8004992:	300f      	adds	r0, #15
 8004994:	f00e f9e9 	bl	8012d6a <atoi>
 8004998:	b2c3      	uxtb	r3, r0
 800499a:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800499c:	7811      	ldrb	r1, [r2, #0]
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	1852      	adds	r2, r2, r1
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	18bf      	adds	r7, r7, r2
 80049a6:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049a8:	2201      	movs	r2, #1
 80049aa:	9205      	str	r2, [sp, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	9204      	str	r2, [sp, #16]
 80049b0:	9203      	str	r2, [sp, #12]
 80049b2:	9202      	str	r2, [sp, #8]
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	9200      	str	r2, [sp, #0]
 80049b8:	2100      	movs	r1, #0
 80049ba:	0030      	movs	r0, r6
 80049bc:	f003 fd0e 	bl	80083dc <SetButtonEvents>
					status =BOS_OK;
 80049c0:	2000      	movs	r0, #0
 80049c2:	e767      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80049c4:	4f55      	ldr	r7, [pc, #340]	; (8004b1c <ParseSnippetCondition+0x380>)
 80049c6:	00a3      	lsls	r3, r4, #2
 80049c8:	191b      	adds	r3, r3, r4
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	220a      	movs	r2, #10
 80049d0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049d2:	0028      	movs	r0, r5
 80049d4:	300f      	adds	r0, #15
 80049d6:	f00e f9c8 	bl	8012d6a <atoi>
 80049da:	b2c0      	uxtb	r0, r0
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	0093      	lsls	r3, r2, #2
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18ff      	adds	r7, r7, r3
 80049e8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049ea:	2301      	movs	r3, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9303      	str	r3, [sp, #12]
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9000      	str	r0, [sp, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	0030      	movs	r0, r6
 8004a00:	f003 fcec 	bl	80083dc <SetButtonEvents>
					status =BOS_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e745      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a08:	220d      	movs	r2, #13
 8004a0a:	494b      	ldr	r1, [pc, #300]	; (8004b38 <ParseSnippetCondition+0x39c>)
 8004a0c:	0038      	movs	r0, r7
 8004a0e:	f00e fe83 	bl	8013718 <strncmp>
 8004a12:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004a14:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <ParseSnippetCondition+0x280>
 8004a1a:	e73b      	b.n	8004894 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004a1c:	00f2      	lsls	r2, r6, #3
 8004a1e:	1992      	adds	r2, r2, r6
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	795b      	ldrb	r3, [r3, #5]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d031      	beq.n	8004a8e <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004a2a:	00f2      	lsls	r2, r6, #3
 8004a2c:	1992      	adds	r2, r2, r6
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	799b      	ldrb	r3, [r3, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d04c      	beq.n	8004ad2 <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004a38:	00f2      	lsls	r2, r6, #3
 8004a3a:	1992      	adds	r2, r2, r6
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a42:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d000      	beq.n	8004a4a <ParseSnippetCondition+0x2ae>
 8004a48:	e724      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004a4a:	4f34      	ldr	r7, [pc, #208]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	4698      	mov	r8, r3
 8004a50:	435c      	muls	r4, r3
 8004a52:	193c      	adds	r4, r7, r4
 8004a54:	3b06      	subs	r3, #6
 8004a56:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a58:	0028      	movs	r0, r5
 8004a5a:	3010      	adds	r0, #16
 8004a5c:	f00e f985 	bl	8012d6a <atoi>
 8004a60:	b2c0      	uxtb	r0, r0
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	4642      	mov	r2, r8
 8004a68:	4353      	muls	r3, r2
 8004a6a:	18ff      	adds	r7, r7, r3
 8004a6c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004a6e:	2301      	movs	r3, #1
 8004a70:	9305      	str	r3, [sp, #20]
 8004a72:	9004      	str	r0, [sp, #16]
 8004a74:	2400      	movs	r4, #0
 8004a76:	9403      	str	r4, [sp, #12]
 8004a78:	9402      	str	r4, [sp, #8]
 8004a7a:	9401      	str	r4, [sp, #4]
 8004a7c:	9400      	str	r4, [sp, #0]
 8004a7e:	0023      	movs	r3, r4
 8004a80:	0022      	movs	r2, r4
 8004a82:	0021      	movs	r1, r4
 8004a84:	0030      	movs	r0, r6
 8004a86:	f003 fca9 	bl	80083dc <SetButtonEvents>
					status =BOS_OK;
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	e702      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004a8e:	4f23      	ldr	r7, [pc, #140]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a90:	00a3      	lsls	r3, r4, #2
 8004a92:	191b      	adds	r3, r3, r4
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	220c      	movs	r2, #12
 8004a9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	3010      	adds	r0, #16
 8004aa0:	f00e f963 	bl	8012d6a <atoi>
 8004aa4:	b2c0      	uxtb	r0, r0
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	0093      	lsls	r3, r2, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18ff      	adds	r7, r7, r3
 8004ab2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9305      	str	r3, [sp, #20]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	9002      	str	r0, [sp, #8]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	0030      	movs	r0, r6
 8004aca:	f003 fc87 	bl	80083dc <SetButtonEvents>
					status =BOS_OK;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e6e0      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004ad2:	4f12      	ldr	r7, [pc, #72]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004ad4:	00a3      	lsls	r3, r4, #2
 8004ad6:	191b      	adds	r3, r3, r4
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	220d      	movs	r2, #13
 8004ade:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	3010      	adds	r0, #16
 8004ae4:	f00e f941 	bl	8012d6a <atoi>
 8004ae8:	b2c0      	uxtb	r0, r0
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	0093      	lsls	r3, r2, #2
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18ff      	adds	r7, r7, r3
 8004af6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004af8:	2301      	movs	r3, #1
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	9003      	str	r0, [sp, #12]
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	f003 fc65 	bl	80083dc <SetButtonEvents>
					status =BOS_OK;
 8004b12:	2000      	movs	r0, #0
 8004b14:	e6be      	b.n	8004894 <ParseSnippetCondition+0xf8>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	2000121f 	.word	0x2000121f
 8004b1c:	200069e4 	.word	0x200069e4
 8004b20:	20001184 	.word	0x20001184
 8004b24:	08017c64 	.word	0x08017c64
 8004b28:	08019280 	.word	0x08019280
 8004b2c:	2000151c 	.word	0x2000151c
 8004b30:	08018300 	.word	0x08018300
 8004b34:	08018310 	.word	0x08018310
 8004b38:	08018320 	.word	0x08018320
			else if(secondPart != NULL && thirdPart != NULL){
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	d04f      	beq.n	8004be0 <ParseSnippetCondition+0x444>
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d04f      	beq.n	8004be4 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004b44:	0020      	movs	r0, r4
 8004b46:	f7fe fde7 	bl	8003718 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d024      	beq.n	8004b98 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b50:	781c      	ldrb	r4, [r3, #0]
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b54:	00a3      	lsls	r3, r4, #2
 8004b56:	1919      	adds	r1, r3, r4
 8004b58:	0089      	lsls	r1, r1, #2
 8004b5a:	2704      	movs	r7, #4
 8004b5c:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b5e:	1919      	adds	r1, r3, r4
 8004b60:	0089      	lsls	r1, r1, #2
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b66:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b68:	4d20      	ldr	r5, [pc, #128]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b6a:	782c      	ldrb	r4, [r5, #0]
 8004b6c:	0030      	movs	r0, r6
 8004b6e:	f7fe fddf 	bl	8003730 <IsMathOperator>
 8004b72:	491f      	ldr	r1, [pc, #124]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b74:	00a3      	lsls	r3, r4, #2
 8004b76:	191b      	adds	r3, r3, r4
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	18cb      	adds	r3, r1, r3
 8004b7c:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b7e:	782a      	ldrb	r2, [r5, #0]
 8004b80:	0093      	lsls	r3, r2, #2
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	18cb      	adds	r3, r1, r3
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004b8e:	3201      	adds	r2, #1
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b92:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004b94:	2000      	movs	r0, #0
 8004b96:	e01d      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b9a:	4698      	mov	r8, r3
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4f14      	ldr	r7, [pc, #80]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004ba0:	0093      	lsls	r3, r2, #2
 8004ba2:	1899      	adds	r1, r3, r2
 8004ba4:	0089      	lsls	r1, r1, #2
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f00e f8d6 	bl	8012d60 <atof>
 8004bb4:	f7fe f808 	bl	8002bc8 <__aeabi_d2f>
 8004bb8:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004bba:	4643      	mov	r3, r8
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	0098      	lsls	r0, r3, #2
 8004bc0:	18c0      	adds	r0, r0, r3
 8004bc2:	0080      	lsls	r0, r0, #2
 8004bc4:	3006      	adds	r0, #6
 8004bc6:	19c0      	adds	r0, r0, r7
 8004bc8:	2204      	movs	r2, #4
 8004bca:	a907      	add	r1, sp, #28
 8004bcc:	f00e fb5d 	bl	801328a <memcpy>
 8004bd0:	e7ca      	b.n	8004b68 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004bd2:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bd4:	b008      	add	sp, #32
 8004bd6:	bc04      	pop	{r2}
 8004bd8:	4690      	mov	r8, r2
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004bdc:	2067      	movs	r0, #103	; 0x67
 8004bde:	e7f9      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004be0:	2067      	movs	r0, #103	; 0x67
 8004be2:	e7f7      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004be4:	2067      	movs	r0, #103	; 0x67
 8004be6:	e7f5      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004be8:	2067      	movs	r0, #103	; 0x67
 8004bea:	e7f3      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004bec:	2000121f 	.word	0x2000121f
 8004bf0:	200069e4 	.word	0x200069e4

08004bf4 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	000c      	movs	r4, r1
	switch(code){
 8004bf8:	2802      	cmp	r0, #2
 8004bfa:	d017      	beq.n	8004c2c <AddSnippet+0x38>
 8004bfc:	2803      	cmp	r0, #3
 8004bfe:	d003      	beq.n	8004c08 <AddSnippet+0x14>
 8004c00:	2801      	cmp	r0, #1
 8004c02:	d00f      	beq.n	8004c24 <AddSnippet+0x30>
	return BOS_OK;
 8004c04:	2000      	movs	r0, #0
 8004c06:	e00c      	b.n	8004c22 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <AddSnippet+0xec>)
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	0093      	lsls	r3, r2, #2
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <AddSnippet+0xf0>)
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c1c:	f006 fbfc 	bl	800b418 <SaveToRO>
	return BOS_OK;
 8004c20:	2000      	movs	r0, #0
}
 8004c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c24:	0008      	movs	r0, r1
 8004c26:	f7ff fdb9 	bl	800479c <ParseSnippetCondition>
 8004c2a:	e7fa      	b.n	8004c22 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <AddSnippet+0xec>)
 8004c2e:	781d      	ldrb	r5, [r3, #0]
 8004c30:	3d01      	subs	r5, #1
 8004c32:	00ab      	lsls	r3, r5, #2
 8004c34:	195b      	adds	r3, r3, r5
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <AddSnippet+0xf0>)
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	68de      	ldr	r6, [r3, #12]
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d03d      	beq.n	8004cbe <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c42:	0030      	movs	r0, r6
 8004c44:	f7fb fa68 	bl	8000118 <strlen>
 8004c48:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7fb fa64 	bl	8000118 <strlen>
 8004c50:	1839      	adds	r1, r7, r0
 8004c52:	3102      	adds	r1, #2
 8004c54:	0030      	movs	r0, r6
 8004c56:	f00e fb53 	bl	8013300 <realloc>
 8004c5a:	4e22      	ldr	r6, [pc, #136]	; (8004ce4 <AddSnippet+0xf0>)
 8004c5c:	00ab      	lsls	r3, r5, #2
 8004c5e:	195d      	adds	r5, r3, r5
 8004c60:	00ad      	lsls	r5, r5, #2
 8004c62:	1975      	adds	r5, r6, r5
 8004c64:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004c66:	4d1e      	ldr	r5, [pc, #120]	; (8004ce0 <AddSnippet+0xec>)
 8004c68:	782a      	ldrb	r2, [r5, #0]
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0093      	lsls	r3, r2, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	18f3      	adds	r3, r6, r3
 8004c74:	1c7a      	adds	r2, r7, #1
 8004c76:	68d8      	ldr	r0, [r3, #12]
 8004c78:	1880      	adds	r0, r0, r2
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	f00e fd44 	bl	8013708 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004c80:	782a      	ldrb	r2, [r5, #0]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0093      	lsls	r3, r2, #2
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	18f6      	adds	r6, r6, r3
 8004c8c:	68f3      	ldr	r3, [r6, #12]
 8004c8e:	2213      	movs	r2, #19
 8004c90:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <AddSnippet+0xec>)
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0093      	lsls	r3, r2, #2
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <AddSnippet+0xf0>)
 8004ca0:	18cb      	adds	r3, r1, r3
 8004ca2:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004ca4:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1bb      	bne.n	8004c22 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004caa:	0090      	lsls	r0, r2, #2
 8004cac:	1880      	adds	r0, r0, r2
 8004cae:	0080      	lsls	r0, r0, #2
 8004cb0:	1840      	adds	r0, r0, r1
 8004cb2:	2214      	movs	r2, #20
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f00e faf1 	bl	801329c <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004cba:	200e      	movs	r0, #14
 8004cbc:	e7b1      	b.n	8004c22 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004cbe:	0008      	movs	r0, r1
 8004cc0:	f7fb fa2a 	bl	8000118 <strlen>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f00e f893 	bl	8012df0 <malloc>
 8004cca:	00ab      	lsls	r3, r5, #2
 8004ccc:	195d      	adds	r5, r3, r5
 8004cce:	00ad      	lsls	r5, r5, #2
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <AddSnippet+0xf0>)
 8004cd2:	195d      	adds	r5, r3, r5
 8004cd4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	f00e fd16 	bl	8013708 <strcpy>
 8004cdc:	e7d9      	b.n	8004c92 <AddSnippet+0x9e>
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	2000121f 	.word	0x2000121f
 8004ce4:	200069e4 	.word	0x200069e4

08004ce8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	46de      	mov	lr, fp
 8004cec:	4657      	mov	r7, sl
 8004cee:	464e      	mov	r6, r9
 8004cf0:	4645      	mov	r5, r8
 8004cf2:	b5e0      	push	{r5, r6, r7, lr}
 8004cf4:	b08b      	sub	sp, #44	; 0x2c
 8004cf6:	9004      	str	r0, [sp, #16]
 8004cf8:	4688      	mov	r8, r1
 8004cfa:	9203      	str	r2, [sp, #12]
 8004cfc:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cfe:	2209      	movs	r2, #9
 8004d00:	2100      	movs	r1, #0
 8004d02:	a807      	add	r0, sp, #28
 8004d04:	f00e faca 	bl	801329c <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d08:	4fd5      	ldr	r7, [pc, #852]	; (8005060 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004d0a:	002e      	movs	r6, r5
 8004d0c:	e034      	b.n	8004d78 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d0e:	2252      	movs	r2, #82	; 0x52
 8004d10:	49d4      	ldr	r1, [pc, #848]	; (8005064 <CLI_CommandParser+0x37c>)
 8004d12:	0020      	movs	r0, r4
 8004d14:	f00e fab9 	bl	801328a <memcpy>
				recordSnippet =0;
 8004d18:	4bd1      	ldr	r3, [pc, #836]	; (8005060 <CLI_CommandParser+0x378>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e044      	b.n	8004daa <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004d20:	2206      	movs	r2, #6
 8004d22:	49d1      	ldr	r1, [pc, #836]	; (8005068 <CLI_CommandParser+0x380>)
 8004d24:	9803      	ldr	r0, [sp, #12]
 8004d26:	f00e fcf7 	bl	8013718 <strncmp>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d053      	beq.n	8004dd6 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004d2e:	2d02      	cmp	r5, #2
 8004d30:	d05e      	beq.n	8004df0 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004d32:	212e      	movs	r1, #46	; 0x2e
 8004d34:	9803      	ldr	r0, [sp, #12]
 8004d36:	f00e fcd9 	bl	80136ec <strchr>
 8004d3a:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d3c:	d006      	beq.n	8004d4c <CLI_CommandParser+0x64>
 8004d3e:	3803      	subs	r0, #3
 8004d40:	2203      	movs	r2, #3
 8004d42:	49ca      	ldr	r1, [pc, #808]	; (800506c <CLI_CommandParser+0x384>)
 8004d44:	f00e fce8 	bl	8013718 <strncmp>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d160      	bne.n	8004e0e <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004d4c:	2299      	movs	r2, #153	; 0x99
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	0021      	movs	r1, r4
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	f008 fdc2 	bl	800d8dc <FreeRTOS_CLIProcessCommand>
 8004d58:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d5a:	7823      	ldrb	r3, [r4, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d000      	beq.n	8004d62 <CLI_CommandParser+0x7a>
 8004d60:	e16f      	b.n	8005042 <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d62:	0020      	movs	r0, r4
 8004d64:	f7fb f9d8 	bl	8000118 <strlen>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	f00e fa95 	bl	801329c <memset>
	} while(xReturned != pdFALSE);
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	d100      	bne.n	8004d78 <CLI_CommandParser+0x90>
 8004d76:	e1ab      	b.n	80050d0 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004d78:	9803      	ldr	r0, [sp, #12]
 8004d7a:	f7ff fcf7 	bl	800476c <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d7e:	783d      	ldrb	r5, [r7, #0]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d1cd      	bne.n	8004d20 <CLI_CommandParser+0x38>
 8004d84:	2203      	movs	r2, #3
 8004d86:	49ba      	ldr	r1, [pc, #744]	; (8005070 <CLI_CommandParser+0x388>)
 8004d88:	9803      	ldr	r0, [sp, #12]
 8004d8a:	f00e fcc5 	bl	8013718 <strncmp>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1cf      	bne.n	8004d32 <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	1cd9      	adds	r1, r3, #3
 8004d96:	3001      	adds	r0, #1
 8004d98:	f7ff ff2c 	bl	8004bf4 <AddSnippet>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d1b6      	bne.n	8004d0e <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004da0:	4baf      	ldr	r3, [pc, #700]	; (8005060 <CLI_CommandParser+0x378>)
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004da6:	230d      	movs	r3, #13
 8004da8:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004daa:	7823      	ldrb	r3, [r4, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d100      	bne.n	8004db2 <CLI_CommandParser+0xca>
 8004db0:	e186      	b.n	80050c0 <CLI_CommandParser+0x3d8>
 8004db2:	4643      	mov	r3, r8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <CLI_CommandParser+0xd2>
 8004db8:	e19d      	b.n	80050f6 <CLI_CommandParser+0x40e>
 8004dba:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004dbc:	0020      	movs	r0, r4
 8004dbe:	f7fb f9ab 	bl	8000118 <strlen>
 8004dc2:	b282      	uxth	r2, r0
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	425b      	negs	r3, r3
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	3333      	adds	r3, #51	; 0x33
 8004dcc:	0021      	movs	r1, r4
 8004dce:	9804      	ldr	r0, [sp, #16]
 8004dd0:	f008 fbc0 	bl	800d554 <writePxMutex>
 8004dd4:	e7c5      	b.n	8004d62 <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004dd6:	4ba2      	ldr	r3, [pc, #648]	; (8005060 <CLI_CommandParser+0x378>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004ddc:	49a5      	ldr	r1, [pc, #660]	; (8005074 <CLI_CommandParser+0x38c>)
 8004dde:	3003      	adds	r0, #3
 8004de0:	f7ff ff08 	bl	8004bf4 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004de4:	2241      	movs	r2, #65	; 0x41
 8004de6:	49a4      	ldr	r1, [pc, #656]	; (8005078 <CLI_CommandParser+0x390>)
 8004de8:	0020      	movs	r0, r4
 8004dea:	f00e fa4e 	bl	801328a <memcpy>
			xReturned = pdFALSE;
 8004dee:	e7dc      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	2002      	movs	r0, #2
 8004df4:	f7ff fefe 	bl	8004bf4 <AddSnippet>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d102      	bne.n	8004e02 <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004dfc:	230d      	movs	r3, #13
 8004dfe:	7023      	strb	r3, [r4, #0]
 8004e00:	e7d3      	b.n	8004daa <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e02:	2252      	movs	r2, #82	; 0x52
 8004e04:	4997      	ldr	r1, [pc, #604]	; (8005064 <CLI_CommandParser+0x37c>)
 8004e06:	0020      	movs	r0, r4
 8004e08:	f00e fa3f 	bl	801328a <memcpy>
 8004e0c:	e7cd      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e0e:	f00d ffe1 	bl	8012dd4 <__locale_ctype_ptr>
 8004e12:	786b      	ldrb	r3, [r5, #1]
 8004e14:	18c0      	adds	r0, r0, r3
 8004e16:	7843      	ldrb	r3, [r0, #1]
 8004e18:	075b      	lsls	r3, r3, #29
 8004e1a:	d497      	bmi.n	8004d4c <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004e1c:	9903      	ldr	r1, [sp, #12]
 8004e1e:	1a6a      	subs	r2, r5, r1
 8004e20:	a807      	add	r0, sp, #28
 8004e22:	f00e fc8a 	bl	801373a <strncpy>
				id =GetID(idString);
 8004e26:	a807      	add	r0, sp, #28
 8004e28:	f7ff f9b6 	bl	8004198 <GetID>
 8004e2c:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004e2e:	4a93      	ldr	r2, [pc, #588]	; (800507c <CLI_CommandParser+0x394>)
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	4693      	mov	fp, r2
 8004e34:	4290      	cmp	r0, r2
 8004e36:	d03d      	beq.n	8004eb4 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004e38:	2864      	cmp	r0, #100	; 0x64
 8004e3a:	d043      	beq.n	8004ec4 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004e3c:	2866      	cmp	r0, #102	; 0x66
 8004e3e:	d047      	beq.n	8004ed0 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004e40:	28ff      	cmp	r0, #255	; 0xff
 8004e42:	d04b      	beq.n	8004edc <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e44:	466b      	mov	r3, sp
 8004e46:	7d1b      	ldrb	r3, [r3, #20]
 8004e48:	469a      	mov	sl, r3
 8004e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e4c:	d078      	beq.n	8004f40 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e4e:	3501      	adds	r5, #1
 8004e50:	2206      	movs	r2, #6
 8004e52:	498b      	ldr	r1, [pc, #556]	; (8005080 <CLI_CommandParser+0x398>)
 8004e54:	0028      	movs	r0, r5
 8004e56:	f00e fc5f 	bl	8013718 <strncmp>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d000      	beq.n	8004e60 <CLI_CommandParser+0x178>
 8004e5e:	e0b4      	b.n	8004fca <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;
 8004e60:	4b88      	ldr	r3, [pc, #544]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e66:	2119      	movs	r1, #25
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f004 fc29 	bl	80096c0 <SendMessageToModule>
						osDelay(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f008 fc9d 	bl	800d7ae <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e74:	4b84      	ldr	r3, [pc, #528]	; (8005088 <CLI_CommandParser+0x3a0>)
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b80      	ldr	r3, [pc, #512]	; (800507c <CLI_CommandParser+0x394>)
 8004e7a:	7818      	ldrb	r0, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4651      	mov	r1, sl
 8004e80:	f7fe fe64 	bl	8003b4c <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 8004e84:	4b7f      	ldr	r3, [pc, #508]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e86:	799b      	ldrb	r3, [r3, #6]
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d18e      	bne.n	8004daa <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004e8c:	21fa      	movs	r1, #250	; 0xfa
 8004e8e:	0089      	lsls	r1, r1, #2
 8004e90:	2001      	movs	r0, #1
 8004e92:	f00a f85f 	bl	800ef54 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004e96:	4b7d      	ldr	r3, [pc, #500]	; (800508c <CLI_CommandParser+0x3a4>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d085      	beq.n	8004daa <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004e9e:	4a7c      	ldr	r2, [pc, #496]	; (8005090 <CLI_CommandParser+0x3a8>)
 8004ea0:	8813      	ldrh	r3, [r2, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	0022      	movs	r2, r4
 8004eaa:	497a      	ldr	r1, [pc, #488]	; (8005094 <CLI_CommandParser+0x3ac>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00e fbef 	bl	8013690 <sprintf>
 8004eb2:	e77a      	b.n	8004daa <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004eb4:	2299      	movs	r2, #153	; 0x99
 8004eb6:	1c68      	adds	r0, r5, #1
 8004eb8:	0092      	lsls	r2, r2, #2
 8004eba:	0021      	movs	r1, r4
 8004ebc:	f008 fd0e 	bl	800d8dc <FreeRTOS_CLIProcessCommand>
 8004ec0:	0006      	movs	r6, r0
 8004ec2:	e74a      	b.n	8004d5a <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004ec4:	2227      	movs	r2, #39	; 0x27
 8004ec6:	4974      	ldr	r1, [pc, #464]	; (8005098 <CLI_CommandParser+0x3b0>)
 8004ec8:	0020      	movs	r0, r4
 8004eca:	f00e f9de 	bl	801328a <memcpy>
 8004ece:	e76c      	b.n	8004daa <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004ed0:	2225      	movs	r2, #37	; 0x25
 8004ed2:	4972      	ldr	r1, [pc, #456]	; (800509c <CLI_CommandParser+0x3b4>)
 8004ed4:	0020      	movs	r0, r4
 8004ed6:	f00e f9d8 	bl	801328a <memcpy>
 8004eda:	e766      	b.n	8004daa <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004edc:	221a      	movs	r2, #26
 8004ede:	2100      	movs	r1, #0
 8004ee0:	486f      	ldr	r0, [pc, #444]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004ee2:	f00e f9db 	bl	801329c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	9803      	ldr	r0, [sp, #12]
 8004eea:	f7fb f915 	bl	8000118 <strlen>
 8004eee:	0006      	movs	r6, r0
 8004ef0:	ab07      	add	r3, sp, #28
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	1e72      	subs	r2, r6, #1
 8004efa:	1a12      	subs	r2, r2, r0
 8004efc:	0029      	movs	r1, r5
 8004efe:	4869      	ldr	r0, [pc, #420]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f00:	f00e fc1b 	bl	801373a <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	f7fb f907 	bl	8000118 <strlen>
 8004f0a:	0006      	movs	r6, r0
 8004f0c:	a807      	add	r0, sp, #28
 8004f0e:	f7fb f903 	bl	8000118 <strlen>
 8004f12:	1a33      	subs	r3, r6, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2217      	movs	r2, #23
 8004f18:	21ff      	movs	r1, #255	; 0xff
 8004f1a:	4658      	mov	r0, fp
 8004f1c:	f004 fba8 	bl	8009670 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f20:	2299      	movs	r2, #153	; 0x99
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	0021      	movs	r1, r4
 8004f26:	0028      	movs	r0, r5
 8004f28:	f008 fcd8 	bl	800d8dc <FreeRTOS_CLIProcessCommand>
 8004f2c:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f2e:	0020      	movs	r0, r4
 8004f30:	f7fb f8f2 	bl	8000118 <strlen>
 8004f34:	1820      	adds	r0, r4, r0
 8004f36:	221d      	movs	r2, #29
 8004f38:	495b      	ldr	r1, [pc, #364]	; (80050a8 <CLI_CommandParser+0x3c0>)
 8004f3a:	f00e f9a6 	bl	801328a <memcpy>
 8004f3e:	e70c      	b.n	8004d5a <CLI_CommandParser+0x72>
					group =id >> 8;
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	121b      	asrs	r3, r3, #8
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	469a      	mov	sl, r3
 8004f48:	4b58      	ldr	r3, [pc, #352]	; (80050ac <CLI_CommandParser+0x3c4>)
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f50:	221a      	movs	r2, #26
 8004f52:	2100      	movs	r1, #0
 8004f54:	4852      	ldr	r0, [pc, #328]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004f56:	f00e f9a1 	bl	801329c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f5a:	1c6b      	adds	r3, r5, #1
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	9803      	ldr	r0, [sp, #12]
 8004f60:	f7fb f8da 	bl	8000118 <strlen>
 8004f64:	0005      	movs	r5, r0
 8004f66:	aa07      	add	r2, sp, #28
 8004f68:	0010      	movs	r0, r2
 8004f6a:	f7fb f8d5 	bl	8000118 <strlen>
 8004f6e:	3d01      	subs	r5, #1
 8004f70:	1a2a      	subs	r2, r5, r0
 8004f72:	9905      	ldr	r1, [sp, #20]
 8004f74:	484b      	ldr	r0, [pc, #300]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f76:	f00e fbe0 	bl	801373a <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f7a:	9803      	ldr	r0, [sp, #12]
 8004f7c:	f7fb f8cc 	bl	8000118 <strlen>
 8004f80:	0005      	movs	r5, r0
 8004f82:	a807      	add	r0, sp, #28
 8004f84:	f7fb f8c8 	bl	8000118 <strlen>
 8004f88:	1a2b      	subs	r3, r5, r0
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2217      	movs	r2, #23
 8004f8e:	4651      	mov	r1, sl
 8004f90:	4658      	mov	r0, fp
 8004f92:	f004 fb6d 	bl	8009670 <BroadcastMessage>
					if(InGroup(myID,group))
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <CLI_CommandParser+0x394>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4a44      	ldr	r2, [pc, #272]	; (80050b0 <CLI_CommandParser+0x3c8>)
 8004fa0:	5a9b      	ldrh	r3, [r3, r2]
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	4113      	asrs	r3, r2
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d406      	bmi.n	8004fba <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004fac:	ab07      	add	r3, sp, #28
 8004fae:	0022      	movs	r2, r4
 8004fb0:	4940      	ldr	r1, [pc, #256]	; (80050b4 <CLI_CommandParser+0x3cc>)
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	f00e fb6c 	bl	8013690 <sprintf>
 8004fb8:	e6cf      	b.n	8004d5a <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004fba:	2299      	movs	r2, #153	; 0x99
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	9805      	ldr	r0, [sp, #20]
 8004fc2:	f008 fc8b 	bl	800d8dc <FreeRTOS_CLIProcessCommand>
 8004fc6:	0006      	movs	r6, r0
 8004fc8:	e7f0      	b.n	8004fac <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fca:	9803      	ldr	r0, [sp, #12]
 8004fcc:	f7fb f8a4 	bl	8000118 <strlen>
 8004fd0:	0006      	movs	r6, r0
 8004fd2:	ab07      	add	r3, sp, #28
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fb f89f 	bl	8000118 <strlen>
 8004fda:	1e72      	subs	r2, r6, #1
 8004fdc:	1a12      	subs	r2, r2, r0
 8004fde:	0029      	movs	r1, r5
 8004fe0:	4830      	ldr	r0, [pc, #192]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004fe2:	f00e fbaa 	bl	801373a <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004fe6:	9803      	ldr	r0, [sp, #12]
 8004fe8:	f7fb f896 	bl	8000118 <strlen>
 8004fec:	0005      	movs	r5, r0
 8004fee:	a807      	add	r0, sp, #28
 8004ff0:	f7fb f892 	bl	8000118 <strlen>
 8004ff4:	3d01      	subs	r5, #1
 8004ff6:	1a2a      	subs	r2, r5, r0
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	2117      	movs	r1, #23
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f004 fb5f 	bl	80096c0 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005002:	9a05      	ldr	r2, [sp, #20]
 8005004:	492c      	ldr	r1, [pc, #176]	; (80050b8 <CLI_CommandParser+0x3d0>)
 8005006:	0020      	movs	r0, r4
 8005008:	f00e fb42 	bl	8013690 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800500c:	7823      	ldrb	r3, [r4, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <CLI_CommandParser+0x330>
 8005012:	4643      	mov	r3, r8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005018:	0020      	movs	r0, r4
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	0002      	movs	r2, r0
 8005020:	2100      	movs	r1, #0
 8005022:	0020      	movs	r0, r4
 8005024:	f00e f93a 	bl	801329c <memset>
 8005028:	e72c      	b.n	8004e84 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800502a:	0020      	movs	r0, r4
 800502c:	f7fb f874 	bl	8000118 <strlen>
 8005030:	b282      	uxth	r2, r0
 8005032:	2301      	movs	r3, #1
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	3331      	adds	r3, #49	; 0x31
 8005038:	0021      	movs	r1, r4
 800503a:	9804      	ldr	r0, [sp, #16]
 800503c:	f008 fa8a 	bl	800d554 <writePxMutex>
 8005040:	e7ea      	b.n	8005018 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005042:	4643      	mov	r3, r8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <CLI_CommandParser+0x362>
 8005048:	e68b      	b.n	8004d62 <CLI_CommandParser+0x7a>
 800504a:	e6b7      	b.n	8004dbc <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 800504c:	2301      	movs	r3, #1
 800504e:	425b      	negs	r3, r3
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	3333      	adds	r3, #51	; 0x33
 8005054:	2238      	movs	r2, #56	; 0x38
 8005056:	4919      	ldr	r1, [pc, #100]	; (80050bc <CLI_CommandParser+0x3d4>)
 8005058:	9804      	ldr	r0, [sp, #16]
 800505a:	f008 fa7b 	bl	800d554 <writePxMutex>
}
 800505e:	e043      	b.n	80050e8 <CLI_CommandParser+0x400>
 8005060:	2000124c 	.word	0x2000124c
 8005064:	08018138 	.word	0x08018138
 8005068:	0801818c 	.word	0x0801818c
 800506c:	080181d8 	.word	0x080181d8
 8005070:	08018134 	.word	0x08018134
 8005074:	08017dcc 	.word	0x08017dcc
 8005078:	08018194 	.word	0x08018194
 800507c:	20001076 	.word	0x20001076
 8005080:	08018278 	.word	0x08018278
 8005084:	200069c8 	.word	0x200069c8
 8005088:	20000a77 	.word	0x20000a77
 800508c:	20001110 	.word	0x20001110
 8005090:	2000179a 	.word	0x2000179a
 8005094:	080182a4 	.word	0x080182a4
 8005098:	080181dc 	.word	0x080181dc
 800509c:	08018204 	.word	0x08018204
 80050a0:	20000cec 	.word	0x20000cec
 80050a4:	20000f38 	.word	0x20000f38
 80050a8:	0801822c 	.word	0x0801822c
 80050ac:	2000121e 	.word	0x2000121e
 80050b0:	20000ec0 	.word	0x20000ec0
 80050b4:	0801824c 	.word	0x0801824c
 80050b8:	08018280 	.word	0x08018280
 80050bc:	080182c4 	.word	0x080182c4
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050c0:	0020      	movs	r0, r4
 80050c2:	f7fb f829 	bl	8000118 <strlen>
 80050c6:	0002      	movs	r2, r0
 80050c8:	2100      	movs	r1, #0
 80050ca:	0020      	movs	r0, r4
 80050cc:	f00e f8e6 	bl	801329c <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 80050d0:	2209      	movs	r2, #9
 80050d2:	2100      	movs	r1, #0
 80050d4:	a807      	add	r0, sp, #28
 80050d6:	f00e f8e1 	bl	801329c <memset>
	if(!recordSnippet && enableOutput)
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <CLI_CommandParser+0x420>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <CLI_CommandParser+0x400>
 80050e2:	4643      	mov	r3, r8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1b1      	bne.n	800504c <CLI_CommandParser+0x364>
}
 80050e8:	b00b      	add	sp, #44	; 0x2c
 80050ea:	bc3c      	pop	{r2, r3, r4, r5}
 80050ec:	4690      	mov	r8, r2
 80050ee:	4699      	mov	r9, r3
 80050f0:	46a2      	mov	sl, r4
 80050f2:	46ab      	mov	fp, r5
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050f6:	0020      	movs	r0, r4
 80050f8:	f7fb f80e 	bl	8000118 <strlen>
 80050fc:	0002      	movs	r2, r0
 80050fe:	2100      	movs	r1, #0
 8005100:	0020      	movs	r0, r4
 8005102:	f00e f8cb 	bl	801329c <memset>
 8005106:	e7e3      	b.n	80050d0 <CLI_CommandParser+0x3e8>
 8005108:	2000124c 	.word	0x2000124c

0800510c <prvCLITask>:
void prvCLITask(void *pvParameters){
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	46de      	mov	lr, fp
 8005110:	4657      	mov	r7, sl
 8005112:	464e      	mov	r6, r9
 8005114:	b5c0      	push	{r6, r7, lr}
 8005116:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005118:	2101      	movs	r1, #1
 800511a:	4249      	negs	r1, r1
 800511c:	2001      	movs	r0, #1
 800511e:	f009 ff19 	bl	800ef54 <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005122:	230f      	movs	r3, #15
 8005124:	aa02      	add	r2, sp, #8
 8005126:	4694      	mov	ip, r2
 8005128:	4463      	add	r3, ip
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800512e:	f008 fc53 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 8005132:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005134:	23e1      	movs	r3, #225	; 0xe1
 8005136:	031b      	lsls	r3, r3, #12
 8005138:	4a5f      	ldr	r2, [pc, #380]	; (80052b8 <prvCLITask+0x1ac>)
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d009      	beq.n	8005154 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005140:	2401      	movs	r4, #1
			if(port != PcPort)
 8005142:	4e5e      	ldr	r6, [pc, #376]	; (80052bc <prvCLITask+0x1b0>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005144:	001d      	movs	r5, r3
			if(port != PcPort)
 8005146:	7833      	ldrb	r3, [r6, #0]
 8005148:	42a3      	cmp	r3, r4
 800514a:	d12d      	bne.n	80051a8 <prvCLITask+0x9c>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800514c:	3401      	adds	r4, #1
 800514e:	b2e4      	uxtb	r4, r4
 8005150:	2c07      	cmp	r4, #7
 8005152:	d1f8      	bne.n	8005146 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <prvCLITask+0x1b4>)
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	0053      	lsls	r3, r2, #1
 800515a:	189b      	adds	r3, r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4a59      	ldr	r2, [pc, #356]	; (80052c4 <prvCLITask+0x1b8>)
 8005160:	189b      	adds	r3, r3, r2
 8005162:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <prvCLITask+0x1bc>)
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4c59      	ldr	r4, [pc, #356]	; (80052cc <prvCLITask+0x1c0>)
 8005168:	4d54      	ldr	r5, [pc, #336]	; (80052bc <prvCLITask+0x1b0>)
 800516a:	7829      	ldrb	r1, [r5, #0]
 800516c:	9100      	str	r1, [sp, #0]
 800516e:	4958      	ldr	r1, [pc, #352]	; (80052d0 <prvCLITask+0x1c4>)
 8005170:	0020      	movs	r0, r4
 8005172:	f00e fa8d 	bl	8013690 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005176:	22a4      	movs	r2, #164	; 0xa4
 8005178:	7828      	ldrb	r0, [r5, #0]
 800517a:	230a      	movs	r3, #10
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4955      	ldr	r1, [pc, #340]	; (80052d4 <prvCLITask+0x1c8>)
 8005180:	f008 fa10 	bl	800d5a4 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005184:	0020      	movs	r0, r4
 8005186:	f7fa ffc7 	bl	8000118 <strlen>
 800518a:	b282      	uxth	r2, r0
 800518c:	7828      	ldrb	r0, [r5, #0]
 800518e:	230a      	movs	r3, #10
 8005190:	0021      	movs	r1, r4
 8005192:	f008 fa07 	bl	800d5a4 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005196:	2300      	movs	r3, #0
 8005198:	469b      	mov	fp, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <prvCLITask+0x1b0>)
 800519c:	469a      	mov	sl, r3
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <prvCLITask+0x1cc>)
 80051a0:	4699      	mov	r9, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051a2:	001f      	movs	r7, r3
			if(UARTRxBuf[PcPort - 1][chr]){
 80051a4:	4656      	mov	r6, sl
 80051a6:	e066      	b.n	8005276 <prvCLITask+0x16a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80051a8:	0029      	movs	r1, r5
 80051aa:	0020      	movs	r0, r4
 80051ac:	f008 fa40 	bl	800d630 <UpdateBaudrate>
 80051b0:	e7cc      	b.n	800514c <prvCLITask+0x40>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80051b2:	200f      	movs	r0, #15
 80051b4:	ad02      	add	r5, sp, #8
 80051b6:	46ac      	mov	ip, r5
 80051b8:	4460      	add	r0, ip
 80051ba:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 80051bc:	0198      	lsls	r0, r3, #6
 80051be:	4a47      	ldr	r2, [pc, #284]	; (80052dc <prvCLITask+0x1d0>)
 80051c0:	1812      	adds	r2, r2, r0
 80051c2:	2000      	movs	r0, #0
 80051c4:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 80051c6:	4a44      	ldr	r2, [pc, #272]	; (80052d8 <prvCLITask+0x1cc>)
 80051c8:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80051ca:	240f      	movs	r4, #15
 80051cc:	ab02      	add	r3, sp, #8
 80051ce:	469c      	mov	ip, r3
 80051d0:	4464      	add	r4, ip
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <prvCLITask+0x1b0>)
 80051d4:	7818      	ldrb	r0, [r3, #0]
 80051d6:	230a      	movs	r3, #10
 80051d8:	2201      	movs	r2, #1
 80051da:	0021      	movs	r1, r4
 80051dc:	f008 f9e2 	bl	800d5a4 <writePxITMutex>
		if(cRxedChar == '\r'){
 80051e0:	7823      	ldrb	r3, [r4, #0]
 80051e2:	2b0d      	cmp	r3, #13
 80051e4:	d028      	beq.n	8005238 <prvCLITask+0x12c>
			if(cRxedChar == '\n'){
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d043      	beq.n	8005272 <prvCLITask+0x166>
			else if(cRxedChar == '\b'){
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d059      	beq.n	80052a2 <prvCLITask+0x196>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051ee:	001a      	movs	r2, r3
 80051f0:	3a20      	subs	r2, #32
 80051f2:	2a5e      	cmp	r2, #94	; 0x5e
 80051f4:	d83d      	bhi.n	8005272 <prvCLITask+0x166>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051f6:	465a      	mov	r2, fp
 80051f8:	2a31      	cmp	r2, #49	; 0x31
 80051fa:	dc3a      	bgt.n	8005272 <prvCLITask+0x166>
						cInputString[cInputIndex] =cRxedChar;
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <prvCLITask+0x1d4>)
 80051fe:	4659      	mov	r1, fp
 8005200:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005202:	465b      	mov	r3, fp
 8005204:	3301      	adds	r3, #1
 8005206:	b25b      	sxtb	r3, r3
 8005208:	469b      	mov	fp, r3
 800520a:	e032      	b.n	8005272 <prvCLITask+0x166>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800520c:	2200      	movs	r2, #0
 800520e:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005210:	f00a f97a 	bl	800f508 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005214:	3c3e      	subs	r4, #62	; 0x3e
			if(UARTRxBuf[PcPort - 1][chr]){
 8005216:	7833      	ldrb	r3, [r6, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	0021      	movs	r1, r4
 800521c:	019a      	lsls	r2, r3, #6
 800521e:	18aa      	adds	r2, r5, r2
 8005220:	5d12      	ldrb	r2, [r2, r4]
 8005222:	2a00      	cmp	r2, #0
 8005224:	d1c5      	bne.n	80051b2 <prvCLITask+0xa6>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005226:	2c3f      	cmp	r4, #63	; 0x3f
 8005228:	d0f0      	beq.n	800520c <prvCLITask+0x100>
			taskYIELD();
 800522a:	f00a f96d 	bl	800f508 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800522e:	3401      	adds	r4, #1
 8005230:	b2a4      	uxth	r4, r4
 8005232:	2c3f      	cmp	r4, #63	; 0x3f
 8005234:	d9ef      	bls.n	8005216 <prvCLITask+0x10a>
 8005236:	e7c8      	b.n	80051ca <prvCLITask+0xbe>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <prvCLITask+0x1b0>)
 800523a:	7818      	ldrb	r0, [r3, #0]
 800523c:	230a      	movs	r3, #10
 800523e:	2202      	movs	r2, #2
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <prvCLITask+0x1d8>)
 8005242:	f008 f9af 	bl	800d5a4 <writePxITMutex>
			if(cInputIndex == 0){
 8005246:	465b      	mov	r3, fp
 8005248:	2b00      	cmp	r3, #0
 800524a:	d025      	beq.n	8005298 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800524c:	4c24      	ldr	r4, [pc, #144]	; (80052e0 <prvCLITask+0x1d4>)
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <prvCLITask+0x1b0>)
 8005250:	7818      	ldrb	r0, [r3, #0]
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	0022      	movs	r2, r4
 8005256:	2101      	movs	r1, #1
 8005258:	f7ff fd46 	bl	8004ce8 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800525c:	0021      	movs	r1, r4
 800525e:	4822      	ldr	r0, [pc, #136]	; (80052e8 <prvCLITask+0x1dc>)
 8005260:	f00e fa52 	bl	8013708 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005264:	2232      	movs	r2, #50	; 0x32
 8005266:	2100      	movs	r1, #0
 8005268:	0020      	movs	r0, r4
 800526a:	f00e f817 	bl	801329c <memset>
			cInputIndex =0;
 800526e:	2300      	movs	r3, #0
 8005270:	469b      	mov	fp, r3
		taskYIELD();
 8005272:	f00a f949 	bl	800f508 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005276:	4653      	mov	r3, sl
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	464a      	mov	r2, r9
 800527e:	5cd2      	ldrb	r2, [r2, r3]
 8005280:	b294      	uxth	r4, r2
 8005282:	2c3f      	cmp	r4, #63	; 0x3f
 8005284:	d8a1      	bhi.n	80051ca <prvCLITask+0xbe>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005286:	0011      	movs	r1, r2
 8005288:	019d      	lsls	r5, r3, #6
 800528a:	4814      	ldr	r0, [pc, #80]	; (80052dc <prvCLITask+0x1d0>)
 800528c:	1940      	adds	r0, r0, r5
 800528e:	5c82      	ldrb	r2, [r0, r2]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d18e      	bne.n	80051b2 <prvCLITask+0xa6>
 8005294:	4d11      	ldr	r5, [pc, #68]	; (80052dc <prvCLITask+0x1d0>)
 8005296:	e7c6      	b.n	8005226 <prvCLITask+0x11a>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005298:	4913      	ldr	r1, [pc, #76]	; (80052e8 <prvCLITask+0x1dc>)
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <prvCLITask+0x1d4>)
 800529c:	f00e fa34 	bl	8013708 <strcpy>
 80052a0:	e7d4      	b.n	800524c <prvCLITask+0x140>
				if(cInputIndex > 0){
 80052a2:	465b      	mov	r3, fp
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dde4      	ble.n	8005272 <prvCLITask+0x166>
					cInputIndex--;
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	469b      	mov	fp, r3
					cInputString[cInputIndex] ='\0';
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvCLITask+0x1d4>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	4659      	mov	r1, fp
 80052b4:	545a      	strb	r2, [r3, r1]
 80052b6:	e7dc      	b.n	8005272 <prvCLITask+0x166>
 80052b8:	200069c8 	.word	0x200069c8
 80052bc:	20000a77 	.word	0x20000a77
 80052c0:	20000050 	.word	0x20000050
 80052c4:	08017e1c 	.word	0x08017e1c
 80052c8:	20001076 	.word	0x20001076
 80052cc:	20001220 	.word	0x20001220
 80052d0:	08018330 	.word	0x08018330
 80052d4:	0801835c 	.word	0x0801835c
 80052d8:	20001450 	.word	0x20001450
 80052dc:	200012d0 	.word	0x200012d0
 80052e0:	20001150 	.word	0x20001150
 80052e4:	08019c1c 	.word	0x08019c1c
 80052e8:	200011ec 	.word	0x200011ec

080052ec <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <ParseSnippetCommand+0x78>)
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	3a01      	subs	r2, #1
 80052f6:	0093      	lsls	r3, r2, #2
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <ParseSnippetCommand+0x7c>)
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02c      	beq.n	8005360 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <ParseSnippetCommand+0x80>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <ParseSnippetCommand+0x80>)
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	782b      	ldrb	r3, [r5, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005318:	2113      	movs	r1, #19
 800531a:	0028      	movs	r0, r5
 800531c:	f00e f9e6 	bl	80136ec <strchr>
 8005320:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005322:	d011      	beq.n	8005348 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005324:	1b42      	subs	r2, r0, r5
 8005326:	0029      	movs	r1, r5
 8005328:	0020      	movs	r0, r4
 800532a:	f00e fa06 	bl	801373a <strncpy>
		ptrStart =ptrEnd + 1;
 800532e:	3601      	adds	r6, #1
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <ParseSnippetCommand+0x80>)
 8005332:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005334:	2001      	movs	r0, #1
 8005336:	e006      	b.n	8005346 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <ParseSnippetCommand+0x80>)
 800533a:	6018      	str	r0, [r3, #0]
 800533c:	e7e7      	b.n	800530e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <ParseSnippetCommand+0x80>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
		return false;
 8005344:	2000      	movs	r0, #0
}
 8005346:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005348:	0029      	movs	r1, r5
 800534a:	0020      	movs	r0, r4
 800534c:	f00e f9dc 	bl	8013708 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005350:	0020      	movs	r0, r4
 8005352:	f7fa fee1 	bl	8000118 <strlen>
 8005356:	182d      	adds	r5, r5, r0
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <ParseSnippetCommand+0x80>)
 800535a:	601d      	str	r5, [r3, #0]
	return true;
 800535c:	2001      	movs	r0, #1
 800535e:	e7f2      	b.n	8005346 <ParseSnippetCommand+0x5a>
		return false;
 8005360:	2000      	movs	r0, #0
 8005362:	e7f0      	b.n	8005346 <ParseSnippetCommand+0x5a>
 8005364:	2000121f 	.word	0x2000121f
 8005368:	200069e4 	.word	0x200069e4
 800536c:	20001248 	.word	0x20001248

08005370 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005376:	0083      	lsls	r3, r0, #2
 8005378:	181b      	adds	r3, r3, r0
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <CheckSnippetCondition+0x10c>)
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d003      	beq.n	800538c <CheckSnippetCondition+0x1c>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d015      	beq.n	80053b4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005388:	2000      	movs	r0, #0
 800538a:	e011      	b.n	80053b0 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800538c:	493b      	ldr	r1, [pc, #236]	; (800547c <CheckSnippetCondition+0x10c>)
 800538e:	0083      	lsls	r3, r0, #2
 8005390:	181a      	adds	r2, r3, r0
 8005392:	0092      	lsls	r2, r2, #2
 8005394:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005396:	7890      	ldrb	r0, [r2, #2]
 8005398:	00c2      	lsls	r2, r0, #3
 800539a:	1812      	adds	r2, r2, r0
 800539c:	191b      	adds	r3, r3, r4
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	18cb      	adds	r3, r1, r3
 80053a2:	4937      	ldr	r1, [pc, #220]	; (8005480 <CheckSnippetCondition+0x110>)
 80053a4:	5c50      	ldrb	r0, [r2, r1]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	4243      	negs	r3, r0
 80053ac:	4158      	adcs	r0, r3
 80053ae:	b2c0      	uxtb	r0, r0
}
 80053b0:	b003      	add	sp, #12
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80053b4:	4e31      	ldr	r6, [pc, #196]	; (800547c <CheckSnippetCondition+0x10c>)
 80053b6:	0085      	lsls	r5, r0, #2
 80053b8:	182b      	adds	r3, r5, r0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	18f3      	adds	r3, r6, r3
 80053be:	78da      	ldrb	r2, [r3, #3]
 80053c0:	3a01      	subs	r2, #1
 80053c2:	0053      	lsls	r3, r2, #1
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <CheckSnippetCondition+0x114>)
 80053ca:	589b      	ldr	r3, [r3, r2]
 80053cc:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80053ce:	1829      	adds	r1, r5, r0
 80053d0:	0089      	lsls	r1, r1, #2
 80053d2:	3106      	adds	r1, #6
 80053d4:	1989      	adds	r1, r1, r6
 80053d6:	2204      	movs	r2, #4
 80053d8:	a801      	add	r0, sp, #4
 80053da:	f00d ff56 	bl	801328a <memcpy>
			switch(snippets[index].cond.mathOperator){
 80053de:	192d      	adds	r5, r5, r4
 80053e0:	00ad      	lsls	r5, r5, #2
 80053e2:	1975      	adds	r5, r6, r5
 80053e4:	786b      	ldrb	r3, [r5, #1]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d83f      	bhi.n	800546a <CheckSnippetCondition+0xfa>
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <CheckSnippetCondition+0x118>)
 80053ee:	58d3      	ldr	r3, [r2, r3]
 80053f0:	469f      	mov	pc, r3
					if(flt1 == flt2)
 80053f2:	1c39      	adds	r1, r7, #0
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	f7fb f86b 	bl	80004d0 <__aeabi_fcmpeq>
 80053fa:	1e43      	subs	r3, r0, #1
 80053fc:	4198      	sbcs	r0, r3
 80053fe:	e7d7      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005400:	1c39      	adds	r1, r7, #0
 8005402:	9801      	ldr	r0, [sp, #4]
 8005404:	f7fb f86a 	bl	80004dc <__aeabi_fcmplt>
 8005408:	1e43      	subs	r3, r0, #1
 800540a:	4198      	sbcs	r0, r3
 800540c:	e7d0      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 800540e:	1c39      	adds	r1, r7, #0
 8005410:	9801      	ldr	r0, [sp, #4]
 8005412:	f7fb f877 	bl	8000504 <__aeabi_fcmpgt>
 8005416:	2800      	cmp	r0, #0
 8005418:	d029      	beq.n	800546e <CheckSnippetCondition+0xfe>
 800541a:	2100      	movs	r1, #0
 800541c:	1c38      	adds	r0, r7, #0
 800541e:	f7fb f857 	bl	80004d0 <__aeabi_fcmpeq>
 8005422:	4243      	negs	r3, r0
 8005424:	4158      	adcs	r0, r3
 8005426:	e7c3      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005428:	1c39      	adds	r1, r7, #0
 800542a:	9801      	ldr	r0, [sp, #4]
 800542c:	f7fb f860 	bl	80004f0 <__aeabi_fcmple>
 8005430:	1e43      	subs	r3, r0, #1
 8005432:	4198      	sbcs	r0, r3
 8005434:	e7bc      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005436:	1c39      	adds	r1, r7, #0
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	f7fb f86d 	bl	8000518 <__aeabi_fcmpge>
 800543e:	2800      	cmp	r0, #0
 8005440:	d017      	beq.n	8005472 <CheckSnippetCondition+0x102>
 8005442:	2100      	movs	r1, #0
 8005444:	1c38      	adds	r0, r7, #0
 8005446:	f7fb f843 	bl	80004d0 <__aeabi_fcmpeq>
 800544a:	4243      	negs	r3, r0
 800544c:	4158      	adcs	r0, r3
 800544e:	e7af      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005450:	1c39      	adds	r1, r7, #0
 8005452:	9801      	ldr	r0, [sp, #4]
 8005454:	f7fb f83c 	bl	80004d0 <__aeabi_fcmpeq>
 8005458:	2800      	cmp	r0, #0
 800545a:	d10c      	bne.n	8005476 <CheckSnippetCondition+0x106>
 800545c:	2100      	movs	r1, #0
 800545e:	1c38      	adds	r0, r7, #0
 8005460:	f7fb f836 	bl	80004d0 <__aeabi_fcmpeq>
 8005464:	4243      	negs	r3, r0
 8005466:	4158      	adcs	r0, r3
 8005468:	e7a2      	b.n	80053b0 <CheckSnippetCondition+0x40>
	return false;
 800546a:	2000      	movs	r0, #0
 800546c:	e7a0      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800546e:	2000      	movs	r0, #0
 8005470:	e79e      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005472:	2000      	movs	r0, #0
 8005474:	e79c      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005476:	2000      	movs	r0, #0
 8005478:	e79a      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	200069e4 	.word	0x200069e4
 8005480:	2000151c 	.word	0x2000151c
 8005484:	20000084 	.word	0x20000084
 8005488:	08018118 	.word	0x08018118

0800548c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800548e:	f008 faa3 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 8005492:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <ExecuteSnippet+0x7c>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <ExecuteSnippet+0x76>
 800549c:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 800549e:	4f1b      	ldr	r7, [pc, #108]	; (800550c <ExecuteSnippet+0x80>)
 80054a0:	e01a      	b.n	80054d8 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <ExecuteSnippet+0x84>)
 80054a4:	7818      	ldrb	r0, [r3, #0]
 80054a6:	002b      	movs	r3, r5
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <ExecuteSnippet+0x88>)
 80054aa:	2100      	movs	r1, #0
 80054ac:	f7ff fc1c 	bl	8004ce8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fa fe31 	bl	8000118 <strlen>
 80054b6:	0002      	movs	r2, r0
 80054b8:	2100      	movs	r1, #0
 80054ba:	0028      	movs	r0, r5
 80054bc:	f00d feee 	bl	801329c <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054c0:	4914      	ldr	r1, [pc, #80]	; (8005514 <ExecuteSnippet+0x88>)
 80054c2:	68f0      	ldr	r0, [r6, #12]
 80054c4:	f7ff ff12 	bl	80052ec <ParseSnippetCommand>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1ea      	bne.n	80054a2 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80054cc:	3401      	adds	r4, #1
 80054ce:	b2a4      	uxth	r4, r4
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <ExecuteSnippet+0x7c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d914      	bls.n	8005502 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 80054d8:	00a3      	lsls	r3, r4, #2
 80054da:	191b      	adds	r3, r3, r4
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	7c1b      	ldrb	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f2      	beq.n	80054cc <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80054e6:	b2e0      	uxtb	r0, r4
 80054e8:	f7ff ff42 	bl	8005370 <CheckSnippetCondition>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0ed      	beq.n	80054cc <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <ExecuteSnippet+0x8c>)
 80054f2:	2220      	movs	r2, #32
 80054f4:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054f6:	00a3      	lsls	r3, r4, #2
 80054f8:	191e      	adds	r6, r3, r4
 80054fa:	00b6      	lsls	r6, r6, #2
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <ExecuteSnippet+0x80>)
 80054fe:	199e      	adds	r6, r3, r6
 8005500:	e7de      	b.n	80054c0 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005502:	2000      	movs	r0, #0
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	2000121f 	.word	0x2000121f
 800550c:	200069e4 	.word	0x200069e4
 8005510:	20000a77 	.word	0x20000a77
 8005514:	200011b8 	.word	0x200011b8
 8005518:	200069c8 	.word	0x200069c8

0800551c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800551c:	2000      	movs	r0, #0
 800551e:	4770      	bx	lr

08005520 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	0004      	movs	r4, r0
 8005526:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005528:	2300      	movs	r3, #0
 800552a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800552c:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800552e:	2800      	cmp	r0, #0
 8005530:	d101      	bne.n	8005536 <setBaudrateCommand+0x16>
 8005532:	b672      	cpsid	i
 8005534:	e7fe      	b.n	8005534 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005536:	aa01      	add	r2, sp, #4
 8005538:	2101      	movs	r1, #1
 800553a:	0028      	movs	r0, r5
 800553c:	f008 fa50 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005540:	2300      	movs	r3, #0
 8005542:	56c3      	ldrsb	r3, [r0, r3]
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d00c      	beq.n	8005562 <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005548:	466a      	mov	r2, sp
 800554a:	2102      	movs	r1, #2
 800554c:	0028      	movs	r0, r5
 800554e:	f008 fa47 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005552:	f00d fc10 	bl	8012d76 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005556:	2213      	movs	r2, #19
 8005558:	490f      	ldr	r1, [pc, #60]	; (8005598 <setBaudrateCommand+0x78>)
 800555a:	0020      	movs	r0, r4
 800555c:	f00d fe95 	bl	801328a <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005560:	e016      	b.n	8005590 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005562:	3001      	adds	r0, #1
 8005564:	f00d fc07 	bl	8012d76 <atol>
 8005568:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800556a:	466a      	mov	r2, sp
 800556c:	2102      	movs	r1, #2
 800556e:	0028      	movs	r0, r5
 8005570:	f008 fa36 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005574:	f00d fbff 	bl	8012d76 <atol>
 8005578:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800557a:	b2f0      	uxtb	r0, r6
 800557c:	0029      	movs	r1, r5
 800557e:	f008 f857 	bl	800d630 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	4033      	ands	r3, r6
 8005586:	002a      	movs	r2, r5
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <setBaudrateCommand+0x7c>)
 800558a:	0020      	movs	r0, r4
 800558c:	f00e f880 	bl	8013690 <sprintf>
}
 8005590:	2000      	movs	r0, #0
 8005592:	b002      	add	sp, #8
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	08018fe8 	.word	0x08018fe8
 800559c:	08018fc0 	.word	0x08018fc0

080055a0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055a0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d101      	bne.n	80055aa <flashsizeCommand+0xa>
 80055a6:	b672      	cpsid	i
 80055a8:	e7fe      	b.n	80055a8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <flashsizeCommand+0x18>)
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	4903      	ldr	r1, [pc, #12]	; (80055bc <flashsizeCommand+0x1c>)
 80055b0:	f00e f86e 	bl	8013690 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80055b4:	2000      	movs	r0, #0
 80055b6:	bd10      	pop	{r4, pc}
 80055b8:	1ffff7cc 	.word	0x1ffff7cc
 80055bc:	080189b4 	.word	0x080189b4

080055c0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	0004      	movs	r4, r0
 80055c6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	d101      	bne.n	80055d8 <GetReadPrecentageCommand+0x18>
 80055d4:	b672      	cpsid	i
 80055d6:	e7fe      	b.n	80055d6 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d8:	aa01      	add	r2, sp, #4
 80055da:	2101      	movs	r1, #1
 80055dc:	f008 fa00 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80055e0:	7803      	ldrb	r3, [r0, #0]
 80055e2:	3b32      	subs	r3, #50	; 0x32
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d907      	bls.n	80055f8 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80055e8:	2215      	movs	r2, #21
 80055ea:	490b      	ldr	r1, [pc, #44]	; (8005618 <GetReadPrecentageCommand+0x58>)
 80055ec:	0020      	movs	r0, r4
 80055ee:	f00d fe4c 	bl	801328a <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	b002      	add	sp, #8
 80055f6:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80055f8:	f00d fbbd 	bl	8012d76 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80055fc:	b2c0      	uxtb	r0, r0
 80055fe:	4669      	mov	r1, sp
 8005600:	f003 f988 	bl	8008914 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005604:	9800      	ldr	r0, [sp, #0]
 8005606:	f7fd fa8d 	bl	8002b24 <__aeabi_f2d>
 800560a:	0002      	movs	r2, r0
 800560c:	000b      	movs	r3, r1
 800560e:	4903      	ldr	r1, [pc, #12]	; (800561c <GetReadPrecentageCommand+0x5c>)
 8005610:	0020      	movs	r0, r4
 8005612:	f00e f83d 	bl	8013690 <sprintf>
 8005616:	e7ec      	b.n	80055f2 <GetReadPrecentageCommand+0x32>
 8005618:	080186b0 	.word	0x080186b0
 800561c:	0801868c 	.word	0x0801868c

08005620 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005620:	b510      	push	{r4, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005626:	2300      	movs	r3, #0
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800562c:	2800      	cmp	r0, #0
 800562e:	d101      	bne.n	8005634 <ReadVrefCommand+0x14>
 8005630:	b672      	cpsid	i
 8005632:	e7fe      	b.n	8005632 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005634:	4669      	mov	r1, sp
 8005636:	a801      	add	r0, sp, #4
 8005638:	f003 f8ae 	bl	8008798 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800563c:	a901      	add	r1, sp, #4
 800563e:	0020      	movs	r0, r4
 8005640:	f00e f862 	bl	8013708 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005644:	9800      	ldr	r0, [sp, #0]
 8005646:	f7fd fa6d 	bl	8002b24 <__aeabi_f2d>
 800564a:	0002      	movs	r2, r0
 800564c:	000b      	movs	r3, r1
 800564e:	4903      	ldr	r1, [pc, #12]	; (800565c <ReadVrefCommand+0x3c>)
 8005650:	0020      	movs	r0, r4
 8005652:	f00e f81d 	bl	8013690 <sprintf>
}
 8005656:	2000      	movs	r0, #0
 8005658:	b002      	add	sp, #8
 800565a:	bd10      	pop	{r4, pc}
 800565c:	080186fc 	.word	0x080186fc

08005660 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005660:	b510      	push	{r4, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005666:	2300      	movs	r3, #0
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800566c:	2800      	cmp	r0, #0
 800566e:	d101      	bne.n	8005674 <ReadTempCommand+0x14>
 8005670:	b672      	cpsid	i
 8005672:	e7fe      	b.n	8005672 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005674:	4669      	mov	r1, sp
 8005676:	a801      	add	r0, sp, #4
 8005678:	f003 f88e 	bl	8008798 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800567c:	a901      	add	r1, sp, #4
 800567e:	0020      	movs	r0, r4
 8005680:	f00e f842 	bl	8013708 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005684:	9801      	ldr	r0, [sp, #4]
 8005686:	f7fd fa4d 	bl	8002b24 <__aeabi_f2d>
 800568a:	0002      	movs	r2, r0
 800568c:	000b      	movs	r3, r1
 800568e:	4903      	ldr	r1, [pc, #12]	; (800569c <ReadTempCommand+0x3c>)
 8005690:	0020      	movs	r0, r4
 8005692:	f00d fffd 	bl	8013690 <sprintf>
}
 8005696:	2000      	movs	r0, #0
 8005698:	b002      	add	sp, #8
 800569a:	bd10      	pop	{r4, pc}
 800569c:	080186c8 	.word	0x080186c8

080056a0 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	0004      	movs	r4, r0
 80056a6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80056ac:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d101      	bne.n	80056ba <ADCReadCommand+0x1a>
 80056b6:	b672      	cpsid	i
 80056b8:	e7fe      	b.n	80056b8 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056ba:	aa03      	add	r2, sp, #12
 80056bc:	2101      	movs	r1, #1
 80056be:	0030      	movs	r0, r6
 80056c0:	f008 f98e 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80056c4:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056c6:	aa02      	add	r2, sp, #8
 80056c8:	2102      	movs	r1, #2
 80056ca:	0030      	movs	r0, r6
 80056cc:	f008 f988 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80056d0:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80056d2:	782b      	ldrb	r3, [r5, #0]
 80056d4:	3b32      	subs	r3, #50	; 0x32
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d907      	bls.n	80056ea <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056da:	2215      	movs	r2, #21
 80056dc:	4919      	ldr	r1, [pc, #100]	; (8005744 <ADCReadCommand+0xa4>)
 80056de:	0020      	movs	r0, r4
 80056e0:	f00d fdd3 	bl	801328a <memcpy>
}
 80056e4:	2000      	movs	r0, #0
 80056e6:	b004      	add	sp, #16
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80056ea:	0028      	movs	r0, r5
 80056ec:	f00d fb43 	bl	8012d76 <atol>
 80056f0:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80056f2:	4915      	ldr	r1, [pc, #84]	; (8005748 <ADCReadCommand+0xa8>)
 80056f4:	0030      	movs	r0, r6
 80056f6:	f7fa fd05 	bl	8000104 <strcmp>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d005      	beq.n	800570a <ADCReadCommand+0x6a>
 80056fe:	4913      	ldr	r1, [pc, #76]	; (800574c <ADCReadCommand+0xac>)
 8005700:	0030      	movs	r0, r6
 8005702:	f7fa fcff 	bl	8000104 <strcmp>
 8005706:	2800      	cmp	r0, #0
 8005708:	d116      	bne.n	8005738 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 800570a:	4e0f      	ldr	r6, [pc, #60]	; (8005748 <ADCReadCommand+0xa8>)
 800570c:	0031      	movs	r1, r6
 800570e:	0028      	movs	r0, r5
 8005710:	f003 f9ca 	bl	8008aa8 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005714:	aa01      	add	r2, sp, #4
 8005716:	0031      	movs	r1, r6
 8005718:	0028      	movs	r0, r5
 800571a:	f003 f9f3 	bl	8008b04 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800571e:	a901      	add	r1, sp, #4
 8005720:	0020      	movs	r0, r4
 8005722:	f00d fff1 	bl	8013708 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005726:	9801      	ldr	r0, [sp, #4]
 8005728:	f7fa ff4a 	bl	80005c0 <__aeabi_f2uiz>
 800572c:	b282      	uxth	r2, r0
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <ADCReadCommand+0xb0>)
 8005730:	0020      	movs	r0, r4
 8005732:	f00d ffad 	bl	8013690 <sprintf>
 8005736:	e7d5      	b.n	80056e4 <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005738:	2212      	movs	r2, #18
 800573a:	4906      	ldr	r1, [pc, #24]	; (8005754 <ADCReadCommand+0xb4>)
 800573c:	0020      	movs	r0, r4
 800573e:	f00d fda4 	bl	801328a <memcpy>
 8005742:	e7cf      	b.n	80056e4 <ADCReadCommand+0x44>
 8005744:	080186b0 	.word	0x080186b0
 8005748:	0801863c 	.word	0x0801863c
 800574c:	08018640 	.word	0x08018640
 8005750:	08018648 	.word	0x08018648
 8005754:	08018658 	.word	0x08018658

08005758 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	46d6      	mov	lr, sl
 800575c:	4647      	mov	r7, r8
 800575e:	b580      	push	{r7, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	0004      	movs	r4, r0
 8005764:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005766:	2300      	movs	r3, #0
 8005768:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800576a:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <testportCommand+0x19c>)
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	ab02      	add	r3, sp, #8
 8005770:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005772:	2c00      	cmp	r4, #0
 8005774:	d101      	bne.n	800577a <testportCommand+0x22>
 8005776:	b672      	cpsid	i
 8005778:	e7fe      	b.n	8005778 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800577a:	aa03      	add	r2, sp, #12
 800577c:	2101      	movs	r1, #1
 800577e:	f008 f92f 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8005782:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005784:	495c      	ldr	r1, [pc, #368]	; (80058f8 <testportCommand+0x1a0>)
 8005786:	f7fa fcbd 	bl	8000104 <strcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	d173      	bne.n	8005876 <testportCommand+0x11e>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800578e:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <testportCommand+0x1a4>)
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <testportCommand+0x1a8>)
 8005794:	189b      	adds	r3, r3, r2
 8005796:	3b01      	subs	r3, #1
 8005798:	781e      	ldrb	r6, [r3, #0]
 800579a:	2501      	movs	r5, #1
			if(PcPort != ports){
 800579c:	4b57      	ldr	r3, [pc, #348]	; (80058fc <testportCommand+0x1a4>)
 800579e:	4698      	mov	r8, r3
 80057a0:	e015      	b.n	80057ce <testportCommand+0x76>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80057a2:	002a      	movs	r2, r5
 80057a4:	4957      	ldr	r1, [pc, #348]	; (8005904 <testportCommand+0x1ac>)
 80057a6:	0020      	movs	r0, r4
 80057a8:	f00d ff72 	bl	8013690 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057ac:	0020      	movs	r0, r4
 80057ae:	f7fa fcb3 	bl	8000118 <strlen>
 80057b2:	b282      	uxth	r2, r0
 80057b4:	4b51      	ldr	r3, [pc, #324]	; (80058fc <testportCommand+0x1a4>)
 80057b6:	7818      	ldrb	r0, [r3, #0]
 80057b8:	2364      	movs	r3, #100	; 0x64
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	3b5a      	subs	r3, #90	; 0x5a
 80057be:	0021      	movs	r1, r4
 80057c0:	f007 fec8 	bl	800d554 <writePxMutex>
 80057c4:	e02f      	b.n	8005826 <testportCommand+0xce>
 80057c6:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80057c8:	2d07      	cmp	r5, #7
 80057ca:	d100      	bne.n	80057ce <testportCommand+0x76>
 80057cc:	e07f      	b.n	80058ce <testportCommand+0x176>
 80057ce:	b2eb      	uxtb	r3, r5
 80057d0:	469a      	mov	sl, r3
			if(PcPort != ports){
 80057d2:	4643      	mov	r3, r8
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4553      	cmp	r3, sl
 80057d8:	d0f5      	beq.n	80057c6 <testportCommand+0x6e>
				WriteVaule[0] =rand();
 80057da:	f00d fd77 	bl	80132cc <rand>
 80057de:	af02      	add	r7, sp, #8
 80057e0:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 80057e2:	2364      	movs	r3, #100	; 0x64
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	3b5a      	subs	r3, #90	; 0x5a
 80057e8:	2201      	movs	r2, #1
 80057ea:	0039      	movs	r1, r7
 80057ec:	4650      	mov	r0, sl
 80057ee:	f007 feb1 	bl	800d554 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80057f2:	4650      	mov	r0, sl
 80057f4:	f007 fe8c 	bl	800d510 <GetUart>
 80057f8:	6803      	ldr	r3, [r0, #0]
 80057fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 80057fc:	783a      	ldrb	r2, [r7, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	429a      	cmp	r2, r3
 8005802:	d0ce      	beq.n	80057a2 <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005804:	002a      	movs	r2, r5
 8005806:	4940      	ldr	r1, [pc, #256]	; (8005908 <testportCommand+0x1b0>)
 8005808:	0020      	movs	r0, r4
 800580a:	f00d ff41 	bl	8013690 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800580e:	0020      	movs	r0, r4
 8005810:	f7fa fc82 	bl	8000118 <strlen>
 8005814:	b282      	uxth	r2, r0
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <testportCommand+0x1a4>)
 8005818:	7818      	ldrb	r0, [r3, #0]
 800581a:	2364      	movs	r3, #100	; 0x64
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	3b5a      	subs	r3, #90	; 0x5a
 8005820:	0021      	movs	r1, r4
 8005822:	f007 fe97 	bl	800d554 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005826:	2254      	movs	r2, #84	; 0x54
 8005828:	4938      	ldr	r1, [pc, #224]	; (800590c <testportCommand+0x1b4>)
 800582a:	0020      	movs	r0, r4
 800582c:	f00d fd2d 	bl	801328a <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005830:	0020      	movs	r0, r4
 8005832:	f7fa fc71 	bl	8000118 <strlen>
 8005836:	b282      	uxth	r2, r0
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <testportCommand+0x1a4>)
 800583a:	7818      	ldrb	r0, [r3, #0]
 800583c:	2364      	movs	r3, #100	; 0x64
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	3b5a      	subs	r3, #90	; 0x5a
 8005842:	0021      	movs	r1, r4
 8005844:	f007 fe86 	bl	800d554 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005848:	3601      	adds	r6, #1
 800584a:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <testportCommand+0x1a4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	4a2f      	ldr	r2, [pc, #188]	; (8005910 <testportCommand+0x1b8>)
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	5d9b      	ldrb	r3, [r3, r6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1b4      	bne.n	80057c6 <testportCommand+0x6e>
 800585c:	4692      	mov	sl, r2
 800585e:	4f27      	ldr	r7, [pc, #156]	; (80058fc <testportCommand+0x1a4>)
					Delay_ms(1);
 8005860:	2001      	movs	r0, #1
 8005862:	f009 ffcf 	bl	800f804 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005866:	783b      	ldrb	r3, [r7, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	4453      	add	r3, sl
 800586e:	5d9b      	ldrb	r3, [r3, r6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f5      	beq.n	8005860 <testportCommand+0x108>
 8005874:	e7a7      	b.n	80057c6 <testportCommand+0x6e>
	else if(pcParameterString1[0] == 'p'){
 8005876:	2300      	movs	r3, #0
 8005878:	56eb      	ldrsb	r3, [r5, r3]
 800587a:	2b70      	cmp	r3, #112	; 0x70
 800587c:	d005      	beq.n	800588a <testportCommand+0x132>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800587e:	220f      	movs	r2, #15
 8005880:	4924      	ldr	r1, [pc, #144]	; (8005914 <testportCommand+0x1bc>)
 8005882:	0020      	movs	r0, r4
 8005884:	f00d fd01 	bl	801328a <memcpy>
 8005888:	e021      	b.n	80058ce <testportCommand+0x176>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800588a:	1c68      	adds	r0, r5, #1
 800588c:	f00d fa73 	bl	8012d76 <atol>
 8005890:	0005      	movs	r5, r0
 8005892:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005894:	1e7b      	subs	r3, r7, #1
 8005896:	2b05      	cmp	r3, #5
 8005898:	d825      	bhi.n	80058e6 <testportCommand+0x18e>
				WriteVaule[0] =rand();
 800589a:	f00d fd17 	bl	80132cc <rand>
 800589e:	ae02      	add	r6, sp, #8
 80058a0:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	3b32      	subs	r3, #50	; 0x32
 80058a8:	2201      	movs	r2, #1
 80058aa:	0031      	movs	r1, r6
 80058ac:	0038      	movs	r0, r7
 80058ae:	f007 fe51 	bl	800d554 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 80058b2:	0038      	movs	r0, r7
 80058b4:	f007 fe2c 	bl	800d510 <GetUart>
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80058bc:	7832      	ldrb	r2, [r6, #0]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d10a      	bne.n	80058da <testportCommand+0x182>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80058c4:	b2ea      	uxtb	r2, r5
 80058c6:	490f      	ldr	r1, [pc, #60]	; (8005904 <testportCommand+0x1ac>)
 80058c8:	0020      	movs	r0, r4
 80058ca:	f00d fee1 	bl	8013690 <sprintf>
}
 80058ce:	2000      	movs	r0, #0
 80058d0:	b005      	add	sp, #20
 80058d2:	bc0c      	pop	{r2, r3}
 80058d4:	4690      	mov	r8, r2
 80058d6:	469a      	mov	sl, r3
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80058da:	b2ea      	uxtb	r2, r5
 80058dc:	490a      	ldr	r1, [pc, #40]	; (8005908 <testportCommand+0x1b0>)
 80058de:	0020      	movs	r0, r4
 80058e0:	f00d fed6 	bl	8013690 <sprintf>
 80058e4:	e7f3      	b.n	80058ce <testportCommand+0x176>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80058e6:	221b      	movs	r2, #27
 80058e8:	490b      	ldr	r1, [pc, #44]	; (8005918 <testportCommand+0x1c0>)
 80058ea:	0020      	movs	r0, r4
 80058ec:	f00d fccd 	bl	801328a <memcpy>
	return pdFALSE;
 80058f0:	e7ed      	b.n	80058ce <testportCommand+0x176>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	08017a90 	.word	0x08017a90
 80058f8:	08017dec 	.word	0x08017dec
 80058fc:	20000a77 	.word	0x20000a77
 8005900:	20001450 	.word	0x20001450
 8005904:	0801a2ac 	.word	0x0801a2ac
 8005908:	0801a2c8 	.word	0x0801a2c8
 800590c:	0801a2dc 	.word	0x0801a2dc
 8005910:	200012d0 	.word	0x200012d0
 8005914:	0801a330 	.word	0x0801a330
 8005918:	0801a340 	.word	0x0801a340

0800591c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b083      	sub	sp, #12
 8005920:	0004      	movs	r4, r0
 8005922:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800592a:	2800      	cmp	r0, #0
 800592c:	d101      	bne.n	8005932 <unbridgeCommand+0x16>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005932:	aa01      	add	r2, sp, #4
 8005934:	2101      	movs	r1, #1
 8005936:	0028      	movs	r0, r5
 8005938:	f008 f852 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800593c:	2300      	movs	r3, #0
 800593e:	56c3      	ldrsb	r3, [r0, r3]
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d00e      	beq.n	8005962 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005944:	466a      	mov	r2, sp
 8005946:	2102      	movs	r1, #2
 8005948:	0028      	movs	r0, r5
 800594a:	f008 f849 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800594e:	2300      	movs	r3, #0
 8005950:	56c3      	ldrsb	r3, [r0, r3]
 8005952:	2b70      	cmp	r3, #112	; 0x70
 8005954:	d01e      	beq.n	8005994 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005956:	220f      	movs	r2, #15
 8005958:	491a      	ldr	r1, [pc, #104]	; (80059c4 <unbridgeCommand+0xa8>)
 800595a:	0020      	movs	r0, r4
 800595c:	f00d fc95 	bl	801328a <memcpy>
 8005960:	e015      	b.n	800598e <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005962:	3001      	adds	r0, #1
 8005964:	f00d fa07 	bl	8012d76 <atol>
 8005968:	0006      	movs	r6, r0
 800596a:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800596c:	466a      	mov	r2, sp
 800596e:	2102      	movs	r1, #2
 8005970:	0028      	movs	r0, r5
 8005972:	f008 f835 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005976:	2300      	movs	r3, #0
 8005978:	56c3      	ldrsb	r3, [r0, r3]
 800597a:	2b70      	cmp	r3, #112	; 0x70
 800597c:	d00e      	beq.n	800599c <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 800597e:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005980:	2867      	cmp	r0, #103	; 0x67
 8005982:	d0e8      	beq.n	8005956 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005984:	2219      	movs	r2, #25
 8005986:	4910      	ldr	r1, [pc, #64]	; (80059c8 <unbridgeCommand+0xac>)
 8005988:	0020      	movs	r0, r4
 800598a:	f00d fc7e 	bl	801328a <memcpy>
}
 800598e:	2000      	movs	r0, #0
 8005990:	b003      	add	sp, #12
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005994:	3001      	adds	r0, #1
 8005996:	f00d f9ee 	bl	8012d76 <atol>
 800599a:	e7dc      	b.n	8005956 <unbridgeCommand+0x3a>
 800599c:	3001      	adds	r0, #1
 800599e:	f00d f9ea 	bl	8012d76 <atol>
 80059a2:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 80059a4:	b2c1      	uxtb	r1, r0
 80059a6:	0038      	movs	r0, r7
 80059a8:	f7fe fea2 	bl	80046f0 <Unbridge>
	if(result == BOS_OK)
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d1e7      	bne.n	8005980 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	002b      	movs	r3, r5
 80059b4:	4013      	ands	r3, r2
 80059b6:	4032      	ands	r2, r6
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <unbridgeCommand+0xb0>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00d fe68 	bl	8013690 <sprintf>
 80059c0:	e7e5      	b.n	800598e <unbridgeCommand+0x72>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	0801a330 	.word	0x0801a330
 80059c8:	0801a3f8 	.word	0x0801a3f8
 80059cc:	0801a3d8 	.word	0x0801a3d8

080059d0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	b083      	sub	sp, #12
 80059d4:	0004      	movs	r4, r0
 80059d6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80059d8:	2300      	movs	r3, #0
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80059de:	2800      	cmp	r0, #0
 80059e0:	d101      	bne.n	80059e6 <bridgeCommand+0x16>
 80059e2:	b672      	cpsid	i
 80059e4:	e7fe      	b.n	80059e4 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059e6:	aa01      	add	r2, sp, #4
 80059e8:	2101      	movs	r1, #1
 80059ea:	0028      	movs	r0, r5
 80059ec:	f007 fff8 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80059f0:	2300      	movs	r3, #0
 80059f2:	56c3      	ldrsb	r3, [r0, r3]
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d00e      	beq.n	8005a16 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059f8:	466a      	mov	r2, sp
 80059fa:	2102      	movs	r1, #2
 80059fc:	0028      	movs	r0, r5
 80059fe:	f007 ffef 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a02:	2300      	movs	r3, #0
 8005a04:	56c3      	ldrsb	r3, [r0, r3]
 8005a06:	2b70      	cmp	r3, #112	; 0x70
 8005a08:	d01e      	beq.n	8005a48 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	491a      	ldr	r1, [pc, #104]	; (8005a78 <bridgeCommand+0xa8>)
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f00d fc3b 	bl	801328a <memcpy>
 8005a14:	e015      	b.n	8005a42 <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a16:	3001      	adds	r0, #1
 8005a18:	f00d f9ad 	bl	8012d76 <atol>
 8005a1c:	0006      	movs	r6, r0
 8005a1e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a20:	466a      	mov	r2, sp
 8005a22:	2102      	movs	r1, #2
 8005a24:	0028      	movs	r0, r5
 8005a26:	f007 ffdb 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	56c3      	ldrsb	r3, [r0, r3]
 8005a2e:	2b70      	cmp	r3, #112	; 0x70
 8005a30:	d00e      	beq.n	8005a50 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005a32:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005a34:	2867      	cmp	r0, #103	; 0x67
 8005a36:	d0e8      	beq.n	8005a0a <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a38:	2217      	movs	r2, #23
 8005a3a:	4910      	ldr	r1, [pc, #64]	; (8005a7c <bridgeCommand+0xac>)
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	f00d fc24 	bl	801328a <memcpy>
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	b003      	add	sp, #12
 8005a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f00d f994 	bl	8012d76 <atol>
 8005a4e:	e7dc      	b.n	8005a0a <bridgeCommand+0x3a>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f00d f990 	bl	8012d76 <atol>
 8005a56:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005a58:	b2c1      	uxtb	r1, r0
 8005a5a:	0038      	movs	r0, r7
 8005a5c:	f7fe fe34 	bl	80046c8 <Bridge>
	if(result == BOS_OK)
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1e7      	bne.n	8005a34 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	002b      	movs	r3, r5
 8005a68:	4013      	ands	r3, r2
 8005a6a:	4032      	ands	r2, r6
 8005a6c:	4904      	ldr	r1, [pc, #16]	; (8005a80 <bridgeCommand+0xb0>)
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f00d fe0e 	bl	8013690 <sprintf>
 8005a74:	e7e5      	b.n	8005a42 <bridgeCommand+0x72>
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	0801a330 	.word	0x0801a330
 8005a7c:	08018850 	.word	0x08018850
 8005a80:	0801882c 	.word	0x0801882c

08005a84 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	0005      	movs	r5, r0
 8005a8a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	d101      	bne.n	8005a98 <delSnipCommand+0x14>
 8005a94:	b672      	cpsid	i
 8005a96:	e7fe      	b.n	8005a96 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a98:	aa03      	add	r2, sp, #12
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	f007 ffa0 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aa0:	f00d f963 	bl	8012d6a <atoi>
 8005aa4:	9001      	str	r0, [sp, #4]
 8005aa6:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d003      	beq.n	8005ab4 <delSnipCommand+0x30>
 8005aac:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <delSnipCommand+0xc8>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	42b3      	cmp	r3, r6
 8005ab2:	d207      	bcs.n	8005ac4 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ab4:	2223      	movs	r2, #35	; 0x23
 8005ab6:	4926      	ldr	r1, [pc, #152]	; (8005b50 <delSnipCommand+0xcc>)
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f00d fbe6 	bl	801328a <memcpy>
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	b005      	add	sp, #20
 8005ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005ac4:	466b      	mov	r3, sp
 8005ac6:	791a      	ldrb	r2, [r3, #4]
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	4822      	ldr	r0, [pc, #136]	; (8005b54 <delSnipCommand+0xd0>)
 8005acc:	2314      	movs	r3, #20
 8005ace:	4353      	muls	r3, r2
 8005ad0:	2700      	movs	r7, #0
 8005ad2:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005ad4:	18c4      	adds	r4, r0, r3
 8005ad6:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ad8:	3302      	adds	r3, #2
 8005ada:	1818      	adds	r0, r3, r0
 8005adc:	2204      	movs	r2, #4
 8005ade:	0039      	movs	r1, r7
 8005ae0:	f00d fbdc 	bl	801329c <memset>
		snippets[index - 1].state = false;
 8005ae4:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	f00d f98c 	bl	8012e04 <free>
		snippets[index - 1].cmd = NULL;
 8005aec:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <delSnipCommand+0xc8>)
 8005af0:	781f      	ldrb	r7, [r3, #0]
 8005af2:	42be      	cmp	r6, r7
 8005af4:	d213      	bcs.n	8005b1e <delSnipCommand+0x9a>
 8005af6:	466b      	mov	r3, sp
 8005af8:	7919      	ldrb	r1, [r3, #4]
 8005afa:	2214      	movs	r2, #20
 8005afc:	0014      	movs	r4, r2
 8005afe:	434c      	muls	r4, r1
 8005b00:	4814      	ldr	r0, [pc, #80]	; (8005b54 <delSnipCommand+0xd0>)
 8005b02:	1824      	adds	r4, r4, r0
 8005b04:	1e7b      	subs	r3, r7, #1
 8005b06:	1b9b      	subs	r3, r3, r6
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	4353      	muls	r3, r2
 8005b0e:	1880      	adds	r0, r0, r2
 8005b10:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005b12:	7823      	ldrb	r3, [r4, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <delSnipCommand+0xb0>
 8005b18:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b1a:	42b4      	cmp	r4, r6
 8005b1c:	d1f9      	bne.n	8005b12 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b1e:	1e7b      	subs	r3, r7, #1
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <delSnipCommand+0xc8>)
 8005b22:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b24:	f005 fc78 	bl	800b418 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b28:	2236      	movs	r2, #54	; 0x36
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <delSnipCommand+0xd4>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f00d fbac 	bl	801328a <memcpy>
 8005b32:	e7c4      	b.n	8005abe <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b34:	2214      	movs	r2, #20
 8005b36:	0021      	movs	r1, r4
 8005b38:	0020      	movs	r0, r4
 8005b3a:	3814      	subs	r0, #20
 8005b3c:	f00d fba5 	bl	801328a <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b40:	2214      	movs	r2, #20
 8005b42:	2100      	movs	r1, #0
 8005b44:	0020      	movs	r0, r4
 8005b46:	f00d fba9 	bl	801329c <memset>
 8005b4a:	e7e5      	b.n	8005b18 <delSnipCommand+0x94>
 8005b4c:	2000121f 	.word	0x2000121f
 8005b50:	08018970 	.word	0x08018970
 8005b54:	200069e4 	.word	0x200069e4
 8005b58:	08018938 	.word	0x08018938

08005b5c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	0004      	movs	r4, r0
 8005b62:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d101      	bne.n	8005b70 <pauseSnipCommand+0x14>
 8005b6c:	b672      	cpsid	i
 8005b6e:	e7fe      	b.n	8005b6e <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b70:	aa01      	add	r2, sp, #4
 8005b72:	2101      	movs	r1, #1
 8005b74:	f007 ff34 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005b78:	f00d f8f7 	bl	8012d6a <atoi>
 8005b7c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <pauseSnipCommand+0x2e>
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <pauseSnipCommand+0x60>)
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d207      	bcs.n	8005b9a <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b8a:	2223      	movs	r2, #35	; 0x23
 8005b8c:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <pauseSnipCommand+0x64>)
 8005b8e:	0020      	movs	r0, r4
 8005b90:	f00d fb7b 	bl	801328a <memcpy>
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	b002      	add	sp, #8
 8005b98:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005b9a:	b2c0      	uxtb	r0, r0
 8005b9c:	3801      	subs	r0, #1
 8005b9e:	2314      	movs	r3, #20
 8005ba0:	4343      	muls	r3, r0
 8005ba2:	4808      	ldr	r0, [pc, #32]	; (8005bc4 <pauseSnipCommand+0x68>)
 8005ba4:	18c0      	adds	r0, r0, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005baa:	f005 fc35 	bl	800b418 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005bae:	2235      	movs	r2, #53	; 0x35
 8005bb0:	4905      	ldr	r1, [pc, #20]	; (8005bc8 <pauseSnipCommand+0x6c>)
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	f00d fb69 	bl	801328a <memcpy>
 8005bb8:	e7ec      	b.n	8005b94 <pauseSnipCommand+0x38>
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000121f 	.word	0x2000121f
 8005bc0:	08018970 	.word	0x08018970
 8005bc4:	200069e4 	.word	0x200069e4
 8005bc8:	08018d80 	.word	0x08018d80

08005bcc <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	0004      	movs	r4, r0
 8005bd2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	d101      	bne.n	8005be0 <actSnipCommand+0x14>
 8005bdc:	b672      	cpsid	i
 8005bde:	e7fe      	b.n	8005bde <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005be0:	aa01      	add	r2, sp, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	f007 fefc 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005be8:	f00d f8bf 	bl	8012d6a <atoi>
 8005bec:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <actSnipCommand+0x2e>
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <actSnipCommand+0x60>)
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d207      	bcs.n	8005c0a <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bfa:	2223      	movs	r2, #35	; 0x23
 8005bfc:	490c      	ldr	r1, [pc, #48]	; (8005c30 <actSnipCommand+0x64>)
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f00d fb43 	bl	801328a <memcpy>
}
 8005c04:	2000      	movs	r0, #0
 8005c06:	b002      	add	sp, #8
 8005c08:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c0a:	b2c0      	uxtb	r0, r0
 8005c0c:	3801      	subs	r0, #1
 8005c0e:	2314      	movs	r3, #20
 8005c10:	4343      	muls	r3, r0
 8005c12:	4808      	ldr	r0, [pc, #32]	; (8005c34 <actSnipCommand+0x68>)
 8005c14:	18c0      	adds	r0, r0, r3
 8005c16:	2301      	movs	r3, #1
 8005c18:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c1a:	f005 fbfd 	bl	800b418 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c1e:	2238      	movs	r2, #56	; 0x38
 8005c20:	4905      	ldr	r1, [pc, #20]	; (8005c38 <actSnipCommand+0x6c>)
 8005c22:	0020      	movs	r0, r4
 8005c24:	f00d fb31 	bl	801328a <memcpy>
 8005c28:	e7ec      	b.n	8005c04 <actSnipCommand+0x38>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	2000121f 	.word	0x2000121f
 8005c30:	08018970 	.word	0x08018970
 8005c34:	200069e4 	.word	0x200069e4
 8005c38:	08018734 	.word	0x08018734

08005c3c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	46d6      	mov	lr, sl
 8005c40:	464f      	mov	r7, r9
 8005c42:	4646      	mov	r6, r8
 8005c44:	b5c0      	push	{r6, r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005c4a:	aa06      	add	r2, sp, #24
 8005c4c:	4b7a      	ldr	r3, [pc, #488]	; (8005e38 <snipCommand+0x1fc>)
 8005c4e:	3304      	adds	r3, #4
 8005c50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005c52:	c223      	stmia	r2!, {r0, r1, r5}
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d101      	bne.n	8005c60 <snipCommand+0x24>
 8005c5c:	b672      	cpsid	i
 8005c5e:	e7fe      	b.n	8005c5e <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005c60:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <snipCommand+0x200>)
 8005c62:	7818      	ldrb	r0, [r3, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	425b      	negs	r3, r3
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	3333      	adds	r3, #51	; 0x33
 8005c6c:	2237      	movs	r2, #55	; 0x37
 8005c6e:	4974      	ldr	r1, [pc, #464]	; (8005e40 <snipCommand+0x204>)
 8005c70:	f007 fc70 	bl	800d554 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005c74:	4b73      	ldr	r3, [pc, #460]	; (8005e44 <snipCommand+0x208>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d100      	bne.n	8005c7e <snipCommand+0x42>
 8005c7c:	e0d0      	b.n	8005e20 <snipCommand+0x1e4>
 8005c7e:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <snipCommand+0x20c>)
 8005c82:	4698      	mov	r8, r3
 8005c84:	e0ba      	b.n	8005dfc <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005c86:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <snipCommand+0x20c>)
 8005c88:	4699      	mov	r9, r3
 8005c8a:	00ab      	lsls	r3, r5, #2
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	195b      	adds	r3, r3, r5
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	444b      	add	r3, r9
 8005c94:	7c1a      	ldrb	r2, [r3, #16]
 8005c96:	00d3      	lsls	r3, r2, #3
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	003a      	movs	r2, r7
 8005ca2:	496a      	ldr	r1, [pc, #424]	; (8005e4c <snipCommand+0x210>)
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	f00d fcf3 	bl	8013690 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005caa:	4653      	mov	r3, sl
 8005cac:	195b      	adds	r3, r3, r5
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d02d      	beq.n	8005d14 <snipCommand+0xd8>
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d000      	beq.n	8005cbe <snipCommand+0x82>
 8005cbc:	e0a9      	b.n	8005e12 <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005cbe:	00a9      	lsls	r1, r5, #2
 8005cc0:	1949      	adds	r1, r1, r5
 8005cc2:	0089      	lsls	r1, r1, #2
 8005cc4:	3106      	adds	r1, #6
 8005cc6:	4b60      	ldr	r3, [pc, #384]	; (8005e48 <snipCommand+0x20c>)
 8005cc8:	4699      	mov	r9, r3
 8005cca:	4449      	add	r1, r9
 8005ccc:	2204      	movs	r2, #4
 8005cce:	a805      	add	r0, sp, #20
 8005cd0:	f00d fadb 	bl	801328a <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005cd4:	00ad      	lsls	r5, r5, #2
 8005cd6:	19ad      	adds	r5, r5, r6
 8005cd8:	00ad      	lsls	r5, r5, #2
 8005cda:	444d      	add	r5, r9
 8005cdc:	78ea      	ldrb	r2, [r5, #3]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0053      	lsls	r3, r2, #1
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4a5a      	ldr	r2, [pc, #360]	; (8005e50 <snipCommand+0x214>)
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4699      	mov	r9, r3
 8005cee:	9805      	ldr	r0, [sp, #20]
 8005cf0:	f7fc ff18 	bl	8002b24 <__aeabi_f2d>
 8005cf4:	9002      	str	r0, [sp, #8]
 8005cf6:	9103      	str	r1, [sp, #12]
 8005cf8:	786b      	ldrb	r3, [r5, #1]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	18d2      	adds	r2, r2, r3
 8005d00:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <snipCommand+0x218>)
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	464b      	mov	r3, r9
 8005d08:	0022      	movs	r2, r4
 8005d0a:	4953      	ldr	r1, [pc, #332]	; (8005e58 <snipCommand+0x21c>)
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f00d fcbf 	bl	8013690 <sprintf>
				break;
 8005d12:	e07e      	b.n	8005e12 <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005d14:	00ab      	lsls	r3, r5, #2
 8005d16:	195b      	adds	r3, r3, r5
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4a4b      	ldr	r2, [pc, #300]	; (8005e48 <snipCommand+0x20c>)
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	3b05      	subs	r3, #5
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	2a09      	cmp	r2, #9
 8005d26:	d874      	bhi.n	8005e12 <snipCommand+0x1d6>
 8005d28:	0093      	lsls	r3, r2, #2
 8005d2a:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <snipCommand+0x220>)
 8005d2c:	58d3      	ldr	r3, [r2, r3]
 8005d2e:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d30:	2314      	movs	r3, #20
 8005d32:	436b      	muls	r3, r5
 8005d34:	4a44      	ldr	r2, [pc, #272]	; (8005e48 <snipCommand+0x20c>)
 8005d36:	18d2      	adds	r2, r2, r3
 8005d38:	7893      	ldrb	r3, [r2, #2]
 8005d3a:	68d2      	ldr	r2, [r2, #12]
 8005d3c:	9200      	str	r2, [sp, #0]
 8005d3e:	0022      	movs	r2, r4
 8005d40:	4947      	ldr	r1, [pc, #284]	; (8005e60 <snipCommand+0x224>)
 8005d42:	0020      	movs	r0, r4
 8005d44:	f00d fca4 	bl	8013690 <sprintf>
						break;
 8005d48:	e063      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d4a:	2314      	movs	r3, #20
 8005d4c:	436b      	muls	r3, r5
 8005d4e:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <snipCommand+0x20c>)
 8005d50:	18d2      	adds	r2, r2, r3
 8005d52:	7893      	ldrb	r3, [r2, #2]
 8005d54:	68d2      	ldr	r2, [r2, #12]
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	0022      	movs	r2, r4
 8005d5a:	4942      	ldr	r1, [pc, #264]	; (8005e64 <snipCommand+0x228>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00d fc97 	bl	8013690 <sprintf>
						break;
 8005d62:	e056      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d64:	2314      	movs	r3, #20
 8005d66:	436b      	muls	r3, r5
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <snipCommand+0x20c>)
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	7893      	ldrb	r3, [r2, #2]
 8005d6e:	68d1      	ldr	r1, [r2, #12]
 8005d70:	9101      	str	r1, [sp, #4]
 8005d72:	7912      	ldrb	r2, [r2, #4]
 8005d74:	9200      	str	r2, [sp, #0]
 8005d76:	0022      	movs	r2, r4
 8005d78:	493b      	ldr	r1, [pc, #236]	; (8005e68 <snipCommand+0x22c>)
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f00d fc88 	bl	8013690 <sprintf>
						break;
 8005d80:	e047      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d82:	2314      	movs	r3, #20
 8005d84:	436b      	muls	r3, r5
 8005d86:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <snipCommand+0x20c>)
 8005d88:	18d2      	adds	r2, r2, r3
 8005d8a:	7893      	ldrb	r3, [r2, #2]
 8005d8c:	68d1      	ldr	r1, [r2, #12]
 8005d8e:	9101      	str	r1, [sp, #4]
 8005d90:	7912      	ldrb	r2, [r2, #4]
 8005d92:	9200      	str	r2, [sp, #0]
 8005d94:	0022      	movs	r2, r4
 8005d96:	4935      	ldr	r1, [pc, #212]	; (8005e6c <snipCommand+0x230>)
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f00d fc79 	bl	8013690 <sprintf>
						break;
 8005d9e:	e038      	b.n	8005e12 <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005da0:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <snipCommand+0x234>)
 8005da2:	0022      	movs	r2, r4
 8005da4:	4933      	ldr	r1, [pc, #204]	; (8005e74 <snipCommand+0x238>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00d fc72 	bl	8013690 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005dac:	4830      	ldr	r0, [pc, #192]	; (8005e70 <snipCommand+0x234>)
 8005dae:	f7fa f9b3 	bl	8000118 <strlen>
 8005db2:	0002      	movs	r2, r0
 8005db4:	2100      	movs	r1, #0
 8005db6:	482e      	ldr	r0, [pc, #184]	; (8005e70 <snipCommand+0x234>)
 8005db8:	f00d fa70 	bl	801329c <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005dbc:	0029      	movs	r1, r5
 8005dbe:	68f0      	ldr	r0, [r6, #12]
 8005dc0:	f7ff fa94 	bl	80052ec <ParseSnippetCommand>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1eb      	bne.n	8005da0 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f7fa f9a5 	bl	8000118 <strlen>
 8005dce:	1820      	adds	r0, r4, r0
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	4929      	ldr	r1, [pc, #164]	; (8005e78 <snipCommand+0x23c>)
 8005dd4:	f00d fa59 	bl	801328a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f7fa f99d 	bl	8000118 <strlen>
 8005dde:	b282      	uxth	r2, r0
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <snipCommand+0x200>)
 8005de2:	7818      	ldrb	r0, [r3, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	425b      	negs	r3, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3333      	adds	r3, #51	; 0x33
 8005dec:	0021      	movs	r1, r4
 8005dee:	f007 fbb1 	bl	800d554 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005df2:	003d      	movs	r5, r7
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <snipCommand+0x208>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	42bb      	cmp	r3, r7
 8005dfa:	d911      	bls.n	8005e20 <snipCommand+0x1e4>
 8005dfc:	1c6f      	adds	r7, r5, #1
 8005dfe:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005e00:	002e      	movs	r6, r5
 8005e02:	00ab      	lsls	r3, r5, #2
 8005e04:	195b      	adds	r3, r3, r5
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4642      	mov	r2, r8
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d000      	beq.n	8005e12 <snipCommand+0x1d6>
 8005e10:	e739      	b.n	8005c86 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e12:	4d17      	ldr	r5, [pc, #92]	; (8005e70 <snipCommand+0x234>)
 8005e14:	00b3      	lsls	r3, r6, #2
 8005e16:	199b      	adds	r3, r3, r6
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4e0b      	ldr	r6, [pc, #44]	; (8005e48 <snipCommand+0x20c>)
 8005e1c:	18f6      	adds	r6, r6, r3
 8005e1e:	e7cd      	b.n	8005dbc <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005e20:	22b5      	movs	r2, #181	; 0xb5
 8005e22:	4916      	ldr	r1, [pc, #88]	; (8005e7c <snipCommand+0x240>)
 8005e24:	0020      	movs	r0, r4
 8005e26:	f00d fa30 	bl	801328a <memcpy>
}
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	b00a      	add	sp, #40	; 0x28
 8005e2e:	bc1c      	pop	{r2, r3, r4}
 8005e30:	4690      	mov	r8, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	46a2      	mov	sl, r4
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e38:	08017a90 	.word	0x08017a90
 8005e3c:	20000a77 	.word	0x20000a77
 8005e40:	08019218 	.word	0x08019218
 8005e44:	2000121f 	.word	0x2000121f
 8005e48:	200069e4 	.word	0x200069e4
 8005e4c:	08019250 	.word	0x08019250
 8005e50:	20000084 	.word	0x20000084
 8005e54:	08018d44 	.word	0x08018d44
 8005e58:	080192bc 	.word	0x080192bc
 8005e5c:	080185f0 	.word	0x080185f0
 8005e60:	0801925c 	.word	0x0801925c
 8005e64:	08019270 	.word	0x08019270
 8005e68:	08019288 	.word	0x08019288
 8005e6c:	080192a0 	.word	0x080192a0
 8005e70:	20001250 	.word	0x20001250
 8005e74:	080192cc 	.word	0x080192cc
 8005e78:	080192d4 	.word	0x080192d4
 8005e7c:	080192e0 	.word	0x080192e0

08005e80 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e80:	b510      	push	{r4, lr}
 8005e82:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005e84:	d101      	bne.n	8005e8a <idcodeCommand+0xa>
 8005e86:	b672      	cpsid	i
 8005e88:	e7fe      	b.n	8005e88 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005e8a:	f009 fccf 	bl	800f82c <HAL_GetDEVID>
	switch(dev){
 8005e8e:	0403      	lsls	r3, r0, #16
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <idcodeCommand+0x80>)
 8005e94:	4694      	mov	ip, r2
 8005e96:	4463      	add	r3, ip
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d82a      	bhi.n	8005ef2 <idcodeCommand+0x72>
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <idcodeCommand+0x84>)
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005ea4:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <idcodeCommand+0x88>)
 8005ea6:	4919      	ldr	r1, [pc, #100]	; (8005f0c <idcodeCommand+0x8c>)
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f00d fbf1 	bl	8013690 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005eae:	f009 fcb7 	bl	800f820 <HAL_GetREVID>
 8005eb2:	0b03      	lsrs	r3, r0, #12
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <idcodeCommand+0x90>)
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f00d fbe9 	bl	8013690 <sprintf>
}
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <idcodeCommand+0x94>)
 8005ec4:	4911      	ldr	r1, [pc, #68]	; (8005f0c <idcodeCommand+0x8c>)
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f00d fbe2 	bl	8013690 <sprintf>
			break;
 8005ecc:	e7ef      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <idcodeCommand+0x98>)
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <idcodeCommand+0x8c>)
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f00d fbdc 	bl	8013690 <sprintf>
			break;
 8005ed8:	e7e9      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005eda:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <idcodeCommand+0x9c>)
 8005edc:	490b      	ldr	r1, [pc, #44]	; (8005f0c <idcodeCommand+0x8c>)
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f00d fbd6 	bl	8013690 <sprintf>
			break;
 8005ee4:	e7e3      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <idcodeCommand+0xa0>)
 8005ee8:	4908      	ldr	r1, [pc, #32]	; (8005f0c <idcodeCommand+0x8c>)
 8005eea:	0020      	movs	r0, r4
 8005eec:	f00d fbd0 	bl	8013690 <sprintf>
			break;
 8005ef0:	e7dd      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <idcodeCommand+0xa4>)
 8005ef4:	4905      	ldr	r1, [pc, #20]	; (8005f0c <idcodeCommand+0x8c>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f00d fbca 	bl	8013690 <sprintf>
			break;
 8005efc:	e7d7      	b.n	8005eae <idcodeCommand+0x2e>
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	fffffbc0 	.word	0xfffffbc0
 8005f04:	08018618 	.word	0x08018618
 8005f08:	08018c40 	.word	0x08018c40
 8005f0c:	08018c4c 	.word	0x08018c4c
 8005f10:	08018c98 	.word	0x08018c98
 8005f14:	08018c60 	.word	0x08018c60
 8005f18:	08018c6c 	.word	0x08018c6c
 8005f1c:	08018c78 	.word	0x08018c78
 8005f20:	08018c84 	.word	0x08018c84
 8005f24:	08018c90 	.word	0x08018c90

08005f28 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f2c:	d101      	bne.n	8005f32 <uuidCommand+0xa>
 8005f2e:	b672      	cpsid	i
 8005f30:	e7fe      	b.n	8005f30 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f32:	220e      	movs	r2, #14
 8005f34:	4911      	ldr	r1, [pc, #68]	; (8005f7c <uuidCommand+0x54>)
 8005f36:	f00d f9a8 	bl	801328a <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <uuidCommand+0x58>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4d11      	ldr	r5, [pc, #68]	; (8005f84 <uuidCommand+0x5c>)
 8005f40:	0022      	movs	r2, r4
 8005f42:	0029      	movs	r1, r5
 8005f44:	0020      	movs	r0, r4
 8005f46:	f00d fba3 	bl	8013690 <sprintf>
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <uuidCommand+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0022      	movs	r2, r4
 8005f50:	0029      	movs	r1, r5
 8005f52:	0020      	movs	r0, r4
 8005f54:	f00d fb9c 	bl	8013690 <sprintf>
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <uuidCommand+0x64>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0022      	movs	r2, r4
 8005f5e:	0029      	movs	r1, r5
 8005f60:	0020      	movs	r0, r4
 8005f62:	f00d fb95 	bl	8013690 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005f66:	0020      	movs	r0, r4
 8005f68:	f7fa f8d6 	bl	8000118 <strlen>
 8005f6c:	1820      	adds	r0, r4, r0
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4907      	ldr	r1, [pc, #28]	; (8005f90 <uuidCommand+0x68>)
 8005f72:	f00d f98a 	bl	801328a <memcpy>
}
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	0801a424 	.word	0x0801a424
 8005f80:	1ffff7ac 	.word	0x1ffff7ac
 8005f84:	0801a434 	.word	0x0801a434
 8005f88:	1ffff7b0 	.word	0x1ffff7b0
 8005f8c:	1ffff7b4 	.word	0x1ffff7b4
 8005f90:	08019c1c 	.word	0x08019c1c

08005f94 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f94:	b510      	push	{r4, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f9a:	d101      	bne.n	8005fa0 <timeCommand+0xc>
 8005f9c:	b672      	cpsid	i
 8005f9e:	e7fe      	b.n	8005f9e <timeCommand+0xa>
	GetTimeDate();
 8005fa0:	f007 f826 	bl	800cff0 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <timeCommand+0x80>)
 8005fa6:	7b5b      	ldrb	r3, [r3, #13]
 8005fa8:	2b18      	cmp	r3, #24
 8005faa:	d004      	beq.n	8005fb6 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d00e      	beq.n	8005fce <timeCommand+0x3a>
}
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005fb6:	4917      	ldr	r1, [pc, #92]	; (8006014 <timeCommand+0x80>)
 8005fb8:	7c4b      	ldrb	r3, [r1, #17]
 8005fba:	7c8a      	ldrb	r2, [r1, #18]
 8005fbc:	89c8      	ldrh	r0, [r1, #14]
 8005fbe:	9001      	str	r0, [sp, #4]
 8005fc0:	7c09      	ldrb	r1, [r1, #16]
 8005fc2:	9100      	str	r1, [sp, #0]
 8005fc4:	4914      	ldr	r1, [pc, #80]	; (8006018 <timeCommand+0x84>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00d fb62 	bl	8013690 <sprintf>
 8005fcc:	e7f0      	b.n	8005fb0 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <timeCommand+0x80>)
 8005fd0:	7cdb      	ldrb	r3, [r3, #19]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10d      	bne.n	8005ff2 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005fd6:	490f      	ldr	r1, [pc, #60]	; (8006014 <timeCommand+0x80>)
 8005fd8:	7c4b      	ldrb	r3, [r1, #17]
 8005fda:	7c8a      	ldrb	r2, [r1, #18]
 8005fdc:	480f      	ldr	r0, [pc, #60]	; (800601c <timeCommand+0x88>)
 8005fde:	9002      	str	r0, [sp, #8]
 8005fe0:	89c8      	ldrh	r0, [r1, #14]
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	7c09      	ldrb	r1, [r1, #16]
 8005fe6:	9100      	str	r1, [sp, #0]
 8005fe8:	490d      	ldr	r1, [pc, #52]	; (8006020 <timeCommand+0x8c>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00d fb50 	bl	8013690 <sprintf>
 8005ff0:	e7de      	b.n	8005fb0 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d1dc      	bne.n	8005fb0 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005ff6:	4907      	ldr	r1, [pc, #28]	; (8006014 <timeCommand+0x80>)
 8005ff8:	7c4b      	ldrb	r3, [r1, #17]
 8005ffa:	7c8a      	ldrb	r2, [r1, #18]
 8005ffc:	4809      	ldr	r0, [pc, #36]	; (8006024 <timeCommand+0x90>)
 8005ffe:	9002      	str	r0, [sp, #8]
 8006000:	89c8      	ldrh	r0, [r1, #14]
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	7c09      	ldrb	r1, [r1, #16]
 8006006:	9100      	str	r1, [sp, #0]
 8006008:	4905      	ldr	r1, [pc, #20]	; (8006020 <timeCommand+0x8c>)
 800600a:	0020      	movs	r0, r4
 800600c:	f00d fb40 	bl	8013690 <sprintf>
 8006010:	e7ce      	b.n	8005fb0 <timeCommand+0x1c>
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	200069c8 	.word	0x200069c8
 8006018:	0801a36c 	.word	0x0801a36c
 800601c:	0801a3c0 	.word	0x0801a3c0
 8006020:	0801a394 	.word	0x0801a394
 8006024:	0801a3c4 	.word	0x0801a3c4

08006028 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006028:	b510      	push	{r4, lr}
 800602a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800602c:	d101      	bne.n	8006032 <dateCommand+0xa>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <dateCommand+0x8>
	GetTimeDate();
 8006032:	f006 ffdd 	bl	800cff0 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006036:	f7fe fb25 	bl	8004684 <GetDateString>
 800603a:	0002      	movs	r2, r0
 800603c:	4902      	ldr	r1, [pc, #8]	; (8006048 <dateCommand+0x20>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00d fb26 	bl	8013690 <sprintf>
}
 8006044:	2000      	movs	r0, #0
 8006046:	bd10      	pop	{r4, pc}
 8006048:	08018878 	.word	0x08018878

0800604c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	46c6      	mov	lr, r8
 8006050:	b500      	push	{lr}
 8006052:	b082      	sub	sp, #8
 8006054:	0004      	movs	r4, r0
 8006056:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006058:	2300      	movs	r3, #0
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800605e:	2800      	cmp	r0, #0
 8006060:	d101      	bne.n	8006066 <getCommand+0x1a>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006066:	aa01      	add	r2, sp, #4
 8006068:	2101      	movs	r1, #1
 800606a:	0030      	movs	r0, r6
 800606c:	f007 fcb8 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006070:	0005      	movs	r5, r0
 8006072:	4b74      	ldr	r3, [pc, #464]	; (8006244 <getCommand+0x1f8>)
 8006074:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006076:	2204      	movs	r2, #4
 8006078:	4973      	ldr	r1, [pc, #460]	; (8006248 <getCommand+0x1fc>)
 800607a:	f00d fb4d 	bl	8013718 <strncmp>
 800607e:	2800      	cmp	r0, #0
 8006080:	d000      	beq.n	8006084 <getCommand+0x38>
 8006082:	e090      	b.n	80061a6 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006084:	1d2f      	adds	r7, r5, #4
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	1f1e      	subs	r6, r3, #4
 800608a:	0032      	movs	r2, r6
 800608c:	496f      	ldr	r1, [pc, #444]	; (800624c <getCommand+0x200>)
 800608e:	0038      	movs	r0, r7
 8006090:	f00d fb42 	bl	8013718 <strncmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	d11e      	bne.n	80060d6 <getCommand+0x8a>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006098:	4b6d      	ldr	r3, [pc, #436]	; (8006250 <getCommand+0x204>)
 800609a:	799b      	ldrb	r3, [r3, #6]
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d109      	bne.n	80060b4 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060a0:	4a6c      	ldr	r2, [pc, #432]	; (8006254 <getCommand+0x208>)
 80060a2:	496d      	ldr	r1, [pc, #436]	; (8006258 <getCommand+0x20c>)
 80060a4:	0020      	movs	r0, r4
 80060a6:	f00d faf3 	bl	8013690 <sprintf>
}
 80060aa:	2000      	movs	r0, #0
 80060ac:	b002      	add	sp, #8
 80060ae:	bc04      	pop	{r2}
 80060b0:	4690      	mov	r8, r2
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d105      	bne.n	80060c4 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <getCommand+0x210>)
 80060ba:	4967      	ldr	r1, [pc, #412]	; (8006258 <getCommand+0x20c>)
 80060bc:	0020      	movs	r0, r4
 80060be:	f00d fae7 	bl	8013690 <sprintf>
 80060c2:	e7f2      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.response == BOS_RESPONSE_NONE)
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d000      	beq.n	80060ca <getCommand+0x7e>
 80060c8:	e0b6      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80060ca:	4a65      	ldr	r2, [pc, #404]	; (8006260 <getCommand+0x214>)
 80060cc:	4962      	ldr	r1, [pc, #392]	; (8006258 <getCommand+0x20c>)
 80060ce:	0020      	movs	r0, r4
 80060d0:	f00d fade 	bl	8013690 <sprintf>
 80060d4:	e7e9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80060d6:	0032      	movs	r2, r6
 80060d8:	4962      	ldr	r1, [pc, #392]	; (8006264 <getCommand+0x218>)
 80060da:	0038      	movs	r0, r7
 80060dc:	f00d fb1c 	bl	8013718 <strncmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d11a      	bne.n	800611a <getCommand+0xce>
			if(BOS.trace == TRACE_BOTH)
 80060e4:	4b5a      	ldr	r3, [pc, #360]	; (8006250 <getCommand+0x204>)
 80060e6:	79db      	ldrb	r3, [r3, #7]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d105      	bne.n	80060f8 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060ec:	4a59      	ldr	r2, [pc, #356]	; (8006254 <getCommand+0x208>)
 80060ee:	495a      	ldr	r1, [pc, #360]	; (8006258 <getCommand+0x20c>)
 80060f0:	0020      	movs	r0, r4
 80060f2:	f00d facd 	bl	8013690 <sprintf>
 80060f6:	e7d8      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_MESSAGE)
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <getCommand+0x210>)
 80060fe:	4956      	ldr	r1, [pc, #344]	; (8006258 <getCommand+0x20c>)
 8006100:	0020      	movs	r0, r4
 8006102:	f00d fac5 	bl	8013690 <sprintf>
 8006106:	e7d0      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_NONE)
 8006108:	2b00      	cmp	r3, #0
 800610a:	d000      	beq.n	800610e <getCommand+0xc2>
 800610c:	e094      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800610e:	4a54      	ldr	r2, [pc, #336]	; (8006260 <getCommand+0x214>)
 8006110:	4951      	ldr	r1, [pc, #324]	; (8006258 <getCommand+0x20c>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00d fabc 	bl	8013690 <sprintf>
 8006118:	e7c7      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800611a:	0032      	movs	r2, r6
 800611c:	4952      	ldr	r1, [pc, #328]	; (8006268 <getCommand+0x21c>)
 800611e:	0038      	movs	r0, r7
 8006120:	f00d fafa 	bl	8013718 <strncmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	d106      	bne.n	8006136 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006128:	4b49      	ldr	r3, [pc, #292]	; (8006250 <getCommand+0x204>)
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	494f      	ldr	r1, [pc, #316]	; (800626c <getCommand+0x220>)
 800612e:	0020      	movs	r0, r4
 8006130:	f00d faae 	bl	8013690 <sprintf>
 8006134:	e7b9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006136:	0032      	movs	r2, r6
 8006138:	494d      	ldr	r1, [pc, #308]	; (8006270 <getCommand+0x224>)
 800613a:	0038      	movs	r0, r7
 800613c:	f00d faec 	bl	8013718 <strncmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	d106      	bne.n	8006152 <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <getCommand+0x204>)
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	4948      	ldr	r1, [pc, #288]	; (800626c <getCommand+0x220>)
 800614a:	0020      	movs	r0, r4
 800614c:	f00d faa0 	bl	8013690 <sprintf>
 8006150:	e7ab      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006152:	0032      	movs	r2, r6
 8006154:	4947      	ldr	r1, [pc, #284]	; (8006274 <getCommand+0x228>)
 8006156:	0038      	movs	r0, r7
 8006158:	f00d fade 	bl	8013718 <strncmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	d106      	bne.n	800616e <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <getCommand+0x204>)
 8006162:	885a      	ldrh	r2, [r3, #2]
 8006164:	4941      	ldr	r1, [pc, #260]	; (800626c <getCommand+0x220>)
 8006166:	0020      	movs	r0, r4
 8006168:	f00d fa92 	bl	8013690 <sprintf>
 800616c:	e79d      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800616e:	0032      	movs	r2, r6
 8006170:	4941      	ldr	r1, [pc, #260]	; (8006278 <getCommand+0x22c>)
 8006172:	0038      	movs	r0, r7
 8006174:	f00d fad0 	bl	8013718 <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d106      	bne.n	800618a <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800617c:	4b34      	ldr	r3, [pc, #208]	; (8006250 <getCommand+0x204>)
 800617e:	791a      	ldrb	r2, [r3, #4]
 8006180:	493a      	ldr	r1, [pc, #232]	; (800626c <getCommand+0x220>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00d fa84 	bl	8013690 <sprintf>
 8006188:	e78f      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800618a:	0032      	movs	r2, r6
 800618c:	493b      	ldr	r1, [pc, #236]	; (800627c <getCommand+0x230>)
 800618e:	0038      	movs	r0, r7
 8006190:	f00d fac2 	bl	8013718 <strncmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	d10d      	bne.n	80061b4 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <getCommand+0x204>)
 800619a:	795a      	ldrb	r2, [r3, #5]
 800619c:	4933      	ldr	r1, [pc, #204]	; (800626c <getCommand+0x220>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00d fa76 	bl	8013690 <sprintf>
 80061a4:	e781      	b.n	80060aa <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80061a6:	2205      	movs	r2, #5
 80061a8:	4935      	ldr	r1, [pc, #212]	; (8006280 <getCommand+0x234>)
 80061aa:	0028      	movs	r0, r5
 80061ac:	f00d fab4 	bl	8013718 <strncmp>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d005      	beq.n	80061c0 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80061b4:	2213      	movs	r2, #19
 80061b6:	4933      	ldr	r1, [pc, #204]	; (8006284 <getCommand+0x238>)
 80061b8:	0020      	movs	r0, r4
 80061ba:	f00d f866 	bl	801328a <memcpy>
 80061be:	e774      	b.n	80060aa <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061c0:	466a      	mov	r2, sp
 80061c2:	2102      	movs	r1, #2
 80061c4:	0030      	movs	r0, r6
 80061c6:	f007 fc0b 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80061ca:	0005      	movs	r5, r0
 80061cc:	4f2e      	ldr	r7, [pc, #184]	; (8006288 <getCommand+0x23c>)
		for(i =0; i < MaxNumOfGroups; i++){
 80061ce:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80061d0:	0039      	movs	r1, r7
 80061d2:	0028      	movs	r0, r5
 80061d4:	f7f9 ff96 	bl	8000104 <strcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d011      	beq.n	8006200 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 80061dc:	3601      	adds	r6, #1
 80061de:	b2f6      	uxtb	r6, r6
 80061e0:	370a      	adds	r7, #10
 80061e2:	2e0a      	cmp	r6, #10
 80061e4:	d1f4      	bne.n	80061d0 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80061e6:	002a      	movs	r2, r5
 80061e8:	4928      	ldr	r1, [pc, #160]	; (800628c <getCommand+0x240>)
 80061ea:	0020      	movs	r0, r4
 80061ec:	f00d fa50 	bl	8013690 <sprintf>
			return pdFALSE;
 80061f0:	e75b      	b.n	80060aa <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061f2:	002b      	movs	r3, r5
 80061f4:	0022      	movs	r2, r4
 80061f6:	4926      	ldr	r1, [pc, #152]	; (8006290 <getCommand+0x244>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00d fa49 	bl	8013690 <sprintf>
 80061fe:	e015      	b.n	800622c <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006200:	002a      	movs	r2, r5
 8006202:	4924      	ldr	r1, [pc, #144]	; (8006294 <getCommand+0x248>)
 8006204:	0020      	movs	r0, r4
 8006206:	f00d fa43 	bl	8013690 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <getCommand+0x24c>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d100      	bne.n	8006214 <getCommand+0x1c8>
 8006212:	e74a      	b.n	80060aa <getCommand+0x5e>
 8006214:	2501      	movs	r5, #1
 8006216:	002b      	movs	r3, r5
 8006218:	40b3      	lsls	r3, r6
 800621a:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 800621c:	4f1f      	ldr	r7, [pc, #124]	; (800629c <getCommand+0x250>)
			for(j =1; j <= N; j++)						// N modules
 800621e:	4e1e      	ldr	r6, [pc, #120]	; (8006298 <getCommand+0x24c>)
				if(InGroup(j,i)){
 8006220:	1e6b      	subs	r3, r5, #1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	5bdb      	ldrh	r3, [r3, r7]
 8006226:	4642      	mov	r2, r8
 8006228:	421a      	tst	r2, r3
 800622a:	d1e2      	bne.n	80061f2 <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 800622c:	3501      	adds	r5, #1
 800622e:	b2ed      	uxtb	r5, r5
 8006230:	7833      	ldrb	r3, [r6, #0]
 8006232:	42ab      	cmp	r3, r5
 8006234:	d2f4      	bcs.n	8006220 <getCommand+0x1d4>
 8006236:	e738      	b.n	80060aa <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006238:	002a      	movs	r2, r5
 800623a:	4919      	ldr	r1, [pc, #100]	; (80062a0 <getCommand+0x254>)
 800623c:	0020      	movs	r0, r4
 800623e:	f00d fa27 	bl	8013690 <sprintf>
 8006242:	e732      	b.n	80060aa <getCommand+0x5e>
 8006244:	20001294 	.word	0x20001294
 8006248:	080189e4 	.word	0x080189e4
 800624c:	080189ec 	.word	0x080189ec
 8006250:	200069c8 	.word	0x200069c8
 8006254:	08017dec 	.word	0x08017dec
 8006258:	08017c44 	.word	0x08017c44
 800625c:	080189f8 	.word	0x080189f8
 8006260:	080189fc 	.word	0x080189fc
 8006264:	08018a04 	.word	0x08018a04
 8006268:	08018a0c 	.word	0x08018a0c
 800626c:	0801829c 	.word	0x0801829c
 8006270:	08018a18 	.word	0x08018a18
 8006274:	08018a24 	.word	0x08018a24
 8006278:	08018a34 	.word	0x08018a34
 800627c:	08018a48 	.word	0x08018a48
 8006280:	08018a5c 	.word	0x08018a5c
 8006284:	08018a6c 	.word	0x08018a6c
 8006288:	20000e5c 	.word	0x20000e5c
 800628c:	08018a80 	.word	0x08018a80
 8006290:	08018a64 	.word	0x08018a64
 8006294:	08018a9c 	.word	0x08018a9c
 8006298:	2000001c 	.word	0x2000001c
 800629c:	20000ec0 	.word	0x20000ec0
 80062a0:	08018ab0 	.word	0x08018ab0

080062a4 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	0004      	movs	r4, r0
 80062aa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80062b0:	2c00      	cmp	r4, #0
 80062b2:	d101      	bne.n	80062b8 <defaultCommand+0x14>
 80062b4:	b672      	cpsid	i
 80062b6:	e7fe      	b.n	80062b6 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062b8:	aa01      	add	r2, sp, #4
 80062ba:	2101      	movs	r1, #1
 80062bc:	f007 fb90 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80062c0:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80062c2:	9e01      	ldr	r6, [sp, #4]
 80062c4:	0032      	movs	r2, r6
 80062c6:	491e      	ldr	r1, [pc, #120]	; (8006340 <defaultCommand+0x9c>)
 80062c8:	f00d fa26 	bl	8013718 <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d01e      	beq.n	800630e <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80062d0:	0032      	movs	r2, r6
 80062d2:	491c      	ldr	r1, [pc, #112]	; (8006344 <defaultCommand+0xa0>)
 80062d4:	0028      	movs	r0, r5
 80062d6:	f00d fa1f 	bl	8013718 <strncmp>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d12a      	bne.n	8006334 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2116      	movs	r1, #22
 80062e2:	20ff      	movs	r0, #255	; 0xff
 80062e4:	f003 f9ec 	bl	80096c0 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <defaultCommand+0xa4>)
 80062ea:	2202      	movs	r2, #2
 80062ec:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80062ee:	2064      	movs	r0, #100	; 0x64
 80062f0:	f007 fa5d 	bl	800d7ae <osDelay>
		ClearEEportsDir();
 80062f4:	f7fd f96a 	bl	80035cc <ClearEEportsDir>
		ClearROtopology();
 80062f8:	f005 f996 	bl	800b628 <ClearROtopology>
		osDelay(100);
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f007 fa56 	bl	800d7ae <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <defaultCommand+0xa8>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00c ffbf 	bl	801328a <memcpy>
 800630c:	e00f      	b.n	800632e <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800630e:	4910      	ldr	r1, [pc, #64]	; (8006350 <defaultCommand+0xac>)
 8006310:	4b10      	ldr	r3, [pc, #64]	; (8006354 <defaultCommand+0xb0>)
 8006312:	000a      	movs	r2, r1
 8006314:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006316:	c223      	stmia	r2!, {r0, r1, r5}
 8006318:	cb23      	ldmia	r3!, {r0, r1, r5}
 800631a:	c223      	stmia	r2!, {r0, r1, r5}
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006320:	f7fd f91c 	bl	800355c <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006324:	2227      	movs	r2, #39	; 0x27
 8006326:	490c      	ldr	r1, [pc, #48]	; (8006358 <defaultCommand+0xb4>)
 8006328:	0020      	movs	r0, r4
 800632a:	f00c ffae 	bl	801328a <memcpy>
}
 800632e:	2000      	movs	r0, #0
 8006330:	b002      	add	sp, #8
 8006332:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006334:	220f      	movs	r2, #15
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <defaultCommand+0xb8>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00c ffa6 	bl	801328a <memcpy>
 800633e:	e7f6      	b.n	800632e <defaultCommand+0x8a>
 8006340:	080188a0 	.word	0x080188a0
 8006344:	080188d0 	.word	0x080188d0
 8006348:	20000ef4 	.word	0x20000ef4
 800634c:	080188e8 	.word	0x080188e8
 8006350:	200069c8 	.word	0x200069c8
 8006354:	20000000 	.word	0x20000000
 8006358:	080188a8 	.word	0x080188a8
 800635c:	080188d8 	.word	0x080188d8

08006360 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	46ce      	mov	lr, r9
 8006364:	4647      	mov	r7, r8
 8006366:	b580      	push	{r7, lr}
 8006368:	b08d      	sub	sp, #52	; 0x34
 800636a:	0005      	movs	r5, r0
 800636c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800636e:	2300      	movs	r3, #0
 8006370:	930b      	str	r3, [sp, #44]	; 0x2c
 8006372:	930a      	str	r3, [sp, #40]	; 0x28
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 800637a:	2800      	cmp	r0, #0
 800637c:	d101      	bne.n	8006382 <setCommand+0x22>
 800637e:	b672      	cpsid	i
 8006380:	e7fe      	b.n	8006380 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006382:	aa0b      	add	r2, sp, #44	; 0x2c
 8006384:	2101      	movs	r1, #1
 8006386:	0020      	movs	r0, r4
 8006388:	f007 fb2a 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 800638c:	0006      	movs	r6, r0
 800638e:	4bb3      	ldr	r3, [pc, #716]	; (800665c <setCommand+0x2fc>)
 8006390:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006392:	2204      	movs	r2, #4
 8006394:	49b2      	ldr	r1, [pc, #712]	; (8006660 <setCommand+0x300>)
 8006396:	f00d f9bf 	bl	8013718 <strncmp>
 800639a:	2800      	cmp	r0, #0
 800639c:	d015      	beq.n	80063ca <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800639e:	2204      	movs	r2, #4
 80063a0:	49b0      	ldr	r1, [pc, #704]	; (8006664 <setCommand+0x304>)
 80063a2:	0030      	movs	r0, r6
 80063a4:	f00d f9b8 	bl	8013718 <strncmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d100      	bne.n	80063ae <setCommand+0x4e>
 80063ac:	e180      	b.n	80066b0 <setCommand+0x350>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80063ae:	2204      	movs	r2, #4
 80063b0:	49ad      	ldr	r1, [pc, #692]	; (8006668 <setCommand+0x308>)
 80063b2:	0030      	movs	r0, r6
 80063b4:	f00d f9b0 	bl	8013718 <strncmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x5e>
 80063bc:	e1e6      	b.n	800678c <setCommand+0x42c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80063be:	2213      	movs	r2, #19
 80063c0:	49aa      	ldr	r1, [pc, #680]	; (800666c <setCommand+0x30c>)
 80063c2:	0028      	movs	r0, r5
 80063c4:	f00c ff61 	bl	801328a <memcpy>
 80063c8:	e1d7      	b.n	800677a <setCommand+0x41a>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063ca:	aa0a      	add	r2, sp, #40	; 0x28
 80063cc:	2102      	movs	r1, #2
 80063ce:	0020      	movs	r0, r4
 80063d0:	f007 fb06 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80063d4:	0004      	movs	r4, r0
 80063d6:	4ba6      	ldr	r3, [pc, #664]	; (8006670 <setCommand+0x310>)
 80063d8:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063da:	4ba0      	ldr	r3, [pc, #640]	; (800665c <setCommand+0x2fc>)
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	3604      	adds	r6, #4
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	1f1f      	subs	r7, r3, #4
 80063e4:	003a      	movs	r2, r7
 80063e6:	49a3      	ldr	r1, [pc, #652]	; (8006674 <setCommand+0x314>)
 80063e8:	0030      	movs	r0, r6
 80063ea:	f00d f995 	bl	8013718 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d153      	bne.n	800649a <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80063f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063f4:	0032      	movs	r2, r6
 80063f6:	49a0      	ldr	r1, [pc, #640]	; (8006678 <setCommand+0x318>)
 80063f8:	0020      	movs	r0, r4
 80063fa:	f00d f98d 	bl	8013718 <strncmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d115      	bne.n	800642e <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8006402:	4b9e      	ldr	r3, [pc, #632]	; (800667c <setCommand+0x31c>)
 8006404:	2160      	movs	r1, #96	; 0x60
 8006406:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006408:	79db      	ldrb	r3, [r3, #7]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	4319      	orrs	r1, r3
 800640e:	308a      	adds	r0, #138	; 0x8a
 8006410:	0040      	lsls	r0, r0, #1
 8006412:	f001 f9e5 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006416:	4b91      	ldr	r3, [pc, #580]	; (800665c <setCommand+0x2fc>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800641e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006420:	4b93      	ldr	r3, [pc, #588]	; (8006670 <setCommand+0x310>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4996      	ldr	r1, [pc, #600]	; (8006680 <setCommand+0x320>)
 8006426:	0028      	movs	r0, r5
 8006428:	f00d f932 	bl	8013690 <sprintf>
	return pdFALSE;
 800642c:	e1a5      	b.n	800677a <setCommand+0x41a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800642e:	0032      	movs	r2, r6
 8006430:	4994      	ldr	r1, [pc, #592]	; (8006684 <setCommand+0x324>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00d f970 	bl	8013718 <strncmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	d10a      	bne.n	8006452 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 800643c:	4b8f      	ldr	r3, [pc, #572]	; (800667c <setCommand+0x31c>)
 800643e:	2120      	movs	r1, #32
 8006440:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006442:	79db      	ldrb	r3, [r3, #7]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	4319      	orrs	r1, r3
 8006448:	308a      	adds	r0, #138	; 0x8a
 800644a:	0040      	lsls	r0, r0, #1
 800644c:	f001 f9c8 	bl	80077e0 <EE_WriteVariable>
 8006450:	e7e1      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006452:	0032      	movs	r2, r6
 8006454:	498c      	ldr	r1, [pc, #560]	; (8006688 <setCommand+0x328>)
 8006456:	0020      	movs	r0, r4
 8006458:	f00d f95e 	bl	8013718 <strncmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	d10a      	bne.n	8006476 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8006460:	4b86      	ldr	r3, [pc, #536]	; (800667c <setCommand+0x31c>)
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006466:	79db      	ldrb	r3, [r3, #7]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	4319      	orrs	r1, r3
 800646c:	308a      	adds	r0, #138	; 0x8a
 800646e:	0040      	lsls	r0, r0, #1
 8006470:	f001 f9b6 	bl	80077e0 <EE_WriteVariable>
 8006474:	e7cf      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006476:	0032      	movs	r2, r6
 8006478:	4984      	ldr	r1, [pc, #528]	; (800668c <setCommand+0x32c>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00d f94c 	bl	8013718 <strncmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d000      	beq.n	8006486 <setCommand+0x126>
 8006484:	e2a7      	b.n	80069d6 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8006486:	4b7d      	ldr	r3, [pc, #500]	; (800667c <setCommand+0x31c>)
 8006488:	2200      	movs	r2, #0
 800648a:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800648c:	79d9      	ldrb	r1, [r3, #7]
 800648e:	0209      	lsls	r1, r1, #8
 8006490:	308a      	adds	r0, #138	; 0x8a
 8006492:	0040      	lsls	r0, r0, #1
 8006494:	f001 f9a4 	bl	80077e0 <EE_WriteVariable>
 8006498:	e7bd      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800649a:	003a      	movs	r2, r7
 800649c:	497c      	ldr	r1, [pc, #496]	; (8006690 <setCommand+0x330>)
 800649e:	0030      	movs	r0, r6
 80064a0:	f00d f93a 	bl	8013718 <strncmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d14a      	bne.n	800653e <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064aa:	0032      	movs	r2, r6
 80064ac:	4972      	ldr	r1, [pc, #456]	; (8006678 <setCommand+0x318>)
 80064ae:	0020      	movs	r0, r4
 80064b0:	f00d f932 	bl	8013718 <strncmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d10b      	bne.n	80064d0 <setCommand+0x170>
				BOS.trace =TRACE_BOTH;
 80064b8:	4b70      	ldr	r3, [pc, #448]	; (800667c <setCommand+0x31c>)
 80064ba:	2203      	movs	r2, #3
 80064bc:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064be:	799b      	ldrb	r3, [r3, #6]
 80064c0:	21c0      	movs	r1, #192	; 0xc0
 80064c2:	0089      	lsls	r1, r1, #2
 80064c4:	4319      	orrs	r1, r3
 80064c6:	308a      	adds	r0, #138	; 0x8a
 80064c8:	0040      	lsls	r0, r0, #1
 80064ca:	f001 f989 	bl	80077e0 <EE_WriteVariable>
 80064ce:	e7a2      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80064d0:	0032      	movs	r2, r6
 80064d2:	496c      	ldr	r1, [pc, #432]	; (8006684 <setCommand+0x324>)
 80064d4:	0020      	movs	r0, r4
 80064d6:	f00d f91f 	bl	8013718 <strncmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d10b      	bne.n	80064f6 <setCommand+0x196>
				BOS.trace =TRACE_MESSAGE;
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <setCommand+0x31c>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064e4:	799b      	ldrb	r3, [r3, #6]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	0049      	lsls	r1, r1, #1
 80064ea:	4319      	orrs	r1, r3
 80064ec:	308a      	adds	r0, #138	; 0x8a
 80064ee:	4090      	lsls	r0, r2
 80064f0:	f001 f976 	bl	80077e0 <EE_WriteVariable>
 80064f4:	e78f      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80064f6:	0032      	movs	r2, r6
 80064f8:	495e      	ldr	r1, [pc, #376]	; (8006674 <setCommand+0x314>)
 80064fa:	0020      	movs	r0, r4
 80064fc:	f00d f90c 	bl	8013718 <strncmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	d10b      	bne.n	800651c <setCommand+0x1bc>
				BOS.trace =TRACE_RESPONSE;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <setCommand+0x31c>)
 8006506:	2202      	movs	r2, #2
 8006508:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800650a:	799b      	ldrb	r3, [r3, #6]
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	0089      	lsls	r1, r1, #2
 8006510:	4319      	orrs	r1, r3
 8006512:	308a      	adds	r0, #138	; 0x8a
 8006514:	0040      	lsls	r0, r0, #1
 8006516:	f001 f963 	bl	80077e0 <EE_WriteVariable>
 800651a:	e77c      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800651c:	0032      	movs	r2, r6
 800651e:	495b      	ldr	r1, [pc, #364]	; (800668c <setCommand+0x32c>)
 8006520:	0020      	movs	r0, r4
 8006522:	f00d f8f9 	bl	8013718 <strncmp>
 8006526:	2800      	cmp	r0, #0
 8006528:	d000      	beq.n	800652c <setCommand+0x1cc>
 800652a:	e254      	b.n	80069d6 <setCommand+0x676>
				BOS.trace =TRACE_NONE;
 800652c:	4b53      	ldr	r3, [pc, #332]	; (800667c <setCommand+0x31c>)
 800652e:	2200      	movs	r2, #0
 8006530:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006532:	7999      	ldrb	r1, [r3, #6]
 8006534:	308a      	adds	r0, #138	; 0x8a
 8006536:	0040      	lsls	r0, r0, #1
 8006538:	f001 f952 	bl	80077e0 <EE_WriteVariable>
 800653c:	e76b      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800653e:	003a      	movs	r2, r7
 8006540:	4954      	ldr	r1, [pc, #336]	; (8006694 <setCommand+0x334>)
 8006542:	0030      	movs	r0, r6
 8006544:	f00d f8e8 	bl	8013718 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d128      	bne.n	800659e <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 800654c:	0020      	movs	r0, r4
 800654e:	f00c fc0c 	bl	8012d6a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006552:	23e1      	movs	r3, #225	; 0xe1
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	4298      	cmp	r0, r3
 8006558:	d900      	bls.n	800655c <setCommand+0x1fc>
 800655a:	e23c      	b.n	80069d6 <setCommand+0x676>
				BOS.clibaudrate =temp2;
 800655c:	4c47      	ldr	r4, [pc, #284]	; (800667c <setCommand+0x31c>)
 800655e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006560:	b281      	uxth	r1, r0
 8006562:	208c      	movs	r0, #140	; 0x8c
 8006564:	0040      	lsls	r0, r0, #1
 8006566:	f001 f93b 	bl	80077e0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800656a:	68a1      	ldr	r1, [r4, #8]
 800656c:	0c09      	lsrs	r1, r1, #16
 800656e:	201a      	movs	r0, #26
 8006570:	30ff      	adds	r0, #255	; 0xff
 8006572:	f001 f935 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <setCommand+0x2fc>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800657e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <setCommand+0x310>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	493e      	ldr	r1, [pc, #248]	; (8006680 <setCommand+0x320>)
 8006586:	0028      	movs	r0, r5
 8006588:	f00d f882 	bl	8013690 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800658c:	4942      	ldr	r1, [pc, #264]	; (8006698 <setCommand+0x338>)
 800658e:	0028      	movs	r0, r5
 8006590:	f00d f89e 	bl	80136d0 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006594:	4941      	ldr	r1, [pc, #260]	; (800669c <setCommand+0x33c>)
 8006596:	0028      	movs	r0, r5
 8006598:	f00d f89a 	bl	80136d0 <strcat>
 800659c:	e0ed      	b.n	800677a <setCommand+0x41a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800659e:	003a      	movs	r2, r7
 80065a0:	493f      	ldr	r1, [pc, #252]	; (80066a0 <setCommand+0x340>)
 80065a2:	0030      	movs	r0, r6
 80065a4:	f00d f8b8 	bl	8013718 <strncmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d10d      	bne.n	80065c8 <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 80065ac:	0020      	movs	r0, r4
 80065ae:	f00c fbdc 	bl	8012d6a <atoi>
 80065b2:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d100      	bne.n	80065ba <setCommand+0x25a>
 80065b8:	e20d      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.debounce =temp16;
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <setCommand+0x31c>)
 80065bc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80065be:	2016      	movs	r0, #22
 80065c0:	30ff      	adds	r0, #255	; 0xff
 80065c2:	f001 f90d 	bl	80077e0 <EE_WriteVariable>
 80065c6:	e726      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065c8:	003a      	movs	r2, r7
 80065ca:	4936      	ldr	r1, [pc, #216]	; (80066a4 <setCommand+0x344>)
 80065cc:	0030      	movs	r0, r6
 80065ce:	f00d f8a3 	bl	8013718 <strncmp>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d10d      	bne.n	80065f2 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 80065d6:	0020      	movs	r0, r4
 80065d8:	f00c fbc7 	bl	8012d6a <atoi>
 80065dc:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065de:	2900      	cmp	r1, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x284>
 80065e2:	e1f8      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.singleClickTime =temp16;
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <setCommand+0x31c>)
 80065e6:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80065e8:	208b      	movs	r0, #139	; 0x8b
 80065ea:	0040      	lsls	r0, r0, #1
 80065ec:	f001 f8f8 	bl	80077e0 <EE_WriteVariable>
 80065f0:	e711      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	492c      	ldr	r1, [pc, #176]	; (80066a8 <setCommand+0x348>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00d f88e 	bl	8013718 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d112      	bne.n	8006626 <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00c fbb2 	bl	8012d6a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006606:	1e43      	subs	r3, r0, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	2bfe      	cmp	r3, #254	; 0xfe
 800660c:	d900      	bls.n	8006610 <setCommand+0x2b0>
 800660e:	e1e2      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.minInterClickTime =temp16;
 8006610:	b2c0      	uxtb	r0, r0
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <setCommand+0x31c>)
 8006614:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006616:	7959      	ldrb	r1, [r3, #5]
 8006618:	0209      	lsls	r1, r1, #8
 800661a:	4301      	orrs	r1, r0
 800661c:	2018      	movs	r0, #24
 800661e:	30ff      	adds	r0, #255	; 0xff
 8006620:	f001 f8de 	bl	80077e0 <EE_WriteVariable>
 8006624:	e6f7      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006626:	003a      	movs	r2, r7
 8006628:	4920      	ldr	r1, [pc, #128]	; (80066ac <setCommand+0x34c>)
 800662a:	0030      	movs	r0, r6
 800662c:	f00d f874 	bl	8013718 <strncmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	d000      	beq.n	8006636 <setCommand+0x2d6>
 8006634:	e6c3      	b.n	80063be <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 8006636:	0020      	movs	r0, r4
 8006638:	f00c fb97 	bl	8012d6a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800663c:	1e43      	subs	r3, r0, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	2bfe      	cmp	r3, #254	; 0xfe
 8006642:	d900      	bls.n	8006646 <setCommand+0x2e6>
 8006644:	e1c7      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.maxInterClickTime =temp16;
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <setCommand+0x31c>)
 8006648:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800664a:	0200      	lsls	r0, r0, #8
 800664c:	7919      	ldrb	r1, [r3, #4]
 800664e:	4301      	orrs	r1, r0
 8006650:	b289      	uxth	r1, r1
 8006652:	2018      	movs	r0, #24
 8006654:	30ff      	adds	r0, #255	; 0xff
 8006656:	f001 f8c3 	bl	80077e0 <EE_WriteVariable>
 800665a:	e6dc      	b.n	8006416 <setCommand+0xb6>
 800665c:	20001290 	.word	0x20001290
 8006660:	080189e4 	.word	0x080189e4
 8006664:	08019110 	.word	0x08019110
 8006668:	08019120 	.word	0x08019120
 800666c:	08018a6c 	.word	0x08018a6c
 8006670:	2000129c 	.word	0x2000129c
 8006674:	080189ec 	.word	0x080189ec
 8006678:	08017dec 	.word	0x08017dec
 800667c:	200069c8 	.word	0x200069c8
 8006680:	08019018 	.word	0x08019018
 8006684:	0801900c 	.word	0x0801900c
 8006688:	08019014 	.word	0x08019014
 800668c:	080189fc 	.word	0x080189fc
 8006690:	08018a04 	.word	0x08018a04
 8006694:	08018a0c 	.word	0x08018a0c
 8006698:	0801902c 	.word	0x0801902c
 800669c:	0801905c 	.word	0x0801905c
 80066a0:	08018a18 	.word	0x08018a18
 80066a4:	08018a24 	.word	0x08018a24
 80066a8:	08018a34 	.word	0x08018a34
 80066ac:	08018a48 	.word	0x08018a48
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066b0:	aa0a      	add	r2, sp, #40	; 0x28
 80066b2:	2102      	movs	r1, #2
 80066b4:	0020      	movs	r0, r4
 80066b6:	f007 f993 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80066ba:	4bca      	ldr	r3, [pc, #808]	; (80069e4 <setCommand+0x684>)
 80066bc:	4699      	mov	r9, r3
 80066be:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066c0:	aa09      	add	r2, sp, #36	; 0x24
 80066c2:	2103      	movs	r1, #3
 80066c4:	0020      	movs	r0, r4
 80066c6:	f007 f98b 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80066ca:	4fc7      	ldr	r7, [pc, #796]	; (80069e8 <setCommand+0x688>)
 80066cc:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066ce:	aa08      	add	r2, sp, #32
 80066d0:	2104      	movs	r1, #4
 80066d2:	0020      	movs	r0, r4
 80066d4:	f007 f984 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80066d8:	4ec4      	ldr	r6, [pc, #784]	; (80069ec <setCommand+0x68c>)
 80066da:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066dc:	aa07      	add	r2, sp, #28
 80066de:	2105      	movs	r1, #5
 80066e0:	0020      	movs	r0, r4
 80066e2:	f007 f97d 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80066e6:	4cc2      	ldr	r4, [pc, #776]	; (80069f0 <setCommand+0x690>)
 80066e8:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 80066ea:	464b      	mov	r3, r9
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f00c fb3c 	bl	8012d6a <atoi>
 80066f2:	b2c3      	uxtb	r3, r0
 80066f4:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80066f6:	6838      	ldr	r0, [r7, #0]
 80066f8:	f00c fb37 	bl	8012d6a <atoi>
 80066fc:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80066fe:	6830      	ldr	r0, [r6, #0]
 8006700:	f00c fb33 	bl	8012d6a <atoi>
 8006704:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d010      	beq.n	800672e <setCommand+0x3ce>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800670c:	2202      	movs	r2, #2
 800670e:	49b9      	ldr	r1, [pc, #740]	; (80069f4 <setCommand+0x694>)
 8006710:	0020      	movs	r0, r4
 8006712:	f00d f801 	bl	8013718 <strncmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	d035      	beq.n	8006786 <setCommand+0x426>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800671a:	2202      	movs	r2, #2
 800671c:	49b6      	ldr	r1, [pc, #728]	; (80069f8 <setCommand+0x698>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00c fffa 	bl	8013718 <strncmp>
 8006724:	2800      	cmp	r0, #0
 8006726:	d000      	beq.n	800672a <setCommand+0x3ca>
 8006728:	e155      	b.n	80069d6 <setCommand+0x676>
				temp84 =RTC_PM;
 800672a:	2302      	movs	r3, #2
 800672c:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800672e:	464b      	mov	r3, r9
 8006730:	2b17      	cmp	r3, #23
 8006732:	d900      	bls.n	8006736 <setCommand+0x3d6>
 8006734:	e14f      	b.n	80069d6 <setCommand+0x676>
 8006736:	2f3b      	cmp	r7, #59	; 0x3b
 8006738:	d900      	bls.n	800673c <setCommand+0x3dc>
 800673a:	e14c      	b.n	80069d6 <setCommand+0x676>
 800673c:	2e3b      	cmp	r6, #59	; 0x3b
 800673e:	d900      	bls.n	8006742 <setCommand+0x3e2>
 8006740:	e149      	b.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006742:	f006 fc55 	bl	800cff0 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006746:	4cad      	ldr	r4, [pc, #692]	; (80069fc <setCommand+0x69c>)
 8006748:	7d23      	ldrb	r3, [r4, #20]
 800674a:	8b22      	ldrh	r2, [r4, #24]
 800674c:	7d61      	ldrb	r1, [r4, #21]
 800674e:	7da0      	ldrb	r0, [r4, #22]
 8006750:	7b24      	ldrb	r4, [r4, #12]
 8006752:	b264      	sxtb	r4, r4
 8006754:	9404      	str	r4, [sp, #16]
 8006756:	4644      	mov	r4, r8
 8006758:	9403      	str	r4, [sp, #12]
 800675a:	464c      	mov	r4, r9
 800675c:	9402      	str	r4, [sp, #8]
 800675e:	9701      	str	r7, [sp, #4]
 8006760:	9600      	str	r6, [sp, #0]
 8006762:	f006 fbeb 	bl	800cf3c <BOS_CalendarConfig>
 8006766:	0006      	movs	r6, r0
	if(result == BOS_OK){
 8006768:	2e00      	cmp	r6, #0
 800676a:	d100      	bne.n	800676e <setCommand+0x40e>
 800676c:	e653      	b.n	8006416 <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 800676e:	2e67      	cmp	r6, #103	; 0x67
 8006770:	d100      	bne.n	8006774 <setCommand+0x414>
 8006772:	e624      	b.n	80063be <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8006774:	2e68      	cmp	r6, #104	; 0x68
 8006776:	d100      	bne.n	800677a <setCommand+0x41a>
 8006778:	e12d      	b.n	80069d6 <setCommand+0x676>
}
 800677a:	2000      	movs	r0, #0
 800677c:	b00d      	add	sp, #52	; 0x34
 800677e:	bc0c      	pop	{r2, r3}
 8006780:	4690      	mov	r8, r2
 8006782:	4699      	mov	r9, r3
 8006784:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 8006786:	2301      	movs	r3, #1
 8006788:	4698      	mov	r8, r3
 800678a:	e7d0      	b.n	800672e <setCommand+0x3ce>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800678c:	aa0a      	add	r2, sp, #40	; 0x28
 800678e:	2102      	movs	r1, #2
 8006790:	0020      	movs	r0, r4
 8006792:	f007 f925 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006796:	4e93      	ldr	r6, [pc, #588]	; (80069e4 <setCommand+0x684>)
 8006798:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800679a:	aa09      	add	r2, sp, #36	; 0x24
 800679c:	2103      	movs	r1, #3
 800679e:	0020      	movs	r0, r4
 80067a0:	f007 f91e 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80067a4:	4b90      	ldr	r3, [pc, #576]	; (80069e8 <setCommand+0x688>)
 80067a6:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80067a8:	aa08      	add	r2, sp, #32
 80067aa:	2104      	movs	r1, #4
 80067ac:	0020      	movs	r0, r4
 80067ae:	f007 f917 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80067b2:	4b8e      	ldr	r3, [pc, #568]	; (80069ec <setCommand+0x68c>)
 80067b4:	4698      	mov	r8, r3
 80067b6:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80067b8:	aa07      	add	r2, sp, #28
 80067ba:	2105      	movs	r1, #5
 80067bc:	0020      	movs	r0, r4
 80067be:	f007 f90f 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 80067c2:	4c8b      	ldr	r4, [pc, #556]	; (80069f0 <setCommand+0x690>)
 80067c4:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80067c6:	4643      	mov	r3, r8
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f00c face 	bl	8012d6a <atoi>
 80067ce:	b2c3      	uxtb	r3, r0
 80067d0:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	f00c fac9 	bl	8012d6a <atoi>
 80067d8:	b283      	uxth	r3, r0
 80067da:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80067dc:	6834      	ldr	r4, [r6, #0]
 80067de:	2206      	movs	r2, #6
 80067e0:	4987      	ldr	r1, [pc, #540]	; (8006a00 <setCommand+0x6a0>)
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c ff98 	bl	8013718 <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d100      	bne.n	80067ee <setCommand+0x48e>
 80067ec:	e195      	b.n	8006b1a <setCommand+0x7ba>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80067ee:	2207      	movs	r2, #7
 80067f0:	4984      	ldr	r1, [pc, #528]	; (8006a04 <setCommand+0x6a4>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00c ff90 	bl	8013718 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d100      	bne.n	80067fe <setCommand+0x49e>
 80067fc:	e19b      	b.n	8006b36 <setCommand+0x7d6>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80067fe:	2209      	movs	r2, #9
 8006800:	4981      	ldr	r1, [pc, #516]	; (8006a08 <setCommand+0x6a8>)
 8006802:	0020      	movs	r0, r4
 8006804:	f00c ff88 	bl	8013718 <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d100      	bne.n	800680e <setCommand+0x4ae>
 800680c:	e195      	b.n	8006b3a <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800680e:	2208      	movs	r2, #8
 8006810:	497e      	ldr	r1, [pc, #504]	; (8006a0c <setCommand+0x6ac>)
 8006812:	0020      	movs	r0, r4
 8006814:	f00c ff80 	bl	8013718 <strncmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	d100      	bne.n	800681e <setCommand+0x4be>
 800681c:	e18f      	b.n	8006b3e <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800681e:	2206      	movs	r2, #6
 8006820:	497b      	ldr	r1, [pc, #492]	; (8006a10 <setCommand+0x6b0>)
 8006822:	0020      	movs	r0, r4
 8006824:	f00c ff78 	bl	8013718 <strncmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	d100      	bne.n	800682e <setCommand+0x4ce>
 800682c:	e189      	b.n	8006b42 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800682e:	2208      	movs	r2, #8
 8006830:	4978      	ldr	r1, [pc, #480]	; (8006a14 <setCommand+0x6b4>)
 8006832:	0020      	movs	r0, r4
 8006834:	f00c ff70 	bl	8013718 <strncmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	d100      	bne.n	800683e <setCommand+0x4de>
 800683c:	e183      	b.n	8006b46 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800683e:	2206      	movs	r2, #6
 8006840:	4975      	ldr	r1, [pc, #468]	; (8006a18 <setCommand+0x6b8>)
 8006842:	0020      	movs	r0, r4
 8006844:	f00c ff68 	bl	8013718 <strncmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	d100      	bne.n	800684e <setCommand+0x4ee>
 800684c:	e17d      	b.n	8006b4a <setCommand+0x7ea>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <setCommand+0x688>)
 8006850:	681c      	ldr	r4, [r3, #0]
 8006852:	2207      	movs	r2, #7
 8006854:	4971      	ldr	r1, [pc, #452]	; (8006a1c <setCommand+0x6bc>)
 8006856:	0020      	movs	r0, r4
 8006858:	f00c ff5e 	bl	8013718 <strncmp>
			result =BOS_ERR_WrongValue;
 800685c:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800685e:	2800      	cmp	r0, #0
 8006860:	d101      	bne.n	8006866 <setCommand+0x506>
			result =BOS_ERR_WrongValue;
 8006862:	2668      	movs	r6, #104	; 0x68
 8006864:	e783      	b.n	800676e <setCommand+0x40e>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006866:	2202      	movs	r2, #2
 8006868:	496d      	ldr	r1, [pc, #436]	; (8006a20 <setCommand+0x6c0>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00c ff54 	bl	8013718 <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x516>
 8006874:	e104      	b.n	8006a80 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006876:	2208      	movs	r2, #8
 8006878:	496a      	ldr	r1, [pc, #424]	; (8006a24 <setCommand+0x6c4>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00c ff4c 	bl	8013718 <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x526>
 8006884:	e11f      	b.n	8006ac6 <setCommand+0x766>
 8006886:	2202      	movs	r2, #2
 8006888:	4967      	ldr	r1, [pc, #412]	; (8006a28 <setCommand+0x6c8>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00c ff44 	bl	8013718 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x536>
 8006894:	e119      	b.n	8006aca <setCommand+0x76a>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006896:	2205      	movs	r2, #5
 8006898:	4964      	ldr	r1, [pc, #400]	; (8006a2c <setCommand+0x6cc>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00c ff3c 	bl	8013718 <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x546>
 80068a4:	e113      	b.n	8006ace <setCommand+0x76e>
 80068a6:	2202      	movs	r2, #2
 80068a8:	4961      	ldr	r1, [pc, #388]	; (8006a30 <setCommand+0x6d0>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00c ff34 	bl	8013718 <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d100      	bne.n	80068b6 <setCommand+0x556>
 80068b4:	e10d      	b.n	8006ad2 <setCommand+0x772>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80068b6:	2205      	movs	r2, #5
 80068b8:	495e      	ldr	r1, [pc, #376]	; (8006a34 <setCommand+0x6d4>)
 80068ba:	0020      	movs	r0, r4
 80068bc:	f00c ff2c 	bl	8013718 <strncmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d100      	bne.n	80068c6 <setCommand+0x566>
 80068c4:	e107      	b.n	8006ad6 <setCommand+0x776>
 80068c6:	2202      	movs	r2, #2
 80068c8:	495b      	ldr	r1, [pc, #364]	; (8006a38 <setCommand+0x6d8>)
 80068ca:	0020      	movs	r0, r4
 80068cc:	f00c ff24 	bl	8013718 <strncmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d100      	bne.n	80068d6 <setCommand+0x576>
 80068d4:	e101      	b.n	8006ada <setCommand+0x77a>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80068d6:	2203      	movs	r2, #3
 80068d8:	4958      	ldr	r1, [pc, #352]	; (8006a3c <setCommand+0x6dc>)
 80068da:	0020      	movs	r0, r4
 80068dc:	f00c ff1c 	bl	8013718 <strncmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <setCommand+0x586>
 80068e4:	e0fb      	b.n	8006ade <setCommand+0x77e>
 80068e6:	2202      	movs	r2, #2
 80068e8:	4955      	ldr	r1, [pc, #340]	; (8006a40 <setCommand+0x6e0>)
 80068ea:	0020      	movs	r0, r4
 80068ec:	f00c ff14 	bl	8013718 <strncmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d100      	bne.n	80068f6 <setCommand+0x596>
 80068f4:	e0f5      	b.n	8006ae2 <setCommand+0x782>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80068f6:	2204      	movs	r2, #4
 80068f8:	4952      	ldr	r1, [pc, #328]	; (8006a44 <setCommand+0x6e4>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00c ff0c 	bl	8013718 <strncmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	d100      	bne.n	8006906 <setCommand+0x5a6>
 8006904:	e0ef      	b.n	8006ae6 <setCommand+0x786>
 8006906:	2202      	movs	r2, #2
 8006908:	494f      	ldr	r1, [pc, #316]	; (8006a48 <setCommand+0x6e8>)
 800690a:	0020      	movs	r0, r4
 800690c:	f00c ff04 	bl	8013718 <strncmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	d100      	bne.n	8006916 <setCommand+0x5b6>
 8006914:	e0e9      	b.n	8006aea <setCommand+0x78a>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006916:	2204      	movs	r2, #4
 8006918:	494c      	ldr	r1, [pc, #304]	; (8006a4c <setCommand+0x6ec>)
 800691a:	0020      	movs	r0, r4
 800691c:	f00c fefc 	bl	8013718 <strncmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	d100      	bne.n	8006926 <setCommand+0x5c6>
 8006924:	e0e3      	b.n	8006aee <setCommand+0x78e>
 8006926:	2202      	movs	r2, #2
 8006928:	4949      	ldr	r1, [pc, #292]	; (8006a50 <setCommand+0x6f0>)
 800692a:	0020      	movs	r0, r4
 800692c:	f00c fef4 	bl	8013718 <strncmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	d100      	bne.n	8006936 <setCommand+0x5d6>
 8006934:	e0dd      	b.n	8006af2 <setCommand+0x792>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006936:	2205      	movs	r2, #5
 8006938:	4946      	ldr	r1, [pc, #280]	; (8006a54 <setCommand+0x6f4>)
 800693a:	0020      	movs	r0, r4
 800693c:	f00c feec 	bl	8013718 <strncmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d100      	bne.n	8006946 <setCommand+0x5e6>
 8006944:	e0d7      	b.n	8006af6 <setCommand+0x796>
 8006946:	2202      	movs	r2, #2
 8006948:	4943      	ldr	r1, [pc, #268]	; (8006a58 <setCommand+0x6f8>)
 800694a:	0020      	movs	r0, r4
 800694c:	f00c fee4 	bl	8013718 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d100      	bne.n	8006956 <setCommand+0x5f6>
 8006954:	e0d1      	b.n	8006afa <setCommand+0x79a>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006956:	2209      	movs	r2, #9
 8006958:	4940      	ldr	r1, [pc, #256]	; (8006a5c <setCommand+0x6fc>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00c fedc 	bl	8013718 <strncmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	d100      	bne.n	8006966 <setCommand+0x606>
 8006964:	e0cb      	b.n	8006afe <setCommand+0x79e>
 8006966:	2202      	movs	r2, #2
 8006968:	493d      	ldr	r1, [pc, #244]	; (8006a60 <setCommand+0x700>)
 800696a:	0020      	movs	r0, r4
 800696c:	f00c fed4 	bl	8013718 <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d100      	bne.n	8006976 <setCommand+0x616>
 8006974:	e0c5      	b.n	8006b02 <setCommand+0x7a2>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006976:	2207      	movs	r2, #7
 8006978:	493a      	ldr	r1, [pc, #232]	; (8006a64 <setCommand+0x704>)
 800697a:	0020      	movs	r0, r4
 800697c:	f00c fecc 	bl	8013718 <strncmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	d100      	bne.n	8006986 <setCommand+0x626>
 8006984:	e0bf      	b.n	8006b06 <setCommand+0x7a6>
 8006986:	2202      	movs	r2, #2
 8006988:	4937      	ldr	r1, [pc, #220]	; (8006a68 <setCommand+0x708>)
 800698a:	0020      	movs	r0, r4
 800698c:	f00c fec4 	bl	8013718 <strncmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	d100      	bne.n	8006996 <setCommand+0x636>
 8006994:	e0b9      	b.n	8006b0a <setCommand+0x7aa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006996:	2208      	movs	r2, #8
 8006998:	4934      	ldr	r1, [pc, #208]	; (8006a6c <setCommand+0x70c>)
 800699a:	0020      	movs	r0, r4
 800699c:	f00c febc 	bl	8013718 <strncmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d100      	bne.n	80069a6 <setCommand+0x646>
 80069a4:	e0b3      	b.n	8006b0e <setCommand+0x7ae>
 80069a6:	2202      	movs	r2, #2
 80069a8:	4931      	ldr	r1, [pc, #196]	; (8006a70 <setCommand+0x710>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	f00c feb4 	bl	8013718 <strncmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d100      	bne.n	80069b6 <setCommand+0x656>
 80069b4:	e0ad      	b.n	8006b12 <setCommand+0x7b2>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069b6:	2208      	movs	r2, #8
 80069b8:	492e      	ldr	r1, [pc, #184]	; (8006a74 <setCommand+0x714>)
 80069ba:	0020      	movs	r0, r4
 80069bc:	f00c feac 	bl	8013718 <strncmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d100      	bne.n	80069c6 <setCommand+0x666>
 80069c4:	e0a7      	b.n	8006b16 <setCommand+0x7b6>
 80069c6:	2202      	movs	r2, #2
 80069c8:	492b      	ldr	r1, [pc, #172]	; (8006a78 <setCommand+0x718>)
 80069ca:	0020      	movs	r0, r4
 80069cc:	f00c fea4 	bl	8013718 <strncmp>
			temp82 =DECEMBER;
 80069d0:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d055      	beq.n	8006a82 <setCommand+0x722>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80069d6:	220f      	movs	r2, #15
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <setCommand+0x71c>)
 80069da:	0028      	movs	r0, r5
 80069dc:	f00c fc55 	bl	801328a <memcpy>
 80069e0:	e6cb      	b.n	800677a <setCommand+0x41a>
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	2000129c 	.word	0x2000129c
 80069e8:	200012a4 	.word	0x200012a4
 80069ec:	200012a8 	.word	0x200012a8
 80069f0:	200012ac 	.word	0x200012ac
 80069f4:	08019118 	.word	0x08019118
 80069f8:	0801911c 	.word	0x0801911c
 80069fc:	200069c8 	.word	0x200069c8
 8006a00:	08019128 	.word	0x08019128
 8006a04:	08019130 	.word	0x08019130
 8006a08:	08019138 	.word	0x08019138
 8006a0c:	08019144 	.word	0x08019144
 8006a10:	08019150 	.word	0x08019150
 8006a14:	08019158 	.word	0x08019158
 8006a18:	08019164 	.word	0x08019164
 8006a1c:	08019200 	.word	0x08019200
 8006a20:	0801916c 	.word	0x0801916c
 8006a24:	08019170 	.word	0x08019170
 8006a28:	0801917c 	.word	0x0801917c
 8006a2c:	08019180 	.word	0x08019180
 8006a30:	08019188 	.word	0x08019188
 8006a34:	0801918c 	.word	0x0801918c
 8006a38:	08019194 	.word	0x08019194
 8006a3c:	08019198 	.word	0x08019198
 8006a40:	0801919c 	.word	0x0801919c
 8006a44:	080191a0 	.word	0x080191a0
 8006a48:	080191a8 	.word	0x080191a8
 8006a4c:	080191ac 	.word	0x080191ac
 8006a50:	080191b4 	.word	0x080191b4
 8006a54:	080191b8 	.word	0x080191b8
 8006a58:	080191c0 	.word	0x080191c0
 8006a5c:	080191c4 	.word	0x080191c4
 8006a60:	080191d0 	.word	0x080191d0
 8006a64:	080191d4 	.word	0x080191d4
 8006a68:	080191dc 	.word	0x080191dc
 8006a6c:	080191e0 	.word	0x080191e0
 8006a70:	080191ec 	.word	0x080191ec
 8006a74:	080191f0 	.word	0x080191f0
 8006a78:	080191fc 	.word	0x080191fc
 8006a7c:	080188d8 	.word	0x080188d8
			temp82 =JANUARY;
 8006a80:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d000      	beq.n	8006a88 <setCommand+0x728>
 8006a86:	e672      	b.n	800676e <setCommand+0x40e>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006a88:	4643      	mov	r3, r8
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b1e      	cmp	r3, #30
 8006a8e:	d8a2      	bhi.n	80069d6 <setCommand+0x676>
 8006a90:	4b2f      	ldr	r3, [pc, #188]	; (8006b50 <setCommand+0x7f0>)
 8006a92:	444b      	add	r3, r9
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d89d      	bhi.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006a9a:	f006 faa9 	bl	800cff0 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <setCommand+0x7f4>)
 8006aa0:	220c      	movs	r2, #12
 8006aa2:	569a      	ldrsb	r2, [r3, r2]
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	7cda      	ldrb	r2, [r3, #19]
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	7c9a      	ldrb	r2, [r3, #18]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	7c5a      	ldrb	r2, [r3, #17]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	003b      	movs	r3, r7
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4641      	mov	r1, r8
 8006abc:	0020      	movs	r0, r4
 8006abe:	f006 fa3d 	bl	800cf3c <BOS_CalendarConfig>
 8006ac2:	0006      	movs	r6, r0
 8006ac4:	e650      	b.n	8006768 <setCommand+0x408>
			temp82 =FEBRUARY;
 8006ac6:	2402      	movs	r4, #2
 8006ac8:	e7db      	b.n	8006a82 <setCommand+0x722>
 8006aca:	2402      	movs	r4, #2
 8006acc:	e7d9      	b.n	8006a82 <setCommand+0x722>
			temp82 =MARCH;
 8006ace:	2403      	movs	r4, #3
 8006ad0:	e7d7      	b.n	8006a82 <setCommand+0x722>
 8006ad2:	2403      	movs	r4, #3
 8006ad4:	e7d5      	b.n	8006a82 <setCommand+0x722>
			temp82 =APRIL;
 8006ad6:	2404      	movs	r4, #4
 8006ad8:	e7d3      	b.n	8006a82 <setCommand+0x722>
 8006ada:	2404      	movs	r4, #4
 8006adc:	e7d1      	b.n	8006a82 <setCommand+0x722>
			temp82 =MAY;
 8006ade:	2405      	movs	r4, #5
 8006ae0:	e7cf      	b.n	8006a82 <setCommand+0x722>
 8006ae2:	2405      	movs	r4, #5
 8006ae4:	e7cd      	b.n	8006a82 <setCommand+0x722>
			temp82 =JUNE;
 8006ae6:	2406      	movs	r4, #6
 8006ae8:	e7cb      	b.n	8006a82 <setCommand+0x722>
 8006aea:	2406      	movs	r4, #6
 8006aec:	e7c9      	b.n	8006a82 <setCommand+0x722>
			temp82 =JULY;
 8006aee:	2407      	movs	r4, #7
 8006af0:	e7c7      	b.n	8006a82 <setCommand+0x722>
 8006af2:	2407      	movs	r4, #7
 8006af4:	e7c5      	b.n	8006a82 <setCommand+0x722>
			temp82 =AUGUST;
 8006af6:	2408      	movs	r4, #8
 8006af8:	e7c3      	b.n	8006a82 <setCommand+0x722>
 8006afa:	2408      	movs	r4, #8
 8006afc:	e7c1      	b.n	8006a82 <setCommand+0x722>
			temp82 =SEPTEMBER;
 8006afe:	2409      	movs	r4, #9
 8006b00:	e7bf      	b.n	8006a82 <setCommand+0x722>
 8006b02:	2409      	movs	r4, #9
 8006b04:	e7bd      	b.n	8006a82 <setCommand+0x722>
			temp82 =OCTOBER;
 8006b06:	240a      	movs	r4, #10
 8006b08:	e7bb      	b.n	8006a82 <setCommand+0x722>
 8006b0a:	240a      	movs	r4, #10
 8006b0c:	e7b9      	b.n	8006a82 <setCommand+0x722>
			temp82 =NOVEMBER;
 8006b0e:	240b      	movs	r4, #11
 8006b10:	e7b7      	b.n	8006a82 <setCommand+0x722>
 8006b12:	240b      	movs	r4, #11
 8006b14:	e7b5      	b.n	8006a82 <setCommand+0x722>
			temp82 =DECEMBER;
 8006b16:	240c      	movs	r4, #12
 8006b18:	e7b3      	b.n	8006a82 <setCommand+0x722>
			temp81 =MONDAY;
 8006b1a:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <setCommand+0x7f8>)
 8006b1e:	681c      	ldr	r4, [r3, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	490e      	ldr	r1, [pc, #56]	; (8006b5c <setCommand+0x7fc>)
 8006b24:	0020      	movs	r0, r4
 8006b26:	f00c fdf7 	bl	8013718 <strncmp>
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d000      	beq.n	8006b32 <setCommand+0x7d2>
 8006b30:	e699      	b.n	8006866 <setCommand+0x506>
			temp82 =JANUARY;
 8006b32:	2401      	movs	r4, #1
 8006b34:	e7a8      	b.n	8006a88 <setCommand+0x728>
			temp81 =TUESDAY;
 8006b36:	2702      	movs	r7, #2
 8006b38:	e7f0      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =WEDNESDAY;
 8006b3a:	2703      	movs	r7, #3
 8006b3c:	e7ee      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =THURSDAY;
 8006b3e:	2704      	movs	r7, #4
 8006b40:	e7ec      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =FRIDAY;
 8006b42:	2705      	movs	r7, #5
 8006b44:	e7ea      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SATURDAY;
 8006b46:	2706      	movs	r7, #6
 8006b48:	e7e8      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SUNDAY;
 8006b4a:	2707      	movs	r7, #7
 8006b4c:	e7e6      	b.n	8006b1c <setCommand+0x7bc>
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	fffff830 	.word	0xfffff830
 8006b54:	200069c8 	.word	0x200069c8
 8006b58:	200012a4 	.word	0x200012a4
 8006b5c:	08019200 	.word	0x08019200

08006b60 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b60:	b530      	push	{r4, r5, lr}
 8006b62:	b083      	sub	sp, #12
 8006b64:	0005      	movs	r5, r0
 8006b66:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	d101      	bne.n	8006b74 <removebuttonCommand+0x14>
 8006b70:	b672      	cpsid	i
 8006b72:	e7fe      	b.n	8006b72 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b74:	aa01      	add	r2, sp, #4
 8006b76:	2101      	movs	r1, #1
 8006b78:	f006 ff32 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006b80:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006b82:	2b70      	cmp	r3, #112	; 0x70
 8006b84:	d007      	beq.n	8006b96 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006b86:	0020      	movs	r0, r4
 8006b88:	f001 fba0 	bl	80082cc <RemovePortButton>
	if(result == BOS_OK){
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d007      	beq.n	8006ba0 <removebuttonCommand+0x40>
}
 8006b90:	2000      	movs	r0, #0
 8006b92:	b003      	add	sp, #12
 8006b94:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b96:	3001      	adds	r0, #1
 8006b98:	f00c f8ed 	bl	8012d76 <atol>
 8006b9c:	b2c4      	uxtb	r4, r0
 8006b9e:	e7f2      	b.n	8006b86 <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006ba0:	0023      	movs	r3, r4
 8006ba2:	0022      	movs	r2, r4
 8006ba4:	4902      	ldr	r1, [pc, #8]	; (8006bb0 <removebuttonCommand+0x50>)
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	f00c fd72 	bl	8013690 <sprintf>
 8006bac:	e7f0      	b.n	8006b90 <removebuttonCommand+0x30>
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	08018ebc 	.word	0x08018ebc

08006bb4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	0006      	movs	r6, r0
 8006bba:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d101      	bne.n	8006bca <addbuttonCommand+0x16>
 8006bc6:	b672      	cpsid	i
 8006bc8:	e7fe      	b.n	8006bc8 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bca:	aa05      	add	r2, sp, #20
 8006bcc:	2101      	movs	r1, #1
 8006bce:	9803      	ldr	r0, [sp, #12]
 8006bd0:	f006 ff06 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006bd4:	0004      	movs	r4, r0
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <addbuttonCommand+0xb0>)
 8006bd8:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006bda:	9d05      	ldr	r5, [sp, #20]
 8006bdc:	002a      	movs	r2, r5
 8006bde:	4922      	ldr	r1, [pc, #136]	; (8006c68 <addbuttonCommand+0xb4>)
 8006be0:	f00c fd9a 	bl	8013718 <strncmp>
		type =MOMENTARY_NO;
 8006be4:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d017      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bea:	002a      	movs	r2, r5
 8006bec:	491f      	ldr	r1, [pc, #124]	; (8006c6c <addbuttonCommand+0xb8>)
 8006bee:	0020      	movs	r0, r4
 8006bf0:	f00c fd92 	bl	8013718 <strncmp>
		type =MOMENTARY_NC;
 8006bf4:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d00f      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bfa:	002a      	movs	r2, r5
 8006bfc:	491c      	ldr	r1, [pc, #112]	; (8006c70 <addbuttonCommand+0xbc>)
 8006bfe:	0020      	movs	r0, r4
 8006c00:	f00c fd8a 	bl	8013718 <strncmp>
		type =ONOFF_NO;
 8006c04:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d007      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c0a:	002a      	movs	r2, r5
 8006c0c:	4919      	ldr	r1, [pc, #100]	; (8006c74 <addbuttonCommand+0xc0>)
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f00c fd82 	bl	8013718 <strncmp>
		type =ONOFF_NC;
 8006c14:	4243      	negs	r3, r0
 8006c16:	4158      	adcs	r0, r3
 8006c18:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c1a:	aa04      	add	r2, sp, #16
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	9803      	ldr	r0, [sp, #12]
 8006c20:	f006 fede 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c24:	2300      	movs	r3, #0
 8006c26:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c28:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006c2a:	2b70      	cmp	r3, #112	; 0x70
 8006c2c:	d008      	beq.n	8006c40 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006c2e:	0021      	movs	r1, r4
 8006c30:	0038      	movs	r0, r7
 8006c32:	f001 fab9 	bl	80081a8 <AddPortButton>
	if(result == BOS_OK){
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d007      	beq.n	8006c4a <addbuttonCommand+0x96>
}
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	b007      	add	sp, #28
 8006c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c40:	3001      	adds	r0, #1
 8006c42:	f00c f898 	bl	8012d76 <atol>
 8006c46:	b2c4      	uxtb	r4, r0
 8006c48:	e7f1      	b.n	8006c2e <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <addbuttonCommand+0xb0>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c54:	9400      	str	r4, [sp, #0]
 8006c56:	0023      	movs	r3, r4
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <addbuttonCommand+0xc4>)
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	f00c fd18 	bl	8013690 <sprintf>
 8006c60:	e7eb      	b.n	8006c3a <addbuttonCommand+0x86>
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	2000128c 	.word	0x2000128c
 8006c68:	0801877c 	.word	0x0801877c
 8006c6c:	0801878c 	.word	0x0801878c
 8006c70:	0801879c 	.word	0x0801879c
 8006c74:	080187a8 	.word	0x080187a8
 8006c78:	080187b4 	.word	0x080187b4

08006c7c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	46de      	mov	lr, fp
 8006c80:	4657      	mov	r7, sl
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b09b      	sub	sp, #108	; 0x6c
 8006c86:	0005      	movs	r5, r0
 8006c88:	9009      	str	r0, [sp, #36]	; 0x24
 8006c8a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9319      	str	r3, [sp, #100]	; 0x64
 8006c90:	9318      	str	r3, [sp, #96]	; 0x60
 8006c92:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c94:	9316      	str	r3, [sp, #88]	; 0x58
 8006c96:	9315      	str	r3, [sp, #84]	; 0x54
 8006c98:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006c9a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	a810      	add	r0, sp, #64	; 0x40
 8006ca2:	f00c fafb 	bl	801329c <memset>
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	2100      	movs	r1, #0
 8006caa:	a80d      	add	r0, sp, #52	; 0x34
 8006cac:	f00c faf6 	bl	801329c <memset>
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	a80a      	add	r0, sp, #40	; 0x28
 8006cb6:	f00c faf1 	bl	801329c <memset>
	configASSERT(pcWriteBuffer);
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d101      	bne.n	8006cc2 <scastCommand+0x46>
 8006cbe:	b672      	cpsid	i
 8006cc0:	e7fe      	b.n	8006cc0 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cc2:	aa19      	add	r2, sp, #100	; 0x64
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f006 fe8a 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006ccc:	2300      	movs	r3, #0
 8006cce:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d100      	bne.n	8006cda <scastCommand+0x5e>
 8006cd8:	e06d      	b.n	8006db6 <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006cda:	aa18      	add	r2, sp, #96	; 0x60
 8006cdc:	2102      	movs	r1, #2
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f006 fe7e 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006ce4:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006ce6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ce8:	a810      	add	r0, sp, #64	; 0x40
 8006cea:	f00c fd26 	bl	801373a <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006cee:	a810      	add	r0, sp, #64	; 0x40
 8006cf0:	f7fd fa52 	bl	8004198 <GetID>
 8006cf4:	b2c3      	uxtb	r3, r0
 8006cf6:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006cf8:	aa17      	add	r2, sp, #92	; 0x5c
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	0020      	movs	r0, r4
 8006cfe:	f006 fe6f 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d02:	2300      	movs	r3, #0
 8006d04:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d06:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006d08:	2b70      	cmp	r3, #112	; 0x70
 8006d0a:	d05a      	beq.n	8006dc2 <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d0c:	aa16      	add	r2, sp, #88	; 0x58
 8006d0e:	2104      	movs	r1, #4
 8006d10:	0020      	movs	r0, r4
 8006d12:	f006 fe65 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006d16:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d1a:	a80d      	add	r0, sp, #52	; 0x34
 8006d1c:	f00c fd0d 	bl	801373a <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d20:	a80d      	add	r0, sp, #52	; 0x34
 8006d22:	f7fd fa39 	bl	8004198 <GetID>
 8006d26:	b2c3      	uxtb	r3, r0
 8006d28:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d2a:	aa15      	add	r2, sp, #84	; 0x54
 8006d2c:	2105      	movs	r1, #5
 8006d2e:	0020      	movs	r0, r4
 8006d30:	f006 fe56 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d34:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d36:	0032      	movs	r2, r6
 8006d38:	492b      	ldr	r1, [pc, #172]	; (8006de8 <scastCommand+0x16c>)
 8006d3a:	9007      	str	r0, [sp, #28]
 8006d3c:	f00c fcec 	bl	8013718 <strncmp>
		direction =FORWARD;
 8006d40:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d00f      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d46:	0032      	movs	r2, r6
 8006d48:	4928      	ldr	r1, [pc, #160]	; (8006dec <scastCommand+0x170>)
 8006d4a:	9807      	ldr	r0, [sp, #28]
 8006d4c:	f00c fce4 	bl	8013718 <strncmp>
		direction =BACKWARD;
 8006d50:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d007      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d56:	0032      	movs	r2, r6
 8006d58:	4925      	ldr	r1, [pc, #148]	; (8006df0 <scastCommand+0x174>)
 8006d5a:	9807      	ldr	r0, [sp, #28]
 8006d5c:	f00c fcdc 	bl	8013718 <strncmp>
		direction =BIDIRECTIONAL;
 8006d60:	4243      	negs	r3, r0
 8006d62:	4158      	adcs	r0, r3
 8006d64:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006d66:	0032      	movs	r2, r6
 8006d68:	9907      	ldr	r1, [sp, #28]
 8006d6a:	a80a      	add	r0, sp, #40	; 0x28
 8006d6c:	f00c fce5 	bl	801373a <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006d70:	aa14      	add	r2, sp, #80	; 0x50
 8006d72:	2106      	movs	r1, #6
 8006d74:	0020      	movs	r0, r4
 8006d76:	f006 fe33 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006d7a:	f00b fffc 	bl	8012d76 <atol>
 8006d7e:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d80:	aa13      	add	r2, sp, #76	; 0x4c
 8006d82:	2107      	movs	r1, #7
 8006d84:	0020      	movs	r0, r4
 8006d86:	f006 fe2b 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d8a:	f00b fff4 	bl	8012d76 <atol>
 8006d8e:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d90:	2300      	movs	r3, #0
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	9601      	str	r6, [sp, #4]
 8006d98:	9500      	str	r5, [sp, #0]
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	003a      	movs	r2, r7
 8006d9e:	4651      	mov	r1, sl
 8006da0:	9808      	ldr	r0, [sp, #32]
 8006da2:	f002 fcb3 	bl	800970c <StartScastDMAStream>
	if(result == BOS_OK){
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d010      	beq.n	8006dcc <scastCommand+0x150>
}
 8006daa:	2000      	movs	r0, #0
 8006dac:	b01b      	add	sp, #108	; 0x6c
 8006dae:	bc0c      	pop	{r2, r3}
 8006db0:	4692      	mov	sl, r2
 8006db2:	469b      	mov	fp, r3
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006db6:	3001      	adds	r0, #1
 8006db8:	f00b ffdd 	bl	8012d76 <atol>
 8006dbc:	b2c3      	uxtb	r3, r0
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	e78b      	b.n	8006cda <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f00b ffd7 	bl	8012d76 <atol>
 8006dc8:	b2c7      	uxtb	r7, r0
 8006dca:	e79f      	b.n	8006d0c <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006dcc:	9404      	str	r4, [sp, #16]
 8006dce:	9603      	str	r6, [sp, #12]
 8006dd0:	ab0d      	add	r3, sp, #52	; 0x34
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	9701      	str	r7, [sp, #4]
 8006dd6:	ab10      	add	r3, sp, #64	; 0x40
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	aa0a      	add	r2, sp, #40	; 0x28
 8006dde:	4905      	ldr	r1, [pc, #20]	; (8006df4 <scastCommand+0x178>)
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	f00c fc55 	bl	8013690 <sprintf>
 8006de6:	e7e0      	b.n	8006daa <scastCommand+0x12e>
 8006de8:	08018f04 	.word	0x08018f04
 8006dec:	08018f0c 	.word	0x08018f0c
 8006df0:	08018f18 	.word	0x08018f18
 8006df4:	08018f28 	.word	0x08018f28

08006df8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006dfe:	d039      	beq.n	8006e74 <infoCommand+0x7c>
	if(N > 1)
 8006e00:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <infoCommand+0xa4>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006e04:	2500      	movs	r5, #0
	if(N > 1)
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d902      	bls.n	8006e10 <infoCommand+0x18>
		result =ReadPortsDir();
 8006e0a:	f7fd fb19 	bl	8004440 <ReadPortsDir>
 8006e0e:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e10:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <infoCommand+0xa4>)
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	4922      	ldr	r1, [pc, #136]	; (8006ea0 <infoCommand+0xa8>)
 8006e16:	0020      	movs	r0, r4
 8006e18:	f00c fc3a 	bl	8013690 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7f9 f97b 	bl	8000118 <strlen>
 8006e22:	b282      	uxth	r2, r0
 8006e24:	4e1f      	ldr	r6, [pc, #124]	; (8006ea4 <infoCommand+0xac>)
 8006e26:	7830      	ldrb	r0, [r6, #0]
 8006e28:	2701      	movs	r7, #1
 8006e2a:	427f      	negs	r7, r7
 8006e2c:	9700      	str	r7, [sp, #0]
 8006e2e:	2332      	movs	r3, #50	; 0x32
 8006e30:	0021      	movs	r1, r4
 8006e32:	f006 fb8f 	bl	800d554 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e36:	2213      	movs	r2, #19
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <infoCommand+0xb0>)
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f00c fa25 	bl	801328a <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e40:	0020      	movs	r0, r4
 8006e42:	f7f9 f969 	bl	8000118 <strlen>
 8006e46:	b282      	uxth	r2, r0
 8006e48:	7830      	ldrb	r0, [r6, #0]
 8006e4a:	9700      	str	r7, [sp, #0]
 8006e4c:	2332      	movs	r3, #50	; 0x32
 8006e4e:	0021      	movs	r1, r4
 8006e50:	f006 fb80 	bl	800d554 <writePxMutex>
	DisplayTopology(PcPort);
 8006e54:	7830      	ldrb	r0, [r6, #0]
 8006e56:	f7fc fefb 	bl	8003c50 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006e5a:	7830      	ldrb	r0, [r6, #0]
 8006e5c:	f7fc ffc8 	bl	8003df0 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006e60:	2d02      	cmp	r5, #2
 8006e62:	d009      	beq.n	8006e78 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006e64:	2202      	movs	r2, #2
 8006e66:	4911      	ldr	r1, [pc, #68]	; (8006eac <infoCommand+0xb4>)
 8006e68:	0020      	movs	r0, r4
 8006e6a:	f00c fa0e 	bl	801328a <memcpy>
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b003      	add	sp, #12
 8006e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006e74:	b672      	cpsid	i
 8006e76:	e7fe      	b.n	8006e76 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e78:	2244      	movs	r2, #68	; 0x44
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <infoCommand+0xb8>)
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f00c fa04 	bl	801328a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e82:	0020      	movs	r0, r4
 8006e84:	f7f9 f948 	bl	8000118 <strlen>
 8006e88:	b282      	uxth	r2, r0
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <infoCommand+0xac>)
 8006e8c:	7818      	ldrb	r0, [r3, #0]
 8006e8e:	003b      	movs	r3, r7
 8006e90:	9700      	str	r7, [sp, #0]
 8006e92:	3333      	adds	r3, #51	; 0x33
 8006e94:	0021      	movs	r1, r4
 8006e96:	f006 fb5d 	bl	800d554 <writePxMutex>
 8006e9a:	e7e3      	b.n	8006e64 <infoCommand+0x6c>
 8006e9c:	2000001c 	.word	0x2000001c
 8006ea0:	08018cc0 	.word	0x08018cc0
 8006ea4:	20000a77 	.word	0x20000a77
 8006ea8:	08018cdc 	.word	0x08018cdc
 8006eac:	08017c64 	.word	0x08017c64
 8006eb0:	08018cf0 	.word	0x08018cf0

08006eb4 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006eb4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d101      	bne.n	8006ebe <statusCommand+0xa>
 8006eba:	b672      	cpsid	i
 8006ebc:	e7fe      	b.n	8006ebc <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	f7fd f80a 	bl	8003ed8 <DisplayModuleStatus>
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	46ce      	mov	lr, r9
 8006ecc:	b500      	push	{lr}
 8006ece:	b090      	sub	sp, #64	; 0x40
 8006ed0:	0004      	movs	r4, r0
 8006ed2:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006ed4:	2227      	movs	r2, #39	; 0x27
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	a806      	add	r0, sp, #24
 8006eda:	f00c f9df 	bl	801329c <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006ede:	220a      	movs	r2, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	a803      	add	r0, sp, #12
 8006ee4:	f00c f9da 	bl	801329c <memset>
	configASSERT(pcWriteBuffer);
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d101      	bne.n	8006ef0 <groupCommand+0x28>
 8006eec:	b672      	cpsid	i
 8006eee:	e7fe      	b.n	8006eee <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ef0:	4d54      	ldr	r5, [pc, #336]	; (8007044 <groupCommand+0x17c>)
 8006ef2:	002a      	movs	r2, r5
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	f006 fd72 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006efc:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006efe:	682a      	ldr	r2, [r5, #0]
 8006f00:	a803      	add	r0, sp, #12
 8006f02:	f00c fc1a 	bl	801373a <strncpy>
 8006f06:	4d50      	ldr	r5, [pc, #320]	; (8007048 <groupCommand+0x180>)
 8006f08:	002f      	movs	r7, r5
 8006f0a:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	a803      	add	r0, sp, #12
 8006f10:	f7f9 f8f8 	bl	8000104 <strcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d016      	beq.n	8006f46 <groupCommand+0x7e>
 8006f18:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f1a:	42bd      	cmp	r5, r7
 8006f1c:	d1f6      	bne.n	8006f0c <groupCommand+0x44>
	type =1;
 8006f1e:	2701      	movs	r7, #1
	count =2;
 8006f20:	4b4a      	ldr	r3, [pc, #296]	; (800704c <groupCommand+0x184>)
 8006f22:	2202      	movs	r2, #2
 8006f24:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f26:	3208      	adds	r2, #8
 8006f28:	4949      	ldr	r1, [pc, #292]	; (8007050 <groupCommand+0x188>)
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	f00c f9ad 	bl	801328a <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f30:	4a48      	ldr	r2, [pc, #288]	; (8007054 <groupCommand+0x18c>)
 8006f32:	2102      	movs	r1, #2
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	f006 fd53 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <groupCommand+0x190>)
 8006f3c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d061      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f42:	4e44      	ldr	r6, [pc, #272]	; (8007054 <groupCommand+0x18c>)
 8006f44:	e011      	b.n	8006f6a <groupCommand+0xa2>
			type =0;
 8006f46:	2700      	movs	r7, #0
 8006f48:	e7ea      	b.n	8006f20 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 8006f4a:	a906      	add	r1, sp, #24
 8006f4c:	0020      	movs	r0, r4
 8006f4e:	f00c fbbf 	bl	80136d0 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f52:	1c69      	adds	r1, r5, #1
 8006f54:	b249      	sxtb	r1, r1
 8006f56:	4b3d      	ldr	r3, [pc, #244]	; (800704c <groupCommand+0x184>)
 8006f58:	7019      	strb	r1, [r3, #0]
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <groupCommand+0x18c>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	f006 fd3f 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8006f62:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <groupCommand+0x190>)
 8006f64:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d04d      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	ad06      	add	r5, sp, #24
 8006f70:	001a      	movs	r2, r3
 8006f72:	0001      	movs	r1, r0
 8006f74:	0028      	movs	r0, r5
 8006f76:	f00c fbe0 	bl	801373a <strncpy>
		module[xParameterStringLength] ='\0';
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	464a      	mov	r2, r9
 8006f7e:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006f80:	0028      	movs	r0, r5
 8006f82:	f7fd f909 	bl	8004198 <GetID>
		if(modID < 0)
 8006f86:	2800      	cmp	r0, #0
 8006f88:	db37      	blt.n	8006ffa <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 8006f8a:	b2c0      	uxtb	r0, r0
 8006f8c:	a903      	add	r1, sp, #12
 8006f8e:	f7fd f9cf 	bl	8004330 <AddModuleToGroup>
		if(result != BOS_OK)
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d146      	bne.n	8007024 <groupCommand+0x15c>
		if(count > 2)
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <groupCommand+0x184>)
 8006f98:	2500      	movs	r5, #0
 8006f9a:	575d      	ldrsb	r5, [r3, r5]
 8006f9c:	2d02      	cmp	r5, #2
 8006f9e:	ddd4      	ble.n	8006f4a <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	f7f9 f8b9 	bl	8000118 <strlen>
 8006fa6:	1820      	adds	r0, r4, r0
 8006fa8:	2203      	movs	r2, #3
 8006faa:	492c      	ldr	r1, [pc, #176]	; (800705c <groupCommand+0x194>)
 8006fac:	f00c f96d 	bl	801328a <memcpy>
 8006fb0:	e7cb      	b.n	8006f4a <groupCommand+0x82>
	else if(result == BOS_OK && type){
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	d009      	beq.n	8006fca <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	4929      	ldr	r1, [pc, #164]	; (8007060 <groupCommand+0x198>)
 8006fba:	a806      	add	r0, sp, #24
 8006fbc:	f00c fb68 	bl	8013690 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fc0:	a906      	add	r1, sp, #24
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	f00c fb84 	bl	80136d0 <strcat>
 8006fc8:	e027      	b.n	800701a <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006fca:	aa03      	add	r2, sp, #12
 8006fcc:	4925      	ldr	r1, [pc, #148]	; (8007064 <groupCommand+0x19c>)
 8006fce:	a806      	add	r0, sp, #24
 8006fd0:	f00c fb5e 	bl	8013690 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fd4:	a906      	add	r1, sp, #24
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f00c fb7a 	bl	80136d0 <strcat>
 8006fdc:	e01d      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006fde:	aa03      	add	r2, sp, #12
 8006fe0:	4921      	ldr	r1, [pc, #132]	; (8007068 <groupCommand+0x1a0>)
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f00c fb54 	bl	8013690 <sprintf>
 8006fe8:	e017      	b.n	800701a <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 8006fea:	2808      	cmp	r0, #8
 8006fec:	d115      	bne.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006fee:	aa03      	add	r2, sp, #12
 8006ff0:	491e      	ldr	r1, [pc, #120]	; (800706c <groupCommand+0x1a4>)
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	f00c fb4c 	bl	8013690 <sprintf>
 8006ff8:	e00f      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ffa:	aa06      	add	r2, sp, #24
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <groupCommand+0x1a8>)
 8006ffe:	0020      	movs	r0, r4
 8007000:	f00c fb46 	bl	8013690 <sprintf>
	return pdFALSE;
 8007004:	e009      	b.n	800701a <groupCommand+0x152>
	else if(count == 2)
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <groupCommand+0x184>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d1d0      	bne.n	8006fb2 <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007010:	aa03      	add	r2, sp, #12
 8007012:	4918      	ldr	r1, [pc, #96]	; (8007074 <groupCommand+0x1ac>)
 8007014:	0020      	movs	r0, r4
 8007016:	f00c fb3b 	bl	8013690 <sprintf>
}
 800701a:	2000      	movs	r0, #0
 800701c:	b010      	add	sp, #64	; 0x40
 800701e:	bc04      	pop	{r2}
 8007020:	4691      	mov	r9, r2
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <groupCommand+0x184>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b25b      	sxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d0f0      	beq.n	8007010 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 800702e:	2806      	cmp	r0, #6
 8007030:	d0d5      	beq.n	8006fde <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 8007032:	2807      	cmp	r0, #7
 8007034:	d1d9      	bne.n	8006fea <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007036:	aa03      	add	r2, sp, #12
 8007038:	490f      	ldr	r1, [pc, #60]	; (8007078 <groupCommand+0x1b0>)
 800703a:	0020      	movs	r0, r4
 800703c:	f00c fb28 	bl	8013690 <sprintf>
 8007040:	e7eb      	b.n	800701a <groupCommand+0x152>
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	200012bc 	.word	0x200012bc
 8007048:	20000e5c 	.word	0x20000e5c
 800704c:	20001282 	.word	0x20001282
 8007050:	08018ae0 	.word	0x08018ae0
 8007054:	200012b0 	.word	0x200012b0
 8007058:	20001284 	.word	0x20001284
 800705c:	08018aec 	.word	0x08018aec
 8007060:	08018b1c 	.word	0x08018b1c
 8007064:	08018b38 	.word	0x08018b38
 8007068:	08018b58 	.word	0x08018b58
 800706c:	08018bcc 	.word	0x08018bcc
 8007070:	08018c0c 	.word	0x08018c0c
 8007074:	08018af0 	.word	0x08018af0
 8007078:	08018b98 	.word	0x08018b98

0800707c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	0004      	movs	r4, r0
 8007080:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007082:	2c00      	cmp	r4, #0
 8007084:	d101      	bne.n	800708a <nameCommand+0xe>
 8007086:	b672      	cpsid	i
 8007088:	e7fe      	b.n	8007088 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800708a:	4d1c      	ldr	r5, [pc, #112]	; (80070fc <nameCommand+0x80>)
 800708c:	002a      	movs	r2, r5
 800708e:	2101      	movs	r1, #1
 8007090:	f006 fca6 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 8007094:	0001      	movs	r1, r0
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <nameCommand+0x84>)
 8007098:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	dd01      	ble.n	80070a4 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070a0:	2300      	movs	r3, #0
 80070a2:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <nameCommand+0x88>)
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	f7fd f8da 	bl	8004260 <NameModule>
	if(result == BOS_OK)
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d007      	beq.n	80070c0 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070b0:	2806      	cmp	r0, #6
 80070b2:	d00e      	beq.n	80070d2 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 80070b4:	2807      	cmp	r0, #7
 80070b6:	d013      	beq.n	80070e0 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 80070b8:	2808      	cmp	r0, #8
 80070ba:	d018      	beq.n	80070ee <nameCommand+0x72>
}
 80070bc:	2000      	movs	r0, #0
 80070be:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <nameCommand+0x88>)
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <nameCommand+0x84>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	490f      	ldr	r1, [pc, #60]	; (8007108 <nameCommand+0x8c>)
 80070ca:	0020      	movs	r0, r4
 80070cc:	f00c fae0 	bl	8013690 <sprintf>
 80070d0:	e7f4      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <nameCommand+0x84>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <nameCommand+0x90>)
 80070d8:	0020      	movs	r0, r4
 80070da:	f00c fad9 	bl	8013690 <sprintf>
 80070de:	e7ed      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <nameCommand+0x84>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	490a      	ldr	r1, [pc, #40]	; (8007110 <nameCommand+0x94>)
 80070e6:	0020      	movs	r0, r4
 80070e8:	f00c fad2 	bl	8013690 <sprintf>
 80070ec:	e7e6      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <nameCommand+0x84>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <nameCommand+0x98>)
 80070f4:	0020      	movs	r0, r4
 80070f6:	f00c facb 	bl	8013690 <sprintf>
 80070fa:	e7df      	b.n	80070bc <nameCommand+0x40>
 80070fc:	200012b8 	.word	0x200012b8
 8007100:	20001288 	.word	0x20001288
 8007104:	20001076 	.word	0x20001076
 8007108:	08018d58 	.word	0x08018d58
 800710c:	08018b58 	.word	0x08018b58
 8007110:	08018b98 	.word	0x08018b98
 8007114:	08018bcc 	.word	0x08018bcc

08007118 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	1e04      	subs	r4, r0, #0
 800711e:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007120:	d101      	bne.n	8007126 <bootloaderUpdateCommand+0xe>
 8007122:	b672      	cpsid	i
 8007124:	e7fe      	b.n	8007124 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007126:	4a4b      	ldr	r2, [pc, #300]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007128:	2101      	movs	r1, #1
 800712a:	9803      	ldr	r0, [sp, #12]
 800712c:	f006 fc58 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007130:	2800      	cmp	r0, #0
 8007132:	d040      	beq.n	80071b6 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007134:	4b47      	ldr	r3, [pc, #284]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4947      	ldr	r1, [pc, #284]	; (8007258 <bootloaderUpdateCommand+0x140>)
 800713a:	f00c faed 	bl	8013718 <strncmp>
 800713e:	2800      	cmp	r0, #0
 8007140:	d000      	beq.n	8007144 <bootloaderUpdateCommand+0x2c>
 8007142:	e080      	b.n	8007246 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007144:	4a45      	ldr	r2, [pc, #276]	; (800725c <bootloaderUpdateCommand+0x144>)
 8007146:	2102      	movs	r1, #2
 8007148:	9803      	ldr	r0, [sp, #12]
 800714a:	f006 fc49 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 800714e:	4f44      	ldr	r7, [pc, #272]	; (8007260 <bootloaderUpdateCommand+0x148>)
 8007150:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007152:	4a44      	ldr	r2, [pc, #272]	; (8007264 <bootloaderUpdateCommand+0x14c>)
 8007154:	2103      	movs	r1, #3
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	f006 fc42 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800715e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007160:	6838      	ldr	r0, [r7, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8007166:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007168:	2b23      	cmp	r3, #35	; 0x23
 800716a:	d04e      	beq.n	800720a <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 800716c:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	56c3      	ldrsb	r3, [r0, r3]
 8007174:	2b70      	cmp	r3, #112	; 0x70
 8007176:	d04e      	beq.n	8007216 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 8007178:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 800717a:	4b3c      	ldr	r3, [pc, #240]	; (800726c <bootloaderUpdateCommand+0x154>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	42b3      	cmp	r3, r6
 8007180:	d04e      	beq.n	8007220 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 8007182:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <bootloaderUpdateCommand+0x158>)
 8007184:	2200      	movs	r2, #0
 8007186:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <bootloaderUpdateCommand+0x15c>)
 800718a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800718c:	3201      	adds	r2, #1
 800718e:	211a      	movs	r1, #26
 8007190:	0030      	movs	r0, r6
 8007192:	f002 fa95 	bl	80096c0 <SendMessageToModule>
				osDelay(100);
 8007196:	2064      	movs	r0, #100	; 0x64
 8007198:	f006 fb09 	bl	800d7ae <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	4b32      	ldr	r3, [pc, #200]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071a2:	7818      	ldrb	r0, [r3, #0]
 80071a4:	002b      	movs	r3, r5
 80071a6:	0031      	movs	r1, r6
 80071a8:	f7fc fcd0 	bl	8003b4c <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071ac:	2f68      	cmp	r7, #104	; 0x68
 80071ae:	d04a      	beq.n	8007246 <bootloaderUpdateCommand+0x12e>
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	b005      	add	sp, #20
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071b6:	4b2d      	ldr	r3, [pc, #180]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	4930      	ldr	r1, [pc, #192]	; (800727c <bootloaderUpdateCommand+0x164>)
 80071bc:	0020      	movs	r0, r4
 80071be:	f00c fa67 	bl	8013690 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <bootloaderUpdateCommand+0x168>)
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	0020      	movs	r0, r4
 80071c8:	f00c fa82 	bl	80136d0 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80071cc:	0020      	movs	r0, r4
 80071ce:	f7f8 ffa3 	bl	8000118 <strlen>
 80071d2:	b282      	uxth	r2, r0
 80071d4:	4b28      	ldr	r3, [pc, #160]	; (8007278 <bootloaderUpdateCommand+0x160>)
 80071d6:	7818      	ldrb	r0, [r3, #0]
 80071d8:	2301      	movs	r3, #1
 80071da:	425b      	negs	r3, r3
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3333      	adds	r3, #51	; 0x33
 80071e0:	0021      	movs	r1, r4
 80071e2:	f006 f9b7 	bl	800d554 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80071e6:	4b27      	ldr	r3, [pc, #156]	; (8007284 <bootloaderUpdateCommand+0x16c>)
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <bootloaderUpdateCommand+0x170>)
 80071ea:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <bootloaderUpdateCommand+0x174>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f006 fadb 	bl	800d7ae <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	4b24      	ldr	r3, [pc, #144]	; (8007290 <bootloaderUpdateCommand+0x178>)
 80071fe:	4a25      	ldr	r2, [pc, #148]	; (8007294 <bootloaderUpdateCommand+0x17c>)
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	e7fd      	b.n	8007206 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800720a:	3001      	adds	r0, #1
 800720c:	f00b fdb3 	bl	8012d76 <atol>
 8007210:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007212:	2700      	movs	r7, #0
 8007214:	e7aa      	b.n	800716c <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007216:	3001      	adds	r0, #1
 8007218:	f00b fdad 	bl	8012d76 <atol>
 800721c:	b2c5      	uxtb	r5, r0
 800721e:	e7ac      	b.n	800717a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007220:	2100      	movs	r1, #0
 8007222:	9100      	str	r1, [sp, #0]
 8007224:	2319      	movs	r3, #25
 8007226:	000a      	movs	r2, r1
 8007228:	0028      	movs	r0, r5
 800722a:	f002 f821 	bl	8009270 <SendMessageFromPort>
				osDelay(100);
 800722e:	2064      	movs	r0, #100	; 0x64
 8007230:	f006 fabd 	bl	800d7ae <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <bootloaderUpdateCommand+0x154>)
 8007236:	7818      	ldrb	r0, [r3, #0]
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	002b      	movs	r3, r5
 800723e:	0001      	movs	r1, r0
 8007240:	f7fc fc84 	bl	8003b4c <remoteBootloaderUpdate>
 8007244:	e7b2      	b.n	80071ac <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007246:	220f      	movs	r2, #15
 8007248:	4913      	ldr	r1, [pc, #76]	; (8007298 <bootloaderUpdateCommand+0x180>)
 800724a:	0020      	movs	r0, r4
 800724c:	f00c f81d 	bl	801328a <memcpy>
 8007250:	e7ae      	b.n	80071b0 <bootloaderUpdateCommand+0x98>
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	200012b4 	.word	0x200012b4
 8007258:	08018818 	.word	0x08018818
 800725c:	200012c0 	.word	0x200012c0
 8007260:	20001298 	.word	0x20001298
 8007264:	200012c4 	.word	0x200012c4
 8007268:	200012a0 	.word	0x200012a0
 800726c:	20001076 	.word	0x20001076
 8007270:	200069c8 	.word	0x200069c8
 8007274:	20000f38 	.word	0x20000f38
 8007278:	20000a77 	.word	0x20000a77
 800727c:	080187f8 	.word	0x080187f8
 8007280:	20000074 	.word	0x20000074
 8007284:	20007ff0 	.word	0x20007ff0
 8007288:	deadbeef 	.word	0xdeadbeef
 800728c:	20000ef4 	.word	0x20000ef4
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	05fa0004 	.word	0x05fa0004
 8007298:	080188d8 	.word	0x080188d8

0800729c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800729c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800729e:	2800      	cmp	r0, #0
 80072a0:	d01d      	beq.n	80072de <pingCommand+0x42>
	if(!moduleAlias[myID][0])
 80072a2:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <pingCommand+0x58>)
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	0093      	lsls	r3, r2, #2
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4912      	ldr	r1, [pc, #72]	; (80072f8 <pingCommand+0x5c>)
 80072ae:	5c5b      	ldrb	r3, [r3, r1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d116      	bne.n	80072e2 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80072b4:	4911      	ldr	r1, [pc, #68]	; (80072fc <pingCommand+0x60>)
 80072b6:	f00c f9eb 	bl	8013690 <sprintf>
	RTOS_IND_blink(200);
 80072ba:	2580      	movs	r5, #128	; 0x80
 80072bc:	01ed      	lsls	r5, r5, #7
 80072be:	4c10      	ldr	r4, [pc, #64]	; (8007300 <pingCommand+0x64>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	0029      	movs	r1, r5
 80072c4:	0020      	movs	r0, r4
 80072c6:	f009 ff07 	bl	80110d8 <HAL_GPIO_WritePin>
 80072ca:	20c8      	movs	r0, #200	; 0xc8
 80072cc:	f006 fa6f 	bl	800d7ae <osDelay>
 80072d0:	2200      	movs	r2, #0
 80072d2:	0029      	movs	r1, r5
 80072d4:	0020      	movs	r0, r4
 80072d6:	f009 feff 	bl	80110d8 <HAL_GPIO_WritePin>
}
 80072da:	2000      	movs	r0, #0
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80072de:	b672      	cpsid	i
 80072e0:	e7fe      	b.n	80072e0 <pingCommand+0x44>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072e2:	0093      	lsls	r3, r2, #2
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	4903      	ldr	r1, [pc, #12]	; (80072f8 <pingCommand+0x5c>)
 80072ea:	185b      	adds	r3, r3, r1
 80072ec:	4905      	ldr	r1, [pc, #20]	; (8007304 <pingCommand+0x68>)
 80072ee:	f00c f9cf 	bl	8013690 <sprintf>
 80072f2:	e7e2      	b.n	80072ba <pingCommand+0x1e>
 80072f4:	20001076 	.word	0x20001076
 80072f8:	20000f68 	.word	0x20000f68
 80072fc:	08018dc8 	.word	0x08018dc8
 8007300:	48000400 	.word	0x48000400
 8007304:	08018ddc 	.word	0x08018ddc

08007308 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007308:	b510      	push	{r4, lr}
 800730a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800730c:	d101      	bne.n	8007312 <prvRunTimeStatsCommand+0xa>
 800730e:	b672      	cpsid	i
 8007310:	e7fe      	b.n	8007310 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007312:	2241      	movs	r2, #65	; 0x41
 8007314:	4904      	ldr	r1, [pc, #16]	; (8007328 <prvRunTimeStatsCommand+0x20>)
 8007316:	f00b ffb8 	bl	801328a <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800731a:	0020      	movs	r0, r4
 800731c:	3040      	adds	r0, #64	; 0x40
 800731e:	f007 fdb3 	bl	800ee88 <vTaskGetRunTimeStats>
}
 8007322:	2000      	movs	r0, #0
 8007324:	bd10      	pop	{r4, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	08018e08 	.word	0x08018e08

0800732c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800732c:	b510      	push	{r4, lr}
 800732e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007330:	d101      	bne.n	8007336 <prvTaskStatsCommand+0xa>
 8007332:	b672      	cpsid	i
 8007334:	e7fe      	b.n	8007334 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007336:	2250      	movs	r2, #80	; 0x50
 8007338:	4904      	ldr	r1, [pc, #16]	; (800734c <prvTaskStatsCommand+0x20>)
 800733a:	f00b ffa6 	bl	801328a <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800733e:	0020      	movs	r0, r4
 8007340:	304f      	adds	r0, #79	; 0x4f
 8007342:	f007 fd41 	bl	800edc8 <vTaskList>
}
 8007346:	2000      	movs	r0, #0
 8007348:	bd10      	pop	{r4, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	08018e5c 	.word	0x08018e5c

08007350 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007350:	2800      	cmp	r0, #0
 8007352:	d101      	bne.n	8007358 <resetCommand+0x8>
 8007354:	b672      	cpsid	i
 8007356:	e7fe      	b.n	8007356 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <resetCommand+0x1c>)
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <resetCommand+0x20>)
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	e7fd      	b.n	8007366 <resetCommand+0x16>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	e000ed00 	.word	0xe000ed00
 8007370:	05fa0004 	.word	0x05fa0004

08007374 <RegisterUserCLICommands>:
}
 8007374:	4770      	bx	lr
	...

08007378 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007378:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800737a:	4835      	ldr	r0, [pc, #212]	; (8007450 <vRegisterCLICommands+0xd8>)
 800737c:	f006 fa92 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007380:	4834      	ldr	r0, [pc, #208]	; (8007454 <vRegisterCLICommands+0xdc>)
 8007382:	f006 fa8f 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007386:	4834      	ldr	r0, [pc, #208]	; (8007458 <vRegisterCLICommands+0xe0>)
 8007388:	f006 fa8c 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800738c:	4833      	ldr	r0, [pc, #204]	; (800745c <vRegisterCLICommands+0xe4>)
 800738e:	f006 fa89 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007392:	4833      	ldr	r0, [pc, #204]	; (8007460 <vRegisterCLICommands+0xe8>)
 8007394:	f006 fa86 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007398:	4832      	ldr	r0, [pc, #200]	; (8007464 <vRegisterCLICommands+0xec>)
 800739a:	f006 fa83 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800739e:	4832      	ldr	r0, [pc, #200]	; (8007468 <vRegisterCLICommands+0xf0>)
 80073a0:	f006 fa80 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073a4:	4831      	ldr	r0, [pc, #196]	; (800746c <vRegisterCLICommands+0xf4>)
 80073a6:	f006 fa7d 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073aa:	4831      	ldr	r0, [pc, #196]	; (8007470 <vRegisterCLICommands+0xf8>)
 80073ac:	f006 fa7a 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80073b0:	4830      	ldr	r0, [pc, #192]	; (8007474 <vRegisterCLICommands+0xfc>)
 80073b2:	f006 fa77 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80073b6:	4830      	ldr	r0, [pc, #192]	; (8007478 <vRegisterCLICommands+0x100>)
 80073b8:	f006 fa74 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80073bc:	482f      	ldr	r0, [pc, #188]	; (800747c <vRegisterCLICommands+0x104>)
 80073be:	f006 fa71 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80073c2:	482f      	ldr	r0, [pc, #188]	; (8007480 <vRegisterCLICommands+0x108>)
 80073c4:	f006 fa6e 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80073c8:	482e      	ldr	r0, [pc, #184]	; (8007484 <vRegisterCLICommands+0x10c>)
 80073ca:	f006 fa6b 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80073ce:	482e      	ldr	r0, [pc, #184]	; (8007488 <vRegisterCLICommands+0x110>)
 80073d0:	f006 fa68 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80073d4:	482d      	ldr	r0, [pc, #180]	; (800748c <vRegisterCLICommands+0x114>)
 80073d6:	f006 fa65 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80073da:	482d      	ldr	r0, [pc, #180]	; (8007490 <vRegisterCLICommands+0x118>)
 80073dc:	f006 fa62 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80073e0:	482c      	ldr	r0, [pc, #176]	; (8007494 <vRegisterCLICommands+0x11c>)
 80073e2:	f006 fa5f 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80073e6:	482c      	ldr	r0, [pc, #176]	; (8007498 <vRegisterCLICommands+0x120>)
 80073e8:	f006 fa5c 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80073ec:	482b      	ldr	r0, [pc, #172]	; (800749c <vRegisterCLICommands+0x124>)
 80073ee:	f006 fa59 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80073f2:	482b      	ldr	r0, [pc, #172]	; (80074a0 <vRegisterCLICommands+0x128>)
 80073f4:	f006 fa56 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80073f8:	482a      	ldr	r0, [pc, #168]	; (80074a4 <vRegisterCLICommands+0x12c>)
 80073fa:	f006 fa53 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80073fe:	482a      	ldr	r0, [pc, #168]	; (80074a8 <vRegisterCLICommands+0x130>)
 8007400:	f006 fa50 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007404:	4829      	ldr	r0, [pc, #164]	; (80074ac <vRegisterCLICommands+0x134>)
 8007406:	f006 fa4d 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800740a:	4829      	ldr	r0, [pc, #164]	; (80074b0 <vRegisterCLICommands+0x138>)
 800740c:	f006 fa4a 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007410:	4828      	ldr	r0, [pc, #160]	; (80074b4 <vRegisterCLICommands+0x13c>)
 8007412:	f006 fa47 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007416:	4828      	ldr	r0, [pc, #160]	; (80074b8 <vRegisterCLICommands+0x140>)
 8007418:	f006 fa44 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800741c:	4827      	ldr	r0, [pc, #156]	; (80074bc <vRegisterCLICommands+0x144>)
 800741e:	f006 fa41 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007422:	4827      	ldr	r0, [pc, #156]	; (80074c0 <vRegisterCLICommands+0x148>)
 8007424:	f006 fa3e 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007428:	4826      	ldr	r0, [pc, #152]	; (80074c4 <vRegisterCLICommands+0x14c>)
 800742a:	f006 fa3b 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800742e:	4826      	ldr	r0, [pc, #152]	; (80074c8 <vRegisterCLICommands+0x150>)
 8007430:	f006 fa38 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007434:	4825      	ldr	r0, [pc, #148]	; (80074cc <vRegisterCLICommands+0x154>)
 8007436:	f006 fa35 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800743a:	4825      	ldr	r0, [pc, #148]	; (80074d0 <vRegisterCLICommands+0x158>)
 800743c:	f006 fa32 	bl	800d8a4 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <vRegisterCLICommands+0x15c>)
 8007442:	2223      	movs	r2, #35	; 0x23
 8007444:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007446:	f004 f91c 	bl	800b682 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800744a:	f7ff ff93 	bl	8007374 <RegisterUserCLICommands>
}
 800744e:	bd10      	pop	{r4, pc}
 8007450:	08018eac 	.word	0x08018eac
 8007454:	08018e4c 	.word	0x08018e4c
 8007458:	08018df8 	.word	0x08018df8
 800745c:	0801881c 	.word	0x0801881c
 8007460:	080189a4 	.word	0x080189a4
 8007464:	08018ef4 	.word	0x08018ef4
 8007468:	08018d70 	.word	0x08018d70
 800746c:	08018c30 	.word	0x08018c30
 8007470:	080193a8 	.word	0x080193a8
 8007474:	08018d34 	.word	0x08018d34
 8007478:	08018fb0 	.word	0x08018fb0
 800747c:	080187e8 	.word	0x080187e8
 8007480:	08018ee4 	.word	0x08018ee4
 8007484:	08019208 	.word	0x08019208
 8007488:	08018ad0 	.word	0x08018ad0
 800748c:	08018928 	.word	0x08018928
 8007490:	0801a3c8 	.word	0x0801a3c8
 8007494:	08018890 	.word	0x08018890
 8007498:	08018ffc 	.word	0x08018ffc
 800749c:	0801a43c 	.word	0x0801a43c
 80074a0:	08018cb0 	.word	0x08018cb0
 80074a4:	080189d4 	.word	0x080189d4
 80074a8:	08019398 	.word	0x08019398
 80074ac:	0801876c 	.word	0x0801876c
 80074b0:	08018db8 	.word	0x08018db8
 80074b4:	08018994 	.word	0x08018994
 80074b8:	08018868 	.word	0x08018868
 80074bc:	0801a414 	.word	0x0801a414
 80074c0:	0801a35c 	.word	0x0801a35c
 80074c4:	0801866c 	.word	0x0801866c
 80074c8:	080186ec 	.word	0x080186ec
 80074cc:	08018724 	.word	0x08018724
 80074d0:	0801867c 	.word	0x0801867c
 80074d4:	2000694c 	.word	0x2000694c

080074d8 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 80074d8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 80074da:	1e45      	subs	r5, r0, #1
 80074dc:	00ec      	lsls	r4, r5, #3
 80074de:	1b60      	subs	r0, r4, r5
 80074e0:	00c0      	lsls	r0, r0, #3
 80074e2:	4e05      	ldr	r6, [pc, #20]	; (80074f8 <StopMsgDMA+0x20>)
 80074e4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80074e6:	f008 feb6 	bl	8010256 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	00e4      	lsls	r4, r4, #3
 80074ee:	59a3      	ldr	r3, [r4, r6]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	200017a0 	.word	0x200017a0

080074fc <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80074fc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80074fe:	1e44      	subs	r4, r0, #1
 8007500:	00e5      	lsls	r5, r4, #3
 8007502:	1b28      	subs	r0, r5, r4
 8007504:	00c0      	lsls	r0, r0, #3
 8007506:	4e07      	ldr	r6, [pc, #28]	; (8007524 <StopStreamDMA+0x28>)
 8007508:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800750a:	f008 fea4 	bl	8010256 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800750e:	1b2d      	subs	r5, r5, r4
 8007510:	00ed      	lsls	r5, r5, #3
 8007512:	59aa      	ldr	r2, [r5, r6]
 8007514:	2300      	movs	r3, #0
 8007516:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007518:	00a4      	lsls	r4, r4, #2
 800751a:	4a03      	ldr	r2, [pc, #12]	; (8007528 <StopStreamDMA+0x2c>)
 800751c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 800751e:	4a03      	ldr	r2, [pc, #12]	; (800752c <StopStreamDMA+0x30>)
 8007520:	50a3      	str	r3, [r4, r2]
	
}
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	20001998 	.word	0x20001998
 8007528:	20001490 	.word	0x20001490
 800752c:	200014c0 	.word	0x200014c0

08007530 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007530:	b510      	push	{r4, lr}
 8007532:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007534:	f7ff ffd0 	bl	80074d8 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007538:	3c01      	subs	r4, #1
 800753a:	00e0      	lsls	r0, r4, #3
 800753c:	1b02      	subs	r2, r0, r4
 800753e:	00d2      	lsls	r2, r2, #3
 8007540:	4903      	ldr	r1, [pc, #12]	; (8007550 <SwitchMsgDMAToStream+0x20>)
 8007542:	5851      	ldr	r1, [r2, r1]
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <SwitchMsgDMAToStream+0x24>)
 8007546:	18d0      	adds	r0, r2, r3
 8007548:	f004 f9ba 	bl	800b8c0 <DMA_STREAM_CH_Init>
}
 800754c:	bd10      	pop	{r4, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	200017a0 	.word	0x200017a0
 8007554:	20001998 	.word	0x20001998

08007558 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800755e:	f7ff ffcd 	bl	80074fc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007562:	9401      	str	r4, [sp, #4]
 8007564:	3c01      	subs	r4, #1
 8007566:	00e7      	lsls	r7, r4, #3
 8007568:	1b3d      	subs	r5, r7, r4
 800756a:	00ed      	lsls	r5, r5, #3
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <SwitchStreamDMAToMsg+0x54>)
 800756e:	18ed      	adds	r5, r5, r3
 8007570:	4e0f      	ldr	r6, [pc, #60]	; (80075b0 <SwitchStreamDMAToMsg+0x58>)
 8007572:	1b3b      	subs	r3, r7, r4
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	5999      	ldr	r1, [r3, r6]
 8007578:	0028      	movs	r0, r5
 800757a:	f004 f923 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 800757e:	1b3b      	subs	r3, r7, r4
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	18f3      	adds	r3, r6, r3
 8007584:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007586:	f004 f87d 	bl	800b684 <GetPort>
 800758a:	2300      	movs	r3, #0
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <SwitchStreamDMAToMsg+0x5c>)
 800758e:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007590:	1b3f      	subs	r7, r7, r4
 8007592:	00ff      	lsls	r7, r7, #3
 8007594:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 8007596:	00a4      	lsls	r4, r4, #2
 8007598:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <SwitchStreamDMAToMsg+0x60>)
 800759a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800759c:	9801      	ldr	r0, [sp, #4]
 800759e:	f005 ffb7 	bl	800d510 <GetUart>
 80075a2:	0029      	movs	r1, r5
 80075a4:	f004 fd80 	bl	800c0a8 <DMA_MSG_RX_Setup>
	
}
 80075a8:	b003      	add	sp, #12
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ac:	200017a0 	.word	0x200017a0
 80075b0:	20001998 	.word	0x20001998
 80075b4:	200010f8 	.word	0x200010f8
 80075b8:	200014a8 	.word	0x200014a8

080075bc <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	0005      	movs	r5, r0
 80075c0:	000e      	movs	r6, r1
 80075c2:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80075c4:	f004 f85e 	bl	800b684 <GetPort>
 80075c8:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <StartDMAstream+0x44>)
 80075cc:	5c1b      	ldrb	r3, [r3, r0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d902      	bls.n	80075d8 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80075d2:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d112      	bne.n	80075fe <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80075d8:	0020      	movs	r0, r4
 80075da:	f7ff ffa9 	bl	8007530 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80075de:	1e63      	subs	r3, r4, #1
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <StartDMAstream+0x48>)
 80075e4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <StartDMAstream+0x44>)
 80075e8:	2102      	movs	r1, #2
 80075ea:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80075ec:	4a06      	ldr	r2, [pc, #24]	; (8007608 <StartDMAstream+0x4c>)
 80075ee:	2100      	movs	r1, #0
 80075f0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80075f2:	003a      	movs	r2, r7
 80075f4:	0031      	movs	r1, r6
 80075f6:	0028      	movs	r0, r5
 80075f8:	f004 fdc0 	bl	800c17c <DMA_STREAM_Setup>
	
	return BOS_OK;
 80075fc:	2000      	movs	r0, #0
}
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007600:	200010f8 	.word	0x200010f8
 8007604:	200014a8 	.word	0x200014a8
 8007608:	20001490 	.word	0x20001490

0800760c <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <DMA_IRQHandler+0x50>)
 8007612:	5c1b      	ldrb	r3, [r3, r0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d008      	beq.n	800762a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007618:	3c01      	subs	r4, #1
 800761a:	00e0      	lsls	r0, r4, #3
 800761c:	1b00      	subs	r0, r0, r4
 800761e:	00c0      	lsls	r0, r0, #3
 8007620:	4c0f      	ldr	r4, [pc, #60]	; (8007660 <DMA_IRQHandler+0x54>)
 8007622:	1900      	adds	r0, r0, r4
 8007624:	f008 fe40 	bl	80102a8 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007628:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800762a:	1e45      	subs	r5, r0, #1
 800762c:	00e8      	lsls	r0, r5, #3
 800762e:	1b40      	subs	r0, r0, r5
 8007630:	00c0      	lsls	r0, r0, #3
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <DMA_IRQHandler+0x58>)
 8007634:	18c0      	adds	r0, r0, r3
 8007636:	f008 fe37 	bl	80102a8 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800763a:	00aa      	lsls	r2, r5, #2
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <DMA_IRQHandler+0x5c>)
 800763e:	58d2      	ldr	r2, [r2, r3]
 8007640:	2a00      	cmp	r2, #0
 8007642:	d006      	beq.n	8007652 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <DMA_IRQHandler+0x60>)
 8007646:	00ad      	lsls	r5, r5, #2
 8007648:	586b      	ldr	r3, [r5, r1]
 800764a:	3301      	adds	r3, #1
 800764c:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800764e:	429a      	cmp	r2, r3
 8007650:	d8ea      	bhi.n	8007628 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007652:	0020      	movs	r0, r4
 8007654:	f7ff ff52 	bl	80074fc <StopStreamDMA>
}
 8007658:	e7e6      	b.n	8007628 <DMA_IRQHandler+0x1c>
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	200010f8 	.word	0x200010f8
 8007660:	200017a0 	.word	0x200017a0
 8007664:	20001998 	.word	0x20001998
 8007668:	200014c0 	.word	0x200014c0
 800766c:	20001490 	.word	0x20001490

08007670 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <ResetUartORE+0x24>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2308      	movs	r3, #8
 8007676:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007678:	4a07      	ldr	r2, [pc, #28]	; (8007698 <ResetUartORE+0x28>)
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <ResetUartORE+0x2c>)
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007684:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <ResetUartORE+0x30>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800768a:	4a06      	ldr	r2, [pc, #24]	; (80076a4 <ResetUartORE+0x34>)
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6213      	str	r3, [r2, #32]
#endif
}
 8007690:	4770      	bx	lr
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20006bd0 	.word	0x20006bd0
 8007698:	20006d30 	.word	0x20006d30
 800769c:	20006aec 	.word	0x20006aec
 80076a0:	20006b60 	.word	0x20006b60
 80076a4:	20006c4c 	.word	0x20006c4c

080076a8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	0006      	movs	r6, r0
 80076ac:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 80076ae:	f009 fa6b 	bl	8010b88 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <EE_VerifyPageFullWriteVariable+0xb8>)
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80076b8:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <EE_VerifyPageFullWriteVariable+0xbc>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 80076c2:	4929      	ldr	r1, [pc, #164]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d007      	beq.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 80076c8:	3302      	adds	r3, #2
 80076ca:	e005      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	d143      	bne.n	8007758 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 80076d0:	4925      	ldr	r1, [pc, #148]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076d2:	428b      	cmp	r3, r1
 80076d4:	d042      	beq.n	800775c <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 80076d6:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <EE_VerifyPageFullWriteVariable+0xc4>)
 80076da:	189c      	adds	r4, r3, r2
 80076dc:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80076de:	02db      	lsls	r3, r3, #11
 80076e0:	4a23      	ldr	r2, [pc, #140]	; (8007770 <EE_VerifyPageFullWriteVariable+0xc8>)
 80076e2:	4694      	mov	ip, r2
 80076e4:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	3201      	adds	r2, #1
 80076ea:	d005      	beq.n	80076f8 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80076ec:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d22e      	bcs.n	8007750 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	3201      	adds	r2, #1
 80076f6:	d1f9      	bne.n	80076ec <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80076f8:	002a      	movs	r2, r5
 80076fa:	2300      	movs	r3, #0
 80076fc:	0021      	movs	r1, r4
 80076fe:	2001      	movs	r0, #1
 8007700:	f009 fa8c 	bl	8010c1c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007704:	481b      	ldr	r0, [pc, #108]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007706:	f009 fa5b 	bl	8010bc0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800770a:	2800      	cmp	r0, #0
 800770c:	d003      	beq.n	8007716 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007710:	69d8      	ldr	r0, [r3, #28]
 8007712:	b280      	uxth	r0, r0
 8007714:	e01f      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007716:	4a19      	ldr	r2, [pc, #100]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007718:	6913      	ldr	r3, [r2, #16]
 800771a:	2101      	movs	r1, #1
 800771c:	438b      	bics	r3, r1
 800771e:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007720:	1ca1      	adds	r1, r4, #2
 8007722:	0032      	movs	r2, r6
 8007724:	2300      	movs	r3, #0
 8007726:	2001      	movs	r0, #1
 8007728:	f009 fa78 	bl	8010c1c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800772c:	4811      	ldr	r0, [pc, #68]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 800772e:	f009 fa47 	bl	8010bc0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007732:	2800      	cmp	r0, #0
 8007734:	d003      	beq.n	800773e <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007738:	69d8      	ldr	r0, [r3, #28]
 800773a:	b280      	uxth	r0, r0
 800773c:	e00b      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007740:	6913      	ldr	r3, [r2, #16]
 8007742:	2101      	movs	r1, #1
 8007744:	438b      	bics	r3, r1
 8007746:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 800774a:	69d8      	ldr	r0, [r3, #28]
 800774c:	b280      	uxth	r0, r0
 800774e:	e002      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 8007750:	f009 fa2c 	bl	8010bac <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007754:	2080      	movs	r0, #128	; 0x80
}
 8007756:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 8007758:	20ab      	movs	r0, #171	; 0xab
 800775a:	e7fc      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800775c:	2302      	movs	r3, #2
 800775e:	e7bb      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
 8007760:	0801e000 	.word	0x0801e000
 8007764:	0801f000 	.word	0x0801f000
 8007768:	0000eeee 	.word	0x0000eeee
 800776c:	0001003c 	.word	0x0001003c
 8007770:	0801effe 	.word	0x0801effe
 8007774:	0000c350 	.word	0x0000c350
 8007778:	20006f10 	.word	0x20006f10
 800777c:	40022000 	.word	0x40022000

08007780 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007780:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <EE_ReadVariable+0x50>)
 8007784:	881c      	ldrh	r4, [r3, #0]
 8007786:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007788:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <EE_ReadVariable+0x54>)
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800778e:	2c00      	cmp	r4, #0
 8007790:	d006      	beq.n	80077a0 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 8007796:	20ab      	movs	r0, #171	; 0xab
 8007798:	e019      	b.n	80077ce <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800779a:	2001      	movs	r0, #1
 800779c:	e017      	b.n	80077ce <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800779e:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80077a0:	02e3      	lsls	r3, r4, #11
 80077a2:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <EE_ReadVariable+0x58>)
 80077a4:	4694      	mov	ip, r2
 80077a6:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80077a8:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 80077aa:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <EE_ReadVariable+0x5c>)
 80077ac:	4694      	mov	ip, r2
 80077ae:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077b4:	4290      	cmp	r0, r2
 80077b6:	d006      	beq.n	80077c6 <EE_ReadVariable+0x46>
			Address =Address - 4;
 80077b8:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d9ed      	bls.n	800779a <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 80077be:	881a      	ldrh	r2, [r3, #0]
 80077c0:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077c2:	4282      	cmp	r2, r0
 80077c4:	d1f8      	bne.n	80077b8 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 80077c6:	3b02      	subs	r3, #2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 80077cc:	2000      	movs	r0, #0
}
 80077ce:	bd10      	pop	{r4, pc}
 80077d0:	0801e000 	.word	0x0801e000
 80077d4:	0801f000 	.word	0x0801f000
 80077d8:	0801effe 	.word	0x0801effe
 80077dc:	0801e002 	.word	0x0801e002

080077e0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	46de      	mov	lr, fp
 80077e4:	4647      	mov	r7, r8
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b083      	sub	sp, #12
 80077ea:	0005      	movs	r5, r0
 80077ec:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 80077ee:	f009 f9cb 	bl	8010b88 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80077f2:	0031      	movs	r1, r6
 80077f4:	0028      	movs	r0, r5
 80077f6:	f7ff ff57 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 80077fa:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 80077fc:	2880      	cmp	r0, #128	; 0x80
 80077fe:	d007      	beq.n	8007810 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007800:	f009 f9d4 	bl	8010bac <HAL_FLASH_Lock>
}
 8007804:	0020      	movs	r0, r4
 8007806:	b003      	add	sp, #12
 8007808:	bc0c      	pop	{r2, r3}
 800780a:	4690      	mov	r8, r2
 800780c:	469b      	mov	fp, r3
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007810:	f009 f9ba 	bl	8010b88 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007814:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <EE_WriteVariable+0x130>)
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800781a:	4a3e      	ldr	r2, [pc, #248]	; (8007914 <EE_WriteVariable+0x134>)
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007824:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1ea      	bne.n	8007800 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800782a:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <EE_WriteVariable+0x134>)
 800782c:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800782e:	4b38      	ldr	r3, [pc, #224]	; (8007910 <EE_WriteVariable+0x130>)
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	e003      	b.n	800783c <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <EE_WriteVariable+0x130>)
 8007836:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007838:	4b36      	ldr	r3, [pc, #216]	; (8007914 <EE_WriteVariable+0x134>)
 800783a:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800783c:	4a36      	ldr	r2, [pc, #216]	; (8007918 <EE_WriteVariable+0x138>)
 800783e:	2300      	movs	r3, #0
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	2001      	movs	r0, #1
 8007844:	f009 f9ea 	bl	8010c1c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007848:	4834      	ldr	r0, [pc, #208]	; (800791c <EE_WriteVariable+0x13c>)
 800784a:	f009 f9b9 	bl	8010bc0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800784e:	2800      	cmp	r0, #0
 8007850:	d003      	beq.n	800785a <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <EE_WriteVariable+0x140>)
 8007854:	69dc      	ldr	r4, [r3, #28]
 8007856:	b2a4      	uxth	r4, r4
 8007858:	e7d2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <EE_WriteVariable+0x144>)
 800785c:	6913      	ldr	r3, [r2, #16]
 800785e:	2101      	movs	r1, #1
 8007860:	438b      	bics	r3, r1
 8007862:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007864:	0031      	movs	r1, r6
 8007866:	0028      	movs	r0, r5
 8007868:	f7ff ff1e 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800786c:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800786e:	d1c7      	bne.n	8007800 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007870:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007872:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <EE_WriteVariable+0x148>)
 8007874:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007876:	4e2d      	ldr	r6, [pc, #180]	; (800792c <EE_WriteVariable+0x14c>)
 8007878:	e003      	b.n	8007882 <EE_WriteVariable+0xa2>
 800787a:	3701      	adds	r7, #1
 800787c:	b2bf      	uxth	r7, r7
 800787e:	42b7      	cmp	r7, r6
 8007880:	d00f      	beq.n	80078a2 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007882:	42bd      	cmp	r5, r7
 8007884:	d0f9      	beq.n	800787a <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007886:	4928      	ldr	r1, [pc, #160]	; (8007928 <EE_WriteVariable+0x148>)
 8007888:	0038      	movs	r0, r7
 800788a:	f7ff ff79 	bl	8007780 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800788e:	2801      	cmp	r0, #1
 8007890:	d0f3      	beq.n	800787a <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007892:	4643      	mov	r3, r8
 8007894:	8819      	ldrh	r1, [r3, #0]
 8007896:	0038      	movs	r0, r7
 8007898:	f7ff ff06 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800789c:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800789e:	d0ec      	beq.n	800787a <EE_WriteVariable+0x9a>
 80078a0:	e7ae      	b.n	8007800 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 80078a2:	4658      	mov	r0, fp
 80078a4:	f009 fa32 	bl	8010d0c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078a8:	481c      	ldr	r0, [pc, #112]	; (800791c <EE_WriteVariable+0x13c>)
 80078aa:	f009 f989 	bl	8010bc0 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d003      	beq.n	80078ba <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <EE_WriteVariable+0x140>)
 80078b4:	69dc      	ldr	r4, [r3, #28]
 80078b6:	b2a4      	uxth	r4, r4
 80078b8:	e7a2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80078ba:	2080      	movs	r0, #128	; 0x80
 80078bc:	0100      	lsls	r0, r0, #4
 80078be:	4458      	add	r0, fp
 80078c0:	f009 fa24 	bl	8010d0c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078c4:	4815      	ldr	r0, [pc, #84]	; (800791c <EE_WriteVariable+0x13c>)
 80078c6:	f009 f97b 	bl	8010bc0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d003      	beq.n	80078d6 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <EE_WriteVariable+0x140>)
 80078d0:	69dc      	ldr	r4, [r3, #28]
 80078d2:	b2a4      	uxth	r4, r4
 80078d4:	e794      	b.n	8007800 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <EE_WriteVariable+0x144>)
 80078d8:	6913      	ldr	r3, [r2, #16]
 80078da:	2102      	movs	r1, #2
 80078dc:	438b      	bics	r3, r1
 80078de:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	2001      	movs	r0, #1
 80078e8:	f009 f998 	bl	8010c1c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078ec:	480b      	ldr	r0, [pc, #44]	; (800791c <EE_WriteVariable+0x13c>)
 80078ee:	f009 f967 	bl	8010bc0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d003      	beq.n	80078fe <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <EE_WriteVariable+0x140>)
 80078f8:	69dc      	ldr	r4, [r3, #28]
 80078fa:	b2a4      	uxth	r4, r4
 80078fc:	e780      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <EE_WriteVariable+0x144>)
 8007900:	6913      	ldr	r3, [r2, #16]
 8007902:	2101      	movs	r1, #1
 8007904:	438b      	bics	r3, r1
 8007906:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007908:	f009 f950 	bl	8010bac <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800790c:	2400      	movs	r4, #0
 800790e:	e777      	b.n	8007800 <EE_WriteVariable+0x20>
 8007910:	0801e000 	.word	0x0801e000
 8007914:	0801f000 	.word	0x0801f000
 8007918:	0000eeee 	.word	0x0000eeee
 800791c:	0000c350 	.word	0x0000c350
 8007920:	20006f10 	.word	0x20006f10
 8007924:	40022000 	.word	0x40022000
 8007928:	200014d8 	.word	0x200014d8
 800792c:	00000401 	.word	0x00000401

08007930 <EE_Format>:
uint16_t EE_Format(void){
 8007930:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007932:	f009 f929 	bl	8010b88 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007936:	4829      	ldr	r0, [pc, #164]	; (80079dc <EE_Format+0xac>)
 8007938:	f009 f9e8 	bl	8010d0c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800793c:	4828      	ldr	r0, [pc, #160]	; (80079e0 <EE_Format+0xb0>)
 800793e:	f009 f93f 	bl	8010bc0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007942:	2800      	cmp	r0, #0
 8007944:	d003      	beq.n	800794e <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <EE_Format+0xb4>)
 8007948:	69d8      	ldr	r0, [r3, #28]
 800794a:	b280      	uxth	r0, r0
}
 800794c:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800794e:	4826      	ldr	r0, [pc, #152]	; (80079e8 <EE_Format+0xb8>)
 8007950:	f009 f9dc 	bl	8010d0c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007954:	4822      	ldr	r0, [pc, #136]	; (80079e0 <EE_Format+0xb0>)
 8007956:	f009 f933 	bl	8010bc0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800795a:	2800      	cmp	r0, #0
 800795c:	d003      	beq.n	8007966 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800795e:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <EE_Format+0xb4>)
 8007960:	69d8      	ldr	r0, [r3, #28]
 8007962:	b280      	uxth	r0, r0
 8007964:	e7f2      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007966:	4a21      	ldr	r2, [pc, #132]	; (80079ec <EE_Format+0xbc>)
 8007968:	6913      	ldr	r3, [r2, #16]
 800796a:	2102      	movs	r1, #2
 800796c:	438b      	bics	r3, r1
 800796e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4919      	ldr	r1, [pc, #100]	; (80079dc <EE_Format+0xac>)
 8007976:	2001      	movs	r0, #1
 8007978:	f009 f950 	bl	8010c1c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800797c:	4818      	ldr	r0, [pc, #96]	; (80079e0 <EE_Format+0xb0>)
 800797e:	f009 f91f 	bl	8010bc0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007982:	2800      	cmp	r0, #0
 8007984:	d003      	beq.n	800798e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007986:	4b17      	ldr	r3, [pc, #92]	; (80079e4 <EE_Format+0xb4>)
 8007988:	69d8      	ldr	r0, [r3, #28]
 800798a:	b280      	uxth	r0, r0
 800798c:	e7de      	b.n	800794c <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <EE_Format+0xbc>)
 8007990:	6913      	ldr	r3, [r2, #16]
 8007992:	2101      	movs	r1, #1
 8007994:	438b      	bics	r3, r1
 8007996:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007998:	4815      	ldr	r0, [pc, #84]	; (80079f0 <EE_Format+0xc0>)
 800799a:	f009 f9b7 	bl	8010d0c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <EE_Format+0xb0>)
 80079a0:	f009 f90e 	bl	8010bc0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d003      	beq.n	80079b0 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <EE_Format+0xb4>)
 80079aa:	69d8      	ldr	r0, [r3, #28]
 80079ac:	b280      	uxth	r0, r0
 80079ae:	e7cd      	b.n	800794c <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80079b0:	4810      	ldr	r0, [pc, #64]	; (80079f4 <EE_Format+0xc4>)
 80079b2:	f009 f9ab 	bl	8010d0c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079b6:	480a      	ldr	r0, [pc, #40]	; (80079e0 <EE_Format+0xb0>)
 80079b8:	f009 f902 	bl	8010bc0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079bc:	2800      	cmp	r0, #0
 80079be:	d003      	beq.n	80079c8 <EE_Format+0x98>
			return pFlash.ErrorCode;
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <EE_Format+0xb4>)
 80079c2:	69d8      	ldr	r0, [r3, #28]
 80079c4:	b280      	uxth	r0, r0
 80079c6:	e7c1      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <EE_Format+0xbc>)
 80079ca:	6913      	ldr	r3, [r2, #16]
 80079cc:	2101      	movs	r1, #1
 80079ce:	438b      	bics	r3, r1
 80079d0:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80079d2:	f009 f8eb 	bl	8010bac <HAL_FLASH_Lock>
	return FlashStatus;
 80079d6:	2000      	movs	r0, #0
 80079d8:	e7b8      	b.n	800794c <EE_Format+0x1c>
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	0801e000 	.word	0x0801e000
 80079e0:	0000c350 	.word	0x0000c350
 80079e4:	20006f10 	.word	0x20006f10
 80079e8:	0801e800 	.word	0x0801e800
 80079ec:	40022000 	.word	0x40022000
 80079f0:	0801f000 	.word	0x0801f000
 80079f4:	0801f800 	.word	0x0801f800

080079f8 <EE_Init>:
uint16_t EE_Init(void){
 80079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fa:	46c6      	mov	lr, r8
 80079fc:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 80079fe:	f009 f8c3 	bl	8010b88 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a02:	4bbe      	ldr	r3, [pc, #760]	; (8007cfc <EE_Init+0x304>)
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a08:	4abd      	ldr	r2, [pc, #756]	; (8007d00 <EE_Init+0x308>)
 8007a0a:	8812      	ldrh	r2, [r2, #0]
 8007a0c:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a0e:	49bd      	ldr	r1, [pc, #756]	; (8007d04 <EE_Init+0x30c>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	d100      	bne.n	8007a16 <EE_Init+0x1e>
 8007a14:	e074      	b.n	8007b00 <EE_Init+0x108>
 8007a16:	49bc      	ldr	r1, [pc, #752]	; (8007d08 <EE_Init+0x310>)
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	d011      	beq.n	8007a40 <EE_Init+0x48>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d100      	bne.n	8007a22 <EE_Init+0x2a>
 8007a20:	e109      	b.n	8007c36 <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007a22:	f7ff ff85 	bl	8007930 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a26:	48b9      	ldr	r0, [pc, #740]	; (8007d0c <EE_Init+0x314>)
 8007a28:	f009 f8ca 	bl	8010bc0 <FLASH_WaitForLastOperation>
 8007a2c:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d102      	bne.n	8007a38 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a32:	f009 f8bb 	bl	8010bac <HAL_FLASH_Lock>
	return HAL_OK;
 8007a36:	2600      	movs	r6, #0
}
 8007a38:	0030      	movs	r0, r6
 8007a3a:	bc04      	pop	{r2}
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d00d      	beq.n	8007a60 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a44:	4baf      	ldr	r3, [pc, #700]	; (8007d04 <EE_Init+0x30c>)
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d028      	beq.n	8007a9c <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007a4a:	f7ff ff71 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a4e:	48af      	ldr	r0, [pc, #700]	; (8007d0c <EE_Init+0x314>)
 8007a50:	f009 f8b6 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0ec      	beq.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007a58:	4bad      	ldr	r3, [pc, #692]	; (8007d10 <EE_Init+0x318>)
 8007a5a:	69de      	ldr	r6, [r3, #28]
 8007a5c:	b2b6      	uxth	r6, r6
 8007a5e:	e7eb      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a60:	48a6      	ldr	r0, [pc, #664]	; (8007cfc <EE_Init+0x304>)
 8007a62:	f009 f953 	bl	8010d0c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a66:	48a9      	ldr	r0, [pc, #676]	; (8007d0c <EE_Init+0x314>)
 8007a68:	f009 f8aa 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d003      	beq.n	8007a78 <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007a70:	4ba7      	ldr	r3, [pc, #668]	; (8007d10 <EE_Init+0x318>)
 8007a72:	69de      	ldr	r6, [r3, #28]
 8007a74:	b2b6      	uxth	r6, r6
 8007a76:	e7df      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007a78:	48a6      	ldr	r0, [pc, #664]	; (8007d14 <EE_Init+0x31c>)
 8007a7a:	f009 f947 	bl	8010d0c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a7e:	48a3      	ldr	r0, [pc, #652]	; (8007d0c <EE_Init+0x314>)
 8007a80:	f009 f89e 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d105      	bne.n	8007a94 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a88:	4aa3      	ldr	r2, [pc, #652]	; (8007d18 <EE_Init+0x320>)
 8007a8a:	6913      	ldr	r3, [r2, #16]
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	438b      	bics	r3, r1
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	e7ce      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007a94:	4b9e      	ldr	r3, [pc, #632]	; (8007d10 <EE_Init+0x318>)
 8007a96:	69de      	ldr	r6, [r3, #28]
 8007a98:	b2b6      	uxth	r6, r6
 8007a9a:	e7cd      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a9c:	4897      	ldr	r0, [pc, #604]	; (8007cfc <EE_Init+0x304>)
 8007a9e:	f009 f935 	bl	8010d0c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa2:	489a      	ldr	r0, [pc, #616]	; (8007d0c <EE_Init+0x314>)
 8007aa4:	f009 f88c 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d003      	beq.n	8007ab4 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007aac:	4b98      	ldr	r3, [pc, #608]	; (8007d10 <EE_Init+0x318>)
 8007aae:	69de      	ldr	r6, [r3, #28]
 8007ab0:	b2b6      	uxth	r6, r6
 8007ab2:	e7c1      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ab4:	4897      	ldr	r0, [pc, #604]	; (8007d14 <EE_Init+0x31c>)
 8007ab6:	f009 f929 	bl	8010d0c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aba:	4894      	ldr	r0, [pc, #592]	; (8007d0c <EE_Init+0x314>)
 8007abc:	f009 f880 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d003      	beq.n	8007acc <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007ac4:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <EE_Init+0x318>)
 8007ac6:	69de      	ldr	r6, [r3, #28]
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	e7b5      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007acc:	4a92      	ldr	r2, [pc, #584]	; (8007d18 <EE_Init+0x320>)
 8007ace:	6913      	ldr	r3, [r2, #16]
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	438b      	bics	r3, r1
 8007ad4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4989      	ldr	r1, [pc, #548]	; (8007d00 <EE_Init+0x308>)
 8007adc:	2001      	movs	r0, #1
 8007ade:	f009 f89d 	bl	8010c1c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ae2:	488a      	ldr	r0, [pc, #552]	; (8007d0c <EE_Init+0x314>)
 8007ae4:	f009 f86c 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d105      	bne.n	8007af8 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007aec:	4a8a      	ldr	r2, [pc, #552]	; (8007d18 <EE_Init+0x320>)
 8007aee:	6913      	ldr	r3, [r2, #16]
 8007af0:	2101      	movs	r1, #1
 8007af2:	438b      	bics	r3, r1
 8007af4:	6113      	str	r3, [r2, #16]
 8007af6:	e79c      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007af8:	4b85      	ldr	r3, [pc, #532]	; (8007d10 <EE_Init+0x318>)
 8007afa:	69de      	ldr	r6, [r3, #28]
 8007afc:	b2b6      	uxth	r6, r6
 8007afe:	e79b      	b.n	8007a38 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d157      	bne.n	8007bb4 <EE_Init+0x1bc>
 8007b04:	2401      	movs	r4, #1
	int16_t x =-1;
 8007b06:	2701      	movs	r7, #1
 8007b08:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b0a:	4d84      	ldr	r5, [pc, #528]	; (8007d1c <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b0c:	4b84      	ldr	r3, [pc, #528]	; (8007d20 <EE_Init+0x328>)
 8007b0e:	4698      	mov	r8, r3
 8007b10:	e005      	b.n	8007b1e <EE_Init+0x126>
						x =VarIdx;
 8007b12:	b227      	sxth	r7, r4
 8007b14:	e008      	b.n	8007b28 <EE_Init+0x130>
 8007b16:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b18:	4b82      	ldr	r3, [pc, #520]	; (8007d24 <EE_Init+0x32c>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d018      	beq.n	8007b50 <EE_Init+0x158>
 8007b1e:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b20:	882b      	ldrh	r3, [r5, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	d0f4      	beq.n	8007b12 <EE_Init+0x11a>
					if(VarIdx != x){
 8007b28:	42bc      	cmp	r4, r7
 8007b2a:	d0f4      	beq.n	8007b16 <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b2c:	497c      	ldr	r1, [pc, #496]	; (8007d20 <EE_Init+0x328>)
 8007b2e:	0030      	movs	r0, r6
 8007b30:	f7ff fe26 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b34:	2801      	cmp	r0, #1
 8007b36:	d0ee      	beq.n	8007b16 <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b38:	4643      	mov	r3, r8
 8007b3a:	8819      	ldrh	r1, [r3, #0]
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	f7ff fdb3 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007b42:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b44:	4871      	ldr	r0, [pc, #452]	; (8007d0c <EE_Init+0x314>)
 8007b46:	f009 f83b 	bl	8010bc0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0e3      	beq.n	8007b16 <EE_Init+0x11e>
 8007b4e:	e773      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4969      	ldr	r1, [pc, #420]	; (8007cfc <EE_Init+0x304>)
 8007b56:	2001      	movs	r0, #1
 8007b58:	f009 f860 	bl	8010c1c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	486b      	ldr	r0, [pc, #428]	; (8007d0c <EE_Init+0x314>)
 8007b5e:	f009 f82f 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d003      	beq.n	8007b6e <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007b66:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <EE_Init+0x318>)
 8007b68:	69de      	ldr	r6, [r3, #28]
 8007b6a:	b2b6      	uxth	r6, r6
 8007b6c:	e764      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b6e:	4a6a      	ldr	r2, [pc, #424]	; (8007d18 <EE_Init+0x320>)
 8007b70:	6913      	ldr	r3, [r2, #16]
 8007b72:	2101      	movs	r1, #1
 8007b74:	438b      	bics	r3, r1
 8007b76:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007b78:	4861      	ldr	r0, [pc, #388]	; (8007d00 <EE_Init+0x308>)
 8007b7a:	f009 f8c7 	bl	8010d0c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b7e:	4863      	ldr	r0, [pc, #396]	; (8007d0c <EE_Init+0x314>)
 8007b80:	f009 f81e 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d003      	beq.n	8007b90 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007b88:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <EE_Init+0x318>)
 8007b8a:	69de      	ldr	r6, [r3, #28]
 8007b8c:	b2b6      	uxth	r6, r6
 8007b8e:	e753      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007b90:	4865      	ldr	r0, [pc, #404]	; (8007d28 <EE_Init+0x330>)
 8007b92:	f009 f8bb 	bl	8010d0c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b96:	485d      	ldr	r0, [pc, #372]	; (8007d0c <EE_Init+0x314>)
 8007b98:	f009 f812 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d105      	bne.n	8007bac <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ba0:	4a5d      	ldr	r2, [pc, #372]	; (8007d18 <EE_Init+0x320>)
 8007ba2:	6913      	ldr	r3, [r2, #16]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	438b      	bics	r3, r1
 8007ba8:	6113      	str	r3, [r2, #16]
 8007baa:	e742      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007bac:	4b58      	ldr	r3, [pc, #352]	; (8007d10 <EE_Init+0x318>)
 8007bae:	69de      	ldr	r6, [r3, #28]
 8007bb0:	b2b6      	uxth	r6, r6
 8007bb2:	e741      	b.n	8007a38 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bb4:	4b54      	ldr	r3, [pc, #336]	; (8007d08 <EE_Init+0x310>)
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00b      	beq.n	8007bd2 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007bba:	f7ff feb9 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bbe:	4853      	ldr	r0, [pc, #332]	; (8007d0c <EE_Init+0x314>)
 8007bc0:	f008 fffe 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d100      	bne.n	8007bca <EE_Init+0x1d2>
 8007bc8:	e733      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007bca:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <EE_Init+0x318>)
 8007bcc:	69de      	ldr	r6, [r3, #28]
 8007bce:	b2b6      	uxth	r6, r6
 8007bd0:	e732      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd2:	484b      	ldr	r0, [pc, #300]	; (8007d00 <EE_Init+0x308>)
 8007bd4:	f009 f89a 	bl	8010d0c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd8:	484c      	ldr	r0, [pc, #304]	; (8007d0c <EE_Init+0x314>)
 8007bda:	f008 fff1 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d003      	beq.n	8007bea <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007be2:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <EE_Init+0x318>)
 8007be4:	69de      	ldr	r6, [r3, #28]
 8007be6:	b2b6      	uxth	r6, r6
 8007be8:	e726      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bea:	484f      	ldr	r0, [pc, #316]	; (8007d28 <EE_Init+0x330>)
 8007bec:	f009 f88e 	bl	8010d0c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bf0:	4846      	ldr	r0, [pc, #280]	; (8007d0c <EE_Init+0x314>)
 8007bf2:	f008 ffe5 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d003      	beq.n	8007c02 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <EE_Init+0x318>)
 8007bfc:	69de      	ldr	r6, [r3, #28]
 8007bfe:	b2b6      	uxth	r6, r6
 8007c00:	e71a      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c02:	4a45      	ldr	r2, [pc, #276]	; (8007d18 <EE_Init+0x320>)
 8007c04:	6913      	ldr	r3, [r2, #16]
 8007c06:	2102      	movs	r1, #2
 8007c08:	438b      	bics	r3, r1
 8007c0a:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	493a      	ldr	r1, [pc, #232]	; (8007cfc <EE_Init+0x304>)
 8007c12:	2001      	movs	r0, #1
 8007c14:	f009 f802 	bl	8010c1c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c18:	483c      	ldr	r0, [pc, #240]	; (8007d0c <EE_Init+0x314>)
 8007c1a:	f008 ffd1 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d003      	beq.n	8007c2a <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007c22:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <EE_Init+0x318>)
 8007c24:	69de      	ldr	r6, [r3, #28]
 8007c26:	b2b6      	uxth	r6, r6
 8007c28:	e706      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	; (8007d18 <EE_Init+0x320>)
 8007c2c:	6913      	ldr	r3, [r2, #16]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	438b      	bics	r3, r1
 8007c32:	6113      	str	r3, [r2, #16]
 8007c34:	e6fd      	b.n	8007a32 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	d009      	beq.n	8007c4e <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c3a:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <EE_Init+0x310>)
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d010      	beq.n	8007c62 <EE_Init+0x26a>
 8007c40:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c42:	2701      	movs	r7, #1
 8007c44:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007c46:	4d39      	ldr	r5, [pc, #228]	; (8007d2c <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c48:	4b35      	ldr	r3, [pc, #212]	; (8007d20 <EE_Init+0x328>)
 8007c4a:	4698      	mov	r8, r3
 8007c4c:	e02d      	b.n	8007caa <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007c4e:	f7ff fe6f 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c52:	482e      	ldr	r0, [pc, #184]	; (8007d0c <EE_Init+0x314>)
 8007c54:	f008 ffb4 	bl	8010bc0 <FLASH_WaitForLastOperation>
 8007c58:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d100      	bne.n	8007c60 <EE_Init+0x268>
 8007c5e:	e6e8      	b.n	8007a32 <EE_Init+0x3a>
 8007c60:	e6ea      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c62:	4827      	ldr	r0, [pc, #156]	; (8007d00 <EE_Init+0x308>)
 8007c64:	f009 f852 	bl	8010d0c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c68:	4828      	ldr	r0, [pc, #160]	; (8007d0c <EE_Init+0x314>)
 8007c6a:	f008 ffa9 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d003      	beq.n	8007c7a <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <EE_Init+0x318>)
 8007c74:	69de      	ldr	r6, [r3, #28]
 8007c76:	b2b6      	uxth	r6, r6
 8007c78:	e6de      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c7a:	482b      	ldr	r0, [pc, #172]	; (8007d28 <EE_Init+0x330>)
 8007c7c:	f009 f846 	bl	8010d0c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c80:	4822      	ldr	r0, [pc, #136]	; (8007d0c <EE_Init+0x314>)
 8007c82:	f008 ff9d 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d105      	bne.n	8007c96 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <EE_Init+0x320>)
 8007c8c:	6913      	ldr	r3, [r2, #16]
 8007c8e:	2102      	movs	r1, #2
 8007c90:	438b      	bics	r3, r1
 8007c92:	6113      	str	r3, [r2, #16]
 8007c94:	e6cd      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <EE_Init+0x318>)
 8007c98:	69de      	ldr	r6, [r3, #28]
 8007c9a:	b2b6      	uxth	r6, r6
 8007c9c:	e6cc      	b.n	8007a38 <EE_Init+0x40>
						x =VarIdx;
 8007c9e:	b227      	sxth	r7, r4
 8007ca0:	e008      	b.n	8007cb4 <EE_Init+0x2bc>
 8007ca2:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <EE_Init+0x32c>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d018      	beq.n	8007cdc <EE_Init+0x2e4>
 8007caa:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007cac:	882b      	ldrh	r3, [r5, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	42b3      	cmp	r3, r6
 8007cb2:	d0f4      	beq.n	8007c9e <EE_Init+0x2a6>
					if(VarIdx != x){
 8007cb4:	42bc      	cmp	r4, r7
 8007cb6:	d0f4      	beq.n	8007ca2 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007cb8:	4919      	ldr	r1, [pc, #100]	; (8007d20 <EE_Init+0x328>)
 8007cba:	0030      	movs	r0, r6
 8007cbc:	f7ff fd60 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d0ee      	beq.n	8007ca2 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	8819      	ldrh	r1, [r3, #0]
 8007cc8:	0030      	movs	r0, r6
 8007cca:	f7ff fced 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007cce:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd0:	480e      	ldr	r0, [pc, #56]	; (8007d0c <EE_Init+0x314>)
 8007cd2:	f008 ff75 	bl	8010bc0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0e3      	beq.n	8007ca2 <EE_Init+0x2aa>
 8007cda:	e6ad      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4907      	ldr	r1, [pc, #28]	; (8007d00 <EE_Init+0x308>)
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	f008 ff9a 	bl	8010c1c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce8:	4808      	ldr	r0, [pc, #32]	; (8007d0c <EE_Init+0x314>)
 8007cea:	f008 ff69 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d01e      	beq.n	8007d30 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <EE_Init+0x318>)
 8007cf4:	69de      	ldr	r6, [r3, #28]
 8007cf6:	b2b6      	uxth	r6, r6
 8007cf8:	e69e      	b.n	8007a38 <EE_Init+0x40>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	0801e000 	.word	0x0801e000
 8007d00:	0801f000 	.word	0x0801f000
 8007d04:	0000eeee 	.word	0x0000eeee
 8007d08:	0000ffff 	.word	0x0000ffff
 8007d0c:	0000c350 	.word	0x0000c350
 8007d10:	20006f10 	.word	0x20006f10
 8007d14:	0801e800 	.word	0x0801e800
 8007d18:	40022000 	.word	0x40022000
 8007d1c:	0801e006 	.word	0x0801e006
 8007d20:	200014d8 	.word	0x200014d8
 8007d24:	00000401 	.word	0x00000401
 8007d28:	0801f800 	.word	0x0801f800
 8007d2c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d30:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <EE_Init+0x380>)
 8007d32:	6913      	ldr	r3, [r2, #16]
 8007d34:	2101      	movs	r1, #1
 8007d36:	438b      	bics	r3, r1
 8007d38:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d3a:	4810      	ldr	r0, [pc, #64]	; (8007d7c <EE_Init+0x384>)
 8007d3c:	f008 ffe6 	bl	8010d0c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d40:	480f      	ldr	r0, [pc, #60]	; (8007d80 <EE_Init+0x388>)
 8007d42:	f008 ff3d 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d003      	beq.n	8007d52 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <EE_Init+0x38c>)
 8007d4c:	69de      	ldr	r6, [r3, #28]
 8007d4e:	b2b6      	uxth	r6, r6
 8007d50:	e672      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <EE_Init+0x390>)
 8007d54:	f008 ffda 	bl	8010d0c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <EE_Init+0x388>)
 8007d5a:	f008 ff31 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d105      	bne.n	8007d6e <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <EE_Init+0x380>)
 8007d64:	6913      	ldr	r3, [r2, #16]
 8007d66:	2102      	movs	r1, #2
 8007d68:	438b      	bics	r3, r1
 8007d6a:	6113      	str	r3, [r2, #16]
 8007d6c:	e661      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <EE_Init+0x38c>)
 8007d70:	69de      	ldr	r6, [r3, #28]
 8007d72:	b2b6      	uxth	r6, r6
 8007d74:	e660      	b.n	8007a38 <EE_Init+0x40>
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	40022000 	.word	0x40022000
 8007d7c:	0801e000 	.word	0x0801e000
 8007d80:	0000c350 	.word	0x0000c350
 8007d84:	20006f10 	.word	0x20006f10
 8007d88:	0801e800 	.word	0x0801e800

08007d8c <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8007d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8e:	46c6      	mov	lr, r8
 8007d90:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8007d92:	4c29      	ldr	r4, [pc, #164]	; (8007e38 <StartDefaultTask+0xac>)
				indMode =IND_OFF;
				break;
				
			case IND_TOPOLOGY:
				RTOS_IND_blink(100);
				indMode =IND_OFF;
 8007d94:	46a0      	mov	r8, r4
				break;
				
			case IND_SHORT_BLINK:
				RTOS_IND_blink(30);
				indMode =IND_OFF;
 8007d96:	0027      	movs	r7, r4
 8007d98:	e01f      	b.n	8007dda <StartDefaultTask+0x4e>
				RTOS_IND_blink(200);
 8007d9a:	2680      	movs	r6, #128	; 0x80
 8007d9c:	01f6      	lsls	r6, r6, #7
 8007d9e:	4d27      	ldr	r5, [pc, #156]	; (8007e3c <StartDefaultTask+0xb0>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	0031      	movs	r1, r6
 8007da4:	0028      	movs	r0, r5
 8007da6:	f009 f997 	bl	80110d8 <HAL_GPIO_WritePin>
 8007daa:	20c8      	movs	r0, #200	; 0xc8
 8007dac:	f005 fcff 	bl	800d7ae <osDelay>
 8007db0:	2200      	movs	r2, #0
 8007db2:	0031      	movs	r1, r6
 8007db4:	0028      	movs	r0, r5
 8007db6:	f009 f98f 	bl	80110d8 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <StartDefaultTask+0xac>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007dc0:	f000 ff06 	bl	8008bd0 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007dc4:	f7fd fb62 	bl	800548c <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <StartDefaultTask+0xb4>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <StartDefaultTask+0x4a>
			delayButtonStateReset = false;
 8007dd0:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <StartDefaultTask+0xb8>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8007dd6:	f007 fb97 	bl	800f508 <vPortYield>
		switch(indMode){
 8007dda:	7823      	ldrb	r3, [r4, #0]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d004      	beq.n	8007dea <StartDefaultTask+0x5e>
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d016      	beq.n	8007e12 <StartDefaultTask+0x86>
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d1eb      	bne.n	8007dc0 <StartDefaultTask+0x34>
 8007de8:	e7d7      	b.n	8007d9a <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007dea:	2680      	movs	r6, #128	; 0x80
 8007dec:	01f6      	lsls	r6, r6, #7
 8007dee:	4d13      	ldr	r5, [pc, #76]	; (8007e3c <StartDefaultTask+0xb0>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	0031      	movs	r1, r6
 8007df4:	0028      	movs	r0, r5
 8007df6:	f009 f96f 	bl	80110d8 <HAL_GPIO_WritePin>
 8007dfa:	2064      	movs	r0, #100	; 0x64
 8007dfc:	f005 fcd7 	bl	800d7ae <osDelay>
 8007e00:	2200      	movs	r2, #0
 8007e02:	0031      	movs	r1, r6
 8007e04:	0028      	movs	r0, r5
 8007e06:	f009 f967 	bl	80110d8 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	7013      	strb	r3, [r2, #0]
				break;
 8007e10:	e7d6      	b.n	8007dc0 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8007e12:	2680      	movs	r6, #128	; 0x80
 8007e14:	01f6      	lsls	r6, r6, #7
 8007e16:	4d09      	ldr	r5, [pc, #36]	; (8007e3c <StartDefaultTask+0xb0>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	0031      	movs	r1, r6
 8007e1c:	0028      	movs	r0, r5
 8007e1e:	f009 f95b 	bl	80110d8 <HAL_GPIO_WritePin>
 8007e22:	201e      	movs	r0, #30
 8007e24:	f005 fcc3 	bl	800d7ae <osDelay>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	0031      	movs	r1, r6
 8007e2c:	0028      	movs	r0, r5
 8007e2e:	f009 f953 	bl	80110d8 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e32:	2300      	movs	r3, #0
 8007e34:	703b      	strb	r3, [r7, #0]
				break;
 8007e36:	e7c3      	b.n	8007dc0 <StartDefaultTask+0x34>
 8007e38:	20000ef4 	.word	0x20000ef4
 8007e3c:	48000400 	.word	0x48000400
 8007e40:	20001568 	.word	0x20001568
 8007e44:	20001567 	.word	0x20001567

08007e48 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007e4c:	25a0      	movs	r5, #160	; 0xa0
 8007e4e:	006d      	lsls	r5, r5, #1
 8007e50:	2400      	movs	r4, #0
 8007e52:	9403      	str	r4, [sp, #12]
 8007e54:	9402      	str	r4, [sp, #8]
 8007e56:	4b5e      	ldr	r3, [pc, #376]	; (8007fd0 <MX_FREERTOS_Init+0x188>)
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	2603      	movs	r6, #3
 8007e5c:	9600      	str	r6, [sp, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	002a      	movs	r2, r5
 8007e62:	495c      	ldr	r1, [pc, #368]	; (8007fd4 <MX_FREERTOS_Init+0x18c>)
 8007e64:	485c      	ldr	r0, [pc, #368]	; (8007fd8 <MX_FREERTOS_Init+0x190>)
 8007e66:	f006 fa9d 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007e6a:	9403      	str	r4, [sp, #12]
 8007e6c:	9402      	str	r4, [sp, #8]
 8007e6e:	4b5b      	ldr	r3, [pc, #364]	; (8007fdc <MX_FREERTOS_Init+0x194>)
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	9600      	str	r6, [sp, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	002a      	movs	r2, r5
 8007e78:	4959      	ldr	r1, [pc, #356]	; (8007fe0 <MX_FREERTOS_Init+0x198>)
 8007e7a:	485a      	ldr	r0, [pc, #360]	; (8007fe4 <MX_FREERTOS_Init+0x19c>)
 8007e7c:	f006 fa92 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007e80:	9403      	str	r4, [sp, #12]
 8007e82:	9402      	str	r4, [sp, #8]
 8007e84:	4b58      	ldr	r3, [pc, #352]	; (8007fe8 <MX_FREERTOS_Init+0x1a0>)
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	9600      	str	r6, [sp, #0]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	002a      	movs	r2, r5
 8007e8e:	4957      	ldr	r1, [pc, #348]	; (8007fec <MX_FREERTOS_Init+0x1a4>)
 8007e90:	4857      	ldr	r0, [pc, #348]	; (8007ff0 <MX_FREERTOS_Init+0x1a8>)
 8007e92:	f006 fa87 	bl	800e3a4 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007e96:	f7ff fa6f 	bl	8007378 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007e9a:	9403      	str	r4, [sp, #12]
 8007e9c:	9402      	str	r4, [sp, #8]
 8007e9e:	4b55      	ldr	r3, [pc, #340]	; (8007ff4 <MX_FREERTOS_Init+0x1ac>)
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	9600      	str	r6, [sp, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	002a      	movs	r2, r5
 8007ea8:	4953      	ldr	r1, [pc, #332]	; (8007ff8 <MX_FREERTOS_Init+0x1b0>)
 8007eaa:	4854      	ldr	r0, [pc, #336]	; (8007ffc <MX_FREERTOS_Init+0x1b4>)
 8007eac:	f006 fa7a 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007eb0:	4d53      	ldr	r5, [pc, #332]	; (8008000 <MX_FREERTOS_Init+0x1b8>)
 8007eb2:	9403      	str	r4, [sp, #12]
 8007eb4:	9402      	str	r4, [sp, #8]
 8007eb6:	4b53      	ldr	r3, [pc, #332]	; (8008004 <MX_FREERTOS_Init+0x1bc>)
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	3601      	adds	r6, #1
 8007ebc:	9600      	str	r6, [sp, #0]
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	22a0      	movs	r2, #160	; 0xa0
 8007ec2:	4951      	ldr	r1, [pc, #324]	; (8008008 <MX_FREERTOS_Init+0x1c0>)
 8007ec4:	0028      	movs	r0, r5
 8007ec6:	f006 fa6d 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007eca:	9403      	str	r4, [sp, #12]
 8007ecc:	9402      	str	r4, [sp, #8]
 8007ece:	4b4f      	ldr	r3, [pc, #316]	; (800800c <MX_FREERTOS_Init+0x1c4>)
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	9600      	str	r6, [sp, #0]
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	22a0      	movs	r2, #160	; 0xa0
 8007ed8:	494d      	ldr	r1, [pc, #308]	; (8008010 <MX_FREERTOS_Init+0x1c8>)
 8007eda:	0028      	movs	r0, r5
 8007edc:	f006 fa62 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007ee0:	9403      	str	r4, [sp, #12]
 8007ee2:	9402      	str	r4, [sp, #8]
 8007ee4:	4b4b      	ldr	r3, [pc, #300]	; (8008014 <MX_FREERTOS_Init+0x1cc>)
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	9600      	str	r6, [sp, #0]
 8007eea:	2303      	movs	r3, #3
 8007eec:	22a0      	movs	r2, #160	; 0xa0
 8007eee:	494a      	ldr	r1, [pc, #296]	; (8008018 <MX_FREERTOS_Init+0x1d0>)
 8007ef0:	0028      	movs	r0, r5
 8007ef2:	f006 fa57 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007ef6:	9403      	str	r4, [sp, #12]
 8007ef8:	9402      	str	r4, [sp, #8]
 8007efa:	4b48      	ldr	r3, [pc, #288]	; (800801c <MX_FREERTOS_Init+0x1d4>)
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	9600      	str	r6, [sp, #0]
 8007f00:	2304      	movs	r3, #4
 8007f02:	22a0      	movs	r2, #160	; 0xa0
 8007f04:	4946      	ldr	r1, [pc, #280]	; (8008020 <MX_FREERTOS_Init+0x1d8>)
 8007f06:	0028      	movs	r0, r5
 8007f08:	f006 fa4c 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007f0c:	9403      	str	r4, [sp, #12]
 8007f0e:	9402      	str	r4, [sp, #8]
 8007f10:	4b44      	ldr	r3, [pc, #272]	; (8008024 <MX_FREERTOS_Init+0x1dc>)
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	9600      	str	r6, [sp, #0]
 8007f16:	2305      	movs	r3, #5
 8007f18:	22a0      	movs	r2, #160	; 0xa0
 8007f1a:	4943      	ldr	r1, [pc, #268]	; (8008028 <MX_FREERTOS_Init+0x1e0>)
 8007f1c:	0028      	movs	r0, r5
 8007f1e:	f006 fa41 	bl	800e3a4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",configMINIMAL_STACK_SIZE,(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007f22:	9403      	str	r4, [sp, #12]
 8007f24:	9402      	str	r4, [sp, #8]
 8007f26:	4b41      	ldr	r3, [pc, #260]	; (800802c <MX_FREERTOS_Init+0x1e4>)
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	9600      	str	r6, [sp, #0]
 8007f2c:	2306      	movs	r3, #6
 8007f2e:	22a0      	movs	r2, #160	; 0xa0
 8007f30:	493f      	ldr	r1, [pc, #252]	; (8008030 <MX_FREERTOS_Init+0x1e8>)
 8007f32:	0028      	movs	r0, r5
 8007f34:	f006 fa36 	bl	800e3a4 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 8007f38:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	a80f      	add	r0, sp, #60	; 0x3c
 8007f3e:	f005 fc3e 	bl	800d7be <osSemaphoreCreate>
 8007f42:	4e3c      	ldr	r6, [pc, #240]	; (8008034 <MX_FREERTOS_Init+0x1ec>)
 8007f44:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007f46:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007f48:	2101      	movs	r1, #1
 8007f4a:	a80e      	add	r0, sp, #56	; 0x38
 8007f4c:	f005 fc37 	bl	800d7be <osSemaphoreCreate>
 8007f50:	4d39      	ldr	r5, [pc, #228]	; (8008038 <MX_FREERTOS_Init+0x1f0>)
 8007f52:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 8007f54:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007f56:	2101      	movs	r1, #1
 8007f58:	a80d      	add	r0, sp, #52	; 0x34
 8007f5a:	f005 fc30 	bl	800d7be <osSemaphoreCreate>
 8007f5e:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007f60:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007f62:	2101      	movs	r1, #1
 8007f64:	a80c      	add	r0, sp, #48	; 0x30
 8007f66:	f005 fc2a 	bl	800d7be <osSemaphoreCreate>
 8007f6a:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 8007f6c:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007f6e:	2101      	movs	r1, #1
 8007f70:	a80b      	add	r0, sp, #44	; 0x2c
 8007f72:	f005 fc24 	bl	800d7be <osSemaphoreCreate>
 8007f76:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007f78:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	a80a      	add	r0, sp, #40	; 0x28
 8007f7e:	f005 fc1e 	bl	800d7be <osSemaphoreCreate>
 8007f82:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 8007f84:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007f86:	2101      	movs	r1, #1
 8007f88:	a809      	add	r0, sp, #36	; 0x24
 8007f8a:	f005 fc18 	bl	800d7be <osSemaphoreCreate>
 8007f8e:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007f90:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007f92:	2101      	movs	r1, #1
 8007f94:	a808      	add	r0, sp, #32
 8007f96:	f005 fc12 	bl	800d7be <osSemaphoreCreate>
 8007f9a:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 8007f9c:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	a807      	add	r0, sp, #28
 8007fa2:	f005 fc0c 	bl	800d7be <osSemaphoreCreate>
 8007fa6:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007fa8:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007faa:	2101      	movs	r1, #1
 8007fac:	a806      	add	r0, sp, #24
 8007fae:	f005 fc06 	bl	800d7be <osSemaphoreCreate>
 8007fb2:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11);
 8007fb4:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	a805      	add	r0, sp, #20
 8007fba:	f005 fc00 	bl	800d7be <osSemaphoreCreate>
 8007fbe:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007fc0:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	a804      	add	r0, sp, #16
 8007fc6:	f005 fbfa 	bl	800d7be <osSemaphoreCreate>
 8007fca:	61a8      	str	r0, [r5, #24]
}
 8007fcc:	b010      	add	sp, #64	; 0x40
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	200014fc 	.word	0x200014fc
 8007fd4:	0801a44c 	.word	0x0801a44c
 8007fd8:	08007d8d 	.word	0x08007d8d
 8007fdc:	200014dc 	.word	0x200014dc
 8007fe0:	0801a458 	.word	0x0801a458
 8007fe4:	080098a9 	.word	0x080098a9
 8007fe8:	200014f8 	.word	0x200014f8
 8007fec:	0801a464 	.word	0x0801a464
 8007ff0:	08012d5f 	.word	0x08012d5f
 8007ff4:	20001504 	.word	0x20001504
 8007ff8:	0801a470 	.word	0x0801a470
 8007ffc:	0800510d 	.word	0x0800510d
 8008000:	08009c49 	.word	0x08009c49
 8008004:	200014e0 	.word	0x200014e0
 8008008:	0801a478 	.word	0x0801a478
 800800c:	200014e4 	.word	0x200014e4
 8008010:	0801a484 	.word	0x0801a484
 8008014:	200014e8 	.word	0x200014e8
 8008018:	0801a490 	.word	0x0801a490
 800801c:	200014ec 	.word	0x200014ec
 8008020:	0801a49c 	.word	0x0801a49c
 8008024:	200014f0 	.word	0x200014f0
 8008028:	0801a4a8 	.word	0x0801a4a8
 800802c:	200014f4 	.word	0x200014f4
 8008030:	0801a4b4 	.word	0x0801a4b4
 8008034:	20006a64 	.word	0x20006a64
 8008038:	20006a48 	.word	0x20006a48

0800803c <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 800803c:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800803e:	4b04      	ldr	r3, [pc, #16]	; (8008050 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	4904      	ldr	r1, [pc, #16]	; (8008054 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008044:	f7f8 f884 	bl	8000150 <__udivsi3>
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800804a:	6018      	str	r0, [r3, #0]
}
 800804c:	bd10      	pop	{r4, pc}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	20000090 	.word	0x20000090
 8008054:	00002710 	.word	0x00002710
 8008058:	20001500 	.word	0x20001500

0800805c <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 800805c:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <ulMainGetRunTimeCounterValue+0x40>)
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	21fa      	movs	r1, #250	; 0xfa
 8008064:	0089      	lsls	r1, r1, #2
 8008066:	f7f8 f873 	bl	8000150 <__udivsi3>
 800806a:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800806c:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <ulMainGetRunTimeCounterValue+0x44>)
 800806e:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008070:	f006 fb2a 	bl	800e6c8 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <ulMainGetRunTimeCounterValue+0x48>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	015b      	lsls	r3, r3, #5
 800807a:	d50d      	bpl.n	8008098 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 800807c:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800807e:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <ulMainGetRunTimeCounterValue+0x44>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008084:	0084      	lsls	r4, r0, #2
 8008086:	1824      	adds	r4, r4, r0
 8008088:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <ulMainGetRunTimeCounterValue+0x4c>)
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	0028      	movs	r0, r5
 8008090:	f7f8 f85e 	bl	8000150 <__udivsi3>
 8008094:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8008096:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008098:	1b2d      	subs	r5, r5, r4
 800809a:	e7f3      	b.n	8008084 <ulMainGetRunTimeCounterValue+0x28>
 800809c:	20000090 	.word	0x20000090
 80080a0:	e000e018 	.word	0xe000e018
 80080a4:	e000ed04 	.word	0xe000ed04
 80080a8:	20001500 	.word	0x20001500

080080ac <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80080ac:	4770      	bx	lr
	...

080080b0 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80080b0:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080b2:	00c2      	lsls	r2, r0, #3
 80080b4:	1812      	adds	r2, r2, r0
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <CheckForTimedButtonPress+0x74>)
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1){
 80080bc:	0082      	lsls	r2, r0, #2
 80080be:	4b1a      	ldr	r3, [pc, #104]	; (8008128 <CheckForTimedButtonPress+0x78>)
 80080c0:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80080c2:	0163      	lsls	r3, r4, #5
 80080c4:	1b1b      	subs	r3, r3, r4
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	191b      	adds	r3, r3, r4
 80080ca:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1){
 80080cc:	4299      	cmp	r1, r3
 80080ce:	d01c      	beq.n	800810a <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080d0:	00c2      	lsls	r2, r0, #3
 80080d2:	1812      	adds	r2, r2, r0
 80080d4:	4b13      	ldr	r3, [pc, #76]	; (8008124 <CheckForTimedButtonPress+0x74>)
 80080d6:	189b      	adds	r3, r3, r2
 80080d8:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 80080da:	0163      	lsls	r3, r4, #5
 80080dc:	1b1b      	subs	r3, r3, r4
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	191b      	adds	r3, r3, r4
 80080e2:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d017      	beq.n	8008118 <CheckForTimedButtonPress+0x68>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080e8:	00c2      	lsls	r2, r0, #3
 80080ea:	1812      	adds	r2, r2, r0
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <CheckForTimedButtonPress+0x74>)
 80080ee:	189b      	adds	r3, r3, r2
 80080f0:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 80080f2:	0163      	lsls	r3, r4, #5
 80080f4:	1b1b      	subs	r3, r3, r4
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	191b      	adds	r3, r3, r4
 80080fa:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 80080fc:	4299      	cmp	r1, r3
 80080fe:	d109      	bne.n	8008114 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008100:	0010      	movs	r0, r2
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <CheckForTimedButtonPress+0x74>)
 8008104:	220a      	movs	r2, #10
 8008106:	54c2      	strb	r2, [r0, r3]
 8008108:	e004      	b.n	8008114 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 800810a:	00c3      	lsls	r3, r0, #3
 800810c:	1818      	adds	r0, r3, r0
 800810e:	4b05      	ldr	r3, [pc, #20]	; (8008124 <CheckForTimedButtonPress+0x74>)
 8008110:	2209      	movs	r2, #9
 8008112:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008114:	2000      	movs	r0, #0
 8008116:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8008118:	0010      	movs	r0, r2
 800811a:	4b02      	ldr	r3, [pc, #8]	; (8008124 <CheckForTimedButtonPress+0x74>)
 800811c:	220a      	movs	r2, #10
 800811e:	54c2      	strb	r2, [r0, r3]
 8008120:	e7f8      	b.n	8008114 <CheckForTimedButtonPress+0x64>
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	2000151c 	.word	0x2000151c
 8008128:	20001570 	.word	0x20001570

0800812c <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 800812c:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 800812e:	00c2      	lsls	r2, r0, #3
 8008130:	1812      	adds	r2, r2, r0
 8008132:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <CheckForTimedButtonRelease+0x74>)
 8008134:	189b      	adds	r3, r3, r2
 8008136:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1){
 8008138:	0082      	lsls	r2, r0, #2
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <CheckForTimedButtonRelease+0x78>)
 800813c:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 800813e:	0163      	lsls	r3, r4, #5
 8008140:	1b1b      	subs	r3, r3, r4
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	191b      	adds	r3, r3, r4
 8008146:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 8008148:	4299      	cmp	r1, r3
 800814a:	d01c      	beq.n	8008186 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 800814c:	00c2      	lsls	r2, r0, #3
 800814e:	1812      	adds	r2, r2, r0
 8008150:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <CheckForTimedButtonRelease+0x74>)
 8008152:	189b      	adds	r3, r3, r2
 8008154:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 8008156:	0163      	lsls	r3, r4, #5
 8008158:	1b1b      	subs	r3, r3, r4
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	191b      	adds	r3, r3, r4
 800815e:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 8008160:	4299      	cmp	r1, r3
 8008162:	d017      	beq.n	8008194 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008164:	00c2      	lsls	r2, r0, #3
 8008166:	1812      	adds	r2, r2, r0
 8008168:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <CheckForTimedButtonRelease+0x74>)
 800816a:	189b      	adds	r3, r3, r2
 800816c:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 800816e:	0163      	lsls	r3, r4, #5
 8008170:	1b1b      	subs	r3, r3, r4
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	191b      	adds	r3, r3, r4
 8008176:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 8008178:	4299      	cmp	r1, r3
 800817a:	d109      	bne.n	8008190 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 800817c:	0010      	movs	r0, r2
 800817e:	4b08      	ldr	r3, [pc, #32]	; (80081a0 <CheckForTimedButtonRelease+0x74>)
 8008180:	220d      	movs	r2, #13
 8008182:	54c2      	strb	r2, [r0, r3]
 8008184:	e004      	b.n	8008190 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 8008186:	00c3      	lsls	r3, r0, #3
 8008188:	1818      	adds	r0, r3, r0
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <CheckForTimedButtonRelease+0x74>)
 800818c:	220c      	movs	r2, #12
 800818e:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008190:	2000      	movs	r0, #0
 8008192:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008194:	0010      	movs	r0, r2
 8008196:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <CheckForTimedButtonRelease+0x74>)
 8008198:	220d      	movs	r2, #13
 800819a:	54c2      	strb	r2, [r0, r3]
 800819c:	e7f8      	b.n	8008190 <CheckForTimedButtonRelease+0x64>
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	2000151c 	.word	0x2000151c
 80081a4:	2000158c 	.word	0x2000158c

080081a8 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80081a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081aa:	b08d      	sub	sp, #52	; 0x34
 80081ac:	0006      	movs	r6, r0
 80081ae:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80081b0:	4b41      	ldr	r3, [pc, #260]	; (80082b8 <AddPortButton+0x110>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d157      	bne.n	8008268 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80081b8:	4b40      	ldr	r3, [pc, #256]	; (80082bc <AddPortButton+0x114>)
 80081ba:	2204      	movs	r2, #4
 80081bc:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80081be:	4b3e      	ldr	r3, [pc, #248]	; (80082b8 <AddPortButton+0x110>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d15a      	bne.n	800827c <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80081c6:	2512      	movs	r5, #18
 80081c8:	446d      	add	r5, sp
 80081ca:	af04      	add	r7, sp, #16
 80081cc:	9700      	str	r7, [sp, #0]
 80081ce:	ab05      	add	r3, sp, #20
 80081d0:	002a      	movs	r2, r5
 80081d2:	a906      	add	r1, sp, #24
 80081d4:	0020      	movs	r0, r4
 80081d6:	f004 fbdf 	bl	800c998 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80081da:	882b      	ldrh	r3, [r5, #0]
 80081dc:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081de:	2301      	movs	r3, #1
 80081e0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e2:	2500      	movs	r5, #0
 80081e4:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80081e6:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80081e8:	a907      	add	r1, sp, #28
 80081ea:	9806      	ldr	r0, [sp, #24]
 80081ec:	f008 fe00 	bl	8010df0 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80081f0:	883b      	ldrh	r3, [r7, #0]
 80081f2:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081f4:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80081f6:	2302      	movs	r3, #2
 80081f8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80081fa:	a907      	add	r1, sp, #28
 80081fc:	9805      	ldr	r0, [sp, #20]
 80081fe:	f008 fdf7 	bl	8010df0 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8008202:	00e2      	lsls	r2, r4, #3
 8008204:	1912      	adds	r2, r2, r4
 8008206:	4b2e      	ldr	r3, [pc, #184]	; (80082c0 <AddPortButton+0x118>)
 8008208:	189b      	adds	r3, r3, r2
 800820a:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800820c:	0025      	movs	r5, r4
 800820e:	353a      	adds	r5, #58	; 0x3a
 8008210:	00ad      	lsls	r5, r5, #2
 8008212:	210e      	movs	r1, #14
 8008214:	4469      	add	r1, sp
 8008216:	0028      	movs	r0, r5
 8008218:	f7ff fab2 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 800821c:	2800      	cmp	r0, #0
 800821e:	d133      	bne.n	8008288 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 8008220:	230e      	movs	r3, #14
 8008222:	446b      	add	r3, sp
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 8008228:	091a      	lsrs	r2, r3, #4
 800822a:	42a2      	cmp	r2, r4
 800822c:	d103      	bne.n	8008236 <AddPortButton+0x8e>
 800822e:	220f      	movs	r2, #15
 8008230:	4013      	ands	r3, r2
 8008232:	42b3      	cmp	r3, r6
 8008234:	d015      	beq.n	8008262 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008236:	0324      	lsls	r4, r4, #12
 8008238:	0231      	lsls	r1, r6, #8
 800823a:	4321      	orrs	r1, r4
 800823c:	b289      	uxth	r1, r1
 800823e:	230e      	movs	r3, #14
 8008240:	446b      	add	r3, sp
 8008242:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008244:	0028      	movs	r0, r5
 8008246:	f7ff facb 	bl	80077e0 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800824a:	1c68      	adds	r0, r5, #1
 800824c:	2100      	movs	r1, #0
 800824e:	f7ff fac7 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008252:	1ca8      	adds	r0, r5, #2
 8008254:	2100      	movs	r1, #0
 8008256:	f7ff fac3 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 800825a:	1ce8      	adds	r0, r5, #3
 800825c:	2100      	movs	r1, #0
 800825e:	f7ff fabf 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 8008262:	2000      	movs	r0, #0
 8008264:	b00d      	add	sp, #52	; 0x34
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008268:	008d      	lsls	r5, r1, #2
 800826a:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <AddPortButton+0x11c>)
 800826c:	58e8      	ldr	r0, [r5, r3]
 800826e:	f005 fae9 	bl	800d844 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008272:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <AddPortButton+0x120>)
 8008274:	58e8      	ldr	r0, [r5, r3]
 8008276:	f005 fae5 	bl	800d844 <osSemaphoreRelease>
 800827a:	e79d      	b.n	80081b8 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800827c:	0020      	movs	r0, r4
 800827e:	f005 f947 	bl	800d510 <GetUart>
 8008282:	f009 ffba 	bl	80121fa <HAL_UART_DeInit>
 8008286:	e79e      	b.n	80081c6 <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008288:	0324      	lsls	r4, r4, #12
 800828a:	0231      	lsls	r1, r6, #8
 800828c:	4321      	orrs	r1, r4
 800828e:	b289      	uxth	r1, r1
 8008290:	230e      	movs	r3, #14
 8008292:	446b      	add	r3, sp
 8008294:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008296:	0028      	movs	r0, r5
 8008298:	f7ff faa2 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800829c:	1c68      	adds	r0, r5, #1
 800829e:	2100      	movs	r1, #0
 80082a0:	f7ff fa9e 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80082a4:	1ca8      	adds	r0, r5, #2
 80082a6:	2100      	movs	r1, #0
 80082a8:	f7ff fa9a 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80082ac:	1ce8      	adds	r0, r5, #3
 80082ae:	2100      	movs	r1, #0
 80082b0:	f7ff fa96 	bl	80077e0 <EE_WriteVariable>
 80082b4:	e7d5      	b.n	8008262 <AddPortButton+0xba>
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	20000a75 	.word	0x20000a75
 80082bc:	200010f8 	.word	0x200010f8
 80082c0:	2000151c 	.word	0x2000151c
 80082c4:	20006a64 	.word	0x20006a64
 80082c8:	20006a48 	.word	0x20006a48

080082cc <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80082d2:	4837      	ldr	r0, [pc, #220]	; (80083b0 <RemovePortButton+0xe4>)
 80082d4:	00e9      	lsls	r1, r5, #3
 80082d6:	1949      	adds	r1, r1, r5
 80082d8:	1842      	adds	r2, r0, r1
 80082da:	2300      	movs	r3, #0
 80082dc:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80082de:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80082e0:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80082e2:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80082e4:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80082e6:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80082e8:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80082ea:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80082ec:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80082ee:	002c      	movs	r4, r5
 80082f0:	343a      	adds	r4, #58	; 0x3a
 80082f2:	00a4      	lsls	r4, r4, #2
 80082f4:	466b      	mov	r3, sp
 80082f6:	1d99      	adds	r1, r3, #6
 80082f8:	0020      	movs	r0, r4
 80082fa:	f7ff fa41 	bl	8007780 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 80082fe:	2800      	cmp	r0, #0
 8008300:	d02b      	beq.n	800835a <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008302:	0028      	movs	r0, r5
 8008304:	f005 f904 	bl	800d510 <GetUart>
 8008308:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1){
 800830a:	6803      	ldr	r3, [r0, #0]
 800830c:	4a29      	ldr	r2, [pc, #164]	; (80083b4 <RemovePortButton+0xe8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d034      	beq.n	800837c <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008312:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <RemovePortButton+0xec>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d035      	beq.n	8008384 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008318:	4a28      	ldr	r2, [pc, #160]	; (80083bc <RemovePortButton+0xf0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d036      	beq.n	800838c <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 800831e:	4a28      	ldr	r2, [pc, #160]	; (80083c0 <RemovePortButton+0xf4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d037      	beq.n	8008394 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008324:	4a27      	ldr	r2, [pc, #156]	; (80083c4 <RemovePortButton+0xf8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d038      	beq.n	800839c <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 800832a:	4a27      	ldr	r2, [pc, #156]	; (80083c8 <RemovePortButton+0xfc>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d039      	beq.n	80083a4 <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 8008330:	4a26      	ldr	r2, [pc, #152]	; (80083cc <RemovePortButton+0x100>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d03a      	beq.n	80083ac <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 8008336:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <RemovePortButton+0x104>)
 8008338:	4694      	mov	ip, r2
 800833a:	4463      	add	r3, ip
 800833c:	1e5c      	subs	r4, r3, #1
 800833e:	41a3      	sbcs	r3, r4
 8008340:	425c      	negs	r4, r3
 8008342:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 8008344:	4b23      	ldr	r3, [pc, #140]	; (80083d4 <RemovePortButton+0x108>)
 8008346:	2200      	movs	r2, #0
 8008348:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 800834a:	3201      	adds	r2, #1
 800834c:	4922      	ldr	r1, [pc, #136]	; (80083d8 <RemovePortButton+0x10c>)
 800834e:	0030      	movs	r0, r6
 8008350:	f009 ffac 	bl	80122ac <HAL_UART_Receive_IT>
	
	return result;
}
 8008354:	0020      	movs	r0, r4
 8008356:	b002      	add	sp, #8
 8008358:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800835a:	2100      	movs	r1, #0
 800835c:	0020      	movs	r0, r4
 800835e:	f7ff fa3f 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008362:	1c60      	adds	r0, r4, #1
 8008364:	2100      	movs	r1, #0
 8008366:	f7ff fa3b 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800836a:	1ca0      	adds	r0, r4, #2
 800836c:	2100      	movs	r1, #0
 800836e:	f7ff fa37 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008372:	1ce0      	adds	r0, r4, #3
 8008374:	2100      	movs	r1, #0
 8008376:	f7ff fa33 	bl	80077e0 <EE_WriteVariable>
 800837a:	e7c2      	b.n	8008302 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800837c:	f004 ff0e 	bl	800d19c <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008380:	2400      	movs	r4, #0
 8008382:	e7df      	b.n	8008344 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008384:	f004 ff14 	bl	800d1b0 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8008388:	2400      	movs	r4, #0
 800838a:	e7db      	b.n	8008344 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800838c:	f004 ff28 	bl	800d1e0 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8008390:	2400      	movs	r4, #0
 8008392:	e7d7      	b.n	8008344 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008394:	f004 ff3c 	bl	800d210 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 8008398:	2400      	movs	r4, #0
 800839a:	e7d3      	b.n	8008344 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800839c:	f004 ff50 	bl	800d240 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 80083a0:	2400      	movs	r4, #0
 80083a2:	e7cf      	b.n	8008344 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80083a4:	f004 ff64 	bl	800d270 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80083a8:	2400      	movs	r4, #0
 80083aa:	e7cb      	b.n	8008344 <RemovePortButton+0x78>
 80083ac:	2400      	movs	r4, #0
 80083ae:	e7c9      	b.n	8008344 <RemovePortButton+0x78>
 80083b0:	2000151c 	.word	0x2000151c
 80083b4:	40013800 	.word	0x40013800
 80083b8:	40004400 	.word	0x40004400
 80083bc:	40004800 	.word	0x40004800
 80083c0:	40004c00 	.word	0x40004c00
 80083c4:	40005000 	.word	0x40005000
 80083c8:	40011400 	.word	0x40011400
 80083cc:	40011800 	.word	0x40011800
 80083d0:	bffee400 	.word	0xbffee400
 80083d4:	200010f8 	.word	0x200010f8
 80083d8:	20000e58 	.word	0x20000e58

080083dc <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80083dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083de:	46de      	mov	lr, fp
 80083e0:	4657      	mov	r7, sl
 80083e2:	464e      	mov	r6, r9
 80083e4:	4645      	mov	r5, r8
 80083e6:	b5e0      	push	{r5, r6, r7, lr}
 80083e8:	b085      	sub	sp, #20
 80083ea:	0007      	movs	r7, r0
 80083ec:	001e      	movs	r6, r3
 80083ee:	ab0e      	add	r3, sp, #56	; 0x38
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4698      	mov	r8, r3
 80083f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80083f6:	781d      	ldrb	r5, [r3, #0]
 80083f8:	ab10      	add	r3, sp, #64	; 0x40
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	469b      	mov	fp, r3
 80083fe:	ab11      	add	r3, sp, #68	; 0x44
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	469a      	mov	sl, r3
 8008404:	ab12      	add	r3, sp, #72	; 0x48
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4699      	mov	r9, r3
 800840a:	ab13      	add	r3, sp, #76	; 0x4c
 800840c:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 800840e:	00fc      	lsls	r4, r7, #3
 8008410:	19e4      	adds	r4, r4, r7
 8008412:	4b9e      	ldr	r3, [pc, #632]	; (800868c <SetButtonEvents+0x2b0>)
 8008414:	191b      	adds	r3, r3, r4
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d04c      	beq.n	80084b6 <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 800841c:	00fc      	lsls	r4, r7, #3
 800841e:	19e4      	adds	r4, r4, r7
 8008420:	4b9a      	ldr	r3, [pc, #616]	; (800868c <SetButtonEvents+0x2b0>)
 8008422:	191b      	adds	r3, r3, r4
 8008424:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008426:	4644      	mov	r4, r8
 8008428:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 800842a:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 800842c:	465c      	mov	r4, fp
 800842e:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008430:	4654      	mov	r4, sl
 8008432:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8008434:	464c      	mov	r4, r9
 8008436:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 8008438:	2801      	cmp	r0, #1
 800843a:	d003      	beq.n	8008444 <SetButtonEvents+0x68>
 800843c:	2800      	cmp	r0, #0
 800843e:	d113      	bne.n	8008468 <SetButtonEvents+0x8c>
 8008440:	2900      	cmp	r1, #0
 8008442:	d042      	beq.n	80084ca <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008444:	00f9      	lsls	r1, r7, #3
 8008446:	19c9      	adds	r1, r1, r7
 8008448:	4b90      	ldr	r3, [pc, #576]	; (800868c <SetButtonEvents+0x2b0>)
 800844a:	185b      	adds	r3, r3, r1
 800844c:	7a19      	ldrb	r1, [r3, #8]
 800844e:	2401      	movs	r4, #1
 8008450:	4321      	orrs	r1, r4
 8008452:	7219      	strb	r1, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008454:	2801      	cmp	r0, #1
 8008456:	d10c      	bne.n	8008472 <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008458:	00fa      	lsls	r2, r7, #3
 800845a:	19d2      	adds	r2, r2, r7
 800845c:	4b8b      	ldr	r3, [pc, #556]	; (800868c <SetButtonEvents+0x2b0>)
 800845e:	189b      	adds	r3, r3, r2
 8008460:	7a1a      	ldrb	r2, [r3, #8]
 8008462:	2102      	movs	r1, #2
 8008464:	430a      	orrs	r2, r1
 8008466:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008468:	2801      	cmp	r0, #1
 800846a:	d042      	beq.n	80084f2 <SetButtonEvents+0x116>
 800846c:	2800      	cmp	r0, #0
 800846e:	d152      	bne.n	8008516 <SetButtonEvents+0x13a>
 8008470:	e03d      	b.n	80084ee <SetButtonEvents+0x112>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008472:	2800      	cmp	r0, #0
 8008474:	d031      	beq.n	80084da <SetButtonEvents+0xfe>
 8008476:	e044      	b.n	8008502 <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008478:	2800      	cmp	r0, #0
 800847a:	d059      	beq.n	8008530 <SetButtonEvents+0x154>
 800847c:	e06d      	b.n	800855a <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800847e:	2800      	cmp	r0, #0
 8008480:	d100      	bne.n	8008484 <SetButtonEvents+0xa8>
 8008482:	e082      	b.n	800858a <SetButtonEvents+0x1ae>
 8008484:	e097      	b.n	80085b6 <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008486:	2800      	cmp	r0, #0
 8008488:	d100      	bne.n	800848c <SetButtonEvents+0xb0>
 800848a:	e0f2      	b.n	8008672 <SetButtonEvents+0x296>
 800848c:	e09f      	b.n	80085ce <SetButtonEvents+0x1f2>
	if(!res)											// This variable exists
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 800848e:	0a19      	lsrs	r1, r3, #8
 8008490:	0209      	lsls	r1, r1, #8
 8008492:	4311      	orrs	r1, r2
 8008494:	ab02      	add	r3, sp, #8
 8008496:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008498:	0020      	movs	r0, r4
 800849a:	f7ff f9a1 	bl	80077e0 <EE_WriteVariable>
 800849e:	e0ad      	b.n	80085fc <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 80084a0:	0019      	movs	r1, r3
 80084a2:	9801      	ldr	r0, [sp, #4]
 80084a4:	f7ff f99c 	bl	80077e0 <EE_WriteVariable>
 80084a8:	e0b7      	b.n	800861a <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 80084aa:	4653      	mov	r3, sl
 80084ac:	4319      	orrs	r1, r3
 80084ae:	0030      	movs	r0, r6
 80084b0:	f7ff f996 	bl	80077e0 <EE_WriteVariable>
 80084b4:	e0c0      	b.n	8008638 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084b6:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 80084b8:	b005      	add	sp, #20
 80084ba:	bc3c      	pop	{r2, r3, r4, r5}
 80084bc:	4690      	mov	r8, r2
 80084be:	4699      	mov	r9, r3
 80084c0:	46a2      	mov	sl, r4
 80084c2:	46ab      	mov	fp, r5
 80084c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084c6:	200b      	movs	r0, #11
 80084c8:	e7f6      	b.n	80084b8 <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80084ca:	00f9      	lsls	r1, r7, #3
 80084cc:	19c9      	adds	r1, r1, r7
 80084ce:	4b6f      	ldr	r3, [pc, #444]	; (800868c <SetButtonEvents+0x2b0>)
 80084d0:	185b      	adds	r3, r3, r1
 80084d2:	7a19      	ldrb	r1, [r3, #8]
 80084d4:	2401      	movs	r4, #1
 80084d6:	43a1      	bics	r1, r4
 80084d8:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80084da:	2a00      	cmp	r2, #0
 80084dc:	d1bc      	bne.n	8008458 <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80084de:	00fa      	lsls	r2, r7, #3
 80084e0:	19d2      	adds	r2, r2, r7
 80084e2:	4b6a      	ldr	r3, [pc, #424]	; (800868c <SetButtonEvents+0x2b0>)
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	7a1a      	ldrb	r2, [r3, #8]
 80084e8:	2102      	movs	r1, #2
 80084ea:	438a      	bics	r2, r1
 80084ec:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	d016      	beq.n	8008520 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80084f2:	00fa      	lsls	r2, r7, #3
 80084f4:	19d2      	adds	r2, r2, r7
 80084f6:	4b65      	ldr	r3, [pc, #404]	; (800868c <SetButtonEvents+0x2b0>)
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	7a1a      	ldrb	r2, [r3, #8]
 80084fc:	2104      	movs	r1, #4
 80084fe:	430a      	orrs	r2, r1
 8008500:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008502:	2801      	cmp	r0, #1
 8008504:	d1b8      	bne.n	8008478 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008506:	00fa      	lsls	r2, r7, #3
 8008508:	19d2      	adds	r2, r2, r7
 800850a:	4b60      	ldr	r3, [pc, #384]	; (800868c <SetButtonEvents+0x2b0>)
 800850c:	189b      	adds	r3, r3, r2
 800850e:	7a1a      	ldrb	r2, [r3, #8]
 8008510:	2108      	movs	r1, #8
 8008512:	430a      	orrs	r2, r1
 8008514:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008516:	2801      	cmp	r0, #1
 8008518:	d017      	beq.n	800854a <SetButtonEvents+0x16e>
 800851a:	2800      	cmp	r0, #0
 800851c:	d128      	bne.n	8008570 <SetButtonEvents+0x194>
 800851e:	e012      	b.n	8008546 <SetButtonEvents+0x16a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008520:	00fa      	lsls	r2, r7, #3
 8008522:	19d2      	adds	r2, r2, r7
 8008524:	4b59      	ldr	r3, [pc, #356]	; (800868c <SetButtonEvents+0x2b0>)
 8008526:	189b      	adds	r3, r3, r2
 8008528:	7a1a      	ldrb	r2, [r3, #8]
 800852a:	2104      	movs	r1, #4
 800852c:	438a      	bics	r2, r1
 800852e:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008530:	4643      	mov	r3, r8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e7      	bne.n	8008506 <SetButtonEvents+0x12a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008536:	00fa      	lsls	r2, r7, #3
 8008538:	19d2      	adds	r2, r2, r7
 800853a:	4b54      	ldr	r3, [pc, #336]	; (800868c <SetButtonEvents+0x2b0>)
 800853c:	189b      	adds	r3, r3, r2
 800853e:	7a1a      	ldrb	r2, [r3, #8]
 8008540:	2108      	movs	r1, #8
 8008542:	438a      	bics	r2, r1
 8008544:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008546:	2d00      	cmp	r5, #0
 8008548:	d017      	beq.n	800857a <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800854a:	00fa      	lsls	r2, r7, #3
 800854c:	19d2      	adds	r2, r2, r7
 800854e:	4b4f      	ldr	r3, [pc, #316]	; (800868c <SetButtonEvents+0x2b0>)
 8008550:	189b      	adds	r3, r3, r2
 8008552:	7a1a      	ldrb	r2, [r3, #8]
 8008554:	2110      	movs	r1, #16
 8008556:	430a      	orrs	r2, r1
 8008558:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800855a:	2801      	cmp	r0, #1
 800855c:	d000      	beq.n	8008560 <SetButtonEvents+0x184>
 800855e:	e78e      	b.n	800847e <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008560:	00fa      	lsls	r2, r7, #3
 8008562:	19d2      	adds	r2, r2, r7
 8008564:	4b49      	ldr	r3, [pc, #292]	; (800868c <SetButtonEvents+0x2b0>)
 8008566:	189b      	adds	r3, r3, r2
 8008568:	7a1a      	ldrb	r2, [r3, #8]
 800856a:	2120      	movs	r1, #32
 800856c:	430a      	orrs	r2, r1
 800856e:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008570:	2801      	cmp	r0, #1
 8008572:	d018      	beq.n	80085a6 <SetButtonEvents+0x1ca>
 8008574:	2800      	cmp	r0, #0
 8008576:	d12a      	bne.n	80085ce <SetButtonEvents+0x1f2>
 8008578:	e012      	b.n	80085a0 <SetButtonEvents+0x1c4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800857a:	00fa      	lsls	r2, r7, #3
 800857c:	19d2      	adds	r2, r2, r7
 800857e:	4b43      	ldr	r3, [pc, #268]	; (800868c <SetButtonEvents+0x2b0>)
 8008580:	189b      	adds	r3, r3, r2
 8008582:	7a1a      	ldrb	r2, [r3, #8]
 8008584:	2110      	movs	r1, #16
 8008586:	438a      	bics	r2, r1
 8008588:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800858a:	465b      	mov	r3, fp
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e7      	bne.n	8008560 <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008590:	00fa      	lsls	r2, r7, #3
 8008592:	19d2      	adds	r2, r2, r7
 8008594:	4b3d      	ldr	r3, [pc, #244]	; (800868c <SetButtonEvents+0x2b0>)
 8008596:	189b      	adds	r3, r3, r2
 8008598:	7a1a      	ldrb	r2, [r3, #8]
 800859a:	2120      	movs	r1, #32
 800859c:	438a      	bics	r2, r1
 800859e:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80085a0:	4653      	mov	r3, sl
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d05d      	beq.n	8008662 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085a6:	00fa      	lsls	r2, r7, #3
 80085a8:	19d2      	adds	r2, r2, r7
 80085aa:	4b38      	ldr	r3, [pc, #224]	; (800868c <SetButtonEvents+0x2b0>)
 80085ac:	189b      	adds	r3, r3, r2
 80085ae:	7a1a      	ldrb	r2, [r3, #8]
 80085b0:	2140      	movs	r1, #64	; 0x40
 80085b2:	430a      	orrs	r2, r1
 80085b4:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80085b6:	2801      	cmp	r0, #1
 80085b8:	d000      	beq.n	80085bc <SetButtonEvents+0x1e0>
 80085ba:	e764      	b.n	8008486 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80085bc:	00fa      	lsls	r2, r7, #3
 80085be:	19d2      	adds	r2, r2, r7
 80085c0:	4b32      	ldr	r3, [pc, #200]	; (800868c <SetButtonEvents+0x2b0>)
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	7a19      	ldrb	r1, [r3, #8]
 80085c6:	2280      	movs	r2, #128	; 0x80
 80085c8:	4252      	negs	r2, r2
 80085ca:	430a      	orrs	r2, r1
 80085cc:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80085ce:	003c      	movs	r4, r7
 80085d0:	343a      	adds	r4, #58	; 0x3a
 80085d2:	00a4      	lsls	r4, r4, #2
 80085d4:	ab02      	add	r3, sp, #8
 80085d6:	1d99      	adds	r1, r3, #6
 80085d8:	0020      	movs	r0, r4
 80085da:	f7ff f8d1 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 80085de:	2800      	cmp	r0, #0
 80085e0:	d000      	beq.n	80085e4 <SetButtonEvents+0x208>
 80085e2:	e770      	b.n	80084c6 <SetButtonEvents+0xea>
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80085e4:	ab02      	add	r3, sp, #8
 80085e6:	3306      	adds	r3, #6
 80085e8:	881b      	ldrh	r3, [r3, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80085ea:	00fa      	lsls	r2, r7, #3
 80085ec:	19d2      	adds	r2, r2, r7
 80085ee:	4f27      	ldr	r7, [pc, #156]	; (800868c <SetButtonEvents+0x2b0>)
 80085f0:	18bf      	adds	r7, r7, r2
 80085f2:	7a3a      	ldrb	r2, [r7, #8]
 80085f4:	b2d9      	uxtb	r1, r3
 80085f6:	4291      	cmp	r1, r2
 80085f8:	d000      	beq.n	80085fc <SetButtonEvents+0x220>
 80085fa:	e748      	b.n	800848e <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 80085fc:	1c63      	adds	r3, r4, #1
 80085fe:	aa02      	add	r2, sp, #8
 8008600:	1d97      	adds	r7, r2, #6
 8008602:	0039      	movs	r1, r7
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	0018      	movs	r0, r3
 8008608:	f7ff f8ba 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 800860c:	0236      	lsls	r6, r6, #8
 800860e:	883a      	ldrh	r2, [r7, #0]
 8008610:	465b      	mov	r3, fp
 8008612:	4333      	orrs	r3, r6
 8008614:	429a      	cmp	r2, r3
 8008616:	d000      	beq.n	800861a <SetButtonEvents+0x23e>
 8008618:	e742      	b.n	80084a0 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 800861a:	1ca6      	adds	r6, r4, #2
 800861c:	ab02      	add	r3, sp, #8
 800861e:	1d9f      	adds	r7, r3, #6
 8008620:	0039      	movs	r1, r7
 8008622:	0030      	movs	r0, r6
 8008624:	f7ff f8ac 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 8008628:	4643      	mov	r3, r8
 800862a:	0219      	lsls	r1, r3, #8
 800862c:	883a      	ldrh	r2, [r7, #0]
 800862e:	4653      	mov	r3, sl
 8008630:	430b      	orrs	r3, r1
 8008632:	429a      	cmp	r2, r3
 8008634:	d000      	beq.n	8008638 <SetButtonEvents+0x25c>
 8008636:	e738      	b.n	80084aa <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 8008638:	3403      	adds	r4, #3
 800863a:	ab02      	add	r3, sp, #8
 800863c:	1d9e      	adds	r6, r3, #6
 800863e:	0031      	movs	r1, r6
 8008640:	0020      	movs	r0, r4
 8008642:	f7ff f89d 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008646:	022d      	lsls	r5, r5, #8
 8008648:	8832      	ldrh	r2, [r6, #0]
 800864a:	464b      	mov	r3, r9
 800864c:	432b      	orrs	r3, r5
	return result;
 800864e:	2000      	movs	r0, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008650:	429a      	cmp	r2, r3
 8008652:	d100      	bne.n	8008656 <SetButtonEvents+0x27a>
 8008654:	e730      	b.n	80084b8 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 8008656:	0019      	movs	r1, r3
 8008658:	0020      	movs	r0, r4
 800865a:	f7ff f8c1 	bl	80077e0 <EE_WriteVariable>
	return result;
 800865e:	2000      	movs	r0, #0
 8008660:	e72a      	b.n	80084b8 <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008662:	00fa      	lsls	r2, r7, #3
 8008664:	19d2      	adds	r2, r2, r7
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <SetButtonEvents+0x2b0>)
 8008668:	189b      	adds	r3, r3, r2
 800866a:	7a1a      	ldrb	r2, [r3, #8]
 800866c:	2140      	movs	r1, #64	; 0x40
 800866e:	438a      	bics	r2, r1
 8008670:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008672:	464b      	mov	r3, r9
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1a1      	bne.n	80085bc <SetButtonEvents+0x1e0>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008678:	00fa      	lsls	r2, r7, #3
 800867a:	19d2      	adds	r2, r2, r7
 800867c:	4b03      	ldr	r3, [pc, #12]	; (800868c <SetButtonEvents+0x2b0>)
 800867e:	189b      	adds	r3, r3, r2
 8008680:	7a19      	ldrb	r1, [r3, #8]
 8008682:	227f      	movs	r2, #127	; 0x7f
 8008684:	400a      	ands	r2, r1
 8008686:	721a      	strb	r2, [r3, #8]
 8008688:	e7a1      	b.n	80085ce <SetButtonEvents+0x1f2>
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	2000151c 	.word	0x2000151c

08008690 <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008690:	b510      	push	{r4, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008696:	2214      	movs	r2, #20
 8008698:	2100      	movs	r1, #0
 800869a:	a803      	add	r0, sp, #12
 800869c:	f00a fdfe 	bl	801329c <memset>
	if(adcHandle->Instance == ADC1){
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <HAL_ADC_MspInit+0x58>)
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d001      	beq.n	80086ac <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80086a8:	b008      	add	sp, #32
 80086aa:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <HAL_ADC_MspInit+0x5c>)
 80086ae:	6999      	ldr	r1, [r3, #24]
 80086b0:	2080      	movs	r0, #128	; 0x80
 80086b2:	0080      	lsls	r0, r0, #2
 80086b4:	4301      	orrs	r1, r0
 80086b6:	6199      	str	r1, [r3, #24]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	4002      	ands	r2, r0
 80086bc:	9201      	str	r2, [sp, #4]
 80086be:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086c0:	695a      	ldr	r2, [r3, #20]
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	0289      	lsls	r1, r1, #10
 80086c6:	430a      	orrs	r2, r1
 80086c8:	615a      	str	r2, [r3, #20]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	400b      	ands	r3, r1
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80086d2:	233c      	movs	r3, #60	; 0x3c
 80086d4:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086d6:	3b39      	subs	r3, #57	; 0x39
 80086d8:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80086da:	3871      	subs	r0, #113	; 0x71
 80086dc:	38ff      	subs	r0, #255	; 0xff
 80086de:	a903      	add	r1, sp, #12
 80086e0:	05c0      	lsls	r0, r0, #23
 80086e2:	f008 fb85 	bl	8010df0 <HAL_GPIO_Init>
}
 80086e6:	e7df      	b.n	80086a8 <HAL_ADC_MspInit+0x18>
 80086e8:	40012400 	.word	0x40012400
 80086ec:	40021000 	.word	0x40021000

080086f0 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 80086f0:	6803      	ldr	r3, [r0, #0]
 80086f2:	4a0d      	ldr	r2, [pc, #52]	; (8008728 <Get_channel+0x38>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d003      	beq.n	8008700 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 80086f8:	4a0c      	ldr	r2, [pc, #48]	; (800872c <Get_channel+0x3c>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d008      	beq.n	8008710 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 80086fe:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <Get_channel+0x40>)
 8008702:	4299      	cmp	r1, r3
 8008704:	d00c      	beq.n	8008720 <Get_channel+0x30>
	else if(huart->Instance == USART2 && side == "bottom")
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <Get_channel+0x44>)
 8008708:	4299      	cmp	r1, r3
 800870a:	d1f8      	bne.n	80086fe <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800870c:	2003      	movs	r0, #3
 800870e:	e7f6      	b.n	80086fe <Get_channel+0xe>
	else if(huart->Instance == USART6 && side == "top")
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <Get_channel+0x40>)
 8008712:	4299      	cmp	r1, r3
 8008714:	d006      	beq.n	8008724 <Get_channel+0x34>
	else if(huart->Instance == USART6 && side == "bottom")
 8008716:	4b07      	ldr	r3, [pc, #28]	; (8008734 <Get_channel+0x44>)
 8008718:	4299      	cmp	r1, r3
 800871a:	d1f0      	bne.n	80086fe <Get_channel+0xe>
		return ADC_CHANNEL_5;
 800871c:	2005      	movs	r0, #5
 800871e:	e7ee      	b.n	80086fe <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008720:	2002      	movs	r0, #2
 8008722:	e7ec      	b.n	80086fe <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008724:	2004      	movs	r0, #4
 8008726:	e7ea      	b.n	80086fe <Get_channel+0xe>
 8008728:	40004400 	.word	0x40004400
 800872c:	40011400 	.word	0x40011400
 8008730:	0801863c 	.word	0x0801863c
 8008734:	08018640 	.word	0x08018640

08008738 <Error_Handler>:

void Error_Handler(void){
 8008738:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 800873a:	2064      	movs	r0, #100	; 0x64
 800873c:	f007 f862 	bl	800f804 <HAL_Delay>
	
}
 8008740:	bd10      	pop	{r4, pc}
	...

08008744 <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008744:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008746:	4811      	ldr	r0, [pc, #68]	; (800878c <MX_ADC_Init+0x48>)
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <MX_ADC_Init+0x4c>)
 800874a:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800874c:	2380      	movs	r3, #128	; 0x80
 800874e:	061b      	lsls	r3, r3, #24
 8008750:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008752:	2300      	movs	r3, #0
 8008754:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008756:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008758:	2201      	movs	r2, #1
 800875a:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800875c:	2104      	movs	r1, #4
 800875e:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008760:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008762:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008764:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008766:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008768:	21c2      	movs	r1, #194	; 0xc2
 800876a:	31ff      	adds	r1, #255	; 0xff
 800876c:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800876e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008770:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008772:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008774:	f007 f920 	bl	800f9b8 <HAL_ADC_Init>
 8008778:	2800      	cmp	r0, #0
 800877a:	d103      	bne.n	8008784 <MX_ADC_Init+0x40>
	ADC_flag =1;
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <MX_ADC_Init+0x50>)
 800877e:	2201      	movs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
}
 8008782:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008784:	f7ff ffd8 	bl	8008738 <Error_Handler>
 8008788:	e7f8      	b.n	800877c <MX_ADC_Init+0x38>
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	20006a80 	.word	0x20006a80
 8008790:	40012400 	.word	0x40012400
 8008794:	20001508 	.word	0x20001508

08008798 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	0005      	movs	r5, r0
 800879e:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 80087a0:	4b4d      	ldr	r3, [pc, #308]	; (80088d8 <ReadTempAndVref+0x140>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d100      	bne.n	80087aa <ReadTempAndVref+0x12>
 80087a8:	e087      	b.n	80088ba <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087aa:	494c      	ldr	r1, [pc, #304]	; (80088dc <ReadTempAndVref+0x144>)
 80087ac:	2310      	movs	r3, #16
 80087ae:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	015b      	lsls	r3, r3, #5
 80087b4:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087b6:	2301      	movs	r3, #1
 80087b8:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087ba:	4849      	ldr	r0, [pc, #292]	; (80088e0 <ReadTempAndVref+0x148>)
 80087bc:	f007 fa5c 	bl	800fc78 <HAL_ADC_ConfigChannel>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d000      	beq.n	80087c6 <ReadTempAndVref+0x2e>
 80087c4:	e07c      	b.n	80088c0 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 80087c6:	4c46      	ldr	r4, [pc, #280]	; (80088e0 <ReadTempAndVref+0x148>)
 80087c8:	0020      	movs	r0, r4
 80087ca:	f007 f99d 	bl	800fb08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 80087ce:	2164      	movs	r1, #100	; 0x64
 80087d0:	0020      	movs	r0, r4
 80087d2:	f007 f9eb 	bl	800fbac <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 80087d6:	0020      	movs	r0, r4
 80087d8:	f007 fa48 	bl	800fc6c <HAL_ADC_GetValue>
 80087dc:	4b41      	ldr	r3, [pc, #260]	; (80088e4 <ReadTempAndVref+0x14c>)
 80087de:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 80087e0:	0400      	lsls	r0, r0, #16
 80087e2:	0c00      	lsrs	r0, r0, #16
 80087e4:	f7fa f932 	bl	8002a4c <__aeabi_i2d>
 80087e8:	4a3f      	ldr	r2, [pc, #252]	; (80088e8 <ReadTempAndVref+0x150>)
 80087ea:	4b40      	ldr	r3, [pc, #256]	; (80088ec <ReadTempAndVref+0x154>)
 80087ec:	f7f9 fb22 	bl	8001e34 <__aeabi_dmul>
 80087f0:	2200      	movs	r2, #0
 80087f2:	4b3f      	ldr	r3, [pc, #252]	; (80088f0 <ReadTempAndVref+0x158>)
 80087f4:	f7f8 ff14 	bl	8001620 <__aeabi_ddiv>
 80087f8:	4a3e      	ldr	r2, [pc, #248]	; (80088f4 <ReadTempAndVref+0x15c>)
 80087fa:	4b3f      	ldr	r3, [pc, #252]	; (80088f8 <ReadTempAndVref+0x160>)
 80087fc:	f7f9 fd8c 	bl	8002318 <__aeabi_dsub>
 8008800:	4a3e      	ldr	r2, [pc, #248]	; (80088fc <ReadTempAndVref+0x164>)
 8008802:	4b3f      	ldr	r3, [pc, #252]	; (8008900 <ReadTempAndVref+0x168>)
 8008804:	f7f8 ff0c 	bl	8001620 <__aeabi_ddiv>
 8008808:	2200      	movs	r2, #0
 800880a:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <ReadTempAndVref+0x16c>)
 800880c:	f7f8 fbec 	bl	8000fe8 <__aeabi_dadd>
 8008810:	f7fa f9da 	bl	8002bc8 <__aeabi_d2f>
 8008814:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008816:	0020      	movs	r0, r4
 8008818:	f007 f9a6 	bl	800fb68 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800881c:	492f      	ldr	r1, [pc, #188]	; (80088dc <ReadTempAndVref+0x144>)
 800881e:	2310      	movs	r3, #16
 8008820:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008822:	4b39      	ldr	r3, [pc, #228]	; (8008908 <ReadTempAndVref+0x170>)
 8008824:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008826:	2301      	movs	r3, #1
 8008828:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800882a:	0020      	movs	r0, r4
 800882c:	f007 fa24 	bl	800fc78 <HAL_ADC_ConfigChannel>
 8008830:	2800      	cmp	r0, #0
 8008832:	d148      	bne.n	80088c6 <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008834:	4929      	ldr	r1, [pc, #164]	; (80088dc <ReadTempAndVref+0x144>)
 8008836:	2311      	movs	r3, #17
 8008838:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800883a:	2380      	movs	r3, #128	; 0x80
 800883c:	015b      	lsls	r3, r3, #5
 800883e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008840:	2305      	movs	r3, #5
 8008842:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008844:	4826      	ldr	r0, [pc, #152]	; (80088e0 <ReadTempAndVref+0x148>)
 8008846:	f007 fa17 	bl	800fc78 <HAL_ADC_ConfigChannel>
 800884a:	2800      	cmp	r0, #0
 800884c:	d13e      	bne.n	80088cc <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 800884e:	4d24      	ldr	r5, [pc, #144]	; (80088e0 <ReadTempAndVref+0x148>)
 8008850:	0028      	movs	r0, r5
 8008852:	f007 f959 	bl	800fb08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008856:	2164      	movs	r1, #100	; 0x64
 8008858:	0028      	movs	r0, r5
 800885a:	f007 f9a7 	bl	800fbac <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 800885e:	0028      	movs	r0, r5
 8008860:	f007 fa04 	bl	800fc6c <HAL_ADC_GetValue>
 8008864:	0004      	movs	r4, r0
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <ReadTempAndVref+0x174>)
 8008868:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 800886a:	4b29      	ldr	r3, [pc, #164]	; (8008910 <ReadTempAndVref+0x178>)
 800886c:	8818      	ldrh	r0, [r3, #0]
 800886e:	f7fa f8ed 	bl	8002a4c <__aeabi_i2d>
 8008872:	4a1d      	ldr	r2, [pc, #116]	; (80088e8 <ReadTempAndVref+0x150>)
 8008874:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <ReadTempAndVref+0x154>)
 8008876:	f7f9 fadd 	bl	8001e34 <__aeabi_dmul>
 800887a:	9000      	str	r0, [sp, #0]
 800887c:	9101      	str	r1, [sp, #4]
 800887e:	0420      	lsls	r0, r4, #16
 8008880:	0c00      	lsrs	r0, r0, #16
 8008882:	f7fa f8e3 	bl	8002a4c <__aeabi_i2d>
 8008886:	0002      	movs	r2, r0
 8008888:	000b      	movs	r3, r1
 800888a:	9800      	ldr	r0, [sp, #0]
 800888c:	9901      	ldr	r1, [sp, #4]
 800888e:	f7f8 fec7 	bl	8001620 <__aeabi_ddiv>
 8008892:	f7fa f999 	bl	8002bc8 <__aeabi_d2f>
 8008896:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008898:	0028      	movs	r0, r5
 800889a:	f007 f965 	bl	800fb68 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800889e:	490f      	ldr	r1, [pc, #60]	; (80088dc <ReadTempAndVref+0x144>)
 80088a0:	2311      	movs	r3, #17
 80088a2:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80088a4:	4b18      	ldr	r3, [pc, #96]	; (8008908 <ReadTempAndVref+0x170>)
 80088a6:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088a8:	2301      	movs	r3, #1
 80088aa:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80088ac:	0028      	movs	r0, r5
 80088ae:	f007 f9e3 	bl	800fc78 <HAL_ADC_ConfigChannel>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d10d      	bne.n	80088d2 <ReadTempAndVref+0x13a>
}
 80088b6:	b002      	add	sp, #8
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 80088ba:	f7ff ff43 	bl	8008744 <MX_ADC_Init>
 80088be:	e774      	b.n	80087aa <ReadTempAndVref+0x12>
		Error_Handler();
 80088c0:	f7ff ff3a 	bl	8008738 <Error_Handler>
 80088c4:	e77f      	b.n	80087c6 <ReadTempAndVref+0x2e>
		Error_Handler();
 80088c6:	f7ff ff37 	bl	8008738 <Error_Handler>
 80088ca:	e7b3      	b.n	8008834 <ReadTempAndVref+0x9c>
		Error_Handler();
 80088cc:	f7ff ff34 	bl	8008738 <Error_Handler>
 80088d0:	e7bd      	b.n	800884e <ReadTempAndVref+0xb6>
		Error_Handler();
 80088d2:	f7ff ff31 	bl	8008738 <Error_Handler>
}
 80088d6:	e7ee      	b.n	80088b6 <ReadTempAndVref+0x11e>
 80088d8:	20001508 	.word	0x20001508
 80088dc:	200015a8 	.word	0x200015a8
 80088e0:	20006a80 	.word	0x20006a80
 80088e4:	2000150c 	.word	0x2000150c
 80088e8:	66666666 	.word	0x66666666
 80088ec:	400a6666 	.word	0x400a6666
 80088f0:	40affe00 	.word	0x40affe00
 80088f4:	28f5c28f 	.word	0x28f5c28f
 80088f8:	3ff68f5c 	.word	0x3ff68f5c
 80088fc:	33333333 	.word	0x33333333
 8008900:	40113333 	.word	0x40113333
 8008904:	40390000 	.word	0x40390000
 8008908:	00001001 	.word	0x00001001
 800890c:	2000150a 	.word	0x2000150a
 8008910:	1ffff7ba 	.word	0x1ffff7ba

08008914 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	0004      	movs	r4, r0
 800891a:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 800891c:	1e83      	subs	r3, r0, #2
 800891e:	2b01      	cmp	r3, #1
 8008920:	d901      	bls.n	8008926 <GetReadPrecentage+0x12>
}
 8008922:	b006      	add	sp, #24
 8008924:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 8008926:	4b3e      	ldr	r3, [pc, #248]	; (8008a20 <GetReadPrecentage+0x10c>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d055      	beq.n	80089da <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800892e:	2090      	movs	r0, #144	; 0x90
 8008930:	2201      	movs	r2, #1
 8008932:	2110      	movs	r1, #16
 8008934:	05c0      	lsls	r0, r0, #23
 8008936:	f008 fbcf 	bl	80110d8 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 800893a:	0020      	movs	r0, r4
 800893c:	f004 fde8 	bl	800d510 <GetUart>
 8008940:	4938      	ldr	r1, [pc, #224]	; (8008a24 <GetReadPrecentage+0x110>)
 8008942:	f7ff fed5 	bl	80086f0 <Get_channel>
 8008946:	4b38      	ldr	r3, [pc, #224]	; (8008a28 <GetReadPrecentage+0x114>)
 8008948:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 800894a:	4938      	ldr	r1, [pc, #224]	; (8008a2c <GetReadPrecentage+0x118>)
 800894c:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800894e:	2380      	movs	r3, #128	; 0x80
 8008950:	015b      	lsls	r3, r3, #5
 8008952:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008954:	2301      	movs	r3, #1
 8008956:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008958:	4835      	ldr	r0, [pc, #212]	; (8008a30 <GetReadPrecentage+0x11c>)
 800895a:	f007 f98d 	bl	800fc78 <HAL_ADC_ConfigChannel>
 800895e:	2800      	cmp	r0, #0
 8008960:	d15b      	bne.n	8008a1a <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008962:	4c33      	ldr	r4, [pc, #204]	; (8008a30 <GetReadPrecentage+0x11c>)
 8008964:	0020      	movs	r0, r4
 8008966:	f007 f8cf 	bl	800fb08 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 800896a:	2164      	movs	r1, #100	; 0x64
 800896c:	0020      	movs	r0, r4
 800896e:	f007 f91d 	bl	800fbac <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008972:	0020      	movs	r0, r4
 8008974:	f007 f97a 	bl	800fc6c <HAL_ADC_GetValue>
 8008978:	f7f8 faf6 	bl	8000f68 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 800897c:	f7fa f8d2 	bl	8002b24 <__aeabi_f2d>
 8008980:	4a2c      	ldr	r2, [pc, #176]	; (8008a34 <GetReadPrecentage+0x120>)
 8008982:	4b2d      	ldr	r3, [pc, #180]	; (8008a38 <GetReadPrecentage+0x124>)
 8008984:	f7f9 fa56 	bl	8001e34 <__aeabi_dmul>
 8008988:	2200      	movs	r2, #0
 800898a:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <GetReadPrecentage+0x128>)
 800898c:	f7f8 fe48 	bl	8001620 <__aeabi_ddiv>
 8008990:	f7fa f91a 	bl	8002bc8 <__aeabi_d2f>
 8008994:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <GetReadPrecentage+0x12c>)
 8008996:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008998:	492a      	ldr	r1, [pc, #168]	; (8008a44 <GetReadPrecentage+0x130>)
 800899a:	f7f7 ffcf 	bl	800093c <__aeabi_fmul>
 800899e:	f7fa f8c1 	bl	8002b24 <__aeabi_f2d>
 80089a2:	4a24      	ldr	r2, [pc, #144]	; (8008a34 <GetReadPrecentage+0x120>)
 80089a4:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <GetReadPrecentage+0x124>)
 80089a6:	f7f8 fe3b 	bl	8001620 <__aeabi_ddiv>
 80089aa:	f7fa f90d 	bl	8002bc8 <__aeabi_d2f>
 80089ae:	4b26      	ldr	r3, [pc, #152]	; (8008a48 <GetReadPrecentage+0x134>)
 80089b0:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 80089b2:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 80089b4:	0020      	movs	r0, r4
 80089b6:	f007 f8d7 	bl	800fb68 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 80089ba:	491c      	ldr	r1, [pc, #112]	; (8008a2c <GetReadPrecentage+0x118>)
 80089bc:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <GetReadPrecentage+0x114>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80089c2:	4b22      	ldr	r3, [pc, #136]	; (8008a4c <GetReadPrecentage+0x138>)
 80089c4:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089c6:	2301      	movs	r3, #1
 80089c8:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089ca:	0020      	movs	r0, r4
 80089cc:	f007 f954 	bl	800fc78 <HAL_ADC_ConfigChannel>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d0a6      	beq.n	8008922 <GetReadPrecentage+0xe>
			Error_Handler();
 80089d4:	f7ff feb0 	bl	8008738 <Error_Handler>
 80089d8:	e7a3      	b.n	8008922 <GetReadPrecentage+0xe>
			MX_ADC_Init();
 80089da:	f7ff feb3 	bl	8008744 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 80089de:	0020      	movs	r0, r4
 80089e0:	f004 fd96 	bl	800d510 <GetUart>
 80089e4:	f009 fc09 	bl	80121fa <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 80089e8:	2690      	movs	r6, #144	; 0x90
 80089ea:	05f6      	lsls	r6, r6, #23
 80089ec:	2110      	movs	r1, #16
 80089ee:	0030      	movs	r0, r6
 80089f0:	f008 fade 	bl	8010fb0 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 80089f4:	480e      	ldr	r0, [pc, #56]	; (8008a30 <GetReadPrecentage+0x11c>)
 80089f6:	f007 f9e3 	bl	800fdc0 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089fa:	2310      	movs	r3, #16
 80089fc:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089fe:	3b0f      	subs	r3, #15
 8008a00:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008a02:	3302      	adds	r3, #2
 8008a04:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008a06:	a901      	add	r1, sp, #4
 8008a08:	0030      	movs	r0, r6
 8008a0a:	f008 f9f1 	bl	8010df0 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008a0e:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <GetReadPrecentage+0x13c>)
 8008a10:	191b      	adds	r3, r3, r4
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2206      	movs	r2, #6
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e789      	b.n	800892e <GetReadPrecentage+0x1a>
			Error_Handler();
 8008a1a:	f7ff fe8d 	bl	8008738 <Error_Handler>
 8008a1e:	e7a0      	b.n	8008962 <GetReadPrecentage+0x4e>
 8008a20:	20001508 	.word	0x20001508
 8008a24:	08018640 	.word	0x08018640
 8008a28:	20001518 	.word	0x20001518
 8008a2c:	200015a8 	.word	0x200015a8
 8008a30:	20006a80 	.word	0x20006a80
 8008a34:	66666666 	.word	0x66666666
 8008a38:	400a6666 	.word	0x400a6666
 8008a3c:	40affe00 	.word	0x40affe00
 8008a40:	2000156c 	.word	0x2000156c
 8008a44:	42c80000 	.word	0x42c80000
 8008a48:	2000155c 	.word	0x2000155c
 8008a4c:	00001001 	.word	0x00001001
 8008a50:	200010f8 	.word	0x200010f8

08008a54 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008a54:	2802      	cmp	r0, #2
 8008a56:	d004      	beq.n	8008a62 <Get_Rank+0xe>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008a58:	2803      	cmp	r0, #3
 8008a5a:	d010      	beq.n	8008a7e <Get_Rank+0x2a>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <Get_Rank+0x48>)
 8008a5e:	7818      	ldrb	r0, [r3, #0]
}
 8008a60:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008a62:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <Get_Rank+0x4c>)
 8008a64:	4299      	cmp	r1, r3
 8008a66:	d006      	beq.n	8008a76 <Get_Rank+0x22>
	else if(Port == 2 && side == "bottom")
 8008a68:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <Get_Rank+0x50>)
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	d1f6      	bne.n	8008a5c <Get_Rank+0x8>
		Rank_t =1;
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <Get_Rank+0x48>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	e7f2      	b.n	8008a5c <Get_Rank+0x8>
		Rank_t =0;
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <Get_Rank+0x48>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e7ee      	b.n	8008a5c <Get_Rank+0x8>
	else if(Port == 3 && side == "top")
 8008a7e:	4b08      	ldr	r3, [pc, #32]	; (8008aa0 <Get_Rank+0x4c>)
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d006      	beq.n	8008a92 <Get_Rank+0x3e>
	else if(Port == 3 && side == "bottom")
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <Get_Rank+0x50>)
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d1e8      	bne.n	8008a5c <Get_Rank+0x8>
		Rank_t =3;
 8008a8a:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <Get_Rank+0x48>)
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e7e4      	b.n	8008a5c <Get_Rank+0x8>
		Rank_t =2;
 8008a92:	4b02      	ldr	r3, [pc, #8]	; (8008a9c <Get_Rank+0x48>)
 8008a94:	2202      	movs	r2, #2
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	e7e0      	b.n	8008a5c <Get_Rank+0x8>
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	20001519 	.word	0x20001519
 8008aa0:	0801863c 	.word	0x0801863c
 8008aa4:	08018640 	.word	0x08018640

08008aa8 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	0004      	movs	r4, r0
 8008aac:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008aae:	1e83      	subs	r3, r0, #2
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d900      	bls.n	8008ab6 <ADCSelectChannel+0xe>
}
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008ab6:	f004 fd2b 	bl	800d510 <GetUart>
 8008aba:	f009 fb9e 	bl	80121fa <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008abe:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <ADCSelectChannel+0x4c>)
 8008ac0:	191b      	adds	r3, r3, r4
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	2206      	movs	r2, #6
 8008ac6:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008ac8:	0020      	movs	r0, r4
 8008aca:	f004 fd21 	bl	800d510 <GetUart>
 8008ace:	0029      	movs	r1, r5
 8008ad0:	f7ff fe0e 	bl	80086f0 <Get_channel>
 8008ad4:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <ADCSelectChannel+0x50>)
 8008ad6:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008ad8:	0029      	movs	r1, r5
 8008ada:	0020      	movs	r0, r4
 8008adc:	f7ff ffba 	bl	8008a54 <Get_Rank>
 8008ae0:	4b06      	ldr	r3, [pc, #24]	; (8008afc <ADCSelectChannel+0x54>)
 8008ae2:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <ADCSelectChannel+0x58>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e3      	bne.n	8008ab4 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008aec:	f7ff fe2a 	bl	8008744 <MX_ADC_Init>
}
 8008af0:	e7e0      	b.n	8008ab4 <ADCSelectChannel+0xc>
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	200010f8 	.word	0x200010f8
 8008af8:	20001518 	.word	0x20001518
 8008afc:	20001519 	.word	0x20001519
 8008b00:	20001508 	.word	0x20001508

08008b04 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	0005      	movs	r5, r0
 8008b08:	000e      	movs	r6, r1
 8008b0a:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008b0c:	4b26      	ldr	r3, [pc, #152]	; (8008ba8 <ReadADCChannel+0xa4>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d008      	beq.n	8008b26 <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <ReadADCChannel+0xa8>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	4a25      	ldr	r2, [pc, #148]	; (8008bb0 <ReadADCChannel+0xac>)
 8008b1c:	5a98      	ldrh	r0, [r3, r2]
 8008b1e:	f7f8 fa23 	bl	8000f68 <__aeabi_ui2f>
 8008b22:	6020      	str	r0, [r4, #0]
}
 8008b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008b26:	f004 fcf3 	bl	800d510 <GetUart>
 8008b2a:	0031      	movs	r1, r6
 8008b2c:	f7ff fde0 	bl	80086f0 <Get_channel>
 8008b30:	4f20      	ldr	r7, [pc, #128]	; (8008bb4 <ReadADCChannel+0xb0>)
 8008b32:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008b34:	0031      	movs	r1, r6
 8008b36:	0028      	movs	r0, r5
 8008b38:	f7ff ff8c 	bl	8008a54 <Get_Rank>
 8008b3c:	4b1b      	ldr	r3, [pc, #108]	; (8008bac <ReadADCChannel+0xa8>)
 8008b3e:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008b40:	491d      	ldr	r1, [pc, #116]	; (8008bb8 <ReadADCChannel+0xb4>)
 8008b42:	783b      	ldrb	r3, [r7, #0]
 8008b44:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b46:	2380      	movs	r3, #128	; 0x80
 8008b48:	015b      	lsls	r3, r3, #5
 8008b4a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b50:	481a      	ldr	r0, [pc, #104]	; (8008bbc <ReadADCChannel+0xb8>)
 8008b52:	f007 f891 	bl	800fc78 <HAL_ADC_ConfigChannel>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d122      	bne.n	8008ba0 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008b5a:	4d18      	ldr	r5, [pc, #96]	; (8008bbc <ReadADCChannel+0xb8>)
 8008b5c:	0028      	movs	r0, r5
 8008b5e:	f006 ffd3 	bl	800fb08 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008b62:	2164      	movs	r1, #100	; 0x64
 8008b64:	0028      	movs	r0, r5
 8008b66:	f007 f821 	bl	800fbac <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008b6a:	0028      	movs	r0, r5
 8008b6c:	f007 f87e 	bl	800fc6c <HAL_ADC_GetValue>
 8008b70:	4b0e      	ldr	r3, [pc, #56]	; (8008bac <ReadADCChannel+0xa8>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4a0e      	ldr	r2, [pc, #56]	; (8008bb0 <ReadADCChannel+0xac>)
 8008b78:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008b7a:	0028      	movs	r0, r5
 8008b7c:	f006 fff4 	bl	800fb68 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008b80:	490d      	ldr	r1, [pc, #52]	; (8008bb8 <ReadADCChannel+0xb4>)
 8008b82:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <ReadADCChannel+0xb0>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008b88:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <ReadADCChannel+0xbc>)
 8008b8a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b90:	0028      	movs	r0, r5
 8008b92:	f007 f871 	bl	800fc78 <HAL_ADC_ConfigChannel>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0bc      	beq.n	8008b14 <ReadADCChannel+0x10>
			Error_Handler();
 8008b9a:	f7ff fdcd 	bl	8008738 <Error_Handler>
 8008b9e:	e7b9      	b.n	8008b14 <ReadADCChannel+0x10>
			Error_Handler();
 8008ba0:	f7ff fdca 	bl	8008738 <Error_Handler>
 8008ba4:	e7d9      	b.n	8008b5a <ReadADCChannel+0x56>
 8008ba6:	46c0      	nop			; (mov r8, r8)
 8008ba8:	20001508 	.word	0x20001508
 8008bac:	20001519 	.word	0x20001519
 8008bb0:	20001510 	.word	0x20001510
 8008bb4:	20001518 	.word	0x20001518
 8008bb8:	200015a8 	.word	0x200015a8
 8008bbc:	20006a80 	.word	0x20006a80
 8008bc0:	00001001 	.word	0x00001001

08008bc4 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8008bc4:	4770      	bx	lr

08008bc6 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8008bc6:	4770      	bx	lr

08008bc8 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8008bc8:	4770      	bx	lr

08008bca <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008bca:	4770      	bx	lr

08008bcc <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8008bcc:	4770      	bx	lr
	...

08008bd0 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd2:	46de      	mov	lr, fp
 8008bd4:	4657      	mov	r7, sl
 8008bd6:	464e      	mov	r6, r9
 8008bd8:	4645      	mov	r5, r8
 8008bda:	b5e0      	push	{r5, r6, r7, lr}
 8008bdc:	b089      	sub	sp, #36	; 0x24
 8008bde:	4dbd      	ldr	r5, [pc, #756]	; (8008ed4 <CheckAttachedButtons+0x304>)
 8008be0:	3509      	adds	r5, #9
 8008be2:	2404      	movs	r4, #4
 8008be4:	2601      	movs	r6, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	469b      	mov	fp, r3
 8008bea:	4699      	mov	r9, r3
 8008bec:	e111      	b.n	8008e12 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008bee:	230e      	movs	r3, #14
 8008bf0:	aa02      	add	r2, sp, #8
 8008bf2:	4694      	mov	ip, r2
 8008bf4:	4463      	add	r3, ip
 8008bf6:	8819      	ldrh	r1, [r3, #0]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	9807      	ldr	r0, [sp, #28]
 8008bfc:	f008 fa6c 	bl	80110d8 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008c00:	200a      	movs	r0, #10
 8008c02:	f004 fa8b 	bl	800d11c <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008c06:	ab05      	add	r3, sp, #20
 8008c08:	8819      	ldrh	r1, [r3, #0]
 8008c0a:	9806      	ldr	r0, [sp, #24]
 8008c0c:	f008 fa5e 	bl	80110cc <HAL_GPIO_ReadPin>
 8008c10:	4681      	mov	r9, r0
 8008c12:	e126      	b.n	8008e62 <CheckAttachedButtons+0x292>
			switch(button[i].type){
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d105      	bne.n	8008c24 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008c18:	464b      	mov	r3, r9
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d046      	beq.n	8008cac <CheckAttachedButtons+0xdc>
					else if(connected == GPIO_PIN_RESET)
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d100      	bne.n	8008c24 <CheckAttachedButtons+0x54>
 8008c22:	e1c5      	b.n	8008fb0 <CheckAttachedButtons+0x3e0>
			if(state == CLOSED || state == ON){
 8008c24:	465b      	mov	r3, fp
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d001      	beq.n	8008c2e <CheckAttachedButtons+0x5e>
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d107      	bne.n	8008c3e <CheckAttachedButtons+0x6e>
				if(pressCounter[i] < 0xFFFF)
 8008c2e:	4baa      	ldr	r3, [pc, #680]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008c30:	58e3      	ldr	r3, [r4, r3]
 8008c32:	4aaa      	ldr	r2, [pc, #680]	; (8008edc <CheckAttachedButtons+0x30c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d842      	bhi.n	8008cbe <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4aa7      	ldr	r2, [pc, #668]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008c3c:	50a3      	str	r3, [r4, r2]
			if(state == OPEN || state == OFF){
 8008c3e:	23fd      	movs	r3, #253	; 0xfd
 8008c40:	465a      	mov	r2, fp
 8008c42:	4013      	ands	r3, r2
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d100      	bne.n	8008c4a <CheckAttachedButtons+0x7a>
 8008c48:	e1b6      	b.n	8008fb8 <CheckAttachedButtons+0x3e8>
			if(pressCounter[i] < BOS.buttons.debounce){
 8008c4a:	4ba3      	ldr	r3, [pc, #652]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008c4c:	58e3      	ldr	r3, [r4, r3]
 8008c4e:	4aa4      	ldr	r2, [pc, #656]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008c50:	8812      	ldrh	r2, [r2, #0]
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d36f      	bcc.n	8008d36 <CheckAttachedButtons+0x166>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008c56:	d045      	beq.n	8008ce4 <CheckAttachedButtons+0x114>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008c58:	4ba2      	ldr	r3, [pc, #648]	; (8008ee4 <CheckAttachedButtons+0x314>)
 8008c5a:	58e3      	ldr	r3, [r4, r3]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d202      	bcs.n	8008c66 <CheckAttachedButtons+0x96>
					releaseCounter[i] =0;
 8008c60:	4ba0      	ldr	r3, [pc, #640]	; (8008ee4 <CheckAttachedButtons+0x314>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	50e2      	str	r2, [r4, r3]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008c66:	4b9c      	ldr	r3, [pc, #624]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008c68:	58e3      	ldr	r3, [r4, r3]
 8008c6a:	4a9d      	ldr	r2, [pc, #628]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008c6c:	8852      	ldrh	r2, [r2, #2]
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d952      	bls.n	8008d18 <CheckAttachedButtons+0x148>
 8008c72:	22f4      	movs	r2, #244	; 0xf4
 8008c74:	32ff      	adds	r2, #255	; 0xff
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d84e      	bhi.n	8008d18 <CheckAttachedButtons+0x148>
					if(clicked == 0)
 8008c7a:	4b9b      	ldr	r3, [pc, #620]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d137      	bne.n	8008cf2 <CheckAttachedButtons+0x122>
						clicked =1;		// Record a possible single click
 8008c82:	4b99      	ldr	r3, [pc, #612]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008c84:	3af3      	subs	r2, #243	; 0xf3
 8008c86:	3aff      	subs	r2, #255	; 0xff
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e054      	b.n	8008d36 <CheckAttachedButtons+0x166>
					if(connected == GPIO_PIN_SET)
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d00f      	beq.n	8008cb2 <CheckAttachedButtons+0xe2>
					else if(connected == GPIO_PIN_RESET)
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1c6      	bne.n	8008c24 <CheckAttachedButtons+0x54>
						state =OPEN;
 8008c96:	2303      	movs	r3, #3
 8008c98:	469b      	mov	fp, r3
 8008c9a:	e18d      	b.n	8008fb8 <CheckAttachedButtons+0x3e8>
					if(connected == GPIO_PIN_SET)
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d00a      	beq.n	8008cb8 <CheckAttachedButtons+0xe8>
					else if(connected == GPIO_PIN_RESET)
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1be      	bne.n	8008c24 <CheckAttachedButtons+0x54>
						state =OFF;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	469b      	mov	fp, r3
 8008caa:	e185      	b.n	8008fb8 <CheckAttachedButtons+0x3e8>
						state =CLOSED;
 8008cac:	2304      	movs	r3, #4
 8008cae:	469b      	mov	fp, r3
 8008cb0:	e7bd      	b.n	8008c2e <CheckAttachedButtons+0x5e>
						state =CLOSED;
 8008cb2:	2304      	movs	r3, #4
 8008cb4:	469b      	mov	fp, r3
 8008cb6:	e7ba      	b.n	8008c2e <CheckAttachedButtons+0x5e>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	469b      	mov	fp, r3
 8008cbc:	e7b7      	b.n	8008c2e <CheckAttachedButtons+0x5e>
					pressCounter[i] =0;			// Reset debounce counter
 8008cbe:	4b86      	ldr	r3, [pc, #536]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	50e2      	str	r2, [r4, r3]
 8008cc4:	e7bb      	b.n	8008c3e <CheckAttachedButtons+0x6e>
					releaseCounter[i] =0;		// Reset debounce counter
 8008cc6:	4b87      	ldr	r3, [pc, #540]	; (8008ee4 <CheckAttachedButtons+0x314>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	50e2      	str	r2, [r4, r3]
 8008ccc:	e17d      	b.n	8008fca <CheckAttachedButtons+0x3fa>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008cce:	4b87      	ldr	r3, [pc, #540]	; (8008eec <CheckAttachedButtons+0x31c>)
 8008cd0:	5cf3      	ldrb	r3, [r6, r3]
 8008cd2:	4a83      	ldr	r2, [pc, #524]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008cd4:	7952      	ldrb	r2, [r2, #5]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d200      	bcs.n	8008cdc <CheckAttachedButtons+0x10c>
 8008cda:	e182      	b.n	8008fe2 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a83      	ldr	r2, [pc, #524]	; (8008eec <CheckAttachedButtons+0x31c>)
 8008ce0:	54b3      	strb	r3, [r6, r2]
 8008ce2:	e7b2      	b.n	8008c4a <CheckAttachedButtons+0x7a>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008ce4:	2107      	movs	r1, #7
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 8008cea:	3301      	adds	r3, #1
 8008cec:	497a      	ldr	r1, [pc, #488]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008cee:	5063      	str	r3, [r4, r1]
 8008cf0:	e7b2      	b.n	8008c58 <CheckAttachedButtons+0x88>
					else if(clicked == 2){
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d11f      	bne.n	8008d36 <CheckAttachedButtons+0x166>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008cf6:	4b7d      	ldr	r3, [pc, #500]	; (8008eec <CheckAttachedButtons+0x31c>)
 8008cf8:	5cf3      	ldrb	r3, [r6, r3]
 8008cfa:	4a79      	ldr	r2, [pc, #484]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008cfc:	7912      	ldrb	r2, [r2, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d219      	bcs.n	8008d36 <CheckAttachedButtons+0x166>
 8008d02:	4a77      	ldr	r2, [pc, #476]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008d04:	7952      	ldrb	r2, [r2, #5]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d915      	bls.n	8008d36 <CheckAttachedButtons+0x166>
							clicked =3;	// Record a possible double click
 8008d0a:	4b77      	ldr	r3, [pc, #476]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008d0c:	2203      	movs	r2, #3
 8008d0e:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8008d10:	4b76      	ldr	r3, [pc, #472]	; (8008eec <CheckAttachedButtons+0x31c>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	54f2      	strb	r2, [r6, r3]
 8008d16:	e00e      	b.n	8008d36 <CheckAttachedButtons+0x166>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008d18:	3bf5      	subs	r3, #245	; 0xf5
 8008d1a:	3bff      	subs	r3, #255	; 0xff
 8008d1c:	4a74      	ldr	r2, [pc, #464]	; (8008ef0 <CheckAttachedButtons+0x320>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d809      	bhi.n	8008d36 <CheckAttachedButtons+0x166>
					if(clicked)
 8008d22:	4b71      	ldr	r3, [pc, #452]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <CheckAttachedButtons+0x160>
						clicked =0;						// Cannot be a click
 8008d2a:	4b6f      	ldr	r3, [pc, #444]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008d30:	9803      	ldr	r0, [sp, #12]
 8008d32:	f7ff f9bd 	bl	80080b0 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008d36:	4b6b      	ldr	r3, [pc, #428]	; (8008ee4 <CheckAttachedButtons+0x314>)
 8008d38:	58e3      	ldr	r3, [r4, r3]
 8008d3a:	4a69      	ldr	r2, [pc, #420]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008d3c:	8812      	ldrh	r2, [r2, #0]
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d34d      	bcc.n	8008dde <CheckAttachedButtons+0x20e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 8008d42:	d02b      	beq.n	8008d9c <CheckAttachedButtons+0x1cc>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008d44:	4b64      	ldr	r3, [pc, #400]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008d46:	58e3      	ldr	r3, [r4, r3]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d202      	bcs.n	8008d52 <CheckAttachedButtons+0x182>
					pressCounter[i] =0;
 8008d4c:	4b62      	ldr	r3, [pc, #392]	; (8008ed8 <CheckAttachedButtons+0x308>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	50e2      	str	r2, [r4, r3]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8008d52:	4b64      	ldr	r3, [pc, #400]	; (8008ee4 <CheckAttachedButtons+0x314>)
 8008d54:	58e3      	ldr	r3, [r4, r3]
 8008d56:	4a62      	ldr	r2, [pc, #392]	; (8008ee0 <CheckAttachedButtons+0x310>)
 8008d58:	8852      	ldrh	r2, [r2, #2]
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d93a      	bls.n	8008dd4 <CheckAttachedButtons+0x204>
 8008d5e:	22f4      	movs	r2, #244	; 0xf4
 8008d60:	32ff      	adds	r2, #255	; 0xff
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d836      	bhi.n	8008dd4 <CheckAttachedButtons+0x204>
					if(clicked == 1){
 8008d66:	4b60      	ldr	r3, [pc, #384]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d01d      	beq.n	8008daa <CheckAttachedButtons+0x1da>
					else if(clicked == 3){
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d135      	bne.n	8008dde <CheckAttachedButtons+0x20e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8008d72:	3303      	adds	r3, #3
 8008d74:	4642      	mov	r2, r8
 8008d76:	7013      	strb	r3, [r2, #0]
						clicked =0;			// Prepare for a single click
 8008d78:	4b5b      	ldr	r3, [pc, #364]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8008d7e:	4b5d      	ldr	r3, [pc, #372]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d13f      	bne.n	8008e06 <CheckAttachedButtons+0x236>
 8008d86:	4643      	mov	r3, r8
 8008d88:	7a1b      	ldrb	r3, [r3, #8]
 8008d8a:	079b      	lsls	r3, r3, #30
 8008d8c:	d53b      	bpl.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008d8e:	4b59      	ldr	r3, [pc, #356]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8008d94:	9803      	ldr	r0, [sp, #12]
 8008d96:	f7ff ff17 	bl	8008bc8 <buttonDblClickedCallback>
 8008d9a:	e034      	b.n	8008e06 <CheckAttachedButtons+0x236>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8008d9c:	2108      	movs	r1, #8
 8008d9e:	4640      	mov	r0, r8
 8008da0:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 8008da2:	3301      	adds	r3, #1
 8008da4:	494f      	ldr	r1, [pc, #316]	; (8008ee4 <CheckAttachedButtons+0x314>)
 8008da6:	5063      	str	r3, [r4, r1]
 8008da8:	e7cc      	b.n	8008d44 <CheckAttachedButtons+0x174>
						button[i].state =CLICKED;	// Record a single button click event
 8008daa:	3304      	adds	r3, #4
 8008dac:	4642      	mov	r2, r8
 8008dae:	7013      	strb	r3, [r2, #0]
						clicked =2;			// Prepare for a double click
 8008db0:	4b4d      	ldr	r3, [pc, #308]	; (8008ee8 <CheckAttachedButtons+0x318>)
 8008db2:	2202      	movs	r2, #2
 8008db4:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8008db6:	4b4f      	ldr	r3, [pc, #316]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d123      	bne.n	8008e06 <CheckAttachedButtons+0x236>
 8008dbe:	4643      	mov	r3, r8
 8008dc0:	7a1b      	ldrb	r3, [r3, #8]
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d51f      	bpl.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008dc6:	4b4b      	ldr	r3, [pc, #300]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8008dcc:	9803      	ldr	r0, [sp, #12]
 8008dce:	f7ff fefa 	bl	8008bc6 <buttonClickedCallback>
 8008dd2:	e018      	b.n	8008e06 <CheckAttachedButtons+0x236>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8008dd4:	3bf5      	subs	r3, #245	; 0xf5
 8008dd6:	3bff      	subs	r3, #255	; 0xff
 8008dd8:	4a45      	ldr	r2, [pc, #276]	; (8008ef0 <CheckAttachedButtons+0x320>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d909      	bls.n	8008df2 <CheckAttachedButtons+0x222>
			switch(button[i].state){
 8008dde:	4643      	mov	r3, r8
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	3b05      	subs	r3, #5
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	2a09      	cmp	r2, #9
 8008de8:	d80d      	bhi.n	8008e06 <CheckAttachedButtons+0x236>
 8008dea:	0093      	lsls	r3, r2, #2
 8008dec:	4a42      	ldr	r2, [pc, #264]	; (8008ef8 <CheckAttachedButtons+0x328>)
 8008dee:	58d3      	ldr	r3, [r2, r3]
 8008df0:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008df2:	9803      	ldr	r0, [sp, #12]
 8008df4:	f7ff f99a 	bl	800812c <CheckForTimedButtonRelease>
 8008df8:	e7f1      	b.n	8008dde <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 8008dfa:	9803      	ldr	r0, [sp, #12]
 8008dfc:	f7ff f956 	bl	80080ac <buttonPressedCallback>
					button[i].state =NONE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	4642      	mov	r2, r8
 8008e04:	7013      	strb	r3, [r2, #0]
 8008e06:	3601      	adds	r6, #1
 8008e08:	3509      	adds	r5, #9
 8008e0a:	3404      	adds	r4, #4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8008e0c:	2c1c      	cmp	r4, #28
 8008e0e:	d100      	bne.n	8008e12 <CheckAttachedButtons+0x242>
 8008e10:	e0ed      	b.n	8008fee <CheckAttachedButtons+0x41e>
 8008e12:	b2f3      	uxtb	r3, r6
 8008e14:	9303      	str	r3, [sp, #12]
 8008e16:	46a8      	mov	r8, r5
		if(button[i].type)			// Only check defined butons
 8008e18:	786b      	ldrb	r3, [r5, #1]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f3      	beq.n	8008e06 <CheckAttachedButtons+0x236>
			if(delayButtonStateReset == false)
 8008e1e:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d100      	bne.n	8008e28 <CheckAttachedButtons+0x258>
				button[i].state =NONE;
 8008e26:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008e28:	230e      	movs	r3, #14
 8008e2a:	aa02      	add	r2, sp, #8
 8008e2c:	4694      	mov	ip, r2
 8008e2e:	4463      	add	r3, ip
 8008e30:	469a      	mov	sl, r3
 8008e32:	af05      	add	r7, sp, #20
 8008e34:	9700      	str	r7, [sp, #0]
 8008e36:	ab06      	add	r3, sp, #24
 8008e38:	4652      	mov	r2, sl
 8008e3a:	a907      	add	r1, sp, #28
 8008e3c:	9803      	ldr	r0, [sp, #12]
 8008e3e:	f003 fdab 	bl	800c998 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e42:	4653      	mov	r3, sl
 8008e44:	8819      	ldrh	r1, [r3, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	9807      	ldr	r0, [sp, #28]
 8008e4a:	f008 f945 	bl	80110d8 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008e4e:	200a      	movs	r0, #10
 8008e50:	f004 f964 	bl	800d11c <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8008e54:	8839      	ldrh	r1, [r7, #0]
 8008e56:	9806      	ldr	r0, [sp, #24]
 8008e58:	f008 f938 	bl	80110cc <HAL_GPIO_ReadPin>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d100      	bne.n	8008e62 <CheckAttachedButtons+0x292>
 8008e60:	e6c5      	b.n	8008bee <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e62:	230e      	movs	r3, #14
 8008e64:	aa02      	add	r2, sp, #8
 8008e66:	4694      	mov	ip, r2
 8008e68:	4463      	add	r3, ip
 8008e6a:	8819      	ldrh	r1, [r3, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	9807      	ldr	r0, [sp, #28]
 8008e70:	f008 f932 	bl	80110d8 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8008e74:	4643      	mov	r3, r8
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d100      	bne.n	8008e7e <CheckAttachedButtons+0x2ae>
 8008e7c:	e706      	b.n	8008c8c <CheckAttachedButtons+0xbc>
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	2a02      	cmp	r2, #2
 8008e82:	d800      	bhi.n	8008e86 <CheckAttachedButtons+0x2b6>
 8008e84:	e6c6      	b.n	8008c14 <CheckAttachedButtons+0x44>
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d100      	bne.n	8008e8c <CheckAttachedButtons+0x2bc>
 8008e8a:	e707      	b.n	8008c9c <CheckAttachedButtons+0xcc>
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d000      	beq.n	8008e92 <CheckAttachedButtons+0x2c2>
 8008e90:	e6c8      	b.n	8008c24 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008e92:	464b      	mov	r3, r9
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d100      	bne.n	8008e9a <CheckAttachedButtons+0x2ca>
 8008e98:	e08d      	b.n	8008fb6 <CheckAttachedButtons+0x3e6>
					else if(connected == GPIO_PIN_RESET)
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d000      	beq.n	8008ea0 <CheckAttachedButtons+0x2d0>
 8008e9e:	e6c1      	b.n	8008c24 <CheckAttachedButtons+0x54>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	469b      	mov	fp, r3
 8008ea4:	e6c3      	b.n	8008c2e <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 8008ea6:	9803      	ldr	r0, [sp, #12]
 8008ea8:	f7ff fe8c 	bl	8008bc4 <buttonReleasedCallback>
					button[i].state =NONE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	4642      	mov	r2, r8
 8008eb0:	7013      	strb	r3, [r2, #0]
					break;
 8008eb2:	e7a8      	b.n	8008e06 <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8008eb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1a4      	bne.n	8008e06 <CheckAttachedButtons+0x236>
 8008ebc:	4643      	mov	r3, r8
 8008ebe:	7a1b      	ldrb	r3, [r3, #8]
 8008ec0:	075b      	lsls	r3, r3, #29
 8008ec2:	d5a0      	bpl.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <CheckAttachedButtons+0x324>)
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8008eca:	2101      	movs	r1, #1
 8008ecc:	9803      	ldr	r0, [sp, #12]
 8008ece:	f7ff fe7c 	bl	8008bca <buttonPressedForXCallback>
 8008ed2:	e798      	b.n	8008e06 <CheckAttachedButtons+0x236>
 8008ed4:	2000151c 	.word	0x2000151c
 8008ed8:	20001570 	.word	0x20001570
 8008edc:	0000fffe 	.word	0x0000fffe
 8008ee0:	200069c8 	.word	0x200069c8
 8008ee4:	2000158c 	.word	0x2000158c
 8008ee8:	2000155b 	.word	0x2000155b
 8008eec:	20001560 	.word	0x20001560
 8008ef0:	0000fe0a 	.word	0x0000fe0a
 8008ef4:	20001567 	.word	0x20001567
 8008ef8:	0801a4c0 	.word	0x0801a4c0
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8008efc:	4b3f      	ldr	r3, [pc, #252]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d000      	beq.n	8008f06 <CheckAttachedButtons+0x336>
 8008f04:	e77f      	b.n	8008e06 <CheckAttachedButtons+0x236>
 8008f06:	4643      	mov	r3, r8
 8008f08:	7a1b      	ldrb	r3, [r3, #8]
 8008f0a:	071b      	lsls	r3, r3, #28
 8008f0c:	d400      	bmi.n	8008f10 <CheckAttachedButtons+0x340>
 8008f0e:	e77a      	b.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f10:	4b3a      	ldr	r3, [pc, #232]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008f16:	2102      	movs	r1, #2
 8008f18:	9803      	ldr	r0, [sp, #12]
 8008f1a:	f7ff fe56 	bl	8008bca <buttonPressedForXCallback>
 8008f1e:	e772      	b.n	8008e06 <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8008f20:	4b36      	ldr	r3, [pc, #216]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d000      	beq.n	8008f2a <CheckAttachedButtons+0x35a>
 8008f28:	e76d      	b.n	8008e06 <CheckAttachedButtons+0x236>
 8008f2a:	4643      	mov	r3, r8
 8008f2c:	7a1b      	ldrb	r3, [r3, #8]
 8008f2e:	06db      	lsls	r3, r3, #27
 8008f30:	d400      	bmi.n	8008f34 <CheckAttachedButtons+0x364>
 8008f32:	e768      	b.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f34:	4b31      	ldr	r3, [pc, #196]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8008f3a:	2103      	movs	r1, #3
 8008f3c:	9803      	ldr	r0, [sp, #12]
 8008f3e:	f7ff fe44 	bl	8008bca <buttonPressedForXCallback>
 8008f42:	e760      	b.n	8008e06 <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 8008f44:	4b2d      	ldr	r3, [pc, #180]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d000      	beq.n	8008f4e <CheckAttachedButtons+0x37e>
 8008f4c:	e75b      	b.n	8008e06 <CheckAttachedButtons+0x236>
 8008f4e:	4643      	mov	r3, r8
 8008f50:	7a1b      	ldrb	r3, [r3, #8]
 8008f52:	069b      	lsls	r3, r3, #26
 8008f54:	d400      	bmi.n	8008f58 <CheckAttachedButtons+0x388>
 8008f56:	e756      	b.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f58:	4b28      	ldr	r3, [pc, #160]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8008f5e:	2101      	movs	r1, #1
 8008f60:	9803      	ldr	r0, [sp, #12]
 8008f62:	f7ff fe33 	bl	8008bcc <buttonReleasedForYCallback>
 8008f66:	e74e      	b.n	8008e06 <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8008f68:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d000      	beq.n	8008f72 <CheckAttachedButtons+0x3a2>
 8008f70:	e749      	b.n	8008e06 <CheckAttachedButtons+0x236>
 8008f72:	4643      	mov	r3, r8
 8008f74:	7a1b      	ldrb	r3, [r3, #8]
 8008f76:	065b      	lsls	r3, r3, #25
 8008f78:	d400      	bmi.n	8008f7c <CheckAttachedButtons+0x3ac>
 8008f7a:	e744      	b.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f7c:	4b1f      	ldr	r3, [pc, #124]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8008f82:	2102      	movs	r1, #2
 8008f84:	9803      	ldr	r0, [sp, #12]
 8008f86:	f7ff fe21 	bl	8008bcc <buttonReleasedForYCallback>
 8008f8a:	e73c      	b.n	8008e06 <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8008f8c:	4b1b      	ldr	r3, [pc, #108]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d000      	beq.n	8008f96 <CheckAttachedButtons+0x3c6>
 8008f94:	e737      	b.n	8008e06 <CheckAttachedButtons+0x236>
 8008f96:	4643      	mov	r3, r8
 8008f98:	7a1b      	ldrb	r3, [r3, #8]
 8008f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f9c:	d800      	bhi.n	8008fa0 <CheckAttachedButtons+0x3d0>
 8008f9e:	e732      	b.n	8008e06 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008fa0:	4b16      	ldr	r3, [pc, #88]	; (8008ffc <CheckAttachedButtons+0x42c>)
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8008fa6:	2103      	movs	r1, #3
 8008fa8:	9803      	ldr	r0, [sp, #12]
 8008faa:	f7ff fe0f 	bl	8008bcc <buttonReleasedForYCallback>
 8008fae:	e72a      	b.n	8008e06 <CheckAttachedButtons+0x236>
						state =OPEN;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	469b      	mov	fp, r3
 8008fb4:	e000      	b.n	8008fb8 <CheckAttachedButtons+0x3e8>
						state =OFF;
 8008fb6:	46cb      	mov	fp, r9
				if(releaseCounter[i] < 0xFFFF)
 8008fb8:	4b11      	ldr	r3, [pc, #68]	; (8009000 <CheckAttachedButtons+0x430>)
 8008fba:	58e3      	ldr	r3, [r4, r3]
 8008fbc:	4a11      	ldr	r2, [pc, #68]	; (8009004 <CheckAttachedButtons+0x434>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d900      	bls.n	8008fc4 <CheckAttachedButtons+0x3f4>
 8008fc2:	e680      	b.n	8008cc6 <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	4a0e      	ldr	r2, [pc, #56]	; (8009000 <CheckAttachedButtons+0x430>)
 8008fc8:	50a3      	str	r3, [r4, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <CheckAttachedButtons+0x438>)
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d100      	bne.n	8008fd4 <CheckAttachedButtons+0x404>
 8008fd2:	e67c      	b.n	8008cce <CheckAttachedButtons+0xfe>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <CheckAttachedButtons+0x43c>)
 8008fd6:	5cf2      	ldrb	r2, [r6, r3]
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <CheckAttachedButtons+0x440>)
 8008fda:	795b      	ldrb	r3, [r3, #5]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d800      	bhi.n	8008fe2 <CheckAttachedButtons+0x412>
 8008fe0:	e633      	b.n	8008c4a <CheckAttachedButtons+0x7a>
					clicked =0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <CheckAttachedButtons+0x438>)
 8008fe6:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <CheckAttachedButtons+0x43c>)
 8008fea:	54b3      	strb	r3, [r6, r2]
 8008fec:	e62d      	b.n	8008c4a <CheckAttachedButtons+0x7a>
}
 8008fee:	b009      	add	sp, #36	; 0x24
 8008ff0:	bc3c      	pop	{r2, r3, r4, r5}
 8008ff2:	4690      	mov	r8, r2
 8008ff4:	4699      	mov	r9, r3
 8008ff6:	46a2      	mov	sl, r4
 8008ff8:	46ab      	mov	fp, r5
 8008ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffc:	20001567 	.word	0x20001567
 8009000:	2000158c 	.word	0x2000158c
 8009004:	0000fffe 	.word	0x0000fffe
 8009008:	2000155b 	.word	0x2000155b
 800900c:	20001560 	.word	0x20001560
 8009010:	200069c8 	.word	0x200069c8

08009014 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009014:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8009016:	f006 fa15 	bl	800f444 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800901a:	b2c4      	uxtb	r4, r0
 800901c:	0020      	movs	r0, r4
 800901e:	f7fe fa6d 	bl	80074fc <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009022:	0020      	movs	r0, r4
 8009024:	f7fe fa98 	bl	8007558 <SwitchStreamDMAToMsg>
}
 8009028:	bd10      	pop	{r4, pc}
	...

0800902c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 800902c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902e:	b085      	sub	sp, #20
 8009030:	000d      	movs	r5, r1
 8009032:	0014      	movs	r4, r2
 8009034:	220f      	movs	r2, #15
 8009036:	446a      	add	r2, sp
 8009038:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800903a:	aa0a      	add	r2, sp, #40	; 0x28
 800903c:	7812      	ldrb	r2, [r2, #0]
 800903e:	4293      	cmp	r3, r2
 8009040:	d058      	beq.n	80090f4 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009042:	2b00      	cmp	r3, #0
 8009044:	d100      	bne.n	8009048 <SetupDMAStreams+0x1c>
 8009046:	e0be      	b.n	80091c6 <SetupDMAStreams+0x19a>
 8009048:	2a00      	cmp	r2, #0
 800904a:	d100      	bne.n	800904e <SetupDMAStreams+0x22>
 800904c:	e0bf      	b.n	80091ce <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 800904e:	2800      	cmp	r0, #0
 8009050:	d055      	beq.n	80090fe <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8009052:	2801      	cmp	r0, #1
 8009054:	d100      	bne.n	8009058 <SetupDMAStreams+0x2c>
 8009056:	e08b      	b.n	8009170 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8009058:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 800905a:	2802      	cmp	r0, #2
 800905c:	d000      	beq.n	8009060 <SetupDMAStreams+0x34>
 800905e:	e0b3      	b.n	80091c8 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009060:	0018      	movs	r0, r3
 8009062:	f004 fa55 	bl	800d510 <GetUart>
 8009066:	0006      	movs	r6, r0
 8009068:	ab0a      	add	r3, sp, #40	; 0x28
 800906a:	7818      	ldrb	r0, [r3, #0]
 800906c:	f004 fa50 	bl	800d510 <GetUart>
 8009070:	0001      	movs	r1, r0
 8009072:	2201      	movs	r2, #1
 8009074:	0030      	movs	r0, r6
 8009076:	f7fe faa1 	bl	80075bc <StartDMAstream>
 800907a:	0002      	movs	r2, r0
 800907c:	2817      	cmp	r0, #23
 800907e:	d100      	bne.n	8009082 <SetupDMAStreams+0x56>
 8009080:	e0a2      	b.n	80091c8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009082:	0160      	lsls	r0, r4, #5
 8009084:	1b00      	subs	r0, r0, r4
 8009086:	0080      	lsls	r0, r0, #2
 8009088:	1900      	adds	r0, r0, r4
 800908a:	00c0      	lsls	r0, r0, #3
 800908c:	21fa      	movs	r1, #250	; 0xfa
 800908e:	0089      	lsls	r1, r1, #2
 8009090:	f7f7 f85e 	bl	8000150 <__udivsi3>
 8009094:	0004      	movs	r4, r0
 8009096:	260f      	movs	r6, #15
 8009098:	446e      	add	r6, sp
 800909a:	4b4e      	ldr	r3, [pc, #312]	; (80091d4 <SetupDMAStreams+0x1a8>)
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	0033      	movs	r3, r6
 80090a0:	2200      	movs	r2, #0
 80090a2:	0001      	movs	r1, r0
 80090a4:	484c      	ldr	r0, [pc, #304]	; (80091d8 <SetupDMAStreams+0x1ac>)
 80090a6:	f006 f871 	bl	800f18c <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80090aa:	7833      	ldrb	r3, [r6, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4a4a      	ldr	r2, [pc, #296]	; (80091dc <SetupDMAStreams+0x1b0>)
 80090b2:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80090b4:	ab0a      	add	r3, sp, #40	; 0x28
 80090b6:	7818      	ldrb	r0, [r3, #0]
 80090b8:	f004 fa2a 	bl	800d510 <GetUart>
 80090bc:	0007      	movs	r7, r0
 80090be:	7830      	ldrb	r0, [r6, #0]
 80090c0:	f004 fa26 	bl	800d510 <GetUart>
 80090c4:	0001      	movs	r1, r0
 80090c6:	2201      	movs	r2, #1
 80090c8:	0038      	movs	r0, r7
 80090ca:	f7fe fa77 	bl	80075bc <StartDMAstream>
 80090ce:	0002      	movs	r2, r0
 80090d0:	2817      	cmp	r0, #23
 80090d2:	d079      	beq.n	80091c8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80090d4:	4b3f      	ldr	r3, [pc, #252]	; (80091d4 <SetupDMAStreams+0x1a8>)
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	ab0a      	add	r3, sp, #40	; 0x28
 80090da:	2200      	movs	r2, #0
 80090dc:	0021      	movs	r1, r4
 80090de:	483e      	ldr	r0, [pc, #248]	; (80091d8 <SetupDMAStreams+0x1ac>)
 80090e0:	f006 f854 	bl	800f18c <xTimerCreate>
 80090e4:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80090e6:	ab0a      	add	r3, sp, #40	; 0x28
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4a3b      	ldr	r2, [pc, #236]	; (80091dc <SetupDMAStreams+0x1b0>)
 80090f0:	509d      	str	r5, [r3, r2]
 80090f2:	e02d      	b.n	8009150 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 80090f4:	4a3a      	ldr	r2, [pc, #232]	; (80091e0 <SetupDMAStreams+0x1b4>)
 80090f6:	2102      	movs	r1, #2
 80090f8:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80090fa:	2267      	movs	r2, #103	; 0x67
 80090fc:	e064      	b.n	80091c8 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80090fe:	0018      	movs	r0, r3
 8009100:	f004 fa06 	bl	800d510 <GetUart>
 8009104:	0006      	movs	r6, r0
 8009106:	ab0a      	add	r3, sp, #40	; 0x28
 8009108:	7818      	ldrb	r0, [r3, #0]
 800910a:	f004 fa01 	bl	800d510 <GetUart>
 800910e:	0001      	movs	r1, r0
 8009110:	2201      	movs	r2, #1
 8009112:	0030      	movs	r0, r6
 8009114:	f7fe fa52 	bl	80075bc <StartDMAstream>
 8009118:	0002      	movs	r2, r0
 800911a:	2817      	cmp	r0, #23
 800911c:	d054      	beq.n	80091c8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800911e:	260f      	movs	r6, #15
 8009120:	446e      	add	r6, sp
 8009122:	0160      	lsls	r0, r4, #5
 8009124:	1b00      	subs	r0, r0, r4
 8009126:	0080      	lsls	r0, r0, #2
 8009128:	1900      	adds	r0, r0, r4
 800912a:	00c0      	lsls	r0, r0, #3
 800912c:	21fa      	movs	r1, #250	; 0xfa
 800912e:	0089      	lsls	r1, r1, #2
 8009130:	f7f7 f80e 	bl	8000150 <__udivsi3>
 8009134:	0001      	movs	r1, r0
 8009136:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <SetupDMAStreams+0x1a8>)
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	0033      	movs	r3, r6
 800913c:	2200      	movs	r2, #0
 800913e:	4826      	ldr	r0, [pc, #152]	; (80091d8 <SetupDMAStreams+0x1ac>)
 8009140:	f006 f824 	bl	800f18c <xTimerCreate>
 8009144:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8009146:	7833      	ldrb	r3, [r6, #0]
 8009148:	3b01      	subs	r3, #1
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4a23      	ldr	r2, [pc, #140]	; (80091dc <SetupDMAStreams+0x1b0>)
 800914e:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009150:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8009152:	2c00      	cmp	r4, #0
 8009154:	d038      	beq.n	80091c8 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8009156:	f005 fab1 	bl	800e6bc <xTaskGetTickCount>
 800915a:	0002      	movs	r2, r0
 800915c:	2301      	movs	r3, #1
 800915e:	425b      	negs	r3, r3
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2300      	movs	r3, #0
 8009164:	2101      	movs	r1, #1
 8009166:	0020      	movs	r0, r4
 8009168:	f006 f830 	bl	800f1cc <xTimerGenericCommand>
	return BOS_OK;
 800916c:	2200      	movs	r2, #0
 800916e:	e02b      	b.n	80091c8 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009170:	0010      	movs	r0, r2
 8009172:	f004 f9cd 	bl	800d510 <GetUart>
 8009176:	0006      	movs	r6, r0
 8009178:	230f      	movs	r3, #15
 800917a:	446b      	add	r3, sp
 800917c:	7818      	ldrb	r0, [r3, #0]
 800917e:	f004 f9c7 	bl	800d510 <GetUart>
 8009182:	0001      	movs	r1, r0
 8009184:	2201      	movs	r2, #1
 8009186:	0030      	movs	r0, r6
 8009188:	f7fe fa18 	bl	80075bc <StartDMAstream>
 800918c:	0002      	movs	r2, r0
 800918e:	2817      	cmp	r0, #23
 8009190:	d01a      	beq.n	80091c8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009192:	0160      	lsls	r0, r4, #5
 8009194:	1b00      	subs	r0, r0, r4
 8009196:	0080      	lsls	r0, r0, #2
 8009198:	1900      	adds	r0, r0, r4
 800919a:	00c0      	lsls	r0, r0, #3
 800919c:	21fa      	movs	r1, #250	; 0xfa
 800919e:	0089      	lsls	r1, r1, #2
 80091a0:	f7f6 ffd6 	bl	8000150 <__udivsi3>
 80091a4:	0001      	movs	r1, r0
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <SetupDMAStreams+0x1a8>)
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	ab0a      	add	r3, sp, #40	; 0x28
 80091ac:	2200      	movs	r2, #0
 80091ae:	480a      	ldr	r0, [pc, #40]	; (80091d8 <SetupDMAStreams+0x1ac>)
 80091b0:	f005 ffec 	bl	800f18c <xTimerCreate>
 80091b4:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80091b6:	230f      	movs	r3, #15
 80091b8:	446b      	add	r3, sp
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	3b01      	subs	r3, #1
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a06      	ldr	r2, [pc, #24]	; (80091dc <SetupDMAStreams+0x1b0>)
 80091c2:	509d      	str	r5, [r3, r2]
 80091c4:	e7c4      	b.n	8009150 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80091c6:	2267      	movs	r2, #103	; 0x67
}
 80091c8:	0010      	movs	r0, r2
 80091ca:	b005      	add	sp, #20
 80091cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80091ce:	2267      	movs	r2, #103	; 0x67
 80091d0:	e7fa      	b.n	80091c8 <SetupDMAStreams+0x19c>
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	08009015 	.word	0x08009015
 80091d8:	0801a504 	.word	0x0801a504
 80091dc:	200014c0 	.word	0x200014c0
 80091e0:	200010f8 	.word	0x200010f8

080091e4 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80091e4:	b510      	push	{r4, lr}
	switch(port){
 80091e6:	2806      	cmp	r0, #6
 80091e8:	d80a      	bhi.n	8009200 <NotifyMessagingTask+0x1c>
 80091ea:	0080      	lsls	r0, r0, #2
 80091ec:	4b19      	ldr	r3, [pc, #100]	; (8009254 <NotifyMessagingTask+0x70>)
 80091ee:	581b      	ldr	r3, [r3, r0]
 80091f0:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 80091f2:	4b19      	ldr	r3, [pc, #100]	; (8009258 <NotifyMessagingTask+0x74>)
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	2202      	movs	r2, #2
 80091fa:	2100      	movs	r1, #0
 80091fc:	f005 fef6 	bl	800efec <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009200:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <NotifyMessagingTask+0x78>)
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	2202      	movs	r2, #2
 800920a:	2100      	movs	r1, #0
 800920c:	f005 feee 	bl	800efec <xTaskGenericNotify>
			break;
 8009210:	e7f6      	b.n	8009200 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <NotifyMessagingTask+0x7c>)
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	2300      	movs	r3, #0
 8009218:	2202      	movs	r2, #2
 800921a:	2100      	movs	r1, #0
 800921c:	f005 fee6 	bl	800efec <xTaskGenericNotify>
			break;
 8009220:	e7ee      	b.n	8009200 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <NotifyMessagingTask+0x80>)
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	2202      	movs	r2, #2
 800922a:	2100      	movs	r1, #0
 800922c:	f005 fede 	bl	800efec <xTaskGenericNotify>
			break;
 8009230:	e7e6      	b.n	8009200 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <NotifyMessagingTask+0x84>)
 8009234:	6818      	ldr	r0, [r3, #0]
 8009236:	2300      	movs	r3, #0
 8009238:	2202      	movs	r2, #2
 800923a:	2100      	movs	r1, #0
 800923c:	f005 fed6 	bl	800efec <xTaskGenericNotify>
			break;
 8009240:	e7de      	b.n	8009200 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8009242:	4b0a      	ldr	r3, [pc, #40]	; (800926c <NotifyMessagingTask+0x88>)
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	2202      	movs	r2, #2
 800924a:	2100      	movs	r1, #0
 800924c:	f005 fece 	bl	800efec <xTaskGenericNotify>
}
 8009250:	e7d6      	b.n	8009200 <NotifyMessagingTask+0x1c>
 8009252:	46c0      	nop			; (mov r8, r8)
 8009254:	0801a4e8 	.word	0x0801a4e8
 8009258:	200014e0 	.word	0x200014e0
 800925c:	200014e4 	.word	0x200014e4
 8009260:	200014e8 	.word	0x200014e8
 8009264:	200014ec 	.word	0x200014ec
 8009268:	200014f0 	.word	0x200014f0
 800926c:	200014f4 	.word	0x200014f4

08009270 <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009272:	46de      	mov	lr, fp
 8009274:	4657      	mov	r7, sl
 8009276:	464e      	mov	r6, r9
 8009278:	4645      	mov	r5, r8
 800927a:	b5e0      	push	{r5, r6, r7, lr}
 800927c:	b085      	sub	sp, #20
 800927e:	4680      	mov	r8, r0
 8009280:	468b      	mov	fp, r1
 8009282:	0014      	movs	r4, r2
 8009284:	469a      	mov	sl, r3
 8009286:	ab0e      	add	r3, sp, #56	; 0x38
 8009288:	881d      	ldrh	r5, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800928a:	0003      	movs	r3, r0
 800928c:	4313      	orrs	r3, r2
 800928e:	d100      	bne.n	8009292 <SendMessageFromPort+0x22>
 8009290:	e170      	b.n	8009574 <SendMessageFromPort+0x304>
 8009292:	2800      	cmp	r0, #0
 8009294:	d147      	bne.n	8009326 <SendMessageFromPort+0xb6>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009296:	1c93      	adds	r3, r2, #2
 8009298:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 800929a:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800929c:	2b01      	cmp	r3, #1
 800929e:	d900      	bls.n	80092a2 <SendMessageFromPort+0x32>
 80092a0:	e149      	b.n	8009536 <SendMessageFromPort+0x2c6>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80092a2:	2000      	movs	r0, #0
 80092a4:	f005 f972 	bl	800e58c <uxTaskPriorityGet>
 80092a8:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80092aa:	2105      	movs	r1, #5
 80092ac:	2000      	movs	r0, #0
 80092ae:	f005 f97d 	bl	800e5ac <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80092b2:	4bbe      	ldr	r3, [pc, #760]	; (80095ac <SendMessageFromPort+0x33c>)
 80092b4:	2248      	movs	r2, #72	; 0x48
 80092b6:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80092b8:	3212      	adds	r2, #18
 80092ba:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80092bc:	465b      	mov	r3, fp
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d000      	beq.n	80092c4 <SendMessageFromPort+0x54>
 80092c2:	e16d      	b.n	80095a0 <SendMessageFromPort+0x330>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80092c4:	3d01      	subs	r5, #1
 80092c6:	4bba      	ldr	r3, [pc, #744]	; (80095b0 <SendMessageFromPort+0x340>)
 80092c8:	5d5f      	ldrb	r7, [r3, r5]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80092ca:	4eba      	ldr	r6, [pc, #744]	; (80095b4 <SendMessageFromPort+0x344>)
 80092cc:	00e9      	lsls	r1, r5, #3
 80092ce:	1b49      	subs	r1, r1, r5
 80092d0:	00c9      	lsls	r1, r1, #3
 80092d2:	4db9      	ldr	r5, [pc, #740]	; (80095b8 <SendMessageFromPort+0x348>)
 80092d4:	1949      	adds	r1, r1, r5
 80092d6:	003a      	movs	r2, r7
 80092d8:	0030      	movs	r0, r6
 80092da:	f009 ffd6 	bl	801328a <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80092de:	3e03      	subs	r6, #3
 80092e0:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 80092e2:	1cfd      	adds	r5, r7, #3
 80092e4:	002a      	movs	r2, r5
 80092e6:	0031      	movs	r1, r6
 80092e8:	48b4      	ldr	r0, [pc, #720]	; (80095bc <SendMessageFromPort+0x34c>)
 80092ea:	f009 ffce 	bl	801328a <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80092ee:	b2bf      	uxth	r7, r7
 80092f0:	1cf9      	adds	r1, r7, #3
 80092f2:	48b2      	ldr	r0, [pc, #712]	; (80095bc <SendMessageFromPort+0x34c>)
 80092f4:	f003 fad4 	bl	800c8a0 <CalculateCRC8>
 80092f8:	5570      	strb	r0, [r6, r5]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80092fa:	2238      	movs	r2, #56	; 0x38
 80092fc:	2100      	movs	r1, #0
 80092fe:	48af      	ldr	r0, [pc, #700]	; (80095bc <SendMessageFromPort+0x34c>)
 8009300:	f009 ffcc 	bl	801329c <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009304:	3402      	adds	r4, #2
 8009306:	b2e4      	uxtb	r4, r4
 8009308:	2c01      	cmp	r4, #1
 800930a:	d900      	bls.n	800930e <SendMessageFromPort+0x9e>
 800930c:	e104      	b.n	8009518 <SendMessageFromPort+0x2a8>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800930e:	4653      	mov	r3, sl
 8009310:	2b00      	cmp	r3, #0
 8009312:	d000      	beq.n	8009316 <SendMessageFromPort+0xa6>
 8009314:	e0f5      	b.n	8009502 <SendMessageFromPort+0x292>
 8009316:	465b      	mov	r3, fp
 8009318:	2b00      	cmp	r3, #0
 800931a:	d000      	beq.n	800931e <SendMessageFromPort+0xae>
 800931c:	e0f1      	b.n	8009502 <SendMessageFromPort+0x292>
			src =message[4];
 800931e:	4ba3      	ldr	r3, [pc, #652]	; (80095ac <SendMessageFromPort+0x33c>)
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	469b      	mov	fp, r3
 8009324:	e0ed      	b.n	8009502 <SendMessageFromPort+0x292>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009326:	2900      	cmp	r1, #0
 8009328:	d002      	beq.n	8009330 <SendMessageFromPort+0xc0>
 800932a:	2a00      	cmp	r2, #0
 800932c:	d100      	bne.n	8009330 <SendMessageFromPort+0xc0>
 800932e:	e123      	b.n	8009578 <SendMessageFromPort+0x308>
	TaskPriority =uxTaskPriorityGet( NULL);
 8009330:	2000      	movs	r0, #0
 8009332:	f005 f92b 	bl	800e58c <uxTaskPriorityGet>
 8009336:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009338:	2105      	movs	r1, #5
 800933a:	2000      	movs	r0, #0
 800933c:	f005 f936 	bl	800e5ac <vTaskPrioritySet>
	message[0] ='H';
 8009340:	4b9a      	ldr	r3, [pc, #616]	; (80095ac <SendMessageFromPort+0x33c>)
 8009342:	2248      	movs	r2, #72	; 0x48
 8009344:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8009346:	3212      	adds	r2, #18
 8009348:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800934a:	4653      	mov	r3, sl
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0b9      	beq.n	80092c4 <SendMessageFromPort+0x54>
		if(src == 0)
 8009350:	465b      	mov	r3, fp
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <SendMessageFromPort+0xec>
			src =myID;
 8009356:	4b9a      	ldr	r3, [pc, #616]	; (80095c0 <SendMessageFromPort+0x350>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	469b      	mov	fp, r3
		message[2] =length;
 800935c:	4993      	ldr	r1, [pc, #588]	; (80095ac <SendMessageFromPort+0x33c>)
 800935e:	2300      	movs	r3, #0
 8009360:	708b      	strb	r3, [r1, #2]
		message[3] =dst;
 8009362:	70cc      	strb	r4, [r1, #3]
		message[4] =src;
 8009364:	465b      	mov	r3, fp
 8009366:	710b      	strb	r3, [r1, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 8009368:	4a96      	ldr	r2, [pc, #600]	; (80095c4 <SendMessageFromPort+0x354>)
 800936a:	79d3      	ldrb	r3, [r2, #7]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	7992      	ldrb	r2, [r2, #6]
 8009370:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009372:	22ff      	movs	r2, #255	; 0xff
 8009374:	4552      	cmp	r2, sl
 8009376:	4192      	sbcs	r2, r2
 8009378:	4252      	negs	r2, r2
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800937a:	0052      	lsls	r2, r2, #1
 800937c:	4313      	orrs	r3, r2
 800937e:	b2db      	uxtb	r3, r3
 8009380:	714b      	strb	r3, [r1, #5]
		message[6 + shift] =(uint8_t )code;
 8009382:	4652      	mov	r2, sl
 8009384:	718a      	strb	r2, [r1, #6]
 8009386:	2200      	movs	r2, #0
 8009388:	4691      	mov	r9, r2
		if(extendCode == true){
 800938a:	4652      	mov	r2, sl
 800938c:	2aff      	cmp	r2, #255	; 0xff
 800938e:	d903      	bls.n	8009398 <SendMessageFromPort+0x128>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009390:	0a12      	lsrs	r2, r2, #8
 8009392:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009394:	2201      	movs	r2, #1
 8009396:	4691      	mov	r9, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009398:	2d2e      	cmp	r5, #46	; 0x2e
 800939a:	d92f      	bls.n	80093fc <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 800939c:	2280      	movs	r2, #128	; 0x80
 800939e:	4252      	negs	r2, r2
 80093a0:	4313      	orrs	r3, r2
 80093a2:	4a82      	ldr	r2, [pc, #520]	; (80095ac <SendMessageFromPort+0x33c>)
 80093a4:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80093a6:	4b88      	ldr	r3, [pc, #544]	; (80095c8 <SendMessageFromPort+0x358>)
 80093a8:	801d      	strh	r5, [r3, #0]
	uint8_t length =0, shift =0;
 80093aa:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80093ac:	252e      	movs	r5, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093ae:	464b      	mov	r3, r9
 80093b0:	3307      	adds	r3, #7
 80093b2:	4694      	mov	ip, r2
 80093b4:	4463      	add	r3, ip
 80093b6:	9303      	str	r3, [sp, #12]
			while(totalNumberOfParams != 0){
 80093b8:	4b83      	ldr	r3, [pc, #524]	; (80095c8 <SendMessageFromPort+0x358>)
 80093ba:	881f      	ldrh	r7, [r3, #0]
 80093bc:	2f00      	cmp	r7, #0
 80093be:	d02b      	beq.n	8009418 <SendMessageFromPort+0x1a8>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80093c0:	0029      	movs	r1, r5
 80093c2:	0038      	movs	r0, r7
 80093c4:	f7f6 fec4 	bl	8000150 <__udivsi3>
 80093c8:	b280      	uxth	r0, r0
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d140      	bne.n	8009450 <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80093ce:	4b77      	ldr	r3, [pc, #476]	; (80095ac <SendMessageFromPort+0x33c>)
 80093d0:	795a      	ldrb	r2, [r3, #5]
 80093d2:	237f      	movs	r3, #127	; 0x7f
 80093d4:	4013      	ands	r3, r2
 80093d6:	4a75      	ldr	r2, [pc, #468]	; (80095ac <SendMessageFromPort+0x33c>)
 80093d8:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093da:	4d7c      	ldr	r5, [pc, #496]	; (80095cc <SendMessageFromPort+0x35c>)
 80093dc:	8829      	ldrh	r1, [r5, #0]
 80093de:	4b7c      	ldr	r3, [pc, #496]	; (80095d0 <SendMessageFromPort+0x360>)
 80093e0:	18c9      	adds	r1, r1, r3
 80093e2:	003a      	movs	r2, r7
 80093e4:	9803      	ldr	r0, [sp, #12]
 80093e6:	f009 ff50 	bl	801328a <memcpy>
					ptrShift =0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 80093ee:	4a76      	ldr	r2, [pc, #472]	; (80095c8 <SendMessageFromPort+0x358>)
 80093f0:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80093f2:	1d3e      	adds	r6, r7, #4
 80093f4:	444e      	add	r6, r9
 80093f6:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 80093f8:	003d      	movs	r5, r7
 80093fa:	e7dd      	b.n	80093b8 <SendMessageFromPort+0x148>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093fc:	464b      	mov	r3, r9
 80093fe:	3307      	adds	r3, #7
 8009400:	486a      	ldr	r0, [pc, #424]	; (80095ac <SendMessageFromPort+0x33c>)
 8009402:	1818      	adds	r0, r3, r0
 8009404:	4b71      	ldr	r3, [pc, #452]	; (80095cc <SendMessageFromPort+0x35c>)
 8009406:	8819      	ldrh	r1, [r3, #0]
 8009408:	4b71      	ldr	r3, [pc, #452]	; (80095d0 <SendMessageFromPort+0x360>)
 800940a:	18c9      	adds	r1, r1, r3
 800940c:	002a      	movs	r2, r5
 800940e:	f009 ff3c 	bl	801328a <memcpy>
			length =numberOfParams + shift + 4;
 8009412:	1d2e      	adds	r6, r5, #4
 8009414:	444e      	add	r6, r9
 8009416:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 8009418:	4b6e      	ldr	r3, [pc, #440]	; (80095d4 <SendMessageFromPort+0x364>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d057      	beq.n	80094d0 <SendMessageFromPort+0x260>
			if(dstGroupID < BOS_BROADCAST){
 8009420:	4b6d      	ldr	r3, [pc, #436]	; (80095d8 <SendMessageFromPort+0x368>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2bff      	cmp	r3, #255	; 0xff
 8009426:	d100      	bne.n	800942a <SendMessageFromPort+0x1ba>
 8009428:	e0aa      	b.n	8009580 <SendMessageFromPort+0x310>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800942a:	4a6c      	ldr	r2, [pc, #432]	; (80095dc <SendMessageFromPort+0x36c>)
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	4694      	mov	ip, r2
 8009430:	2a00      	cmp	r2, #0
 8009432:	d06f      	beq.n	8009514 <SendMessageFromPort+0x2a4>
 8009434:	2701      	movs	r7, #1
 8009436:	409f      	lsls	r7, r3
 8009438:	4869      	ldr	r0, [pc, #420]	; (80095e0 <SendMessageFromPort+0x370>)
 800943a:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 800943c:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800943e:	495b      	ldr	r1, [pc, #364]	; (80095ac <SendMessageFromPort+0x33c>)
 8009440:	468a      	mov	sl, r1
 8009442:	44aa      	add	sl, r5
 8009444:	0021      	movs	r1, r4
 8009446:	4664      	mov	r4, ip
 8009448:	46b4      	mov	ip, r6
 800944a:	464e      	mov	r6, r9
 800944c:	4689      	mov	r9, r1
 800944e:	e017      	b.n	8009480 <SendMessageFromPort+0x210>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009450:	9500      	str	r5, [sp, #0]
 8009452:	4653      	mov	r3, sl
 8009454:	0022      	movs	r2, r4
 8009456:	4659      	mov	r1, fp
 8009458:	4640      	mov	r0, r8
 800945a:	f7ff ff09 	bl	8009270 <SendMessageFromPort>
					osDelay(10);
 800945e:	200a      	movs	r0, #10
 8009460:	f004 f9a5 	bl	800d7ae <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009464:	4a58      	ldr	r2, [pc, #352]	; (80095c8 <SendMessageFromPort+0x358>)
 8009466:	8813      	ldrh	r3, [r2, #0]
 8009468:	1b5b      	subs	r3, r3, r5
 800946a:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 800946c:	4a57      	ldr	r2, [pc, #348]	; (80095cc <SendMessageFromPort+0x35c>)
 800946e:	8813      	ldrh	r3, [r2, #0]
 8009470:	18eb      	adds	r3, r5, r3
 8009472:	8013      	strh	r3, [r2, #0]
 8009474:	e7a0      	b.n	80093b8 <SendMessageFromPort+0x148>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009476:	3301      	adds	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	3002      	adds	r0, #2
 800947c:	42a3      	cmp	r3, r4
 800947e:	d80e      	bhi.n	800949e <SendMessageFromPort+0x22e>
					if(InGroup(i,dstGroupID)){
 8009480:	8801      	ldrh	r1, [r0, #0]
 8009482:	420f      	tst	r7, r1
 8009484:	d0f7      	beq.n	8009476 <SendMessageFromPort+0x206>
						++groupMembers;							// Add this member
 8009486:	3201      	adds	r2, #1
 8009488:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800948a:	18a9      	adds	r1, r5, r2
 800948c:	3101      	adds	r1, #1
 800948e:	292d      	cmp	r1, #45	; 0x2d
 8009490:	dd00      	ble.n	8009494 <SendMessageFromPort+0x224>
 8009492:	e073      	b.n	800957c <SendMessageFromPort+0x30c>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009494:	4651      	mov	r1, sl
 8009496:	1889      	adds	r1, r1, r2
 8009498:	1989      	adds	r1, r1, r6
 800949a:	718b      	strb	r3, [r1, #6]
 800949c:	e7eb      	b.n	8009476 <SendMessageFromPort+0x206>
 800949e:	464c      	mov	r4, r9
 80094a0:	46b1      	mov	r9, r6
 80094a2:	4666      	mov	r6, ip
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80094a4:	464b      	mov	r3, r9
 80094a6:	3307      	adds	r3, #7
 80094a8:	195b      	adds	r3, r3, r5
 80094aa:	189b      	adds	r3, r3, r2
 80094ac:	493f      	ldr	r1, [pc, #252]	; (80095ac <SendMessageFromPort+0x33c>)
 80094ae:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094b0:	18ad      	adds	r5, r5, r2
 80094b2:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80094b4:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094b6:	2d2d      	cmp	r5, #45	; 0x2d
 80094b8:	dc3d      	bgt.n	8009536 <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80094ba:	484a      	ldr	r0, [pc, #296]	; (80095e4 <SendMessageFromPort+0x374>)
 80094bc:	7801      	ldrb	r1, [r0, #0]
 80094be:	3101      	adds	r1, #1
 80094c0:	b2c9      	uxtb	r1, r1
 80094c2:	7001      	strb	r1, [r0, #0]
 80094c4:	4839      	ldr	r0, [pc, #228]	; (80095ac <SendMessageFromPort+0x33c>)
 80094c6:	18c3      	adds	r3, r0, r3
 80094c8:	7059      	strb	r1, [r3, #1]
 80094ca:	3602      	adds	r6, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80094cc:	18b6      	adds	r6, r6, r2
 80094ce:	b2f6      	uxtb	r6, r6
	message[2] =length;
 80094d0:	4b36      	ldr	r3, [pc, #216]	; (80095ac <SendMessageFromPort+0x33c>)
 80094d2:	469a      	mov	sl, r3
 80094d4:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80094d6:	1cf5      	adds	r5, r6, #3
 80094d8:	002a      	movs	r2, r5
 80094da:	0019      	movs	r1, r3
 80094dc:	4837      	ldr	r0, [pc, #220]	; (80095bc <SendMessageFromPort+0x34c>)
 80094de:	f009 fed4 	bl	801328a <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80094e2:	b2b7      	uxth	r7, r6
 80094e4:	0029      	movs	r1, r5
 80094e6:	4835      	ldr	r0, [pc, #212]	; (80095bc <SendMessageFromPort+0x34c>)
 80094e8:	f003 f9da 	bl	800c8a0 <CalculateCRC8>
 80094ec:	4653      	mov	r3, sl
 80094ee:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer,0,sizeof(crcBuffer));
 80094f0:	2238      	movs	r2, #56	; 0x38
 80094f2:	2100      	movs	r1, #0
 80094f4:	4831      	ldr	r0, [pc, #196]	; (80095bc <SendMessageFromPort+0x34c>)
 80094f6:	f009 fed1 	bl	801329c <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80094fa:	3402      	adds	r4, #2
 80094fc:	b2e4      	uxtb	r4, r4
 80094fe:	2c01      	cmp	r4, #1
 8009500:	d80a      	bhi.n	8009518 <SendMessageFromPort+0x2a8>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009502:	4658      	mov	r0, fp
 8009504:	f7fa f984 	bl	8003810 <FindBroadcastRoutes>
 8009508:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800950a:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800950c:	4b36      	ldr	r3, [pc, #216]	; (80095e8 <SendMessageFromPort+0x378>)
 800950e:	4698      	mov	r8, r3
 8009510:	4e2b      	ldr	r6, [pc, #172]	; (80095c0 <SendMessageFromPort+0x350>)
 8009512:	e01c      	b.n	800954e <SendMessageFromPort+0x2de>
			uint8_t groupMembers =0;
 8009514:	2200      	movs	r2, #0
 8009516:	e7c5      	b.n	80094a4 <SendMessageFromPort+0x234>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009518:	1d3a      	adds	r2, r7, #4
 800951a:	b292      	uxth	r2, r2
 800951c:	2332      	movs	r3, #50	; 0x32
 800951e:	4923      	ldr	r1, [pc, #140]	; (80095ac <SendMessageFromPort+0x33c>)
 8009520:	4640      	mov	r0, r8
 8009522:	f004 f861 	bl	800d5e8 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8009526:	9902      	ldr	r1, [sp, #8]
 8009528:	2000      	movs	r0, #0
 800952a:	f005 f83f 	bl	800e5ac <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 800952e:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <SendMessageFromPort+0x37c>)
 8009530:	2202      	movs	r2, #2
 8009532:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009534:	2000      	movs	r0, #0
}
 8009536:	b005      	add	sp, #20
 8009538:	bc3c      	pop	{r2, r3, r4, r5}
 800953a:	4690      	mov	r8, r2
 800953c:	4699      	mov	r9, r3
 800953e:	46a2      	mov	sl, r4
 8009540:	46ab      	mov	fp, r5
 8009542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009544:	3401      	adds	r4, #1
 8009546:	b2e4      	uxtb	r4, r4
 8009548:	3501      	adds	r5, #1
 800954a:	2c07      	cmp	r4, #7
 800954c:	d0eb      	beq.n	8009526 <SendMessageFromPort+0x2b6>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800954e:	7833      	ldrb	r3, [r6, #0]
 8009550:	3b01      	subs	r3, #1
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	4642      	mov	r2, r8
 8009556:	5a9b      	ldrh	r3, [r3, r2]
 8009558:	412b      	asrs	r3, r5
 800955a:	07db      	lsls	r3, r3, #31
 800955c:	d5f2      	bpl.n	8009544 <SendMessageFromPort+0x2d4>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800955e:	1d3a      	adds	r2, r7, #4
 8009560:	b292      	uxth	r2, r2
 8009562:	2332      	movs	r3, #50	; 0x32
 8009564:	4911      	ldr	r1, [pc, #68]	; (80095ac <SendMessageFromPort+0x33c>)
 8009566:	0020      	movs	r0, r4
 8009568:	f004 f83e 	bl	800d5e8 <writePxDMAMutex>
				Delay_ms(1);
 800956c:	2001      	movs	r0, #1
 800956e:	f006 f949 	bl	800f804 <HAL_Delay>
 8009572:	e7e7      	b.n	8009544 <SendMessageFromPort+0x2d4>
		return BOS_ERR_WrongParam;
 8009574:	2067      	movs	r0, #103	; 0x67
 8009576:	e7de      	b.n	8009536 <SendMessageFromPort+0x2c6>
 8009578:	2067      	movs	r0, #103	; 0x67
 800957a:	e7dc      	b.n	8009536 <SendMessageFromPort+0x2c6>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800957c:	2069      	movs	r0, #105	; 0x69
 800957e:	e7da      	b.n	8009536 <SendMessageFromPort+0x2c6>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009580:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009582:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009584:	2b2d      	cmp	r3, #45	; 0x2d
 8009586:	dcd6      	bgt.n	8009536 <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams] =++bcastID;
 8009588:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <SendMessageFromPort+0x374>)
 800958a:	7813      	ldrb	r3, [r2, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	b2db      	uxtb	r3, r3
 8009590:	7013      	strb	r3, [r2, #0]
 8009592:	4a06      	ldr	r2, [pc, #24]	; (80095ac <SendMessageFromPort+0x33c>)
 8009594:	1955      	adds	r5, r2, r5
 8009596:	444d      	add	r5, r9
 8009598:	71eb      	strb	r3, [r5, #7]
				length +=1;		// + bcastID
 800959a:	3601      	adds	r6, #1
 800959c:	b2f6      	uxtb	r6, r6
 800959e:	e797      	b.n	80094d0 <SendMessageFromPort+0x260>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095a0:	4653      	mov	r3, sl
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d100      	bne.n	80095a8 <SendMessageFromPort+0x338>
 80095a6:	e68d      	b.n	80092c4 <SendMessageFromPort+0x54>
 80095a8:	e6d8      	b.n	800935c <SendMessageFromPort+0xec>
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	20000ef8 	.word	0x20000ef8
 80095b0:	20000f30 	.word	0x20000f30
 80095b4:	20000efb 	.word	0x20000efb
 80095b8:	20000d08 	.word	0x20000d08
 80095bc:	20001458 	.word	0x20001458
 80095c0:	20001076 	.word	0x20001076
 80095c4:	200069c8 	.word	0x200069c8
 80095c8:	200015b6 	.word	0x200015b6
 80095cc:	200015b4 	.word	0x200015b4
 80095d0:	20000f38 	.word	0x20000f38
 80095d4:	20000a74 	.word	0x20000a74
 80095d8:	2000001d 	.word	0x2000001d
 80095dc:	2000001c 	.word	0x2000001c
 80095e0:	20000ec0 	.word	0x20000ec0
 80095e4:	20000cb4 	.word	0x20000cb4
 80095e8:	20000cb8 	.word	0x20000cb8
 80095ec:	20001110 	.word	0x20001110

080095f0 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80095f0:	b530      	push	{r4, r5, lr}
 80095f2:	b083      	sub	sp, #12
 80095f4:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80095f6:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <ForwardReceivedMessage+0x34>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80095fc:	1e42      	subs	r2, r0, #1
 80095fe:	00d3      	lsls	r3, r2, #3
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4a08      	ldr	r2, [pc, #32]	; (8009628 <ForwardReceivedMessage+0x38>)
 8009606:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009608:	4b08      	ldr	r3, [pc, #32]	; (800962c <ForwardReceivedMessage+0x3c>)
 800960a:	7818      	ldrb	r0, [r3, #0]
 800960c:	0021      	movs	r1, r4
 800960e:	f7fa f9cd 	bl	80039ac <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009612:	9500      	str	r5, [sp, #0]
 8009614:	2300      	movs	r3, #0
 8009616:	0022      	movs	r2, r4
 8009618:	2100      	movs	r1, #0
 800961a:	f7ff fe29 	bl	8009270 <SendMessageFromPort>
}
 800961e:	2000      	movs	r0, #0
 8009620:	b003      	add	sp, #12
 8009622:	bd30      	pop	{r4, r5, pc}
 8009624:	20000a74 	.word	0x20000a74
 8009628:	20000d08 	.word	0x20000d08
 800962c:	20001076 	.word	0x20001076

08009630 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009630:	b500      	push	{lr}
 8009632:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <BroadcastReceivedMessage+0x38>)
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <BroadcastReceivedMessage+0x3c>)
 800963c:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 800963e:	28ff      	cmp	r0, #255	; 0xff
 8009640:	d009      	beq.n	8009656 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009642:	9100      	str	r1, [sp, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	22fe      	movs	r2, #254	; 0xfe
 8009648:	2100      	movs	r1, #0
 800964a:	2000      	movs	r0, #0
 800964c:	f7ff fe10 	bl	8009270 <SendMessageFromPort>
}
 8009650:	2000      	movs	r0, #0
 8009652:	b003      	add	sp, #12
 8009654:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009656:	9100      	str	r1, [sp, #0]
 8009658:	2300      	movs	r3, #0
 800965a:	32ff      	adds	r2, #255	; 0xff
 800965c:	2100      	movs	r1, #0
 800965e:	2000      	movs	r0, #0
 8009660:	f7ff fe06 	bl	8009270 <SendMessageFromPort>
 8009664:	e7f4      	b.n	8009650 <BroadcastReceivedMessage+0x20>
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	20000a74 	.word	0x20000a74
 800966c:	2000001d 	.word	0x2000001d

08009670 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009670:	b530      	push	{r4, r5, lr}
 8009672:	b083      	sub	sp, #12
 8009674:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <BroadcastMessage+0x44>)
 8009678:	2501      	movs	r5, #1
 800967a:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 800967c:	4b0e      	ldr	r3, [pc, #56]	; (80096b8 <BroadcastMessage+0x48>)
 800967e:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009680:	29ff      	cmp	r1, #255	; 0xff
 8009682:	d00e      	beq.n	80096a2 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009684:	9400      	str	r4, [sp, #0]
 8009686:	0013      	movs	r3, r2
 8009688:	22fe      	movs	r2, #254	; 0xfe
 800968a:	0001      	movs	r1, r0
 800968c:	2000      	movs	r0, #0
 800968e:	f7ff fdef 	bl	8009270 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009692:	0022      	movs	r2, r4
 8009694:	2100      	movs	r1, #0
 8009696:	4809      	ldr	r0, [pc, #36]	; (80096bc <BroadcastMessage+0x4c>)
 8009698:	f009 fe00 	bl	801329c <memset>
}
 800969c:	2000      	movs	r0, #0
 800969e:	b003      	add	sp, #12
 80096a0:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 80096a2:	9400      	str	r4, [sp, #0]
 80096a4:	0013      	movs	r3, r2
 80096a6:	22ff      	movs	r2, #255	; 0xff
 80096a8:	0001      	movs	r1, r0
 80096aa:	2000      	movs	r0, #0
 80096ac:	f7ff fde0 	bl	8009270 <SendMessageFromPort>
 80096b0:	e7ef      	b.n	8009692 <BroadcastMessage+0x22>
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	20000a74 	.word	0x20000a74
 80096b8:	2000001d 	.word	0x2000001d
 80096bc:	20000f38 	.word	0x20000f38

080096c0 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c2:	b083      	sub	sp, #12
 80096c4:	0004      	movs	r4, r0
 80096c6:	000e      	movs	r6, r1
 80096c8:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80096ca:	28ff      	cmp	r0, #255	; 0xff
 80096cc:	d012      	beq.n	80096f4 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 80096ce:	4f0d      	ldr	r7, [pc, #52]	; (8009704 <SendMessageToModule+0x44>)
 80096d0:	7838      	ldrb	r0, [r7, #0]
 80096d2:	0021      	movs	r1, r4
 80096d4:	f7fa f96a 	bl	80039ac <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 80096d8:	7839      	ldrb	r1, [r7, #0]
 80096da:	9500      	str	r5, [sp, #0]
 80096dc:	0033      	movs	r3, r6
 80096de:	0022      	movs	r2, r4
 80096e0:	f7ff fdc6 	bl	8009270 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80096e4:	002a      	movs	r2, r5
 80096e6:	2100      	movs	r1, #0
 80096e8:	4807      	ldr	r0, [pc, #28]	; (8009708 <SendMessageToModule+0x48>)
 80096ea:	f009 fdd7 	bl	801329c <memset>
}
 80096ee:	2000      	movs	r0, #0
 80096f0:	b003      	add	sp, #12
 80096f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <SendMessageToModule+0x44>)
 80096f6:	7818      	ldrb	r0, [r3, #0]
 80096f8:	0013      	movs	r3, r2
 80096fa:	000a      	movs	r2, r1
 80096fc:	21ff      	movs	r1, #255	; 0xff
 80096fe:	f7ff ffb7 	bl	8009670 <BroadcastMessage>
 8009702:	e7f4      	b.n	80096ee <SendMessageToModule+0x2e>
 8009704:	20001076 	.word	0x20001076
 8009708:	20000f38 	.word	0x20000f38

0800970c <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 800970c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970e:	46de      	mov	lr, fp
 8009710:	4657      	mov	r7, sl
 8009712:	464e      	mov	r6, r9
 8009714:	4645      	mov	r5, r8
 8009716:	b5e0      	push	{r5, r6, r7, lr}
 8009718:	b091      	sub	sp, #68	; 0x44
 800971a:	900f      	str	r0, [sp, #60]	; 0x3c
 800971c:	000c      	movs	r4, r1
 800971e:	9106      	str	r1, [sp, #24]
 8009720:	0015      	movs	r5, r2
 8009722:	920e      	str	r2, [sp, #56]	; 0x38
 8009724:	001e      	movs	r6, r3
 8009726:	ab1a      	add	r3, sp, #104	; 0x68
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	4698      	mov	r8, r3
 800972c:	ab1d      	add	r3, sp, #116	; 0x74
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009732:	4b5a      	ldr	r3, [pc, #360]	; (800989c <StartScastDMAStream+0x190>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	428b      	cmp	r3, r1
 8009738:	d11d      	bne.n	8009776 <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800973a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800973c:	0e1b      	lsrs	r3, r3, #24
 800973e:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009742:	0c1b      	lsrs	r3, r3, #16
 8009744:	b2db      	uxtb	r3, r3
 8009746:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8009748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	b2db      	uxtb	r3, r3
 800974e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009750:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009752:	0e1b      	lsrs	r3, r3, #24
 8009754:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009756:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	b2db      	uxtb	r3, r3
 800975c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 800975e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	b2db      	uxtb	r3, r3
 8009764:	469b      	mov	fp, r3
 8009766:	4d4e      	ldr	r5, [pc, #312]	; (80098a0 <StartScastDMAStream+0x194>)
 8009768:	231a      	movs	r3, #26
 800976a:	4699      	mov	r9, r3
 800976c:	44a9      	add	r9, r5
				temp2 =dstP;
 800976e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009770:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009772:	4c4c      	ldr	r4, [pc, #304]	; (80098a4 <StartScastDMAStream+0x198>)
 8009774:	e05c      	b.n	8009830 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009776:	4b4b      	ldr	r3, [pc, #300]	; (80098a4 <StartScastDMAStream+0x198>)
 8009778:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800977a:	0e12      	lsrs	r2, r2, #24
 800977c:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 800977e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009780:	0c12      	lsrs	r2, r2, #16
 8009782:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009784:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009786:	0a12      	lsrs	r2, r2, #8
 8009788:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800978a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800978c:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800978e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009790:	0e12      	lsrs	r2, r2, #24
 8009792:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009794:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009796:	0c12      	lsrs	r2, r2, #16
 8009798:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800979a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800979c:	0a12      	lsrs	r2, r2, #8
 800979e:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80097a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a2:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80097a4:	4642      	mov	r2, r8
 80097a6:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80097a8:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80097aa:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80097ac:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80097ae:	4652      	mov	r2, sl
 80097b0:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80097b2:	220d      	movs	r2, #13
 80097b4:	211c      	movs	r1, #28
 80097b6:	0020      	movs	r0, r4
 80097b8:	f7ff ff82 	bl	80096c0 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80097bc:	2000      	movs	r0, #0
 80097be:	b011      	add	sp, #68	; 0x44
 80097c0:	bc3c      	pop	{r2, r3, r4, r5}
 80097c2:	4690      	mov	r8, r2
 80097c4:	4699      	mov	r9, r3
 80097c6:	46a2      	mov	sl, r4
 80097c8:	46ab      	mov	fp, r5
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 80097cc:	9906      	ldr	r1, [sp, #24]
 80097ce:	f7fa f8ed 	bl	80039ac <FindRoute>
 80097d2:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 80097d4:	0031      	movs	r1, r6
 80097d6:	9806      	ldr	r0, [sp, #24]
 80097d8:	f7fa f8e8 	bl	80039ac <FindRoute>
			if(route[i] == dstM){
 80097dc:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 80097de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 80097e0:	42b0      	cmp	r0, r6
 80097e2:	d134      	bne.n	800984e <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80097e4:	9a08      	ldr	r2, [sp, #32]
 80097e6:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80097e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ea:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80097ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ee:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80097f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097f2:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80097f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097f6:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80097f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097fa:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 80097fc:	465a      	mov	r2, fp
 80097fe:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009800:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009802:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009804:	4642      	mov	r2, r8
 8009806:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009808:	9a07      	ldr	r2, [sp, #28]
 800980a:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 800980c:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 800980e:	4653      	mov	r3, sl
 8009810:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009812:	0031      	movs	r1, r6
 8009814:	9806      	ldr	r0, [sp, #24]
 8009816:	f7fa f8c9 	bl	80039ac <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800981a:	7878      	ldrb	r0, [r7, #1]
 800981c:	220c      	movs	r2, #12
 800981e:	211b      	movs	r1, #27
 8009820:	f7ff ff4e 	bl	80096c0 <SendMessageToModule>
			osDelay(10);
 8009824:	200a      	movs	r0, #10
 8009826:	f003 ffc2 	bl	800d7ae <osDelay>
 800982a:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 800982c:	454d      	cmp	r5, r9
 800982e:	d013      	beq.n	8009858 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009830:	0031      	movs	r1, r6
 8009832:	9806      	ldr	r0, [sp, #24]
 8009834:	f7fa f8ba 	bl	80039ac <FindRoute>
 8009838:	002f      	movs	r7, r5
		if(route[i]){
 800983a:	7868      	ldrb	r0, [r5, #1]
 800983c:	2800      	cmp	r0, #0
 800983e:	d0f4      	beq.n	800982a <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009840:	78a9      	ldrb	r1, [r5, #2]
 8009842:	2900      	cmp	r1, #0
 8009844:	d0c2      	beq.n	80097cc <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009846:	f7fa f8b1 	bl	80039ac <FindRoute>
 800984a:	9007      	str	r0, [sp, #28]
 800984c:	e7c2      	b.n	80097d4 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 800984e:	7839      	ldrb	r1, [r7, #0]
 8009850:	f7fa f8ac 	bl	80039ac <FindRoute>
 8009854:	0003      	movs	r3, r0
 8009856:	e7c5      	b.n	80097e4 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8009858:	9806      	ldr	r0, [sp, #24]
 800985a:	42b0      	cmp	r0, r6
 800985c:	d118      	bne.n	8009890 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800985e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009864:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009866:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009868:	4640      	mov	r0, r8
 800986a:	f7ff fbdf 	bl	800902c <SetupDMAStreams>
	if(stored){
 800986e:	4653      	mov	r3, sl
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0a3      	beq.n	80097bc <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009874:	2300      	movs	r3, #0
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	9302      	str	r3, [sp, #8]
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009884:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009886:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009888:	4640      	mov	r0, r8
 800988a:	f7f9 fe21 	bl	80034d0 <SaveEEstreams>
 800988e:	e795      	b.n	80097bc <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009890:	0031      	movs	r1, r6
 8009892:	f7fa f88b 	bl	80039ac <FindRoute>
 8009896:	900e      	str	r0, [sp, #56]	; 0x38
 8009898:	e7e1      	b.n	800985e <StartScastDMAStream+0x152>
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	20001076 	.word	0x20001076
 80098a0:	20006acb 	.word	0x20006acb
 80098a4:	20000f38 	.word	0x20000f38

080098a8 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 80098a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098aa:	46de      	mov	lr, fp
 80098ac:	4657      	mov	r7, sl
 80098ae:	464e      	mov	r6, r9
 80098b0:	4645      	mov	r5, r8
 80098b2:	b5e0      	push	{r5, r6, r7, lr}
 80098b4:	b087      	sub	sp, #28
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	469b      	mov	fp, r3
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 80098ba:	4bd5      	ldr	r3, [pc, #852]	; (8009c10 <BackEndTask+0x368>)
 80098bc:	3b70      	subs	r3, #112	; 0x70
 80098be:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80098c0:	4bd3      	ldr	r3, [pc, #844]	; (8009c10 <BackEndTask+0x368>)
 80098c2:	3b70      	subs	r3, #112	; 0x70
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	e19e      	b.n	8009c06 <BackEndTask+0x35e>
 80098c8:	1ebb      	subs	r3, r7, #2
 80098ca:	4698      	mov	r8, r3
 80098cc:	4bd1      	ldr	r3, [pc, #836]	; (8009c14 <BackEndTask+0x36c>)
 80098ce:	4443      	add	r3, r8
 80098d0:	4699      	mov	r9, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098d2:	7819      	ldrb	r1, [r3, #0]
 80098d4:	293f      	cmp	r1, #63	; 0x3f
 80098d6:	dc17      	bgt.n	8009908 <BackEndTask+0x60>
							if(BOS.disableCLI == false){
 80098d8:	4bcf      	ldr	r3, [pc, #828]	; (8009c18 <BackEndTask+0x370>)
 80098da:	7edb      	ldrb	r3, [r3, #27]
 80098dc:	469c      	mov	ip, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098de:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 80098e0:	2000      	movs	r0, #0
 80098e2:	e004      	b.n	80098ee <BackEndTask+0x46>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80098e4:	2b3f      	cmp	r3, #63	; 0x3f
 80098e6:	d023      	beq.n	8009930 <BackEndTask+0x88>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098e8:	3301      	adds	r3, #1
 80098ea:	2b40      	cmp	r3, #64	; 0x40
 80098ec:	d009      	beq.n	8009902 <BackEndTask+0x5a>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 80098ee:	2b3e      	cmp	r3, #62	; 0x3e
 80098f0:	dcf8      	bgt.n	80098e4 <BackEndTask+0x3c>
 80098f2:	5cf2      	ldrb	r2, [r6, r3]
 80098f4:	2a48      	cmp	r2, #72	; 0x48
 80098f6:	d1f5      	bne.n	80098e4 <BackEndTask+0x3c>
 80098f8:	18f2      	adds	r2, r6, r3
 80098fa:	7852      	ldrb	r2, [r2, #1]
 80098fc:	2a5a      	cmp	r2, #90	; 0x5a
 80098fe:	d1f1      	bne.n	80098e4 <BackEndTask+0x3c>
 8009900:	469b      	mov	fp, r3
				if(emptyBuffer){
 8009902:	2800      	cmp	r0, #0
 8009904:	d000      	beq.n	8009908 <BackEndTask+0x60>
 8009906:	e15f      	b.n	8009bc8 <BackEndTask+0x320>
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009908:	465b      	mov	r3, fp
 800990a:	2b3d      	cmp	r3, #61	; 0x3d
 800990c:	d051      	beq.n	80099b2 <BackEndTask+0x10a>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 800990e:	2b3e      	cmp	r3, #62	; 0x3e
 8009910:	d100      	bne.n	8009914 <BackEndTask+0x6c>
 8009912:	e090      	b.n	8009a36 <BackEndTask+0x18e>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009914:	2b3f      	cmp	r3, #63	; 0x3f
 8009916:	d100      	bne.n	800991a <BackEndTask+0x72>
 8009918:	e092      	b.n	8009a40 <BackEndTask+0x198>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 800991a:	4643      	mov	r3, r8
 800991c:	019a      	lsls	r2, r3, #6
 800991e:	4bbf      	ldr	r3, [pc, #764]	; (8009c1c <BackEndTask+0x374>)
 8009920:	189b      	adds	r3, r3, r2
 8009922:	445b      	add	r3, fp
 8009924:	789b      	ldrb	r3, [r3, #2]
 8009926:	9300      	str	r3, [sp, #0]
					parseStart =packetStart + 3;
 8009928:	465b      	mov	r3, fp
 800992a:	3303      	adds	r3, #3
 800992c:	9302      	str	r3, [sp, #8]
 800992e:	e046      	b.n	80099be <BackEndTask+0x116>
 8009930:	9600      	str	r6, [sp, #0]
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009932:	223f      	movs	r2, #63	; 0x3f
 8009934:	4692      	mov	sl, r2
 8009936:	44b2      	add	sl, r6
 8009938:	4652      	mov	r2, sl
 800993a:	7812      	ldrb	r2, [r2, #0]
 800993c:	2a48      	cmp	r2, #72	; 0x48
 800993e:	d005      	beq.n	800994c <BackEndTask+0xa4>
							if(BOS.disableCLI == false){
 8009940:	4663      	mov	r3, ip
 8009942:	2b00      	cmp	r3, #0
 8009944:	d000      	beq.n	8009948 <BackEndTask+0xa0>
 8009946:	e13f      	b.n	8009bc8 <BackEndTask+0x320>
 8009948:	9a00      	ldr	r2, [sp, #0]
 800994a:	e00c      	b.n	8009966 <BackEndTask+0xbe>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800994c:	7832      	ldrb	r2, [r6, #0]
 800994e:	2a5a      	cmp	r2, #90	; 0x5a
 8009950:	d1f6      	bne.n	8009940 <BackEndTask+0x98>
				if(emptyBuffer){
 8009952:	2800      	cmp	r0, #0
 8009954:	d074      	beq.n	8009a40 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009956:	469b      	mov	fp, r3
 8009958:	e136      	b.n	8009bc8 <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800995a:	293f      	cmp	r1, #63	; 0x3f
 800995c:	d024      	beq.n	80099a8 <BackEndTask+0x100>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 800995e:	3101      	adds	r1, #1
 8009960:	2940      	cmp	r1, #64	; 0x40
 8009962:	d100      	bne.n	8009966 <BackEndTask+0xbe>
 8009964:	e130      	b.n	8009bc8 <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009966:	5c53      	ldrb	r3, [r2, r1]
 8009968:	2b0d      	cmp	r3, #13
 800996a:	d1f8      	bne.n	800995e <BackEndTask+0xb6>
 800996c:	293e      	cmp	r1, #62	; 0x3e
 800996e:	dcf4      	bgt.n	800995a <BackEndTask+0xb2>
 8009970:	1850      	adds	r0, r2, r1
 8009972:	7843      	ldrb	r3, [r0, #1]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1f0      	bne.n	800995a <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] =0;
 8009978:	4643      	mov	r3, r8
 800997a:	019a      	lsls	r2, r3, #6
 800997c:	4ba7      	ldr	r3, [pc, #668]	; (8009c1c <BackEndTask+0x374>)
 800997e:	189b      	adds	r3, r3, r2
 8009980:	2200      	movs	r2, #0
 8009982:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009984:	3101      	adds	r1, #1
 8009986:	464b      	mov	r3, r9
 8009988:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800998a:	4ba5      	ldr	r3, [pc, #660]	; (8009c20 <BackEndTask+0x378>)
 800998c:	7819      	ldrb	r1, [r3, #0]
 800998e:	48a5      	ldr	r0, [pc, #660]	; (8009c24 <BackEndTask+0x37c>)
 8009990:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009992:	3203      	adds	r2, #3
 8009994:	7022      	strb	r2, [r4, #0]
										PcPort =port;
 8009996:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009998:	4ba3      	ldr	r3, [pc, #652]	; (8009c28 <BackEndTask+0x380>)
 800999a:	6818      	ldr	r0, [r3, #0]
 800999c:	2300      	movs	r3, #0
 800999e:	3a01      	subs	r2, #1
 80099a0:	2100      	movs	r1, #0
 80099a2:	f005 fb23 	bl	800efec <xTaskGenericNotify>
										break;
 80099a6:	e10f      	b.n	8009bc8 <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099a8:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 80099aa:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1a8      	bne.n	8009902 <BackEndTask+0x5a>
 80099b0:	e7e2      	b.n	8009978 <BackEndTask+0xd0>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80099b2:	0033      	movs	r3, r6
 80099b4:	333f      	adds	r3, #63	; 0x3f
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	9300      	str	r3, [sp, #0]
					parseStart =0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	9302      	str	r3, [sp, #8]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	3303      	adds	r3, #3
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	445b      	add	r3, fp
 80099c6:	469a      	mov	sl, r3
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 80099c8:	2b3f      	cmp	r3, #63	; 0x3f
 80099ca:	dd03      	ble.n	80099d4 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	425b      	negs	r3, r3
 80099d0:	469c      	mov	ip, r3
 80099d2:	44e2      	add	sl, ip
				if(packetStart != packetEnd) // Non-empty packet
 80099d4:	45da      	cmp	sl, fp
 80099d6:	d100      	bne.n	80099da <BackEndTask+0x132>
 80099d8:	e0d0      	b.n	8009b7c <BackEndTask+0x2d4>
					Delay_ms(1);
 80099da:	2001      	movs	r0, #1
 80099dc:	f005 ff12 	bl	800f804 <HAL_Delay>
					if(packetStart < packetEnd){
 80099e0:	45da      	cmp	sl, fp
 80099e2:	dd34      	ble.n	8009a4e <BackEndTask+0x1a6>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 80099e4:	4b91      	ldr	r3, [pc, #580]	; (8009c2c <BackEndTask+0x384>)
 80099e6:	18fb      	adds	r3, r7, r3
 80099e8:	019b      	lsls	r3, r3, #6
 80099ea:	445b      	add	r3, fp
 80099ec:	4a8b      	ldr	r2, [pc, #556]	; (8009c1c <BackEndTask+0x374>)
 80099ee:	4694      	mov	ip, r2
 80099f0:	4463      	add	r3, ip
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	9a01      	ldr	r2, [sp, #4]
 80099f6:	0019      	movs	r1, r3
 80099f8:	488d      	ldr	r0, [pc, #564]	; (8009c30 <BackEndTask+0x388>)
 80099fa:	f009 fc46 	bl	801328a <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	1cd9      	adds	r1, r3, #3
 8009a02:	488b      	ldr	r0, [pc, #556]	; (8009c30 <BackEndTask+0x388>)
 8009a04:	f002 ff4c 	bl	800c8a0 <CalculateCRC8>
 8009a08:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a0a:	2238      	movs	r2, #56	; 0x38
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	4888      	ldr	r0, [pc, #544]	; (8009c30 <BackEndTask+0x388>)
 8009a10:	f009 fc44 	bl	801329c <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a14:	4643      	mov	r3, r8
 8009a16:	019b      	lsls	r3, r3, #6
 8009a18:	4a80      	ldr	r2, [pc, #512]	; (8009c1c <BackEndTask+0x374>)
 8009a1a:	4694      	mov	ip, r2
 8009a1c:	4463      	add	r3, ip
 8009a1e:	4652      	mov	r2, sl
 8009a20:	5c9b      	ldrb	r3, [r3, r2]
 8009a22:	9a01      	ldr	r2, [sp, #4]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d040      	beq.n	8009aaa <BackEndTask+0x202>
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009a28:	9a00      	ldr	r2, [sp, #0]
 8009a2a:	3204      	adds	r2, #4
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	9803      	ldr	r0, [sp, #12]
 8009a30:	f009 fc34 	bl	801329c <memset>
 8009a34:	e0b8      	b.n	8009ba8 <BackEndTask+0x300>
					packetLength =UARTRxBuf[port - 1][0];
 8009a36:	7833      	ldrb	r3, [r6, #0]
 8009a38:	9300      	str	r3, [sp, #0]
					parseStart =1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	9302      	str	r3, [sp, #8]
 8009a3e:	e7be      	b.n	80099be <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][1];
 8009a40:	7873      	ldrb	r3, [r6, #1]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	233f      	movs	r3, #63	; 0x3f
 8009a46:	469b      	mov	fp, r3
					parseStart =2;
 8009a48:	3b3d      	subs	r3, #61	; 0x3d
 8009a4a:	9302      	str	r3, [sp, #8]
 8009a4c:	e7b7      	b.n	80099be <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 8009a4e:	2240      	movs	r2, #64	; 0x40
 8009a50:	465b      	mov	r3, fp
 8009a52:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009a54:	4a75      	ldr	r2, [pc, #468]	; (8009c2c <BackEndTask+0x384>)
 8009a56:	18b9      	adds	r1, r7, r2
 8009a58:	0189      	lsls	r1, r1, #6
 8009a5a:	4459      	add	r1, fp
 8009a5c:	4a6f      	ldr	r2, [pc, #444]	; (8009c1c <BackEndTask+0x374>)
 8009a5e:	4694      	mov	ip, r2
 8009a60:	4461      	add	r1, ip
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	001a      	movs	r2, r3
 8009a66:	4872      	ldr	r0, [pc, #456]	; (8009c30 <BackEndTask+0x388>)
 8009a68:	f009 fc0f 	bl	801328a <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009a6c:	4a70      	ldr	r2, [pc, #448]	; (8009c30 <BackEndTask+0x388>)
 8009a6e:	0010      	movs	r0, r2
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	469c      	mov	ip, r3
 8009a74:	4460      	add	r0, ip
 8009a76:	9a01      	ldr	r2, [sp, #4]
 8009a78:	1ad2      	subs	r2, r2, r3
 8009a7a:	0031      	movs	r1, r6
 8009a7c:	f009 fc05 	bl	801328a <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a80:	9b00      	ldr	r3, [sp, #0]
 8009a82:	1cd9      	adds	r1, r3, #3
 8009a84:	486a      	ldr	r0, [pc, #424]	; (8009c30 <BackEndTask+0x388>)
 8009a86:	f002 ff0b 	bl	800c8a0 <CalculateCRC8>
 8009a8a:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a8c:	2238      	movs	r2, #56	; 0x38
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4867      	ldr	r0, [pc, #412]	; (8009c30 <BackEndTask+0x388>)
 8009a92:	f009 fc03 	bl	801329c <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a96:	4643      	mov	r3, r8
 8009a98:	019b      	lsls	r3, r3, #6
 8009a9a:	4a60      	ldr	r2, [pc, #384]	; (8009c1c <BackEndTask+0x374>)
 8009a9c:	4694      	mov	ip, r2
 8009a9e:	4463      	add	r3, ip
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	5c9b      	ldrb	r3, [r3, r2]
 8009aa4:	9a01      	ldr	r2, [sp, #4]
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d168      	bne.n	8009b7c <BackEndTask+0x2d4>
						portStatus[port] =MSG;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] =packetLength;
 8009aae:	1ebb      	subs	r3, r7, #2
 8009ab0:	4a60      	ldr	r2, [pc, #384]	; (8009c34 <BackEndTask+0x38c>)
 8009ab2:	9900      	ldr	r1, [sp, #0]
 8009ab4:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009ab6:	233f      	movs	r3, #63	; 0x3f
 8009ab8:	9c02      	ldr	r4, [sp, #8]
 8009aba:	1b1b      	subs	r3, r3, r4
 8009abc:	000a      	movs	r2, r1
 8009abe:	428b      	cmp	r3, r1
 8009ac0:	db27      	blt.n	8009b12 <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009ac2:	00f8      	lsls	r0, r7, #3
 8009ac4:	1bc0      	subs	r0, r0, r7
 8009ac6:	00c0      	lsls	r0, r0, #3
 8009ac8:	9b05      	ldr	r3, [sp, #20]
 8009aca:	469c      	mov	ip, r3
 8009acc:	4460      	add	r0, ip
 8009ace:	4b57      	ldr	r3, [pc, #348]	; (8009c2c <BackEndTask+0x384>)
 8009ad0:	18f9      	adds	r1, r7, r3
 8009ad2:	0189      	lsls	r1, r1, #6
 8009ad4:	46a4      	mov	ip, r4
 8009ad6:	4461      	add	r1, ip
 8009ad8:	4b50      	ldr	r3, [pc, #320]	; (8009c1c <BackEndTask+0x374>)
 8009ada:	18c9      	adds	r1, r1, r3
 8009adc:	f009 fbd5 	bl	801328a <memcpy>
						if(packetStart < packetEnd){
 8009ae0:	45da      	cmp	sl, fp
 8009ae2:	dd36      	ble.n	8009b52 <BackEndTask+0x2aa>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009ae4:	9a00      	ldr	r2, [sp, #0]
 8009ae6:	3204      	adds	r2, #4
 8009ae8:	4b50      	ldr	r3, [pc, #320]	; (8009c2c <BackEndTask+0x384>)
 8009aea:	18f8      	adds	r0, r7, r3
 8009aec:	0180      	lsls	r0, r0, #6
 8009aee:	4458      	add	r0, fp
 8009af0:	4b4a      	ldr	r3, [pc, #296]	; (8009c1c <BackEndTask+0x374>)
 8009af2:	18c0      	adds	r0, r0, r3
 8009af4:	2100      	movs	r1, #0
 8009af6:	f009 fbd1 	bl	801329c <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009afa:	4653      	mov	r3, sl
 8009afc:	3301      	adds	r3, #1
 8009afe:	464a      	mov	r2, r9
 8009b00:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009b02:	4a4d      	ldr	r2, [pc, #308]	; (8009c38 <BackEndTask+0x390>)
 8009b04:	8813      	ldrh	r3, [r2, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009b0a:	0028      	movs	r0, r5
 8009b0c:	f7ff fb6a 	bl	80091e4 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009b10:	e05a      	b.n	8009bc8 <BackEndTask+0x320>
 8009b12:	00fb      	lsls	r3, r7, #3
 8009b14:	1bdb      	subs	r3, r3, r7
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4698      	mov	r8, r3
							MSG_RX_BUF_SIZE - parseStart);
 8009b1a:	2440      	movs	r4, #64	; 0x40
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	4442      	add	r2, r8
 8009b24:	0010      	movs	r0, r2
 8009b26:	4a41      	ldr	r2, [pc, #260]	; (8009c2c <BackEndTask+0x384>)
 8009b28:	18b9      	adds	r1, r7, r2
 8009b2a:	0189      	lsls	r1, r1, #6
 8009b2c:	469c      	mov	ip, r3
 8009b2e:	4461      	add	r1, ip
 8009b30:	4b3a      	ldr	r3, [pc, #232]	; (8009c1c <BackEndTask+0x374>)
 8009b32:	18c9      	adds	r1, r1, r3
 8009b34:	0022      	movs	r2, r4
 8009b36:	f009 fba8 	bl	801328a <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	3870      	subs	r0, #112	; 0x70
 8009b3e:	1900      	adds	r0, r0, r4
 8009b40:	4b33      	ldr	r3, [pc, #204]	; (8009c10 <BackEndTask+0x368>)
 8009b42:	469c      	mov	ip, r3
 8009b44:	4460      	add	r0, ip
 8009b46:	9b00      	ldr	r3, [sp, #0]
 8009b48:	1b1a      	subs	r2, r3, r4
 8009b4a:	0031      	movs	r1, r6
 8009b4c:	f009 fb9d 	bl	801328a <memcpy>
 8009b50:	e7c6      	b.n	8009ae0 <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 8009b52:	2440      	movs	r4, #64	; 0x40
 8009b54:	465b      	mov	r3, fp
 8009b56:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b58:	4b34      	ldr	r3, [pc, #208]	; (8009c2c <BackEndTask+0x384>)
 8009b5a:	18f8      	adds	r0, r7, r3
 8009b5c:	0180      	lsls	r0, r0, #6
 8009b5e:	4458      	add	r0, fp
 8009b60:	4b2e      	ldr	r3, [pc, #184]	; (8009c1c <BackEndTask+0x374>)
 8009b62:	18c0      	adds	r0, r0, r3
 8009b64:	0022      	movs	r2, r4
 8009b66:	2100      	movs	r1, #0
 8009b68:	f009 fb98 	bl	801329c <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b6c:	9a00      	ldr	r2, [sp, #0]
 8009b6e:	3204      	adds	r2, #4
 8009b70:	1b12      	subs	r2, r2, r4
 8009b72:	2100      	movs	r1, #0
 8009b74:	0030      	movs	r0, r6
 8009b76:	f009 fb91 	bl	801329c <memset>
 8009b7a:	e7be      	b.n	8009afa <BackEndTask+0x252>
				}
				else{ // wrap around
					memset(&UARTRxBuf[port - 1][packetStart],0,
					MSG_RX_BUF_SIZE - packetStart);
 8009b7c:	2240      	movs	r2, #64	; 0x40
 8009b7e:	465b      	mov	r3, fp
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b84:	4b29      	ldr	r3, [pc, #164]	; (8009c2c <BackEndTask+0x384>)
 8009b86:	18f8      	adds	r0, r7, r3
 8009b88:	0180      	lsls	r0, r0, #6
 8009b8a:	4458      	add	r0, fp
 8009b8c:	4b23      	ldr	r3, [pc, #140]	; (8009c1c <BackEndTask+0x374>)
 8009b8e:	18c0      	adds	r0, r0, r3
 8009b90:	4642      	mov	r2, r8
 8009b92:	2100      	movs	r1, #0
 8009b94:	f009 fb82 	bl	801329c <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b98:	9a00      	ldr	r2, [sp, #0]
 8009b9a:	3204      	adds	r2, #4
 8009b9c:	4643      	mov	r3, r8
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	0030      	movs	r0, r6
 8009ba4:	f009 fb7a 	bl	801329c <memset>
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009ba8:	4653      	mov	r3, sl
 8009baa:	3301      	adds	r3, #1
 8009bac:	464a      	mov	r2, r9
 8009bae:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009bb0:	4a22      	ldr	r2, [pc, #136]	; (8009c3c <BackEndTask+0x394>)
 8009bb2:	8813      	ldrh	r3, [r2, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	8013      	strh	r3, [r2, #0]
 8009bb8:	e014      	b.n	8009be4 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009bba:	0028      	movs	r0, r5
 8009bbc:	f003 fca8 	bl	800d510 <GetUart>
 8009bc0:	2240      	movs	r2, #64	; 0x40
 8009bc2:	0031      	movs	r1, r6
 8009bc4:	f008 fc32 	bl	801242c <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009bc8:	3501      	adds	r5, #1
 8009bca:	b2ed      	uxtb	r5, r5
 8009bcc:	3701      	adds	r7, #1
 8009bce:	3640      	adds	r6, #64	; 0x40
 8009bd0:	2d07      	cmp	r5, #7
 8009bd2:	d016      	beq.n	8009c02 <BackEndTask+0x35a>
 8009bd4:	1e7c      	subs	r4, r7, #1
 8009bd6:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <BackEndTask+0x37c>)
 8009bd8:	469c      	mov	ip, r3
 8009bda:	4464      	add	r4, ip
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009bdc:	7823      	ldrb	r3, [r4, #0]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d800      	bhi.n	8009be4 <BackEndTask+0x33c>
 8009be2:	e671      	b.n	80098c8 <BackEndTask+0x20>
 8009be4:	1ebb      	subs	r3, r7, #2
 8009be6:	4a16      	ldr	r2, [pc, #88]	; (8009c40 <BackEndTask+0x398>)
 8009be8:	4694      	mov	ip, r2
 8009bea:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	d0ea      	beq.n	8009bc8 <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8009bf6:	7823      	ldrb	r3, [r4, #0]
 8009bf8:	2b05      	cmp	r3, #5
 8009bfa:	d1de      	bne.n	8009bba <BackEndTask+0x312>
					portStatus[port] =FREE;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	7023      	strb	r3, [r4, #0]
 8009c00:	e7db      	b.n	8009bba <BackEndTask+0x312>
			}
		}

		taskYIELD();
 8009c02:	f005 fc81 	bl	800f508 <vPortYield>
 8009c06:	4e05      	ldr	r6, [pc, #20]	; (8009c1c <BackEndTask+0x374>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009c08:	2702      	movs	r7, #2
		for(port =1; port <= NumOfPorts; port++){
 8009c0a:	2501      	movs	r5, #1
 8009c0c:	e7e2      	b.n	8009bd4 <BackEndTask+0x32c>
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	20000d08 	.word	0x20000d08
 8009c14:	20001450 	.word	0x20001450
 8009c18:	200069c8 	.word	0x200069c8
 8009c1c:	200012d0 	.word	0x200012d0
 8009c20:	20000a77 	.word	0x20000a77
 8009c24:	200010f8 	.word	0x200010f8
 8009c28:	20001504 	.word	0x20001504
 8009c2c:	03fffffe 	.word	0x03fffffe
 8009c30:	20001458 	.word	0x20001458
 8009c34:	20000f30 	.word	0x20000f30
 8009c38:	200015f0 	.word	0x200015f0
 8009c3c:	20001798 	.word	0x20001798
 8009c40:	200012c8 	.word	0x200012c8

08009c44 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009c44:	2001      	movs	r0, #1
 8009c46:	4770      	bx	lr

08009c48 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4a:	46de      	mov	lr, fp
 8009c4c:	4657      	mov	r7, sl
 8009c4e:	464e      	mov	r6, r9
 8009c50:	4645      	mov	r5, r8
 8009c52:	b5e0      	push	{r5, r6, r7, lr}
 8009c54:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 8009c56:	b2c3      	uxtb	r3, r0
 8009c58:	9308      	str	r3, [sp, #32]
 8009c5a:	23ff      	movs	r3, #255	; 0xff
 8009c5c:	4003      	ands	r3, r0
 8009c5e:	469b      	mov	fp, r3
		if(messageLength[port - 1]){
 8009c60:	1e5d      	subs	r5, r3, #1
 8009c62:	00eb      	lsls	r3, r5, #3
 8009c64:	1b5b      	subs	r3, r3, r5
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009c6a:	4ad5      	ldr	r2, [pc, #852]	; (8009fc0 <PxMessagingTask+0x378>)
 8009c6c:	18d3      	adds	r3, r2, r3
 8009c6e:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8009c74:	2700      	movs	r7, #0
			if(cMessage[port - 1][2] >> 7){
 8009c76:	000e      	movs	r6, r1
 8009c78:	1853      	adds	r3, r2, r1
 8009c7a:	3302      	adds	r3, #2
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	468a      	mov	sl, r1
 8009c80:	e026      	b.n	8009cd0 <PxMessagingTask+0x88>
				longMessage =1;
 8009c82:	4ad0      	ldr	r2, [pc, #832]	; (8009fc4 <PxMessagingTask+0x37c>)
 8009c84:	2001      	movs	r0, #1
 8009c86:	7010      	strb	r0, [r2, #0]
 8009c88:	e033      	b.n	8009cf2 <PxMessagingTask+0xaa>
				code =cMessage[port - 1][3 + shift];
 8009c8a:	4bcd      	ldr	r3, [pc, #820]	; (8009fc0 <PxMessagingTask+0x378>)
 8009c8c:	199b      	adds	r3, r3, r6
 8009c8e:	189a      	adds	r2, r3, r2
 8009c90:	78d3      	ldrb	r3, [r2, #3]
 8009c92:	4698      	mov	r8, r3
 8009c94:	e04a      	b.n	8009d2c <PxMessagingTask+0xe4>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009c96:	4643      	mov	r3, r8
 8009c98:	2b19      	cmp	r3, #25
 8009c9a:	d063      	beq.n	8009d64 <PxMessagingTask+0x11c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8009c9c:	2b1a      	cmp	r3, #26
 8009c9e:	d06b      	beq.n	8009d78 <PxMessagingTask+0x130>
		if(result == BOS_ERR_UnknownMessage){
 8009ca0:	2f01      	cmp	r7, #1
 8009ca2:	d101      	bne.n	8009ca8 <PxMessagingTask+0x60>
 8009ca4:	f001 fabe 	bl	800b224 <PxMessagingTask+0x15dc>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009ca8:	4cc7      	ldr	r4, [pc, #796]	; (8009fc8 <PxMessagingTask+0x380>)
 8009caa:	5d62      	ldrb	r2, [r4, r5]
 8009cac:	2100      	movs	r1, #0
 8009cae:	9807      	ldr	r0, [sp, #28]
 8009cb0:	f009 faf4 	bl	801329c <memset>
		messageLength[port - 1] =0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009cb8:	4bc4      	ldr	r3, [pc, #784]	; (8009fcc <PxMessagingTask+0x384>)
 8009cba:	465a      	mov	r2, fp
 8009cbc:	5c9b      	ldrb	r3, [r3, r2]
 8009cbe:	3b02      	subs	r3, #2
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d903      	bls.n	8009ccc <PxMessagingTask+0x84>
			portStatus[port] =FREE;
 8009cc4:	4bc1      	ldr	r3, [pc, #772]	; (8009fcc <PxMessagingTask+0x384>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4659      	mov	r1, fp
 8009cca:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009ccc:	f005 fc1c 	bl	800f508 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	4249      	negs	r1, r1
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	f005 f93d 	bl	800ef54 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8009cda:	4bbb      	ldr	r3, [pc, #748]	; (8009fc8 <PxMessagingTask+0x380>)
 8009cdc:	5d59      	ldrb	r1, [r3, r5]
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	d0de      	beq.n	8009ca0 <PxMessagingTask+0x58>
			if(cMessage[port - 1][2] >> 7){
 8009ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	b25a      	sxtb	r2, r3
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	dbca      	blt.n	8009c82 <PxMessagingTask+0x3a>
				longMessage =0;
 8009cec:	4ab5      	ldr	r2, [pc, #724]	; (8009fc4 <PxMessagingTask+0x37c>)
 8009cee:	2000      	movs	r0, #0
 8009cf0:	7010      	strb	r0, [r2, #0]
			dst =cMessage[port - 1][0];
 8009cf2:	4ab3      	ldr	r2, [pc, #716]	; (8009fc0 <PxMessagingTask+0x378>)
 8009cf4:	5cb0      	ldrb	r0, [r6, r2]
 8009cf6:	4681      	mov	r9, r0
			src =cMessage[port - 1][1];
 8009cf8:	1992      	adds	r2, r2, r6
 8009cfa:	7852      	ldrb	r2, [r2, #1]
 8009cfc:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8009cfe:	2201      	movs	r2, #1
 8009d00:	401a      	ands	r2, r3
			shift =0;
 8009d02:	9206      	str	r2, [sp, #24]
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 8009d04:	4cb2      	ldr	r4, [pc, #712]	; (8009fd0 <PxMessagingTask+0x388>)
 8009d06:	0718      	lsls	r0, r3, #28
 8009d08:	0f80      	lsrs	r0, r0, #30
 8009d0a:	71e0      	strb	r0, [r4, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 8009d0c:	2060      	movs	r0, #96	; 0x60
 8009d0e:	4018      	ands	r0, r3
 8009d10:	71a0      	strb	r0, [r4, #6]
			if(extendCode == true){
 8009d12:	079b      	lsls	r3, r3, #30
 8009d14:	d5b9      	bpl.n	8009c8a <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009d16:	4baa      	ldr	r3, [pc, #680]	; (8009fc0 <PxMessagingTask+0x378>)
 8009d18:	199b      	adds	r3, r3, r6
 8009d1a:	189b      	adds	r3, r3, r2
 8009d1c:	7918      	ldrb	r0, [r3, #4]
 8009d1e:	0200      	lsls	r0, r0, #8
 8009d20:	78db      	ldrb	r3, [r3, #3]
 8009d22:	181b      	adds	r3, r3, r0
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4698      	mov	r8, r3
				++shift;
 8009d28:	1c53      	adds	r3, r2, #1
 8009d2a:	9306      	str	r3, [sp, #24]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2bfc      	cmp	r3, #252	; 0xfc
 8009d34:	d901      	bls.n	8009d3a <PxMessagingTask+0xf2>
 8009d36:	f001 faae 	bl	800b296 <PxMessagingTask+0x164e>
 8009d3a:	4ba6      	ldr	r3, [pc, #664]	; (8009fd4 <PxMessagingTask+0x38c>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	454b      	cmp	r3, r9
 8009d40:	d101      	bne.n	8009d46 <PxMessagingTask+0xfe>
 8009d42:	f001 faa8 	bl	800b296 <PxMessagingTask+0x164e>
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <PxMessagingTask+0x106>
 8009d4a:	f001 fa9d 	bl	800b288 <PxMessagingTask+0x1640>
				ForwardReceivedMessage(port);
 8009d4e:	9808      	ldr	r0, [sp, #32]
 8009d50:	f7ff fc4e 	bl	80095f0 <ForwardReceivedMessage>
				if(BOS.trace)
 8009d54:	4b9e      	ldr	r3, [pc, #632]	; (8009fd0 <PxMessagingTask+0x388>)
 8009d56:	79db      	ldrb	r3, [r3, #7]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d09c      	beq.n	8009c96 <PxMessagingTask+0x4e>
					indMode =IND_SHORT_BLINK;
 8009d5c:	4b9e      	ldr	r3, [pc, #632]	; (8009fd8 <PxMessagingTask+0x390>)
 8009d5e:	2203      	movs	r2, #3
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	e798      	b.n	8009c96 <PxMessagingTask+0x4e>
					Delay_ms(100);
 8009d64:	2064      	movs	r0, #100	; 0x64
 8009d66:	f005 fd4d 	bl	800f804 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9a08      	ldr	r2, [sp, #32]
 8009d6e:	4649      	mov	r1, r9
 8009d70:	9804      	ldr	r0, [sp, #16]
 8009d72:	f7f9 feeb 	bl	8003b4c <remoteBootloaderUpdate>
 8009d76:	e793      	b.n	8009ca0 <PxMessagingTask+0x58>
					Delay_ms(100);
 8009d78:	2064      	movs	r0, #100	; 0x64
 8009d7a:	f005 fd43 	bl	800f804 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009d7e:	4b90      	ldr	r3, [pc, #576]	; (8009fc0 <PxMessagingTask+0x378>)
 8009d80:	199b      	adds	r3, r3, r6
 8009d82:	9a06      	ldr	r2, [sp, #24]
 8009d84:	5c9b      	ldrb	r3, [r3, r2]
 8009d86:	9a08      	ldr	r2, [sp, #32]
 8009d88:	4649      	mov	r1, r9
 8009d8a:	9804      	ldr	r0, [sp, #16]
 8009d8c:	f7f9 fede 	bl	8003b4c <remoteBootloaderUpdate>
 8009d90:	e786      	b.n	8009ca0 <PxMessagingTask+0x58>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009d92:	4b8b      	ldr	r3, [pc, #556]	; (8009fc0 <PxMessagingTask+0x378>)
 8009d94:	199b      	adds	r3, r3, r6
 8009d96:	1859      	adds	r1, r3, r1
 8009d98:	3901      	subs	r1, #1
 8009d9a:	780b      	ldrb	r3, [r1, #0]
 8009d9c:	4a8f      	ldr	r2, [pc, #572]	; (8009fdc <PxMessagingTask+0x394>)
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d113      	bne.n	8009dcc <PxMessagingTask+0x184>
					result =BOS_ERR_MSG_Reflection;
 8009da4:	2703      	movs	r7, #3
				if(result == BOS_OK){
 8009da6:	2f00      	cmp	r7, #0
 8009da8:	d000      	beq.n	8009dac <PxMessagingTask+0x164>
 8009daa:	e779      	b.n	8009ca0 <PxMessagingTask+0x58>
				shift +=4;
 8009dac:	9c06      	ldr	r4, [sp, #24]
 8009dae:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009db0:	4b85      	ldr	r3, [pc, #532]	; (8009fc8 <PxMessagingTask+0x380>)
 8009db2:	5d59      	ldrb	r1, [r3, r5]
 8009db4:	1b0a      	subs	r2, r1, r4
 8009db6:	b2d3      	uxtb	r3, r2
 8009db8:	9306      	str	r3, [sp, #24]
					switch(code){
 8009dba:	4643      	mov	r3, r8
 8009dbc:	2b24      	cmp	r3, #36	; 0x24
 8009dbe:	d901      	bls.n	8009dc4 <PxMessagingTask+0x17c>
 8009dc0:	f001 fa04 	bl	800b1cc <PxMessagingTask+0x1584>
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4a86      	ldr	r2, [pc, #536]	; (8009fe0 <PxMessagingTask+0x398>)
 8009dc8:	58d3      	ldr	r3, [r2, r3]
 8009dca:	469f      	mov	pc, r3
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009dcc:	4a83      	ldr	r2, [pc, #524]	; (8009fdc <PxMessagingTask+0x394>)
 8009dce:	7013      	strb	r3, [r2, #0]
 8009dd0:	4a84      	ldr	r2, [pc, #528]	; (8009fe4 <PxMessagingTask+0x39c>)
 8009dd2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009dd4:	9908      	ldr	r1, [sp, #32]
 8009dd6:	20ff      	movs	r0, #255	; 0xff
 8009dd8:	f7ff fc2a 	bl	8009630 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009ddc:	4b7a      	ldr	r3, [pc, #488]	; (8009fc8 <PxMessagingTask+0x380>)
 8009dde:	5d5a      	ldrb	r2, [r3, r5]
 8009de0:	4b77      	ldr	r3, [pc, #476]	; (8009fc0 <PxMessagingTask+0x378>)
 8009de2:	199b      	adds	r3, r3, r6
 8009de4:	189b      	adds	r3, r3, r2
 8009de6:	3b01      	subs	r3, #1
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	e7db      	b.n	8009da6 <PxMessagingTask+0x15e>
							for(p =0; p < numOfParams; p++){
 8009dee:	9b06      	ldr	r3, [sp, #24]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01f      	beq.n	8009e34 <PxMessagingTask+0x1ec>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	1e58      	subs	r0, r3, #1
 8009df8:	0042      	lsls	r2, r0, #1
 8009dfa:	4b7b      	ldr	r3, [pc, #492]	; (8009fe8 <PxMessagingTask+0x3a0>)
 8009dfc:	5ad3      	ldrh	r3, [r2, r3]
 8009dfe:	4652      	mov	r2, sl
 8009e00:	18a1      	adds	r1, r4, r2
 8009e02:	4a6f      	ldr	r2, [pc, #444]	; (8009fc0 <PxMessagingTask+0x378>)
 8009e04:	1889      	adds	r1, r1, r2
 8009e06:	3201      	adds	r2, #1
 8009e08:	4452      	add	r2, sl
 8009e0a:	1914      	adds	r4, r2, r4
 8009e0c:	9a06      	ldr	r2, [sp, #24]
 8009e0e:	3a01      	subs	r2, #1
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	18a4      	adds	r4, r4, r2
 8009e14:	2780      	movs	r7, #128	; 0x80
 8009e16:	023f      	lsls	r7, r7, #8
 8009e18:	4684      	mov	ip, r0
 8009e1a:	780a      	ldrb	r2, [r1, #0]
 8009e1c:	3a01      	subs	r2, #1
 8009e1e:	0038      	movs	r0, r7
 8009e20:	4110      	asrs	r0, r2
 8009e22:	4303      	orrs	r3, r0
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8009e28:	42a1      	cmp	r1, r4
 8009e2a:	d1f6      	bne.n	8009e1a <PxMessagingTask+0x1d2>
 8009e2c:	4660      	mov	r0, ip
 8009e2e:	0040      	lsls	r0, r0, #1
 8009e30:	4a6d      	ldr	r2, [pc, #436]	; (8009fe8 <PxMessagingTask+0x3a0>)
 8009e32:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8009e34:	4b6d      	ldr	r3, [pc, #436]	; (8009fec <PxMessagingTask+0x3a4>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	701a      	strb	r2, [r3, #0]
							break;
 8009e3a:	2700      	movs	r7, #0
 8009e3c:	e734      	b.n	8009ca8 <PxMessagingTask+0x60>
							indMode =IND_PING;
 8009e3e:	4b66      	ldr	r3, [pc, #408]	; (8009fd8 <PxMessagingTask+0x390>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009e44:	200a      	movs	r0, #10
 8009e46:	f003 fcb2 	bl	800d7ae <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009e4a:	4b61      	ldr	r3, [pc, #388]	; (8009fd0 <PxMessagingTask+0x388>)
 8009e4c:	799b      	ldrb	r3, [r3, #6]
 8009e4e:	2240      	movs	r2, #64	; 0x40
 8009e50:	4393      	bics	r3, r2
 8009e52:	2700      	movs	r7, #0
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d000      	beq.n	8009e5a <PxMessagingTask+0x212>
 8009e58:	e726      	b.n	8009ca8 <PxMessagingTask+0x60>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8009e5a:	003a      	movs	r2, r7
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	9804      	ldr	r0, [sp, #16]
 8009e60:	f7ff fc2e 	bl	80096c0 <SendMessageToModule>
 8009e64:	e720      	b.n	8009ca8 <PxMessagingTask+0x60>
							if(!moduleAlias[myID][0])
 8009e66:	4b5b      	ldr	r3, [pc, #364]	; (8009fd4 <PxMessagingTask+0x38c>)
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	0093      	lsls	r3, r2, #2
 8009e6c:	189b      	adds	r3, r3, r2
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	4a5f      	ldr	r2, [pc, #380]	; (8009ff0 <PxMessagingTask+0x3a8>)
 8009e72:	5c9b      	ldrb	r3, [r3, r2]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d117      	bne.n	8009ea8 <PxMessagingTask+0x260>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8009e78:	9a04      	ldr	r2, [sp, #16]
 8009e7a:	495e      	ldr	r1, [pc, #376]	; (8009ff4 <PxMessagingTask+0x3ac>)
 8009e7c:	485e      	ldr	r0, [pc, #376]	; (8009ff8 <PxMessagingTask+0x3b0>)
 8009e7e:	f009 fc07 	bl	8013690 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8009e82:	4c5d      	ldr	r4, [pc, #372]	; (8009ff8 <PxMessagingTask+0x3b0>)
 8009e84:	0020      	movs	r0, r4
 8009e86:	f7f6 f947 	bl	8000118 <strlen>
 8009e8a:	b282      	uxth	r2, r0
 8009e8c:	4b5b      	ldr	r3, [pc, #364]	; (8009ffc <PxMessagingTask+0x3b4>)
 8009e8e:	7818      	ldrb	r0, [r3, #0]
 8009e90:	2301      	movs	r3, #1
 8009e92:	425b      	negs	r3, r3
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	3333      	adds	r3, #51	; 0x33
 8009e98:	0021      	movs	r1, r4
 8009e9a:	f003 fb5b 	bl	800d554 <writePxMutex>
							responseStatus =BOS_OK;
 8009e9e:	4b53      	ldr	r3, [pc, #332]	; (8009fec <PxMessagingTask+0x3a4>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	701a      	strb	r2, [r3, #0]
							break;
 8009ea4:	2700      	movs	r7, #0
 8009ea6:	e6ff      	b.n	8009ca8 <PxMessagingTask+0x60>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	9904      	ldr	r1, [sp, #16]
 8009eac:	434b      	muls	r3, r1
 8009eae:	4a50      	ldr	r2, [pc, #320]	; (8009ff0 <PxMessagingTask+0x3a8>)
 8009eb0:	189b      	adds	r3, r3, r2
 8009eb2:	000a      	movs	r2, r1
 8009eb4:	4952      	ldr	r1, [pc, #328]	; (800a000 <PxMessagingTask+0x3b8>)
 8009eb6:	4850      	ldr	r0, [pc, #320]	; (8009ff8 <PxMessagingTask+0x3b0>)
 8009eb8:	f009 fbea 	bl	8013690 <sprintf>
 8009ebc:	e7e1      	b.n	8009e82 <PxMessagingTask+0x23a>
							IND_ON();
 8009ebe:	2180      	movs	r1, #128	; 0x80
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	01c9      	lsls	r1, r1, #7
 8009ec4:	484f      	ldr	r0, [pc, #316]	; (800a004 <PxMessagingTask+0x3bc>)
 8009ec6:	f007 f907 	bl	80110d8 <HAL_GPIO_WritePin>
							break;
 8009eca:	2700      	movs	r7, #0
 8009ecc:	e6ec      	b.n	8009ca8 <PxMessagingTask+0x60>
							IND_OFF();
 8009ece:	2180      	movs	r1, #128	; 0x80
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	01c9      	lsls	r1, r1, #7
 8009ed4:	484b      	ldr	r0, [pc, #300]	; (800a004 <PxMessagingTask+0x3bc>)
 8009ed6:	f007 f8ff 	bl	80110d8 <HAL_GPIO_WritePin>
							break;
 8009eda:	2700      	movs	r7, #0
 8009edc:	e6e4      	b.n	8009ca8 <PxMessagingTask+0x60>
							IND_toggle();
 8009ede:	2180      	movs	r1, #128	; 0x80
 8009ee0:	01c9      	lsls	r1, r1, #7
 8009ee2:	4848      	ldr	r0, [pc, #288]	; (800a004 <PxMessagingTask+0x3bc>)
 8009ee4:	f007 f8fe 	bl	80110e4 <HAL_GPIO_TogglePin>
							break;
 8009ee8:	2700      	movs	r7, #0
 8009eea:	e6dd      	b.n	8009ca8 <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009eec:	4f46      	ldr	r7, [pc, #280]	; (800a008 <PxMessagingTask+0x3c0>)
 8009eee:	00ab      	lsls	r3, r5, #2
 8009ef0:	4a33      	ldr	r2, [pc, #204]	; (8009fc0 <PxMessagingTask+0x378>)
 8009ef2:	1992      	adds	r2, r2, r6
 8009ef4:	1910      	adds	r0, r2, r4
 8009ef6:	7881      	ldrb	r1, [r0, #2]
 8009ef8:	468c      	mov	ip, r1
 8009efa:	9904      	ldr	r1, [sp, #16]
 8009efc:	0209      	lsls	r1, r1, #8
 8009efe:	4461      	add	r1, ip
 8009f00:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	5d11      	ldrb	r1, [r2, r4]
 8009f06:	0209      	lsls	r1, r1, #8
 8009f08:	7842      	ldrb	r2, [r0, #1]
 8009f0a:	1852      	adds	r2, r2, r1
 8009f0c:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8009f0e:	4b3f      	ldr	r3, [pc, #252]	; (800a00c <PxMessagingTask+0x3c4>)
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	4a3f      	ldr	r2, [pc, #252]	; (800a010 <PxMessagingTask+0x3c8>)
 8009f14:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8009f1a:	9c08      	ldr	r4, [sp, #32]
 8009f1c:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009f1e:	2002      	movs	r0, #2
 8009f20:	f003 fc45 	bl	800d7ae <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009f24:	2303      	movs	r3, #3
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	3308      	adds	r3, #8
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	0020      	movs	r0, r4
 8009f30:	f7ff f99e 	bl	8009270 <SendMessageFromPort>
							break;
 8009f34:	2700      	movs	r7, #0
 8009f36:	e6b7      	b.n	8009ca8 <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009f38:	4f33      	ldr	r7, [pc, #204]	; (800a008 <PxMessagingTask+0x3c0>)
 8009f3a:	00ab      	lsls	r3, r5, #2
 8009f3c:	4a20      	ldr	r2, [pc, #128]	; (8009fc0 <PxMessagingTask+0x378>)
 8009f3e:	1992      	adds	r2, r2, r6
 8009f40:	1910      	adds	r0, r2, r4
 8009f42:	7881      	ldrb	r1, [r0, #2]
 8009f44:	468c      	mov	ip, r1
 8009f46:	9904      	ldr	r1, [sp, #16]
 8009f48:	0209      	lsls	r1, r1, #8
 8009f4a:	4461      	add	r1, ip
 8009f4c:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	5d11      	ldrb	r1, [r2, r4]
 8009f52:	0209      	lsls	r1, r1, #8
 8009f54:	7842      	ldrb	r2, [r0, #1]
 8009f56:	1852      	adds	r2, r2, r1
 8009f58:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <PxMessagingTask+0x3a4>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
							break;
 8009f60:	2700      	movs	r7, #0
 8009f62:	e6a1      	b.n	8009ca8 <PxMessagingTask+0x60>
							ExploreNeighbors(port);
 8009f64:	9808      	ldr	r0, [sp, #32]
 8009f66:	f7f9 fc29 	bl	80037bc <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8009f6a:	4b1b      	ldr	r3, [pc, #108]	; (8009fd8 <PxMessagingTask+0x390>)
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009f70:	200a      	movs	r0, #10
 8009f72:	f003 fc1c 	bl	800d7ae <osDelay>
 8009f76:	4f24      	ldr	r7, [pc, #144]	; (800a008 <PxMessagingTask+0x3c0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f78:	2401      	movs	r4, #1
							temp =0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	e004      	b.n	8009f8a <PxMessagingTask+0x342>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f80:	3401      	adds	r4, #1
 8009f82:	b2e4      	uxtb	r4, r4
 8009f84:	3704      	adds	r7, #4
 8009f86:	2c07      	cmp	r4, #7
 8009f88:	d011      	beq.n	8009fae <PxMessagingTask+0x366>
								if(neighbors[p - 1][0]){
 8009f8a:	883b      	ldrh	r3, [r7, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0f7      	beq.n	8009f80 <PxMessagingTask+0x338>
									messageParams[temp] =p;
 8009f90:	4a1f      	ldr	r2, [pc, #124]	; (800a010 <PxMessagingTask+0x3c8>)
 8009f92:	9b05      	ldr	r3, [sp, #20]
 8009f94:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8009f96:	1c58      	adds	r0, r3, #1
 8009f98:	4694      	mov	ip, r2
 8009f9a:	4460      	add	r0, ip
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	0039      	movs	r1, r7
 8009fa0:	f009 f973 	bl	801328a <memcpy>
									temp +=5;
 8009fa4:	9b05      	ldr	r3, [sp, #20]
 8009fa6:	3305      	adds	r3, #5
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	9305      	str	r3, [sp, #20]
 8009fac:	e7e8      	b.n	8009f80 <PxMessagingTask+0x338>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8009fae:	466b      	mov	r3, sp
 8009fb0:	8a9a      	ldrh	r2, [r3, #20]
 8009fb2:	210d      	movs	r1, #13
 8009fb4:	9804      	ldr	r0, [sp, #16]
 8009fb6:	f7ff fb83 	bl	80096c0 <SendMessageToModule>
							break;
 8009fba:	2700      	movs	r7, #0
 8009fbc:	e674      	b.n	8009ca8 <PxMessagingTask+0x60>
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	20000d08 	.word	0x20000d08
 8009fc4:	20000ef5 	.word	0x20000ef5
 8009fc8:	20000f30 	.word	0x20000f30
 8009fcc:	200010f8 	.word	0x200010f8
 8009fd0:	200069c8 	.word	0x200069c8
 8009fd4:	20001076 	.word	0x20001076
 8009fd8:	20000ef4 	.word	0x20000ef4
 8009fdc:	200015f2 	.word	0x200015f2
 8009fe0:	0801a510 	.word	0x0801a510
 8009fe4:	20000cb4 	.word	0x20000cb4
 8009fe8:	20006e98 	.word	0x20006e98
 8009fec:	20001110 	.word	0x20001110
 8009ff0:	20000f68 	.word	0x20000f68
 8009ff4:	08018dc8 	.word	0x08018dc8
 8009ff8:	20001748 	.word	0x20001748
 8009ffc:	20000a77 	.word	0x20000a77
 800a000:	08018ddc 	.word	0x08018ddc
 800a004:	48000400 	.word	0x48000400
 800a008:	20001078 	.word	0x20001078
 800a00c:	20000050 	.word	0x20000050
 800a010:	20000f38 	.word	0x20000f38
							temp =numOfParams / 5;
 800a014:	2105      	movs	r1, #5
 800a016:	9806      	ldr	r0, [sp, #24]
 800a018:	f7f6 f89a 	bl	8000150 <__udivsi3>
 800a01c:	b2c2      	uxtb	r2, r0
 800a01e:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a020:	2a00      	cmp	r2, #0
 800a022:	d018      	beq.n	800a056 <PxMessagingTask+0x40e>
 800a024:	4653      	mov	r3, sl
 800a026:	191f      	adds	r7, r3, r4
 800a028:	4bd4      	ldr	r3, [pc, #848]	; (800a37c <PxMessagingTask+0x734>)
 800a02a:	18ff      	adds	r7, r7, r3
 800a02c:	3305      	adds	r3, #5
 800a02e:	4453      	add	r3, sl
 800a030:	191c      	adds	r4, r3, r4
 800a032:	1e53      	subs	r3, r2, #1
 800a034:	b2db      	uxtb	r3, r3
 800a036:	009a      	lsls	r2, r3, #2
 800a038:	18d3      	adds	r3, r2, r3
 800a03a:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a03c:	4bd0      	ldr	r3, [pc, #832]	; (800a380 <PxMessagingTask+0x738>)
 800a03e:	4698      	mov	r8, r3
 800a040:	7838      	ldrb	r0, [r7, #0]
 800a042:	3801      	subs	r0, #1
 800a044:	0080      	lsls	r0, r0, #2
 800a046:	4440      	add	r0, r8
 800a048:	1c79      	adds	r1, r7, #1
 800a04a:	2204      	movs	r2, #4
 800a04c:	f009 f91d 	bl	801328a <memcpy>
 800a050:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a052:	42bc      	cmp	r4, r7
 800a054:	d1f4      	bne.n	800a040 <PxMessagingTask+0x3f8>
							responseStatus =BOS_OK;
 800a056:	4bcb      	ldr	r3, [pc, #812]	; (800a384 <PxMessagingTask+0x73c>)
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
							break;
 800a05c:	2700      	movs	r7, #0
 800a05e:	e623      	b.n	8009ca8 <PxMessagingTask+0x60>
 800a060:	4653      	mov	r3, sl
 800a062:	18e3      	adds	r3, r4, r3
 800a064:	4ac5      	ldr	r2, [pc, #788]	; (800a37c <PxMessagingTask+0x734>)
 800a066:	4698      	mov	r8, r3
 800a068:	4490      	add	r8, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a06a:	2701      	movs	r7, #1
								if(p != port)
 800a06c:	9b08      	ldr	r3, [sp, #32]
 800a06e:	42bb      	cmp	r3, r7
 800a070:	d006      	beq.n	800a080 <PxMessagingTask+0x438>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a072:	0038      	movs	r0, r7
 800a074:	f003 fa4c 	bl	800d510 <GetUart>
 800a078:	4643      	mov	r3, r8
 800a07a:	7819      	ldrb	r1, [r3, #0]
 800a07c:	f003 fae2 	bl	800d644 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a080:	3701      	adds	r7, #1
 800a082:	b2ff      	uxtb	r7, r7
 800a084:	2301      	movs	r3, #1
 800a086:	469c      	mov	ip, r3
 800a088:	44e0      	add	r8, ip
 800a08a:	2f07      	cmp	r7, #7
 800a08c:	d1ee      	bne.n	800a06c <PxMessagingTask+0x424>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a08e:	9808      	ldr	r0, [sp, #32]
 800a090:	f003 fa3e 	bl	800d510 <GetUart>
 800a094:	4bb9      	ldr	r3, [pc, #740]	; (800a37c <PxMessagingTask+0x734>)
 800a096:	199b      	adds	r3, r3, r6
 800a098:	191c      	adds	r4, r3, r4
 800a09a:	7aa1      	ldrb	r1, [r4, #10]
 800a09c:	f003 fad2 	bl	800d644 <SwapUartPins>
							break;
 800a0a0:	2700      	movs	r7, #0
 800a0a2:	e601      	b.n	8009ca8 <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a0a4:	4bb5      	ldr	r3, [pc, #724]	; (800a37c <PxMessagingTask+0x734>)
 800a0a6:	199b      	adds	r3, r3, r6
 800a0a8:	5d1b      	ldrb	r3, [r3, r4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <PxMessagingTask+0x47a>
								myID =cMessage[port - 1][1 + shift];
 800a0ae:	2238      	movs	r2, #56	; 0x38
 800a0b0:	436a      	muls	r2, r5
 800a0b2:	4bb2      	ldr	r3, [pc, #712]	; (800a37c <PxMessagingTask+0x734>)
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	191c      	adds	r4, r3, r4
 800a0b8:	7862      	ldrb	r2, [r4, #1]
 800a0ba:	4bb3      	ldr	r3, [pc, #716]	; (800a388 <PxMessagingTask+0x740>)
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	2700      	movs	r7, #0
 800a0c0:	e5f2      	b.n	8009ca8 <PxMessagingTask+0x60>
 800a0c2:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d000      	beq.n	800a0ca <PxMessagingTask+0x482>
 800a0c8:	e5ee      	b.n	8009ca8 <PxMessagingTask+0x60>
								messageParams[0] =0; /* change own ID */
 800a0ca:	49b0      	ldr	r1, [pc, #704]	; (800a38c <PxMessagingTask+0x744>)
 800a0cc:	700f      	strb	r7, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a0ce:	2238      	movs	r2, #56	; 0x38
 800a0d0:	436a      	muls	r2, r5
 800a0d2:	4baa      	ldr	r3, [pc, #680]	; (800a37c <PxMessagingTask+0x734>)
 800a0d4:	189b      	adds	r3, r3, r2
 800a0d6:	191b      	adds	r3, r3, r4
 800a0d8:	785a      	ldrb	r2, [r3, #1]
 800a0da:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a0dc:	7898      	ldrb	r0, [r3, #2]
 800a0de:	2303      	movs	r3, #3
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	330d      	adds	r3, #13
 800a0e4:	003a      	movs	r2, r7
 800a0e6:	0039      	movs	r1, r7
 800a0e8:	f7ff f8c2 	bl	8009270 <SendMessageFromPort>
 800a0ec:	e5dc      	b.n	8009ca8 <PxMessagingTask+0x60>
							if(longMessage){
 800a0ee:	4ba8      	ldr	r3, [pc, #672]	; (800a390 <PxMessagingTask+0x748>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d011      	beq.n	800a11a <PxMessagingTask+0x4d2>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a0f6:	4ba7      	ldr	r3, [pc, #668]	; (800a394 <PxMessagingTask+0x74c>)
 800a0f8:	4698      	mov	r8, r3
 800a0fa:	881f      	ldrh	r7, [r3, #0]
 800a0fc:	48a6      	ldr	r0, [pc, #664]	; (800a398 <PxMessagingTask+0x750>)
 800a0fe:	1838      	adds	r0, r7, r0
 800a100:	4454      	add	r4, sl
 800a102:	499e      	ldr	r1, [pc, #632]	; (800a37c <PxMessagingTask+0x734>)
 800a104:	1861      	adds	r1, r4, r1
 800a106:	9c06      	ldr	r4, [sp, #24]
 800a108:	0022      	movs	r2, r4
 800a10a:	f009 f8be 	bl	801328a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a10e:	46a4      	mov	ip, r4
 800a110:	4467      	add	r7, ip
 800a112:	4643      	mov	r3, r8
 800a114:	801f      	strh	r7, [r3, #0]
 800a116:	2700      	movs	r7, #0
 800a118:	e5c6      	b.n	8009ca8 <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a11a:	4b9e      	ldr	r3, [pc, #632]	; (800a394 <PxMessagingTask+0x74c>)
 800a11c:	4699      	mov	r9, r3
 800a11e:	881f      	ldrh	r7, [r3, #0]
 800a120:	4b9d      	ldr	r3, [pc, #628]	; (800a398 <PxMessagingTask+0x750>)
 800a122:	4698      	mov	r8, r3
 800a124:	18f8      	adds	r0, r7, r3
 800a126:	4454      	add	r4, sl
 800a128:	4994      	ldr	r1, [pc, #592]	; (800a37c <PxMessagingTask+0x734>)
 800a12a:	1861      	adds	r1, r4, r1
 800a12c:	9c06      	ldr	r4, [sp, #24]
 800a12e:	0022      	movs	r2, r4
 800a130:	f009 f8ab 	bl	801328a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a134:	193c      	adds	r4, r7, r4
 800a136:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a138:	2116      	movs	r1, #22
 800a13a:	0020      	movs	r0, r4
 800a13c:	f7f6 f808 	bl	8000150 <__udivsi3>
 800a140:	4b96      	ldr	r3, [pc, #600]	; (800a39c <PxMessagingTask+0x754>)
 800a142:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a144:	0022      	movs	r2, r4
 800a146:	4641      	mov	r1, r8
 800a148:	4895      	ldr	r0, [pc, #596]	; (800a3a0 <PxMessagingTask+0x758>)
 800a14a:	f009 f89e 	bl	801328a <memcpy>
								longMessageLastPtr =0;
 800a14e:	2700      	movs	r7, #0
 800a150:	464b      	mov	r3, r9
 800a152:	801f      	strh	r7, [r3, #0]
 800a154:	e5a8      	b.n	8009ca8 <PxMessagingTask+0x60>
							for(p =1; p <= NumOfPorts; p++){
 800a156:	2401      	movs	r4, #1
							temp =0;
 800a158:	2300      	movs	r3, #0
 800a15a:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a15c:	2780      	movs	r7, #128	; 0x80
 800a15e:	023f      	lsls	r7, r7, #8
 800a160:	e003      	b.n	800a16a <PxMessagingTask+0x522>
							for(p =1; p <= NumOfPorts; p++){
 800a162:	3401      	adds	r4, #1
 800a164:	b2e4      	uxtb	r4, r4
 800a166:	2c07      	cmp	r4, #7
 800a168:	d00c      	beq.n	800a184 <PxMessagingTask+0x53c>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a16a:	0020      	movs	r0, r4
 800a16c:	f003 f9d0 	bl	800d510 <GetUart>
 800a170:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a172:	42bb      	cmp	r3, r7
 800a174:	d1f5      	bne.n	800a162 <PxMessagingTask+0x51a>
									messageParams[temp++] =p;
 800a176:	9a05      	ldr	r2, [sp, #20]
 800a178:	1c53      	adds	r3, r2, #1
 800a17a:	4984      	ldr	r1, [pc, #528]	; (800a38c <PxMessagingTask+0x744>)
 800a17c:	548c      	strb	r4, [r1, r2]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	9305      	str	r3, [sp, #20]
 800a182:	e7ee      	b.n	800a162 <PxMessagingTask+0x51a>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a184:	466b      	mov	r3, sp
 800a186:	8a9a      	ldrh	r2, [r3, #20]
 800a188:	2114      	movs	r1, #20
 800a18a:	9804      	ldr	r0, [sp, #16]
 800a18c:	f7ff fa98 	bl	80096c0 <SendMessageToModule>
							break;
 800a190:	2700      	movs	r7, #0
 800a192:	e589      	b.n	8009ca8 <PxMessagingTask+0x60>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a194:	4b79      	ldr	r3, [pc, #484]	; (800a37c <PxMessagingTask+0x734>)
 800a196:	199b      	adds	r3, r3, r6
 800a198:	5d1a      	ldrb	r2, [r3, r4]
 800a19a:	0612      	lsls	r2, r2, #24
 800a19c:	191b      	adds	r3, r3, r4
 800a19e:	78d9      	ldrb	r1, [r3, #3]
 800a1a0:	1852      	adds	r2, r2, r1
 800a1a2:	7859      	ldrb	r1, [r3, #1]
 800a1a4:	0409      	lsls	r1, r1, #16
 800a1a6:	1852      	adds	r2, r2, r1
 800a1a8:	7899      	ldrb	r1, [r3, #2]
 800a1aa:	0209      	lsls	r1, r1, #8
 800a1ac:	1852      	adds	r2, r2, r1
 800a1ae:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a1b0:	791b      	ldrb	r3, [r3, #4]
 800a1b2:	2bff      	cmp	r3, #255	; 0xff
 800a1b4:	d01b      	beq.n	800a1ee <PxMessagingTask+0x5a6>
								for(p =0; p < numOfParams; p++){
 800a1b6:	9b06      	ldr	r3, [sp, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d015      	beq.n	800a1e8 <PxMessagingTask+0x5a0>
 800a1bc:	4653      	mov	r3, sl
 800a1be:	1d1f      	adds	r7, r3, #4
 800a1c0:	193f      	adds	r7, r7, r4
 800a1c2:	4b6e      	ldr	r3, [pc, #440]	; (800a37c <PxMessagingTask+0x734>)
 800a1c4:	18ff      	adds	r7, r7, r3
 800a1c6:	3305      	adds	r3, #5
 800a1c8:	4453      	add	r3, sl
 800a1ca:	191c      	adds	r4, r3, r4
 800a1cc:	9b06      	ldr	r3, [sp, #24]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a1d4:	783b      	ldrb	r3, [r7, #0]
 800a1d6:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	2b05      	cmp	r3, #5
 800a1dc:	d914      	bls.n	800a208 <PxMessagingTask+0x5c0>
 800a1de:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a1e0:	42a7      	cmp	r7, r4
 800a1e2:	d1f7      	bne.n	800a1d4 <PxMessagingTask+0x58c>
 800a1e4:	2700      	movs	r7, #0
 800a1e6:	e55f      	b.n	8009ca8 <PxMessagingTask+0x60>
							temp =temp32 =0;
 800a1e8:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a1ea:	2700      	movs	r7, #0
 800a1ec:	e55c      	b.n	8009ca8 <PxMessagingTask+0x60>
								for(p =1; p <= NumOfPorts; p++){
 800a1ee:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a1f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1f2:	0020      	movs	r0, r4
 800a1f4:	f003 fa1c 	bl	800d630 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a1f8:	3401      	adds	r4, #1
 800a1fa:	b2e4      	uxtb	r4, r4
 800a1fc:	2c07      	cmp	r4, #7
 800a1fe:	d1f7      	bne.n	800a1f0 <PxMessagingTask+0x5a8>
							temp =temp32 =0;
 800a200:	2300      	movs	r3, #0
 800a202:	9305      	str	r3, [sp, #20]
 800a204:	001f      	movs	r7, r3
 800a206:	e54f      	b.n	8009ca8 <PxMessagingTask+0x60>
										UpdateBaudrate(temp,temp32);
 800a208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a20a:	9805      	ldr	r0, [sp, #20]
 800a20c:	f003 fa10 	bl	800d630 <UpdateBaudrate>
 800a210:	e7e5      	b.n	800a1de <PxMessagingTask+0x596>
							SaveToRO();
 800a212:	f001 f901 	bl	800b418 <SaveToRO>
							SaveEEportsDir();
 800a216:	f7f9 f8ef 	bl	80033f8 <SaveEEportsDir>
							indMode =IND_PING;
 800a21a:	4b62      	ldr	r3, [pc, #392]	; (800a3a4 <PxMessagingTask+0x75c>)
 800a21c:	2201      	movs	r2, #1
 800a21e:	701a      	strb	r2, [r3, #0]
							break;
 800a220:	2700      	movs	r7, #0
 800a222:	e541      	b.n	8009ca8 <PxMessagingTask+0x60>
							ClearEEportsDir();
 800a224:	f7f9 f9d2 	bl	80035cc <ClearEEportsDir>
							ClearROtopology();
 800a228:	f001 f9fe 	bl	800b628 <ClearROtopology>
							osDelay(100);
 800a22c:	2064      	movs	r0, #100	; 0x64
 800a22e:	f003 fabe 	bl	800d7ae <osDelay>
							indMode =IND_TOPOLOGY;
 800a232:	4b5c      	ldr	r3, [pc, #368]	; (800a3a4 <PxMessagingTask+0x75c>)
 800a234:	2202      	movs	r2, #2
 800a236:	701a      	strb	r2, [r3, #0]
							break;
 800a238:	2700      	movs	r7, #0
 800a23a:	e535      	b.n	8009ca8 <PxMessagingTask+0x60>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a23c:	f003 fbcc 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 800a240:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a242:	464b      	mov	r3, r9
 800a244:	2bff      	cmp	r3, #255	; 0xff
 800a246:	d026      	beq.n	800a296 <PxMessagingTask+0x64e>
							else if(dst == BOS_MULTICAST)
 800a248:	2bfe      	cmp	r3, #254	; 0xfe
 800a24a:	d02d      	beq.n	800a2a8 <PxMessagingTask+0x660>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a24c:	4454      	add	r4, sl
 800a24e:	494b      	ldr	r1, [pc, #300]	; (800a37c <PxMessagingTask+0x734>)
 800a250:	1861      	adds	r1, r4, r1
 800a252:	9a06      	ldr	r2, [sp, #24]
 800a254:	4854      	ldr	r0, [pc, #336]	; (800a3a8 <PxMessagingTask+0x760>)
 800a256:	f009 f818 	bl	801328a <memcpy>
								temp =PcPort;
 800a25a:	4c54      	ldr	r4, [pc, #336]	; (800a3ac <PxMessagingTask+0x764>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a25c:	4b52      	ldr	r3, [pc, #328]	; (800a3a8 <PxMessagingTask+0x760>)
 800a25e:	4699      	mov	r9, r3
								if(BOS.response == BOS_RESPONSE_ALL){
 800a260:	4b53      	ldr	r3, [pc, #332]	; (800a3b0 <PxMessagingTask+0x768>)
 800a262:	4698      	mov	r8, r3
								temp =PcPort;
 800a264:	7823      	ldrb	r3, [r4, #0]
 800a266:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a268:	9a08      	ldr	r2, [sp, #32]
 800a26a:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a26c:	2299      	movs	r2, #153	; 0x99
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a272:	4648      	mov	r0, r9
 800a274:	f003 fb32 	bl	800d8dc <FreeRTOS_CLIProcessCommand>
 800a278:	0007      	movs	r7, r0
								PcPort =temp;
 800a27a:	9b05      	ldr	r3, [sp, #20]
 800a27c:	7023      	strb	r3, [r4, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a27e:	4643      	mov	r3, r8
 800a280:	799b      	ldrb	r3, [r3, #6]
 800a282:	2b60      	cmp	r3, #96	; 0x60
 800a284:	d01b      	beq.n	800a2be <PxMessagingTask+0x676>
							} while(xReturned != pdFALSE);
 800a286:	2f00      	cmp	r7, #0
 800a288:	d1ec      	bne.n	800a264 <PxMessagingTask+0x61c>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a28a:	2232      	movs	r2, #50	; 0x32
 800a28c:	2100      	movs	r1, #0
 800a28e:	4846      	ldr	r0, [pc, #280]	; (800a3a8 <PxMessagingTask+0x760>)
 800a290:	f009 f804 	bl	801329c <memset>
							break;
 800a294:	e508      	b.n	8009ca8 <PxMessagingTask+0x60>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a296:	9a06      	ldr	r2, [sp, #24]
 800a298:	3a01      	subs	r2, #1
 800a29a:	4454      	add	r4, sl
 800a29c:	4937      	ldr	r1, [pc, #220]	; (800a37c <PxMessagingTask+0x734>)
 800a29e:	1861      	adds	r1, r4, r1
 800a2a0:	4841      	ldr	r0, [pc, #260]	; (800a3a8 <PxMessagingTask+0x760>)
 800a2a2:	f008 fff2 	bl	801328a <memcpy>
 800a2a6:	e7d8      	b.n	800a25a <PxMessagingTask+0x612>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a2a8:	9b06      	ldr	r3, [sp, #24]
 800a2aa:	9a05      	ldr	r2, [sp, #20]
 800a2ac:	1a9a      	subs	r2, r3, r2
 800a2ae:	3a02      	subs	r2, #2
 800a2b0:	4454      	add	r4, sl
 800a2b2:	4932      	ldr	r1, [pc, #200]	; (800a37c <PxMessagingTask+0x734>)
 800a2b4:	1861      	adds	r1, r4, r1
 800a2b6:	483c      	ldr	r0, [pc, #240]	; (800a3a8 <PxMessagingTask+0x760>)
 800a2b8:	f008 ffe7 	bl	801328a <memcpy>
 800a2bc:	e7cd      	b.n	800a25a <PxMessagingTask+0x612>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a2be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2c0:	f7f5 ff2a 	bl	8000118 <strlen>
 800a2c4:	0002      	movs	r2, r0
 800a2c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2c8:	4830      	ldr	r0, [pc, #192]	; (800a38c <PxMessagingTask+0x744>)
 800a2ca:	f008 ffde 	bl	801328a <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a2ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2d0:	f7f5 ff22 	bl	8000118 <strlen>
 800a2d4:	b282      	uxth	r2, r0
 800a2d6:	2118      	movs	r1, #24
 800a2d8:	9804      	ldr	r0, [sp, #16]
 800a2da:	f7ff f9f1 	bl	80096c0 <SendMessageToModule>
									osDelay(10);
 800a2de:	200a      	movs	r0, #10
 800a2e0:	f003 fa65 	bl	800d7ae <osDelay>
 800a2e4:	e7cf      	b.n	800a286 <PxMessagingTask+0x63e>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a2e6:	f003 fb77 	bl	800d9d8 <FreeRTOS_CLIGetOutputBuffer>
 800a2ea:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a2ec:	f7f5 ff14 	bl	8000118 <strlen>
 800a2f0:	0002      	movs	r2, r0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	0038      	movs	r0, r7
 800a2f6:	f008 ffd1 	bl	801329c <memset>
							if(longMessage){
 800a2fa:	4b25      	ldr	r3, [pc, #148]	; (800a390 <PxMessagingTask+0x748>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d012      	beq.n	800a328 <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a302:	4b24      	ldr	r3, [pc, #144]	; (800a394 <PxMessagingTask+0x74c>)
 800a304:	4698      	mov	r8, r3
 800a306:	8818      	ldrh	r0, [r3, #0]
 800a308:	1838      	adds	r0, r7, r0
 800a30a:	4454      	add	r4, sl
 800a30c:	491b      	ldr	r1, [pc, #108]	; (800a37c <PxMessagingTask+0x734>)
 800a30e:	1861      	adds	r1, r4, r1
 800a310:	9c06      	ldr	r4, [sp, #24]
 800a312:	0022      	movs	r2, r4
 800a314:	f008 ffb9 	bl	801328a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a318:	4643      	mov	r3, r8
 800a31a:	881a      	ldrh	r2, [r3, #0]
 800a31c:	46a4      	mov	ip, r4
 800a31e:	4462      	add	r2, ip
 800a320:	4643      	mov	r3, r8
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	2700      	movs	r7, #0
 800a326:	e4bf      	b.n	8009ca8 <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a328:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <PxMessagingTask+0x74c>)
 800a32a:	4698      	mov	r8, r3
 800a32c:	8818      	ldrh	r0, [r3, #0]
 800a32e:	1838      	adds	r0, r7, r0
 800a330:	4454      	add	r4, sl
 800a332:	4912      	ldr	r1, [pc, #72]	; (800a37c <PxMessagingTask+0x734>)
 800a334:	1861      	adds	r1, r4, r1
 800a336:	9a06      	ldr	r2, [sp, #24]
 800a338:	f008 ffa7 	bl	801328a <memcpy>
								longMessageLastPtr =0;
 800a33c:	2700      	movs	r7, #0
 800a33e:	4643      	mov	r3, r8
 800a340:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800a342:	4b10      	ldr	r3, [pc, #64]	; (800a384 <PxMessagingTask+0x73c>)
 800a344:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a346:	003b      	movs	r3, r7
 800a348:	003a      	movs	r2, r7
 800a34a:	0039      	movs	r1, r7
 800a34c:	4819      	ldr	r0, [pc, #100]	; (800a3b4 <PxMessagingTask+0x76c>)
 800a34e:	6800      	ldr	r0, [r0, #0]
 800a350:	f004 fe4c 	bl	800efec <xTaskGenericNotify>
 800a354:	e4a8      	b.n	8009ca8 <PxMessagingTask+0x60>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a356:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <PxMessagingTask+0x770>)
 800a358:	4a18      	ldr	r2, [pc, #96]	; (800a3bc <PxMessagingTask+0x774>)
 800a35a:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a35c:	4b11      	ldr	r3, [pc, #68]	; (800a3a4 <PxMessagingTask+0x75c>)
 800a35e:	2201      	movs	r2, #1
 800a360:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a362:	200a      	movs	r0, #10
 800a364:	f003 fa23 	bl	800d7ae <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <PxMessagingTask+0x778>)
 800a36e:	4a15      	ldr	r2, [pc, #84]	; (800a3c4 <PxMessagingTask+0x77c>)
 800a370:	60da      	str	r2, [r3, #12]
 800a372:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	e7fd      	b.n	800a376 <PxMessagingTask+0x72e>
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	20000d08 	.word	0x20000d08
 800a380:	20001090 	.word	0x20001090
 800a384:	20001110 	.word	0x20001110
 800a388:	20001076 	.word	0x20001076
 800a38c:	20000f38 	.word	0x20000f38
 800a390:	20000ef5 	.word	0x20000ef5
 800a394:	20000ef6 	.word	0x20000ef6
 800a398:	20001628 	.word	0x20001628
 800a39c:	2000001c 	.word	0x2000001c
 800a3a0:	20000a78 	.word	0x20000a78
 800a3a4:	20000ef4 	.word	0x20000ef4
 800a3a8:	200015f4 	.word	0x200015f4
 800a3ac:	20000a77 	.word	0x20000a77
 800a3b0:	200069c8 	.word	0x200069c8
 800a3b4:	20001504 	.word	0x20001504
 800a3b8:	20007ff0 	.word	0x20007ff0
 800a3bc:	deadbeef 	.word	0xdeadbeef
 800a3c0:	e000ed00 	.word	0xe000ed00
 800a3c4:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a3c8:	4fef      	ldr	r7, [pc, #956]	; (800a788 <PxMessagingTask+0xb40>)
 800a3ca:	19bf      	adds	r7, r7, r6
 800a3cc:	5d38      	ldrb	r0, [r7, r4]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	3319      	adds	r3, #25
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	f7fe ff4a 	bl	8009270 <SendMessageFromPort>
							osDelay(100);
 800a3dc:	2064      	movs	r0, #100	; 0x64
 800a3de:	f003 f9e6 	bl	800d7ae <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a3e2:	5d3b      	ldrb	r3, [r7, r4]
 800a3e4:	4ae9      	ldr	r2, [pc, #932]	; (800a78c <PxMessagingTask+0xb44>)
 800a3e6:	7811      	ldrb	r1, [r2, #0]
 800a3e8:	9a08      	ldr	r2, [sp, #32]
 800a3ea:	9804      	ldr	r0, [sp, #16]
 800a3ec:	f7f9 fbae 	bl	8003b4c <remoteBootloaderUpdate>
							break;
 800a3f0:	2700      	movs	r7, #0
 800a3f2:	e459      	b.n	8009ca8 <PxMessagingTask+0x60>
							temp =cMessage[port - 1][11 + shift];
 800a3f4:	46a0      	mov	r8, r4
 800a3f6:	0027      	movs	r7, r4
 800a3f8:	370b      	adds	r7, #11
 800a3fa:	4be3      	ldr	r3, [pc, #908]	; (800a788 <PxMessagingTask+0xb40>)
 800a3fc:	199b      	adds	r3, r3, r6
 800a3fe:	5ddb      	ldrb	r3, [r3, r7]
 800a400:	4699      	mov	r9, r3
							if(numOfParams == 15)
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	2b0f      	cmp	r3, #15
 800a406:	d100      	bne.n	800a40a <PxMessagingTask+0x7c2>
 800a408:	e087      	b.n	800a51a <PxMessagingTask+0x8d2>
							if(numOfParams == 17)
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	2b11      	cmp	r3, #17
 800a40e:	d100      	bne.n	800a412 <PxMessagingTask+0x7ca>
 800a410:	e08b      	b.n	800a52a <PxMessagingTask+0x8e2>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a412:	4643      	mov	r3, r8
 800a414:	1c58      	adds	r0, r3, #1
 800a416:	900c      	str	r0, [sp, #48]	; 0x30
 800a418:	1c9c      	adds	r4, r3, #2
 800a41a:	940d      	str	r4, [sp, #52]	; 0x34
 800a41c:	1cd9      	adds	r1, r3, #3
 800a41e:	910e      	str	r1, [sp, #56]	; 0x38
 800a420:	4bd9      	ldr	r3, [pc, #868]	; (800a788 <PxMessagingTask+0xb40>)
 800a422:	199b      	adds	r3, r3, r6
 800a424:	4642      	mov	r2, r8
 800a426:	5c9a      	ldrb	r2, [r3, r2]
 800a428:	0612      	lsls	r2, r2, #24
 800a42a:	5c59      	ldrb	r1, [r3, r1]
 800a42c:	1852      	adds	r2, r2, r1
 800a42e:	5c19      	ldrb	r1, [r3, r0]
 800a430:	0409      	lsls	r1, r1, #16
 800a432:	1852      	adds	r2, r2, r1
 800a434:	5d19      	ldrb	r1, [r3, r4]
 800a436:	0209      	lsls	r1, r1, #8
 800a438:	1852      	adds	r2, r2, r1
 800a43a:	920b      	str	r2, [sp, #44]	; 0x2c
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a43c:	4642      	mov	r2, r8
 800a43e:	3204      	adds	r2, #4
 800a440:	920f      	str	r2, [sp, #60]	; 0x3c
 800a442:	4641      	mov	r1, r8
 800a444:	3105      	adds	r1, #5
 800a446:	9110      	str	r1, [sp, #64]	; 0x40
 800a448:	4640      	mov	r0, r8
 800a44a:	3006      	adds	r0, #6
 800a44c:	9011      	str	r0, [sp, #68]	; 0x44
 800a44e:	4644      	mov	r4, r8
 800a450:	3407      	adds	r4, #7
 800a452:	9405      	str	r4, [sp, #20]
 800a454:	5c9c      	ldrb	r4, [r3, r2]
 800a456:	0624      	lsls	r4, r4, #24
 800a458:	5c5a      	ldrb	r2, [r3, r1]
 800a45a:	0412      	lsls	r2, r2, #16
 800a45c:	18a4      	adds	r4, r4, r2
 800a45e:	9a05      	ldr	r2, [sp, #20]
 800a460:	5c9a      	ldrb	r2, [r3, r2]
 800a462:	18a4      	adds	r4, r4, r2
 800a464:	5c1b      	ldrb	r3, [r3, r0]
 800a466:	021b      	lsls	r3, r3, #8
 800a468:	18e4      	adds	r4, r4, r3
							if(temp == false){
 800a46a:	464b      	mov	r3, r9
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d164      	bne.n	800a53a <PxMessagingTask+0x8f2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a470:	4bc5      	ldr	r3, [pc, #788]	; (800a788 <PxMessagingTask+0xb40>)
 800a472:	199b      	adds	r3, r3, r6
 800a474:	4443      	add	r3, r8
 800a476:	7a5b      	ldrb	r3, [r3, #9]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d012      	beq.n	800a4a2 <PxMessagingTask+0x85a>
 800a47c:	2138      	movs	r1, #56	; 0x38
 800a47e:	4369      	muls	r1, r5
 800a480:	4ac1      	ldr	r2, [pc, #772]	; (800a788 <PxMessagingTask+0xb40>)
 800a482:	1852      	adds	r2, r2, r1
 800a484:	4442      	add	r2, r8
 800a486:	7a91      	ldrb	r1, [r2, #10]
 800a488:	2900      	cmp	r1, #0
 800a48a:	d00a      	beq.n	800a4a2 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a48c:	2038      	movs	r0, #56	; 0x38
 800a48e:	4368      	muls	r0, r5
 800a490:	4abd      	ldr	r2, [pc, #756]	; (800a788 <PxMessagingTask+0xb40>)
 800a492:	1812      	adds	r2, r2, r0
 800a494:	4442      	add	r2, r8
 800a496:	7a10      	ldrb	r0, [r2, #8]
 800a498:	9100      	str	r1, [sp, #0]
 800a49a:	0022      	movs	r2, r4
 800a49c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a49e:	f7fe fdc5 	bl	800902c <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a4a2:	4bb9      	ldr	r3, [pc, #740]	; (800a788 <PxMessagingTask+0xb40>)
 800a4a4:	199b      	adds	r3, r3, r6
 800a4a6:	5ddb      	ldrb	r3, [r3, r7]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d012      	beq.n	800a4d2 <PxMessagingTask+0x88a>
 800a4ac:	2138      	movs	r1, #56	; 0x38
 800a4ae:	4369      	muls	r1, r5
 800a4b0:	4ab5      	ldr	r2, [pc, #724]	; (800a788 <PxMessagingTask+0xb40>)
 800a4b2:	1852      	adds	r2, r2, r1
 800a4b4:	4442      	add	r2, r8
 800a4b6:	7b11      	ldrb	r1, [r2, #12]
 800a4b8:	2900      	cmp	r1, #0
 800a4ba:	d00a      	beq.n	800a4d2 <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a4bc:	2038      	movs	r0, #56	; 0x38
 800a4be:	4368      	muls	r0, r5
 800a4c0:	4ab1      	ldr	r2, [pc, #708]	; (800a788 <PxMessagingTask+0xb40>)
 800a4c2:	1812      	adds	r2, r2, r0
 800a4c4:	4442      	add	r2, r8
 800a4c6:	7a10      	ldrb	r0, [r2, #8]
 800a4c8:	9100      	str	r1, [sp, #0]
 800a4ca:	0022      	movs	r2, r4
 800a4cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ce:	f7fe fdad 	bl	800902c <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a4d2:	4bad      	ldr	r3, [pc, #692]	; (800a788 <PxMessagingTask+0xb40>)
 800a4d4:	199b      	adds	r3, r3, r6
 800a4d6:	4443      	add	r3, r8
 800a4d8:	7b5b      	ldrb	r3, [r3, #13]
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	2700      	movs	r7, #0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <PxMessagingTask+0x89e>
 800a4e2:	f7ff fbe1 	bl	8009ca8 <PxMessagingTask+0x60>
 800a4e6:	2238      	movs	r2, #56	; 0x38
 800a4e8:	436a      	muls	r2, r5
 800a4ea:	4ba7      	ldr	r3, [pc, #668]	; (800a788 <PxMessagingTask+0xb40>)
 800a4ec:	189b      	adds	r3, r3, r2
 800a4ee:	4443      	add	r3, r8
 800a4f0:	7b9a      	ldrb	r2, [r3, #14]
 800a4f2:	42ba      	cmp	r2, r7
 800a4f4:	d101      	bne.n	800a4fa <PxMessagingTask+0x8b2>
 800a4f6:	f000 fea0 	bl	800b23a <PxMessagingTask+0x15f2>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800a4fa:	2138      	movs	r1, #56	; 0x38
 800a4fc:	4369      	muls	r1, r5
 800a4fe:	4ba2      	ldr	r3, [pc, #648]	; (800a788 <PxMessagingTask+0xb40>)
 800a500:	185b      	adds	r3, r3, r1
 800a502:	4443      	add	r3, r8
 800a504:	7a18      	ldrb	r0, [r3, #8]
 800a506:	9200      	str	r2, [sp, #0]
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	0022      	movs	r2, r4
 800a50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a50e:	f7fe fd8d 	bl	800902c <SetupDMAStreams>
 800a512:	464b      	mov	r3, r9
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	f7ff fbc7 	bl	8009ca8 <PxMessagingTask+0x60>
								temp =cMessage[port - 1][13 + shift];
 800a51a:	2238      	movs	r2, #56	; 0x38
 800a51c:	436a      	muls	r2, r5
 800a51e:	4b9a      	ldr	r3, [pc, #616]	; (800a788 <PxMessagingTask+0xb40>)
 800a520:	189b      	adds	r3, r3, r2
 800a522:	191c      	adds	r4, r3, r4
 800a524:	7b63      	ldrb	r3, [r4, #13]
 800a526:	4699      	mov	r9, r3
 800a528:	e773      	b.n	800a412 <PxMessagingTask+0x7ca>
								temp =cMessage[port - 1][15 + shift];
 800a52a:	2238      	movs	r2, #56	; 0x38
 800a52c:	436a      	muls	r2, r5
 800a52e:	4b96      	ldr	r3, [pc, #600]	; (800a788 <PxMessagingTask+0xb40>)
 800a530:	189b      	adds	r3, r3, r2
 800a532:	4443      	add	r3, r8
 800a534:	7bdb      	ldrb	r3, [r3, #15]
 800a536:	4699      	mov	r9, r3
 800a538:	e76b      	b.n	800a412 <PxMessagingTask+0x7ca>
 800a53a:	46c2      	mov	sl, r8
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a53c:	2338      	movs	r3, #56	; 0x38
 800a53e:	436b      	muls	r3, r5
 800a540:	4c91      	ldr	r4, [pc, #580]	; (800a788 <PxMessagingTask+0xb40>)
 800a542:	18e4      	adds	r4, r4, r3
 800a544:	4653      	mov	r3, sl
 800a546:	18e6      	adds	r6, r4, r3
 800a548:	7a31      	ldrb	r1, [r6, #8]
 800a54a:	20e4      	movs	r0, #228	; 0xe4
 800a54c:	f7fd f948 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a550:	4653      	mov	r3, sl
 800a552:	5ce3      	ldrb	r3, [r4, r3]
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a558:	5ca1      	ldrb	r1, [r4, r2]
 800a55a:	18c9      	adds	r1, r1, r3
 800a55c:	b289      	uxth	r1, r1
 800a55e:	20e5      	movs	r0, #229	; 0xe5
 800a560:	f7fd f93e 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a566:	5ce3      	ldrb	r3, [r4, r3]
 800a568:	021b      	lsls	r3, r3, #8
 800a56a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a56c:	5ca1      	ldrb	r1, [r4, r2]
 800a56e:	18c9      	adds	r1, r1, r3
 800a570:	b289      	uxth	r1, r1
 800a572:	20e6      	movs	r0, #230	; 0xe6
 800a574:	f7fd f934 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a57a:	5ce3      	ldrb	r3, [r4, r3]
 800a57c:	021b      	lsls	r3, r3, #8
 800a57e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a580:	5ca1      	ldrb	r1, [r4, r2]
 800a582:	18c9      	adds	r1, r1, r3
 800a584:	b289      	uxth	r1, r1
 800a586:	20e7      	movs	r0, #231	; 0xe7
 800a588:	f7fd f92a 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a58c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a58e:	5ce3      	ldrb	r3, [r4, r3]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	9a05      	ldr	r2, [sp, #20]
 800a594:	5ca1      	ldrb	r1, [r4, r2]
 800a596:	18c9      	adds	r1, r1, r3
 800a598:	b289      	uxth	r1, r1
 800a59a:	20e8      	movs	r0, #232	; 0xe8
 800a59c:	f7fd f920 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a5a0:	7a73      	ldrb	r3, [r6, #9]
 800a5a2:	021b      	lsls	r3, r3, #8
 800a5a4:	7ab1      	ldrb	r1, [r6, #10]
 800a5a6:	18c9      	adds	r1, r1, r3
 800a5a8:	b289      	uxth	r1, r1
 800a5aa:	20e9      	movs	r0, #233	; 0xe9
 800a5ac:	f7fd f918 	bl	80077e0 <EE_WriteVariable>
								if(numOfParams == 19)
 800a5b0:	9b06      	ldr	r3, [sp, #24]
 800a5b2:	2b13      	cmp	r3, #19
 800a5b4:	d115      	bne.n	800a5e2 <PxMessagingTask+0x99a>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a5b6:	3325      	adds	r3, #37	; 0x25
 800a5b8:	436b      	muls	r3, r5
 800a5ba:	4d73      	ldr	r5, [pc, #460]	; (800a788 <PxMessagingTask+0xb40>)
 800a5bc:	18ed      	adds	r5, r5, r3
 800a5be:	5deb      	ldrb	r3, [r5, r7]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	4455      	add	r5, sl
 800a5c4:	7b29      	ldrb	r1, [r5, #12]
 800a5c6:	18c9      	adds	r1, r1, r3
 800a5c8:	b289      	uxth	r1, r1
 800a5ca:	20ea      	movs	r0, #234	; 0xea
 800a5cc:	f7fd f908 	bl	80077e0 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	4b6e      	ldr	r3, [pc, #440]	; (800a790 <PxMessagingTask+0xb48>)
 800a5d6:	4a6f      	ldr	r2, [pc, #444]	; (800a794 <PxMessagingTask+0xb4c>)
 800a5d8:	60da      	str	r2, [r3, #12]
 800a5da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	e7fd      	b.n	800a5de <PxMessagingTask+0x996>
								if(numOfParams == 21)
 800a5e2:	9b06      	ldr	r3, [sp, #24]
 800a5e4:	2b15      	cmp	r3, #21
 800a5e6:	d1f3      	bne.n	800a5d0 <PxMessagingTask+0x988>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a5e8:	3323      	adds	r3, #35	; 0x23
 800a5ea:	435d      	muls	r5, r3
 800a5ec:	4b66      	ldr	r3, [pc, #408]	; (800a788 <PxMessagingTask+0xb40>)
 800a5ee:	195b      	adds	r3, r3, r5
 800a5f0:	4453      	add	r3, sl
 800a5f2:	7b5a      	ldrb	r2, [r3, #13]
 800a5f4:	0212      	lsls	r2, r2, #8
 800a5f6:	7b99      	ldrb	r1, [r3, #14]
 800a5f8:	1889      	adds	r1, r1, r2
 800a5fa:	b289      	uxth	r1, r1
 800a5fc:	20eb      	movs	r0, #235	; 0xeb
 800a5fe:	f7fd f8ef 	bl	80077e0 <EE_WriteVariable>
 800a602:	e7e5      	b.n	800a5d0 <PxMessagingTask+0x988>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a604:	4f60      	ldr	r7, [pc, #384]	; (800a788 <PxMessagingTask+0xb40>)
 800a606:	19bf      	adds	r7, r7, r6
 800a608:	1939      	adds	r1, r7, r4
 800a60a:	7a8b      	ldrb	r3, [r1, #10]
 800a60c:	9306      	str	r3, [sp, #24]
 800a60e:	7aca      	ldrb	r2, [r1, #11]
 800a610:	485e      	ldr	r0, [pc, #376]	; (800a78c <PxMessagingTask+0xb44>)
 800a612:	7803      	ldrb	r3, [r0, #0]
 800a614:	4698      	mov	r8, r3
 800a616:	7a4b      	ldrb	r3, [r1, #9]
 800a618:	4699      	mov	r9, r3
 800a61a:	7b08      	ldrb	r0, [r1, #12]
 800a61c:	0003      	movs	r3, r0
 800a61e:	1e58      	subs	r0, r3, #1
 800a620:	4183      	sbcs	r3, r0
 800a622:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a624:	7908      	ldrb	r0, [r1, #4]
 800a626:	0603      	lsls	r3, r0, #24
 800a628:	469c      	mov	ip, r3
 800a62a:	7948      	ldrb	r0, [r1, #5]
 800a62c:	0400      	lsls	r0, r0, #16
 800a62e:	4460      	add	r0, ip
 800a630:	79cb      	ldrb	r3, [r1, #7]
 800a632:	469c      	mov	ip, r3
 800a634:	4460      	add	r0, ip
 800a636:	798b      	ldrb	r3, [r1, #6]
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	469c      	mov	ip, r3
 800a63c:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a63e:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a640:	5d38      	ldrb	r0, [r7, r4]
 800a642:	0600      	lsls	r0, r0, #24
 800a644:	78cc      	ldrb	r4, [r1, #3]
 800a646:	1900      	adds	r0, r0, r4
 800a648:	784c      	ldrb	r4, [r1, #1]
 800a64a:	0424      	lsls	r4, r4, #16
 800a64c:	1900      	adds	r0, r0, r4
 800a64e:	788c      	ldrb	r4, [r1, #2]
 800a650:	0224      	lsls	r4, r4, #8
 800a652:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a654:	9001      	str	r0, [sp, #4]
 800a656:	7a09      	ldrb	r1, [r1, #8]
 800a658:	9100      	str	r1, [sp, #0]
 800a65a:	9b06      	ldr	r3, [sp, #24]
 800a65c:	4641      	mov	r1, r8
 800a65e:	4648      	mov	r0, r9
 800a660:	f7ff f854 	bl	800970c <StartScastDMAStream>
							break;
 800a664:	2700      	movs	r7, #0
 800a666:	f7ff fb1f 	bl	8009ca8 <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a66a:	0023      	movs	r3, r4
 800a66c:	4a46      	ldr	r2, [pc, #280]	; (800a788 <PxMessagingTask+0xb40>)
 800a66e:	1992      	adds	r2, r2, r6
 800a670:	5d12      	ldrb	r2, [r2, r4]
 800a672:	2a00      	cmp	r2, #0
 800a674:	d000      	beq.n	800a678 <PxMessagingTask+0xa30>
 800a676:	e093      	b.n	800a7a0 <PxMessagingTask+0xb58>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a678:	3238      	adds	r2, #56	; 0x38
 800a67a:	436a      	muls	r2, r5
 800a67c:	4b42      	ldr	r3, [pc, #264]	; (800a788 <PxMessagingTask+0xb40>)
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	191c      	adds	r4, r3, r4
 800a682:	78a3      	ldrb	r3, [r4, #2]
 800a684:	061b      	lsls	r3, r3, #24
 800a686:	78e2      	ldrb	r2, [r4, #3]
 800a688:	0412      	lsls	r2, r2, #16
 800a68a:	189b      	adds	r3, r3, r2
 800a68c:	7962      	ldrb	r2, [r4, #5]
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	7922      	ldrb	r2, [r4, #4]
 800a692:	0212      	lsls	r2, r2, #8
 800a694:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a696:	7862      	ldrb	r2, [r4, #1]
 800a698:	3a01      	subs	r2, #1
 800a69a:	b2d1      	uxtb	r1, r2
 800a69c:	2907      	cmp	r1, #7
 800a69e:	d901      	bls.n	800a6a4 <PxMessagingTask+0xa5c>
 800a6a0:	f000 fdb7 	bl	800b212 <PxMessagingTask+0x15ca>
 800a6a4:	b2d2      	uxtb	r2, r2
 800a6a6:	0092      	lsls	r2, r2, #2
 800a6a8:	493b      	ldr	r1, [pc, #236]	; (800a798 <PxMessagingTask+0xb50>)
 800a6aa:	588a      	ldr	r2, [r1, r2]
 800a6ac:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800a6ae:	781a      	ldrb	r2, [r3, #0]
 800a6b0:	4b3a      	ldr	r3, [pc, #232]	; (800a79c <PxMessagingTask+0xb54>)
 800a6b2:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	211f      	movs	r1, #31
 800a6b8:	9804      	ldr	r0, [sp, #16]
 800a6ba:	f7ff f801 	bl	80096c0 <SendMessageToModule>
										break;
 800a6be:	2700      	movs	r7, #0
 800a6c0:	f7ff faf2 	bl	8009ca8 <PxMessagingTask+0x60>
										messageParams[0] =*(__IO int8_t* )temp32;
 800a6c4:	781a      	ldrb	r2, [r3, #0]
 800a6c6:	4b35      	ldr	r3, [pc, #212]	; (800a79c <PxMessagingTask+0xb54>)
 800a6c8:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	211f      	movs	r1, #31
 800a6ce:	9804      	ldr	r0, [sp, #16]
 800a6d0:	f7fe fff6 	bl	80096c0 <SendMessageToModule>
										break;
 800a6d4:	2700      	movs	r7, #0
 800a6d6:	f7ff fae7 	bl	8009ca8 <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a6da:	8819      	ldrh	r1, [r3, #0]
 800a6dc:	4a2f      	ldr	r2, [pc, #188]	; (800a79c <PxMessagingTask+0xb54>)
 800a6de:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	0a1b      	lsrs	r3, r3, #8
 800a6e4:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	211f      	movs	r1, #31
 800a6ea:	9804      	ldr	r0, [sp, #16]
 800a6ec:	f7fe ffe8 	bl	80096c0 <SendMessageToModule>
										break;
 800a6f0:	2700      	movs	r7, #0
 800a6f2:	f7ff fad9 	bl	8009ca8 <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a6f6:	8819      	ldrh	r1, [r3, #0]
 800a6f8:	4a28      	ldr	r2, [pc, #160]	; (800a79c <PxMessagingTask+0xb54>)
 800a6fa:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	b21b      	sxth	r3, r3
 800a700:	121b      	asrs	r3, r3, #8
 800a702:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a704:	2202      	movs	r2, #2
 800a706:	211f      	movs	r1, #31
 800a708:	9804      	ldr	r0, [sp, #16]
 800a70a:	f7fe ffd9 	bl	80096c0 <SendMessageToModule>
										break;
 800a70e:	2700      	movs	r7, #0
 800a710:	f7ff faca 	bl	8009ca8 <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a714:	6819      	ldr	r1, [r3, #0]
 800a716:	4a21      	ldr	r2, [pc, #132]	; (800a79c <PxMessagingTask+0xb54>)
 800a718:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a71a:	6819      	ldr	r1, [r3, #0]
 800a71c:	0a09      	lsrs	r1, r1, #8
 800a71e:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a720:	6819      	ldr	r1, [r3, #0]
 800a722:	0c09      	lsrs	r1, r1, #16
 800a724:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	0e1b      	lsrs	r3, r3, #24
 800a72a:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a72c:	2204      	movs	r2, #4
 800a72e:	211f      	movs	r1, #31
 800a730:	9804      	ldr	r0, [sp, #16]
 800a732:	f7fe ffc5 	bl	80096c0 <SendMessageToModule>
										break;
 800a736:	2700      	movs	r7, #0
 800a738:	f7ff fab6 	bl	8009ca8 <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a73c:	6819      	ldr	r1, [r3, #0]
 800a73e:	4a17      	ldr	r2, [pc, #92]	; (800a79c <PxMessagingTask+0xb54>)
 800a740:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	1209      	asrs	r1, r1, #8
 800a746:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a748:	6819      	ldr	r1, [r3, #0]
 800a74a:	1409      	asrs	r1, r1, #16
 800a74c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	161b      	asrs	r3, r3, #24
 800a752:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a754:	2204      	movs	r2, #4
 800a756:	211f      	movs	r1, #31
 800a758:	9804      	ldr	r0, [sp, #16]
 800a75a:	f7fe ffb1 	bl	80096c0 <SendMessageToModule>
										break;
 800a75e:	2700      	movs	r7, #0
 800a760:	f7ff faa2 	bl	8009ca8 <PxMessagingTask+0x60>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800a764:	7819      	ldrb	r1, [r3, #0]
 800a766:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <PxMessagingTask+0xb54>)
 800a768:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800a76a:	7859      	ldrb	r1, [r3, #1]
 800a76c:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800a76e:	7899      	ldrb	r1, [r3, #2]
 800a770:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800a772:	78db      	ldrb	r3, [r3, #3]
 800a774:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a776:	2208      	movs	r2, #8
 800a778:	211f      	movs	r1, #31
 800a77a:	9804      	ldr	r0, [sp, #16]
 800a77c:	f7fe ffa0 	bl	80096c0 <SendMessageToModule>
										break; // You cannot bitwise floats
 800a780:	2700      	movs	r7, #0
 800a782:	f7ff fa91 	bl	8009ca8 <PxMessagingTask+0x60>
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	20000d08 	.word	0x20000d08
 800a78c:	20001076 	.word	0x20001076
 800a790:	e000ed00 	.word	0xe000ed00
 800a794:	05fa0004 	.word	0x05fa0004
 800a798:	0801a5a4 	.word	0x0801a5a4
 800a79c:	20000f38 	.word	0x20000f38
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800a7a0:	2a02      	cmp	r2, #2
 800a7a2:	d000      	beq.n	800a7a6 <PxMessagingTask+0xb5e>
 800a7a4:	e097      	b.n	800a8d6 <PxMessagingTask+0xc8e>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800a7a6:	48e6      	ldr	r0, [pc, #920]	; (800ab40 <PxMessagingTask+0xef8>)
 800a7a8:	3236      	adds	r2, #54	; 0x36
 800a7aa:	436a      	muls	r2, r5
 800a7ac:	1882      	adds	r2, r0, r2
 800a7ae:	1851      	adds	r1, r2, r1
 800a7b0:	3901      	subs	r1, #1
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	4453      	add	r3, sl
 800a7ba:	1818      	adds	r0, r3, r0
 800a7bc:	f7f8 ffac 	bl	8003718 <IsModuleParameter>
 800a7c0:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d107      	bne.n	800a7d6 <PxMessagingTask+0xb8e>
									SendMessageToModule(src,
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	211f      	movs	r1, #31
 800a7ca:	9804      	ldr	r0, [sp, #16]
 800a7cc:	f7fe ff78 	bl	80096c0 <SendMessageToModule>
 800a7d0:	2700      	movs	r7, #0
 800a7d2:	f7ff fa69 	bl	8009ca8 <PxMessagingTask+0x60>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800a7d6:	3801      	subs	r0, #1
 800a7d8:	4ada      	ldr	r2, [pc, #872]	; (800ab44 <PxMessagingTask+0xefc>)
 800a7da:	210c      	movs	r1, #12
 800a7dc:	4341      	muls	r1, r0
 800a7de:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800a7e0:	1852      	adds	r2, r2, r1
 800a7e2:	7912      	ldrb	r2, [r2, #4]
 800a7e4:	49d8      	ldr	r1, [pc, #864]	; (800ab48 <PxMessagingTask+0xf00>)
 800a7e6:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800a7e8:	3a01      	subs	r2, #1
 800a7ea:	b2d1      	uxtb	r1, r2
 800a7ec:	2907      	cmp	r1, #7
 800a7ee:	d901      	bls.n	800a7f4 <PxMessagingTask+0xbac>
 800a7f0:	f000 fd12 	bl	800b218 <PxMessagingTask+0x15d0>
 800a7f4:	b2d2      	uxtb	r2, r2
 800a7f6:	0092      	lsls	r2, r2, #2
 800a7f8:	49d4      	ldr	r1, [pc, #848]	; (800ab4c <PxMessagingTask+0xf04>)
 800a7fa:	588a      	ldr	r2, [r1, r2]
 800a7fc:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	4bd1      	ldr	r3, [pc, #836]	; (800ab48 <PxMessagingTask+0xf00>)
 800a802:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a804:	2202      	movs	r2, #2
 800a806:	211f      	movs	r1, #31
 800a808:	9804      	ldr	r0, [sp, #16]
 800a80a:	f7fe ff59 	bl	80096c0 <SendMessageToModule>
											break;
 800a80e:	2700      	movs	r7, #0
 800a810:	f7ff fa4a 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a814:	781a      	ldrb	r2, [r3, #0]
 800a816:	4bcc      	ldr	r3, [pc, #816]	; (800ab48 <PxMessagingTask+0xf00>)
 800a818:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a81a:	2202      	movs	r2, #2
 800a81c:	211f      	movs	r1, #31
 800a81e:	9804      	ldr	r0, [sp, #16]
 800a820:	f7fe ff4e 	bl	80096c0 <SendMessageToModule>
											break;
 800a824:	2700      	movs	r7, #0
 800a826:	f7ff fa3f 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a82a:	8819      	ldrh	r1, [r3, #0]
 800a82c:	4ac6      	ldr	r2, [pc, #792]	; (800ab48 <PxMessagingTask+0xf00>)
 800a82e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a836:	2203      	movs	r2, #3
 800a838:	211f      	movs	r1, #31
 800a83a:	9804      	ldr	r0, [sp, #16]
 800a83c:	f7fe ff40 	bl	80096c0 <SendMessageToModule>
											break;
 800a840:	2700      	movs	r7, #0
 800a842:	f7ff fa31 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a846:	8819      	ldrh	r1, [r3, #0]
 800a848:	4abf      	ldr	r2, [pc, #764]	; (800ab48 <PxMessagingTask+0xf00>)
 800a84a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b21b      	sxth	r3, r3
 800a850:	121b      	asrs	r3, r3, #8
 800a852:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a854:	2203      	movs	r2, #3
 800a856:	211f      	movs	r1, #31
 800a858:	9804      	ldr	r0, [sp, #16]
 800a85a:	f7fe ff31 	bl	80096c0 <SendMessageToModule>
											break;
 800a85e:	2700      	movs	r7, #0
 800a860:	f7ff fa22 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a864:	6819      	ldr	r1, [r3, #0]
 800a866:	4ab8      	ldr	r2, [pc, #736]	; (800ab48 <PxMessagingTask+0xf00>)
 800a868:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	0a09      	lsrs	r1, r1, #8
 800a86e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a870:	6819      	ldr	r1, [r3, #0]
 800a872:	0c09      	lsrs	r1, r1, #16
 800a874:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	0e1b      	lsrs	r3, r3, #24
 800a87a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a87c:	2205      	movs	r2, #5
 800a87e:	211f      	movs	r1, #31
 800a880:	9804      	ldr	r0, [sp, #16]
 800a882:	f7fe ff1d 	bl	80096c0 <SendMessageToModule>
											break;
 800a886:	2700      	movs	r7, #0
 800a888:	f7ff fa0e 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a88c:	6819      	ldr	r1, [r3, #0]
 800a88e:	4aae      	ldr	r2, [pc, #696]	; (800ab48 <PxMessagingTask+0xf00>)
 800a890:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a892:	6819      	ldr	r1, [r3, #0]
 800a894:	1209      	asrs	r1, r1, #8
 800a896:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a898:	6819      	ldr	r1, [r3, #0]
 800a89a:	1409      	asrs	r1, r1, #16
 800a89c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	161b      	asrs	r3, r3, #24
 800a8a2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	211f      	movs	r1, #31
 800a8a8:	9804      	ldr	r0, [sp, #16]
 800a8aa:	f7fe ff09 	bl	80096c0 <SendMessageToModule>
											break;
 800a8ae:	2700      	movs	r7, #0
 800a8b0:	f7ff f9fa 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	4aa4      	ldr	r2, [pc, #656]	; (800ab48 <PxMessagingTask+0xf00>)
 800a8b8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a8ba:	7859      	ldrb	r1, [r3, #1]
 800a8bc:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a8be:	7899      	ldrb	r1, [r3, #2]
 800a8c0:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a8c2:	78db      	ldrb	r3, [r3, #3]
 800a8c4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8c6:	2209      	movs	r2, #9
 800a8c8:	211f      	movs	r1, #31
 800a8ca:	9804      	ldr	r0, [sp, #16]
 800a8cc:	f7fe fef8 	bl	80096c0 <SendMessageToModule>
											break;
 800a8d0:	2700      	movs	r7, #0
 800a8d2:	f7ff f9e9 	bl	8009ca8 <PxMessagingTask+0x60>
								}
 800a8d6:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800a8d8:	2a02      	cmp	r2, #2
 800a8da:	d801      	bhi.n	800a8e0 <PxMessagingTask+0xc98>
 800a8dc:	f7ff f9e4 	bl	8009ca8 <PxMessagingTask+0x60>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800a8e0:	3a04      	subs	r2, #4
 800a8e2:	0092      	lsls	r2, r2, #2
 800a8e4:	4b9a      	ldr	r3, [pc, #616]	; (800ab50 <PxMessagingTask+0xf08>)
 800a8e6:	58d1      	ldr	r1, [r2, r3]
 800a8e8:	220f      	movs	r2, #15
 800a8ea:	400a      	ands	r2, r1
 800a8ec:	4b96      	ldr	r3, [pc, #600]	; (800ab48 <PxMessagingTask+0xf00>)
 800a8ee:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800a8f0:	42ba      	cmp	r2, r7
 800a8f2:	d106      	bne.n	800a902 <PxMessagingTask+0xcba>
									SendMessageToModule(src,
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	211f      	movs	r1, #31
 800a8f8:	9804      	ldr	r0, [sp, #16]
 800a8fa:	f7fe fee1 	bl	80096c0 <SendMessageToModule>
 800a8fe:	f7ff f9d3 	bl	8009ca8 <PxMessagingTask+0x60>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a902:	0c09      	lsrs	r1, r1, #16
 800a904:	2380      	movs	r3, #128	; 0x80
 800a906:	059b      	lsls	r3, r3, #22
 800a908:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800a90a:	3a01      	subs	r2, #1
 800a90c:	b2d0      	uxtb	r0, r2
 800a90e:	2807      	cmp	r0, #7
 800a910:	d901      	bls.n	800a916 <PxMessagingTask+0xcce>
 800a912:	f000 fc84 	bl	800b21e <PxMessagingTask+0x15d6>
 800a916:	b2d2      	uxtb	r2, r2
 800a918:	0092      	lsls	r2, r2, #2
 800a91a:	488e      	ldr	r0, [pc, #568]	; (800ab54 <PxMessagingTask+0xf0c>)
 800a91c:	5882      	ldr	r2, [r0, r2]
 800a91e:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	4b89      	ldr	r3, [pc, #548]	; (800ab48 <PxMessagingTask+0xf00>)
 800a924:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a926:	2202      	movs	r2, #2
 800a928:	211f      	movs	r1, #31
 800a92a:	9804      	ldr	r0, [sp, #16]
 800a92c:	f7fe fec8 	bl	80096c0 <SendMessageToModule>
											break;
 800a930:	2700      	movs	r7, #0
 800a932:	f7ff f9b9 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	4b83      	ldr	r3, [pc, #524]	; (800ab48 <PxMessagingTask+0xf00>)
 800a93a:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a93c:	2202      	movs	r2, #2
 800a93e:	211f      	movs	r1, #31
 800a940:	9804      	ldr	r0, [sp, #16]
 800a942:	f7fe febd 	bl	80096c0 <SendMessageToModule>
											break;
 800a946:	2700      	movs	r7, #0
 800a948:	f7ff f9ae 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a94c:	8819      	ldrh	r1, [r3, #0]
 800a94e:	4a7e      	ldr	r2, [pc, #504]	; (800ab48 <PxMessagingTask+0xf00>)
 800a950:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	0a1b      	lsrs	r3, r3, #8
 800a956:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a958:	2203      	movs	r2, #3
 800a95a:	211f      	movs	r1, #31
 800a95c:	9804      	ldr	r0, [sp, #16]
 800a95e:	f7fe feaf 	bl	80096c0 <SendMessageToModule>
											break;
 800a962:	2700      	movs	r7, #0
 800a964:	f7ff f9a0 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a968:	8819      	ldrh	r1, [r3, #0]
 800a96a:	4a77      	ldr	r2, [pc, #476]	; (800ab48 <PxMessagingTask+0xf00>)
 800a96c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b21b      	sxth	r3, r3
 800a972:	121b      	asrs	r3, r3, #8
 800a974:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a976:	2203      	movs	r2, #3
 800a978:	211f      	movs	r1, #31
 800a97a:	9804      	ldr	r0, [sp, #16]
 800a97c:	f7fe fea0 	bl	80096c0 <SendMessageToModule>
											break;
 800a980:	2700      	movs	r7, #0
 800a982:	f7ff f991 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a986:	6819      	ldr	r1, [r3, #0]
 800a988:	4a6f      	ldr	r2, [pc, #444]	; (800ab48 <PxMessagingTask+0xf00>)
 800a98a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a98c:	6819      	ldr	r1, [r3, #0]
 800a98e:	0a09      	lsrs	r1, r1, #8
 800a990:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a992:	6819      	ldr	r1, [r3, #0]
 800a994:	0c09      	lsrs	r1, r1, #16
 800a996:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	0e1b      	lsrs	r3, r3, #24
 800a99c:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a99e:	2205      	movs	r2, #5
 800a9a0:	211f      	movs	r1, #31
 800a9a2:	9804      	ldr	r0, [sp, #16]
 800a9a4:	f7fe fe8c 	bl	80096c0 <SendMessageToModule>
											break;
 800a9a8:	2700      	movs	r7, #0
 800a9aa:	f7ff f97d 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a9ae:	6819      	ldr	r1, [r3, #0]
 800a9b0:	4a65      	ldr	r2, [pc, #404]	; (800ab48 <PxMessagingTask+0xf00>)
 800a9b2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a9b4:	6819      	ldr	r1, [r3, #0]
 800a9b6:	1209      	asrs	r1, r1, #8
 800a9b8:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a9ba:	6819      	ldr	r1, [r3, #0]
 800a9bc:	1409      	asrs	r1, r1, #16
 800a9be:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	161b      	asrs	r3, r3, #24
 800a9c4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9c6:	2205      	movs	r2, #5
 800a9c8:	211f      	movs	r1, #31
 800a9ca:	9804      	ldr	r0, [sp, #16]
 800a9cc:	f7fe fe78 	bl	80096c0 <SendMessageToModule>
											break;
 800a9d0:	2700      	movs	r7, #0
 800a9d2:	f7ff f969 	bl	8009ca8 <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	4b5b      	ldr	r3, [pc, #364]	; (800ab48 <PxMessagingTask+0xf00>)
 800a9da:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a9dc:	4a5e      	ldr	r2, [pc, #376]	; (800ab58 <PxMessagingTask+0xf10>)
 800a9de:	188a      	adds	r2, r1, r2
 800a9e0:	7812      	ldrb	r2, [r2, #0]
 800a9e2:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a9e4:	4a5d      	ldr	r2, [pc, #372]	; (800ab5c <PxMessagingTask+0xf14>)
 800a9e6:	188a      	adds	r2, r1, r2
 800a9e8:	7812      	ldrb	r2, [r2, #0]
 800a9ea:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a9ec:	4a5c      	ldr	r2, [pc, #368]	; (800ab60 <PxMessagingTask+0xf18>)
 800a9ee:	4694      	mov	ip, r2
 800a9f0:	4461      	add	r1, ip
 800a9f2:	780a      	ldrb	r2, [r1, #0]
 800a9f4:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800a9f6:	2209      	movs	r2, #9
 800a9f8:	211f      	movs	r1, #31
 800a9fa:	9804      	ldr	r0, [sp, #16]
 800a9fc:	f7fe fe60 	bl	80096c0 <SendMessageToModule>
											break;
 800aa00:	2700      	movs	r7, #0
 800aa02:	f7ff f951 	bl	8009ca8 <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa06:	4b57      	ldr	r3, [pc, #348]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2002      	movs	r0, #2
 800aa0e:	4240      	negs	r0, r0
 800aa10:	17c1      	asrs	r1, r0, #31
 800aa12:	1812      	adds	r2, r2, r0
 800aa14:	414b      	adcs	r3, r1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00b      	beq.n	800aa32 <PxMessagingTask+0xdea>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800aa1a:	4b53      	ldr	r3, [pc, #332]	; (800ab68 <PxMessagingTask+0xf20>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b10      	cmp	r3, #16
 800aa20:	d101      	bne.n	800aa26 <PxMessagingTask+0xdde>
 800aa22:	f000 fc0e 	bl	800b242 <PxMessagingTask+0x15fa>
								responseStatus =BOS_OK;
 800aa26:	4b50      	ldr	r3, [pc, #320]	; (800ab68 <PxMessagingTask+0xf20>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	701a      	strb	r2, [r3, #0]
 800aa2c:	2700      	movs	r7, #0
 800aa2e:	f7ff f93b 	bl	8009ca8 <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <PxMessagingTask+0xdf2>
 800aa36:	2a01      	cmp	r2, #1
 800aa38:	d8ef      	bhi.n	800aa1a <PxMessagingTask+0xdd2>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800aa3a:	2138      	movs	r1, #56	; 0x38
 800aa3c:	4369      	muls	r1, r5
 800aa3e:	4a40      	ldr	r2, [pc, #256]	; (800ab40 <PxMessagingTask+0xef8>)
 800aa40:	1852      	adds	r2, r2, r1
 800aa42:	5d12      	ldrb	r2, [r2, r4]
 800aa44:	4949      	ldr	r1, [pc, #292]	; (800ab6c <PxMessagingTask+0xf24>)
 800aa46:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800aa48:	2a08      	cmp	r2, #8
 800aa4a:	d8e6      	bhi.n	800aa1a <PxMessagingTask+0xdd2>
 800aa4c:	0092      	lsls	r2, r2, #2
 800aa4e:	4948      	ldr	r1, [pc, #288]	; (800ab70 <PxMessagingTask+0xf28>)
 800aa50:	588a      	ldr	r2, [r1, r2]
 800aa52:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800aa54:	4b44      	ldr	r3, [pc, #272]	; (800ab68 <PxMessagingTask+0xf20>)
 800aa56:	2210      	movs	r2, #16
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	2700      	movs	r7, #0
 800aa5c:	f7ff f924 	bl	8009ca8 <PxMessagingTask+0x60>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800aa60:	4a40      	ldr	r2, [pc, #256]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aa62:	2038      	movs	r0, #56	; 0x38
 800aa64:	4368      	muls	r0, r5
 800aa66:	4936      	ldr	r1, [pc, #216]	; (800ab40 <PxMessagingTask+0xef8>)
 800aa68:	1809      	adds	r1, r1, r0
 800aa6a:	1909      	adds	r1, r1, r4
 800aa6c:	784b      	ldrb	r3, [r1, #1]
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	2300      	movs	r3, #0
 800aa72:	6053      	str	r3, [r2, #4]
										break;
 800aa74:	e7d1      	b.n	800aa1a <PxMessagingTask+0xdd2>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800aa76:	4a3b      	ldr	r2, [pc, #236]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aa78:	2038      	movs	r0, #56	; 0x38
 800aa7a:	4368      	muls	r0, r5
 800aa7c:	4930      	ldr	r1, [pc, #192]	; (800ab40 <PxMessagingTask+0xef8>)
 800aa7e:	1809      	adds	r1, r1, r0
 800aa80:	1909      	adds	r1, r1, r4
 800aa82:	2301      	movs	r3, #1
 800aa84:	56cb      	ldrsb	r3, [r1, r3]
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	17db      	asrs	r3, r3, #31
 800aa8a:	6053      	str	r3, [r2, #4]
										break;
 800aa8c:	e7c5      	b.n	800aa1a <PxMessagingTask+0xdd2>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800aa8e:	4a35      	ldr	r2, [pc, #212]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aa90:	2038      	movs	r0, #56	; 0x38
 800aa92:	4368      	muls	r0, r5
 800aa94:	492a      	ldr	r1, [pc, #168]	; (800ab40 <PxMessagingTask+0xef8>)
 800aa96:	1809      	adds	r1, r1, r0
 800aa98:	1909      	adds	r1, r1, r4
 800aa9a:	788b      	ldrb	r3, [r1, #2]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	7849      	ldrb	r1, [r1, #1]
 800aaa0:	185b      	adds	r3, r3, r1
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	17db      	asrs	r3, r3, #31
 800aaa6:	6053      	str	r3, [r2, #4]
										break;
 800aaa8:	e7b7      	b.n	800aa1a <PxMessagingTask+0xdd2>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800aaaa:	4a2e      	ldr	r2, [pc, #184]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aaac:	2038      	movs	r0, #56	; 0x38
 800aaae:	4368      	muls	r0, r5
 800aab0:	4923      	ldr	r1, [pc, #140]	; (800ab40 <PxMessagingTask+0xef8>)
 800aab2:	1809      	adds	r1, r1, r0
 800aab4:	1909      	adds	r1, r1, r4
 800aab6:	788b      	ldrb	r3, [r1, #2]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	7849      	ldrb	r1, [r1, #1]
 800aabc:	185b      	adds	r3, r3, r1
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	17db      	asrs	r3, r3, #31
 800aac2:	6053      	str	r3, [r2, #4]
										break;
 800aac4:	e7a9      	b.n	800aa1a <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800aac6:	4a27      	ldr	r2, [pc, #156]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aac8:	2038      	movs	r0, #56	; 0x38
 800aaca:	4368      	muls	r0, r5
 800aacc:	491c      	ldr	r1, [pc, #112]	; (800ab40 <PxMessagingTask+0xef8>)
 800aace:	1809      	adds	r1, r1, r0
 800aad0:	1909      	adds	r1, r1, r4
 800aad2:	788b      	ldrb	r3, [r1, #2]
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	78c8      	ldrb	r0, [r1, #3]
 800aad8:	0400      	lsls	r0, r0, #16
 800aada:	181b      	adds	r3, r3, r0
 800aadc:	7848      	ldrb	r0, [r1, #1]
 800aade:	181b      	adds	r3, r3, r0
 800aae0:	7909      	ldrb	r1, [r1, #4]
 800aae2:	0609      	lsls	r1, r1, #24
 800aae4:	185b      	adds	r3, r3, r1
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	2300      	movs	r3, #0
 800aaea:	6053      	str	r3, [r2, #4]
										break;
 800aaec:	e795      	b.n	800aa1a <PxMessagingTask+0xdd2>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800aaee:	4a1d      	ldr	r2, [pc, #116]	; (800ab64 <PxMessagingTask+0xf1c>)
 800aaf0:	2038      	movs	r0, #56	; 0x38
 800aaf2:	4368      	muls	r0, r5
 800aaf4:	4912      	ldr	r1, [pc, #72]	; (800ab40 <PxMessagingTask+0xef8>)
 800aaf6:	1809      	adds	r1, r1, r0
 800aaf8:	1909      	adds	r1, r1, r4
 800aafa:	788b      	ldrb	r3, [r1, #2]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	7848      	ldrb	r0, [r1, #1]
 800ab00:	181b      	adds	r3, r3, r0
 800ab02:	78c8      	ldrb	r0, [r1, #3]
 800ab04:	0400      	lsls	r0, r0, #16
 800ab06:	181b      	adds	r3, r3, r0
 800ab08:	7909      	ldrb	r1, [r1, #4]
 800ab0a:	0609      	lsls	r1, r1, #24
 800ab0c:	185b      	adds	r3, r3, r1
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	17db      	asrs	r3, r3, #31
 800ab12:	6053      	str	r3, [r2, #4]
										break;
 800ab14:	e781      	b.n	800aa1a <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ab16:	4a13      	ldr	r2, [pc, #76]	; (800ab64 <PxMessagingTask+0xf1c>)
 800ab18:	2038      	movs	r0, #56	; 0x38
 800ab1a:	4368      	muls	r0, r5
 800ab1c:	4908      	ldr	r1, [pc, #32]	; (800ab40 <PxMessagingTask+0xef8>)
 800ab1e:	1809      	adds	r1, r1, r0
 800ab20:	1909      	adds	r1, r1, r4
 800ab22:	788b      	ldrb	r3, [r1, #2]
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	78c8      	ldrb	r0, [r1, #3]
 800ab28:	0400      	lsls	r0, r0, #16
 800ab2a:	181b      	adds	r3, r3, r0
 800ab2c:	7848      	ldrb	r0, [r1, #1]
 800ab2e:	181b      	adds	r3, r3, r0
 800ab30:	7909      	ldrb	r1, [r1, #4]
 800ab32:	0609      	lsls	r1, r1, #24
 800ab34:	185b      	adds	r3, r3, r1
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	2300      	movs	r3, #0
 800ab3a:	6053      	str	r3, [r2, #4]
										break;
 800ab3c:	e76d      	b.n	800aa1a <PxMessagingTask+0xdd2>
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	20000d08 	.word	0x20000d08
 800ab44:	20000084 	.word	0x20000084
 800ab48:	20000f38 	.word	0x20000f38
 800ab4c:	0801a5c4 	.word	0x0801a5c4
 800ab50:	20006950 	.word	0x20006950
 800ab54:	0801a5e4 	.word	0x0801a5e4
 800ab58:	20000001 	.word	0x20000001
 800ab5c:	20000002 	.word	0x20000002
 800ab60:	20000003 	.word	0x20000003
 800ab64:	20001108 	.word	0x20001108
 800ab68:	20001110 	.word	0x20001110
 800ab6c:	20000070 	.word	0x20000070
 800ab70:	0801a604 	.word	0x0801a604
							responseStatus =BOS_OK; // Initialize response
 800ab74:	4bcd      	ldr	r3, [pc, #820]	; (800aeac <PxMessagingTask+0x1264>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800ab7a:	0027      	movs	r7, r4
 800ab7c:	4bcc      	ldr	r3, [pc, #816]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ab7e:	199b      	adds	r3, r3, r6
 800ab80:	5d1b      	ldrb	r3, [r3, r4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d100      	bne.n	800ab88 <PxMessagingTask+0xf40>
 800ab86:	e10b      	b.n	800ada0 <PxMessagingTask+0x1158>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800ab88:	2b1e      	cmp	r3, #30
 800ab8a:	d900      	bls.n	800ab8e <PxMessagingTask+0xf46>
 800ab8c:	e104      	b.n	800ad98 <PxMessagingTask+0x1150>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800ab8e:	1e5c      	subs	r4, r3, #1
 800ab90:	00a2      	lsls	r2, r4, #2
 800ab92:	4bc8      	ldr	r3, [pc, #800]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ab94:	58d1      	ldr	r1, [r2, r3]
 800ab96:	0c0b      	lsrs	r3, r1, #16
 800ab98:	2280      	movs	r2, #128	; 0x80
 800ab9a:	0592      	lsls	r2, r2, #22
 800ab9c:	4694      	mov	ip, r2
 800ab9e:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800aba0:	1c7a      	adds	r2, r7, #1
 800aba2:	4690      	mov	r8, r2
 800aba4:	2038      	movs	r0, #56	; 0x38
 800aba6:	4368      	muls	r0, r5
 800aba8:	4ac1      	ldr	r2, [pc, #772]	; (800aeb0 <PxMessagingTask+0x1268>)
 800abaa:	1812      	adds	r2, r2, r0
 800abac:	4640      	mov	r0, r8
 800abae:	5c12      	ldrb	r2, [r2, r0]
 800abb0:	4691      	mov	r9, r2
 800abb2:	3a01      	subs	r2, #1
 800abb4:	b2d0      	uxtb	r0, r2
 800abb6:	2807      	cmp	r0, #7
 800abb8:	d81b      	bhi.n	800abf2 <PxMessagingTask+0xfaa>
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	0092      	lsls	r2, r2, #2
 800abbe:	48be      	ldr	r0, [pc, #760]	; (800aeb8 <PxMessagingTask+0x1270>)
 800abc0:	5882      	ldr	r2, [r0, r2]
 800abc2:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800abc4:	070a      	lsls	r2, r1, #28
 800abc6:	d109      	bne.n	800abdc <PxMessagingTask+0xf94>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800abc8:	2001      	movs	r0, #1
 800abca:	f008 f911 	bl	8012df0 <malloc>
 800abce:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800abd0:	d00c      	beq.n	800abec <PxMessagingTask+0xfa4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800abd2:	00a4      	lsls	r4, r4, #2
 800abd4:	0400      	lsls	r0, r0, #16
 800abd6:	4448      	add	r0, r9
 800abd8:	4ab6      	ldr	r2, [pc, #728]	; (800aeb4 <PxMessagingTask+0x126c>)
 800abda:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800abdc:	2138      	movs	r1, #56	; 0x38
 800abde:	4369      	muls	r1, r5
 800abe0:	4ab3      	ldr	r2, [pc, #716]	; (800aeb0 <PxMessagingTask+0x1268>)
 800abe2:	1852      	adds	r2, r2, r1
 800abe4:	19d2      	adds	r2, r2, r7
 800abe6:	7892      	ldrb	r2, [r2, #2]
 800abe8:	701a      	strb	r2, [r3, #0]
 800abea:	e002      	b.n	800abf2 <PxMessagingTask+0xfaa>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800abec:	4baf      	ldr	r3, [pc, #700]	; (800aeac <PxMessagingTask+0x1264>)
 800abee:	2212      	movs	r2, #18
 800abf0:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800abf2:	2338      	movs	r3, #56	; 0x38
 800abf4:	436b      	muls	r3, r5
 800abf6:	4aae      	ldr	r2, [pc, #696]	; (800aeb0 <PxMessagingTask+0x1268>)
 800abf8:	18d2      	adds	r2, r2, r3
 800abfa:	5dd3      	ldrb	r3, [r2, r7]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	0098      	lsls	r0, r3, #2
 800ac00:	49ac      	ldr	r1, [pc, #688]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ac02:	5841      	ldr	r1, [r0, r1]
 800ac04:	4640      	mov	r0, r8
 800ac06:	5c12      	ldrb	r2, [r2, r0]
 800ac08:	200f      	movs	r0, #15
 800ac0a:	4008      	ands	r0, r1
 800ac0c:	4290      	cmp	r0, r2
 800ac0e:	d009      	beq.n	800ac24 <PxMessagingTask+0xfdc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	48aa      	ldr	r0, [pc, #680]	; (800aebc <PxMessagingTask+0x1274>)
 800ac14:	4684      	mov	ip, r0
 800ac16:	4462      	add	r2, ip
 800ac18:	400a      	ands	r2, r1
 800ac1a:	49a6      	ldr	r1, [pc, #664]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ac1c:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ac1e:	4ba3      	ldr	r3, [pc, #652]	; (800aeac <PxMessagingTask+0x1264>)
 800ac20:	2214      	movs	r2, #20
 800ac22:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800ac24:	4ba6      	ldr	r3, [pc, #664]	; (800aec0 <PxMessagingTask+0x1278>)
 800ac26:	799b      	ldrb	r3, [r3, #6]
 800ac28:	2240      	movs	r2, #64	; 0x40
 800ac2a:	4393      	bics	r3, r2
 800ac2c:	2700      	movs	r7, #0
 800ac2e:	2b20      	cmp	r3, #32
 800ac30:	d001      	beq.n	800ac36 <PxMessagingTask+0xfee>
 800ac32:	f7ff f839 	bl	8009ca8 <PxMessagingTask+0x60>
								messageParams[0] =responseStatus;
 800ac36:	4b9d      	ldr	r3, [pc, #628]	; (800aeac <PxMessagingTask+0x1264>)
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	4ba2      	ldr	r3, [pc, #648]	; (800aec4 <PxMessagingTask+0x127c>)
 800ac3c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ac3e:	2201      	movs	r2, #1
 800ac40:	2121      	movs	r1, #33	; 0x21
 800ac42:	9804      	ldr	r0, [sp, #16]
 800ac44:	f7fe fd3c 	bl	80096c0 <SendMessageToModule>
 800ac48:	f7ff f82e 	bl	8009ca8 <PxMessagingTask+0x60>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac4c:	070a      	lsls	r2, r1, #28
 800ac4e:	d10a      	bne.n	800ac66 <PxMessagingTask+0x101e>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ac50:	2001      	movs	r0, #1
 800ac52:	f008 f8cd 	bl	8012df0 <malloc>
 800ac56:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac58:	d100      	bne.n	800ac5c <PxMessagingTask+0x1014>
 800ac5a:	e369      	b.n	800b330 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac5c:	00a4      	lsls	r4, r4, #2
 800ac5e:	0400      	lsls	r0, r0, #16
 800ac60:	3002      	adds	r0, #2
 800ac62:	4a94      	ldr	r2, [pc, #592]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ac64:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ac66:	2138      	movs	r1, #56	; 0x38
 800ac68:	4369      	muls	r1, r5
 800ac6a:	4a91      	ldr	r2, [pc, #580]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ac6c:	1852      	adds	r2, r2, r1
 800ac6e:	19d2      	adds	r2, r2, r7
 800ac70:	7892      	ldrb	r2, [r2, #2]
 800ac72:	b252      	sxtb	r2, r2
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e7bc      	b.n	800abf2 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac78:	070a      	lsls	r2, r1, #28
 800ac7a:	d10a      	bne.n	800ac92 <PxMessagingTask+0x104a>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ac7c:	2002      	movs	r0, #2
 800ac7e:	f008 f8b7 	bl	8012df0 <malloc>
 800ac82:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac84:	d100      	bne.n	800ac88 <PxMessagingTask+0x1040>
 800ac86:	e353      	b.n	800b330 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac88:	00a4      	lsls	r4, r4, #2
 800ac8a:	0400      	lsls	r0, r0, #16
 800ac8c:	3003      	adds	r0, #3
 800ac8e:	4a89      	ldr	r2, [pc, #548]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ac90:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ac92:	2138      	movs	r1, #56	; 0x38
 800ac94:	4369      	muls	r1, r5
 800ac96:	4a86      	ldr	r2, [pc, #536]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ac98:	1852      	adds	r2, r2, r1
 800ac9a:	19d2      	adds	r2, r2, r7
 800ac9c:	78d1      	ldrb	r1, [r2, #3]
 800ac9e:	0209      	lsls	r1, r1, #8
 800aca0:	7892      	ldrb	r2, [r2, #2]
 800aca2:	1852      	adds	r2, r2, r1
 800aca4:	b292      	uxth	r2, r2
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e7a3      	b.n	800abf2 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acaa:	070a      	lsls	r2, r1, #28
 800acac:	d10a      	bne.n	800acc4 <PxMessagingTask+0x107c>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800acae:	2002      	movs	r0, #2
 800acb0:	f008 f89e 	bl	8012df0 <malloc>
 800acb4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acb6:	d100      	bne.n	800acba <PxMessagingTask+0x1072>
 800acb8:	e33a      	b.n	800b330 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acba:	00a4      	lsls	r4, r4, #2
 800acbc:	0400      	lsls	r0, r0, #16
 800acbe:	3004      	adds	r0, #4
 800acc0:	4a7c      	ldr	r2, [pc, #496]	; (800aeb4 <PxMessagingTask+0x126c>)
 800acc2:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800acc4:	2138      	movs	r1, #56	; 0x38
 800acc6:	4369      	muls	r1, r5
 800acc8:	4a79      	ldr	r2, [pc, #484]	; (800aeb0 <PxMessagingTask+0x1268>)
 800acca:	1852      	adds	r2, r2, r1
 800accc:	19d2      	adds	r2, r2, r7
 800acce:	78d1      	ldrb	r1, [r2, #3]
 800acd0:	0209      	lsls	r1, r1, #8
 800acd2:	7892      	ldrb	r2, [r2, #2]
 800acd4:	1852      	adds	r2, r2, r1
 800acd6:	b212      	sxth	r2, r2
 800acd8:	801a      	strh	r2, [r3, #0]
 800acda:	e78a      	b.n	800abf2 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acdc:	070a      	lsls	r2, r1, #28
 800acde:	d10a      	bne.n	800acf6 <PxMessagingTask+0x10ae>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800ace0:	2004      	movs	r0, #4
 800ace2:	f008 f885 	bl	8012df0 <malloc>
 800ace6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ace8:	d100      	bne.n	800acec <PxMessagingTask+0x10a4>
 800acea:	e321      	b.n	800b330 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acec:	00a4      	lsls	r4, r4, #2
 800acee:	0400      	lsls	r0, r0, #16
 800acf0:	3005      	adds	r0, #5
 800acf2:	4a70      	ldr	r2, [pc, #448]	; (800aeb4 <PxMessagingTask+0x126c>)
 800acf4:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800acf6:	2238      	movs	r2, #56	; 0x38
 800acf8:	436a      	muls	r2, r5
 800acfa:	496d      	ldr	r1, [pc, #436]	; (800aeb0 <PxMessagingTask+0x1268>)
 800acfc:	1889      	adds	r1, r1, r2
 800acfe:	19c9      	adds	r1, r1, r7
 800ad00:	78ca      	ldrb	r2, [r1, #3]
 800ad02:	0212      	lsls	r2, r2, #8
 800ad04:	7908      	ldrb	r0, [r1, #4]
 800ad06:	0400      	lsls	r0, r0, #16
 800ad08:	1812      	adds	r2, r2, r0
 800ad0a:	7888      	ldrb	r0, [r1, #2]
 800ad0c:	1812      	adds	r2, r2, r0
 800ad0e:	7949      	ldrb	r1, [r1, #5]
 800ad10:	0609      	lsls	r1, r1, #24
 800ad12:	1852      	adds	r2, r2, r1
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	e76c      	b.n	800abf2 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad18:	070a      	lsls	r2, r1, #28
 800ad1a:	d10a      	bne.n	800ad32 <PxMessagingTask+0x10ea>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800ad1c:	2004      	movs	r0, #4
 800ad1e:	f008 f867 	bl	8012df0 <malloc>
 800ad22:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad24:	d100      	bne.n	800ad28 <PxMessagingTask+0x10e0>
 800ad26:	e303      	b.n	800b330 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad28:	00a4      	lsls	r4, r4, #2
 800ad2a:	0400      	lsls	r0, r0, #16
 800ad2c:	3006      	adds	r0, #6
 800ad2e:	4a61      	ldr	r2, [pc, #388]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ad30:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800ad32:	2238      	movs	r2, #56	; 0x38
 800ad34:	436a      	muls	r2, r5
 800ad36:	495e      	ldr	r1, [pc, #376]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ad38:	1889      	adds	r1, r1, r2
 800ad3a:	19c9      	adds	r1, r1, r7
 800ad3c:	78ca      	ldrb	r2, [r1, #3]
 800ad3e:	0212      	lsls	r2, r2, #8
 800ad40:	7888      	ldrb	r0, [r1, #2]
 800ad42:	1812      	adds	r2, r2, r0
 800ad44:	7908      	ldrb	r0, [r1, #4]
 800ad46:	0400      	lsls	r0, r0, #16
 800ad48:	1812      	adds	r2, r2, r0
 800ad4a:	7949      	ldrb	r1, [r1, #5]
 800ad4c:	0609      	lsls	r1, r1, #24
 800ad4e:	1852      	adds	r2, r2, r1
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e74e      	b.n	800abf2 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad54:	070a      	lsls	r2, r1, #28
 800ad56:	d10a      	bne.n	800ad6e <PxMessagingTask+0x1126>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800ad58:	2004      	movs	r0, #4
 800ad5a:	f008 f849 	bl	8012df0 <malloc>
 800ad5e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad60:	d100      	bne.n	800ad64 <PxMessagingTask+0x111c>
 800ad62:	e2e5      	b.n	800b330 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad64:	00a4      	lsls	r4, r4, #2
 800ad66:	0400      	lsls	r0, r0, #16
 800ad68:	3007      	adds	r0, #7
 800ad6a:	4a52      	ldr	r2, [pc, #328]	; (800aeb4 <PxMessagingTask+0x126c>)
 800ad6c:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ad6e:	2238      	movs	r2, #56	; 0x38
 800ad70:	436a      	muls	r2, r5
 800ad72:	494f      	ldr	r1, [pc, #316]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ad74:	1889      	adds	r1, r1, r2
 800ad76:	19c9      	adds	r1, r1, r7
 800ad78:	78ca      	ldrb	r2, [r1, #3]
 800ad7a:	0212      	lsls	r2, r2, #8
 800ad7c:	7908      	ldrb	r0, [r1, #4]
 800ad7e:	0400      	lsls	r0, r0, #16
 800ad80:	1812      	adds	r2, r2, r0
 800ad82:	7888      	ldrb	r0, [r1, #2]
 800ad84:	1812      	adds	r2, r2, r0
 800ad86:	7949      	ldrb	r1, [r1, #5]
 800ad88:	0609      	lsls	r1, r1, #24
 800ad8a:	1852      	adds	r2, r2, r1
 800ad8c:	494e      	ldr	r1, [pc, #312]	; (800aec8 <PxMessagingTask+0x1280>)
 800ad8e:	600a      	str	r2, [r1, #0]
 800ad90:	2000      	movs	r0, #0
 800ad92:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	e72c      	b.n	800abf2 <PxMessagingTask+0xfaa>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ad98:	4b44      	ldr	r3, [pc, #272]	; (800aeac <PxMessagingTask+0x1264>)
 800ad9a:	2213      	movs	r2, #19
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	e741      	b.n	800ac24 <PxMessagingTask+0xfdc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ada0:	2238      	movs	r2, #56	; 0x38
 800ada2:	436a      	muls	r2, r5
 800ada4:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ada6:	189b      	adds	r3, r3, r2
 800ada8:	191b      	adds	r3, r3, r4
 800adaa:	789c      	ldrb	r4, [r3, #2]
 800adac:	0624      	lsls	r4, r4, #24
 800adae:	78da      	ldrb	r2, [r3, #3]
 800adb0:	0412      	lsls	r2, r2, #16
 800adb2:	18a4      	adds	r4, r4, r2
 800adb4:	795a      	ldrb	r2, [r3, #5]
 800adb6:	18a4      	adds	r4, r4, r2
 800adb8:	791b      	ldrb	r3, [r3, #4]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800adbe:	23e0      	movs	r3, #224	; 0xe0
 800adc0:	061b      	lsls	r3, r3, #24
 800adc2:	18e2      	adds	r2, r4, r3
 800adc4:	4b41      	ldr	r3, [pc, #260]	; (800aecc <PxMessagingTask+0x1284>)
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d900      	bls.n	800adcc <PxMessagingTask+0x1184>
 800adca:	e083      	b.n	800aed4 <PxMessagingTask+0x128c>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800adcc:	2238      	movs	r2, #56	; 0x38
 800adce:	436a      	muls	r2, r5
 800add0:	4b37      	ldr	r3, [pc, #220]	; (800aeb0 <PxMessagingTask+0x1268>)
 800add2:	189b      	adds	r3, r3, r2
 800add4:	19db      	adds	r3, r3, r7
 800add6:	785b      	ldrb	r3, [r3, #1]
 800add8:	3b01      	subs	r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	2a07      	cmp	r2, #7
 800adde:	d900      	bls.n	800ade2 <PxMessagingTask+0x119a>
 800ade0:	e720      	b.n	800ac24 <PxMessagingTask+0xfdc>
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4a3a      	ldr	r2, [pc, #232]	; (800aed0 <PxMessagingTask+0x1288>)
 800ade8:	58d3      	ldr	r3, [r2, r3]
 800adea:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800adec:	2238      	movs	r2, #56	; 0x38
 800adee:	436a      	muls	r2, r5
 800adf0:	4b2f      	ldr	r3, [pc, #188]	; (800aeb0 <PxMessagingTask+0x1268>)
 800adf2:	189b      	adds	r3, r3, r2
 800adf4:	19df      	adds	r7, r3, r7
 800adf6:	79bb      	ldrb	r3, [r7, #6]
 800adf8:	7023      	strb	r3, [r4, #0]
											break;
 800adfa:	e713      	b.n	800ac24 <PxMessagingTask+0xfdc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800adfc:	2238      	movs	r2, #56	; 0x38
 800adfe:	436a      	muls	r2, r5
 800ae00:	4b2b      	ldr	r3, [pc, #172]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ae02:	189b      	adds	r3, r3, r2
 800ae04:	19df      	adds	r7, r3, r7
 800ae06:	2306      	movs	r3, #6
 800ae08:	56fb      	ldrsb	r3, [r7, r3]
 800ae0a:	7023      	strb	r3, [r4, #0]
											break;
 800ae0c:	e70a      	b.n	800ac24 <PxMessagingTask+0xfdc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800ae0e:	2238      	movs	r2, #56	; 0x38
 800ae10:	436a      	muls	r2, r5
 800ae12:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ae14:	189b      	adds	r3, r3, r2
 800ae16:	19df      	adds	r7, r3, r7
 800ae18:	79fa      	ldrb	r2, [r7, #7]
 800ae1a:	0212      	lsls	r2, r2, #8
 800ae1c:	79bb      	ldrb	r3, [r7, #6]
 800ae1e:	189b      	adds	r3, r3, r2
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	8023      	strh	r3, [r4, #0]
											break;
 800ae24:	e6fe      	b.n	800ac24 <PxMessagingTask+0xfdc>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800ae26:	2238      	movs	r2, #56	; 0x38
 800ae28:	436a      	muls	r2, r5
 800ae2a:	4b21      	ldr	r3, [pc, #132]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ae2c:	189b      	adds	r3, r3, r2
 800ae2e:	19df      	adds	r7, r3, r7
 800ae30:	79fa      	ldrb	r2, [r7, #7]
 800ae32:	0212      	lsls	r2, r2, #8
 800ae34:	79bb      	ldrb	r3, [r7, #6]
 800ae36:	189b      	adds	r3, r3, r2
 800ae38:	b21b      	sxth	r3, r3
 800ae3a:	8023      	strh	r3, [r4, #0]
											break;
 800ae3c:	e6f2      	b.n	800ac24 <PxMessagingTask+0xfdc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae3e:	2238      	movs	r2, #56	; 0x38
 800ae40:	436a      	muls	r2, r5
 800ae42:	4b1b      	ldr	r3, [pc, #108]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ae44:	189b      	adds	r3, r3, r2
 800ae46:	19df      	adds	r7, r3, r7
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	7a3a      	ldrb	r2, [r7, #8]
 800ae4e:	0412      	lsls	r2, r2, #16
 800ae50:	189b      	adds	r3, r3, r2
 800ae52:	79ba      	ldrb	r2, [r7, #6]
 800ae54:	189b      	adds	r3, r3, r2
 800ae56:	7a7a      	ldrb	r2, [r7, #9]
 800ae58:	0612      	lsls	r2, r2, #24
 800ae5a:	189b      	adds	r3, r3, r2
 800ae5c:	6023      	str	r3, [r4, #0]
											break;
 800ae5e:	e6e1      	b.n	800ac24 <PxMessagingTask+0xfdc>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800ae60:	2238      	movs	r2, #56	; 0x38
 800ae62:	436a      	muls	r2, r5
 800ae64:	4b12      	ldr	r3, [pc, #72]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ae66:	189b      	adds	r3, r3, r2
 800ae68:	19df      	adds	r7, r3, r7
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	79ba      	ldrb	r2, [r7, #6]
 800ae70:	189b      	adds	r3, r3, r2
 800ae72:	7a3a      	ldrb	r2, [r7, #8]
 800ae74:	0412      	lsls	r2, r2, #16
 800ae76:	189b      	adds	r3, r3, r2
 800ae78:	7a7a      	ldrb	r2, [r7, #9]
 800ae7a:	0612      	lsls	r2, r2, #24
 800ae7c:	189b      	adds	r3, r3, r2
 800ae7e:	6023      	str	r3, [r4, #0]
											break;
 800ae80:	e6d0      	b.n	800ac24 <PxMessagingTask+0xfdc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae82:	2238      	movs	r2, #56	; 0x38
 800ae84:	436a      	muls	r2, r5
 800ae86:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <PxMessagingTask+0x1268>)
 800ae88:	189b      	adds	r3, r3, r2
 800ae8a:	19df      	adds	r7, r3, r7
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	7a3a      	ldrb	r2, [r7, #8]
 800ae92:	0412      	lsls	r2, r2, #16
 800ae94:	189b      	adds	r3, r3, r2
 800ae96:	79ba      	ldrb	r2, [r7, #6]
 800ae98:	189b      	adds	r3, r3, r2
 800ae9a:	7a7a      	ldrb	r2, [r7, #9]
 800ae9c:	0612      	lsls	r2, r2, #24
 800ae9e:	189b      	adds	r3, r3, r2
 800aea0:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <PxMessagingTask+0x1280>)
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	2100      	movs	r1, #0
 800aea6:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800aea8:	6023      	str	r3, [r4, #0]
											break;
 800aeaa:	e6bb      	b.n	800ac24 <PxMessagingTask+0xfdc>
 800aeac:	20001110 	.word	0x20001110
 800aeb0:	20000d08 	.word	0x20000d08
 800aeb4:	20006950 	.word	0x20006950
 800aeb8:	0801a628 	.word	0x0801a628
 800aebc:	0000fff0 	.word	0x0000fff0
 800aec0:	200069c8 	.word	0x200069c8
 800aec4:	20000f38 	.word	0x20000f38
 800aec8:	20001108 	.word	0x20001108
 800aecc:	00007fff 	.word	0x00007fff
 800aed0:	0801a648 	.word	0x0801a648
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800aed4:	4adc      	ldr	r2, [pc, #880]	; (800b248 <PxMessagingTask+0x1600>)
 800aed6:	23f8      	movs	r3, #248	; 0xf8
 800aed8:	061b      	lsls	r3, r3, #24
 800aeda:	18e3      	adds	r3, r4, r3
 800aedc:	4293      	cmp	r3, r2
 800aede:	d900      	bls.n	800aee2 <PxMessagingTask+0x129a>
 800aee0:	e0a7      	b.n	800b032 <PxMessagingTask+0x13ea>
									HAL_FLASH_Unlock();
 800aee2:	f005 fe51 	bl	8010b88 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800aee6:	4643      	mov	r3, r8
 800aee8:	2b22      	cmp	r3, #34	; 0x22
 800aeea:	d111      	bne.n	800af10 <PxMessagingTask+0x12c8>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aeec:	2300      	movs	r3, #0
 800aeee:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800aef0:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800aef2:	3301      	adds	r3, #1
 800aef4:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aef6:	a912      	add	r1, sp, #72	; 0x48
 800aef8:	a813      	add	r0, sp, #76	; 0x4c
 800aefa:	f005 ff19 	bl	8010d30 <HAL_FLASHEx_Erase>
 800aefe:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800af00:	2800      	cmp	r0, #0
 800af02:	d102      	bne.n	800af0a <PxMessagingTask+0x12c2>
 800af04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af06:	3301      	adds	r3, #1
 800af08:	d002      	beq.n	800af10 <PxMessagingTask+0x12c8>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af0a:	4bd0      	ldr	r3, [pc, #832]	; (800b24c <PxMessagingTask+0x1604>)
 800af0c:	2216      	movs	r2, #22
 800af0e:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800af10:	4bce      	ldr	r3, [pc, #824]	; (800b24c <PxMessagingTask+0x1604>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d116      	bne.n	800af46 <PxMessagingTask+0x12fe>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800af18:	2238      	movs	r2, #56	; 0x38
 800af1a:	436a      	muls	r2, r5
 800af1c:	4bcc      	ldr	r3, [pc, #816]	; (800b250 <PxMessagingTask+0x1608>)
 800af1e:	189b      	adds	r3, r3, r2
 800af20:	19db      	adds	r3, r3, r7
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	3b01      	subs	r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	2a07      	cmp	r2, #7
 800af2a:	d80c      	bhi.n	800af46 <PxMessagingTask+0x12fe>
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4ac8      	ldr	r2, [pc, #800]	; (800b254 <PxMessagingTask+0x160c>)
 800af32:	58d3      	ldr	r3, [r2, r3]
 800af34:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af36:	8823      	ldrh	r3, [r4, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	4ac7      	ldr	r2, [pc, #796]	; (800b258 <PxMessagingTask+0x1610>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00c      	beq.n	800af5a <PxMessagingTask+0x1312>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af40:	4bc2      	ldr	r3, [pc, #776]	; (800b24c <PxMessagingTask+0x1604>)
 800af42:	2216      	movs	r2, #22
 800af44:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800af46:	f005 fe31 	bl	8010bac <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800af4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d100      	bne.n	800af52 <PxMessagingTask+0x130a>
 800af50:	e668      	b.n	800ac24 <PxMessagingTask+0xfdc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af52:	4bbe      	ldr	r3, [pc, #760]	; (800b24c <PxMessagingTask+0x1604>)
 800af54:	2216      	movs	r2, #22
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	e664      	b.n	800ac24 <PxMessagingTask+0xfdc>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800af5a:	2238      	movs	r2, #56	; 0x38
 800af5c:	436a      	muls	r2, r5
 800af5e:	4bbc      	ldr	r3, [pc, #752]	; (800b250 <PxMessagingTask+0x1608>)
 800af60:	189b      	adds	r3, r3, r2
 800af62:	19df      	adds	r7, r3, r7
 800af64:	79ba      	ldrb	r2, [r7, #6]
 800af66:	2300      	movs	r3, #0
 800af68:	49bc      	ldr	r1, [pc, #752]	; (800b25c <PxMessagingTask+0x1614>)
 800af6a:	600a      	str	r2, [r1, #0]
 800af6c:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800af6e:	0021      	movs	r1, r4
 800af70:	2001      	movs	r0, #1
 800af72:	f005 fe53 	bl	8010c1c <HAL_FLASH_Program>
 800af76:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800af78:	e7e5      	b.n	800af46 <PxMessagingTask+0x12fe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af7a:	8823      	ldrh	r3, [r4, #0]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4ab6      	ldr	r2, [pc, #728]	; (800b258 <PxMessagingTask+0x1610>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d003      	beq.n	800af8c <PxMessagingTask+0x1344>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af84:	4bb1      	ldr	r3, [pc, #708]	; (800b24c <PxMessagingTask+0x1604>)
 800af86:	2216      	movs	r2, #22
 800af88:	701a      	strb	r2, [r3, #0]
													break;
 800af8a:	e7dc      	b.n	800af46 <PxMessagingTask+0x12fe>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af8c:	2238      	movs	r2, #56	; 0x38
 800af8e:	436a      	muls	r2, r5
 800af90:	4baf      	ldr	r3, [pc, #700]	; (800b250 <PxMessagingTask+0x1608>)
 800af92:	189b      	adds	r3, r3, r2
 800af94:	19df      	adds	r7, r3, r7
 800af96:	79fa      	ldrb	r2, [r7, #7]
 800af98:	0212      	lsls	r2, r2, #8
 800af9a:	79bb      	ldrb	r3, [r7, #6]
 800af9c:	18d2      	adds	r2, r2, r3
 800af9e:	17d3      	asrs	r3, r2, #31
 800afa0:	49ae      	ldr	r1, [pc, #696]	; (800b25c <PxMessagingTask+0x1614>)
 800afa2:	600a      	str	r2, [r1, #0]
 800afa4:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afa6:	0021      	movs	r1, r4
 800afa8:	2001      	movs	r0, #1
 800afaa:	f005 fe37 	bl	8010c1c <HAL_FLASH_Program>
 800afae:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800afb0:	e7c9      	b.n	800af46 <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	3301      	adds	r3, #1
 800afb6:	d003      	beq.n	800afc0 <PxMessagingTask+0x1378>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800afb8:	4ba4      	ldr	r3, [pc, #656]	; (800b24c <PxMessagingTask+0x1604>)
 800afba:	2216      	movs	r2, #22
 800afbc:	701a      	strb	r2, [r3, #0]
													break;
 800afbe:	e7c2      	b.n	800af46 <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800afc0:	2238      	movs	r2, #56	; 0x38
 800afc2:	436a      	muls	r2, r5
 800afc4:	4ba2      	ldr	r3, [pc, #648]	; (800b250 <PxMessagingTask+0x1608>)
 800afc6:	189b      	adds	r3, r3, r2
 800afc8:	19df      	adds	r7, r3, r7
 800afca:	79fa      	ldrb	r2, [r7, #7]
 800afcc:	0212      	lsls	r2, r2, #8
 800afce:	7a3b      	ldrb	r3, [r7, #8]
 800afd0:	041b      	lsls	r3, r3, #16
 800afd2:	18d2      	adds	r2, r2, r3
 800afd4:	79bb      	ldrb	r3, [r7, #6]
 800afd6:	18d2      	adds	r2, r2, r3
 800afd8:	7a7b      	ldrb	r3, [r7, #9]
 800afda:	061b      	lsls	r3, r3, #24
 800afdc:	18d2      	adds	r2, r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	499e      	ldr	r1, [pc, #632]	; (800b25c <PxMessagingTask+0x1614>)
 800afe2:	600a      	str	r2, [r1, #0]
 800afe4:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afe6:	0021      	movs	r1, r4
 800afe8:	2002      	movs	r0, #2
 800afea:	f005 fe17 	bl	8010c1c <HAL_FLASH_Program>
 800afee:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800aff0:	e7a9      	b.n	800af46 <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	d003      	beq.n	800b000 <PxMessagingTask+0x13b8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800aff8:	4b94      	ldr	r3, [pc, #592]	; (800b24c <PxMessagingTask+0x1604>)
 800affa:	2216      	movs	r2, #22
 800affc:	701a      	strb	r2, [r3, #0]
													break;
 800affe:	e7a2      	b.n	800af46 <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b000:	2238      	movs	r2, #56	; 0x38
 800b002:	436a      	muls	r2, r5
 800b004:	4b92      	ldr	r3, [pc, #584]	; (800b250 <PxMessagingTask+0x1608>)
 800b006:	189b      	adds	r3, r3, r2
 800b008:	19df      	adds	r7, r3, r7
 800b00a:	79fa      	ldrb	r2, [r7, #7]
 800b00c:	0212      	lsls	r2, r2, #8
 800b00e:	7a3b      	ldrb	r3, [r7, #8]
 800b010:	041b      	lsls	r3, r3, #16
 800b012:	18d2      	adds	r2, r2, r3
 800b014:	79bb      	ldrb	r3, [r7, #6]
 800b016:	18d2      	adds	r2, r2, r3
 800b018:	7a7b      	ldrb	r3, [r7, #9]
 800b01a:	061b      	lsls	r3, r3, #24
 800b01c:	18d2      	adds	r2, r2, r3
 800b01e:	2300      	movs	r3, #0
 800b020:	498e      	ldr	r1, [pc, #568]	; (800b25c <PxMessagingTask+0x1614>)
 800b022:	600a      	str	r2, [r1, #0]
 800b024:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b026:	0021      	movs	r1, r4
 800b028:	2003      	movs	r0, #3
 800b02a:	f005 fdf7 	bl	8010c1c <HAL_FLASH_Program>
 800b02e:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b030:	e789      	b.n	800af46 <PxMessagingTask+0x12fe>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b032:	4b86      	ldr	r3, [pc, #536]	; (800b24c <PxMessagingTask+0x1604>)
 800b034:	2215      	movs	r2, #21
 800b036:	701a      	strb	r2, [r3, #0]
 800b038:	e5f4      	b.n	800ac24 <PxMessagingTask+0xfdc>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b03a:	4b85      	ldr	r3, [pc, #532]	; (800b250 <PxMessagingTask+0x1608>)
 800b03c:	199b      	adds	r3, r3, r6
 800b03e:	5d1a      	ldrb	r2, [r3, r4]
 800b040:	4b82      	ldr	r3, [pc, #520]	; (800b24c <PxMessagingTask+0x1604>)
 800b042:	701a      	strb	r2, [r3, #0]
							break;
 800b044:	2700      	movs	r7, #0
 800b046:	f7fe fe2f 	bl	8009ca8 <PxMessagingTask+0x60>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b04a:	9a06      	ldr	r2, [sp, #24]
 800b04c:	3a01      	subs	r2, #1
 800b04e:	b292      	uxth	r2, r2
 800b050:	1c61      	adds	r1, r4, #1
 800b052:	4451      	add	r1, sl
 800b054:	4b7e      	ldr	r3, [pc, #504]	; (800b250 <PxMessagingTask+0x1608>)
 800b056:	18c9      	adds	r1, r1, r3
 800b058:	199b      	adds	r3, r3, r6
 800b05a:	5d18      	ldrb	r0, [r3, r4]
 800b05c:	230a      	movs	r3, #10
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	f002 fa78 	bl	800d554 <writePxMutex>
							break;
 800b064:	2700      	movs	r7, #0
 800b066:	f7fe fe1f 	bl	8009ca8 <PxMessagingTask+0x60>
							switch(cMessage[port - 1][0 + shift]){
 800b06a:	9406      	str	r4, [sp, #24]
 800b06c:	4b78      	ldr	r3, [pc, #480]	; (800b250 <PxMessagingTask+0x1608>)
 800b06e:	199b      	adds	r3, r3, r6
 800b070:	5d18      	ldrb	r0, [r3, r4]
 800b072:	282b      	cmp	r0, #43	; 0x2b
 800b074:	d900      	bls.n	800b078 <PxMessagingTask+0x1430>
 800b076:	e0a9      	b.n	800b1cc <PxMessagingTask+0x1584>
 800b078:	0083      	lsls	r3, r0, #2
 800b07a:	4a79      	ldr	r2, [pc, #484]	; (800b260 <PxMessagingTask+0x1618>)
 800b07c:	58d3      	ldr	r3, [r2, r3]
 800b07e:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b080:	2338      	movs	r3, #56	; 0x38
 800b082:	436b      	muls	r3, r5
 800b084:	4f72      	ldr	r7, [pc, #456]	; (800b250 <PxMessagingTask+0x1608>)
 800b086:	18ff      	adds	r7, r7, r3
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	469c      	mov	ip, r3
 800b08c:	4467      	add	r7, ip
 800b08e:	78bb      	ldrb	r3, [r7, #2]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	78fa      	ldrb	r2, [r7, #3]
 800b094:	0412      	lsls	r2, r2, #16
 800b096:	189b      	adds	r3, r3, r2
 800b098:	787a      	ldrb	r2, [r7, #1]
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	793a      	ldrb	r2, [r7, #4]
 800b09e:	0612      	lsls	r2, r2, #24
 800b0a0:	189b      	adds	r3, r3, r2
 800b0a2:	4a70      	ldr	r2, [pc, #448]	; (800b264 <PxMessagingTask+0x161c>)
 800b0a4:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0a6:	79bb      	ldrb	r3, [r7, #6]
 800b0a8:	021b      	lsls	r3, r3, #8
 800b0aa:	79f9      	ldrb	r1, [r7, #7]
 800b0ac:	0409      	lsls	r1, r1, #16
 800b0ae:	185b      	adds	r3, r3, r1
 800b0b0:	7979      	ldrb	r1, [r7, #5]
 800b0b2:	185b      	adds	r3, r3, r1
 800b0b4:	7a39      	ldrb	r1, [r7, #8]
 800b0b6:	0609      	lsls	r1, r1, #24
 800b0b8:	185b      	adds	r3, r3, r1
 800b0ba:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b0bc:	7abb      	ldrb	r3, [r7, #10]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	7af9      	ldrb	r1, [r7, #11]
 800b0c2:	0409      	lsls	r1, r1, #16
 800b0c4:	185b      	adds	r3, r3, r1
 800b0c6:	7a79      	ldrb	r1, [r7, #9]
 800b0c8:	185b      	adds	r3, r3, r1
 800b0ca:	7b39      	ldrb	r1, [r7, #12]
 800b0cc:	0609      	lsls	r1, r1, #24
 800b0ce:	185b      	adds	r3, r3, r1
 800b0d0:	6093      	str	r3, [r2, #8]
									break;
 800b0d2:	e07b      	b.n	800b1cc <PxMessagingTask+0x1584>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b0d4:	2338      	movs	r3, #56	; 0x38
 800b0d6:	436b      	muls	r3, r5
 800b0d8:	4f5d      	ldr	r7, [pc, #372]	; (800b250 <PxMessagingTask+0x1608>)
 800b0da:	18ff      	adds	r7, r7, r3
 800b0dc:	9b06      	ldr	r3, [sp, #24]
 800b0de:	469c      	mov	ip, r3
 800b0e0:	4467      	add	r7, ip
 800b0e2:	78bb      	ldrb	r3, [r7, #2]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	0412      	lsls	r2, r2, #16
 800b0ea:	189b      	adds	r3, r3, r2
 800b0ec:	787a      	ldrb	r2, [r7, #1]
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	793a      	ldrb	r2, [r7, #4]
 800b0f2:	0612      	lsls	r2, r2, #24
 800b0f4:	189b      	adds	r3, r3, r2
 800b0f6:	4a5b      	ldr	r2, [pc, #364]	; (800b264 <PxMessagingTask+0x161c>)
 800b0f8:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0fa:	79bb      	ldrb	r3, [r7, #6]
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	79f9      	ldrb	r1, [r7, #7]
 800b100:	0409      	lsls	r1, r1, #16
 800b102:	185b      	adds	r3, r3, r1
 800b104:	7979      	ldrb	r1, [r7, #5]
 800b106:	185b      	adds	r3, r3, r1
 800b108:	7a39      	ldrb	r1, [r7, #8]
 800b10a:	0609      	lsls	r1, r1, #24
 800b10c:	185b      	adds	r3, r3, r1
 800b10e:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b110:	7abb      	ldrb	r3, [r7, #10]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	7af9      	ldrb	r1, [r7, #11]
 800b116:	0409      	lsls	r1, r1, #16
 800b118:	185b      	adds	r3, r3, r1
 800b11a:	7a79      	ldrb	r1, [r7, #9]
 800b11c:	185b      	adds	r3, r3, r1
 800b11e:	7b39      	ldrb	r1, [r7, #12]
 800b120:	0609      	lsls	r1, r1, #24
 800b122:	185b      	adds	r3, r3, r1
 800b124:	6153      	str	r3, [r2, #20]
									break;
 800b126:	e051      	b.n	800b1cc <PxMessagingTask+0x1584>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b128:	2338      	movs	r3, #56	; 0x38
 800b12a:	436b      	muls	r3, r5
 800b12c:	4a48      	ldr	r2, [pc, #288]	; (800b250 <PxMessagingTask+0x1608>)
 800b12e:	18d2      	adds	r2, r2, r3
 800b130:	9b06      	ldr	r3, [sp, #24]
 800b132:	469c      	mov	ip, r3
 800b134:	4462      	add	r2, ip
 800b136:	7893      	ldrb	r3, [r2, #2]
 800b138:	021b      	lsls	r3, r3, #8
 800b13a:	78d1      	ldrb	r1, [r2, #3]
 800b13c:	0409      	lsls	r1, r1, #16
 800b13e:	185b      	adds	r3, r3, r1
 800b140:	7851      	ldrb	r1, [r2, #1]
 800b142:	185b      	adds	r3, r3, r1
 800b144:	7912      	ldrb	r2, [r2, #4]
 800b146:	0612      	lsls	r2, r2, #24
 800b148:	189b      	adds	r3, r3, r2
 800b14a:	4a46      	ldr	r2, [pc, #280]	; (800b264 <PxMessagingTask+0x161c>)
 800b14c:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b14e:	4b46      	ldr	r3, [pc, #280]	; (800b268 <PxMessagingTask+0x1620>)
 800b150:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b152:	2238      	movs	r2, #56	; 0x38
 800b154:	436a      	muls	r2, r5
 800b156:	4b3e      	ldr	r3, [pc, #248]	; (800b250 <PxMessagingTask+0x1608>)
 800b158:	189b      	adds	r3, r3, r2
 800b15a:	9a06      	ldr	r2, [sp, #24]
 800b15c:	4694      	mov	ip, r2
 800b15e:	4463      	add	r3, ip
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	4a42      	ldr	r2, [pc, #264]	; (800b26c <PxMessagingTask+0x1624>)
 800b164:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b166:	2b00      	cmp	r3, #0
 800b168:	d146      	bne.n	800b1f8 <PxMessagingTask+0x15b0>
										ADCSelectChannel(ADCPort,"top");
 800b16a:	4f41      	ldr	r7, [pc, #260]	; (800b270 <PxMessagingTask+0x1628>)
 800b16c:	0039      	movs	r1, r7
 800b16e:	f7fd fc9b 	bl	8008aa8 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b172:	4b3d      	ldr	r3, [pc, #244]	; (800b268 <PxMessagingTask+0x1620>)
 800b174:	7818      	ldrb	r0, [r3, #0]
 800b176:	4a3f      	ldr	r2, [pc, #252]	; (800b274 <PxMessagingTask+0x162c>)
 800b178:	0039      	movs	r1, r7
 800b17a:	f7fd fcc3 	bl	8008b04 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b17e:	493e      	ldr	r1, [pc, #248]	; (800b278 <PxMessagingTask+0x1630>)
 800b180:	483e      	ldr	r0, [pc, #248]	; (800b27c <PxMessagingTask+0x1634>)
 800b182:	f7fd fb09 	bl	8008798 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b186:	4f32      	ldr	r7, [pc, #200]	; (800b250 <PxMessagingTask+0x1608>)
 800b188:	19bf      	adds	r7, r7, r6
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	5cf8      	ldrb	r0, [r7, r3]
 800b18e:	4b36      	ldr	r3, [pc, #216]	; (800b268 <PxMessagingTask+0x1620>)
 800b190:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b192:	493b      	ldr	r1, [pc, #236]	; (800b280 <PxMessagingTask+0x1638>)
 800b194:	f7fd fbbe 	bl	8008914 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b198:	9b06      	ldr	r3, [sp, #24]
 800b19a:	469c      	mov	ip, r3
 800b19c:	4467      	add	r7, ip
 800b19e:	79bb      	ldrb	r3, [r7, #6]
 800b1a0:	021b      	lsls	r3, r3, #8
 800b1a2:	79fa      	ldrb	r2, [r7, #7]
 800b1a4:	0412      	lsls	r2, r2, #16
 800b1a6:	189b      	adds	r3, r3, r2
 800b1a8:	797a      	ldrb	r2, [r7, #5]
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	7a3a      	ldrb	r2, [r7, #8]
 800b1ae:	0612      	lsls	r2, r2, #24
 800b1b0:	189b      	adds	r3, r3, r2
 800b1b2:	4a2c      	ldr	r2, [pc, #176]	; (800b264 <PxMessagingTask+0x161c>)
 800b1b4:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b1b6:	7abb      	ldrb	r3, [r7, #10]
 800b1b8:	021b      	lsls	r3, r3, #8
 800b1ba:	7af9      	ldrb	r1, [r7, #11]
 800b1bc:	0409      	lsls	r1, r1, #16
 800b1be:	185b      	adds	r3, r3, r1
 800b1c0:	7a79      	ldrb	r1, [r7, #9]
 800b1c2:	185b      	adds	r3, r3, r1
 800b1c4:	7b39      	ldrb	r1, [r7, #12]
 800b1c6:	0609      	lsls	r1, r1, #24
 800b1c8:	185b      	adds	r3, r3, r1
 800b1ca:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b1cc:	9400      	str	r4, [sp, #0]
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	9a04      	ldr	r2, [sp, #16]
 800b1d2:	9908      	ldr	r1, [sp, #32]
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	f7fe fd35 	bl	8009c44 <User_MessagingParser>
 800b1da:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800b1dc:	2801      	cmp	r0, #1
 800b1de:	d001      	beq.n	800b1e4 <PxMessagingTask+0x159c>
 800b1e0:	f7fe fd62 	bl	8009ca8 <PxMessagingTask+0x60>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b1e4:	9400      	str	r4, [sp, #0]
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	9908      	ldr	r1, [sp, #32]
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	f000 fab3 	bl	800b758 <Module_MessagingTask>
 800b1f2:	0007      	movs	r7, r0
 800b1f4:	f7fe fd54 	bl	8009ca0 <PxMessagingTask+0x58>
									else if(1 == ADCSide){
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d1c0      	bne.n	800b17e <PxMessagingTask+0x1536>
										ADCSelectChannel(ADCPort,"bottom");
 800b1fc:	4f21      	ldr	r7, [pc, #132]	; (800b284 <PxMessagingTask+0x163c>)
 800b1fe:	0039      	movs	r1, r7
 800b200:	f7fd fc52 	bl	8008aa8 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b204:	4b18      	ldr	r3, [pc, #96]	; (800b268 <PxMessagingTask+0x1620>)
 800b206:	7818      	ldrb	r0, [r3, #0]
 800b208:	4a1a      	ldr	r2, [pc, #104]	; (800b274 <PxMessagingTask+0x162c>)
 800b20a:	0039      	movs	r1, r7
 800b20c:	f7fd fc7a 	bl	8008b04 <ReadADCChannel>
 800b210:	e7b5      	b.n	800b17e <PxMessagingTask+0x1536>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b212:	2700      	movs	r7, #0
 800b214:	f7fe fd44 	bl	8009ca0 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b218:	2700      	movs	r7, #0
 800b21a:	f7fe fd41 	bl	8009ca0 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b21e:	2700      	movs	r7, #0
 800b220:	f7fe fd3e 	bl	8009ca0 <PxMessagingTask+0x58>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b224:	2200      	movs	r2, #0
 800b226:	2100      	movs	r1, #0
 800b228:	9804      	ldr	r0, [sp, #16]
 800b22a:	f7fe fa49 	bl	80096c0 <SendMessageToModule>
			result =BOS_OK;
 800b22e:	2700      	movs	r7, #0
 800b230:	f7fe fd3a 	bl	8009ca8 <PxMessagingTask+0x60>
					switch(code){
 800b234:	2700      	movs	r7, #0
 800b236:	f7fe fd37 	bl	8009ca8 <PxMessagingTask+0x60>
 800b23a:	9205      	str	r2, [sp, #20]
 800b23c:	2700      	movs	r7, #0
 800b23e:	f7fe fd33 	bl	8009ca8 <PxMessagingTask+0x60>
 800b242:	2700      	movs	r7, #0
 800b244:	f7fe fd30 	bl	8009ca8 <PxMessagingTask+0x60>
 800b248:	0001ffff 	.word	0x0001ffff
 800b24c:	20001110 	.word	0x20001110
 800b250:	20000d08 	.word	0x20000d08
 800b254:	0801a668 	.word	0x0801a668
 800b258:	0000ffff 	.word	0x0000ffff
 800b25c:	20001108 	.word	0x20001108
 800b260:	0801a688 	.word	0x0801a688
 800b264:	200015cc 	.word	0x200015cc
 800b268:	200015bc 	.word	0x200015bc
 800b26c:	200015be 	.word	0x200015be
 800b270:	0801863c 	.word	0x0801863c
 800b274:	200015c0 	.word	0x200015c0
 800b278:	200015c8 	.word	0x200015c8
 800b27c:	200015c4 	.word	0x200015c4
 800b280:	200015b8 	.word	0x200015b8
 800b284:	08018640 	.word	0x08018640
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b288:	454b      	cmp	r3, r9
 800b28a:	d004      	beq.n	800b296 <PxMessagingTask+0x164e>
 800b28c:	4643      	mov	r3, r8
 800b28e:	2b10      	cmp	r3, #16
 800b290:	d001      	beq.n	800b296 <PxMessagingTask+0x164e>
 800b292:	f7fe fd5c 	bl	8009d4e <PxMessagingTask+0x106>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b296:	464b      	mov	r3, r9
 800b298:	2bff      	cmp	r3, #255	; 0xff
 800b29a:	d101      	bne.n	800b2a0 <PxMessagingTask+0x1658>
 800b29c:	f7fe fd79 	bl	8009d92 <PxMessagingTask+0x14a>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2a0:	2bfe      	cmp	r3, #254	; 0xfe
 800b2a2:	d001      	beq.n	800b2a8 <PxMessagingTask+0x1660>
 800b2a4:	f7fe fd7f 	bl	8009da6 <PxMessagingTask+0x15e>
 800b2a8:	4b29      	ldr	r3, [pc, #164]	; (800b350 <PxMessagingTask+0x1708>)
 800b2aa:	199b      	adds	r3, r3, r6
 800b2ac:	1859      	adds	r1, r3, r1
 800b2ae:	3901      	subs	r1, #1
 800b2b0:	780b      	ldrb	r3, [r1, #0]
 800b2b2:	4a28      	ldr	r2, [pc, #160]	; (800b354 <PxMessagingTask+0x170c>)
 800b2b4:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b2b6:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d101      	bne.n	800b2c0 <PxMessagingTask+0x1678>
 800b2bc:	f7fe fcf0 	bl	8009ca0 <PxMessagingTask+0x58>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b2c0:	4a24      	ldr	r2, [pc, #144]	; (800b354 <PxMessagingTask+0x170c>)
 800b2c2:	7013      	strb	r3, [r2, #0]
 800b2c4:	4a24      	ldr	r2, [pc, #144]	; (800b358 <PxMessagingTask+0x1710>)
 800b2c6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b2c8:	9908      	ldr	r1, [sp, #32]
 800b2ca:	20fe      	movs	r0, #254	; 0xfe
 800b2cc:	f7fe f9b0 	bl	8009630 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b2d0:	4b22      	ldr	r3, [pc, #136]	; (800b35c <PxMessagingTask+0x1714>)
 800b2d2:	5d59      	ldrb	r1, [r3, r5]
 800b2d4:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <PxMessagingTask+0x1708>)
 800b2d6:	199b      	adds	r3, r3, r6
 800b2d8:	185a      	adds	r2, r3, r1
 800b2da:	3a01      	subs	r2, #1
 800b2dc:	2000      	movs	r0, #0
 800b2de:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b2e0:	1e8a      	subs	r2, r1, #2
 800b2e2:	5c9c      	ldrb	r4, [r3, r2]
 800b2e4:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	d02e      	beq.n	800b348 <PxMessagingTask+0x1700>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b2ea:	1b13      	subs	r3, r2, r4
 800b2ec:	469c      	mov	ip, r3
 800b2ee:	4b1c      	ldr	r3, [pc, #112]	; (800b360 <PxMessagingTask+0x1718>)
 800b2f0:	7818      	ldrb	r0, [r3, #0]
 800b2f2:	4b17      	ldr	r3, [pc, #92]	; (800b350 <PxMessagingTask+0x1708>)
 800b2f4:	199b      	adds	r3, r3, r6
 800b2f6:	4662      	mov	r2, ip
 800b2f8:	5c9b      	ldrb	r3, [r3, r2]
 800b2fa:	4283      	cmp	r3, r0
 800b2fc:	d011      	beq.n	800b322 <PxMessagingTask+0x16da>
 800b2fe:	4653      	mov	r3, sl
 800b300:	3301      	adds	r3, #1
 800b302:	4463      	add	r3, ip
 800b304:	4a12      	ldr	r2, [pc, #72]	; (800b350 <PxMessagingTask+0x1708>)
 800b306:	189b      	adds	r3, r3, r2
 800b308:	3201      	adds	r2, #1
 800b30a:	4452      	add	r2, sl
 800b30c:	1e67      	subs	r7, r4, #1
 800b30e:	b2ff      	uxtb	r7, r7
 800b310:	19d2      	adds	r2, r2, r7
 800b312:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b314:	4293      	cmp	r3, r2
 800b316:	d017      	beq.n	800b348 <PxMessagingTask+0x1700>
 800b318:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b31a:	1e5c      	subs	r4, r3, #1
 800b31c:	7824      	ldrb	r4, [r4, #0]
 800b31e:	4284      	cmp	r4, r0
 800b320:	d1f8      	bne.n	800b314 <PxMessagingTask+0x16cc>
				shift +=4;
 800b322:	9c06      	ldr	r4, [sp, #24]
 800b324:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b326:	1b0a      	subs	r2, r1, r4
 800b328:	b2d3      	uxtb	r3, r2
 800b32a:	9306      	str	r3, [sp, #24]
 800b32c:	f7fe fd45 	bl	8009dba <PxMessagingTask+0x172>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b330:	2338      	movs	r3, #56	; 0x38
 800b332:	436b      	muls	r3, r5
 800b334:	4a06      	ldr	r2, [pc, #24]	; (800b350 <PxMessagingTask+0x1708>)
 800b336:	18d2      	adds	r2, r2, r3
 800b338:	5dd3      	ldrb	r3, [r2, r7]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	0098      	lsls	r0, r3, #2
 800b33e:	4909      	ldr	r1, [pc, #36]	; (800b364 <PxMessagingTask+0x171c>)
 800b340:	5841      	ldr	r1, [r0, r1]
 800b342:	4640      	mov	r0, r8
 800b344:	5c12      	ldrb	r2, [r2, r0]
 800b346:	e463      	b.n	800ac10 <PxMessagingTask+0xfc8>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b348:	2766      	movs	r7, #102	; 0x66
 800b34a:	f7fe fcad 	bl	8009ca8 <PxMessagingTask+0x60>
 800b34e:	46c0      	nop			; (mov r8, r8)
 800b350:	20000d08 	.word	0x20000d08
 800b354:	200015f2 	.word	0x200015f2
 800b358:	20000cb4 	.word	0x20000cb4
 800b35c:	20000f30 	.word	0x20000f30
 800b360:	20001076 	.word	0x20001076
 800b364:	20006950 	.word	0x20006950

0800b368 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800b368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36a:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b36c:	2401      	movs	r4, #1
 800b36e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b370:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b372:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b374:	2310      	movs	r3, #16
 800b376:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b378:	2702      	movs	r7, #2
 800b37a:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b37c:	2680      	movs	r6, #128	; 0x80
 800b37e:	0276      	lsls	r6, r6, #9
 800b380:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b382:	2380      	movs	r3, #128	; 0x80
 800b384:	035b      	lsls	r3, r3, #13
 800b386:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b388:	2500      	movs	r5, #0
 800b38a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b38c:	a80d      	add	r0, sp, #52	; 0x34
 800b38e:	f005 feb9 	bl	8011104 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b392:	2307      	movs	r3, #7
 800b394:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b396:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b398:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b39a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b39c:	2101      	movs	r1, #1
 800b39e:	a809      	add	r0, sp, #36	; 0x24
 800b3a0:	f006 f972 	bl	8011688 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b3a4:	4b1a      	ldr	r3, [pc, #104]	; (800b410 <SystemClock_Config+0xa8>)
 800b3a6:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b3a8:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b3aa:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b3ac:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3ae:	a802      	add	r0, sp, #8
 800b3b0:	f006 fb18 	bl	80119e4 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800b3b4:	4d17      	ldr	r5, [pc, #92]	; (800b414 <SystemClock_Config+0xac>)
 800b3b6:	69ea      	ldr	r2, [r5, #28]
 800b3b8:	2180      	movs	r1, #128	; 0x80
 800b3ba:	0549      	lsls	r1, r1, #21
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	61ea      	str	r2, [r5, #28]
 800b3c0:	69eb      	ldr	r3, [r5, #28]
 800b3c2:	400b      	ands	r3, r1
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b3c8:	f005 fe92 	bl	80110f0 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3cc:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b3ce:	23c0      	movs	r3, #192	; 0xc0
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3d4:	a802      	add	r0, sp, #8
 800b3d6:	f006 fb05 	bl	80119e4 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b3da:	f006 fadf 	bl	801199c <HAL_RCC_GetHCLKFreq>
 800b3de:	21fa      	movs	r1, #250	; 0xfa
 800b3e0:	0089      	lsls	r1, r1, #2
 800b3e2:	f7f4 feb5 	bl	8000150 <__udivsi3>
 800b3e6:	f004 fd81 	bl	800feec <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b3ea:	2004      	movs	r0, #4
 800b3ec:	f004 fd9a 	bl	800ff24 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800b3f0:	69ab      	ldr	r3, [r5, #24]
 800b3f2:	4323      	orrs	r3, r4
 800b3f4:	61ab      	str	r3, [r5, #24]
 800b3f6:	69ab      	ldr	r3, [r5, #24]
 800b3f8:	401c      	ands	r4, r3
 800b3fa:	9401      	str	r4, [sp, #4]
 800b3fc:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b3fe:	2001      	movs	r0, #1
 800b400:	2200      	movs	r2, #0
 800b402:	2100      	movs	r1, #0
 800b404:	4240      	negs	r0, r0
 800b406:	f004 fd29 	bl	800fe5c <HAL_NVIC_SetPriority>
	
}
 800b40a:	b01b      	add	sp, #108	; 0x6c
 800b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b40e:	46c0      	nop			; (mov r8, r8)
 800b410:	00040003 	.word	0x00040003
 800b414:	40021000 	.word	0x40021000

0800b418 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	46de      	mov	lr, fp
 800b41c:	4657      	mov	r7, sl
 800b41e:	464e      	mov	r6, r9
 800b420:	4645      	mov	r5, r8
 800b422:	b5e0      	push	{r5, r6, r7, lr}
 800b424:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b426:	2215      	movs	r2, #21
 800b428:	2100      	movs	r1, #0
 800b42a:	a802      	add	r0, sp, #8
 800b42c:	f007 ff36 	bl	801329c <memset>
	
	HAL_FLASH_Unlock();
 800b430:	f005 fbaa 	bl	8010b88 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800b434:	4872      	ldr	r0, [pc, #456]	; (800b600 <SaveToRO+0x1e8>)
 800b436:	f005 fc69 	bl	8010d0c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b43a:	4872      	ldr	r0, [pc, #456]	; (800b604 <SaveToRO+0x1ec>)
 800b43c:	f005 fbc0 	bl	8010bc0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b440:	2800      	cmp	r0, #0
 800b442:	d112      	bne.n	800b46a <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b444:	4a70      	ldr	r2, [pc, #448]	; (800b608 <SaveToRO+0x1f0>)
 800b446:	6913      	ldr	r3, [r2, #16]
 800b448:	2102      	movs	r1, #2
 800b44a:	438b      	bics	r3, r1
 800b44c:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800b44e:	4b6f      	ldr	r3, [pc, #444]	; (800b60c <SaveToRO+0x1f4>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d113      	bne.n	800b47e <SaveToRO+0x66>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b456:	4b6e      	ldr	r3, [pc, #440]	; (800b610 <SaveToRO+0x1f8>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d100      	bne.n	800b460 <SaveToRO+0x48>
 800b45e:	e0ca      	b.n	800b5f6 <SaveToRO+0x1de>
 800b460:	2500      	movs	r5, #0
 800b462:	4c6c      	ldr	r4, [pc, #432]	; (800b614 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType) 
 800b464:	4b6c      	ldr	r3, [pc, #432]	; (800b618 <SaveToRO+0x200>)
 800b466:	4698      	mov	r8, r3
 800b468:	e06e      	b.n	800b548 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800b46a:	4b6c      	ldr	r3, [pc, #432]	; (800b61c <SaveToRO+0x204>)
 800b46c:	69d8      	ldr	r0, [r3, #28]
 800b46e:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800b470:	b009      	add	sp, #36	; 0x24
 800b472:	bc3c      	pop	{r2, r3, r4, r5}
 800b474:	4690      	mov	r8, r2
 800b476:	4699      	mov	r9, r3
 800b478:	46a2      	mov	sl, r4
 800b47a:	46ab      	mov	fp, r5
 800b47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b47e:	4a68      	ldr	r2, [pc, #416]	; (800b620 <SaveToRO+0x208>)
 800b480:	7812      	ldrb	r2, [r2, #0]
 800b482:	0212      	lsls	r2, r2, #8
 800b484:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b486:	b292      	uxth	r2, r2
 800b488:	2300      	movs	r3, #0
 800b48a:	495d      	ldr	r1, [pc, #372]	; (800b600 <SaveToRO+0x1e8>)
 800b48c:	2001      	movs	r0, #1
 800b48e:	f005 fbc5 	bl	8010c1c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b492:	485c      	ldr	r0, [pc, #368]	; (800b604 <SaveToRO+0x1ec>)
 800b494:	f005 fb94 	bl	8010bc0 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b498:	2800      	cmp	r0, #0
 800b49a:	d111      	bne.n	800b4c0 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b49c:	4a5a      	ldr	r2, [pc, #360]	; (800b608 <SaveToRO+0x1f0>)
 800b49e:	6913      	ldr	r3, [r2, #16]
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	438b      	bics	r3, r1
 800b4a4:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b4a6:	4b5e      	ldr	r3, [pc, #376]	; (800b620 <SaveToRO+0x208>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b4ae:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0d0      	beq.n	800b456 <SaveToRO+0x3e>
 800b4b4:	2316      	movs	r3, #22
 800b4b6:	469b      	mov	fp, r3
 800b4b8:	4b5a      	ldr	r3, [pc, #360]	; (800b624 <SaveToRO+0x20c>)
 800b4ba:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b4bc:	4698      	mov	r8, r3
 800b4be:	e02a      	b.n	800b516 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800b4c0:	4b56      	ldr	r3, [pc, #344]	; (800b61c <SaveToRO+0x204>)
 800b4c2:	69d8      	ldr	r0, [r3, #28]
 800b4c4:	b2c0      	uxtb	r0, r0
 800b4c6:	e7d3      	b.n	800b470 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800b4c8:	4b54      	ldr	r3, [pc, #336]	; (800b61c <SaveToRO+0x204>)
 800b4ca:	69d8      	ldr	r0, [r3, #28]
 800b4cc:	b2c0      	uxtb	r0, r0
 800b4ce:	e7cf      	b.n	800b470 <SaveToRO+0x58>
 800b4d0:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b4d2:	42b4      	cmp	r4, r6
 800b4d4:	d017      	beq.n	800b506 <SaveToRO+0xee>
				if (array[i-1][0]) {
 800b4d6:	4643      	mov	r3, r8
 800b4d8:	5afb      	ldrh	r3, [r7, r3]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0f8      	beq.n	800b4d0 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b4de:	8822      	ldrh	r2, [r4, #0]
 800b4e0:	4b47      	ldr	r3, [pc, #284]	; (800b600 <SaveToRO+0x1e8>)
 800b4e2:	18e9      	adds	r1, r5, r3
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	f005 fb98 	bl	8010c1c <HAL_FLASH_Program>
					add += 2;
 800b4ec:	3502      	adds	r5, #2
 800b4ee:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4f0:	4844      	ldr	r0, [pc, #272]	; (800b604 <SaveToRO+0x1ec>)
 800b4f2:	f005 fb65 	bl	8010bc0 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d1e6      	bne.n	800b4c8 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4fa:	4a43      	ldr	r2, [pc, #268]	; (800b608 <SaveToRO+0x1f0>)
 800b4fc:	6913      	ldr	r3, [r2, #16]
 800b4fe:	2101      	movs	r1, #1
 800b500:	438b      	bics	r3, r1
 800b502:	6113      	str	r3, [r2, #16]
 800b504:	e7e4      	b.n	800b4d0 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b506:	464b      	mov	r3, r9
 800b508:	3301      	adds	r3, #1
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	4699      	mov	r9, r3
 800b50e:	4b44      	ldr	r3, [pc, #272]	; (800b620 <SaveToRO+0x208>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	454b      	cmp	r3, r9
 800b514:	d39f      	bcc.n	800b456 <SaveToRO+0x3e>
 800b516:	465e      	mov	r6, fp
 800b518:	464b      	mov	r3, r9
 800b51a:	435e      	muls	r6, r3
 800b51c:	0034      	movs	r4, r6
 800b51e:	3c16      	subs	r4, #22
 800b520:	4454      	add	r4, sl
 800b522:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b524:	1e5f      	subs	r7, r3, #1
 800b526:	465b      	mov	r3, fp
 800b528:	435f      	muls	r7, r3
 800b52a:	e7d4      	b.n	800b4d6 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800b52c:	4b3b      	ldr	r3, [pc, #236]	; (800b61c <SaveToRO+0x204>)
 800b52e:	69d8      	ldr	r0, [r3, #28]
 800b530:	b2c0      	uxtb	r0, r0
 800b532:	e79d      	b.n	800b470 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b534:	4b39      	ldr	r3, [pc, #228]	; (800b61c <SaveToRO+0x204>)
 800b536:	69d8      	ldr	r0, [r3, #28]
 800b538:	b2c0      	uxtb	r0, r0
 800b53a:	e799      	b.n	800b470 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b53c:	3501      	adds	r5, #1
 800b53e:	b2ed      	uxtb	r5, r5
 800b540:	4b33      	ldr	r3, [pc, #204]	; (800b610 <SaveToRO+0x1f8>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	42ab      	cmp	r3, r5
 800b546:	d956      	bls.n	800b5f6 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800b548:	9501      	str	r5, [sp, #4]
 800b54a:	00ab      	lsls	r3, r5, #2
 800b54c:	195b      	adds	r3, r3, r5
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4642      	mov	r2, r8
 800b552:	5c9b      	ldrb	r3, [r3, r2]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0f1      	beq.n	800b53c <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b558:	23fe      	movs	r3, #254	; 0xfe
 800b55a:	aa02      	add	r2, sp, #8
 800b55c:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b55e:	00a9      	lsls	r1, r5, #2
 800b560:	1949      	adds	r1, r1, r5
 800b562:	0089      	lsls	r1, r1, #2
 800b564:	4b2c      	ldr	r3, [pc, #176]	; (800b618 <SaveToRO+0x200>)
 800b566:	469c      	mov	ip, r3
 800b568:	4461      	add	r1, ip
 800b56a:	2214      	movs	r2, #20
 800b56c:	ab02      	add	r3, sp, #8
 800b56e:	1c58      	adds	r0, r3, #1
 800b570:	f007 fe8b 	bl	801328a <memcpy>
 800b574:	2314      	movs	r3, #20
 800b576:	469b      	mov	fp, r3
 800b578:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b57a:	ae02      	add	r6, sp, #8
 800b57c:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b57e:	4f22      	ldr	r7, [pc, #136]	; (800b608 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b580:	5b32      	ldrh	r2, [r6, r4]
 800b582:	2300      	movs	r3, #0
 800b584:	0021      	movs	r1, r4
 800b586:	2001      	movs	r0, #1
 800b588:	f005 fb48 	bl	8010c1c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b58c:	481d      	ldr	r0, [pc, #116]	; (800b604 <SaveToRO+0x1ec>)
 800b58e:	f005 fb17 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b592:	2800      	cmp	r0, #0
 800b594:	d1ca      	bne.n	800b52c <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2201      	movs	r2, #1
 800b59a:	4393      	bics	r3, r2
 800b59c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b59e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b5a0:	455c      	cmp	r4, fp
 800b5a2:	d1ed      	bne.n	800b580 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5a4:	2700      	movs	r7, #0
 800b5a6:	9a01      	ldr	r2, [sp, #4]
 800b5a8:	0093      	lsls	r3, r2, #2
 800b5aa:	189e      	adds	r6, r3, r2
 800b5ac:	00b6      	lsls	r6, r6, #2
 800b5ae:	4b1a      	ldr	r3, [pc, #104]	; (800b618 <SaveToRO+0x200>)
 800b5b0:	469a      	mov	sl, r3
 800b5b2:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5b4:	4b14      	ldr	r3, [pc, #80]	; (800b608 <SaveToRO+0x1f0>)
 800b5b6:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5b8:	4653      	mov	r3, sl
 800b5ba:	68de      	ldr	r6, [r3, #12]
 800b5bc:	0030      	movs	r0, r6
 800b5be:	f7f4 fdab 	bl	8000118 <strlen>
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	0840      	lsrs	r0, r0, #1
 800b5c6:	4287      	cmp	r7, r0
 800b5c8:	d2b8      	bcs.n	800b53c <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b5ca:	007b      	lsls	r3, r7, #1
 800b5cc:	5af2      	ldrh	r2, [r6, r3]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	0021      	movs	r1, r4
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	f005 fb22 	bl	8010c1c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5d8:	480a      	ldr	r0, [pc, #40]	; (800b604 <SaveToRO+0x1ec>)
 800b5da:	f005 faf1 	bl	8010bc0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d1a8      	bne.n	800b534 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5e2:	465b      	mov	r3, fp
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4393      	bics	r3, r2
 800b5ea:	465a      	mov	r2, fp
 800b5ec:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b5ee:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5f0:	3701      	adds	r7, #1
 800b5f2:	b2ff      	uxtb	r7, r7
 800b5f4:	e7e0      	b.n	800b5b8 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b5f6:	f005 fad9 	bl	8010bac <HAL_FLASH_Lock>
	return result;
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e738      	b.n	800b470 <SaveToRO+0x58>
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	0801d800 	.word	0x0801d800
 800b604:	0000c350 	.word	0x0000c350
 800b608:	40022000 	.word	0x40022000
 800b60c:	20001076 	.word	0x20001076
 800b610:	2000121f 	.word	0x2000121f
 800b614:	0801dc00 	.word	0x0801dc00
 800b618:	200069e4 	.word	0x200069e4
 800b61c:	20006f10 	.word	0x20006f10
 800b620:	2000001c 	.word	0x2000001c
 800b624:	20000a78 	.word	0x20000a78

0800b628 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800b628:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800b62a:	228f      	movs	r2, #143	; 0x8f
 800b62c:	0092      	lsls	r2, r2, #2
 800b62e:	2100      	movs	r1, #0
 800b630:	4805      	ldr	r0, [pc, #20]	; (800b648 <ClearROtopology+0x20>)
 800b632:	f007 fe33 	bl	801329c <memset>
	N = 1; myID = 0;
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <ClearROtopology+0x24>)
 800b638:	2201      	movs	r2, #1
 800b63a:	701a      	strb	r2, [r3, #0]
 800b63c:	4b04      	ldr	r3, [pc, #16]	; (800b650 <ClearROtopology+0x28>)
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800b642:	f7ff fee9 	bl	800b418 <SaveToRO>
}
 800b646:	bd10      	pop	{r4, pc}
 800b648:	20000a78 	.word	0x20000a78
 800b64c:	2000001c 	.word	0x2000001c
 800b650:	20001076 	.word	0x20001076

0800b654 <Module_Peripheral_Init>:

/* --- H1DR1 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800b654:	b510      	push	{r4, lr}
	/* Array ports */
	MX_USART1_UART_Init();
 800b656:	f001 fda1 	bl	800d19c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b65a:	f001 fda9 	bl	800d1b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b65e:	f001 fdbf 	bl	800d1e0 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800b662:	f001 fdd5 	bl	800d210 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b666:	f001 fdeb 	bl	800d240 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b66a:	f001 fe01 	bl	800d270 <MX_USART6_UART_Init>
	
	/* RS485 port */
	RS485_DE_RE_Init();
 800b66e:	f001 f981 	bl	800c974 <RS485_DE_RE_Init>
	RS485_RECEIVER_EN();
 800b672:	2180      	movs	r1, #128	; 0x80
 800b674:	2090      	movs	r0, #144	; 0x90
 800b676:	2200      	movs	r2, #0
 800b678:	0149      	lsls	r1, r1, #5
 800b67a:	05c0      	lsls	r0, r0, #23
 800b67c:	f005 fd2c 	bl	80110d8 <HAL_GPIO_WritePin>

}
 800b680:	bd10      	pop	{r4, pc}

0800b682 <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800b682:	4770      	bx	lr

0800b684 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800b684:	6800      	ldr	r0, [r0, #0]
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <GetPort+0x48>)
 800b688:	4298      	cmp	r0, r3
 800b68a:	d014      	beq.n	800b6b6 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <GetPort+0x4c>)
 800b68e:	4298      	cmp	r0, r3
 800b690:	d013      	beq.n	800b6ba <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800b692:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <GetPort+0x50>)
 800b694:	4298      	cmp	r0, r3
 800b696:	d012      	beq.n	800b6be <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART3)
 800b698:	4b0f      	ldr	r3, [pc, #60]	; (800b6d8 <GetPort+0x54>)
 800b69a:	4298      	cmp	r0, r3
 800b69c:	d011      	beq.n	800b6c2 <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART5)
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <GetPort+0x58>)
 800b6a0:	4298      	cmp	r0, r3
 800b6a2:	d010      	beq.n	800b6c6 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART1)
			return P6;
		
	return 0;
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <GetPort+0x5c>)
 800b6a6:	469c      	mov	ip, r3
 800b6a8:	4460      	add	r0, ip
 800b6aa:	4243      	negs	r3, r0
 800b6ac:	4158      	adcs	r0, r3
 800b6ae:	4240      	negs	r0, r0
 800b6b0:	2306      	movs	r3, #6
 800b6b2:	4018      	ands	r0, r3
}
 800b6b4:	4770      	bx	lr
			return P1;
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	e7fc      	b.n	800b6b4 <GetPort+0x30>
			return P2;
 800b6ba:	2002      	movs	r0, #2
 800b6bc:	e7fa      	b.n	800b6b4 <GetPort+0x30>
			return P3;
 800b6be:	2003      	movs	r0, #3
 800b6c0:	e7f8      	b.n	800b6b4 <GetPort+0x30>
			return P4;
 800b6c2:	2004      	movs	r0, #4
 800b6c4:	e7f6      	b.n	800b6b4 <GetPort+0x30>
			return P5;
 800b6c6:	2005      	movs	r0, #5
 800b6c8:	e7f4      	b.n	800b6b4 <GetPort+0x30>
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	40004c00 	.word	0x40004c00
 800b6d0:	40004400 	.word	0x40004400
 800b6d4:	40011400 	.word	0x40011400
 800b6d8:	40004800 	.word	0x40004800
 800b6dc:	40005000 	.word	0x40005000
 800b6e0:	bffec800 	.word	0xbffec800

0800b6e4 <SetupBridgeMode>:
*/

/* --- setup RS485 port as bridge
*/
Module_Status SetupBridgeMode(uint8_t Source_p, uint32_t baud_rate)
{
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	0006      	movs	r6, r0
 800b6e8:	000d      	movs	r5, r1

	// Set module mode
	H1DR1_Mode=BRIDGE;
 800b6ea:	4b17      	ldr	r3, [pc, #92]	; (800b748 <SetupBridgeMode+0x64>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]
	Src_port=Source_p;
 800b6f0:	4b16      	ldr	r3, [pc, #88]	; (800b74c <SetupBridgeMode+0x68>)
 800b6f2:	7018      	strb	r0, [r3, #0]
	if(baud_rate<=19200 && baud_rate>=2400)
 800b6f4:	4b16      	ldr	r3, [pc, #88]	; (800b750 <SetupBridgeMode+0x6c>)
 800b6f6:	18ca      	adds	r2, r1, r3
 800b6f8:	4b16      	ldr	r3, [pc, #88]	; (800b754 <SetupBridgeMode+0x70>)
			}
			else return H1DR1_ERROR;
		}
		else return H1DR1_ERROR;	
	}
	else return H1DR1_ERROR;	
 800b6fa:	24ff      	movs	r4, #255	; 0xff
	if(baud_rate<=19200 && baud_rate>=2400)
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d81c      	bhi.n	800b73a <SetupBridgeMode+0x56>
		if ( MB_PORT_Init(baud_rate, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1) == H1DR1_OK )
 800b700:	2300      	movs	r3, #0
 800b702:	2200      	movs	r2, #0
 800b704:	2100      	movs	r1, #0
 800b706:	0028      	movs	r0, r5
 800b708:	f001 fd2c 	bl	800d164 <MB_PORT_Init>
 800b70c:	1e04      	subs	r4, r0, #0
 800b70e:	d113      	bne.n	800b738 <SetupBridgeMode+0x54>
			if ( UpdateBaudrate(Source_p, baud_rate) == BOS_OK )
 800b710:	0029      	movs	r1, r5
 800b712:	0030      	movs	r0, r6
 800b714:	f001 ff8c 	bl	800d630 <UpdateBaudrate>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d110      	bne.n	800b73e <SetupBridgeMode+0x5a>
				if ( Bridge(Source_p, P_RS485) == BOS_OK )
 800b71c:	2106      	movs	r1, #6
 800b71e:	0030      	movs	r0, r6
 800b720:	f7f8 ffd2 	bl	80046c8 <Bridge>
 800b724:	2800      	cmp	r0, #0
 800b726:	d10c      	bne.n	800b742 <SetupBridgeMode+0x5e>
					RS485_RECEIVER_EN();
 800b728:	2180      	movs	r1, #128	; 0x80
 800b72a:	3090      	adds	r0, #144	; 0x90
 800b72c:	2200      	movs	r2, #0
 800b72e:	0149      	lsls	r1, r1, #5
 800b730:	05c0      	lsls	r0, r0, #23
 800b732:	f005 fcd1 	bl	80110d8 <HAL_GPIO_WritePin>
					return H1DR1_OK;
 800b736:	e000      	b.n	800b73a <SetupBridgeMode+0x56>
		else return H1DR1_ERROR;	
 800b738:	24ff      	movs	r4, #255	; 0xff
}
 800b73a:	0020      	movs	r0, r4
 800b73c:	bd70      	pop	{r4, r5, r6, pc}
			else return H1DR1_ERROR;
 800b73e:	24ff      	movs	r4, #255	; 0xff
 800b740:	e7fb      	b.n	800b73a <SetupBridgeMode+0x56>
				else return H1DR1_ERROR;
 800b742:	24ff      	movs	r4, #255	; 0xff
 800b744:	e7f9      	b.n	800b73a <SetupBridgeMode+0x56>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	20006d2c 	.word	0x20006d2c
 800b74c:	20006c40 	.word	0x20006c40
 800b750:	fffff6a0 	.word	0xfffff6a0
 800b754:	000041a0 	.word	0x000041a0

0800b758 <Module_MessagingTask>:
{
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	ab06      	add	r3, sp, #24
 800b75c:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800b75e:	4b15      	ldr	r3, [pc, #84]	; (800b7b4 <Module_MessagingTask+0x5c>)
 800b760:	4298      	cmp	r0, r3
 800b762:	d108      	bne.n	800b776 <Module_MessagingTask+0x1e>
			switch(cMessage[port-1][shift])
 800b764:	3901      	subs	r1, #1
 800b766:	00cb      	lsls	r3, r1, #3
 800b768:	1a5b      	subs	r3, r3, r1
 800b76a:	00db      	lsls	r3, r3, #3
 800b76c:	4a12      	ldr	r2, [pc, #72]	; (800b7b8 <Module_MessagingTask+0x60>)
 800b76e:	18d3      	adds	r3, r2, r3
 800b770:	5d1b      	ldrb	r3, [r3, r4]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d001      	beq.n	800b77a <Module_MessagingTask+0x22>
}
 800b776:	2001      	movs	r0, #1
 800b778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					Src_port = cMessage[port-1][1+shift];
 800b77a:	0015      	movs	r5, r2
 800b77c:	00ce      	lsls	r6, r1, #3
 800b77e:	1a72      	subs	r2, r6, r1
 800b780:	00d2      	lsls	r2, r2, #3
 800b782:	18aa      	adds	r2, r5, r2
 800b784:	1912      	adds	r2, r2, r4
 800b786:	7850      	ldrb	r0, [r2, #1]
 800b788:	4b0c      	ldr	r3, [pc, #48]	; (800b7bc <Module_MessagingTask+0x64>)
 800b78a:	7018      	strb	r0, [r3, #0]
					Br_baud_rate = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800b78c:	7893      	ldrb	r3, [r2, #2]
 800b78e:	061b      	lsls	r3, r3, #24
 800b790:	78d7      	ldrb	r7, [r2, #3]
 800b792:	043f      	lsls	r7, r7, #16
 800b794:	19db      	adds	r3, r3, r7
 800b796:	7952      	ldrb	r2, [r2, #5]
 800b798:	189b      	adds	r3, r3, r2
 800b79a:	1a71      	subs	r1, r6, r1
 800b79c:	00c9      	lsls	r1, r1, #3
 800b79e:	186d      	adds	r5, r5, r1
 800b7a0:	192c      	adds	r4, r5, r4
 800b7a2:	7921      	ldrb	r1, [r4, #4]
 800b7a4:	0209      	lsls	r1, r1, #8
 800b7a6:	1859      	adds	r1, r3, r1
 800b7a8:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <Module_MessagingTask+0x68>)
 800b7aa:	6019      	str	r1, [r3, #0]
					SetupBridgeMode(Src_port,Br_baud_rate);
 800b7ac:	f7ff ff9a 	bl	800b6e4 <SetupBridgeMode>
					break;
 800b7b0:	e7e1      	b.n	800b776 <Module_MessagingTask+0x1e>
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	00000b54 	.word	0x00000b54
 800b7b8:	20000d08 	.word	0x20000d08
 800b7bc:	20006c40 	.word	0x20006c40
 800b7c0:	20006ae8 	.word	0x20006ae8

0800b7c4 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b7c4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b7c6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7cc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7ce:	2280      	movs	r2, #128	; 0x80
 800b7d0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7d2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7d4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7d6:	3320      	adds	r3, #32
 800b7d8:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7da:	2380      	movs	r3, #128	; 0x80
 800b7dc:	019b      	lsls	r3, r3, #6
 800b7de:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b7e0:	f004 fcda 	bl	8010198 <HAL_DMA_Init>
}
 800b7e4:	bd10      	pop	{r4, pc}

0800b7e6 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b7e6:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b7e8:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7f2:	2280      	movs	r2, #128	; 0x80
 800b7f4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7f6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7f8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b7fa:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7fc:	2380      	movs	r3, #128	; 0x80
 800b7fe:	019b      	lsls	r3, r3, #6
 800b800:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b802:	f004 fcc9 	bl	8010198 <HAL_DMA_Init>
}
 800b806:	bd10      	pop	{r4, pc}

0800b808 <DMA_Init>:
{
 800b808:	b510      	push	{r4, lr}
 800b80a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800b80c:	4b20      	ldr	r3, [pc, #128]	; (800b890 <DMA_Init+0x88>)
 800b80e:	6959      	ldr	r1, [r3, #20]
 800b810:	2201      	movs	r2, #1
 800b812:	4311      	orrs	r1, r2
 800b814:	6159      	str	r1, [r3, #20]
 800b816:	6959      	ldr	r1, [r3, #20]
 800b818:	400a      	ands	r2, r1
 800b81a:	9200      	str	r2, [sp, #0]
 800b81c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b81e:	6959      	ldr	r1, [r3, #20]
 800b820:	2202      	movs	r2, #2
 800b822:	4311      	orrs	r1, r2
 800b824:	6159      	str	r1, [r3, #20]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	401a      	ands	r2, r3
 800b82a:	9201      	str	r2, [sp, #4]
 800b82c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800b82e:	4c19      	ldr	r4, [pc, #100]	; (800b894 <DMA_Init+0x8c>)
 800b830:	4919      	ldr	r1, [pc, #100]	; (800b898 <DMA_Init+0x90>)
 800b832:	0020      	movs	r0, r4
 800b834:	f7ff ffc6 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800b838:	0020      	movs	r0, r4
 800b83a:	3038      	adds	r0, #56	; 0x38
 800b83c:	4917      	ldr	r1, [pc, #92]	; (800b89c <DMA_Init+0x94>)
 800b83e:	f7ff ffc1 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800b842:	0020      	movs	r0, r4
 800b844:	3070      	adds	r0, #112	; 0x70
 800b846:	4916      	ldr	r1, [pc, #88]	; (800b8a0 <DMA_Init+0x98>)
 800b848:	f7ff ffbc 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800b84c:	0020      	movs	r0, r4
 800b84e:	30a8      	adds	r0, #168	; 0xa8
 800b850:	4914      	ldr	r1, [pc, #80]	; (800b8a4 <DMA_Init+0x9c>)
 800b852:	f7ff ffb7 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800b856:	0020      	movs	r0, r4
 800b858:	30e0      	adds	r0, #224	; 0xe0
 800b85a:	4913      	ldr	r1, [pc, #76]	; (800b8a8 <DMA_Init+0xa0>)
 800b85c:	f7ff ffb2 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800b860:	0020      	movs	r0, r4
 800b862:	3019      	adds	r0, #25
 800b864:	30ff      	adds	r0, #255	; 0xff
 800b866:	4911      	ldr	r1, [pc, #68]	; (800b8ac <DMA_Init+0xa4>)
 800b868:	f7ff ffac 	bl	800b7c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b86c:	4c10      	ldr	r4, [pc, #64]	; (800b8b0 <DMA_Init+0xa8>)
 800b86e:	4911      	ldr	r1, [pc, #68]	; (800b8b4 <DMA_Init+0xac>)
 800b870:	0020      	movs	r0, r4
 800b872:	f7ff ffb8 	bl	800b7e6 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b876:	0020      	movs	r0, r4
 800b878:	3038      	adds	r0, #56	; 0x38
 800b87a:	490f      	ldr	r1, [pc, #60]	; (800b8b8 <DMA_Init+0xb0>)
 800b87c:	f7ff ffb3 	bl	800b7e6 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b880:	0020      	movs	r0, r4
 800b882:	3070      	adds	r0, #112	; 0x70
 800b884:	490d      	ldr	r1, [pc, #52]	; (800b8bc <DMA_Init+0xb4>)
 800b886:	f7ff ffae 	bl	800b7e6 <DMA_MSG_TX_CH_Init>
}
 800b88a:	b002      	add	sp, #8
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	40021000 	.word	0x40021000
 800b894:	200017a0 	.word	0x200017a0
 800b898:	40020008 	.word	0x40020008
 800b89c:	40020030 	.word	0x40020030
 800b8a0:	40020058 	.word	0x40020058
 800b8a4:	4002006c 	.word	0x4002006c
 800b8a8:	4002041c 	.word	0x4002041c
 800b8ac:	40020430 	.word	0x40020430
 800b8b0:	200018f0 	.word	0x200018f0
 800b8b4:	4002001c 	.word	0x4002001c
 800b8b8:	40020044 	.word	0x40020044
 800b8bc:	40020080 	.word	0x40020080

0800b8c0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b8c0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b8c2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8c8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b8ca:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8cc:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8ce:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8d0:	3320      	adds	r3, #32
 800b8d2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b8d4:	2380      	movs	r3, #128	; 0x80
 800b8d6:	015b      	lsls	r3, r3, #5
 800b8d8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b8da:	f004 fc5d 	bl	8010198 <HAL_DMA_Init>
}
 800b8de:	bd10      	pop	{r4, pc}

0800b8e0 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b8e0:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b8e2:	6803      	ldr	r3, [r0, #0]
 800b8e4:	4a20      	ldr	r2, [pc, #128]	; (800b968 <SetupDMAInterrupts+0x88>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d020      	beq.n	800b92c <SetupDMAInterrupts+0x4c>
 800b8ea:	d827      	bhi.n	800b93c <SetupDMAInterrupts+0x5c>
 800b8ec:	4a1f      	ldr	r2, [pc, #124]	; (800b96c <SetupDMAInterrupts+0x8c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00e      	beq.n	800b910 <SetupDMAInterrupts+0x30>
 800b8f2:	d815      	bhi.n	800b920 <SetupDMAInterrupts+0x40>
 800b8f4:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <SetupDMAInterrupts+0x90>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d107      	bne.n	800b90a <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2009      	movs	r0, #9
 800b8fe:	f004 faad 	bl	800fe5c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b902:	2009      	movs	r0, #9
 800b904:	f004 fade 	bl	800fec4 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b908:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b90a:	4a1a      	ldr	r2, [pc, #104]	; (800b974 <SetupDMAInterrupts+0x94>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d1fb      	bne.n	800b908 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b910:	2200      	movs	r2, #0
 800b912:	200a      	movs	r0, #10
 800b914:	f004 faa2 	bl	800fe5c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b918:	200a      	movs	r0, #10
 800b91a:	f004 fad3 	bl	800fec4 <HAL_NVIC_EnableIRQ>
			break;
 800b91e:	e7f3      	b.n	800b908 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b920:	4a15      	ldr	r2, [pc, #84]	; (800b978 <SetupDMAInterrupts+0x98>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d002      	beq.n	800b92c <SetupDMAInterrupts+0x4c>
 800b926:	4a15      	ldr	r2, [pc, #84]	; (800b97c <SetupDMAInterrupts+0x9c>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d1ed      	bne.n	800b908 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b92c:	2200      	movs	r2, #0
 800b92e:	200b      	movs	r0, #11
 800b930:	f004 fa94 	bl	800fe5c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b934:	200b      	movs	r0, #11
 800b936:	f004 fac5 	bl	800fec4 <HAL_NVIC_EnableIRQ>
}
 800b93a:	e7e5      	b.n	800b908 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b93c:	4a10      	ldr	r2, [pc, #64]	; (800b980 <SetupDMAInterrupts+0xa0>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d0e6      	beq.n	800b910 <SetupDMAInterrupts+0x30>
 800b942:	d909      	bls.n	800b958 <SetupDMAInterrupts+0x78>
 800b944:	4a0f      	ldr	r2, [pc, #60]	; (800b984 <SetupDMAInterrupts+0xa4>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d0f0      	beq.n	800b92c <SetupDMAInterrupts+0x4c>
 800b94a:	4a0f      	ldr	r2, [pc, #60]	; (800b988 <SetupDMAInterrupts+0xa8>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d0ed      	beq.n	800b92c <SetupDMAInterrupts+0x4c>
 800b950:	4a0e      	ldr	r2, [pc, #56]	; (800b98c <SetupDMAInterrupts+0xac>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d1d8      	bne.n	800b908 <SetupDMAInterrupts+0x28>
 800b956:	e7e9      	b.n	800b92c <SetupDMAInterrupts+0x4c>
 800b958:	4a0d      	ldr	r2, [pc, #52]	; (800b990 <SetupDMAInterrupts+0xb0>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d0e6      	beq.n	800b92c <SetupDMAInterrupts+0x4c>
 800b95e:	4a0d      	ldr	r2, [pc, #52]	; (800b994 <SetupDMAInterrupts+0xb4>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d0d5      	beq.n	800b910 <SetupDMAInterrupts+0x30>
 800b964:	e7d0      	b.n	800b908 <SetupDMAInterrupts+0x28>
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	4002006c 	.word	0x4002006c
 800b96c:	40020030 	.word	0x40020030
 800b970:	40020008 	.word	0x40020008
 800b974:	4002001c 	.word	0x4002001c
 800b978:	40020044 	.word	0x40020044
 800b97c:	40020058 	.word	0x40020058
 800b980:	4002041c 	.word	0x4002041c
 800b984:	40020444 	.word	0x40020444
 800b988:	40020458 	.word	0x40020458
 800b98c:	40020430 	.word	0x40020430
 800b990:	40020080 	.word	0x40020080
 800b994:	40020408 	.word	0x40020408

0800b998 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b998:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b99a:	6803      	ldr	r3, [r0, #0]
 800b99c:	4a1a      	ldr	r2, [pc, #104]	; (800ba08 <UnSetupDMAInterrupts+0x70>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d018      	beq.n	800b9d4 <UnSetupDMAInterrupts+0x3c>
 800b9a2:	d81b      	bhi.n	800b9dc <UnSetupDMAInterrupts+0x44>
 800b9a4:	4a19      	ldr	r2, [pc, #100]	; (800ba0c <UnSetupDMAInterrupts+0x74>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00a      	beq.n	800b9c0 <UnSetupDMAInterrupts+0x28>
 800b9aa:	d80d      	bhi.n	800b9c8 <UnSetupDMAInterrupts+0x30>
 800b9ac:	4a18      	ldr	r2, [pc, #96]	; (800ba10 <UnSetupDMAInterrupts+0x78>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d103      	bne.n	800b9ba <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b9b2:	2009      	movs	r0, #9
 800b9b4:	f004 fa90 	bl	800fed8 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b9b8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b9ba:	4a16      	ldr	r2, [pc, #88]	; (800ba14 <UnSetupDMAInterrupts+0x7c>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d1fb      	bne.n	800b9b8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b9c0:	200a      	movs	r0, #10
 800b9c2:	f004 fa89 	bl	800fed8 <HAL_NVIC_DisableIRQ>
			break;
 800b9c6:	e7f7      	b.n	800b9b8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b9c8:	4a13      	ldr	r2, [pc, #76]	; (800ba18 <UnSetupDMAInterrupts+0x80>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d002      	beq.n	800b9d4 <UnSetupDMAInterrupts+0x3c>
 800b9ce:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <UnSetupDMAInterrupts+0x84>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d1f1      	bne.n	800b9b8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b9d4:	200b      	movs	r0, #11
 800b9d6:	f004 fa7f 	bl	800fed8 <HAL_NVIC_DisableIRQ>
}
 800b9da:	e7ed      	b.n	800b9b8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b9dc:	4a10      	ldr	r2, [pc, #64]	; (800ba20 <UnSetupDMAInterrupts+0x88>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d0ee      	beq.n	800b9c0 <UnSetupDMAInterrupts+0x28>
 800b9e2:	d909      	bls.n	800b9f8 <UnSetupDMAInterrupts+0x60>
 800b9e4:	4a0f      	ldr	r2, [pc, #60]	; (800ba24 <UnSetupDMAInterrupts+0x8c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d0f4      	beq.n	800b9d4 <UnSetupDMAInterrupts+0x3c>
 800b9ea:	4a0f      	ldr	r2, [pc, #60]	; (800ba28 <UnSetupDMAInterrupts+0x90>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d0f1      	beq.n	800b9d4 <UnSetupDMAInterrupts+0x3c>
 800b9f0:	4a0e      	ldr	r2, [pc, #56]	; (800ba2c <UnSetupDMAInterrupts+0x94>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d1e0      	bne.n	800b9b8 <UnSetupDMAInterrupts+0x20>
 800b9f6:	e7ed      	b.n	800b9d4 <UnSetupDMAInterrupts+0x3c>
 800b9f8:	4a0d      	ldr	r2, [pc, #52]	; (800ba30 <UnSetupDMAInterrupts+0x98>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d0ea      	beq.n	800b9d4 <UnSetupDMAInterrupts+0x3c>
 800b9fe:	4a0d      	ldr	r2, [pc, #52]	; (800ba34 <UnSetupDMAInterrupts+0x9c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d0dd      	beq.n	800b9c0 <UnSetupDMAInterrupts+0x28>
 800ba04:	e7d8      	b.n	800b9b8 <UnSetupDMAInterrupts+0x20>
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	4002006c 	.word	0x4002006c
 800ba0c:	40020030 	.word	0x40020030
 800ba10:	40020008 	.word	0x40020008
 800ba14:	4002001c 	.word	0x4002001c
 800ba18:	40020044 	.word	0x40020044
 800ba1c:	40020058 	.word	0x40020058
 800ba20:	4002041c 	.word	0x4002041c
 800ba24:	40020444 	.word	0x40020444
 800ba28:	40020458 	.word	0x40020458
 800ba2c:	40020430 	.word	0x40020430
 800ba30:	40020080 	.word	0x40020080
 800ba34:	40020408 	.word	0x40020408

0800ba38 <DMA_MSG_TX_UnSetup>:
{	
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ba3c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ba3e:	f7ff ffab 	bl	800b998 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ba42:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ba44:	2300      	movs	r3, #0
 800ba46:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ba48:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ba4a:	bd10      	pop	{r4, pc}

0800ba4c <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ba4c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ba4e:	6803      	ldr	r3, [r0, #0]
 800ba50:	4abd      	ldr	r2, [pc, #756]	; (800bd48 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d02f      	beq.n	800bab6 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ba56:	4abd      	ldr	r2, [pc, #756]	; (800bd4c <RemapAndLinkDMAtoUARTRx+0x300>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d100      	bne.n	800ba5e <RemapAndLinkDMAtoUARTRx+0x12>
 800ba5c:	e087      	b.n	800bb6e <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ba5e:	4abc      	ldr	r2, [pc, #752]	; (800bd50 <RemapAndLinkDMAtoUARTRx+0x304>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d100      	bne.n	800ba66 <RemapAndLinkDMAtoUARTRx+0x1a>
 800ba64:	e0dc      	b.n	800bc20 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800ba66:	4abb      	ldr	r2, [pc, #748]	; (800bd54 <RemapAndLinkDMAtoUARTRx+0x308>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d000      	beq.n	800ba6e <RemapAndLinkDMAtoUARTRx+0x22>
 800ba6c:	e18a      	b.n	800bd84 <RemapAndLinkDMAtoUARTRx+0x338>
 800ba6e:	680b      	ldr	r3, [r1, #0]
 800ba70:	4ab9      	ldr	r2, [pc, #740]	; (800bd58 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d100      	bne.n	800ba78 <RemapAndLinkDMAtoUARTRx+0x2c>
 800ba76:	e12d      	b.n	800bcd4 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ba78:	4ab8      	ldr	r2, [pc, #736]	; (800bd5c <RemapAndLinkDMAtoUARTRx+0x310>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d100      	bne.n	800ba80 <RemapAndLinkDMAtoUARTRx+0x34>
 800ba7e:	e134      	b.n	800bcea <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ba80:	4ab7      	ldr	r2, [pc, #732]	; (800bd60 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d100      	bne.n	800ba88 <RemapAndLinkDMAtoUARTRx+0x3c>
 800ba86:	e13c      	b.n	800bd02 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ba88:	4ab6      	ldr	r2, [pc, #728]	; (800bd64 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d100      	bne.n	800ba90 <RemapAndLinkDMAtoUARTRx+0x44>
 800ba8e:	e144      	b.n	800bd1a <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ba90:	4ab5      	ldr	r2, [pc, #724]	; (800bd68 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d100      	bne.n	800ba98 <RemapAndLinkDMAtoUARTRx+0x4c>
 800ba96:	e14c      	b.n	800bd32 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800ba98:	4ab4      	ldr	r2, [pc, #720]	; (800bd6c <RemapAndLinkDMAtoUARTRx+0x320>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d11e      	bne.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800ba9e:	4ab4      	ldr	r2, [pc, #720]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800baa0:	23a8      	movs	r3, #168	; 0xa8
 800baa2:	58d4      	ldr	r4, [r2, r3]
 800baa4:	4db3      	ldr	r5, [pc, #716]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800baa6:	402c      	ands	r4, r5
 800baa8:	50d4      	str	r4, [r2, r3]
 800baaa:	58d5      	ldr	r5, [r2, r3]
 800baac:	24b0      	movs	r4, #176	; 0xb0
 800baae:	0124      	lsls	r4, r4, #4
 800bab0:	432c      	orrs	r4, r5
 800bab2:	50d4      	str	r4, [r2, r3]
 800bab4:	e012      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bab6:	680b      	ldr	r3, [r1, #0]
 800bab8:	4aa7      	ldr	r2, [pc, #668]	; (800bd58 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d011      	beq.n	800bae2 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800babe:	4aa7      	ldr	r2, [pc, #668]	; (800bd5c <RemapAndLinkDMAtoUARTRx+0x310>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d019      	beq.n	800baf8 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bac4:	4aa6      	ldr	r2, [pc, #664]	; (800bd60 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d022      	beq.n	800bb10 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800baca:	4aa6      	ldr	r2, [pc, #664]	; (800bd64 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d02b      	beq.n	800bb28 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bad0:	4aa5      	ldr	r2, [pc, #660]	; (800bd68 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d034      	beq.n	800bb40 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bad6:	4aa5      	ldr	r2, [pc, #660]	; (800bd6c <RemapAndLinkDMAtoUARTRx+0x320>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d03c      	beq.n	800bb56 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800badc:	6641      	str	r1, [r0, #100]	; 0x64
 800bade:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800bae2:	4aa5      	ldr	r2, [pc, #660]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bae4:	23a8      	movs	r3, #168	; 0xa8
 800bae6:	58d4      	ldr	r4, [r2, r3]
 800bae8:	250f      	movs	r5, #15
 800baea:	43ac      	bics	r4, r5
 800baec:	50d4      	str	r4, [r2, r3]
 800baee:	58d4      	ldr	r4, [r2, r3]
 800baf0:	3d07      	subs	r5, #7
 800baf2:	432c      	orrs	r4, r5
 800baf4:	50d4      	str	r4, [r2, r3]
 800baf6:	e7f1      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800baf8:	4a9f      	ldr	r2, [pc, #636]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bafa:	23a8      	movs	r3, #168	; 0xa8
 800bafc:	58d4      	ldr	r4, [r2, r3]
 800bafe:	4d9d      	ldr	r5, [pc, #628]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb00:	402c      	ands	r4, r5
 800bb02:	50d4      	str	r4, [r2, r3]
 800bb04:	58d5      	ldr	r5, [r2, r3]
 800bb06:	2480      	movs	r4, #128	; 0x80
 800bb08:	0124      	lsls	r4, r4, #4
 800bb0a:	432c      	orrs	r4, r5
 800bb0c:	50d4      	str	r4, [r2, r3]
 800bb0e:	e7e5      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800bb10:	4a99      	ldr	r2, [pc, #612]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb12:	23a8      	movs	r3, #168	; 0xa8
 800bb14:	58d4      	ldr	r4, [r2, r3]
 800bb16:	4d99      	ldr	r5, [pc, #612]	; (800bd7c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bb18:	402c      	ands	r4, r5
 800bb1a:	50d4      	str	r4, [r2, r3]
 800bb1c:	58d5      	ldr	r5, [r2, r3]
 800bb1e:	2480      	movs	r4, #128	; 0x80
 800bb20:	0324      	lsls	r4, r4, #12
 800bb22:	432c      	orrs	r4, r5
 800bb24:	50d4      	str	r4, [r2, r3]
 800bb26:	e7d9      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800bb28:	4a93      	ldr	r2, [pc, #588]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb2a:	23a8      	movs	r3, #168	; 0xa8
 800bb2c:	58d4      	ldr	r4, [r2, r3]
 800bb2e:	4d94      	ldr	r5, [pc, #592]	; (800bd80 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bb30:	402c      	ands	r4, r5
 800bb32:	50d4      	str	r4, [r2, r3]
 800bb34:	58d5      	ldr	r5, [r2, r3]
 800bb36:	2480      	movs	r4, #128	; 0x80
 800bb38:	0424      	lsls	r4, r4, #16
 800bb3a:	432c      	orrs	r4, r5
 800bb3c:	50d4      	str	r4, [r2, r3]
 800bb3e:	e7cd      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800bb40:	4a8b      	ldr	r2, [pc, #556]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb42:	23a8      	movs	r3, #168	; 0xa8
 800bb44:	58d4      	ldr	r4, [r2, r3]
 800bb46:	25f0      	movs	r5, #240	; 0xf0
 800bb48:	43ac      	bics	r4, r5
 800bb4a:	50d4      	str	r4, [r2, r3]
 800bb4c:	58d4      	ldr	r4, [r2, r3]
 800bb4e:	3d70      	subs	r5, #112	; 0x70
 800bb50:	432c      	orrs	r4, r5
 800bb52:	50d4      	str	r4, [r2, r3]
 800bb54:	e7c2      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800bb56:	4a86      	ldr	r2, [pc, #536]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb58:	23a8      	movs	r3, #168	; 0xa8
 800bb5a:	58d4      	ldr	r4, [r2, r3]
 800bb5c:	4d85      	ldr	r5, [pc, #532]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb5e:	402c      	ands	r4, r5
 800bb60:	50d4      	str	r4, [r2, r3]
 800bb62:	58d5      	ldr	r5, [r2, r3]
 800bb64:	2480      	movs	r4, #128	; 0x80
 800bb66:	0124      	lsls	r4, r4, #4
 800bb68:	432c      	orrs	r4, r5
 800bb6a:	50d4      	str	r4, [r2, r3]
 800bb6c:	e7b6      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bb6e:	680b      	ldr	r3, [r1, #0]
 800bb70:	4a79      	ldr	r2, [pc, #484]	; (800bd58 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d01a      	beq.n	800bbac <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800bb76:	4a79      	ldr	r2, [pc, #484]	; (800bd5c <RemapAndLinkDMAtoUARTRx+0x310>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d022      	beq.n	800bbc2 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800bb7c:	4a78      	ldr	r2, [pc, #480]	; (800bd60 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d02b      	beq.n	800bbda <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800bb82:	4a78      	ldr	r2, [pc, #480]	; (800bd64 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d034      	beq.n	800bbf2 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800bb88:	4a77      	ldr	r2, [pc, #476]	; (800bd68 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d03d      	beq.n	800bc0a <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800bb8e:	4a77      	ldr	r2, [pc, #476]	; (800bd6c <RemapAndLinkDMAtoUARTRx+0x320>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d1a3      	bne.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bb94:	4a76      	ldr	r2, [pc, #472]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb96:	23a8      	movs	r3, #168	; 0xa8
 800bb98:	58d4      	ldr	r4, [r2, r3]
 800bb9a:	4d76      	ldr	r5, [pc, #472]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb9c:	402c      	ands	r4, r5
 800bb9e:	50d4      	str	r4, [r2, r3]
 800bba0:	58d5      	ldr	r5, [r2, r3]
 800bba2:	2490      	movs	r4, #144	; 0x90
 800bba4:	0124      	lsls	r4, r4, #4
 800bba6:	432c      	orrs	r4, r5
 800bba8:	50d4      	str	r4, [r2, r3]
 800bbaa:	e797      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bbac:	4a72      	ldr	r2, [pc, #456]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbae:	23a8      	movs	r3, #168	; 0xa8
 800bbb0:	58d4      	ldr	r4, [r2, r3]
 800bbb2:	250f      	movs	r5, #15
 800bbb4:	43ac      	bics	r4, r5
 800bbb6:	50d4      	str	r4, [r2, r3]
 800bbb8:	58d4      	ldr	r4, [r2, r3]
 800bbba:	3d06      	subs	r5, #6
 800bbbc:	432c      	orrs	r4, r5
 800bbbe:	50d4      	str	r4, [r2, r3]
 800bbc0:	e78c      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bbc2:	4a6d      	ldr	r2, [pc, #436]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbc4:	23a8      	movs	r3, #168	; 0xa8
 800bbc6:	58d4      	ldr	r4, [r2, r3]
 800bbc8:	4d6a      	ldr	r5, [pc, #424]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bbca:	402c      	ands	r4, r5
 800bbcc:	50d4      	str	r4, [r2, r3]
 800bbce:	58d5      	ldr	r5, [r2, r3]
 800bbd0:	2490      	movs	r4, #144	; 0x90
 800bbd2:	0124      	lsls	r4, r4, #4
 800bbd4:	432c      	orrs	r4, r5
 800bbd6:	50d4      	str	r4, [r2, r3]
 800bbd8:	e780      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bbda:	4a67      	ldr	r2, [pc, #412]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbdc:	23a8      	movs	r3, #168	; 0xa8
 800bbde:	58d4      	ldr	r4, [r2, r3]
 800bbe0:	4d66      	ldr	r5, [pc, #408]	; (800bd7c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bbe2:	402c      	ands	r4, r5
 800bbe4:	50d4      	str	r4, [r2, r3]
 800bbe6:	58d5      	ldr	r5, [r2, r3]
 800bbe8:	2490      	movs	r4, #144	; 0x90
 800bbea:	0324      	lsls	r4, r4, #12
 800bbec:	432c      	orrs	r4, r5
 800bbee:	50d4      	str	r4, [r2, r3]
 800bbf0:	e774      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bbf2:	4a61      	ldr	r2, [pc, #388]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbf4:	23a8      	movs	r3, #168	; 0xa8
 800bbf6:	58d4      	ldr	r4, [r2, r3]
 800bbf8:	4d61      	ldr	r5, [pc, #388]	; (800bd80 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bbfa:	402c      	ands	r4, r5
 800bbfc:	50d4      	str	r4, [r2, r3]
 800bbfe:	58d5      	ldr	r5, [r2, r3]
 800bc00:	2490      	movs	r4, #144	; 0x90
 800bc02:	0424      	lsls	r4, r4, #16
 800bc04:	432c      	orrs	r4, r5
 800bc06:	50d4      	str	r4, [r2, r3]
 800bc08:	e768      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bc0a:	4a59      	ldr	r2, [pc, #356]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bc0c:	23a8      	movs	r3, #168	; 0xa8
 800bc0e:	58d4      	ldr	r4, [r2, r3]
 800bc10:	25f0      	movs	r5, #240	; 0xf0
 800bc12:	43ac      	bics	r4, r5
 800bc14:	50d4      	str	r4, [r2, r3]
 800bc16:	58d4      	ldr	r4, [r2, r3]
 800bc18:	3d60      	subs	r5, #96	; 0x60
 800bc1a:	432c      	orrs	r4, r5
 800bc1c:	50d4      	str	r4, [r2, r3]
 800bc1e:	e75d      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bc20:	680b      	ldr	r3, [r1, #0]
 800bc22:	4a4d      	ldr	r2, [pc, #308]	; (800bd58 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d01b      	beq.n	800bc60 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bc28:	4a4c      	ldr	r2, [pc, #304]	; (800bd5c <RemapAndLinkDMAtoUARTRx+0x310>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d023      	beq.n	800bc76 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bc2e:	4a4c      	ldr	r2, [pc, #304]	; (800bd60 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d02c      	beq.n	800bc8e <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bc34:	4a4b      	ldr	r2, [pc, #300]	; (800bd64 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d035      	beq.n	800bca6 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bc3a:	4a4b      	ldr	r2, [pc, #300]	; (800bd68 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d03e      	beq.n	800bcbe <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bc40:	4a4a      	ldr	r2, [pc, #296]	; (800bd6c <RemapAndLinkDMAtoUARTRx+0x320>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d000      	beq.n	800bc48 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800bc46:	e749      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bc48:	4a49      	ldr	r2, [pc, #292]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bc4a:	23a8      	movs	r3, #168	; 0xa8
 800bc4c:	58d4      	ldr	r4, [r2, r3]
 800bc4e:	4d49      	ldr	r5, [pc, #292]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bc50:	402c      	ands	r4, r5
 800bc52:	50d4      	str	r4, [r2, r3]
 800bc54:	58d5      	ldr	r5, [r2, r3]
 800bc56:	24a0      	movs	r4, #160	; 0xa0
 800bc58:	0124      	lsls	r4, r4, #4
 800bc5a:	432c      	orrs	r4, r5
 800bc5c:	50d4      	str	r4, [r2, r3]
 800bc5e:	e73d      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bc60:	4a45      	ldr	r2, [pc, #276]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc62:	23a8      	movs	r3, #168	; 0xa8
 800bc64:	58d4      	ldr	r4, [r2, r3]
 800bc66:	250f      	movs	r5, #15
 800bc68:	43ac      	bics	r4, r5
 800bc6a:	50d4      	str	r4, [r2, r3]
 800bc6c:	58d4      	ldr	r4, [r2, r3]
 800bc6e:	3d05      	subs	r5, #5
 800bc70:	432c      	orrs	r4, r5
 800bc72:	50d4      	str	r4, [r2, r3]
 800bc74:	e732      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800bc76:	4a40      	ldr	r2, [pc, #256]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc78:	23a8      	movs	r3, #168	; 0xa8
 800bc7a:	58d4      	ldr	r4, [r2, r3]
 800bc7c:	4d3d      	ldr	r5, [pc, #244]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bc7e:	402c      	ands	r4, r5
 800bc80:	50d4      	str	r4, [r2, r3]
 800bc82:	58d5      	ldr	r5, [r2, r3]
 800bc84:	24a0      	movs	r4, #160	; 0xa0
 800bc86:	0124      	lsls	r4, r4, #4
 800bc88:	432c      	orrs	r4, r5
 800bc8a:	50d4      	str	r4, [r2, r3]
 800bc8c:	e726      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800bc8e:	4a3a      	ldr	r2, [pc, #232]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc90:	23a8      	movs	r3, #168	; 0xa8
 800bc92:	58d4      	ldr	r4, [r2, r3]
 800bc94:	4d39      	ldr	r5, [pc, #228]	; (800bd7c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bc96:	402c      	ands	r4, r5
 800bc98:	50d4      	str	r4, [r2, r3]
 800bc9a:	58d5      	ldr	r5, [r2, r3]
 800bc9c:	24a0      	movs	r4, #160	; 0xa0
 800bc9e:	0324      	lsls	r4, r4, #12
 800bca0:	432c      	orrs	r4, r5
 800bca2:	50d4      	str	r4, [r2, r3]
 800bca4:	e71a      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800bca6:	4a34      	ldr	r2, [pc, #208]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bca8:	23a8      	movs	r3, #168	; 0xa8
 800bcaa:	58d4      	ldr	r4, [r2, r3]
 800bcac:	4d34      	ldr	r5, [pc, #208]	; (800bd80 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bcae:	402c      	ands	r4, r5
 800bcb0:	50d4      	str	r4, [r2, r3]
 800bcb2:	58d5      	ldr	r5, [r2, r3]
 800bcb4:	24a0      	movs	r4, #160	; 0xa0
 800bcb6:	0424      	lsls	r4, r4, #16
 800bcb8:	432c      	orrs	r4, r5
 800bcba:	50d4      	str	r4, [r2, r3]
 800bcbc:	e70e      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800bcbe:	4a2c      	ldr	r2, [pc, #176]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bcc0:	23a8      	movs	r3, #168	; 0xa8
 800bcc2:	58d4      	ldr	r4, [r2, r3]
 800bcc4:	25f0      	movs	r5, #240	; 0xf0
 800bcc6:	43ac      	bics	r4, r5
 800bcc8:	50d4      	str	r4, [r2, r3]
 800bcca:	58d4      	ldr	r4, [r2, r3]
 800bccc:	3d50      	subs	r5, #80	; 0x50
 800bcce:	432c      	orrs	r4, r5
 800bcd0:	50d4      	str	r4, [r2, r3]
 800bcd2:	e703      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bcd4:	4a28      	ldr	r2, [pc, #160]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bcd6:	23a8      	movs	r3, #168	; 0xa8
 800bcd8:	58d4      	ldr	r4, [r2, r3]
 800bcda:	250f      	movs	r5, #15
 800bcdc:	43ac      	bics	r4, r5
 800bcde:	50d4      	str	r4, [r2, r3]
 800bce0:	58d4      	ldr	r4, [r2, r3]
 800bce2:	3d04      	subs	r5, #4
 800bce4:	432c      	orrs	r4, r5
 800bce6:	50d4      	str	r4, [r2, r3]
 800bce8:	e6f8      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bcea:	4a23      	ldr	r2, [pc, #140]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bcec:	23a8      	movs	r3, #168	; 0xa8
 800bcee:	58d4      	ldr	r4, [r2, r3]
 800bcf0:	4d20      	ldr	r5, [pc, #128]	; (800bd74 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bcf2:	402c      	ands	r4, r5
 800bcf4:	50d4      	str	r4, [r2, r3]
 800bcf6:	58d5      	ldr	r5, [r2, r3]
 800bcf8:	24b0      	movs	r4, #176	; 0xb0
 800bcfa:	0124      	lsls	r4, r4, #4
 800bcfc:	432c      	orrs	r4, r5
 800bcfe:	50d4      	str	r4, [r2, r3]
 800bd00:	e6ec      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bd02:	4a1d      	ldr	r2, [pc, #116]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bd04:	23a8      	movs	r3, #168	; 0xa8
 800bd06:	58d4      	ldr	r4, [r2, r3]
 800bd08:	4d1c      	ldr	r5, [pc, #112]	; (800bd7c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bd0a:	402c      	ands	r4, r5
 800bd0c:	50d4      	str	r4, [r2, r3]
 800bd0e:	58d5      	ldr	r5, [r2, r3]
 800bd10:	24b0      	movs	r4, #176	; 0xb0
 800bd12:	0324      	lsls	r4, r4, #12
 800bd14:	432c      	orrs	r4, r5
 800bd16:	50d4      	str	r4, [r2, r3]
 800bd18:	e6e0      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bd1a:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bd1c:	23a8      	movs	r3, #168	; 0xa8
 800bd1e:	58d4      	ldr	r4, [r2, r3]
 800bd20:	4d17      	ldr	r5, [pc, #92]	; (800bd80 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bd22:	402c      	ands	r4, r5
 800bd24:	50d4      	str	r4, [r2, r3]
 800bd26:	58d5      	ldr	r5, [r2, r3]
 800bd28:	24b0      	movs	r4, #176	; 0xb0
 800bd2a:	0424      	lsls	r4, r4, #16
 800bd2c:	432c      	orrs	r4, r5
 800bd2e:	50d4      	str	r4, [r2, r3]
 800bd30:	e6d4      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800bd32:	4a0f      	ldr	r2, [pc, #60]	; (800bd70 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bd34:	23a8      	movs	r3, #168	; 0xa8
 800bd36:	58d4      	ldr	r4, [r2, r3]
 800bd38:	25f0      	movs	r5, #240	; 0xf0
 800bd3a:	43ac      	bics	r4, r5
 800bd3c:	50d4      	str	r4, [r2, r3]
 800bd3e:	58d4      	ldr	r4, [r2, r3]
 800bd40:	3d40      	subs	r5, #64	; 0x40
 800bd42:	432c      	orrs	r4, r5
 800bd44:	50d4      	str	r4, [r2, r3]
 800bd46:	e6c9      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
 800bd48:	40013800 	.word	0x40013800
 800bd4c:	40004400 	.word	0x40004400
 800bd50:	40004800 	.word	0x40004800
 800bd54:	40004c00 	.word	0x40004c00
 800bd58:	40020008 	.word	0x40020008
 800bd5c:	40020030 	.word	0x40020030
 800bd60:	40020058 	.word	0x40020058
 800bd64:	4002006c 	.word	0x4002006c
 800bd68:	4002041c 	.word	0x4002041c
 800bd6c:	40020430 	.word	0x40020430
 800bd70:	40020400 	.word	0x40020400
 800bd74:	fffff0ff 	.word	0xfffff0ff
 800bd78:	40020000 	.word	0x40020000
 800bd7c:	fff0ffff 	.word	0xfff0ffff
 800bd80:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bd84:	4ab9      	ldr	r2, [pc, #740]	; (800c06c <RemapAndLinkDMAtoUARTRx+0x620>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d159      	bne.n	800be3e <RemapAndLinkDMAtoUARTRx+0x3f2>
 800bd8a:	680b      	ldr	r3, [r1, #0]
 800bd8c:	4ab8      	ldr	r2, [pc, #736]	; (800c070 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d01b      	beq.n	800bdca <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800bd92:	4ab8      	ldr	r2, [pc, #736]	; (800c074 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d023      	beq.n	800bde0 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800bd98:	4ab7      	ldr	r2, [pc, #732]	; (800c078 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d02c      	beq.n	800bdf8 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800bd9e:	4ab7      	ldr	r2, [pc, #732]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x630>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d035      	beq.n	800be10 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800bda4:	4ab6      	ldr	r2, [pc, #728]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d03e      	beq.n	800be28 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800bdaa:	4ab6      	ldr	r2, [pc, #728]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d000      	beq.n	800bdb2 <RemapAndLinkDMAtoUARTRx+0x366>
 800bdb0:	e694      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800bdb2:	4ab5      	ldr	r2, [pc, #724]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bdb4:	23a8      	movs	r3, #168	; 0xa8
 800bdb6:	58d4      	ldr	r4, [r2, r3]
 800bdb8:	4db4      	ldr	r5, [pc, #720]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800bdba:	402c      	ands	r4, r5
 800bdbc:	50d4      	str	r4, [r2, r3]
 800bdbe:	58d5      	ldr	r5, [r2, r3]
 800bdc0:	24c0      	movs	r4, #192	; 0xc0
 800bdc2:	0124      	lsls	r4, r4, #4
 800bdc4:	432c      	orrs	r4, r5
 800bdc6:	50d4      	str	r4, [r2, r3]
 800bdc8:	e688      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bdca:	4ab1      	ldr	r2, [pc, #708]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdcc:	23a8      	movs	r3, #168	; 0xa8
 800bdce:	58d4      	ldr	r4, [r2, r3]
 800bdd0:	250f      	movs	r5, #15
 800bdd2:	43ac      	bics	r4, r5
 800bdd4:	50d4      	str	r4, [r2, r3]
 800bdd6:	58d4      	ldr	r4, [r2, r3]
 800bdd8:	3d03      	subs	r5, #3
 800bdda:	432c      	orrs	r4, r5
 800bddc:	50d4      	str	r4, [r2, r3]
 800bdde:	e67d      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800bde0:	4aab      	ldr	r2, [pc, #684]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bde2:	23a8      	movs	r3, #168	; 0xa8
 800bde4:	58d4      	ldr	r4, [r2, r3]
 800bde6:	4da9      	ldr	r5, [pc, #676]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800bde8:	402c      	ands	r4, r5
 800bdea:	50d4      	str	r4, [r2, r3]
 800bdec:	58d5      	ldr	r5, [r2, r3]
 800bdee:	24c0      	movs	r4, #192	; 0xc0
 800bdf0:	0124      	lsls	r4, r4, #4
 800bdf2:	432c      	orrs	r4, r5
 800bdf4:	50d4      	str	r4, [r2, r3]
 800bdf6:	e671      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bdf8:	4aa5      	ldr	r2, [pc, #660]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdfa:	23a8      	movs	r3, #168	; 0xa8
 800bdfc:	58d4      	ldr	r4, [r2, r3]
 800bdfe:	4da5      	ldr	r5, [pc, #660]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x648>)
 800be00:	402c      	ands	r4, r5
 800be02:	50d4      	str	r4, [r2, r3]
 800be04:	58d5      	ldr	r5, [r2, r3]
 800be06:	24c0      	movs	r4, #192	; 0xc0
 800be08:	0324      	lsls	r4, r4, #12
 800be0a:	432c      	orrs	r4, r5
 800be0c:	50d4      	str	r4, [r2, r3]
 800be0e:	e665      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800be10:	4a9f      	ldr	r2, [pc, #636]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be12:	23a8      	movs	r3, #168	; 0xa8
 800be14:	58d4      	ldr	r4, [r2, r3]
 800be16:	4da0      	ldr	r5, [pc, #640]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800be18:	402c      	ands	r4, r5
 800be1a:	50d4      	str	r4, [r2, r3]
 800be1c:	58d5      	ldr	r5, [r2, r3]
 800be1e:	24c0      	movs	r4, #192	; 0xc0
 800be20:	0424      	lsls	r4, r4, #16
 800be22:	432c      	orrs	r4, r5
 800be24:	50d4      	str	r4, [r2, r3]
 800be26:	e659      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800be28:	4a97      	ldr	r2, [pc, #604]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be2a:	23a8      	movs	r3, #168	; 0xa8
 800be2c:	58d4      	ldr	r4, [r2, r3]
 800be2e:	25f0      	movs	r5, #240	; 0xf0
 800be30:	43ac      	bics	r4, r5
 800be32:	50d4      	str	r4, [r2, r3]
 800be34:	58d4      	ldr	r4, [r2, r3]
 800be36:	3d30      	subs	r5, #48	; 0x30
 800be38:	432c      	orrs	r4, r5
 800be3a:	50d4      	str	r4, [r2, r3]
 800be3c:	e64e      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800be3e:	4a97      	ldr	r2, [pc, #604]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x650>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d159      	bne.n	800bef8 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800be44:	680b      	ldr	r3, [r1, #0]
 800be46:	4a8a      	ldr	r2, [pc, #552]	; (800c070 <RemapAndLinkDMAtoUARTRx+0x624>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d01b      	beq.n	800be84 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800be4c:	4a89      	ldr	r2, [pc, #548]	; (800c074 <RemapAndLinkDMAtoUARTRx+0x628>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d023      	beq.n	800be9a <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800be52:	4a89      	ldr	r2, [pc, #548]	; (800c078 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d02c      	beq.n	800beb2 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800be58:	4a88      	ldr	r2, [pc, #544]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x630>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d035      	beq.n	800beca <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800be5e:	4a88      	ldr	r2, [pc, #544]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x634>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d03e      	beq.n	800bee2 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800be64:	4a87      	ldr	r2, [pc, #540]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x638>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d000      	beq.n	800be6c <RemapAndLinkDMAtoUARTRx+0x420>
 800be6a:	e637      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800be6c:	4a86      	ldr	r2, [pc, #536]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be6e:	23a8      	movs	r3, #168	; 0xa8
 800be70:	58d4      	ldr	r4, [r2, r3]
 800be72:	4d86      	ldr	r5, [pc, #536]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800be74:	402c      	ands	r4, r5
 800be76:	50d4      	str	r4, [r2, r3]
 800be78:	58d5      	ldr	r5, [r2, r3]
 800be7a:	24d0      	movs	r4, #208	; 0xd0
 800be7c:	0124      	lsls	r4, r4, #4
 800be7e:	432c      	orrs	r4, r5
 800be80:	50d4      	str	r4, [r2, r3]
 800be82:	e62b      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800be84:	4a82      	ldr	r2, [pc, #520]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be86:	23a8      	movs	r3, #168	; 0xa8
 800be88:	58d4      	ldr	r4, [r2, r3]
 800be8a:	250f      	movs	r5, #15
 800be8c:	43ac      	bics	r4, r5
 800be8e:	50d4      	str	r4, [r2, r3]
 800be90:	58d4      	ldr	r4, [r2, r3]
 800be92:	3d02      	subs	r5, #2
 800be94:	432c      	orrs	r4, r5
 800be96:	50d4      	str	r4, [r2, r3]
 800be98:	e620      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800be9a:	4a7d      	ldr	r2, [pc, #500]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be9c:	23a8      	movs	r3, #168	; 0xa8
 800be9e:	58d4      	ldr	r4, [r2, r3]
 800bea0:	4d7a      	ldr	r5, [pc, #488]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800bea2:	402c      	ands	r4, r5
 800bea4:	50d4      	str	r4, [r2, r3]
 800bea6:	58d5      	ldr	r5, [r2, r3]
 800bea8:	24d0      	movs	r4, #208	; 0xd0
 800beaa:	0124      	lsls	r4, r4, #4
 800beac:	432c      	orrs	r4, r5
 800beae:	50d4      	str	r4, [r2, r3]
 800beb0:	e614      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800beb2:	4a77      	ldr	r2, [pc, #476]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800beb4:	23a8      	movs	r3, #168	; 0xa8
 800beb6:	58d4      	ldr	r4, [r2, r3]
 800beb8:	4d76      	ldr	r5, [pc, #472]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x648>)
 800beba:	402c      	ands	r4, r5
 800bebc:	50d4      	str	r4, [r2, r3]
 800bebe:	58d5      	ldr	r5, [r2, r3]
 800bec0:	24d0      	movs	r4, #208	; 0xd0
 800bec2:	0324      	lsls	r4, r4, #12
 800bec4:	432c      	orrs	r4, r5
 800bec6:	50d4      	str	r4, [r2, r3]
 800bec8:	e608      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800beca:	4a71      	ldr	r2, [pc, #452]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800becc:	23a8      	movs	r3, #168	; 0xa8
 800bece:	58d4      	ldr	r4, [r2, r3]
 800bed0:	4d71      	ldr	r5, [pc, #452]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bed2:	402c      	ands	r4, r5
 800bed4:	50d4      	str	r4, [r2, r3]
 800bed6:	58d5      	ldr	r5, [r2, r3]
 800bed8:	24d0      	movs	r4, #208	; 0xd0
 800beda:	0424      	lsls	r4, r4, #16
 800bedc:	432c      	orrs	r4, r5
 800bede:	50d4      	str	r4, [r2, r3]
 800bee0:	e5fc      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800bee2:	4a69      	ldr	r2, [pc, #420]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bee4:	23a8      	movs	r3, #168	; 0xa8
 800bee6:	58d4      	ldr	r4, [r2, r3]
 800bee8:	25f0      	movs	r5, #240	; 0xf0
 800beea:	43ac      	bics	r4, r5
 800beec:	50d4      	str	r4, [r2, r3]
 800beee:	58d4      	ldr	r4, [r2, r3]
 800bef0:	3d20      	subs	r5, #32
 800bef2:	432c      	orrs	r4, r5
 800bef4:	50d4      	str	r4, [r2, r3]
 800bef6:	e5f1      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800bef8:	4a69      	ldr	r2, [pc, #420]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x654>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d159      	bne.n	800bfb2 <RemapAndLinkDMAtoUARTRx+0x566>
 800befe:	680b      	ldr	r3, [r1, #0]
 800bf00:	4a5b      	ldr	r2, [pc, #364]	; (800c070 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d01b      	beq.n	800bf3e <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800bf06:	4a5b      	ldr	r2, [pc, #364]	; (800c074 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d023      	beq.n	800bf54 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800bf0c:	4a5a      	ldr	r2, [pc, #360]	; (800c078 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d02c      	beq.n	800bf6c <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800bf12:	4a5a      	ldr	r2, [pc, #360]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x630>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d035      	beq.n	800bf84 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800bf18:	4a59      	ldr	r2, [pc, #356]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d03e      	beq.n	800bf9c <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800bf1e:	4a59      	ldr	r2, [pc, #356]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d000      	beq.n	800bf26 <RemapAndLinkDMAtoUARTRx+0x4da>
 800bf24:	e5da      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800bf26:	4a58      	ldr	r2, [pc, #352]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf28:	23a8      	movs	r3, #168	; 0xa8
 800bf2a:	58d4      	ldr	r4, [r2, r3]
 800bf2c:	4d57      	ldr	r5, [pc, #348]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf2e:	402c      	ands	r4, r5
 800bf30:	50d4      	str	r4, [r2, r3]
 800bf32:	58d5      	ldr	r5, [r2, r3]
 800bf34:	24e0      	movs	r4, #224	; 0xe0
 800bf36:	0124      	lsls	r4, r4, #4
 800bf38:	432c      	orrs	r4, r5
 800bf3a:	50d4      	str	r4, [r2, r3]
 800bf3c:	e5ce      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800bf3e:	4a54      	ldr	r2, [pc, #336]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf40:	23a8      	movs	r3, #168	; 0xa8
 800bf42:	58d4      	ldr	r4, [r2, r3]
 800bf44:	250f      	movs	r5, #15
 800bf46:	43ac      	bics	r4, r5
 800bf48:	50d4      	str	r4, [r2, r3]
 800bf4a:	58d4      	ldr	r4, [r2, r3]
 800bf4c:	3d01      	subs	r5, #1
 800bf4e:	432c      	orrs	r4, r5
 800bf50:	50d4      	str	r4, [r2, r3]
 800bf52:	e5c3      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800bf54:	4a4e      	ldr	r2, [pc, #312]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf56:	23a8      	movs	r3, #168	; 0xa8
 800bf58:	58d4      	ldr	r4, [r2, r3]
 800bf5a:	4d4c      	ldr	r5, [pc, #304]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf5c:	402c      	ands	r4, r5
 800bf5e:	50d4      	str	r4, [r2, r3]
 800bf60:	58d5      	ldr	r5, [r2, r3]
 800bf62:	24e0      	movs	r4, #224	; 0xe0
 800bf64:	0124      	lsls	r4, r4, #4
 800bf66:	432c      	orrs	r4, r5
 800bf68:	50d4      	str	r4, [r2, r3]
 800bf6a:	e5b7      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800bf6c:	4a48      	ldr	r2, [pc, #288]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf6e:	23a8      	movs	r3, #168	; 0xa8
 800bf70:	58d4      	ldr	r4, [r2, r3]
 800bf72:	4d48      	ldr	r5, [pc, #288]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bf74:	402c      	ands	r4, r5
 800bf76:	50d4      	str	r4, [r2, r3]
 800bf78:	58d5      	ldr	r5, [r2, r3]
 800bf7a:	24e0      	movs	r4, #224	; 0xe0
 800bf7c:	0324      	lsls	r4, r4, #12
 800bf7e:	432c      	orrs	r4, r5
 800bf80:	50d4      	str	r4, [r2, r3]
 800bf82:	e5ab      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800bf84:	4a42      	ldr	r2, [pc, #264]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf86:	23a8      	movs	r3, #168	; 0xa8
 800bf88:	58d4      	ldr	r4, [r2, r3]
 800bf8a:	4d43      	ldr	r5, [pc, #268]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bf8c:	402c      	ands	r4, r5
 800bf8e:	50d4      	str	r4, [r2, r3]
 800bf90:	58d5      	ldr	r5, [r2, r3]
 800bf92:	24e0      	movs	r4, #224	; 0xe0
 800bf94:	0424      	lsls	r4, r4, #16
 800bf96:	432c      	orrs	r4, r5
 800bf98:	50d4      	str	r4, [r2, r3]
 800bf9a:	e59f      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800bf9c:	4a3a      	ldr	r2, [pc, #232]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf9e:	23a8      	movs	r3, #168	; 0xa8
 800bfa0:	58d4      	ldr	r4, [r2, r3]
 800bfa2:	25f0      	movs	r5, #240	; 0xf0
 800bfa4:	43ac      	bics	r4, r5
 800bfa6:	50d4      	str	r4, [r2, r3]
 800bfa8:	58d4      	ldr	r4, [r2, r3]
 800bfaa:	3d10      	subs	r5, #16
 800bfac:	432c      	orrs	r4, r5
 800bfae:	50d4      	str	r4, [r2, r3]
 800bfb0:	e594      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800bfb2:	4a3c      	ldr	r2, [pc, #240]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x658>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d000      	beq.n	800bfba <RemapAndLinkDMAtoUARTRx+0x56e>
 800bfb8:	e590      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
 800bfba:	680b      	ldr	r3, [r1, #0]
 800bfbc:	4a2c      	ldr	r2, [pc, #176]	; (800c070 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d01b      	beq.n	800bffa <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800bfc2:	4a2c      	ldr	r2, [pc, #176]	; (800c074 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d022      	beq.n	800c00e <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800bfc8:	4a2b      	ldr	r2, [pc, #172]	; (800c078 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d02b      	beq.n	800c026 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800bfce:	4a2b      	ldr	r2, [pc, #172]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x630>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d034      	beq.n	800c03e <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800bfd4:	4a2a      	ldr	r2, [pc, #168]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d03d      	beq.n	800c056 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800bfda:	4a2a      	ldr	r2, [pc, #168]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d000      	beq.n	800bfe2 <RemapAndLinkDMAtoUARTRx+0x596>
 800bfe0:	e57c      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800bfe2:	4a29      	ldr	r2, [pc, #164]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bfe4:	23a8      	movs	r3, #168	; 0xa8
 800bfe6:	58d4      	ldr	r4, [r2, r3]
 800bfe8:	4d28      	ldr	r5, [pc, #160]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800bfea:	402c      	ands	r4, r5
 800bfec:	50d4      	str	r4, [r2, r3]
 800bfee:	58d5      	ldr	r5, [r2, r3]
 800bff0:	24f0      	movs	r4, #240	; 0xf0
 800bff2:	0124      	lsls	r4, r4, #4
 800bff4:	432c      	orrs	r4, r5
 800bff6:	50d4      	str	r4, [r2, r3]
 800bff8:	e570      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800bffa:	4a25      	ldr	r2, [pc, #148]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bffc:	23a8      	movs	r3, #168	; 0xa8
 800bffe:	58d5      	ldr	r5, [r2, r3]
 800c000:	260f      	movs	r6, #15
 800c002:	43b5      	bics	r5, r6
 800c004:	50d5      	str	r5, [r2, r3]
 800c006:	58d4      	ldr	r4, [r2, r3]
 800c008:	4334      	orrs	r4, r6
 800c00a:	50d4      	str	r4, [r2, r3]
 800c00c:	e566      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c00e:	4a20      	ldr	r2, [pc, #128]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c010:	23a8      	movs	r3, #168	; 0xa8
 800c012:	58d4      	ldr	r4, [r2, r3]
 800c014:	4d1d      	ldr	r5, [pc, #116]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c016:	402c      	ands	r4, r5
 800c018:	50d4      	str	r4, [r2, r3]
 800c01a:	58d5      	ldr	r5, [r2, r3]
 800c01c:	24f0      	movs	r4, #240	; 0xf0
 800c01e:	0124      	lsls	r4, r4, #4
 800c020:	432c      	orrs	r4, r5
 800c022:	50d4      	str	r4, [r2, r3]
 800c024:	e55a      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c026:	4a1a      	ldr	r2, [pc, #104]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c028:	23a8      	movs	r3, #168	; 0xa8
 800c02a:	58d4      	ldr	r4, [r2, r3]
 800c02c:	4d19      	ldr	r5, [pc, #100]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c02e:	402c      	ands	r4, r5
 800c030:	50d4      	str	r4, [r2, r3]
 800c032:	58d5      	ldr	r5, [r2, r3]
 800c034:	24f0      	movs	r4, #240	; 0xf0
 800c036:	0324      	lsls	r4, r4, #12
 800c038:	432c      	orrs	r4, r5
 800c03a:	50d4      	str	r4, [r2, r3]
 800c03c:	e54e      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c03e:	4a14      	ldr	r2, [pc, #80]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c040:	23a8      	movs	r3, #168	; 0xa8
 800c042:	58d4      	ldr	r4, [r2, r3]
 800c044:	4d14      	ldr	r5, [pc, #80]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c046:	402c      	ands	r4, r5
 800c048:	50d4      	str	r4, [r2, r3]
 800c04a:	58d5      	ldr	r5, [r2, r3]
 800c04c:	24f0      	movs	r4, #240	; 0xf0
 800c04e:	0424      	lsls	r4, r4, #16
 800c050:	432c      	orrs	r4, r5
 800c052:	50d4      	str	r4, [r2, r3]
 800c054:	e542      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c056:	4a0c      	ldr	r2, [pc, #48]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c058:	23a8      	movs	r3, #168	; 0xa8
 800c05a:	58d5      	ldr	r5, [r2, r3]
 800c05c:	26f0      	movs	r6, #240	; 0xf0
 800c05e:	43b5      	bics	r5, r6
 800c060:	50d5      	str	r5, [r2, r3]
 800c062:	58d4      	ldr	r4, [r2, r3]
 800c064:	4334      	orrs	r4, r6
 800c066:	50d4      	str	r4, [r2, r3]
 800c068:	e538      	b.n	800badc <RemapAndLinkDMAtoUARTRx+0x90>
 800c06a:	46c0      	nop			; (mov r8, r8)
 800c06c:	40005000 	.word	0x40005000
 800c070:	40020008 	.word	0x40020008
 800c074:	40020030 	.word	0x40020030
 800c078:	40020058 	.word	0x40020058
 800c07c:	4002006c 	.word	0x4002006c
 800c080:	4002041c 	.word	0x4002041c
 800c084:	40020430 	.word	0x40020430
 800c088:	40020400 	.word	0x40020400
 800c08c:	fffff0ff 	.word	0xfffff0ff
 800c090:	40020000 	.word	0x40020000
 800c094:	fff0ffff 	.word	0xfff0ffff
 800c098:	ff0fffff 	.word	0xff0fffff
 800c09c:	40011400 	.word	0x40011400
 800c0a0:	40011800 	.word	0x40011800
 800c0a4:	40011c00 	.word	0x40011c00

0800c0a8 <DMA_MSG_RX_Setup>:
{	
 800c0a8:	b570      	push	{r4, r5, r6, lr}
 800c0aa:	0004      	movs	r4, r0
 800c0ac:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c0ae:	f7ff fccd 	bl	800ba4c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	0028      	movs	r0, r5
 800c0b6:	f7ff fc13 	bl	800b8e0 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c0ba:	0020      	movs	r0, r4
 800c0bc:	f7ff fae2 	bl	800b684 <GetPort>
 800c0c0:	1e41      	subs	r1, r0, #1
 800c0c2:	0189      	lsls	r1, r1, #6
 800c0c4:	4803      	ldr	r0, [pc, #12]	; (800c0d4 <DMA_MSG_RX_Setup+0x2c>)
 800c0c6:	1809      	adds	r1, r1, r0
 800c0c8:	2240      	movs	r2, #64	; 0x40
 800c0ca:	0020      	movs	r0, r4
 800c0cc:	f006 f9ae 	bl	801242c <HAL_UART_Receive_DMA>
}
 800c0d0:	bd70      	pop	{r4, r5, r6, pc}
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	200012d0 	.word	0x200012d0

0800c0d8 <SetupMessagingRxDMAs>:
{	
 800c0d8:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c0da:	4b1b      	ldr	r3, [pc, #108]	; (800c148 <SetupMessagingRxDMAs+0x70>)
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d014      	beq.n	800c10c <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800c0e2:	4b19      	ldr	r3, [pc, #100]	; (800c148 <SetupMessagingRxDMAs+0x70>)
 800c0e4:	789b      	ldrb	r3, [r3, #2]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d015      	beq.n	800c116 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800c0ea:	4b17      	ldr	r3, [pc, #92]	; (800c148 <SetupMessagingRxDMAs+0x70>)
 800c0ec:	78db      	ldrb	r3, [r3, #3]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d016      	beq.n	800c120 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800c0f2:	4b15      	ldr	r3, [pc, #84]	; (800c148 <SetupMessagingRxDMAs+0x70>)
 800c0f4:	791b      	ldrb	r3, [r3, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d017      	beq.n	800c12a <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800c0fa:	4b13      	ldr	r3, [pc, #76]	; (800c148 <SetupMessagingRxDMAs+0x70>)
 800c0fc:	795b      	ldrb	r3, [r3, #5]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d018      	beq.n	800c134 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800c102:	4b11      	ldr	r3, [pc, #68]	; (800c148 <SetupMessagingRxDMAs+0x70>)
 800c104:	799b      	ldrb	r3, [r3, #6]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d019      	beq.n	800c13e <SetupMessagingRxDMAs+0x66>
}
 800c10a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c10c:	490f      	ldr	r1, [pc, #60]	; (800c14c <SetupMessagingRxDMAs+0x74>)
 800c10e:	4810      	ldr	r0, [pc, #64]	; (800c150 <SetupMessagingRxDMAs+0x78>)
 800c110:	f7ff ffca 	bl	800c0a8 <DMA_MSG_RX_Setup>
 800c114:	e7e5      	b.n	800c0e2 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c116:	490f      	ldr	r1, [pc, #60]	; (800c154 <SetupMessagingRxDMAs+0x7c>)
 800c118:	480f      	ldr	r0, [pc, #60]	; (800c158 <SetupMessagingRxDMAs+0x80>)
 800c11a:	f7ff ffc5 	bl	800c0a8 <DMA_MSG_RX_Setup>
 800c11e:	e7e4      	b.n	800c0ea <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c120:	490e      	ldr	r1, [pc, #56]	; (800c15c <SetupMessagingRxDMAs+0x84>)
 800c122:	480f      	ldr	r0, [pc, #60]	; (800c160 <SetupMessagingRxDMAs+0x88>)
 800c124:	f7ff ffc0 	bl	800c0a8 <DMA_MSG_RX_Setup>
 800c128:	e7e3      	b.n	800c0f2 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c12a:	490e      	ldr	r1, [pc, #56]	; (800c164 <SetupMessagingRxDMAs+0x8c>)
 800c12c:	480e      	ldr	r0, [pc, #56]	; (800c168 <SetupMessagingRxDMAs+0x90>)
 800c12e:	f7ff ffbb 	bl	800c0a8 <DMA_MSG_RX_Setup>
 800c132:	e7e2      	b.n	800c0fa <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c134:	490d      	ldr	r1, [pc, #52]	; (800c16c <SetupMessagingRxDMAs+0x94>)
 800c136:	480e      	ldr	r0, [pc, #56]	; (800c170 <SetupMessagingRxDMAs+0x98>)
 800c138:	f7ff ffb6 	bl	800c0a8 <DMA_MSG_RX_Setup>
 800c13c:	e7e1      	b.n	800c102 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c13e:	490d      	ldr	r1, [pc, #52]	; (800c174 <SetupMessagingRxDMAs+0x9c>)
 800c140:	480d      	ldr	r0, [pc, #52]	; (800c178 <SetupMessagingRxDMAs+0xa0>)
 800c142:	f7ff ffb1 	bl	800c0a8 <DMA_MSG_RX_Setup>
}
 800c146:	e7e0      	b.n	800c10a <SetupMessagingRxDMAs+0x32>
 800c148:	200010f8 	.word	0x200010f8
 800c14c:	200017a0 	.word	0x200017a0
 800c150:	20006cbc 	.word	0x20006cbc
 800c154:	200017d8 	.word	0x200017d8
 800c158:	20006d30 	.word	0x20006d30
 800c15c:	20001810 	.word	0x20001810
 800c160:	20006c4c 	.word	0x20006c4c
 800c164:	20001848 	.word	0x20001848
 800c168:	20006aec 	.word	0x20006aec
 800c16c:	20001880 	.word	0x20001880
 800c170:	20006b60 	.word	0x20006b60
 800c174:	200018b8 	.word	0x200018b8
 800c178:	20006bd0 	.word	0x20006bd0

0800c17c <DMA_STREAM_Setup>:
{	
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	0005      	movs	r5, r0
 800c180:	000f      	movs	r7, r1
 800c182:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c184:	f7ff fa7e 	bl	800b684 <GetPort>
	hDMA = &streamDMA[port-1];
 800c188:	3801      	subs	r0, #1
 800c18a:	00c4      	lsls	r4, r0, #3
 800c18c:	1a24      	subs	r4, r4, r0
 800c18e:	00e4      	lsls	r4, r4, #3
 800c190:	4809      	ldr	r0, [pc, #36]	; (800c1b8 <DMA_STREAM_Setup+0x3c>)
 800c192:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c194:	0021      	movs	r1, r4
 800c196:	0028      	movs	r0, r5
 800c198:	f7ff fc58 	bl	800ba4c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c19c:	2101      	movs	r1, #1
 800c19e:	0020      	movs	r0, r4
 800c1a0:	f7ff fb9e 	bl	800b8e0 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c1a4:	2369      	movs	r3, #105	; 0x69
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	3128      	adds	r1, #40	; 0x28
 800c1ae:	0032      	movs	r2, r6
 800c1b0:	0028      	movs	r0, r5
 800c1b2:	f006 f93b 	bl	801242c <HAL_UART_Receive_DMA>
}
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	20001998 	.word	0x20001998

0800c1bc <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c1bc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c1be:	6803      	ldr	r3, [r0, #0]
 800c1c0:	4abd      	ldr	r2, [pc, #756]	; (800c4b8 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d02f      	beq.n	800c226 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c1c6:	4abd      	ldr	r2, [pc, #756]	; (800c4bc <RemapAndLinkDMAtoUARTTx+0x300>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d100      	bne.n	800c1ce <RemapAndLinkDMAtoUARTTx+0x12>
 800c1cc:	e087      	b.n	800c2de <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c1ce:	4abc      	ldr	r2, [pc, #752]	; (800c4c0 <RemapAndLinkDMAtoUARTTx+0x304>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d100      	bne.n	800c1d6 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c1d4:	e0dc      	b.n	800c390 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c1d6:	4abb      	ldr	r2, [pc, #748]	; (800c4c4 <RemapAndLinkDMAtoUARTTx+0x308>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d000      	beq.n	800c1de <RemapAndLinkDMAtoUARTTx+0x22>
 800c1dc:	e18a      	b.n	800c4f4 <RemapAndLinkDMAtoUARTTx+0x338>
 800c1de:	680b      	ldr	r3, [r1, #0]
 800c1e0:	4ab9      	ldr	r2, [pc, #740]	; (800c4c8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d100      	bne.n	800c1e8 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c1e6:	e12d      	b.n	800c444 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c1e8:	4ab8      	ldr	r2, [pc, #736]	; (800c4cc <RemapAndLinkDMAtoUARTTx+0x310>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d100      	bne.n	800c1f0 <RemapAndLinkDMAtoUARTTx+0x34>
 800c1ee:	e134      	b.n	800c45a <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c1f0:	4ab7      	ldr	r2, [pc, #732]	; (800c4d0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d100      	bne.n	800c1f8 <RemapAndLinkDMAtoUARTTx+0x3c>
 800c1f6:	e13c      	b.n	800c472 <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c1f8:	4ab6      	ldr	r2, [pc, #728]	; (800c4d4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d100      	bne.n	800c200 <RemapAndLinkDMAtoUARTTx+0x44>
 800c1fe:	e144      	b.n	800c48a <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c200:	4ab5      	ldr	r2, [pc, #724]	; (800c4d8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d100      	bne.n	800c208 <RemapAndLinkDMAtoUARTTx+0x4c>
 800c206:	e14b      	b.n	800c4a0 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c208:	4ab4      	ldr	r2, [pc, #720]	; (800c4dc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d11e      	bne.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c20e:	4ab4      	ldr	r2, [pc, #720]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c210:	23a8      	movs	r3, #168	; 0xa8
 800c212:	58d4      	ldr	r4, [r2, r3]
 800c214:	4db3      	ldr	r5, [pc, #716]	; (800c4e4 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c216:	402c      	ands	r4, r5
 800c218:	50d4      	str	r4, [r2, r3]
 800c21a:	58d5      	ldr	r5, [r2, r3]
 800c21c:	24b0      	movs	r4, #176	; 0xb0
 800c21e:	0324      	lsls	r4, r4, #12
 800c220:	432c      	orrs	r4, r5
 800c222:	50d4      	str	r4, [r2, r3]
 800c224:	e012      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c226:	680b      	ldr	r3, [r1, #0]
 800c228:	4aa7      	ldr	r2, [pc, #668]	; (800c4c8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d011      	beq.n	800c252 <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c22e:	4aa7      	ldr	r2, [pc, #668]	; (800c4cc <RemapAndLinkDMAtoUARTTx+0x310>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d019      	beq.n	800c268 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c234:	4aa6      	ldr	r2, [pc, #664]	; (800c4d0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d022      	beq.n	800c280 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c23a:	4aa6      	ldr	r2, [pc, #664]	; (800c4d4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d02b      	beq.n	800c298 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c240:	4aa5      	ldr	r2, [pc, #660]	; (800c4d8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d033      	beq.n	800c2ae <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c246:	4aa5      	ldr	r2, [pc, #660]	; (800c4dc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d03c      	beq.n	800c2c6 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c24c:	6601      	str	r1, [r0, #96]	; 0x60
 800c24e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c250:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c252:	4aa5      	ldr	r2, [pc, #660]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c254:	23a8      	movs	r3, #168	; 0xa8
 800c256:	58d4      	ldr	r4, [r2, r3]
 800c258:	25f0      	movs	r5, #240	; 0xf0
 800c25a:	43ac      	bics	r4, r5
 800c25c:	50d4      	str	r4, [r2, r3]
 800c25e:	58d4      	ldr	r4, [r2, r3]
 800c260:	3d70      	subs	r5, #112	; 0x70
 800c262:	432c      	orrs	r4, r5
 800c264:	50d4      	str	r4, [r2, r3]
 800c266:	e7f1      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c268:	4a9f      	ldr	r2, [pc, #636]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c26a:	23a8      	movs	r3, #168	; 0xa8
 800c26c:	58d4      	ldr	r4, [r2, r3]
 800c26e:	4d9f      	ldr	r5, [pc, #636]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c270:	402c      	ands	r4, r5
 800c272:	50d4      	str	r4, [r2, r3]
 800c274:	58d5      	ldr	r5, [r2, r3]
 800c276:	2480      	movs	r4, #128	; 0x80
 800c278:	0224      	lsls	r4, r4, #8
 800c27a:	432c      	orrs	r4, r5
 800c27c:	50d4      	str	r4, [r2, r3]
 800c27e:	e7e5      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c280:	4a99      	ldr	r2, [pc, #612]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c282:	23a8      	movs	r3, #168	; 0xa8
 800c284:	58d4      	ldr	r4, [r2, r3]
 800c286:	4d9a      	ldr	r5, [pc, #616]	; (800c4f0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c288:	402c      	ands	r4, r5
 800c28a:	50d4      	str	r4, [r2, r3]
 800c28c:	58d5      	ldr	r5, [r2, r3]
 800c28e:	2480      	movs	r4, #128	; 0x80
 800c290:	0524      	lsls	r4, r4, #20
 800c292:	432c      	orrs	r4, r5
 800c294:	50d4      	str	r4, [r2, r3]
 800c296:	e7d9      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c298:	4a91      	ldr	r2, [pc, #580]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c29a:	23a8      	movs	r3, #168	; 0xa8
 800c29c:	58d4      	ldr	r4, [r2, r3]
 800c29e:	250f      	movs	r5, #15
 800c2a0:	43ac      	bics	r4, r5
 800c2a2:	50d4      	str	r4, [r2, r3]
 800c2a4:	58d4      	ldr	r4, [r2, r3]
 800c2a6:	3d07      	subs	r5, #7
 800c2a8:	432c      	orrs	r4, r5
 800c2aa:	50d4      	str	r4, [r2, r3]
 800c2ac:	e7ce      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c2ae:	4a8c      	ldr	r2, [pc, #560]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c2b0:	23a8      	movs	r3, #168	; 0xa8
 800c2b2:	58d4      	ldr	r4, [r2, r3]
 800c2b4:	4d8d      	ldr	r5, [pc, #564]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c2b6:	402c      	ands	r4, r5
 800c2b8:	50d4      	str	r4, [r2, r3]
 800c2ba:	58d5      	ldr	r5, [r2, r3]
 800c2bc:	2480      	movs	r4, #128	; 0x80
 800c2be:	0224      	lsls	r4, r4, #8
 800c2c0:	432c      	orrs	r4, r5
 800c2c2:	50d4      	str	r4, [r2, r3]
 800c2c4:	e7c2      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c2c6:	4a86      	ldr	r2, [pc, #536]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c2c8:	23a8      	movs	r3, #168	; 0xa8
 800c2ca:	58d4      	ldr	r4, [r2, r3]
 800c2cc:	4d85      	ldr	r5, [pc, #532]	; (800c4e4 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c2ce:	402c      	ands	r4, r5
 800c2d0:	50d4      	str	r4, [r2, r3]
 800c2d2:	58d5      	ldr	r5, [r2, r3]
 800c2d4:	2480      	movs	r4, #128	; 0x80
 800c2d6:	0324      	lsls	r4, r4, #12
 800c2d8:	432c      	orrs	r4, r5
 800c2da:	50d4      	str	r4, [r2, r3]
 800c2dc:	e7b6      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c2de:	680b      	ldr	r3, [r1, #0]
 800c2e0:	4a79      	ldr	r2, [pc, #484]	; (800c4c8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d01a      	beq.n	800c31c <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c2e6:	4a79      	ldr	r2, [pc, #484]	; (800c4cc <RemapAndLinkDMAtoUARTTx+0x310>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d022      	beq.n	800c332 <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c2ec:	4a78      	ldr	r2, [pc, #480]	; (800c4d0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d02b      	beq.n	800c34a <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c2f2:	4a78      	ldr	r2, [pc, #480]	; (800c4d4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d034      	beq.n	800c362 <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c2f8:	4a77      	ldr	r2, [pc, #476]	; (800c4d8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d03c      	beq.n	800c378 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c2fe:	4a77      	ldr	r2, [pc, #476]	; (800c4dc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d1a3      	bne.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c304:	4a76      	ldr	r2, [pc, #472]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c306:	23a8      	movs	r3, #168	; 0xa8
 800c308:	58d4      	ldr	r4, [r2, r3]
 800c30a:	4d76      	ldr	r5, [pc, #472]	; (800c4e4 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c30c:	402c      	ands	r4, r5
 800c30e:	50d4      	str	r4, [r2, r3]
 800c310:	58d5      	ldr	r5, [r2, r3]
 800c312:	2490      	movs	r4, #144	; 0x90
 800c314:	0324      	lsls	r4, r4, #12
 800c316:	432c      	orrs	r4, r5
 800c318:	50d4      	str	r4, [r2, r3]
 800c31a:	e797      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c31c:	4a72      	ldr	r2, [pc, #456]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c31e:	23a8      	movs	r3, #168	; 0xa8
 800c320:	58d4      	ldr	r4, [r2, r3]
 800c322:	25f0      	movs	r5, #240	; 0xf0
 800c324:	43ac      	bics	r4, r5
 800c326:	50d4      	str	r4, [r2, r3]
 800c328:	58d4      	ldr	r4, [r2, r3]
 800c32a:	3d60      	subs	r5, #96	; 0x60
 800c32c:	432c      	orrs	r4, r5
 800c32e:	50d4      	str	r4, [r2, r3]
 800c330:	e78c      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c332:	4a6d      	ldr	r2, [pc, #436]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c334:	23a8      	movs	r3, #168	; 0xa8
 800c336:	58d4      	ldr	r4, [r2, r3]
 800c338:	4d6c      	ldr	r5, [pc, #432]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c33a:	402c      	ands	r4, r5
 800c33c:	50d4      	str	r4, [r2, r3]
 800c33e:	58d5      	ldr	r5, [r2, r3]
 800c340:	2490      	movs	r4, #144	; 0x90
 800c342:	0224      	lsls	r4, r4, #8
 800c344:	432c      	orrs	r4, r5
 800c346:	50d4      	str	r4, [r2, r3]
 800c348:	e780      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c34a:	4a67      	ldr	r2, [pc, #412]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c34c:	23a8      	movs	r3, #168	; 0xa8
 800c34e:	58d4      	ldr	r4, [r2, r3]
 800c350:	4d67      	ldr	r5, [pc, #412]	; (800c4f0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c352:	402c      	ands	r4, r5
 800c354:	50d4      	str	r4, [r2, r3]
 800c356:	58d5      	ldr	r5, [r2, r3]
 800c358:	2490      	movs	r4, #144	; 0x90
 800c35a:	0524      	lsls	r4, r4, #20
 800c35c:	432c      	orrs	r4, r5
 800c35e:	50d4      	str	r4, [r2, r3]
 800c360:	e774      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c362:	4a5f      	ldr	r2, [pc, #380]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c364:	23a8      	movs	r3, #168	; 0xa8
 800c366:	58d4      	ldr	r4, [r2, r3]
 800c368:	250f      	movs	r5, #15
 800c36a:	43ac      	bics	r4, r5
 800c36c:	50d4      	str	r4, [r2, r3]
 800c36e:	58d4      	ldr	r4, [r2, r3]
 800c370:	3d06      	subs	r5, #6
 800c372:	432c      	orrs	r4, r5
 800c374:	50d4      	str	r4, [r2, r3]
 800c376:	e769      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c378:	4a59      	ldr	r2, [pc, #356]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c37a:	23a8      	movs	r3, #168	; 0xa8
 800c37c:	58d4      	ldr	r4, [r2, r3]
 800c37e:	4d5b      	ldr	r5, [pc, #364]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c380:	402c      	ands	r4, r5
 800c382:	50d4      	str	r4, [r2, r3]
 800c384:	58d5      	ldr	r5, [r2, r3]
 800c386:	2490      	movs	r4, #144	; 0x90
 800c388:	0224      	lsls	r4, r4, #8
 800c38a:	432c      	orrs	r4, r5
 800c38c:	50d4      	str	r4, [r2, r3]
 800c38e:	e75d      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c390:	680b      	ldr	r3, [r1, #0]
 800c392:	4a4d      	ldr	r2, [pc, #308]	; (800c4c8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d01b      	beq.n	800c3d0 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c398:	4a4c      	ldr	r2, [pc, #304]	; (800c4cc <RemapAndLinkDMAtoUARTTx+0x310>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d023      	beq.n	800c3e6 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c39e:	4a4c      	ldr	r2, [pc, #304]	; (800c4d0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d02c      	beq.n	800c3fe <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c3a4:	4a4b      	ldr	r2, [pc, #300]	; (800c4d4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d035      	beq.n	800c416 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c3aa:	4a4b      	ldr	r2, [pc, #300]	; (800c4d8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d03d      	beq.n	800c42c <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c3b0:	4a4a      	ldr	r2, [pc, #296]	; (800c4dc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d000      	beq.n	800c3b8 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c3b6:	e749      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c3b8:	4a49      	ldr	r2, [pc, #292]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c3ba:	23a8      	movs	r3, #168	; 0xa8
 800c3bc:	58d4      	ldr	r4, [r2, r3]
 800c3be:	4d49      	ldr	r5, [pc, #292]	; (800c4e4 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c3c0:	402c      	ands	r4, r5
 800c3c2:	50d4      	str	r4, [r2, r3]
 800c3c4:	58d5      	ldr	r5, [r2, r3]
 800c3c6:	24a0      	movs	r4, #160	; 0xa0
 800c3c8:	0324      	lsls	r4, r4, #12
 800c3ca:	432c      	orrs	r4, r5
 800c3cc:	50d4      	str	r4, [r2, r3]
 800c3ce:	e73d      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c3d0:	4a45      	ldr	r2, [pc, #276]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c3d2:	23a8      	movs	r3, #168	; 0xa8
 800c3d4:	58d4      	ldr	r4, [r2, r3]
 800c3d6:	25f0      	movs	r5, #240	; 0xf0
 800c3d8:	43ac      	bics	r4, r5
 800c3da:	50d4      	str	r4, [r2, r3]
 800c3dc:	58d4      	ldr	r4, [r2, r3]
 800c3de:	3d50      	subs	r5, #80	; 0x50
 800c3e0:	432c      	orrs	r4, r5
 800c3e2:	50d4      	str	r4, [r2, r3]
 800c3e4:	e732      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c3e6:	4a40      	ldr	r2, [pc, #256]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c3e8:	23a8      	movs	r3, #168	; 0xa8
 800c3ea:	58d4      	ldr	r4, [r2, r3]
 800c3ec:	4d3f      	ldr	r5, [pc, #252]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c3ee:	402c      	ands	r4, r5
 800c3f0:	50d4      	str	r4, [r2, r3]
 800c3f2:	58d5      	ldr	r5, [r2, r3]
 800c3f4:	24a0      	movs	r4, #160	; 0xa0
 800c3f6:	0224      	lsls	r4, r4, #8
 800c3f8:	432c      	orrs	r4, r5
 800c3fa:	50d4      	str	r4, [r2, r3]
 800c3fc:	e726      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c3fe:	4a3a      	ldr	r2, [pc, #232]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c400:	23a8      	movs	r3, #168	; 0xa8
 800c402:	58d4      	ldr	r4, [r2, r3]
 800c404:	4d3a      	ldr	r5, [pc, #232]	; (800c4f0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c406:	402c      	ands	r4, r5
 800c408:	50d4      	str	r4, [r2, r3]
 800c40a:	58d5      	ldr	r5, [r2, r3]
 800c40c:	24a0      	movs	r4, #160	; 0xa0
 800c40e:	0524      	lsls	r4, r4, #20
 800c410:	432c      	orrs	r4, r5
 800c412:	50d4      	str	r4, [r2, r3]
 800c414:	e71a      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c416:	4a32      	ldr	r2, [pc, #200]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c418:	23a8      	movs	r3, #168	; 0xa8
 800c41a:	58d4      	ldr	r4, [r2, r3]
 800c41c:	250f      	movs	r5, #15
 800c41e:	43ac      	bics	r4, r5
 800c420:	50d4      	str	r4, [r2, r3]
 800c422:	58d4      	ldr	r4, [r2, r3]
 800c424:	3d05      	subs	r5, #5
 800c426:	432c      	orrs	r4, r5
 800c428:	50d4      	str	r4, [r2, r3]
 800c42a:	e70f      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c42c:	4a2c      	ldr	r2, [pc, #176]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c42e:	23a8      	movs	r3, #168	; 0xa8
 800c430:	58d4      	ldr	r4, [r2, r3]
 800c432:	4d2e      	ldr	r5, [pc, #184]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c434:	402c      	ands	r4, r5
 800c436:	50d4      	str	r4, [r2, r3]
 800c438:	58d5      	ldr	r5, [r2, r3]
 800c43a:	24a0      	movs	r4, #160	; 0xa0
 800c43c:	0224      	lsls	r4, r4, #8
 800c43e:	432c      	orrs	r4, r5
 800c440:	50d4      	str	r4, [r2, r3]
 800c442:	e703      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c444:	4a28      	ldr	r2, [pc, #160]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c446:	23a8      	movs	r3, #168	; 0xa8
 800c448:	58d4      	ldr	r4, [r2, r3]
 800c44a:	25f0      	movs	r5, #240	; 0xf0
 800c44c:	43ac      	bics	r4, r5
 800c44e:	50d4      	str	r4, [r2, r3]
 800c450:	58d4      	ldr	r4, [r2, r3]
 800c452:	3d40      	subs	r5, #64	; 0x40
 800c454:	432c      	orrs	r4, r5
 800c456:	50d4      	str	r4, [r2, r3]
 800c458:	e6f8      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c45a:	4a23      	ldr	r2, [pc, #140]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c45c:	23a8      	movs	r3, #168	; 0xa8
 800c45e:	58d4      	ldr	r4, [r2, r3]
 800c460:	4d22      	ldr	r5, [pc, #136]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c462:	402c      	ands	r4, r5
 800c464:	50d4      	str	r4, [r2, r3]
 800c466:	58d5      	ldr	r5, [r2, r3]
 800c468:	24b0      	movs	r4, #176	; 0xb0
 800c46a:	0224      	lsls	r4, r4, #8
 800c46c:	432c      	orrs	r4, r5
 800c46e:	50d4      	str	r4, [r2, r3]
 800c470:	e6ec      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c472:	4a1d      	ldr	r2, [pc, #116]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c474:	23a8      	movs	r3, #168	; 0xa8
 800c476:	58d4      	ldr	r4, [r2, r3]
 800c478:	4d1d      	ldr	r5, [pc, #116]	; (800c4f0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c47a:	402c      	ands	r4, r5
 800c47c:	50d4      	str	r4, [r2, r3]
 800c47e:	58d5      	ldr	r5, [r2, r3]
 800c480:	24b0      	movs	r4, #176	; 0xb0
 800c482:	0524      	lsls	r4, r4, #20
 800c484:	432c      	orrs	r4, r5
 800c486:	50d4      	str	r4, [r2, r3]
 800c488:	e6e0      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c48a:	4a15      	ldr	r2, [pc, #84]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c48c:	23a8      	movs	r3, #168	; 0xa8
 800c48e:	58d4      	ldr	r4, [r2, r3]
 800c490:	250f      	movs	r5, #15
 800c492:	43ac      	bics	r4, r5
 800c494:	50d4      	str	r4, [r2, r3]
 800c496:	58d4      	ldr	r4, [r2, r3]
 800c498:	3d04      	subs	r5, #4
 800c49a:	432c      	orrs	r4, r5
 800c49c:	50d4      	str	r4, [r2, r3]
 800c49e:	e6d5      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c4a0:	4a0f      	ldr	r2, [pc, #60]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c4a2:	23a8      	movs	r3, #168	; 0xa8
 800c4a4:	58d4      	ldr	r4, [r2, r3]
 800c4a6:	4d11      	ldr	r5, [pc, #68]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c4a8:	402c      	ands	r4, r5
 800c4aa:	50d4      	str	r4, [r2, r3]
 800c4ac:	58d5      	ldr	r5, [r2, r3]
 800c4ae:	24b0      	movs	r4, #176	; 0xb0
 800c4b0:	0224      	lsls	r4, r4, #8
 800c4b2:	432c      	orrs	r4, r5
 800c4b4:	50d4      	str	r4, [r2, r3]
 800c4b6:	e6c9      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
 800c4b8:	40013800 	.word	0x40013800
 800c4bc:	40004400 	.word	0x40004400
 800c4c0:	40004800 	.word	0x40004800
 800c4c4:	40004c00 	.word	0x40004c00
 800c4c8:	4002001c 	.word	0x4002001c
 800c4cc:	40020044 	.word	0x40020044
 800c4d0:	40020080 	.word	0x40020080
 800c4d4:	40020408 	.word	0x40020408
 800c4d8:	40020444 	.word	0x40020444
 800c4dc:	40020458 	.word	0x40020458
 800c4e0:	40020400 	.word	0x40020400
 800c4e4:	fff0ffff 	.word	0xfff0ffff
 800c4e8:	40020000 	.word	0x40020000
 800c4ec:	ffff0fff 	.word	0xffff0fff
 800c4f0:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c4f4:	4ab9      	ldr	r2, [pc, #740]	; (800c7dc <RemapAndLinkDMAtoUARTTx+0x620>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d159      	bne.n	800c5ae <RemapAndLinkDMAtoUARTTx+0x3f2>
 800c4fa:	680b      	ldr	r3, [r1, #0]
 800c4fc:	4ab8      	ldr	r2, [pc, #736]	; (800c7e0 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d01b      	beq.n	800c53a <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c502:	4ab8      	ldr	r2, [pc, #736]	; (800c7e4 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d023      	beq.n	800c550 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c508:	4ab7      	ldr	r2, [pc, #732]	; (800c7e8 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d02c      	beq.n	800c568 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c50e:	4ab7      	ldr	r2, [pc, #732]	; (800c7ec <RemapAndLinkDMAtoUARTTx+0x630>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d035      	beq.n	800c580 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c514:	4ab6      	ldr	r2, [pc, #728]	; (800c7f0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d03d      	beq.n	800c596 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c51a:	4ab6      	ldr	r2, [pc, #728]	; (800c7f4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d000      	beq.n	800c522 <RemapAndLinkDMAtoUARTTx+0x366>
 800c520:	e694      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c522:	4ab5      	ldr	r2, [pc, #724]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c524:	23a8      	movs	r3, #168	; 0xa8
 800c526:	58d4      	ldr	r4, [r2, r3]
 800c528:	4db4      	ldr	r5, [pc, #720]	; (800c7fc <RemapAndLinkDMAtoUARTTx+0x640>)
 800c52a:	402c      	ands	r4, r5
 800c52c:	50d4      	str	r4, [r2, r3]
 800c52e:	58d5      	ldr	r5, [r2, r3]
 800c530:	24c0      	movs	r4, #192	; 0xc0
 800c532:	0324      	lsls	r4, r4, #12
 800c534:	432c      	orrs	r4, r5
 800c536:	50d4      	str	r4, [r2, r3]
 800c538:	e688      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c53a:	4ab1      	ldr	r2, [pc, #708]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c53c:	23a8      	movs	r3, #168	; 0xa8
 800c53e:	58d4      	ldr	r4, [r2, r3]
 800c540:	25f0      	movs	r5, #240	; 0xf0
 800c542:	43ac      	bics	r4, r5
 800c544:	50d4      	str	r4, [r2, r3]
 800c546:	58d4      	ldr	r4, [r2, r3]
 800c548:	3d30      	subs	r5, #48	; 0x30
 800c54a:	432c      	orrs	r4, r5
 800c54c:	50d4      	str	r4, [r2, r3]
 800c54e:	e67d      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c550:	4aab      	ldr	r2, [pc, #684]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c552:	23a8      	movs	r3, #168	; 0xa8
 800c554:	58d4      	ldr	r4, [r2, r3]
 800c556:	4dab      	ldr	r5, [pc, #684]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c558:	402c      	ands	r4, r5
 800c55a:	50d4      	str	r4, [r2, r3]
 800c55c:	58d5      	ldr	r5, [r2, r3]
 800c55e:	24c0      	movs	r4, #192	; 0xc0
 800c560:	0224      	lsls	r4, r4, #8
 800c562:	432c      	orrs	r4, r5
 800c564:	50d4      	str	r4, [r2, r3]
 800c566:	e671      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c568:	4aa5      	ldr	r2, [pc, #660]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c56a:	23a8      	movs	r3, #168	; 0xa8
 800c56c:	58d4      	ldr	r4, [r2, r3]
 800c56e:	4da6      	ldr	r5, [pc, #664]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c570:	402c      	ands	r4, r5
 800c572:	50d4      	str	r4, [r2, r3]
 800c574:	58d5      	ldr	r5, [r2, r3]
 800c576:	24c0      	movs	r4, #192	; 0xc0
 800c578:	0524      	lsls	r4, r4, #20
 800c57a:	432c      	orrs	r4, r5
 800c57c:	50d4      	str	r4, [r2, r3]
 800c57e:	e665      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c580:	4a9d      	ldr	r2, [pc, #628]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c582:	23a8      	movs	r3, #168	; 0xa8
 800c584:	58d4      	ldr	r4, [r2, r3]
 800c586:	250f      	movs	r5, #15
 800c588:	43ac      	bics	r4, r5
 800c58a:	50d4      	str	r4, [r2, r3]
 800c58c:	58d4      	ldr	r4, [r2, r3]
 800c58e:	3d03      	subs	r5, #3
 800c590:	432c      	orrs	r4, r5
 800c592:	50d4      	str	r4, [r2, r3]
 800c594:	e65a      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c596:	4a98      	ldr	r2, [pc, #608]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c598:	23a8      	movs	r3, #168	; 0xa8
 800c59a:	58d4      	ldr	r4, [r2, r3]
 800c59c:	4d99      	ldr	r5, [pc, #612]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c59e:	402c      	ands	r4, r5
 800c5a0:	50d4      	str	r4, [r2, r3]
 800c5a2:	58d5      	ldr	r5, [r2, r3]
 800c5a4:	24c0      	movs	r4, #192	; 0xc0
 800c5a6:	0224      	lsls	r4, r4, #8
 800c5a8:	432c      	orrs	r4, r5
 800c5aa:	50d4      	str	r4, [r2, r3]
 800c5ac:	e64e      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c5ae:	4a97      	ldr	r2, [pc, #604]	; (800c80c <RemapAndLinkDMAtoUARTTx+0x650>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d159      	bne.n	800c668 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800c5b4:	680b      	ldr	r3, [r1, #0]
 800c5b6:	4a8a      	ldr	r2, [pc, #552]	; (800c7e0 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d01b      	beq.n	800c5f4 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c5bc:	4a89      	ldr	r2, [pc, #548]	; (800c7e4 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d023      	beq.n	800c60a <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c5c2:	4a89      	ldr	r2, [pc, #548]	; (800c7e8 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d02c      	beq.n	800c622 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c5c8:	4a88      	ldr	r2, [pc, #544]	; (800c7ec <RemapAndLinkDMAtoUARTTx+0x630>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d035      	beq.n	800c63a <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c5ce:	4a88      	ldr	r2, [pc, #544]	; (800c7f0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d03d      	beq.n	800c650 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c5d4:	4a87      	ldr	r2, [pc, #540]	; (800c7f4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d000      	beq.n	800c5dc <RemapAndLinkDMAtoUARTTx+0x420>
 800c5da:	e637      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c5dc:	4a86      	ldr	r2, [pc, #536]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c5de:	23a8      	movs	r3, #168	; 0xa8
 800c5e0:	58d4      	ldr	r4, [r2, r3]
 800c5e2:	4d86      	ldr	r5, [pc, #536]	; (800c7fc <RemapAndLinkDMAtoUARTTx+0x640>)
 800c5e4:	402c      	ands	r4, r5
 800c5e6:	50d4      	str	r4, [r2, r3]
 800c5e8:	58d5      	ldr	r5, [r2, r3]
 800c5ea:	24d0      	movs	r4, #208	; 0xd0
 800c5ec:	0324      	lsls	r4, r4, #12
 800c5ee:	432c      	orrs	r4, r5
 800c5f0:	50d4      	str	r4, [r2, r3]
 800c5f2:	e62b      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c5f4:	4a82      	ldr	r2, [pc, #520]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5f6:	23a8      	movs	r3, #168	; 0xa8
 800c5f8:	58d4      	ldr	r4, [r2, r3]
 800c5fa:	25f0      	movs	r5, #240	; 0xf0
 800c5fc:	43ac      	bics	r4, r5
 800c5fe:	50d4      	str	r4, [r2, r3]
 800c600:	58d4      	ldr	r4, [r2, r3]
 800c602:	3d20      	subs	r5, #32
 800c604:	432c      	orrs	r4, r5
 800c606:	50d4      	str	r4, [r2, r3]
 800c608:	e620      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c60a:	4a7d      	ldr	r2, [pc, #500]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c60c:	23a8      	movs	r3, #168	; 0xa8
 800c60e:	58d4      	ldr	r4, [r2, r3]
 800c610:	4d7c      	ldr	r5, [pc, #496]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c612:	402c      	ands	r4, r5
 800c614:	50d4      	str	r4, [r2, r3]
 800c616:	58d5      	ldr	r5, [r2, r3]
 800c618:	24d0      	movs	r4, #208	; 0xd0
 800c61a:	0224      	lsls	r4, r4, #8
 800c61c:	432c      	orrs	r4, r5
 800c61e:	50d4      	str	r4, [r2, r3]
 800c620:	e614      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c622:	4a77      	ldr	r2, [pc, #476]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c624:	23a8      	movs	r3, #168	; 0xa8
 800c626:	58d4      	ldr	r4, [r2, r3]
 800c628:	4d77      	ldr	r5, [pc, #476]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c62a:	402c      	ands	r4, r5
 800c62c:	50d4      	str	r4, [r2, r3]
 800c62e:	58d5      	ldr	r5, [r2, r3]
 800c630:	24d0      	movs	r4, #208	; 0xd0
 800c632:	0524      	lsls	r4, r4, #20
 800c634:	432c      	orrs	r4, r5
 800c636:	50d4      	str	r4, [r2, r3]
 800c638:	e608      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c63a:	4a6f      	ldr	r2, [pc, #444]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c63c:	23a8      	movs	r3, #168	; 0xa8
 800c63e:	58d4      	ldr	r4, [r2, r3]
 800c640:	250f      	movs	r5, #15
 800c642:	43ac      	bics	r4, r5
 800c644:	50d4      	str	r4, [r2, r3]
 800c646:	58d4      	ldr	r4, [r2, r3]
 800c648:	3d02      	subs	r5, #2
 800c64a:	432c      	orrs	r4, r5
 800c64c:	50d4      	str	r4, [r2, r3]
 800c64e:	e5fd      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c650:	4a69      	ldr	r2, [pc, #420]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c652:	23a8      	movs	r3, #168	; 0xa8
 800c654:	58d4      	ldr	r4, [r2, r3]
 800c656:	4d6b      	ldr	r5, [pc, #428]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c658:	402c      	ands	r4, r5
 800c65a:	50d4      	str	r4, [r2, r3]
 800c65c:	58d5      	ldr	r5, [r2, r3]
 800c65e:	24d0      	movs	r4, #208	; 0xd0
 800c660:	0224      	lsls	r4, r4, #8
 800c662:	432c      	orrs	r4, r5
 800c664:	50d4      	str	r4, [r2, r3]
 800c666:	e5f1      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c668:	4a69      	ldr	r2, [pc, #420]	; (800c810 <RemapAndLinkDMAtoUARTTx+0x654>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d159      	bne.n	800c722 <RemapAndLinkDMAtoUARTTx+0x566>
 800c66e:	680b      	ldr	r3, [r1, #0]
 800c670:	4a5b      	ldr	r2, [pc, #364]	; (800c7e0 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d01b      	beq.n	800c6ae <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c676:	4a5b      	ldr	r2, [pc, #364]	; (800c7e4 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d023      	beq.n	800c6c4 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c67c:	4a5a      	ldr	r2, [pc, #360]	; (800c7e8 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d02c      	beq.n	800c6dc <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c682:	4a5a      	ldr	r2, [pc, #360]	; (800c7ec <RemapAndLinkDMAtoUARTTx+0x630>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d035      	beq.n	800c6f4 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c688:	4a59      	ldr	r2, [pc, #356]	; (800c7f0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d03d      	beq.n	800c70a <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c68e:	4a59      	ldr	r2, [pc, #356]	; (800c7f4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d000      	beq.n	800c696 <RemapAndLinkDMAtoUARTTx+0x4da>
 800c694:	e5da      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c696:	4a58      	ldr	r2, [pc, #352]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c698:	23a8      	movs	r3, #168	; 0xa8
 800c69a:	58d4      	ldr	r4, [r2, r3]
 800c69c:	4d57      	ldr	r5, [pc, #348]	; (800c7fc <RemapAndLinkDMAtoUARTTx+0x640>)
 800c69e:	402c      	ands	r4, r5
 800c6a0:	50d4      	str	r4, [r2, r3]
 800c6a2:	58d5      	ldr	r5, [r2, r3]
 800c6a4:	24e0      	movs	r4, #224	; 0xe0
 800c6a6:	0324      	lsls	r4, r4, #12
 800c6a8:	432c      	orrs	r4, r5
 800c6aa:	50d4      	str	r4, [r2, r3]
 800c6ac:	e5ce      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c6ae:	4a54      	ldr	r2, [pc, #336]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6b0:	23a8      	movs	r3, #168	; 0xa8
 800c6b2:	58d4      	ldr	r4, [r2, r3]
 800c6b4:	25f0      	movs	r5, #240	; 0xf0
 800c6b6:	43ac      	bics	r4, r5
 800c6b8:	50d4      	str	r4, [r2, r3]
 800c6ba:	58d4      	ldr	r4, [r2, r3]
 800c6bc:	3d10      	subs	r5, #16
 800c6be:	432c      	orrs	r4, r5
 800c6c0:	50d4      	str	r4, [r2, r3]
 800c6c2:	e5c3      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c6c4:	4a4e      	ldr	r2, [pc, #312]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6c6:	23a8      	movs	r3, #168	; 0xa8
 800c6c8:	58d4      	ldr	r4, [r2, r3]
 800c6ca:	4d4e      	ldr	r5, [pc, #312]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c6cc:	402c      	ands	r4, r5
 800c6ce:	50d4      	str	r4, [r2, r3]
 800c6d0:	58d5      	ldr	r5, [r2, r3]
 800c6d2:	24e0      	movs	r4, #224	; 0xe0
 800c6d4:	0224      	lsls	r4, r4, #8
 800c6d6:	432c      	orrs	r4, r5
 800c6d8:	50d4      	str	r4, [r2, r3]
 800c6da:	e5b7      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c6dc:	4a48      	ldr	r2, [pc, #288]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6de:	23a8      	movs	r3, #168	; 0xa8
 800c6e0:	58d4      	ldr	r4, [r2, r3]
 800c6e2:	4d49      	ldr	r5, [pc, #292]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c6e4:	402c      	ands	r4, r5
 800c6e6:	50d4      	str	r4, [r2, r3]
 800c6e8:	58d5      	ldr	r5, [r2, r3]
 800c6ea:	24e0      	movs	r4, #224	; 0xe0
 800c6ec:	0524      	lsls	r4, r4, #20
 800c6ee:	432c      	orrs	r4, r5
 800c6f0:	50d4      	str	r4, [r2, r3]
 800c6f2:	e5ab      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c6f4:	4a40      	ldr	r2, [pc, #256]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6f6:	23a8      	movs	r3, #168	; 0xa8
 800c6f8:	58d4      	ldr	r4, [r2, r3]
 800c6fa:	250f      	movs	r5, #15
 800c6fc:	43ac      	bics	r4, r5
 800c6fe:	50d4      	str	r4, [r2, r3]
 800c700:	58d4      	ldr	r4, [r2, r3]
 800c702:	3d01      	subs	r5, #1
 800c704:	432c      	orrs	r4, r5
 800c706:	50d4      	str	r4, [r2, r3]
 800c708:	e5a0      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c70a:	4a3b      	ldr	r2, [pc, #236]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c70c:	23a8      	movs	r3, #168	; 0xa8
 800c70e:	58d4      	ldr	r4, [r2, r3]
 800c710:	4d3c      	ldr	r5, [pc, #240]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c712:	402c      	ands	r4, r5
 800c714:	50d4      	str	r4, [r2, r3]
 800c716:	58d5      	ldr	r5, [r2, r3]
 800c718:	24e0      	movs	r4, #224	; 0xe0
 800c71a:	0224      	lsls	r4, r4, #8
 800c71c:	432c      	orrs	r4, r5
 800c71e:	50d4      	str	r4, [r2, r3]
 800c720:	e594      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c722:	4a3c      	ldr	r2, [pc, #240]	; (800c814 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d000      	beq.n	800c72a <RemapAndLinkDMAtoUARTTx+0x56e>
 800c728:	e590      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
 800c72a:	680b      	ldr	r3, [r1, #0]
 800c72c:	4a2c      	ldr	r2, [pc, #176]	; (800c7e0 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d01b      	beq.n	800c76a <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c732:	4a2c      	ldr	r2, [pc, #176]	; (800c7e4 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d022      	beq.n	800c77e <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c738:	4a2b      	ldr	r2, [pc, #172]	; (800c7e8 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d02b      	beq.n	800c796 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c73e:	4a2b      	ldr	r2, [pc, #172]	; (800c7ec <RemapAndLinkDMAtoUARTTx+0x630>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d034      	beq.n	800c7ae <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c744:	4a2a      	ldr	r2, [pc, #168]	; (800c7f0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d03b      	beq.n	800c7c2 <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c74a:	4a2a      	ldr	r2, [pc, #168]	; (800c7f4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d000      	beq.n	800c752 <RemapAndLinkDMAtoUARTTx+0x596>
 800c750:	e57c      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c752:	4a29      	ldr	r2, [pc, #164]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c754:	23a8      	movs	r3, #168	; 0xa8
 800c756:	58d4      	ldr	r4, [r2, r3]
 800c758:	4d28      	ldr	r5, [pc, #160]	; (800c7fc <RemapAndLinkDMAtoUARTTx+0x640>)
 800c75a:	402c      	ands	r4, r5
 800c75c:	50d4      	str	r4, [r2, r3]
 800c75e:	58d5      	ldr	r5, [r2, r3]
 800c760:	24f0      	movs	r4, #240	; 0xf0
 800c762:	0324      	lsls	r4, r4, #12
 800c764:	432c      	orrs	r4, r5
 800c766:	50d4      	str	r4, [r2, r3]
 800c768:	e570      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c76a:	4a25      	ldr	r2, [pc, #148]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c76c:	23a8      	movs	r3, #168	; 0xa8
 800c76e:	58d5      	ldr	r5, [r2, r3]
 800c770:	26f0      	movs	r6, #240	; 0xf0
 800c772:	43b5      	bics	r5, r6
 800c774:	50d5      	str	r5, [r2, r3]
 800c776:	58d4      	ldr	r4, [r2, r3]
 800c778:	4334      	orrs	r4, r6
 800c77a:	50d4      	str	r4, [r2, r3]
 800c77c:	e566      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c77e:	4a20      	ldr	r2, [pc, #128]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c780:	23a8      	movs	r3, #168	; 0xa8
 800c782:	58d4      	ldr	r4, [r2, r3]
 800c784:	4d1f      	ldr	r5, [pc, #124]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c786:	402c      	ands	r4, r5
 800c788:	50d4      	str	r4, [r2, r3]
 800c78a:	58d5      	ldr	r5, [r2, r3]
 800c78c:	24f0      	movs	r4, #240	; 0xf0
 800c78e:	0224      	lsls	r4, r4, #8
 800c790:	432c      	orrs	r4, r5
 800c792:	50d4      	str	r4, [r2, r3]
 800c794:	e55a      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c796:	4a1a      	ldr	r2, [pc, #104]	; (800c800 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c798:	23a8      	movs	r3, #168	; 0xa8
 800c79a:	58d4      	ldr	r4, [r2, r3]
 800c79c:	4d1a      	ldr	r5, [pc, #104]	; (800c808 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c79e:	402c      	ands	r4, r5
 800c7a0:	50d4      	str	r4, [r2, r3]
 800c7a2:	58d5      	ldr	r5, [r2, r3]
 800c7a4:	24f0      	movs	r4, #240	; 0xf0
 800c7a6:	0524      	lsls	r4, r4, #20
 800c7a8:	432c      	orrs	r4, r5
 800c7aa:	50d4      	str	r4, [r2, r3]
 800c7ac:	e54e      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c7ae:	4a12      	ldr	r2, [pc, #72]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c7b0:	23a8      	movs	r3, #168	; 0xa8
 800c7b2:	58d5      	ldr	r5, [r2, r3]
 800c7b4:	260f      	movs	r6, #15
 800c7b6:	43b5      	bics	r5, r6
 800c7b8:	50d5      	str	r5, [r2, r3]
 800c7ba:	58d4      	ldr	r4, [r2, r3]
 800c7bc:	4334      	orrs	r4, r6
 800c7be:	50d4      	str	r4, [r2, r3]
 800c7c0:	e544      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c7c2:	4a0d      	ldr	r2, [pc, #52]	; (800c7f8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c7c4:	23a8      	movs	r3, #168	; 0xa8
 800c7c6:	58d4      	ldr	r4, [r2, r3]
 800c7c8:	4d0e      	ldr	r5, [pc, #56]	; (800c804 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c7ca:	402c      	ands	r4, r5
 800c7cc:	50d4      	str	r4, [r2, r3]
 800c7ce:	58d5      	ldr	r5, [r2, r3]
 800c7d0:	24f0      	movs	r4, #240	; 0xf0
 800c7d2:	0224      	lsls	r4, r4, #8
 800c7d4:	432c      	orrs	r4, r5
 800c7d6:	50d4      	str	r4, [r2, r3]
 800c7d8:	e538      	b.n	800c24c <RemapAndLinkDMAtoUARTTx+0x90>
 800c7da:	46c0      	nop			; (mov r8, r8)
 800c7dc:	40005000 	.word	0x40005000
 800c7e0:	4002001c 	.word	0x4002001c
 800c7e4:	40020044 	.word	0x40020044
 800c7e8:	40020080 	.word	0x40020080
 800c7ec:	40020408 	.word	0x40020408
 800c7f0:	40020444 	.word	0x40020444
 800c7f4:	40020458 	.word	0x40020458
 800c7f8:	40020400 	.word	0x40020400
 800c7fc:	fff0ffff 	.word	0xfff0ffff
 800c800:	40020000 	.word	0x40020000
 800c804:	ffff0fff 	.word	0xffff0fff
 800c808:	f0ffffff 	.word	0xf0ffffff
 800c80c:	40011400 	.word	0x40011400
 800c810:	40011800 	.word	0x40011800
 800c814:	40011c00 	.word	0x40011c00

0800c818 <DMA_MSG_TX_Setup>:
{	
 800c818:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c81a:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <DMA_MSG_TX_Setup+0x38>)
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d012      	beq.n	800c848 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c822:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <DMA_MSG_TX_Setup+0x38>)
 800c824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d010      	beq.n	800c84c <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c82a:	4a09      	ldr	r2, [pc, #36]	; (800c850 <DMA_MSG_TX_Setup+0x38>)
 800c82c:	2394      	movs	r3, #148	; 0x94
 800c82e:	58d3      	ldr	r3, [r2, r3]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d007      	beq.n	800c844 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c834:	0021      	movs	r1, r4
 800c836:	f7ff fcc1 	bl	800c1bc <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c83a:	2100      	movs	r1, #0
 800c83c:	0020      	movs	r0, r4
 800c83e:	f7ff f84f 	bl	800b8e0 <SetupDMAInterrupts>
}
 800c842:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c844:	4c03      	ldr	r4, [pc, #12]	; (800c854 <DMA_MSG_TX_Setup+0x3c>)
 800c846:	e7f5      	b.n	800c834 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c848:	4c01      	ldr	r4, [pc, #4]	; (800c850 <DMA_MSG_TX_Setup+0x38>)
 800c84a:	e7f3      	b.n	800c834 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c84c:	4c02      	ldr	r4, [pc, #8]	; (800c858 <DMA_MSG_TX_Setup+0x40>)
 800c84e:	e7f1      	b.n	800c834 <DMA_MSG_TX_Setup+0x1c>
 800c850:	200018f0 	.word	0x200018f0
 800c854:	20001960 	.word	0x20001960
 800c858:	20001928 	.word	0x20001928

0800c85c <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c85c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c85e:	4807      	ldr	r0, [pc, #28]	; (800c87c <CRC_Init+0x20>)
 800c860:	4b07      	ldr	r3, [pc, #28]	; (800c880 <CRC_Init+0x24>)
 800c862:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c864:	2310      	movs	r3, #16
 800c866:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800c868:	2300      	movs	r3, #0
 800c86a:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c86c:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800c86e:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800c870:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c872:	3303      	adds	r3, #3
 800c874:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c876:	f003 fbbb 	bl	800fff0 <HAL_CRC_Init>
}
 800c87a:	bd10      	pop	{r4, pc}
 800c87c:	20006da0 	.word	0x20006da0
 800c880:	40023000 	.word	0x40023000

0800c884 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c884:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c886:	4a05      	ldr	r2, [pc, #20]	; (800c89c <HAL_CRC_MspInit+0x18>)
 800c888:	6951      	ldr	r1, [r2, #20]
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	4319      	orrs	r1, r3
 800c88e:	6151      	str	r1, [r2, #20]
 800c890:	6952      	ldr	r2, [r2, #20]
 800c892:	4013      	ands	r3, r2
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	9b01      	ldr	r3, [sp, #4]
}
 800c898:	b002      	add	sp, #8
 800c89a:	4770      	bx	lr
 800c89c:	40021000 	.word	0x40021000

0800c8a0 <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	0004      	movs	r4, r0
 800c8a4:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d015      	beq.n	800c8d6 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800c8aa:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	d100      	bne.n	800c8b2 <CalculateCRC8+0x12>
}
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c8b2:	088e      	lsrs	r6, r1, #2
 800c8b4:	0032      	movs	r2, r6
 800c8b6:	0021      	movs	r1, r4
 800c8b8:	4808      	ldr	r0, [pc, #32]	; (800c8dc <CalculateCRC8+0x3c>)
 800c8ba:	f003 fbf6 	bl	80100aa <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800c8be:	07ab      	lsls	r3, r5, #30
 800c8c0:	d101      	bne.n	800c8c6 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c8c2:	b2c0      	uxtb	r0, r0
 800c8c4:	e7f4      	b.n	800c8b0 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800c8c6:	0131      	lsls	r1, r6, #4
 800c8c8:	1861      	adds	r1, r4, r1
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	4803      	ldr	r0, [pc, #12]	; (800c8dc <CalculateCRC8+0x3c>)
 800c8ce:	f003 fbc0 	bl	8010052 <HAL_CRC_Accumulate>
 800c8d2:	b2c0      	uxtb	r0, r0
 800c8d4:	e7ec      	b.n	800c8b0 <CalculateCRC8+0x10>
	return 0;
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	e7ea      	b.n	800c8b0 <CalculateCRC8+0x10>
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	20006da0 	.word	0x20006da0

0800c8e0 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800c8e0:	b500      	push	{lr}
 800c8e2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c8e4:	2380      	movs	r3, #128	; 0x80
 800c8e6:	01db      	lsls	r3, r3, #7
 800c8e8:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8f2:	3303      	adds	r3, #3
 800c8f4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8f6:	a901      	add	r1, sp, #4
 800c8f8:	4802      	ldr	r0, [pc, #8]	; (800c904 <IND_LED_Init+0x24>)
 800c8fa:	f004 fa79 	bl	8010df0 <HAL_GPIO_Init>
}
 800c8fe:	b007      	add	sp, #28
 800c900:	bd00      	pop	{pc}
 800c902:	46c0      	nop			; (mov r8, r8)
 800c904:	48000400 	.word	0x48000400

0800c908 <GPIO_Init>:
{
 800c908:	b500      	push	{lr}
 800c90a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c90c:	4b18      	ldr	r3, [pc, #96]	; (800c970 <GPIO_Init+0x68>)
 800c90e:	6959      	ldr	r1, [r3, #20]
 800c910:	2080      	movs	r0, #128	; 0x80
 800c912:	0300      	lsls	r0, r0, #12
 800c914:	4301      	orrs	r1, r0
 800c916:	6159      	str	r1, [r3, #20]
 800c918:	695a      	ldr	r2, [r3, #20]
 800c91a:	4002      	ands	r2, r0
 800c91c:	9201      	str	r2, [sp, #4]
 800c91e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c920:	6959      	ldr	r1, [r3, #20]
 800c922:	2080      	movs	r0, #128	; 0x80
 800c924:	0280      	lsls	r0, r0, #10
 800c926:	4301      	orrs	r1, r0
 800c928:	6159      	str	r1, [r3, #20]
 800c92a:	695a      	ldr	r2, [r3, #20]
 800c92c:	4002      	ands	r2, r0
 800c92e:	9202      	str	r2, [sp, #8]
 800c930:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c932:	6959      	ldr	r1, [r3, #20]
 800c934:	2080      	movs	r0, #128	; 0x80
 800c936:	0340      	lsls	r0, r0, #13
 800c938:	4301      	orrs	r1, r0
 800c93a:	6159      	str	r1, [r3, #20]
 800c93c:	695a      	ldr	r2, [r3, #20]
 800c93e:	4002      	ands	r2, r0
 800c940:	9203      	str	r2, [sp, #12]
 800c942:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c944:	6959      	ldr	r1, [r3, #20]
 800c946:	2080      	movs	r0, #128	; 0x80
 800c948:	02c0      	lsls	r0, r0, #11
 800c94a:	4301      	orrs	r1, r0
 800c94c:	6159      	str	r1, [r3, #20]
 800c94e:	695a      	ldr	r2, [r3, #20]
 800c950:	4002      	ands	r2, r0
 800c952:	9204      	str	r2, [sp, #16]
 800c954:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c956:	695a      	ldr	r2, [r3, #20]
 800c958:	2180      	movs	r1, #128	; 0x80
 800c95a:	03c9      	lsls	r1, r1, #15
 800c95c:	430a      	orrs	r2, r1
 800c95e:	615a      	str	r2, [r3, #20]
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	400b      	ands	r3, r1
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c968:	f7ff ffba 	bl	800c8e0 <IND_LED_Init>
}
 800c96c:	b007      	add	sp, #28
 800c96e:	bd00      	pop	{pc}
 800c970:	40021000 	.word	0x40021000

0800c974 <RS485_DE_RE_Init>:

//-- Configure MAX14840EASA+ \RE and DE
void RS485_DE_RE_Init(void)
{
 800c974:	b500      	push	{lr}
 800c976:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c978:	2301      	movs	r3, #1
 800c97a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c97c:	2300      	movs	r3, #0
 800c97e:	9303      	str	r3, [sp, #12]
	
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c980:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = RS485_RE_DE_PIN;
 800c982:	2380      	movs	r3, #128	; 0x80
 800c984:	015b      	lsls	r3, r3, #5
 800c986:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(RS485_RE_DE_PORT, &GPIO_InitStruct);
 800c988:	2090      	movs	r0, #144	; 0x90
 800c98a:	a901      	add	r1, sp, #4
 800c98c:	05c0      	lsls	r0, r0, #23
 800c98e:	f004 fa2f 	bl	8010df0 <HAL_GPIO_Init>
	
}
 800c992:	b007      	add	sp, #28
 800c994:	bd00      	pop	{pc}
	...

0800c998 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	000e      	movs	r6, r1
 800c99c:	0015      	movs	r5, r2
 800c99e:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c9a0:	f000 fdb6 	bl	800d510 <GetUart>
	
	if (huart == &huart1) 
 800c9a4:	4b2b      	ldr	r3, [pc, #172]	; (800ca54 <GetPortGPIOs+0xbc>)
 800c9a6:	4298      	cmp	r0, r3
 800c9a8:	d01a      	beq.n	800c9e0 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c9aa:	4b2b      	ldr	r3, [pc, #172]	; (800ca58 <GetPortGPIOs+0xc0>)
 800c9ac:	4298      	cmp	r0, r3
 800c9ae:	d025      	beq.n	800c9fc <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c9b0:	4b2a      	ldr	r3, [pc, #168]	; (800ca5c <GetPortGPIOs+0xc4>)
 800c9b2:	4298      	cmp	r0, r3
 800c9b4:	d02d      	beq.n	800ca12 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ca60 <GetPortGPIOs+0xc8>)
 800c9b8:	4298      	cmp	r0, r3
 800c9ba:	d036      	beq.n	800ca2a <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c9bc:	4b29      	ldr	r3, [pc, #164]	; (800ca64 <GetPortGPIOs+0xcc>)
 800c9be:	4298      	cmp	r0, r3
 800c9c0:	d03e      	beq.n	800ca40 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c9c2:	4a29      	ldr	r2, [pc, #164]	; (800ca68 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c9c4:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800c9c6:	4290      	cmp	r0, r2
 800c9c8:	d116      	bne.n	800c9f8 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c9ca:	2390      	movs	r3, #144	; 0x90
 800c9cc:	05db      	lsls	r3, r3, #23
 800c9ce:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c9d0:	2210      	movs	r2, #16
 800c9d2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c9d4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c9d6:	2320      	movs	r3, #32
 800c9d8:	9a04      	ldr	r2, [sp, #16]
 800c9da:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e00b      	b.n	800c9f8 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c9e0:	2390      	movs	r3, #144	; 0x90
 800c9e2:	05db      	lsls	r3, r3, #23
 800c9e4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c9e6:	2280      	movs	r2, #128	; 0x80
 800c9e8:	0092      	lsls	r2, r2, #2
 800c9ea:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c9ec:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c9ee:	2380      	movs	r3, #128	; 0x80
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	9a04      	ldr	r2, [sp, #16]
 800c9f4:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c9f6:	2300      	movs	r3, #0
	
	return result;	
}
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c9fc:	2390      	movs	r3, #144	; 0x90
 800c9fe:	05db      	lsls	r3, r3, #23
 800ca00:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800ca02:	2204      	movs	r2, #4
 800ca04:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800ca06:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800ca08:	2308      	movs	r3, #8
 800ca0a:	9a04      	ldr	r2, [sp, #16]
 800ca0c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e7f2      	b.n	800c9f8 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800ca12:	4b16      	ldr	r3, [pc, #88]	; (800ca6c <GetPortGPIOs+0xd4>)
 800ca14:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800ca16:	2280      	movs	r2, #128	; 0x80
 800ca18:	00d2      	lsls	r2, r2, #3
 800ca1a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800ca1c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800ca1e:	2380      	movs	r3, #128	; 0x80
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	9a04      	ldr	r2, [sp, #16]
 800ca24:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	e7e6      	b.n	800c9f8 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800ca2a:	2390      	movs	r3, #144	; 0x90
 800ca2c:	05db      	lsls	r3, r3, #23
 800ca2e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800ca30:	2201      	movs	r2, #1
 800ca32:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800ca34:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800ca36:	2302      	movs	r3, #2
 800ca38:	9a04      	ldr	r2, [sp, #16]
 800ca3a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e7db      	b.n	800c9f8 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800ca40:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <GetPortGPIOs+0xd4>)
 800ca42:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800ca44:	2208      	movs	r2, #8
 800ca46:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800ca48:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800ca4a:	2310      	movs	r3, #16
 800ca4c:	9a04      	ldr	r2, [sp, #16]
 800ca4e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	e7d1      	b.n	800c9f8 <GetPortGPIOs+0x60>
 800ca54:	20006bd0 	.word	0x20006bd0
 800ca58:	20006d30 	.word	0x20006d30
 800ca5c:	20006aec 	.word	0x20006aec
 800ca60:	20006cbc 	.word	0x20006cbc
 800ca64:	20006b60 	.word	0x20006b60
 800ca68:	20006c4c 	.word	0x20006c4c
 800ca6c:	48000400 	.word	0x48000400

0800ca70 <IsFactoryReset>:
{
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800ca74:	4b39      	ldr	r3, [pc, #228]	; (800cb5c <IsFactoryReset+0xec>)
 800ca76:	6959      	ldr	r1, [r3, #20]
 800ca78:	2080      	movs	r0, #128	; 0x80
 800ca7a:	0280      	lsls	r0, r0, #10
 800ca7c:	4301      	orrs	r1, r0
 800ca7e:	6159      	str	r1, [r3, #20]
 800ca80:	695a      	ldr	r2, [r3, #20]
 800ca82:	4002      	ands	r2, r0
 800ca84:	9203      	str	r2, [sp, #12]
 800ca86:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ca88:	6959      	ldr	r1, [r3, #20]
 800ca8a:	2080      	movs	r0, #128	; 0x80
 800ca8c:	02c0      	lsls	r0, r0, #11
 800ca8e:	4301      	orrs	r1, r0
 800ca90:	6159      	str	r1, [r3, #20]
 800ca92:	695a      	ldr	r2, [r3, #20]
 800ca94:	4002      	ands	r2, r0
 800ca96:	9204      	str	r2, [sp, #16]
 800ca98:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800ca9a:	6959      	ldr	r1, [r3, #20]
 800ca9c:	2080      	movs	r0, #128	; 0x80
 800ca9e:	0300      	lsls	r0, r0, #12
 800caa0:	4301      	orrs	r1, r0
 800caa2:	6159      	str	r1, [r3, #20]
 800caa4:	695a      	ldr	r2, [r3, #20]
 800caa6:	4002      	ands	r2, r0
 800caa8:	9205      	str	r2, [sp, #20]
 800caaa:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800caac:	695a      	ldr	r2, [r3, #20]
 800caae:	2180      	movs	r1, #128	; 0x80
 800cab0:	0349      	lsls	r1, r1, #13
 800cab2:	430a      	orrs	r2, r1
 800cab4:	615a      	str	r2, [r3, #20]
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	400b      	ands	r3, r1
 800caba:	9306      	str	r3, [sp, #24]
 800cabc:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cabe:	2522      	movs	r5, #34	; 0x22
 800cac0:	446d      	add	r5, sp
 800cac2:	ab08      	add	r3, sp, #32
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	ab0b      	add	r3, sp, #44	; 0x2c
 800cac8:	002a      	movs	r2, r5
 800caca:	a90c      	add	r1, sp, #48	; 0x30
 800cacc:	2001      	movs	r0, #1
 800cace:	f7ff ff63 	bl	800c998 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cad2:	ac07      	add	r4, sp, #28
 800cad4:	9400      	str	r4, [sp, #0]
 800cad6:	ab09      	add	r3, sp, #36	; 0x24
 800cad8:	221e      	movs	r2, #30
 800cada:	446a      	add	r2, sp
 800cadc:	a90a      	add	r1, sp, #40	; 0x28
 800cade:	2006      	movs	r0, #6
 800cae0:	f7ff ff5a 	bl	800c998 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cae4:	2301      	movs	r3, #1
 800cae6:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cae8:	2600      	movs	r6, #0
 800caea:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800caec:	882b      	ldrh	r3, [r5, #0]
 800caee:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800caf0:	a90d      	add	r1, sp, #52	; 0x34
 800caf2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800caf4:	f004 f97c 	bl	8010df0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800caf8:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800cafa:	2302      	movs	r3, #2
 800cafc:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cafe:	8823      	ldrh	r3, [r4, #0]
 800cb00:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cb02:	a90d      	add	r1, sp, #52	; 0x34
 800cb04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb06:	f004 f973 	bl	8010df0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800cb0a:	8829      	ldrh	r1, [r5, #0]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cb10:	f004 fae2 	bl	80110d8 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800cb14:	2005      	movs	r0, #5
 800cb16:	f000 fb13 	bl	800d140 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800cb1a:	8821      	ldrh	r1, [r4, #0]
 800cb1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb1e:	f004 fad5 	bl	80110cc <HAL_GPIO_ReadPin>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d006      	beq.n	800cb34 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800cb26:	4b0e      	ldr	r3, [pc, #56]	; (800cb60 <IsFactoryReset+0xf0>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	4252      	negs	r2, r2
 800cb2c:	601a      	str	r2, [r3, #0]
	return 0;
 800cb2e:	2000      	movs	r0, #0
}
 800cb30:	b012      	add	sp, #72	; 0x48
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800cb34:	2322      	movs	r3, #34	; 0x22
 800cb36:	446b      	add	r3, sp
 800cb38:	8819      	ldrh	r1, [r3, #0]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cb3e:	f004 facb 	bl	80110d8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800cb42:	2005      	movs	r0, #5
 800cb44:	f000 fafc 	bl	800d140 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800cb48:	ab07      	add	r3, sp, #28
 800cb4a:	8819      	ldrh	r1, [r3, #0]
 800cb4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb4e:	f004 fabd 	bl	80110cc <HAL_GPIO_ReadPin>
 800cb52:	2801      	cmp	r0, #1
 800cb54:	d1e7      	bne.n	800cb26 <IsFactoryReset+0xb6>
			return 1;
 800cb56:	2001      	movs	r0, #1
 800cb58:	e7ea      	b.n	800cb30 <IsFactoryReset+0xc0>
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	40021000 	.word	0x40021000
 800cb60:	20007ff0 	.word	0x20007ff0

0800cb64 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cb64:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cb66:	f002 fe3f 	bl	800f7e8 <HAL_IncTick>
  osSystickHandler();  
 800cb6a:	f000 fe93 	bl	800d894 <osSystickHandler>

}
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cb70:	e7fe      	b.n	800cb70 <HardFault_Handler>
	...

0800cb74 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cb74:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cb76:	4802      	ldr	r0, [pc, #8]	; (800cb80 <USART1_IRQHandler+0xc>)
 800cb78:	f006 f86f 	bl	8012c5a <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */	
	
}
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	46c0      	nop			; (mov r8, r8)
 800cb80:	20006bd0 	.word	0x20006bd0

0800cb84 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cb84:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cb86:	4802      	ldr	r0, [pc, #8]	; (800cb90 <USART2_IRQHandler+0xc>)
 800cb88:	f006 f867 	bl	8012c5a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	20006d30 	.word	0x20006d30

0800cb94 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cb94:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cb96:	4806      	ldr	r0, [pc, #24]	; (800cbb0 <USART3_8_IRQHandler+0x1c>)
 800cb98:	f006 f85f 	bl	8012c5a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <USART3_8_IRQHandler+0x20>)
 800cb9e:	f006 f85c 	bl	8012c5a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cba2:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <USART3_8_IRQHandler+0x24>)
 800cba4:	f006 f859 	bl	8012c5a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cba8:	4804      	ldr	r0, [pc, #16]	; (800cbbc <USART3_8_IRQHandler+0x28>)
 800cbaa:	f006 f856 	bl	8012c5a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cbae:	bd10      	pop	{r4, pc}
 800cbb0:	20006aec 	.word	0x20006aec
 800cbb4:	20006cbc 	.word	0x20006cbc
 800cbb8:	20006b60 	.word	0x20006b60
 800cbbc:	20006c4c 	.word	0x20006c4c

0800cbc0 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cbc0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	f7fa fd22 	bl	800760c <DMA_IRQHandler>
	
}
 800cbc8:	bd10      	pop	{r4, pc}
	...

0800cbcc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800cbcc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cbce:	4b0c      	ldr	r3, [pc, #48]	; (800cc00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	06db      	lsls	r3, r3, #27
 800cbd4:	d408      	bmi.n	800cbe8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	d408      	bmi.n	800cbf0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cbde:	4b09      	ldr	r3, [pc, #36]	; (800cc04 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	06db      	lsls	r3, r3, #27
 800cbe4:	d408      	bmi.n	800cbf8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800cbe6:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800cbe8:	2005      	movs	r0, #5
 800cbea:	f7fa fd0f 	bl	800760c <DMA_IRQHandler>
 800cbee:	e7fa      	b.n	800cbe6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800cbf0:	2002      	movs	r0, #2
 800cbf2:	f7fa fd0b 	bl	800760c <DMA_IRQHandler>
 800cbf6:	e7f6      	b.n	800cbe6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cbf8:	4803      	ldr	r0, [pc, #12]	; (800cc08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cbfa:	f003 fb55 	bl	80102a8 <HAL_DMA_IRQHandler>
}
 800cbfe:	e7f2      	b.n	800cbe6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800cc00:	40020400 	.word	0x40020400
 800cc04:	40020000 	.word	0x40020000
 800cc08:	200018f0 	.word	0x200018f0

0800cc0c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cc0c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cc0e:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	03db      	lsls	r3, r3, #15
 800cc14:	d413      	bmi.n	800cc3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	02db      	lsls	r3, r3, #11
 800cc1c:	d413      	bmi.n	800cc46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cc1e:	4b11      	ldr	r3, [pc, #68]	; (800cc64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	05db      	lsls	r3, r3, #23
 800cc24:	d413      	bmi.n	800cc4e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	04db      	lsls	r3, r3, #19
 800cc2c:	d413      	bmi.n	800cc56 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cc2e:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	01db      	lsls	r3, r3, #7
 800cc34:	d506      	bpl.n	800cc44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cc36:	480c      	ldr	r0, [pc, #48]	; (800cc68 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cc38:	f003 fb36 	bl	80102a8 <HAL_DMA_IRQHandler>
	}
}
 800cc3c:	e002      	b.n	800cc44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cc3e:	2003      	movs	r0, #3
 800cc40:	f7fa fce4 	bl	800760c <DMA_IRQHandler>
}
 800cc44:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cc46:	2004      	movs	r0, #4
 800cc48:	f7fa fce0 	bl	800760c <DMA_IRQHandler>
 800cc4c:	e7fa      	b.n	800cc44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cc4e:	2006      	movs	r0, #6
 800cc50:	f7fa fcdc 	bl	800760c <DMA_IRQHandler>
 800cc54:	e7f6      	b.n	800cc44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cc56:	4805      	ldr	r0, [pc, #20]	; (800cc6c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cc58:	f003 fb26 	bl	80102a8 <HAL_DMA_IRQHandler>
 800cc5c:	e7f2      	b.n	800cc44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cc5e:	46c0      	nop			; (mov r8, r8)
 800cc60:	40020000 	.word	0x40020000
 800cc64:	40020400 	.word	0x40020400
 800cc68:	20001960 	.word	0x20001960
 800cc6c:	20001928 	.word	0x20001928

0800cc70 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 800cc70:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
	HAL_TIM_IRQHandler(&htim16);
 800cc72:	4802      	ldr	r0, [pc, #8]	; (800cc7c <TIM16_IRQHandler+0xc>)
 800cc74:	f005 f954 	bl	8011f20 <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
	
}
 800cc78:	bd10      	pop	{r4, pc}
 800cc7a:	46c0      	nop			; (mov r8, r8)
 800cc7c:	20006dc4 	.word	0x20006dc4

0800cc80 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc80:	b510      	push	{r4, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cc86:	2300      	movs	r3, #0
 800cc88:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cc8a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cc90:	f7fe fed2 	bl	800ba38 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cc94:	0020      	movs	r0, r4
 800cc96:	f7fe fcf5 	bl	800b684 <GetPort>
 800cc9a:	0080      	lsls	r0, r0, #2
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <HAL_UART_TxCpltCallback+0x38>)
 800cc9e:	58c0      	ldr	r0, [r0, r3]
 800cca0:	a901      	add	r1, sp, #4
 800cca2:	f001 f97b 	bl	800df9c <xQueueGiveFromISR>
	

	
	RS485_RECEIVER_EN();                        // Enable receiver mode
 800cca6:	2180      	movs	r1, #128	; 0x80
 800cca8:	2090      	movs	r0, #144	; 0x90
 800ccaa:	2200      	movs	r2, #0
 800ccac:	0149      	lsls	r1, r1, #5
 800ccae:	05c0      	lsls	r0, r0, #23
 800ccb0:	f004 fa12 	bl	80110d8 <HAL_GPIO_WritePin>

}
 800ccb4:	b002      	add	sp, #8
 800ccb6:	bd10      	pop	{r4, pc}
 800ccb8:	20006a48 	.word	0x20006a48

0800ccbc <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800ccc0:	2369      	movs	r3, #105	; 0x69
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800ccc6:	f7fe fcdd 	bl	800b684 <GetPort>
	if (portStatus[port] == STREAM) {
 800ccca:	4b0c      	ldr	r3, [pc, #48]	; (800ccfc <HAL_UART_ErrorCallback+0x40>)
 800cccc:	5c1b      	ldrb	r3, [r3, r0]
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d005      	beq.n	800ccde <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800ccd2:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <HAL_UART_ErrorCallback+0x44>)
 800ccd4:	1818      	adds	r0, r3, r0
 800ccd6:	3801      	subs	r0, #1
 800ccd8:	2301      	movs	r3, #1
 800ccda:	7003      	strb	r3, [r0, #0]
	}	
}
 800ccdc:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800ccde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	b292      	uxth	r2, r2
 800cce6:	3801      	subs	r0, #1
 800cce8:	0080      	lsls	r0, r0, #2
 800ccea:	4b06      	ldr	r3, [pc, #24]	; (800cd04 <HAL_UART_ErrorCallback+0x48>)
 800ccec:	58c3      	ldr	r3, [r0, r3]
 800ccee:	6819      	ldr	r1, [r3, #0]
 800ccf0:	3128      	adds	r1, #40	; 0x28
 800ccf2:	0020      	movs	r0, r4
 800ccf4:	f005 fb9a 	bl	801242c <HAL_UART_Receive_DMA>
 800ccf8:	e7f0      	b.n	800ccdc <HAL_UART_ErrorCallback+0x20>
 800ccfa:	46c0      	nop			; (mov r8, r8)
 800ccfc:	200010f8 	.word	0x200010f8
 800cd00:	200012c8 	.word	0x200012c8
 800cd04:	200014a8 	.word	0x200014a8

0800cd08 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	0004      	movs	r4, r0

	/* Check if data received from bridge port */
	if (H1DR1_Mode==BRIDGE)
 800cd0c:	4b22      	ldr	r3, [pc, #136]	; (800cd98 <HAL_UART_RxCpltCallback+0x90>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d02c      	beq.n	800cd6e <HAL_UART_RxCpltCallback+0x66>
		}
	}
	
	
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cd14:	0020      	movs	r0, r4
 800cd16:	f7fe fcb5 	bl	800b684 <GetPort>
 800cd1a:	4b20      	ldr	r3, [pc, #128]	; (800cd9c <HAL_UART_RxCpltCallback+0x94>)
 800cd1c:	5c1b      	ldrb	r3, [r3, r0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d006      	beq.n	800cd30 <HAL_UART_RxCpltCallback+0x28>
 800cd22:	0020      	movs	r0, r4
 800cd24:	f7fe fcae 	bl	800b684 <GetPort>
 800cd28:	4b1c      	ldr	r3, [pc, #112]	; (800cd9c <HAL_UART_RxCpltCallback+0x94>)
 800cd2a:	5c1b      	ldrb	r3, [r3, r0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d11d      	bne.n	800cd6c <HAL_UART_RxCpltCallback+0x64>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800cd30:	0020      	movs	r0, r4
 800cd32:	f7fe fca7 	bl	800b684 <GetPort>
 800cd36:	4b1a      	ldr	r3, [pc, #104]	; (800cda0 <HAL_UART_RxCpltCallback+0x98>)
 800cd38:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800cd3a:	0020      	movs	r0, r4
 800cd3c:	f7fe fca2 	bl	800b684 <GetPort>
 800cd40:	4b16      	ldr	r3, [pc, #88]	; (800cd9c <HAL_UART_RxCpltCallback+0x94>)
 800cd42:	2205      	movs	r2, #5
 800cd44:	541a      	strb	r2, [r3, r0]
		// Clear the circular RX buffer
		memset(&UARTRxBuf[GetPort(huart)-1][0], 0, MSG_RX_BUF_SIZE);
 800cd46:	0020      	movs	r0, r4
 800cd48:	f7fe fc9c 	bl	800b684 <GetPort>
 800cd4c:	3801      	subs	r0, #1
 800cd4e:	0180      	lsls	r0, r0, #6
 800cd50:	4b14      	ldr	r3, [pc, #80]	; (800cda4 <HAL_UART_RxCpltCallback+0x9c>)
 800cd52:	18c0      	adds	r0, r0, r3
 800cd54:	2240      	movs	r2, #64	; 0x40
 800cd56:	2100      	movs	r1, #0
 800cd58:	f006 faa0 	bl	801329c <memset>
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;		
 800cd5c:	0020      	movs	r0, r4
 800cd5e:	f7fe fc91 	bl	800b684 <GetPort>
 800cd62:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <HAL_UART_RxCpltCallback+0xa0>)
 800cd64:	1818      	adds	r0, r3, r0
 800cd66:	3801      	subs	r0, #1
 800cd68:	2301      	movs	r3, #1
 800cd6a:	7003      	strb	r3, [r0, #0]
	}
	
	
}
 800cd6c:	bd10      	pop	{r4, pc}
		if (huart==GetUart(Src_port))
 800cd6e:	4b0f      	ldr	r3, [pc, #60]	; (800cdac <HAL_UART_RxCpltCallback+0xa4>)
 800cd70:	7818      	ldrb	r0, [r3, #0]
 800cd72:	f000 fbcd 	bl	800d510 <GetUart>
 800cd76:	42a0      	cmp	r0, r4
 800cd78:	d1cc      	bne.n	800cd14 <HAL_UART_RxCpltCallback+0xc>
			RS485_RECEIVER_DIS();                     // Set RS485 port to transmitter
 800cd7a:	2180      	movs	r1, #128	; 0x80
 800cd7c:	2090      	movs	r0, #144	; 0x90
 800cd7e:	2201      	movs	r2, #1
 800cd80:	0149      	lsls	r1, r1, #5
 800cd82:	05c0      	lsls	r0, r0, #23
 800cd84:	f004 f9a8 	bl	80110d8 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800cd88:	4b09      	ldr	r3, [pc, #36]	; (800cdb0 <HAL_UART_RxCpltCallback+0xa8>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	6813      	ldr	r3, [r2, #0]
 800cd8e:	2140      	movs	r1, #64	; 0x40
 800cd90:	430b      	orrs	r3, r1
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	e7be      	b.n	800cd14 <HAL_UART_RxCpltCallback+0xc>
 800cd96:	46c0      	nop			; (mov r8, r8)
 800cd98:	20006d2c 	.word	0x20006d2c
 800cd9c:	200010f8 	.word	0x200010f8
 800cda0:	200069c8 	.word	0x200069c8
 800cda4:	200012d0 	.word	0x200012d0
 800cda8:	200012c8 	.word	0x200012c8
 800cdac:	20006c40 	.word	0x20006c40
 800cdb0:	20006bd0 	.word	0x20006bd0

0800cdb4 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cdb4:	b672      	cpsid	i
 800cdb6:	e7fe      	b.n	800cdb6 <vApplicationStackOverflowHook+0x2>

0800cdb8 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cdb8:	b672      	cpsid	i
 800cdba:	e7fe      	b.n	800cdba <vApplicationMallocFailedHook+0x2>

0800cdbc <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdbe:	46ce      	mov	lr, r9
 800cdc0:	b500      	push	{lr}
 800cdc2:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cdc4:	ac05      	add	r4, sp, #20
 800cdc6:	4b34      	ldr	r3, [pc, #208]	; (800ce98 <RTC_CalendarConfig+0xdc>)
 800cdc8:	0022      	movs	r2, r4
 800cdca:	cb43      	ldmia	r3!, {r0, r1, r6}
 800cdcc:	c243      	stmia	r2!, {r0, r1, r6}
 800cdce:	aa02      	add	r2, sp, #8
 800cdd0:	4b32      	ldr	r3, [pc, #200]	; (800ce9c <RTC_CalendarConfig+0xe0>)
 800cdd2:	cb03      	ldmia	r3!, {r0, r1}
 800cdd4:	c203      	stmia	r2!, {r0, r1}
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800cdda:	2015      	movs	r0, #21
 800cddc:	ab02      	add	r3, sp, #8
 800cdde:	469c      	mov	ip, r3
 800cde0:	4460      	add	r0, ip
 800cde2:	f005 ffc2 	bl	8012d6a <atoi>
 800cde6:	b2c3      	uxtb	r3, r0
 800cde8:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800cdea:	2600      	movs	r6, #0
 800cdec:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800cdee:	a806      	add	r0, sp, #24
 800cdf0:	f005 ffbb 	bl	8012d6a <atoi>
 800cdf4:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800cdf6:	70e6      	strb	r6, [r4, #3]
 800cdf8:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cdfa:	4e29      	ldr	r6, [pc, #164]	; (800cea0 <RTC_CalendarConfig+0xe4>)
 800cdfc:	e002      	b.n	800ce04 <RTC_CalendarConfig+0x48>
 800cdfe:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800ce00:	2c0d      	cmp	r4, #13
 800ce02:	d009      	beq.n	800ce18 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800ce04:	00a3      	lsls	r3, r4, #2
 800ce06:	3b04      	subs	r3, #4
 800ce08:	58f1      	ldr	r1, [r6, r3]
 800ce0a:	a805      	add	r0, sp, #20
 800ce0c:	f7f3 f97a 	bl	8000104 <strcmp>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d1f4      	bne.n	800cdfe <RTC_CalendarConfig+0x42>
			month = i + 1;
 800ce14:	b2e5      	uxtb	r5, r4
 800ce16:	e7f2      	b.n	800cdfe <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800ce18:	ab02      	add	r3, sp, #8
 800ce1a:	1d98      	adds	r0, r3, #6
 800ce1c:	f005 ffa5 	bl	8012d6a <atoi>
 800ce20:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800ce22:	ac05      	add	r4, sp, #20
 800ce24:	2600      	movs	r6, #0
 800ce26:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800ce28:	ab02      	add	r3, sp, #8
 800ce2a:	1cd8      	adds	r0, r3, #3
 800ce2c:	f005 ff9d 	bl	8012d6a <atoi>
 800ce30:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800ce32:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800ce34:	a802      	add	r0, sp, #8
 800ce36:	f005 ff98 	bl	8012d6a <atoi>
 800ce3a:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800ce3c:	a90d      	add	r1, sp, #52	; 0x34
 800ce3e:	464b      	mov	r3, r9
 800ce40:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800ce42:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800ce44:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ce46:	2301      	movs	r3, #1
 800ce48:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4815      	ldr	r0, [pc, #84]	; (800cea4 <RTC_CalendarConfig+0xe8>)
 800ce4e:	f004 ff85 	bl	8011d5c <HAL_RTC_SetDate>
		return BOS_ERROR;
 800ce52:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d119      	bne.n	800ce8c <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800ce58:	a908      	add	r1, sp, #32
 800ce5a:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800ce5c:	9b01      	ldr	r3, [sp, #4]
 800ce5e:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800ce60:	9b00      	ldr	r3, [sp, #0]
 800ce62:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ce64:	2300      	movs	r3, #0
 800ce66:	720b      	strb	r3, [r1, #8]
 800ce68:	4a0f      	ldr	r2, [pc, #60]	; (800cea8 <RTC_CalendarConfig+0xec>)
 800ce6a:	3018      	adds	r0, #24
 800ce6c:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ce6e:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800ce70:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce72:	2200      	movs	r2, #0
 800ce74:	480b      	ldr	r0, [pc, #44]	; (800cea4 <RTC_CalendarConfig+0xe8>)
 800ce76:	f004 feeb 	bl	8011c50 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800ce7a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d105      	bne.n	800ce8c <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce80:	4a0a      	ldr	r2, [pc, #40]	; (800ceac <RTC_CalendarConfig+0xf0>)
 800ce82:	2101      	movs	r1, #1
 800ce84:	4807      	ldr	r0, [pc, #28]	; (800cea4 <RTC_CalendarConfig+0xe8>)
 800ce86:	f005 f82d 	bl	8011ee4 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	b00e      	add	sp, #56	; 0x38
 800ce90:	bc04      	pop	{r2}
 800ce92:	4691      	mov	r9, r2
 800ce94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce96:	46c0      	nop			; (mov r8, r8)
 800ce98:	08017c00 	.word	0x08017c00
 800ce9c:	0801a740 	.word	0x0801a740
 800cea0:	20000020 	.word	0x20000020
 800cea4:	20006e00 	.word	0x20006e00
 800cea8:	200069c8 	.word	0x200069c8
 800ceac:	000032f2 	.word	0x000032f2

0800ceb0 <RTC_Init>:
{
 800ceb0:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800ceb2:	4a1c      	ldr	r2, [pc, #112]	; (800cf24 <RTC_Init+0x74>)
 800ceb4:	6a11      	ldr	r1, [r2, #32]
 800ceb6:	2380      	movs	r3, #128	; 0x80
 800ceb8:	021b      	lsls	r3, r3, #8
 800ceba:	430b      	orrs	r3, r1
 800cebc:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800cebe:	481a      	ldr	r0, [pc, #104]	; (800cf28 <RTC_Init+0x78>)
 800cec0:	4b1a      	ldr	r3, [pc, #104]	; (800cf2c <RTC_Init+0x7c>)
 800cec2:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cec4:	2300      	movs	r3, #0
 800cec6:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800cec8:	227c      	movs	r2, #124	; 0x7c
 800ceca:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800cecc:	4a18      	ldr	r2, [pc, #96]	; (800cf30 <RTC_Init+0x80>)
 800cece:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ced0:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ced2:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ced4:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800ced6:	f004 fe5d 	bl	8011b94 <HAL_RTC_Init>
 800ceda:	23ff      	movs	r3, #255	; 0xff
 800cedc:	2800      	cmp	r0, #0
 800cede:	d11e      	bne.n	800cf1e <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cee0:	2101      	movs	r1, #1
 800cee2:	4811      	ldr	r0, [pc, #68]	; (800cf28 <RTC_Init+0x78>)
 800cee4:	f005 f804 	bl	8011ef0 <HAL_RTCEx_BKUPRead>
 800cee8:	4b12      	ldr	r3, [pc, #72]	; (800cf34 <RTC_Init+0x84>)
 800ceea:	4298      	cmp	r0, r3
 800ceec:	d10e      	bne.n	800cf0c <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800ceee:	4b0d      	ldr	r3, [pc, #52]	; (800cf24 <RTC_Init+0x74>)
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	011b      	lsls	r3, r3, #4
 800cef4:	d502      	bpl.n	800cefc <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cef6:	4b10      	ldr	r3, [pc, #64]	; (800cf38 <RTC_Init+0x88>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <RTC_Init+0x74>)
 800cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf00:	015b      	lsls	r3, r3, #5
 800cf02:	d505      	bpl.n	800cf10 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800cf04:	4b0c      	ldr	r3, [pc, #48]	; (800cf38 <RTC_Init+0x88>)
 800cf06:	2201      	movs	r2, #1
 800cf08:	701a      	strb	r2, [r3, #0]
 800cf0a:	e001      	b.n	800cf10 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800cf0c:	f7ff ff56 	bl	800cdbc <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cf10:	4a04      	ldr	r2, [pc, #16]	; (800cf24 <RTC_Init+0x74>)
 800cf12:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cf14:	2380      	movs	r3, #128	; 0x80
 800cf16:	045b      	lsls	r3, r3, #17
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	0018      	movs	r0, r3
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	40021000 	.word	0x40021000
 800cf28:	20006e00 	.word	0x20006e00
 800cf2c:	40002800 	.word	0x40002800
 800cf30:	000007cf 	.word	0x000007cf
 800cf34:	000032f2 	.word	0x000032f2
 800cf38:	20001ae8 	.word	0x20001ae8

0800cf3c <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3e:	46c6      	mov	lr, r8
 800cf40:	b500      	push	{lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	ac0c      	add	r4, sp, #48	; 0x30
 800cf46:	7827      	ldrb	r7, [r4, #0]
 800cf48:	ac0d      	add	r4, sp, #52	; 0x34
 800cf4a:	7824      	ldrb	r4, [r4, #0]
 800cf4c:	46a0      	mov	r8, r4
 800cf4e:	ac0e      	add	r4, sp, #56	; 0x38
 800cf50:	7825      	ldrb	r5, [r4, #0]
 800cf52:	ac0f      	add	r4, sp, #60	; 0x3c
 800cf54:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cf56:	ac05      	add	r4, sp, #20
 800cf58:	3230      	adds	r2, #48	; 0x30
 800cf5a:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800cf5c:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800cf5e:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800cf60:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cf62:	2200      	movs	r2, #0
 800cf64:	0021      	movs	r1, r4
 800cf66:	481f      	ldr	r0, [pc, #124]	; (800cfe4 <BOS_CalendarConfig+0xa8>)
 800cf68:	f004 fef8 	bl	8011d5c <HAL_RTC_SetDate>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d136      	bne.n	800cfde <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800cf70:	466b      	mov	r3, sp
 800cf72:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800cf74:	4642      	mov	r2, r8
 800cf76:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800cf78:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800cf7e:	2e01      	cmp	r6, #1
 800cf80:	d020      	beq.n	800cfc4 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800cf82:	2e02      	cmp	r6, #2
 800cf84:	d024      	beq.n	800cfd0 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800cf86:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <BOS_CalendarConfig+0xac>)
 800cf88:	2218      	movs	r2, #24
 800cf8a:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4669      	mov	r1, sp
 800cf90:	4814      	ldr	r0, [pc, #80]	; (800cfe4 <BOS_CalendarConfig+0xa8>)
 800cf92:	f004 fe5d 	bl	8011c50 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800cf96:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d10e      	bne.n	800cfba <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800cf9c:	4a12      	ldr	r2, [pc, #72]	; (800cfe8 <BOS_CalendarConfig+0xac>)
 800cf9e:	7b53      	ldrb	r3, [r2, #13]
 800cfa0:	021b      	lsls	r3, r3, #8
 800cfa2:	7911      	ldrb	r1, [r2, #4]
 800cfa4:	4319      	orrs	r1, r3
 800cfa6:	308d      	adds	r0, #141	; 0x8d
 800cfa8:	0040      	lsls	r0, r0, #1
 800cfaa:	f7fa fc19 	bl	80077e0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cfae:	4a0f      	ldr	r2, [pc, #60]	; (800cfec <BOS_CalendarConfig+0xb0>)
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	480c      	ldr	r0, [pc, #48]	; (800cfe4 <BOS_CalendarConfig+0xa8>)
 800cfb4:	f004 ff96 	bl	8011ee4 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	0018      	movs	r0, r3
 800cfbc:	b006      	add	sp, #24
 800cfbe:	bc04      	pop	{r2}
 800cfc0:	4690      	mov	r8, r2
 800cfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800cfc4:	466a      	mov	r2, sp
 800cfc6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800cfc8:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <BOS_CalendarConfig+0xac>)
 800cfca:	220c      	movs	r2, #12
 800cfcc:	735a      	strb	r2, [r3, #13]
 800cfce:	e7dd      	b.n	800cf8c <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800cfd0:	2340      	movs	r3, #64	; 0x40
 800cfd2:	466a      	mov	r2, sp
 800cfd4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800cfd6:	4b04      	ldr	r3, [pc, #16]	; (800cfe8 <BOS_CalendarConfig+0xac>)
 800cfd8:	220c      	movs	r2, #12
 800cfda:	735a      	strb	r2, [r3, #13]
 800cfdc:	e7d6      	b.n	800cf8c <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800cfde:	23ff      	movs	r3, #255	; 0xff
 800cfe0:	e7eb      	b.n	800cfba <BOS_CalendarConfig+0x7e>
 800cfe2:	46c0      	nop			; (mov r8, r8)
 800cfe4:	20006e00 	.word	0x20006e00
 800cfe8:	200069c8 	.word	0x200069c8
 800cfec:	000032f2 	.word	0x000032f2

0800cff0 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800cff0:	b530      	push	{r4, r5, lr}
 800cff2:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cff4:	4d16      	ldr	r5, [pc, #88]	; (800d050 <GetTimeDate+0x60>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	a902      	add	r1, sp, #8
 800cffa:	0028      	movs	r0, r5
 800cffc:	f004 ff2a 	bl	8011e54 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d000:	ac07      	add	r4, sp, #28
 800d002:	2200      	movs	r2, #0
 800d004:	0021      	movs	r1, r4
 800d006:	0028      	movs	r0, r5
 800d008:	f004 ff4a 	bl	8011ea0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d00c:	4b11      	ldr	r3, [pc, #68]	; (800d054 <GetTimeDate+0x64>)
 800d00e:	aa02      	add	r2, sp, #8
 800d010:	7a12      	ldrb	r2, [r2, #8]
 800d012:	09d2      	lsrs	r2, r2, #7
 800d014:	3201      	adds	r2, #1
 800d016:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d018:	9a03      	ldr	r2, [sp, #12]
 800d01a:	9201      	str	r2, [sp, #4]
 800d01c:	0852      	lsrs	r2, r2, #1
 800d01e:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d020:	aa02      	add	r2, sp, #8
 800d022:	7892      	ldrb	r2, [r2, #2]
 800d024:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d026:	aa02      	add	r2, sp, #8
 800d028:	7852      	ldrb	r2, [r2, #1]
 800d02a:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d02c:	aa02      	add	r2, sp, #8
 800d02e:	7812      	ldrb	r2, [r2, #0]
 800d030:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d032:	78a2      	ldrb	r2, [r4, #2]
 800d034:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d036:	7862      	ldrb	r2, [r4, #1]
 800d038:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d03a:	7822      	ldrb	r2, [r4, #0]
 800d03c:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d03e:	78e2      	ldrb	r2, [r4, #3]
 800d040:	21fa      	movs	r1, #250	; 0xfa
 800d042:	00c9      	lsls	r1, r1, #3
 800d044:	468c      	mov	ip, r1
 800d046:	4462      	add	r2, ip
 800d048:	831a      	strh	r2, [r3, #24]
}
 800d04a:	b009      	add	sp, #36	; 0x24
 800d04c:	bd30      	pop	{r4, r5, pc}
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	20006e00 	.word	0x20006e00
 800d054:	200069c8 	.word	0x200069c8

0800d058 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d058:	b530      	push	{r4, r5, lr}
 800d05a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d05c:	4a12      	ldr	r2, [pc, #72]	; (800d0a8 <TIM_USEC_Init+0x50>)
 800d05e:	69d1      	ldr	r1, [r2, #28]
 800d060:	2080      	movs	r0, #128	; 0x80
 800d062:	0040      	lsls	r0, r0, #1
 800d064:	4301      	orrs	r1, r0
 800d066:	61d1      	str	r1, [r2, #28]
 800d068:	69d3      	ldr	r3, [r2, #28]
 800d06a:	4003      	ands	r3, r0
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d070:	4c0e      	ldr	r4, [pc, #56]	; (800d0ac <TIM_USEC_Init+0x54>)
 800d072:	4b0f      	ldr	r3, [pc, #60]	; (800d0b0 <TIM_USEC_Init+0x58>)
 800d074:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d076:	f004 fca5 	bl	80119c4 <HAL_RCC_GetPCLK1Freq>
 800d07a:	490e      	ldr	r1, [pc, #56]	; (800d0b4 <TIM_USEC_Init+0x5c>)
 800d07c:	f7f3 f868 	bl	8000150 <__udivsi3>
 800d080:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d082:	2500      	movs	r5, #0
 800d084:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d086:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <TIM_USEC_Init+0x60>)
 800d088:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d08a:	0020      	movs	r0, r4
 800d08c:	f005 f872 	bl	8012174 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d090:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d092:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d094:	a902      	add	r1, sp, #8
 800d096:	0020      	movs	r0, r4
 800d098:	f005 f886 	bl	80121a8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d09c:	0020      	movs	r0, r4
 800d09e:	f004 ff2e 	bl	8011efe <HAL_TIM_Base_Start>
}
 800d0a2:	b005      	add	sp, #20
 800d0a4:	bd30      	pop	{r4, r5, pc}
 800d0a6:	46c0      	nop			; (mov r8, r8)
 800d0a8:	40021000 	.word	0x40021000
 800d0ac:	20006e5c 	.word	0x20006e5c
 800d0b0:	40002000 	.word	0x40002000
 800d0b4:	000f4240 	.word	0x000f4240
 800d0b8:	0000ffff 	.word	0x0000ffff

0800d0bc <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d0bc:	b530      	push	{r4, r5, lr}
 800d0be:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d0c0:	4a12      	ldr	r2, [pc, #72]	; (800d10c <TIM_MSEC_Init+0x50>)
 800d0c2:	6991      	ldr	r1, [r2, #24]
 800d0c4:	2080      	movs	r0, #128	; 0x80
 800d0c6:	0240      	lsls	r0, r0, #9
 800d0c8:	4301      	orrs	r1, r0
 800d0ca:	6191      	str	r1, [r2, #24]
 800d0cc:	6993      	ldr	r3, [r2, #24]
 800d0ce:	4003      	ands	r3, r0
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d0d4:	4c0e      	ldr	r4, [pc, #56]	; (800d110 <TIM_MSEC_Init+0x54>)
 800d0d6:	4b0f      	ldr	r3, [pc, #60]	; (800d114 <TIM_MSEC_Init+0x58>)
 800d0d8:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d0da:	f004 fc73 	bl	80119c4 <HAL_RCC_GetPCLK1Freq>
 800d0de:	21fa      	movs	r1, #250	; 0xfa
 800d0e0:	0089      	lsls	r1, r1, #2
 800d0e2:	f7f3 f835 	bl	8000150 <__udivsi3>
 800d0e6:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0e8:	2500      	movs	r5, #0
 800d0ea:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <TIM_MSEC_Init+0x5c>)
 800d0ee:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d0f0:	0020      	movs	r0, r4
 800d0f2:	f005 f83f 	bl	8012174 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0f6:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0f8:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d0fa:	a902      	add	r1, sp, #8
 800d0fc:	0020      	movs	r0, r4
 800d0fe:	f005 f853 	bl	80121a8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d102:	0020      	movs	r0, r4
 800d104:	f004 fefb 	bl	8011efe <HAL_TIM_Base_Start>
}
 800d108:	b005      	add	sp, #20
 800d10a:	bd30      	pop	{r4, r5, pc}
 800d10c:	40021000 	.word	0x40021000
 800d110:	20006e20 	.word	0x20006e20
 800d114:	40014000 	.word	0x40014000
 800d118:	0000ffff 	.word	0x0000ffff

0800d11c <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d11c:	b510      	push	{r4, lr}
 800d11e:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d120:	f002 f9fe 	bl	800f520 <vPortEnterCritical>
	
	if (Delay)
 800d124:	2c00      	cmp	r4, #0
 800d126:	d006      	beq.n	800d136 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d128:	4b04      	ldr	r3, [pc, #16]	; (800d13c <StartMicroDelay+0x20>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d12e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d130:	1a5b      	subs	r3, r3, r1
 800d132:	42a3      	cmp	r3, r4
 800d134:	d9fb      	bls.n	800d12e <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d136:	f002 f9ff 	bl	800f538 <vPortExitCritical>
}
 800d13a:	bd10      	pop	{r4, pc}
 800d13c:	20006e5c 	.word	0x20006e5c

0800d140 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d140:	b510      	push	{r4, lr}
 800d142:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d144:	f002 f9ec 	bl	800f520 <vPortEnterCritical>
	
	if (Delay)
 800d148:	2c00      	cmp	r4, #0
 800d14a:	d006      	beq.n	800d15a <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d14c:	4b04      	ldr	r3, [pc, #16]	; (800d160 <StartMilliDelay+0x20>)
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d152:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d154:	1a5b      	subs	r3, r3, r1
 800d156:	42a3      	cmp	r3, r4
 800d158:	d9fb      	bls.n	800d152 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d15a:	f002 f9ed 	bl	800f538 <vPortExitCritical>
}
 800d15e:	bd10      	pop	{r4, pc}
 800d160:	20006e20 	.word	0x20006e20

0800d164 <MB_PORT_Init>:
	 uint16_t arrayPortsDir[__N];
#endif 

/* MB Port Initialization */
Module_Status MB_PORT_Init(uint32_t BAUD_RATE, uint32_t DataBitsN, uint32_t PARITY_BIT, uint32_t STOP_BIT)   
{
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	0004      	movs	r4, r0
  huart1.Instance = USART1;
 800d168:	480a      	ldr	r0, [pc, #40]	; (800d194 <MB_PORT_Init+0x30>)
 800d16a:	4d0b      	ldr	r5, [pc, #44]	; (800d198 <MB_PORT_Init+0x34>)
 800d16c:	6005      	str	r5, [r0, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 800d16e:	6044      	str	r4, [r0, #4]
  huart1.Init.WordLength = DataBitsN;
 800d170:	6081      	str	r1, [r0, #8]
  huart1.Init.StopBits = STOP_BIT;
 800d172:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = PARITY_BIT;
 800d174:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d176:	230c      	movs	r3, #12
 800d178:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d17a:	2300      	movs	r3, #0
 800d17c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d17e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d180:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d182:	3310      	adds	r3, #16
 800d184:	6243      	str	r3, [r0, #36]	; 0x24
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d186:	2380      	movs	r3, #128	; 0x80
 800d188:	015b      	lsls	r3, r3, #5
 800d18a:	6383      	str	r3, [r0, #56]	; 0x38
	
	HAL_UART_Init(&huart1);
 800d18c:	f005 fc8e 	bl	8012aac <HAL_UART_Init>
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
return H1DR1_OK;
}
 800d190:	2000      	movs	r0, #0
 800d192:	bd70      	pop	{r4, r5, r6, pc}
 800d194:	20006bd0 	.word	0x20006bd0
 800d198:	40013800 	.word	0x40013800

0800d19c <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d19c:	b510      	push	{r4, lr}
	MB_PORT_Init(9600, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800d19e:	2096      	movs	r0, #150	; 0x96
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	0180      	lsls	r0, r0, #6
 800d1a8:	f7ff ffdc 	bl	800d164 <MB_PORT_Init>
}
 800d1ac:	bd10      	pop	{r4, pc}
	...

0800d1b0 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d1b0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d1b2:	4809      	ldr	r0, [pc, #36]	; (800d1d8 <MX_USART2_UART_Init+0x28>)
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <MX_USART2_UART_Init+0x2c>)
 800d1b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d1b8:	23e1      	movs	r3, #225	; 0xe1
 800d1ba:	031b      	lsls	r3, r3, #12
 800d1bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d1c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d1c4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d1c6:	220c      	movs	r2, #12
 800d1c8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1cc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d1ce:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d1d0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d1d2:	f005 fc6b 	bl	8012aac <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800d1d6:	bd10      	pop	{r4, pc}
 800d1d8:	20006d30 	.word	0x20006d30
 800d1dc:	40004400 	.word	0x40004400

0800d1e0 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d1e0:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d1e2:	4809      	ldr	r0, [pc, #36]	; (800d208 <MX_USART3_UART_Init+0x28>)
 800d1e4:	4b09      	ldr	r3, [pc, #36]	; (800d20c <MX_USART3_UART_Init+0x2c>)
 800d1e6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d1e8:	23e1      	movs	r3, #225	; 0xe1
 800d1ea:	031b      	lsls	r3, r3, #12
 800d1ec:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d1f2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d1f4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d1f6:	220c      	movs	r2, #12
 800d1f8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1fa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1fc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d1fe:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d200:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d202:	f005 fc53 	bl	8012aac <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d206:	bd10      	pop	{r4, pc}
 800d208:	20006aec 	.word	0x20006aec
 800d20c:	40004800 	.word	0x40004800

0800d210 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800d210:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d212:	4809      	ldr	r0, [pc, #36]	; (800d238 <MX_USART4_UART_Init+0x28>)
 800d214:	4b09      	ldr	r3, [pc, #36]	; (800d23c <MX_USART4_UART_Init+0x2c>)
 800d216:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d218:	23e1      	movs	r3, #225	; 0xe1
 800d21a:	031b      	lsls	r3, r3, #12
 800d21c:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d21e:	2300      	movs	r3, #0
 800d220:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d222:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d224:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d226:	220c      	movs	r2, #12
 800d228:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d22a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d22c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d22e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d230:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d232:	f005 fc3b 	bl	8012aac <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d236:	bd10      	pop	{r4, pc}
 800d238:	20006cbc 	.word	0x20006cbc
 800d23c:	40004c00 	.word	0x40004c00

0800d240 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d240:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d242:	4809      	ldr	r0, [pc, #36]	; (800d268 <MX_USART5_UART_Init+0x28>)
 800d244:	4b09      	ldr	r3, [pc, #36]	; (800d26c <MX_USART5_UART_Init+0x2c>)
 800d246:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d248:	23e1      	movs	r3, #225	; 0xe1
 800d24a:	031b      	lsls	r3, r3, #12
 800d24c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d24e:	2300      	movs	r3, #0
 800d250:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d252:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d254:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d256:	220c      	movs	r2, #12
 800d258:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d25a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d25c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d25e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d260:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d262:	f005 fc23 	bl	8012aac <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d266:	bd10      	pop	{r4, pc}
 800d268:	20006b60 	.word	0x20006b60
 800d26c:	40005000 	.word	0x40005000

0800d270 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d270:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d272:	4809      	ldr	r0, [pc, #36]	; (800d298 <MX_USART6_UART_Init+0x28>)
 800d274:	4b09      	ldr	r3, [pc, #36]	; (800d29c <MX_USART6_UART_Init+0x2c>)
 800d276:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d278:	23e1      	movs	r3, #225	; 0xe1
 800d27a:	031b      	lsls	r3, r3, #12
 800d27c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d27e:	2300      	movs	r3, #0
 800d280:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d282:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d284:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d286:	220c      	movs	r2, #12
 800d288:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d28a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d28c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d28e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d290:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d292:	f005 fc0b 	bl	8012aac <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d296:	bd10      	pop	{r4, pc}
 800d298:	20006c4c 	.word	0x20006c4c
 800d29c:	40011400 	.word	0x40011400

0800d2a0 <HAL_UART_MspInit>:
#endif


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a2:	46ce      	mov	lr, r9
 800d2a4:	b500      	push	{lr}
 800d2a6:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d2a8:	6803      	ldr	r3, [r0, #0]
 800d2aa:	4a91      	ldr	r2, [pc, #580]	; (800d4f0 <HAL_UART_MspInit+0x250>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d015      	beq.n	800d2dc <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d2b0:	4a90      	ldr	r2, [pc, #576]	; (800d4f4 <HAL_UART_MspInit+0x254>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d040      	beq.n	800d338 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d2b6:	4a90      	ldr	r2, [pc, #576]	; (800d4f8 <HAL_UART_MspInit+0x258>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d069      	beq.n	800d390 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d2bc:	4a8f      	ldr	r2, [pc, #572]	; (800d4fc <HAL_UART_MspInit+0x25c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d100      	bne.n	800d2c4 <HAL_UART_MspInit+0x24>
 800d2c2:	e092      	b.n	800d3ea <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d2c4:	4a8e      	ldr	r2, [pc, #568]	; (800d500 <HAL_UART_MspInit+0x260>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d100      	bne.n	800d2cc <HAL_UART_MspInit+0x2c>
 800d2ca:	e0b9      	b.n	800d440 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d2cc:	4a8d      	ldr	r2, [pc, #564]	; (800d504 <HAL_UART_MspInit+0x264>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d100      	bne.n	800d2d4 <HAL_UART_MspInit+0x34>
 800d2d2:	e0e0      	b.n	800d496 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d2d4:	b00c      	add	sp, #48	; 0x30
 800d2d6:	bc04      	pop	{r2}
 800d2d8:	4691      	mov	r9, r2
 800d2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d2dc:	4a8a      	ldr	r2, [pc, #552]	; (800d508 <HAL_UART_MspInit+0x268>)
 800d2de:	6991      	ldr	r1, [r2, #24]
 800d2e0:	2080      	movs	r0, #128	; 0x80
 800d2e2:	01c0      	lsls	r0, r0, #7
 800d2e4:	4301      	orrs	r1, r0
 800d2e6:	6191      	str	r1, [r2, #24]
 800d2e8:	6993      	ldr	r3, [r2, #24]
 800d2ea:	4003      	ands	r3, r0
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d2f0:	2380      	movs	r3, #128	; 0x80
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f6:	2702      	movs	r7, #2
 800d2f8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2fa:	2401      	movs	r4, #1
 800d2fc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2fe:	2603      	movs	r6, #3
 800d300:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d302:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d304:	2590      	movs	r5, #144	; 0x90
 800d306:	05ed      	lsls	r5, r5, #23
 800d308:	a907      	add	r1, sp, #28
 800d30a:	0028      	movs	r0, r5
 800d30c:	f003 fd70 	bl	8010df0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d310:	2380      	movs	r3, #128	; 0x80
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d316:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d318:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d31a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d31c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d31e:	a907      	add	r1, sp, #28
 800d320:	0028      	movs	r0, r5
 800d322:	f003 fd65 	bl	8010df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d326:	2200      	movs	r2, #0
 800d328:	2101      	movs	r1, #1
 800d32a:	201b      	movs	r0, #27
 800d32c:	f002 fd96 	bl	800fe5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d330:	201b      	movs	r0, #27
 800d332:	f002 fdc7 	bl	800fec4 <HAL_NVIC_EnableIRQ>
 800d336:	e7cd      	b.n	800d2d4 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d338:	4a73      	ldr	r2, [pc, #460]	; (800d508 <HAL_UART_MspInit+0x268>)
 800d33a:	69d1      	ldr	r1, [r2, #28]
 800d33c:	2080      	movs	r0, #128	; 0x80
 800d33e:	0280      	lsls	r0, r0, #10
 800d340:	4301      	orrs	r1, r0
 800d342:	61d1      	str	r1, [r2, #28]
 800d344:	69d3      	ldr	r3, [r2, #28]
 800d346:	4003      	ands	r3, r0
 800d348:	9302      	str	r3, [sp, #8]
 800d34a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d34c:	2304      	movs	r3, #4
 800d34e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d350:	2702      	movs	r7, #2
 800d352:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d354:	2401      	movs	r4, #1
 800d356:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d358:	2603      	movs	r6, #3
 800d35a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d35c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d35e:	2590      	movs	r5, #144	; 0x90
 800d360:	05ed      	lsls	r5, r5, #23
 800d362:	a907      	add	r1, sp, #28
 800d364:	0028      	movs	r0, r5
 800d366:	f003 fd43 	bl	8010df0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d36a:	2308      	movs	r3, #8
 800d36c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d36e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d370:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d372:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d374:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d376:	a907      	add	r1, sp, #28
 800d378:	0028      	movs	r0, r5
 800d37a:	f003 fd39 	bl	8010df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d37e:	2200      	movs	r2, #0
 800d380:	2101      	movs	r1, #1
 800d382:	201c      	movs	r0, #28
 800d384:	f002 fd6a 	bl	800fe5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d388:	201c      	movs	r0, #28
 800d38a:	f002 fd9b 	bl	800fec4 <HAL_NVIC_EnableIRQ>
 800d38e:	e7a1      	b.n	800d2d4 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d390:	4a5d      	ldr	r2, [pc, #372]	; (800d508 <HAL_UART_MspInit+0x268>)
 800d392:	69d1      	ldr	r1, [r2, #28]
 800d394:	2080      	movs	r0, #128	; 0x80
 800d396:	02c0      	lsls	r0, r0, #11
 800d398:	4301      	orrs	r1, r0
 800d39a:	61d1      	str	r1, [r2, #28]
 800d39c:	69d3      	ldr	r3, [r2, #28]
 800d39e:	4003      	ands	r3, r0
 800d3a0:	9303      	str	r3, [sp, #12]
 800d3a2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d3a4:	2380      	movs	r3, #128	; 0x80
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3aa:	2402      	movs	r4, #2
 800d3ac:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3ae:	2701      	movs	r7, #1
 800d3b0:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3b2:	2603      	movs	r6, #3
 800d3b4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d3b6:	2504      	movs	r5, #4
 800d3b8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d3ba:	a907      	add	r1, sp, #28
 800d3bc:	4853      	ldr	r0, [pc, #332]	; (800d50c <HAL_UART_MspInit+0x26c>)
 800d3be:	f003 fd17 	bl	8010df0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d3c2:	2380      	movs	r3, #128	; 0x80
 800d3c4:	011b      	lsls	r3, r3, #4
 800d3c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3c8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3ca:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3cc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800d3ce:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d3d0:	a907      	add	r1, sp, #28
 800d3d2:	484e      	ldr	r0, [pc, #312]	; (800d50c <HAL_UART_MspInit+0x26c>)
 800d3d4:	f003 fd0c 	bl	8010df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2101      	movs	r1, #1
 800d3dc:	201d      	movs	r0, #29
 800d3de:	f002 fd3d 	bl	800fe5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d3e2:	201d      	movs	r0, #29
 800d3e4:	f002 fd6e 	bl	800fec4 <HAL_NVIC_EnableIRQ>
 800d3e8:	e774      	b.n	800d2d4 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800d3ea:	4a47      	ldr	r2, [pc, #284]	; (800d508 <HAL_UART_MspInit+0x268>)
 800d3ec:	69d1      	ldr	r1, [r2, #28]
 800d3ee:	2080      	movs	r0, #128	; 0x80
 800d3f0:	0300      	lsls	r0, r0, #12
 800d3f2:	4301      	orrs	r1, r0
 800d3f4:	61d1      	str	r1, [r2, #28]
 800d3f6:	69d3      	ldr	r3, [r2, #28]
 800d3f8:	4003      	ands	r3, r0
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d3fe:	2401      	movs	r4, #1
 800d400:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d402:	2502      	movs	r5, #2
 800d404:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d406:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d408:	2603      	movs	r6, #3
 800d40a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d40c:	2704      	movs	r7, #4
 800d40e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d410:	a907      	add	r1, sp, #28
 800d412:	2090      	movs	r0, #144	; 0x90
 800d414:	05c0      	lsls	r0, r0, #23
 800d416:	f003 fceb 	bl	8010df0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART4_RX_PIN;
 800d41a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d41c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d41e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d420:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d422:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800d424:	a907      	add	r1, sp, #28
 800d426:	2090      	movs	r0, #144	; 0x90
 800d428:	05c0      	lsls	r0, r0, #23
 800d42a:	f003 fce1 	bl	8010df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d42e:	2200      	movs	r2, #0
 800d430:	2101      	movs	r1, #1
 800d432:	201d      	movs	r0, #29
 800d434:	f002 fd12 	bl	800fe5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d438:	201d      	movs	r0, #29
 800d43a:	f002 fd43 	bl	800fec4 <HAL_NVIC_EnableIRQ>
 800d43e:	e749      	b.n	800d2d4 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800d440:	4a31      	ldr	r2, [pc, #196]	; (800d508 <HAL_UART_MspInit+0x268>)
 800d442:	69d1      	ldr	r1, [r2, #28]
 800d444:	2080      	movs	r0, #128	; 0x80
 800d446:	0340      	lsls	r0, r0, #13
 800d448:	4301      	orrs	r1, r0
 800d44a:	61d1      	str	r1, [r2, #28]
 800d44c:	69d3      	ldr	r3, [r2, #28]
 800d44e:	4003      	ands	r3, r0
 800d450:	9305      	str	r3, [sp, #20]
 800d452:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d454:	2308      	movs	r3, #8
 800d456:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d458:	2402      	movs	r4, #2
 800d45a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d45c:	2701      	movs	r7, #1
 800d45e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d460:	2603      	movs	r6, #3
 800d462:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d464:	2504      	movs	r5, #4
 800d466:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d468:	a907      	add	r1, sp, #28
 800d46a:	4828      	ldr	r0, [pc, #160]	; (800d50c <HAL_UART_MspInit+0x26c>)
 800d46c:	f003 fcc0 	bl	8010df0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART5_RX_PIN;
 800d470:	2310      	movs	r3, #16
 800d472:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d474:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d476:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d478:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d47a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d47c:	a907      	add	r1, sp, #28
 800d47e:	4823      	ldr	r0, [pc, #140]	; (800d50c <HAL_UART_MspInit+0x26c>)
 800d480:	f003 fcb6 	bl	8010df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d484:	2200      	movs	r2, #0
 800d486:	2101      	movs	r1, #1
 800d488:	201d      	movs	r0, #29
 800d48a:	f002 fce7 	bl	800fe5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d48e:	201d      	movs	r0, #29
 800d490:	f002 fd18 	bl	800fec4 <HAL_NVIC_EnableIRQ>
 800d494:	e71e      	b.n	800d2d4 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800d496:	4b1c      	ldr	r3, [pc, #112]	; (800d508 <HAL_UART_MspInit+0x268>)
 800d498:	699a      	ldr	r2, [r3, #24]
 800d49a:	2420      	movs	r4, #32
 800d49c:	4322      	orrs	r2, r4
 800d49e:	619a      	str	r2, [r3, #24]
 800d4a0:	699b      	ldr	r3, [r3, #24]
 800d4a2:	4023      	ands	r3, r4
 800d4a4:	9306      	str	r3, [sp, #24]
 800d4a6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d4a8:	2310      	movs	r3, #16
 800d4aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ac:	3b0e      	subs	r3, #14
 800d4ae:	4699      	mov	r9, r3
 800d4b0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4b2:	2501      	movs	r5, #1
 800d4b4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4b6:	2703      	movs	r7, #3
 800d4b8:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d4ba:	2605      	movs	r6, #5
 800d4bc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d4be:	a907      	add	r1, sp, #28
 800d4c0:	2090      	movs	r0, #144	; 0x90
 800d4c2:	05c0      	lsls	r0, r0, #23
 800d4c4:	f003 fc94 	bl	8010df0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART6_RX_PIN;
 800d4c8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ca:	464b      	mov	r3, r9
 800d4cc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4ce:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4d0:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d4d2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d4d4:	a907      	add	r1, sp, #28
 800d4d6:	2090      	movs	r0, #144	; 0x90
 800d4d8:	05c0      	lsls	r0, r0, #23
 800d4da:	f003 fc89 	bl	8010df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	201d      	movs	r0, #29
 800d4e4:	f002 fcba 	bl	800fe5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d4e8:	201d      	movs	r0, #29
 800d4ea:	f002 fceb 	bl	800fec4 <HAL_NVIC_EnableIRQ>
}
 800d4ee:	e6f1      	b.n	800d2d4 <HAL_UART_MspInit+0x34>
 800d4f0:	40013800 	.word	0x40013800
 800d4f4:	40004400 	.word	0x40004400
 800d4f8:	40004800 	.word	0x40004800
 800d4fc:	40004c00 	.word	0x40004c00
 800d500:	40005000 	.word	0x40005000
 800d504:	40011400 	.word	0x40011400
 800d508:	40021000 	.word	0x40021000
 800d50c:	48000400 	.word	0x48000400

0800d510 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d510:	2806      	cmp	r0, #6
 800d512:	d80d      	bhi.n	800d530 <GetUart+0x20>
 800d514:	0080      	lsls	r0, r0, #2
 800d516:	4b08      	ldr	r3, [pc, #32]	; (800d538 <GetUart+0x28>)
 800d518:	581b      	ldr	r3, [r3, r0]
 800d51a:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800d51c:	4807      	ldr	r0, [pc, #28]	; (800d53c <GetUart+0x2c>)
 800d51e:	e00a      	b.n	800d536 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800d520:	4807      	ldr	r0, [pc, #28]	; (800d540 <GetUart+0x30>)
 800d522:	e008      	b.n	800d536 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800d524:	4807      	ldr	r0, [pc, #28]	; (800d544 <GetUart+0x34>)
 800d526:	e006      	b.n	800d536 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d528:	4807      	ldr	r0, [pc, #28]	; (800d548 <GetUart+0x38>)
 800d52a:	e004      	b.n	800d536 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800d52c:	4807      	ldr	r0, [pc, #28]	; (800d54c <GetUart+0x3c>)
 800d52e:	e002      	b.n	800d536 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d530:	2000      	movs	r0, #0
 800d532:	e000      	b.n	800d536 <GetUart+0x26>
			return P1uart;	
 800d534:	4806      	ldr	r0, [pc, #24]	; (800d550 <GetUart+0x40>)
	}		
}
 800d536:	4770      	bx	lr
 800d538:	0801a74c 	.word	0x0801a74c
 800d53c:	20006d30 	.word	0x20006d30
 800d540:	20006c4c 	.word	0x20006c4c
 800d544:	20006aec 	.word	0x20006aec
 800d548:	20006b60 	.word	0x20006b60
 800d54c:	20006bd0 	.word	0x20006bd0
 800d550:	20006cbc 	.word	0x20006cbc

0800d554 <writePxMutex>:
{
 800d554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d556:	b083      	sub	sp, #12
 800d558:	0005      	movs	r5, r0
 800d55a:	9100      	str	r1, [sp, #0]
 800d55c:	0017      	movs	r7, r2
 800d55e:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d560:	f7ff ffd6 	bl	800d510 <GetUart>
 800d564:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d566:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800d568:	2800      	cmp	r0, #0
 800d56a:	d016      	beq.n	800d59a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d56c:	00ab      	lsls	r3, r5, #2
 800d56e:	4a0c      	ldr	r2, [pc, #48]	; (800d5a0 <writePxMutex+0x4c>)
 800d570:	5898      	ldr	r0, [r3, r2]
 800d572:	9901      	ldr	r1, [sp, #4]
 800d574:	f000 f93a 	bl	800d7ec <osSemaphoreWait>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d10e      	bne.n	800d59a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d57c:	9b08      	ldr	r3, [sp, #32]
 800d57e:	003a      	movs	r2, r7
 800d580:	9900      	ldr	r1, [sp, #0]
 800d582:	0020      	movs	r0, r4
 800d584:	f005 f9ec 	bl	8012960 <HAL_UART_Transmit>
 800d588:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d58a:	d001      	beq.n	800d590 <writePxMutex+0x3c>
 800d58c:	2803      	cmp	r0, #3
 800d58e:	d1f5      	bne.n	800d57c <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d590:	00ad      	lsls	r5, r5, #2
 800d592:	4b03      	ldr	r3, [pc, #12]	; (800d5a0 <writePxMutex+0x4c>)
 800d594:	58e8      	ldr	r0, [r5, r3]
 800d596:	f000 f955 	bl	800d844 <osSemaphoreRelease>
}
 800d59a:	0030      	movs	r0, r6
 800d59c:	b003      	add	sp, #12
 800d59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a0:	20006a48 	.word	0x20006a48

0800d5a4 <writePxITMutex>:
{
 800d5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	0004      	movs	r4, r0
 800d5aa:	9101      	str	r1, [sp, #4]
 800d5ac:	0017      	movs	r7, r2
 800d5ae:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800d5b0:	f7ff ffae 	bl	800d510 <GetUart>
 800d5b4:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d5b6:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d008      	beq.n	800d5ce <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d5bc:	00a4      	lsls	r4, r4, #2
 800d5be:	4b09      	ldr	r3, [pc, #36]	; (800d5e4 <writePxITMutex+0x40>)
 800d5c0:	58e0      	ldr	r0, [r4, r3]
 800d5c2:	0029      	movs	r1, r5
 800d5c4:	f000 f912 	bl	800d7ec <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d5c8:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d002      	beq.n	800d5d4 <writePxITMutex+0x30>
}
 800d5ce:	0018      	movs	r0, r3
 800d5d0:	b003      	add	sp, #12
 800d5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d5d4:	003a      	movs	r2, r7
 800d5d6:	9901      	ldr	r1, [sp, #4]
 800d5d8:	0030      	movs	r0, r6
 800d5da:	f004 fe2b 	bl	8012234 <HAL_UART_Transmit_IT>
 800d5de:	0003      	movs	r3, r0
 800d5e0:	e7f5      	b.n	800d5ce <writePxITMutex+0x2a>
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	20006a48 	.word	0x20006a48

0800d5e8 <writePxDMAMutex>:
{
 800d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	0004      	movs	r4, r0
 800d5ee:	000f      	movs	r7, r1
 800d5f0:	9201      	str	r2, [sp, #4]
 800d5f2:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800d5f4:	f7ff ff8c 	bl	800d510 <GetUart>
 800d5f8:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d5fa:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d008      	beq.n	800d612 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d600:	00a4      	lsls	r4, r4, #2
 800d602:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <writePxDMAMutex+0x44>)
 800d604:	58e0      	ldr	r0, [r4, r3]
 800d606:	0031      	movs	r1, r6
 800d608:	f000 f8f0 	bl	800d7ec <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d60c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d60e:	2800      	cmp	r0, #0
 800d610:	d002      	beq.n	800d618 <writePxDMAMutex+0x30>
}
 800d612:	0018      	movs	r0, r3
 800d614:	b003      	add	sp, #12
 800d616:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800d618:	0028      	movs	r0, r5
 800d61a:	f7ff f8fd 	bl	800c818 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d61e:	9a01      	ldr	r2, [sp, #4]
 800d620:	0039      	movs	r1, r7
 800d622:	0028      	movs	r0, r5
 800d624:	f004 feb2 	bl	801238c <HAL_UART_Transmit_DMA>
 800d628:	0003      	movs	r3, r0
 800d62a:	e7f2      	b.n	800d612 <writePxDMAMutex+0x2a>
 800d62c:	20006a48 	.word	0x20006a48

0800d630 <UpdateBaudrate>:
{
 800d630:	b510      	push	{r4, lr}
 800d632:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d634:	f7ff ff6c 	bl	800d510 <GetUart>
	huart->Init.BaudRate = baudrate;
 800d638:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d63a:	f005 fa37 	bl	8012aac <HAL_UART_Init>
}
 800d63e:	2000      	movs	r0, #0
 800d640:	bd10      	pop	{r4, pc}
	...

0800d644 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d648:	d003      	beq.n	800d652 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d64a:	2901      	cmp	r1, #1
 800d64c:	d002      	beq.n	800d654 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d64e:	2900      	cmp	r1, #0
 800d650:	d016      	beq.n	800d680 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d652:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d654:	f7fe f816 	bl	800b684 <GetPort>
 800d658:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <SwapUartPins+0x68>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	4d14      	ldr	r5, [pc, #80]	; (800d6b0 <SwapUartPins+0x6c>)
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	3801      	subs	r0, #1
 800d664:	2180      	movs	r1, #128	; 0x80
 800d666:	0209      	lsls	r1, r1, #8
 800d668:	000a      	movs	r2, r1
 800d66a:	4102      	asrs	r2, r0
 800d66c:	5b58      	ldrh	r0, [r3, r5]
 800d66e:	4302      	orrs	r2, r0
 800d670:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d672:	2308      	movs	r3, #8
 800d674:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d676:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d678:	0020      	movs	r0, r4
 800d67a:	f005 fa17 	bl	8012aac <HAL_UART_Init>
 800d67e:	e7e8      	b.n	800d652 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d680:	f7fe f800 	bl	800b684 <GetPort>
 800d684:	4b09      	ldr	r3, [pc, #36]	; (800d6ac <SwapUartPins+0x68>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	3b01      	subs	r3, #1
 800d68a:	4d09      	ldr	r5, [pc, #36]	; (800d6b0 <SwapUartPins+0x6c>)
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	3801      	subs	r0, #1
 800d690:	2180      	movs	r1, #128	; 0x80
 800d692:	0209      	lsls	r1, r1, #8
 800d694:	4101      	asrs	r1, r0
 800d696:	5b5a      	ldrh	r2, [r3, r5]
 800d698:	438a      	bics	r2, r1
 800d69a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d69c:	2308      	movs	r3, #8
 800d69e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d6a4:	0020      	movs	r0, r4
 800d6a6:	f005 fa01 	bl	8012aac <HAL_UART_Init>
}
 800d6aa:	e7d2      	b.n	800d652 <SwapUartPins+0xe>
 800d6ac:	20001076 	.word	0x20001076
 800d6b0:	20006e98 	.word	0x20006e98

0800d6b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d6b4:	4816      	ldr	r0, [pc, #88]	; (800d710 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d6b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d6b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d6ba:	e003      	b.n	800d6c4 <LoopCopyDataInit>

0800d6bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d6bc:	4b15      	ldr	r3, [pc, #84]	; (800d714 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d6be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d6c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d6c2:	3104      	adds	r1, #4

0800d6c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d6c4:	4814      	ldr	r0, [pc, #80]	; (800d718 <LoopForever+0xc>)
  ldr r3, =_edata
 800d6c6:	4b15      	ldr	r3, [pc, #84]	; (800d71c <LoopForever+0x10>)
  adds r2, r0, r1
 800d6c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d6ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d6cc:	d3f6      	bcc.n	800d6bc <CopyDataInit>
  ldr r2, =_sbss
 800d6ce:	4a14      	ldr	r2, [pc, #80]	; (800d720 <LoopForever+0x14>)
  b LoopFillZerobss
 800d6d0:	e002      	b.n	800d6d8 <LoopFillZerobss>

0800d6d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d6d2:	2300      	movs	r3, #0
  str  r3, [r2]
 800d6d4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d6d6:	3204      	adds	r2, #4

0800d6d8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d6d8:	4b12      	ldr	r3, [pc, #72]	; (800d724 <LoopForever+0x18>)
  cmp r2, r3
 800d6da:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d6dc:	d3f9      	bcc.n	800d6d2 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d6de:	4812      	ldr	r0, [pc, #72]	; (800d728 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d6e0:	4912      	ldr	r1, [pc, #72]	; (800d72c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d6e2:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d6e4:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d6e6:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d6e8:	d005      	beq.n	800d6f6 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d6ea:	f000 f82b 	bl	800d744 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d6ee:	f005 fb49 	bl	8012d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d6f2:	f005 fb30 	bl	8012d56 <main>

0800d6f6 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d6f6:	480e      	ldr	r0, [pc, #56]	; (800d730 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d6f8:	490e      	ldr	r1, [pc, #56]	; (800d734 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d6fa:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d6fc:	480e      	ldr	r0, [pc, #56]	; (800d738 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d6fe:	490d      	ldr	r1, [pc, #52]	; (800d734 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d700:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d702:	480e      	ldr	r0, [pc, #56]	; (800d73c <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d704:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d706:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d708:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d70a:	4700      	bx	r0

0800d70c <LoopForever>:


LoopForever:
    b LoopForever
 800d70c:	e7fe      	b.n	800d70c <LoopForever>
 800d70e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d710:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d714:	0801ac08 	.word	0x0801ac08
  ldr r0, =_sdata
 800d718:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d71c:	20000a58 	.word	0x20000a58
  ldr r2, =_sbss
 800d720:	20000a58 	.word	0x20000a58
  ldr r3, = _ebss
 800d724:	20006f40 	.word	0x20006f40
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d728:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d72c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d730:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d734:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d738:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d73c:	1fffd800 	.word	0x1fffd800

0800d740 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d740:	e7fe      	b.n	800d740 <ADC1_COMP_IRQHandler>
	...

0800d744 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d744:	4b11      	ldr	r3, [pc, #68]	; (800d78c <SystemInit+0x48>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	2101      	movs	r1, #1
 800d74a:	430a      	orrs	r2, r1
 800d74c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	480f      	ldr	r0, [pc, #60]	; (800d790 <SystemInit+0x4c>)
 800d752:	4002      	ands	r2, r0
 800d754:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	480e      	ldr	r0, [pc, #56]	; (800d794 <SystemInit+0x50>)
 800d75a:	4002      	ands	r2, r0
 800d75c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	480d      	ldr	r0, [pc, #52]	; (800d798 <SystemInit+0x54>)
 800d762:	4002      	ands	r2, r0
 800d764:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	480c      	ldr	r0, [pc, #48]	; (800d79c <SystemInit+0x58>)
 800d76a:	4002      	ands	r2, r0
 800d76c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d770:	200f      	movs	r0, #15
 800d772:	4382      	bics	r2, r0
 800d774:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d778:	4809      	ldr	r0, [pc, #36]	; (800d7a0 <SystemInit+0x5c>)
 800d77a:	4002      	ands	r2, r0
 800d77c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d77e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d780:	438a      	bics	r2, r1
 800d782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d784:	2200      	movs	r2, #0
 800d786:	609a      	str	r2, [r3, #8]

}
 800d788:	4770      	bx	lr
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	40021000 	.word	0x40021000
 800d790:	08ffb80c 	.word	0x08ffb80c
 800d794:	fef6ffff 	.word	0xfef6ffff
 800d798:	fffbffff 	.word	0xfffbffff
 800d79c:	ffc0ffff 	.word	0xffc0ffff
 800d7a0:	fff0feac 	.word	0xfff0feac

0800d7a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d7a4:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d7a6:	f000 ff55 	bl	800e654 <vTaskStartScheduler>
  
  return osOK;
}
 800d7aa:	2000      	movs	r0, #0
 800d7ac:	bd10      	pop	{r4, pc}

0800d7ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d7ae:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d100      	bne.n	800d7b6 <osDelay+0x8>
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	f001 f889 	bl	800e8cc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	bd10      	pop	{r4, pc}

0800d7be <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d7be:	b510      	push	{r4, lr}
 800d7c0:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d7c2:	2901      	cmp	r1, #1
 800d7c4:	d005      	beq.n	800d7d2 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	f000 faf6 	bl	800ddb8 <xQueueCreateCountingSemaphore>
 800d7cc:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d7ce:	0020      	movs	r0, r4
 800d7d0:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	f000 fac8 	bl	800dd6a <xQueueGenericCreate>
 800d7da:	1e04      	subs	r4, r0, #0
 800d7dc:	d0f7      	beq.n	800d7ce <osSemaphoreCreate+0x10>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	f000 fafc 	bl	800dde0 <xQueueGenericSend>
 800d7e8:	e7f1      	b.n	800d7ce <osSemaphoreCreate+0x10>
	...

0800d7ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d7ec:	b500      	push	{lr}
 800d7ee:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d021      	beq.n	800d83c <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7f8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d010      	beq.n	800d822 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d800:	aa01      	add	r2, sp, #4
 800d802:	2100      	movs	r1, #0
 800d804:	f000 fcae 	bl	800e164 <xQueueReceiveFromISR>
 800d808:	0003      	movs	r3, r0
      return osErrorOS;
 800d80a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d113      	bne.n	800d838 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d810:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800d812:	9b01      	ldr	r3, [sp, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00f      	beq.n	800d838 <osSemaphoreWait+0x4c>
 800d818:	4b09      	ldr	r3, [pc, #36]	; (800d840 <osSemaphoreWait+0x54>)
 800d81a:	2280      	movs	r2, #128	; 0x80
 800d81c:	0552      	lsls	r2, r2, #21
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e00a      	b.n	800d838 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d822:	2300      	movs	r3, #0
 800d824:	000a      	movs	r2, r1
 800d826:	2100      	movs	r1, #0
 800d828:	f000 fbf3 	bl	800e012 <xQueueGenericReceive>
  return osOK;
 800d82c:	3801      	subs	r0, #1
 800d82e:	1e43      	subs	r3, r0, #1
 800d830:	4198      	sbcs	r0, r3
 800d832:	4240      	negs	r0, r0
 800d834:	23ff      	movs	r3, #255	; 0xff
 800d836:	4018      	ands	r0, r3
}
 800d838:	b003      	add	sp, #12
 800d83a:	bd00      	pop	{pc}
    return osErrorParameter;
 800d83c:	2080      	movs	r0, #128	; 0x80
 800d83e:	e7fb      	b.n	800d838 <osSemaphoreWait+0x4c>
 800d840:	e000ed04 	.word	0xe000ed04

0800d844 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d844:	b500      	push	{lr}
 800d846:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00f      	beq.n	800d874 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d854:	a901      	add	r1, sp, #4
 800d856:	f000 fba1 	bl	800df9c <xQueueGiveFromISR>
 800d85a:	0003      	movs	r3, r0
      return osErrorOS;
 800d85c:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d114      	bne.n	800d88c <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800d862:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d864:	9b01      	ldr	r3, [sp, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d010      	beq.n	800d88c <osSemaphoreRelease+0x48>
 800d86a:	4b09      	ldr	r3, [pc, #36]	; (800d890 <osSemaphoreRelease+0x4c>)
 800d86c:	2280      	movs	r2, #128	; 0x80
 800d86e:	0552      	lsls	r2, r2, #21
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	e00b      	b.n	800d88c <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d874:	2300      	movs	r3, #0
 800d876:	2200      	movs	r2, #0
 800d878:	2100      	movs	r1, #0
 800d87a:	f000 fab1 	bl	800dde0 <xQueueGenericSend>
      result = osErrorOS;
 800d87e:	3801      	subs	r0, #1
 800d880:	4243      	negs	r3, r0
 800d882:	4158      	adcs	r0, r3
 800d884:	4240      	negs	r0, r0
 800d886:	23fe      	movs	r3, #254	; 0xfe
 800d888:	4398      	bics	r0, r3
 800d88a:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800d88c:	b003      	add	sp, #12
 800d88e:	bd00      	pop	{pc}
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d894:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d896:	f001 fa0f 	bl	800ecb8 <xTaskGetSchedulerState>
 800d89a:	2801      	cmp	r0, #1
 800d89c:	d001      	beq.n	800d8a2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d89e:	f001 fe85 	bl	800f5ac <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d8a2:	bd10      	pop	{r4, pc}

0800d8a4 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d8a8:	d101      	bne.n	800d8ae <FreeRTOS_CLIRegisterCommand+0xa>
 800d8aa:	b672      	cpsid	i
 800d8ac:	e7fe      	b.n	800d8ac <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d8ae:	2008      	movs	r0, #8
 800d8b0:	f001 feb8 	bl	800f624 <pvPortMalloc>
 800d8b4:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d8b6:	d101      	bne.n	800d8bc <FreeRTOS_CLIRegisterCommand+0x18>
 800d8b8:	b672      	cpsid	i
 800d8ba:	e7fe      	b.n	800d8ba <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d8bc:	f001 fe30 	bl	800f520 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d8c0:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d8c6:	4b04      	ldr	r3, [pc, #16]	; (800d8d8 <FreeRTOS_CLIRegisterCommand+0x34>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d8cc:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d8ce:	f001 fe33 	bl	800f538 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d8d2:	2001      	movs	r0, #1
 800d8d4:	bd70      	pop	{r4, r5, r6, pc}
 800d8d6:	46c0      	nop			; (mov r8, r8)
 800d8d8:	20000094 	.word	0x20000094

0800d8dc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8de:	46d6      	mov	lr, sl
 800d8e0:	b500      	push	{lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	9001      	str	r0, [sp, #4]
 800d8e6:	9102      	str	r1, [sp, #8]
 800d8e8:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d8ea:	4b37      	ldr	r3, [pc, #220]	; (800d9c8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00e      	beq.n	800d910 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	9a01      	ldr	r2, [sp, #4]
 800d8f8:	9903      	ldr	r1, [sp, #12]
 800d8fa:	9802      	ldr	r0, [sp, #8]
 800d8fc:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d102      	bne.n	800d908 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d902:	4b31      	ldr	r3, [pc, #196]	; (800d9c8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d904:	2200      	movs	r2, #0
 800d906:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d908:	b004      	add	sp, #16
 800d90a:	bc04      	pop	{r2}
 800d90c:	4692      	mov	sl, r2
 800d90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d910:	4d2e      	ldr	r5, [pc, #184]	; (800d9cc <FreeRTOS_CLIProcessCommand+0xf0>)
 800d912:	4a2d      	ldr	r2, [pc, #180]	; (800d9c8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d914:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d916:	3320      	adds	r3, #32
 800d918:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d91a:	0017      	movs	r7, r2
 800d91c:	e00a      	b.n	800d934 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d91e:	0002      	movs	r2, r0
 800d920:	0021      	movs	r1, r4
 800d922:	9801      	ldr	r0, [sp, #4]
 800d924:	f005 fef8 	bl	8013718 <strncmp>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d00e      	beq.n	800d94a <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d92c:	686d      	ldr	r5, [r5, #4]
 800d92e:	603d      	str	r5, [r7, #0]
 800d930:	2d00      	cmp	r5, #0
 800d932:	d012      	beq.n	800d95a <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d934:	682e      	ldr	r6, [r5, #0]
 800d936:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d938:	0020      	movs	r0, r4
 800d93a:	f7f2 fbed 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d93e:	9b01      	ldr	r3, [sp, #4]
 800d940:	5c1b      	ldrb	r3, [r3, r0]
 800d942:	4652      	mov	r2, sl
 800d944:	4393      	bics	r3, r2
 800d946:	d1f1      	bne.n	800d92c <FreeRTOS_CLIProcessCommand+0x50>
 800d948:	e7e9      	b.n	800d91e <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d94a:	200c      	movs	r0, #12
 800d94c:	5630      	ldrsb	r0, [r6, r0]
 800d94e:	2800      	cmp	r0, #0
 800d950:	da0a      	bge.n	800d968 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d952:	4b1d      	ldr	r3, [pc, #116]	; (800d9c8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1cb      	bne.n	800d8f2 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d95a:	9a03      	ldr	r2, [sp, #12]
 800d95c:	491c      	ldr	r1, [pc, #112]	; (800d9d0 <FreeRTOS_CLIProcessCommand+0xf4>)
 800d95e:	9802      	ldr	r0, [sp, #8]
 800d960:	f005 feeb 	bl	801373a <strncpy>
		xReturn = pdFALSE;
 800d964:	2000      	movs	r0, #0
	return xReturn;
 800d966:	e7cf      	b.n	800d908 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d968:	9a01      	ldr	r2, [sp, #4]
 800d96a:	2300      	movs	r3, #0
 800d96c:	56d3      	ldrsb	r3, [r2, r3]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d027      	beq.n	800d9c2 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800d972:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800d974:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d976:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800d978:	2501      	movs	r5, #1
 800d97a:	e009      	b.n	800d990 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800d97c:	2901      	cmp	r1, #1
 800d97e:	d002      	beq.n	800d986 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800d980:	3401      	adds	r4, #1
 800d982:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d984:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800d986:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800d988:	2300      	movs	r3, #0
 800d98a:	56d3      	ldrsb	r3, [r2, r3]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800d990:	2b20      	cmp	r3, #32
 800d992:	d0f3      	beq.n	800d97c <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800d994:	0031      	movs	r1, r6
 800d996:	e7f6      	b.n	800d986 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d998:	2901      	cmp	r1, #1
 800d99a:	d00f      	beq.n	800d9bc <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d99c:	4b0a      	ldr	r3, [pc, #40]	; (800d9c8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d0da      	beq.n	800d95a <FreeRTOS_CLIProcessCommand+0x7e>
 800d9a4:	42a0      	cmp	r0, r4
 800d9a6:	d0a4      	beq.n	800d8f2 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d9a8:	9a03      	ldr	r2, [sp, #12]
 800d9aa:	490a      	ldr	r1, [pc, #40]	; (800d9d4 <FreeRTOS_CLIProcessCommand+0xf8>)
 800d9ac:	9802      	ldr	r0, [sp, #8]
 800d9ae:	f005 fec4 	bl	801373a <strncpy>
		pxCommand = NULL;
 800d9b2:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <FreeRTOS_CLIProcessCommand+0xec>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e7a5      	b.n	800d908 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d9bc:	3c01      	subs	r4, #1
 800d9be:	b264      	sxtb	r4, r4
 800d9c0:	e7ec      	b.n	800d99c <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800d9c2:	2400      	movs	r4, #0
 800d9c4:	e7ea      	b.n	800d99c <FreeRTOS_CLIProcessCommand+0xc0>
 800d9c6:	46c0      	nop			; (mov r8, r8)
 800d9c8:	20001d54 	.word	0x20001d54
 800d9cc:	20000098 	.word	0x20000098
 800d9d0:	0801a7c0 	.word	0x0801a7c0
 800d9d4:	0801a768 	.word	0x0801a768

0800d9d8 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d9d8:	4800      	ldr	r0, [pc, #0]	; (800d9dc <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d9da:	4770      	bx	lr
 800d9dc:	20001aec 	.word	0x20001aec

0800d9e0 <FreeRTOS_CLIGetParameter>:
{
 800d9e0:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d9e6:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d9e8:	2900      	cmp	r1, #0
 800d9ea:	d10b      	bne.n	800da04 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	e02a      	b.n	800da46 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800d9f0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	56c3      	ldrsb	r3, [r0, r3]
 800d9f6:	2b20      	cmp	r3, #32
 800d9f8:	d0fa      	beq.n	800d9f0 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d022      	beq.n	800da44 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800d9fe:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800da00:	42a1      	cmp	r1, r4
 800da02:	d00d      	beq.n	800da20 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da04:	2300      	movs	r3, #0
 800da06:	56c3      	ldrsb	r3, [r0, r3]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d01f      	beq.n	800da4c <FreeRTOS_CLIGetParameter+0x6c>
 800da0c:	2b20      	cmp	r3, #32
 800da0e:	d0ef      	beq.n	800d9f0 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800da10:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da12:	2300      	movs	r3, #0
 800da14:	56c3      	ldrsb	r3, [r0, r3]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d018      	beq.n	800da4c <FreeRTOS_CLIGetParameter+0x6c>
 800da1a:	2b20      	cmp	r3, #32
 800da1c:	d1f8      	bne.n	800da10 <FreeRTOS_CLIGetParameter+0x30>
 800da1e:	e7e7      	b.n	800d9f0 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da20:	7803      	ldrb	r3, [r0, #0]
 800da22:	2120      	movs	r1, #32
 800da24:	438b      	bics	r3, r1
 800da26:	d00f      	beq.n	800da48 <FreeRTOS_CLIGetParameter+0x68>
 800da28:	0004      	movs	r4, r0
 800da2a:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800da2c:	6813      	ldr	r3, [r2, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800da32:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da34:	7821      	ldrb	r1, [r4, #0]
 800da36:	43a9      	bics	r1, r5
 800da38:	d1f8      	bne.n	800da2c <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800da3a:	1e5a      	subs	r2, r3, #1
 800da3c:	4193      	sbcs	r3, r2
 800da3e:	425b      	negs	r3, r3
 800da40:	4018      	ands	r0, r3
 800da42:	e000      	b.n	800da46 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800da44:	2000      	movs	r0, #0
}
 800da46:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800da48:	2000      	movs	r0, #0
 800da4a:	e7fc      	b.n	800da46 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800da4c:	2300      	movs	r3, #0
 800da4e:	56c3      	ldrsb	r3, [r0, r3]
 800da50:	e7d3      	b.n	800d9fa <FreeRTOS_CLIGetParameter+0x1a>
	...

0800da54 <prvHelpCommand>:
{
 800da54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da56:	b083      	sub	sp, #12
 800da58:	0004      	movs	r4, r0
 800da5a:	000d      	movs	r5, r1
 800da5c:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800da62:	aa01      	add	r2, sp, #4
 800da64:	2101      	movs	r1, #1
 800da66:	f7ff ffbb 	bl	800d9e0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d027      	beq.n	800dabe <prvHelpCommand+0x6a>
 800da6e:	2206      	movs	r2, #6
 800da70:	4930      	ldr	r1, [pc, #192]	; (800db34 <prvHelpCommand+0xe0>)
 800da72:	f005 fe51 	bl	8013718 <strncmp>
 800da76:	2800      	cmp	r0, #0
 800da78:	d149      	bne.n	800db0e <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800da7a:	4b2f      	ldr	r3, [pc, #188]	; (800db38 <prvHelpCommand+0xe4>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b07      	cmp	r3, #7
 800da80:	d012      	beq.n	800daa8 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800da82:	1c5f      	adds	r7, r3, #1
 800da84:	b2ff      	uxtb	r7, r7
 800da86:	4a2c      	ldr	r2, [pc, #176]	; (800db38 <prvHelpCommand+0xe4>)
 800da88:	7017      	strb	r7, [r2, #0]
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a2b      	ldr	r2, [pc, #172]	; (800db3c <prvHelpCommand+0xe8>)
 800da8e:	5899      	ldr	r1, [r3, r2]
 800da90:	002a      	movs	r2, r5
 800da92:	0020      	movs	r0, r4
 800da94:	f005 fe51 	bl	801373a <strncpy>
			xReturn = pdTRUE;
 800da98:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800da9a:	2f07      	cmp	r7, #7
 800da9c:	d137      	bne.n	800db0e <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800da9e:	4b26      	ldr	r3, [pc, #152]	; (800db38 <prvHelpCommand+0xe4>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
 800daa4:	2600      	movs	r6, #0
 800daa6:	e032      	b.n	800db0e <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800daa8:	4b23      	ldr	r3, [pc, #140]	; (800db38 <prvHelpCommand+0xe4>)
 800daaa:	2201      	movs	r2, #1
 800daac:	701a      	strb	r2, [r3, #0]
 800daae:	4b23      	ldr	r3, [pc, #140]	; (800db3c <prvHelpCommand+0xe8>)
 800dab0:	6819      	ldr	r1, [r3, #0]
 800dab2:	002a      	movs	r2, r5
 800dab4:	0020      	movs	r0, r4
 800dab6:	f005 fe40 	bl	801373a <strncpy>
			xReturn = pdTRUE;
 800daba:	2601      	movs	r6, #1
 800dabc:	e027      	b.n	800db0e <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800dabe:	4b20      	ldr	r3, [pc, #128]	; (800db40 <prvHelpCommand+0xec>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d026      	beq.n	800db14 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800dac6:	4b1f      	ldr	r3, [pc, #124]	; (800db44 <prvHelpCommand+0xf0>)
 800dac8:	781a      	ldrb	r2, [r3, #0]
 800daca:	4b1f      	ldr	r3, [pc, #124]	; (800db48 <prvHelpCommand+0xf4>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d927      	bls.n	800db22 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800dad2:	002a      	movs	r2, r5
 800dad4:	3a08      	subs	r2, #8
 800dad6:	4b1a      	ldr	r3, [pc, #104]	; (800db40 <prvHelpCommand+0xec>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6859      	ldr	r1, [r3, #4]
 800dade:	0020      	movs	r0, r4
 800dae0:	3008      	adds	r0, #8
 800dae2:	f005 fe2a 	bl	801373a <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800dae6:	1c60      	adds	r0, r4, #1
 800dae8:	4918      	ldr	r1, [pc, #96]	; (800db4c <prvHelpCommand+0xf8>)
 800daea:	f005 fe0d 	bl	8013708 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800daee:	2328      	movs	r3, #40	; 0x28
 800daf0:	7023      	strb	r3, [r4, #0]
 800daf2:	3301      	adds	r3, #1
 800daf4:	71a3      	strb	r3, [r4, #6]
 800daf6:	3b09      	subs	r3, #9
 800daf8:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800dafa:	4b11      	ldr	r3, [pc, #68]	; (800db40 <prvHelpCommand+0xec>)
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	6856      	ldr	r6, [r2, #4]
 800db00:	601e      	str	r6, [r3, #0]
		counter++;
 800db02:	4a10      	ldr	r2, [pc, #64]	; (800db44 <prvHelpCommand+0xf0>)
 800db04:	7813      	ldrb	r3, [r2, #0]
 800db06:	3301      	adds	r3, #1
 800db08:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800db0a:	1e73      	subs	r3, r6, #1
 800db0c:	419e      	sbcs	r6, r3
}
 800db0e:	0030      	movs	r0, r6
 800db10:	b003      	add	sp, #12
 800db12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800db14:	4b0a      	ldr	r3, [pc, #40]	; (800db40 <prvHelpCommand+0xec>)
 800db16:	4a0e      	ldr	r2, [pc, #56]	; (800db50 <prvHelpCommand+0xfc>)
 800db18:	601a      	str	r2, [r3, #0]
			counter = 1;
 800db1a:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <prvHelpCommand+0xf0>)
 800db1c:	2201      	movs	r2, #1
 800db1e:	701a      	strb	r2, [r3, #0]
 800db20:	e7d1      	b.n	800dac6 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800db22:	4b07      	ldr	r3, [pc, #28]	; (800db40 <prvHelpCommand+0xec>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6859      	ldr	r1, [r3, #4]
 800db2a:	002a      	movs	r2, r5
 800db2c:	0020      	movs	r0, r4
 800db2e:	f005 fe04 	bl	801373a <strncpy>
 800db32:	e7e2      	b.n	800dafa <prvHelpCommand+0xa6>
 800db34:	080188a0 	.word	0x080188a0
 800db38:	20001d5c 	.word	0x20001d5c
 800db3c:	20000054 	.word	0x20000054
 800db40:	20001d58 	.word	0x20001d58
 800db44:	20001d50 	.word	0x20001d50
 800db48:	2000694c 	.word	0x2000694c
 800db4c:	08017e88 	.word	0x08017e88
 800db50:	20000098 	.word	0x20000098

0800db54 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db54:	0003      	movs	r3, r0
 800db56:	3308      	adds	r3, #8
 800db58:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db5a:	2201      	movs	r2, #1
 800db5c:	4252      	negs	r2, r2
 800db5e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db60:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db62:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db68:	4770      	bx	lr

0800db6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db6e:	4770      	bx	lr

0800db70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800db70:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db72:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db78:	689a      	ldr	r2, [r3, #8]
 800db7a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db7c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800db7e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800db80:	6803      	ldr	r3, [r0, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	6003      	str	r3, [r0, #0]
}
 800db86:	4770      	bx	lr

0800db88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db88:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db8a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db8c:	0002      	movs	r2, r0
 800db8e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800db90:	1c63      	adds	r3, r4, #1
 800db92:	d102      	bne.n	800db9a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800db94:	6902      	ldr	r2, [r0, #16]
 800db96:	e004      	b.n	800dba2 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db98:	001a      	movs	r2, r3
 800db9a:	6853      	ldr	r3, [r2, #4]
 800db9c:	681d      	ldr	r5, [r3, #0]
 800db9e:	42a5      	cmp	r5, r4
 800dba0:	d9fa      	bls.n	800db98 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dba2:	6853      	ldr	r3, [r2, #4]
 800dba4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dba6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dba8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800dbaa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dbac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800dbae:	6803      	ldr	r3, [r0, #0]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	6003      	str	r3, [r0, #0]
}
 800dbb4:	bd30      	pop	{r4, r5, pc}

0800dbb6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dbb6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbb8:	6842      	ldr	r2, [r0, #4]
 800dbba:	6881      	ldr	r1, [r0, #8]
 800dbbc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dbbe:	6882      	ldr	r2, [r0, #8]
 800dbc0:	6841      	ldr	r1, [r0, #4]
 800dbc2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dbc4:	685a      	ldr	r2, [r3, #4]
 800dbc6:	4282      	cmp	r2, r0
 800dbc8:	d005      	beq.n	800dbd6 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800dbca:	2200      	movs	r2, #0
 800dbcc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	1e50      	subs	r0, r2, #1
 800dbd2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800dbd4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dbd6:	6882      	ldr	r2, [r0, #8]
 800dbd8:	605a      	str	r2, [r3, #4]
 800dbda:	e7f6      	b.n	800dbca <uxListRemove+0x14>

0800dbdc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	0004      	movs	r4, r0
 800dbe0:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbe2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dbe4:	2a00      	cmp	r2, #0
 800dbe6:	d10d      	bne.n	800dc04 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800dbe8:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800dbf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dbf8:	6860      	ldr	r0, [r4, #4]
 800dbfa:	f001 f8ab 	bl	800ed54 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6063      	str	r3, [r4, #4]
 800dc02:	e7f5      	b.n	800dbf0 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800dc04:	2d00      	cmp	r5, #0
 800dc06:	d10e      	bne.n	800dc26 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800dc08:	6880      	ldr	r0, [r0, #8]
 800dc0a:	f005 fb3e 	bl	801328a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dc12:	4694      	mov	ip, r2
 800dc14:	4463      	add	r3, ip
 800dc16:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800dc18:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc1a:	6862      	ldr	r2, [r4, #4]
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d3e7      	bcc.n	800dbf0 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	60a3      	str	r3, [r4, #8]
 800dc24:	e7e4      	b.n	800dbf0 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc26:	68c0      	ldr	r0, [r0, #12]
 800dc28:	f005 fb2f 	bl	801328a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dc2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc2e:	425a      	negs	r2, r3
 800dc30:	68e3      	ldr	r3, [r4, #12]
 800dc32:	189b      	adds	r3, r3, r2
 800dc34:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc36:	6821      	ldr	r1, [r4, #0]
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	d203      	bcs.n	800dc44 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dc3c:	6863      	ldr	r3, [r4, #4]
 800dc3e:	469c      	mov	ip, r3
 800dc40:	4462      	add	r2, ip
 800dc42:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800dc44:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800dc46:	2d02      	cmp	r5, #2
 800dc48:	d1d2      	bne.n	800dbf0 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0cf      	beq.n	800dbf0 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800dc50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc52:	3b01      	subs	r3, #1
 800dc54:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc56:	e7cb      	b.n	800dbf0 <prvCopyDataToQueue+0x14>

0800dc58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dc5e:	2a00      	cmp	r2, #0
 800dc60:	d00b      	beq.n	800dc7a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dc62:	68c3      	ldr	r3, [r0, #12]
 800dc64:	189b      	adds	r3, r3, r2
 800dc66:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc68:	6841      	ldr	r1, [r0, #4]
 800dc6a:	428b      	cmp	r3, r1
 800dc6c:	d301      	bcc.n	800dc72 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dc6e:	6803      	ldr	r3, [r0, #0]
 800dc70:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dc72:	68c1      	ldr	r1, [r0, #12]
 800dc74:	0020      	movs	r0, r4
 800dc76:	f005 fb08 	bl	801328a <memcpy>
	}
}
 800dc7a:	bd10      	pop	{r4, pc}

0800dc7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc7c:	b570      	push	{r4, r5, r6, lr}
 800dc7e:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc80:	f001 fc4e 	bl	800f520 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dd04      	ble.n	800dc94 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc8a:	0025      	movs	r5, r4
 800dc8c:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d11f      	bne.n	800dcd4 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800dc94:	2301      	movs	r3, #1
 800dc96:	425b      	negs	r3, r3
 800dc98:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800dc9a:	f001 fc4d 	bl	800f538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc9e:	f001 fc3f 	bl	800f520 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dd04      	ble.n	800dcb2 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dca8:	0025      	movs	r5, r4
 800dcaa:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcac:	6923      	ldr	r3, [r4, #16]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d121      	bne.n	800dcf6 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	425b      	negs	r3, r3
 800dcb6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dcb8:	f001 fc3e 	bl	800f538 <vPortExitCritical>
}
 800dcbc:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800dcbe:	f000 fff5 	bl	800ecac <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800dcc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dcc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	dde2      	ble.n	800dc94 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d0df      	beq.n	800dc94 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcd4:	0028      	movs	r0, r5
 800dcd6:	f000 ff67 	bl	800eba8 <xTaskRemoveFromEventList>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d0f1      	beq.n	800dcc2 <prvUnlockQueue+0x46>
 800dcde:	e7ee      	b.n	800dcbe <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800dce0:	f000 ffe4 	bl	800ecac <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800dce4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dce6:	3b01      	subs	r3, #1
 800dce8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dcea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dde0      	ble.n	800dcb2 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf0:	6923      	ldr	r3, [r4, #16]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d0dd      	beq.n	800dcb2 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcf6:	0028      	movs	r0, r5
 800dcf8:	f000 ff56 	bl	800eba8 <xTaskRemoveFromEventList>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d0f1      	beq.n	800dce4 <prvUnlockQueue+0x68>
 800dd00:	e7ee      	b.n	800dce0 <prvUnlockQueue+0x64>

0800dd02 <xQueueGenericReset>:
{
 800dd02:	b570      	push	{r4, r5, r6, lr}
 800dd04:	0004      	movs	r4, r0
 800dd06:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d101      	bne.n	800dd10 <xQueueGenericReset+0xe>
 800dd0c:	b672      	cpsid	i
 800dd0e:	e7fe      	b.n	800dd0e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800dd10:	f001 fc06 	bl	800f520 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dd14:	6822      	ldr	r2, [r4, #0]
 800dd16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dd18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd1a:	434b      	muls	r3, r1
 800dd1c:	18d0      	adds	r0, r2, r3
 800dd1e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd20:	2000      	movs	r0, #0
 800dd22:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd24:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dd26:	1a5b      	subs	r3, r3, r1
 800dd28:	18d3      	adds	r3, r2, r3
 800dd2a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	425b      	negs	r3, r3
 800dd30:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dd32:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dd34:	2d00      	cmp	r5, #0
 800dd36:	d10f      	bne.n	800dd58 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d103      	bne.n	800dd46 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800dd3e:	f001 fbfb 	bl	800f538 <vPortExitCritical>
}
 800dd42:	2001      	movs	r0, #1
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dd46:	0020      	movs	r0, r4
 800dd48:	3010      	adds	r0, #16
 800dd4a:	f000 ff2d 	bl	800eba8 <xTaskRemoveFromEventList>
 800dd4e:	2801      	cmp	r0, #1
 800dd50:	d1f5      	bne.n	800dd3e <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800dd52:	f001 fbd9 	bl	800f508 <vPortYield>
 800dd56:	e7f2      	b.n	800dd3e <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd58:	0020      	movs	r0, r4
 800dd5a:	3010      	adds	r0, #16
 800dd5c:	f7ff fefa 	bl	800db54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd60:	0020      	movs	r0, r4
 800dd62:	3024      	adds	r0, #36	; 0x24
 800dd64:	f7ff fef6 	bl	800db54 <vListInitialise>
 800dd68:	e7e9      	b.n	800dd3e <xQueueGenericReset+0x3c>

0800dd6a <xQueueGenericCreate>:
{
 800dd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6c:	0005      	movs	r5, r0
 800dd6e:	000e      	movs	r6, r1
 800dd70:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d101      	bne.n	800dd7a <xQueueGenericCreate+0x10>
 800dd76:	b672      	cpsid	i
 800dd78:	e7fe      	b.n	800dd78 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd7a:	2900      	cmp	r1, #0
 800dd7c:	d00c      	beq.n	800dd98 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd7e:	0008      	movs	r0, r1
 800dd80:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dd82:	3055      	adds	r0, #85	; 0x55
 800dd84:	f001 fc4e 	bl	800f624 <pvPortMalloc>
 800dd88:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dd8a:	d101      	bne.n	800dd90 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800dd8c:	b672      	cpsid	i
 800dd8e:	e7fe      	b.n	800dd8e <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dd90:	0003      	movs	r3, r0
 800dd92:	3354      	adds	r3, #84	; 0x54
 800dd94:	6003      	str	r3, [r0, #0]
 800dd96:	e005      	b.n	800dda4 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dd98:	2054      	movs	r0, #84	; 0x54
 800dd9a:	f001 fc43 	bl	800f624 <pvPortMalloc>
 800dd9e:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dda0:	d0f4      	beq.n	800dd8c <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dda2:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dda4:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dda6:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dda8:	2101      	movs	r1, #1
 800ddaa:	0020      	movs	r0, r4
 800ddac:	f7ff ffa9 	bl	800dd02 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ddb0:	2350      	movs	r3, #80	; 0x50
 800ddb2:	54e7      	strb	r7, [r4, r3]
}
 800ddb4:	0020      	movs	r0, r4
 800ddb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ddb8 <xQueueCreateCountingSemaphore>:
	{
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d101      	bne.n	800ddc4 <xQueueCreateCountingSemaphore+0xc>
 800ddc0:	b672      	cpsid	i
 800ddc2:	e7fe      	b.n	800ddc2 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ddc4:	4288      	cmp	r0, r1
 800ddc6:	d201      	bcs.n	800ddcc <xQueueCreateCountingSemaphore+0x14>
 800ddc8:	b672      	cpsid	i
 800ddca:	e7fe      	b.n	800ddca <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddcc:	2202      	movs	r2, #2
 800ddce:	2100      	movs	r1, #0
 800ddd0:	f7ff ffcb 	bl	800dd6a <xQueueGenericCreate>
		if( xHandle != NULL )
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d001      	beq.n	800dddc <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ddd8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ddda:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dddc:	b672      	cpsid	i
 800ddde:	e7fe      	b.n	800ddde <xQueueCreateCountingSemaphore+0x26>

0800dde0 <xQueueGenericSend>:
{
 800dde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dde2:	46ce      	mov	lr, r9
 800dde4:	b500      	push	{lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	0004      	movs	r4, r0
 800ddea:	9100      	str	r1, [sp, #0]
 800ddec:	9201      	str	r2, [sp, #4]
 800ddee:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d007      	beq.n	800de04 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddf4:	9b00      	ldr	r3, [sp, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <xQueueGenericSend+0x28>
 800ddfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <xQueueGenericSend+0x28>
 800de00:	b672      	cpsid	i
 800de02:	e7fe      	b.n	800de02 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800de04:	b672      	cpsid	i
 800de06:	e7fe      	b.n	800de06 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de08:	2d02      	cmp	r5, #2
 800de0a:	d104      	bne.n	800de16 <xQueueGenericSend+0x36>
 800de0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d001      	beq.n	800de16 <xQueueGenericSend+0x36>
 800de12:	b672      	cpsid	i
 800de14:	e7fe      	b.n	800de14 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de16:	f000 ff4f 	bl	800ecb8 <xTaskGetSchedulerState>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d104      	bne.n	800de28 <xQueueGenericSend+0x48>
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d004      	beq.n	800de2e <xQueueGenericSend+0x4e>
 800de24:	b672      	cpsid	i
 800de26:	e7fe      	b.n	800de26 <xQueueGenericSend+0x46>
 800de28:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800de2a:	2700      	movs	r7, #0
 800de2c:	e02f      	b.n	800de8e <xQueueGenericSend+0xae>
 800de2e:	2600      	movs	r6, #0
 800de30:	e7fb      	b.n	800de2a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de32:	002a      	movs	r2, r5
 800de34:	9900      	ldr	r1, [sp, #0]
 800de36:	0020      	movs	r0, r4
 800de38:	f7ff fed0 	bl	800dbdc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d104      	bne.n	800de4c <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800de42:	2800      	cmp	r0, #0
 800de44:	d00a      	beq.n	800de5c <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800de46:	f001 fb5f 	bl	800f508 <vPortYield>
 800de4a:	e007      	b.n	800de5c <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800de4c:	0020      	movs	r0, r4
 800de4e:	3024      	adds	r0, #36	; 0x24
 800de50:	f000 feaa 	bl	800eba8 <xTaskRemoveFromEventList>
 800de54:	2801      	cmp	r0, #1
 800de56:	d101      	bne.n	800de5c <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800de58:	f001 fb56 	bl	800f508 <vPortYield>
				taskEXIT_CRITICAL();
 800de5c:	f001 fb6c 	bl	800f538 <vPortExitCritical>
				return pdPASS;
 800de60:	2001      	movs	r0, #1
}
 800de62:	b004      	add	sp, #16
 800de64:	bc04      	pop	{r2}
 800de66:	4691      	mov	r9, r2
 800de68:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800de6a:	f001 fb65 	bl	800f538 <vPortExitCritical>
					return errQUEUE_FULL;
 800de6e:	2000      	movs	r0, #0
 800de70:	e7f7      	b.n	800de62 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800de72:	a802      	add	r0, sp, #8
 800de74:	f000 fed8 	bl	800ec28 <vTaskSetTimeOutState>
 800de78:	e016      	b.n	800dea8 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800de7a:	6467      	str	r7, [r4, #68]	; 0x44
 800de7c:	e01d      	b.n	800deba <xQueueGenericSend+0xda>
 800de7e:	64a7      	str	r7, [r4, #72]	; 0x48
 800de80:	e01e      	b.n	800dec0 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800de82:	0020      	movs	r0, r4
 800de84:	f7ff fefa 	bl	800dc7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de88:	f000 fcb0 	bl	800e7ec <xTaskResumeAll>
 800de8c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800de8e:	f001 fb47 	bl	800f520 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de96:	4293      	cmp	r3, r2
 800de98:	d3cb      	bcc.n	800de32 <xQueueGenericSend+0x52>
 800de9a:	2d02      	cmp	r5, #2
 800de9c:	d0c9      	beq.n	800de32 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d0e2      	beq.n	800de6a <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	d0e4      	beq.n	800de72 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800dea8:	f001 fb46 	bl	800f538 <vPortExitCritical>
		vTaskSuspendAll();
 800deac:	f000 fbfe 	bl	800e6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deb0:	f001 fb36 	bl	800f520 <vPortEnterCritical>
 800deb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800deb6:	3301      	adds	r3, #1
 800deb8:	d0df      	beq.n	800de7a <xQueueGenericSend+0x9a>
 800deba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800debc:	3301      	adds	r3, #1
 800debe:	d0de      	beq.n	800de7e <xQueueGenericSend+0x9e>
 800dec0:	f001 fb3a 	bl	800f538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dec4:	a901      	add	r1, sp, #4
 800dec6:	a802      	add	r0, sp, #8
 800dec8:	f000 febe 	bl	800ec48 <xTaskCheckForTimeOut>
 800decc:	2800      	cmp	r0, #0
 800dece:	d117      	bne.n	800df00 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ded0:	f001 fb26 	bl	800f520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ded4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ded6:	4699      	mov	r9, r3
 800ded8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800deda:	f001 fb2d 	bl	800f538 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dede:	45b1      	cmp	r9, r6
 800dee0:	d1cf      	bne.n	800de82 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dee2:	0020      	movs	r0, r4
 800dee4:	3010      	adds	r0, #16
 800dee6:	9901      	ldr	r1, [sp, #4]
 800dee8:	f000 fe20 	bl	800eb2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800deec:	0020      	movs	r0, r4
 800deee:	f7ff fec5 	bl	800dc7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800def2:	f000 fc7b 	bl	800e7ec <xTaskResumeAll>
 800def6:	2800      	cmp	r0, #0
 800def8:	d1c8      	bne.n	800de8c <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800defa:	f001 fb05 	bl	800f508 <vPortYield>
 800defe:	e7c5      	b.n	800de8c <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800df00:	0020      	movs	r0, r4
 800df02:	f7ff febb 	bl	800dc7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df06:	f000 fc71 	bl	800e7ec <xTaskResumeAll>
			return errQUEUE_FULL;
 800df0a:	2000      	movs	r0, #0
 800df0c:	e7a9      	b.n	800de62 <xQueueGenericSend+0x82>

0800df0e <xQueueGenericSendFromISR>:
{
 800df0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df10:	b083      	sub	sp, #12
 800df12:	0004      	movs	r4, r0
 800df14:	000d      	movs	r5, r1
 800df16:	0016      	movs	r6, r2
 800df18:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d006      	beq.n	800df2c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df1e:	2900      	cmp	r1, #0
 800df20:	d106      	bne.n	800df30 <xQueueGenericSendFromISR+0x22>
 800df22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <xQueueGenericSendFromISR+0x22>
 800df28:	b672      	cpsid	i
 800df2a:	e7fe      	b.n	800df2a <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800df2c:	b672      	cpsid	i
 800df2e:	e7fe      	b.n	800df2e <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df30:	2f02      	cmp	r7, #2
 800df32:	d12a      	bne.n	800df8a <xQueueGenericSendFromISR+0x7c>
 800df34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800df36:	2b01      	cmp	r3, #1
 800df38:	d011      	beq.n	800df5e <xQueueGenericSendFromISR+0x50>
 800df3a:	b672      	cpsid	i
 800df3c:	e7fe      	b.n	800df3c <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800df3e:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df42:	2b00      	cmp	r3, #0
 800df44:	d01b      	beq.n	800df7e <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df46:	0020      	movs	r0, r4
 800df48:	3024      	adds	r0, #36	; 0x24
 800df4a:	f000 fe2d 	bl	800eba8 <xTaskRemoveFromEventList>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d015      	beq.n	800df7e <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800df52:	2e00      	cmp	r6, #0
 800df54:	d001      	beq.n	800df5a <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df56:	6035      	str	r5, [r6, #0]
 800df58:	e011      	b.n	800df7e <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800df5a:	2501      	movs	r5, #1
 800df5c:	e00f      	b.n	800df7e <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df5e:	f001 fafb 	bl	800f558 <ulSetInterruptMaskFromISR>
 800df62:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df66:	003a      	movs	r2, r7
 800df68:	0029      	movs	r1, r5
 800df6a:	0020      	movs	r0, r4
 800df6c:	f7ff fe36 	bl	800dbdc <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800df70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df72:	3301      	adds	r3, #1
 800df74:	d0e3      	beq.n	800df3e <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800df76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df78:	3301      	adds	r3, #1
 800df7a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800df7c:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800df7e:	9801      	ldr	r0, [sp, #4]
 800df80:	f001 faef 	bl	800f562 <vClearInterruptMaskFromISR>
}
 800df84:	0028      	movs	r0, r5
 800df86:	b003      	add	sp, #12
 800df88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df8a:	f001 fae5 	bl	800f558 <ulSetInterruptMaskFromISR>
 800df8e:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800df94:	4293      	cmp	r3, r2
 800df96:	d3e6      	bcc.n	800df66 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800df98:	2500      	movs	r5, #0
 800df9a:	e7f0      	b.n	800df7e <xQueueGenericSendFromISR+0x70>

0800df9c <xQueueGiveFromISR>:
{
 800df9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9e:	0004      	movs	r4, r0
 800dfa0:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d004      	beq.n	800dfb0 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dfa6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d003      	beq.n	800dfb4 <xQueueGiveFromISR+0x18>
 800dfac:	b672      	cpsid	i
 800dfae:	e7fe      	b.n	800dfae <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800dfb0:	b672      	cpsid	i
 800dfb2:	e7fe      	b.n	800dfb2 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dfb4:	6803      	ldr	r3, [r0, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d01f      	beq.n	800dffa <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfba:	f001 facd 	bl	800f558 <ulSetInterruptMaskFromISR>
 800dfbe:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dfc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800dfc2:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dfc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d212      	bcs.n	800dff0 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800dfca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfcc:	3301      	adds	r3, #1
 800dfce:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dfd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	d116      	bne.n	800e004 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800dfd6:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d008      	beq.n	800dff0 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfde:	0020      	movs	r0, r4
 800dfe0:	3024      	adds	r0, #36	; 0x24
 800dfe2:	f000 fde1 	bl	800eba8 <xTaskRemoveFromEventList>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d002      	beq.n	800dff0 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800dfea:	2f00      	cmp	r7, #0
 800dfec:	d00f      	beq.n	800e00e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfee:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dff0:	0030      	movs	r0, r6
 800dff2:	f001 fab6 	bl	800f562 <vClearInterruptMaskFromISR>
}
 800dff6:	0028      	movs	r0, r5
 800dff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dffa:	6843      	ldr	r3, [r0, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d0dc      	beq.n	800dfba <xQueueGiveFromISR+0x1e>
 800e000:	b672      	cpsid	i
 800e002:	e7fe      	b.n	800e002 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800e004:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e006:	3301      	adds	r3, #1
 800e008:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e00a:	2501      	movs	r5, #1
 800e00c:	e7f0      	b.n	800dff0 <xQueueGiveFromISR+0x54>
 800e00e:	2501      	movs	r5, #1
 800e010:	e7ee      	b.n	800dff0 <xQueueGiveFromISR+0x54>

0800e012 <xQueueGenericReceive>:
{
 800e012:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e014:	46c6      	mov	lr, r8
 800e016:	b500      	push	{lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	0004      	movs	r4, r0
 800e01c:	000e      	movs	r6, r1
 800e01e:	9201      	str	r2, [sp, #4]
 800e020:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800e022:	2800      	cmp	r0, #0
 800e024:	d006      	beq.n	800e034 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e026:	2900      	cmp	r1, #0
 800e028:	d106      	bne.n	800e038 <xQueueGenericReceive+0x26>
 800e02a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d003      	beq.n	800e038 <xQueueGenericReceive+0x26>
 800e030:	b672      	cpsid	i
 800e032:	e7fe      	b.n	800e032 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800e034:	b672      	cpsid	i
 800e036:	e7fe      	b.n	800e036 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e038:	f000 fe3e 	bl	800ecb8 <xTaskGetSchedulerState>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d104      	bne.n	800e04a <xQueueGenericReceive+0x38>
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <xQueueGenericReceive+0x3e>
 800e046:	b672      	cpsid	i
 800e048:	e7fe      	b.n	800e048 <xQueueGenericReceive+0x36>
 800e04a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e04c:	2700      	movs	r7, #0
 800e04e:	e04b      	b.n	800e0e8 <xQueueGenericReceive+0xd6>
 800e050:	2500      	movs	r5, #0
 800e052:	e7fb      	b.n	800e04c <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e054:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e056:	0031      	movs	r1, r6
 800e058:	0020      	movs	r0, r4
 800e05a:	f7ff fdfd 	bl	800dc58 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e05e:	4643      	mov	r3, r8
 800e060:	2b00      	cmp	r3, #0
 800e062:	d11a      	bne.n	800e09a <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800e064:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e066:	3b01      	subs	r3, #1
 800e068:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d102      	bne.n	800e076 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e070:	f000 ff62 	bl	800ef38 <pvTaskIncrementMutexHeldCount>
 800e074:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e076:	6923      	ldr	r3, [r4, #16]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d007      	beq.n	800e08c <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e07c:	0020      	movs	r0, r4
 800e07e:	3010      	adds	r0, #16
 800e080:	f000 fd92 	bl	800eba8 <xTaskRemoveFromEventList>
 800e084:	2801      	cmp	r0, #1
 800e086:	d101      	bne.n	800e08c <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800e088:	f001 fa3e 	bl	800f508 <vPortYield>
				taskEXIT_CRITICAL();
 800e08c:	f001 fa54 	bl	800f538 <vPortExitCritical>
				return pdPASS;
 800e090:	2001      	movs	r0, #1
}
 800e092:	b004      	add	sp, #16
 800e094:	bc04      	pop	{r2}
 800e096:	4690      	mov	r8, r2
 800e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e09a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e09c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0f4      	beq.n	800e08c <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0a2:	0020      	movs	r0, r4
 800e0a4:	3024      	adds	r0, #36	; 0x24
 800e0a6:	f000 fd7f 	bl	800eba8 <xTaskRemoveFromEventList>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0ee      	beq.n	800e08c <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800e0ae:	f001 fa2b 	bl	800f508 <vPortYield>
 800e0b2:	e7eb      	b.n	800e08c <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800e0b4:	f001 fa40 	bl	800f538 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	e7ea      	b.n	800e092 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800e0bc:	a802      	add	r0, sp, #8
 800e0be:	f000 fdb3 	bl	800ec28 <vTaskSetTimeOutState>
 800e0c2:	e01b      	b.n	800e0fc <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800e0c4:	6467      	str	r7, [r4, #68]	; 0x44
 800e0c6:	e022      	b.n	800e10e <xQueueGenericReceive+0xfc>
 800e0c8:	64a7      	str	r7, [r4, #72]	; 0x48
 800e0ca:	e023      	b.n	800e114 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800e0cc:	f001 fa28 	bl	800f520 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e0d0:	6860      	ldr	r0, [r4, #4]
 800e0d2:	f000 fe01 	bl	800ecd8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e0d6:	f001 fa2f 	bl	800f538 <vPortExitCritical>
 800e0da:	e02d      	b.n	800e138 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800e0dc:	0020      	movs	r0, r4
 800e0de:	f7ff fdcd 	bl	800dc7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0e2:	f000 fb83 	bl	800e7ec <xTaskResumeAll>
 800e0e6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e0e8:	f001 fa1a 	bl	800f520 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1b0      	bne.n	800e054 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0f2:	9b01      	ldr	r3, [sp, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d0dd      	beq.n	800e0b4 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800e0f8:	2d00      	cmp	r5, #0
 800e0fa:	d0df      	beq.n	800e0bc <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800e0fc:	f001 fa1c 	bl	800f538 <vPortExitCritical>
		vTaskSuspendAll();
 800e100:	f000 fad4 	bl	800e6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e104:	f001 fa0c 	bl	800f520 <vPortEnterCritical>
 800e108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e10a:	3301      	adds	r3, #1
 800e10c:	d0da      	beq.n	800e0c4 <xQueueGenericReceive+0xb2>
 800e10e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e110:	3301      	adds	r3, #1
 800e112:	d0d9      	beq.n	800e0c8 <xQueueGenericReceive+0xb6>
 800e114:	f001 fa10 	bl	800f538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e118:	a901      	add	r1, sp, #4
 800e11a:	a802      	add	r0, sp, #8
 800e11c:	f000 fd94 	bl	800ec48 <xTaskCheckForTimeOut>
 800e120:	2800      	cmp	r0, #0
 800e122:	d118      	bne.n	800e156 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800e124:	f001 f9fc 	bl	800f520 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e128:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800e12a:	f001 fa05 	bl	800f538 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e12e:	2d00      	cmp	r5, #0
 800e130:	d1d4      	bne.n	800e0dc <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d0c9      	beq.n	800e0cc <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e138:	0020      	movs	r0, r4
 800e13a:	3024      	adds	r0, #36	; 0x24
 800e13c:	9901      	ldr	r1, [sp, #4]
 800e13e:	f000 fcf5 	bl	800eb2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e142:	0020      	movs	r0, r4
 800e144:	f7ff fd9a 	bl	800dc7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e148:	f000 fb50 	bl	800e7ec <xTaskResumeAll>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d1ca      	bne.n	800e0e6 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800e150:	f001 f9da 	bl	800f508 <vPortYield>
 800e154:	e7c7      	b.n	800e0e6 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800e156:	0020      	movs	r0, r4
 800e158:	f7ff fd90 	bl	800dc7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e15c:	f000 fb46 	bl	800e7ec <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e160:	2000      	movs	r0, #0
 800e162:	e796      	b.n	800e092 <xQueueGenericReceive+0x80>

0800e164 <xQueueReceiveFromISR>:
{
 800e164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e166:	b083      	sub	sp, #12
 800e168:	0004      	movs	r4, r0
 800e16a:	000f      	movs	r7, r1
 800e16c:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800e16e:	2800      	cmp	r0, #0
 800e170:	d006      	beq.n	800e180 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e172:	2900      	cmp	r1, #0
 800e174:	d106      	bne.n	800e184 <xQueueReceiveFromISR+0x20>
 800e176:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d003      	beq.n	800e184 <xQueueReceiveFromISR+0x20>
 800e17c:	b672      	cpsid	i
 800e17e:	e7fe      	b.n	800e17e <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800e180:	b672      	cpsid	i
 800e182:	e7fe      	b.n	800e182 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e184:	f001 f9e8 	bl	800f558 <ulSetInterruptMaskFromISR>
 800e188:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e18a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800e18c:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d01b      	beq.n	800e1ca <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e192:	0039      	movs	r1, r7
 800e194:	0020      	movs	r0, r4
 800e196:	f7ff fd5f 	bl	800dc58 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e19a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e19c:	3b01      	subs	r3, #1
 800e19e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e1a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	d004      	beq.n	800e1b0 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800e1a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e1ac:	2501      	movs	r5, #1
 800e1ae:	e00c      	b.n	800e1ca <xQueueReceiveFromISR+0x66>
 800e1b0:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1b2:	6923      	ldr	r3, [r4, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d008      	beq.n	800e1ca <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1b8:	0020      	movs	r0, r4
 800e1ba:	3010      	adds	r0, #16
 800e1bc:	f000 fcf4 	bl	800eba8 <xTaskRemoveFromEventList>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d002      	beq.n	800e1ca <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800e1c4:	2e00      	cmp	r6, #0
 800e1c6:	d006      	beq.n	800e1d6 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e1c8:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e1ca:	9801      	ldr	r0, [sp, #4]
 800e1cc:	f001 f9c9 	bl	800f562 <vClearInterruptMaskFromISR>
}
 800e1d0:	0028      	movs	r0, r5
 800e1d2:	b003      	add	sp, #12
 800e1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800e1d6:	2501      	movs	r5, #1
 800e1d8:	e7f7      	b.n	800e1ca <xQueueReceiveFromISR+0x66>
	...

0800e1dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e1dc:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e1de:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <vQueueAddToRegistry+0x2c>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d009      	beq.n	800e1fa <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1e6:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e1e8:	4c07      	ldr	r4, [pc, #28]	; (800e208 <vQueueAddToRegistry+0x2c>)
 800e1ea:	00da      	lsls	r2, r3, #3
 800e1ec:	58a2      	ldr	r2, [r4, r2]
 800e1ee:	2a00      	cmp	r2, #0
 800e1f0:	d004      	beq.n	800e1fc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	2b08      	cmp	r3, #8
 800e1f6:	d1f8      	bne.n	800e1ea <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e1f8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1fa:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e1fc:	4a02      	ldr	r2, [pc, #8]	; (800e208 <vQueueAddToRegistry+0x2c>)
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e202:	18d3      	adds	r3, r2, r3
 800e204:	6058      	str	r0, [r3, #4]
				break;
 800e206:	e7f7      	b.n	800e1f8 <vQueueAddToRegistry+0x1c>
 800e208:	20006ecc 	.word	0x20006ecc

0800e20c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	0004      	movs	r4, r0
 800e210:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e212:	f001 f985 	bl	800f520 <vPortEnterCritical>
 800e216:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e218:	3301      	adds	r3, #1
 800e21a:	d00b      	beq.n	800e234 <vQueueWaitForMessageRestricted+0x28>
 800e21c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e21e:	3301      	adds	r3, #1
 800e220:	d00b      	beq.n	800e23a <vQueueWaitForMessageRestricted+0x2e>
 800e222:	f001 f989 	bl	800f538 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d009      	beq.n	800e240 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e22c:	0020      	movs	r0, r4
 800e22e:	f7ff fd25 	bl	800dc7c <prvUnlockQueue>
	}
 800e232:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e234:	2300      	movs	r3, #0
 800e236:	6463      	str	r3, [r4, #68]	; 0x44
 800e238:	e7f0      	b.n	800e21c <vQueueWaitForMessageRestricted+0x10>
 800e23a:	2300      	movs	r3, #0
 800e23c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e23e:	e7f0      	b.n	800e222 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e240:	0020      	movs	r0, r4
 800e242:	3024      	adds	r0, #36	; 0x24
 800e244:	0029      	movs	r1, r5
 800e246:	f000 fc95 	bl	800eb74 <vTaskPlaceOnEventListRestricted>
 800e24a:	e7ef      	b.n	800e22c <vQueueWaitForMessageRestricted+0x20>

0800e24c <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24e:	46d6      	mov	lr, sl
 800e250:	464f      	mov	r7, r9
 800e252:	4646      	mov	r6, r8
 800e254:	b5c0      	push	{r6, r7, lr}
 800e256:	0006      	movs	r6, r0
 800e258:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e25a:	6808      	ldr	r0, [r1, #0]
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d044      	beq.n	800e2ea <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e260:	684b      	ldr	r3, [r1, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	604b      	str	r3, [r1, #4]
 800e266:	2208      	movs	r2, #8
 800e268:	4690      	mov	r8, r2
 800e26a:	4488      	add	r8, r1
 800e26c:	4543      	cmp	r3, r8
 800e26e:	d006      	beq.n	800e27e <prvListTaskWithinSingleList+0x32>
 800e270:	684b      	ldr	r3, [r1, #4]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800e276:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e278:	2302      	movs	r3, #2
 800e27a:	469a      	mov	sl, r3
 800e27c:	e018      	b.n	800e2b0 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e27e:	68cb      	ldr	r3, [r1, #12]
 800e280:	604b      	str	r3, [r1, #4]
 800e282:	e7f5      	b.n	800e270 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e284:	68cb      	ldr	r3, [r1, #12]
 800e286:	604b      	str	r3, [r1, #4]
 800e288:	e017      	b.n	800e2ba <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e28a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e28c:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e28e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e290:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e292:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e294:	783b      	ldrb	r3, [r7, #0]
 800e296:	2ba5      	cmp	r3, #165	; 0xa5
 800e298:	d125      	bne.n	800e2e6 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e29a:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e29c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e29e:	5cfc      	ldrb	r4, [r7, r3]
 800e2a0:	2ca5      	cmp	r4, #165	; 0xa5
 800e2a2:	d0fb      	beq.n	800e29c <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e2a4:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e2a6:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e2ac:	45a9      	cmp	r9, r5
 800e2ae:	d01c      	beq.n	800e2ea <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e2b0:	684b      	ldr	r3, [r1, #4]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	604b      	str	r3, [r1, #4]
 800e2b6:	4598      	cmp	r8, r3
 800e2b8:	d0e4      	beq.n	800e284 <prvListTaskWithinSingleList+0x38>
 800e2ba:	684b      	ldr	r3, [r1, #4]
 800e2bc:	68dd      	ldr	r5, [r3, #12]
 800e2be:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e2c0:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e2c2:	002b      	movs	r3, r5
 800e2c4:	3334      	adds	r3, #52	; 0x34
 800e2c6:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e2c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e2ca:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e2cc:	4663      	mov	r3, ip
 800e2ce:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e2d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e2d2:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e2d4:	4663      	mov	r3, ip
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	d1d7      	bne.n	800e28a <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e2da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d0d4      	beq.n	800e28a <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e2e0:	4653      	mov	r3, sl
 800e2e2:	7333      	strb	r3, [r6, #12]
 800e2e4:	e7d1      	b.n	800e28a <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	e7dc      	b.n	800e2a4 <prvListTaskWithinSingleList+0x58>
	}
 800e2ea:	bc1c      	pop	{r2, r3, r4}
 800e2ec:	4690      	mov	r8, r2
 800e2ee:	4699      	mov	r9, r3
 800e2f0:	46a2      	mov	sl, r4
 800e2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2f4:	4b08      	ldr	r3, [pc, #32]	; (800e318 <prvResetNextTaskUnblockTime+0x24>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e2fe:	4b06      	ldr	r3, [pc, #24]	; (800e318 <prvResetNextTaskUnblockTime+0x24>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	685a      	ldr	r2, [r3, #4]
 800e308:	4b04      	ldr	r3, [pc, #16]	; (800e31c <prvResetNextTaskUnblockTime+0x28>)
 800e30a:	601a      	str	r2, [r3, #0]
	}
}
 800e30c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e30e:	4b03      	ldr	r3, [pc, #12]	; (800e31c <prvResetNextTaskUnblockTime+0x28>)
 800e310:	2201      	movs	r2, #1
 800e312:	4252      	negs	r2, r2
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	e7f9      	b.n	800e30c <prvResetNextTaskUnblockTime+0x18>
 800e318:	20001d64 	.word	0x20001d64
 800e31c:	200000a0 	.word	0x200000a0

0800e320 <prvAddCurrentTaskToDelayedList>:
{
 800e320:	b510      	push	{r4, lr}
 800e322:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e324:	4b0e      	ldr	r3, [pc, #56]	; (800e360 <prvAddCurrentTaskToDelayedList+0x40>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e32a:	4b0e      	ldr	r3, [pc, #56]	; (800e364 <prvAddCurrentTaskToDelayedList+0x44>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4283      	cmp	r3, r0
 800e330:	d80d      	bhi.n	800e34e <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e332:	4b0d      	ldr	r3, [pc, #52]	; (800e368 <prvAddCurrentTaskToDelayedList+0x48>)
 800e334:	6818      	ldr	r0, [r3, #0]
 800e336:	4b0a      	ldr	r3, [pc, #40]	; (800e360 <prvAddCurrentTaskToDelayedList+0x40>)
 800e338:	6819      	ldr	r1, [r3, #0]
 800e33a:	3104      	adds	r1, #4
 800e33c:	f7ff fc24 	bl	800db88 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <prvAddCurrentTaskToDelayedList+0x4c>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	42a3      	cmp	r3, r4
 800e346:	d909      	bls.n	800e35c <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e348:	4b08      	ldr	r3, [pc, #32]	; (800e36c <prvAddCurrentTaskToDelayedList+0x4c>)
 800e34a:	601c      	str	r4, [r3, #0]
}
 800e34c:	e006      	b.n	800e35c <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e34e:	4b08      	ldr	r3, [pc, #32]	; (800e370 <prvAddCurrentTaskToDelayedList+0x50>)
 800e350:	6818      	ldr	r0, [r3, #0]
 800e352:	4b03      	ldr	r3, [pc, #12]	; (800e360 <prvAddCurrentTaskToDelayedList+0x40>)
 800e354:	6819      	ldr	r1, [r3, #0]
 800e356:	3104      	adds	r1, #4
 800e358:	f7ff fc16 	bl	800db88 <vListInsert>
}
 800e35c:	bd10      	pop	{r4, pc}
 800e35e:	46c0      	nop			; (mov r8, r8)
 800e360:	20001d60 	.word	0x20001d60
 800e364:	20001e80 	.word	0x20001e80
 800e368:	20001d64 	.word	0x20001d64
 800e36c:	200000a0 	.word	0x200000a0
 800e370:	20001d68 	.word	0x20001d68

0800e374 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e374:	b510      	push	{r4, lr}
 800e376:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e378:	f005 f9c6 	bl	8013708 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e37c:	0020      	movs	r0, r4
 800e37e:	f7f1 fecb 	bl	8000118 <strlen>
 800e382:	0003      	movs	r3, r0
 800e384:	280b      	cmp	r0, #11
 800e386:	dc08      	bgt.n	800e39a <prvWriteNameToBuffer+0x26>
 800e388:	1820      	adds	r0, r4, r0
 800e38a:	0022      	movs	r2, r4
 800e38c:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e38e:	2320      	movs	r3, #32
 800e390:	7003      	strb	r3, [r0, #0]
 800e392:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e394:	4290      	cmp	r0, r2
 800e396:	d1fb      	bne.n	800e390 <prvWriteNameToBuffer+0x1c>
 800e398:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e39a:	18e0      	adds	r0, r4, r3
 800e39c:	2300      	movs	r3, #0
 800e39e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e3a0:	bd10      	pop	{r4, pc}
	...

0800e3a4 <xTaskGenericCreate>:
{
 800e3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3a6:	46d6      	mov	lr, sl
 800e3a8:	4647      	mov	r7, r8
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b085      	sub	sp, #20
 800e3ae:	9002      	str	r0, [sp, #8]
 800e3b0:	000d      	movs	r5, r1
 800e3b2:	0016      	movs	r6, r2
 800e3b4:	9303      	str	r3, [sp, #12]
 800e3b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d101      	bne.n	800e3c0 <xTaskGenericCreate+0x1c>
 800e3bc:	b672      	cpsid	i
 800e3be:	e7fe      	b.n	800e3be <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e3c0:	2f06      	cmp	r7, #6
 800e3c2:	d901      	bls.n	800e3c8 <xTaskGenericCreate+0x24>
 800e3c4:	b672      	cpsid	i
 800e3c6:	e7fe      	b.n	800e3c6 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d106      	bne.n	800e3dc <xTaskGenericCreate+0x38>
 800e3ce:	0090      	lsls	r0, r2, #2
 800e3d0:	f001 f928 	bl	800f624 <pvPortMalloc>
 800e3d4:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d100      	bne.n	800e3dc <xTaskGenericCreate+0x38>
 800e3da:	e0b7      	b.n	800e54c <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e3dc:	2060      	movs	r0, #96	; 0x60
 800e3de:	f001 f921 	bl	800f624 <pvPortMalloc>
 800e3e2:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e3e4:	d100      	bne.n	800e3e8 <xTaskGenericCreate+0x44>
 800e3e6:	e08b      	b.n	800e500 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800e3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3ea:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e3ec:	00b2      	lsls	r2, r6, #2
 800e3ee:	21a5      	movs	r1, #165	; 0xa5
 800e3f0:	0018      	movs	r0, r3
 800e3f2:	f004 ff53 	bl	801329c <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e3f6:	4b57      	ldr	r3, [pc, #348]	; (800e554 <xTaskGenericCreate+0x1b0>)
 800e3f8:	18f3      	adds	r3, r6, r3
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e3fe:	4694      	mov	ip, r2
 800e400:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e402:	2207      	movs	r2, #7
 800e404:	4393      	bics	r3, r2
 800e406:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e408:	782a      	ldrb	r2, [r5, #0]
 800e40a:	2334      	movs	r3, #52	; 0x34
 800e40c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800e40e:	782b      	ldrb	r3, [r5, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d000      	beq.n	800e416 <xTaskGenericCreate+0x72>
 800e414:	e07e      	b.n	800e514 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e416:	2500      	movs	r5, #0
 800e418:	2340      	movs	r3, #64	; 0x40
 800e41a:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800e41c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e41e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e420:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e422:	1d23      	adds	r3, r4, #4
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	0018      	movs	r0, r3
 800e428:	f7ff fb9f 	bl	800db6a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e42c:	0020      	movs	r0, r4
 800e42e:	3018      	adds	r0, #24
 800e430:	f7ff fb9b 	bl	800db6a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e434:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e436:	2307      	movs	r3, #7
 800e438:	1bdb      	subs	r3, r3, r7
 800e43a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e43c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e43e:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e440:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e442:	235c      	movs	r3, #92	; 0x5c
 800e444:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e446:	9a03      	ldr	r2, [sp, #12]
 800e448:	9902      	ldr	r1, [sp, #8]
 800e44a:	4650      	mov	r0, sl
 800e44c:	f001 f820 	bl	800f490 <pxPortInitialiseStack>
 800e450:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e454:	42ab      	cmp	r3, r5
 800e456:	d000      	beq.n	800e45a <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e458:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e45a:	f001 f861 	bl	800f520 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e45e:	4a3e      	ldr	r2, [pc, #248]	; (800e558 <xTaskGenericCreate+0x1b4>)
 800e460:	6813      	ldr	r3, [r2, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e466:	4b3d      	ldr	r3, [pc, #244]	; (800e55c <xTaskGenericCreate+0x1b8>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d162      	bne.n	800e534 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800e46e:	4b3b      	ldr	r3, [pc, #236]	; (800e55c <xTaskGenericCreate+0x1b8>)
 800e470:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e472:	6813      	ldr	r3, [r2, #0]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d120      	bne.n	800e4ba <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e478:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e47a:	3313      	adds	r3, #19
 800e47c:	4698      	mov	r8, r3
 800e47e:	4e38      	ldr	r6, [pc, #224]	; (800e560 <xTaskGenericCreate+0x1bc>)
 800e480:	4640      	mov	r0, r8
 800e482:	4368      	muls	r0, r5
 800e484:	1980      	adds	r0, r0, r6
 800e486:	f7ff fb65 	bl	800db54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e48a:	3501      	adds	r5, #1
 800e48c:	2d07      	cmp	r5, #7
 800e48e:	d1f7      	bne.n	800e480 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800e490:	4e34      	ldr	r6, [pc, #208]	; (800e564 <xTaskGenericCreate+0x1c0>)
 800e492:	0030      	movs	r0, r6
 800e494:	f7ff fb5e 	bl	800db54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e498:	4d33      	ldr	r5, [pc, #204]	; (800e568 <xTaskGenericCreate+0x1c4>)
 800e49a:	0028      	movs	r0, r5
 800e49c:	f7ff fb5a 	bl	800db54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4a0:	4832      	ldr	r0, [pc, #200]	; (800e56c <xTaskGenericCreate+0x1c8>)
 800e4a2:	f7ff fb57 	bl	800db54 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e4a6:	4832      	ldr	r0, [pc, #200]	; (800e570 <xTaskGenericCreate+0x1cc>)
 800e4a8:	f7ff fb54 	bl	800db54 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e4ac:	4831      	ldr	r0, [pc, #196]	; (800e574 <xTaskGenericCreate+0x1d0>)
 800e4ae:	f7ff fb51 	bl	800db54 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4b2:	4b31      	ldr	r3, [pc, #196]	; (800e578 <xTaskGenericCreate+0x1d4>)
 800e4b4:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4b6:	4b31      	ldr	r3, [pc, #196]	; (800e57c <xTaskGenericCreate+0x1d8>)
 800e4b8:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800e4ba:	4a31      	ldr	r2, [pc, #196]	; (800e580 <xTaskGenericCreate+0x1dc>)
 800e4bc:	6813      	ldr	r3, [r2, #0]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e4c2:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e4c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4c6:	4a2f      	ldr	r2, [pc, #188]	; (800e584 <xTaskGenericCreate+0x1e0>)
 800e4c8:	6812      	ldr	r2, [r2, #0]
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d901      	bls.n	800e4d2 <xTaskGenericCreate+0x12e>
 800e4ce:	4a2d      	ldr	r2, [pc, #180]	; (800e584 <xTaskGenericCreate+0x1e0>)
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	2014      	movs	r0, #20
 800e4d4:	4358      	muls	r0, r3
 800e4d6:	4b22      	ldr	r3, [pc, #136]	; (800e560 <xTaskGenericCreate+0x1bc>)
 800e4d8:	18c0      	adds	r0, r0, r3
 800e4da:	9901      	ldr	r1, [sp, #4]
 800e4dc:	f7ff fb48 	bl	800db70 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e4e0:	f001 f82a 	bl	800f538 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e4e4:	4b28      	ldr	r3, [pc, #160]	; (800e588 <xTaskGenericCreate+0x1e4>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e4e8:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00d      	beq.n	800e50a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e4ee:	4b1b      	ldr	r3, [pc, #108]	; (800e55c <xTaskGenericCreate+0x1b8>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f4:	42bb      	cmp	r3, r7
 800e4f6:	d208      	bcs.n	800e50a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800e4f8:	f001 f806 	bl	800f508 <vPortYield>
			xReturn = pdPASS;
 800e4fc:	2001      	movs	r0, #1
 800e4fe:	e004      	b.n	800e50a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800e500:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e502:	f001 f925 	bl	800f750 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e506:	2001      	movs	r0, #1
 800e508:	4240      	negs	r0, r0
}
 800e50a:	b005      	add	sp, #20
 800e50c:	bc0c      	pop	{r2, r3}
 800e50e:	4690      	mov	r8, r2
 800e510:	469a      	mov	sl, r3
 800e512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e514:	1c6b      	adds	r3, r5, #1
 800e516:	0022      	movs	r2, r4
 800e518:	3235      	adds	r2, #53	; 0x35
 800e51a:	0021      	movs	r1, r4
 800e51c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e51e:	7818      	ldrb	r0, [r3, #0]
 800e520:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e522:	7818      	ldrb	r0, [r3, #0]
 800e524:	2800      	cmp	r0, #0
 800e526:	d100      	bne.n	800e52a <xTaskGenericCreate+0x186>
 800e528:	e775      	b.n	800e416 <xTaskGenericCreate+0x72>
 800e52a:	3301      	adds	r3, #1
 800e52c:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e52e:	4291      	cmp	r1, r2
 800e530:	d1f5      	bne.n	800e51e <xTaskGenericCreate+0x17a>
 800e532:	e770      	b.n	800e416 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800e534:	4b14      	ldr	r3, [pc, #80]	; (800e588 <xTaskGenericCreate+0x1e4>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1be      	bne.n	800e4ba <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e53c:	4b07      	ldr	r3, [pc, #28]	; (800e55c <xTaskGenericCreate+0x1b8>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e542:	42bb      	cmp	r3, r7
 800e544:	d8b9      	bhi.n	800e4ba <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800e546:	4b05      	ldr	r3, [pc, #20]	; (800e55c <xTaskGenericCreate+0x1b8>)
 800e548:	601c      	str	r4, [r3, #0]
 800e54a:	e7b6      	b.n	800e4ba <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e54c:	2001      	movs	r0, #1
 800e54e:	4240      	negs	r0, r0
 800e550:	e7db      	b.n	800e50a <xTaskGenericCreate+0x166>
 800e552:	46c0      	nop			; (mov r8, r8)
 800e554:	3fffffff 	.word	0x3fffffff
 800e558:	20001dfc 	.word	0x20001dfc
 800e55c:	20001d60 	.word	0x20001d60
 800e560:	20001d6c 	.word	0x20001d6c
 800e564:	20001e14 	.word	0x20001e14
 800e568:	20001e28 	.word	0x20001e28
 800e56c:	20001e40 	.word	0x20001e40
 800e570:	20001e6c 	.word	0x20001e6c
 800e574:	20001e58 	.word	0x20001e58
 800e578:	20001d64 	.word	0x20001d64
 800e57c:	20001d68 	.word	0x20001d68
 800e580:	20001e08 	.word	0x20001e08
 800e584:	20001e10 	.word	0x20001e10
 800e588:	20001e54 	.word	0x20001e54

0800e58c <uxTaskPriorityGet>:
	{
 800e58c:	b510      	push	{r4, lr}
 800e58e:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e590:	f000 ffc6 	bl	800f520 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e594:	2c00      	cmp	r4, #0
 800e596:	d004      	beq.n	800e5a2 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e598:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e59a:	f000 ffcd 	bl	800f538 <vPortExitCritical>
	}
 800e59e:	0020      	movs	r0, r4
 800e5a0:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e5a2:	4b01      	ldr	r3, [pc, #4]	; (800e5a8 <uxTaskPriorityGet+0x1c>)
 800e5a4:	681c      	ldr	r4, [r3, #0]
 800e5a6:	e7f7      	b.n	800e598 <uxTaskPriorityGet+0xc>
 800e5a8:	20001d60 	.word	0x20001d60

0800e5ac <vTaskPrioritySet>:
	{
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	0004      	movs	r4, r0
 800e5b0:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e5b2:	2906      	cmp	r1, #6
 800e5b4:	d901      	bls.n	800e5ba <vTaskPrioritySet+0xe>
 800e5b6:	b672      	cpsid	i
 800e5b8:	e7fe      	b.n	800e5b8 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e5ba:	f000 ffb1 	bl	800f520 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e5be:	2c00      	cmp	r4, #0
 800e5c0:	d101      	bne.n	800e5c6 <vTaskPrioritySet+0x1a>
 800e5c2:	4b21      	ldr	r3, [pc, #132]	; (800e648 <vTaskPrioritySet+0x9c>)
 800e5c4:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e5c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e5c8:	4295      	cmp	r5, r2
 800e5ca:	d032      	beq.n	800e632 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800e5cc:	d934      	bls.n	800e638 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800e5ce:	4b1e      	ldr	r3, [pc, #120]	; (800e648 <vTaskPrioritySet+0x9c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	d036      	beq.n	800e644 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e5d6:	4b1c      	ldr	r3, [pc, #112]	; (800e648 <vTaskPrioritySet+0x9c>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5dc:	2600      	movs	r6, #0
 800e5de:	429d      	cmp	r5, r3
 800e5e0:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e5e4:	428a      	cmp	r2, r1
 800e5e6:	d100      	bne.n	800e5ea <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800e5e8:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800e5ea:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5ec:	69a3      	ldr	r3, [r4, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	db02      	blt.n	800e5f8 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f2:	2207      	movs	r2, #7
 800e5f4:	1b55      	subs	r5, r2, r5
 800e5f6:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e5f8:	2314      	movs	r3, #20
 800e5fa:	434b      	muls	r3, r1
 800e5fc:	4a13      	ldr	r2, [pc, #76]	; (800e64c <vTaskPrioritySet+0xa0>)
 800e5fe:	189b      	adds	r3, r3, r2
 800e600:	6962      	ldr	r2, [r4, #20]
 800e602:	429a      	cmp	r2, r3
 800e604:	d111      	bne.n	800e62a <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e606:	1d25      	adds	r5, r4, #4
 800e608:	0028      	movs	r0, r5
 800e60a:	f7ff fad4 	bl	800dbb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e60e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e610:	4a0f      	ldr	r2, [pc, #60]	; (800e650 <vTaskPrioritySet+0xa4>)
 800e612:	6812      	ldr	r2, [r2, #0]
 800e614:	4293      	cmp	r3, r2
 800e616:	d901      	bls.n	800e61c <vTaskPrioritySet+0x70>
 800e618:	4a0d      	ldr	r2, [pc, #52]	; (800e650 <vTaskPrioritySet+0xa4>)
 800e61a:	6013      	str	r3, [r2, #0]
 800e61c:	2014      	movs	r0, #20
 800e61e:	4358      	muls	r0, r3
 800e620:	4b0a      	ldr	r3, [pc, #40]	; (800e64c <vTaskPrioritySet+0xa0>)
 800e622:	18c0      	adds	r0, r0, r3
 800e624:	0029      	movs	r1, r5
 800e626:	f7ff faa3 	bl	800db70 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800e62a:	2e01      	cmp	r6, #1
 800e62c:	d101      	bne.n	800e632 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800e62e:	f000 ff6b 	bl	800f508 <vPortYield>
		taskEXIT_CRITICAL();
 800e632:	f000 ff81 	bl	800f538 <vPortExitCritical>
	}
 800e636:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800e638:	4b03      	ldr	r3, [pc, #12]	; (800e648 <vTaskPrioritySet+0x9c>)
 800e63a:	681e      	ldr	r6, [r3, #0]
 800e63c:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e63e:	4273      	negs	r3, r6
 800e640:	415e      	adcs	r6, r3
 800e642:	e7ce      	b.n	800e5e2 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800e644:	2600      	movs	r6, #0
 800e646:	e7cc      	b.n	800e5e2 <vTaskPrioritySet+0x36>
 800e648:	20001d60 	.word	0x20001d60
 800e64c:	20001d6c 	.word	0x20001d6c
 800e650:	20001e10 	.word	0x20001e10

0800e654 <vTaskStartScheduler>:
{
 800e654:	b500      	push	{lr}
 800e656:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e658:	2300      	movs	r3, #0
 800e65a:	9303      	str	r3, [sp, #12]
 800e65c:	9302      	str	r3, [sp, #8]
 800e65e:	9301      	str	r3, [sp, #4]
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	22a0      	movs	r2, #160	; 0xa0
 800e664:	490d      	ldr	r1, [pc, #52]	; (800e69c <vTaskStartScheduler+0x48>)
 800e666:	480e      	ldr	r0, [pc, #56]	; (800e6a0 <vTaskStartScheduler+0x4c>)
 800e668:	f7ff fe9c 	bl	800e3a4 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e66c:	2801      	cmp	r0, #1
 800e66e:	d003      	beq.n	800e678 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e670:	2800      	cmp	r0, #0
 800e672:	d110      	bne.n	800e696 <vTaskStartScheduler+0x42>
 800e674:	b672      	cpsid	i
 800e676:	e7fe      	b.n	800e676 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e678:	f000 fd68 	bl	800f14c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e67c:	2801      	cmp	r0, #1
 800e67e:	d1f7      	bne.n	800e670 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e680:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e682:	4b08      	ldr	r3, [pc, #32]	; (800e6a4 <vTaskStartScheduler+0x50>)
 800e684:	2201      	movs	r2, #1
 800e686:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e688:	4b07      	ldr	r3, [pc, #28]	; (800e6a8 <vTaskStartScheduler+0x54>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e68e:	f7f9 fcd5 	bl	800803c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e692:	f000 ff0f 	bl	800f4b4 <xPortStartScheduler>
}
 800e696:	b005      	add	sp, #20
 800e698:	bd00      	pop	{pc}
 800e69a:	46c0      	nop			; (mov r8, r8)
 800e69c:	0801a8e0 	.word	0x0801a8e0
 800e6a0:	0800e915 	.word	0x0800e915
 800e6a4:	20001e54 	.word	0x20001e54
 800e6a8:	20001e80 	.word	0x20001e80

0800e6ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e6ac:	4a02      	ldr	r2, [pc, #8]	; (800e6b8 <vTaskSuspendAll+0xc>)
 800e6ae:	6813      	ldr	r3, [r2, #0]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	6013      	str	r3, [r2, #0]
}
 800e6b4:	4770      	bx	lr
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	20001e04 	.word	0x20001e04

0800e6bc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e6bc:	4b01      	ldr	r3, [pc, #4]	; (800e6c4 <xTaskGetTickCount+0x8>)
 800e6be:	6818      	ldr	r0, [r3, #0]
}
 800e6c0:	4770      	bx	lr
 800e6c2:	46c0      	nop			; (mov r8, r8)
 800e6c4:	20001e80 	.word	0x20001e80

0800e6c8 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e6c8:	4b01      	ldr	r3, [pc, #4]	; (800e6d0 <xTaskGetTickCountFromISR+0x8>)
 800e6ca:	6818      	ldr	r0, [r3, #0]
}
 800e6cc:	4770      	bx	lr
 800e6ce:	46c0      	nop			; (mov r8, r8)
 800e6d0:	20001e80 	.word	0x20001e80

0800e6d4 <xTaskIncrementTick>:
{
 800e6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6d6:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6d8:	4b39      	ldr	r3, [pc, #228]	; (800e7c0 <xTaskIncrementTick+0xec>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d161      	bne.n	800e7a4 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800e6e0:	4b38      	ldr	r3, [pc, #224]	; (800e7c4 <xTaskIncrementTick+0xf0>)
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	3201      	adds	r2, #1
 800e6e6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e6e8:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e6ea:	2e00      	cmp	r6, #0
 800e6ec:	d112      	bne.n	800e714 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800e6ee:	4b36      	ldr	r3, [pc, #216]	; (800e7c8 <xTaskIncrementTick+0xf4>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d001      	beq.n	800e6fc <xTaskIncrementTick+0x28>
 800e6f8:	b672      	cpsid	i
 800e6fa:	e7fe      	b.n	800e6fa <xTaskIncrementTick+0x26>
 800e6fc:	4a32      	ldr	r2, [pc, #200]	; (800e7c8 <xTaskIncrementTick+0xf4>)
 800e6fe:	6811      	ldr	r1, [r2, #0]
 800e700:	4b32      	ldr	r3, [pc, #200]	; (800e7cc <xTaskIncrementTick+0xf8>)
 800e702:	6818      	ldr	r0, [r3, #0]
 800e704:	6010      	str	r0, [r2, #0]
 800e706:	6019      	str	r1, [r3, #0]
 800e708:	4a31      	ldr	r2, [pc, #196]	; (800e7d0 <xTaskIncrementTick+0xfc>)
 800e70a:	6813      	ldr	r3, [r2, #0]
 800e70c:	3301      	adds	r3, #1
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	f7ff fdf0 	bl	800e2f4 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e714:	4b2f      	ldr	r3, [pc, #188]	; (800e7d4 <xTaskIncrementTick+0x100>)
 800e716:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e718:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e71a:	42b3      	cmp	r3, r6
 800e71c:	d833      	bhi.n	800e786 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800e71e:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e720:	4d29      	ldr	r5, [pc, #164]	; (800e7c8 <xTaskIncrementTick+0xf4>)
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d029      	beq.n	800e77e <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e72a:	4b27      	ldr	r3, [pc, #156]	; (800e7c8 <xTaskIncrementTick+0xf4>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e732:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e734:	429e      	cmp	r6, r3
 800e736:	d332      	bcc.n	800e79e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e738:	1d23      	adds	r3, r4, #4
 800e73a:	9301      	str	r3, [sp, #4]
 800e73c:	0018      	movs	r0, r3
 800e73e:	f7ff fa3a 	bl	800dbb6 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e744:	2b00      	cmp	r3, #0
 800e746:	d003      	beq.n	800e750 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e748:	0020      	movs	r0, r4
 800e74a:	3018      	adds	r0, #24
 800e74c:	f7ff fa33 	bl	800dbb6 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e750:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e752:	4a21      	ldr	r2, [pc, #132]	; (800e7d8 <xTaskIncrementTick+0x104>)
 800e754:	6812      	ldr	r2, [r2, #0]
 800e756:	4293      	cmp	r3, r2
 800e758:	d901      	bls.n	800e75e <xTaskIncrementTick+0x8a>
 800e75a:	4a1f      	ldr	r2, [pc, #124]	; (800e7d8 <xTaskIncrementTick+0x104>)
 800e75c:	6013      	str	r3, [r2, #0]
 800e75e:	0098      	lsls	r0, r3, #2
 800e760:	18c0      	adds	r0, r0, r3
 800e762:	0080      	lsls	r0, r0, #2
 800e764:	4b1d      	ldr	r3, [pc, #116]	; (800e7dc <xTaskIncrementTick+0x108>)
 800e766:	18c0      	adds	r0, r0, r3
 800e768:	9901      	ldr	r1, [sp, #4]
 800e76a:	f7ff fa01 	bl	800db70 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e76e:	4b1c      	ldr	r3, [pc, #112]	; (800e7e0 <xTaskIncrementTick+0x10c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e776:	429a      	cmp	r2, r3
 800e778:	d3d3      	bcc.n	800e722 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800e77a:	2701      	movs	r7, #1
 800e77c:	e7d1      	b.n	800e722 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e77e:	4b15      	ldr	r3, [pc, #84]	; (800e7d4 <xTaskIncrementTick+0x100>)
 800e780:	2201      	movs	r2, #1
 800e782:	4252      	negs	r2, r2
 800e784:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e786:	4b16      	ldr	r3, [pc, #88]	; (800e7e0 <xTaskIncrementTick+0x10c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78c:	0093      	lsls	r3, r2, #2
 800e78e:	189b      	adds	r3, r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4a12      	ldr	r2, [pc, #72]	; (800e7dc <xTaskIncrementTick+0x108>)
 800e794:	589b      	ldr	r3, [r3, r2]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d909      	bls.n	800e7ae <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800e79a:	2701      	movs	r7, #1
 800e79c:	e007      	b.n	800e7ae <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800e79e:	4a0d      	ldr	r2, [pc, #52]	; (800e7d4 <xTaskIncrementTick+0x100>)
 800e7a0:	6013      	str	r3, [r2, #0]
							break;
 800e7a2:	e7f0      	b.n	800e786 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800e7a4:	4a0f      	ldr	r2, [pc, #60]	; (800e7e4 <xTaskIncrementTick+0x110>)
 800e7a6:	6813      	ldr	r3, [r2, #0]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e7ac:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800e7ae:	4b0e      	ldr	r3, [pc, #56]	; (800e7e8 <xTaskIncrementTick+0x114>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d000      	beq.n	800e7b8 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800e7b6:	2701      	movs	r7, #1
}
 800e7b8:	0038      	movs	r0, r7
 800e7ba:	b003      	add	sp, #12
 800e7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7be:	46c0      	nop			; (mov r8, r8)
 800e7c0:	20001e04 	.word	0x20001e04
 800e7c4:	20001e80 	.word	0x20001e80
 800e7c8:	20001d64 	.word	0x20001d64
 800e7cc:	20001d68 	.word	0x20001d68
 800e7d0:	20001e3c 	.word	0x20001e3c
 800e7d4:	200000a0 	.word	0x200000a0
 800e7d8:	20001e10 	.word	0x20001e10
 800e7dc:	20001d6c 	.word	0x20001d6c
 800e7e0:	20001d60 	.word	0x20001d60
 800e7e4:	20001e00 	.word	0x20001e00
 800e7e8:	20001e84 	.word	0x20001e84

0800e7ec <xTaskResumeAll>:
{
 800e7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e7ee:	4b2f      	ldr	r3, [pc, #188]	; (800e8ac <xTaskResumeAll+0xc0>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d101      	bne.n	800e7fa <xTaskResumeAll+0xe>
 800e7f6:	b672      	cpsid	i
 800e7f8:	e7fe      	b.n	800e7f8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800e7fa:	f000 fe91 	bl	800f520 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e7fe:	4b2b      	ldr	r3, [pc, #172]	; (800e8ac <xTaskResumeAll+0xc0>)
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	3a01      	subs	r2, #1
 800e804:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e806:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e808:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e80a:	42a3      	cmp	r3, r4
 800e80c:	d105      	bne.n	800e81a <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e80e:	4b28      	ldr	r3, [pc, #160]	; (800e8b0 <xTaskResumeAll+0xc4>)
 800e810:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e812:	4d28      	ldr	r5, [pc, #160]	; (800e8b4 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e814:	42a3      	cmp	r3, r4
 800e816:	d12a      	bne.n	800e86e <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800e818:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e81a:	f000 fe8d 	bl	800f538 <vPortExitCritical>
}
 800e81e:	0020      	movs	r0, r4
 800e820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800e822:	0098      	lsls	r0, r3, #2
 800e824:	18c0      	adds	r0, r0, r3
 800e826:	0080      	lsls	r0, r0, #2
 800e828:	4b23      	ldr	r3, [pc, #140]	; (800e8b8 <xTaskResumeAll+0xcc>)
 800e82a:	18c0      	adds	r0, r0, r3
 800e82c:	0021      	movs	r1, r4
 800e82e:	f7ff f99f 	bl	800db70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e832:	4b22      	ldr	r3, [pc, #136]	; (800e8bc <xTaskResumeAll+0xd0>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d214      	bcs.n	800e868 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e83e:	6833      	ldr	r3, [r6, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d016      	beq.n	800e872 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e844:	68eb      	ldr	r3, [r5, #12]
 800e846:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e848:	0038      	movs	r0, r7
 800e84a:	3018      	adds	r0, #24
 800e84c:	f7ff f9b3 	bl	800dbb6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e850:	1d3c      	adds	r4, r7, #4
 800e852:	0020      	movs	r0, r4
 800e854:	f7ff f9af 	bl	800dbb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	4a19      	ldr	r2, [pc, #100]	; (800e8c0 <xTaskResumeAll+0xd4>)
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	4293      	cmp	r3, r2
 800e860:	d9df      	bls.n	800e822 <xTaskResumeAll+0x36>
 800e862:	4a17      	ldr	r2, [pc, #92]	; (800e8c0 <xTaskResumeAll+0xd4>)
 800e864:	6013      	str	r3, [r2, #0]
 800e866:	e7dc      	b.n	800e822 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800e868:	4b16      	ldr	r3, [pc, #88]	; (800e8c4 <xTaskResumeAll+0xd8>)
 800e86a:	2201      	movs	r2, #1
 800e86c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e86e:	4e11      	ldr	r6, [pc, #68]	; (800e8b4 <xTaskResumeAll+0xc8>)
 800e870:	e7e5      	b.n	800e83e <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e872:	4b15      	ldr	r3, [pc, #84]	; (800e8c8 <xTaskResumeAll+0xdc>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d005      	beq.n	800e886 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e87a:	4e13      	ldr	r6, [pc, #76]	; (800e8c8 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800e87c:	4c11      	ldr	r4, [pc, #68]	; (800e8c4 <xTaskResumeAll+0xd8>)
 800e87e:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e880:	6833      	ldr	r3, [r6, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d108      	bne.n	800e898 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800e886:	4b0f      	ldr	r3, [pc, #60]	; (800e8c4 <xTaskResumeAll+0xd8>)
 800e888:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e88a:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d1c4      	bne.n	800e81a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e890:	f000 fe3a 	bl	800f508 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e894:	3401      	adds	r4, #1
 800e896:	e7c0      	b.n	800e81a <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800e898:	f7ff ff1c 	bl	800e6d4 <xTaskIncrementTick>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d000      	beq.n	800e8a2 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800e8a0:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800e8a2:	4a09      	ldr	r2, [pc, #36]	; (800e8c8 <xTaskResumeAll+0xdc>)
 800e8a4:	6813      	ldr	r3, [r2, #0]
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	e7e9      	b.n	800e880 <xTaskResumeAll+0x94>
 800e8ac:	20001e04 	.word	0x20001e04
 800e8b0:	20001dfc 	.word	0x20001dfc
 800e8b4:	20001e40 	.word	0x20001e40
 800e8b8:	20001d6c 	.word	0x20001d6c
 800e8bc:	20001d60 	.word	0x20001d60
 800e8c0:	20001e10 	.word	0x20001e10
 800e8c4:	20001e84 	.word	0x20001e84
 800e8c8:	20001e00 	.word	0x20001e00

0800e8cc <vTaskDelay>:
	{
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e8d0:	d016      	beq.n	800e900 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e8d2:	4b0d      	ldr	r3, [pc, #52]	; (800e908 <vTaskDelay+0x3c>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <vTaskDelay+0x12>
 800e8da:	b672      	cpsid	i
 800e8dc:	e7fe      	b.n	800e8dc <vTaskDelay+0x10>
			vTaskSuspendAll();
 800e8de:	f7ff fee5 	bl	800e6ac <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800e8e2:	4b0a      	ldr	r3, [pc, #40]	; (800e90c <vTaskDelay+0x40>)
 800e8e4:	681c      	ldr	r4, [r3, #0]
 800e8e6:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e8e8:	4b09      	ldr	r3, [pc, #36]	; (800e910 <vTaskDelay+0x44>)
 800e8ea:	6818      	ldr	r0, [r3, #0]
 800e8ec:	3004      	adds	r0, #4
 800e8ee:	f7ff f962 	bl	800dbb6 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e8f2:	0020      	movs	r0, r4
 800e8f4:	f7ff fd14 	bl	800e320 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e8f8:	f7ff ff78 	bl	800e7ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d101      	bne.n	800e904 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e900:	f000 fe02 	bl	800f508 <vPortYield>
	}
 800e904:	bd70      	pop	{r4, r5, r6, pc}
 800e906:	46c0      	nop			; (mov r8, r8)
 800e908:	20001e04 	.word	0x20001e04
 800e90c:	20001e80 	.word	0x20001e80
 800e910:	20001d60 	.word	0x20001d60

0800e914 <prvIdleTask>:
{
 800e914:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e916:	4d16      	ldr	r5, [pc, #88]	; (800e970 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e918:	4e16      	ldr	r6, [pc, #88]	; (800e974 <prvIdleTask+0x60>)
 800e91a:	e003      	b.n	800e924 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e91c:	4b16      	ldr	r3, [pc, #88]	; (800e978 <prvIdleTask+0x64>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b01      	cmp	r3, #1
 800e922:	d822      	bhi.n	800e96a <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e924:	682b      	ldr	r3, [r5, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d0f8      	beq.n	800e91c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800e92a:	f7ff febf 	bl	800e6ac <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e92e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800e930:	f7ff ff5c 	bl	800e7ec <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e934:	2c00      	cmp	r4, #0
 800e936:	d0f5      	beq.n	800e924 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800e938:	f000 fdf2 	bl	800f520 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e93c:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <prvIdleTask+0x60>)
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e942:	1d20      	adds	r0, r4, #4
 800e944:	f7ff f937 	bl	800dbb6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e948:	4a0c      	ldr	r2, [pc, #48]	; (800e97c <prvIdleTask+0x68>)
 800e94a:	6813      	ldr	r3, [r2, #0]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800e950:	4a07      	ldr	r2, [pc, #28]	; (800e970 <prvIdleTask+0x5c>)
 800e952:	6813      	ldr	r3, [r2, #0]
 800e954:	3b01      	subs	r3, #1
 800e956:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800e958:	f000 fdee 	bl	800f538 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e95c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e95e:	f000 fef7 	bl	800f750 <vPortFree>
		vPortFree( pxTCB );
 800e962:	0020      	movs	r0, r4
 800e964:	f000 fef4 	bl	800f750 <vPortFree>
 800e968:	e7dc      	b.n	800e924 <prvIdleTask+0x10>
				taskYIELD();
 800e96a:	f000 fdcd 	bl	800f508 <vPortYield>
 800e96e:	e7d9      	b.n	800e924 <prvIdleTask+0x10>
 800e970:	20001e0c 	.word	0x20001e0c
 800e974:	20001e6c 	.word	0x20001e6c
 800e978:	20001d6c 	.word	0x20001d6c
 800e97c:	20001dfc 	.word	0x20001dfc

0800e980 <uxTaskGetSystemState>:
	{
 800e980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e982:	46c6      	mov	lr, r8
 800e984:	b500      	push	{lr}
 800e986:	0006      	movs	r6, r0
 800e988:	000d      	movs	r5, r1
 800e98a:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800e98c:	f7ff fe8e 	bl	800e6ac <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e990:	4b1e      	ldr	r3, [pc, #120]	; (800ea0c <uxTaskGetSystemState+0x8c>)
 800e992:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e994:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e996:	42ab      	cmp	r3, r5
 800e998:	d831      	bhi.n	800e9fe <uxTaskGetSystemState+0x7e>
 800e99a:	4d1d      	ldr	r5, [pc, #116]	; (800ea10 <uxTaskGetSystemState+0x90>)
 800e99c:	002f      	movs	r7, r5
 800e99e:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e9a0:	0160      	lsls	r0, r4, #5
 800e9a2:	1830      	adds	r0, r6, r0
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	0029      	movs	r1, r5
 800e9a8:	f7ff fc50 	bl	800e24c <prvListTaskWithinSingleList>
 800e9ac:	1824      	adds	r4, r4, r0
 800e9ae:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9b0:	42bd      	cmp	r5, r7
 800e9b2:	d1f5      	bne.n	800e9a0 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e9b4:	4b17      	ldr	r3, [pc, #92]	; (800ea14 <uxTaskGetSystemState+0x94>)
 800e9b6:	6819      	ldr	r1, [r3, #0]
 800e9b8:	0160      	lsls	r0, r4, #5
 800e9ba:	1830      	adds	r0, r6, r0
 800e9bc:	2202      	movs	r2, #2
 800e9be:	f7ff fc45 	bl	800e24c <prvListTaskWithinSingleList>
 800e9c2:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e9c4:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <uxTaskGetSystemState+0x98>)
 800e9c6:	6819      	ldr	r1, [r3, #0]
 800e9c8:	0160      	lsls	r0, r4, #5
 800e9ca:	1830      	adds	r0, r6, r0
 800e9cc:	2202      	movs	r2, #2
 800e9ce:	f7ff fc3d 	bl	800e24c <prvListTaskWithinSingleList>
 800e9d2:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e9d4:	0160      	lsls	r0, r4, #5
 800e9d6:	1830      	adds	r0, r6, r0
 800e9d8:	2204      	movs	r2, #4
 800e9da:	4910      	ldr	r1, [pc, #64]	; (800ea1c <uxTaskGetSystemState+0x9c>)
 800e9dc:	f7ff fc36 	bl	800e24c <prvListTaskWithinSingleList>
 800e9e0:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e9e2:	0160      	lsls	r0, r4, #5
 800e9e4:	1830      	adds	r0, r6, r0
 800e9e6:	2203      	movs	r2, #3
 800e9e8:	490d      	ldr	r1, [pc, #52]	; (800ea20 <uxTaskGetSystemState+0xa0>)
 800e9ea:	f7ff fc2f 	bl	800e24c <prvListTaskWithinSingleList>
 800e9ee:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800e9f0:	4643      	mov	r3, r8
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e9f6:	f7f9 fb31 	bl	800805c <ulMainGetRunTimeCounterValue>
 800e9fa:	4643      	mov	r3, r8
 800e9fc:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e9fe:	f7ff fef5 	bl	800e7ec <xTaskResumeAll>
	}
 800ea02:	0020      	movs	r0, r4
 800ea04:	bc04      	pop	{r2}
 800ea06:	4690      	mov	r8, r2
 800ea08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea0a:	46c0      	nop			; (mov r8, r8)
 800ea0c:	20001dfc 	.word	0x20001dfc
 800ea10:	20001de4 	.word	0x20001de4
 800ea14:	20001d64 	.word	0x20001d64
 800ea18:	20001d68 	.word	0x20001d68
 800ea1c:	20001e6c 	.word	0x20001e6c
 800ea20:	20001e58 	.word	0x20001e58

0800ea24 <vTaskSwitchContext>:
{
 800ea24:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea26:	4b3a      	ldr	r3, [pc, #232]	; (800eb10 <vTaskSwitchContext+0xec>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d003      	beq.n	800ea36 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ea2e:	4b39      	ldr	r3, [pc, #228]	; (800eb14 <vTaskSwitchContext+0xf0>)
 800ea30:	2201      	movs	r2, #1
 800ea32:	601a      	str	r2, [r3, #0]
}
 800ea34:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800ea36:	4b37      	ldr	r3, [pc, #220]	; (800eb14 <vTaskSwitchContext+0xf0>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ea3c:	f7f9 fb0e 	bl	800805c <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ea40:	4b35      	ldr	r3, [pc, #212]	; (800eb18 <vTaskSwitchContext+0xf4>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4298      	cmp	r0, r3
 800ea46:	d905      	bls.n	800ea54 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ea48:	4a34      	ldr	r2, [pc, #208]	; (800eb1c <vTaskSwitchContext+0xf8>)
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ea4e:	1acb      	subs	r3, r1, r3
 800ea50:	181b      	adds	r3, r3, r0
 800ea52:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800ea54:	4b30      	ldr	r3, [pc, #192]	; (800eb18 <vTaskSwitchContext+0xf4>)
 800ea56:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800ea58:	4b30      	ldr	r3, [pc, #192]	; (800eb1c <vTaskSwitchContext+0xf8>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	6812      	ldr	r2, [r2, #0]
 800ea60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d805      	bhi.n	800ea72 <vTaskSwitchContext+0x4e>
 800ea66:	4b2d      	ldr	r3, [pc, #180]	; (800eb1c <vTaskSwitchContext+0xf8>)
 800ea68:	6818      	ldr	r0, [r3, #0]
 800ea6a:	6819      	ldr	r1, [r3, #0]
 800ea6c:	3134      	adds	r1, #52	; 0x34
 800ea6e:	f7fe f9a1 	bl	800cdb4 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ea72:	4b2a      	ldr	r3, [pc, #168]	; (800eb1c <vTaskSwitchContext+0xf8>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea78:	2214      	movs	r2, #20
 800ea7a:	4929      	ldr	r1, [pc, #164]	; (800eb20 <vTaskSwitchContext+0xfc>)
 800ea7c:	f004 fbf6 	bl	801326c <memcmp>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d005      	beq.n	800ea90 <vTaskSwitchContext+0x6c>
 800ea84:	4b25      	ldr	r3, [pc, #148]	; (800eb1c <vTaskSwitchContext+0xf8>)
 800ea86:	6818      	ldr	r0, [r3, #0]
 800ea88:	6819      	ldr	r1, [r3, #0]
 800ea8a:	3134      	adds	r1, #52	; 0x34
 800ea8c:	f7fe f992 	bl	800cdb4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ea90:	4b24      	ldr	r3, [pc, #144]	; (800eb24 <vTaskSwitchContext+0x100>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	0093      	lsls	r3, r2, #2
 800ea96:	189b      	adds	r3, r3, r2
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4a23      	ldr	r2, [pc, #140]	; (800eb28 <vTaskSwitchContext+0x104>)
 800ea9c:	589b      	ldr	r3, [r3, r2]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d115      	bne.n	800eace <vTaskSwitchContext+0xaa>
 800eaa2:	4b20      	ldr	r3, [pc, #128]	; (800eb24 <vTaskSwitchContext+0x100>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00f      	beq.n	800eaca <vTaskSwitchContext+0xa6>
 800eaaa:	4a1e      	ldr	r2, [pc, #120]	; (800eb24 <vTaskSwitchContext+0x100>)
 800eaac:	4c1e      	ldr	r4, [pc, #120]	; (800eb28 <vTaskSwitchContext+0x104>)
 800eaae:	0010      	movs	r0, r2
 800eab0:	6813      	ldr	r3, [r2, #0]
 800eab2:	3b01      	subs	r3, #1
 800eab4:	6013      	str	r3, [r2, #0]
 800eab6:	6811      	ldr	r1, [r2, #0]
 800eab8:	008b      	lsls	r3, r1, #2
 800eaba:	185b      	adds	r3, r3, r1
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	591b      	ldr	r3, [r3, r4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d104      	bne.n	800eace <vTaskSwitchContext+0xaa>
 800eac4:	6803      	ldr	r3, [r0, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1f2      	bne.n	800eab0 <vTaskSwitchContext+0x8c>
 800eaca:	b672      	cpsid	i
 800eacc:	e7fe      	b.n	800eacc <vTaskSwitchContext+0xa8>
 800eace:	4b15      	ldr	r3, [pc, #84]	; (800eb24 <vTaskSwitchContext+0x100>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	4c15      	ldr	r4, [pc, #84]	; (800eb28 <vTaskSwitchContext+0x104>)
 800ead4:	0093      	lsls	r3, r2, #2
 800ead6:	1899      	adds	r1, r3, r2
 800ead8:	0089      	lsls	r1, r1, #2
 800eada:	1861      	adds	r1, r4, r1
 800eadc:	6848      	ldr	r0, [r1, #4]
 800eade:	6840      	ldr	r0, [r0, #4]
 800eae0:	6048      	str	r0, [r1, #4]
 800eae2:	189b      	adds	r3, r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	3308      	adds	r3, #8
 800eae8:	191b      	adds	r3, r3, r4
 800eaea:	4298      	cmp	r0, r3
 800eaec:	d009      	beq.n	800eb02 <vTaskSwitchContext+0xde>
 800eaee:	0093      	lsls	r3, r2, #2
 800eaf0:	189a      	adds	r2, r3, r2
 800eaf2:	0092      	lsls	r2, r2, #2
 800eaf4:	4b0c      	ldr	r3, [pc, #48]	; (800eb28 <vTaskSwitchContext+0x104>)
 800eaf6:	189a      	adds	r2, r3, r2
 800eaf8:	6853      	ldr	r3, [r2, #4]
 800eafa:	68da      	ldr	r2, [r3, #12]
 800eafc:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <vTaskSwitchContext+0xf8>)
 800eafe:	601a      	str	r2, [r3, #0]
}
 800eb00:	e798      	b.n	800ea34 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800eb02:	6840      	ldr	r0, [r0, #4]
 800eb04:	2114      	movs	r1, #20
 800eb06:	4351      	muls	r1, r2
 800eb08:	1863      	adds	r3, r4, r1
 800eb0a:	6058      	str	r0, [r3, #4]
 800eb0c:	e7ef      	b.n	800eaee <vTaskSwitchContext+0xca>
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	20001e04 	.word	0x20001e04
 800eb14:	20001e84 	.word	0x20001e84
 800eb18:	20001df8 	.word	0x20001df8
 800eb1c:	20001d60 	.word	0x20001d60
 800eb20:	0801a8a4 	.word	0x0801a8a4
 800eb24:	20001e10 	.word	0x20001e10
 800eb28:	20001d6c 	.word	0x20001d6c

0800eb2c <vTaskPlaceOnEventList>:
{
 800eb2c:	b570      	push	{r4, r5, r6, lr}
 800eb2e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d101      	bne.n	800eb38 <vTaskPlaceOnEventList+0xc>
 800eb34:	b672      	cpsid	i
 800eb36:	e7fe      	b.n	800eb36 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb38:	4d0b      	ldr	r5, [pc, #44]	; (800eb68 <vTaskPlaceOnEventList+0x3c>)
 800eb3a:	6829      	ldr	r1, [r5, #0]
 800eb3c:	3118      	adds	r1, #24
 800eb3e:	f7ff f823 	bl	800db88 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb42:	6828      	ldr	r0, [r5, #0]
 800eb44:	3004      	adds	r0, #4
 800eb46:	f7ff f836 	bl	800dbb6 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800eb4a:	1c63      	adds	r3, r4, #1
 800eb4c:	d005      	beq.n	800eb5a <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800eb4e:	4b07      	ldr	r3, [pc, #28]	; (800eb6c <vTaskPlaceOnEventList+0x40>)
 800eb50:	6818      	ldr	r0, [r3, #0]
 800eb52:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eb54:	f7ff fbe4 	bl	800e320 <prvAddCurrentTaskToDelayedList>
}
 800eb58:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eb5a:	4b03      	ldr	r3, [pc, #12]	; (800eb68 <vTaskPlaceOnEventList+0x3c>)
 800eb5c:	6819      	ldr	r1, [r3, #0]
 800eb5e:	3104      	adds	r1, #4
 800eb60:	4803      	ldr	r0, [pc, #12]	; (800eb70 <vTaskPlaceOnEventList+0x44>)
 800eb62:	f7ff f805 	bl	800db70 <vListInsertEnd>
 800eb66:	e7f7      	b.n	800eb58 <vTaskPlaceOnEventList+0x2c>
 800eb68:	20001d60 	.word	0x20001d60
 800eb6c:	20001e80 	.word	0x20001e80
 800eb70:	20001e58 	.word	0x20001e58

0800eb74 <vTaskPlaceOnEventListRestricted>:
	{
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d101      	bne.n	800eb80 <vTaskPlaceOnEventListRestricted+0xc>
 800eb7c:	b672      	cpsid	i
 800eb7e:	e7fe      	b.n	800eb7e <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb80:	4c07      	ldr	r4, [pc, #28]	; (800eba0 <vTaskPlaceOnEventListRestricted+0x2c>)
 800eb82:	6821      	ldr	r1, [r4, #0]
 800eb84:	3118      	adds	r1, #24
 800eb86:	f7fe fff3 	bl	800db70 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb8a:	6820      	ldr	r0, [r4, #0]
 800eb8c:	3004      	adds	r0, #4
 800eb8e:	f7ff f812 	bl	800dbb6 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800eb92:	4b04      	ldr	r3, [pc, #16]	; (800eba4 <vTaskPlaceOnEventListRestricted+0x30>)
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eb98:	f7ff fbc2 	bl	800e320 <prvAddCurrentTaskToDelayedList>
	}
 800eb9c:	bd70      	pop	{r4, r5, r6, pc}
 800eb9e:	46c0      	nop			; (mov r8, r8)
 800eba0:	20001d60 	.word	0x20001d60
 800eba4:	20001e80 	.word	0x20001e80

0800eba8 <xTaskRemoveFromEventList>:
{
 800eba8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ebaa:	68c3      	ldr	r3, [r0, #12]
 800ebac:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ebae:	2d00      	cmp	r5, #0
 800ebb0:	d101      	bne.n	800ebb6 <xTaskRemoveFromEventList+0xe>
 800ebb2:	b672      	cpsid	i
 800ebb4:	e7fe      	b.n	800ebb4 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ebb6:	002c      	movs	r4, r5
 800ebb8:	3418      	adds	r4, #24
 800ebba:	0020      	movs	r0, r4
 800ebbc:	f7fe fffb 	bl	800dbb6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebc0:	4b13      	ldr	r3, [pc, #76]	; (800ec10 <xTaskRemoveFromEventList+0x68>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d11e      	bne.n	800ec06 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ebc8:	1d2c      	adds	r4, r5, #4
 800ebca:	0020      	movs	r0, r4
 800ebcc:	f7fe fff3 	bl	800dbb6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebd0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ebd2:	4a10      	ldr	r2, [pc, #64]	; (800ec14 <xTaskRemoveFromEventList+0x6c>)
 800ebd4:	6812      	ldr	r2, [r2, #0]
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d901      	bls.n	800ebde <xTaskRemoveFromEventList+0x36>
 800ebda:	4a0e      	ldr	r2, [pc, #56]	; (800ec14 <xTaskRemoveFromEventList+0x6c>)
 800ebdc:	6013      	str	r3, [r2, #0]
 800ebde:	0098      	lsls	r0, r3, #2
 800ebe0:	18c0      	adds	r0, r0, r3
 800ebe2:	0080      	lsls	r0, r0, #2
 800ebe4:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <xTaskRemoveFromEventList+0x70>)
 800ebe6:	18c0      	adds	r0, r0, r3
 800ebe8:	0021      	movs	r1, r4
 800ebea:	f7fe ffc1 	bl	800db70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ebee:	4b0b      	ldr	r3, [pc, #44]	; (800ec1c <xTaskRemoveFromEventList+0x74>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ebf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ebf6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d903      	bls.n	800ec04 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800ebfc:	4b08      	ldr	r3, [pc, #32]	; (800ec20 <xTaskRemoveFromEventList+0x78>)
 800ebfe:	2201      	movs	r2, #1
 800ec00:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ec02:	3001      	adds	r0, #1
}
 800ec04:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec06:	0021      	movs	r1, r4
 800ec08:	4806      	ldr	r0, [pc, #24]	; (800ec24 <xTaskRemoveFromEventList+0x7c>)
 800ec0a:	f7fe ffb1 	bl	800db70 <vListInsertEnd>
 800ec0e:	e7ee      	b.n	800ebee <xTaskRemoveFromEventList+0x46>
 800ec10:	20001e04 	.word	0x20001e04
 800ec14:	20001e10 	.word	0x20001e10
 800ec18:	20001d6c 	.word	0x20001d6c
 800ec1c:	20001d60 	.word	0x20001d60
 800ec20:	20001e84 	.word	0x20001e84
 800ec24:	20001e40 	.word	0x20001e40

0800ec28 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d006      	beq.n	800ec3a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec2c:	4b04      	ldr	r3, [pc, #16]	; (800ec40 <vTaskSetTimeOutState+0x18>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec32:	4b04      	ldr	r3, [pc, #16]	; (800ec44 <vTaskSetTimeOutState+0x1c>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6043      	str	r3, [r0, #4]
}
 800ec38:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ec3a:	b672      	cpsid	i
 800ec3c:	e7fe      	b.n	800ec3c <vTaskSetTimeOutState+0x14>
 800ec3e:	46c0      	nop			; (mov r8, r8)
 800ec40:	20001e3c 	.word	0x20001e3c
 800ec44:	20001e80 	.word	0x20001e80

0800ec48 <xTaskCheckForTimeOut>:
{
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	0004      	movs	r4, r0
 800ec4c:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d003      	beq.n	800ec5a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ec52:	2900      	cmp	r1, #0
 800ec54:	d103      	bne.n	800ec5e <xTaskCheckForTimeOut+0x16>
 800ec56:	b672      	cpsid	i
 800ec58:	e7fe      	b.n	800ec58 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800ec5a:	b672      	cpsid	i
 800ec5c:	e7fe      	b.n	800ec5c <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800ec5e:	f000 fc5f 	bl	800f520 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ec62:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <xTaskCheckForTimeOut+0x5c>)
 800ec64:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ec66:	6833      	ldr	r3, [r6, #0]
 800ec68:	1c59      	adds	r1, r3, #1
 800ec6a:	d019      	beq.n	800eca0 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec6c:	490e      	ldr	r1, [pc, #56]	; (800eca8 <xTaskCheckForTimeOut+0x60>)
 800ec6e:	6809      	ldr	r1, [r1, #0]
 800ec70:	6820      	ldr	r0, [r4, #0]
 800ec72:	4288      	cmp	r0, r1
 800ec74:	d003      	beq.n	800ec7e <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800ec76:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec78:	6861      	ldr	r1, [r4, #4]
 800ec7a:	4291      	cmp	r1, r2
 800ec7c:	d904      	bls.n	800ec88 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ec7e:	6861      	ldr	r1, [r4, #4]
 800ec80:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ec82:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ec84:	4283      	cmp	r3, r0
 800ec86:	d803      	bhi.n	800ec90 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800ec88:	f000 fc56 	bl	800f538 <vPortExitCritical>
}
 800ec8c:	0028      	movs	r0, r5
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ec90:	1a9b      	subs	r3, r3, r2
 800ec92:	185b      	adds	r3, r3, r1
 800ec94:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ec96:	0020      	movs	r0, r4
 800ec98:	f7ff ffc6 	bl	800ec28 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ec9c:	2500      	movs	r5, #0
 800ec9e:	e7f3      	b.n	800ec88 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800eca0:	2500      	movs	r5, #0
 800eca2:	e7f1      	b.n	800ec88 <xTaskCheckForTimeOut+0x40>
 800eca4:	20001e80 	.word	0x20001e80
 800eca8:	20001e3c 	.word	0x20001e3c

0800ecac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ecac:	4b01      	ldr	r3, [pc, #4]	; (800ecb4 <vTaskMissedYield+0x8>)
 800ecae:	2201      	movs	r2, #1
 800ecb0:	601a      	str	r2, [r3, #0]
}
 800ecb2:	4770      	bx	lr
 800ecb4:	20001e84 	.word	0x20001e84

0800ecb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ecb8:	4b05      	ldr	r3, [pc, #20]	; (800ecd0 <xTaskGetSchedulerState+0x18>)
 800ecba:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecbc:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d004      	beq.n	800eccc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc2:	4b04      	ldr	r3, [pc, #16]	; (800ecd4 <xTaskGetSchedulerState+0x1c>)
 800ecc4:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecc6:	4243      	negs	r3, r0
 800ecc8:	4158      	adcs	r0, r3
 800ecca:	0040      	lsls	r0, r0, #1
	}
 800eccc:	4770      	bx	lr
 800ecce:	46c0      	nop			; (mov r8, r8)
 800ecd0:	20001e54 	.word	0x20001e54
 800ecd4:	20001e04 	.word	0x20001e04

0800ecd8 <vTaskPriorityInherit>:
	{
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ecdc:	d01a      	beq.n	800ed14 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ecde:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ece0:	4b19      	ldr	r3, [pc, #100]	; (800ed48 <vTaskPriorityInherit+0x70>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d214      	bcs.n	800ed14 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecea:	6983      	ldr	r3, [r0, #24]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	db05      	blt.n	800ecfc <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecf0:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <vTaskPriorityInherit+0x70>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ecf6:	2307      	movs	r3, #7
 800ecf8:	1a5b      	subs	r3, r3, r1
 800ecfa:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ecfc:	0093      	lsls	r3, r2, #2
 800ecfe:	189b      	adds	r3, r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4a12      	ldr	r2, [pc, #72]	; (800ed4c <vTaskPriorityInherit+0x74>)
 800ed04:	189b      	adds	r3, r3, r2
 800ed06:	6962      	ldr	r2, [r4, #20]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d004      	beq.n	800ed16 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed0c:	4b0e      	ldr	r3, [pc, #56]	; (800ed48 <vTaskPriorityInherit+0x70>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed12:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800ed14:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed16:	1d25      	adds	r5, r4, #4
 800ed18:	0028      	movs	r0, r5
 800ed1a:	f7fe ff4c 	bl	800dbb6 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed1e:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <vTaskPriorityInherit+0x70>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed24:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ed26:	4a0a      	ldr	r2, [pc, #40]	; (800ed50 <vTaskPriorityInherit+0x78>)
 800ed28:	6812      	ldr	r2, [r2, #0]
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d808      	bhi.n	800ed40 <vTaskPriorityInherit+0x68>
 800ed2e:	0098      	lsls	r0, r3, #2
 800ed30:	18c0      	adds	r0, r0, r3
 800ed32:	0080      	lsls	r0, r0, #2
 800ed34:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <vTaskPriorityInherit+0x74>)
 800ed36:	18c0      	adds	r0, r0, r3
 800ed38:	0029      	movs	r1, r5
 800ed3a:	f7fe ff19 	bl	800db70 <vListInsertEnd>
	}
 800ed3e:	e7e9      	b.n	800ed14 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800ed40:	4a03      	ldr	r2, [pc, #12]	; (800ed50 <vTaskPriorityInherit+0x78>)
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	e7f3      	b.n	800ed2e <vTaskPriorityInherit+0x56>
 800ed46:	46c0      	nop			; (mov r8, r8)
 800ed48:	20001d60 	.word	0x20001d60
 800ed4c:	20001d6c 	.word	0x20001d6c
 800ed50:	20001e10 	.word	0x20001e10

0800ed54 <xTaskPriorityDisinherit>:
	{
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ed58:	d02b      	beq.n	800edb2 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800ed5a:	4b18      	ldr	r3, [pc, #96]	; (800edbc <xTaskPriorityDisinherit+0x68>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4283      	cmp	r3, r0
 800ed60:	d001      	beq.n	800ed66 <xTaskPriorityDisinherit+0x12>
 800ed62:	b672      	cpsid	i
 800ed64:	e7fe      	b.n	800ed64 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed66:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d101      	bne.n	800ed70 <xTaskPriorityDisinherit+0x1c>
 800ed6c:	b672      	cpsid	i
 800ed6e:	e7fe      	b.n	800ed6e <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800ed70:	3b01      	subs	r3, #1
 800ed72:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ed76:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ed78:	428a      	cmp	r2, r1
 800ed7a:	d01c      	beq.n	800edb6 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800ed7c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed7e:	4283      	cmp	r3, r0
 800ed80:	d118      	bne.n	800edb4 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed82:	1d25      	adds	r5, r4, #4
 800ed84:	0028      	movs	r0, r5
 800ed86:	f7fe ff16 	bl	800dbb6 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ed8c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed8e:	2207      	movs	r2, #7
 800ed90:	1ad2      	subs	r2, r2, r3
 800ed92:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed94:	4a0a      	ldr	r2, [pc, #40]	; (800edc0 <xTaskPriorityDisinherit+0x6c>)
 800ed96:	6812      	ldr	r2, [r2, #0]
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d901      	bls.n	800eda0 <xTaskPriorityDisinherit+0x4c>
 800ed9c:	4a08      	ldr	r2, [pc, #32]	; (800edc0 <xTaskPriorityDisinherit+0x6c>)
 800ed9e:	6013      	str	r3, [r2, #0]
 800eda0:	2014      	movs	r0, #20
 800eda2:	4358      	muls	r0, r3
 800eda4:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <xTaskPriorityDisinherit+0x70>)
 800eda6:	18c0      	adds	r0, r0, r3
 800eda8:	0029      	movs	r1, r5
 800edaa:	f7fe fee1 	bl	800db70 <vListInsertEnd>
					xReturn = pdTRUE;
 800edae:	2001      	movs	r0, #1
 800edb0:	e000      	b.n	800edb4 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800edb2:	2000      	movs	r0, #0
	}
 800edb4:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800edb6:	2000      	movs	r0, #0
 800edb8:	e7fc      	b.n	800edb4 <xTaskPriorityDisinherit+0x60>
 800edba:	46c0      	nop			; (mov r8, r8)
 800edbc:	20001d60 	.word	0x20001d60
 800edc0:	20001e10 	.word	0x20001e10
 800edc4:	20001d6c 	.word	0x20001d6c

0800edc8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800edc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edca:	b085      	sub	sp, #20
 800edcc:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800edce:	2300      	movs	r3, #0
 800edd0:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800edd2:	4b2b      	ldr	r3, [pc, #172]	; (800ee80 <vTaskList+0xb8>)
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800edd8:	6818      	ldr	r0, [r3, #0]
 800edda:	0140      	lsls	r0, r0, #5
 800eddc:	f000 fc22 	bl	800f624 <pvPortMalloc>
 800ede0:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ede2:	d04a      	beq.n	800ee7a <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ede4:	9903      	ldr	r1, [sp, #12]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f7ff fdca 	bl	800e980 <uxTaskGetSystemState>
 800edec:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800edee:	2300      	movs	r3, #0
 800edf0:	9302      	str	r3, [sp, #8]
 800edf2:	9a02      	ldr	r2, [sp, #8]
 800edf4:	9b03      	ldr	r3, [sp, #12]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d23c      	bcs.n	800ee74 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800edfa:	4e22      	ldr	r6, [pc, #136]	; (800ee84 <vTaskList+0xbc>)
 800edfc:	e027      	b.n	800ee4e <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800edfe:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d133      	bne.n	800ee6c <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee04:	9b02      	ldr	r3, [sp, #8]
 800ee06:	015b      	lsls	r3, r3, #5
 800ee08:	18fb      	adds	r3, r7, r3
 800ee0a:	6859      	ldr	r1, [r3, #4]
 800ee0c:	0020      	movs	r0, r4
 800ee0e:	f7ff fab1 	bl	800e374 <prvWriteNameToBuffer>
 800ee12:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee14:	9b02      	ldr	r3, [sp, #8]
 800ee16:	9a02      	ldr	r2, [sp, #8]
 800ee18:	9902      	ldr	r1, [sp, #8]
 800ee1a:	015b      	lsls	r3, r3, #5
 800ee1c:	18fb      	adds	r3, r7, r3
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	0149      	lsls	r1, r1, #5
 800ee22:	1879      	adds	r1, r7, r1
 800ee24:	6889      	ldr	r1, [r1, #8]
 800ee26:	9101      	str	r1, [sp, #4]
 800ee28:	0152      	lsls	r2, r2, #5
 800ee2a:	18ba      	adds	r2, r7, r2
 800ee2c:	8b92      	ldrh	r2, [r2, #28]
 800ee2e:	9200      	str	r2, [sp, #0]
 800ee30:	002a      	movs	r2, r5
 800ee32:	0031      	movs	r1, r6
 800ee34:	f004 fc2c 	bl	8013690 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ee38:	0020      	movs	r0, r4
 800ee3a:	f7f1 f96d 	bl	8000118 <strlen>
 800ee3e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ee40:	9b02      	ldr	r3, [sp, #8]
 800ee42:	3301      	adds	r3, #1
 800ee44:	9302      	str	r3, [sp, #8]
 800ee46:	9a02      	ldr	r2, [sp, #8]
 800ee48:	9b03      	ldr	r3, [sp, #12]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d212      	bcs.n	800ee74 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee4e:	9b02      	ldr	r3, [sp, #8]
 800ee50:	015b      	lsls	r3, r3, #5
 800ee52:	18fb      	adds	r3, r7, r3
 800ee54:	7b1b      	ldrb	r3, [r3, #12]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d00a      	beq.n	800ee70 <vTaskList+0xa8>
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	2a02      	cmp	r2, #2
 800ee5e:	d9ce      	bls.n	800edfe <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ee60:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d0ce      	beq.n	800ee04 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ee66:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee68:	2b04      	cmp	r3, #4
 800ee6a:	d0cb      	beq.n	800ee04 <vTaskList+0x3c>
										cStatus = 0x00;
 800ee6c:	2500      	movs	r5, #0
										break;
 800ee6e:	e7c9      	b.n	800ee04 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ee70:	2542      	movs	r5, #66	; 0x42
 800ee72:	e7c7      	b.n	800ee04 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ee74:	0038      	movs	r0, r7
 800ee76:	f000 fc6b 	bl	800f750 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee7a:	b005      	add	sp, #20
 800ee7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee7e:	46c0      	nop			; (mov r8, r8)
 800ee80:	20001dfc 	.word	0x20001dfc
 800ee84:	0801a8d0 	.word	0x0801a8d0

0800ee88 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ee92:	4b26      	ldr	r3, [pc, #152]	; (800ef2c <vTaskGetRunTimeStats+0xa4>)
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ee98:	6818      	ldr	r0, [r3, #0]
 800ee9a:	0140      	lsls	r0, r0, #5
 800ee9c:	f000 fbc2 	bl	800f624 <pvPortMalloc>
 800eea0:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800eea2:	d014      	beq.n	800eece <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800eea4:	9903      	ldr	r1, [sp, #12]
 800eea6:	aa01      	add	r2, sp, #4
 800eea8:	f7ff fd6a 	bl	800e980 <uxTaskGetSystemState>
 800eeac:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800eeae:	2164      	movs	r1, #100	; 0x64
 800eeb0:	9801      	ldr	r0, [sp, #4]
 800eeb2:	f7f1 f94d 	bl	8000150 <__udivsi3>
 800eeb6:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d005      	beq.n	800eec8 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800eebc:	2300      	movs	r3, #0
 800eebe:	9302      	str	r3, [sp, #8]
 800eec0:	9a02      	ldr	r2, [sp, #8]
 800eec2:	9b03      	ldr	r3, [sp, #12]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d316      	bcc.n	800eef6 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800eec8:	0030      	movs	r0, r6
 800eeca:	f000 fc41 	bl	800f750 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eece:	b004      	add	sp, #16
 800eed0:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800eed2:	9b02      	ldr	r3, [sp, #8]
 800eed4:	015b      	lsls	r3, r3, #5
 800eed6:	18f3      	adds	r3, r6, r3
 800eed8:	699a      	ldr	r2, [r3, #24]
 800eeda:	4915      	ldr	r1, [pc, #84]	; (800ef30 <vTaskGetRunTimeStats+0xa8>)
 800eedc:	f004 fbd8 	bl	8013690 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800eee0:	0020      	movs	r0, r4
 800eee2:	f7f1 f919 	bl	8000118 <strlen>
 800eee6:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800eee8:	9b02      	ldr	r3, [sp, #8]
 800eeea:	3301      	adds	r3, #1
 800eeec:	9302      	str	r3, [sp, #8]
 800eeee:	9a02      	ldr	r2, [sp, #8]
 800eef0:	9b03      	ldr	r3, [sp, #12]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d2e8      	bcs.n	800eec8 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800eef6:	9b02      	ldr	r3, [sp, #8]
 800eef8:	015b      	lsls	r3, r3, #5
 800eefa:	18f3      	adds	r3, r6, r3
 800eefc:	9901      	ldr	r1, [sp, #4]
 800eefe:	6998      	ldr	r0, [r3, #24]
 800ef00:	f7f1 f926 	bl	8000150 <__udivsi3>
 800ef04:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ef06:	9b02      	ldr	r3, [sp, #8]
 800ef08:	015b      	lsls	r3, r3, #5
 800ef0a:	18f3      	adds	r3, r6, r3
 800ef0c:	6859      	ldr	r1, [r3, #4]
 800ef0e:	0020      	movs	r0, r4
 800ef10:	f7ff fa30 	bl	800e374 <prvWriteNameToBuffer>
 800ef14:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800ef16:	2d00      	cmp	r5, #0
 800ef18:	d0db      	beq.n	800eed2 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ef1a:	9b02      	ldr	r3, [sp, #8]
 800ef1c:	015b      	lsls	r3, r3, #5
 800ef1e:	18f3      	adds	r3, r6, r3
 800ef20:	699a      	ldr	r2, [r3, #24]
 800ef22:	002b      	movs	r3, r5
 800ef24:	4903      	ldr	r1, [pc, #12]	; (800ef34 <vTaskGetRunTimeStats+0xac>)
 800ef26:	f004 fbb3 	bl	8013690 <sprintf>
 800ef2a:	e7d9      	b.n	800eee0 <vTaskGetRunTimeStats+0x58>
 800ef2c:	20001dfc 	.word	0x20001dfc
 800ef30:	0801a8c4 	.word	0x0801a8c4
 800ef34:	0801a8b8 	.word	0x0801a8b8

0800ef38 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef38:	4b05      	ldr	r3, [pc, #20]	; (800ef50 <pvTaskIncrementMutexHeldCount+0x18>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d004      	beq.n	800ef4a <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef40:	4b03      	ldr	r3, [pc, #12]	; (800ef50 <pvTaskIncrementMutexHeldCount+0x18>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ef46:	3301      	adds	r3, #1
 800ef48:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ef4a:	4b01      	ldr	r3, [pc, #4]	; (800ef50 <pvTaskIncrementMutexHeldCount+0x18>)
 800ef4c:	6818      	ldr	r0, [r3, #0]
	}
 800ef4e:	4770      	bx	lr
 800ef50:	20001d60 	.word	0x20001d60

0800ef54 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	0005      	movs	r5, r0
 800ef58:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef5a:	f000 fae1 	bl	800f520 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ef5e:	4b20      	ldr	r3, [pc, #128]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d106      	bne.n	800ef76 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ef68:	4b1d      	ldr	r3, [pc, #116]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	235c      	movs	r3, #92	; 0x5c
 800ef6e:	2101      	movs	r1, #1
 800ef70:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ef72:	2c00      	cmp	r4, #0
 800ef74:	d118      	bne.n	800efa8 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ef76:	f000 fadf 	bl	800f538 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ef7a:	f000 fad1 	bl	800f520 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ef7e:	4b18      	ldr	r3, [pc, #96]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ef84:	2c00      	cmp	r4, #0
 800ef86:	d006      	beq.n	800ef96 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800ef88:	2d00      	cmp	r5, #0
 800ef8a:	d123      	bne.n	800efd4 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ef8c:	4b14      	ldr	r3, [pc, #80]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ef92:	3b01      	subs	r3, #1
 800ef94:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ef96:	4b12      	ldr	r3, [pc, #72]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	235c      	movs	r3, #92	; 0x5c
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800efa0:	f000 faca 	bl	800f538 <vPortExitCritical>

		return ulReturn;
	}
 800efa4:	0020      	movs	r0, r4
 800efa6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800efa8:	4b0d      	ldr	r3, [pc, #52]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800efaa:	6818      	ldr	r0, [r3, #0]
 800efac:	3004      	adds	r0, #4
 800efae:	f7fe fe02 	bl	800dbb6 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800efb2:	1c63      	adds	r3, r4, #1
 800efb4:	d007      	beq.n	800efc6 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800efb6:	4b0b      	ldr	r3, [pc, #44]	; (800efe4 <ulTaskNotifyTake+0x90>)
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800efbc:	f7ff f9b0 	bl	800e320 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800efc0:	f000 faa2 	bl	800f508 <vPortYield>
 800efc4:	e7d7      	b.n	800ef76 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800efc6:	4b06      	ldr	r3, [pc, #24]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800efc8:	6819      	ldr	r1, [r3, #0]
 800efca:	3104      	adds	r1, #4
 800efcc:	4806      	ldr	r0, [pc, #24]	; (800efe8 <ulTaskNotifyTake+0x94>)
 800efce:	f7fe fdcf 	bl	800db70 <vListInsertEnd>
 800efd2:	e7f5      	b.n	800efc0 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800efd4:	4b02      	ldr	r3, [pc, #8]	; (800efe0 <ulTaskNotifyTake+0x8c>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2200      	movs	r2, #0
 800efda:	659a      	str	r2, [r3, #88]	; 0x58
 800efdc:	e7db      	b.n	800ef96 <ulTaskNotifyTake+0x42>
 800efde:	46c0      	nop			; (mov r8, r8)
 800efe0:	20001d60 	.word	0x20001d60
 800efe4:	20001e80 	.word	0x20001e80
 800efe8:	20001e58 	.word	0x20001e58

0800efec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efee:	0004      	movs	r4, r0
 800eff0:	000e      	movs	r6, r1
 800eff2:	0015      	movs	r5, r2
 800eff4:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d101      	bne.n	800effe <xTaskGenericNotify+0x12>
 800effa:	b672      	cpsid	i
 800effc:	e7fe      	b.n	800effc <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800effe:	f000 fa8f 	bl	800f520 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f002:	2f00      	cmp	r7, #0
 800f004:	d001      	beq.n	800f00a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f008:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f00a:	225c      	movs	r2, #92	; 0x5c
 800f00c:	5ca3      	ldrb	r3, [r4, r2]
 800f00e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f010:	2102      	movs	r1, #2
 800f012:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f014:	2d02      	cmp	r5, #2
 800f016:	d015      	beq.n	800f044 <xTaskGenericNotify+0x58>
 800f018:	d907      	bls.n	800f02a <xTaskGenericNotify+0x3e>
 800f01a:	2d03      	cmp	r5, #3
 800f01c:	d016      	beq.n	800f04c <xTaskGenericNotify+0x60>
 800f01e:	2d04      	cmp	r5, #4
 800f020:	d105      	bne.n	800f02e <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f022:	2b02      	cmp	r3, #2
 800f024:	d035      	beq.n	800f092 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f026:	65a6      	str	r6, [r4, #88]	; 0x58
 800f028:	e001      	b.n	800f02e <xTaskGenericNotify+0x42>
			switch( eAction )
 800f02a:	2d01      	cmp	r5, #1
 800f02c:	d006      	beq.n	800f03c <xTaskGenericNotify+0x50>
 800f02e:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f030:	2b01      	cmp	r3, #1
 800f032:	d00d      	beq.n	800f050 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f034:	f000 fa80 	bl	800f538 <vPortExitCritical>

		return xReturn;
	}
 800f038:	0028      	movs	r0, r5
 800f03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800f03c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f03e:	4316      	orrs	r6, r2
 800f040:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800f042:	e7f4      	b.n	800f02e <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800f044:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f046:	3201      	adds	r2, #1
 800f048:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f04a:	e7f0      	b.n	800f02e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800f04c:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800f04e:	e7ee      	b.n	800f02e <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f050:	1d25      	adds	r5, r4, #4
 800f052:	0028      	movs	r0, r5
 800f054:	f7fe fdaf 	bl	800dbb6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f05a:	4a0f      	ldr	r2, [pc, #60]	; (800f098 <xTaskGenericNotify+0xac>)
 800f05c:	6812      	ldr	r2, [r2, #0]
 800f05e:	4293      	cmp	r3, r2
 800f060:	d901      	bls.n	800f066 <xTaskGenericNotify+0x7a>
 800f062:	4a0d      	ldr	r2, [pc, #52]	; (800f098 <xTaskGenericNotify+0xac>)
 800f064:	6013      	str	r3, [r2, #0]
 800f066:	2014      	movs	r0, #20
 800f068:	4358      	muls	r0, r3
 800f06a:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <xTaskGenericNotify+0xb0>)
 800f06c:	18c0      	adds	r0, r0, r3
 800f06e:	0029      	movs	r1, r5
 800f070:	f7fe fd7e 	bl	800db70 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <xTaskGenericNotify+0x92>
 800f07a:	b672      	cpsid	i
 800f07c:	e7fe      	b.n	800f07c <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f07e:	4b08      	ldr	r3, [pc, #32]	; (800f0a0 <xTaskGenericNotify+0xb4>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f086:	2501      	movs	r5, #1
 800f088:	429a      	cmp	r2, r3
 800f08a:	d9d3      	bls.n	800f034 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800f08c:	f000 fa3c 	bl	800f508 <vPortYield>
 800f090:	e7d0      	b.n	800f034 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800f092:	2500      	movs	r5, #0
 800f094:	e7ce      	b.n	800f034 <xTaskGenericNotify+0x48>
 800f096:	46c0      	nop			; (mov r8, r8)
 800f098:	20001e10 	.word	0x20001e10
 800f09c:	20001d6c 	.word	0x20001d6c
 800f0a0:	20001d60 	.word	0x20001d60

0800f0a4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0a4:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0a6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0a8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f0aa:	4291      	cmp	r1, r2
 800f0ac:	d80b      	bhi.n	800f0c6 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f0ae:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f0b0:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f0b2:	6983      	ldr	r3, [r0, #24]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d211      	bcs.n	800f0dc <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f0b8:	1d01      	adds	r1, r0, #4
 800f0ba:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <prvInsertTimerInActiveList+0x3c>)
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f7fe fd63 	bl	800db88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f0c2:	2400      	movs	r4, #0
 800f0c4:	e00a      	b.n	800f0dc <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d202      	bcs.n	800f0d0 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f0ca:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f0cc:	4299      	cmp	r1, r3
 800f0ce:	d205      	bcs.n	800f0dc <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0d0:	1d01      	adds	r1, r0, #4
 800f0d2:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <prvInsertTimerInActiveList+0x40>)
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f7fe fd57 	bl	800db88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f0da:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800f0dc:	0020      	movs	r0, r4
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	20001e8c 	.word	0x20001e8c
 800f0e4:	20001e88 	.word	0x20001e88

0800f0e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f0e8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f0ea:	f000 fa19 	bl	800f520 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f0ee:	4b11      	ldr	r3, [pc, #68]	; (800f134 <prvCheckForValidListAndQueue+0x4c>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0f6:	f000 fa1f 	bl	800f538 <vPortExitCritical>
}
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f0fc:	4d0e      	ldr	r5, [pc, #56]	; (800f138 <prvCheckForValidListAndQueue+0x50>)
 800f0fe:	0028      	movs	r0, r5
 800f100:	f7fe fd28 	bl	800db54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f104:	4c0d      	ldr	r4, [pc, #52]	; (800f13c <prvCheckForValidListAndQueue+0x54>)
 800f106:	0020      	movs	r0, r4
 800f108:	f7fe fd24 	bl	800db54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f10c:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <prvCheckForValidListAndQueue+0x58>)
 800f10e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f110:	4b0c      	ldr	r3, [pc, #48]	; (800f144 <prvCheckForValidListAndQueue+0x5c>)
 800f112:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f114:	2200      	movs	r2, #0
 800f116:	2110      	movs	r1, #16
 800f118:	2004      	movs	r0, #4
 800f11a:	f7fe fe26 	bl	800dd6a <xQueueGenericCreate>
 800f11e:	4b05      	ldr	r3, [pc, #20]	; (800f134 <prvCheckForValidListAndQueue+0x4c>)
 800f120:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800f122:	2800      	cmp	r0, #0
 800f124:	d101      	bne.n	800f12a <prvCheckForValidListAndQueue+0x42>
 800f126:	b672      	cpsid	i
 800f128:	e7fe      	b.n	800f128 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f12a:	4907      	ldr	r1, [pc, #28]	; (800f148 <prvCheckForValidListAndQueue+0x60>)
 800f12c:	f7ff f856 	bl	800e1dc <vQueueAddToRegistry>
 800f130:	e7e1      	b.n	800f0f6 <prvCheckForValidListAndQueue+0xe>
 800f132:	46c0      	nop			; (mov r8, r8)
 800f134:	20001ebc 	.word	0x20001ebc
 800f138:	20001e90 	.word	0x20001e90
 800f13c:	20001ea4 	.word	0x20001ea4
 800f140:	20001e88 	.word	0x20001e88
 800f144:	20001e8c 	.word	0x20001e8c
 800f148:	0801a910 	.word	0x0801a910

0800f14c <xTimerCreateTimerTask>:
{
 800f14c:	b500      	push	{lr}
 800f14e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f150:	f7ff ffca 	bl	800f0e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f154:	4b0a      	ldr	r3, [pc, #40]	; (800f180 <xTimerCreateTimerTask+0x34>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00d      	beq.n	800f178 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f15c:	2300      	movs	r3, #0
 800f15e:	9303      	str	r3, [sp, #12]
 800f160:	9302      	str	r3, [sp, #8]
 800f162:	9301      	str	r3, [sp, #4]
 800f164:	3303      	adds	r3, #3
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	2300      	movs	r3, #0
 800f16a:	22a0      	movs	r2, #160	; 0xa0
 800f16c:	4905      	ldr	r1, [pc, #20]	; (800f184 <xTimerCreateTimerTask+0x38>)
 800f16e:	4806      	ldr	r0, [pc, #24]	; (800f188 <xTimerCreateTimerTask+0x3c>)
 800f170:	f7ff f918 	bl	800e3a4 <xTaskGenericCreate>
	configASSERT( xReturn );
 800f174:	2800      	cmp	r0, #0
 800f176:	d101      	bne.n	800f17c <xTimerCreateTimerTask+0x30>
 800f178:	b672      	cpsid	i
 800f17a:	e7fe      	b.n	800f17a <xTimerCreateTimerTask+0x2e>
}
 800f17c:	b005      	add	sp, #20
 800f17e:	bd00      	pop	{pc}
 800f180:	20001ebc 	.word	0x20001ebc
 800f184:	0801a918 	.word	0x0801a918
 800f188:	0800f2d5 	.word	0x0800f2d5

0800f18c <xTimerCreate>:
{
 800f18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f18e:	46c6      	mov	lr, r8
 800f190:	b500      	push	{lr}
 800f192:	4680      	mov	r8, r0
 800f194:	000d      	movs	r5, r1
 800f196:	0017      	movs	r7, r2
 800f198:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f19a:	2900      	cmp	r1, #0
 800f19c:	d014      	beq.n	800f1c8 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f19e:	202c      	movs	r0, #44	; 0x2c
 800f1a0:	f000 fa40 	bl	800f624 <pvPortMalloc>
 800f1a4:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f1a6:	d00b      	beq.n	800f1c0 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f1a8:	f7ff ff9e 	bl	800f0e8 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f1ac:	4643      	mov	r3, r8
 800f1ae:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f1b0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f1b2:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f1b4:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f1b6:	9b06      	ldr	r3, [sp, #24]
 800f1b8:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f1ba:	1d20      	adds	r0, r4, #4
 800f1bc:	f7fe fcd5 	bl	800db6a <vListInitialiseItem>
}
 800f1c0:	0020      	movs	r0, r4
 800f1c2:	bc04      	pop	{r2}
 800f1c4:	4690      	mov	r8, r2
 800f1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f1c8:	b672      	cpsid	i
 800f1ca:	e7fe      	b.n	800f1ca <xTimerCreate+0x3e>

0800f1cc <xTimerGenericCommand>:
{
 800f1cc:	b530      	push	{r4, r5, lr}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f1d2:	4b13      	ldr	r3, [pc, #76]	; (800f220 <xTimerGenericCommand+0x54>)
 800f1d4:	681c      	ldr	r4, [r3, #0]
 800f1d6:	2c00      	cmp	r4, #0
 800f1d8:	d020      	beq.n	800f21c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f1da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1dc:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f1de:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1e0:	2905      	cmp	r1, #5
 800f1e2:	dc13      	bgt.n	800f20c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1e4:	f7ff fd68 	bl	800ecb8 <xTaskGetSchedulerState>
 800f1e8:	2802      	cmp	r0, #2
 800f1ea:	d007      	beq.n	800f1fc <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1ec:	4b0c      	ldr	r3, [pc, #48]	; (800f220 <xTimerGenericCommand+0x54>)
 800f1ee:	6818      	ldr	r0, [r3, #0]
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	4669      	mov	r1, sp
 800f1f6:	f7fe fdf3 	bl	800dde0 <xQueueGenericSend>
 800f1fa:	e00d      	b.n	800f218 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1fc:	4b08      	ldr	r3, [pc, #32]	; (800f220 <xTimerGenericCommand+0x54>)
 800f1fe:	6818      	ldr	r0, [r3, #0]
 800f200:	2300      	movs	r3, #0
 800f202:	9a08      	ldr	r2, [sp, #32]
 800f204:	4669      	mov	r1, sp
 800f206:	f7fe fdeb 	bl	800dde0 <xQueueGenericSend>
 800f20a:	e005      	b.n	800f218 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f20c:	2300      	movs	r3, #0
 800f20e:	002a      	movs	r2, r5
 800f210:	4669      	mov	r1, sp
 800f212:	0020      	movs	r0, r4
 800f214:	f7fe fe7b 	bl	800df0e <xQueueGenericSendFromISR>
}
 800f218:	b005      	add	sp, #20
 800f21a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f21c:	2000      	movs	r0, #0
	return xReturn;
 800f21e:	e7fb      	b.n	800f218 <xTimerGenericCommand+0x4c>
 800f220:	20001ebc 	.word	0x20001ebc

0800f224 <prvSampleTimeNow>:
{
 800f224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f226:	46d6      	mov	lr, sl
 800f228:	464f      	mov	r7, r9
 800f22a:	4646      	mov	r6, r8
 800f22c:	b5c0      	push	{r6, r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800f232:	f7ff fa43 	bl	800e6bc <xTaskGetTickCount>
 800f236:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f238:	4b23      	ldr	r3, [pc, #140]	; (800f2c8 <prvSampleTimeNow+0xa4>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4283      	cmp	r3, r0
 800f23e:	d80b      	bhi.n	800f258 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800f240:	2300      	movs	r3, #0
 800f242:	4642      	mov	r2, r8
 800f244:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800f246:	4b20      	ldr	r3, [pc, #128]	; (800f2c8 <prvSampleTimeNow+0xa4>)
 800f248:	601f      	str	r7, [r3, #0]
}
 800f24a:	0038      	movs	r0, r7
 800f24c:	b004      	add	sp, #16
 800f24e:	bc1c      	pop	{r2, r3, r4}
 800f250:	4690      	mov	r8, r2
 800f252:	4699      	mov	r9, r3
 800f254:	46a2      	mov	sl, r4
 800f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f258:	4e1c      	ldr	r6, [pc, #112]	; (800f2cc <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f25a:	2300      	movs	r3, #0
 800f25c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f25e:	6833      	ldr	r3, [r6, #0]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	2a00      	cmp	r2, #0
 800f264:	d026      	beq.n	800f2b4 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f26c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f26e:	1d25      	adds	r5, r4, #4
 800f270:	0028      	movs	r0, r5
 800f272:	f7fe fca0 	bl	800dbb6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f276:	0020      	movs	r0, r4
 800f278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f27a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f27c:	69e3      	ldr	r3, [r4, #28]
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d1ed      	bne.n	800f25e <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f282:	69a3      	ldr	r3, [r4, #24]
 800f284:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f286:	459a      	cmp	sl, r3
 800f288:	d209      	bcs.n	800f29e <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f28a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f28c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f28e:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <prvSampleTimeNow+0xa8>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	9303      	str	r3, [sp, #12]
 800f294:	0029      	movs	r1, r5
 800f296:	0018      	movs	r0, r3
 800f298:	f7fe fc76 	bl	800db88 <vListInsert>
 800f29c:	e7df      	b.n	800f25e <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f29e:	464b      	mov	r3, r9
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	4652      	mov	r2, sl
 800f2a4:	4649      	mov	r1, r9
 800f2a6:	0020      	movs	r0, r4
 800f2a8:	f7ff ff90 	bl	800f1cc <xTimerGenericCommand>
				configASSERT( xResult );
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d1d6      	bne.n	800f25e <prvSampleTimeNow+0x3a>
 800f2b0:	b672      	cpsid	i
 800f2b2:	e7fe      	b.n	800f2b2 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800f2b4:	4a06      	ldr	r2, [pc, #24]	; (800f2d0 <prvSampleTimeNow+0xac>)
 800f2b6:	4905      	ldr	r1, [pc, #20]	; (800f2cc <prvSampleTimeNow+0xa8>)
 800f2b8:	6810      	ldr	r0, [r2, #0]
 800f2ba:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f2bc:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	4642      	mov	r2, r8
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	e7bf      	b.n	800f246 <prvSampleTimeNow+0x22>
 800f2c6:	46c0      	nop			; (mov r8, r8)
 800f2c8:	20001eb8 	.word	0x20001eb8
 800f2cc:	20001e88 	.word	0x20001e88
 800f2d0:	20001e8c 	.word	0x20001e8c

0800f2d4 <prvTimerTask>:
{
 800f2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2d6:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800f2d8:	4e57      	ldr	r6, [pc, #348]	; (800f438 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2da:	4b58      	ldr	r3, [pc, #352]	; (800f43c <prvTimerTask+0x168>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	2a00      	cmp	r2, #0
 800f2e2:	d100      	bne.n	800f2e6 <prvTimerTask+0x12>
 800f2e4:	e09c      	b.n	800f420 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800f2ea:	f7ff f9df 	bl	800e6ac <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ee:	a808      	add	r0, sp, #32
 800f2f0:	f7ff ff98 	bl	800f224 <prvSampleTimeNow>
 800f2f4:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f2f6:	9b08      	ldr	r3, [sp, #32]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d000      	beq.n	800f2fe <prvTimerTask+0x2a>
 800f2fc:	e099      	b.n	800f432 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2fe:	42a0      	cmp	r0, r4
 800f300:	d233      	bcs.n	800f36a <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f302:	1b61      	subs	r1, r4, r5
 800f304:	4b4e      	ldr	r3, [pc, #312]	; (800f440 <prvTimerTask+0x16c>)
 800f306:	6818      	ldr	r0, [r3, #0]
 800f308:	f7fe ff80 	bl	800e20c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f30c:	f7ff fa6e 	bl	800e7ec <xTaskResumeAll>
 800f310:	2800      	cmp	r0, #0
 800f312:	d050      	beq.n	800f3b6 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f314:	4c4a      	ldr	r4, [pc, #296]	; (800f440 <prvTimerTask+0x16c>)
 800f316:	2300      	movs	r3, #0
 800f318:	2200      	movs	r2, #0
 800f31a:	a908      	add	r1, sp, #32
 800f31c:	6820      	ldr	r0, [r4, #0]
 800f31e:	f7fe fe78 	bl	800e012 <xQueueGenericReceive>
 800f322:	2800      	cmp	r0, #0
 800f324:	d0d9      	beq.n	800f2da <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f326:	9b08      	ldr	r3, [sp, #32]
 800f328:	9303      	str	r3, [sp, #12]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	da0c      	bge.n	800f348 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f330:	9303      	str	r3, [sp, #12]
 800f332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f338:	9305      	str	r3, [sp, #20]
 800f33a:	9903      	ldr	r1, [sp, #12]
 800f33c:	9804      	ldr	r0, [sp, #16]
 800f33e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f340:	9b08      	ldr	r3, [sp, #32]
 800f342:	9303      	str	r3, [sp, #12]
 800f344:	2b00      	cmp	r3, #0
 800f346:	dbe6      	blt.n	800f316 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f348:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f34a:	696b      	ldr	r3, [r5, #20]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f350:	1d28      	adds	r0, r5, #4
 800f352:	f7fe fc30 	bl	800dbb6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f356:	a807      	add	r0, sp, #28
 800f358:	f7ff ff64 	bl	800f224 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f35c:	9b08      	ldr	r3, [sp, #32]
 800f35e:	9303      	str	r3, [sp, #12]
 800f360:	2b09      	cmp	r3, #9
 800f362:	d8d8      	bhi.n	800f316 <prvTimerTask+0x42>
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	58f3      	ldr	r3, [r6, r3]
 800f368:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f36a:	f7ff fa3f 	bl	800e7ec <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f36e:	4b33      	ldr	r3, [pc, #204]	; (800f43c <prvTimerTask+0x168>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f376:	1d38      	adds	r0, r7, #4
 800f378:	f7fe fc1d 	bl	800dbb6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d003      	beq.n	800f38a <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	0038      	movs	r0, r7
 800f386:	4798      	blx	r3
 800f388:	e7c4      	b.n	800f314 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	18e1      	adds	r1, r4, r3
 800f38e:	0023      	movs	r3, r4
 800f390:	002a      	movs	r2, r5
 800f392:	0038      	movs	r0, r7
 800f394:	f7ff fe86 	bl	800f0a4 <prvInsertTimerInActiveList>
 800f398:	2801      	cmp	r0, #1
 800f39a:	d1f2      	bne.n	800f382 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f39c:	2100      	movs	r1, #0
 800f39e:	9100      	str	r1, [sp, #0]
 800f3a0:	000b      	movs	r3, r1
 800f3a2:	0022      	movs	r2, r4
 800f3a4:	0038      	movs	r0, r7
 800f3a6:	f7ff ff11 	bl	800f1cc <xTimerGenericCommand>
			configASSERT( xResult );
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d1e9      	bne.n	800f382 <prvTimerTask+0xae>
 800f3ae:	b672      	cpsid	i
 800f3b0:	e7fe      	b.n	800f3b0 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800f3b2:	2400      	movs	r4, #0
 800f3b4:	e7a5      	b.n	800f302 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800f3b6:	f000 f8a7 	bl	800f508 <vPortYield>
 800f3ba:	e7ab      	b.n	800f314 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3be:	69aa      	ldr	r2, [r5, #24]
 800f3c0:	4694      	mov	ip, r2
 800f3c2:	4463      	add	r3, ip
 800f3c4:	0019      	movs	r1, r3
 800f3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c8:	0002      	movs	r2, r0
 800f3ca:	0028      	movs	r0, r5
 800f3cc:	f7ff fe6a 	bl	800f0a4 <prvInsertTimerInActiveList>
 800f3d0:	2801      	cmp	r0, #1
 800f3d2:	d1a0      	bne.n	800f316 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3d4:	0028      	movs	r0, r5
 800f3d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3d8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f3da:	69eb      	ldr	r3, [r5, #28]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d19a      	bne.n	800f316 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3e2:	69a9      	ldr	r1, [r5, #24]
 800f3e4:	468c      	mov	ip, r1
 800f3e6:	4463      	add	r3, ip
 800f3e8:	001a      	movs	r2, r3
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	2100      	movs	r1, #0
 800f3f0:	0028      	movs	r0, r5
 800f3f2:	f7ff feeb 	bl	800f1cc <xTimerGenericCommand>
							configASSERT( xResult );
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d18d      	bne.n	800f316 <prvTimerTask+0x42>
 800f3fa:	b672      	cpsid	i
 800f3fc:	e7fe      	b.n	800f3fc <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f400:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f402:	2900      	cmp	r1, #0
 800f404:	d006      	beq.n	800f414 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f406:	1841      	adds	r1, r0, r1
 800f408:	0003      	movs	r3, r0
 800f40a:	0002      	movs	r2, r0
 800f40c:	0028      	movs	r0, r5
 800f40e:	f7ff fe49 	bl	800f0a4 <prvInsertTimerInActiveList>
 800f412:	e780      	b.n	800f316 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f414:	b672      	cpsid	i
 800f416:	e7fe      	b.n	800f416 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800f418:	0028      	movs	r0, r5
 800f41a:	f000 f999 	bl	800f750 <vPortFree>
 800f41e:	e77a      	b.n	800f316 <prvTimerTask+0x42>
	vTaskSuspendAll();
 800f420:	f7ff f944 	bl	800e6ac <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f424:	a808      	add	r0, sp, #32
 800f426:	f7ff fefd 	bl	800f224 <prvSampleTimeNow>
 800f42a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f42c:	9b08      	ldr	r3, [sp, #32]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d0bf      	beq.n	800f3b2 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800f432:	f7ff f9db 	bl	800e7ec <xTaskResumeAll>
 800f436:	e76d      	b.n	800f314 <prvTimerTask+0x40>
 800f438:	0801a8e8 	.word	0x0801a8e8
 800f43c:	20001e88 	.word	0x20001e88
 800f440:	20001ebc 	.word	0x20001ebc

0800f444 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f444:	b510      	push	{r4, lr}
 800f446:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f448:	d101      	bne.n	800f44e <pvTimerGetTimerID+0xa>
 800f44a:	b672      	cpsid	i
 800f44c:	e7fe      	b.n	800f44c <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f44e:	f000 f867 	bl	800f520 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f452:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f454:	f000 f870 	bl	800f538 <vPortExitCritical>

	return pvReturn;
}
 800f458:	0020      	movs	r0, r4
 800f45a:	bd10      	pop	{r4, pc}

0800f45c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f45c:	4b03      	ldr	r3, [pc, #12]	; (800f46c <prvTaskExitError+0x10>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	3301      	adds	r3, #1
 800f462:	d001      	beq.n	800f468 <prvTaskExitError+0xc>
 800f464:	b672      	cpsid	i
 800f466:	e7fe      	b.n	800f466 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f468:	b672      	cpsid	i
 800f46a:	e7fe      	b.n	800f46a <prvTaskExitError+0xe>
 800f46c:	200000a4 	.word	0x200000a4

0800f470 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f470:	4a06      	ldr	r2, [pc, #24]	; (800f48c <pxCurrentTCBConst2>)
 800f472:	6813      	ldr	r3, [r2, #0]
 800f474:	6818      	ldr	r0, [r3, #0]
 800f476:	3020      	adds	r0, #32
 800f478:	f380 8809 	msr	PSP, r0
 800f47c:	2002      	movs	r0, #2
 800f47e:	f380 8814 	msr	CONTROL, r0
 800f482:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f484:	46ae      	mov	lr, r5
 800f486:	b662      	cpsie	i
 800f488:	bd00      	pop	{pc}
 800f48a:	46c0      	nop			; (mov r8, r8)

0800f48c <pxCurrentTCBConst2>:
 800f48c:	20001d60 	.word	0x20001d60

0800f490 <pxPortInitialiseStack>:
{
 800f490:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f492:	1f03      	subs	r3, r0, #4
 800f494:	2480      	movs	r4, #128	; 0x80
 800f496:	0464      	lsls	r4, r4, #17
 800f498:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f49a:	3b04      	subs	r3, #4
 800f49c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f49e:	3b04      	subs	r3, #4
 800f4a0:	4902      	ldr	r1, [pc, #8]	; (800f4ac <pxPortInitialiseStack+0x1c>)
 800f4a2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4a4:	3b14      	subs	r3, #20
 800f4a6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f4a8:	3840      	subs	r0, #64	; 0x40
}
 800f4aa:	bd10      	pop	{r4, pc}
 800f4ac:	0800f45d 	.word	0x0800f45d

0800f4b0 <SVC_Handler>:
}
 800f4b0:	4770      	bx	lr
	...

0800f4b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f4b4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f4b6:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <xPortStartScheduler+0x40>)
 800f4b8:	6819      	ldr	r1, [r3, #0]
 800f4ba:	22ff      	movs	r2, #255	; 0xff
 800f4bc:	0412      	lsls	r2, r2, #16
 800f4be:	430a      	orrs	r2, r1
 800f4c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f4c2:	6819      	ldr	r1, [r3, #0]
 800f4c4:	22ff      	movs	r2, #255	; 0xff
 800f4c6:	0612      	lsls	r2, r2, #24
 800f4c8:	430a      	orrs	r2, r1
 800f4ca:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4cc:	4b0a      	ldr	r3, [pc, #40]	; (800f4f8 <xPortStartScheduler+0x44>)
 800f4ce:	6818      	ldr	r0, [r3, #0]
 800f4d0:	21fa      	movs	r1, #250	; 0xfa
 800f4d2:	0089      	lsls	r1, r1, #2
 800f4d4:	f7f0 fe3c 	bl	8000150 <__udivsi3>
 800f4d8:	3801      	subs	r0, #1
 800f4da:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <xPortStartScheduler+0x48>)
 800f4dc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f4de:	4b08      	ldr	r3, [pc, #32]	; (800f500 <xPortStartScheduler+0x4c>)
 800f4e0:	2207      	movs	r2, #7
 800f4e2:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f4e4:	4b07      	ldr	r3, [pc, #28]	; (800f504 <xPortStartScheduler+0x50>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f4ea:	f7ff ffc1 	bl	800f470 <vPortStartFirstTask>
	prvTaskExitError();
 800f4ee:	f7ff ffb5 	bl	800f45c <prvTaskExitError>
 800f4f2:	46c0      	nop			; (mov r8, r8)
 800f4f4:	e000ed20 	.word	0xe000ed20
 800f4f8:	20000090 	.word	0x20000090
 800f4fc:	e000e014 	.word	0xe000e014
 800f500:	e000e010 	.word	0xe000e010
 800f504:	200000a4 	.word	0x200000a4

0800f508 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f508:	4b04      	ldr	r3, [pc, #16]	; (800f51c <vPortYield+0x14>)
 800f50a:	2280      	movs	r2, #128	; 0x80
 800f50c:	0552      	lsls	r2, r2, #21
 800f50e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f510:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f514:	f3bf 8f6f 	isb	sy
}
 800f518:	4770      	bx	lr
 800f51a:	46c0      	nop			; (mov r8, r8)
 800f51c:	e000ed04 	.word	0xe000ed04

0800f520 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f520:	b672      	cpsid	i
    uxCriticalNesting++;
 800f522:	4a04      	ldr	r2, [pc, #16]	; (800f534 <vPortEnterCritical+0x14>)
 800f524:	6813      	ldr	r3, [r2, #0]
 800f526:	3301      	adds	r3, #1
 800f528:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f52a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f52e:	f3bf 8f6f 	isb	sy
}
 800f532:	4770      	bx	lr
 800f534:	200000a4 	.word	0x200000a4

0800f538 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f538:	4b06      	ldr	r3, [pc, #24]	; (800f554 <vPortExitCritical+0x1c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <vPortExitCritical+0xc>
 800f540:	b672      	cpsid	i
 800f542:	e7fe      	b.n	800f542 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f544:	3b01      	subs	r3, #1
 800f546:	4a03      	ldr	r2, [pc, #12]	; (800f554 <vPortExitCritical+0x1c>)
 800f548:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d100      	bne.n	800f550 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f54e:	b662      	cpsie	i
}
 800f550:	4770      	bx	lr
 800f552:	46c0      	nop			; (mov r8, r8)
 800f554:	200000a4 	.word	0x200000a4

0800f558 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f558:	f3ef 8010 	mrs	r0, PRIMASK
 800f55c:	b672      	cpsid	i
 800f55e:	4770      	bx	lr
}
 800f560:	2000      	movs	r0, #0

0800f562 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f562:	f380 8810 	msr	PRIMASK, r0
 800f566:	4770      	bx	lr

0800f568 <PendSV_Handler>:
	__asm volatile
 800f568:	f3ef 8009 	mrs	r0, PSP
 800f56c:	4b0e      	ldr	r3, [pc, #56]	; (800f5a8 <pxCurrentTCBConst>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	3820      	subs	r0, #32
 800f572:	6010      	str	r0, [r2, #0]
 800f574:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f576:	4644      	mov	r4, r8
 800f578:	464d      	mov	r5, r9
 800f57a:	4656      	mov	r6, sl
 800f57c:	465f      	mov	r7, fp
 800f57e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f580:	b508      	push	{r3, lr}
 800f582:	b672      	cpsid	i
 800f584:	f7ff fa4e 	bl	800ea24 <vTaskSwitchContext>
 800f588:	b662      	cpsie	i
 800f58a:	bc0c      	pop	{r2, r3}
 800f58c:	6811      	ldr	r1, [r2, #0]
 800f58e:	6808      	ldr	r0, [r1, #0]
 800f590:	3010      	adds	r0, #16
 800f592:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f594:	46a0      	mov	r8, r4
 800f596:	46a9      	mov	r9, r5
 800f598:	46b2      	mov	sl, r6
 800f59a:	46bb      	mov	fp, r7
 800f59c:	f380 8809 	msr	PSP, r0
 800f5a0:	3820      	subs	r0, #32
 800f5a2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f5a4:	4718      	bx	r3
 800f5a6:	46c0      	nop			; (mov r8, r8)

0800f5a8 <pxCurrentTCBConst>:
 800f5a8:	20001d60 	.word	0x20001d60

0800f5ac <xPortSysTickHandler>:
{
 800f5ac:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5ae:	f7ff ffd3 	bl	800f558 <ulSetInterruptMaskFromISR>
 800f5b2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f5b4:	f7ff f88e 	bl	800e6d4 <xTaskIncrementTick>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d003      	beq.n	800f5c4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f5bc:	4b03      	ldr	r3, [pc, #12]	; (800f5cc <xPortSysTickHandler+0x20>)
 800f5be:	2280      	movs	r2, #128	; 0x80
 800f5c0:	0552      	lsls	r2, r2, #21
 800f5c2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f5c4:	0020      	movs	r0, r4
 800f5c6:	f7ff ffcc 	bl	800f562 <vClearInterruptMaskFromISR>
}
 800f5ca:	bd10      	pop	{r4, pc}
 800f5cc:	e000ed04 	.word	0xe000ed04

0800f5d0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f5d0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5d2:	4b12      	ldr	r3, [pc, #72]	; (800f61c <prvInsertBlockIntoFreeList+0x4c>)
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	4282      	cmp	r2, r0
 800f5d8:	d319      	bcc.n	800f60e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5da:	685c      	ldr	r4, [r3, #4]
 800f5dc:	1919      	adds	r1, r3, r4
 800f5de:	4288      	cmp	r0, r1
 800f5e0:	d103      	bne.n	800f5ea <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f5e2:	6841      	ldr	r1, [r0, #4]
 800f5e4:	1909      	adds	r1, r1, r4
 800f5e6:	6059      	str	r1, [r3, #4]
 800f5e8:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5ea:	6841      	ldr	r1, [r0, #4]
 800f5ec:	1844      	adds	r4, r0, r1
 800f5ee:	42a2      	cmp	r2, r4
 800f5f0:	d111      	bne.n	800f616 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5f2:	4c0b      	ldr	r4, [pc, #44]	; (800f620 <prvInsertBlockIntoFreeList+0x50>)
 800f5f4:	6824      	ldr	r4, [r4, #0]
 800f5f6:	42a2      	cmp	r2, r4
 800f5f8:	d00b      	beq.n	800f612 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5fa:	6852      	ldr	r2, [r2, #4]
 800f5fc:	1852      	adds	r2, r2, r1
 800f5fe:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	6812      	ldr	r2, [r2, #0]
 800f604:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f606:	4298      	cmp	r0, r3
 800f608:	d000      	beq.n	800f60c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f60a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f60c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f60e:	0013      	movs	r3, r2
 800f610:	e7e0      	b.n	800f5d4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f612:	6002      	str	r2, [r0, #0]
 800f614:	e7f7      	b.n	800f606 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f616:	6002      	str	r2, [r0, #0]
 800f618:	e7f5      	b.n	800f606 <prvInsertBlockIntoFreeList+0x36>
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	20006908 	.word	0x20006908
 800f620:	20001ec0 	.word	0x20001ec0

0800f624 <pvPortMalloc>:
{
 800f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f626:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f628:	f7ff f840 	bl	800e6ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f62c:	4b41      	ldr	r3, [pc, #260]	; (800f734 <pvPortMalloc+0x110>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d00a      	beq.n	800f64a <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f634:	4b40      	ldr	r3, [pc, #256]	; (800f738 <pvPortMalloc+0x114>)
 800f636:	681f      	ldr	r7, [r3, #0]
 800f638:	423c      	tst	r4, r7
 800f63a:	d02a      	beq.n	800f692 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800f63c:	f7ff f8d6 	bl	800e7ec <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f640:	f7fd fbba 	bl	800cdb8 <vApplicationMallocFailedHook>
 800f644:	2500      	movs	r5, #0
}
 800f646:	0028      	movs	r0, r5
 800f648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800f64a:	4a3c      	ldr	r2, [pc, #240]	; (800f73c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f64c:	0753      	lsls	r3, r2, #29
 800f64e:	d01e      	beq.n	800f68e <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f650:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f652:	2307      	movs	r3, #7
 800f654:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f656:	4b3a      	ldr	r3, [pc, #232]	; (800f740 <pvPortMalloc+0x11c>)
 800f658:	18d3      	adds	r3, r2, r3
 800f65a:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f65c:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f65e:	4839      	ldr	r0, [pc, #228]	; (800f744 <pvPortMalloc+0x120>)
 800f660:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f662:	2100      	movs	r1, #0
 800f664:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f666:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f668:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f66a:	2007      	movs	r0, #7
 800f66c:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f66e:	4831      	ldr	r0, [pc, #196]	; (800f734 <pvPortMalloc+0x110>)
 800f670:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f672:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f674:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f676:	1a99      	subs	r1, r3, r2
 800f678:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f67a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f67c:	4b32      	ldr	r3, [pc, #200]	; (800f748 <pvPortMalloc+0x124>)
 800f67e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f680:	4b32      	ldr	r3, [pc, #200]	; (800f74c <pvPortMalloc+0x128>)
 800f682:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f684:	4b2c      	ldr	r3, [pc, #176]	; (800f738 <pvPortMalloc+0x114>)
 800f686:	2280      	movs	r2, #128	; 0x80
 800f688:	0612      	lsls	r2, r2, #24
 800f68a:	601a      	str	r2, [r3, #0]
 800f68c:	e7d2      	b.n	800f634 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f68e:	4b2c      	ldr	r3, [pc, #176]	; (800f740 <pvPortMalloc+0x11c>)
 800f690:	e7e5      	b.n	800f65e <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800f692:	2c00      	cmp	r4, #0
 800f694:	d008      	beq.n	800f6a8 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800f696:	0023      	movs	r3, r4
 800f698:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f69a:	075a      	lsls	r2, r3, #29
 800f69c:	d002      	beq.n	800f6a4 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f69e:	2207      	movs	r2, #7
 800f6a0:	4393      	bics	r3, r2
 800f6a2:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d102      	bne.n	800f6ae <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800f6a8:	f7ff f8a0 	bl	800e7ec <xTaskResumeAll>
 800f6ac:	e7c8      	b.n	800f640 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f6ae:	4a27      	ldr	r2, [pc, #156]	; (800f74c <pvPortMalloc+0x128>)
 800f6b0:	6816      	ldr	r6, [r2, #0]
 800f6b2:	429e      	cmp	r6, r3
 800f6b4:	d302      	bcc.n	800f6bc <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800f6b6:	4a23      	ldr	r2, [pc, #140]	; (800f744 <pvPortMalloc+0x120>)
 800f6b8:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6ba:	e004      	b.n	800f6c6 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800f6bc:	f7ff f896 	bl	800e7ec <xTaskResumeAll>
 800f6c0:	e7be      	b.n	800f640 <pvPortMalloc+0x1c>
 800f6c2:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f6c4:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6c6:	6861      	ldr	r1, [r4, #4]
 800f6c8:	4299      	cmp	r1, r3
 800f6ca:	d202      	bcs.n	800f6d2 <pvPortMalloc+0xae>
 800f6cc:	6821      	ldr	r1, [r4, #0]
 800f6ce:	2900      	cmp	r1, #0
 800f6d0:	d1f7      	bne.n	800f6c2 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800f6d2:	4918      	ldr	r1, [pc, #96]	; (800f734 <pvPortMalloc+0x110>)
 800f6d4:	6809      	ldr	r1, [r1, #0]
 800f6d6:	42a1      	cmp	r1, r4
 800f6d8:	d00b      	beq.n	800f6f2 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f6da:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f6dc:	6821      	ldr	r1, [r4, #0]
 800f6de:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f6e0:	6862      	ldr	r2, [r4, #4]
 800f6e2:	1ad2      	subs	r2, r2, r3
 800f6e4:	2a10      	cmp	r2, #16
 800f6e6:	d90b      	bls.n	800f700 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6e8:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6ea:	0741      	lsls	r1, r0, #29
 800f6ec:	d004      	beq.n	800f6f8 <pvPortMalloc+0xd4>
 800f6ee:	b672      	cpsid	i
 800f6f0:	e7fe      	b.n	800f6f0 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800f6f2:	f7ff f87b 	bl	800e7ec <xTaskResumeAll>
 800f6f6:	e7a3      	b.n	800f640 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6f8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6fa:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f6fc:	f7ff ff68 	bl	800f5d0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f700:	6862      	ldr	r2, [r4, #4]
 800f702:	1ab6      	subs	r6, r6, r2
 800f704:	4911      	ldr	r1, [pc, #68]	; (800f74c <pvPortMalloc+0x128>)
 800f706:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f708:	490f      	ldr	r1, [pc, #60]	; (800f748 <pvPortMalloc+0x124>)
 800f70a:	6809      	ldr	r1, [r1, #0]
 800f70c:	428e      	cmp	r6, r1
 800f70e:	d201      	bcs.n	800f714 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f710:	490d      	ldr	r1, [pc, #52]	; (800f748 <pvPortMalloc+0x124>)
 800f712:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f714:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f716:	4317      	orrs	r7, r2
 800f718:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f71a:	2300      	movs	r3, #0
 800f71c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f71e:	f7ff f865 	bl	800e7ec <xTaskResumeAll>
		if( pvReturn == NULL )
 800f722:	2d00      	cmp	r5, #0
 800f724:	d100      	bne.n	800f728 <pvPortMalloc+0x104>
 800f726:	e78b      	b.n	800f640 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f728:	076b      	lsls	r3, r5, #29
 800f72a:	d100      	bne.n	800f72e <pvPortMalloc+0x10a>
 800f72c:	e78b      	b.n	800f646 <pvPortMalloc+0x22>
 800f72e:	b672      	cpsid	i
 800f730:	e7fe      	b.n	800f730 <pvPortMalloc+0x10c>
 800f732:	46c0      	nop			; (mov r8, r8)
 800f734:	20001ec0 	.word	0x20001ec0
 800f738:	200068fc 	.word	0x200068fc
 800f73c:	20001ec4 	.word	0x20001ec4
 800f740:	00004a38 	.word	0x00004a38
 800f744:	20006908 	.word	0x20006908
 800f748:	20006904 	.word	0x20006904
 800f74c:	20006900 	.word	0x20006900

0800f750 <vPortFree>:
{
 800f750:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f752:	2800      	cmp	r0, #0
 800f754:	d020      	beq.n	800f798 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f756:	0003      	movs	r3, r0
 800f758:	3b08      	subs	r3, #8
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4a0f      	ldr	r2, [pc, #60]	; (800f79c <vPortFree+0x4c>)
 800f75e:	6812      	ldr	r2, [r2, #0]
 800f760:	421a      	tst	r2, r3
 800f762:	d101      	bne.n	800f768 <vPortFree+0x18>
 800f764:	b672      	cpsid	i
 800f766:	e7fe      	b.n	800f766 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f768:	0001      	movs	r1, r0
 800f76a:	3908      	subs	r1, #8
 800f76c:	6809      	ldr	r1, [r1, #0]
 800f76e:	2900      	cmp	r1, #0
 800f770:	d001      	beq.n	800f776 <vPortFree+0x26>
 800f772:	b672      	cpsid	i
 800f774:	e7fe      	b.n	800f774 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f776:	3808      	subs	r0, #8
 800f778:	0004      	movs	r4, r0
 800f77a:	4393      	bics	r3, r2
 800f77c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f77e:	f7fe ff95 	bl	800e6ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f782:	4a07      	ldr	r2, [pc, #28]	; (800f7a0 <vPortFree+0x50>)
 800f784:	6863      	ldr	r3, [r4, #4]
 800f786:	6811      	ldr	r1, [r2, #0]
 800f788:	468c      	mov	ip, r1
 800f78a:	4463      	add	r3, ip
 800f78c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f78e:	0020      	movs	r0, r4
 800f790:	f7ff ff1e 	bl	800f5d0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f794:	f7ff f82a 	bl	800e7ec <xTaskResumeAll>
}
 800f798:	bd10      	pop	{r4, pc}
 800f79a:	46c0      	nop			; (mov r8, r8)
 800f79c:	200068fc 	.word	0x200068fc
 800f7a0:	20006900 	.word	0x20006900

0800f7a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f7a8:	f002 f8f8 	bl	801199c <HAL_RCC_GetHCLKFreq>
 800f7ac:	21fa      	movs	r1, #250	; 0xfa
 800f7ae:	0089      	lsls	r1, r1, #2
 800f7b0:	f7f0 fcce 	bl	8000150 <__udivsi3>
 800f7b4:	f000 fb9a 	bl	800feec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f7b8:	2001      	movs	r0, #1
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	0021      	movs	r1, r4
 800f7be:	4240      	negs	r0, r0
 800f7c0:	f000 fb4c 	bl	800fe5c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	bd10      	pop	{r4, pc}

0800f7c8 <HAL_Init>:
{
 800f7c8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f7ca:	4a06      	ldr	r2, [pc, #24]	; (800f7e4 <HAL_Init+0x1c>)
 800f7cc:	6813      	ldr	r3, [r2, #0]
 800f7ce:	2110      	movs	r1, #16
 800f7d0:	430b      	orrs	r3, r1
 800f7d2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f7ff ffe5 	bl	800f7a4 <HAL_InitTick>
  HAL_MspInit();
 800f7da:	f001 fc87 	bl	80110ec <HAL_MspInit>
}
 800f7de:	2000      	movs	r0, #0
 800f7e0:	bd10      	pop	{r4, pc}
 800f7e2:	46c0      	nop			; (mov r8, r8)
 800f7e4:	40022000 	.word	0x40022000

0800f7e8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f7e8:	4a02      	ldr	r2, [pc, #8]	; (800f7f4 <HAL_IncTick+0xc>)
 800f7ea:	6813      	ldr	r3, [r2, #0]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	6013      	str	r3, [r2, #0]
}
 800f7f0:	4770      	bx	lr
 800f7f2:	46c0      	nop			; (mov r8, r8)
 800f7f4:	20006910 	.word	0x20006910

0800f7f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f7f8:	4b01      	ldr	r3, [pc, #4]	; (800f800 <HAL_GetTick+0x8>)
 800f7fa:	6818      	ldr	r0, [r3, #0]
}
 800f7fc:	4770      	bx	lr
 800f7fe:	46c0      	nop			; (mov r8, r8)
 800f800:	20006910 	.word	0x20006910

0800f804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f804:	b510      	push	{r4, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f80a:	f7ff fff5 	bl	800f7f8 <HAL_GetTick>
 800f80e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f810:	f7ff fff2 	bl	800f7f8 <HAL_GetTick>
 800f814:	9b01      	ldr	r3, [sp, #4]
 800f816:	1b00      	subs	r0, r0, r4
 800f818:	4298      	cmp	r0, r3
 800f81a:	d3f9      	bcc.n	800f810 <HAL_Delay+0xc>
  {
  }
}
 800f81c:	b002      	add	sp, #8
 800f81e:	bd10      	pop	{r4, pc}

0800f820 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f820:	4b01      	ldr	r3, [pc, #4]	; (800f828 <HAL_GetREVID+0x8>)
 800f822:	6818      	ldr	r0, [r3, #0]
 800f824:	0c00      	lsrs	r0, r0, #16
}
 800f826:	4770      	bx	lr
 800f828:	40015800 	.word	0x40015800

0800f82c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f82c:	4b02      	ldr	r3, [pc, #8]	; (800f838 <HAL_GetDEVID+0xc>)
 800f82e:	6818      	ldr	r0, [r3, #0]
 800f830:	0500      	lsls	r0, r0, #20
 800f832:	0d00      	lsrs	r0, r0, #20
}
 800f834:	4770      	bx	lr
 800f836:	46c0      	nop			; (mov r8, r8)
 800f838:	40015800 	.word	0x40015800

0800f83c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f840:	6803      	ldr	r3, [r0, #0]
 800f842:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f844:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f846:	0752      	lsls	r2, r2, #29
 800f848:	d521      	bpl.n	800f88e <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f84a:	689a      	ldr	r2, [r3, #8]
 800f84c:	0752      	lsls	r2, r2, #29
 800f84e:	d506      	bpl.n	800f85e <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f850:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f852:	0792      	lsls	r2, r2, #30
 800f854:	d403      	bmi.n	800f85e <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f856:	689a      	ldr	r2, [r3, #8]
 800f858:	2110      	movs	r1, #16
 800f85a:	430a      	orrs	r2, r1
 800f85c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f85e:	f7ff ffcb 	bl	800f7f8 <HAL_GetTick>
 800f862:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f864:	2504      	movs	r5, #4
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	421d      	tst	r5, r3
 800f86c:	d00e      	beq.n	800f88c <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f86e:	f7ff ffc3 	bl	800f7f8 <HAL_GetTick>
 800f872:	1b80      	subs	r0, r0, r6
 800f874:	2802      	cmp	r0, #2
 800f876:	d9f6      	bls.n	800f866 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f878:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f87a:	2210      	movs	r2, #16
 800f87c:	4313      	orrs	r3, r2
 800f87e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f880:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f882:	3a0f      	subs	r2, #15
 800f884:	4313      	orrs	r3, r2
 800f886:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f888:	2001      	movs	r0, #1
 800f88a:	e000      	b.n	800f88e <ADC_ConversionStop+0x52>
  return HAL_OK;
 800f88c:	2000      	movs	r0, #0
}
 800f88e:	bd70      	pop	{r4, r5, r6, pc}

0800f890 <ADC_Disable>:
{
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f894:	6802      	ldr	r2, [r0, #0]
 800f896:	6891      	ldr	r1, [r2, #8]
 800f898:	2303      	movs	r3, #3
 800f89a:	400b      	ands	r3, r1
  return HAL_OK;
 800f89c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d000      	beq.n	800f8a4 <ADC_Disable+0x14>
}
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f8a4:	6813      	ldr	r3, [r2, #0]
 800f8a6:	07db      	lsls	r3, r3, #31
 800f8a8:	d402      	bmi.n	800f8b0 <ADC_Disable+0x20>
 800f8aa:	68d3      	ldr	r3, [r2, #12]
 800f8ac:	041b      	lsls	r3, r3, #16
 800f8ae:	d5f8      	bpl.n	800f8a2 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f8b0:	6891      	ldr	r1, [r2, #8]
 800f8b2:	2305      	movs	r3, #5
 800f8b4:	400b      	ands	r3, r1
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d009      	beq.n	800f8ce <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8bc:	2210      	movs	r2, #16
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8c4:	3a0f      	subs	r2, #15
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	e7e9      	b.n	800f8a2 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800f8ce:	6893      	ldr	r3, [r2, #8]
 800f8d0:	2102      	movs	r1, #2
 800f8d2:	430b      	orrs	r3, r1
 800f8d4:	6093      	str	r3, [r2, #8]
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	2203      	movs	r2, #3
 800f8da:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f8dc:	f7ff ff8c 	bl	800f7f8 <HAL_GetTick>
 800f8e0:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f8e2:	2501      	movs	r5, #1
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	421d      	tst	r5, r3
 800f8ea:	d00e      	beq.n	800f90a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f8ec:	f7ff ff84 	bl	800f7f8 <HAL_GetTick>
 800f8f0:	1b80      	subs	r0, r0, r6
 800f8f2:	2802      	cmp	r0, #2
 800f8f4:	d9f6      	bls.n	800f8e4 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8f8:	2210      	movs	r2, #16
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f900:	3a0f      	subs	r2, #15
 800f902:	4313      	orrs	r3, r2
 800f904:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f906:	2001      	movs	r0, #1
 800f908:	e7cb      	b.n	800f8a2 <ADC_Disable+0x12>
  return HAL_OK;
 800f90a:	2000      	movs	r0, #0
 800f90c:	e7c9      	b.n	800f8a2 <ADC_Disable+0x12>
	...

0800f910 <ADC_Enable>:
{
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f91a:	6803      	ldr	r3, [r0, #0]
 800f91c:	6899      	ldr	r1, [r3, #8]
 800f91e:	2203      	movs	r2, #3
 800f920:	400a      	ands	r2, r1
 800f922:	2a01      	cmp	r2, #1
 800f924:	d02d      	beq.n	800f982 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f926:	6899      	ldr	r1, [r3, #8]
 800f928:	4a20      	ldr	r2, [pc, #128]	; (800f9ac <ADC_Enable+0x9c>)
 800f92a:	4211      	tst	r1, r2
 800f92c:	d131      	bne.n	800f992 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 800f92e:	689a      	ldr	r2, [r3, #8]
 800f930:	2101      	movs	r1, #1
 800f932:	430a      	orrs	r2, r1
 800f934:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f936:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <ADC_Enable+0xa0>)
 800f938:	6818      	ldr	r0, [r3, #0]
 800f93a:	491e      	ldr	r1, [pc, #120]	; (800f9b4 <ADC_Enable+0xa4>)
 800f93c:	f7f0 fc08 	bl	8000150 <__udivsi3>
 800f940:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f942:	9b01      	ldr	r3, [sp, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d005      	beq.n	800f954 <ADC_Enable+0x44>
      wait_loop_index--;
 800f948:	9b01      	ldr	r3, [sp, #4]
 800f94a:	3b01      	subs	r3, #1
 800f94c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1f9      	bne.n	800f948 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f954:	f7ff ff50 	bl	800f7f8 <HAL_GetTick>
 800f958:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f95a:	2501      	movs	r5, #1
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	421d      	tst	r5, r3
 800f962:	d121      	bne.n	800f9a8 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f964:	f7ff ff48 	bl	800f7f8 <HAL_GetTick>
 800f968:	1b80      	subs	r0, r0, r6
 800f96a:	2802      	cmp	r0, #2
 800f96c:	d9f6      	bls.n	800f95c <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f96e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f970:	2210      	movs	r2, #16
 800f972:	4313      	orrs	r3, r2
 800f974:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f976:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f978:	3a0f      	subs	r2, #15
 800f97a:	4313      	orrs	r3, r2
 800f97c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f97e:	2001      	movs	r0, #1
 800f980:	e010      	b.n	800f9a4 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f982:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800f984:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f986:	07d2      	lsls	r2, r2, #31
 800f988:	d40c      	bmi.n	800f9a4 <ADC_Enable+0x94>
 800f98a:	68da      	ldr	r2, [r3, #12]
 800f98c:	0412      	lsls	r2, r2, #16
 800f98e:	d5ca      	bpl.n	800f926 <ADC_Enable+0x16>
 800f990:	e008      	b.n	800f9a4 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f992:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f994:	2210      	movs	r2, #16
 800f996:	4313      	orrs	r3, r2
 800f998:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f99a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f99c:	3a0f      	subs	r2, #15
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f9a2:	2001      	movs	r0, #1
}
 800f9a4:	b002      	add	sp, #8
 800f9a6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	e7fb      	b.n	800f9a4 <ADC_Enable+0x94>
 800f9ac:	80000017 	.word	0x80000017
 800f9b0:	20000090 	.word	0x20000090
 800f9b4:	000f4240 	.word	0x000f4240

0800f9b8 <HAL_ADC_Init>:
{
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f9bc:	d100      	bne.n	800f9c0 <HAL_ADC_Init+0x8>
 800f9be:	e09b      	b.n	800faf8 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f9c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d073      	beq.n	800faae <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f9c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9c8:	06db      	lsls	r3, r3, #27
 800f9ca:	d500      	bpl.n	800f9ce <HAL_ADC_Init+0x16>
 800f9cc:	e08e      	b.n	800faec <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f9ce:	6822      	ldr	r2, [r4, #0]
 800f9d0:	6893      	ldr	r3, [r2, #8]
 800f9d2:	2104      	movs	r1, #4
 800f9d4:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800f9d6:	d000      	beq.n	800f9da <HAL_ADC_Init+0x22>
 800f9d8:	e088      	b.n	800faec <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 800f9da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9dc:	4847      	ldr	r0, [pc, #284]	; (800fafc <HAL_ADC_Init+0x144>)
 800f9de:	4003      	ands	r3, r0
 800f9e0:	3006      	adds	r0, #6
 800f9e2:	30ff      	adds	r0, #255	; 0xff
 800f9e4:	4303      	orrs	r3, r0
 800f9e6:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f9e8:	6890      	ldr	r0, [r2, #8]
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	4003      	ands	r3, r0
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	d063      	beq.n	800faba <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f9f2:	68d3      	ldr	r3, [r2, #12]
 800f9f4:	2018      	movs	r0, #24
 800f9f6:	4383      	bics	r3, r0
 800f9f8:	68a0      	ldr	r0, [r4, #8]
 800f9fa:	4303      	orrs	r3, r0
 800f9fc:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f9fe:	6822      	ldr	r2, [r4, #0]
 800fa00:	6913      	ldr	r3, [r2, #16]
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	089b      	lsrs	r3, r3, #2
 800fa06:	6860      	ldr	r0, [r4, #4]
 800fa08:	4303      	orrs	r3, r0
 800fa0a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fa0c:	6822      	ldr	r2, [r4, #0]
 800fa0e:	68d3      	ldr	r3, [r2, #12]
 800fa10:	483b      	ldr	r0, [pc, #236]	; (800fb00 <HAL_ADC_Init+0x148>)
 800fa12:	4003      	ands	r3, r0
 800fa14:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fa16:	69a3      	ldr	r3, [r4, #24]
 800fa18:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fa1a:	69e3      	ldr	r3, [r4, #28]
 800fa1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fa1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fa20:	6a20      	ldr	r0, [r4, #32]
 800fa22:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fa24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa26:	000e      	movs	r6, r1
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d001      	beq.n	800fa30 <HAL_ADC_Init+0x78>
 800fa2c:	2680      	movs	r6, #128	; 0x80
 800fa2e:	0176      	lsls	r6, r6, #5
 800fa30:	68e3      	ldr	r3, [r4, #12]
 800fa32:	431a      	orrs	r2, r3
 800fa34:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d045      	beq.n	800fac8 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800fa3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fa3e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fa40:	4313      	orrs	r3, r2
 800fa42:	4333      	orrs	r3, r6
 800fa44:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fa46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fa48:	2a01      	cmp	r2, #1
 800fa4a:	d03f      	beq.n	800facc <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fa4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fa4e:	21c2      	movs	r1, #194	; 0xc2
 800fa50:	31ff      	adds	r1, #255	; 0xff
 800fa52:	428a      	cmp	r2, r1
 800fa54:	d002      	beq.n	800fa5c <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fa56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fa58:	430a      	orrs	r2, r1
 800fa5a:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fa5c:	6821      	ldr	r1, [r4, #0]
 800fa5e:	68ca      	ldr	r2, [r1, #12]
 800fa60:	431a      	orrs	r2, r3
 800fa62:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fa64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fa66:	2180      	movs	r1, #128	; 0x80
 800fa68:	0549      	lsls	r1, r1, #21
 800fa6a:	428a      	cmp	r2, r1
 800fa6c:	d002      	beq.n	800fa74 <HAL_ADC_Init+0xbc>
 800fa6e:	3a01      	subs	r2, #1
 800fa70:	2a06      	cmp	r2, #6
 800fa72:	d80a      	bhi.n	800fa8a <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	6941      	ldr	r1, [r0, #20]
 800fa78:	2207      	movs	r2, #7
 800fa7a:	4391      	bics	r1, r2
 800fa7c:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800fa7e:	6821      	ldr	r1, [r4, #0]
 800fa80:	6948      	ldr	r0, [r1, #20]
 800fa82:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800fa84:	402a      	ands	r2, r5
 800fa86:	4302      	orrs	r2, r0
 800fa88:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fa8a:	6822      	ldr	r2, [r4, #0]
 800fa8c:	68d2      	ldr	r2, [r2, #12]
 800fa8e:	491d      	ldr	r1, [pc, #116]	; (800fb04 <HAL_ADC_Init+0x14c>)
 800fa90:	400a      	ands	r2, r1
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d020      	beq.n	800fad8 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800fa96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa98:	2212      	movs	r2, #18
 800fa9a:	4393      	bics	r3, r2
 800fa9c:	3a02      	subs	r2, #2
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800faa2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800faa4:	3a0f      	subs	r2, #15
 800faa6:	4313      	orrs	r3, r2
 800faa8:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800faaa:	2001      	movs	r0, #1
 800faac:	e023      	b.n	800faf6 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 800faae:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fab0:	2240      	movs	r2, #64	; 0x40
 800fab2:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800fab4:	f7f8 fdec 	bl	8008690 <HAL_ADC_MspInit>
 800fab8:	e785      	b.n	800f9c6 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800faba:	6813      	ldr	r3, [r2, #0]
 800fabc:	07db      	lsls	r3, r3, #31
 800fabe:	d4a5      	bmi.n	800fa0c <HAL_ADC_Init+0x54>
 800fac0:	68d3      	ldr	r3, [r2, #12]
 800fac2:	041b      	lsls	r3, r3, #16
 800fac4:	d4a2      	bmi.n	800fa0c <HAL_ADC_Init+0x54>
 800fac6:	e794      	b.n	800f9f2 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fac8:	2104      	movs	r1, #4
 800faca:	e7b7      	b.n	800fa3c <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800facc:	2800      	cmp	r0, #0
 800face:	d1bd      	bne.n	800fa4c <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800fad0:	2280      	movs	r2, #128	; 0x80
 800fad2:	0252      	lsls	r2, r2, #9
 800fad4:	4313      	orrs	r3, r2
 800fad6:	e7b9      	b.n	800fa4c <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800fad8:	2300      	movs	r3, #0
 800fada:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800fadc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fade:	2203      	movs	r2, #3
 800fae0:	4393      	bics	r3, r2
 800fae2:	3a02      	subs	r2, #2
 800fae4:	4313      	orrs	r3, r2
 800fae6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fae8:	2000      	movs	r0, #0
 800faea:	e004      	b.n	800faf6 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800faec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800faee:	2210      	movs	r2, #16
 800faf0:	4313      	orrs	r3, r2
 800faf2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800faf4:	2001      	movs	r0, #1
}
 800faf6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800faf8:	2001      	movs	r0, #1
 800fafa:	e7fc      	b.n	800faf6 <HAL_ADC_Init+0x13e>
 800fafc:	fffffefd 	.word	0xfffffefd
 800fb00:	fffe0219 	.word	0xfffe0219
 800fb04:	833fffe7 	.word	0x833fffe7

0800fb08 <HAL_ADC_Start>:
{
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fb0c:	6803      	ldr	r3, [r0, #0]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	075b      	lsls	r3, r3, #29
 800fb12:	d423      	bmi.n	800fb5c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800fb14:	2340      	movs	r3, #64	; 0x40
 800fb16:	5cc3      	ldrb	r3, [r0, r3]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d021      	beq.n	800fb60 <HAL_ADC_Start+0x58>
 800fb1c:	2340      	movs	r3, #64	; 0x40
 800fb1e:	2201      	movs	r2, #1
 800fb20:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fb22:	69c3      	ldr	r3, [r0, #28]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d114      	bne.n	800fb52 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 800fb28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb2a:	4a0e      	ldr	r2, [pc, #56]	; (800fb64 <HAL_ADC_Start+0x5c>)
 800fb2c:	401a      	ands	r2, r3
 800fb2e:	2380      	movs	r3, #128	; 0x80
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	4313      	orrs	r3, r2
 800fb34:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800fb36:	2300      	movs	r3, #0
 800fb38:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fb3a:	2240      	movs	r2, #64	; 0x40
 800fb3c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fb3e:	6823      	ldr	r3, [r4, #0]
 800fb40:	3a24      	subs	r2, #36	; 0x24
 800fb42:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fb44:	6822      	ldr	r2, [r4, #0]
 800fb46:	6893      	ldr	r3, [r2, #8]
 800fb48:	2104      	movs	r1, #4
 800fb4a:	430b      	orrs	r3, r1
 800fb4c:	6093      	str	r3, [r2, #8]
 800fb4e:	2000      	movs	r0, #0
}
 800fb50:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800fb52:	f7ff fedd 	bl	800f910 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d0e6      	beq.n	800fb28 <HAL_ADC_Start+0x20>
 800fb5a:	e7f9      	b.n	800fb50 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 800fb5c:	2002      	movs	r0, #2
 800fb5e:	e7f7      	b.n	800fb50 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 800fb60:	2002      	movs	r0, #2
 800fb62:	e7f5      	b.n	800fb50 <HAL_ADC_Start+0x48>
 800fb64:	fffff0fe 	.word	0xfffff0fe

0800fb68 <HAL_ADC_Stop>:
{ 
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fb6c:	2340      	movs	r3, #64	; 0x40
 800fb6e:	5cc3      	ldrb	r3, [r0, r3]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d017      	beq.n	800fba4 <HAL_ADC_Stop+0x3c>
 800fb74:	2340      	movs	r3, #64	; 0x40
 800fb76:	2201      	movs	r2, #1
 800fb78:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fb7a:	f7ff fe5f 	bl	800f83c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d003      	beq.n	800fb8a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800fb82:	2340      	movs	r3, #64	; 0x40
 800fb84:	2200      	movs	r2, #0
 800fb86:	54e2      	strb	r2, [r4, r3]
}
 800fb88:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fb8a:	0020      	movs	r0, r4
 800fb8c:	f7ff fe80 	bl	800f890 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d1f6      	bne.n	800fb82 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800fb94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb96:	4a04      	ldr	r2, [pc, #16]	; (800fba8 <HAL_ADC_Stop+0x40>)
 800fb98:	4013      	ands	r3, r2
 800fb9a:	3204      	adds	r2, #4
 800fb9c:	32ff      	adds	r2, #255	; 0xff
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	6463      	str	r3, [r4, #68]	; 0x44
 800fba2:	e7ee      	b.n	800fb82 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800fba4:	2002      	movs	r0, #2
 800fba6:	e7ef      	b.n	800fb88 <HAL_ADC_Stop+0x20>
 800fba8:	fffffefe 	.word	0xfffffefe

0800fbac <HAL_ADC_PollForConversion>:
{
 800fbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbae:	0006      	movs	r6, r0
 800fbb0:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fbb2:	6943      	ldr	r3, [r0, #20]
 800fbb4:	2b08      	cmp	r3, #8
 800fbb6:	d026      	beq.n	800fc06 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fbb8:	6803      	ldr	r3, [r0, #0]
 800fbba:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fbbc:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fbbe:	07db      	lsls	r3, r3, #31
 800fbc0:	d418      	bmi.n	800fbf4 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 800fbc2:	f7ff fe19 	bl	800f7f8 <HAL_GetTick>
 800fbc6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fbc8:	6832      	ldr	r2, [r6, #0]
 800fbca:	6813      	ldr	r3, [r2, #0]
 800fbcc:	421d      	tst	r5, r3
 800fbce:	d11c      	bne.n	800fc0a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800fbd0:	1c63      	adds	r3, r4, #1
 800fbd2:	d0fa      	beq.n	800fbca <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fbd4:	2c00      	cmp	r4, #0
 800fbd6:	d004      	beq.n	800fbe2 <HAL_ADC_PollForConversion+0x36>
 800fbd8:	f7ff fe0e 	bl	800f7f8 <HAL_GetTick>
 800fbdc:	1bc0      	subs	r0, r0, r7
 800fbde:	42a0      	cmp	r0, r4
 800fbe0:	d9f2      	bls.n	800fbc8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fbe2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fbe4:	2204      	movs	r2, #4
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fbea:	2340      	movs	r3, #64	; 0x40
 800fbec:	2200      	movs	r2, #0
 800fbee:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fbf0:	2003      	movs	r0, #3
 800fbf2:	e007      	b.n	800fc04 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fbf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fbf6:	2220      	movs	r2, #32
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fbfc:	2340      	movs	r3, #64	; 0x40
 800fbfe:	2200      	movs	r2, #0
 800fc00:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fc02:	2001      	movs	r0, #1
}
 800fc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fc06:	2508      	movs	r5, #8
 800fc08:	e7db      	b.n	800fbc2 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fc0a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fc0c:	2380      	movs	r3, #128	; 0x80
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	430b      	orrs	r3, r1
 800fc12:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fc14:	68d1      	ldr	r1, [r2, #12]
 800fc16:	23c0      	movs	r3, #192	; 0xc0
 800fc18:	011b      	lsls	r3, r3, #4
 800fc1a:	4219      	tst	r1, r3
 800fc1c:	d113      	bne.n	800fc46 <HAL_ADC_PollForConversion+0x9a>
 800fc1e:	6a33      	ldr	r3, [r6, #32]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d110      	bne.n	800fc46 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fc24:	6813      	ldr	r3, [r2, #0]
 800fc26:	071b      	lsls	r3, r3, #28
 800fc28:	d50d      	bpl.n	800fc46 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc2a:	6893      	ldr	r3, [r2, #8]
 800fc2c:	075b      	lsls	r3, r3, #29
 800fc2e:	d412      	bmi.n	800fc56 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fc30:	6853      	ldr	r3, [r2, #4]
 800fc32:	210c      	movs	r1, #12
 800fc34:	438b      	bics	r3, r1
 800fc36:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fc38:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fc3a:	4a0b      	ldr	r2, [pc, #44]	; (800fc68 <HAL_ADC_PollForConversion+0xbc>)
 800fc3c:	4013      	ands	r3, r2
 800fc3e:	3204      	adds	r2, #4
 800fc40:	32ff      	adds	r2, #255	; 0xff
 800fc42:	4313      	orrs	r3, r2
 800fc44:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 800fc46:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fc48:	69b3      	ldr	r3, [r6, #24]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1da      	bne.n	800fc04 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fc4e:	6833      	ldr	r3, [r6, #0]
 800fc50:	220c      	movs	r2, #12
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	e7d6      	b.n	800fc04 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc56:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fc58:	2220      	movs	r2, #32
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc5e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fc60:	3a1f      	subs	r2, #31
 800fc62:	4313      	orrs	r3, r2
 800fc64:	64b3      	str	r3, [r6, #72]	; 0x48
 800fc66:	e7ee      	b.n	800fc46 <HAL_ADC_PollForConversion+0x9a>
 800fc68:	fffffefe 	.word	0xfffffefe

0800fc6c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fc6c:	6803      	ldr	r3, [r0, #0]
 800fc6e:	2208      	movs	r2, #8
 800fc70:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fc72:	6803      	ldr	r3, [r0, #0]
 800fc74:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fc76:	4770      	bx	lr

0800fc78 <HAL_ADC_ConfigChannel>:
{
 800fc78:	b530      	push	{r4, r5, lr}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fc82:	3340      	adds	r3, #64	; 0x40
 800fc84:	5cc3      	ldrb	r3, [r0, r3]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d100      	bne.n	800fc8c <HAL_ADC_ConfigChannel+0x14>
 800fc8a:	e088      	b.n	800fd9e <HAL_ADC_ConfigChannel+0x126>
 800fc8c:	2340      	movs	r3, #64	; 0x40
 800fc8e:	2201      	movs	r2, #1
 800fc90:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc92:	6803      	ldr	r3, [r0, #0]
 800fc94:	689a      	ldr	r2, [r3, #8]
 800fc96:	0752      	lsls	r2, r2, #29
 800fc98:	d475      	bmi.n	800fd86 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 800fc9a:	4a42      	ldr	r2, [pc, #264]	; (800fda4 <HAL_ADC_ConfigChannel+0x12c>)
 800fc9c:	6848      	ldr	r0, [r1, #4]
 800fc9e:	4290      	cmp	r0, r2
 800fca0:	d050      	beq.n	800fd44 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fca2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fca4:	2201      	movs	r2, #1
 800fca6:	680d      	ldr	r5, [r1, #0]
 800fca8:	40aa      	lsls	r2, r5
 800fcaa:	4302      	orrs	r2, r0
 800fcac:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fcae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fcb0:	2280      	movs	r2, #128	; 0x80
 800fcb2:	0552      	lsls	r2, r2, #21
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d013      	beq.n	800fce0 <HAL_ADC_ConfigChannel+0x68>
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	2b06      	cmp	r3, #6
 800fcbc:	d910      	bls.n	800fce0 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fcbe:	6822      	ldr	r2, [r4, #0]
 800fcc0:	6950      	ldr	r0, [r2, #20]
 800fcc2:	2307      	movs	r3, #7
 800fcc4:	4003      	ands	r3, r0
 800fcc6:	6888      	ldr	r0, [r1, #8]
 800fcc8:	4298      	cmp	r0, r3
 800fcca:	d009      	beq.n	800fce0 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fccc:	6950      	ldr	r0, [r2, #20]
 800fcce:	2307      	movs	r3, #7
 800fcd0:	4398      	bics	r0, r3
 800fcd2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fcd4:	6822      	ldr	r2, [r4, #0]
 800fcd6:	6950      	ldr	r0, [r2, #20]
 800fcd8:	688d      	ldr	r5, [r1, #8]
 800fcda:	402b      	ands	r3, r5
 800fcdc:	4303      	orrs	r3, r0
 800fcde:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fce0:	680b      	ldr	r3, [r1, #0]
 800fce2:	001a      	movs	r2, r3
 800fce4:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fce6:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fce8:	2a02      	cmp	r2, #2
 800fcea:	d851      	bhi.n	800fd90 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fcec:	4a2e      	ldr	r2, [pc, #184]	; (800fda8 <HAL_ADC_ConfigChannel+0x130>)
 800fcee:	6810      	ldr	r0, [r2, #0]
 800fcf0:	2b10      	cmp	r3, #16
 800fcf2:	d024      	beq.n	800fd3e <HAL_ADC_ConfigChannel+0xc6>
 800fcf4:	3b11      	subs	r3, #17
 800fcf6:	425a      	negs	r2, r3
 800fcf8:	415a      	adcs	r2, r3
 800fcfa:	4253      	negs	r3, r2
 800fcfc:	4a2b      	ldr	r2, [pc, #172]	; (800fdac <HAL_ADC_ConfigChannel+0x134>)
 800fcfe:	4013      	ands	r3, r2
 800fd00:	2280      	movs	r2, #128	; 0x80
 800fd02:	0452      	lsls	r2, r2, #17
 800fd04:	4694      	mov	ip, r2
 800fd06:	4463      	add	r3, ip
 800fd08:	4303      	orrs	r3, r0
 800fd0a:	4a27      	ldr	r2, [pc, #156]	; (800fda8 <HAL_ADC_ConfigChannel+0x130>)
 800fd0c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fd0e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd10:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fd12:	2b10      	cmp	r3, #16
 800fd14:	d13c      	bne.n	800fd90 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fd16:	4b26      	ldr	r3, [pc, #152]	; (800fdb0 <HAL_ADC_ConfigChannel+0x138>)
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	4926      	ldr	r1, [pc, #152]	; (800fdb4 <HAL_ADC_ConfigChannel+0x13c>)
 800fd1c:	f7f0 fa18 	bl	8000150 <__udivsi3>
 800fd20:	0083      	lsls	r3, r0, #2
 800fd22:	1818      	adds	r0, r3, r0
 800fd24:	0040      	lsls	r0, r0, #1
 800fd26:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fd28:	9b01      	ldr	r3, [sp, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d035      	beq.n	800fd9a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 800fd2e:	9b01      	ldr	r3, [sp, #4]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fd34:	9b01      	ldr	r3, [sp, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1f9      	bne.n	800fd2e <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	e028      	b.n	800fd90 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd3e:	2380      	movs	r3, #128	; 0x80
 800fd40:	041b      	lsls	r3, r3, #16
 800fd42:	e7e1      	b.n	800fd08 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fd44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd46:	2001      	movs	r0, #1
 800fd48:	680d      	ldr	r5, [r1, #0]
 800fd4a:	40a8      	lsls	r0, r5
 800fd4c:	4382      	bics	r2, r0
 800fd4e:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fd50:	680b      	ldr	r3, [r1, #0]
 800fd52:	001a      	movs	r2, r3
 800fd54:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd56:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fd58:	2a02      	cmp	r2, #2
 800fd5a:	d819      	bhi.n	800fd90 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd5c:	4a12      	ldr	r2, [pc, #72]	; (800fda8 <HAL_ADC_ConfigChannel+0x130>)
 800fd5e:	6811      	ldr	r1, [r2, #0]
 800fd60:	2b10      	cmp	r3, #16
 800fd62:	d00e      	beq.n	800fd82 <HAL_ADC_ConfigChannel+0x10a>
 800fd64:	3b11      	subs	r3, #17
 800fd66:	425a      	negs	r2, r3
 800fd68:	415a      	adcs	r2, r3
 800fd6a:	4252      	negs	r2, r2
 800fd6c:	23c0      	movs	r3, #192	; 0xc0
 800fd6e:	041b      	lsls	r3, r3, #16
 800fd70:	4013      	ands	r3, r2
 800fd72:	4a11      	ldr	r2, [pc, #68]	; (800fdb8 <HAL_ADC_ConfigChannel+0x140>)
 800fd74:	4694      	mov	ip, r2
 800fd76:	4463      	add	r3, ip
 800fd78:	400b      	ands	r3, r1
 800fd7a:	4a0b      	ldr	r2, [pc, #44]	; (800fda8 <HAL_ADC_ConfigChannel+0x130>)
 800fd7c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd7e:	2000      	movs	r0, #0
 800fd80:	e006      	b.n	800fd90 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd82:	4b0e      	ldr	r3, [pc, #56]	; (800fdbc <HAL_ADC_ConfigChannel+0x144>)
 800fd84:	e7f8      	b.n	800fd78 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fd88:	2220      	movs	r2, #32
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fd8e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800fd90:	2340      	movs	r3, #64	; 0x40
 800fd92:	2200      	movs	r2, #0
 800fd94:	54e2      	strb	r2, [r4, r3]
}
 800fd96:	b003      	add	sp, #12
 800fd98:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	e7f8      	b.n	800fd90 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 800fd9e:	2002      	movs	r0, #2
 800fda0:	e7f9      	b.n	800fd96 <HAL_ADC_ConfigChannel+0x11e>
 800fda2:	46c0      	nop			; (mov r8, r8)
 800fda4:	00001001 	.word	0x00001001
 800fda8:	40012708 	.word	0x40012708
 800fdac:	ff400000 	.word	0xff400000
 800fdb0:	20000090 	.word	0x20000090
 800fdb4:	000f4240 	.word	0x000f4240
 800fdb8:	feffffff 	.word	0xfeffffff
 800fdbc:	ff7fffff 	.word	0xff7fffff

0800fdc0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800fdc0:	b570      	push	{r4, r5, r6, lr}
 800fdc2:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fdc4:	2340      	movs	r3, #64	; 0x40
 800fdc6:	5cc3      	ldrb	r3, [r0, r3]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d042      	beq.n	800fe52 <HAL_ADCEx_Calibration_Start+0x92>
 800fdcc:	2340      	movs	r3, #64	; 0x40
 800fdce:	2201      	movs	r2, #1
 800fdd0:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fdd2:	6802      	ldr	r2, [r0, #0]
 800fdd4:	6891      	ldr	r1, [r2, #8]
 800fdd6:	3b3d      	subs	r3, #61	; 0x3d
 800fdd8:	400b      	ands	r3, r1
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d105      	bne.n	800fdea <HAL_ADCEx_Calibration_Start+0x2a>
 800fdde:	6813      	ldr	r3, [r2, #0]
 800fde0:	07db      	lsls	r3, r3, #31
 800fde2:	d42d      	bmi.n	800fe40 <HAL_ADCEx_Calibration_Start+0x80>
 800fde4:	68d3      	ldr	r3, [r2, #12]
 800fde6:	041b      	lsls	r3, r3, #16
 800fde8:	d42a      	bmi.n	800fe40 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800fdea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fdec:	491a      	ldr	r1, [pc, #104]	; (800fe58 <HAL_ADCEx_Calibration_Start+0x98>)
 800fdee:	400b      	ands	r3, r1
 800fdf0:	3106      	adds	r1, #6
 800fdf2:	31ff      	adds	r1, #255	; 0xff
 800fdf4:	430b      	orrs	r3, r1
 800fdf6:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800fdf8:	6891      	ldr	r1, [r2, #8]
 800fdfa:	2380      	movs	r3, #128	; 0x80
 800fdfc:	061b      	lsls	r3, r3, #24
 800fdfe:	430b      	orrs	r3, r1
 800fe00:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 800fe02:	f7ff fcf9 	bl	800f7f8 <HAL_GetTick>
 800fe06:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	da0f      	bge.n	800fe30 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800fe10:	f7ff fcf2 	bl	800f7f8 <HAL_GetTick>
 800fe14:	1b40      	subs	r0, r0, r5
 800fe16:	2802      	cmp	r0, #2
 800fe18:	d9f6      	bls.n	800fe08 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800fe1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe1c:	2212      	movs	r2, #18
 800fe1e:	4393      	bics	r3, r2
 800fe20:	3a02      	subs	r2, #2
 800fe22:	4313      	orrs	r3, r2
 800fe24:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800fe26:	2340      	movs	r3, #64	; 0x40
 800fe28:	2200      	movs	r2, #0
 800fe2a:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 800fe2c:	2001      	movs	r0, #1
 800fe2e:	e00f      	b.n	800fe50 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fe30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe32:	2203      	movs	r2, #3
 800fe34:	4393      	bics	r3, r2
 800fe36:	3a02      	subs	r2, #2
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fe3c:	2000      	movs	r0, #0
 800fe3e:	e004      	b.n	800fe4a <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fe40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe42:	2220      	movs	r2, #32
 800fe44:	4313      	orrs	r3, r2
 800fe46:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800fe48:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fe4a:	2340      	movs	r3, #64	; 0x40
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800fe50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 800fe52:	2002      	movs	r0, #2
 800fe54:	e7fc      	b.n	800fe50 <HAL_ADCEx_Calibration_Start+0x90>
 800fe56:	46c0      	nop			; (mov r8, r8)
 800fe58:	fffffefd 	.word	0xfffffefd

0800fe5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fe5c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	db14      	blt.n	800fe8c <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe62:	0883      	lsrs	r3, r0, #2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	4a15      	ldr	r2, [pc, #84]	; (800febc <HAL_NVIC_SetPriority+0x60>)
 800fe68:	4694      	mov	ip, r2
 800fe6a:	4463      	add	r3, ip
 800fe6c:	26c0      	movs	r6, #192	; 0xc0
 800fe6e:	00b6      	lsls	r6, r6, #2
 800fe70:	599d      	ldr	r5, [r3, r6]
 800fe72:	2403      	movs	r4, #3
 800fe74:	4020      	ands	r0, r4
 800fe76:	00c0      	lsls	r0, r0, #3
 800fe78:	22ff      	movs	r2, #255	; 0xff
 800fe7a:	0014      	movs	r4, r2
 800fe7c:	4084      	lsls	r4, r0
 800fe7e:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fe80:	0189      	lsls	r1, r1, #6
 800fe82:	400a      	ands	r2, r1
 800fe84:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe86:	432a      	orrs	r2, r5
 800fe88:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe8c:	b2c0      	uxtb	r0, r0
 800fe8e:	230f      	movs	r3, #15
 800fe90:	4003      	ands	r3, r0
 800fe92:	3b08      	subs	r3, #8
 800fe94:	089b      	lsrs	r3, r3, #2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4a09      	ldr	r2, [pc, #36]	; (800fec0 <HAL_NVIC_SetPriority+0x64>)
 800fe9a:	4694      	mov	ip, r2
 800fe9c:	4463      	add	r3, ip
 800fe9e:	69dd      	ldr	r5, [r3, #28]
 800fea0:	2203      	movs	r2, #3
 800fea2:	4010      	ands	r0, r2
 800fea4:	00c0      	lsls	r0, r0, #3
 800fea6:	24ff      	movs	r4, #255	; 0xff
 800fea8:	0022      	movs	r2, r4
 800feaa:	4082      	lsls	r2, r0
 800feac:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800feae:	0189      	lsls	r1, r1, #6
 800feb0:	400c      	ands	r4, r1
 800feb2:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800feb4:	432c      	orrs	r4, r5
 800feb6:	61dc      	str	r4, [r3, #28]
 800feb8:	e7e7      	b.n	800fe8a <HAL_NVIC_SetPriority+0x2e>
 800feba:	46c0      	nop			; (mov r8, r8)
 800febc:	e000e100 	.word	0xe000e100
 800fec0:	e000ed00 	.word	0xe000ed00

0800fec4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fec4:	231f      	movs	r3, #31
 800fec6:	4018      	ands	r0, r3
 800fec8:	3b1e      	subs	r3, #30
 800feca:	4083      	lsls	r3, r0
 800fecc:	4a01      	ldr	r2, [pc, #4]	; (800fed4 <HAL_NVIC_EnableIRQ+0x10>)
 800fece:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fed0:	4770      	bx	lr
 800fed2:	46c0      	nop			; (mov r8, r8)
 800fed4:	e000e100 	.word	0xe000e100

0800fed8 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fed8:	231f      	movs	r3, #31
 800feda:	4018      	ands	r0, r3
 800fedc:	3b1e      	subs	r3, #30
 800fede:	4083      	lsls	r3, r0
 800fee0:	4901      	ldr	r1, [pc, #4]	; (800fee8 <HAL_NVIC_DisableIRQ+0x10>)
 800fee2:	2280      	movs	r2, #128	; 0x80
 800fee4:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fee6:	4770      	bx	lr
 800fee8:	e000e100 	.word	0xe000e100

0800feec <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800feec:	1e43      	subs	r3, r0, #1
 800feee:	4a0a      	ldr	r2, [pc, #40]	; (800ff18 <HAL_SYSTICK_Config+0x2c>)
 800fef0:	2001      	movs	r0, #1
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d80e      	bhi.n	800ff14 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fef6:	4a09      	ldr	r2, [pc, #36]	; (800ff1c <HAL_SYSTICK_Config+0x30>)
 800fef8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fefa:	4809      	ldr	r0, [pc, #36]	; (800ff20 <HAL_SYSTICK_Config+0x34>)
 800fefc:	6a03      	ldr	r3, [r0, #32]
 800fefe:	021b      	lsls	r3, r3, #8
 800ff00:	0a1b      	lsrs	r3, r3, #8
 800ff02:	21c0      	movs	r1, #192	; 0xc0
 800ff04:	0609      	lsls	r1, r1, #24
 800ff06:	430b      	orrs	r3, r1
 800ff08:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ff0e:	3307      	adds	r3, #7
 800ff10:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ff12:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ff14:	4770      	bx	lr
 800ff16:	46c0      	nop			; (mov r8, r8)
 800ff18:	00ffffff 	.word	0x00ffffff
 800ff1c:	e000e010 	.word	0xe000e010
 800ff20:	e000ed00 	.word	0xe000ed00

0800ff24 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800ff24:	2804      	cmp	r0, #4
 800ff26:	d005      	beq.n	800ff34 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800ff28:	4a05      	ldr	r2, [pc, #20]	; (800ff40 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800ff2a:	6813      	ldr	r3, [r2, #0]
 800ff2c:	2104      	movs	r1, #4
 800ff2e:	438b      	bics	r3, r1
 800ff30:	6013      	str	r3, [r2, #0]
  }
}
 800ff32:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800ff34:	4a02      	ldr	r2, [pc, #8]	; (800ff40 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800ff36:	6813      	ldr	r3, [r2, #0]
 800ff38:	2104      	movs	r1, #4
 800ff3a:	430b      	orrs	r3, r1
 800ff3c:	6013      	str	r3, [r2, #0]
 800ff3e:	e7f8      	b.n	800ff32 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800ff40:	e000e010 	.word	0xe000e010

0800ff44 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff46:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800ff48:	0891      	lsrs	r1, r2, #2
 800ff4a:	d013      	beq.n	800ff74 <CRC_Handle_8+0x30>
 800ff4c:	0034      	movs	r4, r6
 800ff4e:	2303      	movs	r3, #3
 800ff50:	0017      	movs	r7, r2
 800ff52:	439f      	bics	r7, r3
 800ff54:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800ff56:	7823      	ldrb	r3, [r4, #0]
 800ff58:	061b      	lsls	r3, r3, #24
 800ff5a:	7865      	ldrb	r5, [r4, #1]
 800ff5c:	042d      	lsls	r5, r5, #16
 800ff5e:	432b      	orrs	r3, r5
 800ff60:	78e5      	ldrb	r5, [r4, #3]
 800ff62:	432b      	orrs	r3, r5
 800ff64:	78a5      	ldrb	r5, [r4, #2]
 800ff66:	022d      	lsls	r5, r5, #8
 800ff68:	432b      	orrs	r3, r5
 800ff6a:	6805      	ldr	r5, [r0, #0]
 800ff6c:	602b      	str	r3, [r5, #0]
 800ff6e:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800ff70:	42bc      	cmp	r4, r7
 800ff72:	d1f0      	bne.n	800ff56 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800ff74:	2303      	movs	r3, #3
 800ff76:	401a      	ands	r2, r3
 800ff78:	d01e      	beq.n	800ffb8 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800ff7a:	2a01      	cmp	r2, #1
 800ff7c:	d00a      	beq.n	800ff94 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800ff7e:	2a02      	cmp	r2, #2
 800ff80:	d10d      	bne.n	800ff9e <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ff82:	0089      	lsls	r1, r1, #2
 800ff84:	5c72      	ldrb	r2, [r6, r1]
 800ff86:	0212      	lsls	r2, r2, #8
 800ff88:	1871      	adds	r1, r6, r1
 800ff8a:	784b      	ldrb	r3, [r1, #1]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	6802      	ldr	r2, [r0, #0]
 800ff90:	8013      	strh	r3, [r2, #0]
 800ff92:	e011      	b.n	800ffb8 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800ff94:	0089      	lsls	r1, r1, #2
 800ff96:	5d8b      	ldrb	r3, [r1, r6]
 800ff98:	6802      	ldr	r2, [r0, #0]
 800ff9a:	7013      	strb	r3, [r2, #0]
 800ff9c:	e00c      	b.n	800ffb8 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800ff9e:	2a03      	cmp	r2, #3
 800ffa0:	d10a      	bne.n	800ffb8 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ffa2:	0089      	lsls	r1, r1, #2
 800ffa4:	5c72      	ldrb	r2, [r6, r1]
 800ffa6:	0212      	lsls	r2, r2, #8
 800ffa8:	1871      	adds	r1, r6, r1
 800ffaa:	784b      	ldrb	r3, [r1, #1]
 800ffac:	4313      	orrs	r3, r2
 800ffae:	6802      	ldr	r2, [r0, #0]
 800ffb0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800ffb2:	788b      	ldrb	r3, [r1, #2]
 800ffb4:	6802      	ldr	r2, [r0, #0]
 800ffb6:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ffb8:	6803      	ldr	r3, [r0, #0]
 800ffba:	6818      	ldr	r0, [r3, #0]
}
 800ffbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffbe <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ffbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc0:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800ffc2:	0852      	lsrs	r2, r2, #1
 800ffc4:	d00b      	beq.n	800ffde <CRC_Handle_16+0x20>
 800ffc6:	000c      	movs	r4, r1
 800ffc8:	0097      	lsls	r7, r2, #2
 800ffca:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ffcc:	8823      	ldrh	r3, [r4, #0]
 800ffce:	041b      	lsls	r3, r3, #16
 800ffd0:	8866      	ldrh	r6, [r4, #2]
 800ffd2:	4333      	orrs	r3, r6
 800ffd4:	6806      	ldr	r6, [r0, #0]
 800ffd6:	6033      	str	r3, [r6, #0]
 800ffd8:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800ffda:	42bc      	cmp	r4, r7
 800ffdc:	d1f6      	bne.n	800ffcc <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800ffde:	07eb      	lsls	r3, r5, #31
 800ffe0:	d503      	bpl.n	800ffea <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800ffe2:	0092      	lsls	r2, r2, #2
 800ffe4:	5a53      	ldrh	r3, [r2, r1]
 800ffe6:	6802      	ldr	r2, [r0, #0]
 800ffe8:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ffea:	6803      	ldr	r3, [r0, #0]
 800ffec:	6818      	ldr	r0, [r3, #0]
}
 800ffee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fff0 <HAL_CRC_Init>:
{
 800fff0:	b510      	push	{r4, lr}
 800fff2:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fff4:	d029      	beq.n	801004a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fff6:	7f43      	ldrb	r3, [r0, #29]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d01e      	beq.n	801003a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fffc:	2302      	movs	r3, #2
 800fffe:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010000:	0020      	movs	r0, r4
 8010002:	f000 f8b1 	bl	8010168 <HAL_CRCEx_Init>
 8010006:	2800      	cmp	r0, #0
 8010008:	d121      	bne.n	801004e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801000a:	7963      	ldrb	r3, [r4, #5]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d118      	bne.n	8010042 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010010:	6823      	ldr	r3, [r4, #0]
 8010012:	2201      	movs	r2, #1
 8010014:	4252      	negs	r2, r2
 8010016:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010018:	6822      	ldr	r2, [r4, #0]
 801001a:	6893      	ldr	r3, [r2, #8]
 801001c:	2160      	movs	r1, #96	; 0x60
 801001e:	438b      	bics	r3, r1
 8010020:	6961      	ldr	r1, [r4, #20]
 8010022:	430b      	orrs	r3, r1
 8010024:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010026:	6822      	ldr	r2, [r4, #0]
 8010028:	6893      	ldr	r3, [r2, #8]
 801002a:	2180      	movs	r1, #128	; 0x80
 801002c:	438b      	bics	r3, r1
 801002e:	69a1      	ldr	r1, [r4, #24]
 8010030:	430b      	orrs	r3, r1
 8010032:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010034:	2301      	movs	r3, #1
 8010036:	7763      	strb	r3, [r4, #29]
}
 8010038:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801003a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 801003c:	f7fc fc22 	bl	800c884 <HAL_CRC_MspInit>
 8010040:	e7dc      	b.n	800fffc <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	6922      	ldr	r2, [r4, #16]
 8010046:	611a      	str	r2, [r3, #16]
 8010048:	e7e6      	b.n	8010018 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801004a:	2001      	movs	r0, #1
 801004c:	e7f4      	b.n	8010038 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 801004e:	2001      	movs	r0, #1
 8010050:	e7f2      	b.n	8010038 <HAL_CRC_Init+0x48>

08010052 <HAL_CRC_Accumulate>:
{
 8010052:	b510      	push	{r4, lr}
 8010054:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010056:	7f03      	ldrb	r3, [r0, #28]
 8010058:	2b01      	cmp	r3, #1
 801005a:	d024      	beq.n	80100a6 <HAL_CRC_Accumulate+0x54>
 801005c:	2301      	movs	r3, #1
 801005e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010060:	3301      	adds	r3, #1
 8010062:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010064:	6a03      	ldr	r3, [r0, #32]
 8010066:	2b02      	cmp	r3, #2
 8010068:	d01a      	beq.n	80100a0 <HAL_CRC_Accumulate+0x4e>
 801006a:	2b03      	cmp	r3, #3
 801006c:	d007      	beq.n	801007e <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 801006e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010070:	2b01      	cmp	r3, #1
 8010072:	d011      	beq.n	8010098 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010074:	2301      	movs	r3, #1
 8010076:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010078:	2300      	movs	r3, #0
 801007a:	7723      	strb	r3, [r4, #28]
}
 801007c:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 801007e:	2a00      	cmp	r2, #0
 8010080:	d007      	beq.n	8010092 <HAL_CRC_Accumulate+0x40>
 8010082:	000b      	movs	r3, r1
 8010084:	0092      	lsls	r2, r2, #2
 8010086:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010088:	6822      	ldr	r2, [r4, #0]
 801008a:	cb01      	ldmia	r3!, {r0}
 801008c:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 801008e:	428b      	cmp	r3, r1
 8010090:	d1fa      	bne.n	8010088 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	6818      	ldr	r0, [r3, #0]
      break;
 8010096:	e7ed      	b.n	8010074 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010098:	0020      	movs	r0, r4
 801009a:	f7ff ff53 	bl	800ff44 <CRC_Handle_8>
      break;
 801009e:	e7e9      	b.n	8010074 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80100a0:	f7ff ff8d 	bl	800ffbe <CRC_Handle_16>
      break;
 80100a4:	e7e6      	b.n	8010074 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80100a6:	2002      	movs	r0, #2
 80100a8:	e7e8      	b.n	801007c <HAL_CRC_Accumulate+0x2a>

080100aa <HAL_CRC_Calculate>:
{
 80100aa:	b570      	push	{r4, r5, r6, lr}
 80100ac:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80100ae:	7f03      	ldrb	r3, [r0, #28]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d029      	beq.n	8010108 <HAL_CRC_Calculate+0x5e>
 80100b4:	2501      	movs	r5, #1
 80100b6:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80100b8:	2302      	movs	r3, #2
 80100ba:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80100bc:	6800      	ldr	r0, [r0, #0]
 80100be:	6883      	ldr	r3, [r0, #8]
 80100c0:	432b      	orrs	r3, r5
 80100c2:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80100c4:	6a23      	ldr	r3, [r4, #32]
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d01a      	beq.n	8010100 <HAL_CRC_Calculate+0x56>
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d007      	beq.n	80100de <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80100ce:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d011      	beq.n	80100f8 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 80100d4:	2301      	movs	r3, #1
 80100d6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80100d8:	2300      	movs	r3, #0
 80100da:	7723      	strb	r3, [r4, #28]
}
 80100dc:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80100de:	2a00      	cmp	r2, #0
 80100e0:	d007      	beq.n	80100f2 <HAL_CRC_Calculate+0x48>
 80100e2:	000b      	movs	r3, r1
 80100e4:	0092      	lsls	r2, r2, #2
 80100e6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80100e8:	6820      	ldr	r0, [r4, #0]
 80100ea:	cb20      	ldmia	r3!, {r5}
 80100ec:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80100ee:	428b      	cmp	r3, r1
 80100f0:	d1fa      	bne.n	80100e8 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	6818      	ldr	r0, [r3, #0]
      break;
 80100f6:	e7ed      	b.n	80100d4 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80100f8:	0020      	movs	r0, r4
 80100fa:	f7ff ff23 	bl	800ff44 <CRC_Handle_8>
      break;
 80100fe:	e7e9      	b.n	80100d4 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010100:	0020      	movs	r0, r4
 8010102:	f7ff ff5c 	bl	800ffbe <CRC_Handle_16>
      break;
 8010106:	e7e5      	b.n	80100d4 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010108:	2002      	movs	r0, #2
 801010a:	e7e7      	b.n	80100dc <HAL_CRC_Calculate+0x32>

0801010c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801010c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801010e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010110:	2501      	movs	r5, #1
 8010112:	002c      	movs	r4, r5
 8010114:	409c      	lsls	r4, r3
 8010116:	4221      	tst	r1, r4
 8010118:	d10b      	bne.n	8010132 <HAL_CRCEx_Polynomial_Set+0x26>
 801011a:	3b01      	subs	r3, #1
 801011c:	d2f9      	bcs.n	8010112 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 801011e:	2a10      	cmp	r2, #16
 8010120:	d01c      	beq.n	801015c <HAL_CRCEx_Polynomial_Set+0x50>
 8010122:	2a18      	cmp	r2, #24
 8010124:	d01e      	beq.n	8010164 <HAL_CRCEx_Polynomial_Set+0x58>
 8010126:	2a08      	cmp	r2, #8
 8010128:	d109      	bne.n	801013e <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 801012a:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 801012c:	2b0f      	cmp	r3, #15
 801012e:	d906      	bls.n	801013e <HAL_CRCEx_Polynomial_Set+0x32>
 8010130:	e00e      	b.n	8010150 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010132:	2a10      	cmp	r2, #16
 8010134:	d012      	beq.n	801015c <HAL_CRCEx_Polynomial_Set+0x50>
 8010136:	2a18      	cmp	r2, #24
 8010138:	d00c      	beq.n	8010154 <HAL_CRCEx_Polynomial_Set+0x48>
 801013a:	2a08      	cmp	r2, #8
 801013c:	d0f5      	beq.n	801012a <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 801013e:	6803      	ldr	r3, [r0, #0]
 8010140:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010142:	6801      	ldr	r1, [r0, #0]
 8010144:	688b      	ldr	r3, [r1, #8]
 8010146:	2018      	movs	r0, #24
 8010148:	4383      	bics	r3, r0
 801014a:	431a      	orrs	r2, r3
 801014c:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 801014e:	2400      	movs	r4, #0
}
 8010150:	0020      	movs	r0, r4
 8010152:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010154:	2b06      	cmp	r3, #6
 8010156:	d9f2      	bls.n	801013e <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010158:	2401      	movs	r4, #1
 801015a:	e7f9      	b.n	8010150 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 801015c:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 801015e:	2b07      	cmp	r3, #7
 8010160:	d9ed      	bls.n	801013e <HAL_CRCEx_Polynomial_Set+0x32>
 8010162:	e7f5      	b.n	8010150 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010164:	2401      	movs	r4, #1
 8010166:	e7f3      	b.n	8010150 <HAL_CRCEx_Polynomial_Set+0x44>

08010168 <HAL_CRCEx_Init>:
{
 8010168:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801016a:	7903      	ldrb	r3, [r0, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d109      	bne.n	8010184 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010170:	6803      	ldr	r3, [r0, #0]
 8010172:	4a08      	ldr	r2, [pc, #32]	; (8010194 <HAL_CRCEx_Init+0x2c>)
 8010174:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010176:	6802      	ldr	r2, [r0, #0]
 8010178:	6893      	ldr	r3, [r2, #8]
 801017a:	2118      	movs	r1, #24
 801017c:	438b      	bics	r3, r1
 801017e:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010180:	2000      	movs	r0, #0
}
 8010182:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010184:	68c2      	ldr	r2, [r0, #12]
 8010186:	6881      	ldr	r1, [r0, #8]
 8010188:	f7ff ffc0 	bl	801010c <HAL_CRCEx_Polynomial_Set>
 801018c:	1e43      	subs	r3, r0, #1
 801018e:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010190:	b2c0      	uxtb	r0, r0
 8010192:	e7f6      	b.n	8010182 <HAL_CRCEx_Init+0x1a>
 8010194:	04c11db7 	.word	0x04c11db7

08010198 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010198:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801019a:	2800      	cmp	r0, #0
 801019c:	d022      	beq.n	80101e4 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 801019e:	2321      	movs	r3, #33	; 0x21
 80101a0:	5cc3      	ldrb	r3, [r0, r3]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d102      	bne.n	80101ac <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80101a6:	3320      	adds	r3, #32
 80101a8:	2200      	movs	r2, #0
 80101aa:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80101ac:	2121      	movs	r1, #33	; 0x21
 80101ae:	2302      	movs	r3, #2
 80101b0:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80101b2:	6804      	ldr	r4, [r0, #0]
 80101b4:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80101b6:	4a0c      	ldr	r2, [pc, #48]	; (80101e8 <HAL_DMA_Init+0x50>)
 80101b8:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80101ba:	6843      	ldr	r3, [r0, #4]
 80101bc:	6885      	ldr	r5, [r0, #8]
 80101be:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80101c0:	68c5      	ldr	r5, [r0, #12]
 80101c2:	432b      	orrs	r3, r5
 80101c4:	6905      	ldr	r5, [r0, #16]
 80101c6:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80101c8:	6945      	ldr	r5, [r0, #20]
 80101ca:	432b      	orrs	r3, r5
 80101cc:	6985      	ldr	r5, [r0, #24]
 80101ce:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80101d0:	69c5      	ldr	r5, [r0, #28]
 80101d2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80101d4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80101d6:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80101d8:	2300      	movs	r3, #0
 80101da:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80101dc:	3301      	adds	r3, #1
 80101de:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 80101e0:	2000      	movs	r0, #0
}  
 80101e2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80101e4:	2001      	movs	r0, #1
 80101e6:	e7fc      	b.n	80101e2 <HAL_DMA_Init+0x4a>
 80101e8:	ffffc00f 	.word	0xffffc00f

080101ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80101ec:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 80101ee:	2420      	movs	r4, #32
 80101f0:	5d04      	ldrb	r4, [r0, r4]
 80101f2:	2c01      	cmp	r4, #1
 80101f4:	d02d      	beq.n	8010252 <HAL_DMA_Start_IT+0x66>
 80101f6:	2601      	movs	r6, #1
 80101f8:	2420      	movs	r4, #32
 80101fa:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80101fc:	3401      	adds	r4, #1
 80101fe:	2502      	movs	r5, #2
 8010200:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010202:	6805      	ldr	r5, [r0, #0]
 8010204:	682c      	ldr	r4, [r5, #0]
 8010206:	43b4      	bics	r4, r6
 8010208:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801020a:	6804      	ldr	r4, [r0, #0]
 801020c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801020e:	6843      	ldr	r3, [r0, #4]
 8010210:	2b10      	cmp	r3, #16
 8010212:	d019      	beq.n	8010248 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010214:	6803      	ldr	r3, [r0, #0]
 8010216:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010218:	6803      	ldr	r3, [r0, #0]
 801021a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801021c:	6802      	ldr	r2, [r0, #0]
 801021e:	6813      	ldr	r3, [r2, #0]
 8010220:	2102      	movs	r1, #2
 8010222:	430b      	orrs	r3, r1
 8010224:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010226:	6802      	ldr	r2, [r0, #0]
 8010228:	6813      	ldr	r3, [r2, #0]
 801022a:	3102      	adds	r1, #2
 801022c:	430b      	orrs	r3, r1
 801022e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010230:	6802      	ldr	r2, [r0, #0]
 8010232:	6813      	ldr	r3, [r2, #0]
 8010234:	3104      	adds	r1, #4
 8010236:	430b      	orrs	r3, r1
 8010238:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801023a:	6802      	ldr	r2, [r0, #0]
 801023c:	6813      	ldr	r3, [r2, #0]
 801023e:	3907      	subs	r1, #7
 8010240:	430b      	orrs	r3, r1
 8010242:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010244:	2000      	movs	r0, #0
} 
 8010246:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010248:	6803      	ldr	r3, [r0, #0]
 801024a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801024c:	6803      	ldr	r3, [r0, #0]
 801024e:	60d9      	str	r1, [r3, #12]
 8010250:	e7e4      	b.n	801021c <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010252:	2002      	movs	r0, #2
 8010254:	e7f7      	b.n	8010246 <HAL_DMA_Start_IT+0x5a>

08010256 <HAL_DMA_Abort>:
{
 8010256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010258:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801025a:	6802      	ldr	r2, [r0, #0]
 801025c:	6813      	ldr	r3, [r2, #0]
 801025e:	2101      	movs	r1, #1
 8010260:	438b      	bics	r3, r1
 8010262:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010264:	f7ff fac8 	bl	800f7f8 <HAL_GetTick>
 8010268:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801026a:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801026c:	26fa      	movs	r6, #250	; 0xfa
 801026e:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010270:	6823      	ldr	r3, [r4, #0]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	421d      	tst	r5, r3
 8010276:	d00f      	beq.n	8010298 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010278:	f7ff fabe 	bl	800f7f8 <HAL_GetTick>
 801027c:	1bc0      	subs	r0, r0, r7
 801027e:	42b0      	cmp	r0, r6
 8010280:	d9f6      	bls.n	8010270 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010284:	2220      	movs	r2, #32
 8010286:	4313      	orrs	r3, r2
 8010288:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801028a:	2321      	movs	r3, #33	; 0x21
 801028c:	2103      	movs	r1, #3
 801028e:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010290:	2300      	movs	r3, #0
 8010292:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010294:	2003      	movs	r0, #3
 8010296:	e006      	b.n	80102a6 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010298:	2321      	movs	r3, #33	; 0x21
 801029a:	2201      	movs	r2, #1
 801029c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801029e:	3b01      	subs	r3, #1
 80102a0:	2200      	movs	r2, #0
 80102a2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80102a4:	2000      	movs	r0, #0
}
 80102a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080102a8 <HAL_DMA_IRQHandler>:
{        
 80102a8:	b510      	push	{r4, lr}
 80102aa:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80102ac:	6803      	ldr	r3, [r0, #0]
 80102ae:	4ab4      	ldr	r2, [pc, #720]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d94d      	bls.n	8010350 <HAL_DMA_IRQHandler+0xa8>
 80102b4:	4ab3      	ldr	r2, [pc, #716]	; (8010584 <HAL_DMA_IRQHandler+0x2dc>)
 80102b6:	6811      	ldr	r1, [r2, #0]
 80102b8:	4ab3      	ldr	r2, [pc, #716]	; (8010588 <HAL_DMA_IRQHandler+0x2e0>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d026      	beq.n	801030c <HAL_DMA_IRQHandler+0x64>
 80102be:	4ab3      	ldr	r2, [pc, #716]	; (801058c <HAL_DMA_IRQHandler+0x2e4>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d02d      	beq.n	8010320 <HAL_DMA_IRQHandler+0x78>
 80102c4:	4ab2      	ldr	r2, [pc, #712]	; (8010590 <HAL_DMA_IRQHandler+0x2e8>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d02c      	beq.n	8010324 <HAL_DMA_IRQHandler+0x7c>
 80102ca:	4ab2      	ldr	r2, [pc, #712]	; (8010594 <HAL_DMA_IRQHandler+0x2ec>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d02c      	beq.n	801032a <HAL_DMA_IRQHandler+0x82>
 80102d0:	4ab1      	ldr	r2, [pc, #708]	; (8010598 <HAL_DMA_IRQHandler+0x2f0>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d02c      	beq.n	8010330 <HAL_DMA_IRQHandler+0x88>
 80102d6:	4ab1      	ldr	r2, [pc, #708]	; (801059c <HAL_DMA_IRQHandler+0x2f4>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d02c      	beq.n	8010336 <HAL_DMA_IRQHandler+0x8e>
 80102dc:	4aa8      	ldr	r2, [pc, #672]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d02c      	beq.n	801033c <HAL_DMA_IRQHandler+0x94>
 80102e2:	4aaf      	ldr	r2, [pc, #700]	; (80105a0 <HAL_DMA_IRQHandler+0x2f8>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d02c      	beq.n	8010342 <HAL_DMA_IRQHandler+0x9a>
 80102e8:	4aae      	ldr	r2, [pc, #696]	; (80105a4 <HAL_DMA_IRQHandler+0x2fc>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d02b      	beq.n	8010346 <HAL_DMA_IRQHandler+0x9e>
 80102ee:	4aae      	ldr	r2, [pc, #696]	; (80105a8 <HAL_DMA_IRQHandler+0x300>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d02a      	beq.n	801034a <HAL_DMA_IRQHandler+0xa2>
 80102f4:	4aad      	ldr	r2, [pc, #692]	; (80105ac <HAL_DMA_IRQHandler+0x304>)
 80102f6:	189a      	adds	r2, r3, r2
 80102f8:	4250      	negs	r0, r2
 80102fa:	4142      	adcs	r2, r0
 80102fc:	4252      	negs	r2, r2
 80102fe:	48ac      	ldr	r0, [pc, #688]	; (80105b0 <HAL_DMA_IRQHandler+0x308>)
 8010300:	4002      	ands	r2, r0
 8010302:	2080      	movs	r0, #128	; 0x80
 8010304:	0300      	lsls	r0, r0, #12
 8010306:	4684      	mov	ip, r0
 8010308:	4462      	add	r2, ip
 801030a:	e000      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 801030c:	2208      	movs	r2, #8
 801030e:	420a      	tst	r2, r1
 8010310:	d100      	bne.n	8010314 <HAL_DMA_IRQHandler+0x6c>
 8010312:	e0e6      	b.n	80104e2 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	0712      	lsls	r2, r2, #28
 8010318:	d500      	bpl.n	801031c <HAL_DMA_IRQHandler+0x74>
 801031a:	e097      	b.n	801044c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	e0e0      	b.n	80104e2 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010320:	2280      	movs	r2, #128	; 0x80
 8010322:	e7f4      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 8010324:	2280      	movs	r2, #128	; 0x80
 8010326:	0112      	lsls	r2, r2, #4
 8010328:	e7f1      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 801032a:	2280      	movs	r2, #128	; 0x80
 801032c:	0212      	lsls	r2, r2, #8
 801032e:	e7ee      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 8010330:	2280      	movs	r2, #128	; 0x80
 8010332:	0312      	lsls	r2, r2, #12
 8010334:	e7eb      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 8010336:	2280      	movs	r2, #128	; 0x80
 8010338:	0412      	lsls	r2, r2, #16
 801033a:	e7e8      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 801033c:	2280      	movs	r2, #128	; 0x80
 801033e:	0512      	lsls	r2, r2, #20
 8010340:	e7e5      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 8010342:	2208      	movs	r2, #8
 8010344:	e7e3      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 8010346:	2280      	movs	r2, #128	; 0x80
 8010348:	e7e1      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 801034a:	2280      	movs	r2, #128	; 0x80
 801034c:	0112      	lsls	r2, r2, #4
 801034e:	e7de      	b.n	801030e <HAL_DMA_IRQHandler+0x66>
 8010350:	4a98      	ldr	r2, [pc, #608]	; (80105b4 <HAL_DMA_IRQHandler+0x30c>)
 8010352:	6811      	ldr	r1, [r2, #0]
 8010354:	4a8c      	ldr	r2, [pc, #560]	; (8010588 <HAL_DMA_IRQHandler+0x2e0>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d026      	beq.n	80103a8 <HAL_DMA_IRQHandler+0x100>
 801035a:	4a8c      	ldr	r2, [pc, #560]	; (801058c <HAL_DMA_IRQHandler+0x2e4>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d05d      	beq.n	801041c <HAL_DMA_IRQHandler+0x174>
 8010360:	4a8b      	ldr	r2, [pc, #556]	; (8010590 <HAL_DMA_IRQHandler+0x2e8>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d05c      	beq.n	8010420 <HAL_DMA_IRQHandler+0x178>
 8010366:	4a8b      	ldr	r2, [pc, #556]	; (8010594 <HAL_DMA_IRQHandler+0x2ec>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d05c      	beq.n	8010426 <HAL_DMA_IRQHandler+0x17e>
 801036c:	4a8a      	ldr	r2, [pc, #552]	; (8010598 <HAL_DMA_IRQHandler+0x2f0>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d05c      	beq.n	801042c <HAL_DMA_IRQHandler+0x184>
 8010372:	4a8a      	ldr	r2, [pc, #552]	; (801059c <HAL_DMA_IRQHandler+0x2f4>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d05c      	beq.n	8010432 <HAL_DMA_IRQHandler+0x18a>
 8010378:	4a81      	ldr	r2, [pc, #516]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d05c      	beq.n	8010438 <HAL_DMA_IRQHandler+0x190>
 801037e:	4a88      	ldr	r2, [pc, #544]	; (80105a0 <HAL_DMA_IRQHandler+0x2f8>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d05c      	beq.n	801043e <HAL_DMA_IRQHandler+0x196>
 8010384:	4a87      	ldr	r2, [pc, #540]	; (80105a4 <HAL_DMA_IRQHandler+0x2fc>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d05b      	beq.n	8010442 <HAL_DMA_IRQHandler+0x19a>
 801038a:	4a87      	ldr	r2, [pc, #540]	; (80105a8 <HAL_DMA_IRQHandler+0x300>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d05a      	beq.n	8010446 <HAL_DMA_IRQHandler+0x19e>
 8010390:	4a86      	ldr	r2, [pc, #536]	; (80105ac <HAL_DMA_IRQHandler+0x304>)
 8010392:	189a      	adds	r2, r3, r2
 8010394:	4250      	negs	r0, r2
 8010396:	4142      	adcs	r2, r0
 8010398:	4252      	negs	r2, r2
 801039a:	4885      	ldr	r0, [pc, #532]	; (80105b0 <HAL_DMA_IRQHandler+0x308>)
 801039c:	4002      	ands	r2, r0
 801039e:	2080      	movs	r0, #128	; 0x80
 80103a0:	0300      	lsls	r0, r0, #12
 80103a2:	4684      	mov	ip, r0
 80103a4:	4462      	add	r2, ip
 80103a6:	e000      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 80103a8:	2208      	movs	r2, #8
 80103aa:	420a      	tst	r2, r1
 80103ac:	d000      	beq.n	80103b0 <HAL_DMA_IRQHandler+0x108>
 80103ae:	e3ad      	b.n	8010b0c <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80103b0:	4a80      	ldr	r2, [pc, #512]	; (80105b4 <HAL_DMA_IRQHandler+0x30c>)
 80103b2:	6811      	ldr	r1, [r2, #0]
 80103b4:	4a74      	ldr	r2, [pc, #464]	; (8010588 <HAL_DMA_IRQHandler+0x2e0>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d100      	bne.n	80103bc <HAL_DMA_IRQHandler+0x114>
 80103ba:	e198      	b.n	80106ee <HAL_DMA_IRQHandler+0x446>
 80103bc:	4a73      	ldr	r2, [pc, #460]	; (801058c <HAL_DMA_IRQHandler+0x2e4>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d100      	bne.n	80103c4 <HAL_DMA_IRQHandler+0x11c>
 80103c2:	e1da      	b.n	801077a <HAL_DMA_IRQHandler+0x4d2>
 80103c4:	4a72      	ldr	r2, [pc, #456]	; (8010590 <HAL_DMA_IRQHandler+0x2e8>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d100      	bne.n	80103cc <HAL_DMA_IRQHandler+0x124>
 80103ca:	e1d8      	b.n	801077e <HAL_DMA_IRQHandler+0x4d6>
 80103cc:	4a71      	ldr	r2, [pc, #452]	; (8010594 <HAL_DMA_IRQHandler+0x2ec>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d100      	bne.n	80103d4 <HAL_DMA_IRQHandler+0x12c>
 80103d2:	e1d7      	b.n	8010784 <HAL_DMA_IRQHandler+0x4dc>
 80103d4:	4a70      	ldr	r2, [pc, #448]	; (8010598 <HAL_DMA_IRQHandler+0x2f0>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d100      	bne.n	80103dc <HAL_DMA_IRQHandler+0x134>
 80103da:	e1d6      	b.n	801078a <HAL_DMA_IRQHandler+0x4e2>
 80103dc:	4a6f      	ldr	r2, [pc, #444]	; (801059c <HAL_DMA_IRQHandler+0x2f4>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d100      	bne.n	80103e4 <HAL_DMA_IRQHandler+0x13c>
 80103e2:	e1d5      	b.n	8010790 <HAL_DMA_IRQHandler+0x4e8>
 80103e4:	4a66      	ldr	r2, [pc, #408]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d100      	bne.n	80103ec <HAL_DMA_IRQHandler+0x144>
 80103ea:	e1d4      	b.n	8010796 <HAL_DMA_IRQHandler+0x4ee>
 80103ec:	4a6c      	ldr	r2, [pc, #432]	; (80105a0 <HAL_DMA_IRQHandler+0x2f8>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d100      	bne.n	80103f4 <HAL_DMA_IRQHandler+0x14c>
 80103f2:	e1d3      	b.n	801079c <HAL_DMA_IRQHandler+0x4f4>
 80103f4:	4a6b      	ldr	r2, [pc, #428]	; (80105a4 <HAL_DMA_IRQHandler+0x2fc>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d100      	bne.n	80103fc <HAL_DMA_IRQHandler+0x154>
 80103fa:	e1d1      	b.n	80107a0 <HAL_DMA_IRQHandler+0x4f8>
 80103fc:	4a6a      	ldr	r2, [pc, #424]	; (80105a8 <HAL_DMA_IRQHandler+0x300>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d100      	bne.n	8010404 <HAL_DMA_IRQHandler+0x15c>
 8010402:	e1cf      	b.n	80107a4 <HAL_DMA_IRQHandler+0x4fc>
 8010404:	4a69      	ldr	r2, [pc, #420]	; (80105ac <HAL_DMA_IRQHandler+0x304>)
 8010406:	189a      	adds	r2, r3, r2
 8010408:	4250      	negs	r0, r2
 801040a:	4142      	adcs	r2, r0
 801040c:	4252      	negs	r2, r2
 801040e:	486a      	ldr	r0, [pc, #424]	; (80105b8 <HAL_DMA_IRQHandler+0x310>)
 8010410:	4002      	ands	r2, r0
 8010412:	2080      	movs	r0, #128	; 0x80
 8010414:	02c0      	lsls	r0, r0, #11
 8010416:	4684      	mov	ip, r0
 8010418:	4462      	add	r2, ip
 801041a:	e169      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801041c:	2280      	movs	r2, #128	; 0x80
 801041e:	e7c4      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 8010420:	2280      	movs	r2, #128	; 0x80
 8010422:	0112      	lsls	r2, r2, #4
 8010424:	e7c1      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 8010426:	2280      	movs	r2, #128	; 0x80
 8010428:	0212      	lsls	r2, r2, #8
 801042a:	e7be      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 801042c:	2280      	movs	r2, #128	; 0x80
 801042e:	0312      	lsls	r2, r2, #12
 8010430:	e7bb      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 8010432:	2280      	movs	r2, #128	; 0x80
 8010434:	0412      	lsls	r2, r2, #16
 8010436:	e7b8      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 8010438:	2280      	movs	r2, #128	; 0x80
 801043a:	0512      	lsls	r2, r2, #20
 801043c:	e7b5      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 801043e:	2208      	movs	r2, #8
 8010440:	e7b3      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 8010442:	2280      	movs	r2, #128	; 0x80
 8010444:	e7b1      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
 8010446:	2280      	movs	r2, #128	; 0x80
 8010448:	0112      	lsls	r2, r2, #4
 801044a:	e7ae      	b.n	80103aa <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	2108      	movs	r1, #8
 8010450:	438a      	bics	r2, r1
 8010452:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010454:	6823      	ldr	r3, [r4, #0]
 8010456:	4a4a      	ldr	r2, [pc, #296]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d800      	bhi.n	801045e <HAL_DMA_IRQHandler+0x1b6>
 801045c:	e0ae      	b.n	80105bc <HAL_DMA_IRQHandler+0x314>
 801045e:	4a4a      	ldr	r2, [pc, #296]	; (8010588 <HAL_DMA_IRQHandler+0x2e0>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d027      	beq.n	80104b4 <HAL_DMA_IRQHandler+0x20c>
 8010464:	4a49      	ldr	r2, [pc, #292]	; (801058c <HAL_DMA_IRQHandler+0x2e4>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d071      	beq.n	801054e <HAL_DMA_IRQHandler+0x2a6>
 801046a:	4a49      	ldr	r2, [pc, #292]	; (8010590 <HAL_DMA_IRQHandler+0x2e8>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d070      	beq.n	8010552 <HAL_DMA_IRQHandler+0x2aa>
 8010470:	4a48      	ldr	r2, [pc, #288]	; (8010594 <HAL_DMA_IRQHandler+0x2ec>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d070      	beq.n	8010558 <HAL_DMA_IRQHandler+0x2b0>
 8010476:	4a48      	ldr	r2, [pc, #288]	; (8010598 <HAL_DMA_IRQHandler+0x2f0>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d070      	beq.n	801055e <HAL_DMA_IRQHandler+0x2b6>
 801047c:	4a47      	ldr	r2, [pc, #284]	; (801059c <HAL_DMA_IRQHandler+0x2f4>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d070      	beq.n	8010564 <HAL_DMA_IRQHandler+0x2bc>
 8010482:	4a3f      	ldr	r2, [pc, #252]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d070      	beq.n	801056a <HAL_DMA_IRQHandler+0x2c2>
 8010488:	4a45      	ldr	r2, [pc, #276]	; (80105a0 <HAL_DMA_IRQHandler+0x2f8>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d070      	beq.n	8010570 <HAL_DMA_IRQHandler+0x2c8>
 801048e:	4a45      	ldr	r2, [pc, #276]	; (80105a4 <HAL_DMA_IRQHandler+0x2fc>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d06f      	beq.n	8010574 <HAL_DMA_IRQHandler+0x2cc>
 8010494:	4a44      	ldr	r2, [pc, #272]	; (80105a8 <HAL_DMA_IRQHandler+0x300>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d06e      	beq.n	8010578 <HAL_DMA_IRQHandler+0x2d0>
 801049a:	4a44      	ldr	r2, [pc, #272]	; (80105ac <HAL_DMA_IRQHandler+0x304>)
 801049c:	4694      	mov	ip, r2
 801049e:	4463      	add	r3, ip
 80104a0:	425a      	negs	r2, r3
 80104a2:	4153      	adcs	r3, r2
 80104a4:	425b      	negs	r3, r3
 80104a6:	4a42      	ldr	r2, [pc, #264]	; (80105b0 <HAL_DMA_IRQHandler+0x308>)
 80104a8:	4013      	ands	r3, r2
 80104aa:	2280      	movs	r2, #128	; 0x80
 80104ac:	0312      	lsls	r2, r2, #12
 80104ae:	4694      	mov	ip, r2
 80104b0:	4463      	add	r3, ip
 80104b2:	e000      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 80104b4:	2308      	movs	r3, #8
 80104b6:	4a33      	ldr	r2, [pc, #204]	; (8010584 <HAL_DMA_IRQHandler+0x2dc>)
 80104b8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80104ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104bc:	2201      	movs	r2, #1
 80104be:	4313      	orrs	r3, r2
 80104c0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80104c2:	2321      	movs	r3, #33	; 0x21
 80104c4:	3203      	adds	r2, #3
 80104c6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80104c8:	3b01      	subs	r3, #1
 80104ca:	2200      	movs	r2, #0
 80104cc:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80104ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d001      	beq.n	80104d8 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 80104d4:	0020      	movs	r0, r4
 80104d6:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	4a29      	ldr	r2, [pc, #164]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d800      	bhi.n	80104e2 <HAL_DMA_IRQHandler+0x23a>
 80104e0:	e766      	b.n	80103b0 <HAL_DMA_IRQHandler+0x108>
 80104e2:	4a28      	ldr	r2, [pc, #160]	; (8010584 <HAL_DMA_IRQHandler+0x2dc>)
 80104e4:	6811      	ldr	r1, [r2, #0]
 80104e6:	4a28      	ldr	r2, [pc, #160]	; (8010588 <HAL_DMA_IRQHandler+0x2e0>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d100      	bne.n	80104ee <HAL_DMA_IRQHandler+0x246>
 80104ec:	e0ad      	b.n	801064a <HAL_DMA_IRQHandler+0x3a2>
 80104ee:	4a27      	ldr	r2, [pc, #156]	; (801058c <HAL_DMA_IRQHandler+0x2e4>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d100      	bne.n	80104f6 <HAL_DMA_IRQHandler+0x24e>
 80104f4:	e0e3      	b.n	80106be <HAL_DMA_IRQHandler+0x416>
 80104f6:	4a26      	ldr	r2, [pc, #152]	; (8010590 <HAL_DMA_IRQHandler+0x2e8>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d100      	bne.n	80104fe <HAL_DMA_IRQHandler+0x256>
 80104fc:	e0e1      	b.n	80106c2 <HAL_DMA_IRQHandler+0x41a>
 80104fe:	4a25      	ldr	r2, [pc, #148]	; (8010594 <HAL_DMA_IRQHandler+0x2ec>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d100      	bne.n	8010506 <HAL_DMA_IRQHandler+0x25e>
 8010504:	e0e0      	b.n	80106c8 <HAL_DMA_IRQHandler+0x420>
 8010506:	4a24      	ldr	r2, [pc, #144]	; (8010598 <HAL_DMA_IRQHandler+0x2f0>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d100      	bne.n	801050e <HAL_DMA_IRQHandler+0x266>
 801050c:	e0df      	b.n	80106ce <HAL_DMA_IRQHandler+0x426>
 801050e:	4a23      	ldr	r2, [pc, #140]	; (801059c <HAL_DMA_IRQHandler+0x2f4>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d100      	bne.n	8010516 <HAL_DMA_IRQHandler+0x26e>
 8010514:	e0de      	b.n	80106d4 <HAL_DMA_IRQHandler+0x42c>
 8010516:	4a1a      	ldr	r2, [pc, #104]	; (8010580 <HAL_DMA_IRQHandler+0x2d8>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d100      	bne.n	801051e <HAL_DMA_IRQHandler+0x276>
 801051c:	e0dd      	b.n	80106da <HAL_DMA_IRQHandler+0x432>
 801051e:	4a20      	ldr	r2, [pc, #128]	; (80105a0 <HAL_DMA_IRQHandler+0x2f8>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d100      	bne.n	8010526 <HAL_DMA_IRQHandler+0x27e>
 8010524:	e0dc      	b.n	80106e0 <HAL_DMA_IRQHandler+0x438>
 8010526:	4a1f      	ldr	r2, [pc, #124]	; (80105a4 <HAL_DMA_IRQHandler+0x2fc>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d100      	bne.n	801052e <HAL_DMA_IRQHandler+0x286>
 801052c:	e0da      	b.n	80106e4 <HAL_DMA_IRQHandler+0x43c>
 801052e:	4a1e      	ldr	r2, [pc, #120]	; (80105a8 <HAL_DMA_IRQHandler+0x300>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d100      	bne.n	8010536 <HAL_DMA_IRQHandler+0x28e>
 8010534:	e0d8      	b.n	80106e8 <HAL_DMA_IRQHandler+0x440>
 8010536:	4a1d      	ldr	r2, [pc, #116]	; (80105ac <HAL_DMA_IRQHandler+0x304>)
 8010538:	189a      	adds	r2, r3, r2
 801053a:	4250      	negs	r0, r2
 801053c:	4142      	adcs	r2, r0
 801053e:	4252      	negs	r2, r2
 8010540:	481d      	ldr	r0, [pc, #116]	; (80105b8 <HAL_DMA_IRQHandler+0x310>)
 8010542:	4002      	ands	r2, r0
 8010544:	2080      	movs	r0, #128	; 0x80
 8010546:	02c0      	lsls	r0, r0, #11
 8010548:	4684      	mov	ip, r0
 801054a:	4462      	add	r2, ip
 801054c:	e07e      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801054e:	2380      	movs	r3, #128	; 0x80
 8010550:	e7b1      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 8010552:	2380      	movs	r3, #128	; 0x80
 8010554:	011b      	lsls	r3, r3, #4
 8010556:	e7ae      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 8010558:	2380      	movs	r3, #128	; 0x80
 801055a:	021b      	lsls	r3, r3, #8
 801055c:	e7ab      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 801055e:	2380      	movs	r3, #128	; 0x80
 8010560:	031b      	lsls	r3, r3, #12
 8010562:	e7a8      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 8010564:	2380      	movs	r3, #128	; 0x80
 8010566:	041b      	lsls	r3, r3, #16
 8010568:	e7a5      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 801056a:	2380      	movs	r3, #128	; 0x80
 801056c:	051b      	lsls	r3, r3, #20
 801056e:	e7a2      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 8010570:	2308      	movs	r3, #8
 8010572:	e7a0      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 8010574:	2380      	movs	r3, #128	; 0x80
 8010576:	e79e      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 8010578:	2380      	movs	r3, #128	; 0x80
 801057a:	011b      	lsls	r3, r3, #4
 801057c:	e79b      	b.n	80104b6 <HAL_DMA_IRQHandler+0x20e>
 801057e:	46c0      	nop			; (mov r8, r8)
 8010580:	40020080 	.word	0x40020080
 8010584:	40020400 	.word	0x40020400
 8010588:	40020008 	.word	0x40020008
 801058c:	4002001c 	.word	0x4002001c
 8010590:	40020030 	.word	0x40020030
 8010594:	40020044 	.word	0x40020044
 8010598:	40020058 	.word	0x40020058
 801059c:	4002006c 	.word	0x4002006c
 80105a0:	40020408 	.word	0x40020408
 80105a4:	4002041c 	.word	0x4002041c
 80105a8:	40020430 	.word	0x40020430
 80105ac:	bffdfbbc 	.word	0xbffdfbbc
 80105b0:	fff88000 	.word	0xfff88000
 80105b4:	40020000 	.word	0x40020000
 80105b8:	fffc4000 	.word	0xfffc4000
 80105bc:	4aaa      	ldr	r2, [pc, #680]	; (8010868 <HAL_DMA_IRQHandler+0x5c0>)
 80105be:	4293      	cmp	r3, r2
 80105c0:	d027      	beq.n	8010612 <HAL_DMA_IRQHandler+0x36a>
 80105c2:	4aaa      	ldr	r2, [pc, #680]	; (801086c <HAL_DMA_IRQHandler+0x5c4>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d028      	beq.n	801061a <HAL_DMA_IRQHandler+0x372>
 80105c8:	4aa9      	ldr	r2, [pc, #676]	; (8010870 <HAL_DMA_IRQHandler+0x5c8>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d027      	beq.n	801061e <HAL_DMA_IRQHandler+0x376>
 80105ce:	4aa9      	ldr	r2, [pc, #676]	; (8010874 <HAL_DMA_IRQHandler+0x5cc>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d027      	beq.n	8010624 <HAL_DMA_IRQHandler+0x37c>
 80105d4:	4aa8      	ldr	r2, [pc, #672]	; (8010878 <HAL_DMA_IRQHandler+0x5d0>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d027      	beq.n	801062a <HAL_DMA_IRQHandler+0x382>
 80105da:	4aa8      	ldr	r2, [pc, #672]	; (801087c <HAL_DMA_IRQHandler+0x5d4>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d027      	beq.n	8010630 <HAL_DMA_IRQHandler+0x388>
 80105e0:	4aa7      	ldr	r2, [pc, #668]	; (8010880 <HAL_DMA_IRQHandler+0x5d8>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d027      	beq.n	8010636 <HAL_DMA_IRQHandler+0x38e>
 80105e6:	4aa7      	ldr	r2, [pc, #668]	; (8010884 <HAL_DMA_IRQHandler+0x5dc>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d027      	beq.n	801063c <HAL_DMA_IRQHandler+0x394>
 80105ec:	4aa6      	ldr	r2, [pc, #664]	; (8010888 <HAL_DMA_IRQHandler+0x5e0>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d026      	beq.n	8010640 <HAL_DMA_IRQHandler+0x398>
 80105f2:	4aa6      	ldr	r2, [pc, #664]	; (801088c <HAL_DMA_IRQHandler+0x5e4>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d025      	beq.n	8010644 <HAL_DMA_IRQHandler+0x39c>
 80105f8:	4aa5      	ldr	r2, [pc, #660]	; (8010890 <HAL_DMA_IRQHandler+0x5e8>)
 80105fa:	4694      	mov	ip, r2
 80105fc:	4463      	add	r3, ip
 80105fe:	425a      	negs	r2, r3
 8010600:	4153      	adcs	r3, r2
 8010602:	425b      	negs	r3, r3
 8010604:	4aa3      	ldr	r2, [pc, #652]	; (8010894 <HAL_DMA_IRQHandler+0x5ec>)
 8010606:	4013      	ands	r3, r2
 8010608:	2280      	movs	r2, #128	; 0x80
 801060a:	0312      	lsls	r2, r2, #12
 801060c:	4694      	mov	ip, r2
 801060e:	4463      	add	r3, ip
 8010610:	e000      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 8010612:	2308      	movs	r3, #8
 8010614:	4aa0      	ldr	r2, [pc, #640]	; (8010898 <HAL_DMA_IRQHandler+0x5f0>)
 8010616:	6053      	str	r3, [r2, #4]
 8010618:	e74f      	b.n	80104ba <HAL_DMA_IRQHandler+0x212>
 801061a:	2380      	movs	r3, #128	; 0x80
 801061c:	e7fa      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 801061e:	2380      	movs	r3, #128	; 0x80
 8010620:	011b      	lsls	r3, r3, #4
 8010622:	e7f7      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 8010624:	2380      	movs	r3, #128	; 0x80
 8010626:	021b      	lsls	r3, r3, #8
 8010628:	e7f4      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 801062a:	2380      	movs	r3, #128	; 0x80
 801062c:	031b      	lsls	r3, r3, #12
 801062e:	e7f1      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 8010630:	2380      	movs	r3, #128	; 0x80
 8010632:	041b      	lsls	r3, r3, #16
 8010634:	e7ee      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 8010636:	2380      	movs	r3, #128	; 0x80
 8010638:	051b      	lsls	r3, r3, #20
 801063a:	e7eb      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 801063c:	2308      	movs	r3, #8
 801063e:	e7e9      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 8010640:	2380      	movs	r3, #128	; 0x80
 8010642:	e7e7      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
 8010644:	2380      	movs	r3, #128	; 0x80
 8010646:	011b      	lsls	r3, r3, #4
 8010648:	e7e4      	b.n	8010614 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801064a:	2204      	movs	r2, #4
 801064c:	420a      	tst	r2, r1
 801064e:	d152      	bne.n	80106f6 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010650:	6821      	ldr	r1, [r4, #0]
 8010652:	4b92      	ldr	r3, [pc, #584]	; (801089c <HAL_DMA_IRQHandler+0x5f4>)
 8010654:	6818      	ldr	r0, [r3, #0]
 8010656:	4a84      	ldr	r2, [pc, #528]	; (8010868 <HAL_DMA_IRQHandler+0x5c0>)
 8010658:	4291      	cmp	r1, r2
 801065a:	d100      	bne.n	801065e <HAL_DMA_IRQHandler+0x3b6>
 801065c:	e16b      	b.n	8010936 <HAL_DMA_IRQHandler+0x68e>
 801065e:	4a83      	ldr	r2, [pc, #524]	; (801086c <HAL_DMA_IRQHandler+0x5c4>)
 8010660:	4291      	cmp	r1, r2
 8010662:	d100      	bne.n	8010666 <HAL_DMA_IRQHandler+0x3be>
 8010664:	e1aa      	b.n	80109bc <HAL_DMA_IRQHandler+0x714>
 8010666:	4a82      	ldr	r2, [pc, #520]	; (8010870 <HAL_DMA_IRQHandler+0x5c8>)
 8010668:	4291      	cmp	r1, r2
 801066a:	d100      	bne.n	801066e <HAL_DMA_IRQHandler+0x3c6>
 801066c:	e1a8      	b.n	80109c0 <HAL_DMA_IRQHandler+0x718>
 801066e:	4a81      	ldr	r2, [pc, #516]	; (8010874 <HAL_DMA_IRQHandler+0x5cc>)
 8010670:	4291      	cmp	r1, r2
 8010672:	d100      	bne.n	8010676 <HAL_DMA_IRQHandler+0x3ce>
 8010674:	e1a7      	b.n	80109c6 <HAL_DMA_IRQHandler+0x71e>
 8010676:	4b80      	ldr	r3, [pc, #512]	; (8010878 <HAL_DMA_IRQHandler+0x5d0>)
 8010678:	4299      	cmp	r1, r3
 801067a:	d100      	bne.n	801067e <HAL_DMA_IRQHandler+0x3d6>
 801067c:	e1a6      	b.n	80109cc <HAL_DMA_IRQHandler+0x724>
 801067e:	4b7f      	ldr	r3, [pc, #508]	; (801087c <HAL_DMA_IRQHandler+0x5d4>)
 8010680:	4299      	cmp	r1, r3
 8010682:	d100      	bne.n	8010686 <HAL_DMA_IRQHandler+0x3de>
 8010684:	e1a5      	b.n	80109d2 <HAL_DMA_IRQHandler+0x72a>
 8010686:	4b7e      	ldr	r3, [pc, #504]	; (8010880 <HAL_DMA_IRQHandler+0x5d8>)
 8010688:	4299      	cmp	r1, r3
 801068a:	d100      	bne.n	801068e <HAL_DMA_IRQHandler+0x3e6>
 801068c:	e1a4      	b.n	80109d8 <HAL_DMA_IRQHandler+0x730>
 801068e:	4b7d      	ldr	r3, [pc, #500]	; (8010884 <HAL_DMA_IRQHandler+0x5dc>)
 8010690:	4299      	cmp	r1, r3
 8010692:	d100      	bne.n	8010696 <HAL_DMA_IRQHandler+0x3ee>
 8010694:	e1a3      	b.n	80109de <HAL_DMA_IRQHandler+0x736>
 8010696:	4b7c      	ldr	r3, [pc, #496]	; (8010888 <HAL_DMA_IRQHandler+0x5e0>)
 8010698:	4299      	cmp	r1, r3
 801069a:	d100      	bne.n	801069e <HAL_DMA_IRQHandler+0x3f6>
 801069c:	e1a1      	b.n	80109e2 <HAL_DMA_IRQHandler+0x73a>
 801069e:	4b7b      	ldr	r3, [pc, #492]	; (801088c <HAL_DMA_IRQHandler+0x5e4>)
 80106a0:	4299      	cmp	r1, r3
 80106a2:	d100      	bne.n	80106a6 <HAL_DMA_IRQHandler+0x3fe>
 80106a4:	e19f      	b.n	80109e6 <HAL_DMA_IRQHandler+0x73e>
 80106a6:	4b7a      	ldr	r3, [pc, #488]	; (8010890 <HAL_DMA_IRQHandler+0x5e8>)
 80106a8:	18ca      	adds	r2, r1, r3
 80106aa:	4253      	negs	r3, r2
 80106ac:	415a      	adcs	r2, r3
 80106ae:	4252      	negs	r2, r2
 80106b0:	4b7b      	ldr	r3, [pc, #492]	; (80108a0 <HAL_DMA_IRQHandler+0x5f8>)
 80106b2:	4013      	ands	r3, r2
 80106b4:	2280      	movs	r2, #128	; 0x80
 80106b6:	0292      	lsls	r2, r2, #10
 80106b8:	4694      	mov	ip, r2
 80106ba:	4463      	add	r3, ip
 80106bc:	e13c      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106be:	2240      	movs	r2, #64	; 0x40
 80106c0:	e7c4      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106c2:	2280      	movs	r2, #128	; 0x80
 80106c4:	00d2      	lsls	r2, r2, #3
 80106c6:	e7c1      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106c8:	2280      	movs	r2, #128	; 0x80
 80106ca:	01d2      	lsls	r2, r2, #7
 80106cc:	e7be      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106ce:	2280      	movs	r2, #128	; 0x80
 80106d0:	02d2      	lsls	r2, r2, #11
 80106d2:	e7bb      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106d4:	2280      	movs	r2, #128	; 0x80
 80106d6:	03d2      	lsls	r2, r2, #15
 80106d8:	e7b8      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106da:	2280      	movs	r2, #128	; 0x80
 80106dc:	04d2      	lsls	r2, r2, #19
 80106de:	e7b5      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106e0:	2204      	movs	r2, #4
 80106e2:	e7b3      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106e4:	2240      	movs	r2, #64	; 0x40
 80106e6:	e7b1      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106e8:	2280      	movs	r2, #128	; 0x80
 80106ea:	00d2      	lsls	r2, r2, #3
 80106ec:	e7ae      	b.n	801064c <HAL_DMA_IRQHandler+0x3a4>
 80106ee:	2204      	movs	r2, #4
 80106f0:	420a      	tst	r2, r1
 80106f2:	d100      	bne.n	80106f6 <HAL_DMA_IRQHandler+0x44e>
 80106f4:	e208      	b.n	8010b08 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	0752      	lsls	r2, r2, #29
 80106fa:	d561      	bpl.n	80107c0 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	0692      	lsls	r2, r2, #26
 8010700:	d403      	bmi.n	801070a <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	2104      	movs	r1, #4
 8010706:	438a      	bics	r2, r1
 8010708:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801070a:	6823      	ldr	r3, [r4, #0]
 801070c:	4a5c      	ldr	r2, [pc, #368]	; (8010880 <HAL_DMA_IRQHandler+0x5d8>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d800      	bhi.n	8010714 <HAL_DMA_IRQHandler+0x46c>
 8010712:	e0c9      	b.n	80108a8 <HAL_DMA_IRQHandler+0x600>
 8010714:	4a54      	ldr	r2, [pc, #336]	; (8010868 <HAL_DMA_IRQHandler+0x5c0>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d047      	beq.n	80107aa <HAL_DMA_IRQHandler+0x502>
 801071a:	4a54      	ldr	r2, [pc, #336]	; (801086c <HAL_DMA_IRQHandler+0x5c4>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d100      	bne.n	8010722 <HAL_DMA_IRQHandler+0x47a>
 8010720:	e089      	b.n	8010836 <HAL_DMA_IRQHandler+0x58e>
 8010722:	4a53      	ldr	r2, [pc, #332]	; (8010870 <HAL_DMA_IRQHandler+0x5c8>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d100      	bne.n	801072a <HAL_DMA_IRQHandler+0x482>
 8010728:	e087      	b.n	801083a <HAL_DMA_IRQHandler+0x592>
 801072a:	4a52      	ldr	r2, [pc, #328]	; (8010874 <HAL_DMA_IRQHandler+0x5cc>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d100      	bne.n	8010732 <HAL_DMA_IRQHandler+0x48a>
 8010730:	e086      	b.n	8010840 <HAL_DMA_IRQHandler+0x598>
 8010732:	4a51      	ldr	r2, [pc, #324]	; (8010878 <HAL_DMA_IRQHandler+0x5d0>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d100      	bne.n	801073a <HAL_DMA_IRQHandler+0x492>
 8010738:	e085      	b.n	8010846 <HAL_DMA_IRQHandler+0x59e>
 801073a:	4a50      	ldr	r2, [pc, #320]	; (801087c <HAL_DMA_IRQHandler+0x5d4>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d100      	bne.n	8010742 <HAL_DMA_IRQHandler+0x49a>
 8010740:	e084      	b.n	801084c <HAL_DMA_IRQHandler+0x5a4>
 8010742:	4a4f      	ldr	r2, [pc, #316]	; (8010880 <HAL_DMA_IRQHandler+0x5d8>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d100      	bne.n	801074a <HAL_DMA_IRQHandler+0x4a2>
 8010748:	e083      	b.n	8010852 <HAL_DMA_IRQHandler+0x5aa>
 801074a:	4a4e      	ldr	r2, [pc, #312]	; (8010884 <HAL_DMA_IRQHandler+0x5dc>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d100      	bne.n	8010752 <HAL_DMA_IRQHandler+0x4aa>
 8010750:	e082      	b.n	8010858 <HAL_DMA_IRQHandler+0x5b0>
 8010752:	4a4d      	ldr	r2, [pc, #308]	; (8010888 <HAL_DMA_IRQHandler+0x5e0>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d100      	bne.n	801075a <HAL_DMA_IRQHandler+0x4b2>
 8010758:	e080      	b.n	801085c <HAL_DMA_IRQHandler+0x5b4>
 801075a:	4a4c      	ldr	r2, [pc, #304]	; (801088c <HAL_DMA_IRQHandler+0x5e4>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d07f      	beq.n	8010860 <HAL_DMA_IRQHandler+0x5b8>
 8010760:	4a4b      	ldr	r2, [pc, #300]	; (8010890 <HAL_DMA_IRQHandler+0x5e8>)
 8010762:	4694      	mov	ip, r2
 8010764:	4463      	add	r3, ip
 8010766:	425a      	negs	r2, r3
 8010768:	4153      	adcs	r3, r2
 801076a:	425b      	negs	r3, r3
 801076c:	4a4d      	ldr	r2, [pc, #308]	; (80108a4 <HAL_DMA_IRQHandler+0x5fc>)
 801076e:	4013      	ands	r3, r2
 8010770:	2280      	movs	r2, #128	; 0x80
 8010772:	02d2      	lsls	r2, r2, #11
 8010774:	4694      	mov	ip, r2
 8010776:	4463      	add	r3, ip
 8010778:	e018      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801077a:	2240      	movs	r2, #64	; 0x40
 801077c:	e7b8      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 801077e:	2280      	movs	r2, #128	; 0x80
 8010780:	00d2      	lsls	r2, r2, #3
 8010782:	e7b5      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 8010784:	2280      	movs	r2, #128	; 0x80
 8010786:	01d2      	lsls	r2, r2, #7
 8010788:	e7b2      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 801078a:	2280      	movs	r2, #128	; 0x80
 801078c:	02d2      	lsls	r2, r2, #11
 801078e:	e7af      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 8010790:	2280      	movs	r2, #128	; 0x80
 8010792:	03d2      	lsls	r2, r2, #15
 8010794:	e7ac      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 8010796:	2280      	movs	r2, #128	; 0x80
 8010798:	04d2      	lsls	r2, r2, #19
 801079a:	e7a9      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 801079c:	2204      	movs	r2, #4
 801079e:	e7a7      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 80107a0:	2240      	movs	r2, #64	; 0x40
 80107a2:	e7a5      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
 80107a4:	2280      	movs	r2, #128	; 0x80
 80107a6:	00d2      	lsls	r2, r2, #3
 80107a8:	e7a2      	b.n	80106f0 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107aa:	2304      	movs	r3, #4
 80107ac:	4a3b      	ldr	r2, [pc, #236]	; (801089c <HAL_DMA_IRQHandler+0x5f4>)
 80107ae:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80107b0:	2321      	movs	r3, #33	; 0x21
 80107b2:	2211      	movs	r2, #17
 80107b4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80107b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d001      	beq.n	80107c0 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 80107bc:	0020      	movs	r0, r4
 80107be:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80107c0:	6821      	ldr	r1, [r4, #0]
 80107c2:	4b2f      	ldr	r3, [pc, #188]	; (8010880 <HAL_DMA_IRQHandler+0x5d8>)
 80107c4:	4299      	cmp	r1, r3
 80107c6:	d900      	bls.n	80107ca <HAL_DMA_IRQHandler+0x522>
 80107c8:	e743      	b.n	8010652 <HAL_DMA_IRQHandler+0x3aa>
 80107ca:	4b33      	ldr	r3, [pc, #204]	; (8010898 <HAL_DMA_IRQHandler+0x5f0>)
 80107cc:	6818      	ldr	r0, [r3, #0]
 80107ce:	4a26      	ldr	r2, [pc, #152]	; (8010868 <HAL_DMA_IRQHandler+0x5c0>)
 80107d0:	4291      	cmp	r1, r2
 80107d2:	d100      	bne.n	80107d6 <HAL_DMA_IRQHandler+0x52e>
 80107d4:	e10a      	b.n	80109ec <HAL_DMA_IRQHandler+0x744>
 80107d6:	4a25      	ldr	r2, [pc, #148]	; (801086c <HAL_DMA_IRQHandler+0x5c4>)
 80107d8:	4291      	cmp	r1, r2
 80107da:	d100      	bne.n	80107de <HAL_DMA_IRQHandler+0x536>
 80107dc:	e10c      	b.n	80109f8 <HAL_DMA_IRQHandler+0x750>
 80107de:	4a24      	ldr	r2, [pc, #144]	; (8010870 <HAL_DMA_IRQHandler+0x5c8>)
 80107e0:	4291      	cmp	r1, r2
 80107e2:	d100      	bne.n	80107e6 <HAL_DMA_IRQHandler+0x53e>
 80107e4:	e10a      	b.n	80109fc <HAL_DMA_IRQHandler+0x754>
 80107e6:	4a23      	ldr	r2, [pc, #140]	; (8010874 <HAL_DMA_IRQHandler+0x5cc>)
 80107e8:	4291      	cmp	r1, r2
 80107ea:	d100      	bne.n	80107ee <HAL_DMA_IRQHandler+0x546>
 80107ec:	e109      	b.n	8010a02 <HAL_DMA_IRQHandler+0x75a>
 80107ee:	4b22      	ldr	r3, [pc, #136]	; (8010878 <HAL_DMA_IRQHandler+0x5d0>)
 80107f0:	4299      	cmp	r1, r3
 80107f2:	d100      	bne.n	80107f6 <HAL_DMA_IRQHandler+0x54e>
 80107f4:	e108      	b.n	8010a08 <HAL_DMA_IRQHandler+0x760>
 80107f6:	4b21      	ldr	r3, [pc, #132]	; (801087c <HAL_DMA_IRQHandler+0x5d4>)
 80107f8:	4299      	cmp	r1, r3
 80107fa:	d100      	bne.n	80107fe <HAL_DMA_IRQHandler+0x556>
 80107fc:	e107      	b.n	8010a0e <HAL_DMA_IRQHandler+0x766>
 80107fe:	4b20      	ldr	r3, [pc, #128]	; (8010880 <HAL_DMA_IRQHandler+0x5d8>)
 8010800:	4299      	cmp	r1, r3
 8010802:	d100      	bne.n	8010806 <HAL_DMA_IRQHandler+0x55e>
 8010804:	e106      	b.n	8010a14 <HAL_DMA_IRQHandler+0x76c>
 8010806:	4b1f      	ldr	r3, [pc, #124]	; (8010884 <HAL_DMA_IRQHandler+0x5dc>)
 8010808:	4299      	cmp	r1, r3
 801080a:	d100      	bne.n	801080e <HAL_DMA_IRQHandler+0x566>
 801080c:	e105      	b.n	8010a1a <HAL_DMA_IRQHandler+0x772>
 801080e:	4b1e      	ldr	r3, [pc, #120]	; (8010888 <HAL_DMA_IRQHandler+0x5e0>)
 8010810:	4299      	cmp	r1, r3
 8010812:	d100      	bne.n	8010816 <HAL_DMA_IRQHandler+0x56e>
 8010814:	e103      	b.n	8010a1e <HAL_DMA_IRQHandler+0x776>
 8010816:	4b1d      	ldr	r3, [pc, #116]	; (801088c <HAL_DMA_IRQHandler+0x5e4>)
 8010818:	4299      	cmp	r1, r3
 801081a:	d100      	bne.n	801081e <HAL_DMA_IRQHandler+0x576>
 801081c:	e101      	b.n	8010a22 <HAL_DMA_IRQHandler+0x77a>
 801081e:	4b1c      	ldr	r3, [pc, #112]	; (8010890 <HAL_DMA_IRQHandler+0x5e8>)
 8010820:	18ca      	adds	r2, r1, r3
 8010822:	4253      	negs	r3, r2
 8010824:	415a      	adcs	r2, r3
 8010826:	4252      	negs	r2, r2
 8010828:	4b1d      	ldr	r3, [pc, #116]	; (80108a0 <HAL_DMA_IRQHandler+0x5f8>)
 801082a:	4013      	ands	r3, r2
 801082c:	2280      	movs	r2, #128	; 0x80
 801082e:	0292      	lsls	r2, r2, #10
 8010830:	4694      	mov	ip, r2
 8010832:	4463      	add	r3, ip
 8010834:	e0db      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010836:	2340      	movs	r3, #64	; 0x40
 8010838:	e7b8      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 801083a:	2380      	movs	r3, #128	; 0x80
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	e7b5      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 8010840:	2380      	movs	r3, #128	; 0x80
 8010842:	01db      	lsls	r3, r3, #7
 8010844:	e7b2      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 8010846:	2380      	movs	r3, #128	; 0x80
 8010848:	02db      	lsls	r3, r3, #11
 801084a:	e7af      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 801084c:	2380      	movs	r3, #128	; 0x80
 801084e:	03db      	lsls	r3, r3, #15
 8010850:	e7ac      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 8010852:	2380      	movs	r3, #128	; 0x80
 8010854:	04db      	lsls	r3, r3, #19
 8010856:	e7a9      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 8010858:	2304      	movs	r3, #4
 801085a:	e7a7      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 801085c:	2340      	movs	r3, #64	; 0x40
 801085e:	e7a5      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 8010860:	2380      	movs	r3, #128	; 0x80
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	e7a2      	b.n	80107ac <HAL_DMA_IRQHandler+0x504>
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	40020008 	.word	0x40020008
 801086c:	4002001c 	.word	0x4002001c
 8010870:	40020030 	.word	0x40020030
 8010874:	40020044 	.word	0x40020044
 8010878:	40020058 	.word	0x40020058
 801087c:	4002006c 	.word	0x4002006c
 8010880:	40020080 	.word	0x40020080
 8010884:	40020408 	.word	0x40020408
 8010888:	4002041c 	.word	0x4002041c
 801088c:	40020430 	.word	0x40020430
 8010890:	bffdfbbc 	.word	0xbffdfbbc
 8010894:	fff88000 	.word	0xfff88000
 8010898:	40020000 	.word	0x40020000
 801089c:	40020400 	.word	0x40020400
 80108a0:	fffe2000 	.word	0xfffe2000
 80108a4:	fffc4000 	.word	0xfffc4000
 80108a8:	4a9b      	ldr	r2, [pc, #620]	; (8010b18 <HAL_DMA_IRQHandler+0x870>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d027      	beq.n	80108fe <HAL_DMA_IRQHandler+0x656>
 80108ae:	4a9b      	ldr	r2, [pc, #620]	; (8010b1c <HAL_DMA_IRQHandler+0x874>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d028      	beq.n	8010906 <HAL_DMA_IRQHandler+0x65e>
 80108b4:	4a9a      	ldr	r2, [pc, #616]	; (8010b20 <HAL_DMA_IRQHandler+0x878>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d027      	beq.n	801090a <HAL_DMA_IRQHandler+0x662>
 80108ba:	4a9a      	ldr	r2, [pc, #616]	; (8010b24 <HAL_DMA_IRQHandler+0x87c>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d027      	beq.n	8010910 <HAL_DMA_IRQHandler+0x668>
 80108c0:	4a99      	ldr	r2, [pc, #612]	; (8010b28 <HAL_DMA_IRQHandler+0x880>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d027      	beq.n	8010916 <HAL_DMA_IRQHandler+0x66e>
 80108c6:	4a99      	ldr	r2, [pc, #612]	; (8010b2c <HAL_DMA_IRQHandler+0x884>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d027      	beq.n	801091c <HAL_DMA_IRQHandler+0x674>
 80108cc:	4a98      	ldr	r2, [pc, #608]	; (8010b30 <HAL_DMA_IRQHandler+0x888>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d027      	beq.n	8010922 <HAL_DMA_IRQHandler+0x67a>
 80108d2:	4a98      	ldr	r2, [pc, #608]	; (8010b34 <HAL_DMA_IRQHandler+0x88c>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d027      	beq.n	8010928 <HAL_DMA_IRQHandler+0x680>
 80108d8:	4a97      	ldr	r2, [pc, #604]	; (8010b38 <HAL_DMA_IRQHandler+0x890>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d026      	beq.n	801092c <HAL_DMA_IRQHandler+0x684>
 80108de:	4a97      	ldr	r2, [pc, #604]	; (8010b3c <HAL_DMA_IRQHandler+0x894>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d025      	beq.n	8010930 <HAL_DMA_IRQHandler+0x688>
 80108e4:	4a96      	ldr	r2, [pc, #600]	; (8010b40 <HAL_DMA_IRQHandler+0x898>)
 80108e6:	4694      	mov	ip, r2
 80108e8:	4463      	add	r3, ip
 80108ea:	425a      	negs	r2, r3
 80108ec:	4153      	adcs	r3, r2
 80108ee:	425b      	negs	r3, r3
 80108f0:	4a94      	ldr	r2, [pc, #592]	; (8010b44 <HAL_DMA_IRQHandler+0x89c>)
 80108f2:	4013      	ands	r3, r2
 80108f4:	2280      	movs	r2, #128	; 0x80
 80108f6:	02d2      	lsls	r2, r2, #11
 80108f8:	4694      	mov	ip, r2
 80108fa:	4463      	add	r3, ip
 80108fc:	e000      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 80108fe:	2304      	movs	r3, #4
 8010900:	4a91      	ldr	r2, [pc, #580]	; (8010b48 <HAL_DMA_IRQHandler+0x8a0>)
 8010902:	6053      	str	r3, [r2, #4]
 8010904:	e754      	b.n	80107b0 <HAL_DMA_IRQHandler+0x508>
 8010906:	2340      	movs	r3, #64	; 0x40
 8010908:	e7fa      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 801090a:	2380      	movs	r3, #128	; 0x80
 801090c:	00db      	lsls	r3, r3, #3
 801090e:	e7f7      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 8010910:	2380      	movs	r3, #128	; 0x80
 8010912:	01db      	lsls	r3, r3, #7
 8010914:	e7f4      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 8010916:	2380      	movs	r3, #128	; 0x80
 8010918:	02db      	lsls	r3, r3, #11
 801091a:	e7f1      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 801091c:	2380      	movs	r3, #128	; 0x80
 801091e:	03db      	lsls	r3, r3, #15
 8010920:	e7ee      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 8010922:	2380      	movs	r3, #128	; 0x80
 8010924:	04db      	lsls	r3, r3, #19
 8010926:	e7eb      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 8010928:	2304      	movs	r3, #4
 801092a:	e7e9      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 801092c:	2340      	movs	r3, #64	; 0x40
 801092e:	e7e7      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
 8010930:	2380      	movs	r3, #128	; 0x80
 8010932:	00db      	lsls	r3, r3, #3
 8010934:	e7e4      	b.n	8010900 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010936:	2302      	movs	r3, #2
 8010938:	4003      	ands	r3, r0
 801093a:	1e5a      	subs	r2, r3, #1
 801093c:	4193      	sbcs	r3, r2
 801093e:	b2db      	uxtb	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d100      	bne.n	8010946 <HAL_DMA_IRQHandler+0x69e>
 8010944:	e080      	b.n	8010a48 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010946:	680b      	ldr	r3, [r1, #0]
 8010948:	079b      	lsls	r3, r3, #30
 801094a:	d57d      	bpl.n	8010a48 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801094c:	680b      	ldr	r3, [r1, #0]
 801094e:	069b      	lsls	r3, r3, #26
 8010950:	d403      	bmi.n	801095a <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010952:	680b      	ldr	r3, [r1, #0]
 8010954:	2202      	movs	r2, #2
 8010956:	4393      	bics	r3, r2
 8010958:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	4a74      	ldr	r2, [pc, #464]	; (8010b30 <HAL_DMA_IRQHandler+0x888>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d800      	bhi.n	8010964 <HAL_DMA_IRQHandler+0x6bc>
 8010962:	e08a      	b.n	8010a7a <HAL_DMA_IRQHandler+0x7d2>
 8010964:	4a6c      	ldr	r2, [pc, #432]	; (8010b18 <HAL_DMA_IRQHandler+0x870>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d05e      	beq.n	8010a28 <HAL_DMA_IRQHandler+0x780>
 801096a:	4a6c      	ldr	r2, [pc, #432]	; (8010b1c <HAL_DMA_IRQHandler+0x874>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d100      	bne.n	8010972 <HAL_DMA_IRQHandler+0x6ca>
 8010970:	e06b      	b.n	8010a4a <HAL_DMA_IRQHandler+0x7a2>
 8010972:	4a6b      	ldr	r2, [pc, #428]	; (8010b20 <HAL_DMA_IRQHandler+0x878>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d06a      	beq.n	8010a4e <HAL_DMA_IRQHandler+0x7a6>
 8010978:	4a6a      	ldr	r2, [pc, #424]	; (8010b24 <HAL_DMA_IRQHandler+0x87c>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d06a      	beq.n	8010a54 <HAL_DMA_IRQHandler+0x7ac>
 801097e:	4a6a      	ldr	r2, [pc, #424]	; (8010b28 <HAL_DMA_IRQHandler+0x880>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d06a      	beq.n	8010a5a <HAL_DMA_IRQHandler+0x7b2>
 8010984:	4a69      	ldr	r2, [pc, #420]	; (8010b2c <HAL_DMA_IRQHandler+0x884>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d06a      	beq.n	8010a60 <HAL_DMA_IRQHandler+0x7b8>
 801098a:	4a69      	ldr	r2, [pc, #420]	; (8010b30 <HAL_DMA_IRQHandler+0x888>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d06a      	beq.n	8010a66 <HAL_DMA_IRQHandler+0x7be>
 8010990:	4a68      	ldr	r2, [pc, #416]	; (8010b34 <HAL_DMA_IRQHandler+0x88c>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d06a      	beq.n	8010a6c <HAL_DMA_IRQHandler+0x7c4>
 8010996:	4a68      	ldr	r2, [pc, #416]	; (8010b38 <HAL_DMA_IRQHandler+0x890>)
 8010998:	4293      	cmp	r3, r2
 801099a:	d069      	beq.n	8010a70 <HAL_DMA_IRQHandler+0x7c8>
 801099c:	4a67      	ldr	r2, [pc, #412]	; (8010b3c <HAL_DMA_IRQHandler+0x894>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d068      	beq.n	8010a74 <HAL_DMA_IRQHandler+0x7cc>
 80109a2:	4a67      	ldr	r2, [pc, #412]	; (8010b40 <HAL_DMA_IRQHandler+0x898>)
 80109a4:	4694      	mov	ip, r2
 80109a6:	4463      	add	r3, ip
 80109a8:	425a      	negs	r2, r3
 80109aa:	4153      	adcs	r3, r2
 80109ac:	425b      	negs	r3, r3
 80109ae:	4a67      	ldr	r2, [pc, #412]	; (8010b4c <HAL_DMA_IRQHandler+0x8a4>)
 80109b0:	4013      	ands	r3, r2
 80109b2:	2280      	movs	r2, #128	; 0x80
 80109b4:	0292      	lsls	r2, r2, #10
 80109b6:	4694      	mov	ip, r2
 80109b8:	4463      	add	r3, ip
 80109ba:	e036      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80109bc:	2320      	movs	r3, #32
 80109be:	e7bb      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109c0:	2380      	movs	r3, #128	; 0x80
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	e7b8      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109c6:	2380      	movs	r3, #128	; 0x80
 80109c8:	019b      	lsls	r3, r3, #6
 80109ca:	e7b5      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109cc:	2380      	movs	r3, #128	; 0x80
 80109ce:	029b      	lsls	r3, r3, #10
 80109d0:	e7b2      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109d2:	2380      	movs	r3, #128	; 0x80
 80109d4:	039b      	lsls	r3, r3, #14
 80109d6:	e7af      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109d8:	2380      	movs	r3, #128	; 0x80
 80109da:	049b      	lsls	r3, r3, #18
 80109dc:	e7ac      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109de:	2302      	movs	r3, #2
 80109e0:	e7aa      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109e2:	2320      	movs	r3, #32
 80109e4:	e7a8      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109e6:	2380      	movs	r3, #128	; 0x80
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	e7a5      	b.n	8010938 <HAL_DMA_IRQHandler+0x690>
 80109ec:	2302      	movs	r3, #2
 80109ee:	4003      	ands	r3, r0
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	4193      	sbcs	r3, r2
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	e7a3      	b.n	8010940 <HAL_DMA_IRQHandler+0x698>
 80109f8:	2320      	movs	r3, #32
 80109fa:	e7f8      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 80109fc:	2380      	movs	r3, #128	; 0x80
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	e7f5      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a02:	2380      	movs	r3, #128	; 0x80
 8010a04:	019b      	lsls	r3, r3, #6
 8010a06:	e7f2      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a08:	2380      	movs	r3, #128	; 0x80
 8010a0a:	029b      	lsls	r3, r3, #10
 8010a0c:	e7ef      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a0e:	2380      	movs	r3, #128	; 0x80
 8010a10:	039b      	lsls	r3, r3, #14
 8010a12:	e7ec      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a14:	2380      	movs	r3, #128	; 0x80
 8010a16:	049b      	lsls	r3, r3, #18
 8010a18:	e7e9      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e7e7      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a1e:	2320      	movs	r3, #32
 8010a20:	e7e5      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
 8010a22:	2380      	movs	r3, #128	; 0x80
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	e7e2      	b.n	80109ee <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a28:	2302      	movs	r3, #2
 8010a2a:	4a49      	ldr	r2, [pc, #292]	; (8010b50 <HAL_DMA_IRQHandler+0x8a8>)
 8010a2c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a30:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010a32:	2321      	movs	r3, #33	; 0x21
 8010a34:	2201      	movs	r2, #1
 8010a36:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010a38:	3b01      	subs	r3, #1
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8010a44:	0020      	movs	r0, r4
 8010a46:	4798      	blx	r3
}  
 8010a48:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a4a:	2320      	movs	r3, #32
 8010a4c:	e7ed      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a4e:	2380      	movs	r3, #128	; 0x80
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	e7ea      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a54:	2380      	movs	r3, #128	; 0x80
 8010a56:	019b      	lsls	r3, r3, #6
 8010a58:	e7e7      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a5a:	2380      	movs	r3, #128	; 0x80
 8010a5c:	029b      	lsls	r3, r3, #10
 8010a5e:	e7e4      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a60:	2380      	movs	r3, #128	; 0x80
 8010a62:	039b      	lsls	r3, r3, #14
 8010a64:	e7e1      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a66:	2380      	movs	r3, #128	; 0x80
 8010a68:	049b      	lsls	r3, r3, #18
 8010a6a:	e7de      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a6c:	2302      	movs	r3, #2
 8010a6e:	e7dc      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a70:	2320      	movs	r3, #32
 8010a72:	e7da      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a74:	2380      	movs	r3, #128	; 0x80
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	e7d7      	b.n	8010a2a <HAL_DMA_IRQHandler+0x782>
 8010a7a:	4a27      	ldr	r2, [pc, #156]	; (8010b18 <HAL_DMA_IRQHandler+0x870>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d027      	beq.n	8010ad0 <HAL_DMA_IRQHandler+0x828>
 8010a80:	4a26      	ldr	r2, [pc, #152]	; (8010b1c <HAL_DMA_IRQHandler+0x874>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d028      	beq.n	8010ad8 <HAL_DMA_IRQHandler+0x830>
 8010a86:	4a26      	ldr	r2, [pc, #152]	; (8010b20 <HAL_DMA_IRQHandler+0x878>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d027      	beq.n	8010adc <HAL_DMA_IRQHandler+0x834>
 8010a8c:	4a25      	ldr	r2, [pc, #148]	; (8010b24 <HAL_DMA_IRQHandler+0x87c>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d027      	beq.n	8010ae2 <HAL_DMA_IRQHandler+0x83a>
 8010a92:	4a25      	ldr	r2, [pc, #148]	; (8010b28 <HAL_DMA_IRQHandler+0x880>)
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d027      	beq.n	8010ae8 <HAL_DMA_IRQHandler+0x840>
 8010a98:	4a24      	ldr	r2, [pc, #144]	; (8010b2c <HAL_DMA_IRQHandler+0x884>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d027      	beq.n	8010aee <HAL_DMA_IRQHandler+0x846>
 8010a9e:	4a24      	ldr	r2, [pc, #144]	; (8010b30 <HAL_DMA_IRQHandler+0x888>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d027      	beq.n	8010af4 <HAL_DMA_IRQHandler+0x84c>
 8010aa4:	4a23      	ldr	r2, [pc, #140]	; (8010b34 <HAL_DMA_IRQHandler+0x88c>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d027      	beq.n	8010afa <HAL_DMA_IRQHandler+0x852>
 8010aaa:	4a23      	ldr	r2, [pc, #140]	; (8010b38 <HAL_DMA_IRQHandler+0x890>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d026      	beq.n	8010afe <HAL_DMA_IRQHandler+0x856>
 8010ab0:	4a22      	ldr	r2, [pc, #136]	; (8010b3c <HAL_DMA_IRQHandler+0x894>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d025      	beq.n	8010b02 <HAL_DMA_IRQHandler+0x85a>
 8010ab6:	4a22      	ldr	r2, [pc, #136]	; (8010b40 <HAL_DMA_IRQHandler+0x898>)
 8010ab8:	4694      	mov	ip, r2
 8010aba:	4463      	add	r3, ip
 8010abc:	425a      	negs	r2, r3
 8010abe:	4153      	adcs	r3, r2
 8010ac0:	425b      	negs	r3, r3
 8010ac2:	4a22      	ldr	r2, [pc, #136]	; (8010b4c <HAL_DMA_IRQHandler+0x8a4>)
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	2280      	movs	r2, #128	; 0x80
 8010ac8:	0292      	lsls	r2, r2, #10
 8010aca:	4694      	mov	ip, r2
 8010acc:	4463      	add	r3, ip
 8010ace:	e000      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	4a1d      	ldr	r2, [pc, #116]	; (8010b48 <HAL_DMA_IRQHandler+0x8a0>)
 8010ad4:	6053      	str	r3, [r2, #4]
 8010ad6:	e7aa      	b.n	8010a2e <HAL_DMA_IRQHandler+0x786>
 8010ad8:	2320      	movs	r3, #32
 8010ada:	e7fa      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010adc:	2380      	movs	r3, #128	; 0x80
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	e7f7      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010ae2:	2380      	movs	r3, #128	; 0x80
 8010ae4:	019b      	lsls	r3, r3, #6
 8010ae6:	e7f4      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010ae8:	2380      	movs	r3, #128	; 0x80
 8010aea:	029b      	lsls	r3, r3, #10
 8010aec:	e7f1      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010aee:	2380      	movs	r3, #128	; 0x80
 8010af0:	039b      	lsls	r3, r3, #14
 8010af2:	e7ee      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010af4:	2380      	movs	r3, #128	; 0x80
 8010af6:	049b      	lsls	r3, r3, #18
 8010af8:	e7eb      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010afa:	2302      	movs	r3, #2
 8010afc:	e7e9      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010afe:	2320      	movs	r3, #32
 8010b00:	e7e7      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
 8010b02:	2380      	movs	r3, #128	; 0x80
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	e7e4      	b.n	8010ad2 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010b08:	6821      	ldr	r1, [r4, #0]
 8010b0a:	e65e      	b.n	80107ca <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	0712      	lsls	r2, r2, #28
 8010b10:	d500      	bpl.n	8010b14 <HAL_DMA_IRQHandler+0x86c>
 8010b12:	e49b      	b.n	801044c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b14:	6823      	ldr	r3, [r4, #0]
 8010b16:	e44b      	b.n	80103b0 <HAL_DMA_IRQHandler+0x108>
 8010b18:	40020008 	.word	0x40020008
 8010b1c:	4002001c 	.word	0x4002001c
 8010b20:	40020030 	.word	0x40020030
 8010b24:	40020044 	.word	0x40020044
 8010b28:	40020058 	.word	0x40020058
 8010b2c:	4002006c 	.word	0x4002006c
 8010b30:	40020080 	.word	0x40020080
 8010b34:	40020408 	.word	0x40020408
 8010b38:	4002041c 	.word	0x4002041c
 8010b3c:	40020430 	.word	0x40020430
 8010b40:	bffdfbbc 	.word	0xbffdfbbc
 8010b44:	fffc4000 	.word	0xfffc4000
 8010b48:	40020000 	.word	0x40020000
 8010b4c:	fffe2000 	.word	0xfffe2000
 8010b50:	40020400 	.word	0x40020400

08010b54 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010b54:	4b0a      	ldr	r3, [pc, #40]	; (8010b80 <FLASH_SetErrorCode+0x2c>)
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	06db      	lsls	r3, r3, #27
 8010b5a:	d504      	bpl.n	8010b66 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010b5c:	4a09      	ldr	r2, [pc, #36]	; (8010b84 <FLASH_SetErrorCode+0x30>)
 8010b5e:	69d3      	ldr	r3, [r2, #28]
 8010b60:	2102      	movs	r1, #2
 8010b62:	430b      	orrs	r3, r1
 8010b64:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010b66:	4b06      	ldr	r3, [pc, #24]	; (8010b80 <FLASH_SetErrorCode+0x2c>)
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	075b      	lsls	r3, r3, #29
 8010b6c:	d504      	bpl.n	8010b78 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010b6e:	4a05      	ldr	r2, [pc, #20]	; (8010b84 <FLASH_SetErrorCode+0x30>)
 8010b70:	69d3      	ldr	r3, [r2, #28]
 8010b72:	2101      	movs	r1, #1
 8010b74:	430b      	orrs	r3, r1
 8010b76:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010b78:	4b01      	ldr	r3, [pc, #4]	; (8010b80 <FLASH_SetErrorCode+0x2c>)
 8010b7a:	2214      	movs	r2, #20
 8010b7c:	60da      	str	r2, [r3, #12]
}  
 8010b7e:	4770      	bx	lr
 8010b80:	40022000 	.word	0x40022000
 8010b84:	20006f10 	.word	0x20006f10

08010b88 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010b88:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <HAL_FLASH_Unlock+0x18>)
 8010b8a:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8010b8c:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010b8e:	061b      	lsls	r3, r3, #24
 8010b90:	d505      	bpl.n	8010b9e <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010b92:	4b03      	ldr	r3, [pc, #12]	; (8010ba0 <HAL_FLASH_Unlock+0x18>)
 8010b94:	4a03      	ldr	r2, [pc, #12]	; (8010ba4 <HAL_FLASH_Unlock+0x1c>)
 8010b96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010b98:	4a03      	ldr	r2, [pc, #12]	; (8010ba8 <HAL_FLASH_Unlock+0x20>)
 8010b9a:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010b9c:	2000      	movs	r0, #0
}
 8010b9e:	4770      	bx	lr
 8010ba0:	40022000 	.word	0x40022000
 8010ba4:	45670123 	.word	0x45670123
 8010ba8:	cdef89ab 	.word	0xcdef89ab

08010bac <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010bac:	4a03      	ldr	r2, [pc, #12]	; (8010bbc <HAL_FLASH_Lock+0x10>)
 8010bae:	6913      	ldr	r3, [r2, #16]
 8010bb0:	2180      	movs	r1, #128	; 0x80
 8010bb2:	430b      	orrs	r3, r1
 8010bb4:	6113      	str	r3, [r2, #16]
}
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	4770      	bx	lr
 8010bba:	46c0      	nop			; (mov r8, r8)
 8010bbc:	40022000 	.word	0x40022000

08010bc0 <FLASH_WaitForLastOperation>:
{
 8010bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010bc4:	f7fe fe18 	bl	800f7f8 <HAL_GetTick>
 8010bc8:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010bca:	4e13      	ldr	r6, [pc, #76]	; (8010c18 <FLASH_WaitForLastOperation+0x58>)
 8010bcc:	2501      	movs	r5, #1
 8010bce:	68f3      	ldr	r3, [r6, #12]
 8010bd0:	421d      	tst	r5, r3
 8010bd2:	d00a      	beq.n	8010bea <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010bd4:	1c63      	adds	r3, r4, #1
 8010bd6:	d0fa      	beq.n	8010bce <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010bd8:	2c00      	cmp	r4, #0
 8010bda:	d01a      	beq.n	8010c12 <FLASH_WaitForLastOperation+0x52>
 8010bdc:	f7fe fe0c 	bl	800f7f8 <HAL_GetTick>
 8010be0:	1bc0      	subs	r0, r0, r7
 8010be2:	42a0      	cmp	r0, r4
 8010be4:	d9f3      	bls.n	8010bce <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010be6:	2003      	movs	r0, #3
 8010be8:	e012      	b.n	8010c10 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010bea:	4b0b      	ldr	r3, [pc, #44]	; (8010c18 <FLASH_WaitForLastOperation+0x58>)
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	069b      	lsls	r3, r3, #26
 8010bf0:	d502      	bpl.n	8010bf8 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010bf2:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <FLASH_WaitForLastOperation+0x58>)
 8010bf4:	2220      	movs	r2, #32
 8010bf6:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010bf8:	4b07      	ldr	r3, [pc, #28]	; (8010c18 <FLASH_WaitForLastOperation+0x58>)
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	06db      	lsls	r3, r3, #27
 8010bfe:	d404      	bmi.n	8010c0a <FLASH_WaitForLastOperation+0x4a>
 8010c00:	4b05      	ldr	r3, [pc, #20]	; (8010c18 <FLASH_WaitForLastOperation+0x58>)
 8010c02:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010c04:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010c06:	075b      	lsls	r3, r3, #29
 8010c08:	d502      	bpl.n	8010c10 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8010c0a:	f7ff ffa3 	bl	8010b54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010c0e:	2001      	movs	r0, #1
}
 8010c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8010c12:	2003      	movs	r0, #3
 8010c14:	e7fc      	b.n	8010c10 <FLASH_WaitForLastOperation+0x50>
 8010c16:	46c0      	nop			; (mov r8, r8)
 8010c18:	40022000 	.word	0x40022000

08010c1c <HAL_FLASH_Program>:
{
 8010c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c1e:	46de      	mov	lr, fp
 8010c20:	4657      	mov	r7, sl
 8010c22:	464e      	mov	r6, r9
 8010c24:	4645      	mov	r5, r8
 8010c26:	b5e0      	push	{r5, r6, r7, lr}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	0004      	movs	r4, r0
 8010c2c:	000e      	movs	r6, r1
 8010c2e:	9201      	str	r2, [sp, #4]
 8010c30:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8010c32:	4b2a      	ldr	r3, [pc, #168]	; (8010cdc <HAL_FLASH_Program+0xc0>)
 8010c34:	7e1b      	ldrb	r3, [r3, #24]
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d04b      	beq.n	8010cd2 <HAL_FLASH_Program+0xb6>
 8010c3a:	4b28      	ldr	r3, [pc, #160]	; (8010cdc <HAL_FLASH_Program+0xc0>)
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c40:	4827      	ldr	r0, [pc, #156]	; (8010ce0 <HAL_FLASH_Program+0xc4>)
 8010c42:	f7ff ffbd 	bl	8010bc0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010c46:	2800      	cmp	r0, #0
 8010c48:	d139      	bne.n	8010cbe <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010c4a:	2c01      	cmp	r4, #1
 8010c4c:	d043      	beq.n	8010cd6 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8010c4e:	3c02      	subs	r4, #2
 8010c50:	4263      	negs	r3, r4
 8010c52:	415c      	adcs	r4, r3
 8010c54:	4264      	negs	r4, r4
 8010c56:	2301      	movs	r3, #1
 8010c58:	439c      	bics	r4, r3
 8010c5a:	46a0      	mov	r8, r4
 8010c5c:	3303      	adds	r3, #3
 8010c5e:	469c      	mov	ip, r3
 8010c60:	44e0      	add	r8, ip
{
 8010c62:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c64:	4b1d      	ldr	r3, [pc, #116]	; (8010cdc <HAL_FLASH_Program+0xc0>)
 8010c66:	469b      	mov	fp, r3
 8010c68:	2300      	movs	r3, #0
 8010c6a:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010c6c:	4c1d      	ldr	r4, [pc, #116]	; (8010ce4 <HAL_FLASH_Program+0xc8>)
 8010c6e:	e01e      	b.n	8010cae <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010c70:	2220      	movs	r2, #32
 8010c72:	1ad2      	subs	r2, r2, r3
 8010c74:	4649      	mov	r1, r9
 8010c76:	4091      	lsls	r1, r2
 8010c78:	000a      	movs	r2, r1
 8010c7a:	9901      	ldr	r1, [sp, #4]
 8010c7c:	40d9      	lsrs	r1, r3
 8010c7e:	000b      	movs	r3, r1
 8010c80:	4313      	orrs	r3, r2
 8010c82:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c84:	465a      	mov	r2, fp
 8010c86:	4651      	mov	r1, sl
 8010c88:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010c8a:	6922      	ldr	r2, [r4, #16]
 8010c8c:	2701      	movs	r7, #1
 8010c8e:	433a      	orrs	r2, r7
 8010c90:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010c92:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c94:	4812      	ldr	r0, [pc, #72]	; (8010ce0 <HAL_FLASH_Program+0xc4>)
 8010c96:	f7ff ff93 	bl	8010bc0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010c9a:	6923      	ldr	r3, [r4, #16]
 8010c9c:	43bb      	bics	r3, r7
 8010c9e:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d10c      	bne.n	8010cbe <HAL_FLASH_Program+0xa2>
 8010ca4:	3501      	adds	r5, #1
 8010ca6:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8010ca8:	b2eb      	uxtb	r3, r5
 8010caa:	4598      	cmp	r8, r3
 8010cac:	d907      	bls.n	8010cbe <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010cae:	012b      	lsls	r3, r5, #4
 8010cb0:	2220      	movs	r2, #32
 8010cb2:	4252      	negs	r2, r2
 8010cb4:	189a      	adds	r2, r3, r2
 8010cb6:	d4db      	bmi.n	8010c70 <HAL_FLASH_Program+0x54>
 8010cb8:	464b      	mov	r3, r9
 8010cba:	40d3      	lsrs	r3, r2
 8010cbc:	e7e1      	b.n	8010c82 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8010cbe:	4b07      	ldr	r3, [pc, #28]	; (8010cdc <HAL_FLASH_Program+0xc0>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	761a      	strb	r2, [r3, #24]
}
 8010cc4:	b003      	add	sp, #12
 8010cc6:	bc3c      	pop	{r2, r3, r4, r5}
 8010cc8:	4690      	mov	r8, r2
 8010cca:	4699      	mov	r9, r3
 8010ccc:	46a2      	mov	sl, r4
 8010cce:	46ab      	mov	fp, r5
 8010cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010cd2:	2002      	movs	r0, #2
 8010cd4:	e7f6      	b.n	8010cc4 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	4698      	mov	r8, r3
 8010cda:	e7c2      	b.n	8010c62 <HAL_FLASH_Program+0x46>
 8010cdc:	20006f10 	.word	0x20006f10
 8010ce0:	0000c350 	.word	0x0000c350
 8010ce4:	40022000 	.word	0x40022000

08010ce8 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ce8:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <FLASH_MassErase+0x1c>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010cee:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <FLASH_MassErase+0x20>)
 8010cf0:	691a      	ldr	r2, [r3, #16]
 8010cf2:	2104      	movs	r1, #4
 8010cf4:	430a      	orrs	r2, r1
 8010cf6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010cf8:	691a      	ldr	r2, [r3, #16]
 8010cfa:	313c      	adds	r1, #60	; 0x3c
 8010cfc:	430a      	orrs	r2, r1
 8010cfe:	611a      	str	r2, [r3, #16]
}
 8010d00:	4770      	bx	lr
 8010d02:	46c0      	nop			; (mov r8, r8)
 8010d04:	20006f10 	.word	0x20006f10
 8010d08:	40022000 	.word	0x40022000

08010d0c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010d0c:	4b06      	ldr	r3, [pc, #24]	; (8010d28 <FLASH_PageErase+0x1c>)
 8010d0e:	2200      	movs	r2, #0
 8010d10:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010d12:	4b06      	ldr	r3, [pc, #24]	; (8010d2c <FLASH_PageErase+0x20>)
 8010d14:	691a      	ldr	r2, [r3, #16]
 8010d16:	2102      	movs	r1, #2
 8010d18:	430a      	orrs	r2, r1
 8010d1a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010d1c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010d1e:	691a      	ldr	r2, [r3, #16]
 8010d20:	313e      	adds	r1, #62	; 0x3e
 8010d22:	430a      	orrs	r2, r1
 8010d24:	611a      	str	r2, [r3, #16]
}
 8010d26:	4770      	bx	lr
 8010d28:	20006f10 	.word	0x20006f10
 8010d2c:	40022000 	.word	0x40022000

08010d30 <HAL_FLASHEx_Erase>:
{
 8010d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d32:	46c6      	mov	lr, r8
 8010d34:	b500      	push	{lr}
 8010d36:	0006      	movs	r6, r0
 8010d38:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010d3a:	4b2a      	ldr	r3, [pc, #168]	; (8010de4 <HAL_FLASHEx_Erase+0xb4>)
 8010d3c:	7e1b      	ldrb	r3, [r3, #24]
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d04d      	beq.n	8010dde <HAL_FLASHEx_Erase+0xae>
 8010d42:	4b28      	ldr	r3, [pc, #160]	; (8010de4 <HAL_FLASHEx_Erase+0xb4>)
 8010d44:	2201      	movs	r2, #1
 8010d46:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010d48:	6803      	ldr	r3, [r0, #0]
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d029      	beq.n	8010da2 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010d4e:	4826      	ldr	r0, [pc, #152]	; (8010de8 <HAL_FLASHEx_Erase+0xb8>)
 8010d50:	f7ff ff36 	bl	8010bc0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010d54:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d129      	bne.n	8010dae <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	425b      	negs	r3, r3
 8010d5e:	4642      	mov	r2, r8
 8010d60:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8010d62:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010d64:	68b3      	ldr	r3, [r6, #8]
 8010d66:	02db      	lsls	r3, r3, #11
 8010d68:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8010d6a:	429c      	cmp	r4, r3
 8010d6c:	d235      	bcs.n	8010dda <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010d6e:	4f1f      	ldr	r7, [pc, #124]	; (8010dec <HAL_FLASHEx_Erase+0xbc>)
 8010d70:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8010d72:	0020      	movs	r0, r4
 8010d74:	f7ff ffca 	bl	8010d0c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010d78:	481b      	ldr	r0, [pc, #108]	; (8010de8 <HAL_FLASHEx_Erase+0xb8>)
 8010d7a:	f7ff ff21 	bl	8010bc0 <FLASH_WaitForLastOperation>
 8010d7e:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	43ab      	bics	r3, r5
 8010d84:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d124      	bne.n	8010dd4 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8010d8a:	2380      	movs	r3, #128	; 0x80
 8010d8c:	011b      	lsls	r3, r3, #4
 8010d8e:	469c      	mov	ip, r3
 8010d90:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010d92:	68b3      	ldr	r3, [r6, #8]
 8010d94:	02db      	lsls	r3, r3, #11
 8010d96:	6871      	ldr	r1, [r6, #4]
 8010d98:	468c      	mov	ip, r1
 8010d9a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010d9c:	42a3      	cmp	r3, r4
 8010d9e:	d8e8      	bhi.n	8010d72 <HAL_FLASHEx_Erase+0x42>
 8010da0:	e005      	b.n	8010dae <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010da2:	4811      	ldr	r0, [pc, #68]	; (8010de8 <HAL_FLASHEx_Erase+0xb8>)
 8010da4:	f7ff ff0c 	bl	8010bc0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010da8:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d006      	beq.n	8010dbc <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8010dae:	4b0d      	ldr	r3, [pc, #52]	; (8010de4 <HAL_FLASHEx_Erase+0xb4>)
 8010db0:	2100      	movs	r1, #0
 8010db2:	7619      	strb	r1, [r3, #24]
}
 8010db4:	0010      	movs	r0, r2
 8010db6:	bc04      	pop	{r2}
 8010db8:	4690      	mov	r8, r2
 8010dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8010dbc:	f7ff ff94 	bl	8010ce8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010dc0:	4809      	ldr	r0, [pc, #36]	; (8010de8 <HAL_FLASHEx_Erase+0xb8>)
 8010dc2:	f7ff fefd 	bl	8010bc0 <FLASH_WaitForLastOperation>
 8010dc6:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010dc8:	4908      	ldr	r1, [pc, #32]	; (8010dec <HAL_FLASHEx_Erase+0xbc>)
 8010dca:	690b      	ldr	r3, [r1, #16]
 8010dcc:	2004      	movs	r0, #4
 8010dce:	4383      	bics	r3, r0
 8010dd0:	610b      	str	r3, [r1, #16]
 8010dd2:	e7ec      	b.n	8010dae <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8010dd4:	4643      	mov	r3, r8
 8010dd6:	601c      	str	r4, [r3, #0]
            break;
 8010dd8:	e7e9      	b.n	8010dae <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010dda:	2201      	movs	r2, #1
 8010ddc:	e7e7      	b.n	8010dae <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8010dde:	2202      	movs	r2, #2
 8010de0:	e7e8      	b.n	8010db4 <HAL_FLASHEx_Erase+0x84>
 8010de2:	46c0      	nop			; (mov r8, r8)
 8010de4:	20006f10 	.word	0x20006f10
 8010de8:	0000c350 	.word	0x0000c350
 8010dec:	40022000 	.word	0x40022000

08010df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df2:	46de      	mov	lr, fp
 8010df4:	4657      	mov	r7, sl
 8010df6:	464e      	mov	r6, r9
 8010df8:	4645      	mov	r5, r8
 8010dfa:	b5e0      	push	{r5, r6, r7, lr}
 8010dfc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010dfe:	680a      	ldr	r2, [r1, #0]
 8010e00:	2a00      	cmp	r2, #0
 8010e02:	d100      	bne.n	8010e06 <HAL_GPIO_Init+0x16>
 8010e04:	e0bf      	b.n	8010f86 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8010e06:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010e08:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010e0a:	2410      	movs	r4, #16
 8010e0c:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010e0e:	3c0d      	subs	r4, #13
 8010e10:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010e12:	2480      	movs	r4, #128	; 0x80
 8010e14:	0564      	lsls	r4, r4, #21
 8010e16:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010e18:	4c5e      	ldr	r4, [pc, #376]	; (8010f94 <HAL_GPIO_Init+0x1a4>)
 8010e1a:	1904      	adds	r4, r0, r4
 8010e1c:	1e65      	subs	r5, r4, #1
 8010e1e:	41ac      	sbcs	r4, r5
 8010e20:	3404      	adds	r4, #4
 8010e22:	46a1      	mov	r9, r4
 8010e24:	e03b      	b.n	8010e9e <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8010e26:	08dc      	lsrs	r4, r3, #3
 8010e28:	00a4      	lsls	r4, r4, #2
 8010e2a:	1904      	adds	r4, r0, r4
 8010e2c:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010e2e:	2507      	movs	r5, #7
 8010e30:	401d      	ands	r5, r3
 8010e32:	00ad      	lsls	r5, r5, #2
 8010e34:	220f      	movs	r2, #15
 8010e36:	40aa      	lsls	r2, r5
 8010e38:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010e3a:	690a      	ldr	r2, [r1, #16]
 8010e3c:	40aa      	lsls	r2, r5
 8010e3e:	0015      	movs	r5, r2
 8010e40:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010e42:	6225      	str	r5, [r4, #32]
 8010e44:	e035      	b.n	8010eb2 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010e46:	2500      	movs	r5, #0
 8010e48:	465a      	mov	r2, fp
 8010e4a:	4095      	lsls	r5, r2
 8010e4c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8010e4e:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010e50:	4c51      	ldr	r4, [pc, #324]	; (8010f98 <HAL_GPIO_Init+0x1a8>)
 8010e52:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010e54:	9a01      	ldr	r2, [sp, #4]
 8010e56:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010e58:	684a      	ldr	r2, [r1, #4]
 8010e5a:	03d2      	lsls	r2, r2, #15
 8010e5c:	d500      	bpl.n	8010e60 <HAL_GPIO_Init+0x70>
 8010e5e:	e086      	b.n	8010f6e <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010e60:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010e62:	4f4d      	ldr	r7, [pc, #308]	; (8010f98 <HAL_GPIO_Init+0x1a8>)
 8010e64:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8010e66:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010e68:	684a      	ldr	r2, [r1, #4]
 8010e6a:	0392      	lsls	r2, r2, #14
 8010e6c:	d500      	bpl.n	8010e70 <HAL_GPIO_Init+0x80>
 8010e6e:	e081      	b.n	8010f74 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010e70:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010e72:	4f49      	ldr	r7, [pc, #292]	; (8010f98 <HAL_GPIO_Init+0x1a8>)
 8010e74:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010e76:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010e78:	684a      	ldr	r2, [r1, #4]
 8010e7a:	02d2      	lsls	r2, r2, #11
 8010e7c:	d47d      	bmi.n	8010f7a <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010e7e:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010e80:	4f45      	ldr	r7, [pc, #276]	; (8010f98 <HAL_GPIO_Init+0x1a8>)
 8010e82:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8010e84:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010e86:	684a      	ldr	r2, [r1, #4]
 8010e88:	0292      	lsls	r2, r2, #10
 8010e8a:	d479      	bmi.n	8010f80 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010e8c:	0022      	movs	r2, r4
 8010e8e:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010e90:	4c41      	ldr	r4, [pc, #260]	; (8010f98 <HAL_GPIO_Init+0x1a8>)
 8010e92:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8010e94:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8010e96:	680a      	ldr	r2, [r1, #0]
 8010e98:	0014      	movs	r4, r2
 8010e9a:	40dc      	lsrs	r4, r3
 8010e9c:	d073      	beq.n	8010f86 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010e9e:	0034      	movs	r4, r6
 8010ea0:	409c      	lsls	r4, r3
 8010ea2:	4022      	ands	r2, r4
 8010ea4:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8010ea6:	d0f5      	beq.n	8010e94 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010ea8:	684c      	ldr	r4, [r1, #4]
 8010eaa:	4642      	mov	r2, r8
 8010eac:	4394      	bics	r4, r2
 8010eae:	2c02      	cmp	r4, #2
 8010eb0:	d0b9      	beq.n	8010e26 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8010eb2:	6804      	ldr	r4, [r0, #0]
 8010eb4:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010eb6:	4665      	mov	r5, ip
 8010eb8:	40bd      	lsls	r5, r7
 8010eba:	43ed      	mvns	r5, r5
 8010ebc:	402c      	ands	r4, r5
 8010ebe:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010ec0:	684c      	ldr	r4, [r1, #4]
 8010ec2:	4662      	mov	r2, ip
 8010ec4:	4014      	ands	r4, r2
 8010ec6:	40bc      	lsls	r4, r7
 8010ec8:	465a      	mov	r2, fp
 8010eca:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8010ecc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010ece:	684c      	ldr	r4, [r1, #4]
 8010ed0:	4642      	mov	r2, r8
 8010ed2:	4394      	bics	r4, r2
 8010ed4:	3c01      	subs	r4, #1
 8010ed6:	2c01      	cmp	r4, #1
 8010ed8:	d813      	bhi.n	8010f02 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8010eda:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010edc:	402c      	ands	r4, r5
 8010ede:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010ee0:	68cc      	ldr	r4, [r1, #12]
 8010ee2:	40bc      	lsls	r4, r7
 8010ee4:	465a      	mov	r2, fp
 8010ee6:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8010ee8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8010eea:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010eec:	0032      	movs	r2, r6
 8010eee:	409a      	lsls	r2, r3
 8010ef0:	4394      	bics	r4, r2
 8010ef2:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010ef4:	684a      	ldr	r2, [r1, #4]
 8010ef6:	0914      	lsrs	r4, r2, #4
 8010ef8:	4034      	ands	r4, r6
 8010efa:	409c      	lsls	r4, r3
 8010efc:	465a      	mov	r2, fp
 8010efe:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8010f00:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8010f02:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010f04:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010f06:	688d      	ldr	r5, [r1, #8]
 8010f08:	40bd      	lsls	r5, r7
 8010f0a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8010f0c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010f0e:	684a      	ldr	r2, [r1, #4]
 8010f10:	4654      	mov	r4, sl
 8010f12:	4222      	tst	r2, r4
 8010f14:	d0be      	beq.n	8010e94 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f16:	4c21      	ldr	r4, [pc, #132]	; (8010f9c <HAL_GPIO_Init+0x1ac>)
 8010f18:	69a5      	ldr	r5, [r4, #24]
 8010f1a:	4335      	orrs	r5, r6
 8010f1c:	61a5      	str	r5, [r4, #24]
 8010f1e:	69a4      	ldr	r4, [r4, #24]
 8010f20:	4034      	ands	r4, r6
 8010f22:	9403      	str	r4, [sp, #12]
 8010f24:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010f26:	089c      	lsrs	r4, r3, #2
 8010f28:	00a4      	lsls	r4, r4, #2
 8010f2a:	4a1d      	ldr	r2, [pc, #116]	; (8010fa0 <HAL_GPIO_Init+0x1b0>)
 8010f2c:	4693      	mov	fp, r2
 8010f2e:	445c      	add	r4, fp
 8010f30:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010f32:	4667      	mov	r7, ip
 8010f34:	401f      	ands	r7, r3
 8010f36:	00ba      	lsls	r2, r7, #2
 8010f38:	4693      	mov	fp, r2
 8010f3a:	270f      	movs	r7, #15
 8010f3c:	4097      	lsls	r7, r2
 8010f3e:	43bd      	bics	r5, r7
 8010f40:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010f42:	2590      	movs	r5, #144	; 0x90
 8010f44:	05ed      	lsls	r5, r5, #23
 8010f46:	42a8      	cmp	r0, r5
 8010f48:	d100      	bne.n	8010f4c <HAL_GPIO_Init+0x15c>
 8010f4a:	e77c      	b.n	8010e46 <HAL_GPIO_Init+0x56>
 8010f4c:	4d15      	ldr	r5, [pc, #84]	; (8010fa4 <HAL_GPIO_Init+0x1b4>)
 8010f4e:	42a8      	cmp	r0, r5
 8010f50:	d007      	beq.n	8010f62 <HAL_GPIO_Init+0x172>
 8010f52:	4d15      	ldr	r5, [pc, #84]	; (8010fa8 <HAL_GPIO_Init+0x1b8>)
 8010f54:	42a8      	cmp	r0, r5
 8010f56:	d006      	beq.n	8010f66 <HAL_GPIO_Init+0x176>
 8010f58:	4d14      	ldr	r5, [pc, #80]	; (8010fac <HAL_GPIO_Init+0x1bc>)
 8010f5a:	42a8      	cmp	r0, r5
 8010f5c:	d005      	beq.n	8010f6a <HAL_GPIO_Init+0x17a>
 8010f5e:	464d      	mov	r5, r9
 8010f60:	e772      	b.n	8010e48 <HAL_GPIO_Init+0x58>
 8010f62:	0035      	movs	r5, r6
 8010f64:	e770      	b.n	8010e48 <HAL_GPIO_Init+0x58>
 8010f66:	2502      	movs	r5, #2
 8010f68:	e76e      	b.n	8010e48 <HAL_GPIO_Init+0x58>
 8010f6a:	4665      	mov	r5, ip
 8010f6c:	e76c      	b.n	8010e48 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8010f6e:	9a01      	ldr	r2, [sp, #4]
 8010f70:	4314      	orrs	r4, r2
 8010f72:	e776      	b.n	8010e62 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8010f74:	9a01      	ldr	r2, [sp, #4]
 8010f76:	4314      	orrs	r4, r2
 8010f78:	e77b      	b.n	8010e72 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8010f7a:	9a01      	ldr	r2, [sp, #4]
 8010f7c:	4314      	orrs	r4, r2
 8010f7e:	e77f      	b.n	8010e80 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8010f80:	9a01      	ldr	r2, [sp, #4]
 8010f82:	4322      	orrs	r2, r4
 8010f84:	e784      	b.n	8010e90 <HAL_GPIO_Init+0xa0>
  } 
}
 8010f86:	b005      	add	sp, #20
 8010f88:	bc3c      	pop	{r2, r3, r4, r5}
 8010f8a:	4690      	mov	r8, r2
 8010f8c:	4699      	mov	r9, r3
 8010f8e:	46a2      	mov	sl, r4
 8010f90:	46ab      	mov	fp, r5
 8010f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f94:	b7fff000 	.word	0xb7fff000
 8010f98:	40010400 	.word	0x40010400
 8010f9c:	40021000 	.word	0x40021000
 8010fa0:	40010000 	.word	0x40010000
 8010fa4:	48000400 	.word	0x48000400
 8010fa8:	48000800 	.word	0x48000800
 8010fac:	48000c00 	.word	0x48000c00

08010fb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fb2:	46de      	mov	lr, fp
 8010fb4:	4657      	mov	r7, sl
 8010fb6:	464e      	mov	r6, r9
 8010fb8:	4645      	mov	r5, r8
 8010fba:	b5e0      	push	{r5, r6, r7, lr}
 8010fbc:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010fbe:	2900      	cmp	r1, #0
 8010fc0:	d071      	beq.n	80110a6 <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8010fc2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010fc8:	3202      	adds	r2, #2
 8010fca:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010fcc:	3204      	adds	r2, #4
 8010fce:	4693      	mov	fp, r2
 8010fd0:	3208      	adds	r2, #8
 8010fd2:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010fd4:	4a37      	ldr	r2, [pc, #220]	; (80110b4 <HAL_GPIO_DeInit+0x104>)
 8010fd6:	1882      	adds	r2, r0, r2
 8010fd8:	1e54      	subs	r4, r2, #1
 8010fda:	41a2      	sbcs	r2, r4
 8010fdc:	3204      	adds	r2, #4
 8010fde:	9201      	str	r2, [sp, #4]
 8010fe0:	9100      	str	r1, [sp, #0]
 8010fe2:	e009      	b.n	8010ff8 <HAL_GPIO_DeInit+0x48>
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	4689      	mov	r9, r1
 8010fe8:	4649      	mov	r1, r9
 8010fea:	40a9      	lsls	r1, r5
 8010fec:	42b1      	cmp	r1, r6
 8010fee:	d048      	beq.n	8011082 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010ff0:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010ff2:	9a00      	ldr	r2, [sp, #0]
 8010ff4:	40da      	lsrs	r2, r3
 8010ff6:	d056      	beq.n	80110a6 <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8010ff8:	4662      	mov	r2, ip
 8010ffa:	409a      	lsls	r2, r3
 8010ffc:	9900      	ldr	r1, [sp, #0]
 8010ffe:	400a      	ands	r2, r1
    if (iocurrent)
 8011000:	d0f6      	beq.n	8010ff0 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011002:	6804      	ldr	r4, [r0, #0]
 8011004:	005d      	lsls	r5, r3, #1
 8011006:	4646      	mov	r6, r8
 8011008:	40ae      	lsls	r6, r5
 801100a:	43f5      	mvns	r5, r6
 801100c:	402c      	ands	r4, r5
 801100e:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011010:	08dc      	lsrs	r4, r3, #3
 8011012:	00a4      	lsls	r4, r4, #2
 8011014:	1904      	adds	r4, r0, r4
 8011016:	6a26      	ldr	r6, [r4, #32]
 8011018:	465f      	mov	r7, fp
 801101a:	401f      	ands	r7, r3
 801101c:	00bf      	lsls	r7, r7, #2
 801101e:	4651      	mov	r1, sl
 8011020:	40b9      	lsls	r1, r7
 8011022:	438e      	bics	r6, r1
 8011024:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011026:	6884      	ldr	r4, [r0, #8]
 8011028:	402c      	ands	r4, r5
 801102a:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 801102c:	6844      	ldr	r4, [r0, #4]
 801102e:	4666      	mov	r6, ip
 8011030:	409e      	lsls	r6, r3
 8011032:	43b4      	bics	r4, r6
 8011034:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011036:	68c4      	ldr	r4, [r0, #12]
 8011038:	4025      	ands	r5, r4
 801103a:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 801103c:	089c      	lsrs	r4, r3, #2
 801103e:	00a4      	lsls	r4, r4, #2
 8011040:	491d      	ldr	r1, [pc, #116]	; (80110b8 <HAL_GPIO_DeInit+0x108>)
 8011042:	4689      	mov	r9, r1
 8011044:	444c      	add	r4, r9
 8011046:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011048:	4645      	mov	r5, r8
 801104a:	401d      	ands	r5, r3
 801104c:	00ad      	lsls	r5, r5, #2
 801104e:	4657      	mov	r7, sl
 8011050:	40af      	lsls	r7, r5
 8011052:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011054:	2190      	movs	r1, #144	; 0x90
 8011056:	05c9      	lsls	r1, r1, #23
 8011058:	4288      	cmp	r0, r1
 801105a:	d0c3      	beq.n	8010fe4 <HAL_GPIO_DeInit+0x34>
 801105c:	4917      	ldr	r1, [pc, #92]	; (80110bc <HAL_GPIO_DeInit+0x10c>)
 801105e:	4288      	cmp	r0, r1
 8011060:	d008      	beq.n	8011074 <HAL_GPIO_DeInit+0xc4>
 8011062:	4917      	ldr	r1, [pc, #92]	; (80110c0 <HAL_GPIO_DeInit+0x110>)
 8011064:	4288      	cmp	r0, r1
 8011066:	d007      	beq.n	8011078 <HAL_GPIO_DeInit+0xc8>
 8011068:	4916      	ldr	r1, [pc, #88]	; (80110c4 <HAL_GPIO_DeInit+0x114>)
 801106a:	4288      	cmp	r0, r1
 801106c:	d007      	beq.n	801107e <HAL_GPIO_DeInit+0xce>
 801106e:	9901      	ldr	r1, [sp, #4]
 8011070:	4689      	mov	r9, r1
 8011072:	e7b9      	b.n	8010fe8 <HAL_GPIO_DeInit+0x38>
 8011074:	46e1      	mov	r9, ip
 8011076:	e7b7      	b.n	8010fe8 <HAL_GPIO_DeInit+0x38>
 8011078:	2102      	movs	r1, #2
 801107a:	4689      	mov	r9, r1
 801107c:	e7b4      	b.n	8010fe8 <HAL_GPIO_DeInit+0x38>
 801107e:	46c1      	mov	r9, r8
 8011080:	e7b2      	b.n	8010fe8 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011082:	68a5      	ldr	r5, [r4, #8]
 8011084:	43bd      	bics	r5, r7
 8011086:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011088:	4c0f      	ldr	r4, [pc, #60]	; (80110c8 <HAL_GPIO_DeInit+0x118>)
 801108a:	6825      	ldr	r5, [r4, #0]
 801108c:	43d2      	mvns	r2, r2
 801108e:	4015      	ands	r5, r2
 8011090:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011092:	6865      	ldr	r5, [r4, #4]
 8011094:	4015      	ands	r5, r2
 8011096:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011098:	68a5      	ldr	r5, [r4, #8]
 801109a:	4015      	ands	r5, r2
 801109c:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801109e:	68e5      	ldr	r5, [r4, #12]
 80110a0:	402a      	ands	r2, r5
 80110a2:	60e2      	str	r2, [r4, #12]
 80110a4:	e7a4      	b.n	8010ff0 <HAL_GPIO_DeInit+0x40>
  }
}
 80110a6:	b003      	add	sp, #12
 80110a8:	bc3c      	pop	{r2, r3, r4, r5}
 80110aa:	4690      	mov	r8, r2
 80110ac:	4699      	mov	r9, r3
 80110ae:	46a2      	mov	sl, r4
 80110b0:	46ab      	mov	fp, r5
 80110b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110b4:	b7fff000 	.word	0xb7fff000
 80110b8:	40010000 	.word	0x40010000
 80110bc:	48000400 	.word	0x48000400
 80110c0:	48000800 	.word	0x48000800
 80110c4:	48000c00 	.word	0x48000c00
 80110c8:	40010400 	.word	0x40010400

080110cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80110cc:	6900      	ldr	r0, [r0, #16]
 80110ce:	4008      	ands	r0, r1
 80110d0:	1e41      	subs	r1, r0, #1
 80110d2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80110d4:	b2c0      	uxtb	r0, r0
  }
 80110d6:	4770      	bx	lr

080110d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80110d8:	2a00      	cmp	r2, #0
 80110da:	d101      	bne.n	80110e0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80110dc:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80110de:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80110e0:	6181      	str	r1, [r0, #24]
 80110e2:	e7fc      	b.n	80110de <HAL_GPIO_WritePin+0x6>

080110e4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80110e4:	6943      	ldr	r3, [r0, #20]
 80110e6:	4059      	eors	r1, r3
 80110e8:	6141      	str	r1, [r0, #20]
}
 80110ea:	4770      	bx	lr

080110ec <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80110ec:	4770      	bx	lr
	...

080110f0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80110f0:	4a03      	ldr	r2, [pc, #12]	; (8011100 <HAL_PWR_EnableBkUpAccess+0x10>)
 80110f2:	6811      	ldr	r1, [r2, #0]
 80110f4:	2380      	movs	r3, #128	; 0x80
 80110f6:	005b      	lsls	r3, r3, #1
 80110f8:	430b      	orrs	r3, r1
 80110fa:	6013      	str	r3, [r2, #0]
}
 80110fc:	4770      	bx	lr
 80110fe:	46c0      	nop			; (mov r8, r8)
 8011100:	40007000 	.word	0x40007000

08011104 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011106:	46c6      	mov	lr, r8
 8011108:	b500      	push	{lr}
 801110a:	b082      	sub	sp, #8
 801110c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801110e:	6803      	ldr	r3, [r0, #0]
 8011110:	07db      	lsls	r3, r3, #31
 8011112:	d538      	bpl.n	8011186 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011114:	4bbd      	ldr	r3, [pc, #756]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011116:	685a      	ldr	r2, [r3, #4]
 8011118:	230c      	movs	r3, #12
 801111a:	4013      	ands	r3, r2
 801111c:	2b04      	cmp	r3, #4
 801111e:	d02a      	beq.n	8011176 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011120:	4bba      	ldr	r3, [pc, #744]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011122:	685a      	ldr	r2, [r3, #4]
 8011124:	230c      	movs	r3, #12
 8011126:	4013      	ands	r3, r2
 8011128:	2b08      	cmp	r3, #8
 801112a:	d108      	bne.n	801113e <HAL_RCC_OscConfig+0x3a>
 801112c:	4bb7      	ldr	r3, [pc, #732]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	22c0      	movs	r2, #192	; 0xc0
 8011132:	0252      	lsls	r2, r2, #9
 8011134:	4013      	ands	r3, r2
 8011136:	2280      	movs	r2, #128	; 0x80
 8011138:	0252      	lsls	r2, r2, #9
 801113a:	4293      	cmp	r3, r2
 801113c:	d01b      	beq.n	8011176 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801113e:	4bb3      	ldr	r3, [pc, #716]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	49b3      	ldr	r1, [pc, #716]	; (8011410 <HAL_RCC_OscConfig+0x30c>)
 8011144:	400a      	ands	r2, r1
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	49b2      	ldr	r1, [pc, #712]	; (8011414 <HAL_RCC_OscConfig+0x310>)
 801114c:	400a      	ands	r2, r1
 801114e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011150:	f7fe fb52 	bl	800f7f8 <HAL_GetTick>
 8011154:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011156:	4ead      	ldr	r6, [pc, #692]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011158:	2580      	movs	r5, #128	; 0x80
 801115a:	02ad      	lsls	r5, r5, #10
 801115c:	6833      	ldr	r3, [r6, #0]
 801115e:	422b      	tst	r3, r5
 8011160:	d039      	beq.n	80111d6 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011162:	f7fe fb49 	bl	800f7f8 <HAL_GetTick>
 8011166:	1bc0      	subs	r0, r0, r7
 8011168:	2864      	cmp	r0, #100	; 0x64
 801116a:	d9f7      	bls.n	801115c <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 801116c:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801116e:	b002      	add	sp, #8
 8011170:	bc04      	pop	{r2}
 8011172:	4690      	mov	r8, r2
 8011174:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011176:	4ba5      	ldr	r3, [pc, #660]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	039b      	lsls	r3, r3, #14
 801117c:	d503      	bpl.n	8011186 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 801117e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011180:	6863      	ldr	r3, [r4, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d0f3      	beq.n	801116e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	079b      	lsls	r3, r3, #30
 801118a:	d400      	bmi.n	801118e <HAL_RCC_OscConfig+0x8a>
 801118c:	e08d      	b.n	80112aa <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801118e:	4b9f      	ldr	r3, [pc, #636]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	220c      	movs	r2, #12
 8011194:	421a      	tst	r2, r3
 8011196:	d077      	beq.n	8011288 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011198:	4b9c      	ldr	r3, [pc, #624]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801119a:	685a      	ldr	r2, [r3, #4]
 801119c:	230c      	movs	r3, #12
 801119e:	4013      	ands	r3, r2
 80111a0:	2b08      	cmp	r3, #8
 80111a2:	d068      	beq.n	8011276 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80111a4:	68e3      	ldr	r3, [r4, #12]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d100      	bne.n	80111ac <HAL_RCC_OscConfig+0xa8>
 80111aa:	e0a1      	b.n	80112f0 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 80111ac:	4a97      	ldr	r2, [pc, #604]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80111ae:	6813      	ldr	r3, [r2, #0]
 80111b0:	2101      	movs	r1, #1
 80111b2:	430b      	orrs	r3, r1
 80111b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80111b6:	f7fe fb1f 	bl	800f7f8 <HAL_GetTick>
 80111ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80111bc:	4e93      	ldr	r6, [pc, #588]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80111be:	2502      	movs	r5, #2
 80111c0:	6833      	ldr	r3, [r6, #0]
 80111c2:	421d      	tst	r5, r3
 80111c4:	d000      	beq.n	80111c8 <HAL_RCC_OscConfig+0xc4>
 80111c6:	e08a      	b.n	80112de <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80111c8:	f7fe fb16 	bl	800f7f8 <HAL_GetTick>
 80111cc:	1bc0      	subs	r0, r0, r7
 80111ce:	2864      	cmp	r0, #100	; 0x64
 80111d0:	d9f6      	bls.n	80111c0 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 80111d2:	2003      	movs	r0, #3
 80111d4:	e7cb      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80111d6:	6863      	ldr	r3, [r4, #4]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d00b      	beq.n	80111f4 <HAL_RCC_OscConfig+0xf0>
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d122      	bne.n	8011226 <HAL_RCC_OscConfig+0x122>
 80111e0:	4b8a      	ldr	r3, [pc, #552]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	498a      	ldr	r1, [pc, #552]	; (8011410 <HAL_RCC_OscConfig+0x30c>)
 80111e6:	400a      	ands	r2, r1
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	4989      	ldr	r1, [pc, #548]	; (8011414 <HAL_RCC_OscConfig+0x310>)
 80111ee:	400a      	ands	r2, r1
 80111f0:	601a      	str	r2, [r3, #0]
 80111f2:	e005      	b.n	8011200 <HAL_RCC_OscConfig+0xfc>
 80111f4:	4a85      	ldr	r2, [pc, #532]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80111f6:	6811      	ldr	r1, [r2, #0]
 80111f8:	2380      	movs	r3, #128	; 0x80
 80111fa:	025b      	lsls	r3, r3, #9
 80111fc:	430b      	orrs	r3, r1
 80111fe:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011200:	6863      	ldr	r3, [r4, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d027      	beq.n	8011256 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011206:	f7fe faf7 	bl	800f7f8 <HAL_GetTick>
 801120a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801120c:	4e7f      	ldr	r6, [pc, #508]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801120e:	2580      	movs	r5, #128	; 0x80
 8011210:	02ad      	lsls	r5, r5, #10
 8011212:	6833      	ldr	r3, [r6, #0]
 8011214:	422b      	tst	r3, r5
 8011216:	d1b6      	bne.n	8011186 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011218:	f7fe faee 	bl	800f7f8 <HAL_GetTick>
 801121c:	1bc0      	subs	r0, r0, r7
 801121e:	2864      	cmp	r0, #100	; 0x64
 8011220:	d9f7      	bls.n	8011212 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8011222:	2003      	movs	r0, #3
 8011224:	e7a3      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011226:	2b05      	cmp	r3, #5
 8011228:	d009      	beq.n	801123e <HAL_RCC_OscConfig+0x13a>
 801122a:	4b78      	ldr	r3, [pc, #480]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	4978      	ldr	r1, [pc, #480]	; (8011410 <HAL_RCC_OscConfig+0x30c>)
 8011230:	400a      	ands	r2, r1
 8011232:	601a      	str	r2, [r3, #0]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	4977      	ldr	r1, [pc, #476]	; (8011414 <HAL_RCC_OscConfig+0x310>)
 8011238:	400a      	ands	r2, r1
 801123a:	601a      	str	r2, [r3, #0]
 801123c:	e7e0      	b.n	8011200 <HAL_RCC_OscConfig+0xfc>
 801123e:	4b73      	ldr	r3, [pc, #460]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011240:	6819      	ldr	r1, [r3, #0]
 8011242:	2280      	movs	r2, #128	; 0x80
 8011244:	02d2      	lsls	r2, r2, #11
 8011246:	430a      	orrs	r2, r1
 8011248:	601a      	str	r2, [r3, #0]
 801124a:	6819      	ldr	r1, [r3, #0]
 801124c:	2280      	movs	r2, #128	; 0x80
 801124e:	0252      	lsls	r2, r2, #9
 8011250:	430a      	orrs	r2, r1
 8011252:	601a      	str	r2, [r3, #0]
 8011254:	e7d4      	b.n	8011200 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8011256:	f7fe facf 	bl	800f7f8 <HAL_GetTick>
 801125a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801125c:	4e6b      	ldr	r6, [pc, #428]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801125e:	2580      	movs	r5, #128	; 0x80
 8011260:	02ad      	lsls	r5, r5, #10
 8011262:	6833      	ldr	r3, [r6, #0]
 8011264:	422b      	tst	r3, r5
 8011266:	d08e      	beq.n	8011186 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011268:	f7fe fac6 	bl	800f7f8 <HAL_GetTick>
 801126c:	1bc0      	subs	r0, r0, r7
 801126e:	2864      	cmp	r0, #100	; 0x64
 8011270:	d9f7      	bls.n	8011262 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8011272:	2003      	movs	r0, #3
 8011274:	e77b      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011276:	4b65      	ldr	r3, [pc, #404]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	22c0      	movs	r2, #192	; 0xc0
 801127c:	0252      	lsls	r2, r2, #9
 801127e:	4013      	ands	r3, r2
 8011280:	2280      	movs	r2, #128	; 0x80
 8011282:	0212      	lsls	r2, r2, #8
 8011284:	4293      	cmp	r3, r2
 8011286:	d18d      	bne.n	80111a4 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011288:	4b60      	ldr	r3, [pc, #384]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	079b      	lsls	r3, r3, #30
 801128e:	d504      	bpl.n	801129a <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011290:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011292:	68e3      	ldr	r3, [r4, #12]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d000      	beq.n	801129a <HAL_RCC_OscConfig+0x196>
 8011298:	e769      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801129a:	495c      	ldr	r1, [pc, #368]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801129c:	680a      	ldr	r2, [r1, #0]
 801129e:	6923      	ldr	r3, [r4, #16]
 80112a0:	00db      	lsls	r3, r3, #3
 80112a2:	20f8      	movs	r0, #248	; 0xf8
 80112a4:	4382      	bics	r2, r0
 80112a6:	4313      	orrs	r3, r2
 80112a8:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	071b      	lsls	r3, r3, #28
 80112ae:	d547      	bpl.n	8011340 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80112b0:	6a23      	ldr	r3, [r4, #32]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d030      	beq.n	8011318 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 80112b6:	4a55      	ldr	r2, [pc, #340]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80112b8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80112ba:	2101      	movs	r1, #1
 80112bc:	430b      	orrs	r3, r1
 80112be:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80112c0:	f7fe fa9a 	bl	800f7f8 <HAL_GetTick>
 80112c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80112c6:	4e51      	ldr	r6, [pc, #324]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80112c8:	2502      	movs	r5, #2
 80112ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80112cc:	421d      	tst	r5, r3
 80112ce:	d137      	bne.n	8011340 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80112d0:	f7fe fa92 	bl	800f7f8 <HAL_GetTick>
 80112d4:	1bc0      	subs	r0, r0, r7
 80112d6:	2864      	cmp	r0, #100	; 0x64
 80112d8:	d9f7      	bls.n	80112ca <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 80112da:	2003      	movs	r0, #3
 80112dc:	e747      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112de:	494b      	ldr	r1, [pc, #300]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80112e0:	680a      	ldr	r2, [r1, #0]
 80112e2:	6923      	ldr	r3, [r4, #16]
 80112e4:	00db      	lsls	r3, r3, #3
 80112e6:	20f8      	movs	r0, #248	; 0xf8
 80112e8:	4382      	bics	r2, r0
 80112ea:	4313      	orrs	r3, r2
 80112ec:	600b      	str	r3, [r1, #0]
 80112ee:	e7dc      	b.n	80112aa <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 80112f0:	4a46      	ldr	r2, [pc, #280]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80112f2:	6813      	ldr	r3, [r2, #0]
 80112f4:	2101      	movs	r1, #1
 80112f6:	438b      	bics	r3, r1
 80112f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80112fa:	f7fe fa7d 	bl	800f7f8 <HAL_GetTick>
 80112fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011300:	4e42      	ldr	r6, [pc, #264]	; (801140c <HAL_RCC_OscConfig+0x308>)
 8011302:	2502      	movs	r5, #2
 8011304:	6833      	ldr	r3, [r6, #0]
 8011306:	421d      	tst	r5, r3
 8011308:	d0cf      	beq.n	80112aa <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801130a:	f7fe fa75 	bl	800f7f8 <HAL_GetTick>
 801130e:	1bc0      	subs	r0, r0, r7
 8011310:	2864      	cmp	r0, #100	; 0x64
 8011312:	d9f7      	bls.n	8011304 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8011314:	2003      	movs	r0, #3
 8011316:	e72a      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8011318:	4a3c      	ldr	r2, [pc, #240]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801131a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801131c:	2101      	movs	r1, #1
 801131e:	438b      	bics	r3, r1
 8011320:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011322:	f7fe fa69 	bl	800f7f8 <HAL_GetTick>
 8011326:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011328:	4e38      	ldr	r6, [pc, #224]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801132a:	2502      	movs	r5, #2
 801132c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801132e:	421d      	tst	r5, r3
 8011330:	d006      	beq.n	8011340 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011332:	f7fe fa61 	bl	800f7f8 <HAL_GetTick>
 8011336:	1bc0      	subs	r0, r0, r7
 8011338:	2864      	cmp	r0, #100	; 0x64
 801133a:	d9f7      	bls.n	801132c <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 801133c:	2003      	movs	r0, #3
 801133e:	e716      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	075b      	lsls	r3, r3, #29
 8011344:	d442      	bmi.n	80113cc <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	06db      	lsls	r3, r3, #27
 801134a:	d512      	bpl.n	8011372 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801134c:	6963      	ldr	r3, [r4, #20]
 801134e:	2b01      	cmp	r3, #1
 8011350:	d100      	bne.n	8011354 <HAL_RCC_OscConfig+0x250>
 8011352:	e0ce      	b.n	80114f2 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011354:	3305      	adds	r3, #5
 8011356:	d000      	beq.n	801135a <HAL_RCC_OscConfig+0x256>
 8011358:	e0ec      	b.n	8011534 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 801135a:	4a2c      	ldr	r2, [pc, #176]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801135c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801135e:	2104      	movs	r1, #4
 8011360:	438b      	bics	r3, r1
 8011362:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011364:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011366:	69a3      	ldr	r3, [r4, #24]
 8011368:	00db      	lsls	r3, r3, #3
 801136a:	20f8      	movs	r0, #248	; 0xf8
 801136c:	4381      	bics	r1, r0
 801136e:	430b      	orrs	r3, r1
 8011370:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	069b      	lsls	r3, r3, #26
 8011376:	d400      	bmi.n	801137a <HAL_RCC_OscConfig+0x276>
 8011378:	e106      	b.n	8011588 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801137a:	4b24      	ldr	r3, [pc, #144]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	230c      	movs	r3, #12
 8011380:	4013      	ands	r3, r2
 8011382:	2b0c      	cmp	r3, #12
 8011384:	d100      	bne.n	8011388 <HAL_RCC_OscConfig+0x284>
 8011386:	e0f6      	b.n	8011576 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011388:	4b20      	ldr	r3, [pc, #128]	; (801140c <HAL_RCC_OscConfig+0x308>)
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	230c      	movs	r3, #12
 801138e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011390:	2b08      	cmp	r3, #8
 8011392:	d100      	bne.n	8011396 <HAL_RCC_OscConfig+0x292>
 8011394:	e0e7      	b.n	8011566 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011396:	69e3      	ldr	r3, [r4, #28]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d100      	bne.n	801139e <HAL_RCC_OscConfig+0x29a>
 801139c:	e116      	b.n	80115cc <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801139e:	4a1b      	ldr	r2, [pc, #108]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80113a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80113a2:	2380      	movs	r3, #128	; 0x80
 80113a4:	025b      	lsls	r3, r3, #9
 80113a6:	430b      	orrs	r3, r1
 80113a8:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80113aa:	f7fe fa25 	bl	800f7f8 <HAL_GetTick>
 80113ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80113b0:	4e16      	ldr	r6, [pc, #88]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80113b2:	2580      	movs	r5, #128	; 0x80
 80113b4:	026d      	lsls	r5, r5, #9
 80113b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80113b8:	422b      	tst	r3, r5
 80113ba:	d000      	beq.n	80113be <HAL_RCC_OscConfig+0x2ba>
 80113bc:	e0e4      	b.n	8011588 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80113be:	f7fe fa1b 	bl	800f7f8 <HAL_GetTick>
 80113c2:	1bc0      	subs	r0, r0, r7
 80113c4:	2864      	cmp	r0, #100	; 0x64
 80113c6:	d9f6      	bls.n	80113b6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80113c8:	2003      	movs	r0, #3
 80113ca:	e6d0      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80113cc:	4a0f      	ldr	r2, [pc, #60]	; (801140c <HAL_RCC_OscConfig+0x308>)
 80113ce:	69d1      	ldr	r1, [r2, #28]
 80113d0:	2080      	movs	r0, #128	; 0x80
 80113d2:	0540      	lsls	r0, r0, #21
 80113d4:	4301      	orrs	r1, r0
 80113d6:	61d1      	str	r1, [r2, #28]
 80113d8:	69d3      	ldr	r3, [r2, #28]
 80113da:	4003      	ands	r3, r0
 80113dc:	9301      	str	r3, [sp, #4]
 80113de:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80113e0:	4a0d      	ldr	r2, [pc, #52]	; (8011418 <HAL_RCC_OscConfig+0x314>)
 80113e2:	6811      	ldr	r1, [r2, #0]
 80113e4:	2380      	movs	r3, #128	; 0x80
 80113e6:	005b      	lsls	r3, r3, #1
 80113e8:	430b      	orrs	r3, r1
 80113ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80113ec:	f7fe fa04 	bl	800f7f8 <HAL_GetTick>
 80113f0:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80113f2:	4e09      	ldr	r6, [pc, #36]	; (8011418 <HAL_RCC_OscConfig+0x314>)
 80113f4:	2580      	movs	r5, #128	; 0x80
 80113f6:	006d      	lsls	r5, r5, #1
 80113f8:	6833      	ldr	r3, [r6, #0]
 80113fa:	422b      	tst	r3, r5
 80113fc:	d10e      	bne.n	801141c <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80113fe:	f7fe f9fb 	bl	800f7f8 <HAL_GetTick>
 8011402:	1bc0      	subs	r0, r0, r7
 8011404:	2864      	cmp	r0, #100	; 0x64
 8011406:	d9f7      	bls.n	80113f8 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8011408:	2003      	movs	r0, #3
 801140a:	e6b0      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
 801140c:	40021000 	.word	0x40021000
 8011410:	fffeffff 	.word	0xfffeffff
 8011414:	fffbffff 	.word	0xfffbffff
 8011418:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801141c:	4b95      	ldr	r3, [pc, #596]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 801141e:	6a1a      	ldr	r2, [r3, #32]
 8011420:	2101      	movs	r1, #1
 8011422:	438a      	bics	r2, r1
 8011424:	621a      	str	r2, [r3, #32]
 8011426:	6a1a      	ldr	r2, [r3, #32]
 8011428:	3103      	adds	r1, #3
 801142a:	438a      	bics	r2, r1
 801142c:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 801142e:	f7fe f9e3 	bl	800f7f8 <HAL_GetTick>
 8011432:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011434:	4e8f      	ldr	r6, [pc, #572]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011436:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011438:	4f8f      	ldr	r7, [pc, #572]	; (8011678 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801143a:	6a33      	ldr	r3, [r6, #32]
 801143c:	421d      	tst	r5, r3
 801143e:	d007      	beq.n	8011450 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011440:	f7fe f9da 	bl	800f7f8 <HAL_GetTick>
 8011444:	4643      	mov	r3, r8
 8011446:	1ac0      	subs	r0, r0, r3
 8011448:	42b8      	cmp	r0, r7
 801144a:	d9f6      	bls.n	801143a <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 801144c:	2003      	movs	r0, #3
 801144e:	e68e      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011450:	68a3      	ldr	r3, [r4, #8]
 8011452:	2b01      	cmp	r3, #1
 8011454:	d00b      	beq.n	801146e <HAL_RCC_OscConfig+0x36a>
 8011456:	2b00      	cmp	r3, #0
 8011458:	d123      	bne.n	80114a2 <HAL_RCC_OscConfig+0x39e>
 801145a:	4b86      	ldr	r3, [pc, #536]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 801145c:	6a1a      	ldr	r2, [r3, #32]
 801145e:	2101      	movs	r1, #1
 8011460:	438a      	bics	r2, r1
 8011462:	621a      	str	r2, [r3, #32]
 8011464:	6a1a      	ldr	r2, [r3, #32]
 8011466:	3103      	adds	r1, #3
 8011468:	438a      	bics	r2, r1
 801146a:	621a      	str	r2, [r3, #32]
 801146c:	e004      	b.n	8011478 <HAL_RCC_OscConfig+0x374>
 801146e:	4a81      	ldr	r2, [pc, #516]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011470:	6a13      	ldr	r3, [r2, #32]
 8011472:	2101      	movs	r1, #1
 8011474:	430b      	orrs	r3, r1
 8011476:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011478:	68a3      	ldr	r3, [r4, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d027      	beq.n	80114ce <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 801147e:	f7fe f9bb 	bl	800f7f8 <HAL_GetTick>
 8011482:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011484:	4e7b      	ldr	r6, [pc, #492]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011486:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011488:	4f7b      	ldr	r7, [pc, #492]	; (8011678 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801148a:	6a33      	ldr	r3, [r6, #32]
 801148c:	421d      	tst	r5, r3
 801148e:	d000      	beq.n	8011492 <HAL_RCC_OscConfig+0x38e>
 8011490:	e759      	b.n	8011346 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011492:	f7fe f9b1 	bl	800f7f8 <HAL_GetTick>
 8011496:	4643      	mov	r3, r8
 8011498:	1ac0      	subs	r0, r0, r3
 801149a:	42b8      	cmp	r0, r7
 801149c:	d9f5      	bls.n	801148a <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801149e:	2003      	movs	r0, #3
 80114a0:	e665      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114a2:	2b05      	cmp	r3, #5
 80114a4:	d009      	beq.n	80114ba <HAL_RCC_OscConfig+0x3b6>
 80114a6:	4b73      	ldr	r3, [pc, #460]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80114a8:	6a1a      	ldr	r2, [r3, #32]
 80114aa:	2101      	movs	r1, #1
 80114ac:	438a      	bics	r2, r1
 80114ae:	621a      	str	r2, [r3, #32]
 80114b0:	6a1a      	ldr	r2, [r3, #32]
 80114b2:	3103      	adds	r1, #3
 80114b4:	438a      	bics	r2, r1
 80114b6:	621a      	str	r2, [r3, #32]
 80114b8:	e7de      	b.n	8011478 <HAL_RCC_OscConfig+0x374>
 80114ba:	4b6e      	ldr	r3, [pc, #440]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80114bc:	6a1a      	ldr	r2, [r3, #32]
 80114be:	2104      	movs	r1, #4
 80114c0:	430a      	orrs	r2, r1
 80114c2:	621a      	str	r2, [r3, #32]
 80114c4:	6a1a      	ldr	r2, [r3, #32]
 80114c6:	3903      	subs	r1, #3
 80114c8:	430a      	orrs	r2, r1
 80114ca:	621a      	str	r2, [r3, #32]
 80114cc:	e7d4      	b.n	8011478 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 80114ce:	f7fe f993 	bl	800f7f8 <HAL_GetTick>
 80114d2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114d4:	4e67      	ldr	r6, [pc, #412]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80114d6:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114d8:	4f67      	ldr	r7, [pc, #412]	; (8011678 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114da:	6a33      	ldr	r3, [r6, #32]
 80114dc:	421d      	tst	r5, r3
 80114de:	d100      	bne.n	80114e2 <HAL_RCC_OscConfig+0x3de>
 80114e0:	e731      	b.n	8011346 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114e2:	f7fe f989 	bl	800f7f8 <HAL_GetTick>
 80114e6:	4643      	mov	r3, r8
 80114e8:	1ac0      	subs	r0, r0, r3
 80114ea:	42b8      	cmp	r0, r7
 80114ec:	d9f5      	bls.n	80114da <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 80114ee:	2003      	movs	r0, #3
 80114f0:	e63d      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80114f2:	4b60      	ldr	r3, [pc, #384]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80114f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114f6:	2104      	movs	r1, #4
 80114f8:	430a      	orrs	r2, r1
 80114fa:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80114fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114fe:	3903      	subs	r1, #3
 8011500:	430a      	orrs	r2, r1
 8011502:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011504:	f7fe f978 	bl	800f7f8 <HAL_GetTick>
 8011508:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801150a:	4e5a      	ldr	r6, [pc, #360]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 801150c:	2502      	movs	r5, #2
 801150e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011510:	421d      	tst	r5, r3
 8011512:	d106      	bne.n	8011522 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011514:	f7fe f970 	bl	800f7f8 <HAL_GetTick>
 8011518:	1bc0      	subs	r0, r0, r7
 801151a:	2864      	cmp	r0, #100	; 0x64
 801151c:	d9f7      	bls.n	801150e <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 801151e:	2003      	movs	r0, #3
 8011520:	e625      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011522:	4954      	ldr	r1, [pc, #336]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011524:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8011526:	69a3      	ldr	r3, [r4, #24]
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	20f8      	movs	r0, #248	; 0xf8
 801152c:	4382      	bics	r2, r0
 801152e:	4313      	orrs	r3, r2
 8011530:	634b      	str	r3, [r1, #52]	; 0x34
 8011532:	e71e      	b.n	8011372 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011534:	4b4f      	ldr	r3, [pc, #316]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011538:	2104      	movs	r1, #4
 801153a:	430a      	orrs	r2, r1
 801153c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 801153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011540:	3903      	subs	r1, #3
 8011542:	438a      	bics	r2, r1
 8011544:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011546:	f7fe f957 	bl	800f7f8 <HAL_GetTick>
 801154a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801154c:	4e49      	ldr	r6, [pc, #292]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 801154e:	2502      	movs	r5, #2
 8011550:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011552:	421d      	tst	r5, r3
 8011554:	d100      	bne.n	8011558 <HAL_RCC_OscConfig+0x454>
 8011556:	e70c      	b.n	8011372 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011558:	f7fe f94e 	bl	800f7f8 <HAL_GetTick>
 801155c:	1bc0      	subs	r0, r0, r7
 801155e:	2864      	cmp	r0, #100	; 0x64
 8011560:	d9f6      	bls.n	8011550 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8011562:	2003      	movs	r0, #3
 8011564:	e603      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011566:	4b43      	ldr	r3, [pc, #268]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	22c0      	movs	r2, #192	; 0xc0
 801156c:	0252      	lsls	r2, r2, #9
 801156e:	4013      	ands	r3, r2
 8011570:	4293      	cmp	r3, r2
 8011572:	d000      	beq.n	8011576 <HAL_RCC_OscConfig+0x472>
 8011574:	e70f      	b.n	8011396 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011576:	4b3f      	ldr	r3, [pc, #252]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157a:	03db      	lsls	r3, r3, #15
 801157c:	d504      	bpl.n	8011588 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 801157e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011580:	69e3      	ldr	r3, [r4, #28]
 8011582:	2b01      	cmp	r3, #1
 8011584:	d000      	beq.n	8011588 <HAL_RCC_OscConfig+0x484>
 8011586:	e5f2      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011588:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 801158a:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801158c:	2b00      	cmp	r3, #0
 801158e:	d100      	bne.n	8011592 <HAL_RCC_OscConfig+0x48e>
 8011590:	e5ed      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011592:	4a38      	ldr	r2, [pc, #224]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011594:	6851      	ldr	r1, [r2, #4]
 8011596:	220c      	movs	r2, #12
 8011598:	400a      	ands	r2, r1
 801159a:	2a08      	cmp	r2, #8
 801159c:	d068      	beq.n	8011670 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801159e:	2b02      	cmp	r3, #2
 80115a0:	d029      	beq.n	80115f6 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 80115a2:	4a34      	ldr	r2, [pc, #208]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80115a4:	6813      	ldr	r3, [r2, #0]
 80115a6:	4935      	ldr	r1, [pc, #212]	; (801167c <HAL_RCC_OscConfig+0x578>)
 80115a8:	400b      	ands	r3, r1
 80115aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80115ac:	f7fe f924 	bl	800f7f8 <HAL_GetTick>
 80115b0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80115b2:	4d30      	ldr	r5, [pc, #192]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80115b4:	2480      	movs	r4, #128	; 0x80
 80115b6:	04a4      	lsls	r4, r4, #18
 80115b8:	682b      	ldr	r3, [r5, #0]
 80115ba:	4223      	tst	r3, r4
 80115bc:	d056      	beq.n	801166c <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80115be:	f7fe f91b 	bl	800f7f8 <HAL_GetTick>
 80115c2:	1b80      	subs	r0, r0, r6
 80115c4:	2864      	cmp	r0, #100	; 0x64
 80115c6:	d9f7      	bls.n	80115b8 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 80115c8:	2003      	movs	r0, #3
 80115ca:	e5d0      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 80115cc:	4a29      	ldr	r2, [pc, #164]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80115ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80115d0:	492b      	ldr	r1, [pc, #172]	; (8011680 <HAL_RCC_OscConfig+0x57c>)
 80115d2:	400b      	ands	r3, r1
 80115d4:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80115d6:	f7fe f90f 	bl	800f7f8 <HAL_GetTick>
 80115da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80115dc:	4e25      	ldr	r6, [pc, #148]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80115de:	2580      	movs	r5, #128	; 0x80
 80115e0:	026d      	lsls	r5, r5, #9
 80115e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80115e4:	422b      	tst	r3, r5
 80115e6:	d0cf      	beq.n	8011588 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115e8:	f7fe f906 	bl	800f7f8 <HAL_GetTick>
 80115ec:	1bc0      	subs	r0, r0, r7
 80115ee:	2864      	cmp	r0, #100	; 0x64
 80115f0:	d9f7      	bls.n	80115e2 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 80115f2:	2003      	movs	r0, #3
 80115f4:	e5bb      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 80115f6:	4a1f      	ldr	r2, [pc, #124]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 80115f8:	6813      	ldr	r3, [r2, #0]
 80115fa:	4920      	ldr	r1, [pc, #128]	; (801167c <HAL_RCC_OscConfig+0x578>)
 80115fc:	400b      	ands	r3, r1
 80115fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011600:	f7fe f8fa 	bl	800f7f8 <HAL_GetTick>
 8011604:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011606:	4e1b      	ldr	r6, [pc, #108]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011608:	2580      	movs	r5, #128	; 0x80
 801160a:	04ad      	lsls	r5, r5, #18
 801160c:	6833      	ldr	r3, [r6, #0]
 801160e:	422b      	tst	r3, r5
 8011610:	d006      	beq.n	8011620 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011612:	f7fe f8f1 	bl	800f7f8 <HAL_GetTick>
 8011616:	1bc0      	subs	r0, r0, r7
 8011618:	2864      	cmp	r0, #100	; 0x64
 801161a:	d9f7      	bls.n	801160c <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 801161c:	2003      	movs	r0, #3
 801161e:	e5a6      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011620:	4b14      	ldr	r3, [pc, #80]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011624:	210f      	movs	r1, #15
 8011626:	438a      	bics	r2, r1
 8011628:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801162a:	430a      	orrs	r2, r1
 801162c:	62da      	str	r2, [r3, #44]	; 0x2c
 801162e:	6859      	ldr	r1, [r3, #4]
 8011630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011632:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011634:	4302      	orrs	r2, r0
 8011636:	4813      	ldr	r0, [pc, #76]	; (8011684 <HAL_RCC_OscConfig+0x580>)
 8011638:	4001      	ands	r1, r0
 801163a:	430a      	orrs	r2, r1
 801163c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 801163e:	6819      	ldr	r1, [r3, #0]
 8011640:	2280      	movs	r2, #128	; 0x80
 8011642:	0452      	lsls	r2, r2, #17
 8011644:	430a      	orrs	r2, r1
 8011646:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011648:	f7fe f8d6 	bl	800f7f8 <HAL_GetTick>
 801164c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801164e:	4d09      	ldr	r5, [pc, #36]	; (8011674 <HAL_RCC_OscConfig+0x570>)
 8011650:	2480      	movs	r4, #128	; 0x80
 8011652:	04a4      	lsls	r4, r4, #18
 8011654:	682b      	ldr	r3, [r5, #0]
 8011656:	4223      	tst	r3, r4
 8011658:	d106      	bne.n	8011668 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801165a:	f7fe f8cd 	bl	800f7f8 <HAL_GetTick>
 801165e:	1b80      	subs	r0, r0, r6
 8011660:	2864      	cmp	r0, #100	; 0x64
 8011662:	d9f7      	bls.n	8011654 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8011664:	2003      	movs	r0, #3
 8011666:	e582      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8011668:	2000      	movs	r0, #0
 801166a:	e580      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
 801166c:	2000      	movs	r0, #0
 801166e:	e57e      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8011670:	2001      	movs	r0, #1
 8011672:	e57c      	b.n	801116e <HAL_RCC_OscConfig+0x6a>
 8011674:	40021000 	.word	0x40021000
 8011678:	00001388 	.word	0x00001388
 801167c:	feffffff 	.word	0xfeffffff
 8011680:	fffeffff 	.word	0xfffeffff
 8011684:	ffc27fff 	.word	0xffc27fff

08011688 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168a:	46ce      	mov	lr, r9
 801168c:	4647      	mov	r7, r8
 801168e:	b580      	push	{r7, lr}
 8011690:	0005      	movs	r5, r0
 8011692:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011694:	4b95      	ldr	r3, [pc, #596]	; (80118ec <HAL_RCC_ClockConfig+0x264>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	2301      	movs	r3, #1
 801169a:	4013      	ands	r3, r2
 801169c:	428b      	cmp	r3, r1
 801169e:	d300      	bcc.n	80116a2 <HAL_RCC_ClockConfig+0x1a>
 80116a0:	e089      	b.n	80117b6 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116a2:	4992      	ldr	r1, [pc, #584]	; (80118ec <HAL_RCC_ClockConfig+0x264>)
 80116a4:	680b      	ldr	r3, [r1, #0]
 80116a6:	2201      	movs	r2, #1
 80116a8:	4393      	bics	r3, r2
 80116aa:	4323      	orrs	r3, r4
 80116ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80116ae:	680b      	ldr	r3, [r1, #0]
 80116b0:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 80116b2:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80116b4:	42a2      	cmp	r2, r4
 80116b6:	d003      	beq.n	80116c0 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80116b8:	bc0c      	pop	{r2, r3}
 80116ba:	4690      	mov	r8, r2
 80116bc:	4699      	mov	r9, r3
 80116be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80116c0:	682b      	ldr	r3, [r5, #0]
 80116c2:	079b      	lsls	r3, r3, #30
 80116c4:	d506      	bpl.n	80116d4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80116c6:	4a8a      	ldr	r2, [pc, #552]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80116c8:	6853      	ldr	r3, [r2, #4]
 80116ca:	21f0      	movs	r1, #240	; 0xf0
 80116cc:	438b      	bics	r3, r1
 80116ce:	68a9      	ldr	r1, [r5, #8]
 80116d0:	430b      	orrs	r3, r1
 80116d2:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80116d4:	682b      	ldr	r3, [r5, #0]
 80116d6:	07db      	lsls	r3, r3, #31
 80116d8:	d400      	bmi.n	80116dc <HAL_RCC_ClockConfig+0x54>
 80116da:	e0f7      	b.n	80118cc <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116dc:	686b      	ldr	r3, [r5, #4]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d009      	beq.n	80116f6 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	d02b      	beq.n	801173e <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80116e6:	2b03      	cmp	r3, #3
 80116e8:	d02f      	beq.n	801174a <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116ea:	4a81      	ldr	r2, [pc, #516]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80116ec:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80116ee:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116f0:	0792      	lsls	r2, r2, #30
 80116f2:	d405      	bmi.n	8011700 <HAL_RCC_ClockConfig+0x78>
 80116f4:	e7e0      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116f6:	4a7e      	ldr	r2, [pc, #504]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80116f8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80116fa:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116fc:	0392      	lsls	r2, r2, #14
 80116fe:	d5db      	bpl.n	80116b8 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011700:	497b      	ldr	r1, [pc, #492]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011702:	684a      	ldr	r2, [r1, #4]
 8011704:	2003      	movs	r0, #3
 8011706:	4382      	bics	r2, r0
 8011708:	4313      	orrs	r3, r2
 801170a:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801170c:	f7fe f874 	bl	800f7f8 <HAL_GetTick>
 8011710:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011712:	686b      	ldr	r3, [r5, #4]
 8011714:	2b01      	cmp	r3, #1
 8011716:	d01e      	beq.n	8011756 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011718:	2b02      	cmp	r3, #2
 801171a:	d02c      	beq.n	8011776 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801171c:	2b03      	cmp	r3, #3
 801171e:	d03a      	beq.n	8011796 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011720:	4f73      	ldr	r7, [pc, #460]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011722:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011724:	4b73      	ldr	r3, [pc, #460]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 8011726:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	421e      	tst	r6, r3
 801172c:	d100      	bne.n	8011730 <HAL_RCC_ClockConfig+0xa8>
 801172e:	e0cd      	b.n	80118cc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011730:	f7fe f862 	bl	800f7f8 <HAL_GetTick>
 8011734:	1b00      	subs	r0, r0, r4
 8011736:	4540      	cmp	r0, r8
 8011738:	d9f6      	bls.n	8011728 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 801173a:	2003      	movs	r0, #3
 801173c:	e7bc      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801173e:	4a6c      	ldr	r2, [pc, #432]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011740:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011742:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011744:	0192      	lsls	r2, r2, #6
 8011746:	d4db      	bmi.n	8011700 <HAL_RCC_ClockConfig+0x78>
 8011748:	e7b6      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801174a:	4a69      	ldr	r2, [pc, #420]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 801174c:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 801174e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011750:	03d2      	lsls	r2, r2, #15
 8011752:	d4d5      	bmi.n	8011700 <HAL_RCC_ClockConfig+0x78>
 8011754:	e7b0      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011756:	4f66      	ldr	r7, [pc, #408]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011758:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801175a:	4b66      	ldr	r3, [pc, #408]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 801175c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4033      	ands	r3, r6
 8011762:	2b04      	cmp	r3, #4
 8011764:	d100      	bne.n	8011768 <HAL_RCC_ClockConfig+0xe0>
 8011766:	e0b1      	b.n	80118cc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011768:	f7fe f846 	bl	800f7f8 <HAL_GetTick>
 801176c:	1b00      	subs	r0, r0, r4
 801176e:	4540      	cmp	r0, r8
 8011770:	d9f5      	bls.n	801175e <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8011772:	2003      	movs	r0, #3
 8011774:	e7a0      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011776:	4f5e      	ldr	r7, [pc, #376]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011778:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801177a:	4b5e      	ldr	r3, [pc, #376]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 801177c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4033      	ands	r3, r6
 8011782:	2b08      	cmp	r3, #8
 8011784:	d100      	bne.n	8011788 <HAL_RCC_ClockConfig+0x100>
 8011786:	e0a1      	b.n	80118cc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011788:	f7fe f836 	bl	800f7f8 <HAL_GetTick>
 801178c:	1b00      	subs	r0, r0, r4
 801178e:	4540      	cmp	r0, r8
 8011790:	d9f5      	bls.n	801177e <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8011792:	2003      	movs	r0, #3
 8011794:	e790      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011796:	4f56      	ldr	r7, [pc, #344]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011798:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801179a:	4b56      	ldr	r3, [pc, #344]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 801179c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	4033      	ands	r3, r6
 80117a2:	2b0c      	cmp	r3, #12
 80117a4:	d100      	bne.n	80117a8 <HAL_RCC_ClockConfig+0x120>
 80117a6:	e091      	b.n	80118cc <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117a8:	f7fe f826 	bl	800f7f8 <HAL_GetTick>
 80117ac:	1b00      	subs	r0, r0, r4
 80117ae:	4540      	cmp	r0, r8
 80117b0:	d9f5      	bls.n	801179e <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 80117b2:	2003      	movs	r0, #3
 80117b4:	e780      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80117b6:	6803      	ldr	r3, [r0, #0]
 80117b8:	079b      	lsls	r3, r3, #30
 80117ba:	d506      	bpl.n	80117ca <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80117bc:	4a4c      	ldr	r2, [pc, #304]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80117be:	6853      	ldr	r3, [r2, #4]
 80117c0:	21f0      	movs	r1, #240	; 0xf0
 80117c2:	438b      	bics	r3, r1
 80117c4:	6881      	ldr	r1, [r0, #8]
 80117c6:	430b      	orrs	r3, r1
 80117c8:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80117ca:	682b      	ldr	r3, [r5, #0]
 80117cc:	07db      	lsls	r3, r3, #31
 80117ce:	d571      	bpl.n	80118b4 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80117d0:	686b      	ldr	r3, [r5, #4]
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d009      	beq.n	80117ea <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80117d6:	2b02      	cmp	r3, #2
 80117d8:	d02d      	beq.n	8011836 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80117da:	2b03      	cmp	r3, #3
 80117dc:	d031      	beq.n	8011842 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80117de:	4a44      	ldr	r2, [pc, #272]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80117e0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80117e2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80117e4:	0792      	lsls	r2, r2, #30
 80117e6:	d406      	bmi.n	80117f6 <HAL_RCC_ClockConfig+0x16e>
 80117e8:	e766      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117ea:	4a41      	ldr	r2, [pc, #260]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80117ec:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80117ee:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117f0:	0392      	lsls	r2, r2, #14
 80117f2:	d400      	bmi.n	80117f6 <HAL_RCC_ClockConfig+0x16e>
 80117f4:	e760      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80117f6:	493e      	ldr	r1, [pc, #248]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80117f8:	684a      	ldr	r2, [r1, #4]
 80117fa:	2003      	movs	r0, #3
 80117fc:	4382      	bics	r2, r0
 80117fe:	4313      	orrs	r3, r2
 8011800:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011802:	f7fd fff9 	bl	800f7f8 <HAL_GetTick>
 8011806:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011808:	686b      	ldr	r3, [r5, #4]
 801180a:	2b01      	cmp	r3, #1
 801180c:	d01f      	beq.n	801184e <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801180e:	2b02      	cmp	r3, #2
 8011810:	d02e      	beq.n	8011870 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011812:	2b03      	cmp	r3, #3
 8011814:	d03d      	beq.n	8011892 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011816:	4b36      	ldr	r3, [pc, #216]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011818:	4698      	mov	r8, r3
 801181a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801181c:	4b35      	ldr	r3, [pc, #212]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 801181e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011820:	4643      	mov	r3, r8
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	421f      	tst	r7, r3
 8011826:	d045      	beq.n	80118b4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011828:	f7fd ffe6 	bl	800f7f8 <HAL_GetTick>
 801182c:	1b80      	subs	r0, r0, r6
 801182e:	4548      	cmp	r0, r9
 8011830:	d9f6      	bls.n	8011820 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8011832:	2003      	movs	r0, #3
 8011834:	e740      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011836:	4a2e      	ldr	r2, [pc, #184]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011838:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801183a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801183c:	0192      	lsls	r2, r2, #6
 801183e:	d4da      	bmi.n	80117f6 <HAL_RCC_ClockConfig+0x16e>
 8011840:	e73a      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011842:	4a2b      	ldr	r2, [pc, #172]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011844:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8011846:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011848:	03d2      	lsls	r2, r2, #15
 801184a:	d4d4      	bmi.n	80117f6 <HAL_RCC_ClockConfig+0x16e>
 801184c:	e734      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801184e:	4b28      	ldr	r3, [pc, #160]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011850:	4698      	mov	r8, r3
 8011852:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011854:	4b27      	ldr	r3, [pc, #156]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 8011856:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011858:	4643      	mov	r3, r8
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	403b      	ands	r3, r7
 801185e:	2b04      	cmp	r3, #4
 8011860:	d028      	beq.n	80118b4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011862:	f7fd ffc9 	bl	800f7f8 <HAL_GetTick>
 8011866:	1b80      	subs	r0, r0, r6
 8011868:	4548      	cmp	r0, r9
 801186a:	d9f5      	bls.n	8011858 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 801186c:	2003      	movs	r0, #3
 801186e:	e723      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011870:	4b1f      	ldr	r3, [pc, #124]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011872:	4698      	mov	r8, r3
 8011874:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011876:	4b1f      	ldr	r3, [pc, #124]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 8011878:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801187a:	4643      	mov	r3, r8
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	403b      	ands	r3, r7
 8011880:	2b08      	cmp	r3, #8
 8011882:	d017      	beq.n	80118b4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011884:	f7fd ffb8 	bl	800f7f8 <HAL_GetTick>
 8011888:	1b80      	subs	r0, r0, r6
 801188a:	4548      	cmp	r0, r9
 801188c:	d9f5      	bls.n	801187a <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 801188e:	2003      	movs	r0, #3
 8011890:	e712      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011892:	4b17      	ldr	r3, [pc, #92]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 8011894:	4698      	mov	r8, r3
 8011896:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011898:	4b16      	ldr	r3, [pc, #88]	; (80118f4 <HAL_RCC_ClockConfig+0x26c>)
 801189a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801189c:	4643      	mov	r3, r8
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	403b      	ands	r3, r7
 80118a2:	2b0c      	cmp	r3, #12
 80118a4:	d006      	beq.n	80118b4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118a6:	f7fd ffa7 	bl	800f7f8 <HAL_GetTick>
 80118aa:	1b80      	subs	r0, r0, r6
 80118ac:	4548      	cmp	r0, r9
 80118ae:	d9f5      	bls.n	801189c <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 80118b0:	2003      	movs	r0, #3
 80118b2:	e701      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80118b4:	490d      	ldr	r1, [pc, #52]	; (80118ec <HAL_RCC_ClockConfig+0x264>)
 80118b6:	680b      	ldr	r3, [r1, #0]
 80118b8:	2201      	movs	r2, #1
 80118ba:	4393      	bics	r3, r2
 80118bc:	4323      	orrs	r3, r4
 80118be:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80118c0:	680b      	ldr	r3, [r1, #0]
 80118c2:	401a      	ands	r2, r3
      return HAL_ERROR;
 80118c4:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80118c6:	42a2      	cmp	r2, r4
 80118c8:	d000      	beq.n	80118cc <HAL_RCC_ClockConfig+0x244>
 80118ca:	e6f5      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80118cc:	682b      	ldr	r3, [r5, #0]
 80118ce:	075b      	lsls	r3, r3, #29
 80118d0:	d506      	bpl.n	80118e0 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80118d2:	4a07      	ldr	r2, [pc, #28]	; (80118f0 <HAL_RCC_ClockConfig+0x268>)
 80118d4:	6853      	ldr	r3, [r2, #4]
 80118d6:	4908      	ldr	r1, [pc, #32]	; (80118f8 <HAL_RCC_ClockConfig+0x270>)
 80118d8:	400b      	ands	r3, r1
 80118da:	68e9      	ldr	r1, [r5, #12]
 80118dc:	430b      	orrs	r3, r1
 80118de:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80118e0:	2000      	movs	r0, #0
 80118e2:	f7fd ff5f 	bl	800f7a4 <HAL_InitTick>
  return HAL_OK;
 80118e6:	2000      	movs	r0, #0
 80118e8:	e6e6      	b.n	80116b8 <HAL_RCC_ClockConfig+0x30>
 80118ea:	46c0      	nop			; (mov r8, r8)
 80118ec:	40022000 	.word	0x40022000
 80118f0:	40021000 	.word	0x40021000
 80118f4:	00001388 	.word	0x00001388
 80118f8:	fffff8ff 	.word	0xfffff8ff

080118fc <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80118fc:	b530      	push	{r4, r5, lr}
 80118fe:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011900:	aa04      	add	r2, sp, #16
 8011902:	4b21      	ldr	r3, [pc, #132]	; (8011988 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011904:	0018      	movs	r0, r3
 8011906:	c832      	ldmia	r0!, {r1, r4, r5}
 8011908:	c232      	stmia	r2!, {r1, r4, r5}
 801190a:	0011      	movs	r1, r2
 801190c:	6802      	ldr	r2, [r0, #0]
 801190e:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011910:	466a      	mov	r2, sp
 8011912:	3310      	adds	r3, #16
 8011914:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011916:	c213      	stmia	r2!, {r0, r1, r4}
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801191c:	4b1b      	ldr	r3, [pc, #108]	; (801198c <HAL_RCC_GetSysClockFreq+0x90>)
 801191e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011920:	200c      	movs	r0, #12
 8011922:	4018      	ands	r0, r3
 8011924:	2808      	cmp	r0, #8
 8011926:	d00a      	beq.n	801193e <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011928:	380c      	subs	r0, #12
 801192a:	4243      	negs	r3, r0
 801192c:	4158      	adcs	r0, r3
 801192e:	4240      	negs	r0, r0
 8011930:	4b17      	ldr	r3, [pc, #92]	; (8011990 <HAL_RCC_GetSysClockFreq+0x94>)
 8011932:	4018      	ands	r0, r3
 8011934:	4b17      	ldr	r3, [pc, #92]	; (8011994 <HAL_RCC_GetSysClockFreq+0x98>)
 8011936:	469c      	mov	ip, r3
 8011938:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801193a:	b009      	add	sp, #36	; 0x24
 801193c:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 801193e:	0c99      	lsrs	r1, r3, #18
 8011940:	220f      	movs	r2, #15
 8011942:	4011      	ands	r1, r2
 8011944:	a804      	add	r0, sp, #16
 8011946:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011948:	4910      	ldr	r1, [pc, #64]	; (801198c <HAL_RCC_GetSysClockFreq+0x90>)
 801194a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801194c:	400a      	ands	r2, r1
 801194e:	4669      	mov	r1, sp
 8011950:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011952:	22c0      	movs	r2, #192	; 0xc0
 8011954:	0252      	lsls	r2, r2, #9
 8011956:	4013      	ands	r3, r2
 8011958:	2280      	movs	r2, #128	; 0x80
 801195a:	0252      	lsls	r2, r2, #9
 801195c:	4293      	cmp	r3, r2
 801195e:	d008      	beq.n	8011972 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011960:	22c0      	movs	r2, #192	; 0xc0
 8011962:	0252      	lsls	r2, r2, #9
 8011964:	4293      	cmp	r3, r2
 8011966:	d009      	beq.n	801197c <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011968:	480a      	ldr	r0, [pc, #40]	; (8011994 <HAL_RCC_GetSysClockFreq+0x98>)
 801196a:	f7ee fbf1 	bl	8000150 <__udivsi3>
 801196e:	4360      	muls	r0, r4
 8011970:	e7e3      	b.n	801193a <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011972:	4808      	ldr	r0, [pc, #32]	; (8011994 <HAL_RCC_GetSysClockFreq+0x98>)
 8011974:	f7ee fbec 	bl	8000150 <__udivsi3>
 8011978:	4360      	muls	r0, r4
 801197a:	e7de      	b.n	801193a <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 801197c:	4806      	ldr	r0, [pc, #24]	; (8011998 <HAL_RCC_GetSysClockFreq+0x9c>)
 801197e:	f7ee fbe7 	bl	8000150 <__udivsi3>
 8011982:	4360      	muls	r0, r4
 8011984:	e7d9      	b.n	801193a <HAL_RCC_GetSysClockFreq+0x3e>
 8011986:	46c0      	nop			; (mov r8, r8)
 8011988:	08017aa4 	.word	0x08017aa4
 801198c:	40021000 	.word	0x40021000
 8011990:	02625a00 	.word	0x02625a00
 8011994:	007a1200 	.word	0x007a1200
 8011998:	02dc6c00 	.word	0x02dc6c00

0801199c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801199c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801199e:	f7ff ffad 	bl	80118fc <HAL_RCC_GetSysClockFreq>
 80119a2:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	061b      	lsls	r3, r3, #24
 80119a8:	0f1b      	lsrs	r3, r3, #28
 80119aa:	4a04      	ldr	r2, [pc, #16]	; (80119bc <HAL_RCC_GetHCLKFreq+0x20>)
 80119ac:	5cd3      	ldrb	r3, [r2, r3]
 80119ae:	40d8      	lsrs	r0, r3
 80119b0:	4b03      	ldr	r3, [pc, #12]	; (80119c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80119b2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80119b4:	bd10      	pop	{r4, pc}
 80119b6:	46c0      	nop			; (mov r8, r8)
 80119b8:	40021000 	.word	0x40021000
 80119bc:	0801a920 	.word	0x0801a920
 80119c0:	20000090 	.word	0x20000090

080119c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80119c4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80119c6:	f7ff ffe9 	bl	801199c <HAL_RCC_GetHCLKFreq>
 80119ca:	4b04      	ldr	r3, [pc, #16]	; (80119dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	055b      	lsls	r3, r3, #21
 80119d0:	0f5b      	lsrs	r3, r3, #29
 80119d2:	4a03      	ldr	r2, [pc, #12]	; (80119e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80119d4:	5cd3      	ldrb	r3, [r2, r3]
 80119d6:	40d8      	lsrs	r0, r3
}    
 80119d8:	bd10      	pop	{r4, pc}
 80119da:	46c0      	nop			; (mov r8, r8)
 80119dc:	40021000 	.word	0x40021000
 80119e0:	0801a920 	.word	0x0801a920

080119e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80119e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119e6:	46c6      	mov	lr, r8
 80119e8:	b500      	push	{lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80119ee:	6803      	ldr	r3, [r0, #0]
 80119f0:	03db      	lsls	r3, r3, #15
 80119f2:	d507      	bpl.n	8011a04 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80119f4:	4b43      	ldr	r3, [pc, #268]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80119f6:	6a1b      	ldr	r3, [r3, #32]
 80119f8:	6842      	ldr	r2, [r0, #4]
 80119fa:	4053      	eors	r3, r2
 80119fc:	22c0      	movs	r2, #192	; 0xc0
 80119fe:	0092      	lsls	r2, r2, #2
 8011a00:	4213      	tst	r3, r2
 8011a02:	d136      	bne.n	8011a72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	07db      	lsls	r3, r3, #31
 8011a08:	d506      	bpl.n	8011a18 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011a0a:	4a3e      	ldr	r2, [pc, #248]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011a0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011a0e:	2103      	movs	r1, #3
 8011a10:	438b      	bics	r3, r1
 8011a12:	68a1      	ldr	r1, [r4, #8]
 8011a14:	430b      	orrs	r3, r1
 8011a16:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	079b      	lsls	r3, r3, #30
 8011a1c:	d506      	bpl.n	8011a2c <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011a1e:	4a39      	ldr	r2, [pc, #228]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011a20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011a22:	4939      	ldr	r1, [pc, #228]	; (8011b08 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011a24:	400b      	ands	r3, r1
 8011a26:	68e1      	ldr	r1, [r4, #12]
 8011a28:	430b      	orrs	r3, r1
 8011a2a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	035b      	lsls	r3, r3, #13
 8011a30:	d506      	bpl.n	8011a40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011a32:	4a34      	ldr	r2, [pc, #208]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011a34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011a36:	4935      	ldr	r1, [pc, #212]	; (8011b0c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8011a38:	400b      	ands	r3, r1
 8011a3a:	6921      	ldr	r1, [r4, #16]
 8011a3c:	430b      	orrs	r3, r1
 8011a3e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011a40:	6823      	ldr	r3, [r4, #0]
 8011a42:	069b      	lsls	r3, r3, #26
 8011a44:	d506      	bpl.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011a46:	4a2f      	ldr	r2, [pc, #188]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011a48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011a4a:	2110      	movs	r1, #16
 8011a4c:	438b      	bics	r3, r1
 8011a4e:	6961      	ldr	r1, [r4, #20]
 8011a50:	430b      	orrs	r3, r1
 8011a52:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011a54:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	055b      	lsls	r3, r3, #21
 8011a5a:	d506      	bpl.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011a5c:	4a29      	ldr	r2, [pc, #164]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011a5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011a60:	2140      	movs	r1, #64	; 0x40
 8011a62:	438b      	bics	r3, r1
 8011a64:	69a1      	ldr	r1, [r4, #24]
 8011a66:	430b      	orrs	r3, r1
 8011a68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011a6a:	b002      	add	sp, #8
 8011a6c:	bc04      	pop	{r2}
 8011a6e:	4690      	mov	r8, r2
 8011a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a72:	4a24      	ldr	r2, [pc, #144]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011a74:	69d1      	ldr	r1, [r2, #28]
 8011a76:	2080      	movs	r0, #128	; 0x80
 8011a78:	0540      	lsls	r0, r0, #21
 8011a7a:	4301      	orrs	r1, r0
 8011a7c:	61d1      	str	r1, [r2, #28]
 8011a7e:	69d3      	ldr	r3, [r2, #28]
 8011a80:	4003      	ands	r3, r0
 8011a82:	9301      	str	r3, [sp, #4]
 8011a84:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011a86:	4a22      	ldr	r2, [pc, #136]	; (8011b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011a88:	6811      	ldr	r1, [r2, #0]
 8011a8a:	2380      	movs	r3, #128	; 0x80
 8011a8c:	005b      	lsls	r3, r3, #1
 8011a8e:	430b      	orrs	r3, r1
 8011a90:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011a92:	f7fd feb1 	bl	800f7f8 <HAL_GetTick>
 8011a96:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011a98:	4e1d      	ldr	r6, [pc, #116]	; (8011b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011a9a:	2580      	movs	r5, #128	; 0x80
 8011a9c:	006d      	lsls	r5, r5, #1
 8011a9e:	6833      	ldr	r3, [r6, #0]
 8011aa0:	422b      	tst	r3, r5
 8011aa2:	d106      	bne.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011aa4:	f7fd fea8 	bl	800f7f8 <HAL_GetTick>
 8011aa8:	1bc0      	subs	r0, r0, r7
 8011aaa:	2864      	cmp	r0, #100	; 0x64
 8011aac:	d9f7      	bls.n	8011a9e <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011aae:	2003      	movs	r0, #3
 8011ab0:	e7db      	b.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011ab2:	4b14      	ldr	r3, [pc, #80]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ab4:	6a18      	ldr	r0, [r3, #32]
 8011ab6:	4a17      	ldr	r2, [pc, #92]	; (8011b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011ab8:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011aba:	6a1d      	ldr	r5, [r3, #32]
 8011abc:	2180      	movs	r1, #128	; 0x80
 8011abe:	0249      	lsls	r1, r1, #9
 8011ac0:	4329      	orrs	r1, r5
 8011ac2:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011ac4:	6a19      	ldr	r1, [r3, #32]
 8011ac6:	4d14      	ldr	r5, [pc, #80]	; (8011b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8011ac8:	4029      	ands	r1, r5
 8011aca:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011acc:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011ace:	0783      	lsls	r3, r0, #30
 8011ad0:	d407      	bmi.n	8011ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011ad2:	4a0c      	ldr	r2, [pc, #48]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ad4:	6a13      	ldr	r3, [r2, #32]
 8011ad6:	490f      	ldr	r1, [pc, #60]	; (8011b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011ad8:	400b      	ands	r3, r1
 8011ada:	6861      	ldr	r1, [r4, #4]
 8011adc:	430b      	orrs	r3, r1
 8011ade:	6213      	str	r3, [r2, #32]
 8011ae0:	e790      	b.n	8011a04 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011ae2:	f7fd fe89 	bl	800f7f8 <HAL_GetTick>
 8011ae6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011ae8:	4e06      	ldr	r6, [pc, #24]	; (8011b04 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011aea:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011aec:	4f0b      	ldr	r7, [pc, #44]	; (8011b1c <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011aee:	6a33      	ldr	r3, [r6, #32]
 8011af0:	421d      	tst	r5, r3
 8011af2:	d1ee      	bne.n	8011ad2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011af4:	f7fd fe80 	bl	800f7f8 <HAL_GetTick>
 8011af8:	4643      	mov	r3, r8
 8011afa:	1ac0      	subs	r0, r0, r3
 8011afc:	42b8      	cmp	r0, r7
 8011afe:	d9f6      	bls.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8011b00:	2003      	movs	r0, #3
 8011b02:	e7b2      	b.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
 8011b04:	40021000 	.word	0x40021000
 8011b08:	fffcffff 	.word	0xfffcffff
 8011b0c:	fff3ffff 	.word	0xfff3ffff
 8011b10:	40007000 	.word	0x40007000
 8011b14:	fffffcff 	.word	0xfffffcff
 8011b18:	fffeffff 	.word	0xfffeffff
 8011b1c:	00001388 	.word	0x00001388

08011b20 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011b20:	4770      	bx	lr

08011b22 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8011b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b24:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011b26:	6802      	ldr	r2, [r0, #0]
 8011b28:	68d3      	ldr	r3, [r2, #12]
 8011b2a:	21a0      	movs	r1, #160	; 0xa0
 8011b2c:	438b      	bics	r3, r1
 8011b2e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011b30:	f7fd fe62 	bl	800f7f8 <HAL_GetTick>
 8011b34:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011b36:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b38:	26fa      	movs	r6, #250	; 0xfa
 8011b3a:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011b3c:	6823      	ldr	r3, [r4, #0]
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	421d      	tst	r5, r3
 8011b42:	d106      	bne.n	8011b52 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b44:	f7fd fe58 	bl	800f7f8 <HAL_GetTick>
 8011b48:	1bc0      	subs	r0, r0, r7
 8011b4a:	42b0      	cmp	r0, r6
 8011b4c:	d9f6      	bls.n	8011b3c <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8011b4e:	2003      	movs	r0, #3
 8011b50:	e000      	b.n	8011b54 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8011b52:	2000      	movs	r0, #0
}
 8011b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8011b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b58:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b5a:	6803      	ldr	r3, [r0, #0]
 8011b5c:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8011b5e:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b60:	0652      	lsls	r2, r2, #25
 8011b62:	d500      	bpl.n	8011b66 <RTC_EnterInitMode+0x10>
}
 8011b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011b66:	2201      	movs	r2, #1
 8011b68:	4252      	negs	r2, r2
 8011b6a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011b6c:	f7fd fe44 	bl	800f7f8 <HAL_GetTick>
 8011b70:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b72:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b74:	26fa      	movs	r6, #250	; 0xfa
 8011b76:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	421d      	tst	r5, r3
 8011b7e:	d106      	bne.n	8011b8e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b80:	f7fd fe3a 	bl	800f7f8 <HAL_GetTick>
 8011b84:	1bc0      	subs	r0, r0, r7
 8011b86:	42b0      	cmp	r0, r6
 8011b88:	d9f6      	bls.n	8011b78 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011b8a:	2003      	movs	r0, #3
 8011b8c:	e7ea      	b.n	8011b64 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011b8e:	2000      	movs	r0, #0
 8011b90:	e7e8      	b.n	8011b64 <RTC_EnterInitMode+0xe>
	...

08011b94 <HAL_RTC_Init>:
{
 8011b94:	b570      	push	{r4, r5, r6, lr}
 8011b96:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011b98:	d046      	beq.n	8011c28 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011b9a:	7f43      	ldrb	r3, [r0, #29]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d038      	beq.n	8011c12 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011ba0:	2302      	movs	r3, #2
 8011ba2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	22ca      	movs	r2, #202	; 0xca
 8011ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	3a77      	subs	r2, #119	; 0x77
 8011bae:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011bb0:	0020      	movs	r0, r4
 8011bb2:	f7ff ffd0 	bl	8011b56 <RTC_EnterInitMode>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d12f      	bne.n	8011c1a <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	6893      	ldr	r3, [r2, #8]
 8011bbe:	491b      	ldr	r1, [pc, #108]	; (8011c2c <HAL_RTC_Init+0x98>)
 8011bc0:	400b      	ands	r3, r1
 8011bc2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011bc4:	6822      	ldr	r2, [r4, #0]
 8011bc6:	6891      	ldr	r1, [r2, #8]
 8011bc8:	6863      	ldr	r3, [r4, #4]
 8011bca:	6925      	ldr	r5, [r4, #16]
 8011bcc:	432b      	orrs	r3, r5
 8011bce:	6965      	ldr	r5, [r4, #20]
 8011bd0:	432b      	orrs	r3, r5
 8011bd2:	430b      	orrs	r3, r1
 8011bd4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	68e2      	ldr	r2, [r4, #12]
 8011bda:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011bdc:	6822      	ldr	r2, [r4, #0]
 8011bde:	6911      	ldr	r1, [r2, #16]
 8011be0:	68a3      	ldr	r3, [r4, #8]
 8011be2:	041b      	lsls	r3, r3, #16
 8011be4:	430b      	orrs	r3, r1
 8011be6:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011be8:	6822      	ldr	r2, [r4, #0]
 8011bea:	68d3      	ldr	r3, [r2, #12]
 8011bec:	2180      	movs	r1, #128	; 0x80
 8011bee:	438b      	bics	r3, r1
 8011bf0:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011bf2:	6822      	ldr	r2, [r4, #0]
 8011bf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011bf6:	490e      	ldr	r1, [pc, #56]	; (8011c30 <HAL_RTC_Init+0x9c>)
 8011bf8:	400b      	ands	r3, r1
 8011bfa:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011bfc:	6822      	ldr	r2, [r4, #0]
 8011bfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011c00:	69a1      	ldr	r1, [r4, #24]
 8011c02:	430b      	orrs	r3, r1
 8011c04:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	22ff      	movs	r2, #255	; 0xff
 8011c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	7763      	strb	r3, [r4, #29]
}
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8011c12:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011c14:	f7ff ff84 	bl	8011b20 <HAL_RTC_MspInit>
 8011c18:	e7c2      	b.n	8011ba0 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	22ff      	movs	r2, #255	; 0xff
 8011c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011c20:	2304      	movs	r3, #4
 8011c22:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011c24:	2001      	movs	r0, #1
 8011c26:	e7f3      	b.n	8011c10 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8011c28:	2001      	movs	r0, #1
 8011c2a:	e7f1      	b.n	8011c10 <HAL_RTC_Init+0x7c>
 8011c2c:	ff8fffbf 	.word	0xff8fffbf
 8011c30:	fffbffff 	.word	0xfffbffff

08011c34 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011c34:	2809      	cmp	r0, #9
 8011c36:	d909      	bls.n	8011c4c <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8011c38:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8011c3a:	3301      	adds	r3, #1
    Value -= 10;
 8011c3c:	380a      	subs	r0, #10
 8011c3e:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8011c40:	2809      	cmp	r0, #9
 8011c42:	d8fa      	bhi.n	8011c3a <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011c44:	011b      	lsls	r3, r3, #4
 8011c46:	4318      	orrs	r0, r3
 8011c48:	b2c0      	uxtb	r0, r0
}
 8011c4a:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	e7f9      	b.n	8011c44 <RTC_ByteToBcd2+0x10>

08011c50 <HAL_RTC_SetTime>:
{
 8011c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c52:	46c6      	mov	lr, r8
 8011c54:	b500      	push	{lr}
 8011c56:	0004      	movs	r4, r0
 8011c58:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011c5a:	7f03      	ldrb	r3, [r0, #28]
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d100      	bne.n	8011c62 <HAL_RTC_SetTime+0x12>
 8011c60:	e075      	b.n	8011d4e <HAL_RTC_SetTime+0xfe>
 8011c62:	2301      	movs	r3, #1
 8011c64:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011c66:	3301      	adds	r3, #1
 8011c68:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011c6a:	2a00      	cmp	r2, #0
 8011c6c:	d144      	bne.n	8011cf8 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011c6e:	6803      	ldr	r3, [r0, #0]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	065b      	lsls	r3, r3, #25
 8011c74:	d401      	bmi.n	8011c7a <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8011c76:	2300      	movs	r3, #0
 8011c78:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011c7a:	7830      	ldrb	r0, [r6, #0]
 8011c7c:	f7ff ffda 	bl	8011c34 <RTC_ByteToBcd2>
 8011c80:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011c82:	7870      	ldrb	r0, [r6, #1]
 8011c84:	f7ff ffd6 	bl	8011c34 <RTC_ByteToBcd2>
 8011c88:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011c8a:	78b0      	ldrb	r0, [r6, #2]
 8011c8c:	f7ff ffd2 	bl	8011c34 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011c90:	7a35      	ldrb	r5, [r6, #8]
 8011c92:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011c94:	4305      	orrs	r5, r0
 8011c96:	4643      	mov	r3, r8
 8011c98:	0418      	lsls	r0, r3, #16
 8011c9a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011c9c:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011c9e:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	22ca      	movs	r2, #202	; 0xca
 8011ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	3a77      	subs	r2, #119	; 0x77
 8011caa:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011cac:	0020      	movs	r0, r4
 8011cae:	f7ff ff52 	bl	8011b56 <RTC_EnterInitMode>
 8011cb2:	1e07      	subs	r7, r0, #0
 8011cb4:	d131      	bne.n	8011d1a <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011cb6:	6823      	ldr	r3, [r4, #0]
 8011cb8:	4826      	ldr	r0, [pc, #152]	; (8011d54 <HAL_RTC_SetTime+0x104>)
 8011cba:	4005      	ands	r5, r0
 8011cbc:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011cbe:	6822      	ldr	r2, [r4, #0]
 8011cc0:	6893      	ldr	r3, [r2, #8]
 8011cc2:	4925      	ldr	r1, [pc, #148]	; (8011d58 <HAL_RTC_SetTime+0x108>)
 8011cc4:	400b      	ands	r3, r1
 8011cc6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011cc8:	6822      	ldr	r2, [r4, #0]
 8011cca:	6891      	ldr	r1, [r2, #8]
 8011ccc:	68f3      	ldr	r3, [r6, #12]
 8011cce:	6930      	ldr	r0, [r6, #16]
 8011cd0:	4303      	orrs	r3, r0
 8011cd2:	430b      	orrs	r3, r1
 8011cd4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011cd6:	6822      	ldr	r2, [r4, #0]
 8011cd8:	68d3      	ldr	r3, [r2, #12]
 8011cda:	2180      	movs	r1, #128	; 0x80
 8011cdc:	438b      	bics	r3, r1
 8011cde:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	069b      	lsls	r3, r3, #26
 8011ce6:	d524      	bpl.n	8011d32 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	22ff      	movs	r2, #255	; 0xff
 8011cec:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8011cf6:	e018      	b.n	8011d2a <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011cf8:	6803      	ldr	r3, [r0, #0]
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	065b      	lsls	r3, r3, #25
 8011cfe:	d401      	bmi.n	8011d04 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8011d00:	2300      	movs	r3, #0
 8011d02:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d04:	7835      	ldrb	r5, [r6, #0]
 8011d06:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011d08:	7870      	ldrb	r0, [r6, #1]
 8011d0a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d0c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011d0e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011d10:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011d12:	7a30      	ldrb	r0, [r6, #8]
 8011d14:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d16:	4305      	orrs	r5, r0
 8011d18:	e7c2      	b.n	8011ca0 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	22ff      	movs	r2, #255	; 0xff
 8011d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011d20:	2304      	movs	r3, #4
 8011d22:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011d24:	2300      	movs	r3, #0
 8011d26:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011d28:	2701      	movs	r7, #1
}
 8011d2a:	0038      	movs	r0, r7
 8011d2c:	bc04      	pop	{r2}
 8011d2e:	4690      	mov	r8, r2
 8011d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011d32:	0020      	movs	r0, r4
 8011d34:	f7ff fef5 	bl	8011b22 <HAL_RTC_WaitForSynchro>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d0d5      	beq.n	8011ce8 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	22ff      	movs	r2, #255	; 0xff
 8011d40:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011d42:	2304      	movs	r3, #4
 8011d44:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011d46:	2300      	movs	r3, #0
 8011d48:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011d4a:	2701      	movs	r7, #1
 8011d4c:	e7ed      	b.n	8011d2a <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8011d4e:	2702      	movs	r7, #2
 8011d50:	e7eb      	b.n	8011d2a <HAL_RTC_SetTime+0xda>
 8011d52:	46c0      	nop			; (mov r8, r8)
 8011d54:	007f7f7f 	.word	0x007f7f7f
 8011d58:	fffbffff 	.word	0xfffbffff

08011d5c <HAL_RTC_SetDate>:
{
 8011d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d5e:	46c6      	mov	lr, r8
 8011d60:	b500      	push	{lr}
 8011d62:	0004      	movs	r4, r0
 8011d64:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8011d66:	7f03      	ldrb	r3, [r0, #28]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d03a      	beq.n	8011de2 <HAL_RTC_SetDate+0x86>
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011d70:	3301      	adds	r3, #1
 8011d72:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011d74:	2a00      	cmp	r2, #0
 8011d76:	d136      	bne.n	8011de6 <HAL_RTC_SetDate+0x8a>
 8011d78:	784b      	ldrb	r3, [r1, #1]
 8011d7a:	06da      	lsls	r2, r3, #27
 8011d7c:	d503      	bpl.n	8011d86 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011d7e:	2210      	movs	r2, #16
 8011d80:	4393      	bics	r3, r2
 8011d82:	330a      	adds	r3, #10
 8011d84:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011d86:	78f0      	ldrb	r0, [r6, #3]
 8011d88:	f7ff ff54 	bl	8011c34 <RTC_ByteToBcd2>
 8011d8c:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011d8e:	7870      	ldrb	r0, [r6, #1]
 8011d90:	f7ff ff50 	bl	8011c34 <RTC_ByteToBcd2>
 8011d94:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011d96:	78b0      	ldrb	r0, [r6, #2]
 8011d98:	f7ff ff4c 	bl	8011c34 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8011d9c:	7835      	ldrb	r5, [r6, #0]
 8011d9e:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011da0:	4305      	orrs	r5, r0
 8011da2:	4643      	mov	r3, r8
 8011da4:	0418      	lsls	r0, r3, #16
 8011da6:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011da8:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011daa:	433d      	orrs	r5, r7
 8011dac:	e025      	b.n	8011dfa <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011dae:	6823      	ldr	r3, [r4, #0]
 8011db0:	22ff      	movs	r2, #255	; 0xff
 8011db2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011db4:	2304      	movs	r3, #4
 8011db6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011db8:	2300      	movs	r3, #0
 8011dba:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011dbc:	2601      	movs	r6, #1
}
 8011dbe:	0030      	movs	r0, r6
 8011dc0:	bc04      	pop	{r2}
 8011dc2:	4690      	mov	r8, r2
 8011dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011dc6:	0020      	movs	r0, r4
 8011dc8:	f7ff feab 	bl	8011b22 <HAL_RTC_WaitForSynchro>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d02c      	beq.n	8011e2a <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	22ff      	movs	r2, #255	; 0xff
 8011dd4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011dd6:	2304      	movs	r3, #4
 8011dd8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011dda:	2300      	movs	r3, #0
 8011ddc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011dde:	2601      	movs	r6, #1
 8011de0:	e7ed      	b.n	8011dbe <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011de2:	2602      	movs	r6, #2
 8011de4:	e7eb      	b.n	8011dbe <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011de6:	78cd      	ldrb	r5, [r1, #3]
 8011de8:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8011dea:	7848      	ldrb	r0, [r1, #1]
 8011dec:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011dee:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8011df0:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011df2:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011df4:	7808      	ldrb	r0, [r1, #0]
 8011df6:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011df8:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	22ca      	movs	r2, #202	; 0xca
 8011dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8011e00:	6823      	ldr	r3, [r4, #0]
 8011e02:	3a77      	subs	r2, #119	; 0x77
 8011e04:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011e06:	0020      	movs	r0, r4
 8011e08:	f7ff fea5 	bl	8011b56 <RTC_EnterInitMode>
 8011e0c:	1e06      	subs	r6, r0, #0
 8011e0e:	d1ce      	bne.n	8011dae <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011e10:	6823      	ldr	r3, [r4, #0]
 8011e12:	480a      	ldr	r0, [pc, #40]	; (8011e3c <HAL_RTC_SetDate+0xe0>)
 8011e14:	4005      	ands	r5, r0
 8011e16:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011e18:	6822      	ldr	r2, [r4, #0]
 8011e1a:	68d3      	ldr	r3, [r2, #12]
 8011e1c:	2180      	movs	r1, #128	; 0x80
 8011e1e:	438b      	bics	r3, r1
 8011e20:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011e22:	6823      	ldr	r3, [r4, #0]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	069b      	lsls	r3, r3, #26
 8011e28:	d5cd      	bpl.n	8011dc6 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	22ff      	movs	r2, #255	; 0xff
 8011e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011e30:	2301      	movs	r3, #1
 8011e32:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011e34:	2300      	movs	r3, #0
 8011e36:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8011e38:	e7c1      	b.n	8011dbe <HAL_RTC_SetDate+0x62>
 8011e3a:	46c0      	nop			; (mov r8, r8)
 8011e3c:	00ffff3f 	.word	0x00ffff3f

08011e40 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011e40:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011e42:	0900      	lsrs	r0, r0, #4
 8011e44:	0083      	lsls	r3, r0, #2
 8011e46:	181b      	adds	r3, r3, r0
 8011e48:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011e4a:	200f      	movs	r0, #15
 8011e4c:	4010      	ands	r0, r2
 8011e4e:	1818      	adds	r0, r3, r0
 8011e50:	b2c0      	uxtb	r0, r0
}
 8011e52:	4770      	bx	lr

08011e54 <HAL_RTC_GetTime>:
{
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011e58:	6803      	ldr	r3, [r0, #0]
 8011e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e5c:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011e5e:	6803      	ldr	r3, [r0, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	490e      	ldr	r1, [pc, #56]	; (8011e9c <HAL_RTC_GetTime+0x48>)
 8011e64:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011e66:	0c19      	lsrs	r1, r3, #16
 8011e68:	203f      	movs	r0, #63	; 0x3f
 8011e6a:	4008      	ands	r0, r1
 8011e6c:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011e6e:	0a1e      	lsrs	r6, r3, #8
 8011e70:	b2f6      	uxtb	r6, r6
 8011e72:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011e74:	b2dc      	uxtb	r4, r3
 8011e76:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011e78:	2340      	movs	r3, #64	; 0x40
 8011e7a:	400b      	ands	r3, r1
 8011e7c:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	d10a      	bne.n	8011e98 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011e82:	f7ff ffdd 	bl	8011e40 <RTC_Bcd2ToByte>
 8011e86:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011e88:	0030      	movs	r0, r6
 8011e8a:	f7ff ffd9 	bl	8011e40 <RTC_Bcd2ToByte>
 8011e8e:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011e90:	0020      	movs	r0, r4
 8011e92:	f7ff ffd5 	bl	8011e40 <RTC_Bcd2ToByte>
 8011e96:	70a8      	strb	r0, [r5, #2]
}
 8011e98:	2000      	movs	r0, #0
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	007f7f7f 	.word	0x007f7f7f

08011ea0 <HAL_RTC_GetDate>:
{
 8011ea0:	b570      	push	{r4, r5, r6, lr}
 8011ea2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011ea4:	6803      	ldr	r3, [r0, #0]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	490d      	ldr	r1, [pc, #52]	; (8011ee0 <HAL_RTC_GetDate+0x40>)
 8011eaa:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011eac:	0c18      	lsrs	r0, r3, #16
 8011eae:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011eb0:	04dd      	lsls	r5, r3, #19
 8011eb2:	0eed      	lsrs	r5, r5, #27
 8011eb4:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011eb6:	b2de      	uxtb	r6, r3
 8011eb8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011eba:	041b      	lsls	r3, r3, #16
 8011ebc:	0f5b      	lsrs	r3, r3, #29
 8011ebe:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8011ec0:	2a00      	cmp	r2, #0
 8011ec2:	d10a      	bne.n	8011eda <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011ec4:	f7ff ffbc 	bl	8011e40 <RTC_Bcd2ToByte>
 8011ec8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011eca:	0028      	movs	r0, r5
 8011ecc:	f7ff ffb8 	bl	8011e40 <RTC_Bcd2ToByte>
 8011ed0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011ed2:	0030      	movs	r0, r6
 8011ed4:	f7ff ffb4 	bl	8011e40 <RTC_Bcd2ToByte>
 8011ed8:	70a0      	strb	r0, [r4, #2]
}
 8011eda:	2000      	movs	r0, #0
 8011edc:	bd70      	pop	{r4, r5, r6, pc}
 8011ede:	46c0      	nop			; (mov r8, r8)
 8011ee0:	00ffff3f 	.word	0x00ffff3f

08011ee4 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011ee4:	6803      	ldr	r3, [r0, #0]
 8011ee6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011ee8:	0089      	lsls	r1, r1, #2
 8011eea:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011eec:	600a      	str	r2, [r1, #0]
}
 8011eee:	4770      	bx	lr

08011ef0 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011ef0:	6803      	ldr	r3, [r0, #0]
 8011ef2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011ef4:	0089      	lsls	r1, r1, #2
 8011ef6:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011ef8:	6808      	ldr	r0, [r1, #0]
}
 8011efa:	4770      	bx	lr

08011efc <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011efc:	4770      	bx	lr

08011efe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011efe:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011f00:	2239      	movs	r2, #57	; 0x39
 8011f02:	2302      	movs	r3, #2
 8011f04:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011f06:	6804      	ldr	r4, [r0, #0]
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	2101      	movs	r1, #1
 8011f0c:	430b      	orrs	r3, r1
 8011f0e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011f10:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011f12:	2000      	movs	r0, #0
 8011f14:	bd10      	pop	{r4, pc}

08011f16 <HAL_TIM_PeriodElapsedCallback>:
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8011f16:	4770      	bx	lr

08011f18 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011f18:	4770      	bx	lr

08011f1a <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011f1a:	4770      	bx	lr

08011f1c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011f1c:	4770      	bx	lr

08011f1e <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011f1e:	4770      	bx	lr

08011f20 <HAL_TIM_IRQHandler>:
{
 8011f20:	b510      	push	{r4, lr}
 8011f22:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011f24:	6803      	ldr	r3, [r0, #0]
 8011f26:	691a      	ldr	r2, [r3, #16]
 8011f28:	0792      	lsls	r2, r2, #30
 8011f2a:	d50f      	bpl.n	8011f4c <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8011f2c:	68da      	ldr	r2, [r3, #12]
 8011f2e:	0792      	lsls	r2, r2, #30
 8011f30:	d50c      	bpl.n	8011f4c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011f32:	2203      	movs	r2, #3
 8011f34:	4252      	negs	r2, r2
 8011f36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8011f3c:	6803      	ldr	r3, [r0, #0]
 8011f3e:	699b      	ldr	r3, [r3, #24]
 8011f40:	079b      	lsls	r3, r3, #30
 8011f42:	d063      	beq.n	801200c <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8011f44:	f7ff ffe9 	bl	8011f1a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011f4c:	6823      	ldr	r3, [r4, #0]
 8011f4e:	691a      	ldr	r2, [r3, #16]
 8011f50:	0752      	lsls	r2, r2, #29
 8011f52:	d512      	bpl.n	8011f7a <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8011f54:	68da      	ldr	r2, [r3, #12]
 8011f56:	0752      	lsls	r2, r2, #29
 8011f58:	d50f      	bpl.n	8011f7a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011f5a:	2205      	movs	r2, #5
 8011f5c:	4252      	negs	r2, r2
 8011f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011f60:	2302      	movs	r3, #2
 8011f62:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	699a      	ldr	r2, [r3, #24]
 8011f68:	23c0      	movs	r3, #192	; 0xc0
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	421a      	tst	r2, r3
 8011f6e:	d053      	beq.n	8012018 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8011f70:	0020      	movs	r0, r4
 8011f72:	f7ff ffd2 	bl	8011f1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f76:	2300      	movs	r3, #0
 8011f78:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	691a      	ldr	r2, [r3, #16]
 8011f7e:	0712      	lsls	r2, r2, #28
 8011f80:	d510      	bpl.n	8011fa4 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8011f82:	68da      	ldr	r2, [r3, #12]
 8011f84:	0712      	lsls	r2, r2, #28
 8011f86:	d50d      	bpl.n	8011fa4 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011f88:	2209      	movs	r2, #9
 8011f8a:	4252      	negs	r2, r2
 8011f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011f8e:	2304      	movs	r3, #4
 8011f90:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8011f92:	6823      	ldr	r3, [r4, #0]
 8011f94:	69db      	ldr	r3, [r3, #28]
 8011f96:	079b      	lsls	r3, r3, #30
 8011f98:	d045      	beq.n	8012026 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8011f9a:	0020      	movs	r0, r4
 8011f9c:	f7ff ffbd 	bl	8011f1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011fa4:	6823      	ldr	r3, [r4, #0]
 8011fa6:	691a      	ldr	r2, [r3, #16]
 8011fa8:	06d2      	lsls	r2, r2, #27
 8011faa:	d512      	bpl.n	8011fd2 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8011fac:	68da      	ldr	r2, [r3, #12]
 8011fae:	06d2      	lsls	r2, r2, #27
 8011fb0:	d50f      	bpl.n	8011fd2 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011fb2:	2211      	movs	r2, #17
 8011fb4:	4252      	negs	r2, r2
 8011fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011fb8:	2308      	movs	r3, #8
 8011fba:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8011fbc:	6823      	ldr	r3, [r4, #0]
 8011fbe:	69da      	ldr	r2, [r3, #28]
 8011fc0:	23c0      	movs	r3, #192	; 0xc0
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	421a      	tst	r2, r3
 8011fc6:	d035      	beq.n	8012034 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8011fc8:	0020      	movs	r0, r4
 8011fca:	f7ff ffa6 	bl	8011f1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	691a      	ldr	r2, [r3, #16]
 8011fd6:	07d2      	lsls	r2, r2, #31
 8011fd8:	d502      	bpl.n	8011fe0 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8011fda:	68da      	ldr	r2, [r3, #12]
 8011fdc:	07d2      	lsls	r2, r2, #31
 8011fde:	d430      	bmi.n	8012042 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011fe0:	6823      	ldr	r3, [r4, #0]
 8011fe2:	691a      	ldr	r2, [r3, #16]
 8011fe4:	0612      	lsls	r2, r2, #24
 8011fe6:	d502      	bpl.n	8011fee <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8011fe8:	68da      	ldr	r2, [r3, #12]
 8011fea:	0612      	lsls	r2, r2, #24
 8011fec:	d430      	bmi.n	8012050 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011fee:	6823      	ldr	r3, [r4, #0]
 8011ff0:	691a      	ldr	r2, [r3, #16]
 8011ff2:	0652      	lsls	r2, r2, #25
 8011ff4:	d502      	bpl.n	8011ffc <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8011ff6:	68da      	ldr	r2, [r3, #12]
 8011ff8:	0652      	lsls	r2, r2, #25
 8011ffa:	d430      	bmi.n	801205e <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011ffc:	6823      	ldr	r3, [r4, #0]
 8011ffe:	691a      	ldr	r2, [r3, #16]
 8012000:	0692      	lsls	r2, r2, #26
 8012002:	d502      	bpl.n	801200a <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8012004:	68da      	ldr	r2, [r3, #12]
 8012006:	0692      	lsls	r2, r2, #26
 8012008:	d430      	bmi.n	801206c <HAL_TIM_IRQHandler+0x14c>
}
 801200a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801200c:	f7ff ff84 	bl	8011f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012010:	0020      	movs	r0, r4
 8012012:	f7ff ff83 	bl	8011f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8012016:	e797      	b.n	8011f48 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012018:	0020      	movs	r0, r4
 801201a:	f7ff ff7d 	bl	8011f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801201e:	0020      	movs	r0, r4
 8012020:	f7ff ff7c 	bl	8011f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8012024:	e7a7      	b.n	8011f76 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012026:	0020      	movs	r0, r4
 8012028:	f7ff ff76 	bl	8011f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801202c:	0020      	movs	r0, r4
 801202e:	f7ff ff75 	bl	8011f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8012032:	e7b5      	b.n	8011fa0 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012034:	0020      	movs	r0, r4
 8012036:	f7ff ff6f 	bl	8011f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801203a:	0020      	movs	r0, r4
 801203c:	f7ff ff6e 	bl	8011f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8012040:	e7c5      	b.n	8011fce <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012042:	2202      	movs	r2, #2
 8012044:	4252      	negs	r2, r2
 8012046:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8012048:	0020      	movs	r0, r4
 801204a:	f7ff ff64 	bl	8011f16 <HAL_TIM_PeriodElapsedCallback>
 801204e:	e7c7      	b.n	8011fe0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012050:	2281      	movs	r2, #129	; 0x81
 8012052:	4252      	negs	r2, r2
 8012054:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8012056:	0020      	movs	r0, r4
 8012058:	f000 f8cd 	bl	80121f6 <HAL_TIMEx_BreakCallback>
 801205c:	e7c7      	b.n	8011fee <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801205e:	2241      	movs	r2, #65	; 0x41
 8012060:	4252      	negs	r2, r2
 8012062:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8012064:	0020      	movs	r0, r4
 8012066:	f7ff ff5a 	bl	8011f1e <HAL_TIM_TriggerCallback>
 801206a:	e7c7      	b.n	8011ffc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801206c:	2221      	movs	r2, #33	; 0x21
 801206e:	4252      	negs	r2, r2
 8012070:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8012072:	0020      	movs	r0, r4
 8012074:	f000 f8be 	bl	80121f4 <HAL_TIMEx_CommutationCallback>
}
 8012078:	e7c7      	b.n	801200a <HAL_TIM_IRQHandler+0xea>
	...

0801207c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 801207c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801207e:	4a36      	ldr	r2, [pc, #216]	; (8012158 <TIM_Base_SetConfig+0xdc>)
 8012080:	4290      	cmp	r0, r2
 8012082:	d022      	beq.n	80120ca <TIM_Base_SetConfig+0x4e>
 8012084:	2280      	movs	r2, #128	; 0x80
 8012086:	05d2      	lsls	r2, r2, #23
 8012088:	4290      	cmp	r0, r2
 801208a:	d014      	beq.n	80120b6 <TIM_Base_SetConfig+0x3a>
 801208c:	4a33      	ldr	r2, [pc, #204]	; (801215c <TIM_Base_SetConfig+0xe0>)
 801208e:	4290      	cmp	r0, r2
 8012090:	d016      	beq.n	80120c0 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012092:	4a33      	ldr	r2, [pc, #204]	; (8012160 <TIM_Base_SetConfig+0xe4>)
 8012094:	4290      	cmp	r0, r2
 8012096:	d040      	beq.n	801211a <TIM_Base_SetConfig+0x9e>
 8012098:	4a32      	ldr	r2, [pc, #200]	; (8012164 <TIM_Base_SetConfig+0xe8>)
 801209a:	4290      	cmp	r0, r2
 801209c:	d047      	beq.n	801212e <TIM_Base_SetConfig+0xb2>
 801209e:	4a32      	ldr	r2, [pc, #200]	; (8012168 <TIM_Base_SetConfig+0xec>)
 80120a0:	4290      	cmp	r0, r2
 80120a2:	d04e      	beq.n	8012142 <TIM_Base_SetConfig+0xc6>
 80120a4:	4a31      	ldr	r2, [pc, #196]	; (801216c <TIM_Base_SetConfig+0xf0>)
 80120a6:	4290      	cmp	r0, r2
 80120a8:	d02d      	beq.n	8012106 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80120aa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80120ac:	688b      	ldr	r3, [r1, #8]
 80120ae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80120b0:	680b      	ldr	r3, [r1, #0]
 80120b2:	6283      	str	r3, [r0, #40]	; 0x28
 80120b4:	e024      	b.n	8012100 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120b6:	2270      	movs	r2, #112	; 0x70
 80120b8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80120ba:	684a      	ldr	r2, [r1, #4]
 80120bc:	4313      	orrs	r3, r2
 80120be:	e008      	b.n	80120d2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120c0:	2270      	movs	r2, #112	; 0x70
 80120c2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80120c4:	684a      	ldr	r2, [r1, #4]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	e003      	b.n	80120d2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120ca:	2270      	movs	r2, #112	; 0x70
 80120cc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80120ce:	684a      	ldr	r2, [r1, #4]
 80120d0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80120d2:	4a27      	ldr	r2, [pc, #156]	; (8012170 <TIM_Base_SetConfig+0xf4>)
 80120d4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80120d6:	68ca      	ldr	r2, [r1, #12]
 80120d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80120da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80120dc:	688b      	ldr	r3, [r1, #8]
 80120de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80120e0:	680b      	ldr	r3, [r1, #0]
 80120e2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80120e4:	4b1c      	ldr	r3, [pc, #112]	; (8012158 <TIM_Base_SetConfig+0xdc>)
 80120e6:	4298      	cmp	r0, r3
 80120e8:	d008      	beq.n	80120fc <TIM_Base_SetConfig+0x80>
 80120ea:	4b1e      	ldr	r3, [pc, #120]	; (8012164 <TIM_Base_SetConfig+0xe8>)
 80120ec:	4298      	cmp	r0, r3
 80120ee:	d005      	beq.n	80120fc <TIM_Base_SetConfig+0x80>
 80120f0:	4b1d      	ldr	r3, [pc, #116]	; (8012168 <TIM_Base_SetConfig+0xec>)
 80120f2:	4298      	cmp	r0, r3
 80120f4:	d002      	beq.n	80120fc <TIM_Base_SetConfig+0x80>
 80120f6:	4b1d      	ldr	r3, [pc, #116]	; (801216c <TIM_Base_SetConfig+0xf0>)
 80120f8:	4298      	cmp	r0, r3
 80120fa:	d101      	bne.n	8012100 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80120fc:	690b      	ldr	r3, [r1, #16]
 80120fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012100:	2301      	movs	r3, #1
 8012102:	6143      	str	r3, [r0, #20]
}
 8012104:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012106:	4a1a      	ldr	r2, [pc, #104]	; (8012170 <TIM_Base_SetConfig+0xf4>)
 8012108:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801210a:	68ca      	ldr	r2, [r1, #12]
 801210c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801210e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012110:	688b      	ldr	r3, [r1, #8]
 8012112:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012114:	680b      	ldr	r3, [r1, #0]
 8012116:	6283      	str	r3, [r0, #40]	; 0x28
 8012118:	e7f0      	b.n	80120fc <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801211a:	4a15      	ldr	r2, [pc, #84]	; (8012170 <TIM_Base_SetConfig+0xf4>)
 801211c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801211e:	68ca      	ldr	r2, [r1, #12]
 8012120:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012122:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012124:	688b      	ldr	r3, [r1, #8]
 8012126:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012128:	680b      	ldr	r3, [r1, #0]
 801212a:	6283      	str	r3, [r0, #40]	; 0x28
 801212c:	e7e8      	b.n	8012100 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 801212e:	4a10      	ldr	r2, [pc, #64]	; (8012170 <TIM_Base_SetConfig+0xf4>)
 8012130:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012132:	68ca      	ldr	r2, [r1, #12]
 8012134:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012136:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012138:	688b      	ldr	r3, [r1, #8]
 801213a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801213c:	680b      	ldr	r3, [r1, #0]
 801213e:	6283      	str	r3, [r0, #40]	; 0x28
 8012140:	e7dc      	b.n	80120fc <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012142:	4a0b      	ldr	r2, [pc, #44]	; (8012170 <TIM_Base_SetConfig+0xf4>)
 8012144:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012146:	68ca      	ldr	r2, [r1, #12]
 8012148:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801214a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801214c:	688b      	ldr	r3, [r1, #8]
 801214e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012150:	680b      	ldr	r3, [r1, #0]
 8012152:	6283      	str	r3, [r0, #40]	; 0x28
 8012154:	e7d2      	b.n	80120fc <TIM_Base_SetConfig+0x80>
 8012156:	46c0      	nop			; (mov r8, r8)
 8012158:	40012c00 	.word	0x40012c00
 801215c:	40000400 	.word	0x40000400
 8012160:	40002000 	.word	0x40002000
 8012164:	40014000 	.word	0x40014000
 8012168:	40014400 	.word	0x40014400
 801216c:	40014800 	.word	0x40014800
 8012170:	fffffcff 	.word	0xfffffcff

08012174 <HAL_TIM_Base_Init>:
{
 8012174:	b570      	push	{r4, r5, r6, lr}
 8012176:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012178:	d014      	beq.n	80121a4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801217a:	2339      	movs	r3, #57	; 0x39
 801217c:	5cc3      	ldrb	r3, [r0, r3]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d00a      	beq.n	8012198 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012182:	2539      	movs	r5, #57	; 0x39
 8012184:	2302      	movs	r3, #2
 8012186:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012188:	1d21      	adds	r1, r4, #4
 801218a:	6820      	ldr	r0, [r4, #0]
 801218c:	f7ff ff76 	bl	801207c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012190:	2301      	movs	r3, #1
 8012192:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012194:	2000      	movs	r0, #0
}
 8012196:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012198:	3338      	adds	r3, #56	; 0x38
 801219a:	2200      	movs	r2, #0
 801219c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801219e:	f7ff fead 	bl	8011efc <HAL_TIM_Base_MspInit>
 80121a2:	e7ee      	b.n	8012182 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80121a4:	2001      	movs	r0, #1
 80121a6:	e7f6      	b.n	8012196 <HAL_TIM_Base_Init+0x22>

080121a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80121a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80121aa:	2338      	movs	r3, #56	; 0x38
 80121ac:	5cc3      	ldrb	r3, [r0, r3]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d01e      	beq.n	80121f0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80121b2:	2238      	movs	r2, #56	; 0x38
 80121b4:	2501      	movs	r5, #1
 80121b6:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80121b8:	2439      	movs	r4, #57	; 0x39
 80121ba:	2302      	movs	r3, #2
 80121bc:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80121be:	6806      	ldr	r6, [r0, #0]
 80121c0:	6873      	ldr	r3, [r6, #4]
 80121c2:	2770      	movs	r7, #112	; 0x70
 80121c4:	43bb      	bics	r3, r7
 80121c6:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80121c8:	6806      	ldr	r6, [r0, #0]
 80121ca:	6873      	ldr	r3, [r6, #4]
 80121cc:	680f      	ldr	r7, [r1, #0]
 80121ce:	433b      	orrs	r3, r7
 80121d0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80121d2:	6806      	ldr	r6, [r0, #0]
 80121d4:	68b3      	ldr	r3, [r6, #8]
 80121d6:	2780      	movs	r7, #128	; 0x80
 80121d8:	43bb      	bics	r3, r7
 80121da:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80121dc:	6806      	ldr	r6, [r0, #0]
 80121de:	68b3      	ldr	r3, [r6, #8]
 80121e0:	6849      	ldr	r1, [r1, #4]
 80121e2:	430b      	orrs	r3, r1
 80121e4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80121e6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80121e8:	2300      	movs	r3, #0
 80121ea:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80121ec:	2000      	movs	r0, #0
}
 80121ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80121f0:	2002      	movs	r0, #2
 80121f2:	e7fc      	b.n	80121ee <HAL_TIMEx_MasterConfigSynchronization+0x46>

080121f4 <HAL_TIMEx_CommutationCallback>:
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80121f4:	4770      	bx	lr

080121f6 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80121f6:	4770      	bx	lr

080121f8 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80121f8:	4770      	bx	lr

080121fa <HAL_UART_DeInit>:
{
 80121fa:	b570      	push	{r4, r5, r6, lr}
 80121fc:	0004      	movs	r4, r0
    return HAL_ERROR;
 80121fe:	2001      	movs	r0, #1
  if(huart == NULL)
 8012200:	2c00      	cmp	r4, #0
 8012202:	d016      	beq.n	8012232 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012204:	2669      	movs	r6, #105	; 0x69
 8012206:	2302      	movs	r3, #2
 8012208:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 801220a:	6822      	ldr	r2, [r4, #0]
 801220c:	6813      	ldr	r3, [r2, #0]
 801220e:	2101      	movs	r1, #1
 8012210:	438b      	bics	r3, r1
 8012212:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012214:	6823      	ldr	r3, [r4, #0]
 8012216:	2500      	movs	r5, #0
 8012218:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801221a:	6823      	ldr	r3, [r4, #0]
 801221c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012222:	0020      	movs	r0, r4
 8012224:	f7ff ffe8 	bl	80121f8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012228:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801222a:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801222c:	2368      	movs	r3, #104	; 0x68
 801222e:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012230:	2000      	movs	r0, #0
}
 8012232:	bd70      	pop	{r4, r5, r6, pc}

08012234 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012234:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012236:	2369      	movs	r3, #105	; 0x69
 8012238:	5cc3      	ldrb	r3, [r0, r3]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d004      	beq.n	8012248 <HAL_UART_Transmit_IT+0x14>
 801223e:	2369      	movs	r3, #105	; 0x69
 8012240:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012242:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012244:	2c22      	cmp	r4, #34	; 0x22
 8012246:	d127      	bne.n	8012298 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8012248:	2900      	cmp	r1, #0
 801224a:	d02b      	beq.n	80122a4 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 801224c:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801224e:	2a00      	cmp	r2, #0
 8012250:	d022      	beq.n	8012298 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012252:	3367      	adds	r3, #103	; 0x67
 8012254:	5cc3      	ldrb	r3, [r0, r3]
 8012256:	2b01      	cmp	r3, #1
 8012258:	d026      	beq.n	80122a8 <HAL_UART_Transmit_IT+0x74>
 801225a:	2368      	movs	r3, #104	; 0x68
 801225c:	2401      	movs	r4, #1
 801225e:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012260:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012262:	3b18      	subs	r3, #24
 8012264:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012266:	3302      	adds	r3, #2
 8012268:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801226a:	2300      	movs	r3, #0
 801226c:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801226e:	3369      	adds	r3, #105	; 0x69
 8012270:	5cc3      	ldrb	r3, [r0, r3]
 8012272:	2b22      	cmp	r3, #34	; 0x22
 8012274:	d012      	beq.n	801229c <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012276:	2369      	movs	r3, #105	; 0x69
 8012278:	2212      	movs	r2, #18
 801227a:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801227c:	6802      	ldr	r2, [r0, #0]
 801227e:	6893      	ldr	r3, [r2, #8]
 8012280:	2101      	movs	r1, #1
 8012282:	430b      	orrs	r3, r1
 8012284:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012286:	2368      	movs	r3, #104	; 0x68
 8012288:	2200      	movs	r2, #0
 801228a:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801228c:	6802      	ldr	r2, [r0, #0]
 801228e:	6813      	ldr	r3, [r2, #0]
 8012290:	317f      	adds	r1, #127	; 0x7f
 8012292:	430b      	orrs	r3, r1
 8012294:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012296:	2300      	movs	r3, #0
  }
}
 8012298:	0018      	movs	r0, r3
 801229a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801229c:	3347      	adds	r3, #71	; 0x47
 801229e:	2232      	movs	r2, #50	; 0x32
 80122a0:	54c2      	strb	r2, [r0, r3]
 80122a2:	e7eb      	b.n	801227c <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80122a4:	2301      	movs	r3, #1
 80122a6:	e7f7      	b.n	8012298 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80122a8:	2302      	movs	r3, #2
 80122aa:	e7f5      	b.n	8012298 <HAL_UART_Transmit_IT+0x64>

080122ac <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122ac:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122ae:	2369      	movs	r3, #105	; 0x69
 80122b0:	5cc3      	ldrb	r3, [r0, r3]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d004      	beq.n	80122c0 <HAL_UART_Receive_IT+0x14>
 80122b6:	2369      	movs	r3, #105	; 0x69
 80122b8:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80122ba:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122bc:	2c12      	cmp	r4, #18
 80122be:	d14e      	bne.n	801235e <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 80122c0:	2900      	cmp	r1, #0
 80122c2:	d05d      	beq.n	8012380 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80122c6:	2a00      	cmp	r2, #0
 80122c8:	d049      	beq.n	801235e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80122ca:	3367      	adds	r3, #103	; 0x67
 80122cc:	5cc3      	ldrb	r3, [r0, r3]
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d058      	beq.n	8012384 <HAL_UART_Receive_IT+0xd8>
 80122d2:	2368      	movs	r3, #104	; 0x68
 80122d4:	2401      	movs	r4, #1
 80122d6:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 80122d8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80122da:	3b10      	subs	r3, #16
 80122dc:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80122de:	3302      	adds	r3, #2
 80122e0:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 80122e2:	6883      	ldr	r3, [r0, #8]
 80122e4:	2280      	movs	r2, #128	; 0x80
 80122e6:	0152      	lsls	r2, r2, #5
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d008      	beq.n	80122fe <HAL_UART_Receive_IT+0x52>
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d115      	bne.n	801231c <HAL_UART_Receive_IT+0x70>
 80122f0:	6903      	ldr	r3, [r0, #16]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10e      	bne.n	8012314 <HAL_UART_Receive_IT+0x68>
 80122f6:	335c      	adds	r3, #92	; 0x5c
 80122f8:	22ff      	movs	r2, #255	; 0xff
 80122fa:	52c2      	strh	r2, [r0, r3]
 80122fc:	e012      	b.n	8012324 <HAL_UART_Receive_IT+0x78>
 80122fe:	6903      	ldr	r3, [r0, #16]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d103      	bne.n	801230c <HAL_UART_Receive_IT+0x60>
 8012304:	335c      	adds	r3, #92	; 0x5c
 8012306:	4a20      	ldr	r2, [pc, #128]	; (8012388 <HAL_UART_Receive_IT+0xdc>)
 8012308:	52c2      	strh	r2, [r0, r3]
 801230a:	e00b      	b.n	8012324 <HAL_UART_Receive_IT+0x78>
 801230c:	235c      	movs	r3, #92	; 0x5c
 801230e:	22ff      	movs	r2, #255	; 0xff
 8012310:	52c2      	strh	r2, [r0, r3]
 8012312:	e007      	b.n	8012324 <HAL_UART_Receive_IT+0x78>
 8012314:	235c      	movs	r3, #92	; 0x5c
 8012316:	227f      	movs	r2, #127	; 0x7f
 8012318:	52c2      	strh	r2, [r0, r3]
 801231a:	e003      	b.n	8012324 <HAL_UART_Receive_IT+0x78>
 801231c:	2280      	movs	r2, #128	; 0x80
 801231e:	0552      	lsls	r2, r2, #21
 8012320:	4293      	cmp	r3, r2
 8012322:	d01e      	beq.n	8012362 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012324:	2300      	movs	r3, #0
 8012326:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012328:	3369      	adds	r3, #105	; 0x69
 801232a:	5cc3      	ldrb	r3, [r0, r3]
 801232c:	2b12      	cmp	r3, #18
 801232e:	d023      	beq.n	8012378 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012330:	2369      	movs	r3, #105	; 0x69
 8012332:	2222      	movs	r2, #34	; 0x22
 8012334:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012336:	6802      	ldr	r2, [r0, #0]
 8012338:	6811      	ldr	r1, [r2, #0]
 801233a:	2380      	movs	r3, #128	; 0x80
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	430b      	orrs	r3, r1
 8012340:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012342:	6802      	ldr	r2, [r0, #0]
 8012344:	6893      	ldr	r3, [r2, #8]
 8012346:	2101      	movs	r1, #1
 8012348:	430b      	orrs	r3, r1
 801234a:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 801234c:	2368      	movs	r3, #104	; 0x68
 801234e:	2200      	movs	r2, #0
 8012350:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012352:	6802      	ldr	r2, [r0, #0]
 8012354:	6813      	ldr	r3, [r2, #0]
 8012356:	311f      	adds	r1, #31
 8012358:	430b      	orrs	r3, r1
 801235a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 801235c:	2300      	movs	r3, #0
  }
}
 801235e:	0018      	movs	r0, r3
 8012360:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012362:	6903      	ldr	r3, [r0, #16]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d103      	bne.n	8012370 <HAL_UART_Receive_IT+0xc4>
 8012368:	335c      	adds	r3, #92	; 0x5c
 801236a:	227f      	movs	r2, #127	; 0x7f
 801236c:	52c2      	strh	r2, [r0, r3]
 801236e:	e7d9      	b.n	8012324 <HAL_UART_Receive_IT+0x78>
 8012370:	235c      	movs	r3, #92	; 0x5c
 8012372:	223f      	movs	r2, #63	; 0x3f
 8012374:	52c2      	strh	r2, [r0, r3]
 8012376:	e7d5      	b.n	8012324 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012378:	3357      	adds	r3, #87	; 0x57
 801237a:	2232      	movs	r2, #50	; 0x32
 801237c:	54c2      	strb	r2, [r0, r3]
 801237e:	e7da      	b.n	8012336 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8012380:	2301      	movs	r3, #1
 8012382:	e7ec      	b.n	801235e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012384:	2302      	movs	r3, #2
 8012386:	e7ea      	b.n	801235e <HAL_UART_Receive_IT+0xb2>
 8012388:	000001ff 	.word	0x000001ff

0801238c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801238c:	b510      	push	{r4, lr}
 801238e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012390:	2369      	movs	r3, #105	; 0x69
 8012392:	5cc3      	ldrb	r3, [r0, r3]
 8012394:	2b01      	cmp	r3, #1
 8012396:	d004      	beq.n	80123a2 <HAL_UART_Transmit_DMA+0x16>
 8012398:	2369      	movs	r3, #105	; 0x69
 801239a:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801239c:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801239e:	2b22      	cmp	r3, #34	; 0x22
 80123a0:	d134      	bne.n	801240c <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80123a2:	2900      	cmp	r1, #0
 80123a4:	d037      	beq.n	8012416 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80123a6:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80123a8:	2a00      	cmp	r2, #0
 80123aa:	d02f      	beq.n	801240c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80123ac:	2368      	movs	r3, #104	; 0x68
 80123ae:	5ce3      	ldrb	r3, [r4, r3]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d032      	beq.n	801241a <HAL_UART_Transmit_DMA+0x8e>
 80123b4:	2368      	movs	r3, #104	; 0x68
 80123b6:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80123b8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80123ba:	3b18      	subs	r3, #24
 80123bc:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80123be:	3302      	adds	r3, #2
 80123c0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123c2:	2300      	movs	r3, #0
 80123c4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80123c6:	3369      	adds	r3, #105	; 0x69
 80123c8:	5ce3      	ldrb	r3, [r4, r3]
 80123ca:	2b22      	cmp	r3, #34	; 0x22
 80123cc:	d01f      	beq.n	801240e <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80123ce:	2369      	movs	r3, #105	; 0x69
 80123d0:	2012      	movs	r0, #18
 80123d2:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80123d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80123d6:	4812      	ldr	r0, [pc, #72]	; (8012420 <HAL_UART_Transmit_DMA+0x94>)
 80123d8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80123da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80123dc:	4811      	ldr	r0, [pc, #68]	; (8012424 <HAL_UART_Transmit_DMA+0x98>)
 80123de:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80123e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80123e2:	4811      	ldr	r0, [pc, #68]	; (8012428 <HAL_UART_Transmit_DMA+0x9c>)
 80123e4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80123e6:	6820      	ldr	r0, [r4, #0]
 80123e8:	3028      	adds	r0, #40	; 0x28
 80123ea:	0013      	movs	r3, r2
 80123ec:	0002      	movs	r2, r0
 80123ee:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80123f0:	f7fd fefc 	bl	80101ec <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80123f4:	6823      	ldr	r3, [r4, #0]
 80123f6:	2240      	movs	r2, #64	; 0x40
 80123f8:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80123fa:	6822      	ldr	r2, [r4, #0]
 80123fc:	6893      	ldr	r3, [r2, #8]
 80123fe:	2180      	movs	r1, #128	; 0x80
 8012400:	430b      	orrs	r3, r1
 8012402:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012404:	2368      	movs	r3, #104	; 0x68
 8012406:	2200      	movs	r2, #0
 8012408:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801240a:	2000      	movs	r0, #0
  }
}
 801240c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801240e:	3347      	adds	r3, #71	; 0x47
 8012410:	3031      	adds	r0, #49	; 0x31
 8012412:	54e0      	strb	r0, [r4, r3]
 8012414:	e7de      	b.n	80123d4 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8012416:	2001      	movs	r0, #1
 8012418:	e7f8      	b.n	801240c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 801241a:	2002      	movs	r0, #2
 801241c:	e7f6      	b.n	801240c <HAL_UART_Transmit_DMA+0x80>
 801241e:	46c0      	nop			; (mov r8, r8)
 8012420:	080124c5 	.word	0x080124c5
 8012424:	080124f7 	.word	0x080124f7
 8012428:	08012547 	.word	0x08012547

0801242c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801242c:	b510      	push	{r4, lr}
 801242e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012430:	2069      	movs	r0, #105	; 0x69
 8012432:	5c20      	ldrb	r0, [r4, r0]
 8012434:	2801      	cmp	r0, #1
 8012436:	d004      	beq.n	8012442 <HAL_UART_Receive_DMA+0x16>
 8012438:	2369      	movs	r3, #105	; 0x69
 801243a:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801243c:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801243e:	2b12      	cmp	r3, #18
 8012440:	d130      	bne.n	80124a4 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8012442:	2900      	cmp	r1, #0
 8012444:	d033      	beq.n	80124ae <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8012446:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012448:	2a00      	cmp	r2, #0
 801244a:	d02b      	beq.n	80124a4 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 801244c:	2368      	movs	r3, #104	; 0x68
 801244e:	5ce3      	ldrb	r3, [r4, r3]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d02e      	beq.n	80124b2 <HAL_UART_Receive_DMA+0x86>
 8012454:	2368      	movs	r3, #104	; 0x68
 8012456:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8012458:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801245a:	3b10      	subs	r3, #16
 801245c:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801245e:	2300      	movs	r3, #0
 8012460:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012462:	3369      	adds	r3, #105	; 0x69
 8012464:	5ce3      	ldrb	r3, [r4, r3]
 8012466:	2b12      	cmp	r3, #18
 8012468:	d01d      	beq.n	80124a6 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801246a:	2369      	movs	r3, #105	; 0x69
 801246c:	2022      	movs	r0, #34	; 0x22
 801246e:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012472:	4811      	ldr	r0, [pc, #68]	; (80124b8 <HAL_UART_Receive_DMA+0x8c>)
 8012474:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012478:	4810      	ldr	r0, [pc, #64]	; (80124bc <HAL_UART_Receive_DMA+0x90>)
 801247a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801247c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801247e:	4810      	ldr	r0, [pc, #64]	; (80124c0 <HAL_UART_Receive_DMA+0x94>)
 8012480:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012482:	6820      	ldr	r0, [r4, #0]
 8012484:	3024      	adds	r0, #36	; 0x24
 8012486:	0013      	movs	r3, r2
 8012488:	000a      	movs	r2, r1
 801248a:	0001      	movs	r1, r0
 801248c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801248e:	f7fd fead 	bl	80101ec <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012492:	6822      	ldr	r2, [r4, #0]
 8012494:	6893      	ldr	r3, [r2, #8]
 8012496:	2140      	movs	r1, #64	; 0x40
 8012498:	430b      	orrs	r3, r1
 801249a:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 801249c:	2368      	movs	r3, #104	; 0x68
 801249e:	2200      	movs	r2, #0
 80124a0:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80124a2:	2000      	movs	r0, #0
  }
}
 80124a4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80124a6:	3357      	adds	r3, #87	; 0x57
 80124a8:	3031      	adds	r0, #49	; 0x31
 80124aa:	54e0      	strb	r0, [r4, r3]
 80124ac:	e7e0      	b.n	8012470 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80124ae:	2001      	movs	r0, #1
 80124b0:	e7f8      	b.n	80124a4 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80124b2:	2002      	movs	r0, #2
 80124b4:	e7f6      	b.n	80124a4 <HAL_UART_Receive_DMA+0x78>
 80124b6:	46c0      	nop			; (mov r8, r8)
 80124b8:	08012501 	.word	0x08012501
 80124bc:	0801253d 	.word	0x0801253d
 80124c0:	08012547 	.word	0x08012547

080124c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80124c4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80124c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80124c8:	6802      	ldr	r2, [r0, #0]
 80124ca:	6812      	ldr	r2, [r2, #0]
 80124cc:	0692      	lsls	r2, r2, #26
 80124ce:	d40d      	bmi.n	80124ec <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80124d0:	2252      	movs	r2, #82	; 0x52
 80124d2:	2100      	movs	r1, #0
 80124d4:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80124d6:	6819      	ldr	r1, [r3, #0]
 80124d8:	688a      	ldr	r2, [r1, #8]
 80124da:	2080      	movs	r0, #128	; 0x80
 80124dc:	4382      	bics	r2, r0
 80124de:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	6813      	ldr	r3, [r2, #0]
 80124e4:	2140      	movs	r1, #64	; 0x40
 80124e6:	430b      	orrs	r3, r1
 80124e8:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80124ea:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80124ec:	0018      	movs	r0, r3
 80124ee:	f7fa fbc7 	bl	800cc80 <HAL_UART_TxCpltCallback>
}
 80124f2:	e7fa      	b.n	80124ea <UART_DMATransmitCplt+0x26>

080124f4 <HAL_UART_TxHalfCpltCallback>:
}
 80124f4:	4770      	bx	lr

080124f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80124f6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80124f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80124fa:	f7ff fffb 	bl	80124f4 <HAL_UART_TxHalfCpltCallback>
}
 80124fe:	bd10      	pop	{r4, pc}

08012500 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012500:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012502:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012504:	6802      	ldr	r2, [r0, #0]
 8012506:	6812      	ldr	r2, [r2, #0]
 8012508:	0692      	lsls	r2, r2, #26
 801250a:	d40e      	bmi.n	801252a <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 801250c:	225a      	movs	r2, #90	; 0x5a
 801250e:	2100      	movs	r1, #0
 8012510:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012512:	6819      	ldr	r1, [r3, #0]
 8012514:	688a      	ldr	r2, [r1, #8]
 8012516:	2040      	movs	r0, #64	; 0x40
 8012518:	4382      	bics	r2, r0
 801251a:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801251c:	2269      	movs	r2, #105	; 0x69
 801251e:	5c9a      	ldrb	r2, [r3, r2]
 8012520:	2a32      	cmp	r2, #50	; 0x32
 8012522:	d006      	beq.n	8012532 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012524:	2269      	movs	r2, #105	; 0x69
 8012526:	2101      	movs	r1, #1
 8012528:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801252a:	0018      	movs	r0, r3
 801252c:	f7fa fbec 	bl	800cd08 <HAL_UART_RxCpltCallback>
}
 8012530:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012532:	3237      	adds	r2, #55	; 0x37
 8012534:	2112      	movs	r1, #18
 8012536:	5499      	strb	r1, [r3, r2]
 8012538:	e7f7      	b.n	801252a <UART_DMAReceiveCplt+0x2a>

0801253a <HAL_UART_RxHalfCpltCallback>:
}
 801253a:	4770      	bx	lr

0801253c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801253c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801253e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012540:	f7ff fffb 	bl	801253a <HAL_UART_RxHalfCpltCallback>
}
 8012544:	bd10      	pop	{r4, pc}

08012546 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012546:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012548:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801254a:	2300      	movs	r3, #0
 801254c:	225a      	movs	r2, #90	; 0x5a
 801254e:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012550:	3a08      	subs	r2, #8
 8012552:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012554:	3369      	adds	r3, #105	; 0x69
 8012556:	3a51      	subs	r2, #81	; 0x51
 8012558:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801255a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801255c:	320f      	adds	r2, #15
 801255e:	4313      	orrs	r3, r2
 8012560:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012562:	f7fa fbab 	bl	800ccbc <HAL_UART_ErrorCallback>
}
 8012566:	bd10      	pop	{r4, pc}

08012568 <UART_SetConfig>:
{
 8012568:	b570      	push	{r4, r5, r6, lr}
 801256a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801256c:	6801      	ldr	r1, [r0, #0]
 801256e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012570:	6883      	ldr	r3, [r0, #8]
 8012572:	6900      	ldr	r0, [r0, #16]
 8012574:	4303      	orrs	r3, r0
 8012576:	6960      	ldr	r0, [r4, #20]
 8012578:	4303      	orrs	r3, r0
 801257a:	69e0      	ldr	r0, [r4, #28]
 801257c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801257e:	487e      	ldr	r0, [pc, #504]	; (8012778 <UART_SetConfig+0x210>)
 8012580:	4002      	ands	r2, r0
 8012582:	4313      	orrs	r3, r2
 8012584:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012586:	6822      	ldr	r2, [r4, #0]
 8012588:	6853      	ldr	r3, [r2, #4]
 801258a:	497c      	ldr	r1, [pc, #496]	; (801277c <UART_SetConfig+0x214>)
 801258c:	400b      	ands	r3, r1
 801258e:	68e1      	ldr	r1, [r4, #12]
 8012590:	430b      	orrs	r3, r1
 8012592:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012594:	6821      	ldr	r1, [r4, #0]
 8012596:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012598:	69a3      	ldr	r3, [r4, #24]
 801259a:	6a20      	ldr	r0, [r4, #32]
 801259c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801259e:	4878      	ldr	r0, [pc, #480]	; (8012780 <UART_SetConfig+0x218>)
 80125a0:	4002      	ands	r2, r0
 80125a2:	4313      	orrs	r3, r2
 80125a4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125a6:	6825      	ldr	r5, [r4, #0]
 80125a8:	4b76      	ldr	r3, [pc, #472]	; (8012784 <UART_SetConfig+0x21c>)
 80125aa:	429d      	cmp	r5, r3
 80125ac:	d022      	beq.n	80125f4 <UART_SetConfig+0x8c>
 80125ae:	4b76      	ldr	r3, [pc, #472]	; (8012788 <UART_SetConfig+0x220>)
 80125b0:	429d      	cmp	r5, r3
 80125b2:	d034      	beq.n	801261e <UART_SetConfig+0xb6>
 80125b4:	4b75      	ldr	r3, [pc, #468]	; (801278c <UART_SetConfig+0x224>)
 80125b6:	429d      	cmp	r5, r3
 80125b8:	d100      	bne.n	80125bc <UART_SetConfig+0x54>
 80125ba:	e06b      	b.n	8012694 <UART_SetConfig+0x12c>
 80125bc:	4b74      	ldr	r3, [pc, #464]	; (8012790 <UART_SetConfig+0x228>)
 80125be:	429d      	cmp	r5, r3
 80125c0:	d100      	bne.n	80125c4 <UART_SetConfig+0x5c>
 80125c2:	e08e      	b.n	80126e2 <UART_SetConfig+0x17a>
 80125c4:	4b73      	ldr	r3, [pc, #460]	; (8012794 <UART_SetConfig+0x22c>)
 80125c6:	429d      	cmp	r5, r3
 80125c8:	d100      	bne.n	80125cc <UART_SetConfig+0x64>
 80125ca:	e08a      	b.n	80126e2 <UART_SetConfig+0x17a>
 80125cc:	4b72      	ldr	r3, [pc, #456]	; (8012798 <UART_SetConfig+0x230>)
 80125ce:	429d      	cmp	r5, r3
 80125d0:	d100      	bne.n	80125d4 <UART_SetConfig+0x6c>
 80125d2:	e086      	b.n	80126e2 <UART_SetConfig+0x17a>
 80125d4:	4b71      	ldr	r3, [pc, #452]	; (801279c <UART_SetConfig+0x234>)
 80125d6:	429d      	cmp	r5, r3
 80125d8:	d100      	bne.n	80125dc <UART_SetConfig+0x74>
 80125da:	e082      	b.n	80126e2 <UART_SetConfig+0x17a>
 80125dc:	4b70      	ldr	r3, [pc, #448]	; (80127a0 <UART_SetConfig+0x238>)
 80125de:	429d      	cmp	r5, r3
 80125e0:	d100      	bne.n	80125e4 <UART_SetConfig+0x7c>
 80125e2:	e07e      	b.n	80126e2 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80125e4:	2380      	movs	r3, #128	; 0x80
 80125e6:	021b      	lsls	r3, r3, #8
 80125e8:	69e2      	ldr	r2, [r4, #28]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d100      	bne.n	80125f0 <UART_SetConfig+0x88>
 80125ee:	e072      	b.n	80126d6 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80125f0:	2001      	movs	r0, #1
 80125f2:	e04e      	b.n	8012692 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125f4:	4b6b      	ldr	r3, [pc, #428]	; (80127a4 <UART_SetConfig+0x23c>)
 80125f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125f8:	2303      	movs	r3, #3
 80125fa:	4013      	ands	r3, r2
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d100      	bne.n	8012602 <UART_SetConfig+0x9a>
 8012600:	e09a      	b.n	8012738 <UART_SetConfig+0x1d0>
 8012602:	2b00      	cmp	r3, #0
 8012604:	d02f      	beq.n	8012666 <UART_SetConfig+0xfe>
 8012606:	2b02      	cmp	r3, #2
 8012608:	d100      	bne.n	801260c <UART_SetConfig+0xa4>
 801260a:	e0a5      	b.n	8012758 <UART_SetConfig+0x1f0>
 801260c:	2b03      	cmp	r3, #3
 801260e:	d01a      	beq.n	8012646 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012610:	2380      	movs	r3, #128	; 0x80
 8012612:	021b      	lsls	r3, r3, #8
 8012614:	69e2      	ldr	r2, [r4, #28]
 8012616:	429a      	cmp	r2, r3
 8012618:	d060      	beq.n	80126dc <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801261a:	2001      	movs	r0, #1
 801261c:	e039      	b.n	8012692 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801261e:	4b61      	ldr	r3, [pc, #388]	; (80127a4 <UART_SetConfig+0x23c>)
 8012620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012622:	22c0      	movs	r2, #192	; 0xc0
 8012624:	0292      	lsls	r2, r2, #10
 8012626:	4013      	ands	r3, r2
 8012628:	2280      	movs	r2, #128	; 0x80
 801262a:	0252      	lsls	r2, r2, #9
 801262c:	4293      	cmp	r3, r2
 801262e:	d100      	bne.n	8012632 <UART_SetConfig+0xca>
 8012630:	e082      	b.n	8012738 <UART_SetConfig+0x1d0>
 8012632:	d916      	bls.n	8012662 <UART_SetConfig+0xfa>
 8012634:	2280      	movs	r2, #128	; 0x80
 8012636:	0292      	lsls	r2, r2, #10
 8012638:	4293      	cmp	r3, r2
 801263a:	d100      	bne.n	801263e <UART_SetConfig+0xd6>
 801263c:	e08c      	b.n	8012758 <UART_SetConfig+0x1f0>
 801263e:	22c0      	movs	r2, #192	; 0xc0
 8012640:	0292      	lsls	r2, r2, #10
 8012642:	4293      	cmp	r3, r2
 8012644:	d1e4      	bne.n	8012610 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012646:	2380      	movs	r3, #128	; 0x80
 8012648:	021b      	lsls	r3, r3, #8
 801264a:	69e2      	ldr	r2, [r4, #28]
 801264c:	429a      	cmp	r2, r3
 801264e:	d038      	beq.n	80126c2 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012650:	6861      	ldr	r1, [r4, #4]
 8012652:	4855      	ldr	r0, [pc, #340]	; (80127a8 <UART_SetConfig+0x240>)
 8012654:	f7ed fd7c 	bl	8000150 <__udivsi3>
 8012658:	0400      	lsls	r0, r0, #16
 801265a:	0c00      	lsrs	r0, r0, #16
 801265c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801265e:	2000      	movs	r0, #0
        break;
 8012660:	e017      	b.n	8012692 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1d4      	bne.n	8012610 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012666:	2380      	movs	r3, #128	; 0x80
 8012668:	021b      	lsls	r3, r3, #8
 801266a:	69e2      	ldr	r2, [r4, #28]
 801266c:	429a      	cmp	r2, r3
 801266e:	d13d      	bne.n	80126ec <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012670:	f7ff f9a8 	bl	80119c4 <HAL_RCC_GetPCLK1Freq>
 8012674:	0040      	lsls	r0, r0, #1
 8012676:	6861      	ldr	r1, [r4, #4]
 8012678:	f7ed fd6a 	bl	8000150 <__udivsi3>
 801267c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801267e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012680:	220f      	movs	r2, #15
 8012682:	0019      	movs	r1, r3
 8012684:	4391      	bics	r1, r2
 8012686:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8012688:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 801268a:	071b      	lsls	r3, r3, #28
 801268c:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 801268e:	4313      	orrs	r3, r2
 8012690:	60cb      	str	r3, [r1, #12]
}
 8012692:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012694:	4b43      	ldr	r3, [pc, #268]	; (80127a4 <UART_SetConfig+0x23c>)
 8012696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012698:	22c0      	movs	r2, #192	; 0xc0
 801269a:	0312      	lsls	r2, r2, #12
 801269c:	4013      	ands	r3, r2
 801269e:	2280      	movs	r2, #128	; 0x80
 80126a0:	02d2      	lsls	r2, r2, #11
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d02d      	beq.n	8012702 <UART_SetConfig+0x19a>
 80126a6:	d913      	bls.n	80126d0 <UART_SetConfig+0x168>
 80126a8:	2280      	movs	r2, #128	; 0x80
 80126aa:	0312      	lsls	r2, r2, #12
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d036      	beq.n	801271e <UART_SetConfig+0x1b6>
 80126b0:	22c0      	movs	r2, #192	; 0xc0
 80126b2:	0312      	lsls	r2, r2, #12
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d1ab      	bne.n	8012610 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126b8:	2380      	movs	r3, #128	; 0x80
 80126ba:	021b      	lsls	r3, r3, #8
 80126bc:	69e2      	ldr	r2, [r4, #28]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d1c6      	bne.n	8012650 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80126c2:	6861      	ldr	r1, [r4, #4]
 80126c4:	4839      	ldr	r0, [pc, #228]	; (80127ac <UART_SetConfig+0x244>)
 80126c6:	f7ed fd43 	bl	8000150 <__udivsi3>
 80126ca:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80126cc:	2000      	movs	r0, #0
        break;
 80126ce:	e7d7      	b.n	8012680 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d0c8      	beq.n	8012666 <UART_SetConfig+0xfe>
 80126d4:	e79c      	b.n	8012610 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80126d6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80126d8:	2300      	movs	r3, #0
 80126da:	e7d1      	b.n	8012680 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80126dc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80126de:	2300      	movs	r3, #0
 80126e0:	e7ce      	b.n	8012680 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126e2:	2380      	movs	r3, #128	; 0x80
 80126e4:	021b      	lsls	r3, r3, #8
 80126e6:	69e2      	ldr	r2, [r4, #28]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d0c1      	beq.n	8012670 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80126ec:	f7ff f96a 	bl	80119c4 <HAL_RCC_GetPCLK1Freq>
 80126f0:	6825      	ldr	r5, [r4, #0]
 80126f2:	6861      	ldr	r1, [r4, #4]
 80126f4:	f7ed fd2c 	bl	8000150 <__udivsi3>
 80126f8:	0400      	lsls	r0, r0, #16
 80126fa:	0c00      	lsrs	r0, r0, #16
 80126fc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80126fe:	2000      	movs	r0, #0
  return ret;
 8012700:	e7c7      	b.n	8012692 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012702:	2380      	movs	r3, #128	; 0x80
 8012704:	021b      	lsls	r3, r3, #8
 8012706:	69e2      	ldr	r2, [r4, #28]
 8012708:	429a      	cmp	r2, r3
 801270a:	d11a      	bne.n	8012742 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801270c:	f7ff f8f6 	bl	80118fc <HAL_RCC_GetSysClockFreq>
 8012710:	0040      	lsls	r0, r0, #1
 8012712:	6861      	ldr	r1, [r4, #4]
 8012714:	f7ed fd1c 	bl	8000150 <__udivsi3>
 8012718:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801271a:	2000      	movs	r0, #0
        break;
 801271c:	e7b0      	b.n	8012680 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801271e:	2380      	movs	r3, #128	; 0x80
 8012720:	021b      	lsls	r3, r3, #8
 8012722:	69e2      	ldr	r2, [r4, #28]
 8012724:	429a      	cmp	r2, r3
 8012726:	d11c      	bne.n	8012762 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012728:	6861      	ldr	r1, [r4, #4]
 801272a:	2080      	movs	r0, #128	; 0x80
 801272c:	0240      	lsls	r0, r0, #9
 801272e:	f7ed fd0f 	bl	8000150 <__udivsi3>
 8012732:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012734:	2000      	movs	r0, #0
        break;
 8012736:	e7a3      	b.n	8012680 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012738:	2380      	movs	r3, #128	; 0x80
 801273a:	021b      	lsls	r3, r3, #8
 801273c:	69e2      	ldr	r2, [r4, #28]
 801273e:	429a      	cmp	r2, r3
 8012740:	d0e4      	beq.n	801270c <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012742:	f7ff f8db 	bl	80118fc <HAL_RCC_GetSysClockFreq>
 8012746:	6825      	ldr	r5, [r4, #0]
 8012748:	6861      	ldr	r1, [r4, #4]
 801274a:	f7ed fd01 	bl	8000150 <__udivsi3>
 801274e:	0400      	lsls	r0, r0, #16
 8012750:	0c00      	lsrs	r0, r0, #16
 8012752:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012754:	2000      	movs	r0, #0
        break;
 8012756:	e79c      	b.n	8012692 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012758:	2380      	movs	r3, #128	; 0x80
 801275a:	021b      	lsls	r3, r3, #8
 801275c:	69e2      	ldr	r2, [r4, #28]
 801275e:	429a      	cmp	r2, r3
 8012760:	d0e2      	beq.n	8012728 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012762:	6861      	ldr	r1, [r4, #4]
 8012764:	2080      	movs	r0, #128	; 0x80
 8012766:	0200      	lsls	r0, r0, #8
 8012768:	f7ed fcf2 	bl	8000150 <__udivsi3>
 801276c:	0400      	lsls	r0, r0, #16
 801276e:	0c00      	lsrs	r0, r0, #16
 8012770:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012772:	2000      	movs	r0, #0
        break;
 8012774:	e78d      	b.n	8012692 <UART_SetConfig+0x12a>
 8012776:	46c0      	nop			; (mov r8, r8)
 8012778:	efff69f3 	.word	0xefff69f3
 801277c:	ffffcfff 	.word	0xffffcfff
 8012780:	fffff4ff 	.word	0xfffff4ff
 8012784:	40013800 	.word	0x40013800
 8012788:	40004400 	.word	0x40004400
 801278c:	40004800 	.word	0x40004800
 8012790:	40004c00 	.word	0x40004c00
 8012794:	40005000 	.word	0x40005000
 8012798:	40011400 	.word	0x40011400
 801279c:	40011800 	.word	0x40011800
 80127a0:	40011c00 	.word	0x40011c00
 80127a4:	40021000 	.word	0x40021000
 80127a8:	007a1200 	.word	0x007a1200
 80127ac:	00f42400 	.word	0x00f42400

080127b0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80127b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127b2:	07db      	lsls	r3, r3, #31
 80127b4:	d506      	bpl.n	80127c4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80127b6:	6802      	ldr	r2, [r0, #0]
 80127b8:	6853      	ldr	r3, [r2, #4]
 80127ba:	492c      	ldr	r1, [pc, #176]	; (801286c <UART_AdvFeatureConfig+0xbc>)
 80127bc:	400b      	ands	r3, r1
 80127be:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80127c0:	430b      	orrs	r3, r1
 80127c2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80127c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127c6:	079b      	lsls	r3, r3, #30
 80127c8:	d506      	bpl.n	80127d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80127ca:	6802      	ldr	r2, [r0, #0]
 80127cc:	6853      	ldr	r3, [r2, #4]
 80127ce:	4928      	ldr	r1, [pc, #160]	; (8012870 <UART_AdvFeatureConfig+0xc0>)
 80127d0:	400b      	ands	r3, r1
 80127d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80127d4:	430b      	orrs	r3, r1
 80127d6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80127d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127da:	075b      	lsls	r3, r3, #29
 80127dc:	d506      	bpl.n	80127ec <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80127de:	6802      	ldr	r2, [r0, #0]
 80127e0:	6853      	ldr	r3, [r2, #4]
 80127e2:	4924      	ldr	r1, [pc, #144]	; (8012874 <UART_AdvFeatureConfig+0xc4>)
 80127e4:	400b      	ands	r3, r1
 80127e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80127e8:	430b      	orrs	r3, r1
 80127ea:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80127ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127ee:	071b      	lsls	r3, r3, #28
 80127f0:	d506      	bpl.n	8012800 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80127f2:	6802      	ldr	r2, [r0, #0]
 80127f4:	6853      	ldr	r3, [r2, #4]
 80127f6:	4920      	ldr	r1, [pc, #128]	; (8012878 <UART_AdvFeatureConfig+0xc8>)
 80127f8:	400b      	ands	r3, r1
 80127fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80127fc:	430b      	orrs	r3, r1
 80127fe:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012800:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012802:	06db      	lsls	r3, r3, #27
 8012804:	d506      	bpl.n	8012814 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012806:	6802      	ldr	r2, [r0, #0]
 8012808:	6893      	ldr	r3, [r2, #8]
 801280a:	491c      	ldr	r1, [pc, #112]	; (801287c <UART_AdvFeatureConfig+0xcc>)
 801280c:	400b      	ands	r3, r1
 801280e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012810:	430b      	orrs	r3, r1
 8012812:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012816:	069b      	lsls	r3, r3, #26
 8012818:	d506      	bpl.n	8012828 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801281a:	6802      	ldr	r2, [r0, #0]
 801281c:	6893      	ldr	r3, [r2, #8]
 801281e:	4918      	ldr	r1, [pc, #96]	; (8012880 <UART_AdvFeatureConfig+0xd0>)
 8012820:	400b      	ands	r3, r1
 8012822:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012824:	430b      	orrs	r3, r1
 8012826:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012828:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801282a:	065b      	lsls	r3, r3, #25
 801282c:	d50b      	bpl.n	8012846 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801282e:	6802      	ldr	r2, [r0, #0]
 8012830:	6853      	ldr	r3, [r2, #4]
 8012832:	4914      	ldr	r1, [pc, #80]	; (8012884 <UART_AdvFeatureConfig+0xd4>)
 8012834:	400b      	ands	r3, r1
 8012836:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012838:	430b      	orrs	r3, r1
 801283a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801283c:	2380      	movs	r3, #128	; 0x80
 801283e:	035b      	lsls	r3, r3, #13
 8012840:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012842:	429a      	cmp	r2, r3
 8012844:	d00a      	beq.n	801285c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012846:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012848:	061b      	lsls	r3, r3, #24
 801284a:	d506      	bpl.n	801285a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801284c:	6802      	ldr	r2, [r0, #0]
 801284e:	6853      	ldr	r3, [r2, #4]
 8012850:	490d      	ldr	r1, [pc, #52]	; (8012888 <UART_AdvFeatureConfig+0xd8>)
 8012852:	400b      	ands	r3, r1
 8012854:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012856:	430b      	orrs	r3, r1
 8012858:	6053      	str	r3, [r2, #4]
}
 801285a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801285c:	6802      	ldr	r2, [r0, #0]
 801285e:	6853      	ldr	r3, [r2, #4]
 8012860:	490a      	ldr	r1, [pc, #40]	; (801288c <UART_AdvFeatureConfig+0xdc>)
 8012862:	400b      	ands	r3, r1
 8012864:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012866:	430b      	orrs	r3, r1
 8012868:	6053      	str	r3, [r2, #4]
 801286a:	e7ec      	b.n	8012846 <UART_AdvFeatureConfig+0x96>
 801286c:	fffdffff 	.word	0xfffdffff
 8012870:	fffeffff 	.word	0xfffeffff
 8012874:	fffbffff 	.word	0xfffbffff
 8012878:	ffff7fff 	.word	0xffff7fff
 801287c:	ffffefff 	.word	0xffffefff
 8012880:	ffffdfff 	.word	0xffffdfff
 8012884:	ffefffff 	.word	0xffefffff
 8012888:	fff7ffff 	.word	0xfff7ffff
 801288c:	ff9fffff 	.word	0xff9fffff

08012890 <UART_WaitOnFlagUntilTimeout>:
{
 8012890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012892:	46c6      	mov	lr, r8
 8012894:	b500      	push	{lr}
 8012896:	0006      	movs	r6, r0
 8012898:	000c      	movs	r4, r1
 801289a:	0017      	movs	r7, r2
 801289c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801289e:	f7fc ffab 	bl	800f7f8 <HAL_GetTick>
 80128a2:	4680      	mov	r8, r0
  if(Status == RESET)
 80128a4:	2f00      	cmp	r7, #0
 80128a6:	d029      	beq.n	80128fc <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80128a8:	6832      	ldr	r2, [r6, #0]
 80128aa:	69d3      	ldr	r3, [r2, #28]
 80128ac:	4023      	ands	r3, r4
 80128ae:	42a3      	cmp	r3, r4
 80128b0:	d152      	bne.n	8012958 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80128b2:	1c6b      	adds	r3, r5, #1
 80128b4:	d0f9      	beq.n	80128aa <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80128b6:	2d00      	cmp	r5, #0
 80128b8:	d005      	beq.n	80128c6 <UART_WaitOnFlagUntilTimeout+0x36>
 80128ba:	f7fc ff9d 	bl	800f7f8 <HAL_GetTick>
 80128be:	4643      	mov	r3, r8
 80128c0:	1ac0      	subs	r0, r0, r3
 80128c2:	42a8      	cmp	r0, r5
 80128c4:	d9f0      	bls.n	80128a8 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80128c6:	6832      	ldr	r2, [r6, #0]
 80128c8:	6813      	ldr	r3, [r2, #0]
 80128ca:	2180      	movs	r1, #128	; 0x80
 80128cc:	438b      	bics	r3, r1
 80128ce:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80128d0:	6832      	ldr	r2, [r6, #0]
 80128d2:	6813      	ldr	r3, [r2, #0]
 80128d4:	3960      	subs	r1, #96	; 0x60
 80128d6:	438b      	bics	r3, r1
 80128d8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80128da:	6832      	ldr	r2, [r6, #0]
 80128dc:	6813      	ldr	r3, [r2, #0]
 80128de:	491f      	ldr	r1, [pc, #124]	; (801295c <UART_WaitOnFlagUntilTimeout+0xcc>)
 80128e0:	400b      	ands	r3, r1
 80128e2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80128e4:	6831      	ldr	r1, [r6, #0]
 80128e6:	688b      	ldr	r3, [r1, #8]
 80128e8:	2201      	movs	r2, #1
 80128ea:	4393      	bics	r3, r2
 80128ec:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80128ee:	2369      	movs	r3, #105	; 0x69
 80128f0:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80128f2:	3b01      	subs	r3, #1
 80128f4:	2200      	movs	r2, #0
 80128f6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80128f8:	2003      	movs	r0, #3
 80128fa:	e02a      	b.n	8012952 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80128fc:	6832      	ldr	r2, [r6, #0]
 80128fe:	69d3      	ldr	r3, [r2, #28]
 8012900:	4023      	ands	r3, r4
 8012902:	42a3      	cmp	r3, r4
 8012904:	d024      	beq.n	8012950 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012906:	1c6b      	adds	r3, r5, #1
 8012908:	d0f9      	beq.n	80128fe <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801290a:	2d00      	cmp	r5, #0
 801290c:	d005      	beq.n	801291a <UART_WaitOnFlagUntilTimeout+0x8a>
 801290e:	f7fc ff73 	bl	800f7f8 <HAL_GetTick>
 8012912:	4643      	mov	r3, r8
 8012914:	1ac0      	subs	r0, r0, r3
 8012916:	42a8      	cmp	r0, r5
 8012918:	d9f0      	bls.n	80128fc <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801291a:	6832      	ldr	r2, [r6, #0]
 801291c:	6813      	ldr	r3, [r2, #0]
 801291e:	2180      	movs	r1, #128	; 0x80
 8012920:	438b      	bics	r3, r1
 8012922:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012924:	6832      	ldr	r2, [r6, #0]
 8012926:	6813      	ldr	r3, [r2, #0]
 8012928:	3960      	subs	r1, #96	; 0x60
 801292a:	438b      	bics	r3, r1
 801292c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801292e:	6832      	ldr	r2, [r6, #0]
 8012930:	6813      	ldr	r3, [r2, #0]
 8012932:	490a      	ldr	r1, [pc, #40]	; (801295c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012934:	400b      	ands	r3, r1
 8012936:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012938:	6831      	ldr	r1, [r6, #0]
 801293a:	688b      	ldr	r3, [r1, #8]
 801293c:	2201      	movs	r2, #1
 801293e:	4393      	bics	r3, r2
 8012940:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012942:	2369      	movs	r3, #105	; 0x69
 8012944:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012946:	3b01      	subs	r3, #1
 8012948:	2200      	movs	r2, #0
 801294a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801294c:	2003      	movs	r0, #3
 801294e:	e000      	b.n	8012952 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012950:	2000      	movs	r0, #0
}
 8012952:	bc04      	pop	{r2}
 8012954:	4690      	mov	r8, r2
 8012956:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012958:	2000      	movs	r0, #0
 801295a:	e7fa      	b.n	8012952 <UART_WaitOnFlagUntilTimeout+0xc2>
 801295c:	fffffeff 	.word	0xfffffeff

08012960 <HAL_UART_Transmit>:
{
 8012960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012962:	b083      	sub	sp, #12
 8012964:	0004      	movs	r4, r0
 8012966:	000e      	movs	r6, r1
 8012968:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801296a:	2369      	movs	r3, #105	; 0x69
 801296c:	5cc3      	ldrb	r3, [r0, r3]
 801296e:	2b01      	cmp	r3, #1
 8012970:	d004      	beq.n	801297c <HAL_UART_Transmit+0x1c>
 8012972:	2369      	movs	r3, #105	; 0x69
 8012974:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8012976:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012978:	2b22      	cmp	r3, #34	; 0x22
 801297a:	d153      	bne.n	8012a24 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 801297c:	2e00      	cmp	r6, #0
 801297e:	d050      	beq.n	8012a22 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8012980:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012982:	2a00      	cmp	r2, #0
 8012984:	d04e      	beq.n	8012a24 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8012986:	2368      	movs	r3, #104	; 0x68
 8012988:	5ce3      	ldrb	r3, [r4, r3]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d04c      	beq.n	8012a28 <HAL_UART_Transmit+0xc8>
 801298e:	2368      	movs	r3, #104	; 0x68
 8012990:	2101      	movs	r1, #1
 8012992:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012994:	2300      	movs	r3, #0
 8012996:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012998:	3369      	adds	r3, #105	; 0x69
 801299a:	5ce3      	ldrb	r3, [r4, r3]
 801299c:	2b22      	cmp	r3, #34	; 0x22
 801299e:	d008      	beq.n	80129b2 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80129a0:	2369      	movs	r3, #105	; 0x69
 80129a2:	2112      	movs	r1, #18
 80129a4:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80129a6:	2350      	movs	r3, #80	; 0x50
 80129a8:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80129aa:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129ac:	2580      	movs	r5, #128	; 0x80
 80129ae:	016d      	lsls	r5, r5, #5
 80129b0:	e00a      	b.n	80129c8 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80129b2:	3347      	adds	r3, #71	; 0x47
 80129b4:	3131      	adds	r1, #49	; 0x31
 80129b6:	54e1      	strb	r1, [r4, r3]
 80129b8:	e7f5      	b.n	80129a6 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80129ba:	7833      	ldrb	r3, [r6, #0]
 80129bc:	6822      	ldr	r2, [r4, #0]
 80129be:	8513      	strh	r3, [r2, #40]	; 0x28
 80129c0:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80129c2:	5be2      	ldrh	r2, [r4, r7]
 80129c4:	2a00      	cmp	r2, #0
 80129c6:	d016      	beq.n	80129f6 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80129c8:	3a01      	subs	r2, #1
 80129ca:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80129cc:	9b01      	ldr	r3, [sp, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	2180      	movs	r1, #128	; 0x80
 80129d2:	0020      	movs	r0, r4
 80129d4:	f7ff ff5c 	bl	8012890 <UART_WaitOnFlagUntilTimeout>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d127      	bne.n	8012a2c <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129dc:	68a3      	ldr	r3, [r4, #8]
 80129de:	42ab      	cmp	r3, r5
 80129e0:	d1eb      	bne.n	80129ba <HAL_UART_Transmit+0x5a>
 80129e2:	6923      	ldr	r3, [r4, #16]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d1e8      	bne.n	80129ba <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80129e8:	8833      	ldrh	r3, [r6, #0]
 80129ea:	05db      	lsls	r3, r3, #23
 80129ec:	0ddb      	lsrs	r3, r3, #23
 80129ee:	6822      	ldr	r2, [r4, #0]
 80129f0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80129f2:	3602      	adds	r6, #2
 80129f4:	e7e5      	b.n	80129c2 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80129f6:	9b01      	ldr	r3, [sp, #4]
 80129f8:	2140      	movs	r1, #64	; 0x40
 80129fa:	0020      	movs	r0, r4
 80129fc:	f7ff ff48 	bl	8012890 <UART_WaitOnFlagUntilTimeout>
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d115      	bne.n	8012a30 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012a04:	2369      	movs	r3, #105	; 0x69
 8012a06:	5ce3      	ldrb	r3, [r4, r3]
 8012a08:	2b32      	cmp	r3, #50	; 0x32
 8012a0a:	d006      	beq.n	8012a1a <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012a0c:	2369      	movs	r3, #105	; 0x69
 8012a0e:	2201      	movs	r2, #1
 8012a10:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012a12:	2368      	movs	r3, #104	; 0x68
 8012a14:	2200      	movs	r2, #0
 8012a16:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012a18:	e004      	b.n	8012a24 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012a1a:	3337      	adds	r3, #55	; 0x37
 8012a1c:	2222      	movs	r2, #34	; 0x22
 8012a1e:	54e2      	strb	r2, [r4, r3]
 8012a20:	e7f7      	b.n	8012a12 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8012a22:	2001      	movs	r0, #1
}
 8012a24:	b003      	add	sp, #12
 8012a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8012a28:	2002      	movs	r0, #2
 8012a2a:	e7fb      	b.n	8012a24 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012a2c:	2003      	movs	r0, #3
 8012a2e:	e7f9      	b.n	8012a24 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012a30:	2003      	movs	r0, #3
 8012a32:	e7f7      	b.n	8012a24 <HAL_UART_Transmit+0xc4>

08012a34 <UART_CheckIdleState>:
{
 8012a34:	b510      	push	{r4, lr}
 8012a36:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012a3c:	6803      	ldr	r3, [r0, #0]
 8012a3e:	4a18      	ldr	r2, [pc, #96]	; (8012aa0 <UART_CheckIdleState+0x6c>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d005      	beq.n	8012a50 <UART_CheckIdleState+0x1c>
 8012a44:	4a17      	ldr	r2, [pc, #92]	; (8012aa4 <UART_CheckIdleState+0x70>)
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d002      	beq.n	8012a50 <UART_CheckIdleState+0x1c>
 8012a4a:	4a17      	ldr	r2, [pc, #92]	; (8012aa8 <UART_CheckIdleState+0x74>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d106      	bne.n	8012a5e <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	071b      	lsls	r3, r3, #28
 8012a54:	d40b      	bmi.n	8012a6e <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	075b      	lsls	r3, r3, #29
 8012a5c:	d413      	bmi.n	8012a86 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012a5e:	2369      	movs	r3, #105	; 0x69
 8012a60:	2201      	movs	r2, #1
 8012a62:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012a64:	3b01      	subs	r3, #1
 8012a66:	2200      	movs	r2, #0
 8012a68:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012a6a:	2000      	movs	r0, #0
}
 8012a6c:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012a6e:	23fa      	movs	r3, #250	; 0xfa
 8012a70:	2180      	movs	r1, #128	; 0x80
 8012a72:	009b      	lsls	r3, r3, #2
 8012a74:	2200      	movs	r2, #0
 8012a76:	0389      	lsls	r1, r1, #14
 8012a78:	0020      	movs	r0, r4
 8012a7a:	f7ff ff09 	bl	8012890 <UART_WaitOnFlagUntilTimeout>
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d0e9      	beq.n	8012a56 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012a82:	2003      	movs	r0, #3
 8012a84:	e7f2      	b.n	8012a6c <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012a86:	23fa      	movs	r3, #250	; 0xfa
 8012a88:	2180      	movs	r1, #128	; 0x80
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	03c9      	lsls	r1, r1, #15
 8012a90:	0020      	movs	r0, r4
 8012a92:	f7ff fefd 	bl	8012890 <UART_WaitOnFlagUntilTimeout>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d0e1      	beq.n	8012a5e <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8012a9a:	2003      	movs	r0, #3
 8012a9c:	e7e6      	b.n	8012a6c <UART_CheckIdleState+0x38>
 8012a9e:	46c0      	nop			; (mov r8, r8)
 8012aa0:	40013800 	.word	0x40013800
 8012aa4:	40004400 	.word	0x40004400
 8012aa8:	40004800 	.word	0x40004800

08012aac <HAL_UART_Init>:
{
 8012aac:	b510      	push	{r4, lr}
 8012aae:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012ab0:	d030      	beq.n	8012b14 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012ab2:	2369      	movs	r3, #105	; 0x69
 8012ab4:	5cc3      	ldrb	r3, [r0, r3]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d022      	beq.n	8012b00 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8012aba:	2369      	movs	r3, #105	; 0x69
 8012abc:	2202      	movs	r2, #2
 8012abe:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012ac0:	6822      	ldr	r2, [r4, #0]
 8012ac2:	6813      	ldr	r3, [r2, #0]
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	438b      	bics	r3, r1
 8012ac8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012aca:	0020      	movs	r0, r4
 8012acc:	f7ff fd4c 	bl	8012568 <UART_SetConfig>
 8012ad0:	2801      	cmp	r0, #1
 8012ad2:	d014      	beq.n	8012afe <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d118      	bne.n	8012b0c <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012ada:	6822      	ldr	r2, [r4, #0]
 8012adc:	6853      	ldr	r3, [r2, #4]
 8012ade:	490e      	ldr	r1, [pc, #56]	; (8012b18 <HAL_UART_Init+0x6c>)
 8012ae0:	400b      	ands	r3, r1
 8012ae2:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012ae4:	6822      	ldr	r2, [r4, #0]
 8012ae6:	6893      	ldr	r3, [r2, #8]
 8012ae8:	212a      	movs	r1, #42	; 0x2a
 8012aea:	438b      	bics	r3, r1
 8012aec:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012aee:	6822      	ldr	r2, [r4, #0]
 8012af0:	6813      	ldr	r3, [r2, #0]
 8012af2:	3929      	subs	r1, #41	; 0x29
 8012af4:	430b      	orrs	r3, r1
 8012af6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012af8:	0020      	movs	r0, r4
 8012afa:	f7ff ff9b 	bl	8012a34 <UART_CheckIdleState>
}
 8012afe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012b00:	3368      	adds	r3, #104	; 0x68
 8012b02:	2200      	movs	r2, #0
 8012b04:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012b06:	f7fa fbcb 	bl	800d2a0 <HAL_UART_MspInit>
 8012b0a:	e7d6      	b.n	8012aba <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012b0c:	0020      	movs	r0, r4
 8012b0e:	f7ff fe4f 	bl	80127b0 <UART_AdvFeatureConfig>
 8012b12:	e7e2      	b.n	8012ada <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012b14:	2001      	movs	r0, #1
 8012b16:	e7f2      	b.n	8012afe <HAL_UART_Init+0x52>
 8012b18:	ffffb7ff 	.word	0xffffb7ff

08012b1c <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012b1c:	2369      	movs	r3, #105	; 0x69
 8012b1e:	5cc3      	ldrb	r3, [r0, r3]
 8012b20:	2b12      	cmp	r3, #18
 8012b22:	d004      	beq.n	8012b2e <UART_Transmit_IT+0x12>
 8012b24:	2369      	movs	r3, #105	; 0x69
 8012b26:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8012b28:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012b2a:	2a32      	cmp	r2, #50	; 0x32
 8012b2c:	d113      	bne.n	8012b56 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012b2e:	2352      	movs	r3, #82	; 0x52
 8012b30:	5ac3      	ldrh	r3, [r0, r3]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d011      	beq.n	8012b5a <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b36:	2380      	movs	r3, #128	; 0x80
 8012b38:	015b      	lsls	r3, r3, #5
 8012b3a:	6882      	ldr	r2, [r0, #8]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d018      	beq.n	8012b72 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012b40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	6802      	ldr	r2, [r0, #0]
 8012b4a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8012b4c:	2252      	movs	r2, #82	; 0x52
 8012b4e:	5a83      	ldrh	r3, [r0, r2]
 8012b50:	3b01      	subs	r3, #1
 8012b52:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012b54:	2300      	movs	r3, #0
  }
}
 8012b56:	0018      	movs	r0, r3
 8012b58:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012b5a:	6802      	ldr	r2, [r0, #0]
 8012b5c:	6813      	ldr	r3, [r2, #0]
 8012b5e:	2180      	movs	r1, #128	; 0x80
 8012b60:	438b      	bics	r3, r1
 8012b62:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012b64:	6802      	ldr	r2, [r0, #0]
 8012b66:	6813      	ldr	r3, [r2, #0]
 8012b68:	3940      	subs	r1, #64	; 0x40
 8012b6a:	430b      	orrs	r3, r1
 8012b6c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e7f1      	b.n	8012b56 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b72:	6903      	ldr	r3, [r0, #16]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d1e3      	bne.n	8012b40 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012b78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012b7a:	881b      	ldrh	r3, [r3, #0]
 8012b7c:	05db      	lsls	r3, r3, #23
 8012b7e:	0ddb      	lsrs	r3, r3, #23
 8012b80:	6802      	ldr	r2, [r0, #0]
 8012b82:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012b84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012b86:	3302      	adds	r3, #2
 8012b88:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012b8a:	e7df      	b.n	8012b4c <UART_Transmit_IT+0x30>

08012b8c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012b8c:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012b8e:	6802      	ldr	r2, [r0, #0]
 8012b90:	6813      	ldr	r3, [r2, #0]
 8012b92:	2140      	movs	r1, #64	; 0x40
 8012b94:	438b      	bics	r3, r1
 8012b96:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012b98:	2369      	movs	r3, #105	; 0x69
 8012b9a:	5cc3      	ldrb	r3, [r0, r3]
 8012b9c:	2b32      	cmp	r3, #50	; 0x32
 8012b9e:	d00a      	beq.n	8012bb6 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012ba0:	6801      	ldr	r1, [r0, #0]
 8012ba2:	688b      	ldr	r3, [r1, #8]
 8012ba4:	2201      	movs	r2, #1
 8012ba6:	4393      	bics	r3, r2
 8012ba8:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8012baa:	2369      	movs	r3, #105	; 0x69
 8012bac:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012bae:	f7fa f867 	bl	800cc80 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012bb6:	3337      	adds	r3, #55	; 0x37
 8012bb8:	2222      	movs	r2, #34	; 0x22
 8012bba:	54c2      	strb	r2, [r0, r3]
 8012bbc:	e7f7      	b.n	8012bae <UART_EndTransmit_IT+0x22>
	...

08012bc0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012bc0:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012bc2:	2369      	movs	r3, #105	; 0x69
 8012bc4:	5cc3      	ldrb	r3, [r0, r3]
 8012bc6:	2b22      	cmp	r3, #34	; 0x22
 8012bc8:	d004      	beq.n	8012bd4 <UART_Receive_IT+0x14>
 8012bca:	2369      	movs	r3, #105	; 0x69
 8012bcc:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012bce:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012bd0:	2b32      	cmp	r3, #50	; 0x32
 8012bd2:	d12d      	bne.n	8012c30 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8012bd4:	235c      	movs	r3, #92	; 0x5c
 8012bd6:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012bd8:	2280      	movs	r2, #128	; 0x80
 8012bda:	0152      	lsls	r2, r2, #5
 8012bdc:	6883      	ldr	r3, [r0, #8]
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d028      	beq.n	8012c34 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012be2:	6803      	ldr	r3, [r0, #0]
 8012be4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012be6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012be8:	1c54      	adds	r4, r2, #1
 8012bea:	6544      	str	r4, [r0, #84]	; 0x54
 8012bec:	400b      	ands	r3, r1
 8012bee:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012bf0:	225a      	movs	r2, #90	; 0x5a
 8012bf2:	5a83      	ldrh	r3, [r0, r2]
 8012bf4:	3b01      	subs	r3, #1
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8012bfa:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d117      	bne.n	8012c30 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012c00:	6802      	ldr	r2, [r0, #0]
 8012c02:	6813      	ldr	r3, [r2, #0]
 8012c04:	2120      	movs	r1, #32
 8012c06:	438b      	bics	r3, r1
 8012c08:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012c0a:	2369      	movs	r3, #105	; 0x69
 8012c0c:	5cc3      	ldrb	r3, [r0, r3]
 8012c0e:	2b32      	cmp	r3, #50	; 0x32
 8012c10:	d01c      	beq.n	8012c4c <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012c12:	6802      	ldr	r2, [r0, #0]
 8012c14:	6813      	ldr	r3, [r2, #0]
 8012c16:	490f      	ldr	r1, [pc, #60]	; (8012c54 <UART_Receive_IT+0x94>)
 8012c18:	400b      	ands	r3, r1
 8012c1a:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012c1c:	6801      	ldr	r1, [r0, #0]
 8012c1e:	688b      	ldr	r3, [r1, #8]
 8012c20:	2201      	movs	r2, #1
 8012c22:	4393      	bics	r3, r2
 8012c24:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8012c26:	2369      	movs	r3, #105	; 0x69
 8012c28:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8012c2a:	f7fa f86d 	bl	800cd08 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012c2e:	2200      	movs	r2, #0
  }
}
 8012c30:	0010      	movs	r0, r2
 8012c32:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c34:	6903      	ldr	r3, [r0, #16]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d1d3      	bne.n	8012be2 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012c3a:	6803      	ldr	r3, [r0, #0]
 8012c3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c3e:	400b      	ands	r3, r1
 8012c40:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012c42:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012c44:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012c46:	3302      	adds	r3, #2
 8012c48:	6543      	str	r3, [r0, #84]	; 0x54
 8012c4a:	e7d1      	b.n	8012bf0 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012c4c:	3337      	adds	r3, #55	; 0x37
 8012c4e:	2212      	movs	r2, #18
 8012c50:	54c2      	strb	r2, [r0, r3]
 8012c52:	e7ea      	b.n	8012c2a <UART_Receive_IT+0x6a>
 8012c54:	fffffeff 	.word	0xfffffeff

08012c58 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012c58:	4770      	bx	lr

08012c5a <HAL_UART_IRQHandler>:
{
 8012c5a:	b510      	push	{r4, lr}
 8012c5c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012c5e:	6803      	ldr	r3, [r0, #0]
 8012c60:	69da      	ldr	r2, [r3, #28]
 8012c62:	07d2      	lsls	r2, r2, #31
 8012c64:	d509      	bpl.n	8012c7a <HAL_UART_IRQHandler+0x20>
 8012c66:	681a      	ldr	r2, [r3, #0]
 8012c68:	05d2      	lsls	r2, r2, #23
 8012c6a:	d506      	bpl.n	8012c7a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012c70:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012c72:	4313      	orrs	r3, r2
 8012c74:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012c76:	2369      	movs	r3, #105	; 0x69
 8012c78:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	69da      	ldr	r2, [r3, #28]
 8012c7e:	0792      	lsls	r2, r2, #30
 8012c80:	d50b      	bpl.n	8012c9a <HAL_UART_IRQHandler+0x40>
 8012c82:	689a      	ldr	r2, [r3, #8]
 8012c84:	07d2      	lsls	r2, r2, #31
 8012c86:	d508      	bpl.n	8012c9a <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012c88:	2202      	movs	r2, #2
 8012c8a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012c8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c8e:	3202      	adds	r2, #2
 8012c90:	4313      	orrs	r3, r2
 8012c92:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012c94:	2369      	movs	r3, #105	; 0x69
 8012c96:	3a03      	subs	r2, #3
 8012c98:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012c9a:	6823      	ldr	r3, [r4, #0]
 8012c9c:	69da      	ldr	r2, [r3, #28]
 8012c9e:	0752      	lsls	r2, r2, #29
 8012ca0:	d50b      	bpl.n	8012cba <HAL_UART_IRQHandler+0x60>
 8012ca2:	689a      	ldr	r2, [r3, #8]
 8012ca4:	07d2      	lsls	r2, r2, #31
 8012ca6:	d508      	bpl.n	8012cba <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012ca8:	2204      	movs	r2, #4
 8012caa:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012cac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012cae:	3a02      	subs	r2, #2
 8012cb0:	4313      	orrs	r3, r2
 8012cb2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012cb4:	2369      	movs	r3, #105	; 0x69
 8012cb6:	3a01      	subs	r2, #1
 8012cb8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	69da      	ldr	r2, [r3, #28]
 8012cbe:	0712      	lsls	r2, r2, #28
 8012cc0:	d50a      	bpl.n	8012cd8 <HAL_UART_IRQHandler+0x7e>
 8012cc2:	689a      	ldr	r2, [r3, #8]
 8012cc4:	07d2      	lsls	r2, r2, #31
 8012cc6:	d507      	bpl.n	8012cd8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012cc8:	2208      	movs	r2, #8
 8012cca:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012ccc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012cd2:	2369      	movs	r3, #105	; 0x69
 8012cd4:	3a07      	subs	r2, #7
 8012cd6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012cd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d11c      	bne.n	8012d18 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012cde:	6823      	ldr	r3, [r4, #0]
 8012ce0:	69da      	ldr	r2, [r3, #28]
 8012ce2:	02d2      	lsls	r2, r2, #11
 8012ce4:	d502      	bpl.n	8012cec <HAL_UART_IRQHandler+0x92>
 8012ce6:	689a      	ldr	r2, [r3, #8]
 8012ce8:	0252      	lsls	r2, r2, #9
 8012cea:	d419      	bmi.n	8012d20 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	69da      	ldr	r2, [r3, #28]
 8012cf0:	0692      	lsls	r2, r2, #26
 8012cf2:	d502      	bpl.n	8012cfa <HAL_UART_IRQHandler+0xa0>
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	069b      	lsls	r3, r3, #26
 8012cf8:	d41c      	bmi.n	8012d34 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012cfa:	6823      	ldr	r3, [r4, #0]
 8012cfc:	69da      	ldr	r2, [r3, #28]
 8012cfe:	0612      	lsls	r2, r2, #24
 8012d00:	d502      	bpl.n	8012d08 <HAL_UART_IRQHandler+0xae>
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	061b      	lsls	r3, r3, #24
 8012d06:	d41e      	bmi.n	8012d46 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	69da      	ldr	r2, [r3, #28]
 8012d0c:	0652      	lsls	r2, r2, #25
 8012d0e:	d502      	bpl.n	8012d16 <HAL_UART_IRQHandler+0xbc>
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	065b      	lsls	r3, r3, #25
 8012d14:	d41b      	bmi.n	8012d4e <HAL_UART_IRQHandler+0xf4>
}
 8012d16:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8012d18:	0020      	movs	r0, r4
 8012d1a:	f7f9 ffcf 	bl	800ccbc <HAL_UART_ErrorCallback>
 8012d1e:	e7de      	b.n	8012cde <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012d20:	2280      	movs	r2, #128	; 0x80
 8012d22:	0352      	lsls	r2, r2, #13
 8012d24:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012d26:	2369      	movs	r3, #105	; 0x69
 8012d28:	2201      	movs	r2, #1
 8012d2a:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012d2c:	0020      	movs	r0, r4
 8012d2e:	f7ff ff93 	bl	8012c58 <HAL_UARTEx_WakeupCallback>
 8012d32:	e7db      	b.n	8012cec <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8012d34:	0020      	movs	r0, r4
 8012d36:	f7ff ff43 	bl	8012bc0 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d3a:	6822      	ldr	r2, [r4, #0]
 8012d3c:	6993      	ldr	r3, [r2, #24]
 8012d3e:	2108      	movs	r1, #8
 8012d40:	430b      	orrs	r3, r1
 8012d42:	6193      	str	r3, [r2, #24]
 8012d44:	e7d9      	b.n	8012cfa <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8012d46:	0020      	movs	r0, r4
 8012d48:	f7ff fee8 	bl	8012b1c <UART_Transmit_IT>
 8012d4c:	e7dc      	b.n	8012d08 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8012d4e:	0020      	movs	r0, r4
 8012d50:	f7ff ff1c 	bl	8012b8c <UART_EndTransmit_IT>
}
 8012d54:	e7df      	b.n	8012d16 <HAL_UART_IRQHandler+0xbc>

08012d56 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012d56:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012d58:	f7f1 fc88 	bl	800466c <Module_Init>
 8012d5c:	e7fe      	b.n	8012d5c <main+0x6>

08012d5e <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012d5e:	e7fe      	b.n	8012d5e <UserTask>

08012d60 <atof>:
 8012d60:	b510      	push	{r4, lr}
 8012d62:	2100      	movs	r1, #0
 8012d64:	f001 fb3e 	bl	80143e4 <strtod>
 8012d68:	bd10      	pop	{r4, pc}

08012d6a <atoi>:
 8012d6a:	b510      	push	{r4, lr}
 8012d6c:	220a      	movs	r2, #10
 8012d6e:	2100      	movs	r1, #0
 8012d70:	f001 fc04 	bl	801457c <strtol>
 8012d74:	bd10      	pop	{r4, pc}

08012d76 <atol>:
 8012d76:	b510      	push	{r4, lr}
 8012d78:	220a      	movs	r2, #10
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	f001 fbfe 	bl	801457c <strtol>
 8012d80:	bd10      	pop	{r4, pc}
	...

08012d84 <__libc_init_array>:
 8012d84:	b570      	push	{r4, r5, r6, lr}
 8012d86:	2600      	movs	r6, #0
 8012d88:	4d0c      	ldr	r5, [pc, #48]	; (8012dbc <__libc_init_array+0x38>)
 8012d8a:	4c0d      	ldr	r4, [pc, #52]	; (8012dc0 <__libc_init_array+0x3c>)
 8012d8c:	1b64      	subs	r4, r4, r5
 8012d8e:	10a4      	asrs	r4, r4, #2
 8012d90:	42a6      	cmp	r6, r4
 8012d92:	d109      	bne.n	8012da8 <__libc_init_array+0x24>
 8012d94:	2600      	movs	r6, #0
 8012d96:	f004 fe6d 	bl	8017a74 <_init>
 8012d9a:	4d0a      	ldr	r5, [pc, #40]	; (8012dc4 <__libc_init_array+0x40>)
 8012d9c:	4c0a      	ldr	r4, [pc, #40]	; (8012dc8 <__libc_init_array+0x44>)
 8012d9e:	1b64      	subs	r4, r4, r5
 8012da0:	10a4      	asrs	r4, r4, #2
 8012da2:	42a6      	cmp	r6, r4
 8012da4:	d105      	bne.n	8012db2 <__libc_init_array+0x2e>
 8012da6:	bd70      	pop	{r4, r5, r6, pc}
 8012da8:	00b3      	lsls	r3, r6, #2
 8012daa:	58eb      	ldr	r3, [r5, r3]
 8012dac:	4798      	blx	r3
 8012dae:	3601      	adds	r6, #1
 8012db0:	e7ee      	b.n	8012d90 <__libc_init_array+0xc>
 8012db2:	00b3      	lsls	r3, r6, #2
 8012db4:	58eb      	ldr	r3, [r5, r3]
 8012db6:	4798      	blx	r3
 8012db8:	3601      	adds	r6, #1
 8012dba:	e7f2      	b.n	8012da2 <__libc_init_array+0x1e>
 8012dbc:	0801abfc 	.word	0x0801abfc
 8012dc0:	0801abfc 	.word	0x0801abfc
 8012dc4:	0801abfc 	.word	0x0801abfc
 8012dc8:	0801ac04 	.word	0x0801ac04

08012dcc <__locale_ctype_ptr_l>:
 8012dcc:	30ec      	adds	r0, #236	; 0xec
 8012dce:	6800      	ldr	r0, [r0, #0]
 8012dd0:	4770      	bx	lr
	...

08012dd4 <__locale_ctype_ptr>:
 8012dd4:	4b04      	ldr	r3, [pc, #16]	; (8012de8 <__locale_ctype_ptr+0x14>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d100      	bne.n	8012de0 <__locale_ctype_ptr+0xc>
 8012dde:	4b03      	ldr	r3, [pc, #12]	; (8012dec <__locale_ctype_ptr+0x18>)
 8012de0:	33ec      	adds	r3, #236	; 0xec
 8012de2:	6818      	ldr	r0, [r3, #0]
 8012de4:	4770      	bx	lr
 8012de6:	46c0      	nop			; (mov r8, r8)
 8012de8:	200000a8 	.word	0x200000a8
 8012dec:	200004d8 	.word	0x200004d8

08012df0 <malloc>:
 8012df0:	b510      	push	{r4, lr}
 8012df2:	4b03      	ldr	r3, [pc, #12]	; (8012e00 <malloc+0x10>)
 8012df4:	0001      	movs	r1, r0
 8012df6:	6818      	ldr	r0, [r3, #0]
 8012df8:	f000 f80e 	bl	8012e18 <_malloc_r>
 8012dfc:	bd10      	pop	{r4, pc}
 8012dfe:	46c0      	nop			; (mov r8, r8)
 8012e00:	200000a8 	.word	0x200000a8

08012e04 <free>:
 8012e04:	b510      	push	{r4, lr}
 8012e06:	4b03      	ldr	r3, [pc, #12]	; (8012e14 <free+0x10>)
 8012e08:	0001      	movs	r1, r0
 8012e0a:	6818      	ldr	r0, [r3, #0]
 8012e0c:	f003 fd10 	bl	8016830 <_free_r>
 8012e10:	bd10      	pop	{r4, pc}
 8012e12:	46c0      	nop			; (mov r8, r8)
 8012e14:	200000a8 	.word	0x200000a8

08012e18 <_malloc_r>:
 8012e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e1a:	000d      	movs	r5, r1
 8012e1c:	b085      	sub	sp, #20
 8012e1e:	350b      	adds	r5, #11
 8012e20:	9001      	str	r0, [sp, #4]
 8012e22:	2d16      	cmp	r5, #22
 8012e24:	d908      	bls.n	8012e38 <_malloc_r+0x20>
 8012e26:	2307      	movs	r3, #7
 8012e28:	439d      	bics	r5, r3
 8012e2a:	d506      	bpl.n	8012e3a <_malloc_r+0x22>
 8012e2c:	230c      	movs	r3, #12
 8012e2e:	9a01      	ldr	r2, [sp, #4]
 8012e30:	6013      	str	r3, [r2, #0]
 8012e32:	2000      	movs	r0, #0
 8012e34:	b005      	add	sp, #20
 8012e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e38:	2510      	movs	r5, #16
 8012e3a:	428d      	cmp	r5, r1
 8012e3c:	d3f6      	bcc.n	8012e2c <_malloc_r+0x14>
 8012e3e:	9801      	ldr	r0, [sp, #4]
 8012e40:	f000 fa34 	bl	80132ac <__malloc_lock>
 8012e44:	23f8      	movs	r3, #248	; 0xf8
 8012e46:	33ff      	adds	r3, #255	; 0xff
 8012e48:	4ac4      	ldr	r2, [pc, #784]	; (801315c <_malloc_r+0x344>)
 8012e4a:	429d      	cmp	r5, r3
 8012e4c:	d820      	bhi.n	8012e90 <_malloc_r+0x78>
 8012e4e:	0029      	movs	r1, r5
 8012e50:	3108      	adds	r1, #8
 8012e52:	1851      	adds	r1, r2, r1
 8012e54:	0008      	movs	r0, r1
 8012e56:	684c      	ldr	r4, [r1, #4]
 8012e58:	3808      	subs	r0, #8
 8012e5a:	08eb      	lsrs	r3, r5, #3
 8012e5c:	4284      	cmp	r4, r0
 8012e5e:	d104      	bne.n	8012e6a <_malloc_r+0x52>
 8012e60:	68cc      	ldr	r4, [r1, #12]
 8012e62:	3302      	adds	r3, #2
 8012e64:	469c      	mov	ip, r3
 8012e66:	42a1      	cmp	r1, r4
 8012e68:	d02a      	beq.n	8012ec0 <_malloc_r+0xa8>
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	6862      	ldr	r2, [r4, #4]
 8012e6e:	68a1      	ldr	r1, [r4, #8]
 8012e70:	439a      	bics	r2, r3
 8012e72:	0013      	movs	r3, r2
 8012e74:	68e2      	ldr	r2, [r4, #12]
 8012e76:	18e3      	adds	r3, r4, r3
 8012e78:	60ca      	str	r2, [r1, #12]
 8012e7a:	6091      	str	r1, [r2, #8]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	6859      	ldr	r1, [r3, #4]
 8012e80:	430a      	orrs	r2, r1
 8012e82:	605a      	str	r2, [r3, #4]
 8012e84:	9801      	ldr	r0, [sp, #4]
 8012e86:	f000 fa19 	bl	80132bc <__malloc_unlock>
 8012e8a:	0020      	movs	r0, r4
 8012e8c:	3008      	adds	r0, #8
 8012e8e:	e7d1      	b.n	8012e34 <_malloc_r+0x1c>
 8012e90:	0a69      	lsrs	r1, r5, #9
 8012e92:	233f      	movs	r3, #63	; 0x3f
 8012e94:	2900      	cmp	r1, #0
 8012e96:	d003      	beq.n	8012ea0 <_malloc_r+0x88>
 8012e98:	2904      	cmp	r1, #4
 8012e9a:	d828      	bhi.n	8012eee <_malloc_r+0xd6>
 8012e9c:	09ab      	lsrs	r3, r5, #6
 8012e9e:	3338      	adds	r3, #56	; 0x38
 8012ea0:	2103      	movs	r1, #3
 8012ea2:	468c      	mov	ip, r1
 8012ea4:	00d8      	lsls	r0, r3, #3
 8012ea6:	1880      	adds	r0, r0, r2
 8012ea8:	68c4      	ldr	r4, [r0, #12]
 8012eaa:	4284      	cmp	r4, r0
 8012eac:	d006      	beq.n	8012ebc <_malloc_r+0xa4>
 8012eae:	4666      	mov	r6, ip
 8012eb0:	6861      	ldr	r1, [r4, #4]
 8012eb2:	43b1      	bics	r1, r6
 8012eb4:	1b4f      	subs	r7, r1, r5
 8012eb6:	2f0f      	cmp	r7, #15
 8012eb8:	dd31      	ble.n	8012f1e <_malloc_r+0x106>
 8012eba:	3b01      	subs	r3, #1
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	469c      	mov	ip, r3
 8012ec0:	6914      	ldr	r4, [r2, #16]
 8012ec2:	49a7      	ldr	r1, [pc, #668]	; (8013160 <_malloc_r+0x348>)
 8012ec4:	428c      	cmp	r4, r1
 8012ec6:	d055      	beq.n	8012f74 <_malloc_r+0x15c>
 8012ec8:	2303      	movs	r3, #3
 8012eca:	6860      	ldr	r0, [r4, #4]
 8012ecc:	4398      	bics	r0, r3
 8012ece:	0003      	movs	r3, r0
 8012ed0:	1b46      	subs	r6, r0, r5
 8012ed2:	2e0f      	cmp	r6, #15
 8012ed4:	dd31      	ble.n	8012f3a <_malloc_r+0x122>
 8012ed6:	2701      	movs	r7, #1
 8012ed8:	1960      	adds	r0, r4, r5
 8012eda:	433d      	orrs	r5, r7
 8012edc:	4337      	orrs	r7, r6
 8012ede:	6065      	str	r5, [r4, #4]
 8012ee0:	6150      	str	r0, [r2, #20]
 8012ee2:	6110      	str	r0, [r2, #16]
 8012ee4:	60c1      	str	r1, [r0, #12]
 8012ee6:	6081      	str	r1, [r0, #8]
 8012ee8:	6047      	str	r7, [r0, #4]
 8012eea:	50e6      	str	r6, [r4, r3]
 8012eec:	e7ca      	b.n	8012e84 <_malloc_r+0x6c>
 8012eee:	2914      	cmp	r1, #20
 8012ef0:	d802      	bhi.n	8012ef8 <_malloc_r+0xe0>
 8012ef2:	000b      	movs	r3, r1
 8012ef4:	335b      	adds	r3, #91	; 0x5b
 8012ef6:	e7d3      	b.n	8012ea0 <_malloc_r+0x88>
 8012ef8:	2954      	cmp	r1, #84	; 0x54
 8012efa:	d802      	bhi.n	8012f02 <_malloc_r+0xea>
 8012efc:	0b2b      	lsrs	r3, r5, #12
 8012efe:	336e      	adds	r3, #110	; 0x6e
 8012f00:	e7ce      	b.n	8012ea0 <_malloc_r+0x88>
 8012f02:	23aa      	movs	r3, #170	; 0xaa
 8012f04:	005b      	lsls	r3, r3, #1
 8012f06:	4299      	cmp	r1, r3
 8012f08:	d802      	bhi.n	8012f10 <_malloc_r+0xf8>
 8012f0a:	0beb      	lsrs	r3, r5, #15
 8012f0c:	3377      	adds	r3, #119	; 0x77
 8012f0e:	e7c7      	b.n	8012ea0 <_malloc_r+0x88>
 8012f10:	4894      	ldr	r0, [pc, #592]	; (8013164 <_malloc_r+0x34c>)
 8012f12:	237e      	movs	r3, #126	; 0x7e
 8012f14:	4281      	cmp	r1, r0
 8012f16:	d8c3      	bhi.n	8012ea0 <_malloc_r+0x88>
 8012f18:	0cab      	lsrs	r3, r5, #18
 8012f1a:	337c      	adds	r3, #124	; 0x7c
 8012f1c:	e7c0      	b.n	8012ea0 <_malloc_r+0x88>
 8012f1e:	68e6      	ldr	r6, [r4, #12]
 8012f20:	2f00      	cmp	r7, #0
 8012f22:	db08      	blt.n	8012f36 <_malloc_r+0x11e>
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	1861      	adds	r1, r4, r1
 8012f28:	60de      	str	r6, [r3, #12]
 8012f2a:	60b3      	str	r3, [r6, #8]
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	684a      	ldr	r2, [r1, #4]
 8012f30:	4313      	orrs	r3, r2
 8012f32:	604b      	str	r3, [r1, #4]
 8012f34:	e7a6      	b.n	8012e84 <_malloc_r+0x6c>
 8012f36:	0034      	movs	r4, r6
 8012f38:	e7b7      	b.n	8012eaa <_malloc_r+0x92>
 8012f3a:	6151      	str	r1, [r2, #20]
 8012f3c:	6111      	str	r1, [r2, #16]
 8012f3e:	2e00      	cmp	r6, #0
 8012f40:	db05      	blt.n	8012f4e <_malloc_r+0x136>
 8012f42:	2101      	movs	r1, #1
 8012f44:	1823      	adds	r3, r4, r0
 8012f46:	685a      	ldr	r2, [r3, #4]
 8012f48:	4311      	orrs	r1, r2
 8012f4a:	6059      	str	r1, [r3, #4]
 8012f4c:	e79a      	b.n	8012e84 <_malloc_r+0x6c>
 8012f4e:	4986      	ldr	r1, [pc, #536]	; (8013168 <_malloc_r+0x350>)
 8012f50:	6857      	ldr	r7, [r2, #4]
 8012f52:	4288      	cmp	r0, r1
 8012f54:	d900      	bls.n	8012f58 <_malloc_r+0x140>
 8012f56:	e090      	b.n	801307a <_malloc_r+0x262>
 8012f58:	08c3      	lsrs	r3, r0, #3
 8012f5a:	39ff      	subs	r1, #255	; 0xff
 8012f5c:	1098      	asrs	r0, r3, #2
 8012f5e:	39ff      	subs	r1, #255	; 0xff
 8012f60:	4081      	lsls	r1, r0
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	4339      	orrs	r1, r7
 8012f66:	6051      	str	r1, [r2, #4]
 8012f68:	189a      	adds	r2, r3, r2
 8012f6a:	6893      	ldr	r3, [r2, #8]
 8012f6c:	60e2      	str	r2, [r4, #12]
 8012f6e:	60a3      	str	r3, [r4, #8]
 8012f70:	6094      	str	r4, [r2, #8]
 8012f72:	60dc      	str	r4, [r3, #12]
 8012f74:	4663      	mov	r3, ip
 8012f76:	2201      	movs	r2, #1
 8012f78:	4978      	ldr	r1, [pc, #480]	; (801315c <_malloc_r+0x344>)
 8012f7a:	109b      	asrs	r3, r3, #2
 8012f7c:	6848      	ldr	r0, [r1, #4]
 8012f7e:	409a      	lsls	r2, r3
 8012f80:	4290      	cmp	r0, r2
 8012f82:	d32d      	bcc.n	8012fe0 <_malloc_r+0x1c8>
 8012f84:	4202      	tst	r2, r0
 8012f86:	d109      	bne.n	8012f9c <_malloc_r+0x184>
 8012f88:	2303      	movs	r3, #3
 8012f8a:	4664      	mov	r4, ip
 8012f8c:	439c      	bics	r4, r3
 8012f8e:	0023      	movs	r3, r4
 8012f90:	3304      	adds	r3, #4
 8012f92:	469c      	mov	ip, r3
 8012f94:	0052      	lsls	r2, r2, #1
 8012f96:	4202      	tst	r2, r0
 8012f98:	d100      	bne.n	8012f9c <_malloc_r+0x184>
 8012f9a:	e0a4      	b.n	80130e6 <_malloc_r+0x2ce>
 8012f9c:	4663      	mov	r3, ip
 8012f9e:	00db      	lsls	r3, r3, #3
 8012fa0:	18cb      	adds	r3, r1, r3
 8012fa2:	9303      	str	r3, [sp, #12]
 8012fa4:	001f      	movs	r7, r3
 8012fa6:	4663      	mov	r3, ip
 8012fa8:	9302      	str	r3, [sp, #8]
 8012faa:	68fc      	ldr	r4, [r7, #12]
 8012fac:	42bc      	cmp	r4, r7
 8012fae:	d000      	beq.n	8012fb2 <_malloc_r+0x19a>
 8012fb0:	e09c      	b.n	80130ec <_malloc_r+0x2d4>
 8012fb2:	2003      	movs	r0, #3
 8012fb4:	9b02      	ldr	r3, [sp, #8]
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	3301      	adds	r3, #1
 8012fba:	9302      	str	r3, [sp, #8]
 8012fbc:	4203      	tst	r3, r0
 8012fbe:	d1f4      	bne.n	8012faa <_malloc_r+0x192>
 8012fc0:	4663      	mov	r3, ip
 8012fc2:	2003      	movs	r0, #3
 8012fc4:	4203      	tst	r3, r0
 8012fc6:	d000      	beq.n	8012fca <_malloc_r+0x1b2>
 8012fc8:	e0b3      	b.n	8013132 <_malloc_r+0x31a>
 8012fca:	684b      	ldr	r3, [r1, #4]
 8012fcc:	4393      	bics	r3, r2
 8012fce:	604b      	str	r3, [r1, #4]
 8012fd0:	4b62      	ldr	r3, [pc, #392]	; (801315c <_malloc_r+0x344>)
 8012fd2:	0052      	lsls	r2, r2, #1
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d302      	bcc.n	8012fe0 <_malloc_r+0x1c8>
 8012fda:	2a00      	cmp	r2, #0
 8012fdc:	d000      	beq.n	8012fe0 <_malloc_r+0x1c8>
 8012fde:	e0b9      	b.n	8013154 <_malloc_r+0x33c>
 8012fe0:	2303      	movs	r3, #3
 8012fe2:	688f      	ldr	r7, [r1, #8]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	439a      	bics	r2, r3
 8012fe8:	9202      	str	r2, [sp, #8]
 8012fea:	42aa      	cmp	r2, r5
 8012fec:	d303      	bcc.n	8012ff6 <_malloc_r+0x1de>
 8012fee:	1b52      	subs	r2, r2, r5
 8012ff0:	2a0f      	cmp	r2, #15
 8012ff2:	dd00      	ble.n	8012ff6 <_malloc_r+0x1de>
 8012ff4:	e116      	b.n	8013224 <_malloc_r+0x40c>
 8012ff6:	4b5d      	ldr	r3, [pc, #372]	; (801316c <_malloc_r+0x354>)
 8012ff8:	2008      	movs	r0, #8
 8012ffa:	681e      	ldr	r6, [r3, #0]
 8012ffc:	f002 fd26 	bl	8015a4c <sysconf>
 8013000:	4b5b      	ldr	r3, [pc, #364]	; (8013170 <_malloc_r+0x358>)
 8013002:	3610      	adds	r6, #16
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	1976      	adds	r6, r6, r5
 8013008:	9003      	str	r0, [sp, #12]
 801300a:	3301      	adds	r3, #1
 801300c:	d003      	beq.n	8013016 <_malloc_r+0x1fe>
 801300e:	3e01      	subs	r6, #1
 8013010:	1836      	adds	r6, r6, r0
 8013012:	4243      	negs	r3, r0
 8013014:	401e      	ands	r6, r3
 8013016:	0031      	movs	r1, r6
 8013018:	9801      	ldr	r0, [sp, #4]
 801301a:	f000 fb27 	bl	801366c <_sbrk_r>
 801301e:	0004      	movs	r4, r0
 8013020:	1c43      	adds	r3, r0, #1
 8013022:	d100      	bne.n	8013026 <_malloc_r+0x20e>
 8013024:	e0d6      	b.n	80131d4 <_malloc_r+0x3bc>
 8013026:	9b02      	ldr	r3, [sp, #8]
 8013028:	18fb      	adds	r3, r7, r3
 801302a:	4283      	cmp	r3, r0
 801302c:	d903      	bls.n	8013036 <_malloc_r+0x21e>
 801302e:	4a4b      	ldr	r2, [pc, #300]	; (801315c <_malloc_r+0x344>)
 8013030:	4297      	cmp	r7, r2
 8013032:	d000      	beq.n	8013036 <_malloc_r+0x21e>
 8013034:	e0ce      	b.n	80131d4 <_malloc_r+0x3bc>
 8013036:	494f      	ldr	r1, [pc, #316]	; (8013174 <_malloc_r+0x35c>)
 8013038:	680a      	ldr	r2, [r1, #0]
 801303a:	18b2      	adds	r2, r6, r2
 801303c:	600a      	str	r2, [r1, #0]
 801303e:	9903      	ldr	r1, [sp, #12]
 8013040:	4694      	mov	ip, r2
 8013042:	1e48      	subs	r0, r1, #1
 8013044:	42a3      	cmp	r3, r4
 8013046:	d000      	beq.n	801304a <_malloc_r+0x232>
 8013048:	e09a      	b.n	8013180 <_malloc_r+0x368>
 801304a:	4203      	tst	r3, r0
 801304c:	d000      	beq.n	8013050 <_malloc_r+0x238>
 801304e:	e097      	b.n	8013180 <_malloc_r+0x368>
 8013050:	9a02      	ldr	r2, [sp, #8]
 8013052:	4b42      	ldr	r3, [pc, #264]	; (801315c <_malloc_r+0x344>)
 8013054:	1992      	adds	r2, r2, r6
 8013056:	2601      	movs	r6, #1
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	4316      	orrs	r6, r2
 801305c:	605e      	str	r6, [r3, #4]
 801305e:	4b45      	ldr	r3, [pc, #276]	; (8013174 <_malloc_r+0x35c>)
 8013060:	4a45      	ldr	r2, [pc, #276]	; (8013178 <_malloc_r+0x360>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	6811      	ldr	r1, [r2, #0]
 8013066:	428b      	cmp	r3, r1
 8013068:	d900      	bls.n	801306c <_malloc_r+0x254>
 801306a:	6013      	str	r3, [r2, #0]
 801306c:	4a43      	ldr	r2, [pc, #268]	; (801317c <_malloc_r+0x364>)
 801306e:	6811      	ldr	r1, [r2, #0]
 8013070:	428b      	cmp	r3, r1
 8013072:	d800      	bhi.n	8013076 <_malloc_r+0x25e>
 8013074:	e0ae      	b.n	80131d4 <_malloc_r+0x3bc>
 8013076:	6013      	str	r3, [r2, #0]
 8013078:	e0ac      	b.n	80131d4 <_malloc_r+0x3bc>
 801307a:	0a40      	lsrs	r0, r0, #9
 801307c:	2804      	cmp	r0, #4
 801307e:	d810      	bhi.n	80130a2 <_malloc_r+0x28a>
 8013080:	0999      	lsrs	r1, r3, #6
 8013082:	3138      	adds	r1, #56	; 0x38
 8013084:	00ce      	lsls	r6, r1, #3
 8013086:	18b6      	adds	r6, r6, r2
 8013088:	68b0      	ldr	r0, [r6, #8]
 801308a:	4286      	cmp	r6, r0
 801308c:	d124      	bne.n	80130d8 <_malloc_r+0x2c0>
 801308e:	2301      	movs	r3, #1
 8013090:	1089      	asrs	r1, r1, #2
 8013092:	408b      	lsls	r3, r1
 8013094:	433b      	orrs	r3, r7
 8013096:	6053      	str	r3, [r2, #4]
 8013098:	60e6      	str	r6, [r4, #12]
 801309a:	60a0      	str	r0, [r4, #8]
 801309c:	60b4      	str	r4, [r6, #8]
 801309e:	60c4      	str	r4, [r0, #12]
 80130a0:	e768      	b.n	8012f74 <_malloc_r+0x15c>
 80130a2:	2814      	cmp	r0, #20
 80130a4:	d802      	bhi.n	80130ac <_malloc_r+0x294>
 80130a6:	0001      	movs	r1, r0
 80130a8:	315b      	adds	r1, #91	; 0x5b
 80130aa:	e7eb      	b.n	8013084 <_malloc_r+0x26c>
 80130ac:	2854      	cmp	r0, #84	; 0x54
 80130ae:	d802      	bhi.n	80130b6 <_malloc_r+0x29e>
 80130b0:	0b19      	lsrs	r1, r3, #12
 80130b2:	316e      	adds	r1, #110	; 0x6e
 80130b4:	e7e6      	b.n	8013084 <_malloc_r+0x26c>
 80130b6:	21aa      	movs	r1, #170	; 0xaa
 80130b8:	0049      	lsls	r1, r1, #1
 80130ba:	4288      	cmp	r0, r1
 80130bc:	d802      	bhi.n	80130c4 <_malloc_r+0x2ac>
 80130be:	0bd9      	lsrs	r1, r3, #15
 80130c0:	3177      	adds	r1, #119	; 0x77
 80130c2:	e7df      	b.n	8013084 <_malloc_r+0x26c>
 80130c4:	4e27      	ldr	r6, [pc, #156]	; (8013164 <_malloc_r+0x34c>)
 80130c6:	217e      	movs	r1, #126	; 0x7e
 80130c8:	42b0      	cmp	r0, r6
 80130ca:	d8db      	bhi.n	8013084 <_malloc_r+0x26c>
 80130cc:	0c99      	lsrs	r1, r3, #18
 80130ce:	317c      	adds	r1, #124	; 0x7c
 80130d0:	e7d8      	b.n	8013084 <_malloc_r+0x26c>
 80130d2:	6880      	ldr	r0, [r0, #8]
 80130d4:	4286      	cmp	r6, r0
 80130d6:	d004      	beq.n	80130e2 <_malloc_r+0x2ca>
 80130d8:	2103      	movs	r1, #3
 80130da:	6842      	ldr	r2, [r0, #4]
 80130dc:	438a      	bics	r2, r1
 80130de:	429a      	cmp	r2, r3
 80130e0:	d8f7      	bhi.n	80130d2 <_malloc_r+0x2ba>
 80130e2:	68c6      	ldr	r6, [r0, #12]
 80130e4:	e7d8      	b.n	8013098 <_malloc_r+0x280>
 80130e6:	2304      	movs	r3, #4
 80130e8:	449c      	add	ip, r3
 80130ea:	e753      	b.n	8012f94 <_malloc_r+0x17c>
 80130ec:	2003      	movs	r0, #3
 80130ee:	6863      	ldr	r3, [r4, #4]
 80130f0:	4383      	bics	r3, r0
 80130f2:	1b5e      	subs	r6, r3, r5
 80130f4:	68e0      	ldr	r0, [r4, #12]
 80130f6:	2e0f      	cmp	r6, #15
 80130f8:	dd0e      	ble.n	8013118 <_malloc_r+0x300>
 80130fa:	2701      	movs	r7, #1
 80130fc:	1962      	adds	r2, r4, r5
 80130fe:	433d      	orrs	r5, r7
 8013100:	6065      	str	r5, [r4, #4]
 8013102:	68a5      	ldr	r5, [r4, #8]
 8013104:	4337      	orrs	r7, r6
 8013106:	60e8      	str	r0, [r5, #12]
 8013108:	6085      	str	r5, [r0, #8]
 801310a:	614a      	str	r2, [r1, #20]
 801310c:	610a      	str	r2, [r1, #16]
 801310e:	4914      	ldr	r1, [pc, #80]	; (8013160 <_malloc_r+0x348>)
 8013110:	6057      	str	r7, [r2, #4]
 8013112:	60d1      	str	r1, [r2, #12]
 8013114:	6091      	str	r1, [r2, #8]
 8013116:	e6e8      	b.n	8012eea <_malloc_r+0xd2>
 8013118:	2e00      	cmp	r6, #0
 801311a:	db08      	blt.n	801312e <_malloc_r+0x316>
 801311c:	2201      	movs	r2, #1
 801311e:	18e3      	adds	r3, r4, r3
 8013120:	6859      	ldr	r1, [r3, #4]
 8013122:	430a      	orrs	r2, r1
 8013124:	605a      	str	r2, [r3, #4]
 8013126:	68a3      	ldr	r3, [r4, #8]
 8013128:	60d8      	str	r0, [r3, #12]
 801312a:	6083      	str	r3, [r0, #8]
 801312c:	e6aa      	b.n	8012e84 <_malloc_r+0x6c>
 801312e:	0004      	movs	r4, r0
 8013130:	e73c      	b.n	8012fac <_malloc_r+0x194>
 8013132:	2301      	movs	r3, #1
 8013134:	425b      	negs	r3, r3
 8013136:	449c      	add	ip, r3
 8013138:	9b03      	ldr	r3, [sp, #12]
 801313a:	6818      	ldr	r0, [r3, #0]
 801313c:	3b08      	subs	r3, #8
 801313e:	9003      	str	r0, [sp, #12]
 8013140:	4298      	cmp	r0, r3
 8013142:	d100      	bne.n	8013146 <_malloc_r+0x32e>
 8013144:	e73c      	b.n	8012fc0 <_malloc_r+0x1a8>
 8013146:	e743      	b.n	8012fd0 <_malloc_r+0x1b8>
 8013148:	2004      	movs	r0, #4
 801314a:	0052      	lsls	r2, r2, #1
 801314c:	4484      	add	ip, r0
 801314e:	421a      	tst	r2, r3
 8013150:	d0fa      	beq.n	8013148 <_malloc_r+0x330>
 8013152:	e723      	b.n	8012f9c <_malloc_r+0x184>
 8013154:	9802      	ldr	r0, [sp, #8]
 8013156:	4684      	mov	ip, r0
 8013158:	e7f9      	b.n	801314e <_malloc_r+0x336>
 801315a:	46c0      	nop			; (mov r8, r8)
 801315c:	20000644 	.word	0x20000644
 8013160:	2000064c 	.word	0x2000064c
 8013164:	00000554 	.word	0x00000554
 8013168:	000001ff 	.word	0x000001ff
 801316c:	20006944 	.word	0x20006944
 8013170:	20000a4c 	.word	0x20000a4c
 8013174:	20006914 	.word	0x20006914
 8013178:	2000693c 	.word	0x2000693c
 801317c:	20006940 	.word	0x20006940
 8013180:	492e      	ldr	r1, [pc, #184]	; (801323c <_malloc_r+0x424>)
 8013182:	680a      	ldr	r2, [r1, #0]
 8013184:	3201      	adds	r2, #1
 8013186:	d133      	bne.n	80131f0 <_malloc_r+0x3d8>
 8013188:	600c      	str	r4, [r1, #0]
 801318a:	2307      	movs	r3, #7
 801318c:	4023      	ands	r3, r4
 801318e:	d002      	beq.n	8013196 <_malloc_r+0x37e>
 8013190:	2208      	movs	r2, #8
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	18e4      	adds	r4, r4, r3
 8013196:	9a03      	ldr	r2, [sp, #12]
 8013198:	19a6      	adds	r6, r4, r6
 801319a:	18d3      	adds	r3, r2, r3
 801319c:	4006      	ands	r6, r0
 801319e:	1b9e      	subs	r6, r3, r6
 80131a0:	0031      	movs	r1, r6
 80131a2:	9801      	ldr	r0, [sp, #4]
 80131a4:	f000 fa62 	bl	801366c <_sbrk_r>
 80131a8:	1c43      	adds	r3, r0, #1
 80131aa:	d101      	bne.n	80131b0 <_malloc_r+0x398>
 80131ac:	0020      	movs	r0, r4
 80131ae:	2600      	movs	r6, #0
 80131b0:	4a23      	ldr	r2, [pc, #140]	; (8013240 <_malloc_r+0x428>)
 80131b2:	1b00      	subs	r0, r0, r4
 80131b4:	6813      	ldr	r3, [r2, #0]
 80131b6:	199b      	adds	r3, r3, r6
 80131b8:	6013      	str	r3, [r2, #0]
 80131ba:	2301      	movs	r3, #1
 80131bc:	4a21      	ldr	r2, [pc, #132]	; (8013244 <_malloc_r+0x42c>)
 80131be:	1986      	adds	r6, r0, r6
 80131c0:	431e      	orrs	r6, r3
 80131c2:	6094      	str	r4, [r2, #8]
 80131c4:	6066      	str	r6, [r4, #4]
 80131c6:	4297      	cmp	r7, r2
 80131c8:	d100      	bne.n	80131cc <_malloc_r+0x3b4>
 80131ca:	e748      	b.n	801305e <_malloc_r+0x246>
 80131cc:	9a02      	ldr	r2, [sp, #8]
 80131ce:	2a0f      	cmp	r2, #15
 80131d0:	d813      	bhi.n	80131fa <_malloc_r+0x3e2>
 80131d2:	6063      	str	r3, [r4, #4]
 80131d4:	2203      	movs	r2, #3
 80131d6:	4b1b      	ldr	r3, [pc, #108]	; (8013244 <_malloc_r+0x42c>)
 80131d8:	689b      	ldr	r3, [r3, #8]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	4393      	bics	r3, r2
 80131de:	1b5a      	subs	r2, r3, r5
 80131e0:	42ab      	cmp	r3, r5
 80131e2:	d301      	bcc.n	80131e8 <_malloc_r+0x3d0>
 80131e4:	2a0f      	cmp	r2, #15
 80131e6:	dc1d      	bgt.n	8013224 <_malloc_r+0x40c>
 80131e8:	9801      	ldr	r0, [sp, #4]
 80131ea:	f000 f867 	bl	80132bc <__malloc_unlock>
 80131ee:	e620      	b.n	8012e32 <_malloc_r+0x1a>
 80131f0:	1ae3      	subs	r3, r4, r3
 80131f2:	4a13      	ldr	r2, [pc, #76]	; (8013240 <_malloc_r+0x428>)
 80131f4:	4463      	add	r3, ip
 80131f6:	6013      	str	r3, [r2, #0]
 80131f8:	e7c7      	b.n	801318a <_malloc_r+0x372>
 80131fa:	2207      	movs	r2, #7
 80131fc:	9e02      	ldr	r6, [sp, #8]
 80131fe:	3e0c      	subs	r6, #12
 8013200:	4396      	bics	r6, r2
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	4013      	ands	r3, r2
 8013206:	2205      	movs	r2, #5
 8013208:	4333      	orrs	r3, r6
 801320a:	607b      	str	r3, [r7, #4]
 801320c:	19bb      	adds	r3, r7, r6
 801320e:	605a      	str	r2, [r3, #4]
 8013210:	609a      	str	r2, [r3, #8]
 8013212:	2e0f      	cmp	r6, #15
 8013214:	d800      	bhi.n	8013218 <_malloc_r+0x400>
 8013216:	e722      	b.n	801305e <_malloc_r+0x246>
 8013218:	0039      	movs	r1, r7
 801321a:	9801      	ldr	r0, [sp, #4]
 801321c:	3108      	adds	r1, #8
 801321e:	f003 fb07 	bl	8016830 <_free_r>
 8013222:	e71c      	b.n	801305e <_malloc_r+0x246>
 8013224:	2301      	movs	r3, #1
 8013226:	0018      	movs	r0, r3
 8013228:	4906      	ldr	r1, [pc, #24]	; (8013244 <_malloc_r+0x42c>)
 801322a:	4328      	orrs	r0, r5
 801322c:	688c      	ldr	r4, [r1, #8]
 801322e:	4313      	orrs	r3, r2
 8013230:	1965      	adds	r5, r4, r5
 8013232:	6060      	str	r0, [r4, #4]
 8013234:	608d      	str	r5, [r1, #8]
 8013236:	606b      	str	r3, [r5, #4]
 8013238:	e624      	b.n	8012e84 <_malloc_r+0x6c>
 801323a:	46c0      	nop			; (mov r8, r8)
 801323c:	20000a4c 	.word	0x20000a4c
 8013240:	20006914 	.word	0x20006914
 8013244:	20000644 	.word	0x20000644

08013248 <__ascii_mbtowc>:
 8013248:	b082      	sub	sp, #8
 801324a:	2900      	cmp	r1, #0
 801324c:	d100      	bne.n	8013250 <__ascii_mbtowc+0x8>
 801324e:	a901      	add	r1, sp, #4
 8013250:	1e10      	subs	r0, r2, #0
 8013252:	d006      	beq.n	8013262 <__ascii_mbtowc+0x1a>
 8013254:	2b00      	cmp	r3, #0
 8013256:	d006      	beq.n	8013266 <__ascii_mbtowc+0x1e>
 8013258:	7813      	ldrb	r3, [r2, #0]
 801325a:	600b      	str	r3, [r1, #0]
 801325c:	7810      	ldrb	r0, [r2, #0]
 801325e:	1e43      	subs	r3, r0, #1
 8013260:	4198      	sbcs	r0, r3
 8013262:	b002      	add	sp, #8
 8013264:	4770      	bx	lr
 8013266:	2002      	movs	r0, #2
 8013268:	4240      	negs	r0, r0
 801326a:	e7fa      	b.n	8013262 <__ascii_mbtowc+0x1a>

0801326c <memcmp>:
 801326c:	b530      	push	{r4, r5, lr}
 801326e:	2400      	movs	r4, #0
 8013270:	42a2      	cmp	r2, r4
 8013272:	d101      	bne.n	8013278 <memcmp+0xc>
 8013274:	2000      	movs	r0, #0
 8013276:	e005      	b.n	8013284 <memcmp+0x18>
 8013278:	5d03      	ldrb	r3, [r0, r4]
 801327a:	1c65      	adds	r5, r4, #1
 801327c:	5d0c      	ldrb	r4, [r1, r4]
 801327e:	42a3      	cmp	r3, r4
 8013280:	d001      	beq.n	8013286 <memcmp+0x1a>
 8013282:	1b18      	subs	r0, r3, r4
 8013284:	bd30      	pop	{r4, r5, pc}
 8013286:	002c      	movs	r4, r5
 8013288:	e7f2      	b.n	8013270 <memcmp+0x4>

0801328a <memcpy>:
 801328a:	2300      	movs	r3, #0
 801328c:	b510      	push	{r4, lr}
 801328e:	429a      	cmp	r2, r3
 8013290:	d100      	bne.n	8013294 <memcpy+0xa>
 8013292:	bd10      	pop	{r4, pc}
 8013294:	5ccc      	ldrb	r4, [r1, r3]
 8013296:	54c4      	strb	r4, [r0, r3]
 8013298:	3301      	adds	r3, #1
 801329a:	e7f8      	b.n	801328e <memcpy+0x4>

0801329c <memset>:
 801329c:	0003      	movs	r3, r0
 801329e:	1812      	adds	r2, r2, r0
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d100      	bne.n	80132a6 <memset+0xa>
 80132a4:	4770      	bx	lr
 80132a6:	7019      	strb	r1, [r3, #0]
 80132a8:	3301      	adds	r3, #1
 80132aa:	e7f9      	b.n	80132a0 <memset+0x4>

080132ac <__malloc_lock>:
 80132ac:	b510      	push	{r4, lr}
 80132ae:	4802      	ldr	r0, [pc, #8]	; (80132b8 <__malloc_lock+0xc>)
 80132b0:	f003 feb2 	bl	8017018 <__retarget_lock_acquire_recursive>
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	46c0      	nop			; (mov r8, r8)
 80132b8:	20006f34 	.word	0x20006f34

080132bc <__malloc_unlock>:
 80132bc:	b510      	push	{r4, lr}
 80132be:	4802      	ldr	r0, [pc, #8]	; (80132c8 <__malloc_unlock+0xc>)
 80132c0:	f003 feab 	bl	801701a <__retarget_lock_release_recursive>
 80132c4:	bd10      	pop	{r4, pc}
 80132c6:	46c0      	nop			; (mov r8, r8)
 80132c8:	20006f34 	.word	0x20006f34

080132cc <rand>:
 80132cc:	4b09      	ldr	r3, [pc, #36]	; (80132f4 <rand+0x28>)
 80132ce:	b510      	push	{r4, lr}
 80132d0:	681c      	ldr	r4, [r3, #0]
 80132d2:	4a09      	ldr	r2, [pc, #36]	; (80132f8 <rand+0x2c>)
 80132d4:	34a8      	adds	r4, #168	; 0xa8
 80132d6:	6820      	ldr	r0, [r4, #0]
 80132d8:	6861      	ldr	r1, [r4, #4]
 80132da:	4b08      	ldr	r3, [pc, #32]	; (80132fc <rand+0x30>)
 80132dc:	f7ed f946 	bl	800056c <__aeabi_lmul>
 80132e0:	2201      	movs	r2, #1
 80132e2:	2300      	movs	r3, #0
 80132e4:	1880      	adds	r0, r0, r2
 80132e6:	4159      	adcs	r1, r3
 80132e8:	6020      	str	r0, [r4, #0]
 80132ea:	6061      	str	r1, [r4, #4]
 80132ec:	0048      	lsls	r0, r1, #1
 80132ee:	0840      	lsrs	r0, r0, #1
 80132f0:	bd10      	pop	{r4, pc}
 80132f2:	46c0      	nop			; (mov r8, r8)
 80132f4:	200000a8 	.word	0x200000a8
 80132f8:	4c957f2d 	.word	0x4c957f2d
 80132fc:	5851f42d 	.word	0x5851f42d

08013300 <realloc>:
 8013300:	b510      	push	{r4, lr}
 8013302:	4b03      	ldr	r3, [pc, #12]	; (8013310 <realloc+0x10>)
 8013304:	000a      	movs	r2, r1
 8013306:	0001      	movs	r1, r0
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	f000 f803 	bl	8013314 <_realloc_r>
 801330e:	bd10      	pop	{r4, pc}
 8013310:	200000a8 	.word	0x200000a8

08013314 <_realloc_r>:
 8013314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013316:	b087      	sub	sp, #28
 8013318:	9003      	str	r0, [sp, #12]
 801331a:	1e0c      	subs	r4, r1, #0
 801331c:	9205      	str	r2, [sp, #20]
 801331e:	d106      	bne.n	801332e <_realloc_r+0x1a>
 8013320:	0011      	movs	r1, r2
 8013322:	f7ff fd79 	bl	8012e18 <_malloc_r>
 8013326:	0007      	movs	r7, r0
 8013328:	0038      	movs	r0, r7
 801332a:	b007      	add	sp, #28
 801332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801332e:	9803      	ldr	r0, [sp, #12]
 8013330:	f7ff ffbc 	bl	80132ac <__malloc_lock>
 8013334:	0023      	movs	r3, r4
 8013336:	3b08      	subs	r3, #8
 8013338:	685f      	ldr	r7, [r3, #4]
 801333a:	9302      	str	r3, [sp, #8]
 801333c:	003a      	movs	r2, r7
 801333e:	2303      	movs	r3, #3
 8013340:	9e05      	ldr	r6, [sp, #20]
 8013342:	439a      	bics	r2, r3
 8013344:	360b      	adds	r6, #11
 8013346:	9204      	str	r2, [sp, #16]
 8013348:	2e16      	cmp	r6, #22
 801334a:	d908      	bls.n	801335e <_realloc_r+0x4a>
 801334c:	3304      	adds	r3, #4
 801334e:	439e      	bics	r6, r3
 8013350:	9601      	str	r6, [sp, #4]
 8013352:	d506      	bpl.n	8013362 <_realloc_r+0x4e>
 8013354:	230c      	movs	r3, #12
 8013356:	9a03      	ldr	r2, [sp, #12]
 8013358:	2700      	movs	r7, #0
 801335a:	6013      	str	r3, [r2, #0]
 801335c:	e7e4      	b.n	8013328 <_realloc_r+0x14>
 801335e:	2310      	movs	r3, #16
 8013360:	9301      	str	r3, [sp, #4]
 8013362:	9b01      	ldr	r3, [sp, #4]
 8013364:	9a05      	ldr	r2, [sp, #20]
 8013366:	4293      	cmp	r3, r2
 8013368:	d3f4      	bcc.n	8013354 <_realloc_r+0x40>
 801336a:	9b01      	ldr	r3, [sp, #4]
 801336c:	9a04      	ldr	r2, [sp, #16]
 801336e:	4293      	cmp	r3, r2
 8013370:	dc00      	bgt.n	8013374 <_realloc_r+0x60>
 8013372:	e16f      	b.n	8013654 <_realloc_r+0x340>
 8013374:	9b02      	ldr	r3, [sp, #8]
 8013376:	48bc      	ldr	r0, [pc, #752]	; (8013668 <_realloc_r+0x354>)
 8013378:	189b      	adds	r3, r3, r2
 801337a:	6882      	ldr	r2, [r0, #8]
 801337c:	4694      	mov	ip, r2
 801337e:	685a      	ldr	r2, [r3, #4]
 8013380:	459c      	cmp	ip, r3
 8013382:	d006      	beq.n	8013392 <_realloc_r+0x7e>
 8013384:	2501      	movs	r5, #1
 8013386:	0011      	movs	r1, r2
 8013388:	43a9      	bics	r1, r5
 801338a:	1859      	adds	r1, r3, r1
 801338c:	6849      	ldr	r1, [r1, #4]
 801338e:	4229      	tst	r1, r5
 8013390:	d146      	bne.n	8013420 <_realloc_r+0x10c>
 8013392:	2103      	movs	r1, #3
 8013394:	438a      	bics	r2, r1
 8013396:	9904      	ldr	r1, [sp, #16]
 8013398:	188e      	adds	r6, r1, r2
 801339a:	9901      	ldr	r1, [sp, #4]
 801339c:	459c      	cmp	ip, r3
 801339e:	d117      	bne.n	80133d0 <_realloc_r+0xbc>
 80133a0:	3110      	adds	r1, #16
 80133a2:	42b1      	cmp	r1, r6
 80133a4:	dc3e      	bgt.n	8013424 <_realloc_r+0x110>
 80133a6:	9901      	ldr	r1, [sp, #4]
 80133a8:	9b02      	ldr	r3, [sp, #8]
 80133aa:	468c      	mov	ip, r1
 80133ac:	4463      	add	r3, ip
 80133ae:	6083      	str	r3, [r0, #8]
 80133b0:	001a      	movs	r2, r3
 80133b2:	1a73      	subs	r3, r6, r1
 80133b4:	2601      	movs	r6, #1
 80133b6:	4333      	orrs	r3, r6
 80133b8:	6053      	str	r3, [r2, #4]
 80133ba:	0023      	movs	r3, r4
 80133bc:	3b08      	subs	r3, #8
 80133be:	685a      	ldr	r2, [r3, #4]
 80133c0:	9803      	ldr	r0, [sp, #12]
 80133c2:	4016      	ands	r6, r2
 80133c4:	430e      	orrs	r6, r1
 80133c6:	605e      	str	r6, [r3, #4]
 80133c8:	f7ff ff78 	bl	80132bc <__malloc_unlock>
 80133cc:	0027      	movs	r7, r4
 80133ce:	e7ab      	b.n	8013328 <_realloc_r+0x14>
 80133d0:	42b1      	cmp	r1, r6
 80133d2:	dc27      	bgt.n	8013424 <_realloc_r+0x110>
 80133d4:	68da      	ldr	r2, [r3, #12]
 80133d6:	689b      	ldr	r3, [r3, #8]
 80133d8:	60da      	str	r2, [r3, #12]
 80133da:	6093      	str	r3, [r2, #8]
 80133dc:	9b01      	ldr	r3, [sp, #4]
 80133de:	9a02      	ldr	r2, [sp, #8]
 80133e0:	1af4      	subs	r4, r6, r3
 80133e2:	9b02      	ldr	r3, [sp, #8]
 80133e4:	1992      	adds	r2, r2, r6
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	9304      	str	r3, [sp, #16]
 80133ea:	2301      	movs	r3, #1
 80133ec:	9804      	ldr	r0, [sp, #16]
 80133ee:	4018      	ands	r0, r3
 80133f0:	2c0f      	cmp	r4, #15
 80133f2:	d800      	bhi.n	80133f6 <_realloc_r+0xe2>
 80133f4:	e130      	b.n	8013658 <_realloc_r+0x344>
 80133f6:	9d01      	ldr	r5, [sp, #4]
 80133f8:	9902      	ldr	r1, [sp, #8]
 80133fa:	4328      	orrs	r0, r5
 80133fc:	1949      	adds	r1, r1, r5
 80133fe:	9d02      	ldr	r5, [sp, #8]
 8013400:	431c      	orrs	r4, r3
 8013402:	6068      	str	r0, [r5, #4]
 8013404:	604c      	str	r4, [r1, #4]
 8013406:	6850      	ldr	r0, [r2, #4]
 8013408:	3108      	adds	r1, #8
 801340a:	4303      	orrs	r3, r0
 801340c:	6053      	str	r3, [r2, #4]
 801340e:	9803      	ldr	r0, [sp, #12]
 8013410:	f003 fa0e 	bl	8016830 <_free_r>
 8013414:	9803      	ldr	r0, [sp, #12]
 8013416:	f7ff ff51 	bl	80132bc <__malloc_unlock>
 801341a:	9f02      	ldr	r7, [sp, #8]
 801341c:	3708      	adds	r7, #8
 801341e:	e783      	b.n	8013328 <_realloc_r+0x14>
 8013420:	2200      	movs	r2, #0
 8013422:	0013      	movs	r3, r2
 8013424:	07f9      	lsls	r1, r7, #31
 8013426:	d500      	bpl.n	801342a <_realloc_r+0x116>
 8013428:	e0c6      	b.n	80135b8 <_realloc_r+0x2a4>
 801342a:	0021      	movs	r1, r4
 801342c:	3908      	subs	r1, #8
 801342e:	680d      	ldr	r5, [r1, #0]
 8013430:	9902      	ldr	r1, [sp, #8]
 8013432:	1b4d      	subs	r5, r1, r5
 8013434:	2103      	movs	r1, #3
 8013436:	686f      	ldr	r7, [r5, #4]
 8013438:	438f      	bics	r7, r1
 801343a:	9904      	ldr	r1, [sp, #16]
 801343c:	187f      	adds	r7, r7, r1
 801343e:	2b00      	cmp	r3, #0
 8013440:	d100      	bne.n	8013444 <_realloc_r+0x130>
 8013442:	e084      	b.n	801354e <_realloc_r+0x23a>
 8013444:	19d6      	adds	r6, r2, r7
 8013446:	459c      	cmp	ip, r3
 8013448:	d148      	bne.n	80134dc <_realloc_r+0x1c8>
 801344a:	9b01      	ldr	r3, [sp, #4]
 801344c:	3310      	adds	r3, #16
 801344e:	42b3      	cmp	r3, r6
 8013450:	dc7d      	bgt.n	801354e <_realloc_r+0x23a>
 8013452:	68aa      	ldr	r2, [r5, #8]
 8013454:	68eb      	ldr	r3, [r5, #12]
 8013456:	002f      	movs	r7, r5
 8013458:	60d3      	str	r3, [r2, #12]
 801345a:	609a      	str	r2, [r3, #8]
 801345c:	000a      	movs	r2, r1
 801345e:	3a04      	subs	r2, #4
 8013460:	3708      	adds	r7, #8
 8013462:	2a24      	cmp	r2, #36	; 0x24
 8013464:	d835      	bhi.n	80134d2 <_realloc_r+0x1be>
 8013466:	003b      	movs	r3, r7
 8013468:	2a13      	cmp	r2, #19
 801346a:	d908      	bls.n	801347e <_realloc_r+0x16a>
 801346c:	6823      	ldr	r3, [r4, #0]
 801346e:	60ab      	str	r3, [r5, #8]
 8013470:	6863      	ldr	r3, [r4, #4]
 8013472:	60eb      	str	r3, [r5, #12]
 8013474:	2a1b      	cmp	r2, #27
 8013476:	d81a      	bhi.n	80134ae <_realloc_r+0x19a>
 8013478:	002b      	movs	r3, r5
 801347a:	3408      	adds	r4, #8
 801347c:	3310      	adds	r3, #16
 801347e:	6822      	ldr	r2, [r4, #0]
 8013480:	601a      	str	r2, [r3, #0]
 8013482:	6862      	ldr	r2, [r4, #4]
 8013484:	605a      	str	r2, [r3, #4]
 8013486:	68a2      	ldr	r2, [r4, #8]
 8013488:	609a      	str	r2, [r3, #8]
 801348a:	9b01      	ldr	r3, [sp, #4]
 801348c:	18ea      	adds	r2, r5, r3
 801348e:	4b76      	ldr	r3, [pc, #472]	; (8013668 <_realloc_r+0x354>)
 8013490:	609a      	str	r2, [r3, #8]
 8013492:	9b01      	ldr	r3, [sp, #4]
 8013494:	1af3      	subs	r3, r6, r3
 8013496:	2601      	movs	r6, #1
 8013498:	4333      	orrs	r3, r6
 801349a:	6053      	str	r3, [r2, #4]
 801349c:	686b      	ldr	r3, [r5, #4]
 801349e:	401e      	ands	r6, r3
 80134a0:	9b01      	ldr	r3, [sp, #4]
 80134a2:	431e      	orrs	r6, r3
 80134a4:	606e      	str	r6, [r5, #4]
 80134a6:	9803      	ldr	r0, [sp, #12]
 80134a8:	f7ff ff08 	bl	80132bc <__malloc_unlock>
 80134ac:	e73c      	b.n	8013328 <_realloc_r+0x14>
 80134ae:	68a3      	ldr	r3, [r4, #8]
 80134b0:	612b      	str	r3, [r5, #16]
 80134b2:	68e3      	ldr	r3, [r4, #12]
 80134b4:	616b      	str	r3, [r5, #20]
 80134b6:	2a24      	cmp	r2, #36	; 0x24
 80134b8:	d003      	beq.n	80134c2 <_realloc_r+0x1ae>
 80134ba:	002b      	movs	r3, r5
 80134bc:	3410      	adds	r4, #16
 80134be:	3318      	adds	r3, #24
 80134c0:	e7dd      	b.n	801347e <_realloc_r+0x16a>
 80134c2:	6923      	ldr	r3, [r4, #16]
 80134c4:	61ab      	str	r3, [r5, #24]
 80134c6:	002b      	movs	r3, r5
 80134c8:	6962      	ldr	r2, [r4, #20]
 80134ca:	3320      	adds	r3, #32
 80134cc:	61ea      	str	r2, [r5, #28]
 80134ce:	3418      	adds	r4, #24
 80134d0:	e7d5      	b.n	801347e <_realloc_r+0x16a>
 80134d2:	0021      	movs	r1, r4
 80134d4:	0038      	movs	r0, r7
 80134d6:	f003 fdac 	bl	8017032 <memmove>
 80134da:	e7d6      	b.n	801348a <_realloc_r+0x176>
 80134dc:	9a01      	ldr	r2, [sp, #4]
 80134de:	42b2      	cmp	r2, r6
 80134e0:	dc35      	bgt.n	801354e <_realloc_r+0x23a>
 80134e2:	0028      	movs	r0, r5
 80134e4:	68da      	ldr	r2, [r3, #12]
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	3008      	adds	r0, #8
 80134ea:	60da      	str	r2, [r3, #12]
 80134ec:	6093      	str	r3, [r2, #8]
 80134ee:	68aa      	ldr	r2, [r5, #8]
 80134f0:	68eb      	ldr	r3, [r5, #12]
 80134f2:	60d3      	str	r3, [r2, #12]
 80134f4:	609a      	str	r2, [r3, #8]
 80134f6:	9a04      	ldr	r2, [sp, #16]
 80134f8:	3a04      	subs	r2, #4
 80134fa:	2a24      	cmp	r2, #36	; 0x24
 80134fc:	d823      	bhi.n	8013546 <_realloc_r+0x232>
 80134fe:	2a13      	cmp	r2, #19
 8013500:	d907      	bls.n	8013512 <_realloc_r+0x1fe>
 8013502:	6823      	ldr	r3, [r4, #0]
 8013504:	60ab      	str	r3, [r5, #8]
 8013506:	6863      	ldr	r3, [r4, #4]
 8013508:	60eb      	str	r3, [r5, #12]
 801350a:	2a1b      	cmp	r2, #27
 801350c:	d809      	bhi.n	8013522 <_realloc_r+0x20e>
 801350e:	3408      	adds	r4, #8
 8013510:	3008      	adds	r0, #8
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	6003      	str	r3, [r0, #0]
 8013516:	6863      	ldr	r3, [r4, #4]
 8013518:	6043      	str	r3, [r0, #4]
 801351a:	68a3      	ldr	r3, [r4, #8]
 801351c:	6083      	str	r3, [r0, #8]
 801351e:	9502      	str	r5, [sp, #8]
 8013520:	e75c      	b.n	80133dc <_realloc_r+0xc8>
 8013522:	68a3      	ldr	r3, [r4, #8]
 8013524:	612b      	str	r3, [r5, #16]
 8013526:	68e3      	ldr	r3, [r4, #12]
 8013528:	616b      	str	r3, [r5, #20]
 801352a:	2a24      	cmp	r2, #36	; 0x24
 801352c:	d003      	beq.n	8013536 <_realloc_r+0x222>
 801352e:	0028      	movs	r0, r5
 8013530:	3410      	adds	r4, #16
 8013532:	3018      	adds	r0, #24
 8013534:	e7ed      	b.n	8013512 <_realloc_r+0x1fe>
 8013536:	0028      	movs	r0, r5
 8013538:	6923      	ldr	r3, [r4, #16]
 801353a:	3020      	adds	r0, #32
 801353c:	61ab      	str	r3, [r5, #24]
 801353e:	6963      	ldr	r3, [r4, #20]
 8013540:	3418      	adds	r4, #24
 8013542:	61eb      	str	r3, [r5, #28]
 8013544:	e7e5      	b.n	8013512 <_realloc_r+0x1fe>
 8013546:	0021      	movs	r1, r4
 8013548:	f003 fd73 	bl	8017032 <memmove>
 801354c:	e7e7      	b.n	801351e <_realloc_r+0x20a>
 801354e:	9b01      	ldr	r3, [sp, #4]
 8013550:	42bb      	cmp	r3, r7
 8013552:	dc31      	bgt.n	80135b8 <_realloc_r+0x2a4>
 8013554:	0028      	movs	r0, r5
 8013556:	68aa      	ldr	r2, [r5, #8]
 8013558:	68eb      	ldr	r3, [r5, #12]
 801355a:	3008      	adds	r0, #8
 801355c:	60d3      	str	r3, [r2, #12]
 801355e:	609a      	str	r2, [r3, #8]
 8013560:	9a04      	ldr	r2, [sp, #16]
 8013562:	3a04      	subs	r2, #4
 8013564:	2a24      	cmp	r2, #36	; 0x24
 8013566:	d823      	bhi.n	80135b0 <_realloc_r+0x29c>
 8013568:	2a13      	cmp	r2, #19
 801356a:	d907      	bls.n	801357c <_realloc_r+0x268>
 801356c:	6823      	ldr	r3, [r4, #0]
 801356e:	60ab      	str	r3, [r5, #8]
 8013570:	6863      	ldr	r3, [r4, #4]
 8013572:	60eb      	str	r3, [r5, #12]
 8013574:	2a1b      	cmp	r2, #27
 8013576:	d809      	bhi.n	801358c <_realloc_r+0x278>
 8013578:	3408      	adds	r4, #8
 801357a:	3008      	adds	r0, #8
 801357c:	6823      	ldr	r3, [r4, #0]
 801357e:	6003      	str	r3, [r0, #0]
 8013580:	6863      	ldr	r3, [r4, #4]
 8013582:	6043      	str	r3, [r0, #4]
 8013584:	68a3      	ldr	r3, [r4, #8]
 8013586:	6083      	str	r3, [r0, #8]
 8013588:	003e      	movs	r6, r7
 801358a:	e7c8      	b.n	801351e <_realloc_r+0x20a>
 801358c:	68a3      	ldr	r3, [r4, #8]
 801358e:	612b      	str	r3, [r5, #16]
 8013590:	68e3      	ldr	r3, [r4, #12]
 8013592:	616b      	str	r3, [r5, #20]
 8013594:	2a24      	cmp	r2, #36	; 0x24
 8013596:	d003      	beq.n	80135a0 <_realloc_r+0x28c>
 8013598:	0028      	movs	r0, r5
 801359a:	3410      	adds	r4, #16
 801359c:	3018      	adds	r0, #24
 801359e:	e7ed      	b.n	801357c <_realloc_r+0x268>
 80135a0:	0028      	movs	r0, r5
 80135a2:	6923      	ldr	r3, [r4, #16]
 80135a4:	3020      	adds	r0, #32
 80135a6:	61ab      	str	r3, [r5, #24]
 80135a8:	6963      	ldr	r3, [r4, #20]
 80135aa:	3418      	adds	r4, #24
 80135ac:	61eb      	str	r3, [r5, #28]
 80135ae:	e7e5      	b.n	801357c <_realloc_r+0x268>
 80135b0:	0021      	movs	r1, r4
 80135b2:	f003 fd3e 	bl	8017032 <memmove>
 80135b6:	e7e7      	b.n	8013588 <_realloc_r+0x274>
 80135b8:	9905      	ldr	r1, [sp, #20]
 80135ba:	9803      	ldr	r0, [sp, #12]
 80135bc:	f7ff fc2c 	bl	8012e18 <_malloc_r>
 80135c0:	1e07      	subs	r7, r0, #0
 80135c2:	d100      	bne.n	80135c6 <_realloc_r+0x2b2>
 80135c4:	e76f      	b.n	80134a6 <_realloc_r+0x192>
 80135c6:	0023      	movs	r3, r4
 80135c8:	2201      	movs	r2, #1
 80135ca:	3b08      	subs	r3, #8
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	4393      	bics	r3, r2
 80135d0:	9a02      	ldr	r2, [sp, #8]
 80135d2:	18d3      	adds	r3, r2, r3
 80135d4:	0002      	movs	r2, r0
 80135d6:	3a08      	subs	r2, #8
 80135d8:	4293      	cmp	r3, r2
 80135da:	d105      	bne.n	80135e8 <_realloc_r+0x2d4>
 80135dc:	685e      	ldr	r6, [r3, #4]
 80135de:	2303      	movs	r3, #3
 80135e0:	439e      	bics	r6, r3
 80135e2:	9b04      	ldr	r3, [sp, #16]
 80135e4:	18f6      	adds	r6, r6, r3
 80135e6:	e6f9      	b.n	80133dc <_realloc_r+0xc8>
 80135e8:	9a04      	ldr	r2, [sp, #16]
 80135ea:	3a04      	subs	r2, #4
 80135ec:	2a24      	cmp	r2, #36	; 0x24
 80135ee:	d82d      	bhi.n	801364c <_realloc_r+0x338>
 80135f0:	2a13      	cmp	r2, #19
 80135f2:	d928      	bls.n	8013646 <_realloc_r+0x332>
 80135f4:	6823      	ldr	r3, [r4, #0]
 80135f6:	6003      	str	r3, [r0, #0]
 80135f8:	6863      	ldr	r3, [r4, #4]
 80135fa:	6043      	str	r3, [r0, #4]
 80135fc:	2a1b      	cmp	r2, #27
 80135fe:	d80e      	bhi.n	801361e <_realloc_r+0x30a>
 8013600:	0022      	movs	r2, r4
 8013602:	0003      	movs	r3, r0
 8013604:	3208      	adds	r2, #8
 8013606:	3308      	adds	r3, #8
 8013608:	6811      	ldr	r1, [r2, #0]
 801360a:	6019      	str	r1, [r3, #0]
 801360c:	6851      	ldr	r1, [r2, #4]
 801360e:	6059      	str	r1, [r3, #4]
 8013610:	6892      	ldr	r2, [r2, #8]
 8013612:	609a      	str	r2, [r3, #8]
 8013614:	0021      	movs	r1, r4
 8013616:	9803      	ldr	r0, [sp, #12]
 8013618:	f003 f90a 	bl	8016830 <_free_r>
 801361c:	e743      	b.n	80134a6 <_realloc_r+0x192>
 801361e:	68a3      	ldr	r3, [r4, #8]
 8013620:	6083      	str	r3, [r0, #8]
 8013622:	68e3      	ldr	r3, [r4, #12]
 8013624:	60c3      	str	r3, [r0, #12]
 8013626:	2a24      	cmp	r2, #36	; 0x24
 8013628:	d004      	beq.n	8013634 <_realloc_r+0x320>
 801362a:	0022      	movs	r2, r4
 801362c:	0003      	movs	r3, r0
 801362e:	3210      	adds	r2, #16
 8013630:	3310      	adds	r3, #16
 8013632:	e7e9      	b.n	8013608 <_realloc_r+0x2f4>
 8013634:	6923      	ldr	r3, [r4, #16]
 8013636:	0022      	movs	r2, r4
 8013638:	6103      	str	r3, [r0, #16]
 801363a:	0003      	movs	r3, r0
 801363c:	6961      	ldr	r1, [r4, #20]
 801363e:	3218      	adds	r2, #24
 8013640:	3318      	adds	r3, #24
 8013642:	6141      	str	r1, [r0, #20]
 8013644:	e7e0      	b.n	8013608 <_realloc_r+0x2f4>
 8013646:	0003      	movs	r3, r0
 8013648:	0022      	movs	r2, r4
 801364a:	e7dd      	b.n	8013608 <_realloc_r+0x2f4>
 801364c:	0021      	movs	r1, r4
 801364e:	f003 fcf0 	bl	8017032 <memmove>
 8013652:	e7df      	b.n	8013614 <_realloc_r+0x300>
 8013654:	9e04      	ldr	r6, [sp, #16]
 8013656:	e6c1      	b.n	80133dc <_realloc_r+0xc8>
 8013658:	9902      	ldr	r1, [sp, #8]
 801365a:	4306      	orrs	r6, r0
 801365c:	604e      	str	r6, [r1, #4]
 801365e:	6851      	ldr	r1, [r2, #4]
 8013660:	430b      	orrs	r3, r1
 8013662:	6053      	str	r3, [r2, #4]
 8013664:	e6d6      	b.n	8013414 <_realloc_r+0x100>
 8013666:	46c0      	nop			; (mov r8, r8)
 8013668:	20000644 	.word	0x20000644

0801366c <_sbrk_r>:
 801366c:	2300      	movs	r3, #0
 801366e:	b570      	push	{r4, r5, r6, lr}
 8013670:	4c06      	ldr	r4, [pc, #24]	; (801368c <_sbrk_r+0x20>)
 8013672:	0005      	movs	r5, r0
 8013674:	0008      	movs	r0, r1
 8013676:	6023      	str	r3, [r4, #0]
 8013678:	f004 f9ec 	bl	8017a54 <_sbrk>
 801367c:	1c43      	adds	r3, r0, #1
 801367e:	d103      	bne.n	8013688 <_sbrk_r+0x1c>
 8013680:	6823      	ldr	r3, [r4, #0]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d000      	beq.n	8013688 <_sbrk_r+0x1c>
 8013686:	602b      	str	r3, [r5, #0]
 8013688:	bd70      	pop	{r4, r5, r6, pc}
 801368a:	46c0      	nop			; (mov r8, r8)
 801368c:	20006f3c 	.word	0x20006f3c

08013690 <sprintf>:
 8013690:	b40e      	push	{r1, r2, r3}
 8013692:	b500      	push	{lr}
 8013694:	490b      	ldr	r1, [pc, #44]	; (80136c4 <sprintf+0x34>)
 8013696:	b09c      	sub	sp, #112	; 0x70
 8013698:	ab1d      	add	r3, sp, #116	; 0x74
 801369a:	9002      	str	r0, [sp, #8]
 801369c:	9006      	str	r0, [sp, #24]
 801369e:	9107      	str	r1, [sp, #28]
 80136a0:	9104      	str	r1, [sp, #16]
 80136a2:	4809      	ldr	r0, [pc, #36]	; (80136c8 <sprintf+0x38>)
 80136a4:	4909      	ldr	r1, [pc, #36]	; (80136cc <sprintf+0x3c>)
 80136a6:	cb04      	ldmia	r3!, {r2}
 80136a8:	9105      	str	r1, [sp, #20]
 80136aa:	6800      	ldr	r0, [r0, #0]
 80136ac:	a902      	add	r1, sp, #8
 80136ae:	9301      	str	r3, [sp, #4]
 80136b0:	f000 ff78 	bl	80145a4 <_svfprintf_r>
 80136b4:	2300      	movs	r3, #0
 80136b6:	9a02      	ldr	r2, [sp, #8]
 80136b8:	7013      	strb	r3, [r2, #0]
 80136ba:	b01c      	add	sp, #112	; 0x70
 80136bc:	bc08      	pop	{r3}
 80136be:	b003      	add	sp, #12
 80136c0:	4718      	bx	r3
 80136c2:	46c0      	nop			; (mov r8, r8)
 80136c4:	7fffffff 	.word	0x7fffffff
 80136c8:	200000a8 	.word	0x200000a8
 80136cc:	ffff0208 	.word	0xffff0208

080136d0 <strcat>:
 80136d0:	0002      	movs	r2, r0
 80136d2:	b510      	push	{r4, lr}
 80136d4:	7813      	ldrb	r3, [r2, #0]
 80136d6:	1c54      	adds	r4, r2, #1
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d105      	bne.n	80136e8 <strcat+0x18>
 80136dc:	5ccc      	ldrb	r4, [r1, r3]
 80136de:	54d4      	strb	r4, [r2, r3]
 80136e0:	3301      	adds	r3, #1
 80136e2:	2c00      	cmp	r4, #0
 80136e4:	d1fa      	bne.n	80136dc <strcat+0xc>
 80136e6:	bd10      	pop	{r4, pc}
 80136e8:	0022      	movs	r2, r4
 80136ea:	e7f3      	b.n	80136d4 <strcat+0x4>

080136ec <strchr>:
 80136ec:	b2c9      	uxtb	r1, r1
 80136ee:	7803      	ldrb	r3, [r0, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d004      	beq.n	80136fe <strchr+0x12>
 80136f4:	428b      	cmp	r3, r1
 80136f6:	d100      	bne.n	80136fa <strchr+0xe>
 80136f8:	4770      	bx	lr
 80136fa:	3001      	adds	r0, #1
 80136fc:	e7f7      	b.n	80136ee <strchr+0x2>
 80136fe:	424b      	negs	r3, r1
 8013700:	4159      	adcs	r1, r3
 8013702:	4249      	negs	r1, r1
 8013704:	4008      	ands	r0, r1
 8013706:	e7f7      	b.n	80136f8 <strchr+0xc>

08013708 <strcpy>:
 8013708:	0003      	movs	r3, r0
 801370a:	780a      	ldrb	r2, [r1, #0]
 801370c:	3101      	adds	r1, #1
 801370e:	701a      	strb	r2, [r3, #0]
 8013710:	3301      	adds	r3, #1
 8013712:	2a00      	cmp	r2, #0
 8013714:	d1f9      	bne.n	801370a <strcpy+0x2>
 8013716:	4770      	bx	lr

08013718 <strncmp>:
 8013718:	2300      	movs	r3, #0
 801371a:	b530      	push	{r4, r5, lr}
 801371c:	429a      	cmp	r2, r3
 801371e:	d00a      	beq.n	8013736 <strncmp+0x1e>
 8013720:	3a01      	subs	r2, #1
 8013722:	5cc4      	ldrb	r4, [r0, r3]
 8013724:	5ccd      	ldrb	r5, [r1, r3]
 8013726:	42ac      	cmp	r4, r5
 8013728:	d104      	bne.n	8013734 <strncmp+0x1c>
 801372a:	4293      	cmp	r3, r2
 801372c:	d002      	beq.n	8013734 <strncmp+0x1c>
 801372e:	3301      	adds	r3, #1
 8013730:	2c00      	cmp	r4, #0
 8013732:	d1f6      	bne.n	8013722 <strncmp+0xa>
 8013734:	1b63      	subs	r3, r4, r5
 8013736:	0018      	movs	r0, r3
 8013738:	bd30      	pop	{r4, r5, pc}

0801373a <strncpy>:
 801373a:	b530      	push	{r4, r5, lr}
 801373c:	0005      	movs	r5, r0
 801373e:	2a00      	cmp	r2, #0
 8013740:	d100      	bne.n	8013744 <strncpy+0xa>
 8013742:	bd30      	pop	{r4, r5, pc}
 8013744:	780c      	ldrb	r4, [r1, #0]
 8013746:	3a01      	subs	r2, #1
 8013748:	1c6b      	adds	r3, r5, #1
 801374a:	702c      	strb	r4, [r5, #0]
 801374c:	3101      	adds	r1, #1
 801374e:	2c00      	cmp	r4, #0
 8013750:	d105      	bne.n	801375e <strncpy+0x24>
 8013752:	189a      	adds	r2, r3, r2
 8013754:	429a      	cmp	r2, r3
 8013756:	d0f4      	beq.n	8013742 <strncpy+0x8>
 8013758:	701c      	strb	r4, [r3, #0]
 801375a:	3301      	adds	r3, #1
 801375c:	e7fa      	b.n	8013754 <strncpy+0x1a>
 801375e:	001d      	movs	r5, r3
 8013760:	e7ed      	b.n	801373e <strncpy+0x4>
	...

08013764 <sulp>:
 8013764:	b570      	push	{r4, r5, r6, lr}
 8013766:	0016      	movs	r6, r2
 8013768:	000d      	movs	r5, r1
 801376a:	f003 ff17 	bl	801759c <__ulp>
 801376e:	2e00      	cmp	r6, #0
 8013770:	d00d      	beq.n	801378e <sulp+0x2a>
 8013772:	236b      	movs	r3, #107	; 0x6b
 8013774:	006a      	lsls	r2, r5, #1
 8013776:	0d52      	lsrs	r2, r2, #21
 8013778:	1a9b      	subs	r3, r3, r2
 801377a:	2b00      	cmp	r3, #0
 801377c:	dd07      	ble.n	801378e <sulp+0x2a>
 801377e:	2400      	movs	r4, #0
 8013780:	4a03      	ldr	r2, [pc, #12]	; (8013790 <sulp+0x2c>)
 8013782:	051b      	lsls	r3, r3, #20
 8013784:	189d      	adds	r5, r3, r2
 8013786:	002b      	movs	r3, r5
 8013788:	0022      	movs	r2, r4
 801378a:	f7ee fb53 	bl	8001e34 <__aeabi_dmul>
 801378e:	bd70      	pop	{r4, r5, r6, pc}
 8013790:	3ff00000 	.word	0x3ff00000

08013794 <_strtod_l>:
 8013794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013796:	b0a7      	sub	sp, #156	; 0x9c
 8013798:	9307      	str	r3, [sp, #28]
 801379a:	2300      	movs	r3, #0
 801379c:	9004      	str	r0, [sp, #16]
 801379e:	9807      	ldr	r0, [sp, #28]
 80137a0:	9322      	str	r3, [sp, #136]	; 0x88
 80137a2:	9106      	str	r1, [sp, #24]
 80137a4:	921d      	str	r2, [sp, #116]	; 0x74
 80137a6:	f003 fc28 	bl	8016ffa <__localeconv_l>
 80137aa:	0005      	movs	r5, r0
 80137ac:	6800      	ldr	r0, [r0, #0]
 80137ae:	f7ec fcb3 	bl	8000118 <strlen>
 80137b2:	2600      	movs	r6, #0
 80137b4:	2700      	movs	r7, #0
 80137b6:	9b06      	ldr	r3, [sp, #24]
 80137b8:	9005      	str	r0, [sp, #20]
 80137ba:	9321      	str	r3, [sp, #132]	; 0x84
 80137bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137be:	781a      	ldrb	r2, [r3, #0]
 80137c0:	2a0d      	cmp	r2, #13
 80137c2:	d839      	bhi.n	8013838 <_strtod_l+0xa4>
 80137c4:	2a09      	cmp	r2, #9
 80137c6:	d23d      	bcs.n	8013844 <_strtod_l+0xb0>
 80137c8:	2a00      	cmp	r2, #0
 80137ca:	d044      	beq.n	8013856 <_strtod_l+0xc2>
 80137cc:	2300      	movs	r3, #0
 80137ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80137d0:	2200      	movs	r2, #0
 80137d2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80137d4:	920c      	str	r2, [sp, #48]	; 0x30
 80137d6:	7823      	ldrb	r3, [r4, #0]
 80137d8:	2b30      	cmp	r3, #48	; 0x30
 80137da:	d000      	beq.n	80137de <_strtod_l+0x4a>
 80137dc:	e07e      	b.n	80138dc <_strtod_l+0x148>
 80137de:	7863      	ldrb	r3, [r4, #1]
 80137e0:	2b58      	cmp	r3, #88	; 0x58
 80137e2:	d002      	beq.n	80137ea <_strtod_l+0x56>
 80137e4:	2b78      	cmp	r3, #120	; 0x78
 80137e6:	d000      	beq.n	80137ea <_strtod_l+0x56>
 80137e8:	e06e      	b.n	80138c8 <_strtod_l+0x134>
 80137ea:	9b07      	ldr	r3, [sp, #28]
 80137ec:	4a96      	ldr	r2, [pc, #600]	; (8013a48 <_strtod_l+0x2b4>)
 80137ee:	9302      	str	r3, [sp, #8]
 80137f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137f2:	a921      	add	r1, sp, #132	; 0x84
 80137f4:	9301      	str	r3, [sp, #4]
 80137f6:	ab22      	add	r3, sp, #136	; 0x88
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	9804      	ldr	r0, [sp, #16]
 80137fc:	ab23      	add	r3, sp, #140	; 0x8c
 80137fe:	f003 f914 	bl	8016a2a <__gethex>
 8013802:	2507      	movs	r5, #7
 8013804:	9005      	str	r0, [sp, #20]
 8013806:	4005      	ands	r5, r0
 8013808:	d005      	beq.n	8013816 <_strtod_l+0x82>
 801380a:	2d06      	cmp	r5, #6
 801380c:	d12f      	bne.n	801386e <_strtod_l+0xda>
 801380e:	2300      	movs	r3, #0
 8013810:	3401      	adds	r4, #1
 8013812:	9421      	str	r4, [sp, #132]	; 0x84
 8013814:	9313      	str	r3, [sp, #76]	; 0x4c
 8013816:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013818:	2b00      	cmp	r3, #0
 801381a:	d002      	beq.n	8013822 <_strtod_l+0x8e>
 801381c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801381e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013820:	601a      	str	r2, [r3, #0]
 8013822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013824:	2b00      	cmp	r3, #0
 8013826:	d01d      	beq.n	8013864 <_strtod_l+0xd0>
 8013828:	2380      	movs	r3, #128	; 0x80
 801382a:	0032      	movs	r2, r6
 801382c:	061b      	lsls	r3, r3, #24
 801382e:	18fb      	adds	r3, r7, r3
 8013830:	0010      	movs	r0, r2
 8013832:	0019      	movs	r1, r3
 8013834:	b027      	add	sp, #156	; 0x9c
 8013836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013838:	2a2b      	cmp	r2, #43	; 0x2b
 801383a:	d016      	beq.n	801386a <_strtod_l+0xd6>
 801383c:	2a2d      	cmp	r2, #45	; 0x2d
 801383e:	d003      	beq.n	8013848 <_strtod_l+0xb4>
 8013840:	2a20      	cmp	r2, #32
 8013842:	d1c3      	bne.n	80137cc <_strtod_l+0x38>
 8013844:	3301      	adds	r3, #1
 8013846:	e7b8      	b.n	80137ba <_strtod_l+0x26>
 8013848:	2201      	movs	r2, #1
 801384a:	9213      	str	r2, [sp, #76]	; 0x4c
 801384c:	1c5a      	adds	r2, r3, #1
 801384e:	9221      	str	r2, [sp, #132]	; 0x84
 8013850:	785b      	ldrb	r3, [r3, #1]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d1bc      	bne.n	80137d0 <_strtod_l+0x3c>
 8013856:	9b06      	ldr	r3, [sp, #24]
 8013858:	9321      	str	r3, [sp, #132]	; 0x84
 801385a:	2300      	movs	r3, #0
 801385c:	9313      	str	r3, [sp, #76]	; 0x4c
 801385e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013860:	2b00      	cmp	r3, #0
 8013862:	d1db      	bne.n	801381c <_strtod_l+0x88>
 8013864:	0032      	movs	r2, r6
 8013866:	003b      	movs	r3, r7
 8013868:	e7e2      	b.n	8013830 <_strtod_l+0x9c>
 801386a:	2200      	movs	r2, #0
 801386c:	e7ed      	b.n	801384a <_strtod_l+0xb6>
 801386e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013870:	2a00      	cmp	r2, #0
 8013872:	d007      	beq.n	8013884 <_strtod_l+0xf0>
 8013874:	2135      	movs	r1, #53	; 0x35
 8013876:	a824      	add	r0, sp, #144	; 0x90
 8013878:	f003 ff7d 	bl	8017776 <__copybits>
 801387c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801387e:	9804      	ldr	r0, [sp, #16]
 8013880:	f003 fc12 	bl	80170a8 <_Bfree>
 8013884:	1e68      	subs	r0, r5, #1
 8013886:	2804      	cmp	r0, #4
 8013888:	d806      	bhi.n	8013898 <_strtod_l+0x104>
 801388a:	f7ec fc4d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801388e:	030c      	.short	0x030c
 8013890:	1917      	.short	0x1917
 8013892:	0c          	.byte	0x0c
 8013893:	00          	.byte	0x00
 8013894:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013896:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013898:	9b05      	ldr	r3, [sp, #20]
 801389a:	071b      	lsls	r3, r3, #28
 801389c:	d5bb      	bpl.n	8013816 <_strtod_l+0x82>
 801389e:	2380      	movs	r3, #128	; 0x80
 80138a0:	061b      	lsls	r3, r3, #24
 80138a2:	431f      	orrs	r7, r3
 80138a4:	e7b7      	b.n	8013816 <_strtod_l+0x82>
 80138a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80138a8:	4a68      	ldr	r2, [pc, #416]	; (8013a4c <_strtod_l+0x2b8>)
 80138aa:	4969      	ldr	r1, [pc, #420]	; (8013a50 <_strtod_l+0x2bc>)
 80138ac:	401a      	ands	r2, r3
 80138ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80138b0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80138b2:	185b      	adds	r3, r3, r1
 80138b4:	051b      	lsls	r3, r3, #20
 80138b6:	431a      	orrs	r2, r3
 80138b8:	0017      	movs	r7, r2
 80138ba:	e7ed      	b.n	8013898 <_strtod_l+0x104>
 80138bc:	4f65      	ldr	r7, [pc, #404]	; (8013a54 <_strtod_l+0x2c0>)
 80138be:	e7eb      	b.n	8013898 <_strtod_l+0x104>
 80138c0:	2601      	movs	r6, #1
 80138c2:	4f65      	ldr	r7, [pc, #404]	; (8013a58 <_strtod_l+0x2c4>)
 80138c4:	4276      	negs	r6, r6
 80138c6:	e7e7      	b.n	8013898 <_strtod_l+0x104>
 80138c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138ca:	1c5a      	adds	r2, r3, #1
 80138cc:	9221      	str	r2, [sp, #132]	; 0x84
 80138ce:	785b      	ldrb	r3, [r3, #1]
 80138d0:	2b30      	cmp	r3, #48	; 0x30
 80138d2:	d0f9      	beq.n	80138c8 <_strtod_l+0x134>
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d09e      	beq.n	8013816 <_strtod_l+0x82>
 80138d8:	2301      	movs	r3, #1
 80138da:	930c      	str	r3, [sp, #48]	; 0x30
 80138dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138de:	220a      	movs	r2, #10
 80138e0:	9312      	str	r3, [sp, #72]	; 0x48
 80138e2:	2300      	movs	r3, #0
 80138e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80138e6:	9308      	str	r3, [sp, #32]
 80138e8:	930a      	str	r3, [sp, #40]	; 0x28
 80138ea:	9821      	ldr	r0, [sp, #132]	; 0x84
 80138ec:	7804      	ldrb	r4, [r0, #0]
 80138ee:	0023      	movs	r3, r4
 80138f0:	3b30      	subs	r3, #48	; 0x30
 80138f2:	b2d9      	uxtb	r1, r3
 80138f4:	2909      	cmp	r1, #9
 80138f6:	d934      	bls.n	8013962 <_strtod_l+0x1ce>
 80138f8:	9a05      	ldr	r2, [sp, #20]
 80138fa:	6829      	ldr	r1, [r5, #0]
 80138fc:	f7ff ff0c 	bl	8013718 <strncmp>
 8013900:	2800      	cmp	r0, #0
 8013902:	d040      	beq.n	8013986 <_strtod_l+0x1f2>
 8013904:	2000      	movs	r0, #0
 8013906:	0023      	movs	r3, r4
 8013908:	4684      	mov	ip, r0
 801390a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801390c:	9007      	str	r0, [sp, #28]
 801390e:	9205      	str	r2, [sp, #20]
 8013910:	2220      	movs	r2, #32
 8013912:	0019      	movs	r1, r3
 8013914:	4391      	bics	r1, r2
 8013916:	000a      	movs	r2, r1
 8013918:	2100      	movs	r1, #0
 801391a:	2a45      	cmp	r2, #69	; 0x45
 801391c:	d000      	beq.n	8013920 <_strtod_l+0x18c>
 801391e:	e0bf      	b.n	8013aa0 <_strtod_l+0x30c>
 8013920:	9b05      	ldr	r3, [sp, #20]
 8013922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013924:	4303      	orrs	r3, r0
 8013926:	4313      	orrs	r3, r2
 8013928:	428b      	cmp	r3, r1
 801392a:	d094      	beq.n	8013856 <_strtod_l+0xc2>
 801392c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801392e:	9306      	str	r3, [sp, #24]
 8013930:	3301      	adds	r3, #1
 8013932:	9321      	str	r3, [sp, #132]	; 0x84
 8013934:	9b06      	ldr	r3, [sp, #24]
 8013936:	785b      	ldrb	r3, [r3, #1]
 8013938:	2b2b      	cmp	r3, #43	; 0x2b
 801393a:	d100      	bne.n	801393e <_strtod_l+0x1aa>
 801393c:	e082      	b.n	8013a44 <_strtod_l+0x2b0>
 801393e:	000c      	movs	r4, r1
 8013940:	2b2d      	cmp	r3, #45	; 0x2d
 8013942:	d105      	bne.n	8013950 <_strtod_l+0x1bc>
 8013944:	2401      	movs	r4, #1
 8013946:	9b06      	ldr	r3, [sp, #24]
 8013948:	3302      	adds	r3, #2
 801394a:	9321      	str	r3, [sp, #132]	; 0x84
 801394c:	9b06      	ldr	r3, [sp, #24]
 801394e:	789b      	ldrb	r3, [r3, #2]
 8013950:	001a      	movs	r2, r3
 8013952:	3a30      	subs	r2, #48	; 0x30
 8013954:	2a09      	cmp	r2, #9
 8013956:	d800      	bhi.n	801395a <_strtod_l+0x1c6>
 8013958:	e084      	b.n	8013a64 <_strtod_l+0x2d0>
 801395a:	9a06      	ldr	r2, [sp, #24]
 801395c:	2100      	movs	r1, #0
 801395e:	9221      	str	r2, [sp, #132]	; 0x84
 8013960:	e09e      	b.n	8013aa0 <_strtod_l+0x30c>
 8013962:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013964:	2908      	cmp	r1, #8
 8013966:	dc09      	bgt.n	801397c <_strtod_l+0x1e8>
 8013968:	9908      	ldr	r1, [sp, #32]
 801396a:	4351      	muls	r1, r2
 801396c:	18cb      	adds	r3, r1, r3
 801396e:	9308      	str	r3, [sp, #32]
 8013970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013972:	3001      	adds	r0, #1
 8013974:	3301      	adds	r3, #1
 8013976:	930a      	str	r3, [sp, #40]	; 0x28
 8013978:	9021      	str	r0, [sp, #132]	; 0x84
 801397a:	e7b6      	b.n	80138ea <_strtod_l+0x156>
 801397c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801397e:	4351      	muls	r1, r2
 8013980:	18cb      	adds	r3, r1, r3
 8013982:	930b      	str	r3, [sp, #44]	; 0x2c
 8013984:	e7f4      	b.n	8013970 <_strtod_l+0x1dc>
 8013986:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013988:	9b05      	ldr	r3, [sp, #20]
 801398a:	4694      	mov	ip, r2
 801398c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801398e:	4463      	add	r3, ip
 8013990:	9321      	str	r3, [sp, #132]	; 0x84
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2a00      	cmp	r2, #0
 8013996:	d036      	beq.n	8013a06 <_strtod_l+0x272>
 8013998:	4684      	mov	ip, r0
 801399a:	9205      	str	r2, [sp, #20]
 801399c:	001a      	movs	r2, r3
 801399e:	3a30      	subs	r2, #48	; 0x30
 80139a0:	2a09      	cmp	r2, #9
 80139a2:	d912      	bls.n	80139ca <_strtod_l+0x236>
 80139a4:	2201      	movs	r2, #1
 80139a6:	9207      	str	r2, [sp, #28]
 80139a8:	e7b2      	b.n	8013910 <_strtod_l+0x17c>
 80139aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139ac:	3001      	adds	r0, #1
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	9221      	str	r2, [sp, #132]	; 0x84
 80139b2:	785b      	ldrb	r3, [r3, #1]
 80139b4:	2b30      	cmp	r3, #48	; 0x30
 80139b6:	d0f8      	beq.n	80139aa <_strtod_l+0x216>
 80139b8:	001a      	movs	r2, r3
 80139ba:	3a31      	subs	r2, #49	; 0x31
 80139bc:	2a08      	cmp	r2, #8
 80139be:	d83c      	bhi.n	8013a3a <_strtod_l+0x2a6>
 80139c0:	4684      	mov	ip, r0
 80139c2:	2000      	movs	r0, #0
 80139c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80139c6:	9005      	str	r0, [sp, #20]
 80139c8:	9212      	str	r2, [sp, #72]	; 0x48
 80139ca:	3b30      	subs	r3, #48	; 0x30
 80139cc:	1c42      	adds	r2, r0, #1
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d013      	beq.n	80139fa <_strtod_l+0x266>
 80139d2:	210a      	movs	r1, #10
 80139d4:	4494      	add	ip, r2
 80139d6:	9a05      	ldr	r2, [sp, #20]
 80139d8:	1885      	adds	r5, r0, r2
 80139da:	42aa      	cmp	r2, r5
 80139dc:	d115      	bne.n	8013a0a <_strtod_l+0x276>
 80139de:	9905      	ldr	r1, [sp, #20]
 80139e0:	9a05      	ldr	r2, [sp, #20]
 80139e2:	3101      	adds	r1, #1
 80139e4:	1809      	adds	r1, r1, r0
 80139e6:	1812      	adds	r2, r2, r0
 80139e8:	9105      	str	r1, [sp, #20]
 80139ea:	2a08      	cmp	r2, #8
 80139ec:	dc1b      	bgt.n	8013a26 <_strtod_l+0x292>
 80139ee:	220a      	movs	r2, #10
 80139f0:	9908      	ldr	r1, [sp, #32]
 80139f2:	434a      	muls	r2, r1
 80139f4:	189b      	adds	r3, r3, r2
 80139f6:	2200      	movs	r2, #0
 80139f8:	9308      	str	r3, [sp, #32]
 80139fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139fc:	0010      	movs	r0, r2
 80139fe:	1c59      	adds	r1, r3, #1
 8013a00:	9121      	str	r1, [sp, #132]	; 0x84
 8013a02:	785b      	ldrb	r3, [r3, #1]
 8013a04:	e7ca      	b.n	801399c <_strtod_l+0x208>
 8013a06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a08:	e7d4      	b.n	80139b4 <_strtod_l+0x220>
 8013a0a:	1c54      	adds	r4, r2, #1
 8013a0c:	2a08      	cmp	r2, #8
 8013a0e:	dc04      	bgt.n	8013a1a <_strtod_l+0x286>
 8013a10:	9a08      	ldr	r2, [sp, #32]
 8013a12:	434a      	muls	r2, r1
 8013a14:	9208      	str	r2, [sp, #32]
 8013a16:	0022      	movs	r2, r4
 8013a18:	e7df      	b.n	80139da <_strtod_l+0x246>
 8013a1a:	2c10      	cmp	r4, #16
 8013a1c:	dcfb      	bgt.n	8013a16 <_strtod_l+0x282>
 8013a1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a20:	434a      	muls	r2, r1
 8013a22:	920b      	str	r2, [sp, #44]	; 0x2c
 8013a24:	e7f7      	b.n	8013a16 <_strtod_l+0x282>
 8013a26:	9905      	ldr	r1, [sp, #20]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	2910      	cmp	r1, #16
 8013a2c:	dce5      	bgt.n	80139fa <_strtod_l+0x266>
 8013a2e:	210a      	movs	r1, #10
 8013a30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013a32:	4341      	muls	r1, r0
 8013a34:	185b      	adds	r3, r3, r1
 8013a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a38:	e7df      	b.n	80139fa <_strtod_l+0x266>
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	4694      	mov	ip, r2
 8013a3e:	9205      	str	r2, [sp, #20]
 8013a40:	3201      	adds	r2, #1
 8013a42:	e7b0      	b.n	80139a6 <_strtod_l+0x212>
 8013a44:	000c      	movs	r4, r1
 8013a46:	e77e      	b.n	8013946 <_strtod_l+0x1b2>
 8013a48:	0801a940 	.word	0x0801a940
 8013a4c:	ffefffff 	.word	0xffefffff
 8013a50:	00000433 	.word	0x00000433
 8013a54:	7ff00000 	.word	0x7ff00000
 8013a58:	7fffffff 	.word	0x7fffffff
 8013a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a5e:	1c5a      	adds	r2, r3, #1
 8013a60:	9221      	str	r2, [sp, #132]	; 0x84
 8013a62:	785b      	ldrb	r3, [r3, #1]
 8013a64:	2b30      	cmp	r3, #48	; 0x30
 8013a66:	d0f9      	beq.n	8013a5c <_strtod_l+0x2c8>
 8013a68:	001a      	movs	r2, r3
 8013a6a:	3a31      	subs	r2, #49	; 0x31
 8013a6c:	2100      	movs	r1, #0
 8013a6e:	2a08      	cmp	r2, #8
 8013a70:	d816      	bhi.n	8013aa0 <_strtod_l+0x30c>
 8013a72:	3b30      	subs	r3, #48	; 0x30
 8013a74:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013a76:	930e      	str	r3, [sp, #56]	; 0x38
 8013a78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a7a:	1c59      	adds	r1, r3, #1
 8013a7c:	9121      	str	r1, [sp, #132]	; 0x84
 8013a7e:	785b      	ldrb	r3, [r3, #1]
 8013a80:	001a      	movs	r2, r3
 8013a82:	3a30      	subs	r2, #48	; 0x30
 8013a84:	2a09      	cmp	r2, #9
 8013a86:	d932      	bls.n	8013aee <_strtod_l+0x35a>
 8013a88:	1b4a      	subs	r2, r1, r5
 8013a8a:	4dad      	ldr	r5, [pc, #692]	; (8013d40 <_strtod_l+0x5ac>)
 8013a8c:	0029      	movs	r1, r5
 8013a8e:	2a08      	cmp	r2, #8
 8013a90:	dc03      	bgt.n	8013a9a <_strtod_l+0x306>
 8013a92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013a94:	42a9      	cmp	r1, r5
 8013a96:	dd00      	ble.n	8013a9a <_strtod_l+0x306>
 8013a98:	0029      	movs	r1, r5
 8013a9a:	2c00      	cmp	r4, #0
 8013a9c:	d000      	beq.n	8013aa0 <_strtod_l+0x30c>
 8013a9e:	4249      	negs	r1, r1
 8013aa0:	9a05      	ldr	r2, [sp, #20]
 8013aa2:	2a00      	cmp	r2, #0
 8013aa4:	d149      	bne.n	8013b3a <_strtod_l+0x3a6>
 8013aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013aa8:	4310      	orrs	r0, r2
 8013aaa:	d000      	beq.n	8013aae <_strtod_l+0x31a>
 8013aac:	e6b3      	b.n	8013816 <_strtod_l+0x82>
 8013aae:	9a07      	ldr	r2, [sp, #28]
 8013ab0:	2a00      	cmp	r2, #0
 8013ab2:	d000      	beq.n	8013ab6 <_strtod_l+0x322>
 8013ab4:	e6cf      	b.n	8013856 <_strtod_l+0xc2>
 8013ab6:	2b4e      	cmp	r3, #78	; 0x4e
 8013ab8:	d025      	beq.n	8013b06 <_strtod_l+0x372>
 8013aba:	dc1f      	bgt.n	8013afc <_strtod_l+0x368>
 8013abc:	2b49      	cmp	r3, #73	; 0x49
 8013abe:	d000      	beq.n	8013ac2 <_strtod_l+0x32e>
 8013ac0:	e6c9      	b.n	8013856 <_strtod_l+0xc2>
 8013ac2:	49a0      	ldr	r1, [pc, #640]	; (8013d44 <_strtod_l+0x5b0>)
 8013ac4:	a821      	add	r0, sp, #132	; 0x84
 8013ac6:	f003 f9ed 	bl	8016ea4 <__match>
 8013aca:	2800      	cmp	r0, #0
 8013acc:	d100      	bne.n	8013ad0 <_strtod_l+0x33c>
 8013ace:	e6c2      	b.n	8013856 <_strtod_l+0xc2>
 8013ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ad2:	499d      	ldr	r1, [pc, #628]	; (8013d48 <_strtod_l+0x5b4>)
 8013ad4:	3b01      	subs	r3, #1
 8013ad6:	a821      	add	r0, sp, #132	; 0x84
 8013ad8:	9321      	str	r3, [sp, #132]	; 0x84
 8013ada:	f003 f9e3 	bl	8016ea4 <__match>
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	d102      	bne.n	8013ae8 <_strtod_l+0x354>
 8013ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	9321      	str	r3, [sp, #132]	; 0x84
 8013ae8:	4f98      	ldr	r7, [pc, #608]	; (8013d4c <_strtod_l+0x5b8>)
 8013aea:	2600      	movs	r6, #0
 8013aec:	e693      	b.n	8013816 <_strtod_l+0x82>
 8013aee:	220a      	movs	r2, #10
 8013af0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013af2:	434a      	muls	r2, r1
 8013af4:	18d2      	adds	r2, r2, r3
 8013af6:	3a30      	subs	r2, #48	; 0x30
 8013af8:	920e      	str	r2, [sp, #56]	; 0x38
 8013afa:	e7bd      	b.n	8013a78 <_strtod_l+0x2e4>
 8013afc:	2b69      	cmp	r3, #105	; 0x69
 8013afe:	d0e0      	beq.n	8013ac2 <_strtod_l+0x32e>
 8013b00:	2b6e      	cmp	r3, #110	; 0x6e
 8013b02:	d000      	beq.n	8013b06 <_strtod_l+0x372>
 8013b04:	e6a7      	b.n	8013856 <_strtod_l+0xc2>
 8013b06:	4992      	ldr	r1, [pc, #584]	; (8013d50 <_strtod_l+0x5bc>)
 8013b08:	a821      	add	r0, sp, #132	; 0x84
 8013b0a:	f003 f9cb 	bl	8016ea4 <__match>
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	d100      	bne.n	8013b14 <_strtod_l+0x380>
 8013b12:	e6a0      	b.n	8013856 <_strtod_l+0xc2>
 8013b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	2b28      	cmp	r3, #40	; 0x28
 8013b1a:	d10c      	bne.n	8013b36 <_strtod_l+0x3a2>
 8013b1c:	aa24      	add	r2, sp, #144	; 0x90
 8013b1e:	498d      	ldr	r1, [pc, #564]	; (8013d54 <_strtod_l+0x5c0>)
 8013b20:	a821      	add	r0, sp, #132	; 0x84
 8013b22:	f003 f9d3 	bl	8016ecc <__hexnan>
 8013b26:	2805      	cmp	r0, #5
 8013b28:	d105      	bne.n	8013b36 <_strtod_l+0x3a2>
 8013b2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013b2c:	4a87      	ldr	r2, [pc, #540]	; (8013d4c <_strtod_l+0x5b8>)
 8013b2e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013b30:	431a      	orrs	r2, r3
 8013b32:	0017      	movs	r7, r2
 8013b34:	e66f      	b.n	8013816 <_strtod_l+0x82>
 8013b36:	4f88      	ldr	r7, [pc, #544]	; (8013d58 <_strtod_l+0x5c4>)
 8013b38:	e7d7      	b.n	8013aea <_strtod_l+0x356>
 8013b3a:	4663      	mov	r3, ip
 8013b3c:	1acb      	subs	r3, r1, r3
 8013b3e:	9307      	str	r3, [sp, #28]
 8013b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d101      	bne.n	8013b4a <_strtod_l+0x3b6>
 8013b46:	9b05      	ldr	r3, [sp, #20]
 8013b48:	930a      	str	r3, [sp, #40]	; 0x28
 8013b4a:	9c05      	ldr	r4, [sp, #20]
 8013b4c:	2c10      	cmp	r4, #16
 8013b4e:	dd00      	ble.n	8013b52 <_strtod_l+0x3be>
 8013b50:	2410      	movs	r4, #16
 8013b52:	9808      	ldr	r0, [sp, #32]
 8013b54:	f7ee ffb4 	bl	8002ac0 <__aeabi_ui2d>
 8013b58:	9b05      	ldr	r3, [sp, #20]
 8013b5a:	0006      	movs	r6, r0
 8013b5c:	000f      	movs	r7, r1
 8013b5e:	2b09      	cmp	r3, #9
 8013b60:	dc15      	bgt.n	8013b8e <_strtod_l+0x3fa>
 8013b62:	9b07      	ldr	r3, [sp, #28]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d100      	bne.n	8013b6a <_strtod_l+0x3d6>
 8013b68:	e655      	b.n	8013816 <_strtod_l+0x82>
 8013b6a:	9b07      	ldr	r3, [sp, #28]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	dc00      	bgt.n	8013b72 <_strtod_l+0x3de>
 8013b70:	e07d      	b.n	8013c6e <_strtod_l+0x4da>
 8013b72:	2b16      	cmp	r3, #22
 8013b74:	dc62      	bgt.n	8013c3c <_strtod_l+0x4a8>
 8013b76:	00dc      	lsls	r4, r3, #3
 8013b78:	4b78      	ldr	r3, [pc, #480]	; (8013d5c <_strtod_l+0x5c8>)
 8013b7a:	0032      	movs	r2, r6
 8013b7c:	1919      	adds	r1, r3, r4
 8013b7e:	003b      	movs	r3, r7
 8013b80:	6808      	ldr	r0, [r1, #0]
 8013b82:	6849      	ldr	r1, [r1, #4]
 8013b84:	f7ee f956 	bl	8001e34 <__aeabi_dmul>
 8013b88:	0006      	movs	r6, r0
 8013b8a:	000f      	movs	r7, r1
 8013b8c:	e643      	b.n	8013816 <_strtod_l+0x82>
 8013b8e:	0022      	movs	r2, r4
 8013b90:	4b72      	ldr	r3, [pc, #456]	; (8013d5c <_strtod_l+0x5c8>)
 8013b92:	3a09      	subs	r2, #9
 8013b94:	00d2      	lsls	r2, r2, #3
 8013b96:	189b      	adds	r3, r3, r2
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	f7ee f94a 	bl	8001e34 <__aeabi_dmul>
 8013ba0:	0006      	movs	r6, r0
 8013ba2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013ba4:	000f      	movs	r7, r1
 8013ba6:	f7ee ff8b 	bl	8002ac0 <__aeabi_ui2d>
 8013baa:	000b      	movs	r3, r1
 8013bac:	0002      	movs	r2, r0
 8013bae:	0039      	movs	r1, r7
 8013bb0:	0030      	movs	r0, r6
 8013bb2:	f7ed fa19 	bl	8000fe8 <__aeabi_dadd>
 8013bb6:	9b05      	ldr	r3, [sp, #20]
 8013bb8:	0006      	movs	r6, r0
 8013bba:	000f      	movs	r7, r1
 8013bbc:	2b0f      	cmp	r3, #15
 8013bbe:	ddd0      	ble.n	8013b62 <_strtod_l+0x3ce>
 8013bc0:	9b05      	ldr	r3, [sp, #20]
 8013bc2:	1b1c      	subs	r4, r3, r4
 8013bc4:	9b07      	ldr	r3, [sp, #28]
 8013bc6:	18e4      	adds	r4, r4, r3
 8013bc8:	2c00      	cmp	r4, #0
 8013bca:	dc00      	bgt.n	8013bce <_strtod_l+0x43a>
 8013bcc:	e094      	b.n	8013cf8 <_strtod_l+0x564>
 8013bce:	230f      	movs	r3, #15
 8013bd0:	4023      	ands	r3, r4
 8013bd2:	d00a      	beq.n	8013bea <_strtod_l+0x456>
 8013bd4:	4961      	ldr	r1, [pc, #388]	; (8013d5c <_strtod_l+0x5c8>)
 8013bd6:	00db      	lsls	r3, r3, #3
 8013bd8:	18c9      	adds	r1, r1, r3
 8013bda:	0032      	movs	r2, r6
 8013bdc:	6808      	ldr	r0, [r1, #0]
 8013bde:	6849      	ldr	r1, [r1, #4]
 8013be0:	003b      	movs	r3, r7
 8013be2:	f7ee f927 	bl	8001e34 <__aeabi_dmul>
 8013be6:	0006      	movs	r6, r0
 8013be8:	000f      	movs	r7, r1
 8013bea:	230f      	movs	r3, #15
 8013bec:	439c      	bics	r4, r3
 8013bee:	d06e      	beq.n	8013cce <_strtod_l+0x53a>
 8013bf0:	3326      	adds	r3, #38	; 0x26
 8013bf2:	33ff      	adds	r3, #255	; 0xff
 8013bf4:	429c      	cmp	r4, r3
 8013bf6:	dd48      	ble.n	8013c8a <_strtod_l+0x4f6>
 8013bf8:	2400      	movs	r4, #0
 8013bfa:	9405      	str	r4, [sp, #20]
 8013bfc:	940b      	str	r4, [sp, #44]	; 0x2c
 8013bfe:	940a      	str	r4, [sp, #40]	; 0x28
 8013c00:	2322      	movs	r3, #34	; 0x22
 8013c02:	2600      	movs	r6, #0
 8013c04:	9a04      	ldr	r2, [sp, #16]
 8013c06:	4f51      	ldr	r7, [pc, #324]	; (8013d4c <_strtod_l+0x5b8>)
 8013c08:	6013      	str	r3, [r2, #0]
 8013c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c0c:	42b3      	cmp	r3, r6
 8013c0e:	d100      	bne.n	8013c12 <_strtod_l+0x47e>
 8013c10:	e601      	b.n	8013816 <_strtod_l+0x82>
 8013c12:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c14:	9804      	ldr	r0, [sp, #16]
 8013c16:	f003 fa47 	bl	80170a8 <_Bfree>
 8013c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c1c:	9804      	ldr	r0, [sp, #16]
 8013c1e:	f003 fa43 	bl	80170a8 <_Bfree>
 8013c22:	9905      	ldr	r1, [sp, #20]
 8013c24:	9804      	ldr	r0, [sp, #16]
 8013c26:	f003 fa3f 	bl	80170a8 <_Bfree>
 8013c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c2c:	9804      	ldr	r0, [sp, #16]
 8013c2e:	f003 fa3b 	bl	80170a8 <_Bfree>
 8013c32:	0021      	movs	r1, r4
 8013c34:	9804      	ldr	r0, [sp, #16]
 8013c36:	f003 fa37 	bl	80170a8 <_Bfree>
 8013c3a:	e5ec      	b.n	8013816 <_strtod_l+0x82>
 8013c3c:	2325      	movs	r3, #37	; 0x25
 8013c3e:	9a05      	ldr	r2, [sp, #20]
 8013c40:	1a9b      	subs	r3, r3, r2
 8013c42:	9a07      	ldr	r2, [sp, #28]
 8013c44:	4293      	cmp	r3, r2
 8013c46:	dbbb      	blt.n	8013bc0 <_strtod_l+0x42c>
 8013c48:	230f      	movs	r3, #15
 8013c4a:	9a05      	ldr	r2, [sp, #20]
 8013c4c:	4c43      	ldr	r4, [pc, #268]	; (8013d5c <_strtod_l+0x5c8>)
 8013c4e:	1a9d      	subs	r5, r3, r2
 8013c50:	00e9      	lsls	r1, r5, #3
 8013c52:	1861      	adds	r1, r4, r1
 8013c54:	0032      	movs	r2, r6
 8013c56:	6808      	ldr	r0, [r1, #0]
 8013c58:	6849      	ldr	r1, [r1, #4]
 8013c5a:	003b      	movs	r3, r7
 8013c5c:	f7ee f8ea 	bl	8001e34 <__aeabi_dmul>
 8013c60:	9b07      	ldr	r3, [sp, #28]
 8013c62:	1b5e      	subs	r6, r3, r5
 8013c64:	00f6      	lsls	r6, r6, #3
 8013c66:	19a6      	adds	r6, r4, r6
 8013c68:	6832      	ldr	r2, [r6, #0]
 8013c6a:	6873      	ldr	r3, [r6, #4]
 8013c6c:	e78a      	b.n	8013b84 <_strtod_l+0x3f0>
 8013c6e:	9b07      	ldr	r3, [sp, #28]
 8013c70:	3316      	adds	r3, #22
 8013c72:	dba5      	blt.n	8013bc0 <_strtod_l+0x42c>
 8013c74:	9b07      	ldr	r3, [sp, #28]
 8013c76:	0030      	movs	r0, r6
 8013c78:	00da      	lsls	r2, r3, #3
 8013c7a:	4b38      	ldr	r3, [pc, #224]	; (8013d5c <_strtod_l+0x5c8>)
 8013c7c:	0039      	movs	r1, r7
 8013c7e:	1a9b      	subs	r3, r3, r2
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	f7ed fccc 	bl	8001620 <__aeabi_ddiv>
 8013c88:	e77e      	b.n	8013b88 <_strtod_l+0x3f4>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	0030      	movs	r0, r6
 8013c8e:	0039      	movs	r1, r7
 8013c90:	001d      	movs	r5, r3
 8013c92:	1124      	asrs	r4, r4, #4
 8013c94:	2c01      	cmp	r4, #1
 8013c96:	dc1d      	bgt.n	8013cd4 <_strtod_l+0x540>
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <_strtod_l+0x50c>
 8013c9c:	0006      	movs	r6, r0
 8013c9e:	000f      	movs	r7, r1
 8013ca0:	4b2f      	ldr	r3, [pc, #188]	; (8013d60 <_strtod_l+0x5cc>)
 8013ca2:	00ed      	lsls	r5, r5, #3
 8013ca4:	18ff      	adds	r7, r7, r3
 8013ca6:	4b2f      	ldr	r3, [pc, #188]	; (8013d64 <_strtod_l+0x5d0>)
 8013ca8:	0032      	movs	r2, r6
 8013caa:	195d      	adds	r5, r3, r5
 8013cac:	6828      	ldr	r0, [r5, #0]
 8013cae:	6869      	ldr	r1, [r5, #4]
 8013cb0:	003b      	movs	r3, r7
 8013cb2:	f7ee f8bf 	bl	8001e34 <__aeabi_dmul>
 8013cb6:	4b25      	ldr	r3, [pc, #148]	; (8013d4c <_strtod_l+0x5b8>)
 8013cb8:	4a2b      	ldr	r2, [pc, #172]	; (8013d68 <_strtod_l+0x5d4>)
 8013cba:	0006      	movs	r6, r0
 8013cbc:	400b      	ands	r3, r1
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d89a      	bhi.n	8013bf8 <_strtod_l+0x464>
 8013cc2:	4a2a      	ldr	r2, [pc, #168]	; (8013d6c <_strtod_l+0x5d8>)
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d913      	bls.n	8013cf0 <_strtod_l+0x55c>
 8013cc8:	2601      	movs	r6, #1
 8013cca:	4f29      	ldr	r7, [pc, #164]	; (8013d70 <_strtod_l+0x5dc>)
 8013ccc:	4276      	negs	r6, r6
 8013cce:	2300      	movs	r3, #0
 8013cd0:	9306      	str	r3, [sp, #24]
 8013cd2:	e07b      	b.n	8013dcc <_strtod_l+0x638>
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	4214      	tst	r4, r2
 8013cd8:	d007      	beq.n	8013cea <_strtod_l+0x556>
 8013cda:	4a22      	ldr	r2, [pc, #136]	; (8013d64 <_strtod_l+0x5d0>)
 8013cdc:	00eb      	lsls	r3, r5, #3
 8013cde:	189b      	adds	r3, r3, r2
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	f7ee f8a6 	bl	8001e34 <__aeabi_dmul>
 8013ce8:	2301      	movs	r3, #1
 8013cea:	3501      	adds	r5, #1
 8013cec:	1064      	asrs	r4, r4, #1
 8013cee:	e7d1      	b.n	8013c94 <_strtod_l+0x500>
 8013cf0:	23d4      	movs	r3, #212	; 0xd4
 8013cf2:	049b      	lsls	r3, r3, #18
 8013cf4:	18cf      	adds	r7, r1, r3
 8013cf6:	e7ea      	b.n	8013cce <_strtod_l+0x53a>
 8013cf8:	2c00      	cmp	r4, #0
 8013cfa:	d0e8      	beq.n	8013cce <_strtod_l+0x53a>
 8013cfc:	230f      	movs	r3, #15
 8013cfe:	4264      	negs	r4, r4
 8013d00:	4023      	ands	r3, r4
 8013d02:	d00a      	beq.n	8013d1a <_strtod_l+0x586>
 8013d04:	4a15      	ldr	r2, [pc, #84]	; (8013d5c <_strtod_l+0x5c8>)
 8013d06:	00db      	lsls	r3, r3, #3
 8013d08:	18d3      	adds	r3, r2, r3
 8013d0a:	0030      	movs	r0, r6
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	0039      	movs	r1, r7
 8013d12:	f7ed fc85 	bl	8001620 <__aeabi_ddiv>
 8013d16:	0006      	movs	r6, r0
 8013d18:	000f      	movs	r7, r1
 8013d1a:	1124      	asrs	r4, r4, #4
 8013d1c:	d0d7      	beq.n	8013cce <_strtod_l+0x53a>
 8013d1e:	2c1f      	cmp	r4, #31
 8013d20:	dd28      	ble.n	8013d74 <_strtod_l+0x5e0>
 8013d22:	2400      	movs	r4, #0
 8013d24:	9405      	str	r4, [sp, #20]
 8013d26:	940b      	str	r4, [sp, #44]	; 0x2c
 8013d28:	940a      	str	r4, [sp, #40]	; 0x28
 8013d2a:	2322      	movs	r3, #34	; 0x22
 8013d2c:	9a04      	ldr	r2, [sp, #16]
 8013d2e:	2600      	movs	r6, #0
 8013d30:	6013      	str	r3, [r2, #0]
 8013d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d34:	2700      	movs	r7, #0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d000      	beq.n	8013d3c <_strtod_l+0x5a8>
 8013d3a:	e76a      	b.n	8013c12 <_strtod_l+0x47e>
 8013d3c:	e56b      	b.n	8013816 <_strtod_l+0x82>
 8013d3e:	46c0      	nop			; (mov r8, r8)
 8013d40:	00004e1f 	.word	0x00004e1f
 8013d44:	0801a995 	.word	0x0801a995
 8013d48:	0801aae8 	.word	0x0801aae8
 8013d4c:	7ff00000 	.word	0x7ff00000
 8013d50:	0801a99d 	.word	0x0801a99d
 8013d54:	0801a954 	.word	0x0801a954
 8013d58:	fff80000 	.word	0xfff80000
 8013d5c:	0801ab20 	.word	0x0801ab20
 8013d60:	fcb00000 	.word	0xfcb00000
 8013d64:	0801aaf8 	.word	0x0801aaf8
 8013d68:	7ca00000 	.word	0x7ca00000
 8013d6c:	7c900000 	.word	0x7c900000
 8013d70:	7fefffff 	.word	0x7fefffff
 8013d74:	2310      	movs	r3, #16
 8013d76:	4023      	ands	r3, r4
 8013d78:	9306      	str	r3, [sp, #24]
 8013d7a:	d001      	beq.n	8013d80 <_strtod_l+0x5ec>
 8013d7c:	236a      	movs	r3, #106	; 0x6a
 8013d7e:	9306      	str	r3, [sp, #24]
 8013d80:	2300      	movs	r3, #0
 8013d82:	0030      	movs	r0, r6
 8013d84:	0039      	movs	r1, r7
 8013d86:	001d      	movs	r5, r3
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	dd00      	ble.n	8013d8e <_strtod_l+0x5fa>
 8013d8c:	e10e      	b.n	8013fac <_strtod_l+0x818>
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <_strtod_l+0x602>
 8013d92:	0006      	movs	r6, r0
 8013d94:	000f      	movs	r7, r1
 8013d96:	9b06      	ldr	r3, [sp, #24]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d00f      	beq.n	8013dbc <_strtod_l+0x628>
 8013d9c:	236b      	movs	r3, #107	; 0x6b
 8013d9e:	0079      	lsls	r1, r7, #1
 8013da0:	0d49      	lsrs	r1, r1, #21
 8013da2:	003a      	movs	r2, r7
 8013da4:	1a5b      	subs	r3, r3, r1
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	dd08      	ble.n	8013dbc <_strtod_l+0x628>
 8013daa:	2b1f      	cmp	r3, #31
 8013dac:	dc00      	bgt.n	8013db0 <_strtod_l+0x61c>
 8013dae:	e112      	b.n	8013fd6 <_strtod_l+0x842>
 8013db0:	2600      	movs	r6, #0
 8013db2:	2b34      	cmp	r3, #52	; 0x34
 8013db4:	dc00      	bgt.n	8013db8 <_strtod_l+0x624>
 8013db6:	e107      	b.n	8013fc8 <_strtod_l+0x834>
 8013db8:	27dc      	movs	r7, #220	; 0xdc
 8013dba:	04bf      	lsls	r7, r7, #18
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	0030      	movs	r0, r6
 8013dc2:	0039      	movs	r1, r7
 8013dc4:	f7ec fb4a 	bl	800045c <__aeabi_dcmpeq>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d1aa      	bne.n	8013d22 <_strtod_l+0x58e>
 8013dcc:	9b08      	ldr	r3, [sp, #32]
 8013dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dd0:	9300      	str	r3, [sp, #0]
 8013dd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013dd4:	9b05      	ldr	r3, [sp, #20]
 8013dd6:	9804      	ldr	r0, [sp, #16]
 8013dd8:	f003 f9ae 	bl	8017138 <__s2b>
 8013ddc:	900b      	str	r0, [sp, #44]	; 0x2c
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d100      	bne.n	8013de4 <_strtod_l+0x650>
 8013de2:	e709      	b.n	8013bf8 <_strtod_l+0x464>
 8013de4:	9b07      	ldr	r3, [sp, #28]
 8013de6:	9a07      	ldr	r2, [sp, #28]
 8013de8:	17db      	asrs	r3, r3, #31
 8013dea:	4252      	negs	r2, r2
 8013dec:	4013      	ands	r3, r2
 8013dee:	9315      	str	r3, [sp, #84]	; 0x54
 8013df0:	9b07      	ldr	r3, [sp, #28]
 8013df2:	2400      	movs	r4, #0
 8013df4:	43db      	mvns	r3, r3
 8013df6:	9a07      	ldr	r2, [sp, #28]
 8013df8:	17db      	asrs	r3, r3, #31
 8013dfa:	401a      	ands	r2, r3
 8013dfc:	921c      	str	r2, [sp, #112]	; 0x70
 8013dfe:	9405      	str	r4, [sp, #20]
 8013e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e02:	9804      	ldr	r0, [sp, #16]
 8013e04:	6859      	ldr	r1, [r3, #4]
 8013e06:	f003 f927 	bl	8017058 <_Balloc>
 8013e0a:	900a      	str	r0, [sp, #40]	; 0x28
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d100      	bne.n	8013e12 <_strtod_l+0x67e>
 8013e10:	e6f6      	b.n	8013c00 <_strtod_l+0x46c>
 8013e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e16:	691b      	ldr	r3, [r3, #16]
 8013e18:	310c      	adds	r1, #12
 8013e1a:	1c9a      	adds	r2, r3, #2
 8013e1c:	0092      	lsls	r2, r2, #2
 8013e1e:	300c      	adds	r0, #12
 8013e20:	9308      	str	r3, [sp, #32]
 8013e22:	f7ff fa32 	bl	801328a <memcpy>
 8013e26:	ab24      	add	r3, sp, #144	; 0x90
 8013e28:	9301      	str	r3, [sp, #4]
 8013e2a:	ab23      	add	r3, sp, #140	; 0x8c
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	0032      	movs	r2, r6
 8013e30:	003b      	movs	r3, r7
 8013e32:	9804      	ldr	r0, [sp, #16]
 8013e34:	960e      	str	r6, [sp, #56]	; 0x38
 8013e36:	970f      	str	r7, [sp, #60]	; 0x3c
 8013e38:	f003 fc22 	bl	8017680 <__d2b>
 8013e3c:	9022      	str	r0, [sp, #136]	; 0x88
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	d100      	bne.n	8013e44 <_strtod_l+0x6b0>
 8013e42:	e6dd      	b.n	8013c00 <_strtod_l+0x46c>
 8013e44:	2101      	movs	r1, #1
 8013e46:	9804      	ldr	r0, [sp, #16]
 8013e48:	f003 f9fd 	bl	8017246 <__i2b>
 8013e4c:	9005      	str	r0, [sp, #20]
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	d100      	bne.n	8013e54 <_strtod_l+0x6c0>
 8013e52:	e6d5      	b.n	8013c00 <_strtod_l+0x46c>
 8013e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	da00      	bge.n	8013e5c <_strtod_l+0x6c8>
 8013e5a:	e0c1      	b.n	8013fe0 <_strtod_l+0x84c>
 8013e5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e5e:	189d      	adds	r5, r3, r2
 8013e60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e62:	4694      	mov	ip, r2
 8013e64:	9906      	ldr	r1, [sp, #24]
 8013e66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013e68:	1a5b      	subs	r3, r3, r1
 8013e6a:	2136      	movs	r1, #54	; 0x36
 8013e6c:	189b      	adds	r3, r3, r2
 8013e6e:	1a8a      	subs	r2, r1, r2
 8013e70:	49b2      	ldr	r1, [pc, #712]	; (801413c <_strtod_l+0x9a8>)
 8013e72:	3b01      	subs	r3, #1
 8013e74:	2001      	movs	r0, #1
 8013e76:	428b      	cmp	r3, r1
 8013e78:	db00      	blt.n	8013e7c <_strtod_l+0x6e8>
 8013e7a:	e0bd      	b.n	8013ff8 <_strtod_l+0x864>
 8013e7c:	1ac9      	subs	r1, r1, r3
 8013e7e:	1a52      	subs	r2, r2, r1
 8013e80:	291f      	cmp	r1, #31
 8013e82:	dd00      	ble.n	8013e86 <_strtod_l+0x6f2>
 8013e84:	e0b1      	b.n	8013fea <_strtod_l+0x856>
 8013e86:	4088      	lsls	r0, r1
 8013e88:	2300      	movs	r3, #0
 8013e8a:	9014      	str	r0, [sp, #80]	; 0x50
 8013e8c:	9310      	str	r3, [sp, #64]	; 0x40
 8013e8e:	18ab      	adds	r3, r5, r2
 8013e90:	9308      	str	r3, [sp, #32]
 8013e92:	0013      	movs	r3, r2
 8013e94:	9a06      	ldr	r2, [sp, #24]
 8013e96:	4463      	add	r3, ip
 8013e98:	18d3      	adds	r3, r2, r3
 8013e9a:	9a08      	ldr	r2, [sp, #32]
 8013e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8013e9e:	002b      	movs	r3, r5
 8013ea0:	4295      	cmp	r5, r2
 8013ea2:	dd00      	ble.n	8013ea6 <_strtod_l+0x712>
 8013ea4:	0013      	movs	r3, r2
 8013ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	dd00      	ble.n	8013eae <_strtod_l+0x71a>
 8013eac:	0013      	movs	r3, r2
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	dd06      	ble.n	8013ec0 <_strtod_l+0x72c>
 8013eb2:	9a08      	ldr	r2, [sp, #32]
 8013eb4:	1aed      	subs	r5, r5, r3
 8013eb6:	1ad2      	subs	r2, r2, r3
 8013eb8:	9208      	str	r2, [sp, #32]
 8013eba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ebc:	1ad2      	subs	r2, r2, r3
 8013ebe:	920c      	str	r2, [sp, #48]	; 0x30
 8013ec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d017      	beq.n	8013ef6 <_strtod_l+0x762>
 8013ec6:	001a      	movs	r2, r3
 8013ec8:	9905      	ldr	r1, [sp, #20]
 8013eca:	9804      	ldr	r0, [sp, #16]
 8013ecc:	f003 fa54 	bl	8017378 <__pow5mult>
 8013ed0:	9005      	str	r0, [sp, #20]
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	d100      	bne.n	8013ed8 <_strtod_l+0x744>
 8013ed6:	e693      	b.n	8013c00 <_strtod_l+0x46c>
 8013ed8:	0001      	movs	r1, r0
 8013eda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013edc:	9804      	ldr	r0, [sp, #16]
 8013ede:	f003 f9bb 	bl	8017258 <__multiply>
 8013ee2:	9012      	str	r0, [sp, #72]	; 0x48
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d100      	bne.n	8013eea <_strtod_l+0x756>
 8013ee8:	e68a      	b.n	8013c00 <_strtod_l+0x46c>
 8013eea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013eec:	9804      	ldr	r0, [sp, #16]
 8013eee:	f003 f8db 	bl	80170a8 <_Bfree>
 8013ef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ef4:	9322      	str	r3, [sp, #136]	; 0x88
 8013ef6:	9b08      	ldr	r3, [sp, #32]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	dd00      	ble.n	8013efe <_strtod_l+0x76a>
 8013efc:	e07f      	b.n	8013ffe <_strtod_l+0x86a>
 8013efe:	9b07      	ldr	r3, [sp, #28]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	dd08      	ble.n	8013f16 <_strtod_l+0x782>
 8013f04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013f06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f08:	9804      	ldr	r0, [sp, #16]
 8013f0a:	f003 fa35 	bl	8017378 <__pow5mult>
 8013f0e:	900a      	str	r0, [sp, #40]	; 0x28
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d100      	bne.n	8013f16 <_strtod_l+0x782>
 8013f14:	e674      	b.n	8013c00 <_strtod_l+0x46c>
 8013f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	dd08      	ble.n	8013f2e <_strtod_l+0x79a>
 8013f1c:	001a      	movs	r2, r3
 8013f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f20:	9804      	ldr	r0, [sp, #16]
 8013f22:	f003 fa6b 	bl	80173fc <__lshift>
 8013f26:	900a      	str	r0, [sp, #40]	; 0x28
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d100      	bne.n	8013f2e <_strtod_l+0x79a>
 8013f2c:	e668      	b.n	8013c00 <_strtod_l+0x46c>
 8013f2e:	2d00      	cmp	r5, #0
 8013f30:	dd08      	ble.n	8013f44 <_strtod_l+0x7b0>
 8013f32:	002a      	movs	r2, r5
 8013f34:	9905      	ldr	r1, [sp, #20]
 8013f36:	9804      	ldr	r0, [sp, #16]
 8013f38:	f003 fa60 	bl	80173fc <__lshift>
 8013f3c:	9005      	str	r0, [sp, #20]
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d100      	bne.n	8013f44 <_strtod_l+0x7b0>
 8013f42:	e65d      	b.n	8013c00 <_strtod_l+0x46c>
 8013f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f46:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f48:	9804      	ldr	r0, [sp, #16]
 8013f4a:	f003 fac3 	bl	80174d4 <__mdiff>
 8013f4e:	1e04      	subs	r4, r0, #0
 8013f50:	d100      	bne.n	8013f54 <_strtod_l+0x7c0>
 8013f52:	e655      	b.n	8013c00 <_strtod_l+0x46c>
 8013f54:	2500      	movs	r5, #0
 8013f56:	68c3      	ldr	r3, [r0, #12]
 8013f58:	9905      	ldr	r1, [sp, #20]
 8013f5a:	60c5      	str	r5, [r0, #12]
 8013f5c:	9312      	str	r3, [sp, #72]	; 0x48
 8013f5e:	f003 fa9f 	bl	80174a0 <__mcmp>
 8013f62:	42a8      	cmp	r0, r5
 8013f64:	da55      	bge.n	8014012 <_strtod_l+0x87e>
 8013f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f68:	42ab      	cmp	r3, r5
 8013f6a:	d11b      	bne.n	8013fa4 <_strtod_l+0x810>
 8013f6c:	42ae      	cmp	r6, r5
 8013f6e:	d119      	bne.n	8013fa4 <_strtod_l+0x810>
 8013f70:	033b      	lsls	r3, r7, #12
 8013f72:	42ab      	cmp	r3, r5
 8013f74:	d116      	bne.n	8013fa4 <_strtod_l+0x810>
 8013f76:	22d6      	movs	r2, #214	; 0xd6
 8013f78:	4b71      	ldr	r3, [pc, #452]	; (8014140 <_strtod_l+0x9ac>)
 8013f7a:	04d2      	lsls	r2, r2, #19
 8013f7c:	403b      	ands	r3, r7
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	d910      	bls.n	8013fa4 <_strtod_l+0x810>
 8013f82:	6963      	ldr	r3, [r4, #20]
 8013f84:	42ab      	cmp	r3, r5
 8013f86:	d102      	bne.n	8013f8e <_strtod_l+0x7fa>
 8013f88:	6923      	ldr	r3, [r4, #16]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	dd0a      	ble.n	8013fa4 <_strtod_l+0x810>
 8013f8e:	0021      	movs	r1, r4
 8013f90:	2201      	movs	r2, #1
 8013f92:	9804      	ldr	r0, [sp, #16]
 8013f94:	f003 fa32 	bl	80173fc <__lshift>
 8013f98:	9905      	ldr	r1, [sp, #20]
 8013f9a:	0004      	movs	r4, r0
 8013f9c:	f003 fa80 	bl	80174a0 <__mcmp>
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	dc6b      	bgt.n	801407c <_strtod_l+0x8e8>
 8013fa4:	9b06      	ldr	r3, [sp, #24]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d178      	bne.n	801409c <_strtod_l+0x908>
 8013faa:	e632      	b.n	8013c12 <_strtod_l+0x47e>
 8013fac:	2201      	movs	r2, #1
 8013fae:	4214      	tst	r4, r2
 8013fb0:	d007      	beq.n	8013fc2 <_strtod_l+0x82e>
 8013fb2:	4a64      	ldr	r2, [pc, #400]	; (8014144 <_strtod_l+0x9b0>)
 8013fb4:	00eb      	lsls	r3, r5, #3
 8013fb6:	18d3      	adds	r3, r2, r3
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	f7ed ff3a 	bl	8001e34 <__aeabi_dmul>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	3501      	adds	r5, #1
 8013fc4:	1064      	asrs	r4, r4, #1
 8013fc6:	e6df      	b.n	8013d88 <_strtod_l+0x5f4>
 8013fc8:	2101      	movs	r1, #1
 8013fca:	3b20      	subs	r3, #32
 8013fcc:	4249      	negs	r1, r1
 8013fce:	4099      	lsls	r1, r3
 8013fd0:	400a      	ands	r2, r1
 8013fd2:	0017      	movs	r7, r2
 8013fd4:	e6f2      	b.n	8013dbc <_strtod_l+0x628>
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	4252      	negs	r2, r2
 8013fda:	409a      	lsls	r2, r3
 8013fdc:	4016      	ands	r6, r2
 8013fde:	e6ed      	b.n	8013dbc <_strtod_l+0x628>
 8013fe0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013fe2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013fe4:	1ad2      	subs	r2, r2, r3
 8013fe6:	4694      	mov	ip, r2
 8013fe8:	e73c      	b.n	8013e64 <_strtod_l+0x6d0>
 8013fea:	4957      	ldr	r1, [pc, #348]	; (8014148 <_strtod_l+0x9b4>)
 8013fec:	1acb      	subs	r3, r1, r3
 8013fee:	0001      	movs	r1, r0
 8013ff0:	4099      	lsls	r1, r3
 8013ff2:	9110      	str	r1, [sp, #64]	; 0x40
 8013ff4:	9014      	str	r0, [sp, #80]	; 0x50
 8013ff6:	e74a      	b.n	8013e8e <_strtod_l+0x6fa>
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8013ffc:	e7fa      	b.n	8013ff4 <_strtod_l+0x860>
 8013ffe:	9a08      	ldr	r2, [sp, #32]
 8014000:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014002:	9804      	ldr	r0, [sp, #16]
 8014004:	f003 f9fa 	bl	80173fc <__lshift>
 8014008:	9022      	str	r0, [sp, #136]	; 0x88
 801400a:	2800      	cmp	r0, #0
 801400c:	d000      	beq.n	8014010 <_strtod_l+0x87c>
 801400e:	e776      	b.n	8013efe <_strtod_l+0x76a>
 8014010:	e5f6      	b.n	8013c00 <_strtod_l+0x46c>
 8014012:	970c      	str	r7, [sp, #48]	; 0x30
 8014014:	2800      	cmp	r0, #0
 8014016:	d000      	beq.n	801401a <_strtod_l+0x886>
 8014018:	e0a0      	b.n	801415c <_strtod_l+0x9c8>
 801401a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801401c:	033b      	lsls	r3, r7, #12
 801401e:	0b1b      	lsrs	r3, r3, #12
 8014020:	2a00      	cmp	r2, #0
 8014022:	d027      	beq.n	8014074 <_strtod_l+0x8e0>
 8014024:	4a49      	ldr	r2, [pc, #292]	; (801414c <_strtod_l+0x9b8>)
 8014026:	4293      	cmp	r3, r2
 8014028:	d157      	bne.n	80140da <_strtod_l+0x946>
 801402a:	2201      	movs	r2, #1
 801402c:	9b06      	ldr	r3, [sp, #24]
 801402e:	4252      	negs	r2, r2
 8014030:	0031      	movs	r1, r6
 8014032:	0010      	movs	r0, r2
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00b      	beq.n	8014050 <_strtod_l+0x8bc>
 8014038:	25d4      	movs	r5, #212	; 0xd4
 801403a:	4b41      	ldr	r3, [pc, #260]	; (8014140 <_strtod_l+0x9ac>)
 801403c:	04ed      	lsls	r5, r5, #19
 801403e:	403b      	ands	r3, r7
 8014040:	0010      	movs	r0, r2
 8014042:	42ab      	cmp	r3, r5
 8014044:	d804      	bhi.n	8014050 <_strtod_l+0x8bc>
 8014046:	306c      	adds	r0, #108	; 0x6c
 8014048:	0d1b      	lsrs	r3, r3, #20
 801404a:	1ac3      	subs	r3, r0, r3
 801404c:	409a      	lsls	r2, r3
 801404e:	0010      	movs	r0, r2
 8014050:	4281      	cmp	r1, r0
 8014052:	d142      	bne.n	80140da <_strtod_l+0x946>
 8014054:	4b3e      	ldr	r3, [pc, #248]	; (8014150 <_strtod_l+0x9bc>)
 8014056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014058:	429a      	cmp	r2, r3
 801405a:	d102      	bne.n	8014062 <_strtod_l+0x8ce>
 801405c:	1c4b      	adds	r3, r1, #1
 801405e:	d100      	bne.n	8014062 <_strtod_l+0x8ce>
 8014060:	e5ce      	b.n	8013c00 <_strtod_l+0x46c>
 8014062:	4b37      	ldr	r3, [pc, #220]	; (8014140 <_strtod_l+0x9ac>)
 8014064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014066:	2600      	movs	r6, #0
 8014068:	401a      	ands	r2, r3
 801406a:	0013      	movs	r3, r2
 801406c:	2280      	movs	r2, #128	; 0x80
 801406e:	0352      	lsls	r2, r2, #13
 8014070:	189f      	adds	r7, r3, r2
 8014072:	e797      	b.n	8013fa4 <_strtod_l+0x810>
 8014074:	2b00      	cmp	r3, #0
 8014076:	d130      	bne.n	80140da <_strtod_l+0x946>
 8014078:	2e00      	cmp	r6, #0
 801407a:	d12e      	bne.n	80140da <_strtod_l+0x946>
 801407c:	9906      	ldr	r1, [sp, #24]
 801407e:	003b      	movs	r3, r7
 8014080:	4a2f      	ldr	r2, [pc, #188]	; (8014140 <_strtod_l+0x9ac>)
 8014082:	2900      	cmp	r1, #0
 8014084:	d020      	beq.n	80140c8 <_strtod_l+0x934>
 8014086:	0011      	movs	r1, r2
 8014088:	20d6      	movs	r0, #214	; 0xd6
 801408a:	4039      	ands	r1, r7
 801408c:	04c0      	lsls	r0, r0, #19
 801408e:	4281      	cmp	r1, r0
 8014090:	dc1a      	bgt.n	80140c8 <_strtod_l+0x934>
 8014092:	23dc      	movs	r3, #220	; 0xdc
 8014094:	049b      	lsls	r3, r3, #18
 8014096:	4299      	cmp	r1, r3
 8014098:	dc00      	bgt.n	801409c <_strtod_l+0x908>
 801409a:	e646      	b.n	8013d2a <_strtod_l+0x596>
 801409c:	4b2d      	ldr	r3, [pc, #180]	; (8014154 <_strtod_l+0x9c0>)
 801409e:	0030      	movs	r0, r6
 80140a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80140a2:	2300      	movs	r3, #0
 80140a4:	931a      	str	r3, [sp, #104]	; 0x68
 80140a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80140a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80140aa:	0039      	movs	r1, r7
 80140ac:	f7ed fec2 	bl	8001e34 <__aeabi_dmul>
 80140b0:	0006      	movs	r6, r0
 80140b2:	000f      	movs	r7, r1
 80140b4:	1e0b      	subs	r3, r1, #0
 80140b6:	d000      	beq.n	80140ba <_strtod_l+0x926>
 80140b8:	e5ab      	b.n	8013c12 <_strtod_l+0x47e>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d000      	beq.n	80140c0 <_strtod_l+0x92c>
 80140be:	e5a8      	b.n	8013c12 <_strtod_l+0x47e>
 80140c0:	9a04      	ldr	r2, [sp, #16]
 80140c2:	3322      	adds	r3, #34	; 0x22
 80140c4:	6013      	str	r3, [r2, #0]
 80140c6:	e5a4      	b.n	8013c12 <_strtod_l+0x47e>
 80140c8:	2601      	movs	r6, #1
 80140ca:	4013      	ands	r3, r2
 80140cc:	4a22      	ldr	r2, [pc, #136]	; (8014158 <_strtod_l+0x9c4>)
 80140ce:	4276      	negs	r6, r6
 80140d0:	189b      	adds	r3, r3, r2
 80140d2:	4a1e      	ldr	r2, [pc, #120]	; (801414c <_strtod_l+0x9b8>)
 80140d4:	431a      	orrs	r2, r3
 80140d6:	0017      	movs	r7, r2
 80140d8:	e764      	b.n	8013fa4 <_strtod_l+0x810>
 80140da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d015      	beq.n	801410c <_strtod_l+0x978>
 80140e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80140e4:	4213      	tst	r3, r2
 80140e6:	d100      	bne.n	80140ea <_strtod_l+0x956>
 80140e8:	e75c      	b.n	8013fa4 <_strtod_l+0x810>
 80140ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140ec:	9a06      	ldr	r2, [sp, #24]
 80140ee:	0030      	movs	r0, r6
 80140f0:	0039      	movs	r1, r7
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00f      	beq.n	8014116 <_strtod_l+0x982>
 80140f6:	f7ff fb35 	bl	8013764 <sulp>
 80140fa:	0002      	movs	r2, r0
 80140fc:	000b      	movs	r3, r1
 80140fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014100:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014102:	f7ec ff71 	bl	8000fe8 <__aeabi_dadd>
 8014106:	0006      	movs	r6, r0
 8014108:	000f      	movs	r7, r1
 801410a:	e74b      	b.n	8013fa4 <_strtod_l+0x810>
 801410c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801410e:	4233      	tst	r3, r6
 8014110:	d100      	bne.n	8014114 <_strtod_l+0x980>
 8014112:	e747      	b.n	8013fa4 <_strtod_l+0x810>
 8014114:	e7e9      	b.n	80140ea <_strtod_l+0x956>
 8014116:	f7ff fb25 	bl	8013764 <sulp>
 801411a:	0002      	movs	r2, r0
 801411c:	000b      	movs	r3, r1
 801411e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014120:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014122:	f7ee f8f9 	bl	8002318 <__aeabi_dsub>
 8014126:	2200      	movs	r2, #0
 8014128:	2300      	movs	r3, #0
 801412a:	0006      	movs	r6, r0
 801412c:	000f      	movs	r7, r1
 801412e:	f7ec f995 	bl	800045c <__aeabi_dcmpeq>
 8014132:	2800      	cmp	r0, #0
 8014134:	d000      	beq.n	8014138 <_strtod_l+0x9a4>
 8014136:	e5f8      	b.n	8013d2a <_strtod_l+0x596>
 8014138:	e734      	b.n	8013fa4 <_strtod_l+0x810>
 801413a:	46c0      	nop			; (mov r8, r8)
 801413c:	fffffc02 	.word	0xfffffc02
 8014140:	7ff00000 	.word	0x7ff00000
 8014144:	0801a968 	.word	0x0801a968
 8014148:	fffffbe2 	.word	0xfffffbe2
 801414c:	000fffff 	.word	0x000fffff
 8014150:	7fefffff 	.word	0x7fefffff
 8014154:	39500000 	.word	0x39500000
 8014158:	fff00000 	.word	0xfff00000
 801415c:	9905      	ldr	r1, [sp, #20]
 801415e:	0020      	movs	r0, r4
 8014160:	f003 fae2 	bl	8017728 <__ratio>
 8014164:	2380      	movs	r3, #128	; 0x80
 8014166:	2200      	movs	r2, #0
 8014168:	05db      	lsls	r3, r3, #23
 801416a:	9008      	str	r0, [sp, #32]
 801416c:	9109      	str	r1, [sp, #36]	; 0x24
 801416e:	f7ec f985 	bl	800047c <__aeabi_dcmple>
 8014172:	2800      	cmp	r0, #0
 8014174:	d100      	bne.n	8014178 <_strtod_l+0x9e4>
 8014176:	e07f      	b.n	8014278 <_strtod_l+0xae4>
 8014178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801417a:	2b00      	cmp	r3, #0
 801417c:	d04b      	beq.n	8014216 <_strtod_l+0xa82>
 801417e:	2200      	movs	r2, #0
 8014180:	4b8a      	ldr	r3, [pc, #552]	; (80143ac <_strtod_l+0xc18>)
 8014182:	9210      	str	r2, [sp, #64]	; 0x40
 8014184:	9311      	str	r3, [sp, #68]	; 0x44
 8014186:	4b89      	ldr	r3, [pc, #548]	; (80143ac <_strtod_l+0xc18>)
 8014188:	9308      	str	r3, [sp, #32]
 801418a:	4a89      	ldr	r2, [pc, #548]	; (80143b0 <_strtod_l+0xc1c>)
 801418c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801418e:	4013      	ands	r3, r2
 8014190:	9314      	str	r3, [sp, #80]	; 0x50
 8014192:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014194:	4b87      	ldr	r3, [pc, #540]	; (80143b4 <_strtod_l+0xc20>)
 8014196:	429a      	cmp	r2, r3
 8014198:	d000      	beq.n	801419c <_strtod_l+0xa08>
 801419a:	e0ba      	b.n	8014312 <_strtod_l+0xb7e>
 801419c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801419e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141a0:	921a      	str	r2, [sp, #104]	; 0x68
 80141a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80141a4:	4a84      	ldr	r2, [pc, #528]	; (80143b8 <_strtod_l+0xc24>)
 80141a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141a8:	4694      	mov	ip, r2
 80141aa:	4463      	add	r3, ip
 80141ac:	001f      	movs	r7, r3
 80141ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141b2:	0030      	movs	r0, r6
 80141b4:	0039      	movs	r1, r7
 80141b6:	920c      	str	r2, [sp, #48]	; 0x30
 80141b8:	930d      	str	r3, [sp, #52]	; 0x34
 80141ba:	f003 f9ef 	bl	801759c <__ulp>
 80141be:	0002      	movs	r2, r0
 80141c0:	000b      	movs	r3, r1
 80141c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80141c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80141c6:	f7ed fe35 	bl	8001e34 <__aeabi_dmul>
 80141ca:	0032      	movs	r2, r6
 80141cc:	003b      	movs	r3, r7
 80141ce:	f7ec ff0b 	bl	8000fe8 <__aeabi_dadd>
 80141d2:	4a77      	ldr	r2, [pc, #476]	; (80143b0 <_strtod_l+0xc1c>)
 80141d4:	4b79      	ldr	r3, [pc, #484]	; (80143bc <_strtod_l+0xc28>)
 80141d6:	0006      	movs	r6, r0
 80141d8:	400a      	ands	r2, r1
 80141da:	429a      	cmp	r2, r3
 80141dc:	d964      	bls.n	80142a8 <_strtod_l+0xb14>
 80141de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141e0:	4a77      	ldr	r2, [pc, #476]	; (80143c0 <_strtod_l+0xc2c>)
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d103      	bne.n	80141ee <_strtod_l+0xa5a>
 80141e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141e8:	3301      	adds	r3, #1
 80141ea:	d100      	bne.n	80141ee <_strtod_l+0xa5a>
 80141ec:	e508      	b.n	8013c00 <_strtod_l+0x46c>
 80141ee:	2601      	movs	r6, #1
 80141f0:	4f73      	ldr	r7, [pc, #460]	; (80143c0 <_strtod_l+0xc2c>)
 80141f2:	4276      	negs	r6, r6
 80141f4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80141f6:	9804      	ldr	r0, [sp, #16]
 80141f8:	f002 ff56 	bl	80170a8 <_Bfree>
 80141fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141fe:	9804      	ldr	r0, [sp, #16]
 8014200:	f002 ff52 	bl	80170a8 <_Bfree>
 8014204:	9905      	ldr	r1, [sp, #20]
 8014206:	9804      	ldr	r0, [sp, #16]
 8014208:	f002 ff4e 	bl	80170a8 <_Bfree>
 801420c:	0021      	movs	r1, r4
 801420e:	9804      	ldr	r0, [sp, #16]
 8014210:	f002 ff4a 	bl	80170a8 <_Bfree>
 8014214:	e5f4      	b.n	8013e00 <_strtod_l+0x66c>
 8014216:	2e00      	cmp	r6, #0
 8014218:	d11e      	bne.n	8014258 <_strtod_l+0xac4>
 801421a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801421c:	031b      	lsls	r3, r3, #12
 801421e:	d121      	bne.n	8014264 <_strtod_l+0xad0>
 8014220:	9808      	ldr	r0, [sp, #32]
 8014222:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014224:	2200      	movs	r2, #0
 8014226:	4b61      	ldr	r3, [pc, #388]	; (80143ac <_strtod_l+0xc18>)
 8014228:	f7ec f91e 	bl	8000468 <__aeabi_dcmplt>
 801422c:	2800      	cmp	r0, #0
 801422e:	d11f      	bne.n	8014270 <_strtod_l+0xadc>
 8014230:	9808      	ldr	r0, [sp, #32]
 8014232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014234:	2200      	movs	r2, #0
 8014236:	4b63      	ldr	r3, [pc, #396]	; (80143c4 <_strtod_l+0xc30>)
 8014238:	f7ed fdfc 	bl	8001e34 <__aeabi_dmul>
 801423c:	0005      	movs	r5, r0
 801423e:	9108      	str	r1, [sp, #32]
 8014240:	2280      	movs	r2, #128	; 0x80
 8014242:	0612      	lsls	r2, r2, #24
 8014244:	4694      	mov	ip, r2
 8014246:	9b08      	ldr	r3, [sp, #32]
 8014248:	951e      	str	r5, [sp, #120]	; 0x78
 801424a:	4463      	add	r3, ip
 801424c:	931f      	str	r3, [sp, #124]	; 0x7c
 801424e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014250:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014252:	9210      	str	r2, [sp, #64]	; 0x40
 8014254:	9311      	str	r3, [sp, #68]	; 0x44
 8014256:	e798      	b.n	801418a <_strtod_l+0x9f6>
 8014258:	2e01      	cmp	r6, #1
 801425a:	d103      	bne.n	8014264 <_strtod_l+0xad0>
 801425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801425e:	2b00      	cmp	r3, #0
 8014260:	d100      	bne.n	8014264 <_strtod_l+0xad0>
 8014262:	e562      	b.n	8013d2a <_strtod_l+0x596>
 8014264:	2200      	movs	r2, #0
 8014266:	4b58      	ldr	r3, [pc, #352]	; (80143c8 <_strtod_l+0xc34>)
 8014268:	2500      	movs	r5, #0
 801426a:	9210      	str	r2, [sp, #64]	; 0x40
 801426c:	9311      	str	r3, [sp, #68]	; 0x44
 801426e:	e78a      	b.n	8014186 <_strtod_l+0x9f2>
 8014270:	4b54      	ldr	r3, [pc, #336]	; (80143c4 <_strtod_l+0xc30>)
 8014272:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014274:	9308      	str	r3, [sp, #32]
 8014276:	e7e3      	b.n	8014240 <_strtod_l+0xaac>
 8014278:	4b52      	ldr	r3, [pc, #328]	; (80143c4 <_strtod_l+0xc30>)
 801427a:	9808      	ldr	r0, [sp, #32]
 801427c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801427e:	2200      	movs	r2, #0
 8014280:	f7ed fdd8 	bl	8001e34 <__aeabi_dmul>
 8014284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014286:	0005      	movs	r5, r0
 8014288:	9108      	str	r1, [sp, #32]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d107      	bne.n	801429e <_strtod_l+0xb0a>
 801428e:	2380      	movs	r3, #128	; 0x80
 8014290:	061b      	lsls	r3, r3, #24
 8014292:	18cb      	adds	r3, r1, r3
 8014294:	9016      	str	r0, [sp, #88]	; 0x58
 8014296:	9317      	str	r3, [sp, #92]	; 0x5c
 8014298:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801429a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801429c:	e7d9      	b.n	8014252 <_strtod_l+0xabe>
 801429e:	0002      	movs	r2, r0
 80142a0:	9b08      	ldr	r3, [sp, #32]
 80142a2:	9216      	str	r2, [sp, #88]	; 0x58
 80142a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80142a6:	e7f7      	b.n	8014298 <_strtod_l+0xb04>
 80142a8:	23d4      	movs	r3, #212	; 0xd4
 80142aa:	049b      	lsls	r3, r3, #18
 80142ac:	18cf      	adds	r7, r1, r3
 80142ae:	9b06      	ldr	r3, [sp, #24]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d19f      	bne.n	80141f4 <_strtod_l+0xa60>
 80142b4:	4b3e      	ldr	r3, [pc, #248]	; (80143b0 <_strtod_l+0xc1c>)
 80142b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80142b8:	970c      	str	r7, [sp, #48]	; 0x30
 80142ba:	403b      	ands	r3, r7
 80142bc:	429a      	cmp	r2, r3
 80142be:	d199      	bne.n	80141f4 <_strtod_l+0xa60>
 80142c0:	9908      	ldr	r1, [sp, #32]
 80142c2:	0028      	movs	r0, r5
 80142c4:	f7ee fb8c 	bl	80029e0 <__aeabi_d2iz>
 80142c8:	f7ee fbc0 	bl	8002a4c <__aeabi_i2d>
 80142cc:	000b      	movs	r3, r1
 80142ce:	0002      	movs	r2, r0
 80142d0:	9908      	ldr	r1, [sp, #32]
 80142d2:	0028      	movs	r0, r5
 80142d4:	f7ee f820 	bl	8002318 <__aeabi_dsub>
 80142d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142da:	9008      	str	r0, [sp, #32]
 80142dc:	9109      	str	r1, [sp, #36]	; 0x24
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d104      	bne.n	80142ec <_strtod_l+0xb58>
 80142e2:	2e00      	cmp	r6, #0
 80142e4:	d102      	bne.n	80142ec <_strtod_l+0xb58>
 80142e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e8:	031b      	lsls	r3, r3, #12
 80142ea:	d058      	beq.n	801439e <_strtod_l+0xc0a>
 80142ec:	9808      	ldr	r0, [sp, #32]
 80142ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142f0:	4a36      	ldr	r2, [pc, #216]	; (80143cc <_strtod_l+0xc38>)
 80142f2:	4b37      	ldr	r3, [pc, #220]	; (80143d0 <_strtod_l+0xc3c>)
 80142f4:	f7ec f8b8 	bl	8000468 <__aeabi_dcmplt>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	d000      	beq.n	80142fe <_strtod_l+0xb6a>
 80142fc:	e489      	b.n	8013c12 <_strtod_l+0x47e>
 80142fe:	9808      	ldr	r0, [sp, #32]
 8014300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014302:	4a34      	ldr	r2, [pc, #208]	; (80143d4 <_strtod_l+0xc40>)
 8014304:	4b2f      	ldr	r3, [pc, #188]	; (80143c4 <_strtod_l+0xc30>)
 8014306:	f7ec f8c3 	bl	8000490 <__aeabi_dcmpgt>
 801430a:	2800      	cmp	r0, #0
 801430c:	d100      	bne.n	8014310 <_strtod_l+0xb7c>
 801430e:	e771      	b.n	80141f4 <_strtod_l+0xa60>
 8014310:	e47f      	b.n	8013c12 <_strtod_l+0x47e>
 8014312:	9b06      	ldr	r3, [sp, #24]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d02a      	beq.n	801436e <_strtod_l+0xbda>
 8014318:	23d4      	movs	r3, #212	; 0xd4
 801431a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801431c:	04db      	lsls	r3, r3, #19
 801431e:	429a      	cmp	r2, r3
 8014320:	d825      	bhi.n	801436e <_strtod_l+0xbda>
 8014322:	4a2d      	ldr	r2, [pc, #180]	; (80143d8 <_strtod_l+0xc44>)
 8014324:	4b2d      	ldr	r3, [pc, #180]	; (80143dc <_strtod_l+0xc48>)
 8014326:	0028      	movs	r0, r5
 8014328:	9908      	ldr	r1, [sp, #32]
 801432a:	f7ec f8a7 	bl	800047c <__aeabi_dcmple>
 801432e:	2800      	cmp	r0, #0
 8014330:	d016      	beq.n	8014360 <_strtod_l+0xbcc>
 8014332:	0028      	movs	r0, r5
 8014334:	9908      	ldr	r1, [sp, #32]
 8014336:	f7ec f95b 	bl	80005f0 <__aeabi_d2uiz>
 801433a:	2800      	cmp	r0, #0
 801433c:	d100      	bne.n	8014340 <_strtod_l+0xbac>
 801433e:	3001      	adds	r0, #1
 8014340:	f7ee fbbe 	bl	8002ac0 <__aeabi_ui2d>
 8014344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014346:	0005      	movs	r5, r0
 8014348:	9108      	str	r1, [sp, #32]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d122      	bne.n	8014394 <_strtod_l+0xc00>
 801434e:	2380      	movs	r3, #128	; 0x80
 8014350:	061b      	lsls	r3, r3, #24
 8014352:	18cb      	adds	r3, r1, r3
 8014354:	9018      	str	r0, [sp, #96]	; 0x60
 8014356:	9319      	str	r3, [sp, #100]	; 0x64
 8014358:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801435a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801435c:	9210      	str	r2, [sp, #64]	; 0x40
 801435e:	9311      	str	r3, [sp, #68]	; 0x44
 8014360:	22d6      	movs	r2, #214	; 0xd6
 8014362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014364:	04d2      	lsls	r2, r2, #19
 8014366:	189b      	adds	r3, r3, r2
 8014368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801436a:	1a9b      	subs	r3, r3, r2
 801436c:	9311      	str	r3, [sp, #68]	; 0x44
 801436e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014372:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014374:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014376:	f003 f911 	bl	801759c <__ulp>
 801437a:	0002      	movs	r2, r0
 801437c:	000b      	movs	r3, r1
 801437e:	0030      	movs	r0, r6
 8014380:	0039      	movs	r1, r7
 8014382:	f7ed fd57 	bl	8001e34 <__aeabi_dmul>
 8014386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801438a:	f7ec fe2d 	bl	8000fe8 <__aeabi_dadd>
 801438e:	0006      	movs	r6, r0
 8014390:	000f      	movs	r7, r1
 8014392:	e78c      	b.n	80142ae <_strtod_l+0xb1a>
 8014394:	0002      	movs	r2, r0
 8014396:	9b08      	ldr	r3, [sp, #32]
 8014398:	9218      	str	r2, [sp, #96]	; 0x60
 801439a:	9319      	str	r3, [sp, #100]	; 0x64
 801439c:	e7dc      	b.n	8014358 <_strtod_l+0xbc4>
 801439e:	4a0b      	ldr	r2, [pc, #44]	; (80143cc <_strtod_l+0xc38>)
 80143a0:	4b0f      	ldr	r3, [pc, #60]	; (80143e0 <_strtod_l+0xc4c>)
 80143a2:	9808      	ldr	r0, [sp, #32]
 80143a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80143a6:	f7ec f85f 	bl	8000468 <__aeabi_dcmplt>
 80143aa:	e7ae      	b.n	801430a <_strtod_l+0xb76>
 80143ac:	3ff00000 	.word	0x3ff00000
 80143b0:	7ff00000 	.word	0x7ff00000
 80143b4:	7fe00000 	.word	0x7fe00000
 80143b8:	fcb00000 	.word	0xfcb00000
 80143bc:	7c9fffff 	.word	0x7c9fffff
 80143c0:	7fefffff 	.word	0x7fefffff
 80143c4:	3fe00000 	.word	0x3fe00000
 80143c8:	bff00000 	.word	0xbff00000
 80143cc:	94a03595 	.word	0x94a03595
 80143d0:	3fdfffff 	.word	0x3fdfffff
 80143d4:	35afe535 	.word	0x35afe535
 80143d8:	ffc00000 	.word	0xffc00000
 80143dc:	41dfffff 	.word	0x41dfffff
 80143e0:	3fcfffff 	.word	0x3fcfffff

080143e4 <strtod>:
 80143e4:	4b06      	ldr	r3, [pc, #24]	; (8014400 <strtod+0x1c>)
 80143e6:	b510      	push	{r4, lr}
 80143e8:	0004      	movs	r4, r0
 80143ea:	6818      	ldr	r0, [r3, #0]
 80143ec:	000a      	movs	r2, r1
 80143ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d100      	bne.n	80143f6 <strtod+0x12>
 80143f4:	4b03      	ldr	r3, [pc, #12]	; (8014404 <strtod+0x20>)
 80143f6:	0021      	movs	r1, r4
 80143f8:	f7ff f9cc 	bl	8013794 <_strtod_l>
 80143fc:	bd10      	pop	{r4, pc}
 80143fe:	46c0      	nop			; (mov r8, r8)
 8014400:	200000a8 	.word	0x200000a8
 8014404:	200004d8 	.word	0x200004d8

08014408 <strtok>:
 8014408:	4b03      	ldr	r3, [pc, #12]	; (8014418 <strtok+0x10>)
 801440a:	b510      	push	{r4, lr}
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	2301      	movs	r3, #1
 8014410:	325c      	adds	r2, #92	; 0x5c
 8014412:	f000 f803 	bl	801441c <__strtok_r>
 8014416:	bd10      	pop	{r4, pc}
 8014418:	200000a8 	.word	0x200000a8

0801441c <__strtok_r>:
 801441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801441e:	2800      	cmp	r0, #0
 8014420:	d104      	bne.n	801442c <__strtok_r+0x10>
 8014422:	6810      	ldr	r0, [r2, #0]
 8014424:	2800      	cmp	r0, #0
 8014426:	d101      	bne.n	801442c <__strtok_r+0x10>
 8014428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801442a:	0020      	movs	r0, r4
 801442c:	000e      	movs	r6, r1
 801442e:	7805      	ldrb	r5, [r0, #0]
 8014430:	1c44      	adds	r4, r0, #1
 8014432:	7837      	ldrb	r7, [r6, #0]
 8014434:	2f00      	cmp	r7, #0
 8014436:	d104      	bne.n	8014442 <__strtok_r+0x26>
 8014438:	2d00      	cmp	r5, #0
 801443a:	d110      	bne.n	801445e <__strtok_r+0x42>
 801443c:	6015      	str	r5, [r2, #0]
 801443e:	0028      	movs	r0, r5
 8014440:	e7f2      	b.n	8014428 <__strtok_r+0xc>
 8014442:	3601      	adds	r6, #1
 8014444:	42bd      	cmp	r5, r7
 8014446:	d1f4      	bne.n	8014432 <__strtok_r+0x16>
 8014448:	2b00      	cmp	r3, #0
 801444a:	d1ee      	bne.n	801442a <__strtok_r+0xe>
 801444c:	6014      	str	r4, [r2, #0]
 801444e:	7003      	strb	r3, [r0, #0]
 8014450:	e7ea      	b.n	8014428 <__strtok_r+0xc>
 8014452:	0033      	movs	r3, r6
 8014454:	e00d      	b.n	8014472 <__strtok_r+0x56>
 8014456:	3501      	adds	r5, #1
 8014458:	2f00      	cmp	r7, #0
 801445a:	d103      	bne.n	8014464 <__strtok_r+0x48>
 801445c:	001c      	movs	r4, r3
 801445e:	000d      	movs	r5, r1
 8014460:	7826      	ldrb	r6, [r4, #0]
 8014462:	1c63      	adds	r3, r4, #1
 8014464:	782f      	ldrb	r7, [r5, #0]
 8014466:	42be      	cmp	r6, r7
 8014468:	d1f5      	bne.n	8014456 <__strtok_r+0x3a>
 801446a:	2e00      	cmp	r6, #0
 801446c:	d0f1      	beq.n	8014452 <__strtok_r+0x36>
 801446e:	2100      	movs	r1, #0
 8014470:	7021      	strb	r1, [r4, #0]
 8014472:	6013      	str	r3, [r2, #0]
 8014474:	e7d8      	b.n	8014428 <__strtok_r+0xc>
	...

08014478 <_strtol_l.isra.0>:
 8014478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801447a:	001f      	movs	r7, r3
 801447c:	000e      	movs	r6, r1
 801447e:	b087      	sub	sp, #28
 8014480:	9005      	str	r0, [sp, #20]
 8014482:	9101      	str	r1, [sp, #4]
 8014484:	9202      	str	r2, [sp, #8]
 8014486:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014488:	7834      	ldrb	r4, [r6, #0]
 801448a:	f7fe fc9f 	bl	8012dcc <__locale_ctype_ptr_l>
 801448e:	2208      	movs	r2, #8
 8014490:	1900      	adds	r0, r0, r4
 8014492:	7843      	ldrb	r3, [r0, #1]
 8014494:	1c75      	adds	r5, r6, #1
 8014496:	4013      	ands	r3, r2
 8014498:	d136      	bne.n	8014508 <_strtol_l.isra.0+0x90>
 801449a:	2c2d      	cmp	r4, #45	; 0x2d
 801449c:	d136      	bne.n	801450c <_strtol_l.isra.0+0x94>
 801449e:	1cb5      	adds	r5, r6, #2
 80144a0:	7874      	ldrb	r4, [r6, #1]
 80144a2:	2601      	movs	r6, #1
 80144a4:	2f00      	cmp	r7, #0
 80144a6:	d062      	beq.n	801456e <_strtol_l.isra.0+0xf6>
 80144a8:	2f10      	cmp	r7, #16
 80144aa:	d109      	bne.n	80144c0 <_strtol_l.isra.0+0x48>
 80144ac:	2c30      	cmp	r4, #48	; 0x30
 80144ae:	d107      	bne.n	80144c0 <_strtol_l.isra.0+0x48>
 80144b0:	2220      	movs	r2, #32
 80144b2:	782b      	ldrb	r3, [r5, #0]
 80144b4:	4393      	bics	r3, r2
 80144b6:	2b58      	cmp	r3, #88	; 0x58
 80144b8:	d154      	bne.n	8014564 <_strtol_l.isra.0+0xec>
 80144ba:	2710      	movs	r7, #16
 80144bc:	786c      	ldrb	r4, [r5, #1]
 80144be:	3502      	adds	r5, #2
 80144c0:	4b2d      	ldr	r3, [pc, #180]	; (8014578 <_strtol_l.isra.0+0x100>)
 80144c2:	0039      	movs	r1, r7
 80144c4:	18f3      	adds	r3, r6, r3
 80144c6:	0018      	movs	r0, r3
 80144c8:	9303      	str	r3, [sp, #12]
 80144ca:	f7eb fec7 	bl	800025c <__aeabi_uidivmod>
 80144ce:	9104      	str	r1, [sp, #16]
 80144d0:	2101      	movs	r1, #1
 80144d2:	2300      	movs	r3, #0
 80144d4:	4249      	negs	r1, r1
 80144d6:	0002      	movs	r2, r0
 80144d8:	468c      	mov	ip, r1
 80144da:	0018      	movs	r0, r3
 80144dc:	0021      	movs	r1, r4
 80144de:	3930      	subs	r1, #48	; 0x30
 80144e0:	2909      	cmp	r1, #9
 80144e2:	d81a      	bhi.n	801451a <_strtol_l.isra.0+0xa2>
 80144e4:	000c      	movs	r4, r1
 80144e6:	42a7      	cmp	r7, r4
 80144e8:	dd23      	ble.n	8014532 <_strtol_l.isra.0+0xba>
 80144ea:	1c59      	adds	r1, r3, #1
 80144ec:	d009      	beq.n	8014502 <_strtol_l.isra.0+0x8a>
 80144ee:	4663      	mov	r3, ip
 80144f0:	4282      	cmp	r2, r0
 80144f2:	d306      	bcc.n	8014502 <_strtol_l.isra.0+0x8a>
 80144f4:	d102      	bne.n	80144fc <_strtol_l.isra.0+0x84>
 80144f6:	9904      	ldr	r1, [sp, #16]
 80144f8:	42a1      	cmp	r1, r4
 80144fa:	db02      	blt.n	8014502 <_strtol_l.isra.0+0x8a>
 80144fc:	2301      	movs	r3, #1
 80144fe:	4378      	muls	r0, r7
 8014500:	1820      	adds	r0, r4, r0
 8014502:	782c      	ldrb	r4, [r5, #0]
 8014504:	3501      	adds	r5, #1
 8014506:	e7e9      	b.n	80144dc <_strtol_l.isra.0+0x64>
 8014508:	002e      	movs	r6, r5
 801450a:	e7bc      	b.n	8014486 <_strtol_l.isra.0+0xe>
 801450c:	2c2b      	cmp	r4, #43	; 0x2b
 801450e:	d001      	beq.n	8014514 <_strtol_l.isra.0+0x9c>
 8014510:	001e      	movs	r6, r3
 8014512:	e7c7      	b.n	80144a4 <_strtol_l.isra.0+0x2c>
 8014514:	1cb5      	adds	r5, r6, #2
 8014516:	7874      	ldrb	r4, [r6, #1]
 8014518:	e7fa      	b.n	8014510 <_strtol_l.isra.0+0x98>
 801451a:	0021      	movs	r1, r4
 801451c:	3941      	subs	r1, #65	; 0x41
 801451e:	2919      	cmp	r1, #25
 8014520:	d801      	bhi.n	8014526 <_strtol_l.isra.0+0xae>
 8014522:	3c37      	subs	r4, #55	; 0x37
 8014524:	e7df      	b.n	80144e6 <_strtol_l.isra.0+0x6e>
 8014526:	0021      	movs	r1, r4
 8014528:	3961      	subs	r1, #97	; 0x61
 801452a:	2919      	cmp	r1, #25
 801452c:	d801      	bhi.n	8014532 <_strtol_l.isra.0+0xba>
 801452e:	3c57      	subs	r4, #87	; 0x57
 8014530:	e7d9      	b.n	80144e6 <_strtol_l.isra.0+0x6e>
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	d108      	bne.n	8014548 <_strtol_l.isra.0+0xd0>
 8014536:	9a05      	ldr	r2, [sp, #20]
 8014538:	3323      	adds	r3, #35	; 0x23
 801453a:	6013      	str	r3, [r2, #0]
 801453c:	9b02      	ldr	r3, [sp, #8]
 801453e:	9803      	ldr	r0, [sp, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d109      	bne.n	8014558 <_strtol_l.isra.0+0xe0>
 8014544:	b007      	add	sp, #28
 8014546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014548:	2e00      	cmp	r6, #0
 801454a:	d000      	beq.n	801454e <_strtol_l.isra.0+0xd6>
 801454c:	4240      	negs	r0, r0
 801454e:	9a02      	ldr	r2, [sp, #8]
 8014550:	2a00      	cmp	r2, #0
 8014552:	d0f7      	beq.n	8014544 <_strtol_l.isra.0+0xcc>
 8014554:	2b00      	cmp	r3, #0
 8014556:	d001      	beq.n	801455c <_strtol_l.isra.0+0xe4>
 8014558:	1e6b      	subs	r3, r5, #1
 801455a:	9301      	str	r3, [sp, #4]
 801455c:	9b02      	ldr	r3, [sp, #8]
 801455e:	9a01      	ldr	r2, [sp, #4]
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	e7ef      	b.n	8014544 <_strtol_l.isra.0+0xcc>
 8014564:	2430      	movs	r4, #48	; 0x30
 8014566:	2f00      	cmp	r7, #0
 8014568:	d1aa      	bne.n	80144c0 <_strtol_l.isra.0+0x48>
 801456a:	2708      	movs	r7, #8
 801456c:	e7a8      	b.n	80144c0 <_strtol_l.isra.0+0x48>
 801456e:	2c30      	cmp	r4, #48	; 0x30
 8014570:	d09e      	beq.n	80144b0 <_strtol_l.isra.0+0x38>
 8014572:	270a      	movs	r7, #10
 8014574:	e7a4      	b.n	80144c0 <_strtol_l.isra.0+0x48>
 8014576:	46c0      	nop			; (mov r8, r8)
 8014578:	7fffffff 	.word	0x7fffffff

0801457c <strtol>:
 801457c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801457e:	0013      	movs	r3, r2
 8014580:	4a06      	ldr	r2, [pc, #24]	; (801459c <strtol+0x20>)
 8014582:	0005      	movs	r5, r0
 8014584:	6810      	ldr	r0, [r2, #0]
 8014586:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014588:	2c00      	cmp	r4, #0
 801458a:	d100      	bne.n	801458e <strtol+0x12>
 801458c:	4c04      	ldr	r4, [pc, #16]	; (80145a0 <strtol+0x24>)
 801458e:	000a      	movs	r2, r1
 8014590:	9400      	str	r4, [sp, #0]
 8014592:	0029      	movs	r1, r5
 8014594:	f7ff ff70 	bl	8014478 <_strtol_l.isra.0>
 8014598:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801459a:	46c0      	nop			; (mov r8, r8)
 801459c:	200000a8 	.word	0x200000a8
 80145a0:	200004d8 	.word	0x200004d8

080145a4 <_svfprintf_r>:
 80145a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145a6:	b0d9      	sub	sp, #356	; 0x164
 80145a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80145aa:	9209      	str	r2, [sp, #36]	; 0x24
 80145ac:	001c      	movs	r4, r3
 80145ae:	900a      	str	r0, [sp, #40]	; 0x28
 80145b0:	f002 fd26 	bl	8017000 <_localeconv_r>
 80145b4:	6803      	ldr	r3, [r0, #0]
 80145b6:	0018      	movs	r0, r3
 80145b8:	931c      	str	r3, [sp, #112]	; 0x70
 80145ba:	f7eb fdad 	bl	8000118 <strlen>
 80145be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145c0:	9014      	str	r0, [sp, #80]	; 0x50
 80145c2:	899b      	ldrh	r3, [r3, #12]
 80145c4:	061b      	lsls	r3, r3, #24
 80145c6:	d518      	bpl.n	80145fa <_svfprintf_r+0x56>
 80145c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145ca:	691b      	ldr	r3, [r3, #16]
 80145cc:	9308      	str	r3, [sp, #32]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d113      	bne.n	80145fa <_svfprintf_r+0x56>
 80145d2:	2140      	movs	r1, #64	; 0x40
 80145d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145d6:	f7fe fc1f 	bl	8012e18 <_malloc_r>
 80145da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145dc:	6018      	str	r0, [r3, #0]
 80145de:	6118      	str	r0, [r3, #16]
 80145e0:	2800      	cmp	r0, #0
 80145e2:	d107      	bne.n	80145f4 <_svfprintf_r+0x50>
 80145e4:	230c      	movs	r3, #12
 80145e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145e8:	6013      	str	r3, [r2, #0]
 80145ea:	3b0d      	subs	r3, #13
 80145ec:	9315      	str	r3, [sp, #84]	; 0x54
 80145ee:	9815      	ldr	r0, [sp, #84]	; 0x54
 80145f0:	b059      	add	sp, #356	; 0x164
 80145f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145f4:	2340      	movs	r3, #64	; 0x40
 80145f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145f8:	6153      	str	r3, [r2, #20]
 80145fa:	2600      	movs	r6, #0
 80145fc:	af2f      	add	r7, sp, #188	; 0xbc
 80145fe:	972c      	str	r7, [sp, #176]	; 0xb0
 8014600:	962e      	str	r6, [sp, #184]	; 0xb8
 8014602:	962d      	str	r6, [sp, #180]	; 0xb4
 8014604:	960d      	str	r6, [sp, #52]	; 0x34
 8014606:	961a      	str	r6, [sp, #104]	; 0x68
 8014608:	9619      	str	r6, [sp, #100]	; 0x64
 801460a:	961e      	str	r6, [sp, #120]	; 0x78
 801460c:	961d      	str	r6, [sp, #116]	; 0x74
 801460e:	9613      	str	r6, [sp, #76]	; 0x4c
 8014610:	961b      	str	r6, [sp, #108]	; 0x6c
 8014612:	961f      	str	r6, [sp, #124]	; 0x7c
 8014614:	9615      	str	r6, [sp, #84]	; 0x54
 8014616:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014618:	782b      	ldrb	r3, [r5, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d002      	beq.n	8014624 <_svfprintf_r+0x80>
 801461e:	2b25      	cmp	r3, #37	; 0x25
 8014620:	d000      	beq.n	8014624 <_svfprintf_r+0x80>
 8014622:	e095      	b.n	8014750 <_svfprintf_r+0x1ac>
 8014624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014626:	1aee      	subs	r6, r5, r3
 8014628:	d017      	beq.n	801465a <_svfprintf_r+0xb6>
 801462a:	603b      	str	r3, [r7, #0]
 801462c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801462e:	607e      	str	r6, [r7, #4]
 8014630:	199b      	adds	r3, r3, r6
 8014632:	932e      	str	r3, [sp, #184]	; 0xb8
 8014634:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014636:	3708      	adds	r7, #8
 8014638:	9308      	str	r3, [sp, #32]
 801463a:	3301      	adds	r3, #1
 801463c:	932d      	str	r3, [sp, #180]	; 0xb4
 801463e:	2b07      	cmp	r3, #7
 8014640:	dd08      	ble.n	8014654 <_svfprintf_r+0xb0>
 8014642:	aa2c      	add	r2, sp, #176	; 0xb0
 8014644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014646:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014648:	f003 f900 	bl	801784c <__ssprint_r>
 801464c:	2800      	cmp	r0, #0
 801464e:	d000      	beq.n	8014652 <_svfprintf_r+0xae>
 8014650:	e2d9      	b.n	8014c06 <_svfprintf_r+0x662>
 8014652:	af2f      	add	r7, sp, #188	; 0xbc
 8014654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014656:	199b      	adds	r3, r3, r6
 8014658:	9315      	str	r3, [sp, #84]	; 0x54
 801465a:	782b      	ldrb	r3, [r5, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <_svfprintf_r+0xc0>
 8014660:	f001 f9e5 	bl	8015a2e <_svfprintf_r+0x148a>
 8014664:	1c6b      	adds	r3, r5, #1
 8014666:	221b      	movs	r2, #27
 8014668:	9311      	str	r3, [sp, #68]	; 0x44
 801466a:	2300      	movs	r3, #0
 801466c:	a91e      	add	r1, sp, #120	; 0x78
 801466e:	1852      	adds	r2, r2, r1
 8014670:	7013      	strb	r3, [r2, #0]
 8014672:	2201      	movs	r2, #1
 8014674:	001e      	movs	r6, r3
 8014676:	2520      	movs	r5, #32
 8014678:	4252      	negs	r2, r2
 801467a:	9208      	str	r2, [sp, #32]
 801467c:	9316      	str	r3, [sp, #88]	; 0x58
 801467e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	930e      	str	r3, [sp, #56]	; 0x38
 8014684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014686:	3301      	adds	r3, #1
 8014688:	9311      	str	r3, [sp, #68]	; 0x44
 801468a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801468c:	3820      	subs	r0, #32
 801468e:	285a      	cmp	r0, #90	; 0x5a
 8014690:	d901      	bls.n	8014696 <_svfprintf_r+0xf2>
 8014692:	f000 fe3d 	bl	8015310 <_svfprintf_r+0xd6c>
 8014696:	f7eb fd51 	bl	800013c <__gnu_thumb1_case_shi>
 801469a:	009e      	.short	0x009e
 801469c:	063b063b 	.word	0x063b063b
 80146a0:	063b00a7 	.word	0x063b00a7
 80146a4:	063b063b 	.word	0x063b063b
 80146a8:	063b0080 	.word	0x063b0080
 80146ac:	00a9063b 	.word	0x00a9063b
 80146b0:	063b00b3 	.word	0x063b00b3
 80146b4:	00b900b1 	.word	0x00b900b1
 80146b8:	00dd063b 	.word	0x00dd063b
 80146bc:	00df00df 	.word	0x00df00df
 80146c0:	00df00df 	.word	0x00df00df
 80146c4:	00df00df 	.word	0x00df00df
 80146c8:	00df00df 	.word	0x00df00df
 80146cc:	063b00df 	.word	0x063b00df
 80146d0:	063b063b 	.word	0x063b063b
 80146d4:	063b063b 	.word	0x063b063b
 80146d8:	063b063b 	.word	0x063b063b
 80146dc:	063b0240 	.word	0x063b0240
 80146e0:	01fd010a 	.word	0x01fd010a
 80146e4:	02400240 	.word	0x02400240
 80146e8:	063b0240 	.word	0x063b0240
 80146ec:	063b063b 	.word	0x063b063b
 80146f0:	00f1063b 	.word	0x00f1063b
 80146f4:	063b063b 	.word	0x063b063b
 80146f8:	063b04e2 	.word	0x063b04e2
 80146fc:	063b063b 	.word	0x063b063b
 8014700:	063b0537 	.word	0x063b0537
 8014704:	063b0557 	.word	0x063b0557
 8014708:	005d063b 	.word	0x005d063b
 801470c:	063b063b 	.word	0x063b063b
 8014710:	063b063b 	.word	0x063b063b
 8014714:	063b063b 	.word	0x063b063b
 8014718:	063b063b 	.word	0x063b063b
 801471c:	063b0240 	.word	0x063b0240
 8014720:	01ff010a 	.word	0x01ff010a
 8014724:	02400240 	.word	0x02400240
 8014728:	00f30240 	.word	0x00f30240
 801472c:	010601ff 	.word	0x010601ff
 8014730:	00ff063b 	.word	0x00ff063b
 8014734:	04c5063b 	.word	0x04c5063b
 8014738:	052704e4 	.word	0x052704e4
 801473c:	063b0106 	.word	0x063b0106
 8014740:	fff20537 	.word	0xfff20537
 8014744:	063b0559 	.word	0x063b0559
 8014748:	0582063b 	.word	0x0582063b
 801474c:	fff2063b 	.word	0xfff2063b
 8014750:	3501      	adds	r5, #1
 8014752:	e761      	b.n	8014618 <_svfprintf_r+0x74>
 8014754:	4bcb      	ldr	r3, [pc, #812]	; (8014a84 <_svfprintf_r+0x4e0>)
 8014756:	2220      	movs	r2, #32
 8014758:	931e      	str	r3, [sp, #120]	; 0x78
 801475a:	4032      	ands	r2, r6
 801475c:	d101      	bne.n	8014762 <_svfprintf_r+0x1be>
 801475e:	f000 fd21 	bl	80151a4 <_svfprintf_r+0xc00>
 8014762:	2307      	movs	r3, #7
 8014764:	3407      	adds	r4, #7
 8014766:	439c      	bics	r4, r3
 8014768:	0023      	movs	r3, r4
 801476a:	3308      	adds	r3, #8
 801476c:	9312      	str	r3, [sp, #72]	; 0x48
 801476e:	6823      	ldr	r3, [r4, #0]
 8014770:	6864      	ldr	r4, [r4, #4]
 8014772:	9306      	str	r3, [sp, #24]
 8014774:	9407      	str	r4, [sp, #28]
 8014776:	07f3      	lsls	r3, r6, #31
 8014778:	d50a      	bpl.n	8014790 <_svfprintf_r+0x1ec>
 801477a:	9b06      	ldr	r3, [sp, #24]
 801477c:	9a07      	ldr	r2, [sp, #28]
 801477e:	4313      	orrs	r3, r2
 8014780:	d006      	beq.n	8014790 <_svfprintf_r+0x1ec>
 8014782:	2230      	movs	r2, #48	; 0x30
 8014784:	ab25      	add	r3, sp, #148	; 0x94
 8014786:	701a      	strb	r2, [r3, #0]
 8014788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801478a:	705a      	strb	r2, [r3, #1]
 801478c:	2302      	movs	r3, #2
 801478e:	431e      	orrs	r6, r3
 8014790:	4bbd      	ldr	r3, [pc, #756]	; (8014a88 <_svfprintf_r+0x4e4>)
 8014792:	401e      	ands	r6, r3
 8014794:	2302      	movs	r3, #2
 8014796:	f000 fc74 	bl	8015082 <_svfprintf_r+0xade>
 801479a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801479c:	f002 fc30 	bl	8017000 <_localeconv_r>
 80147a0:	6843      	ldr	r3, [r0, #4]
 80147a2:	0018      	movs	r0, r3
 80147a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80147a6:	f7eb fcb7 	bl	8000118 <strlen>
 80147aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80147ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147ae:	f002 fc27 	bl	8017000 <_localeconv_r>
 80147b2:	6883      	ldr	r3, [r0, #8]
 80147b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80147b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d100      	bne.n	80147be <_svfprintf_r+0x21a>
 80147bc:	e75f      	b.n	801467e <_svfprintf_r+0xda>
 80147be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d100      	bne.n	80147c6 <_svfprintf_r+0x222>
 80147c4:	e75b      	b.n	801467e <_svfprintf_r+0xda>
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d100      	bne.n	80147ce <_svfprintf_r+0x22a>
 80147cc:	e757      	b.n	801467e <_svfprintf_r+0xda>
 80147ce:	2380      	movs	r3, #128	; 0x80
 80147d0:	00db      	lsls	r3, r3, #3
 80147d2:	431e      	orrs	r6, r3
 80147d4:	e753      	b.n	801467e <_svfprintf_r+0xda>
 80147d6:	231b      	movs	r3, #27
 80147d8:	aa1e      	add	r2, sp, #120	; 0x78
 80147da:	189b      	adds	r3, r3, r2
 80147dc:	781a      	ldrb	r2, [r3, #0]
 80147de:	2a00      	cmp	r2, #0
 80147e0:	d000      	beq.n	80147e4 <_svfprintf_r+0x240>
 80147e2:	e74c      	b.n	801467e <_svfprintf_r+0xda>
 80147e4:	701d      	strb	r5, [r3, #0]
 80147e6:	e74a      	b.n	801467e <_svfprintf_r+0xda>
 80147e8:	2301      	movs	r3, #1
 80147ea:	e7f2      	b.n	80147d2 <_svfprintf_r+0x22e>
 80147ec:	6823      	ldr	r3, [r4, #0]
 80147ee:	3404      	adds	r4, #4
 80147f0:	9316      	str	r3, [sp, #88]	; 0x58
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	db00      	blt.n	80147f8 <_svfprintf_r+0x254>
 80147f6:	e742      	b.n	801467e <_svfprintf_r+0xda>
 80147f8:	425b      	negs	r3, r3
 80147fa:	9316      	str	r3, [sp, #88]	; 0x58
 80147fc:	2304      	movs	r3, #4
 80147fe:	e7e8      	b.n	80147d2 <_svfprintf_r+0x22e>
 8014800:	231b      	movs	r3, #27
 8014802:	aa1e      	add	r2, sp, #120	; 0x78
 8014804:	189b      	adds	r3, r3, r2
 8014806:	222b      	movs	r2, #43	; 0x2b
 8014808:	701a      	strb	r2, [r3, #0]
 801480a:	e738      	b.n	801467e <_svfprintf_r+0xda>
 801480c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801480e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014810:	7812      	ldrb	r2, [r2, #0]
 8014812:	3301      	adds	r3, #1
 8014814:	920e      	str	r2, [sp, #56]	; 0x38
 8014816:	2a2a      	cmp	r2, #42	; 0x2a
 8014818:	d008      	beq.n	801482c <_svfprintf_r+0x288>
 801481a:	2200      	movs	r2, #0
 801481c:	9208      	str	r2, [sp, #32]
 801481e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014820:	001a      	movs	r2, r3
 8014822:	3930      	subs	r1, #48	; 0x30
 8014824:	2909      	cmp	r1, #9
 8014826:	d90c      	bls.n	8014842 <_svfprintf_r+0x29e>
 8014828:	9211      	str	r2, [sp, #68]	; 0x44
 801482a:	e72e      	b.n	801468a <_svfprintf_r+0xe6>
 801482c:	6821      	ldr	r1, [r4, #0]
 801482e:	1d22      	adds	r2, r4, #4
 8014830:	9108      	str	r1, [sp, #32]
 8014832:	2900      	cmp	r1, #0
 8014834:	da02      	bge.n	801483c <_svfprintf_r+0x298>
 8014836:	2101      	movs	r1, #1
 8014838:	4249      	negs	r1, r1
 801483a:	9108      	str	r1, [sp, #32]
 801483c:	0014      	movs	r4, r2
 801483e:	9311      	str	r3, [sp, #68]	; 0x44
 8014840:	e71d      	b.n	801467e <_svfprintf_r+0xda>
 8014842:	200a      	movs	r0, #10
 8014844:	9a08      	ldr	r2, [sp, #32]
 8014846:	4342      	muls	r2, r0
 8014848:	1852      	adds	r2, r2, r1
 801484a:	9208      	str	r2, [sp, #32]
 801484c:	781a      	ldrb	r2, [r3, #0]
 801484e:	3301      	adds	r3, #1
 8014850:	920e      	str	r2, [sp, #56]	; 0x38
 8014852:	e7e4      	b.n	801481e <_svfprintf_r+0x27a>
 8014854:	2380      	movs	r3, #128	; 0x80
 8014856:	e7bc      	b.n	80147d2 <_svfprintf_r+0x22e>
 8014858:	2300      	movs	r3, #0
 801485a:	9316      	str	r3, [sp, #88]	; 0x58
 801485c:	220a      	movs	r2, #10
 801485e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014860:	4353      	muls	r3, r2
 8014862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014864:	3a30      	subs	r2, #48	; 0x30
 8014866:	18d3      	adds	r3, r2, r3
 8014868:	9316      	str	r3, [sp, #88]	; 0x58
 801486a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801486c:	1c5a      	adds	r2, r3, #1
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	9211      	str	r2, [sp, #68]	; 0x44
 8014872:	930e      	str	r3, [sp, #56]	; 0x38
 8014874:	3b30      	subs	r3, #48	; 0x30
 8014876:	2b09      	cmp	r3, #9
 8014878:	d9f0      	bls.n	801485c <_svfprintf_r+0x2b8>
 801487a:	e7d5      	b.n	8014828 <_svfprintf_r+0x284>
 801487c:	2308      	movs	r3, #8
 801487e:	e7a8      	b.n	80147d2 <_svfprintf_r+0x22e>
 8014880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	2b68      	cmp	r3, #104	; 0x68
 8014886:	d105      	bne.n	8014894 <_svfprintf_r+0x2f0>
 8014888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801488a:	3301      	adds	r3, #1
 801488c:	9311      	str	r3, [sp, #68]	; 0x44
 801488e:	2380      	movs	r3, #128	; 0x80
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	e79e      	b.n	80147d2 <_svfprintf_r+0x22e>
 8014894:	2340      	movs	r3, #64	; 0x40
 8014896:	e79c      	b.n	80147d2 <_svfprintf_r+0x22e>
 8014898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	2b6c      	cmp	r3, #108	; 0x6c
 801489e:	d104      	bne.n	80148aa <_svfprintf_r+0x306>
 80148a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148a2:	3301      	adds	r3, #1
 80148a4:	9311      	str	r3, [sp, #68]	; 0x44
 80148a6:	432e      	orrs	r6, r5
 80148a8:	e6e9      	b.n	801467e <_svfprintf_r+0xda>
 80148aa:	2310      	movs	r3, #16
 80148ac:	e791      	b.n	80147d2 <_svfprintf_r+0x22e>
 80148ae:	1d23      	adds	r3, r4, #4
 80148b0:	6822      	ldr	r2, [r4, #0]
 80148b2:	9312      	str	r3, [sp, #72]	; 0x48
 80148b4:	ab3f      	add	r3, sp, #252	; 0xfc
 80148b6:	701a      	strb	r2, [r3, #0]
 80148b8:	221b      	movs	r2, #27
 80148ba:	2000      	movs	r0, #0
 80148bc:	a91e      	add	r1, sp, #120	; 0x78
 80148be:	1852      	adds	r2, r2, r1
 80148c0:	7010      	strb	r0, [r2, #0]
 80148c2:	2201      	movs	r2, #1
 80148c4:	0005      	movs	r5, r0
 80148c6:	900c      	str	r0, [sp, #48]	; 0x30
 80148c8:	9208      	str	r2, [sp, #32]
 80148ca:	9017      	str	r0, [sp, #92]	; 0x5c
 80148cc:	9010      	str	r0, [sp, #64]	; 0x40
 80148ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80148d0:	9309      	str	r3, [sp, #36]	; 0x24
 80148d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148d4:	9a08      	ldr	r2, [sp, #32]
 80148d6:	9318      	str	r3, [sp, #96]	; 0x60
 80148d8:	4293      	cmp	r3, r2
 80148da:	da00      	bge.n	80148de <_svfprintf_r+0x33a>
 80148dc:	9218      	str	r2, [sp, #96]	; 0x60
 80148de:	231b      	movs	r3, #27
 80148e0:	aa1e      	add	r2, sp, #120	; 0x78
 80148e2:	189b      	adds	r3, r3, r2
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	1e5a      	subs	r2, r3, #1
 80148e8:	4193      	sbcs	r3, r2
 80148ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80148ec:	18d3      	adds	r3, r2, r3
 80148ee:	9318      	str	r3, [sp, #96]	; 0x60
 80148f0:	2302      	movs	r3, #2
 80148f2:	4033      	ands	r3, r6
 80148f4:	9320      	str	r3, [sp, #128]	; 0x80
 80148f6:	d002      	beq.n	80148fe <_svfprintf_r+0x35a>
 80148f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80148fa:	3302      	adds	r3, #2
 80148fc:	9318      	str	r3, [sp, #96]	; 0x60
 80148fe:	2384      	movs	r3, #132	; 0x84
 8014900:	4033      	ands	r3, r6
 8014902:	9321      	str	r3, [sp, #132]	; 0x84
 8014904:	d121      	bne.n	801494a <_svfprintf_r+0x3a6>
 8014906:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014908:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801490a:	1a9c      	subs	r4, r3, r2
 801490c:	2c00      	cmp	r4, #0
 801490e:	dd1c      	ble.n	801494a <_svfprintf_r+0x3a6>
 8014910:	0039      	movs	r1, r7
 8014912:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014914:	485d      	ldr	r0, [pc, #372]	; (8014a8c <_svfprintf_r+0x4e8>)
 8014916:	9322      	str	r3, [sp, #136]	; 0x88
 8014918:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801491a:	3301      	adds	r3, #1
 801491c:	3108      	adds	r1, #8
 801491e:	6038      	str	r0, [r7, #0]
 8014920:	2c10      	cmp	r4, #16
 8014922:	dd01      	ble.n	8014928 <_svfprintf_r+0x384>
 8014924:	f000 fd08 	bl	8015338 <_svfprintf_r+0xd94>
 8014928:	607c      	str	r4, [r7, #4]
 801492a:	18a4      	adds	r4, r4, r2
 801492c:	942e      	str	r4, [sp, #184]	; 0xb8
 801492e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014930:	000f      	movs	r7, r1
 8014932:	2b07      	cmp	r3, #7
 8014934:	dd09      	ble.n	801494a <_svfprintf_r+0x3a6>
 8014936:	aa2c      	add	r2, sp, #176	; 0xb0
 8014938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801493a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801493c:	f002 ff86 	bl	801784c <__ssprint_r>
 8014940:	2800      	cmp	r0, #0
 8014942:	d001      	beq.n	8014948 <_svfprintf_r+0x3a4>
 8014944:	f001 f852 	bl	80159ec <_svfprintf_r+0x1448>
 8014948:	af2f      	add	r7, sp, #188	; 0xbc
 801494a:	231b      	movs	r3, #27
 801494c:	aa1e      	add	r2, sp, #120	; 0x78
 801494e:	189b      	adds	r3, r3, r2
 8014950:	781a      	ldrb	r2, [r3, #0]
 8014952:	2a00      	cmp	r2, #0
 8014954:	d017      	beq.n	8014986 <_svfprintf_r+0x3e2>
 8014956:	603b      	str	r3, [r7, #0]
 8014958:	2301      	movs	r3, #1
 801495a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801495c:	607b      	str	r3, [r7, #4]
 801495e:	0013      	movs	r3, r2
 8014960:	3301      	adds	r3, #1
 8014962:	932e      	str	r3, [sp, #184]	; 0xb8
 8014964:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014966:	3708      	adds	r7, #8
 8014968:	9322      	str	r3, [sp, #136]	; 0x88
 801496a:	3301      	adds	r3, #1
 801496c:	932d      	str	r3, [sp, #180]	; 0xb4
 801496e:	2b07      	cmp	r3, #7
 8014970:	dd09      	ble.n	8014986 <_svfprintf_r+0x3e2>
 8014972:	aa2c      	add	r2, sp, #176	; 0xb0
 8014974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014976:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014978:	f002 ff68 	bl	801784c <__ssprint_r>
 801497c:	2800      	cmp	r0, #0
 801497e:	d001      	beq.n	8014984 <_svfprintf_r+0x3e0>
 8014980:	f001 f834 	bl	80159ec <_svfprintf_r+0x1448>
 8014984:	af2f      	add	r7, sp, #188	; 0xbc
 8014986:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014988:	2b00      	cmp	r3, #0
 801498a:	d019      	beq.n	80149c0 <_svfprintf_r+0x41c>
 801498c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801498e:	9320      	str	r3, [sp, #128]	; 0x80
 8014990:	ab25      	add	r3, sp, #148	; 0x94
 8014992:	603b      	str	r3, [r7, #0]
 8014994:	2302      	movs	r3, #2
 8014996:	607b      	str	r3, [r7, #4]
 8014998:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801499a:	3708      	adds	r7, #8
 801499c:	3302      	adds	r3, #2
 801499e:	932e      	str	r3, [sp, #184]	; 0xb8
 80149a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149a2:	9320      	str	r3, [sp, #128]	; 0x80
 80149a4:	3301      	adds	r3, #1
 80149a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80149a8:	2b07      	cmp	r3, #7
 80149aa:	dd09      	ble.n	80149c0 <_svfprintf_r+0x41c>
 80149ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80149ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149b2:	f002 ff4b 	bl	801784c <__ssprint_r>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d001      	beq.n	80149be <_svfprintf_r+0x41a>
 80149ba:	f001 f817 	bl	80159ec <_svfprintf_r+0x1448>
 80149be:	af2f      	add	r7, sp, #188	; 0xbc
 80149c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149c2:	2b80      	cmp	r3, #128	; 0x80
 80149c4:	d121      	bne.n	8014a0a <_svfprintf_r+0x466>
 80149c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80149c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80149ca:	1a9c      	subs	r4, r3, r2
 80149cc:	2c00      	cmp	r4, #0
 80149ce:	dd1c      	ble.n	8014a0a <_svfprintf_r+0x466>
 80149d0:	0039      	movs	r1, r7
 80149d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149d4:	482e      	ldr	r0, [pc, #184]	; (8014a90 <_svfprintf_r+0x4ec>)
 80149d6:	9320      	str	r3, [sp, #128]	; 0x80
 80149d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80149da:	3301      	adds	r3, #1
 80149dc:	3108      	adds	r1, #8
 80149de:	6038      	str	r0, [r7, #0]
 80149e0:	2c10      	cmp	r4, #16
 80149e2:	dd01      	ble.n	80149e8 <_svfprintf_r+0x444>
 80149e4:	f000 fcbc 	bl	8015360 <_svfprintf_r+0xdbc>
 80149e8:	607c      	str	r4, [r7, #4]
 80149ea:	18a4      	adds	r4, r4, r2
 80149ec:	942e      	str	r4, [sp, #184]	; 0xb8
 80149ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80149f0:	000f      	movs	r7, r1
 80149f2:	2b07      	cmp	r3, #7
 80149f4:	dd09      	ble.n	8014a0a <_svfprintf_r+0x466>
 80149f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80149f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149fc:	f002 ff26 	bl	801784c <__ssprint_r>
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d001      	beq.n	8014a08 <_svfprintf_r+0x464>
 8014a04:	f000 fff2 	bl	80159ec <_svfprintf_r+0x1448>
 8014a08:	af2f      	add	r7, sp, #188	; 0xbc
 8014a0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a0c:	9a08      	ldr	r2, [sp, #32]
 8014a0e:	1a9c      	subs	r4, r3, r2
 8014a10:	2c00      	cmp	r4, #0
 8014a12:	dd1c      	ble.n	8014a4e <_svfprintf_r+0x4aa>
 8014a14:	0039      	movs	r1, r7
 8014a16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a18:	481d      	ldr	r0, [pc, #116]	; (8014a90 <_svfprintf_r+0x4ec>)
 8014a1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a1c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014a1e:	3301      	adds	r3, #1
 8014a20:	3108      	adds	r1, #8
 8014a22:	6038      	str	r0, [r7, #0]
 8014a24:	2c10      	cmp	r4, #16
 8014a26:	dd01      	ble.n	8014a2c <_svfprintf_r+0x488>
 8014a28:	f000 fcb4 	bl	8015394 <_svfprintf_r+0xdf0>
 8014a2c:	18a2      	adds	r2, r4, r2
 8014a2e:	607c      	str	r4, [r7, #4]
 8014a30:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a32:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a34:	000f      	movs	r7, r1
 8014a36:	2b07      	cmp	r3, #7
 8014a38:	dd09      	ble.n	8014a4e <_svfprintf_r+0x4aa>
 8014a3a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a40:	f002 ff04 	bl	801784c <__ssprint_r>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d001      	beq.n	8014a4c <_svfprintf_r+0x4a8>
 8014a48:	f000 ffd0 	bl	80159ec <_svfprintf_r+0x1448>
 8014a4c:	af2f      	add	r7, sp, #188	; 0xbc
 8014a4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014a50:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a52:	05f3      	lsls	r3, r6, #23
 8014a54:	d501      	bpl.n	8014a5a <_svfprintf_r+0x4b6>
 8014a56:	f000 fcb1 	bl	80153bc <_svfprintf_r+0xe18>
 8014a5a:	9a08      	ldr	r2, [sp, #32]
 8014a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a5e:	4694      	mov	ip, r2
 8014a60:	603b      	str	r3, [r7, #0]
 8014a62:	9b08      	ldr	r3, [sp, #32]
 8014a64:	607b      	str	r3, [r7, #4]
 8014a66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a68:	4463      	add	r3, ip
 8014a6a:	932e      	str	r3, [sp, #184]	; 0xb8
 8014a6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a6e:	9308      	str	r3, [sp, #32]
 8014a70:	3301      	adds	r3, #1
 8014a72:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a74:	2b07      	cmp	r3, #7
 8014a76:	dd01      	ble.n	8014a7c <_svfprintf_r+0x4d8>
 8014a78:	f000 fd94 	bl	80155a4 <_svfprintf_r+0x1000>
 8014a7c:	3708      	adds	r7, #8
 8014a7e:	f000 fce4 	bl	801544a <_svfprintf_r+0xea6>
 8014a82:	46c0      	nop			; (mov r8, r8)
 8014a84:	0801a9b1 	.word	0x0801a9b1
 8014a88:	fffffbff 	.word	0xfffffbff
 8014a8c:	0801a9c4 	.word	0x0801a9c4
 8014a90:	0801a9d4 	.word	0x0801a9d4
 8014a94:	2310      	movs	r3, #16
 8014a96:	431e      	orrs	r6, r3
 8014a98:	06b3      	lsls	r3, r6, #26
 8014a9a:	d52c      	bpl.n	8014af6 <_svfprintf_r+0x552>
 8014a9c:	2307      	movs	r3, #7
 8014a9e:	3407      	adds	r4, #7
 8014aa0:	439c      	bics	r4, r3
 8014aa2:	0023      	movs	r3, r4
 8014aa4:	3308      	adds	r3, #8
 8014aa6:	9312      	str	r3, [sp, #72]	; 0x48
 8014aa8:	6823      	ldr	r3, [r4, #0]
 8014aaa:	6864      	ldr	r4, [r4, #4]
 8014aac:	9306      	str	r3, [sp, #24]
 8014aae:	9407      	str	r4, [sp, #28]
 8014ab0:	9b07      	ldr	r3, [sp, #28]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	da0b      	bge.n	8014ace <_svfprintf_r+0x52a>
 8014ab6:	9906      	ldr	r1, [sp, #24]
 8014ab8:	9a07      	ldr	r2, [sp, #28]
 8014aba:	2400      	movs	r4, #0
 8014abc:	424b      	negs	r3, r1
 8014abe:	4194      	sbcs	r4, r2
 8014ac0:	9306      	str	r3, [sp, #24]
 8014ac2:	9407      	str	r4, [sp, #28]
 8014ac4:	231b      	movs	r3, #27
 8014ac6:	aa1e      	add	r2, sp, #120	; 0x78
 8014ac8:	189b      	adds	r3, r3, r2
 8014aca:	222d      	movs	r2, #45	; 0x2d
 8014acc:	701a      	strb	r2, [r3, #0]
 8014ace:	9b08      	ldr	r3, [sp, #32]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	d000      	beq.n	8014ad6 <_svfprintf_r+0x532>
 8014ad4:	e382      	b.n	80151dc <_svfprintf_r+0xc38>
 8014ad6:	9b07      	ldr	r3, [sp, #28]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d000      	beq.n	8014ade <_svfprintf_r+0x53a>
 8014adc:	e3b0      	b.n	8015240 <_svfprintf_r+0xc9c>
 8014ade:	9b06      	ldr	r3, [sp, #24]
 8014ae0:	2b09      	cmp	r3, #9
 8014ae2:	d900      	bls.n	8014ae6 <_svfprintf_r+0x542>
 8014ae4:	e3ac      	b.n	8015240 <_svfprintf_r+0xc9c>
 8014ae6:	23e7      	movs	r3, #231	; 0xe7
 8014ae8:	aa1e      	add	r2, sp, #120	; 0x78
 8014aea:	189b      	adds	r3, r3, r2
 8014aec:	9a06      	ldr	r2, [sp, #24]
 8014aee:	3230      	adds	r2, #48	; 0x30
 8014af0:	701a      	strb	r2, [r3, #0]
 8014af2:	9309      	str	r3, [sp, #36]	; 0x24
 8014af4:	e395      	b.n	8015222 <_svfprintf_r+0xc7e>
 8014af6:	1d23      	adds	r3, r4, #4
 8014af8:	9312      	str	r3, [sp, #72]	; 0x48
 8014afa:	06f3      	lsls	r3, r6, #27
 8014afc:	d504      	bpl.n	8014b08 <_svfprintf_r+0x564>
 8014afe:	6823      	ldr	r3, [r4, #0]
 8014b00:	9306      	str	r3, [sp, #24]
 8014b02:	17db      	asrs	r3, r3, #31
 8014b04:	9307      	str	r3, [sp, #28]
 8014b06:	e7d3      	b.n	8014ab0 <_svfprintf_r+0x50c>
 8014b08:	6823      	ldr	r3, [r4, #0]
 8014b0a:	0672      	lsls	r2, r6, #25
 8014b0c:	d501      	bpl.n	8014b12 <_svfprintf_r+0x56e>
 8014b0e:	b21b      	sxth	r3, r3
 8014b10:	e7f6      	b.n	8014b00 <_svfprintf_r+0x55c>
 8014b12:	05b2      	lsls	r2, r6, #22
 8014b14:	d5f4      	bpl.n	8014b00 <_svfprintf_r+0x55c>
 8014b16:	b25b      	sxtb	r3, r3
 8014b18:	e7f2      	b.n	8014b00 <_svfprintf_r+0x55c>
 8014b1a:	2307      	movs	r3, #7
 8014b1c:	3407      	adds	r4, #7
 8014b1e:	439c      	bics	r4, r3
 8014b20:	0023      	movs	r3, r4
 8014b22:	2201      	movs	r2, #1
 8014b24:	3308      	adds	r3, #8
 8014b26:	9312      	str	r3, [sp, #72]	; 0x48
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	4252      	negs	r2, r2
 8014b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8014b2e:	6863      	ldr	r3, [r4, #4]
 8014b30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014b32:	005c      	lsls	r4, r3, #1
 8014b34:	0864      	lsrs	r4, r4, #1
 8014b36:	9319      	str	r3, [sp, #100]	; 0x64
 8014b38:	0028      	movs	r0, r5
 8014b3a:	4bcf      	ldr	r3, [pc, #828]	; (8014e78 <_svfprintf_r+0x8d4>)
 8014b3c:	0021      	movs	r1, r4
 8014b3e:	f7ed ff33 	bl	80029a8 <__aeabi_dcmpun>
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d125      	bne.n	8014b92 <_svfprintf_r+0x5ee>
 8014b46:	2201      	movs	r2, #1
 8014b48:	4bcb      	ldr	r3, [pc, #812]	; (8014e78 <_svfprintf_r+0x8d4>)
 8014b4a:	4252      	negs	r2, r2
 8014b4c:	0028      	movs	r0, r5
 8014b4e:	0021      	movs	r1, r4
 8014b50:	f7eb fc94 	bl	800047c <__aeabi_dcmple>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d11c      	bne.n	8014b92 <_svfprintf_r+0x5ee>
 8014b58:	2200      	movs	r2, #0
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014b5e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014b60:	f7eb fc82 	bl	8000468 <__aeabi_dcmplt>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	d004      	beq.n	8014b72 <_svfprintf_r+0x5ce>
 8014b68:	231b      	movs	r3, #27
 8014b6a:	aa1e      	add	r2, sp, #120	; 0x78
 8014b6c:	189b      	adds	r3, r3, r2
 8014b6e:	222d      	movs	r2, #45	; 0x2d
 8014b70:	701a      	strb	r2, [r3, #0]
 8014b72:	4bc2      	ldr	r3, [pc, #776]	; (8014e7c <_svfprintf_r+0x8d8>)
 8014b74:	9309      	str	r3, [sp, #36]	; 0x24
 8014b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b78:	2b47      	cmp	r3, #71	; 0x47
 8014b7a:	dc01      	bgt.n	8014b80 <_svfprintf_r+0x5dc>
 8014b7c:	4bc0      	ldr	r3, [pc, #768]	; (8014e80 <_svfprintf_r+0x8dc>)
 8014b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b80:	2380      	movs	r3, #128	; 0x80
 8014b82:	439e      	bics	r6, r3
 8014b84:	2300      	movs	r3, #0
 8014b86:	930c      	str	r3, [sp, #48]	; 0x30
 8014b88:	3303      	adds	r3, #3
 8014b8a:	9308      	str	r3, [sp, #32]
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b90:	e34f      	b.n	8015232 <_svfprintf_r+0xc8e>
 8014b92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014b96:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014b98:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014b9a:	f7ed ff05 	bl	80029a8 <__aeabi_dcmpun>
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d00e      	beq.n	8014bc0 <_svfprintf_r+0x61c>
 8014ba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	da04      	bge.n	8014bb2 <_svfprintf_r+0x60e>
 8014ba8:	231b      	movs	r3, #27
 8014baa:	aa1e      	add	r2, sp, #120	; 0x78
 8014bac:	189b      	adds	r3, r3, r2
 8014bae:	222d      	movs	r2, #45	; 0x2d
 8014bb0:	701a      	strb	r2, [r3, #0]
 8014bb2:	4bb4      	ldr	r3, [pc, #720]	; (8014e84 <_svfprintf_r+0x8e0>)
 8014bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bb8:	2b47      	cmp	r3, #71	; 0x47
 8014bba:	dce1      	bgt.n	8014b80 <_svfprintf_r+0x5dc>
 8014bbc:	4bb2      	ldr	r3, [pc, #712]	; (8014e88 <_svfprintf_r+0x8e4>)
 8014bbe:	e7de      	b.n	8014b7e <_svfprintf_r+0x5da>
 8014bc0:	2320      	movs	r3, #32
 8014bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014bc4:	439a      	bics	r2, r3
 8014bc6:	920f      	str	r2, [sp, #60]	; 0x3c
 8014bc8:	2a41      	cmp	r2, #65	; 0x41
 8014bca:	d124      	bne.n	8014c16 <_svfprintf_r+0x672>
 8014bcc:	2230      	movs	r2, #48	; 0x30
 8014bce:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014bd0:	ab25      	add	r3, sp, #148	; 0x94
 8014bd2:	701a      	strb	r2, [r3, #0]
 8014bd4:	3228      	adds	r2, #40	; 0x28
 8014bd6:	2961      	cmp	r1, #97	; 0x61
 8014bd8:	d100      	bne.n	8014bdc <_svfprintf_r+0x638>
 8014bda:	3220      	adds	r2, #32
 8014bdc:	705a      	strb	r2, [r3, #1]
 8014bde:	2302      	movs	r3, #2
 8014be0:	431e      	orrs	r6, r3
 8014be2:	9b08      	ldr	r3, [sp, #32]
 8014be4:	2b63      	cmp	r3, #99	; 0x63
 8014be6:	dc00      	bgt.n	8014bea <_svfprintf_r+0x646>
 8014be8:	e09e      	b.n	8014d28 <_svfprintf_r+0x784>
 8014bea:	1c59      	adds	r1, r3, #1
 8014bec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bee:	f7fe f913 	bl	8012e18 <_malloc_r>
 8014bf2:	9009      	str	r0, [sp, #36]	; 0x24
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	d000      	beq.n	8014bfa <_svfprintf_r+0x656>
 8014bf8:	e09b      	b.n	8014d32 <_svfprintf_r+0x78e>
 8014bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bfc:	899a      	ldrh	r2, [r3, #12]
 8014bfe:	2340      	movs	r3, #64	; 0x40
 8014c00:	4313      	orrs	r3, r2
 8014c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c04:	8193      	strh	r3, [r2, #12]
 8014c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c08:	899b      	ldrh	r3, [r3, #12]
 8014c0a:	065b      	lsls	r3, r3, #25
 8014c0c:	d400      	bmi.n	8014c10 <_svfprintf_r+0x66c>
 8014c0e:	e4ee      	b.n	80145ee <_svfprintf_r+0x4a>
 8014c10:	2301      	movs	r3, #1
 8014c12:	425b      	negs	r3, r3
 8014c14:	e4ea      	b.n	80145ec <_svfprintf_r+0x48>
 8014c16:	9b08      	ldr	r3, [sp, #32]
 8014c18:	900c      	str	r0, [sp, #48]	; 0x30
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	d100      	bne.n	8014c20 <_svfprintf_r+0x67c>
 8014c1e:	e08b      	b.n	8014d38 <_svfprintf_r+0x794>
 8014c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c22:	2b47      	cmp	r3, #71	; 0x47
 8014c24:	d103      	bne.n	8014c2e <_svfprintf_r+0x68a>
 8014c26:	9b08      	ldr	r3, [sp, #32]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d100      	bne.n	8014c2e <_svfprintf_r+0x68a>
 8014c2c:	e087      	b.n	8014d3e <_svfprintf_r+0x79a>
 8014c2e:	2380      	movs	r3, #128	; 0x80
 8014c30:	005b      	lsls	r3, r3, #1
 8014c32:	4333      	orrs	r3, r6
 8014c34:	9320      	str	r3, [sp, #128]	; 0x80
 8014c36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	db00      	blt.n	8014c40 <_svfprintf_r+0x69c>
 8014c3e:	e082      	b.n	8014d46 <_svfprintf_r+0x7a2>
 8014c40:	2280      	movs	r2, #128	; 0x80
 8014c42:	0612      	lsls	r2, r2, #24
 8014c44:	4694      	mov	ip, r2
 8014c46:	4463      	add	r3, ip
 8014c48:	930d      	str	r3, [sp, #52]	; 0x34
 8014c4a:	232d      	movs	r3, #45	; 0x2d
 8014c4c:	9322      	str	r3, [sp, #136]	; 0x88
 8014c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c50:	2b41      	cmp	r3, #65	; 0x41
 8014c52:	d000      	beq.n	8014c56 <_svfprintf_r+0x6b2>
 8014c54:	e105      	b.n	8014e62 <_svfprintf_r+0x8be>
 8014c56:	aa26      	add	r2, sp, #152	; 0x98
 8014c58:	0020      	movs	r0, r4
 8014c5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c5c:	f002 fdc4 	bl	80177e8 <frexp>
 8014c60:	23ff      	movs	r3, #255	; 0xff
 8014c62:	2200      	movs	r2, #0
 8014c64:	059b      	lsls	r3, r3, #22
 8014c66:	f7ed f8e5 	bl	8001e34 <__aeabi_dmul>
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	0004      	movs	r4, r0
 8014c70:	000d      	movs	r5, r1
 8014c72:	f7eb fbf3 	bl	800045c <__aeabi_dcmpeq>
 8014c76:	2800      	cmp	r0, #0
 8014c78:	d001      	beq.n	8014c7e <_svfprintf_r+0x6da>
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	9326      	str	r3, [sp, #152]	; 0x98
 8014c7e:	4b83      	ldr	r3, [pc, #524]	; (8014e8c <_svfprintf_r+0x8e8>)
 8014c80:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c84:	2b61      	cmp	r3, #97	; 0x61
 8014c86:	d101      	bne.n	8014c8c <_svfprintf_r+0x6e8>
 8014c88:	4b81      	ldr	r3, [pc, #516]	; (8014e90 <_svfprintf_r+0x8ec>)
 8014c8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c8c:	9b08      	ldr	r3, [sp, #32]
 8014c8e:	3b01      	subs	r3, #1
 8014c90:	9310      	str	r3, [sp, #64]	; 0x40
 8014c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c94:	9318      	str	r3, [sp, #96]	; 0x60
 8014c96:	2200      	movs	r2, #0
 8014c98:	4b7e      	ldr	r3, [pc, #504]	; (8014e94 <_svfprintf_r+0x8f0>)
 8014c9a:	0020      	movs	r0, r4
 8014c9c:	0029      	movs	r1, r5
 8014c9e:	f7ed f8c9 	bl	8001e34 <__aeabi_dmul>
 8014ca2:	000d      	movs	r5, r1
 8014ca4:	0004      	movs	r4, r0
 8014ca6:	f7ed fe9b 	bl	80029e0 <__aeabi_d2iz>
 8014caa:	9021      	str	r0, [sp, #132]	; 0x84
 8014cac:	f7ed fece 	bl	8002a4c <__aeabi_i2d>
 8014cb0:	0002      	movs	r2, r0
 8014cb2:	000b      	movs	r3, r1
 8014cb4:	0020      	movs	r0, r4
 8014cb6:	0029      	movs	r1, r5
 8014cb8:	f7ed fb2e 	bl	8002318 <__aeabi_dsub>
 8014cbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014cbe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8014cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cc6:	0004      	movs	r4, r0
 8014cc8:	5c9b      	ldrb	r3, [r3, r2]
 8014cca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ccc:	000d      	movs	r5, r1
 8014cce:	7013      	strb	r3, [r2, #0]
 8014cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cd2:	9323      	str	r3, [sp, #140]	; 0x8c
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	d00a      	beq.n	8014cee <_svfprintf_r+0x74a>
 8014cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cda:	2200      	movs	r2, #0
 8014cdc:	3b01      	subs	r3, #1
 8014cde:	9310      	str	r3, [sp, #64]	; 0x40
 8014ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ce2:	9318      	str	r3, [sp, #96]	; 0x60
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	f7eb fbb9 	bl	800045c <__aeabi_dcmpeq>
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d0d3      	beq.n	8014c96 <_svfprintf_r+0x6f2>
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4b69      	ldr	r3, [pc, #420]	; (8014e98 <_svfprintf_r+0x8f4>)
 8014cf2:	0020      	movs	r0, r4
 8014cf4:	0029      	movs	r1, r5
 8014cf6:	f7eb fbcb 	bl	8000490 <__aeabi_dcmpgt>
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	d126      	bne.n	8014d4c <_svfprintf_r+0x7a8>
 8014cfe:	2200      	movs	r2, #0
 8014d00:	4b65      	ldr	r3, [pc, #404]	; (8014e98 <_svfprintf_r+0x8f4>)
 8014d02:	0020      	movs	r0, r4
 8014d04:	0029      	movs	r1, r5
 8014d06:	f7eb fba9 	bl	800045c <__aeabi_dcmpeq>
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d002      	beq.n	8014d14 <_svfprintf_r+0x770>
 8014d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d10:	07db      	lsls	r3, r3, #31
 8014d12:	d41b      	bmi.n	8014d4c <_svfprintf_r+0x7a8>
 8014d14:	2130      	movs	r1, #48	; 0x30
 8014d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014d1a:	1898      	adds	r0, r3, r2
 8014d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8014d1e:	1ac2      	subs	r2, r0, r3
 8014d20:	d426      	bmi.n	8014d70 <_svfprintf_r+0x7cc>
 8014d22:	7019      	strb	r1, [r3, #0]
 8014d24:	3301      	adds	r3, #1
 8014d26:	e7f9      	b.n	8014d1c <_svfprintf_r+0x778>
 8014d28:	2300      	movs	r3, #0
 8014d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8014d2c:	ab3f      	add	r3, sp, #252	; 0xfc
 8014d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d30:	e77d      	b.n	8014c2e <_svfprintf_r+0x68a>
 8014d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d34:	930c      	str	r3, [sp, #48]	; 0x30
 8014d36:	e77a      	b.n	8014c2e <_svfprintf_r+0x68a>
 8014d38:	2306      	movs	r3, #6
 8014d3a:	9308      	str	r3, [sp, #32]
 8014d3c:	e777      	b.n	8014c2e <_svfprintf_r+0x68a>
 8014d3e:	9b08      	ldr	r3, [sp, #32]
 8014d40:	930c      	str	r3, [sp, #48]	; 0x30
 8014d42:	2301      	movs	r3, #1
 8014d44:	e7f9      	b.n	8014d3a <_svfprintf_r+0x796>
 8014d46:	930d      	str	r3, [sp, #52]	; 0x34
 8014d48:	2300      	movs	r3, #0
 8014d4a:	e77f      	b.n	8014c4c <_svfprintf_r+0x6a8>
 8014d4c:	2030      	movs	r0, #48	; 0x30
 8014d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d50:	932a      	str	r3, [sp, #168]	; 0xa8
 8014d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d54:	7bda      	ldrb	r2, [r3, #15]
 8014d56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014d58:	3b01      	subs	r3, #1
 8014d5a:	932a      	str	r3, [sp, #168]	; 0xa8
 8014d5c:	7819      	ldrb	r1, [r3, #0]
 8014d5e:	4291      	cmp	r1, r2
 8014d60:	d07d      	beq.n	8014e5e <_svfprintf_r+0x8ba>
 8014d62:	1c4a      	adds	r2, r1, #1
 8014d64:	b2d2      	uxtb	r2, r2
 8014d66:	2939      	cmp	r1, #57	; 0x39
 8014d68:	d101      	bne.n	8014d6e <_svfprintf_r+0x7ca>
 8014d6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014d6c:	7a92      	ldrb	r2, [r2, #10]
 8014d6e:	701a      	strb	r2, [r3, #0]
 8014d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d74:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014d76:	1a9b      	subs	r3, r3, r2
 8014d78:	930d      	str	r3, [sp, #52]	; 0x34
 8014d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d7c:	2b47      	cmp	r3, #71	; 0x47
 8014d7e:	d000      	beq.n	8014d82 <_svfprintf_r+0x7de>
 8014d80:	e0d2      	b.n	8014f28 <_svfprintf_r+0x984>
 8014d82:	1ceb      	adds	r3, r5, #3
 8014d84:	db03      	blt.n	8014d8e <_svfprintf_r+0x7ea>
 8014d86:	9b08      	ldr	r3, [sp, #32]
 8014d88:	42ab      	cmp	r3, r5
 8014d8a:	db00      	blt.n	8014d8e <_svfprintf_r+0x7ea>
 8014d8c:	e0fd      	b.n	8014f8a <_svfprintf_r+0x9e6>
 8014d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d90:	3b02      	subs	r3, #2
 8014d92:	930e      	str	r3, [sp, #56]	; 0x38
 8014d94:	2238      	movs	r2, #56	; 0x38
 8014d96:	466b      	mov	r3, sp
 8014d98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014d9a:	189b      	adds	r3, r3, r2
 8014d9c:	3a18      	subs	r2, #24
 8014d9e:	4391      	bics	r1, r2
 8014da0:	1e6c      	subs	r4, r5, #1
 8014da2:	000a      	movs	r2, r1
 8014da4:	9426      	str	r4, [sp, #152]	; 0x98
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	2100      	movs	r1, #0
 8014daa:	2a41      	cmp	r2, #65	; 0x41
 8014dac:	d102      	bne.n	8014db4 <_svfprintf_r+0x810>
 8014dae:	330f      	adds	r3, #15
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	3101      	adds	r1, #1
 8014db4:	aa28      	add	r2, sp, #160	; 0xa0
 8014db6:	7013      	strb	r3, [r2, #0]
 8014db8:	232b      	movs	r3, #43	; 0x2b
 8014dba:	2c00      	cmp	r4, #0
 8014dbc:	da02      	bge.n	8014dc4 <_svfprintf_r+0x820>
 8014dbe:	2401      	movs	r4, #1
 8014dc0:	232d      	movs	r3, #45	; 0x2d
 8014dc2:	1b64      	subs	r4, r4, r5
 8014dc4:	7053      	strb	r3, [r2, #1]
 8014dc6:	2c09      	cmp	r4, #9
 8014dc8:	dc00      	bgt.n	8014dcc <_svfprintf_r+0x828>
 8014dca:	e0c7      	b.n	8014f5c <_svfprintf_r+0x9b8>
 8014dcc:	2537      	movs	r5, #55	; 0x37
 8014dce:	ab1e      	add	r3, sp, #120	; 0x78
 8014dd0:	18ed      	adds	r5, r5, r3
 8014dd2:	1e6b      	subs	r3, r5, #1
 8014dd4:	0020      	movs	r0, r4
 8014dd6:	210a      	movs	r1, #10
 8014dd8:	9308      	str	r3, [sp, #32]
 8014dda:	f7eb fb29 	bl	8000430 <__aeabi_idivmod>
 8014dde:	1e6b      	subs	r3, r5, #1
 8014de0:	3130      	adds	r1, #48	; 0x30
 8014de2:	7019      	strb	r1, [r3, #0]
 8014de4:	0020      	movs	r0, r4
 8014de6:	210a      	movs	r1, #10
 8014de8:	f7eb fa3c 	bl	8000264 <__divsi3>
 8014dec:	0004      	movs	r4, r0
 8014dee:	2809      	cmp	r0, #9
 8014df0:	dd00      	ble.n	8014df4 <_svfprintf_r+0x850>
 8014df2:	e0ac      	b.n	8014f4e <_svfprintf_r+0x9aa>
 8014df4:	232a      	movs	r3, #42	; 0x2a
 8014df6:	2137      	movs	r1, #55	; 0x37
 8014df8:	aa1e      	add	r2, sp, #120	; 0x78
 8014dfa:	3d02      	subs	r5, #2
 8014dfc:	3430      	adds	r4, #48	; 0x30
 8014dfe:	702c      	strb	r4, [r5, #0]
 8014e00:	189b      	adds	r3, r3, r2
 8014e02:	1889      	adds	r1, r1, r2
 8014e04:	001a      	movs	r2, r3
 8014e06:	428d      	cmp	r5, r1
 8014e08:	d200      	bcs.n	8014e0c <_svfprintf_r+0x868>
 8014e0a:	e0a2      	b.n	8014f52 <_svfprintf_r+0x9ae>
 8014e0c:	ab28      	add	r3, sp, #160	; 0xa0
 8014e0e:	1ad3      	subs	r3, r2, r3
 8014e10:	931d      	str	r3, [sp, #116]	; 0x74
 8014e12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e16:	4694      	mov	ip, r2
 8014e18:	4463      	add	r3, ip
 8014e1a:	9308      	str	r3, [sp, #32]
 8014e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e1e:	2b01      	cmp	r3, #1
 8014e20:	dc01      	bgt.n	8014e26 <_svfprintf_r+0x882>
 8014e22:	07f3      	lsls	r3, r6, #31
 8014e24:	d504      	bpl.n	8014e30 <_svfprintf_r+0x88c>
 8014e26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e28:	9b08      	ldr	r3, [sp, #32]
 8014e2a:	4694      	mov	ip, r2
 8014e2c:	4463      	add	r3, ip
 8014e2e:	9308      	str	r3, [sp, #32]
 8014e30:	2280      	movs	r2, #128	; 0x80
 8014e32:	4b1a      	ldr	r3, [pc, #104]	; (8014e9c <_svfprintf_r+0x8f8>)
 8014e34:	0052      	lsls	r2, r2, #1
 8014e36:	4033      	ands	r3, r6
 8014e38:	431a      	orrs	r2, r3
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	001d      	movs	r5, r3
 8014e3e:	9220      	str	r2, [sp, #128]	; 0x80
 8014e40:	9310      	str	r3, [sp, #64]	; 0x40
 8014e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d100      	bne.n	8014e4c <_svfprintf_r+0x8a8>
 8014e4a:	e270      	b.n	801532e <_svfprintf_r+0xd8a>
 8014e4c:	231b      	movs	r3, #27
 8014e4e:	aa1e      	add	r2, sp, #120	; 0x78
 8014e50:	189b      	adds	r3, r3, r2
 8014e52:	222d      	movs	r2, #45	; 0x2d
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	2300      	movs	r3, #0
 8014e58:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014e5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014e5c:	e539      	b.n	80148d2 <_svfprintf_r+0x32e>
 8014e5e:	7018      	strb	r0, [r3, #0]
 8014e60:	e779      	b.n	8014d56 <_svfprintf_r+0x7b2>
 8014e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e64:	2b46      	cmp	r3, #70	; 0x46
 8014e66:	d01b      	beq.n	8014ea0 <_svfprintf_r+0x8fc>
 8014e68:	9d08      	ldr	r5, [sp, #32]
 8014e6a:	2b45      	cmp	r3, #69	; 0x45
 8014e6c:	d101      	bne.n	8014e72 <_svfprintf_r+0x8ce>
 8014e6e:	9b08      	ldr	r3, [sp, #32]
 8014e70:	1c5d      	adds	r5, r3, #1
 8014e72:	2302      	movs	r3, #2
 8014e74:	e016      	b.n	8014ea4 <_svfprintf_r+0x900>
 8014e76:	46c0      	nop			; (mov r8, r8)
 8014e78:	7fefffff 	.word	0x7fefffff
 8014e7c:	0801a994 	.word	0x0801a994
 8014e80:	0801a990 	.word	0x0801a990
 8014e84:	0801a99c 	.word	0x0801a99c
 8014e88:	0801a998 	.word	0x0801a998
 8014e8c:	0801a9b1 	.word	0x0801a9b1
 8014e90:	0801a9a0 	.word	0x0801a9a0
 8014e94:	40300000 	.word	0x40300000
 8014e98:	3fe00000 	.word	0x3fe00000
 8014e9c:	fffffbff 	.word	0xfffffbff
 8014ea0:	2303      	movs	r3, #3
 8014ea2:	9d08      	ldr	r5, [sp, #32]
 8014ea4:	aa2a      	add	r2, sp, #168	; 0xa8
 8014ea6:	9204      	str	r2, [sp, #16]
 8014ea8:	aa27      	add	r2, sp, #156	; 0x9c
 8014eaa:	9203      	str	r2, [sp, #12]
 8014eac:	aa26      	add	r2, sp, #152	; 0x98
 8014eae:	9202      	str	r2, [sp, #8]
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	9501      	str	r5, [sp, #4]
 8014eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eb6:	0022      	movs	r2, r4
 8014eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eba:	f000 fe79 	bl	8015bb0 <_dtoa_r>
 8014ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ec0:	9009      	str	r0, [sp, #36]	; 0x24
 8014ec2:	2b47      	cmp	r3, #71	; 0x47
 8014ec4:	d101      	bne.n	8014eca <_svfprintf_r+0x926>
 8014ec6:	07f3      	lsls	r3, r6, #31
 8014ec8:	d524      	bpl.n	8014f14 <_svfprintf_r+0x970>
 8014eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ecc:	195b      	adds	r3, r3, r5
 8014ece:	9310      	str	r3, [sp, #64]	; 0x40
 8014ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ed2:	2b46      	cmp	r3, #70	; 0x46
 8014ed4:	d113      	bne.n	8014efe <_svfprintf_r+0x95a>
 8014ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	2b30      	cmp	r3, #48	; 0x30
 8014edc:	d10a      	bne.n	8014ef4 <_svfprintf_r+0x950>
 8014ede:	2200      	movs	r2, #0
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	0020      	movs	r0, r4
 8014ee4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014ee6:	f7eb fab9 	bl	800045c <__aeabi_dcmpeq>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d102      	bne.n	8014ef4 <_svfprintf_r+0x950>
 8014eee:	2301      	movs	r3, #1
 8014ef0:	1b5d      	subs	r5, r3, r5
 8014ef2:	9526      	str	r5, [sp, #152]	; 0x98
 8014ef4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ef8:	4694      	mov	ip, r2
 8014efa:	4463      	add	r3, ip
 8014efc:	9310      	str	r3, [sp, #64]	; 0x40
 8014efe:	2200      	movs	r2, #0
 8014f00:	2300      	movs	r3, #0
 8014f02:	0020      	movs	r0, r4
 8014f04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014f06:	f7eb faa9 	bl	800045c <__aeabi_dcmpeq>
 8014f0a:	2230      	movs	r2, #48	; 0x30
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	d006      	beq.n	8014f1e <_svfprintf_r+0x97a>
 8014f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f12:	932a      	str	r3, [sp, #168]	; 0xa8
 8014f14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014f16:	e72c      	b.n	8014d72 <_svfprintf_r+0x7ce>
 8014f18:	1c59      	adds	r1, r3, #1
 8014f1a:	912a      	str	r1, [sp, #168]	; 0xa8
 8014f1c:	701a      	strb	r2, [r3, #0]
 8014f1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014f20:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014f22:	4299      	cmp	r1, r3
 8014f24:	d8f8      	bhi.n	8014f18 <_svfprintf_r+0x974>
 8014f26:	e7f5      	b.n	8014f14 <_svfprintf_r+0x970>
 8014f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f2a:	2b46      	cmp	r3, #70	; 0x46
 8014f2c:	d000      	beq.n	8014f30 <_svfprintf_r+0x98c>
 8014f2e:	e731      	b.n	8014d94 <_svfprintf_r+0x7f0>
 8014f30:	9b08      	ldr	r3, [sp, #32]
 8014f32:	2d00      	cmp	r5, #0
 8014f34:	dd21      	ble.n	8014f7a <_svfprintf_r+0x9d6>
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d101      	bne.n	8014f3e <_svfprintf_r+0x99a>
 8014f3a:	07f3      	lsls	r3, r6, #31
 8014f3c:	d54a      	bpl.n	8014fd4 <_svfprintf_r+0xa30>
 8014f3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f40:	18eb      	adds	r3, r5, r3
 8014f42:	9a08      	ldr	r2, [sp, #32]
 8014f44:	18d3      	adds	r3, r2, r3
 8014f46:	9308      	str	r3, [sp, #32]
 8014f48:	2366      	movs	r3, #102	; 0x66
 8014f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8014f4c:	e034      	b.n	8014fb8 <_svfprintf_r+0xa14>
 8014f4e:	9d08      	ldr	r5, [sp, #32]
 8014f50:	e73f      	b.n	8014dd2 <_svfprintf_r+0x82e>
 8014f52:	782a      	ldrb	r2, [r5, #0]
 8014f54:	3501      	adds	r5, #1
 8014f56:	701a      	strb	r2, [r3, #0]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	e753      	b.n	8014e04 <_svfprintf_r+0x860>
 8014f5c:	232a      	movs	r3, #42	; 0x2a
 8014f5e:	aa1e      	add	r2, sp, #120	; 0x78
 8014f60:	189b      	adds	r3, r3, r2
 8014f62:	2900      	cmp	r1, #0
 8014f64:	d105      	bne.n	8014f72 <_svfprintf_r+0x9ce>
 8014f66:	2230      	movs	r2, #48	; 0x30
 8014f68:	ab28      	add	r3, sp, #160	; 0xa0
 8014f6a:	709a      	strb	r2, [r3, #2]
 8014f6c:	232b      	movs	r3, #43	; 0x2b
 8014f6e:	aa1e      	add	r2, sp, #120	; 0x78
 8014f70:	189b      	adds	r3, r3, r2
 8014f72:	3430      	adds	r4, #48	; 0x30
 8014f74:	1c5a      	adds	r2, r3, #1
 8014f76:	701c      	strb	r4, [r3, #0]
 8014f78:	e748      	b.n	8014e0c <_svfprintf_r+0x868>
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d102      	bne.n	8014f84 <_svfprintf_r+0x9e0>
 8014f7e:	3301      	adds	r3, #1
 8014f80:	421e      	tst	r6, r3
 8014f82:	d029      	beq.n	8014fd8 <_svfprintf_r+0xa34>
 8014f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f86:	3301      	adds	r3, #1
 8014f88:	e7db      	b.n	8014f42 <_svfprintf_r+0x99e>
 8014f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f8c:	42ab      	cmp	r3, r5
 8014f8e:	dc06      	bgt.n	8014f9e <_svfprintf_r+0x9fa>
 8014f90:	07f3      	lsls	r3, r6, #31
 8014f92:	d524      	bpl.n	8014fde <_svfprintf_r+0xa3a>
 8014f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f96:	18eb      	adds	r3, r5, r3
 8014f98:	9308      	str	r3, [sp, #32]
 8014f9a:	2367      	movs	r3, #103	; 0x67
 8014f9c:	e7d5      	b.n	8014f4a <_svfprintf_r+0x9a6>
 8014f9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fa2:	4694      	mov	ip, r2
 8014fa4:	4463      	add	r3, ip
 8014fa6:	9308      	str	r3, [sp, #32]
 8014fa8:	2367      	movs	r3, #103	; 0x67
 8014faa:	930e      	str	r3, [sp, #56]	; 0x38
 8014fac:	2d00      	cmp	r5, #0
 8014fae:	dc03      	bgt.n	8014fb8 <_svfprintf_r+0xa14>
 8014fb0:	9b08      	ldr	r3, [sp, #32]
 8014fb2:	1b5b      	subs	r3, r3, r5
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	9308      	str	r3, [sp, #32]
 8014fb8:	2380      	movs	r3, #128	; 0x80
 8014fba:	00db      	lsls	r3, r3, #3
 8014fbc:	401e      	ands	r6, r3
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	960f      	str	r6, [sp, #60]	; 0x3c
 8014fc2:	9310      	str	r3, [sp, #64]	; 0x40
 8014fc4:	2e00      	cmp	r6, #0
 8014fc6:	d100      	bne.n	8014fca <_svfprintf_r+0xa26>
 8014fc8:	e73c      	b.n	8014e44 <_svfprintf_r+0x8a0>
 8014fca:	2d00      	cmp	r5, #0
 8014fcc:	dc27      	bgt.n	801501e <_svfprintf_r+0xa7a>
 8014fce:	2300      	movs	r3, #0
 8014fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fd2:	e737      	b.n	8014e44 <_svfprintf_r+0x8a0>
 8014fd4:	9508      	str	r5, [sp, #32]
 8014fd6:	e7b7      	b.n	8014f48 <_svfprintf_r+0x9a4>
 8014fd8:	2266      	movs	r2, #102	; 0x66
 8014fda:	920e      	str	r2, [sp, #56]	; 0x38
 8014fdc:	e7eb      	b.n	8014fb6 <_svfprintf_r+0xa12>
 8014fde:	9508      	str	r5, [sp, #32]
 8014fe0:	e7db      	b.n	8014f9a <_svfprintf_r+0x9f6>
 8014fe2:	42ab      	cmp	r3, r5
 8014fe4:	da0e      	bge.n	8015004 <_svfprintf_r+0xa60>
 8014fe6:	1aed      	subs	r5, r5, r3
 8014fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fea:	785b      	ldrb	r3, [r3, #1]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d012      	beq.n	8015016 <_svfprintf_r+0xa72>
 8014ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ff6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	2bff      	cmp	r3, #255	; 0xff
 8015002:	d1ee      	bne.n	8014fe2 <_svfprintf_r+0xa3e>
 8015004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015008:	189b      	adds	r3, r3, r2
 801500a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801500c:	4353      	muls	r3, r2
 801500e:	9a08      	ldr	r2, [sp, #32]
 8015010:	189b      	adds	r3, r3, r2
 8015012:	9308      	str	r3, [sp, #32]
 8015014:	e716      	b.n	8014e44 <_svfprintf_r+0x8a0>
 8015016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015018:	3301      	adds	r3, #1
 801501a:	9310      	str	r3, [sp, #64]	; 0x40
 801501c:	e7ee      	b.n	8014ffc <_svfprintf_r+0xa58>
 801501e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015020:	930f      	str	r3, [sp, #60]	; 0x3c
 8015022:	e7eb      	b.n	8014ffc <_svfprintf_r+0xa58>
 8015024:	0022      	movs	r2, r4
 8015026:	ca08      	ldmia	r2!, {r3}
 8015028:	9212      	str	r2, [sp, #72]	; 0x48
 801502a:	06b2      	lsls	r2, r6, #26
 801502c:	d508      	bpl.n	8015040 <_svfprintf_r+0xa9c>
 801502e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015030:	601a      	str	r2, [r3, #0]
 8015032:	17d2      	asrs	r2, r2, #31
 8015034:	605a      	str	r2, [r3, #4]
 8015036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015038:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801503a:	9309      	str	r3, [sp, #36]	; 0x24
 801503c:	f7ff faeb 	bl	8014616 <_svfprintf_r+0x72>
 8015040:	06f2      	lsls	r2, r6, #27
 8015042:	d502      	bpl.n	801504a <_svfprintf_r+0xaa6>
 8015044:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015046:	601a      	str	r2, [r3, #0]
 8015048:	e7f5      	b.n	8015036 <_svfprintf_r+0xa92>
 801504a:	0672      	lsls	r2, r6, #25
 801504c:	d502      	bpl.n	8015054 <_svfprintf_r+0xab0>
 801504e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015050:	801a      	strh	r2, [r3, #0]
 8015052:	e7f0      	b.n	8015036 <_svfprintf_r+0xa92>
 8015054:	05b2      	lsls	r2, r6, #22
 8015056:	d5f5      	bpl.n	8015044 <_svfprintf_r+0xaa0>
 8015058:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801505a:	701a      	strb	r2, [r3, #0]
 801505c:	e7eb      	b.n	8015036 <_svfprintf_r+0xa92>
 801505e:	2310      	movs	r3, #16
 8015060:	431e      	orrs	r6, r3
 8015062:	2220      	movs	r2, #32
 8015064:	4032      	ands	r2, r6
 8015066:	d025      	beq.n	80150b4 <_svfprintf_r+0xb10>
 8015068:	2307      	movs	r3, #7
 801506a:	3407      	adds	r4, #7
 801506c:	439c      	bics	r4, r3
 801506e:	0023      	movs	r3, r4
 8015070:	3308      	adds	r3, #8
 8015072:	9312      	str	r3, [sp, #72]	; 0x48
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	6864      	ldr	r4, [r4, #4]
 8015078:	9306      	str	r3, [sp, #24]
 801507a:	9407      	str	r4, [sp, #28]
 801507c:	4bc2      	ldr	r3, [pc, #776]	; (8015388 <_svfprintf_r+0xde4>)
 801507e:	401e      	ands	r6, r3
 8015080:	2300      	movs	r3, #0
 8015082:	221b      	movs	r2, #27
 8015084:	a91e      	add	r1, sp, #120	; 0x78
 8015086:	1852      	adds	r2, r2, r1
 8015088:	2100      	movs	r1, #0
 801508a:	7011      	strb	r1, [r2, #0]
 801508c:	9a08      	ldr	r2, [sp, #32]
 801508e:	3201      	adds	r2, #1
 8015090:	d100      	bne.n	8015094 <_svfprintf_r+0xaf0>
 8015092:	e0a6      	b.n	80151e2 <_svfprintf_r+0xc3e>
 8015094:	0032      	movs	r2, r6
 8015096:	2180      	movs	r1, #128	; 0x80
 8015098:	9807      	ldr	r0, [sp, #28]
 801509a:	438e      	bics	r6, r1
 801509c:	9906      	ldr	r1, [sp, #24]
 801509e:	4301      	orrs	r1, r0
 80150a0:	d000      	beq.n	80150a4 <_svfprintf_r+0xb00>
 80150a2:	e09e      	b.n	80151e2 <_svfprintf_r+0xc3e>
 80150a4:	9908      	ldr	r1, [sp, #32]
 80150a6:	2900      	cmp	r1, #0
 80150a8:	d100      	bne.n	80150ac <_svfprintf_r+0xb08>
 80150aa:	e125      	b.n	80152f8 <_svfprintf_r+0xd54>
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d000      	beq.n	80150b2 <_svfprintf_r+0xb0e>
 80150b0:	e09a      	b.n	80151e8 <_svfprintf_r+0xc44>
 80150b2:	e518      	b.n	8014ae6 <_svfprintf_r+0x542>
 80150b4:	1d23      	adds	r3, r4, #4
 80150b6:	9312      	str	r3, [sp, #72]	; 0x48
 80150b8:	2310      	movs	r3, #16
 80150ba:	4033      	ands	r3, r6
 80150bc:	d003      	beq.n	80150c6 <_svfprintf_r+0xb22>
 80150be:	6823      	ldr	r3, [r4, #0]
 80150c0:	9306      	str	r3, [sp, #24]
 80150c2:	9207      	str	r2, [sp, #28]
 80150c4:	e7da      	b.n	801507c <_svfprintf_r+0xad8>
 80150c6:	2240      	movs	r2, #64	; 0x40
 80150c8:	4032      	ands	r2, r6
 80150ca:	d004      	beq.n	80150d6 <_svfprintf_r+0xb32>
 80150cc:	6822      	ldr	r2, [r4, #0]
 80150ce:	b292      	uxth	r2, r2
 80150d0:	9206      	str	r2, [sp, #24]
 80150d2:	9307      	str	r3, [sp, #28]
 80150d4:	e7d2      	b.n	801507c <_svfprintf_r+0xad8>
 80150d6:	2380      	movs	r3, #128	; 0x80
 80150d8:	009b      	lsls	r3, r3, #2
 80150da:	4033      	ands	r3, r6
 80150dc:	d002      	beq.n	80150e4 <_svfprintf_r+0xb40>
 80150de:	6823      	ldr	r3, [r4, #0]
 80150e0:	b2db      	uxtb	r3, r3
 80150e2:	e7ed      	b.n	80150c0 <_svfprintf_r+0xb1c>
 80150e4:	6822      	ldr	r2, [r4, #0]
 80150e6:	e7f3      	b.n	80150d0 <_svfprintf_r+0xb2c>
 80150e8:	1d23      	adds	r3, r4, #4
 80150ea:	49a8      	ldr	r1, [pc, #672]	; (801538c <_svfprintf_r+0xde8>)
 80150ec:	aa25      	add	r2, sp, #148	; 0x94
 80150ee:	9312      	str	r3, [sp, #72]	; 0x48
 80150f0:	6823      	ldr	r3, [r4, #0]
 80150f2:	8011      	strh	r1, [r2, #0]
 80150f4:	4aa6      	ldr	r2, [pc, #664]	; (8015390 <_svfprintf_r+0xdec>)
 80150f6:	9306      	str	r3, [sp, #24]
 80150f8:	2300      	movs	r3, #0
 80150fa:	921e      	str	r2, [sp, #120]	; 0x78
 80150fc:	2278      	movs	r2, #120	; 0x78
 80150fe:	9307      	str	r3, [sp, #28]
 8015100:	3302      	adds	r3, #2
 8015102:	431e      	orrs	r6, r3
 8015104:	920e      	str	r2, [sp, #56]	; 0x38
 8015106:	e7bc      	b.n	8015082 <_svfprintf_r+0xade>
 8015108:	1d23      	adds	r3, r4, #4
 801510a:	9312      	str	r3, [sp, #72]	; 0x48
 801510c:	6823      	ldr	r3, [r4, #0]
 801510e:	2400      	movs	r4, #0
 8015110:	9309      	str	r3, [sp, #36]	; 0x24
 8015112:	231b      	movs	r3, #27
 8015114:	aa1e      	add	r2, sp, #120	; 0x78
 8015116:	189b      	adds	r3, r3, r2
 8015118:	701c      	strb	r4, [r3, #0]
 801511a:	9b08      	ldr	r3, [sp, #32]
 801511c:	3301      	adds	r3, #1
 801511e:	d00e      	beq.n	801513e <_svfprintf_r+0xb9a>
 8015120:	9a08      	ldr	r2, [sp, #32]
 8015122:	0021      	movs	r1, r4
 8015124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015126:	f001 ff79 	bl	801701c <memchr>
 801512a:	900c      	str	r0, [sp, #48]	; 0x30
 801512c:	42a0      	cmp	r0, r4
 801512e:	d100      	bne.n	8015132 <_svfprintf_r+0xb8e>
 8015130:	e100      	b.n	8015334 <_svfprintf_r+0xd90>
 8015132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015134:	1a83      	subs	r3, r0, r2
 8015136:	9308      	str	r3, [sp, #32]
 8015138:	940c      	str	r4, [sp, #48]	; 0x30
 801513a:	0023      	movs	r3, r4
 801513c:	e527      	b.n	8014b8e <_svfprintf_r+0x5ea>
 801513e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015140:	f7ea ffea 	bl	8000118 <strlen>
 8015144:	9008      	str	r0, [sp, #32]
 8015146:	e7f7      	b.n	8015138 <_svfprintf_r+0xb94>
 8015148:	2310      	movs	r3, #16
 801514a:	431e      	orrs	r6, r3
 801514c:	2220      	movs	r2, #32
 801514e:	4032      	ands	r2, r6
 8015150:	d00b      	beq.n	801516a <_svfprintf_r+0xbc6>
 8015152:	2307      	movs	r3, #7
 8015154:	3407      	adds	r4, #7
 8015156:	439c      	bics	r4, r3
 8015158:	0023      	movs	r3, r4
 801515a:	3308      	adds	r3, #8
 801515c:	9312      	str	r3, [sp, #72]	; 0x48
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	6864      	ldr	r4, [r4, #4]
 8015162:	9306      	str	r3, [sp, #24]
 8015164:	9407      	str	r4, [sp, #28]
 8015166:	2301      	movs	r3, #1
 8015168:	e78b      	b.n	8015082 <_svfprintf_r+0xade>
 801516a:	1d23      	adds	r3, r4, #4
 801516c:	9312      	str	r3, [sp, #72]	; 0x48
 801516e:	2310      	movs	r3, #16
 8015170:	4033      	ands	r3, r6
 8015172:	d003      	beq.n	801517c <_svfprintf_r+0xbd8>
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	9306      	str	r3, [sp, #24]
 8015178:	9207      	str	r2, [sp, #28]
 801517a:	e7f4      	b.n	8015166 <_svfprintf_r+0xbc2>
 801517c:	2240      	movs	r2, #64	; 0x40
 801517e:	4032      	ands	r2, r6
 8015180:	d004      	beq.n	801518c <_svfprintf_r+0xbe8>
 8015182:	6822      	ldr	r2, [r4, #0]
 8015184:	b292      	uxth	r2, r2
 8015186:	9206      	str	r2, [sp, #24]
 8015188:	9307      	str	r3, [sp, #28]
 801518a:	e7ec      	b.n	8015166 <_svfprintf_r+0xbc2>
 801518c:	2380      	movs	r3, #128	; 0x80
 801518e:	009b      	lsls	r3, r3, #2
 8015190:	4033      	ands	r3, r6
 8015192:	d002      	beq.n	801519a <_svfprintf_r+0xbf6>
 8015194:	6823      	ldr	r3, [r4, #0]
 8015196:	b2db      	uxtb	r3, r3
 8015198:	e7ed      	b.n	8015176 <_svfprintf_r+0xbd2>
 801519a:	6822      	ldr	r2, [r4, #0]
 801519c:	e7f3      	b.n	8015186 <_svfprintf_r+0xbe2>
 801519e:	4b7c      	ldr	r3, [pc, #496]	; (8015390 <_svfprintf_r+0xdec>)
 80151a0:	f7ff fad9 	bl	8014756 <_svfprintf_r+0x1b2>
 80151a4:	1d23      	adds	r3, r4, #4
 80151a6:	9312      	str	r3, [sp, #72]	; 0x48
 80151a8:	2310      	movs	r3, #16
 80151aa:	4033      	ands	r3, r6
 80151ac:	d004      	beq.n	80151b8 <_svfprintf_r+0xc14>
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	9306      	str	r3, [sp, #24]
 80151b2:	9207      	str	r2, [sp, #28]
 80151b4:	f7ff fadf 	bl	8014776 <_svfprintf_r+0x1d2>
 80151b8:	2240      	movs	r2, #64	; 0x40
 80151ba:	4032      	ands	r2, r6
 80151bc:	d005      	beq.n	80151ca <_svfprintf_r+0xc26>
 80151be:	6822      	ldr	r2, [r4, #0]
 80151c0:	b292      	uxth	r2, r2
 80151c2:	9206      	str	r2, [sp, #24]
 80151c4:	9307      	str	r3, [sp, #28]
 80151c6:	f7ff fad6 	bl	8014776 <_svfprintf_r+0x1d2>
 80151ca:	2380      	movs	r3, #128	; 0x80
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	4033      	ands	r3, r6
 80151d0:	d002      	beq.n	80151d8 <_svfprintf_r+0xc34>
 80151d2:	6823      	ldr	r3, [r4, #0]
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	e7eb      	b.n	80151b0 <_svfprintf_r+0xc0c>
 80151d8:	6822      	ldr	r2, [r4, #0]
 80151da:	e7f2      	b.n	80151c2 <_svfprintf_r+0xc1e>
 80151dc:	0032      	movs	r2, r6
 80151de:	2301      	movs	r3, #1
 80151e0:	e759      	b.n	8015096 <_svfprintf_r+0xaf2>
 80151e2:	2b01      	cmp	r3, #1
 80151e4:	d100      	bne.n	80151e8 <_svfprintf_r+0xc44>
 80151e6:	e476      	b.n	8014ad6 <_svfprintf_r+0x532>
 80151e8:	2b02      	cmp	r3, #2
 80151ea:	d06b      	beq.n	80152c4 <_svfprintf_r+0xd20>
 80151ec:	2507      	movs	r5, #7
 80151ee:	ab58      	add	r3, sp, #352	; 0x160
 80151f0:	1e5a      	subs	r2, r3, #1
 80151f2:	9209      	str	r2, [sp, #36]	; 0x24
 80151f4:	9a06      	ldr	r2, [sp, #24]
 80151f6:	1e59      	subs	r1, r3, #1
 80151f8:	402a      	ands	r2, r5
 80151fa:	3230      	adds	r2, #48	; 0x30
 80151fc:	700a      	strb	r2, [r1, #0]
 80151fe:	9907      	ldr	r1, [sp, #28]
 8015200:	074c      	lsls	r4, r1, #29
 8015202:	9906      	ldr	r1, [sp, #24]
 8015204:	08c8      	lsrs	r0, r1, #3
 8015206:	9907      	ldr	r1, [sp, #28]
 8015208:	4304      	orrs	r4, r0
 801520a:	08c9      	lsrs	r1, r1, #3
 801520c:	9107      	str	r1, [sp, #28]
 801520e:	0021      	movs	r1, r4
 8015210:	9807      	ldr	r0, [sp, #28]
 8015212:	9406      	str	r4, [sp, #24]
 8015214:	4301      	orrs	r1, r0
 8015216:	d111      	bne.n	801523c <_svfprintf_r+0xc98>
 8015218:	07f1      	lsls	r1, r6, #31
 801521a:	d502      	bpl.n	8015222 <_svfprintf_r+0xc7e>
 801521c:	3b02      	subs	r3, #2
 801521e:	2a30      	cmp	r2, #48	; 0x30
 8015220:	d173      	bne.n	801530a <_svfprintf_r+0xd66>
 8015222:	9b08      	ldr	r3, [sp, #32]
 8015224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015226:	9317      	str	r3, [sp, #92]	; 0x5c
 8015228:	ab58      	add	r3, sp, #352	; 0x160
 801522a:	1a9b      	subs	r3, r3, r2
 801522c:	9308      	str	r3, [sp, #32]
 801522e:	2300      	movs	r3, #0
 8015230:	930c      	str	r3, [sp, #48]	; 0x30
 8015232:	9310      	str	r3, [sp, #64]	; 0x40
 8015234:	930f      	str	r3, [sp, #60]	; 0x3c
 8015236:	001d      	movs	r5, r3
 8015238:	f7ff fb4b 	bl	80148d2 <_svfprintf_r+0x32e>
 801523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801523e:	e7d7      	b.n	80151f0 <_svfprintf_r+0xc4c>
 8015240:	2480      	movs	r4, #128	; 0x80
 8015242:	2300      	movs	r3, #0
 8015244:	00e4      	lsls	r4, r4, #3
 8015246:	930d      	str	r3, [sp, #52]	; 0x34
 8015248:	4034      	ands	r4, r6
 801524a:	ab58      	add	r3, sp, #352	; 0x160
 801524c:	3b01      	subs	r3, #1
 801524e:	9309      	str	r3, [sp, #36]	; 0x24
 8015250:	220a      	movs	r2, #10
 8015252:	9806      	ldr	r0, [sp, #24]
 8015254:	9907      	ldr	r1, [sp, #28]
 8015256:	2300      	movs	r3, #0
 8015258:	f7eb f968 	bl	800052c <__aeabi_uldivmod>
 801525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801525e:	3230      	adds	r2, #48	; 0x30
 8015260:	701a      	strb	r2, [r3, #0]
 8015262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015264:	3301      	adds	r3, #1
 8015266:	930d      	str	r3, [sp, #52]	; 0x34
 8015268:	2c00      	cmp	r4, #0
 801526a:	d01d      	beq.n	80152a8 <_svfprintf_r+0xd04>
 801526c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801526e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	429a      	cmp	r2, r3
 8015274:	d118      	bne.n	80152a8 <_svfprintf_r+0xd04>
 8015276:	2aff      	cmp	r2, #255	; 0xff
 8015278:	d016      	beq.n	80152a8 <_svfprintf_r+0xd04>
 801527a:	9b07      	ldr	r3, [sp, #28]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d102      	bne.n	8015286 <_svfprintf_r+0xce2>
 8015280:	9b06      	ldr	r3, [sp, #24]
 8015282:	2b09      	cmp	r3, #9
 8015284:	d910      	bls.n	80152a8 <_svfprintf_r+0xd04>
 8015286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015288:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801528a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801528c:	1a9b      	subs	r3, r3, r2
 801528e:	0018      	movs	r0, r3
 8015290:	9309      	str	r3, [sp, #36]	; 0x24
 8015292:	f7fe fa52 	bl	801373a <strncpy>
 8015296:	2200      	movs	r2, #0
 8015298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801529a:	920d      	str	r2, [sp, #52]	; 0x34
 801529c:	785b      	ldrb	r3, [r3, #1]
 801529e:	1e5a      	subs	r2, r3, #1
 80152a0:	4193      	sbcs	r3, r2
 80152a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152a4:	18d3      	adds	r3, r2, r3
 80152a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80152a8:	220a      	movs	r2, #10
 80152aa:	9806      	ldr	r0, [sp, #24]
 80152ac:	9907      	ldr	r1, [sp, #28]
 80152ae:	2300      	movs	r3, #0
 80152b0:	f7eb f93c 	bl	800052c <__aeabi_uldivmod>
 80152b4:	9006      	str	r0, [sp, #24]
 80152b6:	9107      	str	r1, [sp, #28]
 80152b8:	9b06      	ldr	r3, [sp, #24]
 80152ba:	9a07      	ldr	r2, [sp, #28]
 80152bc:	4313      	orrs	r3, r2
 80152be:	d0b0      	beq.n	8015222 <_svfprintf_r+0xc7e>
 80152c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c2:	e7c3      	b.n	801524c <_svfprintf_r+0xca8>
 80152c4:	200f      	movs	r0, #15
 80152c6:	ab58      	add	r3, sp, #352	; 0x160
 80152c8:	9309      	str	r3, [sp, #36]	; 0x24
 80152ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80152ce:	3b01      	subs	r3, #1
 80152d0:	9309      	str	r3, [sp, #36]	; 0x24
 80152d2:	9b06      	ldr	r3, [sp, #24]
 80152d4:	4003      	ands	r3, r0
 80152d6:	5cd3      	ldrb	r3, [r2, r3]
 80152d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152da:	7013      	strb	r3, [r2, #0]
 80152dc:	9b07      	ldr	r3, [sp, #28]
 80152de:	0719      	lsls	r1, r3, #28
 80152e0:	9b06      	ldr	r3, [sp, #24]
 80152e2:	091a      	lsrs	r2, r3, #4
 80152e4:	9b07      	ldr	r3, [sp, #28]
 80152e6:	4311      	orrs	r1, r2
 80152e8:	091b      	lsrs	r3, r3, #4
 80152ea:	9307      	str	r3, [sp, #28]
 80152ec:	000b      	movs	r3, r1
 80152ee:	9a07      	ldr	r2, [sp, #28]
 80152f0:	9106      	str	r1, [sp, #24]
 80152f2:	4313      	orrs	r3, r2
 80152f4:	d1e9      	bne.n	80152ca <_svfprintf_r+0xd26>
 80152f6:	e794      	b.n	8015222 <_svfprintf_r+0xc7e>
 80152f8:	a958      	add	r1, sp, #352	; 0x160
 80152fa:	9109      	str	r1, [sp, #36]	; 0x24
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d190      	bne.n	8015222 <_svfprintf_r+0xc7e>
 8015300:	07d3      	lsls	r3, r2, #31
 8015302:	d58e      	bpl.n	8015222 <_svfprintf_r+0xc7e>
 8015304:	23e7      	movs	r3, #231	; 0xe7
 8015306:	aa1e      	add	r2, sp, #120	; 0x78
 8015308:	189b      	adds	r3, r3, r2
 801530a:	2230      	movs	r2, #48	; 0x30
 801530c:	f7ff fbf0 	bl	8014af0 <_svfprintf_r+0x54c>
 8015310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015312:	2b00      	cmp	r3, #0
 8015314:	d100      	bne.n	8015318 <_svfprintf_r+0xd74>
 8015316:	e38a      	b.n	8015a2e <_svfprintf_r+0x148a>
 8015318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801531a:	ab3f      	add	r3, sp, #252	; 0xfc
 801531c:	701a      	strb	r2, [r3, #0]
 801531e:	221b      	movs	r2, #27
 8015320:	2000      	movs	r0, #0
 8015322:	a91e      	add	r1, sp, #120	; 0x78
 8015324:	1852      	adds	r2, r2, r1
 8015326:	7010      	strb	r0, [r2, #0]
 8015328:	9412      	str	r4, [sp, #72]	; 0x48
 801532a:	f7ff faca 	bl	80148c2 <_svfprintf_r+0x31e>
 801532e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015330:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015332:	e592      	b.n	8014e5a <_svfprintf_r+0x8b6>
 8015334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015336:	e42a      	b.n	8014b8e <_svfprintf_r+0x5ea>
 8015338:	2010      	movs	r0, #16
 801533a:	1812      	adds	r2, r2, r0
 801533c:	6078      	str	r0, [r7, #4]
 801533e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015340:	932d      	str	r3, [sp, #180]	; 0xb4
 8015342:	2b07      	cmp	r3, #7
 8015344:	dd08      	ble.n	8015358 <_svfprintf_r+0xdb4>
 8015346:	aa2c      	add	r2, sp, #176	; 0xb0
 8015348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801534c:	f002 fa7e 	bl	801784c <__ssprint_r>
 8015350:	2800      	cmp	r0, #0
 8015352:	d000      	beq.n	8015356 <_svfprintf_r+0xdb2>
 8015354:	e34a      	b.n	80159ec <_svfprintf_r+0x1448>
 8015356:	a92f      	add	r1, sp, #188	; 0xbc
 8015358:	3c10      	subs	r4, #16
 801535a:	000f      	movs	r7, r1
 801535c:	f7ff fad8 	bl	8014910 <_svfprintf_r+0x36c>
 8015360:	2010      	movs	r0, #16
 8015362:	1812      	adds	r2, r2, r0
 8015364:	6078      	str	r0, [r7, #4]
 8015366:	922e      	str	r2, [sp, #184]	; 0xb8
 8015368:	932d      	str	r3, [sp, #180]	; 0xb4
 801536a:	2b07      	cmp	r3, #7
 801536c:	dd08      	ble.n	8015380 <_svfprintf_r+0xddc>
 801536e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015372:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015374:	f002 fa6a 	bl	801784c <__ssprint_r>
 8015378:	2800      	cmp	r0, #0
 801537a:	d000      	beq.n	801537e <_svfprintf_r+0xdda>
 801537c:	e336      	b.n	80159ec <_svfprintf_r+0x1448>
 801537e:	a92f      	add	r1, sp, #188	; 0xbc
 8015380:	3c10      	subs	r4, #16
 8015382:	000f      	movs	r7, r1
 8015384:	f7ff fb24 	bl	80149d0 <_svfprintf_r+0x42c>
 8015388:	fffffbff 	.word	0xfffffbff
 801538c:	00007830 	.word	0x00007830
 8015390:	0801a9a0 	.word	0x0801a9a0
 8015394:	2010      	movs	r0, #16
 8015396:	1812      	adds	r2, r2, r0
 8015398:	6078      	str	r0, [r7, #4]
 801539a:	922e      	str	r2, [sp, #184]	; 0xb8
 801539c:	932d      	str	r3, [sp, #180]	; 0xb4
 801539e:	2b07      	cmp	r3, #7
 80153a0:	dd08      	ble.n	80153b4 <_svfprintf_r+0xe10>
 80153a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80153a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153a8:	f002 fa50 	bl	801784c <__ssprint_r>
 80153ac:	2800      	cmp	r0, #0
 80153ae:	d000      	beq.n	80153b2 <_svfprintf_r+0xe0e>
 80153b0:	e31c      	b.n	80159ec <_svfprintf_r+0x1448>
 80153b2:	a92f      	add	r1, sp, #188	; 0xbc
 80153b4:	3c10      	subs	r4, #16
 80153b6:	000f      	movs	r7, r1
 80153b8:	f7ff fb2c 	bl	8014a14 <_svfprintf_r+0x470>
 80153bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153be:	2b65      	cmp	r3, #101	; 0x65
 80153c0:	dc00      	bgt.n	80153c4 <_svfprintf_r+0xe20>
 80153c2:	e259      	b.n	8015878 <_svfprintf_r+0x12d4>
 80153c4:	2200      	movs	r2, #0
 80153c6:	2300      	movs	r3, #0
 80153c8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80153ca:	9919      	ldr	r1, [sp, #100]	; 0x64
 80153cc:	f7eb f846 	bl	800045c <__aeabi_dcmpeq>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	d07c      	beq.n	80154ce <_svfprintf_r+0xf2a>
 80153d4:	4b81      	ldr	r3, [pc, #516]	; (80155dc <_svfprintf_r+0x1038>)
 80153d6:	603b      	str	r3, [r7, #0]
 80153d8:	2301      	movs	r3, #1
 80153da:	607b      	str	r3, [r7, #4]
 80153dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80153de:	3708      	adds	r7, #8
 80153e0:	3301      	adds	r3, #1
 80153e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80153e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153e6:	9308      	str	r3, [sp, #32]
 80153e8:	3301      	adds	r3, #1
 80153ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ec:	2b07      	cmp	r3, #7
 80153ee:	dd08      	ble.n	8015402 <_svfprintf_r+0xe5e>
 80153f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80153f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153f6:	f002 fa29 	bl	801784c <__ssprint_r>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	d000      	beq.n	8015400 <_svfprintf_r+0xe5c>
 80153fe:	e2f5      	b.n	80159ec <_svfprintf_r+0x1448>
 8015400:	af2f      	add	r7, sp, #188	; 0xbc
 8015402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015406:	4293      	cmp	r3, r2
 8015408:	db01      	blt.n	801540e <_svfprintf_r+0xe6a>
 801540a:	07f3      	lsls	r3, r6, #31
 801540c:	d51d      	bpl.n	801544a <_svfprintf_r+0xea6>
 801540e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015410:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015412:	4694      	mov	ip, r2
 8015414:	603b      	str	r3, [r7, #0]
 8015416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015418:	607b      	str	r3, [r7, #4]
 801541a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801541c:	3708      	adds	r7, #8
 801541e:	4463      	add	r3, ip
 8015420:	932e      	str	r3, [sp, #184]	; 0xb8
 8015422:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015424:	9308      	str	r3, [sp, #32]
 8015426:	3301      	adds	r3, #1
 8015428:	932d      	str	r3, [sp, #180]	; 0xb4
 801542a:	2b07      	cmp	r3, #7
 801542c:	dd08      	ble.n	8015440 <_svfprintf_r+0xe9c>
 801542e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015432:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015434:	f002 fa0a 	bl	801784c <__ssprint_r>
 8015438:	2800      	cmp	r0, #0
 801543a:	d000      	beq.n	801543e <_svfprintf_r+0xe9a>
 801543c:	e2d6      	b.n	80159ec <_svfprintf_r+0x1448>
 801543e:	af2f      	add	r7, sp, #188	; 0xbc
 8015440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015442:	2510      	movs	r5, #16
 8015444:	1e5c      	subs	r4, r3, #1
 8015446:	2c00      	cmp	r4, #0
 8015448:	dc2f      	bgt.n	80154aa <_svfprintf_r+0xf06>
 801544a:	0773      	lsls	r3, r6, #29
 801544c:	d500      	bpl.n	8015450 <_svfprintf_r+0xeac>
 801544e:	e2af      	b.n	80159b0 <_svfprintf_r+0x140c>
 8015450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015454:	4293      	cmp	r3, r2
 8015456:	da00      	bge.n	801545a <_svfprintf_r+0xeb6>
 8015458:	0013      	movs	r3, r2
 801545a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801545c:	18d3      	adds	r3, r2, r3
 801545e:	9315      	str	r3, [sp, #84]	; 0x54
 8015460:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015462:	9308      	str	r3, [sp, #32]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d007      	beq.n	8015478 <_svfprintf_r+0xed4>
 8015468:	aa2c      	add	r2, sp, #176	; 0xb0
 801546a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801546c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801546e:	f002 f9ed 	bl	801784c <__ssprint_r>
 8015472:	2800      	cmp	r0, #0
 8015474:	d000      	beq.n	8015478 <_svfprintf_r+0xed4>
 8015476:	e2b9      	b.n	80159ec <_svfprintf_r+0x1448>
 8015478:	2300      	movs	r3, #0
 801547a:	932d      	str	r3, [sp, #180]	; 0xb4
 801547c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801547e:	2b00      	cmp	r3, #0
 8015480:	d000      	beq.n	8015484 <_svfprintf_r+0xee0>
 8015482:	e2cf      	b.n	8015a24 <_svfprintf_r+0x1480>
 8015484:	af2f      	add	r7, sp, #188	; 0xbc
 8015486:	e5d6      	b.n	8015036 <_svfprintf_r+0xa92>
 8015488:	3210      	adds	r2, #16
 801548a:	607d      	str	r5, [r7, #4]
 801548c:	922e      	str	r2, [sp, #184]	; 0xb8
 801548e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015490:	2b07      	cmp	r3, #7
 8015492:	dd08      	ble.n	80154a6 <_svfprintf_r+0xf02>
 8015494:	aa2c      	add	r2, sp, #176	; 0xb0
 8015496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015498:	980a      	ldr	r0, [sp, #40]	; 0x28
 801549a:	f002 f9d7 	bl	801784c <__ssprint_r>
 801549e:	2800      	cmp	r0, #0
 80154a0:	d000      	beq.n	80154a4 <_svfprintf_r+0xf00>
 80154a2:	e2a3      	b.n	80159ec <_svfprintf_r+0x1448>
 80154a4:	a92f      	add	r1, sp, #188	; 0xbc
 80154a6:	000f      	movs	r7, r1
 80154a8:	3c10      	subs	r4, #16
 80154aa:	0039      	movs	r1, r7
 80154ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154ae:	484c      	ldr	r0, [pc, #304]	; (80155e0 <_svfprintf_r+0x103c>)
 80154b0:	9308      	str	r3, [sp, #32]
 80154b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154b4:	3301      	adds	r3, #1
 80154b6:	3108      	adds	r1, #8
 80154b8:	6038      	str	r0, [r7, #0]
 80154ba:	2c10      	cmp	r4, #16
 80154bc:	dce4      	bgt.n	8015488 <_svfprintf_r+0xee4>
 80154be:	607c      	str	r4, [r7, #4]
 80154c0:	18a4      	adds	r4, r4, r2
 80154c2:	942e      	str	r4, [sp, #184]	; 0xb8
 80154c4:	932d      	str	r3, [sp, #180]	; 0xb4
 80154c6:	000f      	movs	r7, r1
 80154c8:	2b07      	cmp	r3, #7
 80154ca:	ddbe      	ble.n	801544a <_svfprintf_r+0xea6>
 80154cc:	e06a      	b.n	80155a4 <_svfprintf_r+0x1000>
 80154ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	dd00      	ble.n	80154d6 <_svfprintf_r+0xf32>
 80154d4:	e086      	b.n	80155e4 <_svfprintf_r+0x1040>
 80154d6:	4b41      	ldr	r3, [pc, #260]	; (80155dc <_svfprintf_r+0x1038>)
 80154d8:	603b      	str	r3, [r7, #0]
 80154da:	2301      	movs	r3, #1
 80154dc:	607b      	str	r3, [r7, #4]
 80154de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80154e0:	3708      	adds	r7, #8
 80154e2:	3301      	adds	r3, #1
 80154e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80154e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154e8:	9308      	str	r3, [sp, #32]
 80154ea:	3301      	adds	r3, #1
 80154ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80154ee:	2b07      	cmp	r3, #7
 80154f0:	dd08      	ble.n	8015504 <_svfprintf_r+0xf60>
 80154f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80154f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154f8:	f002 f9a8 	bl	801784c <__ssprint_r>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d000      	beq.n	8015502 <_svfprintf_r+0xf5e>
 8015500:	e274      	b.n	80159ec <_svfprintf_r+0x1448>
 8015502:	af2f      	add	r7, sp, #188	; 0xbc
 8015504:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015506:	2b00      	cmp	r3, #0
 8015508:	d104      	bne.n	8015514 <_svfprintf_r+0xf70>
 801550a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801550c:	2b00      	cmp	r3, #0
 801550e:	d101      	bne.n	8015514 <_svfprintf_r+0xf70>
 8015510:	07f3      	lsls	r3, r6, #31
 8015512:	d59a      	bpl.n	801544a <_svfprintf_r+0xea6>
 8015514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015516:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015518:	4694      	mov	ip, r2
 801551a:	603b      	str	r3, [r7, #0]
 801551c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801551e:	607b      	str	r3, [r7, #4]
 8015520:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015522:	3708      	adds	r7, #8
 8015524:	4463      	add	r3, ip
 8015526:	932e      	str	r3, [sp, #184]	; 0xb8
 8015528:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801552a:	9308      	str	r3, [sp, #32]
 801552c:	3301      	adds	r3, #1
 801552e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015530:	2b07      	cmp	r3, #7
 8015532:	dd08      	ble.n	8015546 <_svfprintf_r+0xfa2>
 8015534:	aa2c      	add	r2, sp, #176	; 0xb0
 8015536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015538:	980a      	ldr	r0, [sp, #40]	; 0x28
 801553a:	f002 f987 	bl	801784c <__ssprint_r>
 801553e:	2800      	cmp	r0, #0
 8015540:	d000      	beq.n	8015544 <_svfprintf_r+0xfa0>
 8015542:	e253      	b.n	80159ec <_svfprintf_r+0x1448>
 8015544:	af2f      	add	r7, sp, #188	; 0xbc
 8015546:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015548:	2c00      	cmp	r4, #0
 801554a:	da1a      	bge.n	8015582 <_svfprintf_r+0xfde>
 801554c:	0039      	movs	r1, r7
 801554e:	2510      	movs	r5, #16
 8015550:	4264      	negs	r4, r4
 8015552:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015554:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015556:	9308      	str	r3, [sp, #32]
 8015558:	1c5a      	adds	r2, r3, #1
 801555a:	4b21      	ldr	r3, [pc, #132]	; (80155e0 <_svfprintf_r+0x103c>)
 801555c:	3708      	adds	r7, #8
 801555e:	600b      	str	r3, [r1, #0]
 8015560:	2c10      	cmp	r4, #16
 8015562:	dc29      	bgt.n	80155b8 <_svfprintf_r+0x1014>
 8015564:	604c      	str	r4, [r1, #4]
 8015566:	1824      	adds	r4, r4, r0
 8015568:	942e      	str	r4, [sp, #184]	; 0xb8
 801556a:	922d      	str	r2, [sp, #180]	; 0xb4
 801556c:	2a07      	cmp	r2, #7
 801556e:	dd08      	ble.n	8015582 <_svfprintf_r+0xfde>
 8015570:	aa2c      	add	r2, sp, #176	; 0xb0
 8015572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015574:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015576:	f002 f969 	bl	801784c <__ssprint_r>
 801557a:	2800      	cmp	r0, #0
 801557c:	d000      	beq.n	8015580 <_svfprintf_r+0xfdc>
 801557e:	e235      	b.n	80159ec <_svfprintf_r+0x1448>
 8015580:	af2f      	add	r7, sp, #188	; 0xbc
 8015582:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015586:	468c      	mov	ip, r1
 8015588:	603b      	str	r3, [r7, #0]
 801558a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801558c:	607b      	str	r3, [r7, #4]
 801558e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015590:	4463      	add	r3, ip
 8015592:	932e      	str	r3, [sp, #184]	; 0xb8
 8015594:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015596:	1c5a      	adds	r2, r3, #1
 8015598:	9308      	str	r3, [sp, #32]
 801559a:	922d      	str	r2, [sp, #180]	; 0xb4
 801559c:	2a07      	cmp	r2, #7
 801559e:	dc01      	bgt.n	80155a4 <_svfprintf_r+0x1000>
 80155a0:	f7ff fa6c 	bl	8014a7c <_svfprintf_r+0x4d8>
 80155a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80155a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155aa:	f002 f94f 	bl	801784c <__ssprint_r>
 80155ae:	2800      	cmp	r0, #0
 80155b0:	d000      	beq.n	80155b4 <_svfprintf_r+0x1010>
 80155b2:	e21b      	b.n	80159ec <_svfprintf_r+0x1448>
 80155b4:	af2f      	add	r7, sp, #188	; 0xbc
 80155b6:	e748      	b.n	801544a <_svfprintf_r+0xea6>
 80155b8:	3010      	adds	r0, #16
 80155ba:	604d      	str	r5, [r1, #4]
 80155bc:	902e      	str	r0, [sp, #184]	; 0xb8
 80155be:	922d      	str	r2, [sp, #180]	; 0xb4
 80155c0:	2a07      	cmp	r2, #7
 80155c2:	dd08      	ble.n	80155d6 <_svfprintf_r+0x1032>
 80155c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80155c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155ca:	f002 f93f 	bl	801784c <__ssprint_r>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d000      	beq.n	80155d4 <_svfprintf_r+0x1030>
 80155d2:	e20b      	b.n	80159ec <_svfprintf_r+0x1448>
 80155d4:	af2f      	add	r7, sp, #188	; 0xbc
 80155d6:	3c10      	subs	r4, #16
 80155d8:	0039      	movs	r1, r7
 80155da:	e7ba      	b.n	8015552 <_svfprintf_r+0xfae>
 80155dc:	0801a9c2 	.word	0x0801a9c2
 80155e0:	0801a9d4 	.word	0x0801a9d4
 80155e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155e6:	002c      	movs	r4, r5
 80155e8:	429d      	cmp	r5, r3
 80155ea:	dd00      	ble.n	80155ee <_svfprintf_r+0x104a>
 80155ec:	001c      	movs	r4, r3
 80155ee:	2c00      	cmp	r4, #0
 80155f0:	dd15      	ble.n	801561e <_svfprintf_r+0x107a>
 80155f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155f4:	607c      	str	r4, [r7, #4]
 80155f6:	603b      	str	r3, [r7, #0]
 80155f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155fa:	3708      	adds	r7, #8
 80155fc:	18e3      	adds	r3, r4, r3
 80155fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8015600:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015602:	9308      	str	r3, [sp, #32]
 8015604:	3301      	adds	r3, #1
 8015606:	932d      	str	r3, [sp, #180]	; 0xb4
 8015608:	2b07      	cmp	r3, #7
 801560a:	dd08      	ble.n	801561e <_svfprintf_r+0x107a>
 801560c:	aa2c      	add	r2, sp, #176	; 0xb0
 801560e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015610:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015612:	f002 f91b 	bl	801784c <__ssprint_r>
 8015616:	2800      	cmp	r0, #0
 8015618:	d000      	beq.n	801561c <_svfprintf_r+0x1078>
 801561a:	e1e7      	b.n	80159ec <_svfprintf_r+0x1448>
 801561c:	af2f      	add	r7, sp, #188	; 0xbc
 801561e:	43e3      	mvns	r3, r4
 8015620:	17db      	asrs	r3, r3, #31
 8015622:	401c      	ands	r4, r3
 8015624:	1b2c      	subs	r4, r5, r4
 8015626:	2c00      	cmp	r4, #0
 8015628:	dd1a      	ble.n	8015660 <_svfprintf_r+0x10bc>
 801562a:	0039      	movs	r1, r7
 801562c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801562e:	48d4      	ldr	r0, [pc, #848]	; (8015980 <_svfprintf_r+0x13dc>)
 8015630:	9308      	str	r3, [sp, #32]
 8015632:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015634:	3301      	adds	r3, #1
 8015636:	3108      	adds	r1, #8
 8015638:	6038      	str	r0, [r7, #0]
 801563a:	2c10      	cmp	r4, #16
 801563c:	dd00      	ble.n	8015640 <_svfprintf_r+0x109c>
 801563e:	e089      	b.n	8015754 <_svfprintf_r+0x11b0>
 8015640:	607c      	str	r4, [r7, #4]
 8015642:	18a4      	adds	r4, r4, r2
 8015644:	942e      	str	r4, [sp, #184]	; 0xb8
 8015646:	932d      	str	r3, [sp, #180]	; 0xb4
 8015648:	000f      	movs	r7, r1
 801564a:	2b07      	cmp	r3, #7
 801564c:	dd08      	ble.n	8015660 <_svfprintf_r+0x10bc>
 801564e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015652:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015654:	f002 f8fa 	bl	801784c <__ssprint_r>
 8015658:	2800      	cmp	r0, #0
 801565a:	d000      	beq.n	801565e <_svfprintf_r+0x10ba>
 801565c:	e1c6      	b.n	80159ec <_svfprintf_r+0x1448>
 801565e:	af2f      	add	r7, sp, #188	; 0xbc
 8015660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015662:	195d      	adds	r5, r3, r5
 8015664:	0573      	lsls	r3, r6, #21
 8015666:	d50d      	bpl.n	8015684 <_svfprintf_r+0x10e0>
 8015668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801566a:	2b00      	cmp	r3, #0
 801566c:	d000      	beq.n	8015670 <_svfprintf_r+0x10cc>
 801566e:	e084      	b.n	801577a <_svfprintf_r+0x11d6>
 8015670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015672:	2b00      	cmp	r3, #0
 8015674:	d000      	beq.n	8015678 <_svfprintf_r+0x10d4>
 8015676:	e083      	b.n	8015780 <_svfprintf_r+0x11dc>
 8015678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801567a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801567c:	189b      	adds	r3, r3, r2
 801567e:	429d      	cmp	r5, r3
 8015680:	d900      	bls.n	8015684 <_svfprintf_r+0x10e0>
 8015682:	001d      	movs	r5, r3
 8015684:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015686:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015688:	4293      	cmp	r3, r2
 801568a:	db01      	blt.n	8015690 <_svfprintf_r+0x10ec>
 801568c:	07f3      	lsls	r3, r6, #31
 801568e:	d518      	bpl.n	80156c2 <_svfprintf_r+0x111e>
 8015690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015692:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015694:	4694      	mov	ip, r2
 8015696:	603b      	str	r3, [r7, #0]
 8015698:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801569a:	607b      	str	r3, [r7, #4]
 801569c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801569e:	3708      	adds	r7, #8
 80156a0:	4463      	add	r3, ip
 80156a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80156a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156a6:	9308      	str	r3, [sp, #32]
 80156a8:	3301      	adds	r3, #1
 80156aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ac:	2b07      	cmp	r3, #7
 80156ae:	dd08      	ble.n	80156c2 <_svfprintf_r+0x111e>
 80156b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80156b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156b6:	f002 f8c9 	bl	801784c <__ssprint_r>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d000      	beq.n	80156c0 <_svfprintf_r+0x111c>
 80156be:	e195      	b.n	80159ec <_svfprintf_r+0x1448>
 80156c0:	af2f      	add	r7, sp, #188	; 0xbc
 80156c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80156c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c6:	4694      	mov	ip, r2
 80156c8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80156ca:	4463      	add	r3, ip
 80156cc:	1b5b      	subs	r3, r3, r5
 80156ce:	1a54      	subs	r4, r2, r1
 80156d0:	429c      	cmp	r4, r3
 80156d2:	dd00      	ble.n	80156d6 <_svfprintf_r+0x1132>
 80156d4:	001c      	movs	r4, r3
 80156d6:	2c00      	cmp	r4, #0
 80156d8:	dd14      	ble.n	8015704 <_svfprintf_r+0x1160>
 80156da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156dc:	603d      	str	r5, [r7, #0]
 80156de:	18e3      	adds	r3, r4, r3
 80156e0:	932e      	str	r3, [sp, #184]	; 0xb8
 80156e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156e4:	607c      	str	r4, [r7, #4]
 80156e6:	9308      	str	r3, [sp, #32]
 80156e8:	3301      	adds	r3, #1
 80156ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ec:	3708      	adds	r7, #8
 80156ee:	2b07      	cmp	r3, #7
 80156f0:	dd08      	ble.n	8015704 <_svfprintf_r+0x1160>
 80156f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80156f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156f8:	f002 f8a8 	bl	801784c <__ssprint_r>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d000      	beq.n	8015702 <_svfprintf_r+0x115e>
 8015700:	e174      	b.n	80159ec <_svfprintf_r+0x1448>
 8015702:	af2f      	add	r7, sp, #188	; 0xbc
 8015704:	43e3      	mvns	r3, r4
 8015706:	17db      	asrs	r3, r3, #31
 8015708:	401c      	ands	r4, r3
 801570a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801570c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801570e:	2510      	movs	r5, #16
 8015710:	1a9b      	subs	r3, r3, r2
 8015712:	1b1c      	subs	r4, r3, r4
 8015714:	2c00      	cmp	r4, #0
 8015716:	dc00      	bgt.n	801571a <_svfprintf_r+0x1176>
 8015718:	e697      	b.n	801544a <_svfprintf_r+0xea6>
 801571a:	0039      	movs	r1, r7
 801571c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801571e:	4898      	ldr	r0, [pc, #608]	; (8015980 <_svfprintf_r+0x13dc>)
 8015720:	9308      	str	r3, [sp, #32]
 8015722:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015724:	3301      	adds	r3, #1
 8015726:	3108      	adds	r1, #8
 8015728:	6038      	str	r0, [r7, #0]
 801572a:	2c10      	cmp	r4, #16
 801572c:	dc00      	bgt.n	8015730 <_svfprintf_r+0x118c>
 801572e:	e6c6      	b.n	80154be <_svfprintf_r+0xf1a>
 8015730:	3210      	adds	r2, #16
 8015732:	607d      	str	r5, [r7, #4]
 8015734:	922e      	str	r2, [sp, #184]	; 0xb8
 8015736:	932d      	str	r3, [sp, #180]	; 0xb4
 8015738:	2b07      	cmp	r3, #7
 801573a:	dd08      	ble.n	801574e <_svfprintf_r+0x11aa>
 801573c:	aa2c      	add	r2, sp, #176	; 0xb0
 801573e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015740:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015742:	f002 f883 	bl	801784c <__ssprint_r>
 8015746:	2800      	cmp	r0, #0
 8015748:	d000      	beq.n	801574c <_svfprintf_r+0x11a8>
 801574a:	e14f      	b.n	80159ec <_svfprintf_r+0x1448>
 801574c:	a92f      	add	r1, sp, #188	; 0xbc
 801574e:	3c10      	subs	r4, #16
 8015750:	000f      	movs	r7, r1
 8015752:	e7e2      	b.n	801571a <_svfprintf_r+0x1176>
 8015754:	2010      	movs	r0, #16
 8015756:	1812      	adds	r2, r2, r0
 8015758:	6078      	str	r0, [r7, #4]
 801575a:	922e      	str	r2, [sp, #184]	; 0xb8
 801575c:	932d      	str	r3, [sp, #180]	; 0xb4
 801575e:	2b07      	cmp	r3, #7
 8015760:	dd08      	ble.n	8015774 <_svfprintf_r+0x11d0>
 8015762:	aa2c      	add	r2, sp, #176	; 0xb0
 8015764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015766:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015768:	f002 f870 	bl	801784c <__ssprint_r>
 801576c:	2800      	cmp	r0, #0
 801576e:	d000      	beq.n	8015772 <_svfprintf_r+0x11ce>
 8015770:	e13c      	b.n	80159ec <_svfprintf_r+0x1448>
 8015772:	a92f      	add	r1, sp, #188	; 0xbc
 8015774:	3c10      	subs	r4, #16
 8015776:	000f      	movs	r7, r1
 8015778:	e757      	b.n	801562a <_svfprintf_r+0x1086>
 801577a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801577c:	2b00      	cmp	r3, #0
 801577e:	d061      	beq.n	8015844 <_svfprintf_r+0x12a0>
 8015780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015782:	3b01      	subs	r3, #1
 8015784:	9310      	str	r3, [sp, #64]	; 0x40
 8015786:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015788:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801578a:	4694      	mov	ip, r2
 801578c:	603b      	str	r3, [r7, #0]
 801578e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015790:	607b      	str	r3, [r7, #4]
 8015792:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015794:	3708      	adds	r7, #8
 8015796:	4463      	add	r3, ip
 8015798:	932e      	str	r3, [sp, #184]	; 0xb8
 801579a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801579c:	9308      	str	r3, [sp, #32]
 801579e:	3301      	adds	r3, #1
 80157a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80157a2:	2b07      	cmp	r3, #7
 80157a4:	dd08      	ble.n	80157b8 <_svfprintf_r+0x1214>
 80157a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80157a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157ac:	f002 f84e 	bl	801784c <__ssprint_r>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d000      	beq.n	80157b6 <_svfprintf_r+0x1212>
 80157b4:	e11a      	b.n	80159ec <_svfprintf_r+0x1448>
 80157b6:	af2f      	add	r7, sp, #188	; 0xbc
 80157b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157bc:	189b      	adds	r3, r3, r2
 80157be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80157c0:	1b5b      	subs	r3, r3, r5
 80157c2:	7814      	ldrb	r4, [r2, #0]
 80157c4:	429c      	cmp	r4, r3
 80157c6:	dd00      	ble.n	80157ca <_svfprintf_r+0x1226>
 80157c8:	001c      	movs	r4, r3
 80157ca:	2c00      	cmp	r4, #0
 80157cc:	dd14      	ble.n	80157f8 <_svfprintf_r+0x1254>
 80157ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80157d0:	603d      	str	r5, [r7, #0]
 80157d2:	18e3      	adds	r3, r4, r3
 80157d4:	932e      	str	r3, [sp, #184]	; 0xb8
 80157d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157d8:	607c      	str	r4, [r7, #4]
 80157da:	9308      	str	r3, [sp, #32]
 80157dc:	3301      	adds	r3, #1
 80157de:	932d      	str	r3, [sp, #180]	; 0xb4
 80157e0:	3708      	adds	r7, #8
 80157e2:	2b07      	cmp	r3, #7
 80157e4:	dd08      	ble.n	80157f8 <_svfprintf_r+0x1254>
 80157e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80157e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157ec:	f002 f82e 	bl	801784c <__ssprint_r>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	d000      	beq.n	80157f6 <_svfprintf_r+0x1252>
 80157f4:	e0fa      	b.n	80159ec <_svfprintf_r+0x1448>
 80157f6:	af2f      	add	r7, sp, #188	; 0xbc
 80157f8:	43e3      	mvns	r3, r4
 80157fa:	17db      	asrs	r3, r3, #31
 80157fc:	401c      	ands	r4, r3
 80157fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	1b1c      	subs	r4, r3, r4
 8015804:	2c00      	cmp	r4, #0
 8015806:	dd19      	ble.n	801583c <_svfprintf_r+0x1298>
 8015808:	0039      	movs	r1, r7
 801580a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801580c:	485c      	ldr	r0, [pc, #368]	; (8015980 <_svfprintf_r+0x13dc>)
 801580e:	9308      	str	r3, [sp, #32]
 8015810:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015812:	3301      	adds	r3, #1
 8015814:	3108      	adds	r1, #8
 8015816:	6038      	str	r0, [r7, #0]
 8015818:	2c10      	cmp	r4, #16
 801581a:	dc1a      	bgt.n	8015852 <_svfprintf_r+0x12ae>
 801581c:	607c      	str	r4, [r7, #4]
 801581e:	18a4      	adds	r4, r4, r2
 8015820:	942e      	str	r4, [sp, #184]	; 0xb8
 8015822:	932d      	str	r3, [sp, #180]	; 0xb4
 8015824:	000f      	movs	r7, r1
 8015826:	2b07      	cmp	r3, #7
 8015828:	dd08      	ble.n	801583c <_svfprintf_r+0x1298>
 801582a:	aa2c      	add	r2, sp, #176	; 0xb0
 801582c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801582e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015830:	f002 f80c 	bl	801784c <__ssprint_r>
 8015834:	2800      	cmp	r0, #0
 8015836:	d000      	beq.n	801583a <_svfprintf_r+0x1296>
 8015838:	e0d8      	b.n	80159ec <_svfprintf_r+0x1448>
 801583a:	af2f      	add	r7, sp, #188	; 0xbc
 801583c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	18ed      	adds	r5, r5, r3
 8015842:	e711      	b.n	8015668 <_svfprintf_r+0x10c4>
 8015844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015846:	3b01      	subs	r3, #1
 8015848:	9313      	str	r3, [sp, #76]	; 0x4c
 801584a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801584c:	3b01      	subs	r3, #1
 801584e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015850:	e799      	b.n	8015786 <_svfprintf_r+0x11e2>
 8015852:	2010      	movs	r0, #16
 8015854:	1812      	adds	r2, r2, r0
 8015856:	6078      	str	r0, [r7, #4]
 8015858:	922e      	str	r2, [sp, #184]	; 0xb8
 801585a:	932d      	str	r3, [sp, #180]	; 0xb4
 801585c:	2b07      	cmp	r3, #7
 801585e:	dd08      	ble.n	8015872 <_svfprintf_r+0x12ce>
 8015860:	aa2c      	add	r2, sp, #176	; 0xb0
 8015862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015864:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015866:	f001 fff1 	bl	801784c <__ssprint_r>
 801586a:	2800      	cmp	r0, #0
 801586c:	d000      	beq.n	8015870 <_svfprintf_r+0x12cc>
 801586e:	e0bd      	b.n	80159ec <_svfprintf_r+0x1448>
 8015870:	a92f      	add	r1, sp, #188	; 0xbc
 8015872:	3c10      	subs	r4, #16
 8015874:	000f      	movs	r7, r1
 8015876:	e7c7      	b.n	8015808 <_svfprintf_r+0x1264>
 8015878:	003c      	movs	r4, r7
 801587a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801587c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801587e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015880:	9308      	str	r3, [sp, #32]
 8015882:	3101      	adds	r1, #1
 8015884:	3301      	adds	r3, #1
 8015886:	3408      	adds	r4, #8
 8015888:	2a01      	cmp	r2, #1
 801588a:	dc03      	bgt.n	8015894 <_svfprintf_r+0x12f0>
 801588c:	2201      	movs	r2, #1
 801588e:	4216      	tst	r6, r2
 8015890:	d100      	bne.n	8015894 <_svfprintf_r+0x12f0>
 8015892:	e088      	b.n	80159a6 <_svfprintf_r+0x1402>
 8015894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015896:	912e      	str	r1, [sp, #184]	; 0xb8
 8015898:	603a      	str	r2, [r7, #0]
 801589a:	2201      	movs	r2, #1
 801589c:	932d      	str	r3, [sp, #180]	; 0xb4
 801589e:	607a      	str	r2, [r7, #4]
 80158a0:	2b07      	cmp	r3, #7
 80158a2:	dd08      	ble.n	80158b6 <_svfprintf_r+0x1312>
 80158a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80158a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158aa:	f001 ffcf 	bl	801784c <__ssprint_r>
 80158ae:	2800      	cmp	r0, #0
 80158b0:	d000      	beq.n	80158b4 <_svfprintf_r+0x1310>
 80158b2:	e09b      	b.n	80159ec <_svfprintf_r+0x1448>
 80158b4:	ac2f      	add	r4, sp, #188	; 0xbc
 80158b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80158ba:	4694      	mov	ip, r2
 80158bc:	6023      	str	r3, [r4, #0]
 80158be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158c0:	6063      	str	r3, [r4, #4]
 80158c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80158c4:	3408      	adds	r4, #8
 80158c6:	4463      	add	r3, ip
 80158c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80158ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80158cc:	9308      	str	r3, [sp, #32]
 80158ce:	3301      	adds	r3, #1
 80158d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80158d2:	2b07      	cmp	r3, #7
 80158d4:	dd08      	ble.n	80158e8 <_svfprintf_r+0x1344>
 80158d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80158d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158dc:	f001 ffb6 	bl	801784c <__ssprint_r>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d000      	beq.n	80158e6 <_svfprintf_r+0x1342>
 80158e4:	e082      	b.n	80159ec <_svfprintf_r+0x1448>
 80158e6:	ac2f      	add	r4, sp, #188	; 0xbc
 80158e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158ea:	2200      	movs	r2, #0
 80158ec:	1e5d      	subs	r5, r3, #1
 80158ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 80158f0:	2300      	movs	r3, #0
 80158f2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80158f4:	f7ea fdb2 	bl	800045c <__aeabi_dcmpeq>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d12c      	bne.n	8015956 <_svfprintf_r+0x13b2>
 80158fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80158fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015900:	9308      	str	r3, [sp, #32]
 8015902:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015904:	6065      	str	r5, [r4, #4]
 8015906:	1c5a      	adds	r2, r3, #1
 8015908:	930e      	str	r3, [sp, #56]	; 0x38
 801590a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801590c:	922d      	str	r2, [sp, #180]	; 0xb4
 801590e:	3301      	adds	r3, #1
 8015910:	6023      	str	r3, [r4, #0]
 8015912:	9b08      	ldr	r3, [sp, #32]
 8015914:	3408      	adds	r4, #8
 8015916:	3b01      	subs	r3, #1
 8015918:	185b      	adds	r3, r3, r1
 801591a:	932e      	str	r3, [sp, #184]	; 0xb8
 801591c:	2a07      	cmp	r2, #7
 801591e:	dd07      	ble.n	8015930 <_svfprintf_r+0x138c>
 8015920:	aa2c      	add	r2, sp, #176	; 0xb0
 8015922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015924:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015926:	f001 ff91 	bl	801784c <__ssprint_r>
 801592a:	2800      	cmp	r0, #0
 801592c:	d15e      	bne.n	80159ec <_svfprintf_r+0x1448>
 801592e:	ac2f      	add	r4, sp, #188	; 0xbc
 8015930:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015932:	ab28      	add	r3, sp, #160	; 0xa0
 8015934:	4694      	mov	ip, r2
 8015936:	6023      	str	r3, [r4, #0]
 8015938:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801593a:	6063      	str	r3, [r4, #4]
 801593c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801593e:	4463      	add	r3, ip
 8015940:	932e      	str	r3, [sp, #184]	; 0xb8
 8015942:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015944:	9308      	str	r3, [sp, #32]
 8015946:	3301      	adds	r3, #1
 8015948:	932d      	str	r3, [sp, #180]	; 0xb4
 801594a:	2b07      	cmp	r3, #7
 801594c:	dd00      	ble.n	8015950 <_svfprintf_r+0x13ac>
 801594e:	e629      	b.n	80155a4 <_svfprintf_r+0x1000>
 8015950:	3408      	adds	r4, #8
 8015952:	0027      	movs	r7, r4
 8015954:	e579      	b.n	801544a <_svfprintf_r+0xea6>
 8015956:	2710      	movs	r7, #16
 8015958:	2d00      	cmp	r5, #0
 801595a:	dde9      	ble.n	8015930 <_svfprintf_r+0x138c>
 801595c:	0021      	movs	r1, r4
 801595e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015960:	4807      	ldr	r0, [pc, #28]	; (8015980 <_svfprintf_r+0x13dc>)
 8015962:	9308      	str	r3, [sp, #32]
 8015964:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015966:	3301      	adds	r3, #1
 8015968:	3108      	adds	r1, #8
 801596a:	6020      	str	r0, [r4, #0]
 801596c:	2d10      	cmp	r5, #16
 801596e:	dc09      	bgt.n	8015984 <_svfprintf_r+0x13e0>
 8015970:	6065      	str	r5, [r4, #4]
 8015972:	000c      	movs	r4, r1
 8015974:	18ad      	adds	r5, r5, r2
 8015976:	952e      	str	r5, [sp, #184]	; 0xb8
 8015978:	932d      	str	r3, [sp, #180]	; 0xb4
 801597a:	2b07      	cmp	r3, #7
 801597c:	ddd8      	ble.n	8015930 <_svfprintf_r+0x138c>
 801597e:	e7cf      	b.n	8015920 <_svfprintf_r+0x137c>
 8015980:	0801a9d4 	.word	0x0801a9d4
 8015984:	3210      	adds	r2, #16
 8015986:	6067      	str	r7, [r4, #4]
 8015988:	922e      	str	r2, [sp, #184]	; 0xb8
 801598a:	932d      	str	r3, [sp, #180]	; 0xb4
 801598c:	2b07      	cmp	r3, #7
 801598e:	dd07      	ble.n	80159a0 <_svfprintf_r+0x13fc>
 8015990:	aa2c      	add	r2, sp, #176	; 0xb0
 8015992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015994:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015996:	f001 ff59 	bl	801784c <__ssprint_r>
 801599a:	2800      	cmp	r0, #0
 801599c:	d126      	bne.n	80159ec <_svfprintf_r+0x1448>
 801599e:	a92f      	add	r1, sp, #188	; 0xbc
 80159a0:	3d10      	subs	r5, #16
 80159a2:	000c      	movs	r4, r1
 80159a4:	e7da      	b.n	801595c <_svfprintf_r+0x13b8>
 80159a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159a8:	912e      	str	r1, [sp, #184]	; 0xb8
 80159aa:	c705      	stmia	r7!, {r0, r2}
 80159ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80159ae:	e7e4      	b.n	801597a <_svfprintf_r+0x13d6>
 80159b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80159b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80159b4:	2510      	movs	r5, #16
 80159b6:	1a9c      	subs	r4, r3, r2
 80159b8:	2c00      	cmp	r4, #0
 80159ba:	dc00      	bgt.n	80159be <_svfprintf_r+0x141a>
 80159bc:	e548      	b.n	8015450 <_svfprintf_r+0xeac>
 80159be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80159c0:	4921      	ldr	r1, [pc, #132]	; (8015a48 <_svfprintf_r+0x14a4>)
 80159c2:	9308      	str	r3, [sp, #32]
 80159c4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80159c6:	3301      	adds	r3, #1
 80159c8:	6039      	str	r1, [r7, #0]
 80159ca:	2c10      	cmp	r4, #16
 80159cc:	dc19      	bgt.n	8015a02 <_svfprintf_r+0x145e>
 80159ce:	607c      	str	r4, [r7, #4]
 80159d0:	18a4      	adds	r4, r4, r2
 80159d2:	942e      	str	r4, [sp, #184]	; 0xb8
 80159d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80159d6:	2b07      	cmp	r3, #7
 80159d8:	dc00      	bgt.n	80159dc <_svfprintf_r+0x1438>
 80159da:	e539      	b.n	8015450 <_svfprintf_r+0xeac>
 80159dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80159de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159e2:	f001 ff33 	bl	801784c <__ssprint_r>
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d100      	bne.n	80159ec <_svfprintf_r+0x1448>
 80159ea:	e531      	b.n	8015450 <_svfprintf_r+0xeac>
 80159ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d101      	bne.n	80159f6 <_svfprintf_r+0x1452>
 80159f2:	f7ff f908 	bl	8014c06 <_svfprintf_r+0x662>
 80159f6:	0019      	movs	r1, r3
 80159f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159fa:	f000 ff19 	bl	8016830 <_free_r>
 80159fe:	f7ff f902 	bl	8014c06 <_svfprintf_r+0x662>
 8015a02:	3210      	adds	r2, #16
 8015a04:	607d      	str	r5, [r7, #4]
 8015a06:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a08:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	2b07      	cmp	r3, #7
 8015a0e:	dd07      	ble.n	8015a20 <_svfprintf_r+0x147c>
 8015a10:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a16:	f001 ff19 	bl	801784c <__ssprint_r>
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	d1e6      	bne.n	80159ec <_svfprintf_r+0x1448>
 8015a1e:	af2f      	add	r7, sp, #188	; 0xbc
 8015a20:	3c10      	subs	r4, #16
 8015a22:	e7cc      	b.n	80159be <_svfprintf_r+0x141a>
 8015a24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a28:	f000 ff02 	bl	8016830 <_free_r>
 8015a2c:	e52a      	b.n	8015484 <_svfprintf_r+0xee0>
 8015a2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a30:	9306      	str	r3, [sp, #24]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d101      	bne.n	8015a3a <_svfprintf_r+0x1496>
 8015a36:	f7ff f8e6 	bl	8014c06 <_svfprintf_r+0x662>
 8015a3a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a40:	f001 ff04 	bl	801784c <__ssprint_r>
 8015a44:	f7ff f8df 	bl	8014c06 <_svfprintf_r+0x662>
 8015a48:	0801a9c4 	.word	0x0801a9c4

08015a4c <sysconf>:
 8015a4c:	2380      	movs	r3, #128	; 0x80
 8015a4e:	b510      	push	{r4, lr}
 8015a50:	015b      	lsls	r3, r3, #5
 8015a52:	2808      	cmp	r0, #8
 8015a54:	d004      	beq.n	8015a60 <sysconf+0x14>
 8015a56:	f000 fe7d 	bl	8016754 <__errno>
 8015a5a:	2316      	movs	r3, #22
 8015a5c:	6003      	str	r3, [r0, #0]
 8015a5e:	3b17      	subs	r3, #23
 8015a60:	0018      	movs	r0, r3
 8015a62:	bd10      	pop	{r4, pc}

08015a64 <__ascii_wctomb>:
 8015a64:	1e0b      	subs	r3, r1, #0
 8015a66:	d004      	beq.n	8015a72 <__ascii_wctomb+0xe>
 8015a68:	2aff      	cmp	r2, #255	; 0xff
 8015a6a:	d904      	bls.n	8015a76 <__ascii_wctomb+0x12>
 8015a6c:	238a      	movs	r3, #138	; 0x8a
 8015a6e:	6003      	str	r3, [r0, #0]
 8015a70:	3b8b      	subs	r3, #139	; 0x8b
 8015a72:	0018      	movs	r0, r3
 8015a74:	4770      	bx	lr
 8015a76:	700a      	strb	r2, [r1, #0]
 8015a78:	2301      	movs	r3, #1
 8015a7a:	e7fa      	b.n	8015a72 <__ascii_wctomb+0xe>

08015a7c <register_fini>:
 8015a7c:	4b03      	ldr	r3, [pc, #12]	; (8015a8c <register_fini+0x10>)
 8015a7e:	b510      	push	{r4, lr}
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d002      	beq.n	8015a8a <register_fini+0xe>
 8015a84:	4802      	ldr	r0, [pc, #8]	; (8015a90 <register_fini+0x14>)
 8015a86:	f000 f805 	bl	8015a94 <atexit>
 8015a8a:	bd10      	pop	{r4, pc}
 8015a8c:	00000000 	.word	0x00000000
 8015a90:	08016761 	.word	0x08016761

08015a94 <atexit>:
 8015a94:	2300      	movs	r3, #0
 8015a96:	b510      	push	{r4, lr}
 8015a98:	0001      	movs	r1, r0
 8015a9a:	001a      	movs	r2, r3
 8015a9c:	0018      	movs	r0, r3
 8015a9e:	f001 ff53 	bl	8017948 <__register_exitproc>
 8015aa2:	bd10      	pop	{r4, pc}

08015aa4 <quorem>:
 8015aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aa6:	6903      	ldr	r3, [r0, #16]
 8015aa8:	690c      	ldr	r4, [r1, #16]
 8015aaa:	b089      	sub	sp, #36	; 0x24
 8015aac:	0007      	movs	r7, r0
 8015aae:	9105      	str	r1, [sp, #20]
 8015ab0:	2600      	movs	r6, #0
 8015ab2:	42a3      	cmp	r3, r4
 8015ab4:	db65      	blt.n	8015b82 <quorem+0xde>
 8015ab6:	000b      	movs	r3, r1
 8015ab8:	3c01      	subs	r4, #1
 8015aba:	3314      	adds	r3, #20
 8015abc:	00a5      	lsls	r5, r4, #2
 8015abe:	9303      	str	r3, [sp, #12]
 8015ac0:	195b      	adds	r3, r3, r5
 8015ac2:	9304      	str	r3, [sp, #16]
 8015ac4:	0003      	movs	r3, r0
 8015ac6:	3314      	adds	r3, #20
 8015ac8:	9302      	str	r3, [sp, #8]
 8015aca:	195d      	adds	r5, r3, r5
 8015acc:	9b04      	ldr	r3, [sp, #16]
 8015ace:	6828      	ldr	r0, [r5, #0]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	1c59      	adds	r1, r3, #1
 8015ad4:	9301      	str	r3, [sp, #4]
 8015ad6:	f7ea fb3b 	bl	8000150 <__udivsi3>
 8015ada:	9001      	str	r0, [sp, #4]
 8015adc:	42b0      	cmp	r0, r6
 8015ade:	d029      	beq.n	8015b34 <quorem+0x90>
 8015ae0:	9b03      	ldr	r3, [sp, #12]
 8015ae2:	9802      	ldr	r0, [sp, #8]
 8015ae4:	469c      	mov	ip, r3
 8015ae6:	9606      	str	r6, [sp, #24]
 8015ae8:	4662      	mov	r2, ip
 8015aea:	ca08      	ldmia	r2!, {r3}
 8015aec:	4694      	mov	ip, r2
 8015aee:	9a01      	ldr	r2, [sp, #4]
 8015af0:	b299      	uxth	r1, r3
 8015af2:	4351      	muls	r1, r2
 8015af4:	0c1b      	lsrs	r3, r3, #16
 8015af6:	4353      	muls	r3, r2
 8015af8:	1989      	adds	r1, r1, r6
 8015afa:	0c0a      	lsrs	r2, r1, #16
 8015afc:	189b      	adds	r3, r3, r2
 8015afe:	9307      	str	r3, [sp, #28]
 8015b00:	0c1e      	lsrs	r6, r3, #16
 8015b02:	6803      	ldr	r3, [r0, #0]
 8015b04:	b289      	uxth	r1, r1
 8015b06:	b29a      	uxth	r2, r3
 8015b08:	9b06      	ldr	r3, [sp, #24]
 8015b0a:	18d2      	adds	r2, r2, r3
 8015b0c:	6803      	ldr	r3, [r0, #0]
 8015b0e:	1a52      	subs	r2, r2, r1
 8015b10:	0c19      	lsrs	r1, r3, #16
 8015b12:	466b      	mov	r3, sp
 8015b14:	8b9b      	ldrh	r3, [r3, #28]
 8015b16:	1acb      	subs	r3, r1, r3
 8015b18:	1411      	asrs	r1, r2, #16
 8015b1a:	185b      	adds	r3, r3, r1
 8015b1c:	1419      	asrs	r1, r3, #16
 8015b1e:	b292      	uxth	r2, r2
 8015b20:	041b      	lsls	r3, r3, #16
 8015b22:	431a      	orrs	r2, r3
 8015b24:	9b04      	ldr	r3, [sp, #16]
 8015b26:	9106      	str	r1, [sp, #24]
 8015b28:	c004      	stmia	r0!, {r2}
 8015b2a:	4563      	cmp	r3, ip
 8015b2c:	d2dc      	bcs.n	8015ae8 <quorem+0x44>
 8015b2e:	682b      	ldr	r3, [r5, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d02d      	beq.n	8015b90 <quorem+0xec>
 8015b34:	9905      	ldr	r1, [sp, #20]
 8015b36:	0038      	movs	r0, r7
 8015b38:	f001 fcb2 	bl	80174a0 <__mcmp>
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	db1f      	blt.n	8015b80 <quorem+0xdc>
 8015b40:	2500      	movs	r5, #0
 8015b42:	9b01      	ldr	r3, [sp, #4]
 8015b44:	9802      	ldr	r0, [sp, #8]
 8015b46:	3301      	adds	r3, #1
 8015b48:	9903      	ldr	r1, [sp, #12]
 8015b4a:	9301      	str	r3, [sp, #4]
 8015b4c:	6802      	ldr	r2, [r0, #0]
 8015b4e:	c908      	ldmia	r1!, {r3}
 8015b50:	b292      	uxth	r2, r2
 8015b52:	1955      	adds	r5, r2, r5
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	1aaa      	subs	r2, r5, r2
 8015b58:	6805      	ldr	r5, [r0, #0]
 8015b5a:	0c1b      	lsrs	r3, r3, #16
 8015b5c:	0c2d      	lsrs	r5, r5, #16
 8015b5e:	1aeb      	subs	r3, r5, r3
 8015b60:	1415      	asrs	r5, r2, #16
 8015b62:	195b      	adds	r3, r3, r5
 8015b64:	141d      	asrs	r5, r3, #16
 8015b66:	b292      	uxth	r2, r2
 8015b68:	041b      	lsls	r3, r3, #16
 8015b6a:	4313      	orrs	r3, r2
 8015b6c:	c008      	stmia	r0!, {r3}
 8015b6e:	9b04      	ldr	r3, [sp, #16]
 8015b70:	428b      	cmp	r3, r1
 8015b72:	d2eb      	bcs.n	8015b4c <quorem+0xa8>
 8015b74:	9a02      	ldr	r2, [sp, #8]
 8015b76:	00a3      	lsls	r3, r4, #2
 8015b78:	18d3      	adds	r3, r2, r3
 8015b7a:	681a      	ldr	r2, [r3, #0]
 8015b7c:	2a00      	cmp	r2, #0
 8015b7e:	d011      	beq.n	8015ba4 <quorem+0x100>
 8015b80:	9e01      	ldr	r6, [sp, #4]
 8015b82:	0030      	movs	r0, r6
 8015b84:	b009      	add	sp, #36	; 0x24
 8015b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b88:	682b      	ldr	r3, [r5, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d104      	bne.n	8015b98 <quorem+0xf4>
 8015b8e:	3c01      	subs	r4, #1
 8015b90:	9b02      	ldr	r3, [sp, #8]
 8015b92:	3d04      	subs	r5, #4
 8015b94:	42ab      	cmp	r3, r5
 8015b96:	d3f7      	bcc.n	8015b88 <quorem+0xe4>
 8015b98:	613c      	str	r4, [r7, #16]
 8015b9a:	e7cb      	b.n	8015b34 <quorem+0x90>
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	2a00      	cmp	r2, #0
 8015ba0:	d104      	bne.n	8015bac <quorem+0x108>
 8015ba2:	3c01      	subs	r4, #1
 8015ba4:	9a02      	ldr	r2, [sp, #8]
 8015ba6:	3b04      	subs	r3, #4
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d3f7      	bcc.n	8015b9c <quorem+0xf8>
 8015bac:	613c      	str	r4, [r7, #16]
 8015bae:	e7e7      	b.n	8015b80 <quorem+0xdc>

08015bb0 <_dtoa_r>:
 8015bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bb2:	0014      	movs	r4, r2
 8015bb4:	001d      	movs	r5, r3
 8015bb6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015bb8:	b09b      	sub	sp, #108	; 0x6c
 8015bba:	9002      	str	r0, [sp, #8]
 8015bbc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8015bbe:	9406      	str	r4, [sp, #24]
 8015bc0:	9507      	str	r5, [sp, #28]
 8015bc2:	2900      	cmp	r1, #0
 8015bc4:	d009      	beq.n	8015bda <_dtoa_r+0x2a>
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015bca:	4093      	lsls	r3, r2
 8015bcc:	604a      	str	r2, [r1, #4]
 8015bce:	608b      	str	r3, [r1, #8]
 8015bd0:	f001 fa6a 	bl	80170a8 <_Bfree>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	9a02      	ldr	r2, [sp, #8]
 8015bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8015bda:	2d00      	cmp	r5, #0
 8015bdc:	da20      	bge.n	8015c20 <_dtoa_r+0x70>
 8015bde:	2301      	movs	r3, #1
 8015be0:	6033      	str	r3, [r6, #0]
 8015be2:	006b      	lsls	r3, r5, #1
 8015be4:	085b      	lsrs	r3, r3, #1
 8015be6:	9307      	str	r3, [sp, #28]
 8015be8:	9c07      	ldr	r4, [sp, #28]
 8015bea:	4bb2      	ldr	r3, [pc, #712]	; (8015eb4 <_dtoa_r+0x304>)
 8015bec:	0022      	movs	r2, r4
 8015bee:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bf0:	401a      	ands	r2, r3
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d117      	bne.n	8015c26 <_dtoa_r+0x76>
 8015bf6:	4bb0      	ldr	r3, [pc, #704]	; (8015eb8 <_dtoa_r+0x308>)
 8015bf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015bfa:	6013      	str	r3, [r2, #0]
 8015bfc:	9b06      	ldr	r3, [sp, #24]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d103      	bne.n	8015c0a <_dtoa_r+0x5a>
 8015c02:	0324      	lsls	r4, r4, #12
 8015c04:	d101      	bne.n	8015c0a <_dtoa_r+0x5a>
 8015c06:	f000 fd89 	bl	801671c <_dtoa_r+0xb6c>
 8015c0a:	4bac      	ldr	r3, [pc, #688]	; (8015ebc <_dtoa_r+0x30c>)
 8015c0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015c0e:	9308      	str	r3, [sp, #32]
 8015c10:	2a00      	cmp	r2, #0
 8015c12:	d002      	beq.n	8015c1a <_dtoa_r+0x6a>
 8015c14:	4baa      	ldr	r3, [pc, #680]	; (8015ec0 <_dtoa_r+0x310>)
 8015c16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015c18:	6013      	str	r3, [r2, #0]
 8015c1a:	9808      	ldr	r0, [sp, #32]
 8015c1c:	b01b      	add	sp, #108	; 0x6c
 8015c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c20:	2300      	movs	r3, #0
 8015c22:	6033      	str	r3, [r6, #0]
 8015c24:	e7e0      	b.n	8015be8 <_dtoa_r+0x38>
 8015c26:	9e06      	ldr	r6, [sp, #24]
 8015c28:	9f07      	ldr	r7, [sp, #28]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	0030      	movs	r0, r6
 8015c30:	0039      	movs	r1, r7
 8015c32:	f7ea fc13 	bl	800045c <__aeabi_dcmpeq>
 8015c36:	1e05      	subs	r5, r0, #0
 8015c38:	d00b      	beq.n	8015c52 <_dtoa_r+0xa2>
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015c3e:	6013      	str	r3, [r2, #0]
 8015c40:	4ba0      	ldr	r3, [pc, #640]	; (8015ec4 <_dtoa_r+0x314>)
 8015c42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015c44:	9308      	str	r3, [sp, #32]
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	d0e7      	beq.n	8015c1a <_dtoa_r+0x6a>
 8015c4a:	4a9f      	ldr	r2, [pc, #636]	; (8015ec8 <_dtoa_r+0x318>)
 8015c4c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015c4e:	600a      	str	r2, [r1, #0]
 8015c50:	e7e3      	b.n	8015c1a <_dtoa_r+0x6a>
 8015c52:	ab18      	add	r3, sp, #96	; 0x60
 8015c54:	9301      	str	r3, [sp, #4]
 8015c56:	ab19      	add	r3, sp, #100	; 0x64
 8015c58:	9300      	str	r3, [sp, #0]
 8015c5a:	0032      	movs	r2, r6
 8015c5c:	003b      	movs	r3, r7
 8015c5e:	9802      	ldr	r0, [sp, #8]
 8015c60:	f001 fd0e 	bl	8017680 <__d2b>
 8015c64:	0063      	lsls	r3, r4, #1
 8015c66:	9003      	str	r0, [sp, #12]
 8015c68:	0d5b      	lsrs	r3, r3, #21
 8015c6a:	d074      	beq.n	8015d56 <_dtoa_r+0x1a6>
 8015c6c:	033a      	lsls	r2, r7, #12
 8015c6e:	4c97      	ldr	r4, [pc, #604]	; (8015ecc <_dtoa_r+0x31c>)
 8015c70:	0b12      	lsrs	r2, r2, #12
 8015c72:	4314      	orrs	r4, r2
 8015c74:	0021      	movs	r1, r4
 8015c76:	4a96      	ldr	r2, [pc, #600]	; (8015ed0 <_dtoa_r+0x320>)
 8015c78:	0030      	movs	r0, r6
 8015c7a:	9516      	str	r5, [sp, #88]	; 0x58
 8015c7c:	189e      	adds	r6, r3, r2
 8015c7e:	2200      	movs	r2, #0
 8015c80:	4b94      	ldr	r3, [pc, #592]	; (8015ed4 <_dtoa_r+0x324>)
 8015c82:	f7ec fb49 	bl	8002318 <__aeabi_dsub>
 8015c86:	4a94      	ldr	r2, [pc, #592]	; (8015ed8 <_dtoa_r+0x328>)
 8015c88:	4b94      	ldr	r3, [pc, #592]	; (8015edc <_dtoa_r+0x32c>)
 8015c8a:	f7ec f8d3 	bl	8001e34 <__aeabi_dmul>
 8015c8e:	4a94      	ldr	r2, [pc, #592]	; (8015ee0 <_dtoa_r+0x330>)
 8015c90:	4b94      	ldr	r3, [pc, #592]	; (8015ee4 <_dtoa_r+0x334>)
 8015c92:	f7eb f9a9 	bl	8000fe8 <__aeabi_dadd>
 8015c96:	0004      	movs	r4, r0
 8015c98:	0030      	movs	r0, r6
 8015c9a:	000d      	movs	r5, r1
 8015c9c:	f7ec fed6 	bl	8002a4c <__aeabi_i2d>
 8015ca0:	4a91      	ldr	r2, [pc, #580]	; (8015ee8 <_dtoa_r+0x338>)
 8015ca2:	4b92      	ldr	r3, [pc, #584]	; (8015eec <_dtoa_r+0x33c>)
 8015ca4:	f7ec f8c6 	bl	8001e34 <__aeabi_dmul>
 8015ca8:	0002      	movs	r2, r0
 8015caa:	000b      	movs	r3, r1
 8015cac:	0020      	movs	r0, r4
 8015cae:	0029      	movs	r1, r5
 8015cb0:	f7eb f99a 	bl	8000fe8 <__aeabi_dadd>
 8015cb4:	0004      	movs	r4, r0
 8015cb6:	000d      	movs	r5, r1
 8015cb8:	f7ec fe92 	bl	80029e0 <__aeabi_d2iz>
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	0007      	movs	r7, r0
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	0020      	movs	r0, r4
 8015cc4:	0029      	movs	r1, r5
 8015cc6:	f7ea fbcf 	bl	8000468 <__aeabi_dcmplt>
 8015cca:	2800      	cmp	r0, #0
 8015ccc:	d009      	beq.n	8015ce2 <_dtoa_r+0x132>
 8015cce:	0038      	movs	r0, r7
 8015cd0:	f7ec febc 	bl	8002a4c <__aeabi_i2d>
 8015cd4:	002b      	movs	r3, r5
 8015cd6:	0022      	movs	r2, r4
 8015cd8:	f7ea fbc0 	bl	800045c <__aeabi_dcmpeq>
 8015cdc:	4243      	negs	r3, r0
 8015cde:	4158      	adcs	r0, r3
 8015ce0:	1a3f      	subs	r7, r7, r0
 8015ce2:	2301      	movs	r3, #1
 8015ce4:	9314      	str	r3, [sp, #80]	; 0x50
 8015ce6:	2f16      	cmp	r7, #22
 8015ce8:	d80d      	bhi.n	8015d06 <_dtoa_r+0x156>
 8015cea:	4981      	ldr	r1, [pc, #516]	; (8015ef0 <_dtoa_r+0x340>)
 8015cec:	00fb      	lsls	r3, r7, #3
 8015cee:	18c9      	adds	r1, r1, r3
 8015cf0:	6808      	ldr	r0, [r1, #0]
 8015cf2:	6849      	ldr	r1, [r1, #4]
 8015cf4:	9a06      	ldr	r2, [sp, #24]
 8015cf6:	9b07      	ldr	r3, [sp, #28]
 8015cf8:	f7ea fbca 	bl	8000490 <__aeabi_dcmpgt>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d046      	beq.n	8015d8e <_dtoa_r+0x1de>
 8015d00:	2300      	movs	r3, #0
 8015d02:	3f01      	subs	r7, #1
 8015d04:	9314      	str	r3, [sp, #80]	; 0x50
 8015d06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015d08:	1b9e      	subs	r6, r3, r6
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8015d0e:	0033      	movs	r3, r6
 8015d10:	3b01      	subs	r3, #1
 8015d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d14:	d504      	bpl.n	8015d20 <_dtoa_r+0x170>
 8015d16:	2301      	movs	r3, #1
 8015d18:	1b9b      	subs	r3, r3, r6
 8015d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d20:	2f00      	cmp	r7, #0
 8015d22:	db36      	blt.n	8015d92 <_dtoa_r+0x1e2>
 8015d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d26:	9711      	str	r7, [sp, #68]	; 0x44
 8015d28:	19db      	adds	r3, r3, r7
 8015d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	9304      	str	r3, [sp, #16]
 8015d30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015d32:	2401      	movs	r4, #1
 8015d34:	2b09      	cmp	r3, #9
 8015d36:	d900      	bls.n	8015d3a <_dtoa_r+0x18a>
 8015d38:	e082      	b.n	8015e40 <_dtoa_r+0x290>
 8015d3a:	2b05      	cmp	r3, #5
 8015d3c:	dd02      	ble.n	8015d44 <_dtoa_r+0x194>
 8015d3e:	2400      	movs	r4, #0
 8015d40:	3b04      	subs	r3, #4
 8015d42:	9320      	str	r3, [sp, #128]	; 0x80
 8015d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015d46:	1e98      	subs	r0, r3, #2
 8015d48:	2803      	cmp	r0, #3
 8015d4a:	d900      	bls.n	8015d4e <_dtoa_r+0x19e>
 8015d4c:	e082      	b.n	8015e54 <_dtoa_r+0x2a4>
 8015d4e:	f7ea f9eb 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015d52:	7573      	.short	0x7573
 8015d54:	6828      	.short	0x6828
 8015d56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015d5a:	189e      	adds	r6, r3, r2
 8015d5c:	4b65      	ldr	r3, [pc, #404]	; (8015ef4 <_dtoa_r+0x344>)
 8015d5e:	18f2      	adds	r2, r6, r3
 8015d60:	2a20      	cmp	r2, #32
 8015d62:	dd0f      	ble.n	8015d84 <_dtoa_r+0x1d4>
 8015d64:	2340      	movs	r3, #64	; 0x40
 8015d66:	1a9b      	subs	r3, r3, r2
 8015d68:	409c      	lsls	r4, r3
 8015d6a:	4b63      	ldr	r3, [pc, #396]	; (8015ef8 <_dtoa_r+0x348>)
 8015d6c:	9806      	ldr	r0, [sp, #24]
 8015d6e:	18f3      	adds	r3, r6, r3
 8015d70:	40d8      	lsrs	r0, r3
 8015d72:	4320      	orrs	r0, r4
 8015d74:	f7ec fea4 	bl	8002ac0 <__aeabi_ui2d>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	4c60      	ldr	r4, [pc, #384]	; (8015efc <_dtoa_r+0x34c>)
 8015d7c:	3e01      	subs	r6, #1
 8015d7e:	1909      	adds	r1, r1, r4
 8015d80:	9316      	str	r3, [sp, #88]	; 0x58
 8015d82:	e77c      	b.n	8015c7e <_dtoa_r+0xce>
 8015d84:	2320      	movs	r3, #32
 8015d86:	9806      	ldr	r0, [sp, #24]
 8015d88:	1a9b      	subs	r3, r3, r2
 8015d8a:	4098      	lsls	r0, r3
 8015d8c:	e7f2      	b.n	8015d74 <_dtoa_r+0x1c4>
 8015d8e:	9014      	str	r0, [sp, #80]	; 0x50
 8015d90:	e7b9      	b.n	8015d06 <_dtoa_r+0x156>
 8015d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d94:	1bdb      	subs	r3, r3, r7
 8015d96:	930a      	str	r3, [sp, #40]	; 0x28
 8015d98:	427b      	negs	r3, r7
 8015d9a:	9304      	str	r3, [sp, #16]
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	9311      	str	r3, [sp, #68]	; 0x44
 8015da0:	e7c6      	b.n	8015d30 <_dtoa_r+0x180>
 8015da2:	2301      	movs	r3, #1
 8015da4:	930d      	str	r3, [sp, #52]	; 0x34
 8015da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	dd57      	ble.n	8015e5c <_dtoa_r+0x2ac>
 8015dac:	930c      	str	r3, [sp, #48]	; 0x30
 8015dae:	9309      	str	r3, [sp, #36]	; 0x24
 8015db0:	2200      	movs	r2, #0
 8015db2:	9902      	ldr	r1, [sp, #8]
 8015db4:	644a      	str	r2, [r1, #68]	; 0x44
 8015db6:	3204      	adds	r2, #4
 8015db8:	0010      	movs	r0, r2
 8015dba:	9902      	ldr	r1, [sp, #8]
 8015dbc:	3014      	adds	r0, #20
 8015dbe:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015dc0:	4298      	cmp	r0, r3
 8015dc2:	d950      	bls.n	8015e66 <_dtoa_r+0x2b6>
 8015dc4:	9802      	ldr	r0, [sp, #8]
 8015dc6:	f001 f947 	bl	8017058 <_Balloc>
 8015dca:	9b02      	ldr	r3, [sp, #8]
 8015dcc:	9008      	str	r0, [sp, #32]
 8015dce:	6418      	str	r0, [r3, #64]	; 0x40
 8015dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd2:	2b0e      	cmp	r3, #14
 8015dd4:	d900      	bls.n	8015dd8 <_dtoa_r+0x228>
 8015dd6:	e10c      	b.n	8015ff2 <_dtoa_r+0x442>
 8015dd8:	2c00      	cmp	r4, #0
 8015dda:	d100      	bne.n	8015dde <_dtoa_r+0x22e>
 8015ddc:	e109      	b.n	8015ff2 <_dtoa_r+0x442>
 8015dde:	9b06      	ldr	r3, [sp, #24]
 8015de0:	9c07      	ldr	r4, [sp, #28]
 8015de2:	9312      	str	r3, [sp, #72]	; 0x48
 8015de4:	9413      	str	r4, [sp, #76]	; 0x4c
 8015de6:	2f00      	cmp	r7, #0
 8015de8:	dc00      	bgt.n	8015dec <_dtoa_r+0x23c>
 8015dea:	e08b      	b.n	8015f04 <_dtoa_r+0x354>
 8015dec:	210f      	movs	r1, #15
 8015dee:	003a      	movs	r2, r7
 8015df0:	4b3f      	ldr	r3, [pc, #252]	; (8015ef0 <_dtoa_r+0x340>)
 8015df2:	400a      	ands	r2, r1
 8015df4:	00d2      	lsls	r2, r2, #3
 8015df6:	189b      	adds	r3, r3, r2
 8015df8:	681d      	ldr	r5, [r3, #0]
 8015dfa:	685e      	ldr	r6, [r3, #4]
 8015dfc:	2302      	movs	r3, #2
 8015dfe:	113c      	asrs	r4, r7, #4
 8015e00:	930e      	str	r3, [sp, #56]	; 0x38
 8015e02:	06e3      	lsls	r3, r4, #27
 8015e04:	d50b      	bpl.n	8015e1e <_dtoa_r+0x26e>
 8015e06:	4b3e      	ldr	r3, [pc, #248]	; (8015f00 <_dtoa_r+0x350>)
 8015e08:	400c      	ands	r4, r1
 8015e0a:	6a1a      	ldr	r2, [r3, #32]
 8015e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015e10:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015e12:	f7eb fc05 	bl	8001620 <__aeabi_ddiv>
 8015e16:	2303      	movs	r3, #3
 8015e18:	9006      	str	r0, [sp, #24]
 8015e1a:	9107      	str	r1, [sp, #28]
 8015e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8015e1e:	2300      	movs	r3, #0
 8015e20:	e03b      	b.n	8015e9a <_dtoa_r+0x2ea>
 8015e22:	2301      	movs	r3, #1
 8015e24:	930d      	str	r3, [sp, #52]	; 0x34
 8015e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e28:	18fb      	adds	r3, r7, r3
 8015e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	dcbd      	bgt.n	8015db0 <_dtoa_r+0x200>
 8015e34:	2301      	movs	r3, #1
 8015e36:	e7bb      	b.n	8015db0 <_dtoa_r+0x200>
 8015e38:	2300      	movs	r3, #0
 8015e3a:	e7b3      	b.n	8015da4 <_dtoa_r+0x1f4>
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	e7f1      	b.n	8015e24 <_dtoa_r+0x274>
 8015e40:	2300      	movs	r3, #0
 8015e42:	940d      	str	r4, [sp, #52]	; 0x34
 8015e44:	9320      	str	r3, [sp, #128]	; 0x80
 8015e46:	3b01      	subs	r3, #1
 8015e48:	2200      	movs	r2, #0
 8015e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8015e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e4e:	3313      	adds	r3, #19
 8015e50:	9221      	str	r2, [sp, #132]	; 0x84
 8015e52:	e7ad      	b.n	8015db0 <_dtoa_r+0x200>
 8015e54:	2301      	movs	r3, #1
 8015e56:	930d      	str	r3, [sp, #52]	; 0x34
 8015e58:	3b02      	subs	r3, #2
 8015e5a:	e7f5      	b.n	8015e48 <_dtoa_r+0x298>
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8015e60:	9309      	str	r3, [sp, #36]	; 0x24
 8015e62:	001a      	movs	r2, r3
 8015e64:	e7f4      	b.n	8015e50 <_dtoa_r+0x2a0>
 8015e66:	9802      	ldr	r0, [sp, #8]
 8015e68:	3101      	adds	r1, #1
 8015e6a:	6441      	str	r1, [r0, #68]	; 0x44
 8015e6c:	0052      	lsls	r2, r2, #1
 8015e6e:	e7a3      	b.n	8015db8 <_dtoa_r+0x208>
 8015e70:	2301      	movs	r3, #1
 8015e72:	421c      	tst	r4, r3
 8015e74:	d00e      	beq.n	8015e94 <_dtoa_r+0x2e4>
 8015e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e78:	4a21      	ldr	r2, [pc, #132]	; (8015f00 <_dtoa_r+0x350>)
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8015e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e80:	0028      	movs	r0, r5
 8015e82:	00db      	lsls	r3, r3, #3
 8015e84:	189b      	adds	r3, r3, r2
 8015e86:	0031      	movs	r1, r6
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	f7eb ffd2 	bl	8001e34 <__aeabi_dmul>
 8015e90:	0005      	movs	r5, r0
 8015e92:	000e      	movs	r6, r1
 8015e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e96:	1064      	asrs	r4, r4, #1
 8015e98:	3301      	adds	r3, #1
 8015e9a:	9310      	str	r3, [sp, #64]	; 0x40
 8015e9c:	2c00      	cmp	r4, #0
 8015e9e:	d1e7      	bne.n	8015e70 <_dtoa_r+0x2c0>
 8015ea0:	9806      	ldr	r0, [sp, #24]
 8015ea2:	9907      	ldr	r1, [sp, #28]
 8015ea4:	002a      	movs	r2, r5
 8015ea6:	0033      	movs	r3, r6
 8015ea8:	f7eb fbba 	bl	8001620 <__aeabi_ddiv>
 8015eac:	9006      	str	r0, [sp, #24]
 8015eae:	9107      	str	r1, [sp, #28]
 8015eb0:	e043      	b.n	8015f3a <_dtoa_r+0x38a>
 8015eb2:	46c0      	nop			; (mov r8, r8)
 8015eb4:	7ff00000 	.word	0x7ff00000
 8015eb8:	0000270f 	.word	0x0000270f
 8015ebc:	0801aaee 	.word	0x0801aaee
 8015ec0:	0801aaf1 	.word	0x0801aaf1
 8015ec4:	0801a9c2 	.word	0x0801a9c2
 8015ec8:	0801a9c3 	.word	0x0801a9c3
 8015ecc:	3ff00000 	.word	0x3ff00000
 8015ed0:	fffffc01 	.word	0xfffffc01
 8015ed4:	3ff80000 	.word	0x3ff80000
 8015ed8:	636f4361 	.word	0x636f4361
 8015edc:	3fd287a7 	.word	0x3fd287a7
 8015ee0:	8b60c8b3 	.word	0x8b60c8b3
 8015ee4:	3fc68a28 	.word	0x3fc68a28
 8015ee8:	509f79fb 	.word	0x509f79fb
 8015eec:	3fd34413 	.word	0x3fd34413
 8015ef0:	0801ab20 	.word	0x0801ab20
 8015ef4:	00000432 	.word	0x00000432
 8015ef8:	00000412 	.word	0x00000412
 8015efc:	fe100000 	.word	0xfe100000
 8015f00:	0801aaf8 	.word	0x0801aaf8
 8015f04:	2302      	movs	r3, #2
 8015f06:	930e      	str	r3, [sp, #56]	; 0x38
 8015f08:	2f00      	cmp	r7, #0
 8015f0a:	d016      	beq.n	8015f3a <_dtoa_r+0x38a>
 8015f0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015f0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015f10:	427c      	negs	r4, r7
 8015f12:	330d      	adds	r3, #13
 8015f14:	4023      	ands	r3, r4
 8015f16:	4acf      	ldr	r2, [pc, #828]	; (8016254 <_dtoa_r+0x6a4>)
 8015f18:	00db      	lsls	r3, r3, #3
 8015f1a:	18d3      	adds	r3, r2, r3
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	f7eb ff88 	bl	8001e34 <__aeabi_dmul>
 8015f24:	2300      	movs	r3, #0
 8015f26:	2601      	movs	r6, #1
 8015f28:	001d      	movs	r5, r3
 8015f2a:	9006      	str	r0, [sp, #24]
 8015f2c:	9107      	str	r1, [sp, #28]
 8015f2e:	1124      	asrs	r4, r4, #4
 8015f30:	2c00      	cmp	r4, #0
 8015f32:	d000      	beq.n	8015f36 <_dtoa_r+0x386>
 8015f34:	e08c      	b.n	8016050 <_dtoa_r+0x4a0>
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d1b8      	bne.n	8015eac <_dtoa_r+0x2fc>
 8015f3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d100      	bne.n	8015f42 <_dtoa_r+0x392>
 8015f40:	e096      	b.n	8016070 <_dtoa_r+0x4c0>
 8015f42:	9c06      	ldr	r4, [sp, #24]
 8015f44:	9d07      	ldr	r5, [sp, #28]
 8015f46:	2200      	movs	r2, #0
 8015f48:	4bc3      	ldr	r3, [pc, #780]	; (8016258 <_dtoa_r+0x6a8>)
 8015f4a:	0020      	movs	r0, r4
 8015f4c:	0029      	movs	r1, r5
 8015f4e:	f7ea fa8b 	bl	8000468 <__aeabi_dcmplt>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	d100      	bne.n	8015f58 <_dtoa_r+0x3a8>
 8015f56:	e08b      	b.n	8016070 <_dtoa_r+0x4c0>
 8015f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d100      	bne.n	8015f60 <_dtoa_r+0x3b0>
 8015f5e:	e087      	b.n	8016070 <_dtoa_r+0x4c0>
 8015f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	dd41      	ble.n	8015fea <_dtoa_r+0x43a>
 8015f66:	4bbd      	ldr	r3, [pc, #756]	; (801625c <_dtoa_r+0x6ac>)
 8015f68:	2200      	movs	r2, #0
 8015f6a:	0020      	movs	r0, r4
 8015f6c:	0029      	movs	r1, r5
 8015f6e:	f7eb ff61 	bl	8001e34 <__aeabi_dmul>
 8015f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f74:	9006      	str	r0, [sp, #24]
 8015f76:	9107      	str	r1, [sp, #28]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	930e      	str	r3, [sp, #56]	; 0x38
 8015f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f7e:	1e7e      	subs	r6, r7, #1
 8015f80:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015f82:	9310      	str	r3, [sp, #64]	; 0x40
 8015f84:	f7ec fd62 	bl	8002a4c <__aeabi_i2d>
 8015f88:	9a06      	ldr	r2, [sp, #24]
 8015f8a:	9b07      	ldr	r3, [sp, #28]
 8015f8c:	f7eb ff52 	bl	8001e34 <__aeabi_dmul>
 8015f90:	2200      	movs	r2, #0
 8015f92:	4bb3      	ldr	r3, [pc, #716]	; (8016260 <_dtoa_r+0x6b0>)
 8015f94:	f7eb f828 	bl	8000fe8 <__aeabi_dadd>
 8015f98:	4ab2      	ldr	r2, [pc, #712]	; (8016264 <_dtoa_r+0x6b4>)
 8015f9a:	900e      	str	r0, [sp, #56]	; 0x38
 8015f9c:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015fa0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015fa2:	4694      	mov	ip, r2
 8015fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fa6:	4463      	add	r3, ip
 8015fa8:	9315      	str	r3, [sp, #84]	; 0x54
 8015faa:	001d      	movs	r5, r3
 8015fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d161      	bne.n	8016076 <_dtoa_r+0x4c6>
 8015fb2:	9806      	ldr	r0, [sp, #24]
 8015fb4:	9907      	ldr	r1, [sp, #28]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	4bab      	ldr	r3, [pc, #684]	; (8016268 <_dtoa_r+0x6b8>)
 8015fba:	f7ec f9ad 	bl	8002318 <__aeabi_dsub>
 8015fbe:	0022      	movs	r2, r4
 8015fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fc2:	9006      	str	r0, [sp, #24]
 8015fc4:	9107      	str	r1, [sp, #28]
 8015fc6:	f7ea fa63 	bl	8000490 <__aeabi_dcmpgt>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d000      	beq.n	8015fd0 <_dtoa_r+0x420>
 8015fce:	e2aa      	b.n	8016526 <_dtoa_r+0x976>
 8015fd0:	48a6      	ldr	r0, [pc, #664]	; (801626c <_dtoa_r+0x6bc>)
 8015fd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015fd4:	4684      	mov	ip, r0
 8015fd6:	4461      	add	r1, ip
 8015fd8:	000b      	movs	r3, r1
 8015fda:	9806      	ldr	r0, [sp, #24]
 8015fdc:	9907      	ldr	r1, [sp, #28]
 8015fde:	0022      	movs	r2, r4
 8015fe0:	f7ea fa42 	bl	8000468 <__aeabi_dcmplt>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d000      	beq.n	8015fea <_dtoa_r+0x43a>
 8015fe8:	e297      	b.n	801651a <_dtoa_r+0x96a>
 8015fea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015fec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015fee:	9306      	str	r3, [sp, #24]
 8015ff0:	9407      	str	r4, [sp, #28]
 8015ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	da00      	bge.n	8015ffa <_dtoa_r+0x44a>
 8015ff8:	e15e      	b.n	80162b8 <_dtoa_r+0x708>
 8015ffa:	2f0e      	cmp	r7, #14
 8015ffc:	dd00      	ble.n	8016000 <_dtoa_r+0x450>
 8015ffe:	e15b      	b.n	80162b8 <_dtoa_r+0x708>
 8016000:	4b94      	ldr	r3, [pc, #592]	; (8016254 <_dtoa_r+0x6a4>)
 8016002:	00fa      	lsls	r2, r7, #3
 8016004:	189b      	adds	r3, r3, r2
 8016006:	685c      	ldr	r4, [r3, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	9304      	str	r3, [sp, #16]
 801600c:	9405      	str	r4, [sp, #20]
 801600e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016010:	2b00      	cmp	r3, #0
 8016012:	db00      	blt.n	8016016 <_dtoa_r+0x466>
 8016014:	e0da      	b.n	80161cc <_dtoa_r+0x61c>
 8016016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016018:	2b00      	cmp	r3, #0
 801601a:	dd00      	ble.n	801601e <_dtoa_r+0x46e>
 801601c:	e0d6      	b.n	80161cc <_dtoa_r+0x61c>
 801601e:	d000      	beq.n	8016022 <_dtoa_r+0x472>
 8016020:	e27f      	b.n	8016522 <_dtoa_r+0x972>
 8016022:	9804      	ldr	r0, [sp, #16]
 8016024:	9905      	ldr	r1, [sp, #20]
 8016026:	2200      	movs	r2, #0
 8016028:	4b8f      	ldr	r3, [pc, #572]	; (8016268 <_dtoa_r+0x6b8>)
 801602a:	f7eb ff03 	bl	8001e34 <__aeabi_dmul>
 801602e:	9a06      	ldr	r2, [sp, #24]
 8016030:	9b07      	ldr	r3, [sp, #28]
 8016032:	f7ea fa37 	bl	80004a4 <__aeabi_dcmpge>
 8016036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016038:	9304      	str	r3, [sp, #16]
 801603a:	001e      	movs	r6, r3
 801603c:	2800      	cmp	r0, #0
 801603e:	d000      	beq.n	8016042 <_dtoa_r+0x492>
 8016040:	e251      	b.n	80164e6 <_dtoa_r+0x936>
 8016042:	9b08      	ldr	r3, [sp, #32]
 8016044:	9a08      	ldr	r2, [sp, #32]
 8016046:	1c5d      	adds	r5, r3, #1
 8016048:	2331      	movs	r3, #49	; 0x31
 801604a:	3701      	adds	r7, #1
 801604c:	7013      	strb	r3, [r2, #0]
 801604e:	e24d      	b.n	80164ec <_dtoa_r+0x93c>
 8016050:	4234      	tst	r4, r6
 8016052:	d00a      	beq.n	801606a <_dtoa_r+0x4ba>
 8016054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016056:	4a86      	ldr	r2, [pc, #536]	; (8016270 <_dtoa_r+0x6c0>)
 8016058:	3301      	adds	r3, #1
 801605a:	930e      	str	r3, [sp, #56]	; 0x38
 801605c:	00eb      	lsls	r3, r5, #3
 801605e:	189b      	adds	r3, r3, r2
 8016060:	681a      	ldr	r2, [r3, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	f7eb fee6 	bl	8001e34 <__aeabi_dmul>
 8016068:	0033      	movs	r3, r6
 801606a:	1064      	asrs	r4, r4, #1
 801606c:	3501      	adds	r5, #1
 801606e:	e75f      	b.n	8015f30 <_dtoa_r+0x380>
 8016070:	003e      	movs	r6, r7
 8016072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016074:	e784      	b.n	8015f80 <_dtoa_r+0x3d0>
 8016076:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016078:	1e5a      	subs	r2, r3, #1
 801607a:	4b76      	ldr	r3, [pc, #472]	; (8016254 <_dtoa_r+0x6a4>)
 801607c:	00d2      	lsls	r2, r2, #3
 801607e:	189b      	adds	r3, r3, r2
 8016080:	6818      	ldr	r0, [r3, #0]
 8016082:	6859      	ldr	r1, [r3, #4]
 8016084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016086:	2b00      	cmp	r3, #0
 8016088:	d04b      	beq.n	8016122 <_dtoa_r+0x572>
 801608a:	0002      	movs	r2, r0
 801608c:	000b      	movs	r3, r1
 801608e:	2000      	movs	r0, #0
 8016090:	4978      	ldr	r1, [pc, #480]	; (8016274 <_dtoa_r+0x6c4>)
 8016092:	f7eb fac5 	bl	8001620 <__aeabi_ddiv>
 8016096:	002b      	movs	r3, r5
 8016098:	0022      	movs	r2, r4
 801609a:	f7ec f93d 	bl	8002318 <__aeabi_dsub>
 801609e:	9b08      	ldr	r3, [sp, #32]
 80160a0:	900e      	str	r0, [sp, #56]	; 0x38
 80160a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80160a4:	9315      	str	r3, [sp, #84]	; 0x54
 80160a6:	9806      	ldr	r0, [sp, #24]
 80160a8:	9907      	ldr	r1, [sp, #28]
 80160aa:	f7ec fc99 	bl	80029e0 <__aeabi_d2iz>
 80160ae:	0004      	movs	r4, r0
 80160b0:	f7ec fccc 	bl	8002a4c <__aeabi_i2d>
 80160b4:	0002      	movs	r2, r0
 80160b6:	000b      	movs	r3, r1
 80160b8:	9806      	ldr	r0, [sp, #24]
 80160ba:	9907      	ldr	r1, [sp, #28]
 80160bc:	f7ec f92c 	bl	8002318 <__aeabi_dsub>
 80160c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160c2:	3430      	adds	r4, #48	; 0x30
 80160c4:	1c5d      	adds	r5, r3, #1
 80160c6:	701c      	strb	r4, [r3, #0]
 80160c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160cc:	9006      	str	r0, [sp, #24]
 80160ce:	9107      	str	r1, [sp, #28]
 80160d0:	f7ea f9ca 	bl	8000468 <__aeabi_dcmplt>
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d16c      	bne.n	80161b2 <_dtoa_r+0x602>
 80160d8:	9a06      	ldr	r2, [sp, #24]
 80160da:	9b07      	ldr	r3, [sp, #28]
 80160dc:	2000      	movs	r0, #0
 80160de:	495e      	ldr	r1, [pc, #376]	; (8016258 <_dtoa_r+0x6a8>)
 80160e0:	f7ec f91a 	bl	8002318 <__aeabi_dsub>
 80160e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160e8:	f7ea f9be 	bl	8000468 <__aeabi_dcmplt>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d000      	beq.n	80160f2 <_dtoa_r+0x542>
 80160f0:	e0c3      	b.n	801627a <_dtoa_r+0x6ca>
 80160f2:	9b08      	ldr	r3, [sp, #32]
 80160f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160f6:	1aeb      	subs	r3, r5, r3
 80160f8:	429a      	cmp	r2, r3
 80160fa:	dc00      	bgt.n	80160fe <_dtoa_r+0x54e>
 80160fc:	e775      	b.n	8015fea <_dtoa_r+0x43a>
 80160fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016100:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016102:	2200      	movs	r2, #0
 8016104:	4b55      	ldr	r3, [pc, #340]	; (801625c <_dtoa_r+0x6ac>)
 8016106:	f7eb fe95 	bl	8001e34 <__aeabi_dmul>
 801610a:	2200      	movs	r2, #0
 801610c:	900e      	str	r0, [sp, #56]	; 0x38
 801610e:	910f      	str	r1, [sp, #60]	; 0x3c
 8016110:	9806      	ldr	r0, [sp, #24]
 8016112:	9907      	ldr	r1, [sp, #28]
 8016114:	4b51      	ldr	r3, [pc, #324]	; (801625c <_dtoa_r+0x6ac>)
 8016116:	f7eb fe8d 	bl	8001e34 <__aeabi_dmul>
 801611a:	9515      	str	r5, [sp, #84]	; 0x54
 801611c:	9006      	str	r0, [sp, #24]
 801611e:	9107      	str	r1, [sp, #28]
 8016120:	e7c1      	b.n	80160a6 <_dtoa_r+0x4f6>
 8016122:	0022      	movs	r2, r4
 8016124:	002b      	movs	r3, r5
 8016126:	f7eb fe85 	bl	8001e34 <__aeabi_dmul>
 801612a:	9c08      	ldr	r4, [sp, #32]
 801612c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801612e:	0023      	movs	r3, r4
 8016130:	4694      	mov	ip, r2
 8016132:	900e      	str	r0, [sp, #56]	; 0x38
 8016134:	910f      	str	r1, [sp, #60]	; 0x3c
 8016136:	4463      	add	r3, ip
 8016138:	9315      	str	r3, [sp, #84]	; 0x54
 801613a:	9806      	ldr	r0, [sp, #24]
 801613c:	9907      	ldr	r1, [sp, #28]
 801613e:	f7ec fc4f 	bl	80029e0 <__aeabi_d2iz>
 8016142:	0005      	movs	r5, r0
 8016144:	f7ec fc82 	bl	8002a4c <__aeabi_i2d>
 8016148:	000b      	movs	r3, r1
 801614a:	0002      	movs	r2, r0
 801614c:	9806      	ldr	r0, [sp, #24]
 801614e:	9907      	ldr	r1, [sp, #28]
 8016150:	f7ec f8e2 	bl	8002318 <__aeabi_dsub>
 8016154:	3530      	adds	r5, #48	; 0x30
 8016156:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016158:	7025      	strb	r5, [r4, #0]
 801615a:	3401      	adds	r4, #1
 801615c:	9006      	str	r0, [sp, #24]
 801615e:	9107      	str	r1, [sp, #28]
 8016160:	42a3      	cmp	r3, r4
 8016162:	d12a      	bne.n	80161ba <_dtoa_r+0x60a>
 8016164:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016166:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016168:	9a08      	ldr	r2, [sp, #32]
 801616a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801616c:	4694      	mov	ip, r2
 801616e:	4463      	add	r3, ip
 8016170:	2200      	movs	r2, #0
 8016172:	001d      	movs	r5, r3
 8016174:	4b3f      	ldr	r3, [pc, #252]	; (8016274 <_dtoa_r+0x6c4>)
 8016176:	f7ea ff37 	bl	8000fe8 <__aeabi_dadd>
 801617a:	0002      	movs	r2, r0
 801617c:	000b      	movs	r3, r1
 801617e:	9806      	ldr	r0, [sp, #24]
 8016180:	9907      	ldr	r1, [sp, #28]
 8016182:	f7ea f985 	bl	8000490 <__aeabi_dcmpgt>
 8016186:	2800      	cmp	r0, #0
 8016188:	d000      	beq.n	801618c <_dtoa_r+0x5dc>
 801618a:	e076      	b.n	801627a <_dtoa_r+0x6ca>
 801618c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801618e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016190:	2000      	movs	r0, #0
 8016192:	4938      	ldr	r1, [pc, #224]	; (8016274 <_dtoa_r+0x6c4>)
 8016194:	f7ec f8c0 	bl	8002318 <__aeabi_dsub>
 8016198:	0002      	movs	r2, r0
 801619a:	000b      	movs	r3, r1
 801619c:	9806      	ldr	r0, [sp, #24]
 801619e:	9907      	ldr	r1, [sp, #28]
 80161a0:	f7ea f962 	bl	8000468 <__aeabi_dcmplt>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d100      	bne.n	80161aa <_dtoa_r+0x5fa>
 80161a8:	e71f      	b.n	8015fea <_dtoa_r+0x43a>
 80161aa:	1e6b      	subs	r3, r5, #1
 80161ac:	781a      	ldrb	r2, [r3, #0]
 80161ae:	2a30      	cmp	r2, #48	; 0x30
 80161b0:	d001      	beq.n	80161b6 <_dtoa_r+0x606>
 80161b2:	0037      	movs	r7, r6
 80161b4:	e03f      	b.n	8016236 <_dtoa_r+0x686>
 80161b6:	001d      	movs	r5, r3
 80161b8:	e7f7      	b.n	80161aa <_dtoa_r+0x5fa>
 80161ba:	9806      	ldr	r0, [sp, #24]
 80161bc:	9907      	ldr	r1, [sp, #28]
 80161be:	2200      	movs	r2, #0
 80161c0:	4b26      	ldr	r3, [pc, #152]	; (801625c <_dtoa_r+0x6ac>)
 80161c2:	f7eb fe37 	bl	8001e34 <__aeabi_dmul>
 80161c6:	9006      	str	r0, [sp, #24]
 80161c8:	9107      	str	r1, [sp, #28]
 80161ca:	e7b6      	b.n	801613a <_dtoa_r+0x58a>
 80161cc:	9e08      	ldr	r6, [sp, #32]
 80161ce:	9a04      	ldr	r2, [sp, #16]
 80161d0:	9b05      	ldr	r3, [sp, #20]
 80161d2:	9806      	ldr	r0, [sp, #24]
 80161d4:	9907      	ldr	r1, [sp, #28]
 80161d6:	f7eb fa23 	bl	8001620 <__aeabi_ddiv>
 80161da:	f7ec fc01 	bl	80029e0 <__aeabi_d2iz>
 80161de:	0004      	movs	r4, r0
 80161e0:	f7ec fc34 	bl	8002a4c <__aeabi_i2d>
 80161e4:	9a04      	ldr	r2, [sp, #16]
 80161e6:	9b05      	ldr	r3, [sp, #20]
 80161e8:	f7eb fe24 	bl	8001e34 <__aeabi_dmul>
 80161ec:	0002      	movs	r2, r0
 80161ee:	000b      	movs	r3, r1
 80161f0:	9806      	ldr	r0, [sp, #24]
 80161f2:	9907      	ldr	r1, [sp, #28]
 80161f4:	f7ec f890 	bl	8002318 <__aeabi_dsub>
 80161f8:	0023      	movs	r3, r4
 80161fa:	3330      	adds	r3, #48	; 0x30
 80161fc:	7033      	strb	r3, [r6, #0]
 80161fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016200:	9b08      	ldr	r3, [sp, #32]
 8016202:	1c75      	adds	r5, r6, #1
 8016204:	1aeb      	subs	r3, r5, r3
 8016206:	429a      	cmp	r2, r3
 8016208:	d148      	bne.n	801629c <_dtoa_r+0x6ec>
 801620a:	0002      	movs	r2, r0
 801620c:	000b      	movs	r3, r1
 801620e:	f7ea feeb 	bl	8000fe8 <__aeabi_dadd>
 8016212:	9a04      	ldr	r2, [sp, #16]
 8016214:	9b05      	ldr	r3, [sp, #20]
 8016216:	9006      	str	r0, [sp, #24]
 8016218:	9107      	str	r1, [sp, #28]
 801621a:	f7ea f939 	bl	8000490 <__aeabi_dcmpgt>
 801621e:	2800      	cmp	r0, #0
 8016220:	d12a      	bne.n	8016278 <_dtoa_r+0x6c8>
 8016222:	9a04      	ldr	r2, [sp, #16]
 8016224:	9b05      	ldr	r3, [sp, #20]
 8016226:	9806      	ldr	r0, [sp, #24]
 8016228:	9907      	ldr	r1, [sp, #28]
 801622a:	f7ea f917 	bl	800045c <__aeabi_dcmpeq>
 801622e:	2800      	cmp	r0, #0
 8016230:	d001      	beq.n	8016236 <_dtoa_r+0x686>
 8016232:	07e3      	lsls	r3, r4, #31
 8016234:	d420      	bmi.n	8016278 <_dtoa_r+0x6c8>
 8016236:	9903      	ldr	r1, [sp, #12]
 8016238:	9802      	ldr	r0, [sp, #8]
 801623a:	f000 ff35 	bl	80170a8 <_Bfree>
 801623e:	2300      	movs	r3, #0
 8016240:	702b      	strb	r3, [r5, #0]
 8016242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016244:	3701      	adds	r7, #1
 8016246:	601f      	str	r7, [r3, #0]
 8016248:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801624a:	2b00      	cmp	r3, #0
 801624c:	d100      	bne.n	8016250 <_dtoa_r+0x6a0>
 801624e:	e4e4      	b.n	8015c1a <_dtoa_r+0x6a>
 8016250:	601d      	str	r5, [r3, #0]
 8016252:	e4e2      	b.n	8015c1a <_dtoa_r+0x6a>
 8016254:	0801ab20 	.word	0x0801ab20
 8016258:	3ff00000 	.word	0x3ff00000
 801625c:	40240000 	.word	0x40240000
 8016260:	401c0000 	.word	0x401c0000
 8016264:	fcc00000 	.word	0xfcc00000
 8016268:	40140000 	.word	0x40140000
 801626c:	7cc00000 	.word	0x7cc00000
 8016270:	0801aaf8 	.word	0x0801aaf8
 8016274:	3fe00000 	.word	0x3fe00000
 8016278:	003e      	movs	r6, r7
 801627a:	1e6b      	subs	r3, r5, #1
 801627c:	781a      	ldrb	r2, [r3, #0]
 801627e:	2a39      	cmp	r2, #57	; 0x39
 8016280:	d106      	bne.n	8016290 <_dtoa_r+0x6e0>
 8016282:	9a08      	ldr	r2, [sp, #32]
 8016284:	429a      	cmp	r2, r3
 8016286:	d107      	bne.n	8016298 <_dtoa_r+0x6e8>
 8016288:	2330      	movs	r3, #48	; 0x30
 801628a:	7013      	strb	r3, [r2, #0]
 801628c:	0013      	movs	r3, r2
 801628e:	3601      	adds	r6, #1
 8016290:	781a      	ldrb	r2, [r3, #0]
 8016292:	3201      	adds	r2, #1
 8016294:	701a      	strb	r2, [r3, #0]
 8016296:	e78c      	b.n	80161b2 <_dtoa_r+0x602>
 8016298:	001d      	movs	r5, r3
 801629a:	e7ee      	b.n	801627a <_dtoa_r+0x6ca>
 801629c:	2200      	movs	r2, #0
 801629e:	4ba4      	ldr	r3, [pc, #656]	; (8016530 <_dtoa_r+0x980>)
 80162a0:	f7eb fdc8 	bl	8001e34 <__aeabi_dmul>
 80162a4:	2200      	movs	r2, #0
 80162a6:	2300      	movs	r3, #0
 80162a8:	9006      	str	r0, [sp, #24]
 80162aa:	9107      	str	r1, [sp, #28]
 80162ac:	002e      	movs	r6, r5
 80162ae:	f7ea f8d5 	bl	800045c <__aeabi_dcmpeq>
 80162b2:	2800      	cmp	r0, #0
 80162b4:	d08b      	beq.n	80161ce <_dtoa_r+0x61e>
 80162b6:	e7be      	b.n	8016236 <_dtoa_r+0x686>
 80162b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162ba:	2a00      	cmp	r2, #0
 80162bc:	d100      	bne.n	80162c0 <_dtoa_r+0x710>
 80162be:	e0da      	b.n	8016476 <_dtoa_r+0x8c6>
 80162c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80162c2:	2a01      	cmp	r2, #1
 80162c4:	dd00      	ble.n	80162c8 <_dtoa_r+0x718>
 80162c6:	e0bd      	b.n	8016444 <_dtoa_r+0x894>
 80162c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80162ca:	2a00      	cmp	r2, #0
 80162cc:	d100      	bne.n	80162d0 <_dtoa_r+0x720>
 80162ce:	e0b5      	b.n	801643c <_dtoa_r+0x88c>
 80162d0:	4a98      	ldr	r2, [pc, #608]	; (8016534 <_dtoa_r+0x984>)
 80162d2:	189b      	adds	r3, r3, r2
 80162d4:	9d04      	ldr	r5, [sp, #16]
 80162d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80162d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162da:	2101      	movs	r1, #1
 80162dc:	18d2      	adds	r2, r2, r3
 80162de:	920a      	str	r2, [sp, #40]	; 0x28
 80162e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162e2:	9802      	ldr	r0, [sp, #8]
 80162e4:	18d3      	adds	r3, r2, r3
 80162e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80162e8:	f000 ffad 	bl	8017246 <__i2b>
 80162ec:	0006      	movs	r6, r0
 80162ee:	2c00      	cmp	r4, #0
 80162f0:	dd0e      	ble.n	8016310 <_dtoa_r+0x760>
 80162f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	dd0b      	ble.n	8016310 <_dtoa_r+0x760>
 80162f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162fa:	0023      	movs	r3, r4
 80162fc:	4294      	cmp	r4, r2
 80162fe:	dd00      	ble.n	8016302 <_dtoa_r+0x752>
 8016300:	0013      	movs	r3, r2
 8016302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016304:	1ae4      	subs	r4, r4, r3
 8016306:	1ad2      	subs	r2, r2, r3
 8016308:	920a      	str	r2, [sp, #40]	; 0x28
 801630a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801630c:	1ad3      	subs	r3, r2, r3
 801630e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016310:	9b04      	ldr	r3, [sp, #16]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d01f      	beq.n	8016356 <_dtoa_r+0x7a6>
 8016316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016318:	2b00      	cmp	r3, #0
 801631a:	d100      	bne.n	801631e <_dtoa_r+0x76e>
 801631c:	e0af      	b.n	801647e <_dtoa_r+0x8ce>
 801631e:	2d00      	cmp	r5, #0
 8016320:	d011      	beq.n	8016346 <_dtoa_r+0x796>
 8016322:	0031      	movs	r1, r6
 8016324:	002a      	movs	r2, r5
 8016326:	9802      	ldr	r0, [sp, #8]
 8016328:	f001 f826 	bl	8017378 <__pow5mult>
 801632c:	9a03      	ldr	r2, [sp, #12]
 801632e:	0001      	movs	r1, r0
 8016330:	0006      	movs	r6, r0
 8016332:	9802      	ldr	r0, [sp, #8]
 8016334:	f000 ff90 	bl	8017258 <__multiply>
 8016338:	9903      	ldr	r1, [sp, #12]
 801633a:	9010      	str	r0, [sp, #64]	; 0x40
 801633c:	9802      	ldr	r0, [sp, #8]
 801633e:	f000 feb3 	bl	80170a8 <_Bfree>
 8016342:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016344:	9303      	str	r3, [sp, #12]
 8016346:	9b04      	ldr	r3, [sp, #16]
 8016348:	1b5a      	subs	r2, r3, r5
 801634a:	d004      	beq.n	8016356 <_dtoa_r+0x7a6>
 801634c:	9903      	ldr	r1, [sp, #12]
 801634e:	9802      	ldr	r0, [sp, #8]
 8016350:	f001 f812 	bl	8017378 <__pow5mult>
 8016354:	9003      	str	r0, [sp, #12]
 8016356:	2101      	movs	r1, #1
 8016358:	9802      	ldr	r0, [sp, #8]
 801635a:	f000 ff74 	bl	8017246 <__i2b>
 801635e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016360:	9004      	str	r0, [sp, #16]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d100      	bne.n	8016368 <_dtoa_r+0x7b8>
 8016366:	e1e3      	b.n	8016730 <_dtoa_r+0xb80>
 8016368:	001a      	movs	r2, r3
 801636a:	0001      	movs	r1, r0
 801636c:	9802      	ldr	r0, [sp, #8]
 801636e:	f001 f803 	bl	8017378 <__pow5mult>
 8016372:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016374:	9004      	str	r0, [sp, #16]
 8016376:	2b01      	cmp	r3, #1
 8016378:	dd00      	ble.n	801637c <_dtoa_r+0x7cc>
 801637a:	e082      	b.n	8016482 <_dtoa_r+0x8d2>
 801637c:	2500      	movs	r5, #0
 801637e:	9b06      	ldr	r3, [sp, #24]
 8016380:	42ab      	cmp	r3, r5
 8016382:	d10e      	bne.n	80163a2 <_dtoa_r+0x7f2>
 8016384:	9b07      	ldr	r3, [sp, #28]
 8016386:	031b      	lsls	r3, r3, #12
 8016388:	42ab      	cmp	r3, r5
 801638a:	d10a      	bne.n	80163a2 <_dtoa_r+0x7f2>
 801638c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801638e:	9a07      	ldr	r2, [sp, #28]
 8016390:	4213      	tst	r3, r2
 8016392:	d006      	beq.n	80163a2 <_dtoa_r+0x7f2>
 8016394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016396:	3501      	adds	r5, #1
 8016398:	3301      	adds	r3, #1
 801639a:	930a      	str	r3, [sp, #40]	; 0x28
 801639c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801639e:	3301      	adds	r3, #1
 80163a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80163a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163a4:	2001      	movs	r0, #1
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d16c      	bne.n	8016484 <_dtoa_r+0x8d4>
 80163aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163ac:	1818      	adds	r0, r3, r0
 80163ae:	231f      	movs	r3, #31
 80163b0:	4018      	ands	r0, r3
 80163b2:	d07e      	beq.n	80164b2 <_dtoa_r+0x902>
 80163b4:	3301      	adds	r3, #1
 80163b6:	1a1b      	subs	r3, r3, r0
 80163b8:	2b04      	cmp	r3, #4
 80163ba:	dd70      	ble.n	801649e <_dtoa_r+0x8ee>
 80163bc:	231c      	movs	r3, #28
 80163be:	1a18      	subs	r0, r3, r0
 80163c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163c2:	1824      	adds	r4, r4, r0
 80163c4:	181b      	adds	r3, r3, r0
 80163c6:	930a      	str	r3, [sp, #40]	; 0x28
 80163c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163ca:	181b      	adds	r3, r3, r0
 80163cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80163ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	dd05      	ble.n	80163e0 <_dtoa_r+0x830>
 80163d4:	001a      	movs	r2, r3
 80163d6:	9903      	ldr	r1, [sp, #12]
 80163d8:	9802      	ldr	r0, [sp, #8]
 80163da:	f001 f80f 	bl	80173fc <__lshift>
 80163de:	9003      	str	r0, [sp, #12]
 80163e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	dd05      	ble.n	80163f2 <_dtoa_r+0x842>
 80163e6:	001a      	movs	r2, r3
 80163e8:	9904      	ldr	r1, [sp, #16]
 80163ea:	9802      	ldr	r0, [sp, #8]
 80163ec:	f001 f806 	bl	80173fc <__lshift>
 80163f0:	9004      	str	r0, [sp, #16]
 80163f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d05e      	beq.n	80164b6 <_dtoa_r+0x906>
 80163f8:	9904      	ldr	r1, [sp, #16]
 80163fa:	9803      	ldr	r0, [sp, #12]
 80163fc:	f001 f850 	bl	80174a0 <__mcmp>
 8016400:	2800      	cmp	r0, #0
 8016402:	da58      	bge.n	80164b6 <_dtoa_r+0x906>
 8016404:	2300      	movs	r3, #0
 8016406:	220a      	movs	r2, #10
 8016408:	9903      	ldr	r1, [sp, #12]
 801640a:	9802      	ldr	r0, [sp, #8]
 801640c:	f000 fe56 	bl	80170bc <__multadd>
 8016410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016412:	3f01      	subs	r7, #1
 8016414:	9003      	str	r0, [sp, #12]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d100      	bne.n	801641c <_dtoa_r+0x86c>
 801641a:	e190      	b.n	801673e <_dtoa_r+0xb8e>
 801641c:	2300      	movs	r3, #0
 801641e:	0031      	movs	r1, r6
 8016420:	220a      	movs	r2, #10
 8016422:	9802      	ldr	r0, [sp, #8]
 8016424:	f000 fe4a 	bl	80170bc <__multadd>
 8016428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801642a:	0006      	movs	r6, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	dd00      	ble.n	8016432 <_dtoa_r+0x882>
 8016430:	e088      	b.n	8016544 <_dtoa_r+0x994>
 8016432:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016434:	2b02      	cmp	r3, #2
 8016436:	dc00      	bgt.n	801643a <_dtoa_r+0x88a>
 8016438:	e084      	b.n	8016544 <_dtoa_r+0x994>
 801643a:	e044      	b.n	80164c6 <_dtoa_r+0x916>
 801643c:	2336      	movs	r3, #54	; 0x36
 801643e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016440:	1a9b      	subs	r3, r3, r2
 8016442:	e747      	b.n	80162d4 <_dtoa_r+0x724>
 8016444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016446:	1e5d      	subs	r5, r3, #1
 8016448:	9b04      	ldr	r3, [sp, #16]
 801644a:	42ab      	cmp	r3, r5
 801644c:	db08      	blt.n	8016460 <_dtoa_r+0x8b0>
 801644e:	1b5d      	subs	r5, r3, r5
 8016450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016452:	2b00      	cmp	r3, #0
 8016454:	da0c      	bge.n	8016470 <_dtoa_r+0x8c0>
 8016456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801645a:	1a9c      	subs	r4, r3, r2
 801645c:	2300      	movs	r3, #0
 801645e:	e73b      	b.n	80162d8 <_dtoa_r+0x728>
 8016460:	9b04      	ldr	r3, [sp, #16]
 8016462:	9504      	str	r5, [sp, #16]
 8016464:	1aea      	subs	r2, r5, r3
 8016466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016468:	2500      	movs	r5, #0
 801646a:	189b      	adds	r3, r3, r2
 801646c:	9311      	str	r3, [sp, #68]	; 0x44
 801646e:	e7ef      	b.n	8016450 <_dtoa_r+0x8a0>
 8016470:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016474:	e730      	b.n	80162d8 <_dtoa_r+0x728>
 8016476:	9d04      	ldr	r5, [sp, #16]
 8016478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801647a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801647c:	e737      	b.n	80162ee <_dtoa_r+0x73e>
 801647e:	9a04      	ldr	r2, [sp, #16]
 8016480:	e764      	b.n	801634c <_dtoa_r+0x79c>
 8016482:	2500      	movs	r5, #0
 8016484:	9b04      	ldr	r3, [sp, #16]
 8016486:	9a04      	ldr	r2, [sp, #16]
 8016488:	691b      	ldr	r3, [r3, #16]
 801648a:	9310      	str	r3, [sp, #64]	; 0x40
 801648c:	3303      	adds	r3, #3
 801648e:	009b      	lsls	r3, r3, #2
 8016490:	18d3      	adds	r3, r2, r3
 8016492:	6858      	ldr	r0, [r3, #4]
 8016494:	f000 fe8e 	bl	80171b4 <__hi0bits>
 8016498:	2320      	movs	r3, #32
 801649a:	1a18      	subs	r0, r3, r0
 801649c:	e785      	b.n	80163aa <_dtoa_r+0x7fa>
 801649e:	2b04      	cmp	r3, #4
 80164a0:	d095      	beq.n	80163ce <_dtoa_r+0x81e>
 80164a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164a4:	331c      	adds	r3, #28
 80164a6:	18d2      	adds	r2, r2, r3
 80164a8:	920a      	str	r2, [sp, #40]	; 0x28
 80164aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164ac:	18e4      	adds	r4, r4, r3
 80164ae:	18d3      	adds	r3, r2, r3
 80164b0:	e78c      	b.n	80163cc <_dtoa_r+0x81c>
 80164b2:	0003      	movs	r3, r0
 80164b4:	e7f5      	b.n	80164a2 <_dtoa_r+0x8f2>
 80164b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	dc3d      	bgt.n	8016538 <_dtoa_r+0x988>
 80164bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80164be:	2b02      	cmp	r3, #2
 80164c0:	dd3a      	ble.n	8016538 <_dtoa_r+0x988>
 80164c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c4:	930c      	str	r3, [sp, #48]	; 0x30
 80164c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d10c      	bne.n	80164e6 <_dtoa_r+0x936>
 80164cc:	9904      	ldr	r1, [sp, #16]
 80164ce:	2205      	movs	r2, #5
 80164d0:	9802      	ldr	r0, [sp, #8]
 80164d2:	f000 fdf3 	bl	80170bc <__multadd>
 80164d6:	9004      	str	r0, [sp, #16]
 80164d8:	0001      	movs	r1, r0
 80164da:	9803      	ldr	r0, [sp, #12]
 80164dc:	f000 ffe0 	bl	80174a0 <__mcmp>
 80164e0:	2800      	cmp	r0, #0
 80164e2:	dd00      	ble.n	80164e6 <_dtoa_r+0x936>
 80164e4:	e5ad      	b.n	8016042 <_dtoa_r+0x492>
 80164e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164e8:	9d08      	ldr	r5, [sp, #32]
 80164ea:	43df      	mvns	r7, r3
 80164ec:	2300      	movs	r3, #0
 80164ee:	9309      	str	r3, [sp, #36]	; 0x24
 80164f0:	9904      	ldr	r1, [sp, #16]
 80164f2:	9802      	ldr	r0, [sp, #8]
 80164f4:	f000 fdd8 	bl	80170a8 <_Bfree>
 80164f8:	2e00      	cmp	r6, #0
 80164fa:	d100      	bne.n	80164fe <_dtoa_r+0x94e>
 80164fc:	e69b      	b.n	8016236 <_dtoa_r+0x686>
 80164fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016500:	2b00      	cmp	r3, #0
 8016502:	d005      	beq.n	8016510 <_dtoa_r+0x960>
 8016504:	42b3      	cmp	r3, r6
 8016506:	d003      	beq.n	8016510 <_dtoa_r+0x960>
 8016508:	0019      	movs	r1, r3
 801650a:	9802      	ldr	r0, [sp, #8]
 801650c:	f000 fdcc 	bl	80170a8 <_Bfree>
 8016510:	0031      	movs	r1, r6
 8016512:	9802      	ldr	r0, [sp, #8]
 8016514:	f000 fdc8 	bl	80170a8 <_Bfree>
 8016518:	e68d      	b.n	8016236 <_dtoa_r+0x686>
 801651a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801651c:	9304      	str	r3, [sp, #16]
 801651e:	001e      	movs	r6, r3
 8016520:	e7e1      	b.n	80164e6 <_dtoa_r+0x936>
 8016522:	2300      	movs	r3, #0
 8016524:	e7fa      	b.n	801651c <_dtoa_r+0x96c>
 8016526:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016528:	0037      	movs	r7, r6
 801652a:	9304      	str	r3, [sp, #16]
 801652c:	001e      	movs	r6, r3
 801652e:	e588      	b.n	8016042 <_dtoa_r+0x492>
 8016530:	40240000 	.word	0x40240000
 8016534:	00000433 	.word	0x00000433
 8016538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801653a:	2b00      	cmp	r3, #0
 801653c:	d100      	bne.n	8016540 <_dtoa_r+0x990>
 801653e:	e0b2      	b.n	80166a6 <_dtoa_r+0xaf6>
 8016540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016542:	930c      	str	r3, [sp, #48]	; 0x30
 8016544:	2c00      	cmp	r4, #0
 8016546:	dd05      	ble.n	8016554 <_dtoa_r+0x9a4>
 8016548:	0031      	movs	r1, r6
 801654a:	0022      	movs	r2, r4
 801654c:	9802      	ldr	r0, [sp, #8]
 801654e:	f000 ff55 	bl	80173fc <__lshift>
 8016552:	0006      	movs	r6, r0
 8016554:	0030      	movs	r0, r6
 8016556:	2d00      	cmp	r5, #0
 8016558:	d011      	beq.n	801657e <_dtoa_r+0x9ce>
 801655a:	6871      	ldr	r1, [r6, #4]
 801655c:	9802      	ldr	r0, [sp, #8]
 801655e:	f000 fd7b 	bl	8017058 <_Balloc>
 8016562:	0031      	movs	r1, r6
 8016564:	0004      	movs	r4, r0
 8016566:	6933      	ldr	r3, [r6, #16]
 8016568:	310c      	adds	r1, #12
 801656a:	1c9a      	adds	r2, r3, #2
 801656c:	0092      	lsls	r2, r2, #2
 801656e:	300c      	adds	r0, #12
 8016570:	f7fc fe8b 	bl	801328a <memcpy>
 8016574:	2201      	movs	r2, #1
 8016576:	0021      	movs	r1, r4
 8016578:	9802      	ldr	r0, [sp, #8]
 801657a:	f000 ff3f 	bl	80173fc <__lshift>
 801657e:	9609      	str	r6, [sp, #36]	; 0x24
 8016580:	0006      	movs	r6, r0
 8016582:	9b08      	ldr	r3, [sp, #32]
 8016584:	930a      	str	r3, [sp, #40]	; 0x28
 8016586:	9904      	ldr	r1, [sp, #16]
 8016588:	9803      	ldr	r0, [sp, #12]
 801658a:	f7ff fa8b 	bl	8015aa4 <quorem>
 801658e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016590:	900d      	str	r0, [sp, #52]	; 0x34
 8016592:	0004      	movs	r4, r0
 8016594:	9803      	ldr	r0, [sp, #12]
 8016596:	f000 ff83 	bl	80174a0 <__mcmp>
 801659a:	0032      	movs	r2, r6
 801659c:	9010      	str	r0, [sp, #64]	; 0x40
 801659e:	9904      	ldr	r1, [sp, #16]
 80165a0:	9802      	ldr	r0, [sp, #8]
 80165a2:	f000 ff97 	bl	80174d4 <__mdiff>
 80165a6:	2301      	movs	r3, #1
 80165a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80165aa:	68c3      	ldr	r3, [r0, #12]
 80165ac:	3430      	adds	r4, #48	; 0x30
 80165ae:	0005      	movs	r5, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d104      	bne.n	80165be <_dtoa_r+0xa0e>
 80165b4:	0001      	movs	r1, r0
 80165b6:	9803      	ldr	r0, [sp, #12]
 80165b8:	f000 ff72 	bl	80174a0 <__mcmp>
 80165bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80165be:	0029      	movs	r1, r5
 80165c0:	9802      	ldr	r0, [sp, #8]
 80165c2:	f000 fd71 	bl	80170a8 <_Bfree>
 80165c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165ca:	4313      	orrs	r3, r2
 80165cc:	d10e      	bne.n	80165ec <_dtoa_r+0xa3c>
 80165ce:	9a06      	ldr	r2, [sp, #24]
 80165d0:	3301      	adds	r3, #1
 80165d2:	4213      	tst	r3, r2
 80165d4:	d10a      	bne.n	80165ec <_dtoa_r+0xa3c>
 80165d6:	2c39      	cmp	r4, #57	; 0x39
 80165d8:	d026      	beq.n	8016628 <_dtoa_r+0xa78>
 80165da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165dc:	2b00      	cmp	r3, #0
 80165de:	dd01      	ble.n	80165e4 <_dtoa_r+0xa34>
 80165e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80165e2:	3431      	adds	r4, #49	; 0x31
 80165e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165e6:	1c5d      	adds	r5, r3, #1
 80165e8:	701c      	strb	r4, [r3, #0]
 80165ea:	e781      	b.n	80164f0 <_dtoa_r+0x940>
 80165ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	db07      	blt.n	8016602 <_dtoa_r+0xa52>
 80165f2:	001d      	movs	r5, r3
 80165f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80165f6:	431d      	orrs	r5, r3
 80165f8:	d122      	bne.n	8016640 <_dtoa_r+0xa90>
 80165fa:	2301      	movs	r3, #1
 80165fc:	9a06      	ldr	r2, [sp, #24]
 80165fe:	4213      	tst	r3, r2
 8016600:	d11e      	bne.n	8016640 <_dtoa_r+0xa90>
 8016602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016604:	2b00      	cmp	r3, #0
 8016606:	dded      	ble.n	80165e4 <_dtoa_r+0xa34>
 8016608:	9903      	ldr	r1, [sp, #12]
 801660a:	2201      	movs	r2, #1
 801660c:	9802      	ldr	r0, [sp, #8]
 801660e:	f000 fef5 	bl	80173fc <__lshift>
 8016612:	9904      	ldr	r1, [sp, #16]
 8016614:	9003      	str	r0, [sp, #12]
 8016616:	f000 ff43 	bl	80174a0 <__mcmp>
 801661a:	2800      	cmp	r0, #0
 801661c:	dc02      	bgt.n	8016624 <_dtoa_r+0xa74>
 801661e:	d1e1      	bne.n	80165e4 <_dtoa_r+0xa34>
 8016620:	07e3      	lsls	r3, r4, #31
 8016622:	d5df      	bpl.n	80165e4 <_dtoa_r+0xa34>
 8016624:	2c39      	cmp	r4, #57	; 0x39
 8016626:	d1db      	bne.n	80165e0 <_dtoa_r+0xa30>
 8016628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801662a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801662c:	1c5d      	adds	r5, r3, #1
 801662e:	2339      	movs	r3, #57	; 0x39
 8016630:	7013      	strb	r3, [r2, #0]
 8016632:	1e6b      	subs	r3, r5, #1
 8016634:	781a      	ldrb	r2, [r3, #0]
 8016636:	2a39      	cmp	r2, #57	; 0x39
 8016638:	d067      	beq.n	801670a <_dtoa_r+0xb5a>
 801663a:	3201      	adds	r2, #1
 801663c:	701a      	strb	r2, [r3, #0]
 801663e:	e757      	b.n	80164f0 <_dtoa_r+0x940>
 8016640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016642:	1c5d      	adds	r5, r3, #1
 8016644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016646:	2b00      	cmp	r3, #0
 8016648:	dd04      	ble.n	8016654 <_dtoa_r+0xaa4>
 801664a:	2c39      	cmp	r4, #57	; 0x39
 801664c:	d0ec      	beq.n	8016628 <_dtoa_r+0xa78>
 801664e:	3401      	adds	r4, #1
 8016650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016652:	e7c9      	b.n	80165e8 <_dtoa_r+0xa38>
 8016654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016658:	701c      	strb	r4, [r3, #0]
 801665a:	9b08      	ldr	r3, [sp, #32]
 801665c:	1aeb      	subs	r3, r5, r3
 801665e:	4293      	cmp	r3, r2
 8016660:	d03e      	beq.n	80166e0 <_dtoa_r+0xb30>
 8016662:	2300      	movs	r3, #0
 8016664:	220a      	movs	r2, #10
 8016666:	9903      	ldr	r1, [sp, #12]
 8016668:	9802      	ldr	r0, [sp, #8]
 801666a:	f000 fd27 	bl	80170bc <__multadd>
 801666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016670:	9003      	str	r0, [sp, #12]
 8016672:	42b3      	cmp	r3, r6
 8016674:	d109      	bne.n	801668a <_dtoa_r+0xada>
 8016676:	2300      	movs	r3, #0
 8016678:	220a      	movs	r2, #10
 801667a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801667c:	9802      	ldr	r0, [sp, #8]
 801667e:	f000 fd1d 	bl	80170bc <__multadd>
 8016682:	9009      	str	r0, [sp, #36]	; 0x24
 8016684:	0006      	movs	r6, r0
 8016686:	950a      	str	r5, [sp, #40]	; 0x28
 8016688:	e77d      	b.n	8016586 <_dtoa_r+0x9d6>
 801668a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801668c:	2300      	movs	r3, #0
 801668e:	220a      	movs	r2, #10
 8016690:	9802      	ldr	r0, [sp, #8]
 8016692:	f000 fd13 	bl	80170bc <__multadd>
 8016696:	2300      	movs	r3, #0
 8016698:	9009      	str	r0, [sp, #36]	; 0x24
 801669a:	220a      	movs	r2, #10
 801669c:	0031      	movs	r1, r6
 801669e:	9802      	ldr	r0, [sp, #8]
 80166a0:	f000 fd0c 	bl	80170bc <__multadd>
 80166a4:	e7ee      	b.n	8016684 <_dtoa_r+0xad4>
 80166a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166a8:	930c      	str	r3, [sp, #48]	; 0x30
 80166aa:	9b08      	ldr	r3, [sp, #32]
 80166ac:	9306      	str	r3, [sp, #24]
 80166ae:	9904      	ldr	r1, [sp, #16]
 80166b0:	9803      	ldr	r0, [sp, #12]
 80166b2:	f7ff f9f7 	bl	8015aa4 <quorem>
 80166b6:	9b06      	ldr	r3, [sp, #24]
 80166b8:	3030      	adds	r0, #48	; 0x30
 80166ba:	1c5d      	adds	r5, r3, #1
 80166bc:	7018      	strb	r0, [r3, #0]
 80166be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166c0:	9b08      	ldr	r3, [sp, #32]
 80166c2:	0004      	movs	r4, r0
 80166c4:	1aeb      	subs	r3, r5, r3
 80166c6:	429a      	cmp	r2, r3
 80166c8:	dd08      	ble.n	80166dc <_dtoa_r+0xb2c>
 80166ca:	2300      	movs	r3, #0
 80166cc:	220a      	movs	r2, #10
 80166ce:	9903      	ldr	r1, [sp, #12]
 80166d0:	9802      	ldr	r0, [sp, #8]
 80166d2:	f000 fcf3 	bl	80170bc <__multadd>
 80166d6:	9506      	str	r5, [sp, #24]
 80166d8:	9003      	str	r0, [sp, #12]
 80166da:	e7e8      	b.n	80166ae <_dtoa_r+0xafe>
 80166dc:	2300      	movs	r3, #0
 80166de:	9309      	str	r3, [sp, #36]	; 0x24
 80166e0:	9903      	ldr	r1, [sp, #12]
 80166e2:	2201      	movs	r2, #1
 80166e4:	9802      	ldr	r0, [sp, #8]
 80166e6:	f000 fe89 	bl	80173fc <__lshift>
 80166ea:	9904      	ldr	r1, [sp, #16]
 80166ec:	9003      	str	r0, [sp, #12]
 80166ee:	f000 fed7 	bl	80174a0 <__mcmp>
 80166f2:	2800      	cmp	r0, #0
 80166f4:	dc9d      	bgt.n	8016632 <_dtoa_r+0xa82>
 80166f6:	d101      	bne.n	80166fc <_dtoa_r+0xb4c>
 80166f8:	07e3      	lsls	r3, r4, #31
 80166fa:	d49a      	bmi.n	8016632 <_dtoa_r+0xa82>
 80166fc:	1e6b      	subs	r3, r5, #1
 80166fe:	781a      	ldrb	r2, [r3, #0]
 8016700:	2a30      	cmp	r2, #48	; 0x30
 8016702:	d000      	beq.n	8016706 <_dtoa_r+0xb56>
 8016704:	e6f4      	b.n	80164f0 <_dtoa_r+0x940>
 8016706:	001d      	movs	r5, r3
 8016708:	e7f8      	b.n	80166fc <_dtoa_r+0xb4c>
 801670a:	9a08      	ldr	r2, [sp, #32]
 801670c:	429a      	cmp	r2, r3
 801670e:	d103      	bne.n	8016718 <_dtoa_r+0xb68>
 8016710:	2331      	movs	r3, #49	; 0x31
 8016712:	3701      	adds	r7, #1
 8016714:	7013      	strb	r3, [r2, #0]
 8016716:	e6eb      	b.n	80164f0 <_dtoa_r+0x940>
 8016718:	001d      	movs	r5, r3
 801671a:	e78a      	b.n	8016632 <_dtoa_r+0xa82>
 801671c:	4b0b      	ldr	r3, [pc, #44]	; (801674c <_dtoa_r+0xb9c>)
 801671e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016720:	9308      	str	r3, [sp, #32]
 8016722:	4b0b      	ldr	r3, [pc, #44]	; (8016750 <_dtoa_r+0xba0>)
 8016724:	2a00      	cmp	r2, #0
 8016726:	d001      	beq.n	801672c <_dtoa_r+0xb7c>
 8016728:	f7ff fa75 	bl	8015c16 <_dtoa_r+0x66>
 801672c:	f7ff fa75 	bl	8015c1a <_dtoa_r+0x6a>
 8016730:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016732:	2b01      	cmp	r3, #1
 8016734:	dc00      	bgt.n	8016738 <_dtoa_r+0xb88>
 8016736:	e621      	b.n	801637c <_dtoa_r+0x7cc>
 8016738:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801673a:	2001      	movs	r0, #1
 801673c:	e635      	b.n	80163aa <_dtoa_r+0x7fa>
 801673e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016740:	2b00      	cmp	r3, #0
 8016742:	dcb2      	bgt.n	80166aa <_dtoa_r+0xafa>
 8016744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016746:	2b02      	cmp	r3, #2
 8016748:	ddaf      	ble.n	80166aa <_dtoa_r+0xafa>
 801674a:	e6bc      	b.n	80164c6 <_dtoa_r+0x916>
 801674c:	0801aae5 	.word	0x0801aae5
 8016750:	0801aaed 	.word	0x0801aaed

08016754 <__errno>:
 8016754:	4b01      	ldr	r3, [pc, #4]	; (801675c <__errno+0x8>)
 8016756:	6818      	ldr	r0, [r3, #0]
 8016758:	4770      	bx	lr
 801675a:	46c0      	nop			; (mov r8, r8)
 801675c:	200000a8 	.word	0x200000a8

08016760 <__libc_fini_array>:
 8016760:	b570      	push	{r4, r5, r6, lr}
 8016762:	4d07      	ldr	r5, [pc, #28]	; (8016780 <__libc_fini_array+0x20>)
 8016764:	4c07      	ldr	r4, [pc, #28]	; (8016784 <__libc_fini_array+0x24>)
 8016766:	1b64      	subs	r4, r4, r5
 8016768:	10a4      	asrs	r4, r4, #2
 801676a:	2c00      	cmp	r4, #0
 801676c:	d102      	bne.n	8016774 <__libc_fini_array+0x14>
 801676e:	f001 f987 	bl	8017a80 <_fini>
 8016772:	bd70      	pop	{r4, r5, r6, pc}
 8016774:	3c01      	subs	r4, #1
 8016776:	00a3      	lsls	r3, r4, #2
 8016778:	58eb      	ldr	r3, [r5, r3]
 801677a:	4798      	blx	r3
 801677c:	e7f5      	b.n	801676a <__libc_fini_array+0xa>
 801677e:	46c0      	nop			; (mov r8, r8)
 8016780:	0801ac04 	.word	0x0801ac04
 8016784:	0801ac08 	.word	0x0801ac08

08016788 <_malloc_trim_r>:
 8016788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801678a:	0005      	movs	r5, r0
 801678c:	2008      	movs	r0, #8
 801678e:	000c      	movs	r4, r1
 8016790:	f7ff f95c 	bl	8015a4c <sysconf>
 8016794:	0007      	movs	r7, r0
 8016796:	0028      	movs	r0, r5
 8016798:	f7fc fd88 	bl	80132ac <__malloc_lock>
 801679c:	2203      	movs	r2, #3
 801679e:	4e21      	ldr	r6, [pc, #132]	; (8016824 <_malloc_trim_r+0x9c>)
 80167a0:	0039      	movs	r1, r7
 80167a2:	68b3      	ldr	r3, [r6, #8]
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	4393      	bics	r3, r2
 80167a8:	1b18      	subs	r0, r3, r4
 80167aa:	3811      	subs	r0, #17
 80167ac:	19c0      	adds	r0, r0, r7
 80167ae:	9301      	str	r3, [sp, #4]
 80167b0:	f7e9 fcce 	bl	8000150 <__udivsi3>
 80167b4:	1e44      	subs	r4, r0, #1
 80167b6:	437c      	muls	r4, r7
 80167b8:	42a7      	cmp	r7, r4
 80167ba:	dd04      	ble.n	80167c6 <_malloc_trim_r+0x3e>
 80167bc:	0028      	movs	r0, r5
 80167be:	f7fc fd7d 	bl	80132bc <__malloc_unlock>
 80167c2:	2000      	movs	r0, #0
 80167c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80167c6:	2100      	movs	r1, #0
 80167c8:	0028      	movs	r0, r5
 80167ca:	f7fc ff4f 	bl	801366c <_sbrk_r>
 80167ce:	68b3      	ldr	r3, [r6, #8]
 80167d0:	9a01      	ldr	r2, [sp, #4]
 80167d2:	189b      	adds	r3, r3, r2
 80167d4:	4298      	cmp	r0, r3
 80167d6:	d1f1      	bne.n	80167bc <_malloc_trim_r+0x34>
 80167d8:	4261      	negs	r1, r4
 80167da:	0028      	movs	r0, r5
 80167dc:	f7fc ff46 	bl	801366c <_sbrk_r>
 80167e0:	1c43      	adds	r3, r0, #1
 80167e2:	d110      	bne.n	8016806 <_malloc_trim_r+0x7e>
 80167e4:	2100      	movs	r1, #0
 80167e6:	0028      	movs	r0, r5
 80167e8:	f7fc ff40 	bl	801366c <_sbrk_r>
 80167ec:	68b2      	ldr	r2, [r6, #8]
 80167ee:	1a81      	subs	r1, r0, r2
 80167f0:	290f      	cmp	r1, #15
 80167f2:	dde3      	ble.n	80167bc <_malloc_trim_r+0x34>
 80167f4:	4b0c      	ldr	r3, [pc, #48]	; (8016828 <_malloc_trim_r+0xa0>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	1ac0      	subs	r0, r0, r3
 80167fa:	4b0c      	ldr	r3, [pc, #48]	; (801682c <_malloc_trim_r+0xa4>)
 80167fc:	6018      	str	r0, [r3, #0]
 80167fe:	2301      	movs	r3, #1
 8016800:	430b      	orrs	r3, r1
 8016802:	6053      	str	r3, [r2, #4]
 8016804:	e7da      	b.n	80167bc <_malloc_trim_r+0x34>
 8016806:	68b2      	ldr	r2, [r6, #8]
 8016808:	2601      	movs	r6, #1
 801680a:	9b01      	ldr	r3, [sp, #4]
 801680c:	0028      	movs	r0, r5
 801680e:	1b1b      	subs	r3, r3, r4
 8016810:	4333      	orrs	r3, r6
 8016812:	6053      	str	r3, [r2, #4]
 8016814:	4b05      	ldr	r3, [pc, #20]	; (801682c <_malloc_trim_r+0xa4>)
 8016816:	681a      	ldr	r2, [r3, #0]
 8016818:	1b14      	subs	r4, r2, r4
 801681a:	601c      	str	r4, [r3, #0]
 801681c:	f7fc fd4e 	bl	80132bc <__malloc_unlock>
 8016820:	0030      	movs	r0, r6
 8016822:	e7cf      	b.n	80167c4 <_malloc_trim_r+0x3c>
 8016824:	20000644 	.word	0x20000644
 8016828:	20000a4c 	.word	0x20000a4c
 801682c:	20006914 	.word	0x20006914

08016830 <_free_r>:
 8016830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016832:	1e0d      	subs	r5, r1, #0
 8016834:	9001      	str	r0, [sp, #4]
 8016836:	d02d      	beq.n	8016894 <_free_r+0x64>
 8016838:	f7fc fd38 	bl	80132ac <__malloc_lock>
 801683c:	2301      	movs	r3, #1
 801683e:	0029      	movs	r1, r5
 8016840:	469c      	mov	ip, r3
 8016842:	3908      	subs	r1, #8
 8016844:	684f      	ldr	r7, [r1, #4]
 8016846:	4662      	mov	r2, ip
 8016848:	003b      	movs	r3, r7
 801684a:	4666      	mov	r6, ip
 801684c:	4393      	bics	r3, r2
 801684e:	18c8      	adds	r0, r1, r3
 8016850:	6845      	ldr	r5, [r0, #4]
 8016852:	3202      	adds	r2, #2
 8016854:	4395      	bics	r5, r2
 8016856:	4a4a      	ldr	r2, [pc, #296]	; (8016980 <_free_r+0x150>)
 8016858:	4037      	ands	r7, r6
 801685a:	6896      	ldr	r6, [r2, #8]
 801685c:	4286      	cmp	r6, r0
 801685e:	d11a      	bne.n	8016896 <_free_r+0x66>
 8016860:	195b      	adds	r3, r3, r5
 8016862:	2f00      	cmp	r7, #0
 8016864:	d106      	bne.n	8016874 <_free_r+0x44>
 8016866:	6808      	ldr	r0, [r1, #0]
 8016868:	1a09      	subs	r1, r1, r0
 801686a:	688d      	ldr	r5, [r1, #8]
 801686c:	181b      	adds	r3, r3, r0
 801686e:	68c8      	ldr	r0, [r1, #12]
 8016870:	60e8      	str	r0, [r5, #12]
 8016872:	6085      	str	r5, [r0, #8]
 8016874:	2001      	movs	r0, #1
 8016876:	4318      	orrs	r0, r3
 8016878:	6048      	str	r0, [r1, #4]
 801687a:	6091      	str	r1, [r2, #8]
 801687c:	4a41      	ldr	r2, [pc, #260]	; (8016984 <_free_r+0x154>)
 801687e:	6812      	ldr	r2, [r2, #0]
 8016880:	429a      	cmp	r2, r3
 8016882:	d804      	bhi.n	801688e <_free_r+0x5e>
 8016884:	4b40      	ldr	r3, [pc, #256]	; (8016988 <_free_r+0x158>)
 8016886:	9801      	ldr	r0, [sp, #4]
 8016888:	6819      	ldr	r1, [r3, #0]
 801688a:	f7ff ff7d 	bl	8016788 <_malloc_trim_r>
 801688e:	9801      	ldr	r0, [sp, #4]
 8016890:	f7fc fd14 	bl	80132bc <__malloc_unlock>
 8016894:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016896:	2600      	movs	r6, #0
 8016898:	6045      	str	r5, [r0, #4]
 801689a:	42b7      	cmp	r7, r6
 801689c:	d109      	bne.n	80168b2 <_free_r+0x82>
 801689e:	680f      	ldr	r7, [r1, #0]
 80168a0:	4c3a      	ldr	r4, [pc, #232]	; (801698c <_free_r+0x15c>)
 80168a2:	1bc9      	subs	r1, r1, r7
 80168a4:	19db      	adds	r3, r3, r7
 80168a6:	688f      	ldr	r7, [r1, #8]
 80168a8:	42a7      	cmp	r7, r4
 80168aa:	d02b      	beq.n	8016904 <_free_r+0xd4>
 80168ac:	68cc      	ldr	r4, [r1, #12]
 80168ae:	60fc      	str	r4, [r7, #12]
 80168b0:	60a7      	str	r7, [r4, #8]
 80168b2:	1947      	adds	r7, r0, r5
 80168b4:	687c      	ldr	r4, [r7, #4]
 80168b6:	2701      	movs	r7, #1
 80168b8:	423c      	tst	r4, r7
 80168ba:	d10b      	bne.n	80168d4 <_free_r+0xa4>
 80168bc:	195b      	adds	r3, r3, r5
 80168be:	6885      	ldr	r5, [r0, #8]
 80168c0:	2e00      	cmp	r6, #0
 80168c2:	d121      	bne.n	8016908 <_free_r+0xd8>
 80168c4:	4c31      	ldr	r4, [pc, #196]	; (801698c <_free_r+0x15c>)
 80168c6:	42a5      	cmp	r5, r4
 80168c8:	d11e      	bne.n	8016908 <_free_r+0xd8>
 80168ca:	003e      	movs	r6, r7
 80168cc:	6151      	str	r1, [r2, #20]
 80168ce:	6111      	str	r1, [r2, #16]
 80168d0:	60cd      	str	r5, [r1, #12]
 80168d2:	608d      	str	r5, [r1, #8]
 80168d4:	2001      	movs	r0, #1
 80168d6:	0005      	movs	r5, r0
 80168d8:	431d      	orrs	r5, r3
 80168da:	604d      	str	r5, [r1, #4]
 80168dc:	50cb      	str	r3, [r1, r3]
 80168de:	2e00      	cmp	r6, #0
 80168e0:	d1d5      	bne.n	801688e <_free_r+0x5e>
 80168e2:	4d2b      	ldr	r5, [pc, #172]	; (8016990 <_free_r+0x160>)
 80168e4:	42ab      	cmp	r3, r5
 80168e6:	d813      	bhi.n	8016910 <_free_r+0xe0>
 80168e8:	08db      	lsrs	r3, r3, #3
 80168ea:	109d      	asrs	r5, r3, #2
 80168ec:	40a8      	lsls	r0, r5
 80168ee:	6854      	ldr	r4, [r2, #4]
 80168f0:	00db      	lsls	r3, r3, #3
 80168f2:	4320      	orrs	r0, r4
 80168f4:	6050      	str	r0, [r2, #4]
 80168f6:	189a      	adds	r2, r3, r2
 80168f8:	6893      	ldr	r3, [r2, #8]
 80168fa:	60ca      	str	r2, [r1, #12]
 80168fc:	608b      	str	r3, [r1, #8]
 80168fe:	6091      	str	r1, [r2, #8]
 8016900:	60d9      	str	r1, [r3, #12]
 8016902:	e7c4      	b.n	801688e <_free_r+0x5e>
 8016904:	4666      	mov	r6, ip
 8016906:	e7d4      	b.n	80168b2 <_free_r+0x82>
 8016908:	68c0      	ldr	r0, [r0, #12]
 801690a:	60e8      	str	r0, [r5, #12]
 801690c:	6085      	str	r5, [r0, #8]
 801690e:	e7e1      	b.n	80168d4 <_free_r+0xa4>
 8016910:	0a5d      	lsrs	r5, r3, #9
 8016912:	2d04      	cmp	r5, #4
 8016914:	d812      	bhi.n	801693c <_free_r+0x10c>
 8016916:	0998      	lsrs	r0, r3, #6
 8016918:	3038      	adds	r0, #56	; 0x38
 801691a:	00c6      	lsls	r6, r0, #3
 801691c:	18b6      	adds	r6, r6, r2
 801691e:	68b5      	ldr	r5, [r6, #8]
 8016920:	2703      	movs	r7, #3
 8016922:	42ae      	cmp	r6, r5
 8016924:	d125      	bne.n	8016972 <_free_r+0x142>
 8016926:	2301      	movs	r3, #1
 8016928:	1080      	asrs	r0, r0, #2
 801692a:	4083      	lsls	r3, r0
 801692c:	6850      	ldr	r0, [r2, #4]
 801692e:	4303      	orrs	r3, r0
 8016930:	6053      	str	r3, [r2, #4]
 8016932:	60ce      	str	r6, [r1, #12]
 8016934:	608d      	str	r5, [r1, #8]
 8016936:	60b1      	str	r1, [r6, #8]
 8016938:	60e9      	str	r1, [r5, #12]
 801693a:	e7a8      	b.n	801688e <_free_r+0x5e>
 801693c:	2d14      	cmp	r5, #20
 801693e:	d802      	bhi.n	8016946 <_free_r+0x116>
 8016940:	0028      	movs	r0, r5
 8016942:	305b      	adds	r0, #91	; 0x5b
 8016944:	e7e9      	b.n	801691a <_free_r+0xea>
 8016946:	2d54      	cmp	r5, #84	; 0x54
 8016948:	d802      	bhi.n	8016950 <_free_r+0x120>
 801694a:	0b18      	lsrs	r0, r3, #12
 801694c:	306e      	adds	r0, #110	; 0x6e
 801694e:	e7e4      	b.n	801691a <_free_r+0xea>
 8016950:	20aa      	movs	r0, #170	; 0xaa
 8016952:	0040      	lsls	r0, r0, #1
 8016954:	4285      	cmp	r5, r0
 8016956:	d802      	bhi.n	801695e <_free_r+0x12e>
 8016958:	0bd8      	lsrs	r0, r3, #15
 801695a:	3077      	adds	r0, #119	; 0x77
 801695c:	e7dd      	b.n	801691a <_free_r+0xea>
 801695e:	4e0d      	ldr	r6, [pc, #52]	; (8016994 <_free_r+0x164>)
 8016960:	207e      	movs	r0, #126	; 0x7e
 8016962:	42b5      	cmp	r5, r6
 8016964:	d8d9      	bhi.n	801691a <_free_r+0xea>
 8016966:	0c98      	lsrs	r0, r3, #18
 8016968:	307c      	adds	r0, #124	; 0x7c
 801696a:	e7d6      	b.n	801691a <_free_r+0xea>
 801696c:	68ad      	ldr	r5, [r5, #8]
 801696e:	42ae      	cmp	r6, r5
 8016970:	d003      	beq.n	801697a <_free_r+0x14a>
 8016972:	686a      	ldr	r2, [r5, #4]
 8016974:	43ba      	bics	r2, r7
 8016976:	429a      	cmp	r2, r3
 8016978:	d8f8      	bhi.n	801696c <_free_r+0x13c>
 801697a:	68ee      	ldr	r6, [r5, #12]
 801697c:	e7d9      	b.n	8016932 <_free_r+0x102>
 801697e:	46c0      	nop			; (mov r8, r8)
 8016980:	20000644 	.word	0x20000644
 8016984:	20000a50 	.word	0x20000a50
 8016988:	20006944 	.word	0x20006944
 801698c:	2000064c 	.word	0x2000064c
 8016990:	000001ff 	.word	0x000001ff
 8016994:	00000554 	.word	0x00000554

08016998 <rshift>:
 8016998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801699a:	0004      	movs	r4, r0
 801699c:	6905      	ldr	r5, [r0, #16]
 801699e:	3414      	adds	r4, #20
 80169a0:	114b      	asrs	r3, r1, #5
 80169a2:	0026      	movs	r6, r4
 80169a4:	429d      	cmp	r5, r3
 80169a6:	dd14      	ble.n	80169d2 <rshift+0x3a>
 80169a8:	221f      	movs	r2, #31
 80169aa:	00ad      	lsls	r5, r5, #2
 80169ac:	009b      	lsls	r3, r3, #2
 80169ae:	4011      	ands	r1, r2
 80169b0:	1965      	adds	r5, r4, r5
 80169b2:	18e3      	adds	r3, r4, r3
 80169b4:	0022      	movs	r2, r4
 80169b6:	2900      	cmp	r1, #0
 80169b8:	d01e      	beq.n	80169f8 <rshift+0x60>
 80169ba:	cb04      	ldmia	r3!, {r2}
 80169bc:	2720      	movs	r7, #32
 80169be:	40ca      	lsrs	r2, r1
 80169c0:	46a4      	mov	ip, r4
 80169c2:	1a7f      	subs	r7, r7, r1
 80169c4:	4666      	mov	r6, ip
 80169c6:	429d      	cmp	r5, r3
 80169c8:	d80b      	bhi.n	80169e2 <rshift+0x4a>
 80169ca:	6032      	str	r2, [r6, #0]
 80169cc:	2a00      	cmp	r2, #0
 80169ce:	d000      	beq.n	80169d2 <rshift+0x3a>
 80169d0:	3604      	adds	r6, #4
 80169d2:	1b33      	subs	r3, r6, r4
 80169d4:	109b      	asrs	r3, r3, #2
 80169d6:	6103      	str	r3, [r0, #16]
 80169d8:	42a6      	cmp	r6, r4
 80169da:	d101      	bne.n	80169e0 <rshift+0x48>
 80169dc:	2300      	movs	r3, #0
 80169de:	6143      	str	r3, [r0, #20]
 80169e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169e2:	681e      	ldr	r6, [r3, #0]
 80169e4:	40be      	lsls	r6, r7
 80169e6:	4332      	orrs	r2, r6
 80169e8:	4666      	mov	r6, ip
 80169ea:	c604      	stmia	r6!, {r2}
 80169ec:	cb04      	ldmia	r3!, {r2}
 80169ee:	46b4      	mov	ip, r6
 80169f0:	40ca      	lsrs	r2, r1
 80169f2:	e7e7      	b.n	80169c4 <rshift+0x2c>
 80169f4:	cb02      	ldmia	r3!, {r1}
 80169f6:	c202      	stmia	r2!, {r1}
 80169f8:	0016      	movs	r6, r2
 80169fa:	429d      	cmp	r5, r3
 80169fc:	d8fa      	bhi.n	80169f4 <rshift+0x5c>
 80169fe:	e7e8      	b.n	80169d2 <rshift+0x3a>

08016a00 <__hexdig_fun>:
 8016a00:	0003      	movs	r3, r0
 8016a02:	3b30      	subs	r3, #48	; 0x30
 8016a04:	2b09      	cmp	r3, #9
 8016a06:	d803      	bhi.n	8016a10 <__hexdig_fun+0x10>
 8016a08:	3820      	subs	r0, #32
 8016a0a:	b2c3      	uxtb	r3, r0
 8016a0c:	0018      	movs	r0, r3
 8016a0e:	4770      	bx	lr
 8016a10:	0003      	movs	r3, r0
 8016a12:	3b61      	subs	r3, #97	; 0x61
 8016a14:	2b05      	cmp	r3, #5
 8016a16:	d801      	bhi.n	8016a1c <__hexdig_fun+0x1c>
 8016a18:	3847      	subs	r0, #71	; 0x47
 8016a1a:	e7f6      	b.n	8016a0a <__hexdig_fun+0xa>
 8016a1c:	0002      	movs	r2, r0
 8016a1e:	3a41      	subs	r2, #65	; 0x41
 8016a20:	2300      	movs	r3, #0
 8016a22:	2a05      	cmp	r2, #5
 8016a24:	d8f2      	bhi.n	8016a0c <__hexdig_fun+0xc>
 8016a26:	3827      	subs	r0, #39	; 0x27
 8016a28:	e7ef      	b.n	8016a0a <__hexdig_fun+0xa>

08016a2a <__gethex>:
 8016a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a2c:	b08d      	sub	sp, #52	; 0x34
 8016a2e:	9005      	str	r0, [sp, #20]
 8016a30:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016a32:	9109      	str	r1, [sp, #36]	; 0x24
 8016a34:	9202      	str	r2, [sp, #8]
 8016a36:	930a      	str	r3, [sp, #40]	; 0x28
 8016a38:	f000 fadf 	bl	8016ffa <__localeconv_l>
 8016a3c:	6803      	ldr	r3, [r0, #0]
 8016a3e:	0018      	movs	r0, r3
 8016a40:	9307      	str	r3, [sp, #28]
 8016a42:	f7e9 fb69 	bl	8000118 <strlen>
 8016a46:	2202      	movs	r2, #2
 8016a48:	9b07      	ldr	r3, [sp, #28]
 8016a4a:	4252      	negs	r2, r2
 8016a4c:	181b      	adds	r3, r3, r0
 8016a4e:	3b01      	subs	r3, #1
 8016a50:	781b      	ldrb	r3, [r3, #0]
 8016a52:	9004      	str	r0, [sp, #16]
 8016a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a58:	6819      	ldr	r1, [r3, #0]
 8016a5a:	1c8b      	adds	r3, r1, #2
 8016a5c:	1a52      	subs	r2, r2, r1
 8016a5e:	18d1      	adds	r1, r2, r3
 8016a60:	9301      	str	r3, [sp, #4]
 8016a62:	9108      	str	r1, [sp, #32]
 8016a64:	9901      	ldr	r1, [sp, #4]
 8016a66:	3301      	adds	r3, #1
 8016a68:	7808      	ldrb	r0, [r1, #0]
 8016a6a:	2830      	cmp	r0, #48	; 0x30
 8016a6c:	d0f7      	beq.n	8016a5e <__gethex+0x34>
 8016a6e:	f7ff ffc7 	bl	8016a00 <__hexdig_fun>
 8016a72:	1e07      	subs	r7, r0, #0
 8016a74:	d000      	beq.n	8016a78 <__gethex+0x4e>
 8016a76:	e06f      	b.n	8016b58 <__gethex+0x12e>
 8016a78:	9a04      	ldr	r2, [sp, #16]
 8016a7a:	9907      	ldr	r1, [sp, #28]
 8016a7c:	9801      	ldr	r0, [sp, #4]
 8016a7e:	f7fc fe4b 	bl	8013718 <strncmp>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	d000      	beq.n	8016a88 <__gethex+0x5e>
 8016a86:	e06d      	b.n	8016b64 <__gethex+0x13a>
 8016a88:	9b01      	ldr	r3, [sp, #4]
 8016a8a:	9a04      	ldr	r2, [sp, #16]
 8016a8c:	189c      	adds	r4, r3, r2
 8016a8e:	7820      	ldrb	r0, [r4, #0]
 8016a90:	f7ff ffb6 	bl	8016a00 <__hexdig_fun>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d069      	beq.n	8016b6c <__gethex+0x142>
 8016a98:	9401      	str	r4, [sp, #4]
 8016a9a:	9b01      	ldr	r3, [sp, #4]
 8016a9c:	7818      	ldrb	r0, [r3, #0]
 8016a9e:	2830      	cmp	r0, #48	; 0x30
 8016aa0:	d009      	beq.n	8016ab6 <__gethex+0x8c>
 8016aa2:	f7ff ffad 	bl	8016a00 <__hexdig_fun>
 8016aa6:	4243      	negs	r3, r0
 8016aa8:	4143      	adcs	r3, r0
 8016aaa:	9303      	str	r3, [sp, #12]
 8016aac:	2301      	movs	r3, #1
 8016aae:	0026      	movs	r6, r4
 8016ab0:	9308      	str	r3, [sp, #32]
 8016ab2:	9c01      	ldr	r4, [sp, #4]
 8016ab4:	e004      	b.n	8016ac0 <__gethex+0x96>
 8016ab6:	9b01      	ldr	r3, [sp, #4]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	9301      	str	r3, [sp, #4]
 8016abc:	e7ed      	b.n	8016a9a <__gethex+0x70>
 8016abe:	3401      	adds	r4, #1
 8016ac0:	7820      	ldrb	r0, [r4, #0]
 8016ac2:	f7ff ff9d 	bl	8016a00 <__hexdig_fun>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	d1f9      	bne.n	8016abe <__gethex+0x94>
 8016aca:	9a04      	ldr	r2, [sp, #16]
 8016acc:	9907      	ldr	r1, [sp, #28]
 8016ace:	0020      	movs	r0, r4
 8016ad0:	f7fc fe22 	bl	8013718 <strncmp>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d109      	bne.n	8016aec <__gethex+0xc2>
 8016ad8:	2e00      	cmp	r6, #0
 8016ada:	d10a      	bne.n	8016af2 <__gethex+0xc8>
 8016adc:	9b04      	ldr	r3, [sp, #16]
 8016ade:	18e4      	adds	r4, r4, r3
 8016ae0:	0026      	movs	r6, r4
 8016ae2:	7820      	ldrb	r0, [r4, #0]
 8016ae4:	f7ff ff8c 	bl	8016a00 <__hexdig_fun>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d139      	bne.n	8016b60 <__gethex+0x136>
 8016aec:	2700      	movs	r7, #0
 8016aee:	42be      	cmp	r6, r7
 8016af0:	d001      	beq.n	8016af6 <__gethex+0xcc>
 8016af2:	1b37      	subs	r7, r6, r4
 8016af4:	00bf      	lsls	r7, r7, #2
 8016af6:	7823      	ldrb	r3, [r4, #0]
 8016af8:	2b50      	cmp	r3, #80	; 0x50
 8016afa:	d001      	beq.n	8016b00 <__gethex+0xd6>
 8016afc:	2b70      	cmp	r3, #112	; 0x70
 8016afe:	d142      	bne.n	8016b86 <__gethex+0x15c>
 8016b00:	7863      	ldrb	r3, [r4, #1]
 8016b02:	2b2b      	cmp	r3, #43	; 0x2b
 8016b04:	d034      	beq.n	8016b70 <__gethex+0x146>
 8016b06:	2b2d      	cmp	r3, #45	; 0x2d
 8016b08:	d036      	beq.n	8016b78 <__gethex+0x14e>
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	1c66      	adds	r6, r4, #1
 8016b0e:	9306      	str	r3, [sp, #24]
 8016b10:	7830      	ldrb	r0, [r6, #0]
 8016b12:	f7ff ff75 	bl	8016a00 <__hexdig_fun>
 8016b16:	1e43      	subs	r3, r0, #1
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	2b18      	cmp	r3, #24
 8016b1c:	d833      	bhi.n	8016b86 <__gethex+0x15c>
 8016b1e:	3810      	subs	r0, #16
 8016b20:	0005      	movs	r5, r0
 8016b22:	3601      	adds	r6, #1
 8016b24:	7830      	ldrb	r0, [r6, #0]
 8016b26:	f7ff ff6b 	bl	8016a00 <__hexdig_fun>
 8016b2a:	1e43      	subs	r3, r0, #1
 8016b2c:	b2db      	uxtb	r3, r3
 8016b2e:	2b18      	cmp	r3, #24
 8016b30:	d924      	bls.n	8016b7c <__gethex+0x152>
 8016b32:	9b06      	ldr	r3, [sp, #24]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d000      	beq.n	8016b3a <__gethex+0x110>
 8016b38:	426d      	negs	r5, r5
 8016b3a:	197f      	adds	r7, r7, r5
 8016b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b3e:	601e      	str	r6, [r3, #0]
 8016b40:	9b03      	ldr	r3, [sp, #12]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d021      	beq.n	8016b8a <__gethex+0x160>
 8016b46:	9b08      	ldr	r3, [sp, #32]
 8016b48:	2606      	movs	r6, #6
 8016b4a:	425a      	negs	r2, r3
 8016b4c:	4153      	adcs	r3, r2
 8016b4e:	425b      	negs	r3, r3
 8016b50:	401e      	ands	r6, r3
 8016b52:	0030      	movs	r0, r6
 8016b54:	b00d      	add	sp, #52	; 0x34
 8016b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b58:	2300      	movs	r3, #0
 8016b5a:	9303      	str	r3, [sp, #12]
 8016b5c:	001e      	movs	r6, r3
 8016b5e:	e7a8      	b.n	8016ab2 <__gethex+0x88>
 8016b60:	3401      	adds	r4, #1
 8016b62:	e7be      	b.n	8016ae2 <__gethex+0xb8>
 8016b64:	9c01      	ldr	r4, [sp, #4]
 8016b66:	2301      	movs	r3, #1
 8016b68:	9303      	str	r3, [sp, #12]
 8016b6a:	e7c4      	b.n	8016af6 <__gethex+0xcc>
 8016b6c:	0007      	movs	r7, r0
 8016b6e:	e7fa      	b.n	8016b66 <__gethex+0x13c>
 8016b70:	2300      	movs	r3, #0
 8016b72:	9306      	str	r3, [sp, #24]
 8016b74:	1ca6      	adds	r6, r4, #2
 8016b76:	e7cb      	b.n	8016b10 <__gethex+0xe6>
 8016b78:	2301      	movs	r3, #1
 8016b7a:	e7fa      	b.n	8016b72 <__gethex+0x148>
 8016b7c:	230a      	movs	r3, #10
 8016b7e:	435d      	muls	r5, r3
 8016b80:	182d      	adds	r5, r5, r0
 8016b82:	3d10      	subs	r5, #16
 8016b84:	e7cd      	b.n	8016b22 <__gethex+0xf8>
 8016b86:	0026      	movs	r6, r4
 8016b88:	e7d8      	b.n	8016b3c <__gethex+0x112>
 8016b8a:	9b01      	ldr	r3, [sp, #4]
 8016b8c:	9903      	ldr	r1, [sp, #12]
 8016b8e:	1ae3      	subs	r3, r4, r3
 8016b90:	3b01      	subs	r3, #1
 8016b92:	2b07      	cmp	r3, #7
 8016b94:	dc47      	bgt.n	8016c26 <__gethex+0x1fc>
 8016b96:	9805      	ldr	r0, [sp, #20]
 8016b98:	f000 fa5e 	bl	8017058 <_Balloc>
 8016b9c:	0003      	movs	r3, r0
 8016b9e:	3314      	adds	r3, #20
 8016ba0:	9303      	str	r3, [sp, #12]
 8016ba2:	9308      	str	r3, [sp, #32]
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	0005      	movs	r5, r0
 8016ba8:	001e      	movs	r6, r3
 8016baa:	9306      	str	r3, [sp, #24]
 8016bac:	9b01      	ldr	r3, [sp, #4]
 8016bae:	42a3      	cmp	r3, r4
 8016bb0:	d33c      	bcc.n	8016c2c <__gethex+0x202>
 8016bb2:	9c08      	ldr	r4, [sp, #32]
 8016bb4:	9b03      	ldr	r3, [sp, #12]
 8016bb6:	c440      	stmia	r4!, {r6}
 8016bb8:	1ae4      	subs	r4, r4, r3
 8016bba:	10a4      	asrs	r4, r4, #2
 8016bbc:	612c      	str	r4, [r5, #16]
 8016bbe:	0030      	movs	r0, r6
 8016bc0:	f000 faf8 	bl	80171b4 <__hi0bits>
 8016bc4:	9b02      	ldr	r3, [sp, #8]
 8016bc6:	0164      	lsls	r4, r4, #5
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	1a26      	subs	r6, r4, r0
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	429e      	cmp	r6, r3
 8016bd0:	dd5f      	ble.n	8016c92 <__gethex+0x268>
 8016bd2:	1af6      	subs	r6, r6, r3
 8016bd4:	0031      	movs	r1, r6
 8016bd6:	0028      	movs	r0, r5
 8016bd8:	f000 fde3 	bl	80177a2 <__any_on>
 8016bdc:	1e04      	subs	r4, r0, #0
 8016bde:	d00f      	beq.n	8016c00 <__gethex+0x1d6>
 8016be0:	2401      	movs	r4, #1
 8016be2:	211f      	movs	r1, #31
 8016be4:	0020      	movs	r0, r4
 8016be6:	1e73      	subs	r3, r6, #1
 8016be8:	4019      	ands	r1, r3
 8016bea:	4088      	lsls	r0, r1
 8016bec:	0001      	movs	r1, r0
 8016bee:	115a      	asrs	r2, r3, #5
 8016bf0:	9803      	ldr	r0, [sp, #12]
 8016bf2:	0092      	lsls	r2, r2, #2
 8016bf4:	5812      	ldr	r2, [r2, r0]
 8016bf6:	420a      	tst	r2, r1
 8016bf8:	d002      	beq.n	8016c00 <__gethex+0x1d6>
 8016bfa:	42a3      	cmp	r3, r4
 8016bfc:	dc41      	bgt.n	8016c82 <__gethex+0x258>
 8016bfe:	2402      	movs	r4, #2
 8016c00:	0031      	movs	r1, r6
 8016c02:	0028      	movs	r0, r5
 8016c04:	f7ff fec8 	bl	8016998 <rshift>
 8016c08:	19bf      	adds	r7, r7, r6
 8016c0a:	9b02      	ldr	r3, [sp, #8]
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	9304      	str	r3, [sp, #16]
 8016c10:	42bb      	cmp	r3, r7
 8016c12:	da4e      	bge.n	8016cb2 <__gethex+0x288>
 8016c14:	0029      	movs	r1, r5
 8016c16:	9805      	ldr	r0, [sp, #20]
 8016c18:	f000 fa46 	bl	80170a8 <_Bfree>
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c20:	26a3      	movs	r6, #163	; 0xa3
 8016c22:	6013      	str	r3, [r2, #0]
 8016c24:	e795      	b.n	8016b52 <__gethex+0x128>
 8016c26:	3101      	adds	r1, #1
 8016c28:	105b      	asrs	r3, r3, #1
 8016c2a:	e7b2      	b.n	8016b92 <__gethex+0x168>
 8016c2c:	1e63      	subs	r3, r4, #1
 8016c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c32:	781b      	ldrb	r3, [r3, #0]
 8016c34:	4293      	cmp	r3, r2
 8016c36:	d015      	beq.n	8016c64 <__gethex+0x23a>
 8016c38:	9b06      	ldr	r3, [sp, #24]
 8016c3a:	2b20      	cmp	r3, #32
 8016c3c:	d105      	bne.n	8016c4a <__gethex+0x220>
 8016c3e:	9b08      	ldr	r3, [sp, #32]
 8016c40:	601e      	str	r6, [r3, #0]
 8016c42:	2600      	movs	r6, #0
 8016c44:	3304      	adds	r3, #4
 8016c46:	9308      	str	r3, [sp, #32]
 8016c48:	9606      	str	r6, [sp, #24]
 8016c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c4c:	7818      	ldrb	r0, [r3, #0]
 8016c4e:	f7ff fed7 	bl	8016a00 <__hexdig_fun>
 8016c52:	230f      	movs	r3, #15
 8016c54:	4018      	ands	r0, r3
 8016c56:	9b06      	ldr	r3, [sp, #24]
 8016c58:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016c5a:	4098      	lsls	r0, r3
 8016c5c:	3304      	adds	r3, #4
 8016c5e:	4306      	orrs	r6, r0
 8016c60:	9306      	str	r3, [sp, #24]
 8016c62:	e7a3      	b.n	8016bac <__gethex+0x182>
 8016c64:	2301      	movs	r3, #1
 8016c66:	9a04      	ldr	r2, [sp, #16]
 8016c68:	1a9c      	subs	r4, r3, r2
 8016c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c6c:	191c      	adds	r4, r3, r4
 8016c6e:	9b01      	ldr	r3, [sp, #4]
 8016c70:	429c      	cmp	r4, r3
 8016c72:	d3e1      	bcc.n	8016c38 <__gethex+0x20e>
 8016c74:	9907      	ldr	r1, [sp, #28]
 8016c76:	0020      	movs	r0, r4
 8016c78:	f7fc fd4e 	bl	8013718 <strncmp>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	d1db      	bne.n	8016c38 <__gethex+0x20e>
 8016c80:	e794      	b.n	8016bac <__gethex+0x182>
 8016c82:	1eb1      	subs	r1, r6, #2
 8016c84:	0028      	movs	r0, r5
 8016c86:	f000 fd8c 	bl	80177a2 <__any_on>
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	d0b7      	beq.n	8016bfe <__gethex+0x1d4>
 8016c8e:	2403      	movs	r4, #3
 8016c90:	e7b6      	b.n	8016c00 <__gethex+0x1d6>
 8016c92:	9b01      	ldr	r3, [sp, #4]
 8016c94:	2400      	movs	r4, #0
 8016c96:	429e      	cmp	r6, r3
 8016c98:	dab7      	bge.n	8016c0a <__gethex+0x1e0>
 8016c9a:	1b9e      	subs	r6, r3, r6
 8016c9c:	0029      	movs	r1, r5
 8016c9e:	0032      	movs	r2, r6
 8016ca0:	9805      	ldr	r0, [sp, #20]
 8016ca2:	f000 fbab 	bl	80173fc <__lshift>
 8016ca6:	0003      	movs	r3, r0
 8016ca8:	3314      	adds	r3, #20
 8016caa:	0005      	movs	r5, r0
 8016cac:	1bbf      	subs	r7, r7, r6
 8016cae:	9303      	str	r3, [sp, #12]
 8016cb0:	e7ab      	b.n	8016c0a <__gethex+0x1e0>
 8016cb2:	9b02      	ldr	r3, [sp, #8]
 8016cb4:	685e      	ldr	r6, [r3, #4]
 8016cb6:	42be      	cmp	r6, r7
 8016cb8:	dd6b      	ble.n	8016d92 <__gethex+0x368>
 8016cba:	9b01      	ldr	r3, [sp, #4]
 8016cbc:	1bf6      	subs	r6, r6, r7
 8016cbe:	42b3      	cmp	r3, r6
 8016cc0:	dc32      	bgt.n	8016d28 <__gethex+0x2fe>
 8016cc2:	9b02      	ldr	r3, [sp, #8]
 8016cc4:	68db      	ldr	r3, [r3, #12]
 8016cc6:	2b02      	cmp	r3, #2
 8016cc8:	d026      	beq.n	8016d18 <__gethex+0x2ee>
 8016cca:	2b03      	cmp	r3, #3
 8016ccc:	d028      	beq.n	8016d20 <__gethex+0x2f6>
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d119      	bne.n	8016d06 <__gethex+0x2dc>
 8016cd2:	9b01      	ldr	r3, [sp, #4]
 8016cd4:	42b3      	cmp	r3, r6
 8016cd6:	d116      	bne.n	8016d06 <__gethex+0x2dc>
 8016cd8:	2b01      	cmp	r3, #1
 8016cda:	dc0d      	bgt.n	8016cf8 <__gethex+0x2ce>
 8016cdc:	9b02      	ldr	r3, [sp, #8]
 8016cde:	2662      	movs	r6, #98	; 0x62
 8016ce0:	685b      	ldr	r3, [r3, #4]
 8016ce2:	9301      	str	r3, [sp, #4]
 8016ce4:	9a01      	ldr	r2, [sp, #4]
 8016ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ce8:	601a      	str	r2, [r3, #0]
 8016cea:	2301      	movs	r3, #1
 8016cec:	9a03      	ldr	r2, [sp, #12]
 8016cee:	612b      	str	r3, [r5, #16]
 8016cf0:	6013      	str	r3, [r2, #0]
 8016cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016cf4:	601d      	str	r5, [r3, #0]
 8016cf6:	e72c      	b.n	8016b52 <__gethex+0x128>
 8016cf8:	9901      	ldr	r1, [sp, #4]
 8016cfa:	0028      	movs	r0, r5
 8016cfc:	3901      	subs	r1, #1
 8016cfe:	f000 fd50 	bl	80177a2 <__any_on>
 8016d02:	2800      	cmp	r0, #0
 8016d04:	d1ea      	bne.n	8016cdc <__gethex+0x2b2>
 8016d06:	0029      	movs	r1, r5
 8016d08:	9805      	ldr	r0, [sp, #20]
 8016d0a:	f000 f9cd 	bl	80170a8 <_Bfree>
 8016d0e:	2300      	movs	r3, #0
 8016d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d12:	2650      	movs	r6, #80	; 0x50
 8016d14:	6013      	str	r3, [r2, #0]
 8016d16:	e71c      	b.n	8016b52 <__gethex+0x128>
 8016d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d0de      	beq.n	8016cdc <__gethex+0x2b2>
 8016d1e:	e7f2      	b.n	8016d06 <__gethex+0x2dc>
 8016d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d1da      	bne.n	8016cdc <__gethex+0x2b2>
 8016d26:	e7ee      	b.n	8016d06 <__gethex+0x2dc>
 8016d28:	1e77      	subs	r7, r6, #1
 8016d2a:	2c00      	cmp	r4, #0
 8016d2c:	d12f      	bne.n	8016d8e <__gethex+0x364>
 8016d2e:	2f00      	cmp	r7, #0
 8016d30:	d004      	beq.n	8016d3c <__gethex+0x312>
 8016d32:	0039      	movs	r1, r7
 8016d34:	0028      	movs	r0, r5
 8016d36:	f000 fd34 	bl	80177a2 <__any_on>
 8016d3a:	0004      	movs	r4, r0
 8016d3c:	231f      	movs	r3, #31
 8016d3e:	117a      	asrs	r2, r7, #5
 8016d40:	401f      	ands	r7, r3
 8016d42:	3b1e      	subs	r3, #30
 8016d44:	40bb      	lsls	r3, r7
 8016d46:	9903      	ldr	r1, [sp, #12]
 8016d48:	0092      	lsls	r2, r2, #2
 8016d4a:	5852      	ldr	r2, [r2, r1]
 8016d4c:	421a      	tst	r2, r3
 8016d4e:	d001      	beq.n	8016d54 <__gethex+0x32a>
 8016d50:	2302      	movs	r3, #2
 8016d52:	431c      	orrs	r4, r3
 8016d54:	9b01      	ldr	r3, [sp, #4]
 8016d56:	0031      	movs	r1, r6
 8016d58:	1b9b      	subs	r3, r3, r6
 8016d5a:	2602      	movs	r6, #2
 8016d5c:	0028      	movs	r0, r5
 8016d5e:	9301      	str	r3, [sp, #4]
 8016d60:	f7ff fe1a 	bl	8016998 <rshift>
 8016d64:	9b02      	ldr	r3, [sp, #8]
 8016d66:	685f      	ldr	r7, [r3, #4]
 8016d68:	2c00      	cmp	r4, #0
 8016d6a:	d040      	beq.n	8016dee <__gethex+0x3c4>
 8016d6c:	9b02      	ldr	r3, [sp, #8]
 8016d6e:	68db      	ldr	r3, [r3, #12]
 8016d70:	2b02      	cmp	r3, #2
 8016d72:	d010      	beq.n	8016d96 <__gethex+0x36c>
 8016d74:	2b03      	cmp	r3, #3
 8016d76:	d012      	beq.n	8016d9e <__gethex+0x374>
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d106      	bne.n	8016d8a <__gethex+0x360>
 8016d7c:	07a2      	lsls	r2, r4, #30
 8016d7e:	d504      	bpl.n	8016d8a <__gethex+0x360>
 8016d80:	9a03      	ldr	r2, [sp, #12]
 8016d82:	6812      	ldr	r2, [r2, #0]
 8016d84:	4314      	orrs	r4, r2
 8016d86:	421c      	tst	r4, r3
 8016d88:	d10c      	bne.n	8016da4 <__gethex+0x37a>
 8016d8a:	2310      	movs	r3, #16
 8016d8c:	e02e      	b.n	8016dec <__gethex+0x3c2>
 8016d8e:	2401      	movs	r4, #1
 8016d90:	e7d4      	b.n	8016d3c <__gethex+0x312>
 8016d92:	2601      	movs	r6, #1
 8016d94:	e7e8      	b.n	8016d68 <__gethex+0x33e>
 8016d96:	2301      	movs	r3, #1
 8016d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d9a:	1a9b      	subs	r3, r3, r2
 8016d9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d0f2      	beq.n	8016d8a <__gethex+0x360>
 8016da4:	692c      	ldr	r4, [r5, #16]
 8016da6:	00a3      	lsls	r3, r4, #2
 8016da8:	9304      	str	r3, [sp, #16]
 8016daa:	002b      	movs	r3, r5
 8016dac:	00a2      	lsls	r2, r4, #2
 8016dae:	3314      	adds	r3, #20
 8016db0:	1899      	adds	r1, r3, r2
 8016db2:	2200      	movs	r2, #0
 8016db4:	4694      	mov	ip, r2
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	1c50      	adds	r0, r2, #1
 8016dba:	d01d      	beq.n	8016df8 <__gethex+0x3ce>
 8016dbc:	3201      	adds	r2, #1
 8016dbe:	601a      	str	r2, [r3, #0]
 8016dc0:	002b      	movs	r3, r5
 8016dc2:	3314      	adds	r3, #20
 8016dc4:	2e02      	cmp	r6, #2
 8016dc6:	d13a      	bne.n	8016e3e <__gethex+0x414>
 8016dc8:	9a02      	ldr	r2, [sp, #8]
 8016dca:	9901      	ldr	r1, [sp, #4]
 8016dcc:	6812      	ldr	r2, [r2, #0]
 8016dce:	3a01      	subs	r2, #1
 8016dd0:	428a      	cmp	r2, r1
 8016dd2:	d10a      	bne.n	8016dea <__gethex+0x3c0>
 8016dd4:	114a      	asrs	r2, r1, #5
 8016dd6:	211f      	movs	r1, #31
 8016dd8:	9801      	ldr	r0, [sp, #4]
 8016dda:	0092      	lsls	r2, r2, #2
 8016ddc:	4001      	ands	r1, r0
 8016dde:	2001      	movs	r0, #1
 8016de0:	0004      	movs	r4, r0
 8016de2:	408c      	lsls	r4, r1
 8016de4:	58d3      	ldr	r3, [r2, r3]
 8016de6:	4223      	tst	r3, r4
 8016de8:	d148      	bne.n	8016e7c <__gethex+0x452>
 8016dea:	2320      	movs	r3, #32
 8016dec:	431e      	orrs	r6, r3
 8016dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016df0:	601d      	str	r5, [r3, #0]
 8016df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016df4:	601f      	str	r7, [r3, #0]
 8016df6:	e6ac      	b.n	8016b52 <__gethex+0x128>
 8016df8:	4662      	mov	r2, ip
 8016dfa:	c304      	stmia	r3!, {r2}
 8016dfc:	4299      	cmp	r1, r3
 8016dfe:	d8da      	bhi.n	8016db6 <__gethex+0x38c>
 8016e00:	68ab      	ldr	r3, [r5, #8]
 8016e02:	429c      	cmp	r4, r3
 8016e04:	db12      	blt.n	8016e2c <__gethex+0x402>
 8016e06:	686b      	ldr	r3, [r5, #4]
 8016e08:	9805      	ldr	r0, [sp, #20]
 8016e0a:	1c59      	adds	r1, r3, #1
 8016e0c:	f000 f924 	bl	8017058 <_Balloc>
 8016e10:	0029      	movs	r1, r5
 8016e12:	692b      	ldr	r3, [r5, #16]
 8016e14:	9003      	str	r0, [sp, #12]
 8016e16:	1c9a      	adds	r2, r3, #2
 8016e18:	0092      	lsls	r2, r2, #2
 8016e1a:	310c      	adds	r1, #12
 8016e1c:	300c      	adds	r0, #12
 8016e1e:	f7fc fa34 	bl	801328a <memcpy>
 8016e22:	0029      	movs	r1, r5
 8016e24:	9805      	ldr	r0, [sp, #20]
 8016e26:	f000 f93f 	bl	80170a8 <_Bfree>
 8016e2a:	9d03      	ldr	r5, [sp, #12]
 8016e2c:	692b      	ldr	r3, [r5, #16]
 8016e2e:	1c5a      	adds	r2, r3, #1
 8016e30:	612a      	str	r2, [r5, #16]
 8016e32:	2201      	movs	r2, #1
 8016e34:	3304      	adds	r3, #4
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	18eb      	adds	r3, r5, r3
 8016e3a:	605a      	str	r2, [r3, #4]
 8016e3c:	e7c0      	b.n	8016dc0 <__gethex+0x396>
 8016e3e:	692a      	ldr	r2, [r5, #16]
 8016e40:	42a2      	cmp	r2, r4
 8016e42:	dd0a      	ble.n	8016e5a <__gethex+0x430>
 8016e44:	2101      	movs	r1, #1
 8016e46:	0028      	movs	r0, r5
 8016e48:	f7ff fda6 	bl	8016998 <rshift>
 8016e4c:	9b02      	ldr	r3, [sp, #8]
 8016e4e:	3701      	adds	r7, #1
 8016e50:	689b      	ldr	r3, [r3, #8]
 8016e52:	2601      	movs	r6, #1
 8016e54:	42bb      	cmp	r3, r7
 8016e56:	dac8      	bge.n	8016dea <__gethex+0x3c0>
 8016e58:	e6dc      	b.n	8016c14 <__gethex+0x1ea>
 8016e5a:	241f      	movs	r4, #31
 8016e5c:	9a01      	ldr	r2, [sp, #4]
 8016e5e:	2601      	movs	r6, #1
 8016e60:	4022      	ands	r2, r4
 8016e62:	1e14      	subs	r4, r2, #0
 8016e64:	d0c1      	beq.n	8016dea <__gethex+0x3c0>
 8016e66:	9a04      	ldr	r2, [sp, #16]
 8016e68:	189b      	adds	r3, r3, r2
 8016e6a:	3b04      	subs	r3, #4
 8016e6c:	6818      	ldr	r0, [r3, #0]
 8016e6e:	f000 f9a1 	bl	80171b4 <__hi0bits>
 8016e72:	2120      	movs	r1, #32
 8016e74:	1b0c      	subs	r4, r1, r4
 8016e76:	42a0      	cmp	r0, r4
 8016e78:	dbe4      	blt.n	8016e44 <__gethex+0x41a>
 8016e7a:	e7b6      	b.n	8016dea <__gethex+0x3c0>
 8016e7c:	0006      	movs	r6, r0
 8016e7e:	e7b4      	b.n	8016dea <__gethex+0x3c0>

08016e80 <L_shift>:
 8016e80:	2308      	movs	r3, #8
 8016e82:	b570      	push	{r4, r5, r6, lr}
 8016e84:	2520      	movs	r5, #32
 8016e86:	1a9a      	subs	r2, r3, r2
 8016e88:	0092      	lsls	r2, r2, #2
 8016e8a:	1aad      	subs	r5, r5, r2
 8016e8c:	6843      	ldr	r3, [r0, #4]
 8016e8e:	6806      	ldr	r6, [r0, #0]
 8016e90:	001c      	movs	r4, r3
 8016e92:	40ac      	lsls	r4, r5
 8016e94:	40d3      	lsrs	r3, r2
 8016e96:	4334      	orrs	r4, r6
 8016e98:	6004      	str	r4, [r0, #0]
 8016e9a:	6043      	str	r3, [r0, #4]
 8016e9c:	3004      	adds	r0, #4
 8016e9e:	4288      	cmp	r0, r1
 8016ea0:	d3f4      	bcc.n	8016e8c <L_shift+0xc>
 8016ea2:	bd70      	pop	{r4, r5, r6, pc}

08016ea4 <__match>:
 8016ea4:	b530      	push	{r4, r5, lr}
 8016ea6:	6803      	ldr	r3, [r0, #0]
 8016ea8:	780c      	ldrb	r4, [r1, #0]
 8016eaa:	3301      	adds	r3, #1
 8016eac:	2c00      	cmp	r4, #0
 8016eae:	d102      	bne.n	8016eb6 <__match+0x12>
 8016eb0:	6003      	str	r3, [r0, #0]
 8016eb2:	2001      	movs	r0, #1
 8016eb4:	bd30      	pop	{r4, r5, pc}
 8016eb6:	781a      	ldrb	r2, [r3, #0]
 8016eb8:	0015      	movs	r5, r2
 8016eba:	3d41      	subs	r5, #65	; 0x41
 8016ebc:	2d19      	cmp	r5, #25
 8016ebe:	d800      	bhi.n	8016ec2 <__match+0x1e>
 8016ec0:	3220      	adds	r2, #32
 8016ec2:	3101      	adds	r1, #1
 8016ec4:	42a2      	cmp	r2, r4
 8016ec6:	d0ef      	beq.n	8016ea8 <__match+0x4>
 8016ec8:	2000      	movs	r0, #0
 8016eca:	e7f3      	b.n	8016eb4 <__match+0x10>

08016ecc <__hexnan>:
 8016ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ece:	b08b      	sub	sp, #44	; 0x2c
 8016ed0:	9201      	str	r2, [sp, #4]
 8016ed2:	680a      	ldr	r2, [r1, #0]
 8016ed4:	9901      	ldr	r1, [sp, #4]
 8016ed6:	1153      	asrs	r3, r2, #5
 8016ed8:	009b      	lsls	r3, r3, #2
 8016eda:	18cb      	adds	r3, r1, r3
 8016edc:	9304      	str	r3, [sp, #16]
 8016ede:	231f      	movs	r3, #31
 8016ee0:	401a      	ands	r2, r3
 8016ee2:	9008      	str	r0, [sp, #32]
 8016ee4:	9206      	str	r2, [sp, #24]
 8016ee6:	d002      	beq.n	8016eee <__hexnan+0x22>
 8016ee8:	9b04      	ldr	r3, [sp, #16]
 8016eea:	3304      	adds	r3, #4
 8016eec:	9304      	str	r3, [sp, #16]
 8016eee:	9b04      	ldr	r3, [sp, #16]
 8016ef0:	2500      	movs	r5, #0
 8016ef2:	1f1e      	subs	r6, r3, #4
 8016ef4:	0037      	movs	r7, r6
 8016ef6:	0034      	movs	r4, r6
 8016ef8:	9b08      	ldr	r3, [sp, #32]
 8016efa:	6035      	str	r5, [r6, #0]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	9507      	str	r5, [sp, #28]
 8016f00:	9305      	str	r3, [sp, #20]
 8016f02:	9502      	str	r5, [sp, #8]
 8016f04:	9b05      	ldr	r3, [sp, #20]
 8016f06:	3301      	adds	r3, #1
 8016f08:	9309      	str	r3, [sp, #36]	; 0x24
 8016f0a:	9b05      	ldr	r3, [sp, #20]
 8016f0c:	785b      	ldrb	r3, [r3, #1]
 8016f0e:	9303      	str	r3, [sp, #12]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d028      	beq.n	8016f66 <__hexnan+0x9a>
 8016f14:	9803      	ldr	r0, [sp, #12]
 8016f16:	f7ff fd73 	bl	8016a00 <__hexdig_fun>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d145      	bne.n	8016faa <__hexnan+0xde>
 8016f1e:	9b03      	ldr	r3, [sp, #12]
 8016f20:	2b20      	cmp	r3, #32
 8016f22:	d819      	bhi.n	8016f58 <__hexnan+0x8c>
 8016f24:	9b02      	ldr	r3, [sp, #8]
 8016f26:	9a07      	ldr	r2, [sp, #28]
 8016f28:	4293      	cmp	r3, r2
 8016f2a:	dd12      	ble.n	8016f52 <__hexnan+0x86>
 8016f2c:	42bc      	cmp	r4, r7
 8016f2e:	d206      	bcs.n	8016f3e <__hexnan+0x72>
 8016f30:	2d07      	cmp	r5, #7
 8016f32:	dc04      	bgt.n	8016f3e <__hexnan+0x72>
 8016f34:	002a      	movs	r2, r5
 8016f36:	0039      	movs	r1, r7
 8016f38:	0020      	movs	r0, r4
 8016f3a:	f7ff ffa1 	bl	8016e80 <L_shift>
 8016f3e:	9b01      	ldr	r3, [sp, #4]
 8016f40:	2508      	movs	r5, #8
 8016f42:	429c      	cmp	r4, r3
 8016f44:	d905      	bls.n	8016f52 <__hexnan+0x86>
 8016f46:	1f27      	subs	r7, r4, #4
 8016f48:	2500      	movs	r5, #0
 8016f4a:	003c      	movs	r4, r7
 8016f4c:	9b02      	ldr	r3, [sp, #8]
 8016f4e:	603d      	str	r5, [r7, #0]
 8016f50:	9307      	str	r3, [sp, #28]
 8016f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f54:	9305      	str	r3, [sp, #20]
 8016f56:	e7d5      	b.n	8016f04 <__hexnan+0x38>
 8016f58:	9b03      	ldr	r3, [sp, #12]
 8016f5a:	2b29      	cmp	r3, #41	; 0x29
 8016f5c:	d14a      	bne.n	8016ff4 <__hexnan+0x128>
 8016f5e:	9b05      	ldr	r3, [sp, #20]
 8016f60:	9a08      	ldr	r2, [sp, #32]
 8016f62:	3302      	adds	r3, #2
 8016f64:	6013      	str	r3, [r2, #0]
 8016f66:	9b02      	ldr	r3, [sp, #8]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d043      	beq.n	8016ff4 <__hexnan+0x128>
 8016f6c:	42bc      	cmp	r4, r7
 8016f6e:	d206      	bcs.n	8016f7e <__hexnan+0xb2>
 8016f70:	2d07      	cmp	r5, #7
 8016f72:	dc04      	bgt.n	8016f7e <__hexnan+0xb2>
 8016f74:	002a      	movs	r2, r5
 8016f76:	0039      	movs	r1, r7
 8016f78:	0020      	movs	r0, r4
 8016f7a:	f7ff ff81 	bl	8016e80 <L_shift>
 8016f7e:	9b01      	ldr	r3, [sp, #4]
 8016f80:	429c      	cmp	r4, r3
 8016f82:	d926      	bls.n	8016fd2 <__hexnan+0x106>
 8016f84:	cc04      	ldmia	r4!, {r2}
 8016f86:	601a      	str	r2, [r3, #0]
 8016f88:	3304      	adds	r3, #4
 8016f8a:	42a6      	cmp	r6, r4
 8016f8c:	d2fa      	bcs.n	8016f84 <__hexnan+0xb8>
 8016f8e:	2200      	movs	r2, #0
 8016f90:	c304      	stmia	r3!, {r2}
 8016f92:	429e      	cmp	r6, r3
 8016f94:	d2fc      	bcs.n	8016f90 <__hexnan+0xc4>
 8016f96:	6833      	ldr	r3, [r6, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d104      	bne.n	8016fa6 <__hexnan+0xda>
 8016f9c:	9b01      	ldr	r3, [sp, #4]
 8016f9e:	429e      	cmp	r6, r3
 8016fa0:	d126      	bne.n	8016ff0 <__hexnan+0x124>
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	6033      	str	r3, [r6, #0]
 8016fa6:	2005      	movs	r0, #5
 8016fa8:	e025      	b.n	8016ff6 <__hexnan+0x12a>
 8016faa:	9b02      	ldr	r3, [sp, #8]
 8016fac:	3501      	adds	r5, #1
 8016fae:	3301      	adds	r3, #1
 8016fb0:	9302      	str	r3, [sp, #8]
 8016fb2:	2d08      	cmp	r5, #8
 8016fb4:	dd06      	ble.n	8016fc4 <__hexnan+0xf8>
 8016fb6:	9b01      	ldr	r3, [sp, #4]
 8016fb8:	429c      	cmp	r4, r3
 8016fba:	d9ca      	bls.n	8016f52 <__hexnan+0x86>
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	2501      	movs	r5, #1
 8016fc0:	3c04      	subs	r4, #4
 8016fc2:	6023      	str	r3, [r4, #0]
 8016fc4:	220f      	movs	r2, #15
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	4010      	ands	r0, r2
 8016fca:	011b      	lsls	r3, r3, #4
 8016fcc:	4318      	orrs	r0, r3
 8016fce:	6020      	str	r0, [r4, #0]
 8016fd0:	e7bf      	b.n	8016f52 <__hexnan+0x86>
 8016fd2:	9b06      	ldr	r3, [sp, #24]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d0de      	beq.n	8016f96 <__hexnan+0xca>
 8016fd8:	2120      	movs	r1, #32
 8016fda:	9a06      	ldr	r2, [sp, #24]
 8016fdc:	9b04      	ldr	r3, [sp, #16]
 8016fde:	1a89      	subs	r1, r1, r2
 8016fe0:	2201      	movs	r2, #1
 8016fe2:	4252      	negs	r2, r2
 8016fe4:	40ca      	lsrs	r2, r1
 8016fe6:	3b04      	subs	r3, #4
 8016fe8:	6819      	ldr	r1, [r3, #0]
 8016fea:	400a      	ands	r2, r1
 8016fec:	601a      	str	r2, [r3, #0]
 8016fee:	e7d2      	b.n	8016f96 <__hexnan+0xca>
 8016ff0:	3e04      	subs	r6, #4
 8016ff2:	e7d0      	b.n	8016f96 <__hexnan+0xca>
 8016ff4:	2004      	movs	r0, #4
 8016ff6:	b00b      	add	sp, #44	; 0x2c
 8016ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ffa <__localeconv_l>:
 8016ffa:	30f0      	adds	r0, #240	; 0xf0
 8016ffc:	4770      	bx	lr
	...

08017000 <_localeconv_r>:
 8017000:	4b03      	ldr	r3, [pc, #12]	; (8017010 <_localeconv_r+0x10>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017006:	2800      	cmp	r0, #0
 8017008:	d100      	bne.n	801700c <_localeconv_r+0xc>
 801700a:	4802      	ldr	r0, [pc, #8]	; (8017014 <_localeconv_r+0x14>)
 801700c:	30f0      	adds	r0, #240	; 0xf0
 801700e:	4770      	bx	lr
 8017010:	200000a8 	.word	0x200000a8
 8017014:	200004d8 	.word	0x200004d8

08017018 <__retarget_lock_acquire_recursive>:
 8017018:	4770      	bx	lr

0801701a <__retarget_lock_release_recursive>:
 801701a:	4770      	bx	lr

0801701c <memchr>:
 801701c:	b2c9      	uxtb	r1, r1
 801701e:	1882      	adds	r2, r0, r2
 8017020:	4290      	cmp	r0, r2
 8017022:	d101      	bne.n	8017028 <memchr+0xc>
 8017024:	2000      	movs	r0, #0
 8017026:	4770      	bx	lr
 8017028:	7803      	ldrb	r3, [r0, #0]
 801702a:	428b      	cmp	r3, r1
 801702c:	d0fb      	beq.n	8017026 <memchr+0xa>
 801702e:	3001      	adds	r0, #1
 8017030:	e7f6      	b.n	8017020 <memchr+0x4>

08017032 <memmove>:
 8017032:	b510      	push	{r4, lr}
 8017034:	4288      	cmp	r0, r1
 8017036:	d902      	bls.n	801703e <memmove+0xc>
 8017038:	188b      	adds	r3, r1, r2
 801703a:	4298      	cmp	r0, r3
 801703c:	d303      	bcc.n	8017046 <memmove+0x14>
 801703e:	2300      	movs	r3, #0
 8017040:	e007      	b.n	8017052 <memmove+0x20>
 8017042:	5c8b      	ldrb	r3, [r1, r2]
 8017044:	5483      	strb	r3, [r0, r2]
 8017046:	3a01      	subs	r2, #1
 8017048:	d2fb      	bcs.n	8017042 <memmove+0x10>
 801704a:	bd10      	pop	{r4, pc}
 801704c:	5ccc      	ldrb	r4, [r1, r3]
 801704e:	54c4      	strb	r4, [r0, r3]
 8017050:	3301      	adds	r3, #1
 8017052:	429a      	cmp	r2, r3
 8017054:	d1fa      	bne.n	801704c <memmove+0x1a>
 8017056:	e7f8      	b.n	801704a <memmove+0x18>

08017058 <_Balloc>:
 8017058:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801705a:	b570      	push	{r4, r5, r6, lr}
 801705c:	0004      	movs	r4, r0
 801705e:	000d      	movs	r5, r1
 8017060:	2b00      	cmp	r3, #0
 8017062:	d012      	beq.n	801708a <_Balloc+0x32>
 8017064:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017066:	00ab      	lsls	r3, r5, #2
 8017068:	18d3      	adds	r3, r2, r3
 801706a:	6818      	ldr	r0, [r3, #0]
 801706c:	2800      	cmp	r0, #0
 801706e:	d115      	bne.n	801709c <_Balloc+0x44>
 8017070:	2101      	movs	r1, #1
 8017072:	000e      	movs	r6, r1
 8017074:	40ae      	lsls	r6, r5
 8017076:	1d72      	adds	r2, r6, #5
 8017078:	0092      	lsls	r2, r2, #2
 801707a:	0020      	movs	r0, r4
 801707c:	f000 fcbe 	bl	80179fc <_calloc_r>
 8017080:	2800      	cmp	r0, #0
 8017082:	d009      	beq.n	8017098 <_Balloc+0x40>
 8017084:	6045      	str	r5, [r0, #4]
 8017086:	6086      	str	r6, [r0, #8]
 8017088:	e00a      	b.n	80170a0 <_Balloc+0x48>
 801708a:	2221      	movs	r2, #33	; 0x21
 801708c:	2104      	movs	r1, #4
 801708e:	f000 fcb5 	bl	80179fc <_calloc_r>
 8017092:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017094:	2800      	cmp	r0, #0
 8017096:	d1e5      	bne.n	8017064 <_Balloc+0xc>
 8017098:	2000      	movs	r0, #0
 801709a:	bd70      	pop	{r4, r5, r6, pc}
 801709c:	6802      	ldr	r2, [r0, #0]
 801709e:	601a      	str	r2, [r3, #0]
 80170a0:	2300      	movs	r3, #0
 80170a2:	6103      	str	r3, [r0, #16]
 80170a4:	60c3      	str	r3, [r0, #12]
 80170a6:	e7f8      	b.n	801709a <_Balloc+0x42>

080170a8 <_Bfree>:
 80170a8:	2900      	cmp	r1, #0
 80170aa:	d006      	beq.n	80170ba <_Bfree+0x12>
 80170ac:	684b      	ldr	r3, [r1, #4]
 80170ae:	009a      	lsls	r2, r3, #2
 80170b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80170b2:	189b      	adds	r3, r3, r2
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	600a      	str	r2, [r1, #0]
 80170b8:	6019      	str	r1, [r3, #0]
 80170ba:	4770      	bx	lr

080170bc <__multadd>:
 80170bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170be:	001e      	movs	r6, r3
 80170c0:	2314      	movs	r3, #20
 80170c2:	469c      	mov	ip, r3
 80170c4:	0007      	movs	r7, r0
 80170c6:	000c      	movs	r4, r1
 80170c8:	2000      	movs	r0, #0
 80170ca:	690d      	ldr	r5, [r1, #16]
 80170cc:	448c      	add	ip, r1
 80170ce:	4663      	mov	r3, ip
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	3001      	adds	r0, #1
 80170d4:	b299      	uxth	r1, r3
 80170d6:	4663      	mov	r3, ip
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	4351      	muls	r1, r2
 80170dc:	0c1b      	lsrs	r3, r3, #16
 80170de:	4353      	muls	r3, r2
 80170e0:	1989      	adds	r1, r1, r6
 80170e2:	0c0e      	lsrs	r6, r1, #16
 80170e4:	199b      	adds	r3, r3, r6
 80170e6:	b289      	uxth	r1, r1
 80170e8:	0c1e      	lsrs	r6, r3, #16
 80170ea:	041b      	lsls	r3, r3, #16
 80170ec:	185b      	adds	r3, r3, r1
 80170ee:	4661      	mov	r1, ip
 80170f0:	c108      	stmia	r1!, {r3}
 80170f2:	468c      	mov	ip, r1
 80170f4:	4285      	cmp	r5, r0
 80170f6:	dcea      	bgt.n	80170ce <__multadd+0x12>
 80170f8:	2e00      	cmp	r6, #0
 80170fa:	d01b      	beq.n	8017134 <__multadd+0x78>
 80170fc:	68a3      	ldr	r3, [r4, #8]
 80170fe:	42ab      	cmp	r3, r5
 8017100:	dc12      	bgt.n	8017128 <__multadd+0x6c>
 8017102:	6863      	ldr	r3, [r4, #4]
 8017104:	0038      	movs	r0, r7
 8017106:	1c59      	adds	r1, r3, #1
 8017108:	f7ff ffa6 	bl	8017058 <_Balloc>
 801710c:	0021      	movs	r1, r4
 801710e:	6923      	ldr	r3, [r4, #16]
 8017110:	9001      	str	r0, [sp, #4]
 8017112:	1c9a      	adds	r2, r3, #2
 8017114:	0092      	lsls	r2, r2, #2
 8017116:	310c      	adds	r1, #12
 8017118:	300c      	adds	r0, #12
 801711a:	f7fc f8b6 	bl	801328a <memcpy>
 801711e:	0021      	movs	r1, r4
 8017120:	0038      	movs	r0, r7
 8017122:	f7ff ffc1 	bl	80170a8 <_Bfree>
 8017126:	9c01      	ldr	r4, [sp, #4]
 8017128:	1d2b      	adds	r3, r5, #4
 801712a:	009b      	lsls	r3, r3, #2
 801712c:	18e3      	adds	r3, r4, r3
 801712e:	3501      	adds	r5, #1
 8017130:	605e      	str	r6, [r3, #4]
 8017132:	6125      	str	r5, [r4, #16]
 8017134:	0020      	movs	r0, r4
 8017136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017138 <__s2b>:
 8017138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801713a:	0006      	movs	r6, r0
 801713c:	0018      	movs	r0, r3
 801713e:	000c      	movs	r4, r1
 8017140:	3008      	adds	r0, #8
 8017142:	2109      	movs	r1, #9
 8017144:	9301      	str	r3, [sp, #4]
 8017146:	0015      	movs	r5, r2
 8017148:	f7e9 f88c 	bl	8000264 <__divsi3>
 801714c:	2301      	movs	r3, #1
 801714e:	2100      	movs	r1, #0
 8017150:	4283      	cmp	r3, r0
 8017152:	db1f      	blt.n	8017194 <__s2b+0x5c>
 8017154:	0030      	movs	r0, r6
 8017156:	f7ff ff7f 	bl	8017058 <_Balloc>
 801715a:	9b08      	ldr	r3, [sp, #32]
 801715c:	6143      	str	r3, [r0, #20]
 801715e:	2301      	movs	r3, #1
 8017160:	6103      	str	r3, [r0, #16]
 8017162:	2d09      	cmp	r5, #9
 8017164:	dd19      	ble.n	801719a <__s2b+0x62>
 8017166:	0023      	movs	r3, r4
 8017168:	3309      	adds	r3, #9
 801716a:	001f      	movs	r7, r3
 801716c:	9300      	str	r3, [sp, #0]
 801716e:	1964      	adds	r4, r4, r5
 8017170:	783b      	ldrb	r3, [r7, #0]
 8017172:	0001      	movs	r1, r0
 8017174:	3b30      	subs	r3, #48	; 0x30
 8017176:	220a      	movs	r2, #10
 8017178:	0030      	movs	r0, r6
 801717a:	3701      	adds	r7, #1
 801717c:	f7ff ff9e 	bl	80170bc <__multadd>
 8017180:	42a7      	cmp	r7, r4
 8017182:	d1f5      	bne.n	8017170 <__s2b+0x38>
 8017184:	9b00      	ldr	r3, [sp, #0]
 8017186:	195c      	adds	r4, r3, r5
 8017188:	3c08      	subs	r4, #8
 801718a:	002f      	movs	r7, r5
 801718c:	9b01      	ldr	r3, [sp, #4]
 801718e:	429f      	cmp	r7, r3
 8017190:	db06      	blt.n	80171a0 <__s2b+0x68>
 8017192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	3101      	adds	r1, #1
 8017198:	e7da      	b.n	8017150 <__s2b+0x18>
 801719a:	340a      	adds	r4, #10
 801719c:	2509      	movs	r5, #9
 801719e:	e7f4      	b.n	801718a <__s2b+0x52>
 80171a0:	1b63      	subs	r3, r4, r5
 80171a2:	5ddb      	ldrb	r3, [r3, r7]
 80171a4:	0001      	movs	r1, r0
 80171a6:	3b30      	subs	r3, #48	; 0x30
 80171a8:	220a      	movs	r2, #10
 80171aa:	0030      	movs	r0, r6
 80171ac:	f7ff ff86 	bl	80170bc <__multadd>
 80171b0:	3701      	adds	r7, #1
 80171b2:	e7eb      	b.n	801718c <__s2b+0x54>

080171b4 <__hi0bits>:
 80171b4:	0003      	movs	r3, r0
 80171b6:	0c02      	lsrs	r2, r0, #16
 80171b8:	2000      	movs	r0, #0
 80171ba:	4282      	cmp	r2, r0
 80171bc:	d101      	bne.n	80171c2 <__hi0bits+0xe>
 80171be:	041b      	lsls	r3, r3, #16
 80171c0:	3010      	adds	r0, #16
 80171c2:	0e1a      	lsrs	r2, r3, #24
 80171c4:	d101      	bne.n	80171ca <__hi0bits+0x16>
 80171c6:	3008      	adds	r0, #8
 80171c8:	021b      	lsls	r3, r3, #8
 80171ca:	0f1a      	lsrs	r2, r3, #28
 80171cc:	d101      	bne.n	80171d2 <__hi0bits+0x1e>
 80171ce:	3004      	adds	r0, #4
 80171d0:	011b      	lsls	r3, r3, #4
 80171d2:	0f9a      	lsrs	r2, r3, #30
 80171d4:	d101      	bne.n	80171da <__hi0bits+0x26>
 80171d6:	3002      	adds	r0, #2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	2b00      	cmp	r3, #0
 80171dc:	db03      	blt.n	80171e6 <__hi0bits+0x32>
 80171de:	3001      	adds	r0, #1
 80171e0:	005b      	lsls	r3, r3, #1
 80171e2:	d400      	bmi.n	80171e6 <__hi0bits+0x32>
 80171e4:	2020      	movs	r0, #32
 80171e6:	4770      	bx	lr

080171e8 <__lo0bits>:
 80171e8:	2207      	movs	r2, #7
 80171ea:	6803      	ldr	r3, [r0, #0]
 80171ec:	b510      	push	{r4, lr}
 80171ee:	0001      	movs	r1, r0
 80171f0:	401a      	ands	r2, r3
 80171f2:	d00d      	beq.n	8017210 <__lo0bits+0x28>
 80171f4:	2401      	movs	r4, #1
 80171f6:	2000      	movs	r0, #0
 80171f8:	4223      	tst	r3, r4
 80171fa:	d105      	bne.n	8017208 <__lo0bits+0x20>
 80171fc:	3002      	adds	r0, #2
 80171fe:	4203      	tst	r3, r0
 8017200:	d003      	beq.n	801720a <__lo0bits+0x22>
 8017202:	40e3      	lsrs	r3, r4
 8017204:	0020      	movs	r0, r4
 8017206:	600b      	str	r3, [r1, #0]
 8017208:	bd10      	pop	{r4, pc}
 801720a:	089b      	lsrs	r3, r3, #2
 801720c:	600b      	str	r3, [r1, #0]
 801720e:	e7fb      	b.n	8017208 <__lo0bits+0x20>
 8017210:	b29c      	uxth	r4, r3
 8017212:	0010      	movs	r0, r2
 8017214:	2c00      	cmp	r4, #0
 8017216:	d101      	bne.n	801721c <__lo0bits+0x34>
 8017218:	2010      	movs	r0, #16
 801721a:	0c1b      	lsrs	r3, r3, #16
 801721c:	b2da      	uxtb	r2, r3
 801721e:	2a00      	cmp	r2, #0
 8017220:	d101      	bne.n	8017226 <__lo0bits+0x3e>
 8017222:	3008      	adds	r0, #8
 8017224:	0a1b      	lsrs	r3, r3, #8
 8017226:	071a      	lsls	r2, r3, #28
 8017228:	d101      	bne.n	801722e <__lo0bits+0x46>
 801722a:	3004      	adds	r0, #4
 801722c:	091b      	lsrs	r3, r3, #4
 801722e:	079a      	lsls	r2, r3, #30
 8017230:	d101      	bne.n	8017236 <__lo0bits+0x4e>
 8017232:	3002      	adds	r0, #2
 8017234:	089b      	lsrs	r3, r3, #2
 8017236:	07da      	lsls	r2, r3, #31
 8017238:	d4e8      	bmi.n	801720c <__lo0bits+0x24>
 801723a:	085b      	lsrs	r3, r3, #1
 801723c:	d001      	beq.n	8017242 <__lo0bits+0x5a>
 801723e:	3001      	adds	r0, #1
 8017240:	e7e4      	b.n	801720c <__lo0bits+0x24>
 8017242:	2020      	movs	r0, #32
 8017244:	e7e0      	b.n	8017208 <__lo0bits+0x20>

08017246 <__i2b>:
 8017246:	b510      	push	{r4, lr}
 8017248:	000c      	movs	r4, r1
 801724a:	2101      	movs	r1, #1
 801724c:	f7ff ff04 	bl	8017058 <_Balloc>
 8017250:	2301      	movs	r3, #1
 8017252:	6144      	str	r4, [r0, #20]
 8017254:	6103      	str	r3, [r0, #16]
 8017256:	bd10      	pop	{r4, pc}

08017258 <__multiply>:
 8017258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801725a:	690b      	ldr	r3, [r1, #16]
 801725c:	0014      	movs	r4, r2
 801725e:	6912      	ldr	r2, [r2, #16]
 8017260:	b089      	sub	sp, #36	; 0x24
 8017262:	000d      	movs	r5, r1
 8017264:	4293      	cmp	r3, r2
 8017266:	da01      	bge.n	801726c <__multiply+0x14>
 8017268:	0025      	movs	r5, r4
 801726a:	000c      	movs	r4, r1
 801726c:	692f      	ldr	r7, [r5, #16]
 801726e:	6926      	ldr	r6, [r4, #16]
 8017270:	6869      	ldr	r1, [r5, #4]
 8017272:	19bb      	adds	r3, r7, r6
 8017274:	9302      	str	r3, [sp, #8]
 8017276:	68ab      	ldr	r3, [r5, #8]
 8017278:	19ba      	adds	r2, r7, r6
 801727a:	4293      	cmp	r3, r2
 801727c:	da00      	bge.n	8017280 <__multiply+0x28>
 801727e:	3101      	adds	r1, #1
 8017280:	f7ff feea 	bl	8017058 <_Balloc>
 8017284:	0002      	movs	r2, r0
 8017286:	19bb      	adds	r3, r7, r6
 8017288:	3214      	adds	r2, #20
 801728a:	009b      	lsls	r3, r3, #2
 801728c:	18d3      	adds	r3, r2, r3
 801728e:	469c      	mov	ip, r3
 8017290:	2100      	movs	r1, #0
 8017292:	0013      	movs	r3, r2
 8017294:	9004      	str	r0, [sp, #16]
 8017296:	4563      	cmp	r3, ip
 8017298:	d31d      	bcc.n	80172d6 <__multiply+0x7e>
 801729a:	3514      	adds	r5, #20
 801729c:	00bf      	lsls	r7, r7, #2
 801729e:	19eb      	adds	r3, r5, r7
 80172a0:	3414      	adds	r4, #20
 80172a2:	00b6      	lsls	r6, r6, #2
 80172a4:	9305      	str	r3, [sp, #20]
 80172a6:	19a3      	adds	r3, r4, r6
 80172a8:	9503      	str	r5, [sp, #12]
 80172aa:	9401      	str	r4, [sp, #4]
 80172ac:	9307      	str	r3, [sp, #28]
 80172ae:	9b07      	ldr	r3, [sp, #28]
 80172b0:	9901      	ldr	r1, [sp, #4]
 80172b2:	4299      	cmp	r1, r3
 80172b4:	d311      	bcc.n	80172da <__multiply+0x82>
 80172b6:	9b02      	ldr	r3, [sp, #8]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dd06      	ble.n	80172ca <__multiply+0x72>
 80172bc:	2304      	movs	r3, #4
 80172be:	425b      	negs	r3, r3
 80172c0:	449c      	add	ip, r3
 80172c2:	4663      	mov	r3, ip
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d051      	beq.n	801736e <__multiply+0x116>
 80172ca:	9b04      	ldr	r3, [sp, #16]
 80172cc:	9a02      	ldr	r2, [sp, #8]
 80172ce:	0018      	movs	r0, r3
 80172d0:	611a      	str	r2, [r3, #16]
 80172d2:	b009      	add	sp, #36	; 0x24
 80172d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172d6:	c302      	stmia	r3!, {r1}
 80172d8:	e7dd      	b.n	8017296 <__multiply+0x3e>
 80172da:	9b01      	ldr	r3, [sp, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	b298      	uxth	r0, r3
 80172e0:	2800      	cmp	r0, #0
 80172e2:	d01c      	beq.n	801731e <__multiply+0xc6>
 80172e4:	0015      	movs	r5, r2
 80172e6:	2600      	movs	r6, #0
 80172e8:	9f03      	ldr	r7, [sp, #12]
 80172ea:	cf02      	ldmia	r7!, {r1}
 80172ec:	682c      	ldr	r4, [r5, #0]
 80172ee:	b28b      	uxth	r3, r1
 80172f0:	4343      	muls	r3, r0
 80172f2:	0c09      	lsrs	r1, r1, #16
 80172f4:	4341      	muls	r1, r0
 80172f6:	b2a4      	uxth	r4, r4
 80172f8:	191b      	adds	r3, r3, r4
 80172fa:	199b      	adds	r3, r3, r6
 80172fc:	000e      	movs	r6, r1
 80172fe:	6829      	ldr	r1, [r5, #0]
 8017300:	9506      	str	r5, [sp, #24]
 8017302:	0c09      	lsrs	r1, r1, #16
 8017304:	1871      	adds	r1, r6, r1
 8017306:	0c1e      	lsrs	r6, r3, #16
 8017308:	1989      	adds	r1, r1, r6
 801730a:	0c0e      	lsrs	r6, r1, #16
 801730c:	b29b      	uxth	r3, r3
 801730e:	0409      	lsls	r1, r1, #16
 8017310:	430b      	orrs	r3, r1
 8017312:	c508      	stmia	r5!, {r3}
 8017314:	9b05      	ldr	r3, [sp, #20]
 8017316:	42bb      	cmp	r3, r7
 8017318:	d8e7      	bhi.n	80172ea <__multiply+0x92>
 801731a:	9b06      	ldr	r3, [sp, #24]
 801731c:	605e      	str	r6, [r3, #4]
 801731e:	9b01      	ldr	r3, [sp, #4]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	0c1d      	lsrs	r5, r3, #16
 8017324:	d01e      	beq.n	8017364 <__multiply+0x10c>
 8017326:	0010      	movs	r0, r2
 8017328:	2700      	movs	r7, #0
 801732a:	6813      	ldr	r3, [r2, #0]
 801732c:	9e03      	ldr	r6, [sp, #12]
 801732e:	6831      	ldr	r1, [r6, #0]
 8017330:	6804      	ldr	r4, [r0, #0]
 8017332:	b289      	uxth	r1, r1
 8017334:	4369      	muls	r1, r5
 8017336:	0c24      	lsrs	r4, r4, #16
 8017338:	1909      	adds	r1, r1, r4
 801733a:	19c9      	adds	r1, r1, r7
 801733c:	040f      	lsls	r7, r1, #16
 801733e:	b29b      	uxth	r3, r3
 8017340:	433b      	orrs	r3, r7
 8017342:	6003      	str	r3, [r0, #0]
 8017344:	ce80      	ldmia	r6!, {r7}
 8017346:	6843      	ldr	r3, [r0, #4]
 8017348:	0c3f      	lsrs	r7, r7, #16
 801734a:	436f      	muls	r7, r5
 801734c:	b29b      	uxth	r3, r3
 801734e:	18fb      	adds	r3, r7, r3
 8017350:	0c09      	lsrs	r1, r1, #16
 8017352:	185b      	adds	r3, r3, r1
 8017354:	9905      	ldr	r1, [sp, #20]
 8017356:	9006      	str	r0, [sp, #24]
 8017358:	0c1f      	lsrs	r7, r3, #16
 801735a:	3004      	adds	r0, #4
 801735c:	42b1      	cmp	r1, r6
 801735e:	d8e6      	bhi.n	801732e <__multiply+0xd6>
 8017360:	9906      	ldr	r1, [sp, #24]
 8017362:	604b      	str	r3, [r1, #4]
 8017364:	9b01      	ldr	r3, [sp, #4]
 8017366:	3204      	adds	r2, #4
 8017368:	3304      	adds	r3, #4
 801736a:	9301      	str	r3, [sp, #4]
 801736c:	e79f      	b.n	80172ae <__multiply+0x56>
 801736e:	9b02      	ldr	r3, [sp, #8]
 8017370:	3b01      	subs	r3, #1
 8017372:	9302      	str	r3, [sp, #8]
 8017374:	e79f      	b.n	80172b6 <__multiply+0x5e>
	...

08017378 <__pow5mult>:
 8017378:	2303      	movs	r3, #3
 801737a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801737c:	4013      	ands	r3, r2
 801737e:	0006      	movs	r6, r0
 8017380:	000f      	movs	r7, r1
 8017382:	0015      	movs	r5, r2
 8017384:	2b00      	cmp	r3, #0
 8017386:	d008      	beq.n	801739a <__pow5mult+0x22>
 8017388:	491a      	ldr	r1, [pc, #104]	; (80173f4 <__pow5mult+0x7c>)
 801738a:	3b01      	subs	r3, #1
 801738c:	009a      	lsls	r2, r3, #2
 801738e:	5852      	ldr	r2, [r2, r1]
 8017390:	2300      	movs	r3, #0
 8017392:	0039      	movs	r1, r7
 8017394:	f7ff fe92 	bl	80170bc <__multadd>
 8017398:	0007      	movs	r7, r0
 801739a:	10ad      	asrs	r5, r5, #2
 801739c:	d027      	beq.n	80173ee <__pow5mult+0x76>
 801739e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80173a0:	2c00      	cmp	r4, #0
 80173a2:	d107      	bne.n	80173b4 <__pow5mult+0x3c>
 80173a4:	4914      	ldr	r1, [pc, #80]	; (80173f8 <__pow5mult+0x80>)
 80173a6:	0030      	movs	r0, r6
 80173a8:	f7ff ff4d 	bl	8017246 <__i2b>
 80173ac:	2300      	movs	r3, #0
 80173ae:	0004      	movs	r4, r0
 80173b0:	64b0      	str	r0, [r6, #72]	; 0x48
 80173b2:	6003      	str	r3, [r0, #0]
 80173b4:	2301      	movs	r3, #1
 80173b6:	421d      	tst	r5, r3
 80173b8:	d00a      	beq.n	80173d0 <__pow5mult+0x58>
 80173ba:	0039      	movs	r1, r7
 80173bc:	0022      	movs	r2, r4
 80173be:	0030      	movs	r0, r6
 80173c0:	f7ff ff4a 	bl	8017258 <__multiply>
 80173c4:	0039      	movs	r1, r7
 80173c6:	9001      	str	r0, [sp, #4]
 80173c8:	0030      	movs	r0, r6
 80173ca:	f7ff fe6d 	bl	80170a8 <_Bfree>
 80173ce:	9f01      	ldr	r7, [sp, #4]
 80173d0:	106d      	asrs	r5, r5, #1
 80173d2:	d00c      	beq.n	80173ee <__pow5mult+0x76>
 80173d4:	6820      	ldr	r0, [r4, #0]
 80173d6:	2800      	cmp	r0, #0
 80173d8:	d107      	bne.n	80173ea <__pow5mult+0x72>
 80173da:	0022      	movs	r2, r4
 80173dc:	0021      	movs	r1, r4
 80173de:	0030      	movs	r0, r6
 80173e0:	f7ff ff3a 	bl	8017258 <__multiply>
 80173e4:	2300      	movs	r3, #0
 80173e6:	6020      	str	r0, [r4, #0]
 80173e8:	6003      	str	r3, [r0, #0]
 80173ea:	0004      	movs	r4, r0
 80173ec:	e7e2      	b.n	80173b4 <__pow5mult+0x3c>
 80173ee:	0038      	movs	r0, r7
 80173f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80173f2:	46c0      	nop			; (mov r8, r8)
 80173f4:	0801abe8 	.word	0x0801abe8
 80173f8:	00000271 	.word	0x00000271

080173fc <__lshift>:
 80173fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173fe:	000d      	movs	r5, r1
 8017400:	0017      	movs	r7, r2
 8017402:	692b      	ldr	r3, [r5, #16]
 8017404:	1154      	asrs	r4, r2, #5
 8017406:	b085      	sub	sp, #20
 8017408:	18e3      	adds	r3, r4, r3
 801740a:	9301      	str	r3, [sp, #4]
 801740c:	3301      	adds	r3, #1
 801740e:	9300      	str	r3, [sp, #0]
 8017410:	6849      	ldr	r1, [r1, #4]
 8017412:	68ab      	ldr	r3, [r5, #8]
 8017414:	9002      	str	r0, [sp, #8]
 8017416:	9a00      	ldr	r2, [sp, #0]
 8017418:	4293      	cmp	r3, r2
 801741a:	db35      	blt.n	8017488 <__lshift+0x8c>
 801741c:	9802      	ldr	r0, [sp, #8]
 801741e:	f7ff fe1b 	bl	8017058 <_Balloc>
 8017422:	2300      	movs	r3, #0
 8017424:	0002      	movs	r2, r0
 8017426:	0006      	movs	r6, r0
 8017428:	0019      	movs	r1, r3
 801742a:	3214      	adds	r2, #20
 801742c:	42a3      	cmp	r3, r4
 801742e:	db2e      	blt.n	801748e <__lshift+0x92>
 8017430:	43e3      	mvns	r3, r4
 8017432:	17db      	asrs	r3, r3, #31
 8017434:	401c      	ands	r4, r3
 8017436:	002b      	movs	r3, r5
 8017438:	00a4      	lsls	r4, r4, #2
 801743a:	1914      	adds	r4, r2, r4
 801743c:	692a      	ldr	r2, [r5, #16]
 801743e:	3314      	adds	r3, #20
 8017440:	0092      	lsls	r2, r2, #2
 8017442:	189a      	adds	r2, r3, r2
 8017444:	4694      	mov	ip, r2
 8017446:	221f      	movs	r2, #31
 8017448:	4017      	ands	r7, r2
 801744a:	d024      	beq.n	8017496 <__lshift+0x9a>
 801744c:	3201      	adds	r2, #1
 801744e:	1bd2      	subs	r2, r2, r7
 8017450:	9203      	str	r2, [sp, #12]
 8017452:	2200      	movs	r2, #0
 8017454:	6819      	ldr	r1, [r3, #0]
 8017456:	0020      	movs	r0, r4
 8017458:	40b9      	lsls	r1, r7
 801745a:	430a      	orrs	r2, r1
 801745c:	c404      	stmia	r4!, {r2}
 801745e:	cb04      	ldmia	r3!, {r2}
 8017460:	9903      	ldr	r1, [sp, #12]
 8017462:	40ca      	lsrs	r2, r1
 8017464:	459c      	cmp	ip, r3
 8017466:	d8f5      	bhi.n	8017454 <__lshift+0x58>
 8017468:	6042      	str	r2, [r0, #4]
 801746a:	2a00      	cmp	r2, #0
 801746c:	d002      	beq.n	8017474 <__lshift+0x78>
 801746e:	9b01      	ldr	r3, [sp, #4]
 8017470:	3302      	adds	r3, #2
 8017472:	9300      	str	r3, [sp, #0]
 8017474:	9b00      	ldr	r3, [sp, #0]
 8017476:	9802      	ldr	r0, [sp, #8]
 8017478:	3b01      	subs	r3, #1
 801747a:	6133      	str	r3, [r6, #16]
 801747c:	0029      	movs	r1, r5
 801747e:	f7ff fe13 	bl	80170a8 <_Bfree>
 8017482:	0030      	movs	r0, r6
 8017484:	b005      	add	sp, #20
 8017486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017488:	3101      	adds	r1, #1
 801748a:	005b      	lsls	r3, r3, #1
 801748c:	e7c3      	b.n	8017416 <__lshift+0x1a>
 801748e:	0098      	lsls	r0, r3, #2
 8017490:	5011      	str	r1, [r2, r0]
 8017492:	3301      	adds	r3, #1
 8017494:	e7ca      	b.n	801742c <__lshift+0x30>
 8017496:	cb04      	ldmia	r3!, {r2}
 8017498:	c404      	stmia	r4!, {r2}
 801749a:	459c      	cmp	ip, r3
 801749c:	d8fb      	bhi.n	8017496 <__lshift+0x9a>
 801749e:	e7e9      	b.n	8017474 <__lshift+0x78>

080174a0 <__mcmp>:
 80174a0:	690a      	ldr	r2, [r1, #16]
 80174a2:	6903      	ldr	r3, [r0, #16]
 80174a4:	b530      	push	{r4, r5, lr}
 80174a6:	1a9b      	subs	r3, r3, r2
 80174a8:	d10d      	bne.n	80174c6 <__mcmp+0x26>
 80174aa:	0092      	lsls	r2, r2, #2
 80174ac:	3014      	adds	r0, #20
 80174ae:	3114      	adds	r1, #20
 80174b0:	1884      	adds	r4, r0, r2
 80174b2:	1889      	adds	r1, r1, r2
 80174b4:	3c04      	subs	r4, #4
 80174b6:	3904      	subs	r1, #4
 80174b8:	6825      	ldr	r5, [r4, #0]
 80174ba:	680a      	ldr	r2, [r1, #0]
 80174bc:	4295      	cmp	r5, r2
 80174be:	d004      	beq.n	80174ca <__mcmp+0x2a>
 80174c0:	2301      	movs	r3, #1
 80174c2:	4295      	cmp	r5, r2
 80174c4:	d304      	bcc.n	80174d0 <__mcmp+0x30>
 80174c6:	0018      	movs	r0, r3
 80174c8:	bd30      	pop	{r4, r5, pc}
 80174ca:	42a0      	cmp	r0, r4
 80174cc:	d3f2      	bcc.n	80174b4 <__mcmp+0x14>
 80174ce:	e7fa      	b.n	80174c6 <__mcmp+0x26>
 80174d0:	425b      	negs	r3, r3
 80174d2:	e7f8      	b.n	80174c6 <__mcmp+0x26>

080174d4 <__mdiff>:
 80174d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174d6:	000d      	movs	r5, r1
 80174d8:	b085      	sub	sp, #20
 80174da:	0007      	movs	r7, r0
 80174dc:	0011      	movs	r1, r2
 80174de:	0028      	movs	r0, r5
 80174e0:	0014      	movs	r4, r2
 80174e2:	f7ff ffdd 	bl	80174a0 <__mcmp>
 80174e6:	1e06      	subs	r6, r0, #0
 80174e8:	d108      	bne.n	80174fc <__mdiff+0x28>
 80174ea:	0001      	movs	r1, r0
 80174ec:	0038      	movs	r0, r7
 80174ee:	f7ff fdb3 	bl	8017058 <_Balloc>
 80174f2:	2301      	movs	r3, #1
 80174f4:	6146      	str	r6, [r0, #20]
 80174f6:	6103      	str	r3, [r0, #16]
 80174f8:	b005      	add	sp, #20
 80174fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174fc:	2301      	movs	r3, #1
 80174fe:	9301      	str	r3, [sp, #4]
 8017500:	2800      	cmp	r0, #0
 8017502:	db04      	blt.n	801750e <__mdiff+0x3a>
 8017504:	0023      	movs	r3, r4
 8017506:	002c      	movs	r4, r5
 8017508:	001d      	movs	r5, r3
 801750a:	2300      	movs	r3, #0
 801750c:	9301      	str	r3, [sp, #4]
 801750e:	6861      	ldr	r1, [r4, #4]
 8017510:	0038      	movs	r0, r7
 8017512:	f7ff fda1 	bl	8017058 <_Balloc>
 8017516:	002f      	movs	r7, r5
 8017518:	2200      	movs	r2, #0
 801751a:	9b01      	ldr	r3, [sp, #4]
 801751c:	6926      	ldr	r6, [r4, #16]
 801751e:	60c3      	str	r3, [r0, #12]
 8017520:	3414      	adds	r4, #20
 8017522:	00b3      	lsls	r3, r6, #2
 8017524:	18e3      	adds	r3, r4, r3
 8017526:	9302      	str	r3, [sp, #8]
 8017528:	692b      	ldr	r3, [r5, #16]
 801752a:	3714      	adds	r7, #20
 801752c:	009b      	lsls	r3, r3, #2
 801752e:	18fb      	adds	r3, r7, r3
 8017530:	9303      	str	r3, [sp, #12]
 8017532:	0003      	movs	r3, r0
 8017534:	4694      	mov	ip, r2
 8017536:	3314      	adds	r3, #20
 8017538:	cc20      	ldmia	r4!, {r5}
 801753a:	cf04      	ldmia	r7!, {r2}
 801753c:	9201      	str	r2, [sp, #4]
 801753e:	b2aa      	uxth	r2, r5
 8017540:	4494      	add	ip, r2
 8017542:	466a      	mov	r2, sp
 8017544:	4661      	mov	r1, ip
 8017546:	8892      	ldrh	r2, [r2, #4]
 8017548:	0c2d      	lsrs	r5, r5, #16
 801754a:	1a8a      	subs	r2, r1, r2
 801754c:	9901      	ldr	r1, [sp, #4]
 801754e:	0c09      	lsrs	r1, r1, #16
 8017550:	1a69      	subs	r1, r5, r1
 8017552:	1415      	asrs	r5, r2, #16
 8017554:	1949      	adds	r1, r1, r5
 8017556:	140d      	asrs	r5, r1, #16
 8017558:	b292      	uxth	r2, r2
 801755a:	0409      	lsls	r1, r1, #16
 801755c:	430a      	orrs	r2, r1
 801755e:	601a      	str	r2, [r3, #0]
 8017560:	9a03      	ldr	r2, [sp, #12]
 8017562:	46ac      	mov	ip, r5
 8017564:	3304      	adds	r3, #4
 8017566:	42ba      	cmp	r2, r7
 8017568:	d8e6      	bhi.n	8017538 <__mdiff+0x64>
 801756a:	9902      	ldr	r1, [sp, #8]
 801756c:	001a      	movs	r2, r3
 801756e:	428c      	cmp	r4, r1
 8017570:	d305      	bcc.n	801757e <__mdiff+0xaa>
 8017572:	3a04      	subs	r2, #4
 8017574:	6813      	ldr	r3, [r2, #0]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d00e      	beq.n	8017598 <__mdiff+0xc4>
 801757a:	6106      	str	r6, [r0, #16]
 801757c:	e7bc      	b.n	80174f8 <__mdiff+0x24>
 801757e:	cc04      	ldmia	r4!, {r2}
 8017580:	b291      	uxth	r1, r2
 8017582:	4461      	add	r1, ip
 8017584:	140d      	asrs	r5, r1, #16
 8017586:	0c12      	lsrs	r2, r2, #16
 8017588:	1952      	adds	r2, r2, r5
 801758a:	1415      	asrs	r5, r2, #16
 801758c:	b289      	uxth	r1, r1
 801758e:	0412      	lsls	r2, r2, #16
 8017590:	430a      	orrs	r2, r1
 8017592:	46ac      	mov	ip, r5
 8017594:	c304      	stmia	r3!, {r2}
 8017596:	e7e8      	b.n	801756a <__mdiff+0x96>
 8017598:	3e01      	subs	r6, #1
 801759a:	e7ea      	b.n	8017572 <__mdiff+0x9e>

0801759c <__ulp>:
 801759c:	000b      	movs	r3, r1
 801759e:	4910      	ldr	r1, [pc, #64]	; (80175e0 <__ulp+0x44>)
 80175a0:	b510      	push	{r4, lr}
 80175a2:	4019      	ands	r1, r3
 80175a4:	4b0f      	ldr	r3, [pc, #60]	; (80175e4 <__ulp+0x48>)
 80175a6:	18c9      	adds	r1, r1, r3
 80175a8:	2900      	cmp	r1, #0
 80175aa:	dd04      	ble.n	80175b6 <__ulp+0x1a>
 80175ac:	2200      	movs	r2, #0
 80175ae:	000b      	movs	r3, r1
 80175b0:	0010      	movs	r0, r2
 80175b2:	0019      	movs	r1, r3
 80175b4:	bd10      	pop	{r4, pc}
 80175b6:	4249      	negs	r1, r1
 80175b8:	1509      	asrs	r1, r1, #20
 80175ba:	2200      	movs	r2, #0
 80175bc:	2300      	movs	r3, #0
 80175be:	2913      	cmp	r1, #19
 80175c0:	dc04      	bgt.n	80175cc <__ulp+0x30>
 80175c2:	2080      	movs	r0, #128	; 0x80
 80175c4:	0300      	lsls	r0, r0, #12
 80175c6:	4108      	asrs	r0, r1
 80175c8:	0003      	movs	r3, r0
 80175ca:	e7f1      	b.n	80175b0 <__ulp+0x14>
 80175cc:	3914      	subs	r1, #20
 80175ce:	2001      	movs	r0, #1
 80175d0:	291e      	cmp	r1, #30
 80175d2:	dc02      	bgt.n	80175da <__ulp+0x3e>
 80175d4:	241f      	movs	r4, #31
 80175d6:	1a61      	subs	r1, r4, r1
 80175d8:	4088      	lsls	r0, r1
 80175da:	0002      	movs	r2, r0
 80175dc:	e7e8      	b.n	80175b0 <__ulp+0x14>
 80175de:	46c0      	nop			; (mov r8, r8)
 80175e0:	7ff00000 	.word	0x7ff00000
 80175e4:	fcc00000 	.word	0xfcc00000

080175e8 <__b2d>:
 80175e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175ea:	0006      	movs	r6, r0
 80175ec:	6903      	ldr	r3, [r0, #16]
 80175ee:	3614      	adds	r6, #20
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	18f3      	adds	r3, r6, r3
 80175f4:	1f1d      	subs	r5, r3, #4
 80175f6:	682c      	ldr	r4, [r5, #0]
 80175f8:	000f      	movs	r7, r1
 80175fa:	0020      	movs	r0, r4
 80175fc:	9301      	str	r3, [sp, #4]
 80175fe:	f7ff fdd9 	bl	80171b4 <__hi0bits>
 8017602:	2320      	movs	r3, #32
 8017604:	1a1b      	subs	r3, r3, r0
 8017606:	603b      	str	r3, [r7, #0]
 8017608:	491c      	ldr	r1, [pc, #112]	; (801767c <__b2d+0x94>)
 801760a:	280a      	cmp	r0, #10
 801760c:	dc16      	bgt.n	801763c <__b2d+0x54>
 801760e:	230b      	movs	r3, #11
 8017610:	0027      	movs	r7, r4
 8017612:	1a1b      	subs	r3, r3, r0
 8017614:	40df      	lsrs	r7, r3
 8017616:	4339      	orrs	r1, r7
 8017618:	469c      	mov	ip, r3
 801761a:	000b      	movs	r3, r1
 801761c:	2100      	movs	r1, #0
 801761e:	42ae      	cmp	r6, r5
 8017620:	d202      	bcs.n	8017628 <__b2d+0x40>
 8017622:	9901      	ldr	r1, [sp, #4]
 8017624:	3908      	subs	r1, #8
 8017626:	6809      	ldr	r1, [r1, #0]
 8017628:	3015      	adds	r0, #21
 801762a:	4084      	lsls	r4, r0
 801762c:	4660      	mov	r0, ip
 801762e:	40c1      	lsrs	r1, r0
 8017630:	430c      	orrs	r4, r1
 8017632:	0022      	movs	r2, r4
 8017634:	0010      	movs	r0, r2
 8017636:	0019      	movs	r1, r3
 8017638:	b003      	add	sp, #12
 801763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801763c:	2700      	movs	r7, #0
 801763e:	42ae      	cmp	r6, r5
 8017640:	d202      	bcs.n	8017648 <__b2d+0x60>
 8017642:	9d01      	ldr	r5, [sp, #4]
 8017644:	3d08      	subs	r5, #8
 8017646:	682f      	ldr	r7, [r5, #0]
 8017648:	380b      	subs	r0, #11
 801764a:	4684      	mov	ip, r0
 801764c:	1e03      	subs	r3, r0, #0
 801764e:	d012      	beq.n	8017676 <__b2d+0x8e>
 8017650:	409c      	lsls	r4, r3
 8017652:	2020      	movs	r0, #32
 8017654:	4321      	orrs	r1, r4
 8017656:	003c      	movs	r4, r7
 8017658:	1ac0      	subs	r0, r0, r3
 801765a:	40c4      	lsrs	r4, r0
 801765c:	4321      	orrs	r1, r4
 801765e:	000b      	movs	r3, r1
 8017660:	2100      	movs	r1, #0
 8017662:	42b5      	cmp	r5, r6
 8017664:	d901      	bls.n	801766a <__b2d+0x82>
 8017666:	3d04      	subs	r5, #4
 8017668:	6829      	ldr	r1, [r5, #0]
 801766a:	4664      	mov	r4, ip
 801766c:	40c1      	lsrs	r1, r0
 801766e:	40a7      	lsls	r7, r4
 8017670:	430f      	orrs	r7, r1
 8017672:	003a      	movs	r2, r7
 8017674:	e7de      	b.n	8017634 <__b2d+0x4c>
 8017676:	4321      	orrs	r1, r4
 8017678:	000b      	movs	r3, r1
 801767a:	e7fa      	b.n	8017672 <__b2d+0x8a>
 801767c:	3ff00000 	.word	0x3ff00000

08017680 <__d2b>:
 8017680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017682:	001d      	movs	r5, r3
 8017684:	2101      	movs	r1, #1
 8017686:	0014      	movs	r4, r2
 8017688:	9f08      	ldr	r7, [sp, #32]
 801768a:	f7ff fce5 	bl	8017058 <_Balloc>
 801768e:	032b      	lsls	r3, r5, #12
 8017690:	006d      	lsls	r5, r5, #1
 8017692:	0006      	movs	r6, r0
 8017694:	0b1b      	lsrs	r3, r3, #12
 8017696:	0d6d      	lsrs	r5, r5, #21
 8017698:	d124      	bne.n	80176e4 <__d2b+0x64>
 801769a:	9301      	str	r3, [sp, #4]
 801769c:	2c00      	cmp	r4, #0
 801769e:	d027      	beq.n	80176f0 <__d2b+0x70>
 80176a0:	4668      	mov	r0, sp
 80176a2:	9400      	str	r4, [sp, #0]
 80176a4:	f7ff fda0 	bl	80171e8 <__lo0bits>
 80176a8:	9c00      	ldr	r4, [sp, #0]
 80176aa:	2800      	cmp	r0, #0
 80176ac:	d01e      	beq.n	80176ec <__d2b+0x6c>
 80176ae:	9b01      	ldr	r3, [sp, #4]
 80176b0:	2120      	movs	r1, #32
 80176b2:	001a      	movs	r2, r3
 80176b4:	1a09      	subs	r1, r1, r0
 80176b6:	408a      	lsls	r2, r1
 80176b8:	40c3      	lsrs	r3, r0
 80176ba:	4322      	orrs	r2, r4
 80176bc:	6172      	str	r2, [r6, #20]
 80176be:	9301      	str	r3, [sp, #4]
 80176c0:	9c01      	ldr	r4, [sp, #4]
 80176c2:	61b4      	str	r4, [r6, #24]
 80176c4:	1e63      	subs	r3, r4, #1
 80176c6:	419c      	sbcs	r4, r3
 80176c8:	3401      	adds	r4, #1
 80176ca:	6134      	str	r4, [r6, #16]
 80176cc:	2d00      	cmp	r5, #0
 80176ce:	d018      	beq.n	8017702 <__d2b+0x82>
 80176d0:	4b12      	ldr	r3, [pc, #72]	; (801771c <__d2b+0x9c>)
 80176d2:	18ed      	adds	r5, r5, r3
 80176d4:	2335      	movs	r3, #53	; 0x35
 80176d6:	182d      	adds	r5, r5, r0
 80176d8:	603d      	str	r5, [r7, #0]
 80176da:	1a18      	subs	r0, r3, r0
 80176dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176de:	6018      	str	r0, [r3, #0]
 80176e0:	0030      	movs	r0, r6
 80176e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80176e4:	2280      	movs	r2, #128	; 0x80
 80176e6:	0352      	lsls	r2, r2, #13
 80176e8:	4313      	orrs	r3, r2
 80176ea:	e7d6      	b.n	801769a <__d2b+0x1a>
 80176ec:	6174      	str	r4, [r6, #20]
 80176ee:	e7e7      	b.n	80176c0 <__d2b+0x40>
 80176f0:	a801      	add	r0, sp, #4
 80176f2:	f7ff fd79 	bl	80171e8 <__lo0bits>
 80176f6:	2401      	movs	r4, #1
 80176f8:	9b01      	ldr	r3, [sp, #4]
 80176fa:	6134      	str	r4, [r6, #16]
 80176fc:	6173      	str	r3, [r6, #20]
 80176fe:	3020      	adds	r0, #32
 8017700:	e7e4      	b.n	80176cc <__d2b+0x4c>
 8017702:	4b07      	ldr	r3, [pc, #28]	; (8017720 <__d2b+0xa0>)
 8017704:	18c0      	adds	r0, r0, r3
 8017706:	4b07      	ldr	r3, [pc, #28]	; (8017724 <__d2b+0xa4>)
 8017708:	6038      	str	r0, [r7, #0]
 801770a:	18e3      	adds	r3, r4, r3
 801770c:	009b      	lsls	r3, r3, #2
 801770e:	18f3      	adds	r3, r6, r3
 8017710:	6958      	ldr	r0, [r3, #20]
 8017712:	f7ff fd4f 	bl	80171b4 <__hi0bits>
 8017716:	0164      	lsls	r4, r4, #5
 8017718:	1a20      	subs	r0, r4, r0
 801771a:	e7df      	b.n	80176dc <__d2b+0x5c>
 801771c:	fffffbcd 	.word	0xfffffbcd
 8017720:	fffffbce 	.word	0xfffffbce
 8017724:	3fffffff 	.word	0x3fffffff

08017728 <__ratio>:
 8017728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801772a:	b085      	sub	sp, #20
 801772c:	000f      	movs	r7, r1
 801772e:	a902      	add	r1, sp, #8
 8017730:	0006      	movs	r6, r0
 8017732:	f7ff ff59 	bl	80175e8 <__b2d>
 8017736:	0004      	movs	r4, r0
 8017738:	000d      	movs	r5, r1
 801773a:	0038      	movs	r0, r7
 801773c:	a903      	add	r1, sp, #12
 801773e:	9400      	str	r4, [sp, #0]
 8017740:	9501      	str	r5, [sp, #4]
 8017742:	f7ff ff51 	bl	80175e8 <__b2d>
 8017746:	6936      	ldr	r6, [r6, #16]
 8017748:	693f      	ldr	r7, [r7, #16]
 801774a:	0002      	movs	r2, r0
 801774c:	1bf7      	subs	r7, r6, r7
 801774e:	017e      	lsls	r6, r7, #5
 8017750:	46b4      	mov	ip, r6
 8017752:	9f03      	ldr	r7, [sp, #12]
 8017754:	9e02      	ldr	r6, [sp, #8]
 8017756:	000b      	movs	r3, r1
 8017758:	1bf6      	subs	r6, r6, r7
 801775a:	4466      	add	r6, ip
 801775c:	0537      	lsls	r7, r6, #20
 801775e:	2e00      	cmp	r6, #0
 8017760:	dd07      	ble.n	8017772 <__ratio+0x4a>
 8017762:	1979      	adds	r1, r7, r5
 8017764:	9101      	str	r1, [sp, #4]
 8017766:	9800      	ldr	r0, [sp, #0]
 8017768:	9901      	ldr	r1, [sp, #4]
 801776a:	f7e9 ff59 	bl	8001620 <__aeabi_ddiv>
 801776e:	b005      	add	sp, #20
 8017770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017772:	1bcb      	subs	r3, r1, r7
 8017774:	e7f7      	b.n	8017766 <__ratio+0x3e>

08017776 <__copybits>:
 8017776:	0013      	movs	r3, r2
 8017778:	3901      	subs	r1, #1
 801777a:	b510      	push	{r4, lr}
 801777c:	1149      	asrs	r1, r1, #5
 801777e:	6912      	ldr	r2, [r2, #16]
 8017780:	3101      	adds	r1, #1
 8017782:	0089      	lsls	r1, r1, #2
 8017784:	3314      	adds	r3, #20
 8017786:	0092      	lsls	r2, r2, #2
 8017788:	1841      	adds	r1, r0, r1
 801778a:	189a      	adds	r2, r3, r2
 801778c:	429a      	cmp	r2, r3
 801778e:	d803      	bhi.n	8017798 <__copybits+0x22>
 8017790:	2300      	movs	r3, #0
 8017792:	4281      	cmp	r1, r0
 8017794:	d803      	bhi.n	801779e <__copybits+0x28>
 8017796:	bd10      	pop	{r4, pc}
 8017798:	cb10      	ldmia	r3!, {r4}
 801779a:	c010      	stmia	r0!, {r4}
 801779c:	e7f6      	b.n	801778c <__copybits+0x16>
 801779e:	c008      	stmia	r0!, {r3}
 80177a0:	e7f7      	b.n	8017792 <__copybits+0x1c>

080177a2 <__any_on>:
 80177a2:	0002      	movs	r2, r0
 80177a4:	6900      	ldr	r0, [r0, #16]
 80177a6:	b510      	push	{r4, lr}
 80177a8:	3214      	adds	r2, #20
 80177aa:	114b      	asrs	r3, r1, #5
 80177ac:	4298      	cmp	r0, r3
 80177ae:	db12      	blt.n	80177d6 <__any_on+0x34>
 80177b0:	dd0b      	ble.n	80177ca <__any_on+0x28>
 80177b2:	201f      	movs	r0, #31
 80177b4:	4001      	ands	r1, r0
 80177b6:	d008      	beq.n	80177ca <__any_on+0x28>
 80177b8:	0098      	lsls	r0, r3, #2
 80177ba:	5884      	ldr	r4, [r0, r2]
 80177bc:	0020      	movs	r0, r4
 80177be:	40c8      	lsrs	r0, r1
 80177c0:	4088      	lsls	r0, r1
 80177c2:	0001      	movs	r1, r0
 80177c4:	2001      	movs	r0, #1
 80177c6:	428c      	cmp	r4, r1
 80177c8:	d104      	bne.n	80177d4 <__any_on+0x32>
 80177ca:	009b      	lsls	r3, r3, #2
 80177cc:	18d3      	adds	r3, r2, r3
 80177ce:	4293      	cmp	r3, r2
 80177d0:	d803      	bhi.n	80177da <__any_on+0x38>
 80177d2:	2000      	movs	r0, #0
 80177d4:	bd10      	pop	{r4, pc}
 80177d6:	0003      	movs	r3, r0
 80177d8:	e7f7      	b.n	80177ca <__any_on+0x28>
 80177da:	3b04      	subs	r3, #4
 80177dc:	6819      	ldr	r1, [r3, #0]
 80177de:	2900      	cmp	r1, #0
 80177e0:	d0f5      	beq.n	80177ce <__any_on+0x2c>
 80177e2:	2001      	movs	r0, #1
 80177e4:	e7f6      	b.n	80177d4 <__any_on+0x32>
	...

080177e8 <frexp>:
 80177e8:	b570      	push	{r4, r5, r6, lr}
 80177ea:	0014      	movs	r4, r2
 80177ec:	2500      	movs	r5, #0
 80177ee:	6025      	str	r5, [r4, #0]
 80177f0:	4d10      	ldr	r5, [pc, #64]	; (8017834 <frexp+0x4c>)
 80177f2:	004b      	lsls	r3, r1, #1
 80177f4:	000a      	movs	r2, r1
 80177f6:	085b      	lsrs	r3, r3, #1
 80177f8:	42ab      	cmp	r3, r5
 80177fa:	dc1a      	bgt.n	8017832 <frexp+0x4a>
 80177fc:	001d      	movs	r5, r3
 80177fe:	4305      	orrs	r5, r0
 8017800:	d017      	beq.n	8017832 <frexp+0x4a>
 8017802:	4d0d      	ldr	r5, [pc, #52]	; (8017838 <frexp+0x50>)
 8017804:	42ab      	cmp	r3, r5
 8017806:	dc09      	bgt.n	801781c <frexp+0x34>
 8017808:	2200      	movs	r2, #0
 801780a:	4b0c      	ldr	r3, [pc, #48]	; (801783c <frexp+0x54>)
 801780c:	f7ea fb12 	bl	8001e34 <__aeabi_dmul>
 8017810:	2536      	movs	r5, #54	; 0x36
 8017812:	000a      	movs	r2, r1
 8017814:	004b      	lsls	r3, r1, #1
 8017816:	426d      	negs	r5, r5
 8017818:	085b      	lsrs	r3, r3, #1
 801781a:	6025      	str	r5, [r4, #0]
 801781c:	4d08      	ldr	r5, [pc, #32]	; (8017840 <frexp+0x58>)
 801781e:	151b      	asrs	r3, r3, #20
 8017820:	195b      	adds	r3, r3, r5
 8017822:	6825      	ldr	r5, [r4, #0]
 8017824:	18eb      	adds	r3, r5, r3
 8017826:	6023      	str	r3, [r4, #0]
 8017828:	4b06      	ldr	r3, [pc, #24]	; (8017844 <frexp+0x5c>)
 801782a:	401a      	ands	r2, r3
 801782c:	4b06      	ldr	r3, [pc, #24]	; (8017848 <frexp+0x60>)
 801782e:	4313      	orrs	r3, r2
 8017830:	0019      	movs	r1, r3
 8017832:	bd70      	pop	{r4, r5, r6, pc}
 8017834:	7fefffff 	.word	0x7fefffff
 8017838:	000fffff 	.word	0x000fffff
 801783c:	43500000 	.word	0x43500000
 8017840:	fffffc02 	.word	0xfffffc02
 8017844:	800fffff 	.word	0x800fffff
 8017848:	3fe00000 	.word	0x3fe00000

0801784c <__ssprint_r>:
 801784c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801784e:	6893      	ldr	r3, [r2, #8]
 8017850:	b087      	sub	sp, #28
 8017852:	9002      	str	r0, [sp, #8]
 8017854:	000c      	movs	r4, r1
 8017856:	0016      	movs	r6, r2
 8017858:	2b00      	cmp	r3, #0
 801785a:	d063      	beq.n	8017924 <__ssprint_r+0xd8>
 801785c:	6813      	ldr	r3, [r2, #0]
 801785e:	9303      	str	r3, [sp, #12]
 8017860:	2300      	movs	r3, #0
 8017862:	001f      	movs	r7, r3
 8017864:	9305      	str	r3, [sp, #20]
 8017866:	2f00      	cmp	r7, #0
 8017868:	d02e      	beq.n	80178c8 <__ssprint_r+0x7c>
 801786a:	68a5      	ldr	r5, [r4, #8]
 801786c:	42af      	cmp	r7, r5
 801786e:	d347      	bcc.n	8017900 <__ssprint_r+0xb4>
 8017870:	2390      	movs	r3, #144	; 0x90
 8017872:	89a2      	ldrh	r2, [r4, #12]
 8017874:	00db      	lsls	r3, r3, #3
 8017876:	421a      	tst	r2, r3
 8017878:	d042      	beq.n	8017900 <__ssprint_r+0xb4>
 801787a:	2003      	movs	r0, #3
 801787c:	6921      	ldr	r1, [r4, #16]
 801787e:	6823      	ldr	r3, [r4, #0]
 8017880:	1a5b      	subs	r3, r3, r1
 8017882:	9304      	str	r3, [sp, #16]
 8017884:	6963      	ldr	r3, [r4, #20]
 8017886:	4343      	muls	r3, r0
 8017888:	0fd8      	lsrs	r0, r3, #31
 801788a:	18c3      	adds	r3, r0, r3
 801788c:	105b      	asrs	r3, r3, #1
 801788e:	9301      	str	r3, [sp, #4]
 8017890:	9b04      	ldr	r3, [sp, #16]
 8017892:	9801      	ldr	r0, [sp, #4]
 8017894:	3301      	adds	r3, #1
 8017896:	19db      	adds	r3, r3, r7
 8017898:	4283      	cmp	r3, r0
 801789a:	d900      	bls.n	801789e <__ssprint_r+0x52>
 801789c:	9301      	str	r3, [sp, #4]
 801789e:	0553      	lsls	r3, r2, #21
 80178a0:	d544      	bpl.n	801792c <__ssprint_r+0xe0>
 80178a2:	9901      	ldr	r1, [sp, #4]
 80178a4:	9802      	ldr	r0, [sp, #8]
 80178a6:	f7fb fab7 	bl	8012e18 <_malloc_r>
 80178aa:	1e05      	subs	r5, r0, #0
 80178ac:	d114      	bne.n	80178d8 <__ssprint_r+0x8c>
 80178ae:	230c      	movs	r3, #12
 80178b0:	9a02      	ldr	r2, [sp, #8]
 80178b2:	2001      	movs	r0, #1
 80178b4:	6013      	str	r3, [r2, #0]
 80178b6:	2340      	movs	r3, #64	; 0x40
 80178b8:	89a2      	ldrh	r2, [r4, #12]
 80178ba:	4240      	negs	r0, r0
 80178bc:	4313      	orrs	r3, r2
 80178be:	81a3      	strh	r3, [r4, #12]
 80178c0:	2300      	movs	r3, #0
 80178c2:	60b3      	str	r3, [r6, #8]
 80178c4:	6073      	str	r3, [r6, #4]
 80178c6:	e02f      	b.n	8017928 <__ssprint_r+0xdc>
 80178c8:	9b03      	ldr	r3, [sp, #12]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	9305      	str	r3, [sp, #20]
 80178ce:	9b03      	ldr	r3, [sp, #12]
 80178d0:	685f      	ldr	r7, [r3, #4]
 80178d2:	3308      	adds	r3, #8
 80178d4:	9303      	str	r3, [sp, #12]
 80178d6:	e7c6      	b.n	8017866 <__ssprint_r+0x1a>
 80178d8:	9a04      	ldr	r2, [sp, #16]
 80178da:	6921      	ldr	r1, [r4, #16]
 80178dc:	f7fb fcd5 	bl	801328a <memcpy>
 80178e0:	89a3      	ldrh	r3, [r4, #12]
 80178e2:	4a18      	ldr	r2, [pc, #96]	; (8017944 <__ssprint_r+0xf8>)
 80178e4:	401a      	ands	r2, r3
 80178e6:	2380      	movs	r3, #128	; 0x80
 80178e8:	4313      	orrs	r3, r2
 80178ea:	81a3      	strh	r3, [r4, #12]
 80178ec:	9b04      	ldr	r3, [sp, #16]
 80178ee:	6125      	str	r5, [r4, #16]
 80178f0:	18ed      	adds	r5, r5, r3
 80178f2:	6025      	str	r5, [r4, #0]
 80178f4:	003d      	movs	r5, r7
 80178f6:	9b01      	ldr	r3, [sp, #4]
 80178f8:	9a04      	ldr	r2, [sp, #16]
 80178fa:	6163      	str	r3, [r4, #20]
 80178fc:	1a9b      	subs	r3, r3, r2
 80178fe:	60a3      	str	r3, [r4, #8]
 8017900:	42bd      	cmp	r5, r7
 8017902:	d900      	bls.n	8017906 <__ssprint_r+0xba>
 8017904:	003d      	movs	r5, r7
 8017906:	002a      	movs	r2, r5
 8017908:	9905      	ldr	r1, [sp, #20]
 801790a:	6820      	ldr	r0, [r4, #0]
 801790c:	f7ff fb91 	bl	8017032 <memmove>
 8017910:	68a3      	ldr	r3, [r4, #8]
 8017912:	1b5b      	subs	r3, r3, r5
 8017914:	60a3      	str	r3, [r4, #8]
 8017916:	6823      	ldr	r3, [r4, #0]
 8017918:	195d      	adds	r5, r3, r5
 801791a:	68b3      	ldr	r3, [r6, #8]
 801791c:	6025      	str	r5, [r4, #0]
 801791e:	1bdb      	subs	r3, r3, r7
 8017920:	60b3      	str	r3, [r6, #8]
 8017922:	d1d1      	bne.n	80178c8 <__ssprint_r+0x7c>
 8017924:	2000      	movs	r0, #0
 8017926:	6070      	str	r0, [r6, #4]
 8017928:	b007      	add	sp, #28
 801792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801792c:	9a01      	ldr	r2, [sp, #4]
 801792e:	9802      	ldr	r0, [sp, #8]
 8017930:	f7fb fcf0 	bl	8013314 <_realloc_r>
 8017934:	1e05      	subs	r5, r0, #0
 8017936:	d1d9      	bne.n	80178ec <__ssprint_r+0xa0>
 8017938:	6921      	ldr	r1, [r4, #16]
 801793a:	9802      	ldr	r0, [sp, #8]
 801793c:	f7fe ff78 	bl	8016830 <_free_r>
 8017940:	e7b5      	b.n	80178ae <__ssprint_r+0x62>
 8017942:	46c0      	nop			; (mov r8, r8)
 8017944:	fffffb7f 	.word	0xfffffb7f

08017948 <__register_exitproc>:
 8017948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801794a:	4d29      	ldr	r5, [pc, #164]	; (80179f0 <__register_exitproc+0xa8>)
 801794c:	0006      	movs	r6, r0
 801794e:	6828      	ldr	r0, [r5, #0]
 8017950:	9301      	str	r3, [sp, #4]
 8017952:	9100      	str	r1, [sp, #0]
 8017954:	0017      	movs	r7, r2
 8017956:	f7ff fb5f 	bl	8017018 <__retarget_lock_acquire_recursive>
 801795a:	4b26      	ldr	r3, [pc, #152]	; (80179f4 <__register_exitproc+0xac>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	001c      	movs	r4, r3
 8017960:	34fc      	adds	r4, #252	; 0xfc
 8017962:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017964:	2800      	cmp	r0, #0
 8017966:	d103      	bne.n	8017970 <__register_exitproc+0x28>
 8017968:	334d      	adds	r3, #77	; 0x4d
 801796a:	33ff      	adds	r3, #255	; 0xff
 801796c:	0018      	movs	r0, r3
 801796e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017970:	6843      	ldr	r3, [r0, #4]
 8017972:	2b1f      	cmp	r3, #31
 8017974:	dd18      	ble.n	80179a8 <__register_exitproc+0x60>
 8017976:	4b20      	ldr	r3, [pc, #128]	; (80179f8 <__register_exitproc+0xb0>)
 8017978:	2b00      	cmp	r3, #0
 801797a:	d105      	bne.n	8017988 <__register_exitproc+0x40>
 801797c:	6828      	ldr	r0, [r5, #0]
 801797e:	f7ff fb4c 	bl	801701a <__retarget_lock_release_recursive>
 8017982:	2001      	movs	r0, #1
 8017984:	4240      	negs	r0, r0
 8017986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017988:	20c8      	movs	r0, #200	; 0xc8
 801798a:	0040      	lsls	r0, r0, #1
 801798c:	f7fb fa30 	bl	8012df0 <malloc>
 8017990:	2800      	cmp	r0, #0
 8017992:	d0f3      	beq.n	801797c <__register_exitproc+0x34>
 8017994:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017996:	2300      	movs	r3, #0
 8017998:	6002      	str	r2, [r0, #0]
 801799a:	22c4      	movs	r2, #196	; 0xc4
 801799c:	0052      	lsls	r2, r2, #1
 801799e:	6043      	str	r3, [r0, #4]
 80179a0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80179a2:	5083      	str	r3, [r0, r2]
 80179a4:	3204      	adds	r2, #4
 80179a6:	5083      	str	r3, [r0, r2]
 80179a8:	6843      	ldr	r3, [r0, #4]
 80179aa:	2e00      	cmp	r6, #0
 80179ac:	d014      	beq.n	80179d8 <__register_exitproc+0x90>
 80179ae:	009a      	lsls	r2, r3, #2
 80179b0:	1882      	adds	r2, r0, r2
 80179b2:	0011      	movs	r1, r2
 80179b4:	3188      	adds	r1, #136	; 0x88
 80179b6:	600f      	str	r7, [r1, #0]
 80179b8:	2101      	movs	r1, #1
 80179ba:	0004      	movs	r4, r0
 80179bc:	4099      	lsls	r1, r3
 80179be:	3485      	adds	r4, #133	; 0x85
 80179c0:	34ff      	adds	r4, #255	; 0xff
 80179c2:	6865      	ldr	r5, [r4, #4]
 80179c4:	32fc      	adds	r2, #252	; 0xfc
 80179c6:	430d      	orrs	r5, r1
 80179c8:	6065      	str	r5, [r4, #4]
 80179ca:	9d01      	ldr	r5, [sp, #4]
 80179cc:	60d5      	str	r5, [r2, #12]
 80179ce:	2e02      	cmp	r6, #2
 80179d0:	d102      	bne.n	80179d8 <__register_exitproc+0x90>
 80179d2:	68a2      	ldr	r2, [r4, #8]
 80179d4:	4311      	orrs	r1, r2
 80179d6:	60a1      	str	r1, [r4, #8]
 80179d8:	1c5a      	adds	r2, r3, #1
 80179da:	6042      	str	r2, [r0, #4]
 80179dc:	3302      	adds	r3, #2
 80179de:	9a00      	ldr	r2, [sp, #0]
 80179e0:	009b      	lsls	r3, r3, #2
 80179e2:	501a      	str	r2, [r3, r0]
 80179e4:	4b02      	ldr	r3, [pc, #8]	; (80179f0 <__register_exitproc+0xa8>)
 80179e6:	6818      	ldr	r0, [r3, #0]
 80179e8:	f7ff fb17 	bl	801701a <__retarget_lock_release_recursive>
 80179ec:	2000      	movs	r0, #0
 80179ee:	e7ca      	b.n	8017986 <__register_exitproc+0x3e>
 80179f0:	20000a54 	.word	0x20000a54
 80179f4:	0801a930 	.word	0x0801a930
 80179f8:	08012df1 	.word	0x08012df1

080179fc <_calloc_r>:
 80179fc:	b510      	push	{r4, lr}
 80179fe:	4351      	muls	r1, r2
 8017a00:	f7fb fa0a 	bl	8012e18 <_malloc_r>
 8017a04:	1e04      	subs	r4, r0, #0
 8017a06:	d01a      	beq.n	8017a3e <_calloc_r+0x42>
 8017a08:	0003      	movs	r3, r0
 8017a0a:	3b08      	subs	r3, #8
 8017a0c:	685a      	ldr	r2, [r3, #4]
 8017a0e:	2303      	movs	r3, #3
 8017a10:	439a      	bics	r2, r3
 8017a12:	3a04      	subs	r2, #4
 8017a14:	2a24      	cmp	r2, #36	; 0x24
 8017a16:	d819      	bhi.n	8017a4c <_calloc_r+0x50>
 8017a18:	0003      	movs	r3, r0
 8017a1a:	2a13      	cmp	r2, #19
 8017a1c:	d90b      	bls.n	8017a36 <_calloc_r+0x3a>
 8017a1e:	2100      	movs	r1, #0
 8017a20:	3308      	adds	r3, #8
 8017a22:	6001      	str	r1, [r0, #0]
 8017a24:	6041      	str	r1, [r0, #4]
 8017a26:	2a1b      	cmp	r2, #27
 8017a28:	d905      	bls.n	8017a36 <_calloc_r+0x3a>
 8017a2a:	6081      	str	r1, [r0, #8]
 8017a2c:	60c1      	str	r1, [r0, #12]
 8017a2e:	2a24      	cmp	r2, #36	; 0x24
 8017a30:	d007      	beq.n	8017a42 <_calloc_r+0x46>
 8017a32:	0003      	movs	r3, r0
 8017a34:	3310      	adds	r3, #16
 8017a36:	2200      	movs	r2, #0
 8017a38:	601a      	str	r2, [r3, #0]
 8017a3a:	605a      	str	r2, [r3, #4]
 8017a3c:	609a      	str	r2, [r3, #8]
 8017a3e:	0020      	movs	r0, r4
 8017a40:	bd10      	pop	{r4, pc}
 8017a42:	0003      	movs	r3, r0
 8017a44:	6101      	str	r1, [r0, #16]
 8017a46:	3318      	adds	r3, #24
 8017a48:	6141      	str	r1, [r0, #20]
 8017a4a:	e7f4      	b.n	8017a36 <_calloc_r+0x3a>
 8017a4c:	2100      	movs	r1, #0
 8017a4e:	f7fb fc25 	bl	801329c <memset>
 8017a52:	e7f4      	b.n	8017a3e <_calloc_r+0x42>

08017a54 <_sbrk>:
 8017a54:	4b05      	ldr	r3, [pc, #20]	; (8017a6c <_sbrk+0x18>)
 8017a56:	0002      	movs	r2, r0
 8017a58:	6819      	ldr	r1, [r3, #0]
 8017a5a:	2900      	cmp	r1, #0
 8017a5c:	d101      	bne.n	8017a62 <_sbrk+0xe>
 8017a5e:	4904      	ldr	r1, [pc, #16]	; (8017a70 <_sbrk+0x1c>)
 8017a60:	6019      	str	r1, [r3, #0]
 8017a62:	6818      	ldr	r0, [r3, #0]
 8017a64:	1882      	adds	r2, r0, r2
 8017a66:	601a      	str	r2, [r3, #0]
 8017a68:	4770      	bx	lr
 8017a6a:	46c0      	nop			; (mov r8, r8)
 8017a6c:	20006948 	.word	0x20006948
 8017a70:	20006f40 	.word	0x20006f40

08017a74 <_init>:
 8017a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a76:	46c0      	nop			; (mov r8, r8)
 8017a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a7a:	bc08      	pop	{r3}
 8017a7c:	469e      	mov	lr, r3
 8017a7e:	4770      	bx	lr

08017a80 <_fini>:
 8017a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a82:	46c0      	nop			; (mov r8, r8)
 8017a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a86:	bc08      	pop	{r3}
 8017a88:	469e      	mov	lr, r3
 8017a8a:	4770      	bx	lr
